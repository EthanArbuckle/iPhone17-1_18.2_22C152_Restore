void sub_100005470(id a1)
{
  uint64_t vars8;

  qword_100180FA0 = objc_alloc_init(WBBacklightController);

  _objc_release_x1();
}

void sub_100005770(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 16) && !*(void *)(v1 + 24))
  {
    *(unsigned char *)(v1 + 16) = 1;
    BKSHIDServicesSetHIDUILockedState();
    BKSDisplayServicesSetScreenBlanked();
    id v2 = +[FBSystemService sharedInstance];
    [v2 setSystemIdleSleepDisabled:0 forReason:@"backlight"];
  }
}

uint64_t sub_100005800()
{
  BKSHIDServicesSetHIDUILockedState();
  BKSDisplayServicesSetScreenBlanked();

  return BKSHIDServicesSetBacklightFactorWithFadeDurationAsync();
}

void sub_100005B14(id a1)
{
  qword_100180FB0 = objc_alloc_init(CLBVolumeManager);

  _objc_release_x1();
}

id sub_100006128(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startSystemAppServerIfNeeded];
}

void sub_100006544(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  v4 = +[CLFLog commonLog];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (objc_class *)objc_opt_class();
    v6 = NSStringFromClass(v5);
    int v7 = 138412546;
    v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System app client died for %@: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100006CBC(id a1)
{
  qword_100180FC0 = objc_alloc_init(CLBBrightnessManager);

  _objc_release_x1();
}

uint64_t start(int a1, char **a2)
{
  v4 = +[CLFSettings sharedInstance];
  v5 = [v4 restartReason];

  unsigned int v6 = +[UIApplication isRunningInStoreDemoMode];
  uint64_t v7 = CLFRestartReasonUnknown;
  unsigned int v8 = [v5 isEqualToString:CLFRestartReasonUnknown];
  __int16 v9 = +[CLFLog commonLog];
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8) {
    BOOL v11 = v6 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (v10)
    {
      *(_DWORD *)buf = 138412290;
      v33 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ClarityBoard was launched with restart reason: %@", buf, 0xCu);
    }

    id v12 = +[CLFSettings sharedInstance];
    [v12 setRestartReason:v7];
  }
  else
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "ClarityBoard was launched with an unknown restart reason, and the device is in store demo mode. Disabling ClarityBoard now.", buf, 2u);
    }

    v13 = +[CLFSettings sharedInstance];
    [v13 setRestartReason:v7];

    v14 = objc_opt_new();
    id v31 = 0;
    unsigned __int8 v15 = [v14 setClarityBoardEnabled:0 error:&v31];
    id v12 = v31;

    if ((v15 & 1) == 0)
    {
      v16 = +[CLFLog commonLog];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_1000FF0EC((uint64_t)v12, v16);
      }
    }
  }

  if (_set_user_dir_suffix())
  {
    id v17 = NSTemporaryDirectory();
  }
  else
  {
    v18 = +[CLFLog commonLog];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_1000FF044(v18);
    }
  }
  id v19 = (id)FBSystemShellInitialize();
  v20 = +[CADisplay mainDisplay];
  v21 = +[BKSDisplayRenderOverlay existingOverlayForDisplay:v20];

  if (v21)
  {
    v22 = +[CLFLog commonLog];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Detected an overlay at startup. Dismissing it.", buf, 2u);
    }

    v23 = +[BSAnimationSettings settingsWithDuration:0.3];
    [v21 dismissWithAnimation:v23];
  }
  id v24 = +[CLBHIDInterface sharedInstance];
  v25 = (objc_class *)objc_opt_class();
  NSStringFromClass(v25);
  v26 = (NSString *)objc_claimAutoreleasedReturnValue();
  v27 = (objc_class *)objc_opt_class();
  NSStringFromClass(v27);
  v28 = (NSString *)objc_claimAutoreleasedReturnValue();
  uint64_t v29 = UIApplicationMain(a1, a2, v26, v28);

  return v29;
}

uint64_t sub_10000730C()
{
  v0 = +[UIDevice currentDevice];
  if ([v0 userInterfaceIdiom] == (id)1) {
    uint64_t v1 = 29;
  }
  else {
    uint64_t v1 = 0;
  }

  return v1;
}

id sub_100007F4C(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_100007F54(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    v5 = +[CLFLog commonLog];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1000FF368(a1, (uint64_t)v4, v5);
    }
  }
}

void sub_10000823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100008254(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100008264(uint64_t a1)
{
}

id sub_10000826C(uint64_t a1)
{
  id v1 = [objc_alloc((Class)FBMutableProcessExecutionContext) initWithIdentity:*(void *)(a1 + 32)];
  [v1 setLaunchIntent:3];

  return v1;
}

void sub_1000082C0(uint64_t a1, int a2)
{
  id v4 = +[CLFLog commonLog];
  v5 = v4;
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = [*(id *)(a1 + 32) name];
      int v9 = 138412290;
      BOOL v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Launched %@.", (uint8_t *)&v9, 0xCu);
    }
    [*(id *)(a1 + 32) _continueOpenApplicationRequest:*(void *)(a1 + 40) withResult:*(void *)(a1 + 48)];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      sub_1000FF418(a1, v5);
    }
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  unsigned int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0;
}

id sub_100008830(uint64_t a1)
{
  id v2 = +[CLFLog commonLog];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) name];
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@ was terminated. Cleaning up.", (uint8_t *)&v6, 0xCu);
  }
  [*(id *)(a1 + 32) tearDownSceneIfNeeded];
  id v4 = [*(id *)(a1 + 32) terminationWatcher];
  [v4 invalidate];

  return [*(id *)(a1 + 32) setTerminationWatcher:0];
}

uint64_t sub_100008E3C(uint64_t a1)
{
  return _NSRequestConcreteImplementation(v2, v1, a1);
}

uint64_t sub_100008E70()
{
  if (qword_100180FE0 != -1) {
    dispatch_once(&qword_100180FE0, &stru_10015C080);
  }
  if (dword_100180FD8 == 1) {
    return 2;
  }
  if (dword_100180FD8) {
    return 3;
  }
  uint64_t result = dword_10017AE80;
  if (!dword_10017AE80) {
    return result;
  }
  if (dword_10017AE80 == -1)
  {
    +[NSException raise:@"Cannot be simple and have a non-simple passcode type." format:&stru_100167328];
    return 3;
  }
  return 1;
}

void sub_100008F04(id a1)
{
  dword_10017AE80 = -1;
  uint64_t v1 = +[MCProfileConnection sharedConnection];
  dword_100180FD8 = [v1 unlockScreenTypeWithOutSimplePasscodeType:&dword_10017AE80];

  int out_token = 0;
  notify_register_dispatch((const char *)[MCUnlockScreenTypeDidChangeNotification UTF8String], &out_token, (dispatch_queue_t)&_dispatch_main_q, &stru_10015C0C0);
}

void sub_100008F8C(id a1, int a2)
{
  dword_10017AE80 = -1;
  id v2 = +[MCProfileConnection sharedConnection];
  dword_100180FD8 = [v2 unlockScreenTypeWithOutSimplePasscodeType:&dword_10017AE80];
}

id sub_100008FF8()
{
  v0 = +[MCProfileConnection sharedConnection];
  id v1 = [v0 isPasscodeSet];

  return v1;
}

id sub_1000092A0()
{
  if (qword_100180FF0 != -1) {
    dispatch_once(&qword_100180FF0, &stru_10015C120);
  }
  v0 = (void *)qword_100180FE8;

  return v0;
}

void sub_1000092F4(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_1000092A0();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Completed request with error: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000093A0(id a1)
{
  qword_100180FE8 = (uint64_t)os_log_create("com.apple.WhiteBoard", "testing");

  _objc_release_x1();
}

void sub_100009438(id a1)
{
  qword_100180FF8 = objc_alloc_init(CLBSoundController);

  _objc_release_x1();
}

void sub_100009D5C(uint64_t a1)
{
  id v2 = +[CLBSoundController sharedInstance];
  [v2 _cleanupSystemSound:a1 andKill:0];
}

void sub_100009F08(uint64_t a1, uint64_t a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100009FB4;
  v5[3] = &unk_10015C168;
  uint64_t v9 = a2;
  id v6 = *(id *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v7 = v3;
  uint64_t v8 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);
}

id sub_100009FB4(uint64_t a1)
{
  if (*(void *)(a1 + 56) == 5)
  {
    id v2 = +[CLFLog commonLog];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v3;
      uint64_t v4 = "Could not play tone for sound %@";
      v5 = v2;
      uint32_t v6 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v4, (uint8_t *)&v10, v6);
    }
  }
  else
  {
    id v7 = +[TLToneManager sharedToneManager];
    unsigned int v8 = objc_msgSend(v7, "currentToneSoundIDForAlertType:", objc_msgSend(*(id *)(a1 + 40), "type"));

    id v2 = +[CLFLog commonLog];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v10 = 67109120;
      LODWORD(v11) = v8;
      uint64_t v4 = "Alert tone played %u";
      v5 = v2;
      uint32_t v6 = 8;
      goto LABEL_6;
    }
  }

  return [*(id *)(a1 + 48) _cleanupToneAlertForSound:*(void *)(a1 + 32) andKill:0];
}

id sub_10000A868(uint64_t a1)
{
  return [*(id *)(a1 + 32) setText:&stru_100167328];
}

void sub_10000AB88(id a1)
{
  id v3 = objc_alloc_init((Class)FBSApplicationLibraryConfiguration);
  [v3 setApplicationInfoClass:objc_opt_class()];
  [v3 setApplicationPlaceholderClass:objc_opt_class()];
  [v3 setAllowConcurrentLoading:1];
  [v3 setInstalledApplicationFilter:&stru_10015C1F0];
  id v1 = [objc_alloc((Class)FBSApplicationLibrary) initWithConfiguration:v3];
  id v2 = (void *)qword_100181010;
  qword_100181010 = (uint64_t)v1;
}

BOOL sub_10000AC38(id a1, LSApplicationProxy *a2)
{
  id v2 = [(LSApplicationProxy *)a2 bundleIdentifier];
  id v3 = +[CLBOpenApplicationVerifier sharedInstance];
  unsigned __int8 v4 = [v3 shouldOpenAppWithBundleIdentifier:v2];

  return v4;
}

id sub_10000ADC8(uint64_t a1, void *a2)
{
  double v2 = 8.0;
  if (!*(unsigned char *)(a1 + 32)) {
    double v2 = 2.0;
  }
  return [a2 setLevel:v2];
}

uint64_t sub_10000BE0C(uint64_t a1)
{
  return BSDispatchMain();
}

id sub_10000BE90(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [v1 _shouldShowLockScreen];

  return [v1 _updateLockScreenForState:v2];
}

id sub_10000BED0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateHighResolutionAppIcons];
}

void sub_10000BF00(id a1)
{
  id v1 = +[NSBundle accessibilityBundleWithLastPathComponent:@"AssistantUI.axbundle"];
  id v2 = CLFLogCommon();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    id v10 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Loading AssistantUI bundle %{public}@ if needed", buf, 0xCu);
  }

  if (([v1 isLoaded] & 1) == 0)
  {
    id v8 = 0;
    unsigned int v3 = [v1 loadAndReturnError:&v8];
    unsigned __int8 v4 = v8;
    v5 = v4;
    if (!v3 || v4)
    {
      id v7 = CLFLogCommon();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000FF6B4();
      }
    }
    else
    {
      objc_msgSend(objc_msgSend(v1, "principalClass"), "initialize");
      v5 = CLFLogCommon();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
LABEL_11:

        goto LABEL_12;
      }
      id v6 = [v1 principalClass];
      *(_DWORD *)buf = 138543362;
      id v10 = v6;
      id v7 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Loading: %{public}@", buf, 0xCu);
    }

    goto LABEL_11;
  }
LABEL_12:
}

void sub_10000C324(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = CLFLogCommon();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000FF76C();
    }
  }
  else
  {
    id v8 = CLFLogCommon();
    id v7 = v8;
    if (v5)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Finished updating high resolution app icons.", buf, 2u);
      }

      id v24 = v5;
      id v7 = objc_msgSend(v5, "bs_safeArrayForKey:", CLFUpdatedBundleIdentifiersKey);
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v9 = [v7 countByEnumeratingWithState:&v26 objects:v32 count:16];
      if (v9)
      {
        id v10 = v9;
        uint64_t v11 = *(void *)v27;
        do
        {
          id v12 = 0;
          do
          {
            if (*(void *)v27 != v11) {
              objc_enumerationMutation(v7);
            }
            v13 = *(void **)(*((void *)&v26 + 1) + 8 * (void)v12);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              v14 = *(void **)(a1 + 32);
              id v15 = v13;
              v16 = [v14 appLibrary];
              id v17 = [v16 applicationInfoForBundleIdentifier:v15];

              [v17 setNeedsIconImageUpdate];
            }
            else
            {
              v16 = CLFLogCommon();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 138412290;
                id v31 = v13;
                _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Unexpected type for item in updated bundle identifiers: %@", buf, 0xCu);
              }
            }

            id v12 = (char *)v12 + 1;
          }
          while (v10 != v12);
          id v10 = [v7 countByEnumeratingWithState:&v26 objects:v32 count:16];
        }
        while (v10);
      }
      id v5 = v24;
      if (objc_msgSend(v24, "bs_BOOLForKey:", CLFNeedsRetryKey, v6))
      {
        v18 = CLFLogCommon();
        id v6 = v23;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          [*(id *)(a1 + 32) updateHighResolutionAppIconsRetryInterval];
          *(_DWORD *)buf = 134217984;
          id v31 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Scheduling retry for updating high resolution app icons in %.0f seconds.", buf, 0xCu);
        }

        [*(id *)(a1 + 32) updateHighResolutionAppIconsRetryInterval];
        objc_msgSend(*(id *)(a1 + 32), "setUpdateHighResolutionAppIconsRetryInterval:", fmin(v20 + v20, 300.0));
        [*(id *)(a1 + 32) updateHighResolutionAppIconsRetryInterval];
        dispatch_time_t v22 = dispatch_time(0, (uint64_t)(v21 * 1000000000.0));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10000C6D4;
        block[3] = &unk_10015BEB8;
        block[4] = *(void *)(a1 + 32);
        dispatch_after(v22, (dispatch_queue_t)&_dispatch_main_q, block);
      }
      else
      {
        [*(id *)(a1 + 32) setUpdateHighResolutionAppIconsRetryInterval:10.0];
        id v6 = v23;
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      sub_1000FF738();
    }
  }
}

id sub_10000C6D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateHighResolutionAppIcons];
}

void sub_10000D2B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    unsigned __int8 v4 = +[CLFLog commonLog];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      sub_1000FF7D4(a1, (uint64_t)v3, v4);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10000D9E8(uint64_t a1)
{
  [*(id *)(a1 + 32) tearDownSceneIfNeeded];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_10000DD28(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) _windowForSceneWithSessionRole:@"CLBSceneSessionRoleAlert" isSecure:1];
  id v2 = +[CLBNotificationsManager shared];
  [v2 addBulletinNotificationItem:*(void *)(a1 + 40) dndBehavior:*(void *)(a1 + 48) window:v3];
}

id sub_10000E098(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setCanShowBadge:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10000E180(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateEnabledBadgesSetWithSections:a2];
}

void sub_10000E550(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = +[CLFLog commonLog];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1000FF8E0(a1);
    }
  }
}

void sub_10000E914(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = a2;
  [v5 setIdentifier:v3];
  id v4 = +[FBSSceneClientIdentity localIdentity];
  [v5 setClientIdentity:v4];

  [v5 setSpecification:*(void *)(a1 + 40)];
}

void sub_10000E994(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10000EA9C;
  v7[3] = &unk_10015C370;
  int v9 = *(_DWORD *)(a1 + 40);
  char v10 = *(unsigned char *)(a1 + 44);
  id v8 = *(id *)(a1 + 32);
  [v3 updateSettingsWithBlock:v7];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10000EC6C;
  v5[3] = &unk_10015C398;
  id v6 = v3;
  id v4 = v3;
  [v4 updateClientSettingsWithBlock:v5];
}

void sub_10000EA9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setSystemScene:1];
  id v4 = +[FBDisplayManager mainConfiguration];
  [v3 setDisplayConfiguration:v4];

  id v5 = +[UIScreen mainScreen];
  [v5 _referenceBounds];
  objc_msgSend(v3, "setFrame:");

  [v3 setLevel:(double)*(int *)(a1 + 40)];
  [v3 setForeground:*(unsigned __int8 *)(a1 + 44)];
  [v3 setInterfaceOrientation:1];
  if ([v3 isUISubclass])
  {
    id v6 = v3;
    id v7 = +[UISApplicationSupportDisplayEdgeInfo clb_thisDeviceDisplayEdgeInfo];
    objc_msgSend(v7, "clb_applyDisplayEdgeInfoToSceneSettings:", v6);
    id v8 = +[CLFLog commonLog];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      [v6 safeAreaInsetsPortrait];
      char v10 = NSStringFromUIEdgeInsets(v17);
      int v13 = 138412546;
      uint64_t v14 = v9;
      __int16 v15 = 2112;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Scene: %@, safe area insets: %@", (uint8_t *)&v13, 0x16u);
    }
    uint64_t v11 = +[UIUserInterfaceStyleArbiter sharedInstance];
    id v12 = v11;
    if (v11) {
      objc_msgSend(v6, "setUserInterfaceStyle:", objc_msgSend(v11, "currentStyle"));
    }
  }
}

void sub_10000EC6C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 isUISubclass])
  {
    id v3 = [*(id *)(a1 + 32) settings];
    objc_msgSend(v4, "setInterfaceOrientation:", objc_msgSend(v3, "interfaceOrientation"));

    [v4 setStatusBarStyle:0];
  }
}

void sub_10000FA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000FA28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000FA38(uint64_t a1)
{
}

uint64_t sub_10000FA40(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = +[UISMutableApplicationInitializationContext clb_contextForDisplayStyle:*(void *)(a1 + 40) canRequestScenes:*(unsigned __int8 *)(a1 + 48)];

  return _objc_release_x1();
}

BOOL sub_10000FB5C(id a1, UIScene *a2, BOOL *a3)
{
  id v3 = [(UIScene *)a2 delegate];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

uint64_t sub_1000105DC(uint64_t a1)
{
  notify_set_state(dword_10017AEE8, *(unsigned __int8 *)(a1 + 32));

  return notify_post("com.apple.springboard.lockstate");
}

void sub_10001087C(id a1, UIMutableApplicationSceneSettings *a2)
{
  id v2 = a2;
  [(UIMutableApplicationSceneSettings *)v2 setUnderLock:1];
  [(UIMutableApplicationSceneSettings *)v2 setDeactivationReasons:0x40000000];
}

id sub_1000108C8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _enableSecureMode];
}

void sub_1000108D0(id a1, UIMutableApplicationSceneSettings *a2)
{
  id v2 = a2;
  [(UIMutableApplicationSceneSettings *)v2 setDeactivationReasons:0];
  [(UIMutableApplicationSceneSettings *)v2 setUnderLock:0];
}

id sub_10001091C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateLockScreenForegroundness];
}

void sub_1000109A0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "setForeground:", objc_msgSend(v2, "_isShowingLockScreen"));
}

void sub_100010DC0(id a1)
{
  id v5 = +[CLBMobileKeybagManager sharedInstance];
  unsigned int v2 = [v5 isLocked];
  if (v2)
  {
    id v1 = +[CLBIdleSleepManager sharedInstance];
    uint64_t v3 = [v1 isDisplayDim] ^ 1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = +[BiometricInterface sharedInstance];
  [v4 setNeedsAuthentication:v3];

  if (v2) {
}
  }

id sub_100011694(uint64_t a1, void *a2)
{
  [a2 setInterfaceOrientation:*(void *)(a1 + 40)];
  uint64_t v3 = +[UIApplicationSceneTransitionContext transitionContext];
  id v4 = +[BSAnimationSettings settingsWithDuration:*(double *)(a1 + 48)];
  [v3 setAnimationSettings:v4];

  id v5 = [*(id *)(a1 + 32) _systemAnimationFenceCreatingIfNecessary:1];
  [v3 setAnimationFence:v5];

  return v3;
}

void sub_1000119D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100011A00(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100011ABC;
  v5[3] = &unk_10015C560;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  id v6 = v3;
  id v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_100011ABC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleNewDomainData:*(void *)(a1 + 32)];
}

void sub_100013330(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_100013370(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10001338C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_10001344C()
{
  qword_100181020 = objc_opt_new();

  return _objc_release_x1();
}

void sub_1000138C8(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) viewController];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10001397C;
  v5[3] = &unk_10015C5F0;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v2 dismissViewControllerAnimated:v3 completion:v5];
}

id sub_10001397C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  unsigned int v2 = *(void **)(a1 + 32);

  return [v2 setIsPresented:0];
}

id sub_100013BD4(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) delegate];
  [v2 siriPresentation:*(void *)(a1 + 40) requestsPresentationWithOptions:*(void *)(a1 + 48) withHandler:*(void *)(a1 + 56)];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 setIsPresented:1];
}

uint64_t sub_100013FEC()
{
  if (qword_100181030 != -1) {
    dispatch_once(&qword_100181030, &stru_10015C660);
  }
  return qword_100181038;
}

void sub_100014030(id a1)
{
  double v1 = sub_100020180();
  double v3 = v2;
  double v5 = v4;
  double v7 = v6;
  double v8 = sub_100020234();
  uint64_t v9 = sub_10001FE90();
  unsigned int v10 = sub_10001FE50();
  id v11 = sub_100020140();
  qword_100181038 = sub_100014294(v10, (uint64_t)v11, v9, &stru_10015C6A0, &stru_10015C6C0, &stru_10015C6E0, v1, v3, v5, v7, v8);
}

BOOL sub_1000140D8(id a1)
{
  return MGGetSInt32Answer() == 7;
}

BOOL sub_100014104(id a1)
{
  char v1 = MGIsDeviceOfType();
  char v2 = MGIsDeviceOfType();
  char v3 = MGIsDeviceOfType();
  char v4 = MGIsDeviceOfType();
  char v5 = MGIsDeviceOfType();
  return v3 | v4 | v1 | v2 | v5 | MGIsDeviceOfType();
}

BOOL sub_100014264(id a1)
{
  sub_10001FF68();

  return BSFloatEqualToFloat();
}

uint64_t sub_100014294(unsigned int a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, double a7, double a8, double a9, double a10, double a11)
{
  id v19 = a4;
  double v20 = a5;
  double v21 = a6;
  uint64_t v41 = 0;
  v42 = &v41;
  uint64_t v43 = 0x2020000000;
  uint64_t v44 = 0;
  uint64_t v37 = 0;
  v38 = &v37;
  uint64_t v39 = 0x2020000000;
  char v40 = 0;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_100014854;
  v36[3] = &unk_10015C708;
  *(double *)&v36[6] = a9;
  *(double *)&v36[7] = a10;
  *(double *)&v36[8] = a11;
  v36[9] = a3;
  v36[10] = a2;
  v36[4] = &v41;
  v36[5] = &v37;
  sub_100025408((uint64_t)v36);
  if (!*((unsigned char *)v38 + 24))
  {
    if (a1 == 2)
    {
      if (a2 == 2)
      {
        if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 42;
        }
        else if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 40;
        }
        else if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 39;
        }
        else if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 37;
        }
        else if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 38;
        }
        else if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 36;
        }
        else
        {
          int v27 = BSSizeGreaterThanOrEqualToSize();
          dispatch_time_t v22 = v42;
          if (v27) {
            uint64_t v23 = 41;
          }
          else {
            uint64_t v23 = 34;
          }
        }
      }
      else if (BSSizeGreaterThanOrEqualToSize())
      {
        dispatch_time_t v22 = v42;
        uint64_t v23 = 33;
      }
      else if (BSSizeGreaterThanOrEqualToSize())
      {
        dispatch_time_t v22 = v42;
        uint64_t v23 = 32;
      }
      else
      {
        int v25 = BSSizeGreaterThanOrEqualToSize();
        dispatch_time_t v22 = v42;
        if (v25) {
          uint64_t v23 = 31;
        }
        else {
          uint64_t v23 = 29;
        }
      }
    }
    else
    {
      if (a1 > 1) {
        goto LABEL_47;
      }
      if (a2 == 2)
      {
        if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 23;
        }
        else if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 13;
        }
        else if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 5;
        }
        else if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 21;
        }
        else if (BSSizeGreaterThanOrEqualToSize())
        {
          dispatch_time_t v22 = v42;
          uint64_t v23 = 11;
        }
        else
        {
          int v26 = BSSizeGreaterThanOrEqualToSize();
          dispatch_time_t v22 = v42;
          if (v26) {
            uint64_t v23 = 3;
          }
          else {
            uint64_t v23 = 4;
          }
        }
      }
      else if (BSSizeGreaterThanOrEqualToSize())
      {
        dispatch_time_t v22 = v42;
        uint64_t v23 = 2;
      }
      else
      {
        int v24 = BSSizeGreaterThanOrEqualToSize();
        dispatch_time_t v22 = v42;
        if (!v24)
        {
          v42[3] = 0;
          goto LABEL_47;
        }
        uint64_t v23 = 1;
      }
    }
    v22[3] = v23;
  }
LABEL_47:
  uint64_t v28 = v42[3];
  switch(v28)
  {
    case 9:
    case 15:
      BOOL v29 = v20[2](v20) == 0;
      uint64_t v30 = 9;
      uint64_t v31 = 15;
      goto LABEL_54;
    case 10:
    case 16:
      BOOL v29 = v20[2](v20) == 0;
      uint64_t v30 = 10;
      uint64_t v31 = 16;
      goto LABEL_54;
    case 11:
    case 17:
      BOOL v29 = v20[2](v20) == 0;
      uint64_t v30 = 11;
      uint64_t v31 = 17;
      goto LABEL_54;
    case 12:
    case 18:
      BOOL v29 = v20[2](v20) == 0;
      uint64_t v30 = 12;
      uint64_t v31 = 18;
      goto LABEL_54;
    case 13:
    case 19:
      BOOL v29 = v20[2](v20) == 0;
      uint64_t v30 = 13;
      uint64_t v31 = 19;
      goto LABEL_54;
    case 14:
    case 20:
      BOOL v29 = v20[2](v20) == 0;
      uint64_t v30 = 14;
      uint64_t v31 = 20;
LABEL_54:
      if (v29) {
        uint64_t v28 = v30;
      }
      else {
        uint64_t v28 = v31;
      }
      v32 = v42;
      goto LABEL_58;
    case 29:
    case 30:
      int v34 = v19[2](v19);
      v32 = v42;
      if (v34) {
        uint64_t v28 = 30;
      }
      else {
        uint64_t v28 = 29;
      }
      goto LABEL_58;
    case 35:
    case 36:
      int v35 = v21[2](v21);
      v32 = v42;
      if (v35) {
        uint64_t v28 = 35;
      }
      else {
        uint64_t v28 = 36;
      }
LABEL_58:
      v32[3] = v28;
      break;
    default:
      break;
  }
  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v41, 8);

  return v28;
}

void sub_1000147BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100014854(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_1000254CC(a2, (uint64_t)&v12);
  v10[0] = v12;
  v10[1] = v13;
  uint64_t v11 = v14;
  long long v6 = *(_OWORD *)(a1 + 64);
  v8[0] = *(_OWORD *)(a1 + 48);
  v8[1] = v6;
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t result = sub_100025950((uint64_t)v10, (uint64_t)v8);
  if (result)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

void sub_100015474(uint64_t a1, void *a2)
{
  id v8 = a2;
  char v3 = [*(id *)(*(void *)(a1 + 32) + 32) defaultSceneIdentifier];
  [v8 setIdentifier:v3];

  char v4 = [*(id *)(*(void *)(a1 + 32) + 32) processIdentity];
  [v8 setClientIdentity:v4];

  unsigned int v5 = [*(id *)(*(void *)(a1 + 32) + 32) supportsClarityUI];
  long long v6 = *(id **)(a1 + 32);
  if (v5)
  {
    [v6 sceneSpecificationClass];
  }
  else
  {
    [v6[4] wantsFullScreenInClarityUI];
    objc_opt_class();
  }
  double v7 = objc_opt_new();
  [v8 setSpecification:v7];
}

void sub_10001555C(uint64_t a1, void *a2)
{
  id v5 = a2;
  [*(id *)(a1 + 32) _updateDisplayStyleForSettings:v5];
  [v5 setInterfaceOrientationMode:1];
  [v5 setForeground:0];
  [v5 setInterfaceOrientation:1];
  [v5 setLevel:1.0];
  [v5 setStatusBarDisabled:1];
  char v3 = +[UIUserInterfaceStyleArbiter sharedInstance];
  char v4 = v3;
  if (v3) {
    objc_msgSend(v5, "setUserInterfaceStyle:", objc_msgSend(v3, "currentStyle"));
  }
  [v5 applyDefaultClarityUISettings];
}

id sub_100015620(uint64_t a1, void *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100015694;
  v3[3] = &unk_10015C398;
  v3[4] = *(void *)(a1 + 32);
  return [a2 updateClientSettingsWithBlock:v3];
}

uint64_t sub_100015694(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 48) + 16))();
}

void sub_1000156A8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (*(void *)(a1 + 32))
  {
    if ((int)[v7 pid] <= 0) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
    (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v6);
  }
}

void sub_100015728(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = v6[5];
  if (v7)
  {
    (*(void (**)(uint64_t, id, id, void))(v7 + 16))(v7, v17, v5, v6[1]);
    id v6 = *(void **)(a1 + 32);
  }
  if (v6[2])
  {
    if (([v17 isForeground] & 1) == 0
      && [*(id *)(*(void *)(a1 + 32) + 16) isForeground])
    {
      [v17 setForeground:1];
    }
    [*(id *)(a1 + 40) prepareTransitionContext:v5];
    id v8 = [*(id *)(*(void *)(a1 + 32) + 16) systemRequest];
    uint64_t v9 = [v8 options];

    unsigned int v10 = [v9 dictionary];
    uint64_t v11 = objc_msgSend(v10, "bs_safeArrayForKey:", FBSOpenApplicationOptionKeyActions);

    long long v12 = [v9 url];
    if ([v11 count]) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v12 == 0;
    }
    if (!v13)
    {
      uint64_t v14 = +[NSMutableSet set];
      __int16 v15 = v14;
      if (v11) {
        [v14 addObjectsFromArray:v11];
      }
      if (v12)
      {
        id v16 = [objc_alloc((Class)UIOpenURLAction) initWithURL:v12];
        [v15 addObject:v16];
      }
      [v5 setActions:v15];
    }
  }
  if (*(void *)(a1 + 48)) {
    objc_msgSend(v5, "setExecutionContext:");
  }
}

void sub_100016C2C(uint64_t a1)
{
}

void sub_100016C3C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2 == 8)
  {
    mach_port_mod_refs(mach_task_self_, *(_DWORD *)(a1 + 40), 1u, -1);
    goto LABEL_12;
  }
  if (a2 == 2)
  {
    msg = (_DWORD *)dispatch_mach_msg_get_msg();
    if ((*msg & 0x80000000) != 0
      || ((uint64_t v7 = msg, v8 = msg[1], v8 >= 0x1C) ? (v9 = v8 == 0) : (v9 = 0), !v9))
    {
      unsigned int v10 = +[CLFLog commonLog];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000FFDF0(v10);
      }
      goto LABEL_10;
    }
    uint64_t v11 = msg[2];
    msg[2] = 0;
    unsigned int v10 = +[BSAuditToken tokenFromMachMessage:msg];
    if (qword_100181060 != -1) {
      dispatch_once(&qword_100181060, &stru_10015C810);
    }
    uint64_t v23 = 0;
    id v12 = (id)qword_100181058;
    unsigned __int8 v13 = [v12 authenticateAuditToken:v10 error:&v23];
    id v14 = (id)v23;

    if (v13)
    {

      uint64_t v15 = v7[5];
      id v16 = [objc_alloc((Class)NSData) initWithBytes:v7 + 7 length:v7[1] - 28];
      if (v16)
      {
        id v17 = v16;
        uint64_t v23 = 100;
        uint64_t v18 = +[NSPropertyListSerialization propertyListWithData:v16 options:0 format:&v23 error:0];
        objc_opt_class();
        id v19 = 0;
        if (objc_opt_isKindOfClass()) {
          id v19 = v18;
        }

        if (v19)
        {
          [*(id *)(a1 + 32) dispatchUserNotification:v19 flags:v15 replyPort:v11 auditToken:v10 presenter:qword_100181040];

LABEL_10:
          goto LABEL_12;
        }
      }
    }
    else
    {
      double v20 = +[CLFLog commonLog];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_1000FFD3C(v10, (uint64_t)v14, v20);
      }
    }
    double v21 = (char *)malloc_type_calloc(0x1CuLL, 1uLL, 0x8C45D5C1uLL);
    if (v21)
    {
      dispatch_time_t v22 = (mach_msg_header_t *)v21;
      *(void *)double v21 = 0x1C00000012;
      *((_DWORD *)v21 + 2) = v11;
      *((_DWORD *)v21 + 3) = 0;
      *(void *)(v21 + 20) = 3;
      if (mach_msg((mach_msg_header_t *)v21, 1, 0x1Cu, 0, 0, 0, 0)) {
        mach_msg_destroy(v22);
      }
      free(v22);
    }
    goto LABEL_10;
  }
LABEL_12:
}

void sub_100016F04(id a1)
{
  qword_100181058 = (uint64_t)[objc_alloc((Class)FBServiceClientAuthenticator) initWithEntitlement:@"com.apple.springboard.CFUserNotification" additionalCredentials:3];

  _objc_release_x1();
}

uint64_t sub_1000173C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100017488(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100017550(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000177B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000177D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = +[CLFLog commonLog];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Keyboard scene now available: %@", (uint8_t *)&v6, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateForKeyboardScene];
}

id sub_100017C4C(uint64_t a1, void *a2)
{
  char v2 = (double *)&unk_10010EB88;
  if (!*(unsigned char *)(a1 + 32)) {
    char v2 = (double *)&qword_10010EB80;
  }
  return [a2 setLevel:*v2];
}

void sub_100018868(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setIdentifier:v3];
  id v5 = [*(id *)(a1 + 40) identity];
  [v4 setClientIdentity:v5];

  id v6 = +[FBSSceneSpecification specification];
  [v4 setSpecification:v6];
}

void sub_100018904(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setSettings:v3];
  [v4 setClientSettings:*(void *)(a1 + 40)];
}

void sub_100018F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10, id *a11)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v14 - 112));
  _Unwind_Resume(a1);
}

void sub_100018FFC()
{
}

void sub_100019004()
{
}

void sub_10001900C(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = [a2 scene];
  id v6 = *(void **)(a1 + 32);
  id v7 = [v5 clientSettings];
  uint64_t v8 = [v6 navigationTitlesForClientSettings:v7];

  BOOL v9 = +[CLFLog commonLog];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = [v5 identifier];
    int v13 = 138412546;
    uint64_t v14 = v10;
    __int16 v15 = 2112;
    id v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Observed navigation titles for %@: %@", (uint8_t *)&v13, 0x16u);
  }
  uint64_t v11 = [WeakRetained delegate];
  id v12 = [v5 identifier];
  [v11 sceneManager:WeakRetained didObserveUpdatedNavigationTitles:v8 forSceneID:v12];
}

void sub_100019178(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = [a2 scene];
  id v6 = [*(id *)(a1 + 32) chromeVisibleForScene:v5];
  id v7 = +[CLFLog commonLog];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [v5 identifier];
    int v11 = 138412546;
    id v12 = v8;
    __int16 v13 = 1024;
    int v14 = (int)v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Observed back visible for %@: %i", (uint8_t *)&v11, 0x12u);
  }
  BOOL v9 = [WeakRetained delegate];
  unsigned int v10 = [v5 identifier];
  [v9 sceneManager:WeakRetained didObserveUpdatedChromeVisible:v6 forSceneID:v10];
}

void sub_1000192C8(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = [a2 scene];
  id v6 = *(void **)(a1 + 32);
  id v7 = [v5 clientSettings];
  uint64_t v8 = [v6 bottomBarTransitionProgressForClientSettings:v7];

  BOOL v9 = +[CLFLog commonLog];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = [v5 identifier];
    int v13 = 138412546;
    int v14 = v10;
    __int16 v15 = 2112;
    id v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Observed bottom bar transition progress for %@: %@", (uint8_t *)&v13, 0x16u);
  }
  int v11 = [WeakRetained delegate];
  id v12 = [v5 identifier];
  [v11 sceneManager:WeakRetained didObserveUpdatedBottomBarTransitionProgress:v8 forSceneID:v12];
}

void sub_100019434(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = [a2 scene];
  id v5 = [v4 clientSettings];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v6 = [v5 supportedInterfaceOrientations];
    id v7 = +[CLFLog commonLog];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = [v4 identifier];
      BOOL v9 = BSInterfaceOrientationMaskDescription();
      int v12 = 138412546;
      int v13 = v8;
      __int16 v14 = 2112;
      __int16 v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Observed supported interface orientations for %@: %@", (uint8_t *)&v12, 0x16u);
    }
    unsigned int v10 = [WeakRetained delegate];
    int v11 = [v4 identifier];
    [v10 sceneManager:WeakRetained didObserveUpdatedSupportedInterfaceOrientations:v6 forSceneID:v11];
  }
}

void sub_1000195C4(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = [a2 scene];
  id v5 = [v4 clientSettings];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v6 = [v5 interfaceOrientation];
    id v7 = +[CLFLog commonLog];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = [v4 identifier];
      BOOL v9 = BSInterfaceOrientationDescription();
      int v12 = 138412546;
      int v13 = v8;
      __int16 v14 = 2112;
      __int16 v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Observed interface orientation for %@: %@", (uint8_t *)&v12, 0x16u);
    }
    unsigned int v10 = [WeakRetained delegate];
    int v11 = [v4 identifier];
    [v10 sceneManager:WeakRetained didObserveUpdatedInterfaceOrientation:v6 forSceneID:v11];
  }
}

void sub_100019754(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = [a2 scene];
  id v5 = [v4 clientSettings];
  id v6 = [v5 preferredInterfaceOrientation];
  id v7 = +[CLFLog commonLog];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [v4 identifier];
    BOOL v9 = BSInterfaceOrientationDescription();
    int v12 = 138412546;
    int v13 = v8;
    __int16 v14 = 2112;
    __int16 v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Observed preferred interface orientation for %@: %@", (uint8_t *)&v12, 0x16u);
  }
  unsigned int v10 = [WeakRetained delegate];
  int v11 = [v4 identifier];
  [v10 sceneManager:WeakRetained didObserveUpdatedPreferredInterfaceOrientation:v6 forSceneID:v11];
}

void sub_1000198C4(id a1, void *a2)
{
  char v2 = [a2 scene];
  uint64_t v3 = [v2 clientSettings];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = [v3 idleTimerDisabled];
    id v5 = [v2 settings];
    unsigned int v6 = [v5 isForeground];

    id v7 = +[CLFLog commonLog];
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v8)
      {
        BOOL v9 = [v2 identifier];
        int v11 = 138412546;
        int v12 = v9;
        __int16 v13 = 1024;
        int v14 = (int)v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Observed idle timer disabled for %@: %i", (uint8_t *)&v11, 0x12u);
      }
      id v7 = +[CLBIdleSleepManager sharedInstance];
      [v7 setIdleTimerDisabled:v4 forReason:@"appRequested"];
    }
    else if (v8)
    {
      unsigned int v10 = [v2 identifier];
      int v11 = 138412546;
      int v12 = v10;
      __int16 v13 = 1024;
      int v14 = (int)v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Ignoring idle timer disabled request for %@: %i because scene is not foreground", (uint8_t *)&v11, 0x12u);
    }
  }
}

void sub_10001A284(id a1, FBSceneCreating *a2)
{
  char v2 = a2;
  [(FBSceneCreating *)v2 setIdentifier:@"InputUI"];
  uint64_t v3 = +[RBSProcessIdentity identityForAngelJobLabel:@"com.apple.InputUI"];
  [(FBSceneCreating *)v2 setClientIdentity:v3];

  id v4 = +[UIApplicationSceneSpecification specification];
  [(FBSceneCreating *)v2 setSpecification:v4];
}

void sub_10001A320(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setSystemScene:1];
  [v3 setDisplayConfiguration:*(void *)(a1 + 32)];
  [*(id *)(a1 + 32) bounds];
  objc_msgSend(v3, "setFrame:");
  [v3 setForeground:1];
  [v3 setLevel:4.0];
  objc_msgSend(v3, "setInterfaceOrientation:", objc_msgSend((id)qword_100186478, "systemInterfaceOrientation"));
  if ([v3 isUISubclass]) {
    [v3 setInterfaceOrientationMode:2];
  }
}

void sub_10001A53C(uint64_t a1)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  char v2 = [*(id *)(a1 + 32) workspace];
  id v3 = [v2 allScenes];

  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        BOOL v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        BOOL v9 = [v8 settings];
        if ([v9 isUISubclass])
        {
          unsigned int v10 = [v9 displayIdentity];
          unsigned int v11 = [v10 isMainDisplay];

          if (v11)
          {
            v12[0] = _NSConcreteStackBlock;
            v12[1] = 3221225472;
            v12[2] = sub_10001A6F0;
            v12[3] = &unk_10015C9A8;
            v12[4] = *(void *)(a1 + 40);
            [v8 performUpdate:v12];
          }
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }
}

void sub_10001A6F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  [a2 setUserInterfaceStyle:v5];
  id v7 = +[UIScene _synchronizedDrawingFence];
  [v6 setAnimationFence:v7];

  BOOL v8 = &kCAMediaTimingFunctionEaseOut;
  if (*(void *)(a1 + 32) != 2) {
    BOOL v8 = &kCAMediaTimingFunctionEaseIn;
  }
  id v10 = +[CAMediaTimingFunction functionWithName:*v8];
  BOOL v9 = +[BSAnimationSettings settingsWithDuration:v10 timingFunction:0.5];
  [v6 setAnimationSettings:v9];
}

id sub_10001B064(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) hotLevel];
  notify_get_state((int)[*(id *)(a1 + 32) hotToken], (uint64_t *)(*(void *)(a1 + 32) + 24));
  id result = [*(id *)(a1 + 32) hotLevel];
  if (v2 != result)
  {
    if ((unint64_t)result > 0x28 || (unint64_t)v2 >= 0x29) {
      objc_msgSend(*(id *)(a1 + 32), "_logThermalEvent:", @"ThermalLevel,%llu", result);
    }
    id v4 = *(void **)(a1 + 32);
    return [v4 _respondToCurrentThermalCondition];
  }
  return result;
}

id sub_10001B108(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) coldLevel];
  notify_get_state((int)[*(id *)(a1 + 32) coldToken], (uint64_t *)(*(void *)(a1 + 32) + 32));
  id result = [*(id *)(a1 + 32) coldLevel];
  if (v2 != result)
  {
    id v4 = *(void **)(a1 + 32);
    return [v4 _respondToCurrentThermalCondition];
  }
  return result;
}

id sub_10001B178(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) sunLevel];
  notify_get_state((int)[*(id *)(a1 + 32) sunToken], (uint64_t *)(*(void *)(a1 + 32) + 40));
  id result = [*(id *)(a1 + 32) sunLevel];
  if (v2 != result)
  {
    id v4 = *(void **)(a1 + 32);
    return [v4 _respondToCurrentThermalCondition];
  }
  return result;
}

void sub_10001B248(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_10001B67C(id a1)
{
  byte_100181068 = MGGetBoolAnswer();
}

void sub_10001B6E8(id a1)
{
  byte_100181078 = MGGetBoolAnswer();
}

void sub_10001B764(id a1)
{
  uint64_t v1 = MGCopyAnswer();
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  id v3 = (void *)qword_100181088;
  qword_100181088 = v2;
}

void sub_10001B800(id a1)
{
  CFStringRef v4 = @"com.apple.webapp";
  uint64_t v1 = +[NSArray arrayWithObjects:&v4 count:1];
  uint64_t v2 = +[NSSet setWithArray:v1];
  id v3 = (void *)qword_100181098;
  qword_100181098 = v2;
}

void sub_10001D1E4(id a1)
{
  id v1 = objc_alloc_init((Class)NSCache);
  uint64_t v2 = (void *)qword_1001810A8;
  qword_1001810A8 = (uint64_t)v1;

  id v3 = +[UIDevice currentDevice];
  if ([v3 userInterfaceIdiom] == (id)1) {
    uint64_t v4 = 20;
  }
  else {
    uint64_t v4 = 10;
  }
  [(id)qword_1001810A8 setCountLimit:v4];

  uint64_t v5 = (void *)qword_1001810A8;

  [v5 setName:@"FBSBundleInfo+ClarityBoard"];
}

void sub_10001D470(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001D50C;
  v6[3] = &unk_10015CAD8;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
}

id sub_10001D50C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = [*(id *)(a1 + 40) _iconCache];
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = [*(id *)(a1 + 40) _iconKey];
    [v2 setObject:v3 forKey:v4];

    [*(id *)(a1 + 40) setNeedsIconImageUpdate:0];
  }
  [*(id *)(a1 + 40) setIsUpdatingIcon:0];
  id v5 = *(void **)(a1 + 40);

  return _[v5 _notifyObserversOfIconImageChange];
}

void sub_10001D5A0(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void (**)(void))(a1[5] + 16);
    v2();
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001D65C;
    block[3] = &unk_10015CB28;
    uint64_t v3 = (void *)a1[5];
    block[4] = a1[4];
    uint64_t v6 = a1[6];
    id v5 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

id sub_10001D65C(uint64_t a1)
{
  [*(id *)(a1 + 32) handleFirstUnlockIfNeeded];
  double v2 = *(double *)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);

  return [v3 _fetchIconServicesIconWithScreenScale:v4 completion:v2];
}

void sub_10001D754(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) bundleIdentifier];
  uint64_t v3 = CLFAppIconURLForBundleIdentifier();
  uint64_t v4 = +[NSData dataWithContentsOfURL:v3];
  id v5 = +[UIImage imageWithData:v4];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10001D998(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3 && ([v3 placeholder] & 1) == 0)
  {
    id v5 = [v6 CGImage];
    [v6 scale];
    uint64_t v4 = +[UIImage imageWithCGImage:scale:orientation:](UIImage, "imageWithCGImage:scale:orientation:", v5, 0);
  }
  else
  {
    uint64_t v4 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

CFStringRef sub_10001DCB8(uint64_t a1)
{
  if (a1) {
    return @"compatibility";
  }
  else {
    return @"full screen";
  }
}

void sub_10001E4B0(id a1)
{
  qword_1001810B8 = objc_alloc_init(CLBHIDInterface);

  _objc_release_x1();
}

uint64_t sub_10001EE10(uint64_t a1)
{
  qword_1001810D0 = objc_msgSend(*(id *)(a1 + 32), "clb_displayShapeForScreenType:", sub_100013FEC());

  return _objc_release_x1();
}

double sub_10001EE60(uint64_t a1)
{
  switch(a1)
  {
    case 3:
    case 4:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 3;
      goto LABEL_20;
    case 5:
    case 6:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 5;
      goto LABEL_20;
    case 7:
    case 8:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 7;
      goto LABEL_20;
    case 9:
    case 10:
      double v1 = 0.96;
      uint64_t v2 = a1;
      uint64_t v3 = 9;
      goto LABEL_20;
    case 11:
    case 12:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 11;
      goto LABEL_20;
    case 13:
    case 14:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 13;
      goto LABEL_20;
    case 15:
    case 16:
      double v1 = 0.96;
      uint64_t v2 = a1;
      uint64_t v3 = 15;
      goto LABEL_20;
    case 17:
    case 18:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 17;
      goto LABEL_20;
    case 19:
    case 20:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 19;
      goto LABEL_20;
    case 21:
    case 22:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 21;
      goto LABEL_20;
    case 23:
    case 24:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 23;
      goto LABEL_20;
    case 25:
    case 26:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 25;
      goto LABEL_20;
    case 27:
    case 28:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 27;
      goto LABEL_20;
    case 36:
    case 37:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 36;
      goto LABEL_20;
    case 38:
    case 39:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 38;
      goto LABEL_20;
    case 40:
    case 41:
    case 42:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 40;
      goto LABEL_20;
    case 43:
    case 44:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 43;
      goto LABEL_20;
    case 45:
    case 46:
    case 47:
      double v1 = 1.0;
      uint64_t v2 = a1;
      uint64_t v3 = 45;
LABEL_20:
      double result = sub_10001F0A8(v1, a1, v2, v3);
      break;
    default:
      sub_1000254CC(a1, (uint64_t)v5);
      double result = v6;
      break;
  }
  return result;
}

double sub_10001F0A8(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  sub_1000254CC(a3, (uint64_t)v10);
  uint64_t v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  sub_1000254CC(a4, (uint64_t)&v7);
  return *(double *)&v8 * (*(double *)&v7 / *(double *)v10) * a1;
}

id sub_10001FB44(uint64_t a1)
{
  byte_1001810D8 = 0;
  [*(id *)(a1 + 32) stop];
  uint64_t v2 = *(void **)(a1 + 40);

  return [v2 showNextAlert];
}

id sub_10001FCA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) showNextAlert];
}

id sub_10001FD58(uint64_t a1)
{
  return [*(id *)(a1 + 32) showNextAlert];
}

double sub_10001FE30(uint64_t a1)
{
  double result = 0.0;
  if ((unint64_t)(a1 - 3) <= 0x2C) {
    return dbl_10010EEE8[a1 - 3];
  }
  return result;
}

id sub_10001FE50()
{
  v0 = +[BSPlatform sharedInstance];
  id v1 = [v0 deviceClass];

  return v1;
}

uint64_t sub_10001FE90()
{
  if (qword_1001810E8 != -1) {
    dispatch_once(&qword_1001810E8, &stru_10015CBE0);
  }
  return qword_1001810E0;
}

void sub_10001FED4(id a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)MGCopyAnswer();
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    CFDictionaryGetValue(v1, @"ArtworkDeviceSubType");
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    if (v3) {
      qword_1001810E0 = (int)[v3 intValue];
    }
    CFRelease(v2);
  }
}

double sub_10001FF68()
{
  if (qword_1001810F8 != -1) {
    dispatch_once(&qword_1001810F8, &stru_10015CC00);
  }
  return *(double *)&qword_1001810F0;
}

void sub_10001FFAC(id a1)
{
  MGGetFloat32Answer();
  *(double *)&qword_1001810F0 = v1;
}

void sub_100020030(id a1)
{
  qword_100181100 = objc_alloc_init(CLBDNDManager);

  _objc_release_x1();
}

id sub_100020140()
{
  v0 = +[BSPlatform sharedInstance];
  id v1 = [v0 homeButtonType];

  return v1;
}

double sub_100020180()
{
  v0 = sub_1000201E0();
  [v0 bounds];
  double v2 = v1;

  return v2;
}

id sub_1000201E0()
{
  if (qword_100181118 != -1) {
    dispatch_once(&qword_100181118, &stru_10015CC40);
  }
  v0 = (void *)qword_100181110;

  return v0;
}

double sub_100020234()
{
  v0 = sub_1000201E0();
  [v0 pointScale];
  double v2 = v1;

  return v2;
}

void sub_100020274(id a1)
{
  id v3 = +[FBDisplayManager sharedInstance];
  uint64_t v1 = [v3 mainConfiguration];
  double v2 = (void *)qword_100181110;
  qword_100181110 = v1;
}

void sub_100020324(id a1)
{
  qword_100181120 = objc_alloc_init(CLBIdleSleepManager);

  _objc_release_x1();
}

void sub_1000205C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000205EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v5 = [v3 eventMask];
  double v6 = +[CLFLog commonLog];
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dimming for idle", (uint8_t *)&v8, 2u);
    }

    [WeakRetained dimDisplay];
  }
  else
  {
    if (v7)
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reset idle for event %@", (uint8_t *)&v8, 0xCu);
    }

    [WeakRetained resetIdleTimerAndUndim:1];
  }
}

void sub_100020DA0(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"CLBScreenDidDimNotification" object:0];
}

id sub_1000216A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[a1 _powerChangedOnService:a2 messageType:a3 messageArgument:a4];
}

uint64_t sub_100022B04(uint64_t a1)
{
  qword_100181150 = objc_msgSend(*(id *)(a1 + 32), "clb_displayEdgeInfoForScreenType:", sub_100013FEC());

  return _objc_release_x1();
}

void sub_10002334C(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 error];
  if (v4) {
    goto LABEL_7;
  }
  uint64_t v4 = [a1[4] clientProcess];
  unsigned __int8 v5 = [v4 bundleIdentifier];
  if (![v5 isEqualToString:CLBInCallServiceBundleIdentifier]
    || ![(id)qword_100186478 isShowingLockScreen])
  {

LABEL_7:
    goto LABEL_8;
  }
  double v6 = [a1[4] options];
  BOOL v7 = [v6 dictionary];
  if (objc_msgSend(v7, "bs_BOOLForKey:", FBSOpenApplicationOptionKeyUnlockDevice))
  {

LABEL_11:
    id v11 = a1[5];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100023530;
    v12[3] = &unk_10015CCE8;
    v12[4] = v11;
    id v13 = a1[4];
    id v14 = v3;
    id v15 = a1[6];
    [v11 _attemptToDismissLockScreenWithCompletion:v12];

    goto LABEL_9;
  }
  int v8 = [a1[4] options];
  id v9 = [v8 dictionary];
  unsigned __int8 v10 = objc_msgSend(v9, "bs_BOOLForKey:", FBSOpenApplicationOptionKeyPromptUnlockDevice);

  if (v10) {
    goto LABEL_11;
  }
LABEL_8:
  [a1[5] _finishHandlingOpenApplicationRequest:a1[4] verifierResult:v3 completion:a1[6]];
LABEL_9:
}

id sub_100023530(uint64_t a1)
{
  return [*(id *)(a1 + 32) _finishHandlingOpenApplicationRequest:*(void *)(a1 + 40) verifierResult:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_100023740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
}

void sub_100023780(uint64_t a1)
{
  double v2 = +[CLFLog commonLog];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Lock screen was dismissed.", v6, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v4 = objc_loadWeakRetained((id *)(a1 + 48));
  unsigned __int8 v5 = [WeakRetained lockScreenDidCompleteToken];
  [v4 removeObserver:v5];

  [WeakRetained setLockScreenDidCompleteToken:0];
}

void sub_100023DAC(uint64_t a1, char a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100023E58;
  block[3] = &unk_10015C618;
  id v5 = *(id *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  char v7 = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

uint64_t sub_100023E58(uint64_t a1)
{
  double v2 = [(id)qword_100186478 sceneManager];
  id v3 = [v2 workspace];
  id v4 = [*(id *)(a1 + 32) defaultSceneIdentifier];
  id v5 = [v3 sceneWithIdentifier:v4];
  [v5 invalidate];

  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v6();
}

void sub_1000240A0(uint64_t a1)
{
  double v2 = [CLBSceneUpdate alloc];
  uint64_t v3 = *(void *)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) delegate];
  id v4 = -[CLBSceneUpdate initWithRequest:displayStyle:](v2, "initWithRequest:displayStyle:", v3, [v6 systemService:*(void *)(a1 + 40) displayStyleForBundleIdentifier:*(void *)(a1 + 48)]);
  id v5 = [(CLBSceneUpdate *)v4 performUpdate];
}

uint64_t sub_100024130(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = +[CLFLog commonLog];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100100854(a1, v3);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100024A00(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if ([v6 count])
  {
    [*(id *)(a1 + 32) unionSet:v6];
  }
  else
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 48) processId];
    [v4 addObject:v5];
  }
}

id sub_100024A7C(id a1, BKSSecureModeViolation *a2)
{
  return [(BKSSecureModeViolation *)a2 processId];
}

void sub_1000252C4(id a1, UIMutableScenePresentationContext *a2)
{
}

uint64_t sub_100025408(uint64_t a1)
{
  uint64_t v2 = 0;
  do
  {
    char v5 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(a1 + 16))(a1, v2, &v5);
    if (v5) {
      break;
    }
  }
  while (v2++ != 47);
  return result;
}

unint64_t sub_100025470(unint64_t a1)
{
  return (a1 > 0x2F) | (0x3E0000007uLL >> a1) & 1;
}

BOOL sub_100025490(uint64_t a1)
{
  return (unint64_t)(a1 - 29) < 0x13;
}

BOOL sub_1000254A0(unint64_t a1)
{
  return a1 < 0x1D;
}

__CFString *sub_1000254AC(unint64_t a1)
{
  if (a1 > 0x2F) {
    return 0;
  }
  else {
    return off_10015CE50[a1];
  }
}

uint64_t sub_1000254CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if ((unint64_t)(result - 3) > 0x2C) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = qword_10010F230[result - 3];
  }
  *(void *)(a2 + 32) = v2;
  switch(result)
  {
    case 0:
      *(_OWORD *)a2 = xmmword_10010ED18;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 568;
      goto LABEL_58;
    case 1:
      *(_OWORD *)a2 = xmmword_10010ED28;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 569;
      goto LABEL_58;
    case 2:
      *(_OWORD *)a2 = xmmword_10010ED38;
      uint64_t v5 = 0x4008000000000000;
      uint64_t v6 = 570;
      goto LABEL_58;
    case 3:
      long long v10 = xmmword_10010ED58;
      goto LABEL_22;
    case 4:
      long long v10 = xmmword_10010ED48;
LABEL_22:
      *(_OWORD *)a2 = v10;
      uint64_t v5 = 0x4008000000000000;
      uint64_t v6 = 2436;
      goto LABEL_58;
    case 5:
      long long v11 = xmmword_10010ED78;
      goto LABEL_25;
    case 6:
      long long v11 = xmmword_10010ED58;
LABEL_25:
      *(_OWORD *)a2 = v11;
      uint64_t v5 = 0x4008000000000000;
      uint64_t v6 = 2688;
      goto LABEL_58;
    case 7:
      long long v12 = xmmword_10010ED78;
      goto LABEL_28;
    case 8:
      long long v12 = xmmword_10010ED58;
LABEL_28:
      *(_OWORD *)a2 = v12;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 1792;
      goto LABEL_58;
    case 9:
    case 15:
      long long v4 = xmmword_10010ED58;
      goto LABEL_9;
    case 10:
    case 16:
      long long v4 = xmmword_10010ED48;
LABEL_9:
      *(_OWORD *)a2 = v4;
      uint64_t v5 = 0x4008000000000000;
      uint64_t v6 = 2340;
      goto LABEL_58;
    case 11:
    case 17:
      long long v3 = xmmword_10010ED68;
      goto LABEL_11;
    case 12:
    case 18:
      long long v3 = xmmword_10010ED48;
LABEL_11:
      *(_OWORD *)a2 = v3;
      uint64_t v5 = 0x4008000000000000;
      uint64_t v6 = 2532;
      goto LABEL_58;
    case 13:
    case 19:
      long long v7 = xmmword_10010ED88;
      goto LABEL_14;
    case 14:
    case 20:
      long long v7 = xmmword_10010ED58;
LABEL_14:
      *(_OWORD *)a2 = v7;
      uint64_t v5 = 0x4008000000000000;
      uint64_t v6 = 2778;
      goto LABEL_58;
    case 21:
      long long v13 = xmmword_10010ED98;
      goto LABEL_31;
    case 22:
      long long v13 = xmmword_10010ED48;
LABEL_31:
      *(_OWORD *)a2 = v13;
      uint64_t v5 = 0x4008000000000000;
      uint64_t v6 = 2556;
      goto LABEL_58;
    case 23:
      long long v14 = xmmword_10010EDA8;
      goto LABEL_34;
    case 24:
      long long v14 = xmmword_10010ED58;
LABEL_34:
      *(_OWORD *)a2 = v14;
      uint64_t v5 = 0x4008000000000000;
      uint64_t v6 = 2796;
      goto LABEL_58;
    case 25:
      long long v15 = xmmword_10010EDB8;
      goto LABEL_37;
    case 26:
      long long v15 = xmmword_10010ED48;
LABEL_37:
      *(_OWORD *)a2 = v15;
      uint64_t v5 = 0x4008000000000000;
      uint64_t v6 = 2622;
      goto LABEL_58;
    case 27:
      long long v16 = xmmword_10010EDC8;
      goto LABEL_40;
    case 28:
      long long v16 = xmmword_10010ED58;
LABEL_40:
      *(_OWORD *)a2 = v16;
      uint64_t v5 = 0x4008000000000000;
      uint64_t v6 = 2868;
      goto LABEL_58;
    case 29:
    case 30:
    case 41:
      *(_OWORD *)a2 = xmmword_10010EDD8;
      *(void *)(a2 + 16) = 0x4000000000000000;
      return result;
    case 31:
      *(_OWORD *)a2 = xmmword_10010EDE8;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 2160;
      goto LABEL_58;
    case 32:
      *(_OWORD *)a2 = xmmword_10010EDF8;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 2224;
      goto LABEL_58;
    case 33:
    case 40:
      long long v8 = xmmword_10010EE08;
      goto LABEL_50;
    case 34:
      *(_OWORD *)a2 = xmmword_10010EE18;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 2266;
      goto LABEL_58;
    case 35:
    case 36:
      long long v9 = xmmword_10010EE48;
      goto LABEL_45;
    case 37:
      long long v9 = xmmword_10010EE58;
LABEL_45:
      *(_OWORD *)a2 = v9;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 2360;
      goto LABEL_58;
    case 38:
      long long v17 = xmmword_10010EE68;
      goto LABEL_48;
    case 39:
      long long v17 = xmmword_10010EE78;
LABEL_48:
      *(_OWORD *)a2 = v17;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 2388;
      goto LABEL_58;
    case 42:
      long long v8 = xmmword_10010EEB8;
LABEL_50:
      *(_OWORD *)a2 = v8;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 2732;
      goto LABEL_58;
    case 43:
      long long v18 = xmmword_10010EE88;
      goto LABEL_53;
    case 44:
      long long v18 = xmmword_10010EE98;
LABEL_53:
      *(_OWORD *)a2 = v18;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 2420;
      goto LABEL_58;
    case 45:
      long long v19 = xmmword_10010EEC8;
      goto LABEL_57;
    case 46:
      long long v19 = xmmword_10010EE38;
      goto LABEL_57;
    case 47:
      long long v19 = xmmword_10010EED8;
LABEL_57:
      *(_OWORD *)a2 = v19;
      uint64_t v5 = 0x4000000000000000;
      uint64_t v6 = 2752;
LABEL_58:
      *(void *)(a2 + 16) = v5;
      *(void *)(a2 + 24) = v6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100025950(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(double *)(a1 + 16) == *(double *)(a2 + 16);
  if (*(double *)a1 != *(double *)a2) {
    BOOL v3 = 0;
  }
  uint64_t result = *(double *)(a1 + 8) == *(double *)(a2 + 8) && v3;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    if (v6) {
      BOOL v7 = v5 == v6;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t result = result;
    }
    else {
      uint64_t result = 0;
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8 != -1)
  {
    uint64_t v9 = *(void *)(a2 + 32);
    unsigned int v10 = ((v8 != 2) ^ (v9 == 2)) & result;
    if (v9 == -1) {
      return result;
    }
    else {
      return v10;
    }
  }
  return result;
}

uint64_t sub_1000259CC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  long long v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (objc_class *)type metadata accessor for ClarityRootController();
  v22.receiver = v0;
  v22.super_class = v5;
  objc_msgSendSuper2(&v22, "viewDidLoad");
  sub_10002659C();
  sub_100026AB8();
  uint64_t v6 = self;
  id v7 = [v6 defaultCenter];
  [v7 addObserver:v0 selector:"keyboardDidShowWithNotification:" name:UIKeyboardDidShowNotification object:0];

  id v8 = [v6 defaultCenter];
  [v8 addObserver:v0 selector:"keyboardWillHideWithNotification:" name:UIKeyboardWillHideNotification object:0];

  uint64_t v9 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v9, v1);
  unsigned int v10 = v0;
  long long v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    long long v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v20 = v1;
    double v21 = v10;
    long long v15 = (void *)v14;
    long long v19 = v4;
    *(_DWORD *)long long v13 = 138412290;
    long long v16 = v10;
    long long v4 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v15 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@: registered for keyboard notifications.", v13, 0xCu);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    uint64_t v1 = v20;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    long long v11 = v10;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

id sub_100025CE4(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  id v8 = v1;
  id v9 = a1;
  unsigned int v10 = v8;
  long long v11 = v9;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  int v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = v4;
    uint64_t v16 = v15;
    long long v17 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 138412546;
    HIDWORD(v21) = v14;
    uint64_t v23 = v3;
    int v24 = v10;
    uint64_t v18 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v17 = v10;

    *(_WORD *)(v16 + 12) = 2112;
    int v24 = v11;
    long long v19 = v11;
    uint64_t v3 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v17[1] = v11;

    _os_log_impl((void *)&_mh_execute_header, v12, BYTE4(v21), "%@: keyboard will hide: %@", (uint8_t *)v16, 0x16u);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v22;
    swift_slowDealloc();
  }
  else
  {

    os_log_type_t v12 = v10;
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  id result = *(Class *)((char *)&v10->isa + OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardView);
  if (result)
  {
    [result setHidden:1];
    id result = *(Class *)((char *)&v10->isa + OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_heightConstraint);
    if (result) {
      return [result setActive:0];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100026004(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  id v8 = v1;
  id v9 = a1;
  unsigned int v10 = v8;
  id v11 = v9;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  int v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v48 = v4;
    uint64_t v16 = v15;
    long long v17 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 138412546;
    HIDWORD(v47) = v14;
    uint64_t v18 = v10;
    v52[0] = v10;
    long long v19 = v10;
    uint64_t v49 = v3;
    uint64_t v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v17 = v10;

    *(_WORD *)(v16 + 12) = 2112;
    v52[0] = v11;
    id v21 = v11;
    uint64_t v3 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v17[1] = v11;

    unsigned int v10 = v18;
    _os_log_impl((void *)&_mh_execute_header, v12, BYTE4(v47), "%@: keyboard did show: %@", (uint8_t *)v16, 0x16u);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v48;
    swift_slowDealloc();
  }
  else
  {

    os_log_type_t v12 = v10;
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v22 = OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardView;
  uint64_t v23 = *(Class *)((char *)&v10->isa + OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardView);
  if (!v23)
  {
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  [v23 setHidden:0];
  id v24 = [v11 userInfo];
  if (!v24)
  {
    long long v53 = 0u;
    long long v54 = 0u;
LABEL_22:
    sub_10002A840((uint64_t)&v53, &qword_10017B810);
    return;
  }
  int v25 = v24;
  uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v27;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v26 + 16) && (unint64_t v28 = sub_100074394((uint64_t)v52), (v29 & 1) != 0))
  {
    sub_10002A028(*(void *)(v26 + 56) + 32 * v28, (uint64_t)&v53);
  }
  else
  {
    long long v53 = 0u;
    long long v54 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100029FD4((uint64_t)v52);
  if (!*((void *)&v54 + 1)) {
    goto LABEL_22;
  }
  sub_10002A544(0, &qword_10017B818);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  id v30 = v52[0];
  [v52[0] CGRectValue];
  double Height = CGRectGetHeight(v55);
  uint64_t v32 = OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_maxKeyboardHeight;
  double v33 = *(double *)((char *)&v10->isa + OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_maxKeyboardHeight);
  if (v33 <= Height) {
    double v33 = Height;
  }
  *(double *)((char *)&v10->isa + OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_maxKeyboardHeight) = v33;
  int v34 = *(Class *)((char *)&v10->isa + v22);
  if (!v34) {
    goto LABEL_33;
  }
  uint64_t v35 = OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardViewSize;
  double v36 = *(double *)((char *)&v10->isa + OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardViewSize);
  [v34 intrinsicContentSize];
  if (v36 > v37) {
    double v38 = v36;
  }
  else {
    double v38 = v37;
  }
  *(double *)((char *)&v10->isa + v35) = v38;
  if ([(id)qword_100186478 deviceInterfaceOrientation] == (id)4
    || [(id)qword_100186478 deviceInterfaceOrientation] == (id)3
    && [(id)qword_100186478 systemInterfaceOrientation] == (id)1)
  {
    uint64_t v39 = *(Class *)((char *)&v10->isa + OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_heightConstraint);
    if (!v39)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    double Height = *(double *)((char *)&v10->isa + v32);
  }
  else
  {
    uint64_t v39 = *(Class *)((char *)&v10->isa + OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_heightConstraint);
    if (!v39)
    {
LABEL_39:
      __break(1u);
      return;
    }
  }
  double v40 = Height + *(double *)((char *)&v10->isa + v35);
  id v41 = v39;
  static ClarityUIMetrics.componentHorizontalPadding.getter();
  [v41 setConstant:v40 - (v42 + v42)];

  uint64_t v43 = *(Class *)((char *)&v10->isa + OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_heightConstraint);
  if (!v43) {
    goto LABEL_34;
  }
  [v43 setActive:1];
  uint64_t v44 = *(Class *)((char *)&v10->isa + v22);
  if (!v44)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  [v44 setHidden:0];
  v45 = *(Class *)((char *)&v10->isa + v22);
  if (!v45)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  [v45 setNeedsLayout];
  v46 = *(Class *)((char *)&v10->isa + v22);
  if (!v46)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  [v46 layoutIfNeeded];
}

void sub_10002659C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_openApplicationRequestPublisher];
  uint64_t v7 = *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_applicationDidUpdateHandler];
  uint64_t v8 = *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_applicationDidUpdateHandler + 8];
  swift_retain();
  swift_retain();
  id v9 = sub_10003A0E8(v6, v7, v8);
  swift_release();
  swift_release();
  v41[0] = [v9 view];
  if (v41[0])
  {
    [v41[0] setTranslatesAutoresizingMaskIntoConstraints:0];
    [v1 addChildViewController:v9];
    id v10 = [v1 view];
    if (v10)
    {
      id v11 = v10;
      [v10 addSubview:v41[0]];

      sub_100029F90(&qword_10017B7F0);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_10010F3A0;
      id v13 = [v41[0] widthAnchor];
      id v14 = [v1 view];
      if (v14)
      {
        uint64_t v15 = v14;
        id v16 = [v14 widthAnchor];

        id v17 = [v13 constraintEqualToAnchor:v16];
        *(void *)(v12 + 32) = v17;
        id v18 = [v41[0] heightAnchor];
        id v19 = [v1 view];
        if (v19)
        {
          uint64_t v20 = v19;
          id v21 = [v19 heightAnchor];

          id v22 = [v18 constraintEqualToAnchor:v21];
          *(void *)(v12 + 40) = v22;
          id v23 = [v41[0] centerXAnchor];
          id v24 = [v1 view];
          if (v24)
          {
            int v25 = v24;
            id v26 = [v24 centerXAnchor];

            id v27 = [v23 constraintEqualToAnchor:v26];
            *(void *)(v12 + 48) = v27;
            id v28 = [v41[0] centerYAnchor];
            id v29 = [v1 view];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = self;
              id v32 = [v30 centerYAnchor];

              id v33 = [v28 constraintEqualToAnchor:v32];
              *(void *)(v12 + 56) = v33;
              v41[1] = (id)v12;
              specialized Array._endMutation()();
              sub_10002A544(0, (unint64_t *)&qword_10017B7F8);
              Class isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v31 activateConstraints:isa];

              [v9 didMoveToParentViewController:v1];
              id v35 = v41[0];

              return;
            }
LABEL_18:
            __break(1u);
            return;
          }
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v36 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v36, v2);
  double v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unable to retrieve view from hosting view controller for RootView", v39, 2u);
    swift_slowDealloc();
    double v40 = v9;
  }
  else
  {
    double v40 = v37;
    double v37 = v9;
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100026AB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v63 - v7;
  char v68 = 1;
  State.init(wrappedValue:)();
  char v9 = v69;
  uint64_t v10 = v70;
  char v68 = 0;
  State.init(wrappedValue:)();
  char v11 = v69;
  uint64_t v12 = v70;
  LOBYTE(v69) = v9;
  uint64_t v70 = v10;
  char v71 = v11;
  uint64_t v72 = v12;
  id v13 = objc_allocWithZone((Class)sub_100029F90(&qword_10017B7E8));
  swift_retain();
  swift_retain();
  id v14 = (id)UIHostingController.init(rootView:)();
  id v15 = [v14 view];
  if (v15)
  {
    id v16 = v15;
    uint64_t v64 = v2;
    uint64_t v66 = v10;
    [v15 sizeToFit];
    uint64_t v17 = OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardView;
    id v18 = *(void **)&v1[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardView];
    *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardView] = v16;
    id v19 = v16;

    uint64_t v20 = *(void **)&v1[v17];
    if (v20)
    {
      [v20 setHidden:1];
      [v19 setTranslatesAutoresizingMaskIntoConstraints:0];
      id v21 = [self clearColor];
      [v19 setBackgroundColor:v21];

      id v22 = *(void **)&v1[v17];
      if (v22)
      {
        [v22 intrinsicContentSize];
        *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardViewSize] = v23;
        id v24 = [v14 view];
        id v67 = v14;
        id v65 = v19;
        if (v24)
        {
          int v25 = v24;
          sub_100029F90(&qword_10017B808);
          if (swift_dynamicCastClass())
          {
            uint64_t v26 = static SafeAreaRegions.keyboard.getter();
            id v28 = (void (*)(uint64_t *, void))dispatch thunk of _UIHostingView.safeAreaRegions.modify();
            if ((*v27 & v26) != 0) {
              *v27 &= ~v26;
            }
            v28(&v69, 0);

            goto LABEL_21;
          }
        }
        uint64_t v33 = Logger.common.unsafeMutableAddressor();
        uint64_t v34 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v33, v64);
        id v35 = v14;
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v63[1] = v12;
          os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
          v63[0] = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v38 = 138412290;
          id v39 = [v35 view];
          id v40 = v39;
          if (v39) {
            uint64_t v69 = (uint64_t)v39;
          }
          else {
            uint64_t v69 = 0;
          }
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(void *)v63[0] = v40;

          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unexpected type for hosting controller view: %@", v38, 0xCu);
          sub_100029F90(&qword_10017B800);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          uint64_t v34 = v64;
          id v14 = v67;
        }
        else
        {

          uint64_t v36 = v35;
        }

        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v34);
LABEL_21:
        [v1 addChildViewController:v14];
        id v41 = [v1 view];
        if (v41)
        {
          if (*(void *)&v1[v17])
          {
            double v42 = v41;
            objc_msgSend(v41, "addSubview:");

            sub_100029F90(&qword_10017B7F0);
            uint64_t v43 = swift_allocObject();
            *(_OWORD *)(v43 + 16) = xmmword_10010F3B0;
            uint64_t v44 = *(void **)&v1[v17];
            if (v44)
            {
              id v45 = [v44 widthAnchor];
              id v46 = [v1 view];
              if (v46)
              {
                uint64_t v47 = v46;
                id v48 = [v46 widthAnchor];

                id v49 = [v45 constraintEqualToAnchor:v48];
                *(void *)(v43 + 32) = v49;
                uint64_t v50 = *(void **)&v1[v17];
                if (v50)
                {
                  id v51 = [v50 bottomAnchor];
                  id v52 = [v1 view];
                  if (v52)
                  {
                    long long v53 = v52;
                    long long v54 = self;
                    id v55 = [v53 bottomAnchor];

                    id v56 = [v51 constraintEqualToAnchor:v55];
                    *(void *)(v43 + 40) = v56;
                    uint64_t v69 = v43;
                    specialized Array._endMutation()();
                    sub_10002A544(0, (unint64_t *)&qword_10017B7F8);
                    Class isa = Array._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease();
                    [v54 activateConstraints:isa];

                    v58 = *(void **)&v1[v17];
                    if (v58)
                    {
                      id v59 = [v58 heightAnchor];
                      id v60 = [v59 constraintEqualToConstant:360.0];

                      v61 = *(void **)&v1[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_heightConstraint];
                      *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_heightConstraint] = v60;

                      id v62 = v67;
                      [v67 didMoveToParentViewController:v1];
                      swift_release();
                      swift_release();

                      return;
                    }
LABEL_38:
                    __break(1u);
                    return;
                  }
LABEL_37:
                  __break(1u);
                  goto LABEL_38;
                }
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v29 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v29, v2);
  id v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    id v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to retrieve view from hosting view controller for CloseKeyboardView", v32, 2u);
    swift_slowDealloc();
    swift_release();
    swift_release();
  }
  else
  {

    swift_release();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

id sub_10002729C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_openApplicationRequestPublisher;
  sub_100029F90(&qword_10017B820);
  swift_allocObject();
  uint64_t v7 = v3;
  *(void *)&v3[v6] = PassthroughSubject.init()();
  uint64_t v8 = &v7[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_applicationDidUpdateHandler];
  *(void *)uint64_t v8 = nullsub_4;
  *((void *)v8 + 1) = 0;
  *(void *)&v7[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_heightConstraint] = 0;
  *(void *)&v7[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_maxKeyboardHeight] = 0;
  *(void *)&v7[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardViewSize] = 0;

  if (a2)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v9 = 0;
  }
  v12.receiver = v7;
  v12.super_class = (Class)type metadata accessor for ClarityRootController();
  id v10 = objc_msgSendSuper2(&v12, "initWithNibName:bundle:", v9, a3);

  return v10;
}

id sub_100027424(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_openApplicationRequestPublisher;
  sub_100029F90(&qword_10017B820);
  swift_allocObject();
  uint64_t v4 = v1;
  *(void *)&v1[v3] = PassthroughSubject.init()();
  uint64_t v5 = &v4[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_applicationDidUpdateHandler];
  *(void *)uint64_t v5 = nullsub_4;
  *((void *)v5 + 1) = 0;
  *(void *)&v4[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_heightConstraint] = 0;
  *(void *)&v4[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_maxKeyboardHeight] = 0;
  *(void *)&v4[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_closeKeyboardViewSize] = 0;

  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for ClarityRootController();
  id v6 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);

  return v6;
}

id sub_100027538()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClarityRootController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000275DC@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v46 = a5;
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  __chkstk_darwin(v9);
  char v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100029F90(&qword_10017B880);
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100029F90(&qword_10017B888);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  id v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100029F90(&qword_10017B890) - 8;
  __chkstk_darwin(v45);
  uint64_t v44 = (uint64_t)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)id v14 = static HorizontalAlignment.center.getter();
  *((void *)v14 + 1) = 0;
  v14[16] = 1;
  uint64_t v20 = (uint64_t)&v14[*(int *)(sub_100029F90(&qword_10017B898) + 44)];
  int v48 = a1;
  int v49 = a3;
  sub_100027AEC(a1, a2, a3, a4, v20);
  id v47 = self;
  id v21 = [v47 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v22 = swift_allocObject();
  *(unsigned char *)(v22 + 16) = a1;
  *(void *)(v22 + 24) = a2;
  *(unsigned char *)(v22 + 32) = a3;
  *(void *)(v22 + 40) = a4;
  sub_10002A580((uint64_t)v14, (uint64_t)v18, &qword_10017B880);
  uint64_t v23 = &v18[*(int *)(v16 + 60)];
  uint64_t v24 = v52;
  uint64_t v25 = v53;
  id v51 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v51(v23, v11, v53);
  uint64_t v26 = (uint64_t (**)(uint64_t))&v18[*(int *)(v16 + 64)];
  NSString *v26 = sub_10002A500;
  v26[1] = (uint64_t (*)(uint64_t))v22;
  uint64_t v27 = v24 + 8;
  id v28 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v50 = v28;
  swift_retain();
  swift_retain();
  v28(v11, v25);
  uint64_t v52 = v27;
  sub_10002A840((uint64_t)v14, &qword_10017B880);
  id v29 = [v47 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = v48;
  *(void *)(v30 + 24) = a2;
  *(unsigned char *)(v30 + 32) = v49;
  uint64_t v31 = a4;
  *(void *)(v30 + 40) = a4;
  uint64_t v32 = v44;
  sub_10002A580((uint64_t)v18, v44, &qword_10017B888);
  uint64_t v33 = v45;
  uint64_t v34 = v53;
  v51((char *)(v32 + *(int *)(v45 + 60)), v11, v53);
  id v35 = (uint64_t (**)(uint64_t))(v32 + *(int *)(v33 + 64));
  *id v35 = sub_10002A518;
  v35[1] = (uint64_t (*)(uint64_t))v30;
  swift_retain();
  swift_retain();
  v50(v11, v34);
  sub_10002A840((uint64_t)v18, &qword_10017B888);
  id v36 = [v47 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v37 = swift_allocObject();
  *(unsigned char *)(v37 + 16) = v48;
  *(void *)(v37 + 24) = a2;
  *(unsigned char *)(v37 + 32) = v49;
  *(void *)(v37 + 40) = v31;
  uint64_t v38 = v46;
  sub_10002A580(v32, v46, &qword_10017B890);
  uint64_t v39 = sub_100029F90(&qword_10017B8A0);
  uint64_t v40 = v53;
  v51((char *)(v38 + *(int *)(v39 + 52)), v11, v53);
  id v41 = (uint64_t (**)(uint64_t))(v38 + *(int *)(v39 + 56));
  *id v41 = sub_10002A530;
  v41[1] = (uint64_t (*)(uint64_t))v37;
  swift_retain();
  swift_retain();
  v50(v11, v40);
  return sub_10002A840(v32, &qword_10017B890);
}

uint64_t sub_100027AEC@<X0>(char a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v56 = a4;
  int v55 = a3;
  uint64_t v8 = sub_100029F90(&qword_10017B8C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_100029F90(&qword_10017B8C8);
  __chkstk_darwin(v52);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100029F90(&qword_10017B8D0);
  __chkstk_darwin(v53);
  id v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_100029F90(&qword_10017B8D8);
  __chkstk_darwin(v54);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_100029F90(&qword_10017B8E0);
  uint64_t v17 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v51 = (uint64_t)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v58 = a1;
  uint64_t v59 = a2;
  sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.getter();
  if (v60)
  {
    uint64_t v19 = 1;
LABEL_6:
    uint64_t v46 = v57;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a5, v19, 1, v46);
  }
  uint64_t v50 = a5;
  char v20 = v55 & 1;
  char v58 = v55 & 1;
  uint64_t v59 = v56;
  State.wrappedValue.getter();
  if (v60 != 1)
  {
    uint64_t v19 = 1;
    a5 = v50;
    goto LABEL_6;
  }
  *(void *)uint64_t v10 = static HorizontalAlignment.center.getter();
  *((void *)v10 + 1) = 0;
  v10[16] = 0;
  uint64_t v21 = sub_100029F90(&qword_10017B8E8);
  sub_100027F3C(a1 & 1, a2, v20, v56, &v10[*(int *)(v21 + 44)]);
  char v22 = static Edge.Set.horizontal.getter();
  static ClarityUIMetrics.componentHorizontalPadding.getter();
  EdgeInsets.init(_all:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  sub_10002A580((uint64_t)v10, (uint64_t)v12, &qword_10017B8C0);
  uint64_t v31 = &v12[*(int *)(v52 + 36)];
  *uint64_t v31 = v22;
  *((void *)v31 + 1) = v24;
  *((void *)v31 + 2) = v26;
  *((void *)v31 + 3) = v28;
  *((void *)v31 + 4) = v30;
  v31[40] = 0;
  sub_10002A840((uint64_t)v10, &qword_10017B8C0);
  char v32 = static Edge.Set.vertical.getter();
  static ClarityUIMetrics.componentHorizontalPadding.getter();
  EdgeInsets.init(_all:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_10002A580((uint64_t)v12, (uint64_t)v14, &qword_10017B8C8);
  id v41 = &v14[*(int *)(v53 + 36)];
  *id v41 = v32;
  *((void *)v41 + 1) = v34;
  *((void *)v41 + 2) = v36;
  *((void *)v41 + 3) = v38;
  *((void *)v41 + 4) = v40;
  v41[40] = 0;
  sub_10002A840((uint64_t)v12, &qword_10017B8C8);
  uint64_t v42 = static Color.clarityUIContentBackground.getter();
  char v43 = static Edge.Set.all.getter();
  sub_10002A580((uint64_t)v14, (uint64_t)v16, &qword_10017B8D0);
  uint64_t v44 = &v16[*(int *)(v54 + 36)];
  *(void *)uint64_t v44 = v42;
  v44[8] = v43;
  sub_10002A840((uint64_t)v14, &qword_10017B8D0);
  uint64_t v45 = v51;
  sub_10002A580((uint64_t)v16, v51, &qword_10017B8D8);
  uint64_t v46 = v57;
  uint64_t v47 = v45 + *(int *)(v57 + 36);
  *(void *)uint64_t v47 = 0x4049000000000000;
  *(unsigned char *)(v47 + 8) = 0;
  *(_WORD *)(v47 + 9) = 256;
  sub_10002A840((uint64_t)v16, &qword_10017B8D8);
  a5 = v50;
  sub_10002A5E4(v45, v50);
  uint64_t v19 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a5, v19, 1, v46);
}

uint64_t sub_100027F3C@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v47 = a5;
  uint64_t v43 = sub_100029F90(&qword_10017B8F0);
  uint64_t v9 = *(void *)(v43 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v43);
  uint64_t v42 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v41 = (char *)&v40 - v12;
  uint64_t v44 = sub_100029F90(&qword_10017B8F8);
  __chkstk_darwin(v44);
  id v14 = (uint64_t *)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v46 = sub_100029F90(&qword_10017B900);
  uint64_t v15 = *(void *)(v46 - 8);
  uint64_t v16 = __chkstk_darwin(v46);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v45 = (char *)&v40 - v19;
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  *(unsigned char *)(v20 + 32) = a3;
  *(void *)(v20 + 40) = a4;
  swift_retain();
  swift_retain();
  sub_100029F90(&qword_10017B908);
  uint64_t v21 = sub_10002A694(&qword_10017B910);
  uint64_t v22 = type metadata accessor for MultimodalNavigationBackButtonLabelStyle();
  uint64_t v23 = sub_10002A8D8(&qword_10017B918, &qword_10017B910);
  uint64_t v24 = sub_100029868(&qword_10017B920, (void (*)(uint64_t))&type metadata accessor for MultimodalNavigationBackButtonLabelStyle);
  uint64_t v48 = v21;
  uint64_t v49 = v22;
  uint64_t v50 = v23;
  uint64_t v51 = v24;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = v41;
  Button.init(action:label:)();
  uint64_t v26 = v42;
  uint64_t v27 = v43;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v42, v25, v43);
  unint64_t v28 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v29 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v29 + v28, v26, v27);
  uint64_t *v14 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = (uint64_t (**)())((char *)v14 + *(int *)(v44 + 36));
  *uint64_t v30 = sub_10002A770;
  v30[1] = (uint64_t (*)())v29;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v25, v27);
  uint64_t v31 = static Color.clarityUIButtonBackground.getter();
  uint64_t v32 = static Color.primary.getter();
  uint64_t v48 = v31;
  uint64_t v49 = v32;
  sub_10002A8D8(&qword_10017B930, &qword_10017B8F8);
  sub_10002A7EC();
  View.buttonStyle<A>(_:)();
  swift_release();
  swift_release();
  sub_10002A840((uint64_t)v14, &qword_10017B8F8);
  uint64_t v34 = v45;
  uint64_t v33 = v46;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v45, v18, v46);
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v35(v18, v34, v33);
  uint64_t v36 = v47;
  v35(v47, v18, v33);
  uint64_t v37 = &v36[*(int *)(sub_100029F90(&qword_10017B940) + 48)];
  *(void *)uint64_t v37 = 0;
  v37[8] = 1;
  uint64_t v38 = *(void (**)(char *, uint64_t))(v15 + 8);
  v38(v34, v33);
  return ((uint64_t (*)(char *, uint64_t))v38)(v18, v33);
}

uint64_t sub_100028458()
{
  uint64_t v0 = type metadata accessor for MultimodalNavigationBackButtonLabelStyle();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100029F90(&qword_10017B910);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029F90(&qword_10017B948);
  v9[0] = &type metadata for Image;
  v9[1] = &protocol witness table for Image;
  swift_getOpaqueTypeConformance2();
  Label.init(title:icon:)();
  MultimodalNavigationBackButtonLabelStyle.init()();
  sub_10002A8D8(&qword_10017B918, &qword_10017B910);
  sub_100029868(&qword_10017B920, (void (*)(uint64_t))&type metadata accessor for MultimodalNavigationBackButtonLabelStyle);
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000286E0@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_10002875C()
{
  return swift_release();
}

uint64_t sub_1000287E4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Notification.object.getter();
  if (v26)
  {
    sub_10002A544(0, (unint64_t *)&qword_10017B8B8);
    if (swift_dynamicCast())
    {
      id v12 = v23;
      unsigned __int8 v13 = [v23 supportsClarityUI];

      goto LABEL_6;
    }
  }
  else
  {
    sub_10002A840((uint64_t)&v24, &qword_10017B810);
  }
  unsigned __int8 v13 = 0;
LABEL_6:
  char v14 = a2 & 1;
  LOBYTE(v24) = a2 & 1;
  uint64_t v25 = a3;
  LOBYTE(v23) = v13;
  sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.setter();
  uint64_t v15 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v15, v8);
  swift_retain();
  swift_retain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = v8;
    uint64_t v19 = v18;
    v21[1] = a5;
    *(_DWORD *)uint64_t v18 = 67109120;
    LOBYTE(v24) = v14;
    uint64_t v25 = a3;
    State.wrappedValue.getter();
    int v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "CloseKeyboardView: application supports Clarity: %{BOOL}d", v19, 8u);
    uint64_t v8 = v22;
    swift_slowDealloc();
  }
  else
  {

    swift_release();
    swift_release();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100028A98(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v27 = a4;
  uint64_t v7 = type metadata accessor for Notification();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = Logger.common.unsafeMutableAddressor();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v26 = v11;
  v16(v14, v15, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v29[0] = v24;
    uint64_t v25 = a5;
    *(_DWORD *)uint64_t v19 = 136315138;
    id v23 = v19 + 4;
    sub_100029868(&qword_10017B8B0, (void (*)(uint64_t))&type metadata accessor for Notification);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = sub_100050B5C(v20, v21, v29);
    a5 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "CloseKeyboardView: keyboard will show: %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v26);
  LOBYTE(v29[0]) = v27 & 1;
  v29[1] = a5;
  LOBYTE(v28) = 1;
  sub_100029F90(&qword_10017B8A8);
  return State.wrappedValue.setter();
}

uint64_t sub_100028DE4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v27 = a4;
  uint64_t v7 = type metadata accessor for Notification();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = Logger.common.unsafeMutableAddressor();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v26 = v11;
  v16(v14, v15, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v29[0] = v24;
    uint64_t v25 = a5;
    *(_DWORD *)uint64_t v19 = 136315138;
    id v23 = v19 + 4;
    sub_100029868(&qword_10017B8B0, (void (*)(uint64_t))&type metadata accessor for Notification);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v28 = sub_100050B5C(v20, v21, v29);
    a5 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "CloseKeyboardView: keyboard will hide: %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v26);
  LOBYTE(v29[0]) = v27 & 1;
  v29[1] = a5;
  LOBYTE(v28) = 0;
  sub_100029F90(&qword_10017B8A8);
  return State.wrappedValue.setter();
}

uint64_t sub_100029134()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100029150@<X0>(uint64_t a1@<X8>)
{
  return sub_1000275DC(*v1, *((void *)v1 + 1), v1[16], *((void *)v1 + 3), a1);
}

uint64_t type metadata accessor for ClarityRootController()
{
  return self;
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
}

void type metadata accessor for FBSOpenApplicationErrorCode(uint64_t a1)
{
}

__n128 initializeWithTake for CloseKeyboardView(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for UIRectCornerRadii(uint64_t a1)
{
}

void type metadata accessor for UIRectCorner(uint64_t a1)
{
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for CLBSceneSettingsDisplayLayoutStyle(uint64_t a1)
{
}

__n128 initializeWithTake for AppLabel(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100029224(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100029244(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

uint64_t sub_100029280(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000292A0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for CLFListLayout(uint64_t a1)
{
}

void type metadata accessor for CLBOrientationUpdateReason(uint64_t a1)
{
}

uint64_t sub_100029308(uint64_t a1, uint64_t a2)
{
  return sub_100029CC8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100029334@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100029368(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000293E0(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100029460@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1000294A4(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1000294AC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1000294C0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1000294D4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000294E8(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100029518@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100029544@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100029568(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_10002957C(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100029590(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1000295A4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000295B8(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000295CC(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1000295E0(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000295F4()
{
  return *v0 == 0;
}

uint64_t sub_100029604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_10002961C(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_100029630()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL sub_1000296BC(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000296D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100029F58(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_100029710@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10002971C(uint64_t a1)
{
  uint64_t v2 = sub_100029868(&qword_10017B7D8, type metadata accessor for CLFListLayout);
  uint64_t v3 = sub_100029868(&qword_10017B7E0, type metadata accessor for CLFListLayout);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000297D8()
{
  return sub_100029868(&qword_10017B7A0, type metadata accessor for CLFListLayout);
}

uint64_t sub_100029820()
{
  return sub_100029868(&qword_10017B7A8, type metadata accessor for CLFListLayout);
}

uint64_t sub_100029868(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000298B0()
{
  return sub_100029868(&qword_10017B7B0, type metadata accessor for CLFListLayout);
}

uint64_t sub_1000298F8(uint64_t a1)
{
  uint64_t v2 = sub_100029868(&qword_10017BA60, type metadata accessor for UIContentSizeCategory);
  uint64_t v3 = sub_100029868(&qword_10017BA68, type metadata accessor for UIContentSizeCategory);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000299B4@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000299FC(uint64_t a1)
{
  uint64_t v2 = sub_100029868(&qword_10017B960, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_100029868(&qword_10017B968, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100029AB8(uint64_t a1)
{
  uint64_t v2 = sub_100029868(&qword_10017B950, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_100029868(&qword_10017B958, type metadata accessor for FileProtectionType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void *sub_100029B74@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100029B84(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100029B90(uint64_t a1, uint64_t a2)
{
  return sub_100029CC8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100029BA8()
{
  return sub_100029868(&qword_10017B7B8, type metadata accessor for UIRectCorner);
}

uint64_t sub_100029BF0()
{
  return sub_100029868(&qword_10017B7C0, type metadata accessor for UIRectCorner);
}

uint64_t sub_100029C38()
{
  return sub_100029868(&qword_10017B7C8, type metadata accessor for UIRectCorner);
}

uint64_t sub_100029C80()
{
  return sub_100029868(&qword_10017B7D0, type metadata accessor for UIRectCorner);
}

uint64_t sub_100029CC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100029D0C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100029D60()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_100029DD4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "CloseKeyboardView: force keyboard away.", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v8 = [self sharedArbiterManager];
  [v8 forceKeyboardAway];
}

uint64_t sub_100029F58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100029F90(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100029FD4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002A028(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for CloseKeyboardView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for CloseKeyboardView()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for CloseKeyboardView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CloseKeyboardView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CloseKeyboardView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CloseKeyboardView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CloseKeyboardView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloseKeyboardView()
{
  return &type metadata for CloseKeyboardView;
}

void type metadata accessor for UIDeviceOrientation(uint64_t a1)
{
}

void type metadata accessor for BSInterfaceOrientation(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t sub_10002A330()
{
  return sub_100029868(&qword_10017B850, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10002A378()
{
  return sub_100029868(&qword_10017B858, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10002A3C0()
{
  return sub_100029868(&qword_10017B860, type metadata accessor for FileProtectionType);
}

uint64_t sub_10002A408()
{
  return sub_100029868(&qword_10017B868, type metadata accessor for FileProtectionType);
}

uint64_t sub_10002A450()
{
  return sub_100029868(&qword_10017B870, type metadata accessor for FileProtectionType);
}

uint64_t sub_10002A498()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002A4B4()
{
  return sub_100029868(&qword_10017B878, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10002A500(uint64_t a1)
{
  return sub_1000287E4(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10002A518(uint64_t a1)
{
  return sub_100028A98(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10002A530(uint64_t a1)
{
  return sub_100028DE4(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10002A544(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10002A580(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100029F90(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002A5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017B8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002A650()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002A694(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10002A6DC()
{
  uint64_t v1 = sub_100029F90(&qword_10017B8F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002A770()
{
  uint64_t v1 = *(void *)(sub_100029F90(&qword_10017B8F0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10006129C(v2);
}

unint64_t sub_10002A7EC()
{
  unint64_t result = qword_10017B938;
  if (!qword_10017B938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017B938);
  }
  return result;
}

uint64_t sub_10002A840(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100029F90(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002A89C()
{
  return sub_10002A8D8(&qword_10017B970, &qword_10017B8A0);
}

uint64_t sub_10002A8D8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for BatteryState(uint64_t a1)
{
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void sub_10002A944(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10002A98C()
{
  return sub_100029868(&qword_10017BA48, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_10002A9D4()
{
  return sub_100029868(&qword_10017BA50, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_10002AA1C()
{
  return sub_100029868(&qword_10017BA58, type metadata accessor for UIContentSizeCategory);
}

id sub_10002AA90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = self;
  id v3 = [v2 currentDevice];
  [v3 batteryLevel];

  State.init(wrappedValue:)();
  *(_DWORD *)a1 = v11;
  *(void *)(a1 + 8) = *((void *)&v11 + 1);
  id v4 = [v2 currentDevice];
  [v4 batteryState];

  type metadata accessor for BatteryState(0);
  State.init(wrappedValue:)();
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = xmmword_10010FE50;
  type metadata accessor for BatteryView();
  uint64_t v5 = self;
  id v6 = [v5 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  id v7 = [v5 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  id v8 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  [v8 setNumberStyle:3];
  sub_10002ACFC();
  Class isa = NSNumber.init(integerLiteral:)(100).super.super.isa;
  [v8 setMultiplier:isa];

  [v8 setMinimumFractionDigits:0];
  id result = [v8 setMaximumFractionDigits:0];
  *(void *)(a1 + 48) = v8;
  return result;
}

uint64_t type metadata accessor for BatteryView()
{
  uint64_t result = qword_10017BB28;
  if (!qword_10017BB28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10002ACFC()
{
  unint64_t result = qword_10017F480;
  if (!qword_10017F480)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017F480);
  }
  return result;
}

void *sub_10002AD3C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v4 = *a2;
    id v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = a2[3];
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    id v8 = (void *)a2[6];
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v16 = a1 + v9;
    uint64_t v10 = (uint64_t)a2 + v9;
    *(void *)(a1 + 48) = v8;
    uint64_t v11 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    swift_retain();
    id v13 = v8;
    v12(v16, v10, v11);
    v12((uint64_t)v4 + *(int *)(a3 + 40), (uint64_t)a2 + *(int *)(a3 + 40), v11);
  }
  return v4;
}

uint64_t sub_10002AE88(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();

  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  id v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);

  return v8(v6, v5);
}

uint64_t sub_10002AF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v7 = *(void **)(a2 + 48);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v14 = a1 + v8;
  uint64_t v9 = a2 + v8;
  *(void *)(a1 + 48) = v7;
  uint64_t v10 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  swift_retain();
  id v12 = v7;
  v11(v14, v9, v10);
  v11(a1 + *(int *)(a3 + 40), a2 + *(int *)(a3 + 40), v10);
  return a1;
}

uint64_t sub_10002B044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(void **)(a2 + 48);
  uint64_t v7 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for NSNotificationCenter.Publisher();
  id v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24);
  v13(v10, v11, v12);
  v13(a1 + *(int *)(a3 + 40), a2 + *(int *)(a3 + 40), v12);
  return a1;
}

uint64_t sub_10002B154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(a1 + *(int *)(a3 + 40), a2 + *(int *)(a3 + 40), v10);
  return a1;
}

uint64_t sub_10002B218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v7 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12(a1 + *(int *)(a3 + 40), a2 + *(int *)(a3 + 40), v11);
  return a1;
}

uint64_t sub_10002B304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002B318);
}

uint64_t sub_10002B318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10002B3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002B3DC);
}

uint64_t sub_10002B3DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 48) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10002B484()
{
  uint64_t result = type metadata accessor for NSNotificationCenter.Publisher();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10002B53C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002B558@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v49 = a1;
  uint64_t v3 = type metadata accessor for BatteryView();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v47 = *(void *)(v48 + 64);
  uint64_t v4 = v3 - 8;
  uint64_t v42 = v3 - 8;
  __chkstk_darwin(v3 - 8);
  uint64_t v50 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v7 = v41;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100029F90(&qword_10017BB78);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  id v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v1 + 8);
  LODWORD(v51) = *(_DWORD *)v1;
  *((void *)&v51 + 1) = v14;
  sub_100029F90(&qword_10017BB80);
  State.projectedValue.getter();
  uint64_t v45 = *((void *)&v52 + 1);
  uint64_t v46 = v52;
  int v15 = v53;
  long long v51 = *(_OWORD *)(v1 + 16);
  sub_100029F90(&qword_10017BB88);
  State.projectedValue.getter();
  long long v44 = v52;
  uint64_t v43 = v53;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v40 = v52;
  int v39 = BYTE8(v52);
  uint64_t v38 = v53;
  int v37 = v54;
  uint64_t v36 = v55;
  uint64_t v35 = v56;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v9, v1 + *(int *)(v4 + 44), v6);
  uint64_t v17 = v50;
  sub_10002BAEC(v1, v50);
  uint64_t v18 = *(unsigned __int8 *)(v48 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  uint64_t v20 = v47;
  uint64_t v47 = v18 | 7;
  uint64_t v48 = v19 + v20;
  uint64_t v21 = swift_allocObject();
  sub_10002BB54(v17, v21 + v19);
  v16(&v13[*(int *)(v11 + 60)], (uint64_t)v9, v6);
  uint64_t v22 = v45;
  *(void *)id v13 = v46;
  *((void *)v13 + 1) = v22;
  *((_DWORD *)v13 + 4) = v15;
  *(_OWORD *)(v13 + 24) = v44;
  uint64_t v23 = v40;
  *((void *)v13 + 5) = v43;
  *((void *)v13 + 6) = v23;
  v13[56] = v39;
  *((void *)v13 + 8) = v38;
  v13[72] = v37;
  uint64_t v24 = v35;
  *((void *)v13 + 10) = v36;
  *((void *)v13 + 11) = v24;
  uint64_t v25 = (uint64_t (**)(uint64_t))&v13[*(int *)(v11 + 64)];
  char *v25 = sub_10002BBB8;
  v25[1] = (uint64_t (*)(uint64_t))v21;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v41 + 8);
  v26(v9, v6);
  v16(v9, v2 + *(int *)(v42 + 48), v6);
  uint64_t v27 = v2;
  uint64_t v28 = v50;
  sub_10002BAEC(v27, v50);
  uint64_t v29 = swift_allocObject();
  sub_10002BB54(v28, v29 + v19);
  uint64_t v30 = v49;
  sub_10002BDA0((uint64_t)v13, v49);
  uint64_t v31 = sub_100029F90(&qword_10017BB90);
  v16((char *)(v30 + *(int *)(v31 + 52)), (uint64_t)v9, v6);
  uint64_t v32 = (uint64_t (**)(uint64_t))(v30 + *(int *)(v31 + 56));
  uint8_t *v32 = sub_10002BD04;
  v32[1] = (uint64_t (*)(uint64_t))v29;
  v26(v9, v6);
  return sub_10002BE08((uint64_t)v13);
}

uint64_t sub_10002B9C4()
{
  id v0 = [self currentDevice];
  [v0 batteryLevel];

  sub_100029F90(&qword_10017BB80);
  return State.wrappedValue.setter();
}

uint64_t sub_10002BA58()
{
  id v0 = [self currentDevice];
  [v0 batteryState];

  sub_100029F90(&qword_10017BB88);
  return State.wrappedValue.setter();
}

uint64_t sub_10002BAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BatteryView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002BB54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BatteryView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002BBB8(uint64_t a1)
{
  return sub_10002BD1C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10002B9C4);
}

uint64_t sub_10002BBD4()
{
  uint64_t v1 = (int *)(type metadata accessor for BatteryView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();

  uint64_t v7 = v6 + v1[11];
  uint64_t v8 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[12], v8);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10002BD04(uint64_t a1)
{
  return sub_10002BD1C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10002BA58);
}

uint64_t sub_10002BD1C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for BatteryView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_10002BDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017BB78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002BE08(uint64_t a1)
{
  uint64_t v2 = sub_100029F90(&qword_10017BB78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for BatteryViewWrapper()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for BatteryViewWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BatteryViewWrapper(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for BatteryViewWrapper(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BatteryViewWrapper(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for BatteryViewWrapper(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BatteryViewWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BatteryViewWrapper()
{
  return &type metadata for BatteryViewWrapper;
}

unint64_t sub_10002C0E0()
{
  unint64_t result = qword_10017BB98;
  if (!qword_10017BB98)
  {
    sub_10002A694(&qword_10017BB90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BB98);
  }
  return result;
}

void *sub_10002C13C()
{
  return &protocol witness table for Never;
}

id sub_10002C148(void *a1)
{
  long long v4 = *v1;
  LODWORD(v6) = *((_DWORD *)v1 + 4);
  sub_100029F90(&qword_10017BBA8);
  Binding.wrappedValue.getter();
  objc_msgSend(a1, "setChargePercent:", *(float *)&v8, v4, v6);
  long long v5 = *(long long *)((char *)v1 + 24);
  uint64_t v7 = *((void *)v1 + 5);
  sub_100029F90(&qword_10017BBB0);
  Binding.wrappedValue.getter();
  return objc_msgSend(a1, "setChargingState:", v8 == 2, v5, v7);
}

id sub_10002C200()
{
  id v0 = [objc_allocWithZone((Class)_UIBatteryView) init];
  [v0 setSizeCategory:1];
  [v0 setShowsInlineChargingIndicator:1];
  return v0;
}

uint64_t sub_10002C274()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t sub_10002C2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10002C400();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10002C31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10002C400();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10002C380()
{
}

unint64_t sub_10002C3AC()
{
  unint64_t result = qword_10017BBA0;
  if (!qword_10017BBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BBA0);
  }
  return result;
}

unint64_t sub_10002C400()
{
  unint64_t result = qword_10017BBB8;
  if (!qword_10017BBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BBB8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MedicalIDView()
{
  return &type metadata for MedicalIDView;
}

unint64_t sub_10002C46C()
{
  unint64_t result = qword_10017BBC0;
  if (!qword_10017BBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BBC0);
  }
  return result;
}

void sub_10002C4C0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v10 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      v18[0] = (id)swift_slowAlloc();
      *(_DWORD *)id v13 = 138412290;
      swift_errorRetain();
      uint64_t v14 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v18[1] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)v18[0] = v14;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error fetching medical ID data: %@", v13, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else if (a1)
  {
    v18[0] = a1;
    if ([v18[0] hasAnyData])
    {
      id v15 = [self sharedInstance];
      unsigned __int8 v16 = [v15 lostModeIsActive];

      if ((v16 & 1) == 0) {
        [a3 setMedicalID:v18[0]];
      }
    }
    id v17 = v18[0];
  }
}

void sub_10002C794(uint64_t a1, void *a2, void *a3)
{
  long long v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_10002C830()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t sub_10002C86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10002C95C();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10002C8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10002C95C();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10002C934()
{
}

unint64_t sub_10002C95C()
{
  unint64_t result = qword_10017BBC8;
  if (!qword_10017BBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BBC8);
  }
  return result;
}

id sub_10002C9B0()
{
  id v0 = [objc_allocWithZone((Class)HKMedicalIDViewController) init];
  [v0 setShowsShowWhenLockedState:0];
  [v0 setShowsEmergencyAccessState:0];
  id v1 = [objc_allocWithZone((Class)HKHealthStore) init];
  id v2 = [objc_allocWithZone((Class)HKMedicalIDStore) initWithHealthStore:v1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  void v7[4] = sub_10002CB4C;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_10002C794;
  v7[3] = &unk_10015DA48;
  long long v4 = _Block_copy(v7);
  id v5 = v0;
  swift_release();
  [v2 fetchMedicalIDDataWithCompletion:v4];
  _Block_release(v4);

  return v5;
}

uint64_t sub_10002CB14()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10002CB4C(void *a1, uint64_t a2)
{
  sub_10002C4C0(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10002CB54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002CB64()
{
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for AppLabel(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = v3;
  return a1;
}

void destroy for AppLabel(uint64_t a1)
{
}

void *assignWithCopy for AppLabel(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)a2[1];
  id v4 = (void *)a1[1];
  a1[1] = v3;
  id v5 = v3;

  return a1;
}

void *assignWithTake for AppLabel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  id v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for AppLabel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppLabel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppLabel()
{
  return &type metadata for AppLabel;
}

uint64_t sub_10002CCAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002CCC8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo), "localizedName"));
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10002D088();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6 & 1;
  *(void *)(a2 + 24) = v7;
  return result;
}

double sub_10002CD5C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo;
  id v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo), "bundleIdentifier"));
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
LABEL_8:
    State.init(wrappedValue:)();
    goto LABEL_9;
  }
  [*(id *)(a1 + v4) iconImage];
LABEL_9:
  sub_10002CFE0();
  sub_10002D034();
  _ConditionalContent<>.init(storage:)();
  double result = *(double *)&v13;
  *(_OWORD *)a2 = v13;
  *(unsigned char *)(a2 + 16) = v14;
  return result;
}

uint64_t sub_10002CEBC()
{
  return Label.init(title:icon:)();
}

uint64_t sub_10002CF54@<X0>(uint64_t a1@<X8>)
{
  return sub_10002CCC8(*(void *)(v1 + 24), a1);
}

double sub_10002CF5C@<D0>(uint64_t a1@<X8>)
{
  return sub_10002CD5C(*(void *)(v1 + 24), a1);
}

unint64_t sub_10002CF64()
{
  unint64_t result = qword_10017BBD8;
  if (!qword_10017BBD8)
  {
    sub_10002A694(&qword_10017BBD0);
    sub_10002CFE0();
    sub_10002D034();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BBD8);
  }
  return result;
}

unint64_t sub_10002CFE0()
{
  unint64_t result = qword_10017BBE0;
  if (!qword_10017BBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BBE0);
  }
  return result;
}

unint64_t sub_10002D034()
{
  unint64_t result = qword_10017BBE8;
  if (!qword_10017BBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BBE8);
  }
  return result;
}

unint64_t sub_10002D088()
{
  unint64_t result = qword_10017BBF0;
  if (!qword_10017BBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BBF0);
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for AppIcon(void **a1, void **a2)
{
  id v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for AppIcon(id *a1)
{
}

void **assignWithCopy for AppIcon(void **a1, void **a2)
{
  id v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void *initializeWithTake for AppIcon(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void **assignWithTake for AppIcon(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for AppIcon(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppIcon(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppIcon()
{
  return &type metadata for AppIcon;
}

uint64_t initializeBufferWithCopyOfBuffer for ClockAppIcon(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for ClockAppIcon()
{
  return swift_release();
}

uint64_t assignWithCopy for ClockAppIcon(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ClockAppIcon(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockAppIcon(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockAppIcon(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockAppIcon()
{
  return &type metadata for ClockAppIcon;
}

uint64_t sub_10002D3C4()
{
  return sub_10002A8D8(&qword_10017BBF8, &qword_10017BC00);
}

uint64_t sub_10002D400()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_10002D41C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Image.ResizingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    [objc_allocWithZone((Class)UIImage) init];
  }
  id v8 = a1;
  Image.init(uiImage:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
  uint64_t v9 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static Color.black.getter();
  uint64_t v10 = Color.opacity(_:)();
  swift_release();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(_WORD *)(a2 + 17) = 256;
  *(void *)(a2 + 24) = v10;
  double result = 2.0;
  *(_OWORD *)(a2 + 32) = xmmword_1001100D0;
  *(void *)(a2 + 48) = 0x3FF0000000000000;
  return result;
}

double sub_10002D5B8@<D0>(uint64_t a1@<X8>)
{
  return sub_10002D41C(*v1, a1);
}

uint64_t sub_10002D5C0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10002D5DC@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100029F90(&qword_10017BC08);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  GeometryProxy.size.getter();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  char v36 = a1;
  uint64_t v37 = a2;
  sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.getter();
  int v33 = v38;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = a1;
  int v31 = a1;
  *(void *)(v17 + 24) = a2;
  uint64_t v18 = self;
  swift_retain();
  id v19 = [v18 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  uint64_t v21 = &v12[*(int *)(v10 + 60)];
  uint64_t v34 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16);
  v34(v21, v8, v5);
  *(void *)uint64_t v12 = v14;
  *((void *)v12 + 1) = v16;
  v12[16] = v33;
  *((void *)v12 + 3) = KeyPath;
  v12[32] = 0;
  *((void *)v12 + 5) = sub_10002DBE8;
  *((void *)v12 + 6) = v17;
  *((void *)v12 + 7) = 0;
  *((void *)v12 + 8) = 0;
  uint64_t v22 = (uint64_t (**)())&v12[*(int *)(v10 + 64)];
  void *v22 = sub_10002DBF4;
  v22[1] = (uint64_t (*)())v20;
  uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  swift_retain();
  v23(v8, v5);
  id v24 = [v18 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = v31;
  *(void *)(v25 + 24) = a2;
  uint64_t v26 = v35;
  sub_10002DC58((uint64_t)v12, v35);
  uint64_t v27 = sub_100029F90(&qword_10017BC10);
  v34((unsigned char *)(v26 + *(int *)(v27 + 52)), v8, v5);
  uint64_t v28 = (uint64_t (**)())(v26 + *(int *)(v27 + 56));
  NSString *v28 = sub_10002DBFC;
  v28[1] = (uint64_t (*)())v25;
  swift_retain();
  v23(v8, v5);
  return sub_10002DCC0((uint64_t)v12);
}

id sub_10002D944()
{
  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v1 = result;
    [result isDisplayDim];

    sub_100029F90(&qword_10017B8A8);
    return (id)State.wrappedValue.setter();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002D9E8@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  char v3 = *v1;
  uint64_t v4 = *((void *)v1 + 1);
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  *a1 = sub_10002DA94;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;

  return swift_retain();
}

uint64_t sub_10002DA5C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002DA94@<X0>(uint64_t a1@<X8>)
{
  return sub_10002D5DC(*(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24), a1);
}

id sub_10002DAA0()
{
  id v1 = [objc_allocWithZone((Class)SBHClockApplicationIconImageView) init];
  id v2 = [objc_allocWithZone((Class)SBIcon) init];
  double v3 = *(double *)v0;
  double v4 = *(double *)(v0 + 8);
  uint64_t v5 = *(void *)(v0 + 24);
  char v6 = *(unsigned char *)(v0 + 32);
  id v7 = v1;
  sub_10002E354(v0);
  double v8 = sub_100061510(v5, v6);
  sub_10002E384(v0);
  objc_msgSend(v7, "setIconImageInfo:", v3, v4, v8, 0.0);

  [v7 setIcon:v2 location:SBIconLocationRoot animated:0];
  return v7;
}

uint64_t sub_10002DB94@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayScale.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10002DBC0()
{
  return EnvironmentValues.displayScale.setter();
}

id sub_10002DBE8()
{
  return sub_10002D944();
}

uint64_t sub_10002DBF4()
{
  return sub_10002DC04();
}

uint64_t sub_10002DBFC()
{
  return sub_10002DC04();
}

uint64_t sub_10002DC04()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10002DC58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017BC08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002DCC0(uint64_t a1)
{
  uint64_t v2 = sub_100029F90(&qword_10017BC08);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002DD20(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for ClockAppIconView(uint64_t a1)
{
  return sub_10002DD3C(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_10002DD3C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ClockAppIconView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  char v4 = *(unsigned char *)(a2 + 32);
  sub_10002DD20(v3, v4);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithCopy for ClockAppIconView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  char v4 = *(unsigned char *)(a2 + 32);
  sub_10002DD20(v3, v4);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v4;
  sub_10002DD3C(v5, v6);
  return a1;
}

__n128 initializeWithTake for ClockAppIconView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ClockAppIconView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v4;
  sub_10002DD3C(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockAppIconView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockAppIconView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockAppIconView()
{
  return &type metadata for ClockAppIconView;
}

uint64_t sub_10002DF1C()
{
  return sub_10002A8D8(&qword_10017BC18, &qword_10017BC20);
}

unint64_t sub_10002DF5C()
{
  unint64_t result = qword_10017BC28;
  if (!qword_10017BC28)
  {
    sub_10002A694(&qword_10017BC30);
    sub_10002DFD8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BC28);
  }
  return result;
}

unint64_t sub_10002DFD8()
{
  unint64_t result = qword_10017BC38;
  if (!qword_10017BC38)
  {
    sub_10002A694(&qword_10017BC40);
    sub_10002E054();
    sub_10002E0C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BC38);
  }
  return result;
}

unint64_t sub_10002E054()
{
  unint64_t result = qword_10017BC48;
  if (!qword_10017BC48)
  {
    sub_10002A694(&qword_10017BC50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BC48);
  }
  return result;
}

unint64_t sub_10002E0C8()
{
  unint64_t result = qword_10017BC58;
  if (!qword_10017BC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BC58);
  }
  return result;
}

id sub_10002E11C()
{
  return sub_10002DAA0();
}

id sub_10002E158(void *a1)
{
  double v3 = *(double *)v1;
  double v4 = *(double *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  char v7 = *(unsigned char *)(v1 + 32);
  sub_10002DD20(v6, v7);
  double v8 = sub_100061510(v6, v7);
  sub_10002DD3C(v6, v7);
  objc_msgSend(a1, "setIconImageInfo:", v3, v4, v8, 0.0);

  return [a1 setPaused:(v5 & 1) == 0];
}

uint64_t sub_10002E20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10002E3B4();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10002E270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10002E3B4();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10002E2D4()
{
}

unint64_t sub_10002E300()
{
  unint64_t result = qword_10017BC60;
  if (!qword_10017BC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BC60);
  }
  return result;
}

uint64_t sub_10002E354(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002E384(uint64_t a1)
{
  return a1;
}

unint64_t sub_10002E3B4()
{
  unint64_t result = qword_10017BC68;
  if (!qword_10017BC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BC68);
  }
  return result;
}

uint64_t sub_10002E420()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for NamespaceWrapper()
{
  return self;
}

void *sub_10002E454()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10002E460@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for NamespaceWrapper();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id sub_10002E49C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CLBNotificationsManager()) init];
  qword_100186480 = (uint64_t)result;
  return result;
}

uint64_t sub_10002E574()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

id sub_10002E5E8()
{
  uint64_t v1 = sub_100029F90(&qword_10017BDB8);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  double v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  char v5 = &v0[OBJC_IVAR___CLBNotificationsManager__notifications];
  uint64_t v11 = &_swiftEmptyArrayStorage;
  unint64_t v6 = v0;
  sub_100029F90(&qword_10017BD88);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v4, v1);
  *(void *)&v6[OBJC_IVAR___CLBNotificationsManager_viewController] = 0;
  *(void *)&v6[OBJC_IVAR___CLBNotificationsManager_soundsByBulletinID] = &_swiftEmptyDictionarySingleton;

  char v7 = (objc_class *)type metadata accessor for CLBNotificationsManager();
  v10.receiver = v6;
  v10.super_class = v7;
  return objc_msgSendSuper2(&v10, "init");
}

void sub_10002E768(void *a1, uint64_t a2, void *a3)
{
  double v4 = v3;
  long long v51 = a3;
  uint64_t v56 = a2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  __chkstk_darwin(v6);
  uint64_t v53 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v57 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v61 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100029F90((uint64_t *)&unk_10017DE90);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v51 - v14;
  swift_getKeyPath();
  swift_getKeyPath();
  id v16 = a1;
  uint64_t v17 = (void (*)(uint64_t *, void))static Published.subscript.modify();
  uint64_t v19 = v18;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(*(void *)v19 + 16) >= *(void *)(*(void *)v19 + 24) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v17(v62, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v20 = v62[0];
  v62[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(v20 + 16);
  id v59 = v16;
  uint64_t v60 = v21;
  char v58 = v4;
  if (v21)
  {
    long long v52 = v13;
    uint64_t v22 = 0;
    uint64_t v23 = (void (**)(char *, char *, uint64_t))(v57 + 32);
    id v24 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
    uint64_t v25 = (unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
    while (1)
    {
      uint64_t v26 = v20;
      id v27 = *(id *)(v20 + 8 * v22 + 32);
      id v28 = objc_msgSend(v27, "date", v51);
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = v61;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        (*v23)(v15, v30, v8);
        (*v24)(v15, 0, 1, v8);
        if ((*v25)(v15, 1, v8) != 1)
        {
          sub_10002A840((uint64_t)v15, (uint64_t *)&unk_10017DE90);

          goto LABEL_7;
        }
      }
      else
      {
        (*v24)(v15, 1, 1, v8);
      }
      sub_10002A840((uint64_t)v15, (uint64_t *)&unk_10017DE90);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
LABEL_7:
      uint64_t v20 = v26;
      if (v60 == ++v22)
      {
        swift_bridgeObjectRelease();
        int v31 = (char *)v62[0];
        uint64_t v32 = v58;
        id v16 = v59;
        uint64_t v13 = v52;
        goto LABEL_13;
      }
    }
  }
  uint64_t v32 = v4;
  swift_bridgeObjectRelease();
  int v31 = (char *)_swiftEmptyArrayStorage;
LABEL_13:
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v33 = v62[0];
  v62[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v60 = *(void *)(v33 + 16);
  if (!v60)
  {
    swift_bridgeObjectRelease();
    uint64_t v42 = _swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  long long v52 = v31;
  uint64_t v34 = 0;
  uint64_t v35 = (void (**)(char *, char *, uint64_t))(v57 + 32);
  char v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
  uint64_t v37 = (unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
  do
  {
    id v38 = *(id *)(v33 + 8 * v34 + 32);
    id v39 = [v38 date];
    if (!v39)
    {
      (*v36)(v13, 1, 1, v8);
LABEL_16:
      sub_10002A840((uint64_t)v13, (uint64_t *)&unk_10017DE90);

      goto LABEL_17;
    }
    uint64_t v40 = v39;
    uint64_t v41 = v61;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*v35)(v13, v41, v8);
    (*v36)(v13, 0, 1, v8);
    if ((*v37)(v13, 1, v8) == 1) {
      goto LABEL_16;
    }
    sub_10002A840((uint64_t)v13, (uint64_t *)&unk_10017DE90);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_17:
    ++v34;
  }
  while (v60 != v34);
  swift_bridgeObjectRelease();
  uint64_t v42 = (void *)v62[0];
  uint64_t v32 = v58;
  id v16 = v59;
  int v31 = v52;
LABEL_23:
  v62[0] = (uint64_t)v42;
  swift_retain();
  sub_100030224(v62);
  swift_release();
  uint64_t v43 = v62[0];
  v62[0] = (uint64_t)v31;
  sub_1000302A0(v43);
  uint64_t v44 = v62[0];
  swift_getKeyPath();
  swift_getKeyPath();
  v62[0] = v44;
  v32;
  static Published.subscript.setter();
  if (v56
    && (![v16 preemptsPresentedAlert]
     || ([v16 hasCriticalIcon] & 1) != 0))
  {
LABEL_28:
    if (objc_msgSend(v16, "preemptsPresentedAlert", v51)
      && ([v16 hasCriticalIcon] & 1) == 0)
    {
      uint64_t v47 = Logger.common.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v47, v55);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Received Emergency Alert notification", v50, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v55);
      sub_10002F170(v51, v16);
    }
  }
  else
  {
    sub_10002F558(v16);
    id v45 = [self sharedInstance];
    if (v45)
    {
      uint64_t v46 = v45;
      [v45 resetIdleTimerAndUndim:1];

      goto LABEL_28;
    }
    __break(1u);
    swift_release();
    __break(1u);
  }
}

void sub_10002EFB0(void *a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = a1;
  uint64_t v3 = (void (*)(unsigned char *, void))static Published.subscript.modify();
  char v5 = v4;
  sub_1000323BC(v4);
  uint64_t v7 = v6;

  uint64_t v8 = *(void *)(*v5 + 16);
  if (v8 < v7)
  {
    __break(1u);
  }
  else
  {
    sub_1000325E4(v7, v8);
    v3(v15, 0);
    swift_release();
    swift_release();
    id v9 = [v2 bulletinID];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      swift_beginAccess();
      uint64_t v14 = (void *)sub_10003208C(v11, v13);
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10002F170(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100029F90(&qword_10017BD90);
  uint64_t v7 = __chkstk_darwin(v6);
  id v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v35 - v10);
  id v12 = [a2 title];
  uint64_t v37 = v6;
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v15;
    uint64_t v36 = v14;
  }
  else
  {
    unint64_t v35 = 0xE000000000000000;
    uint64_t v36 = 0;
  }
  id v16 = objc_msgSend(a2, "message", v35, v36);
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v20 = 0xE000000000000000;
  }
  uint64_t v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a1;
  v22[3] = v21;
  v22[4] = a2;
  char v38 = 0;
  id v23 = a1;
  id v24 = a2;
  State.init(wrappedValue:)();
  char v25 = v39;
  uint64_t v26 = v40;
  uint64_t v27 = swift_allocObject();
  unint64_t v28 = v35;
  *(void *)(v27 + 16) = v36;
  *(void *)(v27 + 24) = v28;
  *(void *)(v27 + 32) = v18;
  *(void *)(v27 + 40) = v20;
  *(void *)(v27 + 48) = sub_1000321DC;
  *(void *)(v27 + 56) = v22;
  *(unsigned char *)(v27 + 64) = v25;
  *(void *)(v27 + 72) = v26;
  *uint64_t v11 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = (uint64_t (**)())((char *)v11 + *(int *)(v37 + 36));
  *uint64_t v29 = sub_1000322AC;
  v29[1] = (uint64_t (*)())v27;
  objc_allocWithZone((Class)sub_100029F90(&qword_10017BD98));
  sub_1000322BC((uint64_t)v11, (uint64_t)v9);
  uint64_t v30 = (void *)UIHostingController.init(rootView:)();
  sub_10002A840((uint64_t)v11, &qword_10017BD90);
  id v31 = [v30 view];
  if (v31)
  {
    uint64_t v32 = v31;
    id v33 = [self clearColor];
    [v32 setBackgroundColor:v33];

    [v23 setRootViewController:v30];
    [v23 makeKeyAndVisible];
    uint64_t v34 = *(void **)(v3 + OBJC_IVAR___CLBNotificationsManager_viewController);
    *(void *)(v3 + OBJC_IVAR___CLBNotificationsManager_viewController) = v30;
  }
  else
  {
    __break(1u);
  }
}

void sub_10002F484(void *a1, uint64_t a2, void *a3)
{
  [a1 setHidden:1];
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    char v5 = (void *)Strong;
    uint64_t v6 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v6)
    {
      [v6 clearBulletin:a3];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
  swift_beginAccess();
  uint64_t v7 = swift_unknownObjectWeakLoadStrong();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    sub_10002F934(a3);
  }
}

void sub_10002F558(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 sound];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [a1 bulletinID];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      id v14 = [v8 alertConfiguration];
      id v15 = [objc_allocWithZone((Class)CLBSound) initWithToneAlertConfiguration:v14];

      id v16 = (uint64_t *)(v1 + OBJC_IVAR___CLBNotificationsManager_soundsByBulletinID);
      swift_beginAccess();
      if (v15)
      {
        id v10 = v15;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v34 = *v16;
        uint64_t *v16 = 0x8000000000000000;
        sub_100075538((uint64_t)v10, v11, v13, isUniquelyReferenced_nonNull_native);
        uint64_t *v16 = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v27 = (void *)sub_10003208C(v11, v13);
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      id v28 = [self sharedInstance];
      if (v28)
      {
        uint64_t v29 = v28;
        [v28 playSound:v15 completion:0];

        return;
      }
      __break(1u);
      goto LABEL_15;
    }
    uint64_t v18 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v18, v3);
    id v10 = a1;
    unint64_t v19 = Logger.logObject.getter();
    int v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, (os_log_type_t)v20))
    {
      int v32 = v20;
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      v33[0] = v31;
      *(_DWORD *)uint64_t v21 = 136315138;
      id v22 = [v10 safeDescription];
      if (!v22)
      {
LABEL_15:

        __break(1u);
        return;
      }
      id v23 = v22;
      v30[1] = v21 + 4;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      uint64_t v34 = sub_100050B5C(v24, v26, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v32, "Unexpectedly missing ID for bulletin: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

void sub_10002F934(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 bulletinID];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    uint64_t v12 = (uint64_t *)(v1 + OBJC_IVAR___CLBNotificationsManager_soundsByBulletinID);
    swift_beginAccess();
    uint64_t v13 = *v12;
    if (!*(void *)(*v12 + 16))
    {
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_1000743D8((uint64_t)v9, v11);
    if ((v15 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    id v16 = *(id *)(*(void *)(v13 + 56) + 8 * v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v17 = [self sharedInstance];
    if (v17)
    {
      uint64_t v18 = v17;
      [v17 stopSound:v16];

      return;
    }
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v19 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v19, v3);
  id v9 = a1;
  int v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    id v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v30[0] = v29;
    *(_DWORD *)id v22 = 136315138;
    id v23 = [v9 safeDescription];
    if (!v23)
    {
LABEL_15:

      __break(1u);
      return;
    }
    uint64_t v24 = v23;
    id v28 = v22 + 4;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    v30[3] = sub_100050B5C(v25, v27, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unexpectedly missing ID for bulletin: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

id sub_10002FC7C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CLBNotificationsManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10002FD58()
{
  return type metadata accessor for CLBNotificationsManager();
}

uint64_t type metadata accessor for CLBNotificationsManager()
{
  uint64_t result = qword_10017BD70;
  if (!qword_10017BD70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10002FDAC()
{
  sub_10002FE60();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10002FE60()
{
  if (!qword_10017BD80)
  {
    sub_10002A694(&qword_10017BD88);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017BD80);
    }
  }
}

ValueMetadata *type metadata accessor for CLBBulletin()
{
  return &type metadata for CLBBulletin;
}

uint64_t sub_10002FECC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CLBNotificationsManager();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002FF0C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10002FF8C(uint64_t a1, void **a2)
{
  objc_super v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

void *sub_100030004(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100029F90(&qword_10017BDC8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      _OWORD v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100032800(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100030114(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100029F90(&qword_10017BDC0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      _OWORD v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10003290C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100030224(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_100032380(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_10003043C(v6);
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_1000302A0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_20;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v7 = *(void *)(v3 + 24) >> 1;
    if (v7 >= (uint64_t)(v4 + v2))
    {
      unint64_t v8 = *(void *)(a1 + 16);
      if (v8) {
        goto LABEL_5;
      }
LABEL_15:
      if (!v2) {
        goto LABEL_16;
      }
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  swift_bridgeObjectRelease();
  *uint64_t v1 = v3;
  uint64_t v7 = *(void *)(v3 + 24) >> 1;
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  if (v7 - v9 < (uint64_t)v8)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v10 = v3 + 8 * v9 + 32;
  if (a1 + 32 < v10 + 8 * v8 && v10 < a1 + 32 + 8 * v8) {
    goto LABEL_23;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v12 = *(void *)(*v1 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (v13)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(void *)(*v1 + 16) = v14;
LABEL_16:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

void sub_10003043C(uint64_t *a1)
{
  unint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v173 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100029F90((uint64_t *)&unk_10017DE90);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  v166 = (char *)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  v169 = (char *)&v148 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v156 = (char *)&v148 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v161 = (char *)&v148 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v152 = (char *)&v148 - v18;
  __chkstk_darwin(v17);
  v154 = (char *)&v148 - v19;
  v153 = a1;
  Swift::Int v20 = a1[1];
  Swift::Int v21 = _minimumMergeRunLength(_:)(v20);
  if (v21 >= v20)
  {
    if (v20 < 0) {
      goto LABEL_144;
    }
    if (v20) {
      sub_1000312C0(0, (char *)v20, (char *)1, v153);
    }
    return;
  }
  if (v20 >= 0) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = v20 + 1;
  }
  if (v20 < -1) {
    goto LABEL_164;
  }
  Swift::Int v150 = v21;
  v159 = (char *)v20;
  uint64_t v164 = v1;
  if (v20 < 2)
  {
    uint64_t v25 = (char *)_swiftEmptyArrayStorage;
    v175 = _swiftEmptyArrayStorage;
    v162 = (void **)&_swiftEmptyArrayStorage[4];
    if (v20 != 1)
    {
      unint64_t v29 = _swiftEmptyArrayStorage[2];
LABEL_110:
      if (v29 >= 2)
      {
        uint64_t v144 = *v153;
        do
        {
          unint64_t v5 = v29 - 2;
          if (v29 < 2) {
            goto LABEL_139;
          }
          if (!v144) {
            goto LABEL_159;
          }
          uint64_t v3 = v25;
          uint64_t v145 = *(void *)&v25[16 * v5 + 32];
          unint64_t v2 = *(char **)&v25[16 * v29 + 24];
          uint64_t v146 = v164;
          sub_100031680((char *)(v144 + 8 * v145), (void **)(v144 + 8 * *(void *)&v25[16 * v29 + 16]), (void **)(v144 + 8 * (void)v2), v162);
          uint64_t v164 = v146;
          if (v146) {
            break;
          }
          if ((uint64_t)v2 < v145) {
            goto LABEL_140;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v3 = sub_100032078((uint64_t)v3);
          }
          if (v5 >= *((void *)v3 + 2)) {
            goto LABEL_141;
          }
          v147 = &v3[16 * v5 + 32];
          *(void *)v147 = v145;
          *((void *)v147 + 1) = v2;
          unint64_t v5 = *((void *)v3 + 2);
          if (v29 > v5) {
            goto LABEL_142;
          }
          memmove(&v3[16 * v29 + 16], &v3[16 * v29 + 32], 16 * (v5 - v29));
          uint64_t v25 = v3;
          *((void *)v3 + 2) = v5 - 1;
          unint64_t v29 = v5 - 1;
        }
        while (v5 > 2);
      }
LABEL_121:
      swift_bridgeObjectRelease();
      v175[2] = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v23 = v22 >> 1;
    uint64_t v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v24 + 16) = v23;
    v162 = (void **)(v24 + 32);
    v175 = (void *)v24;
  }
  unint64_t v26 = 0;
  uint64_t v27 = *v153;
  v171 = (id *)(v6 + 32);
  v172 = (char **)(v6 + 56);
  v170 = (unsigned int (**)(char *, uint64_t, unint64_t))(v6 + 48);
  v167 = (char *)(v6 + 8);
  uint64_t v149 = v27 + 16;
  uint64_t v148 = v27 - 8;
  uint64_t v25 = (char *)_swiftEmptyArrayStorage;
  id v28 = v159;
  while (1)
  {
    uint64_t v30 = v26;
    uint64_t v31 = (id *)(v26 + 1);
    v158 = v26;
    if ((uint64_t)(v26 + 1) < (uint64_t)v28)
    {
      v151 = v25;
      int v32 = *(void **)(v27 + 8 * (void)v26);
      id v33 = *(id *)(v27 + 8 * (void)v31);
      uint64_t v34 = v32;
      id v35 = [v33 date];
      if (!v35) {
        goto LABEL_160;
      }
      uint64_t v36 = v35;
      uint64_t v37 = v173;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      char v38 = v154;
      v174 = (void (*)(char *, char *, unint64_t))*v171;
      v174(v154, v37, v5);
      uint64_t v3 = *v172;
      ((void (*)(char *, void, uint64_t, unint64_t))*v172)(v38, 0, 1, v5);
      v163 = *v170;
      if (v163(v38, 1, v5) == 1) {
        goto LABEL_161;
      }
      id v39 = [v34 date];
      if (!v39) {
        goto LABEL_162;
      }
      uint64_t v40 = v39;
      v168 = v34;
      uint64_t v41 = v173;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v42 = v152;
      v174(v152, v41, v5);
      ((void (*)(char *, void, uint64_t, unint64_t))v3)(v42, 0, 1, v5);
      if (v163(v42, 1, v5) == 1) {
        goto LABEL_163;
      }
      uint64_t v43 = v154;
      int v157 = static Date.< infix(_:_:)();
      unint64_t v2 = *(char **)v167;
      (*(void (**)(char *, unint64_t))v167)(v42, v5);
      v155 = (void (*)(char *, unint64_t))v2;
      ((void (*)(char *, unint64_t))v2)(v43, v5);

      uint64_t v31 = (id *)(v30 + 2);
      if ((uint64_t)(v30 + 2) < (uint64_t)v159)
      {
        uint64_t v44 = (id *)(v149 + 8 * (void)v30);
        while (1)
        {
          v168 = (char *)v31;
          id v45 = *(v44 - 1);
          id v46 = *v44;
          id v47 = v45;
          id v48 = [v46 date];
          if (!v48) {
            goto LABEL_154;
          }
          os_log_type_t v49 = v48;
          uint64_t v50 = v173;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          long long v51 = v161;
          v174(v161, v50, v5);
          ((void (*)(char *, void, uint64_t, unint64_t))v3)(v51, 0, 1, v5);
          if (v163(v51, 1, v5) == 1) {
            goto LABEL_155;
          }
          id v52 = [v47 date];
          if (!v52) {
            goto LABEL_156;
          }
          uint64_t v53 = v52;
          v160 = v44;
          uint64_t v54 = v47;
          uint64_t v55 = v46;
          uint64_t v56 = v173;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v57 = v156;
          v174(v156, v56, v5);
          char v58 = v3;
          ((void (*)(char *, void, uint64_t, unint64_t))v3)(v57, 0, 1, v5);
          if (v163(v57, 1, v5) == 1) {
            goto LABEL_157;
          }
          unint64_t v2 = v161;
          int v59 = static Date.< infix(_:_:)();
          uint64_t v60 = v57;
          int v61 = v59;
          uint64_t v3 = v167;
          id v62 = v155;
          v155(v60, v5);
          v62(v2, v5);

          if ((v157 ^ v61)) {
            break;
          }
          uint64_t v31 = (id *)(v168 + 1);
          uint64_t v44 = v160 + 1;
          uint64_t v3 = v58;
          if (v159 == v168 + 1)
          {
            uint64_t v31 = (id *)v159;
            goto LABEL_30;
          }
        }
        uint64_t v31 = (id *)v168;
LABEL_30:
        uint64_t v30 = v158;
      }
      uint64_t v25 = v151;
      if (v157)
      {
        if ((uint64_t)v31 < (uint64_t)v30) {
          goto LABEL_145;
        }
        if ((uint64_t)v30 < (uint64_t)v31)
        {
          v63 = (uint64_t *)(v148 + 8 * (void)v31);
          uint64_t v64 = v31;
          id v65 = v30;
          uint64_t v66 = (uint64_t *)(v27 + 8 * (void)v30);
          do
          {
            uint64_t v64 = (id *)((char *)v64 - 1);
            if (v65 != (char *)v64)
            {
              if (!v27) {
                goto LABEL_158;
              }
              uint64_t v67 = *v66;
              *uint64_t v66 = *v63;
              uint64_t *v63 = v67;
            }
            ++v65;
            --v63;
            ++v66;
          }
          while ((uint64_t)v65 < (uint64_t)v64);
        }
      }
    }
    if ((uint64_t)v31 < (uint64_t)v159)
    {
      if (__OFSUB__(v31, v30)) {
        goto LABEL_143;
      }
      if ((char *)v31 - v30 < v150) {
        break;
      }
    }
LABEL_60:
    if ((uint64_t)v31 < (uint64_t)v30) {
      goto LABEL_138;
    }
    v93 = v25;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v25 = v93;
    }
    else {
      uint64_t v25 = sub_100031EC0(0, *((void *)v93 + 2) + 1, 1, v93);
    }
    unint64_t v95 = *((void *)v25 + 2);
    unint64_t v94 = *((void *)v25 + 3);
    unint64_t v29 = v95 + 1;
    if (v95 >= v94 >> 1) {
      uint64_t v25 = sub_100031EC0((char *)(v94 > 1), v95 + 1, 1, v25);
    }
    *((void *)v25 + 2) = v29;
    v174 = (void (*)(char *, char *, unint64_t))(v25 + 32);
    v96 = &v25[16 * v95 + 32];
    *(void *)v96 = v30;
    *((void *)v96 + 1) = v31;
    v168 = (char *)v31;
    if (v95)
    {
      v97 = (char *)v174;
      while (1)
      {
        unint64_t v98 = v29 - 1;
        if (v29 >= 4)
        {
          v103 = &v97[16 * v29];
          uint64_t v104 = *((void *)v103 - 8);
          uint64_t v105 = *((void *)v103 - 7);
          BOOL v109 = __OFSUB__(v105, v104);
          uint64_t v106 = v105 - v104;
          if (v109) {
            goto LABEL_127;
          }
          uint64_t v108 = *((void *)v103 - 6);
          uint64_t v107 = *((void *)v103 - 5);
          BOOL v109 = __OFSUB__(v107, v108);
          uint64_t v101 = v107 - v108;
          char v102 = v109;
          if (v109) {
            goto LABEL_128;
          }
          unint64_t v110 = v29 - 2;
          v111 = &v97[16 * v29 - 32];
          uint64_t v113 = *(void *)v111;
          uint64_t v112 = *((void *)v111 + 1);
          BOOL v109 = __OFSUB__(v112, v113);
          uint64_t v114 = v112 - v113;
          if (v109) {
            goto LABEL_130;
          }
          BOOL v109 = __OFADD__(v101, v114);
          uint64_t v115 = v101 + v114;
          if (v109) {
            goto LABEL_133;
          }
          if (v115 >= v106)
          {
            v133 = &v97[16 * v98];
            uint64_t v135 = *(void *)v133;
            uint64_t v134 = *((void *)v133 + 1);
            BOOL v109 = __OFSUB__(v134, v135);
            uint64_t v136 = v134 - v135;
            if (v109) {
              goto LABEL_137;
            }
            BOOL v126 = v101 < v136;
            goto LABEL_98;
          }
        }
        else
        {
          if (v29 != 3)
          {
            uint64_t v127 = *((void *)v25 + 4);
            uint64_t v128 = *((void *)v25 + 5);
            BOOL v109 = __OFSUB__(v128, v127);
            uint64_t v120 = v128 - v127;
            char v121 = v109;
            goto LABEL_92;
          }
          uint64_t v100 = *((void *)v25 + 4);
          uint64_t v99 = *((void *)v25 + 5);
          BOOL v109 = __OFSUB__(v99, v100);
          uint64_t v101 = v99 - v100;
          char v102 = v109;
        }
        if (v102) {
          goto LABEL_129;
        }
        unint64_t v110 = v29 - 2;
        v116 = &v97[16 * v29 - 32];
        uint64_t v118 = *(void *)v116;
        uint64_t v117 = *((void *)v116 + 1);
        BOOL v119 = __OFSUB__(v117, v118);
        uint64_t v120 = v117 - v118;
        char v121 = v119;
        if (v119) {
          goto LABEL_132;
        }
        v122 = &v97[16 * v98];
        uint64_t v124 = *(void *)v122;
        uint64_t v123 = *((void *)v122 + 1);
        BOOL v109 = __OFSUB__(v123, v124);
        uint64_t v125 = v123 - v124;
        if (v109) {
          goto LABEL_135;
        }
        if (__OFADD__(v120, v125)) {
          goto LABEL_136;
        }
        if (v120 + v125 >= v101)
        {
          BOOL v126 = v101 < v125;
LABEL_98:
          if (v126) {
            unint64_t v98 = v110;
          }
          goto LABEL_100;
        }
LABEL_92:
        if (v121) {
          goto LABEL_131;
        }
        v129 = &v97[16 * v98];
        uint64_t v131 = *(void *)v129;
        uint64_t v130 = *((void *)v129 + 1);
        BOOL v109 = __OFSUB__(v130, v131);
        uint64_t v132 = v130 - v131;
        if (v109) {
          goto LABEL_134;
        }
        if (v132 < v120) {
          goto LABEL_14;
        }
LABEL_100:
        unint64_t v137 = v98 - 1;
        if (v98 - 1 >= v29)
        {
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
          goto LABEL_147;
        }
        if (!v27) {
          goto LABEL_153;
        }
        uint64_t v3 = v25;
        v138 = (uint64_t *)&v97[16 * v137];
        v139 = v97;
        uint64_t v140 = *v138;
        v141 = &v139[16 * v98];
        unint64_t v2 = (char *)*((void *)v141 + 1);
        uint64_t v142 = v164;
        sub_100031680((char *)(v27 + 8 * *v138), (void **)(v27 + 8 * *(void *)v141), (void **)(v27 + 8 * (void)v2), v162);
        uint64_t v164 = v142;
        if (v142) {
          goto LABEL_121;
        }
        if ((uint64_t)v2 < v140) {
          goto LABEL_124;
        }
        if (v98 > *((void *)v3 + 2)) {
          goto LABEL_125;
        }
        uint64_t *v138 = v140;
        v97 = (char *)v174;
        *((void *)v174 + 2 * v137 + 1) = v2;
        unint64_t v143 = *((void *)v3 + 2);
        if (v98 >= v143) {
          goto LABEL_126;
        }
        unint64_t v29 = v143 - 1;
        memmove(v141, v141 + 16, 16 * (v143 - 1 - v98));
        uint64_t v25 = v3;
        *((void *)v3 + 2) = v143 - 1;
        if (v143 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v29 = 1;
LABEL_14:
    id v28 = v159;
    unint64_t v26 = v168;
    if ((uint64_t)v168 >= (uint64_t)v159) {
      goto LABEL_110;
    }
  }
  if (__OFADD__(v30, v150)) {
    goto LABEL_146;
  }
  char v68 = v159;
  if ((uint64_t)&v30[v150] < (uint64_t)v159) {
    char v68 = &v30[v150];
  }
  if ((uint64_t)v68 >= (uint64_t)v30)
  {
    if (v31 != (id *)v68)
    {
      v151 = v25;
      uint64_t v69 = (char *)(v148 + 8 * (void)v31);
      uint64_t v165 = v27;
      v160 = (id *)v68;
      do
      {
        char v71 = v69;
        uint64_t v72 = *(void **)(v27 + 8 * (void)v31);
        v73 = v30;
        v163 = (unsigned int (*)(char *, uint64_t, unint64_t))v71;
        v74 = v71;
        v168 = (char *)v31;
        while (1)
        {
          v75 = *(void **)v74;
          id v76 = v72;
          v174 = v75;
          id v77 = [v76 date];
          if (!v77) {
            goto LABEL_150;
          }
          v78 = v77;
          v79 = v173;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v3 = (char *)*v171;
          v80 = v169;
          ((void (*)(char *, char *, unint64_t))*v171)(v169, v79, v5);
          unint64_t v2 = *v172;
          ((void (*)(char *, void, uint64_t, unint64_t))*v172)(v80, 0, 1, v5);
          v81 = *v170;
          if ((*v170)(v80, 1, v5) == 1) {
            goto LABEL_151;
          }
          id v82 = [v174 date];
          if (!v82) {
            goto LABEL_148;
          }
          v83 = v82;
          unint64_t v84 = v5;
          v85 = v173;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v86 = v166;
          v87 = v85;
          unint64_t v5 = v84;
          ((void (*)(char *, char *, unint64_t))v3)(v166, v87, v84);
          ((void (*)(char *, void, uint64_t, unint64_t))v2)(v86, 0, 1, v84);
          if (v81(v86, 1, v84) == 1) {
            goto LABEL_149;
          }
          v88 = v169;
          char v89 = static Date.< infix(_:_:)();
          v90 = v86;
          char v91 = v89;
          uint64_t v3 = v167;
          unint64_t v2 = *(char **)v167;
          (*(void (**)(char *, unint64_t))v167)(v90, v5);
          ((void (*)(char *, unint64_t))v2)(v88, v5);

          uint64_t v27 = v165;
          if ((v91 & 1) == 0) {
            break;
          }
          uint64_t v70 = v168;
          if (!v165) {
            goto LABEL_152;
          }
          v92 = *(void **)v74;
          uint64_t v72 = (void *)*((void *)v74 + 1);
          *(void *)v74 = v72;
          *((void *)v74 + 1) = v92;
          v74 -= 8;
          if (v70 == ++v73) {
            goto LABEL_49;
          }
        }
        uint64_t v70 = v168;
LABEL_49:
        uint64_t v31 = (id *)(v70 + 1);
        uint64_t v69 = (char *)v163 + 8;
        uint64_t v30 = v158;
      }
      while (v31 != v160);
      uint64_t v31 = v160;
      uint64_t v25 = v151;
    }
    goto LABEL_60;
  }
LABEL_147:
  __break(1u);
LABEL_148:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))v2)(v166, 1, 1, v5);
LABEL_149:
  __break(1u);
LABEL_150:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))*v172)(v169, 1, 1, v5);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))v3)(v161, 1, 1, v5);
LABEL_155:
  __break(1u);
LABEL_156:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))v3)(v156, 1, 1, v5);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))*v172)(v154, 1, 1, v5);
LABEL_161:
  __break(1u);
LABEL_162:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))v3)(v152, 1, 1, v5);
LABEL_163:
  __break(1u);
LABEL_164:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000312C0(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v36 = a1;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v46 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100029F90((uint64_t *)&unk_10017DE90);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v45 = (char *)&v34 - v14;
  id v35 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *a4;
    uint64_t v43 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v44 = (char **)(v8 + 56);
    uint64_t v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    char v38 = (void (**)(void *, uint64_t))(v8 + 8);
    uint64_t v39 = v15;
    uint64_t v16 = v15 + 8 * (void)a3 - 8;
    uint64_t v17 = &selRef_cancel;
LABEL_5:
    uint64_t v18 = *(void **)(v39 + 8 * (void)a3);
    uint64_t v40 = a3;
    uint64_t v41 = v36;
    uint64_t v37 = v16;
    while (1)
    {
      uint64_t v19 = *(char **)v16;
      id v20 = v18;
      id v47 = v19;
      id v21 = [v20 v17[64]];
      if (!v21) {
        break;
      }
      uint64_t v22 = v21;
      uint64_t v19 = v13;
      uint64_t v23 = v46;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v24 = *v43;
      uint64_t v25 = v45;
      (*v43)(v45, v23, v7);
      a3 = *v44;
      ((void (*)(char *, void, uint64_t, uint64_t))*v44)(v25, 0, 1, v7);
      unint64_t v26 = *v42;
      if ((*v42)(v25, 1, v7) == 1) {
        goto LABEL_15;
      }
      id v27 = [v47 v17[64]];
      if (!v27) {
        goto LABEL_16;
      }
      id v28 = v27;
      unint64_t v29 = v46;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v24(v19, v29, v7);
      uint64_t v13 = v19;
      ((void (*)(char *, void, uint64_t, uint64_t))a3)(v19, 0, 1, v7);
      if (v26(v19, 1, v7) == 1) {
        goto LABEL_17;
      }
      uint64_t v30 = v45;
      char v31 = static Date.< infix(_:_:)();
      int v32 = *v38;
      (*v38)(v19, v7);
      v32(v30, v7);

      a3 = v40;
      uint64_t v17 = &selRef_cancel;
      if (v31)
      {
        if (!v39) {
          goto LABEL_18;
        }
        id v33 = *(char **)v16;
        uint64_t v18 = *(void **)(v16 + 8);
        *(void *)uint64_t v16 = v18;
        *(void *)(v16 + 8) = v33;
        v16 -= 8;
        if (a3 != (char *)++v41) {
          continue;
        }
      }
      ++a3;
      uint64_t v16 = v37 + 8;
      if (a3 == v35) {
        return;
      }
      goto LABEL_5;
    }
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v44)(v45, 1, 1, v7);
LABEL_15:
    __break(1u);
LABEL_16:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))a3)(v19, 1, 1, v7);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
}

uint64_t sub_100031680(char *a1, void **a2, void **a3, void **a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = (void *)type metadata accessor for Date();
  id v82 = (void (**)(char *, void *))*(v10 - 1);
  __chkstk_darwin(v10);
  unint64_t v95 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100029F90((uint64_t *)&unk_10017DE90);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  v85 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  v90 = (char *)&v80 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v87 = (char *)&v80 - v18;
  __chkstk_darwin(v17);
  v92 = (char *)&v80 - v19;
  v93 = v10;
  uint64_t v20 = (char *)a2 - a1;
  uint64_t v21 = (char *)a2 - a1 + 7;
  if ((char *)a2 - a1 >= 0) {
    uint64_t v21 = (char *)a2 - a1;
  }
  uint64_t v22 = v21 >> 3;
  uint64_t v23 = a2;
  v88 = a3;
  uint64_t v24 = (char *)a3 - (char *)a2;
  uint64_t v25 = v24 / 8;
  unint64_t v94 = (void **)a1;
  unint64_t v98 = (void **)a1;
  v97 = a4;
  v80 = (void (*)(char *, uint64_t, uint64_t, void))v4;
  if (v21 >> 3 >= v24 / 8)
  {
    if (v24 < -7) {
      goto LABEL_60;
    }
    id v52 = v23;
    if (a4 != v23 || &v23[v25] <= a4) {
      memmove(a4, v23, 8 * v25);
    }
    uint64_t v53 = &a4[v25];
    v96 = v53;
    unint64_t v98 = v23;
    if (v24 < 8 || v94 >= v23) {
      goto LABEL_51;
    }
    uint64_t v54 = v82;
    uint64_t v55 = (void (**)(void))(v82 + 4);
    id v28 = (id *)(v82 + 7);
    char v89 = (unsigned int (**)(char *, uint64_t, void *))(v82 + 6);
    ++v82;
    v83 = (void (**)(void))(v54 + 4);
    uint64_t v56 = (char *)(v88 - 1);
    uint64_t v57 = v52;
    unint64_t v84 = a4;
    v81 = (id *)(v54 + 7);
    while (1)
    {
      char v91 = v56;
      v87 = (char *)v53;
      v88 = v52;
      char v58 = v53 - 1;
      int v59 = *--v57;
      uint64_t v60 = *(v53 - 1);
      v92 = v59;
      v86 = v60;
      id v61 = [v60 date];
      if (!v61) {
        goto LABEL_56;
      }
      id v62 = v61;
      v63 = v95;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v64 = *v55;
      id v65 = v90;
      ((void (*)(char *, char *, void *))*v55)(v90, v63, v10);
      uint64_t v66 = v10;
      uint64_t v10 = *v28;
      ((void (*)(char *, void, uint64_t, void *))*v28)(v65, 0, 1, v66);
      uint64_t v67 = *v89;
      if ((*v89)(v65, 1, v66) == 1) {
        goto LABEL_57;
      }
      id v68 = [v92 date];
      if (!v68) {
        goto LABEL_58;
      }
      uint64_t v69 = v68;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v70 = v85;
      char v71 = v93;
      v64();
      ((void (*)(char *, void, uint64_t, void *))v10)(v70, 0, 1, v71);
      if (v67(v70, 1, v71) == 1) {
        goto LABEL_59;
      }
      uint64_t v72 = v90;
      v73 = v91 + 8;
      char v74 = static Date.< infix(_:_:)();
      v75 = *v82;
      (*v82)(v70, v71);
      v75(v72, v71);

      uint64_t v10 = v71;
      if (v74)
      {
        uint64_t v53 = (void **)v87;
        id v76 = v91;
        if (v73 != (char *)v88 || v91 >= (char *)v88) {
          *(void *)char v91 = *v57;
        }
        unint64_t v98 = v57;
      }
      else
      {
        v96 = v58;
        id v76 = v91;
        if (v73 >= v87 && v91 < v87)
        {
          id v77 = v94;
          id v28 = v81;
          if (v73 != v87) {
            *(void *)char v91 = *v58;
          }
          uint64_t v57 = v88;
          uint64_t v53 = v58;
          v78 = v84;
          goto LABEL_49;
        }
        *(void *)char v91 = *v58;
        uint64_t v57 = v88;
        uint64_t v53 = v58;
      }
      v78 = v84;
      id v77 = v94;
      id v28 = v81;
LABEL_49:
      uint64_t v55 = v83;
      if (v53 > v78)
      {
        uint64_t v56 = v76 - 8;
        id v52 = v57;
        if (v57 > v77) {
          continue;
        }
      }
      goto LABEL_51;
    }
  }
  if (v20 >= -7)
  {
    unint64_t v26 = v94;
    if (a4 != v94 || &v94[v22] <= a4) {
      memmove(a4, v94, 8 * v22);
    }
    v86 = &a4[v22];
    v96 = v86;
    if (v20 >= 8)
    {
      id v27 = v23;
      if (v23 < v88)
      {
        v90 = (char *)(v82 + 4);
        char v91 = (char *)(v82 + 7);
        char v89 = (unsigned int (**)(char *, uint64_t, void *))(v82 + 6);
        v85 = (char *)(v82 + 1);
        while (1)
        {
          unint64_t v94 = v26;
          id v28 = v27;
          unint64_t v29 = a4;
          uint64_t v30 = *a4;
          id v31 = *v27;
          uint64_t v10 = v30;
          id v32 = [v31 date];
          if (!v32) {
            break;
          }
          id v33 = v32;
          uint64_t v34 = v95;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v35 = *(void (**)(char *, char *, void *))v90;
          uint64_t v37 = v92;
          uint64_t v36 = v93;
          (*(void (**)(char *, char *, void *))v90)(v92, v34, v93);
          unint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, void *))v91;
          (*(void (**)(char *, void, uint64_t, void *))v91)(v37, 0, 1, v36);
          char v38 = *v89;
          if ((*v89)(v37, 1, v36) == 1) {
            goto LABEL_53;
          }
          id v39 = [v10 date];
          if (!v39) {
            goto LABEL_54;
          }
          uint64_t v40 = v39;
          uint64_t v41 = v95;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v42 = v87;
          uint64_t v43 = v41;
          uint64_t v44 = v93;
          v35(v87, v43, v93);
          v5(v42, 0, 1, v44);
          if (v38(v42, 1, v44) == 1) {
            goto LABEL_55;
          }
          id v45 = v92;
          char v46 = static Date.< infix(_:_:)();
          id v47 = v42;
          char v48 = v46;
          unint64_t v5 = (void (*)(char *, uint64_t, uint64_t, void *))v85;
          os_log_type_t v49 = *(void (**)(char *, void *))v85;
          (*(void (**)(char *, void *))v85)(v47, v44);
          v49(v45, v44);

          if (v48)
          {
            unint64_t v50 = (unint64_t)(v28 + 1);
            long long v51 = v94;
            a4 = v29;
            if (v94 < v28 || (unint64_t)v94 >= v50 || v94 != v28) {
              *unint64_t v94 = *v28;
            }
          }
          else
          {
            long long v51 = v94;
            if (v94 != v29) {
              *unint64_t v94 = *v29;
            }
            a4 = v29 + 1;
            v97 = v29 + 1;
            unint64_t v50 = (unint64_t)v28;
          }
          unint64_t v26 = v51 + 1;
          unint64_t v98 = v26;
          if (a4 < v86)
          {
            id v27 = (id *)v50;
            if (v50 < (unint64_t)v88) {
              continue;
            }
          }
          goto LABEL_51;
        }
        (*(void (**)(char *, uint64_t, uint64_t, void *))v91)(v92, 1, 1, v93);
LABEL_53:
        __break(1u);
LABEL_54:
        v5(v87, 1, 1, v93);
LABEL_55:
        __break(1u);
LABEL_56:
        ((void (*)(char *, uint64_t, uint64_t, id))*v28)(v90, 1, 1, v10);
LABEL_57:
        __break(1u);
LABEL_58:
        ((void (*)(char *, uint64_t, uint64_t, void *))v10)(v85, 1, 1, v93);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
    }
LABEL_51:
    sub_100031FBC((void **)&v98, (const void **)&v97, &v96);
    return 1;
  }
LABEL_60:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100031EC0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100029F90(&qword_10017BDB0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100031FBC(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_100032078(uint64_t a1)
{
  return sub_100031EC0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10003208C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000743D8(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000759B8();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1000751C8(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10003215C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100032194()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000321DC()
{
  sub_10002F484(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000321E8()
{
  return View.clarityUIIdiom()();
}

uint64_t sub_100032254()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000322AC()
{
  return sub_1000321E8();
}

uint64_t sub_1000322BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017BD90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100032324()
{
  unint64_t result = qword_10017BDA0;
  if (!qword_10017BDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017BDA0);
  }
  return result;
}

uint64_t sub_100032380(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100032394()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void *sub_1000323A8(void *a1)
{
  return sub_100030114(0, a1[2], 0, a1);
}

void sub_1000323BC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 16);
  if (v2)
  {
    sub_100032794();
    swift_bridgeObjectRetain();
    unint64_t v4 = 0;
    while (1)
    {
      id v5 = *(id *)(v1 + 8 * v4 + 32);
      char v6 = static NSObject.== infix(_:_:)();

      if (v6) {
        break;
      }
      if (v2 == ++v4)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    swift_bridgeObjectRelease();
    if (!__OFADD__(v4, 1))
    {
      uint64_t v7 = *a1;
      unint64_t v8 = *(void *)(*a1 + 16);
      if (v4 + 1 == v8) {
        return;
      }
      for (unint64_t i = v4 + 5; ; ++i)
      {
        unint64_t v12 = i - 4;
        if (i - 4 >= v8) {
          break;
        }
        id v13 = *(id *)(v7 + 8 * i);
        char v14 = static NSObject.== infix(_:_:)();

        if ((v14 & 1) == 0)
        {
          if (v12 != v4)
          {
            if ((v4 & 0x8000000000000000) != 0) {
              goto LABEL_27;
            }
            uint64_t v15 = *a1;
            unint64_t v16 = *(void *)(*a1 + 16);
            if (v4 >= v16) {
              goto LABEL_28;
            }
            if (v12 >= v16) {
              goto LABEL_29;
            }
            uint64_t v17 = *(void **)(v15 + 8 * i);
            id v18 = *(id *)(v15 + 8 * v4 + 32);
            id v19 = v17;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *a1 = v15;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v15 = sub_100032394();
              *a1 = v15;
            }
            uint64_t v21 = v15 + 8 * v4;
            uint64_t v22 = *(void **)(v21 + 32);
            *(void *)(v21 + 32) = v19;

            specialized Array._endMutation()();
            uint64_t v23 = *a1;
            char v24 = swift_isUniquelyReferenced_nonNull_native();
            *a1 = v23;
            if ((v24 & 1) == 0)
            {
              uint64_t v23 = sub_100032394();
              *a1 = v23;
            }
            if (v12 >= *(void *)(v23 + 16)) {
              goto LABEL_30;
            }
            uint64_t v25 = *(void **)(v23 + 8 * i);
            *(void *)(v23 + 8 * i) = v18;

            specialized Array._endMutation()();
          }
          if (__OFADD__(v4++, 1)) {
            goto LABEL_26;
          }
        }
        uint64_t v7 = *a1;
        unint64_t v8 = *(void *)(*a1 + 16);
        unint64_t v11 = i - 3;
        if (v11 == v8) {
          return;
        }
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1000325E4(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v4;
  if (!isUniquelyReferenced_nonNull_native || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    swift_bridgeObjectRetain();
    *uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t v4 = *v2;
  }
  uint64_t v10 = v4 + 32;
  unint64_t v11 = (char *)(v4 + 32 + 8 * a1);
  swift_arrayDestroy();
  if (!v7) {
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(*v2 + 16);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_25;
  }
  if (v14 < 0)
  {
LABEL_27:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v15 = (char *)(v10 + 8 * a2);
  if (a1 != a2 || v11 >= &v15[8 * v14]) {
    memmove(v11, v15, 8 * v14);
  }
  uint64_t v16 = *(void *)(*v2 + 16);
  BOOL v13 = __OFADD__(v16, v8);
  uint64_t v17 = v16 - v7;
  if (v13)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *(void *)(*v2 + 16) = v17;
LABEL_17:

  return specialized Array._endMutation()();
}

unint64_t sub_100032794()
{
  unint64_t result = qword_10017BDA8;
  if (!qword_10017BDA8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017BDA8);
  }
  return result;
}

uint64_t sub_1000327D8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100032800(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100029F90(&qword_10017BE30);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003290C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100032A00()
{
  qword_100186488 = AXBackBoardServerClarityUIAdminPasscodeLength;
}

void sub_100032A18()
{
  sub_100033980();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v1 = [ObjCClassFromMetadata sharedInstance];
  id v2 = [v1 applicationBundleIdentifiers];

  uint64_t v3 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  char v4 = sub_1000957C4(v3, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
  {
    id v5 = [ObjCClassFromMetadata sharedInstance];
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v5 setApplicationBundleIdentifiers:isa];
  }
}

uint64_t sub_100032BAC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void sub_100032C20()
{
  sub_100033980();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v1 = [ObjCClassFromMetadata sharedInstance];
  id v2 = [v1 listLayout];

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      id v9 = [ObjCClassFromMetadata sharedInstance];
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      [v9 setListLayout:v10];
    }
  }
}

uint64_t sub_100032DDC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100032E50()
{
  type metadata accessor for UserPreferences();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100032E90();
  qword_100186490 = v0;
  return result;
}

uint64_t sub_100032E90()
{
  uint64_t v1 = OBJC_IVAR____TtC12ClarityBoard15UserPreferences_applicationBundleIdentifiersObserver;
  *(void *)(v0 + OBJC_IVAR____TtC12ClarityBoard15UserPreferences_applicationBundleIdentifiersObserver) = 0;
  uint64_t v2 = OBJC_IVAR____TtC12ClarityBoard15UserPreferences_listLayoutObserver;
  *(void *)(v0 + OBJC_IVAR____TtC12ClarityBoard15UserPreferences_listLayoutObserver) = 0;
  sub_100033980();
  id v3 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v4 = [v3 applicationBundleIdentifiers];
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  sub_100029F90(&qword_10017BE30);
  Published.init(initialValue:)();
  swift_endAccess();
  id v5 = [v3 listLayout];
  swift_beginAccess();
  id v25 = v5;
  type metadata accessor for CLFListLayout(0);
  Published.init(initialValue:)();
  swift_endAccess();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v6 = aBlock[2];
  swift_bridgeObjectRelease();
  if (!v6)
  {
    static os_log_type_t.error.getter();
    id v7 = [self commonLog];
    os_log(_:dso:log:_:_:)();
  }
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v3;
  uint64_t v23 = sub_100033B04;
  uint64_t v24 = v9;
  aBlock = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  uint64_t v21 = sub_100033424;
  uint64_t v22 = &unk_10015DE08;
  uint64_t v10 = _Block_copy(&aBlock);
  id v11 = v3;
  swift_release();
  id v12 = [v11 observeUpdatesForSelector:"applicationBundleIdentifiers" handler:v10];
  _Block_release(v10);
  *(void *)(v0 + v1) = v12;
  swift_unknownObjectRelease();
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v11;
  uint64_t v23 = sub_100033B68;
  uint64_t v24 = v14;
  aBlock = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  uint64_t v21 = sub_100033424;
  uint64_t v22 = &unk_10015DE58;
  uint64_t v15 = _Block_copy(&aBlock);
  id v16 = v11;
  swift_release();
  id v17 = [v16 observeUpdatesForSelector:"listLayout" handler:v15];
  _Block_release(v15);

  *(void *)(v0 + v2) = v17;
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100033274(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t Strong = v9;
  }
  id v4 = [a2 applicationBundleIdentifiers];
  id v5 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (Strong)
  {
    char v6 = sub_1000957C4(Strong, v5);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v8 = [a2 applicationBundleIdentifiers];
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.setter();
    sub_100032A18();
    return swift_release();
  }
  return result;
}

uint64_t sub_100033424(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_100033468(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    uint64_t Strong = v14;
  }
  id v4 = [a2 listLayout];
  id v5 = v4;
  if (!Strong)
  {

LABEL_11:
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      id v12 = [a2 listLayout];
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      id v13 = v12;
      static Published.subscript.setter();
      sub_100032C20();
      swift_release();
    }
    return;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
  {

    swift_bridgeObjectRelease_n();
    return;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0) {
    goto LABEL_11;
  }
}

uint64_t sub_100033654()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12ClarityBoard15UserPreferences__applicationBundleIdentifiers;
  uint64_t v2 = sub_100029F90(&qword_10017BF78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC12ClarityBoard15UserPreferences__listLayout;
  uint64_t v4 = sub_100029F90((uint64_t *)&unk_10017BF80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v5 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v6 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v5, v6);
}

uint64_t sub_100033760()
{
  return type metadata accessor for UserPreferences();
}

uint64_t type metadata accessor for UserPreferences()
{
  uint64_t result = qword_10017BE18;
  if (!qword_10017BE18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000337B4()
{
  sub_10003388C();
  if (v0 <= 0x3F)
  {
    sub_1000338E8();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10003388C()
{
  if (!qword_10017BE28)
  {
    sub_10002A694(&qword_10017BE30);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017BE28);
    }
  }
}

void sub_1000338E8()
{
  if (!qword_10017BE38)
  {
    type metadata accessor for CLFListLayout(255);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017BE38);
    }
  }
}

uint64_t sub_100033940@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for UserPreferences();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100033980()
{
  unint64_t result = qword_10017BF70;
  if (!qword_10017BF70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017BF70);
  }
  return result;
}

uint64_t sub_1000339C0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

void sub_100033A44()
{
}

uint64_t sub_100033AC8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100033B04()
{
  return sub_100033274(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100033B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100033B1C()
{
  return swift_release();
}

uint64_t sub_100033B28()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100033B68()
{
  sub_100033468(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100033B70@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

void sub_100033BF0(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  static Published.subscript.setter();
  sub_100032C20();
}

uint64_t sub_100033C7C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

char *sub_100033CF0()
{
  uint64_t v1 = sub_100029F90(&qword_10017C038);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = &v0[OBJC_IVAR____TtC12ClarityBoard15SiriCoordinator__isShowingSiri];
  char v16 = 0;
  uint64_t v6 = v0;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v4, v1);
  uint64_t v7 = OBJC_IVAR____TtC12ClarityBoard15SiriCoordinator_presentationController;
  *(void *)&v6[v7] = [self sharedPresentationController];

  uint64_t v8 = (objc_class *)type metadata accessor for SiriCoordinator();
  v15.receiver = v6;
  v15.super_class = v8;
  uint64_t v9 = (char *)objc_msgSendSuper2(&v15, "init");
  uint64_t v10 = *(void **)&v9[OBJC_IVAR____TtC12ClarityBoard15SiriCoordinator_presentationController];
  char v11 = v9;
  [v10 setup];
  id v12 = v10;
  [v12 setDelegate:v11];

  return v11;
}

void sub_100033F34(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

uint64_t sub_100033FA4(void *a1, uint64_t (*a2)(uint64_t, void))
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v4 = a1;
  static Published.subscript.setter();
  return a2(1, 0);
}

id sub_1000342BC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SiriCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100034378()
{
  return type metadata accessor for SiriCoordinator();
}

uint64_t type metadata accessor for SiriCoordinator()
{
  uint64_t result = qword_10017C020;
  if (!qword_10017C020) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000343CC()
{
  sub_100034468();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100034468()
{
  if (!qword_10017C030)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017C030);
    }
  }
}

uint64_t sub_1000344C0@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SiriCoordinator();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100034500@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100034584(uint64_t a1, void **a2)
{
  objc_super v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t sub_1000345F8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100034630(char a1, uint64_t a2)
{
  sub_100033F34(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100034638()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100034678()
{
  return sub_100033FA4(*(void **)(v0 + 16), *(uint64_t (**)(uint64_t, void))(v0 + 24));
}

uint64_t sub_100034684(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100034694()
{
  return swift_release();
}

uint64_t sub_10003469C(void *a1, uint64_t a2)
{
  id v4 = [self sharedInstance];
  unsigned int v5 = [v4 isLocked];

  if (v5)
  {
    id v6 = *(uint64_t (**)(uint64_t, void, void))(a2 + 16);
    return v6(a2, 0, 0);
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v8 = a1;
    static Published.subscript.setter();
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(a2 + 16))(a2, 1, 0);
  }
}

id sub_1000348B0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreAuthUIPresentationManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CoreAuthUIPresentationManager()
{
  return self;
}

uint64_t sub_10003490C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100034950(uint64_t a1)
{
  uint64_t v3 = sub_100034DB0(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + qword_1001864A0) - 8) + 8))(a1);
  return v3;
}

uint64_t sub_1000349BC()
{
  return 1;
}

void *sub_1000349C4(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_100034A08(a1, a2);
}

void *sub_100034A08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((swift_isaMask & *v2) + qword_1001864A0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v5 + 16))((char *)&v11 - v6);
  uint64_t v7 = (void *)UIHostingController.init(coder:rootView:)();
  id v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  id v9 = v7;
  v8(a2, v4);
  if (v7) {

  }
  return v7;
}

id sub_100034B40(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SecureHostingController();
  id v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id sub_100034BD8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100034B40(a3);
}

uint64_t sub_100034C00()
{
  id v1 = objc_allocWithZone(v0);
  return UIHostingController.init(hostingView:)();
}

id sub_100034C34()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureHostingController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SecureHostingController()
{
  return sub_100034DF8();
}

uint64_t sub_100034CC8(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - v1);
  return UIHostingController.init(rootView:)();
}

uint64_t sub_100034DB0(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for SecureHostingController());
  return sub_100034CC8(a1);
}

uint64_t sub_100034DF8()
{
  return swift_getGenericMetadata();
}

uint64_t *sub_100034E28(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    id v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for NSNotificationCenter.Publisher();
    id v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
  }
  return v4;
}

uint64_t sub_100034F48(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100034FC0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  id v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  return a1;
}

void *sub_100035090(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *sub_100035164(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  return a1;
}

void *sub_100035218(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  return a1;
}

uint64_t sub_1000352DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000352F0);
}

uint64_t sub_1000352F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1000353AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000353C0);
}

uint64_t sub_1000353C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for VolumeHUD()
{
  uint64_t result = qword_10017C140;
  if (!qword_10017C140) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000354B4()
{
  uint64_t result = type metadata accessor for NSNotificationCenter.Publisher();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100035560()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003557C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v2 = type metadata accessor for VolumeHUD();
  uint64_t v3 = v2 - 8;
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v38 = *(void *)(v39 + 64);
  __chkstk_darwin(v2);
  uint64_t v37 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100029F90(&qword_10017C188);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8 - 8);
  uint64_t v12 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v15 = sub_100029F90(&qword_10017C190);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  id v18 = (uint64_t *)((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)uint64_t v14 = static HorizontalAlignment.center.getter();
  *((void *)v14 + 1) = 0;
  v14[16] = 1;
  uint64_t v19 = sub_100029F90(&qword_10017C198);
  sub_100035970(v1, (uint64_t)&v14[*(int *)(v19 + 44)]);
  sub_10002A580((uint64_t)v14, (uint64_t)v12, &qword_10017C188);
  unint64_t v20 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v21 = swift_allocObject();
  sub_100036F84((uint64_t)v12, v21 + v20, &qword_10017C188);
  uint64_t *v18 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = (uint64_t (**)())((char *)v18 + *(int *)(v16 + 44));
  void *v22 = sub_100036BCC;
  v22[1] = (uint64_t (*)())v21;
  sub_10002A840((uint64_t)v14, &qword_10017C188);
  uint64_t v23 = (uint64_t)v1;
  uint64_t v24 = (char *)v1 + *(int *)(v3 + 28);
  uint64_t v26 = v35;
  uint64_t v25 = v36;
  id v27 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  v27(v7, v24, v36);
  uint64_t v28 = v37;
  sub_100036E10(v23, v37, (uint64_t (*)(void))type metadata accessor for VolumeHUD);
  unint64_t v29 = (*(unsigned __int8 *)(v39 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v30 = swift_allocObject();
  sub_100036D3C(v28, v30 + v29);
  uint64_t v31 = v40;
  sub_10002A580((uint64_t)v18, v40, &qword_10017C190);
  uint64_t v32 = sub_100029F90(&qword_10017C1F8);
  v27((char *)(v31 + *(int *)(v32 + 52)), v7, v25);
  id v33 = (uint64_t (**)())(v31 + *(int *)(v32 + 56));
  void *v33 = sub_100036DA0;
  v33[1] = (uint64_t (*)())v30;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v25);
  return sub_10002A840((uint64_t)v18, &qword_10017C190);
}

uint64_t sub_100035970@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100029F90(&qword_10017C208);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - v8;
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  uint64_t v10 = sub_100029F90(&qword_10017C1A8);
  sub_100035AB4(a1, (uint64_t)&v9[*(int *)(v10 + 44)]);
  sub_10002A580((uint64_t)v9, (uint64_t)v7, &qword_10017C208);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  uint64_t v11 = (int *)sub_100029F90(&qword_10017C1A0);
  sub_10002A580((uint64_t)v7, a2 + v11[12], &qword_10017C208);
  uint64_t v12 = a2 + v11[16];
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a2 + v11[20];
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  sub_10002A840((uint64_t)v9, &qword_10017C208);
  return sub_10002A840((uint64_t)v7, &qword_10017C208);
}

uint64_t sub_100035AB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v39 = a1;
  uint64_t v46 = a2;
  uint64_t v3 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Capsule();
  __chkstk_darwin(v5 - 8);
  uint64_t v42 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Material();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100029F90(&qword_10017C210);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100029F90(&qword_10017C1E0);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100029F90(&qword_10017C1E8);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100029F90(&qword_10017C1F0) - 8;
  uint64_t v22 = __chkstk_darwin(v40);
  uint64_t v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v41 = (uint64_t)&v39 - v25;
  *(void *)uint64_t v13 = static VerticalAlignment.center.getter();
  *((void *)v13 + 1) = 0;
  v13[16] = 1;
  uint64_t v26 = sub_100029F90(&qword_10017C1B0);
  sub_100036008(v2, (uint64_t)&v13[*(int *)(v26 + 44)]);
  static Material.ultraThin.getter();
  LOBYTE(v2) = static Edge.Set.all.getter();
  id v27 = &v17[*(int *)(v15 + 44)];
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v27, v10, v7);
  v27[*(int *)(sub_100029F90(&qword_10017C218) + 36)] = (char)v2;
  sub_10002A580((uint64_t)v13, (uint64_t)v17, &qword_10017C210);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_10002A840((uint64_t)v13, &qword_10017C210);
  uint64_t v28 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v29 = type metadata accessor for RoundedCornerStyle();
  uint64_t v30 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104))(v42, v28, v29);
  uint64_t v31 = (uint64_t)&v21[*(int *)(v19 + 44)];
  sub_100036E10(v30, v31, (uint64_t (*)(void))&type metadata accessor for Capsule);
  *(_WORD *)(v31 + *(int *)(sub_100029F90(&qword_10017C220) + 36)) = 256;
  sub_10002A580((uint64_t)v17, (uint64_t)v21, &qword_10017C1E0);
  sub_100036E78(v30);
  sub_10002A840((uint64_t)v17, &qword_10017C1E0);
  uint64_t v32 = *(void *)((char *)v39 + *(int *)(type metadata accessor for VolumeHUD() + 36));
  (*(void (**)(char *, void, uint64_t))(v44 + 104))(v43, enum case for Color.RGBColorSpace.sRGBLinear(_:), v45);
  uint64_t v33 = Color.init(_:white:opacity:)();
  sub_10002A580((uint64_t)v21, (uint64_t)v24, &qword_10017C1E8);
  uint64_t v34 = (uint64_t *)&v24[*(int *)(v40 + 44)];
  *uint64_t v34 = v33;
  v34[1] = v32;
  v34[2] = 0;
  v34[3] = 0;
  sub_10002A840((uint64_t)v21, &qword_10017C1E8);
  uint64_t v35 = v41;
  sub_100036F84((uint64_t)v24, v41, &qword_10017C1F0);
  sub_10002A580(v35, (uint64_t)v24, &qword_10017C1F0);
  uint64_t v36 = v46;
  sub_10002A580((uint64_t)v24, v46, &qword_10017C1F0);
  uint64_t v37 = v36 + *(int *)(sub_100029F90(&qword_10017C228) + 48);
  *(void *)uint64_t v37 = 0;
  *(unsigned char *)(v37 + 8) = 1;
  sub_10002A840(v35, &qword_10017C1F0);
  return sub_10002A840((uint64_t)v24, &qword_10017C1F0);
}

uint64_t sub_100036008@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = type metadata accessor for Capsule();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100029F90(&qword_10017C230);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_100029F90(&qword_10017C238);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100029F90(&qword_10017C1D8);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t *v8 = static Alignment.bottom.getter();
  v8[1] = v17;
  uint64_t v18 = sub_100029F90(&qword_10017C1B8);
  sub_10003634C(a1, (uint64_t)v8 + *(int *)(v18 + 44));
  type metadata accessor for VolumeHUD();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_10002A580((uint64_t)v8, (uint64_t)v12, &qword_10017C230);
  uint64_t v19 = &v12[*(int *)(v10 + 44)];
  long long v20 = v38;
  *(_OWORD *)uint64_t v19 = v37;
  *((_OWORD *)v19 + 1) = v20;
  *((_OWORD *)v19 + 2) = v39;
  sub_10002A840((uint64_t)v8, &qword_10017C230);
  uint64_t v21 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v22 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v5, v21, v22);
  uint64_t v23 = (uint64_t)&v16[*(int *)(v14 + 44)];
  sub_100036E10((uint64_t)v5, v23, (uint64_t (*)(void))&type metadata accessor for Capsule);
  *(_WORD *)(v23 + *(int *)(sub_100029F90(&qword_10017C220) + 36)) = 256;
  sub_10002A580((uint64_t)v12, (uint64_t)v16, &qword_10017C238);
  sub_100036E78((uint64_t)v5);
  sub_10002A840((uint64_t)v12, &qword_10017C238);
  LOBYTE(v23) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = v36;
  sub_10002A580((uint64_t)v16, v36, &qword_10017C1D8);
  uint64_t v33 = v32 + *(int *)(sub_100029F90(&qword_10017C240) + 36);
  *(unsigned char *)uint64_t v33 = v23;
  *(void *)(v33 + 8) = v25;
  *(void *)(v33 + 16) = v27;
  *(void *)(v33 + 24) = v29;
  *(void *)(v33 + 32) = v31;
  *(unsigned char *)(v33 + 40) = 0;
  return sub_10002A840((uint64_t)v16, &qword_10017C1D8);
}

uint64_t sub_10003634C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  os_log_type_t v49 = a1;
  uint64_t v53 = a2;
  uint64_t v52 = sub_100029F90(&qword_10017C248) - 8;
  uint64_t v2 = __chkstk_darwin(v52);
  uint64_t v50 = (uint64_t)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v51 = (uint64_t)&v42 - v4;
  uint64_t v5 = type metadata accessor for Material();
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Capsule();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100029F90(&qword_10017C1C0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100029F90(&qword_10017C1C8);
  uint64_t v16 = v15 - 8;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v46 = (uint64_t)&v42 - v20;
  uint64_t v21 = enum case for RoundedCornerStyle.continuous(_:);
  unsigned int v44 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v22 = type metadata accessor for RoundedCornerStyle();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 104);
  uint64_t v45 = v23 + 104;
  v43(v10, v21, v22);
  static Color.black.getter();
  uint64_t v24 = Color.opacity(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  sub_100036E10((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))&type metadata accessor for Capsule);
  uint64_t v26 = (uint64_t *)&v14[*(int *)(v12 + 44)];
  uint64_t *v26 = KeyPath;
  v26[1] = v24;
  sub_100036E78((uint64_t)v10);
  static Material.ultraThin.getter();
  uint64_t v27 = &v19[*(int *)(v16 + 44)];
  uint64_t v29 = v47;
  uint64_t v28 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v27, v7, v48);
  sub_10002A580((uint64_t)v14, (uint64_t)v19, &qword_10017C1C0);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v28);
  sub_10002A840((uint64_t)v14, &qword_10017C1C0);
  uint64_t v30 = v46;
  sub_100036F84((uint64_t)v19, v46, &qword_10017C1C8);
  v43(v10, v44, v22);
  uint64_t v31 = static Color.purple.getter();
  uint64_t v32 = swift_getKeyPath();
  sub_100036E10((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))&type metadata accessor for Capsule);
  uint64_t v33 = (uint64_t *)&v14[*(int *)(v12 + 44)];
  uint64_t *v33 = v32;
  v33[1] = v31;
  sub_100036E78((uint64_t)v10);
  type metadata accessor for VolumeHUD();
  uint64_t v34 = v49[1];
  *(void *)&long long v54 = *v49;
  *((void *)&v54 + 1) = v34;
  sub_100029F90(&qword_10017C200);
  State.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v35 = v50;
  sub_10002A580((uint64_t)v14, v50, &qword_10017C1C0);
  uint64_t v36 = (_OWORD *)(v35 + *(int *)(v52 + 44));
  long long v37 = v55;
  *uint64_t v36 = v54;
  v36[1] = v37;
  v36[2] = v56;
  sub_10002A840((uint64_t)v14, &qword_10017C1C0);
  uint64_t v38 = v51;
  sub_100036F84(v35, v51, &qword_10017C248);
  sub_10002A580(v30, (uint64_t)v19, &qword_10017C1C8);
  sub_10002A580(v38, v35, &qword_10017C248);
  uint64_t v39 = v53;
  sub_10002A580((uint64_t)v19, v53, &qword_10017C1C8);
  uint64_t v40 = sub_100029F90(&qword_10017C1D0);
  sub_10002A580(v35, v39 + *(int *)(v40 + 48), &qword_10017C248);
  sub_10002A840(v38, &qword_10017C248);
  sub_10002A840(v30, &qword_10017C1C8);
  sub_10002A840(v35, &qword_10017C248);
  return sub_10002A840((uint64_t)v19, &qword_10017C1C8);
}

uint64_t sub_100036884()
{
  id v0 = [self sharedInstance];
  [v0 volume];

  sub_100029F90(&qword_10017C200);
  return State.wrappedValue.setter();
}

uint64_t sub_100036920()
{
  uint64_t v1 = *(void *)(sub_100029F90(&qword_10017C188) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v19 = v2 + *(void *)(v1 + 64);
  uint64_t v3 = v0 + *(int *)(sub_100029F90(&qword_10017C198) + 44);
  uint64_t v4 = v3 + *(int *)(sub_100029F90(&qword_10017C1A0) + 48);
  unint64_t v5 = v4 + *(int *)(sub_100029F90(&qword_10017C1A8) + 44) + v2;
  unint64_t v17 = v5 + *(int *)(sub_100029F90(&qword_10017C1B0) + 44);
  unint64_t v6 = v17 + *(int *)(sub_100029F90(&qword_10017C1B8) + 44);
  uint64_t v7 = type metadata accessor for RoundedCornerStyle();
  uint64_t v8 = *(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  sub_100029F90(&qword_10017C1C0);
  swift_release();
  swift_release();
  unint64_t v9 = v6 + *(int *)(sub_100029F90(&qword_10017C1C8) + 36);
  uint64_t v10 = type metadata accessor for Material();
  uint64_t v11 = *(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  uint64_t v12 = sub_100029F90(&qword_10017C1D0);
  v8(v6 + *(int *)(v12 + 48), v7);
  swift_release();
  swift_release();
  uint64_t v13 = sub_100029F90(&qword_10017C1D8);
  v8(v17 + *(int *)(v13 + 36), v7);
  uint64_t v14 = sub_100029F90(&qword_10017C1E0);
  v11(v5 + *(int *)(v14 + 36), v10);
  uint64_t v15 = sub_100029F90(&qword_10017C1E8);
  v8(v5 + *(int *)(v15 + 36), v7);
  sub_100029F90(&qword_10017C1F0);
  swift_release();

  return _swift_deallocObject(v18, v19);
}

uint64_t sub_100036BCC()
{
  uint64_t v1 = *(void *)(sub_100029F90(&qword_10017C188) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000612C4(v2);
}

uint64_t sub_100036C48()
{
  uint64_t v1 = (int *)(type metadata accessor for VolumeHUD() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = v2 + *(void *)(*(void *)v1 + 64);
  uint64_t v4 = v0 + v2;
  swift_release();
  uint64_t v5 = v4 + v1[7];
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return _swift_deallocObject(v0, v3);
}

uint64_t sub_100036D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VolumeHUD();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036DA0()
{
  type metadata accessor for VolumeHUD();

  return sub_100036884();
}

uint64_t sub_100036E10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100036E78(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100036ED4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100036F00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100036F2C()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_100036F58()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_100036F84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100029F90(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100036FEC()
{
  unint64_t result = qword_10017C250;
  if (!qword_10017C250)
  {
    sub_10002A694(&qword_10017C1F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C250);
  }
  return result;
}

id sub_100037048()
{
  return sub_100037078((uint64_t (*)(void))type metadata accessor for SiriCoordinator);
}

id sub_100037060()
{
  return sub_100037078((uint64_t (*)(void))type metadata accessor for ObservableThermalController);
}

id sub_100037078(uint64_t (*a1)(void))
{
  id v1 = objc_allocWithZone((Class)a1(0));

  return [v1 init];
}

uint64_t sub_1000370B8()
{
  type metadata accessor for EmergencyModel();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)HKHealthStore) init];
  return v0;
}

void sub_10003710C(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v19 = *(void *)(v2 + 120);
  sub_100029F90(&qword_10017C2B0);
  State.wrappedValue.getter();
  if (v21 == 255)
  {
    if (a2 == -1) {
      return;
    }
    char v7 = a2 & 1;
    goto LABEL_16;
  }
  if (a2 == -1)
  {
    uint64_t v8 = v20;
    char v9 = v21;
LABEL_20:
    sub_10003A74C(v8, v9);
    return;
  }
  if (v21)
  {
    if ((a2 & 1) == 0)
    {
      sub_10003A74C(v20, v21);
      goto LABEL_12;
    }
    sub_10002A544(0, (unint64_t *)&qword_10017BDA8);
    sub_10003A620(a1, a2);
    sub_10003A620(v20, v21);
    char v10 = static NSObject.== infix(_:_:)();
    sub_10003A74C(a1, a2);
    sub_10003A74C(v20, v21);
    sub_10003A74C(v20, v21);
    if (v10) {
      return;
    }
LABEL_15:
    char v7 = 1;
    goto LABEL_16;
  }
  if (a2)
  {
    sub_10003A74C(v20, v21);
    goto LABEL_15;
  }
  sub_10002A544(0, (unint64_t *)&qword_10017BDA8);
  sub_10003A620(a1, a2);
  sub_10003A620(v20, v21);
  char v6 = static NSObject.== infix(_:_:)();
  sub_10003A74C(a1, a2);
  sub_10003A74C(v20, v21);
  sub_10003A74C(v20, v21);
  if ((v6 & 1) == 0)
  {
LABEL_12:
    char v7 = 0;
LABEL_16:
    long long v18 = *(_OWORD *)(v3 + 88);
    id v11 = a1;
    sub_100029F90(&qword_10017C2E0);
    State.wrappedValue.getter();
    if (v7) {
      id v12 = objc_msgSend(v11, "application", v18, v19);
    }
    else {
      id v12 = v11;
    }
    uint64_t v13 = v12;
    id v14 = objc_msgSend(v12, "bundleIdentifier", v18);

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    sub_10006B6B8(v15, v17);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v8 = a1;
    char v9 = a2;
    goto LABEL_20;
  }
}

void sub_10003736C(void *a1, char a2)
{
  uint64_t v3 = v2;
  int v6 = ~a2;
  uint64_t v22 = *(void *)(v2 + 120);
  sub_100029F90(&qword_10017C2B0);
  State.wrappedValue.getter();
  if (!v6)
  {
    if (v21 == 255) {
      return;
    }
    uint64_t v8 = v20;
    char v9 = v21;
    goto LABEL_22;
  }
  if (v21 == 255)
  {
    char v10 = a2 & 1;
LABEL_16:
    id v12 = a1;
    State.wrappedValue.getter();
    sub_10003A74C(v20, v21);
    if (v21 == 255)
    {
      long long v19 = *(_OWORD *)(v3 + 88);
      sub_100029F90(&qword_10017C2E0);
      State.wrappedValue.getter();
      if (v10) {
        id v13 = objc_msgSend(v12, "application", v19, v22);
      }
      else {
        id v13 = v12;
      }
      id v14 = v13;
      id v15 = objc_msgSend(v13, "bundleIdentifier", v19);

      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      sub_10006B6C4(v16, v18);
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v8 = a1;
    char v9 = a2;
LABEL_22:
    sub_10003A74C(v8, v9);
    return;
  }
  if (a2)
  {
    if (v21)
    {
      sub_10002A544(0, (unint64_t *)&qword_10017BDA8);
      sub_10003A620(a1, a2);
      sub_10003A620(a1, a2);
      sub_10003A620(v20, v21);
      char v11 = static NSObject.== infix(_:_:)();
      sub_10003A74C(v20, v21);
      sub_10003A74C(v20, v21);
      sub_10003A74C(a1, a2);
      sub_10003A74C(a1, a2);
      if (v11) {
        return;
      }
    }
    else
    {
      sub_10003A74C(v20, v21);
    }
    char v10 = 1;
    goto LABEL_16;
  }
  if (v21)
  {
    sub_10003A74C(v20, v21);
    goto LABEL_13;
  }
  sub_10002A544(0, (unint64_t *)&qword_10017BDA8);
  sub_10003A620(a1, a2);
  sub_10003A620(a1, a2);
  sub_10003A620(v20, v21);
  char v7 = static NSObject.== infix(_:_:)();
  sub_10003A74C(v20, v21);
  sub_10003A74C(v20, v21);
  sub_10003A74C(a1, a2);
  sub_10003A74C(a1, a2);
  if ((v7 & 1) == 0)
  {
LABEL_13:
    char v10 = 0;
    goto LABEL_16;
  }
}

uint64_t sub_100037648@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v54 = a1;
  uint64_t v3 = sub_100029F90(&qword_10017C280);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_100029F90(&qword_10017C288);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100029F90(&qword_10017C290);
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  __chkstk_darwin(v9);
  char v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100029F90(&qword_10017C298);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v47 = v12;
  uint64_t v48 = v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v49 = v15;
  uint64_t v50 = (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v47 - v16;
  uint64_t v51 = sub_100029F90(&qword_10017C2A0);
  __chkstk_darwin(v51);
  long long v19 = (uint64_t *)((char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t *v5 = static Alignment.center.getter();
  v5[1] = v20;
  uint64_t v21 = sub_100029F90(&qword_10017C2A8);
  sub_100037C48(v2, (char *)v5 + *(int *)(v21 + 44));
  uint64_t v59 = *(void *)(v2 + 128);
  uint64_t v22 = v59;
  uint64_t v23 = swift_allocObject();
  long long v24 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v23 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v23 + 128) = v24;
  *(_OWORD *)(v23 + 144) = *(_OWORD *)(v2 + 128);
  *(void *)(v23 + 160) = *(void *)(v2 + 144);
  long long v25 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v23 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v23 + 64) = v25;
  long long v26 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v23 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v23 + 96) = v26;
  long long v27 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v23 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v23 + 32) = v27;
  sub_10002A580((uint64_t)v5, (uint64_t)v8, &qword_10017C280);
  *(void *)&v8[*(int *)(v6 + 52)] = v22;
  uint64_t v28 = (void (**)(id *))&v8[*(int *)(v6 + 56)];
  id *v28 = sub_10003ADA0;
  v28[1] = (void (*)(id *))v23;
  sub_10003ADA8((uint64_t)&v59);
  sub_10003A508(v2);
  sub_10002A840((uint64_t)v5, &qword_10017C280);
  long long v55 = *(_OWORD *)(v2 + 104);
  uint64_t v56 = *(void *)(v2 + 120);
  sub_100029F90(&qword_10017C2B0);
  State.wrappedValue.getter();
  char v29 = v58;
  if (v58 == 255)
  {
    id v30 = 0;
  }
  else
  {
    id v30 = v57;
    if (v58)
    {
      id v31 = [v57 application];
      sub_10003A74C(v30, v29);
      id v30 = v31;
    }
  }
  *(void *)&long long v55 = v30;
  uint64_t v32 = swift_allocObject();
  long long v33 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v32 + 112) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v32 + 128) = v33;
  *(_OWORD *)(v32 + 144) = *(_OWORD *)(v2 + 128);
  *(void *)(v32 + 160) = *(void *)(v2 + 144);
  long long v34 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v32 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v32 + 64) = v34;
  long long v35 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v32 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v32 + 96) = v35;
  long long v36 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v32 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v32 + 32) = v36;
  sub_10003A508(v2);
  sub_100029F90(&qword_10017C2B8);
  sub_10002A8D8(&qword_10017C2C0, &qword_10017C288);
  sub_10003AE04();
  View.onChange<A>(of:initial:_:)();
  swift_release();

  sub_10002A840((uint64_t)v8, &qword_10017C288);
  type metadata accessor for SiriCoordinator();
  sub_10003AEE0(&qword_10017C2D8, (void (*)(uint64_t))type metadata accessor for SiriCoordinator);
  uint64_t v37 = StateObject.wrappedValue.getter();
  uint64_t v38 = static ObservableObject.environmentStore.getter();
  uint64_t v40 = v52;
  uint64_t v39 = v53;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v17, v11, v53);
  uint64_t v41 = (uint64_t *)&v17[*(int *)(v47 + 36)];
  *uint64_t v41 = v38;
  v41[1] = v37;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v39);
  uint64_t v42 = v50;
  sub_10002A580((uint64_t)v17, v50, &qword_10017C298);
  unint64_t v43 = (*(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  uint64_t v44 = swift_allocObject();
  sub_100036F84(v42, v44 + v43, &qword_10017C298);
  *long long v19 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  uint64_t v45 = (uint64_t (**)())((char *)v19 + *(int *)(v51 + 36));
  char *v45 = sub_10003B02C;
  v45[1] = (uint64_t (*)())v44;
  sub_10002A840((uint64_t)v17, &qword_10017C298);
  return sub_100036F84((uint64_t)v19, v54, &qword_10017C2A0);
}

uint64_t sub_100037C48@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  v147 = a2;
  uint64_t v141 = type metadata accessor for MoveTransition();
  uint64_t v140 = *(void *)(v141 - 8);
  uint64_t v3 = __chkstk_darwin(v141);
  unint64_t v137 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v138 = (char *)&v132 - v5;
  uint64_t v6 = type metadata accessor for ApplicationSceneContainer();
  __chkstk_darwin(v6 - 8);
  uint64_t v136 = (uint64_t)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_100029F90(&qword_10017C2E8);
  __chkstk_darwin(v133);
  uint64_t v135 = (uint64_t)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_100029F90(&qword_10017C2F0);
  __chkstk_darwin(v134);
  uint64_t v139 = (uint64_t)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = sub_100029F90(&qword_10017C2F8);
  __chkstk_darwin(v153);
  uint64_t v154 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_100029F90(&qword_10017C300);
  uint64_t v144 = *(void *)(v145 - 8);
  uint64_t v11 = __chkstk_darwin(v145);
  unint64_t v143 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v142 = (char *)&v132 - v13;
  uint64_t v14 = sub_100029F90(&qword_10017C308);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v146 = (char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v148 = (char *)&v132 - v17;
  uint64_t v18 = type metadata accessor for Home();
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = sub_100029F90(&qword_10017C310);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v132 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v24 = (int *)sub_100029F90(&qword_10017C318);
  __chkstk_darwin(v24);
  long long v26 = (char *)&v132 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100029F90(&qword_10017C320);
  uint64_t v156 = *(void *)(v27 - 8);
  uint64_t v157 = v27;
  uint64_t v28 = __chkstk_darwin(v27);
  v152 = (char *)&v132 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  v151 = (char *)&v132 - v31;
  __chkstk_darwin(v30);
  v155 = (char *)&v132 - v32;
  uint64_t v33 = swift_allocObject();
  long long v34 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v33 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v33 + 128) = v34;
  *(_OWORD *)(v33 + 144) = *(_OWORD *)(a1 + 128);
  *(void *)(v33 + 160) = *(void *)(a1 + 144);
  long long v35 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v33 + 64) = v35;
  long long v36 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v33 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v33 + 96) = v36;
  long long v37 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v33 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v33 + 32) = v37;
  sub_10003A508(a1);
  sub_1000B10CC((uint64_t)sub_10003B0C8, v33, v20);
  long long v162 = *(_OWORD *)(a1 + 104);
  uint64_t v163 = *(void *)(a1 + 120);
  long long v160 = *(_OWORD *)(a1 + 104);
  uint64_t v161 = *(void *)(a1 + 120);
  uint64_t v150 = sub_100029F90(&qword_10017C2B0);
  State.wrappedValue.getter();
  if (BYTE8(v158) != 255) {
    sub_10003A74C((id)v158, SBYTE8(v158));
  }
  sub_10003AEE0(&qword_10017C328, (void (*)(uint64_t))type metadata accessor for Home);
  View.accessibilityHidden(_:)();
  sub_10003B2FC((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for Home);
  sub_10002A580((uint64_t)v23, (uint64_t)v26, &qword_10017C310);
  *(void *)&v26[v24[9]] = 0;
  sub_10002A840((uint64_t)v23, &qword_10017C310);
  type metadata accessor for MainActor();
  sub_10003A508(a1);
  uint64_t v38 = static MainActor.shared.getter();
  uint64_t v39 = swift_allocObject();
  id v149 = v24;
  *(void *)(v39 + 16) = v38;
  *(void *)(v39 + 24) = &protocol witness table for MainActor;
  long long v40 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v39 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v39 + 144) = v40;
  *(_OWORD *)(v39 + 160) = *(_OWORD *)(a1 + 128);
  *(void *)(v39 + 176) = *(void *)(a1 + 144);
  long long v41 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v39 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v39 + 80) = v41;
  long long v42 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v39 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v39 + 112) = v42;
  long long v43 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v39 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v39 + 48) = v43;
  sub_10003A508(a1);
  uint64_t v44 = static MainActor.shared.getter();
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = v44;
  *(void *)(v45 + 24) = &protocol witness table for MainActor;
  long long v46 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v45 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v45 + 144) = v46;
  *(_OWORD *)(v45 + 160) = *(_OWORD *)(a1 + 128);
  *(void *)(v45 + 176) = *(void *)(a1 + 144);
  long long v47 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v45 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v45 + 80) = v47;
  long long v48 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v45 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v45 + 112) = v48;
  long long v49 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v45 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v45 + 48) = v49;
  Binding.init(get:set:)();
  uint64_t v50 = swift_allocObject();
  long long v51 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v50 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v50 + 128) = v51;
  *(_OWORD *)(v50 + 144) = *(_OWORD *)(a1 + 128);
  *(void *)(v50 + 160) = *(void *)(a1 + 144);
  long long v52 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v50 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v50 + 64) = v52;
  long long v53 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v50 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v50 + 96) = v53;
  long long v54 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v50 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v50 + 32) = v54;
  sub_10003A508(a1);
  sub_100029F90(&qword_10017C330);
  sub_10003B414(&qword_10017C338, &qword_10017C318, (void (*)(void))sub_10003B19C);
  sub_10002A8D8(&qword_10017C358, &qword_10017C330);
  uint64_t v55 = 1;
  uint64_t v56 = v151;
  View.fullScreenCover<A>(isPresented:drawsBackground:content:)();
  swift_release();
  swift_release();
  swift_release();
  sub_10002A840((uint64_t)v26, &qword_10017C318);
  (*(void (**)(char *, char *, uint64_t))(v156 + 32))(v155, v56, v157);
  long long v160 = v162;
  uint64_t v161 = v163;
  State.wrappedValue.getter();
  char v57 = BYTE8(v158);
  if (BYTE8(v158) == 255)
  {
    uint64_t v64 = v147;
    uint64_t v65 = (uint64_t)v146;
    uint64_t v66 = v145;
    uint64_t v67 = v144;
    uint64_t v68 = (uint64_t)v148;
  }
  else
  {
    unsigned __int8 v58 = (char *)v158;
    int v59 = BYTE8(v158) & 1;
    long long v160 = *(_OWORD *)(a1 + 88);
    long long v158 = *(_OWORD *)(a1 + 88);
    v151 = v58;
    uint64_t v60 = v58;
    uint64_t v61 = sub_100029F90(&qword_10017C2E0);
    State.wrappedValue.getter();
    uint64_t v62 = v159;
    uint64_t v150 = v61;
    if (v57) {
      v63 = (char *)[v60 application];
    }
    else {
      v63 = v60;
    }
    uint64_t v69 = v63;
    id v70 = [v63 bundleIdentifier];

    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v72;

    swift_getKeyPath();
    *(void *)&long long v158 = v62;
    sub_10003AEE0((unint64_t *)&qword_10017C368, (void (*)(uint64_t))type metadata accessor for AppProtectionCoordinator);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    char v74 = *(void **)(v62 + 16);
    v75 = self;
    id v149 = v74;
    id v76 = [v75 sharedInstance];
    NSString v77 = String._bridgeToObjectiveC()();
    NSString v78 = [v76 standardBundleIdentifierForClarityBundleIdentifier:v77];

    if (!v78)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v78 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v79 = [self applicationWithBundleIdentifier:v78];

    char v80 = sub_10006B824(v71, v73);
    swift_release();
    swift_bridgeObjectRelease();
    if (v59) {
      v81 = (char *)[v60 application];
    }
    else {
      v81 = v60;
    }
    id v82 = v81;
    type metadata accessor for ApplicationSceneClientSettings();
    id v83 = [v82 defaultSceneIdentifier];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    static ApplicationSceneClientSettings.settingsForSceneID(_:)();
    swift_bridgeObjectRelease();
    uint64_t v84 = swift_allocObject();
    long long v85 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v84 + 112) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v84 + 128) = v85;
    *(_OWORD *)(v84 + 144) = *(_OWORD *)(a1 + 128);
    *(void *)(v84 + 160) = *(void *)(a1 + 144);
    long long v86 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v84 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v84 + 64) = v86;
    long long v87 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v84 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v84 + 96) = v87;
    long long v88 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v84 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v84 + 32) = v88;
    uint64_t v89 = swift_allocObject();
    long long v90 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v89 + 112) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v89 + 128) = v90;
    *(_OWORD *)(v89 + 144) = *(_OWORD *)(a1 + 128);
    *(void *)(v89 + 160) = *(void *)(a1 + 144);
    long long v91 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v89 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v89 + 64) = v91;
    long long v92 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v89 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v89 + 96) = v92;
    long long v93 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v89 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v89 + 32) = v93;
    sub_10003A508(a1);
    sub_10003A508(a1);
    char v94 = v80 & 1;
    uint64_t v95 = v136;
    sub_100080A24((uint64_t)v151, v57 & 1, (uint64_t)v149, (uint64_t)v79, v94, (uint64_t)sub_10003B284, v84, v136, (uint64_t)sub_10003B290, v89);
    v96 = v138;
    MoveTransition.init(edge:)();
    uint64_t v97 = v140;
    uint64_t v98 = v141;
    (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v137, v96, v141);
    sub_10003AEE0(&qword_10017C370, (void (*)(uint64_t))&type metadata accessor for MoveTransition);
    uint64_t v99 = AnyTransition.init<A>(_:)();
    uint64_t v100 = v135;
    sub_10003B298(v95, v135);
    *(void *)(v100 + *(int *)(v133 + 36)) = v99;
    (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v98);
    sub_10003B2FC(v95, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
    uint64_t v101 = v139;
    sub_10002A580(v100, v139, &qword_10017C2E8);
    *(void *)(v101 + *(int *)(v134 + 36)) = 0x3FF0000000000000;
    sub_10002A840(v100, &qword_10017C2E8);
    uint64_t v102 = swift_allocObject();
    long long v103 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v102 + 112) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v102 + 128) = v103;
    *(_OWORD *)(v102 + 144) = *(_OWORD *)(a1 + 128);
    *(void *)(v102 + 160) = *(void *)(a1 + 144);
    long long v104 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v102 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v102 + 64) = v104;
    long long v105 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v102 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v102 + 96) = v105;
    long long v106 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v102 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v102 + 32) = v106;
    uint64_t v107 = v154;
    sub_10002A580(v101, v154, &qword_10017C2F0);
    uint64_t v108 = (uint64_t (**)())(v107 + *(int *)(v153 + 36));
    *uint64_t v108 = sub_10003B360;
    v108[1] = (uint64_t (*)())v102;
    v108[2] = 0;
    v108[3] = 0;
    sub_10003A508(a1);
    sub_10002A840(v101, &qword_10017C2F0);
    long long v158 = v160;
    State.wrappedValue.getter();
    if (v59) {
      BOOL v109 = (char *)[v60 application];
    }
    else {
      BOOL v109 = v60;
    }
    unint64_t v110 = v109;
    uint64_t v64 = v147;
    uint64_t v65 = (uint64_t)v146;
    uint64_t v66 = v145;
    uint64_t v67 = v144;
    id v111 = [v109 bundleIdentifier];

    uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v114 = v113;

    LOBYTE(v112) = sub_10006B824(v112, v114);
    swift_release();
    swift_bridgeObjectRelease();
    LOBYTE(v158) = v112 & 1;
    uint64_t v115 = swift_allocObject();
    long long v116 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v115 + 112) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v115 + 128) = v116;
    *(_OWORD *)(v115 + 144) = *(_OWORD *)(a1 + 128);
    *(void *)(v115 + 160) = *(void *)(a1 + 144);
    long long v117 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v115 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v115 + 64) = v117;
    long long v118 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v115 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v115 + 96) = v118;
    long long v119 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v115 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v115 + 32) = v119;
    sub_10003A508(a1);
    sub_10003B374();
    uint64_t v120 = v143;
    uint64_t v121 = v154;
    View.onChange<A>(of:initial:_:)();
    swift_release();
    sub_10003A74C(v151, v57);
    sub_10002A840(v121, &qword_10017C2F8);
    v122 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    uint64_t v123 = v142;
    v122(v142, v120, v66);
    uint64_t v68 = (uint64_t)v148;
    v122(v148, v123, v66);
    uint64_t v55 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v68, v55, 1, v66);
  uint64_t v125 = v155;
  uint64_t v124 = v156;
  BOOL v126 = *(void (**)(char *, char *, uint64_t))(v156 + 16);
  uint64_t v127 = v152;
  uint64_t v128 = v157;
  v126(v152, v155, v157);
  sub_10002A580(v68, v65, &qword_10017C308);
  v126(v64, v127, v128);
  uint64_t v129 = sub_100029F90(&qword_10017C360);
  sub_10002A580(v65, (uint64_t)&v64[*(int *)(v129 + 48)], &qword_10017C308);
  sub_10002A840(v68, &qword_10017C308);
  uint64_t v130 = *(void (**)(char *, uint64_t))(v124 + 8);
  v130(v125, v128);
  sub_10002A840(v65, &qword_10017C308);
  return ((uint64_t (*)(char *, uint64_t))v130)(v127, v128);
}

id sub_100038D4C(void *a1)
{
  id result = [a1 canBeLaunched];
  if (result)
  {
    uint64_t v2 = static Animation.clarityUINavigationTransition.getter();
    __chkstk_darwin(v2);
    withAnimation<A>(_:_:)();
    return (id)swift_release();
  }
  return result;
}

void sub_100038DFC(uint64_t a1, void *a2)
{
  long long v11 = *(_OWORD *)(a1 + 104);
  uint64_t v12 = *(void *)(a1 + 120);
  id v3 = a2;
  sub_100029F90(&qword_10017C2B0);
  State.wrappedValue.getter();
  uint64_t v4 = v8;
  sub_10003710C(a2, 0);
  id v9 = a2;
  id v5 = v3;
  State.wrappedValue.setter();
  sub_10003736C(v4, v10);

  sub_10003A74C(v4, v10);
  id v6 = objc_msgSend(self, "defaultCenter", v11, v12);
  uint64_t v7 = CLBApplicationLaunchedNotification;
  State.wrappedValue.getter();
  objc_msgSend(v6, "postNotificationName:object:", v7, v9, v11, v12);
}

uint64_t sub_100038FAC()
{
  return NavigationStack.init<>(root:)();
}

uint64_t sub_100039084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v3 = sub_100029F90(&qword_10017C3B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(self, "sharedPresentationController", v18);
  uint64_t v8 = static Color.clarityUIContentBackground.getter();
  char v9 = static Edge.Set.all.getter();
  id v20 = v7;
  unint64_t v21 = v8;
  char v22 = v9;
  uint64_t v10 = swift_allocObject();
  long long v11 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v10 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v10 + 128) = v11;
  *(_OWORD *)(v10 + 144) = *(_OWORD *)(a1 + 128);
  *(void *)(v10 + 160) = *(void *)(a1 + 144);
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v10 + 64) = v12;
  long long v13 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v10 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v10 + 96) = v13;
  long long v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v14;
  char v19 = 1;
  sub_10003A508(a1);
  static Binding.constant(_:)();
  uint64_t v15 = (void *)sub_100029F90(&qword_10017C3B8);
  unint64_t v17 = sub_10003B598();
  View.multimodalNavigationChrome(shouldDisplay:bottomBarTransitionProgress:backButtonAction:)();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  id v20 = v15;
  unint64_t v21 = v17;
  swift_getOpaqueTypeConformance2();
  View.clarityUIIdiom()();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1000392CC()
{
  type metadata accessor for SiriCoordinator();
  sub_10003AEE0(&qword_10017C2D8, (void (*)(uint64_t))type metadata accessor for SiriCoordinator);
  uint64_t v0 = (char *)StateObject.wrappedValue.getter();
  [*(id *)&v0[OBJC_IVAR____TtC12ClarityBoard15SiriCoordinator_presentationController] dismissSiri:23];
}

void sub_100039390(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    char v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Returning to home, enabling idle timer back", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v10 = [self sharedInstance];
  if (v10)
  {
    long long v11 = v10;
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 setIdleTimerDisabled:0 forReason:v12];

    long long v15 = *(_OWORD *)(a1 + 104);
    uint64_t v16 = *(void *)(a1 + 120);
    sub_100029F90(&qword_10017C2B0);
    State.wrappedValue.getter();
    id v13 = v17;
    char v14 = v18;
    long long v15 = *(_OWORD *)(a1 + 104);
    uint64_t v16 = *(void *)(a1 + 120);
    State.wrappedValue.getter();
    if (v18 != 255) {
      sub_10003A74C(v17, v18);
    }
    long long v15 = *(_OWORD *)(a1 + 104);
    uint64_t v16 = *(void *)(a1 + 120);
    id v17 = 0;
    unsigned __int8 v18 = -1;
    State.wrappedValue.setter();
    sub_10003736C(v13, v14);
    sub_10003A74C(v13, v14);
  }
  else
  {
    __break(1u);
  }
}

void sub_10003960C()
{
  sub_100029F90(&qword_10017C2B0);
  State.wrappedValue.getter();
  State.wrappedValue.getter();
  if (v1 != 255) {
    sub_10003A74C(v0, v1);
  }
  State.wrappedValue.setter();
  sub_10003736C(v0, v1);
  sub_10003A74C(v0, v1);
}

uint64_t sub_1000396F8()
{
  return static Published.subscript.setter();
}

void sub_1000397BC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  long long v6 = *(_OWORD *)(a3 + 104);
  uint64_t v7 = *(void *)(a3 + 120);
  sub_100029F90(&qword_10017C2B0);
  State.wrappedValue.getter();
  if (v9 != 255)
  {
    uint64_t v4 = v8;
    if (v9)
    {
      id v5 = objc_msgSend(v8, "application", v6, v7);
      sub_10003A74C(v8, v9);
      uint64_t v4 = v5;
    }
    objc_msgSend(v4, "setShouldShield:", v3, v6, v7);
  }
}

void sub_10003986C(id *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = *a1;
  uint64_t v25 = (char *)[*a1 application];
  if ([v25 canBeLaunched])
  {
    long long v26 = *(_OWORD *)(a2 + 88);
    sub_100029F90(&qword_10017C2E0);
    State.wrappedValue.getter();
    id v9 = [v25 bundleIdentifier];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    LOBYTE(v9) = sub_10006B824(v10, v12);
    swift_release();
    swift_bridgeObjectRelease();
    if (v9)
    {
    }
    else
    {
      uint64_t v14 = Logger.common.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, v4);
      long long v15 = v25;
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        unsigned __int8 v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = (void *)swift_slowAlloc();
        long long v24 = v18;
        *(_DWORD *)unsigned __int8 v18 = 138412290;
        v22[1] = v18 + 4;
        *(void *)&long long v26 = v15;
        char v19 = v15;
        uint64_t v25 = a2;
        id v20 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v23 = v15;

        a2 = v25;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Launching application by request: %@", v24, 0xCu);
        sub_100029F90(&qword_10017B800);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v16 = v15;
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v21 = static Animation.clarityUINavigationTransition.getter();
      __chkstk_darwin(v21);
      v22[-2] = a2;
      v22[-1] = v8;
      withAnimation<A>(_:_:)();
      swift_release();
    }
  }
  else
  {
    id v13 = v25;
  }
}

void sub_100039BE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_100029F90(&qword_10017C2B0);
  State.wrappedValue.getter();
  sub_10003710C(a2, 1);
  id v4 = v3;
  State.wrappedValue.setter();
  sub_10003736C(v5, v6);

  sub_10003A74C(v5, v6);
}

uint64_t sub_100039CE4@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for SiriCoordinator();
  sub_10003AEE0(&qword_10017C2D8, (void (*)(uint64_t))type metadata accessor for SiriCoordinator);
  uint64_t v2 = (void *)StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();

  swift_release();
  uint64_t result = swift_release();
  *a1 = v4;
  return result;
}

uint64_t sub_100039DD0()
{
  return static Published.subscript.setter();
}

uint64_t sub_100039EA0@<X0>(uint64_t a1@<X8>)
{
  return sub_100037648(a1);
}

uint64_t sub_100039EFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  if (qword_10017B580 != -1) {
    swift_once();
  }
  type metadata accessor for UserPreferences();
  sub_10003AEE0(&qword_10017C270, (void (*)(uint64_t))type metadata accessor for UserPreferences);
  swift_retain();
  uint64_t v16 = ObservedObject.init(wrappedValue:)();
  uint64_t v18 = v17;
  sub_10006CBBC();
  type metadata accessor for AppProtectionCoordinator();
  State.init(wrappedValue:)();
  sub_100029F90(&qword_10017C278);
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a9 = v16;
  *(void *)(a9 + 8) = v18;
  *(void *)(a9 + 16) = a1;
  *(void *)(a9 + 24) = a2;
  *(unsigned char *)(a9 + 32) = 0;
  *(_DWORD *)(a9 + 33) = v23;
  *(_DWORD *)(a9 + 36) = *(_DWORD *)((char *)&v23 + 3);
  *(void *)(a9 + 40) = a3;
  *(void *)(a9 + 48) = a4;
  *(unsigned char *)(a9 + 56) = 0;
  *(_DWORD *)(a9 + 60) = 0;
  *(_DWORD *)(a9 + 57) = 0;
  *(void *)(a9 + 64) = a5;
  *(void *)(a9 + 72) = a6;
  *(unsigned char *)(a9 + 80) = 0;
  *(_DWORD *)(a9 + 84) = *(_DWORD *)&v27[3];
  *(_DWORD *)(a9 + 81) = *(_DWORD *)v27;
  *(void *)(a9 + 88) = v23;
  *(void *)(a9 + 96) = v24;
  *(void *)(a9 + 104) = v23;
  *(unsigned char *)(a9 + 112) = v24;
  *(_DWORD *)(a9 + 116) = *(_DWORD *)&v26[3];
  *(_DWORD *)(a9 + 113) = *(_DWORD *)v26;
  *(void *)(a9 + 120) = v25;
  *(void *)(a9 + 128) = a7;
  *(void *)(a9 + 136) = a8;
  *(void *)(a9 + 144) = a10;
  return result;
}

void *sub_10003A0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v31[0] = a1;
  sub_100029F90(&qword_10017B820);
  sub_10002A8D8(&qword_10017C258, &qword_10017B820);
  uint64_t v10 = Publisher.eraseToAnyPublisher()();
  swift_retain();
  sub_100039EFC((uint64_t)sub_100037048, 0, (uint64_t)sub_100037060, 0, (uint64_t)sub_1000370B8, 0, v10, a2, (uint64_t)v31, a3);
  v29[6] = v31[6];
  v29[7] = v31[7];
  v29[8] = v31[8];
  uint64_t v30 = v32;
  uint64_t v29[2] = v31[2];
  v29[3] = v31[3];
  v29[4] = v31[4];
  v29[5] = v31[5];
  v29[0] = v31[0];
  v29[1] = v31[1];
  id v11 = objc_allocWithZone((Class)sub_100029F90(&qword_10017C260));
  sub_10003A508((uint64_t)v31);
  uint64_t v12 = (void *)UIHostingController.init(rootView:)();
  id v13 = [v12 view];
  if (v13)
  {
    uint64_t v14 = v13;
    sub_100029F90(&qword_10017C268);
    if (swift_dynamicCastClass())
    {
      uint64_t v15 = static SafeAreaRegions.keyboard.getter();
      uint64_t v17 = (void (*)(_OWORD *, void))dispatch thunk of _UIHostingView.safeAreaRegions.modify();
      if ((*v16 & v15) != 0) {
        *v16 &= ~v15;
      }
      v17(v29, 0);
      sub_10003A634((uint64_t)v31);

      return v12;
    }
  }
  uint64_t v18 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v18, v6);
  id v19 = v12;
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v27 = v7;
    uint64_t v28 = v6;
    char v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    *(_DWORD *)char v22 = 138412290;
    id v24 = [v19 view];
    id v25 = v24;
    if (v24) {
      *(void *)&v29[0] = v24;
    }
    else {
      *(void *)&v29[0] = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v23 = v25;

    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unexpected type for hosting controller view: %@", v22, 0xCu);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10003A634((uint64_t)v31);
    uint64_t v7 = v27;
    uint64_t v6 = v28;
  }
  else
  {
    sub_10003A634((uint64_t)v31);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v12;
}

uint64_t sub_10003A508(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  id v3 = *(void **)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  uint64_t v10 = *(void **)(a1 + 104);
  char v9 = *(unsigned char *)(a1 + 112);
  swift_retain();
  sub_10003A608(v2, v3, v4);
  sub_10003A608(v5, v6, v7);
  sub_10003A618();
  swift_retain();
  swift_retain();
  sub_10003A620(v10, v9);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

id sub_10003A608(uint64_t a1, void *a2, char a3)
{
  if (a3) {
    return a2;
  }
  else {
    return (id)swift_retain();
  }
}

uint64_t sub_10003A618()
{
  return swift_retain();
}

id sub_10003A620(id result, char a2)
{
  if (a2 != -1) {
    return result;
  }
  return result;
}

uint64_t sub_10003A634(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  uint64_t v10 = *(void **)(a1 + 104);
  char v9 = *(unsigned char *)(a1 + 112);
  swift_release();
  sub_10003A734(v2, v3, v4);
  sub_10003A734(v5, v6, v7);
  sub_10003A744();
  swift_release();
  swift_release();
  sub_10003A74C(v10, v9);
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_10003A734(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return _objc_release_x1();
  }
  else {
    return swift_release();
  }
}

uint64_t sub_10003A744()
{
  return swift_release();
}

void sub_10003A74C(id a1, char a2)
{
  if (a2 != -1) {
}
  }

uint64_t destroy for RootView(uint64_t a1)
{
  swift_release();
  sub_10003A734(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  sub_10003A734(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  sub_10003A744();
  swift_release();
  swift_release();
  if (*(unsigned __int8 *)(a1 + 112) != 255) {

  }
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for RootView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  swift_retain();
  sub_10003A608(v5, v6, v7);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(void **)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_10003A608(v8, v9, v10);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  char v13 = *(unsigned char *)(a2 + 80);
  sub_10003A618();
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v12;
  *(unsigned char *)(a1 + 80) = v13;
  uint64_t v14 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v14;
  uint64_t v15 = (void *)(a2 + 104);
  int v16 = *(unsigned __int8 *)(a2 + 112);
  swift_retain();
  swift_retain();
  if (v16 == 255)
  {
    *(void *)(a1 + 104) = *v15;
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  }
  else
  {
    uint64_t v17 = (void *)*v15;
    *(void *)(a1 + 104) = *v15;
    *(unsigned char *)(a1 + 112) = v16 & 1;
    id v18 = v17;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v19 = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RootView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  sub_10003A608(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  sub_10003A734(v7, v8, v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void **)(a2 + 48);
  char v12 = *(unsigned char *)(a2 + 56);
  sub_10003A608(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  char v15 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(unsigned char *)(a1 + 56) = v12;
  sub_10003A734(v13, v14, v15);
  uint64_t v16 = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 72);
  char v18 = *(unsigned char *)(a2 + 80);
  sub_10003A618();
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = v17;
  *(unsigned char *)(a1 + 80) = v18;
  sub_10003A744();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  uint64_t v19 = (void **)(a1 + 104);
  id v20 = (void **)(a2 + 104);
  int v21 = *(unsigned __int8 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 112) == 255)
  {
    if (v21 == 255)
    {
      uint64_t v23 = *v20;
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      *uint64_t v19 = v23;
    }
    else
    {
      uint64_t v27 = *v20;
      *(void *)(a1 + 104) = *v20;
      *(unsigned char *)(a1 + 112) = v21 & 1;
      id v28 = v27;
    }
  }
  else if (v21 == 255)
  {
    sub_10003AB04(a1 + 104);
    char v22 = *(unsigned char *)(a2 + 112);
    *uint64_t v19 = *v20;
    *(unsigned char *)(a1 + 112) = v22;
  }
  else
  {
    id v24 = *v20;
    id v25 = *(void **)(a1 + 104);
    *(void *)(a1 + 104) = *v20;
    *(unsigned char *)(a1 + 112) = v21 & 1;
    id v26 = v24;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  uint64_t v29 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v29;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10003AB04(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for RootView(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for RootView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  char v5 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v5;
  sub_10003A734(v6, v7, v8);
  char v9 = *(unsigned char *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  char v12 = *(unsigned char *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = v9;
  sub_10003A734(v10, v11, v12);
  char v13 = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = v13;
  sub_10003A744();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  uint64_t v14 = (void *)(a2 + 104);
  if (*(unsigned __int8 *)(a1 + 112) != 255)
  {
    int v15 = *(unsigned __int8 *)(a2 + 112);
    if (v15 != 255)
    {
      uint64_t v16 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = *v14;
      *(unsigned char *)(a1 + 112) = v15 & 1;

      goto LABEL_6;
    }
    sub_10003AB04(a1 + 104);
  }
  *(void *)(a1 + 104) = *v14;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
LABEL_6:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_release();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RootView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RootView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RootView()
{
  return &type metadata for RootView;
}

uint64_t sub_10003AD80()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_10003ADA0(id *a1)
{
  sub_10003986C(a1, (char *)(v1 + 16));
}

uint64_t sub_10003ADA8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003ADD8(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(v2 + 152))(*a2);
}

unint64_t sub_10003AE04()
{
  unint64_t result = qword_10017C2C8;
  if (!qword_10017C2C8)
  {
    sub_10002A694(&qword_10017C2B8);
    sub_10003AE78();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C2C8);
  }
  return result;
}

unint64_t sub_10003AE78()
{
  unint64_t result = qword_10017C2D0;
  if (!qword_10017C2D0)
  {
    sub_10002A544(255, (unint64_t *)&qword_10017B8B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C2D0);
  }
  return result;
}

uint64_t sub_10003AEE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003AF28()
{
  uint64_t v1 = (int *)(sub_100029F90(&qword_10017C298) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = v2 + *(void *)(*(void *)v1 + 64);
  uint64_t v4 = v0 + v2;
  uint64_t v5 = sub_100029F90(&qword_10017C290);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v4 + v1[11];
  swift_release();

  return _swift_deallocObject(v0, v3);
}

uint64_t sub_10003B02C()
{
  uint64_t v1 = *(void *)(sub_100029F90(&qword_10017C298) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10006135C(v2);
}

void sub_10003B0A8()
{
  sub_100039BE0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

id sub_10003B0C8(void *a1)
{
  return sub_100038D4C(a1);
}

uint64_t sub_10003B0D4@<X0>(unsigned char *a1@<X8>)
{
  return sub_100039CE4(a1);
}

uint64_t sub_10003B0E4()
{
  swift_unknownObjectRelease();
  swift_release();
  sub_10003A734(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
  sub_10003A734(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
  sub_10003A744();
  swift_release();
  swift_release();
  if (*(unsigned __int8 *)(v0 + 144) != 255) {

  }
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 184);
}

uint64_t sub_10003B184()
{
  return sub_100039DD0();
}

uint64_t sub_10003B194()
{
  return sub_100038FAC();
}

unint64_t sub_10003B19C()
{
  unint64_t result = qword_10017C340;
  if (!qword_10017C340)
  {
    sub_10002A694(&qword_10017C310);
    sub_10003AEE0(&qword_10017C328, (void (*)(uint64_t))type metadata accessor for Home);
    sub_10003AEE0((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C340);
  }
  return result;
}

void sub_10003B284()
{
  sub_100039390(v0 + 16);
}

void sub_10003B290()
{
}

uint64_t sub_10003B298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApplicationSceneContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003B2FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10003B360()
{
  return sub_1000396F8();
}

void sub_10003B36C(uint64_t a1, unsigned __int8 *a2)
{
  sub_1000397BC(a1, a2, v2 + 16);
}

unint64_t sub_10003B374()
{
  unint64_t result = qword_10017C378;
  if (!qword_10017C378)
  {
    sub_10002A694(&qword_10017C2F8);
    sub_10003B414(&qword_10017C380, &qword_10017C2F0, (void (*)(void))sub_10003B4B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C378);
  }
  return result;
}

uint64_t sub_10003B414(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    a3();
    sub_10002A8D8(&qword_10017C348, &qword_10017C350);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003B4B8()
{
  unint64_t result = qword_10017C388;
  if (!qword_10017C388)
  {
    sub_10002A694(&qword_10017C2E8);
    sub_10003AEE0(&qword_10017C390, (void (*)(uint64_t))type metadata accessor for ApplicationSceneContainer);
    sub_10002A8D8(&qword_10017C398, &qword_10017C3A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C388);
  }
  return result;
}

uint64_t sub_10003B590@<X0>(uint64_t a1@<X8>)
{
  return sub_100039084(*(void *)(v1 + 16), a1);
}

unint64_t sub_10003B598()
{
  unint64_t result = qword_10017C3C0;
  if (!qword_10017C3C0)
  {
    sub_10002A694(&qword_10017C3B8);
    sub_10003B638();
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C3C0);
  }
  return result;
}

unint64_t sub_10003B638()
{
  unint64_t result = qword_10017C3C8;
  if (!qword_10017C3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C3C8);
  }
  return result;
}

uint64_t sub_10003B690()
{
  swift_release();
  sub_10003A734(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  sub_10003A734(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  sub_10003A744();
  swift_release();
  swift_release();
  if (*(unsigned __int8 *)(v0 + 128) != 255) {

  }
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 168);
}

void sub_10003B728()
{
}

void sub_10003B730()
{
  sub_100038DFC(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10003B74C()
{
  return sub_10002A8D8((unint64_t *)&unk_10017C3E0, &qword_10017C2A0);
}

id sub_10003B7E0()
{
  *(void *)&v0[OBJC_IVAR___CLBWindowSceneDelegate_window] = 0;
  uint64_t v1 = OBJC_IVAR___CLBWindowSceneDelegate_openApplicationRequestPublisher;
  sub_100029F90(&qword_10017B820);
  swift_allocObject();
  uint64_t v2 = v0;
  *(void *)&v0[v1] = PassthroughSubject.init()();
  *(void *)&v2[OBJC_IVAR___CLBWindowSceneDelegate_keyboardSceneUpdateTask] = 0;
  *(void *)&v2[OBJC_IVAR___CLBWindowSceneDelegate_keyboardSceneUpdateDelayInNanoseconds] = 1000000000;
  *(void *)&v2[OBJC_IVAR___CLBWindowSceneDelegate_currentApplication] = 0;

  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for WindowSceneDelegate();
  id v3 = objc_msgSendSuper2(&v8, "init");
  uint64_t v4 = self;
  id v5 = v3;
  id v6 = [v4 defaultCenter];
  [v6 addObserver:v5 selector:"willEnableSecureMode:" name:CLBWillEnableSecureModeNotification object:0];
  [v6 addObserver:v5 selector:"didDisableSecureMode:" name:CLBDidDisableSecureModeNotification object:0];

  return v5;
}

void sub_10003B9D8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR___CLBWindowSceneDelegate_currentApplication;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR___CLBWindowSceneDelegate_currentApplication);
  if (a1)
  {
    if (v4)
    {
      id v5 = a1;
      sub_10003D054();
      id v6 = v4;
      id v7 = v5;
      LOBYTE(v5) = static NSObject.== infix(_:_:)();

      if (v5) {
        return;
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0);
  id v8 = [self defaultCenter];
  [v8 postNotificationName:CLBApplicationDidChangeNotification object:*(void *)(v2 + v3)];
}

void sub_10003BAE4(void *a1, uint64_t a2)
{
  sub_10003C20C(a1);
  uint64_t v4 = OBJC_IVAR___CLBWindowSceneDelegate_currentApplication;
  id v5 = *(void **)(a2 + OBJC_IVAR___CLBWindowSceneDelegate_currentApplication);
  *(void *)(a2 + OBJC_IVAR___CLBWindowSceneDelegate_currentApplication) = a1;
  id v10 = a1;
  if (v5)
  {
    if (a1)
    {
      sub_10003D054();
      id v6 = v5;
      id v7 = v10;
      char v8 = static NSObject.== infix(_:_:)();

      if (v8)
      {
        id v10 = v7;
        goto LABEL_7;
      }
    }
    goto LABEL_6;
  }
  if (a1)
  {
LABEL_6:
    UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0);
    id v9 = [self defaultCenter];
    [v9 postNotificationName:CLBApplicationDidChangeNotification object:*(void *)(a2 + v4)];

    id v6 = v10;
    id v10 = v9;
    goto LABEL_7;
  }
  id v6 = 0;
LABEL_7:
}

void sub_10003BC14(void *a1, uint64_t a2)
{
  uint64_t v4 = OBJC_IVAR___CLBWindowSceneDelegate_currentApplication;
  id v5 = *(void **)(a2 + OBJC_IVAR___CLBWindowSceneDelegate_currentApplication);
  *(void *)(a2 + OBJC_IVAR___CLBWindowSceneDelegate_currentApplication) = a1;
  id v10 = a1;
  if (v5)
  {
    if (a1)
    {
      sub_10003D054();
      id v6 = v5;
      id v7 = v10;
      char v8 = static NSObject.== infix(_:_:)();

      if (v8)
      {
        id v10 = v7;
        goto LABEL_7;
      }
    }
    goto LABEL_6;
  }
  if (a1)
  {
LABEL_6:
    UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0);
    id v9 = [self defaultCenter];
    [v9 postNotificationName:CLBApplicationDidChangeNotification object:*(void *)(a2 + v4)];

    id v6 = v10;
    id v10 = v9;
    goto LABEL_7;
  }
  id v6 = 0;
LABEL_7:
}

uint64_t sub_10003BDCC(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v8 = (char *)&v23 - v7;
  if ([a1 type] == (id)4)
  {
    id v9 = [a1 openApplicationRequest];
    if (v9)
    {
      id v10 = v9;
      if ([v9 isForeground])
      {
        id v26 = v10;
        PassthroughSubject.send(_:)();

        return 1;
      }
      uint64_t v18 = Logger.common.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v18, v2);
      uint64_t v19 = v10;
      id v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        char v22 = (uint8_t *)swift_slowAlloc();
        id v24 = (void *)swift_slowAlloc();
        id v25 = v22;
        id v26 = v19;
        *(_DWORD *)char v22 = 138412290;
        uint64_t v19 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v24 = v10;

        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Not handling non-foreground open application request: %@", v25, 0xCu);
        sub_100029F90(&qword_10017B800);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v20 = v19;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
    else
    {
      uint64_t v12 = Logger.common.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v12, v2);
      os_log_type_t v13 = static os_log_type_t.error.getter();
      uint64_t v14 = a1;
      int v15 = Logger.logObject.getter();
      if (os_log_type_enabled(v15, v13))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        id v24 = (void *)swift_slowAlloc();
        id v25 = v16;
        id v26 = v14;
        *(_DWORD *)uint64_t v16 = 138412290;
        uint64_t v17 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v24 = v14;

        _os_log_impl((void *)&_mh_execute_header, v15, v13, "Unexpectedly missing open application request: %@", v25, 0xCu);
        sub_100029F90(&qword_10017B800);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        int v15 = v14;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
  }
  return 0;
}

void sub_10003C20C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1) {
    unsigned int v11 = [a1 supportsClarityUI] ^ 1;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = OBJC_IVAR___CLBWindowSceneDelegate_keyboardSceneUpdateTask;
  if (*(void *)&v2[OBJC_IVAR___CLBWindowSceneDelegate_keyboardSceneUpdateTask])
  {
    swift_retain();
    sub_100029F90(&qword_10017F8C0);
    Task.cancel()();
    swift_release();
  }
  *(void *)&v2[v12] = 0;
  swift_release();
  uint64_t v13 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v13, v7);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 67109120;
    v22[3] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Should show keyboard within app scene: %{BOOL}d", v16, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    id v17 = [(id)qword_100186478 sceneManager];
    [v17 setShouldShowKeyboardWithinAppScene:1];
  }
  else
  {
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 1, 1, v18);
    type metadata accessor for MainActor();
    uint64_t v19 = v2;
    uint64_t v20 = static MainActor.shared.getter();
    os_log_type_t v21 = (void *)swift_allocObject();
    void v21[2] = v20;
    v21[3] = &protocol witness table for MainActor;
    v21[4] = v19;
    *(void *)&v2[v12] = sub_1000ABB38((uint64_t)v6, (uint64_t)&unk_10017C518, (uint64_t)v21);
    swift_release();
  }
}

uint64_t sub_10003C558()
{
  v0[2] = type metadata accessor for MainActor();
  v0[3] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003C608;
  return static Task<>.sleep(nanoseconds:)(1000000000);
}

uint64_t sub_10003C608()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    uint64_t v4 = sub_10003C800;
  }
  else {
    uint64_t v4 = sub_10003C764;
  }
  return _swift_task_switch(v4, v3, v2);
}

uint64_t sub_10003C764()
{
  swift_release();
  id v1 = [(id)qword_100186478 sceneManager];
  [v1 setShouldShowKeyboardWithinAppScene:0];

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10003C800()
{
  swift_release();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_10003C864(uint64_t a1)
{
  return sub_10003C89C(a1, "Hiding main window before enabling secure mode.", 1);
}

id sub_10003C88C(uint64_t a1)
{
  return sub_10003C89C(a1, "Showing main window after disabling secure mode.", 0);
}

id sub_10003C89C(uint64_t a1, const char *a2, char a3)
{
  uint64_t v6 = v3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, a2, v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id result = *(id *)(v6 + OBJC_IVAR___CLBWindowSceneDelegate_window);
  if (result) {
    return [result setHidden:a3 & 1];
  }
  return result;
}

uint64_t sub_10003CA3C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = type metadata accessor for Notification();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = a1;
  a4();

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

id sub_10003CB28()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WindowSceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WindowSceneDelegate()
{
  return self;
}

uint64_t sub_10003CBEC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40);
}

uint64_t sub_10003CC2C()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *id v1 = v0;
  v1[1] = sub_10003CCE0;
  return sub_10003C558();
}

uint64_t sub_10003CCE0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_10003CDD4()
{
  self;
  id v1 = [objc_allocWithZone((Class)UIWindow) initWithWindowScene:swift_dynamicCastObjCClassUnconditional()];
  uint64_t v2 = OBJC_IVAR___CLBWindowSceneDelegate_window;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR___CLBWindowSceneDelegate_window];
  *(void *)&v0[OBJC_IVAR___CLBWindowSceneDelegate_window] = v1;

  uint64_t v4 = *(void **)&v0[v2];
  if (v4)
  {
    uint64_t v5 = self;
    id v6 = v4;
    if ([v5 usesInputSystemUI])
    {
      type metadata accessor for ClarityRootController();
      uint64_t v14 = (char *)[objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
      *(void *)&v14[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_openApplicationRequestPublisher] = *(void *)&v0[OBJC_IVAR___CLBWindowSceneDelegate_openApplicationRequestPublisher];
      swift_retain();
      swift_release();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v0;
      uint64_t v8 = (void (**)(void *))&v14[OBJC_IVAR____TtC12ClarityBoard21ClarityRootController_applicationDidUpdateHandler];
      char *v8 = sub_10003D04C;
      v8[1] = (void (*)(void *))v7;
      uint64_t v9 = v0;
    }
    else
    {
      uint64_t v10 = *(void *)&v0[OBJC_IVAR___CLBWindowSceneDelegate_openApplicationRequestPublisher];
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v0;
      uint64_t v12 = v0;
      uint64_t v14 = (char *)sub_10003A0E8(v10, (uint64_t)sub_10003D044, v11);
    }
    swift_release();
    id v13 = [self currentDevice];
    [v13 setBatteryMonitoringEnabled:1];

    [v6 setRootViewController:v14];
    [v6 makeKeyAndVisible];
  }
}

uint64_t sub_10003D00C()
{
  return _swift_deallocObject(v0, 24);
}

void sub_10003D044(void *a1)
{
  sub_10003BAE4(a1, *(void *)(v1 + 16));
}

void sub_10003D04C(void *a1)
{
  sub_10003BC14(a1, *(void *)(v1 + 16));
}

unint64_t sub_10003D054()
{
  unint64_t result = qword_10017B8B8;
  if (!qword_10017B8B8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017B8B8);
  }
  return result;
}

uint64_t sub_10003D0DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  unsigned __int8 v4 = static Edge.Set.top.getter();
  unsigned __int8 v5 = static Edge.Set.leading.getter();
  unsigned __int8 v6 = static Edge.Set.trailing.getter();
  char v7 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v4) {
    char v7 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v5) {
    char v7 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v6) {
    char v7 = Edge.Set.init(rawValue:)();
  }
  uint64_t v8 = static SafeAreaRegions.all.getter();
  uint64_t v9 = static Color.clarityUIButtonBackground.getter();
  uint64_t result = static Color.primary.getter();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v8;
  *(unsigned char *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = result;
  *(void *)(a2 + 40) = nullsub_4;
  *(void *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_10003D1E0@<X0>(uint64_t a1@<X8>)
{
  return sub_10003D0DC(*v1, a1);
}

id sub_10003D1E8()
{
  return *v0;
}

uint64_t sub_10003D1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003D5C8();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10003D254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003D5C8();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10003D2B8()
{
}

id sub_10003D2E0(void *a1)
{
  uint64_t v11 = a1;
  id v2 = objc_allocWithZone((Class)sub_100029F90(&qword_10017C580));
  id v3 = a1;
  unsigned __int8 v4 = (void *)UIHostingController.init(rootView:)();
  id result = objc_msgSend(v4, "view", v11);
  if (result)
  {
    unint64_t v6 = result;
    id v7 = [self clearColor];
    [v6 setBackgroundColor:v7];

    uint64_t v8 = static SafeAreaRegions.keyboard.getter();
    uint64_t v10 = (void (*)(void **, void))UIHostingController.safeAreaRegions.modify();
    if ((*v9 & v8) != 0) {
      *v9 &= ~v8;
    }
    v10(&v11, 0);
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for BackButtonAvoidingContainerView()
{
  return &type metadata for BackButtonAvoidingContainerView;
}

uint64_t sub_10003D3EC()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ContainedViewController()
{
  return &type metadata for ContainedViewController;
}

unint64_t sub_10003D41C()
{
  unint64_t result = qword_10017C588;
  if (!qword_10017C588)
  {
    sub_10002A694(&qword_10017C590);
    sub_10003D498();
    sub_10003D568();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C588);
  }
  return result;
}

unint64_t sub_10003D498()
{
  unint64_t result = qword_10017C598;
  if (!qword_10017C598)
  {
    sub_10002A694(&qword_10017C5A0);
    sub_10003D514();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C598);
  }
  return result;
}

unint64_t sub_10003D514()
{
  unint64_t result = qword_10017C5A8;
  if (!qword_10017C5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C5A8);
  }
  return result;
}

unint64_t sub_10003D568()
{
  unint64_t result = qword_10017C5B0;
  if (!qword_10017C5B0)
  {
    sub_10002A694(&qword_10017C5B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C5B0);
  }
  return result;
}

unint64_t sub_10003D5C8()
{
  unint64_t result = qword_10017C5C0;
  if (!qword_10017C5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C5C0);
  }
  return result;
}

uint64_t destroy for Keypad()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Keypad(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Keypad(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

__n128 initializeWithTake for Keypad(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Keypad(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for Keypad(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 97)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Keypad(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Keypad()
{
  return &type metadata for Keypad;
}

uint64_t sub_10003D9B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10003D9CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for GeometryIndependentKeypad();
  __chkstk_darwin(v4);
  long long v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100029F90(&qword_10017C5C8);
  __chkstk_darwin(v7);
  uint64_t v9 = (void (**)(uint64_t@<X8>))((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(unsigned char *)(v2 + 96))
  {
    uint64_t v24 = swift_allocObject();
    long long v25 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(v24 + 80) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(v24 + 96) = v25;
    *(unsigned char *)(v24 + 112) = *(unsigned char *)(v2 + 96);
    long long v26 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v24 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v24 + 32) = v26;
    long long v27 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v24 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v24 + 64) = v27;
    *uint64_t v9 = sub_10003E094;
    v9[1] = (void (*)(uint64_t@<X8>))v24;
    swift_storeEnumTagMultiPayload();
    sub_10003E09C(v2);
    sub_100029F90(&qword_10017C5E0);
    sub_10002A8D8(&qword_10017C5E8, &qword_10017C5E0);
    sub_10003DF80();
    return _ConditionalContent<>.init(storage:)();
  }
  else
  {
    long long v10 = *(_OWORD *)(v2 + 16);
    v32[0] = *(_OWORD *)v2;
    v32[1] = v10;
    sub_100029F90(&qword_10017C5D0);
    uint64_t v30 = v7;
    Binding.projectedValue.getter();
    long long v28 = v33;
    uint64_t v11 = v34;
    uint64_t v12 = v35;
    uint64_t v31 = a1;
    __int16 v13 = *(_WORD *)(v2 + 32);
    uint64_t v29 = v4;
    char v14 = *(unsigned char *)(v2 + 34);
    uint64_t v15 = *(void *)(v2 + 56);
    sub_100036F84(v2 + 64, (uint64_t)&v33, &qword_10017C5D8);
    uint64_t v16 = *(void *)(v2 + 40);
    uint64_t v17 = *(void *)(v2 + 48);
    uint64_t v18 = *(void *)(v2 + 80);
    uint64_t v19 = *(void *)(v2 + 88);
    *(void *)&v32[0] = v18;
    uint64_t v36 = v19;
    *(_OWORD *)long long v6 = v28;
    *((void *)v6 + 2) = v11;
    *((void *)v6 + 3) = v12;
    *((_WORD *)v6 + 16) = v13;
    v6[34] = v14;
    *((void *)v6 + 5) = v15;
    sub_100036F84((uint64_t)&v33, (uint64_t)(v6 + 48), &qword_10017C5D8);
    *((void *)v6 + 8) = v16;
    *((void *)v6 + 9) = v17;
    *((void *)v6 + 10) = v18;
    *((void *)v6 + 11) = v19;
    uint64_t v20 = v29;
    os_log_type_t v21 = self;
    swift_retain();
    sub_10003ADA8((uint64_t)v32);
    sub_10003ADA8((uint64_t)&v36);
    id v22 = [v21 defaultCenter];
    NSNotificationCenter.publisher(for:object:)();

    *(void *)&v6[*(int *)(v20 + 56)] = 0x4059000000000000;
    sub_10003DF1C((uint64_t)v6, (uint64_t)v9);
    swift_storeEnumTagMultiPayload();
    sub_100029F90(&qword_10017C5E0);
    sub_10002A8D8(&qword_10017C5E8, &qword_10017C5E0);
    sub_10003DF80();
    _ConditionalContent<>.init(storage:)();
    return sub_10003DFD8((uint64_t)v6);
  }
}

void sub_10003DD1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  v18[0] = *(_OWORD *)a1;
  v18[1] = v4;
  sub_100029F90(&qword_10017C5D0);
  Binding.projectedValue.getter();
  long long v17 = v19;
  uint64_t v5 = v20;
  uint64_t v6 = v21;
  __int16 v7 = *(_WORD *)(a1 + 32);
  char v8 = *(unsigned char *)(a1 + 34);
  uint64_t v9 = *(void *)(a1 + 56);
  sub_100036F84(a1 + 64, (uint64_t)&v19, &qword_10017C5D8);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  *(void *)&v18[0] = v13;
  uint64_t v22 = v12;
  *(_OWORD *)a2 = v17;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(_WORD *)(a2 + 32) = v7;
  *(unsigned char *)(a2 + 34) = v8;
  *(void *)(a2 + 40) = v9;
  sub_100036F84((uint64_t)&v19, a2 + 48, &qword_10017C5D8);
  *(void *)(a2 + 64) = v11;
  *(void *)(a2 + 72) = v10;
  *(void *)(a2 + 80) = v13;
  *(void *)(a2 + 88) = v12;
  uint64_t v14 = type metadata accessor for GeometryIndependentKeypad();
  uint64_t v15 = self;
  swift_retain();
  sub_10003ADA8((uint64_t)v18);
  sub_10003ADA8((uint64_t)&v22);
  id v16 = [v15 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  *(void *)(a2 + *(int *)(v14 + 56)) = 0x4059000000000000;
}

uint64_t sub_10003DE84@<X0>(uint64_t a1@<X8>)
{
  return sub_10003D9CC(a1);
}

uint64_t type metadata accessor for GeometryIndependentKeypad()
{
  uint64_t result = qword_10017C650;
  if (!qword_10017C650) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10003DF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GeometryIndependentKeypad();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10003DF80()
{
  unint64_t result = qword_10017C5F0;
  if (!qword_10017C5F0)
  {
    type metadata accessor for GeometryIndependentKeypad();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C5F0);
  }
  return result;
}

uint64_t sub_10003DFD8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GeometryIndependentKeypad();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003E034()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 113);
}

void sub_10003E094(uint64_t a1@<X8>)
{
  sub_10003DD1C(v1 + 16, a1);
}

uint64_t sub_10003E09C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10003E110(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(_WORD *)(a1 + 33) = *(_WORD *)((char *)a2 + 33);
    uint64_t v9 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v9;
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    uint64_t v11 = a2[11];
    uint64_t v12 = *(int *)(a3 + 52);
    uint64_t v16 = (uint64_t)a2 + v12;
    uint64_t v17 = a1 + v12;
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v11;
    uint64_t v13 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    v15(v17, v16, v13);
    *(void *)(v7 + *(int *)(a3 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 56));
  }
  return v7;
}

uint64_t sub_10003E284(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 52);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_10003E324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v10 = *(int *)(a3 + 52);
  uint64_t v14 = a2 + v10;
  uint64_t v15 = a1 + v10;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  uint64_t v11 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v13(v15, v14, v11);
  *(void *)(a1 + *(int *)(a3 + 56)) = *(void *)(a2 + *(int *)(a3 + 56));
  return a1;
}

uint64_t sub_10003E44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  uint64_t v8 = *(int *)(a3 + 52);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  *(void *)(a1 + *(int *)(a3 + 56)) = *(void *)(a2 + *(int *)(a3 + 56));
  return a1;
}

uint64_t sub_10003E5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 80);
  uint64_t v9 = *(int *)(a3 + 52);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  uint64_t v12 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 56)) = *(void *)(a2 + *(int *)(a3 + 56));
  return a1;
}

uint64_t sub_10003E664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  uint64_t v7 = *(int *)(a3 + 52);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 56)) = *(void *)(a2 + *(int *)(a3 + 56));
  return a1;
}

uint64_t sub_10003E784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003E798);
}

uint64_t sub_10003E798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 52);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10003E848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003E85C);
}

uint64_t sub_10003E85C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 52);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10003E904()
{
  uint64_t result = type metadata accessor for NSNotificationCenter.Publisher();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10003E9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

void *initializeBufferWithCopyOfBuffer for LockScreenWallpaper(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

_OWORD *sub_10003EA1C(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for DisablesMirroringView()
{
  return sub_100034DF8();
}

unint64_t sub_10003EA74()
{
  unint64_t result = qword_10017C730;
  if (!qword_10017C730)
  {
    sub_10002A694(&qword_10017C738);
    sub_10002A8D8(&qword_10017C5E8, &qword_10017C5E0);
    sub_10003DF80();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C730);
  }
  return result;
}

uint64_t sub_10003EB14()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_10003EB30(uint64_t a1, uint64_t a2)
{
  return sub_1000428E0(*(void (**)(void))v2, *(void *)(v2 + 8), *(void *)(a2 + 16));
}

uint64_t sub_10003EB40(uint64_t a1)
{
  return sub_100042A8C(a1);
}

double sub_10003EB48()
{
  return sub_100042B50();
}

uint64_t sub_10003EB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable);
}

uint64_t sub_10003EBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, WitnessTable);
}

void sub_10003EC74()
{
}

uint64_t sub_10003ECB4(uint64_t a1, uint64_t a2, uint64_t (*a3)@<X0>(uint64_t a1@<X8>), void *a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = a3;
  v8[3] = a4;
  v8[4] = a1;
  v8[5] = a2;
  swift_getOpaqueTypeMetadata2();
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  swift_getOpaqueTypeConformance2();
  type metadata accessor for InvertColorsOnlyInLightModeView();
  swift_getWitnessTable();
  uint64_t v12 = sub_100041388;
  uint64_t v13 = v8;
  uint64_t v9 = type metadata accessor for DisablesMirroringViewController();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100056EB0(&v12, v9, WitnessTable);
  swift_retain();
  swift_release();
  uint64_t v12 = v14;
  uint64_t v13 = v15;
  sub_100056EB0(&v12, v9, WitnessTable);
  return swift_release();
}

uint64_t sub_10003EE28@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v23[1] = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v10;
  uint64_t v25 = v11;
  swift_getOpaqueTypeMetadata2();
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  swift_getOpaqueTypeConformance2();
  uint64_t v12 = type metadata accessor for InvertColorsOnlyInLightModeView();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  long long v19 = (char *)v23 - v18;
  a1(v17);
  sub_1000866F0(a2, a3, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100056EB0(v16, v12, WitnessTable);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  sub_100056EB0(v19, v12, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v21)(v19, v12);
}

uint64_t sub_10003F07C(uint64_t a1)
{
  return sub_10003ECB4(*v1, v1[1], *(uint64_t (**)@<X0>(uint64_t@<X8>))(a1 + 16), *(void **)(a1 + 24));
}

uint64_t sub_10003F08C()
{
  return LocalizedStringKey.init(stringLiteral:)();
}

uint64_t sub_10003F180@<X0>(uint64_t a1@<X0>, char a2@<W2>, double a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v9 = sub_100029F90(&qword_10017C920);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100029F90(&qword_10017C928);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100029F90(&qword_10017C930);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  long long v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Alignment.center.getter();
  BOOL v20 = (a2 & 1) == 0;
  if (v20) {
    a3 = 0.0;
  }
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v21 = sub_100029F90(&qword_10017C938);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v12, a1, v21);
  uint64_t v22 = &v12[*(int *)(v10 + 44)];
  long long v23 = v33;
  long long v24 = v31;
  *((_OWORD *)v22 + 1) = v32;
  *((_OWORD *)v22 + 2) = v23;
  *(_OWORD *)uint64_t v22 = v24;
  uint64_t v25 = static Alignment.center.getter();
  sub_10005A1BC(0.0, 1, 0.0, 1, a3, (v20 | a4) & 1, 0.0, 1, (uint64_t)v15, 0.0, 1, a3, (v20 | a4) & 1, v25, v26);
  sub_10002A840((uint64_t)v12, &qword_10017C920);
  sub_10002A580((uint64_t)v15, (uint64_t)v19, &qword_10017C928);
  long long v27 = &v19[*(int *)(v17 + 44)];
  *(void *)long long v27 = 0x3FF0000000000000;
  *((_WORD *)v27 + 4) = 0;
  sub_10002A840((uint64_t)v15, &qword_10017C928);
  return sub_100036F84((uint64_t)v19, v30, &qword_10017C930);
}

uint64_t sub_10003F3F4()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10003F410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003F180(a1, *(unsigned char *)(v2 + 8), *(double *)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

uint64_t sub_10003F430(uint64_t a1, void *a2)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100029F90(&qword_10017C5D0);
  Binding.wrappedValue.getter();
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  Binding.wrappedValue.setter();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = swift_release();
  return (*(uint64_t (**)(uint64_t))(v2 + 64))(v6);
}

__n128 sub_10003F518@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = static HorizontalAlignment.center.getter();
  sub_10003F5E8(a1, a2, a3, (uint64_t)v19);
  uint64_t v9 = v19[0];
  uint64_t v10 = v19[1];
  char v11 = v20;
  __n128 v17 = v22;
  long long v18 = v21;
  uint64_t v12 = v23;
  uint64_t v13 = *(void *)(a3 + 48);
  char v14 = *(unsigned char *)(a3 + 56);
  uint64_t v15 = *(void *)(a3 + *(int *)(type metadata accessor for GeometryIndependentKeypad() + 56));
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  *(void *)(a4 + 24) = v9;
  *(void *)(a4 + 32) = v10;
  *(unsigned char *)(a4 + 40) = v11;
  __n128 result = v17;
  *(_OWORD *)(a4 + 48) = v18;
  *(__n128 *)(a4 + 64) = v17;
  *(void *)(a4 + 80) = v12;
  *(void *)(a4 + 88) = v13;
  *(unsigned char *)(a4 + 96) = v14;
  *(void *)(a4 + 104) = v15;
  *(unsigned char *)(a4 + 112) = 0;
  return result;
}

uint64_t sub_10003F5E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for GeometryIndependentKeypad();
  __chkstk_darwin(v8 - 8);
  uint64_t v59 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = a1;
  uint64_t v63 = a2;
  sub_10002D088();
  swift_bridgeObjectRetain();
  uint64_t v10 = Text.init<A>(_:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  uint64_t v60 = a3;
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  LODWORD(v19) = v18;
  uint64_t v61 = v20;
  sub_100041A08(v10, v12, v14);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v22 = HIBYTE(a2) & 0xF;
  uint64_t v23 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v24 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v24 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v24) {
    goto LABEL_49;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = (uint64_t)sub_100041A18(a1, a2, 10);
    LOBYTE(a1) = v57;
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v25 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v25 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v26 = (uint64_t)sub_100041B98(v25, v23, 10);
    LOBYTE(a1) = v27 & 1;
LABEL_44:
    if ((a1 & 1) == 0)
    {
      uint64_t v37 = v59;
      int v38 = *(unsigned __int8 *)(v60 + 32);
      sub_10003DF1C(v60, v59);
      uint64_t v39 = v17;
      if (v38 == 1)
      {
        char v40 = *(unsigned char *)(v37 + 34);
        sub_10003DFD8(v37);
        if ((v40 & 1) != 0 || v26)
        {
          sub_10003F08C();
          uint64_t v44 = Text.init(_:tableName:bundle:comment:)();
          HIDWORD(v58) = v19;
          uint64_t v19 = v44;
          uint64_t v46 = v45;
          uint64_t v59 = v15;
          char v48 = v47 & 1;
          uint64_t v41 = Text.font(_:)();
          uint64_t v26 = v49;
          uint64_t v43 = v50;
          uint64_t v42 = v51 & 1;
          uint64_t v52 = v19;
          LOBYTE(v19) = BYTE4(v58);
          char v53 = v48;
          uint64_t v15 = v59;
          sub_100041A08(v52, v46, v53);
          swift_bridgeObjectRelease();
          goto LABEL_53;
        }
        uint64_t v41 = 0;
LABEL_52:
        uint64_t v42 = 0;
        uint64_t v43 = 0;
LABEL_53:
        *(void *)a4 = v15;
        *(void *)(a4 + 8) = v39;
        *(unsigned char *)(a4 + 16) = v19 & 1;
        *(void *)(a4 + 24) = v61;
        *(void *)(a4 + 32) = v41;
        *(void *)(a4 + 40) = v26;
        *(void *)(a4 + 48) = v42;
        *(void *)(a4 + 56) = v43;
        sub_100041B00(v15, v39, v19 & 1);
        swift_bridgeObjectRetain();
        sub_100041B10(v41, v26, v42, v43);
        sub_100041B54(v41, v26, v42, v43);
        sub_100041A08(v15, v39, v19 & 1);
        return swift_bridgeObjectRelease();
      }
      sub_10003DFD8(v37);
LABEL_51:
      uint64_t v41 = 0;
      uint64_t v26 = 0;
      goto LABEL_52;
    }
LABEL_49:
    uint64_t v39 = v17;
    goto LABEL_51;
  }
  uint64_t v62 = a1;
  uint64_t v63 = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v22) {
      goto LABEL_64;
    }
    if (v22 == 1 || (BYTE1(a1) - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v26 = (BYTE1(a1) - 48);
    if (v22 != 2)
    {
      if ((BYTE2(a1) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v26 = 10 * (BYTE1(a1) - 48) + (BYTE2(a1) - 48);
      uint64_t v28 = v22 - 3;
      if (v28)
      {
        uint64_t v29 = (unsigned __int8 *)&v62 + 3;
        while (1)
        {
          unsigned int v30 = *v29 - 48;
          if (v30 > 9) {
            goto LABEL_31;
          }
          uint64_t v31 = 10 * v26;
          if ((unsigned __int128)(v26 * (__int128)10) >> 64 != (10 * v26) >> 63) {
            goto LABEL_31;
          }
          uint64_t v26 = v31 + v30;
          if (__OFADD__(v31, v30)) {
            goto LABEL_31;
          }
          LOBYTE(a1) = 0;
          ++v29;
          if (!--v28) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    LOBYTE(a1) = 0;
    goto LABEL_44;
  }
  if (a1 != 45)
  {
    if (!v22 || (a1 - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v26 = (a1 - 48);
    if (v22 != 1)
    {
      if ((BYTE1(a1) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v26 = 10 * (a1 - 48) + (BYTE1(a1) - 48);
      uint64_t v32 = v22 - 2;
      if (v32)
      {
        long long v33 = (unsigned __int8 *)&v62 + 2;
        while (1)
        {
          unsigned int v34 = *v33 - 48;
          if (v34 > 9) {
            goto LABEL_31;
          }
          uint64_t v35 = 10 * v26;
          if ((unsigned __int128)(v26 * (__int128)10) >> 64 != (10 * v26) >> 63) {
            goto LABEL_31;
          }
          uint64_t v26 = v35 + v34;
          if (__OFADD__(v35, v34)) {
            goto LABEL_31;
          }
          LOBYTE(a1) = 0;
          ++v33;
          if (!--v32) {
            goto LABEL_44;
          }
        }
      }
    }
    goto LABEL_43;
  }
  if (v22)
  {
    if (v22 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      if (v22 == 2)
      {
        LOBYTE(a1) = 0;
        uint64_t v26 = -(uint64_t)(BYTE1(a1) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(a1) - 48) <= 9u)
      {
        uint64_t v26 = -10 * (BYTE1(a1) - 48) - (BYTE2(a1) - 48);
        uint64_t v36 = v22 - 3;
        if (!v36) {
          goto LABEL_43;
        }
        long long v54 = (unsigned __int8 *)&v62 + 3;
        while (1)
        {
          unsigned int v55 = *v54 - 48;
          if (v55 > 9) {
            break;
          }
          uint64_t v56 = 10 * v26;
          if ((unsigned __int128)(v26 * (__int128)10) >> 64 != (10 * v26) >> 63) {
            break;
          }
          uint64_t v26 = v56 - v55;
          if (__OFSUB__(v56, v55)) {
            break;
          }
          LOBYTE(a1) = 0;
          ++v54;
          if (!--v36) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_31:
    uint64_t v26 = 0;
    LOBYTE(a1) = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_10003FB00()
{
  sub_100029F90(&qword_10017BDC8);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100110A10;
  *(void *)(v1 + 32) = &off_10015D138;
  *(void *)(v1 + 40) = &off_10015D188;
  *(void *)(v1 + 48) = &off_10015D1D8;
  if (*(unsigned char *)(v0 + 34) == 1)
  {
    uint64_t v1 = (uint64_t)sub_100030004((void *)1, 4, 1, (void *)v1);
    *(void *)(v1 + 16) = 4;
    *(void *)(v1 + 56) = &off_10015D228;
  }
  return v1;
}

uint64_t sub_10003FB9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v47 = a1;
  uint64_t v2 = type metadata accessor for GeometryIndependentKeypad();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v43 = v2 - 8;
  uint64_t v46 = v3;
  uint64_t v45 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v44 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v41 = *(void *)(v5 - 8);
  uint64_t v42 = v5;
  __chkstk_darwin(v5);
  char v40 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LayoutDirection();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100029F90(&qword_10017C740);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100029F90(&qword_10017C748);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100029F90(&qword_10017C750);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v1;
  uint64_t v20 = *(void *)(v1 + 40);
  *(void *)char v13 = static Alignment.center.getter();
  *((void *)v13 + 1) = v21;
  *((void *)v13 + 2) = v20;
  v13[24] = 0;
  *((void *)v13 + 4) = v20;
  v13[40] = 0;
  uint64_t v22 = sub_100029F90(&qword_10017C758);
  sub_100040060(v1, &v13[*(int *)(v22 + 44)]);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for LayoutDirection.leftToRight(_:), v7);
  uint64_t v24 = (uint64_t *)&v16[*(int *)(v14 + 36)];
  uint64_t v25 = sub_100029F90(&qword_10017C760);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)v24 + *(int *)(v25 + 28), v10, v7);
  *uint64_t v24 = KeyPath;
  sub_10002A580((uint64_t)v13, (uint64_t)v16, &qword_10017C740);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_10002A840((uint64_t)v13, &qword_10017C740);
  sub_1000413B4();
  View.accessibilityIdentifier(_:)();
  sub_10002A840((uint64_t)v16, &qword_10017C748);
  uint64_t v26 = v42;
  uint64_t v27 = v39;
  uint64_t v28 = v40;
  uint64_t v29 = v41;
  unsigned int v30 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
  v30(v40, v39 + *(int *)(v43 + 60), v42);
  uint64_t v31 = v44;
  sub_10003DF1C(v27, v44);
  unint64_t v32 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v33 = swift_allocObject();
  sub_10004147C(v31, v33 + v32);
  uint64_t v34 = v47;
  sub_10002A580((uint64_t)v19, v47, &qword_10017C750);
  uint64_t v35 = sub_100029F90(&qword_10017C780);
  v30((char *)(v34 + *(int *)(v35 + 52)), (uint64_t)v28, v26);
  uint64_t v36 = (void (**)())(v34 + *(int *)(v35 + 56));
  *uint64_t v36 = sub_1000414E0;
  v36[1] = (void (*)())v33;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v26);
  return sub_10002A840((uint64_t)v19, &qword_10017C750);
}

uint64_t sub_100040060@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  unint64_t v32 = a2;
  uint64_t v3 = sub_100029F90(&qword_10017C790);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v33 = (uint64_t)&KeyPath - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&KeyPath - v6;
  uint64_t v8 = type metadata accessor for GeometryIndependentKeypad();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = sub_100029F90(&qword_10017C798);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v31 = (char *)&KeyPath - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&KeyPath - v15;
  uint64_t v30 = a1;
  uint64_t v34 = sub_10003FB00();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10003DF1C(a1, (uint64_t)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = swift_allocObject();
  sub_10004147C((uint64_t)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  sub_100029F90(&qword_10017C7A0);
  sub_100029F90(&qword_10017C7A8);
  sub_10002A8D8(&qword_10017C7B0, &qword_10017C7A0);
  sub_100041614();
  sub_10002A8D8(&qword_10017C7C0, &qword_10017C7A8);
  uint64_t v19 = v30;
  ForEach<>.init(_:id:content:)();
  if (*(unsigned char *)(v19 + 34))
  {
    uint64_t v20 = sub_100029F90(&qword_10017C7C8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 1, 1, v20);
  }
  else
  {
    *(void *)uint64_t v7 = 0;
    v7[8] = 1;
    uint64_t v21 = sub_100029F90(&qword_10017C7C8);
    sub_100040804(v19, &v7[*(int *)(v21 + 36)]);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 0, 1, v21);
  }
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v23 = v31;
  v22(v31, v16, v11);
  uint64_t v24 = v33;
  sub_10002A580((uint64_t)v7, v33, &qword_10017C790);
  uint64_t v25 = v32;
  v22(v32, v23, v11);
  uint64_t v26 = sub_100029F90(&qword_10017C7D0);
  sub_10002A580(v24, (uint64_t)&v25[*(int *)(v26 + 48)], &qword_10017C790);
  sub_10002A840((uint64_t)v7, &qword_10017C790);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27(v16, v11);
  sub_10002A840(v24, &qword_10017C790);
  return ((uint64_t (*)(char *, uint64_t))v27)(v23, v11);
}

uint64_t sub_1000404A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for GeometryIndependentKeypad();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = *a1;
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  sub_100029F90(&qword_10017C7A8);
  v13[1] = v9;
  swift_getKeyPath();
  sub_10003DF1C(a2, (uint64_t)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  sub_10004147C((uint64_t)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  swift_bridgeObjectRetain();
  sub_100029F90(&qword_10017BE30);
  sub_100029F90(&qword_10017C7F0);
  sub_10002A8D8(&qword_10017C888, &qword_10017BE30);
  sub_10002A8D8(qword_10017C890, &qword_10017C7F0);
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_100040694(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GeometryIndependentKeypad();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  sub_10003DF1C(a2, (uint64_t)&v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  sub_10004147C((uint64_t)&v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v10 + v9);
  uint64_t v11 = (void *)(v10 + ((v6 + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v11 = v8;
  v11[1] = v7;
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  sub_100029F90(&qword_10017C7F8);
  sub_100041694();
  return Button.init(action:label:)();
}

uint64_t sub_100040804@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v70 = a2;
  uint64_t v62 = sub_100029F90(&qword_10017C7D8);
  __chkstk_darwin(v62);
  uint64_t v69 = (char **)((char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v63 = sub_100029F90(&qword_10017C7E0);
  uint64_t v60 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v59 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100029F90(&qword_10017C7E8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v59 - v9;
  uint64_t v11 = type metadata accessor for GeometryIndependentKeypad();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11 - 8);
  uint64_t v15 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v59 - v16;
  uint64_t v18 = sub_100029F90(&qword_10017C7F0);
  uint64_t v67 = *(void *)(v18 - 8);
  uint64_t v68 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v66 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v71 = (char *)&v59 - v21;
  unsigned __int8 v22 = static Axis.Set.horizontal.getter();
  char v23 = static Axis.Set.vertical.getter();
  int v24 = Axis.Set.init(rawValue:)();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v22) {
    int v24 = Axis.Set.init(rawValue:)();
  }
  Axis.Set.init(rawValue:)();
  char v25 = Axis.Set.init(rawValue:)();
  uint64_t v64 = v10;
  uint64_t v65 = v8;
  if (v25 == v23) {
    int v61 = v24;
  }
  else {
    int v61 = Axis.Set.init(rawValue:)();
  }
  sub_10003DF1C(a1, (uint64_t)v17);
  unint64_t v26 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v27 = (v26 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = sub_10004147C((uint64_t)v17, v28 + v26);
  uint64_t v30 = (void *)(v28 + v27);
  *uint64_t v30 = 48;
  v30[1] = 0xE100000000000000;
  __chkstk_darwin(v29);
  *(&v59 - 4) = v31;
  *(&v59 - 3) = v32;
  *(&v59 - 2) = (char *)a1;
  sub_100029F90(&qword_10017C7F8);
  sub_100041694();
  Button.init(action:label:)();
  LOBYTE(v28) = *(unsigned char *)(a1 + 33);
  sub_10003DF1C(a1, (uint64_t)v15);
  if (v28)
  {
    sub_10003DFD8((uint64_t)v15);
    uint64_t v33 = (uint64_t)v64;
    uint64_t v34 = (uint64_t)v65;
    uint64_t v35 = v63;
LABEL_12:
    sub_10003DF1C(a1, (uint64_t)v17);
    uint64_t v41 = swift_allocObject();
    uint64_t v42 = sub_10004147C((uint64_t)v17, v41 + v26);
    __chkstk_darwin(v42);
    *(&v59 - 2) = (char *)a1;
    sub_100029F90(&qword_10017C820);
    sub_1000417F0();
    uint64_t v43 = v59;
    Button.init(action:label:)();
    uint64_t v44 = v60;
    (*(void (**)(void *, char *, uint64_t))(v60 + 16))(v69, v43, v35);
    swift_storeEnumTagMultiPayload();
    sub_100029F90(&qword_10017C860);
    sub_10002A8D8(&qword_10017C868, &qword_10017C7E0);
    sub_100041930();
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v35);
    goto LABEL_13;
  }
  uint64_t v36 = *((void *)v15 + 2);
  uint64_t v37 = *((void *)v15 + 3);
  long long v72 = *(_OWORD *)v15;
  uint64_t v73 = v36;
  uint64_t v74 = v37;
  sub_100029F90(&qword_10017C5D0);
  Binding.wrappedValue.getter();
  uint64_t v39 = v75;
  unint64_t v38 = v76;
  swift_bridgeObjectRelease();
  if ((v38 & 0x2000000000000000) != 0) {
    uint64_t v40 = HIBYTE(v38) & 0xF;
  }
  else {
    uint64_t v40 = v39 & 0xFFFFFFFFFFFFLL;
  }
  sub_10003DFD8((uint64_t)v15);
  uint64_t v33 = (uint64_t)v64;
  uint64_t v34 = (uint64_t)v65;
  uint64_t v35 = v63;
  if (v40) {
    goto LABEL_12;
  }
  unsigned __int8 v55 = static Axis.Set.horizontal.getter();
  uint64_t v56 = static Axis.Set.vertical.getter();
  char v57 = Axis.Set.init(rawValue:)();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v55) {
    char v57 = Axis.Set.init(rawValue:)();
  }
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v56) {
    char v57 = Axis.Set.init(rawValue:)();
  }
  uint64_t v58 = v69;
  *uint64_t v69 = 0;
  *((unsigned char *)v58 + 8) = 1;
  *((unsigned char *)v58 + 9) = v57;
  swift_storeEnumTagMultiPayload();
  sub_100029F90(&qword_10017C860);
  sub_10002A8D8(&qword_10017C868, &qword_10017C7E0);
  sub_100041930();
  _ConditionalContent<>.init(storage:)();
LABEL_13:
  uint64_t v46 = v66;
  uint64_t v45 = v67;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  char v48 = v71;
  uint64_t v49 = v68;
  v47(v66, v71, v68);
  sub_10002A580(v33, v34, &qword_10017C7E8);
  uint64_t v50 = v33;
  char v51 = v70;
  *id v70 = 0;
  *((unsigned char *)v51 + 8) = 1;
  *((unsigned char *)v51 + 9) = v61;
  uint64_t v52 = sub_100029F90(&qword_10017C880);
  v47((char *)v51 + *(int *)(v52 + 48), v46, v49);
  sub_10002A580(v34, (uint64_t)v51 + *(int *)(v52 + 64), &qword_10017C7E8);
  sub_10002A840(v50, &qword_10017C7E8);
  char v53 = *(void (**)(char *, uint64_t))(v45 + 8);
  v53(v48, v49);
  sub_10002A840(v34, &qword_10017C7E8);
  return ((uint64_t (*)(char *, uint64_t))v53)(v46, v49);
}

uint64_t sub_100040FC8()
{
  sub_100029F90(&qword_10017C5D0);
  Binding.wrappedValue.getter();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v2 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v2 = *(void *)v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v3 = Binding.wrappedValue.getter();
    sub_10006D538(v3);
    swift_bridgeObjectRelease();
    Binding.wrappedValue.setter();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = swift_release();
    return (*(uint64_t (**)(uint64_t))(v0 + 64))(v4);
  }
  return result;
}

uint64_t sub_1000410D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static Color.red.getter();
  uint64_t v5 = Image.init(systemName:)();
  uint64_t v6 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = static Alignment.center.getter();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(a1 + 48);
  char v12 = *(unsigned char *)(a1 + 56);
  uint64_t result = type metadata accessor for GeometryIndependentKeypad();
  uint64_t v14 = *(void *)(a1 + *(int *)(result + 56));
  *(void *)a2 = v4;
  *(_WORD *)(a2 + 8) = 256;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = KeyPath;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v8;
  *(void *)(a2 + 48) = v10;
  *(void *)(a2 + 56) = v11;
  *(unsigned char *)(a2 + 64) = v12;
  *(void *)(a2 + 72) = v14;
  *(unsigned char *)(a2 + 80) = 0;
  return result;
}

void sub_1000411A8()
{
  Notification.object.getter();
  if (v10)
  {
    sub_100041550();
    if (swift_dynamicCast())
    {
      id v0 = [v8 characters];
      uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v3 = v2;

      LOBYTE(v1) = sub_10005A620(v1, v3, &off_10015D278);
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      if (v1)
      {
        id v4 = [v8 characters];
        uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v7 = v6;

        sub_10003F430(v5, v7);
        swift_bridgeObjectRelease();
      }
      else if ([v8 keyCode] == (id)42)
      {
        sub_100040FC8();
      }
    }
  }
  else
  {
    sub_10002A840((uint64_t)v9, &qword_10017B810);
  }
}

uint64_t sub_10004130C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100041350()
{
  swift_release();

  return _swift_deallocObject(v0, 48);
}

uint64_t sub_100041388@<X0>(uint64_t a1@<X8>)
{
  return sub_10003EE28(*(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t type metadata accessor for DisablesMirroringViewController()
{
  return sub_100034DF8();
}

unint64_t sub_1000413B4()
{
  unint64_t result = qword_10017C768;
  if (!qword_10017C768)
  {
    sub_10002A694(&qword_10017C748);
    sub_10002A8D8(&qword_10017C770, &qword_10017C740);
    sub_10002A8D8(&qword_10017C778, &qword_10017C760);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C768);
  }
  return result;
}

uint64_t sub_10004147C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GeometryIndependentKeypad();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000414E0()
{
  type metadata accessor for GeometryIndependentKeypad();

  sub_1000411A8();
}

unint64_t sub_100041550()
{
  unint64_t result = qword_10017C788;
  if (!qword_10017C788)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017C788);
  }
  return result;
}

uint64_t sub_100041594@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for GeometryIndependentKeypad() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_1000404A8(a1, v6, a2);
}

unint64_t sub_100041614()
{
  unint64_t result = qword_10017C7B8;
  if (!qword_10017C7B8)
  {
    sub_10002A694(&qword_10017BE30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C7B8);
  }
  return result;
}

double sub_100041688@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_10003F518(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1).n128_u64[0];
  return result;
}

unint64_t sub_100041694()
{
  unint64_t result = qword_10017C800;
  if (!qword_10017C800)
  {
    sub_10002A694(&qword_10017C7F8);
    sub_10002A8D8(&qword_10017C808, &qword_10017C810);
    sub_100041734();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C800);
  }
  return result;
}

unint64_t sub_100041734()
{
  unint64_t result = qword_10017C818;
  if (!qword_10017C818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C818);
  }
  return result;
}

uint64_t sub_10004178C()
{
  return sub_100040FC8();
}

uint64_t sub_1000417E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000410D8(*(void *)(v1 + 16), a1);
}

unint64_t sub_1000417F0()
{
  unint64_t result = qword_10017C828;
  if (!qword_10017C828)
  {
    sub_10002A694(&qword_10017C820);
    sub_10004186C();
    sub_100041734();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C828);
  }
  return result;
}

unint64_t sub_10004186C()
{
  unint64_t result = qword_10017C830;
  if (!qword_10017C830)
  {
    sub_10002A694(&qword_10017C838);
    sub_10002A8D8(&qword_10017C840, &qword_10017C848);
    sub_10002A8D8(&qword_10017C850, &qword_10017C858);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C830);
  }
  return result;
}

unint64_t sub_100041930()
{
  unint64_t result = qword_10017C870;
  if (!qword_10017C870)
  {
    sub_10002A694(&qword_10017C860);
    sub_1000419AC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C870);
  }
  return result;
}

unint64_t sub_1000419AC()
{
  unint64_t result = qword_10017C878;
  if (!qword_10017C878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C878);
  }
  return result;
}

uint64_t sub_100041A08(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

unsigned __int8 *sub_100041A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100041E14();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_100041B98(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100041B00(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100041B10(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100041B00(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100041B54(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100041A08(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned __int8 *sub_100041B98(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100041E14()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_100041E94(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100041E94(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_100041FEC(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_100050FFC(v9, 0),
          unint64_t v12 = sub_1000420EC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_100041FEC(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_100051064(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_100051064(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_1000420EC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = sub_100051064(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = sub_100051064(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100042304()
{
  unint64_t v1 = (int *)(type metadata accessor for GeometryIndependentKeypad() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = v2 + *(void *)(*(void *)v1 + 64);
  uint64_t v4 = v0 + v2;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = v4 + v1[15];
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return _swift_deallocObject(v0, v3);
}

uint64_t sub_100042420(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for GeometryIndependentKeypad() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100040694(a1, v4);
}

uint64_t sub_1000424A4()
{
  uint64_t v1 = (int *)(type metadata accessor for GeometryIndependentKeypad() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = ((*(void *)(*(void *)v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v4 = v0 + v2;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = v4 + v1[15];
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3);
}

uint64_t sub_1000425D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for GeometryIndependentKeypad() - 8);
  uint64_t v2 = v0
     + ((*(void *)(v1 + 64)
       + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10003F430(*(void *)v2, *(void **)(v2 + 8));
}

void *sub_100042668(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LockScreenButtonStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LockScreenButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

__n128 initializeWithCopy for GeometryIndependentKeypad.ButtonSizeModifier(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for GeometryIndependentKeypad.ButtonSizeModifier(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GeometryIndependentKeypad.ButtonSizeModifier(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GeometryIndependentKeypad.ButtonSizeModifier()
{
  return &type metadata for GeometryIndependentKeypad.ButtonSizeModifier;
}

uint64_t sub_10004279C()
{
  return swift_getWitnessTable();
}

uint64_t sub_10004286C()
{
  return sub_10002A8D8(&qword_10017C918, &qword_10017C780);
}

uint64_t sub_1000428A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000428C4()
{
  return swift_getOpaqueTypeConformance2();
}

id sub_1000428E0(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  unint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SecureHostingController();
  a1();
  uint64_t v8 = (void *)sub_100034DB0((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a3);
  id result = [v8 view];
  if (result)
  {
    unint64_t v10 = result;
    id v11 = [result layer];

    [v11 setDisableUpdateMask:18];
    id result = [v8 view];
    if (result)
    {
      unint64_t v12 = result;
      id v13 = [self clearColor];
      [v12 setBackgroundColor:v13];

      return v8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100042A8C(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  v2(v1);
  return dispatch thunk of UIHostingController.rootView.setter();
}

double sub_100042B50()
{
  dispatch thunk of UIHostingController.sizeThatFits(in:)();
  return result;
}

uint64_t sub_100042B9C()
{
  return sub_100042C10(&qword_10017C940, &qword_10017C930, (void (*)(void))sub_100042BE0);
}

uint64_t sub_100042BE0()
{
  return sub_100042C10(&qword_10017C948, &qword_10017C928, (void (*)(void))sub_100042C8C);
}

uint64_t sub_100042C10(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100042C8C()
{
  unint64_t result = qword_10017C950;
  if (!qword_10017C950)
  {
    sub_10002A694(&qword_10017C920);
    sub_10002A8D8(&qword_10017C958, &qword_10017C938);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C950);
  }
  return result;
}

void CLBOrientationUpdateReason.description.getter()
{
}

void sub_100042E50()
{
}

id sub_100042E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = [objc_allocWithZone((Class)APBaseShieldViewConfig) initWithApplication:a3];
  sub_100029F90(&qword_10017C9F8);
  UIViewRepresentableContext.coordinator.getter();
  [v4 setDelegate:v7];

  [v4 setOutlet:a2];
  id v5 = [objc_allocWithZone((Class)APBaseShieldView) initWithConfig:v4];

  return v5;
}

uint64_t sub_100042F1C(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    unint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 67109378;
    LODWORD(v15) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 8) = 2112;
    if (a2)
    {
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v15 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v15 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v13 = 0;
    }
    *unint64_t v12 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "AppProtection shield auth retry result: %{BOOL}d error: %@", (uint8_t *)v11, 0x12u);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_100043240()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppProtectionShield.Coordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppProtectionShield.Coordinator()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for AppProtectionShieldConfiguration(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for AppProtectionShieldConfiguration(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for AppProtectionShieldConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  unint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for AppProtectionShieldConfiguration(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AppProtectionShieldConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppProtectionShieldConfiguration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppProtectionShieldConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppProtectionShield()
{
  return &type metadata for AppProtectionShield;
}

id sub_1000434AC(uint64_t a1)
{
  return sub_100042E58(a1, *v1, v1[1]);
}

id sub_1000434B8@<X0>(void *a1@<X8>)
{
  char v3 = *(void **)v1;
  uint64_t v4 = *(void **)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  id v6 = (objc_class *)type metadata accessor for AppProtectionShield.Coordinator();
  unint64_t v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = &v7[OBJC_IVAR____TtCV12ClarityBoard19AppProtectionShield11Coordinator_appProtectionShield];
  *(void *)uint64_t v8 = v3;
  *((void *)v8 + 1) = v4;
  v8[16] = v5;
  v12.receiver = v7;
  v12.super_class = v6;
  id v9 = v3;
  id v10 = v4;
  id result = objc_msgSendSuper2(&v12, "init");
  *a1 = result;
  return result;
}

uint64_t sub_10004353C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100043684();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000435A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100043684();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100043604()
{
}

unint64_t sub_100043630()
{
  unint64_t result = qword_10017C9F0;
  if (!qword_10017C9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C9F0);
  }
  return result;
}

unint64_t sub_100043684()
{
  unint64_t result = qword_10017CA00;
  if (!qword_10017CA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CA00);
  }
  return result;
}

void sub_1000436D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Shield view unlock button was pressed, issuing retry challenge", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v10 = [self sharedGuard];
  uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtCV12ClarityBoard19AppProtectionShield11Coordinator_appProtectionShield + 8);
  aBlock[4] = sub_100042F1C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100052678;
  aBlock[3] = &unk_10015E6D0;
  objc_super v12 = _Block_copy(aBlock);
  id v13 = v11;
  [v10 authenticateForShieldDismissalForSubject:v13 completion:v12];
  _Block_release(v12);
}

uint64_t sub_100043900(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100043910()
{
  return swift_release();
}

uint64_t sub_10004391C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v17 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    unint64_t v7 = (void *)a2[5];
    *(void *)(a1 + 32) = a2[4];
    char v8 = *((unsigned char *)a2 + 48);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100043A80(v7, v8);
    *(void *)(v4 + 40) = v7;
    *(unsigned char *)(v4 + 48) = v8;
    *(unsigned char *)(v4 + 56) = *((unsigned char *)a2 + 56);
    *(void *)(v4 + 64) = a2[8];
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for NSNotificationCenter.Publisher();
    id v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 40);
    uint64_t v15 = v4 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
    *(void *)(v15 + 8) = *(void *)(v16 + 8);
  }
  swift_retain();
  return v4;
}

id sub_100043A80(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_retain();
  }
}

uint64_t sub_100043A8C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  sub_100043B38(*(id *)(a1 + 40), *(unsigned char *)(a1 + 48));
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_release();
}

void sub_100043B38(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_release();
  }
}

uint64_t sub_100043B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100043A80(v6, v7);
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_retain();
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_100043C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_retain();
  swift_release();
  char v7 = *(void **)(a2 + 40);
  char v8 = *(unsigned char *)(a2 + 48);
  sub_100043A80(v7, v8);
  uint64_t v9 = *(void **)(a1 + 40);
  char v10 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = v8;
  sub_100043B38(v9, v10);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = *(int *)(a3 + 40);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100043D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_100043E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  char v7 = *(unsigned char *)(a2 + 48);
  uint64_t v8 = *(void **)(a1 + 40);
  char v9 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v7;
  sub_100043B38(v8, v9);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  swift_release();
  return a1;
}

uint64_t sub_100043F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100043F6C);
}

uint64_t sub_100043F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NSNotificationCenter.Publisher();
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10004401C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100044030);
}

uint64_t sub_100044030(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ForgotAdminPasscodeButton()
{
  uint64_t result = qword_10017CA68;
  if (!qword_10017CA68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100044124()
{
  uint64_t result = type metadata accessor for NSNotificationCenter.Publisher();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000441E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100044204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v2 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v55 = *(void *)(v2 - 8);
  uint64_t v56 = v2;
  __chkstk_darwin(v2);
  long long v54 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ForgotAdminPasscodeButton();
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = sub_100029F90(&qword_10017CAB8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100029F90(&qword_10017CAC0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100029F90(&qword_10017CAC8);
  __chkstk_darwin(v49);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100029F90(&qword_10017CAD0);
  uint64_t v52 = *(void *)(v17 - 8);
  uint64_t v53 = v17;
  __chkstk_darwin(v17);
  uint64_t v59 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_100029F90(&qword_10017CAD8);
  __chkstk_darwin(v51);
  uint64_t v50 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000464BC((uint64_t)v1, v60);
  uint64_t v20 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v62 = ((v20 + 16) & ~v20) + v7;
  uint64_t v63 = (v20 + 16) & ~v20;
  uint64_t v21 = v63;
  uint64_t v61 = v20 | 7;
  uint64_t v22 = swift_allocObject();
  sub_100046524((uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21);
  uint64_t v64 = v1;
  Button.init(action:label:)();
  sub_10002A8D8((unint64_t *)&unk_10017CAE0, &qword_10017CAB8);
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  LOBYTE(v9) = *v1;
  unint64_t v23 = v1;
  uint64_t v58 = v1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = v9;
  sub_1000466A4((uint64_t)v14, (uint64_t)v16);
  uint64_t v26 = (uint64_t *)&v16[*(int *)(v49 + 36)];
  uint64_t *v26 = KeyPath;
  v26[1] = (uint64_t)sub_10004669C;
  v26[2] = v25;
  sub_10002A840((uint64_t)v14, &qword_10017CAC0);
  LocalizedStringKey.init(stringLiteral:)();
  unint64_t v27 = &v23[*(int *)(v5 + 48)];
  char v28 = *v27;
  uint64_t v29 = *((void *)v27 + 1);
  char v65 = v28;
  uint64_t v66 = v29;
  uint64_t v48 = sub_100029F90(&qword_10017B8A8);
  State.projectedValue.getter();
  sub_10004670C();
  uint64_t v30 = v59;
  View.alert<A, B>(_:isPresented:actions:message:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10002A840((uint64_t)v16, &qword_10017CAC8);
  uint64_t v31 = (uint64_t)v58;
  uint64_t v33 = v54;
  uint64_t v32 = v55;
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  uint64_t v35 = v56;
  v34(v54, &v58[*(int *)(v5 + 44)], v56);
  uint64_t v36 = v60;
  sub_1000464BC(v31, v60);
  uint64_t v37 = swift_allocObject();
  sub_100046524(v36, v37 + v63);
  uint64_t v39 = v52;
  uint64_t v38 = v53;
  uint64_t v40 = (uint64_t)v50;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v50, v30, v53);
  uint64_t v41 = v51;
  v34((char *)(v40 + *(int *)(v51 + 52)), v33, v35);
  uint64_t v42 = (void (**)(uint64_t))(v40 + *(int *)(v41 + 56));
  char *v42 = sub_100046880;
  v42[1] = (void (*)(uint64_t))v37;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v35);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v59, v38);
  uint64_t v43 = (uint64_t)v58;
  uint64_t v44 = *((void *)v58 + 8);
  LOBYTE(v67) = v58[56];
  uint64_t v68 = v44;
  State.wrappedValue.getter();
  LOBYTE(v67) = v65;
  uint64_t v45 = v60;
  sub_1000464BC(v43, v60);
  uint64_t v46 = swift_allocObject();
  sub_100046524(v45, v46 + v63);
  sub_10002A8D8((unint64_t *)&unk_10017CB18, &qword_10017CAD8);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  return sub_10002A840(v40, &qword_10017CAD8);
}

void sub_1000449D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ForgotAdminPasscodeButton();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = sub_100044FB4();
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v43 = v3;
    id v11 = [objc_allocWithZone((Class)AKAppleIDAuthenticationInAppContext) init];
    [v11 setIsEphemeral:1];
    [v11 setAuthenticationType:2];
    [v11 setShouldPromptForPasswordOnly:1];
    id v44 = v10;
    [v11 setPresentingViewController:v10];
    uint64_t v12 = self;
    id v13 = v11;
    id v14 = [v12 mainBundle];
    v52._countAndFlagsBits = 0xD000000000000027;
    v52._object = (void *)0x8000000100125FC0;
    v15._object = (void *)0x8000000100125FA0;
    v15._countAndFlagsBits = 0xD00000000000001DLL;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v52);

    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v13 setTitle:v17];

    id v18 = v13;
    uint64_t v19 = sub_10004536C(0xD000000000000024);
    uint64_t v21 = v20;
    id v22 = [v12 mainBundle];
    v53._countAndFlagsBits = 0xD000000000000087;
    v53._object = (void *)0x8000000100126020;
    v23._countAndFlagsBits = v19;
    v23._object = v21;
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v53);
    swift_bridgeObjectRelease();

    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 setReason:v25];

    id v26 = v18;
    id v27 = [v12 mainBundle];
    v28._countAndFlagsBits = 0xD000000000000021;
    v54._object = (void *)0xE90000000000006ELL;
    v28._object = (void *)0x80000001001260B0;
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    v54._countAndFlagsBits = 0x6F74747562204B4FLL;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v54);

    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v26 setDefaultButtonString:v30];

    uint64_t v31 = *(void *)(a1 + 64);
    LOBYTE(aBlock) = *(unsigned char *)(a1 + 56);
    uint64_t v46 = v31;
    char v51 = 1;
    sub_100029F90(&qword_10017B8A8);
    State.wrappedValue.setter();
    id v32 = [objc_allocWithZone((Class)AKAppleIDAuthenticationController) init];
    if (v32)
    {
      uint64_t v33 = v32;
      sub_1000464BC(a1, (uint64_t)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
      unint64_t v34 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      uint64_t v35 = swift_allocObject();
      sub_100046524((uint64_t)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v35 + v34);
      uint64_t v49 = sub_100046B48;
      uint64_t v50 = v35;
      aBlock = _NSConcreteStackBlock;
      uint64_t v46 = 1107296256;
      uint64_t v47 = sub_100045D30;
      uint64_t v48 = &unk_10015E7C0;
      uint64_t v36 = _Block_copy(&aBlock);
      id v37 = v26;
      swift_release();
      [v33 authenticateWithContext:v37 completion:v36];
      _Block_release(v36);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v38 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v38, v5);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to find presenting view controller for Forgot Passcode button.", v41, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

id sub_100044FB4()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v29 - v6;
  uint64_t v8 = *(void **)(v0 + 40);
  char v9 = *(unsigned char *)(v0 + 48);
  sub_100043A80(v8, v9);
  uint64_t v10 = (void *)sub_10006171C(v8, v9);
  sub_100043B38(v8, v9);
  if (!v10)
  {
    uint64_t v16 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v16, v1);
    NSString v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, (os_log_type_t)v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v18, "Unexpectedly missing scene session for Forgot Passcode button.", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    return 0;
  }
  id v11 = [v10 scene];
  if (!v11)
  {
LABEL_9:
    uint64_t v20 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v20, v1);
    uint64_t v21 = v10;
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      Swift::String v24 = (uint8_t *)swift_slowAlloc();
      NSString v25 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v24 = 138412290;
      id v26 = [v21 scene];
      id v27 = v26;
      if (v26) {
        id v29 = v26;
      }
      else {
        id v29 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v25 = v27;

      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unexpected type for scene for Forgot Passcode button: %@", v24, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v22 = v21;
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    return 0;
  }
  uint64_t v12 = v11;
  self;
  id v13 = (void *)swift_dynamicCastObjCClass();
  if (!v13)
  {

    goto LABEL_9;
  }
  id v14 = [v13 keyWindow];
  id v15 = [v14 rootViewController];

  return v15;
}

uint64_t sub_10004536C(uint64_t a1)
{
  v5[3] = &type metadata for AppleAccountFeatureFlags;
  void v5[4] = sub_100046980();
  char v2 = isFeatureEnabled(_:)();
  sub_1000469D4((uint64_t)v5);
  if (v2)
  {
    v5[0] = 0x444E41524241415FLL;
    v5[1] = 0xEB00000000474E49;
    swift_bridgeObjectRetain();
    uint64_t v4 = String.init<A>(_:)();
    String.append<A>(contentsOf:)();
    return v4;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100045450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v8 - 8);
  uint64_t v23 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ForgotAdminPasscodeButton();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8);
  id v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100046BE0();
  id v15 = (void *)static OS_dispatch_queue.main.getter();
  sub_1000464BC(a3, (uint64_t)v14);
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  sub_100046524((uint64_t)v14, v18 + v16);
  *(void *)(v18 + v17) = a1;
  *(void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8)) = v21;
  aBlock[4] = sub_100046D6C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100033424;
  aBlock[3] = &unk_10015E810;
  uint64_t v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100046E04((unint64_t *)&qword_10017CB48, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100029F90(&qword_10017CB50);
  sub_10002A8D8(&qword_10017CB58, &qword_10017CB50);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, v23);
}

uint64_t sub_1000457E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)&v45 - v14;
  uint64_t v16 = *(void *)(a1 + 64);
  LOBYTE(v47) = *(unsigned char *)(a1 + 56);
  uint64_t v48 = v16;
  LOBYTE(v46) = 0;
  sub_100029F90(&qword_10017B8A8);
  uint64_t result = State.wrappedValue.setter();
  if (!a2) {
    return result;
  }
  uint64_t v45 = v7;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(a2 + 16)) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v20 = sub_1000743D8(v18, v19);
  if ((v21 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v22 = *(void *)(*(void *)(a2 + 56) + 8 * v20);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = v22;
  sub_100029F90(&qword_10017CB38);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    return result;
  }
  if (a3)
  {
    swift_errorRetain();
    swift_bridgeObjectRelease();
    uint64_t v23 = Logger.common.unsafeMutableAddressor();
    uint64_t v24 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v15, v23, v6);
    swift_errorRetain();
    swift_errorRetain();
    NSString v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = (uint8_t *)swift_slowAlloc();
      Swift::String v28 = (void *)swift_slowAlloc();
      *(_DWORD *)id v27 = 138412290;
      swift_errorRetain();
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v47 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v29;
      uint64_t v24 = v45;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Apple ID authentication error: %@", v27, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v15, v6);
  }
  if (v47 == *(void *)(a1 + 8) && v48 == *(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_16:
    uint64_t v31 = Logger.common.unsafeMutableAddressor();
    uint64_t v32 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v13, v31, v6);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Exiting Assistive Access via Apple ID.", v35, 2u);
      swift_slowDealloc();
    }

    uint64_t v36 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v13, v6);
    return (*(uint64_t (**)(uint64_t))(a1 + 24))(v36);
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v30) {
    goto LABEL_16;
  }
  uint64_t v37 = Logger.common.unsafeMutableAddressor();
  uint64_t v38 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v10, v37, v6);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Attempted to exit Assistive Access via Apple ID, but Apple ID did not match.", v41, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v6);
  uint64_t v42 = (char *)(a1 + *(int *)(type metadata accessor for ForgotAdminPasscodeButton() + 40));
  char v43 = *v42;
  uint64_t v44 = *((void *)v42 + 1);
  LOBYTE(v47) = v43;
  uint64_t v48 = v44;
  LOBYTE(v46) = 1;
  return State.wrappedValue.setter();
}

uint64_t sub_100045D30(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_100029F90(&qword_10017CB38);
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100045DD8@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100029F90(&qword_10017CB30);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 == 1)
  {
    sub_10004536C(0xD00000000000001ELL);
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = (id)AXLocStringKeyForModel();

    if (v8)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      LocalizedStringKey.init(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      LocalizedStringKey.init(_:)();
    }
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
  }
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  uint64_t v14 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 1, 1, v14);
  static Font.system(size:weight:design:)();
  sub_10002A840((uint64_t)v6, &qword_10017CB30);
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  char v19 = v18;
  uint64_t v21 = v20;
  swift_release();
  sub_100041A08(v9, v11, v13);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v17;
  *(unsigned char *)(a2 + 16) = v19 & 1;
  *(void *)(a2 + 24) = v21;
  return result;
}

uint64_t sub_100046040@<X0>(uint64_t a1@<X8>)
{
  sub_10004536C(0xD000000000000025);
  LocalizedStringKey.init(_:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

void sub_1000460BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  NSString v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = &v29[-v9];
  __chkstk_darwin(v8);
  char v12 = &v29[-v11];
  uint64_t v13 = *(void *)(a2 + 64);
  v29[8] = *(unsigned char *)(a2 + 56);
  uint64_t v30 = v13;
  sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.getter();
  if (v31 == 1)
  {
    id v14 = sub_100044FB4();
    if (v14)
    {
      uint64_t v15 = v14;
      id v16 = [v14 presentedViewController];

      uint64_t v17 = Logger.common.unsafeMutableAddressor();
      char v18 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16);
      if (v16)
      {
        v18(v10, v17, v3);
        char v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v21 = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Dismissing authentication view controller because secure mode was enabled.", v21, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v10, v3);
        [v15 dismissViewControllerAnimated:0 completion:0];
      }
      else
      {
        v18(v7, v17, v3);
        os_log_type_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          Swift::String v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)Swift::String v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Authentication view controller was presented, but unable to find presented view controller.", v28, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
      }
    }
    else
    {
      uint64_t v22 = Logger.common.unsafeMutableAddressor();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v12, v22, v3);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        NSString v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)NSString v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Authentication view controller was presented, but unable to find presenting view controller.", v25, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v12, v3);
    }
  }
}

void sub_100046424()
{
  id v0 = [(id)qword_100186478 sceneManager];
  sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.getter();
  [v0 setNeedsKeyboardForAdminScene:v1];
}

uint64_t sub_1000464BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ForgotAdminPasscodeButton();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100046524(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ForgotAdminPasscodeButton();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100046588()
{
  return sub_10004690C((uint64_t (*)(uint64_t))sub_1000449D0);
}

uint64_t sub_1000465A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100045DD8(*(unsigned char **)(v1 + 16), a1);
}

uint64_t sub_1000465A8()
{
  return 1;
}

Swift::Int sub_1000465B0()
{
  return Hasher._finalize()();
}

void sub_1000465F4()
{
}

Swift::Int sub_10004661C()
{
  return Hasher._finalize()();
}

const char *sub_10004665C()
{
  return "AppleAccount";
}

const char *sub_100046670()
{
  return "AABranding";
}

uint64_t sub_10004668C()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char *sub_10004669C(unsigned char *a1)
{
  return sub_1000AECE8(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_1000466A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017CAC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004670C()
{
  unint64_t result = qword_10017CAF0;
  if (!qword_10017CAF0)
  {
    sub_10002A694(&qword_10017CAC8);
    sub_1000467AC();
    sub_10002A8D8(&qword_10017F940, &qword_10017CB10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CAF0);
  }
  return result;
}

unint64_t sub_1000467AC()
{
  unint64_t result = qword_10017CAF8;
  if (!qword_10017CAF8)
  {
    sub_10002A694(&qword_10017CAC0);
    sub_10002A8D8((unint64_t *)&unk_10017CAE0, &qword_10017CAB8);
    sub_100046E04((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CAF8);
  }
  return result;
}

void sub_100046880(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ForgotAdminPasscodeButton() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_1000460BC(a1, v4);
}

uint64_t sub_1000468F4()
{
  return sub_10004690C((uint64_t (*)(uint64_t))sub_100046424);
}

uint64_t sub_10004690C(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for ForgotAdminPasscodeButton() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

unint64_t sub_100046980()
{
  unint64_t result = qword_10017CB28;
  if (!qword_10017CB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CB28);
  }
  return result;
}

uint64_t sub_1000469D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100046A28()
{
  uint64_t v1 = (int *)(type metadata accessor for ForgotAdminPasscodeButton() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = v2 + *(void *)(*(void *)v1 + 64);
  uint64_t v4 = v0 + v2;
  swift_bridgeObjectRelease();
  swift_release();
  sub_100043B38(*(id *)(v4 + 40), *(unsigned char *)(v4 + 48));
  swift_release();
  uint64_t v5 = v4 + v1[11];
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();

  return _swift_deallocObject(v0, v3);
}

uint64_t sub_100046B48(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ForgotAdminPasscodeButton() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100045450(a1, a2, v6);
}

uint64_t sub_100046BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100046BD8()
{
  return swift_release();
}

unint64_t sub_100046BE0()
{
  unint64_t result = qword_10017CB40;
  if (!qword_10017CB40)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017CB40);
  }
  return result;
}

uint64_t sub_100046C20()
{
  uint64_t v1 = (int *)(type metadata accessor for ForgotAdminPasscodeButton() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = (((*(void *)(*(void *)v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v0 + v2;
  swift_bridgeObjectRelease();
  swift_release();
  sub_100043B38(*(id *)(v4 + 40), *(unsigned char *)(v4 + 48));
  swift_release();
  uint64_t v5 = v4 + v1[11];
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_errorRelease();

  return _swift_deallocObject(v0, v3 + 8);
}

uint64_t sub_100046D6C()
{
  uint64_t v1 = *(void *)(type metadata accessor for ForgotAdminPasscodeButton() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + v3);
  uint64_t v5 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000457E8(v0 + v2, v4, v5);
}

uint64_t sub_100046E04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AppleAccountFeatureFlags(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AppleAccountFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100046F3CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100046F64()
{
  return 0;
}

ValueMetadata *type metadata accessor for AppleAccountFeatureFlags()
{
  return &type metadata for AppleAccountFeatureFlags;
}

uint64_t sub_100046F7C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_100047014()
{
  unint64_t result = qword_10017CB60;
  if (!qword_10017CB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CB60);
  }
  return result;
}

id sub_100047070()
{
  id v1 = [v0 alertTitle];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v2 = [v0 alertMessage];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(swift_allocObject() + 16) = v0;
  id v3 = v0;
  State.init(wrappedValue:)();
  id v4 = objc_allocWithZone((Class)sub_100029F90(&qword_10017CB70));
  uint64_t v5 = (void *)UIHostingController.init(rootView:)();
  id result = [v5 view];
  if (result)
  {
    NSString v7 = result;
    id v8 = [self clearColor];
    [v7 setBackgroundColor:v8];

    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100047238()
{
  return _swift_deallocObject(v0, 24);
}

id sub_100047270()
{
  return [*(id *)(v0 + 16) defaultResponse];
}

BOOL sub_100047280()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AdminSceneView();
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 48);
  unsigned __int8 v12 = *(unsigned char *)(v0 + 40);
  uint64_t v13 = v5;
  sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.getter();
  char v6 = v14;
  sub_10004C7E0(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  if (v6)
  {
    BOOL v7 = 1;
  }
  else
  {
    type metadata accessor for ObservableThermalController();
    sub_10004C774(&qword_10017CC78, (void (*)(uint64_t))type metadata accessor for ObservableThermalController);
    id v8 = (void *)StateObject.wrappedValue.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    int v9 = v12;

    BOOL v7 = v9 == 5;
  }
  sub_10004C848((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  return v7;
}

uint64_t sub_10004742C()
{
  uint64_t v1 = *(void (**)(void))(v0 + 24);
  sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.getter();
  v1(v3);
  uint64_t result = State.wrappedValue.getter();
  if ((v3 & 1) == 0)
  {
    State.wrappedValue.getter();
    return State.wrappedValue.setter();
  }
  return result;
}

id sub_10004750C()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for ObservableThermalController());

  return [v0 init];
}

uint64_t sub_100047544@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v66 = a1;
  uint64_t v65 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v63 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v64 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AdminSceneView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v59 = v4 - 8;
  uint64_t v68 = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  BOOL v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100029F90(&qword_10017CC38);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100029F90(&qword_10017CC40);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  char v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100029F90(&qword_10017CC48);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  char v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100029F90(&qword_10017CC50) - 8;
  __chkstk_darwin(v60);
  uint64_t v58 = (uint64_t)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100029F90(&qword_10017CC58);
  __chkstk_darwin(v62);
  uint64_t v61 = (uint64_t)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v10 = static Alignment.center.getter();
  v10[1] = v21;
  uint64_t v22 = sub_100029F90(&qword_10017CC60);
  sub_100047B58((uint64_t)v2, (uint64_t)v10 + *(int *)(v22 + 44));
  char v23 = static Edge.Set.bottom.getter();
  sub_10002A580((uint64_t)v10, (uint64_t)v14, &qword_10017CC38);
  v14[*(int *)(v12 + 44)] = v23;
  sub_10002A840((uint64_t)v10, &qword_10017CC38);
  uint64_t v24 = (uint64_t)v2;
  uint64_t v25 = *v2;
  uint64_t v69 = type metadata accessor for AdminSceneView;
  uint64_t v67 = v7;
  sub_10004C7E0(v24, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  uint64_t v26 = *(unsigned __int8 *)(v68 + 80);
  uint64_t v27 = ((v26 + 16) & ~v26) + v6;
  uint64_t v28 = (v26 + 16) & ~v26;
  uint64_t v68 = v26 | 7;
  uint64_t v57 = v27;
  uint64_t v29 = swift_allocObject();
  uint64_t v56 = v28;
  sub_10004B9D4((uint64_t)v7, v29 + v28);
  Swift::String v54 = v18;
  sub_10002A580((uint64_t)v14, (uint64_t)v18, &qword_10017CC40);
  *(void *)&v18[*(int *)(v16 + 60)] = v25;
  uint64_t v30 = (void (**)(uint64_t))&v18[*(int *)(v16 + 64)];
  *uint64_t v30 = sub_10004BA38;
  v30[1] = (void (*)(uint64_t))v29;
  swift_retain();
  sub_10002A840((uint64_t)v14, &qword_10017CC40);
  uint64_t v31 = *(int *)(v59 + 76);
  uint64_t v32 = v24;
  uint64_t v55 = v24;
  uint64_t v33 = v24 + v31;
  uint64_t v34 = v63;
  uint64_t v35 = v64;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  uint64_t v37 = v65;
  v36(v64, v33, v65);
  uint64_t v38 = (uint64_t)v67;
  sub_10004C7E0(v32, (uint64_t)v67, (uint64_t (*)(void))v69);
  uint64_t v39 = swift_allocObject();
  sub_10004B9D4(v38, v39 + v28);
  uint64_t v40 = (uint64_t)v54;
  uint64_t v41 = v58;
  sub_10002A580((uint64_t)v54, v58, &qword_10017CC48);
  uint64_t v42 = v60;
  v36((char *)(v41 + *(int *)(v60 + 60)), (uint64_t)v35, v37);
  char v43 = (uint64_t (**)())(v41 + *(int *)(v42 + 64));
  *char v43 = sub_10004BAAC;
  v43[1] = (uint64_t (*)())v39;
  (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v37);
  sub_10002A840(v40, &qword_10017CC48);
  uint64_t v44 = v55;
  uint64_t v45 = (uint64_t)v67;
  uint64_t v46 = v69;
  sub_10004C7E0(v55, (uint64_t)v67, (uint64_t (*)(void))v69);
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v56;
  sub_10004B9D4(v45, v47 + v56);
  uint64_t v49 = v61;
  sub_10002A580(v41, v61, &qword_10017CC50);
  uint64_t v50 = (uint64_t (**)())(v49 + *(int *)(v62 + 36));
  *uint64_t v50 = sub_10004BB0C;
  v50[1] = (uint64_t (*)())v47;
  v50[2] = 0;
  v50[3] = 0;
  sub_10002A840(v41, &qword_10017CC50);
  BOOL v70 = sub_100047280();
  sub_10004C7E0(v44, v45, (uint64_t (*)(void))v46);
  uint64_t v51 = swift_allocObject();
  sub_10004B9D4(v45, v51 + v48);
  sub_10004BBE8();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  return sub_10002A840(v49, &qword_10017CC58);
}

uint64_t sub_100047B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v235 = a2;
  uint64_t v3 = type metadata accessor for AccessibilityTraits();
  uint64_t v218 = *(void *)(v3 - 8);
  uint64_t v219 = v3;
  __chkstk_darwin(v3);
  v217 = (char *)v181 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = type metadata accessor for OpacityTransition();
  uint64_t v213 = *(void *)(v215 - 8);
  uint64_t v5 = __chkstk_darwin(v215);
  v211 = (char *)v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v212 = (char *)v181 - v7;
  uint64_t v8 = sub_100029F90(&qword_10017CC90);
  __chkstk_darwin(v8 - 8);
  v216 = (char *)v181 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100029F90(&qword_10017CC98);
  uint64_t v231 = *(void *)(v10 - 8);
  uint64_t v232 = v10;
  __chkstk_darwin(v10);
  uint64_t v214 = (uint64_t)v181 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100029F90(&qword_10017CCA0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  v234 = (char *)v181 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v233 = (uint64_t)v181 - v15;
  uint64_t v196 = type metadata accessor for EmergencyDialerView();
  __chkstk_darwin(v196);
  v197 = (char *)v181 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = sub_100029F90(&qword_10017CCA8);
  __chkstk_darwin(v195);
  v208 = (char *)v181 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v199 = sub_100029F90(&qword_10017CCB0);
  __chkstk_darwin(v199);
  uint64_t v200 = (uint64_t)v181 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100029F90(&qword_10017CCB8);
  uint64_t v221 = *(void *)(v19 - 8);
  uint64_t v222 = v19;
  __chkstk_darwin(v19);
  uint64_t v198 = (uint64_t)v181 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100029F90(&qword_10017CCC0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  v209 = (char *)v181 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v236 = (uint64_t)v181 - v24;
  uint64_t v25 = type metadata accessor for MoveTransition();
  uint64_t v225 = *(void *)(v25 - 8);
  uint64_t v226 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  v223 = (char *)v181 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v224 = (char *)v181 - v28;
  uint64_t v29 = sub_100029F90(&qword_10017CCC8);
  __chkstk_darwin(v29 - 8);
  v194 = (char *)v181 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100029F90(&qword_10017CCD0);
  uint64_t v206 = *(void *)(v31 - 8);
  uint64_t v207 = v31;
  __chkstk_darwin(v31);
  uint64_t v193 = (uint64_t)v181 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100029F90(&qword_10017CCD8);
  uint64_t v34 = __chkstk_darwin(v33 - 8);
  uint64_t v229 = (uint64_t)v181 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v237 = (uint64_t)v181 - v36;
  uint64_t v37 = type metadata accessor for AdminSceneView();
  uint64_t v220 = *(void *)(v37 - 8);
  uint64_t v38 = *(void *)(v220 + 64);
  uint64_t v39 = __chkstk_darwin(v37 - 8);
  uint64_t v204 = (uint64_t)v181 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v203 = (uint64_t)v181 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v202 = (uint64_t)v181 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v210 = (uint64_t)v181 - v45;
  __chkstk_darwin(v44);
  uint64_t v227 = (uint64_t)v181 - v46;
  uint64_t v47 = sub_100029F90(&qword_10017CCE0);
  __chkstk_darwin(v47 - 8);
  v205 = (char *)v181 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100029F90(&qword_10017CCE8);
  uint64_t v50 = __chkstk_darwin(v49 - 8);
  Swift::String v52 = (char *)v181 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __chkstk_darwin(v50);
  uint64_t v55 = (char *)v181 - v54;
  __chkstk_darwin(v53);
  uint64_t v57 = (char *)v181 - v56;
  uint64_t v58 = sub_100029F90(&qword_10017CCF0);
  uint64_t v59 = __chkstk_darwin(v58 - 8);
  uint64_t v239 = (uint64_t)v181 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v59);
  uint64_t v62 = (char *)v181 - v61;
  uint64_t v63 = *(void *)(a1 + 144);
  LOBYTE(v257) = *(unsigned char *)(a1 + 136);
  *((void *)&v257 + 1) = v63;
  uint64_t v64 = sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.getter();
  int v230 = v243;
  uint64_t v65 = *(void *)(a1 + 48);
  LOBYTE(v257) = *(unsigned char *)(a1 + 40);
  *((void *)&v257 + 1) = v65;
  State.wrappedValue.getter();
  v238 = v62;
  if (v243 != 1)
  {
    uint64_t v77 = sub_100029F90(&qword_10017CCF8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v62, 1, 1, v77);
    int v78 = v230;
    uint64_t v79 = v235;
    goto LABEL_20;
  }
  v192 = v55;
  v228 = v57;
  v183 = v52;
  uint64_t v66 = a1;
  unint64_t v67 = *(void *)(a1 + 80);
  LOBYTE(v243) = *(unsigned char *)(a1 + 72);
  unint64_t v244 = v67;
  State.projectedValue.getter();
  uint64_t v191 = *((void *)&v257 + 1);
  uint64_t v201 = v257;
  LODWORD(v190) = v258;
  unint64_t v68 = *(void *)(a1 + 128);
  LOBYTE(v243) = *(unsigned char *)(a1 + 120);
  unint64_t v244 = v68;
  State.projectedValue.getter();
  uint64_t v188 = *((void *)&v257 + 1);
  uint64_t v189 = v257;
  LODWORD(v187) = v258;
  unint64_t v69 = *(void *)(a1 + 64);
  LOBYTE(v243) = *(unsigned char *)(a1 + 56);
  unint64_t v244 = v69;
  State.projectedValue.getter();
  uint64_t v185 = *((void *)&v257 + 1);
  uint64_t v186 = v257;
  int v184 = v258;
  uint64_t v70 = v227;
  sub_10004C7E0(a1, v227, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  uint64_t v71 = *(unsigned __int8 *)(v220 + 80);
  uint64_t v72 = (v71 + 16) & ~v71;
  v181[0] = v71 | 7;
  v181[1] = v72 + v38;
  uint64_t v73 = swift_allocObject();
  uint64_t v182 = v72;
  sub_10004B9D4(v70, v73 + v72);
  uint64_t v266 = v201;
  uint64_t v267 = v191;
  char v268 = v190;
  uint64_t v269 = v189;
  uint64_t v270 = v188;
  char v271 = v187;
  uint64_t v272 = v186;
  uint64_t v273 = v185;
  char v274 = v184;
  v275 = sub_10004C2F8;
  uint64_t v276 = v73;
  uint64_t v277 = 0;
  uint64_t v74 = *(void *)(a1 + 64);
  LOBYTE(v257) = *(unsigned char *)(a1 + 56);
  *((void *)&v257 + 1) = v74;
  State.wrappedValue.getter();
  LODWORD(v73) = v243;
  uint64_t v75 = v210;
  sub_10004C7E0(a1, v210, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  uint64_t v201 = a1;
  uint64_t v220 = v64;
  if (v73 == 1)
  {
    sub_10004C848(v75, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
    uint64_t v76 = v202;
    sub_10004C7E0(a1, v202, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
LABEL_6:
    sub_10004C848(v76, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
    uint64_t v82 = v203;
    sub_10004C7E0(v66, v203, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
    uint64_t v83 = (uint64_t)v205;
    goto LABEL_7;
  }
  uint64_t v80 = *(void *)(v75 + 128);
  LOBYTE(v257) = *(unsigned char *)(v75 + 120);
  *((void *)&v257 + 1) = v80;
  State.wrappedValue.getter();
  sub_10004C848(v75, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  int v81 = v243;
  uint64_t v76 = v202;
  sub_10004C7E0(v66, v202, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  if (v81 == 1) {
    goto LABEL_6;
  }
  uint64_t v176 = *(void *)(v76 + 80);
  LOBYTE(v257) = *(unsigned char *)(v76 + 72);
  *((void *)&v257 + 1) = v176;
  State.wrappedValue.getter();
  sub_10004C848(v76, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  int v177 = v243;
  uint64_t v82 = v203;
  sub_10004C7E0(v66, v203, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  uint64_t v83 = (uint64_t)v205;
  if (v177 != 1)
  {
    uint64_t v178 = *(void *)(v82 + 112);
    LOBYTE(v257) = *(unsigned char *)(v82 + 104);
    *((void *)&v257 + 1) = v178;
    State.wrappedValue.getter();
    sub_10004C848(v82, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
    char v179 = v243;
    uint64_t v84 = v204;
    sub_10004C7E0(v66, v204, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
    if ((v179 & 1) == 0)
    {
      type metadata accessor for ObservableThermalController();
      sub_10004C774(&qword_10017CC78, (void (*)(uint64_t))type metadata accessor for ObservableThermalController);
      v180 = (void *)StateObject.wrappedValue.getter();
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
    }
    uint64_t v85 = v201;
    goto LABEL_8;
  }
LABEL_7:
  sub_10004C848(v82, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  uint64_t v84 = v204;
  sub_10004C7E0(v66, v204, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  uint64_t v85 = v66;
LABEL_8:
  sub_10004C848(v84, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  sub_100029F90(&qword_10017CD38);
  sub_10004C310();
  View.accessibilityHidden(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v86 = (uint64_t)v192;
  sub_10002A580(v83, (uint64_t)v192, &qword_10017CCE0);
  sub_10002A840(v83, &qword_10017CCE0);
  sub_100036F84(v86, (uint64_t)v228, &qword_10017CCE8);
  uint64_t v87 = *(void *)(v85 + 64);
  LOBYTE(v257) = *(unsigned char *)(v85 + 56);
  *((void *)&v257 + 1) = v87;
  State.wrappedValue.getter();
  uint64_t v88 = v85;
  if (v243 == 1)
  {
    uint64_t v89 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v91 = v90;
    char v93 = v92;
    uint64_t v95 = v94;
    uint64_t v96 = v85;
    uint64_t v97 = v227;
    sub_10004C7E0(v96, v227, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
    uint64_t v98 = swift_allocObject();
    sub_10004B9D4(v97, v98 + v182);
    sub_100089E9C(v89, v91, v93 & 1, v95, 1, 0, 0, (uint64_t)sub_10004C8AC, (uint64_t)&v278, v98);
    uint64_t v99 = v279;
    uint64_t v210 = v280;
    uint64_t v100 = v282;
    uint64_t v191 = v281;
    v192 = (char *)v278;
    LODWORD(v186) = v283;
    uint64_t v101 = v284;
    char v102 = v285;
    uint64_t v103 = v287;
    uint64_t v204 = v287;
    v205 = v279;
    uint64_t v189 = v288;
    uint64_t v190 = v286;
    uint64_t v187 = v284;
    uint64_t v188 = v289;
    uint64_t v202 = v290;
    uint64_t v203 = v282;
    long long v104 = v224;
    MoveTransition.init(edge:)();
    uint64_t v105 = v225;
    uint64_t v106 = v226;
    (*(void (**)(char *, char *, uint64_t))(v225 + 16))(v223, v104, v226);
    sub_10004C774(&qword_10017C370, (void (*)(uint64_t))&type metadata accessor for MoveTransition);
    uint64_t v107 = AnyTransition.init<A>(_:)();
    LOBYTE(v241[0]) = v186;
    v240[0] = v102;
    (*(void (**)(char *, uint64_t))(v105 + 8))(v104, v106);
    *(void *)&long long v257 = v192;
    *((void *)&v257 + 1) = v99;
    *(void *)&long long v258 = v210;
    *((void *)&v258 + 1) = v191;
    *(void *)&long long v259 = v100;
    BYTE8(v259) = v241[0];
    *(void *)&long long v260 = v101;
    BYTE8(v260) = v240[0];
    *(void *)&long long v261 = v190;
    *((void *)&v261 + 1) = v103;
    *(void *)&long long v262 = v189;
    *((void *)&v262 + 1) = v188;
    uint64_t v88 = v201;
    *(void *)&long long v263 = v202;
    *((void *)&v263 + 1) = 0x3FF0000000000000;
    *(void *)&long long v264 = v107;
    unint64_t v108 = *(void *)(v201 + 112);
    LOBYTE(v243) = *(unsigned char *)(v201 + 104);
    unint64_t v244 = v108;
    State.wrappedValue.getter();
    sub_100029F90(&qword_10017CD68);
    sub_10004C8C4(&qword_10017CD70, &qword_10017CD68, (void (*)(void))sub_10004C968);
    uint64_t v109 = (uint64_t)v194;
    View.accessibilityHidden(_:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v110 = v193;
    sub_10002A580(v109, v193, &qword_10017CCC8);
    sub_10002A840(v109, &qword_10017CCC8);
    uint64_t v111 = v237;
    sub_100036F84(v110, v237, &qword_10017CCD0);
    uint64_t v112 = 0;
  }
  else
  {
    uint64_t v112 = 1;
    uint64_t v111 = v237;
  }
  uint64_t v114 = v221;
  uint64_t v113 = v222;
  uint64_t v115 = (uint64_t)v208;
  uint64_t v116 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v206 + 56))(v111, v112, 1, v207);
  uint64_t v117 = *(void *)(v88 + 128);
  LOBYTE(v257) = *(unsigned char *)(v88 + 120);
  *((void *)&v257 + 1) = v117;
  State.wrappedValue.getter();
  if (v243 == 1)
  {
    type metadata accessor for EmergencyModel();
    sub_10004C774(&qword_10017CD60, (void (*)(uint64_t))type metadata accessor for EmergencyModel);
    uint64_t v118 = StateObject.wrappedValue.getter();
    uint64_t v119 = v227;
    sub_10004C7E0(v88, v227, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
    uint64_t v120 = swift_allocObject();
    sub_10004B9D4(v119, v120 + v182);
    uint64_t v243 = 0;
    unint64_t v244 = 0xE000000000000000;
    State.init(wrappedValue:)();
    uint64_t v121 = v258;
    uint64_t v122 = (uint64_t)v197;
    *(_OWORD *)(v197 + 24) = v257;
    *(void *)(v122 + 40) = v121;
    LOBYTE(v243) = 0;
    State.init(wrappedValue:)();
    uint64_t v123 = *((void *)&v257 + 1);
    *(unsigned char *)(v122 + 48) = v257;
    *(void *)(v122 + 56) = v123;
    uint64_t v124 = (int *)v196;
    AccessibilityFocusState.init<>()();
    *(void *)(v122 + v124[9]) = 0x4034000000000000;
    *(void *)(v122 + v124[10]) = 0x4040000000000000;
    uint64_t v125 = v124[11];
    *(void *)(v122 + v125) = [self lockScreenConfiguration];
    *(void *)uint64_t v122 = sub_10004C7D8;
    *(void *)(v122 + 8) = v118;
    *(unsigned char *)(v122 + 16) = 0;
    BOOL v126 = (uint64_t (**)())(v122 + v124[8]);
    *BOOL v126 = sub_10004C7C0;
    v126[1] = (uint64_t (*)())v120;
    sub_10004C7E0(v122, v115, (uint64_t (*)(void))type metadata accessor for EmergencyDialerView);
    *(void *)(v115 + *(int *)(v195 + 36)) = 0x3FF0000000000000;
    sub_10004C848(v122, (uint64_t (*)(void))type metadata accessor for EmergencyDialerView);
    uint64_t v127 = v115;
    uint64_t v128 = v224;
    MoveTransition.init(edge:)();
    uint64_t v130 = v225;
    uint64_t v129 = v226;
    (*(void (**)(char *, char *, uint64_t))(v225 + 16))(v223, v128, v226);
    sub_10004C774(&qword_10017C370, (void (*)(uint64_t))&type metadata accessor for MoveTransition);
    uint64_t v131 = AnyTransition.init<A>(_:)();
    uint64_t v132 = v200;
    sub_10002A580(v127, v200, &qword_10017CCA8);
    *(void *)(v132 + *(int *)(v199 + 36)) = v131;
    uint64_t v133 = *(void (**)(char *, uint64_t))(v130 + 8);
    uint64_t v134 = v129;
    uint64_t v114 = v221;
    uint64_t v113 = v222;
    v133(v128, v134);
    sub_10002A840(v127, &qword_10017CCA8);
    uint64_t v135 = v198;
    sub_10002A580(v132, v198, &qword_10017CCB0);
    sub_10002A840(v132, &qword_10017CCB0);
    sub_100036F84(v135, v236, &qword_10017CCB8);
    uint64_t v116 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56))(v236, v116, 1, v113);
  uint64_t v136 = *(void *)(v88 + 80);
  LOBYTE(v257) = *(unsigned char *)(v88 + 72);
  *((void *)&v257 + 1) = v136;
  State.wrappedValue.getter();
  if (v243 == 1)
  {
    uint64_t v227 = static Alignment.center.getter();
    unint64_t v138 = v137;
    sub_100049C68(v88, (uint64_t)v241);
    uint64_t v139 = v224;
    MoveTransition.init(edge:)();
    uint64_t v140 = v225;
    uint64_t v141 = v226;
    (*(void (**)(char *, char *, uint64_t))(v225 + 16))(v223, v139, v226);
    sub_10004C774(&qword_10017C370, (void (*)(uint64_t))&type metadata accessor for MoveTransition);
    uint64_t v142 = AnyTransition.init<A>(_:)();
    long long v262 = v241[5];
    long long v263 = v241[6];
    long long v264 = v241[7];
    char v265 = v242;
    long long v259 = v241[2];
    long long v260 = v241[3];
    long long v261 = v241[4];
    long long v257 = v241[0];
    long long v258 = v241[1];
    (*(void (**)(char *, uint64_t))(v140 + 8))(v139, v141);
    long long v251 = v263;
    long long v252 = v264;
    char v253 = v265;
    long long v247 = v259;
    long long v248 = v260;
    long long v249 = v261;
    long long v250 = v262;
    long long v245 = v257;
    long long v246 = v258;
    *(_DWORD *)v254 = *(_DWORD *)v240;
    *(_DWORD *)&v254[3] = *(_DWORD *)&v240[3];
    uint64_t v243 = v227;
    unint64_t v244 = v138;
    uint64_t v255 = v142;
    uint64_t v256 = 0x3FF0000000000000;
    nullsub_4(&v243);
    sub_100036F84((uint64_t)&v243, (uint64_t)&v257, &qword_10017CD50);
    uint64_t v143 = (uint64_t)v209;
  }
  else
  {
    sub_10004C404((uint64_t)&v243);
    sub_100036F84((uint64_t)&v243, (uint64_t)&v257, &qword_10017CD50);
    uint64_t v143 = (uint64_t)v209;
    uint64_t v141 = v226;
  }
  unint64_t v144 = *(void *)(v88 + 112);
  LOBYTE(v243) = *(unsigned char *)(v88 + 104);
  unint64_t v244 = v144;
  State.wrappedValue.getter();
  if (LOBYTE(v241[0]) == 1)
  {
    uint64_t v145 = v224;
    MoveTransition.init(edge:)();
    uint64_t v146 = v225;
    (*(void (**)(char *, char *, uint64_t))(v225 + 16))(v223, v145, v141);
    sub_10004C774(&qword_10017C370, (void (*)(uint64_t))&type metadata accessor for MoveTransition);
    uint64_t v147 = AnyTransition.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v146 + 8))(v145, v141);
    uint64_t v227 = 0x4000000000000000;
  }
  else
  {
    uint64_t v227 = 0;
    uint64_t v147 = 0;
  }
  uint64_t v148 = v229;
  uint64_t v149 = (uint64_t)v183;
  uint64_t v150 = v237;
  sub_10002A580((uint64_t)v228, (uint64_t)v183, &qword_10017CCE8);
  sub_10002A580(v150, v148, &qword_10017CCD8);
  uint64_t v151 = v236;
  sub_10002A580(v236, v143, &qword_10017CCC0);
  sub_100036F84((uint64_t)&v257, (uint64_t)v240, &qword_10017CD50);
  uint64_t v152 = v239;
  sub_10002A580(v149, v239, &qword_10017CCE8);
  uint64_t v153 = (int *)sub_100029F90(&qword_10017CD58);
  sub_10002A580(v148, v152 + v153[12], &qword_10017CCD8);
  sub_10002A580(v143, v152 + v153[16], &qword_10017CCC0);
  uint64_t v154 = v152 + v153[20];
  sub_100036F84((uint64_t)v240, (uint64_t)v241, &qword_10017CD50);
  sub_100036F84((uint64_t)v241, v154, &qword_10017CD50);
  v155 = (void *)(v152 + v153[24]);
  void *v155 = v227;
  v155[1] = v147;
  sub_10004C598(v241, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10004C424);
  swift_retain();
  sub_10002A840(v151, &qword_10017CCC0);
  sub_10002A840(v237, &qword_10017CCD8);
  sub_10002A840((uint64_t)v228, &qword_10017CCE8);
  swift_release();
  sub_100036F84((uint64_t)v240, (uint64_t)&v243, &qword_10017CD50);
  sub_10004C598(&v243, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10004C604);
  sub_10002A840(v143, &qword_10017CCC0);
  sub_10002A840(v229, &qword_10017CCD8);
  sub_10002A840(v149, &qword_10017CCE8);
  uint64_t v156 = sub_100029F90(&qword_10017CCF8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56))(v152, 0, 1, v156);
  sub_100036F84(v152, (uint64_t)v238, &qword_10017CCF0);
  uint64_t v79 = v235;
  int v78 = v230;
LABEL_20:
  type metadata accessor for ObservableThermalController();
  sub_10004C774(&qword_10017CC78, (void (*)(uint64_t))type metadata accessor for ObservableThermalController);
  uint64_t v157 = (void *)StateObject.wrappedValue.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  int v158 = v257;

  if (v158 == 5)
  {
    uint64_t v159 = (void *)StateObject.wrappedValue.getter();
    BOOL v160 = sub_1000AF3B0();

    uint64_t v161 = v212;
    OpacityTransition.init()();
    uint64_t v162 = v213;
    uint64_t v163 = v215;
    (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v211, v161, v215);
    sub_10004C774(&qword_10017CD08, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
    uint64_t v164 = AnyTransition.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v163);
    LOBYTE(v257) = v160;
    *((void *)&v257 + 1) = 0x4008000000000000;
    *(void *)&long long v258 = v164;
    uint64_t v165 = v217;
    static AccessibilityTraits.isModal.getter();
    sub_100029F90(&qword_10017CD10);
    sub_10004C8C4(&qword_10017CD18, &qword_10017CD10, (void (*)(void))sub_10004C200);
    uint64_t v166 = (uint64_t)v216;
    View.accessibilityAddTraits(_:)();
    (*(void (**)(char *, uint64_t))(v218 + 8))(v165, v219);
    swift_release();
    uint64_t v167 = v214;
    sub_10002A580(v166, v214, &qword_10017CC90);
    sub_10002A840(v166, &qword_10017CC90);
    uint64_t v168 = v233;
    sub_100036F84(v167, v233, &qword_10017CC98);
    uint64_t v169 = 0;
  }
  else
  {
    uint64_t v169 = 1;
    uint64_t v168 = v233;
  }
  uint64_t v170 = (uint64_t)v234;
  uint64_t v171 = (uint64_t)v238;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v231 + 56))(v168, v169, 1, v232);
  if (v78) {
    unint64_t v172 = 0xBFF0000000000000;
  }
  else {
    unint64_t v172 = 0;
  }
  uint64_t v173 = v239;
  sub_10002A580(v171, v239, &qword_10017CCF0);
  sub_10002A580(v168, v170, &qword_10017CCA0);
  *(void *)uint64_t v79 = v172;
  *(unsigned char *)(v79 + 8) = v78 ^ 1;
  uint64_t v174 = sub_100029F90(&qword_10017CD00);
  sub_10002A580(v173, v79 + *(int *)(v174 + 48), &qword_10017CCF0);
  sub_10002A580(v170, v79 + *(int *)(v174 + 64), &qword_10017CCA0);
  sub_10002A840(v168, &qword_10017CCA0);
  sub_10002A840(v171, &qword_10017CCF0);
  sub_10002A840(v170, &qword_10017CCA0);
  return sub_10002A840(v173, &qword_10017CCF0);
}

uint64_t sub_10004983C(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = v4;
    uint64_t v16 = a2;
    uint64_t v17 = v15;
    *(_DWORD *)uint64_t v15 = 67109120;
    int v22 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Passcode entered. Success: %{BOOL}d", v17, 8u);
    a2 = v16;
    uint64_t v4 = v21;
    swift_slowDealloc();
  }

  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  __chkstk_darwin(v18);
  *((unsigned char *)&v20 - 16) = a1 & 1;
  *(&v20 - 1) = a2;
  *(unsigned char *)(swift_allocObject() + 16) = a1 & 1;
  static Animation.default.getter();
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100049B30()
{
  return State.wrappedValue.setter();
}

void sub_100049BAC(char a1)
{
  if (a1)
  {
    _AXFeatureSupportsNonSightedUsage();
    v2[4] = sub_10007A22C;
    v2[5] = 0;
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 1107296256;
    v2[2] = sub_100033424;
    v2[3] = &unk_10015EAA8;
    uint64_t v1 = _Block_copy(v2);
    AXPerformBlockOnMainThreadAfterDelay();
    _Block_release(v1);
  }
}

__n128 sub_100049C68@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AdminSceneView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 96);
  LOBYTE(v59) = *(unsigned char *)(a1 + 88);
  *((void *)&v59 + 1) = v8;
  sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.getter();
  if (v34 == 1)
  {
    sub_10004C7E0(a1, (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for AdminSceneView);
    unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v10 = swift_allocObject();
    sub_10004B9D4((uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9);
    LOBYTE(v34) = 0;
    State.init(wrappedValue:)();
    LOBYTE(v9) = v59;
    uint64_t v11 = *((void *)&v59 + 1);
    LOBYTE(v34) = 0;
    State.init(wrappedValue:)();
    char v12 = v59;
    uint64_t v13 = *((void *)&v59 + 1);
    static Color.white.getter();
    uint64_t v14 = Color.opacity(_:)();
    swift_release();
    uint64_t v34 = sub_10004CEBC;
    uint64_t v35 = v10;
    char v36 = v9;
    uint64_t v38 = v11;
    LOBYTE(v39) = v12;
    *(void *)&long long v40 = v13;
    *((void *)&v40 + 1) = v14;
    sub_10004CED4((uint64_t)&v34);
  }
  else
  {
    uint64_t v28 = static HorizontalAlignment.center.getter();
    uint64_t v15 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v17 = v16;
    char v19 = v18;
    uint64_t v27 = v20;
    sub_10004C7E0(a1, (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for AdminSceneView);
    unint64_t v21 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v22 = swift_allocObject();
    sub_10004B9D4((uint64_t)v7, v22 + v21);
    sub_100089E9C(v15, v17, v19 & 1, v27, 0, 0, 0, (uint64_t)sub_10004CAF8, (uint64_t)v50, v22);
    char v33 = 1;
    *(_DWORD *)uint64_t v37 = *(_DWORD *)v32;
    *(_DWORD *)&v37[3] = *(_DWORD *)&v32[3];
    *(_DWORD *)uint64_t v43 = *(_DWORD *)v31;
    *(_DWORD *)&v43[3] = *(_DWORD *)&v31[3];
    *(_DWORD *)&v46[3] = *(_DWORD *)&v30[3];
    *(_DWORD *)uint64_t v46 = *(_DWORD *)v30;
    uint64_t v34 = (uint64_t (*)())v28;
    uint64_t v35 = 0;
    char v36 = 1;
    uint64_t v38 = v50[0];
    uint64_t v39 = v50[1];
    long long v40 = v51;
    uint64_t v41 = v52;
    char v42 = v53;
    uint64_t v44 = v54;
    char v45 = v55;
    long long v47 = v56;
    long long v48 = v57;
    uint64_t v49 = v58;
    sub_10004CB94((uint64_t)&v34);
  }
  sub_100036F84((uint64_t)&v34, (uint64_t)&v29, &qword_10017CD90);
  sub_100029F90(&qword_10017CD98);
  sub_100029F90(&qword_10017CDA0);
  sub_10004CBA0();
  sub_10004CCC4();
  _ConditionalContent<>.init(storage:)();
  long long v23 = v66;
  *(_OWORD *)(a2 + 96) = v65;
  *(_OWORD *)(a2 + 112) = v23;
  *(unsigned char *)(a2 + 128) = v67;
  long long v24 = v62;
  *(_OWORD *)(a2 + 32) = v61;
  *(_OWORD *)(a2 + 48) = v24;
  long long v25 = v64;
  *(_OWORD *)(a2 + 64) = v63;
  *(_OWORD *)(a2 + 80) = v25;
  __n128 result = v60;
  *(_OWORD *)a2 = v59;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_10004A01C()
{
  return sub_10004742C();
}

uint64_t sub_10004A08C()
{
  return swift_release();
}

uint64_t sub_10004A0FC(char a1)
{
  if (a1)
  {
    sub_100029F90(&qword_10017B8A8);
    State.wrappedValue.setter();
    return sub_10004742C();
  }
  else
  {
    sub_100029F90(&qword_10017B8A8);
    return State.wrappedValue.setter();
  }
}

void sub_10004A1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AdminSceneView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Showing admin view.", v13, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v14 = [self sharedPresentationController];
  sub_10004C7E0(a2, (uint64_t)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  unint64_t v15 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = swift_allocObject();
  sub_10004B9D4((uint64_t)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  aBlock[4] = sub_10004C150;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100033424;
  aBlock[3] = &unk_10015E9E0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  [v14 dismissSiri:1 completion:v17];
  _Block_release(v17);
}

uint64_t sub_10004A484()
{
  return swift_release();
}

uint64_t sub_10004A4E4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10004A5E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AdminSceneView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033980();
  id v9 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  [v9 setShouldShowTripleClickInstructions:0];

  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  sub_10004C7E0(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for AdminSceneView);
  type metadata accessor for MainActor();
  uint64_t v11 = static MainActor.shared.getter();
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = &protocol witness table for MainActor;
  sub_10004B9D4((uint64_t)v5, v13 + v12);
  sub_1000ABB38((uint64_t)v8, (uint64_t)&unk_10017CC88, v13);
  return swift_release();
}

uint64_t sub_10004A7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  type metadata accessor for MainActor();
  v4[3] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[4] = v6;
  v4[5] = v5;
  return _swift_task_switch(sub_10004A870, v6, v5);
}

uint64_t sub_10004A870(unint64_t a1)
{
  double v2 = *(double *)(*(void *)(v1 + 16) + 152);
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= 1.84467441e19)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!is_mul_ok((unint64_t)v2, 0x3B9ACA00uLL))
  {
LABEL_11:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(a1);
  }
  unint64_t v3 = 1000000000 * (unint64_t)v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v4;
  void *v4 = v1;
  v4[1] = sub_10004A964;
  a1 = v3;
  return static Task<>.sleep(nanoseconds:)(a1);
}

uint64_t sub_10004A964()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v5 = sub_10004AB60;
  }
  else {
    uint64_t v5 = sub_10004AAA0;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10004AAA0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  *(void *)(swift_task_alloc() + 16) = v1;
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10004AB60()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10004ABC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  State.init(wrappedValue:)();
  *(unsigned char *)(a8 + 40) = v13;
  *(void *)(a8 + 48) = v14;
  State.init(wrappedValue:)();
  *(unsigned char *)(a8 + 56) = v13;
  *(void *)(a8 + 64) = v14;
  State.init(wrappedValue:)();
  *(unsigned char *)(a8 + 72) = v13;
  *(void *)(a8 + 80) = v14;
  State.init(wrappedValue:)();
  *(unsigned char *)(a8 + 88) = v13;
  *(void *)(a8 + 96) = v14;
  State.init(wrappedValue:)();
  *(unsigned char *)(a8 + 104) = v13;
  *(void *)(a8 + 112) = v14;
  State.init(wrappedValue:)();
  *(unsigned char *)(a8 + 120) = v13;
  *(void *)(a8 + 128) = v14;
  sub_100033980();
  id v11 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  [v11 shouldShowTripleClickInstructions];

  State.init(wrappedValue:)();
  *(unsigned char *)(a8 + 136) = v13;
  *(void *)(a8 + 144) = v14;
  *(void *)(a8 + 152) = 0x4008000000000000;
  *(void *)(a8 + 160) = a6;
  *(void *)(a8 + 168) = a7;
  *(unsigned char *)(a8 + 176) = 0;
  *(void *)(a8 + 184) = sub_1000370B8;
  *(void *)(a8 + 192) = 0;
  *(unsigned char *)(a8 + 200) = 0;
  type metadata accessor for AdminSceneView();
  id v12 = [self defaultCenter];
  NSNotificationCenter.publisher(for:object:)();
}

uint64_t type metadata accessor for AdminSceneView()
{
  uint64_t result = qword_10017CBD0;
  if (!qword_10017CBD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10004AE0C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    uint64_t v7 = a2[4];
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = v7;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    *(void *)(a1 + 64) = a2[8];
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    *(void *)(a1 + 80) = a2[10];
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    *(void *)(a1 + 96) = a2[12];
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    *(void *)(a1 + 112) = a2[14];
    *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
    *(void *)(a1 + 128) = a2[16];
    *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
    uint64_t v8 = a2[19];
    *(void *)(a1 + 144) = a2[18];
    *(void *)(a1 + 152) = v8;
    char v18 = (void *)a2[21];
    uint64_t v19 = a2[20];
    char v17 = *((unsigned char *)a2 + 176);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10003A608(v19, v18, v17);
    *(void *)(a1 + 160) = v19;
    *(void *)(a1 + 168) = v18;
    *(unsigned char *)(a1 + 176) = v17;
    uint64_t v9 = a2[23];
    uint64_t v10 = a2[24];
    char v11 = *((unsigned char *)a2 + 200);
    sub_10003A618();
    *(void *)(a1 + 184) = v9;
    *(void *)(a1 + 192) = v10;
    *(unsigned char *)(a1 + 200) = v11;
    uint64_t v12 = *(int *)(a3 + 68);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for NSNotificationCenter.Publisher();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_10004B02C(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10003A734(*(void *)(a1 + 160), *(void *)(a1 + 168), *(unsigned char *)(a1 + 176));
  sub_10003A744();
  uint64_t v4 = a1 + *(int *)(a2 + 68);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_10004B104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v7;
  char v17 = *(void **)(a2 + 168);
  uint64_t v18 = *(void *)(a2 + 160);
  char v16 = *(unsigned char *)(a2 + 176);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10003A608(v18, v17, v16);
  *(void *)(a1 + 160) = v18;
  *(void *)(a1 + 168) = v17;
  *(unsigned char *)(a1 + 176) = v16;
  uint64_t v8 = *(void *)(a2 + 184);
  uint64_t v9 = *(void *)(a2 + 192);
  char v10 = *(unsigned char *)(a2 + 200);
  sub_10003A618();
  *(void *)(a1 + 184) = v8;
  *(void *)(a1 + 192) = v9;
  *(unsigned char *)(a1 + 200) = v10;
  uint64_t v11 = *(int *)(a3 + 68);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_10004B2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v8 = *(void *)(a2 + 160);
  uint64_t v9 = *(void **)(a2 + 168);
  char v10 = *(unsigned char *)(a2 + 176);
  sub_10003A608(v8, v9, v10);
  uint64_t v11 = *(void *)(a1 + 160);
  uint64_t v12 = *(void *)(a1 + 168);
  char v13 = *(unsigned char *)(a1 + 176);
  *(void *)(a1 + 160) = v8;
  *(void *)(a1 + 168) = v9;
  *(unsigned char *)(a1 + 176) = v10;
  sub_10003A734(v11, v12, v13);
  uint64_t v14 = *(void *)(a2 + 184);
  uint64_t v15 = *(void *)(a2 + 192);
  char v16 = *(unsigned char *)(a2 + 200);
  sub_10003A618();
  *(void *)(a1 + 184) = v14;
  *(void *)(a1 + 192) = v15;
  *(unsigned char *)(a1 + 200) = v16;
  sub_10003A744();
  uint64_t v17 = *(int *)(a3 + 68);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

uint64_t sub_10004B4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v6 = *(int *)(a3 + 68);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_10004B5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  char v6 = *(unsigned char *)(a2 + 176);
  uint64_t v7 = *(void *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 168);
  char v9 = *(unsigned char *)(a1 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = v6;
  sub_10003A734(v7, v8, v9);
  char v10 = *(unsigned char *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(unsigned char *)(a1 + 200) = v10;
  sub_10003A744();
  uint64_t v11 = *(int *)(a3 + 68);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_10004B754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004B768);
}

uint64_t sub_10004B768(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for NSNotificationCenter.Publisher();
    char v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 68);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10004B818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004B82C);
}

void *sub_10004B82C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  long long v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 68);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10004B8D4()
{
  uint64_t result = type metadata accessor for NSNotificationCenter.Publisher();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10004B9B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10004B9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AdminSceneView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10004BA38(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AdminSceneView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_10004A1A8(a1, v4);
}

uint64_t sub_10004BAAC()
{
  return sub_10004A4E4();
}

uint64_t sub_10004BB0C()
{
  uint64_t v1 = *(void *)(type metadata accessor for AdminSceneView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10004A5E0(v2);
}

uint64_t sub_10004BB70()
{
  uint64_t v1 = *(void *)(type metadata accessor for AdminSceneView() - 8);
  uint64_t v2 = *(uint64_t (**)(BOOL))(v0
                                      + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                                      + 8);
  BOOL v3 = sub_100047280();
  return v2(v3);
}

unint64_t sub_10004BBE8()
{
  unint64_t result = qword_10017CC68;
  if (!qword_10017CC68)
  {
    sub_10002A694(&qword_10017CC58);
    sub_10002A8D8(&qword_10017CC70, &qword_10017CC50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CC68);
  }
  return result;
}

uint64_t sub_10004BC8C()
{
  uint64_t v0 = type metadata accessor for AccessibilityNotification.ScreenChanged();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  BOOL v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v5, 0, sizeof(v5));
  AccessibilityNotification.ScreenChanged.init(_:)();
  _AccessibilityNotifications.post()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_10004BD6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100029F90(&qword_10017CDD8);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100029F90(&qword_10017CDE0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, a1, v8);
  uint64_t v9 = &v7[*(int *)(v5 + 44)];
  *(void *)uint64_t v9 = sub_10004BC88;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  sub_10002A580((uint64_t)v7, a2, &qword_10017CDD8);
  uint64_t v10 = (void *)(a2 + *(int *)(sub_100029F90(&qword_10017CDE8) + 36));
  *uint64_t v10 = 0;
  v10[1] = 0;
  _OWORD v10[2] = sub_10004BC88;
  v10[3] = 0;
  return sub_10002A840((uint64_t)v7, &qword_10017CDD8);
}

uint64_t sub_10004BEA4()
{
  uint64_t v1 = (int *)(type metadata accessor for AdminSceneView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = v2 + *(void *)(*(void *)v1 + 64);
  swift_unknownObjectRelease();
  uint64_t v4 = v0 + v2;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10003A734(*(void *)(v4 + 160), *(void *)(v4 + 168), *(unsigned char *)(v4 + 176));
  sub_10003A744();
  uint64_t v5 = v4 + v1[19];
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return _swift_deallocObject(v0, v3);
}

uint64_t sub_10004C000(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AdminSceneView() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10003CCE0;
  return sub_10004A7D8(a1, v5, v6, v7);
}

uint64_t sub_10004C0EC()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10004C150()
{
  return sub_10004C168();
}

uint64_t sub_10004C168()
{
  return sub_10004A484();
}

uint64_t sub_10004C1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004C1DC()
{
  return swift_release();
}

uint64_t sub_10004C1E4()
{
  return sub_10004CF34();
}

unint64_t sub_10004C200()
{
  unint64_t result = qword_10017CD20;
  if (!qword_10017CD20)
  {
    sub_10002A694(&qword_10017CD28);
    sub_10004C2A0();
    sub_10002A8D8(&qword_10017C348, &qword_10017C350);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CD20);
  }
  return result;
}

unint64_t sub_10004C2A0()
{
  unint64_t result = qword_10017CD30;
  if (!qword_10017CD30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CD30);
  }
  return result;
}

uint64_t sub_10004C2F8()
{
  return sub_10004C168();
}

unint64_t sub_10004C310()
{
  unint64_t result = qword_10017CD40;
  if (!qword_10017CD40)
  {
    sub_10002A694(&qword_10017CD38);
    sub_10004C3B0();
    sub_10002A8D8(&qword_10017C348, &qword_10017C350);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CD40);
  }
  return result;
}

unint64_t sub_10004C3B0()
{
  unint64_t result = qword_10017CD48;
  if (!qword_10017CD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CD48);
  }
  return result;
}

double sub_10004C404(uint64_t a1)
{
  *(void *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_10004C424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  if (a20)
  {
    sub_10004C4C8(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19 & 1);
    return swift_retain();
  }
  return result;
}

uint64_t sub_10004C4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
}

void *sub_10004C598(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20]);
  return a1;
}

uint64_t sub_10004C604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  if (a20)
  {
    sub_10004C6A8(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19 & 1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10004C6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_10004C774(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004C7C0()
{
  return sub_10004C168();
}

uint64_t sub_10004C7D8()
{
  return j__swift_retain(v0);
}

uint64_t sub_10004C7E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004C848(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10004C8AC(uint64_t a1)
{
  return sub_10004CB10(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10004983C);
}

uint64_t sub_10004C8C4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    a3();
    sub_10002A8D8(&qword_10017C398, &qword_10017C3A0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004C968()
{
  unint64_t result = qword_10017CD78;
  if (!qword_10017CD78)
  {
    sub_10002A694(&qword_10017CD80);
    sub_10004CA08();
    sub_10002A8D8(&qword_10017C348, &qword_10017C350);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CD78);
  }
  return result;
}

unint64_t sub_10004CA08()
{
  unint64_t result = qword_10017CD88;
  if (!qword_10017CD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CD88);
  }
  return result;
}

uint64_t sub_10004CA5C()
{
  return sub_100049B30();
}

uint64_t sub_10004CA7C()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_10004CA8C()
{
  sub_100049BAC(*(unsigned char *)(v0 + 16));
}

uint64_t sub_10004CA94()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10004CAF8(uint64_t a1)
{
  return sub_10004CB10(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10004A08C);
}

uint64_t sub_10004CB10(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for AdminSceneView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_10004CB94(uint64_t result)
{
  *(unsigned char *)(result + 128) = 1;
  return result;
}

unint64_t sub_10004CBA0()
{
  unint64_t result = qword_10017CDA8;
  if (!qword_10017CDA8)
  {
    sub_10002A694(&qword_10017CD98);
    sub_10004CC1C();
    sub_10004CC70();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CDA8);
  }
  return result;
}

unint64_t sub_10004CC1C()
{
  unint64_t result = qword_10017CDB0;
  if (!qword_10017CDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CDB0);
  }
  return result;
}

unint64_t sub_10004CC70()
{
  unint64_t result = qword_10017CDB8;
  if (!qword_10017CDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CDB8);
  }
  return result;
}

unint64_t sub_10004CCC4()
{
  unint64_t result = qword_10017CDC0;
  if (!qword_10017CDC0)
  {
    sub_10002A694(&qword_10017CDA0);
    sub_10002A8D8(&qword_10017CDC8, &qword_10017CDD0);
    sub_10004CC70();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CDC0);
  }
  return result;
}

uint64_t sub_10004CD68()
{
  uint64_t v1 = (int *)(type metadata accessor for AdminSceneView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = v2 + *(void *)(*(void *)v1 + 64);
  uint64_t v4 = v0 + v2;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10003A734(*(void *)(v4 + 160), *(void *)(v4 + 168), *(unsigned char *)(v4 + 176));
  sub_10003A744();
  uint64_t v5 = v4 + v1[19];
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return _swift_deallocObject(v0, v3);
}

uint64_t sub_10004CEBC()
{
  return sub_10004C168();
}

uint64_t sub_10004CED4(uint64_t result)
{
  *(unsigned char *)(result + 128) = 0;
  return result;
}

uint64_t sub_10004CEDC()
{
  return sub_10004A01C();
}

uint64_t sub_10004CEF8()
{
  return sub_10004A0FC(*(unsigned char *)(v0 + 16));
}

uint64_t sub_10004CF18()
{
  return sub_10004CF34();
}

uint64_t sub_10004CF34()
{
  return State.wrappedValue.setter();
}

ValueMetadata *type metadata accessor for AccessibilityScreenChangeModifier()
{
  return &type metadata for AccessibilityScreenChangeModifier;
}

uint64_t sub_10004CFA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10004D014()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10004D034()
{
  unint64_t result = qword_10017CDF0;
  if (!qword_10017CDF0)
  {
    sub_10002A694(&qword_10017CDE8);
    sub_10004D0B0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CDF0);
  }
  return result;
}

unint64_t sub_10004D0B0()
{
  unint64_t result = qword_10017CDF8;
  if (!qword_10017CDF8)
  {
    sub_10002A694(&qword_10017CDD8);
    sub_10002A8D8(&qword_10017CE00, &qword_10017CDE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CDF8);
  }
  return result;
}

id sub_10004D26C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AssistiveTouchPresentationManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AssistiveTouchPresentationManager()
{
  return self;
}

void sub_10004D358()
{
  sub_1000327D8(v0 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_delegate);

  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene);
}

id sub_10004D3A8()
{
  sub_10004FC74();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplicationSceneViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10004D484(void *a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v65 - v12;
  uint64_t v70 = v11;
  if (a2) {
    id v14 = [a1 application];
  }
  else {
    id v14 = a1;
  }
  uint64_t v15 = v14;
  char v16 = &v2[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source];
  uint64_t v17 = *(void **)&v2[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source];
  if (v2[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source + 8]) {
    id v18 = [v17 application];
  }
  else {
    id v18 = v17;
  }
  uint64_t v19 = v18;
  sub_10002A544(0, (unint64_t *)&qword_10017B8B8);
  char v20 = static NSObject.== infix(_:_:)();

  if (v20)
  {
    unint64_t v21 = *(void **)v16;
    if (a2)
    {
      if (!v16[8])
      {
LABEL_16:
        uint64_t v38 = Logger.common.unsafeMutableAddressor();
        uint64_t v39 = v70;
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v38, v70);
        long long v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v40, v41))
        {
          char v42 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v42 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Performing scene update for current app due to source change.", v42, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v39);
        uint64_t v43 = *(void **)v16;
        if (v16[8])
        {
          id v44 = v43;
          id v45 = [v44 application];
          id v46 = [v45 displayStyle];

          id v47 = [objc_allocWithZone((Class)CLBSceneUpdate) initWithRequest:v44 displayStyle:v46];
        }
        else
        {
          id v47 = [objc_allocWithZone((Class)CLBSceneUpdate) initWithApplication:v43];
        }

        return;
      }
    }
    else if (v16[8])
    {
      goto LABEL_16;
    }
    sub_10002A544(0, (unint64_t *)&qword_10017BDA8);
    id v35 = a1;
    id v36 = v21;
    char v37 = static NSObject.== infix(_:_:)();

    if (v37) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v22 = Logger.common.unsafeMutableAddressor();
  long long v23 = v13;
  uint64_t v24 = v7;
  long long v25 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v26 = v70;
  v25(v23, v22, v70);
  id v27 = a1;
  id v28 = v3;
  id v29 = v27;
  uint64_t v30 = (unsigned __int8 *)v28;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    os_log_t v68 = v31;
    unint64_t v69 = v23;
    uint64_t v67 = v24;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    uint64_t v72 = v66;
    *(_DWORD *)uint64_t v33 = 136315650;
    if (a2) {
      id v34 = [v29 application];
    }
    else {
      id v34 = v29;
    }
    long long v48 = v34;
    os_log_type_t v49 = v32;
    id v50 = [v34 bundleIdentifier];

    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v53 = v52;

    uint64_t v71 = sub_100050B5C(v51, v53, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    uint64_t v54 = *(void **)v16;
    if (v16[8]) {
      id v55 = [v54 application];
    }
    else {
      id v55 = v54;
    }
    long long v56 = v55;
    id v57 = [v55 bundleIdentifier];

    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v60 = v59;

    uint64_t v71 = sub_100050B5C(v58, v60, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 1024;
    int v61 = v30[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_isAppeared];

    LODWORD(v71) = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    os_log_t v62 = v68;
    _os_log_impl((void *)&_mh_execute_header, v68, v49, "Updating scene in view controller due to app change: %s => %s. Is appeared: %{BOOL}d", (uint8_t *)v33, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v70);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v26);
  }
  uint64_t v63 = OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_isAppeared;
  if (v30[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_isAppeared] == 1) {
    sub_10004E700();
  }
  sub_10004FC74();
  long long v64 = *(void **)&v30[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene];
  *(void *)&v30[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene] = 0;

  sub_10004F630();
  if (v30[v63] == 1) {
    sub_10004DF5C();
  }
  sub_10004EC10();
}

void sub_10004DAFC(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = *(double *)&v5[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets];
  double v15 = *(double *)&v5[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets + 8];
  double v16 = *(double *)&v5[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets + 16];
  double v17 = *(double *)&v5[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets + 24];
  if (v14 != a1 || v15 != a2 || v16 != a3 || v17 != a4)
  {
    uint64_t v21 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v21, v10);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 134218752;
      *(double *)aBlock = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2048;
      *(double *)aBlock = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 22) = 2048;
      *(double *)aBlock = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 32) = 2048;
      *(double *)aBlock = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Scene view controller safe area insets changed to top: %f, left: %f, bottom: %f, right: %f", (uint8_t *)v24, 0x2Au);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    long long v25 = (objc_class *)type metadata accessor for SceneViewControllerBase();
    v37.receiver = v5;
    v37.super_class = v25;
    id v26 = objc_msgSendSuper2(&v37, "view");
    if (v26)
    {
      id v27 = v26;
      self;
      objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), "setRealSafeAreaInsets:", v14, v15, v16, v17);

      id v28 = *(void **)&v5[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene];
      if (v28)
      {
        id v29 = objc_allocWithZone((Class)CLBSceneUpdate);
        id v30 = v28;
        id v31 = [v29 initWithScene:v30];
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = v5;
        aBlock[4] = sub_100050B3C;
        aBlock[5] = v32;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10004E660;
        aBlock[3] = &unk_10015EB68;
        uint64_t v33 = _Block_copy(aBlock);
        id v34 = v5;
        swift_release();
        [v31 setSettingsUpdateBlock:v33];
        _Block_release(v33);
        id v35 = [v31 performUpdate];
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void *sub_10004DEC0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene);
  id v2 = v1;
  return v1;
}

id sub_10004DEF0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source + 8)) {
    id v2 = [v1 application];
  }
  else {
    id v2 = v1;
  }
  unint64_t v3 = v2;
  id v4 = [v2 supportsClarityUI];

  return v4;
}

void sub_10004DF5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v53 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v47 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v47 - v9;
  id v11 = *(id *)&v1[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets];
  uint64_t v12 = *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets + 8];
  uint64_t v13 = *(void (**)(uint64_t, void *, void *, void *))&v1[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets
                                                                  + 16];
  double v14 = *(void **)&v1[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets + 24];
  char v15 = v1[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source + 8];
  id v16 = *(id *)&v1[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source];
  uint64_t v17 = Logger.common.unsafeMutableAddressor();
  id v18 = *(void (**)(void, void, void))(v3 + 16);
  if (v15)
  {
    v18(v8, v17, v2);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Sending scene update with request.", v21, 2u);
      swift_slowDealloc();
    }

    unint64_t v52 = *(void (**)(void, void))(v3 + 8);
    v52(v8, v2);
    id v22 = [v16 application];
    id v23 = [v22 displayStyle];

    id v24 = [objc_allocWithZone((Class)CLBSceneUpdate) initWithRequest:v16 displayStyle:v23];
  }
  else
  {
    v18(v10, v17, v2);
    long long v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Sending scene update with application.", v27, 2u);
      swift_slowDealloc();
    }

    unint64_t v52 = *(void (**)(void, void))(v3 + 8);
    v52(v10, v2);
    id v24 = [objc_allocWithZone((Class)CLBSceneUpdate) initWithApplication:v16];
  }
  id v28 = v24;

  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v1;
  unint64_t v59 = sub_100051578;
  uint64_t v60 = v29;
  id aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v56 = 1107296256;
  id v57 = sub_10004E660;
  uint64_t v58 = &unk_10015EC30;
  id v30 = _Block_copy(&aBlock);
  id v31 = v1;
  swift_release();
  [v28 setSettingsUpdateBlock:v30];
  _Block_release(v30);
  uint64_t v51 = v28;
  id v32 = [v28 performUpdate];
  uint64_t v33 = Logger.common.unsafeMutableAddressor();
  id v34 = v53;
  v18(v53, v33, v2);
  id v35 = v32;
  id v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v50 = v3;
    uint64_t v39 = v38;
    long long v40 = (void *)swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    uint64_t v49 = v2;
    uint64_t v54 = v48;
    id aBlock = (uint64_t)v35;
    *(_DWORD *)uint64_t v39 = 138412546;
    id v41 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v40 = v35;

    *(_WORD *)(v39 + 12) = 2080;
    id aBlock = (uint64_t)v11;
    uint64_t v56 = v12;
    id v57 = v13;
    uint64_t v58 = v14;
    type metadata accessor for UIEdgeInsets(0);
    uint64_t v42 = String.init<A>(describing:)();
    id aBlock = sub_100050B5C(v42, v43, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Bringing scene %@ to foreground. Safe area insets: %s", (uint8_t *)v39, 0x16u);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v44 = v49;
    id v45 = v53;
  }
  else
  {

    id v45 = v34;
    uint64_t v44 = v2;
  }
  v52(v45, v44);
  id v46 = v51;
  if (!*(void *)&v31[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene]) {
    sub_10004F9A0(v35);
  }
}

void sub_10004E564(void *a1, uint64_t a2, void *a3)
{
  [a1 setForeground:1];
  sub_1000A4104(a1);
  sub_1000A3E9C(a1);
  if (qword_10017B580 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100051278(a1, v5);

  sub_10005010C(a1, a3);
}

void sub_10004E660(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, id, id))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, v8, v9);
  swift_release();
}

uint64_t sub_10004E700()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v23 - v6;
  id v8 = *(void **)(v0 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene);
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v10, v1);
    id v11 = v9;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      double v14 = (uint8_t *)swift_slowAlloc();
      char v15 = (void *)swift_slowAlloc();
      id v24 = v14;
      uint64_t v25 = v1;
      *(_DWORD *)double v14 = 138412290;
      v23[1] = v14 + 4;
      aBlock[0] = v11;
      id v16 = v11;
      uint64_t v1 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v15 = v8;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Bringing scene %@ to background.", v24, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v12 = v11;
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
    aBlock[4] = sub_10004EAB4;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100070E88;
    aBlock[3] = &unk_10015EBE0;
    id v22 = _Block_copy(aBlock);
    swift_release();
    [v11 updateSettingsWithBlock:v22];

    _Block_release(v22);
    uint64_t result = swift_isEscapingClosureAtFileLocation();
    if (result) {
      __break(1u);
    }
  }
  else
  {
    uint64_t v17 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v17, v1);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Attempted to bring scene to background, but it was already gone.", v20, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  return result;
}

id sub_10004EAB4(void *a1)
{
  return [a1 setForeground:0];
}

void sub_10004EAC4(void *a1)
{
  uint64_t v2 = *(void **)&v1[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene];
  if (v2)
  {
    id v4 = objc_allocWithZone((Class)CLBSceneUpdate);
    id v5 = v2;
    id v6 = [v4 initWithScene:v5];
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v1;
    *(void *)(v7 + 24) = a1;
    v12[4] = sub_100051270;
    void v12[5] = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_10004E660;
    v12[3] = &unk_10015EBB8;
    id v8 = _Block_copy(v12);
    id v9 = v1;
    id v10 = a1;
    swift_release();
    [v6 setSettingsUpdateBlock:v8];
    _Block_release(v8);
    id v11 = [v6 performUpdate];
  }
}

void sub_10004EC10()
{
  uint64_t v1 = (objc_class *)type metadata accessor for SceneViewControllerBase();
  v15.receiver = v0;
  v15.super_class = v1;
  id v2 = objc_msgSendSuper2(&v15, "view");
  if (!v2)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v3 = v2;
  self;
  id v4 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v5 = *(void **)&v0[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source];
  if (v0[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source + 8]) {
    id v6 = [v5 application];
  }
  else {
    id v6 = v5;
  }
  uint64_t v7 = v6;
  id v8 = [v6 displayStyle];

  [v4 setShouldPresentWithinSafeArea:v8 == (id)1];
  v14.receiver = v0;
  v14.super_class = v1;
  id v9 = objc_msgSendSuper2(&v14, "view");
  if (!v9) {
    goto LABEL_10;
  }
  id v10 = v9;
  self;
  id v11 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v12 = OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation;
  unint64_t v13 = *(void *)&v0[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation];
  if (!v13)
  {
    unint64_t v13 = sub_1000A439C();
    *(void *)&v0[v12] = v13;
  }
  [v11 setSceneInterfaceOrientation:v13];
}

void sub_10004ED90(void *a1)
{
  sub_1000A4104(a1);
  sub_1000A3E9C(a1);
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene);
  if (v3)
  {
    id v4 = v3;
    sub_10005010C(a1, v4);
  }
}

void sub_10004EEE0(char a1)
{
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for ApplicationSceneViewController();
  objc_msgSendSuper2(&v8, "viewWillAppear:", a1 & 1);
  uint64_t v3 = *(void **)&v1[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene];
  if (v3)
  {
    v7.receiver = v1;
    v7.super_class = (Class)type metadata accessor for SceneViewControllerBase();
    id v4 = v3;
    id v5 = objc_msgSendSuper2(&v7, "view");
    if (v5)
    {
      id v6 = v5;
      self;
      objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), "setScene:", v4, v7.receiver, v7.super_class);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10004F078(void *a1, uint64_t a2)
{
  id v39 = a1;
  id v4 = (void *)type metadata accessor for Logger();
  uint64_t v5 = *(v4 - 1);
  __chkstk_darwin(v4);
  objc_super v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v2;
  id v9 = self;
  aBlock[4] = (uint64_t)sub_100051598;
  aBlock[5] = v8;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100033424;
  aBlock[3] = (uint64_t)&unk_10015EC80;
  id v10 = _Block_copy(aBlock);
  id v11 = v2;
  swift_retain();
  swift_release();
  [v9 animateWithDuration:v10 animations:0.25];
  _Block_release(v10);
  swift_release();
  uint64_t v12 = (objc_class *)type metadata accessor for SceneViewControllerBase();
  v41.receiver = v11;
  v41.super_class = v12;
  id v13 = objc_msgSendSuper2(&v41, "view");
  if (v13)
  {
    objc_super v14 = v13;
    self;
    [(id)swift_dynamicCastObjCClassUnconditional() setScene:0];

    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v16 = v5;
      uint64_t v17 = *(void (**)(uint64_t))(Strong
                                           + OBJC_IVAR____TtCV12ClarityBoard20ApplicationSceneView11Coordinator_applicationSceneView
                                           + 48);
      uint64_t v18 = swift_retain();
      v17(v18);
      uint64_t v5 = v16;
      swift_unknownObjectRelease();
      swift_release();
    }
    os_log_type_t v19 = *(void **)&v11[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene];
    *(void *)&v11[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene] = 0;

    uint64_t v20 = Logger.common.unsafeMutableAddressor();
    uint64_t v21 = v7;
    (*(void (**)(char *, uint64_t, void *))(v5 + 16))(v7, v20, v4);
    id v22 = v39;
    swift_errorRetain();
    id v23 = v22;
    swift_errorRetain();
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      id v27 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      aBlock[0] = v36;
      *(_DWORD *)uint64_t v26 = 138412546;
      uint64_t v38 = v5;
      id v39 = v4;
      uint64_t v40 = (uint64_t)v23;
      id v28 = v23;
      os_log_type_t v37 = v21;
      id v29 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v27 = v23;

      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v40 = a2;
      swift_errorRetain();
      sub_100029F90(&qword_10017CE80);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v40 = sub_100050B5C(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Did deactivate scene: %@, error: %s", (uint8_t *)v26, 0x16u);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, id))(v38 + 8))(v37, v39);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, void *))(v5 + 8))(v7, v4);
    }
    id v32 = [self sharedInstance];
    if (v32)
    {
      uint64_t v33 = v32;
      NSString v34 = String._bridgeToObjectiveC()();
      [v33 setIdleTimerDisabled:0 forReason:v34];

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for ApplicationSceneViewController()
{
  return self;
}

void sub_10004F630()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source + 8)) {
    id v6 = [v5 application];
  }
  else {
    id v6 = v5;
  }
  objc_super v7 = v6;
  id v8 = [v6 defaultSceneIdentifier];

  NSString v9 = v8;
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;
  id v13 = [(id)qword_100186478 sceneManager];
  id v14 = [v13 workspace];

  id v21 = [v14 sceneWithIdentifier:v9];
  if (v21)
  {
    swift_bridgeObjectRelease();
    sub_10004F9A0(v21);
    objc_super v15 = v21;
  }
  else
  {
    uint64_t v16 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v16, v1);
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      id v21 = (id)v2;
      *(_DWORD *)os_log_type_t v19 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_100050B5C(v10, v12, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No scene (yet) for identifier %s.", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*((void (**)(char *, uint64_t))v21 + 1))(v4, v1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
  }
}

void sub_10004F9A0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  objc_super v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v21 = v4;
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v19 = (void *)swift_slowAlloc();
    uint64_t v20 = v12;
    *(_DWORD *)unint64_t v12 = 138412290;
    id v22 = v9;
    id v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v19 = v9;

    uint64_t v4 = v21;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Set up scene: %@", v20, 0xCu);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v14 = *(void **)&v2[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene];
  *(void *)&v2[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene] = v9;
  id v15 = v9;

  [v15 addObserver:v2];
  if (v2[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_isAppeared] == 1)
  {
    uint64_t v16 = (objc_class *)type metadata accessor for SceneViewControllerBase();
    v23.receiver = v2;
    v23.super_class = v16;
    id v17 = objc_msgSendSuper2(&v23, "view");
    if (v17)
    {
      os_log_type_t v18 = v17;
      self;
      [(id)swift_dynamicCastObjCClassUnconditional() setScene:v15];
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10004FC74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - v7;
  id v9 = *(void **)(v1 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene);
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v11, v2);
    unint64_t v12 = v10;
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v24 = v1;
      id v15 = (uint8_t *)swift_slowAlloc();
      id v22 = (void *)swift_slowAlloc();
      uint64_t v25 = v2;
      uint64_t v26 = v12;
      objc_super v23 = v15;
      *(_DWORD *)id v15 = 138412290;
      uint64_t v16 = v12;
      uint64_t v2 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v22 = v9;

      uint64_t v1 = v24;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Tear down scene: %@", v23, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v13 = v12;
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    [v12 removeObserver:v1];
  }
  else
  {
    uint64_t v17 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v17, v2);
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No scene to tear down.", v20, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

void sub_10004FF90(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Updating safe area and keyboard insets.", v12, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10005010C(a1, a3);
}

void sub_10005010C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v28 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v3 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source);
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source + 8)) {
    id v10 = [v9 application];
  }
  else {
    id v10 = v9;
  }
  os_log_type_t v11 = v10;
  id v12 = [v10 displayStyle];

  if (v12 == (id)1) {
    uint64_t v13 = &UIEdgeInsetsZero;
  }
  else {
    uint64_t v13 = (const UIEdgeInsets *)(v3 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets);
  }
  double bottom = v13->bottom;
  double right = v13->right;
  uint64_t v17 = *(void *)&v13->top;
  double left = v13->left;
  objc_msgSend(a1, "setSafeAreaInsetsPortrait:", v13->top, left, bottom, right);
  uint64_t v18 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v18, v5);
  os_log_type_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v27 = v5;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v33 = v22;
    uint64_t v26 = v21 + 4;
    uint64_t v29 = v17;
    double v30 = left;
    double v31 = bottom;
    double v32 = right;
    type metadata accessor for UIEdgeInsets(0);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v29 = sub_100050B5C(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Applying safe area insets: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v27);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v25 = v28;
  sub_100050750((uint64_t)a1, v28);
  sub_100050408((uint64_t)a1, v25);
}

void sub_100050408(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source;
  id v10 = *(void **)(v2 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source);
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source + 8)) {
    id v11 = [v10 application];
  }
  else {
    id v11 = v10;
  }
  id v12 = v11;
  unsigned __int8 v13 = [v11 supportsClarityUI];

  if ((v13 & 1) == 0)
  {
    os_log_type_t v14 = *(void **)v9;
    id v15 = (*(unsigned char *)(v9 + 8) & 1) != 0
        ? [v14 application]
        : v14;
    uint64_t v16 = v15;
    unsigned int v17 = [v15 wantsFullScreenInClarityUI];

    if (v17)
    {
      id v18 = [a2 _displayHostComponent];
      if (v18)
      {
        os_log_type_t v19 = v18;
        id v20 = objc_msgSend(self, "clb_thisDeviceDisplayEdgeInfo");
        objc_msgSend(v20, "clb_displayBasedSafeAreaInsets");
        uint64_t v22 = v21;
        uint64_t v24 = v23;
        uint64_t v26 = v25;
        uint64_t v28 = v27;
        objc_msgSend(v19, "setDisplayBasedSafeAreaInsets:forSettings:", a1);
        uint64_t v29 = Logger.common.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v29, v5);
        double v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v30, v31))
        {
          id v37 = v20;
          double v32 = (uint8_t *)swift_slowAlloc();
          uint64_t v33 = swift_slowAlloc();
          *(_DWORD *)double v32 = 136315138;
          uint64_t v42 = v33;
          v36[1] = v32 + 4;
          uint64_t v38 = v22;
          uint64_t v39 = v24;
          uint64_t v40 = v26;
          uint64_t v41 = v28;
          type metadata accessor for UIEdgeInsets(0);
          uint64_t v34 = String.init<A>(describing:)();
          uint64_t v38 = sub_100050B5C(v34, v35, &v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Applying display based safe area insets: %s.", v32, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
    }
  }
}

void sub_100050750(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source;
  id v10 = *(void **)(v2 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source);
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source + 8)) {
    id v11 = [v10 application];
  }
  else {
    id v11 = v10;
  }
  id v12 = v11;
  unsigned __int8 v13 = [v11 supportsClarityUI];

  if ((v13 & 1) == 0)
  {
    os_log_type_t v14 = *(void **)v9;
    id v15 = (*(unsigned char *)(v9 + 8) & 1) != 0
        ? [v14 application]
        : v14;
    uint64_t v16 = v15;
    unsigned int v17 = [v15 wantsFullScreenInClarityUI];

    if (v17)
    {
      id v18 = [a2 _keyboardHostComponent];
      if (v18)
      {
        os_log_type_t v19 = v18;
        double v20 = *(double *)(v2 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets + 16);
        id v21 = [(id)qword_100186478 systemInterfaceOrientation];
        uint64_t v22 = OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation;
        unint64_t v23 = *(void *)(v2 + OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation);
        if (!v23)
        {
          unint64_t v23 = sub_1000A439C();
          *(void *)(v2 + v22) = v23;
        }
        double left = UIEdgeInsetsZero.left;
        double right = UIEdgeInsetsZero.right;
        if ((id)v23 != v21)
        {
          if (!v23)
          {
            unint64_t v23 = sub_1000A439C();
            *(void *)(v2 + v22) = v23;
          }
          CGFloat bottom = UIEdgeInsetsZero.bottom;
          BOOL v27 = sub_100051588(v23);
          if (v27 != sub_100051588((uint64_t)v21))
          {
            double right = v20;
            double left = v20;
          }
          double v20 = bottom;
        }
        objc_msgSend(v19, "setMinimumKeyboardPadding:forSettings:", a1, UIEdgeInsetsZero.top, left, v20, right);
        [v19 setKeyboardDockDisabled:1 forSettings:a1];
        uint64_t v28 = Logger.common.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v28, v5);
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v29, v30))
        {
          os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          *(_DWORD *)os_log_type_t v31 = 136315138;
          uint64_t v40 = v32;
          unint64_t v35 = v31 + 4;
          CGFloat top = UIEdgeInsetsZero.top;
          double v37 = left;
          double v38 = v20;
          double v39 = right;
          type metadata accessor for UIEdgeInsets(0);
          uint64_t v33 = String.init<A>(describing:)();
          CGFloat top = COERCE_DOUBLE(sub_100050B5C(v33, v34, &v40));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "Disabling keyboard dock and applying minimum keyboard padding: %s.", v31, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
    }
  }
}

uint64_t sub_100050B04()
{
  return _swift_deallocObject(v0, 24);
}

void sub_100050B3C(void *a1, uint64_t a2, void *a3)
{
}

uint64_t sub_100050B44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100050B54()
{
  return swift_release();
}

uint64_t sub_100050B5C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100050C30(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10002A028((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10002A028((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1000469D4((uint64_t)v12);
  return v7;
}

uint64_t sub_100050C30(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100050DEC(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100050DEC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100050E84(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000510E0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000510E0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100050E84(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100050FFC(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100050FFC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100029F90(&qword_10017CE78);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100051064(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_1000510E0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100029F90(&qword_10017CE78);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100051230()
{
  return _swift_deallocObject(v0, 32);
}

uint64_t sub_100051270(void *a1)
{
  return sub_100051278(a1, *(void **)(v1 + 24));
}

uint64_t sub_100051278(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MultimodalListStyle.Layout();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    size_t v11 = a1;
  }
  else {
    size_t v11 = 0;
  }
  if (v11)
  {
    swift_getObjectType();
    id v12 = a1;
    sub_1000644BC((uint64_t)v10);
    dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.listLayout.setter();
  }
  uint64_t v13 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
  id v14 = a2;
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v25 = v4;
    unsigned int v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)unsigned int v17 = 136315138;
    uint64_t v24 = v17 + 4;
    id v18 = v14;
    uint64_t v19 = v5;
    uint64_t v20 = CLFListLayout.description.getter();
    unint64_t v22 = v21;

    uint64_t v26 = sub_100050B5C(v20, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Applying list layout for scene: %s.", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v7, v25);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void sub_100051578(void *a1, uint64_t a2, void *a3)
{
}

BOOL sub_100051588(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 2;
}

void sub_100051598()
{
  sub_1000A5478(*(void **)(v0 + 16));
}

uint64_t sub_1000515A0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v22 = v4;
    uint64_t v12 = swift_slowAlloc();
    unint64_t v23 = v2;
    uint64_t v13 = (uint8_t *)v12;
    unint64_t v21 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    aBlock[0] = v9;
    id v14 = v9;
    uint64_t v4 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Scene did apply update with %@.", v13, 0xCu);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v23;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v10 = v9;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v2;
  os_log_type_t v16 = self;
  aBlock[4] = sub_1000518C4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100033424;
  aBlock[3] = &unk_10015ECD0;
  unsigned int v17 = _Block_copy(aBlock);
  id v18 = v2;
  swift_retain();
  swift_release();
  [v16 animateWithDuration:v17 animations:0.25];
  _Block_release(v17);
  return swift_release();
}

ValueMetadata *type metadata accessor for TripleClickInstructionsView()
{
  return &type metadata for TripleClickInstructionsView;
}

uint64_t sub_1000518DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000518F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static HorizontalAlignment.center.getter();
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 1;
  return result;
}

__n128 sub_100051948@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.center.getter();
  sub_1000518F8((uint64_t)&v13);
  uint64_t v3 = v13;
  char v4 = v14;
  char v5 = v16;
  uint64_t v6 = v17;
  char v7 = v18;
  uint64_t v8 = v19;
  char v9 = v20;
  uint64_t v10 = v21;
  char v11 = v22;
  __n128 result = v15;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v4;
  *(__n128 *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v8;
  *(unsigned char *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v10;
  *(unsigned char *)(a1 + 104) = v11;
  return result;
}

ValueMetadata *type metadata accessor for InstructionsPlatter()
{
  return &type metadata for InstructionsPlatter;
}

uint64_t sub_1000519EC()
{
  return sub_10002A8D8(&qword_10017CE88, &qword_10017CE90);
}

uint64_t sub_100051A28()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100051A44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v62 = a1;
  uint64_t v61 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v61);
  uint64_t v60 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for DynamicTypeSize();
  uint64_t v58 = *(void *)(v2 - 8);
  uint64_t v59 = v2;
  __chkstk_darwin(v2);
  uint64_t v56 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AttributedString.FormattingOptions();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_100029F90(&qword_10017CE98);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for String.LocalizationValue();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for AttributedString();
  __chkstk_darwin(v9 - 8);
  uint64_t v57 = sub_100029F90(&qword_10017CEA0);
  uint64_t v54 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v51 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100029F90(&qword_10017CEA8);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  char v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100029F90(&qword_10017CEB0);
  __chkstk_darwin(v15 - 8);
  uint64_t v52 = (uint64_t)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_100029F90(&qword_10017CEB8) - 8;
  __chkstk_darwin(v55);
  unint64_t v53 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v18 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v7, 1, 1, v18);
  *(void *)&long long v63 = _swiftEmptyArrayStorage;
  sub_1000521B0();
  sub_100029F90(&qword_10017CEC8);
  sub_10002A8D8(&qword_10017CED0, &qword_10017CEC8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  AttributedString.init(localized:options:table:bundle:locale:comment:)();
  uint64_t v19 = Text.init(_:)();
  uint64_t v21 = v20;
  char v23 = v22;
  uint64_t v25 = v24;
  uint64_t KeyPath = swift_getKeyPath();
  char v27 = static Edge.Set.all.getter();
  *(void *)&long long v63 = v19;
  *((void *)&v63 + 1) = v21;
  LOBYTE(v64) = v23 & 1;
  *((void *)&v64 + 1) = v25;
  *(void *)&long long v65 = KeyPath;
  BYTE8(v65) = 1;
  v66[0] = v27;
  memset(&v66[8], 0, 32);
  v66[40] = 1;
  uint64_t v29 = v58;
  uint64_t v28 = v59;
  os_log_type_t v30 = v56;
  (*(void (**)(char *, void, uint64_t))(v58 + 104))(v56, enum case for DynamicTypeSize.large(_:), v59);
  sub_100029F90(&qword_10017CED8);
  sub_100052210();
  os_log_type_t v31 = v51;
  View.dynamicTypeSize(_:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v28);
  sub_100041A08(v63, *((uint64_t *)&v63 + 1), v64);
  swift_release();
  swift_bridgeObjectRelease();
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v32 = v54;
  uint64_t v33 = v57;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v14, v31, v57);
  unint64_t v34 = &v14[*(int *)(v12 + 44)];
  long long v35 = *(_OWORD *)&v66[32];
  *((_OWORD *)v34 + 4) = *(_OWORD *)&v66[16];
  *((_OWORD *)v34 + 5) = v35;
  *((_OWORD *)v34 + 6) = v67;
  long long v36 = v64;
  *(_OWORD *)unint64_t v34 = v63;
  *((_OWORD *)v34 + 1) = v36;
  long long v37 = *(_OWORD *)v66;
  *((_OWORD *)v34 + 2) = v65;
  *((_OWORD *)v34 + 3) = v37;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  uint64_t v38 = v52;
  sub_10002A580((uint64_t)v14, v52, &qword_10017CEA8);
  sub_10002A840((uint64_t)v14, &qword_10017CEA8);
  double v39 = v60;
  uint64_t v40 = &v60[*(int *)(v61 + 28)];
  uint64_t v41 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v42 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104))(v40, v41, v42);
  __asm { FMOV            V0.2D, #15.0 }
  *double v39 = _Q0;
  uint64_t v48 = (uint64_t)v53;
  uint64_t v49 = (uint64_t)&v53[*(int *)(v55 + 44)];
  sub_10005232C((uint64_t)v39, v49);
  *(_WORD *)(v49 + *(int *)(sub_100029F90(&qword_10017CF08) + 36)) = 256;
  sub_10002A580(v38, v48, &qword_10017CEB0);
  sub_100052390((uint64_t)v39);
  sub_10002A840(v38, &qword_10017CEB0);
  return sub_1000523EC(v48, v62);
}

unint64_t sub_1000521B0()
{
  unint64_t result = qword_10017CEC0;
  if (!qword_10017CEC0)
  {
    type metadata accessor for AttributedString.FormattingOptions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CEC0);
  }
  return result;
}

unint64_t sub_100052210()
{
  unint64_t result = qword_10017CEE0;
  if (!qword_10017CEE0)
  {
    sub_10002A694(&qword_10017CED8);
    sub_10005228C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CEE0);
  }
  return result;
}

unint64_t sub_10005228C()
{
  unint64_t result = qword_10017CEE8;
  if (!qword_10017CEE8)
  {
    sub_10002A694(&qword_10017CEF0);
    sub_10002A8D8(&qword_10017CEF8, &qword_10017CF00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CEE8);
  }
  return result;
}

uint64_t sub_10005232C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100052390(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000523EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017CEB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100052458()
{
  unint64_t result = qword_10017CF10;
  if (!qword_10017CF10)
  {
    sub_10002A694(&qword_10017CEB8);
    sub_1000524F8();
    sub_10002A8D8(&qword_10017CF30, &qword_10017CF08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF10);
  }
  return result;
}

unint64_t sub_1000524F8()
{
  unint64_t result = qword_10017CF18;
  if (!qword_10017CF18)
  {
    sub_10002A694(&qword_10017CEB0);
    sub_100052574();
    sub_100052624();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF18);
  }
  return result;
}

unint64_t sub_100052574()
{
  unint64_t result = qword_10017CF20;
  if (!qword_10017CF20)
  {
    sub_10002A694(&qword_10017CEA8);
    sub_10002A694(&qword_10017CED8);
    sub_100052210();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF20);
  }
  return result;
}

unint64_t sub_100052624()
{
  unint64_t result = qword_10017CF28;
  if (!qword_10017CF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CF28);
  }
  return result;
}

void sub_100052678(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

id sub_1000526F0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for BiometricInterface()) init];
  qword_1001864B0 = (uint64_t)result;
  return result;
}

BOOL sub_10005277C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_devices);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    id v6 = (void *)_CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  id v6 = *(void **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_15;
  }
LABEL_3:
  if ((v5 & 0xC000000000000001) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_20;
    }
    id v7 = *(id *)(v5 + 32);
  }
  id v6 = v7;
  swift_bridgeObjectRelease();
  id v25 = 0;
  id v8 = [v6 identitiesWithError:&v25];
  id v9 = v25;
  if (v8)
  {
    uint64_t v10 = v8;
    sub_10002A544(0, &qword_10017CF78);
    unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v12 = v9;

    if (!(v11 >> 62))
    {
      uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();

      return v13 != 0;
    }
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease_n();
    return v13 != 0;
  }
  id v15 = v25;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v16 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v16, v1);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    os_log_t v24 = v17;
    *(_DWORD *)uint64_t v19 = 138412290;
    v23[1] = v19 + 4;
    swift_errorRetain();
    uint64_t v21 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id v25 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v20 = v21;
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v22 = v24;
    _os_log_impl((void *)&_mh_execute_header, v24, v18, "Error fetching enrolled identities: %@", v19, 0xCu);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return 0;
}

uint64_t sub_100052B60()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  unint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  id v8 = (char *)&v31 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  unint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_devices);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_3:
      if ((v11 & 0xC000000000000001) != 0)
      {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          __break(1u);
        }
        id v13 = *(id *)(v11 + 32);
      }
      char v14 = v13;
      swift_bridgeObjectRelease();
      id v34 = 0;
      if ([v14 forceBioLockoutForAllUsersWithError:&v34])
      {
        id v15 = v34;
        uint64_t v16 = Logger.common.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v10, v16, v1);
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully disabled biometry", v19, 2u);
          swift_slowDealloc();
        }
      }
      else
      {
        id v20 = v34;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        uint64_t v21 = Logger.common.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v21, v1);
        swift_errorRetain();
        swift_errorRetain();
        os_log_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          id v33 = v14;
          os_log_t v24 = (uint8_t *)swift_slowAlloc();
          uint64_t v32 = (void *)swift_slowAlloc();
          *(_DWORD *)os_log_t v24 = 138412290;
          swift_errorRetain();
          id v25 = (void *)_swift_stdlib_bridgeErrorToNSError();
          id v34 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v32 = v25;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error disabling biometry: %@", v24, 0xCu);
          sub_100029F90(&qword_10017B800);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        uint64_t v10 = v5;
      }
      return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v10, v1);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v8, v26, v1);
  char v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not a biometry capable device", v29, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = v8;
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v10, v1);
}

void sub_1000530D4(char a1)
{
  uint64_t v2 = OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_needsAuthentication;
  int v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_needsAuthentication);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_needsAuthentication) = a1;
  if (v3 != (a1 & 1) && sub_10005277C())
  {
    if (*(unsigned char *)(v1 + v2) == 1)
    {
      sub_100053600();
    }
    else
    {
      sub_100053DF8();
    }
  }
}

id sub_100053158()
{
  unint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(char ***)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_matchOperation] = 0;
  v0[OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_needsAuthentication] = 0;
  unint64_t v5 = self;
  uint64_t v6 = v0;
  id v7 = [v5 availableDevices];
  sub_10002A544(0, &qword_10017CF80);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  id v33 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v9 < 0) {
    __break(1u);
  }
  uint64_t v29 = v4;
  os_log_type_t v30 = v2;
  unint64_t v28 = v1;
  uint64_t v4 = (char *)self;
  uint64_t v10 = 0;
  unint64_t v1 = v8 & 0xC000000000000001;
  uint64_t v2 = &selRef_sharedGuard;
  while (1)
  {
    if (v9 == v10)
    {
      __break(1u);
      goto LABEL_17;
    }
    id v11 = v1 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v8 + 8 * v10 + 32);
    id v32 = 0;
    id v12 = v11;
    if (![v4 deviceWithDescriptor:v12 error:&v32]) {
      break;
    }
    ++v10;
    id v13 = v32;

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v9 == v10)
    {
      char v14 = v33;
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
  }
  id v15 = v32;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v16 = Logger.common.unsafeMutableAddressor();
  os_log_type_t v18 = v29;
  uint64_t v17 = v30;
  unint64_t v19 = v28;
  ((void (*)(char *, uint64_t, unint64_t))v30[2])(v29, v16, v28);
  swift_errorRetain();
  swift_errorRetain();
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_t v22 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v23 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_t v22 = 138412290;
    swift_errorRetain();
    uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
    id v33 = (void *)v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v23 = v24;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "BiometricInterface: Error fetching devices: %@", v22, 0xCu);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    os_log_type_t v18 = v29;
    uint64_t v17 = v30;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  ((void (*)(char *, unint64_t))v17[1])(v18, v19);
  swift_errorRelease();
LABEL_19:
  char v14 = _swiftEmptyArrayStorage;
LABEL_20:
  *(void *)&v6[OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_devices] = v14;

  id v25 = (objc_class *)type metadata accessor for BiometricInterface();
  v31.receiver = v6;
  v31.super_class = v25;
  return objc_msgSendSuper2(&v31, "init");
}

void sub_100053600()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v33 - v7;
  uint64_t v9 = Logger.common.unsafeMutableAddressor();
  id v34 = *(NSObject **)(v3 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v34)(v8, v9, v2);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "BiometricInterface: Authenticating", v12, 2u);
    swift_slowDealloc();
  }

  id v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v8, v2);
  unint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_devices);
  if (!(v14 >> 62))
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_5;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    id v18 = 0;
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_14;
  }
LABEL_5:
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v16 = *(id *)(v14 + 32);
  }
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  aBlock[0] = 0;
  id v18 = [v17 createMatchOperationWithError:aBlock];

  id v19 = aBlock[0];
  if (!v18)
  {
    id v20 = v19;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    ((void (*)(char *, uint64_t, uint64_t))v34)(v6, v9, v2);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    id v34 = v21;
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      id v33 = v13;
      *(_DWORD *)os_log_type_t v23 = 138412290;
      swift_errorRetain();
      id v25 = (void *)_swift_stdlib_bridgeErrorToNSError();
      aBlock[0] = v25;
      id v13 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v25;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v26 = v34;
      _os_log_impl((void *)&_mh_execute_header, v34, v22, "BiometricInterface: Error creating match operation: %@", v23, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    v13(v6, v2);
    return;
  }
LABEL_15:
  uint64_t v27 = OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_matchOperation;
  unint64_t v28 = *(void **)(v1 + OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_matchOperation);
  *(void *)(v1 + OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_matchOperation) = v18;

  uint64_t v29 = *(void **)(v1 + v27);
  if (v29)
  {
    [v29 setPurpose:2];
    os_log_type_t v30 = *(void **)(v1 + v27);
    if (v30)
    {
      aBlock[4] = sub_100053AEC;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_100052678;
      aBlock[3] = &unk_10015ED38;
      objc_super v31 = _Block_copy(aBlock);
      id v32 = v30;
      [v32 startWithReply:v31];
      _Block_release(v31);
    }
  }
}

uint64_t sub_100053AEC(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v6);
  os_log_type_t v11 = (char *)v23 - v10;
  if (a2)
  {
    swift_errorRetain();
    uint64_t v12 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v12, v4);
    swift_errorRetain();
    swift_errorRetain();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v23[0] = v4;
      uint64_t v17 = (void *)v16;
      *(_DWORD *)uint64_t v15 = 138412290;
      swift_errorRetain();
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      v23[1] = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v17 = v18;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "BiometricInterface: Error starting match operation: %@", v15, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      uint64_t v4 = v23[0];
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    unint64_t v8 = v11;
  }
  else
  {
    if (a1) {
      return result;
    }
    uint64_t v19 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v19, v4);
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "BiometricInterface: Failed to start match operation, but no error was provided.", v22, 2u);
      swift_slowDealloc();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_100053DF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "BiometricInterface: Stopped authenticating", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_matchOperation;
  os_log_type_t v11 = *(void **)(v1 + OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_matchOperation);
  if (v11)
  {
    [v11 cancel];
    uint64_t v12 = *(void **)(v1 + v10);
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(void *)(v1 + v10) = 0;
}

id sub_100053F84()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BiometricInterface();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BiometricInterface()
{
  return self;
}

uint64_t sub_100054028(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100054038()
{
  return swift_release();
}

id sub_100054144()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DruidPresentationManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DruidPresentationManager()
{
  return self;
}

uint64_t sub_10005419C(char a1)
{
  objc_super v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  os_log_type_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OBJC_IVAR___CLBMousePointerManager_hasConnectedPointer;
  if (v2[OBJC_IVAR___CLBMousePointerManager_hasConnectedPointer] != v3)
  {
    uint64_t v10 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
    os_log_type_t v11 = v2;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v14 = 67109120;
      v15[3] = v2[v9];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Has connected pointer: %{BOOL}d", v14, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return sub_100055CD0();
  }
  return result;
}

char *sub_100054364()
{
  uint64_t v1 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v1 - 8);
  int v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = OBJC_IVAR___CLBMousePointerManager_mousePointerService;
  uint64_t v5 = self;
  uint64_t v6 = v0;
  *(void *)&v0[v4] = [v5 sharedInstance];
  uint64_t v7 = OBJC_IVAR___CLBMousePointerManager_pointerClientController;
  *(void *)&v6[v7] = [objc_allocWithZone((Class)PSPointerClientController) init];
  uint64_t v8 = OBJC_IVAR___CLBMousePointerManager_systemClientController;
  *(void *)&v6[v8] = [objc_allocWithZone((Class)PSPointerSystemClientController) init];
  *(void *)&v6[OBJC_IVAR___CLBMousePointerManager_mousePointerDeviceObserverToken] = 0;
  *(void *)&v6[OBJC_IVAR___CLBMousePointerManager_serviceKeepAliveAssertion] = 0;
  *(void *)&v6[OBJC_IVAR___CLBMousePointerManager_suppressEventsAssertion] = 0;
  v6[OBJC_IVAR___CLBMousePointerManager_hasConnectedPointer] = 0;

  uint64_t v9 = (objc_class *)type metadata accessor for MousePointerManager();
  v19.receiver = v6;
  v19.super_class = v9;
  uint64_t v10 = (char *)objc_msgSendSuper2(&v19, "init");
  os_log_type_t v11 = *(void **)&v10[OBJC_IVAR___CLBMousePointerManager_mousePointerService];
  uint64_t v12 = v10;
  id v13 = [v11 addPointerDeviceObserver:v12];
  *(void *)&v12[OBJC_IVAR___CLBMousePointerManager_mousePointerDeviceObserverToken] = v13;
  swift_unknownObjectRelease();
  [*(id *)&v12[OBJC_IVAR___CLBMousePointerManager_systemClientController] setDelegate:v12];
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v16 = static MainActor.shared.getter();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v16;
  v17[3] = &protocol witness table for MainActor;
  v17[4] = v15;
  swift_release();
  sub_1000B76CC((uint64_t)v3, (uint64_t)&unk_10017D128, (uint64_t)v17);

  swift_release();
  return v12;
}

uint64_t sub_1000545EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  uint64_t v5 = type metadata accessor for Logger();
  v4[16] = v5;
  v4[17] = *(void *)(v5 - 8);
  v4[18] = swift_task_alloc();
  sub_100029F90(&qword_10017D130);
  v4[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Notification();
  v4[20] = v6;
  v4[21] = *(void *)(v6 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v4[24] = swift_task_alloc();
  uint64_t v7 = sub_100029F90(&qword_10017D138);
  v4[25] = v7;
  v4[26] = *(void *)(v7 - 8);
  v4[27] = swift_task_alloc();
  uint64_t v8 = sub_100029F90(&qword_10017D140);
  v4[28] = v8;
  v4[29] = *(void *)(v8 - 8);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = type metadata accessor for MainActor();
  v4[33] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[34] = v10;
  v4[35] = v9;
  return _swift_task_switch(sub_100054870, v10, v9);
}

uint64_t sub_100054870(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  if (kAXSAssistiveTouchEnabledNotification)
  {
    uint64_t v4 = v3[27];
    uint64_t v13 = v3[26];
    uint64_t v5 = v3[25];
    id v6 = kAXSAssistiveTouchEnabledNotification;
    id v7 = [self defaultCenter];
    uint64_t v8 = NSNotificationCenter.notifications(named:object:)();

    v3[13] = v8;
    type metadata accessor for NSNotificationCenter.Notifications();
    sub_100029F90(&qword_10017D148);
    sub_100056E64(&qword_10017D150, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications);
    AsyncMapSequence.init(_:transform:)();

    AsyncMapSequence.base.getter();
    dispatch thunk of AsyncSequence.makeAsyncIterator()();
    AsyncMapSequence.transform.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, v5);
    AsyncMapSequence.Iterator.init(_:transform:)();
    swift_beginAccess();
    uint64_t v9 = static MainActor.shared.getter();
    v3[36] = v9;
    if (v9)
    {
      swift_getObjectType();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      a3 = v11;
    }
    else
    {
      uint64_t v10 = 0;
      a3 = 0;
    }
    v3[37] = v10;
    v3[38] = a3;
    a1 = sub_100054AC0;
    a2 = v10;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(a1, a2, a3);
}

uint64_t sub_100054AC0()
{
  uint64_t v1 = v0[36];
  v0[39] = AsyncMapSequence.Iterator.baseIterator.modify();
  sub_100056E64(&qword_10017D158, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[40] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100054BC8;
  uint64_t v3 = v0[19];
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v3, v1, &protocol witness table for MainActor);
}

uint64_t sub_100054BC8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 296);
    uint64_t v4 = *(void *)(v2 + 304);
    uint64_t v5 = sub_100054EF4;
  }
  else
  {
    (*(void (**)(void))(v2 + 312))();
    uint64_t v3 = *(void *)(v2 + 296);
    uint64_t v4 = *(void *)(v2 + 304);
    uint64_t v5 = sub_100054CF0;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100054CF0()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10002A840(v3, &qword_10017D130);
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_release();
    uint64_t v4 = *(void *)(v0 + 272);
    uint64_t v5 = *(void *)(v0 + 280);
    return _swift_task_switch(sub_100055110, v4, v5);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 248);
    uint64_t v8 = *(void *)(v0 + 224);
    uint64_t v9 = *(void *)(v0 + 232);
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 176), v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
    uint64_t v10 = (int *)AsyncMapSequence.Iterator.transform.getter();
    *(void *)(v0 + 328) = v11;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)v10 + *v10);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100054F0C;
    uint64_t v13 = *(void *)(v0 + 176);
    return v15(v0 + 16, v13);
  }
}

uint64_t sub_100054EF4()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t sub_100054F0C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  uint64_t v3 = *(void *)(*v0 + 168);
  uint64_t v4 = *(void *)(*v0 + 160);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 304);
  uint64_t v6 = *(void *)(v1 + 296);
  return _swift_task_switch(sub_1000550AC, v6, v5);
}

uint64_t sub_1000550AC()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  return _swift_task_switch(sub_100055110, v1, v2);
}

uint64_t sub_100055110()
{
  if (v0[5])
  {
    uint64_t v2 = v0[17];
    uint64_t v1 = v0[18];
    uint64_t v3 = v0[16];
    uint64_t v4 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 67109120;
      *(_DWORD *)(v7 + 4) = _AXSAssistiveTouchEnabled() != 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Updated AssistiveTouch enabled: %{BOOL}d", (uint8_t *)v7, 8u);
      swift_slowDealloc();
    }
    uint64_t v9 = v0[17];
    uint64_t v8 = v0[18];
    uint64_t v10 = v0[16];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v12 = (void *)Strong;
      sub_100055CD0();
    }
    sub_10002A840((uint64_t)(v0 + 2), (uint64_t *)&unk_10017D160);
    uint64_t v13 = static MainActor.shared.getter();
    v0[36] = v13;
    if (v13)
    {
      swift_getObjectType();
      uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    v0[37] = v14;
    v0[38] = v16;
    return _swift_task_switch(sub_100054AC0, v14, v16);
  }
  else
  {
    (*(void (**)(void, void))(v0[29] + 8))(v0[31], v0[28]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

id sub_100055394()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR___CLBMousePointerManager_mousePointerDeviceObserverToken];
  if (v1) {
    [v1 invalidate];
  }
  [*(id *)&v0[OBJC_IVAR___CLBMousePointerManager_pointerClientController] invalidate];
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for MousePointerManager();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_100055514(uint64_t a1)
{
  uint64_t v3 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v6 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  BOOL v7 = v6 > 0;
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
  type metadata accessor for MainActor();
  id v9 = v1;
  uint64_t v10 = static MainActor.shared.getter();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = &protocol witness table for MainActor;
  *(void *)(v11 + 32) = v9;
  *(unsigned char *)(v11 + 40) = v7;
  sub_1000B76CC((uint64_t)v5, (uint64_t)&unk_10017D0E8, v11);
  return swift_release();
}

uint64_t sub_100055664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 32) = a5;
  *(void *)(v5 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v5 + 24) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100055700, v7, v6);
}

uint64_t sub_100055700()
{
  char v1 = *(unsigned char *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_release();
  char v3 = *(unsigned char *)(v2 + OBJC_IVAR___CLBMousePointerManager_hasConnectedPointer);
  *(unsigned char *)(v2 + OBJC_IVAR___CLBMousePointerManager_hasConnectedPointer) = v1;
  sub_10005419C(v3);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100055924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000559BC, v6, v5);
}

uint64_t sub_1000559BC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  id v2 = [(id)qword_100186478 sceneManager];
  [v2 addPointerScene:v1];

  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100055AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100055B80, v6, v5);
}

uint64_t sub_100055B80()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  id v2 = [(id)qword_100186478 sceneManager];
  [v2 removePointerScene:v1];

  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t type metadata accessor for MousePointerManager()
{
  return self;
}

uint64_t sub_100055CD0()
{
  uint64_t v1 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v1 - 8);
  char v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((AXDeviceIsPad() & 1) == 0 && !_AXSAssistiveTouchEnabled())
  {
    uint64_t v7 = OBJC_IVAR___CLBMousePointerManager_suppressEventsAssertion;
    if (!*(void *)&v0[OBJC_IVAR___CLBMousePointerManager_suppressEventsAssertion])
    {
      uint64_t v8 = *(void **)&v0[OBJC_IVAR___CLBMousePointerManager_mousePointerService];
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [v8 suppressPointerEventsForReason:v9];

      *(void *)&v0[v7] = v10;
      swift_unknownObjectRelease();
    }
    goto LABEL_10;
  }
  uint64_t v4 = OBJC_IVAR___CLBMousePointerManager_suppressEventsAssertion;
  if (*(void *)&v0[OBJC_IVAR___CLBMousePointerManager_suppressEventsAssertion])
  {
    [(id)swift_unknownObjectRetain() invalidate];
    *(void *)&v0[v4] = 0;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  if (v0[OBJC_IVAR___CLBMousePointerManager_hasConnectedPointer] != 1)
  {
LABEL_10:
    uint64_t v11 = OBJC_IVAR___CLBMousePointerManager_serviceKeepAliveAssertion;
    if (!*(void *)&v0[OBJC_IVAR___CLBMousePointerManager_serviceKeepAliveAssertion])
    {
      char v6 = 0;
      goto LABEL_15;
    }
    [(id)swift_unknownObjectRetain() invalidate];
    *(void *)&v0[v11] = 0;
    swift_unknownObjectRelease();
    char v6 = 0;
LABEL_14:
    swift_unknownObjectRelease();
    goto LABEL_15;
  }
  uint64_t v5 = OBJC_IVAR___CLBMousePointerManager_serviceKeepAliveAssertion;
  if (!*(void *)&v0[OBJC_IVAR___CLBMousePointerManager_serviceKeepAliveAssertion])
  {
    *(void *)&v0[v5] = [*(id *)&v0[OBJC_IVAR___CLBMousePointerManager_pointerClientController] acquireServiceKeepAliveAssertion];
    char v6 = 1;
    goto LABEL_14;
  }
  char v6 = 1;
LABEL_15:
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v3, 1, 1, v12);
  type metadata accessor for MainActor();
  uint64_t v13 = v0;
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = &protocol witness table for MainActor;
  *(void *)(v15 + 32) = v13;
  *(unsigned char *)(v15 + 40) = v6;
  sub_1000B76CC((uint64_t)v3, (uint64_t)&unk_10017D0D8, v15);
  return swift_release();
}

uint64_t sub_100055F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 32) = a5;
  *(void *)(v5 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v5 + 24) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100055FF0, v7, v6);
}

uint64_t sub_100055FF0()
{
  char v1 = *(unsigned char *)(v0 + 32);
  swift_release();
  sub_10005605C(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_10005605C(char a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v30 - v8;
  BSDispatchQueueAssertMain();
  uint64_t v10 = Logger.common.unsafeMutableAddressor();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  if (a1)
  {
    v11(v9, v10, v3);
    uint64_t v12 = v1;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v32 = v3;
      uint64_t v16 = (uint8_t *)v15;
      objc_super v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138412290;
      uint64_t v17 = *(Class *)((char *)&v12->isa + OBJC_IVAR___CLBMousePointerManager_systemClientController);
      id v33 = v17;
      id v18 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *objc_super v31 = v17;

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Activating pointer scenes. systemClientController: %@", v16, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v3 = v32;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v13 = v12;
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    uint64_t v27 = *(Class *)((char *)&v12->isa + OBJC_IVAR___CLBMousePointerManager_systemClientController);
    id v28 = [self mainConfiguration];
    [v27 prepareScenesForPointerForDisplayConfiguration:v28];
  }
  else
  {
    v11(v7, v10, v3);
    uint64_t v19 = v1;
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    p_cb = &OBJC_PROTOCOL___SiriPresentationControllerDelegate.cb;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v32 = v3;
      uint64_t v24 = (uint8_t *)v23;
      objc_super v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412290;
      id v25 = *(Class *)((char *)&v19->isa + OBJC_IVAR___CLBMousePointerManager_systemClientController);
      id v33 = v25;
      id v26 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *objc_super v31 = v25;
      p_cb = (_DWORD *)(&OBJC_PROTOCOL___SiriPresentationControllerDelegate + 64);

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Invalidating pointer scenes. systemClientController: %@", v24, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v3 = v32;
      swift_slowDealloc();
    }
    else
    {

      id v20 = v19;
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v29 = *(Class *)((char *)&v19->isa + *((void *)p_cb + 504));
    id v28 = [self mainConfiguration];
    [v29 invalidateScenesForPointerForDisplayConfiguration:v28];
  }
}

uint64_t sub_10005647C()
{
  return sub_100056BF8(41);
}

uint64_t sub_100056484(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100056EAC;
  return sub_100055F54(a1, v4, v5, v6, v7);
}

uint64_t sub_100056548()
{
  return sub_100056BF8(41);
}

uint64_t sub_100056550(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10003CCE0;
  return sub_100055664(a1, v4, v5, v6, v7);
}

uint64_t sub_100056614(void *a1, const char *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v17 = v4;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    id v18 = v9;
    uint64_t v16 = a2;
    uint64_t v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v15 = v9;

    uint64_t v4 = v17;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v16, v12, 0xCu);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v10 = v9;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100056828(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  uint64_t v16 = a1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v33 = a3;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v34 = a4;
    id v20 = (uint8_t *)v19;
    uint64_t v29 = (void *)swift_slowAlloc();
    uint64_t v30 = a2;
    uint64_t v31 = v11;
    *(_DWORD *)id v20 = 138412290;
    long long v35 = v16;
    os_log_type_t v21 = v16;
    uint64_t v32 = v10;
    os_log_type_t v22 = v21;
    uint64_t v11 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v16;

    uint64_t v10 = v32;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v30, v20, 0xCu);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v34;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v17 = v16;
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v23 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v10, 1, 1, v23);
  type metadata accessor for MainActor();
  uint64_t v24 = v16;
  uint64_t v25 = static MainActor.shared.getter();
  id v26 = (void *)swift_allocObject();
  v26[2] = v25;
  v26[3] = &protocol witness table for MainActor;
  v26[4] = v24;
  sub_1000B76CC((uint64_t)v10, a4, (uint64_t)v26);
  return swift_release();
}

uint64_t sub_100056B34()
{
  return sub_100056BF8(40);
}

uint64_t sub_100056B3C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *char v7 = v2;
  v7[1] = sub_100056EAC;
  return sub_100055AE8(a1, v4, v5, v6);
}

uint64_t sub_100056BF0()
{
  return sub_100056BF8(40);
}

uint64_t sub_100056BF8(uint64_t a1)
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v1, a1);
}

uint64_t sub_100056C44(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *char v7 = v2;
  v7[1] = sub_100056EAC;
  return sub_100055924(a1, v4, v5, v6);
}

unint64_t sub_100056CF8()
{
  unint64_t result = qword_10017D110;
  if (!qword_10017D110)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017D110);
  }
  return result;
}

uint64_t sub_100056D38()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24);
}

uint64_t sub_100056D70()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40);
}

uint64_t sub_100056DB0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *char v7 = v2;
  v7[1] = sub_100056EAC;
  return sub_1000545EC(a1, v4, v5, v6);
}

uint64_t sub_100056E64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100056EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t KeypadButtonStyleView.init(configuration:background:foregroundColor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ButtonStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t v11 = type metadata accessor for KeypadButtonStyleView();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v11 + 36), a2, a4);
  *(void *)(a5 + *(int *)(v11 + 40)) = a3;
  return result;
}

uint64_t type metadata accessor for KeypadButtonStyleView()
{
  return sub_100034DF8();
}

uint64_t sub_100056FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  uint64_t v5 = static Color.clarityUIButtonBackground.getter();
  uint64_t v6 = static Color.primary.getter();
  uint64_t result = sub_100029F90(&qword_10017D2F0);
  *(void *)(a2 + *(int *)(result + 36)) = v5;
  *(void *)(a2 + *(int *)(result + 40)) = v6;
  return result;
}

uint64_t KeypadButtonStyleView.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  os_log_type_t v18 = a2;
  sub_10002A694(&qword_10017D230);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v17 = v4;
  type metadata accessor for _BackgroundStyleModifier();
  type metadata accessor for ModifiedContent();
  sub_10002A694(&qword_10017D238);
  type metadata accessor for ModifiedContent();
  sub_10002A694(&qword_10017D240);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v30 = sub_10002A8D8(&qword_10017D248, &qword_10017D230);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = sub_10002A8D8(&qword_10017D250, &qword_10017D238);
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = sub_10002A8D8(&qword_10017D258, &qword_10017D240);
  uint64_t v22 = v6;
  uint64_t v23 = &type metadata for Circle;
  uint64_t v24 = swift_getWitnessTable();
  unint64_t v25 = sub_1000573A0();
  uint64_t v7 = type metadata accessor for PlatterShadowedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v17 - v12;
  ButtonStyleConfiguration.isPressed.getter();
  uint64_t v19 = v17;
  uint64_t v20 = v5;
  uint64_t v21 = v2;
  PlatterShadowedContent.init(shape:isPressed:content:)();
  swift_getWitnessTable();
  os_log_type_t v14 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v14(v13, v11, v7);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, v7);
  v14(v18, v13, v7);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v7);
}

unint64_t sub_1000573A0()
{
  unint64_t result = qword_10017D260[0];
  if (!qword_10017D260[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10017D260);
  }
  return result;
}

uint64_t sub_1000573F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  unint64_t v43 = a4;
  uint64_t v34 = sub_100029F90(&qword_10017D230);
  __chkstk_darwin(v34);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for _BackgroundStyleModifier();
  uint64_t v32 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v33 = (char *)v31 - v9;
  sub_10002A694(&qword_10017D238);
  uint64_t v38 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  long long v35 = (char *)v31 - v10;
  sub_10002A694(&qword_10017D240);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  long long v36 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  double v39 = (char *)v31 - v14;
  *(void *)uint64_t v8 = static VerticalAlignment.center.getter();
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  sub_100029F90(&qword_10017D2E8);
  ButtonStyleConfiguration.label.getter();
  v31[1] = type metadata accessor for KeypadButtonStyleView();
  static Edge.Set.all.getter();
  uint64_t v15 = sub_10002A8D8(&qword_10017D248, &qword_10017D230);
  uint64_t v16 = v33;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  sub_1000587C0((uint64_t)v8);
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v46 = a1;
  static Alignment.center.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v51 = v15;
  uint64_t v52 = WitnessTable;
  uint64_t v18 = v32;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v20 = v35;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v18);
  uint64_t v21 = sub_10002A8D8(&qword_10017D250, &qword_10017D238);
  uint64_t v49 = v19;
  uint64_t v50 = v21;
  uint64_t v22 = v38;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v24 = v36;
  View.foregroundColor(_:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v22);
  uint64_t v25 = sub_10002A8D8(&qword_10017D258, &qword_10017D240);
  uint64_t v47 = v23;
  uint64_t v48 = v25;
  swift_getWitnessTable();
  uint64_t v26 = v41;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  uint64_t v28 = v39;
  v27(v39, v24, v11);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v26 + 8);
  v29(v24, v11);
  v27(v43, v28, v11);
  return ((uint64_t (*)(char *, uint64_t))v29)(v28, v11);
}

uint64_t sub_100057934@<X0>(char *a1@<X8>)
{
  return sub_1000573F4(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100057940()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100057984@<X0>(uint64_t *a1@<X8>)
{
  if (ButtonStyleConfiguration.isPressed.getter()) {
    uint64_t result = static Color.clarityUIPressedButtonOverlay.getter();
  }
  else {
    uint64_t result = static Color.clear.getter();
  }
  *a1 = result;
  return result;
}

uint64_t sub_1000579C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_1000579CC()
{
  uint64_t result = type metadata accessor for ButtonStyleConfiguration();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100057AA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = *(void *)(v10 + 64) + 7;
  unint64_t v14 = ((v13 + ((v8 + v11) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v15 = v11 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v15 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
  }
  else
  {
    uint64_t v19 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    unint64_t v20 = ((unint64_t)a2 + v12) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v19, v20, v9);
    *(void *)((v13 + (((unint64_t)a1 + v12) & v19)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + v20) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t sub_100057C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v5 = *(void *)(v4 - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, v4);
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((*(void *)(v5 + 56)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_release();
}

uint64_t sub_100057D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v13, v14);
  *(void *)((*(void *)(v10 + 48) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 48)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t sub_100057DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v13, v14);
  *(void *)((*(void *)(v10 + 40) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 40)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100057EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v13, v14);
  *(void *)((*(void *)(v10 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 32)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_100057FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v13, v14);
  *(void *)((*(void *)(v10 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 24)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1000580AC(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64) + v11;
  uint64_t v14 = *(void *)(v9 + 64) + 7;
  if (v12 < a2)
  {
    unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v16 = v15 & 0xFFFFFFF8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v12 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v15);
        if (!v20) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v15);
        if (v20) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000582F4);
      case 4:
        int v20 = *(int *)((char *)a1 + v15);
        if (!v20) {
          break;
        }
LABEL_24:
        int v22 = v20 - 1;
        if (v16)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v12 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if (v8 == v12)
  {
    uint64_t v24 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    return v24(a1, v8, v6);
  }
  else
  {
    unint64_t v25 = ((unint64_t)a1 + v13) & ~v11;
    if (v10 == v12)
    {
      uint64_t v26 = *(uint64_t (**)(unint64_t))(v9 + 48);
      return v26(v25);
    }
    else
    {
      unint64_t v27 = *(void *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
      if (v27 >= 0xFFFFFFFF) {
        LODWORD(v27) = -1;
      }
      return (v27 + 1);
    }
  }
}

void sub_100058308(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + v13;
  uint64_t v16 = *(void *)(v11 + 64) + 7;
  unint64_t v17 = ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v14 >= a3)
  {
    int v20 = 0;
    int v21 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_19:
      uint64_t v22 = ~v13;
      switch(v20)
      {
        case 1:
          *((unsigned char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)((char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v17) = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v10 == v14)
            {
              unint64_t v25 = *(void (**)(_DWORD *, uint64_t))(v9 + 56);
              v25(a1, a2);
            }
            else
            {
              unint64_t v26 = ((unint64_t)a1 + v15) & v22;
              if (v12 == v14)
              {
                unint64_t v27 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
                v27(v26, a2, v12);
              }
              else
              {
                if ((a2 & 0x80000000) != 0) {
                  uint64_t v28 = a2 ^ 0x80000000;
                }
                else {
                  uint64_t v28 = (a2 - 1);
                }
                *(void *)((v16 + v26) & 0xFFFFFFFFFFFFFFF8) = v28;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v18 = a3 - v14 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    int v21 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_19;
    }
  }
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v23 = v21;
  }
  else {
    int v23 = 1;
  }
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v24 = ~v14 + a2;
    bzero(a1, ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v24;
  }
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17) = v23;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v17) = v23;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1000585B0);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = v23;
      break;
    default:
      return;
  }
}

uint64_t sub_1000585D8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000587C0(uint64_t a1)
{
  uint64_t v2 = sub_100029F90(&qword_10017D230);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100058820@<X0>(uint64_t *a1@<X8>)
{
  return sub_100057984(a1);
}

ValueMetadata *type metadata accessor for KeypadButtonStyle()
{
  return &type metadata for KeypadButtonStyle;
}

uint64_t sub_10005883C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100058858()
{
  return sub_10002A8D8(&qword_10017D2F8, &qword_10017D2F0);
}

uint64_t sub_100058894(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 17);
    uint64_t v10 = *((unsigned __int8 *)a2 + 16);
    swift_retain();
    sub_100058C38(v8, v10, v9);
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v10;
    *(unsigned char *)(a1 + 17) = v9;
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = a1 + v15;
    uint64_t v18 = (uint64_t)a2 + v15;
    *(unsigned char *)uint64_t v17 = *(unsigned char *)v18;
    *(void *)(v17 + 8) = *(void *)(v18 + 8);
    uint64_t v19 = a1 + v16;
    uint64_t v20 = (uint64_t)a2 + v16;
    *(unsigned char *)uint64_t v19 = *(unsigned char *)v20;
    *(void *)(v19 + 8) = *(void *)(v20 + 8);
    uint64_t v21 = a3[9];
    uint64_t v22 = a3[10];
    uint64_t v23 = a1 + v21;
    uint64_t v24 = (uint64_t)a2 + v21;
    *(unsigned char *)uint64_t v23 = *(unsigned char *)v24;
    *(void *)(v23 + 8) = *(void *)(v24 + 8);
    uint64_t v25 = a1 + v22;
    uint64_t v26 = (uint64_t)a2 + v22;
    uint64_t v27 = type metadata accessor for Date();
    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v62(v25, v26, v27);
    uint64_t v28 = sub_100029F90(&qword_10017D320);
    *(void *)(v25 + *(int *)(v28 + 28)) = *(void *)(v26 + *(int *)(v28 + 28));
    uint64_t v29 = a3[11];
    uint64_t v30 = a3[12];
    uint64_t v31 = a1 + v29;
    uint64_t v32 = (uint64_t)a2 + v29;
    *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
    *(void *)(v31 + 8) = *(void *)(v32 + 8);
    uint64_t v33 = (void *)(a1 + v30);
    uint64_t v34 = (uint64_t)a2 + v30;
    long long v36 = *(void **)v34;
    uint64_t v35 = *(void *)(v34 + 8);
    void *v33 = *(void *)v34;
    v33[1] = v35;
    uint64_t v37 = a3[13];
    uint64_t v38 = a1 + v37;
    double v39 = (uint64_t *)((char *)a2 + v37);
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    LOBYTE(v26) = *((unsigned char *)v39 + 16);
    swift_retain();
    swift_retain();
    id v42 = v36;
    swift_retain();
    sub_10003A618();
    *(void *)uint64_t v38 = v40;
    *(void *)(v38 + 8) = v41;
    uint64_t v43 = a3[14];
    uint64_t v44 = a3[15];
    uint64_t v45 = *(void **)((char *)a2 + v43);
    *(unsigned char *)(v38 + 16) = v26;
    *(void *)(a1 + v43) = v45;
    uint64_t v46 = (void *)(a1 + v44);
    uint64_t v47 = (uint64_t *)((char *)a2 + v44);
    uint64_t v48 = *v47;
    uint64_t v49 = v47[1];
    uint64_t v50 = a3[16];
    uint64_t v51 = a3[17];
    uint64_t v52 = *(uint64_t *)((char *)a2 + v50);
    void *v46 = v48;
    v46[1] = v49;
    *(void *)(a1 + v50) = v52;
    unint64_t v53 = (void *)(a1 + v51);
    uint64_t v54 = *(uint64_t *)((char *)a2 + v51 + 8);
    *unint64_t v53 = *(uint64_t *)((char *)a2 + v51);
    v53[1] = v54;
    uint64_t v55 = a3[18];
    uint64_t v63 = a1 + v55;
    uint64_t v56 = (uint64_t)a2 + v55;
    uint64_t v57 = type metadata accessor for NSNotificationCenter.Publisher();
    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16);
    id v59 = v45;
    swift_retain();
    swift_retain();
    v58(v63, v56, v57);
    v58(a1 + a3[19], (uint64_t)a2 + a3[19], v57);
    v58(a1 + a3[20], (uint64_t)a2 + a3[20], v57);
    v58(a1 + a3[21], (uint64_t)a2 + a3[21], v57);
    uint64_t v60 = a3[23];
    *(unsigned char *)(a1 + a3[22]) = *((unsigned char *)a2 + a3[22]);
    *(void *)(a1 + v60) = *(uint64_t *)((char *)a2 + v60);
  }
  return a1;
}

uint64_t sub_100058C38(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100058C44(uint64_t a1, int *a2)
{
  swift_release();
  sub_100058E98(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 17));
  uint64_t v4 = a1 + a2[6];
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = a1 + a2[10];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  sub_100029F90(&qword_10017D320);
  swift_release();
  swift_release();

  swift_release();
  sub_10003A744();

  swift_release();
  swift_release();
  uint64_t v8 = a1 + a2[18];
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v12)((void *)(v9 - 8), v8, v9);
  v12(a1 + a2[19], v9);
  v12(a1 + a2[20], v9);
  uint64_t v10 = a1 + a2[21];

  return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v9);
}

uint64_t sub_100058E98(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100058EA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 17);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 16);
  swift_retain();
  sub_100058C38(v6, v8, v7);
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 17) = v7;
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else
  {
    *uint64_t v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(unsigned char *)uint64_t v17 = *(unsigned char *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(unsigned char *)uint64_t v21 = *(unsigned char *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v60(v23, v24, v25);
  uint64_t v26 = sub_100029F90(&qword_10017D320);
  *(void *)(v23 + *(int *)(v26 + 28)) = *(void *)(v24 + *(int *)(v26 + 28));
  uint64_t v27 = a3[11];
  uint64_t v28 = a3[12];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(unsigned char *)uint64_t v29 = *(unsigned char *)v30;
  *(void *)(v29 + 8) = *(void *)(v30 + 8);
  uint64_t v31 = (void *)(a1 + v28);
  uint64_t v32 = a2 + v28;
  uint64_t v34 = *(void **)v32;
  uint64_t v33 = *(void *)(v32 + 8);
  *uint64_t v31 = *(void *)v32;
  v31[1] = v33;
  uint64_t v35 = a3[13];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  LOBYTE(v24) = *((unsigned char *)v37 + 16);
  swift_retain();
  swift_retain();
  id v40 = v34;
  swift_retain();
  sub_10003A618();
  *(void *)uint64_t v36 = v38;
  *(void *)(v36 + 8) = v39;
  uint64_t v41 = a3[14];
  uint64_t v42 = a3[15];
  uint64_t v43 = *(void **)(a2 + v41);
  *(unsigned char *)(v36 + 16) = v24;
  *(void *)(a1 + v41) = v43;
  uint64_t v44 = (void *)(a1 + v42);
  uint64_t v45 = (uint64_t *)(a2 + v42);
  uint64_t v46 = *v45;
  uint64_t v47 = v45[1];
  uint64_t v48 = a3[16];
  uint64_t v49 = a3[17];
  uint64_t v50 = *(void *)(a2 + v48);
  *uint64_t v44 = v46;
  v44[1] = v47;
  *(void *)(a1 + v48) = v50;
  uint64_t v51 = (void *)(a1 + v49);
  uint64_t v52 = *(void *)(a2 + v49 + 8);
  *uint64_t v51 = *(void *)(a2 + v49);
  v51[1] = v52;
  uint64_t v53 = a3[18];
  uint64_t v61 = a1 + v53;
  uint64_t v54 = a2 + v53;
  uint64_t v55 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 16);
  id v57 = v43;
  swift_retain();
  swift_retain();
  v56(v61, v54, v55);
  v56(a1 + a3[19], a2 + a3[19], v55);
  v56(a1 + a3[20], a2 + a3[20], v55);
  v56(a1 + a3[21], a2 + a3[21], v55);
  uint64_t v58 = a3[23];
  *(unsigned char *)(a1 + a3[22]) = *(unsigned char *)(a2 + a3[22]);
  *(void *)(a1 + v58) = *(void *)(a2 + v58);
  return a1;
}

uint64_t sub_1000591FC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 17);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 16);
  sub_100058C38(v6, v8, v7);
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 17);
  *(void *)(a1 + 8) = v6;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 17) = v7;
  sub_100058E98(v9, v11, v10);
  if (a1 != a2)
  {
    uint64_t v12 = a3[6];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (void *)(a2 + v12);
    sub_10002A840(a1 + v12, &qword_10017B928);
    sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      void *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)uint64_t v17 = *(unsigned char *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_retain();
  swift_release();
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(unsigned char *)uint64_t v20 = *(unsigned char *)v21;
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  swift_retain();
  swift_release();
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(unsigned char *)uint64_t v23 = *(unsigned char *)v24;
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_retain();
  swift_release();
  uint64_t v25 = a3[10];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 24))(v26, v27, v28);
  uint64_t v29 = sub_100029F90(&qword_10017D320);
  *(void *)(v26 + *(int *)(v29 + 28)) = *(void *)(v27 + *(int *)(v29 + 28));
  swift_retain();
  swift_release();
  uint64_t v30 = a3[11];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  swift_retain();
  swift_release();
  uint64_t v33 = a3[12];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = a2 + v33;
  uint64_t v36 = *(void **)(a1 + v33);
  uint64_t v37 = *(void **)(a2 + v33);
  *uint64_t v34 = v37;
  id v38 = v37;

  v34[1] = *(void *)(v35 + 8);
  swift_retain();
  swift_release();
  uint64_t v39 = a3[13];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v42 = *v41;
  uint64_t v43 = v41[1];
  LOBYTE(v35) = *((unsigned char *)v41 + 16);
  sub_10003A618();
  *(void *)uint64_t v40 = v42;
  *(void *)(v40 + 8) = v43;
  *(unsigned char *)(v40 + 16) = v35;
  sub_10003A744();
  uint64_t v44 = a3[14];
  uint64_t v45 = *(void **)(a2 + v44);
  uint64_t v46 = *(void **)(a1 + v44);
  *(void *)(a1 + v44) = v45;
  id v47 = v45;

  uint64_t v48 = a3[15];
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (void *)(a2 + v48);
  *uint64_t v49 = *v50;
  v49[1] = v50[1];
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  uint64_t v51 = a3[17];
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (void *)(a2 + v51);
  *uint64_t v52 = *v53;
  v52[1] = v53[1];
  swift_retain();
  swift_release();
  uint64_t v54 = a3[18];
  uint64_t v55 = a1 + v54;
  uint64_t v56 = a2 + v54;
  uint64_t v57 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 24);
  v58(v55, v56, v57);
  v58(a1 + a3[19], a2 + a3[19], v57);
  v58(a1 + a3[20], a2 + a3[20], v57);
  v58(a1 + a3[21], a2 + a3[21], v57);
  *(unsigned char *)(a1 + a3[22]) = *(unsigned char *)(a2 + a3[22]);
  *(void *)(a1 + a3[23]) = *(void *)(a2 + a3[23]);
  return a1;
}

uint64_t sub_1000595FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v7 = a3[6];
  unsigned __int8 v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  uint64_t v17 = sub_100029F90(&qword_10017D320);
  *(void *)(v14 + *(int *)(v17 + 28)) = *(void *)(v15 + *(int *)(v17 + 28));
  uint64_t v18 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v19 = a3[13];
  uint64_t v20 = a3[14];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  uint64_t v23 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  uint64_t v24 = a3[18];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  uint64_t v27 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32);
  v28(v25, v26, v27);
  v28(a1 + a3[19], a2 + a3[19], v27);
  v28(a1 + a3[20], a2 + a3[20], v27);
  v28(a1 + a3[21], a2 + a3[21], v27);
  uint64_t v29 = a3[23];
  *(unsigned char *)(a1 + a3[22]) = *(unsigned char *)(a2 + a3[22]);
  *(void *)(a1 + v29) = *(void *)(a2 + v29);
  return a1;
}

uint64_t sub_100059874(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v6 = *(unsigned char *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 17);
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 17);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v7;
  sub_100058E98(v8, v10, v9);
  if (a1 != a2)
  {
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (const void *)(a2 + v11);
    sub_10002A840(a1 + v11, &qword_10017B928);
    uint64_t v14 = sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)uint64_t v17 = *(unsigned char *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_release();
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(unsigned char *)uint64_t v20 = *(unsigned char *)v21;
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  swift_release();
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(unsigned char *)uint64_t v23 = *(unsigned char *)v24;
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_release();
  uint64_t v25 = a3[10];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 40))(v26, v27, v28);
  uint64_t v29 = sub_100029F90(&qword_10017D320);
  *(void *)(v26 + *(int *)(v29 + 28)) = *(void *)(v27 + *(int *)(v29 + 28));
  swift_release();
  uint64_t v30 = a3[11];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  swift_release();
  uint64_t v33 = a3[12];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  uint64_t v36 = *(void **)(a1 + v33);
  *uint64_t v34 = *v35;

  v34[1] = v35[1];
  swift_release();
  uint64_t v37 = a3[13];
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  char v40 = *(unsigned char *)(v39 + 16);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *(unsigned char *)(v38 + 16) = v40;
  sub_10003A744();
  uint64_t v41 = a3[14];
  uint64_t v42 = *(void **)(a1 + v41);
  *(void *)(a1 + v41) = *(void *)(a2 + v41);

  uint64_t v43 = a3[15];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (uint64_t *)(a2 + v43);
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  *uint64_t v44 = v47;
  v44[1] = v46;
  swift_release();
  uint64_t v48 = a3[17];
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  uint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (uint64_t *)(a2 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  *uint64_t v49 = v52;
  v49[1] = v51;
  swift_release();
  uint64_t v53 = a3[18];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  uint64_t v56 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 40);
  v57(v54, v55, v56);
  v57(a1 + a3[19], a2 + a3[19], v56);
  v57(a1 + a3[20], a2 + a3[20], v56);
  v57(a1 + a3[21], a2 + a3[21], v56);
  uint64_t v58 = a3[23];
  *(unsigned char *)(a1 + a3[22]) = *(unsigned char *)(a2 + a3[22]);
  *(void *)(a1 + v58) = *(void *)(a2 + v58);
  return a1;
}

uint64_t sub_100059BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100059C10);
}

uint64_t sub_100059C10(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_100029F90(&qword_10017D328);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = sub_100029F90(&qword_10017D320);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[10];
    goto LABEL_9;
  }
  uint64_t v14 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = &a1[a3[18]];

  return v15(v17, a2, v16);
}

uint64_t sub_100059D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059DA4);
}

char *sub_100059DA4(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_100029F90(&qword_10017D328);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = sub_100029F90(&qword_10017D320);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[10];
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[18]];

  return (char *)v15(v17, a2, a2, v16);
}

uint64_t type metadata accessor for LockScreenView()
{
  uint64_t result = qword_10017D388;
  if (!qword_10017D388) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100059F70()
{
  sub_10005A13C(319, (unint64_t *)&qword_10017D398, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    sub_10005A13C(319, (unint64_t *)&qword_10017D3A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
    if (v1 <= 0x3F)
    {
      type metadata accessor for NSNotificationCenter.Publisher();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_10005A13C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_10005A1A0()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_10005A1BC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10005A218(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10017C920, &qword_10017C928).n128_u64[0];
  return result;
}

__n128 sub_10005A218@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    uint64_t v19 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_10002A580(v17, a9, a16);
  uint64_t v29 = (_OWORD *)(a9 + *(int *)(sub_100029F90(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  *uint64_t v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  uint64_t v29[2] = v33;
  v29[3] = v34;
  return result;
}

double sub_10005A3E8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10005A218(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_10017D748, &qword_10017D750).n128_u64[0];
  return result;
}

uint64_t sub_10005A444@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v24;
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(void *)(a9 + 112) = *(void *)(v13 + 112);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  long long v26 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 152) = v30;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 120) = v28;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 168) = v31;

  return sub_100063A90(v13);
}

uint64_t sub_10005A620(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_10005A6F0(void *a1@<X8>)
{
  *a1 = &off_10015D338;
}

BOOL sub_10005A700(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10005A714()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10005A75C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10005A788()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10005A7CC()
{
  id v0 = [self sharedInstance];
  type metadata accessor for LockState();
  swift_allocObject();
  return LockState.init(mobileKeybagManager:)();
}

uint64_t sub_10005A82C()
{
  int v0 = sub_10005A930();
  if (!v0) {
    return LocalizedStringKey.init(stringLiteral:)();
  }
  if (v0 == 1)
  {
    type metadata accessor for LockScreenView();
    sub_100029F90(&qword_10017D460);
    State.wrappedValue.getter();
    return LocalizedStringKey.init(stringLiteral:)();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005A930()
{
  uint64_t v1 = type metadata accessor for LockScreenView();
  uint64_t result = *(unsigned __int8 *)(v0 + *(int *)(v1 + 88));
  if (result == 3)
  {
    uint64_t v3 = *(void *)(v0 + *(int *)(v1 + 56));
    if (!sub_10005277C()) {
      return 1;
    }
    unint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_devices);
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (result) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_5:
        if ((v4 & 0xC000000000000001) != 0)
        {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          id v6 = *(id *)(v4 + 32);
        }
        uint64_t v7 = v6;
        swift_bridgeObjectRelease();
        self;
        uint64_t v8 = swift_dynamicCastObjCClass();

        if (v8) {
          return 2 * (sub_100020140() != (id)2);
        }
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t sub_10005AA4C()
{
  if (qword_10017B5A0 != -1) {
    swift_once();
  }
  static ClarityUIMetrics.standardSpacing.getter();
  type metadata accessor for LockScreenView();
  sub_100029F90(&qword_10017D460);
  return State.wrappedValue.getter();
}

void sub_10005AB1C()
{
  qword_10017D300 = 0x4056800000000000;
}

void sub_10005AB30()
{
  qword_10017D308 = 0x402E000000000000;
}

uint64_t sub_10005AB40()
{
  uint64_t result = static ClarityUIMetrics.minimumComponentHeight.getter();
  qword_10017D310 = v1;
  return result;
}

double sub_10005AB60@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  BOOL v12 = (char *)&v43 - v11;
  *(void *)(a3 + 8) = swift_getKeyPath();
  *(_WORD *)(a3 + 16) = 0;
  uint64_t v13 = (int *)type metadata accessor for LockScreenView();
  uint64_t v14 = (uint64_t *)(a3 + v13[6]);
  uint64_t *v14 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3 + v13[7];
  LOBYTE(v44) = 1;
  State.init(wrappedValue:)();
  uint64_t v16 = *((void *)&v45 + 1);
  *(unsigned char *)uint64_t v15 = v45;
  *(void *)(v15 + 8) = v16;
  uint64_t v17 = a3 + v13[8];
  LOBYTE(v44) = 0;
  State.init(wrappedValue:)();
  uint64_t v18 = *((void *)&v45 + 1);
  *(unsigned char *)uint64_t v17 = v45;
  *(void *)(v17 + 8) = v18;
  uint64_t v19 = a3 + v13[9];
  LOBYTE(v44) = 0;
  State.init(wrappedValue:)();
  uint64_t v20 = *((void *)&v45 + 1);
  *(unsigned char *)uint64_t v19 = v45;
  *(void *)(v19 + 8) = v20;
  Date.init()();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  State.init(wrappedValue:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  uint64_t v21 = a3 + v13[11];
  LOBYTE(v44) = 0;
  State.init(wrappedValue:)();
  uint64_t v22 = *((void *)&v45 + 1);
  *(unsigned char *)uint64_t v21 = v45;
  *(void *)(v21 + 8) = v22;
  uint64_t v23 = v13[12];
  uint64_t v44 = 0;
  sub_100029F90(&qword_10017D698);
  State.init(wrappedValue:)();
  *(_OWORD *)(a3 + v23) = v45;
  uint64_t v24 = a3 + v13[13];
  *(void *)uint64_t v24 = sub_10005A7CC;
  *(void *)(v24 + 8) = 0;
  *(unsigned char *)(v24 + 16) = 0;
  uint64_t v25 = v13[14];
  if (qword_10017B588 != -1) {
    swift_once();
  }
  long long v26 = (void *)qword_1001864B0;
  *(void *)(a3 + v25) = qword_1001864B0;
  uint64_t v27 = (uint64_t *)(a3 + v13[15]);
  uint64_t v28 = qword_10017B5E8;
  id v29 = v26;
  if (v28 != -1) {
    swift_once();
  }
  type metadata accessor for Applications(0);
  sub_100062020(&qword_10017EF10, (void (*)(uint64_t))type metadata accessor for Applications);
  swift_retain();
  uint64_t *v27 = ObservedObject.init(wrappedValue:)();
  v27[1] = v30;
  *(void *)(a3 + v13[16]) = 0;
  uint64_t v31 = v13[17];
  if (qword_10017B620 != -1) {
    swift_once();
  }
  long long v32 = (uint64_t *)(a3 + v31);
  type metadata accessor for LockScreenWallpaperMetadataProvider();
  sub_100062020((unint64_t *)&qword_10017D4F8, (void (*)(uint64_t))type metadata accessor for LockScreenWallpaperMetadataProvider);
  swift_retain();
  uint64_t *v32 = ObservedObject.init(wrappedValue:)();
  v32[1] = v33;
  long long v34 = self;
  id v35 = [v34 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  id v36 = [v34 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  id v37 = [v34 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  id v38 = [v34 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v39 = v13[22];
  uint64_t v40 = v13[23];
  static ClarityUIMetrics.backButtonPadding.getter();
  double result = v41 * 0.5;
  *(double *)(a3 + v40) = result;
  *(void *)a3 = a1;
  *(unsigned char *)(a3 + v39) = a2;
  return result;
}

uint64_t sub_10005B0B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v73 = a1;
  uint64_t v2 = type metadata accessor for LockScreenView();
  uint64_t v82 = *(void *)(v2 - 8);
  uint64_t v80 = *(void *)(v82 + 64);
  uint64_t v3 = v2 - 8;
  uint64_t v75 = v2 - 8;
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v83 = *(void *)(v6 - 8);
  uint64_t v7 = v83;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100029F90(&qword_10017D418);
  __chkstk_darwin(v10 - 8);
  BOOL v12 = (uint64_t *)((char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_100029F90(&qword_10017D420);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v76 = (uint64_t)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100029F90(&qword_10017D428) - 8;
  __chkstk_darwin(v68);
  uint64_t v67 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_100029F90(&qword_10017D430) - 8;
  __chkstk_darwin(v70);
  uint64_t v69 = (uint64_t)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_100029F90(&qword_10017D438) - 8;
  __chkstk_darwin(v72);
  uint64_t v71 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *BOOL v12 = static Alignment.center.getter();
  v12[1] = v19;
  uint64_t v20 = sub_100029F90(&qword_10017D440);
  sub_10005B824(v1, (uint64_t)v12 + *(int *)(v20 + 44));
  uint64_t v21 = v1 + *(int *)(v3 + 80);
  uint64_t v77 = (uint64_t *)v1;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v22(v9, v21, v6);
  uint64_t v79 = type metadata accessor for LockScreenView;
  uint64_t v23 = (uint64_t)v5;
  int v81 = v5;
  sub_100063288(v1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LockScreenView);
  uint64_t v24 = *(unsigned __int8 *)(v82 + 80);
  uint64_t v82 = ((v24 + 16) & ~v24) + v80;
  uint64_t v25 = (v24 + 16) & ~v24;
  uint64_t v80 = v24 | 7;
  uint64_t v26 = swift_allocObject();
  uint64_t v74 = v25;
  sub_100061034(v23, v26 + v25);
  uint64_t v27 = v76;
  sub_10002A580((uint64_t)v12, v76, &qword_10017D418);
  v22((char *)(v27 + *(int *)(v14 + 60)), (uint64_t)v9, v6);
  uint64_t v28 = (uint64_t (**)(uint64_t))(v27 + *(int *)(v14 + 64));
  void *v28 = sub_100061098;
  v28[1] = (uint64_t (*)(uint64_t))v26;
  id v29 = *(void (**)(char *, uint64_t))(v83 + 8);
  v83 += 8;
  int v78 = v29;
  v29(v9, v6);
  sub_10002A840((uint64_t)v12, &qword_10017D418);
  uint64_t v30 = v75;
  uint64_t v31 = (uint64_t)v77;
  v22(v9, (uint64_t)v77 + *(int *)(v75 + 84), v6);
  uint64_t v32 = v31;
  uint64_t v33 = (uint64_t)v81;
  sub_100063288(v32, (uint64_t)v81, (uint64_t (*)(void))v79);
  uint64_t v34 = swift_allocObject();
  sub_100061034(v33, v34 + v25);
  uint64_t v35 = v76;
  uint64_t v36 = v67;
  sub_10002A580(v76, v67, &qword_10017D420);
  uint64_t v37 = v68;
  v22((char *)(v36 + *(int *)(v68 + 60)), (uint64_t)v9, v6);
  id v38 = (uint64_t (**)(uint64_t))(v36 + *(int *)(v37 + 64));
  char *v38 = sub_1000610B4;
  v38[1] = (uint64_t (*)(uint64_t))v34;
  uint64_t v65 = v6;
  v78(v9, v6);
  sub_10002A840(v35, &qword_10017D420);
  uint64_t v39 = (uint64_t)v77;
  v22(v9, (uint64_t)v77 + *(int *)(v30 + 88), v6);
  uint64_t v40 = v39;
  uint64_t v41 = (uint64_t)v81;
  sub_100063288(v40, (uint64_t)v81, (uint64_t (*)(void))v79);
  uint64_t v42 = swift_allocObject();
  uint64_t v43 = v74;
  sub_100061034(v41, v42 + v74);
  uint64_t v44 = v69;
  sub_10002A580(v36, v69, &qword_10017D428);
  uint64_t v45 = v70;
  uint64_t v46 = v44 + *(int *)(v70 + 60);
  uint64_t v47 = v65;
  uint64_t v66 = (void (*)(uint64_t, char *, uint64_t))v22;
  v22((char *)v46, (uint64_t)v9, v65);
  uint64_t v48 = (uint64_t (**)(uint64_t))(v44 + *(int *)(v45 + 64));
  uint64_t v49 = v44;
  *uint64_t v48 = sub_1000610D0;
  v48[1] = (uint64_t (*)(uint64_t))v42;
  v78(v9, v47);
  sub_10002A840(v36, &qword_10017D428);
  uint64_t v50 = v77;
  uint64_t v51 = v47;
  v22(v9, (uint64_t)v77 + *(int *)(v75 + 92), v47);
  uint64_t v52 = (uint64_t)v81;
  uint64_t v53 = v79;
  sub_100063288((uint64_t)v50, (uint64_t)v81, (uint64_t (*)(void))v79);
  uint64_t v54 = swift_allocObject();
  sub_100061034(v52, v54 + v43);
  uint64_t v55 = v71;
  sub_10002A580(v49, v71, &qword_10017D430);
  uint64_t v56 = v72;
  v66(v55 + *(int *)(v72 + 60), v9, v51);
  uint64_t v57 = (uint64_t (**)(uint64_t))(v55 + *(int *)(v56 + 64));
  *uint64_t v57 = sub_1000610EC;
  v57[1] = (uint64_t (*)(uint64_t))v54;
  v78(v9, v51);
  sub_10002A840(v49, &qword_10017D430);
  uint64_t v58 = *v50;
  uint64_t v59 = (uint64_t)v81;
  sub_100063288((uint64_t)v50, (uint64_t)v81, (uint64_t (*)(void))v53);
  uint64_t v60 = swift_allocObject();
  sub_100061034(v59, v60 + v74);
  uint64_t v61 = v73;
  sub_10002A580(v55, v73, &qword_10017D438);
  uint64_t v62 = sub_100029F90(&qword_10017D448);
  *(void *)(v61 + *(int *)(v62 + 52)) = v58;
  uint64_t v63 = (uint64_t (**)())(v61 + *(int *)(v62 + 56));
  char *v63 = sub_100061108;
  v63[1] = (uint64_t (*)())v60;
  swift_retain();
  return sub_10002A840(v55, &qword_10017D438);
}

uint64_t sub_10005B824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v45 = type metadata accessor for OpacityTransition();
  uint64_t v3 = *(void *)(v45 - 8);
  uint64_t v4 = __chkstk_darwin(v45);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v45 - v7;
  uint64_t v9 = sub_100029F90(&qword_10017D468);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v48 = sub_100029F90(&qword_10017D470);
  uint64_t v12 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100029F90(&qword_10017D478);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v46 = (uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v45 - v18;
  uint64_t v20 = type metadata accessor for LockScreenView();
  uint64_t v21 = *(int *)(v20 + 28);
  uint64_t v49 = a1;
  uint64_t v22 = (char *)(a1 + v21);
  char v23 = *v22;
  uint64_t v24 = *((void *)v22 + 1);
  LOBYTE(v51) = v23;
  uint64_t v52 = v24;
  sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.getter();
  if (v50 == 1)
  {
    *uint64_t v11 = static Alignment.center.getter();
    v11[1] = v25;
    uint64_t v26 = sub_100029F90(&qword_10017D488);
    sub_10005C2B8(v49, (uint64_t)v11 + *(int *)(v26 + 44));
    OpacityTransition.init()();
    uint64_t v27 = v6;
    uint64_t v28 = v45;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v27, v8, v45);
    sub_100062020(&qword_10017CD08, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
    uint64_t v29 = AnyTransition.init<A>(_:)();
    sub_10002A580((uint64_t)v11, (uint64_t)v14, &qword_10017D468);
    *(void *)&v14[*(int *)(v48 + 36)] = v29;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v28);
    sub_10002A840((uint64_t)v11, &qword_10017D468);
    sub_100036F84((uint64_t)v14, (uint64_t)v19, &qword_10017D470);
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 1;
  }
  uint64_t v31 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v19, v30, 1, v48);
  uint64_t v32 = (char *)(v49 + *(int *)(v20 + 36));
  char v33 = *v32;
  uint64_t v34 = *((void *)v32 + 1);
  LOBYTE(v51) = v33;
  uint64_t v52 = v34;
  State.wrappedValue.getter();
  if (v50 == 1)
  {
    id v35 = [self sharedInstance];
    [v35 backOffTime];
    uint64_t v37 = v36;

    uint64_t v50 = v37;
    State.init(wrappedValue:)();
    uint64_t v38 = v51;
    uint64_t v31 = v52;
    uint64_t v50 = 0;
    State.init(wrappedValue:)();
    uint64_t v39 = v51;
    uint64_t v40 = v52;
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
  }
  uint64_t v41 = v46;
  sub_10002A580((uint64_t)v19, v46, &qword_10017D478);
  uint64_t v42 = v47;
  sub_10002A580(v41, v47, &qword_10017D478);
  uint64_t v43 = (uint64_t *)(v42 + *(int *)(sub_100029F90(&qword_10017D480) + 48));
  *uint64_t v43 = v38;
  v43[1] = v31;
  v43[2] = v39;
  v43[3] = v40;
  sub_100062084(v38, v31);
  sub_10002A840((uint64_t)v19, &qword_10017D478);
  sub_1000620CC(v38, v31);
  return sub_10002A840(v41, &qword_10017D478);
}

uint64_t sub_10005BD00()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10005BDAC()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10005BE18()
{
  return State.wrappedValue.setter();
}

void sub_10005BE80()
{
  Notification.object.getter();
  if (v2)
  {
    sub_10002A544(0, (unint64_t *)&qword_10017C788);
    if (swift_dynamicCast())
    {
      if ([v0 keyCode] == (id)44) {
        sub_10005BF3C();
      }
    }
  }
  else
  {
    sub_10002A840((uint64_t)v1, &qword_10017B810);
  }
}

uint64_t sub_10005BF3C()
{
  uint64_t v0 = sub_10005A930();
  if ((_BYTE)v0)
  {
    if (v0 == 1)
    {
LABEL_5:
      __chkstk_darwin(v0);
      static Animation.default.getter();
      withAnimation<A>(_:_:)();
      return swift_release();
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for LockScreenView();
    type metadata accessor for LockState();
    sub_100062020(&qword_10017D450, (void (*)(uint64_t))&type metadata accessor for LockState);
    uint64_t v1 = StateObject.wrappedValue.getter();
    char v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 128))(v1);
    uint64_t v0 = swift_release();
    if (v2) {
      goto LABEL_5;
    }
    return sub_100060AC0();
  }
  return result;
}

uint64_t sub_10005C164()
{
  type metadata accessor for LockScreenView();
  type metadata accessor for LockState();
  sub_100062020(&qword_10017D450, (void (*)(uint64_t))&type metadata accessor for LockState);
  uint64_t v0 = StateObject.wrappedValue.getter();
  char v1 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 128))(v0);
  uint64_t v2 = swift_release();
  if ((v1 & 1) == 0) {
    return sub_100060AC0();
  }
  __chkstk_darwin(v2);
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t sub_10005C2B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v128 = a2;
  uint64_t v3 = type metadata accessor for LockScreenPasscodeView();
  __chkstk_darwin(v3 - 8);
  uint64_t v103 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_100029F90(&qword_10017D490);
  __chkstk_darwin(v102);
  uint64_t v104 = (uint64_t)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100029F90(&qword_10017D498);
  __chkstk_darwin(v6 - 8);
  uint64_t v106 = (uint64_t)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_100029F90(&qword_10017D4A0);
  uint64_t v124 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v105 = (uint64_t)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100029F90(&qword_10017D4A8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v127 = (uint64_t)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v125 = (char *)&v100 - v12;
  uint64_t v131 = type metadata accessor for LockScreenView();
  uint64_t v117 = *(void *)(v131 - 8);
  uint64_t v13 = __chkstk_darwin(v131);
  uint64_t v101 = (uint64_t)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = v14;
  __chkstk_darwin(v13);
  uint64_t v130 = (uint64_t)&v100 - v15;
  uint64_t v16 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v120 = *(void *)(v16 - 8);
  uint64_t v121 = v16;
  __chkstk_darwin(v16);
  uint64_t v119 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100029F90(&qword_10017D4B0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100029F90(&qword_10017D4B8);
  __chkstk_darwin(v21 - 8);
  char v23 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_100029F90(&qword_10017D4C0);
  __chkstk_darwin(v107);
  uint64_t v25 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = sub_100029F90(&qword_10017D4C8);
  uint64_t v109 = *(void *)(v108 - 8);
  uint64_t v26 = *(void *)(v109 + 64);
  uint64_t v27 = __chkstk_darwin(v108);
  uint64_t v110 = (uint64_t)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v100 - v28;
  uint64_t v113 = sub_100029F90(&qword_10017D4D0);
  __chkstk_darwin(v113);
  uint64_t v31 = (uint64_t *)((char *)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v112 = sub_100029F90(&qword_10017D4D8);
  __chkstk_darwin(v112);
  uint64_t v114 = (uint64_t)&v100 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_100029F90(&qword_10017D4E0);
  __chkstk_darwin(v116);
  uint64_t v111 = (uint64_t)&v100 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100029F90(&qword_10017D4E8);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v122 = (uint64_t)&v100 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v115 = (char *)&v100 - v38;
  __chkstk_darwin(v37);
  uint64_t v129 = (uint64_t)&v100 - v39;
  *(void *)uint64_t v20 = static HorizontalAlignment.center.getter();
  *((void *)v20 + 1) = 0x4014000000000000;
  v20[16] = 0;
  uint64_t v40 = (uint64_t)&v20[*(int *)(sub_100029F90(&qword_10017D4F0) + 44)];
  uint64_t v123 = a1;
  sub_10005D140(a1, v40);
  uint64_t v41 = static Alignment.center.getter();
  uint64_t v42 = (uint64_t)v23;
  sub_10005A218(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v23, 0.0, 1, INFINITY, 0, v41, v43, &qword_10017D4B0, &qword_10017D4B8);
  sub_10002A840((uint64_t)v20, &qword_10017D4B0);
  if (qword_10017B620 != -1) {
    swift_once();
  }
  type metadata accessor for LockScreenWallpaperMetadataProvider();
  sub_100062020((unint64_t *)&qword_10017D4F8, (void (*)(uint64_t))type metadata accessor for LockScreenWallpaperMetadataProvider);
  swift_retain();
  uint64_t v44 = ObservedObject.init(wrappedValue:)();
  uint64_t v46 = v45;
  uint64_t v47 = static Alignment.center.getter();
  uint64_t v49 = v48;
  sub_10002A580(v42, (uint64_t)v25, &qword_10017D4B8);
  uint64_t v50 = (uint64_t *)&v25[*(int *)(v107 + 36)];
  *uint64_t v50 = v44;
  v50[1] = v46;
  void v50[2] = v47;
  v50[3] = v49;
  sub_10002A840(v42, &qword_10017D4B8);
  LOBYTE(v44) = static Edge.Set.bottom.getter();
  sub_10002A580((uint64_t)v25, (uint64_t)v29, &qword_10017D4C0);
  v29[*(int *)(v108 + 36)] = v44;
  sub_10002A840((uint64_t)v25, &qword_10017D4C0);
  uint64_t v51 = v110;
  sub_10002A580((uint64_t)v29, v110, &qword_10017D4C8);
  unint64_t v52 = (*(unsigned __int8 *)(v109 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
  uint64_t v53 = swift_allocObject();
  sub_100036F84(v51, v53 + v52, &qword_10017D4C8);
  *uint64_t v31 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  uint64_t v54 = (uint64_t (**)())((char *)v31 + *(int *)(v113 + 36));
  *uint64_t v54 = sub_10006248C;
  v54[1] = (uint64_t (*)())v53;
  sub_10002A840((uint64_t)v29, &qword_10017D4C8);
  uint64_t v55 = v114;
  sub_10002A580((uint64_t)v31, v114, &qword_10017D4D0);
  *(void *)(v55 + *(int *)(v112 + 36)) = 0x3FF0000000000000;
  sub_10002A840((uint64_t)v31, &qword_10017D4D0);
  id v56 = [self defaultCenter];
  uint64_t v57 = v119;
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v58 = v123;
  uint64_t v59 = v130;
  sub_100063288(v123, v130, (uint64_t (*)(void))type metadata accessor for LockScreenView);
  uint64_t v60 = *(unsigned __int8 *)(v117 + 80);
  uint64_t v61 = (v60 + 16) & ~v60;
  uint64_t v117 = v60 | 7;
  v118 += v61;
  uint64_t v62 = swift_allocObject();
  sub_100061034(v59, v62 + v61);
  uint64_t v63 = v111;
  sub_10002A580(v55, v111, &qword_10017D4D8);
  uint64_t v64 = v116;
  uint64_t v66 = v120;
  uint64_t v65 = v121;
  (*(void (**)(uint64_t, char *, uint64_t))(v120 + 16))(v63 + *(int *)(v116 + 52), v57, v121);
  uint64_t v67 = (uint64_t (**)(uint64_t))(v63 + *(int *)(v64 + 56));
  *uint64_t v67 = sub_10006252C;
  v67[1] = (uint64_t (*)(uint64_t))v62;
  (*(void (**)(char *, uint64_t))(v66 + 8))(v57, v65);
  sub_10002A840(v55, &qword_10017D4D8);
  uint64_t v68 = v58 + *(int *)(v131 + 32);
  uint64_t v69 = *(void *)(v68 + 8);
  char v132 = *(unsigned char *)v68;
  uint64_t v133 = v69;
  sub_100029F90(&qword_10017B8A8);
  State.wrappedValue.getter();
  sub_10002A8D8(&qword_10017D558, &qword_10017D4E0);
  uint64_t v70 = (uint64_t)v115;
  View.accessibilityHidden(_:)();
  sub_10002A840(v63, &qword_10017D4E0);
  uint64_t v71 = v129;
  sub_100036F84(v70, v129, &qword_10017D4E8);
  uint64_t v72 = *(void *)(v68 + 8);
  char v132 = *(unsigned char *)v68;
  uint64_t v133 = v72;
  State.wrappedValue.getter();
  uint64_t v73 = 1;
  uint64_t v75 = (uint64_t)v125;
  uint64_t v74 = v126;
  if (v134 == 1)
  {
    uint64_t v76 = sub_100008E70();
    uint64_t v77 = 6;
    if (v76 != 1) {
      uint64_t v77 = 0;
    }
    if (!v76) {
      uint64_t v77 = 4;
    }
    uint64_t v121 = v77;
    uint64_t v78 = v74;
    uint64_t v79 = v130;
    sub_100063288(v58, v130, (uint64_t (*)(void))type metadata accessor for LockScreenView);
    uint64_t v80 = swift_allocObject();
    sub_100061034(v79, v80 + v61);
    uint64_t v81 = v101;
    sub_100063288(v58, v101, (uint64_t (*)(void))type metadata accessor for LockScreenView);
    uint64_t v82 = swift_allocObject();
    uint64_t v83 = v81;
    uint64_t v74 = v78;
    sub_100061034(v83, v82 + v61);
    uint64_t v84 = v103;
    uint64_t v85 = v80;
    uint64_t v71 = v129;
    sub_1000A6624(v121, (uint64_t)sub_1000625CC, v85, (uint64_t)sub_100062650, v82, v103);
    uint64_t v86 = v104;
    sub_100063288(v84, v104, (uint64_t (*)(void))type metadata accessor for LockScreenPasscodeView);
    *(void *)(v86 + *(int *)(v102 + 36)) = 0x4000000000000000;
    sub_1000632F0(v84, (uint64_t (*)(void))type metadata accessor for LockScreenPasscodeView);
    uint64_t v87 = static Alignment.center.getter();
    uint64_t v88 = v106;
    sub_10005A218(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v106, 0.0, 1, INFINITY, 0, v87, v89, &qword_10017D490, &qword_10017D498);
    sub_10002A840(v86, &qword_10017D490);
    uint64_t v90 = Namespace.wrappedValue.getter();
    type metadata accessor for NamespaceWrapper();
    uint64_t v91 = swift_allocObject();
    *(void *)(v91 + 16) = v90;
    sub_100062020(&qword_10017D568, (void (*)(uint64_t))type metadata accessor for NamespaceWrapper);
    uint64_t v92 = static ObservableObject.environmentStore.getter();
    uint64_t v93 = v105;
    sub_10002A580(v88, v105, &qword_10017D498);
    uint64_t v94 = (uint64_t *)(v93 + *(int *)(v74 + 36));
    *uint64_t v94 = v92;
    v94[1] = v91;
    sub_10002A840(v88, &qword_10017D498);
    sub_100036F84(v93, v75, &qword_10017D4A0);
    uint64_t v73 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56))(v75, v73, 1, v74);
  uint64_t v95 = v122;
  sub_10002A580(v71, v122, &qword_10017D4E8);
  uint64_t v96 = v127;
  sub_10002A580(v75, v127, &qword_10017D4A8);
  uint64_t v97 = v128;
  sub_10002A580(v95, v128, &qword_10017D4E8);
  uint64_t v98 = sub_100029F90(&qword_10017D560);
  sub_10002A580(v96, v97 + *(int *)(v98 + 48), &qword_10017D4A8);
  sub_10002A840(v75, &qword_10017D4A8);
  sub_10002A840(v71, &qword_10017D4E8);
  sub_10002A840(v96, &qword_10017D4A8);
  return sub_10002A840(v95, &qword_10017D4E8);
}

void sub_10005D140(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v185 = a2;
  uint64_t v3 = sub_100029F90(&qword_10017D5A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v150 = (uint64_t *)((char *)&v147 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v177 = sub_100029F90(&qword_10017D5A8);
  uint64_t v5 = __chkstk_darwin(v177);
  uint64_t v149 = (uint64_t)&v147 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v151 = (uint64_t)&v147 - v7;
  uint64_t v174 = sub_100029F90(&qword_10017D520);
  __chkstk_darwin(v174);
  uint64_t v176 = (uint64_t)&v147 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100029F90(&qword_10017D5B0);
  __chkstk_darwin(v9 - 8);
  uint64_t v153 = (uint64_t)&v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = sub_100029F90(&qword_10017D5B8);
  uint64_t v11 = __chkstk_darwin(v175);
  uint64_t v152 = (uint64_t)&v147 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v154 = (uint64_t)&v147 - v13;
  uint64_t v14 = sub_100029F90(&qword_10017D5C0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  int v184 = (char *)&v147 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v183 = (char *)&v147 - v17;
  uint64_t v18 = type metadata accessor for LockScreenView();
  uint64_t v168 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v169 = v19;
  uint64_t v170 = (uint64_t)&v147 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for Material();
  uint64_t v164 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  uint64_t v163 = (char *)&v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100029F90(&qword_10017CB30);
  __chkstk_darwin(v21 - 8);
  uint64_t v162 = (char *)&v147 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = type metadata accessor for Date();
  uint64_t v158 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  v155 = (char *)&v147 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v24 - 8);
  uint64_t v25 = sub_100029F90(&qword_10017D510);
  __chkstk_darwin(v25 - 8);
  uint64_t v167 = (char *)&v147 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = sub_100029F90(&qword_10017D5C8);
  __chkstk_darwin(v166);
  uint64_t v173 = (uint64_t)&v147 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = sub_100029F90(&qword_10017D508);
  uint64_t v179 = *(void *)(v180 - 8);
  uint64_t v28 = __chkstk_darwin(v180);
  uint64_t v172 = (uint64_t)&v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v171 = (uint64_t)&v147 - v30;
  uint64_t v31 = sub_100029F90(&qword_10017D5D0);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  uint64_t v182 = (char *)&v147 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v181 = (uint64_t)&v147 - v34;
  uint64_t v35 = type metadata accessor for ColorScheme();
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v147 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LockState();
  sub_100062020(&qword_10017D450, (void (*)(uint64_t))&type metadata accessor for LockState);
  uint64_t v39 = StateObject.wrappedValue.getter();
  int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 128))(v39);
  swift_release();
  uint64_t v178 = a1 + *(int *)(v18 + 68);
  uint64_t v157 = a1 + *(int *)(v18 + 24);
  sub_100061BD8(&qword_10017B928, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v38);
  id v41 = sub_1000B7C58();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v36 + 8);
  uint64_t v161 = v35;
  uint64_t v160 = v36 + 8;
  uint64_t v156 = v42;
  v42(v38, v35);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v192 = v200;
  int v191 = v201;
  uint64_t v190 = v202;
  int v189 = v203;
  uint64_t v188 = v204;
  uint64_t v187 = v205;
  int v186 = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  sub_10002A544(0, (unint64_t *)&qword_10017BF70);
  id v51 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  unsigned int v52 = [v51 lockScreenClockEnabled];

  id v194 = v41;
  int v193 = v40;
  if (v52)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v53._countAndFlagsBits = 0;
    v53._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v53);
    uint64_t v148 = a1;
    sub_100029F90(&qword_10017D320);
    uint64_t v54 = v155;
    State.wrappedValue.getter();
    if (qword_10017B5A8 != -1) {
      swift_once();
    }
    uint64_t v55 = (void *)qword_10017D318;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v57 = [v55 stringFromDate:isa];

    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v59;

    (*(void (**)(char *, uint64_t))(v158 + 8))(v54, v159);
    v61._countAndFlagsBits = v58;
    v61._object = v60;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v61);
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 0;
    v62._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v62);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v63 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v65 = v64;
    char v67 = v66;
    if (qword_10017B590 != -1) {
      swift_once();
    }
    static Font.Weight.semibold.getter();
    uint64_t v68 = enum case for Font.Design.rounded(_:);
    uint64_t v69 = type metadata accessor for Font.Design();
    uint64_t v70 = *(void *)(v69 - 8);
    uint64_t v71 = (uint64_t)v162;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 104))(v162, v68, v69);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v71, 0, 1, v69);
    static Font.system(size:weight:design:)();
    sub_10002A840(v71, &qword_10017CB30);
    LOBYTE(v71) = v67 & 1;
    uint64_t v72 = Text.font(_:)();
    uint64_t v74 = v73;
    LOBYTE(v70) = v75;
    swift_release();
    sub_100041A08(v63, v65, v71);
    swift_bridgeObjectRelease();
    sub_100061BD8(&qword_10017B928, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v38);
    sub_1000B7C58();
    v156(v38, v161);
    *(void *)&long long v195 = Color.init(_:)();
    uint64_t v76 = Text.foregroundStyle<A>(_:)();
    uint64_t v78 = v77;
    LOBYTE(v71) = v79 & 1;
    sub_100041A08(v72, v74, v70 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v80 = v163;
    static Material.ultraThick.getter();
    uint64_t v81 = v165;
    uint64_t v82 = Text.foregroundStyle<A>(_:)();
    uint64_t v84 = v83;
    uint64_t v86 = v85;
    char v88 = v87 & 1;
    sub_100041A08(v76, v78, v71);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v164 + 8))(v80, v81);
    uint64_t v89 = v148;
    uint64_t v90 = v170;
    sub_100063288(v148, v170, (uint64_t (*)(void))type metadata accessor for LockScreenView);
    unint64_t v91 = (*(unsigned __int8 *)(v168 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80);
    uint64_t v92 = swift_allocObject();
    sub_100061034(v90, v92 + v91);
    *(void *)&long long v195 = v82;
    *((void *)&v195 + 1) = v84;
    LOBYTE(v196) = v88;
    *((void *)&v196 + 1) = v86;
    *(void *)&long long v197 = sub_100062BD8;
    *((void *)&v197 + 1) = v92;
    uint64_t v198 = 0;
    uint64_t v199 = 0;
    sub_100029F90(&qword_10017D648);
    sub_100062C64();
    uint64_t v93 = (uint64_t)v167;
    View.accessibilityIdentifier(_:)();
    sub_100041A08(v82, v84, v88);
    swift_release();
    swift_bridgeObjectRelease();
    LOBYTE(v86) = static Edge.Set.horizontal.getter();
    static ClarityUIMetrics.componentHorizontalPadding.getter();
    EdgeInsets.init(_all:)();
    uint64_t v95 = v94;
    uint64_t v97 = v96;
    uint64_t v99 = v98;
    uint64_t v101 = v100;
    uint64_t v102 = v173;
    sub_10002A580(v93, v173, &qword_10017D510);
    uint64_t v103 = v102 + *(int *)(v166 + 36);
    *(unsigned char *)uint64_t v103 = v86;
    *(void *)(v103 + 8) = v95;
    *(void *)(v103 + 16) = v97;
    *(void *)(v103 + 24) = v99;
    *(void *)(v103 + 32) = v101;
    *(unsigned char *)(v103 + 40) = 0;
    sub_10002A840(v93, &qword_10017D510);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    unint64_t v104 = *((void *)&v195 + 1) >> 60;
    if (*((void *)&v195 + 1) >> 60 != 15) {
      sub_100062CE0(v195, *((unint64_t *)&v195 + 1));
    }
    uint64_t v105 = v172;
    sub_10002A580(v102, v172, &qword_10017D5C8);
    uint64_t v106 = v180;
    *(unsigned char *)(v105 + *(int *)(v180 + 36)) = v104 < 0xF;
    sub_10002A840(v102, &qword_10017D5C8);
    uint64_t v107 = v171;
    sub_100036F84(v105, v171, &qword_10017D508);
    uint64_t v108 = v181;
    sub_100036F84(v107, v181, &qword_10017D508);
    uint64_t v109 = 0;
    uint64_t v110 = v185;
    uint64_t v111 = (uint64_t)v184;
    uint64_t v112 = (uint64_t)v183;
    uint64_t v113 = (uint64_t)v182;
  }
  else
  {
    uint64_t v109 = 1;
    uint64_t v110 = v185;
    uint64_t v111 = (uint64_t)v184;
    uint64_t v112 = (uint64_t)v183;
    uint64_t v113 = (uint64_t)v182;
    uint64_t v108 = v181;
    uint64_t v89 = a1;
    uint64_t v106 = v180;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56))(v108, v109, 1, v106);
  if (sub_10005A930())
  {
    if (sub_10005A930() != 1)
    {
      uint64_t v139 = sub_100029F90(&qword_10017D518);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 56))(v112, 1, 1, v139);
      goto LABEL_18;
    }
    uint64_t v114 = static Alignment.bottom.getter();
    uint64_t v115 = (uint64_t)v150;
    *uint64_t v150 = v114;
    *(void *)(v115 + 8) = v116;
    uint64_t v117 = sub_100029F90(&qword_10017D530);
    sub_10005E85C(v89, v115 + *(int *)(v117 + 44));
    if (qword_10017B5A0 != -1) {
      swift_once();
    }
    static ClarityUIMetrics.standardSpacing.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v118 = v149;
    sub_10002A580(v115, v149, &qword_10017D5A0);
    uint64_t v119 = (_OWORD *)(v118 + *(int *)(v177 + 36));
    long long v120 = v196;
    *uint64_t v119 = v195;
    v119[1] = v120;
    v119[2] = v197;
    sub_10002A840(v115, &qword_10017D5A0);
    uint64_t v121 = &qword_10017D5A8;
    uint64_t v122 = v151;
    sub_100036F84(v118, v151, &qword_10017D5A8);
    sub_10002A580(v122, v176, &qword_10017D5A8);
    swift_storeEnumTagMultiPayload();
    sub_10006281C(&qword_10017D5D8, &qword_10017D5B8, (void (*)(void))sub_100062898);
    sub_100062B34();
    _ConditionalContent<>.init(storage:)();
    uint64_t v123 = v122;
  }
  else
  {
    uint64_t v124 = v153;
    sub_10005EFDC(v89, v153);
    static ClarityUIMetrics.backButtonPadding.getter();
    char v125 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v127 = v126;
    uint64_t v129 = v128;
    uint64_t v131 = v130;
    uint64_t v133 = v132;
    uint64_t v134 = v152;
    sub_10002A580(v124, v152, &qword_10017D5B0);
    uint64_t v135 = v134 + *(int *)(v175 + 36);
    *(unsigned char *)uint64_t v135 = v125;
    *(void *)(v135 + 8) = v127;
    *(void *)(v135 + 16) = v129;
    *(void *)(v135 + 24) = v131;
    *(void *)(v135 + 32) = v133;
    *(unsigned char *)(v135 + 40) = 0;
    sub_10002A840(v124, &qword_10017D5B0);
    uint64_t v121 = &qword_10017D5B8;
    uint64_t v136 = v134;
    uint64_t v137 = v154;
    sub_100036F84(v136, v154, &qword_10017D5B8);
    sub_10002A580(v137, v176, &qword_10017D5B8);
    swift_storeEnumTagMultiPayload();
    sub_10006281C(&qword_10017D5D8, &qword_10017D5B8, (void (*)(void))sub_100062898);
    sub_100062B34();
    _ConditionalContent<>.init(storage:)();
    uint64_t v123 = v137;
  }
  sub_10002A840(v123, v121);
  uint64_t v138 = sub_100029F90(&qword_10017D518);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v138 - 8) + 56))(v111, 0, 1, v138);
  sub_100036F84(v111, v112, &qword_10017D5C0);
LABEL_18:
  BOOL v140 = (v193 & 1) == 0;
  sub_10002A580(v108, v113, &qword_10017D5D0);
  sub_10002A580(v112, v111, &qword_10017D5C0);
  *(unsigned char *)uint64_t v110 = v140;
  uint64_t v141 = v194;
  uint64_t v142 = v192;
  *(void *)(v110 + 8) = v194;
  *(void *)(v110 + 16) = v142;
  *(unsigned char *)(v110 + 24) = v191;
  *(void *)(v110 + 32) = v190;
  *(unsigned char *)(v110 + 40) = v189;
  uint64_t v143 = v187;
  *(void *)(v110 + 48) = v188;
  *(void *)(v110 + 56) = v143;
  *(unsigned char *)(v110 + 64) = v186;
  *(void *)(v110 + 72) = v44;
  *(void *)(v110 + 80) = v46;
  *(void *)(v110 + 88) = v48;
  *(void *)(v110 + 96) = v50;
  *(unsigned char *)(v110 + 104) = 0;
  unint64_t v144 = (int *)sub_100029F90(&qword_10017D500);
  sub_10002A580(v113, v110 + v144[12], &qword_10017D5D0);
  uint64_t v145 = v110 + v144[16];
  *(void *)uint64_t v145 = 0;
  *(unsigned char *)(v145 + 8) = 1;
  sub_10002A580(v111, v110 + v144[20], &qword_10017D5C0);
  id v146 = v141;
  sub_10002A840(v112, &qword_10017D5C0);
  sub_10002A840(v108, &qword_10017D5D0);

  sub_10002A840(v111, &qword_10017D5C0);
  sub_10002A840(v113, &qword_10017D5D0);
}

void sub_10005E6B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LockScreenView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = self;
  sub_100063288(a1, (uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LockScreenView);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  sub_100061034((uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  aBlock[4] = sub_100062D50;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100060EA4;
  aBlock[3] = &unk_10015F0F8;
  uint64_t v8 = _Block_copy(aBlock);
  swift_release();
  id v9 = [v5 scheduledTimerWithTimeInterval:1 repeats:v8 block:1.0];
  _Block_release(v8);
}

uint64_t sub_10005E85C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v3 = sub_100029F90(&qword_10017D5B0);
  __chkstk_darwin(v3 - 8);
  uint64_t v56 = (uint64_t)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100029F90(&qword_10017D5B8);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v57 = (uint64_t)&v54 - v10;
  uint64_t v55 = sub_100029F90(&qword_10017D678) - 8;
  uint64_t v11 = __chkstk_darwin(v55);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v58 = (uint64_t)&v54 - v14;
  uint64_t v15 = sub_100029F90(&qword_10017D680);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100029F90(&qword_10017D688);
  uint64_t v19 = v18 - 8;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v54 - v23;
  sub_10005FAA0(a1, (uint64_t)v17);
  static ClarityUIMetrics.backButtonPadding.getter();
  char v25 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  sub_10002A580((uint64_t)v17, (uint64_t)v22, &qword_10017D680);
  uint64_t v34 = &v22[*(int *)(v19 + 44)];
  *uint64_t v34 = v25;
  *((void *)v34 + 1) = v27;
  *((void *)v34 + 2) = v29;
  *((void *)v34 + 3) = v31;
  *((void *)v34 + 4) = v33;
  v34[40] = 0;
  sub_10002A840((uint64_t)v17, &qword_10017D680);
  sub_100036F84((uint64_t)v22, (uint64_t)v24, &qword_10017D688);
  uint64_t v35 = v56;
  sub_10005EFDC(a1, v56);
  static ClarityUIMetrics.backButtonPadding.getter();
  LOBYTE(v17) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  sub_10002A580(v35, (uint64_t)v9, &qword_10017D5B0);
  uint64_t v44 = &v9[*(int *)(v6 + 44)];
  *uint64_t v44 = (char)v17;
  *((void *)v44 + 1) = v37;
  *((void *)v44 + 2) = v39;
  *((void *)v44 + 3) = v41;
  *((void *)v44 + 4) = v43;
  v44[40] = 0;
  sub_10002A840(v35, &qword_10017D5B0);
  uint64_t v45 = (uint64_t)v9;
  uint64_t v46 = v57;
  sub_100036F84(v45, v57, &qword_10017D5B8);
  sub_10005AA4C();
  uint64_t v48 = v47;
  sub_10002A580(v46, (uint64_t)v13, &qword_10017D5B8);
  uint64_t v49 = &v13[*(int *)(v55 + 44)];
  *(void *)uint64_t v49 = 0;
  *((void *)v49 + 1) = v48;
  sub_10002A840(v46, &qword_10017D5B8);
  uint64_t v50 = v58;
  sub_100036F84((uint64_t)v13, v58, &qword_10017D678);
  sub_10002A580((uint64_t)v24, (uint64_t)v22, &qword_10017D688);
  sub_10002A580(v50, (uint64_t)v13, &qword_10017D678);
  uint64_t v51 = v59;
  sub_10002A580((uint64_t)v22, v59, &qword_10017D688);
  uint64_t v52 = sub_100029F90(&qword_10017D550);
  sub_10002A580((uint64_t)v13, v51 + *(int *)(v52 + 48), &qword_10017D678);
  sub_10002A840(v50, &qword_10017D678);
  sub_10002A840((uint64_t)v24, &qword_10017D688);
  sub_10002A840((uint64_t)v13, &qword_10017D678);
  return sub_10002A840((uint64_t)v22, &qword_10017D688);
}

uint64_t sub_10005EC98()
{
  type metadata accessor for LockScreenView();
  uint64_t result = sub_10005277C();
  if (result)
  {
    type metadata accessor for LockState();
    sub_100062020(&qword_10017D450, (void (*)(uint64_t))&type metadata accessor for LockState);
    uint64_t v1 = StateObject.wrappedValue.getter();
    char v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 128))(v1);
    uint64_t v3 = swift_release();
    if (v2)
    {
      __chkstk_darwin(v3);
      static Animation.default.getter();
      withAnimation<A>(_:_:)();
      return swift_release();
    }
    else
    {
      return sub_100060AC0();
    }
  }
  return result;
}

uint64_t sub_10005EE00(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LockScreenView();
  type metadata accessor for LockState();
  sub_100062020(&qword_10017D450, (void (*)(uint64_t))&type metadata accessor for LockState);
  uint64_t v4 = StateObject.wrappedValue.getter();
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 192))(a1, a2);
  swift_release();
  if (v5) {
    sub_100060AC0();
  }
  return v5 & 1;
}

uint64_t sub_10005EF00()
{
  return swift_release();
}

uint64_t sub_10005EF6C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10005EFDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v3 = type metadata accessor for LockScreenView();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v32 + 64);
  __chkstk_darwin(v3);
  uint64_t v5 = sub_100029F90(&qword_10017D620);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  uint64_t v34 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100029F90(&qword_10017D608);
  __chkstk_darwin(v35);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100029F90(&qword_10017D658);
  uint64_t v11 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100029F90(&qword_10017D5F8);
  __chkstk_darwin(v37);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100029F90(&qword_10017D528);
  uint64_t v39 = *(void *)(v16 - 8);
  uint64_t v40 = v16;
  __chkstk_darwin(v16);
  uint64_t v36 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063288(a1, (uint64_t)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LockScreenView);
  unint64_t v18 = (*(unsigned __int8 *)(v32 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  uint64_t v19 = swift_allocObject();
  sub_100061034((uint64_t)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18);
  uint64_t v42 = a1;
  sub_100029F90(&qword_10017D660);
  sub_10002A8D8(&qword_10017D668, &qword_10017D660);
  Button.init(action:label:)();
  sub_10002A8D8(&qword_10017D618, &qword_10017D620);
  uint64_t v20 = v33;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v20);
  uint64_t v21 = static Color.clarityUIButtonBackground.getter();
  uint64_t v22 = static Color.primary.getter();
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  sub_100062A64();
  sub_10002A7EC();
  View.buttonStyle<A>(_:)();
  swift_release();
  swift_release();
  sub_10002A840((uint64_t)v10, &qword_10017D608);
  uint64_t v23 = Namespace.wrappedValue.getter();
  LODWORD(v8) = static MatchedGeometryProperties.position.getter();
  static UnitPoint.top.getter();
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v28 = v38;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v13, v38);
  uint64_t v29 = &v15[*(int *)(v37 + 36)];
  strcpy(v29, "passcodeButton");
  v29[15] = -18;
  *((void *)v29 + 2) = v23;
  *((_DWORD *)v29 + 6) = v8;
  *((void *)v29 + 4) = v25;
  *((void *)v29 + 5) = v27;
  v29[48] = 1;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v28);
  sub_10005F6BC();
  sub_100062974();
  uint64_t v30 = v36;
  View.badge(_:)();
  sub_10002A840((uint64_t)v15, &qword_10017D5F8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v41, v30, v40);
}

__n128 sub_10005F558@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.center.getter();
  sub_10005F5CC((uint64_t)&v7);
  unint64_t v3 = v7;
  unsigned __int8 v4 = v9;
  unint64_t v5 = v10;
  __n128 result = v8;
  a1->n128_u64[0] = v2;
  a1->n128_u64[1] = 0;
  a1[1].n128_u8[0] = 1;
  a1[1].n128_u64[1] = v3;
  a1[2] = result;
  a1[3].n128_u8[0] = v4;
  a1[3].n128_u64[1] = v5;
  return result;
}

uint64_t sub_10005F5CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  sub_10005A82C();
  uint64_t v3 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v5 = v4;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  char v7 = v6 & 1;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v6 & 1;
  *(void *)(a1 + 32) = v8;
  swift_retain();
  sub_100041B00(v3, v5, v7);
  swift_bridgeObjectRetain();
  sub_100041A08(v3, v5, v7);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005F6BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LockScreenView();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0 + *(int *)(v3 + 44);
  char v7 = *(unsigned char *)v6;
  unint64_t v8 = *(void *)(v6 + 8);
  LOBYTE(v31) = v7;
  unint64_t v32 = v8;
  sub_100029F90(&qword_10017D460);
  State.wrappedValue.getter();
  if ((_BYTE)v30)
  {
    sub_100063288(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LockScreenView);
LABEL_20:
    uint64_t v23 = 0;
LABEL_21:
    sub_1000632F0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LockScreenView);
    return v23;
  }
  sub_10002A544(0, (unint64_t *)&qword_10017BF70);
  id v9 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  unsigned int v10 = [v9 notificationsEnabled];

  sub_100063288(v1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LockScreenView);
  if (!v10) {
    goto LABEL_20;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unint64_t v11 = v31;
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_6;
    }
LABEL_25:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v24 = _swiftEmptyArrayStorage[2];
    if (!v24) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  uint64_t v12 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12) {
    goto LABEL_25;
  }
LABEL_6:
  uint64_t v29 = v5;
  uint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000630F0(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 0) {
    goto LABEL_40;
  }
  for (uint64_t i = 0; i != v12; ++i)
  {
    if ((v11 & 0xC000000000000001) != 0) {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v15 = *(id *)(v11 + 8 * i + 32);
    }
    uint64_t v16 = v15;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    unint64_t v17 = v31;
    unint64_t v18 = v32;

    swift_bridgeObjectRelease();
    if ((v18 & 0x2000000000000000) != 0) {
      uint64_t v19 = HIBYTE(v18) & 0xF;
    }
    else {
      uint64_t v19 = v17 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v20 = v30;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000630F0(0, v20[2] + 1, 1);
      uint64_t v20 = v30;
    }
    unint64_t v22 = v20[2];
    unint64_t v21 = v20[3];
    if (v22 >= v21 >> 1)
    {
      sub_1000630F0(v21 > 1, v22 + 1, 1);
      uint64_t v20 = v30;
    }
    v20[2] = v22 + 1;
    *((unsigned char *)v20 + v22 + 32) = v19 == 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v5 = v29;
  uint64_t v24 = v20[2];
  if (!v24) {
    goto LABEL_28;
  }
LABEL_26:
  if (*((unsigned char *)v20 + 32) != 1)
  {
    uint64_t v23 = 1;
    goto LABEL_38;
  }
  if (v24 == 1)
  {
LABEL_28:
    uint64_t v23 = 0;
LABEL_38:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v25 = 33;
  while (1)
  {
    uint64_t v26 = v25 - 31;
    if (__OFADD__(v25 - 32, 1)) {
      break;
    }
    int v27 = *((unsigned __int8 *)v20 + v25++);
    if (v27 != 1 || v26 == v24)
    {
      uint64_t v23 = v27 ^ 1u;
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10005FAA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v3 = type metadata accessor for ShadowStyle();
  uint64_t v60 = *(void *)(v3 - 8);
  uint64_t v61 = v3;
  __chkstk_darwin(v3);
  uint64_t v58 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100029F90(&qword_10017D540);
  __chkstk_darwin(v56);
  uint64_t v6 = (uint64_t *)((char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v53);
  unint64_t v8 = (double *)((char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v54 = type metadata accessor for RoundedRectangle._Inset();
  __chkstk_darwin(v54);
  unsigned int v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_100029F90(&qword_10017D538);
  __chkstk_darwin(v55);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_100029F90(&qword_10017D548);
  __chkstk_darwin(v57);
  uint64_t v59 = (uint64_t)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v62 = a1;
  int v16 = *(unsigned __int8 *)(a1 + 17);
  sub_100058C38(v14, v15, *(unsigned char *)(a1 + 17));
  double v17 = COERCE_DOUBLE(sub_100061978(v14, v15 | (v16 << 8)));
  LOBYTE(a1) = v18;
  sub_100058E98(v14, v15, v16);
  if ((a1 & 1) != 0 || (double v19 = v17, static ClarityUIMetrics.minimumDisplayCornerRadius.getter(), v20 > v17))
  {
    static ClarityUIMetrics.fallbackDisplayCornerRadius.getter();
    double v19 = v21;
  }
  static ClarityUIMetrics.backButtonPadding.getter();
  double v23 = v19 - v22;
  uint64_t v24 = (char *)v8 + *(int *)(v53 + 20);
  uint64_t v25 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v26 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(v24, v25, v26);
  double *v8 = v23;
  v8[1] = v23;
  uint64_t v27 = type metadata accessor for LockScreenView();
  uint64_t v28 = v62;
  double v29 = -*(double *)(v62 + *(int *)(v27 + 92));
  sub_100063288((uint64_t)v8, (uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(double *)&v10[*(int *)(v54 + 20)] = v29;
  sub_1000632F0((uint64_t)v8, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  static Color.black.getter();
  uint64_t v30 = v28 + *(int *)(v27 + 44);
  char v31 = *(unsigned char *)v30;
  uint64_t v32 = *(void *)(v30 + 8);
  LOBYTE(v65[0]) = v31;
  *((void *)&v65[0] + 1) = v32;
  sub_100029F90(&qword_10017D460);
  State.wrappedValue.getter();
  uint64_t v33 = Color.opacity(_:)();
  swift_release();
  static Color.black.getter();
  uint64_t v34 = v58;
  static ShadowStyle.inner(color:radius:x:y:)();
  swift_release();
  uint64_t v36 = v60;
  uint64_t v35 = v61;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))((char *)v6 + *(int *)(v56 + 36), v34, v61);
  uint64_t *v6 = v33;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v34, v35);
  sub_100063288((uint64_t)v10, (uint64_t)v12, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle._Inset);
  uint64_t v37 = v55;
  sub_10002A580((uint64_t)v6, (uint64_t)&v12[*(int *)(v55 + 52)], &qword_10017D540);
  *(_WORD *)&v12[*(int *)(v37 + 56)] = 256;
  sub_10002A840((uint64_t)v6, &qword_10017D540);
  sub_1000632F0((uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle._Inset);
  uint64_t v38 = static Alignment.center.getter();
  uint64_t v40 = v39;
  sub_100060038(v28, (uint64_t)v65);
  sub_100036F84((uint64_t)v65, (uint64_t)v64, &qword_10017D690);
  sub_100036F84((uint64_t)v64, (uint64_t)v65, &qword_10017D690);
  *(void *)&long long v66 = v38;
  *((void *)&v66 + 1) = v40;
  uint64_t v41 = v59;
  sub_10002A580((uint64_t)v12, v59, &qword_10017D538);
  uint64_t v42 = (_OWORD *)(v41 + *(int *)(v57 + 36));
  long long v43 = v65[13];
  v42[12] = v65[12];
  v42[13] = v43;
  long long v44 = v66;
  v42[14] = v65[14];
  v42[15] = v44;
  long long v45 = v65[9];
  v42[8] = v65[8];
  v42[9] = v45;
  long long v46 = v65[11];
  v42[10] = v65[10];
  v42[11] = v46;
  long long v47 = v65[5];
  v42[4] = v65[4];
  v42[5] = v47;
  long long v48 = v65[7];
  v42[6] = v65[6];
  v42[7] = v48;
  long long v49 = v65[1];
  _OWORD *v42 = v65[0];
  v42[1] = v49;
  long long v50 = v65[3];
  v42[2] = v65[2];
  v42[3] = v50;
  sub_10002A840((uint64_t)v12, &qword_10017D538);
  return sub_100036F84(v41, v63, &qword_10017D548);
}

uint64_t sub_100060038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (char *)(a1 + *(int *)(type metadata accessor for LockScreenView() + 44));
  char v4 = *v3;
  uint64_t v5 = *((void *)v3 + 1);
  v62[0] = v4;
  uint64_t v63 = v5;
  sub_100029F90(&qword_10017D460);
  State.wrappedValue.getter();
  if ((_BYTE)v15)
  {
    static Color.white.getter();
    uint64_t v14 = Color.opacity(_:)();
    swift_release();
    if (qword_10017B598 != -1) {
      swift_once();
    }
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    if (qword_10017B5A0 != -1) {
      swift_once();
    }
    double v6 = *(double *)&qword_10017D310;
    static ClarityUIMetrics.standardSpacing.getter();
    double v8 = v6 + v7;
    static Color.white.getter();
    uint64_t v13 = Color.opacity(_:)();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    static Color.white.getter();
    uint64_t v9 = Color.opacity(_:)();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    double v10 = *(double *)&qword_10017D310;
    static ClarityUIMetrics.standardSpacing.getter();
    *(void *)&long long v15 = v14;
    WORD4(v15) = 256;
    uint64_t v16 = v44;
    char v17 = v45;
    uint64_t v18 = v46;
    char v19 = v47;
    uint64_t v20 = v48;
    uint64_t v21 = v49;
    uint64_t v22 = 0;
    double v23 = v8;
    uint64_t v24 = v13;
    __int16 v25 = 256;
    uint64_t v26 = v50;
    char v27 = v51;
    uint64_t v28 = v52;
    char v29 = v53;
    uint64_t v30 = v54;
    uint64_t v31 = v55;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = v9;
    __int16 v35 = 256;
    uint64_t v36 = v56;
    char v37 = v57;
    uint64_t v38 = v58;
    char v39 = v59;
    uint64_t v40 = v60;
    uint64_t v41 = v61;
    uint64_t v42 = 0;
    double v43 = -(v10 + v11);
    nullsub_4(&v15);
    sub_100036F84((uint64_t)&v15, (uint64_t)v62, &qword_10017D690);
  }
  else
  {
    sub_100063350(&v15);
    sub_100036F84((uint64_t)&v15, (uint64_t)v62, &qword_10017D690);
  }
  return sub_100036F84((uint64_t)v62, a2, &qword_10017D690);
}

uint64_t sub_100060388(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2);
  uint64_t v32 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v30 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LockScreenView();
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v28 + 64);
  __chkstk_darwin(v5);
  uint64_t v37 = type metadata accessor for DispatchTime();
  uint64_t v29 = *(void *)(v37 - 8);
  uint64_t v7 = __chkstk_darwin(v37);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)&v27 - v10;
  long long aBlock = *(_OWORD *)(a1 + *(int *)(v5 + 48));
  uint64_t v44 = 0;
  sub_100029F90(&qword_10017D458);
  State.wrappedValue.setter();
  uint64_t v11 = a1 + *(int *)(v5 + 44);
  char v12 = *(unsigned char *)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  LOBYTE(aBlock) = *(unsigned char *)v11;
  *((void *)&aBlock + 1) = v13;
  sub_100029F90(&qword_10017D460);
  State.wrappedValue.getter();
  if (!(_BYTE)v44)
  {
    char v14 = 1;
    goto LABEL_5;
  }
  if (v44 == 1)
  {
    char v14 = 2;
LABEL_5:
    LOBYTE(aBlock) = v12;
    *((void *)&aBlock + 1) = v13;
    LOBYTE(v44) = v14;
    return State.wrappedValue.setter();
  }
  id v16 = sub_100008FF8();
  if (v16)
  {
    __chkstk_darwin(v16);
    *(&v27 - 2) = a1;
    static Animation.default.getter();
    withAnimation<A>(_:_:)();
    swift_release();
  }
  else
  {
    type metadata accessor for LockState();
    sub_100062020(&qword_10017D450, (void (*)(uint64_t))&type metadata accessor for LockState);
    uint64_t v17 = StateObject.wrappedValue.getter();
    char v18 = (*(uint64_t (**)(void, unint64_t))(*(void *)v17 + 192))(0, 0xE000000000000000);
    swift_release();
    if (v18) {
      sub_100060AC0();
    }
  }
  sub_10002A544(0, (unint64_t *)&qword_10017CB40);
  uint64_t v27 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v29 + 8);
  v38(v9, v37);
  sub_100063288(a1, (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LockScreenView);
  unint64_t v19 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v20 = swift_allocObject();
  sub_100061034((uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19);
  uint64_t v42 = sub_100061FF0;
  uint64_t v43 = v20;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v40 = sub_100033424;
  uint64_t v41 = &unk_10015EFE0;
  uint64_t v21 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v22 = v30;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long aBlock = _swiftEmptyArrayStorage;
  sub_100062020((unint64_t *)&qword_10017CB48, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100029F90(&qword_10017CB50);
  sub_10002A8D8(&qword_10017CB58, &qword_10017CB50);
  double v23 = v32;
  uint64_t v24 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  __int16 v25 = v36;
  uint64_t v26 = (void *)v27;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v24);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v22, v33);
  return ((uint64_t (*)(char *, uint64_t))v38)(v25, v37);
}

uint64_t sub_1000609E4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100060A4C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100060AC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for LockScreenView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  id v9 = [self defaultCenter];
  [v9 postNotificationName:CLBLockScreenDidCompleteNotification object:0];

  uint64_t v14 = v1;
  sub_100063288(v1, (uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for LockScreenView);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  sub_100061034((uint64_t)&v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v11 + v10);
  static Animation.default.getter();
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100060D04()
{
  id v0 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setLocalizedDateFormatFromTemplate:v1];

  qword_10017D318 = (uint64_t)v0;
}

uint64_t sub_100060D70()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v8 - v5;
  Date.init()();
  type metadata accessor for LockScreenView();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  sub_100029F90(&qword_10017D320);
  State.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v6, v0);
}

void sub_100060EA4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100060F0C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100060F7C()
{
  id v0 = [self defaultCenter];
  [v0 postNotificationName:CLBLockScreenDidAnimateOutNotification object:0];

  type metadata accessor for LockScreenView();
  sub_100029F90(&qword_10017B8A8);
  return State.wrappedValue.setter();
}

uint64_t sub_100061034(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LockScreenView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100061098(uint64_t a1)
{
  return sub_100062544(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10005BD00);
}

uint64_t sub_1000610B4(uint64_t a1)
{
  return sub_100062544(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10005BDAC);
}

uint64_t sub_1000610D0(uint64_t a1)
{
  return sub_100062544(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10005BE18);
}

uint64_t sub_1000610EC(uint64_t a1)
{
  return sub_100062544(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10005BE80);
}

uint64_t sub_100061108()
{
  type metadata accessor for LockScreenView();

  return sub_10005C164();
}

uint64_t sub_100061178()
{
  return sub_100060F0C();
}

uint64_t sub_100061198()
{
  return sub_100062BF0((uint64_t (*)(uint64_t))sub_100060F7C);
}

uint64_t sub_1000611B0()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000611D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t sub_10006129C(uint64_t a1)
{
  return sub_1000612EC(a1, &qword_10017B8F0, &qword_10017D6D8);
}

uint64_t sub_1000612C4(uint64_t a1)
{
  return sub_1000612EC(a1, &qword_10017C188, &qword_10017D6D0);
}

uint64_t sub_1000612EC(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return View.clarityUIIdiom()();
}

uint64_t sub_10006135C(uint64_t a1)
{
  return sub_10006137C(a1, &qword_10017C298, (void (*)(void))sub_100063670);
}

uint64_t sub_10006137C(uint64_t a1, uint64_t *a2, void (*a3)(void))
{
  return View.clarityUIIdiom()();
}

uint64_t sub_1000613D0()
{
  return View.clarityUIIdiom()();
}

uint64_t sub_10006144C()
{
  return View.clarityUIIdiom()();
}

uint64_t sub_1000614C8(uint64_t a1)
{
  return sub_1000612EC(a1, &qword_10017D6F8, &qword_10017D700);
}

uint64_t sub_1000614F0(uint64_t a1)
{
  return sub_10006137C(a1, &qword_10017D708, (void (*)(void))sub_10006378C);
}

double sub_100061510(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return *(double *)&a1;
  }
  swift_retain();
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  id v9 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_100050B5C(0x74616F6C464743, 0xE700000000000000, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_10002DD3C(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return *(double *)&v14;
}

uint64_t sub_10006171C(void *a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    id v14 = a1;
  }
  else
  {
    swift_retain();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    id v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      v16[1] = v11 + 4;
      sub_100029F90(&qword_10017D760);
      uint64_t v12 = _typeName(_:qualified:)();
      v16[2] = sub_100050B5C(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    sub_100043B38(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v17;
  }
  return (uint64_t)a1;
}

uint64_t sub_10006193C@<X0>(uint64_t a1@<X8>)
{
  return sub_100061BD8(&qword_10017B928, (uint64_t (*)(void))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100061978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x100) == 0)
  {
    swift_retain();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    id v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      v13[0] = v11 + 4;
      v13[1] = sub_100050B5C(0xD000000000000011, 0x80000001001268C0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    sub_100058E98(a1, a2, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v14;
  }
  return a1;
}

uint64_t sub_100061B98@<X0>(uint64_t a1@<X8>)
{
  return sub_100061BD8(&qword_10017D758, (uint64_t (*)(void))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

uint64_t sub_100061BD8@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = type metadata accessor for EnvironmentValues();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100029F90(a1);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A580(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    uint64_t v21 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v21, v20))
    {
      unint64_t v25 = a4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = a5;
      double v23 = (uint8_t *)v22;
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)double v23 = 136315138;
      uint64_t v28 = sub_100050B5C(v27, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100061E90@<X0>(uint64_t a1@<X8>)
{
  return sub_100061BD8(&qword_10017D740, (uint64_t (*)(void))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_100061ED0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_100061F50(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t sub_100061FD0()
{
  return sub_100060388(*(void *)(v0 + 16));
}

uint64_t sub_100061FF0()
{
  return sub_100062BF0((uint64_t (*)(uint64_t))sub_1000609E4);
}

uint64_t sub_100062008(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100062018()
{
  return swift_release();
}

uint64_t sub_100062020(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100062068()
{
  return sub_100060A4C();
}

uint64_t sub_100062084(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000620CC(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100062114()
{
  uint64_t v1 = *(void *)(sub_100029F90(&qword_10017D4C8) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  unint64_t v4 = v0 + v2 + *(int *)(sub_100029F90(&qword_10017D4F0) + 44);

  uint64_t v5 = sub_100029F90(&qword_10017D500);
  unint64_t v6 = v4 + *(int *)(v5 + 48);
  uint64_t v7 = sub_100029F90(&qword_10017D508);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    sub_100041A08(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
    swift_bridgeObjectRelease();
    if (*(void *)(v6 + 32)) {
      swift_release();
    }
    if (*(void *)(v6 + 48)) {
      swift_release();
    }
    unint64_t v8 = v6 + *(int *)(sub_100029F90(&qword_10017D510) + 36);
    uint64_t v9 = type metadata accessor for AccessibilityAttachmentModifier();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  unint64_t v10 = v4 + *(int *)(v5 + 80);
  uint64_t v11 = sub_100029F90(&qword_10017D518);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    sub_100029F90(&qword_10017D520);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unint64_t v12 = v10 + *(int *)(sub_100029F90(&qword_10017D530) + 44);
      unint64_t v13 = v12 + *(int *)(type metadata accessor for RoundedRectangle() + 20);
      uint64_t v14 = type metadata accessor for RoundedCornerStyle();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
      unint64_t v15 = v12 + *(int *)(sub_100029F90(&qword_10017D538) + 52);
      swift_release();
      unint64_t v16 = v15 + *(int *)(sub_100029F90(&qword_10017D540) + 36);
      uint64_t v17 = type metadata accessor for ShadowStyle();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
      if (*(void *)(v12 + *(int *)(sub_100029F90(&qword_10017D548) + 36)))
      {
        swift_release();
        swift_release();
        swift_release();
      }
      unint64_t v10 = v12 + *(int *)(sub_100029F90(&qword_10017D550) + 48);
    }
    uint64_t v18 = sub_100029F90(&qword_10017D528);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v10, v18);
  }
  sub_100029F90(&qword_10017D4C0);
  swift_release();

  return _swift_deallocObject(v0, v2 + v3);
}

uint64_t sub_10006248C()
{
  sub_100029F90(&qword_10017D4C8);

  return sub_1000613D0();
}

uint64_t sub_100062500()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10006252C(uint64_t a1)
{
  return sub_100062544(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10005EC98);
}

uint64_t sub_100062544(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for LockScreenView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_1000625CC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LockScreenView();

  return sub_10005EE00(a1, a2);
}

uint64_t sub_100062650()
{
  type metadata accessor for LockScreenView();

  return sub_10005EF00();
}

uint64_t sub_1000626C0()
{
  return sub_10005EF6C();
}

unint64_t sub_1000626DC()
{
  unint64_t result = qword_10017D578;
  if (!qword_10017D578)
  {
    sub_10002A694(&qword_10017D4C0);
    sub_10006277C();
    sub_10002A8D8(&qword_10017D590, &qword_10017D598);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D578);
  }
  return result;
}

unint64_t sub_10006277C()
{
  unint64_t result = qword_10017D580;
  if (!qword_10017D580)
  {
    sub_10002A694(&qword_10017D4B8);
    sub_10002A8D8(&qword_10017D588, &qword_10017D4B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D580);
  }
  return result;
}

uint64_t sub_10006281C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100062898()
{
  unint64_t result = qword_10017D5E0;
  if (!qword_10017D5E0)
  {
    sub_10002A694(&qword_10017D5B0);
    sub_10002A8D8(&qword_10017D5E8, &qword_10017D5F0);
    sub_10002A694(&qword_10017D5F8);
    sub_100062974();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D5E0);
  }
  return result;
}

unint64_t sub_100062974()
{
  unint64_t result = qword_10017D600;
  if (!qword_10017D600)
  {
    sub_10002A694(&qword_10017D5F8);
    sub_10002A694(&qword_10017D608);
    sub_100062A64();
    sub_10002A7EC();
    swift_getOpaqueTypeConformance2();
    sub_10002A8D8(&qword_10017D628, &qword_10017D630);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D600);
  }
  return result;
}

unint64_t sub_100062A64()
{
  unint64_t result = qword_10017D610;
  if (!qword_10017D610)
  {
    sub_10002A694(&qword_10017D608);
    sub_10002A8D8(&qword_10017D618, &qword_10017D620);
    sub_100062020((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D610);
  }
  return result;
}

unint64_t sub_100062B34()
{
  unint64_t result = qword_10017D638;
  if (!qword_10017D638)
  {
    sub_10002A694(&qword_10017D5A8);
    sub_10002A8D8(&qword_10017D640, &qword_10017D5A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D638);
  }
  return result;
}

uint64_t sub_100062BD8()
{
  return sub_100062BF0((uint64_t (*)(uint64_t))sub_10005E6B4);
}

uint64_t sub_100062BF0(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for LockScreenView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

unint64_t sub_100062C64()
{
  unint64_t result = qword_10017D650;
  if (!qword_10017D650)
  {
    sub_10002A694(&qword_10017D648);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D650);
  }
  return result;
}

uint64_t sub_100062CE0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100062CF4(a1, a2);
  }
  return a1;
}

uint64_t sub_100062CF4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100062D50()
{
  type metadata accessor for LockScreenView();

  return sub_100060D70();
}

uint64_t sub_100062DC4()
{
  uint64_t v1 = (int *)type metadata accessor for LockScreenView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_release();
  sub_100058E98(*(void *)(v5 + 8), *(unsigned __int8 *)(v5 + 16), *(unsigned char *)(v5 + 17));
  uint64_t v6 = v0 + v3 + v1[6];
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v3 + v4;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v9 = v5 + v1[10];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100029F90(&qword_10017D320);
  swift_release();
  swift_release();

  swift_release();
  sub_10003A744();

  swift_release();
  swift_release();
  uint64_t v11 = v5 + v1[18];
  uint64_t v12 = type metadata accessor for NSNotificationCenter.Publisher();
  unint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v5 + v1[19], v12);
  v13(v5 + v1[20], v12);
  v13(v5 + v1[21], v12);

  return _swift_deallocObject(v0, v8);
}

uint64_t sub_100063084()
{
  return sub_10005BF3C();
}

double sub_1000630E0@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = sub_10005F558(a1).n128_u64[0];
  return result;
}

uint64_t sub_1000630F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100063138(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100063118(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100063850(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100063138(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100029F90(&qword_10017D670);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100063288(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000632F0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double sub_100063350(_OWORD *a1)
{
  double result = 0.0;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for ObservableThermalController.ThermalLevel(unsigned char *result, unsigned char *a2)
{
  *double result = *a2;
  return result;
}

uint64_t sub_100063394(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10006339C(unsigned char *result, char a2)
{
  *double result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LockScreenView.UnlockButtonStyle()
{
  return &type metadata for LockScreenView.UnlockButtonStyle;
}

uint64_t _s12ClarityBoard14LockScreenViewV8TapStageOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s12ClarityBoard14LockScreenViewV8TapStageOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100063510);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LockScreenView.TapStage()
{
  return &type metadata for LockScreenView.TapStage;
}

uint64_t sub_100063548()
{
  return sub_10002A8D8(&qword_10017D6A8, &qword_10017D448);
}

uint64_t sub_100063584()
{
  return sub_10002A8D8(&qword_10017D6B0, &qword_10017D6B8);
}

unint64_t sub_1000635C4()
{
  unint64_t result = qword_10017D6C0;
  if (!qword_10017D6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D6C0);
  }
  return result;
}

unint64_t sub_10006361C()
{
  unint64_t result = qword_10017D6C8;
  if (!qword_10017D6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D6C8);
  }
  return result;
}

unint64_t sub_100063670()
{
  unint64_t result = qword_10017D6E0;
  if (!qword_10017D6E0)
  {
    sub_10002A694(&qword_10017C298);
    sub_10002A694(&qword_10017C288);
    sub_10002A694(&qword_10017C2B8);
    sub_10002A8D8(&qword_10017C2C0, &qword_10017C288);
    sub_10003AE04();
    swift_getOpaqueTypeConformance2();
    sub_10002A8D8(&qword_10017D6E8, &qword_10017D6F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D6E0);
  }
  return result;
}

unint64_t sub_10006378C()
{
  unint64_t result = qword_10017D710;
  if (!qword_10017D710)
  {
    sub_10002A694(&qword_10017D708);
    sub_10002A8D8(&qword_10017D718, &qword_10017D720);
    sub_10002A8D8(&qword_10017D728, &qword_10017D730);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D710);
  }
  return result;
}

uint64_t sub_100063850(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100029F90(&qword_10017D738);
  uint64_t v10 = *(void *)(type metadata accessor for MultimodalNavigationTitle() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for MultimodalNavigationTitle() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  unint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100063A90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 104);
  sub_100041B00(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  swift_bridgeObjectRetain();
  sub_100063B00(v2);
  sub_100063B00(v3);
  return a1;
}

uint64_t sub_100063B00(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100063B14()
{
  return sub_100062068();
}

id sub_100063C98()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContentBackgroundView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ContentBackgroundView()
{
  return self;
}

unint64_t sub_100063CF0()
{
  unint64_t result = qword_10017D790;
  if (!qword_10017D790)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017D790);
  }
  return result;
}

uint64_t sub_100063F80(uint64_t a1)
{
  return sub_100064004(a1, &enum case for ClarityUIApplicationSceneClientSetting.navigationTitles(_:), &qword_1001864B8);
}

uint64_t sub_100063FB8(uint64_t a1)
{
  return sub_100064004(a1, &enum case for ClarityUIApplicationSceneClientSetting.chromeVisible(_:), &qword_1001864C0);
}

uint64_t sub_100063FF0(uint64_t a1)
{
  return sub_100064004(a1, &enum case for ClarityUIApplicationSceneClientSetting.bottomBarTransitionProgress(_:), &qword_1001864C8);
}

uint64_t sub_100064004(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v5 = type metadata accessor for ClarityUIApplicationSceneClientSetting();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *a2, v5);
  uint64_t v9 = ClarityUIApplicationSceneClientSetting.rawValue.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v9 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = v9;
  }
  return result;
}

uint64_t sub_100064174(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  return *(void *)a4;
}

void sub_1000641B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MultimodalListStyle.Layout();
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NavigationBarHost();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    uint64_t v9 = v1;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9)
  {
    swift_getObjectType();
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for NavigationBarHost.systemShell(_:), v5);
    id v10 = v1;
    dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.setter();
    if (qword_10017B580 != -1) {
      swift_once();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v11 = (void *)v15[1];
    swift_getObjectType();
    if (swift_conformsToProtocol2()) {
      unint64_t v12 = v1;
    }
    else {
      unint64_t v12 = 0;
    }
    if (v12)
    {
      swift_getObjectType();
      id v13 = v10;
      sub_1000644BC((uint64_t)v4);
      dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.listLayout.setter();

      uint64_t v11 = v13;
    }

    sub_10002A544(0, (unint64_t *)&qword_10017BF70);
    id v14 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
    [v14 notificationsEnabled];

    dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.areBadgesEnabled.setter();
  }
}

uint64_t sub_1000644BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5) {
    goto LABEL_12;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_13:
    id v14 = (unsigned int *)&enum case for MultimodalListStyle.Layout.grid(_:);
    goto LABEL_16;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_12:
      swift_bridgeObjectRelease_n();
      goto LABEL_13;
    }
  }
  id v14 = (unsigned int *)&enum case for MultimodalListStyle.Layout.stack(_:);
LABEL_16:
  uint64_t v15 = *v14;
  uint64_t v16 = type metadata accessor for MultimodalListStyle.Layout();
  unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104);

  return v17(a1, v15, v16);
}

uint64_t sub_1000646C8(void *a1)
{
  uint64_t v2 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  id v10 = a1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v25 = v5;
    char v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v28 = v24;
    *(_DWORD *)char v13 = 136315138;
    id v14 = objc_msgSend(v10, "bundleIdentifier", v13 + 4, v24);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v4;
    unint64_t v17 = v16;

    uint64_t v27 = sub_100050B5C(v15, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v4 = v26;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Retrieving icon image for %s after first unlock.", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v25);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 1, 1, v18);
  type metadata accessor for MainActor();
  id v19 = v10;
  uint64_t v20 = static MainActor.shared.getter();
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = v20;
  v21[3] = &protocol witness table for MainActor;
  v21[4] = v19;
  sub_1000B76CC((uint64_t)v4, (uint64_t)&unk_10017D7A8, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_100064A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100064AA8, v6, v5);
}

uint64_t sub_100064AA8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  swift_release();
  [v1 setNeedsIconImageUpdate];
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100064B98(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_100064BB8, 0, 0);
}

uint64_t sub_100064BB8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  v1[3] = &type metadata for String;
  *uint64_t v1 = 0;
  v1[1] = 0xE000000000000000;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064BE4()
{
  return _swift_deallocObject(v0, 24);
}

uint64_t sub_100064C1C()
{
  return sub_1000646C8(*(void **)(v0 + 16));
}

uint64_t sub_100064C24()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40);
}

uint64_t sub_100064C64(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003CCE0;
  return sub_100064A10(a1, v4, v5, v6);
}

void *sub_100064D20(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    swift_getObjectType();
    id v7 = a1;
    uint64_t v8 = dispatch thunk of ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles.getter();

    return (void *)v8;
  }
  else
  {
    uint64_t v10 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
    uint64_t v11 = a1;
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      unint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v18 = v14;
      id v19 = v11;
      *(_DWORD *)id v14 = 138412290;
      uint64_t v15 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v17 = v11;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unexpected type for client settings: %@", v18, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v12 = v11;
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return _swiftEmptyArrayStorage;
  }
}

uint64_t sub_100064F9C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v63 = (uint8_t *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v61 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v61 - v10;
  __chkstk_darwin(v9);
  os_log_type_t v13 = (char *)&v61 - v12;
  id v14 = [a1 clientSettings];
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15)
  {
    uint64_t v64 = v3;
    id v16 = [a1 clientHandle];
    if (v16)
    {
      unint64_t v17 = v16;
      swift_getObjectType();
      if (dispatch thunk of ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible.getter())
      {
      }
      else
      {
        id v35 = [v17 processHandle];
        if (v35)
        {
          uint64_t v36 = v35;
          [v35 auditToken];
          long long v61 = v67;
          long long v62 = v66;

          uint64_t v37 = self;
          NSString v38 = String._bridgeToObjectiveC()();
          id v65 = 0;
          long long v66 = v62;
          long long v67 = v61;
          unsigned int v39 = [v37 authenticateAuditToken:&v66 forEntitlement:v38 error:&v65];

          uint64_t v40 = v64;
          if (v39)
          {
            id v41 = v65;

            return 0;
          }
          id v50 = v65;
          *(void *)&long long v62 = v2;
          id v51 = v50;
          _convertNSErrorToError(_:)();

          uint64_t v52 = v62;
          swift_willThrow();
          uint64_t v53 = Logger.common.unsafeMutableAddressor();
          uint64_t v54 = v63;
          (*(void (**)(uint8_t *, uint64_t, uint64_t))(v40 + 16))(v63, v53, v52);
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v55 = Logger.logObject.getter();
          os_log_type_t v56 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v55, v56))
          {
            *(void *)&long long v61 = v55;
            char v57 = (uint8_t *)swift_slowAlloc();
            uint64_t v58 = (void *)swift_slowAlloc();
            *(_DWORD *)char v57 = 138412290;
            swift_errorRetain();
            uint64_t v59 = _swift_stdlib_bridgeErrorToNSError();
            *(void *)&long long v66 = v59;
            uint64_t v52 = v62;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v58 = v59;
            swift_errorRelease();
            swift_errorRelease();
            uint64_t v60 = (void *)v61;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v61, v56, "Unable to authenticate client for chrome visibility change: %@", v57, 0xCu);
            sub_100029F90(&qword_10017B800);
            swift_arrayDestroy();
            uint64_t v40 = v64;
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          (*(void (**)(uint8_t *, uint64_t))(v40 + 8))(v54, v52);
        }
        else
        {
          uint64_t v43 = Logger.common.unsafeMutableAddressor();
          uint64_t v44 = v64;
          (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v13, v43, v2);
          char v45 = a1;
          uint64_t v46 = Logger.logObject.getter();
          os_log_type_t v47 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v46, v47))
          {
            uint64_t v48 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v62 = swift_slowAlloc();
            uint64_t v63 = v48;
            *(_DWORD *)uint64_t v48 = 138412290;
            *(void *)&long long v61 = v48 + 4;
            *(void *)&long long v66 = v45;
            uint64_t v49 = v45;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(void *)long long v62 = v45;

            uint64_t v44 = v64;
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "Scene does not have required entitlement: %@", v63, 0xCu);
            sub_100029F90(&qword_10017B800);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            char v45 = v14;
          }
          else
          {

            uint64_t v46 = v14;
          }

          (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v2);
        }
      }
    }
    else
    {
      uint64_t v27 = Logger.common.unsafeMutableAddressor();
      uint64_t v28 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v11, v27, v2);
      uint64_t v29 = a1;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        *(void *)&long long v62 = v2;
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = (void *)swift_slowAlloc();
        uint64_t v63 = v32;
        *(_DWORD *)uint64_t v32 = 138412290;
        *(void *)&long long v66 = v29;
        uint64_t v34 = v29;
        uint64_t v2 = v62;
        uint64_t v28 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v33 = v29;

        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Tried to check chrome visibility for scene with no client handle: %@", v63, 0xCu);
        sub_100029F90(&qword_10017B800);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v29 = v14;
      }
      else
      {

        uint64_t v30 = v14;
      }

      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v2);
    }
  }
  else
  {

    uint64_t v18 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v18, v2);
    id v19 = a1;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    uint64_t v22 = v3;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(void *)&long long v62 = v2;
      *(_DWORD *)uint64_t v23 = 138412290;
      uint64_t v25 = v22;
      id v26 = [v19 clientSettings];
      *(void *)&long long v66 = v26;
      uint64_t v2 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v26;
      uint64_t v22 = v25;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unexpected type for client settings: %@", v23, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v20 = v19;
    }

    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v2);
  }
  return 1;
}

Class sub_10006582C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!v6)
  {
    uint64_t v10 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
    uint64_t v11 = a1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      id v19 = v14;
      uint64_t v20 = v11;
      *(_DWORD *)id v14 = 138412290;
      uint64_t v15 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v18 = v11;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unexpected type for client settings: %@", v19, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v12 = v11;
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  swift_getObjectType();
  id v7 = a1;
  dispatch thunk of ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.getter();
  if (v8)
  {

    return 0;
  }
  v9.super.super.Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;

  return v9.super.super.isa;
}

void sub_100065B08(void *a1)
{
  uint64_t v30 = a1;
  uint64_t v2 = type metadata accessor for VolumeHUD();
  uint64_t v3 = (int *)(v2 - 8);
  uint64_t v31 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v31 + 64);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v8 = (id *)((char *)&v29 - v7);
  uint64_t v9 = sub_100029F90(&qword_10017D7B8);
  uint64_t v10 = v9 - 8;
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_type_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v29 - v14);
  id v29 = v1;
  [v1 volume];
  double v32 = v16;
  State.init(wrappedValue:)();
  uint64_t v17 = v34;
  void *v8 = v33;
  v8[1] = v17;
  id v18 = [self defaultCenter];
  NSString v19 = String._bridgeToObjectiveC()();
  NSNotificationCenter.publisher(for:object:)();

  *(void *)((char *)v8 + v3[8]) = 0x403E000000000000;
  *(void *)((char *)v8 + v3[9]) = 0x406B800000000000;
  *(void *)((char *)v8 + v3[10]) = 0x402E000000000000;
  *(void *)((char *)v8 + v3[11]) = 0x4049000000000000;
  sub_100066424((uint64_t)v8, (uint64_t)v6);
  unint64_t v20 = (*(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v21 = swift_allocObject();
  sub_100036D3C((uint64_t)v6, v21 + v20);
  *uint64_t v15 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = (uint64_t (**)())((char *)v15 + *(int *)(v10 + 44));
  char *v22 = sub_10006657C;
  v22[1] = (uint64_t (*)())v21;
  sub_1000665F4((uint64_t)v8);
  id v23 = objc_allocWithZone((Class)sub_100029F90(&qword_10017D7C0));
  sub_100066650((uint64_t)v15, (uint64_t)v13);
  uint64_t v24 = (void *)UIHostingController.init(rootView:)();
  sub_1000666B8((uint64_t)v15);
  id v25 = [v24 view];
  if (v25)
  {
    id v26 = v25;
    id v27 = [self clearColor];
    [v26 setBackgroundColor:v27];

    uint64_t v28 = v30;
    [v29 setWindow:v30];
    [v28 setRootViewController:v24];
    [v28 makeKeyAndVisible];
  }
  else
  {
    __break(1u);
  }
}

void sub_100065EF0()
{
  id v1 = [v0 debouncerTimer];
  [v1 invalidate];

  uint64_t v2 = self;
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  void v6[4] = sub_1000663F4;
  v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  uint64_t v6[2] = sub_100060EA4;
  v6[3] = &unk_10015F2E0;
  uint64_t v4 = _Block_copy(v6);
  swift_release();
  id v5 = [v2 scheduledTimerWithTimeInterval:0 repeats:v4 block:2.0];
  _Block_release(v4);
  [v0 setDebouncerTimer:v5];
}

void sub_100066030(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = self;
  uint64_t v10 = sub_100066414;
  uint64_t v11 = a2;
  uint64_t v6 = _NSConcreteStackBlock;
  uint64_t v7 = 1107296256;
  char v8 = sub_100033424;
  uint64_t v9 = &unk_10015F308;
  uint64_t v4 = _Block_copy(&v6);
  swift_retain();
  swift_release();
  uint64_t v10 = sub_10006641C;
  uint64_t v11 = a2;
  uint64_t v6 = _NSConcreteStackBlock;
  uint64_t v7 = 1107296256;
  char v8 = sub_10007FA64;
  uint64_t v9 = &unk_10015F330;
  id v5 = _Block_copy(&v6);
  swift_retain();
  swift_release();
  [v3 animateWithDuration:v4 animations:v5 completion:0.3];
  _Block_release(v5);
  _Block_release(v4);
}

void sub_100066194()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = Strong;
    id v2 = [Strong window];

    if (v2)
    {
      [v2 setAlpha:0.0];
    }
  }
}

void sub_100066218()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = Strong;
    id v2 = [Strong window];
    if (v2)
    {
      uint64_t v3 = v2;
      [v2 alpha];
      if (v4 == 0.0)
      {
        [v3 setHidden:1];
        [v1 setWindow:0];
      }
    }
    else
    {
      uint64_t v3 = v1;
    }
  }
}

uint64_t sub_1000663BC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24);
}

void sub_1000663F4(uint64_t a1)
{
  sub_100066030(a1, v1);
}

uint64_t sub_1000663FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006640C()
{
  return swift_release();
}

void sub_100066414()
{
}

void sub_10006641C()
{
}

uint64_t sub_100066424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VolumeHUD();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066488()
{
  uint64_t v1 = (int *)(type metadata accessor for VolumeHUD() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v3 = v2 + *(void *)(*(void *)v1 + 64);
  uint64_t v4 = v0 + v2;
  swift_release();
  uint64_t v5 = v4 + v1[7];
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return _swift_deallocObject(v0, v3);
}

uint64_t sub_10006657C()
{
  type metadata accessor for VolumeHUD();

  return sub_10006144C();
}

uint64_t sub_1000665F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VolumeHUD();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100066650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017D7B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000666B8(uint64_t a1)
{
  uint64_t v2 = sub_100029F90(&qword_10017D7B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100066728()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for EmergencyModel()
{
  return self;
}

uint64_t sub_100066784@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for EmergencyModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void sub_1000667C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)type metadata accessor for Logger();
  uint64_t v4 = *(v3 - 1);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = [objc_allocWithZone((Class)TUCallProviderManager) init];
  char v8 = [v7 emergencyProvider];
  id v9 = [objc_allocWithZone((Class)TUDialRequest) initWithProvider:v8];
  [v9 setOriginatingUIType:2];
  [v9 setDialType:1];
  if (a2)
  {
    id v10 = objc_allocWithZone((Class)TUHandle);
    swift_bridgeObjectRetain();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v12 = [v10 initWithType:2 value:v11];

    [v9 setHandle:v12];
  }
  if ([v9 isValid])
  {
    id v27 = [self sharedInstance];
    id v13 = [v27 dialWithRequest:v9];

    id v14 = v27;
  }
  else
  {
    uint64_t v15 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, void *))(v4 + 16))(v6, v15, v3);
    float v16 = v9;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v27 = v3;
      NSString v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      id v25 = v8;
      *(_DWORD *)NSString v19 = 138412290;
      uint64_t v28 = v16;
      unint64_t v20 = v16;
      id v26 = v7;
      uint64_t v21 = v20;
      unint64_t v3 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v16;

      char v8 = v26;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to start emergency call, dial request is invalid: %@", v19, 0xCu);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      uint64_t v22 = v25;
    }
    else
    {

      uint64_t v22 = v16;
      uint64_t v17 = v16;
    }

    (*(void (**)(char *, void *))(v4 + 8))(v6, v3);
  }
}

uint64_t destroy for AdminView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AdminView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AdminView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for AdminView(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AdminView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AdminView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AdminView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdminView()
{
  return &type metadata for AdminView;
}

uint64_t sub_100066EEC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100066F08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v2 = sub_100029F90(&qword_10017D890);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  NSString v38 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v41 = (char *)&v34 - v5;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  static Font.largeTitle.getter();
  uint64_t v11 = Text.font(_:)();
  uint64_t v13 = v12;
  char v15 = v14;
  swift_release();
  sub_100041A08(v6, v8, v10);
  swift_bridgeObjectRelease();
  uint64_t v43 = static Color.white.getter();
  uint64_t v16 = Text.foregroundStyle<A>(_:)();
  uint64_t v18 = v17;
  uint64_t v35 = v19;
  char v21 = v20 & 1;
  sub_100041A08(v11, v13, v15 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v34 = KeyPath;
  uint64_t v42 = v37;
  sub_100029F90(&qword_10017D898);
  sub_10002A8D8(&qword_10017D8A0, &qword_10017D898);
  uint64_t v23 = v41;
  List<>.init(content:)();
  id v25 = v38;
  uint64_t v24 = v39;
  id v26 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  id v27 = v23;
  uint64_t v28 = v40;
  v26(v38, v27, v40);
  id v29 = v36;
  *uint64_t v36 = v16;
  v29[1] = v18;
  *((unsigned char *)v29 + 16) = v21;
  v29[3] = v35;
  v29[4] = KeyPath;
  *((unsigned char *)v29 + 40) = 1;
  uint64_t v30 = v29;
  uint64_t v31 = sub_100029F90(&qword_10017D8A8);
  v26((char *)v30 + *(int *)(v31 + 48), v25, v28);
  sub_100041B00(v16, v18, v21);
  double v32 = *(void (**)(char *, uint64_t))(v24 + 8);
  swift_bridgeObjectRetain();
  swift_retain();
  v32(v41, v28);
  v32(v25, v28);
  sub_100041A08(v16, v18, v21);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006726C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v30 = v3;
  uint64_t v31 = v2;
  char v28 = v4;
  sub_100029F90(&qword_10017D8B0);
  Binding.projectedValue.getter();
  id v5 = [self currentDevice];
  id v6 = [v5 userInterfaceIdiom];

  if (v6 == (id)1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v7 = 0;
    uint64_t v25 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    char v24 = 0;
  }
  else
  {
    uint64_t v10 = LocalizedStringKey.init(stringLiteral:)();
    uint64_t v26 = v11;
    uint64_t v27 = v10;
    char v13 = v12;
    uint64_t v25 = v14;
    Binding.projectedValue.getter();
    uint64_t v8 = v32;
    uint64_t v9 = v33;
    uint64_t v7 = v13 & 1;
    char v24 = v34;
  }
  uint64_t v15 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v22 = v16;
  uint64_t v23 = v15;
  char v18 = v17;
  uint64_t v21 = v19;
  Binding.projectedValue.getter();
  *(void *)a1 = v29;
  *(void *)(a1 + 8) = v31;
  *(unsigned char *)(a1 + 16) = v28 & 1;
  *(void *)(a1 + 24) = v30;
  *(void *)(a1 + 32) = v32;
  *(void *)(a1 + 40) = v33;
  *(unsigned char *)(a1 + 48) = v34;
  *(void *)(a1 + 56) = v27;
  *(void *)(a1 + 64) = v26;
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v9;
  *(unsigned char *)(a1 + 104) = v24;
  *(void *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v22;
  *(unsigned char *)(a1 + 128) = v18 & 1;
  *(void *)(a1 + 136) = v21;
  *(void *)(a1 + 144) = v32;
  *(void *)(a1 + 152) = v33;
  *(unsigned char *)(a1 + 160) = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006797C(v27, v26);
  sub_1000679E0(v27, v26);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100067524@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100029F90(&qword_10017D870);
  __chkstk_darwin(v3 - 8);
  id v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100029F90(&qword_10017D878);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v9 = *(_OWORD *)(v1 + 48);
  _OWORD v18[2] = *(_OWORD *)(v1 + 32);
  v18[3] = v9;
  long long v19 = *(_OWORD *)(v1 + 64);
  uint64_t v20 = *(void *)(v1 + 80);
  long long v10 = *(_OWORD *)(v1 + 16);
  v18[0] = *(_OWORD *)v1;
  v18[1] = v10;
  *(void *)id v5 = static HorizontalAlignment.center.getter();
  *((void *)v5 + 1) = 0;
  unsigned char v5[16] = 1;
  uint64_t v11 = sub_100029F90(&qword_10017D880);
  sub_100066F08((uint64_t)v18, (uint64_t *)&v5[*(int *)(v11 + 44)]);
  sub_10002A580((uint64_t)v5, (uint64_t)v8, &qword_10017D870);
  sub_10002A840((uint64_t)v5, &qword_10017D870);
  uint64_t v13 = *((void *)&v19 + 1);
  uint64_t v12 = v20;
  uint64_t v14 = static Color.clarityUIButtonBackground.getter();
  uint64_t v15 = static Color.primary.getter();
  sub_10002A580((uint64_t)v8, a1, &qword_10017D878);
  uint64_t v16 = (void *)(a1 + *(int *)(sub_100029F90(&qword_10017D888) + 36));
  void *v16 = v13;
  v16[1] = v12;
  v16[2] = v14;
  void v16[3] = v15;
  swift_retain();
  return sub_10002A840((uint64_t)v8, &qword_10017D878);
}

uint64_t sub_1000676B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100029F90(&qword_10017CAB8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_allocObject();
  long long v9 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v2 + 32);
  *(unsigned char *)(v8 + 64) = *(unsigned char *)(v2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100067E94(v2);
  Button<>.init(_:action:)();
  if (qword_10017B628 != -1) {
    swift_once();
  }
  v12[1] = qword_100186520;
  swift_retain_n();
  uint64_t v10 = AnyView.init<A>(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a1, v7, v4);
  swift_release();
  *(void *)(a1 + *(int *)(sub_100029F90(&qword_10017D8E0) + 36)) = v10;
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1000678BC()
{
  return swift_release();
}

uint64_t sub_100067928@<X0>(uint64_t a1@<X8>)
{
  return sub_1000676B8(a1);
}

uint64_t sub_100067974@<X0>(uint64_t a1@<X8>)
{
  return sub_10006726C(a1);
}

uint64_t sub_10006797C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000679E0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t destroy for NavigationButton()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for NavigationButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationButton(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for NavigationButton(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NavigationButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationButton()
{
  return &type metadata for NavigationButton;
}

unint64_t sub_100067CE0()
{
  unint64_t result = qword_10017D8B8;
  if (!qword_10017D8B8)
  {
    sub_10002A694(&qword_10017D888);
    sub_100067D80();
    sub_10002A8D8(&qword_10017D8D0, &qword_10017D8D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D8B8);
  }
  return result;
}

unint64_t sub_100067D80()
{
  unint64_t result = qword_10017D8C0;
  if (!qword_10017D8C0)
  {
    sub_10002A694(&qword_10017D878);
    sub_10002A8D8(&qword_10017D8C8, &qword_10017D870);
    sub_100052624();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D8C0);
  }
  return result;
}

uint64_t sub_100067E20()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100067E3C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 65);
}

uint64_t sub_100067E8C()
{
  return sub_1000678BC();
}

uint64_t sub_100067E94(uint64_t a1)
{
  return a1;
}

uint64_t sub_100067EE8()
{
  return Binding.wrappedValue.setter();
}

unint64_t sub_100067F50()
{
  unint64_t result = qword_10017D8E8;
  if (!qword_10017D8E8)
  {
    sub_10002A694(&qword_10017D8E0);
    sub_10002A8D8((unint64_t *)&unk_10017CAE0, &qword_10017CAB8);
    sub_10002A8D8(&qword_10017D8F0, &qword_10017D8F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D8E8);
  }
  return result;
}

id sub_100068120()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessibilityUIServerPresentationManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccessibilityUIServerPresentationManager()
{
  return self;
}

id sub_100068178()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SystemSettings()) init];
  qword_1001864D0 = (uint64_t)result;
  return result;
}

BOOL sub_1000681A8()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC12ClarityBoard14SystemSettings_interfaceStyleArbiter) currentStyle] == (id)2;
}

id sub_1000681DC()
{
  id result = *(id *)(v0 + OBJC_IVAR____TtC12ClarityBoard14SystemSettings_radiosPreferences);
  if (result) {
    return [result airplaneMode];
  }
  return result;
}

char *sub_10006820C()
{
  uint64_t v1 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v1 - 8);
  long long v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = OBJC_IVAR____TtC12ClarityBoard14SystemSettings_interfaceStyleArbiter;
  uint64_t v5 = self;
  uint64_t v6 = v0;
  *(void *)&v0[v4] = [v5 sharedInstance];
  uint64_t v7 = OBJC_IVAR____TtC12ClarityBoard14SystemSettings_radiosPreferences;
  sub_100046BE0();
  uint64_t v8 = (void *)static OS_dispatch_queue.main.getter();
  id v9 = [objc_allocWithZone((Class)RadiosPreferences) initWithQueue:v8];

  *(void *)&v6[v7] = v9;
  *(void *)&v6[OBJC_IVAR____TtC12ClarityBoard14SystemSettings_interfaceStyleSubscription] = 0;
  *(void *)&v6[OBJC_IVAR____TtC12ClarityBoard14SystemSettings_textSizeSubscription] = 0;

  uint64_t v10 = (objc_class *)type metadata accessor for SystemSettings();
  v24.receiver = v6;
  v24.super_class = v10;
  id v11 = objc_msgSendSuper2(&v24, "init");
  uint64_t v12 = type metadata accessor for TaskPriority();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v3, 1, 1, v12);
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  uint64_t v15 = (char *)v11;
  swift_retain();
  uint64_t v16 = static MainActor.shared.getter();
  char v17 = (void *)swift_allocObject();
  v17[2] = v16;
  v17[3] = &protocol witness table for MainActor;
  v17[4] = v14;
  swift_release();
  *(void *)&v15[OBJC_IVAR____TtC12ClarityBoard14SystemSettings_interfaceStyleSubscription] = sub_1000ABB38((uint64_t)v3, (uint64_t)&unk_10017D9F0, (uint64_t)v17);
  swift_release();
  v13(v3, 1, 1, v12);
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  uint64_t v19 = static MainActor.shared.getter();
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = v19;
  v20[3] = &protocol witness table for MainActor;
  v20[4] = v18;
  swift_release();
  *(void *)&v15[OBJC_IVAR____TtC12ClarityBoard14SystemSettings_textSizeSubscription] = sub_1000ABB38((uint64_t)v3, (uint64_t)&unk_10017DA00, (uint64_t)v20);
  swift_release();
  uint64_t v21 = *(void **)&v15[OBJC_IVAR____TtC12ClarityBoard14SystemSettings_radiosPreferences];
  if (v21)
  {
    id v22 = v21;
    [v22 setDelegate:v15];
  }
  return v15;
}

uint64_t sub_10006852C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a4;
  sub_100029F90(&qword_10017D130);
  v4[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Notification();
  v4[20] = v5;
  v4[21] = *(void *)(v5 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v4[24] = swift_task_alloc();
  uint64_t v6 = sub_100029F90(&qword_10017D138);
  v4[25] = v6;
  v4[26] = *(void *)(v6 - 8);
  v4[27] = swift_task_alloc();
  uint64_t v7 = sub_100029F90(&qword_10017D140);
  v4[28] = v7;
  v4[29] = *(void *)(v7 - 8);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = type metadata accessor for MainActor();
  v4[33] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[34] = v9;
  v4[35] = v8;
  return _swift_task_switch(sub_100068754, v9, v8);
}

uint64_t sub_100068754()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    id v3 = *(id *)(Strong + OBJC_IVAR____TtC12ClarityBoard14SystemSettings_interfaceStyleArbiter);
  }
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[27];
  uint64_t v6 = v0[25];
  id v7 = [self defaultCenter];
  uint64_t v8 = NSNotificationCenter.notifications(named:object:)();

  v0[16] = v8;
  type metadata accessor for NSNotificationCenter.Notifications();
  sub_100029F90(&qword_10017D148);
  sub_10006A51C(&qword_10017D150, 255, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications);
  AsyncMapSequence.init(_:transform:)();
  swift_unknownObjectRelease();
  AsyncMapSequence.base.getter();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  uint64_t v9 = static MainActor.shared.getter();
  v0[36] = v9;
  if (v9)
  {
    swift_getObjectType();
    uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  v0[37] = v10;
  v0[38] = v12;
  return _swift_task_switch(sub_1000689E8, v10, v12);
}

uint64_t sub_1000689E8()
{
  uint64_t v1 = v0[36];
  v0[39] = AsyncMapSequence.Iterator.baseIterator.modify();
  sub_10006A51C(&qword_10017D158, 255, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[40] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100068AF4;
  uint64_t v3 = v0[19];
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v3, v1, &protocol witness table for MainActor);
}

uint64_t sub_100068AF4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 296);
    uint64_t v4 = *(void *)(v2 + 304);
    uint64_t v5 = sub_100054EF4;
  }
  else
  {
    (*(void (**)(void))(v2 + 312))();
    uint64_t v3 = *(void *)(v2 + 296);
    uint64_t v4 = *(void *)(v2 + 304);
    uint64_t v5 = sub_100068C1C;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100068C1C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10002A840(v3, &qword_10017D130);
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_release();
    uint64_t v4 = *(void *)(v0 + 272);
    uint64_t v5 = *(void *)(v0 + 280);
    return _swift_task_switch(sub_100069024, v4, v5);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 240);
    uint64_t v6 = *(void *)(v0 + 248);
    uint64_t v8 = *(void *)(v0 + 224);
    uint64_t v9 = *(void *)(v0 + 232);
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 176), v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
    uint64_t v10 = (int *)AsyncMapSequence.Iterator.transform.getter();
    *(void *)(v0 + 328) = v11;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)v10 + *v10);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100068E20;
    uint64_t v13 = *(void *)(v0 + 176);
    return v15(v0 + 16, v13);
  }
}

uint64_t sub_100068E20()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  uint64_t v3 = *(void *)(*v0 + 168);
  uint64_t v4 = *(void *)(*v0 + 160);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 304);
  uint64_t v6 = *(void *)(v1 + 296);
  return _swift_task_switch(sub_100068FC0, v6, v5);
}

uint64_t sub_100068FC0()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  return _swift_task_switch(sub_100069024, v1, v2);
}

uint64_t sub_100069024()
{
  if (v0[5])
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v2 = (void *)Strong;
      type metadata accessor for SystemSettings();
      sub_10006A51C(&qword_10017D9E0, v3, (void (*)(uint64_t))type metadata accessor for SystemSettings);
      ObservableObject<>.objectWillChange.getter();

      ObservableObjectPublisher.send()();
      swift_release();
    }
    sub_10002A840((uint64_t)(v0 + 2), (uint64_t *)&unk_10017D160);
    uint64_t v4 = static MainActor.shared.getter();
    v0[36] = v4;
    if (v4)
    {
      swift_getObjectType();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v7 = 0;
    }
    v0[37] = v5;
    v0[38] = v7;
    return _swift_task_switch(sub_1000689E8, v5, v7);
  }
  else
  {
    (*(void (**)(void, void))(v0[29] + 8))(v0[31], v0[28]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_10006920C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  sub_100029F90(&qword_10017D130);
  v4[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Notification();
  v4[17] = v5;
  v4[18] = *(void *)(v5 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = type metadata accessor for NSNotificationCenter.Notifications.Iterator();
  v4[21] = swift_task_alloc();
  uint64_t v6 = sub_100029F90(&qword_10017D138);
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  uint64_t v7 = sub_100029F90(&qword_10017D140);
  v4[25] = v7;
  v4[26] = *(void *)(v7 - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = type metadata accessor for MainActor();
  v4[30] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[31] = v9;
  v4[32] = v8;
  return _swift_task_switch(sub_100069434, v9, v8);
}

uint64_t sub_100069434()
{
  uint64_t v1 = v0[24];
  uint64_t v10 = v0[23];
  uint64_t v2 = v0[22];
  id v3 = [self defaultCenter];
  uint64_t v4 = NSNotificationCenter.notifications(named:object:)();

  v0[13] = v4;
  type metadata accessor for NSNotificationCenter.Notifications();
  sub_100029F90(&qword_10017D148);
  sub_10006A51C(&qword_10017D150, 255, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications);
  AsyncMapSequence.init(_:transform:)();
  AsyncMapSequence.base.getter();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v2);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_beginAccess();
  uint64_t v5 = static MainActor.shared.getter();
  v0[33] = v5;
  if (v5)
  {
    swift_getObjectType();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  v0[34] = v6;
  v0[35] = v8;
  return _swift_task_switch(sub_10006966C, v6, v8);
}

uint64_t sub_10006966C()
{
  uint64_t v1 = v0[33];
  v0[36] = AsyncMapSequence.Iterator.baseIterator.modify();
  sub_10006A51C(&qword_10017D158, 255, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[37] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100069778;
  uint64_t v3 = v0[16];
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v3, v1, &protocol witness table for MainActor);
}

uint64_t sub_100069778()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 272);
    uint64_t v4 = *(void *)(v2 + 280);
    uint64_t v5 = sub_100069AA4;
  }
  else
  {
    (*(void (**)(void))(v2 + 288))();
    uint64_t v3 = *(void *)(v2 + 272);
    uint64_t v4 = *(void *)(v2 + 280);
    uint64_t v5 = sub_1000698A0;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_1000698A0()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10002A840(v3, &qword_10017D130);
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_release();
    uint64_t v4 = *(void *)(v0 + 248);
    uint64_t v5 = *(void *)(v0 + 256);
    return _swift_task_switch(sub_100069CC0, v4, v5);
  }
  else
  {
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 208);
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 152), v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
    uint64_t v10 = (int *)AsyncMapSequence.Iterator.transform.getter();
    *(void *)(v0 + 304) = v11;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)v10 + *v10);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100069ABC;
    uint64_t v13 = *(void *)(v0 + 152);
    return v15(v0 + 16, v13);
  }
}

uint64_t sub_100069AA4()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t sub_100069ABC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 152);
  uint64_t v3 = *(void *)(*v0 + 144);
  uint64_t v4 = *(void *)(*v0 + 136);
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 280);
  uint64_t v6 = *(void *)(v1 + 272);
  return _swift_task_switch(sub_100069C5C, v6, v5);
}

uint64_t sub_100069C5C()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  return _swift_task_switch(sub_100069CC0, v1, v2);
}

uint64_t sub_100069CC0()
{
  if (v0[5])
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v2 = (void *)Strong;
      type metadata accessor for SystemSettings();
      sub_10006A51C(&qword_10017D9E0, v3, (void (*)(uint64_t))type metadata accessor for SystemSettings);
      ObservableObject<>.objectWillChange.getter();

      ObservableObjectPublisher.send()();
      swift_release();
    }
    sub_10002A840((uint64_t)(v0 + 2), (uint64_t *)&unk_10017D160);
    uint64_t v4 = static MainActor.shared.getter();
    v0[33] = v4;
    if (v4)
    {
      swift_getObjectType();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v7 = 0;
    }
    v0[34] = v5;
    v0[35] = v7;
    return _swift_task_switch(sub_10006966C, v5, v7);
  }
  else
  {
    (*(void (**)(void, void))(v0[26] + 8))(v0[28], v0[25]);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100069ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100069F64, v6, v5);
}

uint64_t sub_100069F64()
{
  swift_release();
  type metadata accessor for SystemSettings();
  sub_10006A51C(&qword_10017D9E0, v1, (void (*)(uint64_t))type metadata accessor for SystemSettings);
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

id sub_10006A140()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SystemSettings();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SystemSettings()
{
  return self;
}

uint64_t sub_10006A204@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SystemSettings();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10006A240()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40);
}

uint64_t sub_10006A280(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003CCE0;
  return sub_100069ECC(a1, v4, v5, v6);
}

uint64_t sub_10006A334()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24);
}

uint64_t sub_10006A370(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100056EAC;
  return sub_10006852C(a1, v4, v5, v6);
}

uint64_t sub_10006A428()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40);
}

uint64_t sub_10006A468(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003CCE0;
  return sub_10006920C(a1, v4, v5, v6);
}

uint64_t sub_10006A51C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

UIContentSizeCategory sub_10006A564()
{
  uint64_t v0 = _AXSCopyPreferredContentSizeCategoryName();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();
  }

  return UIContentSizeCategoryLarge;
}

uint64_t EmergencyKeypadButtonStyleView.init(configuration:background:foregroundColor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ButtonStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t v11 = type metadata accessor for EmergencyKeypadButtonStyleView();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v11 + 36), a2, a4);
  *(void *)(a5 + *(int *)(v11 + 40)) = a3;
  return result;
}

uint64_t type metadata accessor for EmergencyKeypadButtonStyleView()
{
  return sub_100034DF8();
}

uint64_t sub_10006A768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  id v5 = [self systemGray5Color];
  uint64_t v6 = Color.init(uiColor:)();
  uint64_t v7 = static Color.primary.getter();
  uint64_t result = sub_100029F90(&qword_10017DAA0);
  *(void *)(a2 + *(int *)(result + 36)) = v6;
  *(void *)(a2 + *(int *)(result + 40)) = v7;
  return result;
}

uint64_t EmergencyKeypadButtonStyleView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v37 = sub_100029F90(&qword_10017D230);
  __chkstk_darwin(v37);
  id v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v39 = *(void *)(a1 + 16);
  uint64_t v40 = v6;
  v35[1] = a1;
  uint64_t v42 = type metadata accessor for _BackgroundStyleModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v44 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v35 - v8;
  sub_10002A694(&qword_10017D238);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v38 = (char *)v35 - v11;
  sub_10002A694(&qword_10017DA08);
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v47 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  id v41 = (char *)v35 - v12;
  sub_10002A694(&qword_10017D240);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v43 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  char v45 = (char *)v35 - v16;
  *(void *)id v5 = static VerticalAlignment.center.getter();
  *((void *)v5 + 1) = 0;
  unsigned char v5[16] = 1;
  sub_100029F90(&qword_10017D2E8);
  ButtonStyleConfiguration.label.getter();
  v35[0] = v2;
  static Edge.Set.all.getter();
  uint64_t v17 = sub_10002A8D8(&qword_10017D248, &qword_10017D230);
  uint64_t v18 = v39;
  uint64_t v19 = v40;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  sub_1000587C0((uint64_t)v5);
  uint64_t v50 = v18;
  uint64_t v51 = v19;
  uint64_t v52 = v2;
  static Alignment.center.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = v17;
  uint64_t v60 = WitnessTable;
  uint64_t v21 = swift_getWitnessTable();
  id v22 = v38;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v7);
  uint64_t v23 = sub_10002A8D8(&qword_10017D250, &qword_10017D238);
  uint64_t v57 = v21;
  uint64_t v58 = v23;
  uint64_t v24 = swift_getWitnessTable();
  sub_10006AE78();
  uint64_t v25 = v41;
  View.clipShape<A>(_:style:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v10);
  uint64_t v26 = sub_10002A8D8(qword_10017DA18, &qword_10017DA08);
  uint64_t v55 = v24;
  uint64_t v56 = v26;
  uint64_t v27 = v36;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = v43;
  View.foregroundColor(_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v25, v27);
  uint64_t v30 = sub_10002A8D8(&qword_10017D258, &qword_10017D240);
  uint64_t v53 = v28;
  uint64_t v54 = v30;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v32 = v45;
  sub_100056EB0(v29, v13, v31);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v48 + 8);
  v33(v29, v13);
  sub_100056EB0(v32, v13, v31);
  return ((uint64_t (*)(char *, uint64_t))v33)(v32, v13);
}

unint64_t sub_10006AE78()
{
  unint64_t result = qword_10017DA10;
  if (!qword_10017DA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DA10);
  }
  return result;
}

uint64_t sub_10006AECC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006AF14(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64) + v11;
  uint64_t v14 = *(void *)(v9 + 64) + 7;
  if (v12 < a2)
  {
    unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v16 = v15 & 0xFFFFFFF8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v12 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v15);
        if (!v20) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v15);
        if (v20) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10006B15CLL);
      case 4:
        int v20 = *(int *)((char *)a1 + v15);
        if (!v20) {
          break;
        }
LABEL_24:
        int v22 = v20 - 1;
        if (v16)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v12 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if (v8 == v12)
  {
    uint64_t v24 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    return v24(a1, v8, v6);
  }
  else
  {
    unint64_t v25 = ((unint64_t)a1 + v13) & ~v11;
    if (v10 == v12)
    {
      uint64_t v26 = *(uint64_t (**)(unint64_t))(v9 + 48);
      return v26(v25);
    }
    else
    {
      unint64_t v27 = *(void *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
      if (v27 >= 0xFFFFFFFF) {
        LODWORD(v27) = -1;
      }
      return (v27 + 1);
    }
  }
}

void sub_10006B170(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + v13;
  uint64_t v16 = *(void *)(v11 + 64) + 7;
  unint64_t v17 = ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v14 >= a3)
  {
    int v20 = 0;
    int v21 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_19:
      uint64_t v22 = ~v13;
      switch(v20)
      {
        case 1:
          *((unsigned char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)((char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v17) = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v10 == v14)
            {
              unint64_t v25 = *(void (**)(_DWORD *, uint64_t))(v9 + 56);
              v25(a1, a2);
            }
            else
            {
              unint64_t v26 = ((unint64_t)a1 + v15) & v22;
              if (v12 == v14)
              {
                unint64_t v27 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
                v27(v26, a2, v12);
              }
              else
              {
                if ((a2 & 0x80000000) != 0) {
                  uint64_t v28 = a2 ^ 0x80000000;
                }
                else {
                  uint64_t v28 = (a2 - 1);
                }
                *(void *)((v16 + v26) & 0xFFFFFFFFFFFFFFF8) = v28;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v18 = a3 - v14 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    int v21 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_19;
    }
  }
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v23 = v21;
  }
  else {
    int v23 = 1;
  }
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v24 = ~v14 + a2;
    bzero(a1, ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v24;
  }
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17) = v23;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v17) = v23;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x10006B418);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = v23;
      break;
    default:
      return;
  }
}

uint64_t sub_10006B440()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for EmergencyKeypadButtonStyle()
{
  return &type metadata for EmergencyKeypadButtonStyle;
}

uint64_t sub_10006B660()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006B67C()
{
  return sub_10002A8D8(&qword_10017DAA8, &qword_10017DAA0);
}

void sub_10006B6B8(uint64_t a1, uint64_t a2)
{
}

void sub_10006B6C4(uint64_t a1, uint64_t a2)
{
}

void sub_10006B6D0(uint64_t a1, uint64_t a2, SEL *a3)
{
  swift_getKeyPath();
  sub_10006D24C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  id v5 = *(void **)(v3 + 16);
  uint64_t v6 = self;
  id v7 = v5;
  id v8 = [v6 sharedInstance];
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = [v8 standardBundleIdentifierForClarityBundleIdentifier:v9];

  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v11 = [self applicationWithBundleIdentifier:v10];

  objc_msgSend(v7, *a3, v11);
}

uint64_t sub_10006B824(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v46 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v9 = v2 + OBJC_IVAR____TtC12ClarityBoard24AppProtectionCoordinator___observationRegistrar;
  uint64_t v49 = v2;
  unint64_t v10 = sub_10006D24C();
  swift_bridgeObjectRetain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v11 = v2 + 24;
  swift_beginAccess();
  uint64_t v12 = *(void *)(v2 + 24);
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_1000743D8(v46, a2);
    if (v14)
    {
      uint64_t v15 = *(unsigned __int8 *)(*(void *)(v12 + 56) + v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v15;
    }
    uint64_t v42 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v42 = v11;
  }
  swift_bridgeObjectRelease();
  id v16 = [self sharedInstance];
  uint64_t v44 = a2;
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = [v16 standardBundleIdentifierForClarityBundleIdentifier:v17];

  if (!v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v19 = [self applicationWithBundleIdentifier:v18];

  swift_getKeyPath();
  v48[0] = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  unsigned int v43 = [*(id *)(v3 + 16) shouldShieldLaunchOfApplication:v19];
  uint64_t v20 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v20, v5);
  id v21 = v19;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  id v45 = v21;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v39 = v8;
    uint64_t v26 = v25;
    uint64_t v38 = swift_slowAlloc();
    v48[0] = v38;
    *(_DWORD *)uint64_t v26 = 136315394;
    v37[1] = v26 + 4;
    id v27 = v21;
    unint64_t v40 = v10;
    id v28 = v27;
    uint64_t v29 = v5;
    id v30 = [v27 description];
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v9;
    unint64_t v33 = v32;

    uint64_t v47 = sub_100050B5C(v31, v33, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 1024;
    uint64_t v15 = v43;
    LODWORD(v47) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Initial: app: %s, shouldShield: %{BOOL}d", (uint8_t *)v26, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v6 + 8))(v39, v29);
    uint64_t v34 = v44;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v34 = v44;
    uint64_t v15 = v43;
  }
  swift_getKeyPath();
  v48[0] = v3;
  swift_bridgeObjectRetain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v48[0] = v3;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v47 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0x8000000000000000;
  sub_1000756A8(v15, v46, v34, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 24) = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  v48[0] = v3;
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();

  swift_release();
  return v15;
}

id sub_10006BD98()
{
  swift_getKeyPath();
  sub_10006D24C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v1 = *(void **)(v0 + 16);

  return v1;
}

id sub_10006BE18@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10006D24C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = *(void **)(v3 + 16);
  *a2 = v4;

  return v4;
}

void sub_10006BEA0(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  sub_10006D24C();
  id v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
}

uint64_t sub_10006BF4C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10006BFD4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_10006D24C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10006C064()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006C114(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006C17C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC12ClarityBoard24AppProtectionCoordinator___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *((unsigned int *)*v0 + 12);
  uint64_t v4 = *((unsigned __int16 *)*v0 + 26);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_10006C22C()
{
  return type metadata accessor for AppProtectionCoordinator();
}

uint64_t type metadata accessor for AppProtectionCoordinator()
{
  uint64_t result = qword_10017DAE0;
  if (!qword_10017DAE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10006C280()
{
  uint64_t result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006C4C4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(unsigned char *)(v5 + 72) = a2;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a3;
  type metadata accessor for MainActor();
  *(void *)(v5 + 48) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006C564, v7, v6);
}

uint64_t sub_10006C564()
{
  unint64_t v1 = *(void **)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v2 = *(const void **)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 16);
  swift_release();
  *(void *)(v0 + 56) = _Block_copy(v2);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10017DC30 + dword_10017DC30);
  id v5 = v4;
  id v6 = v3;
  id v7 = v1;
  id v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v8;
  void *v8 = v0;
  v8[1] = sub_10006C64C;
  uint64_t v9 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 16);
  return v12(v10, v9);
}

uint64_t sub_10006C64C()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  id v5 = *(void **)(*v1 + 40);
  id v6 = *(void **)(*v1 + 24);
  id v7 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v3 + 56);
  if (v2)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0);
  }
  _Block_release(*(const void **)(v4 + 56));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

id sub_10006C860()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppProtectionPlugIn()
{
  return self;
}

uint64_t sub_10006C8CC()
{
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56);
}

uint64_t sub_10006C91C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  id v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *id v7 = v1;
  v7[1] = sub_10003CCE0;
  uint64_t v8 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t, uint64_t))((char *)&dword_10017DC10 + dword_10017DC10);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_10006C9EC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100056EAC;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10017E9B0 + dword_10017E9B0);
  return v6(v2, v3, v4);
}

uint64_t sub_10006CAB0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48);
}

uint64_t sub_10006CAF0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_100056EAC;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10017E9B8 + dword_10017E9B8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10006CBBC()
{
  type metadata accessor for AppProtectionCoordinator();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = &_swiftEmptyDictionarySingleton;
  ObservationRegistrar.init()();
  id v1 = [objc_allocWithZone((Class)type metadata accessor for AppProtectionPlugIn()) init];
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)APSystemAppOutlet) initWithSystemAppInterface:v1];
  swift_weakAssign();
  swift_getKeyPath();
  sub_10006D24C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  [*(id *)(v0 + 16) resume];

  return v0;
}

uint64_t sub_10006CCB4(void *a1, char a2)
{
  uint64_t v3 = v2;
  id v6 = [self sharedInstance];
  NSString v7 = [a1 bundleIdentifier];
  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v8 = [v6 clarityBundleIdentifierForStandardBundleIdentifier:v7];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  swift_getKeyPath();
  sub_10006D24C();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = 0x8000000000000000;
  sub_1000756A8(a2 & 1, v9, v11, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 24) = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  return swift_release();
}

uint64_t sub_10006CEA0(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 76) = a2;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = v2;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 40) = v4;
  *(void *)(v3 + 48) = *(void *)(v4 - 8);
  *(void *)(v3 + 56) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(void *)(v3 + 64) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10006CF98, v6, v5);
}

uint64_t sub_10006CF98()
{
  uint64_t v27 = v0;
  id v1 = *(void **)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  swift_release();
  uint64_t v5 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  id v6 = v1;
  NSString v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v24 = *(void *)(v0 + 40);
    uint64_t v25 = *(void *)(v0 + 56);
    uint64_t v23 = *(void *)(v0 + 48);
    int v22 = *(unsigned __int8 *)(v0 + 76);
    uint64_t v9 = *(void **)(v0 + 24);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    id v11 = v9;
    id v12 = [v11 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    *(void *)(v0 + 16) = sub_100050B5C(v13, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 12) = 1024;
    *(_DWORD *)(v0 + 72) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Updated: app: %s, shouldShield: %{BOOL}d", (uint8_t *)v10, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v18 = *(void *)(v0 + 40);
    id v19 = *(void **)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  if (swift_weakLoadStrong())
  {
    sub_10006CCB4(*(void **)(v0 + 24), *(unsigned char *)(v0 + 76));
    swift_release();
  }
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

unint64_t sub_10006D24C()
{
  unint64_t result = qword_10017C368;
  if (!qword_10017C368)
  {
    type metadata accessor for AppProtectionCoordinator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017C368);
  }
  return result;
}

uint64_t sub_10006D2A4()
{
  return sub_10006C114(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10006D2C8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v2;
  id v4 = v2;
}

ValueMetadata *type metadata accessor for AppProtectionShieldConfiguration()
{
  return &type metadata for AppProtectionShieldConfiguration;
}

uint64_t destroy for EmergencyKeypad()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for EmergencyKeypad(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for EmergencyKeypad(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for EmergencyKeypad(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for EmergencyKeypad()
{
  return &type metadata for EmergencyKeypad;
}

uint64_t sub_10006D51C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006D538(uint64_t a1)
{
  uint64_t v2 = v1[1];
  if ((v2 & 0x2000000000000000) == 0)
  {
    if ((*v1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if ((v2 & 0xF00000000000000) == 0)
  {
    __break(1u);
    return String.remove(at:)(a1);
  }
LABEL_5:
  a1 = String.index(before:)();

  return String.remove(at:)(a1);
}

uint64_t sub_10006D5A0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v57 = type metadata accessor for LayoutDirection();
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v55 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100029F90(&qword_10017DC40);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_100029F90(&qword_10017DC48) - 8;
  uint64_t v7 = __chkstk_darwin(v52);
  uint64_t v48 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v54 = (uint64_t)&v44 - v9;
  uint64_t v10 = sub_100029F90(&qword_10017CB30);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100029F90(&qword_10017DC50);
  uint64_t v51 = *(void *)(v53 - 8);
  uint64_t v13 = __chkstk_darwin(v53);
  uint64_t v50 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v49 = (char *)&v44 - v15;
  long long v16 = *(_OWORD *)(a1 + 16);
  long long v73 = *(_OWORD *)a1;
  long long v74 = v16;
  sub_100029F90(&qword_10017C5D0);
  Binding.projectedValue.getter();
  uint64_t v17 = v59;
  uint64_t v44 = v60;
  uint64_t v18 = v62;
  uint64_t v46 = v61;
  int v45 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v47 = *(void *)(a1 + 64);
  uint64_t v20 = type metadata accessor for Font.Design();
  id v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v12, 1, 1, v20);
  uint64_t v22 = static Font.system(size:weight:design:)();
  sub_10002A840((uint64_t)v12, &qword_10017CB30);
  v21(v12, 1, 1, v20);
  static Font.system(size:weight:design:)();
  sub_10002A840((uint64_t)v12, &qword_10017CB30);
  uint64_t v23 = Font.bold()();
  swift_release();
  uint64_t v59 = v17;
  uint64_t v60 = v44;
  uint64_t v61 = v46;
  uint64_t v62 = v18;
  char v63 = v45;
  __int16 v64 = 256;
  id v65 = nullsub_4;
  uint64_t v66 = 0;
  uint64_t v67 = v19;
  uint64_t v68 = v47;
  char v69 = 0;
  uint64_t v70 = v22;
  uint64_t v71 = v23;
  char v72 = 0;
  sub_10006E814();
  sub_10006E868();
  uint64_t v24 = v49;
  View.buttonStyle<A>(_:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)id v6 = static VerticalAlignment.center.getter();
  *((void *)v6 + 1) = v19;
  uint8_t v6[16] = 0;
  uint64_t v25 = sub_100029F90(&qword_10017DC68);
  sub_10006DC10(a1, &v6[*(int *)(v25 + 44)]);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v27 = v56;
  uint64_t v28 = v55;
  uint64_t v29 = v57;
  (*(void (**)(char *, void, uint64_t))(v56 + 104))(v55, enum case for LayoutDirection.leftToRight(_:), v57);
  uint64_t v30 = (uint64_t)v48;
  uint64_t v31 = (uint64_t *)&v48[*(int *)(v52 + 44)];
  uint64_t v32 = sub_100029F90(&qword_10017C760);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))((char *)v31 + *(int *)(v32 + 28), v28, v29);
  *uint64_t v31 = KeyPath;
  sub_10002A580((uint64_t)v6, v30, &qword_10017DC40);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  sub_10002A840((uint64_t)v6, &qword_10017DC40);
  uint64_t v33 = v54;
  sub_10006E8C4(v30, v54);
  uint64_t v34 = v51;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  uint64_t v36 = v50;
  uint64_t v37 = v24;
  uint64_t v38 = v24;
  uint64_t v39 = v53;
  v35(v50, v38, v53);
  sub_10002A580(v33, v30, &qword_10017DC48);
  unint64_t v40 = v58;
  v35(v58, v36, v39);
  uint64_t v41 = sub_100029F90(&qword_10017DC70);
  sub_10002A580(v30, (uint64_t)&v40[*(int *)(v41 + 48)], &qword_10017DC48);
  sub_10002A840(v33, &qword_10017DC48);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v34 + 8);
  v42(v37, v39);
  sub_10002A840(v30, &qword_10017DC48);
  return ((uint64_t (*)(char *, uint64_t))v42)(v36, v39);
}

uint64_t sub_10006DC10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v50 = sub_100029F90(&qword_10017DC78);
  __chkstk_darwin(v50);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100029F90(&qword_10017DC80);
  uint64_t v41 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100029F90(&qword_10017DC88);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v53 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v54 = (uint64_t)&v41 - v11;
  uint64_t v51 = sub_100029F90(&qword_10017DC90);
  uint64_t v49 = *(void *)(v51 - 8);
  uint64_t v12 = __chkstk_darwin(v51);
  uint64_t v52 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v41 - v14;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v48 = v56;
  int v47 = v57;
  uint64_t v46 = v58;
  int v45 = v59;
  uint64_t v44 = v60;
  uint64_t v43 = v61;
  uint64_t v16 = swift_allocObject();
  long long v17 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v16 + 64) = v17;
  *(_OWORD *)(v16 + 80) = *(_OWORD *)(a1 + 64);
  *(void *)(v16 + 96) = *(void *)(a1 + 80);
  long long v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v16 + 32) = v18;
  uint64_t v55 = a1;
  sub_10006E960(a1);
  sub_100029F90(&qword_10017DC98);
  sub_10006E9B8();
  uint64_t v19 = v15;
  Button.init(action:label:)();
  long long v20 = *(_OWORD *)(a1 + 16);
  long long v62 = *(_OWORD *)a1;
  long long v63 = v20;
  sub_100029F90(&qword_10017C5D0);
  Binding.wrappedValue.getter();
  uint64_t v21 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v21 < 1)
  {
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v26 = v62;
    char v27 = BYTE8(v62);
    uint64_t v28 = v63;
    char v29 = BYTE8(v63);
    *(void *)uint64_t v4 = 0;
    v4[8] = 1;
    *((void *)v4 + 2) = v26;
    v4[24] = v27;
    *((void *)v4 + 4) = v28;
    v4[40] = v29;
    *((_OWORD *)v4 + 3) = v64;
    swift_storeEnumTagMultiPayload();
    sub_100029F90(&qword_10017DCF8);
    sub_10002A8D8(&qword_10017DD00, &qword_10017DC80);
    sub_10006ECB4();
    _ConditionalContent<>.init(storage:)();
  }
  else
  {
    uint64_t v22 = swift_allocObject();
    long long v23 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v22 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v22 + 64) = v23;
    *(_OWORD *)(v22 + 80) = *(_OWORD *)(a1 + 64);
    *(void *)(v22 + 96) = *(void *)(a1 + 80);
    long long v24 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v22 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v22 + 32) = v24;
    __chkstk_darwin(v22);
    *(&v41 - 2) = a1;
    sub_10006E960(a1);
    sub_100029F90(&qword_10017DCC0);
    sub_10006EAF8();
    Button.init(action:label:)();
    uint64_t v25 = v41;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v4, v7, v5);
    swift_storeEnumTagMultiPayload();
    sub_100029F90(&qword_10017DCF8);
    sub_10002A8D8(&qword_10017DD00, &qword_10017DC80);
    sub_10006ECB4();
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
  }
  uint64_t v30 = v49;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  uint64_t v32 = v52;
  uint64_t v33 = v51;
  v31(v52, v19, v51);
  uint64_t v34 = v53;
  uint64_t v35 = v54;
  sub_10002A580(v54, v53, &qword_10017DC88);
  uint64_t v36 = v42;
  void *v42 = 0;
  *((unsigned char *)v36 + 8) = 1;
  void v36[2] = v48;
  *((unsigned char *)v36 + 24) = v47;
  v36[4] = v46;
  *((unsigned char *)v36 + 40) = v45;
  uint64_t v37 = v43;
  v36[6] = v44;
  v36[7] = v37;
  uint64_t v38 = sub_100029F90(&qword_10017DD10);
  v31((char *)v36 + *(int *)(v38 + 48), v32, v33);
  sub_10002A580(v34, (uint64_t)v36 + *(int *)(v38 + 64), &qword_10017DC88);
  sub_10002A840(v35, &qword_10017DC88);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v30 + 8);
  v39(v19, v33);
  sub_10002A840(v34, &qword_10017DC88);
  return ((uint64_t (*)(char *, uint64_t))v39)(v32, v33);
}

uint64_t sub_10006E310@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100029F90(&qword_10017CB30);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = Image.init(systemName:)();
  uint64_t v5 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v19 = static Font.system(size:weight:design:)();
  sub_10002A840((uint64_t)v4, &qword_10017CB30);
  uint64_t KeyPath = swift_getKeyPath();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v6 = v21;
  char v7 = v22;
  uint64_t v8 = v23;
  char v9 = v24;
  uint64_t v11 = v25;
  uint64_t v10 = v26;
  uint64_t v12 = static Color.white.getter();
  uint64_t v13 = swift_getKeyPath();
  uint64_t v14 = static Color.green.getter();
  uint64_t result = static Edge.Set.all.getter();
  uint64_t v16 = KeyPath;
  *(void *)a1 = v20;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v19;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v14;
  *(unsigned char *)(a1 + 96) = result;
  *(_WORD *)(a1 + 97) = 256;
  return result;
}

uint64_t sub_10006E4E0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  sub_100029F90(&qword_10017C5D0);
  Binding.wrappedValue.getter();
  uint64_t v3 = String.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 >= 1)
  {
    long long v7 = *((_OWORD *)a1 + 1);
    uint64_t v6 = v2;
    sub_10003ADA8((uint64_t)&v6);
    swift_retain();
    sub_10006ED9C((uint64_t)&v7);
    uint64_t v5 = Binding.wrappedValue.getter();
    sub_10006D538(v5);
    swift_bridgeObjectRelease();
    Binding.wrappedValue.setter();
    sub_10006EDC8((uint64_t)&v6);
    swift_release();
    return sub_10006EDF4((uint64_t)&v7);
  }
  return result;
}

uint64_t sub_10006E5F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100029F90(&qword_10017CB30);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = Image.init(systemName:)();
  uint64_t v5 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = static Font.system(size:weight:design:)();
  sub_10002A840((uint64_t)v4, &qword_10017CB30);
  uint64_t KeyPath = swift_getKeyPath();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  char v11 = v21;
  uint64_t v13 = v22;
  uint64_t v12 = v23;
  uint64_t v14 = static Color.primary.getter();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = KeyPath;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = result;
  *(void *)(a1 + 80) = v14;
  return result;
}

uint64_t sub_10006E7A0@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 48);
  _OWORD v8[2] = *(_OWORD *)(v1 + 32);
  v8[3] = v3;
  v8[4] = *(_OWORD *)(v1 + 64);
  uint64_t v9 = *(void *)(v1 + 80);
  long long v4 = *(_OWORD *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  v8[1] = v4;
  uint64_t v5 = *((void *)&v3 + 1);
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v6 = sub_100029F90(&qword_10017DC38);
  return sub_10006D5A0((uint64_t)v8, (char *)(a1 + *(int *)(v6 + 44)));
}

unint64_t sub_10006E814()
{
  unint64_t result = qword_10017DC58;
  if (!qword_10017DC58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DC58);
  }
  return result;
}

unint64_t sub_10006E868()
{
  unint64_t result = qword_10017DC60;
  if (!qword_10017DC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DC60);
  }
  return result;
}

uint64_t sub_10006E8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017DC48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006E930()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t sub_10006E958@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E310(a1);
}

uint64_t sub_10006E960(uint64_t a1)
{
  return a1;
}

unint64_t sub_10006E9B8()
{
  unint64_t result = qword_10017DCA0;
  if (!qword_10017DCA0)
  {
    sub_10002A694(&qword_10017DC98);
    sub_10006EA58();
    sub_10002A8D8(qword_10017DA18, &qword_10017DA08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DCA0);
  }
  return result;
}

unint64_t sub_10006EA58()
{
  unint64_t result = qword_10017DCA8;
  if (!qword_10017DCA8)
  {
    sub_10002A694(&qword_10017DCB0);
    sub_10006EAF8();
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DCA8);
  }
  return result;
}

unint64_t sub_10006EAF8()
{
  unint64_t result = qword_10017DCB8;
  if (!qword_10017DCB8)
  {
    sub_10002A694(&qword_10017DCC0);
    sub_10006EB98();
    sub_10002A8D8(&qword_10017D258, &qword_10017D240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DCB8);
  }
  return result;
}

unint64_t sub_10006EB98()
{
  unint64_t result = qword_10017DCC8;
  if (!qword_10017DCC8)
  {
    sub_10002A694(&qword_10017DCD0);
    sub_10006EC14();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DCC8);
  }
  return result;
}

unint64_t sub_10006EC14()
{
  unint64_t result = qword_10017DCD8;
  if (!qword_10017DCD8)
  {
    sub_10002A694(&qword_10017DCE0);
    sub_10002A8D8(&qword_10017DCE8, &qword_10017DCF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DCD8);
  }
  return result;
}

unint64_t sub_10006ECB4()
{
  unint64_t result = qword_10017DD08;
  if (!qword_10017DD08)
  {
    sub_10002A694(&qword_10017DCF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DD08);
  }
  return result;
}

uint64_t sub_10006ED2C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 104);
}

uint64_t sub_10006ED7C()
{
  return sub_10006E4E0((uint64_t *)(v0 + 16));
}

uint64_t sub_10006ED84@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E5F8(a1);
}

uint64_t sub_10006ED9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006EDC8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006EDF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006EE20()
{
  return sub_10002A8D8(&qword_10017DD18, &qword_10017DD20);
}

void sub_10006F1E8(char a1, char a2)
{
  long long v3 = v2;
  uint64_t v6 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = OBJC_IVAR___CLBTransientHUDPresenter_dismissTask;
  if (*(void *)&v3[OBJC_IVAR___CLBTransientHUDPresenter_dismissTask])
  {
    swift_retain();
    sub_100029F90(&qword_10017F8C0);
    Task.cancel()();
    swift_release();
  }
  *(void *)&v3[v9] = 0;
  swift_release();
  uint64_t v10 = OBJC_IVAR___CLBTransientHUDPresenter_window;
  [*(id *)&v3[OBJC_IVAR___CLBTransientHUDPresenter_window] setHidden:0];
  [*(id *)&v3[v10] setAlpha:1.0];
  id v11 = objc_allocWithZone((Class)sub_100029F90(&qword_10017DD28));
  v20[15] = a1 & 1;
  uint64_t v12 = (void *)UIHostingController.init(rootView:)();
  id v13 = [v12 view];
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = [self clearColor];
    [v14 setBackgroundColor:v15];

    [*(id *)&v3[v10] setRootViewController:v12];
    if (a2)
    {
      uint64_t v16 = type metadata accessor for TaskPriority();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
      type metadata accessor for MainActor();
      uint64_t v17 = v3;
      uint64_t v18 = static MainActor.shared.getter();
      char v19 = (void *)swift_allocObject();
      void v19[2] = v18;
      v19[3] = &protocol witness table for MainActor;
      v19[4] = v17;
      *(void *)&v3[v9] = sub_1000ABB38((uint64_t)v8, (uint64_t)&unk_10017DD30, (uint64_t)v19);

      swift_release();
    }
    else
    {
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10006F468()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40);
}

uint64_t sub_10006F4A8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003CCE0;
  return sub_10007FB1C(a1, v4, v5, v6);
}

uint64_t destroy for AppList()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AppList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AppList(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AppList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AppList()
{
  return &type metadata for AppList;
}

uint64_t sub_10006F6FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006F718@<X0>(uint64_t a1@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v63 = type metadata accessor for MultimodalListStyle.IconStyle();
  uint64_t v55 = *(void *)(v63 - 8);
  uint64_t v2 = __chkstk_darwin(v63);
  long long v62 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v54 = (char *)&v51 - v4;
  uint64_t v5 = sub_100029F90(&qword_10017DD38);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v51 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v51 - v8;
  uint64_t v10 = type metadata accessor for MultimodalListStyle();
  id v11 = *(void (***)(char *, uint64_t))(v10 - 8);
  uint64_t v60 = v10;
  uint64_t v61 = v11;
  __chkstk_darwin(v10);
  unsigned __int8 v57 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100029F90(&qword_10017DD40);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100029F90(&qword_10017DD48);
  __chkstk_darwin(v56);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100029F90(&qword_10017DD50);
  uint64_t v58 = *(void *)(v19 - 8);
  uint64_t v59 = v19;
  __chkstk_darwin(v19);
  uint64_t v52 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100029F90(&qword_10017DD58);
  uint64_t v22 = v21 - 8;
  __chkstk_darwin(v21);
  uint64_t v53 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v1;
  sub_100029F90(&qword_10017DD60);
  sub_100070720();
  List<>.init(content:)();
  sub_10002A8D8(&qword_10017DD90, &qword_10017DD40);
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  long long v72 = *(_OWORD *)(v1 + 32);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_1000709D8((uint64_t)&v72);
  char v24 = v66;
  sub_1000644BC((uint64_t)v9);

  uint64_t v25 = type metadata accessor for MultimodalListStyle.Layout();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 0, 1, v25);
  uint64_t v26 = v55;
  char v27 = v54;
  uint64_t v28 = v63;
  (*(void (**)(char *, void, uint64_t))(v55 + 104))(v54, enum case for MultimodalListStyle.IconStyle.homeScreen(_:), v63);
  sub_10002A580((uint64_t)v9, v51, &qword_10017DD38);
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v62, v27, v28);
  char v29 = v57;
  MultimodalListStyle.init(layout:iconStyle:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  sub_10002A840((uint64_t)v9, &qword_10017DD38);
  sub_1000708F8();
  uint64_t v30 = v52;
  uint64_t v31 = v60;
  View.listStyle<A>(_:)();
  v61[1](v29, v31);
  sub_10002A840((uint64_t)v18, &qword_10017DD48);
  uint64_t v32 = static Color.clear.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = v58;
  uint64_t v34 = v59;
  uint64_t v36 = v53;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v53, v30, v59);
  uint64_t v37 = (uint64_t *)&v36[*(int *)(v22 + 44)];
  uint64_t v38 = (uint64_t)v36;
  *uint64_t v37 = KeyPath;
  v37[1] = v32;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v34);
  uint64_t v63 = static HorizontalAlignment.center.getter();
  long long v62 = (char *)static Color.clear.getter();
  id v39 = [self currentDevice];
  [v39 userInterfaceIdiom];

  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v61 = (void (**)(char *, uint64_t))v66;
  LOBYTE(v35) = v67;
  uint64_t v40 = v68;
  char v41 = v69;
  uint64_t v42 = v70;
  uint64_t v43 = v71;
  VerticalEdge.rawValue.getter();
  LOBYTE(v39) = Edge.init(rawValue:)();
  uint64_t v44 = static SafeAreaRegions.container.getter();
  uint64_t v45 = v38;
  uint64_t v46 = v38;
  uint64_t v47 = v64;
  sub_10002A580(v46, v64, &qword_10017DD58);
  uint64_t v48 = v47 + *(int *)(sub_100029F90(&qword_10017DDA0) + 36);
  uint64_t v49 = v61;
  *(void *)uint64_t v48 = v62;
  *(void *)(v48 + 8) = v49;
  *(unsigned char *)(v48 + 16) = v35;
  *(void *)(v48 + 24) = v40;
  *(unsigned char *)(v48 + 32) = v41;
  *(void *)(v48 + 40) = v42;
  *(void *)(v48 + 48) = v43;
  *(void *)(v48 + 56) = v44;
  *(void *)(v48 + 64) = 0;
  *(unsigned char *)(v48 + 72) = 0;
  *(unsigned char *)(v48 + 73) = (_BYTE)v39;
  *(void *)(v48 + 80) = v63;
  return sub_10002A840(v45, &qword_10017DD58);
}

uint64_t sub_10006FEA0(long long *a1)
{
  long long v6 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_1000709D8((uint64_t)&v6);
  long long v5 = a1[2];
  uint64_t v2 = (_OWORD *)swift_allocObject();
  long long v3 = a1[1];
  v2[1] = *a1;
  v2[2] = v3;
  v2[3] = a1[2];
  sub_100070A54((uint64_t)&v6);
  swift_retain();
  sub_100070A54((uint64_t)&v5);
  sub_100029F90(&qword_10017DDA8);
  sub_100029F90(&qword_10017DDB0);
  sub_10002A8D8(&qword_10017DDB8, &qword_10017DDA8);
  sub_10002A694(&qword_10017DD70);
  sub_1000707E4();
  sub_10002D088();
  swift_getOpaqueTypeConformance2();
  sub_100070B94(&qword_10017DDC0, (void (*)(uint64_t))type metadata accessor for Application);
  return ForEach<>.init(_:content:)();
}

uint64_t sub_1000700A0@<X0>(void **a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = a3;
  uint64_t v5 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100029F90(&qword_10017DD80);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100029F90(&qword_10017DDC8);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v39 = v12;
  uint64_t v40 = v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100029F90(&qword_10017DD70);
  __chkstk_darwin(v43);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_100029F90(&qword_10017DDB0);
  uint64_t v42 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  char v41 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *a1;
  long long v20 = *a2;
  long long v49 = a2[2];
  long long v50 = v20;
  uint64_t v21 = swift_allocObject();
  long long v22 = a2[1];
  *(_OWORD *)(v21 + 16) = *a2;
  *(_OWORD *)(v21 + 32) = v22;
  *(_OWORD *)(v21 + 48) = a2[2];
  *(void *)(v21 + 64) = v19;
  uint64_t v46 = v19;
  sub_100070A54((uint64_t)&v50);
  swift_retain();
  sub_100070A54((uint64_t)&v49);
  sub_100070B38();
  uint64_t v23 = v19;
  uint64_t v24 = (uint64_t)v17;
  uint64_t v25 = v23;
  Button.init(action:label:)();
  static AccessibilityChildBehavior.combine.getter();
  uint64_t v26 = sub_10002A8D8(&qword_10017DD88, &qword_10017DD80);
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v38);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v27 = [*(id *)&v25[OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo] bundleIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v47 = v8;
  uint64_t v48 = v26;
  swift_getOpaqueTypeConformance2();
  uint64_t v28 = v39;
  View.accessibilityIdentifier(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v28);
  sub_100033980();
  id v29 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  LODWORD(v11) = [v29 notificationsEnabled];

  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (v11)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v33 = v47;
    unint64_t v32 = v48;
    swift_bridgeObjectRelease();
    uint64_t v30 = HIBYTE(v32) & 0xF;
    if ((v32 & 0x2000000000000000) == 0) {
      uint64_t v30 = v33 & 0xFFFFFFFFFFFFLL;
    }
    if (v30)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v30 = v47;
      uint64_t v31 = v48;
    }
    else
    {
      uint64_t v31 = 0;
    }
  }
  uint64_t v47 = v30;
  uint64_t v48 = v31;
  sub_1000707E4();
  sub_10002D088();
  uint64_t v34 = v41;
  View.badge<A>(_:)();
  swift_bridgeObjectRelease();
  sub_10002A840(v24, &qword_10017DD70);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v45, v34, v44);
}

uint64_t sub_100070658@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for Application(0);
  sub_100070B94(&qword_10017DDD8, (void (*)(uint64_t))type metadata accessor for Application);
  id v4 = a1;
  uint64_t result = ObservedObject.init(wrappedValue:)();
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1000706DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006F718(a1);
}

uint64_t sub_100070718()
{
  return sub_10006FEA0(*(long long **)(v0 + 16));
}

unint64_t sub_100070720()
{
  unint64_t result = qword_10017DD68;
  if (!qword_10017DD68)
  {
    sub_10002A694(&qword_10017DD60);
    sub_10002A694(&qword_10017DD70);
    sub_1000707E4();
    sub_10002D088();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DD68);
  }
  return result;
}

unint64_t sub_1000707E4()
{
  unint64_t result = qword_10017DD78;
  if (!qword_10017DD78)
  {
    sub_10002A694(&qword_10017DD70);
    sub_10002A694(&qword_10017DD80);
    sub_10002A8D8(&qword_10017DD88, &qword_10017DD80);
    swift_getOpaqueTypeConformance2();
    sub_100070B94((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DD78);
  }
  return result;
}

unint64_t sub_1000708F8()
{
  unint64_t result = qword_10017DD98;
  if (!qword_10017DD98)
  {
    sub_10002A694(&qword_10017DD48);
    sub_10002A8D8(&qword_10017DD90, &qword_10017DD40);
    sub_100070B94((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DD98);
  }
  return result;
}

uint64_t sub_1000709D8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100070A04()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64);
}

uint64_t sub_100070A4C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000700A0(a1, (long long *)(v2 + 16), a2);
}

uint64_t sub_100070A54(uint64_t a1)
{
  return a1;
}

uint64_t sub_100070A80()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72);
}

void sub_100070AD0()
{
  uint64_t v1 = *(void (**)(void))(v0 + 32);
  id v2 = *(id *)(*(void *)(v0 + 64) + OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo);
  v1();
}

uint64_t sub_100070B30@<X0>(uint64_t *a1@<X8>)
{
  return sub_100070658(*(void **)(v1 + 16), a1);
}

unint64_t sub_100070B38()
{
  unint64_t result = qword_10017DDD0;
  if (!qword_10017DDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DDD0);
  }
  return result;
}

uint64_t sub_100070B94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100070BE0()
{
  unint64_t result = qword_10017DDE0;
  if (!qword_10017DDE0)
  {
    sub_10002A694(&qword_10017DDA0);
    sub_100070C80();
    sub_10002A8D8(&qword_10017DDF0, &qword_10017DDF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DDE0);
  }
  return result;
}

unint64_t sub_100070C80()
{
  unint64_t result = qword_10017DDE8;
  if (!qword_10017DDE8)
  {
    sub_10002A694(&qword_10017DD58);
    sub_10002A694(&qword_10017DD48);
    type metadata accessor for MultimodalListStyle();
    sub_1000708F8();
    swift_getOpaqueTypeConformance2();
    sub_10002A8D8(&qword_10017D258, &qword_10017D240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DDE8);
  }
  return result;
}

uint64_t sub_100070D74(uint64_t a1, uint64_t a2)
{
  long long v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_1000767A0((_OWORD *)a1, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *id v2 = 0x8000000000000000;
    sub_100075814(v14, a2, isUniquelyReferenced_nonNull_native);
    *id v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10002A840(a1, &qword_10017B810);
    unint64_t v7 = sub_100074450(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      *long long v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_100075D18();
        uint64_t v11 = v13;
      }
      sub_1000767A0((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v14);
      sub_1000753A0(v9, v11);
      *long long v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return sub_10002A840((uint64_t)v14, &qword_10017B810);
  }
}

void sub_100070E88(uint64_t a1, void *a2)
{
  id v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

void sub_100070F2C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, char a7, char a8, uint64_t a9)
{
  char v10 = v9;
  uint64_t v64 = a6;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v63 = type metadata accessor for Logger();
  uint64_t v61 = *(void *)(v63 - 8);
  uint64_t v18 = __chkstk_darwin(v63);
  v60[0] = (char *)v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v60 - v20;
  v10[OBJC_IVAR___CLBScenePresentationViewController_isInvalidated] = 0;
  long long v22 = &v10[OBJC_IVAR___CLBScenePresentationViewController_lastSeenViewSize];
  void *v22 = 0;
  v22[1] = 0;
  uint64_t v23 = (uint64_t *)&v10[OBJC_IVAR___CLBScenePresentationViewController_name];
  uint64_t *v23 = a1;
  v23[1] = a2;
  v60[2] = v23;
  uint64_t v24 = &v10[OBJC_IVAR___CLBScenePresentationViewController_bundleIdentifier];
  *uint64_t v24 = a3;
  v24[1] = a4;
  v60[1] = v24;
  v10[OBJC_IVAR___CLBScenePresentationViewController_shouldDisableIdleTimer] = a7;
  v10[OBJC_IVAR___CLBScenePresentationViewController_avoidsBackButton] = a8;
  *(void *)&v10[OBJC_IVAR___CLBScenePresentationViewController_displayLayoutStyle] = a9;
  uint64_t v25 = self;
  uint64_t v26 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v27 = [v25 sharedInstanceIfExists];
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v27 processesForBundleIdentifier:v28];

  sub_10002A544(0, &qword_10017DED8);
  unint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v30 >> 62))
  {
    if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v53 = Logger.common.unsafeMutableAddressor();
    uint64_t v54 = v61;
    uint64_t v55 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v21, v53, v63);
    swift_bridgeObjectRetain();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t ObjectType = (uint64_t)v26;
      uint64_t v59 = (uint8_t *)v58;
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v65 = sub_100050B5C(a1, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unable to find %s in running processes.", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v54 + 8))(v21, v63);
      uint64_t v26 = (char *)ObjectType;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v21, v55);
    }
LABEL_18:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    type metadata accessor for ScenePresentationViewController();
    swift_deallocPartialClassInstance();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v52) {
    goto LABEL_15;
  }
LABEL_3:
  if ((v30 & 0xC000000000000001) != 0)
  {
    id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_21;
    }
    id v31 = *(id *)(v30 + 32);
  }
  unint64_t v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26[OBJC_IVAR___CLBScenePresentationViewController_sceneSupportsClarityUI] = a5 & 1;
  if (a5)
  {
    type metadata accessor for ClarityUIApplicationSceneSpecificationWrapper();
    static ClarityUIApplicationSceneSpecificationWrapper.specificationClass.getter();
    sub_10002A544(0, &qword_10017D7B0);
    uint64_t v33 = swift_dynamicCastMetatype();
    if (!v33)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = Logger.common.unsafeMutableAddressor();
      uint64_t v35 = v61;
      uint64_t v36 = v60[0];
      uint64_t v37 = v63;
      (*(void (**)(void, uint64_t, uint64_t))(v61 + 16))(v60[0], v34, v63);
      uint64_t v38 = Logger.logObject.getter();
      uint64_t v39 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v38, (os_log_type_t)v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v39, "Unable to get ClarityUI scene specification.", v40, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v33 = sub_10002A544(0, &qword_10017DEE0);
  }
  id v41 = [v32 identity];
  id v42 = [self identityForProcessIdentity:v41];

  id v43 = [(id)qword_100186478 sceneManager];
  id v44 = [v43 workspace];

  uint64_t v45 = (void *)swift_allocObject();
  v45[2] = a3;
  v45[3] = a4;
  v45[4] = v42;
  v45[5] = v33;
  v45[6] = ObjectType;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = sub_10007682C;
  *(void *)(v46 + 24) = v45;
  aBlock[4] = (uint64_t)sub_10007684C;
  aBlock[5] = v46;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000717F4;
  aBlock[3] = (uint64_t)&unk_10015FBD0;
  uint64_t v47 = _Block_copy(aBlock);
  id v48 = v42;
  swift_retain();
  swift_release();
  id v49 = [v44 createScene:v47];

  _Block_release(v47);
  LOBYTE(v47) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v47 & 1) == 0)
  {
    *(void *)&v26[OBJC_IVAR___CLBScenePresentationViewController_scene] = v49;

    long long v50 = sub_1000A3954(0);
    uint64_t v51 = v64;
    sub_100072D68(v64);
    swift_release();

    return;
  }
LABEL_21:
  __break(1u);
}

void sub_1000716F8(void *a1, Swift::String a2, uint64_t a3)
{
  String.append(_:)(a2);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setIdentifier:v5];

  [a1 setClientIdentity:a3];
  id v6 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  [a1 setSpecification:v6];
}

uint64_t sub_1000717F4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);

  return swift_unknownObjectRelease();
}

void sub_100071980()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  NSString v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR___CLBScenePresentationViewController_isInvalidated;
  if ((v1[OBJC_IVAR___CLBScenePresentationViewController_isInvalidated] & 1) == 0)
  {
    uint64_t v7 = OBJC_IVAR___CLBScenePresentationViewController_scene;
    [*(id *)&v1[OBJC_IVAR___CLBScenePresentationViewController_scene] removeObserver:v1];
    [*(id *)&v1[v7] invalidate];
    uint64_t v8 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    unint64_t v9 = v1;
    char v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v23 = v9;
      uint64_t v12 = swift_slowAlloc();
      uint64_t v22 = v6;
      uint64_t v13 = (uint8_t *)v12;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v25 = v21;
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v20 = v13 + 4;
      uint64_t v14 = *(void *)&v23[OBJC_IVAR___CLBScenePresentationViewController_name];
      unint64_t v15 = *(void *)&v23[OBJC_IVAR___CLBScenePresentationViewController_name + 8];
      swift_bridgeObjectRetain();
      uint64_t v16 = v14;
      unint64_t v9 = v23;
      uint64_t v24 = sub_100050B5C(v16, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Invalidated %s scene.", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v6 = v22;
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v1[v6] = 1;
    if (v9[OBJC_IVAR___CLBScenePresentationViewController_shouldDisableIdleTimer] == 1)
    {
      id v17 = [self sharedInstance];
      if (v17)
      {
        uint64_t v18 = v17;
        NSString v19 = String._bridgeToObjectiveC()();
        [v18 setIdleTimerDisabled:0 forReason:v19];
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_100071CCC()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

id sub_100071D24()
{
  sub_100071980();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ScenePresentationViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100071EA0()
{
  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for ScenePresentationViewController();
  objc_msgSendSuper2(&v18, "viewDidLayoutSubviews");
  if (v0[OBJC_IVAR___CLBScenePresentationViewController_avoidsBackButton] != 1) {
    return;
  }
  id v1 = [v0 view];
  if (!v1)
  {
LABEL_11:
    __break(1u);
    return;
  }
  objc_super v2 = v1;
  [v1 bounds];
  double v4 = v3;
  double v6 = v5;

  uint64_t v7 = (double *)&v0[OBJC_IVAR___CLBScenePresentationViewController_lastSeenViewSize];
  if (*(double *)&v0[OBJC_IVAR___CLBScenePresentationViewController_lastSeenViewSize] != v4
    || *(double *)&v0[OBJC_IVAR___CLBScenePresentationViewController_lastSeenViewSize + 8] != v6)
  {
    *uint64_t v7 = v4;
    v7[1] = v6;
    sub_1000741B0((uint64_t)v19);
    sub_100036F84((uint64_t)v19, (uint64_t)&v20, &qword_10017DED0);
    if ((v23 & 1) == 0)
    {
      long long v16 = v20;
      uint64_t v9 = v21;
      uint64_t v10 = v22;
      os_log_type_t v11 = *(void **)&v0[OBJC_IVAR___CLBScenePresentationViewController_scene];
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = v16;
      *(void *)(v12 + 32) = v9;
      *(void *)(v12 + 40) = v10;
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = sub_1000767C8;
      *(void *)(v13 + 24) = v12;
      aBlock[4] = sub_100076914;
      aBlock[5] = v13;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000A4C2C;
      aBlock[3] = &unk_10015FB58;
      uint64_t v14 = _Block_copy(aBlock);
      id v15 = v11;
      swift_retain();
      swift_release();
      [v15 performUpdate:v14];

      _Block_release(v14);
      LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v14)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
  }
}

void *sub_100072114()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___CLBScenePresentationViewController_scene);
  id v2 = v1;
  return v1;
}

uint64_t sub_100072144()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___CLBScenePresentationViewController_sceneSupportsClarityUI);
}

uint64_t sub_100072154()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  double v4 = (void (*)(void *))((char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v0[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_isAppeared] != 1)
  {
    uint64_t v6 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(void (*)(void *), uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
    uint64_t v7 = v0;
    uint64_t isEscapingClosureAtFileLocation = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled((os_log_t)isEscapingClosureAtFileLocation, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = (void **)swift_slowAlloc();
      long long aBlock = v25;
      *(_DWORD *)uint64_t v10 = 136315138;
      v24[1] = v10 + 4;
      uint64_t v12 = *(void *)&v7[OBJC_IVAR___CLBScenePresentationViewController_name];
      unint64_t v11 = *(void *)&v7[OBJC_IVAR___CLBScenePresentationViewController_name + 8];
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_100050B5C(v12, v11, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)isEscapingClosureAtFileLocation, v9, "Unexpectedly attempted to bring %s scene to foreground when it had not yet appeared.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(void (*)(void *), uint64_t))(v2 + 8))(v4, v1);
    }
LABEL_9:

    return (*(uint64_t (**)(void (*)(void *), uint64_t))(v2 + 8))(v4, v1);
  }
  uint64_t v5 = OBJC_IVAR___CLBScenePresentationViewController_scene;
  if ([*(id *)&v0[OBJC_IVAR___CLBScenePresentationViewController_scene] isActive])
  {
    double v4 = 0;
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v13 = *(void **)&v0[v5];
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 16) = v0;
    uint64_t v14 = swift_allocObject();
    double v4 = sub_10007434C;
    *(void *)(v14 + 16) = sub_10007434C;
    *(void *)(v14 + 24) = v1;
    unint64_t v30 = sub_10007691C;
    uint64_t v31 = v14;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v27 = 1107296256;
    NSString v28 = (void (*)(uint64_t, void *, void *))sub_100076918;
    id v29 = &unk_10015F978;
    id v15 = _Block_copy(&aBlock);
    id v16 = v13;
    id v17 = v0;
    swift_retain();
    swift_release();
    [v16 configureParameters:v15];

    _Block_release(v15);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v15)
    {
      __break(1u);
      return result;
    }
  }
  NSString v19 = *(void **)&v0[v5];
  uint64_t v7 = (char *)swift_allocObject();
  *((void *)v7 + 2) = v0;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_100074364;
  *(void *)(v20 + 24) = v7;
  unint64_t v30 = sub_10007437C;
  uint64_t v31 = v20;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256;
  NSString v28 = sub_1000A4C2C;
  id v29 = &unk_10015F9F0;
  uint64_t v21 = _Block_copy(&aBlock);
  uint64_t v2 = v31;
  uint64_t v22 = v0;
  id v23 = v19;
  swift_retain();
  swift_release();
  [v23 performUpdate:v21];

  _Block_release(v21);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  sub_100074384((uint64_t)v4);
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

void sub_100072610(void *a1, uint64_t a2)
{
  id v4 = [a1 clientSettings];
  if (v4)
  {
    uint64_t v5 = v4;
    [v4 mutableCopy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10002A544(0, &qword_10017DE78);
    if (swift_dynamicCast())
    {
      uint64_t v6 = OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation;
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation);
      if (!v7)
      {
        unint64_t v7 = sub_1000A439C();
        *(void *)(a2 + v6) = v7;
      }
      [v8 setPreferredInterfaceOrientation:sub_10008D354(v7)];
      [a1 setClientSettings:v8];
    }
  }
  else
  {
    __break(1u);
  }
}

id sub_100072718(void *a1, uint64_t a2, uint64_t a3)
{
  [a1 setForeground:1];
  uint64_t v5 = OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation;
  unint64_t v6 = *(void *)(a3 + OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation);
  if (!v6)
  {
    unint64_t v6 = sub_1000A439C();
    *(void *)(a3 + v5) = v6;
  }
  unint64_t v7 = sub_10008D354(v6);

  return [a1 setInterfaceOrientation:v7];
}

uint64_t sub_100072794()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___CLBScenePresentationViewController_scene);
  void v5[4] = sub_10004EAB4;
  void v5[5] = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_100070E88;
  v5[3] = &unk_10015F900;
  uint64_t v2 = _Block_copy(v5);
  id v3 = v1;
  swift_release();
  [v3 updateSettingsWithBlock:v2];

  _Block_release(v2);
  uint64_t result = swift_isEscapingClosureAtFileLocation();
  if (result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100072904(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)&v2[OBJC_IVAR___CLBScenePresentationViewController_scene] == a1)
  {
    uint64_t v10 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
    unint64_t v11 = v2;
    id v12 = a2;
    uint64_t v13 = v11;
    id v14 = v12;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      aBlock[0] = v32;
      *(_DWORD *)uint64_t v17 = 136315394;
      os_log_t v30 = v15;
      uint64_t v18 = *(void *)&v13[OBJC_IVAR___CLBScenePresentationViewController_name];
      unint64_t v19 = *(void *)&v13[OBJC_IVAR___CLBScenePresentationViewController_name + 8];
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_100050B5C(v18, v19, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2112;
      uint64_t v34 = (uint64_t)v14;
      id v20 = v14;
      uint64_t v33 = v13;
      os_log_type_t v21 = v16;
      id v22 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v14;

      os_log_t v23 = v30;
      os_log_type_t v24 = v21;
      uint64_t v13 = v33;
      _os_log_impl((void *)&_mh_execute_header, v30, v24, "%s scene did apply update with %@.", (uint8_t *)v17, 0x16u);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v13;
    uint64_t v26 = self;
    aBlock[4] = (uint64_t)sub_100051598;
    aBlock[5] = v25;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100033424;
    aBlock[3] = (uint64_t)&unk_10015F8D8;
    uint64_t v27 = _Block_copy(aBlock);
    NSString v28 = v13;
    swift_retain();
    swift_release();
    [v26 animateWithDuration:v27 animations:0.25];
    _Block_release(v27);
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for ScenePresentationViewController()
{
  return self;
}

void sub_100072D68(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR___CLBScenePresentationViewController_scene;
  [*(id *)((char *)v2 + OBJC_IVAR___CLBScenePresentationViewController_scene) addObserver:v2];
  if (([*(id *)((char *)v2 + v8) isActive] & 1) == 0)
  {
    id v9 = [*(id *)((char *)v2 + v8) clientSettings];
    [v9 mutableCopy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10002A544(0, &qword_10017DE78);
    if (swift_dynamicCast())
    {
      id v43 = (id *)v4;
      uint64_t v44 = v5;
      id v10 = v52;
      [v52 setPreferredInterfaceOrientation:1];
      [v10 setPreferredLevel:1.0];
      unint64_t v11 = *(void **)((char *)v2 + v8);
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v10;
      *(void *)(v12 + 24) = v2;
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = sub_100075F1C;
      *(void *)(v13 + 24) = v12;
      uint64_t v45 = v12;
      long long v50 = sub_10007691C;
      uint64_t v51 = (char *)v13;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v47 = 1107296256;
      id v48 = (void (*)(uint64_t, void *, void *))sub_100076918;
      id v49 = &unk_10015FA68;
      id v14 = (id *)_Block_copy(&aBlock);
      id v15 = v51;
      id v16 = v11;
      id v17 = v10;
      uint64_t v18 = v2;
      swift_retain();
      swift_release();
      [v16 configureParameters:v14];

      _Block_release(v14);
      LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v16) {
        goto LABEL_19;
      }
      if (!a1 || (self, (uint64_t v19 = swift_dynamicCastObjCClass()) == 0))
      {
        swift_release();

        return;
      }
      id v20 = (void *)v19;
      id v15 = a1;
      id v21 = [v20 actions];
      if (!v21)
      {
        swift_release();

        return;
      }
      id v22 = v21;
      sub_10002A544(0, (unint64_t *)&qword_10017DE80);
      sub_100075F34();
      uint64_t v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000736A4(v23);
      id v14 = v24;
      swift_bridgeObjectRelease();
      if ((unint64_t)v14 >> 62) {
        goto LABEL_20;
      }
      uint64_t v25 = v44;
      if (*(void *)(((unint64_t)v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        do
        {
          if (((unint64_t)v14 & 0xC000000000000001) != 0)
          {
            id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)(((unint64_t)v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              return;
            }
            id v26 = v14[4];
          }
          id v41 = v26;
          id v42 = v17;
          swift_bridgeObjectRelease();
          uint64_t v27 = Logger.common.unsafeMutableAddressor();
          id v14 = v43;
          (*(void (**)(char *, uint64_t, id *))(v25 + 16))(v7, v27, v43);
          NSString v28 = v18;
          uint64_t v29 = Logger.logObject.getter();
          os_log_type_t v30 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = swift_slowAlloc();
            id v40 = v15;
            uint64_t v32 = (uint8_t *)v31;
            uint64_t v39 = (void **)swift_slowAlloc();
            long long aBlock = v39;
            *(_DWORD *)uint64_t v32 = 136315138;
            uint64_t v38 = v32 + 4;
            uint64_t v33 = *(void *)&v28[OBJC_IVAR___CLBScenePresentationViewController_bundleIdentifier];
            id v14 = *(id **)&v28[OBJC_IVAR___CLBScenePresentationViewController_bundleIdentifier + 8];
            swift_bridgeObjectRetain();
            id v52 = (id)sub_100050B5C(v33, (unint64_t)v14, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v29, v30, "Found continuation action for %s; performing update",
              v32,
              0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v15 = v40;
            swift_slowDealloc();

            (*(void (**)(char *, id *))(v44 + 8))(v7, v43);
          }
          else
          {

            (*(void (**)(char *, id *))(v25 + 8))(v7, v14);
          }
          id v17 = *(id *)((char *)v2 + v8);
          uint64_t v2 = (void *)swift_allocObject();
          uint64_t v34 = v41;
          v2[2] = v41;
          unint64_t v7 = (char *)swift_allocObject();
          *((void *)v7 + 2) = sub_100075F9C;
          *((void *)v7 + 3) = v2;
          long long v50 = sub_100076914;
          uint64_t v51 = v7;
          long long aBlock = _NSConcreteStackBlock;
          uint64_t v47 = 1107296256;
          id v48 = sub_1000A4C2C;
          id v49 = &unk_10015FAE0;
          uint64_t v35 = _Block_copy(&aBlock);
          uint64_t v8 = (uint64_t)v51;
          uint64_t v18 = v17;
          id v36 = v34;
          swift_retain();
          swift_release();
          [v18 performUpdate:v35];

          _Block_release(v35);
          LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          swift_release();
          swift_release();
          if ((v35 & 1) == 0) {
            return;
          }
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          swift_bridgeObjectRetain();
          uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v25 = v44;
        }
        while (v37);
      }
      swift_release();

      swift_bridgeObjectRelease();
    }
  }
}

void sub_100073470(void *a1, uint64_t a2, uint64_t a3)
{
  [a1 setClientSettings:a2];
  id v5 = [a1 settings];
  if (v5)
  {
    uint64_t v6 = v5;
    [v5 mutableCopy];

    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10002A544(0, (unint64_t *)&unk_10017DEC0);
    if (swift_dynamicCast())
    {
      id v7 = [self mainConfiguration];
      [v12 setForeground:0];
      [v12 setDisplayConfiguration:v7];
      [v7 bounds];
      objc_msgSend(v12, "setFrame:");
      [v12 setInterfaceOrientation:1];
      [v12 setLevel:1.0];
      self;
      uint64_t v8 = swift_dynamicCastObjCClass();
      if (v8)
      {
        id v9 = (void *)v8;
        id v10 = v12;
        [v9 setInterfaceOrientationMode:1];
        id v11 = objc_msgSend(self, "clb_thisDeviceDisplayEdgeInfo");
        objc_msgSend(v11, "clb_applyDisplayEdgeInfoToSceneSettings:", v9);
        [v9 applyDefaultClarityUISettings];
      }
      [v12 setDisplayLayoutStyle:*(void *)(a3 + OBJC_IVAR___CLBScenePresentationViewController_displayLayoutStyle)];
      [a1 setSettings:v12];
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000736A4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10002A544(0, (unint64_t *)&qword_10017DE80);
    sub_100075F34();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v16 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    sub_10002A544(0, (unint64_t *)&qword_10017DE80);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v17;
    swift_unknownObjectRelease();
    uint64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v17) {
      goto LABEL_37;
    }
LABEL_33:
    self;
    if (swift_dynamicCastObjCClass())
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
LABEL_32:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v8) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v16 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v16 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v16 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v16 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v16 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v16 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              sub_1000767B0();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

void sub_1000739C0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = sub_100029F90((uint64_t *)&unk_10017DE90);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  int64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v36 - v9;
  uint64_t v39 = &_swiftEmptyDictionarySingleton;
  id v11 = [a3 userActivityData];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    *((void *)&v38 + 1) = &type metadata for Data;
    *(void *)&long long v37 = v13;
    *((void *)&v37 + 1) = v15;
  }
  else
  {
    long long v37 = 0u;
    long long v38 = 0u;
  }
  sub_100070D74((uint64_t)&v37, 7);
  id v16 = [a3 activityType];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    *((void *)&v38 + 1) = &type metadata for String;
    *(void *)&long long v37 = v18;
    *((void *)&v37 + 1) = v20;
  }
  else
  {
    long long v37 = 0u;
    long long v38 = 0u;
  }
  sub_100070D74((uint64_t)&v37, 5);
  id v21 = [a3 lastUpdateTime];
  if (v21)
  {
    unint64_t v22 = v21;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v8, 0, 1, v23);
  }
  else
  {
    uint64_t v23 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v8, 1, 1, v23);
  }
  sub_100036F84((uint64_t)v8, (uint64_t)v10, (uint64_t *)&unk_10017DE90);
  type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v10, 1, v23) == 1)
  {
    sub_10002A840((uint64_t)v10, (uint64_t *)&unk_10017DE90);
    long long v37 = 0u;
    long long v38 = 0u;
  }
  else
  {
    *((void *)&v38 + 1) = v23;
    uint64_t v25 = sub_10007673C((uint64_t *)&v37);
    (*(void (**)(uint64_t *, char *, uint64_t))(v24 + 32))(v25, v10, v23);
  }
  sub_100070D74((uint64_t)&v37, 6);
  sub_100073DF8((uint64_t)v39);
  swift_bridgeObjectRelease();
  id v26 = objc_allocWithZone((Class)UIActivityContinuationAction);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = [v26 initWithSettings:isa];

  if (v28)
  {
    sub_100029F90(&qword_10017B7F0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100111F50;
    *(void *)(inited + 32) = v28;
    *(void *)&long long v37 = inited;
    specialized Array._endMutation()();
    unint64_t v30 = v37;
    if ((unint64_t)v37 >> 62)
    {
      id v33 = v28;
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v34) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v31 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v32 = v28;
      if (!v31)
      {
LABEL_18:
        swift_bridgeObjectRelease();
        sub_10002A544(0, (unint64_t *)&qword_10017DE80);
        sub_100075F34();
        Class v35 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [a2 setActions:v35];

        return;
      }
    }
    sub_1000763E0(v30);
    goto LABEL_18;
  }
}

uint64_t sub_100073DF8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100029F90((uint64_t *)&unk_10017DEA8);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v26 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v25) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v25) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v25) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v25) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v26 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8 * v12);
    sub_10002A028(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v38 + 8);
    *(void *)&v38[0] = v17;
    v36[0] = v38[0];
    v36[1] = v38[1];
    uint64_t v37 = v39;
    *(void *)&v35[0] = v17;
    swift_dynamicCast();
    sub_1000767A0((_OWORD *)((char *)v36 + 8), v30);
    long long v31 = v27;
    long long v32 = v28;
    uint64_t v33 = v29;
    sub_1000767A0(v30, v34);
    long long v27 = v31;
    long long v28 = v32;
    uint64_t v29 = v33;
    sub_1000767A0(v34, v35);
    sub_1000767A0(v35, &v31);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v18 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)&v6[8 * (v19 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v19) & ~*(void *)&v6[8 * (v19 >> 6)])) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)&v6[8 * v20];
      }
      while (v24 == -1);
      unint64_t v9 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v27;
    *(_OWORD *)(v10 + 16) = v28;
    *(void *)(v10 + 32) = v29;
    uint64_t result = (uint64_t)sub_1000767A0(&v31, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v25)
  {
LABEL_37:
    swift_release();
    sub_1000767B0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v26 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v25) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1000741B0(uint64_t a1@<X8>)
{
  id v3 = [v1 view];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 window];

    uint64_t v6 = 0;
    if (!v5
      || ([v5 bounds], v8 = v7, uint64_t v10 = v9, v12 = v11, v14 = v13, v5, v12 == 0.0)
      && v14 == 0.0)
    {
      char v15 = 1;
      uint64_t v10 = 0;
      double v16 = 0.0;
      double v17 = 0.0;
LABEL_18:
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v10;
      *(double *)(a1 + 16) = v16;
      *(double *)(a1 + 24) = v17;
      *(unsigned char *)(a1 + 32) = v15;
      return;
    }
    id v18 = [v1 view];
    if (v18)
    {
      unint64_t v19 = v18;
      [v18 bounds];
      double v21 = v20;
      double v23 = v22;

      char v15 = 0;
      double v16 = v14 * (v21 / v23);
      if (v12 > v16) {
        double v16 = v12;
      }
      if (v14 > v23 / v21 * v16) {
        double v24 = v14;
      }
      else {
        double v24 = v23 / v21 * v16;
      }
      if (v24 >= v16) {
        double v17 = v24;
      }
      else {
        double v17 = v16;
      }
      if (v24 < v16) {
        double v16 = v24;
      }
      uint64_t v6 = v8;
      goto LABEL_18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000742FC()
{
  return _swift_deallocObject(v0, 24);
}

uint64_t sub_100074334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100074344()
{
  return swift_release();
}

void sub_10007434C(void *a1)
{
  sub_100072610(a1, *(void *)(v1 + 16));
}

uint64_t sub_100074354()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_100074364(void *a1, uint64_t a2)
{
  return sub_100072718(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10007436C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007437C(uint64_t a1, uint64_t a2)
{
  return sub_1000A4C04(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_100074384(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

unint64_t sub_100074394(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100074528(a1, v4);
}

unint64_t sub_1000743D8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000745F0(a1, a2, v4);
}

unint64_t sub_100074450(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_1000746D4(a1, v2);
}

unint64_t sub_100074494(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_100074770(a1, v2);
}

unint64_t sub_100074528(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100076874(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100029FD4((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000745F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        double v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000746D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100074770(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1000748E8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100029F90(&qword_10017DF58);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  Class v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    double v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    long long v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    char v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  double v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100074BF8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100029F90(&qword_10017DF50);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    double v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    char v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  double v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100074F04(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100029F90(&qword_10017DEB8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_34;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_34;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_41;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v13) {
                  goto LABEL_34;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      double v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2) {
        sub_1000767A0(v22, v32);
      }
      else {
        sub_10002A028((uint64_t)v22, (uint64_t)v32);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      uint64_t result = (uint64_t)sub_1000767A0(v32, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_1000751C8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000753A0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(a2 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            unint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *unint64_t v15 = *v11;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            unint64_t v17 = (_OWORD *)(v16 + 32 * v3);
            uint64_t v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 2))
            {
              long long v9 = v18[1];
              *unint64_t v17 = *v18;
              v17[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_100075538(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000743D8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000759B8();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1000748E8(v15, a4 & 1);
  unint64_t v20 = sub_1000743D8(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v18[2] = v25;

  swift_bridgeObjectRetain();
}

uint64_t sub_1000756A8(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000743D8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100075B6C();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100074BF8(result, a4 & 1);
  uint64_t result = sub_1000743D8(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v20 = a2;
  v20[1] = a3;
  *(unsigned char *)(v18[7] + v12) = a1 & 1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v18[2] = v23;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_100075814(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100074450(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100075D18();
      goto LABEL_7;
    }
    sub_100074F04(v13, a3 & 1);
    unint64_t v19 = sub_100074450(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_1000469D4((uint64_t)v17);
    return sub_1000767A0(a1, v17);
  }
LABEL_13:

  return sub_100075950(v10, a2, a1, v16);
}

_OWORD *sub_100075950(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_1000767A0(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

id sub_1000759B8()
{
  uint64_t v1 = v0;
  sub_100029F90(&qword_10017DF58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    char v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100075B6C()
{
  uint64_t v1 = v0;
  sub_100029F90(&qword_10017DF50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100075D18()
{
  uint64_t v1 = v0;
  sub_100029F90(&qword_10017DEB8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10002A028(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = sub_1000767A0(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100075EDC()
{
  return _swift_deallocObject(v0, 32);
}

void sub_100075F1C(void *a1)
{
  sub_100073470(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100075F24()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100075F34()
{
  unint64_t result = qword_10017DE88;
  if (!qword_10017DE88)
  {
    sub_10002A544(255, (unint64_t *)&qword_10017DE80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DE88);
  }
  return result;
}

void sub_100075F9C(uint64_t a1, void *a2)
{
  sub_1000739C0(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_100075FA4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100075FB4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A544(0, (unint64_t *)&qword_10017BDA8);
  id v8 = *(id *)&v1[OBJC_IVAR___CLBScenePresentationViewController_scene];
  char v9 = static NSObject.== infix(_:_:)();

  if (v9)
  {
    uint64_t v10 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
    id v11 = v2;
    id v12 = a1;
    int64_t v13 = (char *)v11;
    id v14 = v12;
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = swift_slowAlloc();
      int v36 = v17;
      uint64_t v19 = v18;
      int64_t v35 = (void *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v39 = v37;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v20 = *(void *)&v13[OBJC_IVAR___CLBScenePresentationViewController_name];
      unint64_t v21 = *(void *)&v13[OBJC_IVAR___CLBScenePresentationViewController_name + 8];
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_100050B5C(v20, v21, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v38 = (uint64_t)v14;
      id v22 = v14;
      uint64_t v34 = v4;
      unint64_t v23 = v13;
      id v24 = v14;
      id v25 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v35 = v24;

      id v14 = v24;
      int64_t v13 = v23;
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v36, "Did connect to %s scene: %@", (uint8_t *)v19, 0x16u);
      sub_100029F90(&qword_10017B800);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v34);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    char v26 = (objc_class *)type metadata accessor for SceneViewControllerBase();
    v40.receiver = v13;
    v40.super_class = v26;
    id v27 = objc_msgSendSuper2(&v40, "view");
    if (v27)
    {
      BOOL v28 = v27;
      self;
      [(id)swift_dynamicCastObjCClassUnconditional() setScene:v14];

      uint64_t v29 = OBJC_IVAR___CLBScenePresentationViewController_shouldDisableIdleTimer;
      if (v13[OBJC_IVAR___CLBScenePresentationViewController_shouldDisableIdleTimer] != 1) {
        return;
      }
      id v30 = [self sharedInstance];
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = v13[v29];
        NSString v33 = String._bridgeToObjectiveC()();
        [v31 setIdleTimerDisabled:v32 forReason:v33];

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_1000763E0(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100029F90(&qword_10017DEA0);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  unint64_t v7 = (char *)(v3 + 7);
  uint64_t v43 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v11 = v9;
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
        uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
        unint64_t v14 = v12 & ~v13;
        unint64_t v15 = v14 >> 6;
        uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
        uint64_t v17 = 1 << v14;
        if (((1 << v14) & v16) != 0) {
          break;
        }
LABEL_20:
        *(void *)&v7[8 * v15] = v17 | v16;
        *(void *)(v3[6] + 8 * v14) = v11;
        uint64_t v23 = v3[2];
        BOOL v10 = __OFADD__(v23, 1);
        uint64_t v24 = v23 + 1;
        if (v10) {
          goto LABEL_37;
        }
        v3[2] = v24;
        if (v8 == v5) {
          return;
        }
      }
      sub_10002A544(0, (unint64_t *)&qword_10017DE80);
      id v18 = *(id *)(v3[6] + 8 * v14);
      char v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
        uint64_t v5 = v43;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      uint64_t v5 = v43;
      if (v8 == v43) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  unint64_t v41 = a1 + 32;
  uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v42)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(v41 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      sub_10002A544(0, (unint64_t *)&qword_10017DE80);
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35)
      {
LABEL_24:

        goto LABEL_25;
      }
      uint64_t v36 = ~v29;
      while (1)
      {
        unint64_t v30 = (v30 + 1) & v36;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          break;
        }
        id v37 = *(id *)(v3[6] + 8 * v30);
        char v38 = static NSObject.== infix(_:_:)();

        if (v38) {
          goto LABEL_24;
        }
      }
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_25:
    if (++v25 == v43) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t *sub_10007673C(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

_OWORD *sub_1000767A0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000767B0()
{
  return swift_release();
}

uint64_t sub_1000767B8()
{
  return _swift_deallocObject(v0, 48, 7);
}

id sub_1000767C8(void *a1)
{
  return objc_msgSend(a1, "setFrame:", v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1000767DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000767EC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56);
}

void sub_10007682C(void *a1)
{
  sub_1000716F8(a1, v1[1], v1[2]._countAndFlagsBits);
}

uint64_t sub_10007683C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007684C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100076874(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t getEnumTagSinglePayload for PasscodeField.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PasscodeField.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PasscodeField.State()
{
  return &type metadata for PasscodeField.State;
}

uint64_t destroy for PasscodeField()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for PasscodeField(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PasscodeField(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

__n128 initializeWithTake for PasscodeField(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for PasscodeField(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for PasscodeField(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PasscodeField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PasscodeField()
{
  return &type metadata for PasscodeField;
}

uint64_t sub_100076D14()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100076D30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LayoutDirection();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v8 - 8);
  uint64_t v49 = sub_100029F90(&qword_10017DF60);
  __chkstk_darwin(v49);
  BOOL v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_100029F90(&qword_10017DF68);
  uint64_t v11 = __chkstk_darwin(v55);
  long long v50 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  id v52 = (char *)&v42 - v14;
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v42 - v15;
  uint64_t v51 = sub_100029F90(&qword_10017DF70);
  __chkstk_darwin(v51);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100029F90(&qword_10017DF78);
  __chkstk_darwin(v53);
  char v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v2 + 32);
  uint64_t result = static VerticalAlignment.center.getter();
  *(void *)BOOL v10 = result;
  *((void *)v10 + 1) = v20;
  v10[16] = 0;
  uint64_t v22 = *(void *)(v2 + 8);
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_100029F90(&qword_10017DF80);
    uint64_t v47 = v7;
    uint64_t v56 = 0;
    uint64_t v57 = v22;
    swift_getKeyPath();
    uint64_t v48 = a1;
    uint64_t v23 = swift_allocObject();
    uint64_t v46 = v4;
    long long v24 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(v23 + 80) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(v23 + 96) = v24;
    *(void *)(v23 + 112) = *(void *)(v2 + 96);
    long long v25 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v23 + 32) = v25;
    long long v26 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v23 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v23 + 64) = v26;
    sub_10007761C(v2);
    sub_100029F90(&qword_10017DF88);
    uint64_t v44 = v17;
    sub_100029F90(&qword_10017DF90);
    uint64_t v45 = v19;
    sub_10007768C();
    uint64_t v43 = v22;
    sub_10007775C();
    ForEach<>.init(_:id:content:)();
    LocalizedStringKey.init(stringLiteral:)();
    sub_10002A8D8(&qword_10017E000, &qword_10017DF60);
    uint64_t v27 = (uint64_t)v50;
    View.accessibilityLabel(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002A840((uint64_t)v10, &qword_10017DF60);
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v28._countAndFlagsBits = 0x455F5345554C4156;
    v28._object = (void *)0xEF2044455245544ELL;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t v56 = *(void *)v2;
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
    v29._countAndFlagsBits = 32;
    v29._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t v56 = v43;
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v30);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v31 = (uint64_t)v52;
    ModifiedContent<>.accessibilityValue(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002A840(v27, &qword_10017DF68);
    uint64_t v32 = (uint64_t)v54;
    ModifiedContent<>.accessibilityIdentifier(_:)();
    sub_10002A840(v31, &qword_10017DF68);
    if (*(void *)(v2 + 88)) {
      double v33 = *(double *)(v2 + 96);
    }
    else {
      double v33 = 0.0;
    }
    uint64_t v34 = (uint64_t)v44;
    sub_10002A580(v32, (uint64_t)v44, &qword_10017DF68);
    uint64_t v35 = v34 + *(int *)(v51 + 36);
    *(double *)uint64_t v35 = v33;
    *(void *)(v35 + 8) = 0;
    sub_10002A840(v32, &qword_10017DF68);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v38 = v46;
    id v37 = v47;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v47, enum case for LayoutDirection.leftToRight(_:), v46);
    uint64_t v39 = (uint64_t)v45;
    uint64_t v40 = (uint64_t *)&v45[*(int *)(v53 + 36)];
    uint64_t v41 = sub_100029F90(&qword_10017C760);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v40 + *(int *)(v41 + 28), v37, v38);
    *uint64_t v40 = KeyPath;
    sub_10002A580(v34, v39, &qword_10017DF70);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v37, v38);
    sub_10002A840(v34, &qword_10017DF70);
    return sub_100077A40(v39, v48);
  }
  return result;
}

double sub_1000773B8@<D0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  BOOL v6 = v5 < *a2;
  uint64_t v7 = 10;
  if (v5 < *a2) {
    uint64_t v7 = 9;
  }
  uint64_t v8 = a2[v7];
  uint64_t v9 = 64;
  if (v6) {
    uint64_t v9 = 56;
  }
  uint64_t v15 = v9;
  if (v6) {
    uint64_t v10 = 5;
  }
  else {
    uint64_t v10 = 6;
  }
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v11 = a2[v10];
  uint64_t v12 = *(void *)((char *)a2 + v15);
  swift_retain();
  swift_retain();
  char v13 = static Edge.Set.all.getter();
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 16) = v19;
  *(void *)(a3 + 24) = v20;
  *(void *)(a3 + 32) = v21;
  *(void *)(a3 + 40) = KeyPath;
  *(void *)(a3 + 48) = v8;
  *(void *)(a3 + 56) = v22;
  *(unsigned char *)(a3 + 64) = v23;
  *(void *)(a3 + 72) = v24;
  *(unsigned char *)(a3 + 80) = v25;
  *(void *)(a3 + 88) = v26;
  *(void *)(a3 + 96) = v27;
  *(void *)(a3 + 104) = v11;
  double result = 2.0;
  *(_OWORD *)(a3 + 112) = xmmword_100111F90;
  *(void *)(a3 + 128) = 0x3FF0000000000000;
  *(void *)(a3 + 136) = v12;
  *(unsigned char *)(a3 + 144) = v13;
  *(_WORD *)(a3 + 145) = 256;
  return result;
}

uint64_t sub_100077568@<X0>(uint64_t a1@<X8>)
{
  return sub_100076D30(a1);
}

uint64_t sub_1000775B4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 120);
}

double sub_100077614@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000773B8(a1, (void *)(v2 + 16), a2);
}

uint64_t sub_10007761C(uint64_t a1)
{
  return a1;
}

unint64_t sub_10007768C()
{
  unint64_t result = qword_10017DF98;
  if (!qword_10017DF98)
  {
    sub_10002A694(&qword_10017DF88);
    sub_100077708();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DF98);
  }
  return result;
}

unint64_t sub_100077708()
{
  unint64_t result = qword_10017DFA0;
  if (!qword_10017DFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DFA0);
  }
  return result;
}

unint64_t sub_10007775C()
{
  unint64_t result = qword_10017DFA8;
  if (!qword_10017DFA8)
  {
    sub_10002A694(&qword_10017DF90);
    sub_1000777FC();
    sub_10002A8D8(qword_10017DA18, &qword_10017DA08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DFA8);
  }
  return result;
}

unint64_t sub_1000777FC()
{
  unint64_t result = qword_10017DFB0;
  if (!qword_10017DFB0)
  {
    sub_10002A694(&qword_10017DFB8);
    sub_1000778F8(&qword_10017DFC0, &qword_10017DFC8, (void (*)(void))sub_1000778C8);
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DFB0);
  }
  return result;
}

uint64_t sub_1000778C8()
{
  return sub_1000778F8(&qword_10017DFD0, &qword_10017DFD8, (void (*)(void))sub_100077974);
}

uint64_t sub_1000778F8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100077974()
{
  unint64_t result = qword_10017DFE0;
  if (!qword_10017DFE0)
  {
    sub_10002A694(&qword_10017DFE8);
    sub_10002A8D8(&qword_10017DFF0, &qword_10017DFF8);
    sub_10002A8D8(&qword_10017D258, &qword_10017D240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017DFE0);
  }
  return result;
}

uint64_t sub_100077A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017DF78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100077AB4()
{
  unint64_t result = qword_10017E008;
  if (!qword_10017E008)
  {
    sub_10002A694(&qword_10017DF78);
    sub_1000778F8(&qword_10017E010, &qword_10017DF70, (void (*)(void))sub_100077B80);
    sub_10002A8D8(&qword_10017C778, &qword_10017C760);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E008);
  }
  return result;
}

unint64_t sub_100077B80()
{
  unint64_t result = qword_10017E018;
  if (!qword_10017E018)
  {
    sub_10002A694(&qword_10017DF68);
    sub_10002A8D8(&qword_10017E000, &qword_10017DF60);
    sub_100077C20();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E018);
  }
  return result;
}

unint64_t sub_100077C20()
{
  unint64_t result = qword_10017CB00;
  if (!qword_10017CB00)
  {
    type metadata accessor for AccessibilityAttachmentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CB00);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SilentModeHUD(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SilentModeHUD(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100077DE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SilentModeHUD()
{
  return &type metadata for SilentModeHUD;
}

uint64_t sub_100077E1C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100077E38@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SilentModeHUDPlatter();
  uint64_t v5 = v4 - 8;
  uint64_t v6 = __chkstk_darwin(v4);
  int v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = sub_100029F90(&qword_10017D6F8);
  uint64_t v27 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v27 + 64);
  uint64_t v13 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v26 - v15;
  *(void *)uint64_t v16 = static HorizontalAlignment.center.getter();
  *((void *)v16 + 1) = 0;
  v16[16] = 1;
  uint64_t v17 = (uint64_t)&v16[*(int *)(sub_100029F90(&qword_10017E020) + 44)];
  unsigned char *v8 = a1;
  uint64_t v18 = (uint64_t *)&v8[*(int *)(v5 + 28)];
  uint64_t *v18 = swift_getKeyPath();
  sub_100029F90(&qword_10017D758);
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = *(int *)(v5 + 32);
  static ClarityUIMetrics.standardSpacing.getter();
  *(void *)&v8[v19] = v20;
  sub_100078F40((uint64_t)v8, (uint64_t)v10);
  sub_1000799E8((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SilentModeHUDPlatter);
  sub_1000799E8((uint64_t)v8, v17, (uint64_t (*)(void))type metadata accessor for SilentModeHUDPlatter);
  uint64_t v21 = v17 + *(int *)(sub_100029F90(&qword_10017E028) + 48);
  *(void *)uint64_t v21 = 0;
  *(unsigned char *)(v21 + 8) = 1;
  sub_100079A50((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SilentModeHUDPlatter);
  sub_100079A50((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SilentModeHUDPlatter);
  sub_10002A580((uint64_t)v16, (uint64_t)v14, &qword_10017D6F8);
  unint64_t v22 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v23 = swift_allocObject();
  sub_100036F84((uint64_t)v14, v23 + v22, &qword_10017D6F8);
  *a2 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  uint64_t v24 = (uint64_t (**)())((char *)a2 + *(int *)(sub_100029F90(&qword_10017E030) + 36));
  *uint64_t v24 = sub_1000790D4;
  v24[1] = (uint64_t (*)())v23;
  return sub_10002A840((uint64_t)v16, &qword_10017D6F8);
}

uint64_t sub_10007810C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100077E38(*v1, a1);
}

uint64_t type metadata accessor for SilentModeHUDPlatter()
{
  uint64_t result = qword_10017E098;
  if (!qword_10017E098) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100078160@<X0>(uint64_t a1@<X8>)
{
  uint64_t v87 = a1;
  uint64_t v2 = type metadata accessor for ColorScheme();
  uint64_t v85 = *(void *)(v2 - 8);
  uint64_t v86 = v2;
  __chkstk_darwin(v2);
  uint64_t v84 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v82);
  uint64_t v81 = (double *)((char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = sub_100029F90(&qword_10017E0E8);
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  char v69 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100029F90(&qword_10017E0F0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100029F90(&qword_10017E0F8) - 8;
  __chkstk_darwin(v71);
  uint64_t v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100029F90(&qword_10017E100) - 8;
  __chkstk_darwin(v74);
  uint64_t v73 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100029F90(&qword_10017E108) - 8;
  __chkstk_darwin(v76);
  uint64_t v75 = (uint64_t)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100029F90(&qword_10017E110) - 8;
  __chkstk_darwin(v77);
  uint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100029F90(&qword_10017E118);
  __chkstk_darwin(v78);
  uint64_t v83 = (uint64_t)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100029F90(&qword_10017E120);
  __chkstk_darwin(v79);
  uint64_t v80 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = v1;
  char v88 = v1;
  sub_100029F90(&qword_10017E128);
  sub_100029F90(&qword_10017E130);
  sub_10002A8D8(&qword_10017E138, &qword_10017E128);
  sub_10002A8D8(&qword_10017E140, &qword_10017E130);
  uint64_t v18 = v69;
  uint64_t v19 = (uint64_t)v15;
  Label.init(title:icon:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = v70;
  unint64_t v22 = v18;
  uint64_t v23 = v18;
  uint64_t v24 = v72;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v9, v22, v72);
  char v25 = &v9[*(int *)(v7 + 44)];
  *(void *)char v25 = KeyPath;
  v25[8] = 1;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v24);
  LOBYTE(KeyPath) = static Edge.Set.horizontal.getter();
  sub_100078CC8();
  EdgeInsets.init(_all:)();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  sub_10002A580((uint64_t)v9, (uint64_t)v11, &qword_10017E0F0);
  uint64_t v34 = &v11[*(int *)(v71 + 44)];
  *uint64_t v34 = KeyPath;
  *((void *)v34 + 1) = v27;
  *((void *)v34 + 2) = v29;
  *((void *)v34 + 3) = v31;
  *((void *)v34 + 4) = v33;
  v34[40] = 0;
  sub_10002A840((uint64_t)v9, &qword_10017E0F0);
  LOBYTE(KeyPath) = static Edge.Set.vertical.getter();
  type metadata accessor for SilentModeHUDPlatter();
  EdgeInsets.init(_all:)();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v43 = v73;
  sub_10002A580((uint64_t)v11, v73, &qword_10017E0F8);
  uint64_t v44 = v43 + *(int *)(v74 + 44);
  *(unsigned char *)uint64_t v44 = KeyPath;
  *(void *)(v44 + 8) = v36;
  *(void *)(v44 + 16) = v38;
  *(void *)(v44 + 24) = v40;
  *(void *)(v44 + 32) = v42;
  *(unsigned char *)(v44 + 40) = 0;
  sub_10002A840((uint64_t)v11, &qword_10017E0F8);
  id v45 = [self systemBackgroundColor];
  uint64_t v46 = Color.init(uiColor:)();
  LOBYTE(v11) = static Edge.Set.all.getter();
  uint64_t v47 = v75;
  sub_10002A580(v43, v75, &qword_10017E100);
  uint64_t v48 = v47 + *(int *)(v76 + 44);
  *(void *)uint64_t v48 = v46;
  *(unsigned char *)(v48 + 8) = (_BYTE)v11;
  sub_10002A840(v43, &qword_10017E100);
  double v49 = sub_100078CC8();
  long long v50 = v81;
  uint64_t v51 = (char *)v81 + *(int *)(v82 + 28);
  uint64_t v52 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v53 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 104))(v51, v52, v53);
  *long long v50 = v49;
  v50[1] = v49;
  uint64_t v54 = v19 + *(int *)(v77 + 44);
  sub_1000799E8((uint64_t)v50, v54, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v54 + *(int *)(sub_100029F90(&qword_10017CF08) + 36)) = 256;
  sub_10002A580(v47, v19, &qword_10017E108);
  sub_100079A50((uint64_t)v50, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  sub_10002A840(v47, &qword_10017E108);
  if (*v1 == 1) {
    uint64_t v55 = static Color.red.getter();
  }
  else {
    uint64_t v55 = static Color.primary.getter();
  }
  uint64_t v56 = v55;
  uint64_t v57 = swift_getKeyPath();
  uint64_t v58 = v83;
  sub_10002A580(v19, v83, &qword_10017E110);
  uint64_t v59 = (uint64_t *)(v58 + *(int *)(v78 + 36));
  *uint64_t v59 = v57;
  v59[1] = v56;
  sub_10002A840(v19, &qword_10017E110);
  uint64_t v61 = v84;
  uint64_t v60 = v85;
  uint64_t v62 = v86;
  (*(void (**)(char *, void, uint64_t))(v85 + 104))(v84, enum case for ColorScheme.dark(_:), v86);
  uint64_t v63 = swift_getKeyPath();
  uint64_t v64 = (uint64_t)v80;
  uint64_t v65 = (uint64_t *)&v80[*(int *)(v79 + 36)];
  uint64_t v66 = sub_100029F90(&qword_10017E148);
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))((char *)v65 + *(int *)(v66 + 28), v61, v62);
  *uint64_t v65 = v63;
  sub_10002A580(v58, v64, &qword_10017E118);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
  sub_10002A840(v58, &qword_10017E118);
  return sub_100036F84(v64, v87, &qword_10017E120);
}

double sub_1000789E4@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.leading.getter();
  uint64_t v5 = static VerticalAlignment.firstTextBaseline.getter();
  sub_100078A78(a1, (uint64_t)&v14);
  char v6 = v15;
  uint64_t v7 = v16;
  double result = v17;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  long long v12 = v14;
  long long v13 = v18;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(_OWORD *)(a2 + 16) = v12;
  *(unsigned char *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(double *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 56) = v13;
  *(unsigned char *)(a2 + 72) = v9;
  *(void *)(a2 + 80) = v10;
  *(void *)(a2 + 88) = v11;
  return result;
}

uint64_t sub_100078A78@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  int v11 = *a1;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v12;
  uint64_t v17 = v13;
  BOOL v18 = v11 == 0;
  double v19 = 0.0;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v8;
  if (v11) {
    double v20 = 1.0;
  }
  else {
    double v20 = 0.0;
  }
  char v21 = v14 & 1;
  *(double *)(a2 + 32) = v20;
  if (v18) {
    double v19 = 1.0;
  }
  *(void *)(a2 + 40) = v12;
  *(void *)(a2 + 48) = v13;
  *(unsigned char *)(a2 + 56) = v21;
  *(void *)(a2 + 64) = v15;
  *(double *)(a2 + 72) = v19;
  sub_100041B00(v4, v6, v10);
  swift_bridgeObjectRetain();
  sub_100041B00(v16, v17, v21);
  swift_bridgeObjectRetain();
  sub_100041A08(v16, v17, v21);
  swift_bridgeObjectRelease();
  sub_100041A08(v4, v6, v10);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100078C14@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.center.getter();
  uint64_t v5 = static VerticalAlignment.firstTextBaseline.getter();
  uint64_t v6 = Image.init(systemName:)();
  int v7 = *a1;
  uint64_t result = Image.init(systemName:)();
  double v9 = 0.0;
  if (v7) {
    double v10 = 1.0;
  }
  else {
    double v10 = 0.0;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  if (!v7) {
    double v9 = 1.0;
  }
  *(double *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = result;
  *(double *)(a2 + 40) = v9;
  return result;
}

double sub_100078CC8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100029F90(&qword_10017E150);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = self;
  uint64_t v6 = type metadata accessor for SilentModeHUDPlatter();
  sub_100061B98((uint64_t)v4);
  uint64_t v7 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 0, 1, v7);
  uint64_t v8 = (void *)UIContentSizeCategory.init(_:)();
  id v9 = [self traitCollectionWithPreferredContentSizeCategory:v8];

  id v10 = [v5 preferredFontForTextStyle:UIFontTextStyleBody compatibleWithTraitCollection:v9];
  [v10 _bodyLeading];
  double v12 = v11;

  return v12 * 0.5 + *(double *)(v1 + *(int *)(v6 + 24));
}

uint64_t sub_100078E50()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_100078E74(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DynamicTypeSize();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t sub_100078F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SilentModeHUDPlatter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100078FA8()
{
  uint64_t v1 = *(void *)(sub_100029F90(&qword_10017D6F8) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = v0 + *(int *)(sub_100029F90(&qword_10017E020) + 44);
  unint64_t v5 = v4 + *(int *)(type metadata accessor for SilentModeHUDPlatter() + 20) + v2;
  sub_100029F90(&qword_10017D758);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v2 + v3);
}

uint64_t sub_1000790D4()
{
  uint64_t v1 = *(void *)(sub_100029F90(&qword_10017D6F8) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000614C8(v2);
}

uint64_t *sub_100079150(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (uint64_t *)((char *)a1 + v7);
    id v9 = (uint64_t *)((char *)a2 + v7);
    sub_100029F90(&qword_10017D758);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      void *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_100079280(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  sub_100029F90(&qword_10017D758);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for DynamicTypeSize();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(v2, v3);
  }
  else
  {
    return swift_release();
  }
}

unsigned char *sub_100079328(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  sub_100029F90(&qword_10017D758);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *uint64_t v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_100079408(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    sub_10002A840((uint64_t)&a1[v6], &qword_10017D758);
    sub_100029F90(&qword_10017D758);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *uint64_t v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_100079500(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_100029F90(&qword_10017D758);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for DynamicTypeSize();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_1000795F0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = &a1[v6];
    uint64_t v8 = &a2[v6];
    sub_10002A840((uint64_t)&a1[v6], &qword_10017D758);
    uint64_t v9 = sub_100029F90(&qword_10017D758);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for DynamicTypeSize();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_1000796F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007970C);
}

uint64_t sub_10007970C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_100029F90(&qword_10017E038);
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 20)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1000797C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000797D4);
}

unsigned char *sub_1000797D4(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_100029F90(&qword_10017E038);
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 20)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10007987C()
{
  sub_100079920();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100079920()
{
  if (!qword_10017E0A8)
  {
    type metadata accessor for DynamicTypeSize();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017E0A8);
    }
  }
}

uint64_t sub_100079978()
{
  return sub_10002A8D8(&qword_10017E0E0, &qword_10017E030);
}

uint64_t sub_1000799B4()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1000799D0@<D0>(uint64_t a1@<X8>)
{
  return sub_1000789E4(*(unsigned __int8 **)(v1 + 16), a1);
}

uint64_t sub_1000799D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100078C14(*(unsigned __int8 **)(v1 + 16), a1);
}

uint64_t sub_1000799E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100079A50(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100079AC4()
{
  unint64_t result = qword_10017E158;
  if (!qword_10017E158)
  {
    sub_10002A694(&qword_10017E120);
    sub_100079B64();
    sub_10002A8D8(&qword_10017E198, &qword_10017E148);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E158);
  }
  return result;
}

unint64_t sub_100079B64()
{
  unint64_t result = qword_10017E160;
  if (!qword_10017E160)
  {
    sub_10002A694(&qword_10017E118);
    sub_100079C04();
    sub_10002A8D8(&qword_10017D258, &qword_10017D240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E160);
  }
  return result;
}

unint64_t sub_100079C04()
{
  unint64_t result = qword_10017E168;
  if (!qword_10017E168)
  {
    sub_10002A694(&qword_10017E110);
    sub_100079CA4();
    sub_10002A8D8(&qword_10017CF30, &qword_10017CF08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E168);
  }
  return result;
}

unint64_t sub_100079CA4()
{
  unint64_t result = qword_10017E170;
  if (!qword_10017E170)
  {
    sub_10002A694(&qword_10017E108);
    sub_100079D90(&qword_10017E178, &qword_10017E100, (void (*)(void))sub_100079D68);
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E170);
  }
  return result;
}

uint64_t sub_100079D68()
{
  return sub_100079D90(&qword_10017E180, &qword_10017E0F8, (void (*)(void))sub_100079E10);
}

uint64_t sub_100079D90(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100079E10()
{
  unint64_t result = qword_10017E188;
  if (!qword_10017E188)
  {
    sub_10002A694(&qword_10017E0F0);
    sub_10002A8D8(&qword_10017E190, &qword_10017E0E8);
    sub_10002A8D8(&qword_10017CEF8, &qword_10017CF00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E188);
  }
  return result;
}

uint64_t sub_100079ED4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v15 = static VerticalAlignment.center.getter();
  sub_10007A044((uint64_t)&v16);
  uint64_t v14 = v16;
  char v2 = v17;
  uint64_t v3 = v18;
  uint64_t v4 = v19;
  char v5 = v20;
  uint64_t v6 = v21;
  uint64_t v7 = v22;
  char v13 = v23;
  uint64_t v12 = v24;
  char v8 = v25;
  uint64_t v9 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v16) = 1;
  char v30 = 1;
  char v29 = v2;
  char v28 = v5;
  char v27 = v8;
  char v26 = 1;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v15;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = v14;
  *(unsigned char *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  *(unsigned char *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v12;
  *(unsigned char *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = KeyPath;
  *(void *)(a1 + 128) = v9;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 1;
  sub_100041B00(v3, v4, v5);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100041A08(v3, v4, v5);
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10007A044@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = KeyPath;
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  sub_100041B00(v2, v4, v8);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100041A08(v2, v4, v8);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10007A14C()
{
  uint64_t v0 = type metadata accessor for AccessibilityNotification.ScreenChanged();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v5, 0, sizeof(v5));
  AccessibilityNotification.ScreenChanged.init(_:)();
  _AccessibilityNotifications.post()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_10007A22C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v29 - v5;
  id v7 = [self mainDisplay];
  id v8 = objc_allocWithZone((Class)BKSDisplayRenderOverlayDescriptor);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 initWithName:v9 display:v7];

  id v11 = [objc_allocWithZone((Class)BKSDisplayRenderOverlay) initWithDescriptor:v10];
  if (v11)
  {
    uint64_t v12 = v11;
    [v11 present];
    [v12 freeze];
  }
  else
  {
    uint64_t v13 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v6, v13, v0);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to create overlay for exiting ClarityUI.", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  }
  id v17 = [objc_allocWithZone((Class)CLFSystemShellSwitcher) init];
  id v32 = 0;
  unsigned int v18 = [v17 setClarityBoardEnabled:0 error:&v32];

  if (v18)
  {
    id v19 = v32;
  }
  else
  {
    id v20 = v32;
    uint64_t v21 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v22 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v22, v0);
    swift_errorRetain();
    swift_errorRetain();
    char v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v30 = v0;
      char v25 = (uint8_t *)swift_slowAlloc();
      char v26 = (void *)swift_slowAlloc();
      char v29 = v4;
      id v32 = v26;
      *(_DWORD *)char v25 = 136315138;
      uint64_t v31 = v21;
      swift_errorRetain();
      sub_100029F90(&qword_10017F8C0);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v31 = sub_100050B5C(v27, v28, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to exit ClarityUI: %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v29, v30);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    }
  }
}

double sub_10007A6C8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static HorizontalAlignment.center.getter();
  sub_100079ED4((uint64_t)v10);
  *(_OWORD *)&v12[103] = v10[6];
  *(_OWORD *)&v12[119] = v10[7];
  *(_OWORD *)&v12[135] = v10[8];
  *(_OWORD *)&v12[39] = v10[2];
  *(_OWORD *)&v12[55] = v10[3];
  *(_OWORD *)&v12[71] = v10[4];
  *(_OWORD *)&v12[87] = v10[5];
  *(_OWORD *)&v12[7] = v10[0];
  char v13 = 1;
  v12[151] = v11;
  *(_OWORD *)&v12[23] = v10[1];
  uint64_t v3 = static Color.black.getter();
  char v4 = static Edge.Set.all.getter();
  long long v5 = *(_OWORD *)&v12[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v12[96];
  *(_OWORD *)(a1 + 129) = v5;
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v12[128];
  long long v6 = *(_OWORD *)&v12[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v12[32];
  *(_OWORD *)(a1 + 65) = v6;
  long long v7 = *(_OWORD *)&v12[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v12[64];
  *(_OWORD *)(a1 + 97) = v7;
  double result = *(double *)v12;
  long long v9 = *(_OWORD *)&v12[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v12;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 161) = *(void *)&v12[144];
  *(_OWORD *)(a1 + 33) = v9;
  *(void *)(a1 + 176) = v3;
  *(unsigned char *)(a1 + 184) = v4;
  *(unsigned char *)(a1 + 185) = 1;
  *(void *)(a1 + 192) = sub_10007A14C;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  return result;
}

ValueMetadata *type metadata accessor for ExitClarityUIView()
{
  return &type metadata for ExitClarityUIView;
}

uint64_t sub_10007A800()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10007A830()
{
  unint64_t result = qword_10017E1A0;
  if (!qword_10017E1A0)
  {
    sub_10002A694(&qword_10017E1A8);
    sub_10007A8AC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E1A0);
  }
  return result;
}

unint64_t sub_10007A8AC()
{
  unint64_t result = qword_10017E1B0;
  if (!qword_10017E1B0)
  {
    sub_10002A694(&qword_10017E1B8);
    sub_10007A928();
    sub_10002E0C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E1B0);
  }
  return result;
}

unint64_t sub_10007A928()
{
  unint64_t result = qword_10017E1C0;
  if (!qword_10017E1C0)
  {
    sub_10002A694(&qword_10017E1C8);
    sub_10002A8D8(&qword_10017E1D0, &qword_10017E1D8);
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E1C0);
  }
  return result;
}

uint64_t sub_10007A9EC(uint64_t TupleTypeMetadata, unint64_t a2, uint64_t a3)
{
  char v4 = (uint64_t *)TupleTypeMetadata;
  long long v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v6 = *v5;
  }
  else
  {
    __chkstk_darwin(TupleTypeMetadata);
    id v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v9 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v8 - (char *)v5) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      id v10 = (long long *)(v5 + 2);
      char v11 = v8 + 16;
      unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *char v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v9 != a2)
      {
LABEL_9:
        unint64_t v14 = a2 - v9;
        uint64_t v15 = v9;
        uint64_t v16 = &v8[8 * v9];
        id v17 = &v5[v15];
        do
        {
          uint64_t v18 = *v17++;
          *(void *)uint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  __chkstk_darwin(TupleTypeMetadata);
  id v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v21 = (int *)(v6 + 32);
    unint64_t v22 = a2;
    do
    {
      if (a2 == 1) {
        int v23 = 0;
      }
      else {
        int v23 = *v21;
      }
      uint64_t v25 = *v5++;
      uint64_t v24 = v25;
      uint64_t v26 = *v4++;
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 16))(&v20[v23], v26);
      v21 += 4;
      --v22;
    }
    while (v22);
  }
  return TupleView.init(_:)();
}

uint64_t sub_10007ABB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_10007ACA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

double sub_10007ADA0()
{
  sub_100029F90(&qword_10017E368);
  State.wrappedValue.getter();
  return v1;
}

__n128 sub_10007ADF4@<Q0>(uint64_t a1@<X8>)
{
  sub_100029F90(&qword_10017E368);
  State.projectedValue.getter();
  __n128 result = v5;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(__n128 *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_10007AE54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v89 = a2;
  uint64_t v93 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v73 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  long long v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void (***)(char *, void))(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v74 = (char *)&v71 - v8;
  uint64_t v92 = v9;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v77 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v71 - v11;
  sub_10002A694(&qword_10017E328);
  uint64_t v90 = v10;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v79 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v78 = (char *)&v71 - v13;
  uint64_t v88 = v14;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v81 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v80 = (char *)&v71 - v16;
  uint64_t v91 = v17;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v83 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v82 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v71 - v21;
  sub_10002A694(&qword_10017E330);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  swift_getWitnessTable();
  uint64_t v23 = type metadata accessor for GeometryReader();
  uint64_t v84 = v18;
  uint64_t v24 = type metadata accessor for _ConditionalContent();
  uint64_t v86 = *(void *)(v24 - 8);
  uint64_t v87 = v24;
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v85 = (char *)&v71 - v26;
  if (*(unsigned char *)(v3 + 64))
  {
    uint64_t v50 = swift_allocObject();
    uint64_t v51 = *(void *)(v93 + 24);
    *(void *)(v50 + 16) = v4;
    *(void *)(v50 + 24) = v51;
    long long v52 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(v50 + 64) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(v50 + 80) = v52;
    *(unsigned char *)(v50 + 96) = *(unsigned char *)(v3 + 64);
    long long v53 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v50 + 32) = *(_OWORD *)v3;
    *(_OWORD *)(v50 + 48) = v53;
    sub_10007D788(v3);
    uint64_t v106 = GeometryReader.init(content:)();
    uint64_t v107 = v54;
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_100056EB0(&v106, v23, WitnessTable);
    swift_release();
    uint64_t v104 = (uint64_t)v128;
    uint64_t v105 = v129;
    sub_100056EB0(&v104, v23, WitnessTable);
    uint64_t v104 = v106;
    uint64_t v105 = v107;
    uint64_t v102 = v51;
    uint64_t v103 = &protocol witness table for _FrameLayout;
    uint64_t v56 = swift_getWitnessTable();
    unint64_t v57 = sub_10007D7C0();
    uint64_t v100 = v56;
    unint64_t v101 = v57;
    uint64_t v58 = swift_getWitnessTable();
    uint64_t v59 = sub_10002A8D8(&qword_10017E350, &qword_10017E328);
    uint64_t v98 = v58;
    uint64_t v99 = v59;
    uint64_t v96 = swift_getWitnessTable();
    uint64_t v97 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
    uint64_t v94 = swift_getWitnessTable();
    uint64_t v95 = &protocol witness table for _FlexFrameLayout;
    swift_getWitnessTable();
    double v49 = v85;
    sub_10007ABB0((uint64_t)&v104, v23);
    swift_release();
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t))(v3 + 48))(v25);
    v132.origin.x = sub_10007ADA0();
    CGRectGetWidth(v132);
    v133.origin.x = sub_10007ADA0();
    CGRectGetHeight(v133);
    static Alignment.center.getter();
    uint64_t v27 = *(void *)(v93 + 24);
    uint64_t v28 = v74;
    View.frame(width:height:alignment:)();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v6, v4);
    v134.origin.x = sub_10007ADA0();
    CGRectGetMidX(v134);
    v135.origin.x = sub_10007ADA0();
    CGRectGetMidY(v135);
    uint64_t v130 = v27;
    uint64_t v131 = &protocol witness table for _FrameLayout;
    uint64_t v71 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
    uint64_t v72 = v22;
    uint64_t v73 = v23;
    uint64_t v29 = v90;
    uint64_t v30 = v92;
    uint64_t v31 = swift_getWitnessTable();
    id v32 = v76;
    View.position(x:y:)();
    v75[1](v28, v30);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v4;
    *(void *)(v33 + 24) = v27;
    long long v34 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(v33 + 64) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(v33 + 80) = v34;
    *(unsigned char *)(v33 + 96) = *(unsigned char *)(v3 + 64);
    long long v35 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v33 + 32) = *(_OWORD *)v3;
    *(_OWORD *)(v33 + 48) = v35;
    uint64_t v128 = sub_10007D77C;
    uint64_t v129 = v33;
    sub_10007D788(v3);
    static Alignment.center.getter();
    sub_100029F90(&qword_10017E338);
    unint64_t v36 = sub_10007D7C0();
    uint64_t v126 = v31;
    unint64_t v127 = v36;
    uint64_t v37 = swift_getWitnessTable();
    uint64_t v75 = (void (**)(char *, void))&protocol conformance descriptor for GeometryReader<A>;
    sub_10002A8D8(&qword_10017E348, &qword_10017E338);
    uint64_t v38 = v78;
    View.background<A>(_:alignment:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v32, v29);
    static SafeAreaRegions.all.getter();
    static Edge.Set.all.getter();
    uint64_t v39 = sub_10002A8D8(&qword_10017E350, &qword_10017E328);
    uint64_t v124 = v37;
    uint64_t v125 = v39;
    uint64_t v40 = v88;
    uint64_t v41 = swift_getWitnessTable();
    uint64_t v42 = v80;
    View.ignoresSafeArea(_:edges:)();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v38, v40);
    static Alignment.center.getter();
    uint64_t v122 = v41;
    uint64_t v123 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
    uint64_t v69 = v91;
    uint64_t v70 = swift_getWitnessTable();
    uint64_t v43 = (uint64_t)v82;
    View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
    uint64_t v44 = v73;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v42, v69);
    uint64_t v120 = v70;
    uint64_t v121 = &protocol witness table for _FlexFrameLayout;
    uint64_t v45 = v84;
    uint64_t v46 = swift_getWitnessTable();
    uint64_t v47 = v72;
    sub_100056EB0(v43, v45, v46);
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v48(v43, v45);
    sub_100056EB0(v47, v45, v46);
    swift_getWitnessTable();
    double v49 = v85;
    sub_10007ACA8(v43, v44, v45);
    v48(v43, v45);
    v48((uint64_t)v47, v45);
  }
  uint64_t v60 = swift_getWitnessTable();
  uint64_t v118 = *(void *)(v93 + 24);
  uint64_t v119 = &protocol witness table for _FrameLayout;
  uint64_t v61 = swift_getWitnessTable();
  unint64_t v62 = sub_10007D7C0();
  uint64_t v116 = v61;
  unint64_t v117 = v62;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v64 = sub_10002A8D8(&qword_10017E350, &qword_10017E328);
  uint64_t v114 = v63;
  uint64_t v115 = v64;
  uint64_t v112 = swift_getWitnessTable();
  uint64_t v113 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v110 = swift_getWitnessTable();
  uint64_t v111 = &protocol witness table for _FlexFrameLayout;
  uint64_t v65 = swift_getWitnessTable();
  uint64_t v108 = v60;
  uint64_t v109 = v65;
  uint64_t v66 = v87;
  uint64_t v67 = swift_getWitnessTable();
  sub_100056EB0(v49, v66, v67);
  return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v49, v66);
}

uint64_t sub_10007BAFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v19[1] = a5;
  sub_10002A694(&qword_10017E330);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for HStack();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for VStack();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v19 - v14;
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = a2;
  v19[7] = a1;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100056EB0(v13, v9, WitnessTable);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  sub_100056EB0(v15, v9, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t sub_10007BD9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v29 = a2;
  uint64_t v27 = a1;
  uint64_t v31 = a5;
  sub_10002A694(&qword_10017E330);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for HStack();
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v30 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v26 = (char *)&v24 - v17;
  uint64_t v32 = a3;
  uint64_t v33 = v28;
  uint64_t v34 = v27;
  uint64_t v35 = v29;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  static SafeAreaRegions.all.getter();
  static Edge.Set.all.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
  static Alignment.center.getter();
  v41[4] = WitnessTable;
  v41[5] = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v23 = swift_getWitnessTable();
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v9);
  id v41[2] = v23;
  v41[3] = &protocol witness table for _FlexFrameLayout;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v20 = v26;
  sub_100056EB0(v16, v12, v19);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v20, v12);
  uint64_t v39 = 0;
  char v40 = 1;
  v41[0] = v16;
  v41[1] = &v39;
  v38[0] = v12;
  v38[1] = &type metadata for Spacer;
  uint64_t v36 = v19;
  uint64_t v37 = &protocol witness table for Spacer;
  sub_10007A9EC((uint64_t)v41, 2uLL, (uint64_t)v38);
  v21(v20, v12);
  return ((uint64_t (*)(char *, uint64_t))v21)(v16, v12);
}

uint64_t sub_10007C278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v34 = a5;
  uint64_t v8 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v33 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v29 = (char *)&v28 - v20;
  int v30 = *(unsigned __int8 *)(a1 + 40);
  int v31 = v30 ^ 1;
  (*(void (**)(uint64_t))(a1 + 48))(v19);
  static Edge.Set.top.getter();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  static Edge.Set.horizontal.getter();
  GeometryProxy.size.getter();
  sub_10007D87C(v21, v22);
  v45[5] = a4;
  v45[6] = &protocol witness table for _PaddingLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v11);
  v45[3] = WitnessTable;
  v45[4] = &protocol witness table for _PaddingLayout;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = v29;
  sub_100056EB0(v18, v14, v24);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v15 + 8);
  v26(v18, v14);
  uint64_t v42 = 0;
  LOBYTE(WitnessTable) = v30;
  LOBYTE(v13) = v31;
  char v43 = v30;
  char v44 = v31;
  v45[0] = &v42;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v25, v14);
  uint64_t v39 = 0;
  char v40 = (char)v13;
  char v41 = WitnessTable;
  v45[1] = v18;
  v45[2] = &v39;
  v38[0] = sub_100029F90(&qword_10017E330);
  v38[1] = v14;
  void v38[2] = v38[0];
  unint64_t v35 = sub_10007DA90();
  uint64_t v36 = v24;
  unint64_t v37 = v35;
  sub_10007A9EC((uint64_t)v45, 3uLL, (uint64_t)v38);
  v26(v25, v14);
  return ((uint64_t (*)(char *, uint64_t))v26)(v18, v14);
}

double sub_10007C63C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  GeometryProxy.size.getter();
  double v5 = v4 * 0.5;
  sub_10007DAFC();
  double v7 = v6 * 0.5;
  char v8 = *(unsigned char *)(a1 + 40);
  sub_10007ADF4((uint64_t)v13);
  uint64_t v9 = v13[0];
  uint64_t v10 = v13[1];
  *(double *)a2 = v5;
  *(double *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v10;
  double result = *(double *)&v14;
  long long v12 = v15;
  *(_OWORD *)(a2 + 40) = v14;
  *(_OWORD *)(a2 + 56) = v12;
  return result;
}

void sub_10007C6D4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10002A544(0, &qword_10017E370);
    sub_10007DC7C();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v19 = v21;
    uint64_t v2 = v22;
    uint64_t v3 = v23;
    unint64_t v4 = v24;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v18 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_36;
    }
    sub_10002A544(0, &qword_10017E370);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v25;
    swift_unknownObjectRelease();
    uint64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v25) {
      goto LABEL_36;
    }
LABEL_32:
    if (!objc_msgSend(v12, "activationState", v18))
    {
      self;
      uint64_t v16 = (void *)swift_dynamicCastObjCClass();
      if (v16)
      {
        id v17 = [v16 statusBarManager];
        if (v17)
        {

LABEL_36:
          sub_1000767B0();
          return;
        }
      }
    }

    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
LABEL_31:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v8) {
      goto LABEL_36;
    }
    unint64_t v14 = *(void *)(v19 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_36;
      }
      unint64_t v14 = *(void *)(v19 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_36;
        }
        unint64_t v14 = *(void *)(v19 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_36;
          }
          unint64_t v14 = *(void *)(v19 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_36;
            }
            unint64_t v14 = *(void *)(v19 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v19 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_30;
                }
              }
              goto LABEL_36;
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

uint64_t sub_10007C9CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007AE54(a1, a2);
}

BOOL sub_10007CA10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10007CA28(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A544(0, (unint64_t *)&qword_10017CB40);
  unint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject();
  long long v12 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v11 + 64) = v12;
  uint64_t v13 = *(void *)(v1 + 64);
  long long v14 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v11 + 32) = v14;
  *(void *)(v11 + 80) = v13;
  *(void *)(v11 + 88) = a1;
  aBlock[4] = sub_10007E4F0;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100033424;
  aBlock[3] = &unk_10015FFF8;
  uint64_t v15 = _Block_copy(aBlock);
  sub_10007E514(v1);
  id v16 = a1;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10007E54C();
  sub_100029F90(&qword_10017CB50);
  sub_10002A8D8(&qword_10017CB58, &qword_10017CB50);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v19);
}

uint64_t sub_10007CCF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  sub_10007E514(a1);
  sub_100029F90(&qword_10017E390);
  Binding.wrappedValue.setter();
  sub_10006EDC8((uint64_t)&v2);
  return swift_release();
}

id sub_10007CD7C()
{
  double v1 = *(double *)v0;
  double v2 = *(double *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  id v4 = objc_allocWithZone((Class)type metadata accessor for StatusBarSafeAreaViewController());
  return sub_10007CEF8(v3, v1, v2);
}

uint64_t sub_10007CDC4(void *a1)
{
  return sub_10007CA28(a1);
}

uint64_t sub_10007CE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10007E5A4();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10007CE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10007E5A4();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10007CED0()
{
}

id sub_10007CEF8(char a1, double a2, double a3)
{
  id v4 = &v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_safeRect];
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  uint64_t v5 = &v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_maxAllowedSize];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  unsigned char v5[16] = 1;
  unint64_t v6 = &v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_cornerRadii];
  _OWORD *v6 = 0u;
  v6[1] = 0u;
  v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_boundingRectRequiresUpdate] = 1;
  *(void *)&v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_widthShrinkFraction] = 0x3FE999999999999ALL;
  uint64_t v7 = (double *)&v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_idealSize];
  *uint64_t v7 = a2;
  v7[1] = a3;
  if (a1) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = 1;
  }
  *(void *)&v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_corner] = v8;
  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for StatusBarSafeAreaViewController();
  return objc_msgSendSuper2(&v10, "initWithNibName:bundle:", 0, 0);
}

void sub_10007D13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_maxAllowedSize;
  uint64_t v8 = &v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_maxAllowedSize];
  if (v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_maxAllowedSize + 16])
  {
    uint64_t v7 = OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_idealSize;
    uint64_t v9 = (double *)&v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_idealSize];
  }
  else
  {
    uint64_t v9 = (double *)&v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_maxAllowedSize];
  }
  double v10 = v9[1];
  double v11 = *(double *)&v3[v7];
  id v12 = [v3 view];
  if (!v12)
  {
    __break(1u);
    return;
  }
  uint64_t v13 = v12;
  double v33 = v11;
  objc_msgSend(v12, "_rectTuckedInBoundingPathCorner:withSize:cornerRadii:minimumPadding:", *(void *)&v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_corner], v11, v10, 0.0, 0.0, 0.0, 0.0, 0.0);
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;

  v39.origin.x = v15;
  v39.origin.y = v17;
  v39.size.width = v19;
  v39.size.height = v21;
  if (CGRectIsEmpty(v39))
  {
    if (a1 > 10) {
      return;
    }
    uint64_t v22 = *(void *)&v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_idealSize + 8];
    *(double *)uint64_t v8 = v11 * 0.8;
    *((void *)v8 + 1) = v22;
    v8[16] = 0;
    uint64_t v23 = a1 + 1;
    long long v36 = 0u;
    long long v37 = 0u;
    char v38 = 1;
    unint64_t v24 = &v36;
    goto LABEL_11;
  }
  sub_10007D470(a2, (uint64_t)v34);
  if (v35) {
    goto LABEL_10;
  }
  CGFloat v25 = *(double *)v34;
  CGFloat v26 = *(double *)&v34[1];
  CGFloat v28 = *(double *)&v34[2];
  CGFloat v27 = *(double *)&v34[3];
  v40.origin.x = v15;
  v40.origin.y = v17;
  v40.size.width = v19;
  v40.size.height = v21;
  double MinY = CGRectGetMinY(v40);
  v41.origin.x = v25;
  v41.origin.y = v26;
  v41.size.width = v28;
  v41.size.height = v27;
  if (vabdd_f64(MinY, CGRectGetMinY(v41)) > 0.00001)
  {
LABEL_10:
    uint64_t v29 = *(void *)&v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_idealSize + 8];
    *(double *)uint64_t v8 = v33 * 0.8;
    *((void *)v8 + 1) = v29;
    v8[16] = 0;
    *(CGFloat *)&long long v36 = v15;
    *((CGFloat *)&v36 + 1) = v17;
    *(CGFloat *)&long long v37 = v19;
    *((CGFloat *)&v37 + 1) = v21;
    char v38 = 0;
    unint64_t v24 = &v36;
    uint64_t v23 = 0;
LABEL_11:
    uint64_t v30 = 0;
LABEL_12:
    sub_10007D13C(v23, v24, v30);
    return;
  }
  if (a3 <= 2)
  {
    uint64_t v31 = *(void *)&v3[OBJC_IVAR____TtC12ClarityBoard31StatusBarSafeAreaViewController_idealSize + 8];
    *(double *)uint64_t v8 = v33 * 0.8;
    *((void *)v8 + 1) = v31;
    v8[16] = 0;
    uint64_t v30 = a3 + 1;
    uint64_t v23 = 0;
    unint64_t v24 = (long long *)a2;
    goto LABEL_12;
  }
}

id sub_10007D3F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StatusBarSafeAreaViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for StatusBarSafeAreaViewController()
{
  return self;
}

uint64_t sub_10007D470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017DED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007D4D8()
{
  swift_release();

  return swift_release();
}

uint64_t sub_10007D514(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_10007D56C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for PresentableNotificationView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10007D620(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t sub_10007D680(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10007D6C8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for SafeNotchView()
{
  return sub_100034DF8();
}

uint64_t sub_10007D734()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_10007D77C@<D0>(uint64_t a1@<X8>)
{
  return sub_10007C63C(v1 + 32, a1);
}

uint64_t sub_10007D788(uint64_t a1)
{
  return a1;
}

unint64_t sub_10007D7C0()
{
  unint64_t result = qword_10017E340;
  if (!qword_10017E340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E340);
  }
  return result;
}

uint64_t sub_10007D818()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 97);
}

uint64_t sub_10007D858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007BAFC(a1, v2 + 32, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_10007D864@<X0>(uint64_t a1@<X8>)
{
  return sub_10007BD9C(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_10007D870@<X0>(uint64_t a1@<X8>)
{
  return sub_10007C278(v1[4], v1[5], v1[2], v1[3], a1);
}

void sub_10007D87C(double a1, double a2)
{
  sub_10002A544(0, (unint64_t *)&qword_10017BF70);
  id v4 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v5 = [v4 listLayout];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
  {

    uint64_t v12 = swift_bridgeObjectRelease_n();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    uint64_t v12 = swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      id v13 = [self currentDevice];
      id v14 = [v13 userInterfaceIdiom];

      if (v14 == (id)1)
      {
        static ClarityUIMetrics.stackWidthAsPercentageOfScreenPad.getter();
        id v15 = [self mainScreen];
        [v15 bounds];
      }
      else
      {
        static ClarityUIMetrics.componentHorizontalPadding.getter();
      }
      return;
    }
  }
  if (a2 >= a1)
  {
    static ClarityUIMetrics.gridHorizontalPaddingPortrait.getter(v12);
  }
  else
  {
    static ClarityUIMetrics.gridHorizontalPaddingLandscape.getter(v12);
  }
}

unint64_t sub_10007DA90()
{
  unint64_t result = qword_10017E358;
  if (!qword_10017E358)
  {
    sub_10002A694(&qword_10017E330);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E358);
  }
  return result;
}

void sub_10007DAFC()
{
  id v0 = [self sharedApplication];
  id v1 = [v0 connectedScenes];

  sub_10002A544(0, &qword_10017E370);
  sub_10007DC7C();
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10007C6D4(v2);
  id v4 = v3;
  swift_bridgeObjectRelease();
  if (v4)
  {
    self;
    id v5 = (void *)swift_dynamicCastObjCClass();
    if (!v5)
    {
LABEL_6:

      return;
    }
    id v6 = [v5 statusBarManager];
    if (v6)
    {
      id v7 = v6;
      [v6 statusBarFrame];
      CGRectGetHeight(v8);

      id v4 = v7;
      goto LABEL_6;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

unint64_t sub_10007DC7C()
{
  unint64_t result = qword_10017E378;
  if (!qword_10017E378)
  {
    sub_10002A544(255, &qword_10017E370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E378);
  }
  return result;
}

uint64_t destroy for StatusBarSafeArea()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for StatusBarSafeArea(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for StatusBarSafeArea(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for StatusBarSafeArea(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for StatusBarSafeArea(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for StatusBarSafeArea(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StatusBarSafeArea(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StatusBarSafeArea()
{
  return &type metadata for StatusBarSafeArea;
}

uint64_t getEnumTagSinglePayload for NotchSide(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NotchSide(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007E098);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10007E0C0(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NotchSide()
{
  return &type metadata for NotchSide;
}

uint64_t sub_10007E0DC()
{
  return swift_getWitnessTable();
}

unint64_t sub_10007E3FC()
{
  unint64_t result = qword_10017E380;
  if (!qword_10017E380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E380);
  }
  return result;
}

unint64_t sub_10007E454()
{
  unint64_t result = qword_10017E388;
  if (!qword_10017E388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E388);
  }
  return result;
}

uint64_t sub_10007E4A8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96);
}

uint64_t sub_10007E4F0()
{
  return sub_10007CCF8(v0 + 16);
}

uint64_t sub_10007E4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10007E50C()
{
  return swift_release();
}

uint64_t sub_10007E514(uint64_t a1)
{
  return a1;
}

unint64_t sub_10007E54C()
{
  unint64_t result = qword_10017CB48;
  if (!qword_10017CB48)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017CB48);
  }
  return result;
}

unint64_t sub_10007E5A4()
{
  unint64_t result = qword_10017E398;
  if (!qword_10017E398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E398);
  }
  return result;
}

id sub_10007E63C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresentedSceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PresentedSceneDelegate()
{
  return self;
}

uint64_t sub_10007E694(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    __CocoaSet.endIndex.getter();
    char v6 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_10007F848(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    sub_10007F2FC(v3, v5, v2 != 0, a1);
    uint64_t v7 = v11;
    sub_10007F848(v3, v5, v2 != 0);
    return v7;
  }
  uint64_t result = sub_10007F554(a1);
  if ((v10 & 1) == 0)
  {
    uint64_t v5 = v9;
    if (*(_DWORD *)(a1 + 36) == v9)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10007E7A4@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for LayoutSubviews();
  sub_10007F8B0(&qword_10017E468, (void (*)(uint64_t))&type metadata accessor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v9[4] == v9[0])
  {
    uint64_t v2 = type metadata accessor for LayoutSubview();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  }
  else
  {
    uint64_t v4 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v6 = v5;
    uint64_t v7 = type metadata accessor for LayoutSubview();
    uint64_t v8 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, v6, v7);
    v4(v9, 0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
}

id sub_10007EA28(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [a1 type];
  if (v8 != (id)7) {
    return (id)(v8 == (id)7);
  }
  uint64_t v9 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  char v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Handling event to dismiss lock screen.", v12, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id result = [self sharedInstance];
  if (result)
  {
    id v14 = result;
    [result resetIdleTimerAndUndim:1];

    id v15 = *(void **)(v2 + OBJC_IVAR___CLBLockOverlaySceneDelegate_lockOverlayViewController);
    if (v15)
    {
      id v16 = v15;
      sub_100029F90(&qword_10017E440);
      sub_10007F854();
      Subject<>.send()();
    }
    return (id)(v8 == (id)7);
  }
  __break(1u);
  return result;
}

id sub_10007ECDC()
{
  return sub_10007F214(type metadata accessor for LockOverlaySceneDelegate);
}

uint64_t type metadata accessor for LockOverlaySceneDelegate()
{
  return self;
}

void sub_10007ED6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LockScreenView();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (objc_class *)type metadata accessor for LockOverlayViewController();
  v22.receiver = v1;
  v22.super_class = v5;
  objc_msgSendSuper2(&v22, "viewDidLoad");
  uint64_t v6 = swift_retain();
  sub_10005AB60(v6, 3, (uint64_t)v4);
  id v7 = objc_allocWithZone((Class)sub_100029F90(&qword_10017E458));
  id v8 = (void *)_UIHostingView.init(rootView:)();
  id v9 = [v1 view];
  if (v9)
  {
    char v10 = v9;
    [v9 addSubview:v8];

    id v11 = [v1 view];
    if (v11)
    {
      uint64_t v12 = v11;
      [v11 bounds];
      double v14 = v13;
      double v16 = v15;
      double v18 = v17;
      double v20 = v19;

      objc_msgSend(v8, "setFrame:", v14, v16, v18, v20);
      [v8 setAutoresizingMask:18];
      CGFloat v21 = *(void **)&v1[OBJC_IVAR____TtC12ClarityBoard25LockOverlayViewController_hostingView];
      *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard25LockOverlayViewController_hostingView] = v8;

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10007F008(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC12ClarityBoard25LockOverlayViewController_hostingView] = 0;
  uint64_t v6 = OBJC_IVAR____TtC12ClarityBoard25LockOverlayViewController_dismissPublisher;
  sub_100029F90(&qword_10017E440);
  swift_allocObject();
  id v7 = v3;
  *(void *)&v3[v6] = PassthroughSubject.init()();

  if (a2)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v8 = 0;
  }
  v11.receiver = v7;
  v11.super_class = (Class)type metadata accessor for LockOverlayViewController();
  id v9 = objc_msgSendSuper2(&v11, "initWithNibName:bundle:", v8, a3);

  return v9;
}

id sub_10007F1FC()
{
  return sub_10007F214(type metadata accessor for LockOverlayViewController);
}

id sub_10007F214(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for LockOverlayViewController()
{
  return self;
}

unint64_t sub_10007F2BC()
{
  unint64_t result = qword_10017E448;
  if (!qword_10017E448)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017E448);
  }
  return result;
}

void sub_10007F2FC(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10007F2BC();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10007F2BC();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  double v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_10007F554(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void sub_10007F5DC()
{
  self;
  id v1 = [objc_allocWithZone((Class)CLBSecureWindow) initWithWindowScene:swift_dynamicCastObjCClassUnconditional()];
  type metadata accessor for LockOverlayViewController();
  id v2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  if (sub_100008FF8() && (unint64_t)sub_100008E70() >= 2)
  {
    id v3 = objc_allocWithZone((Class)CLBAlphanumericPasscodeEntryView);
    id v4 = v2;
    id v5 = [v3 init];
    [v4 setView:v5];
  }
  [v1 setRootViewController:v2];
  [v1 makeKeyAndVisible];
  unsigned int v6 = *(void **)(v0 + OBJC_IVAR___CLBLockOverlaySceneDelegate_lockOverlayViewController);
  *(void *)(v0 + OBJC_IVAR___CLBLockOverlaySceneDelegate_lockOverlayViewController) = v2;
  id v7 = v2;

  id v8 = *(id *)(v0 + OBJC_IVAR___CLBLockOverlaySceneDelegate_window);
  *(void *)(v0 + OBJC_IVAR___CLBLockOverlaySceneDelegate_window) = v1;
}

void sub_10007F73C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  id v1 = (void *)sub_10007E694(v0);
  swift_bridgeObjectRelease();
  if (v1)
  {
    id v2 = [v1 key];

    if (v2)
    {
      id v3 = [self sharedInstance];
      if (v3)
      {
        id v4 = v3;
        [v3 resetIdleTimerAndUndim:1];

        id v5 = [self defaultCenter];
        [v5 postNotificationName:CLBLockScreenDidReceivedKeyPressNotification object:v2];
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_10007F848(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10007F854()
{
  unint64_t result = qword_10017E460;
  if (!qword_10017E460)
  {
    sub_10002A694(&qword_10017E440);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E460);
  }
  return result;
}

uint64_t sub_10007F8B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_10007FA0C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VoiceControlPresentationManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for VoiceControlPresentationManager()
{
  return self;
}

uint64_t sub_10007FA64(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_10007FB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a4;
  v4[11] = type metadata accessor for MainActor();
  v4[12] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[13] = v6;
  v4[14] = v5;
  return _swift_task_switch(sub_10007FBB8, v6, v5);
}

uint64_t sub_10007FBB8()
{
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  *id v1 = v0;
  v1[1] = sub_10007FC50;
  return static Task<>.sleep(nanoseconds:)(2000000000);
}

uint64_t sub_10007FC50()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  uint64_t v4 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v5 = sub_100080080;
  }
  else {
    uint64_t v5 = sub_10007FD8C;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_10007FD8C()
{
  uint64_t v1 = static MainActor.shared.getter();
  *(void *)(v0 + 136) = v1;
  if (v1)
  {
    swift_getObjectType();
    uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  return _swift_task_switch(sub_10007FE20, v2, v4);
}

uint64_t sub_10007FE20()
{
  uint64_t v1 = (void *)v0[10];
  v0[2] = v0;
  v0[3] = sub_10007FEB8;
  uint64_t v2 = swift_continuation_init();
  sub_1000800E4(v2, v1);
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10007FEB8()
{
  uint64_t v1 = *v0;
  swift_release();
  uint64_t v2 = *(void *)(v1 + 112);
  uint64_t v3 = *(void *)(v1 + 104);
  return _swift_task_switch(sub_10007FFD8, v3, v2);
}

uint64_t sub_10007FFD8()
{
  uint64_t v1 = v0[16];
  swift_release();
  static Task<>.checkCancellation()();
  if (!v1) {
    [*(id *)(v0[10] + OBJC_IVAR___CLBTransientHUDPresenter_window) setHidden:1];
  }
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100080080()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000800E4(uint64_t a1, void *a2)
{
  uint64_t v4 = self;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  double v14 = sub_100080380;
  uint64_t v15 = v5;
  unint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 1107296256;
  id v12 = sub_100033424;
  char v13 = &unk_100160048;
  uint64_t v6 = _Block_copy(&v10);
  id v7 = a2;
  swift_release();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  double v14 = sub_1000803C8;
  uint64_t v15 = v8;
  unint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 1107296256;
  id v12 = sub_10007FA64;
  char v13 = &unk_100160098;
  id v9 = _Block_copy(&v10);
  swift_release();
  [v4 animateWithDuration:v6 animations:v9 completion:0.3];
  _Block_release(v9);
  _Block_release(v6);
}

id sub_1000802A4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TransientHUDPresenter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TransientHUDPresenter()
{
  return self;
}

uint64_t sub_100080348()
{
  return _swift_deallocObject(v0, 24);
}

id sub_100080380()
{
  return [*(id *)(*(void *)(v0 + 16) + OBJC_IVAR___CLBTransientHUDPresenter_window) setAlpha:0.0];
}

uint64_t sub_1000803A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000803B0()
{
  return swift_release();
}

uint64_t sub_1000803B8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000803C8()
{
  return _swift_continuation_throwingResume(*(void *)(v0 + 16));
}

uint64_t initializeWithCopy for LockScreenKeypad(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LockScreenKeypad(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for LockScreenKeypad(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LockScreenKeypad(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for LockScreenKeypad(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LockScreenKeypad(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LockScreenKeypad()
{
  return &type metadata for LockScreenKeypad;
}

uint64_t sub_10008061C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100080638@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  double v33 = a2;
  uint64_t v30 = sub_100029F90(&qword_10017E4E0);
  uint64_t v29 = *(void *)(v30 - 8);
  uint64_t v3 = __chkstk_darwin(v30);
  uint64_t v32 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v31 = (char *)v28 - v5;
  long long v6 = a1[1];
  long long v48 = *a1;
  long long v49 = v6;
  sub_100029F90(&qword_10017C5D0);
  Binding.projectedValue.getter();
  uint64_t v8 = v34;
  uint64_t v7 = v35;
  v28[1] = v34;
  v28[0] = v35;
  uint64_t v9 = v36;
  uint64_t v10 = v37;
  char v11 = *((unsigned char *)a1 + 32);
  uint64_t v12 = *((void *)a1 + 5);
  uint64_t v13 = *((void *)a1 + 6);
  uint64_t v14 = *((void *)a1 + 7);
  swift_retain();
  static Font.title.getter();
  uint64_t v15 = Font.bold()();
  swift_release();
  static Font.caption2.getter();
  uint64_t v16 = Font.bold()();
  swift_release();
  uint64_t v34 = v8;
  uint64_t v35 = v7;
  uint64_t v36 = v9;
  uint64_t v37 = v10;
  char v38 = v11;
  __int16 v39 = 1;
  uint64_t v40 = v12;
  uint64_t v41 = v13;
  uint64_t v42 = v14;
  uint64_t v43 = 0;
  char v44 = 1;
  uint64_t v45 = v15;
  uint64_t v46 = v16;
  char v47 = 1;
  sub_10006E814();
  sub_100080970();
  double v17 = v31;
  View.buttonStyle<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v18 = v29;
  double v19 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  double v20 = v32;
  uint64_t v21 = v30;
  v19(v32, v17, v30);
  objc_super v22 = v33;
  void *v33 = 0;
  *((unsigned char *)v22 + 8) = 0;
  uint64_t v23 = (char *)v22;
  uint64_t v24 = sub_100029F90(&qword_10017E4F0);
  v19(&v23[*(int *)(v24 + 48)], v20, v21);
  CGFloat v25 = &v23[*(int *)(v24 + 64)];
  *(void *)CGFloat v25 = 0;
  v25[8] = 0;
  CGFloat v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  v26(v17, v21);
  return ((uint64_t (*)(char *, uint64_t))v26)(v20, v21);
}

uint64_t sub_10008090C@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  v7[0] = *v1;
  v7[1] = v3;
  long long v4 = v1[3];
  v7[2] = v1[2];
  v7[3] = v4;
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v5 = sub_100029F90(&qword_10017E4D8);
  return sub_100080638(v7, (void *)(a1 + *(int *)(v5 + 44)));
}

unint64_t sub_100080970()
{
  unint64_t result = qword_10017E4E8;
  if (!qword_10017E4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E4E8);
  }
  return result;
}

unint64_t sub_1000809C8()
{
  unint64_t result = qword_10017E4F8;
  if (!qword_10017E4F8)
  {
    sub_10002A694(&qword_10017E500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E4F8);
  }
  return result;
}

void sub_100080A24(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  *(void *)a8 = a1;
  *(unsigned char *)(a8 + 8) = a2 & 1;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(unsigned char *)(a8 + 32) = a5;
  type metadata accessor for ApplicationSceneClientSettings();
  sub_100085E5C(&qword_10017E510, (void (*)(uint64_t))&type metadata accessor for ApplicationSceneClientSettings);
  *(void *)(a8 + 40) = ObservedObject.init(wrappedValue:)();
  *(void *)(a8 + 48) = v13;
  *(void *)(a8 + 56) = a6;
  *(void *)(a8 + 64) = a7;
  *(void *)(a8 + 72) = a9;
  *(void *)(a8 + 80) = a10;
  uint64_t v14 = (int *)type metadata accessor for ApplicationSceneContainer();
  uint64_t v15 = (uint64_t *)(a8 + v14[9]);
  *uint64_t v15 = swift_getKeyPath();
  sub_100029F90(&qword_10017D740);
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = (uint64_t *)(a8 + v14[10]);
  uint64_t *v16 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  if (qword_10017B5D0 != -1) {
    swift_once();
  }
  char v23 = qword_10017E508;
  sub_100082970();
  ScaledClarityUIMetric.init(wrappedValue:)();
  uint64_t v17 = v14[12];
  static ClarityUIMetrics.componentCornerRadius.getter();
  *(void *)(a8 + v17) = v18;
  *(void *)(a8 + v14[13]) = 0x4024000000000000;
  uint64_t v19 = a8 + v14[14];
  State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v19 = v23;
  *(void *)(v19 + 8) = v24;
  double v20 = self;
  id v21 = [v20 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  id v22 = [v20 defaultCenter];
  NSNotificationCenter.publisher(for:object:)();
}

uint64_t type metadata accessor for ApplicationSceneContainer()
{
  uint64_t result = qword_10017E588;
  if (!qword_10017E588) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100080CDC()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_100080D00()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_100080D24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LayoutDirection();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.layoutDirection.setter();
}

void sub_100080DF0()
{
  qword_10017E508 = 0x4049000000000000;
}

uint64_t sub_100080E00()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ApplicationSceneContainer();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v51 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  char v11 = (char *)&v51 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v51 - v12;
  uint64_t v14 = *(void **)v1;
  if (*(unsigned char *)(v1 + 8)) {
    id v15 = [v14 application];
  }
  else {
    id v15 = v14;
  }
  uint64_t v16 = v15;
  id v17 = [v15 bundleIdentifier];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
  {
    swift_bridgeObjectRelease_n();
    sub_100086364(v1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
    goto LABEL_12;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100086364(v1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  if (v23)
  {
LABEL_12:
    sub_1000863CC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
    sub_100086364(v1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
LABEL_13:
    sub_1000863CC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
    sub_100086364(v1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
LABEL_14:
    char v26 = 1;
    uint64_t v5 = v8;
    goto LABEL_15;
  }
  uint64_t v24 = *(void **)v13;
  if (v13[8]) {
    id v25 = [v24 application];
  }
  else {
    id v25 = v24;
  }
  CGFloat v28 = v25;
  id v29 = [v25 bundleIdentifier];

  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v32 == v33)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000863CC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  sub_100086364(v1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  if (v35) {
    goto LABEL_13;
  }
  uint64_t v36 = *(void **)v11;
  if (v11[8]) {
    id v37 = [v36 application];
  }
  else {
    id v37 = v36;
  }
  char v38 = v37;
  id v39 = [v37 displayStyle];

  sub_1000863CC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  sub_100086364(v1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  if (v39 == (id)1) {
    goto LABEL_14;
  }
  uint64_t v40 = *(void **)v8;
  if (v8[8]) {
    id v41 = [v40 application];
  }
  else {
    id v41 = v40;
  }
  uint64_t v42 = v41;
  id v43 = [v41 displayStyle];

  sub_100086364((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  if (v43)
  {
    char v26 = 0;
  }
  else
  {
    char v44 = *(void **)v5;
    if (v5[8]) {
      id v45 = [v44 application];
    }
    else {
      id v45 = v44;
    }
    uint64_t v46 = v45;
    id v47 = [v45 userInterfaceStyle];

    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v49;

    if (v48 == 1802658116 && v50 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      char v26 = 1;
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  sub_1000863CC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
LABEL_15:
  sub_1000863CC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  return v26 & 1;
}

uint64_t sub_100081300@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v49 = a1;
  uint64_t v47 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v54 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v48 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ApplicationSceneContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v53 = v4 - 8;
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for AccessibilityActionKind();
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100029F90(&qword_10017E600);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_100029F90(&qword_10017E608);
  __chkstk_darwin(v13 - 8);
  uint64_t v42 = (uint64_t)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100029F90(&qword_10017E610);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  uint64_t v45 = (uint64_t)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v12 = static Alignment.center.getter();
  v12[1] = v18;
  uint64_t v19 = sub_100029F90(&qword_10017E618);
  sub_100081878(v2, (uint64_t)v12 + *(int *)(v19 + 44));
  static AccessibilityActionKind.escape.getter();
  long long v52 = type metadata accessor for ApplicationSceneContainer;
  sub_100086364(v2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  uint64_t v20 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = (v20 + 16) & ~v20;
  uint64_t v50 = v20 | 7;
  uint64_t v51 = v21 + v6;
  uint64_t v22 = swift_allocObject();
  uint64_t v43 = v21;
  sub_100084C1C((uint64_t)v7, v22 + v21);
  sub_10002A8D8(&qword_10017E620, &qword_10017E600);
  View.accessibilityAction(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v46);
  sub_10002A840((uint64_t)v12, &qword_10017E600);
  uint64_t v23 = v54;
  uint64_t v24 = v2;
  uint64_t v25 = v2 + *(int *)(v53 + 68);
  char v26 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
  uint64_t v27 = v47;
  CGFloat v28 = v48;
  v26(v48, v25, v47);
  id v41 = v7;
  sub_100086364(v24, (uint64_t)v7, (uint64_t (*)(void))v52);
  uint64_t v29 = swift_allocObject();
  sub_100084C1C((uint64_t)v7, v29 + v21);
  uint64_t v30 = v42;
  uint64_t v31 = v45;
  sub_10002A580(v42, v45, &qword_10017E608);
  v26((char *)(v31 + *(int *)(v16 + 60)), (uint64_t)v28, v27);
  uint64_t v32 = (uint64_t (**)(uint64_t))(v31 + *(int *)(v16 + 64));
  char *v32 = sub_100084C9C;
  v32[1] = (uint64_t (*)(uint64_t))v29;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v54 = v23 + 8;
  v33(v28, v27);
  sub_10002A840(v30, &qword_10017E608);
  uint64_t v34 = v27;
  v26(v28, v24 + *(int *)(v53 + 72), v27);
  uint64_t v35 = (uint64_t)v41;
  sub_100086364(v24, (uint64_t)v41, (uint64_t (*)(void))v52);
  uint64_t v36 = swift_allocObject();
  sub_100084C1C(v35, v36 + v43);
  uint64_t v37 = v49;
  sub_10002A580(v31, v49, &qword_10017E610);
  uint64_t v38 = sub_100029F90(&qword_10017E628);
  v26((char *)(v37 + *(int *)(v38 + 52)), (uint64_t)v28, v34);
  id v39 = (uint64_t (**)(uint64_t))(v37 + *(int *)(v38 + 56));
  *id v39 = sub_100084CB8;
  v39[1] = (uint64_t (*)(uint64_t))v36;
  v33(v28, v34);
  return sub_10002A840(v31, &qword_10017E610);
}

uint64_t sub_100081878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v3 = type metadata accessor for ColorScheme();
  uint64_t v57 = *(void *)(v3 - 8);
  uint64_t v58 = v3;
  __chkstk_darwin(v3);
  uint64_t v56 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for ApplicationSceneContainer();
  uint64_t v5 = *(void *)(v45 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v45);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100029F90(&qword_10017E630);
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v49 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100029F90(&qword_10017E638);
  __chkstk_darwin(v47);
  uint64_t v50 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100029F90(&qword_10017E640);
  __chkstk_darwin(v48);
  uint64_t v55 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_100029F90(&qword_10017E648);
  __chkstk_darwin(v52);
  uint64_t v54 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100086364(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v46 = v12 + v6;
  uint64_t v13 = swift_allocObject();
  sub_100084C1C((uint64_t)v7, v13 + v12);
  uint64_t v14 = static Alignment.center.getter();
  uint64_t v16 = v15;
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    uint64_t v17 = *(void **)(a1 + 16);
    uint64_t v18 = *(void **)(a1 + 24);
    id v19 = v17;
    id v20 = v18;
    char v21 = 1;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    char v21 = 0;
  }
  uint64_t v61 = sub_100085F00;
  uint64_t v62 = v13;
  uint64_t v63 = v17;
  uint64_t v64 = v18;
  char v65 = v21;
  uint64_t v66 = v14;
  uint64_t v67 = v16;
  uint64_t v22 = *(void *)(a1 + 48);
  uint64_t v23 = *(uint64_t (**)(uint64_t))(*(void *)v22 + 160);
  uint64_t v24 = swift_retain();
  char v25 = v23(v24);
  swift_release();
  char v60 = v25 & 1;
  static Binding.constant(_:)();
  char v26 = *(void (**)(uint64_t))(*(void *)v22 + 208);
  uint64_t v27 = swift_retain();
  v26(v27);
  swift_release();
  sub_100086364(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  uint64_t v28 = swift_allocObject();
  sub_100084C1C((uint64_t)v7, v28 + v12);
  sub_100029F90(&qword_10017E650);
  sub_100086260();
  uint64_t v29 = v49;
  View.multimodalNavigationChrome(shouldDisplay:bottomBarTransitionProgress:backButtonAction:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100086324(v63, v64);
  LOBYTE(v26) = sub_100080E00();
  uint64_t v31 = (uint64_t)v50;
  uint64_t v30 = v51;
  uint64_t v32 = v53;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v50, v29, v53);
  *(unsigned char *)(v31 + *(int *)(v47 + 36)) = v26 & 1;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v32);
  uint64_t v33 = static Color.clarityUIContentBackground.getter();
  LOBYTE(v32) = static Edge.Set.all.getter();
  uint64_t v34 = v55;
  sub_10002A580(v31, v55, &qword_10017E638);
  uint64_t v35 = v34 + *(int *)(v48 + 36);
  *(void *)uint64_t v35 = v33;
  *(unsigned char *)(v35 + 8) = v32;
  sub_10002A840(v31, &qword_10017E638);
  uint64_t KeyPath = swift_getKeyPath();
  if (sub_100080E00())
  {
    uint64_t v38 = v56;
    uint64_t v37 = v57;
    uint64_t v39 = v58;
    (*(void (**)(uint64_t, void, uint64_t))(v57 + 104))(v56, enum case for ColorScheme.dark(_:), v58);
  }
  else
  {
    uint64_t v38 = v56;
    sub_10006193C(v56);
    uint64_t v37 = v57;
    uint64_t v39 = v58;
  }
  uint64_t v40 = (uint64_t)v54;
  id v41 = (uint64_t *)&v54[*(int *)(v52 + 36)];
  uint64_t v42 = sub_100029F90(&qword_10017E148);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))((char *)v41 + *(int *)(v42 + 28), v38, v39);
  *id v41 = KeyPath;
  sub_10002A580(v34, v40, &qword_10017E640);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
  sub_10002A840(v34, &qword_10017E640);
  return sub_100036F84(v40, v59, &qword_10017E648);
}

void sub_100081F1C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v88 = a1;
  uint64_t v97 = a3;
  uint64_t v84 = sub_100029F90(&qword_10017CF08);
  __chkstk_darwin(v84);
  uint64_t v86 = (uint64_t)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v82);
  uint64_t v85 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_100029F90(&qword_10017E680);
  __chkstk_darwin(v83);
  uint64_t v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_100029F90(&qword_10017E688);
  uint64_t v8 = __chkstk_darwin(v94);
  uint64_t v87 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v77 - v10;
  uint64_t v95 = sub_100029F90(&qword_10017E690);
  __chkstk_darwin(v95);
  uint64_t v96 = (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_100029F90(&qword_10017E698);
  __chkstk_darwin(v90);
  uint64_t v91 = (uint64_t *)((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v92 = sub_100029F90(&qword_10017E6A0);
  __chkstk_darwin(v92);
  uint64_t v93 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for LayoutDirection();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  id v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  char v21 = (char *)&v77 - v20;
  uint64_t v22 = *(void **)a2;
  uint64_t v23 = a2;
  int v89 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v24 = v22;
  if (v89) {
    id v25 = [v22 application];
  }
  else {
    id v25 = v22;
  }
  char v26 = v25;
  id v27 = [v25 displayStyle];

  if (v27 == (id)1)
  {
    long long v79 = *(_OWORD *)&UIEdgeInsetsZero.top;
    CGFloat bottom = UIEdgeInsetsZero.bottom;
    CGFloat right = UIEdgeInsetsZero.right;
    uint64_t v81 = v11;
    uint64_t v30 = *(void *)(v23 + 80);
    uint64_t v78 = *(void *)(v23 + 72);
    id v31 = v24;
    swift_retain();
    uint64_t v32 = sub_10000730C();
    sub_1000254CC(v32, (uint64_t)v98);
    long long v33 = v98[0];
    GeometryProxy.size.getter();
    double v35 = v34;
    GeometryProxy.size.getter();
    if (v36 >= v35) {
      double v37 = *((double *)&v33 + 1);
    }
    else {
      double v37 = *(double *)&v33;
    }
    if (v36 >= v35) {
      double v38 = *(double *)&v33;
    }
    else {
      double v38 = *((double *)&v33 + 1);
    }
    double v39 = v38 / v37;
    uint64_t v40 = *(void *)(v23 + *(int *)(type metadata accessor for ApplicationSceneContainer() + 48));
    id v41 = v85;
    uint64_t v42 = &v85[*(int *)(v82 + 20)];
    uint64_t v43 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v44 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104))(v42, v43, v44);
    *id v41 = v40;
    v41[1] = v40;
    uint64_t v45 = v86;
    sub_100086364((uint64_t)v41, v86, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    *(_WORD *)(v45 + *(int *)(v84 + 36)) = 256;
    sub_10002A580(v45, (uint64_t)&v7[*(int *)(v83 + 36)], &qword_10017CF08);
    *(void *)uint64_t v7 = v24;
    v7[8] = v89;
    *((_OWORD *)v7 + 1) = v79;
    *((CGFloat *)v7 + 4) = bottom;
    *((CGFloat *)v7 + 5) = right;
    *((void *)v7 + 6) = v78;
    *((void *)v7 + 7) = v30;
    *((double *)v7 + 8) = v39;
    *((_WORD *)v7 + 36) = 0;
    id v46 = v31;
    swift_retain();
    sub_10002A840(v45, &qword_10017CF08);
    sub_1000863CC((uint64_t)v41, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
    swift_release();

    GeometryProxy.size.getter();
    GeometryProxy.size.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v47 = v87;
    sub_10002A580((uint64_t)v7, (uint64_t)v87, &qword_10017E680);
    uint64_t v48 = &v47[*(int *)(v94 + 36)];
    long long v49 = v98[1];
    *(_OWORD *)uint64_t v48 = v98[0];
    *((_OWORD *)v48 + 1) = v49;
    *((_OWORD *)v48 + 2) = v98[2];
    sub_10002A840((uint64_t)v7, &qword_10017E680);
    uint64_t v50 = (uint64_t)v81;
    sub_100036F84((uint64_t)v47, (uint64_t)v81, &qword_10017E688);
    sub_10002A580(v50, (uint64_t)v91, &qword_10017E688);
    swift_storeEnumTagMultiPayload();
    sub_100029F90(&qword_10017E6A8);
    sub_100086480(&qword_10017E6B0, &qword_10017E6A8, (void (*)(void))sub_10008642C);
    sub_100086480(&qword_10017E6C0, &qword_10017E688, (void (*)(void))sub_1000864FC);
    uint64_t v51 = (uint64_t)v93;
    _ConditionalContent<>.init(storage:)();
    sub_10002A580(v51, v96, &qword_10017E6A0);
    swift_storeEnumTagMultiPayload();
    sub_1000865C8();
    _ConditionalContent<>.init(storage:)();
    sub_10002A840(v51, &qword_10017E6A0);
    sub_10002A840(v50, &qword_10017E688);
  }
  else if (v27)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v80 = v24;
    uint64_t v87 = v24;
    GeometryProxy.safeAreaInsets.getter();
    uint64_t v53 = v52;
    GeometryProxy.safeAreaInsets.getter();
    double v55 = v54;
    double v57 = v56;
    uint64_t v58 = *(int *)(type metadata accessor for ApplicationSceneContainer() + 36);
    uint64_t v77 = v23;
    uint64_t v86 = v23 + v58;
    sub_100061E90((uint64_t)v21);
    uint64_t v59 = enum case for LayoutDirection.rightToLeft(_:);
    char v60 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 104);
    v60(v19, enum case for LayoutDirection.rightToLeft(_:), v15);
    char v61 = static LayoutDirection.== infix(_:_:)();
    uint64_t v62 = *(void (**)(char *, uint64_t))(v16 + 8);
    v62(v19, v15);
    v62(v21, v15);
    if (v61) {
      double v63 = v57;
    }
    else {
      double v63 = v55;
    }
    GeometryProxy.safeAreaInsets.getter();
    uint64_t v65 = v64;
    GeometryProxy.safeAreaInsets.getter();
    double v67 = v66;
    double v69 = v68;
    sub_100061E90((uint64_t)v21);
    v60(v19, v59, v15);
    char v70 = static LayoutDirection.== infix(_:_:)();
    v62(v19, v15);
    v62(v21, v15);
    if ((v70 & 1) == 0) {
      double v67 = v69;
    }
    uint64_t v71 = *(void *)(v77 + 72);
    uint64_t v72 = *(void *)(v77 + 80);
    swift_retain();
    char v73 = static Edge.Set.all.getter();
    uint64_t v74 = v91;
    *uint64_t v91 = v80;
    *((unsigned char *)v74 + 8) = v89;
    v74[2] = v53;
    *((double *)v74 + 3) = v63;
    v74[4] = v65;
    *((double *)v74 + 5) = v67;
    v74[6] = v71;
    v74[7] = v72;
    *((unsigned char *)v74 + 64) = v73;
    swift_storeEnumTagMultiPayload();
    uint64_t v75 = v87;
    swift_retain();
    sub_100029F90(&qword_10017E6A8);
    sub_100086480(&qword_10017E6B0, &qword_10017E6A8, (void (*)(void))sub_10008642C);
    sub_100086480(&qword_10017E6C0, &qword_10017E688, (void (*)(void))sub_1000864FC);
    uint64_t v76 = (uint64_t)v93;
    _ConditionalContent<>.init(storage:)();
    sub_10002A580(v76, v96, &qword_10017E6A0);
    swift_storeEnumTagMultiPayload();
    sub_1000865C8();
    _ConditionalContent<>.init(storage:)();
    sub_10002A840(v76, &qword_10017E6A0);
    swift_release();
  }
}

unint64_t sub_100082970()
{
  unint64_t result = qword_10017E518;
  if (!qword_10017E518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E518);
  }
  return result;
}

char *sub_1000829C4(uint64_t a1, char **a2, int *a3)
{
  uint64_t v4 = (char *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    id v19 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = &v19[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    char v8 = *((unsigned char *)a2 + 8);
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = a2[2];
    uint64_t v10 = a2[3];
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(void *)(a1 + 40) = a2[5];
    uint64_t v11 = a2[10];
    long long v38 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = v38;
    uint64_t v12 = a3[9];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (char **)((char *)a2 + v12);
    *(void *)(a1 + 80) = v11;
    uint64_t v15 = v7;
    uint64_t v16 = v9;
    uint64_t v17 = v10;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100029F90(&qword_10017D740);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = type metadata accessor for LayoutDirection();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v13, v14, v18);
    }
    else
    {
      void *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = a3[10];
    char v21 = &v4[v20];
    uint64_t v22 = (char **)((char *)a2 + v20);
    sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    }
    else
    {
      *(void *)char v21 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = a3[11];
    id v25 = &v4[v24];
    uint64_t v26 = (uint64_t)a2 + v24;
    uint64_t v27 = sub_100029F90(&qword_10017E520);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
    uint64_t v28 = a3[13];
    *(void *)&v4[a3[12]] = *(char **)((char *)a2 + a3[12]);
    *(void *)&v4[v28] = *(char **)((char *)a2 + v28);
    uint64_t v29 = a3[14];
    uint64_t v30 = a3[15];
    id v31 = &v4[v29];
    uint64_t v32 = (char *)a2 + v29;
    *id v31 = *v32;
    *((void *)v31 + 1) = *((void *)v32 + 1);
    long long v33 = &v4[v30];
    uint64_t v34 = (uint64_t)a2 + v30;
    uint64_t v35 = type metadata accessor for NSNotificationCenter.Publisher();
    double v36 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16);
    swift_retain();
    v36(v33, v34, v35);
    v36(&v4[a3[16]], (uint64_t)a2 + a3[16], v35);
  }
  return v4;
}

uint64_t sub_100082CD8(id *a1, int *a2)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = (char *)a1 + a2[9];
  sub_100029F90(&qword_10017D740);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for LayoutDirection();
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = (char *)a1 + a2[10];
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  char v8 = (char *)a1 + a2[11];
  uint64_t v9 = sub_100029F90(&qword_10017E520);
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  uint64_t v10 = (char *)a1 + a2[15];
  uint64_t v11 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8);
  ((void (*)(void *__return_ptr, char *, uint64_t))v14)((void *)(v11 - 8), v10, v11);
  uint64_t v12 = (char *)a1 + a2[16];

  return v14(v12, v11);
}

uint64_t sub_100082EDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v7;
  char v8 = *(void **)(a2 + 16);
  uint64_t v9 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 80);
  long long v36 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v36;
  uint64_t v11 = a3[9];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *(void *)(a1 + 80) = v10;
  id v14 = v6;
  id v15 = v8;
  id v16 = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100029F90(&qword_10017D740);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = type metadata accessor for LayoutDirection();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v12, v13, v17);
  }
  else
  {
    *uint64_t v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = a3[10];
  id v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  }
  else
  {
    *id v19 = *v20;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = a3[11];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v25 = sub_100029F90(&qword_10017E520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  uint64_t v26 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v26) = *(void *)(a2 + v26);
  uint64_t v27 = a3[14];
  uint64_t v28 = a3[15];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(unsigned char *)uint64_t v29 = *(unsigned char *)v30;
  *(void *)(v29 + 8) = *(void *)(v30 + 8);
  uint64_t v31 = a1 + v28;
  uint64_t v32 = a2 + v28;
  uint64_t v33 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16);
  swift_retain();
  v34(v31, v32, v33);
  v34(a1 + a3[16], a2 + a3[16], v33);
  return a1;
}

uint64_t sub_1000831A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  char v8 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v7;
  id v9 = v6;

  uint64_t v10 = *(void **)(a2 + 16);
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  uint64_t v13 = *(void **)(a2 + 24);
  id v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v13;
  id v15 = v13;

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v16 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v16;
  swift_retain();
  swift_release();
  uint64_t v17 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v17;
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v18 = a3[9];
    id v19 = (void *)(a1 + v18);
    uint64_t v20 = (void *)(a2 + v18);
    sub_10002A840(a1 + v18, &qword_10017D740);
    sub_100029F90(&qword_10017D740);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = type metadata accessor for LayoutDirection();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      *id v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = a3[10];
    uint64_t v23 = (void *)(a1 + v22);
    uint64_t v24 = (void *)(a2 + v22);
    sub_10002A840(a1 + v22, &qword_10017B928);
    sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    else
    {
      void *v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v26 = a3[11];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = sub_100029F90(&qword_10017E520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  uint64_t v30 = a3[14];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  swift_retain();
  swift_release();
  uint64_t v33 = a3[15];
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  uint64_t v36 = type metadata accessor for NSNotificationCenter.Publisher();
  double v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 24);
  v37(v34, v35, v36);
  v37(a1 + a3[16], a2 + a3[16], v36);
  return a1;
}

uint64_t sub_1000834C0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v6 = a3[9];
  char v7 = (void *)(a1 + v6);
  char v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v9 = sub_100029F90(&qword_10017D740);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for LayoutDirection();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[10];
  id v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  uint64_t v16 = a3[11];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_100029F90(&qword_10017E520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  uint64_t v21 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  v25(a1 + a3[16], a2 + a3[16], v24);
  return a1;
}

uint64_t sub_10008374C(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  char v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v6;

  char v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v11 = a3[9];
    id v12 = (void *)(a1 + v11);
    uint64_t v13 = (const void *)(a2 + v11);
    sub_10002A840(a1 + v11, &qword_10017D740);
    uint64_t v14 = sub_100029F90(&qword_10017D740);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for LayoutDirection();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    uint64_t v16 = a3[10];
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (const void *)(a2 + v16);
    sub_10002A840(a1 + v16, &qword_10017B928);
    uint64_t v19 = sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
  }
  uint64_t v21 = a3[11];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = sub_100029F90(&qword_10017E520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40))(v22, v23, v24);
  uint64_t v25 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v25) = *(void *)(a2 + v25);
  uint64_t v26 = a3[14];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(unsigned char *)uint64_t v27 = *(unsigned char *)v28;
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  swift_release();
  uint64_t v29 = a3[15];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 40);
  v33(v30, v31, v32);
  v33(a1 + a3[16], a2 + a3[16], v32);
  return a1;
}

uint64_t sub_100083A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100083A68);
}

uint64_t sub_100083A68(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_100029F90(&qword_10017E528);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[9];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_100029F90(&qword_10017D328);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[10];
    goto LABEL_11;
  }
  uint64_t v13 = sub_100029F90(&qword_10017E520);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[11];
    goto LABEL_11;
  }
  uint64_t v15 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[15];

  return v16(v18, a2, v17);
}

uint64_t sub_100083C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100083C4C);
}

uint64_t sub_100083C4C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_100029F90(&qword_10017E528);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[9];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_100029F90(&qword_10017D328);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[10];
    goto LABEL_9;
  }
  uint64_t v13 = sub_100029F90(&qword_10017E520);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[11];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[15];

  return v16(v18, a2, a2, v17);
}

void sub_100083E1C()
{
  sub_100083FDC(319, &qword_10017E598, (void (*)(uint64_t))&type metadata accessor for LayoutDirection);
  if (v0 <= 0x3F)
  {
    sub_100083FDC(319, (unint64_t *)&qword_10017D398, (void (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v1 <= 0x3F)
    {
      sub_100084030();
      if (v2 <= 0x3F)
      {
        type metadata accessor for NSNotificationCenter.Publisher();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_100083FDC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_100084030()
{
  if (!qword_10017E5A0)
  {
    sub_100082970();
    unint64_t v0 = type metadata accessor for ScaledClarityUIMetric();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017E5A0);
    }
  }
}

uint64_t sub_10008408C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000840A8()
{
  unint64_t v0 = sub_1000843B4()[2];
  swift_bridgeObjectRelease();
  if (v0 >= 2) {
    return sub_1000845A4(1);
  }
  uint64_t v2 = static Animation.clarityUINavigationTransition.getter();
  __chkstk_darwin(v2);
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t sub_100084158(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_1000843B4()[2];
  uint64_t v4 = swift_bridgeObjectRelease();
  if (v3 >= 2)
  {
    do
    {
      sub_1000845A4(0);
      unint64_t v5 = sub_1000843B4()[2];
      uint64_t v4 = swift_bridgeObjectRelease();
    }
    while (v5 > 1);
  }
  return (*(uint64_t (**)(uint64_t))(a2 + 56))(v4);
}

uint64_t sub_1000841B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for ApplicationSceneContainer();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  static Animation.clarityUINavigationTransition.getter();
  uint64_t v14 = a2;
  sub_100086364(a2, (uint64_t)&v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], (uint64_t (*)(void))type metadata accessor for ApplicationSceneContainer);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  sub_100084C1C((uint64_t)&v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v11 + v10);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

void *sub_1000843B4()
{
  uint64_t v1 = type metadata accessor for MultimodalNavigationTitle();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + 48) + 112);
  uint64_t v6 = swift_retain();
  uint64_t v7 = v5(v6);
  swift_release();
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_100063118(0, v8, 0);
    uint64_t v9 = v17;
    unint64_t v10 = (unint64_t *)(v7 + 40);
    do
    {
      uint64_t v11 = *(v10 - 1);
      unint64_t v12 = *v10;
      sub_100085EA4(v11, *v10);
      static MultimodalNavigationTitle.title(from:)();
      sub_100062CF4(v11, v12);
      uint64_t v17 = v9;
      unint64_t v14 = v9[2];
      unint64_t v13 = v9[3];
      if (v14 >= v13 >> 1)
      {
        sub_100063118(v13 > 1, v14 + 1, 1);
        uint64_t v9 = v17;
      }
      v10 += 2;
      void v9[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v14, v4, v1);
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v9;
}

uint64_t sub_1000845A4(int a1)
{
  int v32 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (void (*)(uint64_t, void *))&v31[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v7 = &v31[-v6];
  uint64_t v8 = Logger.common.unsafeMutableAddressor();
  uint64_t isEscapingClosureAtFileLocation = *(void *)(v2 + 16);
  ((void (*)(unsigned char *, uint64_t, uint64_t))isEscapingClosureAtFileLocation)(v7, v8, v1);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Informing app that back button was pressed.", v12, 2u);
    swift_slowDealloc();
  }

  unint64_t v13 = *(void (**)(unsigned char *, uint64_t))(v2 + 8);
  v13(v7, v1);
  id v14 = [(id)qword_100186478 sceneManager];
  id v15 = [v14 workspace];

  uint64_t v16 = *(void **)v33;
  if (*(unsigned char *)(v33 + 8)) {
    id v17 = [v16 application];
  }
  else {
    id v17 = v16;
  }
  uint64_t v18 = v17;
  NSString v19 = [v17 defaultSceneIdentifier];

  if (!v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v20 = [v15 sceneWithIdentifier:v19];

  if (v20)
  {
    uint64_t v1 = swift_allocObject();
    *(unsigned char *)(v1 + 16) = v32 & 1;
    uint64_t v21 = swift_allocObject();
    uint64_t v5 = sub_100085C78;
    *(void *)(v21 + 16) = sub_100085C78;
    *(void *)(v21 + 24) = v1;
    aBlock[4] = sub_10007437C;
    uint64_t v35 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000A4C2C;
    aBlock[3] = &unk_100160238;
    uint64_t v22 = _Block_copy(aBlock);
    uint64_t v8 = v35;
    swift_retain();
    swift_release();
    [v20 performUpdate:v22];

    _Block_release(v22);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      goto LABEL_14;
    }
    __break(1u);
  }
  ((void (*)(void (*)(uint64_t, void *), uint64_t, uint64_t))isEscapingClosureAtFileLocation)(v5, v8, v1);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to find scene for app.", v25, 2u);
    swift_slowDealloc();
  }

  v13(v5, v1);
  uint64_t v5 = 0;
LABEL_14:
  uint64_t v26 = *(uint64_t (**)(void *))(**(void **)(v33 + 48) + 128);
  swift_retain();
  uint64_t v28 = (void (*)(void *, void))v26(aBlock);
  if (*(void *)(*(void *)v27 + 16))
  {
    uint64_t v29 = v27;
    sub_100085BF8(&v36);
    if (*((void *)&v36 + 1) >> 60 == 15)
    {
      sub_100085B18(*(void *)(*(void *)v29 + 16) - 1, &v36);
      sub_100062CF4(v36, *((unint64_t *)&v36 + 1));
    }
    else
    {
      sub_100062CE0(v36, *((unint64_t *)&v36 + 1));
    }
  }
  v28(aBlock, 0);
  swift_release();
  return sub_100074384((uint64_t)v5);
}

uint64_t sub_100084A8C()
{
  unint64_t v0 = sub_1000843B4()[2];
  uint64_t result = swift_bridgeObjectRelease();
  if (v0 >= 2)
  {
    do
    {
      sub_1000845A4(0);
      unint64_t v2 = sub_1000843B4()[2];
      uint64_t result = swift_bridgeObjectRelease();
    }
    while (v2 > 1);
  }
  return result;
}

void sub_100084ADC(uint64_t a1, void *a2)
{
  sub_100029F90(&qword_10017B7F0);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100111F50;
  type metadata accessor for ClarityUIBackButtonActionWrapper();
  static ClarityUIBackButtonActionWrapper.makeBackButtonAction(isAnimated:)();
  sub_100085CA8();
  swift_dynamicCast();
  specialized Array._endMutation()();
  sub_100085CE8(inited);
  swift_bridgeObjectRelease();
  sub_100085E5C((unint64_t *)&qword_10017DE88, (void (*)(uint64_t))sub_100085CA8);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setActions:isa];
}

uint64_t sub_100084C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ApplicationSceneContainer();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100084C80()
{
  return sub_1000861FC();
}

uint64_t sub_100084C9C(uint64_t a1)
{
  return sub_100084CD0(a1, sub_100084158);
}

uint64_t sub_100084CB8(uint64_t a1)
{
  return sub_100084CD0(a1, sub_1000841B4);
}

uint64_t sub_100084CD0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for ApplicationSceneContainer() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_100084D54()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 56))();
}

uint64_t sub_100084D8C()
{
  type metadata accessor for ApplicationSceneContainer();

  return sub_100084A8C();
}

uint64_t sub_100084DEC(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_100085CA8();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_10008506C(v7, result + 1);
    uint64_t v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      sub_100085254();
      uint64_t v23 = v28;
    }
    else
    {
      uint64_t v23 = (void *)v22;
      id v24 = v8;
    }
    sub_1000854F4((uint64_t)v8, v23);
    *uint64_t v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_100085CA8();
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        id v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    sub_100085578((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

Swift::Int sub_10008506C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100029F90(&qword_10017DEA0);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_100085CA8();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_100085254();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_100085254()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100029F90(&qword_10017DEA0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

unint64_t sub_1000854F4(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

void sub_100085578(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100085254();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1000856F0();
      goto LABEL_14;
    }
    sub_10008589C();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_100085CA8();
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

id sub_1000856F0()
{
  uint64_t v1 = v0;
  sub_100029F90(&qword_10017DEA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10008589C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100029F90(&qword_10017DEA0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100085B18@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_1000323A8(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    unint64_t v8 = &v5[2 * a1];
    long long v10 = *((_OWORD *)v8 + 2);
    int64_t v9 = v8 + 4;
    *a2 = v10;
    uint64_t v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 2, 16 * v11);
      _OWORD v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100085BF8@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v5 = v3[2];
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      *a1 = *(_OWORD *)&v3[2 * v6 + 4];
      v3[2] = v6;
      *uint64_t v1 = v3;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)sub_1000323A8(v3);
    uint64_t v3 = (void *)result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100085C68()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_100085C78(uint64_t a1, void *a2)
{
}

uint64_t sub_100085C80()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100085C90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100085CA0()
{
  return swift_release();
}

unint64_t sub_100085CA8()
{
  unint64_t result = qword_10017DE80;
  if (!qword_10017DE80)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017DE80);
  }
  return result;
}

uint64_t sub_100085CE8(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_100085CA8();
  sub_100085E5C((unint64_t *)&qword_10017DE88, (void (*)(uint64_t))sub_100085CA8);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_100084DEC(&v9, v6);
      }
    }
    else
    {
      unint64_t v7 = (void **)(a1 + 32);
      do
      {
        unint64_t v8 = *v7++;
        sub_100084DEC(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100085E5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100085EA4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

void sub_100085F00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ApplicationSceneContainer() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  sub_100081F1C(a1, v6, a2);
}

uint64_t sub_100085F84()
{
  uint64_t v1 = (int *)type metadata accessor for ApplicationSceneContainer();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;

  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3 + v1[9];
  sub_100029F90(&qword_10017D740);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for LayoutDirection();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v5 + v1[10];
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v3 + v4;
  uint64_t v11 = v5 + v1[11];
  uint64_t v12 = sub_100029F90(&qword_10017E520);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_release();
  uint64_t v13 = v5 + v1[15];
  uint64_t v14 = type metadata accessor for NSNotificationCenter.Publisher();
  unint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(v5 + v1[16], v14);

  return _swift_deallocObject(v0, v10);
}

uint64_t sub_1000861FC()
{
  return sub_1000840A8();
}

unint64_t sub_100086260()
{
  unint64_t result = qword_10017E658;
  if (!qword_10017E658)
  {
    sub_10002A694(&qword_10017E650);
    sub_10002A8D8(&qword_10017E660, &qword_10017E668);
    sub_10002A8D8(&qword_10017E670, &qword_10017E678);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E658);
  }
  return result;
}

void sub_100086324(void *a1, void *a2)
{
  if (a1)
  {
  }
}

uint64_t sub_100086364(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000863CC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10008642C()
{
  unint64_t result = qword_10017E6B8;
  if (!qword_10017E6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E6B8);
  }
  return result;
}

uint64_t sub_100086480(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000864FC()
{
  unint64_t result = qword_10017E6C8;
  if (!qword_10017E6C8)
  {
    sub_10002A694(&qword_10017E680);
    sub_100086480(&qword_10017E6D0, &qword_10017E6D8, (void (*)(void))sub_10008642C);
    sub_10002A8D8(&qword_10017CF30, &qword_10017CF08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E6C8);
  }
  return result;
}

unint64_t sub_1000865C8()
{
  unint64_t result = qword_10017E6E0;
  if (!qword_10017E6E0)
  {
    sub_10002A694(&qword_10017E6A0);
    sub_100086480(&qword_10017E6B0, &qword_10017E6A8, (void (*)(void))sub_10008642C);
    sub_100086480(&qword_10017E6C0, &qword_10017E688, (void (*)(void))sub_1000864FC);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E6E0);
  }
  return result;
}

uint64_t sub_10008669C()
{
  return sub_10002A8D8(qword_10017E6E8, &qword_10017E628);
}

uint64_t sub_1000866D8()
{
  return sub_100084D54();
}

uint64_t sub_1000866F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100029F90(&qword_10017D328);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void *)(a1 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a1);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v15 + v14, (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  swift_getOpaqueTypeMetadata2();
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  swift_getOpaqueTypeConformance2();
  sub_100086C2C(v11);
  sub_100086D6C((uint64_t)v11, a3);
  uint64_t result = type metadata accessor for InvertColorsOnlyInLightModeView();
  unint64_t v17 = (uint64_t (**)())(a3 + *(int *)(result + 36));
  *unint64_t v17 = sub_100086D10;
  v17[1] = (uint64_t (*)())v15;
  return result;
}

uint64_t sub_1000868E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v35 = a2;
  uint64_t v5 = type metadata accessor for ColorScheme();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v31 = a1;
  uint64_t v32 = v13;
  uint64_t v33 = *(void *)(v13 - 8);
  __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v34 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v22 = (char *)&v30 - v21;
  (*(void (**)(uint64_t))(v3 + *(int *)(a1 + 36)))(v20);
  sub_10006193C((uint64_t)v12);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for ColorScheme.dark(_:), v5);
  static ColorScheme.== infix(_:_:)();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23(v9, v5);
  v23(v12, v5);
  uint64_t v24 = v32;
  uint64_t v25 = *(void *)(v31 + 24);
  View.accessibilityIgnoresInvertColors(_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v24);
  unint64_t v26 = sub_10002E0C8();
  uint64_t v36 = v25;
  unint64_t v37 = v26;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100056EB0(v19, v16, WitnessTable);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v34 + 8);
  v28(v19, v16);
  sub_100056EB0(v22, v16, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v28)(v22, v16);
}

uint64_t sub_100086C2C@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100086C88()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100086D10()
{
  return View.clarityUIIdiom()();
}

uint64_t sub_100086D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017D328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for InvertColorsOnlyInLightModeView()
{
  return sub_100034DF8();
}

void sub_100086DF4()
{
  sub_1000875F0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_100086E8C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
  }
  swift_retain();
  return a1;
}

uint64_t sub_100086FB0(uint64_t a1)
{
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

void *sub_100087054(void *a1, void *a2, uint64_t a3)
{
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

void *sub_10008712C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100087220((uint64_t)a1);
    sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = v9[1];
  void *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100087220(uint64_t a1)
{
  uint64_t v2 = sub_100029F90(&qword_10017B928);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_100087280(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(_OWORD *)&a1[*(int *)(a3 + 36)] = *(_OWORD *)&a2[*(int *)(a3 + 36)];
  return a1;
}

char *sub_100087354(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100087220((uint64_t)a1);
    uint64_t v6 = sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(_OWORD *)&a1[*(int *)(a3 + 36)] = *(_OWORD *)&a2[*(int *)(a3 + 36)];
  swift_release();
  return a1;
}

uint64_t sub_100087444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100087458);
}

uint64_t sub_100087458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100029F90(&qword_10017D328);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10008751C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100087530);
}

uint64_t sub_100087530(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100029F90(&qword_10017D328);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  }
  return result;
}

void sub_1000875F0()
{
  if (!qword_10017D398)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017D398);
    }
  }
}

uint64_t sub_100087648()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008768C()
{
  return swift_getWitnessTable();
}

void sub_1000877A4(char a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 67109120;
    void v13[2] = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Is showing modal view in admin scene: %{BOOL}d", v9, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    *(unsigned char *)(Strong + OBJC_IVAR___CLBAdminSceneDelegate_isShowingModalView) = a1 & 1;
    uint64_t v12 = *(void **)(Strong + OBJC_IVAR___CLBAdminSceneDelegate_window);
    if (v12) {
      objc_msgSend(v12, "setAccessibilityViewIsModal:");
    }
  }
}

void sub_100087994(char a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 67109120;
    v11[2] = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Is showing admin settings: %{BOOL}d", v9, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess();
  uint64_t Strong = (unsigned char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    Strong[OBJC_IVAR___CLBAdminSceneDelegate_isShowingAdminSettings] = a1 & 1;
  }
}

uint64_t sub_100087B64(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(v1);
  uint64_t v5 = sub_100088930(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)((char *)v2 + qword_1001864D8) - 8) + 8))(a1);
  return v5;
}

id sub_100087DB4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AdminSceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AdminSceneDelegate()
{
  return self;
}

uint64_t sub_100087E58()
{
  return swift_initClassMetadata2();
}

double sub_100087E9C(void *a1)
{
  id v1 = a1;
  double v2 = sub_100087EF8();

  return v2;
}

double sub_100087EF8()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (objc_class *)type metadata accessor for AdminHostingView();
  v23.receiver = v0;
  v23.super_class = v5;
  objc_msgSendSuper2(&v23, "safeAreaInsets");
  double v7 = v6;
  *(void *)&long long v24 = v8;
  *((void *)&v24 + 1) = v9;
  *(double *)&long long v25 = v6;
  *((void *)&v25 + 1) = v10;
  id v11 = [self mainScreen];
  [v11 bounds];
  double v13 = v12;

  if (v13 * 0.5 < v7)
  {
    uint64_t v14 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v14, v1);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_beginAccess();
      v21[0] = v24;
      v21[1] = v25;
      type metadata accessor for UIEdgeInsets(0);
      uint64_t v18 = String.init<A>(describing:)();
      *(void *)&v21[0] = sub_100050B5C(v18, v19, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unexpectedly large bottom safe area inset for admin view controller. Insets: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    swift_beginAccess();
    *(void *)&long long v25 = 0;
  }
  swift_beginAccess();
  return *(double *)&v24;
}

void sub_10008820C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (objc_class *)type metadata accessor for AdminHostingView();
  v31.receiver = v0;
  v31.super_class = v5;
  objc_msgSendSuper2(&v31, "safeAreaInsetsDidChange");
  v30.receiver = v0;
  v30.super_class = v5;
  objc_msgSendSuper2(&v30, "safeAreaInsets");
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  double v11 = v10;
  uint64_t v13 = v12;
  id v14 = [self mainScreen];
  [v14 bounds];
  double v16 = v15;

  if (v16 * 0.5 < v11)
  {
    uint64_t v17 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v17, v1);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v29 = v21;
      uint64_t v25 = v7;
      uint64_t v26 = v9;
      double v27 = v11;
      uint64_t v28 = v13;
      type metadata accessor for UIEdgeInsets(0);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v25 = sub_100050B5C(v22, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Safe area insets changed with unexpected bottom inset: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

void sub_1000884FC(void *a1)
{
  id v1 = a1;
  sub_10008820C();
}

id sub_100088544(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AdminHostingView();
  id v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id sub_1000885DC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100088544(a3);
}

id sub_100088604()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AdminHostingView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AdminHostingView()
{
  return sub_100034DF8();
}

void sub_100088698()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AdminSceneView();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  objc_super v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v20 - v6;
  self;
  id v8 = [objc_allocWithZone((Class)CLBSecureWindow) initWithWindowScene:swift_dynamicCastObjCClassUnconditional()];
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v11 = swift_retain();
  sub_10004ABC4(v11, (uint64_t)sub_100088A50, v9, (uint64_t)sub_100088A58, v10, (uint64_t)sub_10004750C, 0, (uint64_t)v7);
  id v12 = objc_allocWithZone((Class)sub_100029F90(&qword_10017E838));
  sub_100088A60((uint64_t)v7, (uint64_t)v5);
  uint64_t v13 = (void *)_UIHostingView.init(rootView:)();
  sub_100088AC4((uint64_t)v7);
  objc_allocWithZone((Class)sub_100029F90((uint64_t *)&unk_10017E840));
  id v14 = v13;
  double v15 = (void *)UIHostingController.init(hostingView:)();
  id v16 = [v15 view];
  if (v16)
  {
    uint64_t v17 = v16;
    id v18 = [self clearColor];
    [v17 setBackgroundColor:v18];

    [v8 setRootViewController:v15];
    [v8 makeKeyAndVisible];
    os_log_type_t v19 = *(void **)(v1 + OBJC_IVAR___CLBAdminSceneDelegate_window);
    *(void *)(v1 + OBJC_IVAR___CLBAdminSceneDelegate_window) = v8;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100088930(uint64_t a1)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - v1);
  return _UIHostingView.init(rootView:)();
}

uint64_t sub_100088A18()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24);
}

void sub_100088A50(char a1)
{
}

void sub_100088A58(char a1)
{
}

uint64_t sub_100088A60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AdminSceneView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100088AC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AdminSceneView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100088B20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_100029F90(&qword_10017E850);
  State.projectedValue.getter();
  uint64_t v4 = swift_allocObject();
  long long v5 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v4 + 96) = v5;
  *(void *)(v4 + 112) = *(void *)(v2 + 96);
  long long v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v4 + 32) = v6;
  long long v7 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v4 + 64) = v7;
  sub_10008A374(v2);
  if (qword_10017B630 != -1) {
    swift_once();
  }
  State.init(wrappedValue:)();
  uint64_t v8 = swift_allocObject();
  long long v9 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v8 + 96) = v9;
  *(void *)(v8 + 112) = *(void *)(v2 + 96);
  long long v10 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v8 + 32) = v10;
  long long v11 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v8 + 64) = v11;
  sub_10008A374(v2);
  uint64_t v12 = static Color.clarityUIButtonBackground.getter();
  uint64_t result = static Color.primary.getter();
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v15;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v17;
  *(void *)(a1 + 32) = sub_10008A36C;
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = 0x3FA999999999999ALL;
  *(void *)(a1 + 80) = 8;
  *(void *)(a1 + 88) = sub_10008A3EC;
  *(void *)(a1 + 96) = v8;
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t sub_100088CE4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  *(void *)a5 = static HorizontalAlignment.center.getter();
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 16) = 1;
  uint64_t v12 = sub_100029F90(&qword_10017E858);
  return sub_100088D6C(a4, a1, a2, a3, (void *)(a5 + *(int *)(v12 + 44)), a6);
}

uint64_t sub_100088D6C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, double a6@<D0>)
{
  uint64_t v107 = a4;
  uint64_t v109 = a3;
  int v100 = a2;
  uint64_t v110 = a5;
  uint64_t v101 = type metadata accessor for ForgotAdminPasscodeButton();
  uint64_t v99 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v98 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100029F90(&qword_10017E860);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v117 = (uint64_t)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v111 = (uint64_t)&v97 - v12;
  uint64_t v13 = sub_100029F90(&qword_10017CB30);
  __chkstk_darwin(v13 - 8);
  uint64_t v108 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100029F90(&qword_10017E868);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_100029F90(&qword_10017E870) - 8;
  __chkstk_darwin(v112);
  os_log_type_t v19 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100029F90(&qword_10017E878);
  __chkstk_darwin(v115);
  uint64_t v21 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100029F90(&qword_10017E880);
  __chkstk_darwin(v22 - 8);
  uint64_t v114 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_100029F90(&qword_10017E888) - 8;
  uint64_t v24 = __chkstk_darwin(v116);
  uint64_t v26 = (char *)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v118 = (uint64_t)&v97 - v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v30 = v29;
  char v32 = v31 & 1;
  *(void *)&long long v121 = v28;
  *((void *)&v121 + 1) = v29;
  LOBYTE(v122) = v31 & 1;
  uint64_t v123 = v33;
  View.accessibilityIdentifier(_:)();
  sub_100041A08(v28, v30, v32);
  swift_bridgeObjectRelease();
  uint64_t v34 = type metadata accessor for Font.Design();
  uint64_t v35 = (uint64_t)v108;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v108, 1, 1, v34);
  uint64_t v36 = static Font.system(size:weight:design:)();
  sub_10002A840(v35, &qword_10017CB30);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10002A580((uint64_t)v17, (uint64_t)v19, &qword_10017E868);
  long long v38 = (uint64_t *)&v19[*(int *)(v112 + 44)];
  uint64_t *v38 = KeyPath;
  v38[1] = v36;
  sub_10002A840((uint64_t)v17, &qword_10017E868);
  uint64_t v39 = swift_getKeyPath();
  sub_10002A580((uint64_t)v19, (uint64_t)v21, &qword_10017E870);
  uint64_t v40 = &v21[*(int *)(v115 + 36)];
  *(void *)uint64_t v40 = v39;
  v40[8] = 1;
  sub_10002A840((uint64_t)v19, &qword_10017E870);
  LocalizedStringKey.init(stringLiteral:)();
  sub_10008A428();
  uint64_t v41 = (uint64_t)v114;
  View.accessibilityHint(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002A840((uint64_t)v21, &qword_10017E878);
  LOBYTE(v19) = static Edge.Set.all.getter();
  sub_10002A580(v41, (uint64_t)v26, &qword_10017E880);
  uint64_t v42 = &v26[*(int *)(v116 + 44)];
  char *v42 = (char)v19;
  *(_OWORD *)(v42 + 8) = 0u;
  *(_OWORD *)(v42 + 24) = 0u;
  v42[40] = 1;
  sub_10002A840(v41, &qword_10017E880);
  uint64_t v113 = v26;
  sub_10008A5E4((uint64_t)v26, v118);
  long long v124 = *(_OWORD *)a1;
  uint64_t v125 = *(void *)(a1 + 16);
  long long v121 = *(_OWORD *)a1;
  uint64_t v122 = *(void *)(a1 + 16);
  sub_100029F90(&qword_10017E850);
  State.wrappedValue.getter();
  uint64_t v43 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v44 = *(void *)(a1 + 96);
  uint64_t v45 = static Color.clear.getter();
  uint64_t v46 = static Color.clear.getter();
  uint64_t v47 = static Color.white.getter();
  uint64_t v48 = static Color.clear.getter();
  uint64_t v105 = static Color.white.getter();
  uint64_t v104 = static Color.white.getter();
  long long v119 = v124;
  uint64_t v120 = v125;
  uint64_t v49 = v107;
  State.projectedValue.getter();
  long long v50 = v121;
  uint64_t v102 = v122;
  uint64_t v106 = v123;
  uint64_t v51 = swift_allocObject();
  long long v52 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v51 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v51 + 96) = v52;
  uint64_t v53 = *(void *)(a1 + 96);
  long long v54 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v51 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v51 + 32) = v54;
  long long v55 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v51 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v51 + 64) = v55;
  uint64_t v56 = v109;
  *(void *)(v51 + 112) = v53;
  *(void *)(v51 + 120) = v56;
  *(void *)(v51 + 128) = v49;
  LOBYTE(v56) = *(unsigned char *)(a1 + 56);
  uint64_t v115 = v46;
  uint64_t v116 = v45;
  uint64_t v108 = (char *)v47;
  uint64_t v112 = *((void *)&v50 + 1);
  uint64_t v114 = (char *)v50;
  uint64_t v103 = v51;
  if (v56)
  {
    uint64_t v62 = (uint64_t)v98;
    uint64_t v63 = *(void *)(a1 + 72);
    if (v63)
    {
      uint64_t v57 = v48;
      uint64_t v64 = *(void *)(a1 + 64);
      swift_retain();
      sub_10008A374(a1);
      uint64_t v65 = v63;
      uint64_t v61 = v101;
    }
    else
    {
      sub_100033980();
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      swift_retain();
      sub_10008A374(a1);
      id v67 = [ObjCClassFromMetadata sharedInstance];
      id v68 = [v67 adminPasscodeRecoveryAppleID];

      uint64_t v61 = v101;
      uint64_t v57 = v48;
      if (!v68)
      {
        uint64_t v58 = 1;
        uint64_t v59 = v111;
        goto LABEL_8;
      }
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v65 = v69;
    }
    char v70 = (void *)qword_100186478;
    swift_bridgeObjectRetain();
    unsigned __int8 v71 = [v70 isInSecureMode];
    uint64_t v72 = swift_allocObject();
    long long v73 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v72 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v72 + 96) = v73;
    *(void *)(v72 + 112) = *(void *)(a1 + 96);
    long long v74 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v72 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v72 + 32) = v74;
    long long v75 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v72 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v72 + 64) = v75;
    *(unsigned char *)uint64_t v62 = v71;
    *(void *)(v62 + 8) = v64;
    *(void *)(v62 + 16) = v65;
    *(void *)(v62 + 24) = sub_10008A6C0;
    *(void *)(v62 + 32) = v72;
    *(void *)(v62 + 40) = swift_getKeyPath();
    *(unsigned char *)(v62 + 48) = 0;
    LOBYTE(v119) = 0;
    sub_10008A374(a1);
    State.init(wrappedValue:)();
    uint64_t v76 = *((void *)&v121 + 1);
    *(unsigned char *)(v62 + 56) = v121;
    *(void *)(v62 + 64) = v76;
    id v77 = [self defaultCenter];
    NSNotificationCenter.publisher(for:object:)();

    uint64_t v78 = v62 + *(int *)(v61 + 40);
    LOBYTE(v119) = 0;
    State.init(wrappedValue:)();
    uint64_t v79 = *((void *)&v121 + 1);
    *(unsigned char *)uint64_t v78 = v121;
    *(void *)(v78 + 8) = v79;
    uint64_t v59 = v111;
    sub_100046524(v62, v111);
    uint64_t v58 = 0;
LABEL_8:
    char v60 = v100;
    goto LABEL_9;
  }
  uint64_t v57 = v48;
  swift_retain();
  sub_10008A374(a1);
  uint64_t v58 = 1;
  uint64_t v59 = v111;
  char v60 = v100;
  uint64_t v61 = v101;
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56))(v59, v58, 1, v61);
  uint64_t v80 = (uint64_t)v113;
  sub_10002A580(v118, (uint64_t)v113, &qword_10017E888);
  char v81 = v60 & 1;
  sub_10002A580(v59, v117, &qword_10017E860);
  uint64_t v82 = v110;
  *uint64_t v110 = 0;
  *((unsigned char *)v82 + 8) = 1;
  uint64_t v83 = (int *)sub_100029F90(&qword_10017E8A8);
  sub_10002A580(v80, (uint64_t)v82 + v83[12], &qword_10017E888);
  uint64_t v84 = (char *)v82 + v83[16];
  *(void *)uint64_t v84 = v43;
  *((void *)v84 + 1) = v44;
  *((_OWORD *)v84 + 1) = xmmword_1001128A0;
  uint64_t v85 = v116;
  *((void *)v84 + 4) = 0x403E000000000000;
  *((void *)v84 + 5) = v85;
  uint64_t v86 = v114;
  uint64_t v87 = v108;
  *((void *)v84 + 6) = v115;
  *((void *)v84 + 7) = v87;
  uint64_t v88 = v105;
  *((void *)v84 + 8) = v57;
  *((void *)v84 + 9) = v88;
  *((void *)v84 + 10) = v104;
  v84[88] = v81;
  *((double *)v84 + 12) = a6;
  int v89 = (char *)v82 + v83[20];
  uint64_t v90 = v112;
  *(void *)int v89 = v86;
  *((void *)v89 + 1) = v90;
  uint64_t v91 = v106;
  *((void *)v89 + 2) = v102;
  *((void *)v89 + 3) = v91;
  v89[32] = 1;
  uint64_t v92 = v103;
  *((void *)v89 + 5) = sub_10008A650;
  *((void *)v89 + 6) = v92;
  *(_OWORD *)(v89 + 56) = xmmword_1001128B0;
  *(_OWORD *)(v89 + 72) = xmmword_1001128C0;
  uint64_t v93 = (char *)v82 + v83[24];
  *(void *)uint64_t v93 = 0;
  v93[8] = 1;
  uint64_t v94 = (uint64_t)v82 + v83[28];
  uint64_t v95 = v117;
  sub_10002A580(v117, v94, &qword_10017E860);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10002A840(v111, &qword_10017E860);
  sub_10002A840(v118, &qword_10017E888);
  sub_10002A840(v95, &qword_10017E860);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return sub_10002A840((uint64_t)v113, &qword_10017E888);
}

void sub_10008995C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v31 = *(_OWORD *)a1;
  char v32 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 16);
  long long aBlock = *(_OWORD *)a1;
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 16);
  sub_100029F90(&qword_10017E850);
  State.wrappedValue.getter();
  uint64_t v10 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v10 == *(void *)(a1 + 96))
  {
    if ([self isRunningInStoreDemoMode])
    {
      uint64_t v11 = Logger.common.unsafeMutableAddressor();
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Allowing any passcode for store demo mode.", v14, 2u);
        swift_slowDealloc();
      }

      uint64_t v15 = (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
      __chkstk_darwin(v15);
      *(void *)&v25[-16] = a1;
      static Animation.default.getter();
      withAnimation<A>(_:_:)();
      swift_release();
    }
    else
    {
      if (qword_10017B580 != -1) {
        swift_once();
      }
      long long aBlock = v31;
      uint64_t v27 = v32;
      State.wrappedValue.getter();
      uint64_t v16 = swift_allocObject();
      long long v17 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(v16 + 80) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v16 + 96) = v17;
      uint64_t v18 = *(void *)(a1 + 96);
      long long v19 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v16 + 16) = *(_OWORD *)a1;
      *(_OWORD *)(v16 + 32) = v19;
      long long v20 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v16 + 48) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(v16 + 64) = v20;
      *(void *)(v16 + 112) = v18;
      *(void *)(v16 + 120) = a2;
      *(void *)(v16 + 128) = a3;
      id v21 = objc_allocWithZone((Class)AXBackBoardServer);
      sub_10008A374(a1);
      swift_retain();
      id v22 = [v21 init];
      NSString v23 = String._bridgeToObjectiveC()();
      uint64_t v29 = sub_10008A7C8;
      uint64_t v30 = v16;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v27 = sub_10007FA64;
      uint64_t v28 = &unk_100160568;
      uint64_t v24 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v22 validateClarityUIAdminPasscode:v23 completion:v24];
      _Block_release(v24);
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
}

uint64_t sub_100089D3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if ((a1 & 1) == 0) {
    return a3();
  }
  __chkstk_darwin(a1);
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t sub_100089DE4()
{
  return swift_release();
}

uint64_t sub_100089E50@<X0>(uint64_t a1@<X8>)
{
  return sub_100088B20(a1);
}

uint64_t sub_100089E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  State.init(wrappedValue:)();
  uint64_t v16 = qword_10017B578;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100186488;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a9 = v22;
  *(void *)(a9 + 8) = v23;
  *(void *)(a9 + 16) = v24;
  *(void *)(a9 + 24) = a1;
  *(void *)(a9 + 32) = a2;
  *(unsigned char *)(a9 + 40) = a3 & 1;
  *(void *)(a9 + 48) = a4;
  *(unsigned char *)(a9 + 56) = a5 & 1;
  *(void *)(a9 + 64) = a6;
  *(void *)(a9 + 72) = a7;
  *(void *)(a9 + 80) = a8;
  *(void *)(a9 + 88) = a10;
  *(void *)(a9 + 96) = v17;
  return result;
}

uint64_t destroy for AdminPasscodeView()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for AdminPasscodeView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AdminPasscodeView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for AdminPasscodeView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = v5;
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for AdminPasscodeView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AdminPasscodeView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdminPasscodeView()
{
  return &type metadata for AdminPasscodeView;
}

uint64_t sub_10008A34C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008A36C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return sub_100088CE4(a1, a2, a3, v5 + 16, a4, a5);
}

uint64_t sub_10008A374(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008A3EC()
{
  return (*(uint64_t (**)(void))(v0 + 96))(0);
}

unint64_t sub_10008A428()
{
  unint64_t result = qword_10017E890;
  if (!qword_10017E890)
  {
    sub_10002A694(&qword_10017E878);
    sub_10008A4C8();
    sub_10002A8D8(&qword_10017CEF8, &qword_10017CF00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E890);
  }
  return result;
}

unint64_t sub_10008A4C8()
{
  unint64_t result = qword_10017E898;
  if (!qword_10017E898)
  {
    sub_10002A694(&qword_10017E870);
    sub_10008A568();
    sub_10002A8D8(&qword_10017DCE8, &qword_10017DCF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E898);
  }
  return result;
}

unint64_t sub_10008A568()
{
  unint64_t result = qword_10017E8A0;
  if (!qword_10017E8A0)
  {
    sub_10002A694(&qword_10017E868);
    sub_100077C20();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E8A0);
  }
  return result;
}

uint64_t sub_10008A5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017E888);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10008A650()
{
  sub_10008995C(v0 + 16, *(void *)(v0 + 120), *(void *)(v0 + 128));
}

uint64_t sub_10008A660()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 120);
}

uint64_t sub_10008A6C0()
{
  return sub_100089DE4();
}

uint64_t sub_10008A6C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sceneSession.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10008A6F4(id *a1)
{
  id v1 = *a1;
  return EnvironmentValues.sceneSession.setter();
}

uint64_t sub_10008A724()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(v0 + 16) + 80))(1);
}

uint64_t sub_10008A760()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 136);
}

uint64_t sub_10008A7C8(uint64_t a1)
{
  return sub_100089D3C(a1, v1 + 16, *(uint64_t (**)(void))(v1 + 120));
}

uint64_t sub_10008A7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10008A7E4()
{
  return swift_release();
}

unint64_t sub_10008A7F0()
{
  unint64_t result = qword_10017E8B0;
  if (!qword_10017E8B0)
  {
    sub_10002A694(&qword_10017E8B8);
    sub_10008A890();
    sub_10002A8D8(&qword_10017D8D0, &qword_10017D8D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E8B0);
  }
  return result;
}

unint64_t sub_10008A890()
{
  unint64_t result = qword_10017E8C0;
  if (!qword_10017E8C0)
  {
    sub_10002A694(&qword_10017E8C8);
    sub_10002A8D8(&qword_10017E8D0, &qword_10017E8D8);
    sub_100052624();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017E8C0);
  }
  return result;
}

uint64_t sub_10008A930()
{
  return sub_10008A724();
}

id sub_10008AA48(uint64_t a1)
{
  return sub_10008B844(a1, type metadata accessor for OpenApplicationVerifierResultWrapper.Error);
}

id sub_10008AAB8()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___CLBOpenApplicationVerifierResult_implementation);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___CLBOpenApplicationVerifierResult_implementation + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1[1];
  uint64_t v4 = *(void *)((char *)&unk_100112A78 + ((uint64_t)(*v1 << 56) >> 53));
  uint64_t v5 = (objc_class *)type metadata accessor for OpenApplicationVerifierResultWrapper.Error();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR___CLBOpenApplicationVerifierResultError_code] = v4;
  uint64_t v7 = &v6[OBJC_IVAR___CLBOpenApplicationVerifierResultError_errorDescription];
  *(void *)uint64_t v7 = v3;
  *((void *)v7 + 1) = v2;
  v9.receiver = v6;
  v9.super_class = v5;
  swift_bridgeObjectRetain();
  return objc_msgSendSuper2(&v9, "init");
}

id sub_10008ACBC()
{
  return sub_10008B844(0, type metadata accessor for OpenApplicationVerifierResultWrapper);
}

id sub_10008ACE8()
{
  sub_10002A544(0, (unint64_t *)&qword_10017BF70);
  id v0 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v1 = [v0 applicationBundleIdentifiers];

  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = (objc_class *)type metadata accessor for OpenApplicationVerifierWrapper();
  id v3 = objc_allocWithZone(v2);
  type metadata accessor for OpenApplicationVerifier();
  swift_allocObject();
  uint64_t v4 = (char *)v3;
  *(void *)&v4[OBJC_IVAR___CLBOpenApplicationVerifier_implementation] = OpenApplicationVerifier.init(userSelectedApplicationBundleIdentifiers:)();

  v6.receiver = v4;
  v6.super_class = v2;
  id result = objc_msgSendSuper2(&v6, "init");
  qword_1001864E8 = (uint64_t)result;
  return result;
}

uint64_t sub_10008AF88(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  type metadata accessor for OpenApplicationVerifierResult();
  v2[11] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[12] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[13] = v4;
  v2[14] = v3;
  return _swift_task_switch(sub_10008B04C, v4, v3);
}

uint64_t sub_10008B04C()
{
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = *(void *)(v0[10] + OBJC_IVAR___CLBOpenApplicationVerifier_implementation);
  v0[15] = v2;
  v0[5] = sub_10002A544(0, &qword_10017E998);
  v0[6] = &protocol witness table for FBSystemServiceOpenApplicationRequest;
  v0[2] = v1;
  uint64_t v7 = (uint64_t (*)(uint64_t, void *))(*(void *)(*(void *)v2 + 104) + **(int **)(*(void *)v2 + 104));
  swift_retain();
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[16] = v4;
  void *v4 = v0;
  v4[1] = sub_10008B1AC;
  uint64_t v5 = v0[11];
  return v7(v5, v0 + 2);
}

uint64_t sub_10008B1AC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 16;
  swift_task_dealloc();
  swift_release();
  sub_1000469D4(v2);
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 104);
  return _swift_task_switch(sub_10008B2FC, v4, v3);
}

uint64_t sub_10008B2FC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_release();
  uint64_t v2 = (objc_class *)type metadata accessor for OpenApplicationVerifierResultWrapper();
  id v3 = objc_allocWithZone(v2);
  sub_10008C1F4(v1, (uint64_t)v3 + OBJC_IVAR___CLBOpenApplicationVerifierResult_implementation);
  *(void *)(v0 + 56) = v3;
  *(void *)(v0 + 64) = v2;
  id v4 = objc_msgSendSuper2((objc_super *)(v0 + 56), "init");
  sub_10008C258(v1);
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(id))(v0 + 8);
  return v5(v4);
}

uint64_t sub_10008B538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  type metadata accessor for MainActor();
  void v3[5] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10008B5D4, v5, v4);
}

uint64_t sub_10008B5D4()
{
  uint64_t v1 = (void *)v0[4];
  id v3 = (void *)v0[2];
  uint64_t v2 = (const void *)v0[3];
  swift_release();
  v0[6] = _Block_copy(v2);
  id v4 = v3;
  id v5 = v1;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  void *v6 = v0;
  v6[1] = sub_10008B698;
  uint64_t v7 = v0[2];
  return sub_10008AF88(v7);
}

uint64_t sub_10008B698(void *a1)
{
  id v3 = *(void (***)(void, void))(*v1 + 48);
  id v4 = *(void **)(*v1 + 32);
  id v5 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();

  ((void (**)(void, void *))v3)[2](v3, a1);
  _Block_release(v3);

  uint64_t v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

id sub_10008B82C(uint64_t a1)
{
  return sub_10008B844(a1, type metadata accessor for OpenApplicationVerifierWrapper);
}

id sub_10008B844(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t FBSystemServiceOpenApplicationRequest.applicationBundleIdentifier.getter()
{
  id v1 = [v0 bundleIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t FBSystemServiceOpenApplicationRequest.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100029F90(&qword_10017E8E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [v2 options];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 url];

    if (v9)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 0, 1, v10);
    }
    else
    {
      uint64_t v14 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 1, 1, v14);
    }
    return sub_10008BA88((uint64_t)v6, a1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    return v12(a1, 1, 1, v11);
  }
}

uint64_t sub_10008BA88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017E8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id FBSystemServiceOpenApplicationRequest.isBackground.getter()
{
  id v1 = [v0 options];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = [v1 dictionary];

  if (v3)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v3 = [(objc_class *)isa bs_BOOLForKey:FBSOpenApplicationOptionKeyActivateSuspended];
  }
  return v3;
}

void *FBSystemServiceOpenApplicationRequest.clientBundleIdentifier.getter()
{
  id v1 = [v0 clientProcess];
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 bundleIdentifier];

    if (v3)
    {
      uint64_t v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id FBSystemServiceOpenApplicationRequest.clientProcessIdentity.getter()
{
  id v1 = [v0 clientProcess];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = [v1 identity];

  return v3;
}

id FBSystemServiceOpenApplicationRequest.isClientForeground.getter()
{
  id result = [v0 clientProcess];
  if (result)
  {
    uint64_t v2 = result;
    id v3 = [result state];

    id v4 = [v3 visibility];
    return (id)(v4 == (id)2);
  }
  return result;
}

uint64_t sub_10008BDC8()
{
  id v1 = [*v0 bundleIdentifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t sub_10008BE20@<X0>(uint64_t a1@<X8>)
{
  return FBSystemServiceOpenApplicationRequest.url.getter(a1);
}

id sub_10008BE44()
{
  id v1 = [*v0 options];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = [v1 dictionary];

  if (v3)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v3 = [(objc_class *)isa bs_BOOLForKey:FBSOpenApplicationOptionKeyActivateSuspended];
  }
  return v3;
}

id sub_10008BF38()
{
  return [*v0 isTrusted];
}

void *sub_10008BF5C()
{
  id v1 = [*v0 clientProcess];
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 bundleIdentifier];

    if (v3)
    {
      uint64_t v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id sub_10008BFEC()
{
  id v1 = [*v0 clientProcess];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = [v1 identity];

  return v3;
}

id sub_10008C050()
{
  id result = [*v0 clientProcess];
  if (result)
  {
    uint64_t v2 = result;
    id v3 = [result state];

    id v4 = [v3 visibility];
    return (id)(v4 == (id)2);
  }
  return result;
}

uint64_t sub_10008C0C8()
{
  return type metadata accessor for OpenApplicationVerifierResultWrapper();
}

uint64_t type metadata accessor for OpenApplicationVerifierResultWrapper()
{
  uint64_t result = qword_10017E918;
  if (!qword_10017E918) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008C11C()
{
  uint64_t result = type metadata accessor for OpenApplicationVerifierResult();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for OpenApplicationVerifierResultWrapper.Error()
{
  return self;
}

uint64_t type metadata accessor for OpenApplicationVerifierWrapper()
{
  return self;
}

uint64_t sub_10008C1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OpenApplicationVerifierResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008C258(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OpenApplicationVerifierResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008C2B4()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40);
}

uint64_t sub_10008C2FC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10003CCE0;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10017E9A0 + dword_10017E9A0);
  return v6(v2, v3, v4);
}

uint64_t sub_10008C3B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_100056EAC;
  return v6();
}

uint64_t sub_10008C480(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_100056EAC;
  return v7();
}

uint64_t sub_10008C550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10008C6F4(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10008C6F4(uint64_t a1)
{
  uint64_t v2 = sub_100029F90((uint64_t *)&unk_10017C500);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008C754(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10008C830;
  return v6(a1);
}

uint64_t sub_10008C830()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10008C928()
{
  swift_release();

  return _swift_deallocObject(v0, 32);
}

uint64_t sub_10008C960(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10003CCE0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10017E9C0 + dword_10017E9C0);
  return v6(a1, v4);
}

uint64_t sub_10008CA18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017E8E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_10008CAB0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplicationSceneView.Coordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ApplicationSceneView.Coordinator()
{
  return self;
}

uint64_t destroy for ApplicationSceneView(id *a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for ApplicationSceneView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  id v7 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ApplicationSceneView(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v5;
  id v7 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ApplicationSceneView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;

  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ApplicationSceneView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationSceneView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ApplicationSceneView()
{
  return &type metadata for ApplicationSceneView;
}

char *sub_10008CD64(uint64_t a1)
{
  return sub_10008CF30(*(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), a1, *(void **)v1, *(unsigned char *)(v1 + 8));
}

void sub_10008CD78(uint64_t a1, uint64_t a2)
{
  sub_10008D18C(a1, *(double *)(v2 + 16), *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40), a2, *(void **)v2, *(unsigned char *)(v2 + 8));
}

id sub_10008CD8C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  long long v14 = *(_OWORD *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  id v9 = (objc_class *)type metadata accessor for ApplicationSceneView.Coordinator();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  uint64_t v11 = &v10[OBJC_IVAR____TtCV12ClarityBoard20ApplicationSceneView11Coordinator_applicationSceneView];
  *(void *)uint64_t v11 = v3;
  _DWORD v11[8] = v4;
  *((_OWORD *)v11 + 1) = v14;
  *((void *)v11 + 4) = v5;
  *((void *)v11 + 5) = v6;
  *((void *)v11 + 6) = v8;
  *((void *)v11 + 7) = v7;
  v15.receiver = v10;
  v15.super_class = v9;
  id v12 = v3;
  swift_retain();
  id result = objc_msgSendSuper2(&v15, "init");
  *a1 = result;
  return result;
}

uint64_t sub_10008CE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10008D23C();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10008CEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10008D23C();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10008CF04()
{
}

char *sub_10008CF30(double a1, double a2, double a3, double a4, uint64_t a5, void *a6, char a7)
{
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v13);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    long long v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Creating scene view controller.", v20, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  id v21 = (char *)objc_allocWithZone((Class)type metadata accessor for ApplicationSceneViewController());
  *(void *)&v21[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v21[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_scene] = 0;
  uint64_t v22 = &v21[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source];
  *(void *)uint64_t v22 = a6;
  v22[8] = a7 & 1;
  uint64_t v23 = (double *)&v21[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets];
  double *v23 = a1;
  v23[1] = a2;
  void v23[2] = a3;
  v23[3] = a4;
  id v24 = a6;
  uint64_t v25 = sub_1000A3954(1);
  sub_10004F630();

  sub_100029F90(&qword_10017EA00);
  UIViewControllerRepresentableContext.coordinator.getter();
  uint64_t v26 = (void *)v28[1];
  *(void *)&v25[OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_delegate + 8] = &off_1001606F8;
  swift_unknownObjectWeakAssign();

  return v25;
}

void sub_10008D18C(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, void *a7, char a8)
{
  uint64_t v13 = a1 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source;
  uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source);
  char v15 = *(unsigned char *)(a1 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_source + 8);
  *(void *)uint64_t v13 = a7;
  *(unsigned char *)(v13 + 8) = a8 & 1;
  id v16 = a7;
  sub_10004D484(v14, v15);

  uint64_t v17 = (double *)(a1 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets);
  double v18 = *(double *)(a1 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets);
  double v19 = *(double *)(a1 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets + 8);
  double v20 = *(double *)(a1 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets + 16);
  double v21 = *(double *)(a1 + OBJC_IVAR____TtC12ClarityBoard30ApplicationSceneViewController_safeAreaInsets + 24);
  *uint64_t v17 = a2;
  v17[1] = a3;
  v17[2] = a4;
  v17[3] = a5;
  sub_10004DAFC(v18, v19, v20, v21);
}

unint64_t sub_10008D23C()
{
  unint64_t result = qword_10017EA08;
  if (!qword_10017EA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EA08);
  }
  return result;
}

unint64_t sub_10008D290(unint64_t result)
{
  if (result >= 5)
  {
    _StringGuts.grow(_:)(25);
    v1._object = (void *)0x8000000100127840;
    v1._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v1);
    type metadata accessor for BSInterfaceOrientation(0);
    _print_unlocked<A, B>(_:_:)();
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t sub_10008D354(unint64_t result)
{
  if (result >= 5)
  {
    _StringGuts.grow(_:)(25);
    v1._object = (void *)0x8000000100127840;
    v1._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v1);
    type metadata accessor for UIInterfaceOrientation(0);
    _print_unlocked<A, B>(_:_:)();
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t destroy for AdminSettingsPanelView()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AdminSettingsPanelView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AdminSettingsPanelView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for AdminSettingsPanelView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AdminSettingsPanelView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AdminSettingsPanelView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AdminSettingsPanelView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdminSettingsPanelView()
{
  return &type metadata for AdminSettingsPanelView;
}

uint64_t sub_10008D6A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10008D6C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100091094(a1);
}

uint64_t sub_10008D6E0@<X0>(uint64_t a1@<X8>)
{
  return sub_10008D774(0x65646F4D6B726164, 0xE800000000000000, a1);
}

uint64_t sub_10008D714@<X0>(uint64_t a1@<X8>)
{
  return sub_100091094(a1);
}

uint64_t sub_10008D738@<X0>(uint64_t a1@<X8>)
{
  return sub_10008D774(0x656E616C70726961, 0xEC00000065646F4DLL, a1);
}

uint64_t sub_10008D774@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  v9[1] = a1;
  void v9[2] = a2;
  v9[0] = a3;
  uint64_t v3 = sub_100029F90(&qword_10017EC28);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SystemSettings();
  sub_100092BC8(&qword_10017D9E0, (void (*)(uint64_t))type metadata accessor for SystemSettings);
  uint64_t v7 = (void *)StateObject.projectedValue.getter();
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();

  Toggle.init(isOn:label:)();
  sub_10002A8D8(&qword_10017EC30, &qword_10017EC28);
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

UIContentSizeCategory sub_10008D954()
{
  sub_100029F90(&qword_10017EC20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100112B90;
  *(void *)(v0 + 32) = UIContentSizeCategoryAccessibilityMedium;
  *(void *)(v0 + 40) = UIContentSizeCategoryAccessibilityLarge;
  *(void *)(v0 + 48) = UIContentSizeCategoryAccessibilityExtraLarge;
  *(void *)(v0 + 56) = UIContentSizeCategoryAccessibilityExtraExtraLarge;
  *(void *)(v0 + 64) = UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  qword_1001864F0 = v0;
  Swift::String v1 = UIContentSizeCategoryAccessibilityMedium;
  uint64_t v2 = UIContentSizeCategoryAccessibilityLarge;
  uint64_t v3 = UIContentSizeCategoryAccessibilityExtraLarge;
  uint64_t v4 = UIContentSizeCategoryAccessibilityExtraExtraLarge;

  return UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
}

float sub_10008DA1C()
{
  if (qword_10017B5E0 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1001864F0;
  swift_bridgeObjectRetain();
  UIContentSizeCategory v1 = sub_10006A564();
  uint64_t v2 = sub_10008DAB4((uint64_t)v1, v0);
  char v4 = v3;
  swift_bridgeObjectRelease();

  float result = (float)v2;
  if (v4) {
    return 0.0;
  }
  return result;
}

uint64_t sub_10008DAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    uint64_t v9 = 0;
LABEL_17:
    swift_bridgeObjectRelease_n();
    return v9;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = 0;
  if ((v8 & 1) == 0)
  {
    uint64_t v10 = v2 - 1;
    while (1)
    {
      if (v10 == v9) {
        return 0;
      }
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
      if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14) {
        break;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v9;
      if (v16) {
        return v9;
      }
    }
    ++v9;
    goto LABEL_17;
  }
  return v9;
}

id sub_10008DC00()
{
  if (qword_10017B5C8 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1001864D0;

  return v0;
}

void sub_10008DC5C(uint64_t a1@<X8>)
{
  uint64_t v34 = sub_100029F90(&qword_10017EBE0);
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v3 = (char *)v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100029F90(&qword_10017EBE8);
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  uint64_t v33 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SystemSettings();
  sub_100092BC8(&qword_10017D9E0, (void (*)(uint64_t))type metadata accessor for SystemSettings);
  uint64_t v6 = (void *)StateObject.projectedValue.getter();
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();

  uint64_t v7 = v51;
  uint64_t v8 = v52;
  int v9 = v53;
  if (qword_10017B5E0 != -1) {
    swift_once();
  }
  uint64_t v10 = *(void *)(qword_1001864F0 + 16);
  if (v10)
  {
    v32[1] = a1;
    uint64_t v48 = v7;
    uint64_t v49 = v8;
    int v50 = v9;
    int v46 = 0;
    float v47 = (float)(v10 - 1);
    swift_retain();
    swift_retain();
    LocalizedStringKey.init(stringLiteral:)();
    uint64_t v42 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v43 = v11;
    LOBYTE(v44) = v12 & 1;
    unint64_t v45 = v13;
    uint64_t v14 = (void *)StateObject.wrappedValue.getter();
    UIContentSizeCategory v15 = sub_10006A564();

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    AXTextSizePercentage();

    id v17 = (id)AXFormatFloatWithPercentage();
    if (v17)
    {
      double v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      uint64_t v38 = v19;
      uint64_t v39 = v21;
      sub_10002D088();
      uint64_t v38 = Text.init<A>(_:)();
      uint64_t v39 = v22;
      char v40 = v23 & 1;
      uint64_t v41 = v24;
      sub_100092C1C();
      Slider.init<A>(value:in:onEditingChanged:minimumValueLabel:maximumValueLabel:label:)();
      swift_release();
      uint64_t v25 = swift_release();
      __chkstk_darwin(v25);
      uint64_t v26 = sub_100029F90(&qword_10017EBF8);
      uint64_t v27 = sub_10002A8D8(&qword_10017EC00, &qword_10017EBE0);
      unint64_t v28 = sub_100092C7C();
      uint64_t v29 = v33;
      uint64_t v30 = v34;
      View.accessibilityRepresentation<A>(representation:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v3, v30);
      uint64_t v42 = v30;
      uint64_t v43 = v26;
      uint64_t v44 = v27;
      unint64_t v45 = v28;
      swift_getOpaqueTypeConformance2();
      uint64_t v31 = v37;
      View.accessibilityIdentifier(_:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v29, v31);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10008E1B4(float *a1@<X8>)
{
  if (qword_10017B5E0 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001864F0;
  swift_bridgeObjectRetain();
  UIContentSizeCategory v3 = sub_10006A564();
  uint64_t v4 = sub_10008DAB4((uint64_t)v3, v2);
  char v6 = v5;
  swift_bridgeObjectRelease();

  float v7 = (float)v4;
  if (v6) {
    float v7 = 0.0;
  }
  *a1 = v7;
}

uint64_t sub_10008E25C@<X0>(uint64_t a1@<X8>)
{
  return sub_100091094(a1);
}

void sub_10008E278(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  int v7 = a3 & 1;
  uint64_t v8 = sub_100029F90(&qword_10017EC18);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SystemSettings();
  sub_100092BC8(&qword_10017D9E0, (void (*)(uint64_t))type metadata accessor for SystemSettings);
  char v12 = (void *)StateObject.projectedValue.getter();
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();

  uint64_t v13 = v24;
  uint64_t v14 = v25;
  int v15 = v26;
  if (qword_10017B5E0 != -1) {
    swift_once();
  }
  uint64_t v16 = *(void *)(qword_1001864F0 + 16);
  if (v16)
  {
    uint64_t v18 = a4;
    uint64_t v21 = v13;
    uint64_t v22 = v14;
    int v23 = v15;
    int v19 = 0;
    float v20 = (float)(v16 - 1);
    sub_100092C1C();
    swift_retain();
    swift_retain();
    Slider<>.init<A>(value:in:onEditingChanged:label:)();
    swift_release();
    swift_release();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a1;
    *(void *)(v17 + 24) = a2;
    *(unsigned char *)(v17 + 32) = v7 != 0;
    sub_10003A608(a1, a2, v7);
    sub_10002A8D8(&qword_10017EC10, &qword_10017EC18);
    View.accessibilityAdjustableAction(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    __break(1u);
  }
}

void sub_10008E580(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v5 = a4 & 1;
  uint64_t v6 = type metadata accessor for AccessibilityAdjustmentDirection();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (v10 == enum case for AccessibilityAdjustmentDirection.increment(_:))
  {
    type metadata accessor for SystemSettings();
    sub_100092BC8(&qword_10017D9E0, (void (*)(uint64_t))type metadata accessor for SystemSettings);
    uint64_t v11 = (void *)StateObject.wrappedValue.getter();
    v28[3] = v5;
    if (qword_10017B5E0 != -1) {
      swift_once();
    }
    uint64_t v12 = qword_1001864F0;
    swift_bridgeObjectRetain();
    UIContentSizeCategory v13 = sub_10006A564();
    uint64_t v14 = sub_10008DAB4((uint64_t)v13, v12);
    char v16 = v15;

    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(qword_1001864F0 + 16) - 1;
    float v18 = (float)v14 + 1.0;
    if (v16) {
      float v18 = 1.0;
    }
    if (v18 <= (float)v17) {
      float v19 = v18;
    }
    else {
      float v19 = (float)v17;
    }
LABEL_17:
    uint64_t v27 = (void *)StateObject.wrappedValue.getter();
    sub_100092D94(v19);

    return;
  }
  if (v10 == enum case for AccessibilityAdjustmentDirection.decrement(_:))
  {
    type metadata accessor for SystemSettings();
    sub_100092BC8(&qword_10017D9E0, (void (*)(uint64_t))type metadata accessor for SystemSettings);
    float v20 = (void *)StateObject.wrappedValue.getter();
    if (qword_10017B5E0 != -1) {
      swift_once();
    }
    uint64_t v21 = qword_1001864F0;
    swift_bridgeObjectRetain();
    UIContentSizeCategory v22 = sub_10006A564();
    uint64_t v23 = sub_10008DAB4((uint64_t)v22, v21);
    char v25 = v24;

    swift_bridgeObjectRelease();
    float v26 = (float)v23 + -1.0;
    if (v25) {
      float v26 = -1.0;
    }
    if (v26 > 0.0) {
      float v19 = v26;
    }
    else {
      float v19 = 0.0;
    }
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10008E8F0(uint64_t a1@<X8>)
{
}

uint64_t sub_10008E8FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v41 = a1;
  uint64_t v3 = type metadata accessor for VolumeSlider();
  uint64_t v4 = v3 - 8;
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v39 = *(void *)(v40 + 64);
  __chkstk_darwin(v3);
  uint64_t v38 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v42 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100029F90(&qword_10017EC18);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100029F90(&qword_10017EC38);
  uint64_t v33 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100029F90(&qword_10017EC40);
  __chkstk_darwin(v34);
  char v32 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v2 + *(int *)(v4 + 28);
  uint64_t v16 = *(void *)(v14 + 8);
  LODWORD(v43) = *(_DWORD *)v14;
  int v15 = v43;
  uint64_t v44 = v16;
  sub_100029F90(&qword_10017BB80);
  State.projectedValue.getter();
  uint64_t v43 = 0x3F80000000000000;
  sub_100092C1C();
  swift_retain();
  swift_retain();
  Slider<>.init<A>(value:in:onEditingChanged:label:)();
  swift_release();
  swift_release();
  LODWORD(v45) = v15;
  uint64_t v46 = v16;
  State.wrappedValue.getter();
  sub_10002A8D8(&qword_10017EC10, &qword_10017EC18);
  uint64_t v17 = v12;
  uint64_t v31 = v12;
  View.onChange<A>(of:initial:_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  float v18 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  float v19 = v35;
  uint64_t v20 = v37;
  v18(v35, v2, v37);
  uint64_t v21 = v2;
  uint64_t v22 = v38;
  sub_100092FE0(v21, v38);
  unint64_t v23 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v24 = swift_allocObject();
  sub_100093138(v22, v24 + v23);
  uint64_t v25 = (uint64_t)v32;
  uint64_t v26 = v33;
  uint64_t v27 = v36;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v32, v17, v36);
  uint64_t v28 = v34;
  v18((char *)(v25 + *(int *)(v34 + 52)), (uint64_t)v19, v20);
  uint64_t v29 = (uint64_t (**)())(v25 + *(int *)(v28 + 56));
  *uint64_t v29 = sub_10009319C;
  v29[1] = (uint64_t (*)())v24;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v31, v27);
  sub_10002A8D8(&qword_10017EC48, &qword_10017EC40);
  View.accessibilityIdentifier(_:)();
  return sub_10002A840(v25, &qword_10017EC40);
}

uint64_t sub_10008EE8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100091094(a1);
}

void sub_10008EEA0(uint64_t a1, int *a2)
{
  int v2 = *a2;
  id v4 = [self sharedInstance];
  LODWORD(v3) = v2;
  [v4 setVolume:v3];
}

uint64_t sub_10008EF10()
{
  id v0 = [self sharedInstance];
  [v0 volume];

  type metadata accessor for VolumeSlider();
  sub_100029F90(&qword_10017BB80);
  return State.wrappedValue.setter();
}

uint64_t sub_10008EFB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  v15[1] = a2;
  uint64_t v5 = sub_100029F90(&qword_10017EC18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = sub_100029F90(&qword_10017EC38);
  uint64_t v9 = *(void *)(v15[0] - 8);
  __chkstk_darwin(v15[0]);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(float *)&uint64_t v20 = a3;
  uint64_t v21 = a1;
  sub_100029F90(&qword_10017BB80);
  State.projectedValue.getter();
  uint64_t v20 = 0x3F8000003DCCCCCDLL;
  sub_100092C1C();
  swift_retain();
  swift_retain();
  Slider<>.init<A>(value:in:onEditingChanged:label:)();
  swift_release();
  swift_release();
  *(float *)&uint64_t v16 = a3;
  uint64_t v17 = a1;
  State.wrappedValue.getter();
  uint64_t v12 = sub_10002A8D8(&qword_10017EC10, &qword_10017EC18);
  View.onChange<A>(of:initial:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = v5;
  uint64_t v17 = &type metadata for Float;
  uint64_t v18 = v12;
  float v19 = &protocol witness table for Float;
  swift_getOpaqueTypeConformance2();
  uint64_t v13 = v15[0];
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v13);
}

uint64_t sub_10008F2E8@<X0>(uint64_t a1@<X8>)
{
  return sub_100091094(a1);
}

void sub_10008F304(char a1)
{
  id v2 = [self sharedInstance];
  id v4 = v2;
  double v3 = &selRef_startTransactionIfNeeded;
  if ((a1 & 1) == 0) {
    double v3 = &selRef_releaseTransaction;
  }
  [v2 *v3];
}

void sub_10008F384(float *a1, float *a2)
{
  float v2 = *a2;
  if (*a1 != *a2)
  {
    id v4 = [self sharedInstance];
    *(float *)&double v3 = v2;
    [v4 setBrightness:v3];
  }
}

uint64_t sub_10008F410@<X0>(uint64_t a1@<X8>)
{
  return sub_10008EFB8(*(void **)(v1 + 8), a1, *(float *)v1);
}

uint64_t sub_10008F41C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100029F90(&qword_10017EA78);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100029F90(&qword_10017EA80);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100029F90(&qword_10017D748);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
  *((void *)v6 + 1) = 0;
  uint8_t v6[16] = 1;
  uint64_t v14 = sub_100029F90(&qword_10017EA88);
  sub_10008F6A4(a1, (uint64_t)&v6[*(int *)(v14 + 44)]);
  sub_10002A580((uint64_t)v6, (uint64_t)v9, &qword_10017EA78);
  sub_10002A840((uint64_t)v6, &qword_10017EA78);
  long long v15 = *(_OWORD *)(a1 + 16);
  long long v26 = *(_OWORD *)(a1 + 32);
  long long v27 = v15;
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v16 = swift_allocObject();
  long long v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v16 + 32) = v17;
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v16 + 64) = *(void *)(a1 + 48);
  swift_retain();
  sub_100070A54((uint64_t)&v27);
  sub_100070A54((uint64_t)&v26);
  sub_10003ADA8((uint64_t)&v25);
  uint64_t v18 = static Color.clarityUIButtonBackground.getter();
  uint64_t v19 = static Color.primary.getter();
  sub_10002A580((uint64_t)v9, (uint64_t)v13, &qword_10017EA80);
  uint64_t v20 = (uint64_t (**)())&v13[*(int *)(v11 + 44)];
  void *v20 = sub_100091D40;
  v20[1] = (uint64_t (*)())v16;
  v20[2] = (uint64_t (*)())v18;
  v20[3] = (uint64_t (*)())v19;
  sub_10002A840((uint64_t)v9, &qword_10017EA80);
  uint64_t v21 = static Alignment.center.getter();
  sub_10005A3E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a2, 0.0, 1, INFINITY, 0, v21, v22);
  return sub_10002A840((uint64_t)v13, &qword_10017D748);
}

uint64_t sub_10008F6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100029F90(&qword_10017EA90);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  uint64_t v32 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v33 = (char *)&v30 - v8;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  uint64_t v14 = Text.bold()();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  sub_100041A08(v9, v11, v13);
  swift_bridgeObjectRelease();
  uint64_t v34 = a1;
  sub_100029F90(&qword_10017EA98);
  sub_100091D70();
  uint64_t v21 = v33;
  List<>.init(content:)();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  unint64_t v23 = v30;
  uint64_t v24 = v21;
  uint64_t v25 = v31;
  v22(v30, v24, v31);
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v16;
  *(unsigned char *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v18;
  uint64_t v26 = sub_100029F90(&qword_10017EAC8);
  v22((char *)(a2 + *(int *)(v26 + 48)), v23, v25);
  uint64_t v27 = a2 + *(int *)(v26 + 64);
  *(void *)uint64_t v27 = 0;
  *(unsigned char *)(v27 + 8) = 1;
  sub_100041B00(v14, v16, v20);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v32 + 8);
  swift_bridgeObjectRetain();
  v28(v33, v25);
  v28(v23, v25);
  sub_100041A08(v14, v16, v20);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10008F930@<X0>(void (*a1)(void, void, void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100029F90(&qword_10017EAB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008FA64(a1, v6);
  if (qword_10017B628 != -1) {
    swift_once();
  }
  v9[1] = qword_100186520;
  swift_retain_n();
  uint64_t v7 = AnyView.init<A>(_:)();
  sub_10002A580((uint64_t)v6, a2, &qword_10017EAB0);
  swift_release();
  *(void *)(a2 + *(int *)(sub_100029F90(&qword_10017EA98) + 36)) = v7;
  return sub_10002A840((uint64_t)v6, &qword_10017EAB0);
}

uint64_t sub_10008FA64@<X0>(void (*a1)(void, void, void)@<X0>, char *a2@<X8>)
{
  uint64_t v102 = a1;
  uint64_t v103 = a2;
  uint64_t v121 = sub_100029F90(&qword_10017EAD0);
  uint64_t v127 = *(void *)(v121 - 8);
  uint64_t v2 = __chkstk_darwin(v121);
  uint64_t v122 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v108 = (char *)&v98 - v4;
  uint64_t v120 = sub_100029F90(&qword_10017EAD8);
  uint64_t v126 = *(void *)(v120 - 8);
  uint64_t v5 = __chkstk_darwin(v120);
  uint64_t v115 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v113 = (char *)&v98 - v7;
  uint64_t v110 = sub_100029F90(&qword_10017EAE0);
  uint64_t v125 = *(void *)(v110 - 8);
  uint64_t v8 = __chkstk_darwin(v110);
  uint64_t v114 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v104 = (char *)&v98 - v10;
  uint64_t v119 = sub_100029F90(&qword_10017EAE8);
  uint64_t v124 = *(void *)(v119 - 8);
  uint64_t v11 = __chkstk_darwin(v119);
  uint64_t v112 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v117 = (char *)&v98 - v13;
  uint64_t v116 = sub_100029F90(&qword_10017EAF0);
  uint64_t v123 = *(void *)(v116 - 8);
  uint64_t v14 = __chkstk_darwin(v116);
  uint64_t v118 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v111 = (char *)&v98 - v16;
  uint64_t v106 = sub_100029F90(&qword_10017EAF8);
  uint64_t v109 = *(void *)(v106 - 8);
  uint64_t v17 = __chkstk_darwin(v106);
  uint64_t v105 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v107 = (char *)&v98 - v19;
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  uint64_t v25 = Text.foregroundColor(_:)();
  uint64_t v27 = v26;
  char v29 = v28;
  uint64_t v31 = v30;
  sub_100041A08(v20, v22, v24);
  swift_bridgeObjectRelease();
  uint64_t v129 = v25;
  uint64_t v130 = v27;
  char v131 = v29 & 1;
  uint64_t v132 = v31;
  sub_100091EA8();
  Section<>.init(header:content:)();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v32 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v34 = v33;
  char v36 = v35 & 1;
  uint64_t v37 = Text.foregroundColor(_:)();
  uint64_t v39 = v38;
  LOBYTE(v20) = v40;
  uint64_t v42 = v41;
  sub_100041A08(v32, v34, v36);
  swift_bridgeObjectRelease();
  uint64_t v129 = v37;
  uint64_t v130 = v39;
  char v131 = v20 & 1;
  uint64_t v132 = v42;
  sub_100091EFC();
  Section<>.init(header:content:)();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v43 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v45 = v44;
  char v47 = v46 & 1;
  uint64_t v48 = Text.foregroundColor(_:)();
  uint64_t v50 = v49;
  LOBYTE(v37) = v51;
  uint64_t v53 = v52;
  sub_100041A08(v43, v45, v47);
  swift_bridgeObjectRelease();
  uint64_t v129 = v48;
  uint64_t v130 = v50;
  char v131 = v37 & 1;
  uint64_t v132 = v53;
  sub_100091F50();
  Section<>.init(header:content:)();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v54 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v56 = v55;
  char v58 = v57 & 1;
  uint64_t v59 = Text.foregroundColor(_:)();
  uint64_t v61 = v60;
  LOBYTE(v37) = v62;
  uint64_t v64 = v63;
  sub_100041A08(v54, v56, v58);
  swift_bridgeObjectRelease();
  uint64_t v129 = v59;
  uint64_t v130 = v61;
  char v131 = v37 & 1;
  uint64_t v132 = v64;
  type metadata accessor for VolumeSlider();
  sub_100092BC8(&qword_10017EB18, (void (*)(uint64_t))type metadata accessor for VolumeSlider);
  uint64_t v65 = v104;
  Section<>.init(header:content:)();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v66 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v68 = v67;
  char v70 = v69 & 1;
  uint64_t v71 = Text.foregroundColor(_:)();
  uint64_t v73 = v72;
  LOBYTE(v61) = v74;
  uint64_t v76 = v75;
  sub_100041A08(v66, v68, v70);
  swift_bridgeObjectRelease();
  uint64_t v129 = v71;
  uint64_t v130 = v73;
  char v131 = v61 & 1;
  uint64_t v132 = v76;
  sub_100091FF0();
  Section<>.init(header:content:)();
  uint64_t v128 = v102;
  sub_100029F90(&qword_10017EB28);
  sub_10009204C();
  id v77 = v108;
  Section<>.init(content:)();
  uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
  uint64_t v78 = v105;
  uint64_t v79 = v106;
  v98(v105, v107, v106);
  uint64_t v102 = *(void (**)(void, void, void))(v123 + 16);
  v102(v118, v111, v116);
  uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v124 + 16);
  v101(v112, v117, v119);
  int v100 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
  v100(v114, v65, v110);
  uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
  v99(v115, v113, v120);
  uint64_t v80 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
  v80(v122, v77, v121);
  char v81 = v103;
  v98(v103, v78, v79);
  uint64_t v82 = (int *)sub_100029F90(&qword_10017EB38);
  v102(&v81[v82[12]], v118, v116);
  v101(&v81[v82[16]], v112, v119);
  uint64_t v83 = v110;
  v100(&v81[v82[20]], v114, v110);
  uint64_t v84 = v120;
  v99(&v81[v82[24]], v115, v120);
  uint64_t v85 = &v81[v82[28]];
  uint64_t v86 = v121;
  v80(v85, v122, v121);
  uint64_t v87 = *(char **)(v127 + 8);
  v127 += 8;
  uint64_t v103 = v87;
  ((void (*)(char *, uint64_t))v87)(v108, v86);
  uint64_t v88 = *(void (**)(char *, uint64_t))(v126 + 8);
  v126 += 8;
  v88(v113, v84);
  int v89 = *(void (**)(char *, uint64_t))(v125 + 8);
  v125 += 8;
  uint64_t v90 = v83;
  v89(v104, v83);
  uint64_t v91 = *(void (**)(char *, uint64_t))(v124 + 8);
  v124 += 8;
  uint64_t v92 = v119;
  v91(v117, v119);
  uint64_t v93 = *(void (**)(char *, uint64_t))(v123 + 8);
  v123 += 8;
  uint64_t v94 = v116;
  v93(v111, v116);
  uint64_t v95 = *(void (**)(char *, uint64_t))(v109 + 8);
  uint64_t v96 = v106;
  v95(v107, v106);
  ((void (*)(char *, uint64_t))v103)(v122, v121);
  v88(v115, v120);
  v89(v114, v90);
  v91(v112, v92);
  v93(v118, v94);
  return ((uint64_t (*)(char *, uint64_t))v95)(v105, v96);
}

void sub_1000907D4(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_10008D6C0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

float sub_1000907F0@<S0>(uint64_t a1@<X8>)
{
  id v2 = [self defaultCenter];
  NSString v3 = String._bridgeToObjectiveC()();
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v4 = a1 + *(int *)(type metadata accessor for VolumeSlider() + 20);
  id v5 = [self sharedInstance];
  [v5 volume];

  State.init(wrappedValue:)();
  float result = v7;
  *(float *)uint64_t v4 = v7;
  *(void *)(v4 + 8) = v8;
  return result;
}

float sub_1000908F0@<S0>(uint64_t a1@<X8>)
{
  id v2 = [self sharedInstance];
  [v2 brightness];

  State.init(wrappedValue:)();
  float result = v4;
  *(float *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_100090980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = sub_100029F90(&qword_10017CAB8);
  uint64_t v16 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100029F90(&qword_10017EB40);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v15 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v29 = *(_OWORD *)(a1 + 32);
  long long v30 = v7;
  uint64_t v28 = *(void *)(a1 + 48);
  uint64_t v8 = swift_allocObject();
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v8 + 64) = *(void *)(a1 + 48);
  swift_retain();
  sub_100070A54((uint64_t)&v30);
  sub_100070A54((uint64_t)&v29);
  sub_10003ADA8((uint64_t)&v28);
  Button.init(action:label:)();
  LocalizedStringKey.init(stringLiteral:)();
  long long v27 = v29;
  sub_100029F90(&qword_10017B8A8);
  State.projectedValue.getter();
  uint64_t v20 = a1;
  uint64_t v13 = sub_10002A8D8((unint64_t *)&unk_10017CAE0, &qword_10017CAB8);
  uint64_t v10 = v15;
  View.alert<A, B>(_:isPresented:actions:message:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v3);
  uint64_t v21 = v3;
  uint64_t v22 = v3;
  char v23 = &type metadata for Text;
  uint64_t v24 = v13;
  uint64_t v25 = v13;
  uint64_t v26 = &protocol witness table for Text;
  swift_getOpaqueTypeConformance2();
  uint64_t v11 = v17;
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v10, v11);
}

uint64_t sub_100090D5C@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Color.red.getter();
  uint64_t v7 = Text.foregroundStyle<A>(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  sub_100041A08(v2, v4, v6);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v13;
  return result;
}

uint64_t sub_100090E64(uint64_t a1)
{
  uint64_t v2 = sub_100029F90(&qword_10017EB48);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.destructive.getter();
  uint64_t v5 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v12 = *(_OWORD *)(a1 + 32);
  long long v13 = v6;
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v7 = swift_allocObject();
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v7 + 64) = *(void *)(a1 + 48);
  swift_retain();
  sub_100070A54((uint64_t)&v13);
  sub_100070A54((uint64_t)&v12);
  sub_10003ADA8((uint64_t)&v11);
  return Button.init(role:action:label:)();
}

uint64_t sub_100090FE0()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10009105C@<X0>(uint64_t a1@<X8>)
{
  return sub_100091094(a1);
}

uint64_t sub_100091078@<X0>(uint64_t a1@<X8>)
{
  return sub_100091094(a1);
}

uint64_t sub_100091094@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

__n128 sub_1000910F4@<Q0>(uint64_t a1@<X8>)
{
  static HorizontalAlignment.center.getter();
  sub_100091274((uint64_t)&v17);
  long long v2 = v18;
  char v3 = v19;
  static Alignment.center.getter();
  sub_10005A444(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v17, 0.0, 1, INFINITY, 0);
  sub_100041A08(v2, *((uint64_t *)&v2 + 1), v3);
  swift_bridgeObjectRelease();
  sub_100074384((uint64_t)sub_1000913C4);
  sub_100074384(0);
  uint64_t v4 = static Color.black.getter();
  char v5 = static Edge.Set.all.getter();
  long long v6 = v28;
  long long v7 = v30;
  *(_OWORD *)(a1 + 192) = v29;
  *(_OWORD *)(a1 + 208) = v7;
  long long v8 = v24;
  long long v9 = v26;
  long long v10 = v27;
  *(_OWORD *)(a1 + 128) = v25;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 176) = v6;
  __n128 result = v20;
  long long v12 = v22;
  long long v13 = v23;
  *(_OWORD *)(a1 + 64) = v21;
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 96) = v13;
  *(_OWORD *)(a1 + 112) = v8;
  long long v14 = v18;
  long long v15 = v19;
  *(_OWORD *)a1 = v17;
  *(_OWORD *)(a1 + 16) = v14;
  uint64_t v16 = v31;
  *(_OWORD *)(a1 + 32) = v15;
  *(__n128 *)(a1 + 48) = result;
  *(void *)(a1 + 224) = v16;
  *(void *)(a1 + 232) = v4;
  *(unsigned char *)(a1 + 240) = v5;
  return result;
}

uint64_t sub_100091274@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Color.white.getter();
  uint64_t v7 = Text.foregroundStyle<A>(_:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  sub_100041A08(v2, v4, v6);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  sub_100041B00(v7, v9, v13);
  swift_bridgeObjectRetain();
  sub_100041A08(v7, v9, v13);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000913C4()
{
  uint64_t v0 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033980();
  id v3 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  [v3 setRestartReason:CLFRestartReasonShutDown];

  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  type metadata accessor for MainActor();
  uint64_t v5 = static MainActor.shared.getter();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = &protocol witness table for MainActor;
  sub_1000ABB38((uint64_t)v2, (uint64_t)&unk_10017EA70, v6);
  return swift_release();
}

uint64_t sub_100091504()
{
  type metadata accessor for MainActor();
  v0[2] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[3] = v2;
  v0[4] = v1;
  return _swift_task_switch(sub_100091598, v2, v1);
}

uint64_t sub_100091598()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100091630;
  return static Task<>.sleep(nanoseconds:)(1000000000);
}

uint64_t sub_100091630()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v4 = *(void *)(v2 + 24);
  if (v0) {
    uint64_t v5 = sub_10009188C;
  }
  else {
    uint64_t v5 = sub_10009176C;
  }
  return _swift_task_switch(v5, v4, v3);
}

id sub_10009176C()
{
  id v0 = objc_allocWithZone((Class)FBSShutdownOptions);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithReason:v1];

  [v2 setRebootType:0];
  [v2 setSource:1];
  uint64_t v3 = self;
  id v4 = [v3 sharedInstance];
  [v4 prepareForExitAndRelaunch:0];

  id v5 = [v3 sharedInstance];
  return [v5 shutdownUsingOptions:v2];
}

uint64_t sub_10009188C()
{
  swift_release();
  NSString v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000918F0()
{
  uint64_t v1 = sub_100029F90(&qword_10017EA10);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v4 = v0[1];
  long long v8 = *v0;
  long long v9 = v4;
  long long v10 = v0[2];
  uint64_t v11 = *((void *)v0 + 6);
  *(void *)uint64_t v3 = static VerticalAlignment.center.getter();
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  uint64_t v5 = sub_100029F90(&qword_10017EA18);
  sub_10008F41C((uint64_t)&v8, (uint64_t)&v3[*(int *)(v5 + 44)]);
  long long v7 = v9;
  sub_100029F90(&qword_10017B8A8);
  State.projectedValue.getter();
  sub_100029F90(&qword_10017EA20);
  sub_10002A8D8(&qword_10017EA28, &qword_10017EA10);
  sub_100091A9C();
  View.fullScreenCover<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  return sub_10002A840((uint64_t)v3, &qword_10017EA10);
}

unint64_t sub_100091A9C()
{
  unint64_t result = qword_10017EA30;
  if (!qword_10017EA30)
  {
    sub_10002A694(&qword_10017EA20);
    sub_100091B3C();
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EA30);
  }
  return result;
}

unint64_t sub_100091B3C()
{
  unint64_t result = qword_10017EA38;
  if (!qword_10017EA38)
  {
    sub_10002A694(&qword_10017EA40);
    sub_100091BB8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EA38);
  }
  return result;
}

unint64_t sub_100091BB8()
{
  unint64_t result = qword_10017EA48;
  if (!qword_10017EA48)
  {
    sub_10002A694(&qword_10017EA50);
    sub_10002A8D8(&qword_10017EA58, &qword_10017EA60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EA48);
  }
  return result;
}

uint64_t sub_100091C58()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32);
}

uint64_t sub_100091C90()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003CCE0;
  return sub_100091504();
}

uint64_t sub_100091D40()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100091D68@<X0>(uint64_t a1@<X8>)
{
  return sub_10008F930(*(void (**)(void, void, void))(v1 + 16), a1);
}

unint64_t sub_100091D70()
{
  unint64_t result = qword_10017EAA0;
  if (!qword_10017EAA0)
  {
    sub_10002A694(&qword_10017EA98);
    sub_100091E10();
    sub_10002A8D8(&qword_10017D8F0, &qword_10017D8F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EAA0);
  }
  return result;
}

unint64_t sub_100091E10()
{
  unint64_t result = qword_10017EAA8;
  if (!qword_10017EAA8)
  {
    sub_10002A694(&qword_10017EAB0);
    sub_10002A8D8(&qword_10017EAB8, &qword_10017EAC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EAA8);
  }
  return result;
}

unint64_t sub_100091EA8()
{
  unint64_t result = qword_10017EB00;
  if (!qword_10017EB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EB00);
  }
  return result;
}

unint64_t sub_100091EFC()
{
  unint64_t result = qword_10017EB08;
  if (!qword_10017EB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EB08);
  }
  return result;
}

unint64_t sub_100091F50()
{
  unint64_t result = qword_10017EB10;
  if (!qword_10017EB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EB10);
  }
  return result;
}

uint64_t type metadata accessor for VolumeSlider()
{
  uint64_t result = qword_10017EBA8;
  if (!qword_10017EBA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_100091FF0()
{
  unint64_t result = qword_10017EB20;
  if (!qword_10017EB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EB20);
  }
  return result;
}

uint64_t sub_100092044@<X0>(uint64_t a1@<X8>)
{
  return sub_100090980(*(void *)(v1 + 16), a1);
}

unint64_t sub_10009204C()
{
  unint64_t result = qword_10017EB30;
  if (!qword_10017EB30)
  {
    sub_10002A694(&qword_10017EB28);
    sub_10002A694(&qword_10017CAB8);
    sub_10002A8D8((unint64_t *)&unk_10017CAE0, &qword_10017CAB8);
    swift_getOpaqueTypeConformance2();
    sub_100092BC8((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EB30);
  }
  return result;
}

uint64_t sub_100092174()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000921C4()
{
  return sub_100090E64(*(void *)(v0 + 16));
}

uint64_t sub_1000921D0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72);
}

uint64_t sub_100092220()
{
  return sub_100090FE0();
}

uint64_t initializeBufferWithCopyOfBuffer for BrightnessSlider(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BrightnessSlider(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for BrightnessSlider(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for BrightnessSlider()
{
  return &type metadata for BrightnessSlider;
}

uint64_t *sub_1000922F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for NSNotificationCenter.Publisher();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    long long v9 = (char *)a1 + v8;
    long long v10 = (char *)a2 + v8;
    *(_DWORD *)long long v9 = *(_DWORD *)v10;
    *((void *)v9 + 1) = *((void *)v10 + 1);
  }
  swift_retain();
  return a1;
}

uint64_t sub_1000923CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_100092444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  return a1;
}

uint64_t sub_1000924D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100092570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000925EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_release();
  return a1;
}

uint64_t sub_100092680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100092694);
}

uint64_t sub_100092694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100092764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100092778);
}

uint64_t sub_100092778(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_100092838()
{
  uint64_t result = type metadata accessor for NSNotificationCenter.Publisher();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DarkModeToggleButton()
{
  return &type metadata for DarkModeToggleButton;
}

ValueMetadata *type metadata accessor for AirPlaneModeButton()
{
  return &type metadata for AirPlaneModeButton;
}

uint64_t destroy for TextSizeSlider(uint64_t a1)
{
  return sub_10003A734(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s12ClarityBoard20DarkModeToggleButtonVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  long long v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10003A608(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s12ClarityBoard20DarkModeToggleButtonVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  long long v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_10003A608(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_10003A734(v6, v7, v8);
  return a1;
}

uint64_t _s12ClarityBoard20DarkModeToggleButtonVwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_10003A734(v4, v5, v6);
  return a1;
}

uint64_t _s12ClarityBoard20DarkModeToggleButtonVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s12ClarityBoard20DarkModeToggleButtonVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextSizeSlider()
{
  return &type metadata for TextSizeSlider;
}

uint64_t sub_100092A98()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100092B3C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100092B58()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100092B74()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100092B90()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100092BAC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100092BC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100092C14(float *a1)
{
}

unint64_t sub_100092C1C()
{
  unint64_t result = qword_10017EBF0;
  if (!qword_10017EBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EBF0);
  }
  return result;
}

void sub_100092C70(uint64_t a1@<X8>)
{
  sub_10008E278(*(void *)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

unint64_t sub_100092C7C()
{
  unint64_t result = qword_10017EC08;
  if (!qword_10017EC08)
  {
    sub_10002A694(&qword_10017EBF8);
    sub_10002A8D8(&qword_10017EC10, &qword_10017EC18);
    sub_100092BC8((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EC08);
  }
  return result;
}

uint64_t sub_100092D4C()
{
  sub_10003A734(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));

  return _swift_deallocObject(v0, 33);
}

void sub_100092D88(uint64_t a1)
{
  sub_10008E580(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

void sub_100092D94(float a1)
{
  if (qword_10017B5E0 != -1) {
    swift_once();
  }
  if ((~LODWORD(a1) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a1 <= -9.2234e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a1 >= 9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v2 = (uint64_t)a1;
  if ((uint64_t)a1 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(void *)(qword_1001864F0 + 16) <= v2)
  {
LABEL_15:
    __break(1u);
    return;
  }
  unsigned int v3 = *(void **)(qword_1001864F0 + 8 * v2 + 32);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = v3;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  _AXSSetPreferredContentSizeCategoryName();
}

id sub_100092EB4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = *(id *)(*a1 + OBJC_IVAR____TtC12ClarityBoard14SystemSettings_radiosPreferences);
  if (result) {
    id result = [result airplaneMode];
  }
  *a2 = (_BYTE)result;
  return result;
}

id sub_100092EF8(unsigned __int8 *a1, void *a2)
{
  return [*(id *)(*a2 + OBJC_IVAR____TtC12ClarityBoard14SystemSettings_radiosPreferences) setAirplaneMode:*a1];
}

id sub_100092F1C@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  id result = [*(id *)(*a1 + OBJC_IVAR____TtC12ClarityBoard14SystemSettings_interfaceStyleArbiter) currentStyle];
  *a2 = result == (id)2;
  return result;
}

id sub_100092F64(unsigned char *a1, void *a2)
{
  if (*a1) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = 1;
  }
  unsigned int v3 = *(void **)(*a2 + OBJC_IVAR____TtC12ClarityBoard14SystemSettings_interfaceStyleArbiter);
  id result = [v3 currentStyle];
  if (result != (id)v2)
  {
    return [v3 toggleCurrentStyle];
  }
  return result;
}

uint64_t sub_100092FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VolumeSlider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100093044()
{
  uint64_t v1 = *(void *)(type metadata accessor for VolumeSlider() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = v0 + v2;
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();

  return _swift_deallocObject(v0, v3);
}

uint64_t sub_100093138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VolumeSlider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009319C()
{
  type metadata accessor for VolumeSlider();

  return sub_10008EF10();
}

unint64_t sub_100093210()
{
  unint64_t result = qword_10017EC50;
  if (!qword_10017EC50)
  {
    sub_10002A694(&qword_10017EC58);
    sub_10002A694(&qword_10017EBE0);
    sub_10002A694(&qword_10017EBF8);
    sub_10002A8D8(&qword_10017EC00, &qword_10017EBE0);
    sub_100092C7C();
    swift_getOpaqueTypeConformance2();
    sub_100092BC8((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EC50);
  }
  return result;
}

unint64_t sub_10009333C()
{
  unint64_t result = qword_10017EC60;
  if (!qword_10017EC60)
  {
    sub_10002A694(&qword_10017EC68);
    sub_10002A8D8(&qword_10017EC30, &qword_10017EC28);
    sub_100092BC8((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EC60);
  }
  return result;
}

unint64_t sub_100093410()
{
  unint64_t result = qword_10017EC70;
  if (!qword_10017EC70)
  {
    sub_10002A694(&qword_10017EC78);
    sub_10002A8D8(&qword_10017EC48, &qword_10017EC40);
    sub_100092BC8((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EC70);
  }
  return result;
}

unint64_t sub_1000934E4()
{
  unint64_t result = qword_10017EC80;
  if (!qword_10017EC80)
  {
    sub_10002A694(&qword_10017EC88);
    sub_10002A694(&qword_10017EC18);
    sub_10002A8D8(&qword_10017EC10, &qword_10017EC18);
    swift_getOpaqueTypeConformance2();
    sub_100092BC8((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EC80);
  }
  return result;
}

uint64_t LockScreenButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlatterButtonType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ButtonStyleConfiguration();
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v12[1] = a2;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for PlatterButtonType.ultraRoundedRectangle(_:), v4);
  swift_retain();
  swift_retain();
  return PlatterButtonStyleView.init(configuration:background:foregroundColor:type:includesPadding:)();
}

uint64_t sub_1000937C4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000937E0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PlatterButtonType();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ButtonStyleConfiguration();
  __chkstk_darwin(v7);
  uint64_t v9 = *v1;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v12[1] = v9;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for PlatterButtonType.ultraRoundedRectangle(_:), v3);
  swift_retain();
  swift_retain();
  return PlatterButtonStyleView.init(configuration:background:foregroundColor:type:includesPadding:)();
}

uint64_t destroy for LockScreenButtonStyle()
{
  swift_release();

  return swift_release();
}

void *_s12ClarityBoard21LockScreenButtonStyleVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for LockScreenButtonStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for LockScreenButtonStyle(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LockScreenButtonStyle()
{
  return &type metadata for LockScreenButtonStyle;
}

unint64_t sub_100093AC0()
{
  unint64_t result = qword_10017EC90;
  if (!qword_10017EC90)
  {
    sub_10002A694(&qword_10017EC98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EC90);
  }
  return result;
}

unint64_t sub_100093B1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  CGRect v135 = (char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v130 = (char *)&v122 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v122 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  char v131 = (char *)&v122 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v129 = (char *)&v122 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v122 - v15;
  uint64_t v17 = Logger.common.unsafeMutableAddressor();
  uint64_t v18 = v3 + 16;
  long long v19 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v19(v16, v17, v2);
  sub_100094C14(v1);
  sub_100094C14(v1);
  __n128 v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v136 = v2;
  if (v22)
  {
    uint64_t v134 = v3 + 16;
    uint64_t v23 = v3;
    long long v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v143 = swift_slowAlloc();
    *(_DWORD *)long long v24 = 136315138;
    sub_100094C80(v1 + 56, (uint64_t)v140);
    sub_100094C80((uint64_t)v140, (uint64_t)&v141);
    uint64_t v132 = v10;
    CGRect v133 = v19;
    if (v142)
    {
      uint64_t v25 = v17;
      unint64_t v26 = 0xE400000000000000;
      uint64_t v27 = 1953066601;
    }
    else
    {
      uint64_t v25 = v17;
      unint64_t v26 = 0xEF6E6F697461746FLL;
      uint64_t v27 = 0x7220656369766564;
      switch(v141)
      {
        case 0:
          break;
        case 1:
          uint64_t v27 = 0xD000000000000020;
          uint64_t v60 = "supported interface orientations";
          goto LABEL_31;
        case 2:
          unint64_t v26 = 0x8000000100125E20;
          uint64_t v27 = 0xD000000000000015;
          break;
        case 3:
          uint64_t v27 = 0xD00000000000001FLL;
          uint64_t v60 = "preferred interface orientation";
LABEL_31:
          unint64_t v26 = (unint64_t)(v60 - 32) | 0x8000000000000000;
          break;
        default:
          sub_100094C4C(v1);
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x100094C04);
      }
    }
    v139[0] = sub_100050B5C(v27, v26, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100094C4C(v1);
    sub_100094C4C(v1);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Computing application interface orientation. Reason: %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v3 = v23;
    long long v28 = *(void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v2 = v136;
    v28(v16, v136);
    long long v19 = v133;
    uint64_t v18 = v134;
    uint64_t v17 = v25;
    uint64_t v10 = v132;
    if (*(unsigned char *)(v1 + 16)) {
      return *(void *)(v1 + 40);
    }
  }
  else
  {
    sub_100094C4C(v1);
    sub_100094C4C(v1);

    long long v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v28(v16, v2);
    if (*(unsigned char *)(v1 + 16)) {
      return *(void *)(v1 + 40);
    }
  }
  long long v29 = *(void **)(v1 + 24);
  uint64_t v128 = v3;
  if (v29)
  {
    long long v30 = v29;
    uint64_t v31 = (char *)[v30 supportedInterfaceOrientations];
    id v126 = [v30 interfaceOrientation];
    id v32 = [v30 preferredInterfaceOrientation];
    if (v31)
    {
      id v125 = v32;
      uint64_t v129 = v31;
      v19(v131, v17, v2);
      sub_100094C14(v1);
      sub_100094C14(v1);
      sub_100094C14(v1);
      sub_100094C14(v1);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      uint64_t v124 = v33;
      LODWORD(v123) = v34;
      BOOL v35 = os_log_type_enabled(v33, v34);
      CGRect v133 = v19;
      uint64_t v134 = v18;
      uint64_t v127 = v17;
      uint64_t v132 = v10;
      uint64_t v130 = v30;
      if (v35)
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v122 = swift_slowAlloc();
        uint64_t v143 = v122;
        *(_DWORD *)uint64_t v36 = 136316162;
        uint64_t v37 = v2;
        id v38 = (id)BSInterfaceOrientationMaskDescription();
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;

        v139[0] = sub_100050B5C(v39, v41, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2080;
        sub_10008D354((unint64_t)v126);
        id v42 = (id)BSInterfaceOrientationDescription();
        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v45 = v44;

        v139[0] = sub_100050B5C(v43, v45, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 22) = 2080;
        sub_10008D354(*(void *)(v1 + 32));
        id v46 = (id)BSInterfaceOrientationDescription();
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v49 = v48;

        v139[0] = sub_100050B5C(v47, v49, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100094C4C(v1);
        sub_100094C4C(v1);
        *(_WORD *)(v36 + 32) = 2080;
        id v50 = (id)BSInterfaceOrientationDescription();
        uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v53 = v52;

        v139[0] = sub_100050B5C(v51, v53, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 42) = 2080;
        sub_10008D354(*(void *)(v1 + 48));
        id v54 = (id)BSInterfaceOrientationDescription();
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v57 = v56;

        uint64_t v2 = v37;
        long long v19 = v133;
        v139[0] = sub_100050B5C(v55, v57, &v143);
        uint64_t v10 = v132;
        uint64_t v17 = v127;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v58 = v128;
        swift_bridgeObjectRelease();
        sub_100094C4C(v1);
        sub_100094C4C(v1);
        uint64_t v59 = v124;
        _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v123, "Supported: %s, from settings: %s, last: %s, preferred: %s, device: %s", (uint8_t *)v36, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        long long v28 = *(void (**)(char *, uint64_t))(v58 + 8);
      }
      else
      {
        sub_100094C4C(v1);
        sub_100094C4C(v1);
        sub_100094C4C(v1);
        sub_100094C4C(v1);
      }
      v28(v131, v2);
      sub_100094C80(v1 + 56, (uint64_t)v139);
      sub_100094C80((uint64_t)v139, (uint64_t)&v143);
      if (v144)
      {
        uint64_t v78 = (unint64_t *)(v1 + 48);
      }
      else
      {
        unint64_t v79 = (unint64_t)v126;
        if ((unint64_t)(v143 - 1) < 2)
        {
LABEL_23:
          id v80 = (id)sub_10008D354(v79);
          char v131 = (char *)sub_10008D354(*(void *)(v1 + 32));
          v19(v10, v17, v2);
          char v81 = Logger.logObject.getter();
          os_log_type_t v82 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v81, v82))
          {
            uint64_t v83 = swift_slowAlloc();
            uint64_t v124 = swift_slowAlloc();
            uint64_t v138 = v124;
            *(_DWORD *)uint64_t v83 = 136315906;
            os_log_t v123 = v81;
            id v84 = (id)BSInterfaceOrientationDescription();
            uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v87 = v86;

            uint64_t v137 = sub_100050B5C(v85, v87, (uint64_t *)&v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v83 + 12) = 2080;
            id v88 = (id)BSInterfaceOrientationDescription();
            uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v126 = v80;
            unint64_t v91 = v90;

            uint64_t v137 = sub_100050B5C(v89, v91, (uint64_t *)&v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v83 + 22) = 2080;
            uint64_t v92 = v129;
            id v93 = (id)BSInterfaceOrientationMaskDescription();
            uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v96 = v95;

            uint64_t v137 = sub_100050B5C(v94, v96, (uint64_t *)&v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v83 + 32) = 2080;
            os_log_type_t v97 = v82;
            id v98 = v125;
            id v99 = (id)BSInterfaceOrientationDescription();
            uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v102 = v101;

            uint64_t v103 = v100;
            uint64_t v104 = v128;
            uint64_t v137 = sub_100050B5C(v103, v102, (uint64_t *)&v138);
            uint64_t v2 = v136;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            id v80 = v126;
            swift_bridgeObjectRelease();
            os_log_t v105 = v123;
            _os_log_impl((void *)&_mh_execute_header, v123, v97, "Target: %s, current: %s, supported: %s, preferred: %s", (uint8_t *)v83, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            long long v28 = *(void (**)(char *, uint64_t))(v104 + 8);
            v28(v132, v2);
            uint64_t v106 = v135;
          }
          else
          {

            v28(v10, v2);
            uint64_t v106 = v135;
            uint64_t v92 = v129;
            id v98 = v125;
          }
          uint64_t v132 = (char *)v28;
          id v107 = objc_allocWithZone((Class)BSCanonicalOrientationMapResolver);
          id v108 = [v107 initWithTargetOrientation:v80 currentOrientation:v131];
          unint64_t v109 = sub_10008D290((unint64_t)[v108 interfaceOrientationForSupportedOrientations:v92 preferredOrientation:v98]);

          v133(v106, v127, v2);
          goto LABEL_37;
        }
        if (v143) {
          uint64_t v78 = (unint64_t *)(v1 + 32);
        }
        else {
          uint64_t v78 = (unint64_t *)(v1 + 48);
        }
      }
      unint64_t v79 = *v78;
      goto LABEL_23;
    }
    uint64_t v132 = (char *)v28;
    char v69 = v129;
    v19(v129, v17, v2);
    sub_100094C14(v1);
    char v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v130 = v30;
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      uint64_t v134 = v18;
      uint64_t v143 = v73;
      uint64_t v127 = v17;
      *(_DWORD *)uint64_t v72 = 136315138;
      char v74 = v19;
      uint64_t v75 = *(void *)v1;
      unint64_t v76 = *(void *)(v1 + 8);
      swift_bridgeObjectRetain();
      v139[0] = sub_100050B5C(v75, v76, &v143);
      uint64_t v17 = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      long long v19 = v74;
      swift_bridgeObjectRelease();
      sub_100094C4C(v1);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Scene had no supported orientations, so falling back to device interface orientation: %s", v72, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v2 = v136;
      swift_slowDealloc();

      id v77 = v129;
    }
    else
    {

      sub_100094C4C(v1);
      id v77 = v69;
    }
    ((void (*)(char *, uint64_t))v132)(v77, v2);
    uint64_t v106 = v135;
    unint64_t v109 = *(void *)(v1 + 48);
  }
  else
  {
    uint64_t v132 = (char *)v28;
    uint64_t v61 = v130;
    v19(v130, v17, v2);
    sub_100094C14(v1);
    char v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      uint64_t v143 = swift_slowAlloc();
      uint64_t v127 = v17;
      *(_DWORD *)uint64_t v64 = 136315138;
      char v131 = (char *)(v64 + 4);
      uint64_t v65 = v19;
      uint64_t v66 = *(void *)v1;
      unint64_t v67 = *(void *)(v1 + 8);
      swift_bridgeObjectRetain();
      v139[0] = sub_100050B5C(v66, v67, &v143);
      uint64_t v17 = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      long long v19 = v65;
      swift_bridgeObjectRelease();
      sub_100094C4C(v1);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Scene had no client settings, so falling back to device interface orientation: %s", v64, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v2 = v136;
      swift_slowDealloc();

      uint64_t v68 = v130;
    }
    else
    {
      sub_100094C4C(v1);

      uint64_t v68 = v61;
    }
    ((void (*)(char *, uint64_t))v132)(v68, v2);
    unint64_t v109 = *(void *)(v1 + 48);
    uint64_t v106 = v135;
  }
  v19(v106, v17, v2);
LABEL_37:
  sub_100094C14(v1);
  sub_100094C14(v1);
  uint64_t v110 = Logger.logObject.getter();
  os_log_type_t v111 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v110, v111))
  {
    uint64_t v112 = swift_slowAlloc();
    uint64_t v138 = swift_slowAlloc();
    *(_DWORD *)uint64_t v112 = 136315394;
    sub_10008D354(v109);
    id v113 = (id)BSInterfaceOrientationDescription();
    uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v116 = v115;

    uint64_t v137 = sub_100050B5C(v114, v116, (uint64_t *)&v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v112 + 12) = 2080;
    uint64_t v117 = *(void *)v1;
    unint64_t v118 = *(void *)(v1 + 8);
    swift_bridgeObjectRetain();
    uint64_t v137 = sub_100050B5C(v117, v118, (uint64_t *)&v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100094C4C(v1);
    sub_100094C4C(v1);
    _os_log_impl((void *)&_mh_execute_header, v110, v111, "Application interface orientation: %s, app: %s", (uint8_t *)v112, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v119 = v135;
    uint64_t v120 = v136;
  }
  else
  {
    sub_100094C4C(v1);
    sub_100094C4C(v1);

    uint64_t v119 = v106;
    uint64_t v120 = v2;
  }
  ((void (*)(char *, uint64_t))v132)(v119, v120);
  return v109;
}

uint64_t sub_100094C14(uint64_t a1)
{
  id v2 = *(id *)(a1 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100094C4C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 24);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_100094C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90((uint64_t *)&unk_10017ECA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100094CE8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

id sub_100094D5C()
{
  uint64_t v1 = OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo;
  [*(id *)&v0[OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo] removeIconImageObserver:v0];
  [*(id *)&v0[v1] removeBadgeStringObserver:v0];
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for Application(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_100094ED8()
{
  return type metadata accessor for Application(0);
}

uint64_t type metadata accessor for Application(uint64_t a1)
{
  return sub_100096388(a1, (uint64_t *)&unk_10017EDA8);
}

uint64_t sub_100094F9C(uint64_t a1)
{
  sub_1000970CC(a1, (uint64_t)v14);
  if (!v15)
  {
    sub_10009706C((uint64_t)v14);
    goto LABEL_9;
  }
  type metadata accessor for Application(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    char v11 = 0;
    return v11 & 1;
  }
  id v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo), "bundleIdentifier"));
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  id v6 = [*(id *)&v13[OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo] bundleIdentifier];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  if (v3 == v7 && v5 == v9) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v11 & 1;
}

void sub_10009534C()
{
  sub_1000953EC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000953EC()
{
  if (!qword_10017EDB8)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017EDB8);
    }
  }
}

uint64_t sub_100095444@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Application(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void sub_100095484(uint64_t *a1@<X8>)
{
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(*v1
                                                             + OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo), "bundleIdentifier"));
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

id sub_1000954E8(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v29) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    char v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    uint64_t v13 = v12;
    type metadata accessor for Application(0);
    char v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v3 + 40 + 8 * v16);
        }
        long long v19 = v18;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v5 >= *(void *)(v7 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v16);
        }
        os_log_type_t v21 = v20;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v17 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v7 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      unint64_t v24 = v23 - 1;
      uint64_t v25 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v24) {
          goto LABEL_53;
        }
        uint64_t v27 = *v25++;
        unint64_t v26 = v27;
        long long v28 = *(void **)v7;
        v7 += 8;
        a2 = v26;
        uint64_t v3 = v28;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5)
        {
          --v24;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000957C4(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10009588C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100095900()
{
  type metadata accessor for Applications(0);
  swift_allocObject();
  uint64_t result = sub_100095940();
  qword_1001864F8 = result;
  return result;
}

uint64_t sub_100095940()
{
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v27 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = __chkstk_darwin(v27);
  unint64_t v4 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  char v6 = (char *)&v26 - v5;
  uint64_t v7 = sub_100029F90(&qword_10017EF18);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v0 + OBJC_IVAR____TtC12ClarityBoard12Applications__applications;
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  sub_100029F90(&qword_10017DDA8);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v11, v10, v7);
  *(void *)(v0 + OBJC_IVAR____TtC12ClarityBoard12Applications_cancellables) = _swiftEmptyArrayStorage;
  uint64_t v12 = OBJC_IVAR____TtC12ClarityBoard12Applications_appAvailabilityObserver;
  *(void *)(v0 + OBJC_IVAR____TtC12ClarityBoard12Applications_appAvailabilityObserver) = 0;
  sub_100096468();
  id v13 = [self sharedInstance];
  if (([v13 hasUnlockedSinceBoot] & 1) == 0)
  {
    uint64_t v14 = v27;
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v27);
    unint64_t v15 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    unint64_t v16 = (v2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v13;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v17 + v15, v4, v14);
    *(void *)(v17 + v16) = v0;
    id v32 = sub_10009721C;
    uint64_t v33 = v17;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v29 = 1107296256;
    unint64_t v30 = sub_100033424;
    uint64_t v31 = &unk_100160B50;
    id v18 = _Block_copy(&aBlock);
    id v19 = v13;
    swift_retain();
    swift_release();
    id v20 = [v19 registerFirstUnlockBlock:v18];
    _Block_release(v18);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v14);
  }
  id v21 = [self sharedInstance];
  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  id v32 = sub_1000972FC;
  uint64_t v33 = v22;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256;
  unint64_t v30 = sub_100033424;
  uint64_t v31 = &unk_100160BA0;
  unint64_t v23 = _Block_copy(&aBlock);
  swift_release();
  id v24 = [v21 observeUpdatesWithHandler:v23];

  _Block_release(v23);
  *(void *)(v0 + v12) = v24;
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100095D7C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [a1 unregisterFirstUnlockBlockWithIdentifier:isa];

  uint64_t v13 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Updating applications after first unlock.", v16, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v7, 1, 1, v17);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v18 = static MainActor.shared.getter();
  id v19 = (void *)swift_allocObject();
  void v19[2] = v18;
  v19[3] = &protocol witness table for MainActor;
  v19[4] = a3;
  sub_1000B76CC((uint64_t)v7, (uint64_t)&unk_10017EF38, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_100095FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100096088, v6, v5);
}

uint64_t sub_100096088()
{
  swift_release();
  sub_100096468();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000960EC()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "App availability changed.", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100096468();
    return swift_release();
  }
  return result;
}

uint64_t sub_100096280()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC12ClarityBoard12Applications_appAvailabilityObserver);
  if (v1) {
    [v1 invalidate];
  }
  uint64_t v2 = v0 + OBJC_IVAR____TtC12ClarityBoard12Applications__applications;
  uint64_t v3 = sub_100029F90(&qword_10017EF18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v4 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v5 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v4, v5);
}

uint64_t sub_100096360()
{
  return type metadata accessor for Applications(0);
}

uint64_t type metadata accessor for Applications(uint64_t a1)
{
  return sub_100096388(a1, (uint64_t *)&unk_10017EDF0);
}

uint64_t sub_100096388(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000963C0()
{
  sub_100096C00();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_100096468()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC12ClarityBoard12Applications_cancellables);
  swift_beginAccess();
  *uint64_t v1 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (qword_10017B580 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unint64_t v2 = v44;
  unint64_t v44 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = self;
    swift_bridgeObjectRetain();
    unint64_t v5 = v2 + 40;
    do
    {
      swift_bridgeObjectRetain();
      id v6 = [v4 sharedApplicationLibrary];
      NSString v7 = String._bridgeToObjectiveC()();
      id v8 = [v6 applicationInfoForBundleIdentifier:v7];

      if (v8)
      {
        self;
        uint64_t v9 = swift_dynamicCastObjCClass();
        swift_bridgeObjectRelease();
        if (v9)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v5 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    unint64_t v10 = v44;
  }
  else
  {
    unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v44 = (unint64_t)_swiftEmptyArrayStorage;
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_17:
      if (v12 < 1)
      {
        __break(1u);
        goto LABEL_55;
      }
      for (uint64_t i = 0; i != v12; ++i)
      {
        if ((v10 & 0xC000000000000001) != 0) {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v14 = *(id *)(v10 + 8 * i + 32);
        }
        os_log_type_t v15 = v14;
        if ([v14 canBeLaunched])
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v16 = v44;
      if ((v44 & 0x8000000000000000) != 0) {
        goto LABEL_39;
      }
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_39;
  }
LABEL_30:
  if ((v16 & 0x4000000000000000) != 0)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v17) {
      goto LABEL_40;
    }
    goto LABEL_32;
  }
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
LABEL_40:
    swift_release();
    id v32 = _swiftEmptyArrayStorage;
    goto LABEL_41;
  }
LABEL_32:
  unint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if (v17 < 0)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v18 = 0;
  unint64_t v39 = v16 & 0xC000000000000001;
  id v19 = (void *)v16;
  do
  {
    if (v39) {
      id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v20 = *(id *)(v16 + 8 * v18 + 32);
    }
    uint64_t v21 = v20;
    ++v18;
    uint64_t v22 = (objc_class *)type metadata accessor for Application(0);
    unint64_t v23 = (char *)objc_allocWithZone(v22);
    *(void *)&v23[OBJC_IVAR____TtC12ClarityBoard11Application_applicationInfo] = v21;
    id v24 = v23;
    id v25 = v21;
    id v26 = [v25 badgeString];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    swift_beginAccess();
    uint64_t v42 = v27;
    uint64_t v43 = v29;
    Published.init(initialValue:)();
    swift_endAccess();

    v41.receiver = v24;
    v41.super_class = v22;
    id v30 = objc_msgSendSuper2(&v41, "init");
    [v25 addBadgeStringObserver:v30];
    id v31 = v30;
    [v25 addIconImageObserver:v31];

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    unint64_t v16 = (unint64_t)v19;
  }
  while (v17 != v18);
  id v32 = v45;
  swift_release();
LABEL_41:
  swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v44 = (unint64_t)v32;
  swift_retain();
  static Published.subscript.setter();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unint64_t v33 = v44;
  if (!(v44 >> 62))
  {
    uint64_t v34 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v34) {
      goto LABEL_43;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v34 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_43:
  if (v34 >= 1)
  {
    uint64_t v35 = 0;
    do
    {
      if ((v33 & 0xC000000000000001) != 0) {
        id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v36 = *(id *)(v33 + 8 * v35 + 32);
      }
      uint64_t v37 = v36;
      type metadata accessor for Application(0);
      sub_10009701C(&qword_10017DDD8, (void (*)(uint64_t))type metadata accessor for Application);
      unint64_t v44 = ObservableObject<>.objectWillChange.getter();
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = sub_100096FDC;
      *(void *)(v38 + 24) = v40;
      type metadata accessor for ObservableObjectPublisher();
      swift_retain();
      Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      swift_beginAccess();
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v35;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();

      swift_release();
    }
    while (v34 != v35);
    return swift_bridgeObjectRelease_n();
  }
LABEL_56:
  __break(1u);
  return result;
}

void sub_100096C00()
{
  if (!qword_10017EE00[0])
  {
    sub_10002A694(&qword_10017DDA8);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, qword_10017EE00);
    }
  }
}

uint64_t sub_100096C5C()
{
  type metadata accessor for Applications(0);
  sub_10009701C(&qword_10017EF10, (void (*)(uint64_t))type metadata accessor for Applications);
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();

  return swift_release();
}

uint64_t sub_100096CE4@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Applications(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100096D24()
{
  return sub_100096EDC();
}

uint64_t sub_100096D30()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  type metadata accessor for Application(0);
  uint64_t v0 = Array.description.getter();
  swift_bridgeObjectRelease();
  return v0;
}

void *sub_100096DD4()
{
  return &protocol witness table for String;
}

uint64_t sub_100096DE0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100096E60()
{
  return static Published.subscript.setter();
}

uint64_t sub_100096EDC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unsigned __int8 v0 = sub_1000954E8(v2, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_100096FDC()
{
  return sub_100096C5C();
}

uint64_t sub_100096FE4()
{
  swift_release();

  return _swift_deallocObject(v0, 32);
}

uint64_t sub_10009701C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009706C(uint64_t a1)
{
  uint64_t v2 = sub_100029F90(&qword_10017B810);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000970CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017B810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100097134()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return _swift_deallocObject(v0, v4 + 8);
}

uint64_t sub_10009721C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100095D7C(v3, v0 + v2, v4);
}

uint64_t sub_1000972AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000972BC()
{
  return swift_release();
}

uint64_t sub_1000972C4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24);
}

uint64_t sub_1000972FC()
{
  return sub_1000960EC();
}

uint64_t sub_100097304()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40);
}

uint64_t sub_100097344(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  NSString v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *NSString v7 = v2;
  v7[1] = sub_10003CCE0;
  return sub_100095FF0(a1, v4, v5, v6);
}

ValueMetadata *type metadata accessor for SiriContainerView()
{
  return &type metadata for SiriContainerView;
}

id sub_100097414()
{
  id v1 = [*v0 viewController];

  return v1;
}

uint64_t sub_10009744C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10009753C();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000974B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10009753C();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100097514()
{
}

unint64_t sub_10009753C()
{
  unint64_t result = qword_10017EF40;
  if (!qword_10017EF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017EF40);
  }
  return result;
}

void sub_100097590()
{
  qword_10017EF48 = 0x4083800000000000;
}

uint64_t sub_1000975A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v81 = a1;
  uint64_t v75 = type metadata accessor for MultimodalListStyle.IconStyle();
  uint64_t v60 = *(void *)(v75 - 8);
  uint64_t v3 = __chkstk_darwin(v75);
  os_log_type_t v71 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  char v70 = (char *)&v59 - v5;
  uint64_t v6 = sub_100029F90(&qword_10017DD38);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v62 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v59 - v9;
  uint64_t v72 = type metadata accessor for MultimodalListStyle();
  uint64_t v69 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  unint64_t v67 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for EmergencyDialerView();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  os_log_type_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100029F90(&qword_10017F010);
  uint64_t v73 = *(void *)(v16 - 8);
  uint64_t v74 = v16;
  __chkstk_darwin(v16);
  uint64_t v68 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100029F90(&qword_10017F018);
  __chkstk_darwin(v64);
  id v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100029F90(&qword_10017F020);
  __chkstk_darwin(v77);
  uint64_t v65 = (uint64_t)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100029F90(&qword_10017F028);
  uint64_t v78 = *(void *)(v21 - 8);
  uint64_t v79 = v21;
  __chkstk_darwin(v21);
  unint64_t v76 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009B2A0(v1, (uint64_t)v15);
  uint64_t v23 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v24 = (v23 + 16) & ~v23;
  uint64_t v25 = v24 + v14;
  uint64_t v26 = v23 | 7;
  uint64_t v27 = swift_allocObject();
  sub_10009B308((uint64_t)v15, v27 + v24);
  uint64_t v28 = static Color.red.getter();
  uint64_t v29 = static Color.white.getter();
  uint64_t v80 = v2;
  sub_10009B2A0(v2, (uint64_t)v15);
  uint64_t v63 = v25;
  uint64_t v61 = v26;
  uint64_t v30 = swift_allocObject();
  uint64_t v66 = v24;
  sub_10009B308((uint64_t)v15, v30 + v24);
  id v31 = [self systemBackgroundColor];
  uint64_t v32 = Color.init(uiColor:)();
  char v33 = static Edge.Set.all.getter();
  id v84 = sub_10009B36C;
  uint64_t v85 = v27;
  unint64_t v86 = sub_10009B3F0;
  uint64_t v87 = v30;
  uint64_t v88 = v28;
  uint64_t v89 = v29;
  uint64_t v90 = v32;
  char v91 = v33;
  if (qword_10017B580 != -1) {
    swift_once();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v34 = v82;
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;
  if (v35 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v37 == v38)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v39 & 1) == 0)
    {
      uint64_t v40 = (unsigned int *)&enum case for MultimodalListStyle.Layout.grid(_:);
      goto LABEL_9;
    }
  }
  uint64_t v40 = (unsigned int *)&enum case for MultimodalListStyle.Layout.stack(_:);
LABEL_9:
  uint64_t v41 = *v40;
  uint64_t v42 = type metadata accessor for MultimodalListStyle.Layout();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104))(v10, v41, v42);
  type metadata accessor for MultimodalListStyle.Layout();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v10, 0, 1, v42);
  uint64_t v43 = v60;
  unint64_t v44 = v70;
  uint64_t v45 = v75;
  (*(void (**)(char *, void, uint64_t))(v60 + 104))(v70, enum case for MultimodalListStyle.IconStyle.circle(_:), v75);
  sub_10002A580((uint64_t)v10, v62, &qword_10017DD38);
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v71, v44, v45);
  id v46 = v67;
  MultimodalListStyle.init(layout:iconStyle:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
  sub_10002A840((uint64_t)v10, &qword_10017DD38);
  sub_100029F90(&qword_10017F030);
  sub_10009B464();
  uint64_t v47 = v68;
  uint64_t v48 = v72;
  View.listStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v46, v48);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v50 = v73;
  uint64_t v49 = v74;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v19, v47, v74);
  uint64_t v51 = (id (**)())&v19[*(int *)(v64 + 36)];
  *uint64_t v51 = sub_10009988C;
  v51[1] = 0;
  v51[2] = 0;
  v51[3] = 0;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v47, v49);
  uint64_t v52 = v65;
  sub_10002A580((uint64_t)v19, v65, &qword_10017F018);
  unint64_t v53 = (void *)(v52 + *(int *)(v77 + 36));
  *unint64_t v53 = 0;
  v53[1] = 0;
  v53[2] = sub_100099988;
  v53[3] = 0;
  sub_10002A840((uint64_t)v19, &qword_10017F018);
  uint64_t v54 = v80;
  uint64_t v55 = *(void *)(v80 + 56);
  LOBYTE(v82) = *(unsigned char *)(v80 + 48);
  uint64_t v83 = v55;
  sub_100029F90(&qword_10017B8A8);
  State.projectedValue.getter();
  sub_10009B2A0(v54, (uint64_t)v15);
  uint64_t v56 = swift_allocObject();
  sub_10009B308((uint64_t)v15, v56 + v66);
  sub_100029F90(&qword_10017F060);
  sub_10009B63C();
  sub_10009B788();
  unint64_t v57 = v76;
  View.fullScreenCover<A>(isPresented:onDismiss:content:)();
  swift_release();
  swift_release();
  swift_release();
  sub_10002A840(v52, &qword_10017F020);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v78 + 32))(v81, v57, v79);
}

uint64_t sub_100097F58@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100029F90(&qword_10017F0F8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100029F90(&qword_10017F100);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v6 = static HorizontalAlignment.center.getter();
  *((void *)v6 + 1) = 0;
  uint8_t v6[16] = 1;
  uint64_t v10 = sub_100029F90(&qword_10017F108);
  sub_100098110(a1, (uint64_t)&v6[*(int *)(v10 + 44)]);
  GeometryProxy.size.getter();
  double v12 = v11;
  if (qword_10017B5F0 != -1) {
    swift_once();
  }
  double v13 = *(double *)&qword_10017EF48;
  double v14 = 1.0;
  if (v12 < *(double *)&qword_10017EF48)
  {
    GeometryProxy.size.getter();
    double v14 = v15 / v13;
  }
  static UnitPoint.top.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  sub_10002A580((uint64_t)v6, (uint64_t)v9, &qword_10017F0F8);
  uint64_t v20 = &v9[*(int *)(v7 + 36)];
  *(double *)uint64_t v20 = v14;
  *((double *)v20 + 1) = v14;
  *((void *)v20 + 2) = v17;
  *((void *)v20 + 3) = v19;
  sub_10002A840((uint64_t)v6, &qword_10017F0F8);
  return sub_100036F84((uint64_t)v9, a2, &qword_10017F100);
}

uint64_t sub_100098110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v3 = sub_100029F90(&qword_10017CB30);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100029F90(&qword_10017E868);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v79 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v78 = (char *)&v72 - v9;
  uint64_t v10 = sub_100029F90(&qword_10017F110);
  __chkstk_darwin(v10 - 8);
  double v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100029F90(&qword_10017F118);
  uint64_t v14 = v13 - 8;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t)&v72 - v18;
  uint64_t v75 = (uint64_t)&v72 - v18;
  *(void *)double v12 = static VerticalAlignment.center.getter();
  *((void *)v12 + 1) = 0;
  v12[16] = 1;
  uint64_t v20 = (uint64_t)&v12[*(int *)(sub_100029F90(&qword_10017F120) + 44)];
  uint64_t v73 = a1;
  sub_100098758(a1, v20);
  char v21 = static Edge.Set.horizontal.getter();
  static ClarityUIMetrics.componentHorizontalPadding.getter();
  EdgeInsets.init(_all:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  sub_10002A580((uint64_t)v12, (uint64_t)v17, &qword_10017F110);
  uint64_t v30 = &v17[*(int *)(v14 + 44)];
  unint64_t v76 = v17;
  *uint64_t v30 = v21;
  *((void *)v30 + 1) = v23;
  *((void *)v30 + 2) = v25;
  *((void *)v30 + 3) = v27;
  *((void *)v30 + 4) = v29;
  v30[40] = 0;
  sub_10002A840((uint64_t)v12, &qword_10017F110);
  sub_100036F84((uint64_t)v17, v19, &qword_10017F118);
  uint64_t v74 = *(int *)(type metadata accessor for EmergencyDialerView() + 36);
  uint64_t v77 = *(void *)(a1 + v74);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v31 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v33 = v32;
  char v35 = v34 & 1;
  uint64_t v36 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v5, 1, 1, v36);
  static Font.system(size:weight:design:)();
  sub_10002A840((uint64_t)v5, &qword_10017CB30);
  uint64_t v37 = Text.font(_:)();
  uint64_t v39 = v38;
  LOBYTE(v19) = v40;
  swift_release();
  sub_100041A08(v31, v33, v35);
  swift_bridgeObjectRelease();
  static Color.red.getter();
  uint64_t v41 = Text.foregroundColor(_:)();
  uint64_t v43 = v42;
  char v45 = v44;
  uint64_t v47 = v46;
  swift_release();
  sub_100041A08(v37, v39, v19 & 1);
  swift_bridgeObjectRelease();
  *(void *)&long long v96 = v41;
  *((void *)&v96 + 1) = v43;
  LOBYTE(v97) = v45 & 1;
  *((void *)&v97 + 1) = v47;
  uint64_t v48 = (uint64_t)v78;
  View.accessibilityIdentifier(_:)();
  sub_100041A08(v41, v43, v45 & 1);
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)(v73 + v74);
  sub_100099318((uint64_t)&v81);
  uint64_t v51 = v75;
  uint64_t v50 = (uint64_t)v76;
  sub_10002A580(v75, (uint64_t)v76, &qword_10017F118);
  uint64_t v52 = v79;
  sub_10002A580(v48, v79, &qword_10017E868);
  uint64_t v53 = v80;
  sub_10002A580(v50, v80, &qword_10017F118);
  uint64_t v54 = (int *)sub_100029F90(&qword_10017F128);
  uint64_t v55 = v53 + v54[12];
  *(void *)uint64_t v55 = v77;
  *(unsigned char *)(v55 + 8) = 0;
  sub_10002A580(v52, v53 + v54[16], &qword_10017E868);
  uint64_t v56 = v53 + v54[20];
  *(void *)uint64_t v56 = v49;
  *(unsigned char *)(v56 + 8) = 0;
  uint64_t v57 = v54[24];
  long long v58 = v83;
  long long v59 = v84;
  v94[2] = v83;
  v94[3] = v84;
  long long v60 = v86;
  long long v61 = v85;
  v94[4] = v85;
  v94[5] = v86;
  long long v62 = v82;
  long long v63 = v81;
  v94[0] = v81;
  v94[1] = v82;
  long long v64 = v92;
  v94[10] = v91;
  v94[11] = v92;
  long long v65 = v87;
  long long v66 = v88;
  v94[6] = v87;
  v94[7] = v88;
  long long v67 = v90;
  long long v68 = v89;
  v94[8] = v89;
  v94[9] = v90;
  uint64_t v69 = v53 + v57;
  *(_OWORD *)(v69 + 160) = v91;
  *(_OWORD *)(v69 + 176) = v64;
  *(_OWORD *)(v69 + 96) = v65;
  *(_OWORD *)(v69 + 112) = v66;
  *(_OWORD *)(v69 + 128) = v68;
  *(_OWORD *)(v69 + 144) = v67;
  *(_OWORD *)(v69 + 32) = v58;
  *(_OWORD *)(v69 + 48) = v59;
  *(_OWORD *)(v69 + 64) = v61;
  *(_OWORD *)(v69 + 80) = v60;
  char v95 = v93;
  *(unsigned char *)(v69 + 192) = v93;
  *(_OWORD *)uint64_t v69 = v63;
  *(_OWORD *)(v69 + 16) = v62;
  uint64_t v70 = v53 + v54[28];
  *(void *)uint64_t v70 = 0;
  *(unsigned char *)(v70 + 8) = 1;
  sub_10009BAE8((uint64_t)v94);
  sub_10002A840(v48, &qword_10017E868);
  sub_10002A840(v51, &qword_10017F118);
  long long v106 = v91;
  long long v107 = v92;
  char v108 = v93;
  long long v102 = v87;
  long long v103 = v88;
  long long v104 = v89;
  long long v105 = v90;
  long long v98 = v83;
  long long v99 = v84;
  long long v100 = v85;
  long long v101 = v86;
  long long v96 = v81;
  long long v97 = v82;
  sub_10009BB74((uint64_t)&v96);
  sub_10002A840(v52, &qword_10017E868);
  return sub_10002A840(v50, &qword_10017F118);
}

uint64_t sub_100098758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  __chkstk_darwin(v3);
  uint64_t v49 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for EmergencyDialerView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100029F90(&qword_10017F130);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  uint64_t v45 = v10;
  __chkstk_darwin(v9);
  double v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100029F90(&qword_10017F138);
  uint64_t v47 = *(void *)(v13 - 8);
  uint64_t v48 = v13;
  __chkstk_darwin(v13);
  uint64_t v41 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100029F90(&qword_10017F140);
  __chkstk_darwin(v43);
  uint64_t v42 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100029F90(&qword_10017F148);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v46 = (uint64_t)v40 - v20;
  sub_10009B2A0(a1, (uint64_t)v8);
  uint64_t v21 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v22 = (v21 + 16) & ~v21;
  v40[1] = v21 | 7;
  v40[2] = v22 + v7;
  uint64_t v23 = swift_allocObject();
  sub_10009B308((uint64_t)v8, v23 + v22);
  sub_100029F90(&qword_10017F150);
  sub_10002A8D8(&qword_10017F158, &qword_10017F150);
  Button.init(action:label:)();
  uint64_t v24 = a1;
  sub_100029F90(&qword_10017EF58);
  AccessibilityFocusState.projectedValue.getter();
  sub_10002A8D8(&qword_10017F160, &qword_10017F130);
  uint64_t v25 = v41;
  uint64_t v26 = v44;
  View.accessibilityFocused(_:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v26);
  sub_10009B2A0(v24, (uint64_t)v8);
  uint64_t v27 = swift_allocObject();
  sub_10009B308((uint64_t)v8, v27 + v22);
  uint64_t v28 = v49;
  static TaskPriority.userInitiated.getter();
  uint64_t v29 = (uint64_t)v42;
  uint64_t v30 = &v42[*(int *)(v43 + 36)];
  uint64_t v31 = type metadata accessor for _TaskModifier();
  uint64_t v33 = v50;
  uint64_t v32 = v51;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(&v30[*(int *)(v31 + 20)], v28, v51);
  *(void *)uint64_t v30 = &unk_10017F170;
  *((void *)v30 + 1) = v27;
  uint64_t v35 = v47;
  uint64_t v34 = v48;
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v29, v25, v48);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v28, v32);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v34);
  sub_10009BF30();
  View.accessibilityIdentifier(_:)();
  sub_10002A840(v29, &qword_10017F140);
  uint64_t v36 = v46;
  sub_100036F84((uint64_t)v19, v46, &qword_10017F148);
  sub_10002A580(v36, (uint64_t)v19, &qword_10017F148);
  uint64_t v37 = v52;
  sub_10002A580((uint64_t)v19, v52, &qword_10017F148);
  uint64_t v38 = v37 + *(int *)(sub_100029F90(&qword_10017F188) + 48);
  *(void *)uint64_t v38 = 0;
  *(unsigned char *)(v38 + 8) = 1;
  sub_10002A840(v36, &qword_10017F148);
  return sub_10002A840((uint64_t)v19, &qword_10017F148);
}

uint64_t sub_100098D3C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static VerticalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v2 = sub_100029F90(&qword_10017F190);
  return sub_100098D84((char *)(a1 + *(int *)(v2 + 44)));
}

uint64_t sub_100098D84@<X0>(char *a1@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v1 = sub_100029F90(&qword_10017CB30);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100029F90(&qword_10017F198);
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)&v38 - v7;
  uint64_t v8 = Image.init(systemName:)();
  uint64_t v9 = static Color.red.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v41 = type metadata accessor for Font.Design();
  uint64_t v11 = *(void *)(v41 - 8);
  char v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v42 = v11 + 56;
  v40(v3, 1, 1, v41);
  uint64_t v12 = static Font.system(size:weight:design:)();
  sub_10002A840((uint64_t)v3, &qword_10017CB30);
  uint64_t v13 = swift_getKeyPath();
  uint64_t v47 = v8;
  uint64_t v48 = KeyPath;
  uint64_t v49 = v9;
  uint64_t v50 = v13;
  uint64_t v51 = v12;
  static Font.Weight.bold.getter();
  sub_100029F90(&qword_10017F1A0);
  sub_10009C094();
  View.fontWeight(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  static Color.red.getter();
  uint64_t v19 = Text.foregroundColor(_:)();
  uint64_t v21 = v20;
  LOBYTE(KeyPath) = v22;
  swift_release();
  char v23 = KeyPath & 1;
  sub_100041A08(v14, v16, v18);
  swift_bridgeObjectRelease();
  v40(v3, 1, 1, v41);
  static Font.system(size:weight:design:)();
  sub_10002A840((uint64_t)v3, &qword_10017CB30);
  uint64_t v24 = Text.font(_:)();
  uint64_t v26 = v25;
  LOBYTE(v12) = v27;
  uint64_t v42 = v28;
  swift_release();
  LOBYTE(v14) = v12 & 1;
  sub_100041A08(v19, v21, v23);
  swift_bridgeObjectRelease();
  uint64_t v29 = v43;
  uint64_t v30 = v44;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  uint64_t v32 = v39;
  uint64_t v33 = v45;
  v31(v43, v39, v45);
  uint64_t v34 = v46;
  v31(v46, v29, v33);
  uint64_t v35 = &v34[*(int *)(sub_100029F90(&qword_10017F1C0) + 48)];
  *(void *)uint64_t v35 = v24;
  *((void *)v35 + 1) = v26;
  v35[16] = v12 & 1;
  *((void *)v35 + 3) = v42;
  sub_100041B00(v24, v26, v12 & 1);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v30 + 8);
  swift_bridgeObjectRetain();
  v36(v32, v33);
  sub_100041A08(v24, v26, v14);
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(char *, uint64_t))v36)(v29, v33);
}

uint64_t sub_1000991EC(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v1 + 24) = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100099284, v3, v2);
}

uint64_t sub_100099284()
{
  swift_release();
  type metadata accessor for EmergencyDialerView();
  *(unsigned char *)(v0 + 32) = 1;
  sub_100029F90(&qword_10017EF58);
  AccessibilityFocusState.wrappedValue.setter();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100099318@<X0>(uint64_t a1@<X8>)
{
  uint64_t v64 = type metadata accessor for EmergencyDialerView();
  uint64_t v61 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v62 = v3;
  uint64_t v63 = (uint64_t)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100029F90(&qword_10017CB30);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  *(void *)uint64_t v75 = v7;
  *(void *)&v75[8] = v8;
  *(void *)&v75[16] = v9;
  uint64_t v10 = sub_100029F90(&qword_10017E850);
  State.wrappedValue.getter();
  uint64_t v11 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v57 = v10;
  if (v11 < 1)
  {
    unint64_t v12 = 0xE100000000000000;
    uint64_t v13 = 32;
  }
  else
  {
    *(void *)uint64_t v75 = v7;
    *(void *)&v75[8] = v8;
    *(void *)&v75[16] = v9;
    State.wrappedValue.getter();
    unint64_t v12 = *((void *)&v80 + 1);
    uint64_t v13 = v80;
  }
  *(void *)uint64_t v75 = v13;
  *(void *)&v75[8] = v12;
  sub_10002D088();
  uint64_t v14 = Text.init<A>(_:)();
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  uint64_t v19 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v6, 1, 1, v19);
  static Font.system(size:weight:design:)();
  uint64_t v54 = v1;
  sub_10002A840((uint64_t)v6, &qword_10017CB30);
  uint64_t v20 = Text.font(_:)();
  uint64_t v22 = v21;
  char v24 = v23;
  uint64_t KeyPath = v25;
  swift_release();
  sub_100041A08(v14, v16, v18);
  swift_bridgeObjectRelease();
  *(_DWORD *)uint64_t v75 = static HierarchicalShapeStyle.primary.getter();
  uint64_t v26 = Text.foregroundStyle<A>(_:)();
  uint64_t v58 = v27;
  uint64_t v59 = v26;
  uint64_t v60 = v28;
  int v55 = v29 & 1;
  sub_100041A08(v20, v22, v24 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v30 = (uint64_t)v54;
  uint64_t v64 = *(void *)((char *)v54 + *(int *)(v64 + 36));
  uint64_t v31 = v54[5];
  long long v80 = *(_OWORD *)(v54 + 3);
  uint64_t v81 = v31;
  State.projectedValue.getter();
  uint64_t v32 = *(void *)v75;
  uint64_t v33 = *(void *)&v75[8];
  uint64_t v34 = *(void *)&v75[16];
  uint64_t v35 = *(void *)&v75[24];
  uint64_t v36 = v63;
  sub_10009B2A0(v30, v63);
  unint64_t v37 = (*(unsigned __int8 *)(v61 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  uint64_t v38 = swift_allocObject();
  sub_10009B308(v36, v38 + v37);
  LOBYTE(v37) = static Edge.Set.horizontal.getter();
  static ClarityUIMetrics.componentHorizontalPadding.getter();
  EdgeInsets.init(_all:)();
  char v65 = 0;
  *(_DWORD *)long long v84 = *(_DWORD *)v67;
  *(_DWORD *)long long v90 = *(_DWORD *)v66;
  *(_DWORD *)&v84[3] = *(_DWORD *)&v67[3];
  *(_DWORD *)&v90[3] = *(_DWORD *)&v66[3];
  *(void *)&long long v68 = v32;
  *((void *)&v68 + 1) = v33;
  uint64_t v39 = v34;
  *(void *)&long long v69 = v34;
  *((void *)&v69 + 1) = v35;
  LOBYTE(v70) = 1;
  DWORD1(v70) = *(_DWORD *)&v67[3];
  *(_DWORD *)((char *)&v70 + 1) = *(_DWORD *)v67;
  *((void *)&v70 + 1) = sub_10009BC0C;
  *(void *)&v71[0] = v38;
  *(_OWORD *)((char *)v71 + 8) = xmmword_1001128B0;
  *(_OWORD *)((char *)&v71[1] + 8) = xmmword_1001128C0;
  BYTE8(v71[2]) = v37;
  HIDWORD(v71[2]) = *(_DWORD *)&v66[3];
  *(_DWORD *)((char *)&v71[2] + 9) = *(_DWORD *)v66;
  *(void *)&long long v72 = v40;
  *((void *)&v72 + 1) = v41;
  *(void *)&long long v73 = v42;
  *((void *)&v73 + 1) = v43;
  char v74 = 0;
  LOBYTE(v36) = v55;
  char v79 = v55;
  char v76 = 0;
  v75[135] = 0;
  *(_OWORD *)&v75[119] = v73;
  *(_OWORD *)&v75[103] = v72;
  *(_OWORD *)&v75[87] = v71[2];
  *(_OWORD *)&v75[7] = v68;
  *(_OWORD *)&v75[71] = v71[1];
  *(_OWORD *)&v75[55] = v71[0];
  *(_OWORD *)&v75[39] = v70;
  *(_OWORD *)&v75[23] = v69;
  uint64_t v45 = v58;
  uint64_t v44 = v59;
  *(void *)a1 = v59;
  *(void *)(a1 + 8) = v45;
  *(unsigned char *)(a1 + 16) = v36;
  *(_DWORD *)(a1 + 17) = *(_DWORD *)v78;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)&v78[3];
  uint64_t v46 = KeyPath;
  *(void *)(a1 + 24) = v60;
  *(void *)(a1 + 32) = v46;
  *(unsigned char *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 41) = *(_DWORD *)v77;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)&v77[3];
  *(void *)(a1 + 48) = v64;
  *(unsigned char *)(a1 + 56) = 0;
  long long v47 = *(_OWORD *)&v75[64];
  *(_OWORD *)(a1 + 137) = *(_OWORD *)&v75[80];
  long long v48 = *(_OWORD *)&v75[112];
  *(_OWORD *)(a1 + 153) = *(_OWORD *)&v75[96];
  *(_OWORD *)(a1 + 169) = v48;
  *(void *)(a1 + 185) = *(void *)&v75[128];
  long long v49 = *(_OWORD *)v75;
  *(_OWORD *)(a1 + 73) = *(_OWORD *)&v75[16];
  long long v50 = *(_OWORD *)&v75[48];
  *(_OWORD *)(a1 + 89) = *(_OWORD *)&v75[32];
  *(_OWORD *)(a1 + 105) = v50;
  *(_OWORD *)(a1 + 121) = v47;
  *(_OWORD *)(a1 + 57) = v49;
  *(void *)&long long v80 = v32;
  *((void *)&v80 + 1) = v33;
  uint64_t v81 = v39;
  uint64_t v82 = v35;
  char v83 = 1;
  long long v85 = sub_10009BC0C;
  uint64_t v86 = v38;
  long long v87 = xmmword_1001128B0;
  long long v88 = xmmword_1001128C0;
  char v89 = v37;
  uint64_t v91 = v40;
  uint64_t v92 = v41;
  uint64_t v93 = v42;
  uint64_t v94 = v43;
  char v95 = 0;
  uint64_t v51 = v44;
  uint64_t v52 = v45;
  sub_100041B00(v44, v45, v36);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10006E960((uint64_t)&v68);
  sub_10009BC6C((uint64_t)&v80);
  sub_100041A08(v51, v52, v36);
  swift_release();
  return swift_bridgeObjectRelease();
}

id sub_10009988C()
{
  uint64_t v0 = type metadata accessor for AccessibilityNotification.ScreenChanged();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v5, 0, sizeof(v5));
  AccessibilityNotification.ScreenChanged.init(_:)();
  _AccessibilityNotifications.post()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return [(id)qword_100186478 setIsShowingEmergencyDialer:1];
}

id sub_100099988()
{
  return [(id)qword_100186478 setIsShowingEmergencyDialer:0];
}

uint64_t sub_1000999A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = type metadata accessor for EmergencyDialerView();
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v40 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v43 = sub_100029F90(&qword_10017F0D0);
  uint64_t v41 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100029F90(&qword_10017F0D8);
  __chkstk_darwin(v42);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100029F90(&qword_10017F098);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100029F90(&qword_10017F088);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  char v17 = (char *)&v40 - v16;
  long long v48 = &type metadata for EmergencyDialerView.HealthFeatureFlags;
  unint64_t v49 = sub_10009BA20();
  char v18 = isFeatureEnabled(_:)();
  sub_1000469D4((uint64_t)&v45);
  if (v18)
  {
    *(void *)uint64_t v11 = static HorizontalAlignment.center.getter();
    *((void *)v11 + 1) = 0;
    v11[16] = 0;
    uint64_t v19 = sub_100029F90(&qword_10017F0E8);
    sub_100099EB0(a1, &v11[*(int *)(v19 + 44)]);
    char v20 = static Edge.Set.bottom.getter();
    uint64_t v21 = static SafeAreaRegions.all.getter();
    sub_10002A580((uint64_t)v11, (uint64_t)v15, &qword_10017F098);
    uint64_t v22 = &v15[*(int *)(v12 + 36)];
    *(void *)uint64_t v22 = v21;
    v22[8] = v20;
    sub_10002A840((uint64_t)v11, &qword_10017F098);
    sub_100036F84((uint64_t)v15, (uint64_t)v17, &qword_10017F088);
    sub_10002A580((uint64_t)v17, (uint64_t)v8, &qword_10017F088);
    swift_storeEnumTagMultiPayload();
    sub_10009B840();
    uint64_t v23 = sub_10002A694(&qword_10017F0A0);
    unint64_t v24 = sub_10009B8E0();
    uint64_t v45 = (uint64_t (*)())v23;
    unint64_t v46 = v24;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return sub_10002A840((uint64_t)v17, &qword_10017F088);
  }
  else
  {
    sub_10009B2A0(a1, (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v26 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
    uint64_t v27 = swift_allocObject();
    sub_10009B308((uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26);
    uint64_t v28 = static Color.clarityUIButtonBackground.getter();
    uint64_t v29 = static Color.primary.getter();
    id v30 = [self systemGroupedBackgroundColor];
    uint64_t v31 = Color.init(uiColor:)();
    uint64_t v32 = static SafeAreaRegions.container.getter();
    char v33 = static Edge.Set.all.getter();
    uint64_t v34 = static Alignment.center.getter();
    uint64_t v45 = sub_10009BA78;
    unint64_t v46 = v27;
    uint64_t v47 = v28;
    long long v48 = (ValueMetadata *)v29;
    unint64_t v49 = v31;
    uint64_t v50 = v32;
    char v51 = v33;
    uint64_t v52 = v34;
    uint64_t v53 = v35;
    uint64_t v36 = sub_100029F90(&qword_10017F0A0);
    unint64_t v37 = sub_10009B8E0();
    View.allowsSecureDrawing()();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v38 = v41;
    uint64_t v39 = v43;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v8, v6, v43);
    swift_storeEnumTagMultiPayload();
    sub_10009B840();
    uint64_t v45 = (uint64_t (*)())v36;
    unint64_t v46 = v37;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v6, v39);
  }
}

uint64_t sub_100099EB0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  unint64_t v37 = a2;
  uint64_t v3 = type metadata accessor for EmergencyDialerView();
  uint64_t v4 = v3 - 8;
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v34 + 64);
  __chkstk_darwin(v3);
  uint64_t v36 = type metadata accessor for MedicalIDMainView();
  uint64_t v6 = *(void *)(v36 - 8);
  uint64_t v7 = __chkstk_darwin(v36);
  uint64_t v35 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - v9;
  type metadata accessor for EmergencyModel();
  sub_10009C03C(&qword_10017CD60, (void (*)(uint64_t))type metadata accessor for EmergencyModel);
  id v11 = *(id *)(StateObject.wrappedValue.getter() + 16);
  swift_release();
  id v12 = *(id *)(a1 + *(int *)(v4 + 52));
  char v33 = v10;
  MedicalIDMainView.init(healthStore:medicalIDData:displayConfiguration:)();
  uint64_t v13 = static Color.clarityUIButtonBackground.getter();
  uint64_t v14 = static Color.primary.getter();
  sub_10009B2A0(a1, (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v15 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v16 = swift_allocObject();
  sub_10009B308((uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  static ClarityUIMetrics.backButtonPadding.getter();
  LOBYTE(v15) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v27 = v35;
  uint64_t v26 = v36;
  v25(v35, v10, v36);
  char v38 = 0;
  uint64_t v28 = v37;
  v25(v37, v27, v26);
  uint64_t v29 = &v28[*(int *)(sub_100029F90(&qword_10017F0F0) + 48)];
  char v30 = v38;
  *(void *)uint64_t v29 = v13;
  *((void *)v29 + 1) = v14;
  *((void *)v29 + 2) = sub_10009BA78;
  *((void *)v29 + 3) = v16;
  v29[32] = v15;
  *((void *)v29 + 5) = v18;
  *((void *)v29 + 6) = v20;
  *((void *)v29 + 7) = v22;
  *((void *)v29 + 8) = v24;
  v29[72] = v30;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v6 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  v31(v33, v26);
  swift_release();
  swift_release();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v31)(v27, v26);
}

uint64_t sub_10009A210()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10009A264()
{
  type metadata accessor for EmergencyModel();
  sub_10009C03C(&qword_10017CD60, (void (*)(uint64_t))type metadata accessor for EmergencyModel);
  StateObject.wrappedValue.getter();
  sub_100029F90(&qword_10017E850);
  State.wrappedValue.getter();
  sub_1000667C0(v1, v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

const char *sub_10009A348()
{
  return "Health";
}

const char *sub_10009A35C()
{
  return "medicalid_v2";
}

uint64_t type metadata accessor for EmergencyDialerView()
{
  uint64_t result = qword_10017EFB8;
  if (!qword_10017EFB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10009A3BC(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)a1 = *a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    sub_10003A618();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v11 = a3[7];
    __dst = (unsigned char *)(a1 + v11);
    id v12 = (char *)a2 + v11;
    *(void *)(a1 + 56) = a2[7];
    uint64_t v13 = type metadata accessor for AccessibilityTechnologies();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v28(v12, 1, v13))
    {
      uint64_t v15 = sub_100029F90(&qword_10017EF50);
      uint64_t v16 = __dst;
      memcpy(__dst, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v16 = __dst;
      (*(void (**)(unsigned char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v18 = (int *)sub_100029F90(&qword_10017EF58);
    v16[v18[9]] = v12[v18[9]];
    *(void *)&v16[v18[10]] = *(void *)&v12[v18[10]];
    v16[v18[11]] = v12[v18[11]];
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (void *)(a1 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    void *v21 = *v22;
    v21[1] = v23;
    *(void *)(a1 + v20) = *(uint64_t *)((char *)a2 + v20);
    uint64_t v24 = a3[11];
    *(void *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(void *)(a1 + v24) = v25;
    swift_retain();
    swift_retain();
    id v26 = v25;
  }
  return a1;
}

void sub_10009A618(uint64_t a1, uint64_t a2)
{
  sub_10003A744();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_100029F90(&qword_10017EF58);
  swift_release();
  swift_release();
  uint64_t v7 = *(void **)(a1 + *(int *)(a2 + 44));
}

uint64_t sub_10009A730(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_10003A618();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  uint64_t v10 = a3[7];
  __dst = (unsigned char *)(a1 + v10);
  uint64_t v28 = a3;
  uint64_t v11 = (char *)a2 + v10;
  *(void *)(a1 + 56) = a2[7];
  uint64_t v12 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v14(v11, 1, v12))
  {
    uint64_t v15 = sub_100029F90(&qword_10017EF50);
    uint64_t v16 = __dst;
    memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = __dst;
    (*(void (**)(unsigned char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v17 = (int *)sub_100029F90(&qword_10017EF58);
  v16[v17[9]] = v11[v17[9]];
  *(void *)&v16[v17[10]] = *(void *)&v11[v17[10]];
  v16[v17[11]] = v11[v17[11]];
  uint64_t v18 = v28[8];
  uint64_t v19 = v28[9];
  uint64_t v20 = (void *)(a1 + v18);
  uint64_t v21 = (uint64_t *)((char *)a2 + v18);
  uint64_t v22 = v21[1];
  void *v20 = *v21;
  v20[1] = v22;
  *(void *)(a1 + v19) = *(uint64_t *)((char *)a2 + v19);
  uint64_t v23 = v28[11];
  *(void *)(a1 + v28[10]) = *(uint64_t *)((char *)a2 + v28[10]);
  uint64_t v24 = *(void **)((char *)a2 + v23);
  *(void *)(a1 + v23) = v24;
  swift_retain();
  swift_retain();
  id v25 = v24;
  return a1;
}

uint64_t sub_10009A938(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  sub_10003A618();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  sub_10003A744();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = a2[5];
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 56) = a2[7];
  swift_retain();
  swift_release();
  uint64_t v9 = a3[7];
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_100029F90(&qword_10017EF50);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v18 = (int *)sub_100029F90(&qword_10017EF58);
  v10[v18[9]] = v11[v18[9]];
  *(void *)&v10[v18[10]] = *(void *)&v11[v18[10]];
  swift_retain();
  swift_release();
  v10[v18[11]] = v11[v18[11]];
  uint64_t v19 = a3[8];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = v21[1];
  void *v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  uint64_t v23 = a3[11];
  uint64_t v24 = *(void **)((char *)a2 + v23);
  id v25 = *(void **)(a1 + v23);
  *(void *)(a1 + v23) = v24;
  id v26 = v24;

  return a1;
}

uint64_t sub_10009ABD4(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)(a1 + v6);
  char v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100029F90(&qword_10017EF50);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = (int *)sub_100029F90(&qword_10017EF58);
  v7[v12[9]] = v8[v12[9]];
  *(void *)&v7[v12[10]] = *(void *)&v8[v12[10]];
  v7[v12[11]] = v8[v12[11]];
  uint64_t v13 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  return a1;
}

uint64_t sub_10009AD70(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  sub_10003A744();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_100029F90(&qword_10017EF50);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v17 = (int *)sub_100029F90(&qword_10017EF58);
  v9[v17[9]] = v10[v17[9]];
  *(void *)&v9[v17[10]] = *(void *)&v10[v17[10]];
  swift_release();
  v9[v17[11]] = v10[v17[11]];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  swift_release();
  uint64_t v18 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  uint64_t v19 = a3[11];
  uint64_t v20 = *(void **)(a1 + v19);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);

  return a1;
}

uint64_t sub_10009AFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009AFD8);
}

uint64_t sub_10009AFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100029F90(&qword_10017EF58);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10009B08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009B0A0);
}

uint64_t sub_10009B0A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100029F90(&qword_10017EF58);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10009B14C()
{
  sub_10009B224();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10009B224()
{
  if (!qword_10017EFC8)
  {
    unint64_t v0 = type metadata accessor for AccessibilityFocusState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017EFC8);
    }
  }
}

uint64_t sub_10009B284()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10009B2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EmergencyDialerView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009B308(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EmergencyDialerView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009B36C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for EmergencyDialerView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100097F58(v4, a1);
}

uint64_t sub_10009B3F0()
{
  uint64_t v1 = type metadata accessor for EmergencyDialerView();
  return (*(uint64_t (**)(void))(v0
                              + *(int *)(v1 + 32)
                              + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))))();
}

unint64_t sub_10009B464()
{
  unint64_t result = qword_10017F038;
  if (!qword_10017F038)
  {
    sub_10002A694(&qword_10017F030);
    sub_10009B504();
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F038);
  }
  return result;
}

unint64_t sub_10009B504()
{
  unint64_t result = qword_10017F040;
  if (!qword_10017F040)
  {
    sub_10002A694(&qword_10017F048);
    sub_10002A8D8(&qword_10017F050, &qword_10017F058);
    sub_10002A8D8(&qword_10017D8D0, &qword_10017D8D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F040);
  }
  return result;
}

uint64_t sub_10009B5CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for EmergencyDialerView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1000999A4(v4, a1);
}

unint64_t sub_10009B63C()
{
  unint64_t result = qword_10017F068;
  if (!qword_10017F068)
  {
    sub_10002A694(&qword_10017F020);
    sub_10009B6B8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F068);
  }
  return result;
}

unint64_t sub_10009B6B8()
{
  unint64_t result = qword_10017F070;
  if (!qword_10017F070)
  {
    sub_10002A694(&qword_10017F018);
    sub_10002A694(&qword_10017F030);
    type metadata accessor for MultimodalListStyle();
    sub_10009B464();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F070);
  }
  return result;
}

unint64_t sub_10009B788()
{
  unint64_t result = qword_10017F078;
  if (!qword_10017F078)
  {
    sub_10002A694(&qword_10017F060);
    sub_10009B840();
    sub_10002A694(&qword_10017F0A0);
    sub_10009B8E0();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F078);
  }
  return result;
}

unint64_t sub_10009B840()
{
  unint64_t result = qword_10017F080;
  if (!qword_10017F080)
  {
    sub_10002A694(&qword_10017F088);
    sub_10002A8D8(&qword_10017F090, &qword_10017F098);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F080);
  }
  return result;
}

unint64_t sub_10009B8E0()
{
  unint64_t result = qword_10017F0A8;
  if (!qword_10017F0A8)
  {
    sub_10002A694(&qword_10017F0A0);
    sub_10009B980();
    sub_10002A8D8(&qword_10017F0C0, &qword_10017F0C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F0A8);
  }
  return result;
}

unint64_t sub_10009B980()
{
  unint64_t result = qword_10017F0B0;
  if (!qword_10017F0B0)
  {
    sub_10002A694(&qword_10017F0B8);
    sub_10002C46C();
    sub_10002A8D8(&qword_10017D8D0, &qword_10017D8D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F0B0);
  }
  return result;
}

unint64_t sub_10009BA20()
{
  unint64_t result = qword_10017F0E0;
  if (!qword_10017F0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F0E0);
  }
  return result;
}

uint64_t sub_10009BA78()
{
  return sub_10009BA84();
}

uint64_t sub_10009BA84()
{
  return sub_10009A210();
}

uint64_t sub_10009BAE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10009BB74(uint64_t a1)
{
  return a1;
}

uint64_t sub_10009BC0C()
{
  type metadata accessor for EmergencyDialerView();

  return sub_10009A264();
}

uint64_t sub_10009BC6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10009BCC4()
{
  return sub_10009BA84();
}

uint64_t sub_10009BCD0()
{
  uint64_t v1 = type metadata accessor for EmergencyDialerView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  sub_10003A744();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v4 = v0 + v2 + *(int *)(v1 + 28);
  uint64_t v5 = type metadata accessor for AccessibilityTechnologies();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_100029F90(&qword_10017EF58);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v2 + v3);
}

uint64_t sub_10009BE64()
{
  uint64_t v2 = *(void *)(type metadata accessor for EmergencyDialerView() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_10003CCE0;
  return sub_1000991EC(v3);
}

unint64_t sub_10009BF30()
{
  unint64_t result = qword_10017F178;
  if (!qword_10017F178)
  {
    sub_10002A694(&qword_10017F140);
    sub_10002A694(&qword_10017F130);
    sub_10002A8D8(&qword_10017F160, &qword_10017F130);
    swift_getOpaqueTypeConformance2();
    sub_10009C03C(&qword_10017F180, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F178);
  }
  return result;
}

uint64_t sub_10009C03C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10009C094()
{
  unint64_t result = qword_10017F1A8;
  if (!qword_10017F1A8)
  {
    sub_10002A694(&qword_10017F1A0);
    sub_10009C134();
    sub_10002A8D8(&qword_10017DCE8, &qword_10017DCF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F1A8);
  }
  return result;
}

unint64_t sub_10009C134()
{
  unint64_t result = qword_10017F1B0;
  if (!qword_10017F1B0)
  {
    sub_10002A694(&qword_10017F1B8);
    sub_10002A8D8(&qword_10017D258, &qword_10017D240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F1B0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for EmergencyDialerView.HealthFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10009C270);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyDialerView.HealthFeatureFlags()
{
  return &type metadata for EmergencyDialerView.HealthFeatureFlags;
}

uint64_t sub_10009C2A8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10009C32C()
{
  unint64_t result = qword_10017F1C8;
  if (!qword_10017F1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F1C8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LockIcon(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for LockIcon(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v3 = *(void **)(a2 + 8);
  id v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  id v5 = v3;

  return a1;
}

uint64_t assignWithTake for LockIcon(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for LockIcon()
{
  return &type metadata for LockIcon;
}

uint64_t sub_10009C444(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x64656B636F6C6E55;
  }
  else {
    uint64_t v3 = 0x64656B636F4CLL;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x64656B636F6C6E55;
  }
  else {
    uint64_t v5 = 0x64656B636F4CLL;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10009C4E8(char *a1, char *a2)
{
  return sub_10009C444(*a1, *a2);
}

Swift::Int sub_10009C4F4()
{
  return Hasher._finalize()();
}

uint64_t sub_10009C574()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10009C5E0()
{
  return Hasher._finalize()();
}

uint64_t sub_10009C65C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10015D360, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10009C6BC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x64656B636F4CLL;
  if (*v1) {
    uint64_t v2 = 0x64656B636F6C6E55;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_10009C6F8(uint64_t a1, char a2, void *a3)
{
  id v5 = objc_allocWithZone((Class)NSBundle);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithPath:v6];

  sub_10009CA80();
  id v8 = objc_allocWithZone((Class)BSUICAPackageView);
  id v9 = v7;
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v8 initWithPackageName:v10 inBundle:v9];

  if (v11)
  {
    id v12 = [v11 layer];
    id v13 = a3;
    sub_10009CB44(v12, a2 & 1, (uint64_t)v13, a2 & 1, v13);
  }
  else
  {
    __break(1u);
  }
}

void sub_10009C838(uint64_t a1)
{
  sub_10009C6F8(a1, *(unsigned char *)v1, *(void **)(v1 + 8));
}

void sub_10009C844(void *a1)
{
  char v3 = *(unsigned char *)v1;
  unint64_t v4 = *(void **)(v1 + 8);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setState:v5 animated:1];

  id v6 = [a1 layer];
  id v7 = v4;
  sub_10009CB44(v6, v3, (uint64_t)v7, v3, v7);
}

uint64_t sub_10009C938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10009CF14();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10009C99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10009CF14();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10009CA00()
{
}

unint64_t sub_10009CA2C()
{
  unint64_t result = qword_10017F1D0;
  if (!qword_10017F1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F1D0);
  }
  return result;
}

uint64_t sub_10009CA80()
{
  id v0 = [self mainScreen];
  [v0 scale];

  if (BSFloatEqualToFloat()) {
    uint64_t v1 = 7877184;
  }
  else {
    uint64_t v1 = 7877440;
  }
  unint64_t v2 = 0xE300000000000000;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x683639382DLL;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  return 1801678700;
}

void sub_10009CB44(void *a1, char a2, uint64_t a3, char a4, void *a5)
{
}

void sub_10009CB5C(void *a1, void *a2)
{
  id v4 = [a1 name];
  if (!v4) {
    return;
  }
  NSString v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  BOOL v9 = v6 == 0x656C6B63616873 && v8 == 0xE700000000000000;
  int v10 = v9;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (v6 == 2036625250 ? (BOOL v11 = v8 == 0xE400000000000000) : (BOOL v11 = 0),
        v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    self;
    uint64_t v12 = swift_dynamicCastObjCClass();
    if (v12)
    {
      id v13 = (void *)v12;
      id v16 = a1;
      id v14 = [a2 CGColor];
      if (v10)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
        {
          [v13 setFillColor:v14];
          goto LABEL_25;
        }
      }
      [v13 setStrokeColor:v14];
LABEL_25:

      return;
    }
  }

  swift_bridgeObjectRelease();
}

void sub_10009CD4C(void *a1, char a2, uint64_t a3, char a4, void *a5, void (*a6)(void *, uint64_t, uint64_t, uint64_t, id))
{
  id v21 = a5;
  sub_10009CB5C(a1, v21);
  id v11 = [a1 sublayers];
  if (v11)
  {
    uint64_t v12 = v11;
    sub_10009CED4();
    unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      if (v14) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_4:
        if (v14 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v15 = 0;
        uint64_t v16 = a2 & 1;
        uint64_t v17 = a4 & 1;
        do
        {
          if ((v13 & 0xC000000000000001) != 0) {
            id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v18 = *(id *)(v13 + 8 * v15 + 32);
          }
          uint64_t v19 = v18;
          ++v15;
          id v20 = v21;
          a6(v19, v16, a3, v17, v20);
        }
        while (v14 != v15);
      }
    }
    swift_bridgeObjectRelease_n();
  }
}

unint64_t sub_10009CED4()
{
  unint64_t result = qword_10017F1D8;
  if (!qword_10017F1D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017F1D8);
  }
  return result;
}

unint64_t sub_10009CF14()
{
  unint64_t result = qword_10017F1E0;
  if (!qword_10017F1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F1E0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for LockIcon.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009D034);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LockIcon.State()
{
  return &type metadata for LockIcon.State;
}

unint64_t sub_10009D070()
{
  unint64_t result = qword_10017F1E8;
  if (!qword_10017F1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10017F1E8);
  }
  return result;
}

void sub_10009D0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033980();
  id v7 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  unsigned __int8 v8 = [v7 hasMigratedFileProtections];

  if ((v8 & 1) == 0)
  {
    id v14 = [self sharedInstance];
    if ([v14 hasUnlockedSinceBoot])
    {
      id v9 = v14;
    }
    else
    {
      uint64_t v10 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
      type metadata accessor for MainActor();
      swift_retain();
      uint64_t v11 = static MainActor.shared.getter();
      uint64_t v12 = (void *)swift_allocObject();
      void v12[2] = v11;
      uint64_t v12[3] = &protocol witness table for MainActor;
      v12[4] = a1;
      void v12[5] = a2;
      sub_1000B76CC((uint64_t)v6, (uint64_t)&unk_10017F1F8, (uint64_t)v12);

      swift_release();
    }
  }
}

uint64_t sub_10009D544()
{
  sub_100029F90((uint64_t *)&unk_10017C500);
  v0[2] = swift_task_alloc();
  v0[3] = type metadata accessor for MainActor();
  v0[4] = static MainActor.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009D618;
  return sub_10009D84C();
}

uint64_t sub_10009D618()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10009D754, v1, v0);
}

uint64_t sub_10009D754()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  uint64_t v2 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = static MainActor.shared.getter();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = &protocol witness table for MainActor;
  sub_1000B76CC(v1, (uint64_t)&unk_10017F228, v4);
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10009D84C()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  v0[5] = swift_task_alloc();
  return _swift_task_switch(sub_10009D918, 0, 0);
}

uint64_t sub_10009D918()
{
  id v1 = [self sharedInstance];
  v0[6] = v1;
  if ([v1 hasUnlockedSinceBoot])
  {
    uint64_t v2 = v0[5];
    uint64_t v3 = v0[2];
    uint64_t v4 = v0[3];
    uint64_t v5 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
    unsigned int v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[5];
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Device has already been unlocked since boot. Start updating file protection.", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = v0[2];
    uint64_t v12 = v0[3];

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
    uint64_t v13 = (void *)swift_task_alloc();
    v0[8] = v13;
    void *v13 = v0;
    v13[1] = sub_10009DD40;
    return sub_10009E304();
  }
  else
  {
    uint64_t v15 = (void *)swift_task_alloc();
    v0[7] = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_10009DAFC;
    return sub_10009F70C();
  }
}

uint64_t sub_10009DAFC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10009DBF8, 0, 0);
}

uint64_t sub_10009DBF8()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[4];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received first unlock notification. Start updating file protection.", v9, 2u);
    swift_slowDealloc();
  }
  uint64_t v10 = v0[2];
  uint64_t v11 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[8] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10009DD40;
  return sub_10009E304();
}

uint64_t sub_10009DD40()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10009DE3C, 0, 0);
}

uint64_t sub_10009DE3C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009DEB0()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10009DF44, v2, v1);
}

uint64_t sub_10009DF44()
{
  swift_release();
  sub_100033980();
  id v1 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  [v1 setHasMigratedFileProtections:1];

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10009DFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  v5[3] = a5;
  void v5[4] = type metadata accessor for MainActor();
  void v5[5] = static MainActor.shared.getter();
  os_log_type_t v6 = (void *)swift_task_alloc();
  void v5[6] = v6;
  void *v6 = v5;
  v6[1] = sub_10009E084;
  return sub_10009F70C();
}

uint64_t sub_10009E084()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10009E1C0, v1, v0);
}

uint64_t sub_10009E1C0()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 16);
  uint64_t v2 = swift_release();
  v1(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10009E22C()
{
  return sub_10009FF00((void (*)(void))&_swift_release);
}

uint64_t sub_10009E244(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100056EAC;
  return sub_10009DFDC(a1, v4, v5, v7, v6);
}

uint64_t sub_10009E304()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return _swift_task_switch(sub_10009E3C0, 0, 0);
}

uint64_t sub_10009E3C0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009E48C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_10009E48C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10009E588, 0, 0);
}

uint64_t sub_10009E588()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Finished updating file protection.", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[3];
  uint64_t v8 = v0[4];
  uint64_t v10 = v0[2];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10009E6A4(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  (*(void (**)(char *))(v5 + 16))(v8);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, v4);
  aBlock[4] = sub_10009FB90;
  void aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100033424;
  aBlock[3] = &unk_100160F48;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  id v12 = [a2 registerFirstUnlockBlock:v11];
  _Block_release(v11);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_10009E8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  (*(void (**)(void, char *, uint64_t))(v5 + 32))(*(void *)(*(void *)(a1 + 64) + 40), v7, v4);
  return swift_continuation_resume();
}

uint64_t sub_10009E9A8(uint64_t a1, uint64_t a2)
{
  v2[9] = a2;
  sub_100029F90((uint64_t *)&unk_10017C500);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_10009EA58, 0, 0);
}

uint64_t sub_10009EA58()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = type metadata accessor for TaskPriority();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 56);
  uint64_t v29 = v2;
  v28(v1, 1, 1);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  sub_10009F0EC(v1, (uint64_t)&unk_10017F250, v4);
  sub_10002A840(v1, (uint64_t *)&unk_10017C500);
  sub_100033980();
  id v5 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  id v6 = [v5 applicationBundleIdentifiers];

  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v27 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    id v26 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    uint64_t v9 = (uint64_t *)(v7 + 40);
    do
    {
      uint64_t v30 = v8;
      uint64_t v12 = *(void *)(v0 + 80);
      uint64_t v11 = *(void *)(v0 + 88);
      uint64_t v14 = *(v9 - 1);
      uint64_t v13 = *v9;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(v11, 1, 1, v29);
      uint64_t v15 = (void *)swift_allocObject();
      void v15[2] = 0;
      uint64_t v16 = v15 + 2;
      v15[3] = 0;
      _DWORD v15[4] = v14;
      v15[5] = v13;
      sub_10002A580(v11, v12, (uint64_t *)&unk_10017C500);
      LODWORD(v12) = (*v27)(v12, 1, v29);
      swift_bridgeObjectRetain();
      uint64_t v17 = *(void *)(v0 + 80);
      if (v12 == 1)
      {
        sub_10002A840(*(void *)(v0 + 80), (uint64_t *)&unk_10017C500);
        if (!*v16) {
          goto LABEL_8;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v26)(v17, v29);
        if (!*v16)
        {
LABEL_8:
          uint64_t v18 = 0;
          uint64_t v20 = 0;
          goto LABEL_9;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v20 = v19;
      swift_unknownObjectRelease();
LABEL_9:
      uint64_t v21 = **(void **)(v0 + 72);
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = &unk_10017F268;
      *(void *)(v22 + 24) = v15;
      uint64_t v23 = v20 | v18;
      if (v20 | v18)
      {
        uint64_t v23 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v18;
        *(void *)(v0 + 40) = v20;
      }
      uint64_t v10 = *(void *)(v0 + 88);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v23;
      *(void *)(v0 + 64) = v21;
      swift_task_create();
      swift_release();
      sub_10002A840(v10, (uint64_t *)&unk_10017C500);
      v9 += 2;
      uint64_t v8 = v30 - 1;
    }
    while (v30 != 1);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_10009EE24()
{
  uint64_t v1 = type metadata accessor for URL();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return _swift_task_switch(sub_10009EEE0, 0, 0);
}

uint64_t sub_10009EEE0()
{
  id v1 = (id)CLFWallpaperURL();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10009EF94;
  uint64_t v3 = *(void *)(v0 + 32);
  return sub_1000A0100(v3);
}

uint64_t sub_10009EF94()
{
  uint64_t v1 = *(void *)(*v0 + 32);
  uint64_t v2 = *(void *)(*v0 + 24);
  uint64_t v3 = *(void *)(*v0 + 16);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_10009F0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A580(a1, (uint64_t)v10, (uint64_t *)&unk_10017C500);
  uint64_t v11 = type metadata accessor for TaskPriority();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10002A840((uint64_t)v10, (uint64_t *)&unk_10017C500);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v15 = v14;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = 0;
  uint64_t v15 = 0;
LABEL_6:
  uint64_t v16 = *v4;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  uint64_t v18 = (void *)(v15 | v13);
  if (v15 | v13)
  {
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v18 = v21;
    _OWORD v21[2] = v13;
    v21[3] = v15;
  }
  v20[1] = 1;
  v20[2] = v18;
  v20[3] = v16;
  swift_task_create();
  return swift_release();
}

uint64_t sub_10009F2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for URL();
  void v5[4] = v6;
  void v5[5] = *(void *)(v6 - 8);
  void v5[6] = swift_task_alloc();
  return _swift_task_switch(sub_10009F3B4, 0, 0);
}

uint64_t sub_10009F3B4()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = (id)CLFAppIconURLForBundleIdentifier();

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10009F484;
  uint64_t v4 = *(void *)(v0 + 48);
  return sub_1000A0100(v4);
}

uint64_t sub_10009F484()
{
  uint64_t v1 = *(void *)(*v0 + 48);
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v3 = *(void *)(*v0 + 32);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

unint64_t sub_10009F5DC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100029F90(&qword_10017F290);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10002A580(v6, (uint64_t)&v13, &qword_10017F298);
    uint64_t v7 = v13;
    unint64_t result = sub_100074494(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1000767A0(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10009F70C()
{
  uint64_t v1 = type metadata accessor for UUID();
  v0[10] = v1;
  v0[11] = *(void *)(v1 - 8);
  v0[12] = swift_task_alloc();
  v0[13] = swift_task_alloc();
  return _swift_task_switch(sub_10009F7D8, 0, 0);
}

uint64_t sub_10009F7D8()
{
  *(void *)(v0 + 112) = [self sharedInstance];
  return _swift_task_switch(sub_10009F85C, 0, 0);
}

uint64_t sub_10009F85C()
{
  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = v0[12];
  v0[2] = v0;
  v0[7] = v2;
  v0[3] = sub_10009F8FC;
  uint64_t v3 = swift_continuation_init();
  sub_10009E6A4(v3, v1);
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10009F8FC()
{
  (*(void (**)(void, void, void))(*(void *)(*(void *)v0 + 88) + 32))(*(void *)(*(void *)v0 + 104), *(void *)(*(void *)v0 + 96), *(void *)(*(void *)v0 + 80));
  return _swift_task_switch(sub_10009FA40, 0, 0);
}

uint64_t sub_10009FA40()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = (void *)v0[14];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[10];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v1 unregisterFirstUnlockBlockWithIdentifier:isa];

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10009FB00()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return _swift_deallocObject(v0, v4);
}

uint64_t sub_10009FB90()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10009E8A0(v2, v3);
}

uint64_t sub_10009FBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10009FC04()
{
  return swift_release();
}

uint64_t sub_10009FC0C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003CCE0;
  return sub_10009D544();
}

uint64_t sub_10009FCB8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32);
}

uint64_t sub_10009FCF0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100056EAC;
  return sub_10009DEB0();
}

uint64_t sub_10009FD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100056EAC;
  return sub_10009E9A8(a1, a2);
}

uint64_t sub_10009FE3C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100056EAC;
  return sub_10009EE24();
}

uint64_t sub_10009FEE8()
{
  return sub_10009FF00((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10009FF00(void (*a1)(void))
{
  swift_unknownObjectRelease();
  a1(*(void *)(v1 + 40));

  return _swift_deallocObject(v1, 48);
}

uint64_t sub_10009FF50(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100056EAC;
  return sub_10009F2F4(a1, v4, v5, v7, v6);
}

uint64_t sub_1000A0010()
{
  swift_release();

  return _swift_deallocObject(v0, 32);
}

uint64_t sub_1000A0048(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100056EAC;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10017F260 + dword_10017F260);
  return v6(a1, v4);
}

uint64_t sub_1000A0100(uint64_t a1)
{
  v1[37] = a1;
  uint64_t v2 = type metadata accessor for URL();
  v1[38] = v2;
  v1[39] = *(void *)(v2 - 8);
  v1[40] = swift_task_alloc();
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Logger();
  v1[44] = v3;
  v1[45] = *(void *)(v3 - 8);
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  v1[49] = swift_task_alloc();
  return _swift_task_switch(sub_1000A0298, 0, 0);
}

uint64_t sub_1000A0298()
{
  uint64_t v135 = v0;
  id v1 = [self defaultManager];
  URL.path.getter();
  NSString v2 = String._bridgeToObjectiveC()();
  unsigned int v3 = [v1 fileExistsAtPath:v2];

  if (!v3)
  {

    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  uint64_t v130 = (void **)(v0 + 232);
  NSString v4 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 256) = 0;
  id v5 = [v1 attributesOfItemAtPath:v4 error:v0 + 256];

  uint64_t v6 = *(void **)(v0 + 256);
  CGRect v133 = v1;
  if (v5)
  {
    uint64_t v7 = (_OWORD *)(v0 + 88);
    type metadata accessor for FileAttributeKey(0);
    sub_1000A11F4(&qword_10017B960, type metadata accessor for FileAttributeKey);
    uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = v6;

    if (*(void *)(v8 + 16))
    {
      unint64_t v10 = sub_100074494((uint64_t)NSFileProtectionKey);
      if (v11)
      {
        sub_10002A028(*(void *)(v8 + 56) + 32 * v10, v0 + 88);
      }
      else
      {
        *uint64_t v7 = 0u;
        *(_OWORD *)(v0 + 104) = 0u;
      }
    }
    else
    {
      *uint64_t v7 = 0u;
      *(_OWORD *)(v0 + 104) = 0u;
      char v33 = NSFileProtectionKey;
    }

    swift_bridgeObjectRelease();
    NSFileProtectionType v34 = NSFileProtectionNone;
    sub_10002A580(v0 + 88, v0 + 184, &qword_10017B810);
    if (*(void *)(v0 + 208))
    {
      type metadata accessor for FileProtectionType(0);
      if (swift_dynamicCast())
      {
        uint64_t v35 = *(void **)(v0 + 280);
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v38 = v37;
        if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39)
        {
          swift_bridgeObjectRelease_n();

          goto LABEL_28;
        }
        char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        NSFileProtectionType v34 = NSFileProtectionNone;
        if (v90)
        {
LABEL_28:
          uint64_t v91 = *(void *)(v0 + 392);
          uint64_t v92 = *(void *)(v0 + 352);
          uint64_t v93 = *(void *)(v0 + 360);
          uint64_t v94 = *(void *)(v0 + 344);
          uint64_t v95 = *(void *)(v0 + 304);
          uint64_t v96 = *(void *)(v0 + 312);
          uint64_t v97 = *(void *)(v0 + 296);
          swift_bridgeObjectRelease();
          uint64_t v98 = Logger.common.unsafeMutableAddressor();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16))(v91, v98, v92);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16))(v94, v97, v95);
          long long v99 = Logger.logObject.getter();
          os_log_type_t v100 = static os_log_type_t.default.getter();
          BOOL v101 = os_log_type_enabled(v99, v100);
          uint64_t v102 = *(void *)(v0 + 392);
          uint64_t v104 = *(void *)(v0 + 352);
          uint64_t v103 = *(void *)(v0 + 360);
          uint64_t v105 = *(void *)(v0 + 344);
          uint64_t v106 = *(void *)(v0 + 304);
          uint64_t v107 = *(void *)(v0 + 312);
          if (v101)
          {
            uint64_t v132 = *(void *)(v0 + 392);
            char v108 = (uint8_t *)swift_slowAlloc();
            v134[0] = swift_slowAlloc();
            *(_DWORD *)char v108 = 136315138;
            sub_1000A11F4(&qword_10017F280, (void (*)(uint64_t))&type metadata accessor for URL);
            uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 288) = sub_100050B5C(v109, v110, v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v105, v106);
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "Already had correct file protection type for file: %s", v108, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v132, v104);
          }
          else
          {

            (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v105, v106);
            (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v104);
          }
LABEL_31:
          sub_10002A840(v0 + 88, &qword_10017B810);
          goto LABEL_32;
        }
      }
    }
    else
    {
      sub_10002A840(v0 + 184, &qword_10017B810);
    }
    NSFileProtectionType v122 = v34;
    uint64_t v40 = *(void *)(v0 + 384);
    uint64_t v41 = *(void *)(v0 + 360);
    uint64_t v42 = *(void *)(v0 + 336);
    uint64_t v43 = *(void *)(v0 + 304);
    uint64_t v44 = *(void *)(v0 + 312);
    uint64_t v45 = *(void *)(v0 + 296);
    uint64_t v117 = Logger.common.unsafeMutableAddressor();
    unint64_t v116 = *(void (**)(uint64_t))(v41 + 16);
    v116(v40);
    uint64_t v118 = v0 + 152;
    sub_10002A580(v0 + 88, v0 + 152, &qword_10017B810);
    unint64_t v115 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
    v115(v42, v45, v43);
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    uint64_t v49 = *(void *)(v0 + 384);
    uint64_t v50 = *(void *)(v0 + 352);
    uint64_t v51 = *(void *)(v0 + 360);
    uint64_t v52 = *(void *)(v0 + 336);
    uint64_t v54 = *(void *)(v0 + 304);
    uint64_t v53 = *(void *)(v0 + 312);
    if (v48)
    {
      uint64_t v113 = *(void *)(v0 + 304);
      os_log_type_t v114 = v47;
      uint64_t v55 = swift_slowAlloc();
      v134[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315394;
      sub_10002A580(v118, v0 + 120, &qword_10017B810);
      sub_100029F90(&qword_10017B810);
      uint64_t v56 = String.init<A>(describing:)();
      *(void *)(v0 + 264) = sub_100050B5C(v56, v57, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002A840(v118, &qword_10017B810);
      *(_WORD *)(v55 + 12) = 2080;
      sub_1000A11F4(&qword_10017F280, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 272) = sub_100050B5C(v58, v59, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      uint64_t v61 = v133;
      v60(v52, v113);
      _os_log_impl((void *)&_mh_execute_header, v46, v114, "Updating incorrect file protection type: %s, file: %s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v62(v49, v50);
    }
    else
    {
      sub_10002A840(v118, &qword_10017B810);
      uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      v60(v52, v54);

      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v62(v49, v50);
      uint64_t v61 = v133;
    }
    sub_100029F90(&qword_10017F288);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001135D0;
    *(void *)(inited + 32) = NSFileProtectionKey;
    type metadata accessor for FileProtectionType(0);
    *(void *)(inited + 64) = v64;
    *(void *)(inited + 40) = v122;
    char v65 = v122;
    long long v66 = NSFileProtectionKey;
    sub_10009F5DC(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v68 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *uint64_t v130 = 0;
    unsigned int v69 = [v61 setAttributes:isa ofItemAtPath:v68 error:v130];

    long long v70 = *v130;
    if (v69)
    {
      id v71 = v70;
    }
    else
    {
      uint64_t v128 = v60;
      char v131 = (void (*)(os_log_t, uint64_t))v62;
      uint64_t v72 = *(void *)(v0 + 368);
      uint64_t v73 = *(void *)(v0 + 352);
      uint64_t v74 = *(void *)(v0 + 320);
      uint64_t v76 = *(void *)(v0 + 296);
      uint64_t v75 = *(void *)(v0 + 304);
      id v77 = v70;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      ((void (*)(uint64_t, uint64_t, uint64_t))v116)(v72, v117, v73);
      v115(v74, v76, v75);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v126 = static os_log_type_t.error.getter();
      BOOL v79 = os_log_type_enabled(v78, v126);
      long long v80 = *(NSObject **)(v0 + 368);
      uint64_t v81 = *(void *)(v0 + 352);
      uint64_t v82 = *(void *)(v0 + 320);
      uint64_t v83 = *(void *)(v0 + 304);
      if (v79)
      {
        uint64_t v123 = *(void *)(v0 + 352);
        os_log_t loga = *(os_log_t *)(v0 + 368);
        uint64_t v120 = v78;
        uint64_t v84 = swift_slowAlloc();
        uint64_t v119 = (void *)swift_slowAlloc();
        v134[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v84 = 136315394;
        sub_1000A11F4(&qword_10017F280, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 240) = sub_100050B5C(v85, v86, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v128(v82, v83);
        *(_WORD *)(v84 + 12) = 2112;
        swift_errorRetain();
        uint64_t v87 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 248) = v87;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v119 = v87;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v120, v126, "Unable to set file protection type for file: %s, error: %@", (uint8_t *)v84, 0x16u);
        sub_100029F90(&qword_10017B800);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        uint64_t v88 = v123;
        os_log_t v89 = loga;
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        v128(v82, v83);
        swift_errorRelease();
        os_log_t v89 = v80;
        uint64_t v88 = v81;
      }
      v131(v89, v88);
    }
    goto LABEL_31;
  }
  uint64_t v12 = *(void *)(v0 + 376);
  uint64_t v13 = *(void *)(v0 + 352);
  uint64_t v14 = *(void *)(v0 + 360);
  uint64_t v129 = *(void *)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 304);
  uint64_t v15 = *(void *)(v0 + 312);
  uint64_t v17 = *(void *)(v0 + 296);
  id v18 = v6;
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v19 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v19, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v129, v17, v16);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = *(void *)(v0 + 376);
  uint64_t v25 = *(void *)(v0 + 352);
  uint64_t v24 = *(void *)(v0 + 360);
  uint64_t v26 = *(void *)(v0 + 328);
  uint64_t v27 = *(void *)(v0 + 304);
  uint64_t v28 = *(void *)(v0 + 312);
  if (v22)
  {
    log = v20;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v121 = (void *)swift_slowAlloc();
    v134[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315394;
    sub_1000A11F4(&qword_10017F280, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v127 = v23;
    *(void *)(v0 + 224) = sub_100050B5C(v30, v31, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    *(_WORD *)(v29 + 12) = 2112;
    swift_errorRetain();
    uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 216) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v121 = v32;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v21, "Unable to get file protection type for file: %s, error: %@", (uint8_t *)v29, 0x16u);
    sub_100029F90(&qword_10017B800);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v127, v25);
  }
  else
  {

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
LABEL_32:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v111 = *(uint64_t (**)(void))(v0 + 8);
  return v111();
}

uint64_t sub_1000A11F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A123C(uint64_t a1)
{
  NSString v4 = *(int **)(v1 + 16);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10003CCE0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10017F260 + dword_10017F260);
  return v6(a1, v4);
}

uint64_t destroy for NotificationView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32)) {
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for NotificationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v7;
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NotificationView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v4;
      *(void *)(a1 + 40) = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  swift_retain();
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NotificationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v6)
    {
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v8;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for NotificationView()
{
  return &type metadata for NotificationView;
}

uint64_t sub_1000A1590()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A15AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = static Color.clear.getter();
  unsigned int v3 = (_OWORD *)swift_allocObject();
  long long v4 = *(_OWORD *)(v1 + 16);
  v3[1] = *(_OWORD *)v1;
  v3[2] = v4;
  long long v5 = *(_OWORD *)(v1 + 48);
  v3[3] = *(_OWORD *)(v1 + 32);
  v3[4] = v5;
  sub_1000A182C(v1);
  uint64_t v6 = static Alignment.center.getter();
  uint64_t v18 = v7;
  uint64_t v19 = v6;
  long long v22 = *(_OWORD *)(v1 + 48);
  sub_100029F90(&qword_10017B8A8);
  uint64_t result = State.wrappedValue.getter();
  if (v21 == 1)
  {
    uint64_t v9 = *(void *)v1;
    uint64_t v10 = *(void *)(v1 + 8);
    uint64_t v11 = *(void *)(v1 + 16);
    uint64_t v12 = *(void *)(v1 + 24);
    uint64_t v13 = *(void *)(v1 + 32);
    uint64_t v14 = *(void *)(v1 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100063B00(v13);
    uint64_t result = State.projectedValue.getter();
    uint64_t v16 = *((void *)&v22 + 1);
    uint64_t v15 = v22;
    char v17 = v23;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    char v17 = 0;
  }
  *(void *)a1 = v20;
  *(void *)(a1 + 8) = sub_1000A1824;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(unsigned char *)(a1 + 104) = v17;
  *(void *)(a1 + 112) = v19;
  *(void *)(a1 + 120) = v18;
  return result;
}

uint64_t sub_1000A1720()
{
  return swift_release();
}

uint64_t sub_1000A1790@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A15AC(a1);
}

uint64_t sub_1000A17CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 80);
}

uint64_t sub_1000A1824()
{
  return sub_1000A1720();
}

uint64_t sub_1000A182C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100063B00(v2);
  swift_retain();
  return a1;
}

uint64_t sub_1000A1890()
{
  return State.wrappedValue.setter();
}

uint64_t destroy for PresentableNotificationView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32)) {
    swift_release();
  }
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for PresentableNotificationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v7;
  }
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PresentableNotificationView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v4;
      *(void *)(a1 + 40) = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  swift_retain();
  swift_release();
LABEL_8:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for PresentableNotificationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v6)
    {
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v8;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  swift_release();
LABEL_8:
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentableNotificationView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentableNotificationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentableNotificationView()
{
  return &type metadata for PresentableNotificationView;
}

unint64_t sub_1000A1C4C()
{
  unint64_t result = qword_10017F2A8;
  if (!qword_10017F2A8)
  {
    sub_10002A694(&qword_10017F2B0);
    sub_1000A1CEC();
    sub_10002A8D8(&qword_10017F2C8, &qword_10017F2D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F2A8);
  }
  return result;
}

unint64_t sub_1000A1CEC()
{
  unint64_t result = qword_10017F2B8;
  if (!qword_10017F2B8)
  {
    sub_10002A694(&qword_10017F2C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F2B8);
  }
  return result;
}

uint64_t sub_1000A1D60()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A1D7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v1 = type metadata accessor for MoveTransition();
  uint64_t v33 = *(void *)(v1 - 8);
  uint64_t v2 = v33;
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v33 - v6;
  uint64_t v8 = sub_100029F90(&qword_10017F2D8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100029F90(&qword_10017F2E0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100029F90(&qword_10017F2E8);
  uint64_t v16 = v15 - 8;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100029F90(&qword_10017F2F0) - 8;
  __chkstk_darwin(v34);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = static HorizontalAlignment.center.getter();
  *((void *)v10 + 1) = 0;
  v10[16] = 0;
  uint64_t v21 = sub_100029F90(&qword_10017F2F8);
  sub_1000A2168(v35, (uint64_t)&v10[*(int *)(v21 + 44)]);
  MoveTransition.init(edge:)();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
  sub_1000A3620(&qword_10017C370, (void (*)(uint64_t))&type metadata accessor for MoveTransition);
  uint64_t v22 = v1;
  uint64_t v23 = AnyTransition.init<A>(_:)();
  sub_10002A580((uint64_t)v10, (uint64_t)v14, &qword_10017F2D8);
  *(void *)&v14[*(int *)(v12 + 44)] = v23;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v22);
  sub_10002A840((uint64_t)v10, &qword_10017F2D8);
  uint64_t v24 = static Color.clarityUIContentBackground.getter();
  LOBYTE(v22) = static Edge.Set.all.getter();
  sub_10002A580((uint64_t)v14, (uint64_t)v18, &qword_10017F2E0);
  uint64_t v25 = &v18[*(int *)(v16 + 44)];
  *(void *)uint64_t v25 = v24;
  v25[8] = v22;
  sub_10002A840((uint64_t)v14, &qword_10017F2E0);
  uint64_t v26 = static Color.orange.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10002A580((uint64_t)v18, (uint64_t)v20, &qword_10017F2E8);
  uint64_t v28 = (uint64_t *)&v20[*(int *)(v34 + 44)];
  uint64_t *v28 = KeyPath;
  v28[1] = v26;
  sub_10002A840((uint64_t)v18, &qword_10017F2E8);
  LOBYTE(v26) = static Edge.Set.bottom.getter();
  uint64_t v29 = static SafeAreaRegions.all.getter();
  uint64_t v30 = v36;
  sub_10002A580((uint64_t)v20, v36, &qword_10017F2F0);
  uint64_t v31 = v30 + *(int *)(sub_100029F90(&qword_10017F300) + 36);
  *(void *)uint64_t v31 = v29;
  *(unsigned char *)(v31 + 8) = v26;
  return sub_10002A840((uint64_t)v20, &qword_10017F2F0);
}

uint64_t sub_1000A2168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = a1;
  uint64_t v88 = a2;
  uint64_t v3 = sub_100029F90(&qword_10017F308);
  uint64_t v86 = *(void *)(v3 - 8);
  uint64_t v87 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v85 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v84 = (char *)&v81 - v6;
  uint64_t v7 = sub_100029F90(&qword_10017F310);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100029F90(&qword_10017F318);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100029F90(&qword_10017F320);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100029F90(&qword_10017F328);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_100029F90(&qword_10017F330) - 8;
  uint64_t v22 = __chkstk_darwin(v83);
  uint64_t v89 = (uint64_t)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v90 = (uint64_t)&v81 - v24;
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  uint64_t v25 = sub_100029F90(&qword_10017F338);
  sub_1000A276C(a1, &v9[*(int *)(v25 + 44)]);
  uint64_t v26 = static Font.clarityUINavigationTitle.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10002A580((uint64_t)v9, (uint64_t)v13, &qword_10017F310);
  uint64_t v28 = (uint64_t *)&v13[*(int *)(v11 + 44)];
  uint64_t *v28 = KeyPath;
  v28[1] = v26;
  sub_10002A840((uint64_t)v9, &qword_10017F310);
  LOBYTE(v9) = static Edge.Set.top.getter();
  static ClarityUIMetrics.titleTopPadding.getter();
  EdgeInsets.init(_all:)();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  sub_10002A580((uint64_t)v13, (uint64_t)v17, &qword_10017F318);
  uint64_t v37 = &v17[*(int *)(v15 + 44)];
  *uint64_t v37 = (char)v9;
  *((void *)v37 + 1) = v30;
  *((void *)v37 + 2) = v32;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  v37[40] = 0;
  sub_10002A840((uint64_t)v13, &qword_10017F318);
  LOBYTE(v15) = static Edge.Set.bottom.getter();
  static ClarityUIMetrics.titleBottomPadding.getter();
  EdgeInsets.init(_all:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  sub_10002A580((uint64_t)v17, (uint64_t)v21, &qword_10017F320);
  unint64_t v46 = &v21[*(int *)(v19 + 44)];
  char *v46 = v15;
  *((void *)v46 + 1) = v39;
  *((void *)v46 + 2) = v41;
  *((void *)v46 + 3) = v43;
  *((void *)v46 + 4) = v45;
  v46[40] = 0;
  sub_10002A840((uint64_t)v17, &qword_10017F320);
  LOBYTE(v15) = static Edge.Set.horizontal.getter();
  static ClarityUIMetrics.titleHorizontalPadding.getter();
  EdgeInsets.init(_all:)();
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v55 = v89;
  sub_10002A580((uint64_t)v21, v89, &qword_10017F328);
  uint64_t v56 = v55 + *(int *)(v83 + 44);
  *(unsigned char *)uint64_t v56 = v15;
  *(void *)(v56 + 8) = v48;
  *(void *)(v56 + 16) = v50;
  *(void *)(v56 + 24) = v52;
  *(void *)(v56 + 32) = v54;
  *(unsigned char *)(v56 + 40) = 0;
  sub_10002A840((uint64_t)v21, &qword_10017F328);
  uint64_t v57 = v90;
  sub_1000A325C(v55, v90);
  uint64_t v58 = v82;
  uint64_t v91 = v82;
  static Axis.Set.vertical.getter();
  sub_100029F90(&qword_10017F340);
  sub_1000A32CC();
  unint64_t v59 = v84;
  ScrollView.init(_:showsIndicators:content:)();
  uint64_t v60 = swift_allocObject();
  long long v61 = *(_OWORD *)(v58 + 48);
  *(_OWORD *)(v60 + 48) = *(_OWORD *)(v58 + 32);
  *(_OWORD *)(v60 + 64) = v61;
  *(unsigned char *)(v60 + 80) = *(unsigned char *)(v58 + 64);
  long long v62 = *(_OWORD *)(v58 + 16);
  *(_OWORD *)(v60 + 16) = *(_OWORD *)v58;
  *(_OWORD *)(v60 + 32) = v62;
  sub_1000A3378(v58);
  static ClarityUIMetrics.backButtonPadding.getter();
  LODWORD(v83) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v64 = v63;
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  sub_10002A580(v57, v55, &qword_10017F330);
  id v71 = v85;
  uint64_t v72 = v86;
  uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  uint64_t v74 = v87;
  v73(v85, v59, v87);
  uint64_t v75 = v55;
  uint64_t v76 = v88;
  sub_10002A580(v75, v88, &qword_10017F330);
  uint64_t v77 = sub_100029F90(&qword_10017F360);
  v73((char *)(v76 + *(int *)(v77 + 48)), v71, v74);
  uint64_t v78 = v76 + *(int *)(v77 + 64);
  *(void *)uint64_t v78 = sub_1000A3370;
  *(void *)(v78 + 8) = v60;
  *(unsigned char *)(v78 + 16) = v83;
  *(void *)(v78 + 24) = v64;
  *(void *)(v78 + 32) = v66;
  *(void *)(v78 + 40) = v68;
  *(void *)(v78 + 48) = v70;
  *(unsigned char *)(v78 + 56) = 0;
  BOOL v79 = *(void (**)(char *, uint64_t))(v72 + 8);
  swift_retain();
  v79(v59, v74);
  sub_10002A840(v90, &qword_10017F330);
  swift_release();
  v79(v71, v74);
  return sub_10002A840(v89, &qword_10017F330);
}

uint64_t sub_1000A276C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for MultimodalNavigationTitleLabelStyle();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v25 = v3;
  uint64_t v26 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100029F90(&qword_10017F368);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100029F90(&qword_10017F370);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v28 = a1;
  sub_100029F90(&qword_10017F378);
  sub_1000A34E0();
  Label.init(title:icon:)();
  MultimodalNavigationTitleLabelStyle.init()();
  sub_10002A8D8(&qword_10017F3B8, &qword_10017F368);
  sub_1000A3620(&qword_10017F3C0, (void (*)(uint64_t))&type metadata accessor for MultimodalNavigationTitleLabelStyle);
  uint64_t v18 = v25;
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v15, v11);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v19(v15, v17, v11);
  uint64_t v20 = v27;
  v19(v27, v15, v11);
  uint64_t v21 = &v20[*(int *)(sub_100029F90(&qword_10017F3C8) + 48)];
  *(void *)uint64_t v21 = 0;
  v21[8] = 0;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v17, v11);
  return ((uint64_t (*)(char *, uint64_t))v22)(v15, v11);
}

uint64_t sub_1000A2B0C@<X0>(uint64_t a1@<X8>)
{
  swift_bridgeObjectRetain();
  sub_10002D088();
  uint64_t result = Text.init<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_1000A2B84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = Image.init(systemName:)();
  uint64_t v3 = static Color.orange.getter();
  uint64_t v4 = Image.init(systemName:)();
  uint64_t result = static Alignment.center.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = result;
  a1[4] = v6;
  return result;
}

uint64_t sub_1000A2C0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static VerticalAlignment.center.getter();
  sub_1000A2CCC(a1, (uint64_t)v16);
  uint64_t v5 = v16[0];
  uint64_t v6 = v16[1];
  char v7 = v17;
  uint64_t v8 = v18;
  uint64_t v9 = v19;
  char v10 = v20;
  LOBYTE(a1) = static Edge.Set.horizontal.getter();
  static ClarityUIMetrics.titleHorizontalPadding.getter();
  static ClarityUIMetrics.componentHorizontalPadding.getter();
  uint64_t result = EdgeInsets.init(_all:)();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v8;
  *(void *)(a2 + 56) = v9;
  *(unsigned char *)(a2 + 64) = v10;
  *(unsigned char *)(a2 + 72) = (_BYTE)a1;
  *(void *)(a2 + 80) = v12;
  *(void *)(a2 + 88) = v13;
  *(void *)(a2 + 96) = v14;
  *(void *)(a2 + 104) = v15;
  *(unsigned char *)(a2 + 112) = 0;
  return result;
}

uint64_t sub_1000A2CCC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[1];
  if ((v3 & 0x2000000000000000) != 0)
  {
    if ((v3 & 0xF00000000000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  if ((*a1 & 0xFFFFFFFFFFFFLL) != 0) {
LABEL_3:
  }
    swift_bridgeObjectRetain();
LABEL_5:
  sub_10002D088();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  static Font.headline.getter();
  uint64_t v9 = Text.font(_:)();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v15 = v14;
  swift_release();
  sub_100041A08(v4, v6, v8);
  swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v13 & 1;
  *(void *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  sub_100041B00(v9, v11, v13 & 1);
  swift_bridgeObjectRetain();
  sub_100041A08(v9, v11, v13 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A2E00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationCompletionCriteria();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static Animation.clarityUINavigationTransition.getter();
  uint64_t v11 = a1;
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 64) = v7;
  *(unsigned char *)(v6 + 80) = *(unsigned char *)(a1 + 64);
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v8;
  sub_1000A3378(a1);
  static AnimationCompletionCriteria.logicallyComplete.getter();
  withAnimation<A>(_:completionCriteria:_:completion:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000A2F70@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A1D7C(a1);
}

uint64_t sub_1000A2FB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlatterButtonType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TintShapeStyle();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for ButtonStyleConfiguration();
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  TintShapeStyle.init()();
  static Color.white.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for PlatterButtonType.ultraRoundedRectangle(_:), v2);
  return PlatterButtonStyleView.init(configuration:background:foregroundColor:type:includesPadding:)();
}

uint64_t sub_1000A31A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000A31D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000A31FC()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t sub_1000A3228()
{
  return EnvironmentValues.tintColor.setter();
}

uint64_t sub_1000A325C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017F330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A32C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A2C0C(*(void **)(v1 + 16), a1);
}

unint64_t sub_1000A32CC()
{
  unint64_t result = qword_10017F348;
  if (!qword_10017F348)
  {
    sub_10002A694(&qword_10017F340);
    sub_10002A8D8(&qword_10017F350, &qword_10017F358);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F348);
  }
  return result;
}

uint64_t sub_1000A3370()
{
  return sub_1000A2E00(v0 + 16);
}

uint64_t sub_1000A3378(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100063B00(v2);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000A33E4()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_1000A3448()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 48)) {
    swift_release();
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 81);
}

uint64_t sub_1000A34A8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 48);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1000A34D8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A2B0C(a1);
}

unint64_t sub_1000A34E0()
{
  unint64_t result = qword_10017F380;
  if (!qword_10017F380)
  {
    sub_10002A694(&qword_10017F378);
    sub_1000A3580();
    sub_10002A8D8(&qword_10017F3A8, &qword_10017F3B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F380);
  }
  return result;
}

unint64_t sub_1000A3580()
{
  unint64_t result = qword_10017F388;
  if (!qword_10017F388)
  {
    sub_10002A694(&qword_10017F390);
    sub_10002A8D8(&qword_10017F398, &qword_10017F3A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F388);
  }
  return result;
}

uint64_t sub_1000A3620(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for BackButtonStyle()
{
  return &type metadata for BackButtonStyle;
}

unint64_t sub_1000A367C()
{
  unint64_t result = qword_10017F3D0;
  if (!qword_10017F3D0)
  {
    sub_10002A694(&qword_10017F300);
    sub_1000A36F8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F3D0);
  }
  return result;
}

unint64_t sub_1000A36F8()
{
  unint64_t result = qword_10017F3D8;
  if (!qword_10017F3D8)
  {
    sub_10002A694(&qword_10017F2F0);
    sub_1000A3798();
    sub_10002A8D8(&qword_10017D258, &qword_10017D240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F3D8);
  }
  return result;
}

unint64_t sub_1000A3798()
{
  unint64_t result = qword_10017F3E0;
  if (!qword_10017F3E0)
  {
    sub_10002A694(&qword_10017F2E8);
    sub_1000A3838();
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F3E0);
  }
  return result;
}

unint64_t sub_1000A3838()
{
  unint64_t result = qword_10017F3E8;
  if (!qword_10017F3E8)
  {
    sub_10002A694(&qword_10017F2E0);
    sub_10002A8D8(&qword_10017F3F0, &qword_10017F2D8);
    sub_10002A8D8(&qword_10017C398, &qword_10017C3A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F3E8);
  }
  return result;
}

uint64_t sub_1000A38FC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A3918()
{
  return sub_10002A8D8(&qword_10017F3F8, (uint64_t *)&unk_10017F400);
}

char *sub_1000A3954(char a1)
{
  uint64_t v3 = sub_100029F90((uint64_t *)&unk_10017F458);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_listLayoutObserver] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation] = 0;
  v1[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_isAppeared] = 0;
  v1[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_includeBackgroundView] = a1;
  uint64_t v7 = (objc_class *)type metadata accessor for SceneViewControllerBase();
  v31.receiver = v1;
  v31.super_class = v7;
  id v8 = objc_msgSendSuper2(&v31, "initWithNibName:bundle:", 0, 0);
  uint64_t v9 = qword_10017B580;
  uint64_t v10 = (char *)v8;
  if (v9 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_100029F90((uint64_t *)&unk_10017BF80);
  Published.projectedValue.getter();
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1000A6204();
  uint64_t v11 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *(void *)&v10[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_listLayoutObserver] = v11;
  swift_release();
  char v12 = self;
  id v13 = [v12 defaultCenter];
  uint64_t v14 = self;
  id v15 = [v14 mainQueue];
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v29 = sub_1000A6260;
  uint64_t v30 = v16;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256;
  uint64_t v27 = sub_1000A4E10;
  uint64_t v28 = &unk_100161230;
  char v17 = _Block_copy(&aBlock);
  swift_release();
  id v18 = [v13 addObserverForName:@"CLBSceneInterfaceOrientationNeedsUpdate" object:0 queue:v15 usingBlock:v17];
  _Block_release(v17);
  swift_unknownObjectRelease();

  id v19 = [v12 defaultCenter];
  id v20 = [v14 mainQueue];
  uint64_t v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v29 = sub_1000A6280;
  uint64_t v30 = v21;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256;
  uint64_t v27 = sub_1000A4E10;
  uint64_t v28 = &unk_100161258;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_release();
  id v23 = [v19 addObserverForName:@"CLBApplicationDeviceOrientationNeedsUpdate" object:0 queue:v20 usingBlock:v22];

  _Block_release(v22);
  swift_unknownObjectRelease();

  return v10;
}

void sub_1000A3DAC()
{
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for SceneViewControllerBase();
  id v1 = objc_msgSendSuper2(&v6, "view");
  if (v1)
  {
    uint64_t v2 = v1;
    self;
    uint64_t v3 = (void *)swift_dynamicCastObjCClassUnconditional();
    uint64_t v4 = OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation;
    unint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation];
    if (!v5)
    {
      unint64_t v5 = sub_1000A439C();
      *(void *)&v0[v4] = v5;
    }
    [v3 setSceneInterfaceOrientation:v5];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000A3E64(void *a1)
{
  sub_1000A4104(a1);

  return sub_1000A3E9C(a1);
}

uint64_t sub_1000A3E9C(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  objc_super v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 setDeviceOrientation:sub_1000A63A4()];
  uint64_t v7 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  id v8 = v1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v19 = v3;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = v18;
    *(_DWORD *)uint64_t v11 = 136315138;
    v17[1] = v11 + 4;
    sub_1000A63A4();
    id v12 = (id)BSDeviceOrientationDescription();
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    uint64_t v20 = sub_100050B5C(v13, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Applying device orientation for scene: %s.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v19);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_1000A4104(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  objc_super v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation;
  unint64_t v8 = *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation];
  if (!v8)
  {
    unint64_t v8 = sub_1000A439C();
    *(void *)&v1[v7] = v8;
  }
  [a1 setInterfaceOrientation:sub_10008D354(v8)];
  uint64_t v9 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9, v3);
  os_log_type_t v10 = v1;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v21 = v3;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v23 = v20;
    *(_DWORD *)uint64_t v13 = 136315138;
    unint64_t v14 = *(void *)&v1[v7];
    if (!v14)
    {
      unint64_t v14 = sub_1000A439C();
      *(void *)&v1[v7] = v14;
    }
    sub_10008D354(v14);
    id v15 = (id)BSInterfaceOrientationDescription();
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    uint64_t v22 = sub_100050B5C(v16, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Applying interface orientation for scene: %s.", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v21);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

unint64_t sub_1000A439C()
{
  id v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA8);
  uint64_t v2 = (void *)v1();
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = [v2 identifier];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  (*(void (**)(void))((swift_isaMask & *v0) + 0xB0))();
  uint64_t v5 = (void *)v1();
  objc_super v6 = v5;
  if (v5)
  {
    id v7 = [v5 clientSettings];

    if (v7)
    {
      self;
      objc_super v6 = (void *)swift_dynamicCastObjCClass();
      if (!v6) {
    }
      }
    else
    {
      objc_super v6 = 0;
    }
  }
  [(id)qword_100186478 systemInterfaceOrientation];
  [(id)qword_100186478 deviceInterfaceOrientation];
  unint64_t v8 = sub_100093B1C();
  swift_bridgeObjectRelease();

  return v8;
}

void sub_1000A4578()
{
  id v1 = v0;
  uint64_t v2 = Notification.userInfo.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    id v36 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v4;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v3 + 16) && (unint64_t v5 = sub_100074394((uint64_t)aBlock), (v6 & 1) != 0))
    {
      sub_10002A028(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v38);
    }
    else
    {
      long long v38 = 0u;
      long long v39 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_100029FD4((uint64_t)aBlock);
    if (*((void *)&v39 + 1))
    {
      if (swift_dynamicCast())
      {
        id v8 = v36;
        uint64_t v7 = v37;
        uint64_t v9 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA8))();
        if (!v9)
        {
          swift_bridgeObjectRelease();
          return;
        }
        os_log_type_t v10 = v9;
        id v11 = [v9 identifier];

        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if ((id)v12 == v8 && v14 == v7)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v16 & 1) == 0) {
            return;
          }
        }
      }
    }
    else
    {
      sub_10009706C((uint64_t)&v38);
    }
  }
  uint64_t v17 = Notification.userInfo.getter();
  if (!v17) {
    goto LABEL_36;
  }
  uint64_t v18 = v17;
  id v36 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v19;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v18 + 16) && (unint64_t v20 = sub_100074394((uint64_t)aBlock), (v21 & 1) != 0))
  {
    sub_10002A028(*(void *)(v18 + 56) + 32 * v20, (uint64_t)&v38);
  }
  else
  {
    long long v38 = 0u;
    long long v39 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100029FD4((uint64_t)aBlock);
  if (!*((void *)&v39 + 1))
  {
    sub_10009706C((uint64_t)&v38);
    goto LABEL_36;
  }
  sub_10002ACFC();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_36:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  id v22 = v36;
  [v36 integerValue];

  *(void *)((char *)v1 + OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation) = sub_1000A439C();
  (*(void (**)(void))((swift_isaMask & *v1) + 0xD0))();
  uint64_t v23 = Notification.userInfo.getter();
  if (v23)
  {
    uint64_t v24 = v23;
    id v36 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v25;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v24 + 16) && (unint64_t v26 = sub_100074394((uint64_t)aBlock), (v27 & 1) != 0))
    {
      sub_10002A028(*(void *)(v24 + 56) + 32 * v26, (uint64_t)&v38);
    }
    else
    {
      long long v38 = 0u;
      long long v39 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_100029FD4((uint64_t)aBlock);
    if (*((void *)&v39 + 1))
    {
      if (swift_dynamicCast())
      {
        id v28 = v36;
        [v36 doubleValue];
        double v30 = *(double *)&v29;
        sub_1000A4A64(v29, 0);
        objc_super v31 = self;
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = v1;
        aBlock[4] = sub_1000A6380;
        void aBlock[5] = v32;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100033424;
        aBlock[3] = &unk_100161488;
        uint64_t v33 = _Block_copy(aBlock);
        uint64_t v34 = v1;
        swift_release();
        [v31 animateWithDuration:v33 animations:v30];
        _Block_release(v33);

        return;
      }
    }
    else
    {
      sub_10009706C((uint64_t)&v38);
    }
  }
  sub_1000A4A64(0, 0);
}

uint64_t sub_1000A4A64(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xA8))();
  if (result)
  {
    char v6 = (void *)result;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v2;
    *(void *)(v7 + 24) = a1;
    *(unsigned char *)(v7 + 32) = a2 & 1;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_1000A65D4;
    *(void *)(v8 + 24) = v7;
    v12[4] = sub_1000A6620;
    void v12[5] = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    void v12[2] = sub_1000A4C2C;
    uint64_t v12[3] = &unk_100161438;
    uint64_t v9 = _Block_copy(v12);
    os_log_type_t v10 = v2;
    swift_retain();
    swift_release();
    [v6 performUpdate:v9];

    _Block_release(v9);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000A4C04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_1000A4C2C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void (**)(id, id))(a1 + 32);
  id v6 = a2;
  id v5 = a3;
  v4(v6, v5);
}

void sub_1000A4D28(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong;
    (*(void (**)(uint64_t))((swift_isaMask & *Strong) + 0xC8))(v1);
  }
}

void sub_1000A4DB4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1000A4578();
  }
}

uint64_t sub_1000A4E10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1000A4F04()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *Strong) + 0xA8))();
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = v1;
      aBlock[4] = sub_1000A62C0;
      void aBlock[5] = v4;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000A5EC0;
      aBlock[3] = &unk_1001612A8;
      id v5 = _Block_copy(aBlock);
      id v6 = v1;
      swift_release();
      [v3 updateUISettingsWithBlock:v5];
      _Block_release(v5);

      uint64_t v1 = v3;
    }
  }
}

void sub_1000A504C()
{
  _StringGuts.grow(_:)(21);
  swift_getObjectType();
  sub_100029F90((uint64_t *)&unk_10017F470);
  String.init<A>(describing:)();
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000100127C10;
  v0._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0x6C616E6F6974706FLL;
  v1._object = (void *)0xED0000656E656353;
  String.append(_:)(v1);
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000A5148()
{
  _StringGuts.grow(_:)(21);
  swift_getObjectType();
  sub_100029F90((uint64_t *)&unk_10017F470);
  String.init<A>(describing:)();
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000100127C10;
  v0._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0xD000000000000011;
  v1._object = (void *)0x8000000100125B30;
  String.append(_:)(v1);
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000A5240()
{
}

void sub_1000A5264()
{
}

void sub_1000A5288(void *a1)
{
  _StringGuts.grow(_:)(21);
  swift_getObjectType();
  sub_100029F90((uint64_t *)&unk_10017F470);
  String.init<A>(describing:)();
  swift_bridgeObjectRelease();
  v2._object = (void *)0x8000000100127C10;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0xD000000000000018;
  v3._object = a1;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000A537C()
{
  _StringGuts.grow(_:)(21);
  swift_getObjectType();
  sub_100029F90((uint64_t *)&unk_10017F470);
  String.init<A>(describing:)();
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000100127C10;
  v0._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0xD000000000000015;
  v1._object = (void *)0x8000000100127C30;
  String.append(_:)(v1);
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000A5478(void *a1)
{
}

void sub_1000A5484()
{
  uint64_t v1 = OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation;
  unint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_lastSceneInterfaceOrientation];
  if (!v2)
  {
    unint64_t v2 = sub_1000A439C();
    *(void *)&v0[v1] = v2;
  }
  id v3 = [objc_allocWithZone((Class)CLBApplicationSceneView) initWithSceneInterfaceOrientation:v2 includeBackgroundView:v0[OBJC_IVAR____TtC12ClarityBoard23SceneViewControllerBase_includeBackgroundView]];
  id v4 = [v3 layer];
  swift_getObjectType();
  sub_100029F90((uint64_t *)&unk_10017F470);
  String.init<A>(describing:)();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 setName:v5];

  [v0 setView:v3];
}

id sub_1000A572C(void *a1, double a2, double a3)
{
  id v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  swift_unknownObjectRetain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134218752;
    *(double *)long long aBlock = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2048;
    *(double *)long long aBlock = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 1024;
    LODWORD(aBlock[0]) = [a1 isAnimated];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 28) = 2048;
    [a1 transitionDuration];
    aBlock[0] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Scene view controller will transition to size %f x %f. Animated: %{BOOL}d, transition duration: %f", (uint8_t *)v15, 0x26u);
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v4;
  aBlock[4] = sub_1000A62EC;
  void aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5C64;
  aBlock[3] = &unk_100161348;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v4;
  swift_release();
  [a1 animateAlongsideTransition:v18 completion:0];
  _Block_release(v18);
  unint64_t v20 = (objc_class *)type metadata accessor for SceneViewControllerBase();
  v22.receiver = v19;
  v22.super_class = v20;
  return objc_msgSendSuper2(&v22, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
}

id sub_1000A5A48(void *a1, void *a2)
{
  v16.receiver = a2;
  v16.super_class = (Class)type metadata accessor for SceneViewControllerBase();
  id result = objc_msgSendSuper2(&v16, "view");
  if (!result) {
    goto LABEL_6;
  }
  NSString v5 = result;
  self;
  [(id)swift_dynamicCastObjCClassUnconditional() updateSceneUI];

  id v6 = [a1 transitionDuration];
  uint64_t v8 = v7;
  id result = (id)(*(uint64_t (**)(id))((swift_isaMask & *a2) + 0xA8))(v6);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = a2;
    *(void *)(v10 + 24) = v8;
    *(unsigned char *)(v10 + 32) = 0;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_1000A632C;
    *(void *)(v11 + 24) = v10;
    _DWORD v15[4] = sub_1000A6348;
    v15[5] = v11;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    void v15[2] = sub_1000A4C2C;
    v15[3] = &unk_1001613C0;
    uint64_t v12 = _Block_copy(v15);
    uint64_t v13 = a2;
    swift_retain();
    swift_release();
    [v9 performUpdate:v12];

    _Block_release(v12);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    id result = (id)swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
LABEL_6:
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000A5C64(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

void sub_1000A5E70(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    sub_1000A3E9C(v1);
  }
}

void sub_1000A5EC0(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_1000A5F2C(void *a1, SEL *a2)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for SceneViewControllerBase();
  id v3 = objc_msgSendSuper2(&v5, "view");
  if (v3)
  {
    id v4 = v3;
    self;
    [(id)swift_dynamicCastObjCClassUnconditional() *a2];
  }
  else
  {
    __break(1u);
  }
}

void sub_1000A5FB4(void *a1, void *a2, void *a3, uint64_t a4, char a5)
{
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void (**)(uint64_t))((swift_isaMask & *a3) + 0xD8);
    id v15 = a1;
    v12(v11);
    if ((a5 & 1) == 0)
    {
      id v13 = [self settingsWithDuration:*(double *)&a4];
      [a2 setAnimationSettings:v13];

      id v14 = [(id)qword_100186478 _systemAnimationFenceCreatingIfNecessary:1];
      [a2 setAnimationFence:v14];
    }
  }
}

id sub_1000A615C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SceneViewControllerBase();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SceneViewControllerBase()
{
  return self;
}

uint64_t sub_1000A61C4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24);
}

void sub_1000A61FC(uint64_t *a1)
{
}

unint64_t sub_1000A6204()
{
  unint64_t result = qword_10017F468;
  if (!qword_10017F468)
  {
    sub_10002A694((uint64_t *)&unk_10017F458);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F468);
  }
  return result;
}

void sub_1000A6260()
{
}

uint64_t sub_1000A6268(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000A6278()
{
  return swift_release();
}

void sub_1000A6280()
{
}

uint64_t sub_1000A6288()
{
  return _swift_deallocObject(v0, 24);
}

void sub_1000A62C0(void *a1)
{
}

void sub_1000A62C8()
{
  sub_1000A5F2C(*(void **)(v0 + 16), (SEL *)&selRef_updateSceneUI);
}

id sub_1000A62EC(void *a1)
{
  return sub_1000A5A48(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000A62F4()
{
  return _swift_deallocObject(v0, 33);
}

void sub_1000A632C(void *a1, void *a2)
{
  sub_1000A5FB4(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32));
}

uint64_t sub_1000A6338()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A6348()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000A6370()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000A6380()
{
  sub_1000A5F2C(*(void **)(v0 + 16), (SEL *)&selRef_layoutIfNeeded);
}

id sub_1000A63A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [(id)qword_100186478 deviceOrientation];
  if ((unint64_t)result >= 7)
  {
    uint64_t v5 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      v11[1] = v8 + 4;
      id v12 = [(id)qword_100186478 deviceOrientation];
      type metadata accessor for UIDeviceOrientation(0);
      uint64_t v9 = String.init<A>(describing:)();
      id v12 = (id)sub_100050B5C(v9, v10, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Got unknown device orientation: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return 0;
  }
  return result;
}

uint64_t sub_1000A6624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  type metadata accessor for NamespaceWrapper();
  sub_1000AB394(&qword_10017D568, (void (*)(uint64_t))type metadata accessor for NamespaceWrapper);
  *(void *)a6 = EnvironmentObject.init()();
  *(void *)(a6 + 8) = v11;
  *(void *)(a6 + 16) = swift_getKeyPath();
  *(_WORD *)(a6 + 24) = 0;
  id v12 = (int *)type metadata accessor for LockScreenPasscodeView();
  uint64_t v13 = (uint64_t *)(a6 + v12[6]);
  uint64_t *v13 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = a6 + v12[7];
  State.init(wrappedValue:)();
  *(_OWORD *)uint64_t v14 = v24;
  *(void *)(v14 + 16) = v25;
  uint64_t v15 = a6 + v12[8];
  State.init(wrappedValue:)();
  *(_OWORD *)uint64_t v15 = v24;
  *(void *)(v15 + 16) = v25;
  uint64_t v16 = v12[9];
  State.init(wrappedValue:)();
  *(_OWORD *)(a6 + v16) = v24;
  uint64_t v17 = v12[10];
  if (qword_10017B620 != -1) {
    swift_once();
  }
  uint64_t v18 = (uint64_t *)(a6 + v17);
  type metadata accessor for LockScreenWallpaperMetadataProvider();
  sub_1000AB394((unint64_t *)&qword_10017D4F8, (void (*)(uint64_t))type metadata accessor for LockScreenWallpaperMetadataProvider);
  swift_retain();
  uint64_t result = ObservedObject.init(wrappedValue:)();
  uint64_t *v18 = result;
  v18[1] = v20;
  *(void *)(a6 + v12[11]) = a1;
  char v21 = (void *)(a6 + v12[12]);
  void *v21 = a2;
  v21[1] = a3;
  objc_super v22 = (void *)(a6 + v12[13]);
  void *v22 = a4;
  v22[1] = a5;
  return result;
}

void sub_1000A688C()
{
  qword_10017F490 = 0x4038000000000000;
}

void sub_1000A689C()
{
  qword_10017F498 = 0x402E000000000000;
}

void sub_1000A68AC()
{
  qword_10017F4A0 = 0x403E000000000000;
}

void sub_1000A68BC()
{
  qword_10017F4A8 = 0x403E000000000000;
}

void sub_1000A68CC()
{
  qword_10017F4B0 = 0x4039000000000000;
}

uint64_t sub_1000A68DC()
{
  uint64_t v0 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LockScreenPasscodeView();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v6 >> 60 == 15) {
    return static Color.white.getter();
  }
  sub_100062CE0(v5, v6);
  sub_10006193C((uint64_t)v3);
  sub_1000B7C58();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return Color.init(_:)();
}

double sub_1000A6A4C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LockScreenPasscodeView();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = v1 + *(int *)(__chkstk_darwin(v3 - 8) + 40);
  long long v7 = *(_OWORD *)v6;
  uint64_t v8 = *(void *)(v6 + 16);
  long long v19 = v7;
  uint64_t v20 = v8;
  sub_100029F90(&qword_10017E850);
  State.projectedValue.getter();
  uint64_t v9 = v21;
  double v10 = v22;
  uint64_t v11 = v23;
  uint64_t v12 = v24;
  sub_1000AA424(v1, (uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = swift_allocObject();
  sub_1000AA48C((uint64_t)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  if (qword_10017B630 != -1) {
    swift_once();
  }
  LOBYTE(v19) = 0;
  *((void *)&v19 + 1) = qword_1001801C0;
  State.init(wrappedValue:)();
  char v15 = v21;
  double result = v22;
  uint64_t v17 = v23;
  *(void *)a1 = v9;
  *(double *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = sub_1000AA4F0;
  *(void *)(a1 + 40) = v14;
  *(unsigned char *)(a1 + 48) = v15;
  *(double *)(a1 + 56) = result;
  *(void *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = 0x3FA999999999999ALL;
  *(void *)(a1 + 80) = 8;
  return result;
}

uint64_t sub_1000A6C18@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>, double a6@<D0>)
{
  uint64_t v12 = sub_100029F90(&qword_10017D708);
  uint64_t v13 = v12 - 8;
  uint64_t v14 = *(void *)(v12 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  long long v19 = (char *)&v30 - v18;
  *(void *)long long v19 = static HorizontalAlignment.center.getter();
  *((void *)v19 + 1) = 0;
  v19[16] = 1;
  uint64_t v20 = sub_100029F90(&qword_10017F568);
  sub_1000A6E30(a4, a1, a2, a3, (uint64_t *)&v19[*(int *)(v20 + 44)], a6);
  uint64_t v21 = static Alignment.center.getter();
  uint64_t v23 = v22;
  uint64_t v24 = (uint64_t)&v19[*(int *)(v13 + 44)];
  sub_1000A89D0(a4, v24);
  uint64_t v25 = (uint64_t *)(v24 + *(int *)(sub_100029F90(&qword_10017D730) + 36));
  uint64_t *v25 = v21;
  v25[1] = v23;
  sub_10002A580((uint64_t)v19, (uint64_t)v17, &qword_10017D708);
  unint64_t v26 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v27 = swift_allocObject();
  sub_100036F84((uint64_t)v17, v27 + v26, &qword_10017D708);
  *a5 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  id v28 = (uint64_t (**)())((char *)a5 + *(int *)(sub_100029F90(&qword_10017F5B0) + 36));
  void *v28 = sub_1000AA930;
  v28[1] = (uint64_t (*)())v27;
  return sub_10002A840((uint64_t)v19, &qword_10017D708);
}

uint64_t sub_1000A6E30@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>, double a6@<D0>)
{
  uint64_t v146 = a3;
  uint64_t v147 = a4;
  LODWORD(v145) = a2;
  uint64_t v148 = a1;
  uint64_t v135 = a5;
  uint64_t v151 = type metadata accessor for LockScreenPasscodeView();
  uint64_t v133 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v137 = v7;
  uint64_t v134 = (uint64_t)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_100029F90(&qword_10017E148);
  __chkstk_darwin(v141);
  uint64_t v143 = (uint64_t *)((char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v144 = type metadata accessor for ColorScheme();
  uint64_t v142 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v152 = (char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_100029F90(&qword_10017F598);
  uint64_t v10 = __chkstk_darwin(v140);
  uint64_t v136 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v155 = (uint64_t)&v125 - v12;
  uint64_t v13 = sub_100029F90(&qword_10017F630);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100029F90(&qword_10017F638);
  __chkstk_darwin(v17 - 8);
  long long v19 = (char *)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100029F90(&qword_10017F640);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100029F90(&qword_10017F578);
  uint64_t v130 = *(void *)(v23 - 8);
  uint64_t v131 = v23;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_100029F90(&qword_10017F580);
  __chkstk_darwin(v128);
  uint64_t v27 = (char *)&v125 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = sub_100029F90(&qword_10017F588);
  __chkstk_darwin(v129);
  uint64_t v29 = (char *)&v125 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_100029F90(&qword_10017F648);
  __chkstk_darwin(v139);
  uint64_t v138 = (uint64_t)&v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100029F90(&qword_10017F590);
  __chkstk_darwin(v31 - 8);
  uint64_t v150 = (uint64_t)&v125 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_100029F90(&qword_10017F650);
  uint64_t v33 = __chkstk_darwin(v149);
  uint64_t v154 = (uint64_t)&v125 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v153 = (uint64_t)&v125 - v35;
  if (qword_10017B608 != -1) {
    swift_once();
  }
  uint64_t v132 = qword_10017F4A0;
  LocalizedStringKey.init(stringLiteral:)();
  Label<>.init(_:systemImage:)();
  sub_10002A8D8(&qword_10017F658, &qword_10017F630);
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v36 = static Font.title3.getter();
  uint64_t KeyPath = swift_getKeyPath();
  sub_10002A580((uint64_t)v19, (uint64_t)v22, &qword_10017F638);
  long long v38 = (uint64_t *)&v22[*(int *)(v20 + 36)];
  uint64_t *v38 = KeyPath;
  v38[1] = v36;
  sub_10002A840((uint64_t)v19, &qword_10017F638);
  sub_1000AAE3C();
  View.bold(_:)();
  sub_10002A840((uint64_t)v22, &qword_10017F640);
  uint64_t v39 = v148;
  uint64_t v40 = sub_1000A68DC();
  uint64_t v41 = swift_getKeyPath();
  uint64_t v43 = v130;
  uint64_t v42 = v131;
  (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v27, v25, v131);
  uint64_t v44 = (uint64_t *)&v27[*(int *)(v128 + 36)];
  *uint64_t v44 = v41;
  v44[1] = v40;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v25, v42);
  uint64_t v45 = swift_getKeyPath();
  sub_10002A580((uint64_t)v27, (uint64_t)v29, &qword_10017F580);
  unint64_t v46 = &v29[*(int *)(v129 + 36)];
  *(void *)unint64_t v46 = v45;
  v46[8] = 1;
  sub_10002A840((uint64_t)v27, &qword_10017F580);
  uint64_t v47 = v151;
  uint64_t v131 = *(int *)(v151 + 36);
  long long v162 = *(_OWORD *)(v39 + v131);
  uint64_t v130 = sub_100029F90(&qword_10017F5D0);
  State.wrappedValue.getter();
  double v48 = (double)v161[0];
  uint64_t v49 = v138;
  sub_10002A580((uint64_t)v29, v138, &qword_10017F588);
  *(double *)(v49 + *(int *)(v139 + 36)) = v48;
  sub_10002A840((uint64_t)v29, &qword_10017F588);
  LocalizedStringKey.init(stringLiteral:)();
  sub_1000AABF0(&qword_10017F670, &qword_10017F648, (void (*)(void))sub_1000AAFBC);
  View.accessibilityHint(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002A840(v49, &qword_10017F648);
  char v50 = static Edge.Set.bottom.getter();
  uint64_t v51 = v47;
  if (qword_10017B600 != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  uint64_t v60 = v150;
  uint64_t v61 = v154;
  sub_10002A580(v150, v154, &qword_10017F590);
  uint64_t v62 = v61 + *(int *)(v149 + 36);
  *(unsigned char *)uint64_t v62 = v50;
  *(void *)(v62 + 8) = v53;
  *(void *)(v62 + 16) = v55;
  *(void *)(v62 + 24) = v57;
  *(void *)(v62 + 32) = v59;
  *(unsigned char *)(v62 + 40) = 0;
  sub_10002A840(v60, &qword_10017F590);
  sub_100036F84(v61, v153, &qword_10017F650);
  uint64_t v63 = v39 + *(int *)(v51 + 32);
  long long v64 = *(_OWORD *)v63;
  uint64_t v65 = *(void *)(v63 + 16);
  long long v162 = v64;
  *(void *)uint64_t v163 = v65;
  uint64_t v139 = sub_100029F90(&qword_10017E850);
  State.wrappedValue.getter();
  uint64_t v66 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v67 = *(void *)(v39 + *(int *)(v51 + 44));
  uint64_t v68 = v39;
  if (qword_10017B5F8 != -1) {
    swift_once();
  }
  uint64_t v69 = qword_10017F490;
  uint64_t v150 = static Color.clear.getter();
  static Color.primary.getter();
  uint64_t v149 = Color.opacity(_:)();
  swift_release();
  uint64_t v138 = static Color.white.getter();
  static Color.primary.getter();
  uint64_t v70 = Color.opacity(_:)();
  swift_release();
  uint64_t v129 = static Color.primary.getter();
  static Color.primary.getter();
  uint64_t v128 = Color.opacity(_:)();
  swift_release();
  long long v162 = *(_OWORD *)(v68 + v131);
  State.wrappedValue.getter();
  double v71 = (double)v161[0];
  uint64_t v72 = v142;
  uint64_t v73 = v152;
  uint64_t v74 = v144;
  (*(void (**)(char *, void, uint64_t))(v142 + 104))(v152, enum case for ColorScheme.light(_:), v144);
  uint64_t v75 = swift_getKeyPath();
  uint64_t v76 = v143;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))((char *)v143 + *(int *)(v141 + 28), v73, v74);
  *uint64_t v76 = v75;
  uint64_t v77 = (uint64_t)v136;
  sub_10002A580((uint64_t)v76, (uint64_t)&v136[*(int *)(v140 + 36)], &qword_10017E148);
  *(void *)uint64_t v77 = v66;
  *(void *)(v77 + 8) = v67;
  *(void *)(v77 + 16) = v69;
  *(void *)(v77 + 24) = 0x4000000000000000;
  *(void *)(v77 + 32) = v69;
  uint64_t v78 = v149;
  *(void *)(v77 + 40) = v150;
  *(void *)(v77 + 48) = v78;
  *(void *)(v77 + 56) = v138;
  *(void *)(v77 + 64) = v70;
  uint64_t v79 = v128;
  *(void *)(v77 + 72) = v129;
  *(void *)(v77 + 80) = v79;
  *(unsigned char *)(v77 + 88) = v145 & 1;
  *(double *)(v77 + 96) = a6;
  *(double *)(v77 + 104) = v71;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10002A840((uint64_t)v76, &qword_10017E148);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v152, v74);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100036F84(v77, v155, &qword_10017F598);
  uint64_t v131 = qword_10017F4A0;
  uint64_t v152 = (char *)static HorizontalAlignment.center.getter();
  uint64_t v80 = v148;
  sub_1000A7FDC(v148, v146, v147, (uint64_t)v207);
  uint64_t v81 = v80 + *(int *)(v151 + 28);
  long long v82 = *(_OWORD *)v81;
  uint64_t v83 = *(void *)(v81 + 16);
  long long v162 = v82;
  *(void *)uint64_t v163 = v83;
  State.wrappedValue.getter();
  uint64_t v84 = *(void *)v80;
  if (*(void *)v80)
  {
    *(_OWORD *)((char *)&v156[5] + 7) = v207[5];
    *(_OWORD *)((char *)&v156[6] + 7) = v207[6];
    *(_OWORD *)((char *)&v156[7] + 7) = v208[0];
    v156[8] = *(_OWORD *)((char *)v208 + 9);
    *(_OWORD *)((char *)&v156[1] + 7) = v207[1];
    *(_OWORD *)((char *)&v156[2] + 7) = v207[2];
    *(_OWORD *)((char *)&v156[3] + 7) = v207[3];
    *(_OWORD *)((char *)&v156[4] + 7) = v207[4];
    uint64_t v129 = v161[1];
    uint64_t v130 = v161[0];
    char v157 = 1;
    *(_OWORD *)((char *)v156 + 7) = v207[0];
    LODWORD(v151) = 1;
    uint64_t v138 = *(void *)(v84 + 16);
    LODWORD(v150) = static MatchedGeometryProperties.position.getter();
    static UnitPoint.top.getter();
    uint64_t v86 = v85;
    uint64_t v126 = v85;
    uint64_t v88 = v87;
    LODWORD(v149) = static Edge.Set.horizontal.getter();
    static ClarityUIMetrics.componentHorizontalPadding.getter();
    EdgeInsets.init(_all:)();
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    uint64_t v94 = v93;
    uint64_t v96 = v95;
    unsigned __int8 v158 = 0;
    LODWORD(v147) = static Edge.Set.vertical.getter();
    static ClarityUIMetrics.componentHorizontalPadding.getter();
    EdgeInsets.init(_all:)();
    uint64_t v98 = v97;
    uint64_t v125 = v97;
    uint64_t v100 = v99;
    uint64_t v127 = v101;
    uint64_t v128 = v102;
    LODWORD(v144) = v158;
    unsigned __int8 v159 = 0;
    uint64_t v103 = static Alignment.center.getter();
    uint64_t v145 = v104;
    uint64_t v146 = v103;
    uint64_t v105 = *(void *)(v80 + 16);
    uint64_t v106 = *(unsigned __int8 *)(v80 + 24);
    int v107 = *(unsigned __int8 *)(v80 + 25);
    sub_100058C38(v105, v106, *(unsigned char *)(v80 + 25));
    uint64_t v143 = (uint64_t *)sub_100061978(v105, v106 | (v107 << 8));
    char v109 = v108;
    sub_100058E98(v105, v106, v107);
    uint64_t v142 = static Color.clarityUIContentBackground.getter();
    uint64_t v141 = static SafeAreaRegions.all.getter();
    LODWORD(v140) = static Edge.Set.all.getter();
    LODWORD(v139) = v159;
    unsigned __int8 v160 = v109 & 1;
    uint64_t v110 = v134;
    sub_1000AA424(v80, v134);
    unint64_t v111 = (*(unsigned __int8 *)(v133 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
    uint64_t v133 = swift_allocObject();
    sub_1000AA48C(v110, v133 + v111);
    LODWORD(v137) = v160;
    sub_1000AA424(v80, v110);
    uint64_t v148 = swift_allocObject();
    sub_1000AA48C(v110, v148 + v111);
    uint64_t v112 = v154;
    sub_10002A580(v153, v154, &qword_10017F650);
    sub_10002A580(v155, v77, &qword_10017F598);
    uint64_t v113 = v135;
    *uint64_t v135 = v132;
    *((unsigned char *)v113 + 8) = 0;
    os_log_type_t v114 = (int *)sub_100029F90(&qword_10017F570);
    sub_10002A580(v112, (uint64_t)v113 + v114[12], &qword_10017F650);
    sub_10002A580(v77, (uint64_t)v113 + v114[16], &qword_10017F598);
    unint64_t v115 = (char *)v113 + v114[20];
    *(void *)unint64_t v115 = v131;
    v115[8] = 0;
    uint64_t v116 = v114[24];
    *(_OWORD *)((char *)&v161[8] + 1) = v156[3];
    *(_OWORD *)((char *)&v161[4] + 1) = v156[1];
    *(_OWORD *)((char *)&v161[6] + 1) = v156[2];
    *(_OWORD *)((char *)&v161[2] + 1) = v156[0];
    *(_OWORD *)((char *)&v161[12] + 1) = v156[5];
    *(_OWORD *)((char *)&v161[14] + 1) = v156[6];
    *(_OWORD *)((char *)&v161[16] + 1) = v156[7];
    *(_OWORD *)((char *)&v161[18] + 1) = v156[8];
    uint64_t v117 = (char *)v113 + v116;
    v161[0] = v152;
    v161[1] = 0;
    LOBYTE(v161[2]) = v151;
    *(_OWORD *)((char *)&v161[10] + 1) = v156[4];
    uint64_t v119 = v129;
    uint64_t v118 = v130;
    v161[21] = v130;
    v161[22] = v129;
    v161[23] = v138;
    LODWORD(v161[24]) = v150;
    v161[25] = v86;
    v161[26] = v88;
    LOBYTE(v161[27]) = 1;
    LOBYTE(v161[28]) = v149;
    v161[29] = v90;
    v161[30] = v92;
    v161[31] = v94;
    v161[32] = v96;
    LOBYTE(v161[33]) = v144;
    LOBYTE(v161[34]) = v147;
    v161[35] = v98;
    v161[36] = v100;
    uint64_t v121 = v127;
    uint64_t v120 = v128;
    v161[37] = v127;
    v161[38] = v128;
    LOBYTE(v161[39]) = v139;
    v161[40] = v143;
    LOBYTE(v161[41]) = v137;
    v161[42] = v142;
    LOWORD(v161[43]) = 256;
    v161[44] = v141;
    LOBYTE(v161[45]) = v140;
    v161[46] = v146;
    v161[47] = v145;
    v161[48] = 0;
    v161[49] = 0;
    uint64_t v122 = v133;
    v161[50] = sub_1000AB134;
    v161[51] = v133;
    uint64_t v123 = v148;
    v161[52] = sub_1000AB150;
    v161[53] = v148;
    v161[54] = 0;
    v161[55] = 0;
    memcpy(v117, v161, 0x1C0uLL);
    sub_1000AB168(v161);
    sub_10002A840(v155, &qword_10017F598);
    sub_10002A840(v153, &qword_10017F650);
    long long v168 = v156[5];
    long long v169 = v156[6];
    long long v170 = v156[7];
    long long v171 = v156[8];
    long long v164 = v156[1];
    long long v165 = v156[2];
    long long v166 = v156[3];
    long long v167 = v156[4];
    long long v162 = (unint64_t)v152;
    v163[0] = v151;
    *(_OWORD *)&v163[1] = v156[0];
    uint64_t v172 = v118;
    uint64_t v173 = v119;
    uint64_t v174 = v138;
    int v175 = v150;
    uint64_t v176 = v126;
    uint64_t v177 = v88;
    char v178 = 1;
    char v179 = v149;
    uint64_t v180 = v90;
    uint64_t v181 = v92;
    uint64_t v182 = v94;
    uint64_t v183 = v96;
    char v184 = v144;
    char v185 = v147;
    uint64_t v186 = v125;
    uint64_t v187 = v100;
    uint64_t v188 = v121;
    uint64_t v189 = v120;
    char v190 = v139;
    int v191 = (char *)v143;
    char v192 = v137;
    uint64_t v193 = v142;
    __int16 v194 = 256;
    uint64_t v195 = v141;
    char v196 = v140;
    uint64_t v197 = v146;
    uint64_t v198 = v145;
    uint64_t v199 = 0;
    uint64_t v200 = 0;
    unsigned __int8 v201 = sub_1000AB134;
    uint64_t v202 = v122;
    unsigned __int8 v203 = sub_1000AB150;
    uint64_t v204 = v123;
    uint64_t v205 = 0;
    uint64_t v206 = 0;
    sub_1000AB264(&v162);
    sub_10002A840(v77, &qword_10017F598);
    return sub_10002A840(v154, &qword_10017F650);
  }
  else
  {
    type metadata accessor for NamespaceWrapper();
    sub_1000AB394(&qword_10017D568, (void (*)(uint64_t))type metadata accessor for NamespaceWrapper);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A7FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v7 = type metadata accessor for LockScreenPasscodeView();
  uint64_t v8 = v7 - 8;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA424(a1, (uint64_t)v11);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = v12 + v10;
  uint64_t v14 = swift_allocObject();
  sub_1000AA48C((uint64_t)v11, v14 + v12);
  uint64_t v35 = static Color.clarityUIButtonBackground.getter();
  uint64_t v34 = static Color.primary.getter();
  uint64_t v15 = a1 + *(int *)(v8 + 40);
  long long v16 = *(_OWORD *)v15;
  uint64_t v17 = *(void *)(v15 + 16);
  long long v37 = v16;
  uint64_t v38 = v17;
  sub_100029F90(&qword_10017E850);
  State.projectedValue.getter();
  uint64_t v18 = v39;
  uint64_t v32 = v41;
  uint64_t v33 = v40;
  uint64_t v31 = v42;
  sub_1000AA424(a1, (uint64_t)v11);
  uint64_t v19 = swift_allocObject();
  sub_1000AA48C((uint64_t)v11, v19 + v12);
  uint64_t v20 = (void *)(v19 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v20 = v36;
  v20[1] = a3;
  swift_retain();
  char v21 = static Edge.Set.vertical.getter();
  if (qword_10017B610 != -1) {
    swift_once();
  }
  uint64_t result = EdgeInsets.init(_all:)();
  uint64_t v23 = v34;
  *(void *)a4 = v35;
  *(void *)(a4 + 8) = v23;
  *(void *)(a4 + 16) = sub_1000AB5AC;
  *(void *)(a4 + 24) = v14;
  uint64_t v24 = v33;
  *(void *)(a4 + 32) = v18;
  *(void *)(a4 + 40) = v24;
  uint64_t v25 = v31;
  *(void *)(a4 + 48) = v32;
  *(void *)(a4 + 56) = v25;
  *(unsigned char *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = sub_1000AB7FC;
  *(void *)(a4 + 80) = v19;
  *(void *)(a4 + 88) = 0x402E000000000000;
  *(unsigned char *)(a4 + 96) = v21;
  *(void *)(a4 + 104) = v26;
  *(void *)(a4 + 112) = v27;
  *(void *)(a4 + 120) = v28;
  *(void *)(a4 + 128) = v29;
  *(unsigned char *)(a4 + 136) = 0;
  return result;
}

uint64_t sub_1000A8234(uint64_t a1)
{
  static Animation.default.getter();
  withAnimation<A>(_:_:)();
  swift_release();
  uint64_t v2 = type metadata accessor for LockScreenPasscodeView();
  return (*(uint64_t (**)(void))(a1 + *(int *)(v2 + 52)))(0);
}

uint64_t sub_1000A82C4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for LockScreenPasscodeView();
  sub_100029F90(&qword_10017E850);
  State.wrappedValue.getter();
  uint64_t v5 = String.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == *(void *)(a1 + *(int *)(v4 + 44)))
  {
    uint64_t v7 = *(uint64_t (**)())(a1 + *(int *)(v4 + 48));
    State.wrappedValue.getter();
    char v8 = v7();
    uint64_t v9 = swift_bridgeObjectRelease();
    if (v8)
    {
      __chkstk_darwin(v9);
      static Animation.default.getter();
      withAnimation<A>(_:_:)();
      return swift_release();
    }
    else
    {
      return a2(v9);
    }
  }
  return result;
}

uint64_t sub_1000A843C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000A84A8(uint64_t a1)
{
  uint64_t v23 = a1;
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v2 = (char *)&v22 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LockScreenPasscodeView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v25 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v22 - v14;
  sub_100046BE0();
  uint64_t v22 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24(v13, v9);
  sub_1000AA424(v23, (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = swift_allocObject();
  sub_1000AA48C((uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16);
  aBlock[4] = sub_1000AB364;
  void aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100033424;
  aBlock[3] = &unk_100161578;
  uint64_t v18 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000AB394((unint64_t *)&qword_10017CB48, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100029F90(&qword_10017CB50);
  sub_10002A8D8(&qword_10017CB58, &qword_10017CB50);
  uint64_t v19 = v26;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v20 = (void *)v22;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v2, v19);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v28);
  return ((uint64_t (*)(char *, uint64_t))v24)(v15, v25);
}

uint64_t sub_1000A88F4()
{
  return swift_release();
}

uint64_t sub_1000A8960()
{
  return State.wrappedValue.setter();
}

uint64_t sub_1000A89D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v56 = sub_100029F90(&qword_10017F5A0);
  __chkstk_darwin(v56);
  uint64_t v57 = (uint64_t)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v53 = v4;
  __chkstk_darwin(v4);
  uint64_t v51 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100029F90(&qword_10017C218);
  __chkstk_darwin(v49);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Material();
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100029F90(&qword_10017F5B8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100029F90(&qword_10017F5C0);
  __chkstk_darwin(v45);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_100029F90(&qword_10017F5C8);
  __chkstk_darwin(v46);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_100029F90(&qword_10017F5A8);
  uint64_t v18 = __chkstk_darwin(v55);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v50 = (uint64_t)&v44 - v21;
  uint64_t v22 = type metadata accessor for LockScreenPasscodeView();
  uint64_t v54 = a1;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (*((void *)&v60 + 1) >> 60 == 15)
  {
    static Material.regular.getter();
    char v23 = static Edge.Set.all.getter();
    uint64_t v25 = v47;
    uint64_t v24 = v48;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v7, v10, v48);
    v7[*(int *)(v49 + 36)] = v23;
    sub_10002A580((uint64_t)v7, (uint64_t)v13, &qword_10017C218);
    sub_10002A840((uint64_t)v7, &qword_10017C218);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v24);
    uint64_t v26 = static SafeAreaRegions.all.getter();
    LOBYTE(v24) = static Edge.Set.all.getter();
    sub_10002A580((uint64_t)v13, (uint64_t)v15, &qword_10017F5B8);
    uint64_t v27 = &v15[*(int *)(v45 + 36)];
    *(void *)uint64_t v27 = v26;
    v27[8] = v24;
    sub_10002A840((uint64_t)v13, &qword_10017F5B8);
    long long v60 = *(_OWORD *)(v54 + *(int *)(v22 + 36));
    sub_100029F90(&qword_10017F5D0);
    State.wrappedValue.getter();
    double v28 = (double)v59;
    sub_10002A580((uint64_t)v15, (uint64_t)v17, &qword_10017F5C0);
    *(double *)&v17[*(int *)(v46 + 36)] = v28;
    sub_10002A840((uint64_t)v15, &qword_10017F5C0);
    uint64_t v30 = v51;
    uint64_t v29 = v52;
    uint64_t v31 = v53;
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for ColorScheme.light(_:), v53);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v33 = (uint64_t *)&v20[*(int *)(v55 + 36)];
    uint64_t v34 = sub_100029F90(&qword_10017E148);
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))((char *)v33 + *(int *)(v34 + 28), v30, v31);
    uint64_t *v33 = KeyPath;
    sub_10002A580((uint64_t)v17, (uint64_t)v20, &qword_10017F5C8);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
    sub_10002A840((uint64_t)v17, &qword_10017F5C8);
    uint64_t v35 = v50;
    sub_100036F84((uint64_t)v20, v50, &qword_10017F5A8);
    sub_10002A580(v35, v57, &qword_10017F5A8);
    swift_storeEnumTagMultiPayload();
    sub_100029F90(&qword_10017F5D8);
    sub_1000AAAF4();
    sub_1000AABF0(&qword_10017F610, &qword_10017F5D8, (void (*)(void))sub_1000AAD60);
    _ConditionalContent<>.init(storage:)();
    return sub_10002A840(v35, &qword_10017F5A8);
  }
  else
  {
    uint64_t v37 = v54;
    uint64_t v38 = v57;
    sub_100062CE0(v60, *((unint64_t *)&v60 + 1));
    if (qword_10017B620 != -1) {
      swift_once();
    }
    type metadata accessor for LockScreenWallpaperMetadataProvider();
    sub_1000AB394((unint64_t *)&qword_10017D4F8, (void (*)(uint64_t))type metadata accessor for LockScreenWallpaperMetadataProvider);
    swift_retain();
    uint64_t v39 = ObservedObject.init(wrappedValue:)();
    uint64_t v41 = v40;
    if (qword_10017B618 != -1) {
      swift_once();
    }
    uint64_t v42 = qword_10017F4B0;
    long long v60 = *(_OWORD *)(v37 + *(int *)(v22 + 36));
    sub_100029F90(&qword_10017F5D0);
    State.wrappedValue.getter();
    double v43 = (double)v59;
    *(void *)uint64_t v38 = v39;
    *(void *)(v38 + 8) = v41;
    *(void *)(v38 + 16) = v42;
    *(unsigned char *)(v38 + 24) = 1;
    *(double *)(v38 + 32) = v43;
    swift_storeEnumTagMultiPayload();
    sub_100029F90(&qword_10017F5D8);
    sub_1000AAAF4();
    sub_1000AABF0(&qword_10017F610, &qword_10017F5D8, (void (*)(void))sub_1000AAD60);
    return _ConditionalContent<>.init(storage:)();
  }
}

double sub_1000A91BC@<D0>(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  if (a2)
  {
    static ClarityUIMetrics.fallbackDisplayCornerRadius.getter();
    double v13 = v17;
LABEL_7:
    static ClarityUIMetrics.fallbackDisplayCornerRadius.getter();
    a1 = v18;
    goto LABEL_8;
  }
  static ClarityUIMetrics.minimumDisplayCornerRadius.getter();
  double v13 = a1;
  if (v14 > a1)
  {
    static ClarityUIMetrics.fallbackDisplayCornerRadius.getter();
    double v13 = v15;
  }
  static ClarityUIMetrics.minimumDisplayCornerRadius.getter();
  if (v16 > a1) {
    goto LABEL_7;
  }
LABEL_8:
  id v19 = objc_msgSend(self, "bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:", 3, a4, a5, a6, a7, v13, a1);
  id v20 = [v19 CGPath];

  Path.init(_:)();
  double result = *(double *)&v22;
  *(_OWORD *)a3 = v22;
  *(_OWORD *)(a3 + 16) = v23;
  *(unsigned char *)(a3 + 32) = v24;
  return result;
}

double sub_1000A92D0@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  sub_1000A91BC(*(double *)v5, *(unsigned char *)(v5 + 8), (uint64_t)v9, a2, a3, a4, a5);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

uint64_t sub_1000A931C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ShapeRole.fill(_:);
  uint64_t v3 = type metadata accessor for ShapeRole();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_1000A9394()
{
  return Shape.sizeThatFits(_:)();
}

void (*sub_1000A93AC(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_1000A941C;
}

void sub_1000A941C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_1000A9468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000ABAE4();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000A94CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000ABAE4();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000A9530(uint64_t a1)
{
  unint64_t v2 = sub_1000ABAE4();

  return Shape.body.getter(a1, v2);
}

uint64_t sub_1000A957C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayCornerRadius.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000A95B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayCornerRadius.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000A95E4()
{
  return EnvironmentValues.displayCornerRadius.setter();
}

uint64_t sub_1000A9614()
{
  return EnvironmentValues.displayCornerRadius.setter();
}

uint64_t type metadata accessor for LockScreenPasscodeView()
{
  uint64_t result = qword_10017F510;
  if (!qword_10017F510) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_1000A9698(void *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    char v9 = *((unsigned char *)a2 + 25);
    uint64_t v10 = *((unsigned __int8 *)a2 + 24);
    swift_retain();
    sub_100058C38(v8, v10, v9);
    v7[2] = v8;
    *((unsigned char *)v7 + 24) = v10;
    *((unsigned char *)v7 + 25) = v9;
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)((char *)v7 + v11);
    double v13 = (uint64_t *)((char *)a2 + v11);
    sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    double v17 = (void *)((char *)v7 + v15);
    double v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *double v17 = *v18;
    v17[1] = v19;
    void v17[2] = v18[2];
    id v20 = (void *)((char *)v7 + v16);
    uint64_t v21 = (uint64_t *)((char *)a2 + v16);
    uint64_t v22 = v21[1];
    void *v20 = *v21;
    v20[1] = v22;
    v20[2] = v21[2];
    uint64_t v23 = a3[9];
    uint64_t v24 = a3[10];
    uint64_t v25 = (void *)((char *)v7 + v23);
    uint64_t v26 = (uint64_t *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    void *v25 = *v26;
    v25[1] = v27;
    double v28 = (void *)((char *)v7 + v24);
    uint64_t v29 = (uint64_t *)((char *)a2 + v24);
    uint64_t v30 = v29[1];
    void *v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = a3[12];
    *(void *)((char *)v7 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    uint64_t v32 = (void *)((char *)v7 + v31);
    uint64_t v33 = (uint64_t *)((char *)a2 + v31);
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = a3[13];
    uint64_t v36 = (void *)((char *)v7 + v35);
    uint64_t v37 = (uint64_t *)((char *)a2 + v35);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t sub_1000A98B8(uint64_t a1, uint64_t a2)
{
  swift_release();
  sub_100058E98(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned char *)(a1 + 25));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1000A99E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 25);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  sub_100058C38(v7, v9, v8);
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 25) = v8;
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  else
  {
    *uint64_t v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)(a1 + v14);
  double v17 = (void *)(a2 + v14);
  uint64_t v18 = v17[1];
  void *v16 = *v17;
  v16[1] = v18;
  void v16[2] = v17[2];
  uint64_t v19 = (void *)(a1 + v15);
  id v20 = (void *)(a2 + v15);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  void v19[2] = v20[2];
  uint64_t v22 = a3[9];
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v22);
  uint64_t v25 = (void *)(a2 + v22);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = (void *)(a1 + v23);
  double v28 = (void *)(a2 + v23);
  uint64_t v29 = v28[1];
  void *v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  uint64_t v34 = a3[13];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  uint64_t v37 = v36[1];
  *uint64_t v35 = *v36;
  v35[1] = v37;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000A9BB8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 25);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 24);
  sub_100058C38(v6, v8, v7);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = v6;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 25) = v7;
  sub_100058E98(v9, v11, v10);
  if (a1 != a2)
  {
    uint64_t v12 = a3[6];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (void *)(a2 + v12);
    sub_10002A840(a1 + v12, &qword_10017B928);
    sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      void *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v16 = a3[7];
  double v17 = (void *)(a1 + v16);
  uint64_t v18 = a2 + v16;
  *double v17 = *(void *)(a2 + v16);
  v17[1] = *(void *)(a2 + v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v17[2] = *(void *)(v18 + 16);
  swift_retain();
  swift_release();
  uint64_t v19 = a3[8];
  id v20 = (void *)(a1 + v19);
  uint64_t v21 = a2 + v19;
  void *v20 = *(void *)(a2 + v19);
  v20[1] = *(void *)(a2 + v19 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20[2] = *(void *)(v21 + 16);
  swift_retain();
  swift_release();
  uint64_t v22 = a3[9];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  void *v23 = *v24;
  v23[1] = v24[1];
  swift_retain();
  swift_release();
  uint64_t v25 = a3[10];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  void *v26 = *v27;
  v26[1] = v27[1];
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  uint64_t v28 = a3[12];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  swift_retain();
  swift_release();
  uint64_t v32 = a3[13];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  uint64_t v35 = v34[1];
  void *v33 = *v34;
  v33[1] = v35;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000A9E28(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v6 = a3[6];
  char v7 = (void *)(a1 + v6);
  unsigned __int8 v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  uint64_t v15 = a1 + v12;
  uint64_t v16 = a2 + v12;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  uint64_t v17 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v18 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_1000A9F84(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v6 = *(unsigned char *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 25);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 25) = v7;
  sub_100058E98(v8, v10, v9);
  if (a1 != a2)
  {
    uint64_t v11 = a3[6];
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (const void *)(a2 + v11);
    sub_10002A840(a1 + v11, &qword_10017B928);
    uint64_t v14 = sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void *)(a2 + v16 + 8);
  *uint64_t v17 = *(void *)(a2 + v16);
  v17[1] = v19;
  swift_bridgeObjectRelease();
  void v17[2] = *(void *)(v18 + 16);
  swift_release();
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = a2 + v20;
  uint64_t v23 = *(void *)(a2 + v20 + 8);
  void *v21 = *(void *)(a2 + v20);
  v21[1] = v23;
  swift_bridgeObjectRelease();
  _OWORD v21[2] = *(void *)(v22 + 16);
  swift_release();
  uint64_t v24 = a3[9];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  void *v25 = v28;
  v25[1] = v27;
  swift_release();
  uint64_t v29 = a3[10];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_release();
  uint64_t v34 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v34) = *(_OWORD *)(a2 + v34);
  swift_release();
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  swift_release();
  return a1;
}

uint64_t sub_1000AA178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AA18C);
}

uint64_t sub_1000AA18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100029F90(&qword_10017D328);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1000AA258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AA26C);
}

uint64_t sub_1000AA26C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100029F90(&qword_10017D328);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

void sub_1000AA334()
{
  sub_1000875F0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000AA408()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AA424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LockScreenPasscodeView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA48C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LockScreenPasscodeView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA4F0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v11 = *(void *)(type metadata accessor for LockScreenPasscodeView() - 8);
  uint64_t v12 = v5 + ((*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));

  return sub_1000A6C18(a1, a2, a3, v12, a4, a5);
}

uint64_t sub_1000AA598()
{
  uint64_t v1 = sub_100029F90(&qword_10017D708);
  uint64_t v20 = *(void *)(*(void *)(v1 - 8) + 64);
  unint64_t v21 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v22 = v0;
  uint64_t v2 = v0 + v21;
  unint64_t v3 = v0 + v21 + *(int *)(sub_100029F90(&qword_10017F568) + 44);
  uint64_t v4 = (int *)sub_100029F90(&qword_10017F570);
  unint64_t v5 = v3 + v4[12];
  uint64_t v6 = sub_100029F90(&qword_10017F578);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  sub_100029F90(&qword_10017F580);
  swift_release();
  swift_release();
  sub_100029F90(&qword_10017F588);
  swift_release();
  unint64_t v7 = v5 + *(int *)(sub_100029F90(&qword_10017F590) + 36);
  uint64_t v8 = type metadata accessor for AccessibilityAttachmentModifier();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  unint64_t v9 = v3 + v4[16];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v10 = v9 + *(int *)(sub_100029F90(&qword_10017F598) + 36);
  swift_release();
  uint64_t v11 = sub_100029F90(&qword_10017E148);
  unint64_t v12 = v10 + *(int *)(v11 + 28);
  uint64_t v13 = type metadata accessor for ColorScheme();
  uint64_t v14 = *(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  v14(v12, v13);
  uint64_t v15 = (void *)(v3 + v4[24]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (v15[48]) {
    swift_release();
  }
  if (v15[50]) {
    swift_release();
  }
  if (v15[52]) {
    swift_release();
  }
  if (v15[54]) {
    swift_release();
  }
  uint64_t v16 = v2 + *(int *)(v1 + 36);
  sub_100029F90(&qword_10017F5A0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
  }
  else
  {
    uint64_t v17 = type metadata accessor for Material();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    uint64_t v18 = v16 + *(int *)(sub_100029F90(&qword_10017F5A8) + 36);
    swift_release();
    v14(v18 + *(int *)(v11 + 28), v13);
  }

  return _swift_deallocObject(v22, v21 + v20);
}

uint64_t sub_1000AA930()
{
  uint64_t v1 = *(void *)(sub_100029F90(&qword_10017D708) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000614F0(v2);
}

uint64_t sub_1000AA9AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000AA9D8()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_1000AAA04()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000AAA28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.colorScheme.setter();
}

unint64_t sub_1000AAAF4()
{
  unint64_t result = qword_10017F5E0;
  if (!qword_10017F5E0)
  {
    sub_10002A694(&qword_10017F5A8);
    sub_1000AABF0(&qword_10017F5E8, &qword_10017F5C8, (void (*)(void))sub_1000AABC0);
    sub_10002A8D8(&qword_10017E198, &qword_10017E148);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F5E0);
  }
  return result;
}

uint64_t sub_1000AABC0()
{
  return sub_1000AABF0(&qword_10017F5F0, &qword_10017F5C0, (void (*)(void))sub_1000AAC6C);
}

uint64_t sub_1000AABF0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000AAC6C()
{
  unint64_t result = qword_10017F5F8;
  if (!qword_10017F5F8)
  {
    sub_10002A694(&qword_10017F5B8);
    sub_1000AAD0C();
    sub_10002A8D8(&qword_10017F608, &qword_10017C218);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F5F8);
  }
  return result;
}

unint64_t sub_1000AAD0C()
{
  unint64_t result = qword_10017F600;
  if (!qword_10017F600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F600);
  }
  return result;
}

uint64_t sub_1000AAD60()
{
  return sub_1000AABF0(&qword_10017F618, &qword_10017F620, (void (*)(void))sub_1000AAD90);
}

unint64_t sub_1000AAD90()
{
  unint64_t result = qword_10017F628;
  if (!qword_10017F628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F628);
  }
  return result;
}

uint64_t sub_1000AADE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000AAE10()
{
  return EnvironmentValues.font.setter();
}

unint64_t sub_1000AAE3C()
{
  unint64_t result = qword_10017F660;
  if (!qword_10017F660)
  {
    sub_10002A694(&qword_10017F640);
    sub_1000AAEDC();
    sub_10002A8D8(&qword_10017DCE8, &qword_10017DCF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F660);
  }
  return result;
}

unint64_t sub_1000AAEDC()
{
  unint64_t result = qword_10017F668;
  if (!qword_10017F668)
  {
    sub_10002A694(&qword_10017F638);
    sub_10002A8D8(&qword_10017F658, &qword_10017F630);
    sub_1000AB394((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F668);
  }
  return result;
}

unint64_t sub_1000AAFBC()
{
  unint64_t result = qword_10017F678;
  if (!qword_10017F678)
  {
    sub_10002A694(&qword_10017F588);
    sub_1000AB05C();
    sub_10002A8D8(&qword_10017CEF8, &qword_10017CF00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F678);
  }
  return result;
}

unint64_t sub_1000AB05C()
{
  unint64_t result = qword_10017F680;
  if (!qword_10017F680)
  {
    sub_10002A694(&qword_10017F580);
    sub_10002A694(&qword_10017F640);
    sub_1000AAE3C();
    swift_getOpaqueTypeConformance2();
    sub_10002A8D8(&qword_10017D258, &qword_10017D240);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F680);
  }
  return result;
}

uint64_t sub_1000AB134()
{
  return sub_1000AB5C4((uint64_t (*)(uint64_t))sub_1000A843C);
}

uint64_t sub_1000AB150()
{
  return sub_1000AB5C4(sub_1000A84A8);
}

void *sub_1000AB168(void *a1)
{
  uint64_t v2 = a1[48];
  uint64_t v4 = a1[50];
  uint64_t v5 = a1[52];
  uint64_t v6 = a1[54];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100063B00(v2);
  sub_100063B00(v4);
  sub_100063B00(v5);
  sub_100063B00(v6);
  return a1;
}

void *sub_1000AB264(void *a1)
{
  uint64_t v2 = a1[48];
  uint64_t v4 = a1[50];
  uint64_t v6 = a1[54];
  uint64_t v5 = a1[52];
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100074384(v2);
  sub_100074384(v4);
  sub_100074384(v5);
  sub_100074384(v6);
  return a1;
}

uint64_t sub_1000AB364()
{
  return sub_1000AB5C4((uint64_t (*)(uint64_t))sub_1000A88F4);
}

uint64_t sub_1000AB37C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000AB38C()
{
  return swift_release();
}

uint64_t sub_1000AB394(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AB3DC()
{
  return sub_1000A8960();
}

uint64_t sub_1000AB400()
{
  uint64_t v1 = type metadata accessor for LockScreenPasscodeView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  sub_100058E98(*(void *)(v0 + v3 + 16), *(unsigned __int8 *)(v0 + v3 + 24), *(unsigned char *)(v0 + v3 + 25));
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 24);
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v3 + v4);
}

uint64_t sub_1000AB5AC()
{
  return sub_1000AB5C4(sub_1000A8234);
}

uint64_t sub_1000AB5C4(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for LockScreenPasscodeView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_1000AB638()
{
  uint64_t v1 = type metadata accessor for LockScreenPasscodeView();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  sub_100058E98(*(void *)(v0 + v2 + 16), *(unsigned __int8 *)(v0 + v2 + 24), *(unsigned char *)(v0 + v2 + 25));
  unint64_t v4 = v0 + v2 + *(int *)(v1 + 24);
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((v3 + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
}

uint64_t sub_1000AB7FC()
{
  uint64_t v1 = *(void *)(type metadata accessor for LockScreenPasscodeView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000A82C4(v0 + v2, v3);
}

uint64_t sub_1000AB88C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for LockScreenPasscodeView();
  return (*(uint64_t (**)(uint64_t))(v1 + *(int *)(v2 + 52)))(1);
}

uint64_t sub_1000AB8D4()
{
  return sub_1000A8960();
}

uint64_t initializeWithTake for ApplicationSceneSource(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for BarShape(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BarShape(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BarShape()
{
  return &type metadata for BarShape;
}

uint64_t sub_1000AB964()
{
  return sub_10002A8D8(&qword_10017F688, &qword_10017F690);
}

uint64_t sub_1000AB9A0()
{
  return sub_10002A8D8(&qword_10017F698, &qword_10017F6A0);
}

unint64_t sub_1000AB9E0()
{
  unint64_t result = qword_10017F6A8;
  if (!qword_10017F6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F6A8);
  }
  return result;
}

unint64_t sub_1000ABA38()
{
  unint64_t result = qword_10017F6B0;
  if (!qword_10017F6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F6B0);
  }
  return result;
}

unint64_t sub_1000ABA90()
{
  unint64_t result = qword_10017F6B8;
  if (!qword_10017F6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F6B8);
  }
  return result;
}

unint64_t sub_1000ABAE4()
{
  unint64_t result = qword_10017F6C0;
  if (!qword_10017F6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F6C0);
  }
  return result;
}

uint64_t sub_1000ABB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10002A840(a1, (uint64_t *)&unk_10017C500);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void sub_1000ABCC4(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for CGRect(0);
  State.init(wrappedValue:)();
  if (qword_10017B588 != -1) {
    swift_once();
  }
  unint64_t v8 = *(void *)(qword_1001864B0 + OBJC_IVAR____TtC12ClarityBoard18BiometricInterface_devices);
  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_8:
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    self;
    uint64_t v12 = swift_dynamicCastObjCClass();

    if (v12)
    {
      BOOL v13 = 1;
LABEL_13:
      *(_OWORD *)a4 = v16;
      *(_OWORD *)(a4 + 16) = v17;
      *(void *)(a4 + 32) = v18;
      *(unsigned char *)(a4 + 40) = a1 & 1;
      *(void *)(a4 + 48) = a2;
      *(void *)(a4 + 56) = a3;
      *(unsigned char *)(a4 + 64) = v13;
      return;
    }
LABEL_12:
    id v14 = [self currentDevice];
    id v15 = [v14 userInterfaceIdiom];

    BOOL v13 = v15 == (id)1;
    goto LABEL_13;
  }
  if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v10 = *(id *)(v8 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

BOOL sub_1000ABF7C(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 type];
  if (v7 != (id)6) {
    return v7 == (id)6;
  }
  if ([a1 context])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  sub_100036F84((uint64_t)v23, (uint64_t)&v24, &qword_10017B810);
  if (v25)
  {
    sub_100029F90((uint64_t *)&unk_10017F8B0);
    if (swift_dynamicCast())
    {
      unint64_t v8 = v21[0];
      uint64_t v9 = *(void **)(v1 + OBJC_IVAR___CLBStatusBarSceneDelegate_viewController);
      if (v9)
      {
        id v10 = v9;
        sub_1000AC308(v8);
      }
      swift_bridgeObjectRelease();
      return v7 == (id)6;
    }
  }
  else
  {
    sub_10002A840((uint64_t)&v24, &qword_10017B810);
  }
  if ([a1 context])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000767A0(v23, &v24);
    uint64_t v11 = Logger.common.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v11, v3);
    sub_10002A028((uint64_t)&v24, (uint64_t)v23);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)id v14 = 136315138;
      v20[1] = v14 + 4;
      sub_10002A028((uint64_t)v23, (uint64_t)v21);
      v20[2] = (char *)&type metadata for Any + 8;
      uint64_t v15 = String.init<A>(describing:)();
      v21[0] = sub_100050B5C(v15, v16, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000469D4((uint64_t)v23);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unexpected type for update status bar event context: %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1000469D4((uint64_t)v23);
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_1000469D4((uint64_t)&v24);
  }
  else
  {
    long long v17 = *(void **)(v1 + OBJC_IVAR___CLBStatusBarSceneDelegate_viewController);
    if (v17)
    {
      id v18 = v17;
      sub_1000AC308((unint64_t)_swiftEmptyArrayStorage);
    }
  }
  return v7 == (id)6;
}

uint64_t sub_1000AC308(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (void *)swift_getObjectType();
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v68 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v69 = (char *)&v61 - v16;
  uint64_t v17 = sub_100029F90((uint64_t *)&unk_10017DE90);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v71 = (uint64_t)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v70 = (char *)&v61 - v21;
  __chkstk_darwin(v20);
  uint64_t v72 = (uint64_t)&v61 - v22;
  uint64_t v23 = OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_dismissSensorActivityIndicatorTask;
  uint64_t v24 = *(uint64_t *)((char *)v2
                   + OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_dismissSensorActivityIndicatorTask);
  uint64_t v73 = OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_dismissSensorActivityIndicatorTask;
  if (v24)
  {
    swift_retain();
    sub_100029F90(&qword_10017F8C0);
    Task.cancel()();
    swift_release();
    uint64_t v23 = v73;
  }
  *(char **)((char *)v2 + v23) = 0;
  swift_release();
  if (*(char **)((char *)v2 + OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_sensorActivityIndicator))
  {
    uint64_t v74 = swift_allocObject();
    *(unsigned char *)(v74 + 16) = 0;
    if (a1 >> 62)
    {
LABEL_26:
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      if (v25) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v25)
      {
LABEL_6:
        uint64_t v62 = v11;
        uint64_t v63 = ObjectType;
        uint64_t v64 = v13;
        unint64_t v65 = v12;
        uint64_t v66 = v2;
        int v26 = 0;
        unint64_t v27 = 0;
        unint64_t v12 = a1 & 0xC000000000000001;
        uint64_t v11 = (char *)(a1 & 0xFFFFFFFFFFFFFF8);
        uint64_t v2 = &selRef_sharedGuard;
        uint64_t v13 = 1;
LABEL_7:
        int v67 = v26;
        do
        {
          if (v12)
          {
            id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v27 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_25;
            }
            id v28 = *(id *)(a1 + 8 * v27 + 32);
          }
          uint64_t ObjectType = v28;
          unint64_t v29 = v27 + 1;
          if (__OFADD__(v27, 1))
          {
            __break(1u);
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
          id v30 = [v28 dataAccessType];

          if (v30)
          {
            if (v30 == (id)1)
            {
              int v26 = 1;
              ++v27;
              if (v29 != v25) {
                goto LABEL_7;
              }
              swift_bridgeObjectRelease();
              char v31 = 1;
              unint64_t v12 = v65;
              uint64_t v2 = v66;
              uint64_t v13 = v64;
              goto LABEL_30;
            }
          }
          else
          {
            *(unsigned char *)(v74 + 16) = 1;
          }
          ++v27;
        }
        while (v29 != v25);
        swift_bridgeObjectRelease();
        unint64_t v12 = v65;
        uint64_t v2 = v66;
        uint64_t v13 = v64;
        uint64_t ObjectType = v63;
        uint64_t v11 = v62;
        if ((v67 & 1) == 0) {
          goto LABEL_28;
        }
        char v31 = 1;
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
LABEL_28:
    if (*(unsigned char *)(v74 + 16) != 1)
    {
      uint64_t v46 = (char *)v2 + OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_sensorActivityShowDate;
      swift_beginAccess();
      uint64_t v47 = (uint64_t)v46;
      uint64_t v48 = v71;
      sub_10002A580(v47, v71, (uint64_t *)&unk_10017DE90);
      if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v13 + 48))(v48, 1, v12) == 1)
      {
        sub_10002A840(v48, (uint64_t *)&unk_10017DE90);
      }
      else
      {
        uint64_t v49 = (uint64_t)v11;
        uint64_t v50 = ObjectType;
        uint64_t v51 = v69;
        (*(void (**)(char *, uint64_t, unint64_t))(v13 + 32))(v69, v48, v12);
        uint64_t v52 = v68;
        Date.init()();
        Date.timeIntervalSince(_:)();
        double v54 = v53;
        uint64_t v55 = *(void (**)(char *, unint64_t))(v13 + 8);
        v55(v52, v12);
        if (v54 >= 2.0)
        {
          sub_1000AD584();
          v55(v51, v12);
        }
        else
        {
          uint64_t v56 = type metadata accessor for TaskPriority();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v49, 1, 1, v56);
          type metadata accessor for MainActor();
          uint64_t v57 = v2;
          uint64_t v58 = static MainActor.shared.getter();
          uint64_t v59 = swift_allocObject();
          *(void *)(v59 + 16) = v58;
          *(void *)(v59 + 24) = &protocol witness table for MainActor;
          *(double *)(v59 + 32) = v54;
          *(void *)(v59 + 40) = v57;
          *(void *)(v59 + 48) = v50;
          uint64_t v60 = sub_1000ABB38(v49, (uint64_t)&unk_10017F8D0, v59);
          v55(v51, v12);
          *(char **)((char *)v2 + v73) = (char *)v60;
          swift_release();
        }
      }
      return swift_release();
    }
    char v31 = 0;
LABEL_30:
    uint64_t v37 = (uint64_t)v2 + OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_sensorActivityShowDate;
    swift_beginAccess();
    uint64_t v38 = v72;
    sub_10002A580(v37, v72, (uint64_t *)&unk_10017DE90);
    int v39 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v13 + 48))(v38, 1, v12);
    sub_10002A840(v38, (uint64_t *)&unk_10017DE90);
    double v40 = 0.0;
    if (v39 == 1)
    {
      uint64_t v41 = (uint64_t)v70;
      Date.init()();
      (*(void (**)(uint64_t, void, uint64_t, unint64_t))(v13 + 56))(v41, 0, 1, v12);
      swift_beginAccess();
      sub_1000AEB80(v41, v37);
      swift_endAccess();
      double v40 = 0.3;
    }
    uint64_t v42 = self;
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v2;
    *(unsigned char *)(v43 + 24) = v31;
    *(void *)(v43 + 32) = v74;
    aBlock[4] = sub_1000AEC28;
    void aBlock[5] = v43;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100033424;
    aBlock[3] = &unk_1001616E8;
    uint64_t v44 = _Block_copy(aBlock);
    uint64_t v45 = v2;
    swift_retain();
    swift_release();
    [v42 animateWithDuration:v44 animations:v40];
    _Block_release(v44);
    return swift_release();
  }
  uint64_t v32 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v32, v5);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Attempted to update activity indicator before status bar view controller was shown.", v35, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id sub_1000ACC34()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StatusBarSceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for StatusBarSceneDelegate()
{
  return self;
}

void sub_1000ACCE0()
{
  uint64_t v1 = v0;
  v31.receiver = v0;
  v31.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v31, "viewDidLoad");
  type metadata accessor for ActivityIndicatorData(0);
  sub_1000AE9D0();
  swift_retain();
  ObservedObject.init(wrappedValue:)();
  id v2 = objc_allocWithZone((Class)sub_100029F90(&qword_10017F8A8));
  uint64_t v3 = (void *)UIHostingController.init(rootView:)();
  id v4 = [v3 view];
  if (!v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = v4;
  id v6 = [self clearColor];
  [v5 setBackgroundColor:v6];

  id v7 = [v3 view];
  if (!v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v8 = v7;
  [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_sensorActivityIndicator];
  *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_sensorActivityIndicator] = v8;
  id v10 = v8;

  [v1 addChildViewController:v3];
  id v11 = [v1 view];
  if (!v11)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v12 = v11;
  [v11 addSubview:v10];

  sub_100029F90(&qword_10017B7F0);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100113AC0;
  id v14 = [v10 topAnchor];
  id v15 = [v1 view];
  if (!v15)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v16 = v15;
  id v17 = [v15 topAnchor];

  id v18 = [v14 constraintEqualToAnchor:v17];
  *(void *)(v13 + 32) = v18;
  id v19 = [v10 widthAnchor];
  id v20 = [v1 view];
  if (!v20)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v21 = v20;
  id v22 = [v20 widthAnchor];

  id v23 = [v19 constraintEqualToAnchor:v22];
  *(void *)(v13 + 40) = v23;
  id v24 = [v10 centerXAnchor];
  id v25 = [v1 view];
  if (v25)
  {
    int v26 = v25;
    unint64_t v27 = self;
    id v28 = [v26 centerXAnchor];

    id v29 = [v24 constraintEqualToAnchor:v28];
    *(void *)(v13 + 48) = v29;
    specialized Array._endMutation()();
    sub_1000AEA28();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v27 activateConstraints:isa];

    [v3 didMoveToParentViewController:v1];
    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t sub_1000AD104()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000AD1E8(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 24) = a5;
  *(double *)(v5 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v5 + 32) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v5 + 40) = v7;
  *(void *)(v5 + 48) = v6;
  return _swift_task_switch(sub_1000AD284, v7, v6);
}

uint64_t sub_1000AD284(unint64_t a1)
{
  double v2 = 2.0 - *(double *)(v1 + 16);
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= 1.84467441e19)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!is_mul_ok((unint64_t)v2, 0x3B9ACA00uLL))
  {
LABEL_11:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(a1);
  }
  unint64_t v3 = 1000000000 * (unint64_t)v2;
  id v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 56) = v4;
  void *v4 = v1;
  v4[1] = sub_1000AD37C;
  a1 = v3;
  return static Task<>.sleep(nanoseconds:)(a1);
}

uint64_t sub_1000AD37C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 40);
  if (v0) {
    uint64_t v5 = sub_1000AD520;
  }
  else {
    uint64_t v5 = sub_1000AD4B8;
  }
  return _swift_task_switch(v5, v4, v3);
}

uint64_t sub_1000AD4B8()
{
  swift_release();
  sub_1000AD584();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000AD520()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000AD584()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&aBlock[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100029F90((uint64_t *)&unk_10017DE90);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&aBlock[-1] - v8;
  uint64_t v10 = (uint64_t)v0 + OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_sensorActivityShowDate;
  swift_beginAccess();
  sub_10002A580(v10, (uint64_t)v9, (uint64_t *)&unk_10017DE90);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11);
  sub_10002A840((uint64_t)v9, (uint64_t *)&unk_10017DE90);
  if (v13 == 1)
  {
    uint64_t v14 = Logger.common.unsafeMutableAddressor();
    uint64_t v15 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v3, v14, v1);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Attempted to dismiss activity indicator, but it was not showing.", v18, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v3, v1);
  }
  else
  {
    id v20 = self;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v0;
    aBlock[4] = sub_1000AEC88;
    void aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100033424;
    aBlock[3] = &unk_100161738;
    id v22 = _Block_copy(aBlock);
    id v23 = v0;
    swift_release();
    [v20 animateWithDuration:v22 animations:0.3];
    _Block_release(v22);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1, 1, v11);
    swift_beginAccess();
    sub_1000AEB80((uint64_t)v7, v10);
    return swift_endAccess();
  }
}

uint64_t sub_1000AD90C()
{
  return static Published.subscript.setter();
}

id sub_1000AD9C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v4[OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_statusBar] = 0;
  *(void *)&v4[OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_sensorActivityIndicator] = 0;
  uint64_t v8 = &v4[OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_sensorActivityShowDate];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)&v4[OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_dismissSensorActivityIndicatorTask] = 0;
  uint64_t v10 = OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_activityIndicatorData;
  type metadata accessor for ActivityIndicatorData(0);
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v4;
  Published.init(initialValue:)();
  char v17 = 0;
  Published.init(initialValue:)();
  *(void *)&v4[v10] = v11;

  if (a2)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v13 = 0;
  }
  v16.receiver = v12;
  v16.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v16, "initWithNibName:bundle:", v13, a3);

  return v14;
}

id sub_1000ADBB8(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_statusBar] = 0;
  *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_sensorActivityIndicator] = 0;
  uint64_t v4 = &v1[OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_sensorActivityShowDate];
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(void *)&v1[OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_dismissSensorActivityIndicatorTask] = 0;
  uint64_t v6 = OBJC_IVAR____TtC12ClarityBoard23StatusBarViewController_activityIndicatorData;
  type metadata accessor for ActivityIndicatorData(0);
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v1;
  Published.init(initialValue:)();
  char v12 = 0;
  Published.init(initialValue:)();
  *(void *)&v1[v6] = v7;

  v11.receiver = v8;
  v11.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v11, "initWithCoder:", a1);

  return v9;
}

uint64_t sub_1000ADDB8()
{
  return type metadata accessor for StatusBarViewController(0);
}

uint64_t type metadata accessor for StatusBarViewController(uint64_t a1)
{
  return sub_100096388(a1, (uint64_t *)&unk_10017F750);
}

void sub_1000ADDE0()
{
  sub_1000ADE8C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000ADE8C()
{
  if (!qword_10017F760)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017F760);
    }
  }
}

uint64_t sub_1000ADEE4@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v45 = a1;
  uint64_t v44 = sub_100029F90(&qword_10017F8D8);
  __chkstk_darwin(v44);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100029F90((uint64_t *)&unk_10017F8E0);
  __chkstk_darwin(v5 - 8);
  uint64_t v43 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100029F90(&qword_10017CF08);
  __chkstk_darwin(v42);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RoundedRectangle();
  __chkstk_darwin(v9);
  objc_super v11 = (double *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100029F90(&qword_10017F8F0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  char v17 = (char *)&v36 - v16;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v46 == 1)
  {
    uint64_t v18 = static Color.green.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v19 = v46;
    int v41 = v47;
    uint64_t v40 = v48;
    int v39 = v49;
    uint64_t v37 = *((void *)&v50 + 1);
    uint64_t v38 = v50;
    double v20 = a2 * 0.5;
    uint64_t v21 = (char *)v11 + *(int *)(v9 + 20);
    uint64_t v22 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v23 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v21, v22, v23);
    *objc_super v11 = v20;
    v11[1] = v20;
    sub_10005232C((uint64_t)v11, (uint64_t)v8);
    *(_WORD *)&v8[*(int *)(v42 + 36)] = 256;
    sub_10002A580((uint64_t)v8, (uint64_t)&v15[*(int *)(v12 + 36)], &qword_10017CF08);
    *(void *)uint64_t v15 = v18;
    *((void *)v15 + 1) = v19;
    v15[16] = v41;
    *((void *)v15 + 3) = v40;
    unsigned char v15[32] = v39;
    uint64_t v24 = v37;
    *((void *)v15 + 5) = v38;
    *((void *)v15 + 6) = v24;
    swift_retain();
    sub_10002A840((uint64_t)v8, &qword_10017CF08);
    sub_100052390((uint64_t)v11);
    swift_release();
    sub_100036F84((uint64_t)v15, (uint64_t)v17, &qword_10017F8F0);
    sub_10002A580((uint64_t)v17, (uint64_t)v4, &qword_10017F8F0);
    swift_storeEnumTagMultiPayload();
    sub_100029F90(&qword_10017F900);
    sub_1000AF060();
    sub_1000AF100();
    uint64_t v25 = (uint64_t)v43;
    _ConditionalContent<>.init(storage:)();
    sub_10002A840((uint64_t)v17, &qword_10017F8F0);
    uint64_t v26 = sub_100029F90(&qword_10017F8F8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 0, 1, v26);
    return sub_100036F84(v25, v45, (uint64_t *)&unk_10017F8E0);
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    if (v46 == 1)
    {
      uint64_t v28 = static Color.orange.getter();
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      uint64_t v29 = v46;
      char v30 = v47;
      uint64_t v31 = v48;
      char v32 = v49;
      *(void *)uint64_t v4 = v28;
      *((void *)v4 + 1) = v29;
      v4[16] = v30;
      *((void *)v4 + 3) = v31;
      v4[32] = v32;
      *(_OWORD *)(v4 + 40) = v50;
      swift_storeEnumTagMultiPayload();
      sub_100029F90(&qword_10017F900);
      sub_1000AF060();
      sub_1000AF100();
      uint64_t v33 = v45;
      _ConditionalContent<>.init(storage:)();
      uint64_t v34 = sub_100029F90(&qword_10017F8F8);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 0, 1, v34);
    }
    else
    {
      uint64_t v35 = sub_100029F90(&qword_10017F8F8);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v45, 1, 1, v35);
    }
  }
}

uint64_t sub_1000AE4D4()
{
  return sub_1000AE60C();
}

double sub_1000AE4E8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v6[2] = v4;
  v6[3] = v3;
  void v6[4] = v5;
  swift_retain();
  sub_1000ABCC4(0, (uint64_t)sub_1000AEFD4, (uint64_t)v6, (uint64_t)&v15);
  long long v14 = v15;
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  uint64_t v9 = v18;
  LOBYTE(v4) = v19;
  char v10 = v21;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = 1;
  *(_OWORD *)a1 = v14;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v4;
  double result = *(double *)&v20;
  *(_OWORD *)(a1 + 48) = v20;
  *(unsigned char *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = KeyPath;
  *(void *)(a1 + 80) = sub_1000AF048;
  *(void *)(a1 + 88) = v12;
  return result;
}

uint64_t sub_1000AE5F8()
{
  return sub_1000AE60C();
}

uint64_t sub_1000AE60C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000AE678()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12ClarityBoard21ActivityIndicatorData__isUsingCamera;
  uint64_t v2 = sub_100029F90(&qword_10017C038);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC12ClarityBoard21ActivityIndicatorData__isUsingMic, v2);
  uint64_t v4 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v5 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v4, v5);
}

uint64_t sub_1000AE74C()
{
  return type metadata accessor for ActivityIndicatorData(0);
}

uint64_t type metadata accessor for ActivityIndicatorData(uint64_t a1)
{
  return sub_100096388(a1, qword_10017F7A0);
}

void sub_1000AE774()
{
  sub_100034468();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1000AE804@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ActivityIndicatorData(0);
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000AE844@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000AE8C0@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000AE844(a1);
}

uint64_t sub_1000AE8E8()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000AE958()
{
  return sub_1000AE8E8();
}

uint64_t sub_1000AE980@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000AE844(a1);
}

uint64_t sub_1000AE9A8()
{
  return sub_1000AE8E8();
}

unint64_t sub_1000AE9D0()
{
  unint64_t result = qword_10017F8A0;
  if (!qword_10017F8A0)
  {
    type metadata accessor for ActivityIndicatorData(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F8A0);
  }
  return result;
}

unint64_t sub_1000AEA28()
{
  unint64_t result = qword_10017B7F8;
  if (!qword_10017B7F8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10017B7F8);
  }
  return result;
}

uint64_t sub_1000AEA68()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000AEA78()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56);
}

uint64_t sub_1000AEAB8(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  double v6 = v1[4];
  uint64_t v7 = *((void *)v1 + 5);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10003CCE0;
  return sub_1000AD1E8(v6, a1, v4, v5, v7);
}

uint64_t sub_1000AEB80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90((uint64_t *)&unk_10017DE90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AEBE8()
{
  swift_release();

  return _swift_deallocObject(v0, 40);
}

uint64_t sub_1000AEC28()
{
  return sub_1000AD104();
}

uint64_t sub_1000AEC38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000AEC48()
{
  return swift_release();
}

uint64_t sub_1000AEC50()
{
  return _swift_deallocObject(v0, 24);
}

uint64_t sub_1000AEC88()
{
  return sub_1000AD90C();
}

uint64_t sub_1000AEC90@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000AECC0()
{
  return EnvironmentValues.isEnabled.setter();
}

unsigned char *sub_1000AECE8(unsigned char *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

void sub_1000AECFC()
{
  self;
  id v1 = [objc_allocWithZone((Class)CLBSecureWindow) initWithWindowScene:swift_dynamicCastObjCClassUnconditional()];
  type metadata accessor for StatusBarViewController(0);
  id v2 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  [v1 setRootViewController:v2];
  [v1 makeKeyAndVisible];
  char v3 = *(void **)(v0 + OBJC_IVAR___CLBStatusBarSceneDelegate_window);
  *(void *)(v0 + OBJC_IVAR___CLBStatusBarSceneDelegate_window) = v1;
  id v4 = v1;

  id v5 = *(id *)(v0 + OBJC_IVAR___CLBStatusBarSceneDelegate_viewController);
  *(void *)(v0 + OBJC_IVAR___CLBStatusBarSceneDelegate_viewController) = v2;
}

void *sub_1000AEE04(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

void *assignWithCopy for SafeIndicatorView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

__n128 initializeWithTake for SafeIndicatorView(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for SafeIndicatorView(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for SafeIndicatorView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SafeIndicatorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SafeIndicatorView()
{
  return &type metadata for SafeIndicatorView;
}

uint64_t sub_1000AEF80()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000AEF9C()
{
  swift_release();

  return _swift_deallocObject(v0, 40);
}

uint64_t sub_1000AEFD4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ADEE4(a1, *(double *)(v1 + 32));
}

uint64_t sub_1000AEFE0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000AF010()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_1000AF038()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char *sub_1000AF048(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

unint64_t sub_1000AF060()
{
  unint64_t result = qword_10017F908;
  if (!qword_10017F908)
  {
    sub_10002A694(&qword_10017F8F0);
    sub_1000AF100();
    sub_10002A8D8(&qword_10017CF30, &qword_10017CF08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F908);
  }
  return result;
}

unint64_t sub_1000AF100()
{
  unint64_t result = qword_10017F910;
  if (!qword_10017F910)
  {
    sub_10002A694(&qword_10017F900);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F910);
  }
  return result;
}

unint64_t sub_1000AF178()
{
  unint64_t result = qword_10017F920;
  if (!qword_10017F920)
  {
    sub_10002A694(&qword_10017F928);
    sub_10002A8D8(&qword_10017F930, &qword_10017F938);
    sub_10002A8D8(&qword_10017F940, &qword_10017CB10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F920);
  }
  return result;
}

uint64_t sub_1000AF244()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

Swift::Int sub_1000AF2B8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 - 2);
  return Hasher._finalize()();
}

void sub_1000AF300()
{
  Hasher._combine(_:)(*v0 - 2);
}

Swift::Int sub_1000AF330()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 - 2);
  return Hasher._finalize()();
}

uint64_t sub_1000AF374@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000AFCB8(*a1);
  *a2 = result;
  return result;
}

void sub_1000AF3A0(void *a1@<X8>)
{
  *a1 = *v1 - 2;
}

BOOL sub_1000AF3B0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (!v2) {
    return 0;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1 != 1;
}

uint64_t sub_1000AF480()
{
  if ((unint64_t)[v0 hotLevel] >= 0x28
    || (unint64_t)[v0 hotLevel] >= 0x1E
    || (unint64_t)[v0 hotLevel] >= 0x14
    || (unint64_t)[v0 coldLevel] >= 0x1E)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v2 = v0;
  }
  else
  {
    [v0 coldLevel];
    swift_getKeyPath();
    swift_getKeyPath();
    id v1 = v0;
  }
  return static Published.subscript.setter();
}

id sub_1000AF7B8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ObservableThermalController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000AF860()
{
  return type metadata accessor for ObservableThermalController();
}

uint64_t type metadata accessor for ObservableThermalController()
{
  uint64_t result = qword_10017F978;
  if (!qword_10017F978) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000AF8B4()
{
  sub_1000AF944();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000AF944()
{
  if (!qword_10017F988)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017F988);
    }
  }
}

uint64_t getEnumTagSinglePayload for ObservableThermalController.ThermalLevel(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ObservableThermalController.ThermalLevel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AFAF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservableThermalController.ThermalLevel()
{
  return &type metadata for ObservableThermalController.ThermalLevel;
}

unint64_t sub_1000AFB34()
{
  unint64_t result = qword_10017F990;
  if (!qword_10017F990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F990);
  }
  return result;
}

uint64_t sub_1000AFB88@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ObservableThermalController();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000AFBC8@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000AFC48(uint64_t a1, void **a2)
{
  int v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return static Published.subscript.setter();
}

uint64_t sub_1000AFCB8(uint64_t a1)
{
  if ((unint64_t)(a1 + 2) >= 6) {
    return 6;
  }
  else {
    return a1 + 2;
  }
}

void *assignWithCopy for LockScreenWallpaper(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for LockScreenWallpaper(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LockScreenWallpaper()
{
  return &type metadata for LockScreenWallpaper;
}

uint64_t sub_1000AFD5C()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1000AFD78@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Image.ResizingMode();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unint64_t v6 = *((void *)&v24 + 1);
  if (*((void *)&v24 + 1) >> 60 == 15) {
    goto LABEL_5;
  }
  uint64_t v7 = v24;
  id v8 = objc_allocWithZone((Class)UIImage);
  sub_100085EA4(v7, v6);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v10 = [v8 initWithData:isa];
  sub_100062CE0(v7, v6);

  if (!v10)
  {
    sub_100062CE0(v7, v6);
LABEL_5:
    uint64_t v14 = static Color.clarityUIContentBackground.getter();
    unsigned __int8 v15 = static Edge.Set.all.getter();
    uint64_t v20 = v14;
    uint64_t v21 = v15;
    int v22 = 0;
    char v23 = 1;
    sub_100029F90(&qword_10017F9A0);
    sub_100029F90(&qword_10017F9A8);
    sub_1000B00D0();
    sub_1000B01E8(&qword_10017F9C8, &qword_10017F9A8);
    _ConditionalContent<>.init(storage:)();
    goto LABEL_6;
  }
  id v11 = v10;
  Image.init(uiImage:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Image.ResizingMode.stretch(_:), v2);
  uint64_t v12 = Image.resizable(capInsets:resizingMode:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  unsigned __int8 v13 = static Edge.Set.all.getter();
  uint64_t v20 = v12;
  uint64_t v21 = 0;
  int v22 = (v13 << 16) | 0x1000101;
  char v23 = 0;
  swift_retain_n();
  sub_100029F90(&qword_10017F9A0);
  sub_100029F90(&qword_10017F9A8);
  sub_1000B00D0();
  sub_1000B01E8(&qword_10017F9C8, &qword_10017F9A8);
  _ConditionalContent<>.init(storage:)();
  sub_100062CE0(v7, v6);
  swift_release_n();

LABEL_6:
  double result = *(double *)&v24;
  int v17 = v25;
  char v18 = v26;
  *(_OWORD *)a1 = v24;
  *(_DWORD *)(a1 + 16) = v17;
  *(unsigned char *)(a1 + 20) = v18;
  return result;
}

double sub_1000B00C0@<D0>(uint64_t a1@<X8>)
{
  return sub_1000AFD78(a1);
}

unint64_t sub_1000B00D0()
{
  unint64_t result = qword_10017F9B0;
  if (!qword_10017F9B0)
  {
    sub_10002A694(&qword_10017F9A0);
    sub_1000B014C();
    sub_10002E0C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F9B0);
  }
  return result;
}

unint64_t sub_1000B014C()
{
  unint64_t result = qword_10017F9B8;
  if (!qword_10017F9B8)
  {
    sub_10002A694(&qword_10017F9C0);
    sub_1000B01E8((unint64_t *)&qword_10017BC48, &qword_10017BC50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F9B8);
  }
  return result;
}

uint64_t sub_1000B01E8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B025C()
{
  unint64_t result = qword_10017F9D0;
  if (!qword_10017F9D0)
  {
    sub_10002A694(&qword_10017F9D8);
    sub_1000B00D0();
    sub_1000B01E8(&qword_10017F9C8, &qword_10017F9A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017F9D0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ApplicationSceneSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for ApplicationSceneSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t assignWithTake for ApplicationSceneSource(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for ApplicationSceneSource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ApplicationSceneSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000B0438(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1000B0440(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ApplicationSceneSource()
{
  return &type metadata for ApplicationSceneSource;
}

uint64_t sub_1000B045C(uint64_t a1, uint64_t a2)
{
  return sub_1000B0478(*(void **)a1, *(unsigned char *)(a1 + 8), *(void **)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_1000B0478(void *a1, char a2, void *a3, char a4)
{
  if (a2)
  {
    if ((a4 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    sub_100032794();
    id v7 = a1;
    id v8 = a3;
    char v6 = static NSObject.== infix(_:_:)();

    return v6 & 1;
  }
  if ((a4 & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  char v6 = 0;
  return v6 & 1;
}

id sub_1000B06A0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AlertOverlaySceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AlertOverlaySceneDelegate()
{
  return self;
}

ValueMetadata *type metadata accessor for ThermalWarningView()
{
  return &type metadata for ThermalWarningView;
}

uint64_t sub_1000B0720()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B073C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100029F90(&qword_10017FA10);
  __chkstk_darwin(v2 - 8);
  int v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100029F90(&qword_10017FA18);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  id v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)int v4 = static HorizontalAlignment.center.getter();
  *((void *)v4 + 1) = 0;
  v4[16] = 1;
  uint64_t v9 = sub_100029F90(&qword_10017FA20);
  sub_1000B08C8(&v4[*(int *)(v9 + 44)]);
  uint64_t KeyPath = swift_getKeyPath();
  sub_10002A580((uint64_t)v4, (uint64_t)v8, &qword_10017FA10);
  id v11 = &v8[*(int *)(v6 + 44)];
  *(void *)id v11 = KeyPath;
  _DWORD v11[8] = 1;
  sub_10002A840((uint64_t)v4, &qword_10017FA10);
  uint64_t v12 = static Color.clarityUIContentBackground.getter();
  LOBYTE(v4) = static Edge.Set.all.getter();
  sub_10002A580((uint64_t)v8, a1, &qword_10017FA18);
  uint64_t v13 = a1 + *(int *)(sub_100029F90(&qword_10017FA28) + 36);
  *(void *)uint64_t v13 = v12;
  *(unsigned char *)(v13 + 8) = (_BYTE)v4;
  return sub_10002A840((uint64_t)v8, &qword_10017FA18);
}

uint64_t sub_1000B08C8@<X0>(void *a1@<X8>)
{
  uint64_t v52 = a1;
  uint64_t v1 = type metadata accessor for AccessibilityTraits();
  uint64_t v49 = *(void *)(v1 - 8);
  uint64_t v50 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100029F90(&qword_10017E868);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v48 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v53 = (uint64_t)&v46 - v7;
  uint64_t v8 = sub_100029F90(&qword_10017FA30);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v51 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v46 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t)&v46 - v14;
  uint64_t v47 = (uint64_t)&v46 - v14;
  uint64_t v16 = Image.init(systemName:)();
  uint64_t v17 = static Font.title.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v54 = v16;
  uint64_t v55 = KeyPath;
  uint64_t v56 = v17;
  sub_100029F90(&qword_10017DCE0);
  sub_10006EC14();
  View.accessibilityHidden(_:)();
  swift_release();
  swift_release();
  swift_release();
  sub_100036F84((uint64_t)v13, v15, &qword_10017FA30);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  static Font.title.getter();
  uint64_t v24 = Text.font(_:)();
  uint64_t v26 = v25;
  LOBYTE(v15) = v27;
  uint64_t v29 = v28;
  swift_release();
  sub_100041A08(v19, v21, v23);
  swift_bridgeObjectRelease();
  uint64_t v54 = v24;
  uint64_t v55 = v26;
  LOBYTE(v56) = v15 & 1;
  uint64_t v57 = v29;
  static AccessibilityTraits.isHeader.getter();
  uint64_t v30 = (uint64_t)v48;
  View.accessibilityAddTraits(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v3, v50);
  sub_100041A08(v54, v55, v56);
  swift_bridgeObjectRelease();
  uint64_t v31 = v53;
  sub_100036F84(v30, v53, &qword_10017E868);
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v32 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  LOBYTE(v19) = v37 & 1;
  uint64_t v38 = v47;
  uint64_t v39 = v51;
  sub_10002A580(v47, v51, &qword_10017FA30);
  sub_10002A580(v31, v30, &qword_10017E868);
  uint64_t v40 = v52;
  *uint64_t v52 = 0;
  *((unsigned char *)v40 + 8) = 1;
  int v41 = v40;
  uint64_t v42 = (int *)sub_100029F90(&qword_10017FA38);
  sub_10002A580(v39, (uint64_t)v41 + v42[12], &qword_10017FA30);
  sub_10002A580(v30, (uint64_t)v41 + v42[16], &qword_10017E868);
  uint64_t v43 = (uint64_t)v41 + v42[20];
  *(void *)uint64_t v43 = v32;
  *(void *)(v43 + 8) = v34;
  *(unsigned char *)(v43 + 16) = v19;
  *(void *)(v43 + 24) = v36;
  uint64_t v44 = (uint64_t)v41 + v42[24];
  *(void *)uint64_t v44 = 0;
  *(unsigned char *)(v44 + 8) = 1;
  sub_100041B00(v32, v34, v19);
  swift_bridgeObjectRetain();
  sub_10002A840(v53, &qword_10017E868);
  sub_10002A840(v38, &qword_10017FA30);
  sub_100041A08(v32, v34, v19);
  swift_bridgeObjectRelease();
  sub_10002A840(v30, &qword_10017E868);
  return sub_10002A840(v39, &qword_10017FA30);
}

uint64_t sub_1000B0DF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B073C(a1);
}

unsigned char *_s12ClarityBoard18ThermalWarningViewV11WarningTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B0ED4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ThermalWarningView.WarningType()
{
  return &type metadata for ThermalWarningView.WarningType;
}

unint64_t sub_1000B0F10()
{
  unint64_t result = qword_10017FA40;
  if (!qword_10017FA40)
  {
    sub_10002A694(&qword_10017FA28);
    sub_1000B0FB0();
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FA40);
  }
  return result;
}

unint64_t sub_1000B0FB0()
{
  unint64_t result = qword_10017FA48;
  if (!qword_10017FA48)
  {
    sub_10002A694(&qword_10017FA18);
    sub_10002A8D8(&qword_10017FA50, &qword_10017FA10);
    sub_10002A8D8(&qword_10017CEF8, &qword_10017CF00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FA48);
  }
  return result;
}

unint64_t sub_1000B1078()
{
  unint64_t result = qword_10017FA58;
  if (!qword_10017FA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FA58);
  }
  return result;
}

double sub_1000B10CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v21 - v11;
  if (qword_10017B580 != -1) {
    swift_once();
  }
  type metadata accessor for UserPreferences();
  sub_1000B2498(&qword_10017C270, (void (*)(uint64_t))type metadata accessor for UserPreferences);
  swift_retain();
  *a3 = ObservedObject.init(wrappedValue:)();
  a3[1] = v13;
  uint64_t v14 = (int *)type metadata accessor for Home();
  Date.init()();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  State.init(wrappedValue:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  uint64_t v15 = (char *)a3 + v14[7];
  v21[0] = 0;
  v21[1] = 0;
  sub_100029F90(&qword_10017FA60);
  State.init(wrappedValue:)();
  uint64_t v16 = v23;
  *(_OWORD *)uint64_t v15 = v22;
  *((void *)v15 + 2) = v16;
  uint64_t v17 = v14[8];
  v21[0] = 0;
  sub_100029F90(&qword_10017FA68);
  State.init(wrappedValue:)();
  double result = *(double *)&v22;
  *(_OWORD *)((char *)a3 + v17) = v22;
  uint64_t v19 = (char *)a3 + v14[9];
  *(void *)uint64_t v19 = sub_1000B13A0;
  *((void *)v19 + 1) = 0;
  v19[16] = 0;
  *(uint64_t *)((char *)a3 + v14[10]) = 0x4049000000000000;
  *(uint64_t *)((char *)a3 + v14[11]) = 0x4039000000000000;
  uint64_t v20 = (uint64_t *)((char *)a3 + v14[6]);
  void *v20 = a1;
  v20[1] = a2;
  return result;
}

uint64_t type metadata accessor for Home()
{
  uint64_t result = qword_10017FAC8;
  if (!qword_10017FAC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B13A0()
{
  if (qword_10017B5E8 != -1) {
    swift_once();
  }

  return swift_retain();
}

void *sub_1000B13FC(void *a1, void *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    void *v4 = *a2;
    unsigned int v4 = (void *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = sub_100029F90(&qword_10017D320);
    *(void *)&v9[*(int *)(v13 + 28)] = *(void *)&v10[*(int *)(v13 + 28)];
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (void *)((char *)v4 + v14);
    uint64_t v17 = (void *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (void *)((char *)v4 + v15);
    uint64_t v20 = (void *)((char *)a2 + v15);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    void v19[2] = v20[2];
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = (void *)((char *)v4 + v22);
    uint64_t v25 = (void *)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    char v27 = (char *)v4 + v23;
    uint64_t v28 = *(void *)((char *)a2 + v23);
    uint64_t v32 = *(void *)((char *)a2 + v23 + 8);
    char v33 = *((unsigned char *)a2 + v23 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10003A618();
    *(void *)char v27 = v28;
    *((void *)v27 + 1) = v32;
    v27[16] = v33;
    uint64_t v29 = a3[11];
    *(void *)((char *)v4 + a3[10]) = *(void *)((char *)a2 + a3[10]);
    *(void *)((char *)v4 + v29) = *(void *)((char *)a2 + v29);
  }
  return v4;
}

uint64_t sub_1000B15CC(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_100029F90(&qword_10017D320);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return sub_10003A744();
}

void *sub_1000B16B8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  v11(v8, v9, v10);
  uint64_t v12 = sub_100029F90(&qword_10017D320);
  *(void *)&v8[*(int *)(v12 + 28)] = *(void *)&v9[*(int *)(v12 + 28)];
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v13);
  uint64_t v16 = (void *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (void *)((char *)a1 + v14);
  uint64_t v19 = (void *)((char *)a2 + v14);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  _OWORD v18[2] = v19[2];
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = (void *)((char *)a1 + v21);
  uint64_t v24 = (void *)((char *)a2 + v21);
  uint64_t v25 = v24[1];
  void *v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = (char *)a1 + v22;
  uint64_t v27 = *(void *)((char *)a2 + v22);
  uint64_t v30 = *(void *)((char *)a2 + v22 + 8);
  char v31 = *((unsigned char *)a2 + v22 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10003A618();
  *(void *)uint64_t v26 = v27;
  *((void *)v26 + 1) = v30;
  v26[16] = v31;
  uint64_t v28 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v28) = *(void *)((char *)a2 + v28);
  return a1;
}

void *sub_1000B1838(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = sub_100029F90(&qword_10017D320);
  *(void *)&v7[*(int *)(v10 + 28)] = *(void *)&v8[*(int *)(v10 + 28)];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  void *v16 = *(void *)((char *)a2 + v15);
  v16[1] = *(void *)((char *)a2 + v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v16[2] = *((void *)v17 + 2);
  swift_retain();
  swift_release();
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_retain();
  swift_release();
  uint64_t v21 = a3[9];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *(void *)v23;
  uint64_t v25 = *((void *)v23 + 1);
  LOBYTE(v20) = v23[16];
  sub_10003A618();
  *(void *)uint64_t v22 = v24;
  *((void *)v22 + 1) = v25;
  v22[16] = (char)v20;
  sub_10003A744();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  return a1;
}

_OWORD *sub_1000B1A00(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = sub_100029F90(&qword_10017D320);
  *(void *)&v7[*(int *)(v10 + 28)] = *(void *)&v8[*(int *)(v10 + 28)];
  uint64_t v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *((void *)v12 + 2) = *((void *)v13 + 2);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  uint64_t v14 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  v15[16] = v16[16];
  uint64_t v17 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  return a1;
}

void *sub_1000B1B00(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_release();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = sub_100029F90(&qword_10017D320);
  *(void *)&v8[*(int *)(v11 + 28)] = *(void *)&v9[*(int *)(v11 + 28)];
  swift_release();
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  swift_release();
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)((char *)a2 + v12 + 8);
  void *v13 = *(void *)((char *)a2 + v12);
  v13[1] = v15;
  swift_bridgeObjectRelease();
  void v13[2] = *((void *)v14 + 2);
  swift_release();
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  swift_bridgeObjectRelease();
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_release();
  uint64_t v19 = a3[9];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  char v22 = v21[16];
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  unsigned char v20[16] = v22;
  sub_10003A744();
  uint64_t v23 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);
  return a1;
}

uint64_t sub_1000B1C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B1C74);
}

uint64_t sub_1000B1C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100029F90(&qword_10017D320);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000B1D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B1D3C);
}

uint64_t sub_1000B1D3C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100029F90(&qword_10017D320);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1000B1DE8()
{
  sub_1000B1EBC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000B1EBC()
{
  if (!qword_10017D3A0)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017D3A0);
    }
  }
}

uint64_t sub_1000B1F14()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B1F30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Home();
  type metadata accessor for Applications(0);
  sub_1000B2498(&qword_10017EF10, (void (*)(uint64_t))type metadata accessor for Applications);
  StateObject.wrappedValue.getter();
  unint64_t v4 = (uint64_t *)(v1 + *(int *)(v3 + 24));
  uint64_t v5 = v4[1];
  uint64_t v35 = *v4;
  uint64_t v6 = qword_10017B580;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v7 = ObservedObject.init(wrappedValue:)();
  uint64_t v33 = v8;
  uint64_t v34 = v7;
  type metadata accessor for UserPreferences();
  sub_1000B2498(&qword_10017C270, (void (*)(uint64_t))type metadata accessor for UserPreferences);
  uint64_t v9 = ObservedObject.init(wrappedValue:)();
  uint64_t v31 = v10;
  uint64_t v32 = v9;
  uint64_t v28 = static Color.clarityUIContentBackground.getter();
  char v27 = static Edge.Set.all.getter();
  uint64_t v11 = static Alignment.center.getter();
  uint64_t v29 = v12;
  uint64_t v30 = v11;
  sub_100033980();
  id v13 = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  unsigned int v14 = [v13 batteryMonitoringEnabled];

  if (v14)
  {
    sub_1000ABCC0(v36, 1, sub_1000B220C, 0);
    uint64_t v15 = v36[0];
    uint64_t v16 = v36[1];
    uint64_t v17 = v36[2];
    uint64_t v18 = v36[3];
    uint64_t v19 = v36[4];
    uint64_t v20 = v37;
    long long v26 = v38;
    uint64_t v21 = v39;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t result = swift_allocObject();
    long long v24 = v26;
    *(unsigned char *)(result + 16) = 1;
    uint64_t v25 = sub_10004669C;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t KeyPath = 0;
    uint64_t v25 = 0;
    uint64_t result = 0;
    long long v24 = 0uLL;
  }
  *(void *)a1 = v34;
  *(void *)(a1 + 8) = v33;
  *(void *)(a1 + 16) = v35;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v32;
  *(void *)(a1 + 40) = v31;
  *(void *)(a1 + 48) = v28;
  *(unsigned char *)(a1 + 56) = v27;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = v17;
  *(void *)(a1 + 88) = v18;
  *(void *)(a1 + 96) = v19;
  *(void *)(a1 + 104) = v20;
  *(_OWORD *)(a1 + 112) = v24;
  *(void *)(a1 + 128) = v21;
  *(void *)(a1 + 136) = KeyPath;
  *(void *)(a1 + 144) = v25;
  *(void *)(a1 + 152) = result;
  *(void *)(a1 + 160) = v30;
  *(void *)(a1 + 168) = v29;
  return result;
}

uint64_t sub_1000B220C()
{
  uint64_t v0 = type metadata accessor for AccessibilityChildBehavior();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for BatteryView();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100029F90(&qword_10017FB18);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002AA90((uint64_t)v6);
  static AccessibilityChildBehavior.combine.getter();
  uint64_t v11 = sub_1000B2498(&qword_10017FB20, (void (*)(uint64_t))type metadata accessor for BatteryView);
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_1000B24E0((uint64_t)v6);
  v13[0] = v4;
  v13[1] = v11;
  swift_getOpaqueTypeConformance2();
  View.accessibilityIdentifier(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1000B2488()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000B2498(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B24E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BatteryView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000B2540()
{
  unint64_t result = qword_10017FB28;
  if (!qword_10017FB28)
  {
    sub_10002A694(&qword_10017FB30);
    sub_1000B25E0();
    sub_10002A8D8(&qword_10017FB50, &qword_10017FB58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FB28);
  }
  return result;
}

unint64_t sub_1000B25E0()
{
  unint64_t result = qword_10017FB38;
  if (!qword_10017FB38)
  {
    sub_10002A694(&qword_10017FB40);
    sub_1000B2680();
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FB38);
  }
  return result;
}

unint64_t sub_1000B2680()
{
  unint64_t result = qword_10017FB48;
  if (!qword_10017FB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FB48);
  }
  return result;
}

ValueMetadata *type metadata accessor for BackButtonWidthLayout()
{
  return &type metadata for BackButtonWidthLayout;
}

uint64_t sub_1000B26E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BackButtonSafeAreaInsetModifier();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v7, a3);
  View.modifier<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1000B2898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v18[0] = a6;
  v18[1] = a7;
  uint64_t v13 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for _LayoutRoot();
  __chkstk_darwin(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v7, a3);
  _LayoutRoot.init(_:)();
  _OWORD v18[4] = a3;
  v18[5] = a4;
  v18[6] = a5;
  v18[7] = v18[0];
  v18[8] = a1;
  v18[9] = a2;
  swift_getWitnessTable();
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t sub_1000B2A40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for BackButton();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 36));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t sub_1000B2AD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v22[1] = a2;
  sub_10002A694(&qword_10017D5F0);
  sub_10002A694(&qword_10017FC70);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = sub_1000B50EC();
  uint64_t v6 = *(void *)(a1 + 24);
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  unint64_t v31 = v5;
  uint64_t v32 = v6;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  uint64_t v29 = OpaqueTypeMetadata2;
  uint64_t v30 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  type metadata accessor for InvertColorsOnlyInLightModeView();
  sub_10002A8D8(&qword_10017FC90, &qword_10017D5F0);
  uint64_t v9 = type metadata accessor for _VariadicView.Tree();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v22 - v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v4;
  *(void *)(v16 + 24) = v6;
  uint64_t v24 = v4;
  uint64_t v25 = v6;
  uint64_t v26 = v2;
  sub_1000B2DD4((uint64_t)sub_1000B51BC, (uint64_t)v23, (uint64_t)v13);
  swift_release();
  uint64_t v17 = sub_10002A8D8(&qword_10017D5E8, &qword_10017D5F0);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = v17;
  uint64_t v28 = WitnessTable;
  uint64_t v19 = swift_getWitnessTable();
  sub_100056EB0(v13, v9, v19);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v13, v9);
  sub_100056EB0(v15, v9, v19);
  return ((uint64_t (*)(char *, uint64_t))v20)(v15, v9);
}

uint64_t sub_1000B2DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10002A694(&qword_10017FC70);
  sub_1000B50EC();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeMetadata2();
  swift_getOpaqueTypeConformance2();
  uint64_t v6 = type metadata accessor for InvertColorsOnlyInLightModeView();
  unint64_t v7 = sub_1000B5220();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_1000B2898(a1, a2, (uint64_t)&type metadata for BackButtonWidthLayout, v6, v7, WitnessTable, a3);
}

uint64_t sub_1000B2F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v36[1] = a1;
  uint64_t v46 = a4;
  uint64_t v7 = sub_100029F90(&qword_10017FC88);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  uint64_t v45 = v8;
  __chkstk_darwin(v7);
  int v41 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100029F90(&qword_10017FC70);
  __chkstk_darwin(v10);
  uint64_t v42 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000B50EC();
  uint64_t v47 = v10;
  uint64_t v48 = a2;
  unint64_t v39 = v12;
  uint64_t v40 = v10;
  unint64_t v49 = v12;
  uint64_t v50 = a3;
  unint64_t v13 = v12;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v43 = *(void *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  long long v38 = (char *)v36 - v15;
  uint64_t v47 = v10;
  uint64_t v48 = a2;
  _OWORD v36[2] = a2;
  v36[3] = a3;
  unint64_t v49 = v13;
  uint64_t v50 = a3;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v47 = OpaqueTypeMetadata2;
  uint64_t v48 = OpaqueTypeConformance2;
  uint64_t v17 = OpaqueTypeConformance2;
  uint64_t v37 = OpaqueTypeConformance2;
  swift_getOpaqueTypeMetadata2();
  uint64_t v47 = OpaqueTypeMetadata2;
  uint64_t v48 = v17;
  swift_getOpaqueTypeConformance2();
  uint64_t v18 = type metadata accessor for InvertColorsOnlyInLightModeView();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  char v22 = (char *)v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)v36 - v23;
  v36[0] = *(void *)(a1 + *(int *)(type metadata accessor for BackButton() + 36));
  swift_retain();
  sub_100029F90(&qword_10017FC98);
  uint64_t v25 = sub_10002A694(&qword_10017F630);
  uint64_t v26 = type metadata accessor for MultimodalNavigationBackButtonLabelStyle();
  uint64_t v27 = sub_10002A8D8(&qword_10017F658, &qword_10017F630);
  uint64_t v28 = sub_1000B51C8(&qword_10017B920, (void (*)(uint64_t))&type metadata accessor for MultimodalNavigationBackButtonLabelStyle);
  uint64_t v47 = v25;
  uint64_t v48 = v26;
  unint64_t v49 = v27;
  uint64_t v50 = v28;
  swift_getOpaqueTypeConformance2();
  uint64_t v29 = v41;
  Button.init(action:label:)();
  sub_10002A8D8(&qword_10017FC80, &qword_10017FC88);
  uint64_t v30 = (uint64_t)v42;
  uint64_t v31 = v44;
  View.accessibilityIdentifier(_:)();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v29, v31);
  uint64_t v32 = v38;
  View.buttonStyle<A>(_:)();
  sub_10002A840(v30, &qword_10017FC70);
  sub_1000866F0(OpaqueTypeMetadata2, v37, (uint64_t)v22);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, OpaqueTypeMetadata2);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100056EB0(v22, v18, WitnessTable);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v19 + 8);
  v34(v22, v18);
  sub_100056EB0(v24, v18, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v34)(v24, v18);
}

uint64_t sub_1000B346C()
{
  uint64_t v0 = type metadata accessor for MultimodalNavigationBackButtonLabelStyle();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100029F90(&qword_10017F630);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.init(stringLiteral:)();
  Label<>.init(_:systemImage:)();
  MultimodalNavigationBackButtonLabelStyle.init()();
  sub_10002A8D8(&qword_10017F658, &qword_10017F630);
  sub_1000B51C8(&qword_10017B920, (void (*)(uint64_t))&type metadata accessor for MultimodalNavigationBackButtonLabelStyle);
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

double sub_1000B36B0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_1000B3FD8(a1, a2 & 1, a3, a4 & 1);
}

uint64_t sub_1000B36C8()
{
  uint64_t v0 = sub_100029F90(qword_10017FB68);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v8[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for LayoutSubview();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10007E7A4((uint64_t)v2);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return sub_10002A840((uint64_t)v2, qword_10017FB68);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 32))(v6, v2, v3);
  static UnitPoint.topLeading.getter();
  v8[8] = 0;
  v8[0] = 0;
  LayoutSubview.place(at:anchor:proposal:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000B3898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000B3908(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1000B38D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000B3908(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_1000B3908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

unint64_t sub_1000B3950()
{
  unint64_t result = qword_10017FB60;
  if (!qword_10017FB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FB60);
  }
  return result;
}

uint64_t sub_1000B39A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v26 = a3;
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  uint64_t v4 = *(void *)(a2 + 16);
  type metadata accessor for ModifiedContent();
  uint64_t v34 = *(void *)(a2 + 24);
  uint64_t v5 = v34;
  uint64_t v35 = &protocol witness table for _PaddingLayout;
  uint64_t v24 = &protocol conformance descriptor for <> ModifiedContent<A, B>;
  v22[1] = swift_getWitnessTable();
  void v22[2] = type metadata accessor for _InsetViewModifier();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v22 - v14;
  uint64_t v27 = v4;
  uint64_t v28 = v5;
  uint64_t v29 = v22[3];
  static HorizontalAlignment.center.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.safeAreaInset<A>(edge:alignment:spacing:content:)();
  static SafeAreaRegions.container.getter();
  static Edge.Set.bottom.getter();
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v32 = WitnessTable;
  uint64_t v33 = v16;
  uint64_t v17 = swift_getWitnessTable();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
  uint64_t v30 = v17;
  uint64_t v31 = &protocol witness table for _SafeAreaRegionsIgnoringLayout;
  uint64_t v18 = swift_getWitnessTable();
  sub_100056EB0(v13, v9, v18);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  sub_100056EB0(v15, v9, v18);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v9);
}

uint64_t sub_1000B3D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v14 - v9;
  static ClarityUIMetrics.backButtonPadding.getter();
  View.padding(_:)();
  v14[0] = a3;
  v14[1] = &protocol witness table for _PaddingLayout;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_100056EB0(v8, v4, WitnessTable);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  sub_100056EB0(v10, v4, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, v4);
}

uint64_t sub_1000B3EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void (*)(void))__chkstk_darwin(v9);
  uint64_t v14 = (char *)&v17 - v13;
  v12();
  sub_100056EB0(v11, a4, a6);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, a4);
  sub_100056EB0(v14, a4, a6);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, a4);
}

double sub_1000B3FD8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_100029F90(qword_10017FB68);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for LayoutSubview();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10007E7A4((uint64_t)v9);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10002A840((uint64_t)v9, qword_10017FB68);
    if (a2) {
      return 10.0;
    }
    else {
      return *(double *)&a1;
    }
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v13, v9, v10);
    v25[8] = a2 & 1;
    v25[0] = a4 & 1;
    LayoutSubview.sizeThatFits(_:)();
    double v14 = v15;
    id v16 = [self currentDevice];
    id v17 = [v16 userInterfaceIdiom];

    if (v17 == (id)1)
    {
      id v18 = [self mainScreen];
      [v18 bounds];
      double v20 = v19;

      if (a2) {
        double v21 = v20;
      }
      else {
        double v21 = *(double *)&a1;
      }
      static ClarityUIMetrics.stackWidthAsPercentageOfScreenPad.getter();
      double v23 = v20 * v22;
      if (v21 >= v23) {
        double v14 = v23;
      }
      else {
        double v14 = v21;
      }
    }
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return v14;
}

uint64_t sub_1000B4260()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000B42F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1000B43A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1000B43D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1000B4424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1000B4474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1000B44C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1000B4514(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1000B4670(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1000B4888);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        id v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for BackButtonSafeAreaInsetModifier()
{
  return sub_100034DF8();
}

uint64_t sub_1000B48C8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000B4964(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    unsigned int v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return v4;
}

uint64_t sub_1000B4A5C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t sub_1000B4ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t sub_1000B4B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1000B4BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1000B4C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_1000B4CD8(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000B4E24);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_1000B4E38(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1000B5018);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          id v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          void *v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for BackButton()
{
  return sub_100034DF8();
}

uint64_t sub_1000B5058()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B509C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B50E0()
{
  return sub_1000B3D18(v0[4], v0[2], v0[3]);
}

unint64_t sub_1000B50EC()
{
  unint64_t result = qword_10017FC78;
  if (!qword_10017FC78)
  {
    sub_10002A694(&qword_10017FC70);
    sub_10002A8D8(&qword_10017FC80, &qword_10017FC88);
    sub_1000B51C8((unint64_t *)&qword_10017CB00, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FC78);
  }
  return result;
}

uint64_t sub_1000B51BC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B2F34(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1000B51C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B5210()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000B5220()
{
  unint64_t result = qword_10017FCA0;
  if (!qword_10017FCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FCA0);
  }
  return result;
}

uint64_t sub_1000B5274()
{
  return sub_1000B3EA4(v0[6], v0[7], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1000B5284()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000B53F4()
{
  return swift_getWitnessTable();
}

id sub_1000B56AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WBViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WBViewController()
{
  return self;
}

uint64_t AdminKeypadButtonStyleView.init(configuration:background:foregroundColor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for ButtonStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t v11 = type metadata accessor for AdminKeypadButtonStyleView();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v11 + 36), a2, a4);
  *(void *)(a5 + *(int *)(v11 + 40)) = a3;
  return result;
}

uint64_t type metadata accessor for AdminKeypadButtonStyleView()
{
  return sub_100034DF8();
}

uint64_t sub_1000B57F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ButtonStyleConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  static Color.white.getter();
  uint64_t v5 = Color.opacity(_:)();
  swift_release();
  uint64_t v6 = static Color.white.getter();
  uint64_t result = sub_100029F90(&qword_10017FD50);
  *(void *)(a2 + *(int *)(result + 36)) = v5;
  *(void *)(a2 + *(int *)(result + 40)) = v6;
  return result;
}

uint64_t AdminKeypadButtonStyleView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v37 = sub_100029F90(&qword_10017D230);
  __chkstk_darwin(v37);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v39 = *(void *)(a1 + 16);
  uint64_t v40 = v6;
  v35[1] = a1;
  uint64_t v42 = type metadata accessor for _BackgroundStyleModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v44 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v35 - v8;
  sub_10002A694(&qword_10017D238);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v38 = (char *)v35 - v11;
  sub_10002A694(&qword_10017DA08);
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v47 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  int v41 = (char *)v35 - v12;
  sub_10002A694(&qword_10017D240);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v43 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v45 = (char *)v35 - v16;
  *(void *)uint64_t v5 = static VerticalAlignment.center.getter();
  *((void *)v5 + 1) = 0;
  unsigned char v5[16] = 1;
  sub_100029F90(&qword_10017D2E8);
  ButtonStyleConfiguration.label.getter();
  v35[0] = v2;
  static Edge.Set.all.getter();
  uint64_t v17 = sub_10002A8D8(&qword_10017D248, &qword_10017D230);
  uint64_t v18 = v39;
  uint64_t v19 = v40;
  View.background<A>(_:ignoresSafeAreaEdges:)();
  sub_1000587C0((uint64_t)v5);
  uint64_t v50 = v18;
  uint64_t v51 = v19;
  uint64_t v52 = v2;
  static Alignment.center.getter();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = v17;
  uint64_t v60 = WitnessTable;
  uint64_t v21 = swift_getWitnessTable();
  double v22 = v38;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v7);
  uint64_t v23 = sub_10002A8D8(&qword_10017D250, &qword_10017D238);
  uint64_t v57 = v21;
  uint64_t v58 = v23;
  uint64_t v24 = swift_getWitnessTable();
  sub_10006AE78();
  uint64_t v25 = v41;
  View.clipShape<A>(_:style:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v22, v10);
  uint64_t v26 = sub_10002A8D8(qword_10017DA18, &qword_10017DA08);
  uint64_t v55 = v24;
  uint64_t v56 = v26;
  uint64_t v27 = v36;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = v43;
  View.foregroundColor(_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v25, v27);
  uint64_t v30 = sub_10002A8D8(&qword_10017D258, &qword_10017D240);
  uint64_t v53 = v28;
  uint64_t v54 = v30;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v32 = v45;
  sub_100056EB0(v29, v13, v31);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v48 + 8);
  v33(v29, v13);
  sub_100056EB0(v32, v13, v31);
  return ((uint64_t (*)(char *, uint64_t))v33)(v32, v13);
}

uint64_t sub_1000B5EF8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B5F40(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64) + v11;
  uint64_t v14 = *(void *)(v9 + 64) + 7;
  if (v12 < a2)
  {
    unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v16 = v15 & 0xFFFFFFF8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v12 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v15);
        if (!v20) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v15);
        if (v20) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1000B6188);
      case 4:
        int v20 = *(int *)((char *)a1 + v15);
        if (!v20) {
          break;
        }
LABEL_24:
        int v22 = v20 - 1;
        if (v16)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v12 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if (v8 == v12)
  {
    uint64_t v24 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    return v24(a1, v8, v6);
  }
  else
  {
    unint64_t v25 = ((unint64_t)a1 + v13) & ~v11;
    if (v10 == v12)
    {
      uint64_t v26 = *(uint64_t (**)(unint64_t))(v9 + 48);
      return v26(v25);
    }
    else
    {
      unint64_t v27 = *(void *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
      if (v27 >= 0xFFFFFFFF) {
        LODWORD(v27) = -1;
      }
      return (v27 + 1);
    }
  }
}

void sub_1000B619C(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ButtonStyleConfiguration();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + v13;
  uint64_t v16 = *(void *)(v11 + 64) + 7;
  unint64_t v17 = ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v14 >= a3)
  {
    int v20 = 0;
    int v21 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_19:
      uint64_t v22 = ~v13;
      switch(v20)
      {
        case 1:
          *((unsigned char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)((char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v17) = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v10 == v14)
            {
              unint64_t v25 = *(void (**)(_DWORD *, uint64_t))(v9 + 56);
              v25(a1, a2);
            }
            else
            {
              unint64_t v26 = ((unint64_t)a1 + v15) & v22;
              if (v12 == v14)
              {
                unint64_t v27 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
                v27(v26, a2, v12);
              }
              else
              {
                if ((a2 & 0x80000000) != 0) {
                  uint64_t v28 = a2 ^ 0x80000000;
                }
                else {
                  uint64_t v28 = (a2 - 1);
                }
                *(void *)((v16 + v26) & 0xFFFFFFFFFFFFFFF8) = v28;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v18 = a3 - v14 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    int v21 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_19;
    }
  }
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v23 = v21;
  }
  else {
    int v23 = 1;
  }
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v24 = ~v14 + a2;
    bzero(a1, ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v24;
  }
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17) = v23;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v17) = v23;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1000B6444);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = v23;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for AdminKeypadButtonStyle()
{
  return &type metadata for AdminKeypadButtonStyle;
}

uint64_t sub_1000B647C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B6498()
{
  return sub_10002A8D8(&qword_10017FD58, &qword_10017FD50);
}

void *initializeWithCopy for LockBlockedView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for LockBlockedView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for LockBlockedView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LockBlockedView()
{
  return &type metadata for LockBlockedView;
}

uint64_t sub_1000B65E4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000B6600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = static HorizontalAlignment.center.getter();
  sub_1000B67FC((uint64_t)v22);
  *(_OWORD *)&v24[151] = v22[9];
  *(_OWORD *)&v24[167] = v22[10];
  *(_OWORD *)&v24[183] = v23[0];
  *(_OWORD *)&v24[192] = *(_OWORD *)((char *)v23 + 9);
  *(_OWORD *)&v24[87] = v22[5];
  *(_OWORD *)&v24[103] = v22[6];
  *(_OWORD *)&v24[119] = v22[7];
  *(_OWORD *)&v24[135] = v22[8];
  *(_OWORD *)&v24[23] = v22[1];
  *(_OWORD *)&v24[39] = v22[2];
  *(_OWORD *)&v24[55] = v22[3];
  *(_OWORD *)&v24[71] = v22[4];
  char v25 = 1;
  *(_OWORD *)&v24[7] = v22[0];
  static Color.black.getter();
  uint64_t v11 = Color.opacity(_:)();
  swift_release();
  char v12 = static Edge.Set.all.getter();
  uint64_t v13 = swift_allocObject();
  *(double *)(v13 + 16) = a5;
  *(void *)(v13 + 24) = a1;
  *(void *)(v13 + 32) = a2;
  *(void *)(v13 + 40) = a3;
  uint64_t v14 = swift_allocObject();
  *(double *)(v14 + 16) = a5;
  long long v15 = *(_OWORD *)&v24[128];
  *(_OWORD *)(a4 + 161) = *(_OWORD *)&v24[144];
  long long v16 = *(_OWORD *)&v24[176];
  *(_OWORD *)(a4 + 177) = *(_OWORD *)&v24[160];
  *(_OWORD *)(a4 + 193) = v16;
  *(_OWORD *)(a4 + 209) = *(_OWORD *)&v24[192];
  long long v17 = *(_OWORD *)&v24[64];
  *(_OWORD *)(a4 + 97) = *(_OWORD *)&v24[80];
  long long v18 = *(_OWORD *)&v24[112];
  *(_OWORD *)(a4 + 113) = *(_OWORD *)&v24[96];
  *(_OWORD *)(a4 + 129) = v18;
  *(_OWORD *)(a4 + 145) = v15;
  long long v19 = *(_OWORD *)v24;
  *(_OWORD *)(a4 + 33) = *(_OWORD *)&v24[16];
  long long v20 = *(_OWORD *)&v24[48];
  *(_OWORD *)(a4 + 49) = *(_OWORD *)&v24[32];
  *(_OWORD *)(a4 + 65) = v20;
  *(_OWORD *)(a4 + 81) = v17;
  *(void *)(v14 + 24) = a1;
  *(void *)(v14 + 32) = a2;
  *(void *)(v14 + 40) = a3;
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  *(_OWORD *)(a4 + 17) = v19;
  *(void *)(a4 + 232) = v11;
  *(unsigned char *)(a4 + 240) = v12;
  *(unsigned char *)(a4 + 241) = 1;
  *(void *)(a4 + 248) = sub_1000B7108;
  *(void *)(a4 + 256) = v13;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_OWORD *)(a4 + 280) = 0u;
  *(void *)(a4 + 296) = sub_1000B711C;
  *(void *)(a4 + 304) = v14;
  swift_retain_n();
  return swift_retain_n();
}

uint64_t sub_1000B67FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = static VerticalAlignment.center.getter();
  uint64_t v25 = static HorizontalAlignment.center.getter();
  sub_1000B6AC4((uint64_t)v39);
  uint64_t v2 = *(void *)v39;
  uint64_t v3 = *(void *)&v39[8];
  char v19 = v39[16];
  uint64_t v4 = *(void *)&v39[32];
  uint64_t v20 = *(void *)&v39[24];
  uint64_t v21 = *(void *)&v39[8];
  char v23 = v39[40];
  long long v5 = *(_OWORD *)&v39[48];
  long long v18 = *(_OWORD *)&v39[48];
  char v6 = v39[64];
  uint64_t v7 = *(void *)&v39[72];
  uint64_t v22 = *(void *)v39;
  sub_100041B00(*(uint64_t *)v39, *(uint64_t *)&v39[8], v39[16]);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100041B00(v5, *((uint64_t *)&v5 + 1), v6);
  swift_bridgeObjectRetain();
  sub_100041A08(v2, v3, v19);
  swift_release();
  swift_bridgeObjectRelease();
  sub_100041A08(v18, *((uint64_t *)&v18 + 1), v6);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  long long v26 = (unint64_t)v24;
  LOBYTE(v27) = 1;
  uint64_t v28 = 0;
  LOBYTE(v29) = 1;
  *((void *)&v29 + 1) = v25;
  *(void *)&long long v30 = 0;
  BYTE8(v30) = 1;
  *(void *)&long long v31 = v22;
  *((void *)&v31 + 1) = v21;
  LOBYTE(v32) = v19;
  *((void *)&v32 + 1) = v20;
  *(void *)&long long v33 = v4;
  BYTE8(v33) = v23;
  long long v34 = v18;
  LOBYTE(v35) = v6;
  *((void *)&v35 + 1) = v8;
  *(void *)&long long v36 = 0;
  BYTE8(v36) = 1;
  *(void *)&long long v37 = KeyPath;
  *((void *)&v37 + 1) = v9;
  char v40 = 1;
  *(_OWORD *)&v39[103] = v33;
  *(_OWORD *)&v39[87] = v32;
  *(_OWORD *)&v39[71] = v31;
  *(_OWORD *)&v39[55] = v30;
  *(_OWORD *)&v39[167] = v37;
  *(_OWORD *)&v39[151] = v36;
  *(_OWORD *)&v39[135] = v35;
  *(_OWORD *)&v39[119] = v18;
  *(_OWORD *)&v39[39] = v29;
  *(_OWORD *)&v39[23] = v27;
  *(_OWORD *)&v39[7] = (unint64_t)v24;
  char v38 = 1;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  long long v11 = *(_OWORD *)&v39[144];
  *(_OWORD *)(a1 + 137) = *(_OWORD *)&v39[128];
  *(_OWORD *)(a1 + 153) = v11;
  *(_OWORD *)(a1 + 169) = *(_OWORD *)&v39[160];
  uint64_t v12 = *(void *)&v39[175];
  long long v13 = *(_OWORD *)&v39[80];
  *(_OWORD *)(a1 + 73) = *(_OWORD *)&v39[64];
  *(_OWORD *)(a1 + 89) = v13;
  long long v14 = *(_OWORD *)&v39[112];
  *(_OWORD *)(a1 + 105) = *(_OWORD *)&v39[96];
  *(_OWORD *)(a1 + 121) = v14;
  long long v15 = *(_OWORD *)&v39[16];
  *(_OWORD *)(a1 + 9) = *(_OWORD *)v39;
  *(_OWORD *)(a1 + 25) = v15;
  long long v16 = *(_OWORD *)&v39[48];
  *(_OWORD *)(a1 + 41) = *(_OWORD *)&v39[32];
  *(_OWORD *)(a1 + 57) = v16;
  *(void *)(a1 + 184) = v12;
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 200) = 1;
  v41[0] = v24;
  v41[1] = 0;
  char v42 = 1;
  uint64_t v43 = 0;
  char v44 = 1;
  uint64_t v45 = v25;
  uint64_t v46 = 0;
  char v47 = 1;
  uint64_t v48 = v22;
  uint64_t v49 = v21;
  char v50 = v19;
  uint64_t v51 = v20;
  uint64_t v52 = v4;
  char v53 = v23;
  long long v54 = v18;
  char v55 = v6;
  uint64_t v56 = v8;
  uint64_t v57 = 0;
  char v58 = 1;
  uint64_t v59 = KeyPath;
  uint64_t v60 = v9;
  sub_1000B7164((uint64_t)&v26);
  return sub_1000B7204((uint64_t)v41);
}

uint64_t sub_1000B6AC4@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.title.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v27 = v8;
  uint64_t v28 = v7;
  char v10 = v9;
  uint64_t v29 = v11;
  swift_release();
  char v26 = v10 & 1;
  sub_100041A08(v2, v4, v6);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  sub_1000B734C();
  sub_10002D088();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  static Font.body.getter();
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v23 = v22;
  swift_release();
  sub_100041A08(v12, v14, v16);
  swift_bridgeObjectRelease();
  *(void *)a1 = v28;
  *(void *)(a1 + 8) = v27;
  *(unsigned char *)(a1 + 16) = v26;
  *(void *)(a1 + 24) = v29;
  *(void *)(a1 + 32) = KeyPath;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v19;
  *(unsigned char *)(a1 + 64) = v21 & 1;
  *(void *)(a1 + 72) = v23;
  sub_100041B00(v28, v27, v26);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100041B00(v17, v19, v21 & 1);
  swift_bridgeObjectRetain();
  sub_100041A08(v17, v19, v21 & 1);
  swift_bridgeObjectRelease();
  sub_100041A08(v28, v27, v26);
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1000B6CEC(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = self;
  uint64_t v9 = swift_allocObject();
  *(double *)(v9 + 16) = a4;
  *(void *)(v9 + 24) = a1;
  *(void *)(v9 + 32) = a2;
  *(void *)(v9 + 40) = a3;
  v12[4] = sub_1000B76C0;
  void v12[5] = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_100060EA4;
  uint64_t v12[3] = &unk_100161DC0;
  char v10 = _Block_copy(v12);
  swift_retain();
  swift_retain();
  swift_release();
  id v11 = [v8 scheduledTimerWithTimeInterval:1 repeats:v10 block:1.0];
  _Block_release(v10);
}

void sub_1000B6E1C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = self;
  uint64_t v9 = swift_allocObject();
  *(double *)(v9 + 16) = a4;
  *(void *)(v9 + 24) = a1;
  *(void *)(v9 + 32) = a2;
  *(void *)(v9 + 40) = a3;
  v12[4] = sub_1000B7130;
  void v12[5] = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = sub_100060EA4;
  uint64_t v12[3] = &unk_100161D70;
  char v10 = _Block_copy(v12);
  swift_retain();
  swift_retain();
  swift_release();
  id v11 = [v8 scheduledTimerWithTimeInterval:1 repeats:v10 block:1.0];
  _Block_release(v10);
  [v11 invalidate];
}

void sub_1000B6F5C(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)MKBGetDeviceLockStateInfo();
  if (!v9) {
    goto LABEL_11;
  }
  if (!kMKBInfoBackOff)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  char v10 = v9;
  if (objc_msgSend(v9, "valueForKey:"))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000767A0(v12, &v13);
    swift_dynamicCast();
    sub_100029F90(&qword_10017FD60);
    State.wrappedValue.setter();
    *(double *)&long long v13 = a1;
    *((void *)&v13 + 1) = a3;
    State.wrappedValue.getter();
    double v11 = ceil(v12[0] / 60.0);
    if ((~*(void *)&v11 & 0x7FF0000000000000) != 0)
    {
      if (v11 > -9.22337204e18)
      {
        if (v11 < 9.22337204e18)
        {
          *(void *)&long long v13 = a4;
          *((void *)&v13 + 1) = a5;
          *(void *)&v12[0] = (uint64_t)v11;
          sub_100029F90(&qword_10017F5D0);
          State.wrappedValue.setter();

          return;
        }
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
}

uint64_t sub_1000B70F4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B6600(*(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), a1, *(double *)v1);
}

void sub_1000B7108()
{
  sub_1000B6CEC(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(double *)(v0 + 16));
}

void sub_1000B711C()
{
  sub_1000B6E1C(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(double *)(v0 + 16));
}

void sub_1000B7130(uint64_t a1)
{
  sub_1000B6F5C(*(double *)(v1 + 16), a1, *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000B7140(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B7150()
{
  return swift_release();
}

uint64_t sub_1000B7164(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  char v4 = *(unsigned char *)(a1 + 128);
  sub_100041B00(*(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100041B00(v2, v3, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1000B7204(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 120);
  char v4 = *(unsigned char *)(a1 + 128);
  sub_100041A08(*(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
  swift_release();
  swift_bridgeObjectRelease();
  sub_100041A08(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1000B72A4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B72D0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B72FC()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_1000B7324()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_1000B734C()
{
  id v0 = [self mainBundle];
  v7._object = (void *)0x8000000100127FF0;
  v1._countAndFlagsBits = 0x6961676120797254;
  v1._object = (void *)0xEF6425206E69206ELL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v7._countAndFlagsBits = 0xD00000000000002CLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v7);

  sub_100029F90(&qword_10017FD68);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001135D0;
  sub_100029F90(&qword_10017F5D0);
  State.wrappedValue.getter();
  *(void *)(v3 + 56) = &type metadata for Int;
  *(void *)(v3 + 64) = &protocol witness table for Int;
  *(void *)(v3 + 32) = v6;
  uint64_t v4 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000B749C()
{
  return sub_1000B7500(&qword_10017FD70, &qword_10017FD78, (void (*)(void))sub_1000B74D8);
}

uint64_t sub_1000B74D8()
{
  return sub_1000B7500(&qword_10017FD80, &qword_10017FD88, (void (*)(void))sub_1000B7580);
}

uint64_t sub_1000B7500(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002A694(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B7580()
{
  unint64_t result = qword_10017FD90;
  if (!qword_10017FD90)
  {
    sub_10002A694(&qword_10017FD98);
    sub_1000B75FC();
    sub_10002E0C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FD90);
  }
  return result;
}

unint64_t sub_1000B75FC()
{
  unint64_t result = qword_10017FDA0;
  if (!qword_10017FDA0)
  {
    sub_10002A694(&qword_10017FDA8);
    sub_10002A8D8(&qword_10017FDB0, &qword_10017FDB8);
    sub_10002A8D8(&qword_10017C3D0, &qword_10017C3D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017FDA0);
  }
  return result;
}

uint64_t sub_1000B76CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10008C6F4(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000B7870()
{
  type metadata accessor for LockScreenWallpaperMetadataProvider();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_1000B7998();
  qword_100186518 = v0;
  return result;
}

uint64_t sub_1000B78B0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000B7924()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000B7998()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100029F90(&qword_10017C038);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100029F90(&qword_10017FF48);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v1 + OBJC_IVAR____TtC12ClarityBoard35LockScreenWallpaperMetadataProvider__wallpaperData;
  long long v19 = xmmword_1001144D0;
  sub_100029F90((uint64_t *)&unk_10017FE10);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v13, v12, v9);
  uint64_t v14 = v1 + OBJC_IVAR____TtC12ClarityBoard35LockScreenWallpaperMetadataProvider__isWallpaperLight;
  LOBYTE(v19) = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v14, v8, v5);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v4, 1, 1, v15);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v16 = static MainActor.shared.getter();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = v16;
  v17[3] = &protocol witness table for MainActor;
  v17[4] = v1;
  sub_1000B76CC((uint64_t)v4, (uint64_t)&unk_10017FF58, (uint64_t)v17);
  swift_release();
  return v1;
}

id sub_1000B7C58()
{
  uint64_t v0 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v9 >> 60 == 15)
  {
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for ColorScheme.light(_:), v0);
    char v4 = static ColorScheme.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (v4)
    {
LABEL_3:
      uint64_t v5 = &selRef_darkGrayColor;
      goto LABEL_6;
    }
  }
  else
  {
    sub_100062CE0(v8, v9);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    if (v8) {
      goto LABEL_3;
    }
  }
  uint64_t v5 = &selRef_whiteColor;
LABEL_6:
  id v6 = [self *v5];

  return v6;
}

uint64_t sub_1000B7E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  sub_100029F90((uint64_t *)&unk_10017C500);
  v4[3] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  v4[7] = swift_task_alloc();
  v4[8] = type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000B7F80, v7, v6);
}

uint64_t sub_1000B7F80()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  swift_release();
  id v4 = (id)CLFWallpaperURL();
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL.path(percentEncoded:)(1);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v5(v1, v2);
  id v6 = [self defaultManager];
  NSString v7 = String._bridgeToObjectiveC()();
  unsigned int v8 = [v6 fileExistsAtPath:v7];

  if (v8)
  {
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = Data.init(contentsOf:options:)();
    unint64_t v11 = v10;
    uint64_t v12 = v0[6];
    uint64_t v13 = v0[3];
    uint64_t v25 = v0[4];
    uint64_t v14 = v0[2];
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
    sub_1000B9228(v9, v11);
    swift_retain();
    uint64_t v16 = static MainActor.shared.getter();
    uint64_t v17 = (void *)swift_allocObject();
    void v17[2] = v16;
    v17[3] = &protocol witness table for MainActor;
    v17[4] = v9;
    v17[5] = v11;
    v17[6] = v14;
    sub_1000B76CC(v13, (uint64_t)&unk_10017FF88, (uint64_t)v17);
    swift_release();
    sub_100062CE0(v9, v11);
    v5(v12, v25);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = v0[2];
  uint64_t v18 = v0[3];
  uint64_t v20 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v18, 1, 1, v20);
  swift_retain();
  uint64_t v21 = static MainActor.shared.getter();
  uint64_t v22 = (void *)swift_allocObject();
  void v22[2] = v21;
  uint64_t v22[3] = &protocol witness table for MainActor;
  void v22[4] = v19;
  sub_1000B76CC(v18, (uint64_t)&unk_10017FF78, (uint64_t)v22);

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_1000B82A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  void v6[6] = a6;
  void v6[4] = a4;
  type metadata accessor for MainActor();
  v6[7] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000B8340, v8, v7);
}

uint64_t sub_1000B8340()
{
  unint64_t v1 = v0[5];
  swift_release();
  if (v1 >> 60 == 15)
  {
    uint64_t v2 = v0[6];
    swift_retain();
    sub_10009D0C8((uint64_t)sub_1000B935C, v2);
    swift_release();
  }
  else
  {
    unint64_t v3 = v0[5];
    uint64_t v4 = v0[4];
    swift_getKeyPath();
    swift_getKeyPath();
    v0[2] = v4;
    v0[3] = v3;
    swift_retain();
    sub_1000B9228(v4, v3);
    static Published.subscript.setter();
  }
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1000B844C(uint64_t a1)
{
  uint64_t v2 = sub_100029F90((uint64_t *)&unk_10017C500);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Retrieving wallpaper data after first unlock.", v12, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 1, 1, v13);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v14 = static MainActor.shared.getter();
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v14;
  v15[3] = &protocol witness table for MainActor;
  _DWORD v15[4] = a1;
  sub_1000B76CC((uint64_t)v4, (uint64_t)&unk_10017FF98, (uint64_t)v15);
  return swift_release();
}

uint64_t sub_1000B8694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  sub_100029F90((uint64_t *)&unk_10017C500);
  v4[3] = swift_task_alloc();
  v4[4] = type metadata accessor for MainActor();
  v4[5] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000B8760, v6, v5);
}

uint64_t sub_1000B8760()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  swift_release();
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  swift_retain();
  uint64_t v4 = static MainActor.shared.getter();
  uint64_t v5 = (void *)swift_allocObject();
  _OWORD v5[2] = v4;
  v5[3] = &protocol witness table for MainActor;
  void v5[4] = v2;
  sub_1000B76CC(v1, (uint64_t)&unk_10017FFA0, (uint64_t)v5);
  swift_release();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000B886C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000B8904, v6, v5);
}

uint64_t sub_1000B8904()
{
  swift_release();
  BOOL v1 = sub_1000B89BC();
  swift_getKeyPath();
  swift_getKeyPath();
  *(unsigned char *)(v0 + 32) = v1;
  swift_retain();
  static Published.subscript.setter();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

BOOL sub_1000B89BC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  unint64_t v0 = v9;
  if (v9 >> 60 != 15)
  {
    uint64_t v1 = *(void *)&v8;
    id v2 = objc_allocWithZone((Class)UIImage);
    sub_100085EA4(*(uint64_t *)&v8, v9);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v4 = [v2 initWithData:isa];
    sub_100062CE0(*(uint64_t *)&v8, v9);

    if (v4)
    {
      uint64_t v5 = sub_1000B97AC();
      if (v5)
      {
        uint64_t v6 = v5;
        double v8 = 0.0;
        [(CGColorSpace *)v5 getWhite:&v8 alpha:0];

        sub_100062CE0(v1, v0);
        return v8 > 0.8;
      }
    }
    sub_100062CE0(*(uint64_t *)&v8, v9);
  }
  return 0;
}

uint64_t sub_1000B8B24()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12ClarityBoard35LockScreenWallpaperMetadataProvider__wallpaperData;
  uint64_t v2 = sub_100029F90(&qword_10017FF48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC12ClarityBoard35LockScreenWallpaperMetadataProvider__isWallpaperLight;
  uint64_t v4 = sub_100029F90(&qword_10017C038);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v6 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v5, v6);
}

uint64_t sub_1000B8C10()
{
  return type metadata accessor for LockScreenWallpaperMetadataProvider();
}

uint64_t type metadata accessor for LockScreenWallpaperMetadataProvider()
{
  uint64_t result = qword_10017FDF8;
  if (!qword_10017FDF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000B8C64()
{
  sub_1000B8D30();
  if (v0 <= 0x3F)
  {
    sub_100034468();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000B8D30()
{
  if (!qword_10017FE08)
  {
    sub_10002A694((uint64_t *)&unk_10017FE10);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10017FE08);
    }
  }
}

uint64_t sub_1000B8D8C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for LockScreenWallpaperMetadataProvider();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000B8DD0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100056EAC;
  return sub_1000B7E48(a1, v4, v5, v6);
}

double sub_1000B8E84@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1000B8F04(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000B9228(v1, v2);
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_1000B8F8C@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1000B900C()
{
  return static Published.subscript.setter();
}

uint64_t sub_1000B9080()
{
  swift_release();

  return _swift_deallocObject(v0, 32);
}

uint64_t sub_1000B90B8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10003CCE0;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10017FF60 + dword_10017FF60);
  return v6(a1, v4);
}

uint64_t sub_1000B9174(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100056EAC;
  return sub_1000B886C(a1, v4, v5, v6);
}

uint64_t sub_1000B9228(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100085EA4(a1, a2);
  }
  return a1;
}

uint64_t sub_1000B923C()
{
  swift_unknownObjectRelease();
  unint64_t v1 = *(void *)(v0 + 40);
  if (v1 >> 60 != 15) {
    sub_100062CF4(*(void *)(v0 + 32), v1);
  }
  swift_release();

  return _swift_deallocObject(v0, 56);
}

uint64_t sub_1000B9294(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100056EAC;
  return sub_1000B82A4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000B935C()
{
  return sub_1000B844C(v0);
}

uint64_t sub_1000B9370(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100056EAC;
  return sub_1000B8694(a1, v4, v5, v6);
}

uint64_t sub_1000B9428(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10003CCE0;
  return sub_1000B7E48(a1, v4, v5, v6);
}

UIImage *sub_1000B94E4(void *a1, CGFloat a2, CGFloat a3)
{
  uint64_t v5 = (CGImage *)[a1 CGImage];
  if (v5)
  {
    uint64_t v6 = v5;
    [a1 size];
    v20.origin.y = v7 * 0.125;
    v20.origin.x = 0.0;
    v20.size.width = a2;
    v20.size.height = a3;
    CGImageRef v8 = CGImageCreateWithImageInRect(v6, v20);
    if (!v8)
    {
      id v16 = a1;

      return (UIImage *)v16;
    }
    CGImageRef v9 = v8;
    [a1 scale];
    id v11 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v9, objc_msgSend(a1, "imageOrientation"), v10);
    [a1 scale];
    CGFloat v13 = v12;
    v19.width = a2;
    v19.height = a3;
    UIGraphicsBeginImageContextWithOptions(v19, 0, v13);
    objc_msgSend(v11, "drawInRect:", 0.0, 0.0, a2, a3);
    uint64_t v14 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    if (v14) {
      return v14;
    }
  }

  return (UIImage *)a1;
}

UIImage *sub_1000B9688()
{
  if (qword_10017B620 != -1) {
    swift_once();
  }
  type metadata accessor for LockScreenWallpaperMetadataProvider();
  sub_1000B9AAC();
  swift_retain();
  uint64_t v8 = ObservedObject.init(wrappedValue:)();
  uint64_t v9 = v0;
  sub_100029F90(&qword_10017FFA8);
  swift_allocObject();
  ImageRenderer.init(content:)();
  unint64_t v1 = (void *)ImageRenderer.uiImage.getter();
  if (v1)
  {
    uint64_t v2 = v1;
    objc_msgSend(v1, "size", v8, v9);
    CGFloat v4 = v3 * 0.125;
    [v2 size];
    uint64_t v6 = sub_1000B94E4(v2, v5 * 0.5, v4);
    swift_release();
  }
  else
  {
    swift_release();
    return 0;
  }
  return v6;
}

CGColorSpace *sub_1000B97AC()
{
  uint64_t v0 = sub_1000B9688();
  if (!v0) {
    return 0;
  }
  unint64_t v1 = v0;
  uint64_t v2 = [(UIImage *)v1 CGImage];
  if (!v2)
  {
LABEL_31:

    return 0;
  }
  double v3 = v2;
  [(UIImage *)v1 size];
  double v5 = v4;
  uint64_t result = (CGColorSpace *)[(UIImage *)v1 size];
  if (v5 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((*(void *)&v5 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    goto LABEL_42;
  }
  double v8 = v7;
  if ((*(void *)&v7 & 0x7FF0000000000000) == 0x7FF0000000000000) {
    goto LABEL_42;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v9 = (uint64_t)v5;
  uint64_t v10 = (uint64_t)v7;
  uint64_t v11 = (uint64_t)v5 * (uint64_t)v7;
  if ((unsigned __int128)((uint64_t)v5 * (__int128)(uint64_t)v7) >> 64 != v11 >> 63)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t result = CGColorSpaceCreateDeviceRGB();
  if ((unint64_t)(v9 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  double v12 = result;
  CGContextRef v13 = CGBitmapContextCreate(0, (uint64_t)v5, (uint64_t)v8, 8uLL, 4 * v9, result, 0x2002u);
  if (!v13)
  {
LABEL_30:

    goto LABEL_31;
  }
  uint64_t v14 = v13;
  CGContextRef.draw(_:in:byTiling:)();
  uint64_t result = (CGColorSpace *)CGBitmapContextGetData(v14);
  if (!result)
  {
LABEL_29:

    goto LABEL_30;
  }
  if (v9 < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (!v9)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
LABEL_35:
    id v24 = [objc_allocWithZone((Class)UIColor) initWithRed:(double)v17 / (double)v11 / 255.0 green:(double)v15 / (double)v11 / 255.0 blue:(double)v16 / (double)v11 / 255.0 alpha:1.0];

    return (CGColorSpace *)v24;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    while (!v10)
    {
LABEL_17:
      if (++v18 == v9) {
        goto LABEL_35;
      }
    }
    LODWORD(v19) = *((_DWORD *)result + v18);
    BOOL v20 = __OFADD__(v17, BYTE2(v19));
    v17 += BYTE2(v19);
    if (!v20)
    {
      int v21 = *((_DWORD *)result + v18);
      uint64_t v22 = 1;
      while (1)
      {
        BOOL v20 = __OFADD__(v16, v19);
        v16 += v19;
        if (v20) {
          break;
        }
        BOOL v20 = __OFADD__(v15, BYTE1(v21));
        v15 += BYTE1(v21);
        if (v20) {
          goto LABEL_37;
        }
        if (v10 == v22) {
          goto LABEL_17;
        }
        uint64_t v23 = v22 * v9;
        if ((unsigned __int128)(v22 * (__int128)v9) >> 64 != (v22 * v9) >> 63) {
          goto LABEL_38;
        }
        BOOL v20 = __OFADD__(v23, v18);
        uint64_t v19 = v23 + v18;
        if (v20) {
          goto LABEL_39;
        }
        int v21 = *((_DWORD *)result + v19);
        LOBYTE(v19) = v21;
        BOOL v20 = __OFADD__(v17, BYTE2(v21));
        v17 += BYTE2(v21);
        ++v22;
        if (v20) {
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_48:
  __break(1u);
  return result;
}

unint64_t sub_1000B9AAC()
{
  unint64_t result = qword_10017D4F8;
  if (!qword_10017D4F8)
  {
    type metadata accessor for LockScreenWallpaperMetadataProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10017D4F8);
  }
  return result;
}

id sub_1000B9C28()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InCallServicePresentationManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for InCallServicePresentationManager()
{
  return self;
}

uint64_t sub_1000B9C80()
{
  static Color.black.getter();
  uint64_t v0 = Color.opacity(_:)();
  uint64_t result = swift_release();
  qword_100186520 = v0;
  return result;
}

ValueMetadata *type metadata accessor for AdminStyleModifier()
{
  return &type metadata for AdminStyleModifier;
}

uint64_t sub_1000B9CD8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_1000B9D78(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *a2;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    *a1 = v7;
    a1 = (void *)(v7 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = v7;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    CGContextRef v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t sub_1000B9E84(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_1000B9EF8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_retain();
  v6(v8, v9, v5);
  return a1;
}

void *sub_1000B9F88(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_OWORD *sub_1000BA018(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_OWORD *sub_1000BA088(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_1000BA110(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1000BA2B0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1000BA510);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 16] & ~v9;
          BOOL v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v18 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for AdminSceneBackButtonModifier()
{
  return sub_100034DF8();
}

uint64_t sub_1000BA550()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BA56C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v31 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  double v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100029F90(&qword_100180058);
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100029F90(&qword_100180060);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  size_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100029F90(&qword_100180068);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  unsigned int v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029F90(&qword_100180070);
  sub_10002A8D8(&qword_100180078, &qword_100180070);
  View.scrollContentBackground(_:)();
  int v15 = v3;
  unsigned int v16 = v3;
  uint64_t v17 = v31;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v16, enum case for ColorScheme.dark(_:), v31);
  uint64_t KeyPath = swift_getKeyPath();
  unint64_t v19 = (uint64_t *)&v10[*(int *)(v8 + 44)];
  uint64_t v20 = sub_100029F90(&qword_10017E148);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))((char *)v19 + *(int *)(v20 + 28), v15, v17);
  *unint64_t v19 = KeyPath;
  uint64_t v22 = v32;
  uint64_t v21 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v10, v6, v33);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v15, v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v21);
  uint64_t v23 = static Color.white.getter();
  sub_10002A580((uint64_t)v10, (uint64_t)v14, &qword_100180060);
  *(void *)&v14[*(int *)(v12 + 44)] = v23;
  sub_10002A840((uint64_t)v10, &qword_100180060);
  uint64_t v24 = static SafeAreaRegions.all.getter();
  LOBYTE(v22) = static Edge.Set.all.getter();
  uint64_t v25 = static Alignment.center.getter();
  uint64_t v27 = v26;
  uint64_t v28 = v34;
  sub_10002A580((uint64_t)v14, v34, &qword_100180068);
  uint64_t v29 = v28 + *(int *)(sub_100029F90(&qword_100180080) + 36);
  *(void *)uint64_t v29 = v24;
  *(unsigned char *)(v29 + 8) = v22;
  *(void *)(v29 + 16) = v25;
  *(void *)(v29 + 24) = v27;
  return sub_10002A840((uint64_t)v14, &qword_100180068);
}

uint64_t sub_1000BA904()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BA948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v32 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v29 = v3;
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[2] = *(void *)(v8 + 24);
  uint64_t v9 = type metadata accessor for BackButton();
  uint64_t v30 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v27 - v10;
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for _ViewModifier_Content();
  v27[0] = swift_getWitnessTable();
  v27[1] = type metadata accessor for BackButtonSafeAreaInsetModifier();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)v27 - v18;
  uint64_t v20 = *(int *)(a2 + 36);
  uint64_t v21 = v29;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v7, (char *)v29 + v20, v5);
  sub_1000B2A40((uint64_t)v7, *v21, v21[1], v5, (uint64_t)v11);
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1000B26E4((uint64_t)v11, v12, v9);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v9);
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v33 = WitnessTable;
  uint64_t v34 = v23;
  uint64_t v24 = swift_getWitnessTable();
  sub_100056EB0(v17, v13, v24);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  v25(v17, v13);
  sub_100056EB0(v19, v13, v24);
  return ((uint64_t (*)(char *, uint64_t))v25)(v19, v13);
}

uint64_t sub_1000BACCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB84C();

  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000BAD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000BB84C();

  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000BAD94()
{
}

uint64_t sub_1000BADBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v32 = sub_100029F90(&qword_10017C218) - 8;
  __chkstk_darwin(v32);
  uint64_t v31 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Material();
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2);
  uint64_t v27 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ColorScheme();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = sub_100029F90(&qword_100180158);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = sub_100029F90(&qword_100180160) - 8;
  __chkstk_darwin(v28);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Color.black.getter();
  sub_10006193C((uint64_t)v10);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for ColorScheme.light(_:), v4);
  static ColorScheme.== infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  uint64_t v18 = Color.opacity(_:)();
  swift_release();
  unint64_t v19 = v27;
  static Material.regular.getter();
  LOBYTE(v8) = static Edge.Set.all.getter();
  uint64_t v21 = v29;
  uint64_t v20 = v30;
  uint64_t v22 = (uint64_t)v31;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v31, v19, v30);
  *(unsigned char *)(v22 + *(int *)(v32 + 44)) = (_BYTE)v8;
  sub_10002A580(v22, (uint64_t)v14 + *(int *)(v12 + 44), &qword_10017C218);
  uint64_t *v14 = v18;
  swift_retain();
  sub_10002A840(v22, &qword_10017C218);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v20);
  swift_release();
  uint64_t v23 = static SafeAreaRegions.all.getter();
  LOBYTE(v12) = static Edge.Set.all.getter();
  sub_10002A580((uint64_t)v14, (uint64_t)v16, &qword_100180158);
  uint64_t v24 = &v16[*(int *)(v28 + 44)];
  *(void *)uint64_t v24 = v23;
  v24[8] = v12;
  sub_10002A840((uint64_t)v14, &qword_100180158);
  return sub_1000BBF34((uint64_t)v16, v33);
}

ValueMetadata *type metadata accessor for AdminBackgroundWrapper()
{
  return &type metadata for AdminBackgroundWrapper;
}

uint64_t sub_1000BB1AC()
{
  return swift_getWitnessTable();
}

unint64_t sub_1000BB2DC()
{
  unint64_t result = qword_100180088;
  if (!qword_100180088)
  {
    sub_10002A694(&qword_100180080);
    sub_1000BB37C();
    sub_10002A8D8(&qword_1001800A0, &qword_1001800A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180088);
  }
  return result;
}

unint64_t sub_1000BB37C()
{
  unint64_t result = qword_100180090;
  if (!qword_100180090)
  {
    sub_10002A694(&qword_100180068);
    sub_1000BB41C();
    sub_10002A8D8(&qword_10017F398, &qword_10017F3A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180090);
  }
  return result;
}

unint64_t sub_1000BB41C()
{
  unint64_t result = qword_100180098;
  if (!qword_100180098)
  {
    sub_10002A694(&qword_100180060);
    sub_10002A694(&qword_100180070);
    sub_10002A8D8(&qword_100180078, &qword_100180070);
    swift_getOpaqueTypeConformance2();
    sub_10002A8D8(&qword_10017E198, &qword_10017E148);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180098);
  }
  return result;
}

unint64_t sub_1000BB520()
{
  unint64_t result = qword_1001800B0;
  if (!qword_1001800B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001800B0);
  }
  return result;
}

id sub_1000BB574()
{
  uint64_t v0 = type metadata accessor for AdminBackgroundView();
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (uint64_t *)((char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v11 - v4;
  *uint64_t v3 = swift_getKeyPath();
  sub_100029F90(&qword_10017B928);
  swift_storeEnumTagMultiPayload();
  sub_1000BB728((uint64_t)v3, (uint64_t)v5);
  id v6 = objc_allocWithZone((Class)sub_100029F90(&qword_1001800B8));
  sub_1000BB78C((uint64_t)v5, (uint64_t)v3);
  uint64_t v7 = (void *)UIHostingController.init(rootView:)();
  sub_1000BB7F0((uint64_t)v5);
  id result = [v7 view];
  if (result)
  {
    uint64_t v9 = result;
    id v10 = [self clearColor];
    [v9 setBackgroundColor:v10];

    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for AdminBackgroundView()
{
  uint64_t result = qword_100180120;
  if (!qword_100180120) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000BB728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AdminBackgroundView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BB78C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AdminBackgroundView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BB7F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AdminBackgroundView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000BB84C()
{
  unint64_t result = qword_1001800C0;
  if (!qword_1001800C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001800C0);
  }
  return result;
}

uint64_t *sub_1000BB8A0(uint64_t *a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(sub_100029F90(&qword_10017B928) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000BB9AC(uint64_t a1)
{
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_release();
  }
}

void *sub_1000BBA50(void *a1, void *a2)
{
  sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1000BBB0C(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10002A840((uint64_t)a1, &qword_10017B928);
    sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_1000BBBE0(void *a1, const void *a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017B928);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_1000BBCA4(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    sub_10002A840((uint64_t)a1, &qword_10017B928);
    uint64_t v4 = sub_100029F90(&qword_10017B928);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000BBD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BBD94);
}

uint64_t sub_1000BBD94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017D328);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000BBE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BBE18);
}

uint64_t sub_1000BBE18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_10017D328);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_1000BBE8C()
{
  sub_1000875F0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000BBF18()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BBF34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_100180160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000BBFA0()
{
  unint64_t result = qword_100180168;
  if (!qword_100180168)
  {
    sub_10002A694(&qword_100180160);
    sub_1000BC01C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180168);
  }
  return result;
}

unint64_t sub_1000BC01C()
{
  unint64_t result = qword_100180170;
  if (!qword_100180170)
  {
    sub_10002A694(&qword_100180158);
    sub_10002A8D8(&qword_10017F608, &qword_10017C218);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180170);
  }
  return result;
}

ValueMetadata *type metadata accessor for AdminKeypad()
{
  return &type metadata for AdminKeypad;
}

uint64_t sub_1000BC0D0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000BC0EC@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100029F90(&qword_100180180);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v14 - v8;
  *(void *)uint64_t v9 = static VerticalAlignment.center.getter();
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  uint64_t v10 = sub_100029F90(&qword_100180188);
  sub_1000BC218(a1, &v9[*(int *)(v10 + 44)]);
  sub_1000BC680((uint64_t)v9, (uint64_t)v7);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v11 = sub_100029F90(&qword_100180190);
  sub_1000BC680((uint64_t)v7, a2 + *(int *)(v11 + 48));
  uint64_t v12 = a2 + *(int *)(v11 + 64);
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 0;
  sub_10002A840((uint64_t)v9, &qword_100180180);
  return sub_10002A840((uint64_t)v7, &qword_100180180);
}

uint64_t sub_1000BC218@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  char v38 = a2;
  uint64_t v3 = sub_100029F90(&qword_10017CB30);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100029F90(&qword_100180198);
  uint64_t v6 = *(void *)(v35 - 8);
  uint64_t v7 = __chkstk_darwin(v35);
  long long v37 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v36 = (char *)&v28 - v9;
  long long v10 = a1[1];
  long long v53 = *a1;
  long long v54 = v10;
  sub_100029F90(&qword_10017C5D0);
  Binding.projectedValue.getter();
  uint64_t v30 = v39;
  uint64_t v29 = v40;
  uint64_t v11 = v42;
  uint64_t v32 = v41;
  int v31 = *((unsigned __int8 *)a1 + 32);
  uint64_t v12 = *((void *)a1 + 6);
  uint64_t v34 = *((void *)a1 + 5);
  uint64_t v13 = *((void *)a1 + 7);
  uint64_t v33 = *((void *)a1 + 8);
  uint64_t v14 = type metadata accessor for Font.Design();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v5, 1, 1, v14);
  swift_retain();
  uint64_t v16 = static Font.system(size:weight:design:)();
  sub_10002A840((uint64_t)v5, &qword_10017CB30);
  v15(v5, 1, 1, v14);
  static Font.system(size:weight:design:)();
  sub_10002A840((uint64_t)v5, &qword_10017CB30);
  uint64_t v17 = Font.bold()();
  swift_release();
  uint64_t v39 = v30;
  uint64_t v40 = v29;
  uint64_t v41 = v32;
  uint64_t v42 = v11;
  char v43 = v31;
  __int16 v44 = 0;
  uint64_t v45 = v34;
  uint64_t v46 = v12;
  uint64_t v47 = v13;
  uint64_t v48 = v33;
  char v49 = 0;
  uint64_t v50 = v16;
  uint64_t v51 = v17;
  char v52 = 1;
  sub_10006E814();
  sub_1000BC6E8();
  uint64_t v18 = v36;
  View.buttonStyle<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v19 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v20 = v37;
  uint64_t v21 = v35;
  v19(v37, v18, v35);
  uint64_t v22 = v38;
  void *v38 = 0;
  *((unsigned char *)v22 + 8) = 0;
  uint64_t v23 = (char *)v22;
  uint64_t v24 = sub_100029F90(&qword_1001801A8);
  v19(&v23[*(int *)(v24 + 48)], v20, v21);
  uint64_t v25 = &v23[*(int *)(v24 + 64)];
  *(void *)uint64_t v25 = 0;
  v25[8] = 0;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v6 + 8);
  v26(v18, v21);
  return ((uint64_t (*)(char *, uint64_t))v26)(v20, v21);
}

uint64_t sub_1000BC60C@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 48);
  v7[2] = *(_OWORD *)(v1 + 32);
  v7[3] = v3;
  long long v7[4] = *(_OWORD *)(v1 + 64);
  uint64_t v8 = *(void *)(v1 + 80);
  long long v4 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v4;
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v5 = sub_100029F90(&qword_100180178);
  return sub_1000BC0EC(v7, a1 + *(int *)(v5 + 44));
}

uint64_t sub_1000BC680(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_100180180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000BC6E8()
{
  unint64_t result = qword_1001801A0;
  if (!qword_1001801A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001801A0);
  }
  return result;
}

unint64_t sub_1000BC740()
{
  unint64_t result = qword_1001801B0;
  if (!qword_1001801B0)
  {
    sub_10002A694(&qword_1001801B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001801B0);
  }
  return result;
}

uint64_t sub_1000BC79C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v35 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v32 = *(void *)(v5 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v33 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v10 = (char *)&v28 - v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v30 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int v31 = (char *)&v28 - v14;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t, double))(v2 + 32);
  uint64_t v28 = *(void *)(v2 + 40);
  long long v44 = *(_OWORD *)(v2 + 48);
  uint64_t v45 = *(void *)(v2 + 64);
  long long v40 = *(_OWORD *)(v2 + 48);
  uint64_t v41 = *(void *)(v2 + 64);
  sub_100029F90(&qword_100180248);
  State.wrappedValue.getter();
  uint64_t v15 = v42;
  double v16 = v43;
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v5;
  *(void *)(v18 + 24) = v17;
  long long v19 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v18 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v18 + 80) = v19;
  *(_OWORD *)(v18 + 96) = *(_OWORD *)(v3 + 64);
  *(void *)(v18 + 112) = *(void *)(v3 + 80);
  long long v20 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v18 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v18 + 48) = v20;
  sub_1000BD5E8(v3);
  v29(v15, sub_1000BD5B8, v18, v16);
  swift_release();
  long long v40 = v44;
  uint64_t v41 = v45;
  State.wrappedValue.getter();
  View.allowsHitTesting(_:)();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v5);
  unint64_t v21 = sub_1000BD50C();
  uint64_t v38 = v17;
  unint64_t v39 = v21;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = v30;
  View.onAppear(perform:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v8);
  uint64_t v36 = WitnessTable;
  long long v37 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = v31;
  sub_100056EB0(v23, v11, v24);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v34 + 8);
  v26(v23, v11);
  sub_100056EB0(v25, v11, v24);
  return ((uint64_t (*)(char *, uint64_t))v26)(v25, v11);
}

uint64_t sub_1000BCBCC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AccessibilityNotification.Announcement();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  long long v25 = *(_OWORD *)(v1 + 48);
  uint64_t v26 = *(void (**)(uint64_t, void *))(v1 + 64);
  sub_1000BD660((uint64_t)&v26, (uint64_t)v27);
  long long aBlock = v25;
  uint64_t v18 = v26;
  sub_10003ADA8((uint64_t)v27);
  sub_100029F90(&qword_100180248);
  State.wrappedValue.getter();
  long long aBlock = v25;
  uint64_t v18 = v26;
  char v22 = 1;
  uint64_t v23 = v24;
  State.wrappedValue.setter();
  sub_1000BD6C8((uint64_t)&v25);
  uint64_t v9 = self;
  double v10 = *(double *)(v2 + 72);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a1 + 16);
  long long v12 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v11 + 88) = v12;
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v2 + 64);
  long long v13 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)v2;
  *(void *)(v11 + 32) = v8;
  *(void *)(v11 + 120) = *(void *)(v2 + 80);
  *(_OWORD *)(v11 + 56) = v13;
  long long v20 = sub_1000BD754;
  uint64_t v21 = v11;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v18 = sub_100060EA4;
  long long v19 = &unk_1001620D8;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_retain();
  sub_1000BD5E8(v2);
  swift_release();
  id v15 = [v9 scheduledTimerWithTimeInterval:1 repeats:v14 block:v10];
  _Block_release(v14);

  AccessibilityNotification.Announcement.init(_:)();
  _AccessibilityNotifications.post()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

uint64_t sub_1000BCEA0()
{
  uint64_t v0 = type metadata accessor for AccessibilityNotification.ScreenChanged();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v5, 0, sizeof(v5));
  AccessibilityNotification.ScreenChanged.init(_:)();
  _AccessibilityNotifications.post()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000BCF80(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = (void *)(a2 + 16);
  swift_beginAccess();
  uint64_t v7 = *(void *)(a2 + 16);
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
    goto LABEL_7;
  }
  void *v6 = v9;
  if (v9 == *((void *)a3 + 10))
  {
    [a1 invalidate];
    long long v12 = a3[3];
    uint64_t v13 = *((void *)a3 + 8);
    long long v17 = a3[3];
    *(void *)&long long v18 = *((void *)a3 + 8);
    sub_1000BD660((uint64_t)&v13, (uint64_t)v14);
    sub_10003ADA8((uint64_t)v14);
    sub_100029F90(&qword_100180248);
    State.wrappedValue.getter();
    long long v17 = v12;
    *(void *)&long long v18 = v13;
    State.wrappedValue.setter();
    sub_1000BD6C8((uint64_t)&v12);
    if (qword_10017B630 == -1)
    {
LABEL_4:
      long long v17 = v12;
      *(void *)&long long v18 = v13;
      sub_10003ADA8((uint64_t)v14);
      State.wrappedValue.getter();
      long long v17 = v12;
      *(void *)&long long v18 = v13;
      State.wrappedValue.setter();
      sub_1000BD6C8((uint64_t)&v12);
      long long v10 = a3[1];
      long long v17 = *a3;
      long long v18 = v10;
      uint64_t v15 = 0;
      unint64_t v16 = 0xE000000000000000;
      sub_100029F90(&qword_10017C5D0);
      return Binding.wrappedValue.setter();
    }
LABEL_7:
    swift_once();
    goto LABEL_4;
  }
  long long v17 = a3[3];
  *(void *)&long long v18 = *((void *)a3 + 8);
  sub_100029F90(&qword_100180248);
  State.wrappedValue.getter();
  sub_1000BD660((uint64_t)&v18, (uint64_t)v14);
  sub_10003ADA8((uint64_t)v14);
  State.wrappedValue.getter();
  long long v12 = v17;
  uint64_t v13 = v18;
  State.wrappedValue.setter();
  return sub_1000BD6C8((uint64_t)&v17);
}

uint64_t sub_1000BD1F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000BC79C(a1, a2);
}

void sub_1000BD244()
{
  qword_1001801C0 = 0x4024000000000000;
}

uint64_t sub_1000BD254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_1000BD25C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t sub_1000BD2B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000BD348(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t sub_1000BD418(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t type metadata accessor for PasscodeVerifyingView()
{
  return sub_100034DF8();
}

uint64_t sub_1000BD4C8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000BD50C()
{
  unint64_t result = qword_100180250;
  if (!qword_100180250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100180250);
  }
  return result;
}

uint64_t sub_1000BD560()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 120);
}

uint64_t sub_1000BD5B8()
{
  uint64_t v0 = type metadata accessor for PasscodeVerifyingView();
  return sub_1000BCBCC(v0);
}

uint64_t sub_1000BD5E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BD650()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BD660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029F90(&qword_100180258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BD6C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BD6F4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 128);
}

uint64_t sub_1000BD754(void *a1)
{
  return sub_1000BCF80(a1, *(void *)(v1 + 32), (long long *)(v1 + 40));
}

uint64_t sub_1000BD764(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000BD774()
{
  return swift_release();
}

uint64_t sub_1000BD77C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000BD820()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

void *sub_1000BD854(void *result)
{
  *unint64_t result = ++qword_100186470;
  return result;
}

uint64_t sub_1000BD870(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, void *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v30 = 1;
  uint64_t v31 = a4;
  int v32 = 16777472;
  int v33 = a5;
  NDR_record_t v34 = NDR_record;
  int v17 = *a3;
  int v35 = a2;
  int v36 = v17;
  int v37 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v19)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            int v21 = v33;
            if (v33 == v47)
            {
              uint64_t v20 = 0;
              int v22 = *(_DWORD *)&v34.mig_vers;
              *a3 = v38;
              long long v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              long long v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              long long v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              long long v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              int v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port) {
              uint64_t v20 = 4294966996;
            }
            else {
              uint64_t v20 = HIDWORD(v31);
            }
          }
        }
        else
        {
          uint64_t v20 = 4294966996;
        }
      }
      else
      {
        uint64_t v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t sub_1000BDACC(mach_port_t a1, unsigned int a2, long long *a3)
{
  long long v4 = a3[5];
  long long v19 = a3[4];
  long long v20 = v4;
  long long v5 = a3[7];
  long long v21 = a3[6];
  long long v22 = v5;
  long long v6 = a3[1];
  long long v15 = *a3;
  long long v16 = v6;
  long long v7 = a3[3];
  long long v17 = a3[2];
  NDR_record_t v13 = NDR_record;
  unsigned int v14 = a2;
  long long v18 = v7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    uint64_t v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    uint64_t v10 = 4294966995;
    goto LABEL_17;
  }
  uint64_t v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v10 = v14;
  if (v14) {
    goto LABEL_17;
  }
  return v10;
}

uint64_t sub_1000BDC5C(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, void *a9, _DWORD *a10)
{
  int v18 = 1;
  uint64_t v19 = a6;
  int v20 = 16777472;
  int v21 = a7;
  NDR_record_t v22 = NDR_record;
  *(_DWORD *)long long v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  int v24 = a7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              uint64_t v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }
        else
        {
          uint64_t v14 = 4294966996;
        }
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t sub_1000BDE4C(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      uint64_t v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v12 = v18;
            if (!v18)
            {
              int v15 = v20;
              *a2 = v19;
              *a3 = v15;
              int v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = v18 == 0;
          }
          if (v13) {
            uint64_t v12 = 4294966996;
          }
          else {
            uint64_t v12 = v18;
          }
          goto LABEL_23;
        }
      }
      uint64_t v12 = 4294966996;
    }
    else
    {
      uint64_t v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

uint64_t sub_1000BDFC8(uint64_t a1)
{
  uint64_t v1 = (uint64_t)*(&off_100166A10
                + ((107 * ((qword_100180398 - dword_100180F40) ^ 0x58)) ^ byte_100120950[byte_10011D8F0[(107 * ((qword_100180398 - dword_100180F40) ^ 0x58))] ^ 0xB9])
                - 35);
  uint64_t v2 = *(void *)(v1 - 4);
  uint64_t v3 = *(&off_100166A10
       + (byte_100119F30[byte_100123DA8[(107
                                                                                       * ((qword_100180398 + v2) ^ 0x58))
                                                                     - 8] ^ 0x39] ^ (107
                                                                                   * ((qword_100180398 + v2) ^ 0x58)))
       + 67);
  unint64_t v4 = (*v3 + v2) ^ (unint64_t)&v6;
  *(void *)(v1 - 4) = (139864171 * v4) ^ 0x945BD3199FE9FF58;
  *uint64_t v3 = 139864171 * (v4 ^ 0x945BD3199FE9FF58);
  uint64_t v7 = a1;
  unsigned int v8 = 1722 - 3804331 * ((&v7 & 0xA4832A88 | ~(&v7 | 0xA4832A88)) ^ 0xA1E22621);
  LODWORD(v3) = 139864171 * ((*(_DWORD *)v3 - *(_DWORD *)(v1 - 4)) ^ 0x9FE9FF58);
  (*(void (**)(uint64_t *))((char *)*(&off_100166A10
                                              + ((107
                                                                               * ((qword_100180398 + dword_100180F40) ^ 0x58)) ^ byte_100119F30[byte_100123DA0[(107 * ((qword_100180398 + dword_100180F40) ^ 0x58))] ^ 0xAD])
                                              + 80)
                                    + 8
                                    * (byte_100120950[byte_10011D8FC[v3 - 12] ^ 0xB9] ^ v3)
                                    + 14308))(&v7);
  return v9;
}

uint64_t sub_1000BE1C0(char a1, unsigned int a2)
{
  return byte_100123BA4[(byte_100120850[a2] ^ a1) - 4] ^ a2;
}

uint64_t sub_1000BE1EC(char a1, unsigned int a2)
{
  return byte_100120950[(byte_10011D8FC[a2 - 12] ^ a1)] ^ a2;
}

uint64_t sub_1000BE218(unsigned int a1)
{
  return byte_10011D9F0[byte_100119D34[a1 - 4] ^ 0x61] ^ a1;
}

uint64_t sub_1000BE244(char a1, unsigned int a2)
{
  return byte_100119F30[(byte_100123DA8[a2 - 8] ^ a1)] ^ a2;
}

uint64_t sub_1000BE270(unsigned int a1)
{
  return byte_100123BA4[(byte_100120850[a1] ^ 0x57) - 4] ^ a1;
}

uint64_t sub_1000BE2A0(unsigned int a1)
{
  return byte_100119E3C[(byte_100123CA0[a1] ^ 0xF2) - 12] ^ a1;
}

uint64_t sub_1000BE2D0(unsigned int a1)
{
  return byte_100119C34[(byte_100123AAC[a1 - 12] ^ 0x72) - 4] ^ a1;
}

uint64_t sub_1000BE300(uint64_t a1)
{
  uint64_t v1 = (uint64_t)*(&off_100166A10
                + ((107 * ((qword_100180398 + dword_1001803A0) ^ 0x58)) ^ byte_10011D9F0[byte_100119D30[(107 * ((qword_100180398 + dword_1001803A0) ^ 0x58))] ^ 0x61])
                - 137);
  uint64_t v2 = *(void *)(v1 - 4);
  uint64_t v3 = *(&off_100166A10
       + (byte_100119F30[byte_100123DA8[(107
                                                                                       * ((qword_100180398 - v2) ^ 0x58))
                                                                     - 8] ^ 0xAD] ^ (107
                                                                                   * ((qword_100180398 - v2) ^ 0x58)))
       + 18);
  uint64_t v4 = *v3 - v2 - (void)&v6;
  *(void *)(v1 - 4) = (139864171 * v4) ^ 0x945BD3199FE9FF58;
  *uint64_t v3 = 139864171 * (v4 ^ 0x945BD3199FE9FF58);
  unsigned int v8 = 3804331 * ((2 * (&v7 & 0x1E7E56F0) - &v7 + 1635887375) ^ 0x9B1F5A59) + 1228;
  uint64_t v7 = a1;
  LOBYTE(v3) = 107 * ((*(_DWORD *)v3 - *(_DWORD *)(v1 - 4)) ^ 0x58);
  return (*(uint64_t (**)(uint64_t *))((char *)*(&off_100166A10
                                                        + ((107
                                                                                         * ((qword_100180398
                                                                                           + dword_1001803A0) ^ 0x58)) ^ byte_100123BA0[byte_100120850[(107 * ((qword_100180398 + dword_1001803A0) ^ 0x58))] ^ 0x4B])
                                                        + 69)
                                              + 8
                                              * (byte_100119E3C[(byte_100123CA0[v3] ^ 0x53)
                                                                                             - 12] ^ v3)
                                              + 14660))(&v7);
}

uint64_t sub_1000BE500(char a1, unsigned int a2)
{
  return byte_100119C34[(byte_100123AAC[a2 - 12] ^ a1) - 4] ^ a2;
}

uint64_t sub_1000BE52C(unsigned int a1)
{
  return byte_100123BA4[(byte_100120850[a1] ^ 0x4B) - 4] ^ a1;
}

uint64_t sub_1000BE55C(char a1, unsigned int a2)
{
  return byte_10011D9F0[(byte_100119D34[a2 - 4] ^ a1)] ^ a2;
}

uint64_t sub_1000BE588(unsigned int a1)
{
  return byte_100119E3C[(byte_100123CA0[a1] ^ 0x53) - 12] ^ a1;
}

uint64_t sub_1000BE5B8(unsigned int a1)
{
  return byte_100119F30[byte_100123DA8[a1 - 8] ^ 0xAD] ^ a1;
}

uint64_t sub_1000BE5E4(unsigned int a1)
{
  return byte_100120950[byte_10011D8FC[a1 - 12] ^ 0xB9] ^ a1;
}

uint64_t sub_1000BE610(unsigned int a1)
{
  return byte_100119E3C[(byte_100123CA0[a1] ^ 0x62) - 12] ^ a1;
}

uint64_t sub_1000BE640(unsigned int a1)
{
  return byte_100123BA4[(byte_100120850[a1] ^ 0x34) - 4] ^ a1;
}

uint64_t sub_1000BE670(uint64_t a1)
{
  uint64_t v1 = (unint64_t *)*(&off_100166A10
                           + ((107 * (dword_100180318 ^ 0x58 ^ qword_100180398)) ^ byte_100119C30[byte_100123AA0[(107 * (dword_100180318 ^ 0x58 ^ qword_100180398))] ^ 0x14])
                           + 21);
  unsigned __int8 v2 = 107 * ((qword_100180398 - *v1) ^ 0x58);
  uint64_t v3 = (unint64_t *)*(&off_100166A10 + (byte_100120950[byte_10011D8FC[v2 - 12] ^ 0x90] ^ v2)
                                            - 42);
  unint64_t v4 = 139864171 * ((*v3 - *v1) ^ (unint64_t)&v6 ^ 0x945BD3199FE9FF58);
  *uint64_t v1 = v4;
  *uint64_t v3 = v4;
  unsigned int v7 = (3804331
      * ((-1102021746 - (&v7 ^ 0x8C99FC00 | 0xBE507B8E) + (&v7 ^ 0x8C99FC00 | 0x41AF8471)) ^ 0x37A88B27)) ^ 0x460;
  uint64_t v8 = a1;
  LOBYTE(v3) = 107 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x58);
  return (*(uint64_t (**)(unsigned int *))((char *)*(&off_100166A10
                                                             + ((107
                                                                                              * (dword_100180318 ^ 0x58 ^ qword_100180398)) ^ byte_10011D9F0[byte_100119D30[(107 * (dword_100180318 ^ 0x58 ^ qword_100180398))] ^ 0x45])
                                                             + 102)
                                                   + 8
                                                   * (byte_100123BA4[(byte_100120850[v3] ^ 0x57) - 4] ^ v3)
                                                   + 15068))(&v7);
}

uint64_t sub_1000BE880(unsigned int a1)
{
  return byte_100119C34[(byte_100123AAC[a1 - 12] ^ 0x14) - 4] ^ a1;
}

uint64_t sub_1000BE8B0(unsigned int a1)
{
  return byte_100120950[byte_10011D8FC[a1 - 12] ^ 0x90] ^ a1;
}

uint64_t sub_1000BE8DC(char a1, unsigned int a2)
{
  return byte_100119E3C[(byte_100123CA0[a2] ^ a1) - 12] ^ a2;
}

uint64_t sub_1000BE908(unsigned int a1)
{
  return byte_100119F30[byte_100123DA8[a1 - 8] ^ 0x39] ^ a1;
}

uint64_t sub_1000BE934(unsigned int a1)
{
  return byte_10011D9F0[byte_100119D34[a1 - 4] ^ 0x3A] ^ a1;
}

uint64_t sub_1000BE960(unsigned int a1)
{
  return byte_100120950[byte_10011D8FC[a1 - 12] ^ 0x9D] ^ a1;
}

uint64_t sub_1000BE98C(unsigned int a1)
{
  return byte_100119E3C[(byte_100123CA0[a1] ^ 0xA7) - 12] ^ a1;
}

uint64_t sub_1000BE9BC(unsigned int a1)
{
  return byte_10011D9F0[byte_100119D34[a1 - 4] ^ 0x45] ^ a1;
}

uint64_t sub_1000BE9E8(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0x774B811B42847B23);
  int v4 = v2 - 715496183;
  BOOL v3 = v2 - 715496183 < 0;
  int v5 = 715496183 - v2;
  if (!v3) {
    int v5 = v4;
  }
  int v1 = (*(_DWORD *)(a1 + 16) + 1755732067 * ((((2 * a1) | 0x5E2356CE) - a1 - 789687143) ^ 0xF1D716BC) + 1675710196) & 0x9C1EAFD7;
  return (*(uint64_t (**)(void))((char *)*(&off_100166A10 + (v1 ^ 0x31F))
                              + 8
                              * ((13
                                * (v1 + (v5 ^ (v1 - 1516328328)) + ((2 * v5) & 0x4B3D5BFEu) + 1516326521 < 0x7FFFFFFF)) ^ v1)
                              - 4))();
}

uint64_t sub_1000BEAFC(uint64_t a1)
{
  int v1 = 535753261 * ((2 * (a1 & 0x6240BBC7) - a1 + 499074104) ^ 0x174B4A17);
  int v2 = *(_DWORD *)(a1 + 12) ^ v1;
  unsigned int v3 = v1 + *(_DWORD *)(a1 + 8) - 753493622;
  int v4 = (*(_DWORD *)(*(void *)a1 - 0x7C014C707EC207E4) ^ 0xEB3C14DE) + v3;
  unsigned int v5 = v4 - ((2 * v4) & 0xD67829BC) - 348384034;
  *(_DWORD *)(*(void *)a1 - 0x7C014C707EC207E4) = v5;
  return (*(uint64_t (**)(void))((char *)*(&off_100166A10 + v2 + 53) + 8 * ((1827 * ((v5 ^ 0xEB3C14DE) < v3)) ^ v2) - 4))();
}

void sub_1000BEBC4(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 + 1734042137 * (a1 ^ 0x5CCEC34D);
  if (*(_DWORD *)(*(void *)(a1 + 8) - 0x774B811B42847B23) - 715496183 >= 0) {
    unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x774B811B42847B23) - 715496183;
  }
  else {
    unsigned int v3 = 715496183 - *(_DWORD *)(*(void *)(a1 + 8) - 0x774B811B42847B23);
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v2 - 0x774B811B42847B23) - 715496183 >= 0) {
    unsigned int v4 = *(_DWORD *)(v2 - 0x774B811B42847B23) - 715496183;
  }
  else {
    unsigned int v4 = 715496183 - *(_DWORD *)(v2 - 0x774B811B42847B23);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  unsigned int v7 = (535753261 * ((&v7 & 0x66FED9C2 | ~(&v7 | 0x66FED9C2)) ^ 0x93F52812)) ^ (v1 - 773);
  unsigned int v5 = (char *)*(&off_100166A10 + (int)(v1 & 0xD67D74B8)) - 4;
  (*(void (**)(unsigned int *))&v5[8 * v1 + 7688])(&v7);
  if (v3 >= v4) {
    unsigned int v6 = v4;
  }
  else {
    unsigned int v6 = v3;
  }
  __asm { BRAA            X13, X17 }
}

uint64_t sub_1000BED48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  uint64_t v18 = (a17 - 74);
  unint64_t v19 = STACK[0x550];
  STACK[0x600] += v18 ^ 0xFFFFFFFFFFFFFF94;
  *(unsigned char *)(v19 + 335) = (v18 - 32) ^ *(unsigned char *)(a14 + 335) ^ 0xCD ^ *((unsigned char *)*(&off_100166A10 + (int)(v18 ^ 0x77))
                                                                      + 15) ^ *((unsigned char *)*(&off_100166A10
                                                                                         + (int)(v18 ^ 0xD8))
                                                                              + 9) ^ *((unsigned char *)*(&off_100166A10
                                                                                                + (int)v18
                                                                                                - 54)
                                                                                     + 14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 8 * (int)(v18 ^ 0xCA)))(1008845537, 119, a14);
}

uint64_t sub_1000BEE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v9 + 8 * ((1361 * (v8 + 1 == v10 + 32)) ^ a8)))();
}

uint64_t sub_1000BEED4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = v2;
  uint64_t v7 = a1;
  uint64_t v8 = v2;
  unsigned int v5 = (v3 | 0x202)
     - 1734042137 * ((-411779876 - (&v5 | 0xE774BCDC) + (&v5 | 0x188B4323)) ^ 0x4445806E)
     + 410;
  return (*(uint64_t (**)(unsigned int *))(v1 + 8 * ((v3 | 0x202) ^ 0x5BA)))(&v5);
}

uint64_t sub_1000BEF70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16 = *v14;
  *(_DWORD *)(v12 - 0x7CA4338F32EE9BBDLL) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8 * (((v16 == 0x774B811B42847B27) * ((a9 + 992) ^ 0x3F0 ^ (a9 - 1601543462) & 0x5F759F7B)) ^ (a9 + 992))))(a1, a2, a3, a4, a5, a6, a7, a8, a10, v13, a12);
}

uint64_t sub_1000BF044()
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * (v0 ^ 0x22E)))(1576, 2940923044);
  STACK[0x4C0] = v2;
  return (*(uint64_t (**)(void))(v1 + 8 * ((((((v0 - 955) ^ (v2 == 0)) & 1) == 0) * ((v0 - 1206) ^ 0x122)) ^ v0)))();
}

uint64_t sub_1000BF0BC(int a1)
{
  int v4 = (a1 - 1583) | 0x100;
  unint64_t v5 = STACK[0x628];
  int v6 = 535753261 * ((((2 * (v3 - 200)) | 0x32FD6458) - (v3 - 200) - 427733548) ^ 0x138ABC03);
  *(_DWORD *)(v3 - 192) = v1 - v6 + 9281554;
  *(_DWORD *)(v3 - 188) = (v4 - 182) ^ v6;
  *(void *)(v3 - 200) = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v4 ^ 0x6EA)))(v3 - 200);
  return ((uint64_t (*)(uint64_t))STACK[0x458])(v7);
}

uint64_t sub_1000BF154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25)
{
  uint64_t v29 = (250 * (v27 ^ v26 ^ 0x4D7)) ^ 0x63D87DAu;
  *a25 = -1509074232;
  BOOL v31 = (int)v29 > -2042788305 && v25 - 2042788306 < -2042788305;
  int v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v28 + 8 * ((1319 * v31) ^ ((v27 ^ v26) - 423)));
  return v32(a1, v29, 1319, v32);
}

uint64_t sub_1000BF214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = STACK[0x4F0];
  LODWORD(STACK[0x538]) = LODWORD(STACK[0x4F0]) + 64;
  unsigned int v7 = ((v4 - 229) ^ 0x85660331) + v6;
  unsigned int v8 = LODWORD(STACK[0x634]) - 1367083343;
  BOOL v9 = v7 < 0xDADFBD15;
  BOOL v10 = v7 > v8;
  if (v9 != v8 < ((85 * ((v4 + 779) ^ 0x42D)) ^ 0xDADFBFE8)) {
    BOOL v10 = v9;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 8 * ((73 * v10) ^ (v4 + 779))))(a1, a2, a3, a4, 889516850);
}

uint64_t sub_1000BF2B4@<X0>(uint64_t a1@<X1>, unsigned int a2@<W8>)
{
  uint64_t v4 = a2;
  unint64_t v5 = ((((v2 - 1068) | 0x102u) - 197) ^ (unint64_t)(a1 - 76)) + a2;
  if (v5 <= 0x38) {
    unint64_t v5 = 56;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * (((32 * (v5 - v4 + 688154232 > 7)) | ((v5 - v4 + 688154232 > 7) << 6)) ^ v2)))();
}

void sub_1000BF310(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (1734042137 * (((a1 | 0x3389861B) - a1 + (a1 & 0xCC7679E4)) ^ 0x6F474556));
  __asm { BRAA            X14, X17 }
}

uint64_t sub_1000BF3D0()
{
  return sub_1000C6AB4(v0 - 213);
}

uint64_t sub_1000BF3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v9 + 8 * ((1008 * (((((a8 ^ 0x23D) + 970) ^ (2 * (a8 ^ 0x23D))) & v8) == 0)) ^ a8)))();
}

uint64_t sub_1000BF424@<X0>(int a1@<W8>)
{
  uint64_t v12 = 2 * (a1 ^ (v11 + 477));
  uint64_t v13 = v2 - 2393868364 + v12;
  BOOL v15 = ((**v5 - (*v1 ^ v4)) ^ (((v12 - 2368741) & v8) + v7)) + (v3 & (2 * (**v5 - (*v1 ^ v4)))) + v6 == v9
     && v13 != 0;
  return (*(uint64_t (**)(uint64_t))(v10 + 8 * (int)((62 * v15) ^ v12)))(-2393868364);
}

uint64_t sub_1000BF4B8(int a1)
{
  int v5 = (v2 & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
     + ((*(unsigned __int8 *)(v3 + 7) - 1) ^ (v1 + 3 * (a1 ^ 0x437) - 237)) == v1 + ((a1 - 1005) | 0x20) - 171;
  return (*(uint64_t (**)(void))(v4 + 8 * (((32 * v5) | (v5 << 9)) ^ a1)))();
}

uint64_t sub_1000BF51C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,uint64_t a25,uint64_t a26,unsigned __int8 a27,unint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37)
{
  return sub_1000C6528(a1, a2, (unint64_t)&STACK[0x250], a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           v37,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37);
}

uint64_t sub_1000BF528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v16 = (v14 - 1153) ^ 0x3D6u;
  uint64_t v17 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8 * (int)(((((v13 == 0) ^ (v14 + 127)) & 1) * (v16 - 416)) ^ v14));
  return v17(v17, a2, a3, a4, a5, a6, v16, a8, a9, v19, a11, a12, a13);
}

uint64_t sub_1000BF580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  unsigned int v15 = ((v14 - 892) ^ 0x8A74F3A7) + a12;
  BOOL v16 = v12 - 792044206 < v15;
  if (v15 < 0x30FAB30 != (v12 - 792044206) < 0x30FAB30) {
    BOOL v16 = v15 < 0x30FAB30;
  }
  return (*(uint64_t (**)(void))(v13 + 8 * ((63 * !v16) ^ v14)))();
}

uint64_t sub_1000BF5F0(uint64_t a1, int a2)
{
  BOOL v6 = v2 - 1870816601 > 992163229 || v2 - 1870816601 < a2 - 1155320418;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8 * (((2 * v6) | (8 * v6)) ^ v4 ^ 0x55D)))(0x10D7555FEF747C2BLL, 0x1FFEBF9F6);
}

uint64_t sub_1000BF73C@<X0>(int a1@<W8>)
{
  int v6 = a1 + 2013265740;
  if (*v3 + 1431987465 < 0) {
    int v6 = 1827993418 - a1;
  }
  *uint64_t v3 = *v3 - 1920629579 + v6;
  int v7 = v1 + 6643209;
  **(_DWORD **)(v4 - 0x774B811B42847B1FLL) = *(_DWORD *)(*(void *)(v4 - 0x774B811B42847B1FLL) + 4 * (a1 + 92636161));
  BOOL v8 = v2 + 99277444 < v7;
  if (v7 < -2048204278 != v2 + 99277444 < -2048204278) {
    BOOL v8 = v7 < -2048204278;
  }
  return (*(uint64_t (**)(void))(v5 + 8 * ((100 * !v8) ^ (v2 - 1745))))();
}

uint64_t sub_1000BF82C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((STACK[0x3E8] & 0x5463EFF7) + ((LODWORD(STACK[0x414]) - 97) | 0x202) - 1332)
                                * (v0 > 0xF1F6CE13)) ^ (LODWORD(STACK[0x414]) + 417))))();
}

uint64_t sub_1000BF880()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((2 * (v0 ^ 0x67A)) ^ 0x1DD)))();
}

void sub_1000BF958(uint64_t a1)
{
  int v1 = 628203409 * ((a1 - 1979313088 - 2 * (a1 & 0x8A061440)) ^ 0x88E1873);
  int v2 = *(_DWORD *)(a1 + 16) - v1;
  __asm { BRAA            X14, X17 }
}

uint64_t sub_1000BFA24@<X0>(uint64_t a1@<X0>, int a2@<W3>, int a3@<W8>)
{
  return sub_1000D8188(a1, (a2 - 182) | 3u, *(_DWORD *)(*v4 + 4 * (int)((((a2 - 182) | 3) ^ 0x9573E255) + v5)), v3, a3);
}

uint64_t sub_1000BFA54()
{
  return 4294925278;
}

uint64_t sub_1000BFA5C()
{
  int v5 = 460628867 * ((((v4 - 120) ^ 0x352460CE | 0xC105866F) - (((v4 - 120) ^ 0x352460CE) & 0xC105866F)) ^ 0xB8B764DC);
  *(void *)(v4 - 120) = v4 + 0x7C014C707EC2074CLL;
  *(_DWORD *)(v4 - 108) = v1 - v5 - 1882357762;
  *(_DWORD *)(v4 - 104) = (v0 ^ 0x9EDA46BA) + v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (v1 ^ 0x922)))(v4 - 120);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8
                                                     * ((720
                                                       * (*v3
                                                        + 141924430
                                                        + ((*(_DWORD *)(v4 - 152) << (11 * (v1 ^ 0x84) - 121)) & 0x7A ^ 0x38)
                                                        + (*(_DWORD *)(v4 - 152) & 0x3F ^ 0x7EEFAFE3u) < 0xFFFFFFC0)) ^ v1)))(v6, 2956067867);
}

uint64_t sub_1000BFBE8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))*(&off_100162850 + ((113 * (*(_DWORD *)(a2 + 4) != 1576401731)) ^ 0x584u)))();
}

uint64_t sub_1000BFC28(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,int32x4_t a63)
{
  uint64_t v79 = *(uint64_t (**)(uint64_t))(v68 + 8 * v66);
  uint64_t v80 = a46;
  int v81 = BYTE4(a48) ^ 0xDB;
  if (v81 == 2)
  {
    int8x16x4_t v139 = vld4q_s8((const char *)&a36 + 4);
    int v115 = a3 + 1035;
    uint64_t v116 = HIDWORD(a47);
    uint64_t v117 = HIDWORD(a47);
    uint8x16_t v118 = (uint8x16_t)veorq_s8(v139.val[0], v75);
    uint16x8_t v119 = vmovl_u8(*(uint8x8_t *)v118.i8);
    uint16x8_t v120 = vmovl_high_u8(v118);
    uint8x16_t v121 = (uint8x16_t)veorq_s8(v139.val[1], v75);
    _Q17 = vmovl_u8(*(uint8x8_t *)v121.i8);
    _Q16 = vmovl_high_u8(v121);
    __asm
    {
      SHLL2           V18.4S, V16.8H, #0x10
      SHLL2           V19.4S, V17.8H, #0x10
    }
    uint8x16_t v126 = (uint8x16_t)veorq_s8(v139.val[2], v75);
    uint16x8_t v127 = vmovl_high_u8(v126);
    uint16x8_t v128 = vmovl_u8(*(uint8x8_t *)v126.i8);
    v139.val[0] = veorq_s8(v139.val[3], v75);
    v139.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v139.val[0]);
    v139.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v139.val[1]);
    v139.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v139.val[1].i8);
    v139.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v139.val[0].i8);
    v139.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v139.val[0]);
    v139.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v139.val[0].i8);
    int32x4_t v129 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v128.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v119.i8), 0x18uLL)), v139.val[0]);
    int32x4_t v130 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v128, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v119), 0x18uLL)), v139.val[3]);
    int32x4_t v131 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v127.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v120.i8), 0x18uLL)), v139.val[1]);
    int32x4_t v132 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q18, (int8x16_t)vshll_high_n_u16(v127, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v120), 0x18uLL)), v139.val[2]);
    v139.val[0] = veorq_s8(vandq_s8((int8x16_t)v129, v76), (int8x16_t)(*(_OWORD *)v139.val & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    v139.val[3] = veorq_s8(vandq_s8((int8x16_t)v130, v76), (int8x16_t)(*(_OWORD *)&v139.val[3] & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    v139.val[1] = veorq_s8(vandq_s8((int8x16_t)v131, v76), (int8x16_t)(*(_OWORD *)&v139.val[1] & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    v139.val[2] = veorq_s8(vandq_s8((int8x16_t)v132, v76), (int8x16_t)(*(_OWORD *)&v139.val[2] & __PAIR128__(0xFFFFFF06FFFFFF06, 0xFFFFFF06FFFFFF06)));
    a65 = vaddq_s32(vsubq_s32(v131, vaddq_s32((int32x4_t)v139.val[1], (int32x4_t)v139.val[1])), v77);
    a66 = vaddq_s32(vsubq_s32(v132, vaddq_s32((int32x4_t)v139.val[2], (int32x4_t)v139.val[2])), v77);
    a63 = vaddq_s32(vsubq_s32(v129, vaddq_s32((int32x4_t)v139.val[0], (int32x4_t)v139.val[0])), v77);
    a64 = vaddq_s32(vsubq_s32(v130, vaddq_s32((int32x4_t)v139.val[3], (int32x4_t)v139.val[3])), v77);
    uint64_t v133 = (_DWORD *)(v72 + 4 * (v71 + 1966800096));
    int v134 = *(v133 - 8) ^ *(v133 - 3);
    unsigned int v135 = v134 + v69 - ((2 * v134) & 0x87BD3270);
    int v136 = *(_DWORD *)(v72 + 4 * (v71 + 1966800096 + ((v115 + 1275558644) & 0xB3F885FF)) - 5432) ^ *(v133 - 14);
    HIDWORD(v137) = v136 ^ v135 ^ 0x43DE9938;
    LODWORD(v137) = v136 ^ ~v135;
    _DWORD *v133 = (v137 >> 31) + v69 - ((2 * (v137 >> 31)) & 0x87BD3270);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 8 * ((561 * (v73 == 1966800033)) | v115)))(v80, v116, v117);
  }
  else if (v81 == 1)
  {
    int8x16x4_t v138 = vld4q_s8((const char *)&a36 + 4);
    uint64_t v82 = 13 * (a3 ^ 2u);
    uint8x16_t v83 = (uint8x16_t)veorq_s8(v138.val[0], v75);
    uint16x8_t v84 = vmovl_u8(*(uint8x8_t *)v83.i8);
    int8x16_t v85 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v84.i8);
    int8x16_t v86 = (int8x16_t)vmovl_high_u16(v84);
    uint16x8_t v87 = vmovl_high_u8(v83);
    int8x16_t v88 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v87.i8);
    int8x16_t v89 = (int8x16_t)vmovl_high_u16(v87);
    uint8x16_t v90 = (uint8x16_t)veorq_s8(v138.val[1], v75);
    uint16x8_t v91 = vmovl_high_u8(v90);
    uint16x8_t v92 = vmovl_u8(*(uint8x8_t *)v90.i8);
    uint8x16_t v93 = (uint8x16_t)veorq_s8(v138.val[2], v75);
    _Q21 = (int8x16_t)vmovl_high_u8(v93);
    _Q20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v93.i8);
    int8x16_t v96 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL);
    __asm { SHLL2           V20.4S, V20.8H, #0x10 }
    int8x16_t v101 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
    __asm { SHLL2           V21.4S, V21.8H, #0x10 }
    v138.val[0] = veorq_s8(v138.val[3], v75);
    v138.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v138.val[0]);
    v138.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v138.val[1]);
    v138.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v138.val[0].i8);
    v138.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v138.val[0]);
    v138.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v138.val[0].i8), 0x18uLL), v96), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v92.i8, 8uLL), v85));
    v138.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v138.val[3], 0x18uLL), _Q20), vorrq_s8((int8x16_t)vshll_high_n_u16(v92, 8uLL), v86));
    v138.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v138.val[1].i8), 0x18uLL), v101), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v91.i8, 8uLL), v88));
    v138.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v138.val[2], 0x18uLL), _Q21), vorrq_s8((int8x16_t)vshll_high_n_u16(v91, 8uLL), v89));
    int32x4_t v102 = (int32x4_t)veorq_s8(vandq_s8(v138.val[0], v78), (int8x16_t)(*(_OWORD *)&v85 & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    int32x4_t v103 = (int32x4_t)veorq_s8(vandq_s8(v138.val[3], v78), (int8x16_t)(*(_OWORD *)&v86 & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    int32x4_t v104 = (int32x4_t)veorq_s8(vandq_s8(v138.val[1], v78), (int8x16_t)(*(_OWORD *)&v88 & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    int32x4_t v105 = (int32x4_t)veorq_s8(vandq_s8(v138.val[2], v78), (int8x16_t)(*(_OWORD *)&v89 & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
    a65 = vaddq_s32(vsubq_s32((int32x4_t)v138.val[1], vaddq_s32(v104, v104)), v77);
    a66 = vaddq_s32(vsubq_s32((int32x4_t)v138.val[2], vaddq_s32(v105, v105)), v77);
    a63 = vaddq_s32(vsubq_s32((int32x4_t)v138.val[0], vaddq_s32(v102, v102)), v77);
    a64 = vaddq_s32(vsubq_s32((int32x4_t)v138.val[3], vaddq_s32(v103, v103)), v77);
    uint64_t v106 = v73 - 16;
    uint64_t v107 = (v82 + 717);
    char v108 = (char *)*(&off_100166A10 + (int)(v82 ^ 0x371)) - 4;
    char v109 = (char *)*(&off_100166A10 + (int)(v82 ^ 0x342)) - 8;
    int v110 = (HIDWORD(a45) ^ v67)
         + v74
         + ((a46 ^ v67) & (v107 ^ (v67 - 1242) ^ HIDWORD(a46)) | (a46 ^ 0x4921C29F) & (a47 ^ v67))
         + *(_DWORD *)&v109[4 * v106 + 4 * v71]
         + (*(_DWORD *)(v72 + 4 * (v108[v106 + v71] - 79)) ^ v69);
    unint64_t v111 = (char *)*(&off_100166A10 + (int)(v82 ^ 0x30B)) - 8;
    unsigned int v112 = (v110 + v67 - (v70 & (2 * v110))) ^ v67;
    int v113 = ((v112 << (v111[v106 + v71] - 23)) | (v112 >> (23 - v111[v106 + v71]))) + (a46 ^ v67);
    return (*(uint64_t (**)(void, char *, char *, char *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 8 * (int)v82))(a46, v108, v109, v111, v82, v107, v113 + v67 - (v70 & (2 * v113)), v73 - 15, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             v79,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62);
  }
  else
  {
    HIDWORD(a45) = 2 * (HIDWORD(a45) ^ v67) + v67 - (v70 & (4 * (HIDWORD(a45) ^ v67)));
    LODWORD(a46) = 2 * (a46 ^ v67) + v67 - (v70 & (4 * (a46 ^ v67)));
    HIDWORD(a46) = 2 * (HIDWORD(a46) ^ v67) + v67 - (v70 & (4 * (HIDWORD(a46) ^ v67)));
    LODWORD(a47) = 2 * (a47 ^ v67) + v67 - (v70 & (4 * (a47 ^ v67)));
    return v79(v80);
  }
}

uint64_t sub_1000C016C@<X0>(uint64_t a1@<X2>, int a2@<W3>, unsigned int a3@<W8>)
{
  uint64_t v10 = v4 - 8 + ((a2 - 1182) | a3);
  int8x8_t v11 = vrev64_s8(*(int8x8_t *)(v6 + v10));
  *(int8x8_t *)(a1 + v10) = vrev64_s8(vadd_s8(vsub_s8(v11, vand_s8(vadd_s8(v11, v11), v8)), v9));
  return (*(uint64_t (**)(void))(v7 + 8 * (((v5 == -8) * v3) ^ a2)))();
}

uint64_t sub_1000C0178()
{
  STACK[0x458] = *(void *)(v1 + 8 * (v0 - 280));
  return sub_1000CAF4C();
}

void sub_1000C018C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24)
     - 1178560073 * ((((2 * (a1 ^ 0x51A934A8)) | 0xD9B356F8) - (a1 ^ 0x51A934A8) + 321279108) ^ 0x9718B22F);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_1000C02E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (((*(_DWORD *)(a7 + 48 * (v7 + a3)) == ((v8 - a5 - 1081) ^ 0xAE000364))
                                * ((v8 + 347267746) & 0xB4D18EF ^ 0xE7)) ^ v8)))();
}

uint64_t sub_1000C0348(uint64_t a1)
{
  int v3 = (*(uint64_t (**)(void))(v1 + 16432))();
  if (v3 == 16) {
    unsigned int v4 = -42029;
  }
  else {
    unsigned int v4 = -42030;
  }
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  (*(void (**)(uint64_t))(v1 + 16160))(a1);
  return v5;
}

uint64_t sub_1000C0390@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * (((8 * (v1 + 1 != v3)) | (32 * (v1 + 1 != v3))) ^ a1)))(101290468);
}

uint64_t sub_1000C03A8@<X0>(int a1@<W1>, int a2@<W6>, unsigned int a3@<W8>)
{
  int v6 = *(_DWORD *)(v4 + v3 * (uint64_t)a2 + 36);
  BOOL v8 = v6 + 1195288000 > -369112568 && v6 + 1195288000 < SLODWORD(STACK[0x3F8]);
  BOOL v9 = v6 != ((a3 - 730) ^ (a1 - 1814)) + (a3 ^ 0x5F4) && v8;
  return (*(uint64_t (**)(void))(v5 + 8 * ((101 * v9) ^ a3)))();
}

uint64_t sub_1000C0410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000C108C(a1, a2, a3, a4, a5, a6, a7, 1132050804);
}

uint64_t sub_1000C041C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  STACK[0x368] = v4;
  LODWORD(STACK[0x520]) = a4 - 10;
  return sub_1000FD474();
}

uint64_t sub_1000C0434@<X0>(int a1@<W8>)
{
  BOOL v5 = v2 - 1222886961 > 2020990218 || v2 - 1222886961 < v1 - 126493429;
  return (*(uint64_t (**)(void))(v3 + 8 * ((v5 * ((((a1 - 529) | 0x202) - 750) ^ 0x468)) ^ a1)))();
}

uint64_t sub_1000C048C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, void, uint64_t))(v2 + 8 * ((v3 ^ 0x59) + 116)))(a1, 15 * (((v3 ^ 0x59) + 116) ^ 0x11Cu), 2785893064, 157 * (((v3 ^ 0x59) + 116) ^ 0x117u), v1);
}

uint64_t sub_1000C0524@<X0>(int a1@<W4>, int a2@<W8>)
{
  uint64_t v2 = (unint64_t *)STACK[0x5B8];
  STACK[0x388] = STACK[0x2E0];
  STACK[0x3D8] = *v2;
  return sub_1000DDB0C(a1, a2);
}

uint64_t sub_1000C0570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  return (*(uint64_t (**)(void))(*(void *)(v9 + 8 * (v7 - 521))
                              - 4
                              + 8 * ((((a7 & 2) == 0) * (((v7 - 478) | 0x200) ^ v8)) ^ v7)))();
}

uint64_t sub_1000C05A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1541
                                * ((v5 & (2 * (*(unsigned __int8 *)(a2 + 7) - 100)))
                                 + ((*(unsigned __int8 *)(a2 + 7) - 100) ^ v4) == v4 + v3 - 166)) ^ v3)))();
}

uint64_t sub_1000C05E8()
{
  uint64_t v3 = (*(uint64_t (**)(void))(v2 + 8 * (v0 + 1623)))();
  LODWORD(STACK[0x620]) = v1;
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * ((682 * (v1 == ((v0 - 141) | 0x19) + ((v0 - 116) ^ 0xC3DE9906))) ^ v0)))(v3);
}

uint64_t sub_1000C0640(int a1)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((1985 * ((a1 - 1417906742) < 0x28)) ^ v1)))();
}

uint64_t sub_1000C0658(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v9 = *(_DWORD *)STACK[0x3F0] != v5 + 757 + a5 || v6 != a2;
  return (*(uint64_t (**)(void))(v7 + 8 * ((v9 * ((v5 + 83) ^ 0x4E8)) ^ v5)))();
}

void sub_1000C06A4(int a1@<W8>)
{
  int v5 = 1061020485 - a1;
  if (*v4 + 1431987465 < 0) {
    int v5 = v1;
  }
  *v4 += v3 + v2 + v5 + 553;
}

uint64_t sub_1000C0718@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  *(__n128 *)(v5 + v3) = a2;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v3 - 1436 == a1 + 22) * v4) ^ v2)))();
}

uint64_t sub_1000C0744()
{
  STACK[0x3B0] = v0;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((2 * (((v1 == v4) ^ LOBYTE(STACK[0x214])) & 1)) & 0xDF | (32
                                                                                          * (((v1 == v4) ^ LODWORD(STACK[0x214])) & 1))) ^ (v2 - 67))))();
}

uint64_t sub_1000C077C()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((116 * (STACK[0x558] != 0)) ^ (v0 + 791))))();
}

uint64_t sub_1000C07A4()
{
  LODWORD(STACK[0x520]) = v0;
  return sub_1000FD474();
}

uint64_t sub_1000C07B0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1
                                                     + 8
                                                     * ((2
                                                       * (((4 * v2) ^ 0xD ^ (((4 * v2) ^ 0x10DE) == 490)) & 1)) & 0xDF | (32 * (((4 * v2) ^ 0xD ^ (((4 * v2) ^ 0x10DE) == 490)) & 1)) | (4 * v2) ^ 0x10FC)))(a1, 1032920481);
}

void sub_1000C083C()
{
  int v6 = 1225351577 * (((~(v5 - 144) & 0x4306C2E4) - (~(v5 - 144) | 0x4306C2E5)) ^ 0x609C1AF3);
  *(void *)(v5 - 128) = v3;
  *(void *)(v5 - 144) = v1;
  *(_DWORD *)(v5 - 136) = v6 + v0 + ((v4 + 397) ^ 0x39CE14F5);
  *(_DWORD *)(v5 - 120) = v6 + v4 + 1025;
  (*(void (**)(uint64_t))(v2 + 8 * (v4 + 1948)))(v5 - 144);
  sub_1000C7C18();
}

uint64_t sub_1000C08C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45 = *(_DWORD *)(a1 + 28) ^ (535753261 * ((~a1 & 0xA9C956D5 | a1 & 0x5636A92A) ^ 0xA33D58FA));
  unsigned int v46 = 460628867 * ((&v55 & 0x8542F8A5 | ~(&v55 | 0x8542F8A5)) ^ 0x362B8527);
  char v55 = &STACK[0x7C014C707EC20904];
  int v56 = v45 - v46 - 1882357527;
  unsigned int v57 = v46 + 1678855235;
  uint64_t v47 = (*(uint64_t (**)(unint64_t **))((char *)*(&off_100166A10 + (int)(v45 ^ 0xA7))
                                                       + 8 * (int)(v45 ^ 0x837)
                                                       - 4))(&v55);
  return sub_1000CD46C(v47, v48, v45, v49, (uint64_t)v54, (uint64_t)&v53, v50, v51, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t sub_1000C0B0C()
{
  BOOL v5 = v2 - 1218643871 > 2008495858 || v2 - 1218643871 < v3 - 138987789;
  return (*(uint64_t (**)(void))(v1 + 8 * ((v5 * ((58 * (v0 ^ 0x249)) ^ ((v0 ^ 0x19F) + 319))) ^ v0)))();
}

uint64_t sub_1000C0B6C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3)
{
  int v11 = v3 - 211014829;
  int v12 = v4 + 591;
  uint64_t v13 = 4 * (v10 + v5);
  int v14 = v7
      + 366320137
      + v12
      - 419
      + (*(_DWORD *)(*(void *)(a2 - 0x774B811B42847B1FLL) + v13) ^ v8)
      + (*(_DWORD *)(*(void *)(a3 - 0x774B811B42847B1FLL) + v13) ^ v8)
      - 578;
  *(_DWORD *)(*(void *)(a1 - 0x774B811B42847B1FLL) + v13) = v14 + v8 - (v6 & (2 * v14));
  BOOL v16 = v10 - 1290670910 > 1936468818 || v10 - 1290670910 < v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v9
                                                                                         + 8 * ((1168 * v16) ^ v12)))(0x19FCF9FF1DFDBBADLL, 1006335834, 0xEF8F5ED4F7D7DE5CLL, 3004296386, 1936468818);
}

uint64_t sub_1000C0C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v9
                                                                      + 8
                                                                      * (a8 ^ (8
                                                                             * (((a8 + 28) ^ (v8 < ((6 * (a8 ^ 0x3A8)) ^ 0x1CAu))) & 1)))))(a1, a2, a3, 0);
}

uint64_t sub_1000C0CB0()
{
  return 4294925278;
}

uint64_t sub_1000C0CB8(int a1)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (int)((((((a1 + 1706713331) & 0x9A459CBF) - 934) ^ 0x103) * (v1 == v2)) ^ a1)))();
}

uint64_t sub_1000C0CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8 + 8 * ((31 * (*(_DWORD *)(v7 + 48 * (v9 + a6) + 36) != v9)) ^ v6)))();
}

uint64_t sub_1000C0D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1000F793C(3497873977, 3426637972, 150336455, 59268147, a5, a6);
}

uint64_t sub_1000C0EC8(int a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v4 + 96) + 1428) = 596678619;
  return (*(uint64_t (**)(void))(v3 + 8 * (((*(_DWORD *)(a2 + 4) == v2) * (((a1 - 13) ^ 0x1C7) + 856)) ^ a1)))();
}

uint64_t sub_1000C0F10@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v2 - 0x774B811B42847B1FLL) + 4 * (v5 - 979281772)) = *(_DWORD *)(*(void *)(v3 - 0x774B811B42847B1FLL)
                                                                                           + 4 * (v5 - 979281772));
  return (*(uint64_t (**)(void))(a1 + 8 * ((1186 * (v5 - 1 == ((v1 + 79744648) & 0xFB3F36A5 ^ v4))) ^ v1)))();
}

uint64_t sub_1000C0F88@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((((v3 << v5) & a1) == v4) | (4 * (((v3 << v5) & a1) == v4))) ^ v1)))();
}

uint64_t sub_1000C0FB4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v11 = (_DWORD *)STACK[0x3F0];
  *int v11 = v8 - 1;
  int v12 = &v11[6 * (v8 - 717574974)];
  int v13 = v12[2];
  STACK[0x3D8] = *((void *)v12 + 2);
  LODWORD(STACK[0x47C]) = v12[6];
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * (((*(_DWORD *)(v9 + (v13 + a6) * (uint64_t)a7 + 36) == a2) * ((v7 ^ 0x316) + 720)) ^ v7 ^ 0x316)))();
}

void sub_1000C1064()
{
}

uint64_t sub_1000C108C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (v60) {
    int v61 = 1959788296;
  }
  else {
    int v61 = v59 - 237914958 + *a29 - 509;
  }
  *a29 = v61;
  return sub_1000E6FB8(a32, -2064566567, a8, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           (uint64_t)a29,
           a30,
           a31,
           (uint64_t)a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59);
}

uint64_t sub_1000C1120(unint64_t a1)
{
  STACK[0x5B0] = v2 - 176;
  STACK[0x550] = a1;
  return (*(uint64_t (**)(void))(v4 + 8 * (v1 ^ (849 * (v3 > a1)))))();
}

uint64_t sub_1000C11A4@<X0>(unint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, void *a4@<X6>, unsigned int a5@<W7>, int a6@<W8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v36 = 4 * (v26 + 1 + a3);
  unint64_t v37 = (*(_DWORD *)(a23 + v36) ^ v23) + (a2 ^ HIDWORD(v25)) + a5 * (unint64_t)(*(_DWORD *)(*a4 + v36) ^ v23);
  unint64_t v38 = HIDWORD(v35)
      + v28 * (unint64_t)(*(_DWORD *)(*v29 + v36) ^ v23)
      + ((v37 + ((a6 + 154) ^ (v27 + 979)) - (v30 & (2 * v37))) ^ a1);
  *(_DWORD *)(a23 + 4 * (v26 + a3)) = v38 + v23 - (v24 & (2 * v38));
  BOOL v40 = v26 + v32 < v33 && v26 + v32 >= v34;
  return (*(uint64_t (**)(void))(v31 + 8 * ((14 * v40) ^ a6)))();
}

uint64_t sub_1000C1248(int a1)
{
  *(_DWORD *)(*v4 + 4 * (v5 + a1)) = *(_DWORD *)(*v4 + 4 * (a1 + v2));
  return (*(uint64_t (**)(void))(v8 + 8 * (((a1 + v2 - 1 > v6) * v7) ^ v3)))((v1 + a1 - 228));
}

uint64_t sub_1000C1288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,int a46)
{
  _DWORD *v46 = STACK[0x580];
  v46[85] = STACK[0x4F4];
  v46[86] = STACK[0x464];
  v46[87] = STACK[0x454];
  v46[88] = STACK[0x4B8];
  return (*(uint64_t (**)(void))(v47 + 8 * (((STACK[0x4D8] == 0) * (((3 * (a46 ^ 0x80)) ^ 0x569) - 416)) ^ (a46 + 135))))();
}

uint64_t sub_1000C12F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                                         + 8
                                                                                         * (((4 * (v2 != v3)) | (32 * (v2 != v3))) ^ v4)))(a1, a2, 283, 2422341081, 1872625540, 337);
}

uint64_t sub_1000C1344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  int v56 = 1178560073 * ((((2 * (v55 - 200)) | 0x190D98F6) - (v55 - 200) + 1937322885) ^ 0xA6EEE180);
  *(void *)(v55 - 200) = a15;
  *(void *)(v55 - 192) = 0;
  *(_DWORD *)(v55 - 160) = v56 + 449729482;
  *(void *)(v55 - 136) = 0;
  *(void *)(v55 - 152) = STACK[0x3D8];
  *(void *)(v55 - 184) = a51;
  *(void *)(v55 - 168) = a53;
  *(_DWORD *)(v55 - 176) = v56 + v53 + 165;
  uint64_t v57 = (*(uint64_t (**)(uint64_t))(v54 + 8 * (v53 + 1725)))(v55 - 200);
  int v58 = *(_DWORD *)(v55 - 144);
  LODWORD(STACK[0x624]) = v58;
  return (*(uint64_t (**)(uint64_t))(v54
                                            + 8
                                            * (((v58 == -1008821960) * (((v53 + 8) | 1) ^ ((v53 ^ 9) + 1316))) ^ v53)))(v57);
}

uint64_t sub_1000C1420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,int a26,uint64_t a27,int a28,int a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,int a60,int a61)
{
  int v62 = a26 - ((((a61 ^ 0x2A4) - 717) ^ 0x1588E5B2) & a29) + 1743004273;
  return (*(uint64_t (**)(void))(v61
                              + 8
                              * ((125
                                * (((2 * v62) & 0xDBD6DF5C ^ 0x1180C10C) + (v62 ^ 0x672F1F68) + 1048050315 == 744712761)) ^ a61)))();
}

uint64_t sub_1000C14E4()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((114 * (STACK[0x4C0] == 0)) ^ (v0 + 1168))))();
}

uint64_t sub_1000C1510(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((62 * (a7 + 1 != v8 + 24)) ^ a3)))();
}

uint64_t sub_1000C15C0@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W8>)
{
  *(unsigned char *)(v3 + (v4 - 1872625541)) = *(unsigned char *)(a2 + (v4 - 1872625541));
  return (*(uint64_t (**)(void))(v5 + 8 * (((v4 - 1 == a3) * (((a1 - 894) | 0x4E0) - 1306)) ^ (a1 - 1179))))();
}

uint64_t sub_1000C1608()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
                                 + ((*(unsigned __int8 *)(v3 + 5) - 13) ^ v0) == v0)
                                * (v2 + 1088)) ^ v2)))();
}

uint64_t sub_1000C163C(uint64_t result)
{
  *(_DWORD *)(result + 4) = ((v2 - 51) ^ 0xAA87F75F) - v1;
  return result;
}

uint64_t sub_1000C1658@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  BOOL v17 = a1 + 8 != (((v14 - 190) | v15) ^ a14 ^ (v14 - 1887543688) & 0x7EAFED5F);
  return (*(uint64_t (**)(void))(v16 + 8 * (((4 * v17) | (8 * v17)) ^ v14)))();
}

uint64_t sub_1000C16A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  return (*(uint64_t (**)(void))(v6 + 8 * (((a6 - 863 + a6 - 289 - 986) * (v7 == a5)) ^ a6)))();
}

uint64_t sub_1000C16D4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W7>, int a6@<W8>)
{
  int v17 = v6;
  int v18 = v7;
  int v20 = ((v18 ^ a1) + v13 - ((v8 ^ 0x23 ^ (v15 + 1021)) & (2 * (v18 ^ a1)))) ^ v17;
  int v21 = a5 ^ v13;
  int v22 = *(_DWORD *)(v10 + 4 * (*(unsigned char *)(a2 + v16 + v12) - 79)) ^ v9;
  int v23 = v21
      + a6
      + *(_DWORD *)(a3 + 4 * (v16 + v12))
      + v20
      + v22
      + v13
      - (v15 & (2 * (v21 + a6 + *(_DWORD *)(a3 + 4 * (v16 + v12)) + v20 + v22)));
  unsigned int v24 = (((v23 ^ v13) << (*(unsigned char *)(a4 + v16 + v12) - 23)) | ((v23 ^ v13) >> (23 - *(unsigned char *)(a4 + v16 + v12))))
      + (a1 ^ v13);
  return (*(uint64_t (**)(void))(v11 + 8 * ((35 * (v16 + 1 == v14 + 48)) ^ v8)))(v24 + v13 - (v15 & (2 * v24)));
}

uint64_t sub_1000C179C()
{
  char v9 = ((14 * (v2 ^ 0xC9)) ^ 0x39) + v5;
  *(unsigned char *)(v7 + ((14 * (v2 ^ 0x1C9)) ^ 0xB7E37D39) + v5) = *(unsigned char *)(*(void *)(v6 + 8 * (v2 ^ 0x1EC))
                                                                      + (v9 & 0xF)
                                                                      - 8) ^ *(unsigned char *)(v0
                                                                                        + ((14 * (v2 ^ 0x1C9)) ^ 0xB7E37D39)
                                                                                        + v5) ^ *(unsigned char *)(*(void *)(v6 + 8 * (v2 - 292)) + (v9 & 0xF) - 12) ^ (23 * (v9 & 0xF)) ^ *(unsigned char *)(*(void *)(v6 + 8 * (v2 ^ 0x195)) + (v9 & 0xF) - 3);
  BOOL v10 = v3 > 0x66DF3342;
  if (v10 == v5 + 1359234303 < (v1 + 1109)) {
    BOOL v10 = v5 + 1359234303 < v4;
  }
  return (*(uint64_t (**)(void))(v8 + 8 * ((1819 * v10) ^ v2)))();
}

uint64_t sub_1000C1870()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((115 * (((v1 < v0) ^ (LODWORD(STACK[0x414]) - 76)) & 1)) ^ (LODWORD(STACK[0x414]) + 677))))();
}

uint64_t sub_1000C18A8@<X0>(int a1@<W3>, int a2@<W5>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(void))(a3 + 8
                                   * ((49 * ((((141 * (a1 ^ 0x27D)) ^ 0x400003DB) & (-1 - a2)) != 0)) ^ a1 ^ 0x3B1)))();
}

uint64_t sub_1000C1978@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4
                                                     + 8
                                                     * (((((v3 ^ 0x1DF) + 365) ^ (v3 + 1550)) * (a2 - v2 == 1470718752)) ^ v3)))(a1, 583083080);
}

uint64_t sub_1000C19CC()
{
  *(_DWORD *)(*(void *)(v4 - 0x774B811B42847B1FLL) + 4 * ((v2 ^ 0x5E9 ^ (v1 + 1204)) + v0)) = -1509074232;
  return (*(uint64_t (**)(void))(v3 + 8 * ((v2 - 1324) | (4 * ((v1 + v0 + 1549) < 0x7FFFFFFF)))))();
}

uint64_t sub_1000C1A30(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (int)((((((a8 + 1394) ^ 0x78C) & a1) == 0) * ((a8 + 1673373152) & 0x9C425BCF ^ 0x3F3)) ^ a8)))();
}

void sub_1000C1A80()
{
}

uint64_t sub_1000C1AFC(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v11 = (*(unsigned __int8 *)(STACK[0x4C0] + 1516) ^ a1) - (*(unsigned char *)STACK[0x4C8] - 81);
  return (*(uint64_t (**)(void))(v10
                              + 8
                              * (((((v8 - 439 + a8) & (2 * v11)) + (v11 ^ (a3 + 253)) == ((v8 - 8) ^ a3)) * v9) | (v8 - 439))))();
}

uint64_t sub_1000C1B64(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18)
{
  unsigned int v21 = v20 - 234510841 + (a6 ^ (a6 + 1016)) + 201;
  BOOL v22 = v21 < v18;
  BOOL v23 = v21 > a18;
  if (a18 < v18 != v22) {
    BOOL v24 = v22;
  }
  else {
    BOOL v24 = v23;
  }
  return (*(uint64_t (**)(void))(v19 + 8 * ((76 * !v24) ^ (a4 + a6 + 574))))();
}

uint64_t sub_1000C1BE0()
{
  return 0;
}

uint64_t sub_1000C1C20(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((v2 == 1) * a2) ^ v3)))();
}

uint64_t sub_1000C1C28()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((((4 * (v2 ^ 0x207) + 757) ^ v2 ^ 0x127) * (v0 == v1)) ^ v2)))();
}

void sub_1000C1C6C()
{
}

uint64_t sub_1000C1C78@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v10 = v2 - 489424971;
  int v11 = v2 - 1;
  int v12 = *(unsigned __int8 *)(v5 + v10);
  if (v12 == 84) {
    __asm { BRAA            X11, X17 }
  }
  if (v12 == 212)
  {
    int v13 = -1008821960;
    uint64_t v14 = *(void *)(v3 + 8);
    int v15 = *(unsigned __int8 *)(v3 + 16) ^ v4;
    *(void *)unint64_t result = v5;
    *(_DWORD *)(result + 8) = v6;
    *(_DWORD *)(result + 12) = v11;
    if (v15 == 56) {
      int v16 = 535412524;
    }
    else {
      int v16 = 535412525;
    }
    *(_DWORD *)(result + 16) = 740814134;
    *(_DWORD *)(result + 20) = v16;
    *(_DWORD *)(result + 24) = -1008821960;
    *(void *)(v14 - 0x5287AD6752155BFDLL) = a2;
  }
  else
  {
    unint64_t result = (*(uint64_t (**)(void))(v9 + 8 * (v8 ^ 0x155)))();
    int v13 = 1008845537;
  }
  *(_DWORD *)uint64_t v3 = v13;
  return result;
}

uint64_t sub_1000C1D60()
{
  *(void *)(v4 - 220 + v1 - 1202683098) = 0x5454545454545454;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((v0 & 0xFFFFFFFFFFFFFFF8) == 8) * (v2 & 0xA002FBDD ^ 0x713)) ^ v2 & 0xA002FBDD)))();
}

uint64_t sub_1000C1DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v10 = *(_DWORD *)(v8 - 252 + ((v6 + v4) & 0xFFFFFFFC) + 72);
  *(unsigned char *)(a3 + (v6 + v4)) = v10 ^ 0x34;
  *(unsigned char *)(a3 + (v6 + v4 + 1)) = (BYTE1(v10) ^ 0x3D)
                                               + ((v9 + v5 - 98) ^ 0xF6)
                                               - ((2 * (BYTE1(v10) ^ 0x3D)) & 0xA8);
  *(unsigned char *)(a3 + (v6 + v4 + 2)) = (BYTE2(v10) ^ 0xDE) - ((2 * (BYTE2(v10) ^ 0xDE)) & 0xA8) + 84;
  *(unsigned char *)(a3 + (v6 + v4 + 3)) = (HIBYTE(v10) ^ 0xB6) - ((2 * (HIBYTE(v10) ^ 0xB6)) & 0xA8) + 84;
  unsigned int v11 = *(_DWORD *)(v8 - 160) - 1948202876;
  BOOL v12 = v11 < v3;
  BOOL v13 = v6 + 1271827037 < v11;
  if (v6 + 1271827037 < v3 != v12) {
    BOOL v13 = v12;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((592 * v13) ^ v5)))();
}

uint64_t sub_1000C1EA4(int8x16_t a1, double a2, double a3, double a4, int8x16_t a5, uint64_t a6, int a7, uint64_t a8, int a9)
{
  *int v10 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v13 + (v9 + a9)), vandq_s8(vaddq_s8(*(int8x16_t *)(v13 + (v9 + a9)), *(int8x16_t *)(v13 + (v9 + a9))), a5)), a1);
  return (*(uint64_t (**)(void))(v12 + 8 * (a7 + v11 - 739)))();
}

uint64_t sub_1000C1EF8()
{
  return sub_1000C1F14();
}

uint64_t sub_1000C1F14@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v1 + 96) + 528) = 1144438011;
  *(_DWORD *)(*(void *)(v1 + 96) + 532) = 715496183;
  *(void *)(*(void *)(v1 + 96) + 536) = *(void *)(v1 + 96) + 544;
  uint64_t v5 = *(void *)(v1 + 96) + 0x774B811B42847D37;
  unsigned int v6 = 3804331 * ((2022953891 - (&v9 | 0x7893D3A3) + (&v9 | 0x876C2C5C)) ^ 0x7DF2DF0A);
  uint64_t v13 = *(void *)(v2 + 8) + (*(_DWORD *)(v2 + 4) - v4);
  int v10 = (v3 + 1165) ^ v6;
  int v11 = (v4 - 207778427) ^ v6;
  uint64_t v9 = v5;
  (*(void (**)(uint64_t *))(a1 + 8 * (v3 + 1657)))(&v9);
  int v7 = v12;
  *(void *)(*(void *)(v1 + 96) + 512) = *(void *)(v2 + 8) + (*(_DWORD *)(v2 + 4) - v4);
  return v7 ^ (v3 - 1126435035);
}

uint64_t sub_1000C2040()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
                                 + ((*(unsigned __int8 *)(v3 + 3) - 134) ^ v0) == v0)
                                * ((v2 - 459) ^ 0x1AA)) ^ v2)))();
}

uint64_t sub_1000C207C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  *(void *)(v26 - 104) = a21;
  *(_DWORD *)(v26 - 112) = (v22 - 75) ^ (1734042137
                                       * ((20409577
                                         - ((v26 - 120) ^ 0x336CD600 | 0x1376CE9)
                                         + ((v26 - 120) ^ 0x336CD600 | 0xFEC89316)) ^ 0x916A865B));
  *(void *)(v26 - 120) = v25;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v21 + 8 * (v22 ^ v24)))(v26 - 120);
  return (*(uint64_t (**)(uint64_t))(v21
                                            + 8 * (((v23 == v22 + 1414173621) * (((v22 - 509) | 0x206) - 437)) ^ v22)))(v27);
}

uint64_t sub_1000C2144()
{
  int v3 = 460628867 * (((((v2 - 200) | 0x53AD454E) ^ 0xFFFFFFFE) - (~(v2 - 200) | 0xAC52BAB1)) ^ 0xE0C438CC);
  *(void *)(v2 - 200) = STACK[0x578];
  *(_DWORD *)(v2 - 188) = -1882357475 - v3 + v0 + 8;
  *(_DWORD *)(v2 - 184) = v3 + 1678855235;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 + 2053)))(v2 - 200);
  STACK[0x458] = *(void *)(v1 + 8 * v0);
  return sub_1000CAF4C(v4);
}

uint64_t sub_1000C21FC()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((((v1 - 241) ^ 0x6E9) * (v0 == v3)) ^ (v1 - 203))))();
}

uint64_t sub_1000C222C()
{
  _DWORD *v0 = 715496183;
  return sub_1000D07B4();
}

uint64_t sub_1000C2238()
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(v2 + 8 * ((v0 - 571) ^ 0x6FD)))(v1);
  LODWORD(STACK[0x4E8]) = 1008845548;
  return (*(uint64_t (**)(uint64_t))(v2
                                            + 8
                                            * (((STACK[0x4D8] == 0) * (((3 * ((v0 - 571) ^ 0x80)) ^ 0x569) - 416)) ^ (v0 - 436))))(v3);
}

void sub_1000C22BC()
{
  STACK[0x458] = *(void *)(v1 + 8 * (v0 - 247));
  JUMPOUT(0x1000CAF44);
}

uint64_t sub_1000C22E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  int v36 = 1755732067 * (((v35 - 144) & 0xD61CC7D5 | ~((v35 - 144) | 0xD61CC7D5)) ^ 0xF72585F1);
  *(_DWORD *)(v35 - 144) = v33 - v36 - 177;
  *(void *)(v35 - 136) = &a31 + v31;
  *(_DWORD *)(v35 - 128) = v36 ^ 0x4B9F258;
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(v32 + 8 * (v33 ^ 0x3B5)))(v35 - 144);
  return (*(uint64_t (**)(uint64_t))(v32 + 8 * ((((v33 + 112) ^ 0x539) * (v34 == 0)) ^ (v33 + 122))))(v37);
}

void sub_1000C23C8(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x7C014C707EC207E8) = (*(_DWORD *)(a1 - 0x7C014C707EC207E8) ^ 0x5AE82903)
                                         + 1525164291
                                         - ((2 * (*(_DWORD *)(a1 - 0x7C014C707EC207E8) ^ 0x5AE82903) + 2) & 0xB5D05206)
                                         + 1;
}

uint64_t sub_1000C2410(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return (*(uint64_t (**)(void))(v17
                              + 8
                              * ((23
                                * (a14 + v16 - (unint64_t)(((v15 - 644 - a4 + 505) ^ 0x460E3E31u) + v14) > 0xF)) ^ (v15 - 644))))();
}

uint64_t sub_1000C245C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,unsigned int a40)
{
  unsigned int v46 = a3 ^ (((v40 ^ (a4 - 1290) ^ 0x71D1B2B2) & *v45 | v45[623] & 0x80000000) >> 1);
  v45[623] = v45[396] ^ a6 ^ *(_DWORD *)(v43 + 4 * ((*v45 & 1) == 0)) ^ (v46 + v42 - (v44 & (2 * v46)));
  return (*(uint64_t (**)(void))(v41 + 8 * ((859 * (a40 > 0x26F)) ^ v40)))();
}

uint64_t sub_1000C24D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (int)(((((v5 - 1780842871) & 0x6A2587BD ^ 0xFFFFF9E1) + (v5 ^ 0xC2)) * (v4 == a4)) ^ v5)))();
}

uint64_t sub_1000C2520()
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8 * ((v0 | 0x140) + 1165)))(1576, 3012117910);
  STACK[0x448] = v2;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((v2 == 0) * ((((v0 | 0x140) + 493894794) & 0xE28FC225) - 504)) ^ (v0 | 0x140))))();
}

uint64_t sub_1000C258C@<X0>(uint64_t a1@<X0>, int a2@<W3>, int a3@<W5>, int a4@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4
                                                     + 8
                                                     * ((850
                                                       * (12 * (v5 ^ (a3 + 35)) + a4 - 688155420 < 0x38)) ^ (a2 + v5 - 787))))(a1, -688154232);
}

uint64_t sub_1000C25E4()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (v2 | (((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
                                      + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == (v2 ^ 0x23F ^ (v0 - 250))) << 10))))();
}

uint64_t sub_1000C2620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12 = (v10 - 1360);
  unint64_t v13 = ((v12 + 0x37BCEFA9F5BD7D8DLL) ^ (unint64_t)&a9)
      + ((2 * (void)&a9) & 0x6F79DF53EB7AFD90)
      - 0x22008B00811016BELL;
  a9 = v9 - 1;
  *(unsigned char *)(a2 + a9) = ((v13 - 17) ^ 0xBA) * v13;
  int v14 = *(uint64_t (**)(void))(v11
                                         + 8 * (int)(((a9 != 0) * (((v12 + 1327572317) & 0xB0DEDDF6) - 1136)) ^ v12));
  return v14(v14);
}

uint64_t sub_1000C26C8@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v19 = a1 ^ 0x6BB;
  int v20 = v19 + 303;
  *(_DWORD *)(v18 - 112) = (v19 + 1472) ^ (1755732067
                                         * ((2 * ((v18 - 144) & 0x4917EFC8) - (v18 - 144) - 1226305483) ^ 0x682EADEE));
  *(void *)(v18 - 128) = a13;
  *(void *)(v18 - 120) = a5;
  *(void *)(v18 - 104) = a15;
  *(void *)(v18 - 144) = a15;
  *(void *)(v18 - 136) = a17;
  uint64_t v21 = v17;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (v19 + 1535)))(v18 - 144);
  return (*(uint64_t (**)(uint64_t))(v21
                                            + 8
                                            * ((50
                                              * (a14 - 1999839575 < 216 * (v20 ^ 0x2E7) + ((v20 + 443) ^ 0x7FFFFE73u))) ^ (v20 + 501))))(v22);
}

uint64_t sub_1000C2734@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  uint64_t v41 = &a34 + v37;
  uint64_t v55 = &a22 + v37;
  uint64_t v54 = &a28 + v37;
  int v53 = &a26 + v37;
  char v52 = &a36 + v37;
  uint64_t v51 = &a30 + v37;
  uint64_t v50 = &a24 + v37;
  int v42 = &a20 + v37;
  int v43 = (v36 - 1173859331) & 0x45F7ADF7;
  uint64_t v44 = a1[5];
  uint64_t v57 = a1[2];
  uint64_t v45 = *a1;
  *(void *)(v40 - 104) = *(void *)(*a1 - 0x3303C932EE2955D7);
  *(_DWORD *)(v40 - 112) = (v43 + 668) ^ (1755732067
                                        * ((((v40 - 144) ^ 0x103A565 | 0xB8EC0A9A)
                                          + ((v40 - 144) ^ 0x98C00A80 | 0x4713F565)) ^ 0x4705123F));
  *(void *)(v40 - 144) = &a34 + v37;
  *(void *)(v40 - 136) = v44;
  *(void *)(v40 - 128) = v45;
  *(void *)(v40 - 120) = a2;
  uint64_t v58 = 8 * (v43 ^ 0x367u);
  uint64_t v59 = v38;
  (*(void (**)(uint64_t))(v38 + v58))(v40 - 144);
  *(void *)(v40 - 128) = v41;
  *(void *)(v40 - 120) = v44;
  *(void *)(v40 - 112) = v45;
  *(_DWORD *)(v40 - 136) = ~(1374699841 * ((2 * ((v40 - 144) & 0x6E8E8CC0) - (v40 - 144) + 292647738) ^ 0x7C856B33))
                         + v43;
  *(void *)(v40 - 144) = v42;
  (*(void (**)(uint64_t))(v59 + 8 * (v43 ^ 0x306u)))(v40 - 144);
  int v46 = 2 * (v40 - 144);
  *(_DWORD *)(v40 - 112) = (v43 + 668) ^ (1755732067 * (((v46 | 0xBA98ACA8) - (v40 - 144) + 582199724) ^ 0x38AEB8F));
  *(void *)(v40 - 128) = v45;
  *(void *)(v40 - 120) = v42;
  *(void *)(v40 - 104) = v41;
  *(void *)(v40 - 144) = v55;
  *(void *)(v40 - 136) = v44;
  (*(void (**)(uint64_t))(v59 + v58))(v40 - 144);
  *(void *)(v40 - 104) = v55;
  *(_DWORD *)(v40 - 112) = (v43 + 668) ^ (1755732067 * (((v46 | 0x25255A24) - (v40 - 144) - 311602450) ^ 0xCC5410C9));
  *(void *)(v40 - 128) = v45;
  *(void *)(v40 - 120) = v42;
  *(void *)(v40 - 144) = v54;
  *(void *)(v40 - 136) = v44;
  uint64_t v56 = 8 * (v43 + 731);
  (*(void (**)(uint64_t))(v59 + v56))(v40 - 144);
  *(void *)(v40 - 144) = v53;
  *(void *)(v40 - 136) = v44;
  *(void *)(v40 - 104) = v54;
  *(_DWORD *)(v40 - 112) = (v43 + 668) ^ (1755732067
                                        * (((v40 - 144) & 0x88EEC67C | ~((v40 - 144) | 0x88EEC67C)) ^ 0xA9D78458));
  *(void *)(v40 - 128) = v45;
  *(void *)(v40 - 120) = v42;
  (*(void (**)(uint64_t))(v59 + v56))(v40 - 144);
  *(void *)(v40 - 104) = v53;
  *(_DWORD *)(v40 - 112) = (v43 + 668) ^ (1755732067
                                        * ((2061250515 - ((v40 - 144) | 0x7ADC2FD3) + ((v40 - 144) | 0x8523D02C)) ^ 0x5BE56DF7));
  *(void *)(v40 - 144) = v52;
  *(void *)(v40 - 136) = v44;
  *(void *)(v40 - 128) = v45;
  *(void *)(v40 - 120) = v42;
  (*(void (**)(uint64_t))(v59 + v58))(v40 - 144);
  *(void *)(v40 - 144) = v51;
  *(void *)(v40 - 136) = v44;
  *(void *)(v40 - 128) = v45;
  *(void *)(v40 - 120) = v42;
  *(_DWORD *)(v40 - 112) = (v43 + 668) ^ (1755732067
                                        * (((((v40 - 144) | 0x4FD1B326) ^ 0xFFFFFFFE) - (~(v40 - 144) | 0xB02E4CD9)) ^ 0x6EE8F102));
  *(void *)(v40 - 104) = v52;
  (*(void (**)(uint64_t))(v59 + v58))(v40 - 144);
  *(_DWORD *)(v40 - 112) = (v43 + 668) ^ (1755732067
                                        * ((((v40 - 144) | 0x8A590ABA) - (v40 - 144) + ((v40 - 144) & 0x75A6F540)) ^ 0x549FB761));
  *(void *)(v40 - 144) = v50;
  *(void *)(v40 - 136) = v44;
  *(void *)(v40 - 104) = v51;
  *(void *)(v40 - 128) = v45;
  *(void *)(v40 - 120) = v42;
  (*(void (**)(uint64_t))(v59 + v56))(v40 - 144);
  *(void *)(v40 - 104) = v50;
  *(void *)(v40 - 144) = v42;
  *(void *)(v40 - 136) = v44;
  *(_DWORD *)(v40 - 112) = (v43 + 668) ^ (1755732067 * ((v40 - 144) ^ 0xDEC6BDDB));
  *(void *)(v40 - 128) = v45;
  *(void *)(v40 - 120) = v42;
  (*(void (**)(uint64_t))(v59 + v56))(v40 - 144);
  uint64_t v47 = *(void *)(v45 - 0x3303C932EE2955DFLL);
  *(_DWORD *)(v40 - 128) = v43 + 1374699841 * ((v40 - 144) ^ 0x6DF41809) + 462;
  *(void *)(v40 - 144) = v39;
  *(void *)(v40 - 136) = v47;
  (*(void (**)(uint64_t))(v59 + 8 * (v43 ^ 0x36Cu)))(v40 - 144);
  *(_DWORD *)(v40 - 132) = (v43 - 174) ^ (1755732067
                                        * ((((v40 - 144) | 0x84BF014B) - (v40 - 144) + ((v40 - 144) & 0x7B40FEB0)) ^ 0x5A79BC90));
  *(void *)(v40 - 144) = v57;
  uint64_t v48 = (*(uint64_t (**)(uint64_t))(v59 + 8 * (v43 + 813)))(v40 - 144);
  return (*(uint64_t (**)(uint64_t))(v59
                                            + 8
                                            * ((50
                                              * (((v43 - 386547142) & 0x170A3DFFu)
                                               + *(_DWORD *)(v40 - 136)
                                               - 1999839576
                                               - 1295 < (((v43 - 82) | 0x18) ^ 0x7FFFFB63u))) ^ v43)))(v48);
}

uint64_t sub_1000C2CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(v5
                                                                     + 8
                                                                     * ((234 * (((a5 - 1355) & v6) == a5 - 1379)) ^ a5)))(a1, a2, (a5 - 251), (v7 - v8));
}

uint64_t sub_1000C2D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v13 = (a5 + 134) | 0x100;
  unint64_t v14 = a1
      - 0x10D7555FEF748211
      + (v13 - 408)
      + (v13 + 144)
      + (*(_DWORD *)(v10 + 4 * v11) ^ v9);
  *(_DWORD *)(v10 + 4 * v11) = v14 + v9 - ((2 * v14) & 0x4C1AB590);
  return (*(uint64_t (**)(void))(v8 + 8 * ((((a4 ^ HIDWORD(v14)) + (a6 & (v14 >> 31)) + a7 == v12) * a8) ^ v13)))();
}

uint64_t sub_1000C2D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v16 - 136) = a13;
  *(void *)(v16 - 128) = v13;
  *(_DWORD *)(v16 - 120) = v15 + 1374699841 * ((v16 - 136) ^ 0x6DF41809) + 1254;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v14 + 8 * (v15 + 1532)))(v16 - 136);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8 * (int)(((((v15 + 911081022) & 0xC9B2015B) + 1609) * (a11 < 1)) ^ v15)))(v17);
}

uint64_t sub_1000C2E18()
{
  unsigned int v7 = (v0 + 238017848) & 0xFFFE6F6C;
  _DWORD *v5 = v5[623];
  *(_DWORD *)(v6 - 136) = ((v7 + 1541996720) & 0x7B17DFA7) + v3;
  *(_DWORD *)(v6 - 132) = v7 + 1541996720 + v3;
  *(_DWORD *)(v6 - 108) = ((v7 + 1541996720) ^ 0x26) + v3;
  *(_DWORD *)(v6 - 120) = 1866716922 - v3 + v7;
  *(_DWORD *)(v6 - 116) = v3 ^ 1;
  *(void *)(v6 - 128) = (v2 + 1) + v3;
  *(void *)(v6 - 144) = v3 ^ 3;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v4 + 8 * (int)(v7 ^ (v1 - 668))))(v6 - 144);
  return (*(uint64_t (**)(uint64_t))(v4 + 8 * *(int *)(v6 - 112)))(v8);
}

uint64_t sub_1000C2EE0@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (v2 ^ (30 * ((unint64_t)(v1 - a1) > 0x1F)))))();
}

uint64_t sub_1000C2F10(double a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, uint64_t a15, uint64_t a16)
{
  uint64_t v28 = v23 - 16 + (v20 ^ v16);
  uint64_t v29 = ((_BYTE)v23 - 16 + (v20 ^ v16)) & 0xF;
  v31.i64[0] = vqtbl4q_s8(*(int8x16x4_t *)(&a2 - 1), v25).u64[0];
  v31.i64[1] = vqtbl4q_s8(*(int8x16x4_t *)a5.n128_u64, v25).u64[0];
  int8x16_t v32 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(a15 + v28), *(int8x16_t *)(v17 + (v28 & 0xF) - 15)), veorq_s8(*(int8x16_t *)(v19 + (v28 & 0xF) - 15), *(int8x16_t *)(v18 + (v28 & 0xF) - 15))));
  int8x16_t v33 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v32, v32, 8uLL), v27), vmulq_s8(v31, v26)));
  *(int8x16_t *)(a15 + v28) = vextq_s8(v33, v33, 8uLL);
  return (*(uint64_t (**)(void))(v24 + 8 * (((v21 == 16) * v22) ^ a14)))();
}

void sub_1000C2F20()
{
  STACK[0x458] = *(void *)(v1 + 8 * (v0 - 274));
  JUMPOUT(0x1000CAF44);
}

uint64_t sub_1000C2F40@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, int32x4_t *a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int32x4_t a56,int8x16_t a57)
{
  int8x16x4_t v84 = vld4q_s8(v57);
  v59.i64[0] = 0x5454545454545454;
  v59.i64[1] = 0x5454545454545454;
  uint8x16_t v60 = (uint8x16_t)veorq_s8(v84.val[0], v59);
  uint16x8_t v61 = vmovl_u8(*(uint8x8_t *)v60.i8);
  int8x16_t v62 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v61.i8);
  int8x16_t v63 = (int8x16_t)vmovl_high_u16(v61);
  uint16x8_t v64 = vmovl_high_u8(v60);
  int8x16_t v65 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v64.i8);
  int8x16_t v66 = (int8x16_t)vmovl_high_u16(v64);
  uint8x16_t v67 = (uint8x16_t)veorq_s8(v84.val[1], v59);
  uint16x8_t v68 = vmovl_high_u8(v67);
  uint16x8_t v69 = vmovl_u8(*(uint8x8_t *)v67.i8);
  uint8x16_t v70 = (uint8x16_t)veorq_s8(v84.val[2], v59);
  _Q21 = (int8x16_t)vmovl_high_u8(v70);
  _Q20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v70.i8);
  int8x16_t v73 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q20.i8, 0x10uLL);
  __asm { SHLL2           V20.4S, V20.8H, #0x10 }
  int8x16_t v78 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
  __asm { SHLL2           V21.4S, V21.8H, #0x10 }
  v84.val[0] = veorq_s8(v84.val[3], v59);
  v84.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v84.val[0]);
  v84.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v84.val[1]);
  v84.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v84.val[0].i8);
  v84.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v84.val[0]);
  v84.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v84.val[0].i8), 0x18uLL), v73), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v69.i8, 8uLL), v62));
  v84.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v84.val[3], 0x18uLL), _Q20), vorrq_s8((int8x16_t)vshll_high_n_u16(v69, 8uLL), v63));
  v84.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v84.val[1].i8), 0x18uLL), v78), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v68.i8, 8uLL), v65));
  v84.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v84.val[2], 0x18uLL), _Q21), vorrq_s8((int8x16_t)vshll_high_n_u16(v68, 8uLL), v66));
  int32x4_t v79 = (int32x4_t)veorq_s8(vandq_s8(v84.val[0], a57), (int8x16_t)(*(_OWORD *)&v62 & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
  int32x4_t v80 = (int32x4_t)veorq_s8(vandq_s8(v84.val[3], a57), (int8x16_t)(*(_OWORD *)&v63 & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
  int32x4_t v81 = (int32x4_t)veorq_s8(vandq_s8(v84.val[1], a57), (int8x16_t)(*(_OWORD *)&v65 & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
  int32x4_t v82 = (int32x4_t)veorq_s8(vandq_s8(v84.val[2], a57), (int8x16_t)(*(_OWORD *)&v66 & __PAIR128__(0xFFFFFF03FFFFFF03, 0xFFFFFF03FFFFFF03)));
  a5[2] = vaddq_s32(vsubq_s32((int32x4_t)v84.val[1], vaddq_s32(v81, v81)), a56);
  a5[3] = vaddq_s32(vsubq_s32((int32x4_t)v84.val[2], vaddq_s32(v82, v82)), a56);
  *a5 = vaddq_s32(vsubq_s32((int32x4_t)v84.val[0], vaddq_s32(v79, v79)), a56);
  a5[1] = vaddq_s32(vsubq_s32((int32x4_t)v84.val[3], vaddq_s32(v80, v80)), a56);
  return sub_1000E99A8(v58 ^ 0xC2u, a1, a2, a3, a4, 1417906743);
}

uint64_t sub_1000C307C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((59 * (v1 > ((v0 + 372) ^ 0x679u) - 137)) ^ (v0 - 169))))();
}

uint64_t *sub_1000C30C8@<X0>(uint64_t *result@<X0>, int a2@<W1>, int a3@<W3>, _DWORD *a4@<X8>)
{
  uint64_t v8 = result[6];
  uint64_t v10 = *result;
  uint64_t v9 = result[1];
  *a4 = v6;
  *(_DWORD *)(v10 - 0x482CA58F81659910) = v5;
  *(_DWORD *)(v8 - 0x333288E344A3E4F2) = a2;
  *(void *)(v9 - 0xE16F3AF1DE36DA1) = v4 + a3 + 6 * (v7 ^ 0x238u) - 1388429488;
  *((_DWORD *)result + 8) = -1008821960;
  return result;
}

uint64_t sub_1000C3148(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 24);
  return 0;
}

uint64_t sub_1000C3160(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + v5) = *(void *)(v4 + v5);
  return (*(uint64_t (**)(void))(v7 + 8 * (((v6 == 0) * v3) ^ a3)))();
}

uint64_t sub_1000C3190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,int a25,uint64_t a26,uint64_t a27,unsigned __int8 a28,unint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38)
{
  int v38 = LOBYTE(STACK[0x2B0]) ^ 0xDB;
  if (v38 == 1)
  {
    unsigned int v46 = STACK[0x294];
    unsigned int v47 = STACK[0x290];
    LOBYTE(STACK[0x288]) = ((8 * LOBYTE(STACK[0x294])) ^ 0xF0)
                         - ((((8 * LODWORD(STACK[0x294])) ^ 0xFFFFFFF0) << ((BYTE4(a11) ^ 0x80) & 0x83)) & 0xA0)
                         + 84;
    LOBYTE(STACK[0x289]) = ((v46 >> 5) ^ 0xA6) - 2 * (((v46 >> 5) ^ 0xA6) & 0x5C ^ (v46 >> 5) & 8) + 84;
    LOBYTE(STACK[0x28A]) = ((v46 >> 13) ^ 0xE0) - 2 * (((v46 >> 13) ^ 0xE0) & 0x57 ^ (v46 >> 13) & 3) + 84;
    LOBYTE(STACK[0x28B]) = ((v46 >> 21) ^ 0x59) - 2 * (((v46 >> 21) ^ 0x59) & 0x56 ^ (v46 >> 21) & 2) + 84;
    HIDWORD(v48) = v47 ^ 3;
    LODWORD(v48) = ~v46;
    char v45 = -88;
    LOBYTE(STACK[0x28C]) = (v48 >> 29) - ((2 * (v48 >> 29)) & 0xA8) + 84;
    LOBYTE(STACK[0x28D]) = ((v47 >> 5) ^ 0x48) - 2 * (((v47 >> 5) ^ 0x48) & 0x57 ^ (v47 >> 5) & 3) + 84;
    LOBYTE(STACK[0x28E]) = ((v47 >> 13) ^ 0x41) - ((2 * ((v47 >> 13) ^ 0x41)) & 0xA8) + 84;
    int v40 = HIDWORD(a11) & 0x60B8D583;
    unsigned int v44 = (v47 >> 21) ^ 0xFFFFFFD7;
    goto LABEL_5;
  }
  int v39 = a2;
  if (v38 == 2)
  {
    int v40 = a11 & 0x3624DDAB;
    unsigned int v41 = STACK[0x290];
    unsigned int v44 = STACK[0x294];
    int v42 = LODWORD(STACK[0x290]) >> 13;
    LOBYTE(STACK[0x288]) = (a11 & 0xAB ^ (LODWORD(STACK[0x290]) >> 21) ^ 0x56)
                         - (a6 & (2 * (a11 & 0xAB ^ (LODWORD(STACK[0x290]) >> 21) ^ 0x56)))
                         + 84;
    LOBYTE(STACK[0x289]) = (v42 ^ 0x41) + ~(2 * ((v42 ^ 0x41) & 0x56 ^ v42 & 2)) + 85;
    LOBYTE(STACK[0x28A]) = ((v41 >> 5) ^ 0x48) - 2 * (((v41 >> 5) ^ 0x48) & 0x55 ^ ((v41 & 0x20) != 0)) + 84;
    HIDWORD(v43) = v41 ^ 3;
    LODWORD(v43) = ~v44;
    LOBYTE(STACK[0x28B]) = (v43 >> 29) - (a6 & (2 * (v43 >> 29))) + 84;
    LOBYTE(STACK[0x28C]) = ((v44 >> 21) ^ 0x59) - (a6 & (2 * ((v44 >> 21) ^ 0x59))) + 84;
    LOBYTE(STACK[0x28D]) = ((v44 >> 13) ^ 0xE0) - 2 * (((v44 >> 13) ^ 0xE0) & 0x5C ^ (v44 >> 13) & 8) + 84;
    LOBYTE(STACK[0x28E]) = ((v44 >> 5) ^ 0xA6) - (a6 & (2 * ((v44 >> 5) ^ 0xA6))) + 84;
    LOBYTE(v44) = (8 * v44) ^ 0xF0;
    char v45 = -96;
LABEL_5:
    int v39 = v40 ^ 0x591;
    LOBYTE(STACK[0x28F]) = v44 - (((_BYTE)v44 << (v40 ^ 0x80)) & v45) + 84;
  }
  return sub_1000BF51C(a2, a3, a5, a6, a7, a8, v39 + 19, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38);
}

uint64_t sub_1000C33FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(a2 + 96) + 24) = v3;
  int v4 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) + 68422012) & 0x25299ECA) - 1264659421;
  BOOL v5 = ((2 * v4) & 0xEFBFFEB0 ^ 0x25299E80) + (v4 ^ 0xE54B303D) + 1534981104 == 1398666056;
  return (*(uint64_t (**)(void))(v2 + 8 * ((4 * v5) | (32 * v5) | 0x6D0u)))(0);
}

uint64_t sub_1000C3494@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  int v3 = v2 - 1 > (int)(((37 * ((a1 + 15) ^ 0xA7) - 148) | 0x285) ^ 0xFFFFFD7A);
  return (*(uint64_t (**)(void))(a2 + 8 * (((16 * v3) | (v3 << 9)) ^ (a1 + 15))))();
}

uint64_t sub_1000C34E8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 48) = *(void *)(a2 + 8);
  return 0;
}

uint64_t sub_1000C3500()
{
  STACK[0x1968] = 0x1EACB7E887A40737;
  BOOL v5 = *(_DWORD **)(v2 + 8 * (v0 ^ 0x146));
  STACK[0x3C8] = (unint64_t)v5;
  LODWORD(STACK[0x574]) = *v5 - 854218176;
  int v6 = *(unsigned int **)(v2 + 8 * (v0 ^ 0x188));
  STACK[0x3D0] = (unint64_t)v6;
  uint64_t v7 = *v6;
  unint64_t v8 = 1224239923 * ((~(v1 | 0xE7EC675445463D5) + (v1 & 0xE7EC675445463D5)) ^ 0xD9DB8CE3491861FDLL);
  *(_DWORD *)(v4 - 200) = v8 ^ (v0 + 187756882) ^ 0x30;
  *(_DWORD *)(v4 - 196) = -1224239923 * ((~(v1 | 0x445463D5) + (v1 & 0x445463D5)) ^ 0x491861FD);
  *(_DWORD *)(v4 - 176) = v8 + v0 - 1501686125;
  *(_DWORD *)(v4 - 172) = v0 + 187756882 + v8;
  *(_DWORD *)(v4 - 168) = v0 + 187756882 - v8 - 72;
  *(void *)(v4 - 160) = v7 - v8;
  *(void *)(v4 - 184) = v8 ^ 0x74CFFF08;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v0 + 1649)))(v4 - 200);
  return (*(uint64_t (**)(uint64_t))(v3 + 8 * *(int *)(v4 - 192)))(v9);
}

uint64_t sub_1000C3614@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v7 = a3 + a1;
  *(unsigned char *)(v3 + v7) = v5;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((v7 + (unint64_t)((11 * (v4 ^ 0x385)) ^ 0x25Du) - 280 < 0x38) * a2) ^ (11 * (v4 ^ 0x385)))))();
}

uint64_t sub_1000C365C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((1670 * (v3 + v4 < ((v2 - 1615206579) & 0x604617F2 ^ (v0 + 746)))) ^ v2)))();
}

void sub_1000C36A4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) ^ (1225351577 * ((-2 - ((~a1 | 0xDE54387B) + (a1 | 0x21ABC784))) ^ 0xFDCEE06D));
  __asm { BRAA            X8, X17 }
}

uint64_t sub_1000C378C(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((v2 == ((v3 - a2 + 71) ^ (v5 - 47))) * (v3 - 884)) ^ v3)))();
}

void sub_1000C37BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  *(void *)(v25 - 104) = a22;
  *(void *)(v25 - 128) = a20;
  *(void *)(v25 - 120) = a10;
  *(_DWORD *)(v25 - 112) = (v24 + 1169) ^ (1755732067
                                         * ((2 * ((v25 - 144) & 0xEBD80) - (v25 - 144) - 966023) ^ 0x2137FFA2));
  *(void *)(v25 - 144) = a22;
  *(void *)(v25 - 136) = a24;
  JUMPOUT(0x1000C3828);
}

uint64_t sub_1000C3830()
{
  unint64_t v4 = STACK[0x518] + 0x7C014C707EC208A8;
  STACK[0x578] = v4;
  int v5 = 460628867 * ((((v3 - 200) | 0xB7CF29C3) - (v3 - 200) + ((v3 - 200) & 0x4830D638)) ^ 0xFB59ABBE);
  *(void *)(v3 - 200) = v4;
  *(_DWORD *)(v3 - 188) = -1882357475 - v5 + v1 - 279 + 9;
  *(_DWORD *)(v3 - 184) = v5 + 1678855235;
  (*(void (**)(uint64_t))(v2 + 8 * ((v1 - 279) ^ 0x80A)))(v3 - 200);
  STACK[0x458] = *(void *)(v2 + 8 * (v1 - 279));
  STACK[0x3F0] = v0;
  return sub_1000CAF4C(1140694437, v0);
}

uint64_t sub_1000C3910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v17 - 120) = v16
                         + 1374699841
                         * ((-1262793388 - ((v17 - 136) | 0xB4BB4D54) + ((v17 - 136) | 0x4B44B2AB)) ^ 0x26B0AAA2)
                         + 1356;
  *(void *)(v17 - 136) = a13;
  *(void *)(v17 - 128) = a14;
  (*(void (**)(uint64_t))(v15 + 8 * (v16 ^ 0x6E2)))(v17 - 136);
  int v18 = 628203409 * ((2 * ((v17 - 136) & 0x7BB7C280) - (v17 - 136) + 71843196) ^ 0x86C0314F);
  *(void *)(v17 - 128) = v14;
  *(_DWORD *)(v17 - 120) = v18 + v16 + 450;
  *(_DWORD *)(v17 - 136) = 884933518 - v18;
  (*(void (**)(uint64_t))(v15 + 8 * (v16 + 1692)))(v17 - 136);
  *(_DWORD *)(v17 - 136) = v16
                         + 235795823 * ((((v17 - 136) | 0xC7262570) - ((v17 - 136) & 0xC7262570)) ^ 0x538B6C29)
                         + 1003;
  *(void *)(v17 - 128) = v14;
  *(void *)(v17 - 120) = a14;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v16 ^ 0x683)))(v17 - 136);
  return (*(uint64_t (**)(uint64_t))(v15
                                            + 8
                                            * ((25
                                              * (*(_DWORD *)(v17 - 132) - 1430518030 >= (v16 ^ 0xDD41D197)
                                                                                      + (v16 ^ 0x54))) ^ (v16 - 15))))(v19);
}

uint64_t sub_1000C3ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, int a7@<W8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v24 = a7 + 1;
  int v25 = *(unsigned __int8 *)(a15 + v22 + v18);
  *(unsigned char *)(v21 + (v24 + v15)) = v25 - (((_BYTE)v25 << ((v17 | 1) ^ v19)) & v20) + 84;
  int8x16_t v26 = *(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8 * ((((a3 + v24 + 1) < 0x40) * (int)a1) ^ v16));
  return v26(a1, v26, (v25 << ((v17 | 1) ^ v19)) & v20, a2, a3, a4, a5, a6);
}

uint64_t sub_1000C3AC4@<X0>(unsigned int a1@<W3>, int a2@<W4>, int a3@<W8>)
{
  unsigned int v11 = v9 + 1;
  BOOL v12 = v5 < v6;
  *(unsigned char *)(v8 + (v3 + 1)) = *(unsigned char *)(v7 + (a3 + 1));
  if (v12 == v11 < (v4 ^ a1) + a2) {
    BOOL v12 = v11 < v5;
  }
  return (*(uint64_t (**)(void))(v10 + 8 * (v12 | (32 * v12) | v4)))();
}

uint64_t sub_1000C3AD4@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  int v5 = a2 ^ 0x26C;
  (*(void (**)(void, uint64_t, void))(v3 + 8 * (a2 + 1209)))(*v7, a1, (a2 ^ 0xAEA8E3DF) + v8);
  *(_DWORD *)(v4 - 200) = (v5 + 2138963041) ^ (1374699841
                                             * ((((v4 - 200) | 0xA6087EC5) - ((v4 - 200) & 0xA6087EC5)) ^ 0xCBFC66CC));
  uint64_t result = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v5 + 1726)))(v4 - 200);
  *(_DWORD *)(v2 + 32) = v9;
  return result;
}

uint64_t sub_1000C3BBC@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(v4 - 220 + a2 - 1202683098) = 84;
  return (*(uint64_t (**)(void))(v3 + 8 * ((614 * ((unint64_t)(a2 - 1202683097) < 0x40)) ^ (a1 + v2 + 362))))();
}

uint64_t sub_1000C3C08(uint64_t a1, int a2)
{
  unsigned int v5 = v4 + 501414160 + ((a2 - 1573) | 0x204);
  BOOL v6 = v5 < 0xCE9AB500;
  BOOL v7 = v5 > v2 - 2029395811;
  if (v2 - 2029395811 < (a2 - 828723631) != v6) {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((105 * v7) ^ a2)))();
}

uint64_t sub_1000C3C88(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((((a4 + 174) ^ 0x387 ^ (8 * a4) ^ 0x3760) * ((a5 + a6 + 303221469) < 8)) ^ a4)))();
}

uint64_t sub_1000C3CE8(double a1, int8x16_t a2)
{
  int8x16_t v5 = (int8x16_t)vld1q_dup_f32((const float *)v3);
  v6.i64[0] = 0x8000000080000000;
  v6.i64[1] = 0x8000000080000000;
  a2.i64[0] = *(void *)(v3 + 4);
  a2.i32[2] = *(_DWORD *)(v3 + 12);
  int8x16_t v7 = vextq_s8(v5, a2, 0xCuLL);
  int8x16_t v8 = a2;
  v8.i32[3] = *(_DWORD *)(v3 + 16);
  int32x4_t v9 = (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v8, *(int8x16_t *)&STACK[0x350]), vandq_s8(v7, v6)), 1uLL), *(int8x16_t *)&STACK[0x340]);
  v10.i32[0] = *((_DWORD *)&STACK[0x1968] + ((*(_DWORD *)(v3 + 4) & 1) == 0));
  v10.i32[1] = *((_DWORD *)&STACK[0x1968] + ((*(_DWORD *)(v3 + 8) & 1) == 0));
  v10.i32[2] = *((_DWORD *)&STACK[0x1968] + (~*(_DWORD *)(v3 + 12) & 1));
  v10.i32[3] = *((_DWORD *)&STACK[0x1968] + (~v8.i32[3] & 1));
  *(int8x16_t *)uint64_t v3 = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v3 + 1588), v10), *(int8x16_t *)&STACK[0x310]), (int8x16_t)vaddq_s32(vsubq_s32(v9, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v9, v9), *(int8x16_t *)&STACK[0x330])), *(int32x4_t *)&STACK[0x320]));
  return (*(uint64_t (**)(void))(v4 + 8 * ((v2 - 149) | 0x51)))();
}

void sub_1000C3CF0(_DWORD *a1@<X8>)
{
  *a1 = v1;
  sub_1000D6F54();
}

uint64_t sub_1000C3D00(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 4) - 1224239923 * ((2 * (a1 & 0x723AC1F0) - a1 - 1916453361) ^ 0x7F76C3D8);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = 1224239923 * ((2 * (a1 & 0x7635C7F723AC1F0) - a1 + 0x789CA3808DC53E0FLL) ^ 0x50C616E97F76C3D8);
  int v4 = v3 ^ (1224239923 * ((2 * (a1 & 0x723AC1F0) - a1 - 1916453361) ^ 0x7F76C3D8));
  unsigned int v5 = 460628867 * (((&v34 | 0xB2A65199) + (~&v34 | 0x4D59AE66)) ^ 0xFE30D3E5);
  int v16 = &STACK[0x7C014C707EC20A78];
  uint64_t v34 = &STACK[0x7C014C707EC20A78];
  int v35 = v2 - v5 - 1882357480;
  unsigned int v36 = v5 + 1678855235;
  uint64_t v6 = (*(uint64_t (**)(unint64_t **))((char *)*(&off_100166A10 + (v2 ^ 0x88)) + 8 * v2 + 16316))(&v34);
  int v28 = v4 + 2104033406;
  int v27 = -1083449407;
  int v11 = v4 + 1141259536;
  int v25 = v4 + 1831993481;
  int v13 = v4 - 353990861;
  uint64_t v23 = &v32;
  v8[1] = (char *)&v8[-202505654] + 7;
  v8[0] = v33;
  int v14 = v2 - 176523383;
  int v22 = v2 - 965871665;
  int v30 = (v2 - 965871665) & 0x39920FB7;
  int v19 = (v2 ^ 0x787) - 1927;
  int32x4_t v21 = vdupq_n_s32(0xC3DE9938);
  unsigned int v31 = (v2 + 567078859) & 0xDE3310E5;
  int32x4_t v17 = vdupq_n_s32(0x43DE993Bu);
  int32x4_t v18 = vdupq_n_s32(0x43DE993Eu);
  int v10 = v2 - 1622724627;
  int v9 = v2 - 908384315;
  int v20 = v2 ^ 0x1D;
  uint64_t v24 = v2 ^ 0x1Du;
  uint64_t v29 = v24;
  int v26 = v2;
  uint64_t v15 = a1;
  return sub_1000E8CB0(v6, v2);
}

uint64_t sub_1000C3FE8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  int v28 = (2 * a4) ^ 0x188;
  BOOL v29 = a22 - 1301599953 < (a27 - 2042414087);
  if (a27 - 2042414087 < ((v28 + 1649409361) & 0x9DB00546) - 433271915 != (a22 - 1301599953) < 0xE62CD09B) {
    BOOL v29 = a27 - 2042414087 < ((v28 + 1649409361) & 0x9DB00546) - 433271915;
  }
  return (*(uint64_t (**)(void))(v27 + 8 * ((v29 * (v28 - 534)) ^ (v28 + 1104))))();
}

uint64_t sub_1000C40C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                                         + 8
                                                                                         * ((((((v3 - 378) | 0x108) + 751) ^ (v3 - 523740837) & 0x1F37A7BB)
                                                                                           * (v2 == v4)) ^ v3)))(a1, a2, 283, 2422341081, 1872625540, 337);
}

uint64_t sub_1000C4124()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((41 * (v1 == ((v0 - 909) ^ 0x389243E9 ^ (v0 + 1048481610) & 0xC1816BB6))) ^ (v0 - 909))))();
}

uint64_t sub_1000C4178()
{
  if (v2 >= 0) {
    unsigned int v4 = v2;
  }
  else {
    unsigned int v4 = -v2;
  }
  if (v1 >= 0) {
    unsigned int v5 = v1;
  }
  else {
    unsigned int v5 = -v1;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((((2 * (v0 ^ 0x647)) ^ (v0 - 429)) * (v4 > v5)) ^ v0)))();
}

uint64_t sub_1000C41B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  STACK[0x5B0] = v4 - 16;
  return (*(uint64_t (**)(void))(v6 + 8 * (((a4 == v7) * ((v5 + 9) ^ 0x46B)) ^ v5)))();
}

uint64_t sub_1000C41F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v6 = (v3 - v2);
  long long v7 = *(_OWORD *)(a1 + v6 - 15);
  long long v8 = *(_OWORD *)(a1 + v6 - 31);
  uint64_t v9 = v4 + v6;
  *(_OWORD *)(v9 - 15) = v7;
  *(_OWORD *)(v9 - 31) = v8;
  return (*(uint64_t (**)(void))(v5 + 8 * ((14 * (v2 + 32 == v1 + 80)) ^ v1)))();
}

uint64_t sub_1000C423C()
{
  return (*(uint64_t (**)(void))(v0 + 8 * (int)((((v2 ^ 0xFFFFF972) + v2 + 1436) * (v1 == 50331648)) ^ v2)))();
}

uint64_t sub_1000C426C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (((a6 + 1 == ((((v6 - 649) | v7) + 329) ^ a2)) * (((((v6 - 649) | v7) - 323) | a1) ^ 8)) ^ ((v6 - 649) | v7))))();
}

uint64_t sub_1000C42B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  uint64_t v22 = (v20 - 104);
  *(void *)(&a19 + v19 + ((54 * (v22 ^ 0x5B)) ^ (unint64_t)(a1 + 932))) = 0x5454545454545454;
  return (*(uint64_t (**)(void))(v21 + 8 * (int)((248 * (((v22 ^ 0xFFFFFFFFFFFFFFB5) & a2) != 8)) ^ v22)))();
}

uint64_t sub_1000C431C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int *a5)
{
  uint64_t v8 = *a5;
  unint64_t v9 = 1224239923
     * ((~((v7 - 144) | 0xAD0C10942C3C5312) + ((v7 - 144) & 0xAD0C10942C3C5312)) ^ 0x7AA95A022170513ALL);
  *(_DWORD *)(v7 - 144) = v9 ^ (v5 - 1310418101) ^ 0x3A;
  *(_DWORD *)(v7 - 140) = -1224239923 * ((~((v7 - 144) | 0x2C3C5312) + ((v7 - 144) & 0x2C3C5312)) ^ 0x2170513A);
  *(_DWORD *)(v7 - 112) = ((v5 - 1310418101) ^ 0x41) - v9;
  *(void *)(v7 - 128) = v9 ^ 0x74CFFF08;
  *(void *)(v7 - 104) = v8 - v9;
  *(_DWORD *)(v7 - 120) = v9 + v5 - 1739601312;
  *(_DWORD *)(v7 - 116) = v5 - 1310418101 + v9;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v6 + 8 * (a4 + v5 + 1619)))(v7 - 144);
  return (*(uint64_t (**)(uint64_t))(v6 + 8 * *(int *)(v7 - 136)))(v10);
}

uint64_t sub_1000C4428@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((a1 == v2) * (((v1 - 216) | 0x12) ^ 0x3AC)) ^ v1)))();
}

uint64_t sub_1000C445C()
{
  uint64_t v3 = (unsigned int *)STACK[0x2D8];
  (*(void (**)(void, unint64_t *, uint64_t))(v2 + 8 * (v0 ^ 0x8C9)))(*(unsigned int *)STACK[0x2D8], &STACK[0x480], 2048);
  uint64_t v4 = *(uint64_t (**)(void))(v2
                           + 8
                           * ((((*(unsigned int (**)(void, unint64_t *, void, uint64_t))(v2 + 8 * (v0 + 1801)))(*v3, &STACK[0x498], (LODWORD(STACK[0x48C]) + v1), 1) == 0)* (((v0 ^ 0x385) - 551) ^ 0x111)) ^ v0));
  return v4();
}

uint64_t sub_1000C44FC@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(v4 - 220 + a2 - 1202683098) = 84;
  return (*(uint64_t (**)(void))(v3 + 8 * ((1000 * ((unint64_t)(a2 - 1202683097) < 0x38)) ^ (a1 + v2 - 690))))();
}

uint64_t sub_1000C4598@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W4>, int a4@<W6>, int a5@<W8>)
{
  *(unsigned char *)(*(void *)(a1 + 16) + (a4 + a5)) = ((a3 ^ v7) >> v8)
                                                             - (((a2 ^ v9) - 32) & (2 * ((a3 ^ v7) >> v8)))
                                                             + 84;
  return (*(uint64_t (**)(void))(v5 + 8 * ((116 * (a4 + ((a2 + 1720813742) & 0x996E779F) - 1160 != v6)) ^ a2)))();
}

uint64_t sub_1000C4608()
{
  int v3 = *(_DWORD *)(v2 - 0x65EF48AAD10F5704)
     + 1153699936
     + ~(((*(_DWORD *)(v2 - 0x65EF48AAD10F5704) << (((v0 + 5) & 0x1E) - 17)) - 1481628268) & (((v0 - 1033) | 8)
                                                                                              - 505939907));
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((452
                                * (((2 * v3) & 0xDF3BFFB8 ^ 0xC113FB28) + (v3 ^ 0x9F760249) + 2147483560 != 1872625540)) ^ v0)))();
}

uint64_t sub_1000C46D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  BOOL v17 = a14 < 0x84E9D043;
  unsigned int v18 = v14 + ((2 * v15) ^ 0x740E6FD1);
  int v19 = v17 ^ (v18 < 0x84E9D043);
  BOOL v20 = v18 < a14;
  if (!v19) {
    BOOL v17 = v20;
  }
  return (*(uint64_t (**)(uint64_t))(v16 + 8 * ((50 * v17) ^ v15)))(3406224882);
}

uint64_t sub_1000C4744()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((v0 - 86518485) & 0x5282DBF ^ ((v0 ^ 0x56D) + 787))
                                * (*(_DWORD *)(v1 - 140) == *(_DWORD *)(v1 - 144))) ^ v0)))();
}

uint64_t sub_1000C4794()
{
  int v4 = (((v2 - 483) | 0x301) ^ 0xE5833D7E) + v3;
  int v5 = v1 - 444383521;
  BOOL v6 = v5 < -1876370986;
  BOOL v7 = v4 < v5;
  if (v6 != v4 < -1876370986) {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(v0
                              + 8 * (((v2 ^ v7) & 1 | (16 * ((v2 ^ v7) & 1))) ^ v2)))();
}

uint64_t sub_1000C4808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  BOOL v22 = v20 > -701496145;
  *(_DWORD *)(a16 + 4 * (v19 - 1432421903)) = v17;
  if (v22 == v19 + 1416557890 < 701496144) {
    BOOL v22 = v19 + 1416557890 < v18;
  }
  return (*(uint64_t (**)(void))(v21 + 8 * (int)((v22 * (((v16 + 530311458) & 0xE06411DF) + 24)) ^ v16)))();
}

uint64_t sub_1000C4890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15)
{
  return (*(uint64_t (**)(void))(v15
                              + 8 * (int)(((((359 * (v16 ^ 0xF6)) ^ 0xFFFFFA02) + v16 + 709) * (a15 == a14)) ^ v16)))();
}

uint64_t sub_1000C48D4@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((((15 * (((a1 - 1227) | 0x1A3) ^ 0x1A5)) ^ 0x49) * (LODWORD(STACK[0x4E8]) == v2)) ^ a1)))();
}

uint64_t sub_1000C4918@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x574]) = a1;
  uint64_t v7 = (*(uint64_t (**)(unint64_t, void))(v5 + 8 * (v2 ^ 0x2D8)))(STACK[0x3B8], 0);
  int v8 = v1[4] + 1923539499 - (v3 & (2 * v1[4]));
  v1[1] = v1[6] + 1923539499 - (v3 & (2 * v1[6]));
  v1[2] = v8;
  int v9 = (*(uint64_t (**)(uint64_t))(v5 + 8 * (v2 ^ 0x2F7)))(v7);
  v1[3] = v9 + 1923539499 - ((v9 << ((v2 ^ 6) - 24)) & v3);
  int v10 = (*(uint64_t (**)(void))(v5 + 8 * (v2 + 713)))();
  *uint64_t v1 = v10 + 1923539499 - (v3 & (2 * v10));
  int v11 = (((*v4 >> 30) ^ 1) + 1923539499 - 2 * ((*v4 >> 30) ^ 1)) ^ *v4;
  unsigned int v12 = (*v1 ^ 0x72A6E22B) + ((1664525 * v11 + 1923539499 - ((3329050 * v11) & 0xE54DC456)) ^ v4[1]);
  v4[1] = v12 + 1923539499 - ((2 * v12) & 0xE54DC456);
  unint64_t v13 = 1734042137
      * ((((v6 - 200) | 0xA2985B1B0A11505DLL) - ((v6 - 200) & 0xA2985B1B0A11505DLL)) ^ 0xB8E7FF8056DF9310);
  *(void *)(v6 - 184) = v13 + 2742373066u;
  *(_DWORD *)(v6 - 192) = (((v2 ^ 0x406) - 1987568187) ^ 0x76) + v13;
  *(_DWORD *)(v6 - 188) = (v2 ^ 0x406) - 1987568187 + v13;
  *(_DWORD *)(v6 - 164) = (((v2 ^ 0x406) - 1987568187) ^ 0xF6) + v13;
  *(_DWORD *)(v6 - 176) = (v2 ^ 0x406) - v13 + 2104632109;
  *(_DWORD *)(v6 - 172) = v13 ^ 1;
  *(void *)(v6 - 200) = v13 ^ 0xA3754ACC;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(v5 + 8 * ((v2 ^ 0x406) + 1763)))(v6 - 200);
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * *(int *)(v6 - 168)))(v14);
}

uint64_t sub_1000C4B38@<X0>(uint64_t a1@<X8>)
{
  unsigned int v6 = STACK[0x364];
  int v7 = *(unsigned __int8 *)(v1 + (v2 + v3)) ^ 0x54;
  int v8 = v7 & 3;
  unsigned int v9 = ((*(unsigned __int8 *)(v1 + (v2 + v3 + 2)) ^ 0x54) << 16) | ((*(unsigned __int8 *)(v1 + (v2 + v3 + 3)) ^ 0x54) << 24) | v7 & 0xFFFF00FF | (((LODWORD(STACK[0x364]) + 34) & 0x1B ^ 0x4D ^ *(unsigned char *)(v1 + (v2 + v3 + 1))) << 8);
  *(_DWORD *)(a1 + ((v2 + v3) & 0xFFFFFFFC)) = v9 + v5 - 2 * (v9 & 0x43DE993B ^ v8);
  return (*(uint64_t (**)(void))(v4 + 8 * ((695 * ((v2 + 4 + v3) < 0x40)) ^ v6)))();
}

uint64_t sub_1000C4BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47)
{
  char v52 = (void *)STACK[0x3D8];
  unint64_t v53 = STACK[0x3D8] + 264;
  v52[31] = 0x2AA59AF74436BCFBLL;
  v52[32] = v53;
  uint64_t v54 = (char *)v52 + 0x774B811B42847C1FLL;
  v52[65] = 0x2AA59AF74436BCFBLL;
  v52[66] = v52 + 67;
  uint64_t v55 = (char *)v52 + 0x774B811B42847D2FLL;
  v52[99] = 0x2AA59AF74436BCFBLL;
  v52[100] = v52 + 101;
  STACK[0x3C0] = (unint64_t)v52 + 0x774B811B42847E3FLL;
  v52[133] = 0x2AA59AF74436BCFBLL;
  v52[134] = v52 + 135;
  STACK[0x3F0] = (unint64_t)v52 + 0x774B811B42847F4FLL;
  v52[167] = 0x2AA59AF74436BCFBLL;
  v52[168] = v52 + 169;
  STACK[0x3F8] = (unint64_t)v52 + 0x774B811B4284805FLL;
  LODWORD(v52) = 460628867 * ((((2 * (v51 - 200)) | 0xE45EEFC4) - (v51 - 200) - 1915713506) ^ 0x3EB9F59F);
  LODWORD(STACK[0x3B0]) = 2 * v48;
  unint64_t v56 = STACK[0x5E8] + 4;
  *(_DWORD *)(v51 - 176) = (v48 ^ 0x3A0522E7) + v52 + (a47 ^ 0x56EFCCA6) + ((2 * v48) & 0xF3B777BE ^ 0x83B53230);
  *(_DWORD *)(v51 - 192) = a47 - 222 + v52;
  *(void *)(v51 - 184) = v54;
  *(void *)(v51 - 200) = v56;
  uint64_t v57 = 8 * (a47 + 1179);
  STACK[0x3C8] = v57;
  (*(void (**)(uint64_t))(v50 + v57))(v51 - 200);
  uint64_t v58 = v56 + v49;
  int v59 = 460628867 * (((v51 - 200) & 0xB80C5A77 | ~((v51 - 200) | 0xB80C5A77)) ^ 0xB6527F5);
  *(_DWORD *)(v51 - 176) = v59 + (v48 ^ 0x350152EB) + 1508622336 + ((2 * v48) & 0xEDBF97A6 ^ 0x85BD1220);
  LODWORD(STACK[0x3B8]) = a47 - 222;
  *(_DWORD *)(v51 - 192) = a47 - 222 + v59;
  *(void *)(v51 - 184) = v55;
  *(void *)(v51 - 200) = v58;
  uint64_t v60 = 8 * (a47 ^ 0x4BFu);
  (*(void (**)(uint64_t))(v50 + v60))(v51 - 200);
  uint64_t v61 = v58 + v49;
  LODWORD(v58) = STACK[0x3B0];
  int v62 = 460628867 * ((v51 - 200) ^ 0x4C96827D);
  LODWORD(STACK[0x388]) = a47 - 222 + v62;
  *(_DWORD *)(v51 - 192) = a47 - 222 + v62;
  *(void *)(v51 - 200) = v61;
  *(_DWORD *)(v51 - 176) = v62 + (v48 ^ 0x971126EF) - 67384324 + (v58 & 0xA99F7FAE ^ 0x819D3220);
  *(void *)(v51 - 184) = STACK[0x3C0];
  (*(void (**)(uint64_t))(v50 + v60))(v51 - 200);
  *(void *)(v51 - 200) = v61 + v49;
  *(void *)(v51 - 184) = STACK[0x3F0];
  *(_DWORD *)(v51 - 176) = v62 + (v48 ^ 0x372562CB) + 1540329440 + (v58 & 0xE9F7F7E6 ^ 0x81B53260);
  *(_DWORD *)(v51 - 192) = STACK[0x388];
  (*(void (**)(uint64_t))(v50 + v60))(v51 - 200);
  int v63 = 460628867 * (((v51 - 200) & 0x469F907 | ~((v51 - 200) | 0x469F907)) ^ 0xB7008485);
  *(void *)(v51 - 200) = v61 + v49 + v49;
  *(_DWORD *)(v51 - 176) = v63 + (v48 ^ 0x1C0512CF) + 1894776796 + (v58 & 0xBFB717EE ^ 0x87B51260);
  *(void *)(v51 - 184) = STACK[0x3F8];
  *(_DWORD *)(v51 - 192) = LODWORD(STACK[0x3B8]) + v63;
  (*(void (**)(uint64_t))(v50 + STACK[0x3C8]))(v51 - 200);
  unint64_t v64 = STACK[0x5E8];
  unint64_t v65 = (v47 - 1576401730);
  STACK[0x588] = v65;
  return (*(uint64_t (**)(unint64_t))(v50
                                                     + 8
                                                     * ((11 * (v65 == ((((a47 ^ 0x24B) + 23) | 0x2C7) ^ 0x3F7))) ^ ((a47 ^ 0x24B) + 734))))(v64);
}

uint64_t sub_1000C5024@<X0>(int a1@<W8>)
{
  return sub_1000D39B4(a1);
}

uint64_t sub_1000C5050@<X0>(uint64_t a1@<X1>, unsigned int a2@<W8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1 + a2;
  if ((unint64_t)(v5 + 1) > 0x38) {
    uint64_t v6 = v5 + 1;
  }
  else {
    uint64_t v6 = 56;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((242 * (v6 - v4 + (((v2 ^ 0x95u) + 188) ^ 0xFCBBFE6uLL) < 8)) ^ v2)))();
}

uint64_t sub_1000C50C0()
{
  STACK[0x2B0] = v0;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((236
                                * ((v1 ^ 0xAB ^ ((LODWORD(STACK[0x48C])
                                                                               - 1576401730
                                                                               + v1
                                                                               - 1365
                                                                               - 2330) < 0xFFFFF7FF)) & 1)) ^ v1)))();
}

uint64_t sub_1000C5110@<X0>(int a1@<W5>, int a2@<W6>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (int)(((((v4 - 1321593515) & 0x4EC5E5E6 ^ 0xFFFFFCB0) + 193 * (v4 ^ 0x58F))
                                     * (*(_DWORD *)(v5 + (v3 + a1) * (uint64_t)a2 + 36) == a3)) ^ v4)))();
}

uint64_t sub_1000C5184()
{
  return sub_1000DCFE4(v0 - 233);
}

uint64_t sub_1000C51C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((1424
                                * ((v6 & (2 * (*(unsigned __int8 *)(a2 + 3) - 137)))
                                 + ((*(unsigned __int8 *)(a2 + 3) - 137) ^ v5) == (v4 ^ (v2 + 90)) + 515305647)) ^ v4)))();
}

uint64_t sub_1000C5214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  unsigned int v16 = v13 + ((v14 - 986) ^ 0x7A55EA34);
  int v17 = ((a13 + 52737544) < 0x7BBF6D7D) ^ (v16 < 0x7BBF6D7D);
  BOOL v18 = v16 < a13 + 52737544;
  if (v17) {
    BOOL v18 = (a13 + 52737544) < 0x7BBF6D7D;
  }
  return (*(uint64_t (**)(void))(v15 + 8 * ((v18 | (4 * v18)) ^ v14)))();
}

uint64_t sub_1000C527C()
{
  *(void *)(v1 + v4) = v6;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v2 != v4) * v3) ^ v0)))();
}

uint64_t sub_1000C52A0()
{
  STACK[0x5B0] = STACK[0x380];
  return ((uint64_t (*)(void))STACK[0x3C8])();
}

uint64_t sub_1000C52B8()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((362 * (((((v1 + 1488052916) & 0xA74E1EAE) - 1546) & v0) == 0)) ^ v1)))();
}

uint64_t sub_1000C52F8@<X0>(unsigned int a1@<W1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a3 + ((12 * (v4 ^ a1) + a2) & (a4 + 16))) = *v6;
  return (*(uint64_t (**)(void))(v7 + 8 * ((1194 * (v5 == 16)) ^ v4)))();
}

uint64_t sub_1000C5304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D3A1C(a1, a2, a3, 1008845537, 1398666056);
}

uint64_t sub_1000C5320(int a1, int a2)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)(((a2 + a1 + ((v2 + 438543987) & 0xE5DC56BF ^ 0x1214946C) > 7)
                                     * (((v2 + 556287204) & 0xDED7B5F1) - 453)) ^ v2)))();
}

uint64_t sub_1000C53BC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6 + 8 * (((((a1 - 2085784951) & 0x7C528BFF) + 1196) * (v5 == a5)) ^ a1)))();
}

uint64_t sub_1000C5414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18
                                                                                         + 8
                                                                                         * ((175
                                                                                           * (*(_DWORD *)(a18 - 0x65EF48AAD10F56FCLL) == (((v19 - 622) | 0x4C0) ^ 0xC3DE9DF8))) ^ v19)))(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1000C5470@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 - 539915761 + v4 - 252 + (v2 - 621) - 778) = 0x5454545454545454;
  return (*(uint64_t (**)(void))(v3 + 8 * ((225 * ((v1 & 0x38) == 8)) ^ v2)))();
}

uint64_t sub_1000C54C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,int a24,int a25)
{
  BOOL v29 = HIDWORD(a17) < 0xB539711E;
  unsigned int v30 = (((a23 ^ v28) + a24) ^ 0x6BF9C94B)
      - 1100056576
      + ((((a23 ^ v28) + a24) << ((v27 + 47) ^ 0x9C)) & 0xD7F39296)
      + ((v27 - 622) ^ 0x8AD12FD3);
  int v31 = v29 ^ (v30 < 0xB539711E);
  BOOL v32 = v30 < HIDWORD(a17);
  if (!v31) {
    BOOL v29 = v32;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 8 * ((v29 * ((v27 + 815) ^ 0x5C3)) ^ (v27 + 815))))(((a25 + (v25 ^ v28)) ^ 0x5FFBBEBA) - 1190424 + ((2 * (a25 + (v25 ^ v28))) & 0xBFF77D74), 3426637972, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_1000C55B0()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((1717
                                * (*(unsigned __int8 *)(v2 + 1) == ((v3 ^ (v0 + 90))
                                                                                   + ((v0 + v3 + 76) | 0xE)
                                                                                   - 88))) ^ v3)))();
}

uint64_t sub_1000C55F4()
{
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((1669
                                * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
                                 + ((*(unsigned __int8 *)(v3 + 4) - 247) ^ (v0 + v2 + 450 - 687)) == v0)) ^ v2)))();
}

uint64_t sub_1000C5638(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a63, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19,uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  return sub_1000BFC28(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

uint64_t sub_1000C5644@<X0>(char a1@<W6>, int a2@<W7>, uint64_t a3@<X8>)
{
  uint64_t v7 = (unsigned char *)STACK[0x5D8];
  int v8 = STACK[0x244];
  unsigned int v9 = *(_DWORD *)(a3 + v4);
  *uint64_t v7 = (v5 ^ HIBYTE(v9)) - ((2 * (v5 ^ HIBYTE(v9))) & 0xA8) + 84;
  v7[1] = ((v9 >> ((v8 + 23) & 0x1D ^ 9)) ^ 0xDE)
        + ~(2 * (((v9 >> ((v8 + 23) & 0x1D ^ 9)) ^ 0xDE) & 0x55 ^ (v9 >> ((v8 + 23) & 0x1D ^ 9)) & 1))
        + 85;
  v7[2] = (a1 ^ BYTE1(v9)) - ((2 * (a1 ^ BYTE1(v9))) & 0xA8) + 84;
  v7[3] = v9 ^ 0x34;
  unsigned int v10 = *v3 + 1932828926;
  BOOL v11 = v10 < 0xA85A68CE;
  BOOL v12 = v10 > 0xA85A68D2;
  if (v11) {
    BOOL v12 = v11;
  }
  return (*(uint64_t (**)(void))(v6 + 8 * ((!v12 * a2) ^ v8)))();
}

uint64_t sub_1000C5758(uint64_t a1)
{
  BOOL v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8 * (v1 + 1351)))(a1, 4182676990) == 0;
  return (*(uint64_t (**)(void))(v2 + 8 * ((v3 * (((v1 ^ 0x4A) - 439) ^ 0x121)) ^ v1)))();
}

uint64_t sub_1000C57B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(unsigned char *)(v2 + a2 + a1) = v4;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((((unint64_t)(a2 + 1 + a1) < 0x40) * ((34 * (v3 ^ 0x55C)) ^ 0x54E)) ^ (34 * (v3 ^ 0x55C)))))();
}

uint64_t sub_1000C57FC()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((v1 - 1 >= 0) * ((v2 | 0xC) ^ 0x2A8)) ^ v0)))();
}

uint64_t sub_1000C5830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46)
{
  return (*(uint64_t (**)(void))(v48
                              + 8
                              * (((((v46 + (v47 ^ 0x6AE) - 281) ^ LODWORD(STACK[0x4EC])) != a46 - 4999755)
                                * ((v47 - 1522) ^ 0x1C9)) ^ v47)))();
}