void sub_100008C10(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_100008C84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [*(id *)(a1 + 32) _onDeviceEyeTrackingToggled];
    id WeakRetained = v3;
  }
}

void sub_100008CD8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = +[AXSettings sharedInstance];
    objc_msgSend(WeakRetained, "setShouldShowUncalibratedPoints:", objc_msgSend(v1, "assistiveTouchMouseOnDeviceEyeTrackingShouldShowUncalibratedPoints"));
  }
}

void sub_100008D48(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[15])
  {
    id v3 = WeakRetained;
    v2 = +[AXSettings sharedInstance];
    objc_msgSend(v3[15], "setUseWeightedMovingAverage:", objc_msgSend(v2, "assistiveTouchOnDeviceEyeTrackingShouldUseWeightedAverages"));

    id WeakRetained = v3;
  }
}

void sub_100008DC4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[15])
  {
    id v3 = WeakRetained;
    v2 = +[AXSettings sharedInstance];
    objc_msgSend(v3[15], "setUseMedianFilter:", objc_msgSend(v2, "assistiveTouchOnDeviceEyeTrackingShouldUseMotionFilter"));

    id WeakRetained = v3;
  }
}

void sub_100008E40(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[15])
  {
    id v3 = WeakRetained;
    v2 = +[AXSettings sharedInstance];
    objc_msgSend(v3[15], "setUseGaussianBlur:", objc_msgSend(v2, "assistiveTouchOnDeviceEyeTrackingShouldUseGaussianBlur"));

    id WeakRetained = v3;
  }
}

void sub_100008EBC(uint64_t a1)
{
  v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = +[AXSettings sharedInstance];
    id v4 = [v3 assistiveTouchOnDeviceEyeTrackingSmoothingBufferSize];
    WeakRetained[112] = (unint64_t)v4 >= kAXSAssistiveTouchOnDeviceEyeTrackingSmoothingBufferSizeMinUserPreference;
  }
  v5 = +[AXAccessQueue mainAccessQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100008FC8;
  v6[3] = &unk_1001AAA68;
  objc_copyWeak(&v7, v1);
  [v5 performSynchronousWritingBlock:v6];

  objc_destroyWeak(&v7);
}

void sub_100008FB4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100008FC8(uint64_t a1)
{
  v2 = +[AXSettings sharedInstance];
  id v3 = [v2 assistiveTouchOnDeviceEyeTrackingSmoothingBufferSize];

  if ((unint64_t)v3 <= kAXSAssistiveTouchOnDeviceEyeTrackingSmoothingBufferSizeMinUserPreference) {
    id v4 = (id)kAXSAssistiveTouchOnDeviceEyeTrackingSmoothingBufferSizeMinUserPreference;
  }
  else {
    id v4 = v3;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = [WeakRetained _currentPointSmoother];
  [v5 setBufferSize:v4];
}

void sub_100009064(uint64_t a1)
{
  v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = [WeakRetained _smoothingBufferSizeForCurrentActiveEyeTracker];
  v5 = v4;
  if (WeakRetained)
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 112)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v4 == 0;
    }
    if (v6)
    {
      BOOL v8 = 0;
    }
    else
    {
      id v7 = [v4 unsignedIntegerValue];
      BOOL v8 = (unint64_t)v7 > kAXSAssistiveTouchMotionTrackerSmoothingBufferSizeDefault;
    }
    WeakRetained[96] = v8;
  }
  if (v5)
  {
    v9 = +[AXAccessQueue mainAccessQueue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000091A8;
    v10[3] = &unk_1001AAA40;
    objc_copyWeak(&v12, v2);
    id v11 = v5;
    [v9 performSynchronousWritingBlock:v10];

    objc_destroyWeak(&v12);
  }
}

void sub_100009194(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000091A8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) unsignedIntegerValue];
  if ((unint64_t)v2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = (uint64_t)v2;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = [WeakRetained _currentPointSmoother];
  [v4 setBufferSize:v3];
}

void sub_100009218(uint64_t a1)
{
  id v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 112))
    {
      WeakRetained[96] = 0;
    }
    else
    {
      v5 = +[AXSettings sharedInstance];
      id v6 = [v5 assistiveTouchMotionTrackerSmoothingBufferSize];
      v4[96] = (unint64_t)v6 > kAXSAssistiveTouchMotionTrackerSmoothingBufferSizeDefault;
    }
  }
  id v7 = +[AXAccessQueue mainAccessQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10000933C;
  v8[3] = &unk_1001AAA68;
  objc_copyWeak(&v9, v2);
  [v7 performSynchronousWritingBlock:v8];

  objc_destroyWeak(&v9);
}

void sub_100009328(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10000933C(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  id v3 = [v2 assistiveTouchMotionTrackerSmoothingBufferSize];

  if ((unint64_t)v3 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = (uint64_t)v3;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = [WeakRetained _currentPointSmoother];
  [v5 setBufferSize:v4];
}

void sub_1000093CC(uint64_t a1)
{
  id v2 = +[AXAccessQueue mainAccessQueue];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100009490;
  v3[3] = &unk_1001AAA68;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  [v2 performSynchronousWritingBlock:v3];

  objc_destroyWeak(&v4);
}

void sub_10000947C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100009490(uint64_t a1)
{
  id v6 = +[AXSettings sharedInstance];
  [v6 assistiveTouchMotionTrackerSmoothingMaxDelta];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = [WeakRetained _currentPointSmoother];
  [v5 setSmoothingMaxDelta:v3];
}

void sub_100009518(uint64_t a1)
{
  double v2 = +[AXAccessQueue mainAccessQueue];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000095DC;
  v3[3] = &unk_1001AAA68;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  [v2 performSynchronousWritingBlock:v3];

  objc_destroyWeak(&v4);
}

void sub_1000095C8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000095DC(uint64_t a1)
{
  id v6 = +[AXSettings sharedInstance];
  [v6 assistiveTouchMotionTrackerXNormalizationOrder];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = [WeakRetained _currentPointSmoother];
  [v5 setXOrder:v3];
}

void sub_100009664(uint64_t a1)
{
  double v2 = +[AXAccessQueue mainAccessQueue];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100009728;
  v3[3] = &unk_1001AAA68;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  [v2 performSynchronousWritingBlock:v3];

  objc_destroyWeak(&v4);
}

void sub_100009714(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100009728(uint64_t a1)
{
  id v6 = +[AXSettings sharedInstance];
  [v6 assistiveTouchMotionTrackerYNormalizationOrder];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = [WeakRetained _currentPointSmoother];
  [v5 setYOrder:v3];
}

void sub_1000097B0(uint64_t a1)
{
  double v2 = +[AXAccessQueue mainAccessQueue];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100009874;
  v3[3] = &unk_1001AAA68;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  [v2 performSynchronousWritingBlock:v3];

  objc_destroyWeak(&v4);
}

void sub_100009860(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100009874(uint64_t a1)
{
  id v6 = +[AXSettings sharedInstance];
  [v6 assistiveTouchMotionTrackerXNormalizationOffset];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = [WeakRetained _currentPointSmoother];
  [v5 setXOffset:v3];
}

void sub_1000098FC(uint64_t a1)
{
  double v2 = +[AXAccessQueue mainAccessQueue];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000099C0;
  v3[3] = &unk_1001AAA68;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  [v2 performSynchronousWritingBlock:v3];

  objc_destroyWeak(&v4);
}

void sub_1000099AC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000099C0(uint64_t a1)
{
  id v6 = +[AXSettings sharedInstance];
  [v6 assistiveTouchMotionTrackerYNormalizationOffset];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = [WeakRetained _currentPointSmoother];
  [v5 setYOffset:v3];
}

void sub_100009A48(uint64_t a1)
{
  double v2 = +[AXAccessQueue mainAccessQueue];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100009B0C;
  v3[3] = &unk_1001AAA68;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  [v2 performSynchronousWritingBlock:v3];

  objc_destroyWeak(&v4);
}

void sub_100009AF8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100009B0C(uint64_t a1)
{
  id v5 = +[AXSettings sharedInstance];
  id v2 = [v5 assistiveTouchMotionTrackerShouldOffsetBufferPoints];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = [WeakRetained _currentPointSmoother];
  [v4 setShouldOffsetBufferPoints:v2];
}

void sub_100009B94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = +[AXSettings sharedInstance];
    WeakRetained[172] = [v1 assistiveTouchForceEyeTrackerExperience];
  }
}

void sub_100009C00(uint64_t a1)
{
  id v5 = +[BKSMousePointerService sharedInstance];
  uint64_t v2 = [v5 addPointerDeviceObserver:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 160);
  *(void *)(v3 + 160) = v2;
}

void sub_10000A1A0(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  [v2 updateCustomizableMouse:*(void *)(a1 + 32)];
}

uint64_t sub_10000A2FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000A6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000A6C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000A6D0(uint64_t a1)
{
}

void sub_10000A6D8(uint64_t a1)
{
  v12[0] = @"scrollAmount";
  id v2 = +[NSNumber numberWithLong:*(void *)(*(void *)(a1 + 32) + 56)];
  v12[1] = @"scrollPoint";
  v13[0] = v2;
  uint64_t v3 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", *(double *)(a1 + 48), *(double *)(a1 + 56));
  v13[1] = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:2];

  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) performAXAction:2047 withValue:v4] & 1) == 0)
  {
    while (1)
    {
      id v5 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) numberWithAXAttribute:2021];
      id v6 = [v5 unsignedIntValue];

      id v7 = +[AXBackBoardServer server];
      id v8 = [v7 contextIdHostingContextId:v6];

      id v9 = +[AXUIElement uiApplicationForContext:v8];
      if (!v9 || [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) isEqual:v9]) {
        break;
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) performAXAction:2047 withValue:v4])goto LABEL_7; {
    }
      }
  }
LABEL_7:
  *(void *)(*(void *)(a1 + 32) + 56) = 0;
}

void sub_10000B208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000B22C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _checkBackboardEffectiveDeviceOrientation];
}

void sub_10000B840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000B860(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_10000BA9C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _currentPointSmoother];
  [v1 removeAllPoints];
}

void sub_10000C18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10000C1EC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _currentPointSmoother];
  objc_msgSend(v2, "addPoint:", *(double *)(a1 + 56), *(double *)(a1 + 64));

  unsigned int v3 = [*(id *)(a1 + 40) currentlySnappedInBubbleMode];
  unsigned int v4 = [*(id *)(a1 + 32) wasSnappedInBubbleMode];
  unsigned int v5 = [*(id *)(a1 + 32) wasSnappedInBubbleMode];
  if (v4 | v3 ^ 1) == 1 && ((v5 ^ 1 | v3))
  {
    if (v3) {
      return;
    }
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) _currentPointSmoother];
    [v6 removeAllPoints];

    if (v3) {
      return;
    }
  }
  id v10 = [*(id *)(a1 + 32) _currentPointSmoother];
  [v10 point];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v9;
}

void sub_10000C2DC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _currentPointSmoother];
  objc_msgSend(v2, "addPoint:", *(double *)(a1 + 48), *(double *)(a1 + 56));

  id v6 = [*(id *)(a1 + 32) _currentPointSmoother];
  [v6 point];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v5;
}

void sub_10000C460(id a1, NSTimer *a2)
{
  id v2 = +[AXSettings sharedInstance];
  unsigned int v3 = [v2 assistiveTouchMouseOnDeviceEyeTrackingEnabled];

  if (v3)
  {
    id v4 = +[AXPISystemActionHelper sharedInstance];
    [v4 activateHomeButton];
  }
}

id sub_10000C67C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) handManager];
  unsigned int v3 = [v2 mainDisplayManager];
  [v3 setNeedsRecalibration:*(unsigned __int8 *)(a1 + 40)];

  [*(id *)(a1 + 32) _resetCalibrationTimer];
  id v4 = *(void **)(*(void *)(a1 + 32) + 216);

  return [v4 resetGazeEnrollment];
}

void sub_10000C800(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) handManager];
  id v2 = [v3 mainDisplayManager];
  [v2 showBubbleNotificationIndefinitelyWithError:*(void *)(a1 + 40)];
}

BOOL sub_10000CBCC(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_10000D064(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "deviceCountChanged:", objc_msgSend(v2, "deviceCount"));
}

id sub_10000D14C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 152) unionSet:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);

  return [v2 _notifyDisplayManagerDeviceCountChanged];
}

id sub_10000D21C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 152) minusSet:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);

  return [v2 _notifyDisplayManagerDeviceCountChanged];
}

void sub_10000D4B8(id a1)
{
  qword_1001F0950 = [[SCATSwitchControlServerInstance alloc] _initServer];

  _objc_release_x1();
}

void sub_10000EAC4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id sub_10000FA38(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _beginHighlightingTargetedElements];
}

void sub_10000FA40(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pointPicker];
  id v3 = [v2 delegate];
  char v4 = objc_opt_respondsToSelector();

  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 32) pointPicker];
    id v6 = [v5 delegate];
    uint64_t v7 = [*(id *)(a1 + 32) pointPicker];
    [v6 pointPickerDidFinishSweeping:v7];

    id v8 = [*(id *)(a1 + 32) axisPointPicker];
    [v8 setSweepFocusContext:0];
  }
}

id sub_10001065C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:1.0];
}

id sub_100010668(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:1.0];
}

void sub_100010674(uint64_t a1, int a2)
{
  if (a2)
  {
    id v2 = [*(id *)(a1 + 32) viewController];
    [v2 setTransitioningToOrFromActive:0];
  }
}

void sub_1000107BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) viewController];
  id v1 = [v2 view];
  [v1 setAlpha:0.0];
}

void sub_10001081C(uint64_t a1, int a2)
{
  if (a2)
  {
    id v2 = [*(id *)(a1 + 32) viewController];
    [v2 setTransitioningToOrFromActive:0];
  }
}

void sub_100010B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010B9C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = +[AXSettings sharedInstance];
  objc_msgSend(v1, "setListenForMouseKeyToggle:", objc_msgSend(v2, "assistiveTouchMouseKeysOptionToggleEnabled"));
}

void sub_100010BFC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateKeyboardMonitorStateIfNeeded];
}

uint64_t sub_100010D68(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 type] == 10)
  {
    char v4 = [v3 keyInfo];
    if ([v4 keyCode] == 226)
    {
    }
    else
    {
      uint64_t v5 = [v3 keyInfo];
      unsigned int v6 = [v5 keyCode];

      if (v6 != 230)
      {
        dword_1001F0960 = 0;
        goto LABEL_9;
      }
    }
    if (++dword_1001F0960 == 5)
    {
      dword_1001F0960 = 0;
      uint64_t v7 = +[AXSettings sharedInstance];
      id v8 = +[AXSettings sharedInstance];
      objc_msgSend(v7, "setAssistiveTouchMouseKeysEnabled:", objc_msgSend(v8, "assistiveTouchMouseKeysEnabled") ^ 1);
    }
    else
    {
      [*(id *)(*(void *)(a1 + 32) + 32) afterDelay:&stru_1001AAD00 processBlock:2.0];
    }
  }
LABEL_9:

  return 0;
}

void sub_100010E80(id a1)
{
  dword_1001F0960 = 0;
}

void sub_100010FC8(uint64_t a1, void *a2)
{
  device = a2;
  if (IOHIDDeviceConformsTo(device, 1u, 6u) || IOHIDDeviceConformsTo(device, 1u, 7u)) {
    [*(id *)(a1 + 32) addObject:device];
  }
}

void sub_10001103C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 delegate];
  [v5 deviceDetector:*(void *)(a1 + 32) didFindDevice:v4];
}

BOOL sub_1000110AC(id a1, HNDDevice *a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_1000116BC(void *a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  unsigned int v6 = ASTLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412546;
    uint64_t v9 = a4;
    __int16 v10 = 2080;
    id v11 = "matched";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "===> IOHIDDeviceRef[%@] %s <===\n", (uint8_t *)&v8, 0x16u);
  }

  sub_1000119C8(a4);
  uint64_t v7 = [a1 delegate];
  [v7 deviceDetector:a1 didFindDevice:a4];
}

void sub_1000117A8(void *a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  unsigned int v6 = ASTLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    __int16 v10 = a4;
    __int16 v11 = 2080;
    id v12 = "removed";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "===> IOHIDDeviceRef[%@] %s <===\n", buf, 0x16u);
  }

  sub_1000119C8(a4);
  uint64_t v7 = [a1 delegate];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10001227C;
  v8[3] = &unk_1001AADB0;
  void v8[4] = a4;
  [v7 deviceDetector:a1 unloadDevicesPassingTest:v8];
}

void sub_1000118DC(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = +[AXSettings sharedInstance];
  objc_msgSend(v1, "setMouseKeysEnabled:", objc_msgSend(v2, "assistiveTouchMouseKeysEnabled"));
}

void sub_1000119C8(__IOHIDDevice *a1)
{
  if (a1)
  {
    id v2 = ASTLogCommon();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v39 = 136315394;
      v40 = "Transport";
      __int16 v41 = 2112;
      CFTypeRef Property = IOHIDDeviceGetProperty(a1, @"Transport");
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    id v3 = ASTLogCommon();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v4 = IOHIDDeviceGetProperty(a1, @"VendorID");
      int v39 = 136315394;
      v40 = "VendorID";
      __int16 v41 = 2112;
      CFTypeRef Property = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    id v5 = ASTLogCommon();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v6 = IOHIDDeviceGetProperty(a1, @"VendorIDSource");
      int v39 = 136315394;
      v40 = "VendorIDSource";
      __int16 v41 = 2112;
      CFTypeRef Property = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    uint64_t v7 = ASTLogCommon();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v8 = IOHIDDeviceGetProperty(a1, @"ProductID");
      int v39 = 136315394;
      v40 = "ProductID";
      __int16 v41 = 2112;
      CFTypeRef Property = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    uint64_t v9 = ASTLogCommon();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v10 = IOHIDDeviceGetProperty(a1, @"VersionNumber");
      int v39 = 136315394;
      v40 = "VersionNumber";
      __int16 v41 = 2112;
      CFTypeRef Property = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    __int16 v11 = ASTLogCommon();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v12 = IOHIDDeviceGetProperty(a1, @"Manufacturer");
      int v39 = 136315394;
      v40 = "Manufacturer";
      __int16 v41 = 2112;
      CFTypeRef Property = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v13 = ASTLogCommon();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v14 = IOHIDDeviceGetProperty(a1, @"Product");
      int v39 = 136315394;
      v40 = "Product";
      __int16 v41 = 2112;
      CFTypeRef Property = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v15 = ASTLogCommon();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v16 = IOHIDDeviceGetProperty(a1, @"SerialNumber");
      int v39 = 136315394;
      v40 = "SerialNumber";
      __int16 v41 = 2112;
      CFTypeRef Property = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v17 = ASTLogCommon();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v18 = IOHIDDeviceGetProperty(a1, @"CountryCode");
      int v39 = 136315394;
      v40 = "CountryCode";
      __int16 v41 = 2112;
      CFTypeRef Property = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v19 = ASTLogCommon();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v20 = IOHIDDeviceGetProperty(a1, @"StandardType");
      int v39 = 136315394;
      v40 = "StandardType";
      __int16 v41 = 2112;
      CFTypeRef Property = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v21 = ASTLogCommon();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v22 = IOHIDDeviceGetProperty(a1, @"LocationID");
      int v39 = 136315394;
      v40 = "LocationID";
      __int16 v41 = 2112;
      CFTypeRef Property = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v23 = ASTLogCommon();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v24 = IOHIDDeviceGetProperty(a1, @"DeviceUsage");
      int v39 = 136315394;
      v40 = "DeviceUsage";
      __int16 v41 = 2112;
      CFTypeRef Property = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v25 = ASTLogCommon();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v26 = IOHIDDeviceGetProperty(a1, @"DeviceUsagePage");
      int v39 = 136315394;
      v40 = "DeviceUsagePage";
      __int16 v41 = 2112;
      CFTypeRef Property = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v27 = ASTLogCommon();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v28 = IOHIDDeviceGetProperty(a1, @"DeviceUsagePairs");
      int v39 = 136315394;
      v40 = "DeviceUsagePairs";
      __int16 v41 = 2112;
      CFTypeRef Property = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v29 = ASTLogCommon();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v30 = IOHIDDeviceGetProperty(a1, @"PrimaryUsage");
      int v39 = 136315394;
      v40 = "PrimaryUsage";
      __int16 v41 = 2112;
      CFTypeRef Property = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v31 = ASTLogCommon();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v32 = IOHIDDeviceGetProperty(a1, @"PrimaryUsagePage");
      int v39 = 136315394;
      v40 = "PrimaryUsagePage";
      __int16 v41 = 2112;
      CFTypeRef Property = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v33 = ASTLogCommon();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v34 = IOHIDDeviceGetProperty(a1, @"ReportInterval");
      int v39 = 136315394;
      v40 = "ReportInterval";
      __int16 v41 = 2112;
      CFTypeRef Property = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v35 = ASTLogCommon();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v36 = IOHIDDeviceGetProperty(a1, @"ReportDescriptor");
      int v39 = 136315394;
      v40 = "ReportDescriptor";
      __int16 v41 = 2112;
      CFTypeRef Property = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }

    v37 = ASTLogCommon();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      CFTypeRef v38 = IOHIDDeviceGetProperty(a1, @"Reset");
      int v39 = 136315394;
      v40 = "Reset";
      __int16 v41 = 2112;
      CFTypeRef Property = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "%s -- %@", (uint8_t *)&v39, 0x16u);
    }
  }
}

id sub_10001227C(uint64_t a1, void *a2)
{
  return [a2 containsHIDDevice:*(void *)(a1 + 32)];
}

void sub_100012B34(id a1, SCATMenu *a2)
{
  id v3 = +[AXElement systemWideElement];
  id v2 = [v3 systemApplication];
  [v2 performAction:5202];
}

void sub_100012B98(id a1, SCATMenu *a2)
{
  id v3 = +[AXElement systemWideElement];
  id v2 = [v3 systemApplication];
  [v2 performAction:5204];
}

void sub_100012BFC(id a1, SCATMenu *a2)
{
  id v3 = +[AXElement systemWideElement];
  id v2 = [v3 systemApplication];
  [v2 performAction:5203];
}

void sub_100012C60(id a1, SCATMenu *a2)
{
  id v3 = +[AXElement systemWideElement];
  id v2 = [v3 systemApplication];
  [v2 performAction:5205 withValue:&off_1001BBB08];
}

void sub_100012CCC(id a1, SCATMenu *a2)
{
  id v3 = +[AXElement systemWideElement];
  id v2 = [v3 systemApplication];
  [v2 performAction:5205 withValue:&off_1001BBB20];
}

void sub_100012D38(id a1, SCATMenu *a2)
{
  id v3 = +[AXElement systemWideElement];
  id v2 = [v3 systemApplication];
  [v2 performAction:5207];
}

void sub_100012D9C(id a1, SCATMenu *a2)
{
  id v3 = +[AXElement systemWideElement];
  id v2 = [v3 systemApplication];
  [v2 performAction:5208];
}

BOOL sub_100012E0C(id a1, SCATModernMenuItem *a2)
{
  return 0;
}

void sub_100015300(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_100015348(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = +[AXSettings sharedInstance];
  id v3 = [v2 assistiveTouchOrbAction];
  WeakRetained[1288] = v3 != 0;

  id v4 = objc_loadWeakRetained(v1);
  [v4 _updateSpeakScreenStatus];
}

void sub_1000153D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateSpeakScreenStatus];
}

void sub_100015418(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateSpeakScreenStatus];
}

void sub_100015458(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateSpeakScreenStatus];
}

void sub_100015498(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateSpeakScreenStatus];
}

void sub_1000154D8(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v3 = [WeakRetained isShowingVirtualTrackpad];
  id v4 = +[AXSettings sharedInstance];
  unsigned int v5 = [v4 assistiveTouchVirtualTrackpadEnabled];

  if (v3 != v5)
  {
    id v7 = objc_loadWeakRetained(v1);
    CFTypeRef v6 = +[AXSettings sharedInstance];
    objc_msgSend(v7, "toggleShowTrackpad:", objc_msgSend(v6, "assistiveTouchVirtualTrackpadEnabled"));
  }
}

void sub_1000155AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = +[AXSettings sharedInstance];
  objc_msgSend(WeakRetained, "_onDeviceEyeTrackingSettingsChanged:", objc_msgSend(v1, "assistiveTouchMouseOnDeviceEyeTrackingEnabled"));
}

void sub_100015618(id *a1)
{
  uint64_t v2 = +[AXSettings sharedInstance];
  [v2 assistiveTouchMousePointerTimeout];
  double v4 = v3;
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  [WeakRetained setAssistiveTouchMousePointerTimeout:v4];

  id v6 = objc_loadWeakRetained(a1);
  [v6 _updateAutoHideMousePointer];
}

void sub_1000156B0(id *a1)
{
  uint64_t v2 = +[AXSettings sharedInstance];
  id v3 = [v2 assistiveTouchMousePointerTimeoutEnabled];
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  [WeakRetained setAssistiveTouchMousePointerTimeoutEnabled:v3];

  id v5 = objc_loadWeakRetained(a1);
  [v5 _updateAutoHideMousePointer];
}

void sub_100015740(id *a1)
{
  uint64_t v2 = +[AXSettings sharedInstance];
  [v2 assistiveTouchMouseDwellControlActivationTimeout];
  double v4 = v3;
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  [WeakRetained setAssistiveTouchMouseDwellControlActivationTimeout:v4];

  id v6 = objc_loadWeakRetained(a1);
  [v6 _updateAutoHideMousePointer];
}

void sub_1000157D8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = +[AXSettings sharedInstance];
  objc_msgSend(v1, "toggleShowTrackpad:", objc_msgSend(v2, "assistiveTouchVirtualTrackpadEnabled"));
}

void sub_100015974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100015990(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setFingerContentViewIsActive:0];
}

id sub_100016044(uint64_t a1)
{
  -[HNDHandManager screenFrame:]_0();
  id v2 = *(void **)(a1 + 32);

  return [v2 initializeScreenBounds];
}

void sub_100016624(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:off_1001ED9F8 object:*(void *)(*(void *)(a1 + 32) + 96)];
}

void sub_100016D2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100016D50(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 48))
    {
      WeakRetained[48] = 0;
      double v4 = [*(id *)(a1 + 32) handManager];
      [v4 showUIForEyeTracker];

      id v5 = *(void **)(a1 + 32);
      [v5 _nubbitPointForEdgePosition];
      objc_msgSend(v5, "_moveNubbitToPosition:");
      id v6 = [WeakRetained handManager];
      id v7 = [v6 deviceManager];
      [v7 setDetectDevices:1];
    }
    [*(id *)(a1 + 32) _removeAllSystemGestureDisablingAssertions];
  }
  else
  {
    CFTypeRef v8 = [WeakRetained handManager];
    uint64_t v9 = [v8 deviceManager];
    [v9 setDetectDevices:1];

    [WeakRetained _resetForceDismissalReason];
  }
}

void -[HNDDisplayManager _blockAllSystemGestures](HNDDisplayManager *self, SEL a2)
{
  double v3 = [(HNDDisplayManager *)self disableControlCenterAssertion];

  if (!v3)
  {
    double v4 = +[AXAssertion assertionWithType:AXAssertionTypeDisableControlCenterGesture identifier:@"EyeTracking: Disable Control Center"];
    [(HNDDisplayManager *)self setDisableControlCenterAssertion:v4];
  }
  id v5 = [(HNDDisplayManager *)self disableNotificationCenterAssertion];

  if (!v5)
  {
    id v6 = +[AXAssertion assertionWithType:AXAssertionTypeDisableNotificationCenterGesture identifier:@"EyeTracking: Disable Notification Center"];
    [(HNDDisplayManager *)self setDisableNotificationCenterAssertion:v6];
  }
  id v7 = [(HNDDisplayManager *)self disableSystemGesturesAssertion];

  if (!v7)
  {
    id v8 = +[AXAssertion assertionWithType:AXAssertionTypeDisableSystemGestures identifier:@"EyeTracking: Disable system gestures"];
    [(HNDDisplayManager *)self setDisableSystemGesturesAssertion:v8];
  }
}

id sub_10001798C(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 56);
  v3[0] = *(_OWORD *)(a1 + 40);
  v3[1] = v1;
  v3[2] = *(_OWORD *)(a1 + 72);
  return [*(id *)(*(void *)(a1 + 32) + 88) setTransform:v3];
}

void sub_100017B04(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = ASTLogCommon();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Reachability triggered: %@", (uint8_t *)&v8, 0xCu);
  }

  [*(id *)(a1 + 32) _handleReachability:v3];
  id v5 = [v3 copy];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 1296);
  *(void *)(v6 + 1296) = v5;
}

id sub_100017BE0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) setReachabilityHandlerIdentifier:a2];
}

void sub_100018C18(uint64_t a1)
{
  uint64_t v2 = +[HNDDefaults sharedDefaults];
  id v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  [v2 setPreference:v3 forKey:@"NubbitPositionPercentage"];

  id v5 = +[HNDDefaults sharedDefaults];
  double v4 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  [v5 setPreference:v4 forKey:@"NubbitPositionEdge"];
}

id sub_100018DE4(double *a1)
{
  double v2 = a1[5];
  double v3 = a1[6];
  [*(id *)(*((void *)a1 + 4) + 72) frame];
  double v5 = v4;
  [*(id *)(*((void *)a1 + 4) + 72) frame];
  id v7 = *(void **)(*((void *)a1 + 4) + 72);

  return objc_msgSend(v7, "setFrame:", v2, v3, v5, v6);
}

void sub_10001AFB8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 1304) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 1120) = 0;
  double v2 = [*(id *)(a1 + 32) handManager];
  [v2 setNubbitMoving:0];

  double v3 = *(void **)(a1 + 32);
  double v4 = +[AXSettings sharedInstance];
  double v5 = [v4 assistiveTouchLongPressAction];
  [v3 activateAssistiveTouchAction:v5 fromButtonPress:0];

  [*(id *)(*(void *)(a1 + 32) + 1320) cancel];
  double v6 = ASTLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "long press activated", v7, 2u);
  }
}

id sub_10001B0A4(id result)
{
  if (*((unsigned char *)result + 56))
  {
    long long v1 = (char *)result;
    uint64_t v2 = *((void *)result + 4);
    if (*(unsigned char *)(v2 + 136))
    {
      double v3 = *(void **)(v2 + 1456);
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_10001B178;
      v5[3] = &unk_1001AAA90;
      v5[4] = v2;
      [v3 performBlockAfterHitTestWithDelay:v5 block:0.1];
      uint64_t v2 = *((void *)v1 + 4);
    }
    [*(id *)(v2 + 72) frame];
    result = (id)CGRectContainsPoint(v6, *(CGPoint *)(v1 + 40));
    if (result)
    {
      result = [*(id *)(*((void *)v1 + 4) + 72) style];
      BOOL v4 = result == 0;
    }
    else
    {
      BOOL v4 = 0;
    }
    *(unsigned char *)(*((void *)v1 + 4) + 139) = v4;
  }
  return result;
}

id sub_10001B178(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1456) handlePrimaryButtonPress:1];
}

id sub_10001B770(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _longIdleTimerFired];
}

id sub_10001B81C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _idleTimerFired];
}

void sub_10001BD24(uint64_t a1)
{
  uint64_t v2 = ASTLogCommon();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AST Handling orientation change: (hidden: %d)", (uint8_t *)v5, 8u);
  }

  ++qword_1001F0970;
  if (![*(id *)(*(void *)(a1 + 32) + 72) style] && !*(unsigned char *)(a1 + 40)) {
    [*(id *)(*(void *)(a1 + 32) + 72) setAlpha:0.001];
  }
  if (*(unsigned char *)(a1 + 41))
  {
    BOOL v4 = [*(id *)(*(void *)(a1 + 32) + 1448) view];
    [v4 setAlpha:0.001];
  }
}

void sub_10001BE34(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10001BF30;
  v6[3] = &unk_1001AAA90;
  uint64_t v7 = *(void *)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10001BF38;
  v2[3] = &unk_1001AB098;
  __int16 v5 = *(_WORD *)(a1 + 72);
  v2[4] = v7;
  long long v4 = *(_OWORD *)(a1 + 56);
  id v3 = *(id *)(a1 + 40);
  +[UIView animateWithDuration:v6 animations:v2 completion:v1];
}

id sub_10001BF30(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateViewsForOrientation];
}

void sub_10001BF38(uint64_t a1)
{
  uint64_t v2 = ASTLogCommon();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    int v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AST windows: set windows visible again (rocker hidden: %d)", buf, 8u);
  }

  [*(id *)(*(void *)(a1 + 32) + 32) setHidden:0];
  [*(id *)(*(void *)(a1 + 32) + 40) setHidden:0];
  if (![*(id *)(*(void *)(a1 + 32) + 72) style] && !*(unsigned char *)(a1 + 64))
  {
    long long v4 = *(void **)(a1 + 32);
    [v4 _nubbitPointForEdgePosition];
    objc_msgSend(v4, "_validateNubbitPosition:forKeyboard:", 0);
    double v7 = v5;
    double v8 = v6;
    uint64_t v9 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v9 + 1248))
    {
      unsigned int v10 = objc_msgSend((id)v9, "_position:isOverKeyboard:", v5, v6, *(double *)(v9 + 1256), *(double *)(v9 + 1264), *(double *)(v9 + 1272), *(double *)(v9 + 1280));
      uint64_t v9 = *(void *)(a1 + 32);
      if (v10)
      {
        objc_msgSend((id)v9, "_nubbitPositionForKeyboardFrame:", *(double *)(v9 + 1256), *(double *)(v9 + 1264), *(double *)(v9 + 1272), *(double *)(v9 + 1280));
        double v7 = v11;
        double v8 = v12;
        uint64_t v9 = *(void *)(a1 + 32);
      }
    }
    objc_msgSend(*(id *)(v9 + 72), "transitionMenuToNubbit:changeAlpha:animate:", 0, 0, v7, v8);
  }
  if (*(unsigned char *)(a1 + 65))
  {
    [*(id *)(*(void *)(a1 + 32) + 1456) handleOrientationChange];
    [*(id *)(*(void *)(a1 + 32) + 1456) handleTrackpadCornerPlacement];
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10001C19C;
  v15[3] = &unk_1001AB020;
  uint64_t v16 = *(void *)(a1 + 32);
  char v18 = *(unsigned char *)(a1 + 64);
  long long v17 = *(_OWORD *)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10001C29C;
  v13[3] = &unk_1001AB070;
  v13[4] = v16;
  id v14 = *(id *)(a1 + 40);
  +[UIView animateWithDuration:v15 animations:v13 completion:0.2];
}

void sub_10001C19C(uint64_t a1)
{
  if (!--qword_1001F0970)
  {
    uint64_t v2 = ASTLogCommon();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 1232);
      v6[0] = 67109120;
      v6[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AST: orientation finished: visuals still hidden? %d", (uint8_t *)v6, 8u);
    }

    uint64_t v4 = *(void *)(a1 + 32);
    if (!*(unsigned char *)(v4 + 1232))
    {
      if (!*(unsigned char *)(a1 + 56))
      {
        [*(id *)(v4 + 72) setAlpha:*(double *)(a1 + 40)];
        uint64_t v4 = *(void *)(a1 + 32);
      }
      double v5 = [*(id *)(v4 + 1448) view];
      [v5 setAlpha:*(double *)(a1 + 48)];
    }
  }
}

uint64_t sub_10001C29C(uint64_t a1)
{
  [*(id *)(a1 + 32) setNeedsRecalibration:1];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

id sub_10001CB1C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) inBubbleMode])
  {
    unsigned int v3 = [*(id *)(a1 + 32) inBubbleMode];
    uint64_t v4 = *(void **)(a1 + 32);
    if (v3)
    {
      double v1 = [v4 handManager];
      if (![v1 currentlySnappedInBubbleMode])
      {
        BOOL v5 = 1;
        goto LABEL_14;
      }
      if (([*(id *)(a1 + 32) inBubbleMode] & 1) == 0)
      {
        BOOL v5 = 0;
        goto LABEL_14;
      }
    }
    else if (![v4 inBubbleMode])
    {
      BOOL v5 = 0;
      goto LABEL_15;
    }
    double v6 = [*(id *)(a1 + 32) handManager];
    if ([v6 currentlySnappedInBubbleMode])
    {
      BOOL v5 = *(unsigned char *)(a1 + 40) != 0;

      if ((v3 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }

    BOOL v5 = 0;
    if (v3) {
LABEL_14:
    }
  }
  else
  {
    BOOL v5 = 1;
  }
LABEL_15:
  unsigned int v7 = [*(id *)(*(void *)(a1 + 32) + 80) isActive];
  if (v5 && v7)
  {
    double v8 = 0.0;
    if (!*(unsigned char *)(a1 + 40)) {
      double v8 = 1.0;
    }
    [*(id *)(*(void *)(a1 + 32) + 80) setAlpha:v8];
  }
  id result = [*(id *)(a1 + 32) alwaysShowMenu];
  if (result)
  {
    unsigned int v10 = *(void **)(*(void *)(a1 + 32) + 72);
    double v11 = 0.0;
    if (!*(unsigned char *)(a1 + 40)) {
      double v11 = 1.0;
    }
    return [v10 setAlpha:v11];
  }
  return result;
}

id sub_10001D02C(uint64_t a1)
{
  uint64_t v2 = +[UIColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:0.01];
  [*(id *)(*(void *)(a1 + 32) + 160) setBackgroundColor:v2];

  unsigned int v3 = *(void **)(*(void *)(a1 + 32) + 160);

  return [v3 setAlpha:1.0];
}

id sub_10001D0A4(uint64_t a1)
{
  uint64_t v2 = +[UIColor clearColor];
  [*(id *)(*(void *)(a1 + 32) + 160) setBackgroundColor:v2];

  unsigned int v3 = *(void **)(*(void *)(a1 + 32) + 160);

  return [v3 setAlpha:0.0];
}

void sub_10001D108(uint64_t a1)
{
  [*(id *)(a1 + 32) reachabilityOffset];
  if (v2 != 0.0) {
    [*(id *)(a1 + 32) _updateRockerReachability];
  }
  id v4 = [*(id *)(a1 + 32) handManager];
  unsigned int v3 = [*(id *)(a1 + 32) hardwareIdentifier];
  [v4 resetFingersIfActiveOnDisplay:v3];
}

void sub_10001D8EC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 72) activateMenuItemDown:*(void *)(a1 + 40) fromButtonPress:*(unsigned __int8 *)(a1 + 48)];
  id v2 = *(id *)(a1 + 40);
  AXPerformBlockOnMainThreadAfterDelay();
}

void sub_10001D9A0(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(*(void *)(a1 + 32) + 72) activateMenuItemUp:*(void *)(a1 + 40) fromButtonPress:*(unsigned __int8 *)(a1 + 48)];
  if (!*(unsigned char *)(a1 + 49) && (v2 & 1) == 0)
  {
    id v3 = +[AXPISystemActionHelper sharedInstance];
    [v3 performActionForSystemAction:*(void *)(a1 + 40)];
  }
}

void sub_10001DA24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 1384));
  [WeakRetained activateCurrentBubbleModeFocusedElement];
}

void sub_10001DDC0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 1320) isCancelled] && *(void *)(a1 + 40))
  {
    unsigned __int8 v2 = ASTLogCommon();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v13) = 0;
      id v3 = "not activating single tap because double tap fired";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, (uint8_t *)&v13, 2u);
    }
  }
  else
  {
    if (!*(unsigned char *)(*(void *)(a1 + 32) + 1304) || !*(void *)(a1 + 48))
    {
      id v4 = +[AXSettings sharedInstance];
      unsigned __int8 v2 = [v4 assistiveTouchMainScreenCustomization];

      BOOL v5 = ASTLogCommon();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 56);
        int v13 = 138412290;
        uint64_t v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Activating single tap action %@", (uint8_t *)&v13, 0xCu);
      }

      unsigned int v7 = *(void **)(a1 + 56);
      if (v7 && ([v7 isEqualToString:AXAssistiveTouchIconTypeOpenMenu] & 1) == 0)
      {
        double v12 = *(void **)(a1 + 32);
        uint64_t v11 = *(void *)(a1 + 56);
      }
      else
      {
        if ([*(id *)(*(void *)(a1 + 32) + 72) customizationMapAllowInstanceActivation:v2])
        {
          double v8 = AXAssistiveTouchLocationsForLayout();
          uint64_t v9 = [v8 firstObject];
          unsigned int v10 = [v2 objectForKeyedSubscript:v9];

          [*(id *)(a1 + 32) activateAssistiveTouchAction:v10 fromButtonPress:0];
          goto LABEL_20;
        }
        uint64_t v11 = *(void *)(a1 + 56);
        if (!v11) {
          goto LABEL_20;
        }
        double v12 = *(void **)(a1 + 32);
      }
      [v12 activateAssistiveTouchAction:v11 fromButtonPress:0];
      goto LABEL_20;
    }
    unsigned __int8 v2 = ASTLogCommon();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v13) = 0;
      id v3 = "not activating single tap because long press fired";
      goto LABEL_9;
    }
  }
LABEL_20:
}

id sub_10001F320(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldDelayBeforePresentingHUDView:0];
  unsigned __int8 v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);

  return [v2 _presentLargeContentViewerForHUDItem:v3 inContentView:v4];
}

id sub_10001F54C(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeFromSuperview];
}

void sub_10001F7B4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_10001F7E0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 48) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 1376) = 0;
  double v1 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unsigned __int8 v3 = [WeakRetained didForceDimissCalibration];

  if ((v3 & 1) == 0)
  {
    id v4 = objc_loadWeakRetained(v1);
    BOOL v5 = [v4 handManager];
    [v5 showUIForEyeTracker];
  }
  id v6 = objc_loadWeakRetained(v1);
  [v6 _nubbitPointForEdgePosition];
  objc_msgSend(v6, "_moveNubbitToPosition:");

  id v7 = objc_loadWeakRetained(v1);
  [v7 _removeAllSystemGestureDisablingAssertions];
}

void sub_10001F8AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateViewsForOrientation];
}

uint64_t sub_10001F8EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001FF94(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

id sub_10002238C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isActive];
  if (result)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 16) = 1;
    unsigned __int8 v3 = *(void **)(a1 + 32);
    return _[v3 _idleTimerDidFire];
  }
  return result;
}

void sub_100022910(id a1)
{
  qword_1001F0978 = objc_alloc_init(HNDHandManager);

  _objc_release_x1();
}

void sub_100022F58(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

id sub_100022F84(uint64_t a1, void *a2)
{
  return [a2 _systemPointerSettingsDidChange];
}

id sub_100022F8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startOrientationUpdateTimer];
}

id sub_100022F94(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateFadedFingerOpacity];
}

void sub_100022F9C(id *a1)
{
  uint64_t v2 = +[AXSettings sharedInstance];
  id v3 = [v2 assistiveTouchMouseBehavesLikeFinger];
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  [WeakRetained setMouseBehavesLikeFinger:v3];

  id v5 = objc_loadWeakRetained(a1);
  [v5 resetFingersIfNeeded];
}

void sub_10002302C(uint64_t a1)
{
  id v4 = +[AXSettings sharedInstance];
  id v2 = [v4 assistiveTouchMouseOnDeviceEyeTrackingEnabled];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setIsOnDeviceEyeTrackingEnabled:v2];
}

id sub_10002332C(uint64_t a1, void *a2)
{
  return [a2 setAlwaysShowMenu:*(unsigned __int8 *)(a1 + 32)];
}

void sub_100023700(id a1, int64_t a2)
{
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    _AXSAssistiveTouchScannerSetEnabled();
    id v2 = +[AXSettings sharedInstance];
    unsigned int v3 = [v2 assistiveTouchScannerAddedTripleClickAutomatically];

    if (!v3) {
      return;
    }
    id v6 = (id)_AXSTripleClickCopyOptions();
    if ([v6 containsObject:&off_1001BBB38])
    {
      id v4 = [v6 mutableCopy];
      [v4 removeObject:&off_1001BBB38];
      _AXSSetTripleClickOptions();
    }
    id v5 = +[AXSettings sharedInstance];
    [v5 setAssistiveTouchScannerAddedTripleClickAutomatically:0];
  }
  else
  {
    id v6 = +[AXSettings sharedInstance];
    [v6 setAssistiveTouchSwitchUsageConfirmed:1];
  }
}

void sub_100023F2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100023F80(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) assistiveTouchOpenMenuSwaggleEnabled];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setOpenMenuWithSwaggle:v2];
}

void sub_100023FDC(uint64_t a1)
{
  [*(id *)(a1 + 32) assistiveTouchSpeed];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setTouchSpeed:v3];
}

void sub_100024040(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) assistiveTouchCustomGestures];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setCustomGestures:v3];
}

void sub_1000240A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateMenuVisibility];
}

void sub_1000240E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updatePointerAppearance];
}

void sub_100024124(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updatePointerAppearance];
}

void sub_100024164(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _dwellControlToggled];
}

void sub_1000241A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateSoftwareKeyboardState];
}

void sub_1000241E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "enableBubbleMode:", objc_msgSend(*(id *)(a1 + 32), "assistiveTouchBubbleModeEnabled"));
}

void sub_100024240(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAssistiveTouchEyeTrackingAutoHideEnabled];
}

void sub_100024280(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAssistiveTouchEyeTrackingAutoHideTimeout];
}

void sub_1000242C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAssistiveTouchEyeTrackingAutoHideOpacity];
}

void sub_100024300(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _setApplicationAccessibilityEnabledIfNeeded];
}

void sub_100024464(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1 + 32) deviceManager];
  if ([v3 mainDeviceIsMotionTracker])
  {
    unsigned int v4 = [*(id *)(a1 + 32) eyeTrackingAutoHideEnabled];

    if (v4)
    {
      id v5 = +[AXSettings sharedInstance];
      [v5 assistiveTouchEyeTrackingAutoHideOpacity];
      objc_msgSend(v6, "updateOpacityForEyeTrackingAutoHide:");

      goto LABEL_6;
    }
  }
  else
  {
  }
  [v6 updateOpacityForEyeTrackingAutoHide:0.0];
LABEL_6:
}

void sub_10002473C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100024760(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained refreshOrientation];
}

void sub_100024A14(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100024AA8;
  v6[3] = &unk_1001AAC78;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v5 = v3;
  [v5 restartWithCompletion:v6];
}

void sub_100024AA8(uint64_t a1)
{
  if (_AXSAssistiveTouchScannerEnabled())
  {
    +[SCATScannerManager updateElementCacheScheme];
    AXPerformBlockAsynchronouslyOnMainThread();
  }
  double v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) deviceManager];
  objc_msgSend(v2, "deviceCountChanged:", objc_msgSend(v3, "deviceCount"));
}

void sub_100024B24(id a1)
{
  double v1 = +[SCATScannerManager sharedManager];
  [v1 loadScanner];

  id v2 = +[SCATScannerManager sharedManager];
  [v2 beginScanningWithFocusContext:0];
}

void sub_100024CA0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) hardwareIdentifier];
  [v2 _showFingersIfNeededForMouseOnDisplay:v3];

  if ([*(id *)(a1 + 40) type] == 3)
  {
    if (([*(id *)(a1 + 32) shouldIgnorePointerEventWhileEyeTrackerConfigures:*(void *)(a1 + 40)] & 1) == 0&& (objc_msgSend(*(id *)(a1 + 32), "shouldIgnorePointerEventWhileEyeTrackerIsInactive") & 1) == 0&& (objc_msgSend(*(id *)(a1 + 32), "shouldIgnorePointerEventWhileEyeTrackerPressedButtonDownWithDwell") & 1) == 0)
    {
      uint64_t v4 = *(void **)(a1 + 32);
      [*(id *)(a1 + 40) location];
      double v6 = v5;
      double v8 = v7;
      id v33 = [*(id *)(a1 + 40) hardwareIdentifier];
      [v4 moveFingerToPoint:v6 onDisplay:v8];
    }
    return;
  }
  if ([*(id *)(a1 + 40) type] != 4)
  {
    if ([*(id *)(a1 + 40) type] != 1
      && [*(id *)(a1 + 40) type] != 2)
    {
      return;
    }
    [*(id *)(a1 + 32) cancelDwellTimer];
    if ([*(id *)(a1 + 32) eyeTrackingAutoHideEnabled])
    {
      unsigned int v10 = [*(id *)(a1 + 32) eyeTrackingAutoHideCursorAnimator];

      if (v10)
      {
        uint64_t v11 = [*(id *)(a1 + 32) eyeTrackingAutoHideCursorAnimator];
        [v11 stopAnimation:1];

        [*(id *)(a1 + 32) setEyeTrackingAutoHideCursorAnimator:0];
      }
      [*(id *)(a1 + 32) _showCursorsForAutoHideWithDuration:&off_1001BBB50];
    }
    unsigned int v12 = [*(id *)(a1 + 32) shouldHideSystemPointerForFingersView];
    unsigned __int8 v13 = [*(id *)(a1 + 32) shouldHandleSystemPointerButtonEvent:*(void *)(a1 + 40)];
    uint64_t v14 = [*(id *)(a1 + 32) viewAtSystemPointerPoint];
    v15 = (void *)v14;
    if (!v12 || (v13 & 1) == 0)
    {
      if (v14 && [*(id *)(a1 + 40) type] == 1)
      {
        uint64_t v16 = *(void **)(a1 + 32);
        long long v17 = [*(id *)(a1 + 40) hardwareIdentifier];
        char v18 = [v16 displayManagerForHardwareIdentifier:v17];
        v19 = [v18 fingerController];

        if (![v19 numberOfFingers])
        {
          if (!*(void *)(*(void *)(a1 + 32) + 352))
          {
            uint64_t v20 = [v19 acquireAssertionToSuppressVisualsWithReason:@"HideFingersReasonSystemButtonHandler"];
            uint64_t v21 = *(void *)(a1 + 32);
            CFTypeRef v22 = *(void **)(v21 + 352);
            *(void *)(v21 + 352) = v20;
          }
          [*(id *)(a1 + 40) location];
          v23 = +[AXPIFingerModel fingerModelForLocation:](AXPIFingerModel, "fingerModelForLocation:");
          v35 = v23;
          CFTypeRef v24 = +[NSArray arrayWithObjects:&v35 count:1];
          [*(id *)(a1 + 40) location];
          objc_msgSend(v19, "showFingerModels:animated:startPointForAnimation:", v24, 1);

          [v19 pressFingersDownAnimated:1];
        }
      }
      if ([*(id *)(a1 + 40) type] == 2)
      {
        v25 = *(void **)(a1 + 32);
        CFTypeRef v26 = [*(id *)(a1 + 40) hardwareIdentifier];
        [v25 resetFingersIfNeededOnDisplay:v26];

        v27 = *(void **)(*(void *)(a1 + 32) + 352);
        if (v27)
        {
          id v28 = v27;
          uint64_t v29 = *(void *)(a1 + 32);
          CFTypeRef v30 = *(void **)(v29 + 352);
          *(void *)(v29 + 352) = 0;

          CFTypeRef v34 = v28;
          id v31 = v28;
          AXPerformBlockOnMainThreadAfterDelay();
        }
      }
    }
    CFTypeRef v32 = *(void **)(a1 + 32);
    if ((v13 & 1) == 0)
    {
      if (![v32 shouldHideSystemPointerForFingersView] || !v15) {
        goto LABEL_35;
      }
      CFTypeRef v32 = *(void **)(a1 + 32);
    }
    [v32 handleButtonEvent:*(void *)(a1 + 40)];
LABEL_35:

    return;
  }
  uint64_t v9 = *(void **)(a1 + 32);

  [v9 cancelDwellTimer];
}

id sub_1000250C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_1000252D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000252F0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v2 + 24))
  {
    *(unsigned char *)(v2 + 24) = 1;
  }
  else
  {
    id v4 = [a2 fingerController];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (unint64_t)[v4 numberOfFingers] > 1;
  }
}

void sub_1000256D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000256F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained reloadFingerAppearance];
}

id sub_100025A14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "moveFingersToPointInFingerCoordinateSpace:onDisplay:allowOutOfBounds:", *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56));
}

void sub_100025C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100025CC4(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v18 = a2;
  [v18 location];
  if (a3)
  {
    *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 32) = v7
                                                                - *(double *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                            + 32);
    [v18 location];
    *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = v9
                                                                - *(double *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                            + 40);
  }
  else
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    *(double *)(v10 + 32) = v7;
    *(void *)(v10 + 40) = v8;
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  double v12 = *(double *)(a1 + 72) + *(double *)(v11 + 32);
  double v13 = *(double *)(a1 + 80) + *(double *)(v11 + 40);
  if (*(unsigned char *)(a1 + 88)
    || ([*(id *)(a1 + 32) fingerContainerView],
        uint64_t v14 = objc_claimAutoreleasedReturnValue(),
        [v14 bounds],
        v21.x = v12,
        v21.y = v13,
        BOOL v15 = CGRectContainsPoint(v22, v21),
        v14,
        v15))
  {
    uint64_t v16 = *(void **)(a1 + 40);
    v20.x = v12;
    v20.y = v13;
    long long v17 = NSStringFromCGPoint(v20);
    [v16 addObject:v17];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
    *a4 = 1;
  }
}

void sub_100025DFC(uint64_t a1, void *a2, uint64_t a3)
{
  double v5 = *(void **)(a1 + 32);
  id v8 = a2;
  double v6 = [v5 objectAtIndexedSubscript:a3];
  CGPoint v7 = CGPointFromString(v6);

  objc_msgSend(v8, "setLocation:", v7.x, v7.y);
  [v8 setShape:*(void *)(a1 + 40)];
}

void sub_1000261F4(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 249))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1000262AC;
    v5[3] = &unk_1001AAFF8;
    id v6 = *(id *)(a1 + 40);
    double v7 = a2;
    double v8 = a3;
    +[UIView animateWithDuration:v5 animations:0.15];
  }
}

id sub_1000262AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "moveNubbitToPoint:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

uint64_t sub_1000262BC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(double, double))(*(void *)(a1 + 40) + 16))(*(double *)(a1 + 48), *(double *)(a1 + 56));
  *(unsigned char *)(*(void *)(a1 + 32) + 250) = 0;
  return result;
}

id sub_100026674(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) fingerController];
  [v2 liftFingersUpAnimated:1];

  *(unsigned char *)(*(void *)(a1 + 40) + 248) = 0;
  [*(id *)(a1 + 40) resumeBubbleModeForSpecialUsageToolIfNecessary];
  [*(id *)(a1 + 40) resumeEyeTrackingAutoHideForSpecialUsageToolIfNecessary];
  [*(id *)(a1 + 40) _systemPointerSettingsDidChange];
  [*(id *)(a1 + 32) setMultiTouchToolBackgroundEnabled:0];
  if (*(double *)(a1 + 56) == -1.0 && *(double *)(a1 + 64) == -1.0) {
    [*(id *)(a1 + 40) currentPointForPointer];
  }
  objc_msgSend(*(id *)(a1 + 32), "updateWithPrimaryFingerPoint:");
  *(_OWORD *)(*(void *)(a1 + 40) + 232) = HNDPointNull;
  if ([*(id *)(a1 + 40) _shouldRepeatGesture])
  {
    id v4 = *(unsigned char **)(a1 + 40);
    if (*(unsigned char *)(a1 + 72) && !v4[249])
    {
      uint64_t v5 = *(void *)(a1 + 48);
      return [v4 startDragModeOnDisplay:v5];
    }
  }
  else
  {
    id v4 = *(unsigned char **)(a1 + 40);
  }
  v4[249] = 0;
  [*(id *)(a1 + 40) _resetDwellModeToDefault];
  double v7 = *(void **)(a1 + 32);

  return [v7 resetNubbitLocation];
}

id *sub_100026778(id *result)
{
  if (*((unsigned char *)result[4] + 249)) {
    return (id *)objc_msgSend(result[5], "moveNubbitToPoint:");
  }
  return result;
}

id *sub_100026790(id *result)
{
  if (*((unsigned char *)result[4] + 249)) {
    return (id *)[result[5] setNubbitMoving:1];
  }
  return result;
}

id sub_1000267AC(uint64_t a1)
{
  (*(void (**)(double, double))(*(void *)(a1 + 48) + 16))(*(double *)(a1 + 56), *(double *)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  double v4 = *(double *)(a1 + 56);
  double v5 = *(double *)(a1 + 64);

  return objc_msgSend(v2, "moveFingersToPointInFingerCoordinateSpace:onDisplay:allowOutOfBounds:", v3, 0, v4, v5);
}

void sub_1000267FC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  objc_msgSend(*(id *)(a1 + 32), "updateWithPrimaryFingerPoint:", *(double *)(a1 + 72), *(double *)(a1 + 80));
  objc_msgSend(*(id *)(a1 + 40), "moveFingersToPointInFingerCoordinateSpace:onDisplay:allowOutOfBounds:", *(void *)(a1 + 48), 0, *(double *)(a1 + 72), *(double *)(a1 + 80));
  id v2 = *(id *)(a1 + 64);
  AXPerformBlockOnMainThreadAfterDelay();
}

uint64_t sub_1000268BC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  *(unsigned char *)(*(void *)(a1 + 32) + 250) = 0;
  return result;
}

void sub_100026BB4(id a1)
{
  double v1 = (void *)qword_1001F0990;
  qword_1001F0990 = (uint64_t)&off_1001BB898;
}

uint64_t sub_100026DA8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100026E7C(uint64_t a1)
{
  v85 = +[NSMutableArray array];
  v86 = +[NSMutableArray array];
  v84 = +[NSMutableArray array];
  v87 = +[NSMutableArray array];
  double v1 = +[AXElement primaryApp];
  id v2 = [v1 scrollViewsForAutoScroll];

  if ([v2 count])
  {
    uint64_t v4 = 0;
    v92 = 0;
    id v93 = 0;
    CGFloat y = CGRectZero.origin.y;
    CGFloat width = CGRectZero.size.width;
    CGFloat height = CGRectZero.size.height;
    *(void *)&long long v3 = 136315906;
    long long v83 = v3;
    while (1)
    {
      double v8 = objc_msgSend(v2, "objectAtIndexedSubscript:", v4, v83);
      double v9 = [v8 uiElement];
      unsigned int v10 = [v9 canPerformAXAction:2007];

      uint64_t v11 = [v8 uiElement];
      unsigned int v12 = [v11 canPerformAXAction:2006];

      double v13 = [v8 uiElement];
      unsigned int v14 = [v13 canPerformAXAction:2008];

      BOOL v15 = [v8 uiElement];
      unsigned int v16 = [v15 canPerformAXAction:2009];

      [v8 visibleFrame];
      v109.origin.x = CGRectZero.origin.x;
      v109.origin.CGFloat y = y;
      v109.size.CGFloat width = width;
      v109.size.CGFloat height = height;
      if (CGRectEqualToRect(v107, v109))
      {
        int v17 = 0;
        goto LABEL_16;
      }
      [v8 visibleFrame];
      BOOL IsInfinite = CGRectIsInfinite(v108);
      int v17 = !IsInfinite;
      if (IsInfinite || !(v10 | v12 | v14 | v16)) {
        goto LABEL_16;
      }
      if (([v8 respondsToUserInteraction] & 1) == 0)
      {
        int v17 = 1;
LABEL_16:
        uint64_t v24 = AXLogCommon();
        if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          CFStringRef v29 = @"NO";
          if (v17) {
            CFStringRef v29 = @"YES";
          }
          v100 = "-[HNDHandManager generateContinuousScrollersOnQueue:withCompletion:]_block_invoke";
          __int16 v101 = 2112;
          v102 = v8;
          __int16 v103 = 2112;
          uint64_t v104 = (uint64_t)v29;
          _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)v24, OS_LOG_TYPE_DEBUG, "%s: skipping scroll view: %@, elementFrameIsValid: %@", buf, 0x20u);
        }
        goto LABEL_17;
      }
      if (v10 | v12)
      {
        uint64_t v19 = 2;
        if (!v10) {
          uint64_t v19 = 0;
        }
        uint64_t v20 = 4;
        if (!v12) {
          uint64_t v20 = 0;
        }
        uint64_t v88 = v20 | v19;
        id v89 = v86;

        id v21 = v87;
        CGRect v22 = *(void **)(a1 + 32);
        id v98 = 0;
        unsigned __int8 v23 = [v22 _scrollAncestorIsSelfForScrollView:v8 scrollAction:2006 resultScrollAncestor:&v98];
        uint64_t v24 = (uint64_t)v98;
        if (v23)
        {
          uint64_t v25 = 0;
          unint64_t v26 = 0;
          v27 = v89;
          id v93 = v21;
          id v28 = AXEventTapManagerFilterEvents_ptr;
          goto LABEL_41;
        }
        CFTypeRef v30 = *(void **)(a1 + 32);
        id v97 = 0;
        unsigned __int8 v31 = [v30 _scrollAncestorIsSelfForScrollView:v8 scrollAction:2007 resultScrollAncestor:&v97];
        unint64_t v26 = (unint64_t)v97;
        if (((v14 | v16) & 1) == 0)
        {
          uint64_t v25 = 0;
          unsigned __int8 v32 = v31;
          v27 = v89;
          id v93 = v21;
          id v28 = AXEventTapManagerFilterEvents_ptr;
          if (v32) {
            goto LABEL_41;
          }
LABEL_37:
          if (v24 | v26)
          {
            v90 = (void *)v26;
            v92 = v27;
            AXLogCommon();
            v45 = (HNDContinuousScroller *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(&v45->super, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = v83;
              v100 = "-[HNDHandManager generateContinuousScrollersOnQueue:withCompletion:]_block_invoke";
              __int16 v101 = 2112;
              v102 = v8;
              __int16 v103 = 2112;
              uint64_t v104 = v24;
              __int16 v105 = 2112;
              v106 = v90;
              _os_log_debug_impl((void *)&_mh_execute_header, &v45->super, OS_LOG_TYPE_DEBUG, "%s: scrollAncestor is different! scrollView: %@ \n scrollAncestor1: %@ \n scrollAncestor2: %@", buf, 0x2Au);
            }
            goto LABEL_46;
          }
          unint64_t v26 = 0;
          uint64_t v24 = 0;
          goto LABEL_41;
        }
        id v28 = AXEventTapManagerFilterEvents_ptr;
        if (v31)
        {
          uint64_t v25 = 0;
          v27 = v89;
          id v93 = v21;
          goto LABEL_41;
        }
        id v93 = v21;
        v27 = v89;
      }
      else
      {
        uint64_t v24 = 0;
        unint64_t v26 = 0;
        uint64_t v25 = 0;
        uint64_t v88 = 0;
        v27 = v92;
        id v28 = AXEventTapManagerFilterEvents_ptr;
        if (((v14 | v16) & 1) == 0) {
          goto LABEL_37;
        }
      }
      id v33 = (void *)v26;
      CFTypeRef v34 = v27;
      v35 = v93;
      CFTypeRef v36 = (void *)v24;
      uint64_t v37 = 8;
      if (!v14) {
        uint64_t v37 = 0;
      }
      uint64_t v38 = 16;
      if (!v16) {
        uint64_t v38 = 0;
      }
      uint64_t v88 = v38 | v37;
      id v39 = v85;

      id v93 = v84;
      v40 = *(void **)(a1 + 32);
      id v96 = (id)v24;
      unsigned __int8 v41 = [v40 _scrollAncestorIsSelfForScrollView:v8 scrollAction:2008 resultScrollAncestor:&v96];
      uint64_t v24 = (uint64_t)v96;

      if (v41)
      {
        uint64_t v25 = 1;
        v27 = v39;
        id v28 = AXEventTapManagerFilterEvents_ptr;
        unint64_t v26 = (unint64_t)v33;
        goto LABEL_41;
      }
      v42 = *(void **)(a1 + 32);
      id v95 = v33;
      unsigned __int8 v43 = [v42 _scrollAncestorIsSelfForScrollView:v8 scrollAction:2009 resultScrollAncestor:&v95];
      id v44 = v95;

      uint64_t v25 = 1;
      unint64_t v26 = (unint64_t)v44;
      v27 = v39;
      id v28 = AXEventTapManagerFilterEvents_ptr;
      if ((v43 & 1) == 0) {
        goto LABEL_37;
      }
LABEL_41:
      v90 = (void *)v26;
      uint64_t v46 = v25;
      v47 = v28[119];
      v48 = v28;
      [v8 visibleFrame];
      v49 = objc_msgSend(v47, "valueWithCGRect:");
      v50 = v27;
      unsigned __int8 v51 = [v27 containsObject:v49];

      v92 = v50;
      if ((v51 & 1) == 0)
      {
        [v8 visibleFrame];
        double v53 = v52;
        double v55 = v54;
        double v57 = v56;
        double v59 = v58;
        v60 = objc_msgSend(v48[119], "valueWithCGRect:");
        [v50 addObject:v60];

        id v61 = [v8 windowDisplayId];
        v62 = [*(id *)(a1 + 32) displayManagerForDisplayId:v61];
        objc_msgSend(v62, "orientedContinuousScrollViewFrameForScrollViewFrame:", v53, v55, v57, v59);
        double v64 = v63;
        double v66 = v65;
        double v68 = v67;
        double v70 = v69;

        v45 = -[HNDContinuousScroller initWithTargetElement:scrollView:orientedScrollViewFrame:scrollAxis:supportedScrollDirections:]([HNDContinuousScroller alloc], "initWithTargetElement:scrollView:orientedScrollViewFrame:scrollAxis:supportedScrollDirections:", v8, v8, v46, v88, v64, v66, v68, v70);
        if ([*(id *)(a1 + 32) inBubbleMode]
          && [*(id *)(a1 + 32) currentlySnappedInBubbleMode])
        {
          [(HNDContinuousScroller *)v45 setScrollAreaToShowOverride:&off_1001BB140];
        }
        v71 = [*(id *)(a1 + 32) displayManagerForDisplayId:v61];
        [v71 screenBounds];
        double v73 = v72;
        double v75 = v74;
        double v77 = v76;
        double v79 = v78;

        -[HNDContinuousScroller extendActivationRegionWithoutCollidingWithScrollers:rotatedScreenBounds:](v45, "extendActivationRegionWithoutCollidingWithScrollers:rotatedScreenBounds:", v93, v73, v75, v77, v79);
        [v93 addObject:v45];
LABEL_46:
      }
LABEL_17:

      if ((unint64_t)[v2 count] <= ++v4) {
        goto LABEL_49;
      }
    }
  }
  v92 = 0;
  id v93 = 0;
LABEL_49:
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 380));
  id v80 = [v84 copy];
  [*(id *)(a1 + 32) setHorizontalContinuousScrollers:v80];

  id v81 = [v87 copy];
  [*(id *)(a1 + 32) setVerticalContinuousScrollers:v81];

  if ([*(id *)(a1 + 32) scrollingBlockedOnElementRefresh]) {
    [*(id *)(a1 + 32) setScrollingBlockedOnElementRefresh:0];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 380));
  v82 = *(void **)(a1 + 40);
  if (v82)
  {
    id v94 = v82;
    AXPerformBlockAsynchronouslyOnMainThread();
  }
}

uint64_t sub_10002765C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002784C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 hardwareIdentifier];
  [v2 bubbleModeFailedToSnapOnDisplay:v3];
}

BOOL sub_1000289BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isGroup])
  {
    uint64_t v4 = [v3 firstDescendantMatchingItem:*(void *)(a1 + 32)];
    BOOL v5 = v4 != 0;
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

BOOL sub_100028AA4(id a1, AXGroupable *a2)
{
  return [(AXGroupable *)a2 isGroup] ^ 1;
}

id sub_1000293F8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) generateMappingForElementFrames];
}

void sub_100029A78(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    id v2 = [*(id *)(a1 + 32) elementFetcher];
    [v2 enableEventManagement];

    id v3 = [*(id *)(a1 + 32) elementFetcher];
    [v3 setEnabled:1];

    id v4 = objc_alloc_init((Class)AXUpdateElementVisualsCoalescer);
    [*(id *)(a1 + 32) setUpdateElementVisualsCoalescer:v4];
    [v4 setThreshold:0.2];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_100029B64;
    v5[3] = &unk_1001AAA90;
    void v5[4] = *(void *)(a1 + 32);
    [v4 setUpdateVisualsSequenceDidFinishHandler:v5];
  }
}

id sub_100029B64(uint64_t a1)
{
  if ([*(id *)(a1 + 32) inBubbleMode]) {
    [*(id *)(a1 + 32) refreshElementFetcherWithScrollingBlocked:1];
  }
  id result = [*(id *)(a1 + 32) needsGenerateScrollers];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 generateContinuousScrollersWithCompletion:0];
  }
  return result;
}

id sub_100029D20(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    id v2 = [*(id *)(a1 + 32) elementFetcher];
    [v2 disableEventManagement];

    id v3 = [*(id *)(a1 + 32) elementFetcher];
    [v3 setEnabled:0];
  }
  id v4 = *(void **)(a1 + 32);

  return [v4 setUpdateElementVisualsCoalescer:0];
}

void sub_10002A020(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 380));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = 424;
  if (*(void *)(v2 + 472) == 1) {
    uint64_t v3 = 416;
  }
  id v4 = [*(id *)(v2 + v3) count];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 380));
  if (!v4)
  {
    [*(id *)(a1 + 32) endContinuousScrollingOnDisplay:*(void *)(a1 + 40) withCompletion:0];
    BOOL v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    [v5 showMenu:1 onDisplay:v6];
  }
}

void sub_10002AB90(uint64_t a1, void *a2)
{
  id v5 = a2;
  [v5 visibleFrame];
  v9.origin.x = CGRectZero.origin.x;
  v9.origin.CGFloat y = CGRectZero.origin.y;
  v9.size.CGFloat width = CGRectZero.size.width;
  v9.size.CGFloat height = CGRectZero.size.height;
  if (!CGRectEqualToRect(v7, v9))
  {
    [v5 visibleFrame];
    if (!CGRectIsInfinite(v8))
    {
      id v3 = [v5 scrollAncestorForScrollAction:*(unsigned int *)(a1 + 48)];
      if (v3)
      {
        id v4 = v3;
        if (([*(id *)(a1 + 32) containsObject:v3] & 1) == 0)
        {
          [*(id *)(a1 + 32) addObject:v4];
          [*(id *)(a1 + 40) addObject:v5];
        }
      }
    }
  }
}

void sub_10002AFB0(id a1, AXPIFingerModel *a2, unint64_t a3, BOOL *a4)
{
}

void sub_10002B0E0(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10002B1DC;
  v7[3] = &unk_1001AAA90;
  id v8 = *(id *)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10002B220;
  v4[3] = &unk_1001AB548;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = v2;
  uint64_t v6 = v3;
  +[UIView animateWithDuration:v7 animations:v4 completion:0.1];
}

void sub_10002B1DC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) fingerController];
  [v1 resetPinchFingers];
}

void sub_10002B220(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 32) fingerController];
  id v4 = [v3 fingerModels];

  if ([v4 count])
  {
    id v5 = [*v2 fingerController];
    uint64_t v6 = [v5 fingerModels];
    CGRect v7 = [v6 firstObject];

    if (v7)
    {
      id v8 = *v2;
      [v7 location];
      objc_msgSend(v8, "updateWithPrimaryFingerPoint:");
    }
    [*(id *)(a1 + 32) performPress:3 type:1];
    *(_OWORD *)(*(void *)(a1 + 40) + 208) = HNDPointNull;
    *(unsigned char *)(*(void *)(a1 + 40) + 186) = 0;
  }
  else
  {
    CGRect v9 = ASTLogCommon();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)) {
      sub_100113DB8(v2, v9);
    }
  }
}

void sub_10002B430(id a1, AXPIFingerModel *a2, unint64_t a3, BOOL *a4)
{
}

id sub_10002C118(uint64_t a1, void *a2)
{
  return [a2 updateNubbitForegroundImageForAction:*(void *)(a1 + 32)];
}

void sub_10002C47C(id a1, HNDDisplayManager *a2)
{
}

void sub_10002C490(id a1, HNDDisplayManager *a2)
{
}

void sub_10002C530(id a1, HNDDisplayManager *a2)
{
}

void sub_10002C538(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isMenuVisible])
  {
    double Current = CFAbsoluteTimeGetCurrent();
    [v3 lastMenuInteractionTime];
    if (Current - v5 > 0.5) {
      [v3 showMenu:0];
    }
  }
  else
  {
    if (![*(id *)(a1 + 32) inCustomGesture])
    {
      unsigned int v9 = [*(id *)(a1 + 32) inDragMode];
      unsigned int v10 = *(double **)(a1 + 32);
      if (v9)
      {
        uint64_t v11 = [v3 hardwareIdentifier];
        objc_msgSend(v10, "endDragModeAtPoint:onDisplay:completed:", v11, 0, v10[29], v10[30]);
      }
      else
      {
        if (![*(id *)(a1 + 32) inContinuousScrollMode]) {
          goto LABEL_13;
        }
        unsigned int v12 = *(void **)(a1 + 32);
        uint64_t v11 = [v3 hardwareIdentifier];
        [v12 endContinuousScrollingOnDisplay:v11 withCompletion:0];
      }

      goto LABEL_13;
    }
    uint64_t v6 = AXLogCommon();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Substantial transition, reseting gesture", v26, 2u);
    }

    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 56);
    *(void *)(v7 + 56) = 0;
  }
LABEL_13:
  if (!_AXSAssistiveTouchScannerEnabled())
  {
    double v13 = [*(id *)(a1 + 32) deviceManager];
    unsigned __int8 v14 = [v13 mainDeviceIsPointer];

    BOOL v15 = [*(id *)(a1 + 32) mainDisplayManager];
    unsigned __int8 v16 = [v15 isShowingVirtualTrackpad];

    if ((v14 & 1) == 0 && (v16 & 1) == 0)
    {
      [v3 screenBounds];
      CGFloat x = v27.origin.x;
      CGFloat y = v27.origin.y;
      CGFloat width = v27.size.width;
      CGFloat height = v27.size.height;
      double MidX = CGRectGetMidX(v27);
      v28.origin.CGFloat x = x;
      v28.origin.CGFloat y = y;
      v28.size.CGFloat width = width;
      v28.size.CGFloat height = height;
      double MidY = CGRectGetMidY(v28);
      unsigned __int8 v23 = *(void **)(a1 + 32);
      uint64_t v24 = [v3 hardwareIdentifier];
      objc_msgSend(v23, "resetFingersToPoint:onDisplay:", v24, MidX, MidY);
    }
  }
  if ([v3 visualsHidden])
  {
    uint64_t v25 = NSStringFromSelector(*(SEL *)(a1 + 40));
    [v3 setVisualsHidden:0 forReason:v25 animated:1];
  }
}

id sub_10002C7EC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) orientationChanged];
}

void sub_10002C898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002C8B0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v2 + 24))
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = (uint64_t)[a2 isMenuVisible];
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(unsigned char *)(v2 + 24) = result;
  return result;
}

void sub_10002C9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002C9B8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v2 + 24))
  {
    *(unsigned char *)(v2 + 24) = 1;
  }
  else
  {
    id v4 = [a2 fingerController];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v4 isPinchEnabled];
  }
}

uint64_t sub_10002CAD4(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) deviceOrientation];
  id v3 = ASTLogCommon();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 8);
    *(_DWORD *)buf = 67109376;
    int v7 = v4;
    __int16 v8 = 1024;
    unsigned int v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Orientation changed: old %d new %d", buf, 0xEu);
  }

  *(_DWORD *)(*(void *)(a1 + 32) + 8) = v2;
  return AXPerformBlockAsynchronouslyOnMainThread();
}

id sub_10002CBFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startOrientationUpdateTimer];
}

void sub_10002CDE0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) mainDisplayManager];
  [v2 setOrientation:*(unsigned int *)(*(void *)(a1 + 32) + 8) withCompletion:0];
}

void sub_10002CE48(id a1, HNDDisplayManager *a2)
{
}

void sub_10002CEC0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
  id v3 = *(const char **)(a1 + 32);
  id v4 = a2;
  NSStringFromSelector(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v4 setVisualsHidden:v2 forReason:v5 animated:1];
}

void sub_10002D054(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 visualsHidden])
  {
    id v4 = NSStringFromSelector(*(SEL *)(a1 + 32));
    [v3 setVisualsHidden:0 forReason:v4 animated:1];
  }
  else
  {
    id v4 = ASTLogCommon();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Tried to show visuals after performing screenshot, but visuals were already shown.", v5, 2u);
    }
  }
}

void sub_10002D31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_10002D340(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = ASTLogCommon();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412546;
    id v7 = v3;
    __int16 v8 = 1024;
    unsigned int v9 = [v3 inNubbitMode];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Screenshot will fire. Display manager: %@, In nubbit mode: %d", (uint8_t *)&v6, 0x12u);
  }

  if ([v3 inNubbitMode])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    id v5 = NSStringFromSelector(*(SEL *)(a1 + 40));
    [v3 setVisualsHidden:1 forReason:v5 animated:0];
  }
}

id sub_10002D510(uint64_t a1)
{
  return [*(id *)(a1 + 32) _attemptToShowVisualsAfterPerformingScreenshot];
}

uint64_t sub_10002D5B8()
{
  return AXPerformBlockOnMainThread();
}

id sub_10002D62C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10002D6A8;
  _OWORD v3[3] = &unk_1001AB6B8;
  char v4 = *(unsigned char *)(a1 + 48);
  id v1 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  return [v1 enumerateDisplayManagersWithBlock:v3];
}

void sub_10002D6A8(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = *(const char **)(a1 + 32);
    id v3 = a2;
    NSStringFromSelector(v2);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [v3 setVisualsHidden:0 forReason:v4 animated:1];
  }
}

void sub_10002E1C0(id a1, HNDDisplayManager *a2)
{
}

void sub_10002E388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002E3A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v5 = 1;
  }
  else
  {
    __int16 v8 = v3;
    unsigned __int8 v6 = [v3 visualsHidden];
    id v4 = v8;
    if (v6)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (uint64_t)[v8 inNubbitMode];
      id v4 = v8;
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;

  return _objc_release_x1(v5, v4);
}

void sub_10002E5A0(id a1, HNDDisplayManager *a2)
{
  id v2 = [(HNDDisplayManager *)a2 fingerController];
  [v2 cancelGesture];
}

void sub_10002E688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002E6A0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v2 + 24))
  {
    *(unsigned char *)(v2 + 24) = 1;
  }
  else
  {
    id v4 = [a2 fingerController];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v4 isPerformingGesture];
  }
}

id sub_10002EAB4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) fingerController];
  objc_msgSend(v2, "showStartingFingersForGesture:animated:startPointForAnimation:", *(void *)(a1 + 40), 1, *(double *)(a1 + 64), *(double *)(a1 + 72));

  if ([*(id *)(a1 + 48) _shouldRepeatGesture])
  {
    id v3 = *(void **)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = v3[7];
    return [v3 prepareGesture:v5 onDisplay:v4];
  }
  else
  {
    [*(id *)(a1 + 32) setMultiTouchToolBackgroundEnabled:0];
    [*(id *)(a1 + 48) specialToolUsageEnded:0];
    id v7 = *(void **)(a1 + 48);
    return [v7 _resetDwellModeToDefault];
  }
}

uint64_t sub_10002EB54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002EC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002EC98(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v2 + 24))
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = (uint64_t)[a2 multiTouchToolBackgroundEnabled];
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(unsigned char *)(v2 + 24) = result;
  return result;
}

void sub_10002F0A8(id a1, HNDDisplayManager *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = [(HNDDisplayManager *)v2 multiTouchToolBackgroundEnabled];
  id v4 = [(HNDDisplayManager *)v2 fingerController];

  [v4 setShouldAddRealEventFlag:v3];
}

void sub_10002F110(uint64_t a1, void *a2)
{
  id v16 = a2;
  unsigned int v3 = [v16 fingerContentViewIsActive];
  [v16 setFingerContentViewIsActive:*(unsigned __int8 *)(a1 + 40)];
  if (v3 && !*(unsigned char *)(a1 + 40))
  {
    id v4 = [*(id *)(a1 + 32) deviceManager];
    if ([v4 hidDeviceIsConfiguring])
    {
    }
    else
    {
      uint64_t v5 = [*(id *)(a1 + 32) deviceManager];
      unsigned int v6 = [v5 hidDeviceSentReservedStatus];

      if (!v6)
      {
        if (!AXDeviceSupportsOnDeviceEyeTracking()
          || ([*(id *)(a1 + 32) mainDisplayManager],
              id v7 = objc_claimAutoreleasedReturnValue(),
              unsigned int v8 = [v7 isShowingCalibrationUI],
              v7,
              !v8))
        {
          uint64_t v11 = *(void **)(a1 + 32);
          [v11 currentPointForPointer];
          double v13 = v12;
          double v15 = v14;
          unsigned int v10 = [v16 hardwareIdentifier];
          objc_msgSend(v11, "resetFingersToPoint:onDisplay:", v10, v13, v15);
          goto LABEL_9;
        }
      }
    }
    unsigned int v9 = *(void **)(a1 + 32);
    unsigned int v10 = [v16 hardwareIdentifier];
    objc_msgSend(v9, "resetFingersToPoint:onDisplay:active:", v10, 0, -1.0, -1.0);
LABEL_9:
  }
}

void sub_10002F504(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v3 isMenuVisible] ^ 1;
  id v5 = [v3 hardwareIdentifier];

  [v2 showMenu:v4 onDisplay:v5];
}

id sub_10002FABC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 408) removeAllObjects];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 440);

  return [v2 cleanup];
}

void sub_10002FCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002FD0C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002FD1C(uint64_t a1)
{
}

void sub_10002FD24(void *a1, void *a2)
{
  id v11 = a2;
  uint64_t v4 = [v11 window];
  id v5 = [v4 windowScene];
  unsigned int v6 = (void *)a1[4];

  if (v5 == v6)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
    id v7 = *(void **)(a1[5] + 440);
    unsigned int v8 = [v11 window];
    unsigned int v9 = [v8 screen];
    unsigned int v10 = [v9 displayIdentity];
    objc_msgSend(v7, "removeGlobalMouseEventsForDisplayID:", objc_msgSend(v10, "displayID"));
  }
}

void sub_100030600(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(id *)(a1 + 32) != v3)
  {
    id v7 = v3;
    uint64_t v4 = [v3 fingerController];
    id v5 = [v4 numberOfFingers];

    id v3 = v7;
    if (v5)
    {
      unsigned int v6 = [v7 fingerController];
      objc_msgSend(v6, "clearAllFingersAnimated:endPointForAnimation:", 1, CGPointZero.x, CGPointZero.y);

      [*(id *)(a1 + 40) specialToolUsageEnded:1];
      id v3 = v7;
    }
  }
}

void *sub_1000306AC(void *result)
{
  if (*((unsigned char *)result + 40))
  {
    id v1 = result;
    uint64_t result = (void *)result[4];
    if (!*((unsigned char *)result + 12) || *((unsigned char *)v1 + 41) && result[25] != 1) {
      return [result _startDwellTimer];
    }
  }
  return result;
}

id sub_1000306E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "moveNubbitToPoint:", *(double *)(a1 + 40), *(double *)(a1 + 48));
}

id sub_1000306F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "moveFingersToPointInFingerCoordinateSpace:onDisplay:allowOutOfBounds:", *(void *)(a1 + 40), 1, *(double *)(a1 + 48), *(double *)(a1 + 56));
}

id sub_100030704(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "moveFingersToPointInFingerCoordinateSpace:onDisplay:allowOutOfBounds:", *(void *)(a1 + 40), 1, *(double *)(a1 + 48), *(double *)(a1 + 56));
}

id sub_100030F80(uint64_t a1)
{
  return [*(id *)(a1 + 32) refreshElementFetcherWithScrollingBlocked:1];
}

id sub_10003112C(uint64_t a1)
{
  [*(id *)(a1 + 32) _handleAction:*(void *)(a1 + 40) type:4 state:3];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setIsDwellActionPendingButtonUp:0];
}

void sub_1000311D0(id a1, HNDDisplayManager *a2)
{
}

id sub_1000312AC(uint64_t a1, void *a2)
{
  return [a2 updateNubbitForegroundImageForAction:*(void *)(a1 + 32)];
}

id sub_1000313D0(uint64_t a1, void *a2)
{
  return [a2 updateNubbitForegroundImageForAction:*(void *)(a1 + 32)];
}

void sub_1000313DC(id a1, HNDDisplayManager *a2)
{
}

void sub_1000322B8(uint64_t a1)
{
  [*(id *)(a1 + 32) setHidePointerForEyeTrackingAutoHide:0];
  [*(id *)(a1 + 32) setEyeTrackingAutoHideFinished:1];
  unsigned int v2 = [*(id *)(a1 + 32) dwellControlEnabled];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    if (([v3 dwellControlPaused] & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "setEyeTrackingAutotHideLastPointCursorShowed:", -1.0, -1.0);
      [*(id *)(a1 + 32) setEyeTrackingAutotHideLastBubbleModeElementShowed:0];
    }
    uint64_t v4 = *(void **)(a1 + 32);
    [v4 _startDwellTimer];
  }
  else
  {
    id v12 = [v3 currentDisplayManager];
    id v5 = [v12 fingerController];
    if ([v5 numberOfFingers])
    {
      unsigned int v6 = [v5 fingerModels];
      id v7 = [v6 objectAtIndexedSubscript:0];
      [v7 location];
      double v9 = v8;
      double v11 = v10;

      objc_msgSend(*(id *)(a1 + 32), "setEyeTrackingAutotHideLastPointCursorShowed:", v9, v11);
    }
  }
}

void sub_1000323E8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  [v1 _showCursorsForAutoHideWithDuration:v2];
}

void sub_1000324B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) inBubbleMode]) {
    [v3 hideBubbleCursorForEyeTrackingAutoHide];
  }
  [v3 hideFingerContentViewForEyeTrackingAutoHide];
}

void sub_1000325AC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([*(id *)(a1 + 32) inBubbleMode]
    && [*(id *)(a1 + 32) currentlySnappedInBubbleMode])
  {
    [v4 showBubbleCursor];
  }
  else
  {
    id v3 = *(void **)(a1 + 40);
    if (v3)
    {
      [v3 doubleValue];
      objc_msgSend(v4, "setFingerContentViewIsActive:withDuration:options:", 1, 0x10000);
    }
    else
    {
      [v4 setFingerContentViewIsActive:1];
    }
  }
}

void sub_100032978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100032994(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[AXSettings sharedInstance];
  [v3 assistiveTouchMouseDwellControlActivationTimeout];
  double v5 = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100032A70;
  v6[3] = &unk_1001AB930;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  [v2 performCircularProgressAnimationOnFingersWithDuration:v6 completion:v5];

  objc_destroyWeak(&v7);
}

void sub_100032A5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100032A70(uint64_t a1, int a2)
{
  if (a2)
  {
    id v2 = (id *)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _dwellTimerFired];

    id v4 = objc_loadWeakRetained(v2);
    [v4 cancelDwellTimer];
  }
}

void sub_100032D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100032DB4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[AXSettings sharedInstance];
  [v3 assistiveTouchMouseDwellControlActivationTimeout];
  double v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100032EA0;
  v7[3] = &unk_1001AB930;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  [v2 animateBubbleCursorDwellWithDuration:v6 inRocker:v7 completion:v5];

  objc_destroyWeak(&v8);
}

void sub_100032E8C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100032EA0(uint64_t a1, int a2)
{
  if (a2)
  {
    id v2 = (id *)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _dwellTimerFired];

    id v4 = objc_loadWeakRetained(v2);
    [v4 cancelDwellTimer];
  }
}

void sub_100032FFC(id a1, HNDDisplayManager *a2)
{
  id v2 = [(HNDDisplayManager *)a2 fingerController];
  [v2 cancelCircularProgressAnimation];
}

void sub_100033888(id a1, HNDDisplayManager *a2)
{
  id v2 = a2;
  id v7 = +[AXSettings sharedInstance];
  [v7 assistiveTouchIdleOpacity];
  double v4 = v3;
  double v5 = [(HNDDisplayManager *)v2 fingerController];

  uint64_t v6 = [v5 fingerContainerView];
  [v6 setAlpha:v4];
}

void sub_100033990(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 hardwareIdentifier];
  [v2 _fadeFingersAfterDelayIfNeededOnDisplay:v3];
}

void sub_100033AE8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 184) = 1;
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 104), "setShouldShowFingerOutlines:", objc_msgSend(*(id *)(a1 + 32), "_fadedFingersShouldShowOutlines"));
  [*(id *)(*(void *)(a1 + 32) + 104) setShouldShowInnerCircle:0];
  [*(id *)(a1 + 32) reloadFingerAppearance];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100033BC0;
  _OWORD v3[3] = &unk_1001AAC78;
  id v2 = *(void **)(a1 + 40);
  void v3[4] = *(void *)(a1 + 32);
  id v4 = v2;
  +[UIView animateWithDuration:v3 animations:0.5];
}

void sub_100033BC0(uint64_t a1)
{
  id v7 = +[AXSettings sharedInstance];
  [v7 assistiveTouchIdleOpacity];
  double v3 = v2;
  id v4 = [*(id *)(a1 + 32) displayManagerForHardwareIdentifier:*(void *)(a1 + 40)];
  double v5 = [v4 fingerController];
  uint64_t v6 = [v5 fingerContainerView];
  [v6 setAlpha:v3];
}

void sub_100033D94(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) fingerContainerView];
  [v1 setAlpha:1.0];
}

void sub_100033E7C(id a1, HNDDisplayManager *a2)
{
}

void sub_1000341D4(unsigned char *a1, uint64_t a2)
{
  if (a2 == 1 && a1[40])
  {
    if (a1[41])
    {
      v9[0] = AXAssistiveTouchIconTypeDwell;
      v9[1] = AXAssistiveTouchIconTypeScroll;
      double v2 = v9;
      uint64_t v3 = 2;
    }
    else
    {
      if (a1[42])
      {
        uint64_t v8 = AXAssistiveTouchIconTypeDwell;
        double v2 = &v8;
      }
      else
      {
        uint64_t v7 = AXAssistiveTouchIconTypeScroll;
        double v2 = &v7;
      }
      uint64_t v3 = 1;
    }
    id v4 = +[NSArray arrayWithObjects:v2 count:v3];
    double v5 = AXAssistiveTouchInsertIconsIntoDictionary();
    uint64_t v6 = +[AXSettings sharedInstance];
    [v6 setAssistiveTouchMainScreenCustomization:v5];
  }
}

id sub_100034444(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2];
}

void sub_100034550(id a1, HNDDisplayManager *a2)
{
  id v2 = [(HNDDisplayManager *)a2 rocker];
  [v2 reloadDwellMenu];
}

id sub_100034E1C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isPendingFingerLiftForPrimaryButtonPressUp];
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    return [v3 _reallyLiftFingersUpForPotentialTapViaPrimaryButton];
  }
  return result;
}

void sub_1000359A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000359BC(uint64_t a1)
{
  uint64_t v2 = +[AXElement elementAtCoordinate:withVisualPadding:](AXElement, "elementAtCoordinate:withVisualPadding:", 0);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)v2;
  while (1)
  {
    if ((*(_DWORD *)(a1 + 32) & 0xFFFFFFFE) == 0x7EE) {
      [v3 setAutoscrollTarget:v3];
    }
    id v4 = [v3 uiElement];
    unsigned int v5 = [v4 performAXAction:*(unsigned int *)(a1 + 32)];

    uint64_t v6 = [v3 uiElement];
    unsigned int v7 = [v6 BOOLWithAXAttribute:2093];

    if (!v7 || (v5 & 1) != 0) {
      break;
    }
    uint64_t v8 = [v3 remoteParent];

    uint64_t v3 = (void *)v8;
    if (!v8)
    {
      uint64_t v9 = 0;
      uint64_t v3 = 0;
      goto LABEL_11;
    }
  }
  uint64_t v9 = v7 | v5;
LABEL_11:

  return v9;
}

intptr_t sub_100035AA8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (*(uint64_t (**)(double, double))(*(void *)(a1 + 40) + 16))(*(double *)(a1 + 56), *(double *)(a1 + 64));
  uint64_t v2 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v2);
}

void sub_100035AFC(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  dispatch_queue_t v1 = dispatch_queue_create("AXScrollElementQuery", v3);
  uint64_t v2 = (void *)qword_1001F09E0;
  qword_1001F09E0 = (uint64_t)v1;
}

void sub_100036070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100036088(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v2 + 24))
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = (uint64_t)[a2 isShowingVirtualTrackpad];
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(unsigned char *)(v2 + 24) = result;
  return result;
}

void sub_100036178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100036190(uint64_t a1, void *a2)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v3 = objc_msgSend(a2, "fingerController", 0);
  id v4 = [v3 fingerModels];

  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
        if (*(unsigned char *)(v9 + 24))
        {
          unsigned __int8 v10 = 1;
        }
        else
        {
          unsigned __int8 v10 = [*(id *)(*((void *)&v11 + 1) + 8 * (void)v8) isPressed];
          uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
        }
        *(unsigned char *)(v9 + 24) = v10;
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

void sub_100036328(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 hardwareIdentifier];
  [v2 resetFingersIfNeededOnDisplay:v3];
}

void sub_1000367E8(id a1)
{
}

BOOL sub_100036800(uint64_t a1, double a2, double a3)
{
  id v6 = [*(id *)(a1 + 32) fingerController];
  [v6 midpointForFingers];
  double v8 = v7;
  double v10 = v9;

  BOOL v11 = v8 == a2 && v10 == a3;
  if (!v11 || (v8 == CGPointZero.x ? (BOOL v12 = v10 == CGPointZero.y) : (BOOL v12 = 0), v12))
  {
    BOOL v14 = 0;
  }
  else
  {
    long long v13 = [*(id *)(a1 + 32) fingerController];
    BOOL v14 = (unint64_t)[v13 numberOfFingers] < 2;
  }
  unsigned int v15 = [*(id *)(a1 + 40) shouldHideSystemPointerForFingersView];
  BOOL result = 0;
  if (v15)
  {
    if (!v14) {
      return *(unsigned char *)(*(void *)(a1 + 40) + 225) == 0;
    }
  }
  return result;
}

void sub_1000369AC(uint64_t a1, void *a2)
{
  id v9 = a2;
  if ([*(id *)(a1 + 32) canShowASTMousePointer])
  {
    id v3 = [v9 fingerController];
    id v4 = [v3 numberOfFingers];

    if (v4)
    {
      id v5 = [v9 fingerController];
      id v6 = [v5 fingerModels];
      double v7 = [v6 axMapObjectsUsingBlock:&stru_1001ABB18];

      double v8 = [v9 fingerController];
      objc_msgSend(v8, "showFingerModels:animated:startPointForAnimation:", v7, 0, CGPointZero.x, CGPointZero.y);
    }
  }
}

id sub_100036A8C(id a1, AXPIFingerModel *a2, unint64_t a3)
{
  [(AXPIFingerModel *)a2 location];

  return +[AXPIFingerModel fingerModelForLocation:](AXPIFingerModel, "fingerModelForLocation:");
}

void sub_100036EC4(id a1, HNDDisplayManager *a2)
{
}

void sub_100036ED8(id a1, HNDDisplayManager *a2)
{
}

void sub_100036EEC(id a1, HNDDisplayManager *a2)
{
}

BOOL sub_100037B10(id a1, HNDDisplayManager *a2)
{
  return [(HNDDisplayManager *)a2 isMainDisplay];
}

id sub_100037C60(uint64_t a1, void *a2)
{
  id v3 = [a2 hardwareIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_100037D50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL sub_100037E04(uint64_t a1, void *a2)
{
  id v3 = [a2 window];
  id v4 = [v3 screen];
  id v5 = [v4 displayIdentity];
  BOOL v6 = [v5 displayID] == *(_DWORD *)(a1 + 32);

  return v6;
}

id sub_10003A278(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[a1 handleValueCallback:a4];
}

id sub_10003A280(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return [a1 handleReportCallback:a5 report:a6 reportLength:a7];
}

void sub_10003AC54(id a1)
{
  uint64_t v1 = +[SCATBluetoothManager superNew];
  uint64_t v2 = qword_1001F0A00;
  qword_1001F0A00 = v1;

  _objc_release_x1(v1, v2);
}

id sub_10003AEA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 _sessionEventForSession:a1 event:a2 result:a3];
}

id sub_10003AEB4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _beginStateTransitionIfNecessary];
}

id sub_10003B6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return _[a5 _accessoryEventForManager:a1 event:a2 device:a3 state:a4];
}

id sub_10003B6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return _[a6 _accessoryCustomMessageForAccessoryManager:a1 device:a2 customMessageType:a3 data:a4 dataSize:a5];
}

id sub_10003B6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return _[a6 _serviceEventForDevice:a1 serviceMask:a2 eventType:a3 specificEvent:a4 result:a5];
}

id sub_10003BB9C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 48) addObject:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _beginStateTransitionIfNecessary];
}

id sub_10003BC74(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 48) removeObject:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _beginStateTransitionIfNecessary];
}

uint64_t sub_10003BD7C(void *a1)
{
  uint64_t v1 = a1[6];
  id v2 = [*(id *)(a1[4] + 48) containsObject:a1[5]];
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);

  return v3(v1, v2);
}

id sub_10003BE60(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) addPointer:*(void *)(a1 + 40)];
}

id sub_10003BF04(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
  if (result)
  {
    unint64_t v3 = 0;
    while ([*(id *)(*(void *)(a1 + 32) + 8) pointerAtIndex:v3] != *(id *)(a1 + 40))
    {
      ++v3;
      id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
      if (v3 >= (unint64_t)result) {
        return result;
      }
    }
    id v4 = *(void **)(*(void *)(a1 + 32) + 8);
    return [v4 removePointerAtIndex:v3];
  }
  return result;
}

void sub_10003C02C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(*(void *)(a1 + 32) + 56) allValues];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10003C158(uint64_t a1)
{
  id v2 = SWCHLogHW();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100114424(a1, v2);
  }

  if (*(void *)(*(void *)(a1 + 48) + 16))
  {
    id v3 = [*(id *)(a1 + 32) addressString];
    id v4 = [v3 UTF8String];

    WORD2(v13) = 0;
    LODWORD(v13) = 0;
    BTDeviceAddressFromString();
    uint64_t v12 = 0;
    if (BTDeviceFromAddress())
    {
      id v5 = SWCHLogHW();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_1001143BC();
      }
    }
    else
    {
      id v8 = objc_msgSend(*(id *)(a1 + 40), "length", v12, v13);
      [*(id *)(a1 + 40) getBytes:(char *)&v12 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0) length:v8];
      [*(id *)(a1 + 40) length];
      BTAccessoryManagerSendCustomMessage();
      id v9 = SWCHLogHW();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v10 = *(_DWORD *)(a1 + 56);
        uint64_t v11 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)unsigned int v15 = v10;
        *(_WORD *)&void v15[4] = 2112;
        *(void *)&v15[6] = v11;
        __int16 v16 = 2080;
        id v17 = v4;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "sent custom message type %d data %@ to device %s", buf, 0x1Cu);
      }
    }
  }
  else
  {
    BOOL v6 = SWCHLogHW();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      *(void *)unsigned int v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Went to send custom message to device %@ but we had no session.", buf, 0xCu);
    }
  }
}

void sub_10003C460(uint64_t a1)
{
  id v2 = SWCHLogHW();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100114524(a1, v2);
  }

  if (*(void *)(*(void *)(a1 + 40) + 16))
  {
    id v3 = [*(id *)(a1 + 32) addressString];
    id v4 = [v3 UTF8String];

    BTDeviceAddressFromString();
    if (BTDeviceFromAddress())
    {
      id v5 = SWCHLogHW();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_1001144BC();
      }
    }
    else
    {
      int v8 = BTAccessoryManagerSendControlCommand();
      id v5 = SWCHLogHW();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(unsigned __int8 *)(a1 + 52);
        int v10 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)uint64_t v12 = v9;
        *(_WORD *)&v12[4] = 1024;
        *(_DWORD *)&v12[6] = v10;
        __int16 v13 = 2080;
        id v14 = v4;
        __int16 v15 = 1024;
        int v16 = v8;
        _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "sent control message type %d value %u to device %s result %d", buf, 0x1Eu);
      }
    }
  }
  else
  {
    BOOL v6 = SWCHLogHW();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Went to send configuration message to device %@ but we had no session.", buf, 0xCu);
    }
  }
}

void sub_10003C6D8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void sub_10003CB98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10003CBBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  v7[1] = a2;
  objc_copyWeak(v7, (id *)(a1 + 40));
  id v6 = v5;
  AXPerformBlockAsynchronouslyOnMainThread();

  objc_destroyWeak(v7);
}

void sub_10003CC80(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10003CC94(uint64_t a1)
{
  switch(*(void *)(a1 + 56))
  {
    case 1:
      id v7 = [*(id *)(a1 + 32) delegate];
      [v7 volumeChanged];
      goto LABEL_12;
    case 2:
      uint64_t v2 = (id *)(a1 + 48);
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      [WeakRetained ringerSwitchChanged];

      id v7 = objc_loadWeakRetained(v2);
      [v7 rotationLockChanged];
      goto LABEL_12;
    case 3:
      goto LABEL_9;
    case 4:
      uint64_t v4 = [*(id *)(a1 + 40) objectForKey:AXSpringBoardActionKeyActiveInterfaceOrientation];
      id v5 = [v4 integerValue];

      id v7 = [*(id *)(a1 + 32) delegate];
      [v7 orientationChanged:v5];
      goto LABEL_12;
    case 5:
      id v7 = [*(id *)(a1 + 32) delegate];
      [v7 mediaPlaybackChanged];
      goto LABEL_12;
    case 6:
      id v7 = [*(id *)(a1 + 32) delegate];
      [v7 screenshotWillFire];
      goto LABEL_12;
    case 7:
      id v7 = [*(id *)(a1 + 32) delegate];
      [v7 screenshotDidFire];
      goto LABEL_12;
    case 8:
      id v6 = [*(id *)(a1 + 32) delegate];
      [v6 resetNubbitLocation];

LABEL_9:
      id v7 = objc_loadWeakRetained((id *)(a1 + 48));
      [v7 substantialTransitionOccurred];
      goto LABEL_12;
    case 0xBLL:
      id v7 = [*(id *)(a1 + 32) delegate];
      [v7 didFailToPinApp];
      goto LABEL_12;
    case 0xCLL:
      id v7 = [*(id *)(a1 + 32) delegate];
      [v7 didFailToFloatApp];
LABEL_12:

      break;
    default:
      return;
  }
}

void sub_10003CE74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 24))
  {
    uint64_t v4 = +[AXSpringBoardServer server];
    [v4 removeActionHandler:*(void *)(*(void *)(a1 + 32) + 24)];
  }
  id v6 = v3;
  id v5 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_10003CF44(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_10003D068(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v3 = v4;
  AXPerformBlockAsynchronouslyOnMainThread();
}

void sub_10003D104(uint64_t a1)
{
  if (*(void *)(a1 + 48) == 1)
  {
    id v2 = [*(id *)(a1 + 32) objectForKey:AXClarityBoardResultKey];
    id v3 = [v2 integerValue];

    id v4 = [*(id *)(a1 + 40) delegate];
    [v4 orientationChanged:v3];
  }
}

void sub_10003D1A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 32))
  {
    id v4 = +[AXClarityBoardServer server];
    [v4 removeActionHandler:*(void *)(*(void *)(a1 + 32) + 32)];
  }
  id v6 = v3;
  id v5 = v3;
  AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_10003D278(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_10003D338(uint64_t a1)
{
  [*(id *)(a1 + 32) manipulateDimTimer:0];
  if (+[AXSpringBoardServer isAvailable])
  {
    id v2 = (id *)AXSpringBoardServer_ptr;
    uint64_t v3 = +[AXSpringBoardServer server];
    [v3 setCancelGestureActivation:1 cancelEnabled:0];

    uint64_t v4 = +[AXSpringBoardServer server];
    [v4 setCancelGestureActivation:4 cancelEnabled:0];

    if (!*(void *)(*(void *)(a1 + 32) + 24)) {
      goto LABEL_8;
    }
    uint64_t v5 = 24;
    goto LABEL_7;
  }
  if (+[AXClarityBoardServer isAvailable]
    && *(void *)(*(void *)(a1 + 32) + 32))
  {
    id v2 = (id *)AXClarityBoardServer_ptr;
    uint64_t v5 = 32;
LABEL_7:
    id v6 = [*v2 server];
    [v6 removeActionHandler:*(void *)(*(void *)(a1 + 32) + v5)];

    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(v7 + v5);
    *(void *)(v7 + v5) = 0;
  }
LABEL_8:
  id v9 = +[NSNotificationCenter defaultCenter];
  [v9 postNotificationName:@"HNDEventManagerReset" object:0];
}

void sub_10003D618(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  objc_msgSend(v2, "keyboardVisible:withFrame:", *(unsigned __int8 *)(a1 + 72), *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void sub_10003D878(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) disableIdleTimerAssertion];

  if (!v2)
  {
    id v4 = +[AXUserEventTimer sharedInstance];
    uint64_t v3 = [v4 acquireAssertionToDisableIdleTimerWithReason:@"AssistiveTouch"];
    [*(id *)(a1 + 32) setDisableIdleTimerAssertion:v3];
  }
}

id sub_10003D914(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) disableIdleTimerAssertion];
  [v2 invalidate];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 setDisableIdleTimerAssertion:0];
}

void sub_10003DC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = +[AXEventRepresentation representationWithHIDEvent:a4 hidStreamIdentifier:@"AST-UIApplicationEvents"];
  id v6 = v7;
  AXPerformBlockOnMainThread();
}

void sub_10003DCE0(uint64_t a1)
{
  id v3 = +[HNDEventManager sharedManager];
  id v2 = [v3 delegate];
  [v2 handleRealEvent:*(void *)(a1 + 32)];
}

double sub_10003DE48(uint64_t a1, double a2, double a3)
{
  double v3 = a2 * *(double *)(a1 + 32);
  double v4 = a3 * *(double *)(a1 + 40);
  uint64_t v5 = +[HNDHandManager sharedManager];
  id v6 = [v5 currentDisplayManager];
  uint64_t v7 = [v6 window];

  int v8 = +[AXBackBoardServer server];
  id v9 = [v7 _contextId];
  int v10 = [v7 screen];
  uint64_t v11 = [v10 displayIdentity];
  objc_msgSend(v8, "convertPoint:toContextId:displayId:", v9, objc_msgSend(v11, "displayID"), v3, v4);
  double v13 = v12;

  return v13;
}

uint64_t sub_10003E244(void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t SenderID = IOHIDEventGetSenderID();
  BOOL v7 = IOHIDEventGetType() == 11 && _AXSAutomationEnabled() != 0;
  if (SenderID != 0x8000000817319372
    && (SenderID != 0x8000000817319375 || v7)
    && IOHIDEventGetType() != 14
    && (IOHIDEventGetType() != 17 || (sub_100041014() & 1) == 0))
  {
    id v10 = a1;
    if (![v10 isCapturingEvents]
      || ![v10 shouldCaptureEvent:a4])
    {
      uint64_t v8 = 0;
LABEL_25:

      return v8;
    }
    uint64_t v22 = 0;
    unsigned __int8 v23 = &v22;
    uint64_t v24 = 0x3032000000;
    uint64_t v25 = sub_10003EA60;
    unint64_t v26 = sub_10003EA70;
    id v27 = 0;
    if (UIAccessibilityIsSwitchControlRunning())
    {
      if (([v10 _shouldSwitchControlIgnoreHIDEvent:a4] & 1) != 0
        || (+[SCATScannerManager sharedManager],
            uint64_t v11 = objc_claimAutoreleasedReturnValue(),
            sub_10003EA78(),
            double v12 = objc_claimAutoreleasedReturnValue(),
            unsigned int v13 = [v11 isSwitchWithSource:v12],
            v12,
            v11,
            !v13))
      {
        uint64_t v8 = 0;
LABEL_24:
        _Block_object_dispose(&v22, 8);

        goto LABEL_25;
      }
    }
    else
    {
      id v14 = [v10 delegate];
      unsigned int v15 = [v14 isPerformingGesture];

      if (v15)
      {
        uint64_t v16 = +[AXEventRepresentation representationWithHIDEvent:a4 hidStreamIdentifier:@"AST-IOHIDFilter"];
        id v17 = (void *)v23[5];
        v23[5] = v16;

        id v18 = [(id)v23[5] handInfo];
        unsigned int v19 = [v18 eventType];

        if (v19 == 1)
        {
          uint64_t v20 = [v10 delegate];
          [v20 cancelCurrentGesture];
LABEL_23:

          uint64_t v8 = 1;
          goto LABEL_24;
        }
      }
    }
    CFRetain(a4);
    id v21 = v10;
    AXPerformBlockAsynchronouslyOnMainThread();
    uint64_t v20 = v21;
    goto LABEL_23;
  }
  return 0;
}

void sub_10003E4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003EA60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10003EA70(uint64_t a1)
{
}

id sub_10003EA78()
{
  int Type = IOHIDEventGetType();
  id v1 = 0;
  if (Type > 10)
  {
    if (Type == 11)
    {
      double v3 = (id *)&SCATSwitchSourceScreen;
      goto LABEL_13;
    }
    if (Type != 35) {
      goto LABEL_14;
    }
  }
  else
  {
    if (Type == 2)
    {
      double v3 = (id *)&SCATSwitchSourceMFI;
      goto LABEL_13;
    }
    if (Type != 3) {
      goto LABEL_14;
    }
    uint64_t IntegerValue = IOHIDEventGetIntegerValue();
    if (IntegerValue == 7)
    {
      double v3 = (id *)&SCATSwitchSourceKeyboard;
      goto LABEL_13;
    }
    if (IntegerValue != 12)
    {
      id v1 = 0;
      goto LABEL_14;
    }
  }
  double v3 = (id *)&SCATSwitchSourceGamepad;
LABEL_13:
  id v1 = *v3;
LABEL_14:

  return v1;
}

void sub_10003EB34(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!v2)
  {
    uint64_t v3 = +[AXEventRepresentation representationWithHIDEvent:*(void *)(a1 + 48) hidStreamIdentifier:@"AST-IOHIDFilter"];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  }
  [*(id *)(a1 + 32) _handleIOHIDEvent:v2];
  id v6 = *(const void **)(a1 + 48);

  CFRelease(v6);
}

void sub_10003F2C0(id a1, SCATMenu *a2)
{
  id v2 = +[SCATHardwareAction crownRotationClockwise:1];
  [v2 performAction];
}

void sub_10003F30C(id a1, SCATMenu *a2)
{
  id v2 = +[SCATHardwareAction crownRotationClockwise:0];
  [v2 performAction];
}

void sub_10003F358(uint64_t a1)
{
  id v1 = +[SCATHardwareAction actionForHardwareActionString:*(void *)(a1 + 32)];
  [v1 performAction];
}

void sub_100040048(id a1, SCATMenu *a2)
{
  id v3 = +[AXSettings sharedInstance];
  [v3 assistiveTouchStepInterval];
  [v3 setAssistiveTouchStepInterval:v2 + -0.05];
}

void sub_1000400A4(id a1, SCATMenu *a2)
{
  id v3 = +[AXSettings sharedInstance];
  [v3 assistiveTouchStepInterval];
  [v3 setAssistiveTouchStepInterval:v2 + 0.05];
}

void sub_100040100(id a1, SCATMenu *a2)
{
  double v2 = a2;
  id v3 = [(SCATModernMenuSheet *)[SCATModernMenuPositionsSheet alloc] initWithMenu:v2];
  [(SCATMenu *)v2 pushSheet:v3];
}

void sub_10004016C(id a1, SCATMenu *a2)
{
  id v4 = +[AXSettings sharedInstance];
  uint64_t v2 = [v4 assistiveTouchScannerSpeechEnabled] ^ 1;
  id v3 = +[AXSettings sharedInstance];
  [v3 setAssistiveTouchScannerSpeechEnabled:v2];
}

void sub_1000401DC(id a1, SCATMenu *a2)
{
  id v4 = +[AXSettings sharedInstance];
  uint64_t v2 = [v4 assistiveTouchScannerSoundEnabled] ^ 1;
  id v3 = +[AXSettings sharedInstance];
  [v3 setAssistiveTouchScannerSoundEnabled:v2];
}

void sub_10004024C(id a1, SCATMenu *a2)
{
  id v4 = +[AXSettings sharedInstance];
  uint64_t v2 = [v4 assistiveTouchGroupElementsEnabled] ^ 1;
  id v3 = +[AXSettings sharedInstance];
  [v3 setAssistiveTouchGroupElementsEnabled:v2];
}

uint64_t sub_1000404DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[AXSettings sharedInstance];
  id v5 = [v4 assistiveTouchScannerSpeechEnabled];

  id v6 = [*(id *)(a1 + 32) _stringForSpeechEnabled:v5];
  [v3 setTitle:v6];

  if (v5) {
    CFStringRef v7 = @"SCATIcon_settings_speechOn";
  }
  else {
    CFStringRef v7 = @"SCATIcon_settings_speechOff";
  }
  [v3 setImageName:v7];

  return 1;
}

uint64_t sub_10004057C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[AXSettings sharedInstance];
  id v5 = [v4 assistiveTouchScannerSoundEnabled];

  id v6 = [*(id *)(a1 + 32) _stringForSoundEnabled:v5];
  [v3 setTitle:v6];

  if (v5) {
    CFStringRef v7 = @"SCATIcon_settings_soundOn";
  }
  else {
    CFStringRef v7 = @"SCATIcon_settings_soundOff";
  }
  [v3 setImageName:v7];

  return 1;
}

uint64_t sub_10004061C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[AXSettings sharedInstance];
  id v5 = [v4 assistiveTouchGroupElementsEnabled];

  id v6 = [*(id *)(a1 + 32) _stringForGroupEnabled:v5];
  [v3 setTitle:v6];

  if (v5) {
    CFStringRef v7 = @"SCATIcon_settings_groupElements";
  }
  else {
    CFStringRef v7 = @"SCATIcon_settings_scanByElement";
  }
  [v3 setImageName:v7];

  return 1;
}

BOOL sub_1000406BC(id a1, SCATModernMenuItem *a2)
{
  return 0;
}

double sub_1000407A8(double a1, double a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  *(void *)&double result = (unint64_t)CGRectIntegral(*(CGRect *)&a1);
  return result;
}

id sub_1000407B4()
{
  v0 = +[AXSpringBoardServer server];
  if ([v0 isScreenLockedWithPasscode:0])
  {
    id v1 = +[AFPreferences sharedPreferences];
    id v2 = [v1 disableAssistantWhilePasscodeLocked];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

BOOL sub_100040830()
{
  return BKSHIDServicesGetRingerState() != 0;
}

id sub_100040850()
{
  v0 = +[AXSpringBoardServer server];
  id v1 = [v0 dismissBuddyIfNecessary];

  return v1;
}

uint64_t sub_100040890()
{
  uint64_t result = AXIsBuddyCompleted();
  if (result)
  {
    if (AXInPreboardScenario())
    {
      return 0;
    }
    else
    {
      int v1 = MKBGetDeviceLockState();
      return v1 == 3 || v1 == 0;
    }
  }
  return result;
}

id sub_1000408D0()
{
  if ((AXDeviceHasPearl() & 1) == 0 && (AXDeviceHasTopTouchIDButton() & 1) == 0 && !_AXSMossdeepEnabled()) {
    return 0;
  }
  id v0 = [objc_alloc((Class)LAStorage) initWithDomain:0 authenticationContext:0];
  id v5 = 0;
  id v1 = [v0 BOOLForKey:1 error:&v5];
  id v2 = v5;
  if (v2)
  {
    uint64_t v3 = AXLogSettings();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001145BC((uint64_t)v2, v3);
    }
  }
  return v1;
}

uint64_t sub_100040994()
{
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  id v0 = (uint64_t (*)(void))off_1001F0A40;
  uint64_t v8 = off_1001F0A40;
  if (!off_1001F0A40)
  {
    id v1 = (void *)sub_1000427C0();
    v6[3] = (uint64_t)dlsym(v1, "AXWatchRemoteScreenIsTwiceFeatureOn");
    off_1001F0A40 = (_UNKNOWN *)v6[3];
    id v0 = (uint64_t (*)(void))v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v0) {
    sub_100114634();
  }
  uint64_t result = v0();
  if (result)
  {
    uint64_t v5 = 0;
    id v6 = &v5;
    uint64_t v7 = 0x2020000000;
    uint64_t v3 = (uint64_t (*)(void))off_1001F0A50;
    uint64_t v8 = off_1001F0A50;
    if (!off_1001F0A50)
    {
      id v4 = (void *)sub_1000427C0();
      v6[3] = (uint64_t)dlsym(v4, "AXWatchRemoteScreenIsPairedGizmoSupported");
      off_1001F0A50 = (_UNKNOWN *)v6[3];
      uint64_t v3 = (uint64_t (*)(void))v6[3];
    }
    _Block_object_dispose(&v5, 8);
    if (!v3) {
      sub_1001146AC();
    }
    return v3();
  }
  return result;
}

void sub_100040B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_100040B50(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  v15.origin.double x = -[HNDHandManager screenFrame:]_0();
  v15.origin.CGFloat y = v8;
  v15.size.CGFloat width = v9;
  v15.size.CGFloat height = v10;
  v13.origin.double x = a1;
  v13.origin.CGFloat y = a2;
  v13.size.CGFloat width = a3;
  v13.size.CGFloat height = a4;
  CGRect v14 = CGRectIntersection(v13, v15);
  double x = v14.origin.x;
  if (CGRectIsNull(v14)) {
    return CGRectZero.origin.x;
  }
  return x;
}

double sub_100040BE4(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v10 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  double x = v10.origin.x;
  if (CGRectIsNull(v10)) {
    return CGRectZero.origin.x;
  }
  return x;
}

void sub_100040C44(void *a1)
{
  id v1 = a1;
  id v2 = +[AXSettings sharedInstance];
  uint64_t v3 = [v2 assistiveTouchUsageCount];
  id v9 = [v3 mutableCopy];

  id v4 = v9;
  if (!v9) {
    id v4 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:0];
  }
  id v10 = v4;
  uint64_t v5 = [v4 objectForKey:v1];
  id v6 = (char *)[v5 integerValue];

  uint64_t v7 = +[NSNumber numberWithInteger:v6 + 1];
  [v10 setObject:v7 forKey:v1];

  CGFloat v8 = +[AXSettings sharedInstance];
  [v8 setAssistiveTouchUsageCount:v10];
}

double sub_100040D48(double a1, double a2, double a3, double a4, double a5)
{
  return a1 / a5;
}

double sub_100040D54(char a1, double a2, double a3, double a4, double a5, double a6)
{
  if ((a1 & 1) == 0)
  {
    a2 = fmin(a2, 1.0);
    if (a2 < 0.0) {
      a2 = 0.0;
    }
  }
  return a6 * a2;
}

uint64_t sub_100040D84(uint64_t a1)
{
  BOOL v2 = [UIApp userInterfaceLayoutDirection] == (id)1;

  return _AXSBTitleForMedusaGesture(a1, v2);
}

id sub_100040DD0(void *a1)
{
  id v1 = a1;
  BOOL v2 = +[NSBundle mainBundle];
  uint64_t v3 = [v2 localizedStringForKey:v1 value:v1 table:@"LocalizedStrings-j3xx"];

  return v3;
}

id sub_100040E4C(void *a1)
{
  id v1 = a1;
  BOOL v2 = +[NSBundle mainBundle];
  uint64_t v3 = [v2 localizedStringForKey:v1 value:v1 table:@"LocalizedStrings-hello"];

  return v3;
}

id sub_100040EC8(void *a1)
{
  id v1 = a1;
  BOOL v2 = AXLocStringKeyForModel();
  if (AXDeviceIsJ3XX())
  {
    uint64_t v3 = sub_100040DD0(v2);
    id v4 = v3;
    if (v3
      && ([v3 isEqualToString:v1] & 1) == 0
      && ![v4 isEqualToString:v2])
    {
      goto LABEL_15;
    }
  }
  else
  {
    id v4 = 0;
  }
  if (qword_1001F0A38 != -1) {
    dispatch_once(&qword_1001F0A38, &stru_1001AC010);
  }
  if (byte_1001F0A30)
  {
    uint64_t v5 = sub_100040E4C(v2);

    id v4 = (void *)v5;
  }
  if (!v4
    || ([v4 isEqualToString:v1] & 1) != 0
    || [v4 isEqualToString:v2])
  {
    id v6 = +[NSBundle mainBundle];
    uint64_t v7 = [v6 localizedStringForKey:v1 value:v1 table:@"LocalizedStrings"];

    id v4 = (void *)v7;
  }
LABEL_15:

  return v4;
}

uint64_t sub_100041014()
{
  if (qword_1001F0A38 != -1) {
    dispatch_once(&qword_1001F0A38, &stru_1001AC010);
  }
  return byte_1001F0A30;
}

id sub_100041058(void *a1)
{
  id v1 = a1;
  BOOL v2 = +[NSBundle mainBundle];
  uint64_t v3 = [v2 localizedStringForKey:v1 value:v1 table:@"LocalizedStrings-Staccato"];

  return v3;
}

id sub_1000410D4(void *a1)
{
  id v1 = a1;
  BOOL v2 = +[NSBundle mainBundle];
  uint64_t v3 = [v2 localizedStringForKey:v1 value:v1 table:@"LocalizedStrings-D94"];

  return v3;
}

uint64_t sub_100041150()
{
  id v0 = +[UIDevice currentDevice];
  byte_1001F0A10 = [v0 userInterfaceIdiom] == 0;

  return byte_1001F0A10;
}

double sub_10004119C()
{
  _AXSPointerSizeMultiplier();
  return (v0 - kAXSPointerSetSizeMultiplierMinimum)
       / (float)(kAXSPointerSetSizeMultiplierMaximum - kAXSPointerSetSizeMultiplierMinimum);
}

void sub_100041314(uint64_t a1, int a2, double *a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  if (a4)
  {
    uint64_t v13 = a4;
    CGRect v14 = a3 + 1;
    do
    {
      *(v14 - 1) = (*(double (**)(double, double))(*(void *)(a1 + 40) + 16))(*(v14 - 1), *v14);
      *(void *)CGRect v14 = v15;
      v14 += 2;
      --v13;
    }
    while (v13);
  }
  switch(a2)
  {
    case 0:
      uint64_t v16 = *(void **)(a1 + 32);
      double v17 = *a3;
      double v18 = a3[1];
      objc_msgSend(v16, "moveToPoint:", v17, v18);
      break;
    case 1:
      unsigned int v19 = *(void **)(a1 + 32);
      double v20 = *a3;
      double v21 = a3[1];
      objc_msgSend(v19, "addLineToPoint:", v20, v21);
      break;
    case 2:
      uint64_t v22 = *(void **)(a1 + 32);
      double v23 = a3[2];
      double v24 = a3[3];
      double v25 = *a3;
      double v26 = a3[1];
      _objc_msgSend(v22, "addQuadCurveToPoint:controlPoint:", v23, v24, v25, v26, a9, a10);
      break;
    case 3:
      id v27 = *(void **)(a1 + 32);
      double v28 = a3[4];
      double v29 = a3[5];
      double v30 = *a3;
      double v31 = a3[1];
      double v32 = a3[2];
      double v33 = a3[3];
      _objc_msgSend(v27, "addCurveToPoint:controlPoint1:controlPoint2:", v28, v29, v30, v31, v32, v33);
      break;
    case 4:
      CFTypeRef v34 = *(void **)(a1 + 32);
      [v34 closePath];
      break;
    default:
      return;
  }
}

double sub_100041520(uint64_t a1, double a2)
{
  return a2 - *(double *)(a1 + 32);
}

id sub_1000415E0(uint64_t a1)
{
  return +[HNDScreen convertPoint:toView:](HNDScreen, "convertPoint:toView:", *(void *)(a1 + 32));
}

uint64_t sub_100041FA8()
{
  if (byte_1001F0A20 == 1) {
    return byte_1001F0A21 != 0;
  }
  if (AXDeviceHasHomeButton()) {
    return 0;
  }

  return AXDeviceIsPhone();
}

uint64_t sub_100042004()
{
  if (byte_1001F0A22 == 1) {
    return byte_1001F0A23 != 0;
  }
  else {
    return AXDeviceHasHomeButton() ^ 1;
  }
}

void sub_100042060(uint64_t a1)
{
  while (2)
  {
    if (!qword_1001F0A28)
    {
      id v2 = objc_alloc((Class)UINotificationFeedbackGenerator);
      uint64_t v3 = +[NSSet setWithArray:&off_1001BB8E0];
      id v4 = +[_UINotificationFeedbackGeneratorConfiguration privateConfigurationForTypes:v3];
      id v5 = [v2 initWithConfiguration:v4];
      id v6 = (void *)qword_1001F0A28;
      qword_1001F0A28 = (uint64_t)v5;
    }
    switch(a1)
    {
      case 1:
        uint64_t v7 = +[CHHapticEngine capabilitiesForHardware];
        unsigned int v8 = [v7 supportsHaptics];

        a1 = 4;
        if (!v8) {
          continue;
        }
        [(id)qword_1001F0A28 prepare];
        double v12 = (void *)qword_1001F0A28;
        uint64_t v13 = 1016;
        goto LABEL_13;
      case 2:
        id v9 = +[CHHapticEngine capabilitiesForHardware];
        unsigned int v10 = [v9 supportsHaptics];

        a1 = 4;
        if (!v10) {
          continue;
        }
        [(id)qword_1001F0A28 prepare];
        double v12 = (void *)qword_1001F0A28;
        uint64_t v13 = 1017;
LABEL_13:
        _[v12 _privateNotificationOccurred:v13];
        return;
      case 3:
        uint64_t v11 = 1;
        goto LABEL_10;
      case 4:
        uint64_t v11 = 0;
LABEL_10:
        sub_10004222C(v11);
        break;
      default:
        return;
    }
    break;
  }
}

void sub_10004222C(uint64_t a1)
{
  id v2 = +[UIDevice currentDevice];
  uint64_t v3 = [v2 _tapticEngine];
  [v3 prepareUsingFeedback:a1];

  id v4 = +[UIDevice currentDevice];
  id v5 = [v4 _tapticEngine];
  [v5 actuateFeedback:a1];

  id v7 = +[UIDevice currentDevice];
  id v6 = [v7 _tapticEngine];
  [v6 endUsingFeedback:a1];
}

HNDButtonStateContainer *sub_1000423E0(unsigned int a1, unsigned int a2)
{
  id v4 = sub_10004263C(a1);
  sub_10004263C(a2);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000426D8;
  v22[3] = &unk_1001ABFF0;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v23 = v5;
  id v6 = [v4 objectsPassingTest:v22];
  double v17 = _NSConcreteStackBlock;
  uint64_t v18 = 3221225472;
  unsigned int v19 = sub_1000426FC;
  double v20 = &unk_1001ABFF0;
  id v21 = v4;
  id v7 = v4;
  unsigned int v8 = [v5 objectsPassingTest:&v17];
  if ((unint64_t)objc_msgSend(v6, "count", v17, v18, v19, v20) >= 2)
  {
    id v9 = ASTLogMouse();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)) {
      sub_100114824((uint64_t)v6, v9);
    }
  }
  if ((unint64_t)[v8 count] >= 2)
  {
    unsigned int v10 = ASTLogMouse();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      sub_1001147AC((uint64_t)v8, v10);
    }
  }
  if (![v8 count] && !objc_msgSend(v6, "count"))
  {
    uint64_t v11 = ASTLogMouse();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_100114724(a1, a2, v11);
    }
  }
  double v12 = [HNDButtonStateContainer alloc];
  uint64_t v13 = [v6 anyObject];
  CGRect v14 = [v8 anyObject];
  uint64_t v15 = [(HNDButtonStateContainer *)v12 initWithUpButton:v13 downButton:v14];

  return v15;
}

id sub_10004263C(unsigned int a1)
{
  id v2 = +[NSMutableSet set];
  uint64_t v3 = 1;
  do
  {
    if ((a1 >> (v3 - 1)))
    {
      id v4 = +[NSNumber numberWithUnsignedInt:v3];
      [v2 addObject:v4];
    }
    uint64_t v3 = (v3 + 1);
  }
  while (v3 != 32);

  return v2;
}

uint64_t sub_1000426D8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

uint64_t sub_1000426FC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

void sub_100042720(id a1)
{
  id v1 = +[AXSettings sharedInstance];
  byte_1001F0A30 = [v1 laserEnabled];
}

void *sub_100042770(uint64_t a1)
{
  id v2 = (void *)sub_1000427C0();
  uint64_t result = dlsym(v2, "AXWatchRemoteScreenIsTwiceFeatureOn");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1001F0A40 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000427C0()
{
  v2[0] = 0;
  if (!qword_1001F0A48)
  {
    v2[1] = _NSConcreteStackBlock;
    v2[2] = (void *)3221225472;
    v2[3] = sub_1000428B8;
    v2[4] = &unk_1001AC070;
    void v2[5] = v2;
    long long v3 = off_1001AC058;
    uint64_t v4 = 0;
    qword_1001F0A48 = _sl_dlopen();
  }
  uint64_t v0 = qword_1001F0A48;
  if (!qword_1001F0A48) {
    sub_10011489C(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t sub_1000428B8()
{
  uint64_t result = _sl_dlopen();
  qword_1001F0A48 = result;
  return result;
}

void *sub_10004292C(uint64_t a1)
{
  id v2 = (void *)sub_1000427C0();
  uint64_t result = dlsym(v2, "AXWatchRemoteScreenIsPairedGizmoSupported");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1001F0A50 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_100042980()
{
  id v0 = objc_alloc_init((Class)AXSSSwitchControlSettings);
  id v1 = +[AXSettings sharedInstance];
  id v2 = [v1 switchControlScanningStyle];
  if (v2 == (id)2)
  {
    uint64_t v26 = AXSSSwitchControlScanningStyleSingleSwitchStep;
    long long v3 = &v26;
  }
  else if (v2 == (id)1)
  {
    uint64_t v27 = AXSSSwitchControlScanningStyleManual;
    long long v3 = &v27;
  }
  else
  {
    if (v2) {
      goto LABEL_8;
    }
    uint64_t v28 = AXSSSwitchControlScanningStyleAuto;
    long long v3 = &v28;
  }
  uint64_t v4 = +[NSArray arrayWithObjects:v3 count:1];
  [v0 setScanningStyles:v4];

LABEL_8:
  id v5 = [v1 switchControlTapBehavior];
  if (v5 == (id)2)
  {
    uint64_t v23 = AXSSSwitchControlTapBehaviorAlways;
    id v6 = &v23;
  }
  else if (v5 == (id)1)
  {
    uint64_t v24 = AXSSSwitchControlTapBehaviorAuto;
    id v6 = &v24;
  }
  else
  {
    if (v5) {
      goto LABEL_15;
    }
    uint64_t v25 = AXSSSwitchControlTapBehaviorDefault;
    id v6 = &v25;
  }
  id v7 = +[NSArray arrayWithObjects:v6 count:1];
  [v0 setTapBehaviors:v7];

LABEL_15:
  if ([v1 assistiveTouchScannerCursorHighVisibilityEnabled])
  {
    uint64_t v22 = AXSSSwitchControlCursorSizeLarge;
    unsigned int v8 = &v22;
  }
  else
  {
    uint64_t v21 = AXSSSwitchControlCursorSizeSmall;
    unsigned int v8 = &v21;
  }
  id v9 = +[NSArray arrayWithObjects:v8 count:1];
  [v0 setCursorSizes:v9];

  id v10 = [v1 switchControlScanAfterTapLocation];
  if (v10 == (id)1)
  {
    uint64_t v19 = AXSSSwitchControlPostActivationScanLocationCurrentItem;
    uint64_t v11 = &v19;
  }
  else
  {
    if (v10) {
      goto LABEL_23;
    }
    uint64_t v20 = AXSSSwitchControlPostActivationScanLocationDefault;
    uint64_t v11 = &v20;
  }
  double v12 = +[NSArray arrayWithObjects:v11 count:1];
  [v0 setPostActivationScanLocations:v12];

LABEL_23:
  [v1 assistiveTouchStepInterval];
  objc_msgSend(v0, "setAutoScanningInterval:");
  [v1 assistiveTouchScanTimeout];
  objc_msgSend(v0, "setAutoHideTimeout:");
  if ([v1 assistiveTouchDelayAfterInputEnabled]) {
    [v1 assistiveTouchDelayAfterInput];
  }
  else {
    double v13 = AXSSSwitchControlTimeIntervalNotApplicable;
  }
  [v0 setPauseOnFirstItemInterval:v13];
  objc_msgSend(v0, "setNumberOfScanLoops:", objc_msgSend(v1, "assistiveTouchScanCycles"));
  [v1 switchControlDwellTime];
  objc_msgSend(v0, "setDwellDuration:");
  if ([v1 assistiveTouchActionRepeatEnabled]) {
    [v1 assistiveTouchActionRepeatInterval];
  }
  else {
    double v14 = AXSSSwitchControlTimeIntervalNotApplicable;
  }
  [v0 setRepeatActionInterval:v14];
  if ([v1 assistiveTouchInputHoldEnabled]) {
    [v1 assistiveTouchInputHoldDuration];
  }
  else {
    double v15 = AXSSSwitchControlTimeIntervalNotApplicable;
  }
  [v0 setHoldDuration:v15];
  if ([v1 assistiveTouchInputCoalescingEnabled]) {
    [v1 assistiveTouchInputCoalescingDuration];
  }
  else {
    double v16 = AXSSSwitchControlTimeIntervalNotApplicable;
  }
  [v0 setIgnoreRepeatDuration:v16];
  objc_msgSend(v0, "setSoundEffectsEnabled:", objc_msgSend(v1, "assistiveTouchScannerSoundEnabled"));
  objc_msgSend(v0, "setSpeechEnabled:", objc_msgSend(v1, "assistiveTouchScannerSpeechEnabled"));
  if ([v1 assistiveTouchLongPressEnabled]) {
    [v1 assistiveTouchLongPressDuration];
  }
  else {
    double v17 = AXSSSwitchControlTimeIntervalNotApplicable;
  }
  [v0 setLongPressDuration:v17];
  [v1 switchControlAutoTapTimeout];
  objc_msgSend(v0, "setAutoTapTimeout:");

  return v0;
}

void sub_100042D14(void *a1)
{
  id v1 = a1;
  id v2 = +[AXSettings sharedInstance];
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v3 = [v1 scanningStyles];
  id v4 = [v3 countByEnumeratingWithState:&v64 objects:v71 count:16];
  if (!v4) {
    goto LABEL_16;
  }
  id v5 = v4;
  uint64_t v6 = *(void *)v65;
  uint64_t v7 = AXSSSwitchControlScanningStyleAuto;
  uint64_t v8 = AXSSSwitchControlScanningStyleManual;
  uint64_t v9 = AXSSSwitchControlScanningStyleSingleSwitchStep;
  while (2)
  {
    for (i = 0; i != v5; i = (char *)i + 1)
    {
      if (*(void *)v65 != v6) {
        objc_enumerationMutation(v3);
      }
      uint64_t v11 = *(void **)(*((void *)&v64 + 1) + 8 * i);
      if ([v11 isEqualToString:v7])
      {
        uint64_t v12 = 0;
LABEL_15:
        [v2 setSwitchControlScanningStyle:v12];
        goto LABEL_16;
      }
      if ([v11 isEqualToString:v8])
      {
        uint64_t v12 = 1;
        goto LABEL_15;
      }
      if ([v11 isEqualToString:v9])
      {
        uint64_t v12 = 2;
        goto LABEL_15;
      }
    }
    id v5 = [v3 countByEnumeratingWithState:&v64 objects:v71 count:16];
    if (v5) {
      continue;
    }
    break;
  }
LABEL_16:

  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  double v13 = [v1 tapBehaviors];
  id v14 = [v13 countByEnumeratingWithState:&v60 objects:v70 count:16];
  if (!v14) {
    goto LABEL_31;
  }
  id v15 = v14;
  uint64_t v16 = *(void *)v61;
  uint64_t v17 = AXSSSwitchControlTapBehaviorDefault;
  uint64_t v18 = AXSSSwitchControlTapBehaviorAuto;
  uint64_t v19 = AXSSSwitchControlTapBehaviorAlways;
  while (2)
  {
    uint64_t v20 = 0;
    while (2)
    {
      if (*(void *)v61 != v16) {
        objc_enumerationMutation(v13);
      }
      uint64_t v21 = *(void **)(*((void *)&v60 + 1) + 8 * v20);
      if ([v21 isEqualToString:v17])
      {
        uint64_t v22 = 0;
LABEL_30:
        [v2 setSwitchControlTapBehavior:v22];
        goto LABEL_31;
      }
      if ([v21 isEqualToString:v18])
      {
        uint64_t v22 = 1;
        goto LABEL_30;
      }
      if ([v21 isEqualToString:v19])
      {
        uint64_t v22 = 2;
        goto LABEL_30;
      }
      if (v15 != (id)++v20) {
        continue;
      }
      break;
    }
    id v15 = [v13 countByEnumeratingWithState:&v60 objects:v70 count:16];
    if (v15) {
      continue;
    }
    break;
  }
LABEL_31:

  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v23 = [v1 cursorSizes];
  id v24 = [v23 countByEnumeratingWithState:&v56 objects:v69 count:16];
  if (!v24) {
    goto LABEL_45;
  }
  id v25 = v24;
  uint64_t v26 = *(void *)v57;
  uint64_t v27 = AXSSSwitchControlCursorSizeSmall;
  uint64_t v28 = AXSSSwitchControlCursorSizeMedium;
  uint64_t v29 = AXSSSwitchControlCursorSizeLarge;
  while (2)
  {
    uint64_t v30 = 0;
    while (2)
    {
      if (*(void *)v57 != v26) {
        objc_enumerationMutation(v23);
      }
      double v31 = *(void **)(*((void *)&v56 + 1) + 8 * v30);
      if (([v31 isEqualToString:v27] & 1) != 0
        || ([v31 isEqualToString:v28] & 1) != 0)
      {
        uint64_t v32 = 0;
LABEL_44:
        [v2 setAssistiveTouchScannerCursorHighVisibilityEnabled:v32];
        goto LABEL_45;
      }
      if ([v31 isEqualToString:v29])
      {
        uint64_t v32 = 1;
        goto LABEL_44;
      }
      if (v25 != (id)++v30) {
        continue;
      }
      break;
    }
    id v25 = [v23 countByEnumeratingWithState:&v56 objects:v69 count:16];
    if (v25) {
      continue;
    }
    break;
  }
LABEL_45:

  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  double v33 = objc_msgSend(v1, "postActivationScanLocations", 0);
  id v34 = [v33 countByEnumeratingWithState:&v52 objects:v68 count:16];
  if (v34)
  {
    id v35 = v34;
    uint64_t v36 = *(void *)v53;
    uint64_t v37 = AXSSSwitchControlPostActivationScanLocationCurrentItem;
    uint64_t v38 = AXSSSwitchControlPostActivationScanLocationDefault;
    uint64_t v39 = 1;
    while (2)
    {
      for (j = 0; j != v35; j = (char *)j + 1)
      {
        if (*(void *)v53 != v36) {
          objc_enumerationMutation(v33);
        }
        unsigned __int8 v41 = *(void **)(*((void *)&v52 + 1) + 8 * (void)j);
        if ([v41 isEqualToString:v37]) {
          goto LABEL_56;
        }
        if ([v41 isEqualToString:v38])
        {
          uint64_t v39 = 0;
LABEL_56:
          [v2 setSwitchControlScanAfterTapLocation:v39];
          goto LABEL_57;
        }
      }
      id v35 = [v33 countByEnumeratingWithState:&v52 objects:v68 count:16];
      if (v35) {
        continue;
      }
      break;
    }
  }
LABEL_57:

  [v1 autoScanningInterval];
  double v42 = AXSSSwitchControlTimeIntervalNotApplicable;
  if (v43 != AXSSSwitchControlTimeIntervalNotApplicable)
  {
    [v1 autoScanningInterval];
    objc_msgSend(v2, "setAssistiveTouchStepInterval:");
  }
  [v1 autoHideTimeout];
  if (v44 != v42)
  {
    [v1 autoHideTimeout];
    objc_msgSend(v2, "setAssistiveTouchScanTimeout:");
  }
  [v1 pauseOnFirstItemInterval];
  if (v45 == v42)
  {
    [v2 setAssistiveTouchDelayAfterInputEnabled:0];
  }
  else
  {
    [v2 setAssistiveTouchDelayAfterInputEnabled:1];
    [v1 pauseOnFirstItemInterval];
    objc_msgSend(v2, "setAssistiveTouchDelayAfterInput:");
  }
  objc_msgSend(v2, "setAssistiveTouchScanCycles:", objc_msgSend(v1, "numberOfScanLoops"));
  [v1 dwellDuration];
  if (v46 != v42)
  {
    [v1 dwellDuration];
    objc_msgSend(v2, "setSwitchControlDwellTime:");
  }
  [v1 repeatActionInterval];
  if (v47 == v42)
  {
    [v2 setAssistiveTouchActionRepeatEnabled:0];
  }
  else
  {
    [v2 setAssistiveTouchActionRepeatEnabled:1];
    [v1 repeatActionInterval];
    objc_msgSend(v2, "setAssistiveTouchActionRepeatInterval:");
  }
  [v1 holdDuration];
  if (v48 == v42)
  {
    [v2 setAssistiveTouchInputHoldEnabled:0];
  }
  else
  {
    [v2 setAssistiveTouchInputHoldEnabled:1];
    [v1 holdDuration];
    objc_msgSend(v2, "setAssistiveTouchInputHoldDuration:");
  }
  [v1 ignoreRepeatDuration];
  if (v49 == v42)
  {
    [v2 setAssistiveTouchInputCoalescingEnabled:0];
  }
  else
  {
    [v2 setAssistiveTouchInputCoalescingEnabled:1];
    [v1 ignoreRepeatDuration];
    objc_msgSend(v2, "setAssistiveTouchInputCoalescingDuration:");
  }
  objc_msgSend(v2, "setAssistiveTouchScannerSoundEnabled:", objc_msgSend(v1, "soundEffectsEnabled"));
  objc_msgSend(v2, "setAssistiveTouchScannerSpeechEnabled:", objc_msgSend(v1, "speechEnabled"));
  [v1 longPressDuration];
  if (v50 == v42)
  {
    [v2 setAssistiveTouchLongPressEnabled:0];
  }
  else
  {
    [v2 setAssistiveTouchLongPressEnabled:1];
    [v1 longPressDuration];
    objc_msgSend(v2, "setAssistiveTouchLongPressDuration:");
  }
  [v1 autoTapTimeout];
  if (v51 != v42)
  {
    [v1 autoTapTimeout];
    objc_msgSend(v2, "setSwitchControlAutoTapTimeout:");
  }
}

BOOL sub_100043C2C(HNDBubbleCursorLayer *self, SEL a2)
{
  return self->_simpleRect;
}

id sub_100045674(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isActive];
  if (result)
  {
    id result = [*(id *)(a1 + 32) forcePause];
    if ((result & 1) == 0)
    {
      unsigned __int8 v3 = [*(id *)(a1 + 32) isSpeakingFocusContext];
      id v4 = *(void **)(a1 + 32);
      if (v3)
      {
        return [v4 setShouldScanToNextFocusContextAfterSpeaking:1];
      }
      else
      {
        [v4 _stepToNextFocusContextInDirection:0];
        id v5 = *(void **)(a1 + 32);
        return [v5 _autoscanToNextFocusContext];
      }
    }
  }
  return result;
}

void sub_10004624C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [SCATControllableDevicesMenuItem alloc];
  uint64_t v7 = +[NSString stringWithFormat:@"%@%lu", @"controllableDevice", a3];
  uint64_t v8 = [(SCATControllableDevicesMenuItem *)v6 initWithIdentifier:v7 delegate:*(void *)(a1 + 32) searchResult:v5];

  [*(id *)(a1 + 40) addObject:v8];
}

void sub_100046C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100046C40(uint64_t a1)
{
  id v5 = +[AXSettings sharedInstance];
  [v5 assistiveTouchVirtualTrackpadFadeDelay];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setFadeDelay:v3];
}

id sub_100046D78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) resetVisibility:1];
}

id sub_100046E2C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100046EC8;
  _OWORD v3[3] = &unk_1001AAA90;
  void v3[4] = *(void *)(a1 + 32);
  id result = +[UIView animateWithDuration:v3 animations:0.5];
  *(unsigned char *)(*(void *)(a1 + 32) + 32) = 1;
  return result;
}

id sub_100046EC8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) resetVisibility:0];
}

void sub_100047F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, id *a13)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a13);
  objc_destroyWeak((id *)(v13 - 200));
  _Unwind_Resume(a1);
}

void sub_100048020(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _goBackInMenuState:3];
}

void sub_100048064(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[148])
  {
    id v4 = WeakRetained;
    id v3 = objc_loadWeakRetained(v1);
    [v3 _updateNubbitFadedProperties];

    id WeakRetained = v4;
  }
}

id sub_1000480D4(uint64_t a1)
{
  [*(id *)(a1 + 32) _preloadInitialMenuItems];
  double v2 = *(void **)(a1 + 32);

  return [v2 _preloadDwellMenuItems];
}

void sub_100048110(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setInitialItems:0];
}

void sub_100048154(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained reloadDwellMenu];
}

void sub_100048194(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained reloadDwellMenu];
}

void sub_1000481D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained reloadDwellMenu];
}

void sub_100048214(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _shortcutsDidUpdate];
}

id sub_100048810(uint64_t a1)
{
  [*(id *)(a1 + 32) setAlpha:1.0];
  double v2 = *(void **)(*(void *)(a1 + 32) + 88);

  return [v2 setSelected:1];
}

void sub_100048E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100048E30(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100048E40(uint64_t a1)
{
}

void sub_100048E48(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "convertPoint:toView:", v7, *(double *)(a1 + 48), *(double *)(a1 + 56));
  if (objc_msgSend(v7, "pointInside:withEvent:", 0))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_1000496C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1000496E0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 192) setAlpha:0.0];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 192);
  *(void *)(v2 + 192) = 0;
}

void *sub_100049734(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) removeFromSuperview];
  id result = *(void **)(a1 + 32);
  if (!result[24])
  {
    id result = [result style];
    if (result)
    {
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      v3[2] = sub_1000497EC;
      _OWORD v3[3] = &unk_1001AAA90;
      void v3[4] = *(void *)(a1 + 32);
      return +[UIView animateWithDuration:v3 animations:0.2];
    }
  }
  return result;
}

id sub_1000497EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateBackButtonVisibility];
}

id sub_1000497F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) showVolumeBar:0 withProgress:*(double *)(*(void *)(a1 + 32) + 104)];
}

void sub_10004D4EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 256));
  _Unwind_Resume(a1);
}

void sub_10004DBB0(id a1)
{
  uint64_t v1 = AXAssistiveTouchIconTypeSiri;
  v9[0] = AXAssistiveTouchIconTypeNotificationCenter;
  v9[1] = AXAssistiveTouchIconTypeSiri;
  uint64_t v2 = AXAssistiveTouchIconTypeTypeToSiri;
  void v9[2] = AXAssistiveTouchIconTypeTypeToSiri;
  v9[3] = AXAssistiveTouchIconTypeControlCenter;
  v9[4] = AXAssistiveTouchIconTypeAppSwitcher;
  v9[5] = AXAssistiveTouchIconTypeScreenshot;
  v9[6] = AXAssistiveTouchIconTypeVoiceControl;
  v9[7] = AXAssistiveTouchIconTypeRebootDevice;
  v9[8] = AXAssistiveTouchIconTypeSOS;
  v9[9] = AXAssistiveTouchIconTypeToggleDock;
  v9[10] = AXAssistiveTouchIconTypeArmApplePay;
  v9[11] = AXAssistiveTouchIconTypeDetectionMode;
  uint64_t v3 = AXAssistiveTouchIconTypeTrackpad;
  v9[12] = AXAssistiveTouchIconTypeTrackpad;
  v9[13] = AXAssistiveTouchIconTypeWatchRemoteScreen;
  v9[14] = AXAssistiveTouchIconTypeBackgroundSounds;
  v9[15] = AXAssistiveTouchIconTypeLiveCaptions;
  v9[16] = AXAssistiveTouchIconTypeLiveSpeech;
  v9[17] = AXAssistiveTouchIconTypeNearbyDeviceControl;
  v9[18] = AXAssistiveTouchIconTypeAssistiveAccess;
  v9[19] = AXAssistiveTouchIconTypeCamera;
  v9[20] = AXAssistiveTouchIconTypeFrontFacingCamera;
  v9[21] = AXAssistiveTouchIconTypeSideApp;
  uint64_t v4 = +[NSArray arrayWithObjects:v9 count:22];
  id v5 = (void *)qword_1001F0A60;
  qword_1001F0A60 = v4;

  id v6 = [(id)qword_1001F0A60 mutableCopy];
  if (AXDeviceIsSiriAvailableInClarity())
  {
    [v6 removeObject:v1];
    [v6 removeObject:v2];
  }
  [v6 removeObject:v3];
  [v6 addObject:AXAssistiveTouchIconTypeHome];
  [v6 addObject:AXAssistiveTouchIconTypeOrientation];
  id v7 = [v6 copy];
  uint64_t v8 = (void *)qword_1001F0A68;
  qword_1001F0A68 = (uint64_t)v7;
}

void sub_10004DDE0(uint64_t a1, void *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005C9A4;
  block[3] = &unk_1001AAA90;
  id v4 = a2;
  id v2 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_10004DE74(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained[17] cancel];
  [WeakRetained _notificationCenterPressed];
}

void sub_10004DEC8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _pinchPressed:v3 mode:1];
}

void sub_10004DF28(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _pinchPressed:v3 mode:0];
}

void sub_10004DF88(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _pinchPressed:v3 mode:2];
}

void sub_10004DFE8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _doubleTapPressed:v3 fromButtonPress:0];
}

void sub_10004E048(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _longPressPressed:v3 fromButtonPress:0];
}

void sub_10004E0A8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _dragAndDropPressed:v3 fromButtonPress:0 dragMenu:0];
}

void sub_10004E10C(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _dragAndDropPressed:v3 fromButtonPress:0 dragMenu:1];
}

void sub_10004E170(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _spotlightPressed:v3];
}

void sub_10004E1CC(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _orbPressed:v3 fromButtonPress:0];
}

void sub_10004E22C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _activateLockButton];
}

void sub_10004E26C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _volumeDown:1];
}

void sub_10004E2B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _volumeDown:0];
}

void sub_10004E2F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _volumeUp:1];
}

void sub_10004E338(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _volumeUp:0];
}

void sub_10004E37C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _tripleClickHomePressed];
}

void sub_10004E3BC(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _orientationPressed:v3];
}

void sub_10004E418(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _ringerPressed:1];
}

void sub_10004E45C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _actionButtonPressed];
}

void sub_10004E49C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _cameraButtonPressed];
}

void sub_10004E4DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _cameraButtonLightPressed];
}

void sub_10004E51C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _cameraButtonDoubleLightPressed];
}

void sub_10004E55C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _openVisualIntelligence];
}

void sub_10004E59C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _rotationLockPressed];
}

void sub_10004E5DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _screenshotPressed];
}

void sub_10004E61C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _trackpadPressed];
}

void sub_10004E65C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _shakePressed];
}

void sub_10004E69C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _toggleAppSwitcher];
}

void sub_10004E6DC(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained(v2);
  [WeakRetained[17] cancel];
  [WeakRetained _hardwareButtonPressed:v3];
}

void sub_10004E74C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained[17] cancel];
  [WeakRetained _controlCenterPressed];
}

void sub_10004E7A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _homeButton:1];
}

void sub_10004E7E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _homeButton:0];
}

void sub_10004E828(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (*((unsigned char *)WeakRetained + 96))
  {
    [WeakRetained[17] cancel];
    [v4 _customsPressed:v5];
  }
  else
  {
    [v5 setHighlighted:0];
  }
}

void sub_10004E8B8(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained[17] cancel];
  [WeakRetained _siriButtonPressed];
}

id sub_10004E90C(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  BOOL v2 = (sub_1000407B4() & 1) != 0 || _AXSHomeButtonAssistant() != 0;

  return [v1 setDisabled:v2];
}

void sub_10004E964(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained[17] cancel];
  [WeakRetained _typeToSiriButtonPressed];
}

id sub_10004E9B8(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  BOOL v2 = (sub_1000407B4() & 1) != 0 || _AXSHomeButtonAssistant() != 0;

  return [v1 setDisabled:v2];
}

void sub_10004EA10(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained[17] cancel];
  [WeakRetained _voiceControlPressed];
}

void sub_10004EA64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _commandAndControlPressed];
}

void sub_10004EAA4(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained(v2);
  [WeakRetained[17] cancel];
  [WeakRetained _gesturesPressed:v3];
}

void sub_10004EB14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _sosPressed];
}

void sub_10004EB54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _detectionModePresssed];
}

void sub_10004EB94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _watchRemoteScreenPressed];
}

void sub_10004EBD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _backgroundSoundsPressed];
}

void sub_10004EC14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _liveCaptionsPressed];
}

void sub_10004EC54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _liveSpeechPressed];
}

void sub_10004EC94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _dimFlashingLightsPressed];
}

void sub_10004ECD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _hapticMusicPressed];
}

void sub_10004ED14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _motionCuesPressed];
}

void sub_10004ED54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _nearbyDeviceControlPressed];
}

void sub_10004ED94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _rebootDevicePressed];
}

void sub_10004EDD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _reachabilityPressed];
}

void sub_10004EE14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _speakScreenPressed];
}

void sub_10004EE54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _sysdiagnosePressed];
}

void sub_10004EE94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _dockPressed];
}

void sub_10004EED4(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _applePayButtonPressed:v3];
}

void sub_10004EF30(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _sideAppPressed:v3];
}

void sub_10004EF8C(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained(v2);
  [WeakRetained[17] cancel];
  [WeakRetained _dwellPressed:v3];
}

void sub_10004EFFC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _toggleDwellControlPause:0];
}

void sub_10004F040(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _toggleDwellControlPause:1];
}

void sub_10004F084(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _lockDwellControlAction:1];
}

void sub_10004F0C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _lockDwellControlAction:0];
}

void sub_10004F10C(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _tapPressed:v3 fromButtonPress:0];
}

void sub_10004F16C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _increaseDwellTimePressed];
}

void sub_10004F1AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _decreaseDwellTimePressed];
}

void sub_10004F1EC(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained(v2);
  [WeakRetained[17] cancel];
  [WeakRetained _scrollPressed:v3];
}

void sub_10004F25C(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _scrollPressed:v3 fromButtonPress:0 vertical:1 forward:0 max:0];
}

void sub_10004F2C8(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _scrollPressed:v3 fromButtonPress:0 vertical:1 forward:1 max:0];
}

void sub_10004F334(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _scrollPressed:v3 fromButtonPress:0 vertical:0 forward:0 max:0];
}

void sub_10004F3A0(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _scrollPressed:v3 fromButtonPress:0 vertical:0 forward:1 max:0];
}

void sub_10004F40C(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _scrollPressed:v3 fromButtonPress:0 vertical:1 forward:0 max:1];
}

void sub_10004F478(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _scrollPressed:v3 fromButtonPress:0 vertical:1 forward:1 max:1];
}

void sub_10004F4E4(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained _continuousScrollPressed:v4 fromButtonPress:0 inDirection:1 iconType:*(void *)(a1 + 32)];
}

void sub_10004F558(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained _continuousScrollPressed:v4 fromButtonPress:0 inDirection:0 iconType:*(void *)(a1 + 32)];
}

void sub_10004F5CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _bubbleModeToggled];
}

void sub_10004F60C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _autoHideForEyeTrackingToggled];
}

void sub_10004F64C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _calibrateEyeTrackingPressed];
}

void sub_10004F68C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _toggleNeedsToShowZoomWindow];
}

void sub_10004F6CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _toggleAssistiveAccess];
}

void sub_10004F70C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _cameraPressed];
}

void sub_10004F74C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _frontFacingCameraPressed];
}

void sub_10004F78C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _customGesturePressed:*(void *)(a1 + 32) fromButtonPress:0];
}

id sub_10004F7E0(uint64_t a1)
{
  BOOL v2 = +[AXSiriShortcutsManager sharedManager];
  [v2 performShortcut:*(void *)(a1 + 32)];

  id v3 = *(void **)(a1 + 40);

  return [v3 _menuExited];
}

void sub_10004F834(uint64_t a1, void *a2)
{
  BOOL v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _siriShortcutsMenuPressed:v3];
}

BOOL sub_10005008C(id a1, HNDRockerButton *a2, unint64_t a3, BOOL *a4)
{
  id v5 = [(HNDRockerButton *)a2 type];
  id v6 = (void *)AXAssistiveTouchIconTypeArmApplePay;

  if (v5 == v6) {
    *a4 = 1;
  }
  return v5 == v6;
}

void sub_1000501E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = [v4 objectAtIndexedSubscript:a3];
  [v5 setLocation:v6];
}

void sub_100050708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, id *a12)
{
  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)(v14 - 112));
  _Unwind_Resume(a1);
}

void sub_10005078C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleTouch:4];
}

void sub_1000507D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleTouch:3];
}

void sub_100050814(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleTouch:2];
}

void sub_100050858(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleTouch:5];
}

void sub_100050C0C(id a1, HNDRockerButton *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 rotateUpsideDown];
}

void sub_100050C54(id a1, HNDRockerButton *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 rotateRight];
}

void sub_100050C9C(id a1, HNDRockerButton *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 rotatePortrait];
}

void sub_100050CE4(id a1, HNDRockerButton *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 rotateLeft];
}

void sub_100051020(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  id v10 = [v5 scrollItems];
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = [*(id *)(a1 + 40) objectAtIndexedSubscript:a3];
  uint64_t v9 = [v7 _rockerButtonForLocation:v8 buttonType:v6];

  [v10 addObject:v9];
}

void sub_1000513A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000513BC(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v6 = a3;
  if (([v6 isEqualToString:AXAssistiveTouchIconTypeDwellPauseToggle] & 1) != 0
    || [v6 isEqualToString:AXAssistiveTouchIconTypeDwellLockToggle])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_10005160C(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  unsigned int v5 = [v11 isEqualToString:AXAssistiveTouchIconTypeMoveMenu];
  id v6 = *(unsigned char **)(a1 + 32);
  if (!v5 || v6[97])
  {
    id v7 = [v6 dwellItems];
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = [*(id *)(a1 + 40) objectAtIndexedSubscript:a3];
    id v10 = [v8 _rockerButtonForLocation:v9 buttonType:v11];
    [v7 addObject:v10];
  }
}

void sub_100051890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000518B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _confirmApplePay];
}

id sub_1000519FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 shortcutName];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100051B2C;
  v10[3] = &unk_1001AC328;
  id v11 = *(id *)(a1 + 32);
  LOBYTE(v9) = 0;
  unsigned int v5 = +[HNDRockerButton buttonWithTitle:v4 imageName:@"SCATIcon_siri_shortcuts" downBlock:0 upBlock:v10 dataSource:*(void *)(a1 + 40) showWithGuidedAccess:0 showWithAssistiveAccess:v9];

  id v6 = [v3 identifier];
  [v5 setAccessibilityIdentifier:v6];

  id v7 = [v3 glyphImage];

  [v5 setOverrideImage:v7];

  return v5;
}

void sub_100051B2C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [a2 accessibilityIdentifier];
  id v6 = [v3 shortcutForIdentifier:v4];

  unsigned int v5 = v6;
  if (v6)
  {
    [*(id *)(a1 + 32) performShortcut:v6];
    unsigned int v5 = v6;
  }
}

BOOL sub_100051D34(id a1, UIView *a2, unint64_t a3, BOOL *a4)
{
  return [(UIView *)a2 safeIntegerForKey:@"tag", a4] == (id)100;
}

BOOL sub_100051DE0(id a1, UIView *a2, unint64_t a3)
{
  return [(UIView *)a2 safeIntegerForKey:@"tag"] == (id)112;
}

void sub_10005246C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_1000524A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _ringerPressed:0];
}

id sub_1000524E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _actionButtonPressed];
}

void sub_1000524F0(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _morePressed:v3];
}

id sub_10005278C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _menuExited];
  *(void *)(*(void *)(a1 + 32) + 32) = 1;
  return result;
}

void sub_100052DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
}

void sub_100052DF0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if ((unint64_t)[*(id *)(a1 + 32) count] < 8)
  {
    id v7 = [v6 name];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100052F74;
    v11[3] = &unk_1001AC180;
    objc_copyWeak(&v13, (id *)(a1 + 56));
    id v12 = v6;
    LOBYTE(v10) = 1;
    uint64_t v8 = +[HNDRockerButton buttonWithTitle:v7 imageName:@"IconFavorites" downBlock:0 upBlock:v11 dataSource:*(void *)(a1 + 40) showWithGuidedAccess:1 showWithAssistiveAccess:v10];

    uint64_t v9 = objc_msgSend(*(id *)(a1 + 48), "objectAtIndexedSubscript:", objc_msgSend(*(id *)(a1 + 32), "count"));
    [v8 setLocation:v9];

    [v8 setCustomTitle:1];
    [*(id *)(a1 + 32) addObject:v8];

    objc_destroyWeak(&v13);
  }
  else
  {
    *a4 = 1;
  }
}

void sub_100052F5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100052F74(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _customGesturePressed:*(void *)(a1 + 32) fromButtonPress:0];
}

void sub_100052FC8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _addFavoriteBoxPressed];
}

void sub_10005374C(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

id sub_100053758(uint64_t a1)
{
  [*(id *)(a1 + 32) enumerateObjectsUsingBlock:&stru_1001AC458];
  [*(id *)(*(void *)(a1 + 40) + 224) centerItems:*(void *)(a1 + 32) withView:*(void *)(a1 + 48)];
  [*(id *)(a1 + 40) _centerBackButtonToView:*(void *)(a1 + 48)];
  [*(id *)(a1 + 40) setShouldForciblyHideBackButtonForAnimation:1];
  [*(id *)(a1 + 40) _updateBackButtonVisibility];
  uint64_t v2 = *(void **)(a1 + 40);

  return [v2 layoutIfNeeded];
}

void sub_1000537D0(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

id sub_1000537DC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqualToArray:*(void *)(*(void *)(a1 + 40) + 48)];
  if ((result & 1) == 0) {
    id result = [*(id *)(a1 + 32) enumerateObjectsUsingBlock:&stru_1001AC478];
  }
  if (*(unsigned char *)(a1 + 48))
  {
    id v3 = *(void **)(a1 + 40);
    return [v3 _updateKeyboardFocusIfNeeded];
  }
  return result;
}

void sub_100053850(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

id sub_100053858(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldForciblyHideBackButtonForAnimation:0];
  [*(id *)(a1 + 32) _updateBackButtonVisibility];
  [*(id *)(*(void *)(a1 + 32) + 64) alpha];
  if (v2 == 1.0)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1000539EC;
    v13[3] = &unk_1001AAA90;
    v13[4] = *(void *)(a1 + 32);
    +[UIView performWithoutAnimation:v13];
  }
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = *(id *)(a1 + 40);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)v7), "setTranslatesAutoresizingMaskIntoConstraints:", 1, (void)v9);
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v14 count:16];
    }
    while (v5);
  }

  return [*(id *)(a1 + 32) _layoutButtonsWithViewForCenteringAtStart:0 includingBackButton:0];
}

id sub_1000539EC(uint64_t a1)
{
  double v2 = *(id **)(a1 + 32);
  id v3 = [v2[25] contentView];
  [v2 _centerBackButtonToView:v3];

  id v4 = *(void **)(a1 + 32);

  return [v4 layoutIfNeeded];
}

void sub_100053CC0(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

id sub_100053CCC(uint64_t a1)
{
  [*(id *)(a1 + 32) enumerateObjectsUsingBlock:&stru_1001AC4E0];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * (void)v6), "setTranslatesAutoresizingMaskIntoConstraints:", 1, (void)v8);
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  return [*(id *)(a1 + 40) _layoutButtonsWithViewForCenteringAtStart:*(void *)(a1 + 48) includingBackButton:1];
}

void sub_100053DDC(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

id sub_100053DE8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) enumerateObjectsUsingBlock:&stru_1001AC500];
  if (*(unsigned char *)(a1 + 48))
  {
    id v3 = *(void **)(a1 + 40);
    return [v3 _updateKeyboardFocusIfNeeded];
  }
  return result;
}

void sub_100053E40(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  if (([v4 isUserInteractionEnabled] & 1) == 0) {
    [v4 removeFromSuperview];
  }
}

void sub_100054F34(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) window];
  [v1 setAlpha:0.0];
}

uint64_t sub_100054F7C(uint64_t a1)
{
  [*(id *)(a1 + 32) bounds];
  AX_CGRectGetCenter();
  double v3 = v2;
  double v5 = v4;
  uint64_t v6 = [*(id *)(a1 + 32) window];
  objc_msgSend(*(id *)(a1 + 32), "convertPoint:toView:", 0, v3, v5);
  objc_msgSend(v6, "convertPoint:toWindow:", 0);
  double v8 = v7;
  double v10 = v9;

  long long v11 = +[HNDHandManager sharedManager];
  long long v12 = [*(id *)(a1 + 32) hardwareIdentifier];
  objc_msgSend(v11, "performFingerDownAtPoint:onDisplay:", v12, v8, v10);

  id v13 = +[HNDHandManager sharedManager];
  uint64_t v14 = [*(id *)(a1 + 32) hardwareIdentifier];
  objc_msgSend(v13, "performFingerUpAtPoint:onDisplay:", v14, v8, v10);

  return AXPerformBlockOnMainThreadAfterDelay();
}

id sub_1000550D8(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10005515C;
  v2[3] = &unk_1001AAA90;
  v2[4] = *(void *)(a1 + 32);
  return +[UIView animateWithDuration:v2 animations:0.15];
}

void sub_10005515C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) window];
  [v1 setAlpha:1.0];
}

id sub_100055BE8(uint64_t a1)
{
  double v2 = *(void **)(*(void *)(a1 + 32) + 224);
  double v3 = [*(id *)(a1 + 40) allValues];
  [v2 centerItems:v3 withView:*(void *)(a1 + 48)];

  if (*(unsigned char *)(a1 + 56)) {
    [*(id *)(a1 + 32) _centerBackButtonToView:*(void *)(a1 + 48)];
  }
  double v4 = *(void **)(a1 + 32);

  return [v4 layoutIfNeeded];
}

void sub_100055C68(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setAlpha:1.0];
  [*(id *)(a1 + 32) _updateRockerItemIfNeededForItem:v3];
  [v3 setUserInteractionEnabled:1];
}

void sub_100056234(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = v3;
  id v8 = v3;
  if (*(unsigned char *)(a1 + 32) && (v5 = [v3 showWithGuidedAccess], double v4 = v8, !v5))
  {
    uint64_t v7 = 1;
  }
  else if (*(unsigned char *)(a1 + 33))
  {
    unsigned int v6 = [v4 showWithAssistiveAccess];
    double v4 = v8;
    uint64_t v7 = v6 ^ 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  [v4 setHidden:v7];
}

void sub_1000562C4(id a1)
{
  v3[0] = AXAssistiveTouchIconTypeNotificationCenter;
  v3[1] = AXAssistiveTouchIconTypeControlCenter;
  v3[2] = AXAssistiveTouchIconTypeAppSwitcher;
  _OWORD v3[3] = AXAssistiveTouchIconTypeScreenshot;
  void v3[4] = AXAssistiveTouchIconTypeVoiceControl;
  void v3[5] = AXAssistiveTouchIconTypeDetectionMode;
  v3[6] = AXAssistiveTouchIconTypeWatchRemoteScreen;
  v3[7] = AXAssistiveTouchIconTypeBackgroundSounds;
  v3[8] = AXAssistiveTouchIconTypeLiveCaptions;
  v3[9] = AXAssistiveTouchIconTypeLiveSpeech;
  v3[10] = AXAssistiveTouchIconTypeNearbyDeviceControl;
  v3[11] = AXAssistiveTouchIconTypeCamera;
  v3[12] = AXAssistiveTouchIconTypeFrontFacingCamera;
  v3[13] = AXAssistiveTouchIconTypeTripleClick;
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:14];
  double v2 = (void *)qword_1001F0A78;
  qword_1001F0A78 = v1;
}

void sub_1000563F8(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    double v2 = (void *)qword_1001F0A78;
    id v3 = a2;
    id v4 = [v3 type];
    objc_msgSend(v3, "setDisabled:", objc_msgSend(v2, "containsObject:"));
  }
  else
  {
    id v4 = a2;
    [v4 setDisabled:0];
  }
}

void sub_100056484(id a1, UIView *a2, unint64_t a3, BOOL *a4)
{
}

BOOL sub_100056568(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [a2 tag];
  id v7 = (id)*(unsigned int *)(a1 + 32);
  if (v6 == v7) {
    *a4 = 1;
  }
  return v6 == v7;
}

id sub_1000577CC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 160) setImage:*(void *)(a1 + 40)];
}

id sub_1000577E0(uint64_t a1)
{
  CGAffineTransformMakeScale(&v5, 0.9, 0.9);
  double v2 = *(void **)(*(void *)(a1 + 32) + 160);
  CGAffineTransform v4 = v5;
  return [v2 setTransform:&v4];
}

id sub_100057844(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100057914;
  _OWORD v3[3] = &unk_1001AAA90;
  uint64_t v4 = *(void *)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100057960;
  v2[3] = &unk_1001AACE0;
  v2[4] = v4;
  return +[UIView animateWithDuration:0x20000 delay:v3 options:v2 animations:0.15 completion:0.0];
}

id sub_100057914(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 160);
  long long v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return [v1 setTransform:v4];
}

id sub_100057960(uint64_t a1)
{
  return [*(id *)(a1 + 32) _layoutForegroundImageView];
}

void sub_1000579A0(id a1)
{
  id v1 = +[AXPISystemActionHelper sharedInstance];
  [v1 activateVoiceControl];
}

void sub_100057A20(id a1)
{
  id v1 = +[AXPISystemActionHelper sharedInstance];
  [v1 activateSiri];
}

void sub_100057AA0(id a1)
{
  id v1 = +[AXPISystemActionHelper sharedInstance];
  [v1 activateTypeToSiri];
}

void sub_100057BC0(id a1, int64_t a2)
{
  if (!a2)
  {
    id v3 = +[AXPISystemActionHelper sharedInstance];
    [v3 activateTripleClick];
  }
}

void sub_100057C10(id a1)
{
  id v1 = +[AXPISystemActionHelper sharedInstance];
  [v1 activateTripleClick];
}

void sub_100057CA0(id a1)
{
  id v1 = dispatch_get_global_queue(25, 0);
  dispatch_async(v1, &stru_1001AC6F0);
}

void sub_100057CF0(id a1)
{
  id v1 = +[AXPISystemActionHelper sharedInstance];
  [v1 toggleNotificationCenter];
}

void sub_100057D80(id a1)
{
  id v1 = dispatch_get_global_queue(25, 0);
  dispatch_async(v1, &stru_1001AC730);
}

void sub_100057DD0(id a1)
{
  id v1 = +[AXPISystemActionHelper sharedInstance];
  [v1 toggleControlCenter];
}

void sub_100057E50(id a1)
{
  id v1 = +[AXPISystemActionHelper sharedInstance];
  [v1 takeScreenshot];
}

id sub_1000586B0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) showBannerWithText:a2];
}

void sub_10005875C(id a1, NSError *a2)
{
  if (a2) {
    _AXLogWithFacility();
  }
}

id sub_100058C84(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[HNDHandManager sharedManager];
  [v3 volumeLevel];
  objc_msgSend(v2, "showVolumeBar:withProgress:", 1);

  id result = [*(id *)(*(void *)(a1 + 32) + 184) isCancelled];
  if ((result & 1) == 0)
  {
    CGAffineTransform v5 = *(void **)(a1 + 32);
    return [v5 _updateVolumeDisplay];
  }
  return result;
}

id sub_100058FC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateRotationLockSwitch];
}

id sub_100059110(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateRingerSwitch];
}

id sub_100059394(uint64_t a1)
{
  return [*(id *)(a1 + 32) _menuExited];
}

id sub_100059550(uint64_t a1)
{
  return [*(id *)(a1 + 32) _menuExited];
}

void sub_100059A18(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

id sub_100059A24(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

void sub_100059EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
}

void sub_100059F38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _enableDockIconActivationMode:1];
}

void sub_100059F7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _enableDockIconActivationMode:2];
}

void sub_100059FC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _enableDockIconActivationMode:3];
}

void sub_10005A54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10005A588(uint64_t a1)
{
  [*(id *)(a1 + 32) _menuExited];
  id v2 = +[AXSpringBoardServer server];
  [v2 performMedusaGesture:*(void *)(a1 + 40)];
}

void sub_10005A5E8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _sideAppMorePressed:v3];
}

void sub_10005A890(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

id sub_10005AA94(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10005AB30;
  _OWORD v3[3] = &unk_1001AAA90;
  void v3[4] = *(void *)(a1 + 32);
  id result = +[UIView animateWithDuration:v3 animations:0.5];
  *(unsigned char *)(*(void *)(a1 + 32) + 148) = 1;
  return result;
}

id sub_10005AB30(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resetVisibility:0];
}

id sub_10005AC14(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resetVisibility:1];
}

void sub_10005B084(id a1, UIView *a2, unint64_t a3, BOOL *a4)
{
}

id sub_10005B090(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(unsigned char *)(v1 + 168))
  {
    id v2 = result;
    *(unsigned char *)(v1 + 168) = 1;
    [*((id *)result + 4) _setBackgroundWithType:0];
    [*((id *)v2 + 4) frame];
    CGRect v8 = CGRectIntegral(v7);
    double v3 = *((double *)v2 + 5);
    double v4 = *((double *)v2 + 6);
    objc_msgSend(*(id *)(*((void *)v2 + 4) + 200), "bounds", v8.origin.x, v8.origin.y, v8.size.width, v8.size.height);
    objc_msgSend(*((id *)v2 + 4), "setFrame:", v3, v4);
    [*((id *)v2 + 4) _layoutForegroundImageView];
    if (*((unsigned char *)v2 + 56)) {
      [*(id *)(*((void *)v2 + 4) + 160) setAlpha:1.0];
    }
    [*(id *)(*((void *)v2 + 4) + 48) enumerateObjectsUsingBlock:&stru_1001AC878];
    [*((id *)v2 + 4) _updateBackButtonVisibility];
    [*(id *)(*((void *)v2 + 4) + 224) centerItems:*(void *)(*((void *)v2 + 4) + 48)];
    CGAffineTransform v5 = (void *)*((void *)v2 + 4);
    return [v5 layoutIfNeeded];
  }
  return result;
}

void sub_10005B19C(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

id sub_10005B1A8(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) style];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v2 && !*(unsigned char *)(v3 + 96))
  {
    [*(id *)(v3 + 48) enumerateObjectsUsingBlock:&stru_1001AC898];
    [*(id *)(*(void *)(a1 + 32) + 48) removeAllObjects];
    uint64_t v3 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v3 + 148) = 1;
  if (*(unsigned char *)(a1 + 40)) {
    [*(id *)(a1 + 32) highlightNubbit];
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 168) = 0;
  double v4 = +[HNDHandManager sharedManager];
  [v4 setNubbitMoving:0];

  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0);
  CGAffineTransform v5 = *(void **)(a1 + 32);

  return [v5 _updateKeyboardFocusIfNeeded];
}

void sub_10005B288(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

void sub_10005B644(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

uint64_t sub_10005B650(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 168)) {
    return result;
  }
  uint64_t v2 = result;
  *(unsigned char *)(v1 + 168) = 1;
  AXPerformBlockOnMainThreadAfterDelay();
  [*(id *)(v2 + 32) _setBackgroundWithType:1];
  [*(id *)(v2 + 32) _layoutButtonsWithViewForCenteringAtStart:0 includingBackButton:1];
  [*(id *)(v2 + 32) frame];
  [*(id *)(*(void *)(v2 + 32) + 200) bounds];
  double v4 = v3;
  double v6 = v5;
  float v7 = *(double *)(v2 + 48) - v3 * 0.5;
  float v8 = *(double *)(v2 + 56) - v5 * 0.5;
  float v9 = roundf(v8);
  double v10 = [*(id *)(v2 + 32) displayManager];
  if ([v10 orientation] != 1)
  {

    goto LABEL_6;
  }
  int HasJindo = AXDeviceHasJindo();

  if (!HasJindo)
  {
LABEL_6:
    long long v12 = [*(id *)(v2 + 32) displayManager];
    [v12 safeAreaInsets];
    double v17 = v18;
    goto LABEL_7;
  }
  long long v12 = [*(id *)(v2 + 32) displayManager];
  [v12 foreheadRect];
  double v14 = v13;
  id v15 = [*(id *)(v2 + 32) displayManager];
  [v15 foreheadRect];
  double v17 = v14 + v16 + 9.0;

LABEL_7:
  float v19 = roundf(v7);
  double v20 = v9;

  uint64_t v21 = ASTLogCommon();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    double v34 = v17;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Safe Area: %f", buf, 0xCu);
  }

  if (v17 > v20)
  {
    uint64_t v22 = ASTLogCommon();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      double v34 = v17;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Menu is in safe area, moving down: %f", buf, 0xCu);
    }

    double v20 = v17;
  }
  objc_msgSend(*(id *)(v2 + 32), "setFrame:", v19, v20, v4, v6);
  [*(id *)(v2 + 32) layoutIfNeeded];
  [*(id *)(*(void *)(v2 + 32) + 160) setAlpha:0.0];
  [*(id *)(*(void *)(v2 + 32) + 160) frame];
  double v24 = v23;
  double v26 = v25;
  if ([*(id *)(*(void *)(v2 + 32) + 48) count] == (id)4) {
    uint64_t v27 = 2;
  }
  else {
    uint64_t v27 = [*(id *)(*(void *)(v2 + 32) + 48) count] != (id)6
  }
       && [*(id *)(*(void *)(v2 + 32) + 48) count] == (id)8;
  uint64_t v28 = [*(id *)(*(void *)(v2 + 32) + 48) objectAtIndex:v27];
  [v28 frame];
  double v30 = v29;
  double v32 = v31;

  objc_msgSend(*(id *)(*(void *)(v2 + 32) + 160), "setFrame:", v30, v32, v24, v26);
  return (*(uint64_t (**)(void))(*(void *)(v2 + 40) + 16))();
}

uint64_t sub_10005B9D4(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 168) = 0;
  return result;
}

void sub_10005B9E8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 168) = 0;
  [*(id *)(a1 + 32) _resetHoverCircleLocation];
  double v3 = _NSConcreteStackBlock;
  uint64_t v4 = 3221225472;
  double v5 = sub_10005BABC;
  double v6 = &unk_1001AB4B8;
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = v2;
  +[UIView animateWithDuration:&v3 animations:0.02];
  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0);
  objc_msgSend(*(id *)(a1 + 32), "_updateKeyboardFocusIfNeeded", v3, v4, v5, v6, v7);
}

uint64_t sub_10005BABC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 88) setAlpha:1.0];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_10005C9A4(uint64_t a1)
{
  uint64_t v2 = +[AXSpringBoardServer server];
  id v9 = [v2 visibleTripleClickItems];

  double v3 = AXUIAssistiveTouchStringForName();
  if ([v9 count] == (id)1)
  {
    uint64_t v4 = [v9 firstObject];
    uint64_t v5 = +[AXTripleClickHelpers titleForTripleClickOption:](AXTripleClickHelpers, "titleForTripleClickOption:", [v4 intValue]);
    double v6 = (void *)v5;
    if (v5) {
      uint64_t v7 = (void *)v5;
    }
    else {
      uint64_t v7 = v3;
    }
    id v8 = v7;

    double v3 = v8;
  }
  [*(id *)(*(void *)(a1 + 32) + 232) setTitle:v3];
}

void sub_10005CCA4(id a1)
{
  uint64_t v1 = +[UIScreen mainScreen];
  [v1 scale];
  CGFloat v3 = v2;
  v8.CGFloat width = 60.0;
  v8.CGFloat height = 60.0;
  UIGraphicsBeginImageContextWithOptions(v8, 0, v3);

  uint64_t v4 = +[UIColor clearColor];
  [v4 set];

  v9.origin.double x = 0.0;
  v9.origin.CGFloat y = 0.0;
  v9.size.CGFloat width = 60.0;
  v9.size.CGFloat height = 60.0;
  UIRectFill(v9);
  uint64_t v5 = UIGraphicsGetImageFromCurrentImageContext();
  double v6 = (void *)qword_1001F0A88;
  qword_1001F0A88 = v5;

  UIGraphicsEndImageContext();
}

void sub_10005D538(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 240));
  _Unwind_Resume(a1);
}

void sub_10005D564(uint64_t a1, uint64_t a2, void *a3)
{
  CGFloat v3 = (id *)(a1 + 32);
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained _traitCollectionDidChange:v4];
}

id sub_10005D958(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateImage];
}

void sub_10005DFC0(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = (id *)(a1 + 32);
  objc_storeStrong((id *)(v6 + 144), a2);
  if (v4)
  {
    [*v5 _updateImageView];
  }
  else
  {
    uint64_t v7 = ASTLogCommon();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100114A90((uint64_t)v5, v7);
    }
  }
}

void sub_10005E04C(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = (id *)(a1 + 32);
  objc_storeStrong((id *)(v6 + 152), a2);
  if (v4)
  {
    [*v5 _updateImageView];
  }
  else
  {
    uint64_t v7 = ASTLogCommon();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100114A90((uint64_t)v5, v7);
    }
  }
}

uint64_t sub_10005E290(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005E2A4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _deviceSpecificImageForName:*(void *)(a1 + 40) screenHeight:*(double *)(a1 + 64)];
  CGFloat v3 = [v2 imageWithTintColor:*(void *)(a1 + 48) renderingMode:1];

  id v4 = *(void **)(a1 + 56);
  if (v4)
  {
    id v6 = v4;
    id v5 = v3;
    AXPerformBlockAsynchronouslyOnMainThread();
  }
}

uint64_t sub_10005E37C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10005F45C(uint64_t a1)
{
  double v1 = 1.0;
  if (!*(unsigned char *)(a1 + 48)) {
    double v1 = *(double *)(a1 + 40);
  }
  return [*(id *)(a1 + 32) setAlpha:v1];
}

BOOL sub_10005FF30(SCATCursorLayer *self, SEL a2)
{
  return self->_isSimpleRect;
}

id sub_100060DBC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _performPress:*(void *)(a1 + 40) numberOfPresses:*(void *)(a1 + 48) - 1];
}

id sub_100060DD0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _performPress:*(void *)(a1 + 40) numberOfPresses:*(void *)(a1 + 48) - 1];
}

id sub_1000613B0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) handleHIDEvent:a2];
}

id sub_1000613BC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) updateMouseService:a2];
}

void sub_100061690(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000616B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateAXMouse];
}

void sub_1000616F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateSensitivityMultiplier];
}

void sub_100061E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100061E34(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained canUseMainKeyboardKeysPreferenceDidChange];
}

void sub_1000628A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000628C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained repeatMouseKeyMovementAction:*(void *)(a1 + 40)];
}

void sub_100062A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100062A60(uint64_t a1)
{
  double v2 = *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  CGFloat v3 = +[AXSettings sharedInstance];
  double v4 = (double)(uint64_t)[v3 assistiveTouchMouseKeysMaxSpeed];

  if (v2 < v4) {
    *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(double *)(*(void *)(*(void *)(a1 + 32) + 8)
  }
                                                                            + 24)
                                                                + 1.0;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained movePointerWithMouseKeyAction:*(void *)(a1 + 48) increment:*(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
}

void sub_100063348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100063360(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
}

void sub_1000633B4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
}

void sub_100063AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100063B10()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1001F0AB0;
  uint64_t v7 = qword_1001F0AB0;
  if (!qword_1001F0AB0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100064E38;
    _OWORD v3[3] = &unk_1001AC038;
    void v3[4] = &v4;
    sub_100064E38((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100063BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100064390(_Unwind_Exception *a1)
{
  objc_destroyWeak(v7);
  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v8 - 112));
  _Unwind_Resume(a1);
}

void sub_1000643F4()
{
}

void sub_1000643FC()
{
}

void sub_100064404()
{
}

void sub_10006440C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _sendEventForButtonNumber:1 value:a3];
}

void sub_100064460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _sendEventForButtonNumber:2 value:a3];
}

void sub_1000644B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _sendEventForButtonNumber:3 value:a3];
}

void sub_100064508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _sendEventForButtonNumber:4 value:a3];
}

void sub_10006455C(uint64_t a1, float a2, float a3)
{
  id v5 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  *(float *)&double v7 = a2;
  [WeakRetained setCurrentLeftXDisplacement:v7];

  id v9 = objc_loadWeakRetained(v5);
  *(float *)&double v8 = a3;
  [v9 setCurrentLeftYDisplacement:v8];
}

void sub_1000645D4(uint64_t a1, float a2, float a3)
{
  id v5 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  *(float *)&double v7 = a2;
  [WeakRetained setCurrentRightXDisplacement:v7];

  id v9 = objc_loadWeakRetained(v5);
  *(float *)&double v8 = a3;
  [v9 setCurrentRightYDisplacement:v8];
}

void sub_10006464C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _toggleIgnoreInputs];
  }
}

void *sub_100064C2C(uint64_t a1)
{
  double v2 = (void *)sub_100064C7C();
  id result = dlsym(v2, "GCControllerDidConnectNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F0A98 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100064C7C()
{
  v2[0] = 0;
  if (!qword_1001F0AA0)
  {
    v2[1] = _NSConcreteStackBlock;
    v2[2] = (void *)3221225472;
    v2[3] = sub_100064D74;
    v2[4] = &unk_1001AC070;
    void v2[5] = v2;
    long long v3 = off_1001ACB70;
    uint64_t v4 = 0;
    qword_1001F0AA0 = _sl_dlopen();
  }
  uint64_t v0 = qword_1001F0AA0;
  if (!qword_1001F0AA0) {
    sub_100114CA0(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t sub_100064D74()
{
  uint64_t result = _sl_dlopen();
  qword_1001F0AA0 = result;
  return result;
}

void *sub_100064DE8(uint64_t a1)
{
  double v2 = (void *)sub_100064C7C();
  uint64_t result = dlsym(v2, "GCControllerDidBecomeCurrentNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001F0AA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_100064E38(uint64_t a1)
{
  sub_100064C7C();
  Class result = objc_getClass("GCController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100114D20();
  }
  qword_1001F0AB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100065338(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) orbPreviewWindow];
  [*(id *)(a1 + 32) setAxOrbPreviewWindow:v2];

  id v4 = [*(id *)(a1 + 32) axOrbPreviewWindow];
  long long v3 = [v4 uiElement];
  [v3 updateCacheWithAttributes:&off_1001BB9D0];
}

BOOL sub_100065744(id a1, AXElement *a2)
{
  double v2 = a2;
  [(AXElement *)v2 updateCache:3010];
  long long v3 = [(AXElement *)v2 uiElement];

  LOBYTE(v2) = [v3 BOOLWithAXAttribute:3010];
  return (char)v2;
}

void sub_100065ABC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) elementFetcher];
  objc_msgSend(v2, "setEnabled:", objc_msgSend(*(id *)(a1 + 32), "_elementFetchingRequired"));
}

void sub_100065B1C(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v4 = [v2 elementFetcher];
  id v3 = [v2 _elementFetchingRequired];

  [v4 setEnabled:v3];
}

void sub_100065DBC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_100065DD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (![v3 isValid]) {
    goto LABEL_14;
  }
  if (WeakRetained
    && [WeakRetained _isSpeechEnabled]
    && ([v3 accessibilityRespondsToUserInteraction] & 1) == 0)
  {
    id v39 = v3;
    _AXAssert();
  }
  objc_msgSend(v3, "scatFrame", v39);
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  if (!_AXSMossdeepEnabled())
  {
    double v14 = -[HNDHandManager screenFrame:]_0();
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    if (WeakRetained)
    {
      uint64_t v21 = (void *)WeakRetained[16];
      uint64_t v22 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v3 windowDisplayId]);
      double v23 = [v21 objectForKey:v22];

      objc_msgSend(v23, "convertFrameToInterfaceOrientation:", v6, v8, v10, v12);
      double v6 = v24;
      double v8 = v25;
      double v10 = v26;
      double v12 = v27;
      if (v23)
      {
        [v23 screenBounds];
        double v14 = v28;
        CGFloat v16 = v29;
        CGFloat v18 = v30;
        CGFloat v20 = v31;
      }
    }
    v43.origin.CGFloat x = v14;
    v43.origin.CGFloat y = v16;
    v43.size.CGFloat width = v18;
    v43.size.CGFloat height = v20;
    v48.origin.CGFloat x = v6;
    v48.origin.CGFloat y = v8;
    v48.size.CGFloat width = v10;
    v48.size.CGFloat height = v12;
    CGRect v44 = CGRectIntersection(v43, v48);
    CGFloat x = v44.origin.x;
    CGFloat y = v44.origin.y;
    CGFloat width = v44.size.width;
    CGFloat height = v44.size.height;
    double v40 = CGRectGetWidth(v44);
    v45.origin.CGFloat x = x;
    v45.origin.CGFloat y = y;
    v45.size.CGFloat width = width;
    v45.size.CGFloat height = height;
    double v36 = v40 * CGRectGetHeight(v45);
    v46.origin.CGFloat x = v6;
    v46.origin.CGFloat y = v8;
    v46.size.CGFloat width = v10;
    v46.size.CGFloat height = v12;
    double v37 = CGRectGetWidth(v46);
    v47.origin.CGFloat x = v6;
    v47.origin.CGFloat y = v8;
    v47.size.CGFloat width = v10;
    v47.size.CGFloat height = v12;
    if (v36 / (v37 * CGRectGetHeight(v47)) >= 0.8)
    {
      uint64_t v13 = [*(id *)(a1 + 32) _isElementInIgnoredTouchRegions:v3] ^ 1;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  v41.origin.CGFloat x = v6;
  v41.origin.CGFloat y = v8;
  v41.size.CGFloat width = v10;
  v41.size.CGFloat height = v12;
  if (CGRectGetWidth(v41) <= 0.0)
  {
LABEL_14:
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  v42.origin.CGFloat x = v6;
  v42.origin.CGFloat y = v8;
  v42.size.CGFloat width = v10;
  v42.size.CGFloat height = v12;
  uint64_t v13 = CGRectGetHeight(v42) > 0.0;
LABEL_15:

  return v13;
}

void sub_1000660C4(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = qword_1001F0AB8;
  qword_1001F0AB8 = v1;

  _objc_release_x1(v1, v2);
}

void sub_100066F90(void *a1)
{
  [a1 _handleSystemServerDied];
}

void sub_100066FD4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  [v1 _handleSystemServerDied];
}

void sub_100067018(int a1, int a2, int a3, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10006AFAC;
  v6[3] = &unk_1001AAFD0;
  int v7 = a3;
  void v6[4] = cf;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
}

void sub_100067274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1000672A4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) ignoredTouchRegions];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 count] != 0;
}

void sub_100067308(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = objc_msgSend(*(id *)(a1 + 32), "ignoredTouchRegions", 0);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        if (CGPathContainsPoint(*(CGPathRef *)(*((void *)&v7 + 1) + 8 * i), 0, *(CGPoint *)(a1 + 48), 0))
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1000674D4(uint64_t a1)
{
  id v2 = (__AXObserver *)[*(id *)(a1 + 32) observer];
  id v3 = +[AXElement systemWideElement];
  id v4 = [v3 uiElement];
  uint64_t v5 = (const __AXUIElement *)[v4 axElement];

  double v6 = +[AXElement systemWideElement];
  [v6 setPassivelyListeningForEvents:1];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v7 = *(id *)(a1 + 40);
  id v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v20;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(v7);
        }
        double v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        CFStringRef v13 = (const __CFString *)[v12 intValue];
        double v14 = [*(id *)(a1 + 32) currentlyObservingNotifications];
        LOBYTE(v12) = [v14 containsObject:v12];

        if ((v12 & 1) == 0)
        {
          uint64_t v18 = AXObserverAddNotification(v2, v5, v13, *(void **)(a1 + 32));
          LOBYTE(v17) = 1;
          _AXLogWithFacility();
          uint64_t v15 = [*(id *)(a1 + 32) currentlyObservingNotifications:v17, @"Registered for notification: %d, observer:%@. error: %ld", v13, v2, v18];
          CGFloat v16 = +[NSNumber numberWithInt:v13];
          [v15 addObject:v16];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v9);
  }
}

void sub_1000677A0(uint64_t a1)
{
  id v2 = (__AXObserver *)[*(id *)(a1 + 32) observer];
  id v3 = +[AXElement systemWideElement];
  id v4 = [v3 uiElement];
  uint64_t v5 = (const __AXUIElement *)[v4 axElement];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = *(id *)(a1 + 40);
  id v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v20;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v6);
        }
        double v11 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v10);
        double v12 = objc_msgSend(*(id *)(a1 + 32), "currentlyObservingNotifications", v15, v16, v17, v18, (void)v19);
        unsigned int v13 = [v12 containsObject:v11];

        if (v13)
        {
          CFStringRef v17 = (const __CFString *)[v11 intValue];
          uint64_t v18 = AXObserverRemoveNotification(v2, v5, v17);
          CFStringRef v16 = @"Unregistered for notification: %d, error: %ld";
          LOBYTE(v15) = 1;
          _AXLogWithFacility();
        }
        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v8);
  }

  double v14 = [*(id *)(a1 + 32) currentlyObservingNotifications];
  [v14 removeObjectsInArray:*(void *)(a1 + 40)];
}

void sub_100067BB4(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100067BC8(uint64_t a1, uint64_t a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100067C40;
  v2[3] = &unk_1001AB908;
  v2[4] = *(void *)(a1 + 32);
  void v2[5] = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
}

id *sub_100067C40(id *result)
{
  if (result[5] == (id)3)
  {
    uint64_t v1 = result;
    id v2 = [result[4] elementFetcher];
    [v2 fetchEventOccurred:2];

    id v3 = +[NSDate date];
    [v1[4] setLastAppTransitionTime:v3];

    id v4 = v1[4];
    return (id *)[v4 _handleRefreshEvent:4 data:0];
  }
  return result;
}

void sub_100067CD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100067D70;
  v5[3] = &unk_1001AAC78;
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);
}

id sub_100067D70(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setSpringboardActionIdentifier:*(void *)(a1 + 40)];
}

id sub_100067E30(uint64_t a1)
{
  return [*(id *)(a1 + 32) _initializeAccessibility];
}

BOOL sub_100067FA0(id a1, AXGroupable *a2)
{
  return [(AXGroupable *)a2 isGroup] ^ 1;
}

void sub_100069554(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))()) {
    [*(id *)(a1 + 32) addObject:v3];
  }
}

void sub_1000698BC(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [v5 scrollAncestorForScrollAction:*(unsigned int *)(a1 + 48)];
  if (v3)
  {
    id v4 = v3;
    if (([*(id *)(a1 + 32) containsObject:v3] & 1) == 0)
    {
      [*(id *)(a1 + 32) addObject:v4];
      [*(id *)(a1 + 40) addObject:v5];
    }
  }
}

BOOL sub_100069D1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 scatIsAXElement])
  {
    [v3 frame];
    CGFloat v5 = v4;
    CGFloat v7 = v6;
    CGFloat v9 = v8;
    CGFloat v11 = v10;
    [*(id *)(a1 + 32) frame];
    v19.origin.CGFloat x = v12;
    v19.origin.CGFloat y = v13;
    v19.size.CGFloat width = v14;
    v19.size.CGFloat height = v15;
    v18.origin.CGFloat x = v5;
    v18.origin.CGFloat y = v7;
    v18.size.CGFloat width = v9;
    v18.size.CGFloat height = v11;
    BOOL v16 = CGRectEqualToRect(v18, v19);
  }
  else
  {
    BOOL v16 = 0;
  }

  return v16;
}

BOOL sub_100069E64(id a1, AXElement *a2)
{
  return [(AXElement *)a2 isKeyboardKey];
}

id sub_10006A7E0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setIgnoredTouchRegions:*(void *)(a1 + 40)];
}

void sub_10006AFAC(uint64_t a1)
{
  id v2 = +[HNDAccessibilityManager sharedManager];
  id v3 = v2;
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 <= 1028)
  {
    switch(v4)
    {
      case 1000:
        [v2 _handleScreenChanged:*(void *)(a1 + 32)];
        break;
      case 1001:
        [v2 _handleLayoutChanged:*(void *)(a1 + 32)];
        break;
      case 1004:
        [v2 _handleScreenLocked];
        break;
      case 1005:
        [v2 _handleValueChanged];
        break;
      case 1006:
        [v2 _handleAlertAppeared];
        break;
      case 1008:
        [v2 _handleAnnouncementNotification:*(void *)(a1 + 32)];
        break;
      case 1009:
        [v2 _handleElementScrolledByPage];
        break;
      case 1011:
        [v2 _handleOrientationChanged];
        break;
      case 1018:
        [v2 _handleFirstResponderChanged];
        break;
      case 1021:
        [v2 _handlePidStatusChanged];
        break;
      default:
        goto LABEL_30;
    }
    goto LABEL_30;
  }
  if (v4 <= 1043)
  {
    switch(v4)
    {
      case 1029:
        [v2 _handleKeyboardPopupAppeared];
        goto LABEL_30;
      case 1033:
        id v5 = *(id *)(a1 + 32);
        CGFloat v9 = [v5 objectForKeyedSubscript:kAXNotificationDataKey];
        unsigned int v10 = [v9 isEqualToString:UIAccessibilityNotificationSwitchControlIdentifier];

        if (!v10)
        {
LABEL_26:

          goto LABEL_30;
        }
        double v8 = [v5 objectForKeyedSubscript:kAXPidKey];
        objc_msgSend(v3, "_handlePauseForPid:", objc_msgSend(v8, "intValue"));
        break;
      case 1034:
        id v5 = *(id *)(a1 + 32);
        double v6 = [v5 objectForKeyedSubscript:kAXNotificationDataKey];
        unsigned int v7 = [v6 isEqualToString:UIAccessibilityNotificationSwitchControlIdentifier];

        if (!v7) {
          goto LABEL_26;
        }
        double v8 = [v5 objectForKeyedSubscript:kAXPidKey];
        objc_msgSend(v3, "_handleResumeForPid:", objc_msgSend(v8, "intValue"));
        break;
      default:
        goto LABEL_30;
    }

    goto LABEL_26;
  }
  switch(v4)
  {
    case 1044:
      [v2 _handleElementVisualsUpdated];
      break;
    case 1045:
      [v2 updateCachedOrbPreviewWindow:*(void *)(a1 + 32)];
      break;
    case 1078:
      [v2 _handleKeyboardFocusChanged];
      break;
  }
LABEL_30:

  CGFloat v11 = *(const void **)(a1 + 32);
  if (v11)
  {
    CFRelease(v11);
  }
}

void sub_10006B238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(exception_object);
    _AXLogWithFacility();

    objc_end_catch();
    JUMPOUT(0x10006B1F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_10006BCEC(uint64_t a1, void *a2, uint64_t a3)
{
  id v19 = a2;
  id v5 = objc_msgSend(@"recipe_", "stringByAppendingFormat:", @"%lu", a3);
  uint64_t v6 = *(void *)(a1 + 32);
  unsigned int v7 = [v19 name];
  double v8 = +[SCATModernMenuItem itemWithIdentifier:v5 delegate:v6 title:v7 imageName:0 activateBehavior:0];

  CGFloat v9 = [v19 menuIconIdentifier];
  LODWORD(v5) = [v9 isEqualToString:AXSwitchRecipeMenuIconIdentifierCenterTap];

  if (v5)
  {
    CFStringRef v10 = @"SCATIcon_recipe_tapMiddleOfScreen";
LABEL_9:
    [v8 setImageName:v10];
    goto LABEL_10;
  }
  id v11 = [v19 menuIconIdentifier];
  unsigned int v12 = [v11 isEqualToString:AXSwitchRecipeMenuIconIdentifierTurnPages];

  if (v12)
  {
    CFStringRef v10 = @"SCATIcon_action_scrollRight";
    goto LABEL_9;
  }
  CGFloat v13 = [v19 menuIconIdentifier];
  unsigned int v14 = [v13 isEqualToString:AXSwitchRecipeMenuIconIdentifierTapPoint];

  if (v14)
  {
    CFStringRef v10 = @"SCATIcon_recipe_tapPoint";
    goto LABEL_9;
  }
  CGFloat v15 = [v19 menuIconIdentifier];
  unsigned int v16 = [v15 isEqualToString:AXSwitchRecipeMenuIconIdentifierHoldPoint];

  if (v16)
  {
    CFStringRef v10 = @"SCATIcon_recipe_holdPoint";
    goto LABEL_9;
  }
  CFStringRef v17 = [v19 name];
  CGRect v18 = +[UIImage scat_singleCharacterImageForTitle:v17 charactersInUse:*(void *)(a1 + 40)];
  [v8 setImage:v18];

LABEL_10:
  [*(id *)(a1 + 48) addObject:v8];
}

void sub_10006C1F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) menu];
  id v3 = [v2 currentSheet];
  [v3 reload];

  int v4 = [*(id *)(a1 + 32) menu];
  [v4 reloadFromCurrentSheet];

  id v5 = +[SCATScannerManager sharedManager];
  [v5 beginScanningWithFocusContext:0];
}

id sub_10006C738(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isInputCoalesceEnabled])
  {
    double v2 = CACurrentMediaTime();
    [*(id *)(a1 + 32) timeIntervalBetweenDidSendActions];
    double v4 = v3;
    id result = [*(id *)(a1 + 32) timeIntervalSinceDidSendAction];
    if (v2 - v6 <= v4) {
      return result;
    }
    [*(id *)(a1 + 32) setTimeIntervalSinceDidSendAction:v2];
  }
  unsigned int v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);

  return [v7 _sendActionWithIdentifier:v8];
}

void sub_10006CB8C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

id sub_10006CBA8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) inputController:*(void *)(a1 + 40) didReceiveRecipeActionForMappingAtIndex:*(void *)(a1 + 48) isLongPressAction:*(unsigned __int8 *)(a1 + 56)];
}

id sub_10006CBBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) inputController:*(void *)(a1 + 40) didReceiveAction:*(void *)(a1 + 48)];
}

void sub_10006CBCC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _sendActionWithIdentifier:*(void *)(a1 + 32)];
}

id sub_10006DAF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _hideAlertForMotionTrackerInputSource];
}

void sub_10006DB00(uint64_t a1)
{
  [*(id *)(a1 + 32) motionTrackerErrorCode];
  AXSSHumanReadableDescriptionForMotionTrackingErrorCode();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) _showAlert:v2 forSource:1];
}

void sub_10006FE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Block_object_dispose((const void *)(v32 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_10006FE88(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = [v3 source];
  if ([v3 hasSelectAction])
  {
    uint64_t v5 = 1;
  }
  else
  {
    double v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
    unsigned int v7 = [v6 firstObject];
    uint64_t v5 = (uint64_t)[v7 BOOLValue];
  }
  if ([v3 hasStepAction])
  {
    uint64_t v8 = 1;
  }
  else
  {
    CGFloat v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:v4];
    CFStringRef v10 = [v9 lastObject];
    uint64_t v8 = (uint64_t)[v10 BOOLValue];
  }
  id v11 = +[NSNumber numberWithBool:v5];
  v14[0] = v11;
  unsigned int v12 = +[NSNumber numberWithBool:v8];
  v14[1] = v12;
  CGFloat v13 = +[NSArray arrayWithObjects:v14 count:2];
  [*(id *)(a1 + 32) setObject:v13 forKeyedSubscript:v4];

  if (v5) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  if (v8) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  if ([v4 isEqualToString:SCATSwitchSourceScreen]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
}

id sub_100070484(uint64_t a1)
{
  [*(id *)(a1 + 32) _hideAlerts];
  [*(id *)(a1 + 32) _removeInputSources];
  id v2 = *(void **)(a1 + 32);

  return _[v2 _removeInputTimers];
}

void sub_100070B70(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

id sub_100070BBC(uint64_t a1)
{
  [*(id *)(a1 + 32) setValid:1];
  [*(id *)(a1 + 32) _updateTimeIntervalBeforeSendAction];
  [*(id *)(a1 + 32) _updateIsInputHoldEnabled];
  [*(id *)(a1 + 32) _updateTimeIntervalBeforeSendRepeatAction];
  [*(id *)(a1 + 32) _updateIsInputRepeatEnabled];
  [*(id *)(a1 + 32) _updateTimeIntervalBetweenDidSendActions];
  [*(id *)(a1 + 32) _updateIsInputCoalesceEnabled];
  [*(id *)(a1 + 32) _updateInputSources];
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _setupInputTimers];
}

void sub_100070C34(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_100070CBC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100070CD0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateTimeIntervalBeforeSendAction];
}

void sub_100070D10(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_100070D98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100070DAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateIsInputHoldEnabled];
}

void sub_100070DEC(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_100070E74(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100070E88(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateTimeIntervalBeforeSendRepeatAction];
}

void sub_100070EC8(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_100070F50(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100070F64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateIsInputRepeatEnabled];
}

void sub_100070FA4(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_10007102C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100071040(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateTimeIntervalBetweenDidSendActions];
}

void sub_100071080(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_100071108(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10007111C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateIsInputCoalesceEnabled];
}

void sub_10007115C(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_1000711E4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000711F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateInputSources];
}

void sub_100071238(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_1000712C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000712D4(uint64_t a1)
{
  id v5 = +[AXSettings sharedInstance];
  if (([v5 switchControlUseCameraForPointMode] & 1) == 0)
  {
    uint64_t v2 = (id *)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained(v2);
    unsigned int v4 = [WeakRetained motionTrackingEnabled];

    if (!v4) {
      return;
    }
    id v5 = objc_loadWeakRetained(v2);
    [v5 setMotionTrackingEnabled:0];
  }
}

void sub_100071384(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_10007140C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100071420(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v3 = [WeakRetained motionTrackingEnabled];

  if (v3)
  {
    id v7 = +[AXSettings sharedInstance];
    id v4 = [v7 switchControlCameraPointPickerMode];
    id v5 = objc_loadWeakRetained(v1);
    double v6 = [v5 motionTrackerInputSource];
    [v6 setMotionTrackingMode:v4];
  }
}

void sub_1000714D8(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_100071560(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100071574(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v3 = [WeakRetained motionTrackingEnabled];

  if (v3)
  {
    id v8 = +[AXSettings sharedInstance];
    [v8 switchControlCameraPointPickerSensitivity];
    double v5 = v4;
    id v6 = objc_loadWeakRetained(v1);
    id v7 = [v6 motionTrackerInputSource];
    [v7 setSensitivity:v5];
  }
}

void sub_100071638(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  AXPerformBlockAsynchronouslyOnMainThread();
  objc_destroyWeak(&v1);
}

void sub_1000716C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000716D4(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v3 = [WeakRetained motionTrackingEnabled];

  if (v3)
  {
    id v8 = +[AXSettings sharedInstance];
    [v8 switchControlCameraPointPickerMovementToleranceInJoystickMode];
    double v5 = v4;
    id v6 = objc_loadWeakRetained(v1);
    id v7 = [v6 motionTrackerInputSource];
    [v7 setJoystickModeMovementThreshold:v5];
  }
}

id sub_100071798(uint64_t a1, void *a2)
{
  if (a2) {
    return [a2 performSelector:"_updateMotionTrackingForOneness" withObject:0 afterDelay:0.0];
  }
  return result;
}

id sub_100071A2C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unsigned int v3 = [a2 uuid];
  id v4 = [v2 containsObject:v3];

  return v4;
}

BOOL sub_100071A74(id a1, AXSwitch *a2, BOOL *a3)
{
  return [(AXSwitch *)a2 isEnabled];
}

void sub_100071C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100071CA0(uint64_t a1, void *a2, unsigned char *a3)
{
  id v8 = a2;
  double v5 = [v8 source];
  unsigned int v6 = [v5 isEqual:*(void *)(a1 + 32)];

  if (v6)
  {
    if (!*(void *)(a1 + 40)
      || (unsigned int v7 = [v8 isEnabled],
          v7 == [*(id *)(a1 + 40) BOOLValue]))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      *a3 = 1;
    }
  }
}

void sub_100073BC8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) menu];
  [v2 didTransitionToSheet:*(void *)(a1 + 40)];
}

void sub_100073E6C(id a1, SCATMenuSheetViewController *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  [(SCATMenuSheetViewController *)v4 willMoveToParentViewController:0];
  [(SCATMenuSheetViewController *)v4 removeFromParentViewController];
}

BOOL sub_100073EB4(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 sheet];
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

BOOL sub_100074038(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 sheet];
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void sub_1000743C8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) menu];
  [v2 didTransitionToSheet:*(void *)(a1 + 40)];
}

int64_t sub_100075AA8(id a1, NSIndexPath *a2, NSIndexPath *a3)
{
  BOOL v4 = a3;
  NSInteger v5 = [(NSIndexPath *)a2 item];
  id v6 = [(NSIndexPath *)v4 item];

  int64_t v7 = -1;
  if (v5 >= (uint64_t)v6) {
    int64_t v7 = 1;
  }
  if ((id)v5 == v6) {
    return 0;
  }
  else {
    return v7;
  }
}

id sub_100075B04(id a1, SCATMenuItemCell *a2, unint64_t a3)
{
  unsigned int v3 = [(SCATMenuItemCell *)a2 menuItem];
  BOOL v4 = [v3 scatElement];

  return v4;
}

id sub_10007605C(id a1, SCATMenuItemCell *a2, unint64_t a3)
{
  unsigned int v3 = [(SCATMenuItemCell *)a2 menuItem];
  BOOL v4 = [v3 scatElement];

  return v4;
}

id sub_1000760AC(id a1, SCATMenuItemCell *a2, unint64_t a3)
{
  unsigned int v3 = [(SCATMenuItemCell *)a2 menuItem];
  BOOL v4 = [v3 scatElement];

  return v4;
}

BOOL sub_1000764B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    BOOL v4 = [v3 menuItem];
    BOOL v5 = v4 == *(void **)(a1 + 32);
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

id sub_100076A78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) screenInputSource:*(void *)(a1 + 40) didReceiveActionWithIdentifier:*(void *)(a1 + 48) start:*(unsigned __int8 *)(a1 + 56) ignoreInputHold:*(unsigned __int8 *)(a1 + 57)];
}

void sub_100076FB4(void **a1, void *a2)
{
  id v12 = a2;
  id v3 = [v12 source];
  unsigned int v4 = [v3 isEqualToString:SCATSwitchSourceScreen];

  if (v4)
  {
    if (a1[4])
    {
      BOOL v5 = objc_opt_new();
      id v6 = objc_opt_new();
      SCATGetActionIdentifiersForRecipeAndSwitch(a1[4], v12, v5, v6);
      [a1[5] setObject:v5 forKeyedSubscript:@"SwitchActionTypeNormal"];
      if ([v6 action]) {
        [a1[5] setObject:v6 forKeyedSubscript:@"SwitchActionTypeLongPress"];
      }
    }
    else
    {
      if (([v12 hasLongPressAction] & 1) != 0
        || ([v12 longPressShortcutIdentifier],
            int64_t v7 = objc_claimAutoreleasedReturnValue(),
            v7,
            v7))
      {
        id v8 = objc_opt_new();
        objc_msgSend(v8, "setAction:", objc_msgSend(v12, "longPressAction"));
        CGFloat v9 = [v12 longPressShortcutIdentifier];
        [v8 setShortcutIdentifier:v9];

        [a1[5] setObject:v8 forKeyedSubscript:@"SwitchActionTypeLongPress"];
      }
      BOOL v5 = objc_opt_new();
      objc_msgSend(v5, "setAction:", objc_msgSend(v12, "action"));
      CFStringRef v10 = [v12 shortcutIdentifier];
      [v5 setShortcutIdentifier:v10];

      [a1[5] setObject:v5 forKeyedSubscript:@"SwitchActionTypeNormal"];
    }

    id v11 = [v12 name];
    [a1[6] setSwitchDisplayName:v11];
  }
}

void sub_100078B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 128));
  _Unwind_Resume(a1);
}

void sub_100078BE0(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained delegate];
  id v3 = objc_loadWeakRetained(v1);
  [v2 scrollContainer:v3 scrollInDirection:0];
}

void sub_100078C58(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained delegate];
  id v3 = objc_loadWeakRetained(v1);
  [v2 scrollContainer:v3 scrollInDirection:1];
}

void sub_100078CD0(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained delegate];
  id v3 = objc_loadWeakRetained(v1);
  [v2 scrollContainer:v3 scrollInDirection:2];
}

void sub_100078D48(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained delegate];
  id v3 = objc_loadWeakRetained(v1);
  [v2 scrollContainer:v3 scrollInDirection:3];
}

void sub_100079ABC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100079AF4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained clearCachedCustomizableMouse];
}

void sub_100079B34(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateSensitivityMultiplier];
}

id sub_100079B74(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v5 = [WeakRetained handleEventRepresentationFromFilter:v3];

  return v5;
}

BOOL sub_100079D5C(uint64_t a1, void *a2)
{
  return [a2 displayID] == *(_DWORD *)(a1 + 32);
}

void sub_100079DD4(id a1, HNDEventPointerStreamData *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(HNDEventPointerStreamData *)a2 pointerStream];
  [v4 invalidate];
}

void sub_10007A588(uint64_t a1)
{
  [*(id *)(a1 + 32) creatorHIDEvent];
  uint64_t v2 = BKSHIDEventGetBaseAttributes();
  if ([*(id *)(a1 + 32) creatorHIDEvent])
  {
    [*(id *)(a1 + 32) creatorHIDEvent];
    id v3 = BKSHIDEventGetPointerAttributes();
  }
  else
  {
    id v3 = 0;
  }
  objc_msgSend(*(id *)(a1 + 40), "setCurrentAbsoluteSystemPointerPoint:withAttributes:pointerAttributes:", v2, v3, *(double *)(a1 + 56), *(double *)(a1 + 64));
  id v4 = [*(id *)(a1 + 40) _localDataForAttributes:v2];
  id v5 = +[AXBackBoardServer server];
  objc_msgSend(v5, "convertPoint:fromContextId:displayId:", objc_msgSend(v4, "contextID"), objc_msgSend(v4, "displayID"), *(double *)(a1 + 56), *(double *)(a1 + 64));
  double v7 = v6;
  double v9 = v8;

  CFStringRef v10 = [v2 display];
  uint64_t v11 = [v10 safeStringForKey:@"_hardwareIdentifier"];

  id v12 = +[HNDHandManager sharedManager];
  CGFloat v13 = [v12 displayManagerForHardwareIdentifier:v11];
  objc_msgSend(v13, "convertPointToIntefaceOrientation:", v7, v9);
  double v15 = v14;
  double v17 = v16;

  CGRect v18 = objc_alloc_init(HNDEvent);
  id v19 = [*(id *)(a1 + 48) scrollEvent];
  if (v19) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 3;
  }
  [(HNDEvent *)v18 setType:v20];

  -[HNDEvent setLocation:](v18, "setLocation:", v15, v17);
  [(HNDEvent *)v18 setHardwareIdentifier:v11];
  long long v21 = v18;
  AXPerformBlockAsynchronouslyOnMainThread();
}

id sub_10007A7B4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setCurrentSystemPointerPoint:", *(double *)(a1 + 48), *(double *)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 informDelegatesOfEvent:v3];
}

id sub_10007A8F0(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 hardwareIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

BOOL sub_10007A934(id a1, HNDEventPointerStreamData *a2)
{
  uint64_t v2 = [(HNDEventPointerStreamData *)a2 hardwareIdentifier];
  BOOL v3 = v2 == 0;

  return v3;
}

void sub_10007AD60(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pointerControllerInfo];
  [v2 pointerX];
  BOOL v3 = [*(id *)(a1 + 32) pointerControllerInfo];
  [v3 pointerAccelX];

  id v4 = [*(id *)(a1 + 32) pointerControllerInfo];
  [v4 pointerY];
  id v5 = [*(id *)(a1 + 32) pointerControllerInfo];
  [v5 pointerAccelY];

  [*(id *)(a1 + 32) HIDTime];
  MouseEvent = (const void *)IOHIDEventCreateMouseEvent();
  id v7 = +[AXEventRepresentation representationWithHIDEvent:MouseEvent hidStreamIdentifier:@"AST-IOHIDFilter"];
  objc_msgSend(*(id *)(a1 + 40), "_recordAndRepostEventRepresentation:forButtonsWithSenderID:buttonMask:");
  if (MouseEvent) {
    CFRelease(MouseEvent);
  }
}

id sub_10007AEA8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _finishHandlingEventRepresentation:*(void *)(a1 + 40) forButtonsWithSenderID:*(void *)(a1 + 48) lastButtonMask:*(unsigned int *)(a1 + 56) buttonMask:*(unsigned int *)(a1 + 60)];
}

void sub_10007B660(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      double v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * (void)v6), "pointerController:didReceivePointerEvent:", *(void *)(a1 + 32), *(void *)(a1 + 40), (void)v7);
        double v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

id sub_10007B7F0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32);
  if (!v2)
  {
    uint64_t v3 = +[NSHashTable weakObjectsHashTable];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 32);
    *(void *)(v4 + 32) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 32);
  }
  uint64_t v6 = *(void *)(a1 + 40);

  return [v2 addObject:v6];
}

void sub_10007B8F0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
  if (![*(id *)(*(void *)(a1 + 32) + 32) count])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(v2 + 32);
    *(void *)(v2 + 32) = 0;
  }
}

BOOL sub_10007CCCC(id a1, AXValidationManager *a2)
{
  uint64_t v2 = a2;
  [(AXValidationManager *)v2 validateClass:@"UIApplication", @"__completeAndRunAsPlugin", "v", 0 hasInstanceMethod withFullSignature];
  [(AXValidationManager *)v2 validateClass:@"UIApplication", @"_createStatusBarWithRequestedStyle:orientation:hidden:", "v", "q", "q", "B", 0 hasInstanceMethod withFullSignature];
  [(AXValidationManager *)v2 validateClass:@"UIApplication", @"_supportedOnLockScreen", "B", 0 hasInstanceMethod withFullSignature];
  [(AXValidationManager *)v2 validateClass:@"UIScreen", @"_focusSystem", "@", 0 hasInstanceMethod withFullSignature];

  return 1;
}

BOOL sub_10007CDA0(id a1, AXValidationManager *a2)
{
  uint64_t v2 = a2;
  [(AXValidationManager *)v2 setValidationTargetName:@"AssistiveTouch"];
  [(AXValidationManager *)v2 setOverrideProcessName:@"AssistiveTouch Application"];
  [(AXValidationManager *)v2 setDebugBuild:0];

  return _AXPerformValidationChecks();
}

id sub_10007D4C0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v1 count]);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v4 = v2;
    id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v15;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(v4);
          }
          long long v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            long long v10 = sub_10007D4C0(v9);
            [v3 addObject:v10];
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v11 = objc_msgSend(v9, "elementRef", (void)v14);
              id v12 = v3;
            }
            else
            {
              id v12 = v3;
              id v11 = v9;
            }
            objc_msgSend(v12, "addObject:", v11, (void)v14);
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v6);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_10007D954(id a1)
{
  id v2 = +[UIScreen mainScreen];
  id v1 = [v2 safeValueForKey:@"_focusSystem"];
  [v1 _enableWithoutFocusRestoration];
}

id SCATHardwareInputSourceAvailabilityDetailLocalizedDescription(uint64_t a1)
{
  if (a1 == 1) {
    id v1 = @"HARDWARE_DEVICE_NOT_FOUND";
  }
  else {
    id v1 = @"HARDWARE_NONE";
  }
  id v2 = sub_100040EC8(v1);

  return v2;
}

id sub_10007DF6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) hardwareInputSource:*(void *)(a1 + 40) didReceiveActionWithIdentifier:*(void *)(a1 + 48) start:*(unsigned __int8 *)(a1 + 56) ignoreInputHold:*(unsigned __int8 *)(a1 + 57)];
}

id sub_10007E0A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) hardwareInputSource:*(void *)(a1 + 40) didUpdateAvailability:*(unsigned __int8 *)(a1 + 56) withDetail:*(void *)(a1 + 48)];
}

void sub_10007E434(void *a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
}

void sub_10007E440(void *a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  double Current = CFRunLoopGetCurrent();
  IOHIDDeviceUnscheduleFromRunLoop(a4, Current, kCFRunLoopDefaultMode);
  id v8 = a1;
  id v7 = v8;
  AXPerformBlockOnMainThreadAfterDelay();
}

void sub_10007E4F4(__IOHIDDevice *a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_37:
    [v3 _didUpdateAvailability:1 withDetail:0];
    goto LABEL_38;
  }
  id v4 = IOHIDDeviceGetProperty(a1, @"DeviceUsagePairs");
  id v5 = SWCHLogCommon();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)CGRect v48 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Usage pairs: %@", buf, 0xCu);
  }

  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v43 objects:v55 count:16];
  if (!v7)
  {

LABEL_35:
    id v36 = v3;
LABEL_36:

    goto LABEL_37;
  }
  id v8 = v7;
  uint64_t v38 = v3;
  uint64_t v9 = *(void *)v44;
LABEL_6:
  uint64_t v10 = 0;
  while (1)
  {
    if (*(void *)v44 != v9) {
      objc_enumerationMutation(v6);
    }
    id v11 = *(void **)(*((void *)&v43 + 1) + 8 * v10);
    id v12 = [v11 objectForKey:@"DeviceUsage"];
    unsigned int v13 = [v12 intValue];

    long long v14 = [v11 objectForKey:@"DeviceUsagePage"];
    unsigned int v15 = [v14 intValue];

    if (v15 == 9) {
      break;
    }
    if (v15 == 1 && v13 == 10) {
      break;
    }
    if (v8 == (id)++v10)
    {
      id v8 = [v6 countByEnumeratingWithState:&v43 objects:v55 count:16];
      if (v8) {
        goto LABEL_6;
      }

      id v3 = v38;
      goto LABEL_35;
    }
  }

  id v3 = v38;
  id v17 = v38;
  unsigned int v18 = objc_msgSend((id)IOHIDDeviceGetProperty(a1, @"IAPHIDAccessoryCategory"), "intValue");
  if (v18 == 7 || IOHIDDeviceConformsTo(a1, 1u, 0xAu))
  {
    id v19 = IOHIDDeviceGetProperty(a1, @"ReportDescriptor");
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    __int16 v42 = 0;
    uint64_t v41 = 0;
    [v19 getBytes:&v39 length:26];
    [v17 setAvailableButtons:BYTE5(v40)];
    uint64_t v20 = SWCHLogCommon();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeRef Property = IOHIDDeviceGetProperty(a1, @"DeviceUsagePage");
      CFTypeRef v22 = IOHIDDeviceGetProperty(a1, @"DeviceUsage");
      CFTypeRef v23 = IOHIDDeviceGetProperty(a1, @"Manufacturer");
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)CGRect v48 = v18;
      *(_WORD *)&v48[4] = 2112;
      *(void *)&v48[6] = Property;
      *(_WORD *)&v48[14] = 2112;
      *(void *)&v48[16] = v22;
      __int16 v49 = 2112;
      CFTypeRef v50 = v23;
      __int16 v51 = 1024;
      int v52 = BYTE3(v40);
      __int16 v53 = 1024;
      int v54 = BYTE5(v40);
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Found matching device [iAP category%d]: usage page: %@ usage: %@ mfc: %@\nUsage Min %d, Usage max: %d", buf, 0x32u);
    }

    double v24 = SWCHLogCommon();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeRef v25 = IOHIDDeviceGetProperty(a1, @"VersionNumber");
      *(_DWORD *)buf = 136315394;
      *(void *)CGRect v48 = "VersionNumber";
      *(_WORD *)&v48[8] = 2112;
      *(void *)&v48[10] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%s -- %@", buf, 0x16u);
    }

    double v26 = SWCHLogCommon();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeRef v27 = IOHIDDeviceGetProperty(a1, @"Manufacturer");
      *(_DWORD *)buf = 136315394;
      *(void *)CGRect v48 = "Manufacturer";
      *(_WORD *)&v48[8] = 2112;
      *(void *)&v48[10] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%s -- %@", buf, 0x16u);
    }

    double v28 = SWCHLogCommon();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeRef v29 = IOHIDDeviceGetProperty(a1, @"Product");
      *(_DWORD *)buf = 136315394;
      *(void *)CGRect v48 = "Product";
      *(_WORD *)&v48[8] = 2112;
      *(void *)&v48[10] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%s -- %@", buf, 0x16u);
    }

    double v30 = SWCHLogCommon();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeRef v31 = IOHIDDeviceGetProperty(a1, @"SerialNumber");
      *(_DWORD *)buf = 136315394;
      *(void *)CGRect v48 = "SerialNumber";
      *(_WORD *)&v48[8] = 2112;
      *(void *)&v48[10] = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%s -- %@", buf, 0x16u);
    }

    objc_msgSend(v17, "setVersionNumber:", IOHIDDeviceGetProperty(a1, @"VersionNumber"));
    objc_msgSend(v17, "setProductName:", IOHIDDeviceGetProperty(a1, @"Product"));
    objc_msgSend(v17, "setManufacturerName:", IOHIDDeviceGetProperty(a1, @"Manufacturer"));
    objc_msgSend(v17, "setSerialNumber:", IOHIDDeviceGetProperty(a1, @"SerialNumber"));
    IOReturn v32 = IOHIDDeviceOpen(a1, 0);
    if (v32)
    {
      int v33 = v32;
      double v34 = SWCHLogCommon();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        sub_100114F28(v33, v34);
      }
    }
    IOHIDDeviceRegisterInputValueCallback(a1, (IOHIDValueCallback)sub_10007F594, v17);
    id v35 = +[SCATScannerManager sharedManager];
    [v35 handleUSBMFiDeviceConnected];

    goto LABEL_36;
  }
  double v37 = SWCHLogCommon();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)CGRect v48 = v18;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Device did not match the MFi AssistiveSwitch type: %d", buf, 8u);
  }

LABEL_38:
}

void sub_10007F018(id *a1, void *a2)
{
  id v17 = a2;
  id v3 = [v17 source];
  id v4 = [a1[4] switchSource];
  unsigned int v5 = [v3 isEqualToString:v4];

  if (v5)
  {
    id v6 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a1[4] switchKeyForSwitch:v17]);
    id v7 = [a1[5] objectForKeyedSubscript:v6];
    if (!v7)
    {
      id v7 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:2];
      [a1[5] setObject:v7 forKeyedSubscript:v6];
    }
    if (a1[6])
    {
      id v8 = objc_opt_new();
      uint64_t v9 = objc_opt_new();
      SCATGetActionIdentifiersForRecipeAndSwitch(a1[6], v17, v8, v9);
      [v7 setObject:v8 forKeyedSubscript:@"SwitchActionTypeNormal"];
      if (v9) {
        [v7 setObject:v9 forKeyedSubscript:@"SwitchActionTypeLongPress"];
      }
    }
    else
    {
      if (([v17 hasLongPressAction] & 1) != 0
        || ([v17 longPressShortcutIdentifier],
            uint64_t v10 = objc_claimAutoreleasedReturnValue(),
            v10,
            v10))
      {
        id v11 = objc_opt_new();
        objc_msgSend(v11, "setAction:", objc_msgSend(v17, "longPressAction"));
        id v12 = [v17 longPressShortcutIdentifier];
        [v11 setShortcutIdentifier:v12];

        [v7 setObject:v11 forKeyedSubscript:@"SwitchActionTypeLongPress"];
      }
      id v8 = objc_opt_new();
      objc_msgSend(v8, "setAction:", objc_msgSend(v17, "action"));
      unsigned int v13 = [v17 shortcutIdentifier];
      [v8 setShortcutIdentifier:v13];

      [v7 setObject:v8 forKeyedSubscript:@"SwitchActionTypeNormal"];
    }

    long long v14 = [v17 uuid];
    unsigned int v15 = [v14 UUIDString];
    [a1[7] setObject:v15 forKeyedSubscript:v6];

    long long v16 = [v17 name];
    [a1[8] setObject:v16 forKeyedSubscript:v6];
  }
}

void sub_10007F488(uint64_t a1)
{
  id v2 = (__IOHIDManager *)[*(id *)(a1 + 32) hidManager];
  if (v2 && (CFSetRef v3 = IOHIDManagerCopyDevices(v2)) != 0)
  {
    CFSetRef v4 = v3;
    CFIndex Count = CFSetGetCount(v3);
    CFRelease(v4);
  }
  else
  {
    CFIndex Count = 0;
  }
  id v6 = SWCHLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = +[NSNumber numberWithLong:Count];
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device count: %@", (uint8_t *)&v8, 0xCu);
  }
  if (!Count) {
    [*(id *)(a1 + 32) _didUpdateAvailability:0 withDetail:1];
  }
}

void sub_10007F594(void *a1, int a2, int a3, IOHIDValueRef value)
{
  Element = IOHIDValueGetElement(value);
  uint32_t UsagePage = IOHIDElementGetUsagePage(Element);
  uint32_t Usage = IOHIDElementGetUsage(Element);
  CFIndex IntegerValue = IOHIDValueGetIntegerValue(value);
  uint64_t v10 = SWCHLogCommon();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 67109632;
    v17[1] = UsagePage;
    __int16 v18 = 1024;
    uint32_t v19 = Usage;
    __int16 v20 = 1024;
    BOOL v21 = IntegerValue > 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MFI: UsagePage: %d, Button Number: %d, Down: %d", (uint8_t *)v17, 0x14u);
  }

  if (UsagePage == 9)
  {
    BOOL v11 = IntegerValue > 0;
    id v12 = a1;
    unsigned int v13 = [v12 actionForButtonNumber:Usage withType:@"SwitchActionTypeNormal"];
    long long v14 = [v12 actionForButtonNumber:Usage withType:@"SwitchActionTypeLongPress"];
    unsigned int v15 = [v12 persistentSwitchIdentifierForButtonNumber:Usage];
    long long v16 = [v12 switchDisplayNameForButtonNumber:Usage];
    [v12 _handleAction:v13 longPressAction:v14 start:v11 switchIdentifier:v15 switchDisplayName:v16];
  }
}

id SCATCameraInputSourceAvailabilityDetailLocalizedDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    id v1 = @"CAMERA_NONE";
  }
  else {
    id v1 = *(&off_1001AD180 + a1 - 1);
  }
  id v2 = sub_100040EC8(v1);

  return v2;
}

id sub_10007F894(uint64_t a1)
{
  return _[*(id *)(a1 + 32) cameraInputSource:*(void *)(a1 + 40) didReceiveActionWithIdentifier:*(void *)(a1 + 48) start:*(unsigned __int8 *)(a1 + 56)];
}

id sub_10007F9C8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) cameraInputSource:*(void *)(a1 + 40) didUpdateAvailability:*(unsigned __int8 *)(a1 + 56) withDetail:*(void *)(a1 + 48)];
}

id sub_10007FAB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeFromSuperview];
}

void sub_100080410(uint64_t a1)
{
  id v2 = +[HNDHandManager sharedManager];
  CFSetRef v3 = [v2 mainDisplayManager];
  id v4 = [v3 scannerContentView];

  [v4 addSubview:*(void *)(a1 + 32)];
  objc_msgSend(*(id *)(a1 + 32), "ax_constrainLayoutAttribute:asEqualToConstant:", 8, 160.0);
  objc_msgSend(*(id *)(a1 + 32), "ax_constrainLayoutAttribute:asEqualToValueOfView:withOffset:", 2, v4, -5.0);
  objc_msgSend(*(id *)(a1 + 32), "ax_constrainLayoutAttribute:asEqualToValueOfView:withOffset:", 3, v4, 5.0);
  objc_msgSend(*(id *)(a1 + 32), "ax_constrainLayoutAttribute:asEqualToConstant:", 7, 120.0);
}

id sub_100080A94(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    double v2 = *(double *)(a1 + 40);
    double v3 = *(double *)(a1 + 48);
    double v4 = *(double *)(a1 + 56);
    double v5 = *(double *)(a1 + 64);
  }
  else
  {
    double v2 = 0.0;
    double v5 = 160.0;
    double v4 = 120.0;
    double v3 = 0.0;
  }
  objc_msgSend(*(id *)(a1 + 32), "setFrame:", v2, v3, v4, v5);
  BOOL v6 = *(unsigned char *)(a1 + 72) == 0;
  id v7 = *(void **)(a1 + 32);

  return [v7 setHidden:v6];
}

void sub_100080F30(uint64_t a1, void *a2)
{
  id v9 = a2;
  double v3 = [v9 source];
  unsigned int v4 = [v3 isEqualToString:SCATSwitchSourceCamera];

  if (v4)
  {
    double v5 = objc_opt_new();
    objc_msgSend(v5, "setAction:", objc_msgSend(v9, "action"));
    BOOL v6 = *(void **)(a1 + 32);
    if (v6) {
      SCATGetActionIdentifiersForRecipeAndSwitch(v6, v9, v5, 0);
    }
    id v7 = *(void **)(a1 + 40);
    int v8 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v9 headSwitch]);
    [v7 setObject:v5 forKeyedSubscript:v8];
  }
}

id sub_100081124(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "cameraInputSource:didUpdateState:", *(void *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56));
}

void sub_100081E24(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = qword_1001F0AD8;
  qword_1001F0AD8 = v1;

  _objc_release_x1(v1, v2);
}

void sub_100081F70(uint64_t a1, void *a2, void *a3)
{
  if (_AXSAccessibilitySecureIntentProvider() - 1 <= 1)
  {
    double v5 = ASTLogCommon();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      int v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "AST/SC received Secure Intent Notification: %@", (uint8_t *)&v7, 0xCu);
    }

    id v6 = a2;
    if ([a3 isEqualToString:@"com.apple.LocalAuthentication.intent.waiting"])
    {
      [v6 setWaitingForSecureIntent:1];
      if (([v6 cachedHasShownHint] & 1) == 0) {
        [v6 _showFirstTimeAlert];
      }
    }
    else if ([a3 isEqualToString:@"com.apple.LocalAuthentication.intent.not-waiting"])
    {
      [v6 setWaitingForSecureIntent:0];
    }
  }
}

void sub_100082178(uint64_t a1)
{
  [*(id *)(a1 + 32) setCachedHasShownHint:1];
  id v1 = +[NSUserDefaults standardUserDefaults];
  [v1 setBool:1 forKey:@"com.apple.assistivetouchd.has_shown_secure_intent_confirm"];
}

void sub_10008224C(id a1)
{
  id v1 = objc_alloc_init(SCATSwitchControlWorkspace);
  uint64_t v2 = qword_1001F0AE8;
  qword_1001F0AE8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000829C8(id a1)
{
  id v1 = [[SCATAssistiveTouchServerInstance alloc] _initServer];
  uint64_t v2 = qword_1001F0AF8;
  qword_1001F0AF8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_100083620(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  int v7 = [v6 type];
  if ([v7 isEqualToString:*(void *)(a1 + 32)])
  {
  }
  else
  {
    int v8 = [v6 title];
    unsigned int v9 = [v8 isEqualToString:*(void *)(a1 + 32)];

    if (!v9)
    {
      uint64_t v10 = 0;
      goto LABEL_6;
    }
  }
  uint64_t v10 = 1;
  *a4 = 1;
LABEL_6:

  return v10;
}

id sub_1000839DC(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [a2 type];
  id v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  if (v7) {
    *a4 = 1;
  }
  return v7;
}

id sub_10008500C(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeReasonToDisableScanning:@"PerformingGesture"];
}

id sub_100087C28(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "clearAllFingersAnimated:endPointForAnimation:", 1, CGPointZero.x, CGPointZero.y);
}

void sub_100088FA4(uint64_t a1, void *a2, uint64_t a3)
{
  v29[0] = AXDictionaryElementKeyHint;
  id v4 = a2;
  uint64_t v5 = [v4 hint];
  id v6 = (void *)v5;
  if (v5) {
    id v7 = (__CFString *)v5;
  }
  else {
    id v7 = &stru_1001B1E10;
  }
  v30[0] = v7;
  v29[1] = AXDictionaryElementKeyIndex;
  double v26 = v7;
  CFTypeRef v27 = +[NSNumber numberWithUnsignedInteger:a3];
  v30[1] = v27;
  v29[2] = AXDictionaryElementKeyIsKeyboardKey;
  CFTypeRef v25 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v4 isKeyboardKey]);
  v30[2] = v25;
  v29[3] = AXDictionaryElementKeyLabel;
  uint64_t v8 = [v4 label];
  unsigned int v9 = (void *)v8;
  if (v8) {
    uint64_t v10 = (__CFString *)v8;
  }
  else {
    uint64_t v10 = &stru_1001B1E10;
  }
  v30[3] = v10;
  v29[4] = AXDictionaryElementKeyLanguage;
  double v24 = v10;
  uint64_t v11 = [v4 language];
  id v12 = (void *)v11;
  if (v11) {
    unsigned int v13 = (__CFString *)v11;
  }
  else {
    unsigned int v13 = &stru_1001B1E10;
  }
  v30[4] = v13;
  v29[5] = AXDictionaryElementKeyTraits;
  long long v14 = v13;
  unsigned int v15 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v4 traits]);
  v30[5] = v15;
  v29[6] = AXDictionaryElementKeyTraitsDescription;
  [v4 traits];
  uint64_t v16 = _AXTraitsAsString();
  id v17 = (void *)v16;
  if (v16) {
    __int16 v18 = (__CFString *)v16;
  }
  else {
    __int16 v18 = &stru_1001B1E10;
  }
  v30[6] = v18;
  v29[7] = AXDictionaryElementKeyValue;
  uint32_t v19 = v18;
  __int16 v20 = [v4 value];

  if (v20) {
    BOOL v21 = v20;
  }
  else {
    BOOL v21 = &stru_1001B1E10;
  }
  v30[7] = v21;
  CFTypeRef v22 = v21;
  CFTypeRef v23 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:8];

  [*(id *)(a1 + 32) addObject:v23];
}

id sub_100089600(uint64_t a1)
{
  uint64_t v2 = +[HNDAccessibilityManager sharedManager];
  double v3 = [v2 elements];
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x3032000000;
  uint64_t v10 = sub_10008AE4C;
  uint64_t v11 = sub_10008AE5C;
  id v12 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10008AE64;
  v6[3] = &unk_1001AD2A8;
  void v6[4] = &v7;
  void v6[5] = a1;
  [v3 enumerateObjectsUsingBlock:v6];
  id v4 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_10008971C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008A244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008A26C(uint64_t a1)
{
  id v4 = +[AXSettings sharedInstance];
  id v2 = [v4 assistiveTouchInternalOnlyHiddenNubbitModeEnabled];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _enableHiddenNubbitMode:v2];
}

void sub_10008A330(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = qword_1001F0B08;
  qword_1001F0B08 = v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_10008AE4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10008AE5C(uint64_t a1)
{
}

void sub_10008AE64(uint64_t a1, void *a2)
{
  id v14 = a2;
  [v14 frame];
  double v5 = v4;
  double v7 = v6;
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) frame];
  double v8 = v5 * v7;
  double v11 = v9 * v10;
  unsigned int v12 = [v14 hasAllTraits:*(void *)(a1 + 40)];
  if (v8 > v11 && v12 != 0) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  }
}

id sub_10008C634(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v10 = *(double *)(a1 + 40) * 0.5 + *(double *)(a1 + 48);
  [*(id *)(a1 + 32) tailAngle];
  long double v12 = v10 * cos(v11 + 1.57079633);
  [*(id *)(a1 + 32) tailAngle];
  long double v14 = v10 * sin(v13 + 1.57079633);
  CGFloat v33 = a3 - v14;
  CGFloat v34 = a2 - v12;
  double v32 = a3;
  CGPathMoveToPoint(*(CGMutablePathRef *)(a1 + 56), 0, a2 - v12, a3 - v14);
  CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 56), 0, a4 - v12, a5 - v14);
  CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 56), 0, a4 + v12, a5 + v14);
  CGFloat v15 = a2 + v12;
  long double v16 = a3 + v14;
  CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 56), 0, v15, a3 + v14);
  double v17 = *(double *)(a1 + 48);
  [*(id *)(a1 + 32) tailAngle];
  long double v19 = v17 * cos(v18);
  double v20 = *(double *)(a1 + 48);
  [*(id *)(a1 + 32) tailAngle];
  long double v22 = v20 * sin(v21);
  double v23 = *(double *)(a1 + 40) * 0.5;
  [*(id *)(a1 + 32) tailAngle];
  long double v25 = v23 * cos(v24 + 1.57079633);
  double v26 = *(double *)(a1 + 40) * 0.5;
  [*(id *)(a1 + 32) tailAngle];
  long double v28 = v26 * sin(v27 + 1.57079633);
  CGPathAddArcToPoint(*(CGMutablePathRef *)(a1 + 56), 0, v15 - v19, v16 - v22, a2 + v25 - v19, v32 + v28 - v22, *(CGFloat *)(a1 + 48));
  CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 56), 0, a2 - v25 - v19, v32 - v28 - v22);
  CGPathAddArcToPoint(*(CGMutablePathRef *)(a1 + 56), 0, v34 - v19, v33 - v22, v34, v33, *(CGFloat *)(a1 + 48));
  CGPathCloseSubpath(*(CGMutablePathRef *)(a1 + 56));
  CFTypeRef v29 = *(void **)(a1 + 32);
  uint64_t v30 = *(void *)(a1 + 56);
  [v29 tailAngle];

  return _objc_msgSend(v29, "_addGrayArrowHeadToPath:tipAngle:tipPoint:", v30);
}

id sub_10008C90C(uint64_t a1, int a2, CGFloat a3, CGFloat a4, double a5, double a6, CGFloat a7, double a8, double a9, double a10, double a11, double a12)
{
  double v24 = *(double *)(a1 + 40) * 0.5 + *(double *)(a1 + 48);
  BOOL v25 = a2 != 0;
  if (a2) {
    double v26 = a5 - v24;
  }
  else {
    double v26 = v24 + a5;
  }
  if (a2) {
    double v27 = v24 + a5;
  }
  else {
    double v27 = a5 - v24;
  }
  long double v28 = *(CGPath **)(a1 + 56);
  __double2 v29 = __sincos_stret(a6);
  CGPathMoveToPoint(v28, 0, a3 + v26 * v29.__cosval, a4 + v26 * v29.__sinval);
  CGPathAddArc(*(CGMutablePathRef *)(a1 + 56), 0, a3, a4, v26, a6, a7, v25);
  uint64_t v30 = *(CGPath **)(a1 + 56);
  double v53 = a7;
  __double2 v31 = __sincos_stret(a7);
  CGPathAddLineToPoint(v30, 0, a3 + v27 * v31.__cosval, a4 + v27 * v31.__sinval);
  CGPathAddArc(*(CGMutablePathRef *)(a1 + 56), 0, a3, a4, v27, a7, a6, a2 != 1);
  [*(id *)(a1 + 32) tailAngle];
  long double v33 = v24 * cos(v32 + 1.57079633);
  [*(id *)(a1 + 32) tailAngle];
  long double v35 = v24 * sin(v34 + 1.57079633);
  double v36 = *(double *)(a1 + 48);
  [*(id *)(a1 + 32) tailAngle];
  long double v38 = v36 * cos(v37);
  double v39 = *(double *)(a1 + 48);
  [*(id *)(a1 + 32) tailAngle];
  long double v41 = v39 * sin(v40);
  double v42 = *(double *)(a1 + 40) * 0.5;
  [*(id *)(a1 + 32) tailAngle];
  long double v44 = v42 * cos(v43 + 1.57079633);
  double v45 = *(double *)(a1 + 40) * 0.5;
  [*(id *)(a1 + 32) tailAngle];
  long double v47 = v45 * sin(v46 + 1.57079633);
  CGPathAddArcToPoint(*(CGMutablePathRef *)(a1 + 56), 0, a8 + v33 - v38, a9 + v35 - v41, a8 + v44 - v38, a9 + v47 - v41, *(CGFloat *)(a1 + 48));
  CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 56), 0, a8 - v44 - v38, a9 - v47 - v41);
  CGPathAddArcToPoint(*(CGMutablePathRef *)(a1 + 56), 0, a8 - v33 - v38, a9 - v35 - v41, a8 - v33, a9 - v35, *(CGFloat *)(a1 + 48));
  CGPathCloseSubpath(*(CGMutablePathRef *)(a1 + 56));
  CGRect v48 = *(void **)(a1 + 32);
  uint64_t v49 = *(void *)(a1 + 56);
  [v48 curvature];
  double v51 = v53 - dbl_100197960[v50 < 0.0];

  return _objc_msgSend(v48, "_addGrayArrowHeadToPath:tipAngle:tipPoint:", v49, v51, a11, a12);
}

void sub_10008D1B4(uint64_t a1, CGFloat a2, CGFloat a3, double a4)
{
  CGContextBeginPath(*(CGContextRef *)(a1 + 32));
  double v8 = *(CGContext **)(a1 + 32);
  double v9 = *(double *)(a1 + 40);
  __double2 v10 = __sincos_stret(a4 + -2.35619449);
  CGContextMoveToPoint(v8, a2 + v9 * v10.__cosval, a3 + v9 * v10.__sinval);
  CGContextAddLineToPoint(*(CGContextRef *)(a1 + 32), a2, a3);
  double v11 = a4 + 2.35619449;
  long double v12 = *(CGContext **)(a1 + 32);
  double v13 = *(double *)(a1 + 40);
  __double2 v14 = __sincos_stret(v11);
  CGContextAddLineToPoint(v12, a2 + v13 * v14.__cosval, a3 + v13 * v14.__sinval);
  CGFloat v15 = *(CGContext **)(a1 + 32);

  CGContextStrokePath(v15);
}

uint64_t sub_10008D274(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGContextSetStrokeColorWithColor(*(CGContextRef *)(a1 + 56), (CGColorRef)[*(id *)(a1 + 32) CGColor]);
  CGContextSetLineWidth(*(CGContextRef *)(a1 + 56), *(CGFloat *)(a1 + 64));
  CGContextBeginPath(*(CGContextRef *)(a1 + 56));
  CGContextMoveToPoint(*(CGContextRef *)(a1 + 56), a2, a3);
  CGContextAddLineToPoint(*(CGContextRef *)(a1 + 56), a4, a5);
  CGContextStrokePath(*(CGContextRef *)(a1 + 56));
  uint64_t v10 = *(void *)(a1 + 48);
  [*(id *)(a1 + 40) tailAngle];
  v11.n128_u64[0] = v13.n128_u64[0];
  long double v12 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128))(v10 + 16);
  v13.n128_f64[0] = a4;
  v14.n128_f64[0] = a5;

  return v12(v10, v13, v14, v11);
}

uint64_t sub_10008D33C(uint64_t a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17)
{
  CGContextSetStrokeColorWithColor(*(CGContextRef *)(a1 + 56), (CGColorRef)[*(id *)(a1 + 32) CGColor]);
  CGContextBeginPath(*(CGContextRef *)(a1 + 56));
  CGContextSetLineWidth(*(CGContextRef *)(a1 + 56), *(CGFloat *)(a1 + 64));
  CGContextMoveToPoint(*(CGContextRef *)(a1 + 56), a8, a9);
  CGContextAddArc(*(CGContextRef *)(a1 + 56), a3, a4, a5, a6, a7, a2);
  CGContextStrokePath(*(CGContextRef *)(a1 + 56));
  uint64_t v26 = *(void *)(a1 + 48);
  [*(id *)(a1 + 40) curvature];
  v27.n128_f64[0] = a7 - dbl_100197960[v29.n128_f64[0] < 0.0];
  long double v28 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128))(v26 + 16);
  v29.n128_u64[0] = a16;
  v30.n128_u64[0] = a17;

  return v28(v26, v29, v30, v27);
}

void sub_10008DAEC(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, int a7)
{
  double v10 = a3;
  double v11 = a2;
  CGPathMoveToPoint(*(CGMutablePathRef *)(a1 + 64), 0, a2 - *(double *)(a1 + 48), a3 - *(double *)(a1 + 56));
  double v13 = *(double *)(a1 + 48);
  double v14 = *(double *)(a1 + 56);
  double v15 = a4 - v13;
  double v16 = a5 - v14;
  double v17 = a4 + v13;
  double v18 = a5 + v14;
  if (a7)
  {
    [*(id *)(a1 + 32) arrowHeadBaseOffset];
    double v32 = v10;
    double v20 = v19;
    [*(id *)(a1 + 32) arrowHeadTipOffset];
    double v31 = v11;
    double v22 = v21;
    __double2 v23 = __sincos_stret(*(double *)(a1 + 72));
    CGFloat v24 = v15 - v20 * v23.__cosval;
    CGFloat v25 = v16 - v20 * v23.__sinval;
    double v26 = v17 - v20 * v23.__cosval;
    double v27 = a4 + v22 * v23.__cosval;
    CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 64), 0, v24, v25);
    double v28 = v18 - v20 * v23.__sinval;
    double v29 = a5 + v22 * v23.__sinval;
    double v11 = v31;
    double v10 = v32;
    objc_msgSend(*(id *)(a1 + 40), "_addArrowHeadToPath:baseLeftPoint:baseRightPoint:tipPoint:", *(void *)(a1 + 64), v24, v25, v26, v28, v27, v29);
  }
  else
  {
    CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 64), 0, a4 - v13, a5 - v14);
    CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 64), 0, v17, v18);
  }
  CGPathAddLineToPoint(*(CGMutablePathRef *)(a1 + 64), 0, v11 + *(double *)(a1 + 48), v10 + *(double *)(a1 + 56));
  __n128 v30 = *(CGPath **)(a1 + 64);

  CGPathCloseSubpath(v30);
}

void sub_10008DD54(uint64_t a1, int a2, CGFloat a3, CGFloat a4, double a5, double a6, CGFloat a7, uint64_t a8, int a9)
{
  double v17 = *(double *)(a1 + 48) * 0.5;
  double v18 = a5 - v17;
  double v19 = v17 + a5;
  if (a2) {
    double v20 = v18;
  }
  else {
    double v20 = v19;
  }
  if (a2) {
    double v21 = v19;
  }
  else {
    double v21 = v18;
  }
  double v22 = *(CGPath **)(a1 + 56);
  __double2 v23 = __sincos_stret(a6);
  CGPathMoveToPoint(v22, 0, a3 + v20 * v23.__cosval, a4 + v20 * v23.__sinval);
  if (a9)
  {
    [*(id *)(a1 + 32) arrowHeadBaseOffset];
    double v25 = v24;
    [*(id *)(a1 + 32) arrowHeadTipOffset];
    double v27 = v25 / a5;
    if (a7 > a6) {
      double v27 = -(v25 / a5);
    }
    double v28 = v27 + a7;
    double v29 = v26 / a5;
    if (a7 <= a6) {
      double v29 = -v29;
    }
    double v35 = v29 + a7;
    CGPathAddArc(*(CGMutablePathRef *)(a1 + 56), 0, a3, a4, v20, a6, v28, a2 != 0);
    __double2 v30 = __sincos_stret(v28);
    __double2 v31 = __sincos_stret(v35);
    objc_msgSend(*(id *)(a1 + 40), "_addArrowHeadToPath:baseLeftPoint:baseRightPoint:tipPoint:", *(void *)(a1 + 56), a3 + v20 * v30.__cosval, a4 + v20 * v30.__sinval, a3 + v21 * v30.__cosval, a4 + v21 * v30.__sinval, a3 + a5 * v31.__cosval, a4 + a5 * v31.__sinval);
    a7 = v28;
  }
  else
  {
    CGPathAddArc(*(CGMutablePathRef *)(a1 + 56), 0, a3, a4, v20, a6, a7, a2 != 0);
    double v32 = *(CGPath **)(a1 + 56);
    __double2 v33 = __sincos_stret(a7);
    CGPathAddLineToPoint(v32, 0, a3 + v21 * v33.__cosval, a4 + v21 * v33.__sinval);
  }
  CGPathAddArc(*(CGMutablePathRef *)(a1 + 56), 0, a3, a4, v21, a7, a6, a2 != 1);
  double v34 = *(CGPath **)(a1 + 56);

  CGPathCloseSubpath(v34);
}

void sub_10008DF94(id a1)
{
  uint64_t v1 = +[UIImage imageNamed:@"cursor_blue.png"];
  uint64_t v2 = qword_1001F0B18;
  qword_1001F0B18 = v1;

  _objc_release_x1(v1, v2);
}

void sub_10008E1CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_10008E1E4(id result, double a2, double a3)
{
  uint64_t v3 = *(void *)(*((void *)result + 5) + 8);
  if (*(void *)(v3 + 24))
  {
    double v6 = (id *)result;
    [*((id *)result + 4) size];
    id result = objc_msgSend(v6[4], "drawAtPoint:blendMode:alpha:", 0, a2 - v7 * 0.5, a3 - v8 * 0.5, (1.0- (double)*(unint64_t *)(*((void *)v6[5] + 1) + 24) / (double)((unint64_t)v6[6] + 1))* 0.75);
    uint64_t v3 = *((void *)v6[5] + 1);
    uint64_t v9 = *(void *)(v3 + 24) + 1;
  }
  else
  {
    uint64_t v9 = 1;
  }
  *(void *)(v3 + 24) = v9;
  return result;
}

uint64_t sub_10008E294(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10008E2A4(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  return (*(uint64_t (**)(double, double, double, double))(*(void *)(a1 + 32) + 16))(a7, a8, a10, a11);
}

void sub_10008E694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10008E6B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v4);
  unsigned int v6 = [WeakRetained isRunning];

  if (v6)
  {
    id v7 = objc_loadWeakRetained(v4);
    id v8 = [v7 _handleAXEvent:v3];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_10008E8A8(uint64_t a1)
{
  id v2 = (id)objc_opt_new();
  [v2 setAction:*(void *)(a1 + 56)];
  [*(id *)(a1 + 32) _handleAction:v2 longPressAction:0 start:1 switchIdentifier:*(void *)(a1 + 40) switchDisplayName:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) _handleAction:v2 longPressAction:0 start:0 switchIdentifier:*(void *)(a1 + 40) switchDisplayName:*(void *)(a1 + 48)];
}

id sub_10008EA3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) remoteControlInputSource:*(void *)(a1 + 40) didReceiveActionWithIdentifier:*(void *)(a1 + 48) start:*(unsigned __int8 *)(a1 + 56) ignoreInputHold:*(unsigned __int8 *)(a1 + 57)];
}

void sub_1000938CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000938E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  AXPerformBlockOnMainThread();
  objc_destroyWeak(&v4);
}

void sub_100093988(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10009399C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained) {
    WeakRetained[9] = 0;
  }
}

void sub_100093B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100093B28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v4);
  unsigned int v6 = [WeakRetained isRunning];

  if (v6)
  {
    id v7 = objc_loadWeakRetained(v4);
    id v8 = [v7 _handleAccessibilityEvent:v3];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id sub_100093F58(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessibilityEventInputSource:*(void *)(a1 + 40) didReceiveActionWithIdentifier:*(void *)(a1 + 48) start:*(unsigned __int8 *)(a1 + 56) ignoreInputHold:*(unsigned __int8 *)(a1 + 57)];
}

void sub_1000942FC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 48) name];
  double v5 = [*(id *)(a1 + 48) name];
  [v2 _handleAction:v3 longPressAction:0 start:1 switchIdentifier:v4 switchDisplayName:v5];

  unsigned int v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = [*(id *)(a1 + 48) name];
  id v8 = [*(id *)(a1 + 48) name];
  [v6 _handleAction:v7 longPressAction:0 start:0 switchIdentifier:v9 switchDisplayName:v8];
}

void sub_1000945C8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 48) name];
  double v5 = [*(id *)(a1 + 48) name];
  [v2 _handleAction:v3 longPressAction:0 start:1 switchIdentifier:v4 switchDisplayName:v5];

  unsigned int v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = [*(id *)(a1 + 48) name];
  id v8 = [*(id *)(a1 + 48) name];
  [v6 _handleAction:v7 longPressAction:0 start:0 switchIdentifier:v9 switchDisplayName:v8];
}

id sub_1000946A0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _logEventToCoreAnalytics:*(void *)(a1 + 40)];
}

id sub_1000947AC(uint64_t a1)
{
  v4[0] = @"activated";
  v4[1] = @"name";
  uint64_t v1 = *(void *)(a1 + 32);
  v5[0] = &__kCFBooleanTrue;
  v5[1] = v1;
  id v2 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

void sub_100094930(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 48) name];
  double v5 = [*(id *)(a1 + 48) name];
  [v2 _handleAction:v3 longPressAction:0 start:1 switchIdentifier:v4 switchDisplayName:v5];

  unsigned int v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = [*(id *)(a1 + 48) name];
  id v8 = [*(id *)(a1 + 48) name];
  [v6 _handleAction:v7 longPressAction:0 start:0 switchIdentifier:v9 switchDisplayName:v8];
}

void sub_100094AF4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 48) name];
  double v5 = [*(id *)(a1 + 48) name];
  [v2 _handleAction:v3 longPressAction:0 start:1 switchIdentifier:v4 switchDisplayName:v5];

  unsigned int v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = [*(id *)(a1 + 48) name];
  id v8 = [*(id *)(a1 + 48) name];
  [v6 _handleAction:v7 longPressAction:0 start:0 switchIdentifier:v9 switchDisplayName:v8];
}

void sub_100094CD8(uint64_t a1, void *a2)
{
  id v12 = a2;
  uint64_t v3 = [v12 source];
  if (([v3 isEqualToString:SCATSwitchSourceAccessibility] & 1) == 0)
  {
    id v4 = [v12 source];
    if (([v4 isEqualToString:SCATSwitchSourceBackTap] & 1) == 0)
    {
      double v5 = [v12 source];
      if (![v5 isEqualToString:SCATSwitchSourceSound])
      {
        double v10 = [v12 source];
        unsigned __int8 v11 = [v10 isEqualToString:SCATSwitchSourceHandGestures];

        if ((v11 & 1) == 0) {
          goto LABEL_10;
        }
        goto LABEL_7;
      }
    }
  }

LABEL_7:
  unsigned int v6 = +[SCATActionItem fromSwitch:v12 longPress:0];
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7) {
    SCATGetActionIdentifiersForRecipeAndSwitch(v7, v12, v6, 0);
  }
  id v8 = *(void **)(a1 + 40);
  id v9 = [v12 name];
  [v8 setObject:v6 forKeyedSubscript:v9];

LABEL_10:
}

id sub_100095A6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyMenuObserversWithSelector:"menuDidAppear:"];
}

id sub_100095DE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 frame];
  CGFloat v5 = v4;
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  id v12 = [*(id *)(a1 + 32) screenPoint];
  [v12 CGPointValue];
  v17.CGFloat x = v13;
  v17.CGFloat y = v14;
  v18.origin.CGFloat x = v5;
  v18.origin.CGFloat y = v7;
  v18.size.CGFloat width = v9;
  v18.size.CGFloat height = v11;
  if (CGRectContainsPoint(v18, v17)) {
    id v15 = [v3 isVisible];
  }
  else {
    id v15 = 0;
  }

  return v15;
}

BOOL sub_100096CE8(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

id sub_1000973E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setShouldSuppressAudioOutput:0];
}

id sub_1000973F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setShouldSuppressAudioOutput:0];
}

void sub_100098F74(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [(SCATModernMenuSheet *)[SCATModernMenuDropConfirmationSheet alloc] initWithMenu:v2];
  [(SCATMenu *)v2 pushSheet:v3];
}

void sub_10009B3E4(id a1, SCATMenu *a2)
{
  CGFloat v7 = a2;
  id v2 = [(SCATMenu *)v7 element];

  id v3 = +[SCATScannerManager sharedManager];
  if (v2)
  {
    id v4 = [(SCATMenu *)v7 element];
    unsigned __int8 v5 = [v3 activateElement:v4];

    if (v5) {
      goto LABEL_6;
    }
    id v3 = +[SCATScannerManager sharedManager];
    double v6 = [(SCATMenu *)v7 element];
    [v3 selectElement:v6];
  }
  else
  {
    double v6 = [(SCATMenu *)v7 pointPicker];
    [v6 pickedPoint];
    objc_msgSend(v3, "selectElementAtPoint:");
  }

LABEL_6:
  [(SCATMenu *)v7 setDidActivateElement:1];
}

void sub_10009B4E0(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [[SCATModernMenuScrollSheet alloc] initWithMenu:v2];
  [(SCATMenu *)v2 pushSheet:v3];
}

void sub_10009B54C(id a1, SCATMenu *a2)
{
  id v3 = a2;
  if ((sub_100040850() & 1) == 0)
  {
    id v2 = +[AXPISystemActionHelper sharedInstance];
    [v2 activateHomeButton];
  }
  [(SCATMenu *)v3 didPressScreenChangingButton];
}

void sub_10009B5B8(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) _typingCandidates];
  id v3 = [v1 lastObject];

  if (v3)
  {
    id v2 = +[SCATScannerManager sharedManager];
    [v2 activateElement:v3];
  }
}

void sub_10009B638(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = [*(id *)(a1 + 32) _typingCandidates];
  if ([v3 count])
  {
    id v4 = [v5 delegate];
    [v4 menu:v5 showTypingCandidates:v3];
  }
}

void sub_10009B6B8(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [(SCATMenu *)v2 delegate];
  id v4 = [v3 gesturesSheetForMenu:v2];

  [(SCATMenu *)v2 pushSheet:v4];
}

void sub_10009B728(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [SCATModernMenuSimpleSheet alloc];
  id v4 = +[AXSettings sharedInstance];
  id v5 = [v4 switchControlDeviceMenuItems];
  double v6 = [(SCATModernMenuSimpleSheet *)v3 initWithMenu:v2 menuItemDictionaryArray:v5];

  [(SCATMenu *)v2 pushSheet:v6];
}

void sub_10009B7D0(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [SCATModernMenuSimpleSheet alloc];
  id v4 = +[AXSettings sharedInstance];
  id v5 = [v4 switchControlSettingsMenuItems];
  double v6 = [(SCATModernMenuSimpleSheet *)v3 initWithMenu:v2 menuItemDictionaryArray:v5];

  [(SCATMenu *)v2 pushSheet:v6];
}

void sub_10009B878(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [SCATModernMenuSimpleSheet alloc];
  id v4 = +[AXSettings sharedInstance];
  id v5 = [v4 switchControlMediaControlsMenuItems];
  double v6 = [(SCATModernMenuSimpleSheet *)v3 initWithMenu:v2 menuItemDictionaryArray:v5];

  [(SCATMenu *)v2 pushSheet:v6];
}

void sub_10009B920(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [(SCATModernMenuSheet *)[SCATMenuSiriShorcutsSheet alloc] initWithMenu:v2];
  [(SCATMenu *)v2 pushSheet:v3];
}

void sub_10009B98C(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [[SCATModernMenuRecipesSheet alloc] initWithMenu:v2];
  [(SCATMenu *)v2 pushSheet:v3];
}

void sub_10009B9F8(id a1, SCATMenu *a2)
{
}

void sub_10009BA00(id a1, SCATMenu *a2)
{
}

void sub_10009BA08(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v4 = [(SCATMenu *)v2 delegate];
  id v3 = [(SCATMenu *)v2 element];
  [v4 menu:v2 showAlternateKeysForKey:v3];
}

void sub_10009BA7C(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [[SCATModernMenuEditingSheet alloc] initWithMenu:v2];
  [(SCATMenu *)v2 pushSheet:v3];
}

void sub_10009BAE8(id a1, SCATMenu *a2)
{
  id v5 = a2;
  id v2 = [(SCATMenu *)v5 element];
  unsigned int v3 = [v2 scatIsAXElement];

  if (v3)
  {
    id v4 = [(SCATMenu *)v5 element];
    [v4 zoomIn];
  }
}

void sub_10009BB5C(id a1, SCATMenu *a2)
{
  id v5 = a2;
  id v2 = [(SCATMenu *)v5 element];
  unsigned int v3 = [v2 scatIsAXElement];

  if (v3)
  {
    id v4 = [(SCATMenu *)v5 element];
    [v4 zoomOut];
  }
}

id sub_10009BBD0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handlePerformEscapeWithMenu:a2];
}

void sub_10009BBDC(id a1, SCATMenu *a2)
{
  id v2 = [(SCATMenu *)a2 keyboardApplication];
  [v2 scatPerformAction:2049];
}

void sub_10009BC24(id a1, SCATMenu *a2)
{
  id v2 = a2;
  [(SCATMenu *)v2 setShouldNotResetPointPickerRefinement:1];
  id v3 = [(SCATMenu *)v2 pointPicker];

  [v3 refineSelectedPoint];
}

id sub_10009BC88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) toggleNavigationMode];
}

id sub_10009BC90(uint64_t a1)
{
  return _[*(id *)(a1 + 32) toggleAlternativeNavigationMode];
}

void sub_10009BC98(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [(SCATModernMenuSheet *)[SCATModernMenuSideAppSheet alloc] initWithMenu:v2];
  [(SCATMenu *)v2 pushSheet:v3];
}

void sub_10009BD04(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [(SCATMenu *)v2 delegate];
  [v3 menu:v2 setItemMenuState:1];
}

void sub_10009BD60(id a1, SCATMenu *a2)
{
  id v2 = +[AXElement systemWideElement];
  [v2 systemPressTVMenuButton];
}

void sub_10009BDA8(id a1, SCATMenu *a2)
{
  id v2 = +[SCATScannerManager sharedManager];
  [v2 switchCurrentDisplayContext];
}

void sub_10009BDF0(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [(SCATMenu *)v2 delegate];
  BOOL v4 = (unint64_t)[v3 itemMenuStateForMenu:v2] < 2;

  id v5 = [(SCATMenu *)v2 delegate];
  [v5 menu:v2 setItemMenuState:2 * v4];
}

void sub_10009BE7C(uint64_t a1, void *a2)
{
  id v4 = [a2 element];
  id v3 = [*(id *)(a1 + 32) substringFromIndex:objc_msgSend(@"customAction_", "length")];
  [v4 scatPerformAction:2021 withValue:v3];
}

void sub_10009BF00(id a1, SCATMenu *a2)
{
  id v2 = +[SCATScannerManager sharedManager];
  [v2 cancelDrag];
}

BOOL sub_10009BF48(uint64_t a1)
{
  return +[SCATModernMenuSideAppSheet handleActivateSideAppMenuItemWithIdentifier:*(void *)(a1 + 32)];
}

void sub_10009BF5C(id a1, SCATMenu *a2)
{
  id v3 = a2;
  if (sub_100040994())
  {
    id v2 = +[AXPISystemActionHelper sharedInstance];
    [v2 toggleWatchRemoteScreen];
  }
  [(SCATMenu *)v3 didPressScreenChangingButton];
}

BOOL sub_10009C0EC(id a1, SCATModernMenuItem *a2)
{
  id v4 = a2;
  id v2 = v4;
  AXPerformBlockAsynchronouslyOnMainThread();

  return 1;
}

void sub_10009C17C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  id v3 = [v2 menu];
  id v4 = [v3 keyboardApplication];
  id v5 = [v4 uiElement];
  id v6 = [v5 BOOLWithAXAttribute:3010];

  if (v6)
  {
    CGFloat v7 = +[SCATScannerManager sharedManager];
    double v8 = [v7 activeScannerDriver];
    [v8 freezeScanning];

    CGFloat v9 = @"STOP_DICTATION";
  }
  else
  {
    CGFloat v9 = @"START_DICTATION";
  }
  double v10 = sub_100040EC8(v9);
  [*(id *)(a1 + 32) setTitle:v10];

  [*(id *)(a1 + 32) setAllowsDwellScanningToAbortAfterTimeout:v6];
  id v13 = [*(id *)(a1 + 32) delegate];
  CGFloat v11 = [v13 menu];
  id v12 = [v11 menuVisualProvider];
  [v12 updateModernMenuItem:*(void *)(a1 + 32)];
}

uint64_t sub_10009C2BC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v7 = 0;
  id v8 = 0;
  id v3 = a2;
  [v2 _title:&v8 imageForNavigationItem:&v7];
  id v4 = v8;
  id v5 = v7;
  [v3 setTitle:v4];
  [v3 setImageName:v5];

  return 1;
}

uint64_t sub_10009C348(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v7 = 0;
  id v8 = 0;
  id v3 = a2;
  [v2 _title:&v8 imageForAlternateNavigationItem:&v7];
  id v4 = v8;
  id v5 = v7;
  [v3 setTitle:v4];
  [v3 setImageName:v5];

  return 1;
}

BOOL sub_10009C3D4(id a1, SCATModernMenuItem *a2)
{
  return 0;
}

BOOL sub_10009C6CC(id a1, AXElement *a2)
{
  return [(AXElement *)a2 canPerformEscape];
}

void sub_10009D5B8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [SCATDragMenuItem alloc];
  id v7 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  id v8 = [(SCATDragMenuItem *)v6 initWithTitle:v7 element:*(void *)(a1 + 40) activationToken:v5 delegate:*(void *)(a1 + 48)];

  [*(id *)(a1 + 56) addObject:v8];
}

void sub_10009D7CC(uint64_t a1, void *a2, uint64_t a3)
{
  double v9 = 0.0;
  double v10 = 0.0;
  id v5 = [a2 objectForKeyedSubscript:AXInteractionLocationDescriptorFixedScreenSpacePointKey];

  AXValueGetValue((AXValueRef)v5, kAXValueTypeCGPoint, &v9);
  id v6 = [SCATDropMenuItem alloc];
  id v7 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  id v8 = -[SCATDropMenuItem initWithTitle:fixedSpaceScreenPoint:delegate:menu:](v6, "initWithTitle:fixedSpaceScreenPoint:delegate:menu:", v7, *(void *)(a1 + 40), *(void *)(a1 + 48), v9, v10);

  [*(id *)(a1 + 56) addObject:v8];
}

void HNDTestingSetLastFiredAction(id obj)
{
}

void sub_10009DE94(uint64_t a1)
{
  [*(id *)(a1 + 32) _handleFireActionAndResumeAutoscanning:*(unsigned __int8 *)(a1 + 40)];
  uint64_t v1 = +[SCATScannerManager sharedManager];
  unsigned int v2 = [v1 isUsingPointMode];

  if (v2)
  {
    id v3 = +[SCATScannerManager sharedManager];
    [v3 beginScanningWithFocusContext:0];
  }
}

void sub_10009F854(id a1)
{
  id v1 = +[AXElement systemWideElement];
  [v1 systemPressTVUpButton];
}

void sub_10009F89C(id a1)
{
  id v1 = +[AXElement systemWideElement];
  [v1 systemPressTVDownButton];
}

void sub_10009F8E4(id a1)
{
  id v1 = +[AXElement systemWideElement];
  [v1 systemPressTVLeftButton];
}

void sub_10009F92C(id a1)
{
  id v1 = +[AXElement systemWideElement];
  [v1 systemPressTVRightButton];
}

uint64_t sub_1000A02FC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v6 = v4;
  uint64_t v7 = (uint64_t)[v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        double v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0
          && (objc_msgSend(v10, "isDescendantOfView:", v5, (void)v12) & 1) != 0)
        {
          uint64_t v7 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v7 = (uint64_t)[v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v7;
}

id sub_1000A07CC()
{
  if (qword_1001F0B50 != -1) {
    dispatch_once(&qword_1001F0B50, &stru_1001ADB50);
  }
  uint64_t v0 = (void *)qword_1001F0B48;

  return v0;
}

void sub_1000A0820(id a1)
{
  id v1 = ASTLogMouse();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Cleaning up shared virtual mouse device", v3, 2u);
  }

  [(id)qword_1001F0B30 unload];
  unsigned int v2 = (void *)qword_1001F0B30;
  qword_1001F0B30 = 0;
}

id sub_1000A0CA0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "setDelegate:");
  [*(id *)(*(void *)(a1 + 32) + 32) setCancelHandler:&stru_1001ADB08];
  [*(id *)(*(void *)(a1 + 32) + 32) setDispatchQueue:*(void *)(a1 + 40)];
  unsigned int v2 = *(void **)(*(void *)(a1 + 32) + 32);

  return [v2 activate];
}

void sub_1000A0D04(id a1)
{
  id v1 = ASTLogMouse();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)unsigned int v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "HID virtual event service cancelled!", v2, 2u);
  }
}

id sub_1000A0F10(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) type];
  switch((int)result)
  {
    case 1:
      uint64_t v3 = qword_1001F0B30;
      id v4 = [*(id *)(a1 + 32) buttonNumber];
      id v5 = (void *)v3;
      uint64_t v6 = 1;
      goto LABEL_5;
    case 2:
      uint64_t v7 = qword_1001F0B30;
      id v4 = [*(id *)(a1 + 32) buttonNumber];
      id v5 = (void *)v7;
      uint64_t v6 = 0;
LABEL_5:
      id result = [v5 _handleButtonNumber:v4 isDown:v6];
      goto LABEL_10;
    case 3:
      unsigned int v8 = [*(id *)(a1 + 32) isEyeTrackingEvent];
      double v9 = (void *)qword_1001F0B30;
      [*(id *)(a1 + 32) deltaX];
      double v11 = v10;
      [*(id *)(a1 + 32) deltaY];
      if (v8) {
        id result = objc_msgSend(v9, "_handleEyeTrackingMovementWithDelta:", v11, v12);
      }
      else {
        id result = objc_msgSend(v9, "_handleMovementWithDelta:", v11, v12);
      }
      goto LABEL_10;
    case 4:
      long long v13 = (void *)qword_1001F0B30;
      [*(id *)(a1 + 32) deltaX];
      double v15 = v14;
      [*(id *)(a1 + 32) deltaY];
      id result = objc_msgSend(v13, "_handleScrollWithDelta:", v15, v16);
LABEL_10:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
      break;
    default:
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      break;
  }
  return result;
}

id sub_1000A17B4(void *a1)
{
  uint64_t v1 = qword_1001F0B60;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1001F0B60, &stru_1001ADB70);
  }
  id v3 = [(id)qword_1001F0B58 containsObject:v2];

  return v3;
}

void sub_1000A1F4C(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.accessibility.ASTVirtualHIDMouse", v3);
  id v2 = (void *)qword_1001F0B48;
  qword_1001F0B48 = (uint64_t)v1;
}

void sub_1000A1FB0(id a1)
{
  uint64_t v1 = +[NSSet setWithObjects:@"DeviceOpenedByEventSystem", @"LastActivityTimestamp", @"BatchInterval", @"PreserveTimestamp", 0];
  uint64_t v2 = qword_1001F0B58;
  qword_1001F0B58 = v1;

  _objc_release_x1(v1, v2);
}

void sub_1000A2038(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_1000A3CA4(id a1)
{
  uint64_t v1 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", AXSSwitchControlMenuItemElementSpecificActions, AXSSwitchControlMenuItemATVRemoteMenu, 0);
  uint64_t v2 = qword_1001F0B68;
  qword_1001F0B68 = v1;

  _objc_release_x1(v1, v2);
}

BOOL sub_1000A3D6C(id a1, AXElement *a2)
{
  return [(AXElement *)a2 canPerformEscape];
}

id sub_1000A4F6C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 uiElement];
  uint64_t v6 = +[NSKeyedArchiver archivedDataWithRootObject:v4 requiringSecureCoding:1 error:0];

  [v5 performAXAction:2065 withValue:v6];
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);

  return [v7 _handleCompletedCutCopyPasteOperationForTextElement:v8];
}

void sub_1000A61A8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000A61D4(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = [WeakRetained getTrackpadColor];
  id v4 = objc_loadWeakRetained(v1);
  [v4 setBorderColor:v3];

  id v5 = objc_loadWeakRetained(v1);
  [v5 updateTrackpadFrameLayer];
}

void sub_1000A6260(id *a1)
{
  uint64_t v2 = +[AXSettings sharedInstance];
  [v2 assistiveTouchVirtualTrackpadBorderOpacity];
  double v4 = v3;
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  [WeakRetained setBorderOpacity:v4];

  id v6 = objc_loadWeakRetained(a1);
  [v6 updateTrackpadFrameLayer];
}

void sub_1000A62F8(id *a1)
{
  uint64_t v2 = +[AXSettings sharedInstance];
  [v2 assistiveTouchVirtualTrackpadBorderWidth];
  double v4 = v3;
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  [WeakRetained setBorderWidth:v4];

  id v6 = objc_loadWeakRetained(a1);
  [v6 updateTrackpadBorderWidth];

  id v7 = objc_loadWeakRetained(a1);
  [v7 updateResizeIcon];

  id v8 = objc_loadWeakRetained(a1);
  [v8 updateTrackpadFrameLayer];
}

void sub_1000A735C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000A7388(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [WeakRetained getTrackpadColor];
  id v3 = objc_loadWeakRetained(v1);
  [v3 setBackgroundColor:v2];
}

void sub_1000A73F8(uint64_t a1)
{
  id v5 = +[AXSettings sharedInstance];
  [v5 assistiveTouchVirtualTrackpadInnerOpacity];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setAlpha:v3];
}

void sub_1000A7470(uint64_t a1)
{
  id v6 = +[AXSettings sharedInstance];
  [v6 assistiveTouchVirtualTrackpadHoldDuration];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = [WeakRetained pressGestureRecognizer];
  [v5 setMinimumPressDuration:v3];
}

id sub_1000A8A2C(uint64_t a1, void *a2)
{
  return [a2 _systemPointerSettingsDidChange];
}

id sub_1000A8A34(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateCursorDrawing];
  double v2 = *(void **)(a1 + 32);

  return [v2 _resetPointer];
}

id sub_1000A8A70(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateCursorDrawing];
  double v2 = *(void **)(a1 + 32);

  return [v2 _resetPointer];
}

void sub_1000A8CF8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000A8D1C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _resetPointer];
}

id sub_1000A9080(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setLocation:", *(double *)(a1 + 32), *(double *)(a1 + 40));
}

void sub_1000AA3B0(id a1, SCATMenu *a2)
{
  id v3 = +[SCATScannerManager sharedManager];
  uint64_t v2 = [v3 gestureProvider];
  [v2 performTap];
}

void sub_1000AA410(id a1, SCATMenu *a2)
{
  id v3 = +[SCATScannerManager sharedManager];
  uint64_t v2 = [v3 gestureProvider];
  [v2 performTapAndHold];
}

void sub_1000AA470(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChooseFlickGesture:v4];
}

void sub_1000AA504(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChoosePanGesture:v4];
}

void sub_1000AA598(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChoosePinchGesture:v4];
}

void sub_1000AA62C(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChooseDragGesture:v4];
}

void sub_1000AA6C0(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChooseFingers:v4];
}

void sub_1000AA754(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChooseDoubleTapGesture:v4];
}

void sub_1000AA7E8(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChooseHoldAndDragGesture:v4];
}

void sub_1000AA87C(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChooseActiveHoldAndDragGesture:v4];
}

void sub_1000AA910(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChooseFavorites:v4];
}

void sub_1000AA9A4(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChooseDrawingGesture:v4];
}

void sub_1000AAA38(id a1, SCATMenu *a2)
{
  uint64_t v2 = a2;
  id v5 = +[SCATScannerManager sharedManager];
  id v3 = [v5 gestureProvider];
  double v4 = [(SCATMenu *)v2 gestureSheet];

  [v3 didChooseForceTouchGesture:v4];
}

uint64_t sub_1000AAB78(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = +[SCATScannerManager sharedManager];
  id v5 = [v4 gestureProvider];
  id v6 = [v5 numberOfFingers];

  id v7 = [*(id *)(a1 + 32) _fingerItemStringForNumberOfFingers:v6];
  [v3 setTitle:v7];

  id v8 = [*(id *)(a1 + 32) _imageNameForNumberOfFingers:v6];
  [v3 setImageName:v8];

  return 1;
}

BOOL sub_1000AAC34(id a1, SCATModernMenuItem *a2)
{
  return 0;
}

void sub_1000AB6A8(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = objc_opt_new();
  double v4 = objc_opt_new();
  SCATGetActionIdentifiersForRecipeAndSwitch(*(void **)(a1 + 32), v9, v3, v4);
  id v5 = *(void **)(a1 + 40);
  id v6 = [v9 uuid];
  [v5 setObject:v3 forKeyedSubscript:v6];

  if ([v4 action])
  {
    id v7 = *(void **)(a1 + 48);
    id v8 = [v9 uuid];
    [v7 setObject:v4 forKeyedSubscript:v8];
  }
}

id sub_1000ABD88(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = [v3 remoteSwitchIdentifier];
  id v5 = [*(id *)(a1 + 32) switchIdentifier];
  if ([v4 isEqualToString:v5])
  {
    id v6 = [v3 remoteDeviceIdentifier];
    id v7 = [*(id *)(a1 + 32) deviceIdentifier];
    id v8 = [v6 isEqualToString:v7];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id sub_1000AC27C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) interDeviceInputSource:*(void *)(a1 + 40) didReceiveActionWithIdentifier:*(void *)(a1 + 48) start:*(unsigned __int8 *)(a1 + 56) ignoreInputHold:*(unsigned __int8 *)(a1 + 57)];
}

void sub_1000AD93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AD958(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _activateWithActualElement:*(void *)(a1 + 32)];
}

void sub_1000AEEA8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000AEED8(uint64_t a1)
{
  id v5 = +[AXSettings sharedInstance];
  [v5 assistiveTouchVirtualTrackpadSpeed];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setPointerSpeed:v3];
}

void sub_1000AEF50(uint64_t a1)
{
  id v5 = +[AXSettings sharedInstance];
  [v5 assistiveTouchVirtualTrackpadScrollSpeed];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setScrollSpeed:v3];
}

void sub_1000AEFC8(uint64_t a1)
{
  id v4 = +[AXSettings sharedInstance];
  id v2 = [v4 assistiveTouchVirtualTrackpadScrollToggleEnabled];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setNaturalScroll:v2];
}

void sub_1000AF038(id *a1)
{
  id v2 = +[AXSettings sharedInstance];
  id v3 = [v2 assistiveTouchVirtualTrackpadFullScreenToggleEnabled];
  a1 += 4;
  id WeakRetained = objc_loadWeakRetained(a1);
  [WeakRetained setFullScreen:v3];

  id v5 = objc_loadWeakRetained(a1);
  [v5 setFullScreen];
}

uint64_t sub_1000AF61C(uint64_t a1)
{
  return AXPerformBlockOnMainThreadAfterDelay();
}

uint64_t sub_1000AF6AC(uint64_t a1)
{
  return AXPerformBlockOnMainThreadAfterDelay();
}

id sub_1000AF73C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setTrackpadHitTest:1];
}

id sub_1000AF748(uint64_t a1)
{
  return [*(id *)(a1 + 32) handlePrimaryButtonPress:0];
}

id sub_1000AF9F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) handlePrimaryButtonPress:1];
}

id sub_1000AFAD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) handlePrimaryButtonPress:1];
}

id sub_1000AFDF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "sendGestureHandEventAtPoints:pointTwo:handEventType:", 1, *(double *)(*(void *)(a1 + 32) + 88), *(double *)(*(void *)(a1 + 32) + 96), *(double *)(*(void *)(a1 + 32) + 104), *(double *)(*(void *)(a1 + 32) + 112));
}

uint64_t sub_1000B07D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000B2050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B206C(uint64_t a1)
{
  id v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = [WeakRetained scrollDelegate];
  id v5 = objc_loadWeakRetained(v2);
  uint64_t v6 = [v4 scrollViewController:v5 showVerticalScrollerForContextElement:*(void *)(a1 + 32)] ^ 1;
  id v7 = objc_loadWeakRetained(v2);
  id v8 = [v7 verticalScroller];
  [v8 setHidden:v6];

  id v14 = objc_loadWeakRetained(v2);
  id v9 = [v14 scrollDelegate];
  id v10 = objc_loadWeakRetained(v2);
  uint64_t v11 = [v9 scrollViewController:v10 showHorizontalScrollerForContextElement:*(void *)(a1 + 32)] ^ 1;
  id v12 = objc_loadWeakRetained(v2);
  long long v13 = [v12 horizontalScroller];
  [v13 setHidden:v11];
}

void sub_1000B4DCC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) shouldUpdateItemsOnOrientationChange])
  {
    [*(id *)(a1 + 32) reload];
    id v2 = *(void **)(a1 + 32);
    id v3 = [v2 menu];
    id v4 = [v3 currentSheet];

    if (v2 == v4)
    {
      id v5 = [*(id *)(a1 + 32) menu];
      [v5 reloadFromCurrentSheet];

      id v6 = +[SCATScannerManager sharedManager];
      [v6 beginScanningWithFocusContext:0];
    }
  }
}

void sub_1000B62D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B62F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = +[AXSettings sharedInstance];
  [v1 switchControlCameraPointPickerDwellMovementToleranceRadius];
  objc_msgSend(WeakRetained, "setCachedToleranceRadius:");
}

void sub_1000B6A3C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) controlViewController];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B6ACC;
  _OWORD v3[3] = &unk_1001AACE0;
  void v3[4] = *(void *)(a1 + 32);
  [v2 startDwellAnimationWithCompletion:v3];
}

id *sub_1000B6ACC(id *result, int a2)
{
  if (a2)
  {
    id v2 = result;
    id v3 = [result[4] delegate];
    id v4 = v2[4];
    id v5 = [v4 controlViewController];
    [v5 currentPoint];
    objc_msgSend(v3, "pointPicker:didFinishDwellingOnPoint:", v4);

    id v6 = v2[4];
    return (id *)[v6 cancelDwellTimer];
  }
  return result;
}

void sub_1000B6BEC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) controlViewController];
  [v1 cancelDwellAnimation];
}

void sub_1000B76F0(id a1, SCATMenu *a2)
{
}

void sub_1000B76FC(id a1, SCATMenu *a2)
{
}

void sub_1000B7708(id a1, SCATMenu *a2)
{
}

void sub_1000B7714(id a1, SCATMenu *a2)
{
}

void sub_1000B7720(id a1, SCATMenu *a2)
{
}

void sub_1000B772C(id a1, SCATMenu *a2)
{
}

void sub_1000B7738(id a1, SCATMenu *a2)
{
}

void sub_1000B7744(id a1, SCATMenu *a2)
{
}

void sub_1000B7750(id a1, SCATMenu *a2)
{
}

void sub_1000BA8F0(id a1)
{
  id v3 = +[NSNotificationCenter defaultCenter];
  id v1 = +[NSOperationQueue mainQueue];
  id v2 = [v3 addObserverForName:UIContentSizeCategoryDidChangeNotification object:0 queue:v1 usingBlock:&stru_1001AE0E0];
}

void sub_1000BA984(id a1, NSNotification *a2)
{
}

void sub_1000BA9E4(id a1)
{
  id v1 = -[SCATMenuItemCell initWithFrame:]([SCATMenuItemCell alloc], "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  id v2 = (void *)qword_1001F0B90;
  qword_1001F0B90 = (uint64_t)v1;

  id v5 = +[NSNotificationCenter defaultCenter];
  id v3 = +[NSOperationQueue mainQueue];
  id v4 = [v5 addObserverForName:UIContentSizeCategoryDidChangeNotification object:0 queue:v3 usingBlock:&stru_1001AE120];
}

void sub_1000BAAA8(id a1, NSNotification *a2)
{
  id v2 = -[SCATMenuItemCell initWithFrame:]([SCATMenuItemCell alloc], "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  uint64_t v3 = qword_1001F0B90;
  qword_1001F0B90 = (uint64_t)v2;

  _objc_release_x1(v2, v3);
}

void sub_1000BCDE0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1000BCE04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = [WeakRetained pressedBackgroundBorderImageView];
  [v1 setAlpha:1.0];
}

void sub_1000BCE60(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1000BCF84;
  _OWORD v4[3] = &unk_1001AAA68;
  id v1 = (id *)(a1 + 32);
  objc_copyWeak(&v5, (id *)(a1 + 32));
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000BCFE0;
  v2[3] = &unk_1001AB930;
  objc_copyWeak(&v3, v1);
  +[UIView animateWithDuration:v4 animations:v2 completion:0.1];
  objc_destroyWeak(&v3);
  objc_destroyWeak(&v5);
}

void sub_1000BCF68(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000BCF84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = [WeakRetained pressedBackgroundBorderImageView];
  [v1 setAlpha:0.0];
}

void sub_1000BCFE0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setIsFlashing:0];
}

CGPath *sub_1000BF3E4(CGFloat a1, CGFloat a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  v28.origin.CGFloat x = a5;
  v28.origin.CGFloat y = a6;
  v28.size.CGFloat width = a7;
  v28.size.CGFloat height = a8;
  if (NSIsEmptyRect(v28))
  {
    return sub_1000BF598(a1, a2, a3, a4, a9);
  }
  else
  {
    Mutable = CGPathCreateMutable();
    CGPathMoveToPoint(Mutable, 0, a5 + a9, a6);
    CGPathAddArcToPoint(Mutable, 0, a5 + a7, a6, a5 + a7, a6 + a9, a9);
    CGPathAddArcToPoint(Mutable, 0, a1 + a3, a2 + a4, a1 + a3 - a9, a2 + a4, a9);
    CGPathAddArcToPoint(Mutable, 0, a1, a2 + a4, a1, a2 + a4 - a9, a9);
    CGPathAddArcToPoint(Mutable, 0, a1, a2, a1 + a9, a2, a9);
    CGPathAddArcToPoint(Mutable, 0, a5, a6 + a8, a5, a6 + a8 - a9, a9);
    CGPathAddArcToPoint(Mutable, 0, a5, a6, a5 + a9, a6, a9);
    CGPathCloseSubpath(Mutable);
    return Mutable;
  }
}

CGPath *sub_1000BF598(CGFloat a1, CGFloat a2, double a3, double a4, CGFloat a5)
{
  Mutable = CGPathCreateMutable();
  CGPathMoveToPoint(Mutable, 0, a1 + a5, a2);
  CGFloat v11 = a1 + a3;
  CGPathAddArcToPoint(Mutable, 0, v11, a2, v11, a2 + a5, a5);
  CGFloat v12 = a2 + a4;
  CGPathAddArcToPoint(Mutable, 0, v11, v12, v11 - a5, v12, a5);
  CGPathAddArcToPoint(Mutable, 0, a1, v12, a1, v12 - a5, a5);
  CGPathAddArcToPoint(Mutable, 0, a1, a2, a1 + a5, a2, a5);
  CGPathCloseSubpath(Mutable);
  return Mutable;
}

CGContext *sub_1000BF690(CGFloat a1, CGFloat a2, CGFloat a3)
{
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  if (!DeviceRGB) {
    return 0;
  }
  id v7 = DeviceRGB;
  id v8 = CGBitmapContextCreate(0, (unint64_t)(a1 * a3), (unint64_t)(a2 * a3), 8uLL, (int)(4 * (unint64_t)(a1 * a3)), DeviceRGB, 1u);
  CGColorSpaceRelease(v7);
  if (v8)
  {
    CGFloat y = CGRectZero.origin.y;
    CGAffineTransformMakeScale(&v11, a3, a3);
    CGContextSetCTM();
    v12.origin.CGFloat x = CGRectZero.origin.x;
    v12.origin.CGFloat y = y;
    v12.size.CGFloat width = a1;
    v12.size.CGFloat height = a2;
    CGRect v13 = CGRectInset(v12, -1.0, -1.0);
    CGContextClearRect(v8, v13);
  }
  return v8;
}

void sub_1000BF778(CGContext *a1, CGColor *a2, CGColor *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12, CGFloat a13, double a14)
{
  CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
  double v28 = a14 * 0.5;
  id v29 = +[UIColor colorWithWhite:0.0 alpha:0.2];
  __double2 v30 = CGColorRetain((CGColorRef)[v29 CGColor]);

  v51.origin.CGFloat x = a4;
  CGFloat v31 = a10;
  v51.size.double height = a7;
  CGFloat v32 = a11;
  v51.origin.double y = a5;
  v51.size.CGFloat width = a6;
  CGRect v52 = CGRectInset(v51, v28, v28);
  double y = v52.origin.y;
  double height = v52.size.height;
  double v44 = v52.origin.x + 0.0;
  CGFloat width = v52.size.width;
  v52.origin.CGFloat x = a8;
  v52.origin.double y = a9;
  v52.size.CGFloat width = v31;
  v52.size.double height = a11;
  if (CGRectIsEmpty(v52))
  {
    CGFloat x = a8;
    CGFloat v43 = v31;
  }
  else
  {
    v53.origin.CGFloat x = a8;
    v53.origin.double y = a9;
    v53.size.CGFloat width = v31;
    v53.size.double height = a11;
    CGRect v54 = CGRectInset(v53, v28, v28);
    CGFloat x = v54.origin.x;
    CGFloat v43 = v54.size.width;
    a9 = v54.origin.y;
    CGFloat v32 = v54.size.height;
    double y = y + v54.size.height;
    double height = height - v54.size.height;
  }
  v55.origin.CGFloat x = v44;
  double v35 = width;
  v55.origin.double y = y;
  v55.size.CGFloat width = width;
  v55.size.double height = height;
  CGRect v56 = CGRectInset(v55, 1.0 / a12 * 0.5 + v28, 1.0 / a12 * 0.5 + v28);
  if (a1)
  {
    double v47 = v56.size.height;
    CGFloat v36 = v56.origin.x;
    CGFloat v37 = v56.origin.y;
    double v38 = v56.size.width;
    double v39 = sub_1000BF3E4(v44, y, v35, height, x, a9, v43, v32, a13);
    double v40 = a13 * 0.5;
    if (a13 >= 4.0) {
      double v40 = a13;
    }
    long double v41 = sub_1000BF3E4(v36, v37, v38, v47, x, a9, v43, v32, v40);
    CGContextSetFillColorWithColor(a1, a2);
    CGContextAddPath(a1, v39);
    CGContextFillPath(a1);
    CGContextSetStrokeColorWithColor(a1, a3);
    CGContextAddPath(a1, v39);
    CGContextSetLineWidth(a1, a14);
    CGContextStrokePath(a1);
    CGContextSetStrokeColorWithColor(a1, v30);
    CGContextAddPath(a1, v41);
    CGContextSetLineWidth(a1, 1.0 / a12);
    CGContextStrokePath(a1);
    if (v41) {
      CFRelease(v41);
    }
    if (v39) {
      CFRelease(v39);
    }
  }
  if (v30) {
    CFRelease(v30);
  }
  if (DeviceRGB)
  {
    CFRelease(DeviceRGB);
  }
}

CGContext *sub_1000BFA78(CGColor *a1, CGColor *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13)
{
  id result = sub_1000BF690(a5, a6, a11);
  if (result)
  {
    id v29 = result;
    sub_1000BF778(result, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
    CGImageRef Image = CGBitmapContextCreateImage(v29);
    CFRelease(v29);
    return Image;
  }
  return result;
}

void sub_1000BFBB4(id a1)
{
  id v1 = objc_alloc_init(SCATStyleProvider);
  uint64_t v2 = qword_1001F0BA0;
  qword_1001F0BA0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000C084C()
{
  return AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t sub_1000C08B8(int a1, void *a2, CFTypeRef cf1)
{
  if (CFEqual(cf1, @"com.apple.language.changed")
    || (uint64_t result = CFEqual(cf1, @"com.apple.purplebuddy.LanguageResetReady"), result))
  {
    return (uint64_t)[a2 performSelector:"_languageChanged:" withObject:0 afterDelay:2.0];
  }
  return result;
}

void sub_1000C0F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C0FA4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _assistAppValidationMode];
}

id sub_1000C0FE4(uint64_t a1)
{
  uint64_t v2 = ASTLogCommon();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Reached timeout for waiting for IDS message. Will stop if no activity is in progress.", v4, 2u);
  }

  return [*(id *)(a1 + 32) stopIfAllowed];
}

uint64_t sub_1000C1058()
{
  uint64_t result = AXInPreboardScenario();
  if ((result & 1) == 0)
  {
    id v1 = ASTLogCommon();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "No longer in PreBoard scenario.  Killing ourselves so we can relaunch with a proper SpringBoard server.", v2, 2u);
    }

    exit(0);
  }
  return result;
}

id sub_1000C11F8(uint64_t a1, void *a2, const void *a3)
{
  id v5 = ASTLogCommon();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    id v8 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Handling preferenced change: %@", (uint8_t *)&v7, 0xCu);
  }

  if (CFEqual(a3, kAXSAssistiveTouchEnabledNotification)) {
    return [a2 _assistiveTouchEnabledChange];
  }
  if (CFEqual(a3, kAXSAssistiveTouchScannerEnabledNotification)) {
    return [a2 _scannerEnabledChange];
  }
  id result = (id)CFEqual(a3, kAXSAssistiveTouchSettingsChangedNotification);
  if (result) {
    return [a2 _assistiveTouchSettingsChanged];
  }
  return result;
}

void sub_1000C15F0(uint64_t a1)
{
  if (_AXSAssistiveTouchEnabled() || _AXSAssistiveTouchScannerEnabled())
  {
    uint64_t v2 = ASTLogCommon();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Not stopping, because either AssistiveTouch or Switch Control was enabled.", v4, 2u);
    }
  }
  else
  {
    id v3 = ASTLogCommon();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AssistiveTouch and Switch Control were both disabled. Stopping.", buf, 2u);
    }

    [*(id *)(a1 + 32) stop];
  }
}

void sub_1000C17B4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(const char **)(a1 + 32);
  id v3 = a2;
  id v4 = NSStringFromSelector(v2);
  [v3 setVisualsHidden:1 forReason:v4 animated:1];

  id v6 = +[HNDHandManager sharedManager];
  id v5 = [v3 hardwareIdentifier];

  objc_msgSend(v6, "removeFingersToPoint:onDisplay:", v5, CGPointZero.x, CGPointZero.y);
}

void sub_1000C1A40(id a1, HNDDisplayManager *a2)
{
}

void sub_1000C1A50(id a1)
{
  +[SCATScannerManager updateElementCacheScheme];

  AXPerformBlockAsynchronouslyOnMainThread();
}

void sub_1000C1A88(id a1)
{
  id v1 = +[SCATScannerManager sharedManager];
  [v1 loadScanner];

  id v2 = +[SCATScannerManager sharedManager];
  [v2 beginScanningWithFocusContext:0];
}

void sub_1000C1AF4(id a1)
{
  id v1 = +[SCATScannerManager sharedManager];
  [v1 unloadScanner];
}

void sub_1000C1D20(uint64_t a1)
{
  id v2 = ASTLogCommon();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received reset notification from event manager.", v4, 2u);
  }

  [*(id *)(a1 + 32) setShouldStop:1];
  id v3 = [*(id *)(a1 + 32) delegate];
  [v3 stop];
}

void sub_1000C248C()
{
}

BOOL sub_1000C24A0(id a1, NSURL *a2, NSError *a3)
{
  return 1;
}

void sub_1000C25B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000C25D8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v5 = [WeakRetained _accessibilityHandleAccessibilityEvent:v3];

  return v5;
}

id sub_1000C2A30(uint64_t a1)
{
  id v2 = +[HNDHandManager sharedManager];
  [v2 systemServerConnected];

  id v3 = *(void **)(a1 + 32);

  return _[v3 setSystemAppReady:1];
}

void sub_1000C35B8(id a1)
{
  uint64_t v1 = MGCopyAnswer();
  id v2 = (void *)qword_1001F0BB0;
  qword_1001F0BB0 = v1;

  if (![(id)qword_1001F0BB0 length]) {
    _AXAssert();
  }
  if (![(id)qword_1001F0BB0 length])
  {
    id v3 = +[NSUUID UUID];
    id v4 = [v3 UUIDString];
    id v5 = [v4 copy];
    id v6 = (void *)qword_1001F0BB0;
    qword_1001F0BB0 = (uint64_t)v5;

    int v7 = AXSSLogForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100115714(v7);
    }
  }
}

void sub_1000C3B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C3B40(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _didReceiveActionWithIdentifier:*(void *)(a1 + 32) start:1 ignoreInputHold:1];
}

void sub_1000C3B98(uint64_t a1)
{
  id v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained setFallbackActionBlock:0];

  id v4 = objc_loadWeakRetained(v2);
  id v5 = [v4 delegate];
  id v6 = objc_loadWeakRetained(v2);
  [v5 didEndLongPressForInputSource:v6];

  id v7 = objc_loadWeakRetained(v2);
  [v7 _didReceiveActionWithIdentifier:*(void *)(a1 + 32) start:1 ignoreInputHold:1];
}

void SCATGetActionIdentifiersForRecipeAndSwitch(void *a1, void *a2, void *a3, void *a4)
{
  id v24 = a1;
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v24;
  if (!v24)
  {
    _AXAssert();
    id v10 = 0;
  }
  CGAffineTransform v11 = [v10 mappings];
  CGRect v12 = (char *)[v11 count];

  if (!v12)
  {
LABEL_7:
    _AXAssert();
    double v20 = 0;
    uint64_t v21 = 0;
    if (!v8) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  CGRect v13 = 0;
  uint64_t v14 = 2;
  while (1)
  {
    double v15 = [v24 mappings];
    double v16 = [v15 objectAtIndexedSubscript:v13];

    CGPoint v17 = [v16 switchUUID];
    CGRect v18 = [v7 uuid];
    unsigned int v19 = [v17 isEqual:v18];

    if (v19) {
      break;
    }

    ++v13;
    v14 += 2;
    if (v12 == v13) {
      goto LABEL_7;
    }
  }
  uint64_t v21 = v14 - 1;
  double v20 = [v16 longPressAction];
  if (v20)
  {
    double v22 = [v16 action];
    int v23 = AXSwitchRecipeMappingActionAllowsLongPress();

    if (v23) {
      double v20 = (void *)v14;
    }
    else {
      double v20 = 0;
    }
  }

  if (v8) {
LABEL_8:
  }
    [v8 setAction:v21];
LABEL_9:
  if (v9) {
    [v9 setAction:v20];
  }
}

id SCATGetRecipeMappingIndexAndLongPressVariant(void *a1, uint64_t *a2, BOOL *a3)
{
  id result = [a1 action];
  uint64_t v6 = (uint64_t)result - 1;
  if (a2)
  {
    if (v6 < 0) {
      uint64_t v6 = (uint64_t)result;
    }
    *a2 = v6 >> 1;
  }
  if (a3) {
    *a3 = (((unint64_t)result - 1) & 0x8000000000000001) == 1;
  }
  return result;
}

id sub_1000C5800(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  [*(id *)(a1 + 40) center];

  return _objc_msgSend(v1, "_tapSegmentAtPoint:");
}

void sub_1000C73E4(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = qword_1001F0BC8;
  qword_1001F0BC8 = v1;

  _objc_release_x1(v1, v2);
}

void sub_1000C7670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C7698(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateAudioSessionProperties];
}

void sub_1000C76D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateDuckingMode];
}

void sub_1000C7B10(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _usesAVAudioPlayer];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    id v4 = [v3 soundIDsToAudioPlayer];
    id v5 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
    id v6 = [v4 objectForKeyedSubscript:v5];

    if (!v6)
    {
      id v7 = [*(id *)(a1 + 32) _urlForSoundEffect:*(unsigned int *)(a1 + 40)];
      id v21 = 0;
      id v6 = [objc_alloc((Class)AVAudioPlayer) initWithContentsOfURL:v7 error:&v21];
      id v8 = v21;
      [v6 setDelegate:*(void *)(a1 + 32)];
      if (v8)
      {
        id v9 = SWCHLogCommon();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_1001157DC(v8, v9);
        }
      }
      else
      {
        id v9 = [*(id *)(a1 + 32) soundIDsToAudioPlayer];
        double v15 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
        [v9 setObject:v6 forKeyedSubscript:v15];
      }
    }
    [*(id *)(a1 + 32) _volume];
    objc_msgSend(v6, "setVolume:");
    [v6 play];
  }
  else
  {
    id v10 = [v3 registeredSoundIDs];
    CGAffineTransform v11 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
    id v6 = [v10 objectForKey:v11];

    if (v6)
    {
      objc_msgSend(*(id *)(a1 + 32), "_playSoundWithSoundID:", objc_msgSend(v6, "unsignedIntValue"));
    }
    else
    {
      CFURLRef v12 = [*(id *)(a1 + 32) _urlForSoundEffect:*(unsigned int *)(a1 + 40)];
      CFURLRef v13 = v12;
      if (v12)
      {
        SystemSoundID outSystemSoundID = 0;
        uint64_t v14 = AudioServicesCreateSystemSoundID(v12, &outSystemSoundID);
        if (v14)
        {
          unsigned int v19 = +[NSNumber numberWithInt:v14];
          _AXLogWithFacility();
        }
        else
        {
          double v16 = [*(id *)(a1 + 32) registeredSoundIDs];
          CGPoint v17 = +[NSNumber numberWithUnsignedInt:outSystemSoundID];
          CGRect v18 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
          [v16 setObject:v17 forKey:v18];

          [*(id *)(a1 + 32) _playSoundWithSoundID:outSystemSoundID];
        }
      }
    }
  }
}

void sub_1000C7E58(id a1)
{
  uint64_t v1 = +[NSBundle mainBundle];
  id v3 = [v1 pathForResource:@"mouseclick" ofType:@"wav"];

  CFURLRef v2 = +[NSURL fileURLWithPath:v3];
  AudioServicesCreateSystemSoundID(v2, (SystemSoundID *)&dword_1001F0BD8);
}

void sub_1000C80EC(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  CFURLRef v2 = objc_msgSend(*(id *)(a1 + 32), "registeredSoundIDs", 0);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        AudioServicesDisposeSystemSoundID((SystemSoundID)[*(id *)(*((void *)&v9 + 1) + 8 * (void)v6) unsignedIntValue]);
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }

  id v7 = [*(id *)(a1 + 32) registeredSoundIDs];
  [v7 removeAllObjects];

  id v8 = [*(id *)(a1 + 32) soundIDsToAudioPlayer];
  [v8 removeAllObjects];
}

void *sub_1000C8F98(void *result, void *a2, uint64_t a3)
{
  if (result[4] == a3)
  {
    id v3 = (void *)result[5];
    id v4 = [a2 integerValue];
    return _[v3 _updateSoundEffect:v4 isActive:0];
  }
  return result;
}

void sub_1000C9298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C92B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000C92C0(uint64_t a1)
{
}

void sub_1000C92C8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000C9F54(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000C9F70(uint64_t a1, void *a2, char a3)
{
  uint64_t v5 = (id *)(a1 + 40);
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v5);
  id v8 = [WeakRetained unfinishedSpeechActionsWithCompletionBlocks];
  [v8 removeObject:v6];

  long long v9 = dispatch_get_global_queue(0, 0);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000CA064;
  v10[3] = &unk_1001AE3A8;
  id v11 = *(id *)(a1 + 32);
  char v12 = a3;
  dispatch_async(v9, v10);
}

uint64_t sub_1000CA064(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1000CA0BC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000CA138(id a1)
{
  uint64_t v1 = objc_alloc_init(SCATAssistiveTouchWorkspace);
  uint64_t v2 = qword_1001F0BE8;
  qword_1001F0BE8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

BOOL sub_1000CA908(id a1, AXGroupable *a2)
{
  return [(AXGroupable *)a2 isGroup] ^ 1;
}

void sub_1000CAAC8(id a1, SCATElement *a2, unint64_t a3, BOOL *a4)
{
  id v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (unint64_t v5 = (unint64_t)[(SCATElement *)v6 scatTraits], (kAXScrollableTrait & v5) != 0))
  {
    [(SCATElement *)v6 scatScrollToVisible];
    *a4 = 1;
  }
}

void sub_1000CAB54(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v6 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (unint64_t v5 = (unint64_t)[v6 scatTraits], (kAXScrollableTrait & v5) != 0))
  {
    [v6 scatScrollToVisible];
    *a4 = 1;
  }
}

void sub_1000CAD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000CAD6C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 scatDisplayId];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *a4 = 1;
  }
  return result;
}

void sub_1000CB020(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 conformsToProtocol:&OBJC_PROTOCOL___SCATElement]) {
    [v3 setParentGroup:*(void *)(a1 + 32)];
  }
}

void sub_1000CB854(id a1)
{
  uint64_t v1 = +[NSParagraphStyle defaultParagraphStyle];
  id v2 = [v1 mutableCopy];

  [v2 setAlignment:1];
  [v2 setLineBreakMode:0];
  LODWORD(v3) = 0.25;
  [v2 setHyphenationFactor:v3];
  if (UIAccessibilityIsBoldTextEnabled()) {
    +[UIFont systemFontOfSize:14.0];
  }
  else {
  id v4 = +[UIFont preferredFontForTextStyle:UIFontTextStyleFootnote];
  }
  v7[0] = NSFontAttributeName;
  v7[1] = NSParagraphStyleAttributeName;
  v8[0] = v4;
  v8[1] = v2;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:2];
  id v6 = (void *)qword_1001F0C00;
  qword_1001F0C00 = v5;
}

id sub_1000CC1D8(void *a1)
{
  id v1 = a1;
  id v2 = [v1 imageName];
  double v3 = +[UIImage scat_cachedMenuImageForImageName:v2];

  if (!v3)
  {
    id v4 = [v1 imageName];
    uint64_t v5 = +[UIImage _deviceSpecificImageNamed:v4];
    id v6 = +[UIColor whiteColor];
    id v7 = [v5 imageWithTintColor:v6 renderingMode:1];
    double v3 = objc_msgSend(v7, "resizableImageWithCapInsets:resizingMode:", 1, UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);

    if ([v3 isSymbolImage])
    {
      +[SCATModernMenuItem imageSize];
      uint64_t v9 = +[UIImageSymbolConfiguration configurationWithPointSize:v8];
      uint64_t v10 = [v3 imageWithConfiguration:v9];

      double v3 = (void *)v10;
    }
    if ([v1 shouldFlipForRTL]
      && [UIApp userInterfaceLayoutDirection] == (id)1)
    {
      uint64_t v11 = [v3 imageWithHorizontallyFlippedOrientation];

      double v3 = (void *)v11;
    }
    char v12 = [v1 imageName];
    +[UIImage scat_setCachedMenuImage:v3 forImageName:v12];
  }

  return v3;
}

void sub_1000CC6D8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) menu];
  [v1 hideWithCompletion:0];
}

id sub_1000CC720(uint64_t a1)
{
  return [*(id *)(a1 + 32) activate];
}

void sub_1000CDBB8(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  id v4 = a2;
  id v7 = [v2 displayContextForCursor:v4 forDisplayID:v3];
  uint64_t v5 = [v7 layer];
  id v6 = [v4 cursorContainerLayer];

  [v5 addSublayer:v6];
}

id sub_1000CEFB0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _performScrollAction:2007 withMenu:a2];
}

id sub_1000CEFC0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _performScrollAction:2006 withMenu:a2];
}

id sub_1000CEFD0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _performScrollAction:2008 withMenu:a2];
}

id sub_1000CEFE0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _performScrollAction:2009 withMenu:a2];
}

void sub_1000CEFF0(id a1, SCATMenu *a2)
{
  id v3 = [(SCATMenu *)a2 element];
  id v2 = [v3 scrollableElement];
  [v2 scatPerformAction:2019];
}

void sub_1000CF050(id a1, SCATMenu *a2)
{
  id v3 = [(SCATMenu *)a2 element];
  id v2 = [v3 scrollableElement];
  [v2 scatPerformAction:2020];
}

void sub_1000CF0B0(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = +[SCATScannerManager sharedManager];
  id v4 = [v3 autoscroller];

  uint64_t v5 = [v8 element];
  id v6 = [v5 scrollableElement];

  if (([v6 hasWebContent] & 1) != 0
    || ([v6 scatSupportsAction:2030] & 1) == 0)
  {
    uint64_t v7 = [*(id *)(a1 + 32) _fallbackAncestorForScrollToTopForMenu:v8];

    id v6 = (void *)v7;
  }
  [v4 setScrollElement:v6];
  [v4 scrollToTop];
  AXPerformBlockOnMainThreadAfterDelay();
}

void sub_1000CF1A8(id a1)
{
  id v1 = +[HNDAccessibilityManager sharedManager];
  [v1 refreshElements];
}

void sub_1000CF1F0(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = +[SCATScannerManager sharedManager];
  id v4 = [v3 autoscroller];

  uint64_t v5 = [v9 element];
  id v6 = [v5 scrollableElement];

  if (([v6 hasWebContent] & 1) != 0
    || ([v6 scatSupportsAction:2006] & 1) == 0
    && ([v6 scatSupportsAction:2007] & 1) == 0)
  {
    uint64_t v7 = [*(id *)(a1 + 32) _fallbackAncestorForAutoscrollForMenu:v9];

    id v6 = (void *)v7;
  }
  [v4 setScrollElement:v6];
  [v4 resume];
  id v8 = [(SCATModernMenuSheet *)[SCATModernMenuAutoscrollSheet alloc] initWithMenu:v9];
  [v9 pushSheet:v8];
}

BOOL sub_1000CF318(id a1, SCATModernMenuItem *a2)
{
  return 0;
}

uint64_t sub_1000CF7C4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 menu:*(void *)(a1 + 32) showScrollViewPickerForScrollViews:*(void *)(a1 + 40) elementsToScroll:*(void *)(a1 + 48) scrollAction:*(unsigned int *)(a1 + 56)];

  return AXPerformBlockOnMainThreadAfterDelay();
}

void sub_1000CF824(id a1)
{
  id v1 = +[SCATScannerManager sharedManager];
  [v1 beginScanningWithFocusContext:0];
}

void sub_1000D001C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

BOOL sub_1000D0040(id a1, SCATModernMenuItem *a2, unint64_t a3)
{
  id v3 = [(SCATModernMenuItem *)a2 identifier];
  unsigned __int8 v4 = [v3 isEqualToString:@"device_mute"];

  return v4;
}

id *sub_1000D0084(id *result, uint64_t a2)
{
  if (a2 == 2) {
    return (id *)[result[4] updateItem];
  }
  return result;
}

void sub_1000D0098(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained setSpringBoardActionHandlerIdentifier:v3];
}

BOOL sub_1000D0740(id a1, SCATModernMenuItem *a2, NSDictionary *a3)
{
  return [(SCATModernMenuItem *)a2 isAllowedWithAssistiveAccess];
}

BOOL sub_1000D0748(id a1, SCATModernMenuItem *a2, NSDictionary *a3)
{
  return [(SCATModernMenuItem *)a2 isAllowedWithGuidedAccess];
}

void sub_1000D2284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D22A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateCameraSwitchCache];
  [WeakRetained _updateMotionTrackerExpressionConfig];
}

void sub_1000D2854(uint64_t a1, void *a2, uint64_t a3)
{
  objc_msgSend(*(id *)(a1 + 32), "_actionForExpression:", objc_msgSend(a2, "unsignedIntegerValue"));
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = [v9 action];
  if (v6 || ([v9 shortcutIdentifier], (id v3 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v7 = +[SCATScannerManager sharedManager];
    unsigned int v8 = [v7 isUsingPointMode];

    if (v6)
    {
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }

    if (v8) {
LABEL_5:
    }
      [*(id *)(a1 + 32) _didReceiveActionWithIdentifier:v9 start:a3 ignoreInputHold:1];
  }
LABEL_6:
}

void sub_1000D2928(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000D2994(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_msgSend(*(id *)(*(void *)(a1 + 32) + 104), "containsObject:") & 1) == 0) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000D2B34(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    id v5 = [*(id *)(a1 + 32) delegate];
    uint64_t v4 = *(void *)(a1 + 32);
    [*(id *)(a1 + 40) lookAtPoint];
    objc_msgSend(v5, "motionTrackerInputSource:didReceivePoint:", v4);
  }
}

void sub_1000D2E50(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) delegate];
    [v4 motionTrackerInputSource:*(void *)(a1 + 32) didReceiveActionWithIdentifier:*(void *)(a1 + 40) start:*(unsigned __int8 *)(a1 + 48) ignoreInputHold:*(unsigned __int8 *)(a1 + 49)];
  }
}

CFStringRef sub_1000D325C(int a1)
{
  if ((a1 - 1) > 3) {
    return @"Unknown";
  }
  else {
    return *(&off_1001AE6F8 + a1 - 1);
  }
}

void sub_1000D32D8(id a1)
{
  id v1 = objc_alloc_init(SCATFocusContext);
  uint64_t v2 = qword_1001F0C10;
  qword_1001F0C10 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000D3368(id a1)
{
  id v1 = objc_alloc_init(SCATFocusContext);
  uint64_t v2 = qword_1001F0C20;
  qword_1001F0C20 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000D5A60(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) element];
  if ([*(id *)(a1 + 32) selectBehavior] == 4)
  {
    id v2 = v6;
  }
  else
  {
    id v2 = [v6 parentGroup];
  }
  char v3 = v2;
  uint64_t v4 = [v2 selectionPath];
  [*(id *)(a1 + 40) setCurrentSelectionPath:v4];

  objc_opt_class();
  LOBYTE(v4) = objc_opt_isKindOfClass();
  id v5 = [*(id *)(a1 + 40) pointPickerView];
  [v5 setCenterPointVisible:v4 & 1];
}

void sub_1000D690C(id a1)
{
  id v1 = objc_alloc_init(SCATScannerManager);
  uint64_t v2 = qword_1001F0C30;
  qword_1001F0C30 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000D6FD4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000D6FEC(uint64_t a1)
{
  [*(id *)(a1 + 32) _setUSBRMPreferenceDisabled];
  id v1 = +[AXSettings sharedInstance];
  [v1 setSwitchControlUserDidReadUSBRestrictedModeAlert:1];
}

void sub_1000D7C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id *location, id *a19, id *a20)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(location);
  objc_destroyWeak(a19);
  objc_destroyWeak(a20);
  objc_destroyWeak((id *)(v21 - 112));
  _Unwind_Resume(a1);
}

void sub_1000D7C94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = [WeakRetained cursorManager];
  [v1 updateWithFocusContext:0 animated:0 options:0];
}

void sub_1000D7CF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateElementVisuals];
}

void sub_1000D7D38(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateElementVisuals];

  char v3 = +[HNDAccessibilityManager sharedManager];
  [v3 refreshElements];

  id v4 = objc_loadWeakRetained(v1);
  id v5 = [v4 activeElementManager];
  id v6 = objc_loadWeakRetained(v1);
  uint64_t v7 = [v6 menu];

  if (v5 == v7)
  {
    id v9 = objc_loadWeakRetained(v1);
    unsigned int v8 = [v9 menu];
    [v8 updateMenuVisualsForUpdatedElementVisuals];
  }
}

void sub_1000D7E34(id a1)
{
  id v3 = +[AXSettings sharedInstance];
  if (([v3 switchControlUseCameraForPointMode] & 1) == 0)
  {
    id v1 = +[AXSettings sharedInstance];
    id v2 = [v1 assistiveTouchScanningMode];

    if (v2 != (id)3) {
      return;
    }
    id v3 = +[AXSettings sharedInstance];
    [v3 setAssistiveTouchScanningMode:1];
  }
}

void sub_1000D7EE8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateCameraPointPickerSwitchesCache];
}

void sub_1000D7F28(uint64_t a1)
{
  id v6 = +[AXSettings sharedInstance];
  [v6 switchControlAutoTapTimeout];
  double v3 = v2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = [WeakRetained selectActionHandler];
  [v5 setTimeoutDuration:v3];
}

void sub_1000D7FB0(uint64_t a1)
{
  double v2 = +[HNDAccessibilityManager sharedManager];
  [v2 groupingEnabledDidChange];

  double v3 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v3);
  id v5 = [WeakRetained menu];
  [v5 groupingEnabledDidChange];

  id v6 = objc_loadWeakRetained(v3);
  LODWORD(v5) = [v6 isActive];

  if (v5)
  {
    id v7 = objc_loadWeakRetained(v3);
    [v7 beginScanningWithFocusContext:0];
  }
}

void sub_1000D807C(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateScanningStyle];

  id v4 = objc_loadWeakRetained(v1);
  double v3 = [v4 inputController];
  [v3 updateWhetherSwitchConfigurationRendersDeviceUnusable];
}

void sub_1000D80EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _scanningModePreferenceDidChange];
}

void sub_1000D812C(uint64_t a1)
{
  double v2 = +[AXSettings sharedInstance];
  objc_msgSend(*(id *)(a1 + 32), "setSpeechEnabled:", objc_msgSend(v2, "assistiveTouchScannerSpeechEnabled"));

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateAudioSessionState];

  id v4 = +[HNDAccessibilityManager sharedManager];
  [v4 speechEnabledDidChange];
}

void sub_1000D81BC(uint64_t a1)
{
  double v2 = +[AXSettings sharedInstance];
  objc_msgSend(*(id *)(a1 + 32), "setSoundEffectsEnabled:", objc_msgSend(v2, "assistiveTouchScannerSoundEnabled"));

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateAudioSessionState];
}

void sub_1000D8230(id a1)
{
}

void sub_1000D8ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D8EFC(uint64_t a1)
{
  objc_copyWeak(&v3, (id *)(a1 + 48));
  id v2 = *(id *)(a1 + 40);
  AXPerformBlockAsynchronouslyOnMainThread();

  objc_destroyWeak(&v3);
}

void sub_1000D8FA4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D8FB8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _driverForScannerState];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [v2 outputManager:WeakRetained didSpeakFocusContext:0];

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

void sub_1000D9BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000D9C10(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  unsigned int v6 = [a2 displayID];
  id result = [*(id *)(a1 + 32) lockedToDisplayID];
  if (v6 == result)
  {
    *a4 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

void sub_1000D9E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D9E24(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if ([v6 displayID] != *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    *a4 = 1;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v6 displayID];
  }
}

void sub_1000DA180(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = [*(id *)(a1 + 32) cursorManager];
    [v2 updateWithFocusContext:0 animated:0 options:0];
  }
  id v3 = [*(id *)(a1 + 32) activeElementManager];
  [v3 redisplayIfNeeded:0];

  id v4 = [*(id *)(a1 + 32) activeElementManager];

  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) activeScannerDriver];

    if (!v5)
    {
      id v6 = [*(id *)(a1 + 32) _driverForScannerState];
      [*(id *)(a1 + 32) setActiveScannerDriver:v6];
    }
    int v7 = *(unsigned __int8 *)(a1 + 49);
    unsigned int v8 = [*(id *)(a1 + 32) activeScannerDriver];
    uint64_t v9 = *(void *)(a1 + 40);
    id v13 = v8;
    if (v7) {
      [v8 beginScanningWithFocusContext:v9];
    }
    else {
      [v8 continueScanningWithFocusContext:v9];
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 49)) {
      _AXAssert();
    }
    uint64_t v10 = [*(id *)(a1 + 32) beginScanningTimer];
    [v10 cancel];

    uint64_t v11 = [*(id *)(a1 + 32) beginScanningTimer];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1000DA350;
    v14[3] = &unk_1001AAC78;
    char v12 = *(void **)(a1 + 40);
    v14[4] = *(void *)(a1 + 32);
    id v15 = v12;
    [v11 afterDelay:v14 processBlock:1.0];
  }
}

id sub_1000DA350(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginScanningWithFocusContext:*(void *)(a1 + 40)];
}

id sub_1000DA494(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginScanningWithFocusContext:0];
}

void sub_1000DACC8(id a1)
{
  id v1 = +[AXSpringBoardServer server];
  [v1 requestDismissJindo];
}

BOOL sub_1000DBBCC(id a1, AXElement *a2)
{
  return [(AXElement *)a2 canPerformEscape];
}

void sub_1000DC724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000DC748(id *a1)
{
  id v2 = a1[4];
  objc_copyWeak(&v4, a1 + 6);
  id v3 = a1[5];
  AXPerformBlockAsynchronouslyOnMainThread();

  objc_destroyWeak(&v4);
}

void sub_1000DC7FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000DC810(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [v2 outputManager:WeakRetained didSpeakFocusContext:*(void *)(a1 + 40)];
}

id sub_1000DD810(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginScanningWithFocusContext:0];
}

void sub_1000DD81C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) axManager];
  [v1 refreshElements];
}

id sub_1000DDACC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _waitForApplication:*(void *)(a1 + 40)];
}

void sub_1000DDD7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) menu];
  [v2 nativeFocusElementDidChange:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 32) activeScannerDriver];
  [v3 tickleIdleTimer];
}

void sub_1000DE944(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = +[SCATActionItem fromAction:103];
  [v1 inputController:v2 didReceiveAction:v3];
}

void sub_1000DEDFC(id a1, NSString *a2, NSError *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = AXSSLogForCategory();
  int v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138543362;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sysdiagnose completed. File path: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_100115B30((uint64_t)v5, v7);
  }
}

id sub_1000E0574(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginScanningWithFocusContext:0];
}

uint64_t sub_1000E1A54(uint64_t result, _DWORD *a2, uint64_t a3)
{
  int v3 = -5;
  if (a2 && a3 == 4)
  {
    int v3 = 0;
    **(_DWORD **)(result + 40) = *a2;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  return result;
}

void sub_1000E1B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E1BB0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  int v8 = (id *)(a1 + 32);
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = a2;
  id WeakRetained = objc_loadWeakRetained(v8);
  [WeakRetained _handleMIDIEvent:v12 device:v11 entity:v10 endpoint:v9];
}

void sub_1000E1D34(uint64_t a1)
{
  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) _switchKeyForEvent:*(void *)(a1 + 40)]);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  if ((uint64_t)[v13 integerValue] <= 0) {
    _AXAssert();
  }
  uint64_t v2 = [*(id *)(a1 + 32) persistentSwitchIdentifiers];
  int v3 = [v2 objectForKeyedSubscript:v13];

  id v4 = [*(id *)(a1 + 32) switchDisplayNames];
  id v5 = [v4 objectForKeyedSubscript:v13];

  id v6 = [*(id *)(a1 + 32) actions];
  int v7 = [v6 objectForKeyedSubscript:v13];

  if (!v7)
  {
    id v11 = [*(id *)(a1 + 32) actions];
    uint64_t v12 = *(void *)(a1 + 40);
    id v10 = v13;
    _AXAssert();
  }
  int v8 = objc_msgSend(v7, "objectForKeyedSubscript:", @"SwitchActionTypeNormal", v10, v11, v12);
  id v9 = [v7 objectForKeyedSubscript:@"SwitchActionTypeLongPress"];
  objc_msgSend(*(id *)(a1 + 32), "_handleAction:longPressAction:start:switchIdentifier:switchDisplayName:", v8, v9, objc_msgSend(*(id *)(a1 + 40), "isDownEvent"), v3, v5);
}

id sub_1000E2C10(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 removeObject:*(void *)(a1 + 32)];
}

id sub_1000E2CE8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "axSafelyAddObjectsFromArray:");
}

BOOL sub_1000E2FB4(id a1, SCATAuxiliaryElementManager *a2, unint64_t a3)
{
  return [(SCATAuxiliaryElementManager *)a2 isEnabled];
}

void sub_1000E4E68(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) view];
  [v1 setAlpha:0.0];
}

void sub_1000E4F30(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) view];
  [v1 setAlpha:1.0];
}

void sub_1000E6E64(id a1, SCATMenu *a2)
{
  int v3 = a2;
  uint64_t v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 activateSiri];

  [(SCATMenu *)v3 didPressScreenChangingButton];
}

void sub_1000E6ECC(id a1, SCATMenu *a2)
{
  int v3 = a2;
  uint64_t v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 activateTypeToSiri];

  [(SCATMenu *)v3 didPressScreenChangingButton];
}

void sub_1000E6F34(id a1, SCATMenu *a2)
{
  int v3 = a2;
  uint64_t v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 activateVoiceControl];

  [(SCATMenu *)v3 didPressScreenChangingButton];
}

void sub_1000E6F9C(id a1, SCATMenu *a2)
{
  int v3 = a2;
  uint64_t v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 toggleAppSwitcher];

  [(SCATMenu *)v3 didPressScreenChangingButton];
}

void sub_1000E7004(id a1, SCATMenu *a2)
{
  int v3 = a2;
  uint64_t v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 toggleNotificationCenter];

  [(SCATMenu *)v3 didPressScreenChangingButton];
}

void sub_1000E706C(id a1, SCATMenu *a2)
{
  int v3 = a2;
  uint64_t v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 toggleControlCenter];

  [(SCATMenu *)v3 didPressScreenChangingButton];
}

void sub_1000E70D4(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 activateLockButton];
}

void sub_1000E711C(id a1, SCATMenu *a2)
{
  id v2 = a2;
  int v3 = [(SCATModernMenuSheet *)[SCATModernMenuRotateItemsSheet alloc] initWithMenu:v2];
  [(SCATMenu *)v2 pushSheet:v3];
}

void sub_1000E7188(id a1, SCATMenu *a2)
{
  int HasStaccato = AXDeviceHasStaccato();
  id v3 = +[AXPISystemActionHelper sharedInstance];
  if (HasStaccato) {
    [v3 pressStaccato];
  }
  else {
    [v3 toggleRingerSwitch:!sub_100040830()];
  }
}

void sub_1000E71FC(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 decreaseVolume];
}

void sub_1000E7244(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 increaseVolume];
}

void sub_1000E728C(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 activateTripleClick];
}

void sub_1000E72D4(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 shake];
}

void sub_1000E731C(id a1, SCATMenu *a2)
{
}

void sub_1000E7330(id a1)
{
  id v1 = +[AXPISystemActionHelper sharedInstance];
  [v1 takeScreenshot];
}

void sub_1000E7378(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 adjustSystemZoom:0];
}

void sub_1000E73C4(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 adjustSystemZoom:1];
}

void sub_1000E7410(uint64_t a1, void *a2)
{
  id v2 = a2;
  [(id)objc_opt_class() _handleSpeakThis:v2];
}

void sub_1000E7464(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 toggleSpotlight];
}

void sub_1000E74AC(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [SCATModernMenuControllableDevicesSheet alloc];
  id v4 = [(SCATMenu *)v2 delegate];
  id v5 = [v4 interDeviceCommunicatorForMenu:v2];
  id v6 = [(SCATModernMenuControllableDevicesSheet *)v3 initWithMenu:v2 interDeviceCommunicator:v5];

  [(SCATMenu *)v2 pushSheet:v6];
}

void sub_1000E7554(id a1, SCATMenu *a2)
{
  id v2 = a2;
  id v3 = [(SCATMenu *)v2 delegate];
  [v3 returnControlToForwarderDevice:v2];
}

void sub_1000E75AC(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 activateSOSMode];
}

void sub_1000E75F4(uint64_t a1, void *a2)
{
  id v2 = a2;
  [(id)objc_opt_class() _handleSysdiagnose:v2];
}

void sub_1000E7648(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 rebootDevice];
}

void sub_1000E7690(id a1, SCATMenu *a2)
{
  id v3 = a2;
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 toggleDock];

  [(SCATMenu *)v3 didPressScreenChangingButton];
}

void sub_1000E76F8(id a1, SCATMenu *a2)
{
  id v3 = a2;
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 armApplePay];

  [(SCATMenu *)v3 didPressScreenChangingButton];
}

void sub_1000E7760(id a1, SCATMenu *a2)
{
  id v2 = a2;
  +[LAContext notifyEvent:1];
  [(SCATMenu *)v2 didPressScreenChangingButton];
}

void sub_1000E77BC(id a1, SCATMenu *a2)
{
  BOOL v2 = _AXSCommandAndControlEnabled() == 0;

  __AXSCommandAndControlSetEnabled(v2);
}

void sub_1000E77EC(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 pressCameraButton];
}

void sub_1000E7834(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 lightPressCameraButton];
}

void sub_1000E787C(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 doubleLightPressCameraButton];
}

void sub_1000E78C4(id a1, SCATMenu *a2)
{
  id v2 = +[AXPISystemActionHelper sharedInstance];
  [v2 openVisualIntelligence];
}

void sub_1000E7A04(id a1, NSError *a2)
{
  if (a2) {
    _AXLogWithFacility();
  }
}

void sub_1000E7B10(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 delegate];
  [v5 menu:*(void *)(a1 + 32) showSysdiagnoseDisplayString:v4];
}

uint64_t sub_1000E7CBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = sub_100040830();
  if (AXDeviceHasStaccato())
  {
    id v5 = sub_100041058(@"ACTION_BUTTON");
    [v3 setTitle:v5];

    id v6 = +[UIImage systemImageNamed:@"square.3.layers.3d"];
    int v7 = [v6 imageWithRenderingMode:2];
    [v3 setImage:v7];

    id v3 = v6;
  }
  else
  {
    int v8 = [*(id *)(a1 + 32) _stringForRingerOn:v4];
    [v3 setTitle:v8];

    if (v4) {
      CFStringRef v9 = @"SCATIcon_device_mute";
    }
    else {
      CFStringRef v9 = @"SCATIcon_device_unmute";
    }
    [v3 setImageName:v9];
  }

  return 1;
}

BOOL sub_1000E7DB4(id a1, SCATModernMenuItem *a2)
{
  id v2 = a2;
  id v3 = (void *)_AXSTripleClickCopyOptions();
  BOOL v4 = +[CLFSystemShellSwitcher sharedSystemShellSwitcher];
  unsigned __int8 v5 = [v4 isClarityBoardEnabled];

  if (v5)
  {
    id v6 = sub_100040EC8(@"TRIPLE_CLICK_ASSISTIVE_ACCESS");
  }
  else
  {
    id v6 = sub_100040EC8(@"TRIPLE_CLICK");
    if ([v3 count] == (id)1)
    {
      int v7 = [v3 firstObject];
      uint64_t v8 = +[AXTripleClickHelpers titleForTripleClickOption:](AXTripleClickHelpers, "titleForTripleClickOption:", [v7 intValue]);
      CFStringRef v9 = (void *)v8;
      if (v8) {
        id v10 = (void *)v8;
      }
      else {
        id v10 = v6;
      }
      id v11 = v10;

      id v6 = v11;
    }
  }
  [(SCATModernMenuItem *)v2 setTitle:v6];

  return 1;
}

BOOL sub_1000E7EBC(id a1, SCATModernMenuItem *a2)
{
  id v2 = a2;
  id v3 = sub_1000410D4(@"CAMERA_BUTTON_VISUAL_INTELLIGENCE");
  [(SCATModernMenuItem *)v2 setTitle:v3];

  BOOL v4 = +[UIImage systemImageNamed:@"apple.intelligence"];
  unsigned __int8 v5 = [v4 imageWithRenderingMode:2];
  [(SCATModernMenuItem *)v2 setImage:v5];

  return 1;
}

BOOL sub_1000E7F54(id a1, SCATModernMenuItem *a2)
{
  return 0;
}

void sub_1000E81B8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) view];
  [v1 setAlpha:1.0];
}

id sub_1000E8200(uint64_t a1)
{
  return [*(id *)(a1 + 32) didPresentWithDisplayContext:*(void *)(a1 + 40) animated:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1000E8330(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) view];
  [v1 setAlpha:0.0];
}

id sub_1000E8378(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) view];
  [v2 removeFromSuperview];

  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 40);

  return _[v3 didDismiss:v4];
}

uint64_t sub_1000E87A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000F034C(v0, qword_1001F3930);
  sub_1000E881C(v0, (uint64_t)qword_1001F3930);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E881C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

BOOL sub_1000E8854(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000E886C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000E88B4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000E88E0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *CameraInputSourceManager.CameraInputSourceDefaults.previewHeight.unsafeMutableAddressor()
{
  return &static CameraInputSourceManager.CameraInputSourceDefaults.previewHeight;
}

double static CameraInputSourceManager.CameraInputSourceDefaults.previewHeight.getter()
{
  return 160.0;
}

void *CameraInputSourceManager.CameraInputSourceDefaults.previewWidth.unsafeMutableAddressor()
{
  return &static CameraInputSourceManager.CameraInputSourceDefaults.previewWidth;
}

double static CameraInputSourceManager.CameraInputSourceDefaults.previewWidth.getter()
{
  return 120.0;
}

id sub_1000E8964()
{
  id result = [self cyanColor];
  static CameraInputSourceManager.CameraInputSourceDefaults.previewLayerColor = (uint64_t)result;
  return result;
}

uint64_t *CameraInputSourceManager.CameraInputSourceDefaults.previewLayerColor.unsafeMutableAddressor()
{
  if (qword_1001F0C48 != -1) {
    swift_once();
  }
  return &static CameraInputSourceManager.CameraInputSourceDefaults.previewLayerColor;
}

id static CameraInputSourceManager.CameraInputSourceDefaults.previewLayerColor.getter()
{
  if (qword_1001F0C48 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static CameraInputSourceManager.CameraInputSourceDefaults.previewLayerColor;

  return v0;
}

void sub_1000E8A48(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates) + 16);
  if (*(void *)(a1 + 16))
  {
    if (!v2) {
      sub_1000EA578();
    }
  }
  else if (v2)
  {
    sub_1000EA3A8();
  }
  if (!*(void *)(*(void *)(v1 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates) + 16))
  {
    id v3 = *(void **)(v1 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession);
    if (v3)
    {
      if ([v3 isRunning])
      {
        sub_1000EA578();
      }
    }
  }
}

uint64_t variable initialization expression of CameraInputSourceManager.captureOutputPreview()
{
  return 0;
}

id sub_1000E8AE4()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSessionPreset);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void sub_1000E8B3C(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSessionPreset);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_1000E8B90())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000E8BF0()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputPixelFormat);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1000E8C38(int a1)
{
  id v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputPixelFormat);
  uint64_t result = swift_beginAccess();
  *id v3 = a1;
  return result;
}

uint64_t (*sub_1000E8C84())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000E8CE0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x120))();
  *a2 = result;
  return result;
}

void sub_1000E8D44(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = (void **)(*a2 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputPreview);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = v2;
  id v5 = v2;
}

void *CameraInputSourceManager.captureOutputPreview.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputPreview);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_1000E8DF8(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputPreview);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

id CameraInputSourceManager.isPreviewEnabled.getter()
{
  id v0 = [self sharedInstance];
  id v1 = [v0 assistiveTouchCameraSwitchPreviewEnabled];

  return v1;
}

void CameraInputSourceManager.isPreviewEnabled.setter(char a1)
{
  id v2 = [self sharedInstance];
  [v2 setAssistiveTouchCameraSwitchPreviewEnabled:a1 & 1];
}

void (*CameraInputSourceManager.isPreviewEnabled.modify(uint64_t a1))(uint64_t a1)
{
  id v2 = self;
  *(void *)a1 = v2;
  id v3 = [v2 sharedInstance];
  unsigned __int8 v4 = [v3 assistiveTouchCameraSwitchPreviewEnabled];

  *(unsigned char *)(a1 + 8) = v4;
  return sub_1000E8F98;
}

void sub_1000E8F98(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  id v2 = [*(id *)a1 sharedInstance];
  [v2 setAssistiveTouchCameraSwitchPreviewEnabled:v1];
}

id sub_1000E9004()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CameraInputSourceManager()) init];
  qword_1001F3950 = (uint64_t)result;
  return result;
}

uint64_t *sub_1000E9034()
{
  if (qword_1001F0C50 != -1) {
    swift_once();
  }
  return &qword_1001F3950;
}

id sub_1000E9080()
{
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  *(void *)&v0[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputPreview] = 0;
  uint64_t v6 = qword_1001F0C40;
  int v7 = v0;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1000E881C(v8, (uint64_t)qword_1001F3930);
  CFStringRef v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Initializing Camera Input Source Manager.", v11, 2u);
    swift_slowDealloc();
  }

  *(void *)&v7[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates] = &_swiftEmptyArrayStorage;
  *(void *)&v7[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_layers] = sub_1000E9558((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)&v7[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSessionPreset] = AVCaptureSessionPreset640x480;
  *(_DWORD *)&v7[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputPixelFormat] = 875704422;
  sub_1000F00F4(0, &qword_1001EFA90);
  uint64_t v12 = AVCaptureSessionPreset640x480;
  static DispatchQoS.unspecified.getter();
  CGPoint v17 = &_swiftEmptyArrayStorage;
  sub_1000EFAB0(&qword_1001EFA98, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000EED9C(&qword_1001EFAA0);
  sub_1000F0130(&qword_1001EFAA8, &qword_1001EFAA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v15);
  *(void *)&v7[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  id v13 = (objc_class *)type metadata accessor for CameraInputSourceManager();
  v16.receiver = v7;
  v16.super_class = v13;
  return objc_msgSendSuper2(&v16, "init");
}

unint64_t sub_1000E942C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000EED9C(&qword_1001EFA70);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  id v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000EFB9C(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000EE1C8(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    id v11 = (uint64_t *)(v3[6] + 16 * result);
    *id v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000EFC04(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E9558(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000EED9C((uint64_t *)&unk_1001EFAB0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_1000EE1C8(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v11 = (uint64_t *)(v2[6] + 16 * result);
    *id v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id CameraInputSourceManager.__deallocating_deinit()
{
  uint64_t v1 = v0;
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3930);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deinitializing Camera Input Source Manager.", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = (void **)&v1[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputPreview];
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*v6)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    aBlock[4] = sub_1000E98C0;
    aBlock[5] = v8;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000E98D0;
    aBlock[3] = &unk_1001AEF30;
    CFStringRef v9 = _Block_copy(aBlock);
    id v10 = v7;
    swift_release();
    AXPerformBlockSynchronouslyOnMainThread();
    _Block_release(v9);
  }
  id v11 = (objc_class *)type metadata accessor for CameraInputSourceManager();
  v14.receiver = v1;
  v14.super_class = v11;
  return objc_msgSendSuper2(&v14, "dealloc");
}

uint64_t type metadata accessor for CameraInputSourceManager()
{
  return self;
}

uint64_t sub_1000E9888()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000E98C0()
{
  return [*(id *)(v0 + 16) removeFromSuperview];
}

uint64_t sub_1000E98D0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1000E9914(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E9924()
{
  return swift_release();
}

void CameraInputSourceManager.addObserver<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v4 = v3;
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1000E881C(v8, (uint64_t)qword_1001F3930);
  id v9 = a1;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    double v27 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    id v13 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v27 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Adding observer: %@", v12, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if ((*(uint64_t (**)(id, uint64_t, uint64_t))((swift_isaMask & *v4) + 0x168))(v9, a2, a3))
  {
    id v14 = v9;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      long long v17 = (uint8_t *)swift_slowAlloc();
      CGRect v18 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v17 = 138412290;
      id v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *CGRect v18 = v14;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Observer has already been added. Ignoring observer: %@", v17, 0xCu);
      sub_1000EED9C(&qword_1001EF8F8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    uint64_t v20 = OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates;
    uint64_t v21 = *(char **)((char *)v4 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates);
    id v22 = v9;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = sub_1000EDA60(0, *((void *)v21 + 2) + 1, 1, v21);
    }
    unint64_t v24 = *((void *)v21 + 2);
    unint64_t v23 = *((void *)v21 + 3);
    if (v24 >= v23 >> 1) {
      uint64_t v21 = sub_1000EDA60((char *)(v23 > 1), v24 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v24 + 1;
    double v25 = &v21[16 * v24];
    *((void *)v25 + 4) = v22;
    *((void *)v25 + 5) = a3;
    uint64_t v26 = *(void *)((char *)v4 + v20);
    *(void *)((char *)v4 + v20) = v21;
    sub_1000E8A48(v26);
    swift_bridgeObjectRelease();
  }
}

uint64_t CameraInputSourceManager.removeObserver<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1000E881C(v7, (uint64_t)qword_1001F3930);
  id v8 = a1;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v23 = a3;
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v11 = 138412290;
    id v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v8;

    a3 = v23;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Removing observer: %@", v11, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v3;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t result = sub_1000EEC14((uint64_t)v8, v4, v14, a3);
  if ((v16 & 1) == 0)
  {
    unint64_t v17 = result;
    CGRect v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Removing observer at index: %ld", v20, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v21 = OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates;
    uint64_t v24 = *(void *)(v4 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates);
    swift_bridgeObjectRetain();

    uint64_t v22 = *(void *)(v4 + v21);
    *(void *)(v4 + v21) = v24;
    sub_1000E8A48(v22);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000EA054(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_1000EE324((uint64_t)v3);
  }
  unint64_t v4 = *((void *)v3 + 2);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      uint64_t v7 = &v3[16 * a1];
      uint64_t v8 = *((void *)v7 + 4);
      memmove(v7 + 32, v7 + 48, 16 * v6);
      *((void *)v3 + 2) = v5;
      char *v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL CameraInputSourceManager.containsObserver<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_1000E881C(v7, (uint64_t)qword_1001F3930);
  id v8 = a1;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v11 = 138412290;
    id v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Checking if we already have observer: %@", v11, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_1000EEC14((uint64_t)v8, v4, v14, a3);
  char v16 = v15;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  if (v16)
  {
    if (v19)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      os_log_type_t v21 = v18;
      uint64_t v22 = "Did not find observer.";
      goto LABEL_11;
    }
  }
  else if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    os_log_type_t v21 = v18;
    uint64_t v22 = "Found observer.";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v17, v21, v22, v20, 2u);
    swift_slowDealloc();
  }

  return (v16 & 1) == 0;
}

void sub_1000EA3A8()
{
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000E881C(v1, (uint64_t)qword_1001F3930);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Will start running", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession;
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession);
  if (!v6) {
    goto LABEL_13;
  }
  if ([v6 isRunning])
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Already running. Ignoring", v8, 2u);
      swift_slowDealloc();
    }

    return;
  }
  id v9 = *(void **)(v0 + v5);
  if (!v9)
  {
LABEL_13:
    sub_1000EA800();
    sub_1000EABAC();
    id v9 = *(void **)(v0 + v5);
  }

  [v9 startRunning];
}

void sub_1000EA578()
{
  uint64_t v1 = v0;
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3930);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Will stop running", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(void **)((char *)v0 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession);
  if (v6 && [v6 isRunning])
  {
    sub_1000EB31C();
    os_log_type_t v7 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x120))();
    if (v7)
    {

      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v0;
      aBlock[4] = sub_1000EFE9C;
      aBlock[5] = v8;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000E98D0;
      aBlock[3] = &unk_1001AF2E0;
      id v9 = _Block_copy(aBlock);
      id v10 = v1;
      swift_release();
      AXPerformBlockSynchronouslyOnMainThread();
      _Block_release(v9);
    }
  }
  else
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Already stopped running. Ignoring.", v12, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1000EA800()
{
  uint64_t v1 = v0;
  id v12 = [objc_allocWithZone((Class)AVCaptureSession) init];
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3930);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_beginAccess();
    id v7 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Setting up new capture session: %@", v5, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  sub_1000EB58C(&v12);
  swift_endAccess();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Done setting up capture session.", v10, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v11 = *(void **)(v1 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession);
  *(void *)(v1 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession) = v12;
}

void sub_1000EABAC()
{
  uint64_t v1 = v0;
  if (((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x138))() & 1) == 0) {
    return;
  }
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession);
  if (!v2)
  {
    if (qword_1001F0C40 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_1000E881C(v9, (uint64_t)qword_1001F3930);
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "Attempting to setup camera preview when no capture session is configured.", v11, 2u);
      swift_slowDealloc();
    }
    goto LABEL_13;
  }
  os_log_type_t v3 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x120);
  oslog = v2;
  os_log_type_t v4 = (void *)v3();

  if (v4)
  {
    if (qword_1001F0C40 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_1000E881C(v5, (uint64_t)qword_1001F3930);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Camera preview is already setup. No need to setup again.", v8, 2u);
      swift_slowDealloc();
    }

LABEL_13:

    return;
  }
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_1000E881C(v12, (uint64_t)qword_1001F3930);
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    char v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Setting up capture preview", v15, 2u);
    swift_slowDealloc();
  }

  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  sub_1000E881C(v12, (uint64_t)qword_1001F3930);
  char v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Setting up camera output preview.", v18, 2u);
    swift_slowDealloc();
  }

  id v19 = [self greenColor];
  id v20 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  [v20 setBackgroundColor:v19];
  id v21 = [v20 layer];
  id v22 = [v19 CGColor];
  [v21 setBorderColor:v22];

  id v23 = [v20 layer];
  [v23 setBorderWidth:2.0];

  id v24 = [v20 layer];
  [v24 setCornerRadius:5.0];

  id v25 = [v20 layer];
  [v25 setMasksToBounds:1];

  [v20 setTranslatesAutoresizingMaskIntoConstraints:0];
  id v26 = [objc_allocWithZone((Class)AVCaptureVideoPreviewLayer) initWithSession:oslog];
  [v26 setFrame:sub_1000EFC28()];
  id v27 = [v20 layer];
  [v27 addSublayer:v26];

  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v20;
  aBlock[4] = sub_1000EFC44;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000E98D0;
  aBlock[3] = &unk_1001AF290;
  id v29 = _Block_copy(aBlock);
  id v30 = v20;
  swift_release();
  AXPerformBlockSynchronouslyOnMainThread();
  _Block_release(v29);

  id v31 = v30;
  CGFloat v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    double v34 = (uint8_t *)swift_slowAlloc();
    double v35 = (void *)swift_slowAlloc();
    *(_DWORD *)double v34 = 138412290;
    aBlock[0] = v31;
    id v36 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v35 = v31;

    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Created capture output preview: %@", v34, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  CGFloat v37 = (void **)((char *)v1 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputPreview);
  swift_beginAccess();
  double v38 = *v37;
  NSObject *v37 = v31;
}

void sub_1000EB31C()
{
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_1000E881C(v1, (uint64_t)qword_1001F3930);
  uint64_t v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    os_log_type_t v7 = *(void **)&v2[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession];
    if (v7)
    {
      uint64_t v11 = *(void *)&v2[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession];
      id v8 = v7;
    }
    else
    {
      uint64_t v11 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Tearing down capture session: %@", v5, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v9 = OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession;
  objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureSession], "stopRunning", v11);
  os_log_type_t v10 = *(void **)&v2[v9];
  *(void *)&v2[v9] = 0;
}

uint64_t sub_1000EB528(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 9; ; ++i)
  {
    uint64_t v4 = i - 7;
    if (__OFADD__(i - 8, 1)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

void sub_1000EB58C(id *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  BOOL v5 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xB8))();
  sub_1000EED9C(&qword_1001EFA80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100197A90;
  AVCaptureDeviceType v7 = AVCaptureDeviceTypeBuiltInWideAngleCamera;
  *(void *)(v6 + 32) = AVCaptureDeviceTypeBuiltInUltraWideCamera;
  *(void *)(v6 + 40) = AVCaptureDeviceTypeBuiltInWideAngleCamera;
  type metadata accessor for DeviceType(0);
  id v8 = AVCaptureDeviceTypeBuiltInUltraWideCamera;
  uint64_t v9 = AVCaptureDeviceTypeBuiltInWideAngleCamera;
  os_log_type_t v10 = AVMediaTypeVideo;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = [self discoverySessionWithDeviceTypes:isa mediaType:v10 position:2];

  id v13 = [v12 devices];
  sub_1000F00F4(0, &qword_1001EFA88);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v14 >> 62))
  {
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();

    AVCaptureDeviceType v7 = 0;
    if (v2) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v25) {
    goto LABEL_18;
  }
LABEL_3:
  double v75 = v5;
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_59:
      swift_once();
      goto LABEL_9;
    }
    id v15 = *(id *)(v14 + 32);
  }
  char v16 = v15;
  swift_bridgeObjectRelease();
  id v17 = objc_allocWithZone((Class)AVCaptureDeviceInput);
  v78[0] = 0;
  BOOL v5 = v16;
  AVCaptureDeviceType v7 = (AVCaptureDeviceType)[v17 initWithDevice:v5 error:v78];
  os_log_type_t v18 = v78[0];
  if (v7)
  {

    goto LABEL_13;
  }
  id v19 = v18;
  uint64_t v3 = _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_1001F0C40 != -1) {
    goto LABEL_59;
  }
LABEL_9:
  uint64_t v20 = type metadata accessor for Logger();
  sub_1000E881C(v20, (uint64_t)qword_1001F3930);
  swift_errorRetain();
  swift_errorRetain();
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    double v72 = v10;
    id v23 = (uint8_t *)swift_slowAlloc();
    v71 = (NSString *)swift_slowAlloc();
    *(_DWORD *)id v23 = 138412290;
    swift_errorRetain();
    id v24 = _swift_stdlib_bridgeErrorToNSError();
    v78[0] = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    AVCaptureDeviceType v7 = v71;
    NSString *v71 = v24;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Could not create capture device input. Error: %@", v23, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    os_log_type_t v10 = v72;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
LABEL_13:
  BOOL v5 = v75;
  if (v3)
  {
LABEL_14:
    swift_errorRelease();
LABEL_15:

    return;
  }
LABEL_19:

  if (v7)
  {
    id v26 = *a1;
    if (([*a1 canAddInput:v7] & 1) == 0)
    {
      if (qword_1001F0C40 != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      sub_1000E881C(v49, (uint64_t)qword_1001F3930);
      double v50 = v7;
      CGRect v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        double v77 = v51;
        CGRect v53 = (uint8_t *)swift_slowAlloc();
        CGRect v54 = (void *)swift_slowAlloc();
        *(_DWORD *)CGRect v53 = 138412290;
        v78[0] = v50;
        CGRect v55 = v50;
        BOOL v5 = v77;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *CGRect v54 = v7;

        _os_log_impl((void *)&_mh_execute_header, v77, v52, "Could not create capture output. Could not add capture device input: %@", v53, 0xCu);
        sub_1000EED9C(&qword_1001EF8F8);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        BOOL v5 = v50;
      }
      goto LABEL_15;
    }
    double v73 = v10;
    [v26 addInput:v7];
    uint64_t v27 = OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputQueue;
    uint64_t v28 = *(uint64_t (**)(void))((swift_isaMask & *v4) + 0xD0);
    id v29 = *(id *)((char *)v4 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputQueue);
    uint64_t v30 = v28();
    id v31 = [objc_allocWithZone((Class)AVCaptureVideoDataOutput) init];
    uint64_t v32 = AVCaptureVideoDataOutput.availableVideoPixelFormatTypes.getter();
    char v33 = sub_1000EB528(v30, v32);
    swift_bridgeObjectRelease();
    if (v33)
    {
      [v31 setAlwaysDiscardsLateVideoFrames:1];
      sub_1000EED9C(&qword_1001EFA68);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100197AA0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v35;
      *(void *)(inited + 72) = &type metadata for UInt32;
      *(_DWORD *)(inited + 48) = v30;
      sub_1000E942C(inited);
      Class v36 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v31 setVideoSettings:v36];

      [v31 setSampleBufferDelegate:v4 queue:v29];
      if (v31)
      {
        if ([v26 canAddOutput:v31])
        {
          [v26 addOutput:v31];
          CGFloat v37 = [v31 connectionWithMediaType:v73];
          if (v37)
          {
            double v76 = v37;
            if ([v37 isCameraIntrinsicMatrixDeliverySupported])[v76 setCameraIntrinsicMatrixDeliveryEnabled:1]; {
            double v38 = *(void **)((char *)v4 + v27);
            }
            id v39 = objc_allocWithZone((Class)AVCaptureMetadataOutput);
            id v40 = v38;
            id v41 = [v39 init];
            [v41 setMetadataObjectsDelegate:v4 queue:v40];

            if ([v26 canAddOutput:v41])
            {
              [v26 addOutput:v41];
              id v42 = [v41 availableMetadataObjectTypes];
              type metadata accessor for ObjectType(0);
              CGFloat v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              v78[0] = v43;
              sub_1000EED9C(&qword_1001EFA48);
              uint64_t v44 = swift_allocObject();
              *(_OWORD *)(v44 + 16) = xmmword_100197AA0;
              *(void *)(v44 + 32) = AVMetadataObjectTypeFace;
              uint64_t v79 = v44;
              double v70 = AVMetadataObjectTypeFace;
              sub_1000EED9C(&qword_1001EFA50);
              sub_1000F0130(&qword_1001EFA58, &qword_1001EFA50);
              sub_1000EFAB0(&qword_1001EFA60, type metadata accessor for ObjectType);
              char v45 = Collection<>.contains<A>(_:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v45)
              {
                uint64_t v46 = swift_allocObject();
                *(_OWORD *)(v46 + 16) = xmmword_100197AA0;
                *(void *)(v46 + 32) = v70;
                double v47 = v70;
                Class v48 = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                [v41 setMetadataObjectTypes:v48];
              }
              BOOL v5 = v76;
            }
            else
            {
              if (qword_1001F0C40 != -1) {
                swift_once();
              }
              uint64_t v66 = type metadata accessor for Logger();
              sub_1000E881C(v66, (uint64_t)qword_1001F3930);
              long long v67 = Logger.logObject.getter();
              os_log_type_t v68 = static os_log_type_t.error.getter();
              BOOL v5 = v76;
              if (os_log_type_enabled(v67, v68))
              {
                double v69 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)double v69 = 0;
                _os_log_impl((void *)&_mh_execute_header, v67, v68, "Could not create capture output. Could not add capture metadata output.", v69, 2u);
                swift_slowDealloc();
              }
              else
              {
              }
            }
          }
          else
          {

            BOOL v5 = v31;
          }
        }
        else
        {
          if (qword_1001F0C40 != -1) {
            swift_once();
          }
          uint64_t v63 = type metadata accessor for Logger();
          sub_1000E881C(v63, (uint64_t)qword_1001F3930);
          BOOL v5 = Logger.logObject.getter();
          os_log_type_t v64 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v5, v64))
          {
            long long v65 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)long long v65 = 0;
            _os_log_impl((void *)&_mh_execute_header, v5, v64, "Could not create capture output. Could not add capture device output", v65, 2u);
            swift_slowDealloc();
          }
          else
          {

            BOOL v5 = v31;
          }
        }
        goto LABEL_15;
      }
    }
    else
    {
      if (qword_1001F0C40 != -1) {
        swift_once();
      }
      uint64_t v56 = type metadata accessor for Logger();
      sub_1000E881C(v56, (uint64_t)qword_1001F3930);
      long long v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        long long v59 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)long long v59 = 67109120;
        LODWORD(v79) = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Could not create capture video data output with pixel format type: %u", v59, 8u);
        swift_slowDealloc();
      }
    }
    if (qword_1001F0C40 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    sub_1000E881C(v60, (uint64_t)qword_1001F3930);
    BOOL v5 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v61))
    {
      long long v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v61, "Could not create capture output. Could not add catpure device output.", v62, 2u);
      swift_slowDealloc();
    }
    else
    {

      BOOL v5 = v7;
    }
    goto LABEL_15;
  }
}

uint64_t CameraInputSourceManager.createLayer(withID:color:width:height:)(uint64_t a1, unint64_t a2, void *a3, double a4, double a5)
{
  uint64_t v11 = (void *)((char *)v5 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_layers);
  uint64_t v12 = swift_beginAccess();
  if (*(void *)(*v11 + 16)
    && (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        sub_1000EE1C8(a1, a2),
        char v14 = v13,
        swift_bridgeObjectRelease(),
        uint64_t v12 = swift_bridgeObjectRelease(),
        (v14 & 1) != 0))
  {
    if (qword_1001F0C40 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_1000E881C(v15, (uint64_t)qword_1001F3930);
    swift_bridgeObjectRetain_n();
    char v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v18 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_1000EDB70(a1, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Layer already exists for ID: (%s.", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = *v11;
    if (*(void *)(*v11 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v36 = sub_1000EE1C8(a1, a2);
      if (v37)
      {
        id v38 = *(id *)(*(void *)(v35 + 56) + 8 * v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)v38;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        __break(1u);
      }
      return result;
    }
    __break(1u);
  }
  else
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v5) + 0x120))(v12);
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      id v21 = [objc_allocWithZone((Class)CALayer) init];
      id v22 = [a3 CGColor];
      [v21 setBorderColor:v22];

      [v21 setBorderWidth:2.0];
      [v21 setCornerRadius:5.0];
      objc_msgSend(v21, "setFrame:", 0.0, 0.0, a4, a5);
      [v21 setHidden:1];
      swift_beginAccess();
      swift_bridgeObjectRetain();
      id v23 = v21;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v40 = *v11;
      *uint64_t v11 = 0x8000000000000000;
      sub_1000EE8F0((uint64_t)v23, a1, a2, isUniquelyReferenced_nonNull_native);
      *uint64_t v11 = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v25 = (void *)swift_allocObject();
      v25[2] = a1;
      v25[3] = a2;
      v25[4] = v23;
      v25[5] = v20;
      aBlock[4] = (uint64_t)sub_1000EEE7C;
      aBlock[5] = (uint64_t)v25;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000E98D0;
      aBlock[3] = (uint64_t)&unk_1001AEF80;
      id v26 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      id v27 = v23;
      id v28 = v20;
      swift_release();
      AXPerformBlockAsynchronouslyOnMainThread();
      _Block_release(v26);

      return (uint64_t)v27;
    }
    if (qword_1001F0C40 == -1) {
      goto LABEL_10;
    }
  }
  swift_once();
LABEL_10:
  uint64_t v30 = type metadata accessor for Logger();
  sub_1000E881C(v30, (uint64_t)qword_1001F3930);
  id v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    char v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Capture output preview is not setup!", v33, 2u);
    swift_slowDealloc();
  }

  sub_1000EEDE0();
  swift_allocError();
  *double v34 = 1;
  return swift_willThrow();
}

void CameraInputSourceManager.updateLayer(withID:frame:transform:isHidden:color:)(uint64_t a1, unint64_t a2, uint64_t a3, char a4, void *a5, double a6, double a7, double a8, double a9)
{
  uint64_t v10 = v9;
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_1000E881C(v20, (uint64_t)qword_1001F3930);
  swift_bridgeObjectRetain_n();
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v36 = a4;
    id v23 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)id v23 = 136315138;
    swift_bridgeObjectRetain();
    aBlock[7] = sub_1000EDB70(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Attepting to update layer for id: %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v36;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v24 = (uint64_t *)(v10 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_layers);
  swift_beginAccess();
  uint64_t v25 = *v24;
  if (*(void *)(*v24 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_1000EE1C8(a1, a2);
    if (v27)
    {
      id v28 = *(id *)(*(void *)(v25 + 56) + 8 * v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = a5;
      *(double *)(v29 + 32) = a6;
      *(double *)(v29 + 40) = a7;
      *(double *)(v29 + 48) = a8;
      *(double *)(v29 + 56) = a9;
      *(unsigned char *)(v29 + 64) = a4 & 1;
      sub_1000EF128(a3, v29 + 72);
      aBlock[4] = (uint64_t)sub_1000EF190;
      aBlock[5] = v29;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000E98D0;
      aBlock[3] = (uint64_t)&unk_1001AEFD0;
      uint64_t v30 = _Block_copy(aBlock);
      id v31 = a5;
      id v32 = v28;
      swift_release();
      AXPerformBlockSynchronouslyOnMainThread();
      _Block_release(v30);

      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain_n();
  char v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t aBlock[6] = sub_1000EDB70(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "No layer exists for ID: (%s.", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

Swift::Bool __swiftcall CameraInputSourceManager.removeLayer(withID:)(Swift::String withID)
{
  object = withID._object;
  uint64_t countAndFlagsBits = withID._countAndFlagsBits;
  swift_beginAccess();
  uint64_t v3 = (void *)sub_1000EE338(countAndFlagsBits, (uint64_t)object);
  swift_endAccess();
  if (v3)
  {
    uint64_t v4 = (void *)swift_allocObject();
    void v4[2] = countAndFlagsBits;
    _OWORD v4[3] = object;
    void v4[4] = v3;
    aBlock[4] = (uint64_t)sub_1000EF464;
    aBlock[5] = (uint64_t)v4;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000E98D0;
    aBlock[3] = (uint64_t)&unk_1001AF020;
    BOOL v5 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    id v6 = v3;
    swift_release();
    AXPerformBlockSynchronouslyOnMainThread();

    _Block_release(v5);
  }
  else
  {
    if (qword_1001F0C40 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_1000E881C(v7, (uint64_t)qword_1001F3930);
    swift_bridgeObjectRetain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t aBlock[6] = sub_1000EDB70(countAndFlagsBits, (unint64_t)object, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to remove CALayer for ID: %s. No layer with that ID exists.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  return v3 != 0;
}

CALayer_optional __swiftcall CameraInputSourceManager.layer(withID:)(Swift::String withID)
{
  object = withID._object;
  uint64_t countAndFlagsBits = withID._countAndFlagsBits;
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_layers);
  swift_beginAccess();
  uint64_t v6 = *v4;
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1000EE1C8(countAndFlagsBits, (uint64_t)object);
    if (v8)
    {
      os_log_type_t v9 = *(void **)(*(void *)(v6 + 56) + 8 * v7);
      id v10 = v9;
    }
    else
    {
      os_log_type_t v9 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    os_log_type_t v9 = 0;
  }
  uint64_t v11 = (objc_class *)v9;
  result.value.super.Class isa = v11;
  result.is_nil = v5;
  return result;
}

Swift::Void __swiftcall CameraInputSourceManager.metadataOutput(_:didOutput:from:)(AVCaptureMetadataOutput _, Swift::OpaquePointer didOutput, AVCaptureConnection from)
{
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    internal = _._internal;
    Class isa = _.super.super.isa;
    outputInternal = _.super._outputInternal;
    swift_bridgeObjectRetain();
    unint64_t v7 = (uint64_t *)(v4 + 40);
    uint64_t v8 = v3;
    do
    {
      os_log_type_t v9 = (void *)*(v7 - 1);
      uint64_t v10 = *v7;
      Objectint Type = swift_getObjectType();
      uint64_t v12 = *(void (**)(uint64_t, Class, AVCaptureOutputInternal *, AVCaptureMetadataOutputInternal *, uint64_t, uint64_t))(v10 + 16);
      id v13 = v9;
      v12(v8, isa, outputInternal, internal, ObjectType, v10);

      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall CameraInputSourceManager.captureOutput(_:didOutput:from:)(AVCaptureOutput _, CMSampleBufferRef didOutput, AVCaptureConnection from)
{
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    Class isa = _.super.isa;
    outputInternal = _._outputInternal;
    swift_bridgeObjectRetain();
    unint64_t v7 = (uint64_t *)(v4 + 40);
    uint64_t v8 = v3;
    do
    {
      os_log_type_t v9 = (void *)*(v7 - 1);
      uint64_t v10 = *v7;
      Objectint Type = swift_getObjectType();
      uint64_t v12 = *(void (**)(uint64_t, Class, AVCaptureOutputInternal *, CMSampleBufferRef, uint64_t, uint64_t))(v10 + 24);
      id v13 = v9;
      v12(v8, isa, outputInternal, didOutput, ObjectType, v10);

      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall CameraInputSourceManager.captureOutput(_:didDrop:from:)(AVCaptureOutput _, CMSampleBufferRef didDrop, AVCaptureConnection from)
{
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    Class isa = _.super.isa;
    outputInternal = _._outputInternal;
    swift_bridgeObjectRetain();
    unint64_t v7 = (uint64_t *)(v4 + 40);
    uint64_t v8 = v3;
    do
    {
      os_log_type_t v9 = (void *)*(v7 - 1);
      uint64_t v10 = *v7;
      Objectint Type = swift_getObjectType();
      uint64_t v12 = *(void (**)(uint64_t, Class, AVCaptureOutputInternal *, CMSampleBufferRef, uint64_t, uint64_t))(v10 + 32);
      id v13 = v9;
      v12(v8, isa, outputInternal, didDrop, ObjectType, v10);

      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000ED498(uint64_t a1, uint64_t a2)
{
  return sub_1000ED8C8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000ED4BC(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000ED534(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000ED5B4@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000ED600@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000ED62C(uint64_t a1)
{
  uint64_t v2 = sub_1000EFAB0(&qword_1001EFB18, type metadata accessor for DeviceType);
  uint64_t v3 = sub_1000EFAB0(&qword_1001EFB20, type metadata accessor for DeviceType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000ED6E8@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000ED730(uint64_t a1)
{
  uint64_t v2 = sub_1000EFAB0(&qword_1001EFA30, type metadata accessor for Preset);
  uint64_t v3 = sub_1000EFAB0(&qword_1001EFA38, type metadata accessor for Preset);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000ED7EC(uint64_t a1)
{
  uint64_t v2 = sub_1000EFAB0(&qword_1001EFB28, type metadata accessor for ObjectType);
  uint64_t v3 = sub_1000EFAB0((unint64_t *)&unk_1001EFB30, type metadata accessor for ObjectType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000ED8A8(uint64_t a1, uint64_t a2)
{
  return sub_1000ED8C8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000ED8C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000ED90C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000ED960()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000ED9D4()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

char *sub_1000EDA60(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000EED9C(&qword_1001EFAC0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      id v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      id v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000F0240(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EDB70(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000EDC44(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    Objectint Type = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000F01E0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    Objectint Type = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000F01E0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1000F0190((uint64_t)v12);
  return v7;
}

uint64_t sub_1000EDC44(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1000EDE00(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1000EDE00(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000EDE98(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000EE078(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000EE078(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000EDE98(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1000EE010(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1000EE010(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000EED9C(&qword_1001F0080);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  void v4[2] = a1;
  _OWORD v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000EE078(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000EED9C(&qword_1001F0080);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_1000EE1C8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000EE240(a1, a2, v4);
}

unint64_t sub_1000EE240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        id v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

char *sub_1000EE324(uint64_t a1)
{
  return sub_1000EDA60(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000EE338(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000EE1C8(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000EEA60();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1000EE718(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1000EE408(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000EED9C((uint64_t *)&unk_1001EFAB0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    os_log_type_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    id v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    os_log_type_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *os_log_type_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  os_log_type_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *os_log_type_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_1000EE718(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            void *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1000EE8F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000EE1C8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000EEA60();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1000EE408(v15, a4 & 1);
  unint64_t v20 = sub_1000EE1C8(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

id sub_1000EEA60()
{
  uint64_t v1 = v0;
  sub_1000EED9C((uint64_t *)&unk_1001EFAB0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000EEC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_delegates);
  uint64_t v21 = *(void *)(v4 + 16);
  if (!v21) {
    return 0;
  }
  Objectint Type = swift_getObjectType();
  int64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  uint64_t v23 = ObjectType;
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  for (uint64_t i = (uint64_t *)(v4 + 40); ; i += 2)
  {
    int64_t v9 = (void *)*(i - 1);
    uint64_t v10 = *i;
    uint64_t v11 = swift_getObjectType();
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    id v13 = v9;
    uint64_t v14 = v12(v11, v10);
    uint64_t v16 = v15;
    if (v14 == v22(v23, a4) && v16 == v17)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return v7;
    }
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    if (v21 == ++v7)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000EED9C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000EEDE0()
{
  unint64_t result = qword_1001EF900;
  if (!qword_1001EF900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EF900);
  }
  return result;
}

uint64_t sub_1000EEE34()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000EEE7C()
{
  uint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  uint64_t v3 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_1000E881C(v5, (uint64_t)qword_1001F3930);
  swift_bridgeObjectRetain_n();
  id v6 = v3;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v13 = v4;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_bridgeObjectRetain();
    sub_1000EDB70(v2, v1, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2112;
    id v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v6;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Adding CALayer for ID: %s. Layer: %@", (uint8_t *)v9, 0x16u);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v13;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  id v12 = [v4 layer];
  [v12 addSublayer:v6];
}

uint64_t sub_1000EF0E8()
{
  return _swift_deallocObject(v0, 201, 7);
}

uint64_t sub_1000EF128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000EED9C((uint64_t *)&unk_1001F00A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1000EF190()
{
  unint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  double v3 = *(double *)(v0 + 32);
  double v4 = *(double *)(v0 + 40);
  double v5 = *(double *)(v0 + 48);
  double v6 = *(double *)(v0 + 56);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 64);
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v8 = v0 + 72;
  uint64_t v9 = type metadata accessor for Logger();
  sub_1000E881C(v9, (uint64_t)qword_1001F3930);
  id v10 = v1;
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v11, v12))
  {

    if (!v2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unsigned int v20 = v7;
  id v13 = (uint8_t *)swift_slowAlloc();
  uint64_t v19 = v8;
  uint64_t v14 = (void *)swift_slowAlloc();
  *(_DWORD *)id v13 = 138412290;
  *(void *)&v22[0] = v10;
  id v15 = v10;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  void *v14 = v10;

  _os_log_impl((void *)&_mh_execute_header, v11, v12, "Updating layer frame: %@", v13, 0xCu);
  sub_1000EED9C(&qword_1001EF8F8);
  swift_arrayDestroy();
  uint64_t v8 = v19;
  swift_slowDealloc();
  uint64_t v7 = v20;
  swift_slowDealloc();

  if (v2)
  {
LABEL_7:
    id v16 = v2;
    id v17 = [v16 CGColor];
    [v10 setBorderColor:v17];
  }
LABEL_8:
  objc_msgSend(v10, "setFrame:", v3, v4, v5, v6, v19);
  [v10 setHidden:v7];
  sub_1000EF128(v8, (uint64_t)v22);
  id result = (id)sub_1000F0174((uint64_t)v22);
  if (result != 1)
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v21[3] = v22[3];
    v21[4] = v22[4];
    v21[5] = v22[5];
    v21[6] = v22[6];
    v21[7] = v22[7];
    return [v10 setTransform:v21];
  }
  return result;
}

uint64_t sub_1000EF424()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_1000EF464()
{
  uint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  double v3 = (void *)v0[4];
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1000E881C(v4, (uint64_t)qword_1001F3930);
  swift_bridgeObjectRetain_n();
  id v5 = v3;
  double v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    sub_1000EDB70(v2, v1, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2112;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Removing CALayer for ID: %s. Layer: %@", (uint8_t *)v8, 0x16u);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  return [v5 removeFromSuperlayer];
}

unint64_t sub_1000EF6AC()
{
  unint64_t result = qword_1001EF910;
  if (!qword_1001EF910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EF910);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for CameraInputSourceManager.CameraInputSourceError(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CameraInputSourceManager.CameraInputSourceError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CameraInputSourceManager.CameraInputSourceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EF86CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1000EF894(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000EF89C(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CameraInputSourceManager.CameraInputSourceError()
{
  return &type metadata for CameraInputSourceManager.CameraInputSourceError;
}

ValueMetadata *type metadata accessor for CameraInputSourceManager.CameraInputSourceDefaults()
{
  return &type metadata for CameraInputSourceManager.CameraInputSourceDefaults;
}

void type metadata accessor for Preset(uint64_t a1)
{
}

uint64_t sub_1000EF8DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_1000EF910(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_1000EF934(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000EF954(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for CATransform3D(uint64_t a1)
{
}

__n128 sub_1000EF9B4(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000EF9C0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000EF9E0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

uint64_t sub_1000EFA20()
{
  return sub_1000EFAB0(&qword_1001EFA18, type metadata accessor for Preset);
}

uint64_t sub_1000EFA68()
{
  return sub_1000EFAB0(&qword_1001EFA20, type metadata accessor for Preset);
}

uint64_t sub_1000EFAB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EFAF8()
{
  return sub_1000EFAB0(&qword_1001EFA28, type metadata accessor for Preset);
}

void type metadata accessor for ObjectType(uint64_t a1)
{
}

uint64_t sub_1000EFB54(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000EFB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000EED9C(&qword_1001EFA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1000EFC04(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void type metadata accessor for DeviceType(uint64_t a1)
{
}

double sub_1000EFC28()
{
  return 0.0;
}

void sub_1000EFC44()
{
  unint64_t v1 = *(void **)(v0 + 16);
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3930);
  char v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Adding preview to scanner content view.", v5, 2u);
    swift_slowDealloc();
  }

  id v6 = [self sharedManager];
  if (!v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  long long v7 = v6;
  id v8 = [v6 mainDisplayManager];

  if (!v8)
  {
LABEL_13:
    __break(1u);
    return;
  }
  id v12 = [v8 scannerContentView];

  [v12 addSubview:v1];
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Setting up preview constraints", v11, 2u);
    swift_slowDealloc();
  }

  objc_msgSend(v1, "ax_constrainLayoutAttribute:asEqualToConstant:", 8, 160.0);
  objc_msgSend(v1, "ax_constrainLayoutAttribute:asEqualToConstant:", 7, 120.0);
  objc_msgSend(v1, "ax_constrainLayoutAttribute:asEqualToValueOfView:withOffset:", 2, v12, -5.0);
  objc_msgSend(v1, "ax_constrainLayoutAttribute:asEqualToValueOfView:withOffset:", 3, v12, 5.0);
}

void sub_1000EFE9C()
{
  unint64_t v1 = *(void **)(v0 + 16);
  if (qword_1001F0C40 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3930);
  char v3 = v1;
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    long long v7 = (void *)swift_slowAlloc();
    *(_DWORD *)id v6 = 138412290;
    uint64_t v8 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x120))();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v7 = v8;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Tearing down capture preview: %@", v6, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v9 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x120))();
  [v9 removeFromSuperview];

  os_log_type_t v10 = (void **)((char *)v3 + OBJC_IVAR____TtC15assistivetouchd24CameraInputSourceManager_captureOutputPreview);
  swift_beginAccess();
  id v11 = *v10;
  *os_log_type_t v10 = 0;
}

uint64_t sub_1000F00F4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000F0130(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000EFB54(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F0174(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000F0190(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1000F01E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000F0240(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_1000EED9C(&qword_1001EFAC8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *sub_1000F034C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

__n128 sub_1000F03B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000F03BC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000F03DC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void sub_1000F042C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000F0474()
{
  return sub_1000EFAB0(&qword_1001EFAF0, type metadata accessor for ObjectType);
}

uint64_t sub_1000F04BC()
{
  return sub_1000EFAB0(&qword_1001EFAF8, type metadata accessor for ObjectType);
}

uint64_t sub_1000F0504()
{
  return sub_1000EFAB0(&qword_1001EFA60, type metadata accessor for ObjectType);
}

uint64_t sub_1000F054C()
{
  return sub_1000EFAB0(&qword_1001EFB00, type metadata accessor for DeviceType);
}

uint64_t sub_1000F0594()
{
  return sub_1000EFAB0(&qword_1001EFB08, type metadata accessor for DeviceType);
}

uint64_t sub_1000F05DC()
{
  return sub_1000EFAB0(&qword_1001EFB10, type metadata accessor for DeviceType);
}

void *sub_1000F0670()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___HNDSceneDelegate_window);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_1000F06C0(void *a1)
{
}

uint64_t (*sub_1000F06CC())()
{
  return j_j__swift_endAccess;
}

void *sub_1000F0728()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___HNDSceneDelegate_ignoredWindow);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_1000F0778(void *a1)
{
}

void sub_1000F0784(void *a1, void *a2)
{
  uint64_t v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  unint64_t v5 = *v4;
  *uint64_t v4 = a1;
}

uint64_t (*sub_1000F07D4())()
{
  return j__swift_endAccess;
}

void sub_1000F08C4(uint64_t a1)
{
  id v2 = [self sharedManager];
  if (v2)
  {
    id v3 = v2;
    [v2 sceneDidDisconnect:a1];
  }
  else
  {
    __break(1u);
  }
}

id sub_1000F0A38()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000F0AB8(void *a1)
{
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (!v3)
  {
    static os_log_type_t.error.getter();
    id v13 = (id)ASTLogCommon();
    if (v13)
    {
      uint64_t v14 = v13;
      sub_1000EED9C(&qword_1001EFC38);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_100197AA0;
      *(void *)(v15 + 56) = sub_1000F00F4(0, &qword_1001EFC40);
      *(void *)(v15 + 64) = sub_1000F1048();
      *(void *)(v15 + 32) = a1;
      id v16 = a1;
      os_log(_:dso:log:_:_:)();

      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v4 = (void *)v3;
  sub_1000F00F4(0, (unint64_t *)&qword_1001EFC50);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v47 = a1;
  if (![ObjCClassFromMetadata usesScenes])
  {
LABEL_30:
    char v45 = v47;
    goto LABEL_31;
  }
  id v6 = [v4 screen];
  id v7 = [v6 displayIdentity];

  if (!v7)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  id v8 = [v7 type];

  if (v8 == (id)8)
  {
    static os_log_type_t.info.getter();
    id v9 = (id)ASTLogCommon();
    if (v9)
    {
      os_log_type_t v10 = v9;
      sub_1000EED9C(&qword_1001EFC38);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_100197AA0;
      *(void *)(v11 + 56) = sub_1000F00F4(0, &qword_1001EFC40);
      *(void *)(v11 + 64) = sub_1000F1048();
      *(void *)(v11 + 32) = v47;
      id v12 = v47;
      os_log(_:dso:log:_:_:)();

LABEL_9:
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_36;
  }
  id v17 = [objc_allocWithZone((Class)HNDIgnoredWindow) initWithWindowScene:v4];
  uint64_t v18 = (*(uint64_t (**)(id))((swift_isaMask & *v1) + 0x80))(v17);
  uint64_t v19 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78);
  unsigned int v20 = (void *)((uint64_t (*)(uint64_t))v19)(v18);
  if (v20)
  {
    uint64_t v21 = v20;
    [v20 setWindowLevel:10000011.0];
  }
  int64_t v22 = (void *)v19();
  if (v22)
  {
    uint64_t v23 = v22;
    [v22 setHidden:0];
  }
  uint64_t v24 = v19();
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    id v26 = [objc_allocWithZone((Class)HNDBlankRootViewController) init];
    [v25 setRootViewController:v26];
  }
  id v27 = [objc_allocWithZone((Class)HNDWindow) initWithWindowScene:v4];
  uint64_t v28 = (*(uint64_t (**)(id))((swift_isaMask & *v1) + 0x68))(v27);
  uint64_t v29 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x60);
  uint64_t v30 = (void *)((uint64_t (*)(uint64_t))v29)(v28);
  if (v30)
  {
    uint64_t v31 = v30;
    [v30 makeKeyAndVisible];
  }
  id v32 = (void *)v29();
  if (v32)
  {
    id v33 = v32;
    [v32 setWindowLevel:10000010.0];
  }
  uint64_t v34 = v29();
  if (v34)
  {
    uint64_t v35 = (void *)v34;
    id v36 = [objc_allocWithZone((Class)HNDBlankRootViewController) init];
    [v35 setRootViewController:v36];
  }
  uint64_t v37 = v29();
  if (!v37) {
    goto LABEL_30;
  }
  char v38 = (void *)v37;
  uint64_t v39 = v19();
  if (!v39)
  {

    goto LABEL_30;
  }
  uint64_t v40 = (void *)v39;
  id v41 = self;
  id v42 = [v41 sharedManager];
  if (!v42)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  CGFloat v43 = v42;
  [v42 setupWindow:v38 ignoredWindow:v40];

  id v44 = [v41 sharedManager];
  if (!v44)
  {
LABEL_38:
    __break(1u);
    return;
  }
  id v46 = v44;
  [v44 sceneDidConnect:v47];

  char v45 = v46;
LABEL_31:
}

uint64_t type metadata accessor for SceneDelegate()
{
  return self;
}

unint64_t sub_1000F1048()
{
  unint64_t result = qword_1001EFC48;
  if (!qword_1001EFC48)
  {
    sub_1000F00F4(255, &qword_1001EFC40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFC48);
  }
  return result;
}

unint64_t sub_1000F10B8@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1000F1324(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

BOOL sub_1000F10EC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000F1100()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000F1148()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000F1174()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_1000F11B8@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1000F13BC(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

void sub_1000F11EC(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1000F1200(void *a1, void *a2)
{
  return *a1 == *a2;
}

void sub_1000F1214()
{
  Hasher._combine(_:)(*v0);
}

uint64_t *sub_1000F1240@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return result;
}

void sub_1000F125C(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_1000F1268@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1 && *result != 0;
  *(void *)a2 = *result == 1;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

Swift::Int sub_1000F1298()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000F12E0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_1000F1324(unsigned int a1)
{
  unsigned __int8 v1 = 0;
  uint64_t v2 = a1;
  switch(a1)
  {
    case 0u:
      uint64_t v2 = 0;
      unsigned __int8 v1 = 0;
      break;
    case 1u:
      return v2 | ((unint64_t)v1 << 32);
    case 2u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 2;
      break;
    case 3u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 3;
      break;
    case 4u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 4;
      break;
    default:
      uint64_t v2 = 0;
      unsigned __int8 v1 = 1;
      break;
  }
  return v2 | ((unint64_t)v1 << 32);
}

unint64_t sub_1000F13BC(unsigned int a1)
{
  unsigned __int8 v1 = 0;
  uint64_t v2 = a1;
  switch(a1)
  {
    case 0u:
      uint64_t v2 = 0;
      unsigned __int8 v1 = 0;
      break;
    case 1u:
      return v2 | ((unint64_t)v1 << 32);
    case 2u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 2;
      break;
    case 4u:
      unsigned __int8 v1 = 0;
      uint64_t v2 = 4;
      break;
    default:
      uint64_t v2 = 0;
      unsigned __int8 v1 = 1;
      break;
  }
  return v2 | ((unint64_t)v1 << 32);
}

unint64_t sub_1000F144C()
{
  unint64_t result = qword_1001EFCC0;
  if (!qword_1001EFCC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFCC0);
  }
  return result;
}

unint64_t sub_1000F14A4()
{
  unint64_t result = qword_1001EFCC8;
  if (!qword_1001EFCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFCC8);
  }
  return result;
}

unint64_t sub_1000F14FC()
{
  unint64_t result = qword_1001EFCD0;
  if (!qword_1001EFCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFCD0);
  }
  return result;
}

unint64_t sub_1000F1554()
{
  unint64_t result = qword_1001EFCD8;
  if (!qword_1001EFCD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFCD8);
  }
  return result;
}

unint64_t sub_1000F15AC()
{
  unint64_t result = qword_1001EFCE0;
  if (!qword_1001EFCE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFCE0);
  }
  return result;
}

unint64_t sub_1000F1604()
{
  unint64_t result = qword_1001EFCE8;
  if (!qword_1001EFCE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFCE8);
  }
  return result;
}

unint64_t sub_1000F165C()
{
  unint64_t result = qword_1001EFCF0;
  if (!qword_1001EFCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFCF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for EventType()
{
  return &type metadata for EventType;
}

ValueMetadata *type metadata accessor for DeviceTransportType()
{
  return &type metadata for DeviceTransportType;
}

ValueMetadata *type metadata accessor for DwellMode()
{
  return &type metadata for DwellMode;
}

ValueMetadata *type metadata accessor for HandPinchMode()
{
  return &type metadata for HandPinchMode;
}

ValueMetadata *type metadata accessor for HandPinchState()
{
  return &type metadata for HandPinchState;
}

ValueMetadata *type metadata accessor for ContinuousScrollAxis()
{
  return &type metadata for ContinuousScrollAxis;
}

ValueMetadata *type metadata accessor for ContinuousScrollMode()
{
  return &type metadata for ContinuousScrollMode;
}

uint64_t sub_1000F1740()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000F034C(v0, qword_1001F3958);
  sub_1000E881C(v0, (uint64_t)qword_1001F3958);
  return Logger.init(subsystem:category:)();
}

void sub_1000F17C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = (*(double (**)(void))(**(void **)a1 + 144))();
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
}

__n128 sub_1000F1814(__n128 *a1, __n128 **a2)
{
  __n128 v6 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  __n128 result = v6;
  v4[1] = v6;
  v4[2].n128_u64[0] = v2;
  v4[2].n128_u64[1] = v3;
  return result;
}

double Face.bounds.getter()
{
  swift_beginAccess();
  return *(double *)(v0 + 16);
}

uint64_t sub_1000F18A8(double a1, double a2, double a3, double a4)
{
  uint64_t result = swift_beginAccess();
  void v4[2] = a1;
  _OWORD v4[3] = a2;
  void v4[4] = a3;
  v4[5] = a4;
  return result;
}

void sub_1000F1900(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))(**(void **)a1 + 168))();
}

uint64_t sub_1000F194C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 56) = v2;
  return result;
}

double Face.time.getter()
{
  swift_beginAccess();
  return *(double *)(v0 + 56);
}

uint64_t sub_1000F19CC(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 56) = a1;
  return result;
}

uint64_t sub_1000F1A0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_1000F1A58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 64) = v2;
  return result;
}

uint64_t Face.ID.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 64);
}

uint64_t sub_1000F1AD0(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t Face.isVisible.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t Face.isVisible.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 72) = a1;
  return result;
}

uint64_t (*Face.isVisible.modify())()
{
  return j_j__swift_endAccess;
}

double sub_1000F1BD8()
{
  swift_beginAccess();
  return *(double *)(v0 + 80);
}

uint64_t sub_1000F1C0C(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 80) = a1;
  return result;
}

uint64_t (*sub_1000F1C4C())()
{
  return j_j__swift_endAccess;
}

BOOL sub_1000F1CA0()
{
  return (*(double (**)(void))(*(void *)v0 + 240))() != 0.0;
}

double sub_1000F1CE0()
{
  swift_beginAccess();
  return *(double *)(v0 + 88);
}

uint64_t sub_1000F1D14(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 88) = a1;
  return result;
}

uint64_t (*sub_1000F1D54())()
{
  return j__swift_endAccess;
}

BOOL sub_1000F1DA8()
{
  return (*(double (**)(void))(*(void *)v0 + 272))() != 0.0;
}

uint64_t sub_1000F1DF0()
{
  uint64_t v1 = swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 96);
  if (v2 == 4)
  {
    uint64_t v14 = *(uint64_t (**)(void))(*(void *)v0 + 144);
    double v15 = 1.0 - ((double (*)(uint64_t))v14)(v1);
    uint64_t v16 = v14();
    double v9 = v15 - v17;
    uint64_t v18 = ((uint64_t (*)(uint64_t))v14)(v16);
    double v13 = v19;
LABEL_7:
    uint64_t v24 = ((uint64_t (*)(uint64_t))v14)(v18);
    uint64_t v26 = v25;
    ((void (*)(uint64_t))v14)(v24);
    uint64_t v28 = v27;
    goto LABEL_10;
  }
  if (v2 == 3)
  {
    uint64_t v14 = *(uint64_t (**)(void))(*(void *)v0 + 144);
    double v9 = ((double (*)(uint64_t))v14)(v1);
    uint64_t v20 = v14();
    double v22 = 1.0 - v21;
    uint64_t v18 = ((uint64_t (*)(uint64_t))v14)(v20);
    double v13 = v22 - v23;
    goto LABEL_7;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 144);
  if (v2 == 2)
  {
    uint64_t v4 = v3(v1);
    double v6 = 1.0 - v5;
    uint64_t v7 = v3(v4);
    double v9 = v6 - v8;
    double v10 = 1.0 - ((double (*)(uint64_t))v3)(v7);
    uint64_t v11 = ((uint64_t (*)(void))v3)();
    double v13 = v10 - v12;
  }
  else
  {
    uint64_t v29 = v3(v1);
    double v9 = v30;
    double v13 = ((double (*)(uint64_t))v3)(v29);
  }
  uint64_t v31 = v3(v11);
  uint64_t v26 = v32;
  v3(v31);
  uint64_t v28 = v33;
LABEL_10:
  uint64_t result = swift_beginAccess();
  *(double *)(v0 + 16) = v9;
  *(double *)(v0 + 24) = v13;
  *(void *)(v0 + 32) = v26;
  *(void *)(v0 + 40) = v28;
  return result;
}

uint64_t sub_1000F1FF0()
{
  swift_beginAccess();
  return *(void *)(v0 + 96);
}

uint64_t sub_1000F2024(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 96) = a1;
  return sub_1000F1DF0();
}

uint64_t (*sub_1000F2068(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return sub_1000F20C0;
}

uint64_t sub_1000F20C0(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return sub_1000F1DF0();
  }
  return result;
}

uint64_t sub_1000F20F4()
{
  id v0 = [self sharedInstance];
  id v1 = [v0 assistiveTouchHeadMovementSensitivity];

  if (v1 == (id)1) {
    return 0;
  }
  if (v1 != (id)2)
  {
    if (qword_1001F2160 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_1000E881C(v2, (uint64_t)qword_1001F3958);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      double v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)double v5 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "AXAssistiveTouchHeadMovementSensitivity has a no value. Unsure how to convert it. Value: %ld", v5, 0xCu);
      swift_slowDealloc();
    }
  }
  return 1;
}

double sub_1000F2258()
{
  id v1 = *(double (**)(void))(*(void *)v0 + 144);
  double v2 = v1();
  uint64_t v3 = ((uint64_t (*)(void))v1)();
  double v5 = v2 + v4 * 0.5;
  uint64_t v6 = ((uint64_t (*)(uint64_t))v1)(v3);
  ((void (*)(uint64_t))v1)(v6);
  return v5;
}

BOOL sub_1000F22F4()
{
  return (*(double (**)(void))(*(void *)v0 + 168))() < 0.6;
}

uint64_t sub_1000F2340(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 64) = 0;
  *(unsigned char *)(v14 + 72) = 0;
  CFTimeInterval v15 = CACurrentMediaTime();
  *(double *)(v14 + 16) = a2;
  *(double *)(v14 + 24) = a3;
  *(double *)(v14 + 32) = a4;
  *(double *)(v14 + 40) = a5;
  *(double *)(v14 + 80) = a6;
  *(double *)(v14 + 88) = a7;
  *(void *)(v14 + 96) = a1;
  *(CFTimeInterval *)(v14 + 48) = v15;
  *(CFTimeInterval *)(v14 + 56) = v15;
  return v14;
}

uint64_t sub_1000F23C8(void *a1)
{
  id v3 = [a1 bounds];
  double v5 = v4 * 0.02;
  uint64_t v6 = *(void (**)(id))(*(void *)v1 + 144);
  v6(v3);
  double v8 = v5 + v7 * 0.98;
  id v9 = [a1 bounds];
  double v11 = v10 * 0.02;
  v6(v9);
  double v13 = v11 + v12 * 0.98;
  [a1 bounds];
  double v15 = v14;
  id v16 = [a1 bounds];
  double v18 = v17;
  v6(v16);
  double v20 = v15 + (v18 - v19) * 0.5;
  [a1 bounds];
  double v22 = v21;
  id v23 = [a1 bounds];
  double v25 = v24;
  v6(v23);
  double v27 = v22 + (v25 - v26) * 0.5;
  swift_beginAccess();
  *(double *)(v1 + 32) = v8;
  *(double *)(v1 + 40) = v13;
  *(double *)(v1 + 16) = v20;
  *(double *)(v1 + 24) = v27;
  CFTimeInterval v28 = CACurrentMediaTime();
  swift_beginAccess();
  *(CFTimeInterval *)(v1 + 56) = v28;
  id v29 = [a1 faceID];
  swift_beginAccess();
  *(void *)(v1 + 64) = v29;
  (*(void (**)(uint64_t))(*(void *)v1 + 224))(1);
  id v30 = [a1 hasRollAngle];
  double v31 = 0.0;
  v32.n128_u64[0] = 0;
  if (v30) {
    id v30 = objc_msgSend(a1, "rollAngle", 0.0);
  }
  (*(void (**)(id, __n128))(*(void *)v1 + 248))(v30, v32);
  if ([a1 hasYawAngle])
  {
    [a1 yawAngle];
    double v31 = v33;
  }
  return (*(uint64_t (**)(double))(*(void *)v1 + 280))(v31);
}

uint64_t Face.deinit()
{
  return v0;
}

uint64_t Face.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 104, 7);
}

uint64_t Face.description.getter()
{
  _StringGuts.grow(_:)(76);
  v1._uint64_t countAndFlagsBits = 0x4449203A65636146;
  v1._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v1);
  (*(void (**)(void))(*(void *)v0 + 192))();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x736956207349202CLL;
  v3._object = (void *)0xEE00203A656C6269;
  String.append(_:)(v3);
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 216))(v4);
  BOOL v6 = (v5 & 1) == 0;
  if (v5) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (v6) {
    unint64_t v8 = 0xE500000000000000;
  }
  else {
    unint64_t v8 = 0xE400000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x73646E756F42202CLL;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  (*(void (**)(uint64_t))(*(void *)v0 + 144))(v11);
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)();
  v12._uint64_t countAndFlagsBits = 0x203A6C6C6F52202CLL;
  v12._object = (void *)0xE800000000000000;
  String.append(_:)(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v0 + 240))(v13, v14, v15, v16);
  v17._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x203A776159202CLL;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v0 + 272))(v19, v20, v21, v22);
  v23._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 0x746E6569724F202CLL;
  v24._object = (void *)0xEF203A6E6F697461;
  String.append(_:)(v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v0 + 304))(v25, v26, v27, v28);
  type metadata accessor for UIDeviceOrientation(0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t sub_1000F297C()
{
  return Face.description.getter();
}

uint64_t HeadGestureState.HeadState.description.getter(char a1)
{
  return *(void *)&aNone_1[8 * a1];
}

BOOL static HeadGestureState.HeadState.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void HeadGestureState.HeadState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int HeadGestureState.HeadState.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000F2A40(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000F2A54()
{
  return HeadGestureState.HeadState.description.getter(*v0);
}

uint64_t sub_1000F2A5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1000F2AA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  return result;
}

uint64_t HeadGestureState.ID.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_1000F2B20(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

void sub_1000F2B60(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))(**(void **)a1 + 128))();
}

uint64_t sub_1000F2BAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 24) = v2;
  return result;
}

double HeadGestureState.leftSwitch.getter()
{
  swift_beginAccess();
  return *(double *)(v0 + 24);
}

uint64_t sub_1000F2C2C(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 24) = a1;
  return result;
}

void sub_1000F2C6C(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(void))(**(void **)a1 + 152))();
}

uint64_t sub_1000F2CB8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 32) = v2;
  return result;
}

double HeadGestureState.rightSwitch.getter()
{
  swift_beginAccess();
  return *(double *)(v0 + 32);
}

uint64_t sub_1000F2D38(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 32) = a1;
  return result;
}

uint64_t HeadGestureState.state.getter()
{
  if ((*(double (**)(void))(*(void *)v0 + 128))() == 1.0) {
    return 1;
  }
  else {
    return 2 * ((*(double (**)(void))(*(void *)v0 + 152))() == 1.0);
  }
}

void *sub_1000F2DFC()
{
  uint64_t result = (void *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

uint64_t HeadGestureState.update(withFace:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
  uint64_t v5 = swift_beginAccess();
  *(void *)(v2 + 16) = v4;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(v5);
  if (result)
  {
    double v7 = (*(double (**)(void))(*(void *)a1 + 336))() + -0.5;
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)a1 + 144))();
    double v10 = v9;
    char v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 328))(v8);
    double v12 = 0.35;
    if ((v11 & 1) == 0) {
      double v12 = 0.25;
    }
    double v13 = sub_1000F784C(v7 / (v10 * v12) * 100.0);
    double v14 = v13 / 100.0;
    if (v13 / 100.0 <= 0.0) {
      double v15 = v13 / 100.0;
    }
    else {
      double v15 = 0.0;
    }
    if (v15 <= -1.0) {
      double v15 = -1.0;
    }
    double v16 = sub_1000F7854(v15);
    double v17 = sub_1000F785C(v16 * 10.0) / 10.0;
    double v18 = 1.0;
    if (v14 <= 1.0) {
      double v18 = v14;
    }
    if (v18 <= 0.0) {
      double v18 = 0.0;
    }
    double v19 = sub_1000F7854(v18);
    double v20 = sub_1000F785C(v19 * 10.0) / 10.0;
    uint64_t v21 = (double *)(v2 + 24);
    uint64_t v22 = (double *)(v2 + 32);
    if (AXDeviceHasFrontCameraPhysicallyMountedUpsideDown())
    {
      swift_beginAccess();
      double *v21 = v20;
    }
    else
    {
      swift_beginAccess();
      double *v21 = v17;
      double v17 = v20;
    }
    uint64_t result = swift_beginAccess();
    *uint64_t v22 = v17;
  }
  return result;
}

double HeadMovementSensitivity.rawValue.getter(char a1)
{
  double result = 0.35;
  if ((a1 & 1) == 0) {
    return 0.25;
  }
  return result;
}

uint64_t HeadGestureState.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t HeadGestureState.description.getter()
{
  _StringGuts.grow(_:)(30);
  uint64_t v1 = swift_bridgeObjectRelease();
  uint64_t v2 = 8 * (*(char (**)(uint64_t))(*(void *)v0 + 176))(v1);
  v3._uint64_t countAndFlagsBits = *(void *)&aNone_1[v2];
  v3._object = *(void **)((char *)&unk_100198BF0 + v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x203A7466654C202CLL;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  (*(void (**)(void))(*(void *)v0 + 128))();
  v5._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x3A7468676952202CLL;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  (*(void (**)(void))(*(void *)v0 + 152))();
  v7._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0x203A6574617453;
}

uint64_t sub_1000F31F4()
{
  return HeadGestureState.description.getter();
}

uint64_t HeadMovementSensitivity.description.getter(char a1)
{
  if (a1)
  {
    strcpy((char *)v3, "high (value: ");
    HIWORD(v3[1]) = -4864;
  }
  else
  {
    strcpy((char *)v3, "low (value: ");
    BYTE5(v3[1]) = 0;
    HIWORD(v3[1]) = -5120;
  }
  v1._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3[0];
}

uint64_t HeadMovementSensitivity.init(rawValue:)(double a1)
{
  if (a1 == 0.35) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1 == 0.25) {
    return 0;
  }
  else {
    return v1;
  }
}

BOOL sub_1000F32DC(unsigned char *a1, unsigned char *a2)
{
  double v2 = 0.35;
  if (*a1) {
    double v3 = 0.35;
  }
  else {
    double v3 = 0.25;
  }
  if (!*a2) {
    double v2 = 0.25;
  }
  return v3 == v2;
}

Swift::Int sub_1000F3310()
{
  return sub_1000F3318(*v0);
}

Swift::Int sub_1000F3318(char a1)
{
  Hasher.init(_seed:)();
  if (a1) {
    Swift::UInt64 v2 = 0x3FD6666666666666;
  }
  else {
    Swift::UInt64 v2 = 0x3FD0000000000000;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000F3370()
{
  if (*v0) {
    Swift::UInt64 v1 = 0x3FD6666666666666;
  }
  else {
    Swift::UInt64 v1 = 0x3FD0000000000000;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000F33B0(uint64_t a1)
{
  return sub_1000F33B8(a1, *v1);
}

Swift::Int sub_1000F33B8(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  if (a2) {
    Swift::UInt64 v3 = 0x3FD6666666666666;
  }
  else {
    Swift::UInt64 v3 = 0x3FD0000000000000;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

double *sub_1000F340C@<X0>(double *result@<X0>, char *a2@<X8>)
{
  if (*result == 0.35) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == 0.25) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

void sub_1000F343C(double *a1@<X8>)
{
  double v2 = 0.35;
  if (!*v1) {
    double v2 = 0.25;
  }
  *a1 = v2;
}

uint64_t sub_1000F3460()
{
  return HeadMovementSensitivity.description.getter(*v0);
}

unint64_t HeadTrackerAvailabilityDetail.description.getter(uint64_t a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 0:
      unint64_t result = 1701736302;
      break;
    case 1:
      unint64_t result = 0x746F6E2065636166;
      break;
    case 2:
      return result;
    case 3:
      unint64_t result = 0x2073692065636166;
      break;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1000F3538);
  }
  return result;
}

uint64_t HeadTrackerAvailabilityDetail.localizedDescription.getter(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      NSString v1 = String._bridgeToObjectiveC()();
      id v2 = sub_100040EC8(v1);

      if (v2) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_4:
      NSString v3 = String._bridgeToObjectiveC()();
      id v2 = sub_100040EC8(v3);

      if (!v2)
      {
        __break(1u);
LABEL_6:
        NSString v4 = String._bridgeToObjectiveC()();
        id v2 = sub_100040EC8(v4);

        if (!v2)
        {
          __break(1u);
LABEL_8:
          NSString v5 = String._bridgeToObjectiveC()();
          id v2 = sub_100040EC8(v5);

          if (!v2)
          {
            __break(1u);
LABEL_11:
            _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
            __break(1u);
            JUMPOUT(0x1000F36D8);
          }
        }
      }
LABEL_9:
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v6;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_4;
    case 3:
      goto LABEL_6;
    default:
      goto LABEL_11;
  }
}

unint64_t HeadTrackerAvailabilityDetail.init(rawValue:)(unint64_t a1)
{
  return sub_1000F9C54(a1);
}

unint64_t sub_1000F3704@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1000F9C54(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

unint64_t sub_1000F3738()
{
  return HeadTrackerAvailabilityDetail.description.getter(*v0);
}

unint64_t variable initialization expression of HeadTracker.persistentSwitchIdentifiers()
{
  return sub_1000F9C64((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t sub_1000F374C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000EED9C(&qword_1001F00B0);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  char v4 = (void **)(a1 + 40);
  while (1)
  {
    NSString v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_1000F7914((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t variable initialization expression of HeadTracker.switchDisplayNames()
{
  return sub_1000F9E2C(&_swiftEmptyArrayStorage);
}

uint64_t sub_1000F3864@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_1000F38C0(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F394C(a1, a2, a3, a4, &OBJC_IVAR___SCATHeadTracker_face);
}

uint64_t HeadTracker.face.getter()
{
  return sub_1000F39C0();
}

uint64_t sub_1000F38D8(uint64_t a1)
{
  return sub_1000F3A14(a1, &OBJC_IVAR___SCATHeadTracker_face);
}

uint64_t sub_1000F38E4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xD0))();
  *a2 = result;
  return result;
}

uint64_t sub_1000F3940(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F394C(a1, a2, a3, a4, &OBJC_IVAR___SCATHeadTracker_headGestureState);
}

uint64_t sub_1000F394C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  id v6 = (void *)(*a2 + *a5);
  swift_beginAccess();
  *id v6 = v5;
  swift_retain();
  return swift_release();
}

uint64_t HeadTracker.headGestureState.getter()
{
  return sub_1000F39C0();
}

uint64_t sub_1000F39C0()
{
  return swift_retain();
}

uint64_t sub_1000F3A08(uint64_t a1)
{
  return sub_1000F3A14(a1, &OBJC_IVAR___SCATHeadTracker_headGestureState);
}

uint64_t sub_1000F3A14(uint64_t a1, void *a2)
{
  char v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *char v4 = a1;
  return swift_release();
}

uint64_t variable initialization expression of SCATAirPodsSource.isSimulatingLongPress()
{
  return 0;
}

uint64_t HeadTracker.hasHeadGestureSwitchesAssigned.getter()
{
  unint64_t v1 = (unint64_t)[v0 actions];
  if (v1)
  {
    uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v9 = 1;
    type metadata accessor for SCATCameraSwitch(0);
    sub_1000FBC04(&qword_1001EFD10, type metadata accessor for SCATCameraSwitch);
    AnyHashable.init<A>(_:)();
    if (*(void *)(v2 + 16) && (unint64_t v3 = sub_1000F78D0((uint64_t)v11), (v4 & 1) != 0))
    {
      sub_1000F01E0(*(void *)(v2 + 56) + 32 * v3, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
    sub_1000F9F50((uint64_t)v11);
    uint64_t v5 = *((void *)&v10 + 1);
    sub_1000FBEA8((uint64_t)&v9, &qword_1001EFD18);
    if (v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      *(void *)&long long v9 = 2;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v2 + 16) && (unint64_t v6 = sub_1000F78D0((uint64_t)v11), (v7 & 1) != 0))
      {
        sub_1000F01E0(*(void *)(v2 + 56) + 32 * v6, (uint64_t)&v9);
      }
      else
      {
        long long v9 = 0u;
        long long v10 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000F9F50((uint64_t)v11);
      unint64_t v1 = *((void *)&v10 + 1) != 0;
      sub_1000FBEA8((uint64_t)&v9, &qword_1001EFD18);
    }
  }
  return v1;
}

id AXPrefsBridge.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id HeadTracker.init()()
{
  uint64_t v1 = OBJC_IVAR___SCATHeadTracker_persistentSwitchIdentifiers;
  *(void *)&v0[v1] = sub_1000F9C64((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v2 = OBJC_IVAR___SCATHeadTracker_switchDisplayNames;
  *(void *)&v0[v2] = sub_1000F9E2C(&_swiftEmptyArrayStorage);
  *(void *)&v0[OBJC_IVAR___SCATHeadTracker_face] = 0;
  *(void *)&v0[OBJC_IVAR___SCATHeadTracker_headGestureState] = 0;
  v0[OBJC_IVAR___SCATHeadTracker_isHandlingAction] = 0;
  uint64_t v3 = qword_1001F2160;
  char v4 = v0;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_1000E881C(v5, (uint64_t)qword_1001F3958);
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Initializing Head Tracker Session.", v8, 2u);
    swift_slowDealloc();
  }

  v4[OBJC_IVAR___SCATHeadTracker_availability] = 0;
  *(void *)&v4[OBJC_IVAR___SCATHeadTracker_availabilityDetail] = 0;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for HeadTracker();
  return objc_msgSendSuper2(&v10, "init");
}

id HeadTracker.__deallocating_deinit()
{
  uint64_t v1 = v0;
  if (qword_1001F2160 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3958);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deinitializing Head Tracker Session", v5, 2u);
    swift_slowDealloc();
  }

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for HeadTracker();
  return objc_msgSendSuper2(&v7, "dealloc");
}

Swift::Void __swiftcall HeadTracker.startRunning()()
{
  uint64_t v1 = v0;
  if (qword_1001F2160 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3958);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Will attempt to start Head Gestures Session", v5, 2u);
    swift_slowDealloc();
  }

  if ([v0 isRunning])
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      objc_super v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)objc_super v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Head Tracker is already started. Ignoring.", v7, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    type metadata accessor for HeadGestureState();
    uint64_t v8 = (void *)swift_allocObject();
    v8[3] = 0;
    void v8[4] = 0;
    void v8[2] = 0;
    long long v9 = &v0[OBJC_IVAR___SCATHeadTracker_headGestureState];
    swift_beginAccess();
    *(void *)long long v9 = v8;
    swift_release();
    objc_super v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      BOOL v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Started Head Gestures Session", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = sub_1000E9034();
    double v14 = (void *)*v13;
    double v15 = *(void (**)(char *, uint64_t, _UNKNOWN **))((swift_isaMask & *(void *)*v13) + 0x150);
    uint64_t v16 = type metadata accessor for HeadTracker();
    double v17 = v14;
    v15(v1, v16, &protocol witness table for HeadTracker);
  }
}

Swift::Void __swiftcall HeadTracker.stopRunning()()
{
  uint64_t v1 = v0;
  if (qword_1001F2160 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3958);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Will attempt to stop Head Gestures Session", v5, 2u);
    swift_slowDealloc();
  }

  if ([v1 isRunning])
  {
    os_log_type_t v6 = sub_1000E9034();
    objc_super v7 = (void *)*v6;
    uint64_t v8 = *(void (**)(char *, uint64_t, _UNKNOWN **))((swift_isaMask & *(void *)*v6) + 0x158);
    uint64_t v9 = type metadata accessor for HeadTracker();
    objc_super v10 = v7;
    v8(v1, v9, &protocol witness table for HeadTracker);

    os_log_type_t v11 = &v1[OBJC_IVAR___SCATHeadTracker_headGestureState];
    swift_beginAccess();
    *(void *)os_log_type_t v11 = 0;
    swift_release();
    BOOL v12 = &v1[OBJC_IVAR___SCATHeadTracker_face];
    swift_beginAccess();
    *(void *)BOOL v12 = 0;
    swift_release();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      double v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Stopped Head Gestures Session", v15, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v16))
    {
      double v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v16, "Head Tracker is already stopped. Ignoring.", v17, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000F4670(uint64_t a1)
{
  id v3 = [v1 actions];
  if (!v3)
  {
    if (qword_1001F2160 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_1000E881C(v9, (uint64_t)qword_1001F3958);
    objc_super v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      BOOL v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Could not lookup action identifier because actions are nil", v12, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  os_log_type_t v4 = v3;
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for SCATCameraSwitch(0);
  sub_1000FBC04(&qword_1001EFD10, type metadata accessor for SCATCameraSwitch);
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_1000F78D0((uint64_t)v13), (v7 & 1) != 0))
  {
    sub_1000F01E0(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v14);
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000F9F50((uint64_t)v13);
  if (!*((void *)&v15 + 1))
  {
    sub_1000FBEA8((uint64_t)&v14, &qword_1001EFD18);
    return 0;
  }
  sub_1000EED9C((uint64_t *)&unk_1001F0090);
  if (swift_dynamicCast()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000F4888(uint64_t a1)
{
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xD0))();
  if (v4)
  {
    uint64_t v5 = v4;
    if (((*(uint64_t (**)(void))(*(void *)a1 + 216))() & 1) == 0)
    {
      id v22 = [self sharedInstance];
      unsigned int v23 = [v22 switchControlDebugLoggingEnabled];

      if (v23)
      {
        if (qword_1001F2160 != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        sub_1000E881C(v24, (uint64_t)qword_1001F3958);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "Face is not visible", v27, 2u);
          swift_slowDealloc();
        }
      }
      sub_1000FBF04();
      swift_allocError();
      *(void *)uint64_t v28 = 1;
      *(unsigned char *)(v28 + 8) = 0;
      swift_willThrow();
      return swift_release();
    }
    sub_1000F5BF4(1, 0);
    (*(void (**)(uint64_t))(*(void *)v5 + 192))(a1);
    if (qword_1001F2160 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_1000E881C(v6, (uint64_t)qword_1001F3958);
    swift_retain_n();
    char v7 = v1;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      swift_retain();
      uint64_t v11 = HeadGestureState.description.getter();
      unint64_t v13 = v12;
      swift_release();
      sub_1000EDB70(v11, v13, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 1024;

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Head Gesture State updated: %s - is handling action: %{BOOL}d", (uint8_t *)v10, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    char v29 = (*(uint64_t (**)(void))(*(void *)v5 + 176))();
    if (v29)
    {
      if (v29 == 1)
      {
        char v30 = 1;
        sub_1000F4E34(1);
        if (!v2) {
          goto LABEL_29;
        }
        return swift_release();
      }
      sub_1000F4E34(2);
      if (v2) {
        return swift_release();
      }
      char v30 = 1;
    }
    else
    {
      char v30 = v29;
    }
LABEL_29:
    *((unsigned char *)v7 + OBJC_IVAR___SCATHeadTracker_isHandlingAction) = v30;
    sub_1000F6168(v5);
    return swift_release();
  }
  id v14 = [self sharedInstance];
  unsigned int v15 = [v14 switchControlDebugLoggingEnabled];

  if (v15)
  {
    if (qword_1001F2160 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_1000E881C(v16, (uint64_t)qword_1001F3958);
    double v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      double v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not started", v19, 2u);
      swift_slowDealloc();
    }
  }
  sub_1000FBF04();
  swift_allocError();
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  return swift_willThrow();
}

void sub_1000F4E34(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = sub_1000EED9C((uint64_t *)&unk_1001EFD50);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v8 = __chkstk_darwin(v6 - 8);
  os_log_type_t v9 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)v65 - v11;
  if (v1[OBJC_IVAR___SCATHeadTracker_isHandlingAction]) {
    return;
  }
  uint64_t v71 = v10;
  if (qword_1001F2160 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_1000E881C(v13, (uint64_t)qword_1001F3958);
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  double v72 = (void **)a1;
  if (v16)
  {
    double v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)double v17 = 134217984;
    aBlock = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Handling head gesture event usage: %ld", v17, 0xCu);
    a1 = (uint64_t)v72;
    swift_slowDealloc();
  }

  uint64_t v18 = sub_1000F4670(a1);
  if (!v18)
  {
    char v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 134217984;
      aBlock = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      __n128 v32 = "No action items found for event usage: %ld";
      double v33 = v29;
      os_log_type_t v34 = v30;
      uint64_t v35 = v31;
      uint32_t v36 = 12;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v33, v34, v32, v35, v36);
      swift_slowDealloc();
    }
LABEL_24:

    return;
  }
  uint64_t v19 = v18;
  id v20 = [v4 queue];
  if (!v20)
  {
    swift_bridgeObjectRelease();
    char v29 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v49))
    {
      double v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v50 = 0;
      __n128 v32 = "No queue configured. Not handling event.";
      double v33 = v29;
      os_log_type_t v34 = v49;
      uint64_t v35 = v50;
      uint32_t v36 = 2;
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  id v70 = v20;
  uint64_t v21 = &v4[OBJC_IVAR___SCATHeadTracker_persistentSwitchIdentifiers];
  swift_beginAccess();
  uint64_t v22 = *(void *)v21;
  if (*(void *)(*(void *)v21 + 16) && (unint64_t v23 = sub_1000F7864((Swift::UInt)v72), (v24 & 1) != 0))
  {
    unint64_t v25 = v23;
    uint64_t v69 = *(void *)(v22 + 56);
    uint64_t v26 = type metadata accessor for UUID();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v67 = v2;
    uint64_t v28 = v27;
    (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(v12, v69 + *(void *)(v27 + 72) * v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v12, 0, 1, v26);
    uint64_t v3 = v67;
  }
  else
  {
    uint64_t v37 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v12, 1, 1, v37);
  }
  char v38 = &v4[OBJC_IVAR___SCATHeadTracker_switchDisplayNames];
  swift_beginAccess();
  uint64_t v39 = *(void *)v38;
  if (*(void *)(*(void *)v38 + 16) && (unint64_t v40 = sub_1000F7864((Swift::UInt)v72), (v41 & 1) != 0))
  {
    id v42 = (uint64_t *)(*(void *)(v39 + 56) + 16 * v40);
    uint64_t v43 = *v42;
    uint64_t v68 = v42[1];
    uint64_t v69 = v43;
    swift_bridgeObjectRetain();
    if (!*(void *)(v19 + 16))
    {
LABEL_17:
      id v44 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    if (!*(void *)(v19 + 16)) {
      goto LABEL_17;
    }
  }
  char v45 = @"SwitchActionTypeNormal";
  unint64_t v46 = sub_1000F7914((uint64_t)v45);
  if (v47)
  {
    id v44 = *(void ***)(*(void *)(v19 + 56) + 8 * v46);
    Class v48 = v44;
  }
  else
  {
    id v44 = 0;
  }

LABEL_27:
  double v72 = v44;
  swift_bridgeObjectRelease();
  CGRect v51 = v44;
  os_log_type_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v67 = v3;
    CGRect v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = (void *)swift_slowAlloc();
    *(_DWORD *)CGRect v54 = 138412290;
    if (v72)
    {
      aBlock = (void **)&v51->isa;
      v65[2] = v74;
      v65[1] = v54 + 4;
      CGRect v55 = v51;
    }
    else
    {
      aBlock = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v66 = v72;

    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Sending action item: %@", v54, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    os_log_type_t v52 = v51;
  }

  sub_1000FC054((uint64_t)v12, (uint64_t)v9, (uint64_t *)&unk_1001EFD50);
  unint64_t v56 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  uint64_t v57 = swift_allocObject();
  Swift::UInt v58 = (Swift::UInt)v72;
  *(void *)(v57 + 16) = v4;
  *(void *)(v57 + 24) = v58;
  sub_1000FBF78((uint64_t)v9, v57 + v56, (uint64_t *)&unk_1001EFD50);
  long long v59 = (void *)(v57 + ((v7 + v56 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v60 = v68;
  *long long v59 = v69;
  v59[1] = v60;
  v74[3] = sub_1000FBE10;
  v74[4] = v57;
  aBlock = _NSConcreteStackBlock;
  v74[0] = 1107296256;
  v74[1] = sub_1000E98D0;
  v74[2] = &unk_1001AF928;
  os_log_type_t v61 = _Block_copy(&aBlock);
  long long v62 = v51;
  uint64_t v63 = v4;
  swift_release();
  id v64 = v70;
  [v70 performAsynchronousWritingBlock:v61];
  _Block_release(v61);

  sub_1000FBEA8((uint64_t)v12, (uint64_t *)&unk_1001EFD50);
}

void sub_1000F55CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSString a5)
{
  v19[1] = a4;
  id v20 = a1;
  uint64_t v21 = a2;
  uint64_t v7 = sub_1000EED9C((uint64_t *)&unk_1001EFD50);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)v19 - v11;
  sub_1000FC054(a3, (uint64_t)v19 - v11, (uint64_t *)&unk_1001EFD50);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  os_log_type_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13) == 1)
  {
    sub_1000FBEA8((uint64_t)v12, (uint64_t *)&unk_1001EFD50);
    NSString v16 = 0;
    if (a5)
    {
LABEL_3:
      NSString v17 = String._bridgeToObjectiveC()();
      goto LABEL_6;
    }
  }
  else
  {
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a5) {
      goto LABEL_3;
    }
  }
  NSString v17 = 0;
LABEL_6:
  [v20 _handleAction:v21 longPressAction:0 start:1 switchIdentifier:v16 switchDisplayName:v17];

  sub_1000FC054(a3, (uint64_t)v10, (uint64_t *)&unk_1001EFD50);
  if (v15(v10, 1, v13) == 1)
  {
    sub_1000FBEA8((uint64_t)v10, (uint64_t *)&unk_1001EFD50);
    NSString v18 = 0;
    if (!a5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v13);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a5) {
LABEL_10:
  }
    a5 = String._bridgeToObjectiveC()();
LABEL_11:
  [v20 _handleAction:v21 longPressAction:0 start:0 switchIdentifier:v18 switchDisplayName:a5];
}

Swift::Void __swiftcall HeadTracker._didReceiveAction(withIdentifier:start:ignoreInputHold:)(SCATActionItem withIdentifier, Swift::Bool start, Swift::Bool ignoreInputHold)
{
  uint64_t v4 = v3;
  char shortcutIdentifier = (char)withIdentifier.shortcutIdentifier;
  char action = withIdentifier.action;
  Class isa = withIdentifier.super.isa;
  if (objc_msgSend(v4, "delegate", withIdentifier.shortcutIdentifier, start, ignoreInputHold))
  {
    uint64_t aBlock[6] = &OBJC_PROTOCOL___SCATHeadTrackerInputSourceDelegate_0;
    uint64_t v8 = swift_dynamicCastObjCProtocolConditional();
    if (v8)
    {
      uint64_t v9 = (void *)v8;
      id v10 = [v4 queue];
      if (v10)
      {
        uint64_t v11 = v10;
        if ([v9 respondsToSelector:"headTrackerInputSource:didReceiveActionWithIdentifier:start:ignoreInputHold:"])
        {
          uint64_t v12 = swift_allocObject();
          *(void *)(v12 + 16) = isa;
          *(void *)(v12 + 24) = v9;
          *(void *)(v12 + 32) = v4;
          *(unsigned char *)(v12 + 40) = action & 1;
          *(unsigned char *)(v12 + 41) = shortcutIdentifier & 1;
          aBlock[4] = sub_1000FA034;
          aBlock[5] = v12;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1000E98D0;
          aBlock[3] = &unk_1001AF560;
          uint64_t v13 = _Block_copy(aBlock);
          uint64_t v14 = isa;
          swift_unknownObjectRetain();
          id v15 = v4;
          swift_release();
          [v11 performAsynchronousWritingBlock:v13];
          swift_unknownObjectRelease();

          _Block_release(v13);
          return;
        }
        if (qword_1001F2160 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_1000E881C(v16, (uint64_t)qword_1001F3958);
        NSString v17 = isa;
        NSString v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          id v20 = (uint8_t *)swift_slowAlloc();
          uint64_t v22 = (void *)swift_slowAlloc();
          aBlock[0] = v17;
          *(_DWORD *)id v20 = 138412290;
          uint64_t v21 = v17;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v22 = v17;

          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to send action: %@", v20, 0xCu);
          sub_1000EED9C(&qword_1001EF8F8);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_unknownObjectRelease();

          return;
        }
      }
    }
    swift_unknownObjectRelease();
  }
}

void sub_1000F5BF4(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([v3 delegate])
  {
    uint64_t aBlock[6] = (uint64_t)&OBJC_PROTOCOL___SCATHeadTrackerInputSourceDelegate_0;
    uint64_t v10 = swift_dynamicCastObjCProtocolConditional();
    if (!v10 || (uint64_t v11 = (void *)v10, (v12 = [v3 queue]) == 0))
    {
      swift_unknownObjectRelease();
      return;
    }
    uint64_t v13 = v12;
    char v14 = a1 & 1;
    if (v3[OBJC_IVAR___SCATHeadTracker_availability] != (a1 & 1)
      || *(void *)&v3[OBJC_IVAR___SCATHeadTracker_availabilityDetail] != a2)
    {
      v3[OBJC_IVAR___SCATHeadTracker_availability] = v14;
      uint64_t v35 = a2;
      *(void *)&v3[OBJC_IVAR___SCATHeadTracker_availabilityDetail] = a2;
      if (qword_1001F2160 != -1) {
        swift_once();
      }
      uint64_t v15 = sub_1000E881C(v6, (uint64_t)qword_1001F3958);
      uint64_t v16 = *(void (**)(char *))(v7 + 16);
      uint64_t v34 = v15;
      v16(v9);
      NSString v17 = Logger.logObject.getter();
      int v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, (os_log_type_t)v33))
      {
        os_log_t v30 = v17;
        __n128 v32 = v13;
        uint64_t v18 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 67109378;
        LODWORD(v36) = a1 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 8) = 2080;
        int v31 = a1 & 1;
        unint64_t v19 = 0x800000010015CA50;
        uint64_t v20 = 0xD000000000000011;
        switch(v35)
        {
          case 0:
            unint64_t v19 = 0xE400000000000000;
            uint64_t v20 = 1701736302;
            break;
          case 1:
            unint64_t v19 = 0xEE00646E756F6620;
            uint64_t v20 = 0x746F6E2065636166;
            break;
          case 2:
            break;
          case 3:
            unint64_t v19 = 0xEF726166206F6F74;
            uint64_t v20 = 0x2073692065636166;
            break;
          default:
            uint64_t v36 = v35;
            _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
            __break(1u);
            JUMPOUT(0x1000F6158);
        }
        uint64_t v36 = sub_1000EDB70(v20, v19, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v21 = v30;
        _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v33, "Did Update Availability: isAvailable: %{BOOL}d - detail: %s", (uint8_t *)v18, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v13 = v32;
        char v14 = v31;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      unsigned int v22 = [v11 respondsToSelector:"headTrackerInputSource:didUpdateAvailability:withDetail:"];
      uint64_t v23 = v35;
      if (v22)
      {
        uint64_t v24 = swift_allocObject();
        *(void *)(v24 + 16) = v11;
        *(void *)(v24 + 24) = v3;
        *(unsigned char *)(v24 + 32) = v14;
        *(void *)(v24 + 40) = v23;
        aBlock[4] = (uint64_t)sub_1000FBCA8;
        aBlock[5] = v24;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000E98D0;
        aBlock[3] = (uint64_t)&unk_1001AF8D8;
        unint64_t v25 = _Block_copy(aBlock);
        swift_unknownObjectRetain();
        uint64_t v26 = v3;
        swift_release();
        [v13 performAsynchronousWritingBlock:v25];
        swift_unknownObjectRelease();

        _Block_release(v25);
        return;
      }
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        char v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to update availability.", v29, 2u);
        swift_slowDealloc();
        swift_unknownObjectRelease();

LABEL_22:
        return;
      }
    }
    swift_unknownObjectRelease();
    goto LABEL_22;
  }
}

void sub_1000F6168(uint64_t a1)
{
  uint64_t v2 = v1;
  if ([v2 delegate])
  {
    uint64_t aBlock[6] = &OBJC_PROTOCOL___SCATHeadTrackerInputSourceDelegate_0;
    uint64_t v4 = swift_dynamicCastObjCProtocolConditional();
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      id v6 = [v2 queue];
      if (v6)
      {
        uint64_t v7 = v6;
        double v8 = (*(double (**)(void))(*(void *)a1 + 128))();
        double v9 = (*(double (**)(void))(*(void *)a1 + 152))();
        if ([v5 respondsToSelector:"headTrackerInputSource:didUpdateState:"])
        {
          uint64_t v10 = (double *)swift_allocObject();
          *((void *)v10 + 2) = v5;
          *((void *)v10 + 3) = v2;
          void v10[4] = v8;
          v10[5] = v9;
          aBlock[4] = sub_1000FBC50;
          aBlock[5] = v10;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1000E98D0;
          aBlock[3] = &unk_1001AF888;
          uint64_t v11 = _Block_copy(aBlock);
          swift_unknownObjectRetain();
          id v12 = v2;
          swift_release();
          [v7 performAsynchronousWritingBlock:v11];
          swift_unknownObjectRelease();

          _Block_release(v11);
          return;
        }
        if (qword_1001F2160 != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        sub_1000E881C(v13, (uint64_t)qword_1001F3958);
        char v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to update state.", v16, 2u);
          swift_slowDealloc();
          swift_unknownObjectRelease();

          return;
        }
      }
    }
    swift_unknownObjectRelease();
  }
}

void HeadTracker.update(withSwitches:recipe:)(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1000EED9C((uint64_t *)&unk_1001EFD50);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    if (qword_1001F2160 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_1000E881C(v12, (uint64_t)qword_1001F3958);
    os_log_t v105 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v105, v13))
    {
      char v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v105, v13, "update switches called with nil list of switches.", v14, 2u);
      swift_slowDealloc();
    }
    os_log_t v15 = v105;

    return;
  }
  unint64_t v7 = sub_1000FA23C(&_swiftEmptyArrayStorage);
  id v97 = v6;
  id v98 = a2;
  uint64_t v101 = v7;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000F00F4(0, (unint64_t *)&qword_1001F02D0);
    sub_1000FA33C();
    Set.Iterator.init(_cocoa:)();
    a1 = v108;
    uint64_t v8 = v109;
    uint64_t v9 = v110;
    uint64_t v10 = v111;
    unint64_t v11 = v112;
  }
  else
  {
    uint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v8 = a1 + 56;
    uint64_t v9 = ~v16;
    uint64_t v17 = -v16;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v11 = v18 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
  }
  uint64_t v100 = v9;
  uint64_t v104 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  os_log_t v105 = (os_log_t)((unint64_t)(v9 + 64) >> 6);
  id v96 = @"SwitchActionTypeNormal";
  id v95 = @"SwitchActionTypeLongPress";
  __int16 v103 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    uint64_t v19 = v10;
    if ((a1 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v22 = __CocoaSet.Iterator.next()();
    if (!v22) {
      goto LABEL_72;
    }
    uint64_t v106 = v22;
    sub_1000F00F4(0, (unint64_t *)&qword_1001F02D0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v23 = (id)v107;
    swift_unknownObjectRelease();
    if (!v23) {
      goto LABEL_72;
    }
LABEL_39:
    id v27 = [v23 source];
    if (!v27)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      goto LABEL_17;
    }
    os_log_type_t v28 = v27;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v31)
    {
      if (v29 == v32 && v31 == v33)
      {
        swift_bridgeObjectRelease_n();
LABEL_46:
        unint64_t v99 = sub_1000F374C((uint64_t)&_swiftEmptyArrayStorage);
        uint64_t v35 = v98;
        if (v98)
        {
          id v36 = objc_allocWithZone((Class)SCATActionItem);
          id v37 = v35;
          id v94 = v37;
          id v38 = [v36 init];
          id v39 = [objc_allocWithZone((Class)SCATActionItem) init];
          SCATGetActionIdentifiersForRecipeAndSwitch(v37, v23, v38, v39);
          unint64_t v40 = v96;
          unint64_t v41 = v99;
          id v42 = v40;
          id v43 = v38;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v107 = v41;
          sub_1000F92B8((uint64_t)v43, v42, isUniquelyReferenced_nonNull_native);
          uint64_t v45 = v107;

          swift_bridgeObjectRelease();
          unint64_t v46 = v95;
          id v47 = v39;
          char v48 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v107 = v45;
          sub_1000F92B8((uint64_t)v47, v46, v48);
          unint64_t v99 = v107;

LABEL_62:
          swift_bridgeObjectRelease();
          goto LABEL_63;
        }
        os_log_type_t v49 = self;
        double v50 = v96;
        id v94 = v49;
        id v51 = [v49 fromSwitch:v23 longPress:0];
        if (v51)
        {
          uint64_t v52 = (uint64_t)v51;
          unint64_t v53 = v99;
          char v54 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v107 = v53;
          sub_1000F92B8(v52, v50, v54);
          unint64_t v99 = v107;
LABEL_54:

          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
        swift_bridgeObjectRetain();
        unint64_t v55 = sub_1000F7914((uint64_t)v50);
        char v57 = v56;
        swift_bridgeObjectRelease();
        if (v57)
        {
          unint64_t v58 = v99;
          char v59 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v107 = v58;
          if ((v59 & 1) == 0)
          {
            sub_1000F9AAC();
            unint64_t v99 = v107;
          }
          uint64_t v60 = v99;

          os_log_type_t v61 = *(void **)(*(void *)(v60 + 56) + 8 * v55);
          sub_1000F8CE0(v55, v60);

          goto LABEL_54;
        }

LABEL_55:
        long long v62 = v95;
        id v63 = [v94 fromSwitch:v23 longPress:1];
        if (v63)
        {
          uint64_t v64 = (uint64_t)v63;
          unint64_t v65 = v99;
          char v66 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v107 = v65;
          sub_1000F92B8(v64, v62, v66);
          unint64_t v99 = v107;
LABEL_61:

          goto LABEL_62;
        }
        swift_bridgeObjectRetain();
        unint64_t v67 = sub_1000F7914((uint64_t)v62);
        char v69 = v68;
        swift_bridgeObjectRelease();
        if (v69)
        {
          unint64_t v70 = v99;
          char v71 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v107 = v70;
          if ((v71 & 1) == 0)
          {
            sub_1000F9AAC();
            unint64_t v99 = v107;
          }
          uint64_t v72 = v99;

          double v73 = *(void **)(*(void *)(v72 + 56) + 8 * v67);
          sub_1000F8CE0(v67, v72);

          goto LABEL_61;
        }

LABEL_63:
        id v74 = [v23 headSwitch];
        uint64_t v75 = v101;
        char v76 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v107 = v75;
        sub_1000F917C(v99, (Swift::UInt)v74, v76);
        uint64_t v101 = v107;
        swift_bridgeObjectRelease();
        id v77 = [v23 headSwitch];
        id v78 = [v23 uuid];
        uint64_t v79 = (uint64_t)v97;
        if (v78)
        {
          id v80 = v78;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v81 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v79, 0, 1, v81);
        }
        else
        {
          uint64_t v82 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v79, 1, 1, v82);
        }
        swift_beginAccess();
        sub_1000F6E98(v79, (Swift::UInt)v77);
        swift_endAccess();
        id v83 = [v23 headSwitch];
        id v84 = [v23 name];
        if (v84)
        {
          v85 = v84;
          uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v88 = v87;
        }
        else
        {
          uint64_t v86 = 0;
          uint64_t v88 = 0;
        }
        swift_beginAccess();
        sub_1000F70F4(v86, v88, (Swift::UInt)v83);
        swift_endAccess();
      }
      else
      {
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v34) {
          goto LABEL_46;
        }
      }
    }
    else
    {
LABEL_17:

      swift_bridgeObjectRelease();
    }
  }
  if (v11)
  {
    unint64_t v20 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v21 = v20 | (v10 << 6);
    goto LABEL_38;
  }
  uint64_t v24 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_77;
  }
  if (v24 >= (uint64_t)v105) {
    goto LABEL_72;
  }
  unint64_t v25 = *(void *)(v8 + 8 * v24);
  ++v10;
  if (v25) {
    goto LABEL_37;
  }
  uint64_t v10 = v19 + 2;
  if (v19 + 2 >= (uint64_t)v105) {
    goto LABEL_72;
  }
  unint64_t v25 = *(void *)(v8 + 8 * v10);
  if (v25) {
    goto LABEL_37;
  }
  uint64_t v10 = v19 + 3;
  if (v19 + 3 >= (uint64_t)v105) {
    goto LABEL_72;
  }
  unint64_t v25 = *(void *)(v8 + 8 * v10);
  if (v25) {
    goto LABEL_37;
  }
  uint64_t v10 = v19 + 4;
  if (v19 + 4 >= (uint64_t)v105) {
    goto LABEL_72;
  }
  unint64_t v25 = *(void *)(v8 + 8 * v10);
  if (v25)
  {
LABEL_37:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v21 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_38:
    id v23 = *(id *)(*(void *)(a1 + 48) + 8 * v21);
    if (!v23) {
      goto LABEL_72;
    }
    goto LABEL_39;
  }
  os_log_t v26 = (os_log_t)(v19 + 5);
  while (v105 != v26)
  {
    unint64_t v25 = *(void *)(v8 + 8 * (void)v26);
    os_log_t v26 = (os_log_t)((char *)v26 + 1);
    if (v25)
    {
      uint64_t v10 = (uint64_t)&v26[-1].isa + 7;
      goto LABEL_37;
    }
  }
LABEL_72:
  sub_1000FBFF0();
  if (qword_1001F2160 == -1) {
    goto LABEL_73;
  }
LABEL_77:
  swift_once();
LABEL_73:
  uint64_t v89 = type metadata accessor for Logger();
  sub_1000E881C(v89, (uint64_t)qword_1001F3958);
  v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v90, v91))
  {
    v92 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v92 = 0;
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Updated Actions", v92, 2u);
    swift_slowDealloc();
  }

  sub_1000F71EC(v101);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v102 setActions:isa];
}

uint64_t sub_1000F6E98(uint64_t a1, Swift::UInt a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000EED9C((uint64_t *)&unk_1001EFD50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_1000FBEA8(a1, (uint64_t *)&unk_1001EFD50);
    unint64_t v13 = sub_1000F7864(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000F9678();
        uint64_t v17 = v21;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, v9);
      sub_1000F8AEC(v15, v17);
      *uint64_t v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return sub_1000FBEA8((uint64_t)v8, (uint64_t *)&unk_1001EFD50);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000F9014((uint64_t)v12, a2, v18);
    *uint64_t v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_1000F70F4(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1000F8ED4(a1, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
  }
  else
  {
    unint64_t result = sub_1000F7864(a3);
    if ((v10 & 1) == 0) {
      return result;
    }
    unint64_t v11 = result;
    int v12 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v3;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!v12)
    {
      sub_1000F94C8();
      uint64_t v13 = v15;
    }
    sub_1000F8930(v11, v13);
    *uint64_t v4 = v13;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F71EC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000EED9C(&qword_1001F00D0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v25 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v24) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v24) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v24) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v24) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v25 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    *(void *)&v34[0] = *(void *)(*(void *)(a1 + 48) + 8 * v12);
    type metadata accessor for SCATCameraSwitch(0);
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000EED9C((uint64_t *)&unk_1001F0090);
    swift_dynamicCast();
    long long v30 = v26;
    long long v31 = v27;
    uint64_t v32 = v28;
    sub_1000EFC04(&v29, v33);
    long long v26 = v30;
    long long v27 = v31;
    uint64_t v28 = v32;
    sub_1000EFC04(v33, v34);
    sub_1000EFC04(v34, &v30);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)&v6[8 * (v18 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v18) & ~*(void *)&v6[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)&v6[8 * v19];
      }
      while (v23 == -1);
      unint64_t v9 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v26;
    *(_OWORD *)(v10 + 16) = v27;
    *(void *)(v10 + 32) = v28;
    uint64_t result = (uint64_t)sub_1000EFC04(&v30, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v24)
  {
LABEL_37:
    swift_release();
    sub_1000FBFF0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v25 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v24) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void HeadTracker.didOutputMetadataObjects(inputSource:captureOutput:metadataObjects:fromConnection:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_1000F76AC(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_1000F76D4()
{
}

uint64_t sub_1000F76F8(uint64_t a1, uint64_t a2)
{
  return sub_1000F7728(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000F7710(uint64_t a1, uint64_t a2)
{
  return sub_1000F7728(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000F7728(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

void *sub_1000F776C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1000F777C(uint64_t a1)
{
  uint64_t v2 = sub_1000FBC04((unint64_t *)&unk_1001F0120, type metadata accessor for SCATSwitchActionType);
  uint64_t v3 = sub_1000FBC04(&qword_1001F03E0, type metadata accessor for SCATSwitchActionType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void type metadata accessor for UIDeviceOrientation(uint64_t a1)
{
}

double sub_1000F784C(double a1)
{
  return round(a1);
}

double sub_1000F7854(double a1)
{
  return fabs(a1);
}

double sub_1000F785C(double a1)
{
  return floor(a1);
}

unint64_t sub_1000F7864(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000F79A8(a1, v2);
}

unint64_t sub_1000F78D0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000F7A44(a1, v4);
}

unint64_t sub_1000F7914(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_1000F7B0C(a1, v2);
}

unint64_t sub_1000F79A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1000F7A44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000FBFF8(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000F9F50((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000F7B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1000F7C84(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000EED9C(&qword_1001F00B8);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      uint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      void *v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000F7F6C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  id v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_1000EED9C(&qword_1001F00C0);
  int v41 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = result;
  if (*(void *)(v7 + 16))
  {
    id v37 = v2;
    int64_t v10 = 0;
    uint64_t v11 = *(void *)(v7 + 64);
    id v39 = (void *)(v7 + 64);
    uint64_t v12 = 1 << *(unsigned char *)(v7 + 32);
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v11;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    unint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    unint64_t v15 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    uint64_t v16 = result + 64;
    while (1)
    {
      if (v14)
      {
        unint64_t v18 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v19 = v18 | (v10 << 6);
      }
      else
      {
        int64_t v20 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v39;
        if (v20 >= v38) {
          goto LABEL_34;
        }
        unint64_t v21 = v39[v20];
        ++v10;
        if (!v21)
        {
          int64_t v10 = v20 + 1;
          if (v20 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v21 = v39[v10];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v38)
            {
LABEL_34:
              if ((v41 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v37;
                goto LABEL_41;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v7 + 32);
              if (v36 >= 64) {
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *id v39 = -1 << v36;
              }
              uint64_t v3 = v37;
              *(void *)(v7 + 16) = 0;
              break;
            }
            unint64_t v21 = v39[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v10 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_43;
                }
                if (v10 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v21 = v39[v10];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v10 = v22;
          }
        }
LABEL_21:
        unint64_t v14 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v10 << 6);
      }
      uint64_t v23 = *(void *)(v7 + 56);
      uint64_t v24 = v7;
      Swift::UInt v25 = *(void *)(*(void *)(v7 + 48) + 8 * v19);
      uint64_t v26 = v5;
      uint64_t v27 = *(void *)(v5 + 72);
      uint64_t v28 = v23 + v27 * v19;
      if (v41) {
        (*v15)(v42, v28, v43);
      }
      else {
        (*v40)(v42, v28, v43);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v25);
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v17 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v9 + 48) + 8 * v17) = v25;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v15)(*(void *)(v9 + 56) + v27 * v17, v42, v43);
      ++*(void *)(v9 + 16);
      uint64_t v5 = v26;
      uint64_t v7 = v24;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_1000F8324(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000EED9C(&qword_1001F00C8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v32[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v32 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      Swift::UInt v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1000F8600(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000EED9C(&qword_1001F00B0);
  char v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    char v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    int64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    char v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((v39 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  char v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_1000F8930(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        uint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (void *)(v11 + 8 * v3);
          int64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            _OWORD *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000F8AEC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Swift::UInt v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        uint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (void *)(v11 + 8 * v3);
        int64_t v13 = (void *)(v11 + 8 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for UUID() - 8) + 72);
        int64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1000F8CE0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        id v10 = v9;
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();

        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            void *v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          int64_t v17 = (void *)(v16 + 8 * v3);
          unint64_t v18 = (void *)(v16 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            void *v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  uint64_t *v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1000F8ED4(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000F7864(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000F94C8();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      void *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    uint64_t v21 = (void *)(v18[7] + 16 * v12);
    void *v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000F7C84(result, a4 & 1);
  uint64_t result = sub_1000F7864(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    unint64_t v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for SCATCameraSwitch(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000F9014(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000F7864(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1000F9678();
      goto LABEL_7;
    }
    sub_1000F7F6C(v13, a3 & 1);
    unint64_t v24 = sub_1000F7864(a2);
    if ((v14 & 1) == (v25 & 1))
    {
      unint64_t v10 = v24;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for SCATCameraSwitch(0);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v19 = *(void *)(v18 - 8);
    char v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v21 = v18;
    uint64_t v22 = v17 + *(void *)(v19 + 72) * v10;
    return v20(v22, a1, v21);
  }
LABEL_13:

  return sub_1000F941C(v10, a2, a1, v16);
}

uint64_t sub_1000F917C(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000F7864(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000F9908();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000F8324(result, a3 & 1);
  uint64_t result = sub_1000F7864(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for SCATCameraSwitch(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000F92B8(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_1000F7914((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1000F9AAC();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1000F8600(v12, a3 & 1);
  unint64_t v17 = sub_1000F7914((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    type metadata accessor for SCATSwitchActionType(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v22;

  id v23 = a2;
}

uint64_t sub_1000F941C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

void *sub_1000F94C8()
{
  uint64_t v1 = v0;
  sub_1000EED9C(&qword_1001F00B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v21;
    v22[1] = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000F9678()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EED9C(&qword_1001F00C0);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1000F9908()
{
  uint64_t v1 = v0;
  sub_1000EED9C(&qword_1001F00C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000F9AAC()
{
  uint64_t v1 = v0;
  sub_1000EED9C(&qword_1001F00B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_1000F9C54(unint64_t result)
{
  if (result > 3) {
    return 0;
  }
  return result;
}

unint64_t sub_1000F9C64(uint64_t a1)
{
  uint64_t v2 = sub_1000EED9C(&qword_1001F00D8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (Swift::UInt *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_1000EED9C(&qword_1001F00C0);
    unint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = (char *)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      sub_1000FC054(v9, (uint64_t)v5, &qword_1001F00D8);
      Swift::UInt v11 = *v5;
      unint64_t result = sub_1000F7864(*v5);
      if (v13) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v7[6] + 8 * result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for UUID();
      unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v8, v16);
      uint64_t v17 = v7[2];
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      void v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1000F9E2C(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000EED9C(&qword_1001F00B8);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_1000F7864(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    uint64_t v10 = (void *)(v3[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    void v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    unint64_t v14 = v9 + 3;
    Swift::UInt v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000F7864(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void type metadata accessor for SCATCameraSwitch(uint64_t a1)
{
}

uint64_t sub_1000F9F50(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for HeadTracker()
{
  return self;
}

uint64_t type metadata accessor for HeadGestureState()
{
  return self;
}

uint64_t sub_1000F9FEC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 42, 7);
}

id sub_1000FA034()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 40);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 41);
  if (qword_1001F2160 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_1000E881C(v6, (uint64_t)qword_1001F3958);
  id v7 = v1;
  char v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v14 = v2;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    unsigned int v15 = v5;
    id v11 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v7;

    uint64_t v5 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Did receive, and sending, action: %@", v10, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v14;
    swift_slowDealloc();
  }
  else
  {
  }
  return objc_msgSend(v2, "headTrackerInputSource:didReceiveActionWithIdentifier:start:ignoreInputHold:", v3, objc_msgSend(v7, "action"), v4, v5);
}

uint64_t sub_1000FA224(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000FA234()
{
  return swift_release();
}

unint64_t sub_1000FA23C(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000EED9C(&qword_1001F00C8);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_1000F7864(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  char v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    void v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    Swift::UInt v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000F7864(v5);
    char v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1000FA33C()
{
  unint64_t result = qword_1001EFD60;
  if (!qword_1001EFD60)
  {
    sub_1000F00F4(255, (unint64_t *)&qword_1001F02D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFD60);
  }
  return result;
}

uint64_t _s15assistivetouchd11HeadTrackerC2IDSSvg_0()
{
  return 0x6361725464616548;
}

void sub_1000FA3C4(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x138))(v6))
  {
    if (qword_1001F2160 != -1) {
      swift_once();
    }
    id v9 = (id)sub_1000E881C(v4, (uint64_t)qword_1001F3958);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      v62[0] = v60;
      char v59 = v12;
      *(_DWORD *)uint64_t v12 = 136315138;
      unint64_t v58 = v12 + 4;
      sub_1000F00F4(0, &qword_1001EFA40);
      id v61 = v9;
      uint64_t v13 = v8;
      uint64_t v14 = v2;
      uint64_t v15 = v5;
      uint64_t v16 = v4;
      swift_bridgeObjectRetain();
      uint64_t v17 = Array.description.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v20 = v17;
      uint64_t v4 = v16;
      uint64_t v5 = v15;
      uint64_t v2 = v14;
      char v8 = v13;
      id v9 = v61;
      uint64_t v64 = sub_1000EDB70(v20, v19, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Did output metadata objects. Objects: %s", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v21 = swift_bridgeObjectRelease_n();
    }
    int64_t v25 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB8);
    uint64_t v26 = (void *)((swift_isaMask & *v2) + 184);
    uint64_t v27 = ((uint64_t (*)(uint64_t))v25)(v21);
    swift_release();
    if (!v27)
    {
      type metadata accessor for Face();
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 64) = 0;
      *(unsigned char *)(v28 + 72) = 0;
      CFTimeInterval v29 = CACurrentMediaTime();
      *(int64x2_t *)(v28 + 16) = vdupq_n_s64(0x3FE9333333333333uLL);
      *(int64x2_t *)(v28 + 32) = vdupq_n_s64(0x3FDB333333333333uLL);
      *(void *)(v28 + 88) = 0;
      *(void *)(v28 + 96) = 0;
      *(void *)(v28 + 80) = 0;
      *(CFTimeInterval *)(v28 + 48) = v29;
      *(CFTimeInterval *)(v28 + 56) = v29;
      uint64_t v30 = (void *)((char *)v2 + OBJC_IVAR___SCATHeadTracker_face);
      swift_beginAccess();
      *uint64_t v30 = v28;
      swift_release();
    }
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v48 == 1)
      {
        swift_bridgeObjectRetain();
        if (!_CocoaArrayWrapper.endIndex.getter())
        {
          swift_bridgeObjectRelease();
LABEL_31:
          uint64_t v45 = Logger.logObject.getter();
          os_log_type_t v46 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v45, v46))
          {
LABEL_40:

            goto LABEL_42;
          }
          id v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v47 = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Could not convert metadata object into a metadata face object.", v47, 2u);
LABEL_39:
          swift_slowDealloc();
          goto LABEL_40;
        }
LABEL_19:
        if ((a1 & 0xC000000000000001) != 0)
        {
          id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_47:

            __break(1u);
            return;
          }
          id v31 = *(id *)(a1 + 32);
        }
        char v32 = v31;
        swift_bridgeObjectRelease();
        self;
        uint64_t v33 = swift_dynamicCastObjCClass();
        if (v33)
        {
          uint64_t v34 = v33;
          id v61 = v32;
          uint64_t v35 = v25();
          if (v35)
          {
            (*(void (**)(uint64_t))(*(void *)v35 + 360))(v34);
            uint64_t v35 = swift_release();
          }
          uint64_t v36 = ((uint64_t (*)(uint64_t))v25)(v35);
          if (v36)
          {
            uint64_t v37 = v36;
            id v38 = [self currentDeviceOrientationAllowingAmbiguous:0];
            (*(void (**)(id))(*(void *)v37 + 312))(v38);
            swift_release();
          }
          (*(void (**)(char *, id, uint64_t))(v5 + 16))(v8, v9, v4);
          a1 = v2;
          char v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v39, v40))
          {

            (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
            return;
          }
          unint64_t v58 = (uint8_t *)v8;
          char v59 = (uint8_t *)v5;
          uint64_t v60 = v4;
          int v41 = (uint8_t *)swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          *(_DWORD *)int v41 = 136315138;
          if (v25())
          {
            uint64_t v42 = Face.description.getter();
            unint64_t v44 = v43;
            swift_release();
            uint64_t v63 = sub_1000EDB70(v42, v44, &v64);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v39, v40, "Updated Face: %s", v41, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*((void (**)(uint8_t *, uint64_t))v59 + 1))(v58, v60);
            return;
          }
          goto LABEL_47;
        }

        goto LABEL_31;
      }
    }
    else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
    {
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v45, v49))
    {

      uint64_t v55 = swift_bridgeObjectRelease_n();
LABEL_42:
      uint64_t v56 = ((uint64_t (*)(uint64_t))v25)(v55);
      if (v56)
      {
        (*(void (**)(void))(*(void *)v56 + 224))(0);
        swift_release();
      }
      return;
    }
    id v61 = v26;
    double v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)double v50 = 136315138;
    uint64_t v60 = (uint64_t)(v50 + 4);
    sub_1000F00F4(0, &qword_1001EFA40);
    swift_bridgeObjectRetain();
    uint64_t v51 = Array.description.getter();
    uint64_t v52 = v25;
    unint64_t v54 = v53;
    swift_bridgeObjectRelease();
    uint64_t v63 = sub_1000EDB70(v51, v54, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    int64_t v25 = v52;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v45, v49, "More than one face is visible. Metadata Objects: %s", v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_39;
  }
  if (qword_1001F2160 != -1) {
    swift_once();
  }
  sub_1000E881C(v4, (uint64_t)qword_1001F3958);
  int64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Shouldn't be running when no head gestures are assigned.", v24, 2u);
    swift_slowDealloc();
  }

  [v2 stopRunning];
}

void _s15assistivetouchd11HeadTrackerC21didOutputSampleBuffer11inputSource07captureE006sampleG014fromConnectionyAA011CameraInputI7ManagerC_So09AVCaptureE0CSo08CMSampleG3RefaSo0qM0CtF_0()
{
  uint64_t v1 = v0;
  if ((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x138))())
  {
    uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
    if (v2)
    {
      uint64_t v3 = v2;
      sub_1000F4888(v2);
      os_log_type_t v11 = (id *)sub_1000E9034();
      uint64_t v12 = *(uint64_t (**)(void))((swift_isaMask & *(void *)*v11) + 0x138);
      uint64_t v13 = *v11;
      char v14 = v12();
      if (v14)
      {
        uint64_t v15 = (*(uint64_t (**)(void))((swift_isaMask & *v13) + 0x120))();
        if (!v15)
        {
          if (qword_1001F2160 != -1) {
            swift_once();
          }
          uint64_t v57 = type metadata accessor for Logger();
          sub_1000E881C(v57, (uint64_t)qword_1001F3958);
          unint64_t v58 = Logger.logObject.getter();
          os_log_type_t v59 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v58, v59))
          {
            uint64_t v60 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v60 = 0;
            _os_log_impl((void *)&_mh_execute_header, v58, v59, "Capture output preview was not created in Camera Input Source Manager. Can not update preview.", v60, 2u);
            swift_slowDealloc();
          }

          goto LABEL_32;
        }
        uint64_t v16 = (void *)v15;
        uint64_t v17 = (id *)sub_1000E9034();
        unint64_t v18 = *(uint64_t (**)(uint64_t, unint64_t))((swift_isaMask & *(void *)*v17) + 0x1F0);
        id v19 = *v17;
        uint64_t v20 = (void *)v18(0x6361725464616548, 0xEB0000000072656BLL);

        if (v20
          || (id v61 = *v17,
              id v62 = static CameraInputSourceManager.CameraInputSourceDefaults.previewLayerColor.getter(),
              double v63 = static CameraInputSourceManager.CameraInputSourceDefaults.previewWidth.getter(),
              v64.n128_u64[0] = static CameraInputSourceManager.CameraInputSourceDefaults.previewHeight.getter(),
              uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, id, double, __n128))((swift_isaMask & *v61) + 0x1D8))(0x6361725464616548, 0xEB0000000072656BLL, v62, v63, v64), v61, v62, v20))
        {
          id v21 = [v16 layer];
          [v21 frame];
          CGFloat v23 = v22;
          CGFloat v25 = v24;
          CGFloat v27 = v26;
          CGFloat v29 = v28;

          v78.origin.CGFloat x = v23;
          v78.origin.double y = v25;
          v78.size.CGFloat width = v27;
          v78.size.double height = v29;
          double Width = CGRectGetWidth(v78);
          id v31 = [v16 layer];
          [v31 frame];
          CGFloat v33 = v32;
          CGFloat v35 = v34;
          CGFloat v37 = v36;
          CGFloat v39 = v38;

          v79.origin.CGFloat x = v33;
          v79.origin.double y = v35;
          v79.size.CGFloat width = v37;
          v79.size.double height = v39;
          double Height = CGRectGetHeight(v79);
          int v41 = *(double (**)(void))(*(void *)v3 + 144);
          double v42 = v41();
          uint64_t v43 = ((uint64_t (*)(void))v41)();
          double v45 = v44;
          uint64_t v46 = ((uint64_t (*)(uint64_t))v41)(v43);
          double v48 = v47;
          uint64_t v49 = ((uint64_t (*)(uint64_t))v41)(v46);
          double v51 = v50;
          uint64_t v52 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 216);
          if (v52(v49))
          {
            v56.n128_f64[0] = Height * v51;
            v55.n128_f64[0] = Width * v48;
            v54.n128_f64[0] = Height * v45;
            v53.n128_f64[0] = Width * v42;
          }
          else
          {
            v53.n128_u64[0] = 0;
            v54.n128_u64[0] = 0;
            v55.n128_f64[0] = Width;
            v56.n128_f64[0] = Height;
          }
          double v65 = HeadTrackerAvailabilityDetail.rawValue.getter(v53, v54, v55, v56);
          double v67 = v66;
          double v69 = v68;
          double v71 = v70;
          sub_1000FBF58((uint64_t)v75);
          uint64_t v72 = sub_1000FBF78((uint64_t)v75, (uint64_t)&v76, (uint64_t *)&unk_1001F00A0);
          char v73 = v52(v72);
          (*(void (**)(uint64_t, unint64_t, uint64_t *, BOOL, void, double, double, double, double))((swift_isaMask & *v13) + 0x1E0))(0x6361725464616548, 0xEB0000000072656BLL, &v76, (v73 & 1) == 0, 0, v65, v67, v69, v71);

          goto LABEL_32;
        }
      }
LABEL_32:
      swift_release();
      return;
    }
    if (qword_1001F2160 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_1000E881C(v8, (uint64_t)qword_1001F3958);
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "No face created", v10, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_1001F2160 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_1000E881C(v4, (uint64_t)qword_1001F3958);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Shouldn't be running when no head gestures are assigned.", v7, 2u);
      swift_slowDealloc();
    }

    [v1 stopRunning];
  }
}

unint64_t sub_1000FB724()
{
  unint64_t result = qword_1001EFD68;
  if (!qword_1001EFD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFD68);
  }
  return result;
}

unint64_t sub_1000FB77C()
{
  unint64_t result = qword_1001EFD70;
  if (!qword_1001EFD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFD70);
  }
  return result;
}

unint64_t sub_1000FB7D4()
{
  unint64_t result = qword_1001EFD78;
  if (!qword_1001EFD78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001EFD78);
  }
  return result;
}

uint64_t type metadata accessor for Face()
{
  return self;
}

ValueMetadata *type metadata accessor for Face.FaceConstants()
{
  return &type metadata for Face.FaceConstants;
}

uint64_t getEnumTagSinglePayload for HeadGestureState.HeadState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HeadGestureState.HeadState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FB9B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000FB9E0(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HeadGestureState.HeadState()
{
  return &type metadata for HeadGestureState.HeadState;
}

unsigned char *storeEnumTagSinglePayload for HeadMovementSensitivity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FBAC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadMovementSensitivity()
{
  return &type metadata for HeadMovementSensitivity;
}

ValueMetadata *type metadata accessor for HeadTrackerAvailabilityDetail()
{
  return &type metadata for HeadTrackerAvailabilityDetail;
}

uint64_t initializeBufferWithCopyOfBuffer for HeadTracker.HeadTrackerError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HeadTracker.HeadTrackerError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HeadTracker.HeadTrackerError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000FBB70(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000FBB8C(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadTracker.HeadTrackerError()
{
  return &type metadata for HeadTracker.HeadTrackerError;
}

uint64_t sub_1000FBBBC()
{
  return sub_1000FBC04(&qword_1001F0078, type metadata accessor for SCATCameraSwitch);
}

uint64_t sub_1000FBC04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1000FBC50()
{
  return objc_msgSend(*(id *)(v0 + 16), "headTrackerInputSource:didUpdateState:", *(void *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_1000FBC68()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

id sub_1000FBCA8()
{
  return [*(id *)(v0 + 16) headTrackerInputSource:*(void *)(v0 + 24) didUpdateAvailability:*(unsigned __int8 *)(v0 + 32) withDetail:*(void *)(v0 + 40)];
}

uint64_t sub_1000FBCC0()
{
  uint64_t v1 = *(void *)(sub_1000EED9C((uint64_t *)&unk_1001EFD50) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);

  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_1000FBE10()
{
  uint64_t v1 = *(void *)(sub_1000EED9C((uint64_t *)&unk_1001EFD50) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + v2;
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  int v8 = (void *)v6[1];

  sub_1000F55CC(v3, v4, v5, v7, v8);
}

uint64_t sub_1000FBEA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000EED9C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1000FBF04()
{
  unint64_t result = qword_1001F0088;
  if (!qword_1001F0088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001F0088);
  }
  return result;
}

double sub_1000FBF58(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_1000FBF78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000EED9C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for SCATSwitchActionType(uint64_t a1)
{
}

uint64_t sub_1000FBFF0()
{
  return swift_release();
}

uint64_t sub_1000FBFF8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000FC054(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000EED9C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for SCATCameraInputSourceState(uint64_t a1)
{
}

uint64_t sub_1000FC0CC()
{
  return sub_1000FBC04((unint64_t *)&unk_1001F03C0, type metadata accessor for SCATSwitchActionType);
}

uint64_t sub_1000FC114()
{
  return sub_1000FBC04((unint64_t *)&unk_1001F0110, type metadata accessor for SCATSwitchActionType);
}

uint64_t sub_1000FC15C()
{
  return sub_1000FBC04((unint64_t *)&unk_1001F03D0, type metadata accessor for SCATSwitchActionType);
}

id sub_1000FC4E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + *a3;
  swift_beginAccess();
  if (*(void *)(v3 + 8))
  {
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }

  return v4;
}

uint64_t sub_1000FC574(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  os_log_type_t v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  uint64_t *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

id sub_1000FC7AC()
{
  Objectint Type = (objc_class *)swift_getObjectType();
  unint64_t v2 = &v0[OBJC_IVAR___HNDEvent_actionOverride];
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = &v0[OBJC_IVAR___HNDEvent_hardwareIdentifier];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  *(_DWORD *)&v0[OBJC_IVAR___HNDEvent_type] = 0;
  NSString v4 = &v0[OBJC_IVAR___HNDEvent_location];
  *(void *)NSString v4 = 0;
  *((void *)v4 + 1) = 0;
  *(void *)&v0[OBJC_IVAR___HNDEvent_deltaX] = 0;
  *(void *)&v0[OBJC_IVAR___HNDEvent_deltaY] = 0;
  *(void *)&v0[OBJC_IVAR___HNDEvent_buttonNumber] = 0;
  swift_beginAccess();
  *(void *)unint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v5 = v0;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  swift_bridgeObjectRelease();
  v5[OBJC_IVAR___HNDEvent_isEyeTrackingEvent] = 0;
  v5[OBJC_IVAR___HNDEvent_isVirtualTrackpadEvent] = 0;
  v5[OBJC_IVAR___HNDEvent_isGamepadEvent] = 0;

  v7.receiver = v5;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, "init");
}

uint64_t sub_1000FC960()
{
  Objectint Type = (objc_class *)swift_getObjectType();
  sub_1000EED9C(&qword_1001EFC38);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100198C10;
  v24.receiver = v0;
  v24.super_class = ObjectType;
  id v3 = objc_msgSendSuper2(&v24, "description");
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *(void *)(v2 + 56) = &type metadata for String;
  unint64_t v7 = sub_1000FCCC0();
  *(void *)(v2 + 64) = v7;
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 40) = v6;
  uint64_t v8 = &v0[OBJC_IVAR___HNDEvent_type];
  swift_beginAccess();
  unint64_t v9 = 0xE400000000000000;
  uint64_t v10 = 1819047246;
  switch(*(_DWORD *)v8)
  {
    case 0:
      break;
    case 1:
      unint64_t v9 = 0xEF6E776F446E6F74;
      goto LABEL_5;
    case 2:
      unint64_t v9 = 0xED000070556E6F74;
LABEL_5:
      uint64_t v10 = 0x7475426573756F4DLL;
      break;
    case 3:
      unint64_t v9 = 0xEA00000000006465;
      uint64_t v10 = 0x766F4D6573756F4DLL;
      break;
    case 4:
      unint64_t v9 = 0xEB000000006C6565;
      uint64_t v10 = 0x68576C6C6F726353;
      break;
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1000FCCACLL);
  }
  *(void *)(v2 + 96) = &type metadata for String;
  *(void *)(v2 + 104) = v7;
  *(void *)(v2 + 72) = v10;
  *(void *)(v2 + 80) = v9;
  swift_beginAccess();
  Class isa = CGPoint._bridgeToObjectiveC()().super.isa;
  *(void *)(v2 + 136) = sub_1000FCD14();
  *(void *)(v2 + 144) = sub_1000FCD54();
  *(void *)(v2 + 112) = isa;
  uint64_t v12 = &v0[OBJC_IVAR___HNDEvent_deltaX];
  swift_beginAccess();
  uint64_t v13 = *(void *)v12;
  *(void *)(v2 + 176) = &type metadata for CGFloat;
  unint64_t v14 = sub_1000FCDAC();
  *(void *)(v2 + 184) = v14;
  *(void *)(v2 + 152) = v13;
  uint64_t v15 = &v0[OBJC_IVAR___HNDEvent_deltaY];
  swift_beginAccess();
  uint64_t v16 = *(void *)v15;
  *(void *)(v2 + 216) = &type metadata for CGFloat;
  *(void *)(v2 + 224) = v14;
  *(void *)(v2 + 192) = v16;
  uint64_t v17 = &v0[OBJC_IVAR___HNDEvent_buttonNumber];
  swift_beginAccess();
  uint64_t v18 = *(void *)v17;
  *(void *)(v2 + 256) = &type metadata for Int;
  *(void *)(v2 + 264) = &protocol witness table for Int;
  *(void *)(v2 + 232) = v18;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1000EED9C(&qword_1001F0200);
  uint64_t v19 = String.init<A>(describing:)();
  *(void *)(v2 + 296) = &type metadata for String;
  *(void *)(v2 + 304) = v7;
  *(void *)(v2 + 272) = v19;
  *(void *)(v2 + 280) = v20;
  id v21 = &v0[OBJC_IVAR___HNDEvent_isEyeTrackingEvent];
  swift_beginAccess();
  char v22 = *v21;
  *(void *)(v2 + 336) = &type metadata for Bool;
  *(void *)(v2 + 344) = &protocol witness table for Bool;
  *(unsigned char *)(v2 + 312) = v22;
  return String.init(format:_:)();
}

unint64_t sub_1000FCCC0()
{
  unint64_t result = qword_1001F01E0;
  if (!qword_1001F01E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001F01E0);
  }
  return result;
}

unint64_t sub_1000FCD14()
{
  unint64_t result = qword_1001F01E8;
  if (!qword_1001F01E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001F01E8);
  }
  return result;
}

unint64_t sub_1000FCD54()
{
  unint64_t result = qword_1001F01F0;
  if (!qword_1001F01F0)
  {
    sub_1000FCD14();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001F01F0);
  }
  return result;
}

unint64_t sub_1000FCDAC()
{
  unint64_t result = qword_1001F01F8;
  if (!qword_1001F01F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001F01F8);
  }
  return result;
}

id sub_1000FCE00()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Event()
{
  return self;
}

id sub_1000FCEB0()
{
  uint64_t v1 = OBJC_IVAR___HNDZoomViewController____lazy_storage___zoomView;
  objc_super v2 = *(void **)&v0[OBJC_IVAR___HNDZoomViewController____lazy_storage___zoomView];
  if (v2)
  {
    id v3 = *(id *)&v0[OBJC_IVAR___HNDZoomViewController____lazy_storage___zoomView];
LABEL_5:
    id v17 = v2;
    return v3;
  }
  uint64_t v4 = v0;
  id result = [v0 view];
  if (result)
  {
    uint64_t v6 = result;
    type metadata accessor for ZoomLensView();
    [v6 frame];
    double v8 = v7;
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;

    id v15 = sub_10011130C(v8, v10, v12, v14);
    uint64_t v16 = *(void **)&v4[v1];
    *(void *)&v4[v1] = v15;
    id v3 = v15;

    objc_super v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_1000FCF8C()
{
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR___HNDZoomViewController____lazy_storage___zoomView] = 0;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v6.receiver = v1;
  v6.super_class = v0;
  id v2 = objc_msgSendSuper2(&v6, "initWithNibName:bundle:", 0, 0);
  id result = [v2 view];
  if (result)
  {
    uint64_t v4 = result;
    id v5 = sub_1000FCEB0();
    [v4 addSubview:v5];

    swift_unknownObjectRelease();
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000FD080()
{
  Objectint Type = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR___HNDZoomViewController____lazy_storage___zoomView] = 0;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v6.receiver = v0;
  v6.super_class = ObjectType;
  id v2 = objc_msgSendSuper2(&v6, "initWithNibName:bundle:", 0, 0);
  id result = [v2 view];
  if (result)
  {
    uint64_t v4 = result;
    id v5 = sub_1000FCEB0();
    [v4 addSubview:v5];

    swift_unknownObjectRelease();
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FD238()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000FD270(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    swift_beginAccess();
    uint64_t v4 = (void *)swift_unknownObjectWeakLoadStrong();

    if (v4)
    {
      [v4 didZoomInto:a1];
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1000FD54C(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for ZoomViewController()
{
  return self;
}

void sub_1000FD598(uint64_t a1)
{
}

uint64_t sub_1000FD5A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000F034C(v0, qword_1001F3970);
  sub_1000E881C(v0, (uint64_t)qword_1001F3970);
  return Logger.init(subsystem:category:)();
}

uint64_t HandTrackerAvailabilityDetail.description.getter(uint64_t a1)
{
  if (!a1) {
    return 1701736302;
  }
  if (a1 == 1) {
    return 0x73646E6168206F6ELL;
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t HandTrackerAvailabilityDetail.localizedDescription.getter(uint64_t a1)
{
  if (a1 == 1)
  {
    NSString v1 = String._bridgeToObjectiveC()();
    id v2 = sub_100040EC8(v1);

    if (v2)
    {
LABEL_6:
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v4;
    }
    __break(1u);
  }
  if (!a1)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    id v2 = sub_100040EC8(v3);

    if (v2) {
      goto LABEL_6;
    }
    __break(1u);
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

BOOL HandTrackerAvailabilityDetail.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

uint64_t sub_1000FD7A4()
{
  return HandTrackerAvailabilityDetail.description.getter(*v0);
}

unint64_t variable initialization expression of HandTracker.persistentSwitchIdentifiers()
{
  return sub_100107920((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of HandTracker.switchDisplayNames()
{
  return sub_100107AE8(&_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of HandTracker.minimumNotDetectedCount()
{
  return 10;
}

uint64_t sub_1000FD7CC(uint64_t a1)
{
  uint64_t v3 = sub_1000EED9C((uint64_t *)&unk_1001EFD50);
  uint64_t v138 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v137 = (uint64_t)&v131 - ((unint64_t)(v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = v5;
  __chkstk_darwin(v4);
  uint64_t v163 = (uint64_t)&v131 - v6;
  uint64_t v7 = type metadata accessor for Hand.Chirality();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  double v10 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for Hand.Action();
  double v11 = *(void (***)(char *, uint64_t))(v171 - 8);
  uint64_t v12 = __chkstk_darwin(v171);
  v149 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v15 = (char *)&v131 - v14;
  uint64_t v172 = type metadata accessor for Hand();
  uint64_t v146 = *(void *)(v172 - 8);
  uint64_t v16 = __chkstk_darwin(v172);
  uint64_t v18 = (char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v167 = (char *)&v131 - v19;
  uint64_t v20 = sub_1000EED9C(&qword_1001F0348);
  uint64_t result = __chkstk_darwin(v20 - 8);
  v142 = (char *)&v131 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = OBJC_IVAR___SCATHandTracker_minimumHandID;
  if (*(void *)&v1[OBJC_IVAR___SCATHandTracker_minimumHandID] == a1) {
    return result;
  }
  v176 = v11;
  uint64_t v166 = v8;
  v161 = v18;
  v148 = v15;
  v164 = v10;
  uint64_t v159 = v7;
  v173 = v1;
  uint64_t v158 = OBJC_IVAR___SCATHandTracker_currentHands;
  uint64_t v24 = *(void *)&v1[OBJC_IVAR___SCATHandTracker_currentHands];
  uint64_t v25 = v24 + 64;
  uint64_t v26 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & *(void *)(v24 + 64);
  int64_t v29 = (unint64_t)(v26 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v30 = 0;
  id v31 = &_swiftEmptyArrayStorage;
  double v32 = v167;
  if (!v28) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v33 = __clz(__rbit64(v28));
  v28 &= v28 - 1;
  for (unint64_t i = v33 | (v30 << 6); ; unint64_t i = __clz(__rbit64(v38)) + (v30 << 6))
  {
    unint64_t v35 = *(void *)(*(void *)(v24 + 48) + 8 * i);
    if (v35 < *(void *)&v173[v23])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100103D70(0, v31[2] + 1, 1, v31);
        id v31 = (void *)result;
      }
      unint64_t v41 = v31[2];
      unint64_t v40 = v31[3];
      double v42 = v31;
      if (v41 >= v40 >> 1)
      {
        uint64_t result = (uint64_t)sub_100103D70((void *)(v40 > 1), v41 + 1, 1, v31);
        double v42 = (void *)result;
      }
      v42[2] = v41 + 1;
      id v31 = v42;
      v42[v41 + 4] = v35;
      if (v28) {
        goto LABEL_5;
      }
    }
    else if (v28)
    {
      goto LABEL_5;
    }
LABEL_8:
    int64_t v36 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_101;
    }
    uint64_t v37 = v172;
    if (v36 >= v29) {
      goto LABEL_32;
    }
    unint64_t v38 = *(void *)(v25 + 8 * v36);
    ++v30;
    if (!v38)
    {
      int64_t v30 = v36 + 1;
      if (v36 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v38 = *(void *)(v25 + 8 * v30);
      if (!v38)
      {
        int64_t v30 = v36 + 2;
        if (v36 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v38 = *(void *)(v25 + 8 * v30);
        if (!v38)
        {
          int64_t v30 = v36 + 3;
          if (v36 + 3 >= v29) {
            goto LABEL_32;
          }
          unint64_t v38 = *(void *)(v25 + 8 * v30);
          if (!v38)
          {
            int64_t v30 = v36 + 4;
            if (v36 + 4 >= v29) {
              goto LABEL_32;
            }
            unint64_t v38 = *(void *)(v25 + 8 * v30);
            if (!v38) {
              break;
            }
          }
        }
      }
    }
LABEL_31:
    unint64_t v28 = (v38 - 1) & v38;
  }
  int64_t v39 = v36 + 5;
  if (v39 < v29)
  {
    unint64_t v38 = *(void *)(v25 + 8 * v39);
    if (!v38)
    {
      while (1)
      {
        int64_t v30 = v39 + 1;
        if (__OFADD__(v39, 1)) {
          break;
        }
        if (v30 >= v29) {
          goto LABEL_32;
        }
        unint64_t v38 = *(void *)(v25 + 8 * v30);
        ++v39;
        if (v38) {
          goto LABEL_31;
        }
      }
LABEL_101:
      __break(1u);
      return result;
    }
    int64_t v30 = v39;
    goto LABEL_31;
  }
LABEL_32:
  swift_release();
  uint64_t v141 = v31[2];
  if (v141)
  {
    uint64_t v44 = 0;
    v131 = v31;
    v140 = v31 + 4;
    double v45 = v173;
    v151 = &v173[OBJC_IVAR___SCATHandTracker_persistentSwitchIdentifiers];
    v150 = &v173[OBJC_IVAR___SCATHandTracker_switchDisplayNames];
    v139 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56);
    uint64_t v133 = v146 + 32;
    uint64_t v177 = v146 + 16;
    v175 = (uint64_t (**)(char *, uint64_t))(v176 + 11);
    int v174 = enum case for Hand.Action.thumbIndexPinch(_:);
    v170 = v176 + 1;
    v169 = (uint64_t (**)(char *, uint64_t))(v166 + 88);
    int v168 = enum case for Hand.Chirality.left(_:);
    v176 = (void (**)(char *, uint64_t))(v146 + 8);
    v160 = (void (**)(char *, uint64_t))(v166 + 8);
    v136 = v178 + 7;
    LODWORD(v166) = enum case for Hand.Chirality.right(_:);
    v135 = v180;
    v134 = @"SwitchActionTypeNormal";
    v132 = @"SwitchActionTypeLongPress";
    *(void *)&long long v43 = 136315138;
    long long v147 = v43;
    v165 = (char *)&type metadata for Any + 8;
    uint64_t v46 = v159;
    double v47 = v164;
    double v48 = v148;
    uint64_t v49 = (uint64_t)v142;
    while (1)
    {
      uint64_t v50 = *(void *)&v45[v158];
      unint64_t v51 = sub_100103E80(v140[v44]);
      if (v52)
      {
        unint64_t v53 = v51;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        aBlock[0] = v50;
        uint64_t v55 = v50;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100104DB8();
          uint64_t v55 = aBlock[0];
        }
        uint64_t v56 = v146;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v146 + 32))(v49, *(void *)(v55 + 56) + *(void *)(v146 + 72) * v53, v37);
        sub_100104BE8(v53, v55);
        swift_bridgeObjectRelease();
        uint64_t v57 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56);
        uint64_t v50 = v55;
        v57(v49, 0, 1, v37);
        double v45 = v173;
      }
      else
      {
        (*v139)(v49, 1, 1, v37);
        swift_bridgeObjectRetain();
      }
      sub_1000FBEA8(v49, &qword_1001F0348);
      uint64_t v58 = *(void *)&v45[v158];
      *(void *)&v45[v158] = v50;
      swift_bridgeObjectRetain();
      uint64_t v157 = v58;
      sub_1001086B8(v58, v50);
      uint64_t v60 = v59;
      swift_bridgeObjectRelease();
      uint64_t v61 = v60;
      uint64_t v62 = *(void *)(v60 + 16);
      uint64_t v63 = v171;
      if (v62) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_35:
      ++v44;
      swift_bridgeObjectRelease();
      uint64_t v49 = (uint64_t)v142;
      if (v44 == v141) {
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v144 = v50;
    uint64_t v145 = v44;
    uint64_t v64 = v146;
    unint64_t v65 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
    uint64_t v143 = v61;
    uint64_t v66 = v61 + v65;
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v67 = *(void *)(v64 + 72);
    v178 = *(char **)(v64 + 16);
    uint64_t v162 = v67;
    ((void (*)(char *, uint64_t, uint64_t))v178)(v32, v66, v37);
    while (2)
    {
      Hand.action.getter();
      int v68 = (*v175)(v48, v63);
      if (v68 != v174)
      {
        (*v170)(v48, v63);
        goto LABEL_44;
      }
      Hand.chirality.getter();
      int v69 = (*v169)(v47, v46);
      if (v69 == v168)
      {
        Swift::UInt v70 = 1;
        goto LABEL_51;
      }
      if (v69 != v166)
      {
        if (qword_1001F2CF0 != -1) {
          swift_once();
        }
        uint64_t v80 = type metadata accessor for Logger();
        sub_1000E881C(v80, (uint64_t)qword_1001F3970);
        uint64_t v81 = v161;
        ((void (*)(char *, char *, uint64_t))v178)(v161, v167, v37);
        uint64_t v82 = Logger.logObject.getter();
        os_log_type_t v83 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v82, v83))
        {
          uint64_t v84 = swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v84 = v147;
          v85 = v149;
          Hand.action.getter();
          uint64_t v86 = Hand.Action.description.getter();
          unint64_t v88 = v87;
          uint64_t v89 = v85;
          double v48 = v148;
          (*v170)(v89, v171);
          *(void *)(v84 + 4) = sub_1000EDB70(v86, v88, aBlock);
          uint64_t v67 = v162;
          swift_bridgeObjectRelease();
          (*v176)(v81, v172);
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "HandGestures: Received unknown action: %s", (uint8_t *)v84, 0xCu);
          swift_arrayDestroy();
          uint64_t v46 = v159;
          swift_slowDealloc();
          uint64_t v37 = v172;
          swift_slowDealloc();
        }
        else
        {
          (*v176)(v81, v37);
        }

        double v47 = v164;
        (*v160)(v164, v46);
        uint64_t v63 = v171;
        double v32 = v167;
        goto LABEL_44;
      }
      Swift::UInt v70 = 2;
LABEL_51:
      id v71 = objc_msgSend(v173, "actions", v131);
      if (v71)
      {
        uint64_t v72 = v71;
        uint64_t v73 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        Swift::UInt v181 = v70;
        type metadata accessor for AXCameraHandGesturesEventUsage(0);
        sub_100107F38((unint64_t *)&unk_1001F0270, type metadata accessor for AXCameraHandGesturesEventUsage);
        AnyHashable.init<A>(_:)();
        if (*(void *)(v73 + 16))
        {
          unint64_t v74 = sub_1000F78D0((uint64_t)aBlock);
          uint64_t v37 = v172;
          if (v75)
          {
            sub_1000F01E0(*(void *)(v73 + 56) + 32 * v74, (uint64_t)&v182);
          }
          else
          {
            long long v182 = 0u;
            long long v183 = 0u;
          }
        }
        else
        {
          long long v182 = 0u;
          long long v183 = 0u;
          uint64_t v37 = v172;
        }
        swift_bridgeObjectRelease();
        sub_1000F9F50((uint64_t)aBlock);
        if (*((void *)&v183 + 1))
        {
          sub_1000EED9C((uint64_t *)&unk_1001F0090);
          if (swift_dynamicCast())
          {
            Swift::UInt v90 = v181;
            id v91 = [v173 queue];
            if (v91)
            {
              id v156 = v91;
              uint64_t v92 = *(void *)v151;
              if (*(void *)(*(void *)v151 + 16) && (unint64_t v93 = sub_1000F7864(v70), (v94 & 1) != 0))
              {
                unint64_t v95 = v93;
                uint64_t v96 = *(void *)(v92 + 56);
                uint64_t v97 = type metadata accessor for UUID();
                uint64_t v98 = *(void *)(v97 - 8);
                uint64_t v99 = v98;
                uint64_t v100 = v96 + *(void *)(v98 + 72) * v95;
                uint64_t v101 = v163;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 16))(v163, v100, v97);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v99 + 56))(v101, 0, 1, v97);
              }
              else
              {
                uint64_t v102 = type metadata accessor for UUID();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56))(v163, 1, 1, v102);
              }
              uint64_t v103 = *(void *)v150;
              if (*(void *)(*(void *)v150 + 16) && (unint64_t v104 = sub_1000F7864(v70), (v105 & 1) != 0))
              {
                uint64_t v106 = (uint64_t *)(*(void *)(v103 + 56) + 16 * v104);
                uint64_t v107 = v106[1];
                uint64_t v154 = *v106;
                uint64_t v153 = v107;
                swift_bridgeObjectRetain();
                if (!*(void *)(v90 + 16)) {
                  goto LABEL_81;
                }
LABEL_83:
                uint64_t v109 = v134;
                unint64_t v110 = sub_1000F7914((uint64_t)v109);
                if (v111)
                {
                  uint64_t v108 = *(void **)(*(void *)(v90 + 56) + 8 * v110);
                  id v112 = v108;
                }
                else
                {
                  uint64_t v108 = 0;
                }

                if (*(void *)(v90 + 16))
                {
                  v113 = v132;
                  unint64_t v114 = sub_1000F7914((uint64_t)v113);
                  if (v115)
                  {
                    v116 = *(void **)(*(void *)(v90 + 56) + 8 * v114);
                    id v117 = v116;
                  }
                  else
                  {
                    v116 = 0;
                  }
                  v152 = v116;

LABEL_93:
                  swift_bridgeObjectRelease();
                  uint64_t v118 = v137;
                  sub_1000FC054(v163, v137, (uint64_t *)&unk_1001EFD50);
                  unint64_t v119 = (*(unsigned __int8 *)(v138 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
                  unint64_t v120 = (unint64_t)&v136[v119] & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v121 = swift_allocObject();
                  id v122 = v173;
                  *(void *)(v121 + 16) = v173;
                  *(void *)(v121 + 24) = v108;
                  id v155 = v108;
                  v123 = v152;
                  *(void *)(v121 + 32) = v152;
                  *(unsigned char *)(v121 + 40) = 0;
                  sub_100108FA4(v118, v121 + v119);
                  v124 = (void *)(v121 + v120);
                  uint64_t v125 = v153;
                  void *v124 = v154;
                  v124[1] = v125;
                  v180[2] = sub_10010900C;
                  v180[3] = v121;
                  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
                  aBlock[1] = 1107296256;
                  v180[0] = sub_1000E98D0;
                  v180[1] = &unk_1001AFBE0;
                  v126 = _Block_copy(aBlock);
                  id v127 = v123;
                  id v128 = v122;
                  id v129 = v155;
                  swift_release();
                  id v130 = v156;
                  [v156 performAsynchronousWritingBlock:v126];
                  _Block_release(v126);

                  sub_1000FBEA8(v163, (uint64_t *)&unk_1001EFD50);
                  uint64_t v46 = v159;
                  double v47 = v164;
                  uint64_t v63 = v171;
                  uint64_t v37 = v172;
                  uint64_t v67 = v162;
LABEL_44:
                  (*v176)(v32, v37);
                  v66 += v67;
                  if (!--v62)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v44 = v145;
                    double v45 = v173;
                    goto LABEL_35;
                  }
                  ((void (*)(char *, uint64_t, uint64_t))v178)(v32, v66, v37);
                  continue;
                }
              }
              else
              {
                uint64_t v154 = 0;
                uint64_t v153 = 0;
                if (*(void *)(v90 + 16)) {
                  goto LABEL_83;
                }
LABEL_81:
                uint64_t v108 = 0;
              }
              v152 = 0;
              goto LABEL_93;
            }
            swift_bridgeObjectRelease();
LABEL_60:
            uint64_t v63 = v171;
            uint64_t v37 = v172;
            goto LABEL_44;
          }
        }
        else
        {
          sub_1000FBEA8((uint64_t)&v182, &qword_1001EFD18);
        }
        uint64_t v63 = v171;
        goto LABEL_44;
      }
      break;
    }
    if (qword_1001F2CF0 != -1) {
      swift_once();
    }
    uint64_t v76 = type metadata accessor for Logger();
    sub_1000E881C(v76, (uint64_t)qword_1001F3970);
    id v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      CGRect v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)CGRect v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "HandGestures: could not lookup action identifier because actions are nil", v79, 2u);
      swift_slowDealloc();
    }

    goto LABEL_60;
  }

  return swift_bridgeObjectRelease();
}

uint64_t HandTracker.hasHandGestureSwitchesAssigned.getter()
{
  unint64_t v1 = (unint64_t)[v0 actions];
  if (v1)
  {
    uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v9 = 1;
    type metadata accessor for AXCameraHandGesturesEventUsage(0);
    sub_100107F38((unint64_t *)&unk_1001F0270, type metadata accessor for AXCameraHandGesturesEventUsage);
    AnyHashable.init<A>(_:)();
    if (*(void *)(v2 + 16) && (unint64_t v3 = sub_1000F78D0((uint64_t)v11), (v4 & 1) != 0))
    {
      sub_1000F01E0(*(void *)(v2 + 56) + 32 * v3, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
    sub_1000F9F50((uint64_t)v11);
    uint64_t v5 = *((void *)&v10 + 1);
    sub_1000FBEA8((uint64_t)&v9, &qword_1001EFD18);
    if (v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      *(void *)&long long v9 = 2;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v2 + 16) && (unint64_t v6 = sub_1000F78D0((uint64_t)v11), (v7 & 1) != 0))
      {
        sub_1000F01E0(*(void *)(v2 + 56) + 32 * v6, (uint64_t)&v9);
      }
      else
      {
        long long v9 = 0u;
        long long v10 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_1000F9F50((uint64_t)v11);
      unint64_t v1 = *((void *)&v10 + 1) != 0;
      sub_1000FBEA8((uint64_t)&v9, &qword_1001EFD18);
    }
  }
  return v1;
}

id HandTracker.init()()
{
  uint64_t v1 = OBJC_IVAR___SCATHandTracker_persistentSwitchIdentifiers;
  *(void *)&v0[v1] = sub_100107920((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v2 = OBJC_IVAR___SCATHandTracker_switchDisplayNames;
  *(void *)&v0[v2] = sub_100107AE8(&_swiftEmptyArrayStorage);
  *(void *)&v0[OBJC_IVAR___SCATHandTracker_handsSession] = 0;
  *(void *)&v0[OBJC_IVAR___SCATHandTracker_minimumNotDetectedCount] = 10;
  *(void *)&v0[OBJC_IVAR___SCATHandTracker_minimumHandID] = 0;
  uint64_t v3 = qword_1001F2CF0;
  char v4 = v0;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_1000E881C(v5, (uint64_t)qword_1001F3970);
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "HandGestures: Initializing Hand Tracker Session.", v8, 2u);
    swift_slowDealloc();
  }

  *(void *)&v4[OBJC_IVAR___SCATHandTracker_currentHands] = sub_100107C0C((uint64_t)&_swiftEmptyArrayStorage);
  v4[OBJC_IVAR___SCATHandTracker_availability] = 0;
  *(void *)&v4[OBJC_IVAR___SCATHandTracker_availabilityDetail] = 0;
  *(void *)&v4[OBJC_IVAR___SCATHandTracker_notDetectedCount] = 0;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for HandTracker();
  return objc_msgSendSuper2(&v10, "init");
}

id HandTracker.__deallocating_deinit()
{
  uint64_t v1 = v0;
  if (qword_1001F2CF0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3970);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "HandGestures: Deinitializing Hand Tracker Session.", v5, 2u);
    swift_slowDealloc();
  }

  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for HandTracker();
  return objc_msgSendSuper2(&v7, "dealloc");
}

Swift::Void __swiftcall HandTracker.startRunning()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for HandsSessionSettings();
  __chkstk_darwin(v2 - 8);
  if (qword_1001F2CF0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000E881C(v3, (uint64_t)qword_1001F3970);
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "HandGestures: Will start Hand Gestures Session.", v6, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for HandsSession();
  HandsSessionSettings.init()();
  *(void *)&v1[OBJC_IVAR___SCATHandTracker_handsSession] = HandsSession.__allocating_init(settings:)();
  swift_release();
  objc_super v7 = sub_1000E9034();
  uint64_t v8 = (void *)*v7;
  long long v9 = *(void (**)(char *, objc_class *, _UNKNOWN **))((swift_isaMask & *(void *)*v7) + 0x150);
  objc_super v10 = (objc_class *)type metadata accessor for HandTracker();
  double v11 = v8;
  v9(v1, v10, &protocol witness table for HandTracker);

  v12.receiver = v1;
  v12.super_class = v10;
  objc_msgSendSuper2(&v12, "startRunning");
}

Swift::Void __swiftcall HandTracker.stopRunning()()
{
  uint64_t v1 = v0;
  if (qword_1001F2CF0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3970);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "HandGestures: Will stop Hand Gestures Session.", v5, 2u);
    swift_slowDealloc();
  }

  *(void *)&v1[OBJC_IVAR___SCATHandTracker_handsSession] = 0;
  swift_release();
  unint64_t v6 = sub_1000E9034();
  objc_super v7 = (void *)*v6;
  uint64_t v8 = *(void (**)(char *, objc_class *, _UNKNOWN **))((swift_isaMask & *(void *)*v6) + 0x158);
  long long v9 = (objc_class *)type metadata accessor for HandTracker();
  objc_super v10 = v7;
  v8(v1, v9, &protocol witness table for HandTracker);

  v11.receiver = v1;
  v11.super_class = v9;
  objc_msgSendSuper2(&v11, "stopRunning");
}

Swift::Bool __swiftcall HandTracker.checkIsRunning()()
{
  uint64_t v1 = sub_1000E9034();
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, _UNKNOWN **))((swift_isaMask & *(void *)*v1) + 0x168);
  uint64_t v4 = type metadata accessor for HandTracker();
  os_log_type_t v5 = v2;
  LOBYTE(v4) = v3(v0, v4, &protocol witness table for HandTracker);

  return v4 & 1;
}

void HandTracker.update(withSwitches:recipe:)(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_1000EED9C((uint64_t *)&unk_1001EFD50);
  __chkstk_darwin(v5 - 8);
  objc_super v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    if (qword_1001F2CF0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_1000E881C(v13, (uint64_t)qword_1001F3970);
    os_log_t v103 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v103, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v14, "update switches called with nil list of switches.", v15, 2u);
      swift_slowDealloc();
    }
    os_log_t v16 = v103;

    return;
  }
  unint64_t v95 = v7;
  unint64_t v8 = sub_100107DF8(&_swiftEmptyArrayStorage);
  uint64_t v96 = a2;
  unint64_t v100 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_100107EF8();
    sub_100107F38((unint64_t *)&qword_1001EFD60, (void (*)(uint64_t))sub_100107EF8);
    Set.Iterator.init(_cocoa:)();
    a1 = v106;
    uint64_t v9 = v107;
    uint64_t v10 = v108;
    uint64_t v11 = v109;
    unint64_t v12 = v110;
  }
  else
  {
    uint64_t v17 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v9 = a1 + 56;
    uint64_t v10 = ~v17;
    uint64_t v18 = -v17;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    unint64_t v12 = v19 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
  }
  uint64_t v98 = v10;
  uint64_t v99 = v2;
  uint64_t v102 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  os_log_t v103 = (os_log_t)((unint64_t)(v10 + 64) >> 6);
  char v94 = @"SwitchActionTypeNormal";
  unint64_t v93 = @"SwitchActionTypeLongPress";
  uint64_t v101 = (char *)&type metadata for Swift.AnyObject + 8;
  while (1)
  {
    uint64_t v20 = v11;
    if ((a1 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v23 = __CocoaSet.Iterator.next()();
    if (!v23) {
      goto LABEL_70;
    }
    uint64_t v104 = v23;
    sub_100107EF8();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v24 = v105;
    swift_unknownObjectRelease();
    if (!v24) {
      goto LABEL_70;
    }
LABEL_39:
    id v28 = [v24 source];
    if (!v28)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      goto LABEL_17;
    }
    int64_t v29 = v28;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v31;

    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v32)
    {
      if (v30 == v33 && v32 == v34)
      {
        swift_bridgeObjectRelease_n();
LABEL_46:
        id v97 = [v24 accessibilityEventUsage];
        unint64_t v36 = sub_1000F374C((uint64_t)&_swiftEmptyArrayStorage);
        uint64_t v37 = v96;
        uint64_t v92 = v9;
        if (v96)
        {
          unint64_t v38 = v36;
          id v39 = objc_allocWithZone((Class)SCATActionItem);
          id v40 = v37;
          unint64_t v91 = (unint64_t)v40;
          id v41 = [v39 init];
          id v42 = [objc_allocWithZone((Class)SCATActionItem) init];
          SCATGetActionIdentifiersForRecipeAndSwitch(v40, v24, v41, v42);
          long long v43 = v94;
          id v44 = v41;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          char v105 = (void *)v38;
          sub_1000F92B8((uint64_t)v44, v43, isUniquelyReferenced_nonNull_native);
          uint64_t v46 = v105;

          swift_bridgeObjectRelease();
          double v47 = v93;
          id v48 = v42;
          char v49 = swift_isUniquelyReferenced_nonNull_native();
          char v105 = v46;
          sub_1000F92B8((uint64_t)v48, v47, v49);
          uint64_t v50 = (uint64_t)v105;

          swift_bridgeObjectRelease();
          goto LABEL_62;
        }
        unint64_t v51 = self;
        char v52 = v94;
        unint64_t v91 = (unint64_t)v51;
        id v53 = [v51 fromSwitch:v24 longPress:0];
        if (v53)
        {
          uint64_t v54 = (uint64_t)v53;
          char v55 = swift_isUniquelyReferenced_nonNull_native();
          char v105 = (void *)v36;
          sub_1000F92B8(v54, v52, v55);
          unint64_t v36 = (unint64_t)v105;

          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          unint64_t v56 = sub_1000F7914((uint64_t)v52);
          char v58 = v57;
          swift_bridgeObjectRelease();
          if (v58)
          {
            char v59 = swift_isUniquelyReferenced_nonNull_native();
            char v105 = (void *)v36;
            if ((v59 & 1) == 0)
            {
              sub_1000F9AAC();
              unint64_t v36 = (unint64_t)v105;
            }

            uint64_t v60 = *(void **)(*(void *)(v36 + 56) + 8 * v56);
            sub_1000F8CE0(v56, v36);

            swift_bridgeObjectRelease();
          }
          else
          {
          }
        }
        uint64_t v61 = v93;
        id v62 = [(id)v91 fromSwitch:v24 longPress:1];
        if (v62)
        {
          uint64_t v63 = (uint64_t)v62;
          char v64 = swift_isUniquelyReferenced_nonNull_native();
          char v105 = (void *)v36;
          sub_1000F92B8(v63, v61, v64);
          uint64_t v50 = (uint64_t)v105;
LABEL_61:

          swift_bridgeObjectRelease();
          goto LABEL_62;
        }
        swift_bridgeObjectRetain();
        unint64_t v91 = sub_1000F7914((uint64_t)v61);
        char v66 = v65;
        swift_bridgeObjectRelease();
        if (v66)
        {
          char v67 = swift_isUniquelyReferenced_nonNull_native();
          char v105 = (void *)v36;
          if ((v67 & 1) == 0)
          {
            sub_1000F9AAC();
            unint64_t v36 = (unint64_t)v105;
          }
          uint64_t v50 = v36;
          unint64_t v68 = v91;

          int v69 = *(void **)(*(void *)(v36 + 56) + 8 * v68);
          sub_1000F8CE0(v68, v50);

          goto LABEL_61;
        }

        uint64_t v50 = v36;
LABEL_62:
        Swift::UInt v70 = (void *)v100;
        char v71 = swift_isUniquelyReferenced_nonNull_native();
        char v105 = v70;
        sub_1001058D4(v50, (Swift::UInt)v97, v71);
        unint64_t v100 = (unint64_t)v105;
        swift_bridgeObjectRelease();
        id v72 = [v24 uuid];
        uint64_t v73 = (uint64_t)v95;
        if (v72)
        {
          unint64_t v74 = v72;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v75 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v73, 0, 1, v75);
        }
        else
        {
          uint64_t v76 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v73, 1, 1, v76);
        }
        uint64_t v9 = v92;
        swift_beginAccess();
        sub_1000FFF50(v73, (Swift::UInt)v97);
        swift_endAccess();
        id v77 = [v24 name];
        if (v77)
        {
          os_log_type_t v78 = v77;
          uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v81 = v80;
        }
        else
        {
          uint64_t v79 = 0;
          uint64_t v81 = 0;
        }
        swift_beginAccess();
        sub_1001001AC(v79, v81, (Swift::UInt)v97);
        swift_endAccess();
      }
      else
      {
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v35) {
          goto LABEL_46;
        }
      }
    }
    else
    {
LABEL_17:

      swift_bridgeObjectRelease();
    }
  }
  if (v12)
  {
    unint64_t v21 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v22 = v21 | (v11 << 6);
    goto LABEL_38;
  }
  uint64_t v25 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_75;
  }
  if (v25 >= (uint64_t)v103) {
    goto LABEL_70;
  }
  unint64_t v26 = *(void *)(v9 + 8 * v25);
  ++v11;
  if (v26) {
    goto LABEL_37;
  }
  uint64_t v11 = v20 + 2;
  if (v20 + 2 >= (uint64_t)v103) {
    goto LABEL_70;
  }
  unint64_t v26 = *(void *)(v9 + 8 * v11);
  if (v26) {
    goto LABEL_37;
  }
  uint64_t v11 = v20 + 3;
  if (v20 + 3 >= (uint64_t)v103) {
    goto LABEL_70;
  }
  unint64_t v26 = *(void *)(v9 + 8 * v11);
  if (v26) {
    goto LABEL_37;
  }
  uint64_t v11 = v20 + 4;
  if (v20 + 4 >= (uint64_t)v103) {
    goto LABEL_70;
  }
  unint64_t v26 = *(void *)(v9 + 8 * v11);
  if (v26)
  {
LABEL_37:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v22 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_38:
    id v24 = *(id *)(*(void *)(a1 + 48) + 8 * v22);
    if (!v24) {
      goto LABEL_70;
    }
    goto LABEL_39;
  }
  os_log_t v27 = (os_log_t)(v20 + 5);
  while (v103 != v27)
  {
    unint64_t v26 = *(void *)(v9 + 8 * (void)v27);
    os_log_t v27 = (os_log_t)((char *)v27 + 1);
    if (v26)
    {
      uint64_t v11 = (uint64_t)&v27[-1].isa + 7;
      goto LABEL_37;
    }
  }
LABEL_70:
  sub_1000FBFF0();
  if (qword_1001F2CF0 == -1) {
    goto LABEL_71;
  }
LABEL_75:
  swift_once();
LABEL_71:
  uint64_t v82 = type metadata accessor for Logger();
  sub_1000E881C(v82, (uint64_t)qword_1001F3970);
  os_log_type_t v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.debug.getter();
  BOOL v85 = os_log_type_enabled(v83, v84);
  uint64_t v86 = v99;
  uint64_t v87 = v100;
  if (v85)
  {
    unint64_t v88 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v88 = 0;
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "HandGestures: Updated Actions", v88, 2u);
    swift_slowDealloc();
  }

  sub_100100500(v87);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v86 setActions:isa];
}

uint64_t sub_1000FFF50(uint64_t a1, Swift::UInt a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000EED9C((uint64_t *)&unk_1001EFD50);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_1000FBEA8(a1, (uint64_t *)&unk_1001EFD50);
    unint64_t v13 = sub_1000F7864(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1001051F8();
        uint64_t v17 = v21;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, v9);
      sub_1000F8AEC(v15, v17);
      *uint64_t v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return sub_1000FBEA8((uint64_t)v8, (uint64_t *)&unk_1001EFD50);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10010576C((uint64_t)v12, a2, v18);
    *uint64_t v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_1001001AC(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10010562C(a1, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
  }
  else
  {
    unint64_t result = sub_1000F7864(a3);
    if ((v10 & 1) == 0) {
      return result;
    }
    unint64_t v11 = result;
    int v12 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v3;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!v12)
    {
      sub_100105048();
      uint64_t v13 = v15;
    }
    sub_1000F8930(v11, v13);
    *uint64_t v4 = v13;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001002A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000EED9C(&qword_1001F0348);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Hand();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_1000FBEA8(a1, &qword_1001F0348);
    unint64_t v13 = sub_100103E80(a2);
    if (v14)
    {
      unint64_t v15 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = *v3;
      uint64_t v21 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100104DB8();
        uint64_t v17 = v21;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, v9);
      sub_100104BE8(v15, v17);
      *uint64_t v3 = v17;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    }
    return sub_1000FBEA8((uint64_t)v8, &qword_1001F0348);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100105A10((uint64_t)v12, a2, v18);
    *uint64_t v3 = v21;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100100500(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000EED9C(&qword_1001F00D0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v25 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v24) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v24) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v24) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v24) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v25 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    *(void *)&v34[0] = *(void *)(*(void *)(a1 + 48) + 8 * v12);
    type metadata accessor for AXCameraHandGesturesEventUsage(0);
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000EED9C((uint64_t *)&unk_1001F0090);
    swift_dynamicCast();
    long long v30 = v26;
    long long v31 = v27;
    uint64_t v32 = v28;
    sub_1000EFC04(&v29, v33);
    long long v26 = v30;
    long long v27 = v31;
    uint64_t v28 = v32;
    sub_1000EFC04(v33, v34);
    sub_1000EFC04(v34, &v30);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)&v6[8 * (v18 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v18) & ~*(void *)&v6[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v20 = 0;
      unint64_t v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v22 = v19 == v21;
        if (v19 == v21) {
          unint64_t v19 = 0;
        }
        v20 |= v22;
        uint64_t v23 = *(void *)&v6[8 * v19];
      }
      while (v23 == -1);
      unint64_t v9 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v26;
    *(_OWORD *)(v10 + 16) = v27;
    *(void *)(v10 + 32) = v28;
    uint64_t result = (uint64_t)sub_1000EFC04(&v30, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v24)
  {
LABEL_37:
    swift_release();
    sub_1000FBFF0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v25 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v24) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100100980(uint64_t a1)
{
  id v3 = [v1 actions];
  if (!v3)
  {
    if (qword_1001F2CF0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_1000E881C(v9, (uint64_t)qword_1001F3970);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "HandGestures: could not lookup action identifier because actions are nil", v12, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for AXCameraHandGesturesEventUsage(0);
  sub_100107F38((unint64_t *)&unk_1001F0270, type metadata accessor for AXCameraHandGesturesEventUsage);
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_1000F78D0((uint64_t)v13), (v7 & 1) != 0))
  {
    sub_1000F01E0(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v14);
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000F9F50((uint64_t)v13);
  if (!*((void *)&v15 + 1))
  {
    sub_1000FBEA8((uint64_t)&v14, &qword_1001EFD18);
    return 0;
  }
  sub_1000EED9C((uint64_t *)&unk_1001F0090);
  if (swift_dynamicCast()) {
    return a1;
  }
  else {
    return 0;
  }
}

Swift::Void __swiftcall HandTracker._didReceiveAction(withIdentifier:start:ignoreInputHold:)(SCATActionItem withIdentifier, Swift::Bool start, Swift::Bool ignoreInputHold)
{
  uint64_t v4 = v3;
  char shortcutIdentifier = (char)withIdentifier.shortcutIdentifier;
  char action = withIdentifier.action;
  Class isa = withIdentifier.super.isa;
  if (objc_msgSend(v4, "delegate", withIdentifier.shortcutIdentifier, start, ignoreInputHold))
  {
    uint64_t aBlock[6] = &OBJC_PROTOCOL____TtP15assistivetouchd34SCATHandTrackerInputSourceDelegate__0;
    uint64_t v8 = swift_dynamicCastObjCProtocolConditional();
    if (v8)
    {
      uint64_t v9 = (void *)v8;
      id v10 = [v4 queue];
      if (v10)
      {
        os_log_type_t v11 = v10;
        if ([v9 respondsToSelector:"handTrackerInputSource:didReceiveActionWithIdentifier:start:ignoreInputHold:"])
        {
          uint64_t v12 = swift_allocObject();
          *(void *)(v12 + 16) = v9;
          *(void *)(v12 + 24) = v4;
          *(void *)(v12 + 32) = isa;
          *(unsigned char *)(v12 + 40) = action & 1;
          *(unsigned char *)(v12 + 41) = shortcutIdentifier & 1;
          aBlock[4] = sub_100107FC8;
          aBlock[5] = v12;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          uint64_t aBlock[2] = sub_1000E98D0;
          aBlock[3] = &unk_1001AFA48;
          int64_t v13 = _Block_copy(aBlock);
          swift_unknownObjectRetain();
          id v14 = v4;
          long long v15 = isa;
          swift_release();
          [v11 performAsynchronousWritingBlock:v13];
          swift_unknownObjectRelease();

          _Block_release(v13);
          return;
        }
        if (qword_1001F2CF0 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_1000E881C(v16, (uint64_t)qword_1001F3970);
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v18))
        {
          unint64_t v19 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "HandGestures: Failed to send action.", v19, 2u);
          swift_slowDealloc();
          swift_unknownObjectRelease();

          return;
        }
      }
    }
    swift_unknownObjectRelease();
  }
}

void sub_100100E84(char a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([v3 delegate])
  {
    uint64_t aBlock[6] = (uint64_t)&OBJC_PROTOCOL____TtP15assistivetouchd34SCATHandTrackerInputSourceDelegate__0;
    uint64_t v10 = swift_dynamicCastObjCProtocolConditional();
    if (!v10 || (os_log_type_t v11 = (void *)v10, (v12 = [v3 queue]) == 0))
    {
      swift_unknownObjectRelease();
      return;
    }
    int64_t v13 = v12;
    char v14 = a1 & 1;
    if (v3[OBJC_IVAR___SCATHandTracker_availability] != (a1 & 1)
      || *(void *)&v3[OBJC_IVAR___SCATHandTracker_availabilityDetail] != a2)
    {
      v3[OBJC_IVAR___SCATHandTracker_availability] = v14;
      uint64_t v35 = a2;
      *(void *)&v3[OBJC_IVAR___SCATHandTracker_availabilityDetail] = a2;
      if (qword_1001F2CF0 != -1) {
        swift_once();
      }
      uint64_t v15 = sub_1000E881C(v6, (uint64_t)qword_1001F3970);
      uint64_t v16 = *(void (**)(char *))(v7 + 16);
      uint64_t v34 = v15;
      v16(v9);
      uint64_t v17 = Logger.logObject.getter();
      int v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, (os_log_type_t)v33))
      {
        os_log_t v30 = v17;
        uint64_t v32 = v13;
        uint64_t v18 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 67109378;
        LODWORD(v36) = a1 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 8) = 2080;
        int v31 = a1 & 1;
        if (v35)
        {
          if (v35 != 1)
          {
            uint64_t v36 = v35;
            _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
            __break(1u);
            return;
          }
          unint64_t v19 = 0xE800000000000000;
          uint64_t v20 = 0x73646E6168206F6ELL;
        }
        else
        {
          unint64_t v19 = 0xE400000000000000;
          uint64_t v20 = 1701736302;
        }
        uint64_t v36 = sub_1000EDB70(v20, v19, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v21 = v30;
        _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v33, "Did Update Availability: isAvailable: %{BOOL}d - detail: %s", (uint8_t *)v18, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        int64_t v13 = v32;
        char v14 = v31;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      unsigned int v22 = [v11 respondsToSelector:"handTrackerInputSource:didUpdateAvailability:withDetail:"];
      uint64_t v23 = v35;
      if (v22)
      {
        uint64_t v24 = swift_allocObject();
        *(void *)(v24 + 16) = v11;
        *(void *)(v24 + 24) = v3;
        *(unsigned char *)(v24 + 32) = v14;
        *(void *)(v24 + 40) = v23;
        aBlock[4] = (uint64_t)sub_10010930C;
        aBlock[5] = v24;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        uint64_t aBlock[2] = (uint64_t)sub_1000E98D0;
        aBlock[3] = (uint64_t)&unk_1001AFC30;
        uint64_t v25 = _Block_copy(aBlock);
        swift_unknownObjectRetain();
        long long v26 = v3;
        swift_release();
        [v13 performAsynchronousWritingBlock:v25];
        swift_unknownObjectRelease();

        _Block_release(v25);
        return;
      }
      long long v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        long long v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "HandGestures: Failed to update availability.", v29, 2u);
        swift_slowDealloc();
        swift_unknownObjectRelease();

LABEL_22:
        return;
      }
    }
    swift_unknownObjectRelease();
    goto LABEL_22;
  }
}

void sub_100101388(opaqueCMSampleBuffer *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v4 = type metadata accessor for HandsInput();
  uint64_t v43 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for CameraMetadata();
  uint64_t v42 = *(void *)(v44 - 8);
  uint64_t v7 = __chkstk_darwin(v44);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)&v32 - v10;
  uint64_t v12 = type metadata accessor for CameraCalibration();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v19 = (char *)&v32 - v18;
  if (*(void *)(v2 + OBJC_IVAR___SCATHandTracker_handsSession))
  {
    uint64_t v38 = v17;
    uint64_t v39 = v16;
    uint64_t v37 = v4;
    swift_retain();
    uint64_t v20 = CMSampleBufferRef.imageBuffer.getter();
    if (v20)
    {
      os_log_t v21 = (__CVBuffer *)v20;
      CMSampleBufferGetPresentationTimeStamp(&v45, a1);
      CMTimeValue value = v45.value;
      CMTimeEpoch epoch = v45.epoch;
      uint64_t v36 = *(void *)&v45.timescale;
      CFTypeRef v23 = (id)CMGetAttachment(a1, kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix, 0);
      if (v23 && (CFTypeRef v46 = v23, (swift_dynamicCast() & 1) != 0))
      {
        CMTimeValue v34 = value;
        CMTimeValue v25 = v45.value;
        unint64_t v24 = *(void *)&v45.timescale;
        type metadata accessor for simd_float3x3(0);
        CMTimeValue v33 = v25;
        unint64_t v32 = v24;
        uint64_t v26 = v40;
        Data.withUnsafeBytes<A, B>(_:)();
        uint64_t v40 = v26;
        CVImageBufferGetEncodedSize(v21);
        static CameraCalibration.rectilinear(imageSize:intrinsics:)();
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v15, v19, v39);
        CameraMetadata.init(timestamp:calibration:)();
        uint64_t v27 = v42;
        (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v9, v11, v44);
        os_log_type_t v28 = v21;
        HandsInput.init(image:metadata:)();
        dispatch thunk of HandsSession.runSync(input:)();
        sub_100109274(v33, v32);

        swift_release();
        (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v37);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v44);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v39);
      }
      else
      {
        sub_100109010();
        swift_allocError();
        *os_log_t v30 = 2;
        swift_willThrow();
        swift_release();
      }
    }
    else
    {
      sub_100109010();
      swift_allocError();
      unsigned char *v31 = 1;
      swift_willThrow();
      swift_release();
    }
  }
  else
  {
    sub_100109010();
    swift_allocError();
    unsigned char *v29 = 0;
    swift_willThrow();
  }
}

__n128 sub_10010181C@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  return result;
}

uint64_t sub_100101830()
{
  uint64_t v2 = type metadata accessor for Hand();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR___SCATHandTracker_minimumHandID;
  uint64_t v20 = v0;
  unint64_t v7 = *(void *)(v0 + OBJC_IVAR___SCATHandTracker_minimumHandID);
  uint64_t v8 = HandsOutput.hands.getter();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    v17[0] = v6;
    v17[1] = v8;
    uint64_t v10 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    unint64_t v12 = v8 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v13 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v18 = *(void *)(v11 + 56);
    unint64_t v19 = v10;
    v10(v5, v12, v2);
    while (1)
    {
      sub_100101A3C((uint64_t)v5);
      if (v1) {
        break;
      }
      if (v7 < Hand.id.getter()) {
        unint64_t v7 = Hand.id.getter();
      }
      (*v13)(v5, v2);
      v12 += v18;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v16 = *(void *)(v20 + v17[0]);
        *(void *)(v20 + v17[0]) = v7;
        return sub_1000FD7CC(v16);
      }
      v19(v5, v12, v2);
    }
    (*v13)(v5, v2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100109010();
    swift_allocError();
    unsigned char *v14 = 3;
    return swift_willThrow();
  }
}

Swift::UInt sub_100101A3C(uint64_t a1)
{
  uint64_t v119 = a1;
  uint64_t v1 = sub_1000EED9C(&qword_1001F0348);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  os_log_t v103 = (char *)v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v110 = (char *)v96 - v5;
  __chkstk_darwin(v4);
  uint64_t v108 = (char *)v96 - v6;
  uint64_t v7 = type metadata accessor for Hand.Action();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  v116 = (char *)v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v96 - v11;
  uint64_t v13 = type metadata accessor for Hand.Chirality();
  uint64_t v106 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  char v105 = (char *)v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for Hand();
  uint64_t v15 = *(void *)(v115 - 8);
  uint64_t v16 = __chkstk_darwin(v115);
  uint64_t v107 = (char *)v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)v96 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v109 = (char *)v96 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  id v112 = (char *)v96 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)v96 - v25;
  id v27 = [self sharedInstance];
  unsigned int v28 = [v27 switchControlDebugLoggingEnabled];

  v113 = v12;
  uint64_t v114 = v7;
  if (v28)
  {
    uint64_t v101 = v13;
    long long v29 = v20;
    uint64_t v118 = v8;
    if (qword_1001F2CF0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_1000E881C(v30, (uint64_t)qword_1001F3970);
    int v31 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v32 = v15;
    uint64_t v33 = v119;
    uint64_t v34 = v115;
    v31(v26, v119, v115);
    v31(v112, v33, v34);
    uint64_t v35 = v109;
    v31(v109, v33, v34);
    uint64_t v102 = v29;
    v31(v29, v33, v34);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    int v38 = v37;
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v100 = swift_slowAlloc();
      uint64_t v122 = v100;
      *(_DWORD *)uint64_t v39 = 134218754;
      int v99 = v38;
      uint64_t v40 = Hand.id.getter();
      uint64_t v104 = v32;
      id v97 = *(void (**)(char *, uint64_t))(v32 + 8);
      v97(v26, v34);
      double v120 = *(double *)&v40;
      v96[1] = &v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 12) = 2080;
      v96[2] = v39 + 14;
      uint64_t v41 = v105;
      uint64_t v42 = v112;
      Hand.chirality.getter();
      sub_100107F38(&qword_1001F0350, (void (*)(uint64_t))&type metadata accessor for Hand.Chirality);
      os_log_t v98 = v36;
      uint64_t v43 = v101;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v46 = v45;
      (*(void (**)(char *, uint64_t))(v106 + 8))(v41, v43);
      double v120 = COERCE_DOUBLE(sub_1000EDB70(v44, v46, &v122));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      double v47 = v97;
      v97(v42, v34);
      *(_WORD *)(v39 + 22) = 2080;
      id v112 = (char *)(v39 + 24);
      unint64_t v12 = v113;
      id v48 = v109;
      Hand.action.getter();
      uint64_t v49 = Hand.Action.description.getter();
      unint64_t v51 = v50;
      (*(void (**)(char *, uint64_t))(v118 + 8))(v12, v114);
      double v120 = COERCE_DOUBLE(sub_1000EDB70(v49, v51, &v122));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v47(v48, v34);
      *(_WORD *)(v39 + 32) = 2048;
      char v52 = v102;
      Hand.confidence.getter();
      double v120 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v47(v52, v34);
      uint64_t v8 = v118;
      os_log_t v54 = v98;
      _os_log_impl((void *)&_mh_execute_header, v98, (os_log_type_t)v99, "Hand: id: %llu \n chirality: %s \n action: %s \n confidence: %f", (uint8_t *)v39, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v15 = v104;
      uint64_t v7 = v114;
    }
    else
    {
      char v55 = *(void (**)(char *, uint64_t))(v32 + 8);
      v55(v26, v34);
      v55(v112, v34);
      v55(v35, v34);
      v55(v102, v34);

      uint64_t v15 = v32;
      unint64_t v12 = v113;
      uint64_t v7 = v114;
      uint64_t v8 = v118;
    }
  }
  Hand.action.getter();
  unint64_t v56 = v116;
  id v112 = *(char **)(v8 + 104);
  ((void (*)(char *, void, uint64_t))v112)(v116, enum case for Hand.Action.none(_:), v7);
  char v57 = static Hand.Action.== infix(_:_:)();
  char v58 = *(void (**)(char *, uint64_t))(v8 + 8);
  v58(v56, v7);
  uint64_t v118 = v8 + 8;
  v58(v12, v7);
  char v59 = &off_1001F0000;
  uint64_t v60 = v115;
  if (v57)
  {
    uint64_t v109 = (char *)v58;
    uint64_t v61 = v15;
    uint64_t v62 = Hand.id.getter();
    uint64_t v63 = OBJC_IVAR___SCATHandTracker_currentHands;
    uint64_t v64 = v117;
    uint64_t v65 = *(void *)(v117 + OBJC_IVAR___SCATHandTracker_currentHands);
    unint64_t v66 = sub_100103E80(v62);
    if (v67)
    {
      unint64_t v68 = v66;
      uint64_t v69 = v60;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v122 = v65;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100104DB8();
        uint64_t v65 = v122;
      }
      uint64_t v71 = (uint64_t)v108;
      (*(void (**)(char *, unint64_t, uint64_t))(v61 + 32))(v108, *(void *)(v65 + 56) + *(void *)(v61 + 72) * v68, v69);
      sub_100104BE8(v68, v65);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v71, 0, 1, v69);
    }
    else
    {
      uint64_t v69 = v60;
      uint64_t v71 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v108, 1, 1, v69);
      swift_bridgeObjectRetain();
    }
    uint64_t v72 = *(void *)(v64 + v63);
    *(void *)(v64 + v63) = v65;
    swift_bridgeObjectRetain();
    sub_1001032D8(v72, v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = v61;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v71, 1, v69) == 1)
    {
      sub_1000FBEA8(v71, &qword_1001F0348);
      uint64_t v7 = v114;
      uint64_t v60 = v69;
      char v58 = (void (*)(char *, uint64_t))v109;
      char v59 = &off_1001F0000;
    }
    else
    {
      uint64_t v73 = v107;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v107, v71, v69);
      Swift::UInt v74 = Hand.eventUsage.getter();
      uint64_t v7 = v114;
      uint64_t v60 = v69;
      char v59 = &off_1001F0000;
      if ((v75 & 1) == 0)
      {
        sub_100102AEC(v74, 0);
        return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v73, v69);
      }
      (*(void (**)(char *, uint64_t))(v15 + 8))(v73, v69);
      char v58 = (void (*)(char *, uint64_t))v109;
    }
  }
  uint64_t v77 = Hand.id.getter();
  os_log_type_t v78 = (char *)v59[85];
  uint64_t v79 = *(void *)&v78[v117];
  if (*(void *)(v79 + 16) && (unint64_t v80 = sub_100103E80(v77), (v81 & 1) != 0))
  {
    uint64_t v82 = (uint64_t)v110;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v110, *(void *)(v79 + 56) + *(void *)(v15 + 72) * v80, v60);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v82, 0, 1, v60);
    return sub_1000FBEA8(v82, &qword_1001F0348);
  }
  else
  {
    uint64_t v104 = v15;
    uint64_t v83 = (uint64_t)v110;
    uint64_t v109 = *(char **)(v15 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v109)(v110, 1, 1, v60);
    sub_1000FBEA8(v83, &qword_1001F0348);
    os_log_type_t v84 = v113;
    Hand.action.getter();
    BOOL v85 = v116;
    ((void (*)(char *, void, uint64_t))v112)(v116, enum case for Hand.Action.thumbIndexPinch(_:), v7);
    LOBYTE(v83) = static Hand.Action.== infix(_:_:)();
    v58(v85, v7);
    Swift::UInt result = ((uint64_t (*)(char *, uint64_t))v58)(v84, v7);
    if (v83)
    {
      Swift::UInt result = Hand.eventUsage.getter();
      uint64_t v86 = v111;
      if ((v87 & 1) == 0)
      {
        uint64_t v88 = v117;
        Swift::UInt result = sub_100102AEC(result, 1);
        if (!v86)
        {
          uint64_t v89 = v119;
          uint64_t v90 = Hand.id.getter();
          uint64_t v91 = (uint64_t)v103;
          uint64_t v92 = v89;
          uint64_t v93 = v115;
          (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v103, v92, v115);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v109)(v91, 0, 1, v93);
          uint64_t v122 = *(void *)&v78[v88];
          swift_bridgeObjectRetain();
          sub_1001002A4(v91, v90);
          uint64_t v94 = v122;
          uint64_t v95 = *(void *)&v78[v88];
          *(void *)&v78[v88] = v122;
          swift_bridgeObjectRetain();
          sub_1001032D8(v95, v94);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return result;
}

uint64_t Hand.eventUsage.getter()
{
  uint64_t v1 = type metadata accessor for Hand();
  uint64_t v32 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Hand.Chirality();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Hand.Action();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - v13;
  Hand.action.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 88))(v14, v8) == enum case for Hand.Action.thumbIndexPinch(_:))
  {
    Hand.chirality.getter();
    int v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
    if (v15 == enum case for Hand.Chirality.left(_:)) {
      return 1;
    }
    if (v15 == enum case for Hand.Chirality.right(_:)) {
      return 2;
    }
    uint64_t v31 = v5;
    if (qword_1001F2CF0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_1000E881C(v17, (uint64_t)qword_1001F3970);
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v3, v0, v1);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      os_log_t v29 = v18;
      int v30 = v20;
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v34 = v28;
      *(_DWORD *)uint64_t v21 = 136315138;
      id v27 = v21 + 4;
      Hand.action.getter();
      uint64_t v26 = Hand.Action.description.getter();
      unint64_t v23 = v22;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      uint64_t v33 = sub_1000EDB70(v26, v23, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v3, v1);
      os_log_t v24 = v29;
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "HandGestures: Received unknown action: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v3, v1);
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  return 0;
}

uint64_t sub_100102AEC(Swift::UInt a1, int a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_1000EED9C((uint64_t *)&unk_1001EFD50);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7 - 8);
  uint64_t v11 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v62 = (uint64_t)&v55 - v12;
  uint64_t result = sub_100100980(a1);
  if (result)
  {
    uint64_t v14 = result;
    id v15 = [v2 queue];
    if (!v15) {
      return swift_bridgeObjectRelease();
    }
    id v59 = v15;
    uint64_t v60 = v3;
    uint64_t v16 = &v2[OBJC_IVAR___SCATHandTracker_persistentSwitchIdentifiers];
    swift_beginAccess();
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(*(void *)v16 + 16);
    int v58 = a2;
    if (v18 && (unint64_t v19 = sub_1000F7864(a1), (v20 & 1) != 0))
    {
      unint64_t v21 = v19;
      uint64_t v57 = *(void *)(v17 + 56);
      uint64_t v22 = type metadata accessor for UUID();
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = v23;
      uint64_t v25 = v57 + *(void *)(v23 + 72) * v21;
      uint64_t v26 = v62;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v62, v25, v22);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v22);
    }
    else
    {
      uint64_t v27 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v62, 1, 1, v27);
    }
    uint64_t v28 = v8;
    os_log_t v29 = &v4[OBJC_IVAR___SCATHandTracker_switchDisplayNames];
    swift_beginAccess();
    uint64_t v30 = *(void *)v29;
    if (*(void *)(*(void *)v29 + 16) && (unint64_t v31 = sub_1000F7864(a1), (v32 & 1) != 0))
    {
      uint64_t v33 = (uint64_t *)(*(void *)(v30 + 56) + 16 * v31);
      uint64_t v34 = *v33;
      uint64_t v56 = v33[1];
      uint64_t v57 = v34;
      swift_bridgeObjectRetain();
      if (!*(void *)(v14 + 16))
      {
LABEL_10:
        uint64_t v35 = 0;
        uint64_t v36 = 0;
LABEL_22:
        swift_bridgeObjectRelease();
        uint64_t v45 = v62;
        sub_1000FC054(v62, (uint64_t)v11, (uint64_t *)&unk_1001EFD50);
        unint64_t v46 = (*(unsigned __int8 *)(v28 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        uint64_t v47 = swift_allocObject();
        *(void *)(v47 + 16) = v4;
        *(void *)(v47 + 24) = v35;
        *(void *)(v47 + 32) = v36;
        *(unsigned char *)(v47 + 40) = v58 & 1;
        sub_100108FA4((uint64_t)v11, v47 + v46);
        id v48 = (void *)(v47 + ((v9 + v46 + 7) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v49 = v56;
        *id v48 = v57;
        v48[1] = v49;
        aBlock[4] = sub_10010900C;
        aBlock[5] = v47;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        uint64_t aBlock[2] = sub_1000E98D0;
        aBlock[3] = &unk_1001AFB90;
        unint64_t v50 = _Block_copy(aBlock);
        id v51 = v36;
        char v52 = v4;
        id v53 = v35;
        swift_release();
        id v54 = v59;
        [v59 performAsynchronousWritingBlock:v50];
        _Block_release(v50);

        return sub_1000FBEA8(v45, (uint64_t *)&unk_1001EFD50);
      }
    }
    else
    {
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      if (!*(void *)(v14 + 16)) {
        goto LABEL_10;
      }
    }
    os_log_type_t v37 = @"SwitchActionTypeNormal";
    unint64_t v38 = sub_1000F7914((uint64_t)v37);
    if (v39)
    {
      uint64_t v35 = *(void **)(*(void *)(v14 + 56) + 8 * v38);
      id v40 = v35;
    }
    else
    {
      uint64_t v35 = 0;
    }

    if (*(void *)(v14 + 16))
    {
      uint64_t v41 = @"SwitchActionTypeLongPress";
      unint64_t v42 = sub_1000F7914((uint64_t)v41);
      if (v43)
      {
        uint64_t v36 = *(void **)(*(void *)(v14 + 56) + 8 * v42);
        id v44 = v36;
      }
      else
      {
        uint64_t v36 = 0;
      }
    }
    else
    {
      uint64_t v36 = 0;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_100102F80(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, NSString a7)
{
  uint64_t v13 = sub_1000EED9C((uint64_t *)&unk_1001EFD50);
  __chkstk_darwin(v13 - 8);
  id v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FC054(a5, (uint64_t)v15, (uint64_t *)&unk_1001EFD50);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1000FBEA8((uint64_t)v15, (uint64_t *)&unk_1001EFD50);
    NSString v18 = 0;
    if (!a7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  UUID.uuidString.getter();
  NSString v20 = a7;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  NSString v18 = String._bridgeToObjectiveC()();
  a7 = v20;
  swift_bridgeObjectRelease();
  if (a7) {
LABEL_5:
  }
    a7 = String._bridgeToObjectiveC()();
LABEL_6:
  [a1 _handleAction:a2 longPressAction:a3 start:a4 & 1 switchIdentifier:v18 switchDisplayName:a7];
}

uint64_t sub_100103164(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v15 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = sub_100105C24(&v14, *(void *)(*(void *)(a1 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1001032D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Hand.Chirality();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v66 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for Hand.Action();
  uint64_t v7 = *(void *)(v65 - 8);
  uint64_t v8 = __chkstk_darwin(v65);
  id v53 = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int64_t v11 = (char *)v51 - v10;
  uint64_t v12 = type metadata accessor for Hand();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  int v58 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v51 - v16;
  sub_1001086B8(a1, a2);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v19 + 16);
  if (v21)
  {
    uint64_t v67 = 0;
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v22 = v13 + 16;
    uint64_t v71 = v23;
    unint64_t v24 = (*(unsigned __int8 *)(v22 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 64);
    v51[0] = v19;
    uint64_t v25 = (char *)(v19 + v24);
    uint64_t v26 = *(void *)(v22 + 56);
    uint64_t v69 = (uint64_t (**)(char *, uint64_t))(v7 + 88);
    uint64_t v70 = v26;
    int v68 = enum case for Hand.Action.thumbIndexPinch(_:);
    uint64_t v63 = (uint64_t (**)(char *, uint64_t))(v5 + 88);
    uint64_t v64 = (void (**)(char *, uint64_t))(v7 + 8);
    int v62 = enum case for Hand.Chirality.left(_:);
    int v59 = enum case for Hand.Chirality.right(_:);
    uint64_t v27 = (void (**)(char *, uint64_t))(v22 - 8);
    uint64_t v57 = (void (**)(char *, uint64_t))(v5 + 8);
    *(void *)&long long v20 = 136315138;
    long long v52 = v20;
    v51[1] = (char *)&type metadata for Any + 8;
    uint64_t v60 = v4;
    uint64_t v28 = v65;
    uint64_t v61 = v22;
    v23(v17, v25, v12);
    while (1)
    {
      Hand.action.getter();
      int v29 = (*v69)(v11, v28);
      if (v29 != v68)
      {
        (*v64)(v11, v28);
        goto LABEL_4;
      }
      uint64_t v30 = v66;
      Hand.chirality.getter();
      int v31 = (*v63)(v30, v4);
      if (v31 == v62)
      {
        Swift::UInt v32 = 1;
      }
      else
      {
        if (v31 != v59)
        {
          if (qword_1001F2CF0 != -1) {
            swift_once();
          }
          uint64_t v38 = type metadata accessor for Logger();
          sub_1000E881C(v38, (uint64_t)qword_1001F3970);
          char v39 = v58;
          v71(v58, v17, v12);
          id v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v40, v41))
          {
            unint64_t v42 = (_DWORD *)swift_slowAlloc();
            id v54 = v42;
            uint64_t v56 = swift_slowAlloc();
            uint64_t v72 = v56;
            _DWORD *v42 = v52;
            char v43 = v53;
            os_log_t v55 = v40;
            Hand.action.getter();
            uint64_t v44 = Hand.Action.description.getter();
            unint64_t v46 = v45;
            (*v64)(v43, v65);
            uint64_t v47 = sub_1000EDB70(v44, v46, &v72);
            id v48 = (uint8_t *)v54;
            *(void *)(v54 + 1) = v47;
            swift_bridgeObjectRelease();
            (*v27)(v58, v12);
            os_log_t v49 = v55;
            _os_log_impl((void *)&_mh_execute_header, v55, v41, "HandGestures: Received unknown action: %s", v48, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v4 = v60;
            swift_slowDealloc();
          }
          else
          {
            (*v27)(v39, v12);
          }
          (*v57)(v66, v4);
          goto LABEL_24;
        }
        Swift::UInt v32 = 2;
      }
      uint64_t v33 = v67;
      sub_100102AEC(v32, 0);
      if (v33)
      {
        if (qword_1001F2CF0 != -1) {
          swift_once();
        }
        uint64_t v67 = 0;
        uint64_t v34 = type metadata accessor for Logger();
        sub_1000E881C(v34, (uint64_t)qword_1001F3970);
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v36))
        {
          os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v37 = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "HandGestures: Error handling removed Hand reference", v37, 2u);
          swift_slowDealloc();
        }
        swift_errorRelease();

        uint64_t v4 = v60;
      }
      else
      {
        uint64_t v67 = 0;
      }
LABEL_24:
      uint64_t v28 = v65;
LABEL_4:
      (*v27)(v17, v12);
      v25 += v70;
      if (!--v21) {
        return swift_bridgeObjectRelease();
      }
      v71(v17, v25, v12);
    }
  }

  return swift_bridgeObjectRelease();
}

id HandTracker.didOutputSampleBuffer(inputSource:captureOutput:sampleBuffer:fromConnection:)(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3)
{
  return sub_100108878(a3);
}

id sub_1001039F8(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3)
{
  return sub_100108878(a3);
}

uint64_t Hand.Action.description.getter()
{
  uint64_t v1 = type metadata accessor for Hand.Action();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v18 - v6;
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v8((char *)v18 - v6, v0, v1);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v7, v1);
  if (v9 == enum case for Hand.Action.none(_:)) {
    return 1701736302;
  }
  if (v9 == enum case for Hand.Action.thumbIndexPinch(_:)) {
    return 0x68636E6970;
  }
  if (v9 == enum case for Hand.Action.thumbIndexTap(_:)) {
    return 7364980;
  }
  if (qword_1001F2CF0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_1000E881C(v11, (uint64_t)qword_1001F3970);
  v8(v5, v0, v1);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    v18[1] = v14 + 4;
    uint64_t v15 = Hand.Action.description.getter();
    v18[2] = sub_1000EDB70(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v2 + 8);
    v17(v5, v1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "HandGestures: Received unknown action: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v2 + 8);
    v17(v5, v1);
  }

  v17(v7, v1);
  return 0x6E776F6E6B6E75;
}

void *sub_100103D70(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000EED9C(&qword_1001F0368);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = &_swiftEmptyArrayStorage;
      os_log_type_t v13 = &_swiftEmptyArrayStorage + 4;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10010804C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t sub_100103E80(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_1000F79A8(a1, v2);
}

uint64_t sub_100103EC4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = type metadata accessor for Hand();
  uint64_t v5 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_1000EED9C(&qword_1001F0340);
  int v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    os_log_type_t v36 = v3;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v37 = (unint64_t)(v13 + 63) >> 6;
    char v39 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    unint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        int64_t v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_34;
        }
        unint64_t v22 = v38[v21];
        ++v11;
        if (!v22)
        {
          int64_t v11 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v22 = v38[v11];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_41;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v22 = v38[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v23;
          }
        }
LABEL_21:
        unint64_t v15 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v8 + 56) + v26 * v20;
      if (v40) {
        (*v16)(v7, v27, v41);
      }
      else {
        (*v39)(v7, v27, v41);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v10 + 48) + 8 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v26 * v18, v7, v41);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_10010426C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000EED9C(&qword_1001F0380);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    BOOL v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      uint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      void *v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100104554(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  unint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_1000EED9C(&qword_1001F0388);
  int v41 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = result;
  if (*(void *)(v7 + 16))
  {
    int64_t v37 = v2;
    int64_t v10 = 0;
    uint64_t v11 = *(void *)(v7 + 64);
    char v39 = (void *)(v7 + 64);
    uint64_t v12 = 1 << *(unsigned char *)(v7 + 32);
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v11;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    int v40 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    unint64_t v15 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    uint64_t v16 = result + 64;
    while (1)
    {
      if (v14)
      {
        unint64_t v18 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v19 = v18 | (v10 << 6);
      }
      else
      {
        int64_t v20 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v39;
        if (v20 >= v38) {
          goto LABEL_34;
        }
        unint64_t v21 = v39[v20];
        ++v10;
        if (!v21)
        {
          int64_t v10 = v20 + 1;
          if (v20 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v21 = v39[v10];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v38)
            {
LABEL_34:
              if ((v41 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v37;
                goto LABEL_41;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v7 + 32);
              if (v36 >= 64) {
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v39 = -1 << v36;
              }
              uint64_t v3 = v37;
              *(void *)(v7 + 16) = 0;
              break;
            }
            unint64_t v21 = v39[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v10 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_43;
                }
                if (v10 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v21 = v39[v10];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v10 = v22;
          }
        }
LABEL_21:
        unint64_t v14 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v10 << 6);
      }
      uint64_t v23 = *(void *)(v7 + 56);
      uint64_t v24 = v7;
      Swift::UInt v25 = *(void *)(*(void *)(v7 + 48) + 8 * v19);
      uint64_t v26 = v5;
      uint64_t v27 = *(void *)(v5 + 72);
      uint64_t v28 = v23 + v27 * v19;
      if (v41) {
        (*v15)(v42, v28, v43);
      }
      else {
        (*v40)(v42, v28, v43);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v25);
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v17 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v9 + 48) + 8 * v17) = v25;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v15)(*(void *)(v9 + 56) + v27 * v17, v42, v43);
      ++*(void *)(v9 + 16);
      uint64_t v5 = v26;
      uint64_t v7 = v24;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_10010490C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000EED9C((uint64_t *)&unk_1001F0390);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v32[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v32 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      Swift::UInt v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_100104BE8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11) {
            goto LABEL_6;
          }
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        unint64_t v14 = (void *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          void *v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(type metadata accessor for Hand() - 8) + 72);
        int64_t v17 = v16 * v3;
        uint64_t result = v15 + v16 * v3;
        int64_t v18 = v16 * v6;
        unint64_t v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  uint64_t *v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_100104DB8()
{
  uint64_t v1 = type metadata accessor for Hand();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EED9C(&qword_1001F0340);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100105048()
{
  uint64_t v1 = v0;
  sub_1000EED9C(&qword_1001F0380);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v21;
    v22[1] = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001051F8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EED9C(&qword_1001F0388);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100105488()
{
  uint64_t v1 = v0;
  sub_1000EED9C((uint64_t *)&unk_1001F0390);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10010562C(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000F7864(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100105048();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      unint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      void *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    int64_t v21 = (void *)(v18[7] + 16 * v12);
    void *v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_10010426C(result, a4 & 1);
  uint64_t result = sub_1000F7864(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    int64_t v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for AXCameraHandGesturesEventUsage(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10010576C(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1000F7864(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001051F8();
      goto LABEL_7;
    }
    sub_100104554(v13, a3 & 1);
    unint64_t v24 = sub_1000F7864(a2);
    if ((v14 & 1) == (v25 & 1))
    {
      unint64_t v10 = v24;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for AXCameraHandGesturesEventUsage(0);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v19 = *(void *)(v18 - 8);
    char v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v21 = v18;
    uint64_t v22 = v17 + *(void *)(v19 + 72) * v10;
    return v20(v22, a1, v21);
  }
LABEL_13:

  return sub_1000F941C(v10, a2, a1, v16);
}

uint64_t sub_1001058D4(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1000F7864(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100105488();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_10010490C(result, a3 & 1);
  uint64_t result = sub_1000F7864(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for AXCameraHandGesturesEventUsage(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100105A10(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100103E80(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100104DB8();
      goto LABEL_7;
    }
    sub_100103EC4(v13, a3 & 1);
    unint64_t v24 = sub_100103E80(a2);
    if ((v14 & 1) == (v25 & 1))
    {
      unint64_t v10 = v24;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = type metadata accessor for Hand();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v21 = v18;
    uint64_t v22 = v17 + *(void *)(v19 + 72) * v10;
    return v20(v22, a1, v21);
  }
LABEL_13:

  return sub_100105B78(v10, a2, a1, v16);
}

uint64_t sub_100105B78(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for Hand();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_100105C24(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100107360(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100105D20(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    uint64_t result = sub_1001065C0(*(void *)(*(void *)(v2 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

void *sub_100105E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    int64_t v4 = 0;
    uint64_t v6 = a1 + 56;
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    v32[0] = ~v7;
    if (-v7 < 64) {
      uint64_t v8 = ~(-1 << -(char)v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & v5;
    int64_t v10 = (unint64_t)(63 - v7) >> 6;
    uint64_t v11 = a2 + 56;
    while (1)
    {
      do
      {
        if (v9)
        {
          unint64_t v12 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          unint64_t v13 = v12 | (v4 << 6);
        }
        else
        {
          int64_t v14 = v4 + 1;
          if (__OFADD__(v4, 1))
          {
            __break(1u);
            goto LABEL_36;
          }
          if (v14 >= v10) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v14);
          int64_t v16 = v4 + 1;
          if (!v15)
          {
            int64_t v16 = v4 + 2;
            if (v4 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              int64_t v16 = v4 + 3;
              if (v4 + 3 >= v10) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v6 + 8 * v16);
              if (!v15)
              {
                int64_t v16 = v4 + 4;
                if (v4 + 4 >= v10) {
                  goto LABEL_33;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v16);
                if (!v15)
                {
                  int64_t v17 = v4 + 5;
                  if (v4 + 5 >= v10)
                  {
LABEL_33:
                    swift_bridgeObjectRetain();
                    sub_1000FBFF0();
                    return (void *)v2;
                  }
                  unint64_t v15 = *(void *)(v6 + 8 * v17);
                  if (!v15)
                  {
                    while (1)
                    {
                      int64_t v16 = v17 + 1;
                      if (__OFADD__(v17, 1)) {
                        break;
                      }
                      if (v16 >= v10) {
                        goto LABEL_33;
                      }
                      unint64_t v15 = *(void *)(v6 + 8 * v16);
                      ++v17;
                      if (v15) {
                        goto LABEL_23;
                      }
                    }
LABEL_36:
                    __break(1u);
                  }
                  int64_t v16 = v4 + 5;
                }
              }
            }
          }
LABEL_23:
          unint64_t v9 = (v15 - 1) & v15;
          unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
          int64_t v4 = v16;
        }
        uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8 * v13);
        uint64_t v19 = static Hasher._hash(seed:_:)();
        uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v21 = v19 & ~v20;
      }
      while (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0);
      uint64_t v22 = *(void *)(v2 + 48);
      if (*(void *)(v22 + 8 * v21) == v18) {
        break;
      }
      while (1)
      {
        unint64_t v21 = (v21 + 1) & ~v20;
        if (((*(void *)(v11 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          break;
        }
        if (*(void *)(v22 + 8 * v21) == v18) {
          goto LABEL_28;
        }
      }
    }
LABEL_28:
    v33[0] = a1;
    v33[1] = v6;
    _OWORD v33[2] = v32[0];
    v33[3] = v4;
    v33[4] = v9;
    unint64_t v23 = (unint64_t)(63 - v20) >> 6;
    size_t v24 = 8 * v23;
    uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
    if (v23 < 0x81 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      uint64_t v27 = (char *)v32 - v26;
      memcpy((char *)v32 - v26, (const void *)(v2 + 56), v24);
      uint64_t v28 = sub_100106950((uint64_t)v27, v23, v2, v21, v33);
      swift_release();
      sub_1000FBFF0();
      return (void *)v28;
    }
    else
    {
      uint64_t v29 = (void *)swift_slowAlloc();
      memcpy(v29, (const void *)(v2 + 56), v24);
      uint64_t v30 = sub_100106950((uint64_t)v29, v23, v2, v21, v33);
      swift_release();
      sub_1000FBFF0();
      swift_slowDealloc();
      return (void *)v30;
    }
  }
  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
}

uint64_t sub_100106238(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = type metadata accessor for Hand();
  uint64_t v45 = *(void *)(v47 - 8);
  uint64_t v8 = __chkstk_darwin(v47);
  id v48 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v44 = (char *)&v39 - v10;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_1000EED9C(&qword_1001F0340);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  int v40 = a1;
  uint64_t v41 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  unint64_t v15 = v44;
  uint64_t v42 = v45 + 32;
  uint64_t v43 = v45 + 16;
  uint64_t v16 = result + 64;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v46 = v14;
      unint64_t v18 = v17 | (v14 << 6);
    }
    else
    {
      uint64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v41) {
        return v12;
      }
      unint64_t v20 = v40[v19];
      uint64_t v21 = v14 + 1;
      if (!v20)
      {
        uint64_t v21 = v14 + 2;
        if (v14 + 2 >= v41) {
          return v12;
        }
        unint64_t v20 = v40[v21];
        if (!v20)
        {
          uint64_t v21 = v14 + 3;
          if (v14 + 3 >= v41) {
            return v12;
          }
          unint64_t v20 = v40[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v41) {
              return v12;
            }
            unint64_t v20 = v40[v22];
            if (!v20)
            {
              while (1)
              {
                uint64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v41) {
                  return v12;
                }
                unint64_t v20 = v40[v21];
                ++v22;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v21 = v14 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v20 - 1) & v20;
      uint64_t v46 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    uint64_t v23 = a4[7];
    size_t v24 = a4;
    uint64_t v25 = *(void *)(a4[6] + 8 * v18);
    uint64_t v26 = v45;
    uint64_t v27 = *(void *)(v45 + 72);
    uint64_t v28 = v47;
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v15, v23 + v27 * v18, v47);
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v29(v48, v15, v28);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v33 = __clz(__rbit64((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v36 = v32 == v35;
        if (v32 == v35) {
          unint64_t v32 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v16 + 8 * v32);
      }
      while (v37 == -1);
      unint64_t v33 = __clz(__rbit64(~v37)) + (v32 << 6);
    }
    *(void *)(v16 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    *(void *)(*(void *)(v12 + 48) + 8 * v33) = v25;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v29)(*(void *)(v12 + 56) + v33 * v27, v48, v47);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v24;
    uint64_t v14 = v46;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001065C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        return 0;
      }
    }
    while (*(void *)(v8 + 8 * v7) != a1);
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v2;
  uint64_t v14 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100106DDC();
    uint64_t v11 = v14;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_1001071D8(v7);
  uint64_t *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1001066CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000EED9C(&qword_1001F0328);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100106950(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8 = (unint64_t *)result;
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v10 = v9 - 1;
  uint64_t v11 = a3 + 56;
  while (1)
  {
    int64_t v16 = a5[3];
    unint64_t v17 = a5[4];
    if (!v17) {
      break;
    }
    uint64_t v18 = (v17 - 1) & v17;
    unint64_t v19 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(*(void *)(*a5 + 48) + 8 * v19);
    a5[3] = v16;
    a5[4] = v18;
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v27 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v28 = result & ~v27;
    uint64_t v12 = v28 >> 6;
    uint64_t v13 = 1 << v28;
    if (((1 << v28) & *(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v29 = *(void *)(a3 + 48);
      if (*(void *)(v29 + 8 * v28) == v26)
      {
LABEL_3:
        uint64_t v14 = v12;
        unint64_t v15 = v8[v12];
        v8[v14] = v15 & ~v13;
        if ((v13 & v15) != 0)
        {
          if (__OFSUB__(v10--, 1)) {
            goto LABEL_33;
          }
          if (!v10) {
            return (uint64_t)&_swiftEmptySetSingleton;
          }
        }
      }
      else
      {
        for (unint64_t i = v28 + 1; ; unint64_t i = v31 + 1)
        {
          unint64_t v31 = i & ~v27;
          if (((*(void *)(v11 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
            break;
          }
          if (*(void *)(v29 + 8 * v31) == v26)
          {
            uint64_t v12 = v31 >> 6;
            uint64_t v13 = 1 << v31;
            goto LABEL_3;
          }
        }
      }
    }
  }
  int64_t v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    int64_t v21 = (unint64_t)(a5[2] + 64) >> 6;
    int64_t v22 = a5[3];
    if (v20 >= v21) {
      goto LABEL_31;
    }
    uint64_t v23 = a5[1];
    unint64_t v24 = *(void *)(v23 + 8 * v20);
    if (!v24)
    {
      int64_t v22 = v16 + 1;
      if (v16 + 2 >= v21) {
        goto LABEL_31;
      }
      unint64_t v24 = *(void *)(v23 + 8 * (v16 + 2));
      if (v24)
      {
        int64_t v20 = v16 + 2;
      }
      else
      {
        int64_t v22 = v16 + 2;
        if (v16 + 3 >= v21) {
          goto LABEL_31;
        }
        unint64_t v24 = *(void *)(v23 + 8 * (v16 + 3));
        if (v24)
        {
          int64_t v20 = v16 + 3;
        }
        else
        {
          int64_t v20 = v16 + 4;
          int64_t v22 = v16 + 3;
          if (v16 + 4 >= v21) {
            goto LABEL_31;
          }
          unint64_t v24 = *(void *)(v23 + 8 * v20);
          if (!v24)
          {
            int64_t v22 = v21 - 1;
            int64_t v25 = v16 + 5;
            while (v21 != v25)
            {
              unint64_t v24 = *(void *)(v23 + 8 * v25++);
              if (v24)
              {
                int64_t v20 = v25 - 1;
                goto LABEL_21;
              }
            }
LABEL_31:
            a5[3] = v22;
            a5[4] = 0;
            swift_retain();
            return sub_100106B94(v8, a2, v10, a3);
          }
        }
      }
    }
LABEL_21:
    uint64_t v18 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v20 << 6);
    int64_t v16 = v20;
    goto LABEL_22;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100106B94(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1000EED9C(&qword_1001F0328);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (unsigned char *)result;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = a1[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = a1[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << v9[32];
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v21 == v24;
        if (v21 == v24) {
          unint64_t v21 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(void *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(void *)(*((void *)v9 + 6) + 8 * v22) = v18;
    ++*((void *)v9 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = a1[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = a1[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

void *sub_100106DDC()
{
  uint64_t v1 = v0;
  sub_1000EED9C(&qword_1001F0328);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100106F74()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000EED9C(&qword_1001F0328);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1001071D8(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            int64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              void *v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100107360(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1001066CC();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100106DDC();
      goto LABEL_14;
    }
    sub_100106F74();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_100107484(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Hand();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v41 = (char *)&v32 - v13;
  uint64_t v43 = a4;
  uint64_t v16 = *(void *)(a4 + 64);
  uint64_t v15 = a4 + 64;
  uint64_t v14 = v16;
  uint64_t v37 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 32);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return a3;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v15 - 32);
  unint64_t v35 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v38 = v9 + 32;
  uint64_t v39 = v9 + 16;
  int64_t v36 = (unint64_t)(63 - v17) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v40 = a3;
  char v22 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v24 = v23 | (v20 << 6);
  while (1)
  {
    ++v21;
    unint64_t v28 = v42;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v42, *(void *)(v43 + 56) + v29 * v24, v8);
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v22, v28, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v8);
    a3 = v40;
    if (v21 == v40) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v36) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v20 = v25;
  }
  v20 += 2;
  if (v25 + 1 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v20 = v25 + 3;
  if (v25 + 3 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v20;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v36)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    a3 = v21;
LABEL_37:
    uint64_t v17 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v36)
    {
      unint64_t v19 = 0;
      int64_t v20 = v33;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1001077CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000EED9C(&qword_1001F0330);
  uint64_t v3 = *(void *)(type metadata accessor for Hand() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      _DWORD v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_100107484(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1000FBFF0();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return &_swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_100107920(uint64_t a1)
{
  uint64_t v2 = sub_1000EED9C(&qword_1001F03A8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (Swift::UInt *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_1000EED9C(&qword_1001F0388);
    unint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = (char *)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      sub_1000FC054(v9, (uint64_t)v5, &qword_1001F03A8);
      Swift::UInt v11 = *v5;
      unint64_t result = sub_1000F7864(*v5);
      if (v13) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v7[6] + 8 * result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for UUID();
      unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v8, v16);
      uint64_t v17 = v7[2];
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      void v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_100107AE8(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000EED9C(&qword_1001F0380);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_1000F7864(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    uint64_t v10 = (void *)(v3[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    void v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    unint64_t v14 = v9 + 3;
    Swift::UInt v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000F7864(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void type metadata accessor for AXCameraHandGesturesEventUsage(uint64_t a1)
{
}

unint64_t sub_100107C0C(uint64_t a1)
{
  uint64_t v2 = sub_1000EED9C(&qword_1001F03A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    sub_1000EED9C(&qword_1001F0340);
    unint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    char v8 = (char *)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      sub_1000FC054(v9, (uint64_t)v5, &qword_1001F03A0);
      uint64_t v11 = *v5;
      unint64_t result = sub_100103E80(*v5);
      if (v13) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v7[6] + 8 * result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = type metadata accessor for Hand();
      unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v8, v16);
      uint64_t v17 = v7[2];
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      void v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t type metadata accessor for HandTracker()
{
  return self;
}

unint64_t sub_100107DF8(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000EED9C((uint64_t *)&unk_1001F0390);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_1000F7864(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  char v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    void v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    char v13 = v8 + 2;
    Swift::UInt v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000F7864(v5);
    char v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100107EF8()
{
  unint64_t result = qword_1001F02D0;
  if (!qword_1001F02D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001F02D0);
  }
  return result;
}

uint64_t sub_100107F38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100107F80()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 42, 7);
}

id sub_100107FC8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 40);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 41);
  id v6 = [v3 action];

  return [v1 handTrackerInputSource:v2 didReceiveActionWithIdentifier:v6 start:v4 ignoreInputHold:v5];
}

uint64_t sub_100108034(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100108044()
{
  return swift_release();
}

char *sub_10010804C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    char v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100108138(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a2;
  uint64_t v42 = a4;
  uint64_t v34 = a1;
  uint64_t v41 = sub_1000EED9C(&qword_1001F0338);
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Hand();
  uint64_t result = __chkstk_darwin(v7);
  BOOL v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = 0;
  uint64_t v43 = (void *)a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v35 = 0;
  uint64_t v36 = a3 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v13;
  uint64_t v39 = v9 + 16;
  uint64_t v40 = v9;
  uint64_t v17 = a4 + 56;
  int64_t v37 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  while (v16)
  {
    unint64_t v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v19 = v18 | (v12 << 6);
LABEL_22:
    uint64_t v23 = *(void *)(v43[6] + 8 * v19);
    unint64_t v24 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
    v24(v11, v43[7] + *(void *)(v40 + 72) * v19, v7);
    int64_t v25 = v44;
    *(void *)uint64_t v44 = v23;
    v24(&v25[*(int *)(v41 + 48)], (unint64_t)v11, v7);
    uint64_t v26 = v42;
    if (!*(void *)(v42 + 16)) {
      goto LABEL_5;
    }
    uint64_t v27 = static Hasher._hash(seed:_:)();
    uint64_t v28 = -1 << *(unsigned char *)(v26 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v17 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v30 = *(void *)(v26 + 48);
    if (*(void *)(v30 + 8 * v29) == v23)
    {
LABEL_28:
      sub_1000FBEA8((uint64_t)v44, &qword_1001F0338);
      uint64_t result = (*v38)(v11, v7);
      *(unint64_t *)((char *)v34 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v35++, 1))
      {
        __break(1u);
        return sub_100106238(v34, v33, v35, v43);
      }
    }
    else
    {
      uint64_t v31 = ~v28;
      while (1)
      {
        unint64_t v29 = (v29 + 1) & v31;
        if (((*(void *)(v17 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0) {
          break;
        }
        if (*(void *)(v30 + 8 * v29) == v23) {
          goto LABEL_28;
        }
      }
LABEL_5:
      sub_1000FBEA8((uint64_t)v44, &qword_1001F0338);
      uint64_t result = (*v38)(v11, v7);
    }
  }
  int64_t v20 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v20 >= v37) {
    return sub_100106238(v34, v33, v35, v43);
  }
  unint64_t v21 = *(void *)(v36 + 8 * v20);
  ++v12;
  if (v21) {
    goto LABEL_21;
  }
  int64_t v12 = v20 + 1;
  if (v20 + 1 >= v37) {
    return sub_100106238(v34, v33, v35, v43);
  }
  unint64_t v21 = *(void *)(v36 + 8 * v12);
  if (v21) {
    goto LABEL_21;
  }
  int64_t v12 = v20 + 2;
  if (v20 + 2 >= v37) {
    return sub_100106238(v34, v33, v35, v43);
  }
  unint64_t v21 = *(void *)(v36 + 8 * v12);
  if (v21)
  {
LABEL_21:
    unint64_t v16 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v12 << 6);
    goto LABEL_22;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v37) {
    return sub_100106238(v34, v33, v35, v43);
  }
  unint64_t v21 = *(void *)(v36 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v37) {
      return sub_100106238(v34, v33, v35, v43);
    }
    unint64_t v21 = *(void *)(v36 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1001084FC(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_100108138((unint64_t *)((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    BOOL v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_100108138((unint64_t *)v11, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

void *sub_1001086B8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_100103164(a2);
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_100103164(v5);
  if (*(void *)(v6 + 16) <= *(void *)(v4 + 16) >> 3)
  {
    swift_bridgeObjectRetain();
    sub_100105D20(v6);
    uint64_t v7 = v4;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (uint64_t)sub_100105E94(v6, v4);
  }
  if (*(void *)(v4 + 16) <= *(void *)(v6 + 16) >> 3) {
    sub_100105D20(v4);
  }
  else {
    uint64_t v6 = (uint64_t)sub_100105E94(v4, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001084FC(a1, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001084FC(a2, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v8 = swift_retain();
  uint64_t v9 = sub_1001077CC(v8);
  swift_release();
  uint64_t v10 = swift_retain();
  sub_1001077CC(v10);
  swift_release();
  swift_release_n();
  return v9;
}

uint64_t _s15assistivetouchd11HandTrackerC2IDSSvg_0()
{
  return 0x63617254646E6148;
}

id sub_100108878(opaqueCMSampleBuffer *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for HandsOutput();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x178))(v6))
  {
    sub_100101388(a1, (uint64_t)v8);
    sub_100101830();
    *(void *)((char *)v1 + OBJC_IVAR___SCATHandTracker_notDetectedCount) = 0;
    sub_100100E84(1, 0);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    if (qword_1001F2CF0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_1000E881C(v9, (uint64_t)qword_1001F3970);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      int64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "HandGestures: Shouldn't be running when no hand gestures are assigned.", v12, 2u);
      swift_slowDealloc();
    }

    return [v2 stopRunning];
  }
}

unint64_t sub_100108D08()
{
  unint64_t result = qword_1001F02E0;
  if (!qword_1001F02E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001F02E0);
  }
  return result;
}

unint64_t sub_100108D60()
{
  unint64_t result = qword_1001F02E8;
  if (!qword_1001F02E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001F02E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for HandTrackerAvailabilityDetail()
{
  return &type metadata for HandTrackerAvailabilityDetail;
}

uint64_t getEnumTagSinglePayload for HandTracker.HandTrackerError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HandTracker.HandTrackerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100108F20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandTracker.HandTrackerError()
{
  return &type metadata for HandTracker.HandTrackerError;
}

uint64_t sub_100108F58()
{
  return sub_100107F38(&qword_1001F0320, type metadata accessor for AXCameraHandGesturesEventUsage);
}

uint64_t sub_100108FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000EED9C((uint64_t *)&unk_1001EFD50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100109010()
{
  unint64_t result = qword_1001F0358;
  if (!qword_1001F0358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001F0358);
  }
  return result;
}

uint64_t sub_100109068()
{
  uint64_t v1 = *(void *)(sub_1000EED9C((uint64_t *)&unk_1001EFD50) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 41) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);

  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))((char *)v0 + v3, 1, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))((char *)v0 + v3, v5);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_1001091C0()
{
  uint64_t v1 = *(void *)(sub_1000EED9C((uint64_t *)&unk_1001EFD50) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 40);
  uint64_t v7 = v0 + v2;
  int v8 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = (void *)v8[1];

  sub_100102F80(v3, v4, v5, v6, v7, v9, v10);
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
}

uint64_t sub_100109274(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1001092CC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

id sub_10010930C()
{
  return [*(id *)(v0 + 16) handTrackerInputSource:*(void *)(v0 + 24) didUpdateAvailability:*(unsigned __int8 *)(v0 + 32) withDetail:*(void *)(v0 + 40)];
}

__n128 sub_100109324(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100109338(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100109358(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

uint64_t static AXPrefsBridge.voiceSelection(forLanguageCode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  void v3[5] = a1;
  sub_1000EED9C(&qword_1001F03F0);
  v3[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale.Language();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  sub_1000EED9C(&qword_1001F03F8);
  v3[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Locale();
  v3[13] = v5;
  void v3[14] = *(void *)(v5 - 8);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_100109528, 0, 0);
}

uint64_t sub_100109528()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  swift_bridgeObjectRetain();
  Locale.init(withAXRemapping:)();
  type metadata accessor for AXPreferences();
  uint64_t v4 = (char *)static AXPreferences.shared.getter();
  uint64_t v5 = (id *)&v4[direct field offset for AXPreferences.assistiveTouch];
  swift_beginAccess();
  id v6 = *v5;

  uint64_t v7 = AXPreferences.AssistiveTouch.defaultVoiceSelectionsByLanguage.getter();
  v0[16] = v7;

  Locale.language.getter();
  Locale.Language.languageCode.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  type metadata accessor for VoiceResolver();
  uint64_t v8 = static VoiceResolver.shared.getter();
  v0[17] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[18] = v9;
  void *v9 = v0;
  v9[1] = sub_1001096B8;
  uint64_t v10 = v0[12];
  uint64_t v11 = v0[8];
  return Dictionary<>.selection(forLanguage:withResolver:exists:)(v10, v11, v8, 0, v7);
}

uint64_t sub_1001096B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000FBEA8(v1, &qword_1001F03F0);
  return _swift_task_switch(sub_100109818, 0, 0);
}

uint64_t sub_100109818()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = type metadata accessor for VoiceSelection();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0[5];
    (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v1, v2);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  return result;
}

uint64_t sub_100109AE0(uint64_t a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for VoiceSelection();
  v2[2] = v4;
  v2[3] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  void v2[4] = v5;
  void v2[5] = _Block_copy(a2);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  void v2[6] = v7;
  uint64_t v9 = (void *)swift_task_alloc();
  v2[7] = v9;
  void *v9 = v2;
  v9[1] = sub_100109C0C;
  return static AXPrefsBridge.voiceSelection(forLanguageCode:)(v5, v6, v8);
}

uint64_t sub_100109C0C()
{
  uint64_t v1 = *(void (***)(void, void))(*v0 + 40);
  uint64_t v2 = *(void *)(*v0 + 32);
  uint64_t v3 = *(void *)(*v0 + 24);
  uint64_t v4 = *(void *)(*v0 + 16);
  uint64_t v8 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)VoiceSelection._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  ((void (**)(void, void *))v1)[2](v1, v5);

  _Block_release(v1);
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

id AXPrefsBridge.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPrefsBridge();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for AXPrefsBridge()
{
  return self;
}

id AXPrefsBridge.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXPrefsBridge();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100109E90()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100109ED0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(const void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100109F84;
  uint64_t v5 = (uint64_t (*)(uint64_t, const void *))((char *)&dword_1001F0430 + dword_1001F0430);
  return v5(v2, v3);
}

uint64_t sub_100109F84()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10010A078(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10010A854;
  return v6();
}

uint64_t sub_10010A148()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10010A854;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001F0440 + dword_1001F0440);
  return v6(v2, v3, v4);
}

uint64_t sub_10010A208(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_10010A854;
  return v7();
}

uint64_t sub_10010A2D8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10010A318(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10010A854;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001F0450 + dword_1001F0450);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10010A3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000FBEA8(a1, &qword_1001F0428);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10010A590(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10010A66C;
  return v6(a1);
}

uint64_t sub_10010A66C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10010A764()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010A79C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100109F84;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001F0460 + dword_1001F0460);
  return v6(a1, v4);
}

unint64_t sub_10010A85C()
{
  unint64_t result = qword_1001F0470;
  if (!qword_1001F0470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001F0470);
  }
  return result;
}

int *sub_10010A8B0@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *result;
  BOOL v3 = *result > 2;
  if (*result > 2) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ForceCalibrationDismissReason()
{
  return &type metadata for ForceCalibrationDismissReason;
}

uint64_t sub_10010A8DC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000F034C(v0, qword_1001F3988);
  sub_1000E881C(v0, (uint64_t)qword_1001F3988);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10010A95C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16);
  sub_10010A9E4(a1);

  return v9(a1, a2, a3, a4);
}

uint64_t sub_10010A9E4(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10010A9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40);
  sub_10010A9E4(a1);

  return v9(a1, a2, a3, a4);
}

uint64_t SCATAirPodsSource.isStreaming.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource__isStreaming);
}

uint64_t SCATAirPodsSource.isAirPodsInputSource.getter()
{
  return 1;
}

uint64_t SCATAirPodsSource.switchSource.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t variable initialization expression of SCATAirPodsSource.headGesturesDelegate()
{
  return 0;
}

uint64_t sub_10010AB1C()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10010AB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_headGesturesDelegate);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_10010ABCC())()
{
  return j__swift_endAccess;
}

uint64_t SCATAirPodsSource.requestHeadGesturesParts.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_hgManager;
  swift_beginAccess();
  sub_10010ACCC(v1, (uint64_t)v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_10010AD30(v6, v7);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  sub_1000F0190((uint64_t)v6);
  LOBYTE(v2) = dispatch thunk of HGConfiguration.requestPartGestures.getter();

  return v2 & 1;
}

uint64_t sub_10010ACCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_10010AD30(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t SCATAirPodsSource.requestHeadGesturesParts.setter()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x110))();
}

void (*SCATAirPodsSource.requestHeadGesturesParts.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_hgManager;
  swift_beginAccess();
  sub_10010ACCC(v4, (uint64_t)v3);
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[4];
  sub_10010AD30(v3, v5);
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  sub_1000F0190((uint64_t)v3);
  LOBYTE(v5) = dispatch thunk of HGConfiguration.requestPartGestures.getter();

  *((unsigned char *)v3 + 72) = v5 & 1;
  return sub_10010AE8C;
}

void sub_10010AE8C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)a1 + 64)) + 0x110))(*(unsigned __int8 *)(*(void *)a1 + 72));

  free(v1);
}

double variable initialization expression of SCATAirPodsSource.timerDelay()
{
  return 0.5;
}

uint64_t sub_10010AF0C@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xE8))();
  *a2 = result & 1;
  return result;
}

void sub_10010AF6C(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = (char *)(*a2 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_isSimulatingLongPress);
  swift_beginAccess();
  char v4 = *v3;
  *uint64_t v3 = v2;
  sub_10010AFCC(v4);
}

void sub_10010AFCC(char a1)
{
  int v2 = a1 & 1;
  uint64_t v3 = &v1[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_isSimulatingLongPress];
  swift_beginAccess();
  if (*v3 != v2)
  {
    if (*v3)
    {
      if (qword_1001F3400 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_1000E881C(v4, (uint64_t)qword_1001F3988);
      uint64_t v5 = v1;
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136315138;
        aBlock[0] = v9;
        uint64_t v10 = v5;
        id v11 = [v10 description];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v14 = v13;

        uint64_t v31 = sub_1000EDB70(v12, v14, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Begin simulated long press for %s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v5 beginSimulatedLongPressForInputSource:v5];
      uint64_t v26 = *(void **)&v5[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_dispatchTimer];
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v5;
      aBlock[4] = (uint64_t)sub_10010FF5C;
      aBlock[5] = v27;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = (uint64_t)sub_1000E98D0;
      aBlock[3] = (uint64_t)&unk_1001AFFA8;
      uint64_t v28 = _Block_copy(aBlock);
      unint64_t v29 = v5;
      swift_release();
      [v26 afterDelay:v28 processBlock:0.5];
      _Block_release(v28);
    }
    else
    {
      [*(id *)&v1[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_dispatchTimer] cancel];
      if (qword_1001F3400 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_1000E881C(v15, (uint64_t)qword_1001F3988);
      unint64_t v16 = v1;
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        unint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)unint64_t v19 = 136315138;
        aBlock[0] = v20;
        unint64_t v21 = v16;
        id v22 = [v21 description];
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v25 = v24;

        uint64_t v31 = sub_1000EDB70(v23, v25, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "End simulated long press for %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v16 endSimulatedLongPressForInputSource:v16];
    }
  }
}

uint64_t SCATAirPodsSource.isSimulatingLongPress.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_isSimulatingLongPress);
  swift_beginAccess();
  return *v1;
}

void sub_10010B4B0(char a1)
{
  uint64_t v3 = (char *)(v1 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_isSimulatingLongPress);
  swift_beginAccess();
  char v4 = *v3;
  *uint64_t v3 = a1;
  sub_10010AFCC(v4);
}

uint64_t type metadata accessor for SCATAirPodsSource()
{
  return self;
}

char *sub_10010B530()
{
  Objectint Type = swift_getObjectType();
  type metadata accessor for SCATAirPodsHeadGesturesDelegate();
  uint64_t v2 = swift_allocObject();
  type metadata accessor for HGConfiguration();
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  id v3 = v0;
  swift_retain();
  static HGConfiguration.defaultConfig.getter();
  char v4 = (objc_class *)type metadata accessor for HGManager();
  id v5 = objc_allocWithZone(v4);
  uint64_t v6 = (void *)HGManager.init(delegate:config:)();
  os_log_type_t v7 = (void *)dispatch thunk of HGManager.configuration.getter();
  dispatch thunk of HGConfiguration.requestPartGestures.setter();

  uint64_t v8 = (void *)dispatch thunk of HGManager.configuration.getter();
  uint64_t v9 = (void *)dispatch thunk of HGConfiguration.audioFeedbackConfig.getter();

  dispatch thunk of HGAudioFeedbackConfiguration.enableAudioFeedback.setter();
  uint64_t v10 = swift_getObjectType();

  v23[3] = v4;
  v23[4] = &protocol witness table for HGManager;
  v23[0] = v6;
  id v11 = *(uint64_t (**)(void *, void, uint64_t))(v10 + 264);
  id v22 = v6;
  uint64_t v12 = (void *)v11(v23, 0, 1);
  swift_deallocPartialClassInstance();
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = ObjectType;
  swift_beginAccess();
  uint64_t v15 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = sub_10010DE24;
  *(void *)(v2 + 24) = v14;
  unint64_t v16 = v12;
  sub_10010DED0(v15);
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = ObjectType;
  swift_beginAccess();
  uint64_t v19 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = sub_10010DEE0;
  *(void *)(v2 + 40) = v18;
  swift_retain();
  swift_retain();
  sub_10010DED0(v19);
  swift_release();
  swift_release();

  uint64_t v20 = (uint64_t *)&v16[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_headGesturesDelegate];
  swift_beginAccess();
  *uint64_t v20 = v2;
  v20[1] = (uint64_t)&off_1001AFE10;
  swift_unknownObjectRelease();
  return v16;
}

double sub_10010B808()
{
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  return result;
}

uint64_t type metadata accessor for SCATAirPodsHeadGesturesDelegate()
{
  return self;
}

void SCATAirPodsSource.__allocating_init(headGestureManager:enableAudioFeedback:allowPartialGestures:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  SCATAirPodsSource.init(headGestureManager:enableAudioFeedback:allowPartialGestures:)(a1);
}

void SCATAirPodsSource.init(headGestureManager:enableAudioFeedback:allowPartialGestures:)(uint64_t a1)
{
  v1[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource__isStreaming] = 0;
  uint64_t v2 = &v1[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_headGesturesDelegate];
  void *v2 = 0;
  v2[1] = 0;
  *(void *)&v1[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_timerDelay] = 0x3FE0000000000000;
  id v3 = &v1[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_isSimulatingLongPress];
  v1[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_isSimulatingLongPress] = 0;
  char v4 = &v1[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_hgManager];
  sub_10010ACCC(a1, (uint64_t)&v1[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_hgManager]);
  swift_beginAccess();
  uint64_t v6 = v4[3];
  uint64_t v5 = v4[4];
  sub_10010AD30(v4, v6);
  os_log_type_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v8 = v1;
  uint64_t v9 = (void *)v7(v6, v5);
  swift_endAccess();
  dispatch thunk of HGConfiguration.requestPartGestures.setter();

  swift_beginAccess();
  uint64_t v10 = v4[3];
  uint64_t v11 = v4[4];
  sub_10010AD30(v4, v10);
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  swift_endAccess();
  uint64_t v13 = (void *)dispatch thunk of HGConfiguration.audioFeedbackConfig.getter();

  dispatch thunk of HGAudioFeedbackConfiguration.enableAudioFeedback.setter();
  swift_beginAccess();
  *id v3 = 0;
  sub_1000F00F4(0, &qword_1001EFA90);
  uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
  id v15 = [objc_allocWithZone((Class)AXDispatchTimer) initWithTargetSerialQueue:v14];

  if (v15)
  {
    *(void *)&v8[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_dispatchTimer] = v15;
    [v15 setAutomaticallyCancelPendingBlockUponSchedulingNewBlock:1];
    id v16 = v15;
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 setLabel:v17];

    v19.receiver = v8;
    v19.super_class = (Class)type metadata accessor for SCATAirPodsSource();
    objc_msgSendSuper2(&v19, "init");
    sub_1000F0190(a1);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall SCATAirPodsSource.setRequestPartGestures(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  int v3 = a1;
  uint64_t v4 = (uint64_t)v1 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_hgManager;
  swift_beginAccess();
  sub_10010ACCC(v4, (uint64_t)v11);
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  sub_10010AD30(v11, v12);
  os_log_type_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  sub_1000F0190((uint64_t)v11);
  LODWORD(v5) = dispatch thunk of HGConfiguration.requestPartGestures.getter() & 1;

  if (v5 != v3)
  {
    sub_10010ACCC(v4, (uint64_t)v11);
    uint64_t v8 = v12;
    uint64_t v9 = v13;
    sub_10010AD30(v11, v12);
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    sub_1000F0190((uint64_t)v11);
    dispatch thunk of HGConfiguration.requestPartGestures.setter();

    if ([v2 isRunning])
    {
      [v2 stopRunning];
      [v2 startRunning];
    }
  }
}

Swift::Void __swiftcall SCATAirPodsSource.startRunning()()
{
  uint64_t v1 = v0;
  if (qword_1001F3400 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3988);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "HeadGestures: Will start Head Gestures Manager", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = (uint64_t)v1 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_hgManager;
  swift_beginAccess();
  sub_10010ACCC(v6, (uint64_t)v9);
  uint64_t v7 = v10;
  uint64_t v8 = v11;
  sub_10010AD30(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  sub_1000F0190((uint64_t)v9);
  [v1 setRunning:1];
}

Swift::Void __swiftcall SCATAirPodsSource.stopRunning()()
{
  uint64_t v1 = v0;
  if (qword_1001F3400 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3988);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "HeadGestures: Will stop Head Gestures Manager", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = (uint64_t)v1 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_hgManager;
  swift_beginAccess();
  sub_10010ACCC(v6, (uint64_t)v9);
  uint64_t v7 = v10;
  uint64_t v8 = v11;
  sub_10010AD30(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v7, v8);
  sub_1000F0190((uint64_t)v9);
  [v1 setRunning:0];
}

uint64_t sub_10010BFC0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000EED9C(&qword_1001F00D0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v26 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v25) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v25) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v25) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v25) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v26 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    NSString v17 = *(void **)(*(void *)(a1 + 56) + 8 * v12);
    *(void *)&v35[0] = *(void *)(*(void *)(a1 + 48) + 8 * v12);
    type metadata accessor for AXHeadGesturesEventUsage(0);
    v17;
    swift_dynamicCast();
    sub_1000F00F4(0, (unint64_t *)&qword_1001F02D0);
    swift_dynamicCast();
    long long v31 = v27;
    long long v32 = v28;
    uint64_t v33 = v29;
    sub_1000EFC04(&v30, v34);
    long long v27 = v31;
    long long v28 = v32;
    uint64_t v29 = v33;
    sub_1000EFC04(v34, v35);
    sub_1000EFC04(v35, &v31);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v18 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)&v6[8 * (v19 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v19) & ~*(void *)&v6[8 * (v19 >> 6)])) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v23 = v20 == v22;
        if (v20 == v22) {
          unint64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)&v6[8 * v20];
      }
      while (v24 == -1);
      unint64_t v9 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v27;
    *(_OWORD *)(v10 + 16) = v28;
    *(void *)(v10 + 32) = v29;
    uint64_t result = (uint64_t)sub_1000EFC04(&v31, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v25)
  {
LABEL_37:
    swift_release();
    sub_1000FBFF0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v26 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v25) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

id SCATAirPodsSource.switchKey(for:)(id result)
{
  if (result) {
    return [result accessibilityEventUsage];
  }
  __break(1u);
  return result;
}

uint64_t SCATAirPodsSource.handle(headGestureResult:)(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1001F3400 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1000E881C(v4, (uint64_t)qword_1001F3988);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    int64_t v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)int64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "handling head gesture result: %@", v8, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = HGHeadGestureResult.eventUsage.getter();
  if (v12)
  {
    char v17 = 0;
  }
  else
  {
    uint64_t v13 = v11;
    unsigned __int8 v14 = sub_10010D134(v5);
    int64_t v15 = (char *)(v2 + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_isSimulatingLongPress);
    swift_beginAccess();
    char v16 = *v15;
    char *v15 = v14 & 1;
    sub_10010AFCC(v16);
    char v17 = sub_10010C72C(v13);
  }
  return v17 & 1;
}

uint64_t HGHeadGestureResult.eventUsage.getter()
{
  uint64_t result = (uint64_t)[v0 headGesture];
  if (result != 1 && result != 2)
  {
    uint64_t v2 = (char *)[v0 headGesturePart] - 1;
    uint64_t result = 3;
    switch((unint64_t)v2)
    {
      case 0uLL:
        return result;
      case 1uLL:
        uint64_t result = 4;
        break;
      case 2uLL:
        uint64_t result = 5;
        break;
      case 3uLL:
        uint64_t result = 6;
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t sub_10010C72C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10010CC00(a1);
  if (!v4)
  {
    if (qword_1001F3400 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_1000E881C(v15, (uint64_t)qword_1001F3988);
    char v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 134217984;
      aBlock[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No AXSwitch found for event usage with raw value: %ld", v18, 0xCu);
      swift_slowDealloc();
    }

    return 0;
  }
  id v5 = (void *)v4;
  id v6 = [self fromSwitch:v4 longPress:0];
  if (!v6)
  {
    if (qword_1001F3400 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_1000E881C(v19, (uint64_t)qword_1001F3988);
    id v20 = v5;
    char v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      BOOL v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)BOOL v23 = 138412290;
      aBlock[0] = v20;
      id v25 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v5;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Cannot convert AXSwitch: %@ to action item.", v23, 0xCu);
      sub_1000EED9C(&qword_1001EF8F8);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  os_log_type_t v7 = v6;
  if (qword_1001F3400 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_1000E881C(v8, (uint64_t)qword_1001F3988);
  id v9 = v7;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    char v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    buf = v12;
    *(_DWORD *)char v12 = 138412290;
    aBlock[0] = v9;
    id v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v7;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "handling switch control action item: %@", buf, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v9;
  *(void *)(v26 + 24) = v2;
  aBlock[4] = sub_10010FDC0;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1000E98D0;
  aBlock[3] = &unk_1001AFF58;
  long long v27 = _Block_copy(aBlock);
  id v28 = v9;
  id v29 = v2;
  swift_release();
  AXPerformBlockOnMainThread();

  _Block_release(v27);
  return 1;
}

uint64_t sub_10010CC00(uint64_t a1)
{
  id v3 = [v1 actions];
  if (!v3)
  {
    if (qword_1001F3400 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_1000E881C(v9, (uint64_t)qword_1001F3988);
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      char v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Could not lookup action identifier because actions are nil", v12, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for AXHeadGesturesEventUsage(0);
  sub_10010FC18(&qword_1001F05F0, type metadata accessor for AXHeadGesturesEventUsage);
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_1000F78D0((uint64_t)v13), (v7 & 1) != 0))
  {
    sub_1000F01E0(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v14);
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000F9F50((uint64_t)v13);
  if (!*((void *)&v15 + 1))
  {
    sub_10010FC60((uint64_t)&v14);
    return 0;
  }
  sub_1000F00F4(0, (unint64_t *)&qword_1001F02D0);
  if (swift_dynamicCast()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10010CE1C(uint64_t a1)
{
  uint64_t result = sub_10010CC00(a1);
  if (!result) {
    return result;
  }
  uint64_t v2 = (void *)result;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_14:
    id v15 = [v2 action];
LABEL_17:
    id v22 = v15;
    goto LABEL_18;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
LABEL_16:
    id v15 = [v2 longPressAction];
    goto LABEL_17;
  }
  id v22 = 0;
LABEL_18:
  id v16 = [self sharedInstance];
  unsigned int v17 = [v16 switchControlDebugLoggingEnabled];

  if (v17)
  {
    if (qword_1001F3400 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_1000E881C(v18, (uint64_t)qword_1001F3988);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Found action: %ld for event usage: %ld", (uint8_t *)v21, 0x16u);
      swift_slowDealloc();
    }
  }
  swift_beginAccess();
  return (uint64_t)v22;
}

id sub_10010D134(void *a1)
{
  if (qword_1001F3400 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_1000E881C(v2, (uint64_t)qword_1001F3988);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    char v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Should simulate long press: %@", v6, 0xCu);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id result = [v3 headGesturePart];
  if (result)
  {
    uint64_t v10 = (char *)[v3 headGesturePart];
    if ((unint64_t)(v10 - 1) > 3) {
      return 0;
    }
    else {
      return (id)(sub_10010CE1C(qword_100199328[(void)(v10 - 1)]) != 0);
    }
  }
  return result;
}

BOOL HGHeadGestureResult.isPartialGesture.getter()
{
  return [v0 headGesturePart] != 0;
}

uint64_t HGHeadGesturePart.gesture.getter(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return 4;
  }
  else {
    return qword_100199328[a1 - 1];
  }
}

uint64_t HGHeadGesture.eventUsage.getter(uint64_t result)
{
  uint64_t v1 = 2;
  if (result != 2) {
    uint64_t v1 = 0;
  }
  if (result != 1) {
    return v1;
  }
  return result;
}

id SCATAirPodsSource.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SCATAirPodsSource();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10010D438()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10010A9E4(v1);
  return v1;
}

uint64_t sub_10010D488(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_10010DED0(v5);
}

uint64_t (*sub_10010D4DC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10010D530()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  sub_10010A9E4(v1);
  return v1;
}

uint64_t sub_10010D580(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return sub_10010DED0(v5);
}

uint64_t (*sub_10010D5D4())()
{
  return j_j__swift_endAccess;
}

void (*sub_10010D628(void *a1))(id)
{
  uint64_t v2 = v1;
  if (qword_1001F3400 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1000E881C(v4, (uint64_t)qword_1001F3988);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)id v8 = 136315138;
    id v9 = [v5 debugDescription];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    sub_1000EDB70(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "HeadGestures: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id result = (void (*)(id))(*(uint64_t (**)(void))(*(void *)v2 + 120))();
  if (result)
  {
    uint64_t v14 = (uint64_t)result;
    result(v5);
    return (void (*)(id))sub_10010DED0(v14);
  }
  return result;
}

void (*sub_10010D8A0(int a1))(void)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001F3400 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1000E881C(v4, (uint64_t)qword_1001F3988);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  int v20 = a1;
  if (v11)
  {
    uint64_t v19 = v2;
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)unint64_t v12 = 136315138;
    uint64_t v22 = v13;
    if (a1) {
      uint64_t v14 = 21321;
    }
    else {
      uint64_t v14 = 0x544F4E205349;
    }
    if (a1) {
      unint64_t v15 = 0xE200000000000000;
    }
    else {
      unint64_t v15 = 0xE600000000000000;
    }
    uint64_t v21 = sub_1000EDB70(v14, v15, &v22);
    uint64_t v2 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "HeadGestures: Motion Data %s streaming", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id result = (void (*)(void))(*(uint64_t (**)(uint64_t))(*(void *)v2 + 96))(v16);
  if (result)
  {
    uint64_t v18 = (uint64_t)result;
    result(v20 & 1);
    return (void (*)(void))sub_10010DED0(v18);
  }
  return result;
}

void sub_10010DB8C()
{
  if (qword_1001F3400 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000E881C(v0, (uint64_t)qword_1001F3988);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "HeadGestures: Did detect error", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10010DD74()
{
  sub_10010DED0(*(void *)(v0 + 16));
  sub_10010DED0(*(void *)(v0 + 32));

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_10010DDB4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010DDEC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10010DE24(char a1)
{
  swift_beginAccess();
  uint64_t Strong = (unsigned char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    Strong[OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource__isStreaming] = a1 & 1;
  }
}

uint64_t sub_10010DE88()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t sub_10010DEAC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t sub_10010DED0(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void sub_10010DEE0(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = Strong;
    (*(void (**)(void *))((swift_isaMask & *Strong) + 0x118))(a1);
  }
  if (qword_1001F3400 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_1000E881C(v4, (uint64_t)qword_1001F3988);
  uint64_t v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    id v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412546;
    os_log_type_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    *(_WORD *)(v8 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "HeadGestures: SwitchControl handled hgResult: %@. Result: %{BOOL}d", (uint8_t *)v8, 0x12u);
    sub_1000EED9C(&qword_1001EF8F8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v6 = v5;
  }
}

uint64_t (*sub_10010E11C(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  void v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 112))();
  return sub_10010E194;
}

uint64_t sub_10010E198()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t sub_10010E1BC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t (*sub_10010E1E0(void *a1))()
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  void v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 136))();
  return sub_10010E194;
}

Swift::Void __swiftcall HGManager.stopProcessing()()
{
}

uint64_t sub_10010E26C()
{
  return dispatch thunk of HGManager.configuration.getter();
}

uint64_t sub_10010E290()
{
  return dispatch thunk of HGManager.configuration.setter();
}

uint64_t (*sub_10010E2B4(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = dispatch thunk of HGManager.configuration.modify();
  return sub_10010E194;
}

void sub_10010E310(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t sub_10010E358()
{
  return dispatch thunk of HGManager.start()();
}

uint64_t sub_10010E37C()
{
  return dispatch thunk of HGManager.stop(with:)();
}

uint64_t sub_10010E3A8()
{
  return dispatch thunk of HGManager.muteAudioFeedback(setting:)();
}

unint64_t HGHeadGestureResult.description.getter()
{
  uint64_t v1 = 0x6E776F6E6B6E75;
  if ((char *)[v0 headGesture] - 1 > (char *)1)
  {
    unint64_t v6 = (unint64_t)[v0 headGesturePart] - 1;
    if (v6 < 4)
    {
      uint64_t v3 = 8 * v6;
      uint64_t v4 = &aNodup[8 * v6];
      uint64_t v5 = "";
      goto LABEL_6;
    }
LABEL_7:
    os_log_type_t v7 = (void *)0xE700000000000000;
    goto LABEL_8;
  }
  unint64_t v2 = (unint64_t)[v0 headGesture];
  if (v2 >= 3) {
    goto LABEL_7;
  }
  uint64_t v3 = 8 * v2;
  uint64_t v4 = &aBackgrounod[8 * v2];
  uint64_t v5 = "nd";
LABEL_6:
  uint64_t v1 = *(void *)v4;
  os_log_type_t v7 = *(void **)&v5[v3];
LABEL_8:
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = v1;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

BOOL HGHeadGesture.isValid.getter(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t HGHeadGesture.description.getter(unint64_t a1)
{
  if (a1 > 2) {
    return 0x6E776F6E6B6E75;
  }
  else {
    return *(void *)&aBackgrounod[8 * a1];
  }
}

uint64_t HGHeadGesturePart.description.getter(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return 0x6E776F6E6B6E75;
  }
  else {
    return *(void *)&aNodup[8 * a1 - 8];
  }
}

id sub_10010E5B4(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t HGHeadGestureResult.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = 0x6E776F6E6B6E75;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[0] = 0;
  v29[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(72);
  v7._uint64_t countAndFlagsBits = 0xD000000000000015;
  v7._object = (void *)0x800000010015D3E0;
  String.append(_:)(v7);
  unint64_t v8 = (unint64_t)[v0 headGesture];
  if (v8 > 2)
  {
    unint64_t v11 = 0xE700000000000000;
    uint64_t v10 = 0x6E776F6E6B6E75;
  }
  else
  {
    uint64_t v9 = 8 * v8;
    uint64_t v10 = *(void *)&aBackgrounod[8 * v8];
    unint64_t v11 = *(void *)&aNd[v9];
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x6469666E6F43202CLL;
  v13._object = (void *)0xEE00203A65636E65;
  String.append(_:)(v13);
  id v14 = [v0 avgConfidence];
  id v15 = [v14 description];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);

  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x7473656D6954202CLL;
  v20._object = (void *)0xED0000203A706D61;
  String.append(_:)(v20);
  id v21 = [v1 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10010FC18(&qword_1001F04C0, (void (*)(uint64_t))&type metadata accessor for Date);
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v23._object = (void *)0x800000010015D400;
  v23._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v23);
  unint64_t v24 = (unint64_t)[v1 headGesturePart] - 1;
  if (v24 > 3)
  {
    uint64_t v26 = (void *)0xE700000000000000;
  }
  else
  {
    uint64_t v25 = 8 * v24;
    uint64_t v2 = *(void *)&aNodup[v25];
    uint64_t v26 = *(void **)&aShakelefshaker[v25 + 16];
  }
  v27._uint64_t countAndFlagsBits = v2;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  return v29[0];
}

uint64_t HGHeadGesturePart.eventUsage.getter(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  uint64_t result = 3;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 4;
      break;
    case 2:
      uint64_t result = 5;
      break;
    case 3:
      uint64_t result = 6;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

BOOL HGHeadGestureResult.isGesture.getter()
{
  return (char *)[v0 headGesture] - 1 < (char *)2;
}

BOOL HGHeadGesturePart.isValid.getter(uint64_t a1)
{
  return a1 != 0;
}

uint64_t sub_10010E9F4()
{
  return HGHeadGesture.description.getter(*v0);
}

uint64_t sub_10010E9FC()
{
  return HGHeadGesturePart.description.getter(*v0);
}

uint64_t sub_10010EA04(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1000EED9C((uint64_t *)&unk_1001F0600);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      Swift::UInt v28 = *(void *)(*(void *)(v5 + 48) + v27);
      id v29 = *(void **)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        id v30 = v29;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

id sub_10010ECD8()
{
  uint64_t v1 = v0;
  sub_1000EED9C((uint64_t *)&unk_1001F0600);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_10010EE7C(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000EED9C((uint64_t *)&unk_1001F0600);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  uint64_t v5 = (void *)a1[5];
  unint64_t result = sub_1000F7864(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v17 = v5;
    return (unint64_t)v3;
  }
  int64_t v8 = (void **)(a1 + 7);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v4;
    *(void *)(v3[7] + v9) = v5;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    void v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    int64_t v13 = v8 + 2;
    Swift::UInt v4 = (Swift::UInt)*(v8 - 1);
    unint64_t v14 = *v8;
    id v15 = v5;
    unint64_t result = sub_1000F7864(v4);
    int64_t v8 = v13;
    uint64_t v5 = v14;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t _s15assistivetouchd17SCATAirPodsSourceC6update12withSwitches6recipeyShySo8AXSwitchCGSg_So0I6RecipeCSgtF_0(uint64_t a1)
{
  unint64_t v57 = sub_10010EE7C(&_swiftEmptyArrayStorage);
  if (a1)
  {
    id v53 = v1;
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      sub_1000F00F4(0, (unint64_t *)&qword_1001F02D0);
      sub_1000FA33C();
      Set.Iterator.init(_cocoa:)();
      a1 = v58;
      uint64_t v55 = v59;
      uint64_t v4 = v60;
      uint64_t v3 = v61;
      unint64_t v5 = v62;
    }
    else
    {
      uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v55 = a1 + 56;
      uint64_t v4 = ~v6;
      uint64_t v7 = -v6;
      if (v7 < 64) {
        uint64_t v8 = ~(-1 << v7);
      }
      else {
        uint64_t v8 = -1;
      }
      unint64_t v5 = v8 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain();
      uint64_t v3 = 0;
    }
    uint64_t v52 = v4;
    int64_t v54 = (unint64_t)(v4 + 64) >> 6;
    uint64_t v9 = &selRef_setToValue_;
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_12;
    }
LABEL_30:
    if (__CocoaSet.Iterator.next()())
    {
      sub_1000F00F4(0, (unint64_t *)&qword_1001F02D0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v16 = (id)v56[0];
      swift_unknownObjectRelease();
      uint64_t v12 = v3;
      uint64_t v10 = v5;
      if (v56[0])
      {
        while (1)
        {
          id v17 = objc_msgSend(v16, v9[222], v52);
          if (!v17)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_11:

            swift_bridgeObjectRelease();
            uint64_t v3 = v12;
            unint64_t v5 = v10;
            if (a1 < 0) {
              goto LABEL_30;
            }
            goto LABEL_12;
          }
          int64_t v18 = v17;
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v21 = v20;

          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          if (!v21) {
            goto LABEL_11;
          }
          if (v19 == v22 && v21 == v23) {
            break;
          }
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v24) {
            goto LABEL_38;
          }

LABEL_50:
          uint64_t v3 = v12;
          unint64_t v5 = v10;
          uint64_t v9 = &selRef_setToValue_;
          if (a1 < 0) {
            goto LABEL_30;
          }
LABEL_12:
          if (v5)
          {
            uint64_t v10 = (v5 - 1) & v5;
            unint64_t v11 = __clz(__rbit64(v5)) | (v3 << 6);
            uint64_t v12 = v3;
          }
          else
          {
            int64_t v13 = v3 + 1;
            if (__OFADD__(v3, 1)) {
              goto LABEL_57;
            }
            if (v13 >= v54) {
              goto LABEL_52;
            }
            unint64_t v14 = *(void *)(v55 + 8 * v13);
            uint64_t v12 = v3 + 1;
            if (!v14)
            {
              uint64_t v12 = v3 + 2;
              if (v3 + 2 >= v54) {
                goto LABEL_52;
              }
              unint64_t v14 = *(void *)(v55 + 8 * v12);
              if (!v14)
              {
                uint64_t v12 = v3 + 3;
                if (v3 + 3 >= v54) {
                  goto LABEL_52;
                }
                unint64_t v14 = *(void *)(v55 + 8 * v12);
                if (!v14)
                {
                  uint64_t v12 = v3 + 4;
                  if (v3 + 4 >= v54) {
                    goto LABEL_52;
                  }
                  unint64_t v14 = *(void *)(v55 + 8 * v12);
                  if (!v14)
                  {
                    uint64_t v15 = v3 + 5;
                    while (v54 != v15)
                    {
                      unint64_t v14 = *(void *)(v55 + 8 * v15++);
                      if (v14)
                      {
                        uint64_t v12 = v15 - 1;
                        goto LABEL_27;
                      }
                    }
                    goto LABEL_52;
                  }
                }
              }
            }
LABEL_27:
            uint64_t v10 = (v14 - 1) & v14;
            unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
          }
          id v16 = *(id *)(*(void *)(a1 + 48) + 8 * v11);
          if (!v16) {
            goto LABEL_52;
          }
        }
        swift_bridgeObjectRelease_n();
LABEL_38:
        id v25 = [v16 accessibilityEventUsage];
        id v26 = v16;
        unint64_t v27 = v57;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v56[0] = v57;
        unint64_t v57 = 0x8000000000000000;
        unint64_t v30 = sub_1000F7864((Swift::UInt)v25);
        uint64_t v31 = *(void *)(v56[0] + 16);
        BOOL v32 = (v29 & 1) == 0;
        uint64_t v33 = v31 + v32;
        if (__OFADD__(v31, v32))
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        char v34 = v29;
        if (*(void *)(v27 + 24) >= v33)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_10010ECD8();
          }
        }
        else
        {
          sub_10010EA04(v33, isUniquelyReferenced_nonNull_native);
          unint64_t v35 = sub_1000F7864((Swift::UInt)v25);
          if ((v34 & 1) != (v36 & 1)) {
            goto LABEL_61;
          }
          unint64_t v30 = v35;
        }
        int64_t v37 = (void *)v56[0];
        if (v34)
        {
          uint64_t v38 = *(void *)(v56[0] + 56);

          *(void *)(v38 + 8 * v30) = v26;
        }
        else
        {
          *(void *)(v56[0] + 8 * (v30 >> 6) + 64) |= 1 << v30;
          *(void *)(v37[6] + 8 * v30) = v25;
          *(void *)(v37[7] + 8 * v30) = v26;
          uint64_t v39 = v37[2];
          BOOL v40 = __OFADD__(v39, 1);
          uint64_t v41 = v39 + 1;
          if (v40) {
            goto LABEL_58;
          }
          v37[2] = v41;
        }
        unint64_t v57 = (unint64_t)v37;

        swift_bridgeObjectRelease();
        goto LABEL_50;
      }
    }
LABEL_52:
    sub_1000FBFF0();
    if (qword_1001F3400 != -1) {
LABEL_59:
    }
      swift_once();
    uint64_t v42 = type metadata accessor for Logger();
    sub_1000E881C(v42, (uint64_t)qword_1001F3988);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315138;
      swift_beginAccess();
      type metadata accessor for AXHeadGesturesEventUsage(0);
      sub_1000F00F4(0, (unint64_t *)&qword_1001F02D0);
      sub_10010FC18(&qword_1001F05F0, type metadata accessor for AXHeadGesturesEventUsage);
      swift_bridgeObjectRetain();
      uint64_t v46 = Dictionary.description.getter();
      unint64_t v48 = v47;
      swift_bridgeObjectRelease();
      sub_1000EDB70(v46, v48, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Updated Actions: %s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t v49 = swift_bridgeObjectRetain();
    sub_10010BFC0(v49);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v53 setActions:isa];

    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
LABEL_61:
    type metadata accessor for AXHeadGesturesEventUsage(0);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  return result;
}

void _s15assistivetouchd17SCATAirPodsSourceC17_didReceiveAction14withIdentifier5start15ignoreInputHoldySo14SCATActionItemC_S2btF_0(void *a1)
{
  uint64_t v2 = v1;
  if ([v2 delegate])
  {
    unint64_t v30 = &OBJC_PROTOCOL____TtP15assistivetouchd30SCATAirPodsInputSourceDelegate__0;
    uint64_t v4 = swift_dynamicCastObjCProtocolConditional();
    if (v4 && (v5 = (void *)v4, (id v6 = [v2 queue]) != 0))
    {
      uint64_t v7 = v6;
      if ([v5 respondsToSelector:"airPodsInputSource:didReceiveActionWithIdentifier:start:"])
      {
        if (qword_1001F3400 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_1000E881C(v8, (uint64_t)qword_1001F3988);
        id v9 = a1;
        swift_unknownObjectRetain_n();
        id v10 = v9;
        unint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 134218242;
          [v10 action];

          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v13 + 12) = 2080;
          uint64_t v29 = (uint64_t)v5;
          swift_unknownObjectRetain();
          sub_1000EED9C(&qword_1001F05F8);
          uint64_t v14 = String.init<A>(describing:)();
          uint64_t v29 = sub_1000EDB70(v14, v15, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "Sending action: %ld to delegate: %s", (uint8_t *)v13, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_unknownObjectRelease_n();
        }
        char v24 = (void *)swift_allocObject();
        v24[2] = v5;
        v24[3] = v2;
        v24[4] = v10;
        aBlock[4] = (uint64_t)sub_10010FD08;
        aBlock[5] = (uint64_t)v24;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        uint64_t aBlock[2] = (uint64_t)sub_1000E98D0;
        aBlock[3] = (uint64_t)&unk_1001AFF08;
        id v25 = _Block_copy(aBlock);
        id v26 = v10;
        swift_unknownObjectRetain();
        id v27 = v2;
        swift_release();
        [v7 performAsynchronousWritingBlock:v25];
        swift_unknownObjectRelease();

        _Block_release(v25);
      }
      else
      {
        if (qword_1001F3400 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_1000E881C(v16, (uint64_t)qword_1001F3988);
        id v17 = a1;
        swift_unknownObjectRetain_n();
        id v18 = v17;
        uint64_t v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v20))
        {
          uint64_t v21 = swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v21 = 134218242;
          [v18 action];

          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v21 + 12) = 2080;
          uint64_t v29 = (uint64_t)v5;
          swift_unknownObjectRetain();
          sub_1000EED9C(&qword_1001F05F8);
          uint64_t v22 = String.init<A>(describing:)();
          uint64_t v29 = sub_1000EDB70(v22, v23, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to send action: %ld to delegate: %s", (uint8_t *)v21, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease_n();
        }
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void type metadata accessor for HGHeadGesturePart(uint64_t a1)
{
}

void type metadata accessor for HGHeadGesture(uint64_t a1)
{
}

void type metadata accessor for AXHeadGesturesEventUsage(uint64_t a1)
{
}

uint64_t sub_10010FC18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10010FC60(uint64_t a1)
{
  uint64_t v2 = sub_1000EED9C(&qword_1001EFD18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010FCC0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_10010FD08()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  id v3 = [*(id *)(v0 + 32) action];

  return [v1 airPodsInputSource:v2 didReceiveActionWithIdentifier:v3 start:1];
}

uint64_t sub_10010FD68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10010FD78()
{
  return swift_release();
}

uint64_t sub_10010FD80()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_10010FDC0()
{
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  if (qword_1001F3400 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_1000E881C(v3, (uint64_t)qword_1001F3988);
  id v4 = v2;
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    [v4 action];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "sending switch control action: %ld", v7, 0xCu);
    swift_slowDealloc();
  }
  else
  {
  }
  return [v1 _didReceiveActionWithIdentifier:v4 start:1 ignoreInputHold:1];
}

uint64_t sub_10010FF24()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010FF5C()
{
  uint64_t v1 = (unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC15assistivetouchd17SCATAirPodsSource_isSimulatingLongPress);
  swift_beginAccess();
  uint64_t v2 = *v1;
  unsigned char *v1 = 0;
  return sub_10010AFCC(v2);
}

uint64_t sub_10010FFB0()
{
  return sub_10010FC18(&qword_1001F0618, type metadata accessor for AXHeadGesturesEventUsage);
}

id sub_100110010(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___HNDEyeTrackingCoordinator_displayManager] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t type metadata accessor for EyeTrackingCoordinator()
{
  return self;
}

void sub_1001100DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR___HNDEyeTrackingCoordinator_displayManager;
  [*(id *)(v0 + OBJC_IVAR___HNDEyeTrackingCoordinator_displayManager) willShowCalibrationUI];
  id v3 = [*(id *)(v0 + v2) window];
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v4 = v3;
  id v5 = [v3 rootViewController];

  if (!v5) {
    return;
  }
  os_log_type_t v6 = *(void **)(v1 + v2);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  objc_allocWithZone((Class)type metadata accessor for CalibrationViewController());
  id v7 = v6;
  uint64_t v8 = (void *)CalibrationViewController.init(delegate:dismissCompletion:)();
  id v9 = [v8 view];
  if (!v9)
  {
LABEL_7:
    __break(1u);
    return;
  }
  id v10 = v9;
  [v9 setUserInteractionEnabled:1];

  [v8 setModalPresentationStyle:0];
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v13[4] = sub_10011031C;
  void v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  void v13[2] = sub_1000E98D0;
  v13[3] = &unk_1001B0018;
  os_log_type_t v12 = _Block_copy(v13);
  swift_release();
  [v5 presentViewController:v8 animated:1 completion:v12];
  _Block_release(v12);
}

uint64_t sub_1001102D8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100110310()
{
}

void sub_10011031C()
{
}

uint64_t sub_100110328(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100110338()
{
  return swift_release();
}

void sub_100110388()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR___HNDEyeTrackingCoordinator_displayManager) window];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [v1 rootViewController];

    if (v3)
    {
      id v6 = [v3 presentedViewController];

      if (v6)
      {
        type metadata accessor for CalibrationViewController();
        if (swift_dynamicCastClass())
        {
          uint64_t v4 = swift_allocObject();
          swift_unknownObjectWeakInit();
          aBlock[4] = sub_100110310;
          aBlock[5] = v4;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          uint64_t aBlock[2] = sub_1000E98D0;
          aBlock[3] = &unk_1001B0040;
          id v5 = _Block_copy(aBlock);
          swift_release();
          [v6 dismissViewControllerAnimated:1 completion:v5];

          _Block_release(v5);
        }
        else
        {
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100110520(SEL *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    id v4 = *(id *)(Strong + OBJC_IVAR___HNDEyeTrackingCoordinator_displayManager);

    [v4 *a1];
  }
}

id sub_100110618()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EyeTrackingCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

int main(int argc, const char **argv, const char **envp)
{
  int v3 = static CommandLine.argc.getter();
  id v4 = (char **)static CommandLine.unsafeArgv.getter();
  sub_100110730();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v6 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for ApplicationDelegate();
  id v7 = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v8 = NSStringFromClass(v7);
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  UIApplicationMain(v3, v4, v6, v8);

  return 0;
}

unint64_t sub_100110730()
{
  unint64_t result = qword_1001EFC50;
  if (!qword_1001EFC50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001EFC50);
  }
  return result;
}

uint64_t type metadata accessor for ApplicationDelegate()
{
  return self;
}

id sub_1001109A8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplicationDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1001109EC()
{
  static os_log_type_t.default.getter();
  id v1 = (id)AXLogCommon();
  if (v1)
  {
    objc_super v2 = v1;
    sub_1000EED9C(&qword_1001EFC38);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_100197AA0;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_1000FCCC0();
    *(void *)(v3 + 32) = 0x2928706F7473;
    *(void *)(v3 + 40) = 0xE600000000000000;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    [v0 setKeepAlive:0];
    [*(id *)&v0[OBJC_IVAR____TtC15assistivetouchd19ApplicationDelegate_runtimeManager] cleanupRuntime];
    id v4 = [self sharedApplication];
    [v4 terminateWithSuccess];
  }
  else
  {
    __break(1u);
  }
}

void *sub_100110BC0()
{
  id v1 = (void **)(v0 + OBJC_IVAR___HNDSpringAnimationFactory_timingFunction);
  swift_beginAccess();
  objc_super v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_100110C70(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___HNDSpringAnimationFactory_timingFunction);
  swift_beginAccess();
  id v4 = *v3;
  *id v3 = a1;
}

uint64_t (*sub_100110CC4())()
{
  return j__swift_endAccess;
}

id sub_100110D20()
{
  uint64_t v1 = OBJC_IVAR___HNDSpringAnimationFactory____lazy_storage___springAnimation;
  objc_super v2 = *(void **)(v0 + OBJC_IVAR___HNDSpringAnimationFactory____lazy_storage___springAnimation);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___HNDSpringAnimationFactory____lazy_storage___springAnimation);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)CASpringAnimation) init];
    [v4 setMass:*(double *)(v0 + OBJC_IVAR___HNDSpringAnimationFactory_mass)];
    [v4 setStiffness:*(double *)(v0 + OBJC_IVAR___HNDSpringAnimationFactory_stiffness)];
    [v4 setDamping:*(double *)(v0 + OBJC_IVAR___HNDSpringAnimationFactory_damping)];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    objc_super v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t type metadata accessor for SpringAnimationFactory()
{
  return self;
}

id sub_100110F3C()
{
  id result = (id)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC0))();
  if (!result)
  {
    static os_log_type_t.info.getter();
    id result = (id)ASTLogCommon();
    if (result)
    {
      objc_super v2 = result;
      os_log(_:dso:log:_:_:)();

      return [objc_allocWithZone((Class)CAMediaTimingFunction) init];
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

id sub_100111110()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpringAnimationFactory();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_100111190()
{
  uint64_t v1 = OBJC_IVAR____TtC15assistivetouchd12ZoomLensView____lazy_storage___zoomReplicatorLayer;
  objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC15assistivetouchd12ZoomLensView____lazy_storage___zoomReplicatorLayer);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15assistivetouchd12ZoomLensView____lazy_storage___zoomReplicatorLayer);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)CAReplicatorLayer) init];
    [v4 setAllowsHitTesting:0];
    [v4 setInstanceCount:2];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    objc_super v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_10011122C()
{
  uint64_t v1 = OBJC_IVAR____TtC15assistivetouchd12ZoomLensView____lazy_storage___zoomBackdropLayer;
  objc_super v2 = *(void **)(v0 + OBJC_IVAR____TtC15assistivetouchd12ZoomLensView____lazy_storage___zoomBackdropLayer);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15assistivetouchd12ZoomLensView____lazy_storage___zoomBackdropLayer);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)CABackdropLayer) init];
    [v4 setEnabled:1];
    [v4 setAllowsHitTesting:1];
    [v4 setMasksToBounds:1];
    NSString v5 = String._bridgeToObjectiveC()();
    [v4 setGroupName:v5];

    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    objc_super v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_10011130C(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return objc_msgSend(v9, "initWithFrame:", a1, a2, a3, a4);
}

char *sub_100111370(double a1, double a2, double a3, double a4)
{
  NSString v5 = v4;
  Objectint Type = (objc_class *)swift_getObjectType();
  v4[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomStatus] = 0;
  id v10 = &v4[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_lookAtPoint];
  *id v10 = 0;
  v10[1] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_replicatorView] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomFactor] = 0x3FF0000000000000;
  *(void *)&v4[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView____lazy_storage___zoomReplicatorLayer] = 0;
  *(void *)&v4[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView____lazy_storage___zoomBackdropLayer] = 0;
  uint64_t v11 = OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomLayerView;
  id v12 = objc_allocWithZone((Class)UIView);
  uint64_t v13 = v4;
  id v14 = objc_msgSend(v12, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  unint64_t v15 = self;
  id v16 = [v15 orangeColor];
  id v17 = [v16 colorWithAlphaComponent:0.5];

  [v14 setBackgroundColor:v17];
  *(void *)&v5[v11] = v14;
  uint64_t v18 = OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_backdropLayerView;
  id v19 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  id v20 = [v15 blueColor];
  id v21 = [v20 colorWithAlphaComponent:0.5];

  [v19 setBackgroundColor:v21];
  *(void *)&v13[v18] = v19;
  id v22 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", a1, a2, a3, a4);
  *(void *)&v13[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_sourceViewBeingReplicated] = v22;
  id v23 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", a1, a2, a3, a4);
  *(void *)&v13[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomView] = v23;

  v36.receiver = v13;
  v36.super_class = ObjectType;
  char v24 = (char *)objc_msgSendSuper2(&v36, "initWithFrame:", a1, a2, a3, a4);
  id v25 = [v15 clearColor];
  [v24 setBackgroundColor:v25];

  [v24 setClipsToBounds:1];
  uint64_t v26 = OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomView;
  id v27 = *(void **)&v24[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomView];
  [v24 addSubview:v27];
  id v28 = sub_100111190();
  [v27 frame];
  [v28 frame];
  objc_msgSend(v28, "setFrame:");

  id v29 = [*(id *)&v24[v26] layer];
  id v30 = sub_100111190();
  [v29 addSublayer:v30];

  id v31 = sub_10011122C();
  [*(id *)&v24[v26] frame];
  [v31 frame];
  objc_msgSend(v31, "setFrame:");

  id v32 = sub_100111190();
  id v33 = sub_10011122C();
  [v32 addSublayer:v33];

  return v24;
}

void sub_100111790(void (*a1)(void), double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  *(unsigned char *)(v7 + OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomStatus) = 1;
  sub_100111814(1, a2, a3, a4, a5, a6, a7, 3.0);
  id v9 = *(id *)(v7 + OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_sourceViewBeingReplicated);
  a1();
}

void sub_100111814(char a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8)
{
  uint64_t v9 = v8;
  uint64_t v17 = OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomFactor;
  double v118 = *(double *)(v8 + OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomFactor);
  *(double *)(v8 + OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomFactor) = a8;
  AX_CGRectGetCenter();
  double v138 = v19;
  double v140 = v18;
  double v20 = a2 - v18;
  double v21 = a3 - v19;
  double v22 = *(double *)(v8 + v17);
  CGFloat v23 = a6 / v22;
  CGFloat v135 = a7 / v22;
  v162.origin.CGFloat x = a4;
  v162.origin.double y = a5;
  v162.size.CGFloat width = a6;
  v162.size.double height = a7;
  double v24 = (CGRectGetWidth(v162) - v23) * 0.5;
  double v130 = a4;
  double v132 = a5;
  v163.origin.CGFloat x = a4;
  v163.origin.double y = a5;
  double v25 = a6;
  v163.size.CGFloat width = a6;
  point2.CGFloat x = a7;
  v163.size.double height = a7;
  double v26 = CGRectGetHeight(v163) - v135;
  double v27 = v26 * 0.5;
  double v28 = -v24;
  if (v20 >= -v24) {
    double v28 = v20;
  }
  if (v24 >= v20) {
    double v29 = v28;
  }
  else {
    double v29 = v24;
  }
  double v30 = -(v26 * 0.5);
  if (v21 >= v30) {
    double v30 = v21;
  }
  if (v27 >= v21) {
    double v31 = v30;
  }
  else {
    double v31 = v27;
  }
  uint64_t v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v32;
  *(unsigned char *)(v33 + 24) = a8 <= 1.0;
  swift_retain();
  if ((a1 & 1) == 0)
  {
    id v34 = sub_100111190();
    [v34 removeAllAnimations];
  }
  unint64_t v35 = self;
  [v35 begin];
  [v35 setDisableActions:1];
  *(void *)&aBlock.CGFloat m21 = sub_1001126E8;
  *(void *)&aBlock.CGFloat m22 = v33;
  *(void *)&aBlock.CGFloat m11 = _NSConcreteStackBlock;
  *(void *)&aBlock.CGFloat m12 = 1107296256;
  *(void *)&aBlock.CGFloat m13 = sub_1000E98D0;
  *(void *)&aBlock.CGFloat m14 = &unk_1001B00B8;
  objc_super v36 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v35 setCompletionBlock:v36];
  _Block_release(v36);
  if (a8 > 1.0)
  {
    id v37 = sub_10011122C();
    [v37 setEnabled:1];
  }
  double v38 = *(double *)(v9 + v17);
  CGFloat v39 = v25 / v38;
  double v128 = v31;
  double v122 = v140 + v29;
  double v124 = v138 + v31;
  CGFloat v40 = point2.x / v38;
  v164.origin.CGFloat x = 0.0;
  v164.origin.double y = 0.0;
  v164.size.CGFloat width = v39;
  v164.size.double height = v40;
  double v41 = CGRectGetWidth(v164) * 0.5;
  double v126 = v29;
  double v42 = v140 + v29 - v41;
  v165.origin.CGFloat x = 0.0;
  v165.origin.double y = 0.0;
  v165.size.CGFloat width = v39;
  v165.size.double height = v40;
  double v43 = CGRectGetHeight(v165) * 0.5;
  double v44 = v138 + v31 - v43;
  v166.origin.CGFloat x = 0.0;
  v166.origin.double y = 0.0;
  v166.size.CGFloat width = v39;
  v166.size.double height = v40;
  double Width = CGRectGetWidth(v166);
  v167.origin.CGFloat x = 0.0;
  v167.origin.double y = 0.0;
  double v134 = v40;
  double v136 = v39;
  v167.size.CGFloat width = v39;
  v167.size.double height = v40;
  double Height = CGRectGetHeight(v167);
  double v47 = vabdd_f64(v122, v41);
  double v48 = -0.0;
  if (v42 >= v130) {
    double v47 = -0.0;
  }
  double v49 = v126 + v47;
  if (v42 + Width <= v25) {
    double v50 = 0.0;
  }
  else {
    double v50 = v42 - Width - v25;
  }
  double v51 = v49 - v50;
  double v52 = vabdd_f64(v124, v43);
  if (v44 < v132) {
    double v48 = v52;
  }
  double v53 = v128 + v48;
  double v54 = v44 + Height;
  if (v54 <= point2.x) {
    double v55 = 0.0;
  }
  else {
    double v55 = v54 - point2.x;
  }
  long long v56 = *(_OWORD *)&CATransform3DIdentity.m13;
  *(_OWORD *)&aBlock.CGFloat m11 = *(_OWORD *)&CATransform3DIdentity.m11;
  *(_OWORD *)&aBlock.CGFloat m13 = v56;
  long long v57 = *(_OWORD *)&CATransform3DIdentity.m23;
  double v58 = v53 - v55;
  point2.CGFloat x = v140 + v51;
  double v59 = v138 + v58;
  *(_OWORD *)&aBlock.CGFloat m21 = *(_OWORD *)&CATransform3DIdentity.m21;
  *(_OWORD *)&aBlock.CGFloat m23 = v57;
  long long v60 = *(_OWORD *)&CATransform3DIdentity.m33;
  *(_OWORD *)&aBlock.CGFloat m31 = *(_OWORD *)&CATransform3DIdentity.m31;
  *(_OWORD *)&aBlock.CGFloat m33 = v60;
  long long v61 = *(_OWORD *)&CATransform3DIdentity.m43;
  *(_OWORD *)&aBlock.CGFloat m41 = *(_OWORD *)&CATransform3DIdentity.m41;
  *(_OWORD *)&aBlock.CGFloat m43 = v61;
  CATransform3DTranslate(&v158, &aBlock, -v51, -v58, 0.0);
  CGFloat v62 = *(double *)(v9 + v17);
  CATransform3D aBlock = v158;
  CATransform3DScale(&v158, &aBlock, v62, v62, 1.0);
  CGFloat m11 = v158.m11;
  CGFloat m12 = v158.m12;
  CGFloat m13 = v158.m13;
  CGFloat m14 = v158.m14;
  CGFloat m21 = v158.m21;
  CGFloat m23 = v158.m23;
  CGFloat m22 = v158.m22;
  CGFloat m31 = v158.m31;
  CGFloat m24 = v158.m24;
  CGFloat m33 = v158.m33;
  CGFloat m32 = v158.m32;
  CGFloat m41 = v158.m41;
  CGFloat m34 = v158.m34;
  CGFloat m43 = v158.m43;
  CGFloat m42 = v158.m42;
  CGFloat m44 = v158.m44;
  if (a1)
  {
    CGFloat v117 = v158.m21;
    NSString v68 = String._bridgeToObjectiveC()();
    uint64_t v69 = self;
    id v70 = [v69 animationWithKeyPath:v68];

    id v71 = sub_100111190();
    [v71 instanceTransform];

    Class isa = CATransform3D._bridgeToObjectiveC()().super.isa;
    [v70 setFromValue:isa];

    Class v73 = CATransform3D._bridgeToObjectiveC()().super.isa;
    [v70 setToValue:v73];

    [v70 setDuration:0.2];
    [v70 setDelegate:v9];
    [v70 setCumulative:1];
    id v74 = sub_100111190();
    NSString v75 = String._bridgeToObjectiveC()();
    [v74 addAnimation:v70 forKey:v75];

    double v76 = *(double *)(v9 + v17);
    if (v76 >= v118)
    {
      if (v76 != v118) {
        goto LABEL_32;
      }
      id v82 = sub_100111190();
      [v82 position];
      CGFloat v83 = v59;
      CGFloat v85 = v84;
      CGFloat v87 = v86;

      v160.CGFloat x = v85;
      double v59 = v83;
      v160.double y = v87;
      v161.CGFloat x = point2.x;
      v161.double y = v83;
      if (CGPointEqualToPoint(v160, v161)) {
        goto LABEL_32;
      }
      usleep(0x3E8u);
      NSString v88 = String._bridgeToObjectiveC()();
      id v78 = [v69 animationWithKeyPath:v88];

      id v89 = sub_100111190();
      [v89 position];

      double v59 = v83;
      Class v90 = CGPoint._bridgeToObjectiveC()().super.isa;
      [v78 setFromValue:v90];
    }
    else
    {
      NSString v77 = String._bridgeToObjectiveC()();
      id v78 = [v69 animationWithKeyPath:v77];

      id v79 = sub_100111190();
      [v79 position];

      Class v80 = CGPoint._bridgeToObjectiveC()().super.isa;
      [v78 setFromValue:v80];

      id v81 = sub_100111190();
      [v81 position];
    }
    Class v91 = CGPoint._bridgeToObjectiveC()().super.isa;
    [v78 setToValue:v91];

    [v78 setDuration:0.2];
    id v92 = sub_100111190();
    NSString v93 = String._bridgeToObjectiveC()();
    [v92 addAnimation:v78 forKey:v93];

LABEL_32:
    CGFloat m21 = v117;
  }
  v168.origin.CGFloat x = 0.0;
  v168.origin.double y = 0.0;
  v168.size.CGFloat width = v136;
  v168.size.double height = v134;
  if (!CGRectIsEmpty(v168))
  {
    id v94 = sub_100111190();
    objc_msgSend(v94, "setPosition:", point2.x, v59);

    id v95 = sub_100111190();
    objc_msgSend(v95, "setBounds:", 0.0, 0.0, v136, v134);

    id v96 = sub_10011122C();
    objc_msgSend(v96, "setBounds:", 0.0, 0.0, v136, v134);

    id v97 = sub_10011122C();
    v169.origin.CGFloat x = 0.0;
    v169.origin.double y = 0.0;
    v169.size.CGFloat width = v136;
    v169.size.double height = v134;
    CGFloat MidX = CGRectGetMidX(v169);
    v170.origin.CGFloat x = 0.0;
    v170.origin.double y = 0.0;
    v170.size.CGFloat width = v136;
    v170.size.double height = v134;
    v99.n128_u64[0] = CGRectGetMidY(v170);
    v100.n128_f64[0] = MidX;
    objc_msgSend(v97, "setPosition:", HeadTrackerAvailabilityDetail.rawValue.getter(v100, v99, v101, v102));

    id v103 = sub_100111190();
    point2.double y = m11;
    CGFloat v143 = m12;
    CGFloat v144 = m13;
    CGFloat v145 = m14;
    CGFloat v146 = m21;
    CGFloat v147 = m22;
    CGFloat v148 = m23;
    CGFloat v149 = m24;
    CGFloat v150 = m31;
    CGFloat v151 = m32;
    CGFloat v152 = m33;
    CGFloat v153 = m34;
    CGFloat v154 = m41;
    CGFloat v155 = m42;
    CGFloat v156 = m43;
    CGFloat v157 = m44;
    [v103 setInstanceTransform:&point2.y];

    id v104 = *(id *)(v9 + OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_sourceViewBeingReplicated);
    id v105 = sub_100111190();
    [v105 frame];
    double v107 = v106;
    double v109 = v108;
    double v111 = v110;
    double v113 = v112;

    objc_msgSend(v104, "setFrame:", v107, v109, v111, v113);
  }
  [v35 commit];
  if ((a1 & 1) != 0 || (swift_beginAccess(), (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) == 0))
  {
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v115 = (void *)Strong;
    id v116 = sub_10011122C();
    [v116 setEnabled:a8 > 1.0];
    swift_release();
    swift_release();
  }
}

void sub_1001122C0(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  *(unsigned char *)(v6 + OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomStatus) = 2;
  sub_100111814(1, 0.0, 0.0, a3, a4, a5, a6, 1.0);
}

void sub_1001124A0()
{
  v0[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomStatus] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_lookAtPoint];
  void *v1 = 0;
  v1[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_replicatorView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomFactor] = 0x3FF0000000000000;
  *(void *)&v0[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView____lazy_storage___zoomReplicatorLayer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15assistivetouchd12ZoomLensView____lazy_storage___zoomBackdropLayer] = 0;
  uint64_t v2 = OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_zoomLayerView;
  id v3 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  id v4 = self;
  id v5 = [v4 orangeColor];
  id v6 = [v5 colorWithAlphaComponent:0.5];

  [v3 setBackgroundColor:v6];
  *(void *)&v0[v2] = v3;
  uint64_t v7 = OBJC_IVAR____TtC15assistivetouchd12ZoomLensView_backdropLayerView;
  id v8 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  id v9 = [v4 blueColor];
  id v10 = [v9 colorWithAlphaComponent:0.5];

  [v8 setBackgroundColor:v10];
  *(void *)&v0[v7] = v8;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_100112678()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001126B0()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_1001126E8()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    id v4 = sub_10011122C();
    [v4 setEnabled:v1 ^ 1u];
  }
}

uint64_t sub_100112764(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100112774()
{
  return swift_release();
}

unint64_t sub_100112780()
{
  unint64_t result = qword_1001F08B0;
  if (!qword_1001F08B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001F08B0);
  }
  return result;
}

uint64_t type metadata accessor for ZoomLensView()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ZoomLensView.ZoomStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001128C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ZoomLensView.ZoomStatus()
{
  return &type metadata for ZoomLensView.ZoomStatus;
}

void *acm_mem_alloc_data(size_t size)
{
  unint64_t result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result) {
    qword_1001F3918 += size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1001F3918 - __n;
    if (qword_1001F3918 < __n) {
      uint64_t v4 = 0;
    }
    qword_1001F3918 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    qword_1001F3910 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    unsigned int v6 = "NULL";
    if (result) {
      uint64_t v7 = result;
    }
    else {
      uint64_t v7 = "NULL";
    }
    if (a4) {
      id v8 = a4;
    }
    else {
      id v8 = "NULL";
    }
    if (a6) {
      unsigned int v6 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_1001F3910, 0, qword_1001F3918, qword_1001F3920, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = qword_1001F3910 - a3;
    if (qword_1001F3910 < a3) {
      uint64_t v6 = 0;
    }
    qword_1001F3910 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v7 = "NULL";
    if (result) {
      id v8 = result;
    }
    else {
      id v8 = "NULL";
    }
    if (a4) {
      id v9 = a4;
    }
    else {
      id v9 = "NULL";
    }
    if (a6) {
      uint64_t v7 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_1001F3910, 0, qword_1001F3918, qword_1001F3920, v9, a5, v7);
  }
  return result;
}

uint64_t LibCall_ACMKernelControl_Block(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  size_t v5 = v4;
  uint64_t v7 = v6;
  int v9 = v8;
  uint64_t v11 = v10;
  id v12 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))v1;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl_Block");
  }
  uint64_t v17 = 0x2000;
  uint64_t v13 = LibCall_ACMKernelControl(v12, v11, v9, v7, v5, (uint64_t)v18, (uint64_t)&v17);
  if (v3)
  {
    if (v17) {
      id v14 = v18;
    }
    else {
      id v14 = 0;
    }
    (*(void (**)(uint64_t, unsigned char *))(v3 + 16))(v3, v14);
  }
  if (v13) {
    unsigned int v15 = 70;
  }
  else {
    unsigned int v15 = 10;
  }
  if (v15 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl_Block", (int)v13);
  }
  return v13;
}

uint64_t sub_100112C54(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1001F0941 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    double v19 = "ACMLib";
    __int16 v20 = 2080;
    double v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    uint64_t v14 = sub_100112E34();
    unsigned int v15 = 70;
    if (v14)
    {
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = sub_100113018(*a1, a2, a3, a4, a5, a6, a7);
      if (v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }
  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293;
  }
  if (v15 >= byte_1001F0941 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    double v19 = "ACMLib";
    __int16 v20 = 2080;
    double v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

uint64_t sub_100112E34()
{
  if (byte_1001F0941 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    int v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if (byte_1001F392C)
  {
    uint64_t v0 = 0;
  }
  else
  {
    CFDictionaryRef v1 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      unsigned int v4 = 70;
      uint64_t v0 = 4294967291;
      goto LABEL_10;
    }
    io_object_t v3 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_1001F3928);
    if (v0)
    {
      unsigned int v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_1001F392C = 1;
  }
  unsigned int v4 = 10;
LABEL_10:
  if (v4 >= byte_1001F0941 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    int v9 = "init";
    __int16 v10 = 2048;
    uint64_t v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_100113018(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1001F0941 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    double v25 = "ACMLib";
    __int16 v26 = 2080;
    double v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t inputStructCnt = 0;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    unsigned int v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293;
    }
    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(dword_1001F3928, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if (v17)
      {
        if (byte_1001F0941 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          double v25 = "ACMLib";
          __int16 v26 = 2080;
          double v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)double v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_1001F0941 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          double v25 = "ACMLib";
          __int16 v26 = 2080;
          double v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)double v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        uint64_t v18 = 0;
        if (a7) {
          *a7 = v22;
        }
      }
    }
    size_t v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if (v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }
  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291;
  }
  if (v20 >= byte_1001F0941 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    double v25 = "ACMLib";
    __int16 v26 = 2080;
    double v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)double v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMKernelControl(int a1)
{
  if (byte_1001F0941 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    __int16 v8 = "ACMKernelControl";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v2 = LibCall_ACMKernelControl_Block((uint64_t)sub_100112C54);
  if (v2) {
    unsigned int v3 = 70;
  }
  else {
    unsigned int v3 = 10;
  }
  if (v3 >= byte_1001F0941 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    __int16 v8 = "ACMKernelControl";
    __int16 v9 = 2048;
    uint64_t v10 = (int)v2;
    __int16 v11 = 1024;
    int v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, code=%u.\n", buf, 0x26u);
  }
  return v2;
}

unsigned char *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  }
  int v12 = 0;
  if (a5) {
    BOOL v13 = a4 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)int v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  }
  return v12;
}

uint64_t LibCall_ACMKernelControl(uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t), uint64_t a2, int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v13 = a1;
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl");
  }
  if (!v13) {
    goto LABEL_16;
  }
  BOOL v14 = a5 != 0;
  if (a4) {
    BOOL v14 = a5 - 4097 < 0xFFFFFFFFFFFFF000;
  }
  if (v14)
  {
LABEL_16:
    unsigned int v18 = 70;
    uint64_t v17 = 4294967293;
  }
  else
  {
    uint64_t v20 = (uint64_t)&v20;
    __chkstk_darwin(a1);
    unsigned int v15 = (_DWORD *)((char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0));
    _DWORD *v15 = a3;
    size_t v16 = v15 + 1;
    if (a5)
    {
      memcpy(v15 + 1, a4, a5);
      size_t v16 = (_DWORD *)((char *)v16 + a5);
    }
    if (v16 != (_DWORD *)((char *)v15 + a5 + 4)) {
      sub_10011387C();
    }
    uint64_t v17 = v13(a2, 26, 0, (char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0), a5 + 4, a6, a7);
    if (v17) {
      unsigned int v18 = 70;
    }
    else {
      unsigned int v18 = 10;
    }
  }
  if (v18 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl", (int)v17);
  }
  return v17;
}

void sub_10011387C()
{
  __assert_rtn("LibCall_ACMKernelControl", "LibCall.c", 373, "commandCursor == commandBuffer + sizeof(commandBuffer)");
}

void sub_1001138A8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Removing devices: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100113920(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Device: %@,\ndidPostEvent: %@", (uint8_t *)&v3, 0x16u);
}

void sub_1001139A8(os_log_t log)
{
  *(_WORD *)CFDictionaryRef v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to register for backboard orientation notification", v1, 2u);
}

void sub_1001139EC(uint64_t a1, NSObject *a2)
{
  int v3 = NSStringFromBOOL();
  int v4 = 138412290;
  __int16 v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "MotionTrackingInput isTrackingInputActive: %@", (uint8_t *)&v4, 0xCu);
}

void sub_100113A88(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error initializing IPC Service with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100113B00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100113B38(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100113B70(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100113BA8()
{
  sub_10001FFB0();
  sub_10001FF94((void *)&_mh_execute_header, v0, v1, "Tried to create the rocker twice.", v2, v3, v4, v5, v6);
}

void sub_100113BDC()
{
  sub_10001FFB0();
  sub_10001FF94((void *)&_mh_execute_header, v0, v1, "Should not be possible to update the current point to the null point.", v2, v3, v4, v5, v6);
}

void sub_100113C10()
{
  sub_10001FFB0();
  sub_10001FF94((void *)&_mh_execute_header, v0, v1, "Should not be possible to update the primary finger point to the null point.", v2, v3, v4, v5, v6);
}

void sub_100113C44()
{
  sub_10001FFB0();
  sub_10001FF94((void *)&_mh_execute_header, v0, v1, "Unexpectedly tried to present large content viewer when it was already presented.", v2, v3, v4, v5, v6);
}

void sub_100113C78()
{
  sub_10001FFB0();
  sub_10001FF94((void *)&_mh_execute_header, v0, v1, "Unexpectedly tried to present large content viewer with no item.", v2, v3, v4, v5, v6);
}

void sub_100113D00(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not check into com.apple.assistivetouchd: %d", (uint8_t *)v2, 8u);
}

void sub_100113D78()
{
  sub_10001FFB0();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "AST Windows: displayManager has ambiguous orientation, restart _displayManager in 0.5s", v1, 2u);
}

void sub_100113DB8(id *a1, NSObject *a2)
{
  uint64_t v4 = [*a1 fingerController];
  uint64_t v5 = [*a1 fingerController];
  uint8_t v6 = [v5 fingerModels];
  int v7 = 138412546;
  __int16 v8 = v4;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Finger models should not be 0: %@ - %@", (uint8_t *)&v7, 0x16u);
}

void sub_100113E90()
{
  sub_10001FFB0();
  sub_10001FF94((void *)&_mh_execute_header, v0, v1, "Tried to adjust for screen scale, but it was not yet ready", v2, v3, v4, v5, v6);
}

void sub_100113EC4()
{
  sub_10001FFB0();
  sub_10001FF94((void *)&_mh_execute_header, v0, v1, "Should not have tried to avoid a zero display corner radius.", v2, v3, v4, v5, v6);
}

void sub_100113EF8()
{
  sub_10001FFB0();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Starting dwell while finger content view isn't active! We should investigate this", v1, 2u);
}

void sub_100113F38(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "handleButtonEvent=%@", (uint8_t *)&v2, 0xCu);
}

void sub_100113FB0()
{
  sub_10001FFB0();
  sub_10001FF94((void *)&_mh_execute_header, v0, v1, "Attempted to lift fingers up for primary button twice in a row.", v2, v3, v4, v5, v6);
}

void sub_100113FE4(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not perform AXAction, %d, timeout reached.", (uint8_t *)v2, 8u);
}

void sub_10011405C(uint64_t *a1, int a2, os_log_t log)
{
  uint64_t v3 = *a1;
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Can't open device: %@, result: %d", (uint8_t *)&v4, 0x12u);
}

void sub_1001140E8()
{
  sub_10001FFB0();
  sub_10000EAC4((void *)&_mh_execute_header, v0, v1, "unable to attach session! Will retry shortly...", v2, v3, v4, v5, v6);
}

void sub_10011411C(void *a1, const char *a2, NSObject *a3)
{
  uint8_t v6 = objc_opt_class();
  id v7 = v6;
  int v8 = 138413058;
  __int16 v9 = v6;
  __int16 v10 = 2080;
  Name = sel_getName(a2);
  __int16 v12 = 1024;
  unsigned int v13 = [a1 _sessionState];
  __int16 v14 = 1024;
  unsigned int v15 = [a1 _desiredSessionState];
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "-[%@ %s]: current state: %d, desired: %d", (uint8_t *)&v8, 0x22u);
}

void sub_100114210()
{
  sub_10001FFB0();
  sub_10000EAC4((void *)&_mh_execute_header, v0, v1, "realloc failed. Expect pain soon.", v2, v3, v4, v5, v6);
}

void sub_100114244(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "BTLocalDeviceGetConnectedDevices failed: %d", (uint8_t *)v2, 8u);
}

void sub_1001142BC()
{
  sub_10001FFB0();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Finished disconnecting from BTSession", v1, 2u);
}

void sub_1001142FC()
{
  sub_10001FFB0();
  sub_10000EAC4((void *)&_mh_execute_header, v0, v1, "BTSession failed.", v2, v3, v4, v5, v6);
}

void sub_100114330(const char *a1, NSObject *a2)
{
  int v3 = 136315138;
  Name = sel_getName(a1);
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "BTDeviceGetAddressString failed in %s", (uint8_t *)&v3, 0xCu);
}

void sub_1001143BC()
{
  sub_10003C6C0();
  sub_10003C6D8((void *)&_mh_execute_header, v0, v1, "In sending custom message, failed to look up BT address %s: %d", v2, v3);
}

void sub_100114424(uint64_t a1, NSObject *a2)
{
  int v2 = *(_DWORD *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = 138412802;
  uint64_t v6 = v3;
  __int16 v7 = 1024;
  int v8 = v2;
  __int16 v9 = 2112;
  uint64_t v10 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Attempting to send custom message to device %@ type %d data %@", (uint8_t *)&v5, 0x1Cu);
}

void sub_1001144BC()
{
  sub_10003C6C0();
  sub_10003C6D8((void *)&_mh_execute_header, v0, v1, "In sending control message, failed to look up BT address %s: %d", v2, v3);
}

void sub_100114524(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 52);
  int v4 = *(_DWORD *)(a1 + 48);
  int v5 = 138412802;
  uint64_t v6 = v2;
  __int16 v7 = 1024;
  int v8 = v3;
  __int16 v9 = 1024;
  int v10 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Attempting to send configuration message to device %@ type %d value %u", (uint8_t *)&v5, 0x18u);
}

void sub_1001145BC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to query Local Auth Storage: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100114634()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"BOOL soft_AXWatchRemoteScreenIsTwiceFeatureOn(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"HNDUtilities.m", 37, @"%s", dlerror());

  __break(1u);
}

void sub_1001146AC()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"BOOL soft_AXWatchRemoteScreenIsPairedGizmoSupported(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"HNDUtilities.m", 38, @"%s", dlerror());

  __break(1u);
}

void sub_100114724(int a1, int a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 1024;
  int v5 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "unexpected no changes in up/down buttons! _lastButtonMask=%u, pointerButtonMask=%u", (uint8_t *)v3, 0xEu);
}

void sub_1001147AC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Only expected 0 or 1 down button: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100114824(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Only expected 0 or 1 up button: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10011489C(void *a1)
{
  int v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *AXWatchRemoteScreenServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"HNDUtilities.m", 36, @"%s", *a1);

  __break(1u);
}

void sub_10011491C(NSObject *a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  __int16 v14 = NSStringFromCGRect(*(CGRect *)&a2);
  v20.origin.CGFloat x = a6;
  v20.origin.double y = a7;
  v20.size.CGFloat width = a8;
  v20.size.double height = a9;
  unsigned int v15 = NSStringFromCGRect(v20);
  int v16 = 138412546;
  uint64_t v17 = v14;
  __int16 v18 = 2112;
  size_t v19 = v15;
  _os_log_fault_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_FAULT, "HNDRocker (frame: %@) is out of bounds from screen: %@", (uint8_t *)&v16, 0x16u);
}

void sub_100114A08(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "_centerBackButtonToView: viewForCentering is nil", v1, 2u);
}

void sub_100114A4C(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "!!!Error!!!!!: Touch events won't go through now! We tried to transition from menu to nubbit without disabling userInteraction on the _rockerDismiss view! Caller needs to make sure to properly call -[HNDDisplayManager showMenu:] before entering this function", v1, 2u);
}

void sub_100114A90(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 72);
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "No image found for imageName: %@", (uint8_t *)&v3, 0xCu);
}

void sub_100114B18(void *a1, NSObject *a2)
{
  int v3 = [a1 keyInfo];
  int v4 = 138412290;
  int v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "received HID event with keyInfo: %@", (uint8_t *)&v4, 0xCu);
}

void sub_100114BB0()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"NSString *getGCControllerDidConnectNotification(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"HNDGamePadDevice.m", 20, @"%s", dlerror());

  __break(1u);
}

void sub_100114C28()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"NSString *getGCControllerDidBecomeCurrentNotification(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"HNDGamePadDevice.m", 21, @"%s", dlerror());

  __break(1u);
}

void sub_100114CA0(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  int v3 = +[NSString stringWithUTF8String:"void *GameControllerLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"HNDGamePadDevice.m", 18, @"%s", *a1);

  __break(1u);
}

void sub_100114D20()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  os_log_t v1 = +[NSString stringWithUTF8String:"Class getGCControllerClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"HNDGamePadDevice.m", 19, @"Unable to find class %s", "GCController");

  __break(1u);
}

void sub_100114D9C(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Setting AccessibilityNeedsMicrophoneOnLockScreen YES", v1, 2u);
}

void sub_100114DE0(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Setting AccessibilityNeedsMicrophoneOnLockScreen NO", v1, 2u);
}

void sub_100114E24(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Attempted to repost multiple events with the same button mask and timestamp: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100114E9C(uint64_t a1, NSObject *a2)
{
  int v2 = 136315394;
  uint64_t v3 = "-[HNDSystemPointerController _accessibilityShouldIgnoreEventRep:]";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: hidServiceClientRegistryIDNum is not NSNumber: %@", (uint8_t *)&v2, 0x16u);
}

void sub_100114F28(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error opening device: %d", (uint8_t *)v2, 8u);
}

void sub_100114FA0(void *a1, NSObject *a2)
{
  [a1 currentHoldPoint];
  uint64_t v3 = NSStringFromCGPoint(v6);
  int v4 = 138543362;
  uint64_t v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Interrupting existing long press at point %{public}@", (uint8_t *)&v4, 0xCu);
}

void sub_10011503C(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Ended a long press that had been interrupted before, so not doing anything.", v1, 2u);
}

void sub_100115080(char a1, NSObject *a2, double a3, double a4)
{
  CGPoint v6 = NSStringFromCGPoint(*(CGPoint *)&a3);
  int v7 = 138543618;
  int v8 = v6;
  __int16 v9 = 1024;
  int v10 = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Long press at point %{public}@ down %i", (uint8_t *)&v7, 0x12u);
}

void sub_100115134()
{
  sub_10008B414();
  sub_10003C6D8((void *)&_mh_execute_header, v0, v1, "BTDeviceGetConnectedServices returned %d for %s", v2, v3);
}

void sub_10011519C()
{
  sub_10008B414();
  sub_10003C6D8((void *)&_mh_execute_header, v0, v1, "BTDeviceGetDeviceID returned %d for %s", v2, v3);
}

void sub_100115204(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "BTDeviceGetAddressString returned %d", (uint8_t *)v2, 8u);
}

void sub_10011527C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Received unknown Vocie Trigger event: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1001152F4(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "_logEventToCoreAnalytics: already logged event in last 24 hours: %ld. Skipping.", (uint8_t *)&v2, 0xCu);
}

void sub_10011536C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Received nil alternate information for menu item: %@. Not adding it to the menu.", (uint8_t *)&v2, 0xCu);
}

void sub_1001153E4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Received nil primary information for menu item: %@. Not adding it to the menu.", (uint8_t *)&v2, 0xCu);
}

void sub_10011545C(double a1, double a2)
{
  int v2 = NSStringFromCGPoint(*(CGPoint *)&a1);
  uint64_t v3 = NSStringFromBOOL();
  sub_1000A2020();
  sub_1000A2038((void *)&_mh_execute_header, v4, v5, "handleMovementWithDelta: %@, success: %@", v6, v7, v8, v9, v10);
}

void sub_100115500(double a1, double a2)
{
  int v2 = NSStringFromCGPoint(*(CGPoint *)&a1);
  uint64_t v3 = NSStringFromBOOL();
  sub_1000A2020();
  sub_1000A2038((void *)&_mh_execute_header, v4, v5, "_handleEyeTrackingMovementWithDelta: %@, success: %@", v6, v7, v8, v9, v10);
}

void sub_1001155A4(double a1, double a2)
{
  int v2 = NSStringFromCGPoint(*(CGPoint *)&a1);
  uint64_t v3 = NSStringFromBOOL();
  sub_1000A2020();
  sub_1000A2038((void *)&_mh_execute_header, v4, v5, "handleScrollWithDelta: %@, success: %@", v6, v7, v8, v9, v10);
}

void sub_10011568C(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "We attempted to start dwelling but no action is assigned to the Dwell switch!", v1, 2u);
}

void sub_1001156D0(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Was told to stop. Exiting before system app became ready.", v1, 2u);
}

void sub_100115714(os_log_t log)
{
  int v1 = 138412290;
  uint64_t v2 = qword_1001F0BB0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to get serial number for device. Falling back to using generated UUID %@", (uint8_t *)&v1, 0xCu);
}

void sub_100115798(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Unexpectedly found unfinished speech actions after calling completion blocks", v1, 2u);
}

void sub_1001157DC(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 localizedDescription];
  sub_1000CA0D8();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed create audio player for sound: %@", v4, 0xCu);
}

void sub_100115870()
{
  sub_1000CA0D8();
  sub_1000CA0BC((void *)&_mh_execute_header, v0, v1, "Set category error: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1001158D8(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to set static ducking volume with error: %d.", (uint8_t *)v2, 8u);
}

void sub_100115950()
{
  sub_1000CA0D8();
  sub_1000CA0BC((void *)&_mh_execute_header, v0, v1, "Failed to set non static ducking volume with error: %@", v2, v3, v4, v5, v6);
}

void sub_1001159B8()
{
  sub_1000CA0D8();
  sub_1000CA0BC((void *)&_mh_execute_header, v0, v1, "Failed to set active on AVAudioSession: %@", v2, v3, v4, v5, v6);
}

void sub_100115A20(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Back item has nothing to do. %@ - %@", (uint8_t *)&v3, 0x16u);
}

void sub_100115AA8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to enable power assertion on connection as forwarder.", v1, 2u);
}

void sub_100115AEC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to disable power assertion on disconnection as forwarder.", v1, 2u);
}

void sub_100115B30(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to complete sysdiagnose. Error: %{public}@", (uint8_t *)&v2, 0xCu);
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t Data.withUnsafeBytes<A, B>(_:)()
{
  return Data.withUnsafeBytes<A, B>(_:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.init(withAXRemapping:)()
{
  return Locale.init(withAXRemapping:)();
}

uint64_t Locale.Language.languageCode.getter()
{
  return Locale.Language.languageCode.getter();
}

uint64_t type metadata accessor for Locale.Language()
{
  return type metadata accessor for Locale.Language();
}

uint64_t Locale.language.getter()
{
  return Locale.language.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t dispatch thunk of HGConfiguration.requestPartGestures.getter()
{
  return dispatch thunk of HGConfiguration.requestPartGestures.getter();
}

uint64_t dispatch thunk of HGConfiguration.requestPartGestures.setter()
{
  return dispatch thunk of HGConfiguration.requestPartGestures.setter();
}

uint64_t static HGConfiguration.defaultConfig.getter()
{
  return static HGConfiguration.defaultConfig.getter();
}

uint64_t dispatch thunk of HGConfiguration.audioFeedbackConfig.getter()
{
  return dispatch thunk of HGConfiguration.audioFeedbackConfig.getter();
}

uint64_t type metadata accessor for HGConfiguration()
{
  return type metadata accessor for HGConfiguration();
}

uint64_t dispatch thunk of HGAudioFeedbackConfiguration.enableAudioFeedback.setter()
{
  return dispatch thunk of HGAudioFeedbackConfiguration.enableAudioFeedback.setter();
}

uint64_t dispatch thunk of HGManager.configuration.modify()
{
  return dispatch thunk of HGManager.configuration.modify();
}

uint64_t dispatch thunk of HGManager.configuration.getter()
{
  return dispatch thunk of HGManager.configuration.getter();
}

uint64_t dispatch thunk of HGManager.configuration.setter()
{
  return dispatch thunk of HGManager.configuration.setter();
}

uint64_t dispatch thunk of HGManager.muteAudioFeedback(setting:)()
{
  return dispatch thunk of HGManager.muteAudioFeedback(setting:)();
}

uint64_t dispatch thunk of HGManager.stop(with:)()
{
  return dispatch thunk of HGManager.stop(with:)();
}

uint64_t dispatch thunk of HGManager.start()()
{
  return dispatch thunk of HGManager.start()();
}

uint64_t HGManager.init(delegate:config:)()
{
  return HGManager.init(delegate:config:)();
}

uint64_t type metadata accessor for HGManager()
{
  return type metadata accessor for HGManager();
}

uint64_t static VoiceResolver.shared.getter()
{
  return static VoiceResolver.shared.getter();
}

uint64_t type metadata accessor for VoiceResolver()
{
  return type metadata accessor for VoiceResolver();
}

uint64_t VoiceSelection._bridgeToObjectiveC()()
{
  return VoiceSelection._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for VoiceSelection()
{
  return type metadata accessor for VoiceSelection();
}

uint64_t CalibrationViewController.init(delegate:dismissCompletion:)()
{
  return CalibrationViewController.init(delegate:dismissCompletion:)();
}

uint64_t type metadata accessor for CalibrationViewController()
{
  return type metadata accessor for CalibrationViewController();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t HandsSessionSettings.init()()
{
  return HandsSessionSettings.init()();
}

uint64_t type metadata accessor for HandsSessionSettings()
{
  return type metadata accessor for HandsSessionSettings();
}

uint64_t HandsInput.init(image:metadata:)()
{
  return HandsInput.init(image:metadata:)();
}

uint64_t type metadata accessor for HandsInput()
{
  return type metadata accessor for HandsInput();
}

uint64_t HandsOutput.hands.getter()
{
  return HandsOutput.hands.getter();
}

uint64_t type metadata accessor for HandsOutput()
{
  return type metadata accessor for HandsOutput();
}

uint64_t dispatch thunk of HandsSession.runSync(input:)()
{
  return dispatch thunk of HandsSession.runSync(input:)();
}

uint64_t HandsSession.__allocating_init(settings:)()
{
  return HandsSession.__allocating_init(settings:)();
}

uint64_t type metadata accessor for HandsSession()
{
  return type metadata accessor for HandsSession();
}

uint64_t CameraMetadata.init(timestamp:calibration:)()
{
  return CameraMetadata.init(timestamp:calibration:)();
}

uint64_t type metadata accessor for CameraMetadata()
{
  return type metadata accessor for CameraMetadata();
}

uint64_t static CameraCalibration.rectilinear(imageSize:intrinsics:)()
{
  return static CameraCalibration.rectilinear(imageSize:intrinsics:)();
}

uint64_t type metadata accessor for CameraCalibration()
{
  return type metadata accessor for CameraCalibration();
}

uint64_t Hand.confidence.getter()
{
  return Hand.confidence.getter();
}

uint64_t Hand.id.getter()
{
  return Hand.id.getter();
}

uint64_t static Hand.Action.== infix(_:_:)()
{
  return static Hand.Action.== infix(_:_:)();
}

uint64_t type metadata accessor for Hand.Action()
{
  return type metadata accessor for Hand.Action();
}

uint64_t Hand.action.getter()
{
  return Hand.action.getter();
}

uint64_t type metadata accessor for Hand.Chirality()
{
  return type metadata accessor for Hand.Chirality();
}

uint64_t Hand.chirality.getter()
{
  return Hand.chirality.getter();
}

uint64_t type metadata accessor for Hand()
{
  return type metadata accessor for Hand();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t Double.description.getter()
{
  return Double.description.getter();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t Collection<>.contains<A>(_:)()
{
  return Collection<>.contains<A>(_:)();
}

uint64_t AXPreferences.AssistiveTouch.defaultVoiceSelectionsByLanguage.getter()
{
  return AXPreferences.AssistiveTouch.defaultVoiceSelectionsByLanguage.getter();
}

uint64_t static AXPreferences.shared.getter()
{
  return static AXPreferences.shared.getter();
}

uint64_t type metadata accessor for AXPreferences()
{
  return type metadata accessor for AXPreferences();
}

NSValue __swiftcall CATransform3D._bridgeToObjectiveC()()
{
  return (NSValue)CATransform3D._bridgeToObjectiveC()();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t CMSampleBufferRef.imageBuffer.getter()
{
  return CMSampleBufferRef.imageBuffer.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t AVCaptureVideoDataOutput.availableVideoPixelFormatTypes.getter()
{
  return AVCaptureVideoDataOutput.availableVideoPixelFormatTypes.getter();
}

NSValue __swiftcall CGPoint._bridgeToObjectiveC()()
{
  return (NSValue)CGPoint._bridgeToObjectiveC()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static CommandLine.unsafeArgv.getter()
{
  return static CommandLine.unsafeArgv.getter();
}

uint64_t static CommandLine.argc.getter()
{
  return static CommandLine.argc.getter();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t ASTLogCommon()
{
  return _ASTLogCommon();
}

uint64_t ASTLogMouse()
{
  return _ASTLogMouse();
}

uint64_t AXAssistiveAccessEnabled()
{
  return _AXAssistiveAccessEnabled();
}

uint64_t AXAssistiveTouchDefaultIconTypeForMouseButton()
{
  return _AXAssistiveTouchDefaultIconTypeForMouseButton();
}

uint64_t AXAssistiveTouchDefaultLaserIconTypeForMouseButton()
{
  return _AXAssistiveTouchDefaultLaserIconTypeForMouseButton();
}

uint64_t AXAssistiveTouchDwellIcons()
{
  return _AXAssistiveTouchDwellIcons();
}

uint64_t AXAssistiveTouchInsertIconsIntoDictionary()
{
  return _AXAssistiveTouchInsertIconsIntoDictionary();
}

uint64_t AXAssistiveTouchLocationsForLayout()
{
  return _AXAssistiveTouchLocationsForLayout();
}

uint64_t AXAssistiveTouchNamedLayout()
{
  return _AXAssistiveTouchNamedLayout();
}

uint64_t AXAssistiveTouchScrollIcons()
{
  return _AXAssistiveTouchScrollIcons();
}

uint64_t AXColorizeFormatLog()
{
  return _AXColorizeFormatLog();
}

uint64_t AXDeviceCanArmApplePay()
{
  return _AXDeviceCanArmApplePay();
}

uint64_t AXDeviceHasFrontCameraPhysicallyMountedUpsideDown()
{
  return _AXDeviceHasFrontCameraPhysicallyMountedUpsideDown();
}

uint64_t AXDeviceHasGreyMatterEnabled()
{
  return _AXDeviceHasGreyMatterEnabled();
}

uint64_t AXDeviceHasHomeButton()
{
  return _AXDeviceHasHomeButton();
}

uint64_t AXDeviceHasJindo()
{
  return _AXDeviceHasJindo();
}

uint64_t AXDeviceHasPearl()
{
  return _AXDeviceHasPearl();
}

uint64_t AXDeviceHasStaccato()
{
  return _AXDeviceHasStaccato();
}

uint64_t AXDeviceHasTopTouchIDButton()
{
  return _AXDeviceHasTopTouchIDButton();
}

uint64_t AXDeviceIsJ3XX()
{
  return _AXDeviceIsJ3XX();
}

uint64_t AXDeviceIsPad()
{
  return _AXDeviceIsPad();
}

uint64_t AXDeviceIsPhone()
{
  return _AXDeviceIsPhone();
}

uint64_t AXDeviceIsPhoneIdiom()
{
  return _AXDeviceIsPhoneIdiom();
}

uint64_t AXDeviceIsPod()
{
  return _AXDeviceIsPod();
}

uint64_t AXDeviceIsRingerSwitchAvailable()
{
  return _AXDeviceIsRingerSwitchAvailable();
}

uint64_t AXDeviceIsSOSAvailable()
{
  return _AXDeviceIsSOSAvailable();
}

uint64_t AXDeviceIsSiriAvailable()
{
  return _AXDeviceIsSiriAvailable();
}

uint64_t AXDeviceIsSiriAvailableInClarity()
{
  return _AXDeviceIsSiriAvailableInClarity();
}

uint64_t AXDeviceIsVoiceControlAvailable()
{
  return _AXDeviceIsVoiceControlAvailable();
}

uint64_t AXDeviceSupportsCameraButton()
{
  return _AXDeviceSupportsCameraButton();
}

uint64_t AXDeviceSupportsOnDeviceEyeTracking()
{
  return _AXDeviceSupportsOnDeviceEyeTracking();
}

uint64_t AXDeviceSupportsSideApp()
{
  return _AXDeviceSupportsSideApp();
}

uint64_t AXDeviceSupportsVirtualTrackpad()
{
  return _AXDeviceSupportsVirtualTrackpad();
}

uint64_t AXForceTouchAvailableAndEnabled()
{
  return _AXForceTouchAvailableAndEnabled();
}

uint64_t AXForceTouchThresholdPeek()
{
  return _AXForceTouchThresholdPeek();
}

uint64_t AXFormatInteger()
{
  return _AXFormatInteger();
}

uint64_t AXHasCapability()
{
  return _AXHasCapability();
}

uint64_t AXInPreboardScenario()
{
  return _AXInPreboardScenario();
}

uint64_t AXIsBuddyCompleted()
{
  return _AXIsBuddyCompleted();
}

uint64_t AXIsInternalInstall()
{
  return _AXIsInternalInstall();
}

uint64_t AXLocStringKeyForHomeButton()
{
  return _AXLocStringKeyForHomeButton();
}

uint64_t AXLocStringKeyForModel()
{
  return _AXLocStringKeyForModel();
}

uint64_t AXLogCommon()
{
  return _AXLogCommon();
}

uint64_t AXLogSettings()
{
  return _AXLogSettings();
}

uint64_t AXLogSoundActions()
{
  return _AXLogSoundActions();
}

uint64_t AXLoggerForFacility()
{
  return _AXLoggerForFacility();
}

uint64_t AXMIsContainedBy()
{
  return _AXMIsContainedBy();
}

uint64_t AXMachTimeToNanoseconds()
{
  return _AXMachTimeToNanoseconds();
}

uint64_t AXNamesForDrags()
{
  return _AXNamesForDrags();
}

uint64_t AXNamesForDrops()
{
  return _AXNamesForDrops();
}

uint64_t AXNormalizePoint()
{
  return _AXNormalizePoint();
}

uint64_t AXOSLogLevelFromAXLogLevel()
{
  return _AXOSLogLevelFromAXLogLevel();
}

AXError AXObserverAddNotification(AXObserverRef observer, AXUIElementRef element, CFStringRef notification, void *refcon)
{
  return _AXObserverAddNotification(observer, element, notification, refcon);
}

AXError AXObserverCreate(pid_t application, AXObserverCallback callback, AXObserverRef *outObserver)
{
  return _AXObserverCreate(application, callback, outObserver);
}

CFRunLoopSourceRef AXObserverGetRunLoopSource(AXObserverRef observer)
{
  return _AXObserverGetRunLoopSource(observer);
}

AXError AXObserverRemoveNotification(AXObserverRef observer, AXUIElementRef element, CFStringRef notification)
{
  return _AXObserverRemoveNotification(observer, element, notification);
}

uint64_t AXPIDefaultAppearanceForDevice()
{
  return _AXPIDefaultAppearanceForDevice();
}

uint64_t AXParameterizedLocalizedString()
{
  return _AXParameterizedLocalizedString();
}

uint64_t AXPerformBlockAsynchronouslyOnMainThread()
{
  return _AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t AXPerformBlockOnMainThread()
{
  return _AXPerformBlockOnMainThread();
}

uint64_t AXPerformBlockOnMainThreadAfterDelay()
{
  return _AXPerformBlockOnMainThreadAfterDelay();
}

uint64_t AXPerformBlockSynchronouslyOnMainThread()
{
  return _AXPerformBlockSynchronouslyOnMainThread();
}

uint64_t AXPerformSafeBlock()
{
  return _AXPerformSafeBlock();
}

uint64_t AXPrintLine()
{
  return _AXPrintLine();
}

uint64_t AXSAssistiveTouchCursorColor()
{
  return _AXSAssistiveTouchCursorColor();
}

uint64_t AXSSHumanReadableDescriptionForMotionTrackingErrorCode()
{
  return _AXSSHumanReadableDescriptionForMotionTrackingErrorCode();
}

uint64_t AXSSLogForCategory()
{
  return _AXSSLogForCategory();
}

uint64_t AXSetThreadPriority()
{
  return _AXSetThreadPriority();
}

uint64_t AXSlightlyBrighterColorForColor()
{
  return _AXSlightlyBrighterColorForColor();
}

uint64_t AXSwitchRecipeMappingActionAllowsLongPress()
{
  return _AXSwitchRecipeMappingActionAllowsLongPress();
}

uint64_t AXUIAssistiveTouchIconRequiresRTLFlipping()
{
  return _AXUIAssistiveTouchIconRequiresRTLFlipping();
}

uint64_t AXUIAssistiveTouchImageForName()
{
  return _AXUIAssistiveTouchImageForName();
}

uint64_t AXUIAssistiveTouchImageNameForName()
{
  return _AXUIAssistiveTouchImageNameForName();
}

uint64_t AXUIAssistiveTouchStringForName()
{
  return _AXUIAssistiveTouchStringForName();
}

AXError AXUIElementGetPid(AXUIElementRef element, pid_t *pid)
{
  return _AXUIElementGetPid(element, pid);
}

CFTypeID AXUIElementGetTypeID(void)
{
  return _AXUIElementGetTypeID();
}

uint64_t AXUIElementRegisterForApplicationDeath()
{
  return _AXUIElementRegisterForApplicationDeath();
}

uint64_t AXUIElementRegisterSystemWideServerDeathCallback()
{
  return _AXUIElementRegisterSystemWideServerDeathCallback();
}

AXValueRef AXValueCreate(AXValueType theType, const void *valuePtr)
{
  return _AXValueCreate(theType, valuePtr);
}

Boolean AXValueGetValue(AXValueRef value, AXValueType theType, void *valuePtr)
{
  return _AXValueGetValue(value, theType, valuePtr);
}

uint64_t AX_CGCreatePathPathWithUniformInset()
{
  return _AX_CGCreatePathPathWithUniformInset();
}

uint64_t AX_CGPathEnumerateElementsUsingBlock()
{
  return _AX_CGPathEnumerateElementsUsingBlock();
}

uint64_t AX_CGPointGetDistanceToPoint()
{
  return _AX_CGPointGetDistanceToPoint();
}

uint64_t AX_CGPointGetMidpointOfAllPoints()
{
  return _AX_CGPointGetMidpointOfAllPoints();
}

uint64_t AX_CGPointGetMidpointToPoint()
{
  return _AX_CGPointGetMidpointToPoint();
}

uint64_t AX_CGRectBySubtractingRect()
{
  return _AX_CGRectBySubtractingRect();
}

uint64_t AX_CGRectGetCenter()
{
  return _AX_CGRectGetCenter();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

OSStatus AudioServicesCreateSystemSoundID(CFURLRef inFileURL, SystemSoundID *outSystemSoundID)
{
  return _AudioServicesCreateSystemSoundID(inFileURL, outSystemSoundID);
}

OSStatus AudioServicesDisposeSystemSoundID(SystemSoundID inSystemSoundID)
{
  return _AudioServicesDisposeSystemSoundID(inSystemSoundID);
}

uint64_t BKSHIDEventGetBaseAttributes()
{
  return _BKSHIDEventGetBaseAttributes();
}

uint64_t BKSHIDEventGetPointerAttributes()
{
  return _BKSHIDEventGetPointerAttributes();
}

uint64_t BKSHIDEventRegisterEventCallback()
{
  return _BKSHIDEventRegisterEventCallback();
}

uint64_t BKSHIDServicesCancelTouchesOnMainDisplay()
{
  return _BKSHIDServicesCancelTouchesOnMainDisplay();
}

uint64_t BKSHIDServicesGetRingerState()
{
  return _BKSHIDServicesGetRingerState();
}

uint64_t BTAccessoryManagerAddCallbacks()
{
  return _BTAccessoryManagerAddCallbacks();
}

uint64_t BTAccessoryManagerGetDefault()
{
  return _BTAccessoryManagerGetDefault();
}

uint64_t BTAccessoryManagerRegisterCustomMessageClient()
{
  return _BTAccessoryManagerRegisterCustomMessageClient();
}

uint64_t BTAccessoryManagerSendControlCommand()
{
  return _BTAccessoryManagerSendControlCommand();
}

uint64_t BTAccessoryManagerSendCustomMessage()
{
  return _BTAccessoryManagerSendCustomMessage();
}

uint64_t BTDeviceAddressFromString()
{
  return _BTDeviceAddressFromString();
}

uint64_t BTDeviceFromAddress()
{
  return _BTDeviceFromAddress();
}

uint64_t BTDeviceGetAddressString()
{
  return _BTDeviceGetAddressString();
}

uint64_t BTDeviceGetConnectedServices()
{
  return _BTDeviceGetConnectedServices();
}

uint64_t BTDeviceGetDeviceId()
{
  return _BTDeviceGetDeviceId();
}

uint64_t BTDeviceGetName()
{
  return _BTDeviceGetName();
}

uint64_t BTLocalDeviceGetConnectedDevices()
{
  return _BTLocalDeviceGetConnectedDevices();
}

uint64_t BTLocalDeviceGetDefault()
{
  return _BTLocalDeviceGetDefault();
}

uint64_t BTServiceAddCallbacks()
{
  return _BTServiceAddCallbacks();
}

uint64_t BTSessionAttachWithQueue()
{
  return _BTSessionAttachWithQueue();
}

uint64_t BTSessionDetachWithQueue()
{
  return _BTSessionDetachWithQueue();
}

CFTimeInterval CACurrentMediaTime(void)
{
  return _CACurrentMediaTime();
}

CAFrameRateRange CAFrameRateRangeMake(float minimum, float maximum, float preferred)
{
  return _CAFrameRateRangeMake(minimum, maximum, preferred);
}

CATransform3D *__cdecl CATransform3DScale(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return _CATransform3DScale(retstr, t, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return _CATransform3DTranslate(retstr, t, tx, ty, tz);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return _CFAutorelease(arg);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return _CFNotificationCenterGetLocalCenter();
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return _CFRunLoopRunInMode(mode, seconds, returnAfterSourceHandled);
}

uint64_t CFRunLoopRunSpecific()
{
  return _CFRunLoopRunSpecific();
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return _CFSetGetCount(theSet);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return _CGAffineTransformMakeRotation(retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformMakeTranslation(retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformScale(retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformTranslate(retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return _CGBitmapContextCreate(data, width, height, bitsPerComponent, bytesPerRow, space, bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return _CGBitmapContextCreateImage(context);
}

CGColorRef CGColorCreateCopyWithAlpha(CGColorRef color, CGFloat alpha)
{
  return _CGColorCreateCopyWithAlpha(color, alpha);
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return _CGColorRetain(color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return _CGColorSpaceCreateDeviceRGB();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextAddArc(CGContextRef c, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, int clockwise)
{
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextBeginPath(CGContextRef c)
{
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
}

void CGContextFillPath(CGContextRef c)
{
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
}

uint64_t CGContextSetCTM()
{
  return _CGContextSetCTM();
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetTextDrawingMode(CGContextRef c, CGTextDrawingMode mode)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

uint64_t CGFloatIsValid()
{
  return _CGFloatIsValid();
}

void CGImageRelease(CGImageRef image)
{
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
}

void CGPathAddArcToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2, CGFloat radius)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return _CGPathContainsPoint(path, m, point, eoFill);
}

CGPathRef CGPathCreateCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return _CGPathCreateCopyByTransformingPath(path, transform);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return _CGPathCreateMutable();
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  return _CGPathGetBoundingBox(path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return _CGPathRetain(path);
}

BOOL CGPointEqualToPoint(CGPoint point1, CGPoint point2)
{
  return _CGPointEqualToPoint(point1, point2);
}

CGPoint CGPointFromString(NSString *string)
{
  CGPoint v3 = _CGPointFromString(string);
  double y = v3.y;
  double x = v3.x;
  result.double y = y;
  result.double x = x;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return _CGRectContainsPoint(rect, point);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return _CGRectContainsRect(rect1, rect2);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return _CGRectEqualToRect(rect1, rect2);
}

CGRect CGRectFromString(NSString *string)
{
  return _CGRectFromString(string);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  return _CGRectGetMaxX(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

CGFloat CGRectGetMinX(CGRect rect)
{
  return _CGRectGetMinX(rect);
}

CGFloat CGRectGetMinY(CGRect rect)
{
  return _CGRectGetMinY(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectInset(rect, dx, dy);
}

CGRect CGRectIntegral(CGRect rect)
{
  return _CGRectIntegral(rect);
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  return _CGRectIntersection(r1, r2);
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return _CGRectIntersectsRect(rect1, rect2);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return _CGRectIsEmpty(rect);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return _CGRectIsInfinite(rect);
}

BOOL CGRectIsNull(CGRect rect)
{
  return _CGRectIsNull(rect);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  return _CGRectUnion(r1, r2);
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return _CMGetAttachment(target, key, attachmentModeOut);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return _CMSampleBufferGetPresentationTimeStamp(retstr, sbuf);
}

uint64_t CPSetPowerAssertionWithIdentifier()
{
  return _CPSetPowerAssertionWithIdentifier();
}

CGSize CVImageBufferGetEncodedSize(CVImageBufferRef imageBuffer)
{
  CGSize EncodedSize = _CVImageBufferGetEncodedSize(imageBuffer);
  double height = EncodedSize.height;
  double width = EncodedSize.width;
  result.double height = height;
  result.double width = width;
  return result;
}

uint64_t FKALogCommon()
{
  return _FKALogCommon();
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallStructMethod(connection, selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

IOReturn IOHIDDeviceClose(IOHIDDeviceRef device, IOOptionBits options)
{
  return _IOHIDDeviceClose(device, options);
}

Boolean IOHIDDeviceConformsTo(IOHIDDeviceRef device, uint32_t usagePage, uint32_t usage)
{
  return _IOHIDDeviceConformsTo(device, usagePage, usage);
}

CFArrayRef IOHIDDeviceCopyMatchingElements(IOHIDDeviceRef device, CFDictionaryRef matching, IOOptionBits options)
{
  return _IOHIDDeviceCopyMatchingElements(device, matching, options);
}

CFTypeRef IOHIDDeviceGetProperty(IOHIDDeviceRef device, CFStringRef key)
{
  return _IOHIDDeviceGetProperty(device, key);
}

IOReturn IOHIDDeviceOpen(IOHIDDeviceRef device, IOOptionBits options)
{
  return _IOHIDDeviceOpen(device, options);
}

void IOHIDDeviceRegisterInputReportCallback(IOHIDDeviceRef device, uint8_t *report, CFIndex reportLength, IOHIDReportCallback callback, void *context)
{
}

void IOHIDDeviceRegisterInputValueCallback(IOHIDDeviceRef device, IOHIDValueCallback callback, void *context)
{
}

void IOHIDDeviceRegisterRemovalCallback(IOHIDDeviceRef device, IOHIDCallback callback, void *context)
{
}

void IOHIDDeviceUnscheduleFromRunLoop(IOHIDDeviceRef device, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

CFIndex IOHIDElementGetLogicalMax(IOHIDElementRef element)
{
  return _IOHIDElementGetLogicalMax(element);
}

CFIndex IOHIDElementGetLogicalMin(IOHIDElementRef element)
{
  return _IOHIDElementGetLogicalMin(element);
}

uint32_t IOHIDElementGetUsage(IOHIDElementRef element)
{
  return _IOHIDElementGetUsage(element);
}

uint32_t IOHIDElementGetUsagePage(IOHIDElementRef element)
{
  return _IOHIDElementGetUsagePage(element);
}

uint64_t IOHIDEventCreateMouseEvent()
{
  return _IOHIDEventCreateMouseEvent();
}

uint64_t IOHIDEventCreateRelativePointerEvent()
{
  return _IOHIDEventCreateRelativePointerEvent();
}

uint64_t IOHIDEventCreateScrollEvent()
{
  return _IOHIDEventCreateScrollEvent();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return _IOHIDEventGetIntegerValue();
}

uint64_t IOHIDEventGetSenderID()
{
  return _IOHIDEventGetSenderID();
}

uint64_t IOHIDEventGetType()
{
  return _IOHIDEventGetType();
}

uint64_t IOHIDEventSystemClientCreate()
{
  return _IOHIDEventSystemClientCreate();
}

uint64_t IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority()
{
  return _IOHIDEventSystemClientRegisterEventFilterCallbackWithPriority();
}

uint64_t IOHIDEventSystemClientScheduleWithRunLoop()
{
  return _IOHIDEventSystemClientScheduleWithRunLoop();
}

uint64_t IOHIDEventSystemClientSetMatchingMultiple()
{
  return _IOHIDEventSystemClientSetMatchingMultiple();
}

uint64_t IOHIDEventSystemClientUnregisterEventFilterCallback()
{
  return _IOHIDEventSystemClientUnregisterEventFilterCallback();
}

uint64_t IOHIDEventSystemClientUnscheduleWithRunLoop()
{
  return _IOHIDEventSystemClientUnscheduleWithRunLoop();
}

CFSetRef IOHIDManagerCopyDevices(IOHIDManagerRef manager)
{
  return _IOHIDManagerCopyDevices(manager);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return _IOHIDManagerCreate(allocator, options);
}

IOReturn IOHIDManagerOpen(IOHIDManagerRef manager, IOOptionBits options)
{
  return _IOHIDManagerOpen(manager, options);
}

void IOHIDManagerRegisterDeviceMatchingCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
}

void IOHIDManagerRegisterDeviceRemovalCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
}

void IOHIDManagerScheduleWithRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

void IOHIDManagerSetDeviceMatchingMultiple(IOHIDManagerRef manager, CFArrayRef multiple)
{
}

void IOHIDManagerUnscheduleFromRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

BOOLean_t IOHIDServiceClientConformsTo(IOHIDServiceClientRef service, uint32_t usagePage, uint32_t usage)
{
  return _IOHIDServiceClientConformsTo(service, usagePage, usage);
}

CFTypeRef IOHIDServiceClientCopyProperty(IOHIDServiceClientRef service, CFStringRef key)
{
  return _IOHIDServiceClientCopyProperty(service, key);
}

CFTypeRef IOHIDServiceClientGetRegistryID(IOHIDServiceClientRef service)
{
  return _IOHIDServiceClientGetRegistryID(service);
}

CFTypeID IOHIDServiceClientGetTypeID(void)
{
  return _IOHIDServiceClientGetTypeID();
}

Boolean IOHIDServiceClientSetProperty(IOHIDServiceClientRef service, CFStringRef key, CFTypeRef property)
{
  return _IOHIDServiceClientSetProperty(service, key, property);
}

IOHIDElementRef IOHIDValueGetElement(IOHIDValueRef value)
{
  return _IOHIDValueGetElement(value);
}

CFIndex IOHIDValueGetIntegerValue(IOHIDValueRef value)
{
  return _IOHIDValueGetIntegerValue(value);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

BOOL NSIsEmptyRect(NSRect aRect)
{
  return _NSIsEmptyRect(aRect);
}

void NSLog(NSString *format, ...)
{
}

uint64_t NSRequestConcreteImplementation()
{
  return _NSRequestConcreteImplementation();
}

void NSSetUncaughtExceptionHandler(NSUncaughtExceptionHandler *a1)
{
}

uint64_t NSStringFromBOOL()
{
  return _NSStringFromBOOL();
}

NSString *__cdecl NSStringFromCGPoint(CGPoint point)
{
  return _NSStringFromCGPoint(point);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return _NSStringFromCGRect(rect);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return _NSStringFromCGSize(size);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return _NSStringFromPoint(aPoint);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

uint64_t SBSIsReachabilityEnabled()
{
  return _SBSIsReachabilityEnabled();
}

uint64_t SCATATVRemoteDeviceMatchingDictionary()
{
  return _SCATATVRemoteDeviceMatchingDictionary();
}

uint64_t SCATActionDescription()
{
  return _SCATActionDescription();
}

uint64_t SCATAddOrUpdateSwitchToSettings()
{
  return _SCATAddOrUpdateSwitchToSettings();
}

uint64_t SCATIsATVRemoteButtonSwitchCandidateEvent()
{
  return _SCATIsATVRemoteButtonSwitchCandidateEvent();
}

uint64_t SCATRemoveSwitchFromSettings()
{
  return _SCATRemoveSwitchFromSettings();
}

uint64_t SCRCMathClearAverage()
{
  return _SCRCMathClearAverage();
}

uint64_t SCRCMathGetAverage()
{
  return _SCRCMathGetAverage();
}

uint64_t SCRCMathGetDistanceBetweenPoints()
{
  return _SCRCMathGetDistanceBetweenPoints();
}

uint64_t SCRCMathGetVectorAndDistanceForPoints()
{
  return _SCRCMathGetVectorAndDistanceForPoints();
}

uint64_t SCRCMathUpdateAngleAverage()
{
  return _SCRCMathUpdateAngleAverage();
}

uint64_t SCRCMathUpdateAverage()
{
  return _SCRCMathUpdateAverage();
}

uint64_t SWCHLogCommon()
{
  return _SWCHLogCommon();
}

uint64_t SWCHLogHW()
{
  return _SWCHLogHW();
}

uint64_t SWCHLogMenu()
{
  return _SWCHLogMenu();
}

UIBezierPath *__cdecl UIAccessibilityConvertPathToScreenCoordinates(UIBezierPath *path, UIView *view)
{
  return _UIAccessibilityConvertPathToScreenCoordinates(path, view);
}

BOOL UIAccessibilityIsBoldTextEnabled(void)
{
  return _UIAccessibilityIsBoldTextEnabled();
}

BOOL UIAccessibilityIsReduceTransparencyEnabled(void)
{
  return _UIAccessibilityIsReduceTransparencyEnabled();
}

BOOL UIAccessibilityIsSwitchControlRunning(void)
{
  return _UIAccessibilityIsSwitchControlRunning();
}

void UIAccessibilityPostNotification(UIAccessibilityNotifications notification, id argument)
{
}

void UIAccessibilityZoomFocusChanged(UIAccessibilityZoomType type, CGRect frame, UIView *view)
{
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return _UIApplicationMain(argc, argv, principalClassName, delegateClassName);
}

BOOL UIContentSizeCategoryIsAccessibilityCategory(UIContentSizeCategory category)
{
  return _UIContentSizeCategoryIsAccessibilityCategory(category);
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
}

void UIGraphicsEndImageContext(void)
{
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return _UIGraphicsGetCurrentContext();
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return _UIGraphicsGetImageFromCurrentImageContext();
}

uint64_t UIPointRoundToScale()
{
  return _UIPointRoundToScale();
}

void UIRectFill(CGRect rect)
{
}

uint64_t UIRoundToViewScale()
{
  return _UIRoundToViewScale();
}

uint64_t _AXAssert()
{
  return __AXAssert();
}

uint64_t _AXLogWithFacility()
{
  return __AXLogWithFacility();
}

uint64_t _AXSAccessibilitySecureIntentProvider()
{
  return __AXSAccessibilitySecureIntentProvider();
}

uint64_t _AXSApplicationAccessibilityEnabled()
{
  return __AXSApplicationAccessibilityEnabled();
}

uint64_t _AXSApplicationAccessibilitySetEnabled()
{
  return __AXSApplicationAccessibilitySetEnabled();
}

uint64_t _AXSAssistiveTouchEnabled()
{
  return __AXSAssistiveTouchEnabled();
}

uint64_t _AXSAssistiveTouchHardwareEnabled()
{
  return __AXSAssistiveTouchHardwareEnabled();
}

uint64_t _AXSAssistiveTouchRepairIncarnationModeEnabled()
{
  return __AXSAssistiveTouchRepairIncarnationModeEnabled();
}

uint64_t _AXSAssistiveTouchScannerEnabled()
{
  return __AXSAssistiveTouchScannerEnabled();
}

uint64_t _AXSAssistiveTouchScannerSetEnabled()
{
  return __AXSAssistiveTouchScannerSetEnabled();
}

uint64_t _AXSAssistiveTouchSetEnabled()
{
  return __AXSAssistiveTouchSetEnabled();
}

uint64_t _AXSAutomationEnabled()
{
  return __AXSAutomationEnabled();
}

uint64_t _AXSCanDisableApplicationAccessibility()
{
  return __AXSCanDisableApplicationAccessibility();
}

uint64_t _AXSCommandAndControlEnabled()
{
  return __AXSCommandAndControlEnabled();
}

uint64_t _AXSFullKeyboardAccessEnabled()
{
  return __AXSFullKeyboardAccessEnabled();
}

uint64_t _AXSGetUSBRMDisablers()
{
  return __AXSGetUSBRMDisablers();
}

uint64_t _AXSHomeButtonAssistant()
{
  return __AXSHomeButtonAssistant();
}

uint64_t _AXSInUnitTestMode()
{
  return __AXSInUnitTestMode();
}

uint64_t _AXSMossdeepEnabled()
{
  return __AXSMossdeepEnabled();
}

uint64_t _AXSPointerSizeMultiplier()
{
  return __AXSPointerSizeMultiplier();
}

uint64_t _AXSPointerStrokeColor()
{
  return __AXSPointerStrokeColor();
}

uint64_t _AXSPointerStrokeColorValues()
{
  return __AXSPointerStrokeColorValues();
}

uint64_t _AXSSetAccessibilityEnabled()
{
  return __AXSSetAccessibilityEnabled();
}

uint64_t _AXSSetAccessibilityNeedsMicrophoneOnLockScreen()
{
  return __AXSSetAccessibilityNeedsMicrophoneOnLockScreen();
}

uint64_t _AXSSetSpeakThisEnabled()
{
  return __AXSSetSpeakThisEnabled();
}

uint64_t _AXSSetTripleClickOptions()
{
  return __AXSSetTripleClickOptions();
}

uint64_t _AXSSpeakThisEnabled()
{
  return __AXSSpeakThisEnabled();
}

uint64_t _AXSTripleClickCopyOptions()
{
  return __AXSTripleClickCopyOptions();
}

uint64_t _AXSZoomTouchEnabled()
{
  return __AXSZoomTouchEnabled();
}

uint64_t _AXStringForArgs()
{
  return __AXStringForArgs();
}

uint64_t _AXTraitsAsString()
{
  return __AXTraitsAsString();
}

uint64_t _AXUIElementCreateData()
{
  return __AXUIElementCreateData();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _UIAccessibilityBlockPostingOfNotification()
{
  return __UIAccessibilityBlockPostingOfNotification();
}

uint64_t _UIAccessibilityUnblockPostingOfAllNotifications()
{
  return __UIAccessibilityUnblockPostingOfAllNotifications();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __AXStringForVariables()
{
  return ___AXStringForVariables();
}

uint64_t __UIAccessibilityCastAsClass()
{
  return ___UIAccessibilityCastAsClass();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

__double2 __sincos_stret(double a1)
{
  __double2 v3 = ___sincos_stret(a1);
  double cosval = v3.__cosval;
  double sinval = v3.__sinval;
  result.__double cosval = cosval;
  result.__double sinval = sinval;
  return result;
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void abort(void)
{
}

long double atan(long double __x)
{
  return _atan(__x);
}

long double atan2(long double __y, long double __x)
{
  return _atan2(__y, __x);
}

uint64_t bootstrap_check_in2()
{
  return _bootstrap_check_in2();
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  return _cos(__x);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void exit(int a1)
{
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return _getpid();
}

long double log(long double __x)
{
  return _log(__x);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return _memset_s(__s, __smax, __c, __n);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

BOOL notify_is_valid_token(int val)
{
  return _notify_is_valid_token(val);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

float powf(float a1, float a2)
{
  return _powf(a1, a2);
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

const char *__cdecl sel_getName(SEL sel)
{
  return _sel_getName(sel);
}

long double sin(long double __x)
{
  return _sin(__x);
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return _swift_dynamicCastObjCProtocolConditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

kern_return_t task_get_special_port(task_inspect_t task, int which_port, mach_port_t *special_port)
{
  return _task_get_special_port(task, which_port, special_port);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _[a1 CGColor];
}

id objc_msgSend_CGPath(void *a1, const char *a2, ...)
{
  return _[a1 CGPath];
}

id objc_msgSend_CGPointValue(void *a1, const char *a2, ...)
{
  return _[a1 CGPointValue];
}

id objc_msgSend_CGRectValue(void *a1, const char *a2, ...)
{
  return _[a1 CGRectValue];
}

id objc_msgSend_CGSizeValue(void *a1, const char *a2, ...)
{
  return _[a1 CGSizeValue];
}

id objc_msgSend_HIDTime(void *a1, const char *a2, ...)
{
  return _[a1 HIDTime];
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__accessibilityDisplayId(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityDisplayId];
}

id objc_msgSend__accessibilityHandleAccessibilityEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityHandleAccessibilityEvent:");
}

id objc_msgSend__accessibilityMoveFocusWithHeading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityMoveFocusWithHeading:");
}

id objc_msgSend__accessibilityNativeFocusElement(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityNativeFocusElement];
}

id objc_msgSend__accessibilityScannerCurrentFocusContext(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityScannerCurrentFocusContext];
}

id objc_msgSend__accessibilityScannerCurrentLoopElements(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityScannerCurrentLoopElements];
}

id objc_msgSend__accessibilityScannerCurrentLoopElementsForFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityScannerCurrentLoopElementsForFocusContext:");
}

id objc_msgSend__accessibilityScannerCurrentLoopIndex(void *a1, const char *a2, ...)
{
  return _[a1 _accessibilityScannerCurrentLoopIndex];
}

id objc_msgSend__accessibilityShouldIgnoreEventRep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityShouldIgnoreEventRep:");
}

id objc_msgSend__actionButtonPressed(void *a1, const char *a2, ...)
{
  return _[a1 _actionButtonPressed];
}

id objc_msgSend__actionForExpression_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_actionForExpression:");
}

id objc_msgSend__actionForHotCorner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_actionForHotCorner:");
}

id objc_msgSend__actionIdentifierForCameraSwitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_actionIdentifierForCameraSwitch:");
}

id objc_msgSend__actionIdentifierForKeyCode_withType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_actionIdentifierForKeyCode:withType:");
}

id objc_msgSend__actionIdentifierForSwitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_actionIdentifierForSwitch:");
}

id objc_msgSend__actionIdentifierWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_actionIdentifierWithType:");
}

id objc_msgSend__activateLockButton(void *a1, const char *a2, ...)
{
  return _[a1 _activateLockButton];
}

id objc_msgSend__activateWithActualElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateWithActualElement:");
}

id objc_msgSend__actualDistanceForFingerTrail(void *a1, const char *a2, ...)
{
  return _[a1 _actualDistanceForFingerTrail];
}

id objc_msgSend__actuallyHandleSelectAction(void *a1, const char *a2, ...)
{
  return _[a1 _actuallyHandleSelectAction];
}

id objc_msgSend__addAdditionalShortcutsIfApplicableForElement_toMenuItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAdditionalShortcutsIfApplicableForElement:toMenuItems:");
}

id objc_msgSend__addArrowHeadToPath_baseLeftPoint_baseRightPoint_tipPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addArrowHeadToPath:baseLeftPoint:baseRightPoint:tipPoint:");
}

id objc_msgSend__addCircleWithRadius_center_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCircleWithRadius:center:inContext:");
}

id objc_msgSend__addCircleWithRadius_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCircleWithRadius:inContext:");
}

id objc_msgSend__addConstraint_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addConstraint:priority:");
}

id objc_msgSend__addFavoriteBoxPressed(void *a1, const char *a2, ...)
{
  return _[a1 _addFavoriteBoxPressed];
}

id objc_msgSend__addGrayArrowHeadLineToPath_bottomPoint_tipPoint_sideAngle_sideLength_outlineThickness_innerThickness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addGrayArrowHeadLineToPath:bottomPoint:tipPoint:sideAngle:sideLength:outlineThickness:innerThickness:");
}

id objc_msgSend__addGrayFingerIfNecessaryToPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addGrayFingerIfNecessaryToPath:");
}

id objc_msgSend__addMotionTrackingInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _addMotionTrackingInputSource];
}

id objc_msgSend__addNewButtonsToView(void *a1, const char *a2, ...)
{
  return _[a1 _addNewButtonsToView];
}

id objc_msgSend__addPointsToContinuousGestureData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPointsToContinuousGestureData:");
}

id objc_msgSend__addPostEventFilterToFetcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPostEventFilterToFetcher:");
}

id objc_msgSend__addRoundedCornerWithTrueCorner_radius_corner_clockwise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addRoundedCornerWithTrueCorner:radius:corner:clockwise:");
}

id objc_msgSend__addScrollShortcutIfApplicableForElement_toMenuItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addScrollShortcutIfApplicableForElement:toMenuItems:");
}

id objc_msgSend__addTapIfApplicableForElement_toMenuItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addTapIfApplicableForElement:toMenuItems:");
}

id objc_msgSend__addTapReplacementGestureIfApplicableForElement_toMenuItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addTapReplacementGestureIfApplicableForElement:toMenuItems:");
}

id objc_msgSend__additionalMenuItemsForHomeActionForMenu_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_additionalMenuItemsForHomeActionForMenu:delegate:");
}

id objc_msgSend__adjustArrowViewsForNumberOfFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustArrowViewsForNumberOfFingers:");
}

id objc_msgSend__adjustOriginValue_forDistance_maximumEndPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustOriginValue:forDistance:maximumEndPosition:");
}

id objc_msgSend__adjustSelectionForTextElement_direction_unit_selectedRange_startingRangeForSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustSelectionForTextElement:direction:unit:selectedRange:startingRangeForSelection:");
}

id objc_msgSend__adjustedXAnchorPositionToClearCornersOfRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustedXAnchorPositionToClearCornersOfRect:");
}

id objc_msgSend__allSwitchesInUse(void *a1, const char *a2, ...)
{
  return _[a1 _allSwitchesInUse];
}

id objc_msgSend__angleForDegrees_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_angleForDegrees:");
}

id objc_msgSend__animateWithDuration_delay_options_factory_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateWithDuration:delay:options:factory:animations:completion:");
}

id objc_msgSend__applePayButtonPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applePayButtonPressed:");
}

id objc_msgSend__applicationMatchingBlock_inApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationMatchingBlock:inApplications:");
}

id objc_msgSend__applyLaunchRecipeUUID(void *a1, const char *a2, ...)
{
  return _[a1 _applyLaunchRecipeUUID];
}

id objc_msgSend__applySelectionToAction_selection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applySelectionToAction:selection:");
}

id objc_msgSend__armApplePay(void *a1, const char *a2, ...)
{
  return _[a1 _armApplePay];
}

id objc_msgSend__arrowPath(void *a1, const char *a2, ...)
{
  return _[a1 _arrowPath];
}

id objc_msgSend__assignLocationsToRockerItems(void *a1, const char *a2, ...)
{
  return _[a1 _assignLocationsToRockerItems];
}

id objc_msgSend__assistAppValidationMode(void *a1, const char *a2, ...)
{
  return _[a1 _assistAppValidationMode];
}

id objc_msgSend__assistiveTouchEnabledChange(void *a1, const char *a2, ...)
{
  return _[a1 _assistiveTouchEnabledChange];
}

id objc_msgSend__assistiveTouchSettingsChanged(void *a1, const char *a2, ...)
{
  return _[a1 _assistiveTouchSettingsChanged];
}

id objc_msgSend__astGameControllerEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _astGameControllerEnabled];
}

id objc_msgSend__attemptStopAfterDelay(void *a1, const char *a2, ...)
{
  return _[a1 _attemptStopAfterDelay];
}

id objc_msgSend__attemptToRestoreFocusContext_scannerManager_foundNewElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptToRestoreFocusContext:scannerManager:foundNewElements:");
}

id objc_msgSend__attemptToShowVisualsAfterPerformingScreenshot(void *a1, const char *a2, ...)
{
  return _[a1 _attemptToShowVisualsAfterPerformingScreenshot];
}

id objc_msgSend__autoHideForEyeTrackingToggled(void *a1, const char *a2, ...)
{
  return _[a1 _autoHideForEyeTrackingToggled];
}

id objc_msgSend__automationSwitches(void *a1, const char *a2, ...)
{
  return _[a1 _automationSwitches];
}

id objc_msgSend__autoscanToNextFocusContext(void *a1, const char *a2, ...)
{
  return _[a1 _autoscanToNextFocusContext];
}

id objc_msgSend__availableFrameForCenterPointAtSelectionPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_availableFrameForCenterPointAtSelectionPath:");
}

id objc_msgSend__axActionForCameraSwitchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_axActionForCameraSwitchType:");
}

id objc_msgSend__axPrintSubviews_string_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_axPrintSubviews:string:");
}

id objc_msgSend__axSwitchForAccessibilitySwitchSource_eventUsagePage_eventUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_axSwitchForAccessibilitySwitchSource:eventUsagePage:eventUsage:");
}

id objc_msgSend__axSwitchForCameraSwitchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_axSwitchForCameraSwitchType:");
}

id objc_msgSend__backButtonShouldBeHidden(void *a1, const char *a2, ...)
{
  return _[a1 _backButtonShouldBeHidden];
}

id objc_msgSend__backgroundColorForTheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundColorForTheme:");
}

id objc_msgSend__backgroundSoundsPressed(void *a1, const char *a2, ...)
{
  return _[a1 _backgroundSoundsPressed];
}

id objc_msgSend__beginAttach(void *a1, const char *a2, ...)
{
  return _[a1 _beginAttach];
}

id objc_msgSend__beginDetach(void *a1, const char *a2, ...)
{
  return _[a1 _beginDetach];
}

id objc_msgSend__beginStateTransitionIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _beginStateTransitionIfNecessary];
}

id objc_msgSend__behaviorForElement_manager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_behaviorForElement:manager:");
}

id objc_msgSend__bestFrameFor90ControlAtAngle_size_centerPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bestFrameFor90ControlAtAngle:size:centerPoint:");
}

id objc_msgSend__bestScrollMenuItemsForScrollableElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bestScrollMenuItemsForScrollableElement:");
}

id objc_msgSend__bootstrapRegister(void *a1, const char *a2, ...)
{
  return _[a1 _bootstrapRegister];
}

id objc_msgSend__borderBackgroundColorForTheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_borderBackgroundColorForTheme:");
}

id objc_msgSend__borderForegroundColorForTheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_borderForegroundColorForTheme:");
}

id objc_msgSend__borderPatternForTheme_level_highVisibility_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_borderPatternForTheme:level:highVisibility:options:");
}

id objc_msgSend__borderPatternForTheme_level_pointerSizeMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_borderPatternForTheme:level:pointerSizeMultiplier:");
}

id objc_msgSend__borderWidthForTheme_level_highVisibility_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_borderWidthForTheme:level:highVisibility:options:");
}

id objc_msgSend__borderWidthForTheme_level_pointerSizeMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_borderWidthForTheme:level:pointerSizeMultiplier:");
}

id objc_msgSend__boundsInsetForTheme_level_highVisibility_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_boundsInsetForTheme:level:highVisibility:options:");
}

id objc_msgSend__boundsInsetForTheme_level_pointerSizeMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_boundsInsetForTheme:level:pointerSizeMultiplier:");
}

id objc_msgSend__bubbleModeToggled(void *a1, const char *a2, ...)
{
  return _[a1 _bubbleModeToggled];
}

id objc_msgSend__calibrateEyeTrackingPressed(void *a1, const char *a2, ...)
{
  return _[a1 _calibrateEyeTrackingPressed];
}

id objc_msgSend__cameraButtonDoubleLightPressed(void *a1, const char *a2, ...)
{
  return _[a1 _cameraButtonDoubleLightPressed];
}

id objc_msgSend__cameraButtonLightPressed(void *a1, const char *a2, ...)
{
  return _[a1 _cameraButtonLightPressed];
}

id objc_msgSend__cameraButtonPressed(void *a1, const char *a2, ...)
{
  return _[a1 _cameraButtonPressed];
}

id objc_msgSend__cameraPressed(void *a1, const char *a2, ...)
{
  return _[a1 _cameraPressed];
}

id objc_msgSend__canAutomaticallyPauseScanner(void *a1, const char *a2, ...)
{
  return _[a1 _canAutomaticallyPauseScanner];
}

id objc_msgSend__canPopSheet(void *a1, const char *a2, ...)
{
  return _[a1 _canPopSheet];
}

id objc_msgSend__canTransitionToPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canTransitionToPhase:");
}

id objc_msgSend__cancelDwellRelatedTimers(void *a1, const char *a2, ...)
{
  return _[a1 _cancelDwellRelatedTimers];
}

id objc_msgSend__cancelIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 _cancelIdleTimer];
}

id objc_msgSend__cancelMoveTimerAndEndMove_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelMoveTimerAndEndMove:");
}

id objc_msgSend__capitalizedMenuTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_capitalizedMenuTitle:");
}

id objc_msgSend__captureDeviceInputWithPreset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_captureDeviceInputWithPreset:");
}

id objc_msgSend__captureMetadataOutputWithDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_captureMetadataOutputWithDelegate:queue:");
}

id objc_msgSend__captureSessionWithPreset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_captureSessionWithPreset:");
}

id objc_msgSend__captureVideoDataOutputWithDelegate_queue_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_captureVideoDataOutputWithDelegate:queue:format:");
}

id objc_msgSend__centerBackButtonToView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_centerBackButtonToView:");
}

id objc_msgSend__checkBackboardEffectiveDeviceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 _checkBackboardEffectiveDeviceOrientation];
}

id objc_msgSend__cleanMenuStacks(void *a1, const char *a2, ...)
{
  return _[a1 _cleanMenuStacks];
}

id objc_msgSend__cleanUpAlternateKeyOperations(void *a1, const char *a2, ...)
{
  return _[a1 _cleanUpAlternateKeyOperations];
}

id objc_msgSend__cleanupCaptureOutput(void *a1, const char *a2, ...)
{
  return _[a1 _cleanupCaptureOutput];
}

id objc_msgSend__cleanupUserInterfaceClient(void *a1, const char *a2, ...)
{
  return _[a1 _cleanupUserInterfaceClient];
}

id objc_msgSend__clearArrowView(void *a1, const char *a2, ...)
{
  return _[a1 _clearArrowView];
}

id objc_msgSend__clearCircleWithRadius_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearCircleWithRadius:inContext:");
}

id objc_msgSend__clearLineGestureState(void *a1, const char *a2, ...)
{
  return _[a1 _clearLineGestureState];
}

id objc_msgSend__clearTellMeWhenTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearTellMeWhenTimer];
}

id objc_msgSend__commandAndControlPressed(void *a1, const char *a2, ...)
{
  return _[a1 _commandAndControlPressed];
}

id objc_msgSend__computeScrollViewFrameAndActivationRegions(void *a1, const char *a2, ...)
{
  return _[a1 _computeScrollViewFrameAndActivationRegions];
}

id objc_msgSend__configureMFIAccessoryIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureMFIAccessoryIfNecessary:");
}

id objc_msgSend__confirmApplePay(void *a1, const char *a2, ...)
{
  return _[a1 _confirmApplePay];
}

id objc_msgSend__contextId(void *a1, const char *a2, ...)
{
  return _[a1 _contextId];
}

id objc_msgSend__continuousScrollPressed_fromButtonPress_inDirection_iconType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continuousScrollPressed:fromButtonPress:inDirection:iconType:");
}

id objc_msgSend__controlCenterPressed(void *a1, const char *a2, ...)
{
  return _[a1 _controlCenterPressed];
}

id objc_msgSend__convertPointFromSceneReferenceSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertPointFromSceneReferenceSpace:");
}

id objc_msgSend__convertPointInPathWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertPointInPathWithBlock:");
}

id objc_msgSend__convertPointToSceneReferenceSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertPointToSceneReferenceSpace:");
}

id objc_msgSend__convertRectFromSceneReferenceSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertRectFromSceneReferenceSpace:");
}

id objc_msgSend__convertRectToSceneReferenceSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertRectToSceneReferenceSpace:");
}

id objc_msgSend__copyMenuPathWithNoTipForRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyMenuPathWithNoTipForRect:");
}

id objc_msgSend__copyMenuPathWithTipForRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyMenuPathWithTipForRect:");
}

id objc_msgSend__cornerForNormalizedPoint_normalizedPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cornerForNormalizedPoint:normalizedPadding:");
}

id objc_msgSend__createHNDMovementEventWithDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createHNDMovementEventWithDelta:");
}

id objc_msgSend__currentAppPids(void *a1, const char *a2, ...)
{
  return _[a1 _currentAppPids];
}

id objc_msgSend__currentApplicationMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentApplicationMatchingBlock:");
}

id objc_msgSend__currentElementProvider(void *a1, const char *a2, ...)
{
  return _[a1 _currentElementProvider];
}

id objc_msgSend__currentFocusedPointInScreenCoordinates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentFocusedPointInScreenCoordinates:");
}

id objc_msgSend__currentPointSmoother(void *a1, const char *a2, ...)
{
  return _[a1 _currentPointSmoother];
}

id objc_msgSend__currentRockerTranslateY(void *a1, const char *a2, ...)
{
  return _[a1 _currentRockerTranslateY];
}

id objc_msgSend__cursorPathAndFrame_forElementFrame_inDisplayContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cursorPathAndFrame:forElementFrame:inDisplayContext:");
}

id objc_msgSend__customGesturePressed_fromButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customGesturePressed:fromButtonPress:");
}

id objc_msgSend__customsPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customsPressed:");
}

id objc_msgSend__decreaseDwellTimePressed(void *a1, const char *a2, ...)
{
  return _[a1 _decreaseDwellTimePressed];
}

id objc_msgSend__defaultDwellMode(void *a1, const char *a2, ...)
{
  return _[a1 _defaultDwellMode];
}

id objc_msgSend__defaultNubbitHitboxActivationFactor(void *a1, const char *a2, ...)
{
  return _[a1 _defaultNubbitHitboxActivationFactor];
}

id objc_msgSend__depthForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_depthForElement:");
}

id objc_msgSend__descriptionForSelectBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionForSelectBehavior:");
}

id objc_msgSend__desiredSessionState(void *a1, const char *a2, ...)
{
  return _[a1 _desiredSessionState];
}

id objc_msgSend__detectionModePresssed(void *a1, const char *a2, ...)
{
  return _[a1 _detectionModePresssed];
}

id objc_msgSend__determineMenuOrigin_anchorPosition_anchorDirection_shouldUseTip_sheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineMenuOrigin:anchorPosition:anchorDirection:shouldUseTip:sheet:");
}

id objc_msgSend__deviceSpecificImageForName_screenHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceSpecificImageForName:screenHeight:");
}

id objc_msgSend__deviceSpecificImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceSpecificImageNamed:");
}

id objc_msgSend__dictionaryElements(void *a1, const char *a2, ...)
{
  return _[a1 _dictionaryElements];
}

id objc_msgSend__didConnectWithSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didConnectWithSession:");
}

id objc_msgSend__didDisconnect(void *a1, const char *a2, ...)
{
  return _[a1 _didDisconnect];
}

id objc_msgSend__didFocusLastOnKeyboardElement(void *a1, const char *a2, ...)
{
  return _[a1 _didFocusLastOnKeyboardElement];
}

id objc_msgSend__didHandleRealUpEvent(void *a1, const char *a2, ...)
{
  return _[a1 _didHandleRealUpEvent];
}

id objc_msgSend__didReceiveActionWithIdentifier_start_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didReceiveActionWithIdentifier:start:");
}

id objc_msgSend__didReceiveActionWithIdentifier_start_ignoreInputHold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didReceiveActionWithIdentifier:start:ignoreInputHold:");
}

id objc_msgSend__didTransitionToPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didTransitionToPhase:");
}

id objc_msgSend__didUpdateAvailability_withDetail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didUpdateAvailability:withDetail:");
}

id objc_msgSend__didUpdateState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didUpdateState:");
}

id objc_msgSend__didWrapInDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didWrapInDirection:");
}

id objc_msgSend__dimFlashingLightsPressed(void *a1, const char *a2, ...)
{
  return _[a1 _dimFlashingLightsPressed];
}

id objc_msgSend__displayCornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 _displayCornerRadius];
}

id objc_msgSend__distanceForCurveWithRadius_onLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_distanceForCurveWithRadius:onLeft:");
}

id objc_msgSend__distanceForPreview(void *a1, const char *a2, ...)
{
  return _[a1 _distanceForPreview];
}

id objc_msgSend__dockPressed(void *a1, const char *a2, ...)
{
  return _[a1 _dockPressed];
}

id objc_msgSend__dockSpecificMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _dockSpecificMenuItems];
}

id objc_msgSend__doubleTapPressed_fromButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doubleTapPressed:fromButtonPress:");
}

id objc_msgSend__dragAndDropPressed_fromButtonPress_dragMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dragAndDropPressed:fromButtonPress:dragMenu:");
}

id objc_msgSend__drawCrosshairWithSize_lineThickness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawCrosshairWithSize:lineThickness:");
}

id objc_msgSend__drawCurvedLineInIntervals_spacingBetweenIntervals_drawingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawCurvedLineInIntervals:spacingBetweenIntervals:drawingBlock:");
}

id objc_msgSend__drawFingerAtArrowHeadInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawFingerAtArrowHeadInContext:");
}

id objc_msgSend__drawLineOfCirclesInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawLineOfCirclesInContext:");
}

id objc_msgSend__drawLinesInContext_forRows_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawLinesInContext:forRows:");
}

id objc_msgSend__drawStraightLineInIntervals_spacingBetweenIntervals_drawingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drawStraightLineInIntervals:spacingBetweenIntervals:drawingBlock:");
}

id objc_msgSend__drillOutFocusContextForParentGroupOfFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drillOutFocusContextForParentGroupOfFocusContext:");
}

id objc_msgSend__driver_outputAudioForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_driver:outputAudioForContext:");
}

id objc_msgSend__driverForScannerState(void *a1, const char *a2, ...)
{
  return _[a1 _driverForScannerState];
}

id objc_msgSend__dummyImage(void *a1, const char *a2, ...)
{
  return _[a1 _dummyImage];
}

id objc_msgSend__dwellControlToggled(void *a1, const char *a2, ...)
{
  return _[a1 _dwellControlToggled];
}

id objc_msgSend__dwellPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dwellPressed:");
}

id objc_msgSend__dwellSwitchAssignedAction(void *a1, const char *a2, ...)
{
  return _[a1 _dwellSwitchAssignedAction];
}

id objc_msgSend__dwellTimerFired(void *a1, const char *a2, ...)
{
  return _[a1 _dwellTimerFired];
}

id objc_msgSend__elementContainsAllSubviewsOfView_view_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementContainsAllSubviewsOfView:view:");
}

id objc_msgSend__elementFetchingRequired(void *a1, const char *a2, ...)
{
  return _[a1 _elementFetchingRequired];
}

id objc_msgSend__elementManagerForScannerState(void *a1, const char *a2, ...)
{
  return _[a1 _elementManagerForScannerState];
}

id objc_msgSend__elementProviderForSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementProviderForSheet:");
}

id objc_msgSend__elementWithRestorationInfo_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementWithRestorationInfo:options:");
}

id objc_msgSend__enableApplicationAccessibility_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableApplicationAccessibility:");
}

id objc_msgSend__enableDockIconActivationMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableDockIconActivationMode:");
}

id objc_msgSend__enableHiddenNubbitMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableHiddenNubbitMode:");
}

id objc_msgSend__enableServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableServer:");
}

id objc_msgSend__enableWithoutFocusRestoration(void *a1, const char *a2, ...)
{
  return _[a1 _enableWithoutFocusRestoration];
}

id objc_msgSend__endAction(void *a1, const char *a2, ...)
{
  return _[a1 _endAction];
}

id objc_msgSend__endAutoscanning(void *a1, const char *a2, ...)
{
  return _[a1 _endAutoscanning];
}

id objc_msgSend__endGeneralTimer(void *a1, const char *a2, ...)
{
  return _[a1 _endGeneralTimer];
}

id objc_msgSend__endHandlingReachabilityIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _endHandlingReachabilityIfNeeded];
}

id objc_msgSend__endHighlightingTargedElements(void *a1, const char *a2, ...)
{
  return _[a1 _endHighlightingTargedElements];
}

id objc_msgSend__endMovementAndForceLift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endMovementAndForceLift:");
}

id objc_msgSend__endPinchMode(void *a1, const char *a2, ...)
{
  return _[a1 _endPinchMode];
}

id objc_msgSend__enqueueHIDEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueHIDEvent:");
}

id objc_msgSend__escapableElements(void *a1, const char *a2, ...)
{
  return _[a1 _escapableElements];
}

id objc_msgSend__fadeFingersAfterDelayIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _fadeFingersAfterDelayIfNeeded];
}

id objc_msgSend__fadeFingersAfterDelayIfNeededOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fadeFingersAfterDelayIfNeededOnDisplay:");
}

id objc_msgSend__fadedFingersShouldShowOutlines(void *a1, const char *a2, ...)
{
  return _[a1 _fadedFingersShouldShowOutlines];
}

id objc_msgSend__fallbackAncestorForAutoscrollForMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fallbackAncestorForAutoscrollForMenu:");
}

id objc_msgSend__fallbackAncestorForScrollToTop(void *a1, const char *a2, ...)
{
  return _[a1 _fallbackAncestorForScrollToTop];
}

id objc_msgSend__fallbackAncestorForScrollToTopForMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fallbackAncestorForScrollToTopForMenu:");
}

id objc_msgSend__fallbackImageForCustomActionMenuItem_charactersInUse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fallbackImageForCustomActionMenuItem:charactersInUse:");
}

id objc_msgSend__fillColorForTheme_level_highVisibility_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fillColorForTheme:level:highVisibility:options:");
}

id objc_msgSend__fillColorForTheme_level_pointerSizeMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fillColorForTheme:level:pointerSizeMultiplier:");
}

id objc_msgSend__filteredItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filteredItems:");
}

id objc_msgSend__filteredMenuItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filteredMenuItems:");
}

id objc_msgSend__fingerCenter(void *a1, const char *a2, ...)
{
  return _[a1 _fingerCenter];
}

id objc_msgSend__fingerCircleImage(void *a1, const char *a2, ...)
{
  return _[a1 _fingerCircleImage];
}

id objc_msgSend__fingerController(void *a1, const char *a2, ...)
{
  return _[a1 _fingerController];
}

id objc_msgSend__fingerControllerPointForKeyboardKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fingerControllerPointForKeyboardKey:");
}

id objc_msgSend__fingerControllerPointForScreenPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fingerControllerPointForScreenPoint:onDisplay:");
}

id objc_msgSend__fingerItemStringForNumberOfFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fingerItemStringForNumberOfFingers:");
}

id objc_msgSend__fingerRadiusOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fingerRadiusOnDisplay:");
}

id objc_msgSend__finishLineGesture(void *a1, const char *a2, ...)
{
  return _[a1 _finishLineGesture];
}

id objc_msgSend__fireSelectActionWithCount_preferrsMenuOnFirstPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fireSelectActionWithCount:preferrsMenuOnFirstPress:");
}

id objc_msgSend__firstKeyboardFocusContext(void *a1, const char *a2, ...)
{
  return _[a1 _firstKeyboardFocusContext];
}

id objc_msgSend__flushScannableMenuElements(void *a1, const char *a2, ...)
{
  return _[a1 _flushScannableMenuElements];
}

id objc_msgSend__flushSoundIDs(void *a1, const char *a2, ...)
{
  return _[a1 _flushSoundIDs];
}

id objc_msgSend__focusContextAdjacentToSource_direction_fromContext_checkedSources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusContextAdjacentToSource:direction:fromContext:checkedSources:");
}

id objc_msgSend__focusContextAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusContextAtPoint:");
}

id objc_msgSend__focusContextForSource_inDirection_currentContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusContextForSource:inDirection:currentContext:");
}

id objc_msgSend__focusContextFromPrimaryContext_inDirection_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusContextFromPrimaryContext:inDirection:didWrap:");
}

id objc_msgSend__focusedElementManagerForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusedElementManagerForContext:");
}

id objc_msgSend__forceDismissCalibrationForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceDismissCalibrationForReason:");
}

id objc_msgSend__foregroundColorForTheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_foregroundColorForTheme:");
}

id objc_msgSend__frameFor90ControlWithXAlignment_yAlignment_size_nearestPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_frameFor90ControlWithXAlignment:yAlignment:size:nearestPoint:");
}

id objc_msgSend__frameNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _frameNeeded];
}

id objc_msgSend__frameWithIntegralOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_frameWithIntegralOrigin:");
}

id objc_msgSend__frontFacingCameraPressed(void *a1, const char *a2, ...)
{
  return _[a1 _frontFacingCameraPressed];
}

id objc_msgSend__gesturesPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gesturesPressed:");
}

id objc_msgSend__getActionIdentifier_longPressActionIdentifier_forSwitchEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getActionIdentifier:longPressActionIdentifier:forSwitchEvent:");
}

id objc_msgSend__getCurveRadius_onLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCurveRadius:onLeft:");
}

id objc_msgSend__goBackInMenuState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_goBackInMenuState:");
}

id objc_msgSend__graphicsQuality(void *a1, const char *a2, ...)
{
  return _[a1 _graphicsQuality];
}

id objc_msgSend__gridViewController(void *a1, const char *a2, ...)
{
  return _[a1 _gridViewController];
}

id objc_msgSend__groupForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_groupForElement:");
}

id objc_msgSend__groupWithDictionary_currentPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_groupWithDictionary:currentPid:");
}

id objc_msgSend__groupWithItems_groupTraits_scanningBehaviorTraits_label_identifier_currentPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_groupWithItems:groupTraits:scanningBehaviorTraits:label:identifier:currentPid:");
}

id objc_msgSend__handleAXEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAXEvent:");
}

id objc_msgSend__handleAccessibilityEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAccessibilityEvent:");
}

id objc_msgSend__handleAction_longPressAction_start_switchIdentifier_switchDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAction:longPressAction:start:switchIdentifier:switchDisplayName:");
}

id objc_msgSend__handleAction_type_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAction:type:state:");
}

id objc_msgSend__handleActivateAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleActivateAction];
}

id objc_msgSend__handleActiveHoldAndDragAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleActiveHoldAndDragAction];
}

id objc_msgSend__handleAlertAppeared(void *a1, const char *a2, ...)
{
  return _[a1 _handleAlertAppeared];
}

id objc_msgSend__handleAnnouncementNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAnnouncementNotification:");
}

id objc_msgSend__handleAppSwitcherAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleAppSwitcherAction];
}

id objc_msgSend__handleAppleWatchRemoteScreen(void *a1, const char *a2, ...)
{
  return _[a1 _handleAppleWatchRemoteScreen];
}

id objc_msgSend__handleAutomationEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAutomationEvent:");
}

id objc_msgSend__handleBackTapEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBackTapEvent:");
}

id objc_msgSend__handleBrokenHomeButtonMode(void *a1, const char *a2, ...)
{
  return _[a1 _handleBrokenHomeButtonMode];
}

id objc_msgSend__handleButtonNumber_isDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleButtonNumber:isDown:");
}

id objc_msgSend__handleCameraButton(void *a1, const char *a2, ...)
{
  return _[a1 _handleCameraButton];
}

id objc_msgSend__handleCameraButtonDoubleLightPress(void *a1, const char *a2, ...)
{
  return _[a1 _handleCameraButtonDoubleLightPress];
}

id objc_msgSend__handleCameraButtonLightPress(void *a1, const char *a2, ...)
{
  return _[a1 _handleCameraButtonLightPress];
}

id objc_msgSend__handleCompletedContinuousGesture(void *a1, const char *a2, ...)
{
  return _[a1 _handleCompletedContinuousGesture];
}

id objc_msgSend__handleCompletedCutCopyPasteOperationForTextElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCompletedCutCopyPasteOperationForTextElement:");
}

id objc_msgSend__handleControlCenterAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleControlCenterAction];
}

id objc_msgSend__handleDictationAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleDictationAction];
}

id objc_msgSend__handleElementScrolledByPage(void *a1, const char *a2, ...)
{
  return _[a1 _handleElementScrolledByPage];
}

id objc_msgSend__handleElementVisualsUpdated(void *a1, const char *a2, ...)
{
  return _[a1 _handleElementVisualsUpdated];
}

id objc_msgSend__handleEscapeAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleEscapeAction];
}

id objc_msgSend__handleEyeTrackingMovementWithDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEyeTrackingMovementWithDelta:");
}

id objc_msgSend__handleFireActionAndResumeAutoscanning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFireActionAndResumeAutoscanning:");
}

id objc_msgSend__handleFirstResponderChanged(void *a1, const char *a2, ...)
{
  return _[a1 _handleFirstResponderChanged];
}

id objc_msgSend__handleForceTouchAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleForceTouchAction];
}

id objc_msgSend__handleHandGestureEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleHandGestureEvent:");
}

id objc_msgSend__handleHoldAtPointForActionIdentifier_start_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleHoldAtPointForActionIdentifier:start:");
}

id objc_msgSend__handleHomeAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleHomeAction];
}

id objc_msgSend__handleIOHIDEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIOHIDEvent:");
}

id objc_msgSend__handleKeyboardFocusChanged(void *a1, const char *a2, ...)
{
  return _[a1 _handleKeyboardFocusChanged];
}

id objc_msgSend__handleKeyboardPopupAppeared(void *a1, const char *a2, ...)
{
  return _[a1 _handleKeyboardPopupAppeared];
}

id objc_msgSend__handleLayoutChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLayoutChanged:");
}

id objc_msgSend__handleMIDIEvent_device_entity_endpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMIDIEvent:device:entity:endpoint:");
}

id objc_msgSend__handleMovementWithDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMovementWithDelta:");
}

id objc_msgSend__handleMultiTouchToolEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMultiTouchToolEvent:");
}

id objc_msgSend__handleNotificationCenterAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleNotificationCenterAction];
}

id objc_msgSend__handleNubbitMove_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNubbitMove:event:");
}

id objc_msgSend__handleOrientationChanged(void *a1, const char *a2, ...)
{
  return _[a1 _handleOrientationChanged];
}

id objc_msgSend__handlePauseForPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePauseForPid:");
}

id objc_msgSend__handlePidStatusChanged(void *a1, const char *a2, ...)
{
  return _[a1 _handlePidStatusChanged];
}

id objc_msgSend__handlePinchFingerDownWithFinger_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePinchFingerDownWithFinger:onDisplay:");
}

id objc_msgSend__handleReachability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReachability:");
}

id objc_msgSend__handleRealContinuousScrollToolMove_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealContinuousScrollToolMove:onDisplay:");
}

id objc_msgSend__handleRealContinuousScrollToolUp_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealContinuousScrollToolUp:onDisplay:");
}

id objc_msgSend__handleRealCustomGestureDown_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealCustomGestureDown:onDisplay:");
}

id objc_msgSend__handleRealCustomGestureMove_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealCustomGestureMove:onDisplay:");
}

id objc_msgSend__handleRealCustomGestureUp_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealCustomGestureUp:onDisplay:");
}

id objc_msgSend__handleRealDragToolMove_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealDragToolMove:onDisplay:");
}

id objc_msgSend__handleRealDragToolUp_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealDragToolUp:onDisplay:");
}

id objc_msgSend__handleRealMultiFingerDown_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealMultiFingerDown:onDisplay:");
}

id objc_msgSend__handleRealMultiFingerMove_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealMultiFingerMove:onDisplay:");
}

id objc_msgSend__handleRealMultiFingerUp_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealMultiFingerUp:onDisplay:");
}

id objc_msgSend__handleRealPinchToolDown_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealPinchToolDown:onDisplay:");
}

id objc_msgSend__handleRealPinchToolMove_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealPinchToolMove:onDisplay:");
}

id objc_msgSend__handleRealPinchToolUp_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRealPinchToolUp:onDisplay:");
}

id objc_msgSend__handleRefreshEvent_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRefreshEvent:data:");
}

id objc_msgSend__handleRemoteControlEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRemoteControlEvent:");
}

id objc_msgSend__handleRemoteSCATAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRemoteSCATAction:");
}

id objc_msgSend__handleRepostedButtonEventWithTimestamp_buttonMask_senderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRepostedButtonEventWithTimestamp:buttonMask:senderID:");
}

id objc_msgSend__handleResumeForPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleResumeForPid:");
}

id objc_msgSend__handleRunAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleRunAction];
}

id objc_msgSend__handleScreenChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleScreenChanged:");
}

id objc_msgSend__handleScreenLocked(void *a1, const char *a2, ...)
{
  return _[a1 _handleScreenLocked];
}

id objc_msgSend__handleScrollWithDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleScrollWithDelta:");
}

id objc_msgSend__handleSelectAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleSelectAction];
}

id objc_msgSend__handleSelectAndResumeAutoscanningAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleSelectAndResumeAutoscanningAction];
}

id objc_msgSend__handleSiriAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleSiriAction];
}

id objc_msgSend__handleSoundEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSoundEvent:");
}

id objc_msgSend__handleSpeakThis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpeakThis:");
}

id objc_msgSend__handleStepNextAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleStepNextAction];
}

id objc_msgSend__handleStepPreviousAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleStepPreviousAction];
}

id objc_msgSend__handleStopAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleStopAction];
}

id objc_msgSend__handleSysdiagnose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSysdiagnose:");
}

id objc_msgSend__handleSystemServerDied(void *a1, const char *a2, ...)
{
  return _[a1 _handleSystemServerDied];
}

id objc_msgSend__handleTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTouch:");
}

id objc_msgSend__handleTripleClickAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleTripleClickAction];
}

id objc_msgSend__handleUsageConfirmation(void *a1, const char *a2, ...)
{
  return _[a1 _handleUsageConfirmation];
}

id objc_msgSend__handleValueChanged(void *a1, const char *a2, ...)
{
  return _[a1 _handleValueChanged];
}

id objc_msgSend__handleVolumeDownAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleVolumeDownAction];
}

id objc_msgSend__handleVolumeUpAction(void *a1, const char *a2, ...)
{
  return _[a1 _handleVolumeUpAction];
}

id objc_msgSend__hapticMusicPressed(void *a1, const char *a2, ...)
{
  return _[a1 _hapticMusicPressed];
}

id objc_msgSend__hardwareButtonPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hardwareButtonPressed:");
}

id objc_msgSend__hasCurrentApplicationMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasCurrentApplicationMatchingBlock:");
}

id objc_msgSend__hasExternalSwitchConfigured(void *a1, const char *a2, ...)
{
  return _[a1 _hasExternalSwitchConfigured];
}

id objc_msgSend__hasHeadSwitchesAssigned(void *a1, const char *a2, ...)
{
  return _[a1 _hasHeadSwitchesAssigned];
}

id objc_msgSend__heightForAllRows_itemsPerRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_heightForAllRows:itemsPerRow:");
}

id objc_msgSend__hideAlertForMotionTrackerInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _hideAlertForMotionTrackerInputSource];
}

id objc_msgSend__hideAlertForSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hideAlertForSource:");
}

id objc_msgSend__hideAlerts(void *a1, const char *a2, ...)
{
  return _[a1 _hideAlerts];
}

id objc_msgSend__hideCursorsForEyeTrackingAutoHide(void *a1, const char *a2, ...)
{
  return _[a1 _hideCursorsForEyeTrackingAutoHide];
}

id objc_msgSend__hideLargeContentViewerIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _hideLargeContentViewerIfNeeded];
}

id objc_msgSend__hideStateForSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hideStateForSource:");
}

id objc_msgSend__highlightDictionaryElementsWithIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_highlightDictionaryElementsWithIndexes:");
}

id objc_msgSend__highlightFingers(void *a1, const char *a2, ...)
{
  return _[a1 _highlightFingers];
}

id objc_msgSend__highlightViewWidth(void *a1, const char *a2, ...)
{
  return _[a1 _highlightViewWidth];
}

id objc_msgSend__hndAccessibilityEventForFetchEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hndAccessibilityEventForFetchEvent:");
}

id objc_msgSend__home(void *a1, const char *a2, ...)
{
  return _[a1 _home];
}

id objc_msgSend__homeButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeButton:");
}

id objc_msgSend__hotCornerActivationSizeOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hotCornerActivationSizeOnDisplay:");
}

id objc_msgSend__hotCornerForNormalizedPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hotCornerForNormalizedPoint:onDisplay:");
}

id objc_msgSend__iconScaleForForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_iconScaleForForce:");
}

id objc_msgSend__identifierForInterDeviceAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_identifierForInterDeviceAction:");
}

id objc_msgSend__identifierForTextMovementDirection_unit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_identifierForTextMovementDirection:unit:");
}

id objc_msgSend__idleTime(void *a1, const char *a2, ...)
{
  return _[a1 _idleTime];
}

id objc_msgSend__imageNameForDeviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageNameForDeviceType:");
}

id objc_msgSend__imageNameForNumberOfFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageNameForNumberOfFingers:");
}

id objc_msgSend__imageNameForPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageNameForPrefix:");
}

id objc_msgSend__inSelectedState(void *a1, const char *a2, ...)
{
  return _[a1 _inSelectedState];
}

id objc_msgSend__includeRingerButtonInHardware(void *a1, const char *a2, ...)
{
  return _[a1 _includeRingerButtonInHardware];
}

id objc_msgSend__increaseDwellTimePressed(void *a1, const char *a2, ...)
{
  return _[a1 _increaseDwellTimePressed];
}

id objc_msgSend__indexForAngle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexForAngle:");
}

id objc_msgSend__indexOfProviderAfterProviderWithIndex_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexOfProviderAfterProviderWithIndex:didWrap:");
}

id objc_msgSend__indexOfProviderBeforeProviderWithIndex_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexOfProviderBeforeProviderWithIndex:didWrap:");
}

id objc_msgSend__indexOfProviderContainingElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexOfProviderContainingElement:");
}

id objc_msgSend__indexPathForKeyboardElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexPathForKeyboardElement:");
}

id objc_msgSend__init(void *a1, const char *a2, ...)
{
  return _[a1 _init];
}

id objc_msgSend__initServer(void *a1, const char *a2, ...)
{
  return _[a1 _initServer];
}

id objc_msgSend__initStyleAttributes(void *a1, const char *a2, ...)
{
  return _[a1 _initStyleAttributes];
}

id objc_msgSend__initWithHIDDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithHIDDevice:");
}

id objc_msgSend__initWithMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithMenu:");
}

id objc_msgSend__initialPointForGesture(void *a1, const char *a2, ...)
{
  return _[a1 _initialPointForGesture];
}

id objc_msgSend__initialize(void *a1, const char *a2, ...)
{
  return _[a1 _initialize];
}

id objc_msgSend__initializeAccessibility(void *a1, const char *a2, ...)
{
  return _[a1 _initializeAccessibility];
}

id objc_msgSend__initializeContinuousGestureDataWithName_points_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeContinuousGestureDataWithName:points:");
}

id objc_msgSend__initializeDwell(void *a1, const char *a2, ...)
{
  return _[a1 _initializeDwell];
}

id objc_msgSend__initializeMenuVisualProvider(void *a1, const char *a2, ...)
{
  return _[a1 _initializeMenuVisualProvider];
}

id objc_msgSend__initializeNubbit(void *a1, const char *a2, ...)
{
  return _[a1 _initializeNubbit];
}

id objc_msgSend__initializeSpringBoardItems(void *a1, const char *a2, ...)
{
  return _[a1 _initializeSpringBoardItems];
}

id objc_msgSend__insertObjectsOnSameRow_intoArray_itemsPerRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertObjectsOnSameRow:intoArray:itemsPerRow:");
}

id objc_msgSend__installStopButtonForActionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_installStopButtonForActionName:");
}

id objc_msgSend__interDeviceActionForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interDeviceActionForIdentifier:");
}

id objc_msgSend__invalidateAssertionForSystemApertureInert(void *a1, const char *a2, ...)
{
  return _[a1 _invalidateAssertionForSystemApertureInert];
}

id objc_msgSend__isChildElement_desendantOfElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isChildElement:desendantOfElement:");
}

id objc_msgSend__isCurrentSheetValidForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCurrentSheetValidForElement:");
}

id objc_msgSend__isElementInIgnoredTouchRegions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isElementInIgnoredTouchRegions:");
}

id objc_msgSend__isGrayArrow(void *a1, const char *a2, ...)
{
  return _[a1 _isGrayArrow];
}

id objc_msgSend__isGroupingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _isGroupingEnabled];
}

id objc_msgSend__isInNubbitHitbox_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInNubbitHitbox:onDisplay:");
}

id objc_msgSend__isInNubbitHitbox_onDisplay_activationFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInNubbitHitbox:onDisplay:activationFactor:");
}

id objc_msgSend__isKeyboardContainerElement_allowKeyboardContainerItself_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isKeyboardContainerElement:allowKeyboardContainerItself:");
}

id objc_msgSend__isPerformingContinuousGesture(void *a1, const char *a2, ...)
{
  return _[a1 _isPerformingContinuousGesture];
}

id objc_msgSend__isPerformingMove(void *a1, const char *a2, ...)
{
  return _[a1 _isPerformingMove];
}

id objc_msgSend__isPoint_withinTolerance_ofStartPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPoint:withinTolerance:ofStartPoint:");
}

id objc_msgSend__isScannerControlledByDriver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isScannerControlledByDriver:");
}

id objc_msgSend__isScannerEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _isScannerEnabled];
}

id objc_msgSend__isScanningKeyboardContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isScanningKeyboardContainer:");
}

id objc_msgSend__isSpeechEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _isSpeechEnabled];
}

id objc_msgSend__isTrackingErrorWithFaceImportant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTrackingErrorWithFaceImportant:");
}

id objc_msgSend__isValidPositionFor90ControlWithXAlignment_yAlignment_size_nearestPoint_centerPoint_frame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidPositionFor90ControlWithXAlignment:yAlignment:size:nearestPoint:centerPoint:frame:");
}

id objc_msgSend__isWaitingForFirstSystemPointerMovement(void *a1, const char *a2, ...)
{
  return _[a1 _isWaitingForFirstSystemPointerMovement];
}

id objc_msgSend__isWithinLastDwellBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isWithinLastDwellBounds:");
}

id objc_msgSend__itemBelongsOnShortFirstPage_shouldAddControlCenterActions_shouldIncludeSpotlight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_itemBelongsOnShortFirstPage:shouldAddControlCenterActions:shouldIncludeSpotlight:");
}

id objc_msgSend__itemForButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_itemForButton:");
}

id objc_msgSend__itemForScanningFromItem_inDirection_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_itemForScanningFromItem:inDirection:didWrap:");
}

id objc_msgSend__iterateRemoteViewsAndPerformContinuousScrollWithSpeed_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_iterateRemoteViewsAndPerformContinuousScrollWithSpeed:direction:");
}

id objc_msgSend__keyboardElementForIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyboardElementForIndexPath:");
}

id objc_msgSend__layoutButtonsWithViewForCenteringAtStart_includingBackButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutButtonsWithViewForCenteringAtStart:includingBackButton:");
}

id objc_msgSend__layoutForegroundImageView(void *a1, const char *a2, ...)
{
  return _[a1 _layoutForegroundImageView];
}

id objc_msgSend__layoutHUDView_withinBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutHUDView:withinBounds:");
}

id objc_msgSend__layoutMenuItems_oldRockers_viewForCenteringAtStart_shouldUpdateKeyboardFocusIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutMenuItems:oldRockers:viewForCenteringAtStart:shouldUpdateKeyboardFocusIfNeeded:");
}

id objc_msgSend__layoutMenuItemsInReverse_oldRockers_animateToIcon_shouldUpdateKeyboardFocusIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutMenuItemsInReverse:oldRockers:animateToIcon:shouldUpdateKeyboardFocusIfNeeded:");
}

id objc_msgSend__liftFingersUpForPotentialTapViaPrimaryButton(void *a1, const char *a2, ...)
{
  return _[a1 _liftFingersUpForPotentialTapViaPrimaryButton];
}

id objc_msgSend__listenForMuteSwitchChangeIfNecessaryForItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_listenForMuteSwitchChangeIfNecessaryForItems:");
}

id objc_msgSend__liveCaptionsPressed(void *a1, const char *a2, ...)
{
  return _[a1 _liveCaptionsPressed];
}

id objc_msgSend__liveSpeechPressed(void *a1, const char *a2, ...)
{
  return _[a1 _liveSpeechPressed];
}

id objc_msgSend__loadDwellMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadDwellMenuItems];
}

id objc_msgSend__loadFavoritesMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadFavoritesMenuItems];
}

id objc_msgSend__loadGestures(void *a1, const char *a2, ...)
{
  return _[a1 _loadGestures];
}

id objc_msgSend__loadGesturesMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadGesturesMenuItems];
}

id objc_msgSend__loadHardwareMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadHardwareMenuItems];
}

id objc_msgSend__loadInitialMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadInitialMenuItems];
}

id objc_msgSend__loadMenuItems_viewForCenteringAtStart_goBackwards_originalState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadMenuItems:viewForCenteringAtStart:goBackwards:originalState:");
}

id objc_msgSend__loadMenuItems_viewForCenteringAtStart_goBackwards_originalState_shouldUpdateKeyboardFocusIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadMenuItems:viewForCenteringAtStart:goBackwards:originalState:shouldUpdateKeyboardFocusIfNeeded:");
}

id objc_msgSend__loadMoreMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadMoreMenuItems];
}

id objc_msgSend__loadRotateMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadRotateMenuItems];
}

id objc_msgSend__loadScrollMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadScrollMenuItems];
}

id objc_msgSend__loadSecureIntentMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadSecureIntentMenuItems];
}

id objc_msgSend__loadSideAppMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadSideAppMenuItems];
}

id objc_msgSend__loadSideAppMoreMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadSideAppMoreMenuItems];
}

id objc_msgSend__loadSiriShortcutsMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _loadSiriShortcutsMenuItems];
}

id objc_msgSend__locKeyForHardwareActionString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_locKeyForHardwareActionString:");
}

id objc_msgSend__localDataForAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localDataForAttributes:");
}

id objc_msgSend__lock(void *a1, const char *a2, ...)
{
  return _[a1 _lock];
}

id objc_msgSend__lockButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lockButton:");
}

id objc_msgSend__lockDwellControlAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lockDwellControlAction:");
}

id objc_msgSend__lockIntoHotCornerForOrientedNormalizedPoint_onDisplay_cancelDwell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lockIntoHotCornerForOrientedNormalizedPoint:onDisplay:cancelDwell:");
}

id objc_msgSend__longPressDictionaryElementWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_longPressDictionaryElementWithIndex:");
}

id objc_msgSend__longPressPressed_fromButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_longPressPressed:fromButtonPress:");
}

id objc_msgSend__matchingCriteria(void *a1, const char *a2, ...)
{
  return _[a1 _matchingCriteria];
}

id objc_msgSend__matchingDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 _matchingDictionaries];
}

id objc_msgSend__maxHeightForRow_itemsPerRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_maxHeightForRow:itemsPerRow:");
}

id objc_msgSend__menuCornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 _menuCornerRadius];
}

id objc_msgSend__menuExited(void *a1, const char *a2, ...)
{
  return _[a1 _menuExited];
}

id objc_msgSend__menuFrameIsValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_menuFrameIsValid:");
}

id objc_msgSend__menuItemClass(void *a1, const char *a2, ...)
{
  return _[a1 _menuItemClass];
}

id objc_msgSend__menuItemDetailsForScrollAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_menuItemDetailsForScrollAction:");
}

id objc_msgSend__menuItemForScrollAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_menuItemForScrollAction:");
}

id objc_msgSend__menuItemWithItemDictionary_menu_delegate_hardwareActionString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_menuItemWithItemDictionary:menu:delegate:hardwareActionString:");
}

id objc_msgSend__menuItemsForElementSpecificActionsForMenu_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_menuItemsForElementSpecificActionsForMenu:delegate:");
}

id objc_msgSend__menuOpenTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_menuOpenTracker:");
}

id objc_msgSend__menuPointForFingerLayout(void *a1, const char *a2, ...)
{
  return _[a1 _menuPointForFingerLayout];
}

id objc_msgSend__menuTipBase(void *a1, const char *a2, ...)
{
  return _[a1 _menuTipBase];
}

id objc_msgSend__menuTipBaseCornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 _menuTipBaseCornerRadius];
}

id objc_msgSend__menuTipCornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 _menuTipCornerRadius];
}

id objc_msgSend__menuTipHeight(void *a1, const char *a2, ...)
{
  return _[a1 _menuTipHeight];
}

id objc_msgSend__midAngleForCurvedTrailWithTailPoint_fingerTrailDistance_distanceAlongArc_useSecondIntersectionPointIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_midAngleForCurvedTrailWithTailPoint:fingerTrailDistance:distanceAlongArc:useSecondIntersectionPointIfNecessary:");
}

id objc_msgSend__modifyPinchToolMoveToPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_modifyPinchToolMoveToPoint:onDisplay:");
}

id objc_msgSend__morePressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_morePressed:");
}

id objc_msgSend__motionCuesPressed(void *a1, const char *a2, ...)
{
  return _[a1 _motionCuesPressed];
}

id objc_msgSend__motionTracker(void *a1, const char *a2, ...)
{
  return _[a1 _motionTracker];
}

id objc_msgSend__motionTrackerInputSourceFailedToTrackFaceWithErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_motionTrackerInputSourceFailedToTrackFaceWithErrorCode:");
}

id objc_msgSend__motionTrackerInputSourceTrackedFaceAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_motionTrackerInputSourceTrackedFaceAtPoint:");
}

id objc_msgSend__moveCursorForTextElement_direction_unit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveCursorForTextElement:direction:unit:");
}

id objc_msgSend__moveFingersForRealEventToPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveFingersForRealEventToPoint:onDisplay:");
}

id objc_msgSend__moveFingersToPointInFingerCoordinateSpace_onDisplay_allowOutOfBounds_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveFingersToPointInFingerCoordinateSpace:onDisplay:allowOutOfBounds:animated:completion:");
}

id objc_msgSend__moveNubbitForKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveNubbitForKeyboard:");
}

id objc_msgSend__moveNubbitToPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveNubbitToPosition:");
}

id objc_msgSend__moveSystemPointerIfActiveToPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveSystemPointerIfActiveToPoint:onDisplay:");
}

id objc_msgSend__nearbyDeviceControlPressed(void *a1, const char *a2, ...)
{
  return _[a1 _nearbyDeviceControlPressed];
}

id objc_msgSend__newControlArrowForCurvature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newControlArrowForCurvature:");
}

id objc_msgSend__newDefaultArrowPath(void *a1, const char *a2, ...)
{
  return _[a1 _newDefaultArrowPath];
}

id objc_msgSend__newGrayArrowOutlinePath(void *a1, const char *a2, ...)
{
  return _[a1 _newGrayArrowOutlinePath];
}

id objc_msgSend__newRotate90Button(void *a1, const char *a2, ...)
{
  return _[a1 _newRotate90Button];
}

id objc_msgSend__nextFocusSourceFromSource_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nextFocusSourceFromSource:inDirection:");
}

id objc_msgSend__notificationCenterPressed(void *a1, const char *a2, ...)
{
  return _[a1 _notificationCenterPressed];
}

id objc_msgSend__notifyDisplayManagerDeviceCountChanged(void *a1, const char *a2, ...)
{
  return _[a1 _notifyDisplayManagerDeviceCountChanged];
}

id objc_msgSend__notifyMenuObserversWithSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyMenuObserversWithSelector:");
}

id objc_msgSend__notifyObserversDidFetchElementsForEvent_foundNewElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyObserversDidFetchElementsForEvent:foundNewElements:");
}

id objc_msgSend__notifyObserversScannerDidBecomeActive(void *a1, const char *a2, ...)
{
  return _[a1 _notifyObserversScannerDidBecomeActive];
}

id objc_msgSend__notifyObserversScannerDidFocusOnContext_oldContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyObserversScannerDidFocusOnContext:oldContext:");
}

id objc_msgSend__notifyObserversWillFetchElementsForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyObserversWillFetchElementsForEvent:");
}

id objc_msgSend__nubbitIsOverKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nubbitIsOverKeyboard:");
}

id objc_msgSend__nubbitPointForEdgePosition(void *a1, const char *a2, ...)
{
  return _[a1 _nubbitPointForEdgePosition];
}

id objc_msgSend__nubbitPositionForKeyboardFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nubbitPositionForKeyboardFrame:");
}

id objc_msgSend__numberOfFingers(void *a1, const char *a2, ...)
{
  return _[a1 _numberOfFingers];
}

id objc_msgSend__numberOfFingersWithGestureSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfFingersWithGestureSheet:");
}

id objc_msgSend__observeNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_observeNotifications:");
}

id objc_msgSend__onDeviceEyeTrackingSettingsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onDeviceEyeTrackingSettingsChanged:");
}

id objc_msgSend__onDeviceEyeTrackingToggled(void *a1, const char *a2, ...)
{
  return _[a1 _onDeviceEyeTrackingToggled];
}

id objc_msgSend__opacityForTheme_level_highVisibility_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_opacityForTheme:level:highVisibility:options:");
}

id objc_msgSend__opacityForTheme_level_pointerSizeMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_opacityForTheme:level:pointerSizeMultiplier:");
}

id objc_msgSend__openVisualIntelligence(void *a1, const char *a2, ...)
{
  return _[a1 _openVisualIntelligence];
}

id objc_msgSend__orbPressed_fromButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_orbPressed:fromButtonPress:");
}

id objc_msgSend__orientationPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_orientationPressed:");
}

id objc_msgSend__overrideDeviceCount(void *a1, const char *a2, ...)
{
  return _[a1 _overrideDeviceCount];
}

id objc_msgSend__overrideScanningModeAtStartupIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _overrideScanningModeAtStartupIfNecessary];
}

id objc_msgSend__paddedHitboxForNubbitOnDisplay_activationFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_paddedHitboxForNubbitOnDisplay:activationFactor:");
}

id objc_msgSend__panPositionsAdjustedByDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_panPositionsAdjustedByDelta:");
}

id objc_msgSend__path_frame_isSimpleRect_forFocusContext_cursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_path:frame:isSimpleRect:forFocusContext:cursor:");
}

id objc_msgSend__pauseForMaximumNumberOfCycles(void *a1, const char *a2, ...)
{
  return _[a1 _pauseForMaximumNumberOfCycles];
}

id objc_msgSend__pauseScanningForLikelyScreenChange(void *a1, const char *a2, ...)
{
  return _[a1 _pauseScanningForLikelyScreenChange];
}

id objc_msgSend__pauseScanningTemporarily(void *a1, const char *a2, ...)
{
  return _[a1 _pauseScanningTemporarily];
}

id objc_msgSend__performAXScrollActionAtPoint_onDisplay_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performAXScrollActionAtPoint:onDisplay:action:");
}

id objc_msgSend__performAccessibilityValidations(void *a1, const char *a2, ...)
{
  return _[a1 _performAccessibilityValidations];
}

id objc_msgSend__performActionForHotCorner_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performActionForHotCorner:onDisplay:");
}

id objc_msgSend__performCustomGestureOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performCustomGestureOnDisplay:");
}

id objc_msgSend__performDwellActionOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performDwellActionOnDisplay:");
}

id objc_msgSend__performFallbackScrollAncestorAction_withMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performFallbackScrollAncestorAction:withMenu:");
}

id objc_msgSend__performFlickGestureWithAngle_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performFlickGestureWithAngle:name:");
}

id objc_msgSend__performForceTouchGesture(void *a1, const char *a2, ...)
{
  return _[a1 _performForceTouchGesture];
}

id objc_msgSend__performGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performGesture:");
}

id objc_msgSend__performTapGestureForDoubleTap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performTapGestureForDoubleTap:");
}

id objc_msgSend__persistentSwitchIdentifierForKeyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistentSwitchIdentifierForKeyCode:");
}

id objc_msgSend__pinchAngleAdjustedByDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pinchAngleAdjustedByDelta:");
}

id objc_msgSend__pinchPositionsWithRadius_angle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pinchPositionsWithRadius:angle:");
}

id objc_msgSend__pinchPressed_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pinchPressed:mode:");
}

id objc_msgSend__pinchRadiusAdjustedByDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pinchRadiusAdjustedByDelta:");
}

id objc_msgSend__playSoundWithSoundID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_playSoundWithSoundID:");
}

id objc_msgSend__pointByAvoidingDisplayCornerRadius_forPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pointByAvoidingDisplayCornerRadius:forPoint:");
}

id objc_msgSend__pointForLockedCorner_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pointForLockedCorner:onDisplay:");
}

id objc_msgSend__pointerPointPickersToNotify(void *a1, const char *a2, ...)
{
  return _[a1 _pointerPointPickersToNotify];
}

id objc_msgSend__popToRootLevelSheet(void *a1, const char *a2, ...)
{
  return _[a1 _popToRootLevelSheet];
}

id objc_msgSend__position_isOverKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_position:isOverKeyboard:");
}

id objc_msgSend__positionForMenuDockPosition_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_positionForMenuDockPosition:size:");
}

id objc_msgSend__positionForMenuPopoverPosition_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_positionForMenuPopoverPosition:size:");
}

id objc_msgSend__preferredBehaviorForSelectCount_focusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preferredBehaviorForSelectCount:focusContext:");
}

id objc_msgSend__preloadDwellMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _preloadDwellMenuItems];
}

id objc_msgSend__preloadInitialMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 _preloadInitialMenuItems];
}

id objc_msgSend__prepareMenuForScanningIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _prepareMenuForScanningIfNeeded];
}

id objc_msgSend__prepareToBeginContinuousGesture(void *a1, const char *a2, ...)
{
  return _[a1 _prepareToBeginContinuousGesture];
}

id objc_msgSend__presentLargeContentViewerForHUDItem_inContentView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentLargeContentViewerForHUDItem:inContentView:");
}

id objc_msgSend__presentMigrationPopupIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _presentMigrationPopupIfNeeded];
}

id objc_msgSend__presentWithElement_pointPicker_useMenuTip_sheetToShow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentWithElement:pointPicker:useMenuTip:sheetToShow:");
}

id objc_msgSend__pressDictionaryElementWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pressDictionaryElementWithIndex:");
}

id objc_msgSend__previewDistance(void *a1, const char *a2, ...)
{
  return _[a1 _previewDistance];
}

id objc_msgSend__primaryElementManagerForScannerState(void *a1, const char *a2, ...)
{
  return _[a1 _primaryElementManagerForScannerState];
}

id objc_msgSend__probeAccessories(void *a1, const char *a2, ...)
{
  return _[a1 _probeAccessories];
}

id objc_msgSend__processAllOtherMotionTrackerErrorsWithErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processAllOtherMotionTrackerErrorsWithErrorCode:");
}

id objc_msgSend__processCameraStolenError(void *a1, const char *a2, ...)
{
  return _[a1 _processCameraStolenError];
}

id objc_msgSend__promptForLineGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_promptForLineGesture:");
}

id objc_msgSend__pushFreehandSheetOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushFreehandSheetOfClass:");
}

id objc_msgSend__pushMenuItemsFromSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushMenuItemsFromSender:");
}

id objc_msgSend__rangeAnimationVelocityWithSlowdownMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rangeAnimationVelocityWithSlowdownMultiplier:");
}

id objc_msgSend__reachabilityPressed(void *a1, const char *a2, ...)
{
  return _[a1 _reachabilityPressed];
}

id objc_msgSend__reallyLiftFingersUpForPotentialTapViaPrimaryButton(void *a1, const char *a2, ...)
{
  return _[a1 _reallyLiftFingersUpForPotentialTapViaPrimaryButton];
}

id objc_msgSend__rebootDevicePressed(void *a1, const char *a2, ...)
{
  return _[a1 _rebootDevicePressed];
}

id objc_msgSend__recordAndRepostEventRepresentation_forButtonsWithSenderID_buttonMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordAndRepostEventRepresentation:forButtonsWithSenderID:buttonMask:");
}

id objc_msgSend__recordRepostedButtonEventWithTimestamp_buttonMask_senderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordRepostedButtonEventWithTimestamp:buttonMask:senderID:");
}

id objc_msgSend__rectForFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rectForFingers:");
}

id objc_msgSend__rectToClearForPinchGesture(void *a1, const char *a2, ...)
{
  return _[a1 _rectToClearForPinchGesture];
}

id objc_msgSend__rectToClearIfNeededForSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rectToClearIfNeededForSheet:");
}

id objc_msgSend__referenceBounds(void *a1, const char *a2, ...)
{
  return _[a1 _referenceBounds];
}

id objc_msgSend__registerForSettingsNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForSettingsNotifications];
}

id objc_msgSend__releaseLastShownKey(void *a1, const char *a2, ...)
{
  return _[a1 _releaseLastShownKey];
}

id objc_msgSend__removeAllAnimations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAllAnimations:");
}

id objc_msgSend__removeAllSystemGestureDisablingAssertions(void *a1, const char *a2, ...)
{
  return _[a1 _removeAllSystemGestureDisablingAssertions];
}

id objc_msgSend__removeAutomationSwitches(void *a1, const char *a2, ...)
{
  return _[a1 _removeAutomationSwitches];
}

id objc_msgSend__removeInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeInputSource:");
}

id objc_msgSend__removeInputSources(void *a1, const char *a2, ...)
{
  return _[a1 _removeInputSources];
}

id objc_msgSend__removeMotionTrackingInputSourceAndClearAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeMotionTrackingInputSourceAndClearAlert:");
}

id objc_msgSend__removePostEventFilterFromFetcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removePostEventFilterFromFetcher:");
}

id objc_msgSend__reorderLayersIfNeededForDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reorderLayersIfNeededForDisplayID:");
}

id objc_msgSend__replaceRingerWithOrientationLock(void *a1, const char *a2, ...)
{
  return _[a1 _replaceRingerWithOrientationLock];
}

id objc_msgSend__replacementForLastFocusedKeyboardItem(void *a1, const char *a2, ...)
{
  return _[a1 _replacementForLastFocusedKeyboardItem];
}

id objc_msgSend__repositionNubbitAfterLift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_repositionNubbitAfterLift:");
}

id objc_msgSend__repositionedGestureFromOriginalGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_repositionedGestureFromOriginalGesture:");
}

id objc_msgSend__requestPauseScanning(void *a1, const char *a2, ...)
{
  return _[a1 _requestPauseScanning];
}

id objc_msgSend__requestResumeScanning(void *a1, const char *a2, ...)
{
  return _[a1 _requestResumeScanning];
}

id objc_msgSend__requestSecurePasteAuthenticationMessageWithContext_forClientVersionedPID_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestSecurePasteAuthenticationMessageWithContext:forClientVersionedPID:completionBlock:");
}

id objc_msgSend__requestSwitchControllerPrivileges(void *a1, const char *a2, ...)
{
  return _[a1 _requestSwitchControllerPrivileges];
}

id objc_msgSend__requiresLargeSystemPointer(void *a1, const char *a2, ...)
{
  return _[a1 _requiresLargeSystemPointer];
}

id objc_msgSend__resetCalibrationTimer(void *a1, const char *a2, ...)
{
  return _[a1 _resetCalibrationTimer];
}

id objc_msgSend__resetContinuousGestureData(void *a1, const char *a2, ...)
{
  return _[a1 _resetContinuousGestureData];
}

id objc_msgSend__resetCurrentPointToInitialPoint(void *a1, const char *a2, ...)
{
  return _[a1 _resetCurrentPointToInitialPoint];
}

id objc_msgSend__resetDwellDueToFingersReset(void *a1, const char *a2, ...)
{
  return _[a1 _resetDwellDueToFingersReset];
}

id objc_msgSend__resetDwellModeToDefault(void *a1, const char *a2, ...)
{
  return _[a1 _resetDwellModeToDefault];
}

id objc_msgSend__resetDwellTimer(void *a1, const char *a2, ...)
{
  return _[a1 _resetDwellTimer];
}

id objc_msgSend__resetFetchFlags(void *a1, const char *a2, ...)
{
  return _[a1 _resetFetchFlags];
}

id objc_msgSend__resetForceDismissalReason(void *a1, const char *a2, ...)
{
  return _[a1 _resetForceDismissalReason];
}

id objc_msgSend__resetForegroundImage(void *a1, const char *a2, ...)
{
  return _[a1 _resetForegroundImage];
}

id objc_msgSend__resetGrid(void *a1, const char *a2, ...)
{
  return _[a1 _resetGrid];
}

id objc_msgSend__resetHoverCircleLocation(void *a1, const char *a2, ...)
{
  return _[a1 _resetHoverCircleLocation];
}

id objc_msgSend__resetIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 _resetIdleTimer];
}

id objc_msgSend__resetMenuOpenTracker(void *a1, const char *a2, ...)
{
  return _[a1 _resetMenuOpenTracker];
}

id objc_msgSend__resetMotionTrackerErrorAndTimer(void *a1, const char *a2, ...)
{
  return _[a1 _resetMotionTrackerErrorAndTimer];
}

id objc_msgSend__resetPointer(void *a1, const char *a2, ...)
{
  return _[a1 _resetPointer];
}

id objc_msgSend__resetPostEventFilterOnFetcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetPostEventFilterOnFetcher:");
}

id objc_msgSend__resetRecipeTimeoutIfApplicable(void *a1, const char *a2, ...)
{
  return _[a1 _resetRecipeTimeoutIfApplicable];
}

id objc_msgSend__resetWithActionSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetWithActionSource:");
}

id objc_msgSend__resignSwitchControllerPrivileges(void *a1, const char *a2, ...)
{
  return _[a1 _resignSwitchControllerPrivileges];
}

id objc_msgSend__resolveSwitchForSwitchEvent_deviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resolveSwitchForSwitchEvent:deviceName:");
}

id objc_msgSend__restorationInfoForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restorationInfoForElement:");
}

id objc_msgSend__restrictSystemApertureLayoutToInert(void *a1, const char *a2, ...)
{
  return _[a1 _restrictSystemApertureLayoutToInert];
}

id objc_msgSend__ringerPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ringerPressed:");
}

id objc_msgSend__rockerButtonForLocation_buttonType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rockerButtonForLocation:buttonType:");
}

id objc_msgSend__rockerItemsByLocation(void *a1, const char *a2, ...)
{
  return _[a1 _rockerItemsByLocation];
}

id objc_msgSend__rotatedNormalizedInitialPoint(void *a1, const char *a2, ...)
{
  return _[a1 _rotatedNormalizedInitialPoint];
}

id objc_msgSend__rotationDegreesForOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rotationDegreesForOrientation:");
}

id objc_msgSend__rotationLockPressed(void *a1, const char *a2, ...)
{
  return _[a1 _rotationLockPressed];
}

id objc_msgSend__roundedCornersForCursorAtPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_roundedCornersForCursorAtPoint:onDisplay:");
}

id objc_msgSend__rowToFrameDictionaryForAttributes_itemsPerRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rowToFrameDictionaryForAttributes:itemsPerRow:");
}

id objc_msgSend__savePoint_andNotifyDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_savePoint:andNotifyDelegate:");
}

id objc_msgSend__saveRecentGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveRecentGesture:");
}

id objc_msgSend__scannableElements(void *a1, const char *a2, ...)
{
  return _[a1 _scannableElements];
}

id objc_msgSend__scannableElementsAtSelectionPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scannableElementsAtSelectionPath:");
}

id objc_msgSend__scannerEnabledChange(void *a1, const char *a2, ...)
{
  return _[a1 _scannerEnabledChange];
}

id objc_msgSend__scannerGroupsForMenuItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scannerGroupsForMenuItems:");
}

id objc_msgSend__scanningModePreferenceDidChange(void *a1, const char *a2, ...)
{
  return _[a1 _scanningModePreferenceDidChange];
}

id objc_msgSend__scatAddCompletionBlockToAction_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scatAddCompletionBlockToAction:completionBlock:");
}

id objc_msgSend__scatProcessAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scatProcessAttributedString:");
}

id objc_msgSend__screen(void *a1, const char *a2, ...)
{
  return _[a1 _screen];
}

id objc_msgSend__screenHeight(void *a1, const char *a2, ...)
{
  return _[a1 _screenHeight];
}

id objc_msgSend__screenshot(void *a1, const char *a2, ...)
{
  return _[a1 _screenshot];
}

id objc_msgSend__screenshotPressed(void *a1, const char *a2, ...)
{
  return _[a1 _screenshotPressed];
}

id objc_msgSend__scrollAncestorIsSelfForScrollView_scrollAction_resultScrollAncestor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollAncestorIsSelfForScrollView:scrollAction:resultScrollAncestor:");
}

id objc_msgSend__scrollDeltaForGesture_screenSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollDeltaForGesture:screenSize:");
}

id objc_msgSend__scrollDictionaryElementWithIndex_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollDictionaryElementWithIndex:direction:");
}

id objc_msgSend__scrollDictionaryElementWithIndex_position_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollDictionaryElementWithIndex:position:");
}

id objc_msgSend__scrollFallbackGestureAtPoint_onDisplay_vertical_forward_max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollFallbackGestureAtPoint:onDisplay:vertical:forward:max:");
}

id objc_msgSend__scrollPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollPressed:");
}

id objc_msgSend__scrollPressed_fromButtonPress_vertical_forward_max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scrollPressed:fromButtonPress:vertical:forward:max:");
}

id objc_msgSend__selectAlternateKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectAlternateKey:");
}

id objc_msgSend__selectNoneForTextElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectNoneForTextElement:");
}

id objc_msgSend__selectWordForTextElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectWordForTextElement:");
}

id objc_msgSend__sendASTEnabledTipSignal(void *a1, const char *a2, ...)
{
  return _[a1 _sendASTEnabledTipSignal];
}

id objc_msgSend__sendActionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendActionWithIdentifier:");
}

id objc_msgSend__sendEventForButtonNumber_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendEventForButtonNumber:value:");
}

id objc_msgSend__sessionState(void *a1, const char *a2, ...)
{
  return _[a1 _sessionState];
}

id objc_msgSend__setApplicationAccessibilityEnabledIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _setApplicationAccessibilityEnabledIfNeeded];
}

id objc_msgSend__setBackgroundWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBackgroundWithType:");
}

id objc_msgSend__setBorderDimmed_focused_hidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBorderDimmed:focused:hidden:");
}

id objc_msgSend__setCurrentRecipe_shouldShowAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentRecipe:shouldShowAlert:");
}

id objc_msgSend__setDictionaryElementValueWithIndex_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDictionaryElementValueWithIndex:value:");
}

id objc_msgSend__setDrawsAsBackdropOverlay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDrawsAsBackdropOverlay:");
}

id objc_msgSend__setDrawsAsBackdropOverlayWithBlendMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDrawsAsBackdropOverlayWithBlendMode:");
}

id objc_msgSend__setDuckingLevelAlways_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDuckingLevelAlways:");
}

id objc_msgSend__setDuckingLevelOnlySpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDuckingLevelOnlySpeaking:");
}

id objc_msgSend__setDuckingProperties(void *a1, const char *a2, ...)
{
  return _[a1 _setDuckingProperties];
}

id objc_msgSend__setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setError:");
}

id objc_msgSend__setExpressions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setExpressions:");
}

id objc_msgSend__setHyphenationFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHyphenationFactor:");
}

id objc_msgSend__setIconDimmed_asDimAsBorder_focused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIconDimmed:asDimAsBorder:focused:");
}

id objc_msgSend__setIdleTimerDisabled_forReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIdleTimerDisabled:forReason:");
}

id objc_msgSend__setNumberOfFingersForGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNumberOfFingersForGestures:");
}

id objc_msgSend__setOverrideUserInterfaceStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOverrideUserInterfaceStyle:");
}

id objc_msgSend__setPropertiesFromDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPropertiesFromDevice:error:");
}

id objc_msgSend__setRingerSwitchIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRingerSwitchIcon:");
}

id objc_msgSend__setRotationLockIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRotationLockIcon:");
}

id objc_msgSend__setShowsFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShowsFingers:");
}

id objc_msgSend__setUSBRMPreferenceDisabled(void *a1, const char *a2, ...)
{
  return _[a1 _setUSBRMPreferenceDisabled];
}

id objc_msgSend__setUnDuckingProperties(void *a1, const char *a2, ...)
{
  return _[a1 _setUnDuckingProperties];
}

id objc_msgSend__setupAXMouseListener(void *a1, const char *a2, ...)
{
  return _[a1 _setupAXMouseListener];
}

id objc_msgSend__setupAutomationSwitches(void *a1, const char *a2, ...)
{
  return _[a1 _setupAutomationSwitches];
}

id objc_msgSend__setupConstraints(void *a1, const char *a2, ...)
{
  return _[a1 _setupConstraints];
}

id objc_msgSend__setupCurrentController(void *a1, const char *a2, ...)
{
  return _[a1 _setupCurrentController];
}

id objc_msgSend__setupElementFetcher(void *a1, const char *a2, ...)
{
  return _[a1 _setupElementFetcher];
}

id objc_msgSend__setupLogging(void *a1, const char *a2, ...)
{
  return _[a1 _setupLogging];
}

id objc_msgSend__setupMenuSheet(void *a1, const char *a2, ...)
{
  return _[a1 _setupMenuSheet];
}

id objc_msgSend__setupSubviewConstraints(void *a1, const char *a2, ...)
{
  return _[a1 _setupSubviewConstraints];
}

id objc_msgSend__setupUserInterfaceClient(void *a1, const char *a2, ...)
{
  return _[a1 _setupUserInterfaceClient];
}

id objc_msgSend__shakePressed(void *a1, const char *a2, ...)
{
  return _[a1 _shakePressed];
}

id objc_msgSend__sharedInit(void *a1, const char *a2, ...)
{
  return _[a1 _sharedInit];
}

id objc_msgSend__shiftGestureIfNeeded_onDisplay_toMidpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shiftGestureIfNeeded:onDisplay:toMidpoint:");
}

id objc_msgSend__shortcutsDidUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _shortcutsDidUpdate];
}

id objc_msgSend__shouldAutoFadeFingersOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAutoFadeFingersOnDisplay:");
}

id objc_msgSend__shouldFocusToEscapeParentGroup_elementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldFocusToEscapeParentGroup:elementManager:");
}

id objc_msgSend__shouldHandleRealEventWithMultiTouchTool(void *a1, const char *a2, ...)
{
  return _[a1 _shouldHandleRealEventWithMultiTouchTool];
}

id objc_msgSend__shouldHandleSelectActionImmediately(void *a1, const char *a2, ...)
{
  return _[a1 _shouldHandleSelectActionImmediately];
}

id objc_msgSend__shouldIgnoreAllScannerControlMessages(void *a1, const char *a2, ...)
{
  return _[a1 _shouldIgnoreAllScannerControlMessages];
}

id objc_msgSend__shouldIncludeFallbackScrollAncestorActionsInVerticalDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIncludeFallbackScrollAncestorActionsInVerticalDirection:");
}

id objc_msgSend__shouldLockIntoHotCornerAtNormalizedPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldLockIntoHotCornerAtNormalizedPoint:onDisplay:");
}

id objc_msgSend__shouldLockIntoNubbitAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldLockIntoNubbitAtPoint:");
}

id objc_msgSend__shouldPreventCalibrationForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldPreventCalibrationForError:");
}

id objc_msgSend__shouldProcessState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldProcessState:");
}

id objc_msgSend__shouldRepeatGesture(void *a1, const char *a2, ...)
{
  return _[a1 _shouldRepeatGesture];
}

id objc_msgSend__shouldRunAutoHideFingersTimer(void *a1, const char *a2, ...)
{
  return _[a1 _shouldRunAutoHideFingersTimer];
}

id objc_msgSend__shouldSetFingerContentViewToActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSetFingerContentViewToActive:");
}

id objc_msgSend__shouldShowLargeContentViewer(void *a1, const char *a2, ...)
{
  return _[a1 _shouldShowLargeContentViewer];
}

id objc_msgSend__shouldShowSideAppMenu(void *a1, const char *a2, ...)
{
  return _[a1 _shouldShowSideAppMenu];
}

id objc_msgSend__shouldSwitchControlIgnoreHIDEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSwitchControlIgnoreHIDEvent:");
}

id objc_msgSend__shouldUseDwellSelection(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseDwellSelection];
}

id objc_msgSend__shouldUseScanAbortTimer(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseScanAbortTimer];
}

id objc_msgSend__shouldUseTwoStageTyping(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseTwoStageTyping];
}

id objc_msgSend__showAlert_forSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showAlert:forSource:");
}

id objc_msgSend__showCursorsForAutoHideWithDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showCursorsForAutoHideWithDuration:");
}

id objc_msgSend__showFingersIfNeededForMouseOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showFingersIfNeededForMouseOnDisplay:");
}

id objc_msgSend__showFirstTimeAlert(void *a1, const char *a2, ...)
{
  return _[a1 _showFirstTimeAlert];
}

id objc_msgSend__showHeadTrackingErrorMessageForHeadMovementSwitchConflict(void *a1, const char *a2, ...)
{
  return _[a1 _showHeadTrackingErrorMessageForHeadMovementSwitchConflict];
}

id objc_msgSend__showScroller_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showScroller:withElement:");
}

id objc_msgSend__showSimpleBannerWithText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showSimpleBannerWithText:");
}

id objc_msgSend__showState_forSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showState:forSource:");
}

id objc_msgSend__showsRowsForSelectionPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showsRowsForSelectionPath:");
}

id objc_msgSend__sideAppMorePressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sideAppMorePressed:");
}

id objc_msgSend__sideAppPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sideAppPressed:");
}

id objc_msgSend__siriButtonPressed(void *a1, const char *a2, ...)
{
  return _[a1 _siriButtonPressed];
}

id objc_msgSend__siriShortcutsMenuPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_siriShortcutsMenuPressed:");
}

id objc_msgSend__smoothingBufferSizeForCurrentActiveEyeTracker(void *a1, const char *a2, ...)
{
  return _[a1 _smoothingBufferSizeForCurrentActiveEyeTracker];
}

id objc_msgSend__sosPressed(void *a1, const char *a2, ...)
{
  return _[a1 _sosPressed];
}

id objc_msgSend__sourceForFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sourceForFocusContext:");
}

id objc_msgSend__speakScreenPressed(void *a1, const char *a2, ...)
{
  return _[a1 _speakScreenPressed];
}

id objc_msgSend__spotlightPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spotlightPressed:");
}

id objc_msgSend__startAccessibilityEventProcessor(void *a1, const char *a2, ...)
{
  return _[a1 _startAccessibilityEventProcessor];
}

id objc_msgSend__startDetectingDevices(void *a1, const char *a2, ...)
{
  return _[a1 _startDetectingDevices];
}

id objc_msgSend__startDwellTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startDwellTimer];
}

id objc_msgSend__startDwellTimerForBubbleMode(void *a1, const char *a2, ...)
{
  return _[a1 _startDwellTimerForBubbleMode];
}

id objc_msgSend__startDwellTimerForPointer(void *a1, const char *a2, ...)
{
  return _[a1 _startDwellTimerForPointer];
}

id objc_msgSend__startGeneralTimerWithSelector_actionName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startGeneralTimerWithSelector:actionName:");
}

id objc_msgSend__startHandlingEvents(void *a1, const char *a2, ...)
{
  return _[a1 _startHandlingEvents];
}

id objc_msgSend__startHandlingReachabilityIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _startHandlingReachabilityIfNeeded];
}

id objc_msgSend__startIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startIdleTimer];
}

id objc_msgSend__startMonitoringEffectiveDeviceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 _startMonitoringEffectiveDeviceOrientation];
}

id objc_msgSend__startOrientationUpdateTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startOrientationUpdateTimer];
}

id objc_msgSend__startPickingEndPointForLineGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startPickingEndPointForLineGesture:");
}

id objc_msgSend__startRemoteControlEventProcessor(void *a1, const char *a2, ...)
{
  return _[a1 _startRemoteControlEventProcessor];
}

id objc_msgSend__startTellMeWhenTimerWithSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startTellMeWhenTimerWithSelector:");
}

id objc_msgSend__startTrackingMotionInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startTrackingMotionInput:");
}

id objc_msgSend__startWaitingForFetchAfterTemporaryPause(void *a1, const char *a2, ...)
{
  return _[a1 _startWaitingForFetchAfterTemporaryPause];
}

id objc_msgSend__startingPointForGestures(void *a1, const char *a2, ...)
{
  return _[a1 _startingPointForGestures];
}

id objc_msgSend__startingPointForGesturesForPointPicker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startingPointForGesturesForPointPicker:");
}

id objc_msgSend__startingPointsAsStrings(void *a1, const char *a2, ...)
{
  return _[a1 _startingPointsAsStrings];
}

id objc_msgSend__stepToNextFocusContextInDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stepToNextFocusContextInDirection:");
}

id objc_msgSend__stopAccessibilityEventProcessor(void *a1, const char *a2, ...)
{
  return _[a1 _stopAccessibilityEventProcessor];
}

id objc_msgSend__stopDetectingDevices(void *a1, const char *a2, ...)
{
  return _[a1 _stopDetectingDevices];
}

id objc_msgSend__stopEventProcessor(void *a1, const char *a2, ...)
{
  return _[a1 _stopEventProcessor];
}

id objc_msgSend__stopHandlingEvents(void *a1, const char *a2, ...)
{
  return _[a1 _stopHandlingEvents];
}

id objc_msgSend__stopMonitoringEffectiveDeviceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 _stopMonitoringEffectiveDeviceOrientation];
}

id objc_msgSend__stopRemoteControlEventProcessor(void *a1, const char *a2, ...)
{
  return _[a1 _stopRemoteControlEventProcessor];
}

id objc_msgSend__stopTrackingMotionInput(void *a1, const char *a2, ...)
{
  return _[a1 _stopTrackingMotionInput];
}

id objc_msgSend__stopWaitingForFetchAfterTemporaryPause(void *a1, const char *a2, ...)
{
  return _[a1 _stopWaitingForFetchAfterTemporaryPause];
}

id objc_msgSend__stringForGroupEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForGroupEnabled:");
}

id objc_msgSend__stringForRingerOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForRingerOn:");
}

id objc_msgSend__stringForSoundEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForSoundEnabled:");
}

id objc_msgSend__stringForSpeechEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForSpeechEnabled:");
}

id objc_msgSend__strokeColorForTheme_level_highVisibility_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_strokeColorForTheme:level:highVisibility:options:");
}

id objc_msgSend__strokeColorForTheme_level_pointerSizeMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_strokeColorForTheme:level:pointerSizeMultiplier:");
}

id objc_msgSend__sweepAnimationForLayer_parentBounds_slowdownMultiplier_direction_animationKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sweepAnimationForLayer:parentBounds:slowdownMultiplier:direction:animationKey:");
}

id objc_msgSend__switchConfigurationHasScreenSwitch(void *a1, const char *a2, ...)
{
  return _[a1 _switchConfigurationHasScreenSwitch];
}

id objc_msgSend__switchConfigurationRendersDeviceUnusable(void *a1, const char *a2, ...)
{
  return _[a1 _switchConfigurationRendersDeviceUnusable];
}

id objc_msgSend__switchDisplayNameForKeyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_switchDisplayNameForKeyCode:");
}

id objc_msgSend__switchEventWithAction_longPressAction_start_switchIdentifier_switchDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_switchEventWithAction:longPressAction:start:switchIdentifier:switchDisplayName:");
}

id objc_msgSend__switchKeyForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_switchKeyForEvent:");
}

id objc_msgSend__sysdiagnosePressed(void *a1, const char *a2, ...)
{
  return _[a1 _sysdiagnosePressed];
}

id objc_msgSend__systemImageNameForHardwareActionString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemImageNameForHardwareActionString:");
}

id objc_msgSend__systemPointerSettingsDidChange(void *a1, const char *a2, ...)
{
  return _[a1 _systemPointerSettingsDidChange];
}

id objc_msgSend__tailPoint(void *a1, const char *a2, ...)
{
  return _[a1 _tailPoint];
}

id objc_msgSend__tapPressed_fromButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tapPressed:fromButtonPress:");
}

id objc_msgSend__tapticEngine(void *a1, const char *a2, ...)
{
  return _[a1 _tapticEngine];
}

id objc_msgSend__theme_level_forFocusContext_cursor_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_theme:level:forFocusContext:cursor:options:");
}

id objc_msgSend__title_imageForAlternateNavigationItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_title:imageForAlternateNavigationItem:");
}

id objc_msgSend__title_imageForNavigationItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_title:imageForNavigationItem:");
}

id objc_msgSend__titleForLocalizableString_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleForLocalizableString:state:");
}

id objc_msgSend__toggleAppSwitcher(void *a1, const char *a2, ...)
{
  return _[a1 _toggleAppSwitcher];
}

id objc_msgSend__toggleAssistiveAccess(void *a1, const char *a2, ...)
{
  return _[a1 _toggleAssistiveAccess];
}

id objc_msgSend__toggleDwellControlPause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_toggleDwellControlPause:");
}

id objc_msgSend__toggleHoverTextTyping(void *a1, const char *a2, ...)
{
  return _[a1 _toggleHoverTextTyping];
}

id objc_msgSend__toggleIgnoreInputs(void *a1, const char *a2, ...)
{
  return _[a1 _toggleIgnoreInputs];
}

id objc_msgSend__toggleMute(void *a1, const char *a2, ...)
{
  return _[a1 _toggleMute];
}

id objc_msgSend__toggleNeedsToShowZoomWindow(void *a1, const char *a2, ...)
{
  return _[a1 _toggleNeedsToShowZoomWindow];
}

id objc_msgSend__trackLastFocusedKeyboardItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trackLastFocusedKeyboardItem:");
}

id objc_msgSend__trackLastScannedElementCommunityFromFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trackLastScannedElementCommunityFromFocusContext:");
}

id objc_msgSend__trackpadPressed(void *a1, const char *a2, ...)
{
  return _[a1 _trackpadPressed];
}

id objc_msgSend__traitCollectionDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_traitCollectionDidChange:");
}

id objc_msgSend__transformForOrientation(void *a1, const char *a2, ...)
{
  return _[a1 _transformForOrientation];
}

id objc_msgSend__tripleClickHomePressed(void *a1, const char *a2, ...)
{
  return _[a1 _tripleClickHomePressed];
}

id objc_msgSend__tripleHome(void *a1, const char *a2, ...)
{
  return _[a1 _tripleHome];
}

id objc_msgSend__typeToSiriButtonPressed(void *a1, const char *a2, ...)
{
  return _[a1 _typeToSiriButtonPressed];
}

id objc_msgSend__typingCandidates(void *a1, const char *a2, ...)
{
  return _[a1 _typingCandidates];
}

id objc_msgSend__uiColorForCursorColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uiColorForCursorColor:");
}

id objc_msgSend__uncacheArrowPaths(void *a1, const char *a2, ...)
{
  return _[a1 _uncacheArrowPaths];
}

id objc_msgSend__unobstructedOverflowFrameForScroller_originalOverflowFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unobstructedOverflowFrameForScroller:originalOverflowFrame:");
}

id objc_msgSend__unregisterIOFilter(void *a1, const char *a2, ...)
{
  return _[a1 _unregisterIOFilter];
}

id objc_msgSend__updateATVRemoteInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateATVRemoteInputSource];
}

id objc_msgSend__updateAXMouse(void *a1, const char *a2, ...)
{
  return _[a1 _updateAXMouse];
}

id objc_msgSend__updateAccessibilityEventInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateAccessibilityEventInputSource];
}

id objc_msgSend__updateActionsForSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateActionsForSource:");
}

id objc_msgSend__updateActiveElementManager(void *a1, const char *a2, ...)
{
  return _[a1 _updateActiveElementManager];
}

id objc_msgSend__updateActiveElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateActiveElementManager:");
}

id objc_msgSend__updateAirPodsSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateAirPodsSource];
}

id objc_msgSend__updateAlternateKeys(void *a1, const char *a2, ...)
{
  return _[a1 _updateAlternateKeys];
}

id objc_msgSend__updateAnimationKeyWithPrefix_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAnimationKeyWithPrefix:direction:");
}

id objc_msgSend__updateAppearanceForStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAppearanceForStyle:");
}

id objc_msgSend__updateAudioSessionProperties(void *a1, const char *a2, ...)
{
  return _[a1 _updateAudioSessionProperties];
}

id objc_msgSend__updateAudioSessionState(void *a1, const char *a2, ...)
{
  return _[a1 _updateAudioSessionState];
}

id objc_msgSend__updateAutoHideMousePointer(void *a1, const char *a2, ...)
{
  return _[a1 _updateAutoHideMousePointer];
}

id objc_msgSend__updateBackButtonVisibility(void *a1, const char *a2, ...)
{
  return _[a1 _updateBackButtonVisibility];
}

id objc_msgSend__updateBackdropWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBackdropWithPath:");
}

id objc_msgSend__updateCameraHandGestureSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateCameraHandGestureSource];
}

id objc_msgSend__updateCameraPointPickerSwitchesCache(void *a1, const char *a2, ...)
{
  return _[a1 _updateCameraPointPickerSwitchesCache];
}

id objc_msgSend__updateCameraSwitchCache(void *a1, const char *a2, ...)
{
  return _[a1 _updateCameraSwitchCache];
}

id objc_msgSend__updateContentSizeForSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContentSizeForSheet:");
}

id objc_msgSend__updateControls(void *a1, const char *a2, ...)
{
  return _[a1 _updateControls];
}

id objc_msgSend__updateCursor_withFocusContext_shouldAnimate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCursor:withFocusContext:shouldAnimate:options:");
}

id objc_msgSend__updateCursorDrawing(void *a1, const char *a2, ...)
{
  return _[a1 _updateCursorDrawing];
}

id objc_msgSend__updateCurvatureControl_withTailPoint_tailAngle_distance_curvature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCurvatureControl:withTailPoint:tailAngle:distance:curvature:");
}

id objc_msgSend__updateDuckingMode(void *a1, const char *a2, ...)
{
  return _[a1 _updateDuckingMode];
}

id objc_msgSend__updateElementVisuals(void *a1, const char *a2, ...)
{
  return _[a1 _updateElementVisuals];
}

id objc_msgSend__updateEyeTrackingAutoHideIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _updateEyeTrackingAutoHideIfNecessary];
}

id objc_msgSend__updateFallbackScrollAncestorsForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFallbackScrollAncestorsForElement:");
}

id objc_msgSend__updateFont(void *a1, const char *a2, ...)
{
  return _[a1 _updateFont];
}

id objc_msgSend__updateForGeometryChange(void *a1, const char *a2, ...)
{
  return _[a1 _updateForGeometryChange];
}

id objc_msgSend__updateGamepadInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateGamepadInputSource];
}

id objc_msgSend__updateGridProperties(void *a1, const char *a2, ...)
{
  return _[a1 _updateGridProperties];
}

id objc_msgSend__updateHeadGesturesInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateHeadGesturesInputSource];
}

id objc_msgSend__updateImage(void *a1, const char *a2, ...)
{
  return _[a1 _updateImage];
}

id objc_msgSend__updateImageView(void *a1, const char *a2, ...)
{
  return _[a1 _updateImageView];
}

id objc_msgSend__updateInputSources(void *a1, const char *a2, ...)
{
  return _[a1 _updateInputSources];
}

id objc_msgSend__updateInterDeviceInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateInterDeviceInputSource];
}

id objc_msgSend__updateIsInputCoalesceEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _updateIsInputCoalesceEnabled];
}

id objc_msgSend__updateIsInputHoldEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _updateIsInputHoldEnabled];
}

id objc_msgSend__updateIsInputRepeatEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _updateIsInputRepeatEnabled];
}

id objc_msgSend__updateKeyboardFocusIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _updateKeyboardFocusIfNeeded];
}

id objc_msgSend__updateKeyboardInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateKeyboardInputSource];
}

id objc_msgSend__updateKeyboardMonitorStateIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _updateKeyboardMonitorStateIfNeeded];
}

id objc_msgSend__updateLabelText(void *a1, const char *a2, ...)
{
  return _[a1 _updateLabelText];
}

id objc_msgSend__updateLargeContentViewerIfNeededForView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLargeContentViewerIfNeededForView:");
}

id objc_msgSend__updateMFIInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateMFIInputSource];
}

id objc_msgSend__updateMIDIInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateMIDIInputSource];
}

id objc_msgSend__updateMenuAfterElementFetchFoundNewElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMenuAfterElementFetchFoundNewElements:");
}

id objc_msgSend__updateMenuLayoutForSheet_sheetViewController_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMenuLayoutForSheet:sheetViewController:animated:");
}

id objc_msgSend__updateMenuOpeningElementEnabledWithFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateMenuOpeningElementEnabledWithFocusContext:");
}

id objc_msgSend__updateMotionTrackerExpressionConfig(void *a1, const char *a2, ...)
{
  return _[a1 _updateMotionTrackerExpressionConfig];
}

id objc_msgSend__updateMotionTrackingInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateMotionTrackingInputSource];
}

id objc_msgSend__updateNubbitEdgePosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNubbitEdgePosition:");
}

id objc_msgSend__updateNubbitFadedProperties(void *a1, const char *a2, ...)
{
  return _[a1 _updateNubbitFadedProperties];
}

id objc_msgSend__updateNubbitPosition(void *a1, const char *a2, ...)
{
  return _[a1 _updateNubbitPosition];
}

id objc_msgSend__updateOptionsIfNeeded_withResultElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOptionsIfNeeded:withResultElement:");
}

id objc_msgSend__updatePresentationProperties(void *a1, const char *a2, ...)
{
  return _[a1 _updatePresentationProperties];
}

id objc_msgSend__updatePresentationProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePresentationProperties:");
}

id objc_msgSend__updateProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateProgress:");
}

id objc_msgSend__updatePromptBackdropViewMask(void *a1, const char *a2, ...)
{
  return _[a1 _updatePromptBackdropViewMask];
}

id objc_msgSend__updateRemoteControlInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateRemoteControlInputSource];
}

id objc_msgSend__updateRockerItemIfNeededForItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRockerItemIfNeededForItem:");
}

id objc_msgSend__updateRockerReachability(void *a1, const char *a2, ...)
{
  return _[a1 _updateRockerReachability];
}

id objc_msgSend__updateRotation90Controls(void *a1, const char *a2, ...)
{
  return _[a1 _updateRotation90Controls];
}

id objc_msgSend__updateRotationControls(void *a1, const char *a2, ...)
{
  return _[a1 _updateRotationControls];
}

id objc_msgSend__updateSCNeedsCameraOnLockScreen(void *a1, const char *a2, ...)
{
  return _[a1 _updateSCNeedsCameraOnLockScreen];
}

id objc_msgSend__updateSCNeedsMicrophoneOnLockScreen(void *a1, const char *a2, ...)
{
  return _[a1 _updateSCNeedsMicrophoneOnLockScreen];
}

id objc_msgSend__updateScanningStyle(void *a1, const char *a2, ...)
{
  return _[a1 _updateScanningStyle];
}

id objc_msgSend__updateScreenInputSource(void *a1, const char *a2, ...)
{
  return _[a1 _updateScreenInputSource];
}

id objc_msgSend__updateScrollableElement(void *a1, const char *a2, ...)
{
  return _[a1 _updateScrollableElement];
}

id objc_msgSend__updateSelectedButton(void *a1, const char *a2, ...)
{
  return _[a1 _updateSelectedButton];
}

id objc_msgSend__updateSensitivityMultiplier(void *a1, const char *a2, ...)
{
  return _[a1 _updateSensitivityMultiplier];
}

id objc_msgSend__updateShowsFingers(void *a1, const char *a2, ...)
{
  return _[a1 _updateShowsFingers];
}

id objc_msgSend__updateSpeakScreenStatus(void *a1, const char *a2, ...)
{
  return _[a1 _updateSpeakScreenStatus];
}

id objc_msgSend__updateStartingPointForGesturesWithScreenPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStartingPointForGesturesWithScreenPoint:");
}

id objc_msgSend__updateStartingPointForGesturesWithScreenPoint_forDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateStartingPointForGesturesWithScreenPoint:forDisplayID:");
}

id objc_msgSend__updateTimeIntervalBeforeSendAction(void *a1, const char *a2, ...)
{
  return _[a1 _updateTimeIntervalBeforeSendAction];
}

id objc_msgSend__updateTimeIntervalBeforeSendRepeatAction(void *a1, const char *a2, ...)
{
  return _[a1 _updateTimeIntervalBeforeSendRepeatAction];
}

id objc_msgSend__updateTimeIntervalBetweenDidSendActions(void *a1, const char *a2, ...)
{
  return _[a1 _updateTimeIntervalBetweenDidSendActions];
}

id objc_msgSend__updateViewsForOrientation(void *a1, const char *a2, ...)
{
  return _[a1 _updateViewsForOrientation];
}

id objc_msgSend__updateVisibleFingers(void *a1, const char *a2, ...)
{
  return _[a1 _updateVisibleFingers];
}

id objc_msgSend__updateVisualProviderWithMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateVisualProviderWithMenu:");
}

id objc_msgSend__updateVisuals(void *a1, const char *a2, ...)
{
  return _[a1 _updateVisuals];
}

id objc_msgSend__updateVolumeDisplay(void *a1, const char *a2, ...)
{
  return _[a1 _updateVolumeDisplay];
}

id objc_msgSend__updateWithElement_forceUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithElement:forceUpdate:");
}

id objc_msgSend__updateZoom_withElement_cursorController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateZoom:withElement:cursorController:");
}

id objc_msgSend__updateZoomWithDisplayPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateZoomWithDisplayPoint:");
}

id objc_msgSend__updateZoomWithDisplayPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateZoomWithDisplayPoint:onDisplay:");
}

id objc_msgSend__urlForSoundEffect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_urlForSoundEffect:");
}

id objc_msgSend__urlMatchesLoadableCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_urlMatchesLoadableCode:");
}

id objc_msgSend__useHighVisibilityImage(void *a1, const char *a2, ...)
{
  return _[a1 _useHighVisibilityImage];
}

id objc_msgSend__useOverrideDeviceCount(void *a1, const char *a2, ...)
{
  return _[a1 _useOverrideDeviceCount];
}

id objc_msgSend__useVibrantBlendMode(void *a1, const char *a2, ...)
{
  return _[a1 _useVibrantBlendMode];
}

id objc_msgSend__userHasDisabledUSBRM(void *a1, const char *a2, ...)
{
  return _[a1 _userHasDisabledUSBRM];
}

id objc_msgSend__usesAVAudioPlayer(void *a1, const char *a2, ...)
{
  return _[a1 _usesAVAudioPlayer];
}

id objc_msgSend__usesCircularNubbit(void *a1, const char *a2, ...)
{
  return _[a1 _usesCircularNubbit];
}

id objc_msgSend__validateNubbitPosition_forKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateNubbitPosition:forKeyboard:");
}

id objc_msgSend__validatedSelectBehaviorForCurrentSelectBehavior_replacementElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validatedSelectBehaviorForCurrentSelectBehavior:replacementElement:");
}

id objc_msgSend__visibleCellForMenuItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visibleCellForMenuItem:");
}

id objc_msgSend__voiceControlPressed(void *a1, const char *a2, ...)
{
  return _[a1 _voiceControlPressed];
}

id objc_msgSend__voiceOverBundle(void *a1, const char *a2, ...)
{
  return _[a1 _voiceOverBundle];
}

id objc_msgSend__volume(void *a1, const char *a2, ...)
{
  return _[a1 _volume];
}

id objc_msgSend__volumeDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_volumeDown:");
}

id objc_msgSend__volumeUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_volumeUp:");
}

id objc_msgSend__watchRemoteScreenPressed(void *a1, const char *a2, ...)
{
  return _[a1 _watchRemoteScreenPressed];
}

id objc_msgSend__willStepToNextFocusContext_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willStepToNextFocusContext:inDirection:");
}

id objc_msgSend__willTransitionToPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willTransitionToPhase:");
}

id objc_msgSend__windowWithUserInteractionEnabled_windowLevel_createIfNeeded_purposeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_windowWithUserInteractionEnabled:windowLevel:createIfNeeded:purposeIdentifier:");
}

id objc_msgSend__xNubbitPadding_x_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xNubbitPadding:x:");
}

id objc_msgSend__xValueForDockItemAtIndex_layoutAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_xValueForDockItemAtIndex:layoutAttributes:");
}

id objc_msgSend__yNubbitPadding_y_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_yNubbitPadding:y:");
}

id objc_msgSend__zoomDictionaryElementWithIndex_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_zoomDictionaryElementWithIndex:direction:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_accessibilityData(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityData];
}

id objc_msgSend_accessibilityEnabled(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityEnabled];
}

id objc_msgSend_accessibilityEventInputSource(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityEventInputSource];
}

id objc_msgSend_accessibilityEventRepresentationWithSender_usagePage_usage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityEventRepresentationWithSender:usagePage:usage:");
}

id objc_msgSend_accessibilityEventUsage(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityEventUsage];
}

id objc_msgSend_accessibilityEventUsagePage(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityEventUsagePage];
}

id objc_msgSend_accessibilityFrame(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityFrame];
}

id objc_msgSend_accessibilityIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityIdentifier];
}

id objc_msgSend_accessibilityLabel(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityLabel];
}

id objc_msgSend_accessibilityManager_applicationWasActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManager:applicationWasActivated:");
}

id objc_msgSend_accessibilityManager_didFetchElementsForEvent_foundNewElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManager:didFetchElementsForEvent:foundNewElements:");
}

id objc_msgSend_accessibilityManager_didReceiveEvent_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManager:didReceiveEvent:data:");
}

id objc_msgSend_accessibilityManager_didScheduleFetchEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManager:didScheduleFetchEvent:");
}

id objc_msgSend_accessibilityManager_mediaDidBegin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManager:mediaDidBegin:");
}

id objc_msgSend_accessibilityManager_nativeFocusElementDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManager:nativeFocusElementDidChange:");
}

id objc_msgSend_accessibilityManager_screenWillChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManager:screenWillChange:");
}

id objc_msgSend_accessibilityManager_updateElementVisuals_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManager:updateElementVisuals:");
}

id objc_msgSend_accessibilityManager_willFetchElementsForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManager:willFetchElementsForEvent:");
}

id objc_msgSend_accessibilityManagerShouldPauseScanning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManagerShouldPauseScanning:");
}

id objc_msgSend_accessibilityManagerShouldResumeScanning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityManagerShouldResumeScanning:");
}

id objc_msgSend_accessibilityObservers(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityObservers];
}

id objc_msgSend_accessibilityRespondsToUserInteraction(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityRespondsToUserInteraction];
}

id objc_msgSend_accessibilityUserDefinedLabel(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityUserDefinedLabel];
}

id objc_msgSend_acquireAssertionToDisableIdleTimerWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireAssertionToDisableIdleTimerWithReason:");
}

id objc_msgSend_acquireAssertionToSuppressVisualsWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireAssertionToSuppressVisualsWithReason:");
}

id objc_msgSend_acquireRestrictSystemApertureLayoutToInertAssertionWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireRestrictSystemApertureLayoutToInertAssertionWithReason:");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _[a1 action];
}

id objc_msgSend_actionCount(void *a1, const char *a2, ...)
{
  return _[a1 actionCount];
}

id objc_msgSend_actionForButtonNumber_withType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionForButtonNumber:withType:");
}

id objc_msgSend_actionForHardwareActionString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionForHardwareActionString:");
}

id objc_msgSend_actionHandler_shouldActImmediatelyOnActionCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionHandler:shouldActImmediatelyOnActionCount:");
}

id objc_msgSend_actionHandlerDidCancelPendingAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionHandlerDidCancelPendingAction:");
}

id objc_msgSend_actionHandlerDidFireAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionHandlerDidFireAction:");
}

id objc_msgSend_actionHandlerForUI_willPerformDelayedActionOnContext_withCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionHandlerForUI:willPerformDelayedActionOnContext:withCount:");
}

id objc_msgSend_actionHandlerForUIDidCancelPendingAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionHandlerForUIDidCancelPendingAction:");
}

id objc_msgSend_actionHandlerForUIWillFireAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionHandlerForUIWillFireAction:");
}

id objc_msgSend_actionIdentifierForButtonNumber_withType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionIdentifierForButtonNumber:withType:");
}

id objc_msgSend_actionIdentifiersToRecipeMappingIndices(void *a1, const char *a2, ...)
{
  return _[a1 actionIdentifiersToRecipeMappingIndices];
}

id objc_msgSend_actionOverride(void *a1, const char *a2, ...)
{
  return _[a1 actionOverride];
}

id objc_msgSend_actionOverrideForUsagePage_usage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionOverrideForUsagePage:usage:");
}

id objc_msgSend_actionTimeoutTimer(void *a1, const char *a2, ...)
{
  return _[a1 actionTimeoutTimer];
}

id objc_msgSend_actionToStop(void *a1, const char *a2, ...)
{
  return _[a1 actionToStop];
}

id objc_msgSend_actionType(void *a1, const char *a2, ...)
{
  return _[a1 actionType];
}

id objc_msgSend_actionWithString_shouldQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithString:shouldQueue:");
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _[a1 actions];
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activateActionHandler(void *a1, const char *a2, ...)
{
  return _[a1 activateActionHandler];
}

id objc_msgSend_activateAssistiveTouchAction_fromButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateAssistiveTouchAction:fromButtonPress:");
}

id objc_msgSend_activateBehavior(void *a1, const char *a2, ...)
{
  return _[a1 activateBehavior];
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateConstraints:");
}

id objc_msgSend_activateCurrentBubbleModeFocusedElement(void *a1, const char *a2, ...)
{
  return _[a1 activateCurrentBubbleModeFocusedElement];
}

id objc_msgSend_activateDetectionMode(void *a1, const char *a2, ...)
{
  return _[a1 activateDetectionMode];
}

id objc_msgSend_activateDisplayItems(void *a1, const char *a2, ...)
{
  return _[a1 activateDisplayItems];
}

id objc_msgSend_activateElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateElement:");
}

id objc_msgSend_activateHandler(void *a1, const char *a2, ...)
{
  return _[a1 activateHandler];
}

id objc_msgSend_activateHomeButton(void *a1, const char *a2, ...)
{
  return _[a1 activateHomeButton];
}

id objc_msgSend_activateLockButton(void *a1, const char *a2, ...)
{
  return _[a1 activateLockButton];
}

id objc_msgSend_activateMenuItemDown_fromButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateMenuItemDown:fromButtonPress:");
}

id objc_msgSend_activateMenuItemUp_fromButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateMenuItemUp:fromButtonPress:");
}

id objc_msgSend_activateSOSMode(void *a1, const char *a2, ...)
{
  return _[a1 activateSOSMode];
}

id objc_msgSend_activateSiri(void *a1, const char *a2, ...)
{
  return _[a1 activateSiri];
}

id objc_msgSend_activateTripleClick(void *a1, const char *a2, ...)
{
  return _[a1 activateTripleClick];
}

id objc_msgSend_activateTypeToSiri(void *a1, const char *a2, ...)
{
  return _[a1 activateTypeToSiri];
}

id objc_msgSend_activateVoiceControl(void *a1, const char *a2, ...)
{
  return _[a1 activateVoiceControl];
}

id objc_msgSend_activationBehavior(void *a1, const char *a2, ...)
{
  return _[a1 activationBehavior];
}

id objc_msgSend_activeContinuousScroller(void *a1, const char *a2, ...)
{
  return _[a1 activeContinuousScroller];
}

id objc_msgSend_activeElementManager(void *a1, const char *a2, ...)
{
  return _[a1 activeElementManager];
}

id objc_msgSend_activeElementManagerForDriver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeElementManagerForDriver:");
}

id objc_msgSend_activeInterfaceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 activeInterfaceOrientation];
}

id objc_msgSend_activeScannerDriver(void *a1, const char *a2, ...)
{
  return _[a1 activeScannerDriver];
}

id objc_msgSend_activeSoundIDs(void *a1, const char *a2, ...)
{
  return _[a1 activeSoundIDs];
}

id objc_msgSend_activityIndicatorView(void *a1, const char *a2, ...)
{
  return _[a1 activityIndicatorView];
}

id objc_msgSend_actualDistanceForPreview(void *a1, const char *a2, ...)
{
  return _[a1 actualDistanceForPreview];
}

id objc_msgSend_actuateFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actuateFeedback:");
}

id objc_msgSend_adHocFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adHocFocusContext:");
}

id objc_msgSend_addActiveClientWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addActiveClientWithReason:");
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimation:forKey:");
}

id objc_msgSend_addArcWithCenter_radius_startAngle_endAngle_clockwise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addArcWithCenter:radius:startAngle:endAngle:clockwise:");
}

id objc_msgSend_addAttributesToAction_fromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributesToAction:fromDictionary:");
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildViewController:");
}

id objc_msgSend_addConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConstraints:");
}

id objc_msgSend_addDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDevice:");
}

id objc_msgSend_addEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventHandler:");
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGestureRecognizer:");
}

id objc_msgSend_addInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInput:");
}

id objc_msgSend_addLineToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLineToPoint:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOutput:");
}

id objc_msgSend_addPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPoint:");
}

id objc_msgSend_addPointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPointer:");
}

id objc_msgSend_addPointerDeviceObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPointerDeviceObserver:");
}

id objc_msgSend_addPointerPointPickerForMovementNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPointerPointPickerForMovementNotifications:");
}

id objc_msgSend_addPointerStreamObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPointerStreamObserver:");
}

id objc_msgSend_addPostFetchFilter_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPostFetchFilter:withIdentifier:");
}

id objc_msgSend_addProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addProvider:");
}

id objc_msgSend_addProviderWithElements_passingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addProviderWithElements:passingTest:");
}

id objc_msgSend_addReasonToDisableScanning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addReasonToDisableScanning:");
}

id objc_msgSend_addReasonToEnableSoftwareKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addReasonToEnableSoftwareKeyboard:");
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSublayer:");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:forControlEvents:");
}

id objc_msgSend_addToRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToRunLoop:forMode:");
}

id objc_msgSend_addUserInterfaceClientEnabler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUserInterfaceClientEnabler:");
}

id objc_msgSend_additionalAXNotificationsToObserve(void *a1, const char *a2, ...)
{
  return _[a1 additionalAXNotificationsToObserve];
}

id objc_msgSend_additionalFlags(void *a1, const char *a2, ...)
{
  return _[a1 additionalFlags];
}

id objc_msgSend_addressString(void *a1, const char *a2, ...)
{
  return _[a1 addressString];
}

id objc_msgSend_adjustSystemZoom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustSystemZoom:");
}

id objc_msgSend_adjustVisibleItemOffsetForPageBoundary(void *a1, const char *a2, ...)
{
  return _[a1 adjustVisibleItemOffsetForPageBoundary];
}

id objc_msgSend_afterDelay_processBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterDelay:processBlock:");
}

id objc_msgSend_afterDelay_processBlock_cancelBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterDelay:processBlock:cancelBlock:");
}

id objc_msgSend_airPodsSource(void *a1, const char *a2, ...)
{
  return _[a1 airPodsSource];
}

id objc_msgSend_alertDidAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertDidAppear:");
}

id objc_msgSend_allAuxiliaryElementManagers(void *a1, const char *a2, ...)
{
  return _[a1 allAuxiliaryElementManagers];
}

id objc_msgSend_allElements(void *a1, const char *a2, ...)
{
  return _[a1 allElements];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allTargets(void *a1, const char *a2, ...)
{
  return _[a1 allTargets];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allowedMedusaGestures(void *a1, const char *a2, ...)
{
  return _[a1 allowedMedusaGestures];
}

id objc_msgSend_allowedTrackingTypes(void *a1, const char *a2, ...)
{
  return _[a1 allowedTrackingTypes];
}

id objc_msgSend_allowsBackAction(void *a1, const char *a2, ...)
{
  return _[a1 allowsBackAction];
}

id objc_msgSend_allowsDwellScanningToAbortAfterTimeout(void *a1, const char *a2, ...)
{
  return _[a1 allowsDwellScanningToAbortAfterTimeout];
}

id objc_msgSend_allowsDwellSelection(void *a1, const char *a2, ...)
{
  return _[a1 allowsDwellSelection];
}

id objc_msgSend_allowsExitAction(void *a1, const char *a2, ...)
{
  return _[a1 allowsExitAction];
}

id objc_msgSend_allowsSelectionRefinement(void *a1, const char *a2, ...)
{
  return _[a1 allowsSelectionRefinement];
}

id objc_msgSend_alpha(void *a1, const char *a2, ...)
{
  return _[a1 alpha];
}

id objc_msgSend_alphaComponent(void *a1, const char *a2, ...)
{
  return _[a1 alphaComponent];
}

id objc_msgSend_alphaForFingers(void *a1, const char *a2, ...)
{
  return _[a1 alphaForFingers];
}

id objc_msgSend_alternateKeysManager(void *a1, const char *a2, ...)
{
  return _[a1 alternateKeysManager];
}

id objc_msgSend_alternateKeysManager_didSelectAlternateKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateKeysManager:didSelectAlternateKey:");
}

id objc_msgSend_alternateTipElement(void *a1, const char *a2, ...)
{
  return _[a1 alternateTipElement];
}

id objc_msgSend_alwaysShowMenu(void *a1, const char *a2, ...)
{
  return _[a1 alwaysShowMenu];
}

id objc_msgSend_angle(void *a1, const char *a2, ...)
{
  return _[a1 angle];
}

id objc_msgSend_angleForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "angleForFreehandSheet:");
}

id objc_msgSend_animateBubbleCursorDwellWithDuration_inRocker_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateBubbleCursorDwellWithDuration:inRocker:completion:");
}

id objc_msgSend_animateForReachability_payload_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateForReachability:payload:completion:");
}

id objc_msgSend_animateToTapWithDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateToTapWithDuration:");
}

id objc_msgSend_animateWithDuration_animations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:");
}

id objc_msgSend_animateWithDuration_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:completion:");
}

id objc_msgSend_animateWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:delay:options:animations:completion:");
}

id objc_msgSend_animationEndButtonForButtonTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationEndButtonForButtonTag:");
}

id objc_msgSend_animationForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationForKey:");
}

id objc_msgSend_animationKey(void *a1, const char *a2, ...)
{
  return _[a1 animationKey];
}

id objc_msgSend_animationKeys(void *a1, const char *a2, ...)
{
  return _[a1 animationKeys];
}

id objc_msgSend_animationWithKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationWithKeyPath:");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appSwitcherButton(void *a1, const char *a2, ...)
{
  return _[a1 appSwitcherButton];
}

id objc_msgSend_appTransitionDidOccur_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appTransitionDidOccur:");
}

id objc_msgSend_appValidationTestingMode(void *a1, const char *a2, ...)
{
  return _[a1 appValidationTestingMode];
}

id objc_msgSend_appearanceDelegate(void *a1, const char *a2, ...)
{
  return _[a1 appearanceDelegate];
}

id objc_msgSend_appendAuxiliaryElementManager_withRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAuxiliaryElementManager:withRole:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendPath:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_applePayButton(void *a1, const char *a2, ...)
{
  return _[a1 applePayButton];
}

id objc_msgSend_application(void *a1, const char *a2, ...)
{
  return _[a1 application];
}

id objc_msgSend_applicationIsRTL(void *a1, const char *a2, ...)
{
  return _[a1 applicationIsRTL];
}

id objc_msgSend_applyAccessibilityDataToCreatorHIDEvent(void *a1, const char *a2, ...)
{
  return _[a1 applyAccessibilityDataToCreatorHIDEvent];
}

id objc_msgSend_applyElementAttributeCacheScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyElementAttributeCacheScheme:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_areFingersPressed(void *a1, const char *a2, ...)
{
  return _[a1 areFingersPressed];
}

id objc_msgSend_areItemsSorted(void *a1, const char *a2, ...)
{
  return _[a1 areItemsSorted];
}

id objc_msgSend_areSoundEffectsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 areSoundEffectsEnabled];
}

id objc_msgSend_armApplePay(void *a1, const char *a2, ...)
{
  return _[a1 armApplePay];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithAXAttribute:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_arrowHeadBaseAngle(void *a1, const char *a2, ...)
{
  return _[a1 arrowHeadBaseAngle];
}

id objc_msgSend_arrowHeadBaseOffset(void *a1, const char *a2, ...)
{
  return _[a1 arrowHeadBaseOffset];
}

id objc_msgSend_arrowHeadBaseRadius(void *a1, const char *a2, ...)
{
  return _[a1 arrowHeadBaseRadius];
}

id objc_msgSend_arrowHeadTipOffset(void *a1, const char *a2, ...)
{
  return _[a1 arrowHeadTipOffset];
}

id objc_msgSend_arrowView(void *a1, const char *a2, ...)
{
  return _[a1 arrowView];
}

id objc_msgSend_assertionWithType_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertionWithType:identifier:");
}

id objc_msgSend_assistiveTouchActionRepeatEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchActionRepeatEnabled];
}

id objc_msgSend_assistiveTouchActionRepeatInterval(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchActionRepeatInterval];
}

id objc_msgSend_assistiveTouchActionsBySoundAction(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchActionsBySoundAction];
}

id objc_msgSend_assistiveTouchAlwaysShowMenuEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchAlwaysShowMenuEnabled];
}

id objc_msgSend_assistiveTouchAxisSweepSpeed(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchAxisSweepSpeed];
}

id objc_msgSend_assistiveTouchBubbleModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchBubbleModeEnabled];
}

id objc_msgSend_assistiveTouchCameraPointPickerSwitches(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchCameraPointPickerSwitches];
}

id objc_msgSend_assistiveTouchCameraSwitchPreviewEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchCameraSwitchPreviewEnabled];
}

id objc_msgSend_assistiveTouchCursorColor(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchCursorColor];
}

id objc_msgSend_assistiveTouchCustomGestures(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchCustomGestures];
}

id objc_msgSend_assistiveTouchDelayAfterInput(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchDelayAfterInput];
}

id objc_msgSend_assistiveTouchDelayAfterInputEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchDelayAfterInputEnabled];
}

id objc_msgSend_assistiveTouchDidLaunch(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchDidLaunch];
}

id objc_msgSend_assistiveTouchDoubleTapAction(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchDoubleTapAction];
}

id objc_msgSend_assistiveTouchDoubleTapActionTimeout(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchDoubleTapActionTimeout];
}

id objc_msgSend_assistiveTouchEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchEnabled];
}

id objc_msgSend_assistiveTouchEnabledByOnDeviceEyeTracking(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchEnabledByOnDeviceEyeTracking];
}

id objc_msgSend_assistiveTouchEyeTrackingAutoHideEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchEyeTrackingAutoHideEnabled];
}

id objc_msgSend_assistiveTouchEyeTrackingAutoHideOpacity(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchEyeTrackingAutoHideOpacity];
}

id objc_msgSend_assistiveTouchEyeTrackingAutoHideTimeout(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchEyeTrackingAutoHideTimeout];
}

id objc_msgSend_assistiveTouchEyeTrackingUseZoomForKeyboardKeys(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchEyeTrackingUseZoomForKeyboardKeys];
}

id objc_msgSend_assistiveTouchForceEyeTrackerExperience(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchForceEyeTrackerExperience];
}

id objc_msgSend_assistiveTouchGameControllerEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchGameControllerEnabled];
}

id objc_msgSend_assistiveTouchGroupElementsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchGroupElementsEnabled];
}

id objc_msgSend_assistiveTouchHeadMovementSensitivity(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchHeadMovementSensitivity];
}

id objc_msgSend_assistiveTouchIdleOpacity(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchIdleOpacity];
}

id objc_msgSend_assistiveTouchInputCoalescingDuration(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchInputCoalescingDuration];
}

id objc_msgSend_assistiveTouchInputCoalescingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchInputCoalescingEnabled];
}

id objc_msgSend_assistiveTouchInputHoldDuration(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchInputHoldDuration];
}

id objc_msgSend_assistiveTouchInputHoldEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchInputHoldEnabled];
}

id objc_msgSend_assistiveTouchInternalOnlyHiddenNubbitModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchInternalOnlyHiddenNubbitModeEnabled];
}

id objc_msgSend_assistiveTouchInternalOnlyPearlTrackingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchInternalOnlyPearlTrackingEnabled];
}

id objc_msgSend_assistiveTouchLongPressAction(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchLongPressAction];
}

id objc_msgSend_assistiveTouchLongPressActionDuration(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchLongPressActionDuration];
}

id objc_msgSend_assistiveTouchLongPressDuration(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchLongPressDuration];
}

id objc_msgSend_assistiveTouchLongPressEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchLongPressEnabled];
}

id objc_msgSend_assistiveTouchLongPressPauseScanningEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchLongPressPauseScanningEnabled];
}

id objc_msgSend_assistiveTouchMainScreenCustomization(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMainScreenCustomization];
}

id objc_msgSend_assistiveTouchMainScreenDefaultCustomization(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMainScreenDefaultCustomization];
}

id objc_msgSend_assistiveTouchMotionTrackerShouldOffsetBufferPoints(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMotionTrackerShouldOffsetBufferPoints];
}

id objc_msgSend_assistiveTouchMotionTrackerSmoothingBufferSize(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMotionTrackerSmoothingBufferSize];
}

id objc_msgSend_assistiveTouchMotionTrackerSmoothingMaxDelta(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMotionTrackerSmoothingMaxDelta];
}

id objc_msgSend_assistiveTouchMotionTrackerXNormalizationOffset(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMotionTrackerXNormalizationOffset];
}

id objc_msgSend_assistiveTouchMotionTrackerXNormalizationOrder(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMotionTrackerXNormalizationOrder];
}

id objc_msgSend_assistiveTouchMotionTrackerYNormalizationOffset(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMotionTrackerYNormalizationOffset];
}

id objc_msgSend_assistiveTouchMotionTrackerYNormalizationOrder(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMotionTrackerYNormalizationOrder];
}

id objc_msgSend_assistiveTouchMouseAlwaysShowSoftwareKeyboardEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseAlwaysShowSoftwareKeyboardEnabled];
}

id objc_msgSend_assistiveTouchMouseBehavesLikeFinger(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseBehavesLikeFinger];
}

id objc_msgSend_assistiveTouchMouseClickSoundsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseClickSoundsEnabled];
}

id objc_msgSend_assistiveTouchMouseDwellControlActivationTimeout(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseDwellControlActivationTimeout];
}

id objc_msgSend_assistiveTouchMouseDwellControlAutorevertAction(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseDwellControlAutorevertAction];
}

id objc_msgSend_assistiveTouchMouseDwellControlAutorevertEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseDwellControlAutorevertEnabled];
}

id objc_msgSend_assistiveTouchMouseDwellControlCornerCustomization(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseDwellControlCornerCustomization];
}

id objc_msgSend_assistiveTouchMouseDwellControlEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseDwellControlEnabled];
}

id objc_msgSend_assistiveTouchMouseDwellControlMovementToleranceRadius(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseDwellControlMovementToleranceRadius];
}

id objc_msgSend_assistiveTouchMouseDwellControlMutatedMenu(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseDwellControlMutatedMenu];
}

id objc_msgSend_assistiveTouchMouseDwellControlShowPrompt(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseDwellControlShowPrompt];
}

id objc_msgSend_assistiveTouchMouseKeysDelay(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseKeysDelay];
}

id objc_msgSend_assistiveTouchMouseKeysEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseKeysEnabled];
}

id objc_msgSend_assistiveTouchMouseKeysMaxSpeed(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseKeysMaxSpeed];
}

id objc_msgSend_assistiveTouchMouseKeysOptionToggleEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseKeysOptionToggleEnabled];
}

id objc_msgSend_assistiveTouchMouseKeysUseMainKeyboardKeys(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseKeysUseMainKeyboardKeys];
}

id objc_msgSend_assistiveTouchMouseOnDeviceEyeTrackingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseOnDeviceEyeTrackingEnabled];
}

id objc_msgSend_assistiveTouchMouseOnDeviceEyeTrackingShouldShowUncalibratedPoints(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseOnDeviceEyeTrackingShouldShowUncalibratedPoints];
}

id objc_msgSend_assistiveTouchMousePointerColor(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMousePointerColor];
}

id objc_msgSend_assistiveTouchMousePointerSizeMultiplier(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMousePointerSizeMultiplier];
}

id objc_msgSend_assistiveTouchMousePointerTimeout(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMousePointerTimeout];
}

id objc_msgSend_assistiveTouchMousePointerTimeoutEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMousePointerTimeoutEnabled];
}

id objc_msgSend_assistiveTouchMouseZoomPanningStyle(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchMouseZoomPanningStyle];
}

id objc_msgSend_assistiveTouchOnDeviceEyeTrackingShouldUseGaussianBlur(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchOnDeviceEyeTrackingShouldUseGaussianBlur];
}

id objc_msgSend_assistiveTouchOnDeviceEyeTrackingShouldUseMotionFilter(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchOnDeviceEyeTrackingShouldUseMotionFilter];
}

id objc_msgSend_assistiveTouchOnDeviceEyeTrackingShouldUseWeightedAverages(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchOnDeviceEyeTrackingShouldUseWeightedAverages];
}

id objc_msgSend_assistiveTouchOnDeviceEyeTrackingSmoothingBufferSize(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchOnDeviceEyeTrackingSmoothingBufferSize];
}

id objc_msgSend_assistiveTouchOpenMenuSwaggleEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchOpenMenuSwaggleEnabled];
}

id objc_msgSend_assistiveTouchOrbAction(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchOrbAction];
}

id objc_msgSend_assistiveTouchPreferredPointPicker(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchPreferredPointPicker];
}

id objc_msgSend_assistiveTouchRecentGestures(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchRecentGestures];
}

id objc_msgSend_assistiveTouchSavedGestures(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchSavedGestures];
}

id objc_msgSend_assistiveTouchScanCycles(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScanCycles];
}

id objc_msgSend_assistiveTouchScanTimeout(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScanTimeout];
}

id objc_msgSend_assistiveTouchScanTimeoutEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScanTimeoutEnabled];
}

id objc_msgSend_assistiveTouchScannerAddedTripleClickAutomatically(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScannerAddedTripleClickAutomatically];
}

id objc_msgSend_assistiveTouchScannerCursorHighVisibilityEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScannerCursorHighVisibilityEnabled];
}

id objc_msgSend_assistiveTouchScannerMenuLabelsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScannerMenuLabelsEnabled];
}

id objc_msgSend_assistiveTouchScannerPointPickerModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScannerPointPickerModeEnabled];
}

id objc_msgSend_assistiveTouchScannerSoundEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScannerSoundEnabled];
}

id objc_msgSend_assistiveTouchScannerSpeechEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScannerSpeechEnabled];
}

id objc_msgSend_assistiveTouchScannerSpeechIsInterruptedByScanning(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScannerSpeechIsInterruptedByScanning];
}

id objc_msgSend_assistiveTouchScannerSpeechShouldSpeakTraits(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScannerSpeechShouldSpeakTraits];
}

id objc_msgSend_assistiveTouchScanningMode(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchScanningMode];
}

id objc_msgSend_assistiveTouchSingleTapAction(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchSingleTapAction];
}

id objc_msgSend_assistiveTouchSpeed(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchSpeed];
}

id objc_msgSend_assistiveTouchStepInterval(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchStepInterval];
}

id objc_msgSend_assistiveTouchSwitchUsageConfirmed(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchSwitchUsageConfirmed];
}

id objc_msgSend_assistiveTouchSwitches(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchSwitches];
}

id objc_msgSend_assistiveTouchUsageCount(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchUsageCount];
}

id objc_msgSend_assistiveTouchVirtualTrackpadBorderColor(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadBorderColor];
}

id objc_msgSend_assistiveTouchVirtualTrackpadBorderOpacity(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadBorderOpacity];
}

id objc_msgSend_assistiveTouchVirtualTrackpadBorderWidth(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadBorderWidth];
}

id objc_msgSend_assistiveTouchVirtualTrackpadEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadEnabled];
}

id objc_msgSend_assistiveTouchVirtualTrackpadFadeDelay(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadFadeDelay];
}

id objc_msgSend_assistiveTouchVirtualTrackpadFullScreenToggleEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadFullScreenToggleEnabled];
}

id objc_msgSend_assistiveTouchVirtualTrackpadHoldDuration(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadHoldDuration];
}

id objc_msgSend_assistiveTouchVirtualTrackpadInnerColor(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadInnerColor];
}

id objc_msgSend_assistiveTouchVirtualTrackpadInnerOpacity(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadInnerOpacity];
}

id objc_msgSend_assistiveTouchVirtualTrackpadScrollSpeed(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadScrollSpeed];
}

id objc_msgSend_assistiveTouchVirtualTrackpadScrollToggleEnabled(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadScrollToggleEnabled];
}

id objc_msgSend_assistiveTouchVirtualTrackpadSpeed(void *a1, const char *a2, ...)
{
  return _[a1 assistiveTouchVirtualTrackpadSpeed];
}

id objc_msgSend_at_deviceIconNameForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "at_deviceIconNameForIdentifier:");
}

id objc_msgSend_attachedKeyboards(void *a1, const char *a2, ...)
{
  return _[a1 attachedKeyboards];
}

id objc_msgSend_attributesAtIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesAtIndex:effectiveRange:");
}

id objc_msgSend_atvMenuFocusedItemColor(void *a1, const char *a2, ...)
{
  return _[a1 atvMenuFocusedItemColor];
}

id objc_msgSend_atvRemoteInputSource(void *a1, const char *a2, ...)
{
  return _[a1 atvRemoteInputSource];
}

id objc_msgSend_audioSession(void *a1, const char *a2, ...)
{
  return _[a1 audioSession];
}

id objc_msgSend_autoHideTimeout(void *a1, const char *a2, ...)
{
  return _[a1 autoHideTimeout];
}

id objc_msgSend_autoLiftToggledForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoLiftToggledForFreehandSheet:");
}

id objc_msgSend_autoPanZoomUsingLocation_withPanningStyle_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoPanZoomUsingLocation:withPanningStyle:onDisplay:");
}

id objc_msgSend_autoPressLiftItems(void *a1, const char *a2, ...)
{
  return _[a1 autoPressLiftItems];
}

id objc_msgSend_autoPressToggledForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoPressToggledForFreehandSheet:");
}

id objc_msgSend_autoScanningDriver(void *a1, const char *a2, ...)
{
  return _[a1 autoScanningDriver];
}

id objc_msgSend_autoScanningInterval(void *a1, const char *a2, ...)
{
  return _[a1 autoScanningInterval];
}

id objc_msgSend_autoTapTimeout(void *a1, const char *a2, ...)
{
  return _[a1 autoTapTimeout];
}

id objc_msgSend_autoscrollInDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoscrollInDirection:");
}

id objc_msgSend_autoscroller(void *a1, const char *a2, ...)
{
  return _[a1 autoscroller];
}

id objc_msgSend_auxiliaryElementAfter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auxiliaryElementAfter:");
}

id objc_msgSend_auxiliaryElementBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auxiliaryElementBefore:");
}

id objc_msgSend_auxiliaryElementCountWithRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auxiliaryElementCountWithRole:");
}

id objc_msgSend_auxiliaryElementManagers(void *a1, const char *a2, ...)
{
  return _[a1 auxiliaryElementManagers];
}

id objc_msgSend_auxiliaryElementManagersForRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auxiliaryElementManagersForRole:");
}

id objc_msgSend_availabilityDetail(void *a1, const char *a2, ...)
{
  return _[a1 availabilityDetail];
}

id objc_msgSend_availableButtons(void *a1, const char *a2, ...)
{
  return _[a1 availableButtons];
}

id objc_msgSend_availableElements(void *a1, const char *a2, ...)
{
  return _[a1 availableElements];
}

id objc_msgSend_availableMetadataObjectTypes(void *a1, const char *a2, ...)
{
  return _[a1 availableMetadataObjectTypes];
}

id objc_msgSend_availableVideoCVPixelFormatTypes(void *a1, const char *a2, ...)
{
  return _[a1 availableVideoCVPixelFormatTypes];
}

id objc_msgSend_axArrayByIgnoringNilElementsWithCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axArrayByIgnoringNilElementsWithCount:");
}

id objc_msgSend_axArrayWithPossiblyNilArrays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axArrayWithPossiblyNilArrays:");
}

id objc_msgSend_axCGPointValue(void *a1, const char *a2, ...)
{
  return _[a1 axCGPointValue];
}

id objc_msgSend_axElement(void *a1, const char *a2, ...)
{
  return _[a1 axElement];
}

id objc_msgSend_axFilterObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axFilterObjectsUsingBlock:");
}

id objc_msgSend_axFirstObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axFirstObjectsUsingBlock:");
}

id objc_msgSend_axGameControllerKeyCodeForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axGameControllerKeyCodeForEvent:");
}

id objc_msgSend_axManager(void *a1, const char *a2, ...)
{
  return _[a1 axManager];
}

id objc_msgSend_axMapObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axMapObjectsUsingBlock:");
}

id objc_msgSend_axOrbPreviewWindow(void *a1, const char *a2, ...)
{
  return _[a1 axOrbPreviewWindow];
}

id objc_msgSend_axSafeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axSafeObjectAtIndex:");
}

id objc_msgSend_axSafelyAddObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axSafelyAddObject:");
}

id objc_msgSend_axSafelyAddObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axSafelyAddObjectsFromArray:");
}

id objc_msgSend_ax_addArcWithFirstPoint_secondPoint_cornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_addArcWithFirstPoint:secondPoint:cornerRadius:");
}

id objc_msgSend_ax_constrainLayoutAttribute_asEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_constrainLayoutAttribute:asEqualToConstant:");
}

id objc_msgSend_ax_constrainLayoutAttribute_asEqualToValueOfView_withOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_constrainLayoutAttribute:asEqualToValueOfView:withOffset:");
}

id objc_msgSend_ax_constraintsToMakeView_sameDimensionsAsView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_constraintsToMakeView:sameDimensionsAsView:");
}

id objc_msgSend_ax_containsObjectUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_containsObjectUsingBlock:");
}

id objc_msgSend_ax_filteredArrayUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_filteredArrayUsingBlock:");
}

id objc_msgSend_ax_mappedArrayUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_mappedArrayUsingBlock:");
}

id objc_msgSend_ax_pinConstraintsInAllDimensionsToView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_pinConstraintsInAllDimensionsToView:");
}

id objc_msgSend_axis(void *a1, const char *a2, ...)
{
  return _[a1 axis];
}

id objc_msgSend_axisContainerView(void *a1, const char *a2, ...)
{
  return _[a1 axisContainerView];
}

id objc_msgSend_axisPointPicker(void *a1, const char *a2, ...)
{
  return _[a1 axisPointPicker];
}

id objc_msgSend_backButtonConstraints(void *a1, const char *a2, ...)
{
  return _[a1 backButtonConstraints];
}

id objc_msgSend_backTitle(void *a1, const char *a2, ...)
{
  return _[a1 backTitle];
}

id objc_msgSend_backdropMaskImage(void *a1, const char *a2, ...)
{
  return _[a1 backdropMaskImage];
}

id objc_msgSend_backdropView(void *a1, const char *a2, ...)
{
  return _[a1 backdropView];
}

id objc_msgSend_backgroundBorderImageView(void *a1, const char *a2, ...)
{
  return _[a1 backgroundBorderImageView];
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _[a1 backgroundColor];
}

id objc_msgSend_backgroundView(void *a1, const char *a2, ...)
{
  return _[a1 backgroundView];
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_beginContinuousScrollingInDirection_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginContinuousScrollingInDirection:onDisplay:");
}

id objc_msgSend_beginDragAtPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginDragAtPoint:onDisplay:");
}

id objc_msgSend_beginDragMenuAtPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginDragMenuAtPoint:onDisplay:");
}

id objc_msgSend_beginHandlingHIDEventsForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginHandlingHIDEventsForReason:");
}

id objc_msgSend_beginScanningTimer(void *a1, const char *a2, ...)
{
  return _[a1 beginScanningTimer];
}

id objc_msgSend_beginScanningWithFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginScanningWithFocusContext:");
}

id objc_msgSend_beginSelectTimeoutAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginSelectTimeoutAnimation:");
}

id objc_msgSend_beginUpdates(void *a1, const char *a2, ...)
{
  return _[a1 beginUpdates];
}

id objc_msgSend_bendForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bendForFreehandSheet:");
}

id objc_msgSend_bendLeftForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bendLeftForFreehandSheet:");
}

id objc_msgSend_bendMenuItemWithPreferredNumberOfLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bendMenuItemWithPreferredNumberOfLines:");
}

id objc_msgSend_bendRightForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bendRightForFreehandSheet:");
}

id objc_msgSend_bezierPath(void *a1, const char *a2, ...)
{
  return _[a1 bezierPath];
}

id objc_msgSend_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:");
}

id objc_msgSend_bezierPathWithCGPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithCGPath:");
}

id objc_msgSend_bezierPathWithRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithRect:");
}

id objc_msgSend_bezierPathWithRoundedRect_cornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithRoundedRect:cornerRadius:");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _[a1 blackColor];
}

id objc_msgSend_bluetoothManager_discoveredDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bluetoothManager:discoveredDevice:");
}

id objc_msgSend_bluetoothManager_forgotDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bluetoothManager:forgotDevice:");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLForKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:error:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_BOOLWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLWithAXAttribute:");
}

id objc_msgSend_borderColor(void *a1, const char *a2, ...)
{
  return _[a1 borderColor];
}

id objc_msgSend_borderContainerView(void *a1, const char *a2, ...)
{
  return _[a1 borderContainerView];
}

id objc_msgSend_borderLayer(void *a1, const char *a2, ...)
{
  return _[a1 borderLayer];
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _[a1 bottomAnchor];
}

id objc_msgSend_bottomMostLeafAXElement(void *a1, const char *a2, ...)
{
  return _[a1 bottomMostLeafAXElement];
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _[a1 bounds];
}

id objc_msgSend_bringSubviewToFront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bringSubviewToFront:");
}

id objc_msgSend_bubbleCursor(void *a1, const char *a2, ...)
{
  return _[a1 bubbleCursor];
}

id objc_msgSend_bubbleCursorController(void *a1, const char *a2, ...)
{
  return _[a1 bubbleCursorController];
}

id objc_msgSend_bubbleModeAllowed(void *a1, const char *a2, ...)
{
  return _[a1 bubbleModeAllowed];
}

id objc_msgSend_bubbleModeBlockedOnElementRefresh(void *a1, const char *a2, ...)
{
  return _[a1 bubbleModeBlockedOnElementRefresh];
}

id objc_msgSend_bubbleModeContentView(void *a1, const char *a2, ...)
{
  return _[a1 bubbleModeContentView];
}

id objc_msgSend_bubbleModeCurrentlyFocusedOnNubbit(void *a1, const char *a2, ...)
{
  return _[a1 bubbleModeCurrentlyFocusedOnNubbit];
}

id objc_msgSend_bubbleModeFailedToSnapOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bubbleModeFailedToSnapOnDisplay:");
}

id objc_msgSend_bubbleModeFocusedRockerItem(void *a1, const char *a2, ...)
{
  return _[a1 bubbleModeFocusedRockerItem];
}

id objc_msgSend_bubbleModeFrameToElementMapping(void *a1, const char *a2, ...)
{
  return _[a1 bubbleModeFrameToElementMapping];
}

id objc_msgSend_bundleId(void *a1, const char *a2, ...)
{
  return _[a1 bundleId];
}

id objc_msgSend_bundleWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithURL:");
}

id objc_msgSend_buttonA(void *a1, const char *a2, ...)
{
  return _[a1 buttonA];
}

id objc_msgSend_buttonB(void *a1, const char *a2, ...)
{
  return _[a1 buttonB];
}

id objc_msgSend_buttonDownStartTime(void *a1, const char *a2, ...)
{
  return _[a1 buttonDownStartTime];
}

id objc_msgSend_buttonMask(void *a1, const char *a2, ...)
{
  return _[a1 buttonMask];
}

id objc_msgSend_buttonMaskForSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonMaskForSenderID:");
}

id objc_msgSend_buttonMenu(void *a1, const char *a2, ...)
{
  return _[a1 buttonMenu];
}

id objc_msgSend_buttonNumber(void *a1, const char *a2, ...)
{
  return _[a1 buttonNumber];
}

id objc_msgSend_buttonWithTitle_imageName_downBlock_upBlock_dataSource_showWithGuidedAccess_showWithAssistiveAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonWithTitle:imageName:downBlock:upBlock:dataSource:showWithGuidedAccess:showWithAssistiveAccess:");
}

id objc_msgSend_buttonX(void *a1, const char *a2, ...)
{
  return _[a1 buttonX];
}

id objc_msgSend_buttonY(void *a1, const char *a2, ...)
{
  return _[a1 buttonY];
}

id objc_msgSend_buttonsByMedusaGesture(void *a1, const char *a2, ...)
{
  return _[a1 buttonsByMedusaGesture];
}

id objc_msgSend_cachedCameraPointPickerSwitches(void *a1, const char *a2, ...)
{
  return _[a1 cachedCameraPointPickerSwitches];
}

id objc_msgSend_cachedHasShownHint(void *a1, const char *a2, ...)
{
  return _[a1 cachedHasShownHint];
}

id objc_msgSend_cachedRecentSpeechOutputRequests(void *a1, const char *a2, ...)
{
  return _[a1 cachedRecentSpeechOutputRequests];
}

id objc_msgSend_cachedToleranceRadius(void *a1, const char *a2, ...)
{
  return _[a1 cachedToleranceRadius];
}

id objc_msgSend_calibratedGazePointForGazePoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calibratedGazePointForGazePoint:");
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _[a1 callStackSymbols];
}

id objc_msgSend_cameraInputSource(void *a1, const char *a2, ...)
{
  return _[a1 cameraInputSource];
}

id objc_msgSend_cameraSwitch(void *a1, const char *a2, ...)
{
  return _[a1 cameraSwitch];
}

id objc_msgSend_canAddInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAddInput:");
}

id objc_msgSend_canAddOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAddOutput:");
}

id objc_msgSend_canBeActiveElementManager(void *a1, const char *a2, ...)
{
  return _[a1 canBeActiveElementManager];
}

id objc_msgSend_canMoveTrackpadBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canMoveTrackpadBorder:");
}

id objc_msgSend_canPerformAXAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canPerformAXAction:");
}

id objc_msgSend_canPerformPinch(void *a1, const char *a2, ...)
{
  return _[a1 canPerformPinch];
}

id objc_msgSend_canResizeTrackpad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canResizeTrackpad:");
}

id objc_msgSend_canReturnControlToForwarderDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canReturnControlToForwarderDevice:");
}

id objc_msgSend_canSearch(void *a1, const char *a2, ...)
{
  return _[a1 canSearch];
}

id objc_msgSend_canSearchForControllableDevicesWithMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canSearchForControllableDevicesWithMenu:");
}

id objc_msgSend_canSetDockIconActivationMode(void *a1, const char *a2, ...)
{
  return _[a1 canSetDockIconActivationMode];
}

id objc_msgSend_canShowASTMousePointer(void *a1, const char *a2, ...)
{
  return _[a1 canShowASTMousePointer];
}

id objc_msgSend_canUseMainKeyboardKeysPreferenceDidChange(void *a1, const char *a2, ...)
{
  return _[a1 canUseMainKeyboardKeysPreferenceDidChange];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelCircularProgressAnimation(void *a1, const char *a2, ...)
{
  return _[a1 cancelCircularProgressAnimation];
}

id objc_msgSend_cancelCurrentGesture(void *a1, const char *a2, ...)
{
  return _[a1 cancelCurrentGesture];
}

id objc_msgSend_cancelDrag(void *a1, const char *a2, ...)
{
  return _[a1 cancelDrag];
}

id objc_msgSend_cancelDwellAnimation(void *a1, const char *a2, ...)
{
  return _[a1 cancelDwellAnimation];
}

id objc_msgSend_cancelDwellOnBubbleCursor(void *a1, const char *a2, ...)
{
  return _[a1 cancelDwellOnBubbleCursor];
}

id objc_msgSend_cancelDwellTimer(void *a1, const char *a2, ...)
{
  return _[a1 cancelDwellTimer];
}

id objc_msgSend_cancelDwellTimerForBubbleMode(void *a1, const char *a2, ...)
{
  return _[a1 cancelDwellTimerForBubbleMode];
}

id objc_msgSend_cancelDwellTimerForPointer(void *a1, const char *a2, ...)
{
  return _[a1 cancelDwellTimerForPointer];
}

id objc_msgSend_cancelGesture(void *a1, const char *a2, ...)
{
  return _[a1 cancelGesture];
}

id objc_msgSend_cancelPendingAction(void *a1, const char *a2, ...)
{
  return _[a1 cancelPendingAction];
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_cancelSelectTimeoutAnimationIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 cancelSelectTimeoutAnimationIfNeeded];
}

id objc_msgSend_cancelSiriDismissalForAssistiveTouch(void *a1, const char *a2, ...)
{
  return _[a1 cancelSiriDismissalForAssistiveTouch];
}

id objc_msgSend_cancelSpeech(void *a1, const char *a2, ...)
{
  return _[a1 cancelSpeech];
}

id objc_msgSend_candidateBarManager(void *a1, const char *a2, ...)
{
  return _[a1 candidateBarManager];
}

id objc_msgSend_candidateBarManager_hasValidTypingCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "candidateBarManager:hasValidTypingCandidates:");
}

id objc_msgSend_capabilitiesForHardware(void *a1, const char *a2, ...)
{
  return _[a1 capabilitiesForHardware];
}

id objc_msgSend_captureOutputPreview(void *a1, const char *a2, ...)
{
  return _[a1 captureOutputPreview];
}

id objc_msgSend_captureSession(void *a1, const char *a2, ...)
{
  return _[a1 captureSession];
}

id objc_msgSend_cellForItemAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForItemAtIndexPath:");
}

id objc_msgSend_cellSizeForTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellSizeForTitle:");
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _[a1 center];
}

id objc_msgSend_centerItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerItems:");
}

id objc_msgSend_centerItems_withView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerItems:withView:");
}

id objc_msgSend_centerNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerNamed:");
}

id objc_msgSend_centerPoint(void *a1, const char *a2, ...)
{
  return _[a1 centerPoint];
}

id objc_msgSend_centerPointImageForGrid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerPointImageForGrid:");
}

id objc_msgSend_centerXAnchor(void *a1, const char *a2, ...)
{
  return _[a1 centerXAnchor];
}

id objc_msgSend_centerYAnchor(void *a1, const char *a2, ...)
{
  return _[a1 centerYAnchor];
}

id objc_msgSend_changeTopBorderHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeTopBorderHeight:");
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return _[a1 channel];
}

id objc_msgSend_circularProgressFillColor(void *a1, const char *a2, ...)
{
  return _[a1 circularProgressFillColor];
}

id objc_msgSend_classForPointPickerView(void *a1, const char *a2, ...)
{
  return _[a1 classForPointPickerView];
}

id objc_msgSend_classifyImages_withTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classifyImages:withTimeout:");
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return _[a1 cleanup];
}

id objc_msgSend_cleanupPointerStreamIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 cleanupPointerStreamIfNecessary];
}

id objc_msgSend_clearAllFingersAnimated_endPointForAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllFingersAnimated:endPointForAnimation:");
}

id objc_msgSend_clearCachedCustomizableMouse(void *a1, const char *a2, ...)
{
  return _[a1 clearCachedCustomizableMouse];
}

id objc_msgSend_clearCachedFrame_cachedVisibleFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCachedFrame:cachedVisibleFrame:");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _[a1 clearColor];
}

id objc_msgSend_clearRecentSpeech(void *a1, const char *a2, ...)
{
  return _[a1 clearRecentSpeech];
}

id objc_msgSend_clearSpeechQueue(void *a1, const char *a2, ...)
{
  return _[a1 clearSpeechQueue];
}

id objc_msgSend_clipRect_toRotatedScreenBoundsOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clipRect:toRotatedScreenBoundsOnDisplay:");
}

id objc_msgSend_clockwise(void *a1, const char *a2, ...)
{
  return _[a1 clockwise];
}

id objc_msgSend_closeCurrentScanningContext(void *a1, const char *a2, ...)
{
  return _[a1 closeCurrentScanningContext];
}

id objc_msgSend_closePath(void *a1, const char *a2, ...)
{
  return _[a1 closePath];
}

id objc_msgSend_closestElementToElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closestElementToElement:");
}

id objc_msgSend_closestNubbitPositionForPoint_offsetByMidpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closestNubbitPositionForPoint:offsetByMidpoint:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_collectionView(void *a1, const char *a2, ...)
{
  return _[a1 collectionView];
}

id objc_msgSend_collectionView_menuItemForItemAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionView:menuItemForItemAtIndex:");
}

id objc_msgSend_collectionViewCellClass(void *a1, const char *a2, ...)
{
  return _[a1 collectionViewCellClass];
}

id objc_msgSend_collectionViewContentSize(void *a1, const char *a2, ...)
{
  return _[a1 collectionViewContentSize];
}

id objc_msgSend_collectionViewController(void *a1, const char *a2, ...)
{
  return _[a1 collectionViewController];
}

id objc_msgSend_collectionViewLayout(void *a1, const char *a2, ...)
{
  return _[a1 collectionViewLayout];
}

id objc_msgSend_colorWithAlphaComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithAlphaComponent:");
}

id objc_msgSend_colorWithCGColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithCGColor:");
}

id objc_msgSend_colorWithRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithRed:green:blue:alpha:");
}

id objc_msgSend_colorWithWhite_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithWhite:alpha:");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _[a1 commit];
}

id objc_msgSend_compact(void *a1, const char *a2, ...)
{
  return _[a1 compact];
}

id objc_msgSend_compatibleInputs(void *a1, const char *a2, ...)
{
  return _[a1 compatibleInputs];
}

id objc_msgSend_completionCallback(void *a1, const char *a2, ...)
{
  return _[a1 completionCallback];
}

id objc_msgSend_compositingLayer(void *a1, const char *a2, ...)
{
  return _[a1 compositingLayer];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configurationWithFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithFont:");
}

id objc_msgSend_configurationWithPointSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithPointSize:");
}

id objc_msgSend_confirmApplePay(void *a1, const char *a2, ...)
{
  return _[a1 confirmApplePay];
}

id objc_msgSend_confirmationSheet(void *a1, const char *a2, ...)
{
  return _[a1 confirmationSheet];
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectionWithMediaType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionWithMediaType:");
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:");
}

id objc_msgSend_constraintEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:constant:");
}

id objc_msgSend_constraintEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToConstant:");
}

id objc_msgSend_constraintEqualToSystemSpacingBelowAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToSystemSpacingBelowAnchor:multiplier:");
}

id objc_msgSend_constraintGreaterThanOrEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToAnchor:");
}

id objc_msgSend_constraintGreaterThanOrEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToAnchor:constant:");
}

id objc_msgSend_constraintGreaterThanOrEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToConstant:");
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToAnchor:");
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToAnchor:constant:");
}

id objc_msgSend_constraintLessThanOrEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToConstant:");
}

id objc_msgSend_constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:");
}

id objc_msgSend_containerView(void *a1, const char *a2, ...)
{
  return _[a1 containerView];
}

id objc_msgSend_containingGroupCursorController(void *a1, const char *a2, ...)
{
  return _[a1 containingGroupCursorController];
}

id objc_msgSend_containingView(void *a1, const char *a2, ...)
{
  return _[a1 containingView];
}

id objc_msgSend_containsElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsElement:");
}

id objc_msgSend_containsGestureSheet(void *a1, const char *a2, ...)
{
  return _[a1 containsGestureSheet];
}

id objc_msgSend_containsHIDDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsHIDDevice:");
}

id objc_msgSend_containsNativeFocusElement(void *a1, const char *a2, ...)
{
  return _[a1 containsNativeFocusElement];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsPoint:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentPadding(void *a1, const char *a2, ...)
{
  return _[a1 contentPadding];
}

id objc_msgSend_contentView(void *a1, const char *a2, ...)
{
  return _[a1 contentView];
}

id objc_msgSend_contentViewConstraints(void *a1, const char *a2, ...)
{
  return _[a1 contentViewConstraints];
}

id objc_msgSend_contentViewContainer(void *a1, const char *a2, ...)
{
  return _[a1 contentViewContainer];
}

id objc_msgSend_contentViewForGestureProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentViewForGestureProvider:");
}

id objc_msgSend_contextElement(void *a1, const char *a2, ...)
{
  return _[a1 contextElement];
}

id objc_msgSend_contextForCustomGestureItemsViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextForCustomGestureItemsViewController:");
}

id objc_msgSend_contextID(void *a1, const char *a2, ...)
{
  return _[a1 contextID];
}

id objc_msgSend_contextIdForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextIdForPosition:");
}

id objc_msgSend_contextIdHostingContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextIdHostingContextId:");
}

id objc_msgSend_continueHighlightAfterTouch(void *a1, const char *a2, ...)
{
  return _[a1 continueHighlightAfterTouch];
}

id objc_msgSend_continueScanningWithFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueScanningWithFocusContext:");
}

id objc_msgSend_continueScanningWithFocusContext_foundNewElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueScanningWithFocusContext:foundNewElements:");
}

id objc_msgSend_continuousScrollCurrentSpeedFactor(void *a1, const char *a2, ...)
{
  return _[a1 continuousScrollCurrentSpeedFactor];
}

id objc_msgSend_continuousScrollMode(void *a1, const char *a2, ...)
{
  return _[a1 continuousScrollMode];
}

id objc_msgSend_continuousScrollPickedElement(void *a1, const char *a2, ...)
{
  return _[a1 continuousScrollPickedElement];
}

id objc_msgSend_continuousScrollerGenerationQueue(void *a1, const char *a2, ...)
{
  return _[a1 continuousScrollerGenerationQueue];
}

id objc_msgSend_controlArrowColor(void *a1, const char *a2, ...)
{
  return _[a1 controlArrowColor];
}

id objc_msgSend_controlArrowHeadLargeSideLength(void *a1, const char *a2, ...)
{
  return _[a1 controlArrowHeadLargeSideLength];
}

id objc_msgSend_controlArrowHeadSmallSideLength(void *a1, const char *a2, ...)
{
  return _[a1 controlArrowHeadSmallSideLength];
}

id objc_msgSend_controlArrowHighlightedColor(void *a1, const char *a2, ...)
{
  return _[a1 controlArrowHighlightedColor];
}

id objc_msgSend_controlArrowOutlineColor(void *a1, const char *a2, ...)
{
  return _[a1 controlArrowOutlineColor];
}

id objc_msgSend_controlArrowOutlineThickness(void *a1, const char *a2, ...)
{
  return _[a1 controlArrowOutlineThickness];
}

id objc_msgSend_controlArrowThickness(void *a1, const char *a2, ...)
{
  return _[a1 controlArrowThickness];
}

id objc_msgSend_controlDelegate(void *a1, const char *a2, ...)
{
  return _[a1 controlDelegate];
}

id objc_msgSend_controlViewController(void *a1, const char *a2, ...)
{
  return _[a1 controlViewController];
}

id objc_msgSend_convertFrameToInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFrameToInterfaceOrientation:");
}

id objc_msgSend_convertPathToView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPathToView:");
}

id objc_msgSend_convertPoint_fromContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:fromContextId:");
}

id objc_msgSend_convertPoint_fromContextId_displayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:fromContextId:displayId:");
}

id objc_msgSend_convertPoint_fromLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:fromLayer:");
}

id objc_msgSend_convertPoint_fromView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:fromView:");
}

id objc_msgSend_convertPoint_fromWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:fromWindow:");
}

id objc_msgSend_convertPoint_toContextId_displayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:toContextId:displayId:");
}

id objc_msgSend_convertPoint_toLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:toLayer:");
}

id objc_msgSend_convertPoint_toView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:toView:");
}

id objc_msgSend_convertPoint_toWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:toWindow:");
}

id objc_msgSend_convertPointToDeviceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPointToDeviceOrientation:");
}

id objc_msgSend_convertPointToIntefaceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPointToIntefaceOrientation:");
}

id objc_msgSend_convertPointToPortraitUpOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPointToPortraitUpOrientation:");
}

id objc_msgSend_convertRect_fromView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:fromView:");
}

id objc_msgSend_convertRect_toView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:toView:");
}

id objc_msgSend_convertSystemPointFromOrientation(void *a1, const char *a2, ...)
{
  return _[a1 convertSystemPointFromOrientation];
}

id objc_msgSend_convertTime_fromLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertTime:fromLayer:");
}

id objc_msgSend_convertToNormalizedInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToNormalizedInterfaceOrientation:");
}

id objc_msgSend_convertToTrackpadBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToTrackpadBorder:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyDevices(void *a1, const char *a2, ...)
{
  return _[a1 copyDevices];
}

id objc_msgSend_cornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 cornerRadius];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createAndSaveRecipeForInterfaceOrientedHoldPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndSaveRecipeForInterfaceOrientedHoldPoint:");
}

id objc_msgSend_createAndSaveRecipeForInterfaceOrientedPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndSaveRecipeForInterfaceOrientedPoint:");
}

id objc_msgSend_createNewDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewDevice:");
}

id objc_msgSend_creatorHIDEvent(void *a1, const char *a2, ...)
{
  return _[a1 creatorHIDEvent];
}

id objc_msgSend_creatorHIDServiceClient(void *a1, const char *a2, ...)
{
  return _[a1 creatorHIDServiceClient];
}

id objc_msgSend_crownPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crownPress:");
}

id objc_msgSend_crownRotationClockwise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crownRotationClockwise:");
}

id objc_msgSend_current(void *a1, const char *a2, ...)
{
  return _[a1 current];
}

id objc_msgSend_currentAbsoluteSystemPointerPoint(void *a1, const char *a2, ...)
{
  return _[a1 currentAbsoluteSystemPointerPoint];
}

id objc_msgSend_currentAction(void *a1, const char *a2, ...)
{
  return _[a1 currentAction];
}

id objc_msgSend_currentApplication(void *a1, const char *a2, ...)
{
  return _[a1 currentApplication];
}

id objc_msgSend_currentApplications(void *a1, const char *a2, ...)
{
  return _[a1 currentApplications];
}

id objc_msgSend_currentAuxiliaryElementManager(void *a1, const char *a2, ...)
{
  return _[a1 currentAuxiliaryElementManager];
}

id objc_msgSend_currentBubbleModeFocusedElement(void *a1, const char *a2, ...)
{
  return _[a1 currentBubbleModeFocusedElement];
}

id objc_msgSend_currentContextWithScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentContextWithScale:");
}

id objc_msgSend_currentContinuousScrollDirection(void *a1, const char *a2, ...)
{
  return _[a1 currentContinuousScrollDirection];
}

id objc_msgSend_currentCycleCount(void *a1, const char *a2, ...)
{
  return _[a1 currentCycleCount];
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _[a1 currentDevice];
}

id objc_msgSend_currentDeviceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 currentDeviceOrientation];
}

id objc_msgSend_currentDeviceOrientationAllowingAmbiguous_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDeviceOrientationAllowingAmbiguous:");
}

id objc_msgSend_currentDisplayContext(void *a1, const char *a2, ...)
{
  return _[a1 currentDisplayContext];
}

id objc_msgSend_currentDisplayID(void *a1, const char *a2, ...)
{
  return _[a1 currentDisplayID];
}

id objc_msgSend_currentDisplayManager(void *a1, const char *a2, ...)
{
  return _[a1 currentDisplayManager];
}

id objc_msgSend_currentElement(void *a1, const char *a2, ...)
{
  return _[a1 currentElement];
}

id objc_msgSend_currentEyeTrackingErrorCode(void *a1, const char *a2, ...)
{
  return _[a1 currentEyeTrackingErrorCode];
}

id objc_msgSend_currentFingerAppearance(void *a1, const char *a2, ...)
{
  return _[a1 currentFingerAppearance];
}

id objc_msgSend_currentFingerCount(void *a1, const char *a2, ...)
{
  return _[a1 currentFingerCount];
}

id objc_msgSend_currentFocusContext(void *a1, const char *a2, ...)
{
  return _[a1 currentFocusContext];
}

id objc_msgSend_currentGameController(void *a1, const char *a2, ...)
{
  return _[a1 currentGameController];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentHardwareIdentifierForPointer(void *a1, const char *a2, ...)
{
  return _[a1 currentHardwareIdentifierForPointer];
}

id objc_msgSend_currentHoldPoint(void *a1, const char *a2, ...)
{
  return _[a1 currentHoldPoint];
}

id objc_msgSend_currentImage(void *a1, const char *a2, ...)
{
  return _[a1 currentImage];
}

id objc_msgSend_currentKeyForAlternates(void *a1, const char *a2, ...)
{
  return _[a1 currentKeyForAlternates];
}

id objc_msgSend_currentLeftXDisplacement(void *a1, const char *a2, ...)
{
  return _[a1 currentLeftXDisplacement];
}

id objc_msgSend_currentLeftYDisplacement(void *a1, const char *a2, ...)
{
  return _[a1 currentLeftYDisplacement];
}

id objc_msgSend_currentPage(void *a1, const char *a2, ...)
{
  return _[a1 currentPage];
}

id objc_msgSend_currentPoint(void *a1, const char *a2, ...)
{
  return _[a1 currentPoint];
}

id objc_msgSend_currentPointForPointer(void *a1, const char *a2, ...)
{
  return _[a1 currentPointForPointer];
}

id objc_msgSend_currentQueue(void *a1, const char *a2, ...)
{
  return _[a1 currentQueue];
}

id objc_msgSend_currentRecipe(void *a1, const char *a2, ...)
{
  return _[a1 currentRecipe];
}

id objc_msgSend_currentRightXDisplacement(void *a1, const char *a2, ...)
{
  return _[a1 currentRightXDisplacement];
}

id objc_msgSend_currentRightYDisplacement(void *a1, const char *a2, ...)
{
  return _[a1 currentRightYDisplacement];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_currentSelectionPath(void *a1, const char *a2, ...)
{
  return _[a1 currentSelectionPath];
}

id objc_msgSend_currentSheet(void *a1, const char *a2, ...)
{
  return _[a1 currentSheet];
}

id objc_msgSend_currentSheetViewController(void *a1, const char *a2, ...)
{
  return _[a1 currentSheetViewController];
}

id objc_msgSend_currentSpeechFocusContext(void *a1, const char *a2, ...)
{
  return _[a1 currentSpeechFocusContext];
}

id objc_msgSend_currentSwitchController(void *a1, const char *a2, ...)
{
  return _[a1 currentSwitchController];
}

id objc_msgSend_currentSystemPointerHardwareIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 currentSystemPointerHardwareIdentifier];
}

id objc_msgSend_currentSystemPointerPoint(void *a1, const char *a2, ...)
{
  return _[a1 currentSystemPointerPoint];
}

id objc_msgSend_currentSystemPointerPointAttributes(void *a1, const char *a2, ...)
{
  return _[a1 currentSystemPointerPointAttributes];
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return _[a1 currentThread];
}

id objc_msgSend_currentXDisplacement(void *a1, const char *a2, ...)
{
  return _[a1 currentXDisplacement];
}

id objc_msgSend_currentYDisplacement(void *a1, const char *a2, ...)
{
  return _[a1 currentYDisplacement];
}

id objc_msgSend_currentlyObservingNotifications(void *a1, const char *a2, ...)
{
  return _[a1 currentlyObservingNotifications];
}

id objc_msgSend_currentlySelectedKeyboardRow(void *a1, const char *a2, ...)
{
  return _[a1 currentlySelectedKeyboardRow];
}

id objc_msgSend_currentlySnappedInBubbleMode(void *a1, const char *a2, ...)
{
  return _[a1 currentlySnappedInBubbleMode];
}

id objc_msgSend_currentlyVisibleRockerItems(void *a1, const char *a2, ...)
{
  return _[a1 currentlyVisibleRockerItems];
}

id objc_msgSend_cursorBackgroundBorderWidth(void *a1, const char *a2, ...)
{
  return _[a1 cursorBackgroundBorderWidth];
}

id objc_msgSend_cursorBackgroundLayer(void *a1, const char *a2, ...)
{
  return _[a1 cursorBackgroundLayer];
}

id objc_msgSend_cursorColor(void *a1, const char *a2, ...)
{
  return _[a1 cursorColor];
}

id objc_msgSend_cursorCompositingLayer(void *a1, const char *a2, ...)
{
  return _[a1 cursorCompositingLayer];
}

id objc_msgSend_cursorContainerLayer(void *a1, const char *a2, ...)
{
  return _[a1 cursorContainerLayer];
}

id objc_msgSend_cursorContainerOpacity(void *a1, const char *a2, ...)
{
  return _[a1 cursorContainerOpacity];
}

id objc_msgSend_cursorElementPadding(void *a1, const char *a2, ...)
{
  return _[a1 cursorElementPadding];
}

id objc_msgSend_cursorForegroundBorderWidth(void *a1, const char *a2, ...)
{
  return _[a1 cursorForegroundBorderWidth];
}

id objc_msgSend_cursorForegroundLayer(void *a1, const char *a2, ...)
{
  return _[a1 cursorForegroundLayer];
}

id objc_msgSend_cursorHighVisibilityMultiplier(void *a1, const char *a2, ...)
{
  return _[a1 cursorHighVisibilityMultiplier];
}

id objc_msgSend_cursorManager(void *a1, const char *a2, ...)
{
  return _[a1 cursorManager];
}

id objc_msgSend_cursorManagerShouldHideMenuCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cursorManagerShouldHideMenuCursor:");
}

id objc_msgSend_cursorRoundedRectCornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 cursorRoundedRectCornerRadius];
}

id objc_msgSend_cursorSizes(void *a1, const char *a2, ...)
{
  return _[a1 cursorSizes];
}

id objc_msgSend_cursors(void *a1, const char *a2, ...)
{
  return _[a1 cursors];
}

id objc_msgSend_curvature(void *a1, const char *a2, ...)
{
  return _[a1 curvature];
}

id objc_msgSend_curvatureForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "curvatureForFreehandSheet:");
}

id objc_msgSend_customActionForButtonNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customActionForButtonNumber:");
}

id objc_msgSend_customContent(void *a1, const char *a2, ...)
{
  return _[a1 customContent];
}

id objc_msgSend_customGesture(void *a1, const char *a2, ...)
{
  return _[a1 customGesture];
}

id objc_msgSend_customGestureItemsViewController_didChooseGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customGestureItemsViewController:didChooseGesture:");
}

id objc_msgSend_customGestures(void *a1, const char *a2, ...)
{
  return _[a1 customGestures];
}

id objc_msgSend_customMessageReceived_withData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customMessageReceived:withData:");
}

id objc_msgSend_customizableMouseForEventSenderID_serviceClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customizableMouseForEventSenderID:serviceClient:");
}

id objc_msgSend_customizationMapAllowInstanceActivation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customizationMapAllowInstanceActivation:");
}

id objc_msgSend_cyanColor(void *a1, const char *a2, ...)
{
  return _[a1 cyanColor];
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithSender_page_usage_modifierFlags_eventValue1_eventValue2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithSender:page:usage:modifierFlags:eventValue1:eventValue2:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_deactivateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateConstraints:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectForKey:");
}

id objc_msgSend_decreaseAutoscrollSpeed(void *a1, const char *a2, ...)
{
  return _[a1 decreaseAutoscrollSpeed];
}

id objc_msgSend_decreaseCurveControl(void *a1, const char *a2, ...)
{
  return _[a1 decreaseCurveControl];
}

id objc_msgSend_decreaseVelocityForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decreaseVelocityForFreehandSheet:");
}

id objc_msgSend_decreaseVolume(void *a1, const char *a2, ...)
{
  return _[a1 decreaseVolume];
}

id objc_msgSend_defaultBackgroundImage(void *a1, const char *a2, ...)
{
  return _[a1 defaultBackgroundImage];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultExpressionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultExpressionConfiguration];
}

id objc_msgSend_defaultLocationsForNumberOfFingers_aroundPoint_withinBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultLocationsForNumberOfFingers:aroundPoint:withinBounds:");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultParagraphStyle(void *a1, const char *a2, ...)
{
  return _[a1 defaultParagraphStyle];
}

id objc_msgSend_defaultPinchLocationsAroundPoint_withinBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultPinchLocationsAroundPoint:withinBounds:");
}

id objc_msgSend_defaultSideLength(void *a1, const char *a2, ...)
{
  return _[a1 defaultSideLength];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_delegatesScannerControl(void *a1, const char *a2, ...)
{
  return _[a1 delegatesScannerControl];
}

id objc_msgSend_deltaX(void *a1, const char *a2, ...)
{
  return _[a1 deltaX];
}

id objc_msgSend_deltaY(void *a1, const char *a2, ...)
{
  return _[a1 deltaY];
}

id objc_msgSend_dequeueReusableCellWithReuseIdentifier_forIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithReuseIdentifier:forIndexPath:");
}

id objc_msgSend_descendantsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descendantsPassingTest:");
}

id objc_msgSend_descender(void *a1, const char *a2, ...)
{
  return _[a1 descender];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_deselectedFillColor(void *a1, const char *a2, ...)
{
  return _[a1 deselectedFillColor];
}

id objc_msgSend_deselectedStrokeColor(void *a1, const char *a2, ...)
{
  return _[a1 deselectedStrokeColor];
}

id objc_msgSend_detectDevices(void *a1, const char *a2, ...)
{
  return _[a1 detectDevices];
}

id objc_msgSend_device_didPostEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didPostEvent:");
}

id objc_msgSend_device_didUnload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didUnload:");
}

id objc_msgSend_deviceCount(void *a1, const char *a2, ...)
{
  return _[a1 deviceCount];
}

id objc_msgSend_deviceCountChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceCountChanged:");
}

id objc_msgSend_deviceDetector(void *a1, const char *a2, ...)
{
  return _[a1 deviceDetector];
}

id objc_msgSend_deviceDetector_didFindDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceDetector:didFindDevice:");
}

id objc_msgSend_deviceDetector_unloadDevicesPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceDetector:unloadDevicesPassingTest:");
}

id objc_msgSend_deviceDisappeared(void *a1, const char *a2, ...)
{
  return _[a1 deviceDisappeared];
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 deviceIdentifier];
}

id objc_msgSend_deviceInputWithDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceInputWithDevice:error:");
}

id objc_msgSend_deviceKeys(void *a1, const char *a2, ...)
{
  return _[a1 deviceKeys];
}

id objc_msgSend_deviceManager(void *a1, const char *a2, ...)
{
  return _[a1 deviceManager];
}

id objc_msgSend_deviceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 deviceOrientation];
}

id objc_msgSend_deviceSpecificImage(void *a1, const char *a2, ...)
{
  return _[a1 deviceSpecificImage];
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _[a1 deviceType];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_dialectForLanguageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dialectForLanguageID:");
}

id objc_msgSend_dialectsThatCanSpeakString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dialectsThatCanSpeakString:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didActivate(void *a1, const char *a2, ...)
{
  return _[a1 didActivate];
}

id objc_msgSend_didActivateElement(void *a1, const char *a2, ...)
{
  return _[a1 didActivateElement];
}

id objc_msgSend_didActivateFingersElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didActivateFingersElement:");
}

id objc_msgSend_didActivateMultipleMenuItemsElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didActivateMultipleMenuItemsElement:");
}

id objc_msgSend_didAddSubviewToDisplayContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAddSubviewToDisplayContext:");
}

id objc_msgSend_didBecomeScannerDriver(void *a1, const char *a2, ...)
{
  return _[a1 didBecomeScannerDriver];
}

id objc_msgSend_didBeginLongPressForInputController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didBeginLongPressForInputController:");
}

id objc_msgSend_didBeginLongPressForInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didBeginLongPressForInputSource:");
}

id objc_msgSend_didCancelGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCancelGesture:");
}

id objc_msgSend_didChangeOrientation(void *a1, const char *a2, ...)
{
  return _[a1 didChangeOrientation];
}

id objc_msgSend_didChooseActiveHoldAndDragGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseActiveHoldAndDragGesture:");
}

id objc_msgSend_didChooseAddRecentInCustomGestureItemsViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseAddRecentInCustomGestureItemsViewController:");
}

id objc_msgSend_didChooseArbitraryFlick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseArbitraryFlick:");
}

id objc_msgSend_didChooseCreateCustomGestureFromGestureProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseCreateCustomGestureFromGestureProvider:");
}

id objc_msgSend_didChooseCreateInCustomGestureItemsViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseCreateInCustomGestureItemsViewController:");
}

id objc_msgSend_didChooseDoubleTapGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseDoubleTapGesture:");
}

id objc_msgSend_didChooseDragGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseDragGesture:");
}

id objc_msgSend_didChooseDrawingGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseDrawingGesture:");
}

id objc_msgSend_didChooseFavorites_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseFavorites:");
}

id objc_msgSend_didChooseFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseFingers:");
}

id objc_msgSend_didChooseFlickDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseFlickDown:");
}

id objc_msgSend_didChooseFlickGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseFlickGesture:");
}

id objc_msgSend_didChooseFlickLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseFlickLeft:");
}

id objc_msgSend_didChooseFlickRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseFlickRight:");
}

id objc_msgSend_didChooseFlickUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseFlickUp:");
}

id objc_msgSend_didChooseForceTouchGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseForceTouchGesture:");
}

id objc_msgSend_didChooseHoldAndDragGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseHoldAndDragGesture:");
}

id objc_msgSend_didChoosePanDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChoosePanDown:");
}

id objc_msgSend_didChoosePanGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChoosePanGesture:");
}

id objc_msgSend_didChoosePanLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChoosePanLeft:");
}

id objc_msgSend_didChoosePanRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChoosePanRight:");
}

id objc_msgSend_didChoosePanUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChoosePanUp:");
}

id objc_msgSend_didChoosePinchGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChoosePinchGesture:");
}

id objc_msgSend_didChoosePinchIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChoosePinchIn:");
}

id objc_msgSend_didChoosePinchOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChoosePinchOut:");
}

id objc_msgSend_didChooseRotateClockwise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseRotateClockwise:");
}

id objc_msgSend_didChooseRotateCounterclockwise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseRotateCounterclockwise:");
}

id objc_msgSend_didChooseStop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChooseStop:");
}

id objc_msgSend_didCompleteHIDDeviceConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 didCompleteHIDDeviceConfiguration];
}

id objc_msgSend_didConfirmForSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didConfirmForSheet:");
}

id objc_msgSend_didConfirmGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didConfirmGesture:");
}

id objc_msgSend_didEndLongPressForInputController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didEndLongPressForInputController:");
}

id objc_msgSend_didEndLongPressForInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didEndLongPressForInputSource:");
}

id objc_msgSend_didExitMenuFromSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didExitMenuFromSheet:");
}

id objc_msgSend_didFailToFloatApp(void *a1, const char *a2, ...)
{
  return _[a1 didFailToFloatApp];
}

id objc_msgSend_didFailToPinApp(void *a1, const char *a2, ...)
{
  return _[a1 didFailToPinApp];
}

id objc_msgSend_didFetchElements_foundNewElements_currentFocusContext_didChangeActiveElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchElements:foundNewElements:currentFocusContext:didChangeActiveElementManager:");
}

id objc_msgSend_didFinishAsScannerDriver(void *a1, const char *a2, ...)
{
  return _[a1 didFinishAsScannerDriver];
}

id objc_msgSend_didFinishProvidingElements(void *a1, const char *a2, ...)
{
  return _[a1 didFinishProvidingElements];
}

id objc_msgSend_didFocusOnContext_oldContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFocusOnContext:oldContext:");
}

id objc_msgSend_didForceDimissCalibration(void *a1, const char *a2, ...)
{
  return _[a1 didForceDimissCalibration];
}

id objc_msgSend_didGetPhaseChangingAction(void *a1, const char *a2, ...)
{
  return _[a1 didGetPhaseChangingAction];
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMoveToParentViewController:");
}

id objc_msgSend_didPauseForReasonsToDisableScanning(void *a1, const char *a2, ...)
{
  return _[a1 didPauseForReasonsToDisableScanning];
}

id objc_msgSend_didPopFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPopFreehandSheet:");
}

id objc_msgSend_didPresentWithDisplayContext_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPresentWithDisplayContext:animated:");
}

id objc_msgSend_didPressScreenChangingButton(void *a1, const char *a2, ...)
{
  return _[a1 didPressScreenChangingButton];
}

id objc_msgSend_didPressScreenChangingButtonInMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPressScreenChangingButtonInMenu:");
}

id objc_msgSend_didPushPinchItemsViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPushPinchItemsViewController:");
}

id objc_msgSend_didReloadSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReloadSheet:");
}

id objc_msgSend_didRequestRedoGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRequestRedoGesture:");
}

id objc_msgSend_didSetFocusContextForResume(void *a1, const char *a2, ...)
{
  return _[a1 didSetFocusContextForResume];
}

id objc_msgSend_didSweepOverPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSweepOverPoint:");
}

id objc_msgSend_didTransitionToSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didTransitionToSheet:");
}

id objc_msgSend_didUpdateScatMenuItemStyle(void *a1, const char *a2, ...)
{
  return _[a1 didUpdateScatMenuItemStyle];
}

id objc_msgSend_didUpdateSearchResults(void *a1, const char *a2, ...)
{
  return _[a1 didUpdateSearchResults];
}

id objc_msgSend_didUpdateWithDisplayContext_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateWithDisplayContext:animated:");
}

id objc_msgSend_dimmedBackgroundImage(void *a1, const char *a2, ...)
{
  return _[a1 dimmedBackgroundImage];
}

id objc_msgSend_dimmedIconImage(void *a1, const char *a2, ...)
{
  return _[a1 dimmedIconImage];
}

id objc_msgSend_directionForOrientedPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directionForOrientedPoint:");
}

id objc_msgSend_disableAssistantWhilePasscodeLocked(void *a1, const char *a2, ...)
{
  return _[a1 disableAssistantWhilePasscodeLocked];
}

id objc_msgSend_disableControlCenterAssertion(void *a1, const char *a2, ...)
{
  return _[a1 disableControlCenterAssertion];
}

id objc_msgSend_disableDashBoardGesturesAssertion(void *a1, const char *a2, ...)
{
  return _[a1 disableDashBoardGesturesAssertion];
}

id objc_msgSend_disableElementFetcherIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 disableElementFetcherIfNecessary];
}

id objc_msgSend_disableEventManagement(void *a1, const char *a2, ...)
{
  return _[a1 disableEventManagement];
}

id objc_msgSend_disableIdleTimerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 disableIdleTimerAssertion];
}

id objc_msgSend_disableMotionTrackingDevices(void *a1, const char *a2, ...)
{
  return _[a1 disableMotionTrackingDevices];
}

id objc_msgSend_disableNotificationCenterAssertion(void *a1, const char *a2, ...)
{
  return _[a1 disableNotificationCenterAssertion];
}

id objc_msgSend_disableSystemGesturesAssertion(void *a1, const char *a2, ...)
{
  return _[a1 disableSystemGesturesAssertion];
}

id objc_msgSend_disabled(void *a1, const char *a2, ...)
{
  return _[a1 disabled];
}

id objc_msgSend_disabledIDMappingRegistry(void *a1, const char *a2, ...)
{
  return _[a1 disabledIDMappingRegistry];
}

id objc_msgSend_discoverabilitySignal(void *a1, const char *a2, ...)
{
  return _[a1 discoverabilitySignal];
}

id objc_msgSend_discoverySessionWithDeviceTypes_mediaType_position_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverySessionWithDeviceTypes:mediaType:position:");
}

id objc_msgSend_dismiss_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismiss:");
}

id objc_msgSend_dismissAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissAnimated:completion:");
}

id objc_msgSend_dismissBuddyIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 dismissBuddyIfNecessary];
}

id objc_msgSend_dismissCalibrationUI(void *a1, const char *a2, ...)
{
  return _[a1 dismissCalibrationUI];
}

id objc_msgSend_dispatchEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchEvent:");
}

id objc_msgSend_dispatchSpeechAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchSpeechAction:");
}

id objc_msgSend_display(void *a1, const char *a2, ...)
{
  return _[a1 display];
}

id objc_msgSend_displayConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 displayConfiguration];
}

id objc_msgSend_displayContextForCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayContextForCursor:");
}

id objc_msgSend_displayContextForCursor_forDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayContextForCursor:forDisplayID:");
}

id objc_msgSend_displayCornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 displayCornerRadius];
}

id objc_msgSend_displayID(void *a1, const char *a2, ...)
{
  return _[a1 displayID];
}

id objc_msgSend_displayIdentity(void *a1, const char *a2, ...)
{
  return _[a1 displayIdentity];
}

id objc_msgSend_displayLinkWithTarget_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayLinkWithTarget:selector:");
}

id objc_msgSend_displayManager(void *a1, const char *a2, ...)
{
  return _[a1 displayManager];
}

id objc_msgSend_displayManagerForDisplayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayManagerForDisplayId:");
}

id objc_msgSend_displayManagerForHardwareIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayManagerForHardwareIdentifier:");
}

id objc_msgSend_displayManagers(void *a1, const char *a2, ...)
{
  return _[a1 displayManagers];
}

id objc_msgSend_displaySourceDelegate(void *a1, const char *a2, ...)
{
  return _[a1 displaySourceDelegate];
}

id objc_msgSend_displaysDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displaysDidChange:");
}

id objc_msgSend_distance(void *a1, const char *a2, ...)
{
  return _[a1 distance];
}

id objc_msgSend_distanceBetweenRect_andPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceBetweenRect:andPoint:");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _[a1 distantFuture];
}

id objc_msgSend_dockBottomConstraint(void *a1, const char *a2, ...)
{
  return _[a1 dockBottomConstraint];
}

id objc_msgSend_dockPosition(void *a1, const char *a2, ...)
{
  return _[a1 dockPosition];
}

id objc_msgSend_dockSpecificButtons(void *a1, const char *a2, ...)
{
  return _[a1 dockSpecificButtons];
}

id objc_msgSend_dockStyleAttributes(void *a1, const char *a2, ...)
{
  return _[a1 dockStyleAttributes];
}

id objc_msgSend_dockTopConstraint(void *a1, const char *a2, ...)
{
  return _[a1 dockTopConstraint];
}

id objc_msgSend_doubleLightPressCameraButton(void *a1, const char *a2, ...)
{
  return _[a1 doubleLightPressCameraButton];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downButton(void *a1, const char *a2, ...)
{
  return _[a1 downButton];
}

id objc_msgSend_dragManager(void *a1, const char *a2, ...)
{
  return _[a1 dragManager];
}

id objc_msgSend_dragMenuItemsForElement_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dragMenuItemsForElement:delegate:");
}

id objc_msgSend_drawAtPoint_blendMode_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawAtPoint:blendMode:alpha:");
}

id objc_msgSend_drawBubbleCursorFrame_withPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawBubbleCursorFrame:withPath:");
}

id objc_msgSend_drawInContext_inRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInContext:inRect:");
}

id objc_msgSend_drawInRect_blendMode_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:blendMode:alpha:");
}

id objc_msgSend_drawInRect_withAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:withAttributes:");
}

id objc_msgSend_drawingElementManager(void *a1, const char *a2, ...)
{
  return _[a1 drawingElementManager];
}

id objc_msgSend_drawingViewController(void *a1, const char *a2, ...)
{
  return _[a1 drawingViewController];
}

id objc_msgSend_drawingViewController_moveFingersToPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawingViewController:moveFingersToPoints:");
}

id objc_msgSend_driver_didFocusOnContext_oldContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driver:didFocusOnContext:oldContext:");
}

id objc_msgSend_driver_indicateDwellScanningWillAbort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driver:indicateDwellScanningWillAbort:");
}

id objc_msgSend_driver_willFocusOnContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driver:willFocusOnContext:");
}

id objc_msgSend_driver_willUnfocusFromContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driver:willUnfocusFromContext:");
}

id objc_msgSend_driverDidBecomeActive_didChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driverDidBecomeActive:didChange:");
}

id objc_msgSend_driverDidBecomeInactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driverDidBecomeInactive:");
}

id objc_msgSend_driverDidPause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driverDidPause:");
}

id objc_msgSend_driverType(void *a1, const char *a2, ...)
{
  return _[a1 driverType];
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return _[a1 drop];
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _[a1 duration];
}

id objc_msgSend_dwellBubbleModeCompletionBlock(void *a1, const char *a2, ...)
{
  return _[a1 dwellBubbleModeCompletionBlock];
}

id objc_msgSend_dwellBubbleModeTimer(void *a1, const char *a2, ...)
{
  return _[a1 dwellBubbleModeTimer];
}

id objc_msgSend_dwellControlAutorevertEnabled(void *a1, const char *a2, ...)
{
  return _[a1 dwellControlAutorevertEnabled];
}

id objc_msgSend_dwellControlEnabled(void *a1, const char *a2, ...)
{
  return _[a1 dwellControlEnabled];
}

id objc_msgSend_dwellControlPaused(void *a1, const char *a2, ...)
{
  return _[a1 dwellControlPaused];
}

id objc_msgSend_dwellDelay(void *a1, const char *a2, ...)
{
  return _[a1 dwellDelay];
}

id objc_msgSend_dwellDuration(void *a1, const char *a2, ...)
{
  return _[a1 dwellDuration];
}

id objc_msgSend_dwellItems(void *a1, const char *a2, ...)
{
  return _[a1 dwellItems];
}

id objc_msgSend_dwellScanningDriver(void *a1, const char *a2, ...)
{
  return _[a1 dwellScanningDriver];
}

id objc_msgSend_dwellSwitchAssigned(void *a1, const char *a2, ...)
{
  return _[a1 dwellSwitchAssigned];
}

id objc_msgSend_dwellTimer(void *a1, const char *a2, ...)
{
  return _[a1 dwellTimer];
}

id objc_msgSend_dynamicMetaProperties(void *a1, const char *a2, ...)
{
  return _[a1 dynamicMetaProperties];
}

id objc_msgSend_effectForBlurEffect_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectForBlurEffect:style:");
}

id objc_msgSend_effectWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectWithStyle:");
}

id objc_msgSend_effectiveStyleAttributes(void *a1, const char *a2, ...)
{
  return _[a1 effectiveStyleAttributes];
}

id objc_msgSend_elemLog(void *a1, const char *a2, ...)
{
  return _[a1 elemLog];
}

id objc_msgSend_element(void *a1, const char *a2, ...)
{
  return _[a1 element];
}

id objc_msgSend_elementAfter_didWrap_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementAfter:didWrap:options:");
}

id objc_msgSend_elementAtCoordinate_withVisualPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementAtCoordinate:withVisualPadding:");
}

id objc_msgSend_elementAtCoordinate_withVisualPadding_displayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementAtCoordinate:withVisualPadding:displayID:");
}

id objc_msgSend_elementAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementAtPoint:");
}

id objc_msgSend_elementAtPoint_displayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementAtPoint:displayID:");
}

id objc_msgSend_elementBefore_didWrap_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementBefore:didWrap:options:");
}

id objc_msgSend_elementCommunity(void *a1, const char *a2, ...)
{
  return _[a1 elementCommunity];
}

id objc_msgSend_elementCommunityGroup(void *a1, const char *a2, ...)
{
  return _[a1 elementCommunityGroup];
}

id objc_msgSend_elementFetcher(void *a1, const char *a2, ...)
{
  return _[a1 elementFetcher];
}

id objc_msgSend_elementFinderTimer(void *a1, const char *a2, ...)
{
  return _[a1 elementFinderTimer];
}

id objc_msgSend_elementForAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementForAttribute:");
}

id objc_msgSend_elementForFingers(void *a1, const char *a2, ...)
{
  return _[a1 elementForFingers];
}

id objc_msgSend_elementManager(void *a1, const char *a2, ...)
{
  return _[a1 elementManager];
}

id objc_msgSend_elementNavController(void *a1, const char *a2, ...)
{
  return _[a1 elementNavController];
}

id objc_msgSend_elementParent(void *a1, const char *a2, ...)
{
  return _[a1 elementParent];
}

id objc_msgSend_elementProvider(void *a1, const char *a2, ...)
{
  return _[a1 elementProvider];
}

id objc_msgSend_elementProviderDelegate(void *a1, const char *a2, ...)
{
  return _[a1 elementProviderDelegate];
}

id objc_msgSend_elementProviderForSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementProviderForSheet:");
}

id objc_msgSend_elementProviders(void *a1, const char *a2, ...)
{
  return _[a1 elementProviders];
}

id objc_msgSend_elementRef(void *a1, const char *a2, ...)
{
  return _[a1 elementRef];
}

id objc_msgSend_elementWithAXUIElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementWithAXUIElement:");
}

id objc_msgSend_elementWithUIElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementWithUIElement:");
}

id objc_msgSend_elements(void *a1, const char *a2, ...)
{
  return _[a1 elements];
}

id objc_msgSend_elementsForMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsForMatchingBlock:");
}

id objc_msgSend_elementsToScroll(void *a1, const char *a2, ...)
{
  return _[a1 elementsToScroll];
}

id objc_msgSend_eligibleForIconVision(void *a1, const char *a2, ...)
{
  return _[a1 eligibleForIconVision];
}

id objc_msgSend_enableBubbleMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableBubbleMode:");
}

id objc_msgSend_enableElementFetcherAndNotificationsIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 enableElementFetcherAndNotificationsIfNecessary];
}

id objc_msgSend_enableEventManagement(void *a1, const char *a2, ...)
{
  return _[a1 enableEventManagement];
}

id objc_msgSend_enableEyeTrackingAutoHide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableEyeTrackingAutoHide:");
}

id objc_msgSend_enableMotionTrackingDevices(void *a1, const char *a2, ...)
{
  return _[a1 enableMotionTrackingDevices];
}

id objc_msgSend_enabledAuxiliaryElementManagersForRoles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enabledAuxiliaryElementManagersForRoles:");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_endContinuousScrollingOnDisplay_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endContinuousScrollingOnDisplay:withCompletion:");
}

id objc_msgSend_endDragModeAtPoint_onDisplay_completed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDragModeAtPoint:onDisplay:completed:");
}

id objc_msgSend_endHandlingHIDEventsForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endHandlingHIDEventsForReason:");
}

id objc_msgSend_endPinch(void *a1, const char *a2, ...)
{
  return _[a1 endPinch];
}

id objc_msgSend_endPointForLineGesture(void *a1, const char *a2, ...)
{
  return _[a1 endPointForLineGesture];
}

id objc_msgSend_endScanning(void *a1, const char *a2, ...)
{
  return _[a1 endScanning];
}

id objc_msgSend_endScroll(void *a1, const char *a2, ...)
{
  return _[a1 endScroll];
}

id objc_msgSend_endUpdates(void *a1, const char *a2, ...)
{
  return _[a1 endUpdates];
}

id objc_msgSend_endUsingFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endUsingFeedback:");
}

id objc_msgSend_enrollmentComplete(void *a1, const char *a2, ...)
{
  return _[a1 enrollmentComplete];
}

id objc_msgSend_ensureAssertionsHaveBeenProcessedWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureAssertionsHaveBeenProcessedWithCompletion:");
}

id objc_msgSend_ensureHidden_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureHidden:animated:");
}

id objc_msgSend_enumerateDisplayManagersWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDisplayManagersWithBlock:");
}

id objc_msgSend_enumerateElementsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateElementsUsingBlock:");
}

id objc_msgSend_enumerateFingersUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateFingersUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateLeafDescendantsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateLeafDescendantsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_eventHandlers(void *a1, const char *a2, ...)
{
  return _[a1 eventHandlers];
}

id objc_msgSend_eventManager(void *a1, const char *a2, ...)
{
  return _[a1 eventManager];
}

id objc_msgSend_eventProcessor(void *a1, const char *a2, ...)
{
  return _[a1 eventProcessor];
}

id objc_msgSend_eventService(void *a1, const char *a2, ...)
{
  return _[a1 eventService];
}

id objc_msgSend_eventServiceID(void *a1, const char *a2, ...)
{
  return _[a1 eventServiceID];
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return _[a1 eventType];
}

id objc_msgSend_exitActionElement(void *a1, const char *a2, ...)
{
  return _[a1 exitActionElement];
}

id objc_msgSend_exitActionElementForFingersInMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitActionElementForFingersInMenu:");
}

id objc_msgSend_exitDrawingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitDrawingViewController:");
}

id objc_msgSend_expressionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 expressionConfiguration];
}

id objc_msgSend_expressionSensitivity(void *a1, const char *a2, ...)
{
  return _[a1 expressionSensitivity];
}

id objc_msgSend_expressionToSwitchTypeMapping(void *a1, const char *a2, ...)
{
  return _[a1 expressionToSwitchTypeMapping];
}

id objc_msgSend_expressions(void *a1, const char *a2, ...)
{
  return _[a1 expressions];
}

id objc_msgSend_extendActivationRegionWithoutCollidingWithScrollers_rotatedScreenBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extendActivationRegionWithoutCollidingWithScrollers:rotatedScreenBounds:");
}

id objc_msgSend_extendedGamepad(void *a1, const char *a2, ...)
{
  return _[a1 extendedGamepad];
}

id objc_msgSend_extraProviderElements(void *a1, const char *a2, ...)
{
  return _[a1 extraProviderElements];
}

id objc_msgSend_eyeTrackerIsActivelyTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eyeTrackerIsActivelyTracking:");
}

id objc_msgSend_eyeTrackingAutoHideAllowed(void *a1, const char *a2, ...)
{
  return _[a1 eyeTrackingAutoHideAllowed];
}

id objc_msgSend_eyeTrackingAutoHideCursorAnimator(void *a1, const char *a2, ...)
{
  return _[a1 eyeTrackingAutoHideCursorAnimator];
}

id objc_msgSend_eyeTrackingAutoHideEnabled(void *a1, const char *a2, ...)
{
  return _[a1 eyeTrackingAutoHideEnabled];
}

id objc_msgSend_eyeTrackingAutoHideFinished(void *a1, const char *a2, ...)
{
  return _[a1 eyeTrackingAutoHideFinished];
}

id objc_msgSend_eyeTrackingAutoHideTimeout(void *a1, const char *a2, ...)
{
  return _[a1 eyeTrackingAutoHideTimeout];
}

id objc_msgSend_eyeTrackingAutotHideLastBubbleModeElementShowed(void *a1, const char *a2, ...)
{
  return _[a1 eyeTrackingAutotHideLastBubbleModeElementShowed];
}

id objc_msgSend_eyeTrackingAutotHideLastPointCursorShowed(void *a1, const char *a2, ...)
{
  return _[a1 eyeTrackingAutotHideLastPointCursorShowed];
}

id objc_msgSend_eyeTrackingRecalibrateFace(void *a1, const char *a2, ...)
{
  return _[a1 eyeTrackingRecalibrateFace];
}

id objc_msgSend_face(void *a1, const char *a2, ...)
{
  return _[a1 face];
}

id objc_msgSend_faceLayer(void *a1, const char *a2, ...)
{
  return _[a1 faceLayer];
}

id objc_msgSend_factoryWithMass_stiffness_damping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "factoryWithMass:stiffness:damping:");
}

id objc_msgSend_fadeDuration(void *a1, const char *a2, ...)
{
  return _[a1 fadeDuration];
}

id objc_msgSend_fadeNubbit(void *a1, const char *a2, ...)
{
  return _[a1 fadeNubbit];
}

id objc_msgSend_fadeTrackpad(void *a1, const char *a2, ...)
{
  return _[a1 fadeTrackpad];
}

id objc_msgSend_fallbackActionBlock(void *a1, const char *a2, ...)
{
  return _[a1 fallbackActionBlock];
}

id objc_msgSend_fallbackScrollDownAncestor(void *a1, const char *a2, ...)
{
  return _[a1 fallbackScrollDownAncestor];
}

id objc_msgSend_fallbackScrollLeftAncestor(void *a1, const char *a2, ...)
{
  return _[a1 fallbackScrollLeftAncestor];
}

id objc_msgSend_fallbackScrollRightAncestor(void *a1, const char *a2, ...)
{
  return _[a1 fallbackScrollRightAncestor];
}

id objc_msgSend_fallbackScrollUpAncestor(void *a1, const char *a2, ...)
{
  return _[a1 fallbackScrollUpAncestor];
}

id objc_msgSend_fetchEventOccurred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEventOccurred:");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fill(void *a1, const char *a2, ...)
{
  return _[a1 fill];
}

id objc_msgSend_fillMode(void *a1, const char *a2, ...)
{
  return _[a1 fillMode];
}

id objc_msgSend_fillWithBlendMode_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillWithBlendMode:alpha:");
}

id objc_msgSend_filterWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterWithType:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_findElementMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findElementMatchingBlock:");
}

id objc_msgSend_findElementMatchingElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findElementMatchingElement:");
}

id objc_msgSend_findGroupableMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findGroupableMatchingBlock:");
}

id objc_msgSend_findGroupableMatchingGroupable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findGroupableMatchingGroupable:");
}

id objc_msgSend_fingerContainerView(void *a1, const char *a2, ...)
{
  return _[a1 fingerContainerView];
}

id objc_msgSend_fingerContentViewIsActive(void *a1, const char *a2, ...)
{
  return _[a1 fingerContentViewIsActive];
}

id objc_msgSend_fingerController(void *a1, const char *a2, ...)
{
  return _[a1 fingerController];
}

id objc_msgSend_fingerIdentifiersAtEventIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerIdentifiersAtEventIndex:");
}

id objc_msgSend_fingerInnerCircleInnerRadius(void *a1, const char *a2, ...)
{
  return _[a1 fingerInnerCircleInnerRadius];
}

id objc_msgSend_fingerInnerRadius(void *a1, const char *a2, ...)
{
  return _[a1 fingerInnerRadius];
}

id objc_msgSend_fingerItemsViewController_didChooseNumberOfFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerItemsViewController:didChooseNumberOfFingers:");
}

id objc_msgSend_fingerModelAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerModelAtPoint:");
}

id objc_msgSend_fingerModelForLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerModelForLocation:");
}

id objc_msgSend_fingerModels(void *a1, const char *a2, ...)
{
  return _[a1 fingerModels];
}

id objc_msgSend_fingerModelsForPointStrings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerModelsForPointStrings:");
}

id objc_msgSend_fingerPositions(void *a1, const char *a2, ...)
{
  return _[a1 fingerPositions];
}

id objc_msgSend_fingerShapeForCorner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingerShapeForCorner:");
}

id objc_msgSend_fingerWidth(void *a1, const char *a2, ...)
{
  return _[a1 fingerWidth];
}

id objc_msgSend_fingersDown(void *a1, const char *a2, ...)
{
  return _[a1 fingersDown];
}

id objc_msgSend_fingersElement_didBecomeFocused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fingersElement:didBecomeFocused:");
}

id objc_msgSend_firstAuxiliaryElementWithRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstAuxiliaryElementWithRole:");
}

id objc_msgSend_firstBaselineAnchor(void *a1, const char *a2, ...)
{
  return _[a1 firstBaselineAnchor];
}

id objc_msgSend_firstChild(void *a1, const char *a2, ...)
{
  return _[a1 firstChild];
}

id objc_msgSend_firstChildPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstChildPassingTest:");
}

id objc_msgSend_firstDescendantMatchingItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstDescendantMatchingItem:");
}

id objc_msgSend_firstDescendantPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstDescendantPassingTest:");
}

id objc_msgSend_firstElementInScene_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstElementInScene:");
}

id objc_msgSend_firstElementWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstElementWithOptions:");
}

id objc_msgSend_firstFocusContext(void *a1, const char *a2, ...)
{
  return _[a1 firstFocusContext];
}

id objc_msgSend_firstItemForScanningWithElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstItemForScanningWithElementCommunity:");
}

id objc_msgSend_firstKeyboardItem(void *a1, const char *a2, ...)
{
  return _[a1 firstKeyboardItem];
}

id objc_msgSend_firstLeafDescendant(void *a1, const char *a2, ...)
{
  return _[a1 firstLeafDescendant];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_firstPath(void *a1, const char *a2, ...)
{
  return _[a1 firstPath];
}

id objc_msgSend_firstResponder(void *a1, const char *a2, ...)
{
  return _[a1 firstResponder];
}

id objc_msgSend_firstResponderDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstResponderDidChange:");
}

id objc_msgSend_firstScannerElement(void *a1, const char *a2, ...)
{
  return _[a1 firstScannerElement];
}

id objc_msgSend_firstScannerGroupable(void *a1, const char *a2, ...)
{
  return _[a1 firstScannerGroupable];
}

id objc_msgSend_flash(void *a1, const char *a2, ...)
{
  return _[a1 flash];
}

id objc_msgSend_flashCellForMenuItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flashCellForMenuItem:");
}

id objc_msgSend_flashModernMenuItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flashModernMenuItem:");
}

id objc_msgSend_flickGestureAtPoint_angle_numberOfFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flickGestureAtPoint:angle:numberOfFingers:");
}

id objc_msgSend_flickGestureStartingAtPoint_endingAtPoint_numberOfFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flickGestureStartingAtPoint:endingAtPoint:numberOfFingers:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_focusContext(void *a1, const char *a2, ...)
{
  return _[a1 focusContext];
}

id objc_msgSend_focusContextAfterDrillOutOnGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "focusContextAfterDrillOutOnGroup:");
}

id objc_msgSend_focusContextAutomatic(void *a1, const char *a2, ...)
{
  return _[a1 focusContextAutomatic];
}

id objc_msgSend_focusContextForActionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "focusContextForActionHandler:");
}

id objc_msgSend_focusContextForResume(void *a1, const char *a2, ...)
{
  return _[a1 focusContextForResume];
}

id objc_msgSend_focusContextSelf(void *a1, const char *a2, ...)
{
  return _[a1 focusContextSelf];
}

id objc_msgSend_focusContextWithElement_elementManager_selectBehavior_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "focusContextWithElement:elementManager:selectBehavior:options:");
}

id objc_msgSend_focusInterval(void *a1, const char *a2, ...)
{
  return _[a1 focusInterval];
}

id objc_msgSend_focusTimer(void *a1, const char *a2, ...)
{
  return _[a1 focusTimer];
}

id objc_msgSend_focusedGroupStateColor(void *a1, const char *a2, ...)
{
  return _[a1 focusedGroupStateColor];
}

id objc_msgSend_focusedItemCursorController(void *a1, const char *a2, ...)
{
  return _[a1 focusedItemCursorController];
}

id objc_msgSend_focusedStateBorderThickness(void *a1, const char *a2, ...)
{
  return _[a1 focusedStateBorderThickness];
}

id objc_msgSend_focusedStateColor(void *a1, const char *a2, ...)
{
  return _[a1 focusedStateColor];
}

id objc_msgSend_fontMetrics(void *a1, const char *a2, ...)
{
  return _[a1 fontMetrics];
}

id objc_msgSend_footerToContainerVerticalConstraint(void *a1, const char *a2, ...)
{
  return _[a1 footerToContainerVerticalConstraint];
}

id objc_msgSend_footerView(void *a1, const char *a2, ...)
{
  return _[a1 footerView];
}

id objc_msgSend_footerViewHiddenConstraint(void *a1, const char *a2, ...)
{
  return _[a1 footerViewHiddenConstraint];
}

id objc_msgSend_forceDisableScreenLock(void *a1, const char *a2, ...)
{
  return _[a1 forceDisableScreenLock];
}

id objc_msgSend_forceEyeTrackerExperience(void *a1, const char *a2, ...)
{
  return _[a1 forceEyeTrackerExperience];
}

id objc_msgSend_forcePause(void *a1, const char *a2, ...)
{
  return _[a1 forcePause];
}

id objc_msgSend_forceTouchGestureAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceTouchGestureAtPoint:");
}

id objc_msgSend_foregroundImageAction(void *a1, const char *a2, ...)
{
  return _[a1 foregroundImageAction];
}

id objc_msgSend_foregroundLayer(void *a1, const char *a2, ...)
{
  return _[a1 foregroundLayer];
}

id objc_msgSend_foreheadRect(void *a1, const char *a2, ...)
{
  return _[a1 foreheadRect];
}

id objc_msgSend_forwardDirection(void *a1, const char *a2, ...)
{
  return _[a1 forwardDirection];
}

id objc_msgSend_forwardSwitchEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forwardSwitchEvent:");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _[a1 frame];
}

id objc_msgSend_frameForCenterPointAtSelectionPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForCenterPointAtSelectionPath:");
}

id objc_msgSend_frameForSelectionPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForSelectionPath:");
}

id objc_msgSend_freehandSheet_didHighlightBend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freehandSheet:didHighlightBend:");
}

id objc_msgSend_freehandSheet_didHighlightBendLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freehandSheet:didHighlightBendLeft:");
}

id objc_msgSend_freehandSheet_didHighlightBendRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freehandSheet:didHighlightBendRight:");
}

id objc_msgSend_freehandSheet_didHighlightMove_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freehandSheet:didHighlightMove:");
}

id objc_msgSend_freehandSheet_didHighlightRotate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freehandSheet:didHighlightRotate:");
}

id objc_msgSend_freehandSheet_didHighlightRotateCCW90_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freehandSheet:didHighlightRotateCCW90:");
}

id objc_msgSend_freehandSheet_didHighlightRotateCCW_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freehandSheet:didHighlightRotateCCW:");
}

id objc_msgSend_freehandSheet_didHighlightRotateCW90_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freehandSheet:didHighlightRotateCW90:");
}

id objc_msgSend_freehandSheet_didHighlightRotateCW_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freehandSheet:didHighlightRotateCW:");
}

id objc_msgSend_freehandSheet_didHighlightStraighten_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "freehandSheet:didHighlightStraighten:");
}

id objc_msgSend_freezeScanning(void *a1, const char *a2, ...)
{
  return _[a1 freezeScanning];
}

id objc_msgSend_fromAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fromAction:");
}

id objc_msgSend_fromSwitch_longPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fromSwitch:longPress:");
}

id objc_msgSend_fromValue(void *a1, const char *a2, ...)
{
  return _[a1 fromValue];
}

id objc_msgSend_frontmostAppMayBeLoading(void *a1, const char *a2, ...)
{
  return _[a1 frontmostAppMayBeLoading];
}

id objc_msgSend_functionWithControlPoints__::(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "functionWithControlPoints::::");
}

id objc_msgSend_gameControlButtonPress(void *a1, const char *a2, ...)
{
  return _[a1 gameControlButtonPress];
}

id objc_msgSend_gameControllerInfo(void *a1, const char *a2, ...)
{
  return _[a1 gameControllerInfo];
}

id objc_msgSend_gamepadInputSource(void *a1, const char *a2, ...)
{
  return _[a1 gamepadInputSource];
}

id objc_msgSend_generalPasteboard(void *a1, const char *a2, ...)
{
  return _[a1 generalPasteboard];
}

id objc_msgSend_generalTimer(void *a1, const char *a2, ...)
{
  return _[a1 generalTimer];
}

id objc_msgSend_generateContinuousScrollersOnQueue_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateContinuousScrollersOnQueue:withCompletion:");
}

id objc_msgSend_generateContinuousScrollersWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateContinuousScrollersWithCompletion:");
}

id objc_msgSend_gesture(void *a1, const char *a2, ...)
{
  return _[a1 gesture];
}

id objc_msgSend_gestureKeys(void *a1, const char *a2, ...)
{
  return _[a1 gestureKeys];
}

id objc_msgSend_gestureProvider(void *a1, const char *a2, ...)
{
  return _[a1 gestureProvider];
}

id objc_msgSend_gestureProvider_didShowFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureProvider:didShowFingers:");
}

id objc_msgSend_gestureProvider_shouldResetScanningFromElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureProvider:shouldResetScanningFromElement:");
}

id objc_msgSend_gestureRepresentationWithHandType_locations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureRepresentationWithHandType:locations:");
}

id objc_msgSend_gestureSheet(void *a1, const char *a2, ...)
{
  return _[a1 gestureSheet];
}

id objc_msgSend_gestureShiftedByOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureShiftedByOffset:");
}

id objc_msgSend_gestureWithPoints_times_forces_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureWithPoints:times:forces:");
}

id objc_msgSend_gesturesButton(void *a1, const char *a2, ...)
{
  return _[a1 gesturesButton];
}

id objc_msgSend_gesturesSheet(void *a1, const char *a2, ...)
{
  return _[a1 gesturesSheet];
}

id objc_msgSend_gesturesSheetForMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gesturesSheetForMenu:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getCurveArcCenter_startAngle_endAngle_updatedFingerAngle_updatedFingerCenter_withFingerAngle_fingerCenter_curveRadius_distanceToMove_onLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurveArcCenter:startAngle:endAngle:updatedFingerAngle:updatedFingerCenter:withFingerAngle:fingerCenter:curveRadius:distanceToMove:onLeft:");
}

id objc_msgSend_getDeviceSpecificImageForColor_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDeviceSpecificImageForColor:withCompletion:");
}

id objc_msgSend_getIconSuffix(void *a1, const char *a2, ...)
{
  return _[a1 getIconSuffix];
}

id objc_msgSend_getInitialResizeIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getInitialResizeIcon:");
}

id objc_msgSend_getPinchPoint_startPoint_pinchPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPinchPoint:startPoint:pinchPoint:");
}

id objc_msgSend_getPointsDelta_startPoint_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPointsDelta:startPoint:scale:");
}

id objc_msgSend_getScreenHeight(void *a1, const char *a2, ...)
{
  return _[a1 getScreenHeight];
}

id objc_msgSend_getScreenWidth(void *a1, const char *a2, ...)
{
  return _[a1 getScreenWidth];
}

id objc_msgSend_getTrackpadBorderFrame(void *a1, const char *a2, ...)
{
  return _[a1 getTrackpadBorderFrame];
}

id objc_msgSend_getTrackpadColor(void *a1, const char *a2, ...)
{
  return _[a1 getTrackpadColor];
}

id objc_msgSend_getTrackpadFrame_borderFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTrackpadFrame:borderFrame:");
}

id objc_msgSend_getUpdatedPinchPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUpdatedPinchPoint:");
}

id objc_msgSend_glyphCharacter(void *a1, const char *a2, ...)
{
  return _[a1 glyphCharacter];
}

id objc_msgSend_glyphImage(void *a1, const char *a2, ...)
{
  return _[a1 glyphImage];
}

id objc_msgSend_grayColor(void *a1, const char *a2, ...)
{
  return _[a1 grayColor];
}

id objc_msgSend_grayFingerInnerCircleInnerRadius(void *a1, const char *a2, ...)
{
  return _[a1 grayFingerInnerCircleInnerRadius];
}

id objc_msgSend_grayFingerInnerCircleOuterRadius(void *a1, const char *a2, ...)
{
  return _[a1 grayFingerInnerCircleOuterRadius];
}

id objc_msgSend_grayFingerInnerFill(void *a1, const char *a2, ...)
{
  return _[a1 grayFingerInnerFill];
}

id objc_msgSend_grayFingerInnerRadius(void *a1, const char *a2, ...)
{
  return _[a1 grayFingerInnerRadius];
}

id objc_msgSend_grayFingerOuterRadius(void *a1, const char *a2, ...)
{
  return _[a1 grayFingerOuterRadius];
}

id objc_msgSend_gridCenterPointFrameWithAvailableFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gridCenterPointFrameWithAvailableFrame:");
}

id objc_msgSend_gridCenterPointImageWithAvailableSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gridCenterPointImageWithAvailableSize:");
}

id objc_msgSend_gridCenterPointPathWithAvailableFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gridCenterPointPathWithAvailableFrame:");
}

id objc_msgSend_gridColor(void *a1, const char *a2, ...)
{
  return _[a1 gridColor];
}

id objc_msgSend_gridLineThickness(void *a1, const char *a2, ...)
{
  return _[a1 gridLineThickness];
}

id objc_msgSend_gridShadowColor(void *a1, const char *a2, ...)
{
  return _[a1 gridShadowColor];
}

id objc_msgSend_gridShadowOffset(void *a1, const char *a2, ...)
{
  return _[a1 gridShadowOffset];
}

id objc_msgSend_groupVisualScrollersAuxElementManager(void *a1, const char *a2, ...)
{
  return _[a1 groupVisualScrollersAuxElementManager];
}

id objc_msgSend_groupWithElements_label_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupWithElements:label:");
}

id objc_msgSend_groupingEnabledDidChange(void *a1, const char *a2, ...)
{
  return _[a1 groupingEnabledDidChange];
}

id objc_msgSend_guidedAccessIgnoredRegions(void *a1, const char *a2, ...)
{
  return _[a1 guidedAccessIgnoredRegions];
}

id objc_msgSend_handGestureSource(void *a1, const char *a2, ...)
{
  return _[a1 handGestureSource];
}

id objc_msgSend_handInfo(void *a1, const char *a2, ...)
{
  return _[a1 handInfo];
}

id objc_msgSend_handManager(void *a1, const char *a2, ...)
{
  return _[a1 handManager];
}

id objc_msgSend_handleActivateSideAppMenuItemWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleActivateSideAppMenuItemWithIdentifier:");
}

id objc_msgSend_handleActivateWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleActivateWithElement:");
}

id objc_msgSend_handleAlertDidAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAlertDidAppear:");
}

id objc_msgSend_handleAnnouncement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAnnouncement:");
}

id objc_msgSend_handleButtonEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleButtonEvent:");
}

id objc_msgSend_handleButtonNumber_isDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleButtonNumber:isDown:");
}

id objc_msgSend_handleCustomHomeButtonAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCustomHomeButtonAction:");
}

id objc_msgSend_handleDrillInOnGroup_elementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDrillInOnGroup:elementManager:");
}

id objc_msgSend_handleDrillOutOnGroup_elementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDrillOutOnGroup:elementManager:");
}

id objc_msgSend_handleEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEvent:");
}

id objc_msgSend_handleEventRepresentationForMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEventRepresentationForMovement:");
}

id objc_msgSend_handleEventRepresentationFromFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEventRepresentationFromFilter:");
}

id objc_msgSend_handleEyeTrackingMovementWithDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEyeTrackingMovementWithDelta:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFingerDriftedAway(void *a1, const char *a2, ...)
{
  return _[a1 handleFingerDriftedAway];
}

id objc_msgSend_handleInputAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInputAction:");
}

id objc_msgSend_handleInputAction_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInputAction:withElement:");
}

id objc_msgSend_handleInterDeviceBailOutForInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInterDeviceBailOutForInputSource:");
}

id objc_msgSend_handleLaserPrimaryButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleLaserPrimaryButtonPress:");
}

id objc_msgSend_handleMenuWasActivatedByScanner(void *a1, const char *a2, ...)
{
  return _[a1 handleMenuWasActivatedByScanner];
}

id objc_msgSend_handleMoveTrackpadBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMoveTrackpadBorder:");
}

id objc_msgSend_handleMovementWithDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMovementWithDelta:");
}

id objc_msgSend_handleMultiTouchStandard_onDisplay_withExistingFingerMidPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMultiTouchStandard:onDisplay:withExistingFingerMidPoint:");
}

id objc_msgSend_handleOrientationChange(void *a1, const char *a2, ...)
{
  return _[a1 handleOrientationChange];
}

id objc_msgSend_handlePointerMoveTrackpadBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePointerMoveTrackpadBorder:");
}

id objc_msgSend_handlePrimaryButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePrimaryButtonPress:");
}

id objc_msgSend_handleRealCancelEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRealCancelEvent:");
}

id objc_msgSend_handleRealDownEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRealDownEvent:");
}

id objc_msgSend_handleRealEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRealEvent:");
}

id objc_msgSend_handleRealMoveEvent_maxOrb_currentForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRealMoveEvent:maxOrb:currentForce:");
}

id objc_msgSend_handleRealUpEvent_maxOrb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRealUpEvent:maxOrb:");
}

id objc_msgSend_handleReceivedSwitchEvent_deviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReceivedSwitchEvent:deviceName:");
}

id objc_msgSend_handleReportCallback_report_reportLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReportCallback:report:reportLength:");
}

id objc_msgSend_handleScreenChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleScreenChange:");
}

id objc_msgSend_handleScrollWithDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleScrollWithDelta:");
}

id objc_msgSend_handleSecondaryButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSecondaryButtonPress:");
}

id objc_msgSend_handleStopSpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleStopSpeaking:");
}

id objc_msgSend_handleTrackpadBorderTap_moveAmount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTrackpadBorderTap:moveAmount:");
}

id objc_msgSend_handleTrackpadCornerPlacement(void *a1, const char *a2, ...)
{
  return _[a1 handleTrackpadCornerPlacement];
}

id objc_msgSend_handleTrackpadMovePointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTrackpadMovePointer:");
}

id objc_msgSend_handleTrackpadPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTrackpadPress:");
}

id objc_msgSend_handleTrackpadPrimaryClick(void *a1, const char *a2, ...)
{
  return _[a1 handleTrackpadPrimaryClick];
}

id objc_msgSend_handleUSBMFiDeviceConnected(void *a1, const char *a2, ...)
{
  return _[a1 handleUSBMFiDeviceConnected];
}

id objc_msgSend_handleUsagePage_usage_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUsagePage:usage:value:");
}

id objc_msgSend_handledEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handledEvent:");
}

id objc_msgSend_hardwareIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 hardwareIdentifier];
}

id objc_msgSend_hardwareItems(void *a1, const char *a2, ...)
{
  return _[a1 hardwareItems];
}

id objc_msgSend_hasActivatedScrollSinceContextUpdate(void *a1, const char *a2, ...)
{
  return _[a1 hasActivatedScrollSinceContextUpdate];
}

id objc_msgSend_hasActiveClients(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveClients];
}

id objc_msgSend_hasAllTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAllTraits:");
}

id objc_msgSend_hasAnyTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAnyTraits:");
}

id objc_msgSend_hasFace(void *a1, const char *a2, ...)
{
  return _[a1 hasFace];
}

id objc_msgSend_hasIdleTimeExpired(void *a1, const char *a2, ...)
{
  return _[a1 hasIdleTimeExpired];
}

id objc_msgSend_hasInitializedInputSources(void *a1, const char *a2, ...)
{
  return _[a1 hasInitializedInputSources];
}

id objc_msgSend_hasLocalizableName(void *a1, const char *a2, ...)
{
  return _[a1 hasLocalizableName];
}

id objc_msgSend_hasLongPressAction(void *a1, const char *a2, ...)
{
  return _[a1 hasLongPressAction];
}

id objc_msgSend_hasPickedPoint(void *a1, const char *a2, ...)
{
  return _[a1 hasPickedPoint];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasSelectAction(void *a1, const char *a2, ...)
{
  return _[a1 hasSelectAction];
}

id objc_msgSend_hasStepAction(void *a1, const char *a2, ...)
{
  return _[a1 hasStepAction];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasWebContent(void *a1, const char *a2, ...)
{
  return _[a1 hasWebContent];
}

id objc_msgSend_hasZeroElements(void *a1, const char *a2, ...)
{
  return _[a1 hasZeroElements];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_headGestureSource(void *a1, const char *a2, ...)
{
  return _[a1 headGestureSource];
}

id objc_msgSend_headSwitch(void *a1, const char *a2, ...)
{
  return _[a1 headSwitch];
}

id objc_msgSend_headTrackingPoint(void *a1, const char *a2, ...)
{
  return _[a1 headTrackingPoint];
}

id objc_msgSend_heightAnchor(void *a1, const char *a2, ...)
{
  return _[a1 heightAnchor];
}

id objc_msgSend_hidDeviceDidStartConfiguring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hidDeviceDidStartConfiguring:");
}

id objc_msgSend_hidDeviceIsConfiguring(void *a1, const char *a2, ...)
{
  return _[a1 hidDeviceIsConfiguring];
}

id objc_msgSend_hidDeviceSentReservedStatus(void *a1, const char *a2, ...)
{
  return _[a1 hidDeviceSentReservedStatus];
}

id objc_msgSend_hidManager(void *a1, const char *a2, ...)
{
  return _[a1 hidManager];
}

id objc_msgSend_hide(void *a1, const char *a2, ...)
{
  return _[a1 hide];
}

id objc_msgSend_hide_animate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hide:animate:");
}

id objc_msgSend_hideBubbleCursor(void *a1, const char *a2, ...)
{
  return _[a1 hideBubbleCursor];
}

id objc_msgSend_hideBubbleCursorForEyeTrackingAutoHide(void *a1, const char *a2, ...)
{
  return _[a1 hideBubbleCursorForEyeTrackingAutoHide];
}

id objc_msgSend_hideBubbleNotification(void *a1, const char *a2, ...)
{
  return _[a1 hideBubbleNotification];
}

id objc_msgSend_hideCursor_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideCursor:animated:");
}

id objc_msgSend_hideFingerContentViewForEyeTrackingAutoHide(void *a1, const char *a2, ...)
{
  return _[a1 hideFingerContentViewForEyeTrackingAutoHide];
}

id objc_msgSend_hideIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideIfNeeded:");
}

id objc_msgSend_hidePointerForEyeTrackingAutoHide(void *a1, const char *a2, ...)
{
  return _[a1 hidePointerForEyeTrackingAutoHide];
}

id objc_msgSend_hideSystemPointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideSystemPointer:");
}

id objc_msgSend_hideUIContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideUIContext:");
}

id objc_msgSend_hideUIForEyeTracker(void *a1, const char *a2, ...)
{
  return _[a1 hideUIForEyeTracker];
}

id objc_msgSend_hideWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideWithCompletion:");
}

id objc_msgSend_highVisBackgroundAndIconImage(void *a1, const char *a2, ...)
{
  return _[a1 highVisBackgroundAndIconImage];
}

id objc_msgSend_highestAncestorGroup(void *a1, const char *a2, ...)
{
  return _[a1 highestAncestorGroup];
}

id objc_msgSend_highlightNubbit(void *a1, const char *a2, ...)
{
  return _[a1 highlightNubbit];
}

id objc_msgSend_highlightSearchResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "highlightSearchResult:");
}

id objc_msgSend_highlightTrackpad(void *a1, const char *a2, ...)
{
  return _[a1 highlightTrackpad];
}

id objc_msgSend_highlighted(void *a1, const char *a2, ...)
{
  return _[a1 highlighted];
}

id objc_msgSend_highlightedTextColor(void *a1, const char *a2, ...)
{
  return _[a1 highlightedTextColor];
}

id objc_msgSend_hint(void *a1, const char *a2, ...)
{
  return _[a1 hint];
}

id objc_msgSend_historyOfPoints(void *a1, const char *a2, ...)
{
  return _[a1 historyOfPoints];
}

id objc_msgSend_historyOfTimestamps(void *a1, const char *a2, ...)
{
  return _[a1 historyOfTimestamps];
}

id objc_msgSend_hitTestCategoryAssertion(void *a1, const char *a2, ...)
{
  return _[a1 hitTestCategoryAssertion];
}

id objc_msgSend_hitTestsViewAtSystemPointerPoint(void *a1, const char *a2, ...)
{
  return _[a1 hitTestsViewAtSystemPointerPoint];
}

id objc_msgSend_hndAbsoluteCentroidForMultifingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hndAbsoluteCentroidForMultifingers:");
}

id objc_msgSend_hndCentroidForPinchChainMidPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hndCentroidForPinchChainMidPoint:");
}

id objc_msgSend_hndConvertPointToFingerContainerView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hndConvertPointToFingerContainerView:");
}

id objc_msgSend_hndMenuPointForFingerLayout(void *a1, const char *a2, ...)
{
  return _[a1 hndMenuPointForFingerLayout];
}

id objc_msgSend_hndStandardCentroidForMultifingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hndStandardCentroidForMultifingers:");
}

id objc_msgSend_holdDuration(void *a1, const char *a2, ...)
{
  return _[a1 holdDuration];
}

id objc_msgSend_holdPoint(void *a1, const char *a2, ...)
{
  return _[a1 holdPoint];
}

id objc_msgSend_horizontalContinuousScrollers(void *a1, const char *a2, ...)
{
  return _[a1 horizontalContinuousScrollers];
}

id objc_msgSend_horizontalScroller(void *a1, const char *a2, ...)
{
  return _[a1 horizontalScroller];
}

id objc_msgSend_hoverMovedToNormalizedPoint_shouldUpdateCurrentPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hoverMovedToNormalizedPoint:shouldUpdateCurrentPoint:");
}

id objc_msgSend_hoveredTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hoveredTo:");
}

id objc_msgSend_hoveredToRockerButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hoveredToRockerButton:");
}

id objc_msgSend_hudView(void *a1, const char *a2, ...)
{
  return _[a1 hudView];
}

id objc_msgSend_iconContainerView(void *a1, const char *a2, ...)
{
  return _[a1 iconContainerView];
}

id objc_msgSend_iconEffect(void *a1, const char *a2, ...)
{
  return _[a1 iconEffect];
}

id objc_msgSend_iconImage(void *a1, const char *a2, ...)
{
  return _[a1 iconImage];
}

id objc_msgSend_iconImageAngle(void *a1, const char *a2, ...)
{
  return _[a1 iconImageAngle];
}

id objc_msgSend_iconImageView(void *a1, const char *a2, ...)
{
  return _[a1 iconImageView];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_idleTimer(void *a1, const char *a2, ...)
{
  return _[a1 idleTimer];
}

id objc_msgSend_ignoreLogging(void *a1, const char *a2, ...)
{
  return _[a1 ignoreLogging];
}

id objc_msgSend_ignoreRepeatDuration(void *a1, const char *a2, ...)
{
  return _[a1 ignoreRepeatDuration];
}

id objc_msgSend_ignoredTouchRegions(void *a1, const char *a2, ...)
{
  return _[a1 ignoredTouchRegions];
}

id objc_msgSend_ignoredWindow(void *a1, const char *a2, ...)
{
  return _[a1 ignoredWindow];
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _[a1 image];
}

id objc_msgSend_imageByApplyingSymbolConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageByApplyingSymbolConfiguration:");
}

id objc_msgSend_imageByPreparingThumbnailOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageByPreparingThumbnailOfSize:");
}

id objc_msgSend_imageMaximumContentSizeCategory(void *a1, const char *a2, ...)
{
  return _[a1 imageMaximumContentSizeCategory];
}

id objc_msgSend_imageMinimumContentSizeCategory(void *a1, const char *a2, ...)
{
  return _[a1 imageMinimumContentSizeCategory];
}

id objc_msgSend_imageName(void *a1, const char *a2, ...)
{
  return _[a1 imageName];
}

id objc_msgSend_imageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:");
}

id objc_msgSend_imagePrefixForTouchDependentGlyph(void *a1, const char *a2, ...)
{
  return _[a1 imagePrefixForTouchDependentGlyph];
}

id objc_msgSend_imageSize(void *a1, const char *a2, ...)
{
  return _[a1 imageSize];
}

id objc_msgSend_imageView(void *a1, const char *a2, ...)
{
  return _[a1 imageView];
}

id objc_msgSend_imageWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithConfiguration:");
}

id objc_msgSend_imageWithData_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithData:scale:");
}

id objc_msgSend_imageWithHorizontallyFlippedOrientation(void *a1, const char *a2, ...)
{
  return _[a1 imageWithHorizontallyFlippedOrientation];
}

id objc_msgSend_imageWithRenderingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithRenderingMode:");
}

id objc_msgSend_imageWithTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithTintColor:");
}

id objc_msgSend_imageWithTintColor_renderingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithTintColor:renderingMode:");
}

id objc_msgSend_immediateSelectActionCount(void *a1, const char *a2, ...)
{
  return _[a1 immediateSelectActionCount];
}

id objc_msgSend_importance(void *a1, const char *a2, ...)
{
  return _[a1 importance];
}

id objc_msgSend_inBubbleMode(void *a1, const char *a2, ...)
{
  return _[a1 inBubbleMode];
}

id objc_msgSend_inContinuousScrollMode(void *a1, const char *a2, ...)
{
  return _[a1 inContinuousScrollMode];
}

id objc_msgSend_inCustomGesture(void *a1, const char *a2, ...)
{
  return _[a1 inCustomGesture];
}

id objc_msgSend_inDragMode(void *a1, const char *a2, ...)
{
  return _[a1 inDragMode];
}

id objc_msgSend_inNubbitMode(void *a1, const char *a2, ...)
{
  return _[a1 inNubbitMode];
}

id objc_msgSend_inPinchMode(void *a1, const char *a2, ...)
{
  return _[a1 inPinchMode];
}

id objc_msgSend_inactiveAlpha(void *a1, const char *a2, ...)
{
  return _[a1 inactiveAlpha];
}

id objc_msgSend_increaseAutoscrollSpeed(void *a1, const char *a2, ...)
{
  return _[a1 increaseAutoscrollSpeed];
}

id objc_msgSend_increaseCurveControl(void *a1, const char *a2, ...)
{
  return _[a1 increaseCurveControl];
}

id objc_msgSend_increaseVelocityForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "increaseVelocityForFreehandSheet:");
}

id objc_msgSend_increaseVolume(void *a1, const char *a2, ...)
{
  return _[a1 increaseVolume];
}

id objc_msgSend_indexAtPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexAtPosition:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexPathByAddingIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathByAddingIndex:");
}

id objc_msgSend_indexPathByRemovingLastIndex(void *a1, const char *a2, ...)
{
  return _[a1 indexPathByRemovingLastIndex];
}

id objc_msgSend_indexPathWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathWithIndex:");
}

id objc_msgSend_indexPathWithIndexes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathWithIndexes:length:");
}

id objc_msgSend_indexPathsForVisibleItems(void *a1, const char *a2, ...)
{
  return _[a1 indexPathsForVisibleItems];
}

id objc_msgSend_indexesOfObjectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexesOfObjectsPassingTest:");
}

id objc_msgSend_informDelegatesOfEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informDelegatesOfEvent:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:isDirectory:");
}

id objc_msgSend_initForLeftToRightSwipe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForLeftToRightSwipe:");
}

id objc_msgSend_initSettings(void *a1, const char *a2, ...)
{
  return _[a1 initSettings];
}

id objc_msgSend_initWithAction_timeoutDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAction:timeoutDuration:");
}

id objc_msgSend_initWithActivityIndicatorStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivityIndicatorStyle:");
}

id objc_msgSend_initWithAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAxis:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCollectionViewLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCollectionViewLayout:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithContainingView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainingView:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDelegate_fetchEvents_enableEventManagement_enableGrouping_shouldIncludeNonScannerElements_beginEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:fetchEvents:enableEventManagement:enableGrouping:shouldIncludeNonScannerElements:beginEnabled:");
}

id objc_msgSend_initWithDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDevice:");
}

id objc_msgSend_initWithDisplayManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDisplayManager:");
}

id objc_msgSend_initWithDisplaySource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDisplaySource:");
}

id objc_msgSend_initWithDisplayUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDisplayUUID:");
}

id objc_msgSend_initWithDomain_authenticationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:authenticationContext:");
}

id objc_msgSend_initWithEffect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEffect:");
}

id objc_msgSend_initWithElement_elementManager_selectBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElement:elementManager:selectBehavior:");
}

id objc_msgSend_initWithElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElementManager:");
}

id objc_msgSend_initWithElementManager_menu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElementManager:menu:");
}

id objc_msgSend_initWithElementManager_startingFingerPositions_menu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElementManager:startingFingerPositions:menu:");
}

id objc_msgSend_initWithElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElements:");
}

id objc_msgSend_initWithElements_label_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElements:label:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithFrame_appearanceDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:appearanceDelegate:");
}

id objc_msgSend_initWithFrame_privateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:privateStyle:");
}

id objc_msgSend_initWithFrame_trackpadView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:trackpadView:");
}

id objc_msgSend_initWithHIDTapIdentifier_HIDEventTapPriority_systemEventTapIdentifier_systemEventTapPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHIDTapIdentifier:HIDEventTapPriority:systemEventTapIdentifier:systemEventTapPriority:");
}

id objc_msgSend_initWithHUDItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHUDItem:");
}

id objc_msgSend_initWithIdentifier_bundleID_context_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:bundleID:context:userInfo:");
}

id objc_msgSend_initWithIdentifier_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:delegate:");
}

id objc_msgSend_initWithIdentifier_delegate_searchResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:delegate:searchResult:");
}

id objc_msgSend_initWithIdentifier_delegate_title_imageName_activateBehavior_allowedWithGuidedAccess_allowedWithAssistiveAccess_activateHandler_updateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:delegate:title:imageName:activateBehavior:allowedWithGuidedAccess:allowedWithAssistiveAccess:activateHandler:updateHandler:");
}

id objc_msgSend_initWithIdentifier_eventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:eventHandler:");
}

id objc_msgSend_initWithIdentifier_serviceBundleName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:serviceBundleName:");
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:");
}

id objc_msgSend_initWithImageName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImageName:");
}

id objc_msgSend_initWithInterDeviceCommunicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInterDeviceCommunicator:");
}

id objc_msgSend_initWithKey_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:payload:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMatchingDictionary_callbackRunLoop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMatchingDictionary:callbackRunLoop:");
}

id objc_msgSend_initWithMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMenu:");
}

id objc_msgSend_initWithMenu_interDeviceCommunicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMenu:interDeviceCommunicator:");
}

id objc_msgSend_initWithMenu_interDeviceSearchResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMenu:interDeviceSearchResult:");
}

id objc_msgSend_initWithMenu_menuItemDictionaryArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMenu:menuItemDictionaryArray:");
}

id objc_msgSend_initWithMenuItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMenuItem:");
}

id objc_msgSend_initWithMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMode:");
}

id objc_msgSend_initWithNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNotifications:");
}

id objc_msgSend_initWithOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOrientation:");
}

id objc_msgSend_initWithParentClass_description_appendUUIDToLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParentClass:description:appendUUIDToLabel:");
}

id objc_msgSend_initWithPoint_contextID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPoint:contextID:");
}

id objc_msgSend_initWithPrivateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrivateStyle:");
}

id objc_msgSend_initWithSelectionPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSelectionPath:");
}

id objc_msgSend_initWithSelectionPath_generatorDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSelectionPath:generatorDelegate:");
}

id objc_msgSend_initWithServiceName_perPidService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:perPidService:");
}

id objc_msgSend_initWithSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSheet:");
}

id objc_msgSend_initWithStartingFingerPositions_menu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartingFingerPositions:menu:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithSwitchIdentifier_switchDisplayName_deviceIdentifier_actions_longPressActions_isDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSwitchIdentifier:switchDisplayName:deviceIdentifier:actions:longPressActions:isDown:");
}

id objc_msgSend_initWithSystemColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSystemColor:");
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:action:");
}

id objc_msgSend_initWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:object:");
}

id objc_msgSend_initWithTargetElement_scrollView_orientedScrollViewFrame_scrollAxis_supportedScrollDirections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetElement:scrollView:orientedScrollViewFrame:scrollAxis:supportedScrollDirections:");
}

id objc_msgSend_initWithTargetSerialQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetSerialQueue:");
}

id objc_msgSend_initWithTitle_element_activationToken_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:element:activationToken:delegate:");
}

id objc_msgSend_initWithTitle_fixedSpaceScreenPoint_delegate_menu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:fixedSpaceScreenPoint:delegate:menu:");
}

id objc_msgSend_initWithTitle_image_imageInsets_scaleImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:image:imageInsets:scaleImage:");
}

id objc_msgSend_initWithTrackpad_trackpadBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrackpad:trackpadBorder:");
}

id objc_msgSend_initWithTriangle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTriangle:");
}

id objc_msgSend_initWithType_menu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:menu:");
}

id objc_msgSend_initWithUpButton_downButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUpButton:downButton:");
}

id objc_msgSend_initWithWindow_ignoredWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWindow:ignoredWindow:");
}

id objc_msgSend_initialDownMenuCanTransitionToPressDown(void *a1, const char *a2, ...)
{
  return _[a1 initialDownMenuCanTransitionToPressDown];
}

id objc_msgSend_initialItems(void *a1, const char *a2, ...)
{
  return _[a1 initialItems];
}

id objc_msgSend_initialMenuDownHasFinished(void *a1, const char *a2, ...)
{
  return _[a1 initialMenuDownHasFinished];
}

id objc_msgSend_initialRockerSize(void *a1, const char *a2, ...)
{
  return _[a1 initialRockerSize];
}

id objc_msgSend_initializeDisplay(void *a1, const char *a2, ...)
{
  return _[a1 initializeDisplay];
}

id objc_msgSend_initializeDisplayWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeDisplayWithCompletion:");
}

id objc_msgSend_initializeScreenBounds(void *a1, const char *a2, ...)
{
  return _[a1 initializeScreenBounds];
}

id objc_msgSend_initializeWindowsIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 initializeWindowsIfNecessary];
}

id objc_msgSend_initialized(void *a1, const char *a2, ...)
{
  return _[a1 initialized];
}

id objc_msgSend_innerCircleStrokeWidth(void *a1, const char *a2, ...)
{
  return _[a1 innerCircleStrokeWidth];
}

id objc_msgSend_inputController(void *a1, const char *a2, ...)
{
  return _[a1 inputController];
}

id objc_msgSend_inputController_didReceiveAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputController:didReceiveAction:");
}

id objc_msgSend_inputController_didReceivePoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputController:didReceivePoint:");
}

id objc_msgSend_inputController_didReceiveRecipeHoldAtPoint_isDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputController:didReceiveRecipeHoldAtPoint:isDown:");
}

id objc_msgSend_inputControllerPointPickerInterrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputControllerPointPickerInterrupted:");
}

id objc_msgSend_inputDeviceHandledAction(void *a1, const char *a2, ...)
{
  return _[a1 inputDeviceHandledAction];
}

id objc_msgSend_inputHoldDuration(void *a1, const char *a2, ...)
{
  return _[a1 inputHoldDuration];
}

id objc_msgSend_inputHoldEnabled(void *a1, const char *a2, ...)
{
  return _[a1 inputHoldEnabled];
}

id objc_msgSend_inputHoldTimer(void *a1, const char *a2, ...)
{
  return _[a1 inputHoldTimer];
}

id objc_msgSend_inputRepeatTimer(void *a1, const char *a2, ...)
{
  return _[a1 inputRepeatTimer];
}

id objc_msgSend_inputSettings(void *a1, const char *a2, ...)
{
  return _[a1 inputSettings];
}

id objc_msgSend_inputSource_forwardSwitchEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputSource:forwardSwitchEvent:");
}

id objc_msgSend_inputToUse(void *a1, const char *a2, ...)
{
  return _[a1 inputToUse];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertPointer_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertPointer:atIndex:");
}

id objc_msgSend_insertSublayer_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSublayer:atIndex:");
}

id objc_msgSend_insertSublayer_below_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSublayer:below:");
}

id objc_msgSend_insertSubview_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSubview:atIndex:");
}

id objc_msgSend_insertSubview_belowSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSubview:belowSubview:");
}

id objc_msgSend_installEventTap_identifier_type_skipDeviceMatching_filterEvents_matchingServiceHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installEventTap:identifier:type:skipDeviceMatching:filterEvents:matchingServiceHandler:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interDeviceCommunicator(void *a1, const char *a2, ...)
{
  return _[a1 interDeviceCommunicator];
}

id objc_msgSend_interDeviceCommunicatorForMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interDeviceCommunicatorForMenu:");
}

id objc_msgSend_interDeviceInputSource(void *a1, const char *a2, ...)
{
  return _[a1 interDeviceInputSource];
}

id objc_msgSend_intrinsicContentSize(void *a1, const char *a2, ...)
{
  return _[a1 intrinsicContentSize];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateIntrinsicContentSize(void *a1, const char *a2, ...)
{
  return _[a1 invalidateIntrinsicContentSize];
}

id objc_msgSend_invalidateMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 invalidateMenuItems];
}

id objc_msgSend_invalidateTimers(void *a1, const char *a2, ...)
{
  return _[a1 invalidateTimers];
}

id objc_msgSend_isATVRemoteInputSource(void *a1, const char *a2, ...)
{
  return _[a1 isATVRemoteInputSource];
}

id objc_msgSend_isAXAttributedString(void *a1, const char *a2, ...)
{
  return _[a1 isAXAttributedString];
}

id objc_msgSend_isAccessibilityElement(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibilityElement];
}

id objc_msgSend_isAccessibleElement(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibleElement];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isActiveScannerDriver(void *a1, const char *a2, ...)
{
  return _[a1 isActiveScannerDriver];
}

id objc_msgSend_isActivelyScrollingContinuously(void *a1, const char *a2, ...)
{
  return _[a1 isActivelyScrollingContinuously];
}

id objc_msgSend_isAnimatingForwards(void *a1, const char *a2, ...)
{
  return _[a1 isAnimatingForwards];
}

id objc_msgSend_isAnimatingNubbit(void *a1, const char *a2, ...)
{
  return _[a1 isAnimatingNubbit];
}

id objc_msgSend_isAutoLiftOnForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAutoLiftOnForFreehandSheet:");
}

id objc_msgSend_isAutoPressOnForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAutoPressOnForFreehandSheet:");
}

id objc_msgSend_isAutoscanEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAutoscanEnabled];
}

id objc_msgSend_isAutoscrolling(void *a1, const char *a2, ...)
{
  return _[a1 isAutoscrolling];
}

id objc_msgSend_isAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isAvailable];
}

id objc_msgSend_isBackButton(void *a1, const char *a2, ...)
{
  return _[a1 isBackButton];
}

id objc_msgSend_isBackItemIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackItemIdentifier:");
}

id objc_msgSend_isCameraIntrinsicMatrixDeliverySupported(void *a1, const char *a2, ...)
{
  return _[a1 isCameraIntrinsicMatrixDeliverySupported];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isCapturingEvents(void *a1, const char *a2, ...)
{
  return _[a1 isCapturingEvents];
}

id objc_msgSend_isClarityBoardEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isClarityBoardEnabled];
}

id objc_msgSend_isContinuitySessionActive(void *a1, const char *a2, ...)
{
  return _[a1 isContinuitySessionActive];
}

id objc_msgSend_isControlCenterVisible(void *a1, const char *a2, ...)
{
  return _[a1 isControlCenterVisible];
}

id objc_msgSend_isControllingOtherDevice(void *a1, const char *a2, ...)
{
  return _[a1 isControllingOtherDevice];
}

id objc_msgSend_isCurrentOrientationLandscape(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentOrientationLandscape];
}

id objc_msgSend_isCurrentlySelectingKeyboardKey(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentlySelectingKeyboardKey];
}

id objc_msgSend_isCurrentlyTappingAndHolding(void *a1, const char *a2, ...)
{
  return _[a1 isCurrentlyTappingAndHolding];
}

id objc_msgSend_isCursorUIHidden(void *a1, const char *a2, ...)
{
  return _[a1 isCursorUIHidden];
}

id objc_msgSend_isCurving(void *a1, const char *a2, ...)
{
  return _[a1 isCurving];
}

id objc_msgSend_isDark(void *a1, const char *a2, ...)
{
  return _[a1 isDark];
}

id objc_msgSend_isDescendantOfView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDescendantOfView:");
}

id objc_msgSend_isDirectionPadPressed(void *a1, const char *a2, ...)
{
  return _[a1 isDirectionPadPressed];
}

id objc_msgSend_isDisabled(void *a1, const char *a2, ...)
{
  return _[a1 isDisabled];
}

id objc_msgSend_isDisplayIntegrated(void *a1, const char *a2, ...)
{
  return _[a1 isDisplayIntegrated];
}

id objc_msgSend_isDisplayed(void *a1, const char *a2, ...)
{
  return _[a1 isDisplayed];
}

id objc_msgSend_isDockStyle(void *a1, const char *a2, ...)
{
  return _[a1 isDockStyle];
}

id objc_msgSend_isDockVisible(void *a1, const char *a2, ...)
{
  return _[a1 isDockVisible];
}

id objc_msgSend_isDown(void *a1, const char *a2, ...)
{
  return _[a1 isDown];
}

id objc_msgSend_isDownEvent(void *a1, const char *a2, ...)
{
  return _[a1 isDownEvent];
}

id objc_msgSend_isDragActive(void *a1, const char *a2, ...)
{
  return _[a1 isDragActive];
}

id objc_msgSend_isDwellActionPendingButtonUp(void *a1, const char *a2, ...)
{
  return _[a1 isDwellActionPendingButtonUp];
}

id objc_msgSend_isElementTopLevelInMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isElementTopLevelInMenu:");
}

id objc_msgSend_isEmptyFavorite(void *a1, const char *a2, ...)
{
  return _[a1 isEmptyFavorite];
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isEnabled];
}

id objc_msgSend_isEnabledSwitchWithSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabledSwitchWithSource:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExternalDisplayConnected(void *a1, const char *a2, ...)
{
  return _[a1 isExternalDisplayConnected];
}

id objc_msgSend_isEyeTrackingEvent(void *a1, const char *a2, ...)
{
  return _[a1 isEyeTrackingEvent];
}

id objc_msgSend_isFaceButtonPressed(void *a1, const char *a2, ...)
{
  return _[a1 isFaceButtonPressed];
}

id objc_msgSend_isFetchingElements(void *a1, const char *a2, ...)
{
  return _[a1 isFetchingElements];
}

id objc_msgSend_isFirstInSequence(void *a1, const char *a2, ...)
{
  return _[a1 isFirstInSequence];
}

id objc_msgSend_isFlashing(void *a1, const char *a2, ...)
{
  return _[a1 isFlashing];
}

id objc_msgSend_isForwardingSwitchEvents(void *a1, const char *a2, ...)
{
  return _[a1 isForwardingSwitchEvents];
}

id objc_msgSend_isFullMenuVisible(void *a1, const char *a2, ...)
{
  return _[a1 isFullMenuVisible];
}

id objc_msgSend_isGamepadEvent(void *a1, const char *a2, ...)
{
  return _[a1 isGamepadEvent];
}

id objc_msgSend_isGamepadInputSource(void *a1, const char *a2, ...)
{
  return _[a1 isGamepadInputSource];
}

id objc_msgSend_isGroup(void *a1, const char *a2, ...)
{
  return _[a1 isGroup];
}

id objc_msgSend_isGroupingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isGroupingEnabled];
}

id objc_msgSend_isGuidedAccessActive(void *a1, const char *a2, ...)
{
  return _[a1 isGuidedAccessActive];
}

id objc_msgSend_isHIDDevice(void *a1, const char *a2, ...)
{
  return _[a1 isHIDDevice];
}

id objc_msgSend_isHandUI(void *a1, const char *a2, ...)
{
  return _[a1 isHandUI];
}

id objc_msgSend_isHandlingInterDeviceCommunication(void *a1, const char *a2, ...)
{
  return _[a1 isHandlingInterDeviceCommunication];
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _[a1 isHidden];
}

id objc_msgSend_isHighlighted(void *a1, const char *a2, ...)
{
  return _[a1 isHighlighted];
}

id objc_msgSend_isIdle(void *a1, const char *a2, ...)
{
  return _[a1 isIdle];
}

id objc_msgSend_isIgnoringInputs(void *a1, const char *a2, ...)
{
  return _[a1 isIgnoringInputs];
}

id objc_msgSend_isInactive(void *a1, const char *a2, ...)
{
  return _[a1 isInactive];
}

id objc_msgSend_isInputCoalesceEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isInputCoalesceEnabled];
}

id objc_msgSend_isInputHoldEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isInputHoldEnabled];
}

id objc_msgSend_isInputRepeatEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isInputRepeatEnabled];
}

id objc_msgSend_isJoystickPressed(void *a1, const char *a2, ...)
{
  return _[a1 isJoystickPressed];
}

id objc_msgSend_isKeyboardContainer(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardContainer];
}

id objc_msgSend_isKeyboardInputSource(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardInputSource];
}

id objc_msgSend_isKeyboardKey(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardKey];
}

id objc_msgSend_isKeyboardTypeButtonPressed(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardTypeButtonPressed];
}

id objc_msgSend_isLandscape(void *a1, const char *a2, ...)
{
  return _[a1 isLandscape];
}

id objc_msgSend_isLeftHeadSwitchDown(void *a1, const char *a2, ...)
{
  return _[a1 isLeftHeadSwitchDown];
}

id objc_msgSend_isLoaded(void *a1, const char *a2, ...)
{
  return _[a1 isLoaded];
}

id objc_msgSend_isLockScreenVisible(void *a1, const char *a2, ...)
{
  return _[a1 isLockScreenVisible];
}

id objc_msgSend_isMFIInputSource(void *a1, const char *a2, ...)
{
  return _[a1 isMFIInputSource];
}

id objc_msgSend_isMIDIInputSource(void *a1, const char *a2, ...)
{
  return _[a1 isMIDIInputSource];
}

id objc_msgSend_isMainDisplay(void *a1, const char *a2, ...)
{
  return _[a1 isMainDisplay];
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _[a1 isMainThread];
}

id objc_msgSend_isMediaPlayingForApp_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMediaPlayingForApp:completionHandler:");
}

id objc_msgSend_isMenuElementManager(void *a1, const char *a2, ...)
{
  return _[a1 isMenuElementManager];
}

id objc_msgSend_isMenuOpeningElementEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isMenuOpeningElementEnabled];
}

id objc_msgSend_isMenuVisible(void *a1, const char *a2, ...)
{
  return _[a1 isMenuVisible];
}

id objc_msgSend_isModalDown(void *a1, const char *a2, ...)
{
  return _[a1 isModalDown];
}

id objc_msgSend_isNotificationCenterVisible(void *a1, const char *a2, ...)
{
  return _[a1 isNotificationCenterVisible];
}

id objc_msgSend_isOKToSpeak(void *a1, const char *a2, ...)
{
  return _[a1 isOKToSpeak];
}

id objc_msgSend_isOnDeviceEyeTrackingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isOnDeviceEyeTrackingEnabled];
}

id objc_msgSend_isOrientationLocked(void *a1, const char *a2, ...)
{
  return _[a1 isOrientationLocked];
}

id objc_msgSend_isPaused(void *a1, const char *a2, ...)
{
  return _[a1 isPaused];
}

id objc_msgSend_isPausingScanning(void *a1, const char *a2, ...)
{
  return _[a1 isPausingScanning];
}

id objc_msgSend_isPending(void *a1, const char *a2, ...)
{
  return _[a1 isPending];
}

id objc_msgSend_isPendingFingerLiftForPrimaryButtonPressUp(void *a1, const char *a2, ...)
{
  return _[a1 isPendingFingerLiftForPrimaryButtonPressUp];
}

id objc_msgSend_isPerformingGesture(void *a1, const char *a2, ...)
{
  return _[a1 isPerformingGesture];
}

id objc_msgSend_isPinchEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isPinchEnabled];
}

id objc_msgSend_isPinching(void *a1, const char *a2, ...)
{
  return _[a1 isPinching];
}

id objc_msgSend_isPointerMove(void *a1, const char *a2, ...)
{
  return _[a1 isPointerMove];
}

id objc_msgSend_isPopoverStyle(void *a1, const char *a2, ...)
{
  return _[a1 isPopoverStyle];
}

id objc_msgSend_isPoppingToPreviousViewController(void *a1, const char *a2, ...)
{
  return _[a1 isPoppingToPreviousViewController];
}

id objc_msgSend_isPressed(void *a1, const char *a2, ...)
{
  return _[a1 isPressed];
}

id objc_msgSend_isPurpleBuddyAppFrontmost(void *a1, const char *a2, ...)
{
  return _[a1 isPurpleBuddyAppFrontmost];
}

id objc_msgSend_isPushingConfirmationSheet(void *a1, const char *a2, ...)
{
  return _[a1 isPushingConfirmationSheet];
}

id objc_msgSend_isReadyForSelect(void *a1, const char *a2, ...)
{
  return _[a1 isReadyForSelect];
}

id objc_msgSend_isReceivingSwitchEvents(void *a1, const char *a2, ...)
{
  return _[a1 isReceivingSwitchEvents];
}

id objc_msgSend_isRefiningPoint(void *a1, const char *a2, ...)
{
  return _[a1 isRefiningPoint];
}

id objc_msgSend_isRemovedOnCompletion(void *a1, const char *a2, ...)
{
  return _[a1 isRemovedOnCompletion];
}

id objc_msgSend_isRightHeadSwitchDown(void *a1, const char *a2, ...)
{
  return _[a1 isRightHeadSwitchDown];
}

id objc_msgSend_isRootGroup(void *a1, const char *a2, ...)
{
  return _[a1 isRootGroup];
}

id objc_msgSend_isRotating(void *a1, const char *a2, ...)
{
  return _[a1 isRotating];
}

id objc_msgSend_isRunning(void *a1, const char *a2, ...)
{
  return _[a1 isRunning];
}

id objc_msgSend_isScannerActive(void *a1, const char *a2, ...)
{
  return _[a1 isScannerActive];
}

id objc_msgSend_isScannerPaused(void *a1, const char *a2, ...)
{
  return _[a1 isScannerPaused];
}

id objc_msgSend_isScreenLockedWithPasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isScreenLockedWithPasscode:");
}

id objc_msgSend_isSearching(void *a1, const char *a2, ...)
{
  return _[a1 isSearching];
}

id objc_msgSend_isShoulderButtonPressed(void *a1, const char *a2, ...)
{
  return _[a1 isShoulderButtonPressed];
}

id objc_msgSend_isShowingCalibrationUI(void *a1, const char *a2, ...)
{
  return _[a1 isShowingCalibrationUI];
}

id objc_msgSend_isShowingFooterView(void *a1, const char *a2, ...)
{
  return _[a1 isShowingFooterView];
}

id objc_msgSend_isShowingHomescreen(void *a1, const char *a2, ...)
{
  return _[a1 isShowingHomescreen];
}

id objc_msgSend_isShowingLongLookNotification(void *a1, const char *a2, ...)
{
  return _[a1 isShowingLongLookNotification];
}

id objc_msgSend_isShowingNonSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 isShowingNonSystemApp];
}

id objc_msgSend_isShowingVirtualTrackpad(void *a1, const char *a2, ...)
{
  return _[a1 isShowingVirtualTrackpad];
}

id objc_msgSend_isSideSwitchUsedForOrientation(void *a1, const char *a2, ...)
{
  return _[a1 isSideSwitchUsedForOrientation];
}

id objc_msgSend_isSimpleElementForBubbleMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSimpleElementForBubbleMode:");
}

id objc_msgSend_isSiriVisible(void *a1, const char *a2, ...)
{
  return _[a1 isSiriVisible];
}

id objc_msgSend_isSpeakThisTemporarilyDisabled(void *a1, const char *a2, ...)
{
  return _[a1 isSpeakThisTemporarilyDisabled];
}

id objc_msgSend_isSpeakingFocusContext(void *a1, const char *a2, ...)
{
  return _[a1 isSpeakingFocusContext];
}

id objc_msgSend_isSpeechEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSpeechEnabled];
}

id objc_msgSend_isSpotlightVisible(void *a1, const char *a2, ...)
{
  return _[a1 isSpotlightVisible];
}

id objc_msgSend_isSupported(void *a1, const char *a2, ...)
{
  return _[a1 isSupported];
}

id objc_msgSend_isSwitchWithSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSwitchWithSource:");
}

id objc_msgSend_isSymbolImage(void *a1, const char *a2, ...)
{
  return _[a1 isSymbolImage];
}

id objc_msgSend_isSystemDrag(void *a1, const char *a2, ...)
{
  return _[a1 isSystemDrag];
}

id objc_msgSend_isSystemSleeping(void *a1, const char *a2, ...)
{
  return _[a1 isSystemSleeping];
}

id objc_msgSend_isTopLevel(void *a1, const char *a2, ...)
{
  return _[a1 isTopLevel];
}

id objc_msgSend_isTouchOnForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTouchOnForFreehandSheet:");
}

id objc_msgSend_isTracking(void *a1, const char *a2, ...)
{
  return _[a1 isTracking];
}

id objc_msgSend_isTrackingInputActive(void *a1, const char *a2, ...)
{
  return _[a1 isTrackingInputActive];
}

id objc_msgSend_isTransitioning(void *a1, const char *a2, ...)
{
  return _[a1 isTransitioning];
}

id objc_msgSend_isTransitioningToOrFromActive(void *a1, const char *a2, ...)
{
  return _[a1 isTransitioningToOrFromActive];
}

id objc_msgSend_isUIContextHidden(void *a1, const char *a2, ...)
{
  return _[a1 isUIContextHidden];
}

id objc_msgSend_isUserInteractionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isUserInteractionEnabled];
}

id objc_msgSend_isUsingPointMode(void *a1, const char *a2, ...)
{
  return _[a1 isUsingPointMode];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isValidForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidForElement:");
}

id objc_msgSend_isViewControllerLoaded(void *a1, const char *a2, ...)
{
  return _[a1 isViewControllerLoaded];
}

id objc_msgSend_isViewLoaded(void *a1, const char *a2, ...)
{
  return _[a1 isViewLoaded];
}

id objc_msgSend_isViewZoomed(void *a1, const char *a2, ...)
{
  return _[a1 isViewZoomed];
}

id objc_msgSend_isVirtualTrackpadEvent(void *a1, const char *a2, ...)
{
  return _[a1 isVirtualTrackpadEvent];
}

id objc_msgSend_isVisibilityTiedToFocus(void *a1, const char *a2, ...)
{
  return _[a1 isVisibilityTiedToFocus];
}

id objc_msgSend_isVisible(void *a1, const char *a2, ...)
{
  return _[a1 isVisible];
}

id objc_msgSend_isVoiceControlRunning(void *a1, const char *a2, ...)
{
  return _[a1 isVoiceControlRunning];
}

id objc_msgSend_isWaitingToBePresented(void *a1, const char *a2, ...)
{
  return _[a1 isWaitingToBePresented];
}

id objc_msgSend_item(void *a1, const char *a2, ...)
{
  return _[a1 item];
}

id objc_msgSend_itemDetailsForItem_menu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemDetailsForItem:menu:");
}

id objc_msgSend_itemMenuState(void *a1, const char *a2, ...)
{
  return _[a1 itemMenuState];
}

id objc_msgSend_itemMenuStateForMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemMenuStateForMenu:");
}

id objc_msgSend_itemSize(void *a1, const char *a2, ...)
{
  return _[a1 itemSize];
}

id objc_msgSend_itemSpacingLandscape(void *a1, const char *a2, ...)
{
  return _[a1 itemSpacingLandscape];
}

id objc_msgSend_itemSpacingPortrait(void *a1, const char *a2, ...)
{
  return _[a1 itemSpacingPortrait];
}

id objc_msgSend_itemWithIdentifier_delegate_title_activateBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithIdentifier:delegate:title:activateBehavior:");
}

id objc_msgSend_itemWithIdentifier_delegate_title_imageName_activateBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithIdentifier:delegate:title:imageName:activateBehavior:");
}

id objc_msgSend_itemWithIdentifier_delegate_title_imageName_activateBehavior_activateHandler_updateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithIdentifier:delegate:title:imageName:activateBehavior:activateHandler:updateHandler:");
}

id objc_msgSend_itemWithIdentifier_delegate_title_imageName_activateBehavior_allowedWithGuidedAccess_allowedWithAssistiveAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithIdentifier:delegate:title:imageName:activateBehavior:allowedWithGuidedAccess:allowedWithAssistiveAccess:");
}

id objc_msgSend_itemWithIdentifier_delegate_title_imageName_activateBehavior_allowedWithGuidedAccess_allowedWithAssistiveAccess_activateHandler_updateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithIdentifier:delegate:title:imageName:activateBehavior:allowedWithGuidedAccess:allowedWithAssistiveAccess:activateHandler:updateHandler:");
}

id objc_msgSend_itemWithIdentifier_delegate_title_imagePrefixForTouchDependentGlyph_shouldRotate_activateBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemWithIdentifier:delegate:title:imagePrefixForTouchDependentGlyph:shouldRotate:activateBehavior:");
}

id objc_msgSend_keyCode(void *a1, const char *a2, ...)
{
  return _[a1 keyCode];
}

id objc_msgSend_keyDown(void *a1, const char *a2, ...)
{
  return _[a1 keyDown];
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_keyInfo(void *a1, const char *a2, ...)
{
  return _[a1 keyInfo];
}

id objc_msgSend_keyRepeatTimerIsRunning(void *a1, const char *a2, ...)
{
  return _[a1 keyRepeatTimerIsRunning];
}

id objc_msgSend_keyboardApplication(void *a1, const char *a2, ...)
{
  return _[a1 keyboardApplication];
}

id objc_msgSend_keyboardContainer(void *a1, const char *a2, ...)
{
  return _[a1 keyboardContainer];
}

id objc_msgSend_keyboardGroup(void *a1, const char *a2, ...)
{
  return _[a1 keyboardGroup];
}

id objc_msgSend_keyboardIndexPath(void *a1, const char *a2, ...)
{
  return _[a1 keyboardIndexPath];
}

id objc_msgSend_keyboardInputSource(void *a1, const char *a2, ...)
{
  return _[a1 keyboardInputSource];
}

id objc_msgSend_keyboardKeyCenterPoint(void *a1, const char *a2, ...)
{
  return _[a1 keyboardKeyCenterPoint];
}

id objc_msgSend_keyboardRowContainingKeyboardKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardRowContainingKeyboardKey:");
}

id objc_msgSend_keyboardSelectBehavior(void *a1, const char *a2, ...)
{
  return _[a1 keyboardSelectBehavior];
}

id objc_msgSend_keyboardVisible_withFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardVisible:withFrame:");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _[a1 label];
}

id objc_msgSend_labelFont(void *a1, const char *a2, ...)
{
  return _[a1 labelFont];
}

id objc_msgSend_labelMaximumContentSizeCategory(void *a1, const char *a2, ...)
{
  return _[a1 labelMaximumContentSizeCategory];
}

id objc_msgSend_language(void *a1, const char *a2, ...)
{
  return _[a1 language];
}

id objc_msgSend_laserEnabled(void *a1, const char *a2, ...)
{
  return _[a1 laserEnabled];
}

id objc_msgSend_lastAppTransitionTime(void *a1, const char *a2, ...)
{
  return _[a1 lastAppTransitionTime];
}

id objc_msgSend_lastAuxiliaryElementWithRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastAuxiliaryElementWithRole:");
}

id objc_msgSend_lastBubbleModeDwellElement(void *a1, const char *a2, ...)
{
  return _[a1 lastBubbleModeDwellElement];
}

id objc_msgSend_lastBubbleModeDwellRockerItem(void *a1, const char *a2, ...)
{
  return _[a1 lastBubbleModeDwellRockerItem];
}

id objc_msgSend_lastBubbleModeDwellWasOnNubbit(void *a1, const char *a2, ...)
{
  return _[a1 lastBubbleModeDwellWasOnNubbit];
}

id objc_msgSend_lastBubbleModeFocusedElement(void *a1, const char *a2, ...)
{
  return _[a1 lastBubbleModeFocusedElement];
}

id objc_msgSend_lastChild(void *a1, const char *a2, ...)
{
  return _[a1 lastChild];
}

id objc_msgSend_lastDwellStartPoint(void *a1, const char *a2, ...)
{
  return _[a1 lastDwellStartPoint];
}

id objc_msgSend_lastElement(void *a1, const char *a2, ...)
{
  return _[a1 lastElement];
}

id objc_msgSend_lastElementWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastElementWithOptions:");
}

id objc_msgSend_lastItemForScanningWithElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastItemForScanningWithElementCommunity:");
}

id objc_msgSend_lastKeyboardElement(void *a1, const char *a2, ...)
{
  return _[a1 lastKeyboardElement];
}

id objc_msgSend_lastMenuInteractionTime(void *a1, const char *a2, ...)
{
  return _[a1 lastMenuInteractionTime];
}

id objc_msgSend_lastMoveWasMouse(void *a1, const char *a2, ...)
{
  return _[a1 lastMoveWasMouse];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastReceivedPoint(void *a1, const char *a2, ...)
{
  return _[a1 lastReceivedPoint];
}

id objc_msgSend_lastScannedElementCommunity(void *a1, const char *a2, ...)
{
  return _[a1 lastScannedElementCommunity];
}

id objc_msgSend_lastScannerElement(void *a1, const char *a2, ...)
{
  return _[a1 lastScannerElement];
}

id objc_msgSend_lastScannerGroupable(void *a1, const char *a2, ...)
{
  return _[a1 lastScannerGroupable];
}

id objc_msgSend_lastSetOptions(void *a1, const char *a2, ...)
{
  return _[a1 lastSetOptions];
}

id objc_msgSend_lastTimeElementFetcherRefreshed(void *a1, const char *a2, ...)
{
  return _[a1 lastTimeElementFetcherRefreshed];
}

id objc_msgSend_lastTimeEyeTrackerConfigured(void *a1, const char *a2, ...)
{
  return _[a1 lastTimeEyeTrackerConfigured];
}

id objc_msgSend_lastTimeHitTestedForBubbleMode(void *a1, const char *a2, ...)
{
  return _[a1 lastTimeHitTestedForBubbleMode];
}

id objc_msgSend_lastTimeMouseMoved(void *a1, const char *a2, ...)
{
  return _[a1 lastTimeMouseMoved];
}

id objc_msgSend_lastWrapDirection(void *a1, const char *a2, ...)
{
  return _[a1 lastWrapDirection];
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _[a1 layer];
}

id objc_msgSend_layerWithSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layerWithSession:");
}

id objc_msgSend_layoutDelegate(void *a1, const char *a2, ...)
{
  return _[a1 layoutDelegate];
}

id objc_msgSend_layoutIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 layoutIfNeeded];
}

id objc_msgSend_layoutItemsByLocation_hasBackButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutItemsByLocation:hasBackButton:");
}

id objc_msgSend_layoutItemsByLocation_positions_rows_columns_clockwiseOctagonalLocations_horizontallyCenteredLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutItemsByLocation:positions:rows:columns:clockwiseOctagonalLocations:horizontallyCenteredLocation:");
}

id objc_msgSend_layoutViewSideLengthScaledFromDefaultLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutViewSideLengthScaledFromDefaultLength:");
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _[a1 leadingAnchor];
}

id objc_msgSend_leftAnchor(void *a1, const char *a2, ...)
{
  return _[a1 leftAnchor];
}

id objc_msgSend_leftMostLeafAXElement(void *a1, const char *a2, ...)
{
  return _[a1 leftMostLeafAXElement];
}

id objc_msgSend_leftThumbstick(void *a1, const char *a2, ...)
{
  return _[a1 leftThumbstick];
}

id objc_msgSend_legacyLiftFingersUp(void *a1, const char *a2, ...)
{
  return _[a1 legacyLiftFingersUp];
}

id objc_msgSend_legacyPressFingersDown(void *a1, const char *a2, ...)
{
  return _[a1 legacyPressFingersDown];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_level(void *a1, const char *a2, ...)
{
  return _[a1 level];
}

id objc_msgSend_liftFingersUpAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "liftFingersUpAnimated:");
}

id objc_msgSend_liftHomeButtonUp(void *a1, const char *a2, ...)
{
  return _[a1 liftHomeButtonUp];
}

id objc_msgSend_liftLockButtonUp(void *a1, const char *a2, ...)
{
  return _[a1 liftLockButtonUp];
}

id objc_msgSend_liftVolumeDownButtonUp(void *a1, const char *a2, ...)
{
  return _[a1 liftVolumeDownButtonUp];
}

id objc_msgSend_liftVolumeUpButtonUp(void *a1, const char *a2, ...)
{
  return _[a1 liftVolumeUpButtonUp];
}

id objc_msgSend_liftsOnMoveEnd(void *a1, const char *a2, ...)
{
  return _[a1 liftsOnMoveEnd];
}

id objc_msgSend_lightPressCameraButton(void *a1, const char *a2, ...)
{
  return _[a1 lightPressCameraButton];
}

id objc_msgSend_lineColor(void *a1, const char *a2, ...)
{
  return _[a1 lineColor];
}

id objc_msgSend_lineGestureBetweenPoints_duration_numberOfFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineGestureBetweenPoints:duration:numberOfFingers:");
}

id objc_msgSend_lineGestureBetweenPoints_duration_numberOfFingers_initialHoldDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineGestureBetweenPoints:duration:numberOfFingers:initialHoldDuration:");
}

id objc_msgSend_lineGestureState(void *a1, const char *a2, ...)
{
  return _[a1 lineGestureState];
}

id objc_msgSend_lineGestureType(void *a1, const char *a2, ...)
{
  return _[a1 lineGestureType];
}

id objc_msgSend_lineLayer(void *a1, const char *a2, ...)
{
  return _[a1 lineLayer];
}

id objc_msgSend_lineLayerMaxWidth(void *a1, const char *a2, ...)
{
  return _[a1 lineLayerMaxWidth];
}

id objc_msgSend_lineThickness(void *a1, const char *a2, ...)
{
  return _[a1 lineThickness];
}

id objc_msgSend_load(void *a1, const char *a2, ...)
{
  return _[a1 load];
}

id objc_msgSend_loadScanner(void *a1, const char *a2, ...)
{
  return _[a1 loadScanner];
}

id objc_msgSend_localizedCapitalizedString(void *a1, const char *a2, ...)
{
  return _[a1 localizedCapitalizedString];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedDescriptionForAvailabilityDetail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescriptionForAvailabilityDetail:");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _[a1 location];
}

id objc_msgSend_locationInView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationInView:");
}

id objc_msgSend_lockedToDisplayID(void *a1, const char *a2, ...)
{
  return _[a1 lockedToDisplayID];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longPress(void *a1, const char *a2, ...)
{
  return _[a1 longPress];
}

id objc_msgSend_longPressAction(void *a1, const char *a2, ...)
{
  return _[a1 longPressAction];
}

id objc_msgSend_longPressActionIdentifiersToRecipeMappingIndices(void *a1, const char *a2, ...)
{
  return _[a1 longPressActionIdentifiersToRecipeMappingIndices];
}

id objc_msgSend_longPressActions(void *a1, const char *a2, ...)
{
  return _[a1 longPressActions];
}

id objc_msgSend_longPressDuration(void *a1, const char *a2, ...)
{
  return _[a1 longPressDuration];
}

id objc_msgSend_longPressEnabled(void *a1, const char *a2, ...)
{
  return _[a1 longPressEnabled];
}

id objc_msgSend_longPressGesture(void *a1, const char *a2, ...)
{
  return _[a1 longPressGesture];
}

id objc_msgSend_longPressGestureAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longPressGestureAtPoint:");
}

id objc_msgSend_longPressShortcutIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 longPressShortcutIdentifier];
}

id objc_msgSend_longPressTimer(void *a1, const char *a2, ...)
{
  return _[a1 longPressTimer];
}

id objc_msgSend_lookAtPoint(void *a1, const char *a2, ...)
{
  return _[a1 lookAtPoint];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_magentaColor(void *a1, const char *a2, ...)
{
  return _[a1 magentaColor];
}

id objc_msgSend_mainAccessQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainAccessQueue];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainDeviceIsMotionTracker(void *a1, const char *a2, ...)
{
  return _[a1 mainDeviceIsMotionTracker];
}

id objc_msgSend_mainDeviceIsMotionTrackerWithoutInternalOverride(void *a1, const char *a2, ...)
{
  return _[a1 mainDeviceIsMotionTrackerWithoutInternalOverride];
}

id objc_msgSend_mainDeviceIsOnDeviceEyeTracker(void *a1, const char *a2, ...)
{
  return _[a1 mainDeviceIsOnDeviceEyeTracker];
}

id objc_msgSend_mainDeviceIsPointer(void *a1, const char *a2, ...)
{
  return _[a1 mainDeviceIsPointer];
}

id objc_msgSend_mainDisplayManager(void *a1, const char *a2, ...)
{
  return _[a1 mainDisplayManager];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainQueue];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _[a1 mainScreen];
}

id objc_msgSend_mainThread(void *a1, const char *a2, ...)
{
  return _[a1 mainThread];
}

id objc_msgSend_mainView(void *a1, const char *a2, ...)
{
  return _[a1 mainView];
}

id objc_msgSend_mainWindow(void *a1, const char *a2, ...)
{
  return _[a1 mainWindow];
}

id objc_msgSend_makeKeyAndVisible(void *a1, const char *a2, ...)
{
  return _[a1 makeKeyAndVisible];
}

id objc_msgSend_makeMenuItemsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 makeMenuItemsIfNeeded];
}

id objc_msgSend_makeObjectsPerformSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:");
}

id objc_msgSend_makeSideAppMenuItemForGesture_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeSideAppMenuItemForGesture:delegate:");
}

id objc_msgSend_manipulateDimTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manipulateDimTimer:");
}

id objc_msgSend_manualScanningDriver(void *a1, const char *a2, ...)
{
  return _[a1 manualScanningDriver];
}

id objc_msgSend_manufacturerName(void *a1, const char *a2, ...)
{
  return _[a1 manufacturerName];
}

id objc_msgSend_mappings(void *a1, const char *a2, ...)
{
  return _[a1 mappings];
}

id objc_msgSend_maxAutoscanCycles(void *a1, const char *a2, ...)
{
  return _[a1 maxAutoscanCycles];
}

id objc_msgSend_maxItemsPerRow(void *a1, const char *a2, ...)
{
  return _[a1 maxItemsPerRow];
}

id objc_msgSend_maxRows(void *a1, const char *a2, ...)
{
  return _[a1 maxRows];
}

id objc_msgSend_maxVisibleItems(void *a1, const char *a2, ...)
{
  return _[a1 maxVisibleItems];
}

id objc_msgSend_measuringCell(void *a1, const char *a2, ...)
{
  return _[a1 measuringCell];
}

id objc_msgSend_mediaControlsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaControlsChanged:");
}

id objc_msgSend_mediaControlsKeys(void *a1, const char *a2, ...)
{
  return _[a1 mediaControlsKeys];
}

id objc_msgSend_mediaPlaybackChanged(void *a1, const char *a2, ...)
{
  return _[a1 mediaPlaybackChanged];
}

id objc_msgSend_menu(void *a1, const char *a2, ...)
{
  return _[a1 menu];
}

id objc_msgSend_menu_activateRecipe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menu:activateRecipe:");
}

id objc_msgSend_menu_playSoundEffect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menu:playSoundEffect:");
}

id objc_msgSend_menu_rectToClearForFingersWithGestureSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menu:rectToClearForFingersWithGestureSheet:");
}

id objc_msgSend_menu_setItemMenuState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menu:setItemMenuState:");
}

id objc_msgSend_menu_showAlternateKeysForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menu:showAlternateKeysForKey:");
}

id objc_msgSend_menu_showScrollViewPickerForScrollViews_elementsToScroll_scrollAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menu:showScrollViewPickerForScrollViews:elementsToScroll:scrollAction:");
}

id objc_msgSend_menu_showSysdiagnoseDisplayString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menu:showSysdiagnoseDisplayString:");
}

id objc_msgSend_menu_showTypingCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menu:showTypingCandidates:");
}

id objc_msgSend_menu_speakAnnouncement_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menu:speakAnnouncement:completionBlock:");
}

id objc_msgSend_menuElement(void *a1, const char *a2, ...)
{
  return _[a1 menuElement];
}

id objc_msgSend_menuExitedOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuExitedOnDisplay:");
}

id objc_msgSend_menuIconIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 menuIconIdentifier];
}

id objc_msgSend_menuItem(void *a1, const char *a2, ...)
{
  return _[a1 menuItem];
}

id objc_msgSend_menuItem_didBecomeFocused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItem:didBecomeFocused:");
}

id objc_msgSend_menuItemCursorController(void *a1, const char *a2, ...)
{
  return _[a1 menuItemCursorController];
}

id objc_msgSend_menuItemDictionary(void *a1, const char *a2, ...)
{
  return _[a1 menuItemDictionary];
}

id objc_msgSend_menuItemForScrollAction_withDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemForScrollAction:withDelegate:");
}

id objc_msgSend_menuItemForTapWithMenu_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemForTapWithMenu:delegate:");
}

id objc_msgSend_menuItemGroupName(void *a1, const char *a2, ...)
{
  return _[a1 menuItemGroupName];
}

id objc_msgSend_menuItemHorizontalSpacingAfterItemAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemHorizontalSpacingAfterItemAtIndex:");
}

id objc_msgSend_menuItemSize(void *a1, const char *a2, ...)
{
  return _[a1 menuItemSize];
}

id objc_msgSend_menuItemSpacing(void *a1, const char *a2, ...)
{
  return _[a1 menuItemSpacing];
}

id objc_msgSend_menuItemStruts(void *a1, const char *a2, ...)
{
  return _[a1 menuItemStruts];
}

id objc_msgSend_menuItemWasActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemWasActivated:");
}

id objc_msgSend_menuItemWithIdentifier_menu_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemWithIdentifier:menu:delegate:");
}

id objc_msgSend_menuItemWithItemDictionary_menu_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemWithItemDictionary:menu:delegate:");
}

id objc_msgSend_menuItems(void *a1, const char *a2, ...)
{
  return _[a1 menuItems];
}

id objc_msgSend_menuItemsForCustomActions_menu_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemsForCustomActions:menu:delegate:");
}

id objc_msgSend_menuItemsForCustomHardwareActions_menu_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemsForCustomHardwareActions:menu:delegate:");
}

id objc_msgSend_menuItemsForDrops_menu_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemsForDrops:menu:delegate:");
}

id objc_msgSend_menuItemsForHardwareRotateCrownGestureWithMenu_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemsForHardwareRotateCrownGestureWithMenu:delegate:");
}

id objc_msgSend_menuItemsForItem_menu_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuItemsForItem:menu:delegate:");
}

id objc_msgSend_menuKnockoutBorderOpacity(void *a1, const char *a2, ...)
{
  return _[a1 menuKnockoutBorderOpacity];
}

id objc_msgSend_menuKnockoutBorderOverlayBlendMode(void *a1, const char *a2, ...)
{
  return _[a1 menuKnockoutBorderOverlayBlendMode];
}

id objc_msgSend_menuKnockoutColor(void *a1, const char *a2, ...)
{
  return _[a1 menuKnockoutColor];
}

id objc_msgSend_menuObservers(void *a1, const char *a2, ...)
{
  return _[a1 menuObservers];
}

id objc_msgSend_menuOpeningAuxElementManager(void *a1, const char *a2, ...)
{
  return _[a1 menuOpeningAuxElementManager];
}

id objc_msgSend_menuOpeningElement(void *a1, const char *a2, ...)
{
  return _[a1 menuOpeningElement];
}

id objc_msgSend_menuPageControlHighlightedBorderColor(void *a1, const char *a2, ...)
{
  return _[a1 menuPageControlHighlightedBorderColor];
}

id objc_msgSend_menuPageControlHighlightedBorderLineWidth(void *a1, const char *a2, ...)
{
  return _[a1 menuPageControlHighlightedBorderLineWidth];
}

id objc_msgSend_menuSheet(void *a1, const char *a2, ...)
{
  return _[a1 menuSheet];
}

id objc_msgSend_menuSheetForCollectionView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuSheetForCollectionView:");
}

id objc_msgSend_menuSheetStack(void *a1, const char *a2, ...)
{
  return _[a1 menuSheetStack];
}

id objc_msgSend_menuTipObjectDidChange(void *a1, const char *a2, ...)
{
  return _[a1 menuTipObjectDidChange];
}

id objc_msgSend_menuView(void *a1, const char *a2, ...)
{
  return _[a1 menuView];
}

id objc_msgSend_menuVisualProvider(void *a1, const char *a2, ...)
{
  return _[a1 menuVisualProvider];
}

id objc_msgSend_menuWillDisappear(void *a1, const char *a2, ...)
{
  return _[a1 menuWillDisappear];
}

id objc_msgSend_metricsForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsForTextStyle:");
}

id objc_msgSend_mfiInputSource(void *a1, const char *a2, ...)
{
  return _[a1 mfiInputSource];
}

id objc_msgSend_midiEvent(void *a1, const char *a2, ...)
{
  return _[a1 midiEvent];
}

id objc_msgSend_midiInputSource(void *a1, const char *a2, ...)
{
  return _[a1 midiInputSource];
}

id objc_msgSend_midpointForFingers(void *a1, const char *a2, ...)
{
  return _[a1 midpointForFingers];
}

id objc_msgSend_midpointOfStartingFingersForGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "midpointOfStartingFingersForGesture:");
}

id objc_msgSend_minimumLineHeight(void *a1, const char *a2, ...)
{
  return _[a1 minimumLineHeight];
}

id objc_msgSend_minimumOuterPadding(void *a1, const char *a2, ...)
{
  return _[a1 minimumOuterPadding];
}

id objc_msgSend_minimumPointPickerNumberOfCyclesForDriver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumPointPickerNumberOfCyclesForDriver:");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_modalizeMenu_modalButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modalizeMenu:modalButton:");
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _[a1 mode];
}

id objc_msgSend_modifyPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifyPoints:");
}

id objc_msgSend_moreButton(void *a1, const char *a2, ...)
{
  return _[a1 moreButton];
}

id objc_msgSend_moreItems(void *a1, const char *a2, ...)
{
  return _[a1 moreItems];
}

id objc_msgSend_moreItemsPageControl(void *a1, const char *a2, ...)
{
  return _[a1 moreItemsPageControl];
}

id objc_msgSend_mostSuitablePointPickerWithMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostSuitablePointPickerWithMenu:");
}

id objc_msgSend_motionTrackerDelayedHideAlertTimer(void *a1, const char *a2, ...)
{
  return _[a1 motionTrackerDelayedHideAlertTimer];
}

id objc_msgSend_motionTrackerDelayedShowAlertTimer(void *a1, const char *a2, ...)
{
  return _[a1 motionTrackerDelayedShowAlertTimer];
}

id objc_msgSend_motionTrackerErrorCode(void *a1, const char *a2, ...)
{
  return _[a1 motionTrackerErrorCode];
}

id objc_msgSend_motionTrackerInputSource(void *a1, const char *a2, ...)
{
  return _[a1 motionTrackerInputSource];
}

id objc_msgSend_motionTrackerInputSource_didReceiveActionWithIdentifier_start_ignoreInputHold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionTrackerInputSource:didReceiveActionWithIdentifier:start:ignoreInputHold:");
}

id objc_msgSend_motionTrackerInputSource_didReceivePoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionTrackerInputSource:didReceivePoint:");
}

id objc_msgSend_motionTrackerInputSourceFailedToTrackFaceWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionTrackerInputSourceFailedToTrackFaceWithError:");
}

id objc_msgSend_motionTrackerLostFace(void *a1, const char *a2, ...)
{
  return _[a1 motionTrackerLostFace];
}

id objc_msgSend_motionTrackingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 motionTrackingEnabled];
}

id objc_msgSend_motionTrackingInputManager_updatedInputToUse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionTrackingInputManager:updatedInputToUse:");
}

id objc_msgSend_mouse(void *a1, const char *a2, ...)
{
  return _[a1 mouse];
}

id objc_msgSend_mouseBehavesLikeFinger(void *a1, const char *a2, ...)
{
  return _[a1 mouseBehavesLikeFinger];
}

id objc_msgSend_mouseEventRecordedWithDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mouseEventRecordedWithDelta:");
}

id objc_msgSend_mouseForHIDDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mouseForHIDDevice:");
}

id objc_msgSend_mouseForHIDServiceClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mouseForHIDServiceClient:");
}

id objc_msgSend_mouseKeyActionForKeyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mouseKeyActionForKeyCode:");
}

id objc_msgSend_mouseKeyActionIsMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mouseKeyActionIsMovement:");
}

id objc_msgSend_mouseKeysMovementDelay(void *a1, const char *a2, ...)
{
  return _[a1 mouseKeysMovementDelay];
}

id objc_msgSend_mouseKeysMovementMultiplier(void *a1, const char *a2, ...)
{
  return _[a1 mouseKeysMovementMultiplier];
}

id objc_msgSend_mouseKeysRepeatDelay(void *a1, const char *a2, ...)
{
  return _[a1 mouseKeysRepeatDelay];
}

id objc_msgSend_mousePointerAppearance(void *a1, const char *a2, ...)
{
  return _[a1 mousePointerAppearance];
}

id objc_msgSend_moveDragSessionToFixedSpaceScreenPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveDragSessionToFixedSpaceScreenPoint:");
}

id objc_msgSend_moveFingerByDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveFingerByDelta:");
}

id objc_msgSend_moveFingerToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveFingerToPoint:");
}

id objc_msgSend_moveFingerToPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveFingerToPoint:onDisplay:");
}

id objc_msgSend_moveFingersToPointInFingerCoordinateSpace_onDisplay_allowOutOfBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveFingersToPointInFingerCoordinateSpace:onDisplay:allowOutOfBounds:");
}

id objc_msgSend_moveFingersToPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveFingersToPoints:");
}

id objc_msgSend_moveForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveForFreehandSheet:");
}

id objc_msgSend_moveGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 moveGestureRecognizer];
}

id objc_msgSend_moveMenuItemWithPreferredNumberOfLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveMenuItemWithPreferredNumberOfLines:");
}

id objc_msgSend_moveNubbitToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveNubbitToPoint:");
}

id objc_msgSend_movePointerWithMouseKeyAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "movePointerWithMouseKeyAction:");
}

id objc_msgSend_movePointerWithMouseKeyAction_increment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "movePointerWithMouseKeyAction:increment:");
}

id objc_msgSend_moveSystemPointer_startPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveSystemPointer:startPoint:");
}

id objc_msgSend_moveTimer(void *a1, const char *a2, ...)
{
  return _[a1 moveTimer];
}

id objc_msgSend_moveToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveToPoint:");
}

id objc_msgSend_moveToolbarForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveToolbarForFreehandSheet:");
}

id objc_msgSend_moveToolbarMenuItem(void *a1, const char *a2, ...)
{
  return _[a1 moveToolbarMenuItem];
}

id objc_msgSend_moveTrackpadBorderWithDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveTrackpadBorderWithDelta:");
}

id objc_msgSend_moveTrackpadViewToFront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveTrackpadViewToFront:");
}

id objc_msgSend_multiTouchToolBackgroundEnabled(void *a1, const char *a2, ...)
{
  return _[a1 multiTouchToolBackgroundEnabled];
}

id objc_msgSend_multipleMenuItemsElement_didBecomeHighlighted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multipleMenuItemsElement:didBecomeHighlighted:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameForConfirmationButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameForConfirmationButton:");
}

id objc_msgSend_nativeBounds(void *a1, const char *a2, ...)
{
  return _[a1 nativeBounds];
}

id objc_msgSend_nativeFocusElement(void *a1, const char *a2, ...)
{
  return _[a1 nativeFocusElement];
}

id objc_msgSend_nativeFocusElementDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nativeFocusElementDidChange:");
}

id objc_msgSend_naturalScroll(void *a1, const char *a2, ...)
{
  return _[a1 naturalScroll];
}

id objc_msgSend_nearestElementFrameForPortraitPoint_distance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearestElementFrameForPortraitPoint:distance:");
}

id objc_msgSend_nearestRockerButtonForDisplayManger_orientedPoint_distance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearestRockerButtonForDisplayManger:orientedPoint:distance:");
}

id objc_msgSend_needsGenerateScrollers(void *a1, const char *a2, ...)
{
  return _[a1 needsGenerateScrollers];
}

id objc_msgSend_needsToShowZoomWindow(void *a1, const char *a2, ...)
{
  return _[a1 needsToShowZoomWindow];
}

id objc_msgSend_nextAuxiliaryElementManagerFrom_role_excludeDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextAuxiliaryElementManagerFrom:role:excludeDisabled:");
}

id objc_msgSend_nextCursorRangeInDirection_unit_outputRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextCursorRangeInDirection:unit:outputRange:");
}

id objc_msgSend_nextCursorRangeInDirection_unit_outputRange_currentCursorRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextCursorRangeInDirection:unit:outputRange:currentCursorRange:");
}

id objc_msgSend_nextFocusContextAfterActivatingKeyboardElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextFocusContextAfterActivatingKeyboardElement:");
}

id objc_msgSend_nextFocusContextAfterDismissingMenuForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextFocusContextAfterDismissingMenuForElement:");
}

id objc_msgSend_nextFocusContextFromContext_inDirection_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextFocusContextFromContext:inDirection:didWrap:");
}

id objc_msgSend_nextItemForScanningFromItem_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextItemForScanningFromItem:didWrap:");
}

id objc_msgSend_nextSiblingOfChild_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextSiblingOfChild:didWrap:");
}

id objc_msgSend_nextSiblingOfElement_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextSiblingOfElement:didWrap:");
}

id objc_msgSend_nextSiblingOfGroupable_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextSiblingOfGroupable:didWrap:");
}

id objc_msgSend_normalizedHorizontalTipCenter(void *a1, const char *a2, ...)
{
  return _[a1 normalizedHorizontalTipCenter];
}

id objc_msgSend_normalizedPointForDifference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalizedPointForDifference:");
}

id objc_msgSend_note(void *a1, const char *a2, ...)
{
  return _[a1 note];
}

id objc_msgSend_notificationObserver(void *a1, const char *a2, ...)
{
  return _[a1 notificationObserver];
}

id objc_msgSend_notificationObserverQueue(void *a1, const char *a2, ...)
{
  return _[a1 notificationObserverQueue];
}

id objc_msgSend_notifyDidReceiveAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDidReceiveAction:");
}

id objc_msgSend_notifyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyEvent:");
}

id objc_msgSend_notifyToken(void *a1, const char *a2, ...)
{
  return _[a1 notifyToken];
}

id objc_msgSend_notifyUpdateElementVisualsEventDidOccur(void *a1, const char *a2, ...)
{
  return _[a1 notifyUpdateElementVisualsEventDidOccur];
}

id objc_msgSend_notifyUserEventOccurred(void *a1, const char *a2, ...)
{
  return _[a1 notifyUserEventOccurred];
}

id objc_msgSend_notifyZoomFocusDidChangeWithType_rect_contextId_displayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyZoomFocusDidChangeWithType:rect:contextId:displayId:");
}

id objc_msgSend_nubbitMoving(void *a1, const char *a2, ...)
{
  return _[a1 nubbitMoving];
}

id objc_msgSend_nubbitPositionForFlick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nubbitPositionForFlick:");
}

id objc_msgSend_nubbitSize(void *a1, const char *a2, ...)
{
  return _[a1 nubbitSize];
}

id objc_msgSend_nubbitVisible(void *a1, const char *a2, ...)
{
  return _[a1 nubbitVisible];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberOfColumns(void *a1, const char *a2, ...)
{
  return _[a1 numberOfColumns];
}

id objc_msgSend_numberOfCycles(void *a1, const char *a2, ...)
{
  return _[a1 numberOfCycles];
}

id objc_msgSend_numberOfDevicesConnected(void *a1, const char *a2, ...)
{
  return _[a1 numberOfDevicesConnected];
}

id objc_msgSend_numberOfElements(void *a1, const char *a2, ...)
{
  return _[a1 numberOfElements];
}

id objc_msgSend_numberOfEvents(void *a1, const char *a2, ...)
{
  return _[a1 numberOfEvents];
}

id objc_msgSend_numberOfFingers(void *a1, const char *a2, ...)
{
  return _[a1 numberOfFingers];
}

id objc_msgSend_numberOfItemsInCurrentScanCycle(void *a1, const char *a2, ...)
{
  return _[a1 numberOfItemsInCurrentScanCycle];
}

id objc_msgSend_numberOfItemsInFirstPage(void *a1, const char *a2, ...)
{
  return _[a1 numberOfItemsInFirstPage];
}

id objc_msgSend_numberOfItemsInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfItemsInSection:");
}

id objc_msgSend_numberOfMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 numberOfMenuItems];
}

id objc_msgSend_numberOfPagesRequired(void *a1, const char *a2, ...)
{
  return _[a1 numberOfPagesRequired];
}

id objc_msgSend_numberOfPresses(void *a1, const char *a2, ...)
{
  return _[a1 numberOfPresses];
}

id objc_msgSend_numberOfRows(void *a1, const char *a2, ...)
{
  return _[a1 numberOfRows];
}

id objc_msgSend_numberOfScanLoops(void *a1, const char *a2, ...)
{
  return _[a1 numberOfScanLoops];
}

id objc_msgSend_numberWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithAXAttribute:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectForVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForVariant:");
}

id objc_msgSend_objectWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithAXAttribute:");
}

id objc_msgSend_objectWithAXAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithAXAttribute:parameter:");
}

id objc_msgSend_objectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsAtIndexes:");
}

id objc_msgSend_objectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsPassingTest:");
}

id objc_msgSend_observeAXNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeAXNotifications:");
}

id objc_msgSend_observer(void *a1, const char *a2, ...)
{
  return _[a1 observer];
}

id objc_msgSend_onDeviceEyeTrackingQuitCurrentAppTimer(void *a1, const char *a2, ...)
{
  return _[a1 onDeviceEyeTrackingQuitCurrentAppTimer];
}

id objc_msgSend_onScreenFrameForRockerButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onScreenFrameForRockerButton:");
}

id objc_msgSend_onScreenLocation(void *a1, const char *a2, ...)
{
  return _[a1 onScreenLocation];
}

id objc_msgSend_openAssistiveTouchCustomGestureCreation(void *a1, const char *a2, ...)
{
  return _[a1 openAssistiveTouchCustomGestureCreation];
}

id objc_msgSend_openCreateCustomGestureForAST(void *a1, const char *a2, ...)
{
  return _[a1 openCreateCustomGestureForAST];
}

id objc_msgSend_openCreateCustomGestureForSCAT(void *a1, const char *a2, ...)
{
  return _[a1 openCreateCustomGestureForSCAT];
}

id objc_msgSend_openMenuWithSwaggle(void *a1, const char *a2, ...)
{
  return _[a1 openMenuWithSwaggle];
}

id objc_msgSend_openSCATCustomGestureCreation(void *a1, const char *a2, ...)
{
  return _[a1 openSCATCustomGestureCreation];
}

id objc_msgSend_openVisualIntelligence(void *a1, const char *a2, ...)
{
  return _[a1 openVisualIntelligence];
}

id objc_msgSend_optimalNumberOfRows_itemsPerRow_forTotalNumberOfItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optimalNumberOfRows:itemsPerRow:forTotalNumberOfItems:");
}

id objc_msgSend_orbPreviewWindow(void *a1, const char *a2, ...)
{
  return _[a1 orbPreviewWindow];
}

id objc_msgSend_orbValue(void *a1, const char *a2, ...)
{
  return _[a1 orbValue];
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return _[a1 orderedSet];
}

id objc_msgSend_orientation(void *a1, const char *a2, ...)
{
  return _[a1 orientation];
}

id objc_msgSend_orientationChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientationChanged:");
}

id objc_msgSend_orientationDidChange(void *a1, const char *a2, ...)
{
  return _[a1 orientationDidChange];
}

id objc_msgSend_orientationDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientationDidChange:");
}

id objc_msgSend_orientationLocked(void *a1, const char *a2, ...)
{
  return _[a1 orientationLocked];
}

id objc_msgSend_orientedBubbleModeElementFrameForElementFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientedBubbleModeElementFrameForElementFrame:");
}

id objc_msgSend_orientedContinuousScrollViewFrameForScrollViewFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientedContinuousScrollViewFrameForScrollViewFrame:");
}

id objc_msgSend_orientedPointLiesInContinuousScrollerActivationRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientedPointLiesInContinuousScrollerActivationRegion:");
}

id objc_msgSend_orientedScrollViewFrame(void *a1, const char *a2, ...)
{
  return _[a1 orientedScrollViewFrame];
}

id objc_msgSend_outlineColor(void *a1, const char *a2, ...)
{
  return _[a1 outlineColor];
}

id objc_msgSend_outlineThickness(void *a1, const char *a2, ...)
{
  return _[a1 outlineThickness];
}

id objc_msgSend_outputAccessQueue(void *a1, const char *a2, ...)
{
  return _[a1 outputAccessQueue];
}

id objc_msgSend_outputManager(void *a1, const char *a2, ...)
{
  return _[a1 outputManager];
}

id objc_msgSend_outputManager_didSpeakFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputManager:didSpeakFocusContext:");
}

id objc_msgSend_outputManager_willSpeakFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputManager:willSpeakFocusContext:");
}

id objc_msgSend_outputScannerAnnouncement_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputScannerAnnouncement:completionBlock:");
}

id objc_msgSend_outputScannerAttributedString_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputScannerAttributedString:completionBlock:");
}

id objc_msgSend_outputScannerFocusContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputScannerFocusContext:completion:");
}

id objc_msgSend_overflowPadding(void *a1, const char *a2, ...)
{
  return _[a1 overflowPadding];
}

id objc_msgSend_overrideBubbleCursorOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideBubbleCursorOpacity:");
}

id objc_msgSend_overrideFingerContentViewOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideFingerContentViewOpacity:");
}

id objc_msgSend_overrideImage(void *a1, const char *a2, ...)
{
  return _[a1 overrideImage];
}

id objc_msgSend_overrideLookAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideLookAtPoint:");
}

id objc_msgSend_overrideMotionTrackerLookAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideMotionTrackerLookAtPoint:");
}

id objc_msgSend_overscanCompensationInsets(void *a1, const char *a2, ...)
{
  return _[a1 overscanCompensationInsets];
}

id objc_msgSend_page(void *a1, const char *a2, ...)
{
  return _[a1 page];
}

id objc_msgSend_panFingerPositions(void *a1, const char *a2, ...)
{
  return _[a1 panFingerPositions];
}

id objc_msgSend_parentGroup(void *a1, const char *a2, ...)
{
  return _[a1 parentGroup];
}

id objc_msgSend_parentSheetOfSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentSheetOfSheet:");
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathForCenterPointAtSelectionPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForCenterPointAtSelectionPath:");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pathLocation(void *a1, const char *a2, ...)
{
  return _[a1 pathLocation];
}

id objc_msgSend_pathMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 pathMenuItems];
}

id objc_msgSend_pathPressure(void *a1, const char *a2, ...)
{
  return _[a1 pathPressure];
}

id objc_msgSend_paths(void *a1, const char *a2, ...)
{
  return _[a1 paths];
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return _[a1 pause];
}

id objc_msgSend_pauseAutoscanning(void *a1, const char *a2, ...)
{
  return _[a1 pauseAutoscanning];
}

id objc_msgSend_pauseAutoscrolling(void *a1, const char *a2, ...)
{
  return _[a1 pauseAutoscrolling];
}

id objc_msgSend_pauseBubbleModeForSpecialUsageTool(void *a1, const char *a2, ...)
{
  return _[a1 pauseBubbleModeForSpecialUsageTool];
}

id objc_msgSend_pauseEyeTrackingAutoHideForSpecialUsageTool(void *a1, const char *a2, ...)
{
  return _[a1 pauseEyeTrackingAutoHideForSpecialUsageTool];
}

id objc_msgSend_pauseForNumberOfCycles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseForNumberOfCycles:");
}

id objc_msgSend_pauseOnFirstItemInterval(void *a1, const char *a2, ...)
{
  return _[a1 pauseOnFirstItemInterval];
}

id objc_msgSend_pauseScanning(void *a1, const char *a2, ...)
{
  return _[a1 pauseScanning];
}

id objc_msgSend_pauseScanningForPointPickerNumberOfCycles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseScanningForPointPickerNumberOfCycles:");
}

id objc_msgSend_pauseScanningWithScreenLockDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseScanningWithScreenLockDisabled:");
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _[a1 payload];
}

id objc_msgSend_performAXAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAXAction:");
}

id objc_msgSend_performAXAction_withValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAXAction:withValue:");
}

id objc_msgSend_performAction(void *a1, const char *a2, ...)
{
  return _[a1 performAction];
}

id objc_msgSend_performAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAction:");
}

id objc_msgSend_performAction_withValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAction:withValue:");
}

id objc_msgSend_performActionForSystemAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performActionForSystemAction:");
}

id objc_msgSend_performAsynchronousWritingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAsynchronousWritingBlock:");
}

id objc_msgSend_performBlockAfterHitTestWithDelay_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAfterHitTestWithDelay:block:");
}

id objc_msgSend_performButtonAction_type_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performButtonAction:type:state:");
}

id objc_msgSend_performCircularProgressAnimationOnFingersWithDuration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performCircularProgressAnimationOnFingersWithDuration:completion:");
}

id objc_msgSend_performDownAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performDownAtPoint:");
}

id objc_msgSend_performDrop(void *a1, const char *a2, ...)
{
  return _[a1 performDrop];
}

id objc_msgSend_performFingerDownAtPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performFingerDownAtPoint:onDisplay:");
}

id objc_msgSend_performFingerUpAtPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performFingerUpAtPoint:onDisplay:");
}

id objc_msgSend_performGesture_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performGesture:completion:");
}

id objc_msgSend_performHoldAtPoint_isDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performHoldAtPoint:isDown:");
}

id objc_msgSend_performMedusaGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMedusaGesture:");
}

id objc_msgSend_performMoveToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMoveToPoint:");
}

id objc_msgSend_performPinch_secondPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performPinch:secondPoint:");
}

id objc_msgSend_performPreparedGestureOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performPreparedGestureOnDisplay:");
}

id objc_msgSend_performPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performPress:");
}

id objc_msgSend_performPress_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performPress:type:");
}

id objc_msgSend_performPress_type_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performPress:type:source:");
}

id objc_msgSend_performSelector_onThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:onThread:withObject:waitUntilDone:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:");
}

id objc_msgSend_performShortcut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performShortcut:");
}

id objc_msgSend_performSynchronousWritingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSynchronousWritingBlock:");
}

id objc_msgSend_performSysdiagnoseForInputController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSysdiagnoseForInputController:");
}

id objc_msgSend_performSysdiagnoseOnReceiver(void *a1, const char *a2, ...)
{
  return _[a1 performSysdiagnoseOnReceiver];
}

id objc_msgSend_performSysdiagnoseWithStatusUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSysdiagnoseWithStatusUpdateHandler:");
}

id objc_msgSend_performTap(void *a1, const char *a2, ...)
{
  return _[a1 performTap];
}

id objc_msgSend_performTapAndHold(void *a1, const char *a2, ...)
{
  return _[a1 performTapAndHold];
}

id objc_msgSend_performTrackpadScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTrackpadScroll:");
}

id objc_msgSend_performUpAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performUpAtPoint:");
}

id objc_msgSend_performValidations_withPreValidationHandler_postValidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performValidations:withPreValidationHandler:postValidationHandler:");
}

id objc_msgSend_performWithoutAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithoutAnimation:");
}

id objc_msgSend_persistentSwitchIdentifierForButtonNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentSwitchIdentifierForButtonNumber:");
}

id objc_msgSend_persistentSwitchIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 persistentSwitchIdentifiers];
}

id objc_msgSend_persistentlyHidePointerAssertionForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentlyHidePointerAssertionForReason:");
}

id objc_msgSend_pickPoint(void *a1, const char *a2, ...)
{
  return _[a1 pickPoint];
}

id objc_msgSend_pickedPoint(void *a1, const char *a2, ...)
{
  return _[a1 pickedPoint];
}

id objc_msgSend_pickedPointInDeviceCoordinates(void *a1, const char *a2, ...)
{
  return _[a1 pickedPointInDeviceCoordinates];
}

id objc_msgSend_pickerPhase(void *a1, const char *a2, ...)
{
  return _[a1 pickerPhase];
}

id objc_msgSend_pickerViewController(void *a1, const char *a2, ...)
{
  return _[a1 pickerViewController];
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_pinchAngle(void *a1, const char *a2, ...)
{
  return _[a1 pinchAngle];
}

id objc_msgSend_pinchFingerOriginalPositions(void *a1, const char *a2, ...)
{
  return _[a1 pinchFingerOriginalPositions];
}

id objc_msgSend_pinchFulcrum(void *a1, const char *a2, ...)
{
  return _[a1 pinchFulcrum];
}

id objc_msgSend_pinchGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 pinchGestureRecognizer];
}

id objc_msgSend_pinchRadius(void *a1, const char *a2, ...)
{
  return _[a1 pinchRadius];
}

id objc_msgSend_pitch(void *a1, const char *a2, ...)
{
  return _[a1 pitch];
}

id objc_msgSend_placeNubbitAtBottomCenter(void *a1, const char *a2, ...)
{
  return _[a1 placeNubbitAtBottomCenter];
}

id objc_msgSend_play(void *a1, const char *a2, ...)
{
  return _[a1 play];
}

id objc_msgSend_playMouseClickSound(void *a1, const char *a2, ...)
{
  return _[a1 playMouseClickSound];
}

id objc_msgSend_playSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playSound:");
}

id objc_msgSend_playedHapticForCurrentEvent(void *a1, const char *a2, ...)
{
  return _[a1 playedHapticForCurrentEvent];
}

id objc_msgSend_point(void *a1, const char *a2, ...)
{
  return _[a1 point];
}

id objc_msgSend_pointConversionQueue(void *a1, const char *a2, ...)
{
  return _[a1 pointConversionQueue];
}

id objc_msgSend_pointForFingerIdentifier_atEventIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointForFingerIdentifier:atEventIndex:");
}

id objc_msgSend_pointInside_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointInside:withEvent:");
}

id objc_msgSend_pointOnBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointOnBorder:");
}

id objc_msgSend_pointOnBottomBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointOnBottomBorder:");
}

id objc_msgSend_pointOnLeftBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointOnLeftBorder:");
}

id objc_msgSend_pointOnRightBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointOnRightBorder:");
}

id objc_msgSend_pointOnTopBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointOnTopBorder:");
}

id objc_msgSend_pointOnTrackpad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointOnTrackpad:");
}

id objc_msgSend_pointOnTrackpadView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointOnTrackpadView:");
}

id objc_msgSend_pointPicker(void *a1, const char *a2, ...)
{
  return _[a1 pointPicker];
}

id objc_msgSend_pointPicker_didFinishDwellingOnPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointPicker:didFinishDwellingOnPoint:");
}

id objc_msgSend_pointPicker_didPickPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointPicker:didPickPoint:");
}

id objc_msgSend_pointPicker_didSweepIntoFocusContext_isRefiningPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointPicker:didSweepIntoFocusContext:isRefiningPoint:");
}

id objc_msgSend_pointPicker_didSweepOutOfFocusContext_isRefiningPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointPicker:didSweepOutOfFocusContext:isRefiningPoint:");
}

id objc_msgSend_pointPicker_pauseForNumberOfCycles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointPicker:pauseForNumberOfCycles:");
}

id objc_msgSend_pointPickerDidFinishSweeping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointPickerDidFinishSweeping:");
}

id objc_msgSend_pointPickerPromptBackdropStyle(void *a1, const char *a2, ...)
{
  return _[a1 pointPickerPromptBackdropStyle];
}

id objc_msgSend_pointPickerPromptCornerRadius(void *a1, const char *a2, ...)
{
  return _[a1 pointPickerPromptCornerRadius];
}

id objc_msgSend_pointPickerPromptFont(void *a1, const char *a2, ...)
{
  return _[a1 pointPickerPromptFont];
}

id objc_msgSend_pointPickerPromptPadding(void *a1, const char *a2, ...)
{
  return _[a1 pointPickerPromptPadding];
}

id objc_msgSend_pointPickerPromptTextColor(void *a1, const char *a2, ...)
{
  return _[a1 pointPickerPromptTextColor];
}

id objc_msgSend_pointPickerView(void *a1, const char *a2, ...)
{
  return _[a1 pointPickerView];
}

id objc_msgSend_pointPickerWithMode_menu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointPickerWithMode:menu:");
}

id objc_msgSend_pointValue(void *a1, const char *a2, ...)
{
  return _[a1 pointValue];
}

id objc_msgSend_pointerAccelX(void *a1, const char *a2, ...)
{
  return _[a1 pointerAccelX];
}

id objc_msgSend_pointerAccelY(void *a1, const char *a2, ...)
{
  return _[a1 pointerAccelY];
}

id objc_msgSend_pointerArrayWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerArrayWithOptions:");
}

id objc_msgSend_pointerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerAtIndex:");
}

id objc_msgSend_pointerButtonMask(void *a1, const char *a2, ...)
{
  return _[a1 pointerButtonMask];
}

id objc_msgSend_pointerController_didReceivePointerEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerController:didReceivePointerEvent:");
}

id objc_msgSend_pointerControllerInfo(void *a1, const char *a2, ...)
{
  return _[a1 pointerControllerInfo];
}

id objc_msgSend_pointerIsAbsolute(void *a1, const char *a2, ...)
{
  return _[a1 pointerIsAbsolute];
}

id objc_msgSend_pointerMoveGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 pointerMoveGestureRecognizer];
}

id objc_msgSend_pointerStream(void *a1, const char *a2, ...)
{
  return _[a1 pointerStream];
}

id objc_msgSend_pointerUIColorRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 pointerUIColorRepresentation];
}

id objc_msgSend_pointerX(void *a1, const char *a2, ...)
{
  return _[a1 pointerX];
}

id objc_msgSend_pointerY(void *a1, const char *a2, ...)
{
  return _[a1 pointerY];
}

id objc_msgSend_popSheet(void *a1, const char *a2, ...)
{
  return _[a1 popSheet];
}

id objc_msgSend_popoverPosition(void *a1, const char *a2, ...)
{
  return _[a1 popoverPosition];
}

id objc_msgSend_popoverStyleAttributes(void *a1, const char *a2, ...)
{
  return _[a1 popoverStyleAttributes];
}

id objc_msgSend_portraitUpScreenBounds(void *a1, const char *a2, ...)
{
  return _[a1 portraitUpScreenBounds];
}

id objc_msgSend_position(void *a1, const char *a2, ...)
{
  return _[a1 position];
}

id objc_msgSend_positionRelativeToContextElement(void *a1, const char *a2, ...)
{
  return _[a1 positionRelativeToContextElement];
}

id objc_msgSend_postActivationScanLocations(void *a1, const char *a2, ...)
{
  return _[a1 postActivationScanLocations];
}

id objc_msgSend_postEvent_systemEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEvent:systemEvent:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postTransitionUpdateBlock(void *a1, const char *a2, ...)
{
  return _[a1 postTransitionUpdateBlock];
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_preferenceForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferenceForKey:");
}

id objc_msgSend_preferredContentSizeCategory(void *a1, const char *a2, ...)
{
  return _[a1 preferredContentSizeCategory];
}

id objc_msgSend_preferredFontForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontForTextStyle:");
}

id objc_msgSend_preferredMenuDisplayPointOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredMenuDisplayPointOnDisplay:");
}

id objc_msgSend_preferredNumberOfTitleLines(void *a1, const char *a2, ...)
{
  return _[a1 preferredNumberOfTitleLines];
}

id objc_msgSend_preferredTipObject(void *a1, const char *a2, ...)
{
  return _[a1 preferredTipObject];
}

id objc_msgSend_prepare(void *a1, const char *a2, ...)
{
  return _[a1 prepare];
}

id objc_msgSend_prepareForContinuousScrollOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForContinuousScrollOnDisplay:");
}

id objc_msgSend_prepareForEyeTrackerConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForEyeTrackerConnected:");
}

id objc_msgSend_prepareForHIDDeviceConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 prepareForHIDDeviceConfiguration];
}

id objc_msgSend_prepareGesture_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareGesture:onDisplay:");
}

id objc_msgSend_prepareScrollAtPoint_onDisplay_vertical_forward_max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareScrollAtPoint:onDisplay:vertical:forward:max:");
}

id objc_msgSend_prepareUsingFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareUsingFeedback:");
}

id objc_msgSend_presentBannerViewWithText_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentBannerViewWithText:duration:");
}

id objc_msgSend_presentHUDViewTimer(void *a1, const char *a2, ...)
{
  return _[a1 presentHUDViewTimer];
}

id objc_msgSend_presentPostScanningMenuForElementNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentPostScanningMenuForElementNavigationController:");
}

id objc_msgSend_presentSiriShortcutsMenu(void *a1, const char *a2, ...)
{
  return _[a1 presentSiriShortcutsMenu];
}

id objc_msgSend_presentWithDisplayContext_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentWithDisplayContext:animated:");
}

id objc_msgSend_presentWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentWithElement:");
}

id objc_msgSend_presentWithPointPicker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentWithPointPicker:");
}

id objc_msgSend_presentWithRootLevelSheet_useCurrentElementAndPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentWithRootLevelSheet:useCurrentElementAndPoint:");
}

id objc_msgSend_presentationLayer(void *a1, const char *a2, ...)
{
  return _[a1 presentationLayer];
}

id objc_msgSend_presentationMode(void *a1, const char *a2, ...)
{
  return _[a1 presentationMode];
}

id objc_msgSend_press(void *a1, const char *a2, ...)
{
  return _[a1 press];
}

id objc_msgSend_pressCameraButton(void *a1, const char *a2, ...)
{
  return _[a1 pressCameraButton];
}

id objc_msgSend_pressFingersDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pressFingersDown:");
}

id objc_msgSend_pressFingersDownAnimated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pressFingersDownAnimated:");
}

id objc_msgSend_pressGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 pressGestureRecognizer];
}

id objc_msgSend_pressHomeButtonDown(void *a1, const char *a2, ...)
{
  return _[a1 pressHomeButtonDown];
}

id objc_msgSend_pressLockButtonDown(void *a1, const char *a2, ...)
{
  return _[a1 pressLockButtonDown];
}

id objc_msgSend_pressStaccato(void *a1, const char *a2, ...)
{
  return _[a1 pressStaccato];
}

id objc_msgSend_pressVolumeDownButtonDown(void *a1, const char *a2, ...)
{
  return _[a1 pressVolumeDownButtonDown];
}

id objc_msgSend_pressVolumeUpButtonDown(void *a1, const char *a2, ...)
{
  return _[a1 pressVolumeUpButtonDown];
}

id objc_msgSend_pressedAlpha(void *a1, const char *a2, ...)
{
  return _[a1 pressedAlpha];
}

id objc_msgSend_pressedBackgroundBorderImageView(void *a1, const char *a2, ...)
{
  return _[a1 pressedBackgroundBorderImageView];
}

id objc_msgSend_pressedBackgroundImage(void *a1, const char *a2, ...)
{
  return _[a1 pressedBackgroundImage];
}

id objc_msgSend_pressedCircularProgressFillColor(void *a1, const char *a2, ...)
{
  return _[a1 pressedCircularProgressFillColor];
}

id objc_msgSend_pressedScale(void *a1, const char *a2, ...)
{
  return _[a1 pressedScale];
}

id objc_msgSend_pressesOnMoveStart(void *a1, const char *a2, ...)
{
  return _[a1 pressesOnMoveStart];
}

id objc_msgSend_previewColor(void *a1, const char *a2, ...)
{
  return _[a1 previewColor];
}

id objc_msgSend_previewDistance(void *a1, const char *a2, ...)
{
  return _[a1 previewDistance];
}

id objc_msgSend_previewLineThickness(void *a1, const char *a2, ...)
{
  return _[a1 previewLineThickness];
}

id objc_msgSend_previewOutlineColor(void *a1, const char *a2, ...)
{
  return _[a1 previewOutlineColor];
}

id objc_msgSend_previewOutlineThickness(void *a1, const char *a2, ...)
{
  return _[a1 previewOutlineThickness];
}

id objc_msgSend_previousAuxiliaryElementManagerTo_role_excludeDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousAuxiliaryElementManagerTo:role:excludeDisabled:");
}

id objc_msgSend_previousItemForScanningFromItem_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousItemForScanningFromItem:didWrap:");
}

id objc_msgSend_previousPrimaryButtonPressDownDate(void *a1, const char *a2, ...)
{
  return _[a1 previousPrimaryButtonPressDownDate];
}

id objc_msgSend_previousSiblingOfChild_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousSiblingOfChild:didWrap:");
}

id objc_msgSend_previousSiblingOfElement_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousSiblingOfElement:didWrap:");
}

id objc_msgSend_previousSiblingOfGroupable_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousSiblingOfGroupable:didWrap:");
}

id objc_msgSend_primaryApp(void *a1, const char *a2, ...)
{
  return _[a1 primaryApp];
}

id objc_msgSend_printAttachedDevices(void *a1, const char *a2, ...)
{
  return _[a1 printAttachedDevices];
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_privateConfigurationForTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateConfigurationForTypes:");
}

id objc_msgSend_processAXOutputAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processAXOutputAction:");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processOrientedPointForContinuousScrolling_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processOrientedPointForContinuousScrolling:onDisplay:");
}

id objc_msgSend_processPortraitUpPointForBubbleMode_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processPortraitUpPointForBubbleMode:onDisplay:");
}

id objc_msgSend_productName(void *a1, const char *a2, ...)
{
  return _[a1 productName];
}

id objc_msgSend_prompt(void *a1, const char *a2, ...)
{
  return _[a1 prompt];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _[a1 properties];
}

id objc_msgSend_providers(void *a1, const char *a2, ...)
{
  return _[a1 providers];
}

id objc_msgSend_providesElements(void *a1, const char *a2, ...)
{
  return _[a1 providesElements];
}

id objc_msgSend_pushFreehandSheetOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushFreehandSheetOfClass:");
}

id objc_msgSend_pushSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushSheet:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_rangeLayerBorderWidth(void *a1, const char *a2, ...)
{
  return _[a1 rangeLayerBorderWidth];
}

id objc_msgSend_rangeLayerFrameInset(void *a1, const char *a2, ...)
{
  return _[a1 rangeLayerFrameInset];
}

id objc_msgSend_rangeLayerMaxWidth(void *a1, const char *a2, ...)
{
  return _[a1 rangeLayerMaxWidth];
}

id objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfComposedCharacterSequenceAtIndex:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rate(void *a1, const char *a2, ...)
{
  return _[a1 rate];
}

id objc_msgSend_reachabilityButton(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityButton];
}

id objc_msgSend_reachabilityHandlerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityHandlerIdentifier];
}

id objc_msgSend_reachabilityOffset(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityOffset];
}

id objc_msgSend_reachabilityOffsetForPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reachabilityOffsetForPayload:");
}

id objc_msgSend_realPickedPoint(void *a1, const char *a2, ...)
{
  return _[a1 realPickedPoint];
}

id objc_msgSend_reasonsToDisableScanning(void *a1, const char *a2, ...)
{
  return _[a1 reasonsToDisableScanning];
}

id objc_msgSend_rebootDevice(void *a1, const char *a2, ...)
{
  return _[a1 rebootDevice];
}

id objc_msgSend_recentSpeechOutputStrings(void *a1, const char *a2, ...)
{
  return _[a1 recentSpeechOutputStrings];
}

id objc_msgSend_recipe(void *a1, const char *a2, ...)
{
  return _[a1 recipe];
}

id objc_msgSend_recipes(void *a1, const char *a2, ...)
{
  return _[a1 recipes];
}

id objc_msgSend_rectForFingersAtPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectForFingersAtPoints:");
}

id objc_msgSend_rectToClear(void *a1, const char *a2, ...)
{
  return _[a1 rectToClear];
}

id objc_msgSend_rectToClearForFingersWithGestureSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectToClearForFingersWithGestureSheet:");
}

id objc_msgSend_rectToClearForPinchGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectToClearForPinchGesture:");
}

id objc_msgSend_rectToClearForStop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectToClearForStop:");
}

id objc_msgSend_redisplayIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "redisplayIfNeeded:");
}

id objc_msgSend_reevaluateDeviceCleanupTimer(void *a1, const char *a2, ...)
{
  return _[a1 reevaluateDeviceCleanupTimer];
}

id objc_msgSend_reevaluateTimers(void *a1, const char *a2, ...)
{
  return _[a1 reevaluateTimers];
}

id objc_msgSend_refineSelectedPoint(void *a1, const char *a2, ...)
{
  return _[a1 refineSelectedPoint];
}

id objc_msgSend_refinementCount(void *a1, const char *a2, ...)
{
  return _[a1 refinementCount];
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return _[a1 refresh];
}

id objc_msgSend_refreshElementFetcherWithScrollingBlocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshElementFetcherWithScrollingBlocked:");
}

id objc_msgSend_refreshElements(void *a1, const char *a2, ...)
{
  return _[a1 refreshElements];
}

id objc_msgSend_refreshOrientation(void *a1, const char *a2, ...)
{
  return _[a1 refreshOrientation];
}

id objc_msgSend_registerActionHandler_withIdentifierCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerActionHandler:withIdentifierCallback:");
}

id objc_msgSend_registerAssistiveTouchPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerAssistiveTouchPID:");
}

id objc_msgSend_registerClass_forCellWithReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forCellWithReuseIdentifier:");
}

id objc_msgSend_registerFetchObserver_targetQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerFetchObserver:targetQueue:");
}

id objc_msgSend_registerForMessageName_target_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForMessageName:target:selector:");
}

id objc_msgSend_registerForSettingsUpdates(void *a1, const char *a2, ...)
{
  return _[a1 registerForSettingsUpdates];
}

id objc_msgSend_registerForTraitChanges_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForTraitChanges:withHandler:");
}

id objc_msgSend_registerMenuObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerMenuObserver:");
}

id objc_msgSend_registerReachabilityHandler_withIdentifierCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerReachabilityHandler:withIdentifierCallback:");
}

id objc_msgSend_registerShortcutsDidChangeBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerShortcutsDidChangeBlock:");
}

id objc_msgSend_registerSpringBoardActionHandler_withIdentifierCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerSpringBoardActionHandler:withIdentifierCallback:");
}

id objc_msgSend_registerUpdateBlock_forRetrieveSelector_withListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerUpdateBlock:forRetrieveSelector:withListener:");
}

id objc_msgSend_registeredSoundIDs(void *a1, const char *a2, ...)
{
  return _[a1 registeredSoundIDs];
}

id objc_msgSend_reload(void *a1, const char *a2, ...)
{
  return _[a1 reload];
}

id objc_msgSend_reloadCollectionView(void *a1, const char *a2, ...)
{
  return _[a1 reloadCollectionView];
}

id objc_msgSend_reloadData(void *a1, const char *a2, ...)
{
  return _[a1 reloadData];
}

id objc_msgSend_reloadDwellMenu(void *a1, const char *a2, ...)
{
  return _[a1 reloadDwellMenu];
}

id objc_msgSend_reloadFingerAppearance(void *a1, const char *a2, ...)
{
  return _[a1 reloadFingerAppearance];
}

id objc_msgSend_reloadFromCurrentSheet(void *a1, const char *a2, ...)
{
  return _[a1 reloadFromCurrentSheet];
}

id objc_msgSend_reloadMenuVisuals(void *a1, const char *a2, ...)
{
  return _[a1 reloadMenuVisuals];
}

id objc_msgSend_remoteControlInputSource(void *a1, const char *a2, ...)
{
  return _[a1 remoteControlInputSource];
}

id objc_msgSend_remoteDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 remoteDeviceIdentifier];
}

id objc_msgSend_remoteDeviceName(void *a1, const char *a2, ...)
{
  return _[a1 remoteDeviceName];
}

id objc_msgSend_remoteParent(void *a1, const char *a2, ...)
{
  return _[a1 remoteParent];
}

id objc_msgSend_remoteSwitchIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 remoteSwitchIdentifier];
}

id objc_msgSend_removeActionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeActionHandler:");
}

id objc_msgSend_removeAllAnimations(void *a1, const char *a2, ...)
{
  return _[a1 removeAllAnimations];
}

id objc_msgSend_removeAllHandlersForTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllHandlersForTarget:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAllPoints(void *a1, const char *a2, ...)
{
  return _[a1 removeAllPoints];
}

id objc_msgSend_removeAnimationForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAnimationForKey:");
}

id objc_msgSend_removeDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDevice:");
}

id objc_msgSend_removeEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEventHandler:");
}

id objc_msgSend_removeEventTap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEventTap:");
}

id objc_msgSend_removeFingersToPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFingersToPoint:onDisplay:");
}

id objc_msgSend_removeFromParentViewController(void *a1, const char *a2, ...)
{
  return _[a1 removeFromParentViewController];
}

id objc_msgSend_removeFromRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFromRunLoop:forMode:");
}

id objc_msgSend_removeFromSuperlayer(void *a1, const char *a2, ...)
{
  return _[a1 removeFromSuperlayer];
}

id objc_msgSend_removeFromSuperview(void *a1, const char *a2, ...)
{
  return _[a1 removeFromSuperview];
}

id objc_msgSend_removeGlobalMouseEventsForDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeGlobalMouseEventsForDisplayID:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeNotificationObserverAndDealloc(void *a1, const char *a2, ...)
{
  return _[a1 removeNotificationObserverAndDealloc];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removePointerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePointerAtIndex:");
}

id objc_msgSend_removePointerPointPickerForMovementNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePointerPointPickerForMovementNotifications:");
}

id objc_msgSend_removePointerStreamObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePointerStreamObserver:");
}

id objc_msgSend_removeReachabilityHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeReachabilityHandler:");
}

id objc_msgSend_removeReasonToDisableScanning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeReasonToDisableScanning:");
}

id objc_msgSend_removeReasonToEnableSoftwareKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeReasonToEnableSoftwareKeyboard:");
}

id objc_msgSend_removeTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTarget:action:forControlEvents:");
}

id objc_msgSend_removeUserInterfaceClientEnabler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeUserInterfaceClientEnabler:");
}

id objc_msgSend_repeatActionInterval(void *a1, const char *a2, ...)
{
  return _[a1 repeatActionInterval];
}

id objc_msgSend_repeatMouseKeyMovementAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repeatMouseKeyMovementAction:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replayGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replayGesture:");
}

id objc_msgSend_representationWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "representationWithData:");
}

id objc_msgSend_representationWithHIDEvent_hidStreamIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "representationWithHIDEvent:hidStreamIdentifier:");
}

id objc_msgSend_requestDismissJindo(void *a1, const char *a2, ...)
{
  return _[a1 requestDismissJindo];
}

id objc_msgSend_requestGlobalMouseEventsForDisplay_displayID_targetContextID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestGlobalMouseEventsForDisplay:displayID:targetContextID:");
}

id objc_msgSend_requestGlobalMouseEventsForDisplay_targetContextID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestGlobalMouseEventsForDisplay:targetContextID:");
}

id objc_msgSend_resetActivation(void *a1, const char *a2, ...)
{
  return _[a1 resetActivation];
}

id objc_msgSend_resetDimTimer(void *a1, const char *a2, ...)
{
  return _[a1 resetDimTimer];
}

id objc_msgSend_resetElementFetcher(void *a1, const char *a2, ...)
{
  return _[a1 resetElementFetcher];
}

id objc_msgSend_resetEventManager(void *a1, const char *a2, ...)
{
  return _[a1 resetEventManager];
}

id objc_msgSend_resetFingersIfActiveOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetFingersIfActiveOnDisplay:");
}

id objc_msgSend_resetFingersIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 resetFingersIfNeeded];
}

id objc_msgSend_resetFingersIfNeededOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetFingersIfNeededOnDisplay:");
}

id objc_msgSend_resetFingersToPoint_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetFingersToPoint:onDisplay:");
}

id objc_msgSend_resetFingersToPoint_onDisplay_active_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetFingersToPoint:onDisplay:active:");
}

id objc_msgSend_resetGazeEnrollment(void *a1, const char *a2, ...)
{
  return _[a1 resetGazeEnrollment];
}

id objc_msgSend_resetImages(void *a1, const char *a2, ...)
{
  return _[a1 resetImages];
}

id objc_msgSend_resetInternalState(void *a1, const char *a2, ...)
{
  return _[a1 resetInternalState];
}

id objc_msgSend_resetLineLayer(void *a1, const char *a2, ...)
{
  return _[a1 resetLineLayer];
}

id objc_msgSend_resetNubbitLocation(void *a1, const char *a2, ...)
{
  return _[a1 resetNubbitLocation];
}

id objc_msgSend_resetOrbAction(void *a1, const char *a2, ...)
{
  return _[a1 resetOrbAction];
}

id objc_msgSend_resetPinchFingers(void *a1, const char *a2, ...)
{
  return _[a1 resetPinchFingers];
}

id objc_msgSend_resetPinchFingersOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetPinchFingersOnDisplay:");
}

id objc_msgSend_resetRefinedSelectedPoint(void *a1, const char *a2, ...)
{
  return _[a1 resetRefinedSelectedPoint];
}

id objc_msgSend_resizableImageWithCapInsets_resizingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resizableImageWithCapInsets:resizingMode:");
}

id objc_msgSend_resizeTrackpadWithDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resizeTrackpadWithDelta:");
}

id objc_msgSend_resolvedImage(void *a1, const char *a2, ...)
{
  return _[a1 resolvedImage];
}

id objc_msgSend_resourcePath(void *a1, const char *a2, ...)
{
  return _[a1 resourcePath];
}

id objc_msgSend_respondsToUserInteraction(void *a1, const char *a2, ...)
{
  return _[a1 respondsToUserInteraction];
}

id objc_msgSend_restartDeviceDetection(void *a1, const char *a2, ...)
{
  return _[a1 restartDeviceDetection];
}

id objc_msgSend_restartEverything(void *a1, const char *a2, ...)
{
  return _[a1 restartEverything];
}

id objc_msgSend_restartWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restartWithCompletion:");
}

id objc_msgSend_restingFillColor(void *a1, const char *a2, ...)
{
  return _[a1 restingFillColor];
}

id objc_msgSend_restingStrokeColor(void *a1, const char *a2, ...)
{
  return _[a1 restingStrokeColor];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_resumeAutoscanning(void *a1, const char *a2, ...)
{
  return _[a1 resumeAutoscanning];
}

id objc_msgSend_resumeAutoscanning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeAutoscanning:");
}

id objc_msgSend_resumeBubbleModeForSpecialUsageToolIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 resumeBubbleModeForSpecialUsageToolIfNecessary];
}

id objc_msgSend_resumeEyeTrackingAutoHideForSpecialUsageToolIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 resumeEyeTrackingAutoHideForSpecialUsageToolIfNecessary];
}

id objc_msgSend_resumeScanning(void *a1, const char *a2, ...)
{
  return _[a1 resumeScanning];
}

id objc_msgSend_returnControlToForwarderDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "returnControlToForwarderDevice:");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_reversedAnimation(void *a1, const char *a2, ...)
{
  return _[a1 reversedAnimation];
}

id objc_msgSend_rightAnchor(void *a1, const char *a2, ...)
{
  return _[a1 rightAnchor];
}

id objc_msgSend_rightMostLeafAXElement(void *a1, const char *a2, ...)
{
  return _[a1 rightMostLeafAXElement];
}

id objc_msgSend_rightThumbstick(void *a1, const char *a2, ...)
{
  return _[a1 rightThumbstick];
}

id objc_msgSend_ringerSwitchChanged(void *a1, const char *a2, ...)
{
  return _[a1 ringerSwitchChanged];
}

id objc_msgSend_rocker(void *a1, const char *a2, ...)
{
  return _[a1 rocker];
}

id objc_msgSend_rockerFrame(void *a1, const char *a2, ...)
{
  return _[a1 rockerFrame];
}

id objc_msgSend_rockerHitTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rockerHitTest:");
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return _[a1 role];
}

id objc_msgSend_roleForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roleForElement:");
}

id objc_msgSend_rootGroup(void *a1, const char *a2, ...)
{
  return _[a1 rootGroup];
}

id objc_msgSend_rootKeyboardGroup(void *a1, const char *a2, ...)
{
  return _[a1 rootKeyboardGroup];
}

id objc_msgSend_rootScannerGroup(void *a1, const char *a2, ...)
{
  return _[a1 rootScannerGroup];
}

id objc_msgSend_rootSheet(void *a1, const char *a2, ...)
{
  return _[a1 rootSheet];
}

id objc_msgSend_rotate90CCWItem(void *a1, const char *a2, ...)
{
  return _[a1 rotate90CCWItem];
}

id objc_msgSend_rotate90CWItem(void *a1, const char *a2, ...)
{
  return _[a1 rotate90CWItem];
}

id objc_msgSend_rotate90ClockwiseButton(void *a1, const char *a2, ...)
{
  return _[a1 rotate90ClockwiseButton];
}

id objc_msgSend_rotate90ClockwiseForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotate90ClockwiseForFreehandSheet:");
}

id objc_msgSend_rotate90CounterclockwiseButton(void *a1, const char *a2, ...)
{
  return _[a1 rotate90CounterclockwiseButton];
}

id objc_msgSend_rotate90CounterclockwiseForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotate90CounterclockwiseForFreehandSheet:");
}

id objc_msgSend_rotate90Item(void *a1, const char *a2, ...)
{
  return _[a1 rotate90Item];
}

id objc_msgSend_rotateCCWItem(void *a1, const char *a2, ...)
{
  return _[a1 rotateCCWItem];
}

id objc_msgSend_rotateCWItem(void *a1, const char *a2, ...)
{
  return _[a1 rotateCWItem];
}

id objc_msgSend_rotateClockwiseControl(void *a1, const char *a2, ...)
{
  return _[a1 rotateClockwiseControl];
}

id objc_msgSend_rotateClockwiseForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotateClockwiseForFreehandSheet:");
}

id objc_msgSend_rotateCounterclockwiseControl(void *a1, const char *a2, ...)
{
  return _[a1 rotateCounterclockwiseControl];
}

id objc_msgSend_rotateCounterclockwiseForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotateCounterclockwiseForFreehandSheet:");
}

id objc_msgSend_rotateForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotateForFreehandSheet:");
}

id objc_msgSend_rotateItems(void *a1, const char *a2, ...)
{
  return _[a1 rotateItems];
}

id objc_msgSend_rotateLeft(void *a1, const char *a2, ...)
{
  return _[a1 rotateLeft];
}

id objc_msgSend_rotateMenuItemWithPreferredNumberOfLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotateMenuItemWithPreferredNumberOfLines:");
}

id objc_msgSend_rotatePortrait(void *a1, const char *a2, ...)
{
  return _[a1 rotatePortrait];
}

id objc_msgSend_rotateRight(void *a1, const char *a2, ...)
{
  return _[a1 rotateRight];
}

id objc_msgSend_rotateUpsideDown(void *a1, const char *a2, ...)
{
  return _[a1 rotateUpsideDown];
}

id objc_msgSend_rotation90ControlFont(void *a1, const char *a2, ...)
{
  return _[a1 rotation90ControlFont];
}

id objc_msgSend_rotation90ControlNearestRadius(void *a1, const char *a2, ...)
{
  return _[a1 rotation90ControlNearestRadius];
}

id objc_msgSend_rotationControlAngleAwayFromMidAngle(void *a1, const char *a2, ...)
{
  return _[a1 rotationControlAngleAwayFromMidAngle];
}

id objc_msgSend_rotationControlCurveRadius(void *a1, const char *a2, ...)
{
  return _[a1 rotationControlCurveRadius];
}

id objc_msgSend_rotationControlLength(void *a1, const char *a2, ...)
{
  return _[a1 rotationControlLength];
}

id objc_msgSend_rotationLockChanged(void *a1, const char *a2, ...)
{
  return _[a1 rotationLockChanged];
}

id objc_msgSend_roundedRectBezierPath_withRoundedEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roundedRectBezierPath:withRoundedEdges:");
}

id objc_msgSend_runServerOnCurrentThread(void *a1, const char *a2, ...)
{
  return _[a1 runServerOnCurrentThread];
}

id objc_msgSend_runningPropertyAnimatorWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runningPropertyAnimatorWithDuration:delay:options:animations:completion:");
}

id objc_msgSend_safeAreaInsets(void *a1, const char *a2, ...)
{
  return _[a1 safeAreaInsets];
}

id objc_msgSend_safeAreaLayoutGuide(void *a1, const char *a2, ...)
{
  return _[a1 safeAreaLayoutGuide];
}

id objc_msgSend_safeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeIntegerForKey:");
}

id objc_msgSend_safeStringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeStringForKey:");
}

id objc_msgSend_safeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeValueForKey:");
}

id objc_msgSend_sc_deviceIconNameForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sc_deviceIconNameForIdentifier:");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _[a1 scale];
}

id objc_msgSend_scaledFontForFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaledFontForFont:");
}

id objc_msgSend_scaledValueForValue_compatibleWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaledValueForValue:compatibleWithTraitCollection:");
}

id objc_msgSend_scannerBackCursorView(void *a1, const char *a2, ...)
{
  return _[a1 scannerBackCursorView];
}

id objc_msgSend_scannerBlueColor(void *a1, const char *a2, ...)
{
  return _[a1 scannerBlueColor];
}

id objc_msgSend_scannerContentView(void *a1, const char *a2, ...)
{
  return _[a1 scannerContentView];
}

id objc_msgSend_scannerCursorOutlineThickness(void *a1, const char *a2, ...)
{
  return _[a1 scannerCursorOutlineThickness];
}

id objc_msgSend_scannerCursorThickness(void *a1, const char *a2, ...)
{
  return _[a1 scannerCursorThickness];
}

id objc_msgSend_scannerElementMatchingElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerElementMatchingElement:");
}

id objc_msgSend_scannerFrameForPointPickerCenterPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerFrameForPointPickerCenterPoint:");
}

id objc_msgSend_scannerFrameForPointPickerGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerFrameForPointPickerGroup:");
}

id objc_msgSend_scannerFrameForPointPickerSquare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerFrameForPointPickerSquare:");
}

id objc_msgSend_scannerFrontCursorView(void *a1, const char *a2, ...)
{
  return _[a1 scannerFrontCursorView];
}

id objc_msgSend_scannerManager_didActivateElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerManager:didActivateElement:");
}

id objc_msgSend_scannerManager_didFocusOnContext_oldContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerManager:didFocusOnContext:oldContext:");
}

id objc_msgSend_scannerManager_willFocusOnContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerManager:willFocusOnContext:");
}

id objc_msgSend_scannerManager_willUnfocusFromContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerManager:willUnfocusFromContext:");
}

id objc_msgSend_scannerManagerDidBecomeActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerManagerDidBecomeActive:");
}

id objc_msgSend_scannerManagerDidBecomeInactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerManagerDidBecomeInactive:");
}

id objc_msgSend_scannerManagerDidPause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerManagerDidPause:");
}

id objc_msgSend_scannerObservers(void *a1, const char *a2, ...)
{
  return _[a1 scannerObservers];
}

id objc_msgSend_scannerPathForPointPickerCenterPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerPathForPointPickerCenterPoint:");
}

id objc_msgSend_scannerType(void *a1, const char *a2, ...)
{
  return _[a1 scannerType];
}

id objc_msgSend_scannerWillMakeManagerActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWillMakeManagerActive:");
}

id objc_msgSend_scannerWillMakeManagerActive_forDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWillMakeManagerActive:forDisplayID:");
}

id objc_msgSend_scannerWillMakeManagerInactive_activeElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWillMakeManagerInactive:activeElementManager:");
}

id objc_msgSend_scanningBehaviorTraits(void *a1, const char *a2, ...)
{
  return _[a1 scanningBehaviorTraits];
}

id objc_msgSend_scanningInterruptsSpeech(void *a1, const char *a2, ...)
{
  return _[a1 scanningInterruptsSpeech];
}

id objc_msgSend_scanningMode(void *a1, const char *a2, ...)
{
  return _[a1 scanningMode];
}

id objc_msgSend_scanningStyles(void *a1, const char *a2, ...)
{
  return _[a1 scanningStyles];
}

id objc_msgSend_scatActivateBehavior(void *a1, const char *a2, ...)
{
  return _[a1 scatActivateBehavior];
}

id objc_msgSend_scatAlternateKeys(void *a1, const char *a2, ...)
{
  return _[a1 scatAlternateKeys];
}

id objc_msgSend_scatAutoscrollInDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scatAutoscrollInDirection:");
}

id objc_msgSend_scatAuxiliaryElementManager(void *a1, const char *a2, ...)
{
  return _[a1 scatAuxiliaryElementManager];
}

id objc_msgSend_scatBackCursorUIContext(void *a1, const char *a2, ...)
{
  return _[a1 scatBackCursorUIContext];
}

id objc_msgSend_scatBackCursorUIContextForDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scatBackCursorUIContextForDisplayID:");
}

id objc_msgSend_scatBeginScanningFromSelfAfterActivation(void *a1, const char *a2, ...)
{
  return _[a1 scatBeginScanningFromSelfAfterActivation];
}

id objc_msgSend_scatBluetoothDeviceWithDevice_accessoryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scatBluetoothDeviceWithDevice:accessoryManager:");
}

id objc_msgSend_scatCanScrollInAtLeastOneDirection(void *a1, const char *a2, ...)
{
  return _[a1 scatCanScrollInAtLeastOneDirection];
}

id objc_msgSend_scatCanShowAlternateKeys(void *a1, const char *a2, ...)
{
  return _[a1 scatCanShowAlternateKeys];
}

id objc_msgSend_scatCenterPoint(void *a1, const char *a2, ...)
{
  return _[a1 scatCenterPoint];
}

id objc_msgSend_scatCustomActions(void *a1, const char *a2, ...)
{
  return _[a1 scatCustomActions];
}

id objc_msgSend_scatCustomHardwareActions(void *a1, const char *a2, ...)
{
  return _[a1 scatCustomHardwareActions];
}

id objc_msgSend_scatDecreaseAutoscrollSpeed(void *a1, const char *a2, ...)
{
  return _[a1 scatDecreaseAutoscrollSpeed];
}

id objc_msgSend_scatDidBecomeFocused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scatDidBecomeFocused:");
}

id objc_msgSend_scatDisplayId(void *a1, const char *a2, ...)
{
  return _[a1 scatDisplayId];
}

id objc_msgSend_scatDrags(void *a1, const char *a2, ...)
{
  return _[a1 scatDrags];
}

id objc_msgSend_scatDrops(void *a1, const char *a2, ...)
{
  return _[a1 scatDrops];
}

id objc_msgSend_scatElement(void *a1, const char *a2, ...)
{
  return _[a1 scatElement];
}

id objc_msgSend_scatFrame(void *a1, const char *a2, ...)
{
  return _[a1 scatFrame];
}

id objc_msgSend_scatFrontCursorUIContext(void *a1, const char *a2, ...)
{
  return _[a1 scatFrontCursorUIContext];
}

id objc_msgSend_scatFrontCursorUIContextForDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scatFrontCursorUIContextForDisplayID:");
}

id objc_msgSend_scatHidesGroupCursorWhenFocused(void *a1, const char *a2, ...)
{
  return _[a1 scatHidesGroupCursorWhenFocused];
}

id objc_msgSend_scatIncreaseAutoscrollSpeed(void *a1, const char *a2, ...)
{
  return _[a1 scatIncreaseAutoscrollSpeed];
}

id objc_msgSend_scatIndicatesOwnFocus(void *a1, const char *a2, ...)
{
  return _[a1 scatIndicatesOwnFocus];
}

id objc_msgSend_scatIsAXElement(void *a1, const char *a2, ...)
{
  return _[a1 scatIsAXElement];
}

id objc_msgSend_scatIsAutoscrolling(void *a1, const char *a2, ...)
{
  return _[a1 scatIsAutoscrolling];
}

id objc_msgSend_scatIsAuxiliaryElement(void *a1, const char *a2, ...)
{
  return _[a1 scatIsAuxiliaryElement];
}

id objc_msgSend_scatIsKeyboardKey(void *a1, const char *a2, ...)
{
  return _[a1 scatIsKeyboardKey];
}

id objc_msgSend_scatIsMemberOfGroup(void *a1, const char *a2, ...)
{
  return _[a1 scatIsMemberOfGroup];
}

id objc_msgSend_scatIsValid(void *a1, const char *a2, ...)
{
  return _[a1 scatIsValid];
}

id objc_msgSend_scatLayer(void *a1, const char *a2, ...)
{
  return _[a1 scatLayer];
}

id objc_msgSend_scatMenuItemStyle(void *a1, const char *a2, ...)
{
  return _[a1 scatMenuItemStyle];
}

id objc_msgSend_scatOverrideCursorTheme(void *a1, const char *a2, ...)
{
  return _[a1 scatOverrideCursorTheme];
}

id objc_msgSend_scatPath(void *a1, const char *a2, ...)
{
  return _[a1 scatPath];
}

id objc_msgSend_scatPathIsInSceneReferenceSpace(void *a1, const char *a2, ...)
{
  return _[a1 scatPathIsInSceneReferenceSpace];
}

id objc_msgSend_scatPauseAutoscrolling(void *a1, const char *a2, ...)
{
  return _[a1 scatPauseAutoscrolling];
}

id objc_msgSend_scatPerformAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scatPerformAction:");
}

id objc_msgSend_scatPerformAction_withValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scatPerformAction:withValue:");
}

id objc_msgSend_scatPid(void *a1, const char *a2, ...)
{
  return _[a1 scatPid];
}

id objc_msgSend_scatScanningBehaviorTraits(void *a1, const char *a2, ...)
{
  return _[a1 scatScanningBehaviorTraits];
}

id objc_msgSend_scatScreenPointForOperations(void *a1, const char *a2, ...)
{
  return _[a1 scatScreenPointForOperations];
}

id objc_msgSend_scatScrollToTop(void *a1, const char *a2, ...)
{
  return _[a1 scatScrollToTop];
}

id objc_msgSend_scatScrollToVisible(void *a1, const char *a2, ...)
{
  return _[a1 scatScrollToVisible];
}

id objc_msgSend_scatShouldActivateDirectly(void *a1, const char *a2, ...)
{
  return _[a1 scatShouldActivateDirectly];
}

id objc_msgSend_scatShouldAllowDeferFocusToNativeFocusedElement(void *a1, const char *a2, ...)
{
  return _[a1 scatShouldAllowDeferFocusToNativeFocusedElement];
}

id objc_msgSend_scatShouldSuppressAudioOutput(void *a1, const char *a2, ...)
{
  return _[a1 scatShouldSuppressAudioOutput];
}

id objc_msgSend_scatSpeakableDescription(void *a1, const char *a2, ...)
{
  return _[a1 scatSpeakableDescription];
}

id objc_msgSend_scatSpeakableDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scatSpeakableDescription:");
}

id objc_msgSend_scatSupportedGestures(void *a1, const char *a2, ...)
{
  return _[a1 scatSupportedGestures];
}

id objc_msgSend_scatSupportsAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scatSupportsAction:");
}

id objc_msgSend_scatTextCursorFrame(void *a1, const char *a2, ...)
{
  return _[a1 scatTextCursorFrame];
}

id objc_msgSend_scatTraits(void *a1, const char *a2, ...)
{
  return _[a1 scatTraits];
}

id objc_msgSend_scatUIContext(void *a1, const char *a2, ...)
{
  return _[a1 scatUIContext];
}

id objc_msgSend_scatUIContextForDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scatUIContextForDisplayID:");
}

id objc_msgSend_scatUpdateValue(void *a1, const char *a2, ...)
{
  return _[a1 scatUpdateValue];
}

id objc_msgSend_scatUpdatesMenu(void *a1, const char *a2, ...)
{
  return _[a1 scatUpdatesMenu];
}

id objc_msgSend_scatValue(void *a1, const char *a2, ...)
{
  return _[a1 scatValue];
}

id objc_msgSend_scat_cachedMenuImageForImageName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scat_cachedMenuImageForImageName:");
}

id objc_msgSend_scat_setCachedMenuImage_forImageName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scat_setCachedMenuImage:forImageName:");
}

id objc_msgSend_scat_singleCharacterImageForTitle_charactersInUse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scat_singleCharacterImageForTitle:charactersInUse:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:repeats:block:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_screen(void *a1, const char *a2, ...)
{
  return _[a1 screen];
}

id objc_msgSend_screenBounds(void *a1, const char *a2, ...)
{
  return _[a1 screenBounds];
}

id objc_msgSend_screenBoundsForRockerButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenBoundsForRockerButton:");
}

id objc_msgSend_screenChangingButtonWasPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenChangingButtonWasPressed:");
}

id objc_msgSend_screenDidChange_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenDidChange:data:");
}

id objc_msgSend_screenInputSource(void *a1, const char *a2, ...)
{
  return _[a1 screenInputSource];
}

id objc_msgSend_screenPoint(void *a1, const char *a2, ...)
{
  return _[a1 screenPoint];
}

id objc_msgSend_screenWillChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "screenWillChange:");
}

id objc_msgSend_screenshotDidFire(void *a1, const char *a2, ...)
{
  return _[a1 screenshotDidFire];
}

id objc_msgSend_screenshotWillFire(void *a1, const char *a2, ...)
{
  return _[a1 screenshotWillFire];
}

id objc_msgSend_scrollAccelAmount(void *a1, const char *a2, ...)
{
  return _[a1 scrollAccelAmount];
}

id objc_msgSend_scrollAction(void *a1, const char *a2, ...)
{
  return _[a1 scrollAction];
}

id objc_msgSend_scrollAmount(void *a1, const char *a2, ...)
{
  return _[a1 scrollAmount];
}

id objc_msgSend_scrollAncestorForScrollAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollAncestorForScrollAction:");
}

id objc_msgSend_scrollAreaToShowOverride(void *a1, const char *a2, ...)
{
  return _[a1 scrollAreaToShowOverride];
}

id objc_msgSend_scrollAxis(void *a1, const char *a2, ...)
{
  return _[a1 scrollAxis];
}

id objc_msgSend_scrollContainer_scrollInDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollContainer:scrollInDirection:");
}

id objc_msgSend_scrollDelegate(void *a1, const char *a2, ...)
{
  return _[a1 scrollDelegate];
}

id objc_msgSend_scrollDirection(void *a1, const char *a2, ...)
{
  return _[a1 scrollDirection];
}

id objc_msgSend_scrollDirectionToActivationFrame(void *a1, const char *a2, ...)
{
  return _[a1 scrollDirectionToActivationFrame];
}

id objc_msgSend_scrollDownView(void *a1, const char *a2, ...)
{
  return _[a1 scrollDownView];
}

id objc_msgSend_scrollElement(void *a1, const char *a2, ...)
{
  return _[a1 scrollElement];
}

id objc_msgSend_scrollEvent(void *a1, const char *a2, ...)
{
  return _[a1 scrollEvent];
}

id objc_msgSend_scrollGestureFromPoint_toPoint_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollGestureFromPoint:toPoint:duration:");
}

id objc_msgSend_scrollGestureRecognizer(void *a1, const char *a2, ...)
{
  return _[a1 scrollGestureRecognizer];
}

id objc_msgSend_scrollItems(void *a1, const char *a2, ...)
{
  return _[a1 scrollItems];
}

id objc_msgSend_scrollLeftView(void *a1, const char *a2, ...)
{
  return _[a1 scrollLeftView];
}

id objc_msgSend_scrollRightView(void *a1, const char *a2, ...)
{
  return _[a1 scrollRightView];
}

id objc_msgSend_scrollToBottom(void *a1, const char *a2, ...)
{
  return _[a1 scrollToBottom];
}

id objc_msgSend_scrollToTop(void *a1, const char *a2, ...)
{
  return _[a1 scrollToTop];
}

id objc_msgSend_scrollToVisible(void *a1, const char *a2, ...)
{
  return _[a1 scrollToVisible];
}

id objc_msgSend_scrollUpView(void *a1, const char *a2, ...)
{
  return _[a1 scrollUpView];
}

id objc_msgSend_scrollView(void *a1, const char *a2, ...)
{
  return _[a1 scrollView];
}

id objc_msgSend_scrollViewController_showHorizontalScrollerForContextElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollViewController:showHorizontalScrollerForContextElement:");
}

id objc_msgSend_scrollViewController_showVerticalScrollerForContextElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollViewController:showVerticalScrollerForContextElement:");
}

id objc_msgSend_scrollViewPickerManager(void *a1, const char *a2, ...)
{
  return _[a1 scrollViewPickerManager];
}

id objc_msgSend_scrollViews(void *a1, const char *a2, ...)
{
  return _[a1 scrollViews];
}

id objc_msgSend_scrollViewsForAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollViewsForAction:");
}

id objc_msgSend_scrollViewsForAction_elementsToScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollViewsForAction:elementsToScroll:");
}

id objc_msgSend_scrollViewsForAutoScroll(void *a1, const char *a2, ...)
{
  return _[a1 scrollViewsForAutoScroll];
}

id objc_msgSend_scrollableElement(void *a1, const char *a2, ...)
{
  return _[a1 scrollableElement];
}

id objc_msgSend_scrollerConstraints(void *a1, const char *a2, ...)
{
  return _[a1 scrollerConstraints];
}

id objc_msgSend_scrollerContainerView(void *a1, const char *a2, ...)
{
  return _[a1 scrollerContainerView];
}

id objc_msgSend_scrollerElements(void *a1, const char *a2, ...)
{
  return _[a1 scrollerElements];
}

id objc_msgSend_scrollerElementsForContextElement(void *a1, const char *a2, ...)
{
  return _[a1 scrollerElementsForContextElement];
}

id objc_msgSend_scrollerGroups(void *a1, const char *a2, ...)
{
  return _[a1 scrollerGroups];
}

id objc_msgSend_scrollerGroupsForContextElement(void *a1, const char *a2, ...)
{
  return _[a1 scrollerGroupsForContextElement];
}

id objc_msgSend_scrollerSize(void *a1, const char *a2, ...)
{
  return _[a1 scrollerSize];
}

id objc_msgSend_scrollingBlockedOnElementRefresh(void *a1, const char *a2, ...)
{
  return _[a1 scrollingBlockedOnElementRefresh];
}

id objc_msgSend_scrollingSpeedFactorForOrientedPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollingSpeedFactorForOrientedPoint:");
}

id objc_msgSend_search(void *a1, const char *a2, ...)
{
  return _[a1 search];
}

id objc_msgSend_searchResult(void *a1, const char *a2, ...)
{
  return _[a1 searchResult];
}

id objc_msgSend_searchResults(void *a1, const char *a2, ...)
{
  return _[a1 searchResults];
}

id objc_msgSend_secondPath(void *a1, const char *a2, ...)
{
  return _[a1 secondPath];
}

id objc_msgSend_secondaryButton(void *a1, const char *a2, ...)
{
  return _[a1 secondaryButton];
}

id objc_msgSend_selectActionHandler(void *a1, const char *a2, ...)
{
  return _[a1 selectActionHandler];
}

id objc_msgSend_selectAndResumeAutoscanningActionHandler(void *a1, const char *a2, ...)
{
  return _[a1 selectAndResumeAutoscanningActionHandler];
}

id objc_msgSend_selectBehavior(void *a1, const char *a2, ...)
{
  return _[a1 selectBehavior];
}

id objc_msgSend_selectElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectElement:");
}

id objc_msgSend_selectElementAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectElementAtPoint:");
}

id objc_msgSend_selectSearchResult_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectSearchResult:settings:");
}

id objc_msgSend_selectWordOrNoneItem(void *a1, const char *a2, ...)
{
  return _[a1 selectWordOrNoneItem];
}

id objc_msgSend_selected(void *a1, const char *a2, ...)
{
  return _[a1 selected];
}

id objc_msgSend_selectedFillColor(void *a1, const char *a2, ...)
{
  return _[a1 selectedFillColor];
}

id objc_msgSend_selectedStrokeColor(void *a1, const char *a2, ...)
{
  return _[a1 selectedStrokeColor];
}

id objc_msgSend_selectedTextRange(void *a1, const char *a2, ...)
{
  return _[a1 selectedTextRange];
}

id objc_msgSend_selectionForLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectionForLanguage:");
}

id objc_msgSend_selectionModeOn(void *a1, const char *a2, ...)
{
  return _[a1 selectionModeOn];
}

id objc_msgSend_selectionModeToggleItem(void *a1, const char *a2, ...)
{
  return _[a1 selectionModeToggleItem];
}

id objc_msgSend_selectionPath(void *a1, const char *a2, ...)
{
  return _[a1 selectionPath];
}

id objc_msgSend_sendActionsForControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendActionsForControlEvents:");
}

id objc_msgSend_sendAsynchronousMessage_withIdentifier_targetAccessQueue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAsynchronousMessage:withIdentifier:targetAccessQueue:completion:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendGestureHandEventAtPoints_pointTwo_handEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGestureHandEventAtPoints:pointTwo:handEventType:");
}

id objc_msgSend_sendHIDSystemEvent_repostCreatorHIDEvent_senderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendHIDSystemEvent:repostCreatorHIDEvent:senderID:");
}

id objc_msgSend_sendHIDSystemEvent_senderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendHIDSystemEvent:senderID:");
}

id objc_msgSend_sendSubviewToBack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSubviewToBack:");
}

id objc_msgSend_senderID(void *a1, const char *a2, ...)
{
  return _[a1 senderID];
}

id objc_msgSend_sensitivityForFacialExpression_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sensitivityForFacialExpression:");
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _[a1 server];
}

id objc_msgSend_serverInstance(void *a1, const char *a2, ...)
{
  return _[a1 serverInstance];
}

id objc_msgSend_serviceID(void *a1, const char *a2, ...)
{
  return _[a1 serviceID];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAXAttribute_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withString:");
}

id objc_msgSend_setAccessibilityData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityData:");
}

id objc_msgSend_setAccessibilityEventInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityEventInputSource:");
}

id objc_msgSend_setAccessibilityEventUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityEventUsage:");
}

id objc_msgSend_setAccessibilityEventUsagePage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityEventUsagePage:");
}

id objc_msgSend_setAccessibilityIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityIdentifier:");
}

id objc_msgSend_setAccessibilityIgnoresInvertColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityIgnoresInvertColors:");
}

id objc_msgSend_setAccessibilityLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityLabel:");
}

id objc_msgSend_setAccessibilityObservers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityObservers:");
}

id objc_msgSend_setAccessibilityTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityTraits:");
}

id objc_msgSend_setAccessibilityValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityValue:");
}

id objc_msgSend_setAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAction:");
}

id objc_msgSend_setActionCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionCount:");
}

id objc_msgSend_setActionIdentifiersToRecipeMappingIndices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionIdentifiersToRecipeMappingIndices:");
}

id objc_msgSend_setActionOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionOverride:");
}

id objc_msgSend_setActionReceiver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionReceiver:");
}

id objc_msgSend_setActionToStop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionToStop:");
}

id objc_msgSend_setActionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionType:");
}

id objc_msgSend_setActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActions:");
}

id objc_msgSend_setActivateActionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivateActionHandler:");
}

id objc_msgSend_setActivateBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivateBehavior:");
}

id objc_msgSend_setActivateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivateHandler:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActive_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:withOptions:error:");
}

id objc_msgSend_setActiveContinuousScroller_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveContinuousScroller:");
}

id objc_msgSend_setActiveElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveElementManager:");
}

id objc_msgSend_setActiveElementManager_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveElementManager:completion:");
}

id objc_msgSend_setActiveScannerDriver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveScannerDriver:");
}

id objc_msgSend_setActivityIndicatorView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityIndicatorView:");
}

id objc_msgSend_setAdjustsFontForContentSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustsFontForContentSizeCategory:");
}

id objc_msgSend_setAdjustsFontSizeToFitWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustsFontSizeToFitWidth:");
}

id objc_msgSend_setAirPodsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAirPodsSource:");
}

id objc_msgSend_setAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlignment:");
}

id objc_msgSend_setAllowedTrackingTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedTrackingTypes:");
}

id objc_msgSend_setAllowsContinuousInteraction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsContinuousInteraction:");
}

id objc_msgSend_setAllowsDwellScanningToAbortAfterTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsDwellScanningToAbortAfterTimeout:");
}

id objc_msgSend_setAllowsGroupBlending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsGroupBlending:");
}

id objc_msgSend_setAllowsGroupOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsGroupOpacity:");
}

id objc_msgSend_setAllowsHitTesting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsHitTesting:");
}

id objc_msgSend_setAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlpha:");
}

id objc_msgSend_setAlternateKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternateKeys:");
}

id objc_msgSend_setAlternateKeysManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternateKeysManager:");
}

id objc_msgSend_setAlwaysDiscardsLateVideoFrames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysDiscardsLateVideoFrames:");
}

id objc_msgSend_setAlwaysShowMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysShowMenu:");
}

id objc_msgSend_setAngle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAngle:");
}

id objc_msgSend_setAnimationKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimationKey:");
}

id objc_msgSend_setAnimationsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimationsEnabled:");
}

id objc_msgSend_setAppSwitcherButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppSwitcherButton:");
}

id objc_msgSend_setAppearanceDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppearanceDelegate:");
}

id objc_msgSend_setApplePayButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplePayButton:");
}

id objc_msgSend_setAreFingersPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAreFingersPressed:");
}

id objc_msgSend_setArrowView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArrowView:");
}

id objc_msgSend_setAssistiveTouchActionRepeatEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchActionRepeatEnabled:");
}

id objc_msgSend_setAssistiveTouchActionRepeatInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchActionRepeatInterval:");
}

id objc_msgSend_setAssistiveTouchBubbleModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchBubbleModeEnabled:");
}

id objc_msgSend_setAssistiveTouchDelayAfterInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchDelayAfterInput:");
}

id objc_msgSend_setAssistiveTouchDelayAfterInputEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchDelayAfterInputEnabled:");
}

id objc_msgSend_setAssistiveTouchEyeTrackingAutoHideEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchEyeTrackingAutoHideEnabled:");
}

id objc_msgSend_setAssistiveTouchGroupElementsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchGroupElementsEnabled:");
}

id objc_msgSend_setAssistiveTouchInputCoalescingDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchInputCoalescingDuration:");
}

id objc_msgSend_setAssistiveTouchInputCoalescingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchInputCoalescingEnabled:");
}

id objc_msgSend_setAssistiveTouchInputHoldDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchInputHoldDuration:");
}

id objc_msgSend_setAssistiveTouchInputHoldEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchInputHoldEnabled:");
}

id objc_msgSend_setAssistiveTouchLongPressDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchLongPressDuration:");
}

id objc_msgSend_setAssistiveTouchLongPressEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchLongPressEnabled:");
}

id objc_msgSend_setAssistiveTouchMainScreenCustomization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchMainScreenCustomization:");
}

id objc_msgSend_setAssistiveTouchMouseDwellControlActivationTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchMouseDwellControlActivationTimeout:");
}

id objc_msgSend_setAssistiveTouchMouseDwellControlAutorevertEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchMouseDwellControlAutorevertEnabled:");
}

id objc_msgSend_setAssistiveTouchMouseDwellControlEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchMouseDwellControlEnabled:");
}

id objc_msgSend_setAssistiveTouchMouseDwellControlMutatedMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchMouseDwellControlMutatedMenu:");
}

id objc_msgSend_setAssistiveTouchMouseDwellControlShowPrompt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchMouseDwellControlShowPrompt:");
}

id objc_msgSend_setAssistiveTouchMouseKeysEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchMouseKeysEnabled:");
}

id objc_msgSend_setAssistiveTouchMousePointerTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchMousePointerTimeout:");
}

id objc_msgSend_setAssistiveTouchMousePointerTimeoutEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchMousePointerTimeoutEnabled:");
}

id objc_msgSend_setAssistiveTouchPreferredPointPicker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchPreferredPointPicker:");
}

id objc_msgSend_setAssistiveTouchRecentGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchRecentGestures:");
}

id objc_msgSend_setAssistiveTouchSavedGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchSavedGestures:");
}

id objc_msgSend_setAssistiveTouchScanCycles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchScanCycles:");
}

id objc_msgSend_setAssistiveTouchScanTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchScanTimeout:");
}

id objc_msgSend_setAssistiveTouchScannerAddedTripleClickAutomatically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchScannerAddedTripleClickAutomatically:");
}

id objc_msgSend_setAssistiveTouchScannerCursorHighVisibilityEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchScannerCursorHighVisibilityEnabled:");
}

id objc_msgSend_setAssistiveTouchScannerSoundEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchScannerSoundEnabled:");
}

id objc_msgSend_setAssistiveTouchScannerSpeechEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchScannerSpeechEnabled:");
}

id objc_msgSend_setAssistiveTouchScanningMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchScanningMode:");
}

id objc_msgSend_setAssistiveTouchStepInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchStepInterval:");
}

id objc_msgSend_setAssistiveTouchSwitchUsageConfirmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchSwitchUsageConfirmed:");
}

id objc_msgSend_setAssistiveTouchSwitches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchSwitches:");
}

id objc_msgSend_setAssistiveTouchUsageCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchUsageCount:");
}

id objc_msgSend_setAssistiveTouchVirtualTrackpadEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssistiveTouchVirtualTrackpadEnabled:");
}

id objc_msgSend_setAttributedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributedText:");
}

id objc_msgSend_setAtvRemoteInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAtvRemoteInputSource:");
}

id objc_msgSend_setAudioSessionCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioSessionCategory:");
}

id objc_msgSend_setAudioSessionCategoryOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioSessionCategoryOptions:");
}

id objc_msgSend_setAutoHideTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoHideTimeout:");
}

id objc_msgSend_setAutoScanningDriver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoScanningDriver:");
}

id objc_msgSend_setAutoScanningInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoScanningInterval:");
}

id objc_msgSend_setAutoTapTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoTapTimeout:");
}

id objc_msgSend_setAutomaticallyCancelPendingBlockUponSchedulingNewBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomaticallyCancelPendingBlockUponSchedulingNewBlock:");
}

id objc_msgSend_setAutoresizesSubviews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoresizesSubviews:");
}

id objc_msgSend_setAutoresizingMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoresizingMask:");
}

id objc_msgSend_setAutoscrollSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoscrollSpeed:");
}

id objc_msgSend_setAutoscrollTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoscrollTarget:");
}

id objc_msgSend_setAutoscroller_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoscroller:");
}

id objc_msgSend_setAuxiliaryElementManagers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuxiliaryElementManagers:");
}

id objc_msgSend_setAvailabilityDetail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAvailabilityDetail:");
}

id objc_msgSend_setAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAvailable:");
}

id objc_msgSend_setAvailableButtons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAvailableButtons:");
}

id objc_msgSend_setAxManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAxManager:");
}

id objc_msgSend_setAxOrbPreviewWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAxOrbPreviewWindow:");
}

id objc_msgSend_setAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAxis:");
}

id objc_msgSend_setAxisContainerView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAxisContainerView:");
}

id objc_msgSend_setBackButtonConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackButtonConstraints:");
}

id objc_msgSend_setBackdropMaskImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackdropMaskImage:");
}

id objc_msgSend_setBackgroundBorderImageView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundBorderImageView:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setBackgroundView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundView:");
}

id objc_msgSend_setBaselineAdjustment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaselineAdjustment:");
}

id objc_msgSend_setBeginScanningTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeginScanningTimer:");
}

id objc_msgSend_setBeginTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeginTime:");
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBool:forKey:");
}

id objc_msgSend_setBoolValue_forSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBoolValue:forSetting:");
}

id objc_msgSend_setBorderColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderColor:");
}

id objc_msgSend_setBorderLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderLayer:");
}

id objc_msgSend_setBorderOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderOpacity:");
}

id objc_msgSend_setBorderWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderWidth:");
}

id objc_msgSend_setBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBounds:");
}

id objc_msgSend_setBoundsInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBoundsInset:");
}

id objc_msgSend_setBubbleCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBubbleCursor:");
}

id objc_msgSend_setBubbleCursorController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBubbleCursorController:");
}

id objc_msgSend_setBubbleModeBlockedOnElementRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBubbleModeBlockedOnElementRefresh:");
}

id objc_msgSend_setBubbleModeCurrentlyFocusedOnNubbit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBubbleModeCurrentlyFocusedOnNubbit:");
}

id objc_msgSend_setBubbleModeFocusedRockerItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBubbleModeFocusedRockerItem:");
}

id objc_msgSend_setBubbleModeFrameToElementMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBubbleModeFrameToElementMapping:");
}

id objc_msgSend_setBufferSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBufferSize:");
}

id objc_msgSend_setButtonDownStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButtonDownStartTime:");
}

id objc_msgSend_setButtonMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButtonMask:");
}

id objc_msgSend_setButtonMask_forSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButtonMask:forSenderID:");
}

id objc_msgSend_setButtonNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButtonNumber:");
}

id objc_msgSend_setButtonsByMedusaGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setButtonsByMedusaGesture:");
}

id objc_msgSend_setCachedCameraPointPickerSwitches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedCameraPointPickerSwitches:");
}

id objc_msgSend_setCachedHasShownHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedHasShownHint:");
}

id objc_msgSend_setCachedToleranceRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedToleranceRadius:");
}

id objc_msgSend_setCameraIntrinsicMatrixDeliveryEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCameraIntrinsicMatrixDeliveryEnabled:");
}

id objc_msgSend_setCancelGestureActivation_cancelEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelGestureActivation:cancelEnabled:");
}

id objc_msgSend_setCancelHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelHandler:");
}

id objc_msgSend_setCandidateBarManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCandidateBarManager:");
}

id objc_msgSend_setCaptureEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaptureEvents:");
}

id objc_msgSend_setCaptureOutputPreview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaptureOutputPreview:");
}

id objc_msgSend_setCaptureOutputQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaptureOutputQueue:");
}

id objc_msgSend_setCaptureSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaptureSession:");
}

id objc_msgSend_setCaptureVideoPreviewLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaptureVideoPreviewLayer:");
}

id objc_msgSend_setCategory_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategory:withOptions:error:");
}

id objc_msgSend_setCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenter:");
}

id objc_msgSend_setCenterPointVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenterPointVisible:");
}

id objc_msgSend_setClipsToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClipsToBounds:");
}

id objc_msgSend_setClockwise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClockwise:");
}

id objc_msgSend_setCollectionViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionViewController:");
}

id objc_msgSend_setCollectionViewLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionViewLayout:");
}

id objc_msgSend_setColorTintMaskImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setColorTintMaskImage:");
}

id objc_msgSend_setCompletionCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionCallback:");
}

id objc_msgSend_setCompositingFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompositingFilter:");
}

id objc_msgSend_setCompositingLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompositingLayer:");
}

id objc_msgSend_setConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfiguration:");
}

id objc_msgSend_setConfirmationSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfirmationSheet:");
}

id objc_msgSend_setConnectionListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionListener:");
}

id objc_msgSend_setConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConstant:");
}

id objc_msgSend_setContainerView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerView:");
}

id objc_msgSend_setContainingGroupCursorController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainingGroupCursorController:");
}

id objc_msgSend_setContentCompressionResistancePriority_forAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentCompressionResistancePriority:forAxis:");
}

id objc_msgSend_setContentHuggingPriority_forAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentHuggingPriority:forAxis:");
}

id objc_msgSend_setContentMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentMode:");
}

id objc_msgSend_setContentOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentOffset:");
}

id objc_msgSend_setContentView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentView:");
}

id objc_msgSend_setContentViewConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentViewConstraints:");
}

id objc_msgSend_setContentViewContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentViewContainer:");
}

id objc_msgSend_setContextElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextElement:");
}

id objc_msgSend_setContextID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextID:");
}

id objc_msgSend_setContextIDs_forHitTestContextCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextIDs:forHitTestContextCategory:");
}

id objc_msgSend_setContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextId:");
}

id objc_msgSend_setContextRelativePointerPosition_onDisplay_withAnimationParameters_restrictingToPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextRelativePointerPosition:onDisplay:withAnimationParameters:restrictingToPID:");
}

id objc_msgSend_setContinueHighlightAfterTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContinueHighlightAfterTouch:");
}

id objc_msgSend_setContinuousScrollCurrentSpeedFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContinuousScrollCurrentSpeedFactor:");
}

id objc_msgSend_setContinuousScrollLock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContinuousScrollLock:");
}

id objc_msgSend_setContinuousScrollMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContinuousScrollMode:");
}

id objc_msgSend_setContinuousScrollPickedElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContinuousScrollPickedElement:");
}

id objc_msgSend_setContinuousScrollerGenerationQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContinuousScrollerGenerationQueue:");
}

id objc_msgSend_setControlDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlDelegate:");
}

id objc_msgSend_setCornerCurve_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCornerCurve:");
}

id objc_msgSend_setCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCornerRadius:");
}

id objc_msgSend_setCurrentAbsoluteSystemPointerPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentAbsoluteSystemPointerPoint:");
}

id objc_msgSend_setCurrentAbsoluteSystemPointerPoint_withAttributes_pointerAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentAbsoluteSystemPointerPoint:withAttributes:pointerAttributes:");
}

id objc_msgSend_setCurrentAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentAction:");
}

id objc_msgSend_setCurrentApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentApplications:");
}

id objc_msgSend_setCurrentAuxiliaryElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentAuxiliaryElementManager:");
}

id objc_msgSend_setCurrentBubbleModeFocusedElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentBubbleModeFocusedElement:");
}

id objc_msgSend_setCurrentContinuousScrollDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentContinuousScrollDirection:");
}

id objc_msgSend_setCurrentCycleCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCycleCount:");
}

id objc_msgSend_setCurrentDeviceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentDeviceOrientation:");
}

id objc_msgSend_setCurrentDisplayContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentDisplayContext:");
}

id objc_msgSend_setCurrentDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentDisplayID:");
}

id objc_msgSend_setCurrentFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentFocusContext:");
}

id objc_msgSend_setCurrentGameController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentGameController:");
}

id objc_msgSend_setCurrentHoldPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentHoldPoint:");
}

id objc_msgSend_setCurrentKeyForAlternates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentKeyForAlternates:");
}

id objc_msgSend_setCurrentLeftXDisplacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentLeftXDisplacement:");
}

id objc_msgSend_setCurrentLeftYDisplacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentLeftYDisplacement:");
}

id objc_msgSend_setCurrentPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPage:");
}

id objc_msgSend_setCurrentPageIndicatorTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPageIndicatorTintColor:");
}

id objc_msgSend_setCurrentPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPoint:");
}

id objc_msgSend_setCurrentRecipe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentRecipe:");
}

id objc_msgSend_setCurrentRightXDisplacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentRightXDisplacement:");
}

id objc_msgSend_setCurrentRightYDisplacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentRightYDisplacement:");
}

id objc_msgSend_setCurrentSelectionPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSelectionPath:");
}

id objc_msgSend_setCurrentSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSheet:");
}

id objc_msgSend_setCurrentSpeechFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSpeechFocusContext:");
}

id objc_msgSend_setCurrentSwitchController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSwitchController:");
}

id objc_msgSend_setCurrentSystemPointerHardwareIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSystemPointerHardwareIdentifier:");
}

id objc_msgSend_setCurrentSystemPointerPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSystemPointerPoint:");
}

id objc_msgSend_setCurrentXDisplacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentXDisplacement:");
}

id objc_msgSend_setCurrentYDisplacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentYDisplacement:");
}

id objc_msgSend_setCurrentlyObservingNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentlyObservingNotifications:");
}

id objc_msgSend_setCurrentlySelectedKeyboardRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentlySelectedKeyboardRow:");
}

id objc_msgSend_setCurrentlySelectingKeyboardKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentlySelectingKeyboardKey:");
}

id objc_msgSend_setCurrentlyTappingAndHolding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentlyTappingAndHolding:");
}

id objc_msgSend_setCursorBackgroundLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorBackgroundLayer:");
}

id objc_msgSend_setCursorColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorColor:");
}

id objc_msgSend_setCursorCompositingLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorCompositingLayer:");
}

id objc_msgSend_setCursorContainerLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorContainerLayer:");
}

id objc_msgSend_setCursorForegroundLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorForegroundLayer:");
}

id objc_msgSend_setCursorManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorManager:");
}

id objc_msgSend_setCursorSizes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorSizes:");
}

id objc_msgSend_setCursorUIHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorUIHidden:");
}

id objc_msgSend_setCurvature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurvature:");
}

id objc_msgSend_setCustomGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomGesture:");
}

id objc_msgSend_setCustomGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomGestures:");
}

id objc_msgSend_setCustomTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomTitle:");
}

id objc_msgSend_setDark_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDark:");
}

id objc_msgSend_setDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSource:");
}

id objc_msgSend_setDebugBuild_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebugBuild:");
}

id objc_msgSend_setDefaultActionForButtonNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultActionForButtonNumber:");
}

id objc_msgSend_setDefaultBackgroundImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultBackgroundImage:");
}

id objc_msgSend_setDelayedPickedPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelayedPickedPoint:");
}

id objc_msgSend_setDelaysTouchesBegan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelaysTouchesBegan:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:queue:");
}

id objc_msgSend_setDeltaX_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaX:");
}

id objc_msgSend_setDeltaY_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaY:");
}

id objc_msgSend_setDetectDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectDevices:");
}

id objc_msgSend_setDidActivate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidActivate:");
}

id objc_msgSend_setDidActivateElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidActivateElement:");
}

id objc_msgSend_setDidPauseForReasonsToDisableScanning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidPauseForReasonsToDisableScanning:");
}

id objc_msgSend_setDidSetFocusContextForResume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidSetFocusContextForResume:");
}

id objc_msgSend_setDimmedBackgroundImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDimmedBackgroundImage:");
}

id objc_msgSend_setDimmedIconImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDimmedIconImage:");
}

id objc_msgSend_setDisableActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableActions:");
}

id objc_msgSend_setDisableControlCenterAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableControlCenterAssertion:");
}

id objc_msgSend_setDisableDashBoardGesturesAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableDashBoardGesturesAssertion:");
}

id objc_msgSend_setDisableIdleTimerAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableIdleTimerAssertion:");
}

id objc_msgSend_setDisableNotificationCenterAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableNotificationCenterAssertion:");
}

id objc_msgSend_setDisableSystemGesturesAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableSystemGesturesAssertion:");
}

id objc_msgSend_setDisableUpdateMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableUpdateMask:");
}

id objc_msgSend_setDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisabled:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayID:");
}

id objc_msgSend_setDisplayManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayManager:");
}

id objc_msgSend_setDisplaySourceDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplaySourceDelegate:");
}

id objc_msgSend_setDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistance:");
}

id objc_msgSend_setDockIconActivationMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDockIconActivationMode:");
}

id objc_msgSend_setDockPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDockPosition:");
}

id objc_msgSend_setDockSpecificButtons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDockSpecificButtons:");
}

id objc_msgSend_setDockStyleAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDockStyleAttributes:");
}

id objc_msgSend_setDownBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownBlock:");
}

id objc_msgSend_setDragManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDragManager:");
}

id objc_msgSend_setDrawBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDrawBackground:");
}

id objc_msgSend_setDuckScalarForVoiceOver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckScalarForVoiceOver:");
}

id objc_msgSend_setDuckToLevelScalar_unduckToLevelScalar_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckToLevelScalar:unduckToLevelScalar:error:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setDwellBubbleModeCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDwellBubbleModeCompletionBlock:");
}

id objc_msgSend_setDwellBubbleModeTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDwellBubbleModeTimer:");
}

id objc_msgSend_setDwellControlAutorevertEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDwellControlAutorevertEnabled:");
}

id objc_msgSend_setDwellControlPaused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDwellControlPaused:");
}

id objc_msgSend_setDwellDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDwellDuration:");
}

id objc_msgSend_setDwellItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDwellItems:");
}

id objc_msgSend_setDwellMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDwellMode:");
}

id objc_msgSend_setDwellScanningDriver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDwellScanningDriver:");
}

id objc_msgSend_setDwellSwitchAssigned_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDwellSwitchAssigned:");
}

id objc_msgSend_setDwellTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDwellTimer:");
}

id objc_msgSend_setElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElement:");
}

id objc_msgSend_setElementCommunityGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementCommunityGroup:");
}

id objc_msgSend_setElementFetchQueueTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementFetchQueueTimer:");
}

id objc_msgSend_setElementFetcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementFetcher:");
}

id objc_msgSend_setElementFinderTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementFinderTimer:");
}

id objc_msgSend_setElementGroupingHeuristics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementGroupingHeuristics:");
}

id objc_msgSend_setElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementManager:");
}

id objc_msgSend_setElementNavController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementNavController:");
}

id objc_msgSend_setElementProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementProvider:");
}

id objc_msgSend_setElementProviderDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementProviderDelegate:");
}

id objc_msgSend_setElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElements:");
}

id objc_msgSend_setElementsToScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementsToScroll:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEndPointForLineGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndPointForLineGesture:");
}

id objc_msgSend_setEventHandlers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventHandlers:");
}

id objc_msgSend_setEventManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventManager:");
}

id objc_msgSend_setEventProcessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventProcessor:");
}

id objc_msgSend_setEventTapPriority_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventTapPriority:priority:");
}

id objc_msgSend_setExpressionConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpressionConfiguration:");
}

id objc_msgSend_setEyeTrackingAutoHideCursorAnimator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEyeTrackingAutoHideCursorAnimator:");
}

id objc_msgSend_setEyeTrackingAutoHideEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEyeTrackingAutoHideEnabled:");
}

id objc_msgSend_setEyeTrackingAutoHideFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEyeTrackingAutoHideFinished:");
}

id objc_msgSend_setEyeTrackingAutoHideTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEyeTrackingAutoHideTimeout:");
}

id objc_msgSend_setEyeTrackingAutotHideLastBubbleModeElementShowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEyeTrackingAutotHideLastBubbleModeElementShowed:");
}

id objc_msgSend_setEyeTrackingAutotHideLastPointCursorShowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEyeTrackingAutotHideLastPointCursorShowed:");
}

id objc_msgSend_setFace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFace:");
}

id objc_msgSend_setFaceLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFaceLayer:");
}

id objc_msgSend_setFadeDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFadeDelay:");
}

id objc_msgSend_setFallbackActionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFallbackActionBlock:");
}

id objc_msgSend_setFallbackScrollDownAncestor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFallbackScrollDownAncestor:");
}

id objc_msgSend_setFallbackScrollLeftAncestor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFallbackScrollLeftAncestor:");
}

id objc_msgSend_setFallbackScrollRightAncestor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFallbackScrollRightAncestor:");
}

id objc_msgSend_setFallbackScrollUpAncestor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFallbackScrollUpAncestor:");
}

id objc_msgSend_setFill(void *a1, const char *a2, ...)
{
  return _[a1 setFill];
}

id objc_msgSend_setFillColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillColor:");
}

id objc_msgSend_setFillMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillMode:");
}

id objc_msgSend_setFillRule_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillRule:");
}

id objc_msgSend_setFilterMaskImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilterMaskImage:");
}

id objc_msgSend_setFingerContentViewIsActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerContentViewIsActive:");
}

id objc_msgSend_setFingerContentViewIsActive_withDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerContentViewIsActive:withDuration:");
}

id objc_msgSend_setFingerContentViewIsActive_withDuration_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerContentViewIsActive:withDuration:options:");
}

id objc_msgSend_setFingerController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerController:");
}

id objc_msgSend_setFingerPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerPositions:");
}

id objc_msgSend_setFingersDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingersDown:");
}

id objc_msgSend_setFingersHighlighted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingersHighlighted:");
}

id objc_msgSend_setFingersPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingersPressed:");
}

id objc_msgSend_setFirstInSequence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstInSequence:");
}

id objc_msgSend_setFirstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstResponder:");
}

id objc_msgSend_setFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusContext:");
}

id objc_msgSend_setFocusContextForResume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusContextForResume:");
}

id objc_msgSend_setFocusTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusTimer:");
}

id objc_msgSend_setFocused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocused:");
}

id objc_msgSend_setFocusedItemCursorController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusedItemCursorController:");
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFont:");
}

id objc_msgSend_setFontMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFontMetrics:");
}

id objc_msgSend_setFooterView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFooterView:");
}

id objc_msgSend_setForceDisableScreenLock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceDisableScreenLock:");
}

id objc_msgSend_setForcePause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForcePause:");
}

id objc_msgSend_setForegroundImageAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundImageAction:");
}

id objc_msgSend_setForegroundLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForegroundLayer:");
}

id objc_msgSend_setForwardDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForwardDirection:");
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:");
}

id objc_msgSend_setFrameForToolbar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrameForToolbar:");
}

id objc_msgSend_setFromValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromValue:");
}

id objc_msgSend_setFullMenuVisible_atPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullMenuVisible:atPoint:");
}

id objc_msgSend_setFullScreen(void *a1, const char *a2, ...)
{
  return _[a1 setFullScreen];
}

id objc_msgSend_setFullScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullScreen:");
}

id objc_msgSend_setGamepadInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGamepadInputSource:");
}

id objc_msgSend_setGeneralTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneralTimer:");
}

id objc_msgSend_setGestureDrawingView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGestureDrawingView:");
}

id objc_msgSend_setGestureProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGestureProvider:");
}

id objc_msgSend_setGesturesButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGesturesButton:");
}

id objc_msgSend_setGlyphCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlyphCharacter:");
}

id objc_msgSend_setGlyphColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlyphColor:");
}

id objc_msgSend_setGrayscaleTintMaskImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGrayscaleTintMaskImage:");
}

id objc_msgSend_setGroupVisualScrollersAuxElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupVisualScrollersAuxElementManager:");
}

id objc_msgSend_setGroupVisualScrollersEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupVisualScrollersEnabled:");
}

id objc_msgSend_setGroupingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupingEnabled:");
}

id objc_msgSend_setHIDEventFilterMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHIDEventFilterMask:");
}

id objc_msgSend_setHIDEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHIDEventHandler:");
}

id objc_msgSend_setHandGestureSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandGestureSource:");
}

id objc_msgSend_setHandManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandManager:");
}

id objc_msgSend_setHandlerWithTarget_selector_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandlerWithTarget:selector:forKey:");
}

id objc_msgSend_setHandlerWithTarget_selector_forKey_possibleRequiredEntitlements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandlerWithTarget:selector:forKey:possibleRequiredEntitlements:");
}

id objc_msgSend_setHardwareIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHardwareIdentifier:");
}

id objc_msgSend_setHardwareItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHardwareItems:");
}

id objc_msgSend_setHasActivatedScrollSinceContextUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasActivatedScrollSinceContextUpdate:");
}

id objc_msgSend_setHasLocalizableName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasLocalizableName:");
}

id objc_msgSend_setHeadGestureSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeadGestureSource:");
}

id objc_msgSend_setHidDeviceSentReservedStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidDeviceSentReservedStatus:");
}

id objc_msgSend_setHidManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidManager:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHidePointerForEyeTrackingAutoHide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidePointerForEyeTrackingAutoHide:");
}

id objc_msgSend_setHidesForSinglePage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidesForSinglePage:");
}

id objc_msgSend_setHighContrast_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighContrast:");
}

id objc_msgSend_setHighVisBackgroundAndIconImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighVisBackgroundAndIconImage:");
}

id objc_msgSend_setHighlighted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighlighted:");
}

id objc_msgSend_setHighlightedTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighlightedTextColor:");
}

id objc_msgSend_setHitTestCategoryAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHitTestCategoryAssertion:");
}

id objc_msgSend_setHoldDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHoldDuration:");
}

id objc_msgSend_setHorizontalContinuousScrollers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorizontalContinuousScrollers:");
}

id objc_msgSend_setHorizontalScroller_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorizontalScroller:");
}

id objc_msgSend_setHudView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHudView:");
}

id objc_msgSend_setHyphenationFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHyphenationFactor:");
}

id objc_msgSend_setIconImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconImage:");
}

id objc_msgSend_setIconImageAngle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconImageAngle:");
}

id objc_msgSend_setIconImageView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIconImageView:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIgnoreRepeatDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreRepeatDuration:");
}

id objc_msgSend_setIgnoringInputs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoringInputs:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setImageName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageName:");
}

id objc_msgSend_setImagePrefixForTouchDependentGlyph_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImagePrefixForTouchDependentGlyph:");
}

id objc_msgSend_setInBubbleMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInBubbleMode:");
}

id objc_msgSend_setInactiveAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInactiveAlpha:");
}

id objc_msgSend_setInitialItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialItems:");
}

id objc_msgSend_setInitialized_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialized:");
}

id objc_msgSend_setInputConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputConfiguration:");
}

id objc_msgSend_setInputController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputController:");
}

id objc_msgSend_setInputHoldTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputHoldTimer:");
}

id objc_msgSend_setInputRepeatTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputRepeatTimer:");
}

id objc_msgSend_setInterDeviceInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterDeviceInputSource:");
}

id objc_msgSend_setIsAccessibilityElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAccessibilityElement:");
}

id objc_msgSend_setIsActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsActive:");
}

id objc_msgSend_setIsActive_withDuration_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsActive:withDuration:options:");
}

id objc_msgSend_setIsActivelyScrollingContinuously_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsActivelyScrollingContinuously:");
}

id objc_msgSend_setIsBackButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsBackButton:");
}

id objc_msgSend_setIsControlArrow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsControlArrow:");
}

id objc_msgSend_setIsCurving_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCurving:");
}

id objc_msgSend_setIsDark_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDark:");
}

id objc_msgSend_setIsDwellActionPendingButtonUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDwellActionPendingButtonUp:");
}

id objc_msgSend_setIsEmptyFavorite_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsEmptyFavorite:");
}

id objc_msgSend_setIsEyeTrackingEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsEyeTrackingEvent:");
}

id objc_msgSend_setIsFlashing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFlashing:");
}

id objc_msgSend_setIsGamepadEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsGamepadEvent:");
}

id objc_msgSend_setIsInputCoalesceEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInputCoalesceEnabled:");
}

id objc_msgSend_setIsInputHoldEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInputHoldEnabled:");
}

id objc_msgSend_setIsInputRepeatEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInputRepeatEnabled:");
}

id objc_msgSend_setIsMainDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMainDisplay:");
}

id objc_msgSend_setIsModalDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsModalDown:");
}

id objc_msgSend_setIsOnDeviceEyeTrackingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOnDeviceEyeTrackingEnabled:");
}

id objc_msgSend_setIsPausingScanning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPausingScanning:");
}

id objc_msgSend_setIsPendingFingerLiftForPrimaryButtonPressUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPendingFingerLiftForPrimaryButtonPressUp:");
}

id objc_msgSend_setIsPinching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPinching:");
}

id objc_msgSend_setIsPoppingToPreviousViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPoppingToPreviousViewController:");
}

id objc_msgSend_setIsPushingConfirmationSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPushingConfirmationSheet:");
}

id objc_msgSend_setIsReadyForSelect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsReadyForSelect:");
}

id objc_msgSend_setIsRotating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsRotating:");
}

id objc_msgSend_setIsTrackingInputActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsTrackingInputActive:");
}

id objc_msgSend_setIsVirtualTrackpadEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsVirtualTrackpadEvent:");
}

id objc_msgSend_setIsVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsVisible:");
}

id objc_msgSend_setIsWaitingToBePresented_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsWaitingToBePresented:");
}

id objc_msgSend_setItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItem:");
}

id objc_msgSend_setItemMenuState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemMenuState:");
}

id objc_msgSend_setItemSpacingLandscape_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemSpacingLandscape:");
}

id objc_msgSend_setItemSpacingPortrait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemSpacingPortrait:");
}

id objc_msgSend_setJoystickModeMovementThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setJoystickModeMovementThreshold:");
}

id objc_msgSend_setKeyboardFencingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardFencingEnabled:");
}

id objc_msgSend_setKeyboardIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardIndexPath:");
}

id objc_msgSend_setKeyboardInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardInputSource:");
}

id objc_msgSend_setKeyboardKeyCenterPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardKeyCenterPoint:");
}

id objc_msgSend_setKeyboardSelectBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardSelectBehavior:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLanguage:");
}

id objc_msgSend_setLastAppTransitionTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAppTransitionTime:");
}

id objc_msgSend_setLastBubbleModeDwellElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastBubbleModeDwellElement:");
}

id objc_msgSend_setLastBubbleModeDwellRockerItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastBubbleModeDwellRockerItem:");
}

id objc_msgSend_setLastBubbleModeDwellWasOnNubbit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastBubbleModeDwellWasOnNubbit:");
}

id objc_msgSend_setLastBubbleModeFocusedElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastBubbleModeFocusedElement:");
}

id objc_msgSend_setLastDwellStartPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastDwellStartPoint:");
}

id objc_msgSend_setLastMenuItemActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMenuItemActivated:");
}

id objc_msgSend_setLastMoveWasMouse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMoveWasMouse:");
}

id objc_msgSend_setLastScannedElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastScannedElementCommunity:");
}

id objc_msgSend_setLastSetOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSetOptions:");
}

id objc_msgSend_setLastTimeElementFetcherRefreshed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTimeElementFetcherRefreshed:");
}

id objc_msgSend_setLastTimeEyeTrackerConfigured_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTimeEyeTrackerConfigured:");
}

id objc_msgSend_setLastTimeHitTestedForBubbleMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTimeHitTestedForBubbleMode:");
}

id objc_msgSend_setLastTimeMouseMoved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTimeMouseMoved:");
}

id objc_msgSend_setLeftHeadSwitchDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftHeadSwitchDown:");
}

id objc_msgSend_setLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLevel:");
}

id objc_msgSend_setLiftsOnMoveEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLiftsOnMoveEnd:");
}

id objc_msgSend_setLineBreakMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineBreakMode:");
}

id objc_msgSend_setLineCap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineCap:");
}

id objc_msgSend_setLineColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineColor:");
}

id objc_msgSend_setLineDashPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineDashPattern:");
}

id objc_msgSend_setLineGestureState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineGestureState:");
}

id objc_msgSend_setLineGestureType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineGestureType:");
}

id objc_msgSend_setLineJoin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineJoin:");
}

id objc_msgSend_setLineLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineLayer:");
}

id objc_msgSend_setLineThickness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineThickness:");
}

id objc_msgSend_setLineWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineWidth:");
}

id objc_msgSend_setListenForMouseKeyToggle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListenForMouseKeyToggle:");
}

id objc_msgSend_setLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation:");
}

id objc_msgSend_setLockedToDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLockedToDisplayID:");
}

id objc_msgSend_setLongPressAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongPressAction:");
}

id objc_msgSend_setLongPressActionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongPressActionIdentifier:");
}

id objc_msgSend_setLongPressActionIdentifiersToRecipeMappingIndices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongPressActionIdentifiersToRecipeMappingIndices:");
}

id objc_msgSend_setLongPressDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongPressDuration:");
}

id objc_msgSend_setLongPressTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongPressTimer:");
}

id objc_msgSend_setLookAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLookAtPoint:");
}

id objc_msgSend_setManualScanningDriver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManualScanningDriver:");
}

id objc_msgSend_setManufacturerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManufacturerName:");
}

id objc_msgSend_setMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMask:");
}

id objc_msgSend_setMaskView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaskView:");
}

id objc_msgSend_setMasksToBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMasksToBounds:");
}

id objc_msgSend_setMaxItemsPerRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxItemsPerRow:");
}

id objc_msgSend_setMaxRows_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxRows:");
}

id objc_msgSend_setMaximumContentSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumContentSizeCategory:");
}

id objc_msgSend_setMaximumLineHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumLineHeight:");
}

id objc_msgSend_setMaximumNumberOfTouches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaximumNumberOfTouches:");
}

id objc_msgSend_setMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenu:");
}

id objc_msgSend_setMenuBorderPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuBorderPath:");
}

id objc_msgSend_setMenuElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuElement:");
}

id objc_msgSend_setMenuItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuItem:");
}

id objc_msgSend_setMenuItemCursorController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuItemCursorController:");
}

id objc_msgSend_setMenuItemGroupName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuItemGroupName:");
}

id objc_msgSend_setMenuItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuItems:");
}

id objc_msgSend_setMenuObservers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuObservers:");
}

id objc_msgSend_setMenuOpeningAuxElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuOpeningAuxElementManager:");
}

id objc_msgSend_setMenuOpeningElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuOpeningElement:");
}

id objc_msgSend_setMenuOpeningElementEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuOpeningElementEnabled:");
}

id objc_msgSend_setMenuSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuSheet:");
}

id objc_msgSend_setMenuSheetStack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuSheetStack:");
}

id objc_msgSend_setMenuVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuVisible:");
}

id objc_msgSend_setMenuVisualProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMenuVisualProvider:");
}

id objc_msgSend_setMessagingCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessagingCenter:");
}

id objc_msgSend_setMetadataObjectTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadataObjectTypes:");
}

id objc_msgSend_setMetadataObjectsDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetadataObjectsDelegate:queue:");
}

id objc_msgSend_setMfiInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMfiInputSource:");
}

id objc_msgSend_setMidiInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMidiInputSource:");
}

id objc_msgSend_setMinimumContentSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumContentSizeCategory:");
}

id objc_msgSend_setMinimumLineHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumLineHeight:");
}

id objc_msgSend_setMinimumNumberOfTouches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumNumberOfTouches:");
}

id objc_msgSend_setMinimumPressDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumPressDuration:");
}

id objc_msgSend_setMinimumScaleFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumScaleFactor:");
}

id objc_msgSend_setMoreButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMoreButton:");
}

id objc_msgSend_setMoreItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMoreItems:");
}

id objc_msgSend_setMoreItemsPageControl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMoreItemsPageControl:");
}

id objc_msgSend_setMotionTrackerDelayedHideAlertTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionTrackerDelayedHideAlertTimer:");
}

id objc_msgSend_setMotionTrackerDelayedShowAlertTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionTrackerDelayedShowAlertTimer:");
}

id objc_msgSend_setMotionTrackerErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionTrackerErrorCode:");
}

id objc_msgSend_setMotionTrackerInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionTrackerInputSource:");
}

id objc_msgSend_setMotionTrackerLostFace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionTrackerLostFace:");
}

id objc_msgSend_setMotionTrackingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionTrackingEnabled:");
}

id objc_msgSend_setMotionTrackingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionTrackingMode:");
}

id objc_msgSend_setMouseBehavesLikeFinger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMouseBehavesLikeFinger:");
}

id objc_msgSend_setMouseKeysEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMouseKeysEnabled:");
}

id objc_msgSend_setMousePointerAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMousePointerAppearance:");
}

id objc_msgSend_setMoveGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMoveGestureRecognizer:");
}

id objc_msgSend_setMoveTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMoveTimer:");
}

id objc_msgSend_setMultiTouchToolBackgroundEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMultiTouchToolBackgroundEnabled:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNativeFocus(void *a1, const char *a2, ...)
{
  return _[a1 setNativeFocus];
}

id objc_msgSend_setNaturalScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNaturalScroll:");
}

id objc_msgSend_setNeedsDisplay(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsDisplay];
}

id objc_msgSend_setNeedsFocusUpdate(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsFocusUpdate];
}

id objc_msgSend_setNeedsLayout(void *a1, const char *a2, ...)
{
  return _[a1 setNeedsLayout];
}

id objc_msgSend_setNeedsRecalibration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsRecalibration:");
}

id objc_msgSend_setNeedsToShowZoomWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsToShowZoomWindow:");
}

id objc_msgSend_setNormalizedHorizontalTipCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNormalizedHorizontalTipCenter:");
}

id objc_msgSend_setNotificationObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationObserver:");
}

id objc_msgSend_setNotificationObserverQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationObserverQueue:");
}

id objc_msgSend_setNubbitMoving_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNubbitMoving:");
}

id objc_msgSend_setNubbitVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNubbitVisible:");
}

id objc_msgSend_setNumberOfColumns_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfColumns:");
}

id objc_msgSend_setNumberOfLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfLines:");
}

id objc_msgSend_setNumberOfPages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfPages:");
}

id objc_msgSend_setNumberOfPresses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfPresses:");
}

id objc_msgSend_setNumberOfScanLoops_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfScanLoops:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObserver:");
}

id objc_msgSend_setOnDeviceEyeTrackingQuitCurrentAppTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnDeviceEyeTrackingQuitCurrentAppTimer:");
}

id objc_msgSend_setOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpacity:");
}

id objc_msgSend_setOpaque_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpaque:");
}

id objc_msgSend_setOpenMenuWithSwaggle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpenMenuWithSwaggle:");
}

id objc_msgSend_setOrderedInputPreference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrderedInputPreference:");
}

id objc_msgSend_setOrientation_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientation:withCompletion:");
}

id objc_msgSend_setOrientationLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientationLocked:");
}

id objc_msgSend_setOutlineColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutlineColor:");
}

id objc_msgSend_setOutlineThickness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutlineThickness:");
}

id objc_msgSend_setOutputManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputManager:");
}

id objc_msgSend_setOverflowFrames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverflowFrames:");
}

id objc_msgSend_setOverrideImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideImage:");
}

id objc_msgSend_setOverrideProcessName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideProcessName:");
}

id objc_msgSend_setOverrideUserInterfaceStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideUserInterfaceStyle:");
}

id objc_msgSend_setPageIndicatorTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPageIndicatorTintColor:");
}

id objc_msgSend_setPanFingerPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPanFingerPositions:");
}

id objc_msgSend_setParentGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParentGroup:");
}

id objc_msgSend_setPassivelyListeningForEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassivelyListeningForEvents:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPauseOnFirstItemInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPauseOnFirstItemInterval:");
}

id objc_msgSend_setPersistentSwitchIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentSwitchIdentifiers:");
}

id objc_msgSend_setPickerPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPickerPhase:");
}

id objc_msgSend_setPickerViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPickerViewController:");
}

id objc_msgSend_setPinchAngle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPinchAngle:");
}

id objc_msgSend_setPinchFingerOriginalPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPinchFingerOriginalPositions:");
}

id objc_msgSend_setPinchFulcrum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPinchFulcrum:");
}

id objc_msgSend_setPinchGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPinchGestureRecognizer:");
}

id objc_msgSend_setPinchRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPinchRadius:");
}

id objc_msgSend_setPitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPitch:");
}

id objc_msgSend_setPointPicker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointPicker:");
}

id objc_msgSend_setPointerMoveGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointerMoveGestureRecognizer:");
}

id objc_msgSend_setPointerSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointerSpeed:");
}

id objc_msgSend_setPointerStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointerStream:");
}

id objc_msgSend_setPopoverPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPopoverPosition:");
}

id objc_msgSend_setPopoverStyleAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPopoverStyleAttributes:");
}

id objc_msgSend_setPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPosition:");
}

id objc_msgSend_setPositionRelativeToContextElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPositionRelativeToContextElement:");
}

id objc_msgSend_setPostActivationScanLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPostActivationScanLocations:");
}

id objc_msgSend_setPostTransitionUpdateBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPostTransitionUpdateBlock:");
}

id objc_msgSend_setPreference_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreference:forKey:");
}

id objc_msgSend_setPreferredFrameRateRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredFrameRateRange:");
}

id objc_msgSend_setPreferredNumberOfTitleLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredNumberOfTitleLines:");
}

id objc_msgSend_setPresentHUDViewTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresentHUDViewTimer:");
}

id objc_msgSend_setPressGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressGestureRecognizer:");
}

id objc_msgSend_setPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressed:");
}

id objc_msgSend_setPressed_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressed:animated:");
}

id objc_msgSend_setPressedBackgroundBorderImageView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressedBackgroundBorderImageView:");
}

id objc_msgSend_setPressedBackgroundImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressedBackgroundImage:");
}

id objc_msgSend_setPressesOnMoveStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressesOnMoveStart:");
}

id objc_msgSend_setPreviewDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviewDistance:");
}

id objc_msgSend_setPreviousPrimaryButtonPressDownDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousPrimaryButtonPressDownDate:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProductName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductName:");
}

id objc_msgSend_setProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgress:");
}

id objc_msgSend_setProgressInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProgressInterval:");
}

id objc_msgSend_setPrompt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrompt:");
}

id objc_msgSend_setProviders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProviders:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setReachabilityButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachabilityButton:");
}

id objc_msgSend_setReachabilityOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachabilityOffset:");
}

id objc_msgSend_setRealPickedPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealPickedPoint:");
}

id objc_msgSend_setReasonsToDisableScanning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReasonsToDisableScanning:");
}

id objc_msgSend_setRecipe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecipe:");
}

id objc_msgSend_setRecipes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecipes:");
}

id objc_msgSend_setRemoteControlInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteControlInputSource:");
}

id objc_msgSend_setRemoteDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteDeviceIdentifier:");
}

id objc_msgSend_setRemoteDeviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteDeviceName:");
}

id objc_msgSend_setRemoteSwitchIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteSwitchIdentifier:");
}

id objc_msgSend_setRemovedOnCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemovedOnCompletion:");
}

id objc_msgSend_setRepeatActionInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepeatActionInterval:");
}

id objc_msgSend_setRestingFillColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestingFillColor:");
}

id objc_msgSend_setRestingStrokeColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestingStrokeColor:");
}

id objc_msgSend_setRightHeadSwitchDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightHeadSwitchDown:");
}

id objc_msgSend_setRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRole:");
}

id objc_msgSend_setRootScannerGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRootScannerGroup:");
}

id objc_msgSend_setRootViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRootViewController:");
}

id objc_msgSend_setRotate90CCWItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotate90CCWItem:");
}

id objc_msgSend_setRotate90CWItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotate90CWItem:");
}

id objc_msgSend_setRotate90Item_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotate90Item:");
}

id objc_msgSend_setRotateCCWItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotateCCWItem:");
}

id objc_msgSend_setRotateCWItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotateCWItem:");
}

id objc_msgSend_setRotateItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotateItems:");
}

id objc_msgSend_setSampleBufferDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSampleBufferDelegate:queue:");
}

id objc_msgSend_setScanningStyles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanningStyles:");
}

id objc_msgSend_setScatAssistiveTechFocused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScatAssistiveTechFocused:");
}

id objc_msgSend_setScatAutoscrollTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScatAutoscrollTarget:");
}

id objc_msgSend_setScatAuxiliaryElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScatAuxiliaryElementManager:");
}

id objc_msgSend_setScatElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScatElement:");
}

id objc_msgSend_setScatLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScatLayer:");
}

id objc_msgSend_setScatMenuItemStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScatMenuItemStyle:");
}

id objc_msgSend_setScatSpeakableDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScatSpeakableDescription:");
}

id objc_msgSend_setScreenInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenInputSource:");
}

id objc_msgSend_setScreenPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenPoint:");
}

id objc_msgSend_setScrollAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollAction:");
}

id objc_msgSend_setScrollAreaToShowOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollAreaToShowOverride:");
}

id objc_msgSend_setScrollDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollDelegate:");
}

id objc_msgSend_setScrollDirectionToActivationFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollDirectionToActivationFrame:");
}

id objc_msgSend_setScrollDownView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollDownView:");
}

id objc_msgSend_setScrollElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollElement:");
}

id objc_msgSend_setScrollGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollGestureRecognizer:");
}

id objc_msgSend_setScrollItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollItems:");
}

id objc_msgSend_setScrollLeftView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollLeftView:");
}

id objc_msgSend_setScrollRightView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollRightView:");
}

id objc_msgSend_setScrollSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollSpeed:");
}

id objc_msgSend_setScrollUpView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollUpView:");
}

id objc_msgSend_setScrollViewPickerManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollViewPickerManager:");
}

id objc_msgSend_setScrollViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollViews:");
}

id objc_msgSend_setScrollableElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollableElement:");
}

id objc_msgSend_setScrollerConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollerConstraints:");
}

id objc_msgSend_setScrollerContainerView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollerContainerView:");
}

id objc_msgSend_setScrollingBlockedOnElementRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScrollingBlockedOnElementRefresh:");
}

id objc_msgSend_setSearchObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchObserver:");
}

id objc_msgSend_setSearchResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchResult:");
}

id objc_msgSend_setSearchResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchResults:");
}

id objc_msgSend_setSectionInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectionInset:");
}

id objc_msgSend_setSelectActionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectActionHandler:");
}

id objc_msgSend_setSelectAndResumeAutoscanningActionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectAndResumeAutoscanningActionHandler:");
}

id objc_msgSend_setSelectBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectBehavior:");
}

id objc_msgSend_setSelectWordOrNoneItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectWordOrNoneItem:");
}

id objc_msgSend_setSelected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelected:");
}

id objc_msgSend_setSelectedTextRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedTextRange:");
}

id objc_msgSend_setSelectionModeOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectionModeOn:");
}

id objc_msgSend_setSelectionModeToggleItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectionModeToggleItem:");
}

id objc_msgSend_setSensitivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSensitivity:");
}

id objc_msgSend_setSensitivity_forFacialExpression_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSensitivity:forFacialExpression:");
}

id objc_msgSend_setSerialNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSerialNumber:");
}

id objc_msgSend_setServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServer:");
}

id objc_msgSend_setShadowColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowColor:");
}

id objc_msgSend_setShadowOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShadowOffset:");
}

id objc_msgSend_setShape_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShape:");
}

id objc_msgSend_setSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSheet:");
}

id objc_msgSend_setSheetViewControllerStack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSheetViewControllerStack:");
}

id objc_msgSend_setShortcut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShortcut:");
}

id objc_msgSend_setShortcutIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShortcutIdentifier:");
}

id objc_msgSend_setShouldAddRealEventFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAddRealEventFlag:");
}

id objc_msgSend_setShouldAllowFingersForContinuousGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAllowFingersForContinuousGesture:");
}

id objc_msgSend_setShouldBeTrackedByZoom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldBeTrackedByZoom:");
}

id objc_msgSend_setShouldClearFingerCircle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldClearFingerCircle:");
}

id objc_msgSend_setShouldDelayBeforePresentingHUDView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldDelayBeforePresentingHUDView:");
}

id objc_msgSend_setShouldDetectLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldDetectLanguage:");
}

id objc_msgSend_setShouldFlipForRTL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldFlipForRTL:");
}

id objc_msgSend_setShouldForciblyHideBackButtonForAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldForciblyHideBackButtonForAnimation:");
}

id objc_msgSend_setShouldIncludeBackItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldIncludeBackItem:");
}

id objc_msgSend_setShouldIncludeCenterPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldIncludeCenterPoint:");
}

id objc_msgSend_setShouldIncludeNonScannerElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldIncludeNonScannerElements:");
}

id objc_msgSend_setShouldIncludeTextLabels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldIncludeTextLabels:");
}

id objc_msgSend_setShouldKeepScannerAwake_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldKeepScannerAwake:");
}

id objc_msgSend_setShouldNotResetPointPickerRefinement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldNotResetPointPickerRefinement:");
}

id objc_msgSend_setShouldOffsetBufferPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldOffsetBufferPoints:");
}

id objc_msgSend_setShouldPerformAtOriginalLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPerformAtOriginalLocation:");
}

id objc_msgSend_setShouldPlayMenuSoundOnFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPlayMenuSoundOnFocus:");
}

id objc_msgSend_setShouldProcessEmoji_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldProcessEmoji:");
}

id objc_msgSend_setShouldRescanAfterFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldRescanAfterFetch:");
}

id objc_msgSend_setShouldRescanFromTopAfterFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldRescanFromTopAfterFetch:");
}

id objc_msgSend_setShouldResumeFromMenuDismissal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldResumeFromMenuDismissal:");
}

id objc_msgSend_setShouldRotate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldRotate:");
}

id objc_msgSend_setShouldRoundMenuCorners_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldRoundMenuCorners:");
}

id objc_msgSend_setShouldScanKeyboardOnAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldScanKeyboardOnAppearance:");
}

id objc_msgSend_setShouldScanToNextFocusContextAfterSpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldScanToNextFocusContextAfterSpeaking:");
}

id objc_msgSend_setShouldShowFingerOutlines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldShowFingerOutlines:");
}

id objc_msgSend_setShouldShowInnerCircle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldShowInnerCircle:");
}

id objc_msgSend_setShouldShowUncalibratedPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldShowUncalibratedPoints:");
}

id objc_msgSend_setShouldStop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldStop:");
}

id objc_msgSend_setShouldSuppressAudioOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSuppressAudioOutput:");
}

id objc_msgSend_setShouldUpdateZoomLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUpdateZoomLocation:");
}

id objc_msgSend_setShouldUseActivityIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUseActivityIndicator:");
}

id objc_msgSend_setShouldUseDockContentPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUseDockContentPadding:");
}

id objc_msgSend_setShowWithAssistiveAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowWithAssistiveAccess:");
}

id objc_msgSend_setShowWithGuidedAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowWithGuidedAccess:");
}

id objc_msgSend_setShowingFooterView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowingFooterView:");
}

id objc_msgSend_setShowsBottomBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsBottomBorder:");
}

id objc_msgSend_setShowsCurvatureControls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsCurvatureControls:");
}

id objc_msgSend_setShowsFooter_numberOfPagesRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsFooter:numberOfPagesRequired:");
}

id objc_msgSend_setShowsLeftBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsLeftBorder:");
}

id objc_msgSend_setShowsRightBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsRightBorder:");
}

id objc_msgSend_setShowsRotation90Controls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsRotation90Controls:");
}

id objc_msgSend_setShowsRotationControls_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsRotationControls:");
}

id objc_msgSend_setShowsTopBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsTopBorder:");
}

id objc_msgSend_setSideAppButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSideAppButton:");
}

id objc_msgSend_setSideAppMoreRockerItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSideAppMoreRockerItems:");
}

id objc_msgSend_setSimpleRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimpleRect:");
}

id objc_msgSend_setSiriShortcutsItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSiriShortcutsItems:");
}

id objc_msgSend_setSizeMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSizeMultiplier:");
}

id objc_msgSend_setSmoothingMaxDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmoothingMaxDelta:");
}

id objc_msgSend_setSoundAudioSessionActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoundAudioSessionActive:");
}

id objc_msgSend_setSoundEffectsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoundEffectsEnabled:");
}

id objc_msgSend_setSpeakScreenButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeakScreenButton:");
}

id objc_msgSend_setSpeakingRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeakingRate:");
}

id objc_msgSend_setSpeechAudioSessionActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechAudioSessionActive:");
}

id objc_msgSend_setSpeechEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechEnabled:");
}

id objc_msgSend_setSpeechSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechSource:");
}

id objc_msgSend_setSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeed:");
}

id objc_msgSend_setSpringBoardActionHandlerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpringBoardActionHandlerIdentifier:");
}

id objc_msgSend_setStartPoint_endPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartPoint:endPoint:");
}

id objc_msgSend_setStartingDisplayIDForGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartingDisplayIDForGestures:");
}

id objc_msgSend_setStartingRangeForSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartingRangeForSelection:");
}

id objc_msgSend_setStartingSceneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartingSceneIdentifier:");
}

id objc_msgSend_setStartingScreenPointForGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartingScreenPointForGestures:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStoredMenuItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoredMenuItems:");
}

id objc_msgSend_setStoredNumberOfItemsInFirstPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoredNumberOfItemsInFirstPage:");
}

id objc_msgSend_setStroke(void *a1, const char *a2, ...)
{
  return _[a1 setStroke];
}

id objc_msgSend_setStrokeColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeColor:");
}

id objc_msgSend_setStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStyle:");
}

id objc_msgSend_setSubstantialTransitionOccurredBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubstantialTransitionOccurredBlock:");
}

id objc_msgSend_setSweepCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSweepCount:");
}

id objc_msgSend_setSweepFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSweepFocusContext:");
}

id objc_msgSend_setSwitchControlAutoTapTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlAutoTapTimeout:");
}

id objc_msgSend_setSwitchControlDwellTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlDwellTime:");
}

id objc_msgSend_setSwitchControlFirstLaunchScanningMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlFirstLaunchScanningMode:");
}

id objc_msgSend_setSwitchControlHasScreenSwitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlHasScreenSwitch:");
}

id objc_msgSend_setSwitchControlIsEnabledAsReceiver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlIsEnabledAsReceiver:");
}

id objc_msgSend_setSwitchControlPlatformSwitchedCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlPlatformSwitchedCount:");
}

id objc_msgSend_setSwitchControlRendersDeviceUnusable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlRendersDeviceUnusable:");
}

id objc_msgSend_setSwitchControlScanAfterTapLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlScanAfterTapLocation:");
}

id objc_msgSend_setSwitchControlScanningStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlScanningStyle:");
}

id objc_msgSend_setSwitchControlShouldDisallowUSBRestrictedMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlShouldDisallowUSBRestrictedMode:");
}

id objc_msgSend_setSwitchControlTapBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlTapBehavior:");
}

id objc_msgSend_setSwitchControlUseCameraForPointMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlUseCameraForPointMode:");
}

id objc_msgSend_setSwitchControlUserDidReadUSBRestrictedModeAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchControlUserDidReadUSBRestrictedModeAlert:");
}

id objc_msgSend_setSwitchDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchDisplayName:");
}

id objc_msgSend_setSwitchDisplayNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwitchDisplayNames:");
}

id objc_msgSend_setSystemApertureInvalidatable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemApertureInvalidatable:");
}

id objc_msgSend_setSystemPointerSettingsChangedDebouncer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemPointerSettingsChangedDebouncer:");
}

id objc_msgSend_setTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTag:");
}

id objc_msgSend_setTailAngle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTailAngle:");
}

id objc_msgSend_setTailPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTailPoint:");
}

id objc_msgSend_setTapBehaviors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTapBehaviors:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextAlignment:");
}

id objc_msgSend_setTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextColor:");
}

id objc_msgSend_setTextElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextElement:");
}

id objc_msgSend_setTheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTheme:");
}

id objc_msgSend_setThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThreshold:");
}

id objc_msgSend_setTimeIntervalBeforeSendAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeIntervalBeforeSendAction:");
}

id objc_msgSend_setTimeIntervalBeforeSendRepeatAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeIntervalBeforeSendRepeatAction:");
}

id objc_msgSend_setTimeIntervalBetweenDidSendActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeIntervalBetweenDidSendActions:");
}

id objc_msgSend_setTimeIntervalSinceDidSendAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeIntervalSinceDidSendAction:");
}

id objc_msgSend_setTimeOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeOffset:");
}

id objc_msgSend_setTimeoutDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutDuration:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setTimingFunction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimingFunction:");
}

id objc_msgSend_setTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTintColor:");
}

id objc_msgSend_setTip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTip:");
}

id objc_msgSend_setTipObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTipObject:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTitleLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitleLabel:");
}

id objc_msgSend_setToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToValue:");
}

id objc_msgSend_setToggleDockButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToggleDockButton:");
}

id objc_msgSend_setTopLevelVisualScrollersAuxElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopLevelVisualScrollersAuxElementManager:");
}

id objc_msgSend_setTopLevelVisualScrollersEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopLevelVisualScrollersEnabled:");
}

id objc_msgSend_setTouchItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchItems:");
}

id objc_msgSend_setTouchSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchSpeed:");
}

id objc_msgSend_setTrackpadBorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackpadBorder:");
}

id objc_msgSend_setTrackpadBorderAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackpadBorderAction:");
}

id objc_msgSend_setTrackpadCornerPlacement(void *a1, const char *a2, ...)
{
  return _[a1 setTrackpadCornerPlacement];
}

id objc_msgSend_setTrackpadHitTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackpadHitTest:");
}

id objc_msgSend_setTrackpadManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackpadManager:");
}

id objc_msgSend_setTrackpadVC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackpadVC:");
}

id objc_msgSend_setTransducerType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransducerType:");
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransform:");
}

id objc_msgSend_setTransitioning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitioning:");
}

id objc_msgSend_setTransitioningToOrFromActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransitioningToOrFromActive:");
}

id objc_msgSend_setTranslatesAutoresizingMaskIntoConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:");
}

id objc_msgSend_setTriangle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriangle:");
}

id objc_msgSend_setTriangleKnockoutLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriangleKnockoutLayer:");
}

id objc_msgSend_setTriangleStrokeLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriangleStrokeLayer:");
}

id objc_msgSend_setTripleClickHomeButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTripleClickHomeButton:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setTypingCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypingCandidates:");
}

id objc_msgSend_setUiDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUiDelegate:");
}

id objc_msgSend_setUpBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpBlock:");
}

id objc_msgSend_setUpGestureRecognizers(void *a1, const char *a2, ...)
{
  return _[a1 setUpGestureRecognizers];
}

id objc_msgSend_setUpdateElementVisualsCoalescer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateElementVisualsCoalescer:");
}

id objc_msgSend_setUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateHandler:");
}

id objc_msgSend_setUpdateVisualsSequenceDidBeginHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateVisualsSequenceDidBeginHandler:");
}

id objc_msgSend_setUpdateVisualsSequenceDidFinishHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateVisualsSequenceDidFinishHandler:");
}

id objc_msgSend_setUpdateVisualsSequenceInProgressHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateVisualsSequenceInProgressHandler:");
}

id objc_msgSend_setUseGaussianBlur_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseGaussianBlur:");
}

id objc_msgSend_setUseMedianFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseMedianFilter:");
}

id objc_msgSend_setUseWeightedMovingAverage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseWeightedMovingAverage:");
}

id objc_msgSend_setUserDefinedScanningBehaviorTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDefinedScanningBehaviorTraits:");
}

id objc_msgSend_setUserInteractionEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInteractionEnabled:");
}

id objc_msgSend_setUserInterfaceClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInterfaceClient:");
}

id objc_msgSend_setUserInterfaceClientEnablers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInterfaceClientEnablers:");
}

id objc_msgSend_setUsesAuxiliarySession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesAuxiliarySession:");
}

id objc_msgSend_setUsesEvenOddFillRule_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesEvenOddFillRule:");
}

id objc_msgSend_setValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValid:");
}

id objc_msgSend_setValidationTargetName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValidationTargetName:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValueChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValueChangedHandler:");
}

id objc_msgSend_setVelocity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVelocity:");
}

id objc_msgSend_setVersionNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersionNumber:");
}

id objc_msgSend_setVerticalContinuousScrollers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerticalContinuousScrollers:");
}

id objc_msgSend_setVerticalScroller_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerticalScroller:");
}

id objc_msgSend_setVideoSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVideoSettings:");
}

id objc_msgSend_setView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setView:");
}

id objc_msgSend_setViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewController:");
}

id objc_msgSend_setVirtualMouseClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVirtualMouseClient:");
}

id objc_msgSend_setVirtualMouseClientAssertionForActiveMotionTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVirtualMouseClientAssertionForActiveMotionTracker:");
}

id objc_msgSend_setVirtualMouseClientAssertionForVirtualTrackpad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVirtualMouseClientAssertionForVirtualTrackpad:");
}

id objc_msgSend_setVisibleItemOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisibleItemOffset:");
}

id objc_msgSend_setVisualProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisualProvider:");
}

id objc_msgSend_setVisualsHidden_forReason_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisualsHidden:forReason:animated:");
}

id objc_msgSend_setVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceIdentifier:");
}

id objc_msgSend_setVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolume:");
}

id objc_msgSend_setWaitingForSecureIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaitingForSecureIntent:");
}

id objc_msgSend_setWantsKeyboardEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantsKeyboardEvents:");
}

id objc_msgSend_setWantsMouseEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWantsMouseEvents:");
}

id objc_msgSend_setWasPresentedWithTip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWasPresentedWithTip:");
}

id objc_msgSend_setWidthConstraint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidthConstraint:");
}

id objc_msgSend_setWillScanFirstElementAfterPresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWillScanFirstElementAfterPresentation:");
}

id objc_msgSend_setWindowLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWindowLevel:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_setXAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXAxis:");
}

id objc_msgSend_setXOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXOffset:");
}

id objc_msgSend_setXOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXOrder:");
}

id objc_msgSend_setYAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYAxis:");
}

id objc_msgSend_setYOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYOffset:");
}

id objc_msgSend_setYOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYOrder:");
}

id objc_msgSend_setZoomViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoomViewController:");
}

id objc_msgSend_settingsKeys(void *a1, const char *a2, ...)
{
  return _[a1 settingsKeys];
}

id objc_msgSend_setupNonSceneUI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupNonSceneUI:");
}

id objc_msgSend_setupSharedVirtualDeviceIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 setupSharedVirtualDeviceIfNecessary];
}

id objc_msgSend_shadowColor(void *a1, const char *a2, ...)
{
  return _[a1 shadowColor];
}

id objc_msgSend_shadowOffset(void *a1, const char *a2, ...)
{
  return _[a1 shadowOffset];
}

id objc_msgSend_shake(void *a1, const char *a2, ...)
{
  return _[a1 shake];
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAVSystemController];
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _[a1 sharedApplication];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedDefaults(void *a1, const char *a2, ...)
{
  return _[a1 sharedDefaults];
}

id objc_msgSend_sharedDisplayManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedDisplayManager];
}

id objc_msgSend_sharedHelper(void *a1, const char *a2, ...)
{
  return _[a1 sharedHelper];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedOutputManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedOutputManager];
}

id objc_msgSend_sharedPreferences(void *a1, const char *a2, ...)
{
  return _[a1 sharedPreferences];
}

id objc_msgSend_sharedStyleProvider(void *a1, const char *a2, ...)
{
  return _[a1 sharedStyleProvider];
}

id objc_msgSend_sharedSystemShellSwitcher(void *a1, const char *a2, ...)
{
  return _[a1 sharedSystemShellSwitcher];
}

id objc_msgSend_sharedWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 sharedWorkspace];
}

id objc_msgSend_sheet(void *a1, const char *a2, ...)
{
  return _[a1 sheet];
}

id objc_msgSend_sheetViewControllerStack(void *a1, const char *a2, ...)
{
  return _[a1 sheetViewControllerStack];
}

id objc_msgSend_sheetWillAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sheetWillAppear:");
}

id objc_msgSend_sheetWillDisappear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sheetWillDisappear:");
}

id objc_msgSend_shortcut(void *a1, const char *a2, ...)
{
  return _[a1 shortcut];
}

id objc_msgSend_shortcutForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortcutForIdentifier:");
}

id objc_msgSend_shortcutIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 shortcutIdentifier];
}

id objc_msgSend_shortcutName(void *a1, const char *a2, ...)
{
  return _[a1 shortcutName];
}

id objc_msgSend_shortcuts(void *a1, const char *a2, ...)
{
  return _[a1 shortcuts];
}

id objc_msgSend_shouldAddItemSpecificMenuOptionsToMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAddItemSpecificMenuOptionsToMenu:");
}

id objc_msgSend_shouldAllowDwellSelection(void *a1, const char *a2, ...)
{
  return _[a1 shouldAllowDwellSelection];
}

id objc_msgSend_shouldAllowFingersForContinuousGesture(void *a1, const char *a2, ...)
{
  return _[a1 shouldAllowFingersForContinuousGesture];
}

id objc_msgSend_shouldBeTrackedByZoom(void *a1, const char *a2, ...)
{
  return _[a1 shouldBeTrackedByZoom];
}

id objc_msgSend_shouldBypassShowingMenuForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldBypassShowingMenuForElement:");
}

id objc_msgSend_shouldCaptureEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCaptureEvent:");
}

id objc_msgSend_shouldClearFingerCircle(void *a1, const char *a2, ...)
{
  return _[a1 shouldClearFingerCircle];
}

id objc_msgSend_shouldContinueScanning(void *a1, const char *a2, ...)
{
  return _[a1 shouldContinueScanning];
}

id objc_msgSend_shouldDelayBeforePresentingHUDView(void *a1, const char *a2, ...)
{
  return _[a1 shouldDelayBeforePresentingHUDView];
}

id objc_msgSend_shouldDisableMainPointerStatusForUnitTesting(void *a1, const char *a2, ...)
{
  return _[a1 shouldDisableMainPointerStatusForUnitTesting];
}

id objc_msgSend_shouldEndScanningGestureProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldEndScanningGestureProvider:");
}

id objc_msgSend_shouldFlipForRTL(void *a1, const char *a2, ...)
{
  return _[a1 shouldFlipForRTL];
}

id objc_msgSend_shouldForwardSwitchEventsForInputSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldForwardSwitchEventsForInputSource:");
}

id objc_msgSend_shouldHandleSystemPointerButtonEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHandleSystemPointerButtonEvent:");
}

id objc_msgSend_shouldHideCursorsEyeTrackingAutoHide(void *a1, const char *a2, ...)
{
  return _[a1 shouldHideCursorsEyeTrackingAutoHide];
}

id objc_msgSend_shouldHideMenuCursor(void *a1, const char *a2, ...)
{
  return _[a1 shouldHideMenuCursor];
}

id objc_msgSend_shouldHideSystemPointerForFingersView(void *a1, const char *a2, ...)
{
  return _[a1 shouldHideSystemPointerForFingersView];
}

id objc_msgSend_shouldIgnoreHIDDeviceMovementWhileMouseActive(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnoreHIDDeviceMovementWhileMouseActive];
}

id objc_msgSend_shouldIgnoreNextHome(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnoreNextHome];
}

id objc_msgSend_shouldIgnorePointerEventWhileEyeTrackerConfigures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldIgnorePointerEventWhileEyeTrackerConfigures:");
}

id objc_msgSend_shouldIgnorePointerEventWhileEyeTrackerIsInactive(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnorePointerEventWhileEyeTrackerIsInactive];
}

id objc_msgSend_shouldIgnorePointerEventWhileEyeTrackerPressedButtonDownWithDwell(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnorePointerEventWhileEyeTrackerPressedButtonDownWithDwell];
}

id objc_msgSend_shouldIncludeBackItem(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeBackItem];
}

id objc_msgSend_shouldIncludeCenterPoint(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeCenterPoint];
}

id objc_msgSend_shouldIncludeTextLabels(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeTextLabels];
}

id objc_msgSend_shouldKeepScannerAwake(void *a1, const char *a2, ...)
{
  return _[a1 shouldKeepScannerAwake];
}

id objc_msgSend_shouldNotResetPointPickerRefinement(void *a1, const char *a2, ...)
{
  return _[a1 shouldNotResetPointPickerRefinement];
}

id objc_msgSend_shouldPerformAtOriginalLocation(void *a1, const char *a2, ...)
{
  return _[a1 shouldPerformAtOriginalLocation];
}

id objc_msgSend_shouldPlayMenuSoundOnFocus(void *a1, const char *a2, ...)
{
  return _[a1 shouldPlayMenuSoundOnFocus];
}

id objc_msgSend_shouldRescanAfterFetch(void *a1, const char *a2, ...)
{
  return _[a1 shouldRescanAfterFetch];
}

id objc_msgSend_shouldRescanAfterTap(void *a1, const char *a2, ...)
{
  return _[a1 shouldRescanAfterTap];
}

id objc_msgSend_shouldRescanFromTopAfterFetch(void *a1, const char *a2, ...)
{
  return _[a1 shouldRescanFromTopAfterFetch];
}

id objc_msgSend_shouldResumeFromMenuDismissal(void *a1, const char *a2, ...)
{
  return _[a1 shouldResumeFromMenuDismissal];
}

id objc_msgSend_shouldRotate(void *a1, const char *a2, ...)
{
  return _[a1 shouldRotate];
}

id objc_msgSend_shouldRoundMenuCorners(void *a1, const char *a2, ...)
{
  return _[a1 shouldRoundMenuCorners];
}

id objc_msgSend_shouldScanKeyboardOnAppearance(void *a1, const char *a2, ...)
{
  return _[a1 shouldScanKeyboardOnAppearance];
}

id objc_msgSend_shouldScanToNextFocusContextAfterSpeaking(void *a1, const char *a2, ...)
{
  return _[a1 shouldScanToNextFocusContextAfterSpeaking];
}

id objc_msgSend_shouldShowAppWideScrollActionsInMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldShowAppWideScrollActionsInMenu:");
}

id objc_msgSend_shouldShowFingerOutlines(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowFingerOutlines];
}

id objc_msgSend_shouldShowInnerCircle(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowInnerCircle];
}

id objc_msgSend_shouldShowMenuOnFirstSelectAction(void *a1, const char *a2, ...)
{
  return _[a1 shouldShowMenuOnFirstSelectAction];
}

id objc_msgSend_shouldStartScanningGestureProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldStartScanningGestureProvider:");
}

id objc_msgSend_shouldStop(void *a1, const char *a2, ...)
{
  return _[a1 shouldStop];
}

id objc_msgSend_shouldSuppressAudioOutput(void *a1, const char *a2, ...)
{
  return _[a1 shouldSuppressAudioOutput];
}

id objc_msgSend_shouldUpdateItemsOnOrientationChange(void *a1, const char *a2, ...)
{
  return _[a1 shouldUpdateItemsOnOrientationChange];
}

id objc_msgSend_shouldUpdateMenuItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUpdateMenuItem:");
}

id objc_msgSend_shouldUpdateZoomLocation(void *a1, const char *a2, ...)
{
  return _[a1 shouldUpdateZoomLocation];
}

id objc_msgSend_shouldUseActivityIndicator(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseActivityIndicator];
}

id objc_msgSend_shouldUseBackItemAsDoneItem(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseBackItemAsDoneItem];
}

id objc_msgSend_shouldUseBubbleMode(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseBubbleMode];
}

id objc_msgSend_shouldUseCameraPointPicker(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseCameraPointPicker];
}

id objc_msgSend_shouldUseDockContentPadding(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseDockContentPadding];
}

id objc_msgSend_shouldUseEyeTrackingAutoHide(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseEyeTrackingAutoHide];
}

id objc_msgSend_showAlert_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAlert:withHandler:");
}

id objc_msgSend_showAlternateKeysForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAlternateKeysForKey:");
}

id objc_msgSend_showAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAnimated:completion:");
}

id objc_msgSend_showBannerWithText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showBannerWithText:");
}

id objc_msgSend_showBannerWithTitle_text_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showBannerWithTitle:text:");
}

id objc_msgSend_showBubbleCursor(void *a1, const char *a2, ...)
{
  return _[a1 showBubbleCursor];
}

id objc_msgSend_showBubbleNotificationIndefinitelyWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showBubbleNotificationIndefinitelyWithError:");
}

id objc_msgSend_showBubbleNotificationWithError_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showBubbleNotificationWithError:duration:");
}

id objc_msgSend_showCalibrationUI(void *a1, const char *a2, ...)
{
  return _[a1 showCalibrationUI];
}

id objc_msgSend_showFingerModels_animated_startPointForAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showFingerModels:animated:startPointForAnimation:");
}

id objc_msgSend_showFingerOutlines(void *a1, const char *a2, ...)
{
  return _[a1 showFingerOutlines];
}

id objc_msgSend_showInnerCircle(void *a1, const char *a2, ...)
{
  return _[a1 showInnerCircle];
}

id objc_msgSend_showMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showMenu:");
}

id objc_msgSend_showMenu_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showMenu:onDisplay:");
}

id objc_msgSend_showMoreItemsButtonWasActivated(void *a1, const char *a2, ...)
{
  return _[a1 showMoreItemsButtonWasActivated];
}

id objc_msgSend_showMoreItemsPageControl(void *a1, const char *a2, ...)
{
  return _[a1 showMoreItemsPageControl];
}

id objc_msgSend_showNubbitPressedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showNubbitPressedState:");
}

id objc_msgSend_showPinchFingersAnimated_midpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showPinchFingersAnimated:midpoint:");
}

id objc_msgSend_showSimpleAlertWithText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showSimpleAlertWithText:");
}

id objc_msgSend_showSimpleBannerWithTitle_text_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showSimpleBannerWithTitle:text:");
}

id objc_msgSend_showStartingFingersForGesture_animated_startPointForAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showStartingFingersForGesture:animated:startPointForAnimation:");
}

id objc_msgSend_showUIContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showUIContext:");
}

id objc_msgSend_showUIForEyeTracker(void *a1, const char *a2, ...)
{
  return _[a1 showUIForEyeTracker];
}

id objc_msgSend_showVolumeBar_withProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showVolumeBar:withProgress:");
}

id objc_msgSend_showWithAssistiveAccess(void *a1, const char *a2, ...)
{
  return _[a1 showWithAssistiveAccess];
}

id objc_msgSend_showWithGuidedAccess(void *a1, const char *a2, ...)
{
  return _[a1 showWithGuidedAccess];
}

id objc_msgSend_showZoomWindow(void *a1, const char *a2, ...)
{
  return _[a1 showZoomWindow];
}

id objc_msgSend_showsBottomBorder(void *a1, const char *a2, ...)
{
  return _[a1 showsBottomBorder];
}

id objc_msgSend_showsCurvatureControls(void *a1, const char *a2, ...)
{
  return _[a1 showsCurvatureControls];
}

id objc_msgSend_showsFooter(void *a1, const char *a2, ...)
{
  return _[a1 showsFooter];
}

id objc_msgSend_showsLeftBorder(void *a1, const char *a2, ...)
{
  return _[a1 showsLeftBorder];
}

id objc_msgSend_showsRightBorder(void *a1, const char *a2, ...)
{
  return _[a1 showsRightBorder];
}

id objc_msgSend_showsRotation90Controls(void *a1, const char *a2, ...)
{
  return _[a1 showsRotation90Controls];
}

id objc_msgSend_showsRotationControls(void *a1, const char *a2, ...)
{
  return _[a1 showsRotationControls];
}

id objc_msgSend_showsTopBorder(void *a1, const char *a2, ...)
{
  return _[a1 showsTopBorder];
}

id objc_msgSend_siblingOfElement_inDirection_didWrap_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "siblingOfElement:inDirection:didWrap:options:");
}

id objc_msgSend_sideAppButton(void *a1, const char *a2, ...)
{
  return _[a1 sideAppButton];
}

id objc_msgSend_sideAppMoreRockerItems(void *a1, const char *a2, ...)
{
  return _[a1 sideAppMoreRockerItems];
}

id objc_msgSend_sideSwitchUsedForOrientation(void *a1, const char *a2, ...)
{
  return _[a1 sideSwitchUsedForOrientation];
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _[a1 size];
}

id objc_msgSend_sizeMultiplier(void *a1, const char *a2, ...)
{
  return _[a1 sizeMultiplier];
}

id objc_msgSend_sizeThatFits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeThatFits:");
}

id objc_msgSend_sizeThatFits_includeTip_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeThatFits:includeTip:");
}

id objc_msgSend_sizeToFit(void *a1, const char *a2, ...)
{
  return _[a1 sizeToFit];
}

id objc_msgSend_sizeWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeWithAttributes:");
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_slideDockToPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slideDockToPosition:");
}

id objc_msgSend_slidePopoverToPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slidePopoverToPosition:");
}

id objc_msgSend_smoothingBufferSizeForEyeTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "smoothingBufferSizeForEyeTracker:");
}

id objc_msgSend_sortMenuItemsForNumberOfItemsPerRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortMenuItemsForNumberOfItemsPerRow:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_soundEffectsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 soundEffectsEnabled];
}

id objc_msgSend_soundIDsToAudioPlayer(void *a1, const char *a2, ...)
{
  return _[a1 soundIDsToAudioPlayer];
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return _[a1 source];
}

id objc_msgSend_speakScreenButton(void *a1, const char *a2, ...)
{
  return _[a1 speakScreenButton];
}

id objc_msgSend_speakThisWithOptions_useAppAtPoint_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakThisWithOptions:useAppAtPoint:errorHandler:");
}

id objc_msgSend_specialToolUsageEnded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "specialToolUsageEnded:");
}

id objc_msgSend_speechEnabled(void *a1, const char *a2, ...)
{
  return _[a1 speechEnabled];
}

id objc_msgSend_speechEnabledDidChange(void *a1, const char *a2, ...)
{
  return _[a1 speechEnabledDidChange];
}

id objc_msgSend_speechManager(void *a1, const char *a2, ...)
{
  return _[a1 speechManager];
}

id objc_msgSend_springBoardActionHandlerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 springBoardActionHandlerIdentifier];
}

id objc_msgSend_springboardActionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 springboardActionIdentifier];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startAnimating(void *a1, const char *a2, ...)
{
  return _[a1 startAnimating];
}

id objc_msgSend_startDragModeOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDragModeOnDisplay:");
}

id objc_msgSend_startDwellAnimationWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDwellAnimationWithCompletion:");
}

id objc_msgSend_startMovementHoldWithMouseKeyAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMovementHoldWithMouseKeyAction:");
}

id objc_msgSend_startPinch_pointTwo_systemPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startPinch:pointTwo:systemPoint:");
}

id objc_msgSend_startPinchModeWithPoint_onDisplay_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startPinchModeWithPoint:onDisplay:mode:");
}

id objc_msgSend_startRunning(void *a1, const char *a2, ...)
{
  return _[a1 startRunning];
}

id objc_msgSend_startScroll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScroll:");
}

id objc_msgSend_startServerWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startServerWithError:");
}

id objc_msgSend_startingDisplayIDForGestures(void *a1, const char *a2, ...)
{
  return _[a1 startingDisplayIDForGestures];
}

id objc_msgSend_startingRangeForSelection(void *a1, const char *a2, ...)
{
  return _[a1 startingRangeForSelection];
}

id objc_msgSend_startingSceneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 startingSceneIdentifier];
}

id objc_msgSend_startingScreenPointForGestures(void *a1, const char *a2, ...)
{
  return _[a1 startingScreenPointForGestures];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stopAnimating(void *a1, const char *a2, ...)
{
  return _[a1 stopAnimating];
}

id objc_msgSend_stopAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAnimation:");
}

id objc_msgSend_stopForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopForFreehandSheet:");
}

id objc_msgSend_stopIfAllowed(void *a1, const char *a2, ...)
{
  return _[a1 stopIfAllowed];
}

id objc_msgSend_stopObservingAXNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopObservingAXNotifications:");
}

id objc_msgSend_stopRunning(void *a1, const char *a2, ...)
{
  return _[a1 stopRunning];
}

id objc_msgSend_stopServerWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopServerWithError:");
}

id objc_msgSend_stopSpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSpeaking:");
}

id objc_msgSend_straightenCurveControl(void *a1, const char *a2, ...)
{
  return _[a1 straightenCurveControl];
}

id objc_msgSend_straightenForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "straightenForFreehandSheet:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithAXAttribute:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_stroke(void *a1, const char *a2, ...)
{
  return _[a1 stroke];
}

id objc_msgSend_strokeOutlineColor(void *a1, const char *a2, ...)
{
  return _[a1 strokeOutlineColor];
}

id objc_msgSend_strokeOutlineWidth(void *a1, const char *a2, ...)
{
  return _[a1 strokeOutlineWidth];
}

id objc_msgSend_strokeWidth(void *a1, const char *a2, ...)
{
  return _[a1 strokeWidth];
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _[a1 style];
}

id objc_msgSend_styleProvider(void *a1, const char *a2, ...)
{
  return _[a1 styleProvider];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_substantialTransitionOccurred(void *a1, const char *a2, ...)
{
  return _[a1 substantialTransitionOccurred];
}

id objc_msgSend_substantialTransitionOccurredBlock(void *a1, const char *a2, ...)
{
  return _[a1 substantialTransitionOccurredBlock];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_subviews(void *a1, const char *a2, ...)
{
  return _[a1 subviews];
}

id objc_msgSend_superNew(void *a1, const char *a2, ...)
{
  return _[a1 superNew];
}

id objc_msgSend_superlayer(void *a1, const char *a2, ...)
{
  return _[a1 superlayer];
}

id objc_msgSend_superview(void *a1, const char *a2, ...)
{
  return _[a1 superview];
}

id objc_msgSend_supportsAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsAction:");
}

id objc_msgSend_supportsActivateForBubbleModeElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsActivateForBubbleModeElement:");
}

id objc_msgSend_supportsHaptics(void *a1, const char *a2, ...)
{
  return _[a1 supportsHaptics];
}

id objc_msgSend_suppressAudioOutput(void *a1, const char *a2, ...)
{
  return _[a1 suppressAudioOutput];
}

id objc_msgSend_sweepAnimationWithDirection_scatLayer_animationKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sweepAnimationWithDirection:scatLayer:animationKey:");
}

id objc_msgSend_sweepCount(void *a1, const char *a2, ...)
{
  return _[a1 sweepCount];
}

id objc_msgSend_sweepFocusContext(void *a1, const char *a2, ...)
{
  return _[a1 sweepFocusContext];
}

id objc_msgSend_switchControlAutoTapTimeout(void *a1, const char *a2, ...)
{
  return _[a1 switchControlAutoTapTimeout];
}

id objc_msgSend_switchControlCameraPointPickerDwellActivationTimeout(void *a1, const char *a2, ...)
{
  return _[a1 switchControlCameraPointPickerDwellActivationTimeout];
}

id objc_msgSend_switchControlCameraPointPickerDwellMovementToleranceRadius(void *a1, const char *a2, ...)
{
  return _[a1 switchControlCameraPointPickerDwellMovementToleranceRadius];
}

id objc_msgSend_switchControlCameraPointPickerMode(void *a1, const char *a2, ...)
{
  return _[a1 switchControlCameraPointPickerMode];
}

id objc_msgSend_switchControlCameraPointPickerMovementToleranceInJoystickMode(void *a1, const char *a2, ...)
{
  return _[a1 switchControlCameraPointPickerMovementToleranceInJoystickMode];
}

id objc_msgSend_switchControlCameraPointPickerSensitivity(void *a1, const char *a2, ...)
{
  return _[a1 switchControlCameraPointPickerSensitivity];
}

id objc_msgSend_switchControlDeviceMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 switchControlDeviceMenuItems];
}

id objc_msgSend_switchControlDwellTime(void *a1, const char *a2, ...)
{
  return _[a1 switchControlDwellTime];
}

id objc_msgSend_switchControlFirstLaunchScanningMode(void *a1, const char *a2, ...)
{
  return _[a1 switchControlFirstLaunchScanningMode];
}

id objc_msgSend_switchControlGesturesMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 switchControlGesturesMenuItems];
}

id objc_msgSend_switchControlHasEmptyTopLevelMenu(void *a1, const char *a2, ...)
{
  return _[a1 switchControlHasEmptyTopLevelMenu];
}

id objc_msgSend_switchControlIgnoreInvalidSwitchConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 switchControlIgnoreInvalidSwitchConfiguration];
}

id objc_msgSend_switchControlIsEnabledAsReceiver(void *a1, const char *a2, ...)
{
  return _[a1 switchControlIsEnabledAsReceiver];
}

id objc_msgSend_switchControlLaunchRecipeUUID(void *a1, const char *a2, ...)
{
  return _[a1 switchControlLaunchRecipeUUID];
}

id objc_msgSend_switchControlMediaControlsMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 switchControlMediaControlsMenuItems];
}

id objc_msgSend_switchControlPlatformSwitchedCount(void *a1, const char *a2, ...)
{
  return _[a1 switchControlPlatformSwitchedCount];
}

id objc_msgSend_switchControlPointPickerSelectionStyle(void *a1, const char *a2, ...)
{
  return _[a1 switchControlPointPickerSelectionStyle];
}

id objc_msgSend_switchControlRecipes(void *a1, const char *a2, ...)
{
  return _[a1 switchControlRecipes];
}

id objc_msgSend_switchControlRestartScanningAtCurrentKey(void *a1, const char *a2, ...)
{
  return _[a1 switchControlRestartScanningAtCurrentKey];
}

id objc_msgSend_switchControlScanAfterTapLocation(void *a1, const char *a2, ...)
{
  return _[a1 switchControlScanAfterTapLocation];
}

id objc_msgSend_switchControlScanningStyle(void *a1, const char *a2, ...)
{
  return _[a1 switchControlScanningStyle];
}

id objc_msgSend_switchControlSettingsMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 switchControlSettingsMenuItems];
}

id objc_msgSend_switchControlShouldAlwaysActivateKeyboardKeys(void *a1, const char *a2, ...)
{
  return _[a1 switchControlShouldAlwaysActivateKeyboardKeys];
}

id objc_msgSend_switchControlShouldDisallowUSBRestrictedMode(void *a1, const char *a2, ...)
{
  return _[a1 switchControlShouldDisallowUSBRestrictedMode];
}

id objc_msgSend_switchControlShouldUseShortFirstPage(void *a1, const char *a2, ...)
{
  return _[a1 switchControlShouldUseShortFirstPage];
}

id objc_msgSend_switchControlTapBehavior(void *a1, const char *a2, ...)
{
  return _[a1 switchControlTapBehavior];
}

id objc_msgSend_switchControlTopLevelMenuItems(void *a1, const char *a2, ...)
{
  return _[a1 switchControlTopLevelMenuItems];
}

id objc_msgSend_switchControlUseCameraForPointMode(void *a1, const char *a2, ...)
{
  return _[a1 switchControlUseCameraForPointMode];
}

id objc_msgSend_switchControlUserDidReadUSBRestrictedModeAlert(void *a1, const char *a2, ...)
{
  return _[a1 switchControlUserDidReadUSBRestrictedModeAlert];
}

id objc_msgSend_switchCurrentDisplayContext(void *a1, const char *a2, ...)
{
  return _[a1 switchCurrentDisplayContext];
}

id objc_msgSend_switchDisplayName(void *a1, const char *a2, ...)
{
  return _[a1 switchDisplayName];
}

id objc_msgSend_switchDisplayNameForButtonNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "switchDisplayNameForButtonNumber:");
}

id objc_msgSend_switchDisplayNames(void *a1, const char *a2, ...)
{
  return _[a1 switchDisplayNames];
}

id objc_msgSend_switchIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 switchIdentifier];
}

id objc_msgSend_switchKeyForSwitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "switchKeyForSwitch:");
}

id objc_msgSend_switchSource(void *a1, const char *a2, ...)
{
  return _[a1 switchSource];
}

id objc_msgSend_switchUUID(void *a1, const char *a2, ...)
{
  return _[a1 switchUUID];
}

id objc_msgSend_switchWithAction_name_source_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "switchWithAction:name:source:type:");
}

id objc_msgSend_sysdiagnoseWithMetadata_onCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sysdiagnoseWithMetadata:onCompletion:");
}

id objc_msgSend_systemApertureInvalidatable(void *a1, const char *a2, ...)
{
  return _[a1 systemApertureInvalidatable];
}

id objc_msgSend_systemAppReady(void *a1, const char *a2, ...)
{
  return _[a1 systemAppReady];
}

id objc_msgSend_systemApplication(void *a1, const char *a2, ...)
{
  return _[a1 systemApplication];
}

id objc_msgSend_systemBlueColor(void *a1, const char *a2, ...)
{
  return _[a1 systemBlueColor];
}

id objc_msgSend_systemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:");
}

id objc_msgSend_systemFontOfSize_weight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:weight:");
}

id objc_msgSend_systemGrayColor(void *a1, const char *a2, ...)
{
  return _[a1 systemGrayColor];
}

id objc_msgSend_systemGreenColor(void *a1, const char *a2, ...)
{
  return _[a1 systemGreenColor];
}

id objc_msgSend_systemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemImageNamed:");
}

id objc_msgSend_systemLanguageID(void *a1, const char *a2, ...)
{
  return _[a1 systemLanguageID];
}

id objc_msgSend_systemLayoutSizeFittingSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemLayoutSizeFittingSize:");
}

id objc_msgSend_systemOrangeColor(void *a1, const char *a2, ...)
{
  return _[a1 systemOrangeColor];
}

id objc_msgSend_systemPointerController(void *a1, const char *a2, ...)
{
  return _[a1 systemPointerController];
}

id objc_msgSend_systemPointerLocation(void *a1, const char *a2, ...)
{
  return _[a1 systemPointerLocation];
}

id objc_msgSend_systemPointerOnRocker(void *a1, const char *a2, ...)
{
  return _[a1 systemPointerOnRocker];
}

id objc_msgSend_systemPointerOnTrackpad(void *a1, const char *a2, ...)
{
  return _[a1 systemPointerOnTrackpad];
}

id objc_msgSend_systemPointerSettingsChangedDebouncer(void *a1, const char *a2, ...)
{
  return _[a1 systemPointerSettingsChangedDebouncer];
}

id objc_msgSend_systemPressTVDownButton(void *a1, const char *a2, ...)
{
  return _[a1 systemPressTVDownButton];
}

id objc_msgSend_systemPressTVHomeButton(void *a1, const char *a2, ...)
{
  return _[a1 systemPressTVHomeButton];
}

id objc_msgSend_systemPressTVLeftButton(void *a1, const char *a2, ...)
{
  return _[a1 systemPressTVLeftButton];
}

id objc_msgSend_systemPressTVMenuButton(void *a1, const char *a2, ...)
{
  return _[a1 systemPressTVMenuButton];
}

id objc_msgSend_systemPressTVPlayPauseButton(void *a1, const char *a2, ...)
{
  return _[a1 systemPressTVPlayPauseButton];
}

id objc_msgSend_systemPressTVRightButton(void *a1, const char *a2, ...)
{
  return _[a1 systemPressTVRightButton];
}

id objc_msgSend_systemPressTVSelectButton(void *a1, const char *a2, ...)
{
  return _[a1 systemPressTVSelectButton];
}

id objc_msgSend_systemPressTVUpButton(void *a1, const char *a2, ...)
{
  return _[a1 systemPressTVUpButton];
}

id objc_msgSend_systemRedColor(void *a1, const char *a2, ...)
{
  return _[a1 systemRedColor];
}

id objc_msgSend_systemServerConnected(void *a1, const char *a2, ...)
{
  return _[a1 systemServerConnected];
}

id objc_msgSend_systemWhiteColor(void *a1, const char *a2, ...)
{
  return _[a1 systemWhiteColor];
}

id objc_msgSend_systemWideElement(void *a1, const char *a2, ...)
{
  return _[a1 systemWideElement];
}

id objc_msgSend_systemYellowColor(void *a1, const char *a2, ...)
{
  return _[a1 systemYellowColor];
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _[a1 tag];
}

id objc_msgSend_tailAngle(void *a1, const char *a2, ...)
{
  return _[a1 tailAngle];
}

id objc_msgSend_tailPoint(void *a1, const char *a2, ...)
{
  return _[a1 tailPoint];
}

id objc_msgSend_takeScreenshot(void *a1, const char *a2, ...)
{
  return _[a1 takeScreenshot];
}

id objc_msgSend_tapBehaviors(void *a1, const char *a2, ...)
{
  return _[a1 tapBehaviors];
}

id objc_msgSend_tapGestureAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tapGestureAtPoint:");
}

id objc_msgSend_tapGestureAtPoint_isDoubleTap_numberOfFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tapGestureAtPoint:isDoubleTap:numberOfFingers:");
}

id objc_msgSend_targetElement(void *a1, const char *a2, ...)
{
  return _[a1 targetElement];
}

id objc_msgSend_tearDown(void *a1, const char *a2, ...)
{
  return _[a1 tearDown];
}

id objc_msgSend_tertiaryButton(void *a1, const char *a2, ...)
{
  return _[a1 tertiaryButton];
}

id objc_msgSend_testAxManager(void *a1, const char *a2, ...)
{
  return _[a1 testAxManager];
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _[a1 text];
}

id objc_msgSend_textColor(void *a1, const char *a2, ...)
{
  return _[a1 textColor];
}

id objc_msgSend_textElement(void *a1, const char *a2, ...)
{
  return _[a1 textElement];
}

id objc_msgSend_textOperations(void *a1, const char *a2, ...)
{
  return _[a1 textOperations];
}

id objc_msgSend_theme(void *a1, const char *a2, ...)
{
  return _[a1 theme];
}

id objc_msgSend_tickleIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 tickleIdleTimer];
}

id objc_msgSend_timeIntervalBeforeSendAction(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalBeforeSendAction];
}

id objc_msgSend_timeIntervalBeforeSendRepeatAction(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalBeforeSendRepeatAction];
}

id objc_msgSend_timeIntervalBetweenDidSendActions(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalBetweenDidSendActions];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceDidSendAction(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceDidSendAction];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return _[a1 timeout];
}

id objc_msgSend_timeoutDuration(void *a1, const char *a2, ...)
{
  return _[a1 timeoutDuration];
}

id objc_msgSend_timerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timerWithTimeInterval:repeats:block:");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_tip(void *a1, const char *a2, ...)
{
  return _[a1 tip];
}

id objc_msgSend_tipObject(void *a1, const char *a2, ...)
{
  return _[a1 tipObject];
}

id objc_msgSend_tipObjectForPresentingSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tipObjectForPresentingSheet:");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_titleFont(void *a1, const char *a2, ...)
{
  return _[a1 titleFont];
}

id objc_msgSend_titleForTripleClickOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "titleForTripleClickOption:");
}

id objc_msgSend_titleHiddenConstraint(void *a1, const char *a2, ...)
{
  return _[a1 titleHiddenConstraint];
}

id objc_msgSend_titleLabel(void *a1, const char *a2, ...)
{
  return _[a1 titleLabel];
}

id objc_msgSend_titleToSizeCache(void *a1, const char *a2, ...)
{
  return _[a1 titleToSizeCache];
}

id objc_msgSend_toValue(void *a1, const char *a2, ...)
{
  return _[a1 toValue];
}

id objc_msgSend_toggleActiveHoldAndDragGestureAtScreenPoint_withDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleActiveHoldAndDragGestureAtScreenPoint:withDisplayID:");
}

id objc_msgSend_toggleAppSwitcher(void *a1, const char *a2, ...)
{
  return _[a1 toggleAppSwitcher];
}

id objc_msgSend_toggleBackgroundSounds(void *a1, const char *a2, ...)
{
  return _[a1 toggleBackgroundSounds];
}

id objc_msgSend_toggleCommandAndControl(void *a1, const char *a2, ...)
{
  return _[a1 toggleCommandAndControl];
}

id objc_msgSend_toggleControlCenter(void *a1, const char *a2, ...)
{
  return _[a1 toggleControlCenter];
}

id objc_msgSend_toggleDock(void *a1, const char *a2, ...)
{
  return _[a1 toggleDock];
}

id objc_msgSend_toggleDockButton(void *a1, const char *a2, ...)
{
  return _[a1 toggleDockButton];
}

id objc_msgSend_toggleLiveCaptions(void *a1, const char *a2, ...)
{
  return _[a1 toggleLiveCaptions];
}

id objc_msgSend_toggleLiveSpeech(void *a1, const char *a2, ...)
{
  return _[a1 toggleLiveSpeech];
}

id objc_msgSend_toggleMute(void *a1, const char *a2, ...)
{
  return _[a1 toggleMute];
}

id objc_msgSend_toggleNearbyDeviceControlPicker(void *a1, const char *a2, ...)
{
  return _[a1 toggleNearbyDeviceControlPicker];
}

id objc_msgSend_toggleNotificationCenter(void *a1, const char *a2, ...)
{
  return _[a1 toggleNotificationCenter];
}

id objc_msgSend_toggleReachability(void *a1, const char *a2, ...)
{
  return _[a1 toggleReachability];
}

id objc_msgSend_toggleRingerSwitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleRingerSwitch:");
}

id objc_msgSend_toggleShowTrackpad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleShowTrackpad:");
}

id objc_msgSend_toggleSpotlight(void *a1, const char *a2, ...)
{
  return _[a1 toggleSpotlight];
}

id objc_msgSend_toggleTouchForFreehandSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleTouchForFreehandSheet:");
}

id objc_msgSend_toggleWatchRemoteScreen(void *a1, const char *a2, ...)
{
  return _[a1 toggleWatchRemoteScreen];
}

id objc_msgSend_topAnchor(void *a1, const char *a2, ...)
{
  return _[a1 topAnchor];
}

id objc_msgSend_topButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topButtonPress:");
}

id objc_msgSend_topLevelVisualScrollersAuxElementManager(void *a1, const char *a2, ...)
{
  return _[a1 topLevelVisualScrollersAuxElementManager];
}

id objc_msgSend_topMostLeafAXElement(void *a1, const char *a2, ...)
{
  return _[a1 topMostLeafAXElement];
}

id objc_msgSend_totalLongPressDuration(void *a1, const char *a2, ...)
{
  return _[a1 totalLongPressDuration];
}

id objc_msgSend_touchDownForDrawingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchDownForDrawingViewController:");
}

id objc_msgSend_touchItems(void *a1, const char *a2, ...)
{
  return _[a1 touchItems];
}

id objc_msgSend_touchRepresentationWithHandType_location_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchRepresentationWithHandType:location:");
}

id objc_msgSend_touchSpeedMultiplier(void *a1, const char *a2, ...)
{
  return _[a1 touchSpeedMultiplier];
}

id objc_msgSend_touchToggleMenuItemWithPreferredNumberOfLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchToggleMenuItemWithPreferredNumberOfLines:");
}

id objc_msgSend_touchUpForDrawingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchUpForDrawingViewController:");
}

id objc_msgSend_trackingType(void *a1, const char *a2, ...)
{
  return _[a1 trackingType];
}

id objc_msgSend_trackpadAtBottomLeft(void *a1, const char *a2, ...)
{
  return _[a1 trackpadAtBottomLeft];
}

id objc_msgSend_trackpadAtBottomRight(void *a1, const char *a2, ...)
{
  return _[a1 trackpadAtBottomRight];
}

id objc_msgSend_trackpadAtTopLeft(void *a1, const char *a2, ...)
{
  return _[a1 trackpadAtTopLeft];
}

id objc_msgSend_trackpadAtTopRight(void *a1, const char *a2, ...)
{
  return _[a1 trackpadAtTopRight];
}

id objc_msgSend_trackpadBorderIsMoving(void *a1, const char *a2, ...)
{
  return _[a1 trackpadBorderIsMoving];
}

id objc_msgSend_trackpadInPinchMode(void *a1, const char *a2, ...)
{
  return _[a1 trackpadInPinchMode];
}

id objc_msgSend_trackpadInScrollMode(void *a1, const char *a2, ...)
{
  return _[a1 trackpadInScrollMode];
}

id objc_msgSend_trailingAnchor(void *a1, const char *a2, ...)
{
  return _[a1 trailingAnchor];
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _[a1 traitCollection];
}

id objc_msgSend_traitCollectionForLabelPreferredContentSizeCategory(void *a1, const char *a2, ...)
{
  return _[a1 traitCollectionForLabelPreferredContentSizeCategory];
}

id objc_msgSend_traits(void *a1, const char *a2, ...)
{
  return _[a1 traits];
}

id objc_msgSend_transducerType(void *a1, const char *a2, ...)
{
  return _[a1 transducerType];
}

id objc_msgSend_transform(void *a1, const char *a2, ...)
{
  return _[a1 transform];
}

id objc_msgSend_transitionMenuToNubbit_changeAlpha_animate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionMenuToNubbit:changeAlpha:animate:");
}

id objc_msgSend_transitionNubbitToMenu_concurrentAnimation_animationCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionNubbitToMenu:concurrentAnimation:animationCompleted:");
}

id objc_msgSend_transitionToMenuSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionToMenuSheet:");
}

id objc_msgSend_transitionToMenuSheet_fromSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionToMenuSheet:fromSheet:");
}

id objc_msgSend_transitionWithView_duration_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionWithView:duration:options:animations:completion:");
}

id objc_msgSend_triangle(void *a1, const char *a2, ...)
{
  return _[a1 triangle];
}

id objc_msgSend_triangleKnockoutLayer(void *a1, const char *a2, ...)
{
  return _[a1 triangleKnockoutLayer];
}

id objc_msgSend_triangleStrokeLayer(void *a1, const char *a2, ...)
{
  return _[a1 triangleStrokeLayer];
}

id objc_msgSend_tripleClickHomeButton(void *a1, const char *a2, ...)
{
  return _[a1 tripleClickHomeButton];
}

id objc_msgSend_turnDigitalCrown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "turnDigitalCrown:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typingCandidates(void *a1, const char *a2, ...)
{
  return _[a1 typingCandidates];
}

id objc_msgSend_uiApplicationAtCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiApplicationAtCoordinate:");
}

id objc_msgSend_uiApplicationForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiApplicationForContext:");
}

id objc_msgSend_uiDelegate(void *a1, const char *a2, ...)
{
  return _[a1 uiDelegate];
}

id objc_msgSend_uiElement(void *a1, const char *a2, ...)
{
  return _[a1 uiElement];
}

id objc_msgSend_uiElementWithAXElement_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementWithAXElement:cache:");
}

id objc_msgSend_unacceleratedRelativePosition(void *a1, const char *a2, ...)
{
  return _[a1 unacceleratedRelativePosition];
}

id objc_msgSend_unarchivedArrayOfObjectsOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedArrayOfObjectsOfClass:fromData:error:");
}

id objc_msgSend_unfinishedSpeechActionsWithCompletionBlocks(void *a1, const char *a2, ...)
{
  return _[a1 unfinishedSpeechActionsWithCompletionBlocks];
}

id objc_msgSend_unfocusedStateBorderThickness(void *a1, const char *a2, ...)
{
  return _[a1 unfocusedStateBorderThickness];
}

id objc_msgSend_unfocusedStateColor(void *a1, const char *a2, ...)
{
  return _[a1 unfocusedStateColor];
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentifier];
}

id objc_msgSend_unload(void *a1, const char *a2, ...)
{
  return _[a1 unload];
}

id objc_msgSend_unloadResources(void *a1, const char *a2, ...)
{
  return _[a1 unloadResources];
}

id objc_msgSend_unloadScanner(void *a1, const char *a2, ...)
{
  return _[a1 unloadScanner];
}

id objc_msgSend_unpressedAlpha(void *a1, const char *a2, ...)
{
  return _[a1 unpressedAlpha];
}

id objc_msgSend_unpressedScale(void *a1, const char *a2, ...)
{
  return _[a1 unpressedScale];
}

id objc_msgSend_unregisterFetchObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterFetchObserver:");
}

id objc_msgSend_unregisterMenuObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterMenuObserver:");
}

id objc_msgSend_unregisterShortcutsDidChangeBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterShortcutsDidChangeBlock:");
}

id objc_msgSend_unregisterUpdateBlockForRetrieveSelector_withListenerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterUpdateBlockForRetrieveSelector:withListenerID:");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_upButton(void *a1, const char *a2, ...)
{
  return _[a1 upButton];
}

id objc_msgSend_update(void *a1, const char *a2, ...)
{
  return _[a1 update];
}

id objc_msgSend_updateAfterFetchWithCurrentlyScannedElement_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAfterFetchWithCurrentlyScannedElement:options:");
}

id objc_msgSend_updateAllSettings(void *a1, const char *a2, ...)
{
  return _[a1 updateAllSettings];
}

id objc_msgSend_updateAssistiveTouchEyeTrackingAutoHideEnabled(void *a1, const char *a2, ...)
{
  return _[a1 updateAssistiveTouchEyeTrackingAutoHideEnabled];
}

id objc_msgSend_updateAssistiveTouchEyeTrackingAutoHideOpacity(void *a1, const char *a2, ...)
{
  return _[a1 updateAssistiveTouchEyeTrackingAutoHideOpacity];
}

id objc_msgSend_updateAssistiveTouchEyeTrackingAutoHideTimeout(void *a1, const char *a2, ...)
{
  return _[a1 updateAssistiveTouchEyeTrackingAutoHideTimeout];
}

id objc_msgSend_updateAutoHideMousePointer(void *a1, const char *a2, ...)
{
  return _[a1 updateAutoHideMousePointer];
}

id objc_msgSend_updateBlockForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBlockForIdentifier:");
}

id objc_msgSend_updateCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCache:");
}

id objc_msgSend_updateCacheWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCacheWithAttributes:");
}

id objc_msgSend_updateCachedOrbPreviewWindow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCachedOrbPreviewWindow:");
}

id objc_msgSend_updateCellForMenuItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCellForMenuItem:");
}

id objc_msgSend_updateCustomFocusingViewStateForViewsWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCustomFocusingViewStateForViewsWithElement:");
}

id objc_msgSend_updateCustomizableMouse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCustomizableMouse:");
}

id objc_msgSend_updateElementCacheScheme(void *a1, const char *a2, ...)
{
  return _[a1 updateElementCacheScheme];
}

id objc_msgSend_updateElementVisualsCoalescer(void *a1, const char *a2, ...)
{
  return _[a1 updateElementVisualsCoalescer];
}

id objc_msgSend_updateFocusState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFocusState:");
}

id objc_msgSend_updateForGeometryChange(void *a1, const char *a2, ...)
{
  return _[a1 updateForGeometryChange];
}

id objc_msgSend_updateForegroundImageForAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateForegroundImageForAction:");
}

id objc_msgSend_updateFrameForParentBounds_refinementPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFrameForParentBounds:refinementPoint:");
}

id objc_msgSend_updateHandler(void *a1, const char *a2, ...)
{
  return _[a1 updateHandler];
}

id objc_msgSend_updateItem(void *a1, const char *a2, ...)
{
  return _[a1 updateItem];
}

id objc_msgSend_updateLayerTreePosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLayerTreePosition:");
}

id objc_msgSend_updateLevel_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLevel:animated:");
}

id objc_msgSend_updateLevel_animated_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLevel:animated:options:");
}

id objc_msgSend_updateMainCursorWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMainCursorWithElement:");
}

id objc_msgSend_updateMenuSheetContentSize(void *a1, const char *a2, ...)
{
  return _[a1 updateMenuSheetContentSize];
}

id objc_msgSend_updateMenuStyle(void *a1, const char *a2, ...)
{
  return _[a1 updateMenuStyle];
}

id objc_msgSend_updateMenuVisibility(void *a1, const char *a2, ...)
{
  return _[a1 updateMenuVisibility];
}

id objc_msgSend_updateMenuVisualsForUpdatedElementVisuals(void *a1, const char *a2, ...)
{
  return _[a1 updateMenuVisualsForUpdatedElementVisuals];
}

id objc_msgSend_updateModernMenuItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateModernMenuItem:");
}

id objc_msgSend_updateNubbitForegroundImageForAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNubbitForegroundImageForAction:");
}

id objc_msgSend_updateOpacityForEyeTrackingAutoHide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateOpacityForEyeTrackingAutoHide:");
}

id objc_msgSend_updatePath_frame_isSimpleRect_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePath:frame:isSimpleRect:animated:");
}

id objc_msgSend_updatePath_frame_isSimpleRect_animated_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePath:frame:isSimpleRect:animated:options:");
}

id objc_msgSend_updatePointerAppearance(void *a1, const char *a2, ...)
{
  return _[a1 updatePointerAppearance];
}

id objc_msgSend_updateResizeIcon(void *a1, const char *a2, ...)
{
  return _[a1 updateResizeIcon];
}

id objc_msgSend_updateRingerSwitch(void *a1, const char *a2, ...)
{
  return _[a1 updateRingerSwitch];
}

id objc_msgSend_updateRotationLockSwitch(void *a1, const char *a2, ...)
{
  return _[a1 updateRotationLockSwitch];
}

id objc_msgSend_updateSensitivityMultiplier(void *a1, const char *a2, ...)
{
  return _[a1 updateSensitivityMultiplier];
}

id objc_msgSend_updateSoftwareKeyboardState(void *a1, const char *a2, ...)
{
  return _[a1 updateSoftwareKeyboardState];
}

id objc_msgSend_updateTextColor(void *a1, const char *a2, ...)
{
  return _[a1 updateTextColor];
}

id objc_msgSend_updateTheme_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTheme:animated:");
}

id objc_msgSend_updateTheme_animated_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTheme:animated:options:");
}

id objc_msgSend_updateTheme_level_path_frame_isSimpleRect_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTheme:level:path:frame:isSimpleRect:animated:");
}

id objc_msgSend_updateTheme_level_path_frame_isSimpleRect_animated_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTheme:level:path:frame:isSimpleRect:animated:options:");
}

id objc_msgSend_updateToFitWithinParentBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateToFitWithinParentBounds:");
}

id objc_msgSend_updateTrackpadBorderWidth(void *a1, const char *a2, ...)
{
  return _[a1 updateTrackpadBorderWidth];
}

id objc_msgSend_updateTrackpadFrameBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTrackpadFrameBounds:");
}

id objc_msgSend_updateTrackpadFrameLayer(void *a1, const char *a2, ...)
{
  return _[a1 updateTrackpadFrameLayer];
}

id objc_msgSend_updateTrackpadSize(void *a1, const char *a2, ...)
{
  return _[a1 updateTrackpadSize];
}

id objc_msgSend_updateViewControllerStackForSheet_previousSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateViewControllerStackForSheet:previousSheet:");
}

id objc_msgSend_updateWhetherSwitchConfigurationHasScreenSwitch(void *a1, const char *a2, ...)
{
  return _[a1 updateWhetherSwitchConfigurationHasScreenSwitch];
}

id objc_msgSend_updateWhetherSwitchConfigurationRendersDeviceUnusable(void *a1, const char *a2, ...)
{
  return _[a1 updateWhetherSwitchConfigurationRendersDeviceUnusable];
}

id objc_msgSend_updateWithContextElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithContextElement:");
}

id objc_msgSend_updateWithDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithDevice:error:");
}

id objc_msgSend_updateWithFocusContext_animated_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithFocusContext:animated:options:");
}

id objc_msgSend_updateWithPhase_withPicker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithPhase:withPicker:");
}

id objc_msgSend_updateWithPrimaryFingerPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithPrimaryFingerPoint:");
}

id objc_msgSend_updateWithSwitches_recipe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithSwitches:recipe:");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_usage(void *a1, const char *a2, ...)
{
  return _[a1 usage];
}

id objc_msgSend_useFocusContextOnResume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useFocusContextOnResume:");
}

id objc_msgSend_useSystemFilters(void *a1, const char *a2, ...)
{
  return _[a1 useSystemFilters];
}

id objc_msgSend_userBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userBoolValueForSetting:");
}

id objc_msgSend_userDefinedScanningBehaviorTraits(void *a1, const char *a2, ...)
{
  return _[a1 userDefinedScanningBehaviorTraits];
}

id objc_msgSend_userDidPerformSwitchAction(void *a1, const char *a2, ...)
{
  return _[a1 userDidPerformSwitchAction];
}

id objc_msgSend_userEventOccurred(void *a1, const char *a2, ...)
{
  return _[a1 userEventOccurred];
}

id objc_msgSend_userInteractionEnabledOnRockerDismissView(void *a1, const char *a2, ...)
{
  return _[a1 userInteractionEnabledOnRockerDismissView];
}

id objc_msgSend_userInterfaceClient(void *a1, const char *a2, ...)
{
  return _[a1 userInterfaceClient];
}

id objc_msgSend_userInterfaceClientEnablers(void *a1, const char *a2, ...)
{
  return _[a1 userInterfaceClientEnablers];
}

id objc_msgSend_userInterfaceClientForInputController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceClientForInputController:");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _[a1 userInterfaceIdiom];
}

id objc_msgSend_userInterfaceLayoutDirection(void *a1, const char *a2, ...)
{
  return _[a1 userInterfaceLayoutDirection];
}

id objc_msgSend_usesHighVisibility(void *a1, const char *a2, ...)
{
  return _[a1 usesHighVisibility];
}

id objc_msgSend_usesScenes(void *a1, const char *a2, ...)
{
  return _[a1 usesScenes];
}

id objc_msgSend_usesTwoLevelRefinement(void *a1, const char *a2, ...)
{
  return _[a1 usesTwoLevelRefinement];
}

id objc_msgSend_usingSpecialTool(void *a1, const char *a2, ...)
{
  return _[a1 usingSpecialTool];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _[a1 uuid];
}

id objc_msgSend_validateAndUpdateRecipeIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateAndUpdateRecipeIfNeeded:");
}

id objc_msgSend_validateClass_hasInstanceMethod_withFullSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateClass:hasInstanceMethod:withFullSignature:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForPointerSizeMultipler_withBaseValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForPointerSizeMultipler:withBaseValue:");
}

id objc_msgSend_valueWithBytes_objCType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithBytes:objCType:");
}

id objc_msgSend_valueWithCGPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCGPoint:");
}

id objc_msgSend_valueWithCGRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCGRect:");
}

id objc_msgSend_valueWithPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithPoint:");
}

id objc_msgSend_velocity(void *a1, const char *a2, ...)
{
  return _[a1 velocity];
}

id objc_msgSend_verticalContinuousScrollers(void *a1, const char *a2, ...)
{
  return _[a1 verticalContinuousScrollers];
}

id objc_msgSend_verticalScroller(void *a1, const char *a2, ...)
{
  return _[a1 verticalScroller];
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _[a1 view];
}

id objc_msgSend_viewAtDisplayPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewAtDisplayPoint:");
}

id objc_msgSend_viewAtDisplayPoint_downPoint_window_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewAtDisplayPoint:downPoint:window:");
}

id objc_msgSend_viewAtSystemPointerPoint(void *a1, const char *a2, ...)
{
  return _[a1 viewAtSystemPointerPoint];
}

id objc_msgSend_viewBottomConstraint(void *a1, const char *a2, ...)
{
  return _[a1 viewBottomConstraint];
}

id objc_msgSend_viewController(void *a1, const char *a2, ...)
{
  return _[a1 viewController];
}

id objc_msgSend_viewDidAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewDidAppear:");
}

id objc_msgSend_viewLeadingConstraint(void *a1, const char *a2, ...)
{
  return _[a1 viewLeadingConstraint];
}

id objc_msgSend_viewOrbActionTriggered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewOrbActionTriggered:");
}

id objc_msgSend_viewPressedDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewPressedDown:");
}

id objc_msgSend_viewPressedUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewPressedUp:");
}

id objc_msgSend_viewTopConstraint(void *a1, const char *a2, ...)
{
  return _[a1 viewTopConstraint];
}

id objc_msgSend_viewTrailingConstraint(void *a1, const char *a2, ...)
{
  return _[a1 viewTrailingConstraint];
}

id objc_msgSend_viewWillAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewWillAppear:");
}

id objc_msgSend_viewsRequiringStateUpdate(void *a1, const char *a2, ...)
{
  return _[a1 viewsRequiringStateUpdate];
}

id objc_msgSend_virtualMouseClient(void *a1, const char *a2, ...)
{
  return _[a1 virtualMouseClient];
}

id objc_msgSend_virtualMouseClientAssertionForActiveMotionTracker(void *a1, const char *a2, ...)
{
  return _[a1 virtualMouseClientAssertionForActiveMotionTracker];
}

id objc_msgSend_visibleCells(void *a1, const char *a2, ...)
{
  return _[a1 visibleCells];
}

id objc_msgSend_visibleFrame(void *a1, const char *a2, ...)
{
  return _[a1 visibleFrame];
}

id objc_msgSend_visibleItemOffset(void *a1, const char *a2, ...)
{
  return _[a1 visibleItemOffset];
}

id objc_msgSend_visiblePoint(void *a1, const char *a2, ...)
{
  return _[a1 visiblePoint];
}

id objc_msgSend_visibleTripleClickItems(void *a1, const char *a2, ...)
{
  return _[a1 visibleTripleClickItems];
}

id objc_msgSend_visualProvider(void *a1, const char *a2, ...)
{
  return _[a1 visualProvider];
}

id objc_msgSend_visualProviderDidDismiss(void *a1, const char *a2, ...)
{
  return _[a1 visualProviderDidDismiss];
}

id objc_msgSend_visualProviderDidPresent(void *a1, const char *a2, ...)
{
  return _[a1 visualProviderDidPresent];
}

id objc_msgSend_visualProviderDidUpdate(void *a1, const char *a2, ...)
{
  return _[a1 visualProviderDidUpdate];
}

id objc_msgSend_visualProviderWillDismiss(void *a1, const char *a2, ...)
{
  return _[a1 visualProviderWillDismiss];
}

id objc_msgSend_visualProviderWillPresent(void *a1, const char *a2, ...)
{
  return _[a1 visualProviderWillPresent];
}

id objc_msgSend_visualsHidden(void *a1, const char *a2, ...)
{
  return _[a1 visualsHidden];
}

id objc_msgSend_voiceId(void *a1, const char *a2, ...)
{
  return _[a1 voiceId];
}

id objc_msgSend_voiceOverEffectiveSpeakingVolume(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverEffectiveSpeakingVolume];
}

id objc_msgSend_voiceOverMediaDuckingAmount(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverMediaDuckingAmount];
}

id objc_msgSend_voiceOverMediaDuckingMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverMediaDuckingMode];
}

id objc_msgSend_voiceSelectionForLanguageCode_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voiceSelectionForLanguageCode:completionHandler:");
}

id objc_msgSend_volume(void *a1, const char *a2, ...)
{
  return _[a1 volume];
}

id objc_msgSend_volumeChanged(void *a1, const char *a2, ...)
{
  return _[a1 volumeChanged];
}

id objc_msgSend_volumeLevel(void *a1, const char *a2, ...)
{
  return _[a1 volumeLevel];
}

id objc_msgSend_waitForDragStartFromPid_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForDragStartFromPid:completion:");
}

id objc_msgSend_waitForDragStartFromPid_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForDragStartFromPid:completionHandler:");
}

id objc_msgSend_waitForOpenGroup(void *a1, const char *a2, ...)
{
  return _[a1 waitForOpenGroup];
}

id objc_msgSend_waitingForSecureIntent(void *a1, const char *a2, ...)
{
  return _[a1 waitingForSecureIntent];
}

id objc_msgSend_waitsForSelectAction(void *a1, const char *a2, ...)
{
  return _[a1 waitsForSelectAction];
}

id objc_msgSend_wakeDeviceFromSleepIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 wakeDeviceFromSleepIfNecessary];
}

id objc_msgSend_wakeUpDeviceIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 wakeUpDeviceIfNecessary];
}

id objc_msgSend_warm(void *a1, const char *a2, ...)
{
  return _[a1 warm];
}

id objc_msgSend_wasPostedByAccessibility(void *a1, const char *a2, ...)
{
  return _[a1 wasPostedByAccessibility];
}

id objc_msgSend_wasPresentedWithTip(void *a1, const char *a2, ...)
{
  return _[a1 wasPresentedWithTip];
}

id objc_msgSend_wasSnappedInBubbleMode(void *a1, const char *a2, ...)
{
  return _[a1 wasSnappedInBubbleMode];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakObjectsPointerArray(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsPointerArray];
}

id objc_msgSend_wheel(void *a1, const char *a2, ...)
{
  return _[a1 wheel];
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _[a1 whiteColor];
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceAndNewlineCharacterSet];
}

id objc_msgSend_widthAnchor(void *a1, const char *a2, ...)
{
  return _[a1 widthAnchor];
}

id objc_msgSend_widthConstraint(void *a1, const char *a2, ...)
{
  return _[a1 widthConstraint];
}

id objc_msgSend_willBePresentedWithElement_pointPicker_sheetToShow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willBePresentedWithElement:pointPicker:sheetToShow:");
}

id objc_msgSend_willBecomeCurrentAuxiliaryElementManager(void *a1, const char *a2, ...)
{
  return _[a1 willBecomeCurrentAuxiliaryElementManager];
}

id objc_msgSend_willBecomeScannerDriver(void *a1, const char *a2, ...)
{
  return _[a1 willBecomeScannerDriver];
}

id objc_msgSend_willBeginProvidingElements(void *a1, const char *a2, ...)
{
  return _[a1 willBeginProvidingElements];
}

id objc_msgSend_willDismiss_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willDismiss:");
}

id objc_msgSend_willDrillIntoGroup(void *a1, const char *a2, ...)
{
  return _[a1 willDrillIntoGroup];
}

id objc_msgSend_willDrillOutOfGroup(void *a1, const char *a2, ...)
{
  return _[a1 willDrillOutOfGroup];
}

id objc_msgSend_willFetchElements(void *a1, const char *a2, ...)
{
  return _[a1 willFetchElements];
}

id objc_msgSend_willFinishAsScannerDriver(void *a1, const char *a2, ...)
{
  return _[a1 willFinishAsScannerDriver];
}

id objc_msgSend_willFocusOnContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willFocusOnContext:");
}

id objc_msgSend_willIncludeTitleLabels(void *a1, const char *a2, ...)
{
  return _[a1 willIncludeTitleLabels];
}

id objc_msgSend_willMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willMoveToParentViewController:");
}

id objc_msgSend_willPopPinchItemsViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willPopPinchItemsViewController:");
}

id objc_msgSend_willPresentWithDisplayContext_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willPresentWithDisplayContext:animated:");
}

id objc_msgSend_willResignCurrentAuxiliaryElementManager(void *a1, const char *a2, ...)
{
  return _[a1 willResignCurrentAuxiliaryElementManager];
}

id objc_msgSend_willScanFirstElementAfterPresentation(void *a1, const char *a2, ...)
{
  return _[a1 willScanFirstElementAfterPresentation];
}

id objc_msgSend_willTransitionToSheet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willTransitionToSheet:");
}

id objc_msgSend_willUnfocusFromContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willUnfocusFromContext:");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _[a1 window];
}

id objc_msgSend_windowContextId(void *a1, const char *a2, ...)
{
  return _[a1 windowContextId];
}

id objc_msgSend_windowDisplayId(void *a1, const char *a2, ...)
{
  return _[a1 windowDisplayId];
}

id objc_msgSend_windowRotationDuration(void *a1, const char *a2, ...)
{
  return _[a1 windowRotationDuration];
}

id objc_msgSend_windowScene(void *a1, const char *a2, ...)
{
  return _[a1 windowScene];
}

id objc_msgSend_windowSceneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 windowSceneIdentifier];
}

id objc_msgSend_xAxis(void *a1, const char *a2, ...)
{
  return _[a1 xAxis];
}

id objc_msgSend_yAxis(void *a1, const char *a2, ...)
{
  return _[a1 yAxis];
}

id objc_msgSend_zoomConvertToReplicatedViewFromTargetPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomConvertToReplicatedViewFromTargetPoint:");
}

id objc_msgSend_zoomIn(void *a1, const char *a2, ...)
{
  return _[a1 zoomIn];
}

id objc_msgSend_zoomInAt_screenBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomInAt:screenBounds:");
}

id objc_msgSend_zoomLevelOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomLevelOnDisplay:");
}

id objc_msgSend_zoomOut(void *a1, const char *a2, ...)
{
  return _[a1 zoomOut];
}

id objc_msgSend_zoomOutAt_screenBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomOutAt:screenBounds:");
}

id objc_msgSend_zoomReplicatedView(void *a1, const char *a2, ...)
{
  return _[a1 zoomReplicatedView];
}

id objc_msgSend_zoomViewController(void *a1, const char *a2, ...)
{
  return _[a1 zoomViewController];
}