@interface VOTElementManager
+ (void)_exitThread:(id)a3;
+ (void)initialize;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserAllSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserCharacterSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserLineSelectionInElement:(id)a3 currentRange:(id)a4 rightward:(BOOL)a5;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserPageSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserWordSelectionInElement:(id)a3 currentRange:(id)a4 rightward:(BOOL)a5;
- ($D3A4C128BFADF90F63068A1E85A19F01)_appInfoForCurrentElement;
- (AXCameraSceneDescriber)cameraSceneDescriber;
- (AXScribbleManager)safariScribbleManager;
- (BOOL)_addApplicationLabelsAndSummariesToRequest:(id)a3 applicationNames:(id *)a4 summaryElements:(id *)a5;
- (BOOL)_addElementCommunityNameIfNeededToRequest:(id)a3 oldElementCommunity:(id)a4 newElementCommunity:(id)a5;
- (BOOL)_bookContentElementInteraction:(CGPoint)a3 element:(id)a4;
- (BOOL)_bundleIdentifierIsHostedByPineBoard:(id)a3;
- (BOOL)_canActivateTapticTime;
- (BOOL)_chartElementDidChangeForElement:(id)a3 oldElement:(id)a4;
- (BOOL)_continueTrackingKeyboardKey:(id)a3;
- (BOOL)_continueTrackingRoadElementWithPoint:(CGPoint)a3;
- (BOOL)_customRotorTypeRequiresFirstElementProcessing:(id)a3;
- (BOOL)_didFocusUpdateOriginateFromFocusedApp:(id)a3;
- (BOOL)_echoLineInElement:(id)a3 forEvent:(id)a4 forDifferentElement:(BOOL)a5;
- (BOOL)_elementMonitoringOutputElement:(id)a3 userMonitored:(BOOL)a4;
- (BOOL)_finishHandlingMoveToElementNotification:(id)a3 shouldSyncNativeFocusElement:(id)a4 shouldEchoSameTouchContainer:(id)a5 shouldScrollToElement:(id)a6 shouldPlayTrackingSound:(id)a7 shouldRefocusIfSameElement:(id)a8;
- (BOOL)_flashlightNotificationsEnabled;
- (BOOL)_handleBookNavigateOverPageBoundary:(int64_t)a3 unit:(int64_t)a4;
- (BOOL)_handleMoreBookContentElements;
- (BOOL)_handleMoveIn:(id)a3;
- (BOOL)_handleMoveOut:(id)a3;
- (BOOL)_handleMovementForElementFollowingElement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5 mode:(int64_t)a6;
- (BOOL)_handleNextAutofill:(id)a3 reverse:(BOOL)a4;
- (BOOL)_handleSimulatedLongPress:(id)a3;
- (BOOL)_hasApplicationMatchingBlock:(id)a3 inApplications:(id)a4;
- (BOOL)_hasCurrentApplicationMatchingBlock:(id)a3;
- (BOOL)_ignoreTextEditingNotificationsForPickerElementUsage;
- (BOOL)_inMisspelledWordRotor;
- (BOOL)_isDictationInProgressForCurrentApp;
- (BOOL)_isElementValidForFirstResponder:(id)a3;
- (BOOL)_isKeyboardLineMovement;
- (BOOL)_isPoint:(CGPoint)a3 withinRangeForDividerElement:(id)a4;
- (BOOL)_isShowingTodayViewForPhone;
- (BOOL)_isTouchTypingEventTooCloseToEdge:(id)a3;
- (BOOL)_isWebAppStillOpen;
- (BOOL)_languageRotorItemsContainLanguage:(id)a3;
- (BOOL)_moveElementToFlowTo:(id)a3;
- (BOOL)_moveToWebItemDuringLoadIfNecessary;
- (BOOL)_needsPhoneticBrailleForLanauge:(id)a3;
- (BOOL)_notificationData:(id)a3 containsToken:(id)a4;
- (BOOL)_prepareElementOutputHeaders:(id)a3 currentElement:(id)a4 request:(id)a5;
- (BOOL)_prepareStitchedWebReadAll:(id)a3 request:(id)a4 setCurrentElement:(BOOL *)a5;
- (BOOL)_processWatchSpecificOverrides:(id)a3;
- (BOOL)_reDispatchUpdateAppFromTimerIfBundlesAreNotReady;
- (BOOL)_rotorTypeSupportsCounting:(int64_t)a3;
- (BOOL)_savedDescriptionToPhoto:(id)a3 description:(id)a4 element:(id)a5;
- (BOOL)_sendTVRemoteCommandOverrideForAXCommand:(int64_t)a3;
- (BOOL)_setCurrentElement:(id)a3;
- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4;
- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4 shouldResetTextSelection:(BOOL)a5 shouldResetCharacterRange:(BOOL)a6 ignoreIsAccessibilityElementCheck:(BOOL)a7;
- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4 shouldResetTextSelection:(BOOL)a5 shouldResetCharacterRange:(BOOL)a6 ignoreIsAccessibilityElementCheck:(BOOL)a7 shouldSetBrailleElement:(BOOL)a8;
- (BOOL)_setCurrentElement:(id)a3 shouldSetBrailleElement:(id)a4;
- (BOOL)_shouldAllowSpeakThisGesture;
- (BOOL)_shouldAnnounceCustomRotorHintForElement:(id)a3;
- (BOOL)_shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent:(id)a3;
- (BOOL)_shouldIgnoreElementMovementNotification:(id)a3;
- (BOOL)_shouldIgnoreNotificationForContinuityDisplay:(id)a3 withElement:(__AXUIElement *)a4;
- (BOOL)_shouldIncludeContainerInDescriptionForCurrentElement:(id)a3 previousElement:(id)a4;
- (BOOL)_shouldMoveToLastWebFormControl;
- (BOOL)_shouldNotSpeakForIncomingCall;
- (BOOL)_shouldSendTapStraightToSystem;
- (BOOL)_shouldSuppressSpeechForPlayPause;
- (BOOL)_shouldSwitchToFirstResponder:(id)a3;
- (BOOL)_touchContainerDidChangeForElement:(id)a3 oldElement:(id)a4;
- (BOOL)_updateCursorAfterPressForElement:(id)a3 currentElementRange:(_NSRange)a4 request:(id)a5 didHaveCursor:(BOOL)a6 doesHaveCursor:(BOOL)a7;
- (BOOL)_updateWithMostRecentElementCommunity:(id)a3;
- (BOOL)_useLineFrameBoundsForTouch:(id)a3;
- (BOOL)allowsSystemControlEventForPosition:(int)a3;
- (BOOL)avoidAnnouncingDirectTouchArea;
- (BOOL)commandPermittedForTutorialPage:(id)a3;
- (BOOL)currentElementAllowsDirectTouch;
- (BOOL)customRotorActionsEqual:(id)a3 otherActions:(id)a4 ignoreDragItems:(BOOL)a5;
- (BOOL)detectionModeRotorActive;
- (BOOL)determineFullImageDescriptionsEnabled:(id)a3;
- (BOOL)determineSceneDetectionsEnabled:(id)a3;
- (BOOL)didCacheSideAppDividerElement;
- (BOOL)didIgnoreLastFirstResponderChangeOnSelectionChange;
- (BOOL)didReceiveForceUpdateChangeToken;
- (BOOL)directTouchModeHandledEvent:(id)a3;
- (BOOL)dragSessionActive;
- (BOOL)elementEligibleToFindTitleElement:(id)a3;
- (BOOL)eventIsSystemEvent:(id)a3;
- (BOOL)exploreFocusAffectsNativeFocus;
- (BOOL)explorerElementManagerShouldBeInUnitTestingMode:(id)a3;
- (BOOL)forceRotorOffGesturedTextInputIfNeeded:(BOOL)a3;
- (BOOL)handleTVMenuButtonClicked;
- (BOOL)handleTVSelectButtonClicked;
- (BOOL)inDirectTouchMode;
- (BOOL)inTextSelection;
- (BOOL)isContinuitySessionActive;
- (BOOL)isItemChooserVisible;
- (BOOL)isOnElementManagerThread;
- (BOOL)isReadingAll;
- (BOOL)isTutorialActive;
- (BOOL)isUpdatingFocus;
- (BOOL)isValidElementForImageExploration;
- (BOOL)mlElement:(id)a3 sharesLabel:(id)a4;
- (BOOL)needsUpdateFocus;
- (BOOL)rotorEnabled;
- (BOOL)screenCurtainIsTemporarilyDisabled;
- (BOOL)selectingRightward;
- (BOOL)shouldAllowSpeaking;
- (BOOL)shouldElement:(id)a3 beCombined:(id)a4 combineLinks:(BOOL)a5;
- (BOOL)shouldSilenceAnnouncements;
- (BOOL)shouldSnarfCrown;
- (BOOL)shouldTurnTrackingIntoDirectTouch;
- (BOOL)shouldTutorialIgnoreCommand:(id)a3;
- (BOOL)speakNonfocusableElementsAfterDelay;
- (BOOL)speakTableHeadersForElement:(id)a3;
- (BOOL)speakTableRowAndColumnForElement:(id)a3;
- (BOOL)stringIsTextAttachment:(id)a3;
- (BOOL)tutorialListeningForGestureNotifications;
- (BOOL)tvIsInteractingWithRotor;
- (BOOL)unitTestingMode;
- (BOOL)waitingToRetryFocus;
- (CGRect)currentLineFrame;
- (NSArray)cachedAdditionalElementCommunities;
- (NSArray)previouslySpokenImageCaptionResults;
- (NSDictionary)currentContextDescriptors;
- (NSDictionary)previousContextDescriptors;
- (NSLock)tvAccessLock;
- (NSMutableArray)previousTableOrCollectionViewList;
- (NSMutableArray)tutorialRestrictedCommands;
- (NSMutableDictionary)directTouchApps;
- (NSMutableDictionary)fingersFromTouchCommands;
- (NSMutableDictionary)previousTableOrCollectionViewToMetadata;
- (NSSet)previousCustomRotorsForRotorHint;
- (NSString)lastEventCommand;
- (NSString)lastItemChooserSearchTerm;
- (NSString)nextStringToSpeakOnScreenChange;
- (NSString)previousFirstResponderValue;
- (NSString)springBoardActionHandlerIdentifier;
- (NSString)tutorialPage;
- (NSString)tutorialRecognizedGesture;
- (NSURL)webPageLoadURL;
- (SCRCTargetSelectorTimer)webPageElementFinder;
- (VOTElement)cachedSideAppDividerElement;
- (VOTElement)firstTrackedAppInGesture;
- (VOTElement)initialReadAllElement;
- (VOTElement)lastContainerForCustomRotorHint;
- (VOTElement)lastElementForAttemptToShowContextMenu;
- (VOTElement)lastTrackingUpdateAppsFailureApplication;
- (VOTElement)mostRecentElementCommunity;
- (VOTElement)nativeFocusElement;
- (VOTElement)nextElementToFocus;
- (VOTElement)previousFirstResponder;
- (VOTElement)previousTableOrCollectionViewApplication;
- (VOTElement)touchContainer;
- (VOTElementManager)init;
- (VOTElementUpdateProtocol)updateDelegate;
- (VOTExplorerElementManager)explorerElementManager;
- (VOTOutputRequest)delayedNotificationAnnouncementRequest;
- (VOTOutputRequest)lastRequestBlockedBySiriOrDictation;
- (VOTTVGestureRepeater)tvGestureRepeater;
- (VOTTVSpeechRequestManager)tvSpeechRequestManager;
- (VOTTextMovementManager)textSelectionMovementManager;
- (VOTUpdateFocusContext)updateFocusContext;
- (_NSRange)_characterRangeWithFaultTolerance:(int64_t)a3 forward:(BOOL)a4 element:(id)a5;
- (_NSRange)_elementSelectionRange;
- (_NSRange)_highlightedCharacterRange;
- (_NSRange)_lineRangeWithFaultTolerance:(int64_t)a3 forward:(BOOL)a4 element:(id)a5;
- (_NSRange)_outputRangeForCharacterSegment:(id)a3 direction:(int64_t)a4;
- (_NSRange)_rangeOfLine:(id)a3 inBookContent:(id)a4;
- (_NSRange)outputRangeForTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4 string:(id)a5 element:(id)a6;
- (__AXUIElement)_firstResponderAXUIElementRefFromCurrentApplications;
- (double)_alternativeKeyActivateTime;
- (double)_brailleAutoAdvanceStepFactor;
- (double)_brailleMaxOrigin;
- (double)_pressActionResultDelay;
- (double)_realTimeAdjustableUpdateFrequency:(id)a3;
- (double)continuousPathTimeout;
- (double)keyboardKeyPenumbra:(id)a3;
- (double)lastActivationTime;
- (double)lastAlertTime;
- (double)lastAttemptToShowContextMenuTime;
- (double)lastBlockedRequestBySiriOrDictationTime;
- (double)lastCursorBorderHitTime;
- (double)lastDuckingDisablementSessionStart;
- (double)lastElementChangeTime;
- (double)lastEventOccurredTime;
- (double)lastExternalUnlockTime;
- (double)lastFirstResponderChangeTime;
- (double)lastFolderOperationTime;
- (double)lastHomeButtonPressTime;
- (double)lastLayoutChangeNotificationTime;
- (double)lastNothingSoundTime;
- (double)lastPauseSpeechAndHapticsStart;
- (double)lastPressOnMediaSessionElement;
- (double)lastScreenChangeNotificationTime;
- (double)lastScreenWakeViaPlayPause;
- (double)lastSearchForElementsTime;
- (double)lastSelectionChangeTime;
- (double)lastSilencedAlertTime;
- (double)lastTemporaryQuickNavDisableTime;
- (double)lastTrackingUpdateAppsFailureTime;
- (double)lastUserElementTouchTime;
- (double)lastValueChangeTime;
- (double)lastWebPageLoadTime;
- (double)rotorRate;
- (double)timeSpentOnNothing;
- (double)touchTypingStartTime;
- (id)__consumeAppTransitionForAnnouncingIfNeeded:(id)a3;
- (id)__targetElementForFocusElement:(id)a3 mustBeAccessibilityElement:(BOOL)a4;
- (id)_additionalElementCommunities;
- (id)_allElementCommunitiesWithFocusedApplications:(id)a3;
- (id)_applicationMatchingBlock:(id)a3 inApplications:(id)a4;
- (id)_audioDuckingModeString;
- (id)_brailleAutoAdvanceSpeedString;
- (id)_cachedLaunchIcon:(id)a3;
- (id)_checkDataDetectorIfPresent:(CGRect)a3 element:(id)a4 includeLinks:(BOOL)a5;
- (id)_computeChangedFontAttributes:(id)a3 storedAttributes:(id)a4 haveMisspellCheck:(BOOL)a5;
- (id)_convertTextMarkerArrayToString:(id)a3 addInContentExtras:(BOOL)a4;
- (id)_copyMatchBlockAnyElement;
- (id)_copyMatchBlockArticleStart;
- (id)_copyMatchBlockBlockquote;
- (id)_copyMatchBlockButton;
- (id)_copyMatchBlockCheckbox;
- (id)_copyMatchBlockDifferent;
- (id)_copyMatchBlockForHeadingLevel:(int64_t)a3 searchType:(int64_t *)a4;
- (id)_copyMatchBlockForRotorType:(int64_t)a3 searchType:(int64_t *)a4;
- (id)_copyMatchBlockForTextAttribute:(int64_t)a3 searchType:(int64_t *)a4;
- (id)_copyMatchBlockFormElement;
- (id)_copyMatchBlockFrameStart;
- (id)_copyMatchBlockHeader;
- (id)_copyMatchBlockImage;
- (id)_copyMatchBlockInternalLink;
- (id)_copyMatchBlockLandmarkStart;
- (id)_copyMatchBlockLink;
- (id)_copyMatchBlockListStart;
- (id)_copyMatchBlockNonVisitedLink;
- (id)_copyMatchBlockRadioButton;
- (id)_copyMatchBlockSameBlockquote;
- (id)_copyMatchBlockSameHeading;
- (id)_copyMatchBlockSearchField;
- (id)_copyMatchBlockSearchText;
- (id)_copyMatchBlockSimilar;
- (id)_copyMatchBlockStaticText;
- (id)_copyMatchBlockTableStart;
- (id)_copyMatchBlockTextField;
- (id)_copyMatchBlockVisitedLink;
- (id)_copyRangeMatchBlockForRotorType:(int64_t)a3;
- (id)_copySideAppDividerElementIfApplicableForPoint:(CGPoint)a3;
- (id)_currentApplicationMatchingBlock:(id)a3;
- (id)_currentCachedCustomActionCategories;
- (id)_currentCustomActionCategory;
- (id)_currentCustomActions;
- (id)_currentElement;
- (id)_currentElementAtCenterPointOfElement:(id)a3;
- (id)_currentMedusaApplications;
- (id)_currentResponder;
- (id)_currentRotorSelection;
- (id)_currentTextLineInBookElement:(BOOL)a3;
- (id)_customActionDefaultActionString;
- (id)_customActionIdentifier;
- (id)_customActionsAddingDragCancelActionIfNecessaryForActions:(id)a3;
- (id)_dockElementForDisplay;
- (id)_echoDifferentTouchContainer:(id)a3 forEvent:(id)a4;
- (id)_elementCommunityForElement:(id)a3;
- (id)_elementToFocusWhenSwitchingToElementCommunity:(id)a3;
- (id)_fetchManager;
- (id)_firstElementForFocusFromElementCommunities:(id)a3 currentElement:(id)a4;
- (id)_firstElementWithCurrentElement:(id)a3 focusedApplications:(id)a4;
- (id)_firstResponderForApplications:(id)a3;
- (id)_firstResponderFromCurrentApplications;
- (id)_focusElementForFocusUpdate:(id)a3;
- (id)_fontDisplayNameForFontName:(id)a3;
- (id)_getAutoSpeakWatchFaceElements:(id)a3;
- (id)_getNewElementExplorer;
- (id)_getNextFocusedElementInElementCommunityPrevious:(BOOL)a3 shouldUseCache:(BOOL)a4 shouldWrapAround:(BOOL)a5;
- (id)_getSpeakableContainerForContainer:(id)a3;
- (id)_handleEditingStyleResolutionForAnnouncement:(id)a3;
- (id)_handleProtectedAppLogicForEvent:(id)a3 element:(id)a4 point:(CGPoint)a5;
- (id)_imageExplorerCachedResults;
- (id)_lastApplication;
- (id)_lastSeenFontProperties;
- (id)_listItemLabelForAXAttributedString:(id)a3;
- (id)_localizedStringForCurrentBrailleTextMode;
- (id)_localizedTypingModeStringForCurrentMode;
- (id)_monitoredElementCachedText:(id)a3;
- (id)_navigationDirectionModeString:(int64_t)a3;
- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4;
- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4 forward:(BOOL)a5;
- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4 forward:(BOOL)a5 itemCheckCount:(int64_t)a6;
- (id)_nearestScrollableElement:(id)a3;
- (id)_nearestWebElement:(id)a3;
- (id)_notificationData:(id)a3 consumingToken:(id)a4;
- (id)_orderedMonitoredFontAttributes;
- (id)_phoneticStringForLetter:(id)a3 language:(id)a4;
- (id)_retrieveCachedFocusedElementForElementCommunity:(id)a3;
- (id)_retrieveCurrentCharacterFromEditableElement;
- (id)_retrieveDefaultElementForPosition:(CGPoint)a3;
- (id)_sideAppDividerElement;
- (id)_similarMonitoredElement:(id)a3;
- (id)_sonarElementFromPoint:(CGPoint)a3 inForwardDirection:(BOOL)a4 limit:(int64_t)a5;
- (id)_sonarElementInForwardDirection:(BOOL)a3 limit:(int64_t)a4;
- (id)_speechPhoneticsString;
- (id)_stringForApplicationWithName:(id)a3 inApplications:(id)a4 withRole:(int64_t)a5;
- (id)_textAttachmentElementForString:(id)a3 inRange:(_NSRange)a4;
- (id)_treePositionForMathSegment:(id)a3;
- (id)_typingEchoString;
- (id)_updateTouchContainerForElement:(id)a3 playSound:(BOOL)a4;
- (id)_valueForKeyPathOnElementManagerThread:(id)a3;
- (id)_verifiedElementWithElement:(id)a3;
- (id)_verifiedElementWithElement:(id)a3 atPoint:(CGPoint)a4;
- (id)availableAudiographActionsForElement:(id)a3;
- (id)continuousPathSuggestion;
- (id)currentApplications;
- (id)currentElement;
- (id)currentElementChangedCallback;
- (id)determineActivityForElement:(id)a3;
- (id)dragOutputManager;
- (id)elementManagerHandledEventCallback;
- (id)elementRotor;
- (id)focusedApplication:(id)a3;
- (id)webCustomRotorDictionary:(id)a3 direction:(int64_t)a4 forElement:(id)a5;
- (id)webEditableAncestor:(id)a3;
- (int)cancelElementCountOutput;
- (int64_t)_adjustedRotorIndex:(int64_t)a3 inDirection:(int64_t)a4 rotorItems:(id)a5 validationBlock:(id)a6;
- (int64_t)_customActionIndex;
- (int64_t)_newNavigationDirectionModeForRotorDirection:(int64_t)a3;
- (int64_t)_tvOS_userPreferredNonDirectTouchInteractionMode;
- (int64_t)actionsRotorAddBehaviorForElementRotor:(id)a3;
- (int64_t)currentRotorType;
- (int64_t)focusRetryAttempts;
- (int64_t)forceUpdateMask;
- (int64_t)lastElementBlockquoteLevel;
- (int64_t)lastElementChangeAction;
- (int64_t)lastElementHeadingLevel;
- (int64_t)modifierKeyChoiceForElement:(id)a3;
- (int64_t)tutorialActiveRestrictionType;
- (int64_t)tvInteractionModeForElementRotor:(id)a3;
- (int64_t)typingFeedbackForKeyboardType;
- (unint64_t)_currentMathGranularityLevel;
- (unint64_t)currentSimilarTraits;
- (unint64_t)elementGeneration;
- (unint64_t)filterTraitsByPriority:(unint64_t)a3;
- (unint64_t)lastTextPressAction;
- (unint64_t)webPageLoadedGenerationMark;
- (void)__handleExpandedStatusChanged;
- (void)__handleTVMenuButtonClicked;
- (void)__handleTVSelectButtonClicked;
- (void)__handleUpdateVisualsTimer;
- (void)__interruptSpeachAndPlayBorderHitSound;
- (void)__retrieveValueForKeyPath:(id)a3 intoPointedToLocation:(id)a4 semaphore:(id)a5;
- (void)__sendHIDEvents:(id)a3 postEventDelays:(id)a4;
- (void)__sendOutputRequest:(id)a3;
- (void)__sendTVRemoteCommand:(unint64_t)a3;
- (void)__tvOS_handleUpdatePreferredTVInteractionModeTimer;
- (void)__tvOS_handleValueChangedWithType:(id)a3 oldValue:(id)a4 newValue:(id)a5 insertedTextOrNil:(id)a6 isSecureText:(BOOL)a7;
- (void)__tvOS_toggleAudioDescriptions;
- (void)__tvOS_toggleExploreFocusAffectsNativeFocusPreference;
- (void)__tvOS_toggleSilenceAnnouncementsUserPreference;
- (void)__tvOS_toggleSpeakNonfocusableElementsAfterDelayUserPreference;
- (void)__updateElementVisuals;
- (void)_activateAlternativeKeyboardKey:(id)a3;
- (void)_activateBrailleScreenInputIfNeededForElement:(id)a3;
- (void)_addDescription:(id)a3 toRequest:(id)a4 withOptions:(unint64_t)a5;
- (void)_addDescription:(id)a3 toRequest:(id)a4 withOptions:(unint64_t)a5 lastSeenContextDescriptors:(id)a6;
- (void)_addFormattedStringToRequest:(id)a3 formattedString:(id)a4 withElement:(id)a5;
- (void)_appSuspensionSoundTimer;
- (void)_appendCurrentRotorValue:(id)a3 forRotor:(id)a4;
- (void)_cacheFocusedElement:(id)a3 forElementCommunity:(id)a4;
- (void)_cancelPreviousElementSearch;
- (void)_captionsDisplayedWithTextRuns:(id)a3;
- (void)_cleanupMapInteractionOnIdle;
- (void)_cleanupStateForUnitTesting;
- (void)_clearWebLoadedSound;
- (void)_closeItemChooser;
- (void)_continueReadAllWithElement:(id)a3 setCurrentElement:(BOOL *)a4;
- (void)_continuousPathIdleTimer:(id)a3;
- (void)_customPublicRotorMatchForType:(id)a3 range:(_NSRange *)a4 element:(id *)a5 direction:(int64_t)a6 lastSearchUUID:(id *)a7;
- (void)_deactivateGesturedTextInputIfNeeded:(id)a3;
- (void)_didDismissItemChooser;
- (void)_disableQuickNavStateTemporarily;
- (void)_dismissAlternativeKeyboardKeys;
- (void)_dragChangedToStatus:(id)a3;
- (void)_dragEnded;
- (void)_dragMoved;
- (void)_dragStarted;
- (void)_dragTerminated;
- (void)_drawTouchContainerFrame;
- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4;
- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 canSetAsCurrentElement:(BOOL)a6 shouldPlayGuideWireSound:(BOOL)a7 isProtectedApp:(BOOL)a8 includeHint:(BOOL)a9 boundaryHit:(BOOL)a10;
- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 shouldPlayGuideWireSound:(BOOL)a6;
- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 shouldPlayGuideWireSound:(BOOL)a6 isProtectedApp:(BOOL)a7;
- (void)_echoFlickNavigationElement:(id)a3;
- (void)_echoLineInBookElement:(id)a3 forEvent:(id)a4;
- (void)_echoNoElementForEvent:(id)a3;
- (void)_echoSameElement:(id)a3 forEvent:(id)a4;
- (void)_echoSearchNavigationElement:(id)a3 forRangeAdjustment:(BOOL)a4;
- (void)_echoSearchTypeNotFound:(int64_t)a3;
- (void)_echoStatusBarStatus:(id)a3;
- (void)_elementFetchFoundDirectTouchElements:(id)a3;
- (void)_elementFetchFoundElement:(id)a3;
- (void)_elementSelectionRangeDidChange:(_NSRange)a3 reason:(int64_t)a4;
- (void)_elementUpdatesFrequently;
- (void)_elementsRetrieved:(id)a3 finished:(id)a4;
- (void)_endNativeSliding:(BOOL)a3;
- (void)_endTextSearchMode;
- (void)_fetchElementsFrom:(id)a3 inDirection:(id)a4 count:(id)a5 scroll:(id)a6 block:(id)a7;
- (void)_finishHandlingLineMovementInWeb:(id)a3 direction:(id)a4 withCurrentElement:(id)a5 markerArray:(id)a6 textObjects:(id)a7 existingRequest:(id)a8;
- (void)_finishHandlingNextAutofillWithElement:(id)a3;
- (void)_finishPassthroughMode;
- (void)_forceVisionRefresh;
- (void)_formatRequestForBrailleAlertConditional:(id)a3;
- (void)_handleActivateBrailleScreenInput:(id)a3;
- (void)_handleActivateBrailleScreenInputCommand:(id)a3;
- (void)_handleActivateHomeButton:(id)a3;
- (void)_handleActivityRotorChange:(BOOL)a3;
- (void)_handleAdjustTextSelectionSegmentType:(id)a3;
- (void)_handleAdjustValue:(id)a3 reverse:(BOOL)a4;
- (void)_handleAlertReceived:(id)a3 forApplication:(__AXUIElement *)a4;
- (void)_handleAnnounceQuickNav:(id)a3;
- (void)_handleAnnouncement:(id)a3;
- (void)_handleAnnouncementNotification:(id)a3;
- (void)_handleAnnouncementWithData:(id)a3 pid:(int)a4;
- (void)_handleAppSuspendAnimationProgressNotification:(id)a3;
- (void)_handleAppSwitch:(id)a3;
- (void)_handleAudioDestination:(BOOL)a3;
- (void)_handleAudioDuckingAmountChange:(BOOL)a3;
- (void)_handleAudioDuckingChange:(BOOL)a3;
- (void)_handleAudioDuckingModeChange:(BOOL)a3;
- (void)_handleAudiographAction:(int64_t)a3 event:(id)a4;
- (void)_handleAudiographPlaybackStateNotification:(id)a3;
- (void)_handleAudiographSelectedSeriesChangedNotification:(id)a3;
- (void)_handleAutoCorrectionDisplayNotification:(id)a3;
- (void)_handleAutoCorrectionMadeNotification:(id)a3;
- (void)_handleAutomaticAppAccessibilityToggle:(id)a3;
- (void)_handleAutomationGeneratedChordChangeEvent:(id)a3;
- (void)_handleAutomationGeneratedTouchCancelEvent:(id)a3;
- (void)_handleAutomationGeneratedTouchDownEvent:(id)a3;
- (void)_handleAutomationGeneratedTouchMoveEvent:(id)a3;
- (void)_handleAutomationGeneratedTouchUpEvent:(id)a3;
- (void)_handleBSINextRotor:(id)a3;
- (void)_handleBSIPreviousRotor:(id)a3;
- (void)_handleBarcodeVisibilityNotification:(id)a3;
- (void)_handleBookContentMovement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5 generateOutput:(BOOL)a6;
- (void)_handleBookPageFlipAndContinue;
- (void)_handleBottomEdgePanDown:(id)a3;
- (void)_handleBottomEdgePanExtraLong:(id)a3;
- (void)_handleBottomEdgePanLong:(id)a3;
- (void)_handleBottomEdgePanShort:(id)a3;
- (void)_handleBraille2DInvert:(id)a3;
- (void)_handleBrailleDecreaseAutoAdvanceSpeed:(id)a3;
- (void)_handleBrailleEnableAutoAdvance:(id)a3;
- (void)_handleBrailleEvent:(id)a3;
- (void)_handleBrailleIncreaseAutoAdvanceSpeed:(id)a3;
- (void)_handleBrailleRefreshEvent:(id)a3;
- (void)_handleBrailleWordWrapToggleEvent:(id)a3;
- (void)_handleCameraCenteredNotification:(id)a3;
- (void)_handleCancelSpeaking:(id)a3;
- (void)_handleCaptionsDisplayedNotification:(id)a3;
- (void)_handleChangeAudioDuckingMode:(id)a3;
- (void)_handleCharacterMovement:(id)a3;
- (void)_handleColumnMovement:(id)a3;
- (void)_handleContainerMovement:(id)a3;
- (void)_handleContainerMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleContextMenuStatusNotification:(id)a3;
- (void)_handleContinueSpeaking:(id)a3;
- (void)_handleCopySpeechToClipboard:(id)a3;
- (void)_handleCurrentContentReadingLineUpdated:(id)a3;
- (void)_handleCurrentStateChanged:(id)a3;
- (void)_handleCursorMovementByTextSegment:(id)a3;
- (void)_handleCustomRotorAction:(id)a3 direction:(int64_t)a4;
- (void)_handleCustomRotorContent:(id)a3 direction:(int64_t)a4;
- (void)_handleDeactivateBrailleScreenInput:(id)a3;
- (void)_handleDecreaseVolume:(id)a3;
- (void)_handleDescribeCameraScene:(id)a3;
- (void)_handleDescribeImage:(id)a3;
- (void)_handleDescribedMediaMode:(id)a3 direction:(int64_t)a4;
- (void)_handleDetectionModeMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleDidReceiveVisionEngineResult:(id)a3;
- (void)_handleDirectElementSearch:(id)a3;
- (void)_handleDirectTouchExplorationMode:(id)a3 direction:(int64_t)a4;
- (void)_handleDoubleTap:(id)a3;
- (void)_handleDuckingDisabling:(id)a3;
- (void)_handleEdgeSwipeBottom:(id)a3;
- (void)_handleEdgeSwipeTop:(id)a3;
- (void)_handleElementChangedNotification:(id)a3;
- (void)_handleElementInteraction:(id)a3;
- (void)_handleElementMoveToStatusBar:(id)a3;
- (void)_handleElementMoved:(__AXUIElement *)a3;
- (void)_handleElementMovement:(id)a3;
- (void)_handleElementSearch:(id)a3 rotorType:(int64_t)a4 direction:(int64_t)a5;
- (void)_handleEscape:(id)a3;
- (void)_handleEvent:(id)a3;
- (void)_handleExpandedStatusChanged:(id)a3;
- (void)_handleFireStewie;
- (void)_handleFirstResponderChangedNotification:(id)a3;
- (void)_handleFlashlightNotification;
- (void)_handleFocusedElementContentChangeNotification:(id)a3;
- (void)_handleGenericTextSegmentMovement:(id)a3 direction:(int64_t)a4 granulary:(int64_t)a5;
- (void)_handleGuideElementMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleHideDetectionUIWithMagnifierService:(id)a3;
- (void)_handleHintsSettingMode:(id)a3 direction:(int64_t)a4;
- (void)_handleHomeButtonPress;
- (void)_handleIdle:(id)a3;
- (void)_handleImageDescriptionsToggle:(int64_t)a3;
- (void)_handleIncreaseVolume:(id)a3;
- (void)_handleIntraContainerMovement:(id)a3;
- (void)_handleInvalidStatusChanged:(id)a3;
- (void)_handleInvalidTextInputNotification:(id)a3;
- (void)_handleItemChooserSelection:(id)a3;
- (void)_handleItemChooserSelectionMade:(id)a3;
- (void)_handleKBPopupVariantsNotification:(id)a3;
- (void)_handleKeyboardChangedNotification;
- (void)_handleKeyboardCommandEvent:(id)a3;
- (void)_handleKeyboardContinuousPathDidBegin:(id)a3;
- (void)_handleKeyboardKeySelectedNotification:(id)a3;
- (void)_handleLabelElement:(id)a3;
- (void)_handleLabelElementAcceptedNotification:(id)a3;
- (void)_handleLaunchDetectionMode:(id)a3;
- (void)_handleLayoutChange:(BOOL)a3;
- (void)_handleLayoutChangeFromTimer;
- (void)_handleLetterMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleLineMovement:(id)a3;
- (void)_handleLineMovementInWeb:(id)a3 direction:(int64_t)a4 existingRequest:(id)a5;
- (void)_handleLiveContinuousToneBeginNotification:(id)a3;
- (void)_handleLiveContinuousToneEndNotification:(id)a3;
- (void)_handleLiveContinuousToneUpdateNotification:(id)a3;
- (void)_handleMLElementModeWithDirection:(int64_t)a3 verboseOutput:(BOOL)a4;
- (void)_handleMapSameElement:(id)a3 forEvent:(id)a4;
- (void)_handleMathGranularMovement:(int64_t)a3 event:(id)a4;
- (void)_handleMisspelledWordRotorAction:(BOOL)a3;
- (void)_handleMonitorElement:(id)a3;
- (void)_handleMoveToElementAbove:(id)a3;
- (void)_handleMoveToElementBelow:(id)a3;
- (void)_handleMoveToElementNotification:(id)a3;
- (void)_handleMoveToLinkedUI:(id)a3;
- (void)_handleMoveToNativeFocusedElement:(id)a3;
- (void)_handleNativeFocusItemChangedNotification:(id)a3;
- (void)_handleNavigationDirectionChangeWithDirection:(int64_t)a3;
- (void)_handleNavigationStyleMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleNextKeyboardLanguage:(id)a3;
- (void)_handleNextTextOperationInDirection:(int64_t)a3 withEvent:(id)a4;
- (void)_handleNonEditableValueChange:(id)a3;
- (void)_handleOngoingTextSearch:(id)a3;
- (void)_handleOpenVoiceOverOptions:(id)a3;
- (void)_handleOutputCellRowColumnInfo:(id)a3;
- (void)_handleOutputCharacter:(id)a3;
- (void)_handleOutputCharacterPhonetically:(id)a3;
- (void)_handleOutputColumnContents:(id)a3;
- (void)_handleOutputColumnHeader:(id)a3;
- (void)_handleOutputColumnOrRowContents:(id)a3 row:(BOOL)a4;
- (void)_handleOutputColumnOrRowHeader:(id)a3 row:(BOOL)a4;
- (void)_handleOutputComputerVisionAnalysisSummary:(id)a3;
- (void)_handleOutputComputerVisionAnalysisSummary:(id)a3 explicitUserRequest:(BOOL)a4;
- (void)_handleOutputElementSummary:(id)a3;
- (void)_handleOutputFocusedElementSummary:(id)a3;
- (void)_handleOutputLineCount:(id)a3;
- (void)_handleOutputRowContents:(id)a3;
- (void)_handleOutputRowHeader:(id)a3;
- (void)_handleOutputTableRowColumnInfo:(id)a3;
- (void)_handleOutputTextStyle:(id)a3;
- (void)_handleParagraphMovement:(id)a3;
- (void)_handlePauseSpeaking:(id)a3;
- (void)_handlePauseSpeechAndHapticsNotification:(id)a3;
- (void)_handlePerformAudiographAction:(id)a3;
- (void)_handlePerformCustomAction:(id)a3;
- (void)_handlePerformEjectButtonPress:(id)a3;
- (void)_handlePerformHomeButtonPress:(id)a3;
- (void)_handlePerformPressAction:(id)a3;
- (void)_handlePerformTapAutofill:(id)a3;
- (void)_handlePerformTextOperation:(id)a3;
- (void)_handlePerformVolumeDownButtonPress:(id)a3;
- (void)_handlePerformVolumeUpButtonPress:(id)a3;
- (void)_handlePlayPauseButtonPress;
- (void)_handlePressActionResultAtTime:(id)a3;
- (void)_handlePublicCustomRotorMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleQuickNavFeedback:(BOOL)a3;
- (void)_handleReadAll:(id)a3;
- (void)_handleReadAllBookContent:(id)a3 fromTop:(BOOL)a4;
- (void)_handleReadAllNextElement;
- (void)_handleReadFromTop:(id)a3;
- (void)_handleReadItemHint:(id)a3;
- (void)_handleReadLine:(id)a3;
- (void)_handleReadScreenSummary:(id)a3;
- (void)_handleReadURL:(id)a3;
- (void)_handleReadWord:(id)a3;
- (void)_handleRealtimeElementMovement:(id)a3;
- (void)_handleRealtimeElementUpdate:(id)a3;
- (void)_handleReconnectBrailleDisplays:(id)a3;
- (void)_handleReleaseExclusiveAudioHardware;
- (void)_handleRequestExclusiveAudioHardware;
- (void)_handleRotateOrientation:(id)a3;
- (void)_handleRotor2DBrailleDisplayMode:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotor2DBrailleEdgeIntensity:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotor2DBrailleInvert:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotor2DBraillePanHorizontal:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotor2DBraillePanVertical:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotor2DBrailleZoom:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotorBrailleAutoAdvanceMovement:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotorBrailleInputLanguageMovement:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotorBrailleLanguageMovement:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotorContinusPathChange:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotorTextSelectionMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleRotorTypingModeMovement:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotorVoiceMovement:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRowMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleScreenChange:(id)a3 sound:(id)a4;
- (void)_handleScreenLock:(id)a3;
- (void)_handleScreenOff;
- (void)_handleScreenOffSilently;
- (void)_handleScreenOn;
- (void)_handleScreenOnSilently;
- (void)_handleScreenUnlock;
- (void)_handleScreenWillChangeNotification:(id)a3;
- (void)_handleScreenWillWakeNotification:(id)a3;
- (void)_handleScribbleMovement:(BOOL)a3;
- (void)_handleScrollByPage:(id)a3;
- (void)_handleScrollByPageNotification:(id)a3;
- (void)_handleScrollDownPage:(id)a3;
- (void)_handleScrollToBottom:(id)a3;
- (void)_handleScrollToPoint:(id)a3;
- (void)_handleScrollToTop:(id)a3;
- (void)_handleSearchRotorDirection:(int64_t)a3 event:(id)a4;
- (void)_handleSearchRotorDirection:(int64_t)a3 event:(id)a4 notifyUser:(BOOL)a5;
- (void)_handleSearchRotorEcho:(id)a3;
- (void)_handleSearchRotorLeft:(id)a3;
- (void)_handleSearchRotorMovement:(BOOL)a3 event:(id)a4;
- (void)_handleSearchRotorMovementWithoutRotorUpdateInDirectionUp:(BOOL)a3 event:(id)a4;
- (void)_handleSearchRotorRight:(id)a3;
- (void)_handleSearchRotorSetMathPosition:(id)a3;
- (void)_handleSearchTextEvent:(id)a3;
- (void)_handleSelectedTextOutput:(id)a3;
- (void)_handleSelectionChangedNotification:(id)a3;
- (void)_handleSendCancelEvent:(id)a3;
- (void)_handleSentenceMovement:(id)a3;
- (void)_handleSetupForEndOfPageNavigationTest:(id)a3;
- (void)_handleShowDetectionUIWithMagnifierService:(id)a3;
- (void)_handleShowEditingHUD:(id)a3;
- (void)_handleSimpleTap:(id)a3;
- (void)_handleSimulatedForceTouchEvent:(id)a3;
- (void)_handleSingleLetterSearch:(id)a3;
- (void)_handleSiriFinishedListening:(id)a3;
- (void)_handleSiriFinishedTalking:(id)a3;
- (void)_handleSiriShortcutEvent:(id)a3;
- (void)_handleSiriStartedListening:(id)a3;
- (void)_handleSiriStartedTalking:(id)a3;
- (void)_handleSortDirectionChanged:(id)a3;
- (void)_handleSoundRotorChange:(BOOL)a3;
- (void)_handleSpeakScreen:(id)a3;
- (void)_handleSpeechPhoneticsChange:(BOOL)a3;
- (void)_handleSpeechPunctuationChange:(BOOL)a3;
- (void)_handleSpeechRateChange:(BOOL)a3;
- (void)_handleSpeechRotorChange:(id)a3;
- (void)_handleSpeechRotorValueChange:(id)a3;
- (void)_handleStartHelpMode:(id)a3;
- (void)_handleStartSiri:(id)a3;
- (void)_handleStartStopTextSelection:(id)a3;
- (void)_handleStartStopToggle:(id)a3;
- (void)_handleStartTextSearch:(id)a3;
- (void)_handleStateReset;
- (void)_handleStewieAnnouncementInRange:(BOOL)a3 heading:(double)a4;
- (void)_handleStopSpeaking;
- (void)_handleStopSpeakingAndClearAllQueues;
- (void)_handleStopSpeakingAndClearQueue;
- (void)_handleSwitchToElementCommunityPrevious:(BOOL)a3 event:(id)a4;
- (void)_handleSwitchToLeftElementCommunity:(id)a3;
- (void)_handleSwitchToNextElementCommunity:(id)a3;
- (void)_handleSwitchToPreviousElementCommunity:(id)a3;
- (void)_handleSwitchToRightElementCommunity:(id)a3;
- (void)_handleSystemCommandActivateAccessibilityShortcut:(id)a3;
- (void)_handleSystemCommandActivateLockButton:(id)a3;
- (void)_handleSystemCommandControlCenter:(id)a3;
- (void)_handleSystemCommandNotificationCenter:(id)a3;
- (void)_handleSystemCommandSpotlight:(id)a3;
- (void)_handleSystemCommandSwitchToNextApp:(id)a3;
- (void)_handleSystemCommandSwitchToPreviousApp:(id)a3;
- (void)_handleSystemCommandTakeScreenshot:(id)a3;
- (void)_handleSystemCommandToggleAppSwitcher:(id)a3;
- (void)_handleSystemCommandToggleDock:(id)a3;
- (void)_handleSystemCommandToggleQuickNote:(id)a3;
- (void)_handleSystemCommandToggleReachability:(id)a3;
- (void)_handleSystemControlActivation:(id)a3;
- (void)_handleSystemLockedOutputBehavior:(id)a3 shouldSendRequest:(BOOL *)a4 startElement:(id *)a5;
- (void)_handleTapAndHoldEventMonitor:(id)a3;
- (void)_handleTemporaryScreenCurtainDisablement;
- (void)_handleTextDocumentMovement:(id)a3;
- (void)_handleTextReplacementOccurredNotification:(id)a3;
- (void)_handleTextRotorSelectionAction:(BOOL)a3;
- (void)_handleTextWordMovement:(id)a3;
- (void)_handleToggleCaptionPanel:(id)a3;
- (void)_handleToggleCrownNavigation:(id)a3;
- (void)_handleToggleLiveRegionCommand:(id)a3;
- (void)_handleToggleLiveRegions:(int64_t)a3;
- (void)_handleToggleMute:(id)a3;
- (void)_handleTogglePerkinsKeyboardInput:(id)a3;
- (void)_handleToggleQuickNav:(id)a3;
- (void)_handleToggleRotationCapability:(id)a3;
- (void)_handleToggleScreenCurtain:(id)a3;
- (void)_handleToggleSettingsHUD:(id)a3;
- (void)_handleToggleSideApp:(id)a3;
- (void)_handleToggleSideAppIfAvailableInGestures:(id)a3;
- (void)_handleToggleSingleLetterQuickNav:(id)a3;
- (void)_handleToggleSoundCurtain:(id)a3;
- (void)_handleToggleSpeaking:(id)a3;
- (void)_handleToggleTypeToSiri:(id)a3;
- (void)_handleToggleVoiceOverModifierKeyLock:(id)a3;
- (void)_handleTopEdgePanLong:(id)a3;
- (void)_handleTopEdgePanShort:(id)a3;
- (void)_handleTracking:(id)a3;
- (void)_handleTrackingDetailMovement:(BOOL)a3 event:(id)a4;
- (void)_handleTripleTap:(id)a3;
- (void)_handleTypingEchoChange:(BOOL)a3;
- (void)_handleUnmuteEligibleEventOccured;
- (void)_handleUpdateAppFromTimer;
- (void)_handleUpdatedMathElementIndex;
- (void)_handleUsePitchChange:(BOOL)a3;
- (void)_handleUserSelection:(id)a3;
- (void)_handleValidatedCustomActionMovementThroughActions:(id)a3 forEvent:(id)a4 inDirection:(int64_t)a5;
- (void)_handleValueChangedNotification:(id)a3 associatedElement:(id)a4;
- (void)_handleVerticalMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleVolumeChange:(float)a3;
- (void)_handleWatchWakeDoubleTap:(id)a3;
- (void)_handleWatchWakeTap:(id)a3;
- (void)_handleWatchWakeTripleTap:(id)a3;
- (void)_handleWebFormControlInteractionEndNotification:(id)a3;
- (void)_handleWebFormControlInteractionStartNotification:(id)a3;
- (void)_handleWebPageLoaded:(id)a3;
- (void)_handleWebSearchResult:(int64_t)a3 withEvent:(id)a4;
- (void)_handleWebSelection:(id)a3;
- (void)_handleWebSelectionChangedNotification:(id)a3;
- (void)_handleWebTextAvailableNotification:(id)a3;
- (void)_handleWebTextMatchSelectedNotification:(id)a3;
- (void)_handleWordMovement:(id)a3;
- (void)_handleWordMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleZoomMovement:(int64_t)a3 event:(id)a4;
- (void)_hideVisualRotor;
- (void)_initializeCommands;
- (void)_initializeElementManagerThread;
- (void)_initializeSystemEventThread;
- (void)_interruptSpeachAndPlayBorderHitSound;
- (void)_layoutChangeForDragSessionStart;
- (void)_migratePerAppDirectTouchBehavior;
- (void)_monitorElements;
- (void)_moveCursorForElement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5;
- (void)_moveDetectionModeRotor:(id)a3;
- (void)_moveFocusToUpdatedRange:(_NSRange)a3 element:(id)a4 searchType:(int64_t)a5;
- (void)_moveToElement:(id)a3;
- (void)_moveToElement:(id)a3 shouldPlaySound:(BOOL)a4 echoSameTouchContainer:(BOOL)a5 moveToElementNotification:(BOOL)a6;
- (void)_moveToElement:(id)a3 shouldPlaySound:(BOOL)a4 echoSameTouchContainer:(BOOL)a5 shouldScroll:(BOOL)a6 moveToElementNotification:(BOOL)a7 shouldPlayTrackingSound:(BOOL)a8;
- (void)_outputCurrentElementRotor;
- (void)_outputDataDetectorIfPresent:(CGRect)a3 element:(id)a4 includeLinks:(BOOL)a5;
- (void)_outputNavigationDirectionMode:(int64_t)a3;
- (void)_outputNextTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4;
- (void)_outputRequestFinished:(id)a3;
- (void)_outputRotorTypeCount;
- (void)_outputSelectionDifference:(_NSRange)a3 oldRange:(_NSRange)a4 string:(id)a5;
- (void)_outputSelectionDifference:(_NSRange)a3 oldRange:(_NSRange)a4 string:(id)a5 language:(id)a6;
- (void)_outputWebLineWithMarkerRange:(id)a3 withElement:(id)a4;
- (void)_pausedSpeechInterrupted:(id)a3;
- (void)_performPressOnElement:(id)a3 withEvent:(id)a4 centerPoint:(CGPoint)a5;
- (void)_performTouchTypingKeyPress:(id)a3;
- (void)_pointerDidMoveToGlobalPoint:(id)a3;
- (void)_postBrailleHomeButtonPress;
- (void)_processExternalElementUpdate;
- (void)_processExternalScrollToVisible:(id)a3;
- (void)_processMisspelledWordTextReplacement;
- (void)_processPassthroughAllowedWithEvent:(id)a3 initialTouch:(BOOL)a4;
- (void)_processSilentValueChange;
- (void)_processValueChangeWithFirstResponder:(id)a3 existingFirstResponder:(BOOL)a4 changeType:(id)a5 changeOrigination:(int64_t)a6 isQuiet:(BOOL)a7;
- (void)_reachabilityHandleTrackingStopped;
- (void)_reachabilityWaitForTrackingTimeout;
- (void)_readExplorerElementsAfterSpeechFinishedTimerFired;
- (void)_reallySimulateLongPressForElement:(id)a3;
- (void)_refreshMathSegmentsIfNeeded;
- (void)_refreshMathSegmentsIfNeededWithPreferredDirection:(int64_t)a3;
- (void)_resetDirectInteractionCache;
- (void)_resetElementLabel;
- (void)_resetElementUnitIndexes;
- (void)_resetItemChooserCache;
- (void)_resetMathGranularMovementState;
- (void)_resetOtherTapInputModes;
- (void)_resetQuickNavState;
- (void)_resetReadAllRequest;
- (void)_resetRotorTextNavigation;
- (void)_resetSearchType;
- (void)_reupdateTextSelectionInformation;
- (void)_sendAutomationTouchCommand:(unsigned int)a3 location:(CGPoint)a4;
- (void)_sendBSIActiveStateOffNotificationAndNotify;
- (void)_sendBSIStateChangedNotification:(BOOL)a3 usage:(int64_t)a4;
- (void)_sendBrailleAlert:(id)a3;
- (void)_sendSystemNotificationForFlashlight;
- (void)_sendUserEventOccurredIfNeeded;
- (void)_setDirectInteractionElement:(id)a3;
- (void)_setElementRotorToNumberType:(id)a3 saveToNumberPreferences:(id)a4 numberUserInitiated:(id)a5;
- (void)_setElementRotorToType:(int64_t)a3 saveToPreferences:(BOOL)a4 userInitiated:(BOOL)a5;
- (void)_setElementUnitIndexesToEndOfElement:(id)a3;
- (void)_setFetchManager:(id)a3;
- (void)_setLastSeenDeviceOrientation:(int64_t)a3;
- (void)_setLastSeenLineAndColumn:(id)a3;
- (void)_setNearestElementMovingForward:(BOOL)a3;
- (void)_setPreviousTouchTypingKey:(id)a3;
- (void)_setSelectedTextRange:(_NSRange)a3 onElement:(id)a4 refreshBraille:(BOOL)a5;
- (void)_setSelectedTextRange:(_NSRange)a3 onElement:(id)a4 refreshBraille:(BOOL)a5 isVoiceOverSelectionMovement:(BOOL)a6;
- (void)_showItemChooser:(id)a3;
- (void)_showVisualRotor:(id)a3 direction:(BOOL)a4;
- (void)_simulatedForceTouchLift;
- (void)_simulatedPressOutputTimer:(id)a3;
- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4;
- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 announcement:(BOOL)a5 brailleOnly:(BOOL)a6;
- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5;
- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5 announcement:(BOOL)a6 brailleOnly:(BOOL)a7;
- (void)_speakBrailleAutoAdvanceSpeed;
- (void)_speakElementFromPointerEvent:(id)a3;
- (void)_speakMessages:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5;
- (void)_speakMessages:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5 announcement:(BOOL)a6 brailleOnly:(BOOL)a7;
- (void)_startReadingBookForNewPage;
- (void)_stopReadAll;
- (void)_switchToOtherRoad;
- (void)_systemNotificationInProgressForRequest:(id)a3;
- (void)_systemServerDied;
- (void)_testingSetApplications:(id)a3;
- (void)_tvOS_handleUpdateWithNativeFocusFromTimer;
- (void)_tvOS_retryUpdateWithNativeFocus;
- (void)_tvOS_updateWithNativeFocus;
- (void)_tvOS_updateWithNativeFocus:(id)a3 withDelay:(double)a4;
- (void)_tvOS_updateWithNativeFocus:(id)a3 withDelayNumber:(id)a4;
- (void)_updateAnyThreadElementAccess;
- (void)_updateApplicationAndSpeak:(id)a3;
- (void)_updateAutomationAccessibilityApps;
- (void)_updateContextDescriptors;
- (void)_updateContinuousPathTimeout;
- (void)_updateCurrentElementForTextInputSelectionChangeIfNeeded;
- (void)_updateCurrentElementFrame;
- (void)_updateCurrentWordContextForBook:(id)a3;
- (void)_updateCursorFrameAfterLift;
- (void)_updateCursorFrameForElementIfNeeded:(id)a3;
- (void)_updateCursorFrameForLineFrameMovement:(id)a3;
- (void)_updateDisplayWithCurrentElement;
- (void)_updateExplorerElementsIfNeeded;
- (void)_updateExternalAccessory:(id)a3;
- (void)_updateFirstResponder;
- (void)_updateFirstResponderTypingBuffer;
- (void)_updateFlashlightEnabledStatus;
- (void)_updateForContinuityStateChange;
- (void)_updateJindoApplicationCache;
- (void)_updateJindoNotificationHandler;
- (void)_updateLastFirstResponderChangedTime;
- (void)_updateMLElementAutorefresh;
- (void)_updateMostRecentElementCommunity;
- (void)_updateRotorForCurrentElement;
- (void)_updateRotorForCurrentElement:(id)a3 completion:(id)a4;
- (void)_updateStateForNotificationData:(id)a3;
- (void)_updateSwipeFrames;
- (void)_valueWait:(id)a3 oldValue:(id)a4 waitTime:(double)a5;
- (void)_valueWait:(id)a3 oldValue:(id)a4 waitTime:(double)a5 borderHitIfNoChange:(BOOL)a6;
- (void)_visionEngine:(id)a3 updatedResult:(id)a4 forElement:(id)a5 event:(id)a6 visionOptions:(id)a7;
- (void)_webPageElementFinder;
- (void)_webPageLoadingSound;
- (void)cancelDrag;
- (void)deactivateGesturedTextInputIfNeeded:(BOOL)a3;
- (void)dealloc;
- (void)didStartDragForDragManager:(id)a3;
- (void)didTerminateDragForDragManager:(id)a3;
- (void)dragManager:(id)a3 didChangeDragToStatus:(id)a4;
- (void)dragManager:(id)a3 didEndDragOperation:(unint64_t)a4;
- (void)dragManager:(id)a3 didMoveDragToPoint:(CGPoint)a4;
- (void)dropDrag;
- (void)elementFetchFound:(id)a3;
- (void)elementFetchFoundDirectTouchElements:(id)a3;
- (void)elementsCounted:(int64_t)a3;
- (void)elementsRetrieved:(id)a3 finished:(BOOL)a4;
- (void)explorerElementManager:(id)a3 didFinishReadAll:(BOOL)a4;
- (void)explorerElementManager:(id)a3 didSetExplorerElementFocus:(id)a4;
- (void)explorerElementManager:(id)a3 willReadElement:(id)a4;
- (void)fetchElementsFrom:(id)a3 inDirection:(int64_t)a4 count:(unint64_t)a5 scroll:(BOOL)a6 block:(id)a7;
- (void)fillCacheWithElements:(id)a3;
- (void)gestureRepeater:(id)a3 repeaterEventDidFire:(int64_t)a4;
- (void)gestureRepeaterWillSendFirstRepeaterEvent:(id)a3;
- (void)handleAnnouncement:(id)a3;
- (void)handleEvent:(id)a3;
- (void)handleHomeButtonPress;
- (void)handleLaunchVoiceOverImageExplorer;
- (void)handleNotification:(int)a3 withData:(id)a4 forElement:(__AXUIElement *)a5;
- (void)handlePlayPauseButtonPress;
- (void)handleReachabilityToggled;
- (void)handleSearchRotorDown:(id)a3;
- (void)handleSearchRotorUp:(id)a3;
- (void)handleStateReset;
- (void)hideVisualRotor;
- (void)moveDragToPoint:(CGPoint)a3;
- (void)moveToElement:(id)a3;
- (void)moveToElementMatchingRotorType:(int64_t)a3 inDirection:(int64_t)a4;
- (void)observeValueForKeyPath:(id)a3 ofObject:(id)a4 change:(id)a5 context:(void *)a6;
- (void)outputNextTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4 string:(id)a5 element:(id)a6;
- (void)outputRequestFinished:(id)a3;
- (void)outputTextSegmentForRange:(_NSRange)a3 string:(id)a4 element:(id)a5 usePhonetics:(BOOL)a6 segment:(int64_t)a7;
- (void)pointerDidMoveToGlobalPoint:(CGPoint)a3;
- (void)processExternalElementUpdate;
- (void)processExternalScrollToVisible:(CGPoint)a3;
- (void)refreshBraille;
- (void)regionDescriptionForElement:(id)a3 withCompletion:(id)a4;
- (void)removeElementExplorer:(id)a3;
- (void)resetFrequentUpdateTextCache;
- (void)resetTextAndSelectionCaches;
- (void)rotor:(id)a3 didChangeFrom:(int64_t)a4 to:(int64_t)a5 userInitiated:(BOOL)a6;
- (void)sendRequest:(id)a3;
- (void)setCachedAdditionalElementCommunities:(id)a3;
- (void)setCachedSideAppDividerElement:(id)a3;
- (void)setCameraSceneDescriber:(id)a3;
- (void)setContinuousPathTimeout:(double)a3;
- (void)setCurrentContextDescriptors:(id)a3;
- (void)setCurrentElement:(id)a3;
- (void)setCurrentElement:(id)a3 shouldSetBrailleElement:(BOOL)a4;
- (void)setCurrentElementChangedCallback:(id)a3;
- (void)setCurrentElementToWebEditableAncestor;
- (void)setCurrentSimilarTraits:(unint64_t)a3;
- (void)setCurrentTextSelectionSegmentType:(int64_t)a3;
- (void)setDelayedNotificationAnnouncementRequest:(id)a3;
- (void)setDidCacheSideAppDividerElement:(BOOL)a3;
- (void)setDidIgnoreLastFirstResponderChangeOnSelectionChange:(BOOL)a3;
- (void)setDidReceiveForceUpdateChangeToken:(BOOL)a3;
- (void)setDirectInteractionElement:(id)a3;
- (void)setDirectTouchApps:(id)a3;
- (void)setElementGeneration:(unint64_t)a3;
- (void)setElementManagerHandledEventCallback:(id)a3;
- (void)setElementRotorToType:(int64_t)a3 saveToPreferences:(BOOL)a4 userInitiated:(BOOL)a5;
- (void)setExploreFocusAffectsNativeFocus:(BOOL)a3;
- (void)setExplorerElementManager:(id)a3;
- (void)setFingersFromTouchCommands:(id)a3;
- (void)setFirstResponder:(id)a3;
- (void)setFirstTrackedAppInGesture:(id)a3;
- (void)setFocusRetryAttempts:(int64_t)a3;
- (void)setForceUpdateMask:(int64_t)a3;
- (void)setInTextSelection:(BOOL)a3;
- (void)setInitialReadAllElement:(id)a3;
- (void)setIsContinuitySessionActive:(BOOL)a3;
- (void)setIsUpdatingFocus:(BOOL)a3;
- (void)setLastActivationTime:(double)a3;
- (void)setLastAlertTime:(double)a3;
- (void)setLastAttemptToShowContextMenuTime:(double)a3;
- (void)setLastBlockedRequestBySiriOrDictationTime:(double)a3;
- (void)setLastContainerForCustomRotorHint:(id)a3;
- (void)setLastCursorBorderHitTime:(double)a3;
- (void)setLastDuckingDisablementSessionStart:(double)a3;
- (void)setLastElementBlockquoteLevel:(int64_t)a3;
- (void)setLastElementChangeAction:(int64_t)a3;
- (void)setLastElementChangeTime:(double)a3;
- (void)setLastElementForAttemptToShowContextMenu:(id)a3;
- (void)setLastElementHeadingLevel:(int64_t)a3;
- (void)setLastEventCommand:(id)a3;
- (void)setLastEventOccurredTime:(double)a3;
- (void)setLastExternalUnlockTime:(double)a3;
- (void)setLastFirstResponderChangeTime:(double)a3;
- (void)setLastFolderOperationTime:(double)a3;
- (void)setLastHomeButtonPressTime:(double)a3;
- (void)setLastItemChooserSearchTerm:(id)a3;
- (void)setLastLayoutChangeNotificationTime:(double)a3;
- (void)setLastNothingSoundTime:(double)a3;
- (void)setLastPauseSpeechAndHapticsStart:(double)a3;
- (void)setLastPressOnMediaSessionElement:(double)a3;
- (void)setLastRequestBlockedBySiriOrDictation:(id)a3;
- (void)setLastScreenChangeNotificationTime:(double)a3;
- (void)setLastScreenWakeViaPlayPause:(double)a3;
- (void)setLastSearchForElementsTime:(double)a3;
- (void)setLastSelectionChangeTime:(double)a3;
- (void)setLastSilencedAlertTime:(double)a3;
- (void)setLastTemporaryQuickNavDisableTime:(double)a3;
- (void)setLastTextPressAction:(unint64_t)a3;
- (void)setLastTrackingUpdateAppsFailureApplication:(id)a3;
- (void)setLastTrackingUpdateAppsFailureTime:(double)a3;
- (void)setLastUserElementTouchTime:(double)a3;
- (void)setLastValueChangeTime:(double)a3;
- (void)setLastWebPageLoadTime:(double)a3;
- (void)setMostRecentElementCommunity:(id)a3;
- (void)setNativeFocusElement:(id)a3;
- (void)setNeedsUpdateFocus:(BOOL)a3;
- (void)setNextElementToFocus:(id)a3;
- (void)setNextStringToSpeakOnScreenChange:(id)a3;
- (void)setPreviousContextDescriptors:(id)a3;
- (void)setPreviousCustomRotorsForRotorHint:(id)a3;
- (void)setPreviousFirstResponder:(id)a3;
- (void)setPreviousFirstResponderValue:(id)a3;
- (void)setPreviousTableOrCollectionViewApplication:(id)a3;
- (void)setPreviousTableOrCollectionViewList:(id)a3;
- (void)setPreviousTableOrCollectionViewToMetadata:(id)a3;
- (void)setPreviouslySpokenImageCaptionResults:(id)a3;
- (void)setRotor:(id)a3 toType:(int64_t)a4 saveToPreferences:(BOOL)a5 userInitiated:(BOOL)a6;
- (void)setSafariScribbleManager:(id)a3;
- (void)setScreenCurtainIsTemporarilyDisabled:(BOOL)a3;
- (void)setSelectingRightward:(BOOL)a3;
- (void)setShouldSilenceAnnouncements:(BOOL)a3;
- (void)setShouldTurnTrackingIntoDirectTouch:(BOOL)a3;
- (void)setSpeakNonfocusableElementsAfterDelay:(BOOL)a3;
- (void)setSpringBoardActionHandlerIdentifier:(id)a3;
- (void)setTextSelectionMovementManager:(id)a3;
- (void)setTimeSpentOnNothing:(double)a3;
- (void)setTouchContainer:(id)a3;
- (void)setTouchTypingStartTime:(double)a3;
- (void)setTutorialActiveRestrictionType:(int64_t)a3;
- (void)setTutorialListeningForGestureNotifications:(BOOL)a3;
- (void)setTutorialPage:(id)a3;
- (void)setTutorialRecognizedGesture:(id)a3;
- (void)setTutorialRestrictedCommands:(id)a3;
- (void)setTvAccessLock:(id)a3;
- (void)setTvGestureRepeater:(id)a3;
- (void)setTvIsInteractingWithRotor:(BOOL)a3;
- (void)setTvSpeechRequestManager:(id)a3;
- (void)setUnitTestingMode:(BOOL)a3;
- (void)setUpdateDelegate:(id)a3;
- (void)setUpdateFocusContext:(id)a3;
- (void)setWaitingToRetryFocus:(BOOL)a3;
- (void)setWebPageElementFinder:(id)a3;
- (void)setWebPageLoadURL:(id)a3;
- (void)setWebPageLoadedGenerationMark:(unint64_t)a3;
- (void)showElementLabelPanel:(BOOL)a3 currentLabel:(id)a4;
- (void)systemServerDied;
- (void)toggleDetectionMode;
- (void)tutorialSetRecognizedGesture:(id)a3;
- (void)updateApplicationAndSpeak:(id)a3;
- (void)updateCurrentElementFrame;
- (void)updateCursorFrameAfterLift;
- (void)updateIndexesForOutputRange:(_NSRange)a3 segment:(int64_t)a4 direction:(int64_t)a5 outputStringLength:(unint64_t)a6;
- (void)updateNavigationModeForClassicRemote;
- (void)updateRotorForCurrentElement:(BOOL)a3 completion:(id)a4;
- (void)updateRunningApplications;
- (void)updateTitleElementLabels:(id)a3;
- (void)visionEngine:(id)a3 updatedResult:(id)a4 forElement:(id)a5 event:(int64_t)a6 visionOptions:(id)a7;
- (void)voiceOverDidRegisterWithSystem;
- (void)waitForDragStartFromPid:(int)a3 completionHandler:(id)a4;
- (void)willBeginReadAll:(id)a3;
@end

@implementation VOTElementManager

- (void)setUnitTestingMode:(BOOL)a3
{
  self->_inUnitTestingMode = a3;
}

- (void)_cleanupStateForUnitTesting
{
  self->_lastTextPressAction = 0;
  self->_lastElementChangeAction = 0;
  self->_lastPressOnMediaSessionElement = -3061152000.0;
}

+ (void)initialize
{
  if (!qword_1001EB910)
  {
    id v2 = [objc_allocWithZone((Class)AXIndexMap) init];
    v3 = (void *)qword_1001EB910;
    qword_1001EB910 = (uint64_t)v2;

    id v4 = objc_allocWithZone((Class)NSArray);
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v5 = objc_msgSend(v4, "initWithObjects:", kVOTEventCommandIncreaseVolume, kVOTEventCommandDecreaseVolume, kVOTEventCommandIdle, kVOTEventCommandToggleScreenCurtain, kVOTEventCommandToggleSoundCurtain, kVOTEventCommandVolumeUpButtonPress, kVOTEventCommandVolumeDownButtonPress, kVOTEventCommandPauseSpeaking, kVOTEventCommandContinueSpeaking, kVOTEventCommandToggleSpeaking, kVOTEventCommandBraillePanRight, kVOTEventCommandBraillePanLeft, kVOTEventCommandBraillePanBeginning, kVOTEventCommandBraillePanEnd, kVOTEventCommandBrailleRefreshBrailleLine, 0);
    id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        v9 = 0;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v5);
          }
          objc_msgSend((id)qword_1001EB910, "setObject:forIndex:", kCFBooleanTrue, objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v9), "hash"));
          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v7);
    }
  }
}

- (VOTElementManager)init
{
  v127.receiver = self;
  v127.super_class = (Class)VOTElementManager;
  id v2 = [(VOTElementManager *)&v127 init];
  v3 = v2;
  if (v2)
  {
    v2->_lastTextPressAction = 0;
    v2->_lastAlertTime = -3061152000.0;
    int64x2_t v4 = vdupq_n_s64(0xC1E6CEAF20000000);
    *(int64x2_t *)&v2->_timeSpentOnNothing = v4;
    v2->_lastLayoutChangeNotificationTime = -3061152000.0;
    v2->_lastAnnouncementNotificationTime = -3061152000.0;
    *(int64x2_t *)&v2->_lastScreenChangeNotificationTime = v4;
    v2->_lastFirstResponderChangeTime = -3061152000.0;
    *(int64x2_t *)&v2->_lastTemporaryQuickNavDisableTime = v4;
    v2->_lastValueChangeTime = -3061152000.0;
    v2->_lastWebPageLoadTime = -3061152000.0;
    v2->_lastPopupTime = -3061152000.0;
    v2->_lastAdjustValueTime = -3061152000.0;
    v2->_switchedToRoadTime = -3061152000.0;
    v2->_lastSilencedAlertTime = -3061152000.0;
    *(int64x2_t *)&v2->_lastScreenWakeViaPlayPause = v4;
    *(int64x2_t *)&v2->_lastFolderOperationTime = v4;
    v2->_lastWebKeyboardDismissTime = -3061152000.0;
    v2->_lastBlockedRequestBySiriOrDictationTime = -3061152000.0;
    v2->_lastAttemptToShowContextMenuTime = -3061152000.0;
    v2->_lastSentBannerTimerReset = -3061152000.0;
    [(VOTElementManager *)v2 setLastEventCommand:0];
    v3->_misspelledWordReplacementCycleIndex = 0x7FFFFFFFFFFFFFFFLL;
    id v5 = objc_alloc_init(_VOTTextMarkerRange);
    textMarkerRange = v3->_textMarkerRange;
    v3->_textMarkerRange = v5;

    uint64_t v7 = +[NSMutableArray array];
    previousTableOrCollectionViewList = v3->_previousTableOrCollectionViewList;
    v3->_previousTableOrCollectionViewList = (NSMutableArray *)v7;

    uint64_t v9 = +[NSMutableDictionary dictionary];
    previousTableOrCollectionViewToMetadata = v3->_previousTableOrCollectionViewToMetadata;
    v3->_previousTableOrCollectionViewToMetadata = (NSMutableDictionary *)v9;

    long long v11 = (VOTElementFetcher *)[objc_allocWithZone((Class)VOTElementFetcher) init];
    fetchManager = v3->_fetchManager;
    v3->_fetchManager = v11;

    [(VOTElementFetcher *)v3->_fetchManager setDelegate:v3];
    long long v13 = (NSMutableString *)[objc_allocWithZone((Class)NSMutableString) init];
    elementTypingBuffer = v3->_elementTypingBuffer;
    v3->_elementTypingBuffer = v13;

    v3->_elementSelectionRangeBufferInternal = (_NSRange)xmmword_10016E510;
    v3->_elementSelectionRangeBufferForValueChange = (_NSRange)xmmword_10016E510;
    v3->_elementSelectionRangeBufferForSelectionChange = (_NSRange)xmmword_10016E510;
    v15 = (NSMutableDictionary *)objc_alloc_init((Class)NSMutableDictionary);
    focusedElementsByElementCommunityIdentifier = v3->_focusedElementsByElementCommunityIdentifier;
    v3->_focusedElementsByElementCommunityIdentifier = v15;

    v3->_anyThreadCurrentElementLock._os_unfair_lock_opaque = 0;
    v17 = (SCRCThread *)objc_alloc_init((Class)SCRCThread);
    elementManagerThread = v3->_elementManagerThread;
    v3->_elementManagerThread = v17;

    v19 = v3->_elementManagerThread;
    v20 = (objc_class *)objc_opt_class();
    v21 = NSStringFromClass(v20);
    [(SCRCThread *)v19 setName:v21];

    [(SCRCThread *)v3->_elementManagerThread performSelector:"_initializeElementManagerThread" onTarget:v3 count:0 objects:0];
    v22 = (SCRCThreadKey *)[objc_alloc((Class)SCRCThreadKey) initWithObject:v3];
    threadKey = v3->_threadKey;
    v3->_threadKey = v22;

    v24 = (SCRCThread *)objc_alloc_init((Class)SCRCThread);
    systemEventThread = v3->_systemEventThread;
    v3->_systemEventThread = v24;

    [(SCRCThread *)v3->_systemEventThread setName:@"VOTSystemEvent"];
    [(SCRCThread *)v3->_systemEventThread performSelector:"_initializeSystemEventThread" onTarget:v3 count:0 objects:0];
    v26 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_drawTouchContainerFrame" thread:v3->_elementManagerThread];
    containerFrameDrawingTimer = v3->_containerFrameDrawingTimer;
    v3->_containerFrameDrawingTimer = v26;

    v28 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_hideVisualRotor" thread:v3->_elementManagerThread];
    visualRotorFadeTimer = v3->_visualRotorFadeTimer;
    v3->_visualRotorFadeTimer = v28;

    v30 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_handleLayoutChangeFromTimer" thread:v3->_elementManagerThread];
    updateLayoutTimer = v3->_updateLayoutTimer;
    v3->_updateLayoutTimer = v30;

    v32 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_appSuspensionSoundTimer" thread:v3->_elementManagerThread];
    appSuspensionSoundTimer = v3->_appSuspensionSoundTimer;
    v3->_appSuspensionSoundTimer = v32;

    v34 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_simulatedPressOutputTimer:" thread:v3->_elementManagerThread];
    simulatedPressOutputTimer = v3->_simulatedPressOutputTimer;
    v3->_simulatedPressOutputTimer = v34;

    v36 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_switchToOtherRoad" thread:v3->_elementManagerThread];
    switchRoadsAtIntersectionTimer = v3->_switchRoadsAtIntersectionTimer;
    v3->_switchRoadsAtIntersectionTimer = v36;

    v38 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_activateAlternativeKeyboardKey:" thread:v3->_elementManagerThread];
    keyboardAlternativeModeActivationTimer = v3->_keyboardAlternativeModeActivationTimer;
    v3->_keyboardAlternativeModeActivationTimer = v38;

    v40 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_dismissAlternativeKeyboardKeys" thread:v3->_elementManagerThread];
    alternativeKeyDismissalTimer = v3->_alternativeKeyDismissalTimer;
    v3->_alternativeKeyDismissalTimer = v40;

    v42 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_continuousPathIdleTimer:" thread:v3->_elementManagerThread];
    continuousPathIdleTimer = v3->_continuousPathIdleTimer;
    v3->_continuousPathIdleTimer = v42;

    v44 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:0 thread:v3->_elementManagerThread];
    elementMonitorTimer = v3->_elementMonitorTimer;
    v3->_elementMonitorTimer = v44;

    v46 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_speakElementFromPointerEvent:" thread:v3->_elementManagerThread];
    pointerSpeakElementTimer = v3->_pointerSpeakElementTimer;
    v3->_pointerSpeakElementTimer = v46;

    [(SCRCTargetSelectorTimer *)v3->_appSuspensionSoundTimer cancel];
    v48 = (SCRCTargetSelectorTimer *)[objc_alloc((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_elementUpdatesFrequently" thread:v3->_elementManagerThread];
    elementUpdatesFrequentlyTimer = v3->_elementUpdatesFrequentlyTimer;
    v3->_elementUpdatesFrequentlyTimer = v48;

    v50 = +[NSNotificationCenter defaultCenter];
    [v50 addObserver:v3 selector:"_pausedSpeechInterrupted:" name:off_1001EA738 object:0];

    *(_WORD *)&v3->_didPeekEvent = 0;
    v51 = (NSMutableArray *)objc_alloc_init((Class)NSMutableArray);
    touchEventElements = v3->_touchEventElements;
    v3->_touchEventElements = v51;

    v53 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_simulatedForceTouchLift" thread:v3->_elementManagerThread];
    simulatedForceLiftTimer = v3->_simulatedForceLiftTimer;
    v3->_simulatedForceLiftTimer = v53;

    v55 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_handleUpdateAppFromTimer" thread:v3->_elementManagerThread];
    updateAppFromTimer = v3->_updateAppFromTimer;
    v3->_updateAppFromTimer = v55;

    v57 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_reachabilityWaitForTrackingTimeout" thread:v3->_elementManagerThread];
    reachabilityWaitForTrackingTimer = v3->_reachabilityWaitForTrackingTimer;
    v3->_reachabilityWaitForTrackingTimer = v57;

    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, v3, (CFNotificationCallback)sub_10005A320, kAXSVoiceOverJindoHostedApplicationsChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v60 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(v60, v3, (CFNotificationCallback)sub_10005A328, kAXSContinuityDisplayStateChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    uint64_t v61 = objc_opt_new();
    elementMonitorCache = v3->_elementMonitorCache;
    v3->_elementMonitorCache = (NSMutableDictionary *)v61;

    v63 = (AXIndexMap *)[objc_allocWithZone((Class)AXIndexMap) init];
    commands = v3->_commands;
    v3->_commands = v63;

    v65 = (NSMutableDictionary *)objc_alloc_init((Class)NSMutableDictionary);
    fingersFromTouchCommands = v3->_fingersFromTouchCommands;
    v3->_fingersFromTouchCommands = v65;

    v67 = (VOTElementRotor *)[objc_allocWithZone((Class)VOTElementRotor) init];
    elementRotor = v3->_elementRotor;
    v3->_elementRotor = v67;

    [(VOTRotor *)v3->_elementRotor setDelegate:v3];
    v69 = (VOTRotor *)[objc_allocWithZone((Class)VOTSpeechRotor) init];
    speechRotor = v3->_speechRotor;
    v3->_speechRotor = v69;

    v71 = [[VOTTextMovementManager alloc] initWithSegments:&off_1001C6C80];
    textSelectionMovementManager = v3->_textSelectionMovementManager;
    v3->_textSelectionMovementManager = v71;

    v3->_elementMathIndex = 0x7FFFFFFFFFFFFFFFLL;
    v3->_elementMathSegmentGranularity = 0;
    v73 = (NSMutableDictionary *)[objc_allocWithZone((Class)NSMutableDictionary) init];
    lastSeenFontProperties = v3->_lastSeenFontProperties;
    v3->_lastSeenFontProperties = v73;

    [(VOTElementManager *)v3 _migratePerAppDirectTouchBehavior];
    v75 = (NSMutableSet *)objc_alloc_init((Class)NSMutableSet);
    directInteractionElements = v3->_directInteractionElements;
    v3->_directInteractionElements = v75;

    v77 = (NSMutableArray *)objc_alloc_init((Class)NSMutableArray);
    cachedLaunchIcons = v3->_cachedLaunchIcons;
    v3->_cachedLaunchIcons = v77;

    v79 = (NSLock *)objc_alloc_init((Class)NSLock);
    trackingLock = v3->_trackingLock;
    v3->_trackingLock = v79;

    [(VOTElementManager *)v3 _resetElementUnitIndexes];
    [(VOTElementManager *)v3 _initializeCommands];
    objc_initWeak(&location, v3);
    [(VOTElementManager *)v3 _updateContinuousPathTimeout];
    v81 = +[AXSettings sharedInstance];
    v124[0] = _NSConcreteStackBlock;
    v124[1] = 3221225472;
    v124[2] = sub_10005A348;
    v124[3] = &unk_1001B35A8;
    objc_copyWeak(&v125, &location);
    [v81 registerUpdateBlock:v124 forRetrieveSelector:"voiceOverContinuousPathKeyboardStartTimeout" withListener:v3];

    objc_destroyWeak(&v125);
    v82 = +[AXSettings sharedInstance];
    v122[0] = _NSConcreteStackBlock;
    v122[1] = 3221225472;
    v122[2] = sub_10005A388;
    v122[3] = &unk_1001B35A8;
    objc_copyWeak(&v123, &location);
    [v82 registerUpdateBlock:v122 forRetrieveSelector:"voiceOverRotorItems" withListener:v3];

    objc_destroyWeak(&v123);
    v83 = +[AXSettings sharedInstance];
    v84 = [v83 voiceOverDirectTouchEnabledApps];
    id v85 = [v84 mutableCopy];
    [(VOTElementManager *)v3 setDirectTouchApps:v85];

    v86 = +[AXSettings sharedInstance];
    v120[0] = _NSConcreteStackBlock;
    v120[1] = 3221225472;
    v120[2] = sub_10005A3D0;
    v120[3] = &unk_1001B35A8;
    objc_copyWeak(&v121, &location);
    [v86 registerUpdateBlock:v120 forRetrieveSelector:"voiceOverDirectTouchEnabledApps" withListener:v3];

    objc_destroyWeak(&v121);
    v118[0] = _NSConcreteStackBlock;
    v118[1] = 3221225472;
    v118[2] = sub_10005A45C;
    v118[3] = &unk_1001B33B8;
    v87 = v3;
    v119 = v87;
    v88 = objc_retainBlock(v118);
    v89 = +[AXSettings sharedInstance];
    [v89 registerUpdateBlock:v88 forRetrieveSelector:"automaticAccessibilityModes" withListener:v87];

    ((void (*)(void *))v88[2])(v88);
    if (MGGetBoolAnswer() && _os_feature_enabled_impl())
    {
      [v87 _updateFlashlightEnabledStatus];
      v90 = +[AXSettings sharedInstance];
      v116[0] = _NSConcreteStackBlock;
      v116[1] = 3221225472;
      v116[2] = sub_10005A47C;
      v116[3] = &unk_1001B35A8;
      objc_copyWeak(&v117, &location);
      [v90 registerUpdateBlock:v116 forRetrieveSelector:"voiceOverFlashlightNotificationsEnabled" withListener:v87];

      objc_destroyWeak(&v117);
    }
    id v91 = objc_alloc_init((Class)AXScribbleManager);
    id v92 = v87[260];
    v87[260] = v91;

    if (([(id)VOTSharedWorkspace inUnitTestMode] & 1) == 0)
    {
      v93 = +[AXSpringBoardServer server];
      v114[0] = _NSConcreteStackBlock;
      v114[1] = 3221225472;
      v114[2] = sub_10005A4BC;
      v114[3] = &unk_1001B4938;
      objc_copyWeak(&v115, &location);
      v109 = _NSConcreteStackBlock;
      uint64_t v110 = 3221225472;
      v111 = sub_10005A58C;
      v112 = &unk_1001B4960;
      objc_copyWeak(&v113, &location);
      [v93 registerSpringBoardActionHandler:v114 withIdentifierCallback:&v109];

      objc_destroyWeak(&v113);
      objc_destroyWeak(&v115);
    }
    v94 = +[VOTWorkspace sharedWorkspace];
    v95 = [v94 visionEngine];
    [v95 setResultUpdateDelegate:v87];

    v87[314] = (id)0xC1E6CEAF20000000;
    v87[233] = (id)0x7FFFFFFFFFFFFFFFLL;
    *((_DWORD *)v87 + 196) = -1;
    id v96 = objc_alloc((Class)AXDragManager);
    id v97 = [v96 initWithMachServiceName:AXDragServiceNameVoiceOver];
    id v98 = v87[250];
    v87[250] = v97;

    [v87[250] setDelegate:v87];
    uint64_t v99 = objc_opt_new();
    id v100 = v87[251];
    v87[251] = (id)v99;

    v101 = +[AXSettings sharedInstance];
    LODWORD(v95) = [v101 laserEnabled];

    if (v95)
    {
      v102 = +[VOTDisplayManager displayManager];
      [v102 registerForPointerEvents:v87];
    }
    v103 = +[AXPISystemActionHelper sharedInstance];
    [v103 warm];

    uint64_t v104 = objc_opt_new();
    id v105 = v87[341];
    v87[341] = (id)v104;

    uint64_t v106 = objc_opt_new();
    id v107 = v87[261];
    v87[261] = (id)v106;

    [v87 _updateForContinuityStateChange];
    objc_destroyWeak(&location);
  }
  return v3;
}

- (void)dealloc
{
  v3 = +[VOTOutputManager outputManager];
  [v3 removeOutputManagerObserver:self];

  [(VOTOutputRequest *)self->_startTrackingRoadRequest setCompletionDelegate:0];
  startTrackingRoadRequest = self->_startTrackingRoadRequest;
  self->_startTrackingRoadRequest = 0;

  [(VOTOutputRequest *)self->_switchRoadsOutputRequest setCompletionDelegate:0];
  switchRoadsOutputRequest = self->_switchRoadsOutputRequest;
  self->_switchRoadsOutputRequest = 0;

  [(VOTOutputRequest *)self->_endOfRoadApproachingRequest setCompletionDelegate:0];
  endOfRoadApproachingRequest = self->_endOfRoadApproachingRequest;
  self->_endOfRoadApproachingRequest = 0;

  [(VOTOutputRequest *)self->_bookPageContentOutputRequest setCompletionDelegate:0];
  bookPageContentOutputRequest = self->_bookPageContentOutputRequest;
  self->_bookPageContentOutputRequest = 0;

  [(VOTOutputRequest *)self->_readAllOutputRequest setCompletionDelegate:0];
  readAllOutputRequest = self->_readAllOutputRequest;
  self->_readAllOutputRequest = 0;

  [(VOTOutputRequest *)self->_announcementRequest setCompletionDelegate:0];
  announcementRequest = self->_announcementRequest;
  self->_announcementRequest = 0;

  bookPageScrollString = self->_bookPageScrollString;
  self->_bookPageScrollString = 0;

  long long v11 = +[AXSpringBoardServer server];
  [v11 removeActionHandler:self->_springBoardActionHandlerIdentifier];

  [(SCRCTargetSelectorTimer *)self->_visualRotorFadeTimer invalidate];
  visualRotorFadeTimer = self->_visualRotorFadeTimer;
  self->_visualRotorFadeTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_continuousPathIdleTimer invalidate];
  [(SCRCTargetSelectorTimer *)self->_keyboardAlternativeModeActivationTimer invalidate];
  keyboardAlternativeModeActivationTimer = self->_keyboardAlternativeModeActivationTimer;
  self->_keyboardAlternativeModeActivationTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_alternativeKeyDismissalTimer invalidate];
  alternativeKeyDismissalTimer = self->_alternativeKeyDismissalTimer;
  self->_alternativeKeyDismissalTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_containerFrameDrawingTimer invalidate];
  containerFrameDrawingTimer = self->_containerFrameDrawingTimer;
  self->_containerFrameDrawingTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_webPageLoadingSoundTimer invalidate];
  webPageLoadingSoundTimer = self->_webPageLoadingSoundTimer;
  self->_webPageLoadingSoundTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_invalidStatusChangedTimer invalidate];
  invalidStatusChangedTimer = self->_invalidStatusChangedTimer;
  self->_invalidStatusChangedTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_appSuspensionSoundTimer invalidate];
  appSuspensionSoundTimer = self->_appSuspensionSoundTimer;
  self->_appSuspensionSoundTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_updateLayoutTimer invalidate];
  updateLayoutTimer = self->_updateLayoutTimer;
  self->_updateLayoutTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_simulatedPressOutputTimer invalidate];
  simulatedPressOutputTimer = self->_simulatedPressOutputTimer;
  self->_simulatedPressOutputTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_switchRoadsAtIntersectionTimer invalidate];
  switchRoadsAtIntersectionTimer = self->_switchRoadsAtIntersectionTimer;
  self->_switchRoadsAtIntersectionTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_simulatedForceLiftTimer invalidate];
  simulatedForceLiftTimer = self->_simulatedForceLiftTimer;
  self->_simulatedForceLiftTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer invalidate];
  updateAppFromTimer = self->_updateAppFromTimer;
  self->_updateAppFromTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_updateWithNativeFocusTimer invalidate];
  updateWithNativeFocusTimer = self->_updateWithNativeFocusTimer;
  self->_updateWithNativeFocusTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_updateVisualsTimer invalidate];
  updateVisualsTimer = self->_updateVisualsTimer;
  self->_updateVisualsTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_updatePreferredTVInteractionModeTimer invalidate];
  updatePreferredTVInteractionModeTimer = self->_updatePreferredTVInteractionModeTimer;
  self->_updatePreferredTVInteractionModeTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_elementUpdatesFrequentlyTimer invalidate];
  elementUpdatesFrequentlyTimer = self->_elementUpdatesFrequentlyTimer;
  self->_elementUpdatesFrequentlyTimer = 0;

  [(SCRCTargetSelectorTimer *)self->_reachabilityWaitForTrackingTimer invalidate];
  reachabilityWaitForTrackingTimer = self->_reachabilityWaitForTrackingTimer;
  self->_reachabilityWaitForTrackingTimer = 0;

  -[SCRCThread performSelector:onTarget:count:objects:](self->_elementManagerThread, "performSelector:onTarget:count:objects:", "_exitThread:", objc_opt_class(), 1, self->_elementManagerThread, 0);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, self);
  v30.receiver = self;
  v30.super_class = (Class)VOTElementManager;
  [(VOTElementManager *)&v30 dealloc];
}

+ (void)_exitThread:(id)a3
{
  [a3 setIsInvalid:1];

  +[NSThread exit];
}

- (void)_initializeElementManagerThread
{
  AXSetThreadPriority();
  id v4 = +[NSThread currentThread];
  id v2 = (objc_class *)objc_opt_class();
  v3 = NSStringFromClass(v2);
  [v4 setName:v3];
}

- (void)_initializeSystemEventThread
{
  AXSetThreadPriority();
  id v2 = +[NSThread currentThread];
  [v2 setName:@"VOTSystemEvent"];
}

- (void)_migratePerAppDirectTouchBehavior
{
  v3 = +[AXSettings sharedInstance];
  id v4 = [v3 voiceOverDirectTouchEnabledApps];

  if (v4)
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id v5 = +[LSApplicationRecord enumeratorWithOptions:0];
    id v6 = [v5 countByEnumeratingWithState:&v42 objects:v49 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v43;
      while (2)
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v43 != v8) {
            objc_enumerationMutation(v5);
          }
          long long v10 = *(void **)(*((void *)&v42 + 1) + 8 * i);
          long long v11 = +[AXSettings sharedInstance];
          long long v12 = [v11 voiceOverDirectTouchEnabledApps];
          long long v13 = [v10 bundleIdentifier];
          v14 = [v12 objectForKeyedSubscript:v13];

          if (!v14)
          {

            goto LABEL_12;
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v42 objects:v49 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
  }
  else
  {
LABEL_12:
    v15 = +[VOTConfiguration rootConfiguration];
    uint64_t v16 = [v15 preferenceForKey:@"DirectTouchMode"];
    v17 = (void *)v16;
    v18 = &__kCFBooleanTrue;
    if (v16) {
      v18 = (void *)v16;
    }
    id v5 = v18;

    v19 = [(VOTElementManager *)self directTouchApps];

    if (!v19)
    {
      v20 = objc_opt_new();
      [(VOTElementManager *)self setDirectTouchApps:v20];
    }
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    v21 = +[LSApplicationRecord enumeratorWithOptions:](LSApplicationRecord, "enumeratorWithOptions:", 0, 0);
    id v22 = [v21 countByEnumeratingWithState:&v38 objects:v48 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v39;
      do
      {
        for (j = 0; j != v23; j = (char *)j + 1)
        {
          if (*(void *)v39 != v24) {
            objc_enumerationMutation(v21);
          }
          v26 = *(void **)(*((void *)&v38 + 1) + 8 * (void)j);
          v27 = [(VOTElementManager *)self directTouchApps];
          v28 = [v26 bundleIdentifier];
          [v27 setObject:v5 forKeyedSubscript:v28];
        }
        id v23 = [v21 countByEnumeratingWithState:&v38 objects:v48 count:16];
      }
      while (v23);
    }

    v29 = [(VOTElementManager *)self directTouchApps];
    objc_super v30 = +[AXSettings sharedInstance];
    [v30 setVoiceOverDirectTouchEnabledApps:v29];

    v31 = VOTLogCommon();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      v32 = [(VOTElementManager *)self directTouchApps];
      *(_DWORD *)buf = 138412290;
      id v47 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "1: %@", buf, 0xCu);
    }
    v33 = VOTLogCommon();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v47 = v5;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Migrate direct touch settings with default value: %@", buf, 0xCu);
    }

    v34 = VOTLogCommon();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      v35 = +[AXSettings sharedInstance];
      v36 = [v35 voiceOverDirectTouchEnabledApps];
      *(_DWORD *)buf = 138412290;
      id v47 = v36;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "2: %@", buf, 0xCu);
    }
    v37 = +[VOTConfiguration rootConfiguration];
    [v37 setPreference:0 forKey:@"DirectTouchMode"];
  }
}

- (void)pointerDidMoveToGlobalPoint:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  if (([(id)VOTSharedWorkspace speakUnderPointer] & 1) != 0
    || [(id)VOTSharedWorkspace pointerVoiceOverCursorOption] == 2)
  {
    elementManagerThread = self->_elementManagerThread;
    +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:", x, y);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    [(SCRCThread *)elementManagerThread performSelector:"_pointerDidMoveToGlobalPoint:" onTarget:self cancelMask:0xFFFFFFFFLL count:1 objects:v7];
  }
}

- (void)_pointerDidMoveToGlobalPoint:(id)a3
{
  [a3 CGPointValue];
  uint64_t v9 = -[VOTElement initWithPosition:]([VOTElement alloc], "initWithPosition:", v4, v5);
  if ([(id)VOTSharedWorkspace pointerVoiceOverCursorOption] == 2)
  {
    if (v9)
    {
      id v6 = [(VOTElementManager *)self _currentElement];
      unsigned __int8 v7 = [(VOTElement *)v9 isEqual:v6];

      if ((v7 & 1) == 0) {
        [(VOTElementManager *)self _echoDifferentElement:v9 forEvent:0];
      }
    }
  }
  else if ([(id)VOTSharedWorkspace speakUnderPointer])
  {
    pointerSpeakElementTimer = self->_pointerSpeakElementTimer;
    [(id)VOTSharedWorkspace speakUnderPointerDelay];
    -[SCRCTargetSelectorTimer dispatchAfterDelay:withObject:](pointerSpeakElementTimer, "dispatchAfterDelay:withObject:", v9);
  }
}

- (void)_speakElementFromPointerEvent:(id)a3
{
  id v6 = a3;
  if (([v6 isEqual:self->_lastSpeakUnderPointerElement] & 1) == 0)
  {
    objc_storeStrong((id *)&self->_lastSpeakUnderPointerElement, a3);
    LOWORD(v5) = 0;
    -[VOTElementManager _echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound:isProtectedApp:includeHint:boundaryHit:](self, "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound:isProtectedApp:includeHint:boundaryHit:", v6, 0, 0, 0, 0, 0, v5);
  }
}

- (void)_initializeCommands
{
  commands = self->_commands;
  double v4 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleTracking:"];
  -[AXIndexMap setObject:forIndex:](commands, "setObject:forIndex:", v4, [kVOTEventCommandTracking hash]);

  uint64_t v5 = self->_commands;
  id v6 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleTapAndHoldEventMonitor:"];
  -[AXIndexMap setObject:forIndex:](v5, "setObject:forIndex:", v6, [kVOTEventCommandTapAndHoldEventMonitor hash]);

  unsigned __int8 v7 = self->_commands;
  uint64_t v8 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleIdle:"];
  -[AXIndexMap setObject:forIndex:](v7, "setObject:forIndex:", v8, [kVOTEventCommandIdle hash]);

  uint64_t v9 = self->_commands;
  long long v10 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSimulatedLongPress:"];
  -[AXIndexMap setObject:forIndex:](v9, "setObject:forIndex:", v10, [kVOTEventCommandSimulatedLongPress hash]);

  long long v11 = self->_commands;
  long long v12 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handlePerformHomeButtonPress:"];
  -[AXIndexMap setObject:forIndex:](v11, "setObject:forIndex:", v12, [kVOTEventCommandHomeButtonPress hash]);

  long long v13 = self->_commands;
  v14 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleStartSiri:"];
  -[AXIndexMap setObject:forIndex:](v13, "setObject:forIndex:", v14, [kVOTEventCommandStartSiri hash]);

  v15 = self->_commands;
  uint64_t v16 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleElementMovement:"];
  -[AXIndexMap setObject:forIndex:](v15, "setObject:forIndex:", v16, [kVOTEventCommandPreviousElement hash]);

  v17 = self->_commands;
  v18 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleElementMovement:"];
  -[AXIndexMap setObject:forIndex:](v17, "setObject:forIndex:", v18, [kVOTEventCommandNextElement hash]);

  v19 = self->_commands;
  v20 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleElementMovement:"];
  -[AXIndexMap setObject:forIndex:](v19, "setObject:forIndex:", v20, [kVOTEventCommandFirstElement hash]);

  v21 = self->_commands;
  id v22 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleElementMovement:"];
  -[AXIndexMap setObject:forIndex:](v21, "setObject:forIndex:", v22, [kVOTEventCommandLastElement hash]);

  id v23 = self->_commands;
  uint64_t v24 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleElementMovement:"];
  -[AXIndexMap setObject:forIndex:](v23, "setObject:forIndex:", v24, [kVOTEventCommandCenterElement hash]);

  v25 = self->_commands;
  v26 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleMoveToElementAbove:"];
  -[AXIndexMap setObject:forIndex:](v25, "setObject:forIndex:", v26, [kVOTEventCommandElementAbove hash]);

  v27 = self->_commands;
  v28 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleMoveToElementBelow:"];
  -[AXIndexMap setObject:forIndex:](v27, "setObject:forIndex:", v28, [kVOTEventCommandElementBelow hash]);

  v29 = self->_commands;
  objc_super v30 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleElementInteraction:"];
  -[AXIndexMap setObject:forIndex:](v29, "setObject:forIndex:", v30, [kVOTEventCommandMoveIn hash]);

  v31 = self->_commands;
  v32 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleElementInteraction:"];
  -[AXIndexMap setObject:forIndex:](v31, "setObject:forIndex:", v32, [kVOTEventCommandMoveOut hash]);

  v33 = self->_commands;
  v34 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleTextWordMovement:"];
  -[AXIndexMap setObject:forIndex:](v33, "setObject:forIndex:", v34, [kVOTEventCommandFirstWord hash]);

  v35 = self->_commands;
  v36 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleTextWordMovement:"];
  -[AXIndexMap setObject:forIndex:](v35, "setObject:forIndex:", v36, [kVOTEventCommandLastWord hash]);

  v37 = self->_commands;
  long long v38 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleTextDocumentMovement:"];
  -[AXIndexMap setObject:forIndex:](v37, "setObject:forIndex:", v38, [kVOTEventCommandDocumentTop hash]);

  long long v39 = self->_commands;
  long long v40 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleTextDocumentMovement:"];
  -[AXIndexMap setObject:forIndex:](v39, "setObject:forIndex:", v40, [kVOTEventCommandDocumentBottom hash]);

  long long v41 = self->_commands;
  long long v42 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleElementMoveToStatusBar:"];
  -[AXIndexMap setObject:forIndex:](v41, "setObject:forIndex:", v42, [kVOTEventCommandMoveToStatusBar hash]);

  long long v43 = self->_commands;
  long long v44 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleCharacterMovement:"];
  -[AXIndexMap setObject:forIndex:](v43, "setObject:forIndex:", v44, [kVOTEventCommandNextCharacter hash]);

  long long v45 = self->_commands;
  v46 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleCharacterMovement:"];
  -[AXIndexMap setObject:forIndex:](v45, "setObject:forIndex:", v46, [kVOTEventCommandPreviousCharacter hash]);

  id v47 = self->_commands;
  v48 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleWordMovement:"];
  -[AXIndexMap setObject:forIndex:](v47, "setObject:forIndex:", v48, [kVOTEventCommandNextWord hash]);

  v49 = self->_commands;
  v50 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleWordMovement:"];
  -[AXIndexMap setObject:forIndex:](v49, "setObject:forIndex:", v50, [kVOTEventCommandPreviousWord hash]);

  v51 = self->_commands;
  v52 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleLineMovement:"];
  -[AXIndexMap setObject:forIndex:](v51, "setObject:forIndex:", v52, [kVOTEventCommandNextLine hash]);

  v53 = self->_commands;
  v54 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleLineMovement:"];
  -[AXIndexMap setObject:forIndex:](v53, "setObject:forIndex:", v54, [kVOTEventCommandPreviousLine hash]);

  v55 = self->_commands;
  v56 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSentenceMovement:"];
  -[AXIndexMap setObject:forIndex:](v55, "setObject:forIndex:", v56, [kVOTEventCommandNextSentence hash]);

  v57 = self->_commands;
  v58 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSentenceMovement:"];
  -[AXIndexMap setObject:forIndex:](v57, "setObject:forIndex:", v58, [kVOTEventCommandPreviousSentence hash]);

  v59 = self->_commands;
  v60 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleParagraphMovement:"];
  -[AXIndexMap setObject:forIndex:](v59, "setObject:forIndex:", v60, [kVOTEventCommandNextParagraph hash]);

  uint64_t v61 = self->_commands;
  v62 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleParagraphMovement:"];
  -[AXIndexMap setObject:forIndex:](v61, "setObject:forIndex:", v62, [kVOTEventCommandPreviousParagraph hash]);

  v63 = self->_commands;
  v64 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleCursorMovementByTextSegment:"];
  -[AXIndexMap setObject:forIndex:](v63, "setObject:forIndex:", v64, [kVOTEventCommandNextTextSegment hash]);

  v65 = self->_commands;
  v66 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleCursorMovementByTextSegment:"];
  -[AXIndexMap setObject:forIndex:](v65, "setObject:forIndex:", v66, [kVOTEventCommandPreviousTextSegment hash]);

  v67 = self->_commands;
  v68 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleContainerMovement:"];
  -[AXIndexMap setObject:forIndex:](v67, "setObject:forIndex:", v68, [kVOTEventCommandPreviousContainer hash]);

  v69 = self->_commands;
  v70 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleContainerMovement:"];
  -[AXIndexMap setObject:forIndex:](v69, "setObject:forIndex:", v70, [kVOTEventCommandNextContainer hash]);

  v71 = self->_commands;
  v72 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleIntraContainerMovement:"];
  -[AXIndexMap setObject:forIndex:](v71, "setObject:forIndex:", v72, [kVOTEventCommandContainerTop hash]);

  v73 = self->_commands;
  v74 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleIntraContainerMovement:"];
  -[AXIndexMap setObject:forIndex:](v73, "setObject:forIndex:", v74, [kVOTEventCommandContainerBottom hash]);

  v75 = self->_commands;
  v76 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleIncreaseVolume:"];
  -[AXIndexMap setObject:forIndex:](v75, "setObject:forIndex:", v76, [kVOTEventCommandIncreaseVolume hash]);

  v77 = self->_commands;
  v78 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDecreaseVolume:"];
  -[AXIndexMap setObject:forIndex:](v77, "setObject:forIndex:", v78, [kVOTEventCommandDecreaseVolume hash]);

  v79 = self->_commands;
  v80 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleRotateOrientation:"];
  -[AXIndexMap setObject:forIndex:](v79, "setObject:forIndex:", v80, [kVOTEventCommandRotateOrientationLeft hash]);

  v81 = self->_commands;
  v82 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleRotateOrientation:"];
  -[AXIndexMap setObject:forIndex:](v81, "setObject:forIndex:", v82, [kVOTEventCommandRotateOrientationRight hash]);

  v83 = self->_commands;
  v84 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputColumnHeader:"];
  -[AXIndexMap setObject:forIndex:](v83, "setObject:forIndex:", v84, [kVOTEventCommandOutputColumnHeader hash]);

  id v85 = self->_commands;
  v86 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputColumnContents:"];
  -[AXIndexMap setObject:forIndex:](v85, "setObject:forIndex:", v86, [kVOTEventCommandOutputContentsOfColumn hash]);

  v87 = self->_commands;
  v88 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputCharacter:"];
  -[AXIndexMap setObject:forIndex:](v87, "setObject:forIndex:", v88, [kVOTEventCommandOutputCharacter hash]);

  v89 = self->_commands;
  v90 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputCharacterPhonetically:"];
  -[AXIndexMap setObject:forIndex:](v89, "setObject:forIndex:", v90, [kVOTEventCommandOutputCharacterPhonetically hash]);

  id v91 = self->_commands;
  id v92 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputTableRowColumnInfo:"];
  -[AXIndexMap setObject:forIndex:](v91, "setObject:forIndex:", v92, [kVOTEventCommandOutputTableRowColumnInfo hash]);

  v93 = self->_commands;
  v94 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputCellRowColumnInfo:"];
  -[AXIndexMap setObject:forIndex:](v93, "setObject:forIndex:", v94, [kVOTEventCommandOutputCellRowColumnInfo hash]);

  v95 = self->_commands;
  id v96 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputRowContents:"];
  -[AXIndexMap setObject:forIndex:](v95, "setObject:forIndex:", v96, [kVOTEventCommandOutputContentsOfRow hash]);

  id v97 = self->_commands;
  id v98 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleRealtimeElementMovement:"];
  -[AXIndexMap setObject:forIndex:](v97, "setObject:forIndex:", v98, [kVOTEventCommandNextRealtimeElement hash]);

  uint64_t v99 = self->_commands;
  id v100 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleRealtimeElementMovement:"];
  -[AXIndexMap setObject:forIndex:](v99, "setObject:forIndex:", v100, [kVOTEventCommandPreviousRealtimeElement hash]);

  v101 = self->_commands;
  v102 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleShowEditingHUD:"];
  -[AXIndexMap setObject:forIndex:](v101, "setObject:forIndex:", v102, [kVOTEventCommandShowEditingHUD hash]);

  v103 = self->_commands;
  uint64_t v104 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemControlActivation:"];
  -[AXIndexMap setObject:forIndex:](v103, "setObject:forIndex:", v104, [kVOTEventCommandSystemShowControlCenter hash]);

  id v105 = self->_commands;
  uint64_t v106 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemControlActivation:"];
  -[AXIndexMap setObject:forIndex:](v105, "setObject:forIndex:", v106, [kVOTEventCommandSystemShowNotificationCenter hash]);

  id v107 = self->_commands;
  v108 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleTypeToSiri:"];
  -[AXIndexMap setObject:forIndex:](v107, "setObject:forIndex:", v108, [kVOTEventCommandSystemToggleTypeToSiri hash]);

  v109 = self->_commands;
  uint64_t v110 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemControlActivation:"];
  -[AXIndexMap setObject:forIndex:](v109, "setObject:forIndex:", v110, [kVOTEventCommandSystemControlRight hash]);

  v111 = self->_commands;
  v112 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemControlActivation:"];
  -[AXIndexMap setObject:forIndex:](v111, "setObject:forIndex:", v112, [kVOTEventCommandSystemControlLeft hash]);

  id v113 = self->_commands;
  v114 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemControlActivation:"];
  -[AXIndexMap setObject:forIndex:](v113, "setObject:forIndex:", v114, [kVOTEventCommandSystemControlTwoTop hash]);

  id v115 = self->_commands;
  v116 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandNotificationCenter:"];
  -[AXIndexMap setObject:forIndex:](v115, "setObject:forIndex:", v116, [kVOTEventCommandSystemShowNotificationCenter hash]);

  id v117 = self->_commands;
  v118 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandControlCenter:"];
  -[AXIndexMap setObject:forIndex:](v117, "setObject:forIndex:", v118, [kVOTEventCommandSystemShowControlCenter hash]);

  v119 = self->_commands;
  v120 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandActivateSpeakScreen:"];
  -[AXIndexMap setObject:forIndex:](v119, "setObject:forIndex:", v120, [kVOTEventCommandSystemActivateSpeakScreen hash]);

  id v121 = self->_commands;
  v122 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandToggleDock:"];
  -[AXIndexMap setObject:forIndex:](v121, "setObject:forIndex:", v122, [kVOTEventCommandSystemToggleDock hash]);

  id v123 = self->_commands;
  v124 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandToggleAppSwitcher:"];
  -[AXIndexMap setObject:forIndex:](v123, "setObject:forIndex:", v124, [kVOTEventCommandSystemToggleAppSwitcher hash]);

  id v125 = self->_commands;
  v126 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandActivateLockButton:"];
  -[AXIndexMap setObject:forIndex:](v125, "setObject:forIndex:", v126, [kVOTEventCommandSystemActivateLockButton hash]);

  objc_super v127 = self->_commands;
  v128 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandSpotlight:"];
  -[AXIndexMap setObject:forIndex:](v127, "setObject:forIndex:", v128, [kVOTEventCommandSystemShowSpotlight hash]);

  v129 = self->_commands;
  v130 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandActivateAccessibilityShortcut:"];
  -[AXIndexMap setObject:forIndex:](v129, "setObject:forIndex:", v130, [kVOTEventCommandSystemActivateAccessibilityShortcut hash]);

  v131 = self->_commands;
  v132 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandToggleReachability:"];
  -[AXIndexMap setObject:forIndex:](v131, "setObject:forIndex:", v132, [kVOTEventCommandSystemToggleReachability hash]);

  v133 = self->_commands;
  v134 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandTakeScreenshot:"];
  -[AXIndexMap setObject:forIndex:](v133, "setObject:forIndex:", v134, [kVOTEventCommandSystemTakeScreenshot hash]);

  v135 = self->_commands;
  v136 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandSwitchToPreviousApp:"];
  -[AXIndexMap setObject:forIndex:](v135, "setObject:forIndex:", v136, [kVOTEventCommandSystemSwitchToPreviousApp hash]);

  v137 = self->_commands;
  v138 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandSwitchToNextApp:"];
  -[AXIndexMap setObject:forIndex:](v137, "setObject:forIndex:", v138, [kVOTEventCommandSystemSwitchToNextApp hash]);

  v139 = self->_commands;
  v140 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSystemCommandToggleQuickNote:"];
  -[AXIndexMap setObject:forIndex:](v139, "setObject:forIndex:", v140, [kVOTEventCommandSystemToggleQuickNote hash]);

  v141 = self->_commands;
  v142 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleCancelSpeaking:"];
  -[AXIndexMap setObject:forIndex:](v141, "setObject:forIndex:", v142, [kVOTEventCommandCancelSpeaking hash]);

  v143 = self->_commands;
  v144 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handlePauseSpeaking:"];
  -[AXIndexMap setObject:forIndex:](v143, "setObject:forIndex:", v144, [kVOTEventCommandPauseSpeaking hash]);

  v145 = self->_commands;
  v146 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleContinueSpeaking:"];
  -[AXIndexMap setObject:forIndex:](v145, "setObject:forIndex:", v146, [kVOTEventCommandContinueSpeaking hash]);

  v147 = self->_commands;
  v148 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleSpeaking:"];
  -[AXIndexMap setObject:forIndex:](v147, "setObject:forIndex:", v148, [kVOTEventCommandToggleSpeaking hash]);

  v149 = self->_commands;
  v150 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleReadAll:"];
  -[AXIndexMap setObject:forIndex:](v149, "setObject:forIndex:", v150, [kVOTEventCommandReadAll hash]);

  v151 = self->_commands;
  v152 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleReadScreenSummary:"];
  -[AXIndexMap setObject:forIndex:](v151, "setObject:forIndex:", v152, [kVOTEventCommandReadScreenSummary hash]);

  v153 = self->_commands;
  v154 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleReadFromTop:"];
  -[AXIndexMap setObject:forIndex:](v153, "setObject:forIndex:", v154, [kVOTEventCommandReadFromTop hash]);

  v155 = self->_commands;
  v156 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleCopySpeechToClipboard:"];
  -[AXIndexMap setObject:forIndex:](v155, "setObject:forIndex:", v156, [kVOTEventCommandCopySpeechToClipboard hash]);

  v157 = self->_commands;
  v158 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handlePerformTapAutofill:"];
  -[AXIndexMap setObject:forIndex:](v157, "setObject:forIndex:", v158, [kVOTEventCommandTapAutofill hash]);

  v159 = self->_commands;
  v160 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputTextStyle:"];
  -[AXIndexMap setObject:forIndex:](v159, "setObject:forIndex:", v160, [kVOTEventCommandOutputTextStyle hash]);

  v161 = self->_commands;
  v162 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"handleSearchRotorUp:"];
  -[AXIndexMap setObject:forIndex:](v161, "setObject:forIndex:", v162, [kVOTEventCommandSearchRotorUp hash]);

  v163 = self->_commands;
  v164 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"handleSearchRotorDown:"];
  -[AXIndexMap setObject:forIndex:](v163, "setObject:forIndex:", v164, [kVOTEventCommandSearchRotorDown hash]);

  v165 = self->_commands;
  v166 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSearchRotorLeft:"];
  -[AXIndexMap setObject:forIndex:](v165, "setObject:forIndex:", v166, [kVOTEventCommandSearchRotorLeft hash]);

  v167 = self->_commands;
  v168 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSearchRotorRight:"];
  -[AXIndexMap setObject:forIndex:](v167, "setObject:forIndex:", v168, [kVOTEventCommandSearchRotorRight hash]);

  v169 = self->_commands;
  v170 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSearchRotorEcho:"];
  -[AXIndexMap setObject:forIndex:](v169, "setObject:forIndex:", v170, [kVOTEventCommandSearchRotorEcho hash]);

  v171 = self->_commands;
  v172 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleStartTextSearch:"];
  -[AXIndexMap setObject:forIndex:](v171, "setObject:forIndex:", v172, [kVOTEventCommandStartTextSearch hash]);

  v173 = self->_commands;
  v174 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOngoingTextSearch:"];
  -[AXIndexMap setObject:forIndex:](v173, "setObject:forIndex:", v174, [kVOTEventCommandTextSearchForward hash]);

  v175 = self->_commands;
  v176 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOngoingTextSearch:"];
  -[AXIndexMap setObject:forIndex:](v175, "setObject:forIndex:", v176, [kVOTEventCommandTextSearchBackward hash]);

  v177 = self->_commands;
  v178 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleItemChooserSelection:"];
  -[AXIndexMap setObject:forIndex:](v177, "setObject:forIndex:", v178, [kVOTEventCommandItemChooser hash]);

  v179 = self->_commands;
  v180 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSearchRotorSetMathPosition:"];
  -[AXIndexMap setObject:forIndex:](v179, "setObject:forIndex:", v180, [kVOTEventCommandSearchRotorSetMathPosition hash]);

  v181 = self->_commands;
  v182 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleMoveToLinkedUI:"];
  -[AXIndexMap setObject:forIndex:](v181, "setObject:forIndex:", v182, [kVOTEventCommandMoveToLinkedUI hash]);

  v183 = self->_commands;
  v184 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleMoveToNativeFocusedElement:"];
  -[AXIndexMap setObject:forIndex:](v183, "setObject:forIndex:", v184, [kVOTEventCommandMoveToNativeFocusedElement hash]);

  v185 = self->_commands;
  v186 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v185, "setObject:forIndex:", v186, [kVOTEventCommandNextGraphic hash]);

  v187 = self->_commands;
  v188 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v187, "setObject:forIndex:", v188, [kVOTEventCommandPreviousGraphic hash]);

  v189 = self->_commands;
  v190 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v189, "setObject:forIndex:", v190, [kVOTEventCommandNextHeading hash]);

  v191 = self->_commands;
  v192 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v191, "setObject:forIndex:", v192, [kVOTEventCommandPreviousHeading hash]);

  v193 = self->_commands;
  v194 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v193, "setObject:forIndex:", v194, [kVOTEventCommandNextTable hash]);

  v195 = self->_commands;
  v196 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v195, "setObject:forIndex:", v196, [kVOTEventCommandPreviousTable hash]);

  v197 = self->_commands;
  v198 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v197, "setObject:forIndex:", v198, [kVOTEventCommandNextList hash]);

  v199 = self->_commands;
  v200 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v199, "setObject:forIndex:", v200, [kVOTEventCommandPreviousList hash]);

  v201 = self->_commands;
  v202 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v201, "setObject:forIndex:", v202, [kVOTEventCommandNextControl hash]);

  v203 = self->_commands;
  v204 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v203, "setObject:forIndex:", v204, [kVOTEventCommandPreviousControl hash]);

  v205 = self->_commands;
  v206 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v205, "setObject:forIndex:", v206, [kVOTEventCommandNextLink hash]);

  v207 = self->_commands;
  v208 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v207, "setObject:forIndex:", v208, [kVOTEventCommandPreviousLink hash]);

  v209 = self->_commands;
  v210 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v209, "setObject:forIndex:", v210, [kVOTEventCommandNextVisitedLink hash]);

  v211 = self->_commands;
  v212 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v211, "setObject:forIndex:", v212, [kVOTEventCommandPreviousVisitedLink hash]);

  v213 = self->_commands;
  v214 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v213, "setObject:forIndex:", v214, [kVOTEventCommandNextSameHeading hash]);

  v215 = self->_commands;
  v216 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v215, "setObject:forIndex:", v216, [kVOTEventCommandPreviousSameHeading hash]);

  v217 = self->_commands;
  v218 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v217, "setObject:forIndex:", v218, [kVOTEventCommandNextBoldText hash]);

  v219 = self->_commands;
  v220 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v219, "setObject:forIndex:", v220, [kVOTEventCommandPreviousBoldText hash]);

  v221 = self->_commands;
  v222 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v221, "setObject:forIndex:", v222, [kVOTEventCommandNextItalicText hash]);

  v223 = self->_commands;
  v224 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v223, "setObject:forIndex:", v224, [kVOTEventCommandPreviousItalicText hash]);

  v225 = self->_commands;
  v226 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v225, "setObject:forIndex:", v226, [kVOTEventCommandNextUnderlineText hash]);

  v227 = self->_commands;
  v228 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v227, "setObject:forIndex:", v228, [kVOTEventCommandPreviousUnderlineText hash]);

  v229 = self->_commands;
  v230 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v229, "setObject:forIndex:", v230, [kVOTEventCommandNextMisspelledWord hash]);

  v231 = self->_commands;
  v232 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v231, "setObject:forIndex:", v232, [kVOTEventCommandPreviousMisspelledWord hash]);

  v233 = self->_commands;
  v234 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v233, "setObject:forIndex:", v234, [kVOTEventCommandNextPlainText hash]);

  v235 = self->_commands;
  v236 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v235, "setObject:forIndex:", v236, [kVOTEventCommandPreviousPlainText hash]);

  v237 = self->_commands;
  v238 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v237, "setObject:forIndex:", v238, [kVOTEventCommandNextColorChange hash]);

  v239 = self->_commands;
  v240 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v239, "setObject:forIndex:", v240, [kVOTEventCommandPreviousColorChange hash]);

  v241 = self->_commands;
  v242 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v241, "setObject:forIndex:", v242, [kVOTEventCommandNextFontChange hash]);

  v243 = self->_commands;
  v244 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v243, "setObject:forIndex:", v244, [kVOTEventCommandPreviousFontChange hash]);

  v245 = self->_commands;
  v246 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v245, "setObject:forIndex:", v246, [kVOTEventCommandNextStyleChange hash]);

  v247 = self->_commands;
  v248 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v247, "setObject:forIndex:", v248, [kVOTEventCommandPreviousStyleChange hash]);

  v249 = self->_commands;
  v250 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v249, "setObject:forIndex:", v250, [kVOTEventCommandNextSameElement hash]);

  v251 = self->_commands;
  v252 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v251, "setObject:forIndex:", v252, [kVOTEventCommandPreviousSameElement hash]);

  v253 = self->_commands;
  v254 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v253, "setObject:forIndex:", v254, [kVOTEventCommandNextDifferentElement hash]);

  v255 = self->_commands;
  v256 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v255, "setObject:forIndex:", v256, [kVOTEventCommandPreviousDifferentElement hash]);

  v257 = self->_commands;
  v258 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v257, "setObject:forIndex:", v258, [kVOTEventCommandNextFrame hash]);

  v259 = self->_commands;
  v260 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v259, "setObject:forIndex:", v260, [kVOTEventCommandPreviousFrame hash]);

  v261 = self->_commands;
  v262 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleColumnMovement:"];
  -[AXIndexMap setObject:forIndex:](v261, "setObject:forIndex:", v262, [kVOTEventCommandNextColumn hash]);

  v263 = self->_commands;
  v264 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleColumnMovement:"];
  -[AXIndexMap setObject:forIndex:](v263, "setObject:forIndex:", v264, [kVOTEventCommandPreviousColumn hash]);

  v265 = self->_commands;
  v266 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v265, "setObject:forIndex:", v266, [kVOTEventCommandNextBlockquote hash]);

  v267 = self->_commands;
  v268 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v267, "setObject:forIndex:", v268, [kVOTEventCommandPreviousBlockquote hash]);

  v269 = self->_commands;
  v270 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v269, "setObject:forIndex:", v270, [kVOTEventCommandNextSameBlockquote hash]);

  v271 = self->_commands;
  v272 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDirectElementSearch:"];
  -[AXIndexMap setObject:forIndex:](v271, "setObject:forIndex:", v272, [kVOTEventCommandPreviousSameBlockquote hash]);

  v273 = self->_commands;
  v274 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSimpleTap:"];
  -[AXIndexMap setObject:forIndex:](v273, "setObject:forIndex:", v274, [kVOTEventCommandSimpleTap hash]);

  v275 = self->_commands;
  v276 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDoubleTap:"];
  -[AXIndexMap setObject:forIndex:](v275, "setObject:forIndex:", v276, [kVOTEventCommandDoubleTap hash]);

  v277 = self->_commands;
  v278 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleTripleTap:"];
  -[AXIndexMap setObject:forIndex:](v277, "setObject:forIndex:", v278, [kVOTEventCommandTripleTap hash]);

  v279 = self->_commands;
  v280 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSimpleTap:"];
  -[AXIndexMap setObject:forIndex:](v279, "setObject:forIndex:", v280, [kVOTEventCommandSplitTapTap hash]);

  v281 = self->_commands;
  v282 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleStartStopToggle:"];
  -[AXIndexMap setObject:forIndex:](v281, "setObject:forIndex:", v282, [kVOTEventCommandStartStopToggle hash]);

  v283 = self->_commands;
  v284 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleLabelElement:"];
  -[AXIndexMap setObject:forIndex:](v283, "setObject:forIndex:", v284, [kVOTEventCommandLabelElement hash]);

  v285 = self->_commands;
  v286 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleMonitorElement:"];
  -[AXIndexMap setObject:forIndex:](v285, "setObject:forIndex:", v286, [kVOTEventCommandMonitorElement hash]);

  v287 = self->_commands;
  v288 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleCrownNavigation:"];
  -[AXIndexMap setObject:forIndex:](v287, "setObject:forIndex:", v288, [kVOTEventCommandToggleCrownNaviation hash]);

  v289 = self->_commands;
  v290 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSimulatedForceTouchEvent:"];
  -[AXIndexMap setObject:forIndex:](v289, "setObject:forIndex:", v290, [kVOTEventCommandSimulatedForceTouch hash]);

  v291 = self->_commands;
  v292 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleChangeAudioDuckingMode:"];
  -[AXIndexMap setObject:forIndex:](v291, "setObject:forIndex:", v292, [kVOTEventCommandChangeAudioDuckingMode hash]);

  v293 = self->_commands;
  v294 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleAutomaticAppAccessibilityToggle:"];
  -[AXIndexMap setObject:forIndex:](v293, "setObject:forIndex:", v294, [kVOTEventCommandToggleAutomaticAccessibility hash]);

  v295 = self->_commands;
  v296 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleLiveRegionCommand:"];
  -[AXIndexMap setObject:forIndex:](v295, "setObject:forIndex:", v296, [kVOTEventCommandToggleLiveRegions hash]);

  v297 = self->_commands;
  v298 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleSettingsHUD:"];
  -[AXIndexMap setObject:forIndex:](v297, "setObject:forIndex:", v298, [kVOTEventCommandToggleSettingsHUD hash]);

  v299 = self->_commands;
  v300 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleWatchWakeTap:"];
  -[AXIndexMap setObject:forIndex:](v299, "setObject:forIndex:", v300, [kVOTEventCommandWatchWakeTap hash]);

  v301 = self->_commands;
  v302 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleWatchWakeDoubleTap:"];
  -[AXIndexMap setObject:forIndex:](v301, "setObject:forIndex:", v302, [kVOTEventCommandWatchWakeDoubleTap hash]);

  v303 = self->_commands;
  v304 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleWatchWakeTripleTap:"];
  -[AXIndexMap setObject:forIndex:](v303, "setObject:forIndex:", v304, [kVOTEventCommandWatchWakeTripleTap hash]);

  v305 = self->_commands;
  v306 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleActivateHomeButton:"];
  -[AXIndexMap setObject:forIndex:](v305, "setObject:forIndex:", v306, [kVOTEventCommandActivateHomeButton hash]);

  v307 = self->_commands;
  v308 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleStingPress:"];
  -[AXIndexMap setObject:forIndex:](v307, "setObject:forIndex:", v308, [kVOTEventCommandStingPress hash]);

  v309 = self->_commands;
  v310 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleStingKeycordPress:"];
  -[AXIndexMap setObject:forIndex:](v309, "setObject:forIndex:", v310, [kVOTEventCommandStingKeycordPress hash]);

  v311 = self->_commands;
  v312 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleAutomationGeneratedTouchUpEvent:"];
  -[AXIndexMap setObject:forIndex:](v311, "setObject:forIndex:", v312, [kVOTEventCommandTouchUp hash]);

  v313 = self->_commands;
  v314 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleAutomationGeneratedTouchDownEvent:"];
  -[AXIndexMap setObject:forIndex:](v313, "setObject:forIndex:", v314, [kVOTEventCommandTouchDown hash]);

  v315 = self->_commands;
  v316 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleAutomationGeneratedTouchMoveEvent:"];
  -[AXIndexMap setObject:forIndex:](v315, "setObject:forIndex:", v316, [kVOTEventCommandTouchMove hash]);

  v317 = self->_commands;
  v318 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleAutomationGeneratedTouchCancelEvent:"];
  -[AXIndexMap setObject:forIndex:](v317, "setObject:forIndex:", v318, [kVOTEventCommandTouchCancel hash]);

  v319 = self->_commands;
  v320 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleReadWord:"];
  -[AXIndexMap setObject:forIndex:](v319, "setObject:forIndex:", v320, [kVOTEventCommandReadWord hash]);

  v321 = self->_commands;
  v322 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleReadLine:"];
  -[AXIndexMap setObject:forIndex:](v321, "setObject:forIndex:", v322, [kVOTEventCommandReadLine hash]);

  v323 = self->_commands;
  v324 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleSingleLetterQuickNav:"];
  -[AXIndexMap setObject:forIndex:](v323, "setObject:forIndex:", v324, [kVOTEventCommandToggleSingleLetterQuickNav hash]);

  v325 = self->_commands;
  v326 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleVoiceOverModifierKeyLock:"];
  -[AXIndexMap setObject:forIndex:](v325, "setObject:forIndex:", v326, [kVOTEventCommandLockVOKeyboardKeys hash]);

  v327 = self->_commands;
  v328 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputLineCount:"];
  -[AXIndexMap setObject:forIndex:](v327, "setObject:forIndex:", v328, [kVOTEventCommandOutputLineCount hash]);

  v329 = self->_commands;
  v330 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleReadURL:"];
  -[AXIndexMap setObject:forIndex:](v329, "setObject:forIndex:", v330, [kVOTEventCommandReadURL hash]);

  v331 = self->_commands;
  v332 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleReadItemHint:"];
  -[AXIndexMap setObject:forIndex:](v331, "setObject:forIndex:", v332, [kVOTEventCommandReadHint hash]);

  v333 = self->_commands;
  v334 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleScrollByPage:"];
  -[AXIndexMap setObject:forIndex:](v333, "setObject:forIndex:", v334, [kVOTEventCommandScrollLeftPage hash]);

  v335 = self->_commands;
  v336 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleScrollByPage:"];
  -[AXIndexMap setObject:forIndex:](v335, "setObject:forIndex:", v336, [kVOTEventCommandScrollRightPage hash]);

  v337 = self->_commands;
  v338 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleScrollByPage:"];
  -[AXIndexMap setObject:forIndex:](v337, "setObject:forIndex:", v338, [kVOTEventCommandScrollUpPage hash]);

  v339 = self->_commands;
  v340 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleScrollByPage:"];
  -[AXIndexMap setObject:forIndex:](v339, "setObject:forIndex:", v340, [kVOTEventCommandScrollDownPage hash]);

  v341 = self->_commands;
  v342 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleScrollToTop:"];
  -[AXIndexMap setObject:forIndex:](v341, "setObject:forIndex:", v342, [kVOTEventCommandScrollToTop hash]);

  v343 = self->_commands;
  v344 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleScrollToBottom:"];
  -[AXIndexMap setObject:forIndex:](v343, "setObject:forIndex:", v344, [kVOTEventCommandScrollToBottom hash]);

  v345 = self->_commands;
  v346 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputElementSummary:"];
  -[AXIndexMap setObject:forIndex:](v345, "setObject:forIndex:", v346, [kVOTEventCommandOutputElementSummary hash]);

  v347 = self->_commands;
  v348 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputComputerVisionAnalysisSummary:"];
  -[AXIndexMap setObject:forIndex:](v347, "setObject:forIndex:", v348, [kVOTEventCommandOutputElementComputerVisionAnalysisSummary hash]);

  v349 = self->_commands;
  v350 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputFocusedElementSummary:"];
  -[AXIndexMap setObject:forIndex:](v349, "setObject:forIndex:", v350, [kVOTEventCommandOutputFocusedElementSummary hash]);

  v351 = self->_commands;
  v352 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSelectedTextOutput:"];
  -[AXIndexMap setObject:forIndex:](v351, "setObject:forIndex:", v352, [kVOTEventCommandOutputSelectedInformation hash]);

  v353 = self->_commands;
  v354 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOutputFocusedElementSummary:"];
  -[AXIndexMap setObject:forIndex:](v353, "setObject:forIndex:", v354, [kVOTEventCommandOutputDetailedFocusedElementSummary hash]);

  v355 = self->_commands;
  v356 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleScrollToPoint:"];
  -[AXIndexMap setObject:forIndex:](v355, "setObject:forIndex:", v356, [kVOTEventCommandScrollToPoint hash]);

  v357 = self->_commands;
  v358 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleAppSwitch:"];
  -[AXIndexMap setObject:forIndex:](v357, "setObject:forIndex:", v358, [kVOTEventAppSwitchNext hash]);

  v359 = self->_commands;
  v360 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleAppSwitch:"];
  -[AXIndexMap setObject:forIndex:](v359, "setObject:forIndex:", v360, [kVOTEventAppSwitchPrevious hash]);

  v361 = self->_commands;
  v362 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSingleLetterSearch:"];
  -[AXIndexMap setObject:forIndex:](v361, "setObject:forIndex:", v362, [kVOTEventCommandSingleLetterSearch hash]);

  v363 = self->_commands;
  v364 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleEdgeSwipeRight:"];
  -[AXIndexMap setObject:forIndex:](v363, "setObject:forIndex:", v364, [kVOTEventCommandEdgeRight hash]);

  v365 = self->_commands;
  v366 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleEdgeSwipeLeft:"];
  -[AXIndexMap setObject:forIndex:](v365, "setObject:forIndex:", v366, [kVOTEventCommandEdgeLeft hash]);

  v367 = self->_commands;
  v368 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleEdgeSwipeTop:"];
  -[AXIndexMap setObject:forIndex:](v367, "setObject:forIndex:", v368, [kVOTEventCommandEdgeTop hash]);

  v369 = self->_commands;
  v370 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleEdgeSwipeBottom:"];
  -[AXIndexMap setObject:forIndex:](v369, "setObject:forIndex:", v370, [kVOTEventCommandEdgeBottom hash]);

  v371 = self->_commands;
  v372 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBottomEdgePanDown:"];
  -[AXIndexMap setObject:forIndex:](v371, "setObject:forIndex:", v372, [kVOTEventCommandBottomEdgePanDown hash]);

  v373 = self->_commands;
  v374 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBottomEdgePanShort:"];
  -[AXIndexMap setObject:forIndex:](v373, "setObject:forIndex:", v374, [kVOTEventCommandBottomEdgePanShort hash]);

  v375 = self->_commands;
  v376 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBottomEdgePanLong:"];
  -[AXIndexMap setObject:forIndex:](v375, "setObject:forIndex:", v376, [kVOTEventCommandBottomEdgePanLong hash]);

  v377 = self->_commands;
  v378 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleTopEdgePanShort:"];
  -[AXIndexMap setObject:forIndex:](v377, "setObject:forIndex:", v378, [kVOTEventCommandTopEdgePanShort hash]);

  v379 = self->_commands;
  v380 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleTopEdgePanLong:"];
  -[AXIndexMap setObject:forIndex:](v379, "setObject:forIndex:", v380, [kVOTEventCommandTopEdgePanLong hash]);

  v381 = self->_commands;
  v382 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSwitchToLeftElementCommunity:"];
  -[AXIndexMap setObject:forIndex:](v381, "setObject:forIndex:", v382, [kVOTEventCommandLeftElementCommunity hash]);

  v383 = self->_commands;
  v384 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSwitchToRightElementCommunity:"];
  -[AXIndexMap setObject:forIndex:](v383, "setObject:forIndex:", v384, [kVOTEventCommandRightElementCommunity hash]);

  v385 = self->_commands;
  v386 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSwitchToNextElementCommunity:"];
  -[AXIndexMap setObject:forIndex:](v385, "setObject:forIndex:", v386, [kVOTEventCommandNextElementCommunity hash]);

  v387 = self->_commands;
  v388 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSwitchToPreviousElementCommunity:"];
  -[AXIndexMap setObject:forIndex:](v387, "setObject:forIndex:", v388, [kVOTEventCommandPreviousElementCommunity hash]);

  v389 = self->_commands;
  v390 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleSideApp:"];
  -[AXIndexMap setObject:forIndex:](v389, "setObject:forIndex:", v390, [kVOTEventCommandShowSideApp hash]);

  v391 = self->_commands;
  v392 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleOpenVoiceOverOptions:"];
  -[AXIndexMap setObject:forIndex:](v391, "setObject:forIndex:", v392, [kVOTEventCommandOpenVoiceOverSettings hash]);

  v393 = self->_commands;
  v394 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleNextKeyboardLanguage:"];
  -[AXIndexMap setObject:forIndex:](v393, "setObject:forIndex:", v394, [kVOTEventCommandNextKeyboardLanguage hash]);

  if (AXIsInternalInstall())
  {
    v395 = self->_commands;
    v396 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSendCancelEvent:"];
    -[AXIndexMap setObject:forIndex:](v395, "setObject:forIndex:", v396, [@"VOTEventCommandSendCancel" hash]);
  }
  v397 = self->_commands;
  v398 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSiriShortcutEvent:"];
  -[AXIndexMap setObject:forIndex:](v397, "setObject:forIndex:", v398, [kVOTEventCommandRunSiriShortcut hash]);

  v399 = self->_commands;
  v400 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleUserSelection:"];
  -[AXIndexMap setObject:forIndex:](v399, "setObject:forIndex:", v400, [kVOTEventCommandSelectRight hash]);

  v401 = self->_commands;
  v402 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleUserSelection:"];
  -[AXIndexMap setObject:forIndex:](v401, "setObject:forIndex:", v402, [kVOTEventCommandSelectLeft hash]);

  v403 = self->_commands;
  v404 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleAdjustTextSelectionSegmentType:"];
  -[AXIndexMap setObject:forIndex:](v403, "setObject:forIndex:", v404, [kVOTEventCommandNextTextSegmentType hash]);

  v405 = self->_commands;
  v406 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleAdjustTextSelectionSegmentType:"];
  -[AXIndexMap setObject:forIndex:](v405, "setObject:forIndex:", v406, [kVOTEventCommandPreviousTextSegmentType hash]);

  v407 = self->_commands;
  v408 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleStartStopTextSelection:"];
  -[AXIndexMap setObject:forIndex:](v407, "setObject:forIndex:", v408, [kVOTEventCommandStartStopTextSelection hash]);

  v409 = self->_commands;
  v410 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleMute:"];
  -[AXIndexMap setObject:forIndex:](v409, "setObject:forIndex:", v410, [kVOTEventCommandToggleMute hash]);

  v411 = self->_commands;
  v412 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleScreenCurtain:"];
  -[AXIndexMap setObject:forIndex:](v411, "setObject:forIndex:", v412, [kVOTEventCommandToggleScreenCurtain hash]);

  v413 = self->_commands;
  v414 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleSoundCurtain:"];
  -[AXIndexMap setObject:forIndex:](v413, "setObject:forIndex:", v414, [kVOTEventCommandToggleSoundCurtain hash]);

  v415 = self->_commands;
  v416 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleCaptionPanel:"];
  -[AXIndexMap setObject:forIndex:](v415, "setObject:forIndex:", v416, [kVOTEventCommandToggleCaptionPanel hash]);

  v417 = self->_commands;
  v418 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDescribeImage:"];
  -[AXIndexMap setObject:forIndex:](v417, "setObject:forIndex:", v418, [kVOTEventCommandDescribeImage hash]);

  v419 = self->_commands;
  v420 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleLaunchDetectionMode:"];
  -[AXIndexMap setObject:forIndex:](v419, "setObject:forIndex:", v420, [kVOTEventCommandLaunchDetectionMode hash]);

  v421 = self->_commands;
  v422 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleRotationCapability:"];
  -[AXIndexMap setObject:forIndex:](v421, "setObject:forIndex:", v422, [kVOTEventCommandToggleRotationCapability hash]);

  v423 = self->_commands;
  v424 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleToggleQuickNav:"];
  -[AXIndexMap setObject:forIndex:](v423, "setObject:forIndex:", v424, [kVOTEventCommandToggleQuickNav hash]);

  v425 = self->_commands;
  v426 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleAnnounceQuickNav:"];
  -[AXIndexMap setObject:forIndex:](v425, "setObject:forIndex:", v426, [kVOTEventCommandAnnounceQuickNav hash]);

  v427 = self->_commands;
  v428 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleEscape:"];
  -[AXIndexMap setObject:forIndex:](v427, "setObject:forIndex:", v428, [kVOTEventCommandEscape hash]);

  v429 = self->_commands;
  v430 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleShowDetectionUIWithMagnifierService:"];
  -[AXIndexMap setObject:forIndex:](v429, "setObject:forIndex:", v430, [kVOTEventCommandShowDetectionUIWithMagnifierService hash]);

  v431 = self->_commands;
  v432 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleHideDetectionUIWithMagnifierService:"];
  -[AXIndexMap setObject:forIndex:](v431, "setObject:forIndex:", v432, [kVOTEventCommandHideDetectionUIWithMagnifierService hash]);

  v433 = self->_commands;
  v434 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDescribeCameraScene:"];
  -[AXIndexMap setObject:forIndex:](v433, "setObject:forIndex:", v434, [kVOTEventCommandDescribeCameraScene hash]);

  v435 = self->_commands;
  v436 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleTogglePerkinsKeyboardInput:"];
  -[AXIndexMap setObject:forIndex:](v435, "setObject:forIndex:", v436, [kVOTEventCommandTogglePerkinsKeyboardInput hash]);

  v437 = self->_commands;
  v438 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleActivateBrailleScreenInput:"];
  -[AXIndexMap setObject:forIndex:](v437, "setObject:forIndex:", v438, [kVOTEventCommandActivateBrailleScreenInput hash]);

  v439 = self->_commands;
  v440 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleActivateBrailleScreenInputCommand:"];
  -[AXIndexMap setObject:forIndex:](v439, "setObject:forIndex:", v440, [kVOTEventCommandActivateBrailleScreenInputCommand hash]);

  v441 = self->_commands;
  v442 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDeactivateBrailleScreenInput:"];
  -[AXIndexMap setObject:forIndex:](v441, "setObject:forIndex:", v442, [kVOTEventCommandBSIExit hash]);

  v443 = self->_commands;
  v444 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBSIPreviousRotor:"];
  -[AXIndexMap setObject:forIndex:](v443, "setObject:forIndex:", v444, [kVOTEventCommandBSIPreviousRotor hash]);

  v445 = self->_commands;
  v446 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBSINextRotor:"];
  -[AXIndexMap setObject:forIndex:](v445, "setObject:forIndex:", v446, [kVOTEventCommandBSINextRotor hash]);

  v447 = self->_commands;
  v448 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleDeactivateBrailleScreenInput:"];
  -[AXIndexMap setObject:forIndex:](v447, "setObject:forIndex:", v448, [kVOTEventCommandBSIEscape hash]);

  v449 = self->_commands;
  v450 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleReconnectBrailleDisplays:"];
  -[AXIndexMap setObject:forIndex:](v449, "setObject:forIndex:", v450, [kVOTEventCommandReconnectBrailleDisplays hash]);

  v451 = self->_commands;
  v452 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEvent:"];
  -[AXIndexMap setObject:forIndex:](v451, "setObject:forIndex:", v452, [kVOTEventCommandBraillePanLeft hash]);

  v453 = self->_commands;
  v454 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEvent:"];
  -[AXIndexMap setObject:forIndex:](v453, "setObject:forIndex:", v454, [kVOTEventCommandBraillePanRight hash]);

  v455 = self->_commands;
  v456 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEvent:"];
  -[AXIndexMap setObject:forIndex:](v455, "setObject:forIndex:", v456, [kVOTEventCommandBraillePanBeginning hash]);

  v457 = self->_commands;
  v458 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEvent:"];
  -[AXIndexMap setObject:forIndex:](v457, "setObject:forIndex:", v458, [kVOTEventCommandBraillePanEnd hash]);

  v459 = self->_commands;
  v460 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBraille2DInvert:"];
  -[AXIndexMap setObject:forIndex:](v459, "setObject:forIndex:", v460, [kVOTEventCommandBraille2DInvert hash]);

  v461 = self->_commands;
  v462 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEvent:"];
  -[AXIndexMap setObject:forIndex:](v461, "setObject:forIndex:", v462, [kVOTEventCommandBrailleNextInputTable hash]);

  v463 = self->_commands;
  v464 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEvent:"];
  -[AXIndexMap setObject:forIndex:](v463, "setObject:forIndex:", v464, [kVOTEventCommandBrailleNextOutputTable hash]);

  v465 = self->_commands;
  v466 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEvent:"];
  -[AXIndexMap setObject:forIndex:](v465, "setObject:forIndex:", v466, [kVOTEventCommandBrailleAnnouncementModeOn hash]);

  v467 = self->_commands;
  v468 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEvent:"];
  -[AXIndexMap setObject:forIndex:](v467, "setObject:forIndex:", v468, [kVOTEventCommandBrailleRouter hash]);

  v469 = self->_commands;
  v470 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEvent:"];
  -[AXIndexMap setObject:forIndex:](v469, "setObject:forIndex:", v470, [kVOTEventCommandBrailleStatusRouter hash]);

  v471 = self->_commands;
  v472 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEvent:"];
  -[AXIndexMap setObject:forIndex:](v471, "setObject:forIndex:", v472, [kVOTEventCommandBrailleTranslate hash]);

  v473 = self->_commands;
  v474 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleRefreshEvent:"];
  -[AXIndexMap setObject:forIndex:](v473, "setObject:forIndex:", v474, [kVOTEventCommandBrailleRefreshBrailleLine hash]);

  v475 = self->_commands;
  v476 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleWordWrapToggleEvent:"];
  -[AXIndexMap setObject:forIndex:](v475, "setObject:forIndex:", v476, [kVOTEventCommandBrailleToggleWordWrap hash]);

  v477 = self->_commands;
  v478 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleEnableAutoAdvance:"];
  -[AXIndexMap setObject:forIndex:](v477, "setObject:forIndex:", v478, [kVOTEventCommandBrailleEnableAutoAdvance hash]);

  v479 = self->_commands;
  v480 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleIncreaseAutoAdvanceSpeed:"];
  -[AXIndexMap setObject:forIndex:](v479, "setObject:forIndex:", v480, [kVOTEventCommandBrailleIncreaseAutoAdvanceSpeed hash]);

  v481 = self->_commands;
  v482 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleBrailleDecreaseAutoAdvanceSpeed:"];
  -[AXIndexMap setObject:forIndex:](v481, "setObject:forIndex:", v482, [kVOTEventCommandBrailleDecreaseAutoAdvanceSpeed hash]);

  v483 = self->_commands;
  v484 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v483, "setObject:forIndex:", v484, [kVOTEventCommandLeftArrow hash]);

  v485 = self->_commands;
  v486 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v485, "setObject:forIndex:", v486, [kVOTEventCommandRightArrow hash]);

  v487 = self->_commands;
  v488 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v487, "setObject:forIndex:", v488, [kVOTEventCommandUpArrow hash]);

  v489 = self->_commands;
  v490 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v489, "setObject:forIndex:", v490, [kVOTEventCommandDownArrow hash]);

  v491 = self->_commands;
  v492 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v491, "setObject:forIndex:", v492, [kVOTEventCommandDelete hash]);

  v493 = self->_commands;
  v494 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v493, "setObject:forIndex:", v494, [kVOTEventCommandReturn hash]);

  v495 = self->_commands;
  v496 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v495, "setObject:forIndex:", v496, [kVOTEventCommandTab hash]);

  v497 = self->_commands;
  v498 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v497, "setObject:forIndex:", v498, [kVOTEventCommandShiftTab hash]);

  v499 = self->_commands;
  v500 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v499, "setObject:forIndex:", v500, [kVOTEventCommandCut hash]);

  v501 = self->_commands;
  v502 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v501, "setObject:forIndex:", v502, [kVOTEventCommandCopy hash]);

  v503 = self->_commands;
  v504 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v503, "setObject:forIndex:", v504, [kVOTEventCommandPaste hash]);

  v505 = self->_commands;
  v506 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v505, "setObject:forIndex:", v506, [kVOTEventCommandSelectAll hash]);

  v507 = self->_commands;
  v508 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v507, "setObject:forIndex:", v508, [kVOTEventCommandUndo hash]);

  v509 = self->_commands;
  v510 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleKeyboardCommandEvent:"];
  -[AXIndexMap setObject:forIndex:](v509, "setObject:forIndex:", v510, [kVOTEventCommandRedo hash]);

  v511 = self->_commands;
  v512 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handlePerformVolumeUpButtonPress:"];
  -[AXIndexMap setObject:forIndex:](v511, "setObject:forIndex:", v512, [kVOTEventCommandVolumeUpButtonPress hash]);

  v513 = self->_commands;
  v514 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handlePerformVolumeDownButtonPress:"];
  -[AXIndexMap setObject:forIndex:](v513, "setObject:forIndex:", v514, [kVOTEventCommandVolumeDownButtonPress hash]);

  v515 = self->_commands;
  v516 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handlePerformEjectButtonPress:"];
  -[AXIndexMap setObject:forIndex:](v515, "setObject:forIndex:", v516, [kVOTEventCommandEjectButtonPress hash]);

  v517 = self->_commands;
  v518 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleStartHelpMode:"];
  -[AXIndexMap setObject:forIndex:](v517, "setObject:forIndex:", v518, [kVOTEventCommandStartHelp hash]);

  v519 = self->_commands;
  v520 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSpeechRotorChange:"];
  -[AXIndexMap setObject:forIndex:](v519, "setObject:forIndex:", v520, [kVOTEventCommandSpeechRotorNext hash]);

  v521 = self->_commands;
  v522 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSpeechRotorChange:"];
  -[AXIndexMap setObject:forIndex:](v521, "setObject:forIndex:", v522, [kVOTEventCommandSpeechRotorPrevious hash]);

  v523 = self->_commands;
  v524 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSpeechRotorValueChange:"];
  -[AXIndexMap setObject:forIndex:](v523, "setObject:forIndex:", v524, [kVOTEventCommandSpeechRotorIncrementValue hash]);

  v525 = self->_commands;
  id v526 = +[SCRCTargetSelector targetSelectorWithTarget:self selector:"_handleSpeechRotorValueChange:"];
  -[AXIndexMap setObject:forIndex:](v525, "setObject:forIndex:", v526, [kVOTEventCommandSpeechRotorDecrementValue hash]);
}

- (void)updateNavigationModeForClassicRemote
{
}

- (BOOL)eventIsSystemEvent:(id)a3
{
  uint64_t v3 = qword_1001EB920;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&qword_1001EB920, &stru_1001B4980);
  }
  uint64_t v5 = (void *)qword_1001EB918;
  id v6 = [v4 command];

  unsigned __int8 v7 = [v5 containsObject:v6];
  return v7;
}

- (BOOL)isTutorialActive
{
  uint64_t v3 = [(VOTElementManager *)self tutorialPage];
  uint64_t v4 = [(VOTElementManager *)self tutorialRestrictedCommands];
  uint64_t v5 = [(VOTElementManager *)self _currentElement];
  id v6 = [v5 application];
  unsigned __int8 v7 = [v6 bundleIdentifier];

  BOOL v8 = [v7 isEqualToString:@"com.apple.AXUIViewService"]
    && (v3 | v4
     || [(VOTElementManager *)self tutorialListeningForGestureNotifications]);

  return v8;
}

- (BOOL)commandPermittedForTutorialPage:(id)a3
{
  return 1;
}

- (BOOL)shouldTutorialIgnoreCommand:(id)a3
{
  id v4 = a3;
  int64_t v5 = [(VOTElementManager *)self tutorialActiveRestrictionType];
  if (!v5) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      id v6 = [(VOTElementManager *)self tutorialRestrictedCommands];
      unsigned __int8 v7 = [v6 containsObject:v4];

      if (v7) {
        goto LABEL_5;
      }
    }
LABEL_7:
    BOOL v8 = 0;
    goto LABEL_8;
  }
  uint64_t v9 = [(VOTElementManager *)self tutorialRestrictedCommands];
  unsigned int v10 = [v9 containsObject:v4];

  if (v10) {
    goto LABEL_7;
  }
LABEL_5:
  BOOL v8 = 1;
LABEL_8:

  return v8;
}

- (void)tutorialSetRecognizedGesture:(id)a3
{
  id v4 = a3;
  id v7 = v4;
  if (qword_1001EB930 == -1)
  {
    id v5 = v4;
  }
  else
  {
    dispatch_once(&qword_1001EB930, &stru_1001B49A0);
    id v5 = v7;
  }
  if ([(id)qword_1001EB928 containsObject:v5])
  {
    [(VOTElementManager *)self setTutorialRecognizedGesture:v7];
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, kAXSVoiceOverTouchTutorialRecognizedGestureNotification, 0, 0, 1u);
  }
}

- (BOOL)detectionModeRotorActive
{
  return [(id)VOTSharedWorkspace rotorType] == (id)94;
}

- (void)toggleDetectionMode
{
  id v2 = [(id)VOTSharedWorkspace currentRotorDetectionMode];
  id v13 = +[NSNumber numberWithUnsignedInt:v2];
  uint64_t v3 = +[AXSettings sharedInstance];
  id v4 = [v3 enabledLiveRecognitionModes];
  id v5 = [v4 mutableCopy];

  if ([v5 containsObject:v13])
  {
    [v5 removeObject:v13];
    id v6 = off_1001EA9E8;
    id v7 = [(id)VOTSharedWorkspace selectedLanguage];
    BOOL v8 = @"element.off.text";
  }
  else
  {
    [v5 addObject:v13];
    id v6 = off_1001EA9E8;
    id v7 = [(id)VOTSharedWorkspace selectedLanguage];
    BOOL v8 = @"element.on.text";
  }
  uint64_t v9 = sub_100051D04(v6, v8, 0, v7);
  id v10 = sub_10000ABF8(v9, 0, 0);

  switch((int)v2)
  {
    case 0:
      long long v11 = +[VOTMagnifierService shared];
      [v11 togglePeopleDetection];
      goto LABEL_11;
    case 1:
      long long v11 = +[VOTMagnifierService shared];
      [v11 toggleDoorDetection];
      goto LABEL_11;
    case 2:
      long long v11 = +[VOTMagnifierService shared];
      [v11 toggleImageDescriptions];
      goto LABEL_11;
    case 3:
      long long v11 = +[VOTMagnifierService shared];
      [v11 togglePointAndSpeak];
      goto LABEL_11;
    case 4:
      long long v11 = +[VOTMagnifierService shared];
      [v11 toggleTextDetection];
      goto LABEL_11;
    case 5:
      long long v11 = +[VOTMagnifierService shared];
      [v11 toggleFurnitureDetection];
LABEL_11:

      break;
    default:
      break;
  }
  if (![v5 count])
  {
    long long v12 = +[VOTMagnifierService shared];
    [v12 dismissDetectionUI];
  }
}

- (void)handleEvent:(id)a3
{
  id v37 = a3;
  id v5 = [v37 command];
  if ([(VOTElementManager *)self isTutorialActive])
  {
    [(VOTElementManager *)self tutorialSetRecognizedGesture:v5];
    if ([(VOTElementManager *)self shouldTutorialIgnoreCommand:v5]) {
      goto LABEL_51;
    }
  }
  if ([(VOTElementManager *)self detectionModeRotorActive])
  {
    if (([v5 isEqualToString:kVOTEventCommandSearchRotorRight] & 1) == 0
      && ([v5 isEqualToString:kVOTEventCommandSearchRotorLeft] & 1) == 0
      && ([v5 isEqualToString:kVOTEventCommandSearchRotorUp] & 1) == 0
      && ([v5 isEqualToString:kVOTEventCommandSearchRotorDown] & 1) == 0
      && ([v5 isEqualToString:kVOTEventCommandIdle] & 1) == 0
      && ([v5 isEqualToString:kVOTEventCommandSimpleTap] & 1) == 0)
    {
      -[SCRCThread performSelector:onTarget:count:objects:](self->_elementManagerThread, "performSelector:onTarget:count:objects:", "_moveDetectionModeRotor:", self, 1, v37, 0);
    }
    if ([v5 isEqualToString:kVOTEventCommandSimpleTap])
    {
      [(VOTElementManager *)self toggleDetectionMode];
      goto LABEL_51;
    }
  }
  if (![v37 origin])
  {
    CFStringRef v35 = @"The Event did not have a type set to it: %@";
    id v36 = v37;
    LOBYTE(v34) = 1;
    _AXLogWithFacility();
  }
  id v6 = +[VOTCommandHelper commandHelper];
  id v7 = [v37 command];
  unsigned int v8 = [v7 isEqualToString:kVOTEventCommandEscape];

  if (v8) {
    [v37 setBypassHelp:1];
  }
  uint64_t v9 = +[VOTCommandHelper commandHelper];
  [v9 practiceRegion];
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  double v15 = v14;
  double v17 = v16;

  if ([v6 helpEnabled])
  {
    v18 = [v37 command];
    if ([v18 isEqualToString:kVOTEventCommandTracking])
    {
      [v37 touchPoint];
      v39.double x = v19;
      v39.double y = v20;
      v40.origin.double x = v11;
      v40.origin.double y = v13;
      v40.size.width = v15;
      v40.size.height = v17;
      BOOL v21 = !CGRectContainsPoint(v40, v39);
    }
    else
    {
      BOOL v21 = 0;
    }
  }
  else
  {
    BOOL v21 = 0;
  }
  if (![v6 helpEnabled]
    || ([v37 bypassHelp] & 1) != 0
    || (CGSizeZero.height == v17 ? (BOOL v22 = CGSizeZero.width == v15) : (BOOL v22 = 0), !v22 ? (v23 = v21) : (v23 = 0), v23))
  {
    uint64_t v24 = [v37 command];
    v25 = (void *)kVOTEventCommandTracking;

    if (v24 == v25)
    {
      [(NSLock *)self->_trackingLock lock];
      objc_storeStrong((id *)&self->_mostRecentTrackingEvent, a3);
      [(NSLock *)self->_trackingLock unlock];
LABEL_44:
      elementManagerThread = self->_elementManagerThread;
LABEL_45:
      -[SCRCThread performSelector:onTarget:count:objects:](elementManagerThread, "performSelector:onTarget:count:objects:", "_handleEvent:", self, 1, v37, 0);
      goto LABEL_46;
    }
    if ([(VOTElementManager *)self directTouchModeHandledEvent:v37]) {
      goto LABEL_46;
    }
    v26 = [v37 command];
    if (v26 != (void *)kVOTEventCommandNextElement)
    {
      v27 = [v37 command];
      v28 = v27;
      if (v27 != (void *)kVOTEventCommandPreviousElement)
      {
        v29 = [v37 command];
        objc_super v30 = (void *)kVOTEventCommandAnnouncement;

        if (v29 != v30)
        {
          if ([(VOTElementManager *)self eventIsSystemEvent:v37]) {
            elementManagerThread = self->_systemEventThread;
          }
          else {
            elementManagerThread = self->_elementManagerThread;
          }
          goto LABEL_45;
        }
        goto LABEL_43;
      }
    }
LABEL_43:
    v32 = +[VOTOutputManager outputManager];
    [v32 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

    goto LABEL_44;
  }
  objc_msgSend(v6, "processHelpForEvent:", v37, CGSizeZero.width);
LABEL_46:
  v33 = [v37 command];
  [(VOTElementManager *)self setLastEventCommand:v33];

  if (CFAbsoluteTimeGetCurrent() - self->_lastEventOccurredTime > 4.0)
  {
    if (qword_1001EB940 != -1) {
      dispatch_once(&qword_1001EB940, &stru_1001B49C0);
    }
    dispatch_async((dispatch_queue_t)qword_1001EB938, &stru_1001B49E0);
    self->_lastEventOccurredTime = CFAbsoluteTimeGetCurrent();
  }

LABEL_51:
}

- (id)_similarMonitoredElement:(id)a3
{
  id v3 = a3;
  [v3 centerPoint];
  double v6 = v5;
  double v7 = v4;
  double y = CGPointZero.y;
  if (CGPointZero.x == v5 && y == v4)
  {
    [v3 frame];
    AX_CGRectGetCenter();
    double v6 = v10;
    double v7 = v11;
  }
  if (CGPointZero.x == v6 && y == v7)
  {
    v25 = 0;
  }
  else
  {
    CGFloat v13 = +[VOTElement systemWideElement];
    objc_msgSend(v13, "convertPoint:fromContextId:", objc_msgSend(v3, "windowContextId"), v6, v7);
    double v15 = v14;
    double v17 = v16;

    v18 = -[VOTElement initWithPosition:]([VOTElement alloc], "initWithPosition:", v15, v17);
    [(VOTElement *)v18 frame];
    double v20 = v19;
    [v3 frame];
    if (vabdd_f64(v20, v21) >= 10.0
      || (-[VOTElement frame](v18, "frame"), double v23 = v22, [v3 frame], vabdd_f64(v23, v24) >= 10.0))
    {
      v25 = 0;
    }
    else
    {
      v25 = v18;
    }
  }

  return v25;
}

- (id)_monitoredElementCachedText:(id)a3
{
  id v3 = a3;
  double v4 = [v3 label];
  double v5 = [v3 value];

  double v6 = __AXStringForVariables();

  return v6;
}

- (void)_monitorElements
{
  id v2 = self;
  id v3 = [(NSArray *)self->_currentApplications mutableCopy];
  uint64_t v4 = +[VOTElement systemAppApplication];
  if (v4) {
    [v3 addObject:v4];
  }
  id v36 = (void *)v4;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id obj = v3;
  id v39 = [obj countByEnumeratingWithState:&v47 objects:v56 count:16];
  if (v39)
  {
    uint64_t v38 = *(void *)v48;
    long long v41 = v2;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v48 != v38) {
          objc_enumerationMutation(obj);
        }
        uint64_t v40 = v5;
        double v6 = *(void **)(*((void *)&v47 + 1) + 8 * v5);
        elementMonitorCache = v2->_elementMonitorCache;
        unsigned int v8 = [v6 bundleIdentifier];
        uint64_t v9 = [(NSMutableDictionary *)elementMonitorCache objectForKeyedSubscript:v8];

        double v10 = VOTLogCommon();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v52 = v9;
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Checking in on: %@", buf, 0xCu);
        }

        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        double v11 = [v9 allKeys];
        id v12 = [v11 copy];

        id v13 = [v12 countByEnumeratingWithState:&v43 objects:v55 count:16];
        if (v13)
        {
          id v14 = v13;
          uint64_t v15 = *(void *)v44;
          do
          {
            for (i = 0; i != v14; i = (char *)i + 1)
            {
              if (*(void *)v44 != v15) {
                objc_enumerationMutation(v12);
              }
              double v17 = *(void **)(*((void *)&v43 + 1) + 8 * i);
              if ([v17 isAlive])
              {
                [v17 updateCache];
                v18 = [(VOTElementManager *)v2 _monitoredElementCachedText:v17];
                double v19 = [v9 objectForKeyedSubscript:v17];
                if ([v19 isEqualToString:v18])
                {

                  id v20 = 0;
                }
                else
                {
                  id v20 = [v18 length];

                  if (v20)
                  {
                    id v20 = v17;
                    [v9 setObject:v18 forKeyedSubscript:v20];
                  }
                }
                double v21 = VOTLogCommon();
                if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138412546;
                  v52 = v17;
                  __int16 v53 = 2112;
                  v54 = v18;
                  _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Checked element with newText: %@, %@", buf, 0x16u);
                }
              }
              else
              {
                v18 = [(VOTElementManager *)v2 _similarMonitoredElement:v17];
                double v21 = [(VOTElementManager *)v2 _monitoredElementCachedText:v18];
                double v22 = VOTLogCommon();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138412546;
                  v52 = v17;
                  __int16 v53 = 2112;
                  v54 = v18;
                  _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Element not alive: %@, using: %@", buf, 0x16u);
                }

                double v23 = [v9 objectForKeyedSubscript:v17];
                if ([v23 isEqualToString:v21])
                {

                  id v20 = 0;
                }
                else
                {
                  id v24 = v14;
                  uint64_t v25 = v15;
                  id v26 = v12;
                  id v27 = [v21 length];

                  if (v27)
                  {
                    id v20 = v18;
                    [v9 setObject:v21 forKeyedSubscript:v20];
                  }
                  else
                  {
                    id v20 = 0;
                  }
                  id v12 = v26;
                  uint64_t v15 = v25;
                  id v14 = v24;
                  id v2 = v41;
                }
                [v9 removeObjectForKey:v17];
              }

              if (v20) {
                [(VOTElementManager *)v2 _elementMonitoringOutputElement:v20 userMonitored:1];
              }
            }
            id v14 = [v12 countByEnumeratingWithState:&v43 objects:v55 count:16];
          }
          while (v14);
        }

        uint64_t v5 = v40 + 1;
      }
      while ((id)(v40 + 1) != v39);
      id v39 = [obj countByEnumeratingWithState:&v47 objects:v56 count:16];
    }
    while (v39);
  }

  v28 = VOTLogCommon();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
    sub_10011E078((uint64_t)v2, v28, v29, v30, v31, v32, v33, v34);
  }

  if (v2->_flags.isMonitoringElements)
  {
    elementMonitorTimer = v2->_elementMonitorTimer;
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100060A18;
    v42[3] = &unk_1001B33B8;
    v42[4] = v2;
    [(SCRCTargetSelectorTimer *)elementMonitorTimer dispatchAfterDelay:v42 withBlock:0.75];
  }
}

- (void)_updateAutomationAccessibilityApps
{
  unsigned int v2 = [(id)VOTSharedWorkspace automaticAccessibilityEnabled];
  id v3 = AXLogAppAccessibility();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v21) = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Automatic app mode stats %d", buf, 8u);
  }

  uint64_t v4 = +[AXSettings sharedInstance];
  uint64_t v5 = [v4 automaticAccessibilityModes];

  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        if (v2)
        {
          id v12 = [v6 objectForKeyedSubscript:*(void *)(*((void *)&v16 + 1) + 8 * i)];
          if ([v12 intValue] == 1) {
            int v13 = j__VOSProcessAllowsScreenRecognition();
          }
          else {
            int v13 = 0;
          }
        }
        else
        {
          int v13 = 0;
        }
        AXSetProcessWantsMLElementForBundle();
        id v14 = AXLogAppAccessibility();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          uint64_t v21 = v11;
          __int16 v22 = 1024;
          int v23 = v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Loading automatic mode for %@:%d", buf, 0x12u);
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }
    while (v8);
  }

  [(VOTElementManager *)self _updateMLElementAutorefresh];
}

- (void)_updateContinuousPathTimeout
{
  id v3 = +[AXSettings sharedInstance];
  [v3 voiceOverContinuousPathKeyboardStartTimeout];
  [(VOTElementManager *)self setContinuousPathTimeout:"setContinuousPathTimeout:"];

  uint64_t v4 = VOTLogCommon();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    [(VOTElementManager *)self continuousPathTimeout];
    int v6 = 134217984;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Updated continuous path timeout: %f", (uint8_t *)&v6, 0xCu);
  }
}

- (BOOL)directTouchModeHandledEvent:(id)a3
{
  return 0;
}

- (void)_handleEvent:(id)a3
{
  id v4 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (AXDeviceIsTV())
  {
    uint64_t v5 = +[AXSettings sharedInstance];
    unsigned int v6 = [v5 voiceOverUseTVToggleStyleNavigation];

    if (v6)
    {
      if (([v4 isKeyEvent] & 1) != 0 || objc_msgSend(v4, "isBrailleEvent")) {
        [(id)VOTSharedWorkspace setTvInteractionModeWithoutSaving:2];
      }
      uint64_t v7 = [(VOTElementManager *)self _currentElement];

      if (!v7)
      {
        id v8 = [(VOTElementManager *)self nativeFocusElement];
        [(VOTElementManager *)self _setCurrentElement:v8];
      }
    }
  }
  uint64_t v9 = [v4 command];
  id v10 = [v9 hash];

  if (![(VOTElementManager *)self directTouchModeHandledEvent:v4])
  {
    uint64_t v11 = [(id)qword_1001EB910 objectForIndex:v10];
    unsigned __int8 v12 = [v11 BOOLValue];

    if ((v12 & 1) == 0) {
      [(VOTElementManager *)self _stopReadAll];
    }
    int v13 = [(AXIndexMap *)self->_commands objectForIndex:v10];
    if ((v10 == [kVOTEventCommandSearchRotorUp hash]
       || v10 == [kVOTEventCommandSearchRotorDown hash])
      && self->_lastHandledEventWasRotorMovement)
    {
      self->_flags.shouldUpdateRotorForElement = 0;
    }
    if (v13)
    {
      id v14 = [v13 target];
      objc_msgSend(v14, "performSelector:withObject:", objc_msgSend(v13, "selector"), v4);
    }
    else if ([v4 isKeyEvent] && self->_flags.inSearchTextMode)
    {
      [(VOTElementManager *)self _handleSearchTextEvent:v4];
    }

    if (qword_1001EB950 != -1) {
      dispatch_once(&qword_1001EB950, &stru_1001B4A00);
    }
    uint64_t v15 = (void *)qword_1001EB948;
    long long v16 = [v4 command];
    unsigned int v17 = [v15 containsObject:v16];

    if ((([v4 isTouchEvent] & 1) != 0 || v17)
      && ([(SCRCTargetSelectorTimer *)self->_updateAppFromTimer isCancelled] & 1) == 0)
    {
      [(VOTElementManager *)self _currentElement];
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_1000612CC;
      v31[3] = &unk_1001B4A28;
      id v18 = (id)objc_claimAutoreleasedReturnValue();
      id v32 = v18;
      if ([(VOTElementManager *)self _hasCurrentApplicationMatchingBlock:v31])
      {
        if (v17) {
          [(VOTElementManager *)self setLastUserElementTouchTime:CFAbsoluteTimeGetCurrent()];
        }
        [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer cancel];
      }
    }
    long long v19 = [(VOTElementManager *)self _currentElement];
    if ([v19 isBannerNotification]
      && CFAbsoluteTimeGetCurrent() - self->_lastSentBannerTimerReset > 0.5)
    {
      id v20 = [v4 command];
      if ([v20 isEqualToString:kVOTEventCommandIdle])
      {
      }
      else
      {
        uint64_t v21 = [v4 command];
        unsigned __int8 v22 = [v21 isEqualToString:kVOTEventCommandTracking];

        if ((v22 & 1) == 0)
        {
          int v23 = VOTLogElement();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
            sub_10011E0E8(v4, v23);
          }

          self->_lastSentBannerTimerReset = CFAbsoluteTimeGetCurrent();
          [v19 resetBannerTimer];
        }
      }
    }
    if (self->_currentPublicCustomRotorItemResult
      && v10 != [kVOTEventCommandSearchRotorUp hash]
      && v10 != [kVOTEventCommandSearchRotorDown hash]
      && !self->_inTextProcessingRotorMode)
    {
      self->_flags.shouldUpdateRotorForElement = 1;
    }
    id v24 = [v4 command];
    uint64_t v25 = (void *)kVOTEventCommandAnnouncement;

    if (v24 == v25)
    {
      id v26 = [v4 objectForIndex:116];
      [(VOTElementManager *)self _handleAnnouncement:v26];
    }
    id v27 = [(VOTElementManager *)self elementManagerHandledEventCallback];

    if (v27)
    {
      v28 = [(VOTElementManager *)self elementManagerHandledEventCallback];
      ((void (**)(void, VOTElementManager *, id))v28)[2](v28, self, v4);
    }
    uint64_t v29 = [v4 command];
    if (v29 == (void *)kVOTEventCommandSearchRotorDown)
    {
      self->_lastHandledEventWasRotorMovement = 1;
    }
    else
    {
      uint64_t v30 = [v4 command];
      self->_lastHandledEventWasRotorMovement = v30 == (void *)kVOTEventCommandSearchRotorUp;
    }
  }
}

- (void)_pausedSpeechInterrupted:(id)a3
{
  id v4 = VOTLogSpeech();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Paused speech interrupted, cancelling reading all", v5, 2u);
  }

  *(_WORD *)&self->_flags.isReadingAll = 0;
}

- (void)_updateJindoNotificationHandler
{
}

- (void)_updateJindoApplicationCache
{
  id v5 = +[AXSpringBoardServer server];
  id v3 = [v5 jindoAppBundleIndentifiers];
  jindoAppBundleIdentifiers = self->_jindoAppBundleIdentifiers;
  self->_jindoAppBundleIdentifiers = v3;
}

- (void)_moveDetectionModeRotor:(id)a3
{
  elementRotor = self->_elementRotor;
  id v4 = [a3 origin];

  [(VOTRotor *)elementRotor incrementDetectionRotor:v4];
}

- (void)_handleElementInteraction:(id)a3
{
  id v8 = a3;
  id v4 = [v8 command];
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandMoveIn];

  if (![(id)VOTSharedWorkspace navigationStyleHonorsGroups]) {
    goto LABEL_6;
  }
  if (!v5)
  {
    if ([(VOTElementManager *)self _handleMoveOut:v8]) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (![(VOTElementManager *)self _handleMoveIn:v8])
  {
LABEL_6:
    unsigned int v6 = +[VOTOutputManager outputManager];
    uint64_t v7 = +[VOSOutputEvent UnknownCommand];
    [v6 sendEvent:v7];
  }
LABEL_7:
}

- (BOOL)_handleMoveIn:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(VOTElement *)self->_currentElement isAccessibleGroup];
  if (v5)
  {
    unsigned int v6 = [(VOTElement *)self->_currentElement firstContainedElement];
    [(VOTElementManager *)self _echoDifferentElement:v6 forEvent:v4];
    uint64_t v7 = +[VOTOutputManager outputManager];
    id v8 = +[VOSOutputEvent InteractIn];
    [v7 sendEvent:v8];

    [(VOTElementFetcher *)self->_fetchManager forceUpdate];
  }

  return v5;
}

- (BOOL)_handleMoveOut:(id)a3
{
  id v4 = a3;
  BOOL v5 = [(VOTElement *)self->_currentElement groupedParent];
  if (v5)
  {
    [(VOTElementManager *)self _echoDifferentElement:v5 forEvent:v4];
    unsigned int v6 = +[VOTOutputManager outputManager];
    uint64_t v7 = +[VOSOutputEvent InteractOut];
    [v6 sendEvent:v7];

    [(VOTElementFetcher *)self->_fetchManager forceUpdate];
  }

  return v5 != 0;
}

- (void)_updateStateForNotificationData:(id)a3
{
  id v4 = (VOTElement *)a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (v4)
  {
    if (qword_1001EB960 != -1) {
      dispatch_once(&qword_1001EB960, &stru_1001B4A48);
    }
    CFTypeID v5 = CFGetTypeID(v4);
    if (v5 == AXUIElementGetTypeID())
    {
      unsigned int v6 = 0;
      uint64_t v7 = v4;
      goto LABEL_9;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v8 = v4;
      uint64_t v7 = +[VOTElement elementWithUIElement:v8];
      unsigned int v6 = 0;
      if (!v7) {
        goto LABEL_23;
      }
LABEL_13:
      if ([(VOTElement *)v7 isValid] && ([(VOTElement *)v7 frame], !CGRectIsEmpty(v55)))
      {
        uint64_t v9 = self;
        [(VOTElementManager *)self setNextElementToFocus:v7];
        id v10 = VOTLogLayoutChange();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          sub_10011E244();
        }
      }
      else
      {
        uint64_t v9 = self;
        id v10 = VOTLogLayoutChange();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
          sub_10011E1DC();
        }
      }

      self = v9;
LABEL_23:
      if (v6) {
        goto LABEL_24;
      }
LABEL_27:

      goto LABEL_28;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (([(id)qword_1001EB958 containsObject:v4] & 1) == 0)
      {
        unsigned int v6 = v4;
        id v8 = 0;
        uint64_t v7 = 0;
LABEL_24:
        -[VOTElementManager setNextStringToSpeakOnScreenChange:](self, "setNextStringToSpeakOnScreenChange:", v6, v36);
        uint64_t v11 = VOTLogLayoutChange();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
          sub_10011E174();
        }

        goto LABEL_27;
      }
      goto LABEL_66;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v37 = self;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      unsigned __int8 v12 = v4;
      id v13 = [(VOTElement *)v12 countByEnumeratingWithState:&v48 objects:v54 count:16];
      if (v13)
      {
        id v14 = v13;
        id v36 = v4;
        unsigned int v6 = 0;
        uint64_t v7 = 0;
        uint64_t v15 = *(void *)v49;
        p_opt_inst_meths = &OBJC_PROTOCOL___VOTGesturedTextInputManagerDelegate.opt_inst_meths;
        uint64_t v38 = v12;
        while (1)
        {
          for (i = 0; i != v14; i = (char *)i + 1)
          {
            if (*(void *)v49 != v15) {
              objc_enumerationMutation(v12);
            }
            id v18 = *(VOTElement **)(*((void *)&v48 + 1) + 8 * i);
            CFTypeID v19 = CFGetTypeID(v18);
            if (v19 == AXUIElementGetTypeID())
            {
              uint64_t v7 = v18;
              continue;
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              if ([(__objc2_meth_list *)p_opt_inst_meths[299] containsObject:v18]) {
                continue;
              }
              id v20 = v18;
              uint64_t v21 = v6;
              unsigned int v6 = v20;
            }
            else
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0) {
                continue;
              }
              long long v46 = 0u;
              long long v47 = 0u;
              long long v44 = 0u;
              long long v45 = 0u;
              uint64_t v21 = [(VOTElement *)v18 allValues];
              id v22 = [v21 countByEnumeratingWithState:&v44 objects:v53 count:16];
              if (v22)
              {
                id v23 = v22;
                id v39 = v6;
                uint64_t v24 = *(void *)v45;
                do
                {
                  for (j = 0; j != v23; j = (char *)j + 1)
                  {
                    if (*(void *)v45 != v24) {
                      objc_enumerationMutation(v21);
                    }
                    id v26 = *(VOTElement **)(*((void *)&v44 + 1) + 8 * (void)j);
                    CFTypeID v27 = CFGetTypeID(v26);
                    if (v27 == AXUIElementGetTypeID()) {
                      uint64_t v7 = v26;
                    }
                  }
                  id v23 = [v21 countByEnumeratingWithState:&v44 objects:v53 count:16];
                }
                while (v23);
                unsigned __int8 v12 = v38;
                unsigned int v6 = v39;
                p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___VOTGesturedTextInputManagerDelegate + 40);
              }
            }
          }
          id v14 = [(VOTElement *)v12 countByEnumeratingWithState:&v48 objects:v54 count:16];
          if (!v14)
          {
            id v4 = v36;
            self = v37;
            goto LABEL_69;
          }
        }
      }
      unsigned int v6 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_66:
        id v8 = 0;
        unsigned int v6 = 0;
        uint64_t v7 = 0;
        goto LABEL_27;
      }
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      unsigned __int8 v12 = [(VOTElement *)v4 allValues];
      id v28 = [(VOTElement *)v12 countByEnumeratingWithState:&v40 objects:v52 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = self;
        uint64_t v31 = v4;
        uint64_t v7 = 0;
        uint64_t v32 = *(void *)v41;
        do
        {
          for (k = 0; k != v29; k = (char *)k + 1)
          {
            if (*(void *)v41 != v32) {
              objc_enumerationMutation(v12);
            }
            uint64_t v34 = *(VOTElement **)(*((void *)&v40 + 1) + 8 * (void)k);
            CFTypeID v35 = CFGetTypeID(v34);
            if (v35 == AXUIElementGetTypeID()) {
              uint64_t v7 = v34;
            }
          }
          id v29 = [(VOTElement *)v12 countByEnumeratingWithState:&v40 objects:v52 count:16];
        }
        while (v29);
        unsigned int v6 = 0;
        id v4 = v31;
        self = v30;
      }
      else
      {
        unsigned int v6 = 0;
        uint64_t v7 = 0;
      }
    }
LABEL_69:

    if (!v7)
    {
      id v8 = 0;
      goto LABEL_23;
    }
LABEL_9:
    uint64_t v7 = [[VOTElement alloc] initWithAXElement:v7];
    id v8 = 0;
    if (!v7) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
LABEL_28:
}

- (void)handleNotification:(int)a3 withData:(id)a4 forElement:(__AXUIElement *)a5
{
  id v8 = a4;
  uint64_t v9 = VOTLogNotifications();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    sub_10011E37C();
  }

  if (![(VOTElementManager *)self _shouldIgnoreNotificationForContinuityDisplay:v8 withElement:a5])
  {
    if (a3 <= 3025)
    {
      switch(a3)
      {
        case 1000:
          id v13 = VOTLogLayoutChange();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
            sub_10011E2AC();
          }

          if (_AXSAutomationEnabled())
          {
            id v14 = +[NSDistributedNotificationCenter defaultCenter];
            [v14 postNotificationName:@"VoiceOverEventOccurred" object:@"DidReceiveScreenChange"];
          }
          if ([(VOTElementManager *)self _notificationData:v8 containsToken:kAXScreenChangePopup])
          {
            uint64_t v15 = +[VOTOutputManager outputManager];
            long long v16 = +[VOSOutputEvent PopoverDidAppear];
            [v15 sendEvent:v16];
          }
          -[SCRCThread performSelector:onTarget:cancelMask:count:objects:](self->_elementManagerThread, "performSelector:onTarget:cancelMask:count:objects:", "_updateStateForNotificationData:", self, 0, 1, v8, 0);
          [(SCRCThread *)self->_elementManagerThread performSelector:"_notificationThreadCancel" onTarget:self cancelMask:1574144 count:0 objects:0];
          unsigned int v17 = [(VOTElementManager *)self _notificationData:v8 containsToken:kAXPerformElementUpdateImmediatelyToken];
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScreenChange:sound:";
          if (v17) {
            goto LABEL_33;
          }
          id v29 = 0;
          uint64_t v30 = 0;
          id v18 = self;
          uint64_t v19 = 256;
          goto LABEL_110;
        case 1001:
          if (_AXSAutomationEnabled())
          {
            id v20 = +[NSDistributedNotificationCenter defaultCenter];
            [v20 postNotificationName:@"VoiceOverEventOccurred" object:@"DidReceiveLayoutChange"];
          }
          uint64_t v21 = VOTLogLayoutChange();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
            sub_10011E314();
          }

          if ([(VOTElementManager *)self _notificationData:v8 containsToken:kAXForceUpdateChangeToken])
          {
            [(VOTElementManager *)self setDidReceiveForceUpdateChangeToken:1];
          }
          -[SCRCThread performSelector:onTarget:cancelMask:count:objects:](self->_elementManagerThread, "performSelector:onTarget:cancelMask:count:objects:", "_updateStateForNotificationData:", self, 0, 1, v8, 0);
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleElementChangedNotification:";
          id v29 = 0;
          id v18 = self;
          uint64_t v19 = 1024;
          goto LABEL_103;
        case 1002:
        case 1003:
        case 1011:
        case 1015:
        case 1019:
        case 1021:
        case 1025:
        case 1027:
        case 1028:
        case 1031:
        case 1033:
        case 1034:
        case 1036:
        case 1037:
        case 1051:
        case 1054:
        case 1058:
        case 1060:
        case 1067:
        case 1069:
        case 1076:
        case 1077:
        case 1078:
        case 1079:
          goto LABEL_106;
        case 1004:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScreenLock:";
          break;
        case 1005:
          id v22 = self->_elementManagerThread;
          id v23 = [[VOTElement alloc] initWithAXElement:a5];
          -[SCRCThread performSelector:onTarget:cancelMask:count:objects:](v22, "performSelector:onTarget:cancelMask:count:objects:", "_handleValueChangedNotification:associatedElement:", self, 0, 2, v8, v23, 0);

          goto LABEL_106;
        case 1006:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleAlertReceived:forApplication:";
          id v29 = a5;
          uint64_t v30 = 0;
          id v18 = self;
          uint64_t v19 = 2048;
          goto LABEL_110;
        case 1007:
        case 1072:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleWebPageLoaded:";
          break;
        case 1008:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleAnnouncementNotification:";
          break;
        case 1009:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScrollByPageNotification:";
          id v29 = 0;
          id v18 = self;
          uint64_t v19 = 512;
          goto LABEL_103;
        case 1010:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleAutoCorrectionMadeNotification:";
          goto LABEL_49;
        case 1012:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleKeyboardKeySelectedNotification:";
          id v29 = 0;
          id v18 = self;
          uint64_t v19 = 0x8000;
          goto LABEL_103;
        case 1013:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleAutoCorrectionDisplayNotification:";
LABEL_49:
          id v29 = 0;
          id v18 = self;
          uint64_t v19 = 4096;
          goto LABEL_103;
        case 1014:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleKeyboardChangedNotification";
          goto LABEL_100;
        case 1016:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleElementMoved:";
          break;
        case 1017:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleSelectionChangedNotification:";
          id v29 = 0;
          id v18 = self;
          uint64_t v19 = 0x10000;
          goto LABEL_103;
        case 1018:
          [(SCRCThread *)self->_elementManagerThread performSelector:"_notificationThreadCancel" onTarget:self cancelMask:0x10000 count:0 objects:0];
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleFirstResponderChangedNotification:";
          id v29 = 0;
          id v18 = self;
          uint64_t v19 = 0x20000;
          goto LABEL_103;
        case 1020:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleMoveToElementNotification:";
          break;
        case 1022:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleWebSelectionChangedNotification:";
          break;
        case 1023:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleInvalidTextInputNotification:";
          break;
        case 1024:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleAppSuspendAnimationProgressNotification:";
          break;
        case 1026:
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000627B4;
          block[3] = &unk_1001B33B8;
          block[4] = self;
          if (qword_1001EB968 != -1) {
            dispatch_once(&qword_1001EB968, block);
          }
          [(SCRCTargetSelectorTimer *)self->_invalidStatusChangedTimer cancel];
          [(SCRCTargetSelectorTimer *)self->_invalidStatusChangedTimer dispatchAfterDelay:v8 withObject:1.0];
          goto LABEL_106;
        case 1029:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleKBPopupVariantsNotification:";
          break;
        case 1030:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScreenUnlock";
          goto LABEL_100;
        case 1032:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleCurrentContentReadingLineUpdated:";
          break;
        case 1035:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleCameraCenteredNotification:";
          break;
        case 1038:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleBarcodeVisibilityNotification:";
          break;
        case 1039:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScreenOn";
          goto LABEL_100;
        case 1040:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScreenOff";
          goto LABEL_100;
        case 1041:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleStopSpeaking";
          goto LABEL_100;
        case 1042:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScreenOnSilently";
          goto LABEL_100;
        case 1043:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScreenOffSilently";
          goto LABEL_100;
        case 1044:
          uint64_t v24 = self->_elementManagerThread;
          uint64_t v25 = "_handleVisualsUpdate:";
          goto LABEL_93;
        case 1045:
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            unsigned __int8 v26 = [v8 isEqualToNumber:&__kCFBooleanTrue];
            self->_isInPreview = v26;
            if ((v26 & 1) == 0) {
              [(VOTElementManager *)self _simulatedForceTouchLift];
            }
          }
          goto LABEL_106;
        case 1046:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleExpandedStatusChanged:";
          break;
        case 1047:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleFocusedElementContentChangeNotification:";
          break;
        case 1048:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleRequestExclusiveAudioHardware";
          goto LABEL_100;
        case 1049:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleReleaseExclusiveAudioHardware";
          goto LABEL_100;
        case 1050:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleUnmuteEligibleEventOccured";
          goto LABEL_100;
        case 1052:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleTextReplacementOccurredNotification:";
          break;
        case 1053:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleNativeFocusItemChangedNotification:";
          id v29 = 0;
          id v18 = self;
          uint64_t v19 = 0x100000;
          goto LABEL_103;
        case 1055:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScreenWillChangeNotification:";
          break;
        case 1056:
          uint64_t v24 = self->_elementManagerThread;
          uint64_t v25 = "_handleDidReceiveVisionEngineResult:";
          goto LABEL_93;
        case 1057:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleRealtimeElementUpdate:";
          break;
        case 1059:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScreenWillWakeNotification:";
          break;
        case 1061:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleWebFormControlInteractionStartNotification:";
          break;
        case 1062:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleWebFormControlInteractionEndNotification:";
          break;
        case 1063:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleKeyboardContinuousPathDidBegin:";
          break;
        case 1064:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleLiveContinuousToneBeginNotification:";
          break;
        case 1065:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleLiveContinuousToneUpdateNotification:";
          break;
        case 1066:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleLiveContinuousToneEndNotification:";
          break;
        case 1068:
          uint64_t v24 = self->_elementManagerThread;
          uint64_t v25 = "_handleCaptionsDisplayedNotification:";
LABEL_93:
          -[SCRCThread performSelector:onTarget:count:objects:](v24, "performSelector:onTarget:count:objects:", v25, self, 1, v8, 0);
          goto LABEL_106;
        case 1070:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleContextMenuStatusNotification:";
          break;
        case 1071:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleDuckingDisabling:";
          break;
        case 1073:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handlePauseSpeechAndHapticsNotification:";
          break;
        case 1074:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleAudiographSelectedSeriesChangedNotification:";
          break;
        case 1075:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleAudiographPlaybackStateNotification:";
          break;
        case 1080:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleStopSpeakingAndClearQueue";
LABEL_100:
          id v18 = self;
          uint64_t v19 = 0;
          uint64_t v27 = 0;
          id v28 = 0;
          goto LABEL_105;
        default:
          if (a3 == 2025)
          {
            elementManagerThread = self->_elementManagerThread;
            uint64_t v11 = "_handleLabelElementAcceptedNotification:";
          }
          else
          {
            if (a3 != 2026) {
              goto LABEL_106;
            }
            elementManagerThread = self->_elementManagerThread;
            uint64_t v11 = "_handleItemChooserSelectionMade:";
          }
          break;
      }
LABEL_102:
      id v29 = 0;
      id v18 = self;
      uint64_t v19 = 0;
LABEL_103:
      uint64_t v27 = 1;
LABEL_104:
      id v28 = v8;
LABEL_105:
      -[SCRCThread performSelector:onTarget:cancelMask:count:objects:](elementManagerThread, "performSelector:onTarget:cancelMask:count:objects:", v11, v18, v19, v27, v28, v29, v30);
      goto LABEL_106;
    }
    if (a3 > 5000)
    {
      switch(a3)
      {
        case 5700:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleSiriStartedTalking:";
          goto LABEL_102;
        case 5701:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleSiriFinishedTalking:";
          goto LABEL_102;
        case 5702:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleSiriStartedListening:";
          goto LABEL_102;
        case 5703:
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleSiriFinishedListening:";
          goto LABEL_102;
        default:
          if (a3 != 5001) {
            goto LABEL_106;
          }
          elementManagerThread = self->_elementManagerThread;
          uint64_t v11 = "_handleScreenChange:sound:";
LABEL_33:
          id v29 = 0;
          uint64_t v30 = 0;
          id v18 = self;
          uint64_t v19 = 0x80000;
LABEL_110:
          uint64_t v27 = 2;
          break;
      }
      goto LABEL_104;
    }
    switch(a3)
    {
      case 3026:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v11 = "_handleWebTextAvailableNotification:";
        goto LABEL_102;
      case 3027:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v11 = "_handleWebTextMatchSelectedNotification:";
        goto LABEL_102;
      case 3028:
      case 3029:
      case 3030:
      case 3031:
        break;
      case 3032:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v11 = "_handleCurrentStateChanged:";
        goto LABEL_102;
      case 3033:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v11 = "_handleSortDirectionChanged:";
        goto LABEL_102;
      default:
        if (a3 == 5000)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v12 = +[NSMutableDictionary dictionaryWithDictionary:v8];
            [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:kAXPerformElementUpdateImmediatelyToken];
          }
          else
          {
            id v12 = kAXPerformElementUpdateImmediatelyToken;
          }

          -[SCRCThread performSelector:onTarget:count:objects:](self->_elementManagerThread, "performSelector:onTarget:count:objects:", "_handleScreenChange:sound:", self, 2, v12, 0, 0);
          id v8 = v12;
        }
        break;
    }
  }
LABEL_106:
}

- (void)_handleLiveContinuousToneBeginNotification:(id)a3
{
  id v8 = a3;
  if (AXDeviceSupportsSonification())
  {
    id v3 = +[VOTAudiographManager sharedManager];
    [v3 beginLiveModeSession];

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v8 floatValue];
      double v5 = v4;
      if (v5 > 1.0) {
        double v5 = 1.0;
      }
      double v6 = fmax(v5, 0.0);
      uint64_t v7 = +[VOTAudiographManager sharedManager];
      [v7 setLiveModeValue:v6];
    }
  }
}

- (void)_handleLiveContinuousToneUpdateNotification:(id)a3
{
  id v7 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v7 floatValue];
    double v4 = v3;
    if (v4 > 1.0) {
      double v4 = 1.0;
    }
    double v5 = fmax(v4, 0.0);
    double v6 = +[VOTAudiographManager sharedManager];
    [v6 setLiveModeValue:v5];
  }
}

- (void)_handleLiveContinuousToneEndNotification:(id)a3
{
  id v3 = +[VOTAudiographManager sharedManager];
  [v3 endLiveModeSession];
}

- (BOOL)_notificationData:(id)a3 containsToken:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unsigned __int8 v7 = [v5 containsObject:v6];
LABEL_7:
    unsigned __int8 v9 = v7;
    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unsigned __int8 v7 = [v5 isEqual:v6];
    goto LABEL_7;
  }
  id v8 = [v5 allKeys];
  if ([v8 containsObject:v6])
  {
    unsigned __int8 v9 = 1;
  }
  else
  {
    id v10 = [v5 objectForKey:kAXNotificationDataKey];
    unsigned __int8 v9 = [v10 isEqual:v6];
  }
LABEL_10:

  return v9;
}

- (id)_notificationData:(id)a3 consumingToken:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v5 containsObject:v6])
  {
    id v7 = [v5 mutableCopy];
    [v7 removeObject:v6];
    if ([v7 count]) {
      id v8 = v7;
    }
    else {
      id v8 = 0;
    }
  }
  else if ([v5 isEqual:v6])
  {
    id v8 = 0;
  }
  else
  {
    id v8 = v5;
  }

  return v8;
}

- (void)sendRequest:(id)a3
{
  id v4 = a3;
  id v5 = VOTLogCommon();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_10011E408();
  }

  if ([(id)VOTSharedWorkspace pauseSpeechAndHaptics])
  {
    id v6 = VOTLogAudio();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Not sending request because speech and haptics is currently paused", buf, 2u);
    }
  }
  else
  {
    if (![(VOTElementManager *)self _hasCurrentApplicationMatchingBlock:&stru_1001B4A88])
    {
      id v7 = [(VOTElement *)self->_currentElement application];
      if ([v7 isDictationListening])
      {
      }
      else
      {
        id v8 = [(VOTElement *)self->_currentElement remoteApplication];
        unsigned int v9 = [v8 isDictationListening];

        if (!v9)
        {
          [v4 send];
          goto LABEL_14;
        }
      }
    }
    id v10 = VOTLogAudio();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Not sending request because either siri or dictation is listening", v11, 2u);
    }

    [(VOTElementManager *)self setLastBlockedRequestBySiriOrDictationTime:CFAbsoluteTimeGetCurrent()];
    [(VOTElementManager *)self setLastRequestBlockedBySiriOrDictation:v4];
  }
LABEL_14:
}

- (double)keyboardKeyPenumbra:(id)a3
{
  [a3 frame];
  double result = v3 + v3 / -6.0;
  if (result > 33.0) {
    return 33.0;
  }
  return result;
}

- (void)_showVisualRotor:(id)a3 direction:(BOOL)a4
{
  BOOL v4 = a4;
  id v15 = a3;
  id v6 = +[VOTCommandHelper commandHelper];
  unsigned __int8 v7 = [v6 helpEnabled];

  if ((v7 & 1) == 0)
  {
    self->_flags.visualRotorDisplayed = 1;
    id v8 = [v15 currentVisualRotorString];
    id v9 = objc_allocWithZone((Class)NSDictionary);
    id v10 = +[NSNumber numberWithBool:v4];
    uint64_t v11 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v15 rotorCount]);
    id v12 = +[NSNumber numberWithBool:1];
    id v13 = objc_msgSend(v9, "initWithObjectsAndKeys:", v10, @"increment", v11, @"count", v8, @"title", v12, @"show", 0);

    id v14 = +[VOTDisplayManager displayManager];
    [v14 updateVisualRotor:v13];
  }
  [(SCRCTargetSelectorTimer *)self->_visualRotorFadeTimer cancel];
  [(SCRCTargetSelectorTimer *)self->_visualRotorFadeTimer dispatchAfterDelay:1.5];
}

- (void)_hideVisualRotor
{
  if (!self->_flags.visualRotorDisplayed
    || ([(SCRCTargetSelectorTimer *)self->_visualRotorFadeTimer isCancelled] & 1) != 0)
  {
    goto LABEL_8;
  }
  if ([(id)VOTSharedWorkspace fingerCount] != (id)2)
  {
    id v3 = objc_allocWithZone((Class)NSDictionary);
    BOOL v4 = +[NSNumber numberWithBool:0];
    id v5 = objc_msgSend(v3, "initWithObjectsAndKeys:", v4, @"show", 0);

    id v6 = +[VOTDisplayManager displayManager];
    [v6 updateVisualRotor:v5];

LABEL_8:
    self->_flags.visualRotorDisplayed = 0;
    return;
  }

  [(VOTElementManager *)self hideVisualRotor];
}

- (void)hideVisualRotor
{
  if (![(SCRCTargetSelectorTimer *)self->_visualRotorFadeTimer isPending]
    || [(SCRCTargetSelectorTimer *)self->_visualRotorFadeTimer isCancelled])
  {
    [(SCRCTargetSelectorTimer *)self->_visualRotorFadeTimer cancel];
    visualRotorFadeTimer = self->_visualRotorFadeTimer;
    [(SCRCTargetSelectorTimer *)visualRotorFadeTimer dispatchAfterDelay:0.75];
  }
}

- (BOOL)rotorEnabled
{
  return 1;
}

- (void)_resetElementUnitIndexes
{
  self->_elementUnitIndedouble x = -1;
  self->_elementUnitOutputRange = 0u;
  self->_bookCursorPosition = -1;
  self->_bookLineRange = (_NSRange)xmmword_10016E510;
  self->_bookLineNumber = 0x7FFFFFFFLL;
  if (!self->_bookUpdatedCurrentLine)
  {
    bookLineString = self->_bookLineString;
    self->_bookLineString = 0;
  }
  self->_readWordCyclingCount = 0;
}

- (void)_setElementUnitIndexesToEndOfElement:(id)a3
{
  id v24 = a3;
  if ([v24 isReadingContent])
  {
    BOOL v4 = [v24 pageContent];
    id v5 = [v4 length];
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    self->_elementUnitIndedouble x = (int64_t)v5;
    self->_elementUnitOutputRange.id location = (NSUInteger)v5;
    self->_elementUnitOutputRange.NSUInteger length = 0;
    do
    {
      uint64_t v8 = v6;
      if (v7 >= (unint64_t)v5) {
        break;
      }
      id v9 = [v24 stringForLineNumber:v6];
      id v10 = [v9 length];

      v7 += (unint64_t)v10;
      uint64_t v6 = v8 + 1;
    }
    while (v10);
    if (v8)
    {
      int64_t v11 = v8 + 1;
      id v12 = v24;
      while (--v11 >= 0)
      {
        id v13 = [v12 stringForLineNumber:v11];
        id v14 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
        id v15 = [v13 stringByTrimmingCharactersInSet:v14];

        id v16 = [v15 length];
        id v12 = v24;
        if (v16) {
          goto LABEL_13;
        }
      }
      int64_t v11 = -1;
LABEL_13:
      self->_bookLineNumber = v11;
      if ([v12 supportsRangeForLineNumber])
      {
        id location = [v24 rangeForLineNumber:v11];
        self->_bookLineRange.id location = (NSUInteger)location;
        self->_bookLineRange.NSUInteger length = length;
      }
      else
      {
        id v22 = [v24 stringForLineNumber:v11];
        self->_bookLineRange.id location = (NSUInteger)[(VOTElementManager *)self _rangeOfLine:v22 inBookContent:v4];
        self->_bookLineRange.NSUInteger length = v23;

        id location = self->_bookLineRange.location;
        NSUInteger length = self->_bookLineRange.length;
      }
      uint64_t v18 = (uint64_t)location + length;
    }
    else
    {
      self->_bookLineRange = (_NSRange)xmmword_10016E510;
      self->_bookLineNumber = 0x7FFFFFFFLL;
      uint64_t v18 = -1;
    }
    uint64_t v19 = 704;
  }
  else
  {
    BOOL v4 = [v24 visibleText];
    id v17 = [v4 length];
    uint64_t v18 = 0;
    self->_elementUnitIndedouble x = (int64_t)v17;
    self->_elementUnitOutputRange.id location = (NSUInteger)v17;
    self->_elementUnitOutputRange.NSUInteger length = 0;
    self->_bookCursorPosition = -1;
    self->_bookLineNumber = 0x7FFFFFFFLL;
    uint64_t v19 = 696;
    self->_bookLineRange.id location = 0x7FFFFFFFLL;
  }
  *(Class *)((char *)&self->super.isa + v19) = (Class)v18;
}

- (void)_setPreviousTouchTypingKey:(id)a3
{
  id v5 = (VOTElement *)a3;
  previousTouchTypingKedouble y = self->_previousTouchTypingKey;
  p_previousTouchTypingKedouble y = &self->_previousTouchTypingKey;
  if (previousTouchTypingKey != v5)
  {
    uint64_t v8 = v5;
    objc_storeStrong((id *)p_previousTouchTypingKey, a3);
    id v5 = v8;
  }
}

- (BOOL)_isTouchTypingEventTooCloseToEdge:(id)a3
{
  [a3 touchPoint];
  objc_msgSend((id)VOTSharedWorkspace, "convertDevicePointToZoomedPoint:");
  double v4 = v3;
  double v6 = v5;
  unint64_t v7 = (char *)[(id)VOTSharedWorkspace deviceOrientation];
  double v8 = 1.5;
  if (AXDeviceIsPhoneIdiom())
  {
    if ((AXDeviceIsTallPhoneIdiom() & ((unint64_t)(v7 - 3) < 2)) != 0) {
      double v8 = 0.0;
    }
    else {
      double v8 = 2.0;
    }
  }
  id v9 = (double *)&xmmword_1001EBE30;
  if (v7 == (char *)3) {
    double v10 = v6;
  }
  else {
    double v10 = v4;
  }
  if (v7 == (char *)3) {
    id v9 = (double *)&xmmword_1001EBE30 + 1;
  }
  if (v7 == (char *)4)
  {
    double v10 = v6;
    id v9 = (double *)&xmmword_1001EBE30 + 1;
  }
  return v10 >= *v9 - v8 || v10 <= v8;
}

- (void)_performTouchTypingKeyPress:(id)a3
{
  id v4 = a3;
  id v36 = [(VOTElementManager *)self _currentElement];
  [(VOTElementManager *)self keyboardKeyPenumbra:v36];
  double v6 = v5;
  unsigned __int8 v7 = [(VOTElementManager *)self _isTouchTypingEventTooCloseToEdge:v4];
  [v36 frame];
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;
  double v15 = v14;
  id v16 = +[VOTElement systemWideElement];
  objc_msgSend(v16, "convertRect:fromContextId:", objc_msgSend(v36, "windowContextId"), v9, v11, v13, v15);
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  CGFloat v24 = v23;

  uint64_t v25 = (void *)VOTSharedWorkspace;
  [v4 touchPoint];
  double v27 = v26;
  double v29 = v28;

  objc_msgSend(v25, "convertDevicePointToZoomedPoint:", v27, v29);
  if ((v7 & 1) == 0)
  {
    CGFloat v32 = v30;
    CGFloat v33 = v31;
    if ([v36 keyboardKeyAllowsTouchTyping])
    {
      v39.origin.double x = v18;
      v39.origin.double y = v20;
      v39.size.width = v22;
      v39.size.height = v24;
      CGRect v40 = CGRectInset(v39, -v6, -v6);
      v38.double x = v32;
      v38.double y = v33;
      BOOL v34 = CGRectContainsPoint(v40, v38);
      if (!v4 || v34)
      {
        CFTypeID v35 = +[VOTOutputManager outputManager];
        [v35 stopSpeakingAtBoundary:0];

        [v36 performSimpleTap];
        [(VOTElementManager *)self _setPreviousTouchTypingKey:v36];
      }
    }
  }
}

- (void)_cleanupMapInteractionOnIdle
{
  [(VOTOutputRequest *)self->_switchRoadsOutputRequest setCancelRequest:1];
  switchRoadsOutputRequest = self->_switchRoadsOutputRequest;
  self->_switchRoadsOutputRequest = 0;

  self->_flags.shouldSpeakSameLineTouched = 1;
  self->_flags.didTouchTypingOutputStart = 0;
  upcomingRoadElement = self->_upcomingRoadElement;
  self->_upcomingRoadElement = 0;

  [(VOTOutputRequest *)self->_startTrackingRoadRequest setCancelRequest:1];
  [(VOTOutputRequest *)self->_startTrackingRoadRequest setCompletionDelegate:0];
  startTrackingRoadRequest = self->_startTrackingRoadRequest;
  self->_startTrackingRoadRequest = 0;
}

- (void)_handleIdle:(id)a3
{
  id v10 = a3;
  if ([(id)VOTSharedWorkspace typingMode] == (id)1 && self->_flags.didTouchTypingOutputStart)
  {
    if (CFAbsoluteTimeGetCurrent() - self->_touchTypingStartTime > 0.0
      || ([(VOTElementManager *)self _currentElement],
          id v4 = objc_claimAutoreleasedReturnValue(),
          unsigned int v5 = [v4 isEqual:self->_previousTouchTypingKey],
          v4,
          v5))
    {
      [(VOTElementManager *)self _performTouchTypingKeyPress:v10];
    }
    else
    {
      [(VOTElementManager *)self _setPreviousTouchTypingKey:0];
    }
  }
  if ([(id)VOTSharedWorkspace reachabilityActive]
    && self->_flags.setReachabilityIsActiveWhileFingerDown)
  {
    [(VOTElementManager *)self _reachabilityHandleTrackingStopped];
  }
  [(VOTElementManager *)self _cleanupMapInteractionOnIdle];
  self->_shouldContinueRoadTracking = 0;
  [(VOTElementManager *)self hideVisualRotor];
  self->_flags.lastEventWasIdle = 1;
  self->_flags.usePenumbraForKeyboardKeys = 0;
  fetchManager = self->_fetchManager;
  unsigned __int8 v7 = [(VOTElementManager *)self _currentElement];
  [(VOTElementFetcher *)fetchManager updateCacheWithElement:v7];

  CGPoint v8 = CGPointZero;
  self->_firstRoadTravelPoint = CGPointZero;
  self->_lastRoadTravelPoint = v8;
  [(SCRCTargetSelectorTimer *)self->_switchRoadsAtIntersectionTimer cancel];
  [(SCRCTargetSelectorTimer *)self->_keyboardAlternativeModeActivationTimer cancel];
  self->_flags.shouldTriggerAlternativeKeyActivation = 0;
  self->_keyboardAlternativesVisible = 0;
  [(SCRCTargetSelectorTimer *)self->_alternativeKeyDismissalTimer cancel];
  [(SCRCTargetSelectorTimer *)self->_continuousPathIdleTimer cancel];
  *(_WORD *)&self->_flags.continuousPathActivationDesired = 0;
  continuousPathSuggestion = self->_continuousPathSuggestion;
  self->_continuousPathSuggestion = 0;

  self->_flags.isContinuousPathOutsideBounds = 0;
  if (self->_flags.inPassthroughMode) {
    [(VOTElementManager *)self _finishPassthroughMode];
  }
}

- (void)_setSelectedTextRange:(_NSRange)a3 onElement:(id)a4 refreshBraille:(BOOL)a5
{
}

- (void)_setSelectedTextRange:(_NSRange)a3 onElement:(id)a4 refreshBraille:(BOOL)a5 isVoiceOverSelectionMovement:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  id v11 = a4;
  [v11 selectedTextRange];
  uint64_t v13 = v12;
  objc_msgSend(v11, "setSelectedTextRange:refreshBraille:isVoiceOverSelectionMovement:", location, length, v7, v6);

  if ((!v13 && length || v13 && !length) && !self->_inTextProcessingRotorMode) {
    self->_flags.shouldUpdateRotorForElement = 1;
  }
}

- (_NSRange)_rangeOfLine:(id)a3 inBookContent:(id)a4
{
  id v5 = a4;
  BOOL v6 = [a3 stringByReplacingOccurrencesOfString:@"•" withString:&stru_1001B7888];
  BOOL v7 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
  CGPoint v8 = [v6 stringByTrimmingCharactersInSet:v7];

  if (v8)
  {
    id v9 = v8;
    unint64_t v10 = 0;
    unint64_t v11 = (unint64_t)[v9 length] / 0xA;
    do
    {
      uint64_t v12 = v9;
      uint64_t v13 = (uint64_t)[v5 rangeOfString:v9];
      NSUInteger v15 = v14;
      objc_msgSend(v9, "substringToIndex:", (char *)objc_msgSend(v9, "length") - v11);
      id v9 = (id)objc_claimAutoreleasedReturnValue();

      if (v10 > 8) {
        break;
      }
      ++v10;
    }
    while (v13 == 0x7FFFFFFFFFFFFFFFLL);
    if (v13 == 0x7FFFFFFFFFFFFFFFLL) {
      NSUInteger v15 = 0;
    }
  }
  else
  {
    NSUInteger v15 = 0;
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }

  NSUInteger v16 = v13;
  NSUInteger v17 = v15;
  result.NSUInteger length = v17;
  result.NSUInteger location = v16;
  return result;
}

- (void)_handleCurrentContentReadingLineUpdated:(id)a3
{
  id v9 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = [v9 objectForKey:@"lineString"];

    if (v4)
    {
      id v5 = [v9 objectForKey:@"lineString"];
      BOOL v6 = (NSString *)[v5 copy];
      bookLineString = self->_bookLineString;
      self->_bookLineString = v6;
    }
    else
    {
      CGPoint v8 = [v9 objectForKey:@"lineNumber"];

      if (!v8)
      {
LABEL_7:
        self->_bookUpdatedCurrentLine = 1;
        goto LABEL_8;
      }
      id v5 = [v9 objectForKey:@"lineNumber"];
      self->_bookLineNumber = (int64_t)[v5 integerValue];
    }

    goto LABEL_7;
  }
LABEL_8:

  _objc_release_x1();
}

- (void)_handleSetupForEndOfPageNavigationTest:(id)a3
{
}

- (void)_handleBookContentMovement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5 generateOutput:(BOOL)a6
{
  BOOL v6 = a6;
  id v92 = a3;
  int64_t bookCursorPosition = self->_bookCursorPosition;
  unint64_t v11 = [v92 value];
  uint64_t v12 = objc_msgSend(v92, "attributedValueForRange:", 0, objc_msgSend(v11, "length"));

  if (![v12 length])
  {
    uint64_t v13 = [v92 pageContent];

    uint64_t v12 = (void *)v13;
  }
  id v14 = [v12 length];
  int64_t v15 = self->_bookCursorPosition;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL
    || (int64_t bookLineNumber = self->_bookLineNumber, bookLineNumber == -1)
    || self->_bookLineRange.location == 0x7FFFFFFF
    || !self->_bookLineRange.length)
  {
    NSUInteger v17 = [v92 stringForLineNumber:0];
    if ([v17 length])
    {
      objc_storeStrong((id *)&self->_bookLineString, v17);
      if ([v92 supportsRangeForLineNumber]) {
        id v18 = [v92 rangeForLineNumber:0];
      }
      else {
        id v18 = [(VOTElementManager *)self _rangeOfLine:self->_bookLineString inBookContent:v12];
      }
      self->_bookLineRange.NSUInteger location = (NSUInteger)v18;
      self->_bookLineRange.NSUInteger length = v19;
      self->_int64_t bookCursorPosition = 0;
      self->_int64_t bookLineNumber = 0;
    }

    int64_t v15 = self->_bookCursorPosition;
    int64_t bookLineNumber = self->_bookLineNumber;
  }
  if ((unint64_t)(a5 - 1) <= 1)
  {
    int64_t v90 = (int64_t)v14;
    if (a5 == 1)
    {
      if (a4 == 1 && v15 < (uint64_t)v14)
      {
        uint64_t v20 = v15 & ~(v15 >> 63);
      }
      else
      {
        NSUInteger v23 = 0;
        NSUInteger v21 = 0x7FFFFFFFFFFFFFFFLL;
        if (a4 != 2 || (uint64_t v20 = v15 - 1, v15 < 1))
        {
LABEL_30:
          if ([(VOTElementManager *)self _handleMovementForElementFollowingElement:v92 direction:a4 unit:a5 mode:1])
          {
            goto LABEL_87;
          }
          if ([v92 readingContentCausesPageTurn])
          {
            double v28 = self;
            int64_t v29 = a4;
            int64_t v30 = a5;
            goto LABEL_33;
          }
          goto LABEL_71;
        }
      }
      id v25 = [v12 rangeOfComposedCharacterSequenceAtIndex:v20];
    }
    else
    {
      id v25 = [v12 wordFromPosition:v15 inDirection:a4];
    }
    NSUInteger v21 = (NSUInteger)v25;
    NSUInteger v23 = v26;
    if (v25 != (id)0x7FFFFFFF && v25 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      if (a4 == 1) {
        NSUInteger v31 = v26;
      }
      else {
        NSUInteger v31 = 0;
      }
      unint64_t v32 = (unint64_t)v25 + v31;
      self->_int64_t bookCursorPosition = v32;
      NSUInteger location = self->_bookLineRange.location;
      if (v32 >= location)
      {
        if (v32 > self->_bookLineRange.length + location)
        {
          ++self->_bookLineNumber;
          objc_msgSend(v92, "stringForLineNumber:");
          id v37 = (NSString *)objc_claimAutoreleasedReturnValue();
          if (v37
            || ([(VOTElementManager *)self _currentTextLineInBookElement:0],
                (id v37 = (NSString *)objc_claimAutoreleasedReturnValue()) != 0))
          {
            int64_t v83 = a4;
            bookLineString = self->_bookLineString;
            self->_bookLineString = v37;
            NSUInteger v87 = v23;
            CGRect v39 = v37;

            a4 = v83;
            NSUInteger v23 = v87;
          }
          else
          {
            --self->_bookLineNumber;
            self->_int64_t bookCursorPosition = v90;
          }
        }
      }
      else
      {
        int64_t v34 = self->_bookLineNumber;
        int64_t v27 = v34 - 1;
        if (v34 >= 1)
        {
          self->_int64_t bookLineNumber = v27;
          objc_msgSend(v92, "stringForLineNumber:");
          CFTypeID v35 = (NSString *)objc_claimAutoreleasedReturnValue();
          if (!v35)
          {
            CFTypeID v35 = [(VOTElementManager *)self _currentTextLineInBookElement:0];
          }
          id v36 = self->_bookLineString;
          self->_bookLineString = v35;
        }
      }
      if (self->_bookLineNumber != bookLineNumber && [(NSString *)self->_bookLineString length])
      {
        if ([v92 supportsRangeForLineNumber]) {
          id v40 = [v92 rangeForLineNumber:self->_bookLineNumber];
        }
        else {
          id v40 = [(VOTElementManager *)self _rangeOfLine:self->_bookLineString inBookContent:v12];
        }
        self->_bookLineRange.NSUInteger location = (NSUInteger)v40;
        self->_bookLineRange.NSUInteger length = v41;
      }
      goto LABEL_71;
    }
    goto LABEL_30;
  }
  if (a5 != 3)
  {
    NSUInteger v23 = 0;
    NSUInteger v21 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_71;
  }
  unint64_t v91 = (unint64_t)v14;
  NSUInteger v21 = self->_bookLineRange.location;
  int64_t v22 = self->_bookLineRange.length + v21;
  NSUInteger v23 = v15 - v21;
  CGFloat v24 = v92;
  if (v15 > v21 && v22 > v15)
  {
    if (a4 != 1)
    {
LABEL_56:
      self->_int64_t bookCursorPosition = v21;
      goto LABEL_71;
    }
LABEL_45:
    NSUInteger v23 = v22 - v15;
    self->_int64_t bookCursorPosition = v22;
    NSUInteger v21 = v15;
    goto LABEL_71;
  }
  if (a4 == 1)
  {
    if (v15 == v21) {
      goto LABEL_45;
    }
    uint64_t v89 = 1;
  }
  else
  {
    uint64_t v89 = -1;
    if (a4 == 2 && v22 == v15) {
      goto LABEL_56;
    }
  }
  int64_t v84 = a4;
  int64_t v42 = v89 + bookLineNumber;
  if (v89 + bookLineNumber < 0)
  {
    a4 = v84;
    if ([(VOTElementManager *)self _handleMovementForElementFollowingElement:v92 direction:v84 unit:3 mode:1])
    {
      goto LABEL_87;
    }
    NSUInteger v23 = 0;
    NSUInteger v21 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    BOOL v86 = v6;
    int64_t v85 = bookCursorPosition;
    while (1)
    {
      long long v43 = [v24 stringForLineNumber:v42];
      if (![v43 length])
      {

LABEL_91:
        NSUInteger v23 = 0;
        NSUInteger v21 = 0x7FFFFFFFFFFFFFFFLL;
        a4 = v84;
        goto LABEL_92;
      }
      if ([v92 supportsRangeForLineNumber])
      {
        NSUInteger v21 = (NSUInteger)[v92 rangeForLineNumber:v42];
        NSUInteger v88 = v44;
      }
      else
      {
        long long v45 = [v92 pageContent];
        NSUInteger v21 = (NSUInteger)[(VOTElementManager *)self _rangeOfLine:v43 inBookContent:v45];
        NSUInteger v88 = v46;
      }
      long long v47 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
      long long v48 = [v43 stringByTrimmingCharactersInSet:v47];

      if ([v48 length]) {
        break;
      }
      v42 += v89;

      CGFloat v24 = v92;
      BOOL v6 = v86;
      int64_t bookCursorPosition = v85;
      if (v42 < 0) {
        goto LABEL_91;
      }
    }
    self->_bookLineRange.NSUInteger location = v21;
    self->_bookLineRange.NSUInteger length = v88;
    self->_int64_t bookLineNumber = v42;
    v81 = self->_bookLineString;
    self->_bookLineString = (NSString *)v43;

    NSUInteger v82 = self->_bookLineRange.location;
    a4 = v84;
    BOOL v6 = v86;
    if (v84 == 1) {
      v82 += self->_bookLineRange.length;
    }
    self->_int64_t bookCursorPosition = v82;

    int64_t bookCursorPosition = v85;
    NSUInteger v23 = v88;
    if (v21 < v91) {
      goto LABEL_71;
    }
  }
LABEL_92:
  if ([(VOTElementManager *)self _handleMovementForElementFollowingElement:v92 direction:a4 unit:3 mode:1])
  {
    goto LABEL_87;
  }
  if ([v92 readingContentCausesPageTurn])
  {
    self->_bookDidTurnPage = 1;
    double v28 = self;
    int64_t v29 = a4;
    int64_t v30 = 3;
LABEL_33:
    if ([(VOTElementManager *)v28 _handleBookNavigateOverPageBoundary:v29 unit:v30])
    {
      goto LABEL_87;
    }
  }
LABEL_71:
  if (bookLineNumber != self->_bookLineNumber)
  {
    objc_msgSend(v92, "frameForLineNumber:");
    double v50 = v49;
    double v52 = v51;
    double v54 = v53;
    double v56 = v55;
    +[VOTElement systemWideElement];
    v58 = NSUInteger v57 = v23;
    objc_msgSend(v58, "convertRect:fromContextId:", objc_msgSend(v92, "windowContextId"), v50, v52, v54, v56);
    self->_lineFrame.origin.double x = v59;
    self->_lineFrame.origin.double y = v60;
    self->_lineFrame.size.double width = v61;
    self->_lineFrame.size.double height = v62;

    v63 = +[VOTDisplayManager displayManager];
    objc_msgSend(v63, "setCursorFrame:", self->_lineFrame.origin.x, self->_lineFrame.origin.y, self->_lineFrame.size.width, self->_lineFrame.size.height);

    NSUInteger v23 = v57;
  }
  if (a5 == 4 || v15 != self->_bookCursorPosition)
  {
    if (a5 == 2)
    {
      if ([v92 supportsFrameForRange]
        && (objc_msgSend(v92, "frameForRange:", v21, v23),
            double x = v94.origin.x,
            double y = v94.origin.y,
            double width = v94.size.width,
            double height = v94.size.height,
            !CGRectIsEmpty(v94)))
      {
        id v68 = (id)v23;
        int64_t v69 = a4;
        v70 = +[VOTElement systemWideElement];
        objc_msgSend(v70, "convertRect:fromContextId:", objc_msgSend(v92, "windowContextId"), x, y, width, height);
        self->_lineFrame.origin.double x = v71;
        self->_lineFrame.origin.double y = v72;
        self->_lineFrame.size.double width = v73;
        self->_lineFrame.size.double height = v74;

        v75 = +[VOTDisplayManager displayManager];
        objc_msgSend(v75, "setCursorFrame:", self->_lineFrame.origin.x, self->_lineFrame.origin.y, self->_lineFrame.size.width, self->_lineFrame.size.height);
      }
      else
      {
        id v68 = (id)v23;
        int64_t v69 = a4;
      }
    }
    else
    {
      id v68 = (id)v23;
      int64_t v69 = a4;
      if (a5 == 4)
      {
        id v68 = [v12 length];
        NSUInteger v21 = 0;
      }
    }
    v76 = +[VOTBrailleManager manager];
    [v76 setLastRefreshTrigger:1];

    -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:](self, "_setSelectedTextRange:onElement:refreshBraille:", self->_bookCursorPosition, 0, v92, 1);
    if (v69 != 1) {
      int64_t bookCursorPosition = self->_bookCursorPosition;
    }
    v77 = +[VOTBrailleManager manager];
    [v77 setTrailingBookCursorPosition:bookCursorPosition];

    v78 = +[VOTBrailleManager manager];
    [v78 setBookCursorPosition:self->_bookCursorPosition];

    id v79 = [v92 selectedTextRange];
    -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", v79, v80, 0);
    NSUInteger v23 = (NSUInteger)v68;
  }
  self->_highlightedCharacterRange.NSUInteger location = v21;
  self->_highlightedCharacterRange.NSUInteger length = v23;
  if (v6) {
    -[VOTElementManager outputTextSegmentForRange:string:element:usePhonetics:segment:](self, "outputTextSegmentForRange:string:element:usePhonetics:segment:", v21, v23, v12, v92, 0, a5);
  }
LABEL_87:
}

- (BOOL)_handleMovementForElementFollowingElement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5 mode:(int64_t)a6
{
  id v10 = a3;
  unint64_t v11 = v10;
  if (a4 == 1)
  {
    uint64_t v12 = [v10 nextTextNavigationElement];
  }
  else
  {
    if (a4 != 2)
    {
      uint64_t v13 = 0;
LABEL_11:
      BOOL v14 = 0;
      goto LABEL_20;
    }
    uint64_t v12 = [v10 previousTextNavigationElement];
  }
  uint64_t v13 = (void *)v12;
  BOOL v14 = 0;
  if (v12 && (void *)v12 != v11)
  {
    if ([(VOTElementManager *)self _setCurrentElement:v12])
    {
      if (a4 == 1) {
        [(VOTElementManager *)self _resetElementUnitIndexes];
      }
      else {
        [(VOTElementManager *)self _setElementUnitIndexesToEndOfElement:v13];
      }
      [(VOTElementManager *)self _updateCursorFrameForElementIfNeeded:v13];
      switch(a6)
      {
        case 3:
          [(VOTElementManager *)self _outputNextTextSegmentUnit:a5 direction:a4];
          break;
        case 2:
          [(VOTElementManager *)self _moveCursorForElement:v13 direction:a4 unit:a5];
          break;
        case 1:
          BOOL v14 = 1;
          [(VOTElementManager *)self _handleBookContentMovement:v13 direction:a4 unit:a5 generateOutput:1];
          goto LABEL_20;
      }
      BOOL v14 = 1;
      goto LABEL_20;
    }
    goto LABEL_11;
  }
LABEL_20:

  return v14;
}

- (id)_convertTextMarkerArrayToString:(id)a3 addInContentExtras:(BOOL)a4
{
  BOOL v33 = a4;
  id v4 = a3;
  id v5 = [objc_allocWithZone((Class)NSMutableString) init];
  BOOL v6 = +[NSMutableArray array];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
  id v30 = v7;
  NSUInteger v31 = v6;
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v39;
    uint64_t v32 = kAXImageTrait;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v39 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v13 = +[NSCharacterSet whitespaceCharacterSet];
          BOOL v14 = [v12 stringByTrimmingCharactersInSet:v13];

          [v5 appendString:v14];
LABEL_8:

          continue;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          int64_t v15 = [v12 label];
          BOOL v14 = [v15 stringByReplacingOccurrencesOfString:@"\n" withString:@" "];

          if ([v12 doesHaveTraits:v32])
          {
            uint64_t v16 = [v14 stringByReplacingOccurrencesOfString:@"image" withString:&stru_1001B7888];

            BOOL v14 = (void *)v16;
          }
          if ([v14 length]) {
            [v5 appendFormat:@" %@ ", v14];
          }
          if (v33)
          {
            NSUInteger v17 = [v12 arrayOfTraitsAsStrings];
            id v18 = [v17 componentsJoinedByString:@" "];
            if ([v18 length])
            {
              if ([v5 length]) {
                [v5 appendString:@" "];
              }
              [v5 appendString:v18];
              NSUInteger v19 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", (unsigned char *)[v5 length] - (unsigned char *)objc_msgSend(v18, "length"), objc_msgSend(v18, "length"));
              BOOL v6 = v31;
              [v31 addObject:v19];

              id v7 = v30;
            }
          }
          goto LABEL_8;
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
    }
    while (v9);
  }

  if ([v6 count])
  {
    id v20 = +[AXAttributedString axAttributedStringWithString:v5];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v21 = v6;
    id v22 = [v21 countByEnumeratingWithState:&v34 objects:v42 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v35;
      do
      {
        for (j = 0; j != v23; j = (char *)j + 1)
        {
          if (*(void *)v35 != v24) {
            objc_enumerationMutation(v21);
          }
          uint64_t v26 = UIAccessibilityTokenLowPitch;
          id v27 = [*(id *)(*((void *)&v34 + 1) + 8 * (void)j) rangeValue];
          objc_msgSend(v20, "setAttribute:forKey:withRange:", kCFBooleanTrue, v26, v27, v28);
        }
        id v23 = [v21 countByEnumeratingWithState:&v34 objects:v42 count:16];
      }
      while (v23);
    }

    id v7 = v30;
    BOOL v6 = v31;
  }
  else
  {
    id v20 = v5;
  }

  return v20;
}

- (id)_currentTextLineInBookElement:(BOOL)a3
{
  bookLineString = self->_bookLineString;
  if (bookLineString)
  {
    id v4 = bookLineString;
  }
  else
  {
    BOOL v5 = a3;
    id v7 = [(VOTElementManager *)self _currentElement];
    id v8 = [v7 textMarkerArrayOfText:self->_lineArray];

    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v9 = v8;
    uint64_t v10 = (char *)[v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v18;
      while (2)
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(void *)v18 != v11) {
            objc_enumerationMutation(v9);
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            LOBYTE(v10) = 1;
            goto LABEL_13;
          }
        }
        uint64_t v10 = (char *)[v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
LABEL_13:

    uint64_t v13 = -[VOTElementManager _convertTextMarkerArrayToString:addInContentExtras:](self, "_convertTextMarkerArrayToString:addInContentExtras:", v9, v5, v17);
    BOOL v14 = v13;
    if ((v10 & 1) != 0 || [v13 rangeOfString:@"\n"] == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v4 = v14;
    }
    else
    {
      lineArradouble y = self->_lineArray;
      self->_lineArradouble y = 0;

      id v4 = 0;
    }
  }

  return v4;
}

- (BOOL)_bookContentElementInteraction:(CGPoint)a3 element:(id)a4
{
  double y = a3.y;
  double x = a3.x;
  id v7 = a4;
  id v8 = +[VOTElement systemWideElement];
  objc_msgSend(v8, "convertPoint:toContextId:", objc_msgSend(v7, "windowContextId"), x, y);
  double v10 = v9;
  double v12 = v11;

  id v13 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:startWithElement:", v7, v10, v12);
  unsigned int v14 = [v13 doesHaveTraits:kAXTextEntryTrait | kAXButtonTrait | kAXLinkTrait];
  if (v14 && ([v13 isEqual:self->_bookSubelement] & 1) == 0)
  {
    [(VOTElementManager *)self _echoDifferentElement:v13 forEvent:0];
    objc_storeStrong((id *)&self->_bookSubelement, v13);
  }

  return v14;
}

- (void)_echoLineInBookElement:(id)a3 forEvent:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  self->_flags.isReadingAllBook = 0;
  if (self->_flags.lastEventWasIdle)
  {
    lineArraCGFloat y = self->_lineArray;
    self->_lineArraCGFloat y = 0;
  }
  [v7 touchPoint];
  double v10 = v9;
  double v12 = v11;
  id v13 = objc_msgSend(v6, "lineNumberForPoint:");
  if (v13 == (id)0x7FFFFFFF)
  {
    [v6 elementFrameLocation:3];
    double v135 = v14;
    double v136 = v15;
    [v6 elementFrameLocation:4];
    double v17 = v16;
    double v19 = v18;
    [v6 elementFrameLocation:5];
    double v137 = v20;
    id v21 = [(id)VOTSharedWorkspace deviceOrientation];
    id v22 = v21;
    id v23 = v7;
    if (v21 == (id)3)
    {
      double v38 = v136;
      uint64_t v24 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v10, v136 + 3.0);
      uint64_t v25 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v10, v38 + (v19 - v38) / 3.0);
      uint64_t v26 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v10, v38 + (v19 - v38 + v19 - v38) / 3.0);
      double v27 = v19 + -3.0;
    }
    else
    {
      if (v21 != (id)4)
      {
        double v40 = v135;
        uint64_t v24 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v135 + 3.0, v12);
        uint64_t v25 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v40 + (v17 - v40) / 3.0, v12);
        uint64_t v26 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v40 + (v17 - v40 + v17 - v40) / 3.0, v12);
        double v39 = v17 + -3.0;
        double v27 = v12;
        goto LABEL_14;
      }
      uint64_t v24 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v10, v19 + 3.0);
      uint64_t v25 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v10, v19 + (v136 - v19) / 3.0);
      uint64_t v26 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v10, v19 + (v136 - v19 + v136 - v19) / 3.0);
      double v27 = v136 + -3.0;
    }
    double v39 = v10;
LABEL_14:
    uint64_t v41 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v39, v27);
    v129 = self;
    v133 = v23;
    CGFloat y = CGRectZero.origin.y;
    double height = CGRectZero.size.height;
    double width = CGRectZero.size.width;
    id v42 = objc_allocWithZone((Class)NSMutableArray);
    long long v43 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", v10, v12);
    objc_super v127 = (void *)v41;
    v128 = (void *)v26;
    id v125 = (void *)v25;
    v126 = (void *)v24;
    id v44 = objc_msgSend(v42, "initWithObjects:", v43, v24, v25, v26, v41, 0);

    v124 = v44;
    long long v45 = [v6 textMarkersForPoints:v44];
    unsigned int v46 = [v6 showsDualPages];
    long long v140 = 0u;
    long long v141 = 0u;
    long long v142 = 0u;
    long long v143 = 0u;
    id obj = v45;
    id v47 = [obj countByEnumeratingWithState:&v140 objects:v144 count:16];
    if (!v47)
    {
      double v50 = 0;
      double v49 = 0;
LABEL_46:

LABEL_47:
      id v7 = v133;
      v76 = v128;
      self = v129;
      double v32 = y;
      double x = CGRectZero.origin.x;
      v77 = v127;
      goto LABEL_48;
    }
    id v48 = v47;
    double v49 = 0;
    double v50 = 0;
    uint64_t v51 = *(void *)v141;
    double v52 = v17 - v135;
LABEL_16:
    double v53 = 0;
    double v54 = v49;
    double v55 = v50;
    while (1)
    {
      if (*(void *)v141 != v51) {
        objc_enumerationMutation(obj);
      }
      double v49 = [v6 textLineStartMarker:*(void *)(*((void *)&v140 + 1) + 8 * (void)v53)];

      double v50 = [v6 textLineEndMarker:v49];

      double v56 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v49, v50, 0);
      [v6 textMarkerFrame:v56];
      double v58 = v57;
      double v60 = v59;
      double v62 = v61;
      double v64 = v63;

      v65 = +[VOTElement systemWideElement];
      objc_msgSend(v65, "convertRect:fromContextId:", objc_msgSend(v6, "windowContextId"), v58, v60, v62, v64);
      CGFloat v67 = v66;
      double v69 = v68;
      CGFloat v71 = v70;
      double v73 = v72;

      if (v22 == (id)3)
      {
        if (!v46)
        {
          double v73 = v19 - v136;
          goto LABEL_31;
        }
        if (v69 < v137)
        {
          double v73 = v137 - v136;
LABEL_31:
          double v69 = v136;
          goto LABEL_37;
        }
        if (v69 < v19)
        {
          double v73 = v19 - v137;
          goto LABEL_36;
        }
      }
      else
      {
        if (v22 != (id)4)
        {
          CGFloat v71 = v52;
          CGFloat v67 = v135;
          goto LABEL_37;
        }
        if (!v46)
        {
          double v73 = v136 - v19;
          goto LABEL_29;
        }
        if (v69 < v137)
        {
          double v73 = v137 - v19;
LABEL_29:
          double v69 = v19;
          goto LABEL_37;
        }
        if (v69 < v136)
        {
          double v73 = v136 - v137;
LABEL_36:
          double v69 = v137;
        }
      }
LABEL_37:
      v146.origin.double x = v67;
      v146.origin.CGFloat y = v69;
      v146.size.double width = v71;
      v146.size.double height = v73;
      v145.double x = v10;
      v145.CGFloat y = v12;
      if (CGRectContainsPoint(v146, v145))
      {

        if (!v49) {
          goto LABEL_47;
        }
        self = v129;
        CGFloat v74 = [(NSArray *)v129->_lineArray lastObject];
        unsigned __int8 v75 = [v74 isEqual:v50];

        id v7 = v133;
        double v32 = y;
        double x = CGRectZero.origin.x;
        v77 = v127;
        v76 = v128;
        if ((v75 & 1) == 0)
        {
          if ([v49 isEqual:v50])
          {
            [(VOTElementManager *)v129 _echoNoElementForEvent:v133];
            goto LABEL_49;
          }
          [(VOTElementManager *)v129 _resetElementUnitIndexes];
          id v118 = objc_msgSend(objc_allocWithZone((Class)NSArray), "initWithObjects:", v49, v50, 0);
          objc_storeStrong((id *)&v129->_lineArray, v118);
          long long v37 = [(VOTElementManager *)v129 _currentTextLineInBookElement:0];
          id v36 = [(VOTElementManager *)v129 _currentTextLineInBookElement:1];
          if ([v36 length])
          {
            v77 = v127;
            v76 = v128;
            if (v129->_lineArray)
            {
              objc_msgSend(v6, "textMarkerFrame:");
              double x = v119;
              double v32 = v120;
              double height = v122;
              double width = v121;
            }
          }
          else
          {
            v77 = v127;
            v76 = v128;
          }

          int v78 = 1;
LABEL_50:

          if (v78)
          {
LABEL_51:
            if (!-[VOTElementManager _bookContentElementInteraction:element:](self, "_bookContentElementInteraction:element:", v6, v10, v12))
            {
              id v79 = +[VOTElement systemWideElement];
              objc_msgSend(v79, "convertRect:fromContextId:", objc_msgSend(v6, "windowContextId"), x, v32, width, height);
              double v81 = v80;
              double v83 = v82;
              double v85 = v84;
              double v87 = v86;

              bookSubelement = self->_bookSubelement;
              self->_bookSubelement = 0;

              if ([v36 length])
              {
                if ([v6 supportsRangeForLineNumber])
                {
                  id location = [v6 rangeForLineNumber:self->_bookLineNumber];
                  self->_bookLineRange.id location = (NSUInteger)location;
                  self->_bookLineRange.NSUInteger length = v90;
                }
                else
                {
                  unint64_t v91 = [v6 pageContent];
                  self->_bookLineRange.id location = (NSUInteger)[(VOTElementManager *)self _rangeOfLine:v37 inBookContent:v91];
                  self->_bookLineRange.NSUInteger length = v92;

                  id location = self->_bookLineRange.location;
                }
                self->_int64_t bookCursorPosition = (int64_t)location;
                if (location == (id)0x7FFFFFFFFFFFFFFFLL)
                {
                  self->_int64_t bookCursorPosition = -1;
                }
                else
                {
                  -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:](self, "_setSelectedTextRange:onElement:refreshBraille:", location, 0, v6, 0);
                  v93 = +[VOTBrailleManager manager];
                  [v93 setBookCursorPosition:self->_bookCursorPosition];

                  id v94 = [v6 selectedTextRange];
                  -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", v94, v95, 0);
                }
                self->_highlightedCharacterRange = self->_bookLineRange;
                id v96 = [objc_allocWithZone((Class)VOTOutputRequest) init];
                id v97 = [v6 scrollStatus];
                id v98 = [v6 language];
                id obja = v97;
                if (([v97 isEqualToString:self->_bookPageScrollString] & 1) == 0)
                {
                  p_bookPageScrollString = &self->_bookPageScrollString;
                  id v100 = [v96 addString:v97 withLanguage:v98];
                  if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
                  {
                    [v96 lastAction];
                    v101 = v130 = self;
                    LODWORD(v102) = 1062836634;
                    +[NSNumber numberWithFloat:v102];
                    uint64_t v104 = v103 = v7;
                    [v101 setObject:v104 forVariant:32];

                    id v7 = v103;
                    id v97 = obja;

                    self = v130;
                  }
                  objc_storeStrong((id *)p_bookPageScrollString, v97);
                }
                id v105 = self;
                uint64_t v106 = [(id)VOTSharedWorkspace systemSpokenLanguage];
                unsigned int v107 = sub_100052458(v106, v98);

                if (v107)
                {

                  id v98 = 0;
                }
                v108 = v105;
                id v134 = v7;
                if ([v36 isAXAttributedString]) {
                  id v109 = [v96 addAttributedString:v36 withLanguage:v98];
                }
                else {
                  id v110 = [v96 addString:v36 withLanguage:v98];
                }
                v111 = [v96 lastAction];
                [v111 setPerformPunctuationTranslation:1];

                v112 = [v96 lastAction];
                [v112 setReplaceCommas:1];

                id v113 = [v96 lastAction];
                [v113 setObject:kCFBooleanTrue forVariant:59];

                [v96 setGeneratesBraille:1];
                objc_msgSend(v96, "setBrailleLineRange:", v105->_bookLineRange.location, v105->_bookLineRange.length);
                [v96 setBrailleType:4];
                [(VOTElementManager *)v105 sendRequest:v96];
                v105->_lineFrame.origin.double x = v81;
                v105->_lineFrame.origin.CGFloat y = v83;
                v105->_lineFrame.size.double width = v85;
                v105->_lineFrame.size.double height = v87;
                v114 = +[VOTDisplayManager displayManager];
                id v115 = [v6 windowContextId];
                v116 = [v6 uiElement];
                id v117 = [v116 numberWithAXAttribute:2123];
                objc_msgSend(v114, "setCursorFrame:withPath:withContextId:withDisplayId:element:forceRefresh:", 0, v115, objc_msgSend(v117, "unsignedIntValue"), v6, 0, v81, v83, v85, v87);

                v108->_textRangeBeingDisplayed = 1;
                id v7 = v134;
              }
            }
          }
          goto LABEL_71;
        }
LABEL_48:
        -[VOTElementManager _bookContentElementInteraction:element:](self, "_bookContentElementInteraction:element:", v6, v10, v12);
LABEL_49:
        int v78 = 0;
        id v36 = 0;
        long long v37 = 0;
        goto LABEL_50;
      }
      double v53 = (char *)v53 + 1;
      double v54 = v49;
      double v55 = v50;
      if (v48 == v53)
      {
        id v48 = [obj countByEnumeratingWithState:&v140 objects:v144 count:16];
        if (v48) {
          goto LABEL_16;
        }
        goto LABEL_46;
      }
    }
  }
  int64_t v28 = (int64_t)v13;
  if (self->_bookLineNumber == v13 && !self->_flags.shouldSpeakSameLineTouched)
  {
    id v36 = 0;
    long long v37 = 0;
  }
  else
  {
    [v6 frameForLineNumber:v13];
    double x = v29;
    double v32 = v31;
    double height = v34;
    double width = v33;
    long long v35 = [v6 stringForLineNumber:v28];
    id v36 = v35;
    if ([v36 length])
    {
      self->_int64_t bookLineNumber = v28;
      objc_storeStrong((id *)&self->_bookLineString, v35);
      self->_flags.shouldSpeakSameLineTouched = 0;
      long long v37 = v36;
      goto LABEL_51;
    }
    [(VOTElementManager *)self _echoNoElementForEvent:v7];
    long long v37 = v36;
  }
LABEL_71:
}

- (BOOL)_handleMoreBookContentElements
{
  double v3 = [(VOTElementManager *)self _currentElement];
  id v4 = [v3 pageContent];

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100065818;
  v15[3] = &unk_1001B4AB0;
  id v5 = v4;
  id v16 = v5;
  id v6 = [(VOTElementManager *)self _currentElement];
  id v7 = [(VOTElementManager *)self _nearestElementWithMatch:v15 startElement:v6 forward:1];

  if (v7
    && ([(VOTElementManager *)self _currentElement],
        id v8 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v9 = [v7 isEqual:v8],
        v8,
        (v9 & 1) == 0))
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000658B4;
    v13[3] = &unk_1001B3448;
    v13[4] = self;
    id v11 = v7;
    id v14 = v11;
    [v11 scrollToElementForDirectional:1 withCompletion:v13];
    [(VOTElementManager *)self _setCurrentElement:v11];
    if (self->_flags.isReadingAllBook && [v11 doesHaveTraits:kAXWebContentTrait]) {
      [(VOTElementManager *)self _continueReadAllWithElement:v11 setCurrentElement:0];
    }
    else {
      [(VOTElementManager *)self _handleReadAllBookContent:v11 fromTop:1];
    }

    BOOL v10 = 1;
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

- (void)_handleBookPageFlipAndContinue
{
  double v3 = [(VOTElementManager *)self currentElement];
  unsigned __int8 v4 = [v3 isReadingContent];

  if ((v4 & 1) != 0 || !self->_flags.userInitiatedBooksScroll)
  {
    id v5 = [(VOTElementManager *)self _currentElement];
    unsigned __int8 v6 = [v5 scrollNextPage];

    if ((v6 & 1) == 0)
    {
      id v7 = [(VOTElementManager *)self _currentElement];
      [v7 scrollRightPage];
    }
  }
  else
  {
    self->_flags.isReadingAll = 0;
    self->_flags.userInitiatedBooksScroll = 0;
  }
}

- (BOOL)_handleBookNavigateOverPageBoundary:(int64_t)a3 unit:(int64_t)a4
{
  id v7 = [(VOTElementManager *)self _currentElement];
  id v8 = v7;
  if (a3 == 2)
  {
    if (([v7 scrollPreviousPage] & 1) == 0) {
      [v8 scrollLeftPage];
    }
  }
  else
  {
    if (a3 != 1)
    {
      BOOL v9 = 0;
      goto LABEL_9;
    }
    if (([v7 scrollNextPage] & 1) == 0) {
      [v8 scrollRightPage];
    }
  }
  BOOL v9 = 1;
  self->_flags.previousScrollWasBookContentMovement = 1;
  self->_bookLastContentMovementUnit = a4;
  self->_bookLastContentMovementDirection = a3;
LABEL_9:

  return v9;
}

- (void)_startReadingBookForNewPage
{
  double v3 = [(VOTElement *)self->_currentElement application];
  if (!v3)
  {
    unsigned __int8 v4 = [(NSArray *)self->_currentApplications firstObject];
    double v3 = [v4 application];
  }
  id v11 = [v3 firstElementInApplication];
  if (!v11)
  {
    if (!self->_inUnitTestingMode) {
      _AXAssert();
    }
    id v11 = self->_currentElement;
  }
  if (self->_flags.lastScrollWasFromBraillePanning && self->_bookLastContentMovementDirection == 2)
  {
    id v5 = [v3 lastContainedElement];
    unsigned __int8 v6 = [(VOTElementManager *)self _nearestElementWithMatch:&stru_1001B4AF0 startElement:v5 forward:0];

    if (v6) {
      goto LABEL_15;
    }
  }
  if ([(VOTElement *)v11 readingContentCausesPageTurn]
    || [(VOTElement *)v11 isReadingContent]
    || [(VOTElement *)v11 includeDuringContentReading])
  {
    unsigned __int8 v6 = v11;
    if (v6) {
      goto LABEL_15;
    }
  }
  unsigned __int8 v6 = [(VOTElementManager *)self _nearestElementWithMatch:&stru_1001B4AF0 startElement:v11];
  if (v6)
  {
LABEL_15:
    BOOL isReadingAllBook = self->_flags.isReadingAllBook;
    unsigned int v8 = [(VOTElement *)v6 isEqual:self->_currentElement];
    [(VOTElementManager *)self _setCurrentElement:v6];
    if (v8)
    {
      BOOL v9 = +[VOTBrailleManager manager];
      [v9 setBrailleElement:v6];
    }
    [(VOTElementManager *)self _handleReadFromTop:0];
    if (!isReadingAllBook)
    {
      self->_flags.BOOL isReadingAllBook = 0;
      bookPageContentOutputRequest = self->_bookPageContentOutputRequest;
      self->_bookPageContentOutputRequest = 0;
    }
    [(VOTElementFetcher *)self->_fetchManager forceUpdate];
    [(VOTElementFetcher *)self->_fetchManager updateCacheWithElement:v11];
  }
}

- (BOOL)isReadingAll
{
  return self->_flags.isReadingAll || self->_flags.isReadingAllBook;
}

- (void)_handleReadAllBookContent:(id)a3 fromTop:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  if ([(id)VOTSharedWorkspace speechMuted])
  {
    id v7 = +[VOTOutputManager outputManager];
    unsigned int v8 = +[VOSOutputEvent UnknownCommand];
    [v7 sendEvent:v8];
  }
  else
  {
    *(_WORD *)&self->_flags.BOOL isReadingAllBook = 1;
    [v6 updatePageContent];
    BOOL v9 = [v6 pageContent];
    if (([v6 isReadingContent] & 1) == 0)
    {
      [v6 updateValue];
      uint64_t v10 = [v6 value];

      BOOL v4 = 1;
      BOOL v9 = (void *)v10;
    }
    id v11 = +[VOTDisplayManager displayManager];
    [v11 setCursorFrameForElement:0];

    if (v4 && !self->_bookUpdatedCurrentLine)
    {
      id v12 = 0;
    }
    else if ([v6 supportsRangeForLineNumber])
    {
      id v12 = [v6 rangeForLineNumber:self->_bookLineNumber];
    }
    else
    {
      bookLineString = self->_bookLineString;
      if (bookLineString)
      {
        id v14 = bookLineString;
      }
      else
      {
        double v34 = v9;
        double v15 = [v6 textMarkerArrayOfText:self->_lineArray];
        id v16 = [v15 mutableCopyWithZone:0];
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        id v17 = v15;
        id v18 = [v17 countByEnumeratingWithState:&v35 objects:v39 count:16];
        if (v18)
        {
          id v19 = v18;
          uint64_t v20 = *(void *)v36;
          uint64_t v21 = kAXImageTrait;
          do
          {
            for (i = 0; i != v19; i = (char *)i + 1)
            {
              if (*(void *)v36 != v20) {
                objc_enumerationMutation(v17);
              }
              id v23 = *(void **)(*((void *)&v35 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0 && [v23 doesHaveTraits:v21]) {
                [v16 removeObject:v23];
              }
            }
            id v19 = [v17 countByEnumeratingWithState:&v35 objects:v39 count:16];
          }
          while (v19);
        }

        id v14 = [(VOTElementManager *)self _convertTextMarkerArrayToString:v16 addInContentExtras:0];

        BOOL v9 = v34;
      }
      id v12 = [(VOTElementManager *)self _rangeOfLine:v14 inBookContent:v9];
    }
    if (v12 >= [v9 length]) {
      id v24 = 0;
    }
    else {
      id v24 = v12;
    }
    uint64_t v25 = [v9 substringFromIndex:v24];
    id v26 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    objc_storeStrong((id *)&self->_bookPageContentOutputRequest, v26);
    [v26 setCompletionDelegate:self];
    double v27 = [v6 language];
    int64_t v28 = [(id)VOTSharedWorkspace systemSpokenLanguage];
    unsigned int v29 = sub_100052458(v28, v27);

    if (v29)
    {

      double v27 = 0;
    }
    id v30 = [v26 addAttributedString:v25 withLanguage:v27];
    double v31 = [v26 lastAction];
    [v31 setObject:kCFBooleanTrue forVariant:59];

    double v32 = [v26 outputActions];
    [v32 enumerateObjectsUsingBlock:&stru_1001B4B30];

    [(VOTElementManager *)self sendRequest:v26];
    double v33 = +[VOTUserEventManager sharedInstance];
    [v33 userEventOccurred];

    self->_bookUpdatedCurrentLine = 0;
  }
}

- (void)_stopReadAll
{
  if (self->_flags.isReadingAll)
  {
    double v3 = +[VOTOutputManager outputManager];
    [v3 stopSpeakingAtBoundary:1];
    *(_WORD *)&self->_flags.isReadingAll = 0;
  }
  self->_shouldReadExplorerElementsAfterSpeechFinished = 0;
}

- (void)_handleReadAllNextElement
{
  id v7 = [(VOTElementManager *)self _copyMatchBlockAnyElement];
  fetchManager = self->_fetchManager;
  BOOL v4 = [(VOTElementManager *)self _currentElement];
  unint64_t elementSearchGeneration = self->_elementSearchGeneration;
  LOBYTE(v6) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
  -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:](fetchManager, "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:", 1, v4, v7, 0, 0, elementSearchGeneration, 0x7FFFFFFFLL, 0, v6);
}

- (BOOL)_prepareStitchedWebReadAll:(id)a3 request:(id)a4 setCurrentElement:(BOOL *)a5
{
  id v7 = a3;
  id v8 = a4;
  BOOL v9 = [v7 uiElement];
  [(id)VOTSharedWorkspace deviceOrientation];
  uint64_t v10 = AXReadAllUtilitiesElementsToCombineForReadAll();

  double v84 = +[NSMutableString string];
  id v11 = v7;
  id v82 = [objc_allocWithZone((Class)NSMutableArray) init];
  if ([v10 count] == (id)1)
  {
    id v12 = [v10 firstObject];
    id v13 = [v11 uiElement];
    unsigned __int8 v14 = [v12 isEqual:v13];

    if (v14)
    {
      BOOL v15 = 0;
      id v16 = v11;
      goto LABEL_43;
    }
  }
  v76 = self;
  double v80 = v8;
  CGFloat y = CGRectZero.origin.y;
  CGFloat width = CGRectZero.size.width;
  CGFloat height = CGRectZero.size.height;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  int v78 = v10;
  id obj = v10;
  id v20 = [obj countByEnumeratingWithState:&v89 objects:v94 count:16];
  id v79 = v11;
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v90;
    id v23 = &OBJC_IVAR___VOTHandwritingManager__allowedCharacterModes;
    uint64_t v83 = kAXLinkTrait;
    double v24 = height;
    double v25 = width;
    double v26 = y;
    double x = CGRectZero.origin.x;
    id v16 = v11;
    int64_t v28 = obj;
    do
    {
      unsigned int v29 = 0;
      id v30 = v16;
      do
      {
        if (*(void *)v90 != v22) {
          objc_enumerationMutation(v28);
        }
        id v16 = [v23 + 378 elementWithUIElement:*(void *)(*((void *)&v89 + 1) + 8 * (void)v29)];
        v95.origin.double x = CGRectZero.origin.x;
        v95.origin.CGFloat y = y;
        v95.size.CGFloat width = width;
        v95.size.CGFloat height = height;
        v97.origin.double x = x;
        v97.origin.CGFloat y = v26;
        v97.size.CGFloat width = v25;
        v97.size.CGFloat height = v24;
        BOOL v31 = CGRectEqualToRect(v95, v97);
        [v16 frame];
        double v36 = v32;
        double v37 = v33;
        double v38 = v34;
        double v39 = v35;
        if (!v31)
        {
          v96.origin.double x = x;
          v96.origin.CGFloat y = v26;
          v96.size.CGFloat width = v25;
          v96.size.CGFloat height = v24;
          *(CGRect *)&double v32 = CGRectUnion(v96, *(CGRect *)&v36);
        }
        double x = v32;
        double v26 = v33;
        double v25 = v34;
        double v24 = v35;
        double v40 = [v84 length];
        uint64_t v41 = [v16 label];
        [v84 appendFormat:@"%@ ", v41];

        if ([v16 doesHaveTraits:v83])
        {
          id v42 = v21;
          long long v43 = v23;
          uint64_t v44 = v22;
          long long v45 = +[AXSettings sharedInstance];
          unsigned __int8 v46 = [v45 voiceOverLinkFeedback];

          if ((v46 & 2) != 0)
          {
            id v48 = sub_100051804(off_1001EA9E8, @"element.link.text", @"link");
            id v47 = +[NSString stringWithFormat:@", %@, ", v48];
            [v84 appendString:v47];
            double v49 = [v84 length];
            int64_t v50 = v49 - (unsigned char *)[v47 length];
            id v51 = [v47 length];
            int64_t v52 = v50;
            int64_t v28 = obj;
            double v53 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", v52, v51);
            [v82 addObject:v53];
          }
          else
          {
            id v47 = +[NSValue valueWithRange:](NSValue, "valueWithRange:", v40, (unsigned char *)[v84 length] - v40);
            [v82 addObject:v47];
          }

          uint64_t v22 = v44;
          id v23 = v43;
          id v21 = v42;
        }

        unsigned int v29 = (char *)v29 + 1;
        id v30 = v16;
      }
      while (v21 != v29);
      id v21 = [v28 countByEnumeratingWithState:&v89 objects:v94 count:16];
    }
    while (v21);
  }
  else
  {
    double v24 = height;
    double v25 = width;
    double v26 = y;
    double x = CGRectZero.origin.x;
    id v16 = v11;
    int64_t v28 = obj;
  }

  id v11 = v79;
  id v8 = v80;
  if ([v84 length])
  {
    double v54 = +[AXSettings sharedInstance];
    unsigned __int8 v55 = [v54 voiceOverLinkFeedback];

    double v56 = +[AXSettings sharedInstance];
    unsigned __int8 v57 = [v56 voiceOverLinkFeedback];

    if (v55 & 8 | (unint64_t)(v57 & 4) && [v82 count])
    {
      double v58 = +[AXAttributedString axAttributedStringWithString:v84];
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      id v59 = v82;
      id v60 = [v59 countByEnumeratingWithState:&v85 objects:v93 count:16];
      if (!v60) {
        goto LABEL_35;
      }
      id v61 = v60;
      uint64_t v62 = *(void *)v86;
      while (1)
      {
        for (i = 0; i != v61; i = (char *)i + 1)
        {
          if (*(void *)v86 != v62) {
            objc_enumerationMutation(v59);
          }
          double v64 = *(void **)(*((void *)&v85 + 1) + 8 * i);
          if ((v55 & 8) != 0)
          {
            uint64_t v65 = UIAccessibilityTokenLowPitch;
            id v67 = [v64 rangeValue];
            double v68 = v58;
            CFBooleanRef v69 = kCFBooleanTrue;
          }
          else
          {
            if ((v57 & 4) == 0) {
              continue;
            }
            uint64_t v65 = UIAccessibilityTokenPlaySoundSimultaneously;
            id v67 = [v64 rangeValue];
            double v68 = v58;
            CFBooleanRef v69 = (CFBooleanRef)@"Sounds/LinkBegin.aiff";
          }
          objc_msgSend(v68, "setAttribute:forKey:withRange:", v69, v65, v67, v66);
        }
        id v61 = [v59 countByEnumeratingWithState:&v85 objects:v93 count:16];
        if (!v61)
        {
LABEL_35:

          double v70 = [v16 language];
          id v8 = v80;
          id v71 = [v80 addAttributedString:v58 withLanguage:v70];

          id v11 = v79;
          goto LABEL_37;
        }
      }
    }
    double v58 = [v16 language];
    id v72 = [v80 addString:v84 withLanguage:v58];
LABEL_37:
  }
  uint64_t v10 = v78;
  if (v16 != v11)
  {
    [(VOTElementManager *)v76 _setCurrentElement:v16];
    if (a5) {
      *a5 = 1;
    }
    double v73 = +[VOTDisplayManager displayManager];
    objc_msgSend(v73, "setCursorFrame:", x, v26, v25, v24);
  }
  CGFloat v74 = [v8 outputActions];
  BOOL v15 = [v74 count] != 0;

LABEL_43:
  return v15;
}

- (void)_continueReadAllWithElement:(id)a3 setCurrentElement:(BOOL *)a4
{
  id v6 = a3;
  if ([(id)VOTSharedWorkspace speechMuted])
  {
    self->_flags.lastScrollWasFromBraillePanning = 0;
  }
  else if ([v6 isReadingContent] && self->_flags.isReadingAllBook)
  {
    [(VOTElementManager *)self _handleMoreBookContentElements];
  }
  else
  {
    id v7 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    if (self->_flags.lastScrollWasFromBraillePanning)
    {
      self->_flags.lastScrollWasFromBraillePanning = 0;
    }
    else
    {
      self->_flags.isReadingAll = 1;
      objc_storeStrong((id *)&self->_readAllOutputRequest, v7);
      [v7 setCompletionDelegate:self];
    }
    uint64_t v8 = kAXWebContentTrait;
    if (![v6 doesHaveAllTraits:kAXStaticTextTrait | kAXWebContentTrait]
      || ![(VOTElementManager *)self _prepareStitchedWebReadAll:v6 request:v7 setCurrentElement:a4])
    {
      [(VOTElementManager *)self _prepareElementOutputHeaders:v6 currentElement:v6 request:v7];
      [(VOTElementManager *)self _addDescription:v6 toRequest:v7 withOptions:64];
      [(VOTElementManager *)self _setCurrentElement:v6];
      if (a4) {
        *a4 = 1;
      }
    }
    BOOL v9 = [v7 combinedActionString];
    id v10 = [v9 length];

    if (v10)
    {
      id v11 = +[VOTOutputManager outputManager];
      id v12 = +[VOSOutputEvent DidFocusOnElement];
      [v11 sendEvent:v12];
    }
    if (sub_100050E5C())
    {
      id v13 = [(VOTElementManager *)self _currentElement];
      unsigned __int8 v14 = [v6 touchContainer];
      BOOL v15 = [v13 touchContainer];
      id v16 = v15;
      if (!v14 && v15 || v14 && !v15 || v14 && v15 && ([v15 isEqual:v14] & 1) == 0)
      {
        [(VOTElementManager *)self _addDescription:v14 toRequest:v7 withOptions:1];
        if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
        {
          id v17 = [v7 lastAction];
          LODWORD(v18) = 1062836634;
          id v19 = +[NSNumber numberWithFloat:v18];
          [v17 setObject:v19 forVariant:32];
        }
      }
    }
    if ([v6 doesHaveTraits:v8])
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v20 = objc_msgSend(v7, "outputActions", 0);
      id v21 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v27;
        do
        {
          for (i = 0; i != v22; i = (char *)i + 1)
          {
            if (*(void *)v27 != v23) {
              objc_enumerationMutation(v20);
            }
            [*(id *)(*((void *)&v26 + 1) + 8 * i) setObject:kCFBooleanTrue forVariant:63];
          }
          id v22 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
        }
        while (v22);
      }
    }
    [(VOTElementManager *)self sendRequest:v7];
    double v25 = +[VOTUserEventManager sharedInstance];
    [v25 userEventOccurred];
  }
}

- (void)_handleReadScreenSummary:(id)a3
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  self->_flags.isReadingAll = 1;
  self->_explorerElementsNeedUpdate = 1;
  [(VOTElementManager *)self _updateExplorerElementsIfNeeded];
  id v5 = +[VOTExplorerElementManagerContext context];
  [v5 setUserInitiated:1];
  BOOL v4 = [(VOTElementManager *)self explorerElementManager];
  [v4 readAll:v5];
}

- (void)_handleReadAll:(id)a3
{
  id v7 = a3;
  if ([(id)VOTSharedWorkspace speechMuted])
  {
    BOOL v4 = +[VOTOutputManager outputManager];
    id v5 = +[VOSOutputEvent UnknownCommand];
    [v4 sendEvent:v5];
  }
  else
  {
    BOOL v4 = [(VOTElementManager *)self _currentElement];
    self->_flags.userInitiatedBooksScroll = 0;
    if ([v4 doesHaveTraits:kAXStatusBarElementTrait]
      && [(VOTElementManager *)self _shouldAllowSpeakThisGesture])
    {
      [(VOTElementManager *)self _handleSpeakScreen:v7];
    }
    else
    {
      [(VOTElementManager *)self setInitialReadAllElement:v4];
      if ([v4 isReadingContent])
      {
        [(VOTElementManager *)self _handleReadAllBookContent:v4 fromTop:0];
      }
      else
      {
        id v6 = [(VOTElementManager *)self _currentElement];
        [(VOTElementManager *)self _continueReadAllWithElement:v6 setCurrentElement:0];
      }
    }
  }
}

- (void)_handleCopySpeechToClipboard:(id)a3
{
  double v3 = +[VOTOutputRequest previousRequests];
  BOOL v4 = [v3 firstObject];

  id v5 = +[NSMutableString string];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v6 = [v4 outputActions];
  id v7 = [v6 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v22;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v22 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        if (![v11 component]
          && ([v11 isVoiceOverGeneratedContent] & 1) == 0)
        {
          id v12 = [v11 originalString];
          if ([v12 length])
          {
            if ([v5 length]) {
              [v5 appendString:@" "];
            }
            [v5 appendString:v12];
          }
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v8);
  }

  if ([v5 length])
  {
    id v13 = +[NSMutableDictionary dictionary];
    unsigned __int8 v14 = [UTTypeUTF8PlainText identifier];
    [v13 setObject:v5 forKey:v14];

    BOOL v15 = +[UIPasteboard generalPasteboard];
    double v25 = v13;
    id v16 = +[NSArray arrayWithObjects:&v25 count:1];
    [v15 setItems:v16];

    id v17 = [(id)VOTSharedWorkspace selectedLanguage];
    double v18 = sub_100051D04(off_1001EA9E8, @"copy.to.pasteboard", 0, v17);
    id v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v18, v5);

    id v20 = sub_10000ABF8(v19, 0, v17);
  }
}

- (void)_handleReadFromTop:(id)a3
{
  id v23 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v4 = [(VOTElementManager *)self _currentElement];
  if (![v4 isReadingContent])
  {
    long long v22 = [v4 application];
    id v8 = [v22 firstElementInApplicationForReadFromTop];
    if (([v4 readingContentCausesPageTurn] & 1) != 0
      || (id v9 = v8, [v4 includeDuringContentReading]))
    {
      id v9 = [(VOTElementManager *)self _nearestElementWithMatch:&stru_1001B4B78 startElement:v8];

      if (v9) {
        goto LABEL_13;
      }
      id v9 = v4;
    }
    if (!v9)
    {
      id v16 = +[VOTOutputManager outputManager];
      id v17 = +[VOSOutputEvent BoundaryEncountered];
      [v16 sendEvent:v17];

LABEL_30:
      goto LABEL_31;
    }
LABEL_13:
    if ([v22 isSafari])
    {
      uint64_t v10 = kAXWebContentTrait;
      if (([v9 doesHaveTraits:kAXWebContentTrait] & 1) == 0)
      {
        [v9 elementsInDirection:1 withCount:10];
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        id v11 = (id)objc_claimAutoreleasedReturnValue();
        id v12 = [v11 countByEnumeratingWithState:&v26 objects:v41 count:16];
        if (v12)
        {
          uint64_t v13 = *(void *)v27;
          while (2)
          {
            for (i = 0; i != v12; i = (char *)i + 1)
            {
              if (*(void *)v27 != v13) {
                objc_enumerationMutation(v11);
              }
              BOOL v15 = *(void **)(*((void *)&v26 + 1) + 8 * i);
              if ([v15 doesHaveTraits:v10])
              {
                id v18 = v15;

                id v9 = v18;
                goto LABEL_26;
              }
            }
            id v12 = [v11 countByEnumeratingWithState:&v26 objects:v41 count:16];
            if (v12) {
              continue;
            }
            break;
          }
        }
LABEL_26:
      }
    }
    if ([v9 shouldPlaySoundWhenFocused])
    {
      id v19 = +[VOTOutputManager outputManager];
      id v20 = +[VOSOutputEvent DidFocusOnElement];
      [v19 sendEvent:v20];
    }
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10006767C;
    v24[3] = &unk_1001B3448;
    v24[4] = self;
    id v25 = v9;
    id v21 = v9;
    [v21 scrollToElementForDirectional:1 withCompletion:v24];
    [(VOTElementManager *)self _setCurrentElement:v21];
    [(VOTElementManager *)self setInitialReadAllElement:v21];
    [(VOTElementManager *)self _continueReadAllWithElement:v21 setCurrentElement:0];

    goto LABEL_30;
  }
  uint64_t v35 = 0;
  double v36 = &v35;
  uint64_t v37 = 0x3032000000;
  double v38 = sub_100067578;
  double v39 = sub_100067588;
  id v40 = 0;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_100067590;
  v32[3] = &unk_1001B4B58;
  id v4 = v4;
  id v33 = v4;
  double v34 = &v35;
  id v5 = [(VOTElementManager *)self _nearestElementWithMatch:v32 startElement:v4 forward:0 itemCheckCount:30];
  id v6 = (void *)v36[5];
  if (v6)
  {
    id v7 = v6;

    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100067608;
    v30[3] = &unk_1001B3448;
    v30[4] = self;
    id v4 = v7;
    id v31 = v4;
    [v4 scrollToElementForDirectional:1 withCompletion:v30];
    [(VOTElementManager *)self _resetElementUnitIndexes];
    [(VOTElementManager *)self _setCurrentElement:v4];
  }
  [(VOTElementManager *)self _handleReadAllBookContent:v4 fromTop:1];

  _Block_object_dispose(&v35, 8);
LABEL_31:
}

- (void)_handleContinueSpeaking:(id)a3
{
  id v4 = +[VOTOutputManager outputManager];
  [v4 continueSpeaking];

  if (AXDeviceSupportsSonification())
  {
    if ([(VOTElement *)self->_currentElement supportsAudiographs])
    {
      id v5 = +[VOTAudiographManager sharedManager];
      unsigned int v6 = [v5 isPaused];

      if (v6)
      {
        id v7 = +[VOTAudiographManager sharedManager];
        [v7 play];
      }
    }
  }
}

- (void)_handlePauseSpeaking:(id)a3
{
  double v3 = +[VOTOutputManager outputManager];
  [v3 pauseSpeakingAtBoundary:0];

  if (AXDeviceSupportsSonification())
  {
    id v4 = +[VOTAudiographManager sharedManager];
    unsigned int v5 = [v4 isPlaying];

    if (v5)
    {
      id v6 = +[VOTAudiographManager sharedManager];
      [v6 pause];
    }
  }
}

- (void)_handleToggleSpeaking:(id)a3
{
  id v20 = a3;
  id v4 = +[VOTOutputManager outputManager];
  if ([v4 isSpeaking]) {
    HIDWORD(v18) = [v4 isPaused] ^ 1;
  }
  else {
    HIDWORD(v18) = 0;
  }
  if (AXDeviceSupportsSonification())
  {
    unsigned int v5 = +[VOTAudiographManager sharedManager];
    LODWORD(v18) = [v5 isPlaying];
  }
  else
  {
    LODWORD(v18) = 0;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v6 = self->_currentApplications;
  id v7 = [(NSArray *)v6 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v22;
    while (2)
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v22 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * i), "application", v18);
        id v12 = [v11 bundleIdentifier];
        unsigned __int8 v13 = [v12 isEqualToString:@"com.apple.Magnifier"];

        if (v13)
        {

          DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
          CFNotificationCenterPostNotification(DarwinNotifyCenter, @"MagnifierPauseSpeech", 0, 0, 1u);
          goto LABEL_17;
        }
      }
      id v8 = [(NSArray *)v6 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }

LABEL_17:
  BOOL v15 = +[AXSettings sharedInstance];
  unsigned int v16 = [v15 liveRecognitionActive];

  if (v16)
  {
    id v17 = +[VOTMagnifierService shared];
    [v17 stopSpeech];
  }
  if ((HIDWORD(v19) | v19) == 1) {
    [(VOTElementManager *)self _handlePauseSpeaking:v20];
  }
  else {
    [(VOTElementManager *)self _handleContinueSpeaking:v20];
  }
}

- (void)_handleCancelSpeaking:(id)a3
{
  id v3 = +[VOTOutputManager outputManager];
  [v3 stopSpeakingAtBoundary:0];
}

- (void)_endTextSearchMode
{
  self->_flags.inSearchTextMode = 0;
  unsigned int v2 = +[VOTKeyboardManager keyboardManager];
  [v2 setCaptureModeEnabled:0];

  id v3 = +[VOTTextSearchManager sharedManager];
  [v3 endTextSearchSession];

  id v4 = +[VOTBrailleManager manager];
  [v4 setTextSearchModeOn:0];

  id v5 = +[VOTBrailleManager manager];
  [v5 refreshBrailleLine];
}

- (void)_handleSearchTextEvent:(id)a3
{
  id v25 = a3;
  id v4 = [v25 keyInfo];
  if ([v4 keyDown] && objc_msgSend(v4, "keyCode") == 40)
  {
    if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXTextEntryTrait]
      && ([(VOTElement *)self->_currentElement value],
          id v5 = objc_claimAutoreleasedReturnValue(),
          id v6 = [v5 length],
          v5,
          v6))
    {
      id v7 = +[VOTTextSearchManager sharedManager];
      id v8 = [v7 currentSearchValue];

      uint64_t v9 = (char *)[(VOTElement *)self->_currentElement selectedTextRange];
      uint64_t v11 = v10;
      id v12 = [(VOTElement *)self->_currentElement value];
      unsigned __int8 v13 = v12;
      if (v9 == (char *)0x7FFFFFFF) {
        unsigned __int8 v14 = 0;
      }
      else {
        unsigned __int8 v14 = &v9[v11];
      }
      BOOL v15 = (char *)((unsigned char *)[v12 length] - v14);
      unsigned int v16 = +[NSLocale currentLocale];
      id v17 = objc_msgSend(v13, "rangeOfString:options:range:locale:", v8, 1, v14, v15, v16);

      if (v17 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXIsEditingTrait])
        {
          -[VOTElement setSelectedTextRange:refreshBraille:](self->_currentElement, "setSelectedTextRange:refreshBraille:", v17, 0, 1);
          [(VOTElementManager *)self _moveCursorForElement:self->_currentElement direction:1 unit:2];
        }
        else
        {
          self->_elementUnitOutputRange.id location = (NSUInteger)v17;
          self->_elementUnitOutputRange.NSUInteger length = 0;
          [(VOTElementManager *)self _outputNextTextSegmentUnit:2 direction:1];
        }
      }
      [(VOTElementManager *)self _endTextSearchMode];
    }
    else
    {
      self->_flags.performedSearch = 1;
      id v8 = [(VOTElementManager *)self _copyMatchBlockSearchText];
      fetchManager = self->_fetchManager;
      uint64_t v19 = [(VOTElementManager *)self _currentElement];
      unint64_t elementSearchGeneration = self->_elementSearchGeneration;
      id v21 = [(VOTElement *)self->_currentElement selectedTextRange];
      uint64_t v23 = v22;
      LOBYTE(v24) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
      -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:](fetchManager, "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:", 1, v19, v8, 0, 0, elementSearchGeneration, v21, v23, v24);

      [(VOTElementManager *)self _endTextSearchMode];
    }
  }
  else
  {
    id v8 = +[VOTTextSearchManager sharedManager];
    [v8 handleTextSearchEvent:v25];
  }
}

- (void)_outputCurrentElementRotor
{
  id v3 = [(VOTRotor *)self->_elementRotor generateRotorTypeRequest];
  [(VOTElementManager *)self _appendCurrentRotorValue:v3 forRotor:self->_elementRotor];
  [(VOTElementManager *)self _formatRequestForBrailleAlertConditional:v3];
  [v3 setCannotBeInterrupted:1];
  [v3 send];
}

- (void)_handleDescribeImage:(id)a3
{
  [(VOTElementManager *)self setPreviouslySpokenImageCaptionResults:0];
  id v7 = (id)objc_opt_new();
  [v7 setIncludeFullImageDescriptionsForAllElements:1];
  [v7 setIncludeSceneDetection:0];
  [v7 setUserCommandInitiated:1];
  id v4 = +[VOTOutputManager outputManager];
  [v4 stopSpeakingAtBoundary:0];

  id v5 = [(id)VOTSharedWorkspace visionEngine];
  id v6 = [(VOTElementManager *)self _currentElement];
  [v5 analyzeElement:v6 withOptions:v7];
}

- (void)_handleLaunchDetectionMode:(id)a3
{
  id v3 = +[VOTMagnifierService shared];
  [v3 toggleDetectionUI];
}

- (void)_handleDescribedMediaMode:(id)a3 direction:(int64_t)a4
{
  id v5 = +[AXSettings sharedInstance];
  unsigned __int8 v6 = [v5 voiceOverDescribedMedia];

  uint64_t v7 = v6 & 3;
  if ((v6 & 3) == 0)
  {
    if (a4 == 1) {
      goto LABEL_13;
    }
LABEL_9:
    a4 = 3;
    goto LABEL_13;
  }
  if (v7 == 2)
  {
    if (a4 != 1)
    {
      a4 = 1;
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (v7 == 1)
  {
    if (a4 == 1)
    {
LABEL_5:
      a4 = 2;
      goto LABEL_13;
    }
  }
  else if (a4 != 1)
  {
    goto LABEL_5;
  }
  a4 = 0;
LABEL_13:
  id v8 = +[AXSettings sharedInstance];
  [v8 setVoiceOverDescribedMedia:a4];

  id v11 = [(id)VOTSharedWorkspace selectedLanguage];
  uint64_t v9 = AXVoiceOverMediaDescriptionLocString();
  id v10 = sub_10000ABF8(v9, 0, v11);
}

- (void)_handleHintsSettingMode:(id)a3 direction:(int64_t)a4
{
  id v4 = +[AXSettings sharedInstance];
  unsigned int v5 = [v4 voiceOverHintsEnabled];

  unsigned __int8 v6 = +[AXSettings sharedInstance];
  [v6 setVoiceOverHintsEnabled:v5 ^ 1];

  uint64_t v7 = [(id)VOTSharedWorkspace selectedLanguage];
  id v11 = v7;
  if (v5) {
    id v8 = @"hints.disabled";
  }
  else {
    id v8 = @"hints.enabled";
  }
  uint64_t v9 = sub_100051D04(off_1001EA9E8, v8, 0, v7);
  id v10 = sub_10000ABF8(v9, 0, v11);
}

- (void)_handleDirectTouchExplorationMode:(id)a3 direction:(int64_t)a4
{
  id v19 = a3;
  id v5 = [(VOTElementManager *)self _appInfoForCurrentElement];
  uint64_t v7 = v6;
  if (!self->_directTouchApps)
  {
    id v8 = objc_opt_new();
    [(VOTElementManager *)self setDirectTouchApps:v8];
  }
  uint64_t v9 = [(id)VOTSharedWorkspace selectedLanguage];
  id v10 = [(NSMutableDictionary *)self->_directTouchApps objectForKeyedSubscript:v5];
  unsigned int v11 = [v10 BOOLValue];

  id v12 = +[NSNumber numberWithInt:v11 ^ 1];
  [(NSMutableDictionary *)self->_directTouchApps setObject:v12 forKeyedSubscript:v5];

  if (v11) {
    unsigned __int8 v13 = @"direct.touch.off.for.app";
  }
  else {
    unsigned __int8 v13 = @"direct.touch.on.for.app";
  }
  unsigned __int8 v14 = sub_100051D04(off_1001EA9E8, v13, 0, v9);
  BOOL v15 = AXCFormattedString();
  id v16 = sub_10000ABF8(v15, 0, v9);

  id v17 = [(VOTElementManager *)self directTouchApps];
  uint64_t v18 = +[AXSettings sharedInstance];
  [v18 setVoiceOverDirectTouchEnabledApps:v17];
}

- (BOOL)currentElementAllowsDirectTouch
{
  return self->_flags.currentElementAllowsDirectTouch;
}

- (BOOL)avoidAnnouncingDirectTouchArea
{
  return self->_flags.avoidAnnouncingDirectTouchArea;
}

- (void)setShouldTurnTrackingIntoDirectTouch:(BOOL)a3
{
  self->_flags.shouldTurnTrackingIntoDirectTouch = a3;
}

- (BOOL)shouldTurnTrackingIntoDirectTouch
{
  return self->_flags.shouldTurnTrackingIntoDirectTouch;
}

- (BOOL)inDirectTouchMode
{
  if (AXDeviceSupportsSonification())
  {
    id v3 = +[VOTAudiographManager sharedManager];
    unsigned __int8 v4 = [v3 isScrubbing];

    if (v4) {
      return 0;
    }
  }
  unsigned __int8 v6 = [(VOTElementManager *)self directTouchApps];
  id v7 = [(VOTElementManager *)self _appInfoForCurrentElement];
  uint64_t v9 = v8;
  id v10 = [v6 objectForKeyedSubscript:v7];
  unsigned __int8 v5 = [v10 BOOLValue];

  return v5;
}

- (void)_resetDirectInteractionCache
{
}

- (void)_systemServerDied
{
  [(VOTElementManager *)self _didDismissItemChooser];
  allElements = self->_allElements;
  self->_allElements = 0;
}

- (void)systemServerDied
{
}

- (void)_resetItemChooserCache
{
  if (!self->_flags.itemChooserVisible)
  {
    self->_allElements = 0;
    _objc_release_x1();
  }
}

- (void)_showItemChooser:(id)a3
{
  id v3 = a3;
  id v53 = objc_msgSend(objc_allocWithZone((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v3, "count"));
  id v52 = [objc_allocWithZone((Class)NSMutableArray) init];
  id v54 = [objc_allocWithZone((Class)NSMutableSet) init];
  id v51 = objc_msgSend(objc_allocWithZone((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v3, "count"));
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  id obj = v3;
  id v4 = [obj countByEnumeratingWithState:&v66 objects:v71 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v49 = *(void *)v67;
    uint64_t v47 = kAXButtonTrait;
    uint64_t v45 = kAXPopupButtonTrait | kAXTextAreaTrait | kAXToggleTrait | kAXRadioButtonTrait | kAXSearchFieldTrait | kAXTextEntryTrait | kAXButtonTrait;
    uint64_t v43 = kAXWebContentTrait;
    uint64_t v42 = kAXVisitedTrait;
    uint64_t v44 = kAXVisitedTrait | kAXLinkTrait;
    uint64_t v48 = kAXHeaderTrait;
    uint64_t v46 = kAXLinkTrait;
    uint64_t v41 = kAXLinkTrait | kAXHeaderTrait;
    uint64_t v6 = kAXSearchFieldTrait;
    uint64_t v7 = kAXTextEntryTrait | kAXSearchFieldTrait;
    uint64_t v8 = kAXImageTrait;
    uint64_t v9 = kAXStaticTextTrait;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v67 != v49) {
          objc_enumerationMutation(obj);
        }
        unsigned int v11 = *(void **)(*((void *)&v66 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          double v38 = v11;
          _AXAssert();
        }
        objc_msgSend(v11, "frame", v38);
        objc_msgSend(v11, "adaptFrameForSystemElement:");
        id v12 = NSStringFromCGRect(v72);
        [v51 addObject:v12];

        id v13 = [objc_allocWithZone((Class)NSMutableArray) init];
        unint64_t v14 = (unint64_t)[v11 traits];
        if ((v48 & v14) != 0) {
          [v13 addObject:&off_1001C51A0];
        }
        if ((v46 & v14) != 0) {
          [v13 addObject:&off_1001C51B8];
        }
        if ((v45 & v14) != 0 && (v43 & v14) != 0) {
          [v13 addObject:&off_1001C51D0];
        }
        if ((v44 & ~v14) == 0) {
          [v13 addObject:&off_1001C51E8];
        }
        if ((v46 & v14) != 0 && (v42 & v14) == 0) {
          [v13 addObject:&off_1001C5200];
        }
        if ((v8 & v14) != 0) {
          [v13 addObject:&off_1001C5218];
        }
        if ((v9 & v14) != 0 && (v41 & v14) == 0) {
          [v13 addObject:&off_1001C5230];
        }
        if ((v47 & v14) != 0) {
          [v13 addObject:&off_1001C5248];
        }
        if ((v7 & v14) != 0) {
          [v13 addObject:&off_1001C5260];
        }
        if ((v6 & v14) != 0) {
          [v13 addObject:&off_1001C5278];
        }
        [v52 addObject:v13];
        [v54 addObjectsFromArray:v13];
        BOOL v15 = [v11 itemChooserName];
        [v53 addObject:v15];
      }
      id v5 = [obj countByEnumeratingWithState:&v66 objects:v71 count:16];
    }
    while (v5);
  }

  id v16 = +[AXSettings sharedInstance];
  id v17 = [v16 voiceOverRotorItems];

  id v50 = [objc_allocWithZone((Class)NSMutableArray) init];
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id v18 = v17;
  id v19 = [v18 countByEnumeratingWithState:&v62 objects:v70 count:16];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = *(void *)v63;
    do
    {
      for (j = 0; j != v20; j = (char *)j + 1)
      {
        if (*(void *)v63 != v21) {
          objc_enumerationMutation(v18);
        }
        uint64_t v23 = *(void **)(*((void *)&v62 + 1) + 8 * (void)j);
        uint64_t v24 = [v23 objectForKey:@"Enabled"];
        unsigned int v25 = [v24 BOOLValue];

        if (v25)
        {
          long long v26 = [v23 objectForKey:@"RotorItem"];
          long long v27 = &off_1001C51B8;
          if ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemLink]) {
            goto LABEL_63;
          }
          long long v27 = &off_1001C51A0;
          if ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemHeader]) {
            goto LABEL_63;
          }
          long long v27 = &off_1001C51D0;
          if ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemFormElement]) {
            goto LABEL_63;
          }
          long long v27 = &off_1001C5290;
          if ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemTableStart]) {
            goto LABEL_63;
          }
          long long v27 = &off_1001C52A8;
          if ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemListStart]) {
            goto LABEL_63;
          }
          long long v27 = &off_1001C51E8;
          if (([v26 isEqualToString:kAXSVoiceOverTouchRotorItemVisitedLink] & 1) != 0
            || (long long v27 = &off_1001C5200,
                ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemNonVisitedLink] & 1) != 0)
            || (long long v27 = &off_1001C5218,
                ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemImage] & 1) != 0)
            || (long long v27 = &off_1001C5230,
                ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemStaticText] & 1) != 0)
            || (long long v27 = &off_1001C52C0,
                ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemLandmark] & 1) != 0)
            || (long long v27 = &off_1001C5248,
                ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemButton] & 1) != 0)
            || (long long v27 = &off_1001C5260,
                ([v26 isEqualToString:kAXSVoiceOverTouchRotorItemTextField] & 1) != 0)
            || (long long v27 = &off_1001C5278,
                [v26 isEqualToString:kAXSVoiceOverTouchRotorItemSearchField]))
          {
LABEL_63:
            if ([v54 containsObject:v27]) {
              [v50 addObject:v27];
            }
          }
        }
      }
      id v20 = [v18 countByEnumeratingWithState:&v62 objects:v70 count:16];
    }
    while (v20);
  }

  id v28 = [objc_allocWithZone((Class)NSMutableDictionary) init];
  [v28 setObject:v53 forKey:@"items"];
  [v28 setObject:v50 forKey:@"categories"];
  [v28 setObject:v52 forKey:@"mappings"];
  uint64_t v29 = [(VOTElementManager *)self lastItemChooserSearchTerm];
  id v30 = (void *)v29;
  if (v29) {
    CFStringRef v31 = (const __CFString *)v29;
  }
  else {
    CFStringRef v31 = &stru_1001B7888;
  }
  [v28 setObject:v31 forKey:@"searchTerm"];

  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_100068E24;
  v59[3] = &unk_1001B3448;
  id v32 = v28;
  id v60 = v32;
  id v61 = self;
  id v33 = objc_retainBlock(v59);
  double v34 = +[VOTDisplayManager displayManager];
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472;
  v55[2] = sub_100068E7C;
  v55[3] = &unk_1001B4BA0;
  id v56 = obj;
  id v57 = v32;
  id v58 = v33;
  uint64_t v35 = v33;
  id v36 = v32;
  id v37 = obj;
  [v34 convertFramesToCursorSpace:v51 displayID:&off_1001C52D8 completion:v55];
}

- (void)_elementsRetrieved:(id)a3 finished:(id)a4
{
  id v8 = a3;
  if ([a4 BOOLValue] && (unint64_t)objc_msgSend(v8, "count") <= 0x3E8)
  {
    sub_100053900(v8);
    uint64_t v6 = (NSArray *)objc_claimAutoreleasedReturnValue();
    allElements = self->_allElements;
    self->_allElements = v6;

    [(VOTElementManager *)self _showItemChooser:self->_allElements];
  }
}

- (void)elementsRetrieved:(id)a3 finished:(BOOL)a4
{
  elementManagerThread = self->_elementManagerThread;
  uint64_t v6 = &kCFBooleanFalse;
  if (a4) {
    uint64_t v6 = &kCFBooleanTrue;
  }
  -[SCRCThread performSelector:onTarget:count:objects:](elementManagerThread, "performSelector:onTarget:count:objects:", "_elementsRetrieved:finished:", self, 2, a3, *v6, 0);
}

- (id)_customActionIdentifier
{
  return self->_customActionIdentifier;
}

- (int64_t)_customActionIndex
{
  return self->_customActionIndex;
}

- (void)_handleMoveToLinkedUI:(id)a3
{
  id v4 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (([v4 isTouchEvent] & 1) == 0)
  {
    id v5 = [(VOTElementManager *)self _currentElement];
    uint64_t v6 = [v5 application];
    unsigned int v7 = [v6 webSearchResultsActive];

    if (v7)
    {
      if ([v5 doesHaveTraits:kAXWebContentTrait])
      {
        id v8 = [(VOTElement *)self->_currentElement application];
        uint64_t v9 = [v8 firstResponderElement];
        id v10 = [(VOTElementManager *)self _nearestElementWithMatch:&stru_1001B4BC0 startElement:v9];
        goto LABEL_10;
      }
      unsigned int v11 = [v5 identifier];
      unsigned int v12 = [v11 isEqualToString:@"SFFindOnPageBarIdentifier"];

      if (v12)
      {
        id v13 = [(VOTElement *)self->_currentElement application];
        unint64_t v14 = [v13 firstElementInApplicationForFocus];
        id v8 = [(VOTElementManager *)self _nearestWebElement:v14];

        uint64_t v9 = [v8 textMarkerRangeForSelection];
        BOOL v15 = [v9 firstObject];
        id v10 = [v8 elementForTextMarker:v15];

LABEL_10:
        if (v10) {
          goto LABEL_14;
        }
      }
    }
    id v16 = [v5 linkedUIElements];
    id v17 = VOTLogCommon();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      int v19 = 138412546;
      id v20 = v5;
      __int16 v21 = 2112;
      uint64_t v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Linked ui movement: %@ -> %@", (uint8_t *)&v19, 0x16u);
    }

    id v10 = [v16 firstObject];

    if (!v10)
    {
      id v10 = +[VOTOutputManager outputManager];
      id v18 = +[VOSOutputEvent BoundaryEncountered];
      [v10 sendEvent:v18];

      goto LABEL_16;
    }
LABEL_14:
    -[VOTElementManager _moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:](self, "_moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:", v10, [v10 shouldPlaySoundWhenFocused], 0, 0);
LABEL_16:
  }
}

- (void)_handleMoveToNativeFocusedElement:(id)a3
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
}

- (void)_handleItemChooserSelectionMade:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = +[VOTOutputManager outputManager];
    [v5 stopSpeakingAtBoundary:0];

    [(SCRCThread *)self->_elementManagerThread performSelector:"_notificationThreadCancel" onTarget:self cancelMask:1574144 count:0 objects:0];
    uint64_t v6 = [v4 objectForKey:@"row"];
    unsigned int v7 = [v4 objectForKey:@"activate"];
    unsigned __int8 v8 = [v7 BOOLValue];

    uint64_t v9 = [v4 objectForKey:@"searchTerm"];
    [(VOTElementManager *)self setLastItemChooserSearchTerm:v9];
    id v10 = [v6 integerValue];
    if ((unint64_t)v10 > 0x7FFFFFFFFFFFFFFELL
      || (id v11 = v10, v10 >= (id)[(NSArray *)self->_allElements count]))
    {
      unsigned int v12 = self->_previousItemChooserElement;
      int v13 = 1;
    }
    else
    {
      unsigned int v12 = [(NSArray *)self->_allElements objectAtIndex:v11];
      int v13 = 0;
    }
    unint64_t v14 = +[VOTElement springBoardApplication];
    unsigned __int8 v15 = [v14 isSystemSleeping];

    if ((v15 & 1) == 0)
    {
      id v16 = +[VOTOutputManager outputManager];
      id v17 = +[VOSOutputEvent ScreenDidChange];
      [v16 sendEvent:v17];
    }
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100069700;
    v23[3] = &unk_1001B4040;
    v23[4] = self;
    id v18 = v12;
    uint64_t v24 = v18;
    unsigned __int8 v25 = v8;
    [(VOTElement *)v18 scrollToElementForDirectional:1 withCompletion:v23];
    if ((v8 & 1) == 0)
    {
      if (v13)
      {
        int v19 = [(id)VOTSharedWorkspace selectedLanguage];
        id v20 = sub_100051D04(off_1001EA9E8, @"closing.item.chooser", 0, v19);
        id v21 = sub_10000ABF8(v20, 0, v19);

        [(VOTElementManager *)self _setCurrentElement:v18];
      }
      else
      {
        [(VOTElementManager *)self _echoDifferentElement:v18 forEvent:0];
      }
    }
    previousItemChooserElement = self->_previousItemChooserElement;
    self->_previousItemChooserElement = 0;

    [(VOTElementManager *)self _didDismissItemChooser];
    self->_flags.focusIsOnElement = 1;
  }
}

- (void)_closeItemChooser
{
  if (self->_flags.itemChooserVisible)
  {
    id v3 = +[VOTItemChooserAdapter sharedInstance];
    [v3 showItemChooser:0 withItems:0];

    [(VOTElementManager *)self _didDismissItemChooser];
  }
}

- (void)_didDismissItemChooser
{
  self->_flags.itemChooserVisible = 0;
}

- (void)_handleItemChooserSelection:(id)a3
{
  if (!self->_flags.itemChooserVisible)
  {
    id v4 = +[AXSettings sharedInstance];
    unsigned int v5 = [v4 securePayAssertionActive];

    if (v5)
    {
      uint64_t v6 = AXLogAssertions();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Not processing item chooser because secure pay mode active", buf, 2u);
      }
    }
    else
    {
      unsigned int v7 = +[VOTElement springBoardApplication];
      int v8 = [v7 isSystemLocked];

      if ((v8 & 1) == 0)
      {
        uint64_t v9 = [(VOTElementManager *)self _currentElement];
        id v10 = (VOTElement *)[v9 copyWithZone:0];
        previousItemChooserElement = self->_previousItemChooserElement;
        self->_previousItemChooserElement = v10;

        if ([(NSArray *)self->_allElements count])
        {
          allElements = self->_allElements;
          [(VOTElementManager *)self _showItemChooser:allElements];
        }
        else
        {
          fetchManager = self->_fetchManager;
          id v14 = [(VOTElementManager *)self _currentElement];
          -[VOTElementFetcher retrieveElementsWithElement:groupNavigationStyle:](fetchManager, "retrieveElementsWithElement:groupNavigationStyle:", v14, [(id)VOTSharedWorkspace navigationStyleHonorsGroups]);
        }
      }
    }
  }
}

- (BOOL)isItemChooserVisible
{
  return self->_flags.itemChooserVisible;
}

- (void)_handleOngoingTextSearch:(id)a3
{
  id v4 = [a3 command];
  if ([v4 isEqualToString:kVOTEventCommandTextSearchForward]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }

  self->_flags.performedSearch = 1;
  id v13 = [(VOTElementManager *)self _copyMatchBlockSearchText];
  fetchManager = self->_fetchManager;
  unsigned int v7 = [(VOTElementManager *)self _currentElement];
  unint64_t elementSearchGeneration = self->_elementSearchGeneration;
  id v9 = [(VOTElement *)self->_currentElement selectedTextRange];
  uint64_t v11 = v10;
  LOBYTE(v12) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
  -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:](fetchManager, "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:", v5, v7, v13, 0, 0, elementSearchGeneration, v9, v11, v12);
}

- (void)_handleStartTextSearch:(id)a3
{
  if (!self->_flags.inSearchTextMode)
  {
    self->_flags.inSearchTextMode = 1;
    id v9 = +[VOTTextSearchManager sharedManager];
    id v3 = +[VOTBrailleManager manager];
    [v9 setBrailleManager:v3];

    [v9 beginNewTextSearchSession];
    id v4 = +[VOTKeyboardManager keyboardManager];
    [v4 setCaptureModeEnabled:1];

    uint64_t v5 = +[VOTBrailleManager manager];
    [v5 setTextSearchModeOn:1];

    uint64_t v6 = [(id)VOTSharedWorkspace selectedLanguage];
    unsigned int v7 = sub_100051D04(off_1001EA9E8, @"enter.search.text.mode", 0, v6);
    id v8 = sub_10000ABF8(v7, 0, v6);
  }
}

- (void)updateRotorForCurrentElement:(BOOL)a3 completion:(id)a4
{
  BOOL v4 = a3;
  elementManagerThread = self->_elementManagerThread;
  id v7 = a4;
  id v9 = +[NSNumber numberWithBool:v4];
  id v8 = _Block_copy(v7);

  -[SCRCThread performSelector:onTarget:count:objects:](elementManagerThread, "performSelector:onTarget:count:objects:", "_updateRotorForCurrentElement:completion:", self, 2, v9, v8, 0);
}

- (void)_updateRotorForCurrentElement:(id)a3 completion:(id)a4
{
  id v13 = a3;
  uint64_t v6 = (void (**)(void))a4;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if ([v13 BOOLValue]) {
    [(VOTElementRotor *)self->_elementRotor _updateWebRotorItems];
  }
  id v7 = [(VOTElementManager *)self _currentElement];
  if (!v7) {
    id v7 = self->_touchContainer;
  }
  int64_t v8 = [(VOTElementManager *)self lastElementChangeAction];
  uint64_t v9 = v8 == 1;
  if ((id)[(VOTElementManager *)self lastElementChangeAction] == (id)2
    && (id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)37)
  {
    uint64_t v10 = [(VOTElement *)v7 containerTypes];
    unsigned int v11 = [v10 containsObject:&off_1001C52F0];

    if (v8 == 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v11;
    }
  }
  [(VOTElementRotor *)self->_elementRotor updateRotorForElement:v7 shouldPreserveRotorNavigation:v9 firstResponder:self->_firstResponderElement];
  currentPublicCustomRotorItemResult = self->_currentPublicCustomRotorItemResult;
  self->_currentPublicCustomRotorItemResult = 0;

  self->_lastSeenApplicationOrientation = (int64_t)[(id)VOTSharedWorkspace applicationOrientation];
  self->_flags.shouldUpdateRotorForElement = 0;
  if (v6) {
    v6[2](v6);
  }
}

- (void)_updateRotorForCurrentElement
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }

  [(VOTElementManager *)self _updateRotorForCurrentElement:0 completion:0];
}

- (void)_handleSearchRotorEcho:(id)a3
{
  [(VOTElementManager *)self _updateRotorForCurrentElement];
  id v4 = [(VOTRotor *)self->_elementRotor generateRotorTypeRequest];
  [(VOTElementManager *)self _appendCurrentRotorValue:v4 forRotor:self->_elementRotor];
  [v4 setGeneratesBraille:1];
  [v4 setBrailleType:1];
  [v4 send];
}

- (double)rotorRate
{
  uint64_t v10 = 0;
  unsigned int v11 = (double *)&v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  id v3 = [(id)VOTSharedWorkspace votSettings];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100069FD8;
  v7[3] = &unk_1001B4BE8;
  uint64_t v9 = &v10;
  id v4 = v2;
  int64_t v8 = v4;
  [v3 rotorRateWithCompletionHandler:v7];

  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  double v5 = v11[3];

  _Block_object_dispose(&v10, 8);
  return v5;
}

- (void)_appendCurrentRotorValue:(id)a3 forRotor:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  [(id)VOTSharedWorkspace selectedLanguage];
  v100[0] = _NSConcreteStackBlock;
  v100[1] = 3221225472;
  v100[2] = sub_10006ACBC;
  v100[3] = &unk_1001B4C10;
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v101 = v8;
  uint64_t v9 = objc_retainBlock(v100);
  id v10 = [v7 currentRotorType];
  switch((unint64_t)v10)
  {
    case '7':
      unsigned int v11 = [(VOTElementManager *)self _currentCustomActions];
      uint64_t v12 = v11;
      customActionIndedouble x = self->_customActionIndex;
      if (customActionIndex == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v14 = [(VOTElementManager *)self _customActionDefaultActionString];
        goto LABEL_62;
      }
      if (customActionIndex >= (unint64_t)[(__CFString *)v11 count]) {
        goto LABEL_66;
      }
      id v16 = [(__CFString *)v12 objectAtIndex:customActionIndex];
      id v20 = [(__CFString *)v16 name];
      id v81 = [v6 addString:v20];
      goto LABEL_59;
    case '8':
    case '9':
    case ':':
    case ';':
    case '=':
    case '>':
    case '?':
    case 'A':
    case 'B':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Z':
    case ']':
    case '_':
      goto LABEL_67;
    case '<':
      uint64_t v15 = ((void (*)(void *, id))v9[2])(v9, [(id)VOTSharedWorkspace hintsEnabled]);
      goto LABEL_30;
    case '@':
      uint64_t v12 = +[AXSettings sharedInstance];
      [(__CFString *)v12 voiceOverDescribedMedia];
      uint64_t v14 = AXVoiceOverMediaDescriptionLocString();
      goto LABEL_62;
    case 'C':
      id v16 = (__CFString *)[(VOTElementManager *)self _appInfoForCurrentElement];
      uint64_t v12 = v22;
      uint64_t v23 = +[AXSettings sharedInstance];
      id v24 = [v23 automaticAccessibilityModeForBundleIdentifier:v16];

      ((void (*)(void *, BOOL))v9[2])(v9, v24 == (id)1);
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      id v25 = [v6 addString:v20 withLanguage:v8];
      goto LABEL_59;
    case 'D':
      id v16 = (__CFString *)[(VOTElementManager *)self _appInfoForCurrentElement];
      uint64_t v12 = v26;
      long long v27 = +[AXSettings sharedInstance];
      id v28 = [v27 imageCaptioningDisabledApps];
      id v20 = [v28 mutableCopy];

      uint64_t v29 = ((void (*)(void *, void))v9[2])(v9, [v20 containsObject:v16] ^ 1);
      id v30 = [v6 addString:v29 withLanguage:v8];

      goto LABEL_59;
    case 'E':
      CFStringRef v31 = off_1001EA9E8;
      id v32 = +[AXSettings sharedInstance];
      if ([v32 voiceOverNavigationStyle] == (id)1) {
        id v33 = @"NAVIGATION_STYLE_GROUPS";
      }
      else {
        id v33 = @"NAVIGATION_STYLE_FLAT";
      }
      sub_100051D04(v31, v33, 0, v8);
      uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue();

      goto LABEL_31;
    case 'Q':
      uint64_t v12 = +[AXSettings sharedInstance];
      [(__CFString *)v12 voiceOverEffectiveSpeakingVolume];
      AXFormatFloatWithPercentage();
      id v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
      double v34 = v6;
      uint64_t v35 = v16;
      goto LABEL_74;
    case 'R':
      [(VOTElementManager *)self rotorRate];
      uint64_t v36 = AXFormatFloatWithPercentage();
LABEL_53:
      uint64_t v12 = (__CFString *)v36;
      id v80 = [v6 addString:v36];
      goto LABEL_66;
    case 'S':
      uint64_t v15 = [(VOTElementManager *)self _typingEchoString];
      goto LABEL_30;
    case 'T':
      uint64_t v15 = [(VOTElementManager *)self _speechPhoneticsString];
      goto LABEL_30;
    case 'U':
      uint64_t v12 = +[AXSettings sharedInstance];
      id v37 = [(__CFString *)v12 voiceOverPitchChangeEnabled];
      goto LABEL_61;
    case 'V':
      double v38 = +[AXSettings sharedInstance];
      id v16 = [v38 voiceOverPunctuationGroup];

      if (v16)
      {
        double v39 = [(id)VOTSharedWorkspace punctuationGroups];
        v96[0] = _NSConcreteStackBlock;
        v96[1] = 3221225472;
        v96[2] = sub_10006AD34;
        v96[3] = &unk_1001B45B0;
        CGRect v97 = v16;
        id v40 = [v39 indexOfObjectPassingTest:v96];
        if (v40 == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v12 = 0;
        }
        else
        {
          long long v85 = [v39 objectAtIndexedSubscript:v40];
          uint64_t v12 = [v85 name];
        }
      }
      else
      {
        double v39 = [(id)VOTSharedWorkspace defaultPunctuationGroup];
        uint64_t v12 = [v39 name];
      }

      double v34 = v6;
      uint64_t v35 = v12;
LABEL_74:
      id v86 = [v34 addString:v35];
      goto LABEL_65;
    case 'W':
      uint64_t v12 = +[AXSettings sharedInstance];
      id v37 = [(__CFString *)v12 voiceOverSoundEffectsEnabled];
      goto LABEL_61;
    case 'X':
      if (AXRuntimeCheck_SupportsVoiceoverIndepedentVolume())
      {
        uint64_t v41 = off_1001EA9E8;
        uint64_t v12 = [(VOTElementManager *)self _audioDuckingModeString];
        uint64_t v42 = v41;
        uint64_t v43 = v12;
LABEL_35:
        uint64_t v14 = sub_100051D04(v42, v43, 0, v8);
      }
      else
      {
        uint64_t v12 = +[AXSettings sharedInstance];
        id v37 = [(__CFString *)v12 voiceOverAudioDuckingEnabled];
LABEL_61:
        uint64_t v14 = ((void (*)(void *, id))v9[2])(v9, v37);
      }
LABEL_62:
      id v16 = (__CFString *)v14;
LABEL_63:
      v77 = v6;
      int v78 = v16;
      id v79 = v8;
LABEL_64:
      id v82 = objc_msgSend(v77, "addString:withLanguage:", v78, v79, *(void *)&v94);
LABEL_65:

LABEL_66:
LABEL_67:

      return;
    case 'Y':
      if (!AXRuntimeCheck_SupportsVoiceoverIndepedentVolume()) {
        goto LABEL_67;
      }
      uint64_t v44 = +[AXSettings sharedInstance];
      [v44 voiceOverMediaDuckingAmount];
      double v46 = v45;

      sub_100051D04(off_1001EA9E8, @"ducking.amount.short", 0, v8);
      uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
      double v94 = v46 * 100.0;
      uint64_t v14 = AXCFormattedString();
      goto LABEL_62;
    case '[':
      uint64_t v15 = -[VOTElementManager _navigationDirectionModeString:](self, "_navigationDirectionModeString:", [(id)VOTSharedWorkspace navigationDirection]);
LABEL_30:
      uint64_t v12 = (__CFString *)v15;
LABEL_31:
      uint64_t v47 = v6;
      uint64_t v48 = v12;
      id v49 = v8;
LABEL_32:
      id v50 = [v47 addString:v48 withLanguage:v49];
      goto LABEL_66;
    case '\\':
      uint64_t v12 = [(id)VOTSharedWorkspace selectedActivity];
      id v16 = [(__CFString *)v12 name];
      if (v16) {
        goto LABEL_63;
      }
      uint64_t v42 = off_1001EA9E8;
      uint64_t v43 = @"no.activity.selected";
      goto LABEL_35;
    case '^':
      id v51 = [(id)VOTSharedWorkspace currentRotorDetectionMode];
      AXLocalizedNameForDetectionMode();
      uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
      id v52 = [v6 addString:v12 withLanguage:v8];
      id v53 = +[AXSettings sharedInstance];
      id v54 = [v53 enabledLiveRecognitionModes];
      unsigned __int8 v55 = +[NSNumber numberWithUnsignedInt:v51];
      id v56 = ((void (*)(void *, id))v9[2])(v9, [v54 containsObject:v55]);
      id v57 = [v6 addString:v56 withLanguage:v8];

      goto LABEL_66;
      id v58 = [(VOTElementManager *)self _appInfoForCurrentElement];
      uint64_t v12 = v59;
      id v16 = (__CFString *)v58;
      id v60 = [(VOTElement *)self->_currentElement webAreaURL];
      id v61 = [v60 host];

      long long v62 = v16;
      if ([v61 length])
      {
        long long v62 = v61;
      }
      long long v63 = +[AXSettings sharedInstance];
      long long v64 = [v63 liveRegionStatusForWebOrApp:v62];

      if (v64) {
        uint64_t v65 = (uint64_t)[v64 BOOLValue];
      }
      else {
        uint64_t v65 = 1;
      }
      uint64_t v83 = ((void (*)(void *, uint64_t))v9[2])(v9, v65);
      id v84 = [v6 addString:v83 withLanguage:v8];

      goto LABEL_65;
    default:
      switch((unint64_t)v10)
      {
        case 0x14uLL:
          uint64_t v15 = [(VOTElementManager *)self _localizedTypingModeStringForCurrentMode];
          goto LABEL_30;
        case 0x15uLL:
          uint64_t v12 = +[VOSSettingsHelper sharedInstance];
          id v37 = [(__CFString *)v12 isSlideToTypeEnabled];
          goto LABEL_61;
        case 0x16uLL:
        case 0x1BuLL:
        case 0x1CuLL:
        case 0x1DuLL:
        case 0x1EuLL:
        case 0x1FuLL:
          goto LABEL_67;
        case 0x17uLL:
          uint64_t v12 = [(id)VOTSharedWorkspace selectedLanguage];
          long long v66 = +[AXSettings sharedInstance];
          long long v67 = [v66 voiceOverVoiceRotors];

          long long v68 = +[AXSettings sharedInstance];
          long long v69 = [v68 voiceOverCurrentRotorVoiceIdentifier];

          if (!v69
            || ([v69 isEqualToString:&stru_1001B7888] & 1) != 0
            || (v98[0] = _NSConcreteStackBlock,
                v98[1] = 3221225472,
                v98[2] = sub_10006ACF0,
                v98[3] = &unk_1001B4C38,
                id v99 = v69,
                id v70 = [v67 indexOfObjectPassingTest:v98],
                v99,
                v70 == (id)0x7FFFFFFFFFFFFFFFLL))
          {
            id v71 = sub_100051804(off_1001EA9E8, @"voice.primary.suffix", 0);
          }
          else
          {
            CGRect v95 = [v67 objectAtIndexedSubscript:v70];
            long long v87 = [v95 identifier];
            long long v88 = +[AXSettings sharedInstance];
            [v88 setVoiceOverCurrentRotorVoiceIdentifier:v87];

            long long v89 = [v67 objectAtIndexedSubscript:v70];
            long long v90 = [v89 userDefinedName];

            long long v91 = [v67 objectAtIndexedSubscript:v70];
            long long v92 = v91;
            if (v90)
            {
              id v71 = [v91 userDefinedName];
            }
            else
            {
              v93 = [v91 voiceId];
              id v71 = AXVoiceNameForVoiceId();
            }
          }
          CGRect v72 = sub_100051804(off_1001EA9E8, @"voice.current.suffix", 0);
          double v73 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v72, v71);
          id v74 = [v6 addString:v73 withLanguage:v12];

          goto LABEL_66;
        case 0x18uLL:
          uint64_t v75 = [(id)VOTSharedWorkspace selectedBrailleTable];
          goto LABEL_49;
        case 0x19uLL:
          uint64_t v75 = [(id)VOTSharedWorkspace selectedBrailleInputTable];
LABEL_49:
          uint64_t v12 = (__CFString *)v75;
          v76 = +[VOTBrailleManager manager];
          id v16 = [v76 nameForSpokenAnnouncementOfBrailleTable:v12];

          if (!v16)
          {
            sub_100051804(off_1001EA9E8, @"default.action.suffix", 0);
            id v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          v77 = v6;
          int v78 = v16;
          id v79 = 0;
          goto LABEL_64;
        case 0x1AuLL:
          uint64_t v36 = [(VOTElementManager *)self _brailleAutoAdvanceSpeedString];
          goto LABEL_53;
        case 0x20uLL:
          uint64_t v12 = [(VOTElementManager *)self _localizedStringForCurrentBrailleTextMode];
          if (!v12)
          {
            sub_100051804(off_1001EA9E8, @"default.action.suffix", 0);
            uint64_t v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
          }
          uint64_t v47 = v6;
          uint64_t v48 = v12;
          id v49 = 0;
          goto LABEL_32;
        default:
          if (v10 != (id)43) {
            goto LABEL_67;
          }
          id v16 = (__CFString *)[(VOTElementManager *)self _appInfoForCurrentElement];
          uint64_t v12 = v17;
          id v18 = [(NSMutableDictionary *)self->_directTouchApps objectForKeyedSubscript:v16];
          id v19 = [v18 BOOLValue];

          ((void (*)(void *, id))v9[2])(v9, v19);
          id v20 = (id)objc_claimAutoreleasedReturnValue();
          id v21 = [v6 addString:v20 withLanguage:v8];
          break;
      }
LABEL_59:

      goto LABEL_65;
  }
}

- (int64_t)currentRotorType
{
  return [(VOTRotor *)self->_elementRotor currentRotorType];
}

- (void)setCurrentTextSelectionSegmentType:(int64_t)a3
{
  id v4 = [(VOTElementManager *)self textSelectionMovementManager];
  [v4 setSegment:a3];
}

- (void)setRotor:(id)a3 toType:(int64_t)a4 saveToPreferences:(BOOL)a5 userInitiated:(BOOL)a6
{
}

- (BOOL)_inMisspelledWordRotor
{
  return [(VOTRotor *)self->_elementRotor inMisspelledWordRotor];
}

- (void)setElementRotorToType:(int64_t)a3 saveToPreferences:(BOOL)a4 userInitiated:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  if (self->_inUnitTestingMode)
  {
    -[VOTElementManager _setElementRotorToType:saveToPreferences:userInitiated:](self, "_setElementRotorToType:saveToPreferences:userInitiated:", a3);
  }
  else
  {
    elementManagerThread = self->_elementManagerThread;
    id v11 = +[NSNumber numberWithInteger:a3];
    uint64_t v9 = +[NSNumber numberWithBool:v6];
    id v10 = +[NSNumber numberWithBool:v5];
    -[SCRCThread performSelector:onTarget:count:objects:](elementManagerThread, "performSelector:onTarget:count:objects:", "_setElementRotorToNumberType:saveToNumberPreferences:numberUserInitiated:", self, 3, v11, v9, v10, 0);
  }
}

- (void)_setElementRotorToNumberType:(id)a3 saveToNumberPreferences:(id)a4 numberUserInitiated:(id)a5
{
  id v8 = a5;
  id v9 = a4;
  id v10 = [a3 integerValue];
  id v11 = [v9 BOOLValue];

  id v12 = [v8 BOOLValue];

  [(VOTElementManager *)self _setElementRotorToType:v10 saveToPreferences:v11 userInitiated:v12];
}

- (void)_setElementRotorToType:(int64_t)a3 saveToPreferences:(BOOL)a4 userInitiated:(BOOL)a5
{
  [(VOTRotor *)self->_elementRotor setCurrentRotorType:a3 saveToPreferences:a4 userInitiated:a5];
  if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)6) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = [(VOTElementManager *)self _inMisspelledWordRotor];
  }
  self->_inTextProcessingRotorMode = v6;
}

- (BOOL)forceRotorOffGesturedTextInputIfNeeded:(BOOL)a3
{
  BOOL v3 = a3;
  int64_t v5 = [(VOTRotor *)self->_elementRotor currentRotorType];
  if (!sub_1000F2B98([(VOTRotor *)self->_elementRotor currentRotorType])) {
    return 0;
  }
  do
  {
    [(VOTElementManager *)self _handleSearchRotorDirection:2 event:0 notifyUser:v3];
    int64_t v6 = [(VOTRotor *)self->_elementRotor currentRotorType];
    BOOL v7 = v5 != v6;
  }
  while (v5 != v6 && sub_1000F2B98([(VOTRotor *)self->_elementRotor currentRotorType]));
  return v7;
}

- (int)cancelElementCountOutput
{
  return atomic_fetch_add(&self->_countOutputBlockGeneration, 1u) + 1;
}

- (void)elementsCounted:(int64_t)a3
{
  int64_t v5 = [(id)VOTSharedWorkspace selectedLanguage];
  switch([(VOTElementManager *)self currentRotorType])
  {
    case 8:
      CFStringRef v6 = @"header.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"header.count.high";
      goto LABEL_18;
    case 9:
      CFStringRef v6 = @"link.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"link.count.high";
      goto LABEL_18;
    case 0xALL:
      CFStringRef v6 = @"formelement.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"formelement.count.high";
      goto LABEL_18;
    case 0xBLL:
      CFStringRef v6 = @"table.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"table.count.high";
      goto LABEL_18;
    case 0xCLL:
      CFStringRef v6 = @"frame.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"frame.count.high";
      goto LABEL_18;
    case 0xDLL:
      CFStringRef v6 = @"list.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"list.count.high";
      goto LABEL_18;
    case 0xELL:
      CFStringRef v6 = @"visitedlink.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"visitedlink.count.high";
      goto LABEL_18;
    case 0xFLL:
      CFStringRef v6 = @"nonvisited.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"nonvisited.count.high";
      goto LABEL_18;
    case 0x10:
      CFStringRef v6 = @"image.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"image.count.high";
      goto LABEL_18;
    case 0x21:
      CFStringRef v6 = @"landmark.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"landmark.count.high";
      goto LABEL_18;
    case 0x22:
      CFStringRef v6 = @"article.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"article.count.high";
      goto LABEL_18;
    case 0x23:
      CFStringRef v6 = @"button.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"button.count.high";
      goto LABEL_18;
    case 0x24:
      CFStringRef v6 = @"textfield.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"textfield.count.high";
      goto LABEL_18;
    case 0x28:
      CFStringRef v6 = @"searchfield.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"searchfield.count.high";
      goto LABEL_18;
    case 0x29:
      CFStringRef v6 = @"radiobutton.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"radiobutton.count.high";
      goto LABEL_18;
    case 0x2ALL:
      CFStringRef v6 = @"checkbox.count";
      BOOL v7 = off_1001EA9E8;
      CFStringRef v8 = @"checkbox.count.high";
LABEL_18:
      if (a3 == 0x7FFFFFFFFFFFFFFFLL) {
        id v9 = (__CFString *)v8;
      }
      else {
        id v9 = (__CFString *)v6;
      }
      id v10 = sub_100051D04(v7, v9, 0, v5);
      id v11 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v10, a3);

      if (v11)
      {
        CFAbsoluteTimeGetCurrent();
        if (a3 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v14 = AXFormatInteger();
          uint64_t v12 = AXCFormattedString();

          id v11 = (void *)v12;
        }
        [(VOTElementManager *)self cancelElementCountOutput];
        id v15 = v5;
        id v13 = v11;
        AXPerformBlockOnMainThreadAfterDelay();
      }
      break;
    default:
      break;
  }
}

- (BOOL)_rotorTypeSupportsCounting:(int64_t)a3
{
  return ((unint64_t)a3 < 0x2B) & (0x71A0001FF00uLL >> a3);
}

- (id)webEditableAncestor:(id)a3
{
  id v3 = a3;
  uint64_t v4 = kAXWebContentTrait;
  if ([v3 doesHaveTraits:kAXWebContentTrait])
  {
    int64_t v5 = [v3 directParent];
    if (!v5) {
      goto LABEL_9;
    }
    uint64_t v6 = kAXIsEditingTrait;
    do
    {
      if (![v5 doesHaveTraits:v4]) {
        break;
      }
      if ([v5 doesHaveTraits:v6]) {
        goto LABEL_9;
      }
      uint64_t v7 = [v5 directParent];

      int64_t v5 = (void *)v7;
    }
    while (v7);
  }
  int64_t v5 = 0;
LABEL_9:

  return v5;
}

- (void)setCurrentElementToWebEditableAncestor
{
  if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXWebContentTrait]
    && ![(VOTElement *)self->_currentElement doesHaveTraits:kAXIsEditingTrait])
  {
    uint64_t v3 = [(VOTElementManager *)self webEditableAncestor:self->_currentElement];
    if (v3) {
      [(VOTElementManager *)self _setCurrentElement:v3];
    }
    _objc_release_x1();
  }
}

- (void)_outputRotorTypeCount
{
  [(VOTElementManager *)self cancelElementCountOutput];
  qword_1001EB970 = CFAbsoluteTimeGetCurrent();
  int64_t v3 = [(VOTRotor *)self->_elementRotor currentRotorType];
  uint64_t v4 = [(VOTElementManager *)self _currentElement];
  unsigned int v5 = [(VOTElementManager *)self _rotorTypeSupportsCounting:v3];
  uint64_t v6 = [v4 application];
  unsigned __int8 v7 = [v6 isSafari];
  if (v5)
  {
    if ((v7 & 1) != 0 || [v6 isGoogleChrome])
    {
      uint64_t v9 = 0;
      CFStringRef v8 = [(VOTElementManager *)self _copyMatchBlockForRotorType:v3 searchType:&v9];
      [(VOTElementFetcher *)self->_fetchManager cancelPreviousCount];
      [(VOTElementFetcher *)self->_fetchManager countElementsMatchingBlock:v8];
    }
  }
  else if ((v7 & 1) != 0 || [v6 isGoogleChrome])
  {
    [(VOTElementFetcher *)self->_fetchManager cancelPreviousCount];
  }
}

- (void)_handleSearchRotorDirection:(int64_t)a3 event:(id)a4
{
  [(VOTElementManager *)self _handleSearchRotorDirection:a3 event:a4 notifyUser:1];
  unsigned int v5 = [(id)VOTSharedWorkspace elementManager];
  uint64_t v6 = [v5 elementRotor];
  id v7 = [v6 currentRotorType];

  if (v7 == (id)4)
  {
    [(VOTElementManager *)self tutorialSetRecognizedGesture:@"RotorWords"];
  }
}

- (void)_handleSearchRotorDirection:(int64_t)a3 event:(id)a4 notifyUser:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a4;
  if ([(id)VOTSharedWorkspace voiceOverMuted])
  {
    if ([v8 isKeyEvent])
    {
      uint64_t v9 = +[VOTBrailleManager manager];
      unsigned __int8 v10 = [v9 bluetoothBrailleDisplayConnected];

      if ((v10 & 1) == 0) {
        [(id)VOTSharedWorkspace setVoiceOverMuted:0];
      }
    }
  }
  if (v5 && ![(VOTElementRotor *)self->_elementRotor ignoreDefaultTypeAutofill])
  {
    id v11 = [(VOTElementManager *)self _currentElement];
    unsigned int v12 = [v11 doesHaveTraits:kAXIsEditingTrait];

    if (v12) {
      [(VOTElementRotor *)self->_elementRotor setIgnoreDefaultTypeAutofill:1];
    }
  }
  if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)5
    || (id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)6)
  {
    [(VOTElementManager *)self setCurrentElementToWebEditableAncestor];
  }
  if (self->_flags.shouldUpdateRotorForElement
    || (id lastSeenApplicationOrientation = self->_lastSeenApplicationOrientation,
        lastSeenApplicationOrientation != [(id)VOTSharedWorkspace applicationOrientation]))
  {
    uint64_t v14 = [(VOTElementManager *)self _currentElement];
    [v14 updateTraits];

    [(VOTElementManager *)self _updateRotorForCurrentElement];
  }
  char v19 = 0;
  if (a3 == 1)
  {
    -[VOTRotor increment:userInitiated:eventOrigin:](self->_elementRotor, "increment:userInitiated:eventOrigin:", &v19, 1, [v8 origin]);
  }
  else if (a3 == 2)
  {
    -[VOTRotor decrement:userInitiated:eventOrigin:](self->_elementRotor, "decrement:userInitiated:eventOrigin:", &v19, 1, [v8 origin]);
  }
  if ([v8 fingerCount]) {
    [(SCRCTargetSelectorTimer *)self->_visualRotorFadeTimer cancel];
  }
  else {
    [(VOTElementManager *)self hideVisualRotor];
  }
  if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)55)
  {
    self->_customActionIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
    customActionIdentifier = self->_customActionIdentifier;
    self->_customActionIdentifier = 0;
  }
  if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)93) {
    self->_customContentIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned __int8 v16 = [(VOTElementManager *)self _inMisspelledWordRotor];
  if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)6) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = v16;
  }
  self->_inTextProcessingRotorMode = v17;
  if ((v16 & 1) == 0) {
    self->_misspelledWordReplacementCycleIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    [(VOTElementManager *)self _showVisualRotor:self->_elementRotor direction:a3 == 1];
    id v18 = [(VOTRotor *)self->_elementRotor generateRotorTypeRequest];
    [(VOTElementManager *)self _appendCurrentRotorValue:v18 forRotor:self->_elementRotor];
    [(VOTElementManager *)self _formatRequestForBrailleAlertConditional:v18];
    [v18 send];
  }
  [(VOTElementManager *)self _outputRotorTypeCount];
}

- (void)_handleSearchRotorLeft:(id)a3
{
}

- (void)_handleSearchRotorRight:(id)a3
{
}

- (void)elementFetchFound:(id)a3
{
}

- (void)dragManager:(id)a3 didMoveDragToPoint:(CGPoint)a4
{
}

- (void)_dragMoved
{
}

- (void)dragManager:(id)a3 didEndDragOperation:(unint64_t)a4
{
}

- (void)_dragEnded
{
}

- (void)dragManager:(id)a3 didChangeDragToStatus:(id)a4
{
}

- (void)_dragChangedToStatus:(id)a3
{
}

- (void)didTerminateDragForDragManager:(id)a3
{
  [(SCRCThread *)self->_elementManagerThread performSelector:"_dragTerminated" onTarget:self count:0 objects:0];
  dragOutputManager = self->_dragOutputManager;

  [(VOTDragOutputManager *)dragOutputManager dragEnded];
}

- (void)_dragTerminated
{
  int64_t v3 = [(VOTElementManager *)self _currentCustomActions];
  customActionIndedouble x = self->_customActionIndex;
  if (customActionIndex >= 1)
  {
    id v9 = v3;
    BOOL v5 = customActionIndex >= (unint64_t)[v3 count];
    int64_t v3 = v9;
    if (!v5)
    {
      uint64_t v6 = [v9 objectAtIndexedSubscript:self->_customActionIndex];
      unsigned __int8 v7 = [v6 isValidForContext:self];

      int64_t v3 = v9;
      if ((v7 & 1) == 0)
      {
        self->_customActionIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
        customActionIdentifier = self->_customActionIdentifier;
        self->_customActionIdentifier = 0;

        int64_t v3 = v9;
      }
    }
  }
}

- (void)didStartDragForDragManager:(id)a3
{
}

- (void)_dragStarted
{
  [(VOTDragOutputManager *)self->_dragOutputManager dragSessionStarted];
  [(VOTElementManager *)self _layoutChangeForDragSessionStart];
  int64_t v3 = [(VOTElementManager *)self _currentCustomActions];
  customActionIndedouble x = self->_customActionIndex;
  if (customActionIndex >= 1)
  {
    id v9 = v3;
    BOOL v5 = customActionIndex >= (unint64_t)[v3 count];
    int64_t v3 = v9;
    if (!v5)
    {
      uint64_t v6 = [v9 objectAtIndexedSubscript:self->_customActionIndex];
      unsigned __int8 v7 = [v6 isValidForContext:self];

      int64_t v3 = v9;
      if ((v7 & 1) == 0)
      {
        self->_customActionIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
        customActionIdentifier = self->_customActionIdentifier;
        self->_customActionIdentifier = 0;

        int64_t v3 = v9;
      }
    }
  }
}

- (void)_layoutChangeForDragSessionStart
{
}

- (id)dragOutputManager
{
  return self->_dragOutputManager;
}

- (void)waitForDragStartFromPid:(int)a3 completionHandler:(id)a4
{
}

- (BOOL)dragSessionActive
{
  return [(AXDragManager *)self->_dragManager isDragActive];
}

- (void)cancelDrag
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  [(AXDragManager *)self->_dragManager cancelDrag];
  [(VOTDragOutputManager *)self->_dragOutputManager dragCancelled];
  [(VOTElementFetcher *)self->_fetchManager forceUpdate];

  [(VOTElementManager *)self _handleLayoutChange:0];
}

- (void)dropDrag
{
  [(AXDragManager *)self->_dragManager drop];
  dragOutputManager = self->_dragOutputManager;

  [(VOTDragOutputManager *)dragOutputManager dragDropped];
}

- (void)moveDragToPoint:(CGPoint)a3
{
  -[AXDragManager moveToPoint:](self->_dragManager, "moveToPoint:", a3.x, a3.y);
  dragOutputManager = self->_dragOutputManager;

  [(VOTDragOutputManager *)dragOutputManager dragMoved];
}

- (void)_updateContextDescriptors
{
  int64_t v3 = [(VOTElementManager *)self currentContextDescriptors];
  [(VOTElementManager *)self setPreviousContextDescriptors:v3];

  uint64_t v4 = [(VOTElementManager *)self _currentElement];
  BOOL v5 = [v4 contextDescriptors];

  if ([v5 count])
  {
    uint64_t v6 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v5 count]);
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v15 = v5;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v17;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v7);
          }
          unsigned int v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          id v13 = [v12 objectForKeyedSubscript:@"value"];
          uint64_t v14 = [v12 objectForKeyedSubscript:@"category"];
          [v6 setObject:v13 forKeyedSubscript:v14];
        }
        id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v9);
    }

    [(VOTElementManager *)self setCurrentContextDescriptors:v6];
    BOOL v5 = v15;
  }
  else
  {
    [(VOTElementManager *)self setCurrentContextDescriptors:0];
  }
}

- (BOOL)_touchContainerDidChangeForElement:(id)a3 oldElement:(id)a4
{
  id v5 = a4;
  uint64_t v6 = [a3 labeledTouchContainer];
  id v7 = [v6 uiElement];

  id v8 = [v5 labeledTouchContainer];

  id v9 = [v8 uiElement];

  unint64_t v10 = (unint64_t)[v7 axElement];
  id v11 = [v9 axElement];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unint64_t v10 = (unint64_t)v7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unint64_t v12 = (unint64_t)v9;
  }
  else {
    unint64_t v12 = (unint64_t)v11;
  }
  if (v12 | v10) {
    BOOL v13 = (v10 != 0) != (v12 != 0) || CFEqual((CFTypeRef)v10, (CFTypeRef)v12) == 0;
  }
  else {
    BOOL v13 = 0;
  }

  return v13;
}

- (BOOL)_chartElementDidChangeForElement:(id)a3 oldElement:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  if (!AXDeviceSupportsSonification()) {
    goto LABEL_5;
  }
  id v7 = [v5 chartElement];
  id v8 = [v7 uiElement];
  unint64_t v9 = (unint64_t)[v8 axElement];

  unint64_t v10 = [v6 chartElement];
  id v11 = [v10 uiElement];
  unint64_t v12 = (unint64_t)[v11 axElement];

  if (v9 | v12) {
    BOOL v13 = (v9 != 0) != (v12 != 0) || CFEqual((CFTypeRef)v9, (CFTypeRef)v12) == 0;
  }
  else {
LABEL_5:
  }
    BOOL v13 = 0;

  return v13;
}

- (BOOL)_shouldIncludeContainerInDescriptionForCurrentElement:(id)a3 previousElement:(id)a4
{
  id v6 = a3;
  id v7 = (VOTElement *)a4;
  if (!v7)
  {
    if (CFAbsoluteTimeGetCurrent() - self->_lastScreenChangeNotificationTime <= 2.0) {
      id v7 = self->_elementBeforeScreenChange;
    }
    else {
      id v7 = 0;
    }
  }
  id v8 = [(VOTElement *)v7 labeledTouchContainer];
  unint64_t v9 = [v8 label];

  unint64_t v10 = [v6 labeledTouchContainer];
  id v11 = [v10 label];

  unint64_t v12 = [(VOTElementManager *)self _elementCommunityForElement:v6];
  BOOL v13 = [(VOTElementManager *)self _elementCommunityForElement:v7];
  unsigned int v14 = (v9 != v11) & ~[v9 isEqualToString:v11];
  unsigned int v15 = [v12 isEqual:v13] ^ 1;
  unsigned __int8 v16 = [(VOTElementManager *)self _touchContainerDidChangeForElement:v6 oldElement:v7];
  if (v15) {
    goto LABEL_9;
  }
  if (!v14) {
    goto LABEL_9;
  }
  [v6 labeledTouchContainer];
  v17 = id v23 = v6;
  [v12 labeledTouchContainer];
  v18 = uint64_t v22 = v9;
  unsigned __int8 v19 = [v17 isEqual:v18];

  unint64_t v9 = v22;
  id v6 = v23;
  if (v19) {
    char v20 = 0;
  }
  else {
LABEL_9:
  }
    char v20 = v16 & (v15 | v14);

  return v20;
}

- (void)_echoFlickNavigationElement:(id)a3
{
  id v22 = a3;
  uint64_t v4 = [(VOTElementManager *)self _currentElement];
  sub_10006BBE4(v22, v4);
  id v5 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  unsigned int v6 = [(VOTElementManager *)self _shouldIncludeContainerInDescriptionForCurrentElement:v22 previousElement:v4];
  id v7 = [(VOTElementManager *)self _updateTouchContainerForElement:v22 playSound:1];
  if ([(VOTElementManager *)self _shouldAnnounceCustomRotorHintForElement:v22])
  {
    uint64_t v8 = 0x200800802;
  }
  else
  {
    uint64_t v8 = 8390658;
  }
  unsigned int v9 = [(AXDragManager *)self->_dragManager isDragActive];
  uint64_t v10 = 0x40000000;
  if (!v9) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | v8;
  if ([v22 containedIn:2] && objc_msgSend(v22, "rowRange") == self->_lastTableRow) {
    v11 |= 0x400000uLL;
  }
  if (v6)
  {
    unsigned int v12 = [v22 shouldSpeakScrollStatusOnEntry];
    uint64_t v13 = 32;
    if (v12) {
      uint64_t v13 = 32800;
    }
    v11 |= v13;
  }
  if (AXDeviceSupportsSonification())
  {
    unsigned int v14 = [v22 supportsAudiographs];
    unsigned int v15 = v22;
    if (v14)
    {
      unsigned int v16 = [(VOTElementManager *)self _chartElementDidChangeForElement:v22 oldElement:v4];
      unsigned int v15 = v22;
      if (v16) {
        v11 |= 0x4100000000uLL;
      }
    }
  }
  else
  {
    unsigned int v15 = v22;
  }
  id v17 = [v15 blockquoteLevel];
  if (v17 == [v4 blockquoteLevel]) {
    uint64_t v18 = v11;
  }
  else {
    uint64_t v18 = v11 | 0x20000;
  }
  if (v4)
  {
    unsigned int v19 = [v22 applicationIsRTL];
    if (v19 != [v4 applicationIsRTL]) {
      v18 |= 0x8000000000uLL;
    }
  }
  [(VOTElementManager *)self _prepareElementOutputHeaders:v22 currentElement:v4 request:v5];
  char v20 = [(VOTElementManager *)self currentContextDescriptors];
  [(VOTElementManager *)self _addDescription:v22 toRequest:v5 withOptions:v18 lastSeenContextDescriptors:v20];

  [(VOTElementManager *)self sendRequest:v5];
  if ([v22 doesHaveTraits:kAXLinkTrait])
  {
    id v21 = [v22 url];

    if (v21)
    {
      [v22 frame];
      -[VOTElementManager _outputDataDetectorIfPresent:element:includeLinks:](self, "_outputDataDetectorIfPresent:element:includeLinks:", v22, 0);
    }
  }
}

- (void)_echoSearchNavigationElement:(id)a3 forRangeAdjustment:(BOOL)a4
{
  BOOL v4 = a4;
  id v12 = a3;
  id v6 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v7 = [(VOTElementManager *)self _currentElement];
  [(VOTElementManager *)self _prepareElementOutputHeaders:v12 currentElement:v7 request:v6];

  uint64_t v8 = [(VOTElementManager *)self _currentElement];
  unsigned int v9 = [(VOTElementManager *)self _shouldIncludeContainerInDescriptionForCurrentElement:v8 previousElement:v12];

  if (v9) {
    uint64_t v10 = 8388642;
  }
  else {
    uint64_t v10 = 8388610;
  }
  if (v4)
  {
    [v6 setDoesNotInterrupt:1];
    uint64_t v10 = 0x2000000;
  }
  [(VOTElementManager *)self _addDescription:v12 toRequest:v6 withOptions:v10];
  [(VOTElementManager *)self sendRequest:v6];
  if ([v12 doesHaveTraits:kAXLinkTrait])
  {
    uint64_t v11 = [v12 url];

    if (v11)
    {
      [v12 frame];
      -[VOTElementManager _outputDataDetectorIfPresent:element:includeLinks:](self, "_outputDataDetectorIfPresent:element:includeLinks:", v12, 0);
    }
  }
}

- (void)_echoSearchTypeNotFound:(int64_t)a3
{
  int64_t v5 = +[VOTRotor rotorTypeForSearchType:](VOTRotor, "rotorTypeForSearchType:");
  if (!v5) {
    int64_t v5 = [(VOTRotor *)self->_elementRotor currentRotorType];
  }
  id v6 = [(id)VOTSharedWorkspace selectedLanguage];
  id v13 = v6;
  if (a3)
  {
    id v7 = v6;
    int64_t v8 = v5 - 8;
    if ((unint64_t)(v5 - 8) > 0x24 || ((0x171E0003FFuLL >> v8) & 1) == 0)
    {
      unsigned int v9 = 0;
      goto LABEL_10;
    }
    uint64_t v10 = *(&off_1001B5DE0 + v8);
  }
  else
  {
    uint64_t v10 = @"generic.notfound";
  }
  uint64_t v11 = sub_100051D04(off_1001EA9E8, v10, 0, v6);
  id v7 = v13;
  unsigned int v9 = (void *)v11;
LABEL_10:
  id v12 = sub_10000ABF8(v9, 0, v7);
}

- (BOOL)_isShowingTodayViewForPhone
{
  if ((id)[(NSArray *)self->_currentApplications count] != (id)2) {
    return 0;
  }
  int64_t v3 = [(NSArray *)self->_currentApplications firstObject];
  if ([v3 isSpotlight])
  {
    BOOL v4 = [(NSArray *)self->_currentApplications lastObject];
    unsigned __int8 v5 = [v4 isSpringBoard];
  }
  else
  {
    unsigned __int8 v5 = 0;
  }

  return v5;
}

- (void)_elementFetchFoundElement:(id)a3
{
  id v4 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v5 = [v4 element];
  id v6 = [v5 uiElement];
  [v6 enableCache:1];

  if ([v4 clientGeneration] == self->_elementSearchGeneration)
  {
    [(VOTElementManager *)self _resetReadAllRequest];
    int64_t v8 = [(VOTElementManager *)self _currentElement];
    unsigned int v9 = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
    if (!v5)
    {
      unsigned int v11 = v9;
      if (!_AXSClarityBoardEnabled()
        || (id v12 = [v4 direction], v12 != (id)1) && objc_msgSend(v4, "direction") != (id)2
        || ([(VOTElementManager *)self _getNextFocusedElementInElementCommunityPrevious:v12 != (id)1 shouldUseCache:0 shouldWrapAround:0], (uint64_t v13 = objc_claimAutoreleasedReturnValue()) == 0))
      {
        if ([(VOTRotor *)self->_elementRotor publicCustomRotorIndex] != 0x7FFFFFFFFFFFFFFFLL
          && (!v11 || ([v4 searchEndedWithDifferentGroup] & 1) == 0))
        {
          unsigned int v14 = [v8 directParent];
          unsigned int v15 = [v14 application];
          if ([v14 isValidForApplication:v15])
          {
            unsigned int v16 = [v14 isAccessibleElement];

            if (v16)
            {
              [(VOTElementManager *)self _setCurrentElement:v14];
              [(VOTElementManager *)self _resetElementUnitIndexes];
              id v17 = [(VOTElementManager *)self _copyMatchBlockAnyElement];
              fetchManager = self->_fetchManager;
              id v19 = [v4 direction];
              unint64_t elementSearchGeneration = self->_elementSearchGeneration;
              LOBYTE(v54) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
              -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:](fetchManager, "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:", v19, v14, v17, 0, 0, elementSearchGeneration, 0x7FFFFFFFLL, 0, v54);

              id v5 = 0;
LABEL_57:

              goto LABEL_58;
            }
          }
          else
          {
          }
        }
        id v5 = 0;
        char v10 = 1;
LABEL_21:
        v60[0] = _NSConcreteStackBlock;
        v60[1] = 3221225472;
        v60[2] = sub_10006D494;
        v60[3] = &unk_1001B4C88;
        id v21 = v8;
        id v61 = v21;
        id v5 = v5;
        id v62 = v5;
        id v22 = objc_retainBlock(v60);
        if (v10)
        {
          if (!self->_flags.performedElementUpdateForSelectionChange && !self->_flags.performedSearch)
          {
            id v23 = +[VOTOutputManager outputManager];
            id v24 = +[VOSOutputEvent BoundaryEncountered];
            [v23 sendEvent:v24];
          }
          if (self->_flags.performedSearch)
          {
            -[VOTElementManager _echoSearchTypeNotFound:](self, "_echoSearchTypeNotFound:", [v4 searchType]);
            id v25 = +[VOTOutputManager outputManager];
            long long v26 = +[VOSOutputEvent NoResultsFound];
            [v25 sendEvent:v26];
          }
          else
          {
            if (!self->_flags.performedFlickNavigation)
            {
              if (self->_flags.isReadingAll)
              {
                ((void (*)(void *))v22[2])(v22);
              }
              else if (([v21 verifyElementExists:0] & 1) == 0)
              {
                [(VOTElementManager *)self _handleLayoutChange:0];
              }
              goto LABEL_52;
            }
            id v25 = [(VOTElementManager *)self _currentElement];
            LOWORD(v53) = 257;
            -[VOTElementManager _echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound:isProtectedApp:includeHint:boundaryHit:](self, "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound:isProtectedApp:includeHint:boundaryHit:", v25, 0, 0, 0, 0, 0, v53);
          }

LABEL_52:
          self->_flags.isReadingAll = 0;
          double v39 = +[VOTBrailleManager manager];
          [v39 setAutoAdvanceEnabled:0];

LABEL_53:
          id v40 = VOTLogElement();
          if (os_signpost_enabled(v40))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "ElementTraversal", "", buf, 2u);
          }

          [(VOTElementManager *)self _resetSearchType];
LABEL_56:

          goto LABEL_57;
        }
        [v4 range];
        uint64_t v28 = v27;
        if ([v5 isEqual:v21])
        {
          BOOL v31 = self->_highlightedCharacterRange.location != [v4 range]
             || self->_highlightedCharacterRange.length != v29;
          if (v28 && v31)
          {
            id v32 = [v4 range];
            -[VOTElementManager _moveFocusToUpdatedRange:element:searchType:](self, "_moveFocusToUpdatedRange:element:searchType:", v32, v33, v5, [v4 searchType]);
          }
          goto LABEL_56;
        }
        if (v28) {
          self->_flags.performedElementUpdateForSelectionChange = 1;
        }
        if (([v5 includeDuringContentReading] & 1) != 0
          || ([v5 isReadingContent] & 1) != 0
          || self->_flags.performedElementUpdateForSelectionChange
          || self->_flags.isReadingAll)
        {
          [v5 shouldPlaySoundWhenFocused];
        }
        else if ([v5 shouldPlaySoundWhenFocused])
        {
          id v47 = [(VOTElementManager *)self _appInfoForCurrentElement];
          unsigned __int8 v55 = v48;
          id v56 = v47;
          id v49 = +[AXSettings sharedInstance];
          id v50 = [v49 automaticAccessibilityModeForBundleIdentifier:v56];

          id v51 = +[VOTOutputManager outputManager];
          if (v50 == (id)1) {
            +[VOSOutputEvent DidFocusOnScreenRecognitionElement];
          }
          else {
          id v52 = +[VOSOutputEvent DidFocusOnElement];
          }
          [v51 sendEvent:v52];
        }
        uint64_t v34 = [v5 localOpaqueParent];
        if (v34
          && (uint64_t v35 = (void *)v34,
              [v5 remoteParent],
              uint64_t v36 = objc_claimAutoreleasedReturnValue(),
              v36,
              v35,
              !v36))
        {
          int v38 = 1;
        }
        else
        {
          if (!self->_flags.performedElementUpdateForSelectionChange)
          {
            uint64_t v37 = sub_10005273C(self->_flags.lastElementMovement);
            v58[0] = _NSConcreteStackBlock;
            v58[1] = 3221225472;
            v58[2] = sub_10006D550;
            v58[3] = &unk_1001B3448;
            v58[4] = self;
            id v59 = v5;
            [v59 scrollToElementForDirectional:v37 withCompletion:v58];
          }
          int v38 = 0;
        }
        [v5 updateCache];
        buf[0] = 0;
        if (self->_flags.isReadingAll)
        {
          if (((uint64_t (*)(void *))v22[2])(v22))
          {
LABEL_70:
            BOOL v43 = 1;
            goto LABEL_71;
          }
          [(VOTElementManager *)self _continueReadAllWithElement:v5 setCurrentElement:buf];
          uint64_t v41 = self->_fetchManager;
          id v42 = v21;
        }
        else
        {
          if (!self->_flags.performedFlickNavigation)
          {
            if (self->_flags.performedSearch)
            {
              [v4 range];
              BOOL v43 = v44 == 0;
              if (v44)
              {
                id v45 = [v4 range];
                -[VOTElementManager _moveFocusToUpdatedRange:element:searchType:](self, "_moveFocusToUpdatedRange:element:searchType:", v45, v46, v5, [v4 searchType]);
                int v38 = 0;
                self->_flags.performedElementUpdateForSelectionChange = 1;
              }
              [(VOTElementManager *)self _echoSearchNavigationElement:v5 forRangeAdjustment:v28 != 0];
            }
            else
            {
              BOOL v43 = 1;
              if (self->_flags.performedElementUpdateForSelectionChange)
              {
                [(VOTElementManager *)self _setCurrentElement:v5 isProtectedApp:0 shouldResetTextSelection:0 shouldResetCharacterRange:0 ignoreIsAccessibilityElementCheck:0];
                buf[0] = 1;
                if ((v38 & 1) == 0) {
                  goto LABEL_53;
                }
                goto LABEL_75;
              }
            }
LABEL_71:
            if (buf[0])
            {
              if (!v38) {
                goto LABEL_53;
              }
            }
            else
            {
              [(VOTElementManager *)self _setCurrentElement:v5 isProtectedApp:0 shouldResetTextSelection:1 shouldResetCharacterRange:v43 ignoreIsAccessibilityElementCheck:0];
              if ((v38 & 1) == 0) {
                goto LABEL_53;
              }
            }
LABEL_75:
            [(VOTElementManager *)self _updateCursorFrameForElementIfNeeded:v5];
            goto LABEL_53;
          }
          [(VOTElementManager *)self _echoFlickNavigationElement:v5];
          if ([v4 needsForceCacheUpdate]) {
            [(VOTElementFetcher *)self->_fetchManager forceUpdate];
          }
          uint64_t v41 = self->_fetchManager;
          id v42 = v5;
        }
        [(VOTElementFetcher *)v41 updateCacheWithElement:v42];
        goto LABEL_70;
      }
      id v5 = (id)v13;
    }
    char v10 = 0;
    goto LABEL_21;
  }
LABEL_58:
}

- (id)_copyMatchBlockSearchText
{
  id v2 = [&stru_1001B4CA8 copy];

  return v2;
}

- (id)_copyMatchBlockForTextAttribute:(int64_t)a3 searchType:(int64_t *)a4
{
  if ((unint64_t)(a3 - 71) <= 7) {
    *a4 = a3 - 69;
  }
  id v4 = [&stru_1001B4CC8 copy];

  return v4;
}

- (id)_copyMatchBlockAnyElement
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10006D7B0;
  v5[3] = &unk_1001B4AB0;
  v5[4] = self;
  id v2 = objc_retainBlock(v5);
  id v3 = [v2 copy];

  return v3;
}

- (id)_copyMatchBlockImage
{
  id v2 = [&stru_1001B4CE8 copy];

  return v2;
}

- (id)_copyMatchBlockVisitedLink
{
  id v2 = [&stru_1001B4D08 copy];

  return v2;
}

- (id)_copyMatchBlockHeader
{
  id v2 = [&stru_1001B4D28 copy];

  return v2;
}

- (id)_copyMatchBlockForHeadingLevel:(int64_t)a3 searchType:(int64_t *)a4
{
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v8[3] = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10006DD08;
  v7[3] = &unk_1001B4D50;
  void v7[4] = v8;
  v7[5] = a4;
  id v4 = objc_retainBlock(v7);
  id v5 = [v4 copy];

  _Block_object_dispose(v8, 8);

  return v5;
}

- (id)_copyMatchBlockNonVisitedLink
{
  id v2 = [&stru_1001B4D70 copy];

  return v2;
}

- (id)_copyMatchBlockLink
{
  id v2 = [&stru_1001B4D90 copy];

  return v2;
}

- (id)_copyMatchBlockStaticText
{
  id v2 = +[NSCharacterSet alphanumericCharacterSet];
  id v3 = [v2 invertedSet];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10006DF7C;
  v8[3] = &unk_1001B4AB0;
  id v9 = v3;
  id v4 = v3;
  id v5 = objc_retainBlock(v8);
  id v6 = [v5 copy];

  return v6;
}

- (id)_copyMatchBlockFormElement
{
  id v2 = [&stru_1001B4DB0 copy];

  return v2;
}

- (id)_copyMatchBlockListStart
{
  id v2 = [&stru_1001B4DD0 copy];

  return v2;
}

- (id)_copyMatchBlockFrameStart
{
  id v2 = [&stru_1001B4DF0 copy];

  return v2;
}

- (id)_copyMatchBlockTableStart
{
  id v2 = [&stru_1001B4E10 copy];

  return v2;
}

- (id)_copyMatchBlockArticleStart
{
  id v2 = [&stru_1001B4E30 copy];

  return v2;
}

- (id)_copyMatchBlockLandmarkStart
{
  id v2 = [&stru_1001B4E50 copy];

  return v2;
}

- (id)_copyMatchBlockInternalLink
{
  id v2 = [&stru_1001B4E70 copy];

  return v2;
}

- (id)_copyMatchBlockButton
{
  id v2 = [&stru_1001B4E90 copy];

  return v2;
}

- (unint64_t)filterTraitsByPriority:(unint64_t)a3
{
  unint64_t result = kAXHeaderTrait;
  if ((kAXHeaderTrait & a3) == 0)
  {
    unint64_t result = kAXPickerElementTrait;
    if ((kAXPickerElementTrait & a3) == 0)
    {
      if ((kAXWebContentTrait & a3) != 0)
      {
        uint64_t v4 = kAXLinkTrait;
        if ((kAXLinkTrait & a3) != 0) {
          return v4 | kAXWebContentTrait;
        }
        uint64_t v4 = kAXTextEntryTrait;
        if ((kAXTextEntryTrait & a3) != 0) {
          return v4 | kAXWebContentTrait;
        }
        uint64_t v5 = kAXWebContentTrait;
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v6 = kAXImageTrait;
      if ((kAXImageTrait & a3) != 0) {
        return v6 | v5;
      }
      uint64_t v6 = kAXButtonTrait;
      if ((kAXButtonTrait & a3) != 0) {
        return v6 | v5;
      }
      uint64_t v6 = kAXLinkTrait;
      if ((kAXLinkTrait & a3) != 0)
      {
        return v6 | v5;
      }
      else
      {
        unint64_t v7 = kAXStaticTextTrait | v5;
        if ((kAXStaticTextTrait & a3) != 0) {
          return v7;
        }
        else {
          return kAXWebContentTrait;
        }
      }
    }
  }
  return result;
}

- (id)_copyMatchBlockBlockquote
{
  return &stru_1001B4EB0;
}

- (id)_copyMatchBlockSameBlockquote
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10006E7DC;
  v5[3] = &unk_1001B4AB0;
  v5[4] = self;
  id v2 = objc_retainBlock(v5);
  id v3 = objc_retainBlock(v2);

  return v3;
}

- (id)_copyMatchBlockSameHeading
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10006E8E4;
  v5[3] = &unk_1001B4AB0;
  v5[4] = self;
  id v2 = objc_retainBlock(v5);
  id v3 = objc_retainBlock(v2);

  return v3;
}

- (id)_copyMatchBlockSimilar
{
  double Current = CFAbsoluteTimeGetCurrent();
  [(VOTElementManager *)self lastSearchForElementsTime];
  if (Current - v4 > 1.5) {
    [(VOTElementManager *)self setCurrentSimilarTraits:[(VOTElementManager *)self filterTraitsByPriority:[(VOTElement *)self->_currentElement traits]]];
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10006EA60;
  v8[3] = &unk_1001B4AB0;
  void v8[4] = self;
  uint64_t v5 = objc_retainBlock(v8);
  id v6 = [v5 copy];

  return v6;
}

- (id)_copyMatchBlockDifferent
{
  double Current = CFAbsoluteTimeGetCurrent();
  [(VOTElementManager *)self lastSearchForElementsTime];
  if (Current - v4 > 1.5) {
    [(VOTElementManager *)self setCurrentSimilarTraits:[(VOTElementManager *)self filterTraitsByPriority:[(VOTElement *)self->_currentElement traits]]];
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10006EB90;
  v8[3] = &unk_1001B4AB0;
  void v8[4] = self;
  uint64_t v5 = objc_retainBlock(v8);
  id v6 = [v5 copy];

  return v6;
}

- (id)_copyMatchBlockTextField
{
  id v2 = [&stru_1001B4ED0 copy];

  return v2;
}

- (id)_copyMatchBlockRadioButton
{
  id v2 = [&stru_1001B4EF0 copy];

  return v2;
}

- (id)_copyMatchBlockCheckbox
{
  id v2 = [&stru_1001B4F10 copy];

  return v2;
}

- (id)_copyMatchBlockSearchField
{
  id v2 = [&stru_1001B4F30 copy];

  return v2;
}

- (id)_copyMatchBlockForRotorType:(int64_t)a3 searchType:(int64_t *)a4
{
  double v4 = 0;
  switch(a3)
  {
    case 8:
      double v4 = [(VOTElementManager *)self _copyMatchBlockHeader];
      int64_t v7 = 1;
      goto LABEL_28;
    case 9:
      double v4 = [(VOTElementManager *)self _copyMatchBlockLink];
      int64_t v7 = 11;
      goto LABEL_28;
    case 10:
      double v4 = [(VOTElementManager *)self _copyMatchBlockFormElement];
      int64_t v7 = 13;
      goto LABEL_28;
    case 11:
      double v4 = [(VOTElementManager *)self _copyMatchBlockTableStart];
      int64_t v7 = 22;
      goto LABEL_28;
    case 12:
      double v4 = [(VOTElementManager *)self _copyMatchBlockFrameStart];
      int64_t v7 = 27;
      goto LABEL_28;
    case 13:
      double v4 = [(VOTElementManager *)self _copyMatchBlockListStart];
      int64_t v7 = 23;
      goto LABEL_28;
    case 14:
      double v4 = [(VOTElementManager *)self _copyMatchBlockVisitedLink];
      int64_t v7 = 14;
      goto LABEL_28;
    case 15:
      double v4 = [(VOTElementManager *)self _copyMatchBlockNonVisitedLink];
      int64_t v7 = 15;
      goto LABEL_28;
    case 16:
      double v4 = [(VOTElementManager *)self _copyMatchBlockImage];
      int64_t v7 = 10;
      goto LABEL_28;
    case 17:
      double v4 = [(VOTElementManager *)self _copyMatchBlockStaticText];
      int64_t v7 = 16;
      goto LABEL_28;
    case 33:
      double v4 = [(VOTElementManager *)self _copyMatchBlockLandmarkStart];
      int64_t v7 = 24;
      goto LABEL_28;
    case 34:
      double v4 = [(VOTElementManager *)self _copyMatchBlockArticleStart];
      int64_t v7 = 12;
      goto LABEL_28;
    case 35:
      double v4 = [(VOTElementManager *)self _copyMatchBlockButton];
      int64_t v7 = 21;
      goto LABEL_28;
    case 36:
      double v4 = [(VOTElementManager *)self _copyMatchBlockTextField];
      int64_t v7 = 17;
      goto LABEL_28;
    case 40:
      double v4 = [(VOTElementManager *)self _copyMatchBlockSearchField];
      int64_t v7 = 18;
      goto LABEL_28;
    case 41:
      double v4 = [(VOTElementManager *)self _copyMatchBlockRadioButton];
      int64_t v7 = 19;
      goto LABEL_28;
    case 42:
      double v4 = [(VOTElementManager *)self _copyMatchBlockCheckbox];
      int64_t v7 = 20;
      goto LABEL_28;
    case 44:
      uint64_t v6 = [(VOTElementManager *)self _copyMatchBlockSimilar];
      goto LABEL_4;
    case 45:
      uint64_t v6 = [(VOTElementManager *)self _copyMatchBlockAnyElement];
      goto LABEL_4;
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
      uint64_t v6 = -[VOTElementManager _copyMatchBlockForHeadingLevel:searchType:](self, "_copyMatchBlockForHeadingLevel:searchType:");
      goto LABEL_4;
    case 52:
      double v4 = [(VOTElementManager *)self _copyMatchBlockSameHeading];
      int64_t v7 = 26;
      goto LABEL_28;
    case 53:
      uint64_t v6 = [(VOTElementManager *)self _copyMatchBlockDifferent];
      goto LABEL_4;
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
      uint64_t v6 = -[VOTElementManager _copyMatchBlockForTextAttribute:searchType:](self, "_copyMatchBlockForTextAttribute:searchType:");
LABEL_4:
      double v4 = (void *)v6;
      break;
    case 79:
      double v4 = [(VOTElementManager *)self _copyMatchBlockBlockquote];
      int64_t v7 = 25;
      goto LABEL_28;
    case 80:
      double v4 = [(VOTElementManager *)self _copyMatchBlockSameBlockquote];
      int64_t v7 = 28;
LABEL_28:
      *a4 = v7;
      break;
    default:
      break;
  }
  id v8 = objc_retainBlock(v4);

  return v8;
}

- (void)_customPublicRotorMatchForType:(id)a3 range:(_NSRange *)a4 element:(id *)a5 direction:(int64_t)a6 lastSearchUUID:(id *)a7
{
  id v12 = [*a5 customPublicRotorForSystemType:a3];
  uint64_t v13 = v12;
  if (!v12) {
    goto LABEL_4;
  }
  if (a7)
  {
    if ([v12 isEqual:*a7])
    {
LABEL_4:
      *a4 = (_NSRange)xmmword_10016E510;
      *a5 = 0;
      goto LABEL_15;
    }
    *a7 = v13;
  }
  unsigned int v14 = +[VOTElement customPublicRotorDictionaryForRotorId:startRange:direction:](VOTElement, "customPublicRotorDictionaryForRotorId:startRange:direction:", v13, a4->location, a4->length, a6);
  unsigned int v15 = [*a5 customPublicRotorResultWithItem:v14 startElement:*a5];
  unsigned int v16 = v15;
  if (v15)
  {
    if (self->_inUnitTestingMode)
    {
      id v17 = [v15 objectForKeyedSubscript:@"targetElement"];
    }
    else
    {
      uint64_t v18 = [v15 objectForKeyedSubscript:@"targetElement"];
      id v19 = +[AXUIElement uiElementWithAXElement:v18];
      id v17 = +[VOTElement elementWithUIElement:v19];
    }
    char v20 = objc_msgSend(v16, "objectForKeyedSubscript:", @"targetRange", 0x7FFFFFFFLL, 0);

    if (v20)
    {
      id v21 = [v16 objectForKeyedSubscript:@"targetRange"];
      AXValueGetValue(v21, kAXValueTypeCFRange, &v23);
    }
    *a4 = v23;
    id v22 = v17;
    *a5 = v22;
  }
  else
  {
    *a4 = (_NSRange)xmmword_10016E510;
    *a5 = 0;
  }

LABEL_15:
}

- (id)_copyRangeMatchBlockForRotorType:(int64_t)a3
{
  double v4 = +[VOTRotor systemRotorTypeForRotorType:a3];
  uint64_t v5 = v4;
  if (v4)
  {
    id v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472;
    unsigned int v11 = sub_10006F37C;
    id v12 = &unk_1001B4F58;
    uint64_t v13 = self;
    id v14 = v4;
    uint64_t v6 = objc_retainBlock(&v9);
    id v7 = objc_msgSend(v6, "copy", v9, v10, v11, v12, v13);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

- (void)_handleElementSearch:(id)a3 rotorType:(int64_t)a4 direction:(int64_t)a5
{
  uint64_t v15 = 0;
  id v8 = [(VOTElementManager *)self _copyMatchBlockForRotorType:a4 searchType:&v15];
  if (v8)
  {
    id v9 = [(VOTElementManager *)self _copyRangeMatchBlockForRotorType:a4];
    self->_flags.performedSearch = 1;
    fetchManager = self->_fetchManager;
    unsigned int v11 = [(VOTElementManager *)self _currentElement];
    uint64_t v12 = v15;
    unint64_t elementSearchGeneration = self->_elementSearchGeneration;
    LOBYTE(v14) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
    -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:](fetchManager, "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:", a5, v11, v8, v9, v12, elementSearchGeneration, self->_highlightedCharacterRange.location, self->_highlightedCharacterRange.length, v14);

    [(VOTElementManager *)self setLastSearchForElementsTime:CFAbsoluteTimeGetCurrent()];
  }
}

- (void)_handleSearchRotorMovement:(BOOL)a3 event:(id)a4
{
  BOOL v4 = a3;
  id v6 = a4;
  if (self->_flags.shouldUpdateRotorForElement) {
    [(VOTElementManager *)self _updateRotorForCurrentElement];
  }
  [(VOTElementManager *)self _handleSearchRotorMovementWithoutRotorUpdateInDirectionUp:v4 event:v6];
  [(VOTElementManager *)self setLastElementChangeAction:1];
}

- (void)_handleColumnMovement:(id)a3
{
  id v15 = a3;
  BOOL v4 = [v15 command];
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandNextColumn];

  if ([(VOTElement *)self->_currentElement containedIn:2]
    && ((id v6 = (char *)[(VOTElement *)self->_currentElement columnRange],
         uint64_t v8 = v7,
         int64_t v9 = [(VOTElement *)self->_currentElement columnCount],
         !v5)
      ? (uint64_t v10 = -1)
      : (uint64_t v10 = v8),
        (unsigned int v11 = &v6[v10], (uint64_t)&v6[v10] >= 0)
     && (uint64_t)v11 < v9
     && ([(VOTElement *)self->_currentElement elementAtRow:[(VOTElement *)self->_currentElement rowRange] andColumn:v11], (uint64_t v12 = objc_claimAutoreleasedReturnValue()) != 0)))
  {
    uint64_t v13 = (void *)v12;
    [(VOTElementManager *)self _echoDifferentElement:v12 forEvent:v15];
  }
  else
  {
    uint64_t v13 = +[VOTOutputManager outputManager];
    uint64_t v14 = +[VOSOutputEvent BoundaryEncountered];
    [v13 sendEvent:v14];
  }
}

- (void)_handleDirectElementSearch:(id)a3
{
  id v4 = a3;
  if (qword_1001EB980 != -1) {
    dispatch_once(&qword_1001EB980, &stru_1001B4F78);
  }
  unsigned int v5 = (void *)qword_1001EB978;
  id v6 = [v4 command];
  uint64_t v7 = [v5 objectForKeyedSubscript:v6];

  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    ((void (**)(void, uint64_t *, uint64_t *))v7)[2](v7, &v9, &v8);
    [(VOTElementManager *)self _handleElementSearch:v4 rotorType:v9 direction:v8];
  }
}

- (void)_handleSearchRotorMovementWithoutRotorUpdateInDirectionUp:(BOOL)a3 event:(id)a4
{
  BOOL v4 = a3;
  id v13 = a4;
  id lastSeenApplicationOrientation = self->_lastSeenApplicationOrientation;
  if (lastSeenApplicationOrientation != [(id)VOTSharedWorkspace applicationOrientation]) {
    [(VOTElementManager *)self _updateRotorForCurrentElement];
  }
  if (v4) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = 1;
  }
  uint64_t v8 = [(VOTRotor *)self->_elementRotor currentRotorType];
  switch(v8)
  {
    case 1:
      [(VOTElementManager *)self _handleAdjustValue:v13 reverse:v4 ^ 1];
      break;
    case 2:
      [(VOTElementManager *)self _handleNextAutofill:v13 reverse:v4];
      break;
    case 3:
      [(VOTElementManager *)self _handleLetterMovement:v13 direction:v7];
      break;
    case 4:
      [(VOTElementManager *)self _handleWordMovement:v13 direction:v7];
      break;
    case 5:
      [(VOTElementManager *)self _handleGenericTextSegmentMovement:v13 direction:v7 granulary:3];
      break;
    case 6:
      [(VOTElementManager *)self _handleRotorTextSelectionMovement:v13 direction:v7];
      break;
    case 7:
      [(VOTElementManager *)self _handleVerticalMovement:v13 direction:v7];
      break;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 33:
    case 34:
    case 35:
    case 36:
    case 40:
    case 41:
    case 42:
    case 44:
    case 45:
    case 52:
    case 53:
    case 71:
    case 79:
    case 80:
      [(VOTElementManager *)self _handleElementSearch:v13 rotorType:v8 direction:v7];
      break;
    case 18:
      [(VOTElementManager *)self _handleNextTextOperationInDirection:v7 withEvent:v13];
      break;
    case 19:
      if (v4) {
        uint64_t v9 = 4;
      }
      else {
        uint64_t v9 = 3;
      }
      [(VOTElementManager *)self _handleZoomMovement:v9 event:v13];
      break;
    case 20:
      [(VOTElementManager *)self _handleRotorTypingModeMovement:v7 withEvent:v13];
      break;
    case 21:
      [(VOTElementManager *)self _handleRotorContinusPathChange:v7 withEvent:v13];
      break;
    case 23:
      [(VOTElementManager *)self _handleRotorVoiceMovement:v7 withEvent:v13];
      break;
    case 24:
      [(VOTElementManager *)self _handleRotorBrailleLanguageMovement:v7 withEvent:v13];
      break;
    case 25:
      [(VOTElementManager *)self _handleRotorBrailleInputLanguageMovement:v7 withEvent:v13];
      break;
    case 26:
      [(VOTElementManager *)self _handleRotorBrailleAutoAdvanceMovement:v7 withEvent:v13];
      break;
    case 27:
      [(VOTElementManager *)self _handleRotor2DBrailleZoom:v7 withEvent:v13];
      break;
    case 28:
      [(VOTElementManager *)self _handleRotor2DBraillePanHorizontal:v7 withEvent:v13];
      break;
    case 29:
      [(VOTElementManager *)self _handleRotor2DBraillePanVertical:v7 withEvent:v13];
      break;
    case 30:
      [(VOTElementManager *)self _handleRotor2DBrailleInvert:v7 withEvent:v13];
      break;
    case 31:
      [(VOTElementManager *)self _handleRotor2DBrailleEdgeIntensity:v7 withEvent:v13];
      break;
    case 32:
      [(VOTElementManager *)self _handleRotor2DBrailleDisplayMode:v7 withEvent:v13];
      break;
    case 37:
      [(VOTElementManager *)self _handleRowMovement:v13 direction:v7];
      break;
    case 38:
      [(VOTElementManager *)self _handleContainerMovement:v13 direction:v7];
      break;
    case 39:
      [(VOTElementManager *)self _handleWebSearchResult:v7 withEvent:v13];
      break;
    case 43:
      [(VOTElementManager *)self _handleDirectTouchExplorationMode:v13 direction:v7];
      break;
    case 54:
      [(VOTElementManager *)self _handlePublicCustomRotorMovement:v13 direction:v7];
      break;
    case 55:
      [(VOTElementManager *)self _handleCustomRotorAction:v13 direction:v7];
      break;
    case 56:
    case 57:
    case 58:
    case 59:
      [(VOTElementManager *)self _handleMathGranularMovement:v7 event:v13];
      break;
    case 60:
      [(VOTElementManager *)self _handleHintsSettingMode:v13 direction:v7];
      break;
    case 63:
      [(VOTElementManager *)self _handleTrackingDetailMovement:v4 event:v13];
      break;
    case 64:
      [(VOTElementManager *)self _handleDescribedMediaMode:v13 direction:v7];
      break;
    case 66:
      [(VOTElementManager *)self _handleAudiographAction:v7 event:v13];
      break;
    case 67:
      [(VOTElementManager *)self _handleMLElementModeWithDirection:v7 verboseOutput:0];
      break;
    case 68:
      [(VOTElementManager *)self _handleImageDescriptionsToggle:v7];
      break;
    case 69:
      [(VOTElementManager *)self _handleNavigationStyleMovement:v13 direction:v7];
      break;
    case 81:
      if (v4) {
        [(VOTElementManager *)self _handleIncreaseVolume:v13];
      }
      else {
        [(VOTElementManager *)self _handleDecreaseVolume:v13];
      }
      break;
    case 82:
      [(VOTElementManager *)self _handleSpeechRateChange:v4];
      break;
    case 86:
      [(VOTElementManager *)self _handleSpeechPunctuationChange:v4];
      break;
    case 87:
      [(VOTElementManager *)self _handleSoundRotorChange:v4];
      break;
    case 88:
      int v10 = AXRuntimeCheck_SupportsVoiceoverIndepedentVolume();
      uint64_t v11 = v4 ^ 1;
      if (v10) {
        [(VOTElementManager *)self _handleAudioDuckingModeChange:v11];
      }
      else {
        [(VOTElementManager *)self _handleAudioDuckingChange:v11];
      }
      break;
    case 89:
      if (AXRuntimeCheck_SupportsVoiceoverIndepedentVolume()) {
        [(VOTElementManager *)self _handleAudioDuckingAmountChange:v4 ^ 1];
      }
      break;
    case 90:
      [(VOTElementManager *)self _handleAudioDestination:v4 ^ 1];
      break;
    case 91:
      [(VOTElementManager *)self _handleNavigationDirectionChangeWithDirection:v7];
      break;
    case 92:
      [(VOTElementManager *)self _handleActivityRotorChange:v4 ^ 1];
      break;
    case 93:
      [(VOTElementManager *)self _handleCustomRotorContent:v13 direction:v7];
      break;
    case 94:
      [(VOTElementManager *)self _handleDetectionModeMovement:v13 direction:v7];
      break;
    case 95:
      [(VOTElementManager *)self _handleScribbleMovement:v4];
      break;
    case 96:
      [(VOTElementManager *)self _handleToggleLiveRegions:v7];
      break;
    default:
      uint64_t v12 = +[NSNumber numberWithInteger:v8];
      _AXLogWithFacility();

      break;
  }
  if (sub_1000F2514(v8)) {
    self->_flags.performedRotorTextNavigation = 1;
  }
  self->_lastPressOnMediaSessionElement = -3061152000.0;
}

- (void)_handleSingleLetterSearch:(id)a3
{
  id v15 = a3;
  BOOL v4 = +[VOTKeyboardManager keyboardManager];
  unsigned int v5 = [v15 keyInfo];
  id v6 = [v4 singleLetterCommandForKeyInfo:v5];

  if (v6)
  {
    if (qword_1001EB990 != -1) {
      dispatch_once(&qword_1001EB990, &stru_1001B5538);
    }
    uint64_t v7 = [(id)qword_1001EB988 objectForKey:v6];
    uint64_t v8 = v7;
    if (v7)
    {
      uint64_t v9 = [v7 objectAtIndexedSubscript:0];
      uint64_t v10 = (int)[v9 intValue];

      uint64_t v11 = [v8 objectAtIndexedSubscript:1];
      uint64_t v12 = (int)[v11 intValue];

      [(VOTElementManager *)self _handleElementSearch:v15 rotorType:v12 direction:v10];
      goto LABEL_9;
    }
    id v13 = +[VOTOutputManager outputManager];
    uint64_t v14 = +[VOSOutputEvent BoundaryEncountered];
    [v13 sendEvent:v14];
  }
  else
  {
    uint64_t v8 = +[VOTOutputManager outputManager];
    id v13 = +[VOSOutputEvent BoundaryEncountered];
    [v8 sendEvent:v13];
  }

LABEL_9:
}

- (void)_handleSpeakScreen:(id)a3
{
  BOOL v4 = +[VOTOutputManager outputManager];
  [v4 stopSpeakingAtBoundary:0];

  id v21 = [(VOTElementManager *)self _currentElement];
  if (v21)
  {
    unsigned int v5 = +[VOTElement systemWideElement];
    [v21 frame];
    objc_msgSend(v5, "convertRect:fromContextId:", objc_msgSend(v21, "windowContextId"), v6, v7, v8, v9);
    CGFloat v11 = v10;
    CGFloat v13 = v12;
    CGFloat v15 = v14;
    CGFloat v17 = v16;

    v23.origin.double x = v11;
    v23.origin.CGFloat y = v13;
    v23.size.CGFloat width = v15;
    v23.size.CGFloat height = v17;
    double MidX = CGRectGetMidX(v23);
    v24.origin.double x = v11;
    v24.origin.CGFloat y = v13;
    v24.size.CGFloat width = v15;
    v24.size.CGFloat height = v17;
    double MidY = CGRectGetMidY(v24);
    char v20 = [sub_10007094C() sharedInstance];
    objc_msgSend(v20, "speakThisWithOptions:useAppAtPoint:errorHandler:", 12, &stru_1001B5558, MidX, MidY);
  }
  else
  {
    char v20 = [sub_10007094C() sharedInstance];
    [v20 speakThisWithOptions:12 errorHandler:&stru_1001B5578];
  }
}

- (void)handleSearchRotorUp:(id)a3
{
}

- (void)handleSearchRotorDown:(id)a3
{
}

- (void)_resetReadAllRequest
{
  self->_readAllOutputRequest = 0;
  _objc_release_x1();
}

- (void)_resetSearchType
{
  *(_WORD *)&self->_flags.performedSearch = 0;
  *(_WORD *)&self->_flags.performedFlickNavigation = 0;
}

- (void)_resetOtherTapInputModes
{
  *(_WORD *)&self->_flags.tapShouldHandleAutofill = 0;
  [(_VOTTextMarkerRange *)self->_textMarkerRange setEndMarker:0];
  [(_VOTTextMarkerRange *)self->_textMarkerRange setStartMarker:0];
  autofillCurrentElement = self->_autofillCurrentElement;
  self->_autofillCurrentElement = 0;

  textMarker = self->_textMarker;
  self->_textMarker = 0;
}

- (void)_resetRotorTextNavigation
{
  self->_flags.performedRotorTextNavigation = 0;
}

- (void)_handleRotorVoiceMovement:(int64_t)a3 withEvent:(id)a4
{
  id v6 = a4;
  [(id)VOTSharedWorkspace setPreviousRotorVoiceIdentifier:0];
  double v7 = +[AXSettings sharedInstance];
  double v8 = [v7 voiceOverVoiceRotors];

  double v9 = +[AXSettings sharedInstance];
  double v10 = [v9 voiceOverCurrentRotorVoiceIdentifier];

  if (v10 && ([v10 isEqualToString:&stru_1001B7888] & 1) == 0)
  {
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_100070FD8;
    v35[3] = &unk_1001B4C38;
    id v36 = v10;
    double v12 = (char *)[v8 indexOfObjectPassingTest:v35];
    if (a3 == 1) {
      CGFloat v13 = v12 + 1;
    }
    else {
      CGFloat v13 = v12;
    }
    if (a3 == 2) {
      unint64_t v11 = (unint64_t)(v12 - 1);
    }
    else {
      unint64_t v11 = (unint64_t)v13;
    }
  }
  else if (a3 == 2)
  {
    unint64_t v11 = (unint64_t)[v8 count] - 1;
  }
  else
  {
    unint64_t v11 = 0;
  }
  id v14 = [v8 count];
  if ((v11 & 0x8000000000000000) != 0 || v11 >= (unint64_t)v14)
  {
    uint64_t v27 = +[AXSettings sharedInstance];
    [v27 setVoiceOverCurrentRotorVoiceIdentifier:0];

    uint64_t v18 = [(id)VOTSharedWorkspace selectedActivity];
    uint64_t v28 = [v18 voiceIdentifier];

    if (!v28)
    {
      BOOL v31 = [(id)VOTSharedWorkspace votSettings];
      id v32 = [v31 systemVoiceSelection];
      uint64_t v33 = [v32 voiceId];
      uint64_t v34 = +[TTSSpeechSynthesizer voiceForIdentifier:v33];
      id v22 = [v34 name];

      id v21 = sub_100051804(off_1001EA9E8, @"default.voices.format", 0);
      +[NSString stringWithFormat:](NSString, "stringWithFormat:", v21, v22);
      id v26 = (id)objc_claimAutoreleasedReturnValue();
LABEL_26:

      uint64_t v18 = +[VOTOutputManager outputManager];
      [v18 speakSimpleString:v26];
      goto LABEL_27;
    }
    uint64_t v29 = [v18 voiceIdentifier];
    id v30 = +[TTSSpeechSynthesizer voiceForIdentifier:v29];
    id v22 = [v30 name];

    id v21 = sub_100051804(off_1001EA9E8, @"default.voices.activity.format", 0);
    CGRect v23 = [v18 name];
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", v21, v22, v23);
    id v26 = (id)objc_claimAutoreleasedReturnValue();
LABEL_25:

    goto LABEL_26;
  }
  CGFloat v15 = [v8 objectAtIndexedSubscript:v11];
  double v16 = [v15 identifier];
  CGFloat v17 = +[AXSettings sharedInstance];
  [v17 setVoiceOverCurrentRotorVoiceIdentifier:v16];

  uint64_t v18 = +[TTSAXResourceManager sharedInstance];
  id v19 = [v8 objectAtIndexedSubscript:v11];
  char v20 = [v19 voiceId];
  id v21 = [v18 speechVoiceWithVoiceId:v20];

  id v22 = [v21 localizedNameWithFootprint];
  if (v22 && [v21 isInstalled])
  {
    CGRect v23 = [v8 objectAtIndexedSubscript:v11];
    CGRect v24 = [v23 userDefinedName];
    if (v24)
    {
      id v25 = [v8 objectAtIndexedSubscript:v11];
      id v26 = [v25 userDefinedName];
    }
    else
    {
      id v26 = v22;
    }

    goto LABEL_25;
  }
  [(VOTElementManager *)self _handleRotorVoiceMovement:a3 withEvent:v6];

  id v26 = 0;
LABEL_27:
}

- (void)_handleRotorBrailleLanguageMovement:(int64_t)a3 withEvent:(id)a4
{
  unsigned __int8 v11 = 0;
  unsigned int v5 = +[VOTBrailleManager manager];
  id v6 = [v5 adjustBrailleLanguageRotorInDirection:a3 isDefault:&v11];

  double v7 = VOTLogBraille();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    double v8 = [(id)VOTSharedWorkspace selectedBrailleTable];
    *(_DWORD *)buf = 138412546;
    CGFloat v13 = v6;
    __int16 v14 = 2112;
    CGFloat v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Did set braille table. %@ (settings: %@)", buf, 0x16u);
  }
  double v9 = +[VOTBrailleManager manager];
  [v9 announceBrailleTable:v6 isDefault:v11];

  double v10 = +[NSNotificationCenter defaultCenter];
  [v10 postNotificationName:off_1001EA740 object:0];
}

- (void)_handleRotorBrailleInputLanguageMovement:(int64_t)a3 withEvent:(id)a4
{
  unsigned __int8 v11 = 0;
  unsigned int v5 = +[VOTBrailleManager manager];
  id v6 = [v5 adjustBrailleInputLanguageRotorInDirection:a3 isDefault:&v11];

  double v7 = VOTLogBraille();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    double v8 = [(id)VOTSharedWorkspace selectedBrailleInputTable];
    *(_DWORD *)buf = 138412546;
    CGFloat v13 = v6;
    __int16 v14 = 2112;
    CGFloat v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Did set braille input table. %@ (settings: %@)", buf, 0x16u);
  }
  double v9 = +[VOTBrailleManager manager];
  [v9 announceBrailleTable:v6 isDefault:v11];

  double v10 = +[NSNotificationCenter defaultCenter];
  [v10 postNotificationName:off_1001EA740 object:0];
}

- (void)_handleRotorBrailleAutoAdvanceMovement:(int64_t)a3 withEvent:(id)a4
{
  if (a3 == 1) {
    [(VOTElementManager *)self _handleBrailleIncreaseAutoAdvanceSpeed:a4];
  }
  else {
    [(VOTElementManager *)self _handleBrailleDecreaseAutoAdvanceSpeed:a4];
  }
}

- (double)_brailleMaxOrigin
{
  id v2 = +[VOTPlanarBrailleManager manager];
  [v2 imageZoom];
  double v4 = v3 + -1.0;

  unsigned int v5 = +[VOTPlanarBrailleManager manager];
  [v5 imageZoom];
  double v7 = v4 / v6;

  return v7;
}

- (void)_forceVisionRefresh
{
  if (+[VOTVisionEngine shouldAnalyzeElement:self->_currentElement])
  {
    double v3 = +[VOTWorkspace sharedWorkspace];
    id v5 = [v3 visionEngine];

    double v4 = objc_opt_new();
    objc_msgSend(v4, "setIncludeFullImageDescriptionsForValidElements:", -[VOTElementManager determineFullImageDescriptionsEnabled:](self, "determineFullImageDescriptionsEnabled:", self->_currentElement));
    objc_msgSend(v4, "setIncludeSceneDetection:", -[VOTElementManager determineSceneDetectionsEnabled:](self, "determineSceneDetectionsEnabled:", self->_currentElement));
    [v5 analyzeElement:self->_currentElement withOptions:v4];
  }
}

- (void)_handleRotor2DBrailleZoom:(int64_t)a3 withEvent:(id)a4
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v6 = [&off_1001C6FF8 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (!v6)
  {
    if (a3 != 1) {
      goto LABEL_18;
    }
    signed int v8 = 0;
    goto LABEL_15;
  }
  id v7 = v6;
  signed int v8 = 0;
  uint64_t v9 = *(void *)v30;
  do
  {
    for (i = 0; i != v7; i = (char *)i + 1)
    {
      if (*(void *)v30 != v9) {
        objc_enumerationMutation(&off_1001C6FF8);
      }
      unsigned __int8 v11 = *(void **)(*((void *)&v29 + 1) + 8 * i);
      double v12 = +[VOTPlanarBrailleManager manager];
      [v12 imageZoom];
      double v14 = v13;
      [v11 doubleValue];
      double v16 = v15;

      if (v14 >= v16) {
        ++v8;
      }
    }
    id v7 = [&off_1001C6FF8 countByEnumeratingWithState:&v29 objects:v33 count:16];
  }
  while (v7);
  if (a3 == 1)
  {
LABEL_15:
    if ((unint64_t)[&off_1001C6FF8 count] > v8)
    {
      uint64_t v17 = v8;
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v18 = +[VOTOutputManager outputManager];
    id v21 = +[VOSOutputEvent BoundaryEncountered];
    [v18 sendEvent:v21];
    goto LABEL_19;
  }
  if (v8 <= 1) {
    goto LABEL_18;
  }
  uint64_t v17 = v8 - 2;
LABEL_17:
  uint64_t v18 = [&off_1001C6FF8 objectAtIndexedSubscript:v17];
  [v18 doubleValue];
  double v20 = v19;
  id v21 = +[VOTPlanarBrailleManager manager];
  [v21 setImageZoom:v20];
LABEL_19:

  id v22 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  CGRect v23 = sub_100051804(off_1001EA9E8, @"braille.zoom.level", 0);
  CGRect v24 = +[VOTPlanarBrailleManager manager];
  [v24 imageZoom];
  id v26 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v23, v25);
  id v27 = [v22 addString:v26];

  [(VOTElementManager *)self sendRequest:v22];
  uint64_t v28 = +[VOTPlanarBrailleManager manager];
  [v28 refreshPlanarBraille];
}

- (void)_handleRotor2DBrailleEdgeIntensity:(int64_t)a3 withEvent:(id)a4
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v6 = [&off_1001C7010 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (!v6)
  {
    if (a3 != 1) {
      goto LABEL_18;
    }
    signed int v8 = 0;
    goto LABEL_15;
  }
  id v7 = v6;
  signed int v8 = 0;
  uint64_t v9 = *(void *)v30;
  do
  {
    for (i = 0; i != v7; i = (char *)i + 1)
    {
      if (*(void *)v30 != v9) {
        objc_enumerationMutation(&off_1001C7010);
      }
      unsigned __int8 v11 = *(void **)(*((void *)&v29 + 1) + 8 * i);
      double v12 = +[VOTPlanarBrailleManager manager];
      [v12 imageIntensity];
      double v14 = v13;
      [v11 doubleValue];
      double v16 = v15;

      if (v14 >= v16) {
        ++v8;
      }
    }
    id v7 = [&off_1001C7010 countByEnumeratingWithState:&v29 objects:v33 count:16];
  }
  while (v7);
  if (a3 == 1)
  {
LABEL_15:
    if ((unint64_t)[&off_1001C7010 count] > v8)
    {
      uint64_t v17 = v8;
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v18 = +[VOTOutputManager outputManager];
    id v21 = +[VOSOutputEvent BoundaryEncountered];
    [v18 sendEvent:v21];
    goto LABEL_19;
  }
  if (v8 <= 1) {
    goto LABEL_18;
  }
  uint64_t v17 = v8 - 2;
LABEL_17:
  uint64_t v18 = [&off_1001C7010 objectAtIndexedSubscript:v17];
  [v18 doubleValue];
  double v20 = v19;
  id v21 = +[VOTPlanarBrailleManager manager];
  [v21 setImageIntensity:v20];
LABEL_19:

  id v22 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  CGRect v23 = sub_100051804(off_1001EA9E8, @"braille.thickness.level", 0);
  CGRect v24 = +[VOTPlanarBrailleManager manager];
  [v24 imageIntensity];
  id v26 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v23, v25);
  id v27 = [v22 addString:v26];

  [(VOTElementManager *)self sendRequest:v22];
  uint64_t v28 = +[VOTPlanarBrailleManager manager];
  [v28 refreshPlanarBraille];
}

- (void)_handleRotor2DBraillePanHorizontal:(int64_t)a3 withEvent:(id)a4
{
  [(VOTElementManager *)self _brailleMaxOrigin];
  double v7 = v6;
  signed int v8 = +[VOTPlanarBrailleManager manager];
  [v8 imageZoom];
  double v10 = 1.0 / v9 * 0.5;

  unsigned __int8 v11 = +[VOTPlanarBrailleManager manager];
  [v11 imageOrigin];
  double v13 = v12;
  double v15 = v14;

  if (a3 == 1)
  {
    if (v13 < v7)
    {
      double v13 = v10 + v13;
      if (v13 > v7) {
        double v13 = v7;
      }
      goto LABEL_9;
    }
LABEL_8:
    double v16 = +[VOTOutputManager outputManager];
    uint64_t v17 = +[VOSOutputEvent BoundaryEncountered];
    [v16 sendEvent:v17];

    goto LABEL_9;
  }
  if (v13 <= 0.0) {
    goto LABEL_8;
  }
  double v13 = v13 - v10;
  if (v13 < 0.0) {
    double v13 = 0.0;
  }
LABEL_9:
  uint64_t v18 = +[VOTPlanarBrailleManager manager];
  objc_msgSend(v18, "setImageOrigin:", v13, v15);

  id v22 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  double v19 = AXFormatFloatWithPercentage();
  id v20 = [v22 addString:v19];

  [(VOTElementManager *)self sendRequest:v22];
  id v21 = +[VOTPlanarBrailleManager manager];
  [v21 refreshPlanarBraille];
}

- (void)_handleRotor2DBraillePanVertical:(int64_t)a3 withEvent:(id)a4
{
  [(VOTElementManager *)self _brailleMaxOrigin];
  double v7 = v6;
  signed int v8 = +[VOTPlanarBrailleManager manager];
  [v8 imageZoom];
  double v10 = 1.0 / v9 * 0.5;

  unsigned __int8 v11 = +[VOTPlanarBrailleManager manager];
  [v11 imageOrigin];
  double v13 = v12;
  double v15 = v14;

  if (a3 == 1)
  {
    if (v15 < v7)
    {
      double v15 = v10 + v15;
      if (v15 > v7) {
        double v15 = v7;
      }
      goto LABEL_9;
    }
LABEL_8:
    double v16 = +[VOTOutputManager outputManager];
    uint64_t v17 = +[VOSOutputEvent BoundaryEncountered];
    [v16 sendEvent:v17];

    goto LABEL_9;
  }
  if (v15 <= 0.0) {
    goto LABEL_8;
  }
  double v15 = v15 - v10;
  if (v15 < 0.0) {
    double v15 = 0.0;
  }
LABEL_9:
  id v22 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  uint64_t v18 = AXFormatFloatWithPercentage();
  id v19 = [v22 addString:v18];

  [(VOTElementManager *)self sendRequest:v22];
  id v20 = +[VOTPlanarBrailleManager manager];
  objc_msgSend(v20, "setImageOrigin:", v13, v15);

  id v21 = +[VOTPlanarBrailleManager manager];
  [v21 refreshPlanarBraille];
}

- (void)_handleBraille2DInvert:(id)a3
{
}

- (void)_handleRotor2DBrailleInvert:(int64_t)a3 withEvent:(id)a4
{
  id v5 = +[VOTPlanarBrailleManager manager];
  uint64_t v6 = [v5 imageInvert] ^ 1;
  double v7 = +[VOTPlanarBrailleManager manager];
  [v7 setImageInvert:v6];

  id v14 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  signed int v8 = off_1001EA9E8;
  double v9 = +[VOTPlanarBrailleManager manager];
  if ([v9 imageInvert]) {
    double v10 = @"braille.image.inverted";
  }
  else {
    double v10 = @"braille.image.uninverted";
  }
  unsigned __int8 v11 = sub_100051804(v8, v10, 0);
  id v12 = [v14 addString:v11];

  [(VOTElementManager *)self sendRequest:v14];
  double v13 = +[VOTPlanarBrailleManager manager];
  [v13 refreshPlanarBraille];
}

- (id)_localizedStringForCurrentBrailleTextMode
{
  id v2 = +[VOTPlanarBrailleManager manager];
  double v3 = (char *)[v2 mode];

  if ((unint64_t)(v3 - 1) > 2) {
    double v4 = @"braille.text.mode.images";
  }
  else {
    double v4 = *(&off_1001B5F08 + (void)(v3 - 1));
  }
  id v5 = off_1001EA9E8;

  return sub_100051804(v5, v4, 0);
}

- (void)_handleRotor2DBrailleDisplayMode:(int64_t)a3 withEvent:(id)a4
{
  uint64_t v6 = +[VOTPlanarBrailleManager manager];
  uint64_t v7 = (uint64_t)[v6 mode];

  uint64_t v8 = v7 - 1;
  if (v7 < 1) {
    uint64_t v8 = 3;
  }
  if (v7 <= 2) {
    uint64_t v9 = v7 + 1;
  }
  else {
    uint64_t v9 = 0;
  }
  if (a3 != 1) {
    uint64_t v9 = v7;
  }
  if (a3 == 2) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned __int8 v11 = +[VOTPlanarBrailleManager manager];
  [v11 setMode:v10];

  id v15 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v12 = [(VOTElementManager *)self _localizedStringForCurrentBrailleTextMode];
  id v13 = [v15 addString:v12];

  [(VOTElementManager *)self sendRequest:v15];
  id v14 = +[VOTBrailleManager manager];
  [v14 setBrailleElement:self->_currentElement];
}

- (int64_t)_adjustedRotorIndex:(int64_t)a3 inDirection:(int64_t)a4 rotorItems:(id)a5 validationBlock:(id)a6
{
  id v9 = a5;
  uint64_t v10 = (uint64_t (**)(id, void *))a6;
  if ([v9 count])
  {
    if (a4 == 2) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = 1;
    }
    int64_t v12 = a3;
    do
    {
      uint64_t v13 = v12 + v11;
      id v14 = [v9 count];
      if (v13 >= (unint64_t)v14) {
        int64_t v15 = 0;
      }
      else {
        int64_t v15 = v13;
      }
      if (v13 >= 0) {
        int64_t v12 = v15;
      }
      else {
        int64_t v12 = (int64_t)v14 - 1;
      }
      if (v12 == a3 || v10 == 0) {
        break;
      }
      uint64_t v17 = [v9 objectAtIndexedSubscript:v12];
      int v18 = v10[2](v10, v17);
    }
    while (!v18);
  }
  else
  {
    int64_t v12 = a3;
  }

  return v12;
}

- (void)_handleRotorContinusPathChange:(int64_t)a3 withEvent:(id)a4
{
  double v4 = +[VOSSettingsHelper sharedInstance];
  unsigned int v5 = [v4 isSlideToTypeEnabled];

  uint64_t v6 = +[VOSSettingsHelper sharedInstance];
  [v6 setSlideToTypeEnabled:v5 ^ 1];

  id v9 = +[VOTOutputManager outputManager];
  if (v5) {
    uint64_t v7 = @"SlideToTypeOff";
  }
  else {
    uint64_t v7 = @"SlideToTypeOn";
  }
  uint64_t v8 = sub_100051804(off_1001EA9E8, v7, 0);
  [v9 speakSimpleString:v8];
}

- (void)_handleRotorTypingModeMovement:(int64_t)a3 withEvent:(id)a4
{
  id v6 = objc_msgSend((id)VOTSharedWorkspace, "typingMode", a3, a4);
  BOOL v7 = a3 != 1;
  uint64_t v8 = 1;
  if (a3 != 1) {
    uint64_t v8 = 2;
  }
  if (v6 != (id)2) {
    BOOL v7 = v8;
  }
  if (v6 == (id)1) {
    uint64_t v9 = 2 * (a3 == 1);
  }
  else {
    uint64_t v9 = v7;
  }
  [(id)VOTSharedWorkspace setTypingMode:v9];
  id v11 = [(VOTElementManager *)self _localizedTypingModeStringForCurrentMode];
  if (v11)
  {
    uint64_t v10 = +[VOTOutputManager outputManager];
    [v10 speakSimpleString:v11];
  }
}

- (id)_localizedTypingModeStringForCurrentMode
{
  id v2 = [(id)VOTSharedWorkspace typingMode];
  if ((unint64_t)v2 > 2)
  {
    double v3 = 0;
  }
  else
  {
    double v3 = sub_100051804(off_1001EA9E8, *(&off_1001B5F20 + (void)v2), 0);
  }

  return v3;
}

- (id)_fontDisplayNameForFontName:(id)a3
{
  double v3 = +[UIFont fontWithName:a3 size:10.0];
  double v4 = (__CFString *)CTFontCopyDisplayName(v3);
  if ([(__CFString *)v4 hasPrefix:@"."])
  {
    uint64_t v5 = sub_100051804(off_1001EA9E8, @"system.font.name", 0);

    double v4 = (__CFString *)v5;
  }

  return v4;
}

- (id)_orderedMonitoredFontAttributes
{
  if (qword_1001EB9A0 != -1) {
    dispatch_once(&qword_1001EB9A0, &stru_1001B5598);
  }
  id v2 = (void *)qword_1001EB998;

  return v2;
}

- (id)_computeChangedFontAttributes:(id)a3 storedAttributes:(id)a4 haveMisspellCheck:(BOOL)a5
{
  BOOL v102 = a5;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = +[NSString string];
  uint64_t v104 = self;
  uint64_t v10 = [(VOTElementManager *)self _orderedMonitoredFontAttributes];
  id v11 = [v8 count];
  if (v8 && !v11)
  {
    v119[0] = UIAccessibilityTokenListItemLabel;
    v119[1] = AXUIAccessibilityTextAttributeHeadingLevel;
    v119[2] = AXUIAccessibilityTextAttributeCustom;
    uint64_t v12 = +[NSArray arrayWithObjects:v119 count:3];

    uint64_t v10 = (void *)v12;
  }
  firstResponderElement = v104->_firstResponderElement;
  if (firstResponderElement) {
    unsigned int v112 = [(VOTElement *)firstResponderElement shouldAnnounceFontInfo];
  }
  else {
    unsigned int v112 = 1;
  }
  long long v116 = 0u;
  long long v117 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  id obj = v10;
  id v108 = [obj countByEnumeratingWithState:&v114 objects:v118 count:16];
  if (v108)
  {
    int v113 = 0;
    uint64_t v106 = AXUIAccessibilityTextAttributeHeadingLevel;
    uint64_t v107 = *(void *)v115;
    uint64_t v105 = AXUIAccessibilityTextAttributeCustom;
    unsigned int v14 = v112;
    char v109 = 0;
    int v110 = v112 ^ 1;
    id v111 = v7;
    do
    {
      int64_t v15 = 0;
      do
      {
        if (*(void *)v115 != v107) {
          objc_enumerationMutation(obj);
        }
        double v16 = *(void **)(*((void *)&v114 + 1) + 8 * (void)v15);
        uint64_t v17 = objc_msgSend(v7, "objectForKey:", v16, v85);
        uint64_t v18 = [v8 objectForKey:v16];
        id v19 = (void *)v18;
        if (v17) {
          BOOL v20 = 1;
        }
        else {
          BOOL v20 = v18 == 0;
        }
        if (!v20
          || (v17 ? (BOOL v21 = v18 == 0) : (BOOL v21 = 0),
              v21 || v17 && ([v17 isEqual:v18] & 1) == 0))
        {
          if ([v16 isEqualToString:UIAccessibilityTokenMisspelled])
          {
            if ([v17 BOOLValue] && v102)
            {
              id v86 = sub_100051804(off_1001EA9E8, @"misspelled", 0);
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v23 = __AXStringForVariables();

              uint64_t v9 = (void *)v23;
            }
          }
          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenStyleName, v86, v101))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v24 = v17;
              if ([v24 length])
              {
                id v87 = v24;
                CFStringRef v101 = @"__AXStringForVariablesSentinel";
                uint64_t v25 = __AXStringForVariables();

                uint64_t v9 = (void *)v25;
              }
            }
          }
          if ((objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenFontFamily, v87) & v14) == 1)
          {
            id v26 = [(VOTElementManager *)v104 _fontDisplayNameForFontName:v17];
            if ([v26 length])
            {
              long long v88 = v26;
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v27 = __AXStringForVariables();

              uint64_t v9 = (void *)v27;
            }

            int v113 = 1;
          }
          if ((objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenLineSpacing, v88) & v14) == 1)
          {
            id v28 = objc_allocWithZone((Class)NSString);
            long long v29 = sub_100051804(off_1001EA9E8, @"line.spacing", 0);
            id v30 = objc_msgSend(v28, "initWithFormat:", v29, v17);

            id v89 = v30;
            CFStringRef v101 = @"__AXStringForVariablesSentinel";
            uint64_t v31 = __AXStringForVariables();

            uint64_t v9 = (void *)v31;
          }
          if ((objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenFontSize, v89) & v14) == 1)
          {
            id v32 = objc_allocWithZone((Class)NSString);
            uint64_t v33 = sub_100051804(off_1001EA9E8, @"font.size.format", 0);
            [v17 floatValue];
            uint64_t v34 = AXFormatFloat();
            id v35 = objc_msgSend(v32, "initWithFormat:", v33, v34);

            id v90 = v35;
            CFStringRef v101 = @"__AXStringForVariablesSentinel";
            uint64_t v36 = __AXStringForVariables();

            uint64_t v9 = (void *)v36;
          }
          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenForegroundColor, v90))
          {
            long long v91 = v17;
            CFStringRef v101 = @"__AXStringForVariablesSentinel";
            uint64_t v37 = __AXStringForVariables();

            uint64_t v9 = (void *)v37;
          }
          if ((objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenBold, v91) & 1) != 0
            || !(v109 & 1 | (([v16 isEqualToString:UIAccessibilityTokenFontName] & 1) == 0)))
          {
            if ([v16 isEqualToString:UIAccessibilityTokenBold])
            {
              unsigned __int8 v38 = [v17 BOOLValue];
              unsigned int v39 = [v19 BOOLValue];
            }
            else
            {
              unsigned __int8 v38 = [v17 isEqualToString:@"Helvetica Neue Medium"];
              unsigned int v39 = [v19 isEqualToString:@"Helvetica Neue Medium"];
            }
            id v40 = @"bold";
            if ((v38 & 1) != 0 || (id v40 = @"bold.not", v39))
            {
              long long v92 = sub_100051804(off_1001EA9E8, v40, 0);
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v41 = __AXStringForVariables();

              uint64_t v9 = (void *)v41;
            }
            if ((v113 | v110))
            {
              char v109 = 1;
            }
            else
            {
              id v42 = [v7 objectForKey:UIAccessibilityTokenFontFamily];
              BOOL v43 = [(VOTElementManager *)v104 _fontDisplayNameForFontName:v42];

              if ([v43 length])
              {
                long long v92 = v43;
                CFStringRef v101 = @"__AXStringForVariablesSentinel";
                uint64_t v44 = __AXStringForVariables();

                uint64_t v9 = (void *)v44;
              }

              char v109 = 1;
              int v113 = 1;
            }
          }
          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenHighlightedText, v92))
          {
            if (v17)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0 && [v17 length])
              {
                uint64_t v93 = (uint64_t)v17;
                CFStringRef v101 = @"__AXStringForVariablesSentinel";
                uint64_t v45 = __AXStringForVariables();
                goto LABEL_65;
              }
              uint64_t v46 = off_1001EA9E8;
              id v47 = @"highlighted";
            }
            else
            {
              uint64_t v46 = off_1001EA9E8;
              id v47 = @"unhighlighted";
            }
            uint64_t v93 = sub_100051804(v46, v47, 0);
            CFStringRef v101 = @"__AXStringForVariablesSentinel";
            uint64_t v45 = __AXStringForVariables();

            uint64_t v9 = (void *)v93;
LABEL_65:

            uint64_t v9 = (void *)v45;
          }
          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenItalic, v93))
          {
            unsigned __int8 v48 = [v17 BOOLValue];
            id v49 = @"italic";
            if ((v48 & 1) != 0 || (v50 = [v19 BOOLValue], id v49 = @"italic.not", v50))
            {
              double v94 = sub_100051804(off_1001EA9E8, v49, 0);
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v51 = __AXStringForVariables();

              uint64_t v9 = (void *)v51;
            }
            if (((v113 | v110) & 1) == 0)
            {
              double v94 = [v7 objectForKey:UIAccessibilityTokenFontFamily];
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v52 = __AXStringForVariables();

              int v113 = 1;
              uint64_t v9 = (void *)v52;
            }
          }
          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenUnderline, v94))
          {
            unsigned __int8 v53 = [v17 BOOLValue];
            uint64_t v54 = @"underline";
            if ((v53 & 1) != 0
              || (unsigned int v55 = [v19 BOOLValue], v54 = @"underline.not", v55))
            {
              CGRect v95 = sub_100051804(off_1001EA9E8, v54, 0);
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v56 = __AXStringForVariables();

              uint64_t v9 = (void *)v56;
            }
          }
          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenStrikethrough, v95))
          {
            unsigned __int8 v57 = [v17 BOOLValue];
            id v58 = @"strikethrough";
            if ((v57 & 1) != 0
              || (unsigned int v59 = [v19 BOOLValue], v58 = @"strikethrough.not", v59))
            {
              CGRect v96 = sub_100051804(off_1001EA9E8, v58, 0);
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v60 = __AXStringForVariables();

              uint64_t v9 = (void *)v60;
            }
          }
          if (!objc_msgSend(v16, "isEqualToString:", v106, v96)) {
            goto LABEL_93;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v61 = (uint64_t)[v17 integerValue];
            if (v61 >= 1)
            {
              if (!v19 || [v19 integerValue] != (id)v61)
              {
                id v62 = sub_100051804(off_1001EA9E8, @"element.header.text", 0);
                uint64_t v63 = AXFormatInteger();
                CGRect v97 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v62, v63);
                CFStringRef v101 = @"__AXStringForVariablesSentinel";
                uint64_t v64 = __AXStringForVariables();

                uint64_t v9 = (void *)v63;
                id v7 = v111;
                goto LABEL_92;
              }
              goto LABEL_93;
            }
          }
          else
          {
            uint64_t v61 = 0;
          }
          if (!v61 && v17 && (!v19 || [v19 integerValue]))
          {
            id v62 = sub_100051804(off_1001EA9E8, @"element.header.text.nolevel", 0);
            CGRect v97 = v62;
            CFStringRef v101 = @"__AXStringForVariablesSentinel";
            uint64_t v64 = __AXStringForVariables();
LABEL_92:

            uint64_t v9 = (void *)v64;
          }
LABEL_93:
          if (objc_msgSend(v16, "isEqualToString:", v105, v97))
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              uint64_t v65 = v17;
            }
            else {
              uint64_t v65 = 0;
            }
            id v66 = v65;
            long long v67 = v66;
            if (v66 && ([v66 isEqual:v19] & 1) == 0)
            {
              id v98 = [v67 componentsJoinedByString:@", "];
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v68 = __AXStringForVariables();

              uint64_t v9 = (void *)v68;
              id v7 = v111;
            }
          }
          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenBlockquoteLevel, v98))
          {
            id v69 = [v17 integerValue];
            if ((uint64_t)v69 > 0 || !v69 && (!v19 || [v19 integerValue]))
            {
              id v70 = sub_100051804(off_1001EA9E8, @"blockquote.level", 0);
              id v71 = AXFormatInteger();
              id v99 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v70, v71);
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v72 = __AXStringForVariables();

              id v7 = v111;
              uint64_t v9 = (void *)v72;
            }
          }
          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenIndentationLevel, v99))
          {
            id v73 = [v17 integerValue];
            if ((uint64_t)v73 > 0 || !v73 && (!v19 || [v19 integerValue]))
            {
              id v74 = sub_100051804(off_1001EA9E8, @"indentation.level", 0);
              uint64_t v75 = AXFormatInteger();
              id v100 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v74, v75);
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v76 = __AXStringForVariables();

              uint64_t v9 = (void *)v76;
            }
            id v7 = v111;
          }
          unsigned int v14 = v112;
          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenParagraphAlignment, v100))
          {
            id v77 = [v17 integerValue];
            if ((unint64_t)v77 <= 4)
            {
              id v86 = sub_100051804(off_1001EA9E8, *(&off_1001B5F38 + (void)v77), 0);
              CFStringRef v101 = @"__AXStringForVariablesSentinel";
              uint64_t v78 = __AXStringForVariables();

              unsigned int v14 = v112;
              uint64_t v9 = (void *)v78;
              id v7 = v111;
            }
          }
        }
        if (!objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenListItemLabel, v86)) {
          goto LABEL_120;
        }
        if (![v19 length])
        {
          id v80 = [v17 length];
          id v79 = @"entered.list";
          if (v80) {
            goto LABEL_119;
          }
        }
        if ([v19 length] && !objc_msgSend(v17, "length"))
        {
          id v79 = @"exited.list";
LABEL_119:
          long long v85 = sub_100051804(off_1001EA9E8, v79, 0);
          CFStringRef v101 = @"__AXStringForVariablesSentinel";
          uint64_t v81 = __AXStringForVariables();

          unsigned int v14 = v112;
          uint64_t v9 = (void *)v81;
        }
LABEL_120:

        int64_t v15 = (char *)v15 + 1;
      }
      while (v108 != v15);
      id v82 = [obj countByEnumeratingWithState:&v114 objects:v118 count:16];
      id v108 = v82;
    }
    while (v82);
  }

  if (![v8 count] || objc_msgSend(v7, "count"))
  {
    objc_msgSend(v8, "removeAllObjects", v85);
    [v8 addEntriesFromDictionary:v7];
  }
  uint64_t v83 = +[AXAttributedString axAttributedStringWithString:](AXAttributedString, "axAttributedStringWithString:", v9, v85);

  return v83;
}

- (void)_handleReadURL:(id)a3
{
  double v4 = [(VOTElementManager *)self _currentElement];
  id v11 = [v4 url];

  uint64_t v5 = [v11 absoluteString];
  id v6 = [v5 length];

  if (v6)
  {
    id v7 = +[VOTOutputRequest createRequest];
    id v8 = [v11 absoluteString];
    id v9 = [v7 addString:v8];

    [(VOTElementManager *)self sendRequest:v7];
  }
  else
  {
    id v7 = +[VOTOutputManager outputManager];
    uint64_t v10 = +[VOSOutputEvent BoundaryEncountered];
    [v7 sendEvent:v10];
  }
}

- (void)_handleReadItemHint:(id)a3
{
  id v8 = [(VOTElement *)self->_currentElement hint];
  if ([v8 length])
  {
    double v4 = [(VOTElement *)self->_currentElement hint];
    id v5 = +[VOTOutputRequest createRequest];
    id v6 = [(VOTElement *)self->_currentElement language];
    id v7 = [v5 addString:v4 withLanguage:v6];

    [(VOTElementManager *)self sendRequest:v5];
  }
  else
  {
    double v4 = +[VOTOutputManager outputManager];
    id v5 = +[VOSOutputEvent BoundaryEncountered];
    [v4 sendEvent:v5];
  }
}

- (void)_handleOutputLineCount:(id)a3
{
  if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXTextEntryTrait])
  {
    id v13 = [(VOTElement *)self->_currentElement value];
    double v4 = +[NSCharacterSet newlineCharacterSet];
    id v5 = [v13 componentsSeparatedByCharactersInSet:v4];
    id v6 = [v5 count];

    id v7 = +[VOTOutputRequest createRequest];
    id v8 = off_1001EA9E8;
    id v9 = [(id)VOTSharedWorkspace selectedLanguage];
    uint64_t v10 = sub_100051804(v8, @"line.count", v9);
    id v11 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v10, v6);
    id v12 = [v7 addString:v11];

    [(VOTElementManager *)self sendRequest:v7];
  }
  else
  {
    id v13 = +[VOTOutputManager outputManager];
    id v7 = +[VOSOutputEvent BoundaryEncountered];
    [v13 sendEvent:v7];
  }
}

- (void)_handleReadLine:(id)a3
{
  id v16 = [(VOTElementManager *)self _currentElement];
  if ([v16 doesHaveTraits:kAXIsEditingTrait])
  {
    id location = [v16 selectedTextRange];
    id v5 = [v16 value];
  }
  else
  {
    if (self->_elementUnitOutputRange.location == 0x7FFFFFFF) {
      id location = 0;
    }
    else {
      id location = self->_elementUnitOutputRange.location;
    }
    id v5 = [v16 visibleText];
  }
  id v6 = v5;
  id v7 = (char *)objc_msgSend(v5, "ax_lineRangeForPosition:", location);
  if (v7 == (char *)0x7FFFFFFF || (v9 = v7, uint64_t v10 = v8, &v7[v8] > [v6 length]))
  {
    id v11 = 0;
  }
  else
  {
    id v11 = objc_msgSend(v6, "substringWithRange:", v9, v10);
  }
  if ([v11 length])
  {
    id v12 = +[VOTOutputRequest createRequest];
    id v13 = [v16 language];
    id v14 = [v12 addString:v11 withLanguage:v13];

    [(VOTElementManager *)self sendRequest:v12];
  }
  else
  {
    id v12 = +[VOTOutputManager outputManager];
    int64_t v15 = +[VOSOutputEvent BoundaryEncountered];
    [v12 sendEvent:v15];
  }
}

- (id)_phoneticStringForLetter:(id)a3 language:(id)a4
{
  elementManagerThread = self->_elementManagerThread;
  id v7 = a4;
  id v8 = a3;
  if (([(SCRCThread *)elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v9 = [(VOTElement *)self->_firstResponderElement application];
  uint64_t v10 = [v9 currentSoftwareKeyboardLanguage];
  id v11 = sub_100052754(v8, v7, v10);

  return v11;
}

- (void)_handleReadWord:(id)a3
{
  double v4 = [(VOTElementManager *)self _currentElement];
  if ([v4 doesHaveTraits:kAXIsEditingTrait])
  {
    id v5 = [v4 value];
    id v6 = objc_msgSend(v5, "wordFromPosition:inDirection:", objc_msgSend(v4, "selectedTextRange"), 1);
    if (v6 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
LABEL_10:
      id v13 = 0;
      goto LABEL_12;
    }
    NSUInteger location = (NSUInteger)v6;
    id v9 = v7;
    unint64_t v10 = (unint64_t)v7 + (void)v6;
  }
  else
  {
    id v11 = [v4 visibleText];
    id v5 = v11;
    NSUInteger location = self->_elementUnitOutputRange.location;
    NSUInteger length = self->_elementUnitOutputRange.length;
    if (length) {
      id v9 = (id)(length + 1);
    }
    else {
      id v9 = [v11 length];
    }
    if (location == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_10;
    }
    unint64_t v10 = (unint64_t)v9 + location;
  }
  if (v10 > (unint64_t)[v5 length]) {
    goto LABEL_10;
  }
  id v13 = objc_msgSend(v5, "substringWithRange:", location, v9);
LABEL_12:

  if ([v13 length])
  {
    long long v29 = v4;
    uint64_t v14 = (uint64_t)[v13 length];
    int64_t v15 = +[NSMutableString string];
    id v16 = v15;
    int64_t v17 = self->_readWordCyclingCount % 3;
    if (v17)
    {
      if (v14 >= 1)
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          unsigned __int16 v30 = 0;
          id v19 = [v13 characterAtIndex:i];
          unsigned __int16 v30 = (unsigned __int16)v19;
          if (v19 == 32)
          {
            BOOL v20 = [(id)VOTSharedWorkspace selectedLanguage];
            sub_10005215C(32, @"UnicodeHex.", @"VOTOutputPunctuation", v20);
            BOOL v21 = (__CFString *)objc_claimAutoreleasedReturnValue();

            if (!v21) {
              BOOL v21 = @" ";
            }
            [v16 appendString:v21];
          }
          else if (v17 == 2)
          {
            id v22 = +[NSString stringWithCharacters:&v30 length:1];
            uint64_t v23 = [(VOTElementManager *)self _phoneticStringForLetter:v22 language:0];

            if (v23) {
              [v16 appendFormat:@"%@", v23];
            }
            else {
              objc_msgSend(v16, "appendFormat:", @"%C", v30);
            }
          }
          else if (v17 == 1)
          {
            objc_msgSend(v16, "appendFormat:", @"%C", v19);
          }
          if (v14 - 1 != i) {
            [v16 appendString:@", "];
          }
        }
      }
    }
    else
    {
      [v15 setString:v13];
    }
    id v26 = +[VOTOutputRequest createRequest];
    double v4 = v29;
    uint64_t v27 = [v29 language];
    id v28 = [v26 addString:v16 withLanguage:v27];

    [(VOTElementManager *)self sendRequest:v26];
    ++self->_readWordCyclingCount;
  }
  else
  {
    id v24 = +[VOTOutputManager outputManager];
    uint64_t v25 = +[VOSOutputEvent BoundaryEncountered];
    [v24 sendEvent:v25];
  }
}

- (void)_handleCursorMovementByTextSegment:(id)a3
{
  id v8 = a3;
  double v4 = [v8 command];
  if ([v4 isEqualToString:kVOTEventCommandNextTextSegment]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }

  id v6 = [v8 objectForIndex:118];
  id v7 = [v6 integerValue];

  if (v7 == (id)2)
  {
    [(VOTElementManager *)self _handleWordMovement:v8 direction:v5];
  }
  else if (v7 == (id)3)
  {
    [(VOTElementManager *)self _handleGenericTextSegmentMovement:v8 direction:v5 granulary:3];
  }
  else
  {
    [(VOTElementManager *)self _handleLetterMovement:v8 direction:v5];
  }
}

- (void)_moveCursorForElement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5
{
  id v8 = a3;
  id v9 = [v8 textInputElement];
  unint64_t v10 = v9;
  if (v9)
  {
    id v11 = v9;

    id v8 = v11;
  }
  _NSRange v66 = (_NSRange)xmmword_10016E510;
  if ((unint64_t)(a5 - 2) > 4) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = qword_10016E7F8[a5 - 2];
  }
  id v13 = [v8 uiElement];
  BOOL v14 = a4 == 1;
  BOOL v15 = a4 == 1;
  uint64_t v16 = !v14;
  id v17 = [v8 selectedTextRange];
  id v19 = objc_msgSend(v13, "nextCursorRangeInDirection:unit:outputRange:currentCursorRange:", v16, v12, &v66, v17, v18);
  NSUInteger v21 = v20;

  id v22 = [(VOTElementManager *)self _characterRangeWithFaultTolerance:v19 forward:v15 element:v8];
  if (v22 == (id)0x7FFFFFFF) {
    NSUInteger v23 = v21;
  }
  else {
    NSUInteger v23 = 0;
  }
  if (v22 != (id)0x7FFFFFFF) {
    id v19 = v22;
  }
  id v24 = +[AXSubsystemVoiceOver sharedInstance];
  unsigned __int8 v25 = [v24 ignoreLogging];

  if ((v25 & 1) == 0)
  {
    id v26 = +[AXSubsystemVoiceOver identifier];
    uint64_t v27 = AXLoggerForFacility();

    os_log_type_t v28 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v64 = v10;
      uint64_t v29 = AXColorizeFormatLog();
      v69.NSUInteger length = v23;
      unsigned __int16 v30 = (void *)v29;
      v69.NSUInteger location = (NSUInteger)v19;
      NSUInteger length = v69.length;
      uint64_t v63 = NSStringFromRange(v69);
      id v32 = _AXStringForArgs();

      if (os_log_type_enabled(v27, v28))
      {
        *(_DWORD *)buf = 138543362;
        uint64_t v68 = v32;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}@", buf, 0xCu);
      }

      NSUInteger v23 = length;
      unint64_t v10 = v64;
    }
  }
  if (a5 == 2) {
    [(NSMutableDictionary *)self->_lastSeenFontProperties removeObjectForKey:UIAccessibilityTokenMisspelled];
  }
  if (a5 == 1 || v66.location == 0x7FFFFFFF)
  {
    double width = CGRectZero.size.width;
    double height = CGRectZero.size.height;
    double x = CGRectZero.origin.x;
    double y = CGRectZero.origin.y;
    self->_highlightedCharacterRange = (_NSRange)xmmword_10016E510;
    double v47 = width;
    double v45 = y;
    double v43 = CGRectZero.origin.x;
  }
  else
  {
    [v8 boundsForRange:v66];
    double x = v33;
    double y = v35;
    double width = v37;
    double v40 = v39;
    uint64_t v41 = +[VOTElement systemWideElement];
    objc_msgSend(v41, "convertRect:fromContextId:", objc_msgSend(v8, "windowContextId"), x, y, width, v40);
    double v43 = v42;
    double v45 = v44;
    double v47 = v46;
    double height = v48;

    self->_highlightedCharacterRange = v66;
  }
  if (v19 == (id)0x7FFFFFFF)
  {
    unsigned int v50 = +[VOTOutputManager outputManager];
    uint64_t v51 = +[VOSOutputEvent BoundaryEncountered];
    [v50 sendEvent:v51];
  }
  else
  {
    uint64_t v52 = +[AXSubsystemVoiceOver sharedInstance];
    unsigned __int8 v53 = [v52 ignoreLogging];

    if ((v53 & 1) == 0)
    {
      uint64_t v54 = +[AXSubsystemVoiceOver identifier];
      unsigned int v55 = AXLoggerForFacility();

      os_log_type_t v56 = AXOSLogLevelFromAXLogLevel();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v65 = v10;
        unsigned __int8 v57 = AXColorizeFormatLog();
        v70.NSUInteger location = (NSUInteger)v19;
        NSUInteger v58 = v23;
        v70.NSUInteger length = v23;
        uint64_t v63 = NSStringFromRange(v70);
        unsigned int v59 = _AXStringForArgs();

        if (os_log_type_enabled(v55, v56))
        {
          *(_DWORD *)buf = 138543362;
          uint64_t v68 = v59;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "%{public}@", buf, 0xCu);
        }

        NSUInteger v23 = v58;
        unint64_t v10 = v65;
      }
    }
    -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:isVoiceOverSelectionMovement:](self, "_setSelectedTextRange:onElement:refreshBraille:isVoiceOverSelectionMovement:", v19, v23, v8, 1, 1, v63);
    uint64_t v60 = +[VOTOutputManager outputManager];
    uint64_t v61 = +[VOSOutputEvent InsertionPointDidMove];
    [v60 sendEvent:v61];

    v72.origin.double x = CGRectZero.origin.x;
    v72.origin.double y = CGRectZero.origin.y;
    v72.size.double width = CGRectZero.size.width;
    v72.size.double height = CGRectZero.size.height;
    v71.origin.double x = v43;
    v71.origin.double y = v45;
    v71.size.double width = v47;
    v71.size.double height = height;
    if (!CGRectEqualToRect(v71, v72))
    {
      id v62 = +[VOTDisplayManager displayManager];
      objc_msgSend(v62, "setCursorFrame:", v43, v45, v47, height);

      self->_textRangeBeingDisplayed = 1;
      objc_msgSend(v8, "scrollRectToVisible:withCompletion:", 0, x, y, width, 10.0);
    }
    self->_cursorBorderHitCount = 0;
  }
}

- (void)_handleCharacterMovement:(id)a3
{
  id v6 = a3;
  double v4 = [v6 command];
  if ([v4 isEqualToString:kVOTEventCommandNextCharacter]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }

  [(VOTElementManager *)self setInTextSelection:0];
  [(VOTElementManager *)self _handleLetterMovement:v6 direction:v5];
}

- (void)_handleWordMovement:(id)a3
{
  id v6 = a3;
  double v4 = [v6 command];
  if ([v4 isEqualToString:kVOTEventCommandNextWord]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }

  [(VOTElementManager *)self setInTextSelection:0];
  [(VOTElementManager *)self _handleWordMovement:v6 direction:v5];
}

- (void)_handleLetterMovement:(id)a3 direction:(int64_t)a4
{
  id obj = [(VOTElementManager *)self _currentElement];
  if ([obj isEqual:self->_firstResponderElement]) {
    objc_storeStrong((id *)&self->_firstResponderElement, obj);
  }
  [(VOTElementManager *)self setInTextSelection:0];
  if ([obj isReadingContent])
  {
    [(VOTElementManager *)self _handleBookContentMovement:obj direction:a4 unit:1 generateOutput:1];
    goto LABEL_13;
  }
  if ([obj doesHaveTraits:kAXKeyboardKeyTrait]
    && ([obj doesHaveTraits:kAXAutoCorrectCandidateTrait] & 1) == 0)
  {
    id v6 = [(VOTElement *)self->_lastApplication firstResponderElement];
  }
  else
  {
    if (![obj doesHaveTraits:kAXIsEditingTrait]) {
      goto LABEL_12;
    }
    id v6 = obj;
  }
  id v7 = v6;
  if (v6)
  {
    [(VOTElementManager *)self _moveCursorForElement:v6 direction:a4 unit:1];

    goto LABEL_13;
  }
LABEL_12:
  [(VOTElementManager *)self _outputNextTextSegmentUnit:1 direction:a4];
LABEL_13:
}

- (void)_handleWordMovement:(id)a3 direction:(int64_t)a4
{
  id obj = [(VOTElementManager *)self _currentElement];
  if ([obj isEqual:self->_firstResponderElement]) {
    objc_storeStrong((id *)&self->_firstResponderElement, obj);
  }
  [(VOTElementManager *)self setInTextSelection:0];
  unsigned int v6 = [obj doesHaveTraits:kAXKeyboardKeyTrait];
  if ([obj isReadingContent])
  {
    [(VOTElementManager *)self _handleBookContentMovement:obj direction:a4 unit:2 generateOutput:1];
  }
  else if (([obj doesHaveTraits:kAXIsEditingTrait] | v6))
  {
    if (v6)
    {
      uint64_t v7 = [(VOTElement *)self->_lastApplication firstResponderElement];

      id v8 = (id)v7;
    }
    else
    {
      id v8 = obj;
    }
    id obj = v8;
    [(VOTElementManager *)self _moveCursorForElement:v8 direction:a4 unit:2];
  }
  else
  {
    [(VOTElementManager *)self _outputNextTextSegmentUnit:2 direction:a4];
  }
}

- (void)_finishHandlingLineMovementInWeb:(id)a3 direction:(id)a4 withCurrentElement:(id)a5 markerArray:(id)a6 textObjects:(id)a7 existingRequest:(id)a8
{
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = [a4 integerValue];
  id v20 = [(VOTElementManager *)self _currentElement];

  if (v20 == v15)
  {
    [v15 textMarkerFrame:v16];
    double v24 = v23;
    double v26 = v25;
    if (v21 >= 4.0) {
      double v27 = v21;
    }
    else {
      double v27 = 4.0;
    }
    if (v22 >= 4.0) {
      double v28 = v22;
    }
    else {
      double v28 = 4.0;
    }
    uint64_t v29 = +[VOTElement systemWideElement];
    objc_msgSend(v29, "convertRect:fromContextId:", objc_msgSend(v15, "windowContextId"), v24, v26, v27, v28);
    self->_lineFrame.origin.double x = v30;
    self->_lineFrame.origin.double y = v31;
    self->_lineFrame.size.double width = v32;
    self->_lineFrame.size.double height = v33;

    uint64_t v34 = +[VOTDisplayManager displayManager];
    objc_msgSend(v34, "setCursorFrame:", self->_lineFrame.origin.x, self->_lineFrame.origin.y, self->_lineFrame.size.width, self->_lineFrame.size.height);

    self->_textRangeBeingDisplayed = 1;
    double v35 = VOTLogElement();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v36 = NSStringFromCGRect(self->_lineFrame);
      int v37 = 138543618;
      unsigned __int8 v38 = v36;
      __int16 v39 = 2114;
      id v40 = v17;
      _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "got data %{public}@ == %{public}@", (uint8_t *)&v37, 0x16u);
    }
    if ([(NSArray *)self->_lineArray count]) {
      [(VOTElementManager *)self _handleLineMovementInWeb:v14 direction:v19 existingRequest:v18];
    }
  }
}

- (void)_handleLineMovementInWeb:(id)a3 direction:(int64_t)a4 existingRequest:(id)a5
{
  id v7 = a3;
  id v8 = [(VOTElementManager *)self _currentElement];
  p_lineArradouble y = &self->_lineArray;
  lineArradouble y = self->_lineArray;
  if (lineArray)
  {
    unint64_t lineArrayPosition = self->_lineArrayPosition;
    if (lineArrayPosition < [(NSArray *)lineArray count])
    {
      if (a5) {
        uint64_t v12 = (VOTOutputRequest *)a5;
      }
      else {
        uint64_t v12 = objc_alloc_init(VOTOutputRequest);
      }
      id v16 = v12;
      double v21 = [(NSArray *)self->_lineArray objectAtIndex:self->_lineArrayPosition];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          CGFloat v30 = +[NSCharacterSet whitespaceCharacterSet];
          CGFloat v31 = [(NSData *)v21 stringByTrimmingCharactersInSet:v30];

          CGFloat v32 = VOTLogElement();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
            sub_10011E67C((uint64_t)v31);
          }

          if (![(__CFString *)v31 length])
          {
            if (a4 == 1) {
              uint64_t v81 = 1;
            }
            else {
              uint64_t v81 = -1;
            }
            self->_lineArrayPosition += v81;
            -[VOTElementManager _handleLineMovementInWeb:direction:existingRequest:](self, "_handleLineMovementInWeb:direction:existingRequest:", v7);

            goto LABEL_106;
          }
          CGFloat v33 = v16;
          uint64_t v34 = +[VOTDisplayManager displayManager];
          objc_msgSend(v34, "setCursorFrame:", self->_lineFrame.origin.x, self->_lineFrame.origin.y, self->_lineFrame.size.width, self->_lineFrame.size.height);

          self->_textRangeBeingDisplayed = 1;
          double v35 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
          uint64_t v36 = [(__CFString *)v31 stringByTrimmingCharactersInSet:v35];
          id v37 = [v36 length];

          if (!v37)
          {

            CGFloat v31 = @"\n";
          }
          id v16 = v33;
          unsigned __int8 v38 = [(VOTOutputRequest *)v33 elementHeadersForOutput];

          if (v38) {
            [(VOTElement *)self->_currentElement applyHeaderElementsToRequest:v33];
          }
          id v39 = [(VOTOutputRequest *)v33 addString:v31];
          id v40 = [(VOTOutputRequest *)v33 lastAction];
          [v40 setPerformPunctuationTranslation:1];

          uint64_t v41 = [(VOTOutputRequest *)v33 lastAction];
          [v41 setReplaceCommas:1];
        }
        goto LABEL_69;
      }
      [(VOTElementManager *)self _addDescription:v21 toRequest:v16 withOptions:1];
      [(VOTElementManager *)self _setCurrentElement:v21];
      v101[0] = _NSConcreteStackBlock;
      v101[1] = 3221225472;
      v101[2] = sub_1000754A0;
      v101[3] = &unk_1001B3448;
      v101[4] = self;
      double v24 = v21;
      BOOL v102 = v24;
      [(NSData *)v24 scrollToElementForDirectional:1 withCompletion:v101];
      double v25 = [(NSData *)v24 textMarkerRange];
      double v26 = v25;
      double v27 = (unsigned char *)self->_lineArrayPosition;
      if (a4 == 1)
      {
        if (v27 != (char *)[(NSArray *)*p_lineArray count] - 1
          || (unint64_t)[v26 count] < 2)
        {
          goto LABEL_68;
        }
        double v28 = v26;
        uint64_t v29 = 1;
      }
      else
      {
        if (v27 || ![v25 count]) {
          goto LABEL_68;
        }
        double v28 = v26;
        uint64_t v29 = 0;
      }
      uint64_t v54 = [v28 objectAtIndex:v29];
      textMarker = self->_textMarker;
      self->_textMarker = v54;

LABEL_68:
LABEL_69:
      os_log_type_t v56 = VOTLogElement();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG)) {
        sub_10011E5E8();
      }

      [(VOTElementManager *)self sendRequest:v16];
      int64_t v57 = a4;
      if (a4 != 1) {
        int64_t v57 = -1;
      }
      self->_lineArrayPosition += v57;
      goto LABEL_106;
    }
    id v13 = *p_lineArray;
  }
  else
  {
    id v13 = 0;
  }
  *p_lineArradouble y = 0;
  self->_unint64_t lineArrayPosition = 0;

  uint64_t v14 = kAXIsEditingTrait;
  NSUInteger location = (id *)&self->_lineArray;
  if ([v8 doesHaveTraits:kAXIsEditingTrait])
  {
    id v15 = v8;
  }
  else
  {
    id v15 = [(VOTElementManager *)self webEditableAncestor:v8];
  }
  id v16 = v15;
  id v17 = [v8 textMarkerRange];
  id v18 = v17;
  id v90 = a5;
  long long v91 = v7;
  uint64_t v87 = v14;
  if (self->_textMarker)
  {
    id v19 = VOTLogElement();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
      sub_10011E5B4();
    }

    p_textMarker = &self->_textMarker;
    double v21 = self->_textMarker;
    goto LABEL_40;
  }
  if (v16)
  {
    double v22 = [(VOTOutputRequest *)v16 textMarkerRangeForSelection];
    double v23 = v22;
    p_textMarker = &self->_textMarker;
    if (a4 == 1) {
      [v22 lastObject];
    }
    else {
    double v21 = [v22 firstObject];
    }
    double v42 = VOTLogElement();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG)) {
      sub_10011E580();
    }

LABEL_39:
LABEL_40:
    id v89 = v18;
    long long v92 = v16;
    if ([0 count])
    {
      double v43 = 0;
      double v44 = 0;
      double v45 = 0;
      goto LABEL_77;
    }
    double v45 = 0;
    double v44 = 0;
    double v46 = 0;
    while (1)
    {
      double v47 = VOTLogElement();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138478083;
        uint64_t v104 = v8;
        __int16 v105 = 2113;
        uint64_t v106 = v21;
        _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "start: %{private}@ -- %{private}@", buf, 0x16u);
      }

      id v48 = v45;
      double v45 = +[NSMutableArray array];

      if (a4 == 1)
      {
        uint64_t v49 = [v8 textLineEndMarker:v21];

        if (v49)
        {
          [v45 addObject:v21];
          unsigned int v50 = v45;
          uint64_t v51 = v49;
LABEL_50:
          [v50 addObject:v51];
          double v44 = (void *)v49;
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v49 = [v8 textLineStartMarker:v21];

        if (v49)
        {
          [v45 addObject:v49];
          unsigned int v50 = v45;
          uint64_t v51 = (uint64_t)v21;
          goto LABEL_50;
        }
      }
      double v44 = 0;
LABEL_52:
      if ([v45 count] != (id)2) {
        goto LABEL_76;
      }
      if ([v48 isEqual:v45])
      {

        double v45 = 0;
        goto LABEL_76;
      }
      double v43 = [v8 textMarkerArrayOfText:v45];

      uint64_t v52 = VOTLogElement();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138478083;
        uint64_t v104 = v45;
        __int16 v105 = 2113;
        uint64_t v106 = (NSData *)v43;
        _os_log_debug_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "markers: %{private}@ got textObjs: %{private}@", buf, 0x16u);
      }

      if (!v43)
      {
        double v46 = 0;
LABEL_76:

        double v43 = v46;
LABEL_77:
        if ([v45 count] == (id)2)
        {
          objc_storeStrong(location, v43);
          if (a4 == 1) {
            NSUInteger v58 = 0;
          }
          else {
            NSUInteger v58 = (char *)[*location count] - 1;
          }
          self->_unint64_t lineArrayPosition = (int64_t)v58;
          objc_storeStrong((id *)p_textMarker, v44);
          id v62 = [v45 objectAtIndex:0];
          [(_VOTTextMarkerRange *)self->_textMarkerRange setStartMarker:v62];

          uint64_t v63 = [v45 objectAtIndex:1];
          [(_VOTTextMarkerRange *)self->_textMarkerRange setEndMarker:v63];

          uint64_t v64 = [(_VOTTextMarkerRange *)self->_textMarkerRange startMarker];
          uint64_t v65 = [v8 rangeForTextMarker:v64];

          _NSRange v66 = [v8 textMarkerRange];
          uint64_t v61 = v66;
          if (v65 != (unsigned char *)0x7FFFFFFF)
          {
            long long v67 = [v66 firstObject];
            uint64_t v68 = [v8 rangeForTextMarker:v67];

            self->_elementUnitIndedouble x = v65 - v68;
          }
          NSRange v69 = [v8 elementForTextMarker:v44];
          NSRange v70 = VOTLogElement();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG)) {
            sub_10011E470((uint64_t)v8);
          }

          if (!v69
            || ([v69 isEqual:v8] & 1) != 0
            || ([v69 accessibleAncestor],
                CGRect v71 = objc_claimAutoreleasedReturnValue(),
                unsigned __int8 v72 = [v71 isEqual:v8],
                v71,
                (v72 & 1) != 0))
          {
            id v73 = +[NSNumber numberWithInteger:a4];
            [(VOTElementManager *)self _finishHandlingLineMovementInWeb:v91 direction:v73 withCurrentElement:v8 markerArray:v45 textObjects:v43 existingRequest:0];
          }
          else
          {
            [(VOTElementManager *)self _setCurrentElement:v69 isProtectedApp:0 shouldResetTextSelection:1 shouldResetCharacterRange:1 ignoreIsAccessibilityElementCheck:1];
            id v78 = +[VOTOutputRequest createRequest];
            [(VOTElementManager *)self _prepareElementOutputHeaders:v69 currentElement:v8 request:v78];
            objc_storeStrong(location, v43);
            v94[0] = _NSConcreteStackBlock;
            v94[1] = 3221225472;
            v94[2] = sub_1000754D8;
            v94[3] = &unk_1001B55C0;
            v94[4] = self;
            id v95 = v91;
            int64_t v100 = a4;
            id v96 = v69;
            id v97 = v45;
            id v98 = v43;
            id v99 = v78;
            id v73 = v78;
            [v96 scrollToElementForDirectional:1 withCompletion:v94];
          }
          if (v92)
          {
            if ([v8 doesHaveTraits:v87])
            {
              if ([(VOTOutputRequest *)v92 isEqual:v8])
              {
LABEL_97:
                if (a4 == 1) {
                  [v45 lastObject];
                }
                else {
                uint64_t v76 = [v45 firstObject];
                }
                -[VOTOutputRequest setSelectionToTextMarker:](v92, "setSelectionToTextMarker:", v76, v84, v85, v86);

                goto LABEL_101;
              }
            }
            else
            {
              id v74 = [(VOTElementManager *)self webEditableAncestor:v8];
              unsigned __int8 v75 = [(VOTOutputRequest *)v92 isEqual:v74];

              if (v75) {
                goto LABEL_97;
              }
            }
            [(VOTElementManager *)self webEditableAncestor:v8];
            v86 = long long v85 = v8;
            id v84 = v92;
            _AXAssert();

            goto LABEL_97;
          }
LABEL_101:
        }
        else
        {
          unsigned int v59 = +[VOTOutputManager outputManager];
          uint64_t v60 = +[VOSOutputEvent BoundaryEncountered];
          [v59 sendEvent:v60];

          uint64_t v61 = VOTLogElement();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG)) {
            sub_10011E4E4();
          }
        }
        id v77 = v89;

        id v16 = v92;
LABEL_103:

        a5 = v90;
        id v7 = v91;
        goto LABEL_104;
      }
      if (![v43 count])
      {
        if (a4 == 1) {
          [v8 textNextMarker:v21];
        }
        else {
        uint64_t v53 = [v8 textPreviousMarker:v21];
        }

        double v21 = (NSData *)v53;
      }

      double v46 = v43;
      if ([v43 count]) {
        goto LABEL_77;
      }
    }
  }
  if ([v17 count])
  {
    p_textMarker = &self->_textMarker;
    double v21 = [v18 objectAtIndex:0];
    double v23 = VOTLogElement();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
      sub_10011E54C();
    }
    goto LABEL_39;
  }
  id v77 = v18;
  id v79 = +[AXSubsystemVoiceOver sharedInstance];
  unsigned __int8 v80 = [v79 ignoreLogging];

  if (v80)
  {
    double v21 = 0;
  }
  else
  {
    id v82 = +[AXSubsystemVoiceOver identifier];
    double v43 = AXLoggerForFacility();

    os_log_type_t v83 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v43, v83))
    {
      double v44 = AXColorizeFormatLog();
      double v45 = _AXStringForArgs();
      if (os_log_type_enabled(v43, v83))
      {
        *(_DWORD *)buf = 138543362;
        uint64_t v104 = v45;
        _os_log_impl((void *)&_mh_execute_header, v43, v83, "%{public}@", buf, 0xCu);
      }
      double v21 = 0;
      goto LABEL_103;
    }
    double v21 = 0;
LABEL_104:
  }
LABEL_106:
}

- (void)_handleLineMovement:(id)a3
{
  id v6 = a3;
  double v4 = [v6 command];
  if ([v4 isEqualToString:kVOTEventCommandNextLine]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }

  [(VOTElementManager *)self _handleGenericTextSegmentMovement:v6 direction:v5 granulary:3];
}

- (void)_handleSentenceMovement:(id)a3
{
  id v6 = a3;
  double v4 = [v6 command];
  if ([v4 isEqualToString:kVOTEventCommandNextSentence]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }

  [(VOTElementManager *)self _handleGenericTextSegmentMovement:v6 direction:v5 granulary:5];
}

- (void)_handleParagraphMovement:(id)a3
{
  id v6 = a3;
  double v4 = [v6 command];
  if ([v4 isEqualToString:kVOTEventCommandNextParagraph]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }

  [(VOTElementManager *)self _handleGenericTextSegmentMovement:v6 direction:v5 granulary:6];
}

- (void)_handleAdjustTextSelectionSegmentType:(id)a3
{
  id v6 = a3;
  double v4 = [v6 command];
  if ([v4 isEqualToString:kVOTEventCommandNextTextSegmentType]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }

  [(VOTElementManager *)self _handleRotorTextSelectionMovement:v6 direction:v5];
}

- (void)_handleRotorTextSelectionMovement:(id)a3 direction:(int64_t)a4
{
  self->_inTextProcessingRotorMode = 1;
  id v6 = [(VOTElementManager *)self textSelectionMovementManager];
  id v7 = v6;
  if (a4 == 1) {
    [v6 nextSegment];
  }
  else {
    [v6 previousSegment];
  }

  id v8 = [(VOTElementManager *)self textSelectionMovementManager];
  id v11 = [v8 localizedSegmentNameForSelection];

  id v9 = [(id)VOTSharedWorkspace selectedLanguage];
  id v10 = sub_10000ABF8(v11, 0, v9);
}

- (void)_handleTextDocumentMovement:(id)a3
{
  id v11 = a3;
  double v4 = [(VOTElementManager *)self _currentElement];
  if ([v4 doesHaveAllTraits:kAXTextEntryTrait | kAXIsEditingTrait])
  {
    uint64_t v5 = [v11 command];
    unsigned __int8 v6 = [v5 isEqualToString:kVOTEventCommandDocumentTop];

    if (v6)
    {
      id v7 = 0;
    }
    else
    {
      id v10 = [v4 value];
      id v7 = [v10 length];
    }
    objc_msgSend(v4, "setSelectedTextRange:refreshBraille:", v7, 0, 1);
  }
  else
  {
    id v8 = +[VOTOutputManager outputManager];
    id v9 = +[VOSOutputEvent BoundaryEncountered];
    [v8 sendEvent:v9];
  }
}

- (void)_handleTextWordMovement:(id)a3
{
  double v4 = [a3 command];
  unsigned __int8 v5 = [v4 isEqualToString:kVOTEventCommandFirstWord];

  id v21 = [(VOTElementManager *)self _currentElement];
  if ([v21 doesHaveAllTraits:kAXTextEntryTrait | kAXIsEditingTrait])
  {
    unsigned __int8 v6 = [v21 value];
    id v7 = v6;
    if (v5)
    {
      id v8 = 0;
      uint64_t v9 = 1;
    }
    else
    {
      id v8 = [v6 length];
      uint64_t v9 = 2;
    }
    objc_msgSend((id)VOTSharedWorkspace, "setSuppressSelectionChangeNotificationCount:", (char *)objc_msgSend((id)VOTSharedWorkspace, "suppressSelectionChangeNotificationCount") + 1);
    -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:](self, "_setSelectedTextRange:onElement:refreshBraille:", v8, 0, v21, 1);
    id v11 = +[VOTOutputManager outputManager];
    uint64_t v12 = +[VOSOutputEvent InsertionPointDidMove];
    [v11 sendEvent:v12];

    id v13 = (char *)[v7 wordFromPosition:v8 inDirection:v9];
    if (v13 == (char *)0x7FFFFFFFFFFFFFFFLL || (v15 = v13, uint64_t v16 = v14, &v13[v14] > [v7 length]))
    {
      id v10 = 0;
    }
    else
    {
      id v10 = objc_msgSend(v7, "substringWithRange:", v15, v16);
    }
    if ([v10 length])
    {
      id v17 = +[VOTOutputRequest createRequest];
      id v18 = [v21 language];
      id v19 = [v17 addString:v10 withLanguage:v18];

      [(VOTElementManager *)self sendRequest:v17];
    }
    else
    {
      id v17 = +[VOTOutputManager outputManager];
      id v20 = +[VOSOutputEvent BoundaryEncountered];
      [v17 sendEvent:v20];
    }
  }
  else
  {
    id v7 = +[VOTOutputManager outputManager];
    id v10 = +[VOSOutputEvent BoundaryEncountered];
    [v7 sendEvent:v10];
  }
}

- (void)_handleGenericTextSegmentMovement:(id)a3 direction:(int64_t)a4 granulary:(int64_t)a5
{
  id v10 = a3;
  id v8 = [(VOTElementManager *)self _currentElement];
  if ([v8 isEqual:self->_firstResponderElement]) {
    objc_storeStrong((id *)&self->_firstResponderElement, v8);
  }
  [(VOTElementManager *)self setInTextSelection:0];
  if ([v8 doesHaveTraits:kAXWebContentTrait])
  {
    if (a5 == 3)
    {
      [(VOTElementManager *)self _handleLineMovementInWeb:v10 direction:a4 existingRequest:0];
      goto LABEL_14;
    }
  }
  else if ([v8 isReadingContent])
  {
    [(VOTElementManager *)self _handleBookContentMovement:v8 direction:a4 unit:a5 generateOutput:1];
    goto LABEL_14;
  }
  if ([v8 doesHaveTraits:kAXKeyboardKeyTrait])
  {
    uint64_t v9 = [(VOTElement *)self->_lastApplication firstResponderElement];

    id v8 = (void *)v9;
  }
  if ([v8 doesHaveTraits:kAXTextEntryTrait]
    && [v8 doesHaveTraits:kAXIsEditingTrait])
  {
    [(VOTElementManager *)self _moveCursorForElement:v8 direction:a4 unit:a5];
  }
  else
  {
    [(VOTElementManager *)self _outputNextTextSegmentUnit:a5 direction:a4];
  }
LABEL_14:
}

- (void)_handleRowMovement:(id)a3 direction:(int64_t)a4
{
  unsigned __int8 v6 = [(VOTElementManager *)self _currentElement];
  id v7 = (char *)[v6 rowRange];
  uint64_t v9 = v8;
  id v10 = [v6 columnRange];
  [(VOTElementManager *)self setInTextSelection:0];
  id v11 = &v7[v9];
  if (a4 != 1) {
    id v11 = v7;
  }
  if (a4 == 2) {
    uint64_t v12 = v7 - 1;
  }
  else {
    uint64_t v12 = v11;
  }
  id v13 = [v6 elementAtRow:v12 andColumn:v10];
  if ([v13 isEqual:v6] || !v13)
  {
    uint64_t v16 = +[VOTOutputManager outputManager];
    id v17 = +[VOSOutputEvent BoundaryEncountered];
    [v16 sendEvent:v17];
  }
  else
  {
    id v14 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    [(VOTElementManager *)self _prepareElementOutputHeaders:v13 currentElement:v6 request:v14];
    [(VOTElementManager *)self _addDescription:v13 toRequest:v14 withOptions:2097154];
    [(VOTElementManager *)self sendRequest:v14];
    [(VOTElementManager *)self _setCurrentElement:v13];
    uint64_t v15 = sub_10005273C(a4);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100075F54;
    v18[3] = &unk_1001B3448;
    v18[4] = self;
    id v19 = v13;
    [v19 scrollToElementForDirectional:v15 withCompletion:v18];
  }
}

- (id)_retrieveCurrentCharacterFromEditableElement
{
  if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXIsEditingTrait]
    && self->_elementSelectionRangeBufferInternal.location != 0x7FFFFFFF)
  {
    double v4 = [(VOTElement *)self->_currentElement value];
    NSUInteger location = self->_elementSelectionRangeBufferInternal.location;
    if (location >= (unint64_t)[v4 length])
    {
      double v3 = 0;
    }
    else
    {
      id v6 = +[TTSEmojiUtilities emojiRangeFromString:withSearchRange:](TTSEmojiUtilities, "emojiRangeFromString:withSearchRange:", v4, self->_elementSelectionRangeBufferInternal.location, (char *)[v4 length] - self->_elementSelectionRangeBufferInternal.location);
      if (v6 != self->_elementSelectionRangeBufferInternal.location) {
        id v6 = objc_msgSend(v4, "rangeOfComposedCharacterSequenceAtIndex:");
      }
      double v3 = objc_msgSend(v4, "substringWithRange:", v6, v7);
    }
  }
  else
  {
    double v3 = 0;
  }

  return v3;
}

- (void)_handleOutputCharacter:(id)a3
{
  id v6 = [(VOTElementManager *)self _retrieveCurrentCharacterFromEditableElement];
  if ([v6 length])
  {
    id v3 = +[VOTOutputRequest createRequest];
    [v3 setGeneratesBraille:1];
    [v3 setBrailleType:2];
    id v4 = [v3 addString:v6];
    [v3 send];
  }
  else
  {
    id v3 = +[VOTOutputManager outputManager];
    unsigned __int8 v5 = +[VOSOutputEvent BoundaryEncountered];
    [v3 sendEvent:v5];
  }
}

- (void)_handleOutputColumnOrRowContents:(id)a3 row:(BOOL)a4
{
  BOOL v4 = a4;
  id v19 = a3;
  if ([(VOTElement *)self->_currentElement containedIn:2])
  {
    id v6 = (char *)[(VOTElement *)self->_currentElement columnRange];
    unint64_t v7 = [(VOTElement *)self->_currentElement columnCount];
    uint64_t v8 = (char *)[(VOTElement *)self->_currentElement rowRange];
    unint64_t v9 = [(VOTElement *)self->_currentElement rowCount];
    id v10 = +[VOTOutputRequest createRequest];
    id v20 = v6;
    id v11 = v8;
    if (v4)
    {
      uint64_t v8 = v6;
      uint64_t v12 = (char *)v7;
    }
    else
    {
      uint64_t v12 = (char *)v9;
    }
    if ((uint64_t)v8 >= (uint64_t)v12)
    {
      id v13 = 0;
    }
    else
    {
      id v13 = 0;
      if (v4) {
        uint64_t v14 = 402669568;
      }
      else {
        uint64_t v14 = 335560704;
      }
      do
      {
        if (v4)
        {
          uint64_t v15 = v11;
          uint64_t v16 = v8;
        }
        else
        {
          uint64_t v15 = v8;
          uint64_t v16 = v20;
        }
        id v17 = [(VOTElement *)self->_currentElement elementAtRow:v15 andColumn:v16];
        if (([v17 isEqual:v13] & 1) == 0)
        {
          [v17 addTextualInformationToRequest:v10 options:v14 dataPackage:0];
          id v18 = v17;

          id v13 = v18;
        }

        ++v8;
      }
      while (v12 != v8);
    }
    [v10 setGeneratesBraille:1];
    [v10 setBrailleType:2];
    [v10 send];
  }
  else
  {
    id v10 = +[VOTOutputManager outputManager];
    id v13 = +[VOSOutputEvent BoundaryEncountered];
    [v10 sendEvent:v13];
  }
}

- (void)_handleOutputCellRowColumnInfo:(id)a3
{
  if ([(VOTElement *)self->_currentElement containedIn:2])
  {
    id v7 = +[VOTOutputRequest createRequest];
    currentElement = self->_currentElement;
    unsigned __int8 v5 = [(id)VOTSharedWorkspace selectedLanguage];
    [(VOTElement *)currentElement announceTableInfo:v7 options:0 language:v5];

    [v7 setGeneratesBraille:1];
    [v7 setBrailleType:2];
    [v7 send];
  }
  else
  {
    id v7 = +[VOTOutputManager outputManager];
    id v6 = +[VOSOutputEvent BoundaryEncountered];
    [v7 sendEvent:v6];
  }
}

- (void)_handleOutputTableRowColumnInfo:(id)a3
{
  if ([(VOTElement *)self->_currentElement containedIn:2])
  {
    id v7 = +[VOTOutputRequest createRequest];
    currentElement = self->_currentElement;
    unsigned __int8 v5 = [(id)VOTSharedWorkspace selectedLanguage];
    [(VOTElement *)currentElement applyTableDimension:v7 language:v5];

    [v7 setGeneratesBraille:1];
    [v7 setBrailleType:2];
    [v7 send];
  }
  else
  {
    id v7 = +[VOTOutputManager outputManager];
    id v6 = +[VOSOutputEvent BoundaryEncountered];
    [v7 sendEvent:v6];
  }
}

- (void)_handleOutputRowContents:(id)a3
{
}

- (void)_handleOutputColumnContents:(id)a3
{
}

- (void)_handleOutputColumnOrRowHeader:(id)a3 row:(BOOL)a4
{
  BOOL v4 = a4;
  if ([(VOTElement *)self->_currentElement containedIn:2])
  {
    currentElement = self->_currentElement;
    if (v4) {
      [(VOTElement *)currentElement headerElementsForRow:[(VOTElement *)currentElement rowRange]];
    }
    else {
    unint64_t v9 = [(VOTElement *)currentElement headerElementsForColumn:[(VOTElement *)currentElement columnRange]];
    }
    id v8 = +[VOTOutputRequest createRequest];
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v7 = v9;
    id v10 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v7);
          }
          objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * i), "addTextualInformationToRequest:options:dataPackage:", v8, 268451840, 0, (void)v14);
        }
        id v11 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v11);
    }

    [v8 setGeneratesBraille:1];
    [v8 setBrailleType:2];
    [v8 send];
  }
  else
  {
    id v7 = +[VOTOutputManager outputManager];
    id v8 = +[VOSOutputEvent BoundaryEncountered];
    [v7 sendEvent:v8];
  }
}

- (void)_handleOutputColumnHeader:(id)a3
{
}

- (void)_handleOutputRowHeader:(id)a3
{
}

- (void)_handleOutputCharacterPhonetically:(id)a3
{
  id v9 = [(VOTElementManager *)self _retrieveCurrentCharacterFromEditableElement];
  if ([v9 length])
  {
    BOOL v4 = [(VOTElement *)self->_currentElement language];
    unsigned __int8 v5 = [(VOTElementManager *)self _phoneticStringForLetter:v9 language:v4];

    if (![v5 length])
    {
      id v6 = v9;

      unsigned __int8 v5 = v6;
    }
    id v7 = +[VOTOutputRequest createRequest];
    [v7 setGeneratesBraille:1];
    [v7 setBrailleType:2];
    id v8 = [v7 addString:v5];
    [v7 send];
  }
  else
  {
    unsigned __int8 v5 = +[VOTOutputManager outputManager];
    id v7 = +[VOSOutputEvent BoundaryEncountered];
    [v5 sendEvent:v7];
  }
}

- (void)_outputNextTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4
{
  id v7 = [(VOTElementManager *)self _currentElement];
  id v8 = [v7 textInputElement];
  if (v8)
  {
    if (self->_elementUnitIndex == -1)
    {
      id v9 = [v7 textInputElementRange];
      if (v9 != (id)0x7FFFFFFF) {
        self->_elementUnitIndedouble x = (int64_t)v9;
      }
    }
    id v10 = v8;

    id v7 = v10;
  }
  id v11 = [v7 visibleText];
  id v12 = [v11 mutableCopy];

  id v13 = [(VOTElementManager *)self outputRangeForTextSegmentUnit:a3 direction:a4 string:v12 element:v7];
  uint64_t v15 = v14;
  if (v13 != (id)0x7FFFFFFF
    || ![(VOTElementManager *)self _handleMovementForElementFollowingElement:v7 direction:a4 unit:a3 mode:3])
  {
    -[VOTElementManager updateIndexesForOutputRange:segment:direction:outputStringLength:](self, "updateIndexesForOutputRange:segment:direction:outputStringLength:", v13, v15, a3, a4, [v12 length]);
    -[VOTElementManager outputTextSegmentForRange:string:element:usePhonetics:segment:](self, "outputTextSegmentForRange:string:element:usePhonetics:segment:", v13, v15, v12, v7, a3 == 1, a3);
    if ((TTSisSpeakableEmojiString() & 1) != 0 || [v12 length] == (id)1)
    {
      long long v16 = +[VOTWorkspace sharedWorkspace];
      long long v17 = [v16 visionEngine];
      [v17 processStringFor2DBrailleDisplay:v12];
    }
    if (v7)
    {
      if (([v7 doesHaveTraits:kAXTextAreaTrait] & 1) != 0
        || [v7 doesHaveTraits:kAXWebContentTrait])
      {
        NSUInteger location = self->_elementUnitOutputRange.location;
        if (location != 0x7FFFFFFF)
        {
          NSUInteger v19 = self->_elementUnitOutputRange.length + 1;
          id v20 = +[VOTElement systemWideElement];
          objc_msgSend(v7, "boundsForRange:", location, v19);
          objc_msgSend(v20, "convertRect:fromContextId:", objc_msgSend(v7, "windowContextId"), v21, v22, v23, v24);
          self->_lineFrame.origin.double x = v25;
          self->_lineFrame.origin.double y = v26;
          self->_lineFrame.size.double width = v27;
          self->_lineFrame.size.double height = v28;

          if (a3 != 1) {
            -[VOTElementManager _outputDataDetectorIfPresent:element:includeLinks:](self, "_outputDataDetectorIfPresent:element:includeLinks:", v7, 1, self->_lineFrame.origin.x, self->_lineFrame.origin.y, self->_lineFrame.size.width, self->_lineFrame.size.height);
          }
          v51.origin.double x = CGRectZero.origin.x;
          v51.origin.double y = CGRectZero.origin.y;
          v51.size.double width = CGRectZero.size.width;
          v51.size.double height = CGRectZero.size.height;
          if (!CGRectEqualToRect(self->_lineFrame, v51))
          {
            v49[0] = _NSConcreteStackBlock;
            v49[1] = 3221225472;
            v49[2] = sub_100076BE8;
            v49[3] = &unk_1001B3448;
            v49[4] = self;
            id v50 = v7;
            objc_msgSend(v50, "scrollRectToVisible:withCompletion:", v49, self->_lineFrame.origin.x, self->_lineFrame.origin.y, self->_lineFrame.size.width, self->_lineFrame.size.height);
          }
        }
      }
      else
      {
        uint64_t v29 = [v7 identifier];
        unsigned int v30 = [v29 isEqualToString:@"VOTImageExplorerTextElement"];

        if (v30)
        {
          objc_msgSend(v7, "boundsForRange:", v13, v15);
          double v32 = v31;
          double v34 = v33;
          double v36 = v35;
          double v38 = v37;
          id v39 = +[VOTElement systemWideElement];
          objc_msgSend(v39, "convertRect:fromContextId:", objc_msgSend(v7, "windowContextId"), v32, v34, v36, v38);
          double v41 = v40;
          double v43 = v42;
          double v45 = v44;
          double v47 = v46;

          id v48 = +[VOTDisplayManager displayManager];
          objc_msgSend(v48, "setCursorFrame:", v41, v43, v45, v47);
        }
        else
        {
          id v48 = +[VOTDisplayManager displayManager];
          [v48 setCursorFrameForElement:v7];
        }
      }
    }
  }
}

- (void)_handleWebSelection:(id)a3
{
  id v4 = a3;
  id v18 = [(VOTElementManager *)self _currentElement];
  unsigned __int8 v5 = [v4 command];

  unsigned int v6 = [v5 isEqualToString:kVOTEventCommandSelectRight];
  if (self->_inTextProcessingRotorMode)
  {
    id v7 = [(VOTElementManager *)self textSelectionMovementManager];
    uint64_t v8 = (uint64_t)[v7 segment];
  }
  else
  {
    int64_t v9 = [(VOTRotor *)self->_elementRotor currentRotorType];
    uint64_t v10 = 1;
    if (v9 == 4) {
      uint64_t v10 = 2;
    }
    if (v9 == 5) {
      uint64_t v8 = 3;
    }
    else {
      uint64_t v8 = v10;
    }
  }
  if (![(NSString *)self->_webSelectionText length])
  {
    if (self->_textMarker)
    {
      id v11 = [(_VOTTextMarkerRange *)self->_textMarkerRange startMarker];
      goto LABEL_16;
    }
    if (self->_elementUnitIndex == 0x7FFFFFFFFFFFFFFFLL || [(NSString *)self->_webSelectionText length])
    {
      id v11 = 0;
      goto LABEL_16;
    }
    if ((id)[(NSArray *)self->_lineArray count] == (id)2)
    {
      id v11 = [(NSArray *)self->_lineArray objectAtIndex:0];
      if (!self->_elementUnitOutputRange.length) {
        goto LABEL_16;
      }
      id v13 = [v18 pageTextMarkerRange];
      if ([v13 count])
      {
        uint64_t v14 = [v13 objectAtIndex:0];
        uint64_t v15 = (char *)[v18 rangeForTextMarker:v14];

        long long v16 = objc_msgSend(v18, "textMarkersForRange:", &v15[self->_elementUnitOutputRange.location], self->_elementUnitOutputRange.length);
        if ([v16 count] == (id)2)
        {
          uint64_t v17 = [v16 objectAtIndex:0];

          id v11 = (void *)v17;
        }
      }
    }
    else
    {
      id v13 = objc_msgSend(v18, "textMarkersForRange:", self->_elementUnitOutputRange.location, self->_elementUnitOutputRange.length);
      id v11 = [v13 objectAtIndex:0];
    }

LABEL_16:
    [v18 setSelectionToTextMarker:v11];

    if (v6) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
  if (v6)
  {
LABEL_10:
    [v18 increaseWebSelection:v8];
    goto LABEL_18;
  }
LABEL_17:
  [v18 decreaseWebSelection:v8];
LABEL_18:
  id v12 = [v18 remoteParent];
  [v12 increaseWebSelection:v8];
  self->_flags.shouldUpdateRotorForElement = 1;
}

- (void)_handleTextRotorSelectionAction:(BOOL)a3
{
  id v4 = &kVOTEventCommandSelectLeft;
  if (a3) {
    id v4 = &kVOTEventCommandSelectRight;
  }
  id v5 = +[VOTEvent internalEventWithCommand:*v4 info:0];
  [(VOTElementManager *)self _handleUserSelection:v5];
}

- (void)_processMisspelledWordTextReplacement
{
  id v3 = [(VOTElement *)self->_currentElement application];
  id v18 = [v3 textReplacements];

  misspelledWordReplacementCycleIndedouble x = self->_misspelledWordReplacementCycleIndex;
  BOOL v5 = misspelledWordReplacementCycleIndex >= (unint64_t)[v18 count];
  unsigned int v6 = v18;
  if (!v5)
  {
    id v7 = [v18 objectAtIndexedSubscript:self->_misspelledWordReplacementCycleIndex];
    uint64_t v8 = self->_currentElement;
    if ([(VOTElement *)v8 doesHaveTraits:kAXKeyboardKeyTrait])
    {
      int64_t v9 = [(VOTElement *)v8 textInputElement];
      if (v9
        || ([(VOTElement *)v8 application],
            uint64_t v10 = objc_claimAutoreleasedReturnValue(),
            [v10 firstResponderElement],
            int64_t v9 = objc_claimAutoreleasedReturnValue(),
            v10,
            v9))
      {
        id v11 = v9;

        uint64_t v8 = v11;
      }
    }
    if ([(VOTElement *)v8 doesHaveTraits:kAXWebContentTrait])
    {
      uint64_t v12 = [v7 stringByAppendingString:@" "];

      id v7 = (void *)v12;
    }
    id v13 = [(VOTElement *)v8 selectedTextRange];
    unsigned int v15 = -[VOTElement replaceTextInRange:withString:](v8, "replaceTextInRange:withString:", v13, v14, v7);
    long long v16 = +[VOTOutputManager outputManager];
    if (v15) {
      +[VOSOutputEvent DidActivateElement];
    }
    else {
    uint64_t v17 = +[VOSOutputEvent BoundaryEncountered];
    }
    [v16 sendEvent:v17];

    unsigned int v6 = v18;
  }
  self->_misspelledWordReplacementCycleIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
}

- (void)_handleMisspelledWordRotorAction:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(VOTElement *)self->_currentElement application];
  id v24 = [v5 textReplacements];

  if ([v24 count])
  {
    misspelledWordReplacementCycleIndedouble x = self->_misspelledWordReplacementCycleIndex;
    if (misspelledWordReplacementCycleIndex == 0x7FFFFFFFFFFFFFFFLL)
    {
      id v7 = v24;
      if (v3)
      {
        unint64_t v8 = 0;
        self->_misspelledWordReplacementCycleIndedouble x = 0;
        goto LABEL_11;
      }
      unint64_t v8 = (unint64_t)[v24 count] - 1;
    }
    else if (v3)
    {
      unint64_t v8 = misspelledWordReplacementCycleIndex + 1;
    }
    else
    {
      unint64_t v8 = misspelledWordReplacementCycleIndex - 1;
    }
    self->_misspelledWordReplacementCycleIndedouble x = v8;
    id v7 = v24;
    if ((v8 & 0x8000000000000000) != 0)
    {
      self->_misspelledWordReplacementCycleIndedouble x = (int64_t)[v24 count] - 1;
      unsigned int v15 = +[VOTOutputManager outputManager];
      uint64_t v16 = +[VOSOutputEvent DidWrapBackwards];
      goto LABEL_14;
    }
LABEL_11:
    if (v8 < (unint64_t)[v7 count])
    {
LABEL_15:
      id v18 = [(id)VOTSharedWorkspace selectedLanguage];
      NSUInteger v19 = v18;
      if (v18)
      {
        id v13 = v18;
      }
      else
      {
        id v20 = [(VOTElement *)self->_currentElement application];
        id v13 = [v20 currentSoftwareKeyboardLanguage];
      }
      id v14 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      double v21 = [v24 objectAtIndexedSubscript:self->_misspelledWordReplacementCycleIndex];
      id v22 = [v14 addString:v21 withLanguage:v13];

      double v23 = [v14 lastAction];
      [v23 setObject:kCFBooleanTrue forVariant:50];

      [v14 setGeneratesBraille:1];
      [(VOTElementManager *)self sendRequest:v14];
      goto LABEL_19;
    }
    self->_misspelledWordReplacementCycleIndedouble x = 0;
    unsigned int v15 = +[VOTOutputManager outputManager];
    uint64_t v16 = +[VOSOutputEvent DidWrapForwards];
LABEL_14:
    uint64_t v17 = (void *)v16;
    [v15 sendEvent:v16];

    goto LABEL_15;
  }
  int64_t v9 = +[VOTOutputManager outputManager];
  uint64_t v10 = off_1001EA9E8;
  id v11 = [(id)VOTSharedWorkspace selectedLanguage];
  uint64_t v12 = sub_100051D04(v10, @"no.text.replacements", 0, v11);
  [v9 speakSimpleString:v12];

  id v13 = +[VOTOutputManager outputManager];
  id v14 = +[VOSOutputEvent BoundaryEncountered];
  [v13 sendEvent:v14];
LABEL_19:
}

- (void)_handleStartStopTextSelection:(id)a3
{
  if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXTextEntryTrait])
  {
    if (self->_flags.inKeyboardTextSelectionMode)
    {
      id v4 = [(VOTElement *)self->_currentElement selectedTextRange];
      NSUInteger location = self->_keyboardTextSelectionStartRange.location;
      if ((unint64_t)v4 >= location) {
        NSUInteger v7 = self->_keyboardTextSelectionStartRange.location;
      }
      else {
        NSUInteger v7 = (NSUInteger)v4;
      }
      NSUInteger v8 = self->_keyboardTextSelectionStartRange.length + location;
      if ((unint64_t)v4 + v5 > v8) {
        NSUInteger v8 = (NSUInteger)v4 + v5;
      }
      -[VOTElement setSelectedTextRange:refreshBraille:](self->_currentElement, "setSelectedTextRange:refreshBraille:", v7, v8 - v7, 1);
      BOOL v9 = 0;
    }
    else
    {
      self->_keyboardTextSelectionStartRange.NSUInteger location = (NSUInteger)[(VOTElement *)self->_currentElement selectedTextRange];
      self->_keyboardTextSelectionStartRange.NSUInteger length = v11;
      BOOL v9 = 1;
    }
    self->_flags.inKeyboardTextSelectionMode = v9;
  }
  else
  {
    id v12 = +[VOTOutputManager outputManager];
    uint64_t v10 = +[VOSOutputEvent BoundaryEncountered];
    [v12 sendEvent:v10];
  }
}

- (void)_updateCursorFrameAfterLift
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (!self->_textRangeBeingDisplayed)
  {
    id v3 = +[VOTDisplayManager displayManager];
    [v3 setCursorFrameForElement:self->_currentElement];
  }
}

- (void)updateCursorFrameAfterLift
{
}

- (void)_handleUserSelection:(id)a3
{
  id v4 = a3;
  BOOL selectingRightward = self->_selectingRightward;
  unsigned int v6 = [v4 command];
  id v7 = [v6 isEqualToString:kVOTEventCommandSelectRight];

  int64_t v8 = 1;
  if (!v7) {
    int64_t v8 = 2;
  }
  self->_lastUserTextSelectionDirection = v8;
  BOOL v9 = [(VOTElementManager *)self _currentResponder];
  unsigned __int8 v10 = [v9 doesHaveTraits:kAXIsEditingTrait];
  if ((v10 & 1) == 0)
  {
    NSUInteger v11 = [(VOTElementManager *)self _currentElement];
    if ([v11 doesHaveTraits:kAXWebContentTrait])
    {
      [(VOTElementManager *)self _handleWebSelection:v4];
      goto LABEL_60;
    }
  }
  LODWORD(v42) = selectingRightward;
  int64_t v12 = [(VOTRotor *)self->_elementRotor currentRotorType];
  NSUInteger v11 = [v9 value];
  id v13 = [v9 selectedTextRange];
  uint64_t v15 = v14;
  if (v14) {
    char v16 = 1;
  }
  else {
    char v16 = v10;
  }
  if ((v16 & 1) == 0)
  {
    p_highlightedCharacterRange = &self->_highlightedCharacterRange;
    NSUInteger location = self->_highlightedCharacterRange.location;
    if (location == 0x7FFFFFFF || location >= (unint64_t)[v11 length])
    {
      NSUInteger v19 = self->_elementUnitOutputRange.location;
      if (v19 == 0x7FFFFFFF || v19 >= (unint64_t)[v11 length]) {
        goto LABEL_17;
      }
      p_highlightedCharacterRange = &self->_elementUnitOutputRange;
    }
    id v13 = (id)p_highlightedCharacterRange->location;
  }
LABEL_17:
  id v20 = VOTLogElement();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
    sub_10011E860();
  }

  if (!v15)
  {
    self->_selectedTextStartLocation = (int64_t)v13;
    self->_inTextSelection = 1;
    self->_BOOL selectingRightward = (char)v7;
  }
  double v21 = VOTLogElement();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
    sub_10011E7F4();
  }

  if ([v11 isAXAttributedString]
    && [v11 hasAttribute:UIAccessibilityTokenPlaceholder])
  {
    id v22 = +[VOTOutputManager outputManager];
    double v23 = +[VOSOutputEvent BoundaryEncountered];
    [v22 sendEvent:v23];
  }
  else
  {
    id v45 = v13;
    id v24 = [(VOTElementManager *)self textSelectionMovementManager];
    id v25 = [v24 segment];

    CGFloat v26 = [v4 objectForIndex:118];
    id v22 = v26;
    if (v26) {
      id v25 = [v26 integerValue];
    }
    CGFloat v27 = VOTLogElement();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      BOOL v41 = self->_selectingRightward;
      *(_DWORD *)buf = 134218752;
      int64_t v47 = v12;
      __int16 v48 = 2048;
      id v49 = v25;
      __int16 v50 = 1024;
      int v51 = (int)v7;
      __int16 v52 = 1024;
      BOOL v53 = v41;
      _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "dispatching selection change: rotor:%ld, textSelectionRotor:%ld, rightward:%d, selectingRightward:%d)", buf, 0x22u);
    }

    if (v12 == 4 || v25 == (id)2)
    {
      id v28 = -[VOTElementManager _handleUserWordSelectionInElement:currentRange:rightward:](self, "_handleUserWordSelectionInElement:currentRange:rightward:", v9, v45, v15, v7);
    }
    else if (v12 == 5 || v25 == (id)3)
    {
      id v28 = -[VOTElementManager _handleUserLineSelectionInElement:currentRange:rightward:](self, "_handleUserLineSelectionInElement:currentRange:rightward:", v9, v45, v15, v7);
    }
    else if (v25 == (id)7)
    {
      id v28 = -[VOTElementManager _handleUserAllSelection:inString:rightward:](self, "_handleUserAllSelection:inString:rightward:", v45, v15, v11, v7);
    }
    else if (v25 == (id)4)
    {
      id v28 = -[VOTElementManager _handleUserPageSelection:inString:rightward:](self, "_handleUserPageSelection:inString:rightward:", v45, v15, v11, v7);
    }
    else
    {
      id v28 = -[VOTElementManager _handleUserCharacterSelection:inString:rightward:](self, "_handleUserCharacterSelection:inString:rightward:", v45, v15, v11, v7);
    }
    unint64_t v30 = (unint64_t)v28;
    uint64_t v31 = v29;
    double v32 = VOTLogElement();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
      sub_10011E78C();
    }

    if (v15 == v31 || (v30 & 0x8000000000000000) != 0 || v30 + v31 > (unint64_t)[v11 length])
    {
      id v33 = +[VOTOutputManager outputManager];
      double v34 = +[VOSOutputEvent BoundaryEncountered];
      [v33 sendEvent:v34];
    }
    else
    {
      double v35 = VOTLogElement();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
        sub_10011E724();
      }

      -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:](self, "_setSelectedTextRange:onElement:refreshBraille:", v30, v31, v9, 1);
      if (v43 == self->_selectingRightward || !self->_inTextSelection)
      {
        double v36 = +[VOTOutputManager outputManager];
        uint64_t v37 = +[VOSOutputEvent InsertionPointDidMove];
      }
      else
      {
        double v36 = +[VOTOutputManager outputManager];
        uint64_t v37 = +[VOSOutputEvent DidChangeTextSelectionDirection];
      }
      double v38 = (void *)v37;
      [v36 sendEvent:v37];

      id v39 = [(id)VOTSharedWorkspace selectedLanguage];
      double v40 = v39;
      if (v39)
      {
        id v33 = v39;
      }
      else
      {
        double v44 = [v9 application];
        id v33 = [v44 currentSoftwareKeyboardLanguage];
      }
      -[VOTElementManager _outputSelectionDifference:oldRange:string:language:](self, "_outputSelectionDifference:oldRange:string:language:", v30, v31, v45, v15, v11, v33);
      [(VOTElementManager *)self _updateCurrentElementForTextInputSelectionChangeIfNeeded];
    }

    double v23 = VOTLogElement();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
      sub_10011E6F0();
    }
  }

LABEL_60:
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserWordSelectionInElement:(id)a3 currentRange:(id)a4 rightward:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t var1 = a4.var1;
  int64_t var0 = a4.var0;
  unint64_t v9 = a4.var0 + a4.var1;
  if (self->_selectingRightward) {
    int64_t v10 = a4.var0 + a4.var1;
  }
  else {
    int64_t v10 = a4.var0;
  }
  if (a5) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 2;
  }
  int64_t v12 = [a3 value];
  id v13 = (char *)[v12 wordFromPosition:v10 inDirection:v11];
  uint64_t v15 = v14;
  char v16 = VOTLogElement();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if (v13 == (char *)0x7FFFFFFF)
    {
      double v21 = @"<NOT FOUND>";
    }
    else
    {
      objc_msgSend(v12, "substringWithRange:", v13, v15);
      double v21 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    int v22 = 134218499;
    double v23 = v13;
    __int16 v24 = 2048;
    uint64_t v25 = v15;
    __int16 v26 = 2113;
    CGFloat v27 = v21;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "word range: %lu, %lu (%{private}@)", (uint8_t *)&v22, 0x20u);
    if (v13 != (char *)0x7FFFFFFF) {
  }
    }
  if (v13 != (char *)0x7FFFFFFF)
  {
    if (self->_selectingRightward)
    {
      if (v5) {
        int64_t var1 = (int64_t)&v13[v15 - var0];
      }
      else {
        int64_t var1 = (unint64_t)&v13[-var0] & ~((uint64_t)&v13[-var0] >> 63);
      }
    }
    else
    {
      uint64_t v17 = &v13[v15];
      uint64_t v18 = (v9 - (void)&v13[v15]) & ~((uint64_t)(v9 - (void)&v13[v15]) >> 63);
      if (v9 <= (unint64_t)v13)
      {
        uint64_t v17 = v13;
        uint64_t v18 = 0;
      }
      if (v5) {
        int64_t var0 = (int64_t)v17;
      }
      else {
        int64_t var0 = (int64_t)v13;
      }
      if (v5) {
        int64_t var1 = v18;
      }
      else {
        int64_t var1 = v9 - (void)v13;
      }
    }
  }

  int64_t v19 = var0;
  int64_t v20 = var1;
  result.int64_t var1 = v20;
  result.int64_t var0 = v19;
  return result;
}

- (_NSRange)_lineRangeWithFaultTolerance:(int64_t)a3 forward:(BOOL)a4 element:(id)a5
{
  BOOL v6 = a4;
  unint64_t v8 = 0;
  uint64_t v9 = -1;
  do
  {
    if (v6) {
      uint64_t v10 = v8 + 1;
    }
    else {
      uint64_t v10 = v9;
    }
    id v11 = [a5 lineRangeForPosition:v10 + a3];
    if (v8 > 1) {
      break;
    }
    ++v8;
    --v9;
  }
  while (v11 == (id)0x7FFFFFFF);
  result.NSUInteger length = v12;
  result.NSUInteger location = (NSUInteger)v11;
  return result;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserLineSelectionInElement:(id)a3 currentRange:(id)a4 rightward:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t var1 = a4.var1;
  int64_t var0 = a4.var0;
  id v9 = a3;
  uint64_t v10 = (char *)(var0 + var1);
  if (self->_selectingRightward) {
    int64_t v11 = var0 + var1;
  }
  else {
    int64_t v11 = var0;
  }
  NSUInteger v12 = (char *)[(VOTElementManager *)self _lineRangeWithFaultTolerance:v11 forward:v5 element:v9];
  NSUInteger v14 = v13;
  uint64_t v15 = VOTLogElement();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v26.NSUInteger location = (NSUInteger)v12;
    v26.NSUInteger length = v14;
    sub_10011E8C8(v26, v15);
  }

  if (v12 != (char *)0x7FFFFFFF)
  {
    if (self->_selectingRightward)
    {
      if (v5)
      {
        if (v10 == &v12[v14])
        {
          char v16 = (char *)[(VOTElementManager *)self _lineRangeWithFaultTolerance:var0 + var1 forward:1 element:v9];
          if (v16 != (char *)0x7FFFFFFF)
          {
            NSUInteger v14 = v17;
            NSUInteger v12 = v16;
          }
        }
        int64_t var1 = (int64_t)&v12[v14 - var0];
      }
      else
      {
        if (v12 == v10)
        {
          if (!v10
            || (NSUInteger v12 = (char *)[(VOTElementManager *)self _lineRangeWithFaultTolerance:var0 + var1 forward:0 element:v9], v12 == (char *)0x7FFFFFFF))
          {
            NSUInteger v12 = (char *)(var0 + var1);
          }
        }
        if ((unint64_t)v12 <= var0) {
          var1 &= var1 >> 63;
        }
        else {
          int64_t var1 = (int64_t)&v12[-var0];
        }
      }
      goto LABEL_44;
    }
    if (v5)
    {
      uint64_t v18 = &v12[v14];
      if (&v12[v14] == (char *)var0)
      {
        int64_t v19 = (char *)[(VOTElementManager *)self _lineRangeWithFaultTolerance:var0 + 1 forward:1 element:v9];
        if (v19 == (char *)0x7FFFFFFF) {
          NSUInteger v21 = v14;
        }
        else {
          NSUInteger v21 = v20;
        }
        if (v19 == (char *)0x7FFFFFFF) {
          int v22 = v12;
        }
        else {
          int v22 = v19;
        }
        uint64_t v18 = &v22[v21];
      }
      if (v10 >= v18) {
        int64_t var0 = (int64_t)v18;
      }
      else {
        var0 += var1;
      }
      if (v10 >= v18) {
        int64_t var1 = v10 - v18;
      }
      else {
        int64_t var1 = 0;
      }
      goto LABEL_44;
    }
    if (v12 != (char *)var0) {
      goto LABEL_37;
    }
    if (var0 < 1)
    {
      int64_t v23 = var0;
    }
    else
    {
      NSUInteger v12 = (char *)[(VOTElementManager *)self _lineRangeWithFaultTolerance:var0 forward:0 element:v9];
      int64_t v23 = var0;
      if (v12 != (char *)0x7FFFFFFF)
      {
LABEL_37:
        if (var0 > (unint64_t)v12)
        {
          int64_t var1 = v10 - v12;
          int64_t var0 = (int64_t)v12;
          goto LABEL_44;
        }
        int64_t v23 = (int64_t)v12;
      }
    }
    if (var0 > 0)
    {
      int64_t var0 = v23;
      int64_t var1 = 0;
    }
  }
LABEL_44:

  int64_t v24 = var0;
  int64_t v25 = var1;
  result.int64_t var1 = v25;
  result.int64_t var0 = v24;
  return result;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserPageSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t var1 = (char *)a3.var1;
  int64_t var0 = a3.var0;
  id v9 = a4;
  uint64_t v10 = v9;
  if (self->_selectingRightward)
  {
    if (v5)
    {
      if (&var1[var0] < [v9 length]) {
        int64_t var1 = (char *)[v10 length] - var0;
      }
    }
    else
    {
      int64_t var1 = 0;
    }
  }
  else
  {
    if (var0 <= 0) {
      int64_t v11 = var1;
    }
    else {
      int64_t v11 = (char *)var0;
    }
    if (v5) {
      int64_t var0 = (int64_t)var1;
    }
    else {
      var0 &= var0 >> 63;
    }
    if (v5) {
      int64_t var1 = 0;
    }
    else {
      int64_t var1 = v11;
    }
  }

  int64_t v12 = var0;
  int64_t v13 = (int64_t)var1;
  result.int64_t var1 = v13;
  result.int64_t var0 = v12;
  return result;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserAllSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5
{
  BOOL v5 = a5;
  id var1 = (id)a3.var1;
  int64_t var0 = a3.var0;
  id v8 = a4;
  id v9 = v8;
  if (v5)
  {
    id var1 = [v8 length];
    int64_t var0 = 0;
  }
  else if (!var0 && var1 == [v8 length])
  {
    id var1 = 0;
    int64_t var0 = 0;
  }

  int64_t v10 = var0;
  int64_t v11 = (int64_t)var1;
  result.id var1 = v11;
  result.int64_t var0 = v10;
  return result;
}

- (_NSRange)_characterRangeWithFaultTolerance:(int64_t)a3 forward:(BOOL)a4 element:(id)a5
{
  BOOL v6 = a4;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  do
  {
    if (v6) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = v8;
    }
    id v11 = [a5 characterRangeForPosition:v10 + a3];
    int v13 = (unint64_t)v11 <= a3 || v6;
    if ((unint64_t)v11 >= a3) {
      uint64_t v14 = (uint64_t)v11;
    }
    else {
      uint64_t v14 = 0x7FFFFFFFLL;
    }
    if (v13) {
      uint64_t v15 = (uint64_t)v11;
    }
    else {
      uint64_t v15 = 0x7FFFFFFFLL;
    }
    if (v6) {
      NSUInteger v16 = v14;
    }
    else {
      NSUInteger v16 = v15;
    }
    BOOL v17 = v16 != 0x7FFFFFFF || v9++ >= 2;
    --v8;
  }
  while (!v17);
  result.NSUInteger length = v12;
  result.NSUInteger location = v16;
  return result;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserCharacterSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t var1 = a3.var1;
  int64_t var0 = a3.var0;
  id v9 = a4;
  unint64_t v10 = v9;
  if (var0 == 0x7FFFFFFFFFFFFFFFLL || var0 == 0x7FFFFFFF)
  {
    id v11 = VOTLogCommon();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v31.NSUInteger location = var0;
      v31.NSUInteger length = var1;
      int64_t v24 = NSStringFromRange(v31);
      int v25 = 138412802;
      NSRange v26 = v24;
      __int16 v27 = 2112;
      id v28 = v10;
      __int16 v29 = 1024;
      BOOL v30 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid range passed into handle user selection: %@ > %@[%d]", (uint8_t *)&v25, 0x1Cu);
    }
  }
  else if (self->_selectingRightward)
  {
    uint64_t v14 = var0 + var1;
    if (v5)
    {
      if (v14 < (unint64_t)[v9 length]
        && [v10 rangeOfComposedCharacterSequenceAtIndex:var0 + var1] != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        int64_t v16 = v15 + var1;
        if (v15 + var1 <= (unint64_t)[v10 length]) {
          int64_t var1 = v16;
        }
      }
    }
    else
    {
      id v20 = [v9 length];
      if (v14 >= 1
        && v14 - 1 < (unint64_t)v20
        && objc_msgSend(v10, "rangeOfComposedCharacterSequenceAtIndex:") != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        if (var1 < 1)
        {
          var0 -= v21;
          int64_t var1 = v21;
        }
        else
        {
          var1 -= v21;
        }
      }
    }
  }
  else if (v5)
  {
    if (var0 < (unint64_t)[v9 length])
    {
      id v17 = [v10 rangeOfComposedCharacterSequenceAtIndex:var0];
      int64_t v19 = var1 - v18;
      if (var1 < v18) {
        int64_t v19 = 0;
      }
      if (v17 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        var0 += v18;
        int64_t var1 = v19;
      }
    }
  }
  else if (var0 >= 1)
  {
    if ([v9 rangeOfComposedCharacterSequenceAtIndex:var0 - 1] == (id)0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = v22;
    }
    var0 -= v23;
    var1 += v23;
  }

  int64_t v12 = var0;
  int64_t v13 = var1;
  result.int64_t var1 = v13;
  result.int64_t var0 = v12;
  return result;
}

- (void)_handleZoomMovement:(int64_t)a3 event:(id)a4
{
  id v19 = a4;
  BOOL v6 = [(VOTElementManager *)self _currentElement];
  id v7 = v6;
  if (!v6
    || ([(VOTElement *)v6 application],
        unint64_t v8 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v9 = [(VOTElement *)v7 isValidForApplication:v8],
        v8,
        (v9 & 1) == 0))
  {
    unint64_t v10 = self->_touchContainer;

    id v7 = v10;
  }
  if ([(VOTElement *)v7 mapFeatureType]
    || [(VOTElement *)v7 doesHaveTraits:kAXWebContentTrait])
  {
    [(VOTElement *)v7 centerPoint];
    double v12 = v11;
    double v14 = v13;
  }
  else
  {
    uint64_t v15 = [v19 objectForIndex:101];
    [v15 pointValue];
    double v12 = v16;
    double v14 = v17;
  }
  if (a3 == 4)
  {
    -[VOTElement zoomOutAtLocation:](v7, "zoomOutAtLocation:", v12, v14);
  }
  else if (a3 == 3)
  {
    -[VOTElement zoomInAtLocation:](v7, "zoomInAtLocation:", v12, v14);
  }
  unint64_t v18 = +[VOTDisplayManager displayManager];
  [v18 setCursorFrameForElement:v7];
}

- (void)_handleTrackingDetailMovement:(BOOL)a3 event:(id)a4
{
  BOOL v4 = a3;
  unint64_t v10 = [(VOTElementManager *)self _currentElement];
  if (v10
    && ([(VOTElement *)v10 application],
        BOOL v6 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v7 = [(VOTElement *)v10 isValidForApplication:v6],
        v6,
        unint64_t v8 = v10,
        (v7 & 1) != 0))
  {
    if (v4)
    {
LABEL_4:
      double v11 = v8;
      [(VOTElement *)v8 increaseTrackingDetail];
      goto LABEL_7;
    }
  }
  else
  {
    unsigned __int8 v9 = self->_touchContainer;

    unint64_t v8 = v9;
    if (v4) {
      goto LABEL_4;
    }
  }
  double v11 = v8;
  [(VOTElement *)v8 decreaseTrackingDetail];
LABEL_7:
}

- (void)_handleNavigationDirectionChangeWithDirection:(int64_t)a3
{
  int64_t v4 = [(VOTElementManager *)self _newNavigationDirectionModeForRotorDirection:a3];
  BOOL v5 = +[AXSettings sharedInstance];
  [v5 setVoiceOverNavigationDirectionMode:v4];

  [(VOTElementManager *)self _outputNavigationDirectionMode:v4];
  [(VOTElement *)self->_currentElement setNavigationDirectionMode:v4];
  id v6 = [(VOTElement *)self->_currentElement remoteParent];
  if (v6) {
    [v6 setNavigationDirectionMode:v4];
  }
  [(VOTElementFetcher *)self->_fetchManager forceUpdate];
}

- (void)_handleScribbleMovement:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = [(AXScribbleManager *)self->_safariScribbleManager lastSearchPoint];
  id v6 = [(AXScribbleManager *)self->_safariScribbleManager nextSearchPoint:v3];
  if (v6 == v5)
  {
    unsigned __int8 v7 = 0;
LABEL_7:
    unint64_t v10 = +[VOTOutputManager outputManager];
    uint64_t v11 = +[VOSOutputEvent NoResultsFound];
    goto LABEL_8;
  }
  id v8 = v6;
  unsigned __int8 v7 = 0;
  while (1)
  {
    unsigned __int8 v9 = v7;
    unsigned __int8 v7 = [(VOTElement *)self->_currentElement scribbleAreaForSearchPoint:v8];

    if (v7)
    {
      if ([(AXScribbleManager *)self->_safariScribbleManager isUniqueElement:v7]) {
        break;
      }
    }
    id v8 = [(AXScribbleManager *)self->_safariScribbleManager nextSearchPoint:v3];
    if (v8 == v5) {
      goto LABEL_7;
    }
  }
  [(AXScribbleManager *)self->_safariScribbleManager foundScribbleElement:v7 atSearchPoint:[(AXScribbleManager *)self->_safariScribbleManager lastSearchPoint]];
  if ([(AXScribbleManager *)self->_safariScribbleManager lastSearchPoint] != v5)
  {
    unint64_t v10 = +[VOTOutputManager outputManager];
    uint64_t v11 = +[VOSOutputEvent DidWrapForwards];
LABEL_8:
    double v12 = (void *)v11;
    [v10 sendEvent:v11];
  }
  double v13 = +[AXHapticFeedbackManager sharedManager];
  [v13 playHapticFeedbackForType:12];

  if (v7)
  {
    objc_opt_class();
    double v14 = [v7 renderedText];
    uint64_t v15 = __UIAccessibilityCastAsClass();

    double v16 = off_1001EA9F8;
    double v17 = [(id)VOTSharedWorkspace selectedLanguage];
    unint64_t v18 = sub_100051804(v16, @"scribble.hidable.item", v17);
    CFStringRef v19 = @"No Rendered Text";
    if (v15) {
      CFStringRef v19 = (const __CFString *)v15;
    }
    CFStringRef v24 = v19;
    id v20 = __AXStringForVariables();
    +[VOTOutputRequest sendRequestWithString:v20, v24, @"__AXStringForVariablesSentinel"];

    int64_t v21 = off_1001EA9F8;
    uint64_t v22 = [(id)VOTSharedWorkspace selectedLanguage];
    uint64_t v23 = sub_100051804(v21, @"scribble.hide.hint", v22);
    +[VOTOutputRequest sendRequestWithString:v23 shouldQueue:1];
  }
  else
  {
    uint64_t v15 = VOTLogCommon();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[Scribble] no hidable areas found", buf, 2u);
    }
  }
}

- (int64_t)_newNavigationDirectionModeForRotorDirection:(int64_t)a3
{
  id v4 = [(id)VOTSharedWorkspace navigationDirection];
  if (v4 == (id)2) {
    return a3 != 1;
  }
  if (v4 == (id)1) {
    return 2 * (a3 == 1);
  }
  int64_t v5 = 1;
  if (a3 != 1) {
    return 2;
  }
  return v5;
}

- (id)_navigationDirectionModeString:(int64_t)a3
{
  if ((unint64_t)a3 > 2) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *(&off_1001B5F60 + a3);
  }
  id v4 = off_1001EA9E8;
  int64_t v5 = [(id)VOTSharedWorkspace selectedLanguage];
  id v6 = sub_100051D04(v4, v3, 0, v5);

  return v6;
}

- (void)_outputNavigationDirectionMode:(int64_t)a3
{
  id v3 = [(VOTElementManager *)self _navigationDirectionModeString:a3];
  +[VOTOutputRequest sendRequestWithString:v3];
}

- (void)_resetMathGranularMovementState
{
  elementMathSegments = self->_elementMathSegments;
  self->_elementMathSegments = 0;
  self->_elementMathSegmentGranularitdouble y = 0;

  self->_elementMathIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
}

- (unint64_t)_currentMathGranularityLevel
{
  int64_t v2 = [(VOTRotor *)self->_elementRotor currentRotorType];
  if ((v2 & 0xFFFFFFFFFFFFFFFCLL) == 0x38) {
    return v2 - 55;
  }
  else {
    return 0;
  }
}

- (void)_refreshMathSegmentsIfNeededWithPreferredDirection:(int64_t)a3
{
  unint64_t v5 = [(VOTElementManager *)self _currentMathGranularityLevel];
  if (v5)
  {
    unint64_t v6 = v5;
    if (self->_elementMathSegmentGranularity != v5)
    {
      self->_elementMathSegmentGranularitdouble y = v5;
      if (self->_elementMathIndex == 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned __int8 v7 = 0;
      }
      else
      {
        id v8 = -[NSArray objectAtIndex:](self->_elementMathSegments, "objectAtIndex:");
        unsigned __int8 v9 = [v8 attributesAtIndex:0 effectiveRange:0];
        unsigned __int8 v7 = [v9 objectForKey:UIAccessibilityTokenMathTreePosition];
      }
      unint64_t v10 = [(VOTElementManager *)self _currentElement];
      uint64_t v11 = [v10 mathSegmentsWithGranularityLevel:v6];
      elementMathSegments = self->_elementMathSegments;
      self->_elementMathSegments = v11;

      if (v7)
      {
        uint64_t v18 = 0;
        CFStringRef v19 = &v18;
        uint64_t v20 = 0x2020000000;
        uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        double v13 = self->_elementMathSegments;
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_100078C90;
        v15[3] = &unk_1001B55E8;
        void v15[4] = self;
        id v16 = v7;
        double v17 = &v18;
        [(NSArray *)v13 enumerateObjectsWithOptions:2 * (a3 == 2) usingBlock:v15];
        unint64_t v14 = v19[3];
        if (v14 == 0x7FFFFFFFFFFFFFFFLL)
        {
          _AXLogWithFacility();
          unint64_t v14 = 0;
          v19[3] = 0;
        }
        self->_elementMathIndedouble x = v14;

        _Block_object_dispose(&v18, 8);
      }
    }
  }
}

- (void)_refreshMathSegmentsIfNeeded
{
}

- (void)_handleUpdatedMathElementIndex
{
  unsigned __int8 v7 = objc_alloc_init(VOTOutputRequest);
  id v3 = [(NSArray *)self->_elementMathSegments objectAtIndex:self->_elementMathIndex];
  id v4 = [(VOTOutputRequest *)v7 addAttributedString:v3];

  [(VOTElementManager *)self sendRequest:v7];
  unint64_t v5 = (void *)VOTSharedWorkspace;
  unint64_t v6 = [(VOTElementManager *)self _currentRotorSelection];
  [v5 refreshBraille:0 rotorSelection:v6];
}

- (id)_treePositionForMathSegment:(id)a3
{
  id v3 = [a3 attributesAtIndex:0 effectiveRange:0];
  id v4 = [v3 objectForKey:UIAccessibilityTokenMathTreePosition];

  return v4;
}

- (void)_handleMathGranularMovement:(int64_t)a3 event:(id)a4
{
  id v15 = a4;
  elementMathSegments = self->_elementMathSegments;
  unsigned __int8 v7 = elementMathSegments;
  if (!elementMathSegments)
  {
    [(VOTElementManager *)self _refreshMathSegmentsIfNeededWithPreferredDirection:a3];
    unsigned __int8 v7 = self->_elementMathSegments;
  }
  id v8 = [(NSArray *)v7 count];
  if (!v8) {
    goto LABEL_21;
  }
  elementMathIndedouble x = self->_elementMathIndex;
  if (elementMathIndex == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (a3 == 1) {
      unint64_t v10 = 0;
    }
    else {
      unint64_t v10 = (unint64_t)(v8 - 1);
    }
LABEL_18:
    int v11 = 0;
    self->_elementMathIndedouble x = v10;
    if (!elementMathSegments) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (a3 != 1 || (char *)elementMathIndex != v8 - 1)
  {
    if (a3 == 2)
    {
      if (!elementMathIndex) {
        goto LABEL_10;
      }
    }
    else if (a3 == 1)
    {
      unint64_t v10 = elementMathIndex + 1;
      goto LABEL_18;
    }
    unint64_t v10 = elementMathIndex - 1;
    goto LABEL_18;
  }
LABEL_10:
  int v11 = 1;
  if (elementMathSegments) {
LABEL_19:
  }
    [(VOTElementManager *)self _refreshMathSegmentsIfNeededWithPreferredDirection:a3];
LABEL_20:
  if (v11)
  {
LABEL_21:
    double v12 = +[VOTOutputManager outputManager];
    [v12 stopSpeakingAtBoundary:0];

    double v13 = +[VOTOutputManager outputManager];
    unint64_t v14 = +[VOSOutputEvent BoundaryEncountered];
    [v13 sendEvent:v14];

    goto LABEL_23;
  }
  [(VOTElementManager *)self _handleUpdatedMathElementIndex];
LABEL_23:
}

- (id)_currentRotorSelection
{
  [(VOTElementManager *)self _refreshMathSegmentsIfNeeded];
  id v3 = [(VOTElementManager *)self _currentElement];
  if (!sub_1000F4A60([(VOTRotor *)self->_elementRotor currentRotorType])) {
    goto LABEL_10;
  }
  if (![v3 doesHaveTraits:kAXMathEquationTrait]) {
    goto LABEL_10;
  }
  elementMathIndedouble x = self->_elementMathIndex;
  if (elementMathIndex == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_10;
  }
  if (elementMathIndex >= [(NSArray *)self->_elementMathSegments count])
  {
    unint64_t v11 = self->_elementMathIndex;
    elementMathSegments = self->_elementMathSegments;
    _AXAssert();
  }
  unint64_t v5 = self->_elementMathIndex;
  if (v5 < [(NSArray *)self->_elementMathSegments count])
  {
    unint64_t v6 = [(NSArray *)self->_elementMathSegments objectAtIndex:self->_elementMathIndex];
    unsigned __int8 v7 = [(VOTElementManager *)self _treePositionForMathSegment:v6];
    id v8 = v7;
    if (v7) {
      id v9 = v7;
    }
  }
  else
  {
LABEL_10:
    id v8 = 0;
  }

  return v8;
}

- (void)_handleSearchRotorSetMathPosition:(id)a3
{
  id v12 = a3;
  if (!sub_1000F4A60([(VOTRotor *)self->_elementRotor currentRotorType])) {
    [(VOTElementManager *)self _setElementRotorToType:56 saveToPreferences:1 userInitiated:1];
  }
  [(VOTElementManager *)self _refreshMathSegmentsIfNeeded];
  id v4 = [v12 objectForIndex:109];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = v4;
    NSUInteger v6 = [(NSArray *)self->_elementMathSegments count];
    if (!v6) {
      goto LABEL_11;
    }
    NSUInteger v7 = v6;
    unint64_t v8 = 0;
    while (1)
    {
      id v9 = [(NSArray *)self->_elementMathSegments objectAtIndex:v8];
      unint64_t v10 = [(VOTElementManager *)self _treePositionForMathSegment:v9];
      char v11 = sub_1000533F8(v10, v5);

      if (v11) {
        break;
      }
      if (v7 == ++v8) {
        goto LABEL_11;
      }
    }
    if (v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      self->_elementMathIndedouble x = v8;
      [(VOTElementManager *)self _handleUpdatedMathElementIndex];
    }
    else
    {
LABEL_11:
      _AXLogWithFacility();
    }
  }
  else
  {
    _AXAssert();
  }
}

- (void)_handleOutputTextStyle:(id)a3
{
  id v10 = [(VOTElementManager *)self _currentElement];
  if ([v10 doesHaveTraits:kAXIsEditingTrait])
  {
    id v4 = objc_msgSend(v10, "attributedValueForRange:", objc_msgSend(v10, "selectedTextRange"), 1);
    [(id)VOTSharedWorkspace addMisspellingsForString:v4];
    id v5 = [v4 coalescedFontAttributes];
    NSUInteger v6 = [(VOTElementManager *)self _computeChangedFontAttributes:v5 storedAttributes:0 haveMisspellCheck:1];
    if ([v6 length])
    {
      NSUInteger v7 = objc_alloc_init(VOTOutputRequest);
      id v8 = [(VOTOutputRequest *)v7 addAttributedString:v6];
      [(VOTOutputRequest *)v7 setGeneratesBraille:1];
      [(VOTOutputRequest *)v7 setBrailleType:2];
      [(VOTElementManager *)self sendRequest:v7];
    }
    else
    {
      NSUInteger v7 = +[VOTOutputManager outputManager];
      id v9 = +[VOSOutputEvent BoundaryEncountered];
      [(VOTOutputRequest *)v7 sendEvent:v9];
    }
  }
  else
  {
    id v4 = +[VOTOutputManager outputManager];
    id v5 = +[VOSOutputEvent BoundaryEncountered];
    [v4 sendEvent:v5];
  }
}

- (void)_handlePerformTapAutofill:(id)a3
{
  id v4 = self->_autofillCurrentElement;
  unint64_t v5 = [(VOTElement *)v4 traits];
  unint64_t v6 = kAXSelectionDismissesItemTrait & v5;
  NSUInteger v7 = +[VOTOutputManager outputManager];
  if (v6) {
    +[VOSOutputEvent AutofillDidDismiss];
  }
  else {
  id v8 = +[VOSOutputEvent DidSelectAutofill];
  }
  [v7 sendEvent:v8];

  [(VOTElement *)v4 performSimpleTap];
  id v11 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  [(VOTElementManager *)self _addDescription:v4 toRequest:v11 withOptions:1];

  [v11 setCannotBeInterrupted:1];
  [(VOTElementManager *)self sendRequest:v11];
  id v9 = +[VOTDisplayManager displayManager];
  id v10 = [(VOTElementManager *)self _currentElement];
  [v10 frame];
  objc_msgSend(v9, "setCursorFrame:");

  [(VOTElementManager *)self _resetOtherTapInputModes];
}

- (void)_finishHandlingNextAutofillWithElement:(id)a3
{
  id v3 = a3;
  [v3 updateFrame];
  [v3 updateCenterPoint];
  id v12 = +[VOTDisplayManager displayManager];
  [v3 frame];
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;

  objc_msgSend(v12, "setCursorFrame:", v5, v7, v9, v11);
}

- (BOOL)_handleNextAutofill:(id)a3 reverse:(BOOL)a4
{
  BOOL v4 = a4;
  double v6 = [(VOTElement *)self->_currentElement application];
  double v7 = [v6 uiElement];
  [v7 updateCache:3004];

  double v8 = [v6 typingCandidateElements];
  double v9 = (char *)[v8 count];
  if (!v9)
  {
    double v13 = +[VOTOutputManager outputManager];
    unint64_t v14 = +[VOSOutputEvent BoundaryEncountered];
    [v13 sendEvent:v14];

    autofillCurrentElement = self->_autofillCurrentElement;
    self->_autofillCurrentElement = 0;

    goto LABEL_6;
  }
  double v10 = self->_autofillCurrentElement;
  if (v10)
  {
    double v11 = v9;
    id v12 = (char *)objc_msgSend(v8, "indexOfObject:");
    if (v12 == (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      double v10 = 0;
      goto LABEL_13;
    }
    if (v4)
    {
      if (v12)
      {
        double v10 = (VOTElement *)(v12 - 1);
        goto LABEL_13;
      }
    }
    else if (v12 != v11 - 1)
    {
      double v10 = (VOTElement *)(v12 + 1);
      goto LABEL_13;
    }
    double v17 = +[VOTOutputManager outputManager];
    uint64_t v18 = +[VOSOutputEvent BoundaryEncountered];
    [v17 sendEvent:v18];

LABEL_6:
    BOOL v16 = 0;
    goto LABEL_19;
  }
LABEL_13:
  CFStringRef v19 = [v8 objectAtIndex:v10];
  uint64_t v20 = self->_autofillCurrentElement;
  self->_autofillCurrentElement = v19;

  uint64_t v21 = self->_autofillCurrentElement;
  uint64_t v22 = self->_autofillCurrentElement;
  BOOL v23 = !v4;
  BOOL v16 = 1;
  if (v23) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = 2;
  }
  __int16 v29 = _NSConcreteStackBlock;
  uint64_t v30 = 3221225472;
  NSRange v31 = sub_100079830;
  double v32 = &unk_1001B3448;
  id v33 = self;
  int v25 = v21;
  double v34 = v25;
  [(VOTElement *)v22 scrollToElementForDirectional:v24 withCompletion:&v29];
  NSRange v26 = [(VOTElement *)v25 label];
  if ([v26 length])
  {
    id v27 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    [(VOTElement *)v25 addTextualInformationToRequest:v27 options:6 dataPackage:0];
    [(VOTElementManager *)self sendRequest:v27];
  }
  self->_flags.tapShouldHandleAutofill = 1;

LABEL_19:
  return v16;
}

- (void)_valueWait:(id)a3 oldValue:(id)a4 waitTime:(double)a5
{
}

- (void)_valueWait:(id)a3 oldValue:(id)a4 waitTime:(double)a5 borderHitIfNoChange:(BOOL)a6
{
  BOOL v6 = a6;
  id v9 = a3;
  id v10 = a4;
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v27 = 0;
  id v28 = &v27;
  uint64_t v29 = 0x3032000000;
  uint64_t v30 = sub_100067578;
  NSRange v31 = sub_100067588;
  id v32 = 0;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100079AF0;
  v23[3] = &unk_1001B5610;
  id v12 = v9;
  id v24 = v12;
  NSRange v26 = &v27;
  id v13 = v10;
  id v25 = v13;
  unint64_t v14 = objc_retainBlock(v23);
  if ((((uint64_t (*)(void))v14[2])() & 1) == 0)
  {
    while (CFAbsoluteTimeGetCurrent() - Current < 0.5)
    {
      +[NSThread sleepForTimeInterval:a5];
      if (((uint64_t (*)(void *))v14[2])(v14)) {
        break;
      }
      id v15 = +[NSScanner localizedScannerWithString:v28[5]];
      int v22 = 0;
      if ([v15 scanFloat:&v22])
      {
        [v12 absoluteValue];
        double v17 = vabdd_f64(0.0, v16);
        double v18 = vabdd_f64(1.0, v16);
        if (v17 < 2.22044605e-16 || v18 < 2.22044605e-16)
        {

          break;
        }
      }
    }
    if (v6 && v28[5] && objc_msgSend(v13, "isEqualToString:"))
    {
      uint64_t v20 = +[VOTOutputManager outputManager];
      uint64_t v21 = +[VOSOutputEvent BoundaryEncountered];
      [v20 sendEvent:v21];
    }
  }

  _Block_object_dispose(&v27, 8);
}

- (void)_handleAdjustValue:(id)a3 reverse:(BOOL)a4
{
  BOOL v4 = a4;
  id v20 = [(VOTElementManager *)self _currentElement];
  [v20 centerPoint];
  double v7 = v6;
  double v9 = v8;
  id v10 = [v20 value];
  if (v4) {
    [v20 decrementAction];
  }
  else {
    [v20 incrementAction];
  }
  [(VOTElementManager *)self _valueWait:v20 oldValue:v10 waitTime:0.05];
  [(VOTElement *)self->_currentElement updateTraits];
  double v11 = [(VOTElement *)self->_currentElement uiElement];
  [v11 updateCache:2027];

  id v12 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  [(VOTElementManager *)self _addDescription:v20 toRequest:v12 withOptions:65544];
  if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXToggleTrait])
  {
    id v13 = [(VOTElement *)self->_currentElement toggleStatusLabel];
    id v14 = [v12 addString:v13];
  }
  if (![(VOTElement *)self->_currentElement doesHaveTraits:kAXStartsMediaSessionTrait]) {
    [(VOTElementManager *)self sendRequest:v12];
  }
  if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXUpdatesFrequentlyTrait]) {
    [(VOTElementManager *)self resetFrequentUpdateTextCache];
  }
  if (([v20 isValid] & 1) == 0)
  {
    id v15 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", v7, v9);
    double v16 = v15;
    if (v15 && ([v15 isEqual:v20] & 1) == 0)
    {
      [(VOTElementManager *)self _setCurrentElement:v16];
      double v17 = +[VOTDisplayManager displayManager];
      [v17 setCursorFrameForElement:v16];
    }
  }
  [(VOTElement *)self->_currentElement updateEquivalenceTag];
  double v18 = (void *)VOTSharedWorkspace;
  CFStringRef v19 = [(VOTElementManager *)self _currentRotorSelection];
  [v18 refreshBraille:1 rotorSelection:v19];

  self->_lastAdjustValueTime = CFAbsoluteTimeGetCurrent();
}

- (void)_handleKBPopupVariantsNotification:(id)a3
{
  CGPoint fingerLocation = self->_fingerLocation;
  self->_keyboardAlternativeVisibleTrackingPoint = fingerLocation;
  self->_keyboardAlternativeVisibleStartPoint = fingerLocation;
  self->_keyboardAlternativesVisible = 1;
  if (objc_msgSend((id)VOTSharedWorkspace, "tapAndHoldMode", a3)) {
    [(SCRCTargetSelectorTimer *)self->_alternativeKeyDismissalTimer dispatchAfterDelay:10.0];
  }
  double v5 = [(VOTElement *)self->_currentElement application];
  id v8 = [v5 currentSoftwareKeyboardLayout];

  if ((sub_100052C88(v8) & 1) == 0)
  {
    double v6 = +[VOTOutputManager outputManager];
    double v7 = +[VOSOutputEvent PopoverDidAppear];
    [v6 sendEvent:v7];
  }
}

- (void)_handleCameraCenteredNotification:(id)a3
{
  id v3 = +[VOTOutputManager outputManager];
  [v3 playSoundFast:@"Sounds/RoadWalking.aiff"];
}

- (void)_handleBarcodeVisibilityNotification:(id)a3
{
  unsigned int v3 = [a3 BOOLValue];
  BOOL v4 = +[VOTWorkspace sharedWorkspace];
  unsigned int v5 = [v4 screenCurtainEnabled];

  if (v3)
  {
    if (v5)
    {
      double v6 = +[VOTWorkspace sharedWorkspace];
      [v6 setScreenCurtainSuspended:1];
    }
    id v7 = +[VOTDisplayManager displayManager];
    [v7 clearCursorFrame];
  }
  else
  {
    if (!v5) {
      return;
    }
    id v7 = +[VOTWorkspace sharedWorkspace];
    [v7 setScreenCurtainSuspended:0];
  }
}

- (void)_handleFocusedElementContentChangeNotification:(id)a3
{
  id v4 = +[VOTOutputManager outputManager];
  unsigned int v3 = +[VOSOutputEvent DidEnterSecureText];
  [v4 sendEvent:v3];
}

- (void)_handleScreenWillChangeNotification:(id)a3
{
  id v4 = a3;
  if ([(VOTElementManager *)self webPageLoadedGenerationMark])
  {
    unsigned int v5 = VOTLogWebPageMovement();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_10011E9BC();
    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v4 isEqualToString:kAXScreenChangePopup])
    {
      self->_lastPopupTime = CFAbsoluteTimeGetCurrent();
      double v6 = [(VOTElementManager *)self _currentElement];
      elementBeforePopup = self->_elementBeforePopup;
      self->_elementBeforePopup = v6;

      id v8 = VOTLogCommon();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        sub_10011E954();
      }
    }
    double v9 = [(VOTElementManager *)self _currentElement];
    elementBeforeScreenChange = self->_elementBeforeScreenChange;
    self->_elementBeforeScreenChange = v9;

    [(VOTElementManager *)self setCurrentElement:0];
    [(VOTElementManager *)self _resetItemChooserCache];
    unsigned int v5 = +[VOTDisplayManager displayManager];
    [v5 setCursorFrameForElement:0];
  }
}

- (void)_handleRealtimeElementUpdate:(id)a3
{
  id v4 = a3;
  id v13 = v4;
  if (v4 && (v6 = CFGetTypeID(v4), TypeID = AXUIElementGetTypeID(), id v5 = v13, v6 == TypeID))
  {
    id v8 = +[AXUIElement uiElementWithAXElement:v13];
    double v9 = +[VOTElement elementWithUIElement:v8];
  }
  else
  {
    double v9 = [(VOTElement *)self->_currentElement application];
  }
  id v10 = [v9 realtimeElements];
  double v11 = +[VOTBrailleManager manager];
  [v11 updateRealtimeElements:v10];

  realTimeElementsCache = self->_realTimeElementsCache;
  self->_realTimeElementsCache = v10;
}

- (void)_handleScreenWillWakeNotification:(id)a3
{
  [(id)VOTSharedWorkspace setScreenOn:1 silently:1];
  uint64_t v4 = [(VOTElementManager *)self delayedNotificationAnnouncementRequest];
  if (v4)
  {
    uint64_t v5 = v4;
    [(VOTElementManager *)self _systemNotificationInProgressForRequest:v4];
    [(VOTElementManager *)self sendRequest:v5];
  }

  _objc_release_x1();
}

- (void)_handleWebFormControlInteractionStartNotification:(id)a3
{
  [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer cancel];
  id v6 = [(VOTElementManager *)self _currentElement];
  if ([v6 isAlive]
    && [v6 doesHaveTraits:kAXWebContentTrait])
  {
    uint64_t v4 = (VOTElement *)v6;
    webFormControlBeforeInteraction = self->_webFormControlBeforeInteraction;
    self->_webFormControlBeforeInteraction = v4;
  }
  else
  {
    webFormControlBeforeInteraction = self->_webFormControlBeforeInteraction;
    self->_webFormControlBeforeInteraction = 0;
  }
}

- (void)_handleWebFormControlInteractionEndNotification:(id)a3
{
  self->_lastWebKeyboardDismissTime = CFAbsoluteTimeGetCurrent();
  [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer cancel];
  updateAppFromTimer = self->_updateAppFromTimer;

  [(SCRCTargetSelectorTimer *)updateAppFromTimer dispatchAfterDelay:1.0];
}

- (BOOL)_shouldMoveToLastWebFormControl
{
  if (self->_webFormControlBeforeInteraction)
  {
    if (CFAbsoluteTimeGetCurrent() - self->_lastWebKeyboardDismissTime < 2.0
      && [(VOTElement *)self->_webFormControlBeforeInteraction isAlive])
    {
      unsigned int v3 = [(VOTElement *)self->_webFormControlBeforeInteraction remoteParent];
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = [v3 uiElement];
        unsigned __int8 v6 = [v5 BOOLWithAXAttribute:2025];

        if (v6) {
          return 1;
        }
      }
      else
      {
        id v8 = [(VOTElement *)self->_webFormControlBeforeInteraction uiElement];
        unsigned __int8 v9 = [v8 BOOLWithAXAttribute:2025];

        if (v9) {
          return 1;
        }
      }
    }
    webFormControlBeforeInteraction = self->_webFormControlBeforeInteraction;
    self->_webFormControlBeforeInteraction = 0;
  }
  return 0;
}

- (void)_handleWebTextMatchSelectedNotification:(id)a3
{
  uint64_t v4 = [(VOTElement *)self->_currentElement application];
  id v13 = [v4 firstElementInApplicationForFocus];

  uint64_t v5 = [(VOTElementManager *)self _nearestWebElement:v13];
  unsigned __int8 v6 = [v5 textMarkerRangeForSelection];
  id v7 = [v5 textMarkerRangeForSelection];
  [(VOTElementManager *)self _outputWebLineWithMarkerRange:v7 withElement:v5];

  if ([v6 count])
  {
    id v8 = [v6 objectAtIndex:0];
    unsigned __int8 v9 = [v5 elementForTextMarker:v8];

    [(VOTElementManager *)self _setCurrentElement:v9];
    id v10 = +[VOTDisplayManager displayManager];
    [v10 setCursorFrameForElement:v9];

    double v11 = +[VOTOutputManager outputManager];
    id v12 = +[VOSOutputEvent DidFocusOnElement];
    [v11 sendEvent:v12];
  }
}

- (void)_handleWebSearchResult:(int64_t)a3 withEvent:(id)a4
{
  id v6 = [(VOTElementManager *)self _currentElement];
  [v6 findSearchResult:a3 == 1 withSearchText:self->_webSearchText];
}

- (void)_handleWebTextAvailableNotification:(id)a3
{
  id v5 = a3;
  if (!v5 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_storeStrong((id *)&self->_webSearchText, a3);
    [(VOTElementRotor *)self->_elementRotor setShowsWebSearchResults:v5 != 0];
    [(VOTElementManager *)self _updateRotorForCurrentElement];
  }
}

- (BOOL)_savedDescriptionToPhoto:(id)a3 description:(id)a4 element:(id)a5
{
  id v7 = a3;
  id v8 = a4;
  if (([a5 savePhotoLabeliCloud:v8] & 1) == 0)
  {
    if (AXDeviceIsAudioAccessory())
    {
      BOOL v9 = 0;
      goto LABEL_12;
    }
    id v10 = [v7 absoluteString];
    double v11 = [v10 pathExtension];
    id v12 = [v11 lowercaseString];

    if ([v12 hasSuffix:@"mov"])
    {
      char v13 = UIAccessibilityAddMetadataDescriptionToVideo();
    }
    else
    {
      if (([v12 hasPrefix:@"jp"] & 1) == 0
        && ![v12 hasSuffix:@"png"])
      {
        BOOL v9 = 0;
        goto LABEL_11;
      }
      char v13 = UIAccessibilityAddMetadataDescriptionToImage();
    }
    BOOL v9 = v13;
LABEL_11:

    goto LABEL_12;
  }
  BOOL v9 = 1;
LABEL_12:

  return v9;
}

- (void)_handleChangeAudioDuckingMode:(id)a3
{
}

- (void)_handleLabelElementAcceptedNotification:(id)a3
{
  id v10 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && self->_labeledElementIdentification)
  {
    uint64_t v4 = [(VOTElement *)self->_cachedLabelElement url];
    if (![(VOTElementManager *)self _savedDescriptionToPhoto:v4 description:v10 element:self->_cachedLabelElement])
    {
      id v5 = +[VOTElementLabelCache sharedManager];
      [v5 storeUserLabel:v10 forIdentification:self->_labeledElementIdentification];

      id v6 = [(VOTElement *)self->_currentElement uniqueIdentification];
      unsigned int v7 = [v6 isEqual:self->_labeledElementIdentification];

      if (v7) {
        [(VOTElement *)self->_currentElement setUserDefinedLabel:v10];
      }
    }
    labeledElementIdentification = self->_labeledElementIdentification;
    self->_labeledElementIdentification = 0;

    cachedLabelElement = self->_cachedLabelElement;
    self->_cachedLabelElement = 0;
  }
}

- (void)_resetElementLabel
{
  labeledElementIdentification = self->_labeledElementIdentification;
  if (labeledElementIdentification)
  {
    self->_labeledElementIdentification = 0;

    [(VOTElementManager *)self showElementLabelPanel:0 currentLabel:0];
  }
  cachedLabelElement = self->_cachedLabelElement;
  self->_cachedLabelElement = 0;
}

- (void)_handleMonitorElement:(id)a3
{
  uint64_t v4 = [(VOTElementManager *)self _currentElement];
  id v5 = [v4 application];
  id v6 = [v5 bundleIdentifier];

  if (v6)
  {
    unsigned int v7 = [(NSMutableDictionary *)self->_elementMonitorCache objectForKeyedSubscript:v6];
    if (!v7)
    {
      unsigned int v7 = +[NSMutableDictionary dictionary];
      [(NSMutableDictionary *)self->_elementMonitorCache setObject:v7 forKeyedSubscript:v6];
    }
    id v8 = [(id)VOTSharedWorkspace selectedLanguage];
    BOOL v9 = [v7 objectForKeyedSubscript:v4];

    if (v9)
    {
      id v10 = [v7 objectForKeyedSubscript:v4];
      double v11 = sub_100051D04(off_1001EA9E8, @"monitored.element.removed", 0, v8);
      id v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v11, v10);
      id v13 = sub_10000ABF8(v12, 0, v8);

      [v7 setObject:0 forKeyedSubscript:v4];
      if (![v7 count]) {
        [(NSMutableDictionary *)self->_elementMonitorCache setObject:0 forKeyedSubscript:v6];
      }
      id v14 = VOTLogCommon();
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 138412290;
      NSRange v26 = v4;
      id v15 = "Removing monitoring: %@";
      double v16 = v14;
      uint32_t v17 = 12;
    }
    else
    {
      id v10 = [(VOTElementManager *)self _monitoredElementCachedText:v4];
      double v18 = sub_100051D04(off_1001EA9E8, @"monitored.element.added", 0, v8);
      CFStringRef v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v18, v10);
      id v20 = sub_10000ABF8(v19, 0, v8);

      [v7 setObject:v10 forKeyedSubscript:v4];
      id v14 = VOTLogCommon();
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
LABEL_14:

        if ([(NSMutableDictionary *)self->_elementMonitorCache count])
        {
          if (!self->_flags.isMonitoringElements)
          {
            self->_flags.isMonitoringElements = 1;
            uint64_t v21 = VOTLogCommon();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Starting monitoring of all elements", buf, 2u);
            }

            elementMonitorTimer = self->_elementMonitorTimer;
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_10007AD38;
            v24[3] = &unk_1001B33B8;
            v24[4] = self;
            [(SCRCTargetSelectorTimer *)elementMonitorTimer dispatchAfterDelay:v24 withBlock:5.0];
          }
        }
        else
        {
          [(SCRCTargetSelectorTimer *)self->_elementMonitorTimer cancel];
          self->_flags.isMonitoringElements = 0;
          BOOL v23 = VOTLogCommon();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Stopping monitoring of all elements", buf, 2u);
          }
        }
        goto LABEL_23;
      }
      *(_DWORD *)buf = 138412546;
      NSRange v26 = v4;
      __int16 v27 = 2112;
      id v28 = v10;
      id v15 = "Monitoring: %@, %@";
      double v16 = v14;
      uint32_t v17 = 22;
    }
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, v15, buf, v17);
    goto LABEL_14;
  }
  unsigned int v7 = VOTLogCommon();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_10011E9F0();
  }
LABEL_23:
}

- (void)_handleLabelElement:(id)a3
{
  id obj = [(VOTElementManager *)self _currentElement];
  uint64_t v4 = [obj uniqueIdentification];
  labeledElementIdentification = self->_labeledElementIdentification;
  self->_labeledElementIdentification = v4;

  objc_storeStrong((id *)&self->_cachedLabelElement, obj);
  id v6 = [obj elementStoredUserLabel];
  if (!v6)
  {
    id v6 = [obj userDefinedLabel];
    if (!v6)
    {
      id v6 = [obj label];
    }
  }
  [(VOTElementManager *)self showElementLabelPanel:1 currentLabel:v6];
}

- (void)showElementLabelPanel:(BOOL)a3 currentLabel:(id)a4
{
  BOOL v4 = a3;
  id v5 = a4;
  id v6 = +[VOTSpringBoardConnection defaultConnection];
  [v6 showElementLabelPanel:v4 currentLabel:v5];
}

- (BOOL)shouldSnarfCrown
{
  int64_t v2 = +[VOTWorkspace sharedWorkspace];
  unsigned __int8 v3 = [v2 useDigitalCrownNavigation];

  return v3;
}

- (void)_handleToggleCrownNavigation:(id)a3
{
  unsigned __int8 v3 = +[VOTWorkspace sharedWorkspace];
  unsigned int v4 = [v3 useDigitalCrownNavigation];

  id v5 = +[VOTWorkspace sharedWorkspace];
  [v5 setUseDigitalCrownNavigationEnabled:v4 ^ 1];

  BOOL v9 = objc_alloc_init(VOTOutputRequest);
  if (v4) {
    id v6 = @"crown.navigation.off";
  }
  else {
    id v6 = @"crown.navigation.on";
  }
  unsigned int v7 = sub_100051804(off_1001EA9E8, v6, 0);
  id v8 = [(VOTOutputRequest *)v9 addString:v7];

  [(VOTOutputRequest *)v9 send];
}

- (void)_handleStartStopToggle:(id)a3
{
  unsigned int v4 = +[VOTOutputManager outputManager];
  [v4 stopSpeakingAtBoundary:0];

  id v5 = +[VOTElement systemAppApplication];
  id v6 = +[AXSystemAppServer server];
  unsigned __int8 v7 = [v6 toggleIncomingCall];

  double Current = CFAbsoluteTimeGetCurrent();
  [(id)VOTSharedWorkspace lastTelephonyCallActive];
  double v10 = Current - v9;
  double v11 = +[AXSubsystemMagicTapToggle sharedInstance];
  unsigned __int8 v12 = [v11 ignoreLogging];

  if ((v12 & 1) == 0)
  {
    id v13 = +[AXSubsystemMagicTapToggle identifier];
    id v14 = AXLoggerForFacility();

    os_log_type_t v15 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v14, v15))
    {
      double v16 = AXColorizeFormatLog();
      id v28 = NSStringFromBOOL();
      uint32_t v17 = _AXStringForArgs();

      if (os_log_type_enabled(v14, v15))
      {
        *(_DWORD *)buf = 138543362;
        double v34 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}@", buf, 0xCu);
      }
    }
  }
  if (v10 <= 10.0) {
    char v18 = 1;
  }
  else {
    char v18 = v7;
  }
  if ((v18 & 1) == 0)
  {
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10007B364;
    v31[3] = &unk_1001B3448;
    void v31[4] = self;
    id v32 = v5;
    CFStringRef v19 = objc_retainBlock(v31);
    if (_AXSSpeakThisEnabled())
    {
      id v20 = [sub_10007094C() sharedInstance];
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10007B4A4;
      v29[3] = &unk_1001B5638;
      uint64_t v30 = v19;
      [v20 toggleSpeaking:v29];
    }
    else
    {
      uint64_t v21 = +[AXSubsystemMagicTapToggle sharedInstance];
      unsigned __int8 v22 = [v21 ignoreLogging];

      if ((v22 & 1) == 0)
      {
        BOOL v23 = +[AXSubsystemMagicTapToggle identifier];
        id v24 = AXLoggerForFacility();

        os_log_type_t v25 = AXOSLogLevelFromAXLogLevel();
        if (os_log_type_enabled(v24, v25))
        {
          NSRange v26 = AXColorizeFormatLog();
          __int16 v27 = _AXStringForArgs();
          if (os_log_type_enabled(v24, v25))
          {
            *(_DWORD *)buf = 138543362;
            double v34 = v27;
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}@", buf, 0xCu);
          }
        }
      }
      ((void (*)(void *))v19[2])(v19);
    }
  }
  if (self->_flags.currentElementAllowsDirectTouch) {
    self->_flags.avoidAnnouncingDirectTouchArea = [(VOTElement *)self->_currentElement avoidAnnouncingDirectTouchArea];
  }
  self->_lastPressOnMediaSessionElement = CFAbsoluteTimeGetCurrent();
}

- (double)_pressActionResultDelay
{
  return 0.08;
}

- (void)_handleDoubleTap:(id)a3
{
  if (AXDeviceIsTV())
  {
    [(VOTElementManager *)self __tvOS_toggleAudioDescriptions];
  }
  else
  {
    unsigned int v4 = [(VOTElementManager *)self _currentElement];
    if (sub_100050E5C() && !v4)
    {
      unsigned int v4 = [(VOTElementManager *)self touchContainer];
    }
    [(VOTElementManager *)self setLastUserElementTouchTime:0.0];
    if ([v4 supportsSecondaryActivate])
    {
      if (([v4 doesHaveTraits:kAXPlaysSoundTrait] & 1) == 0)
      {
        id v5 = +[VOTOutputManager outputManager];
        id v6 = +[VOSOutputEvent DidActivateElement];
        [v5 sendEvent:v6];
      }
      [v4 performDoubleTap];
      if ([v4 doesHaveTraits:kAXLaunchIconTrait])
      {
        cachedLaunchIcons = self->_cachedLaunchIcons;
        id v8 = [v4 uniqueIdentification];
        [(NSMutableArray *)cachedLaunchIcons addObject:v8];
      }
    }
    else
    {
      [v4 performSimpleTap];
      +[NSThread sleepForTimeInterval:0.2];
      [v4 performSimpleTap:1];
    }
    double v9 = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent()];
    [(VOTElementManager *)self _pressActionResultDelay];
    id v10 = v9;
    AXPerformBlockOnMainThreadAfterDelay();
  }
}

- (void)_handleTripleTap:(id)a3
{
  unsigned int v4 = [(VOTElementManager *)self _currentElement];
  if (sub_100050E5C() && !v4)
  {
    unsigned int v4 = [(VOTElementManager *)self touchContainer];
  }
  [v4 performSimpleTap];
  +[NSThread sleepForTimeInterval:0.2];
  [v4 performSimpleTap:1];
  +[NSThread sleepForTimeInterval:0.2];
  [v4 performSimpleTap:1];
  id v5 = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent()];
  [(VOTElementManager *)self _pressActionResultDelay];
  id v6 = v5;
  AXPerformBlockOnMainThreadAfterDelay();
}

- (BOOL)_useLineFrameBoundsForTouch:(id)a3
{
  CGFloat x = self->_lineFrame.origin.x;
  CGFloat y = self->_lineFrame.origin.y;
  CGFloat width = self->_lineFrame.size.width;
  CGFloat height = self->_lineFrame.size.height;
  CGFloat v7 = CGRectZero.origin.y;
  CGFloat v8 = CGRectZero.size.width;
  CGFloat v9 = CGRectZero.size.height;
  id v10 = a3;
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  v15.origin.CGFloat x = CGRectZero.origin.x;
  v15.origin.CGFloat y = v7;
  v15.size.CGFloat width = v8;
  v15.size.CGFloat height = v9;
  char v11 = CGRectEqualToRect(v14, v15);
  unsigned __int8 v12 = [v10 doesHaveTraits:kAXStaticTextTrait | kAXWebContentTrait];

  return v12 & ~v11;
}

- (void)_updateCurrentWordContextForBook:(id)a3
{
  id v4 = a3;
  if ([(NSArray *)self->_lineArray count])
  {
    id v5 = [(NSArray *)self->_lineArray objectAtIndex:0];
  }
  else
  {
    id v5 = 0;
  }
  NSUInteger v6 = self->_elementUnitOutputRange.length + 1;
  valuePtr[0] = self->_elementUnitOutputRange.location - self->_bookLineRange.location;
  valuePtr[1] = v6;
  AXValueRef v7 = AXValueCreate(kAXValueTypeCFRange, valuePtr);
  id v8 = objc_msgSend(objc_allocWithZone((Class)NSDictionary), "initWithObjectsAndKeys:", v7, @"contextRange", v5, @"startTextMarker", 0);
  if (v7) {
    CFRelease(v7);
  }
  [v4 setCurrentWordContextForBook:v8];
}

- (void)_updateLastFirstResponderChangedTime
{
  self->_lastFirstResponderChangeTime = CFAbsoluteTimeGetCurrent();
  self->_didIgnoreLastFirstResponderChangeOnSelectionChange = 0;
}

- (BOOL)_updateCursorAfterPressForElement:(id)a3 currentElementRange:(_NSRange)a4 request:(id)a5 didHaveCursor:(BOOL)a6 doesHaveCursor:(BOOL)a7
{
  BOOL v7 = a6;
  NSUInteger length = a4.length;
  NSUInteger location = a4.location;
  id v12 = a3;
  id v13 = a5;
  if (location != 0x7FFFFFFF)
  {
    CGRect v14 = [v12 selectedTextRange];
    lastSeenLineAndColumn = self->_lastSeenLineAndColumn;
    if (!lastSeenLineAndColumn
      || ([(NSDictionary *)lastSeenLineAndColumn objectForKey:@"lineNumber"],
          double v16 = objc_claimAutoreleasedReturnValue(),
          unint64_t v17 = (unint64_t)[v16 integerValue],
          v16,
          (v17 & 0x8000000000000000) != 0))
    {
      int v21 = 0;
      uint64_t v20 = 0;
      uint64_t v18 = 0x7FFFFFFFLL;
    }
    else
    {
      uint64_t v18 = (uint64_t)[v12 rangeForLineNumberAndColumn:self->_lastSeenLineAndColumn];
      uint64_t v20 = v19;
      int v21 = 1;
    }
    if (v18 == 0x7FFFFFFF) {
      int v22 = 0;
    }
    else {
      int v22 = v21 & !v7;
    }
    if (!v7) {
      goto LABEL_19;
    }
    char v23 = v21 ^ 1;
    if (!self->_lastSeenLineAndColumn) {
      char v23 = 1;
    }
    if (v23)
    {
LABEL_19:
      BOOL v27 = 0;
    }
    else
    {
      id v24 = objc_msgSend(v12, "rangeForLineNumberAndColumn:");
      BOOL v27 = v14 < v24 || v14 - v24 >= v25;
    }
    if ((v22 | v27) == 1
      && ((unint64_t lastTextPressAction = self->_lastTextPressAction, lastTextPressAction == 3) || !lastTextPressAction))
    {
      -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:](self, "_setSelectedTextRange:onElement:refreshBraille:", v18, 0, v12, 1);
      uint64_t v29 = objc_msgSend(v12, "valueForRange:", v18, v20);
      if ([v29 length])
      {
        uint64_t v30 = sub_100051804(off_1001EA9E8, @"cursor.at.start.of.line", 0);
        NSRange v31 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v30, v29);
        id v32 = [v13 addString:v31];
      }
      self->_unint64_t lastTextPressAction = 1;
    }
    else
    {
      if (v7)
      {
        unsigned __int8 v33 = 0;
        unsigned int v34 = 0;
      }
      else
      {
        unsigned int v34 = [v12 doesHaveTraits:kAXTextAreaTrait] ^ 1;
        double v35 = [v12 application];
        if ([v35 isMail]) {
          unsigned __int8 v33 = [v12 doesHaveTraits:kAXWebContentTrait];
        }
        else {
          unsigned __int8 v33 = 0;
        }
      }
      if (v14 == (unsigned char *)location) {
        int v36 = 1;
      }
      else {
        int v36 = v34;
      }
      if (v36 != 1 || (v33 & 1) != 0)
      {
        -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:](self, "_setSelectedTextRange:onElement:refreshBraille:", location, 0, v12, 1);
        double v40 = sub_100051804(off_1001EA9E8, @"cursor.at.start", 0);
        id v41 = [v13 addString:v40];

        unint64_t v39 = 2;
      }
      else
      {
        -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:](self, "_setSelectedTextRange:onElement:refreshBraille:", location + length, 0, v12, 1);
        uint64_t v37 = sub_100051804(off_1001EA9E8, @"cursor.at.end", 0);
        id v38 = [v13 addString:v37];

        unint64_t v39 = 3;
      }
      self->_unint64_t lastTextPressAction = v39;
    }
  }

  return location != 0x7FFFFFFF;
}

- (void)_performPressOnElement:(id)a3 withEvent:(id)a4 centerPoint:(CGPoint)a5
{
  double y = a5.y;
  double x = a5.x;
  id v20 = a3;
  id v8 = a4;
  CGFloat v9 = v8;
  double v10 = CGPointZero.y;
  if (CGPointZero.x == x && v10 == y)
  {
    id v12 = objc_msgSend(v8, "objectForIndex:", 101, CGPointZero.x, v10);
    [v12 pointValue];
    double v14 = v13;
    double v16 = v15;

    [v20 frame];
    v22.double x = v14;
    v22.double y = v16;
    if (CGRectContainsPoint(v23, v22))
    {
      unint64_t v17 = [v9 objectForIndex:111];
      [v17 floatValue];
      double v19 = v18;

      objc_msgSend(v20, "performTapAtPoint:withForce:playSound:", 1, v14, v16, v19);
    }
  }
  else
  {
    objc_msgSend(v20, "performSimpleTap", CGPointZero.x, v10);
  }
}

- (void)_handlePerformPressAction:(id)a3
{
  id v76 = a3;
  id v4 = [(VOTElementManager *)self _currentElement];
  if (sub_100050E5C() && !v4)
  {
    id v4 = [(VOTElementManager *)self touchContainer];
  }
  if ([(VOTElement *)v4 doesHaveTraits:kAXLaunchIconTrait])
  {
    cachedLaunchIcons = self->_cachedLaunchIcons;
    NSUInteger v6 = [(VOTElement *)v4 uniqueIdentification];
    [(NSMutableArray *)cachedLaunchIcons addObject:v6];
  }
  if ([v76 isTouchEvent]
    && [(id)VOTSharedWorkspace typingMode] == (id)1
    && [(VOTElement *)v4 keyboardKeyAllowsTouchTyping])
  {
    self->_flags.didTouchTypingOutputStart = 0;
  }
  [(VOTElement *)v4 centerPoint];
  double v8 = v7;
  double v10 = v9;
  if ([(VOTElement *)v4 isReadingContent])
  {
    bookSubelement = self->_bookSubelement;
    if (!bookSubelement)
    {
      if ([(VOTElement *)v4 supportsFrameForRange])
      {
        v82.origin.double x = CGRectZero.origin.x;
        v82.origin.double y = CGRectZero.origin.y;
        v82.size.CGFloat width = CGRectZero.size.width;
        v82.size.CGFloat height = CGRectZero.size.height;
        if (!CGRectEqualToRect(self->_lineFrame, v82))
        {
          double MidX = CGRectGetMidX(self->_lineFrame);
          double MidY = CGRectGetMidY(self->_lineFrame);
          double v46 = [v76 objectForIndex:111];
          [v46 floatValue];
          double v48 = v47;

          -[VOTElement performTapAtPoint:withForce:playSound:](v4, "performTapAtPoint:withForce:playSound:", 1, MidX, MidY, v48);
          goto LABEL_16;
        }
      }
      [(VOTElementManager *)self _updateCurrentWordContextForBook:v4];
      bookSubelement = v4;
    }
    [(VOTElement *)bookSubelement performSimpleTap];
LABEL_16:
    id v12 = 0;
    id v13 = 0;
LABEL_58:
    self->_unint64_t lastTextPressAction = 0;
    goto LABEL_59;
  }
  if ([(VOTElement *)v4 isInTableCell])
  {
    self->_previousTableOrCollectionViewRowTime = CFAbsoluteTimeGetCurrent();
    double v14 = [(VOTElement *)v4 parentTableOrCollectionView];
    if (v14)
    {
      double v15 = objc_opt_new();
      id v16 = [(VOTElement *)v4 indexPathAsRange];
      objc_msgSend(v15, "setIndexPath:", v16, v17);
      float v18 = [(VOTElement *)v4 label];
      [v15 setLabel:v18];

      double v19 = [(VOTElementManager *)self previousTableOrCollectionViewToMetadata];
      [v19 setObject:v15 forKeyedSubscript:v14];

      id v20 = [(VOTElementManager *)self previousTableOrCollectionViewList];
      [v20 addObject:v14];
    }
    int v21 = [(VOTElement *)v4 application];
    [(VOTElementManager *)self setPreviousTableOrCollectionViewApplication:v21];
  }
  uint64_t v22 = kAXTextEntryTrait | kAXIsEditingTrait;
  if ([(VOTElement *)v4 doesHaveAllTraits:kAXTextEntryTrait | kAXIsEditingTrait]) {
    uint64_t v23 = [(VOTElement *)v4 shouldIgnoreTextEditingTrait] ^ 1;
  }
  else {
    uint64_t v23 = 0;
  }
  double v24 = CGRectGetMidX(self->_lineFrame);
  double v25 = CGRectGetMidY(self->_lineFrame);
  NSRange v26 = +[VOTElement systemWideElement];
  objc_msgSend(v26, "convertPoint:toContextId:", -[VOTElement windowContextId](v4, "windowContextId"), v24, v25);
  double v28 = v27;
  double v30 = v29;

  if ((v23 & 1) != 0 || ![(VOTElement *)v4 doesHaveTraits:kAXTextAreaTrait])
  {
    NSRange v31 = 0;
  }
  else
  {
    NSRange v31 = -[VOTElement dataDetectorURL:](v4, "dataDetectorURL:", v28, v30);
  }
  unsigned int v32 = [(VOTElementManager *)self _useLineFrameBoundsForTouch:v4];
  if ([(VOTElement *)v4 doesHaveAllTraits:v22]
    && ![(VOTElement *)v4 shouldIgnoreTextEditingTrait])
  {
    elementUnitIndedouble x = [(VOTElement *)v4 selectedTextRange];
  }
  else
  {
    elementUnitIndedouble x = self->_elementUnitIndex;
    if (elementUnitIndex == (id)-1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0x7FFFFFFFLL;
      goto LABEL_34;
    }
  }
  uint64_t v35 = (uint64_t)[(VOTElement *)v4 lineRangeForPosition:elementUnitIndex];
LABEL_34:
  if (v35 != 0x7FFFFFFF)
  {
    int v36 = -[VOTElement attributedValueForRange:](v4, "attributedValueForRange:", v35, v34);
    uint64_t v37 = -[VOTElementManager _textAttachmentElementForString:inRange:](self, "_textAttachmentElementForString:inRange:", v36, 0, [v36 length]);
    if (v37)
    {
      id v38 = v37;
      [v37 performSimpleTap];

      id v13 = 0;
      id v12 = 0;
LABEL_57:

      goto LABEL_58;
    }
  }
  if (v31) {
    int v39 = 1;
  }
  else {
    int v39 = v32;
  }
  if (v39 == 1)
  {
    double v40 = [v76 objectForIndex:111];
    [v40 floatValue];
    double v42 = v41;

    -[VOTElement performTapAtPoint:withForce:playSound:](v4, "performTapAtPoint:withForce:playSound:", 1, v28, v30, v42);
    id v13 = 0;
    id v12 = 0;
    goto LABEL_57;
  }
  if ([(VOTElement *)v4 doesHaveAllTraits:kAXStaticTextTrait | kAXWebContentTrait])
  {
    int v43 = [(VOTElement *)v4 previousElement];
    if ([v43 doesHaveTraits:kAXToggleTrait | kAXRadioButtonTrait])
    {
      id v12 = [v43 toggleStatusLabel];
      id v13 = v43;
    }
    else
    {
      id v13 = 0;
      id v12 = 0;
    }
  }
  else
  {
    id v13 = 0;
    id v12 = 0;
  }
  -[VOTElementManager _performPressOnElement:withEvent:centerPoint:](self, "_performPressOnElement:withEvent:centerPoint:", v4, v76, v8, v10);
  if (![(VOTElement *)v4 doesHaveAllTraits:v22]
    || [(VOTElement *)v4 shouldIgnoreTextEditingTrait])
  {
    if ([(VOTElement *)v4 doesHaveTraits:kAXStartsMediaSessionTrait])
    {
      id v49 = +[VOTOutputManager outputManager];
      [v49 clearQueue];

      __int16 v50 = +[VOTOutputManager outputManager];
      [v50 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:&off_1001C5590];

      int v51 = VOTLogCommon();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v81 = v4;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "Media Session element : %@", buf, 0xCu);
      }

      self->_lastPressOnMediaSessionElement = CFAbsoluteTimeGetCurrent();
    }
    __int16 v52 = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent()];
    [(VOTElementManager *)self _pressActionResultDelay];
    id v79 = v52;
    id v53 = v52;
    AXPerformBlockOnMainThreadAfterDelay();

    goto LABEL_57;
  }
  uint64_t v64 = v23;
  id v65 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  uint64_t v66 = [(VOTElement *)v4 textInputElement];
  if (v66)
  {
    long long v67 = (VOTElement *)v66;
    id v68 = [(VOTElement *)v4 textInputElementRange];
    id v70 = v69;
  }
  else
  {
    long long v67 = v4;
    CGRect v71 = [(VOTElement *)v67 value];
    id v70 = [v71 length];

    id v68 = 0;
  }
  unsigned int v72 = -[VOTElementManager _updateCursorAfterPressForElement:currentElementRange:request:didHaveCursor:doesHaveCursor:](self, "_updateCursorAfterPressForElement:currentElementRange:request:didHaveCursor:doesHaveCursor:", v67, v68, v70, v65, v64, 1);
  [(VOTElementManager *)self sendRequest:v65];
  if (v72)
  {
    id v73 = [(VOTElement *)v4 selectedTextRange];
    -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", v73, v74, 0);
  }
  [(VOTElementManager *)self _updateLastFirstResponderChangedTime];

LABEL_59:
  if ([(VOTElement *)v4 doesHaveTraits:kAXLinkTrait])
  {
    uint64_t v54 = [(VOTElement *)v4 linkedElement];
    if (v54)
    {
      [(VOTElementManager *)self _setCurrentElement:v54];
      unsigned int v55 = v54;

      id v4 = v55;
    }
  }
  [(VOTElement *)v4 updateTraits];
  uint64_t v56 = kAXIsEditingTrait;
  if ([(VOTElement *)v4 doesHaveAllTraits:kAXTextEntryTrait | kAXIsEditingTrait]) {
    [(VOTElementManager *)self _disableQuickNavStateTemporarily];
  }
  if ([(VOTElement *)v4 doesHaveTraits:kAXTabButtonTrait])
  {
    int64_t v57 = [(VOTElement *)v4 application];
    unsigned __int8 v58 = [(VOTElement *)v4 isValidForApplication:v57];

    if ((v58 & 1) == 0)
    {
      id v59 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", v8, v10);
      uint64_t v60 = v59;
      if (v59 && ([v59 isEqual:v4] & 1) == 0)
      {
        [(VOTElementManager *)self _setCurrentElement:v60];
        uint64_t v61 = v60;

        id v4 = v61;
      }
    }
  }
  id v62 = [(VOTElement *)v4 copy];
  AXPerformBlockOnMainThreadAfterDelay();
  if ([(VOTElement *)v4 doesHaveTraits:kAXWebContentTrait])
  {
    id v77 = v12;
    id v78 = v13;
    AXPerformBlockOnMainThreadAfterDelay();
  }
  if ([(VOTElement *)v4 doesHaveTraits:v75]
    && ![(VOTElement *)v4 doesHaveTraits:v56])
  {
    [(VOTElementManager *)self _setCurrentElement:0];
    uint64_t v63 = +[VOTDisplayManager displayManager];
    objc_msgSend(v63, "setCursorFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  }
  self->_lastActivationTime = CFAbsoluteTimeGetCurrent();
}

- (void)_disableQuickNavStateTemporarily
{
  unsigned __int8 v3 = VOTLogCommon();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10011EA58();
  }

  if (GSEventIsHardwareKeyboardAttached())
  {
    id v4 = +[VOTKeyboardManager keyboardManager];
    unsigned int v5 = [v4 isQuickNavOn];

    if (v5)
    {
      [(id)VOTSharedWorkspace temporarilyChangeQuickNavState:0];
      [(VOTElementManager *)self _handleQuickNavFeedback:0];
      self->_lastTemporaryQuickNavDisableTime = CFAbsoluteTimeGetCurrent();
    }
  }
}

- (void)_handlePerformCustomAction:(id)a3
{
  id v4 = a3;
  if (self->_customActionIndex == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_19;
  }
  unsigned int v5 = [(VOTElementManager *)self _currentCachedCustomActionCategories];
  NSUInteger v6 = [(VOTElementManager *)self elementRotor];
  double v7 = objc_msgSend(v5, "objectAtIndexedSubscript:", objc_msgSend(v6, "customActionIndex"));
  double v8 = [v7 actions];

  customActionIndedouble x = self->_customActionIndex;
  if ((customActionIndex & 0x8000000000000000) != 0
    || customActionIndex >= (unint64_t)[v8 count])
  {

LABEL_19:
    double v24 = +[VOTOutputManager outputManager];
    double v25 = +[VOSOutputEvent BoundaryEncountered];
    [v24 sendEvent:v25];

    goto LABEL_20;
  }
  double v10 = [v8 objectAtIndexedSubscript:self->_customActionIndex];
  id v11 = [(VOTElement *)self->_currentElement indexPathAsRange];
  uint64_t v13 = v12;
  double v14 = [(VOTElement *)self->_currentElement uiElement];
  [v14 updateCache:2078];

  if (v11 != [(VOTElement *)self->_currentElement indexPathAsRange] || v13 != v15)
  {
    id v16 = VOTLogCommon();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(v30) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Custom action has gone to wrong cell!", (uint8_t *)&v30, 2u);
    }

    uint64_t v17 = [(VOTElement *)self->_currentElement parentTableOrCollectionView];
    float v18 = v17;
    if (v17)
    {
      double v19 = [v17 elementAtRow:v11 andColumn:v13];
      if (([v19 isEqual:self->_currentElement] & 1) == 0)
      {
        [(VOTElementManager *)self _setCurrentElement:v19];
        id v20 = VOTLogCommon();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          int v30 = 138412290;
          NSRange v31 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Resetting element to %@", (uint8_t *)&v30, 0xCu);
        }
      }
    }
  }
  [v10 activationPoint];
  if (CGPointZero.x == v22 && CGPointZero.y == v21)
  {
    unsigned __int8 v23 = [v10 performWithContext:self];
  }
  else
  {
    currentElement = self->_currentElement;
    [v10 activationPoint];
    unsigned __int8 v23 = -[VOTElement performTapAtPoint:withForce:playSound:](currentElement, "performTapAtPoint:withForce:playSound:", 0);
  }
  unsigned __int8 v27 = v23;
  double v28 = +[VOTOutputManager outputManager];
  double v29 = +[VOSOutputEvent DidActivateElement];
  [v28 sendEvent:v29];

  if ((v27 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_20:
}

- (void)_handlePerformAudiographAction:(id)a3
{
  if (!AXDeviceSupportsSonification()) {
    return;
  }
  id v21 = [(VOTElementManager *)self availableAudiographActionsForElement:self->_currentElement];
  if (![v21 containsObject:self->_audiographActionIdentifier]) {
    goto LABEL_16;
  }
  id v4 = +[VOTAudiographManager sharedManager];
  unsigned int v5 = +[VOTOutputManager outputManager];
  audiographActionIdentifier = self->_audiographActionIdentifier;
  double v7 = off_1001EA9E8;
  double v8 = [(VOTElement *)self->_currentElement language];
  double v9 = sub_100051804(v7, @"search.rotor.audiograph.describe.chart", v8);
  LODWORD(audiographActionIdentifier) = [(NSString *)audiographActionIdentifier isEqualToString:v9];

  if (!audiographActionIdentifier)
  {
    id v11 = self->_audiographActionIdentifier;
    uint64_t v12 = off_1001EA9E8;
    uint64_t v13 = [(VOTElement *)self->_currentElement language];
    double v14 = sub_100051804(v12, @"search.rotor.audiograph.chart.details", v13);
    LODWORD(v11) = [(NSString *)v11 isEqualToString:v14];

    if (v11)
    {
      double v10 = [(VOTElement *)self->_currentElement chartDescriptor];
      if (v10)
      {
        uint64_t v15 = +[AXSpringBoardServer server];
        id v16 = [v10 dictionaryRepresentation];
        [v15 showRemoteView:5 withData:v16];
      }
      goto LABEL_9;
    }
    uint64_t v17 = self->_audiographActionIdentifier;
    float v18 = off_1001EA9E8;
    double v19 = [(VOTElement *)self->_currentElement language];
    id v20 = sub_100051804(v18, @"search.rotor.audiograph.play.sonification", v19);
    LODWORD(v17) = [(NSString *)v17 isEqualToString:v20];

    if (v17)
    {
      if ([v4 isScrubbing]) {
        [v4 endScrubbingSession];
      }
      if (([v4 isPlaying] & 1) == 0) {
        [v4 play];
      }
      goto LABEL_17;
    }

LABEL_16:
    id v4 = +[VOTOutputManager outputManager];
    unsigned int v5 = +[VOSOutputEvent BoundaryEncountered];
    [v4 sendEvent:v5];
    goto LABEL_17;
  }
  double v10 = [(VOTElement *)self->_currentElement chartStructureDescription];
  [v5 speakSimpleString:v10];
LABEL_9:

LABEL_17:
}

- (BOOL)_shouldSendTapStraightToSystem
{
  return 0;
}

- (void)_handleSimpleTap:(id)a3
{
  id v4 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (AXDeviceIsTV())
  {
    if ([v4 origin] == (id)4
      || [v4 origin] == (id)5
      || [v4 origin] == (id)6)
    {
      if ([(VOTElementManager *)self isItemChooserVisible]) {
        [(VOTElementManager *)self _closeItemChooser];
      }
      else {
        [(VOTElementManager *)self __handleTVSelectButtonClicked];
      }
      goto LABEL_44;
    }
    uint64_t v13 = +[AXSubsystemVoiceOver sharedInstance];
    unsigned __int8 v14 = [v13 ignoreLogging];

    if (v14) {
      goto LABEL_44;
    }
    uint64_t v15 = +[AXSubsystemVoiceOver identifier];
    double v10 = AXLoggerForFacility();

    os_log_type_t v16 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v10, v16))
    {
      uint64_t v17 = AXColorizeFormatLog();
      float v18 = _AXStringForArgs();
      if (os_log_type_enabled(v10, v16))
      {
        *(_DWORD *)buf = 138543362;
        double v25 = v18;
        _os_log_impl((void *)&_mh_execute_header, v10, v16, "%{public}@", buf, 0xCu);
      }
    }
LABEL_12:

    goto LABEL_44;
  }
  if ([(VOTElementManager *)self _shouldSendTapStraightToSystem])
  {
    unsigned int v5 = [v4 objectForIndex:101];
    [v5 pointValue];
    double v7 = v6;
    double v9 = v8;

    double v10 = +[VOTElement systemWideElement];
    -[NSObject performSimpleTapAtPoint:forElement:](v10, "performSimpleTapAtPoint:forElement:", 0, v7, v9);
    goto LABEL_12;
  }
  id v11 = [v4 command];
  if ([v11 isEqualToString:kVOTEventCommandSplitTapTap])
  {
    unsigned __int8 v12 = [(VOTElementManager *)self currentElementAllowsDirectTouch];

    if (v12) {
      goto LABEL_44;
    }
  }
  else
  {
  }
  if (self->_flags.tapShouldHandleAutofill)
  {
    [(VOTElementManager *)self _handlePerformTapAutofill:v4];
  }
  else if (self->_flags.tapShouldHandleTextOperation)
  {
    [(VOTElementManager *)self _handlePerformTextOperation:v4];
  }
  else if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] != (id)55 {
         || (customActionIndedouble x = self->_customActionIndex, customActionIndex == 0x7FFFFFFFFFFFFFFFLL)
  }
         || ([(VOTElementManager *)self _currentCustomActions],
             id v20 = objc_claimAutoreleasedReturnValue(),
             id v21 = [v20 count],
             v20,
             customActionIndex >= (unint64_t)v21))
  {
    if (AXDeviceSupportsSonification()
      && (id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)66
      && self->_audiographActionIdentifier
      && [(VOTElement *)self->_currentElement supportsAudiographs])
    {
      [(VOTElementManager *)self _handlePerformAudiographAction:v4];
    }
    else if (self->_inTextProcessingRotorMode && self->_misspelledWordReplacementCycleIndex != 0x7FFFFFFFFFFFFFFFLL)
    {
      [(VOTElementManager *)self _processMisspelledWordTextReplacement];
    }
    else
    {
      if (self->_flags.wasSendingToNativeSlide) {
        [(VOTElementManager *)self _endNativeSliding:1];
      }
      [(VOTElementManager *)self _handlePerformPressAction:v4];
      double v22 = [(VOTElement *)self->_currentElement application];
      unsigned __int8 v23 = [v22 bundleIdentifier];

      if (([v23 hasPrefix:@"com.apple."] & 1) == 0) {
        AXPerformBlockOnMainThreadAfterDelay();
      }
    }
  }
  else
  {
    [(VOTElementManager *)self _handlePerformCustomAction:v4];
  }
LABEL_44:
}

- (void)_handleAutomationGeneratedTouchUpEvent:(id)a3
{
  id v4 = a3;
  id v13 = [v4 objectForIndex:114];
  unsigned int v5 = [(VOTElementManager *)self fingersFromTouchCommands];
  [v5 removeObjectForKey:v13];

  double v6 = [(VOTElementManager *)self fingersFromTouchCommands];
  double v7 = [v6 allKeys];
  id v8 = [v7 count];

  if (v8)
  {
    [(VOTElementManager *)self _handleAutomationGeneratedChordChangeEvent:v4];
  }
  else
  {
    [v4 touchPoint];
    double v10 = v9;
    double v12 = v11;

    -[VOTElementManager _sendAutomationTouchCommand:location:](self, "_sendAutomationTouchCommand:location:", 6, v10, v12);
  }
}

- (void)_handleAutomationGeneratedTouchDownEvent:(id)a3
{
  id v4 = a3;
  id v14 = [v4 objectForIndex:114];
  [v4 touchPoint];
  unsigned int v5 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:");
  double v6 = [(VOTElementManager *)self fingersFromTouchCommands];
  [v6 setObject:v5 forKey:v14];

  double v7 = [(VOTElementManager *)self fingersFromTouchCommands];
  id v8 = [v7 allKeys];
  id v9 = [v8 count];

  if ((unint64_t)v9 < 2)
  {
    [v4 touchPoint];
    double v11 = v10;
    double v13 = v12;

    -[VOTElementManager _sendAutomationTouchCommand:location:](self, "_sendAutomationTouchCommand:location:", 1, v11, v13);
  }
  else
  {
    [(VOTElementManager *)self _handleAutomationGeneratedChordChangeEvent:v4];
  }
}

- (void)_handleAutomationGeneratedTouchMoveEvent:(id)a3
{
  id v4 = a3;
  id v11 = [v4 objectForIndex:114];
  [v4 touchPoint];
  unsigned int v5 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:");
  double v6 = [(VOTElementManager *)self fingersFromTouchCommands];
  [v6 setObject:v5 forKey:v11];

  [v4 touchPoint];
  double v8 = v7;
  double v10 = v9;

  -[VOTElementManager _sendAutomationTouchCommand:location:](self, "_sendAutomationTouchCommand:location:", 2, v8, v10);
}

- (void)_handleAutomationGeneratedTouchCancelEvent:(id)a3
{
  id v4 = a3;
  unsigned int v5 = [(VOTElementManager *)self fingersFromTouchCommands];
  [v5 removeAllObjects];

  [v4 touchPoint];
  double v7 = v6;
  double v9 = v8;

  -[VOTElementManager _sendAutomationTouchCommand:location:](self, "_sendAutomationTouchCommand:location:", 8, v7, v9);
}

- (void)_handleAutomationGeneratedChordChangeEvent:(id)a3
{
  id v4 = a3;
  unsigned int v5 = +[AXEventTapManager sharedManager];
  [v4 touchPoint];
  double v6 = +[AXEventRepresentation touchRepresentationWithHandType:location:](AXEventRepresentation, "touchRepresentationWithHandType:location:", 5);
  [v6 setSenderID:0x8000000817319377];
  double v7 = [(VOTElementManager *)self fingersFromTouchCommands];
  double v8 = [v7 allKeys];

  uint64_t v12 = 0;
  double v13 = &v12;
  uint64_t v14 = 0x3032000000;
  uint64_t v15 = sub_100067578;
  os_log_type_t v16 = sub_100067588;
  id v17 = +[NSMutableArray array];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10007DB94;
  v11[3] = &unk_1001B5660;
  v11[4] = self;
  v11[5] = &v12;
  [v8 enumerateObjectsUsingBlock:v11];
  uint64_t v9 = v13[5];
  double v10 = [v6 handInfo];
  [v10 setPaths:v9];

  [v5 sendHIDSystemEvent:v6 senderID:0x8000000817319377];
  _Block_object_dispose(&v12, 8);
}

- (void)_sendAutomationTouchCommand:(unsigned int)a3 location:(CGPoint)a4
{
  double y = a4.y;
  double x = a4.x;
  uint64_t v6 = *(void *)&a3;
  id v8 = +[AXEventTapManager sharedManager];
  double v7 = +[AXEventRepresentation touchRepresentationWithHandType:location:](AXEventRepresentation, "touchRepresentationWithHandType:location:", v6, x, y);
  [v7 setSenderID:0x8000000817319377];
  [v8 sendHIDSystemEvent:v7 senderID:0x8000000817319377];
}

- (void)_handleSimulatedForceTouchEvent:(id)a3
{
  id v4 = [(VOTElementManager *)self lastEventCommand];
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandSimulatedForceTouch];

  if (v5 && self->_didPeekEvent)
  {
    AXForceTouchThresholdPeek();
    double v7 = v6;
    int v8 = 1;
    AXForceTouchThresholdPop();
    double v10 = v9;
  }
  else
  {
    double v7 = 20.0;
    AXForceTouchThresholdPeek();
    double v10 = v11;
    int v8 = 0;
  }
  id v19 = [(VOTElementManager *)self _currentElement];
  id v12 = [v19 windowContextId];
  [v19 centerPoint];
  if (v7 < v10)
  {
    double v15 = v13;
    double v16 = v14;
    do
    {
      id v17 = +[VOTElement systemWideElement];
      objc_msgSend(v17, "postFingerTouchAtPoint:withForce:withContextId:", v12, v15, v16, v7);

      usleep(0x1388u);
      double v7 = v7 + 20.0;
    }
    while (v7 < v10);
  }
  if (([(NSMutableArray *)self->_touchEventElements containsObject:v19] & 1) == 0) {
    [(NSMutableArray *)self->_touchEventElements addObject:v19];
  }
  double v18 = 3.0;
  if (v8) {
    double v18 = 0.5;
  }
  [(SCRCTargetSelectorTimer *)self->_simulatedForceLiftTimer dispatchAfterDelay:v18];
  self->_didPeekEvent = v8 ^ 1;
}

- (void)_handleWatchWakeTap:(id)a3
{
  id v4 = a3;
  unsigned int v5 = AXLogTapticTime();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    id v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_handleWatchWakeTap: %@", (uint8_t *)&v8, 0xCu);
  }

  double v6 = +[AXSettings sharedInstance];
  unsigned int v7 = [v6 voiceOverTapticTimeMode];

  if (v7)
  {
    [(VOTElementManager *)self _handleUnmuteEligibleEventOccured];
    [(VOTElementManager *)self _handleScreenOn];
  }
}

- (void)_handleToggleSettingsHUD:(id)a3
{
  id v4 = a3;
  unsigned int v5 = +[AXSettings sharedInstance];
  unsigned int v6 = [v5 securePayAssertionActive];

  if (v6)
  {
    unsigned int v7 = AXLogAssertions();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Not processing quick settings because secure pay mode active", (uint8_t *)&v15, 2u);
    }
  }
  else
  {
    unsigned int v7 = [objc_alloc((Class)AXQuickSettingsData) init];
    id v8 = [(VOTElementManager *)self _appInfoForCurrentElement];
    double v10 = v9;
    double v11 = [(VOTElement *)self->_currentElement webAreaURL];
    id v12 = [v11 host];
    [v7 setWebAreaURL:v12];

    [v7 setFrontmostAppIdentifier:v8];
    double v13 = VOTLogCommon();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      double v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Launching settings HUD with data %@", (uint8_t *)&v15, 0xCu);
    }

    double v14 = +[AXSpringBoardServer server];
    [v14 launchVoiceOverQuickSettingsViewService:v7];
  }
}

- (void)_handleWatchWakeDoubleTap:(id)a3
{
  id v4 = a3;
  unsigned int v5 = AXLogTapticTime();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412290;
    id v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_handleWatchWakeDoubleTap: %@", (uint8_t *)&v9, 0xCu);
  }

  if ([(VOTElementManager *)self _canActivateTapticTime])
  {
    unsigned int v6 = +[AXTapticTimeManager sharedInstance];
    unsigned int v7 = +[AXSettings sharedInstance];
    objc_msgSend(v6, "outputHoursAndMinutes:", objc_msgSend(v7, "voiceOverTapticTimeEncoding"));

    id v8 = dispatch_get_global_queue(-32768, 0);
    dispatch_async(v8, &stru_1001B5680);
  }
  else
  {
    [(VOTElementManager *)self _handleUnmuteEligibleEventOccured];
    id v8 = +[VOTEvent internalEventWithCommand:kVOTEventCommandSimpleTap info:0];
    [(VOTElementManager *)self _handleDoubleTap:v8];
  }
}

- (void)_handleWatchWakeTripleTap:(id)a3
{
  id v4 = a3;
  unsigned int v5 = AXLogTapticTime();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v8 = 138412290;
    id v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_handleWatchWakeTripleTap: %@", (uint8_t *)&v8, 0xCu);
  }

  if ([(VOTElementManager *)self _canActivateTapticTime])
  {
    unsigned int v6 = +[AXTapticTimeManager sharedInstance];
    unsigned int v7 = +[AXSettings sharedInstance];
    objc_msgSend(v6, "outputMinutes:", objc_msgSend(v7, "voiceOverTapticTimeEncoding"));
  }
  else
  {
    [(VOTElementManager *)self _handleUnmuteEligibleEventOccured];
    unsigned int v6 = +[VOTEvent internalEventWithCommand:kVOTEventCommandDoubleTap info:0];
    [(VOTElementManager *)self _handleDoubleTap:v6];
  }
}

- (void)_handleActivateHomeButton:(id)a3
{
  id v3 = +[AXPISystemActionHelper sharedInstance];
  [v3 activateHomeButton];
}

- (BOOL)_canActivateTapticTime
{
  int64_t v2 = +[AXSettings sharedInstance];
  unsigned __int8 v3 = [v2 voiceOverTapticTimeMode];

  if ((v3 & 1) == 0)
  {
    unsigned int v5 = AXLogTapticTime();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      __int16 v13 = 0;
      int v8 = "Taptic time not enabled";
      id v9 = (uint8_t *)&v13;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v8, v9, 2u);
    }
LABEL_10:
    BOOL v7 = 0;
    goto LABEL_11;
  }
  char v4 = AXIsBuddyCompleted();
  unsigned int v5 = AXLogTapticTime();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if ((v4 & 1) == 0)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      int v8 = "Buddy not completed!";
      id v9 = buf;
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  if (v6)
  {
    *(_WORD *)double v11 = 0;
    BOOL v7 = 1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Can activate taptic time", v11, 2u);
  }
  else
  {
    BOOL v7 = 1;
  }
LABEL_11:

  return v7;
}

- (void)_simulatedForceTouchLift
{
  if (!self->_isInPreview)
  {
    if ([(NSMutableArray *)self->_touchEventElements count])
    {
      unint64_t v3 = 0;
      do
      {
        char v4 = [(NSMutableArray *)self->_touchEventElements objectAtIndex:v3];
        id v5 = [v4 windowContextId];
        BOOL v6 = +[AXBackBoardServer server];
        id v7 = [v6 contextIdHostingContextId:v5];

        [v4 centerPoint];
        double v9 = v8;
        double v11 = v10;
        id v12 = +[VOTElement systemWideElement];
        objc_msgSend(v12, "postFingerLiftAtPoint:withContextId:", v5, v9, v11);

        __int16 v13 = +[VOTElement systemWideElement];
        objc_msgSend(v13, "postFingerLiftAtPoint:withContextId:", v7, v9, v11);

        ++v3;
      }
      while ((unint64_t)[(NSMutableArray *)self->_touchEventElements count] > v3);
    }
    self->_didPeekEvent = 0;
    [(NSMutableArray *)self->_touchEventElements removeAllObjects];
  }
  simulatedForceLiftTimer = self->_simulatedForceLiftTimer;

  [(SCRCTargetSelectorTimer *)simulatedForceLiftTimer cancel];
}

- (void)_handleToggleMute:(id)a3
{
  unint64_t v3 = (void *)VOTSharedWorkspace;
  uint64_t v4 = objc_msgSend((id)VOTSharedWorkspace, "voiceOverMuted", a3) ^ 1;

  [v3 setVoiceOverMuted:v4];
}

- (void)_handleToggleRotationCapability:(id)a3
{
  unint64_t v3 = +[VOTConfiguration rootConfiguration];
  id v12 = [v3 preferenceForKey:@"DeviceRotation"];

  if (v12) {
    uint64_t v4 = [v12 BOOLValue] ^ 1;
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = +[VOTElement systemWideElement];
  [v5 setRotationCapabilityEnabled:v4];

  BOOL v6 = [(id)VOTSharedWorkspace selectedLanguage];
  if (v4) {
    id v7 = @"rotation.capability.on";
  }
  else {
    id v7 = @"rotation.capability.off";
  }
  double v8 = sub_100051D04(off_1001EA9E8, v7, 0, v6);
  id v9 = sub_10000ABF8(v8, 0, v6);

  double v10 = +[VOTConfiguration rootConfiguration];
  double v11 = +[NSNumber numberWithBool:v4];
  [v10 setPreference:v11 forKey:@"DeviceRotation"];
}

- (void)_handleToggleScreenCurtain:(id)a3
{
  unint64_t v3 = (void *)VOTSharedWorkspace;
  uint64_t v4 = objc_msgSend((id)VOTSharedWorkspace, "screenCurtainEnabled", a3) ^ 1;

  [v3 setScreenCurtainEnabled:v4];
}

- (void)_handleToggleSoundCurtain:(id)a3
{
  unint64_t v3 = +[AXSettings sharedInstance];
  unsigned int v4 = [v3 voiceOverSoundCurtain];

  id v5 = +[AXSettings sharedInstance];
  [v5 setVoiceOverSoundCurtain:v4 ^ 1];

  BOOL v6 = [(id)VOTSharedWorkspace selectedLanguage];
  id v10 = v6;
  if (v4) {
    id v7 = @"soundcurtain.off";
  }
  else {
    id v7 = @"soundcurtain.on";
  }
  double v8 = sub_100051D04(off_1001EA9E8, v7, 0, v6);
  id v9 = sub_10000ABF8(v8, 0, v10);
}

- (void)_handleToggleCaptionPanel:(id)a3
{
  unint64_t v3 = +[AXSettings sharedInstance];
  unsigned int v4 = [v3 enableVoiceOverCaptions];

  id v5 = +[AXSettings sharedInstance];
  [v5 setEnableVoiceOverCaptions:v4 ^ 1];

  BOOL v6 = [(id)VOTSharedWorkspace selectedLanguage];
  id v10 = v6;
  if (v4) {
    id v7 = @"vocaptions.off";
  }
  else {
    id v7 = @"vocaptions.on";
  }
  double v8 = sub_100051D04(off_1001EA9E8, v7, 0, v6);
  id v9 = sub_10000ABF8(v8, 0, v10);
}

- (void)_handleStartSiri:(id)a3
{
  id v3 = +[AXPISystemActionHelper sharedInstance];
  [v3 activateSiri];
}

- (void)_handleToggleTypeToSiri:(id)a3
{
  id v3 = +[AXSpringBoardServer server];
  unsigned int v4 = [v3 isTypeToSiriVisible];

  if (v4)
  {
    if ([(id)VOTSharedWorkspace supportsHomeGestures])
    {
      id v5 = +[AXSpringBoardServer server];
      unsigned __int8 v6 = [v5 dismissBuddyIfNecessary];

      if ((v6 & 1) == 0)
      {
        id v7 = (void *)VOTSharedWorkspace;
        _[v7 performHomeButtonPress];
      }
    }
  }
  else
  {
    id v8 = +[AXPISystemActionHelper sharedInstance];
    [v8 activateTypeToSiri];
  }
}

- (void)_handlePerformHomeButtonPress:(id)a3
{
}

- (void)_postBrailleHomeButtonPress
{
}

- (void)_reallySimulateLongPressForElement:(id)a3
{
  id v3 = a3;
  id v4 = [v3 windowContextId];
  [v3 visiblePoint];
  if (v6 == -1.0 && v5 == -1.0)
  {
    [v3 centerPoint];
    if (v8 == -1.0 && v9 == -1.0)
    {
      [v3 frame];
      AX_CGRectGetCenter();
      double v15 = v14;
      double v17 = v16;
      __int16 v13 = VOTLogElement();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_10011EB10(v13, v15, v17);
      }
    }
    else
    {
      double v11 = v8;
      double v12 = v9;
      __int16 v13 = VOTLogElement();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_10011EB9C(v13, v11, v12);
      }
    }
  }
  [v3 displayId];
  AXConvertPointFromHostedCoordinates();
  double v19 = v18;
  double v21 = v20;
  if ([v3 longPressHostContextId]) {
    id v4 = [v3 windowContextIdImmediateRemoteParent:v4];
  }
  double v22 = +[VOTElement systemWideElement];
  objc_msgSend(v22, "postFingerTouchAtPoint:withForce:withContextId:", v4, v19, v21, 0.0);

  AXPerformBlockOnMainThreadAfterDelay();
}

- (BOOL)_handleSimulatedLongPress:(id)a3
{
  id v4 = +[VOTOutputManager outputManager];
  double v5 = +[VOSOutputEvent DidBeginPassthrough];
  [v4 sendEvent:v5];

  double v6 = [(VOTElementManager *)self _currentElement];
  if ([v6 doesHaveTraits:kAXWebContentTrait])
  {
    [v6 centerPoint];
    id v7 = +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:");
  }
  else
  {
    id v7 = 0;
  }
  if ([v6 attemptToShowContextMenuWithTargetPointValue:v7])
  {
    [(VOTElementManager *)self setLastAttemptToShowContextMenuTime:CFAbsoluteTimeGetCurrent()];
    [(VOTElementManager *)self setLastElementForAttemptToShowContextMenu:v6];
  }
  else
  {
    [(VOTElementManager *)self _reallySimulateLongPressForElement:v6];
  }

  return 1;
}

- (void)_handleDuckingDisabling:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    double v8 = VOTLogCommon();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10011EC28();
    }
    goto LABEL_8;
  }
  unsigned int v5 = [(id)VOTSharedWorkspace duckingTemporarilyDisabled];
  if (v5 != [v4 BOOLValue])
  {
    [(VOTElementManager *)self setLastDuckingDisablementSessionStart:CFAbsoluteTimeGetCurrent()];
    double v6 = VOTLogCommon();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v9 = 138412290;
      id v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Temporarily disabling ducking: %@", (uint8_t *)&v9, 0xCu);
    }

    id v7 = [v4 BOOLValue];
    [(id)VOTSharedWorkspace setDuckingTemporarilyDisabled:v7];
    double v8 = +[VOTOutputManager outputManager];
    [v8 updateAudioSessionProperties];
LABEL_8:
  }
}

- (void)_handlePauseSpeechAndHapticsNotification:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    double v8 = VOTLogCommon();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10011EC90();
    }
    goto LABEL_9;
  }
  unsigned int v5 = [(id)VOTSharedWorkspace pauseSpeechAndHaptics];
  if (v5 != [v4 BOOLValue])
  {
    [(VOTElementManager *)self setLastPauseSpeechAndHapticsStart:CFAbsoluteTimeGetCurrent()];
    double v6 = VOTLogCommon();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v9 = 138412290;
      id v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Temporarily pausing speech and haptics: %@", (uint8_t *)&v9, 0xCu);
    }

    id v7 = [v4 BOOLValue];
    [(id)VOTSharedWorkspace setPauseSpeechAndHaptics:v7];
    if ([(id)VOTSharedWorkspace pauseSpeechAndHaptics])
    {
      double v8 = +[VOTOutputManager outputManager];
      [v8 stopSpeakingAtBoundary:0];
LABEL_9:
    }
  }
}

- (void)_handleAudiographSelectedSeriesChangedNotification:(id)a3
{
  id v3 = a3;
  if (AXDeviceSupportsSonification())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v4 = [v3 integerValue];
      unsigned int v5 = +[AXMDataSonifier sharedInstance];
      [v5 setCurrentSeriesIndex:v4];
    }
    else
    {
      double v6 = VOTLogCommon();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10011ECF8();
      }
    }
  }
}

- (void)_handleAudiographPlaybackStateNotification:(id)a3
{
  unsigned int v3 = [a3 BOOLValue];
  id v4 = +[VOTAudiographManager sharedManager];
  id v5 = v4;
  if (v3) {
    [v4 play];
  }
  else {
    [v4 pause];
  }
}

- (void)_handleContextMenuStatusNotification:(id)a3
{
  id v4 = a3;
  double Current = CFAbsoluteTimeGetCurrent();
  [(VOTElementManager *)self lastAttemptToShowContextMenuTime];
  if (Current - v6 < 1.0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (![v4 intValue])
      {
        id v7 = [(VOTElementManager *)self lastElementForAttemptToShowContextMenu];
        [(VOTElementManager *)self _reallySimulateLongPressForElement:v7];
      }
    }
    else
    {
      double v8 = VOTLogCommon();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_10011ED60();
      }
    }
  }
}

- (id)_currentElementAtCenterPointOfElement:(id)a3
{
  id v3 = a3;
  id v4 = +[VOTElement systemWideElement];
  [v3 centerPoint];
  double v6 = v5;
  double v8 = v7;
  id v9 = [v3 windowContextId];

  objc_msgSend(v4, "convertPoint:fromContextId:", v9, v6, v8);
  double v11 = v10;
  double v13 = v12;

  double v14 = -[VOTElement initWithPosition:]([VOTElement alloc], "initWithPosition:", v11, v13);

  return v14;
}

- (void)_simulatedPressOutputTimer:(id)a3
{
  id v25 = a3;
  id v4 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  unsigned int v5 = [v25 doesHaveTraits:kAXKeyboardKeyTrait];
  unsigned int v6 = [v25 doesHaveTraits:kAXStartsMediaSessionTrait];
  unsigned int v7 = [v25 useElementAtPositionAfterActivation];
  int v8 = v5 | v6;
  if (((v5 | v6) & 1) == 0)
  {
    [v25 updateLabel];
    [v25 updateHint];
    [v25 updateRoleDescription];
  }
  [v25 updateTraits];
  [v25 updateValue];
  [v25 updateEquivalenceTag];
  [v25 updateExpandedStatus];
  if ([v25 doesHaveTraits:kAXWebContentTrait])
  {
    [v25 updateRoleDescription];
    unsigned int v9 = [v25 isValid];
  }
  else
  {
    double v10 = [v25 application];
    unsigned int v9 = [v25 isValidForApplication:v10];
  }
  if ((v9 ^ 1 | v7) != 1)
  {
    uint64_t v14 = 4;
    goto LABEL_16;
  }
  double v11 = [(VOTElementManager *)self _currentElementAtCenterPointOfElement:v25];
  double v12 = [v25 equivalenceTag];
  double v13 = [v11 equivalenceTag];
  if (v7)
  {
    if (([v11 isValid] & 1) == 0)
    {
LABEL_14:
      unsigned int v9 = [v25 isAlive] & (v7 ^ 1);
      uint64_t v14 = 4;
      goto LABEL_15;
    }
  }
  else if (v12 && ![v12 isEqualToString:v13])
  {
    goto LABEL_14;
  }
  id v15 = v11;

  [(VOTElementManager *)self _setCurrentElement:v15];
  uint64_t v14 = 0;
  unsigned int v9 = 1;
  id v25 = v15;
LABEL_15:

LABEL_16:
  if ([v25 doesHaveTraits:kAXToggleTrait])
  {
    double v16 = [v25 roleDescription];
    BOOL v17 = [v16 length] == 0;
  }
  else
  {
    BOOL v17 = 0;
  }
  if (([v25 doesHaveTraits:kAXIsEditingTrait] & 1) == 0
    && ([v25 doesHaveTraits:kAXWebInteractiveVideoTrait] & 1) == 0
    && ((v9 ^ 1) & 1) == 0)
  {
    if (v17)
    {
      double v18 = [v25 toggleStatusLabel];
      id v19 = [v4 addString:v18];
    }
    else
    {
      double v20 = [v25 value];
      id v21 = [v20 length];

      if ((unint64_t)v21 <= 0x64) {
        uint64_t v22 = v14;
      }
      else {
        uint64_t v22 = v14 | 0x1000;
      }
      [(VOTElementManager *)self _addDescription:v25 toRequest:v4 withOptions:v22];
    }
  }
  if (((v6 | [v25 doesHaveTraits:kAXDeleteKeyTrait]) & 1) == 0
    && [v4 containsActions]
    && [v25 isEqual:self->_currentElement])
  {
    [v4 setRequestQueueMixinBehavior:&stru_1001B56E0];
    [(VOTElementManager *)self sendRequest:v4];
  }
  if (((v8 ^ 1 | v6) & 1) == 0)
  {
    [v25 updateLabel];
    [v25 updateHint];
    [v25 updateRoleDescription];
  }
  unsigned __int8 v23 = (void *)VOTSharedWorkspace;
  double v24 = [(VOTElementManager *)self _currentRotorSelection];
  [v23 refreshBraille:0 rotorSelection:v24];
}

- (void)_handlePressActionResultAtTime:(id)a3
{
  double lastScreenChangeNotificationTime = self->_lastScreenChangeNotificationTime;
  [a3 doubleValue];
  if (lastScreenChangeNotificationTime <= v5)
  {
    self->_double lastScreenChangeNotificationTime = -3061152000.0;
    id v14 = +[VOTOutputManager outputManager];
    unsigned int v6 = [(VOTElementManager *)self _currentElement];
    unsigned int v7 = v6;
    if (v6)
    {
      if ([v6 doesHaveTraits:kAXLaunchIconTrait])
      {
        int v8 = +[VOTDisplayManager displayManager];
        [v8 setCursorFrameForElement:0];
      }
      else
      {
        [(VOTElementManager *)self _resetDirectInteractionCache];
        double Current = CFAbsoluteTimeGetCurrent();
        if (Current - self->_lastFirstResponderChangeTime >= 0.25
          || (+[VOTOutputManager outputManager],
              double v10 = objc_claimAutoreleasedReturnValue(),
              unsigned __int8 v11 = [v10 isSpeaking],
              v10,
              (v11 & 1) == 0))
        {
          if (![v7 doesHaveTraits:kAXKeyboardKeyTrait]
            || Current - self->_lastAnnouncementNotificationTime >= 0.25
            && [v7 doesHaveTraits:kAXButtonTrait]
            && Current - self->_lastValueChangeTime >= 0.25)
          {
            [v14 stopSpeakingAtBoundary:0];
            [v7 delayBeforeUpdatingOnActivation];
            if (v12 <= 0.0)
            {
              [(VOTElementManager *)self _simulatedPressOutputTimer:v7];
            }
            else
            {
              double v13 = v12;
              [(SCRCTargetSelectorTimer *)self->_simulatedPressOutputTimer cancel];
              [(SCRCTargetSelectorTimer *)self->_simulatedPressOutputTimer dispatchAfterDelay:v7 withObject:v13];
            }
          }
        }
      }
    }
  }
}

- (void)_handleScreenLock:(id)a3
{
  id v4 = a3;
  [(id)VOTSharedWorkspace screenLockOccurred];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v5 = [v4 objectForKey:@"isUserLocked"];
    unsigned int v6 = [v5 BOOLValue];

    unsigned int v7 = [v4 objectForKey:@"playLockSound"];
    unsigned int v8 = [v7 BOOLValue];

    int v9 = v8 ^ 1;
  }
  else
  {
    unsigned int v6 = 0;
    int v9 = 0;
  }
  double v10 = +[VOTOutputManager outputManager];
  [v10 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:&off_1001C5590];

  unsigned __int8 v11 = +[AXSettings sharedInstance];
  unsigned int v12 = [v11 liveRecognitionActive];

  if (v12)
  {
    double v13 = +[VOTMagnifierService shared];
    [v13 dismissDetectionUI];
  }
  id v14 = +[VOTElement iosSystemAppApplication];
  unsigned int v15 = [v14 isSystemSleeping];

  if (v15)
  {
    if (![(id)VOTSharedWorkspace isRingerSwitchSilent]
      || self->_lastEventOccurredTime > self->_lastSilencedAlertTime
      || ([(id)VOTSharedWorkspace lastLockButtonPressTime], v16 > self->_lastSilencedAlertTime))
    {
      if ([(id)VOTSharedWorkspace soundEffectsEnabled])
      {
        if (([(id)VOTSharedWorkspace isRingerSwitchSilent] | v9 | v6) != 1) {
          goto LABEL_15;
        }
        BOOL v17 = +[VOTOutputManager outputManager];
        double v18 = +[VOSOutputEvent ScreenDidTurnOff];
        [v17 sendEvent:v18];
      }
      else
      {
        BOOL v17 = sub_100051804(off_1001EA9E8, @"screen.locked.message", 0);
        double v18 = [(id)VOTSharedWorkspace selectedLanguage];
        id v19 = sub_10000ABF8(v17, 0, v18);
      }
    }
LABEL_15:
    if ([(VOTElementManager *)self _flashlightNotificationsEnabled]) {
      AXPerformBlockOnMainThreadAfterDelay();
    }
  }
  double v20 = +[VOTDisplayManager displayManager];
  [v20 setCursorFrameForElement:0];

  [(VOTElementManager *)self _setCurrentElement:0];
  [(VOTElementManager *)self hideVisualRotor];
  [(VOTElementManager *)self _resetElementLabel];
  id v21 = [(VOTElementManager *)self previousTableOrCollectionViewList];
  [v21 removeAllObjects];

  uint64_t v22 = [(VOTElementManager *)self previousTableOrCollectionViewToMetadata];
  [v22 removeAllObjects];

  [(VOTElementManager *)self setPreviousTableOrCollectionViewApplication:0];
  self->_systemIsSleeping = 1;
  [(VOTElementManager *)self _closeItemChooser];
  [(id)VOTSharedWorkspace setScreenOn:0 silently:1];
}

- (BOOL)_flashlightNotificationsEnabled
{
  return _os_feature_enabled_impl() && self->_flashlightNotificationsEnabled;
}

- (void)observeValueForKeyPath:(id)a3 ofObject:(id)a4 change:(id)a5 context:(void *)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (([v10 isEqualToString:@"available"] & 1) != 0
    || ([v10 isEqualToString:@"overheated"] & 1) != 0
    || [v10 isEqualToString:@"flashlightLevel"])
  {
    [(AVFlashlight *)self->_flashlightDevice flashlightLevel];
    BOOL v14 = v13 > 0.0;
    if (self->_flashlightOnStatus != v14)
    {
      float v15 = v13;
      ++self->_flashlightStatusGeneration;
      double v16 = VOTLogCommon();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        BOOL v19 = v14;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Flashlight status change: %d", buf, 8u);
      }

      if (v15 <= 0.0)
      {
        [(SCRCTargetSelectorTimer *)self->_flashlightSystemTimer cancel];
        sub_10007FF28(@"VoiceOverFlashlightID");
      }
    }
    self->_flashlightOnStatus = v14;
  }
  else
  {
    v17.receiver = self;
    v17.super_class = (Class)VOTElementManager;
    [(VOTElementManager *)&v17 observeValueForKeyPath:v10 ofObject:v11 change:v12 context:a6];
  }
}

- (void)_updateFlashlightEnabledStatus
{
  id v3 = +[AXSettings sharedInstance];
  self->_flashlightNotificationsEnabled = [v3 voiceOverFlashlightNotificationsEnabled];

  if (self->_flashlightNotificationsEnabled)
  {
    if (!self->_flashlightDevice)
    {
      id v4 = (AVFlashlight *)[objc_alloc((Class)AVFlashlight) init];
      flashlightDevice = self->_flashlightDevice;
      self->_flashlightDevice = v4;

      [(AVFlashlight *)self->_flashlightDevice addObserver:self forKeyPath:@"available" options:0 context:0];
      [(AVFlashlight *)self->_flashlightDevice addObserver:self forKeyPath:@"overheated" options:0 context:0];
      [(AVFlashlight *)self->_flashlightDevice addObserver:self forKeyPath:@"flashlightLevel" options:0 context:0];
      unsigned int v6 = (SCRCTargetSelectorTimer *)[objc_alloc((Class)SCRCTargetSelectorTimer) initWithTarget:self selector:"_sendSystemNotificationForFlashlight" thread:self->_elementManagerThread];
      flashlightSystemTimer = self->_flashlightSystemTimer;
      self->_flashlightSystemTimer = v6;

      sub_1000802C0();
      self->_flashlightNotificationGeneration = -1;
      unsigned int v8 = VOTLogCommon();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = self->_flashlightDevice;
        int v10 = 138412290;
        id v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Initialization flashlight observer: %@", (uint8_t *)&v10, 0xCu);
      }
    }
  }
  else
  {
    self->_flashlightNotificationGeneration = -1;
  }
}

- (void)_handleFlashlightNotification
{
  if ([(VOTElementManager *)self _flashlightNotificationsEnabled])
  {
    [(AVFlashlight *)self->_flashlightDevice flashlightLevel];
    if (v3 > 0.0 && self->_flashlightStatusGeneration != self->_flashlightNotificationGeneration)
    {
      id v4 = sub_100051804(off_1001EA9E8, @"flashlight.enabled", 0);
      double v5 = [(id)VOTSharedWorkspace selectedLanguage];
      id v6 = sub_10000ABF8(v4, 0, v5);

      unsigned int v7 = VOTLogCommon();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)unsigned int v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Flashlight not available, speaking message", v8, 2u);
      }

      [(SCRCTargetSelectorTimer *)self->_flashlightSystemTimer dispatchAfterDelay:60.0];
      self->_flashlightNotificationGeneration = self->_flashlightStatusGeneration;
    }
  }
}

- (void)_sendSystemNotificationForFlashlight
{
  sub_100051D04(off_1001EA9E8, @"flashlight.notification.title", 0, 0);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = 0;
  double v16 = &v15;
  uint64_t v17 = 0x2050000000;
  float v3 = (void *)qword_1001EBA10;
  uint64_t v18 = qword_1001EBA10;
  if (!qword_1001EBA10)
  {
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    double v20 = sub_1000AE93C;
    id v21 = &unk_1001B3FE0;
    uint64_t v22 = &v15;
    sub_1000AE93C((uint64_t)&buf);
    float v3 = (void *)v16[3];
  }
  id v4 = v3;
  _Block_object_dispose(&v15, 8);
  double v5 = objc_opt_new();
  objc_msgSend(v5, "setBody:", 0, v15);
  [v5 setCategoryIdentifier:@"com.apple.VoiceOver.message"];
  [v5 setTitle:v2];
  [v5 setThreadIdentifier:@"VoiceOverFlashlightID"];
  [v5 setShouldSuppressDefaultAction:0];
  [v5 setShouldAuthenticateDefaultAction:0];
  id v6 = +[NSDate date];
  unsigned int v7 = [v6 dateByAddingTimeInterval:21600.0];
  [v5 setExpirationDate:v7];

  uint64_t v15 = 0;
  double v16 = &v15;
  uint64_t v17 = 0x2050000000;
  unsigned int v8 = (void *)qword_1001EBA18;
  uint64_t v18 = qword_1001EBA18;
  if (!qword_1001EBA18)
  {
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    double v20 = sub_1000AE994;
    id v21 = &unk_1001B3FE0;
    uint64_t v22 = &v15;
    sub_1000AE994((uint64_t)&buf);
    unsigned int v8 = (void *)v16[3];
  }
  id v9 = v8;
  _Block_object_dispose(&v15, 8);
  int v10 = +[NSUUID UUID];
  id v11 = [v10 UUIDString];
  id v12 = [v9 requestWithIdentifier:v11 content:v5 trigger:0];

  float v13 = VOTLogCommon();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Posting local notification: %@", (uint8_t *)&buf, 0xCu);
  }

  BOOL v14 = sub_1000AE48C();
  [v14 addNotificationRequest:v12 withCompletionHandler:&stru_1001B5DC0];
}

- (void)_handleScreenUnlock
{
  self->_lastExternalUnlockTime = CFAbsoluteTimeGetCurrent();
}

- (void)refreshBraille
{
  id v2 = (void *)VOTSharedWorkspace;
  id v3 = [(VOTElementManager *)self _currentRotorSelection];
  [v2 refreshBraille:0 rotorSelection:v3];
}

- (id)_currentResponder
{
  id v3 = [(VOTElementManager *)self _currentElement];
  if ([v3 doesHaveTraits:kAXKeyboardKeyTrait])
  {
    [(VOTElement *)self->_lastApplication firstResponderElement];
    v3 = id v4 = v3;
  }
  else
  {
    double v5 = [v3 textInputElement];
    id v4 = v5;
    if (v5)
    {
      id v4 = v5;

      id v3 = v4;
    }
  }

  return v3;
}

- (void)_handleNextTextOperationInDirection:(int64_t)a3 withEvent:(id)a4
{
  id v26 = [(VOTElementManager *)self _currentResponder];
  id v6 = v26;
  if ([v26 doesHaveTraits:kAXWebContentTrait])
  {
    id v6 = [v26 textOperationsOperator];
  }
  unsigned int v7 = [v6 textOperations];
  int64_t selectedTextOperation = self->_selectedTextOperation;
  if (a3 == 2) {
    int64_t v9 = selectedTextOperation - 1;
  }
  else {
    int64_t v9 = selectedTextOperation + 1;
  }
  self->_int64_t selectedTextOperation = v9;
  int v10 = [(VOTElementManager *)self _currentCachedCustomActionCategories];
  id v11 = objc_msgSend(v10, "ax_firstObjectUsingBlock:", &stru_1001B5760);

  id v12 = [v7 count];
  float v13 = [v11 actions];
  uint64_t v14 = (uint64_t)v12 + (void)[v13 count];

  int64_t v15 = self->_selectedTextOperation;
  if (v15 < 0)
  {
    int64_t v15 = v14 - 1;
    goto LABEL_10;
  }
  if (v15 >= v14)
  {
    int64_t v15 = 0;
LABEL_10:
    self->_int64_t selectedTextOperation = v15;
  }
  if (v14 >= 1 && v15 < v14)
  {
    double v16 = [(id)VOTSharedWorkspace selectedLanguage];
    unint64_t v17 = self->_selectedTextOperation;
    if (v17 >= (unint64_t)[v7 count])
    {
      id v21 = [v11 actions];
      uint64_t v18 = objc_msgSend(v21, "objectAtIndex:", self->_selectedTextOperation - (void)objc_msgSend(v7, "count"));

      [v18 prepareWithContext:self];
      uint64_t v22 = [v18 language];

      unsigned __int8 v23 = [v18 name];
      double v16 = (void *)v22;
LABEL_55:

      id v25 = sub_10000ABF8(v23, 0, v16);
      self->_flags.tapShouldHandleTextOperation = 1;

      goto LABEL_56;
    }
    uint64_t v18 = [v7 objectAtIndex:self->_selectedTextOperation];
    if ([v18 isEqualToString:kAXTextOperationActionCopy])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.copy";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionScanText])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.scan.text";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionCut])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.cut";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionPaste])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.paste";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionSelect])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.select";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionSelectAll])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.selectAll";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionDelete])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.delete";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionReplace])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.replace";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionDefine])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.define";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionShare])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.share";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionBold])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.bold";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionItalics])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.italic";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionUnderline])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.underline";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionUndo])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.undo";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionRedo])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.redo";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionSpeak])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.speak";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionSpeakSentence])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.speak.sentence";
    }
    else if ([v18 isEqualToString:kAXTextOperationActionSpeakSpellOut])
    {
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.speak.spell.out";
    }
    else
    {
      if (![v18 isEqualToString:kAXTextOperationActionWritingTools])
      {
        if ([v18 rangeOfString:@"AXTextOperationAction"] != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          unsigned __int8 v23 = 0;
          goto LABEL_55;
        }
        id v24 = v18;
        uint64_t v18 = v24;
        goto LABEL_54;
      }
      BOOL v19 = off_1001EA9E8;
      double v20 = @"text.operation.writing.tools";
    }
    sub_100051D04(v19, v20, 0, v16);
    id v24 = (id)objc_claimAutoreleasedReturnValue();
LABEL_54:
    unsigned __int8 v23 = v24;
    goto LABEL_55;
  }
LABEL_56:
}

- (void)_handlePerformTextOperation:(id)a3
{
  id v20 = [(VOTElementManager *)self _currentResponder];
  id v4 = v20;
  if ([v20 doesHaveTraits:kAXWebContentTrait])
  {
    id v4 = [v20 textOperationsOperator];
  }
  double v5 = [(VOTElementManager *)self _currentCachedCustomActionCategories];
  id v6 = objc_msgSend(v5, "ax_firstObjectUsingBlock:", &stru_1001B5780);

  unsigned int v7 = [v4 textOperations];
  unint64_t selectedTextOperation = self->_selectedTextOperation;
  if (selectedTextOperation < (unint64_t)[v7 count])
  {
    uint64_t v9 = [v7 objectAtIndex:self->_selectedTextOperation];
    if (v9)
    {
      int v10 = (void *)v9;
      [v4 performTextOperation:v9];
      id v11 = +[VOTOutputManager outputManager];
      id v12 = +[VOSOutputEvent DidSelectAutofill];
      [v11 sendEvent:v12];

LABEL_9:
      goto LABEL_10;
    }
  }
  int64_t v13 = self->_selectedTextOperation;
  unint64_t v14 = v13 - (void)[v7 count];
  int64_t v15 = [v6 actions];
  id v16 = [v15 count];

  if (v14 >= (unint64_t)v16
    || ([v6 actions],
        unint64_t v17 = objc_claimAutoreleasedReturnValue(),
        [v17 objectAtIndex:v14],
        uint64_t v18 = objc_claimAutoreleasedReturnValue(),
        v17,
        unsigned __int8 v19 = [v18 performWithContext:self],
        v18,
        (v19 & 1) == 0))
  {
    int v10 = +[VOTOutputManager outputManager];
    id v11 = +[VOSOutputEvent BoundaryEncountered];
    [v10 sendEvent:v11];
    goto LABEL_9;
  }
LABEL_10:
}

- (void)_outputSelectionDifference:(_NSRange)a3 oldRange:(_NSRange)a4 string:(id)a5
{
}

- (void)_outputSelectionDifference:(_NSRange)a3 oldRange:(_NSRange)a4 string:(id)a5 language:(id)a6
{
  NSUInteger length = a4.length;
  NSUInteger location = a4.location;
  NSUInteger v9 = a3.length;
  int v10 = (char *)a3.location;
  id v12 = a5;
  id v13 = a6;
  unint64_t v14 = [(id)VOTSharedWorkspace selectedLanguage];
  if (!(v9 | length)) {
    goto LABEL_48;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v44 = self;
  if (v9 && Current - self->_performedTextSelectionOperation < 0.25) {
    goto LABEL_4;
  }
  id v16 = &v10[-location];
  if ((unint64_t)v10 < location)
  {
    if ((unint64_t)&v10[v9] <= location + length) {
      id v16 = (char *)(location - (void)v10);
    }
    else {
      id v16 = (char *)v9;
    }
    int v43 = @"element.selected.text";
    goto LABEL_10;
  }
  if ((unint64_t)v10 <= location)
  {
    unint64_t v17 = (char *)(location + length);
    if ((unint64_t)&v10[v9] <= location + length)
    {
      if (&v10[v9] < v17)
      {
        id v16 = (char *)(length - v9);
        int v43 = @"element.unselected.text";
        unint64_t v17 = &v10[v9];
        goto LABEL_11;
      }
      id v16 = 0;
      unint64_t v17 = 0;
    }
    else
    {
      id v16 = (char *)(v9 - length);
    }
    int v43 = @"element.selected.text";
  }
  else
  {
    if (!length && v9)
    {
LABEL_4:
      int v43 = @"element.selected.text";
      id v16 = (char *)v9;
LABEL_10:
      unint64_t v17 = v10;
      goto LABEL_11;
    }
    int v43 = @"element.unselected.text";
    unint64_t v17 = (char *)location;
  }
LABEL_11:
  uint64_t v18 = VOTLogElement();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
    sub_10011EEA4();
  }

  unsigned __int8 v19 = VOTLogElement();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
    sub_10011EE3C();
  }

  id v20 = VOTLogElement();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
    sub_10011EDD4();
  }

  if (v16 && &v16[(void)v17] <= [v12 length])
  {
    id v21 = v44->_firstResponderElement;
    if (!v21)
    {
      id v21 = [(VOTElementManager *)v44 _currentElement];
    }
    uint64_t v22 = -[VOTElement attributedValueForRange:](v21, "attributedValueForRange:", v17, v16);
    if (!v22)
    {
      unsigned __int8 v23 = -[VOTElement valueForRange:](v21, "valueForRange:", v17, v16);
      uint64_t v22 = +[AXAttributedString axAttributedStringWithString:v23];
    }
    id v24 = +[NSString stringWithFormat:@"%C", 65532];
    double v42 = +[NSCharacterSet characterSetWithCharactersInString:v24];
    if ([v22 rangeOfCharacterFromSet:v42] != (id)0x7FFFFFFFFFFFFFFFLL && objc_msgSend(v22, "length"))
    {
      uint64_t v47 = 0;
      double v48 = &v47;
      uint64_t v49 = 0x3032000000;
      __int16 v50 = sub_100067578;
      int v51 = sub_100067588;
      id v52 = [v22 copy];
      v46[0] = 0;
      v46[1] = v46;
      v46[2] = 0x2020000000;
      v46[3] = 0;
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      v45[2] = sub_1000817DC;
      v45[3] = &unk_1001B57A8;
      v45[4] = v44;
      v45[5] = v46;
      v45[6] = &v47;
      objc_msgSend(v22, "enumerateAttribute:inRange:options:usingBlock:", UIAccessibilityTokenAttachment, 0, objc_msgSend(v22, "length"), 0, v45);
      id v25 = (void *)v48[5];
      id v26 = sub_100051D04(off_1001EA9E8, @"attachment", 0, v14);
      uint64_t v27 = [v25 axAttributedStringByReplacingOccurrencesOfString:v24 withString:v26];

      _Block_object_dispose(v46, 8);
      _Block_object_dispose(&v47, 8);

      uint64_t v22 = (void *)v27;
    }
    double v28 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
    id v29 = [v22 rangeOfCharacterFromSet:v28];
    id v31 = v30;
    id v32 = [v22 length];

    if (v29 || v31 != v32)
    {
      uint64_t v33 = [v22 axAttributedStringByReplacingOccurrencesOfString:@"\n" withString:@" "];

      uint64_t v22 = (void *)v33;
    }
    id v34 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    id v35 = [v34 addString:v22 withLanguage:v13];
    int v36 = [v34 lastAction];
    [v36 setObject:kCFBooleanTrue forVariant:50];

    uint64_t v37 = sub_100051D04(off_1001EA9E8, v43, 0, v14);
    id v38 = [v34 addString:v37 withLanguage:v14];

    [(VOTElementManager *)v44 sendRequest:v34];
    goto LABEL_46;
  }
  if (v10)
  {
    if (!v9)
    {
LABEL_35:
      id v21 = +[VOTOutputManager outputManager];
      if (v10)
      {
        if (v10 != [v12 length])
        {
LABEL_47:

          goto LABEL_48;
        }
        double v40 = @"bottom.document";
      }
      else
      {
        double v40 = @"top.document";
      }
      float v41 = sub_100051D04(off_1001EA9E8, v40, 0, v14);
      [(VOTElement *)v21 speakSimpleString:v41 braille:0 language:v14];

      uint64_t v22 = +[VOSOutputEvent BoundaryEncountered];
      [(VOTElement *)v21 sendEvent:v22];
LABEL_46:

      goto LABEL_47;
    }
  }
  else
  {
    id v39 = [v12 length];
    if (!v9 && v39) {
      goto LABEL_35;
    }
  }
LABEL_48:
}

- (id)determineActivityForElement:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(id)VOTSharedWorkspace selectedActivity];
  if (v5)
  {
    id v6 = (void *)v5;
    unsigned int v7 = 0;
LABEL_3:
    unsigned int v8 = VOTLogActivities();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Using activity: %@", buf, 0xCu);
    }

    goto LABEL_6;
  }
  unsigned int v7 = [(id)VOTSharedWorkspace activities];
  if ([v7 count])
  {
    uint64_t v10 = [v4 textualContext];
    if (v10)
    {
      id v11 = (void *)v10;
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100081BD8;
      v22[3] = &unk_1001B3370;
      v22[4] = v10;
      id v12 = objc_msgSend(v7, "ax_filteredArrayUsingBlock:", v22);
      id v6 = [v12 firstObject];

      if (v6) {
        goto LABEL_3;
      }
    }
  }
  if (![v7 count])
  {
    id v6 = 0;
    goto LABEL_6;
  }
  id v13 = [v4 application];
  id v6 = [v13 bundleIdentifier];

  if ([v6 isEqualToString:@"com.apple.InputUI"])
  {
    uint64_t v14 = [(VOTElement *)self->_lastApplication bundleIdentifier];

    id v6 = (void *)v14;
  }
  if (v6)
  {
    unint64_t v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472;
    unsigned __int8 v19 = sub_100081C1C;
    id v20 = &unk_1001B3370;
    id v21 = v6;
    id v15 = v6;
    id v16 = objc_msgSend(v7, "ax_filteredArrayUsingBlock:", &v17);
    id v6 = objc_msgSend(v16, "firstObject", v17, v18, v19, v20);

    if (v6) {
      goto LABEL_3;
    }
  }
LABEL_6:

  return v6;
}

- (int64_t)modifierKeyChoiceForElement:(id)a3
{
  id v3 = [(VOTElementManager *)self determineActivityForElement:a3];
  id v4 = [v3 modifierKeys];

  if (v4)
  {
    uint64_t v5 = [v3 modifierKeys];
    id v6 = [v5 integerValue];
  }
  else
  {
    uint64_t v5 = +[AXSettings sharedInstance];
    id v6 = [v5 voiceOverKeyboardModifierChoice];
  }
  int64_t v7 = (int64_t)v6;

  return v7;
}

- (BOOL)determineSceneDetectionsEnabled:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(VOTElementManager *)self determineActivityForElement:v4];
  id v6 = [v5 imageDescriptions];

  if (v6)
  {
    int64_t v7 = [v5 imageDescriptions];
    unsigned __int8 v8 = [v7 BOOLValue];
  }
  else
  {
    NSUInteger v9 = [(id)VOTSharedWorkspace imageCaptioningDisabledApps];
    uint64_t v10 = [v4 application];
    id v11 = [v10 bundleIdentifier];
    unsigned __int8 v12 = [v9 containsObject:v11];

    if (v12) {
      unsigned __int8 v8 = 0;
    }
    else {
      unsigned __int8 v8 = [(id)VOTSharedWorkspace imageCaptionsEnabled];
    }
  }

  return v8;
}

- (BOOL)determineFullImageDescriptionsEnabled:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(VOTElementManager *)self determineActivityForElement:v4];
  id v6 = [v5 imageDescriptions];

  if (v6)
  {
    int64_t v7 = [v5 imageDescriptions];
    unsigned __int8 v8 = [v7 BOOLValue];
  }
  else
  {
    NSUInteger v9 = [(id)VOTSharedWorkspace imageCaptioningDisabledApps];
    uint64_t v10 = [v4 application];
    id v11 = [v10 bundleIdentifier];
    unsigned __int8 v12 = [v9 containsObject:v11];

    if (v12) {
      unsigned __int8 v8 = 0;
    }
    else {
      unsigned __int8 v8 = [(id)VOTSharedWorkspace imageCaptionsEnabled];
    }
  }

  return v8;
}

- (BOOL)speakTableRowAndColumnForElement:(id)a3
{
  id v3 = [(VOTElementManager *)self determineActivityForElement:a3];
  id v4 = [v3 tableRowAndColumn];

  if (v4)
  {
    uint64_t v5 = [v3 tableRowAndColumn];
    unsigned __int8 v6 = [v5 BOOLValue];
  }
  else
  {
    uint64_t v5 = +[AXSettings sharedInstance];
    unsigned __int8 v6 = [v5 voiceOverSpeakTableColumnRowInformation];
  }
  BOOL v7 = v6;

  return v7;
}

- (BOOL)speakTableHeadersForElement:(id)a3
{
  id v3 = [(VOTElementManager *)self determineActivityForElement:a3];
  id v4 = [v3 tableHeaders];

  if (v4)
  {
    uint64_t v5 = [v3 tableHeaders];
    unsigned __int8 v6 = [v5 BOOLValue];
  }
  else
  {
    uint64_t v5 = +[AXSettings sharedInstance];
    unsigned __int8 v6 = [v5 voiceOverSpeakTableHeaders];
  }
  BOOL v7 = v6;

  return v7;
}

- (BOOL)_prepareElementOutputHeaders:(id)a3 currentElement:(id)a4 request:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if ([v8 supportsHeaderElementOutput]
    && [(VOTElementManager *)self speakTableHeadersForElement:v8])
  {
    if ([v8 containedIn:2] && objc_msgSend(v9, "containedIn:", 2))
    {
      id v11 = objc_msgSend(v8, "headerElementsForRow:", objc_msgSend(v8, "rowRange"));
      if ([v11 containsObject:v8])
      {

        id v11 = &__NSArray0__struct;
      }
      unsigned __int8 v12 = objc_msgSend(v8, "headerElementsForColumn:", objc_msgSend(v8, "columnRange"));
      if ([v12 containsObject:v8])
      {

        id v11 = &__NSArray0__struct;
      }
      id v13 = [v11 arrayByAddingObjectsFromArray:v12];
      uint64_t v14 = objc_msgSend(v9, "headerElementsForRow:", objc_msgSend(v9, "rowRange"));

      id v15 = objc_msgSend(v9, "headerElementsForColumn:", objc_msgSend(v9, "columnRange"));

      id v16 = [v14 arrayByAddingObjectsFromArray:v15];
    }
    else
    {
      id v13 = [v8 headerElements];
      id v16 = [v9 headerElements];
    }
    uint64_t v18 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v13 count]);
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v19 = v13;
    id v20 = [v19 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v21; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v22) {
            objc_enumerationMutation(v19);
          }
          uint64_t v24 = *(void *)(*((void *)&v27 + 1) + 8 * i);
          if ((objc_msgSend(v16, "containsObject:", v24, (void)v27) & 1) == 0) {
            [v18 addObject:v24];
          }
        }
        id v21 = [v19 countByEnumeratingWithState:&v27 objects:v31 count:16];
      }
      while (v21);
    }

    id v25 = [v18 count];
    BOOL v17 = v25 != 0;
    if (v25) {
      [v10 setElementHeadersForOutput:v18];
    }
  }
  else
  {
    BOOL v17 = 0;
  }

  return v17;
}

- (id)_sonarElementFromPoint:(CGPoint)a3 inForwardDirection:(BOOL)a4 limit:(int64_t)a5
{
  BOOL v6 = a4;
  double y = a3.y;
  double x = a3.x;
  double v9 = *((double *)&xmmword_1001EBE30 + 1);
  double v10 = *(double *)&xmmword_1001EBE30;
  double Current = CFAbsoluteTimeGetCurrent();
  int v12 = sub_100050E5C();
  int64_t v13 = 0;
  double v14 = v10 + -10.0;
  uint64_t v15 = kAXStatusBarElementTrait;
  uint64_t v16 = kAXSpacerTrait;
  uint64_t v37 = v43;
  double v11 = v9 / 12.0;
  if (v6) {
    double v17 = (v11 + v11) / 12.0;
  }
  else {
    double v17 = -((v11 + v11) / 12.0);
  }
  if (v6) {
    double v18 = v10 / 12.0;
  }
  else {
    double v18 = -(v10 / 12.0);
  }
  if (v6) {
    double v10 = 0.0;
  }
  int64_t v40 = a5;
  while (1)
  {
    BOOL v19 = y <= v9 + -10.0;
    if (!v6) {
      BOOL v19 = y >= 10.0;
    }
    if (!v19)
    {
LABEL_53:
      id v22 = 0;
      goto LABEL_54;
    }
    BOOL v21 = x <= v14;
    if (!v6) {
      BOOL v21 = x >= 10.0;
    }
    if (v21) {
      break;
    }
LABEL_50:
    if (v40 < 1 || v13 <= v40)
    {
      double x = v10;
      if (CFAbsoluteTimeGetCurrent() - Current <= 3.0) {
        continue;
      }
    }
    goto LABEL_53;
  }
  context = v20;
  id v22 = 0;
  do
  {
    unsigned __int8 v23 = v22;
    id v22 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", x, y);

    uint64_t v24 = [v22 bundleIdentifier];
    unsigned __int8 v25 = [v24 isEqualToString:@"com.apple.assistivetouchd"];

    if (v25) {
      goto LABEL_42;
    }
    id v26 = VOTLogElement();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      long long v27 = [v22 bundleIdentifier];
      *(_DWORD *)long long buf = 138412290;
      double v45 = *(double *)&v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "element %@", buf, 0xCu);
    }
    if (v12 && [v22 isTouchContainer])
    {
      long long v28 = [(VOTElement *)self->_lastValidElement touchContainer];
      unsigned __int8 v29 = [v28 isEqual:v22];

      if (v29)
      {
        long long v30 = 0;
      }
      else
      {
        if (v6) {
          [v22 firstContainedElement];
        }
        else {
        long long v30 = [v22 lastContainedElement];
        }
        if (objc_msgSend(v30, "isEqual:", v22, v37))
        {

          ++v13;
          id v22 = 0;
          goto LABEL_42;
        }
      }

      id v22 = v30;
    }
    id v31 = VOTLogElement();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134218498;
      double v45 = x;
      __int16 v46 = 2048;
      double v47 = y;
      __int16 v48 = 2114;
      int64_t v49 = (int64_t)v22;
      _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Sonar: {%f, %f} = %{public}@", buf, 0x20u);
    }

    if ((![v22 doesHaveTraits:v15] || !v6)
      && (objc_msgSend(v22, "doesHaveTraits:", v16, v37) & 1) == 0)
    {
      if (![v22 isBannerNotification] || !v6)
      {
        if (v22)
        {
          goto LABEL_54;
        }
        goto LABEL_41;
      }
      id v32 = VOTLogElement();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        sub_10011EF0C(&v42, v37, v32);
      }
    }
LABEL_41:
    id v22 = 0;
    ++v13;
    double y = v17 + y;
LABEL_42:
    double x = v18 + x;
    BOOL v33 = x <= v14;
    if (!v6) {
      BOOL v33 = x >= 10.0;
    }
  }
  while (v33);
  if (!v22) {
    goto LABEL_50;
  }
LABEL_54:
  id v34 = VOTLogElement();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
  {
    CFAbsoluteTime v36 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)long long buf = 138543874;
    double v45 = *(double *)&v22;
    __int16 v46 = 2048;
    double v47 = v36 - Current;
    __int16 v48 = 2048;
    int64_t v49 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "found sonar element: %{public}@ - %f[%ld]", buf, 0x20u);
  }

  return v22;
}

- (id)_sonarElementInForwardDirection:(BOOL)a3 limit:(int64_t)a4
{
  return -[VOTElementManager _sonarElementFromPoint:inForwardDirection:limit:](self, "_sonarElementFromPoint:inForwardDirection:limit:", a3, a4, self->_fingerLocation.x, self->_fingerLocation.y);
}

- (void)_setNearestElementMovingForward:(BOOL)a3
{
  uint64_t v4 = [(VOTElementManager *)self _sonarElementInForwardDirection:a3 limit:-1];
  uint64_t v5 = (void *)v4;
  if (self->_inUnitTestingMode)
  {
    id v9 = (id)v4;
    BOOL v6 = self->_currentElement;

    uint64_t v5 = v6;
  }
  id v10 = v5;
  if (v5)
  {
    [(VOTElementManager *)self _echoDifferentElement:v5 forEvent:0];
    [(VOTElementFetcher *)self->_fetchManager updateCacheWithElement:v10];
    self->_flags.focusIsOnElement = 1;
  }
  else
  {
    BOOL v7 = +[VOTOutputManager outputManager];
    id v8 = +[VOSOutputEvent BoundaryEncountered];
    [v7 sendEvent:v8];
  }
}

- (BOOL)_moveElementToFlowTo:(id)a3
{
  id v4 = a3;
  unsigned int v5 = [v4 doesHaveTraits:kAXWebContentTrait];
  unsigned int v6 = [v4 doesHaveTraits:kAXTableIndexTrait];
  if ((v5 & 1) != 0 || v6)
  {
    if (v6) {
      [v4 updateFlowToElements];
    }
    id v8 = [v4 flowToElements];
    id v9 = [v8 count];
    BOOL v7 = v9 != 0;
    if (v9)
    {
      id v10 = [v8 indexOfObjectPassingTest:&stru_1001B57E8];
      if (v10 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        double v11 = 0;
      }
      else
      {
        double v11 = [v8 objectAtIndex:v10];
      }
      unint64_t elementSearchGeneration = self->_elementSearchGeneration;
      id v13 = [v11 selectedTextRange];
      uint64_t v15 = +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:](VOTElementFetchFoundData, "fetchFoundData:forceUpdate:direction:generation:range:searchType:", v11, 0, 1, elementSearchGeneration, v13, v14, 0);
      [(VOTElementManager *)self _elementFetchFoundElement:v15];

      if (v5)
      {
        if (!self->_flowFromElements)
        {
          uint64_t v16 = (NSMutableDictionary *)[objc_allocWithZone((Class)NSMutableDictionary) init];
          flowFromElements = self->_flowFromElements;
          self->_flowFromElements = v16;
        }
        v21[0] = [v11 nonPersistentUniqueId];
        v21[1] = v18;
        BOOL v19 = +[NSValue value:v21 withObjCType:"{?=QQ}"];
        [(NSMutableDictionary *)self->_flowFromElements setObject:v4 forKey:v19];
      }
    }
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

- (void)_handleMoveToElementAbove:(id)a3
{
}

- (void)_handleMoveToElementBelow:(id)a3
{
}

- (void)_handleElementMovement:(id)a3
{
  id v4 = a3;
  [(VOTElementManager *)self setLastElementChangeAction:2];
  unsigned int v5 = [v4 command];
  id v6 = [v5 isEqualToString:kVOTEventCommandNextElement];

  BOOL v7 = [v4 command];
  unsigned int v8 = [v7 isEqualToString:kVOTEventCommandPreviousElement];

  id v9 = [v4 command];
  unsigned int v10 = [v9 isEqualToString:kVOTEventCommandFirstElement];

  double v11 = [v4 command];
  unsigned int v12 = [v11 isEqualToString:kVOTEventCommandLastElement];

  id v13 = [v4 command];
  unsigned int v14 = [v13 isEqualToString:kVOTEventCommandCenterElement];

  uint64_t v15 = [(VOTElementManager *)self _currentElement];
  unsigned int v16 = v6 | v8;
  if (self->_inTextProcessingRotorMode)
  {
    if (v16)
    {
      [v4 objectForIndex:119];
      unsigned int v69 = v6 | v8;
      unsigned int v17 = v14;
      uint64_t v18 = self;
      unsigned int v19 = v8;
      id v20 = v4;
      unsigned int v21 = v10;
      id v22 = v6;
      unsigned int v23 = v12;
      v25 = uint64_t v24 = v15;
      unsigned __int8 v26 = [v25 BOOLValue];

      uint64_t v15 = v24;
      unsigned int v12 = v23;
      id v6 = v22;
      unsigned int v10 = v21;
      id v4 = v20;
      unsigned int v8 = v19;
      self = v18;
      unsigned int v14 = v17;
      unsigned int v16 = v69;
      if ((v26 & 1) == 0)
      {
        if ([(VOTElementManager *)self _inMisspelledWordRotor])
        {
          [(VOTElementManager *)self _handleMisspelledWordRotorAction:v6];
        }
        else if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)6)
        {
          [(VOTElementManager *)self _handleTextRotorSelectionAction:v6];
        }
        goto LABEL_13;
      }
    }
  }
  if (!self->_flags.focusIsOnElement || ([v15 isValid] & 1) == 0)
  {
    [(VOTElementManager *)self _setNearestElementMovingForward:v6];
    goto LABEL_13;
  }
  if ((v10 | v12) == 1)
  {
    long long v27 = [v15 remoteParent];
    if (v27 && [v15 remoteParentIsViewHost])
    {
      long long v28 = [v15 isolatedWindow];
      unsigned __int8 v29 = v15;
      long long v30 = v28;
      if (!v28) {
        long long v28 = v27;
      }
      id v31 = [v28 application];

      uint64_t v15 = v29;
    }
    else
    {
      id v31 = [v15 application];
    }
    if ([(VOTElementManager *)self _isShowingTodayViewForPhone])
    {
      currentApplications = self->_currentApplications;
      int64_t v40 = v15;
      if (v10) {
        [(NSArray *)currentApplications firstObject];
      }
      else {
      uint64_t v44 = [(NSArray *)currentApplications lastObject];
      }

      id v31 = (void *)v44;
    }
    else
    {
      int64_t v40 = v15;
    }
    if ([(id)VOTSharedWorkspace navigationStyleHonorsGroups]
      && ![(VOTElement *)self->_currentElement isAccessibleGroup])
    {
      double v47 = [(VOTElement *)self->_currentElement groupedParent];

      if (v10)
      {
        if (v47)
        {
          __int16 v48 = [(VOTElement *)self->_currentElement groupedParent];
          double v45 = [v48 firstContainedElement];

          goto LABEL_49;
        }
LABEL_48:
        double v45 = [v31 firstContainedElement];
LABEL_49:
        int64_t v46 = 2;
LABEL_50:
        uint64_t v15 = v40;
        goto LABEL_60;
      }
      if (v47)
      {
        int64_t v49 = [(VOTElement *)self->_currentElement groupedParent];
        double v45 = [v49 lastContainedElement];

        int64_t v46 = 1;
        goto LABEL_50;
      }
    }
    else if (v10)
    {
      goto LABEL_48;
    }
    uint64_t v15 = v40;
    if ([v40 doesHaveTraits:kAXStatusBarElementTrait]) {
      [v31 lastElementInStatusBar];
    }
    else {
    double v45 = [v31 lastContainedElement];
    }
    int64_t v46 = 1;
LABEL_60:
    self->_flags.lastElementMovement = v46;
    if ([v45 isEqual:v15])
    {
      __int16 v50 = +[VOTOutputManager outputManager];
      int v51 = +[VOSOutputEvent BoundaryEncountered];
      [v50 sendEvent:v51];

      id v52 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      [(VOTElementManager *)self _addDescription:v45 toRequest:v52 withOptions:0x800000];
      [(VOTElementManager *)self sendRequest:v52];
    }
    else
    {
      if (v6 | v12) {
        uint64_t v53 = 1;
      }
      else {
        uint64_t v53 = 2;
      }
      v72[0] = _NSConcreteStackBlock;
      v72[1] = 3221225472;
      v72[2] = sub_100083250;
      v72[3] = &unk_1001B3448;
      v72[4] = self;
      id v54 = v45;
      id v73 = v54;
      [v54 scrollToElementForDirectional:v53 withCompletion:v72];
      [(VOTElementManager *)self _echoDifferentElement:v54 forEvent:0];
      fetchManager = self->_fetchManager;
      uint64_t v56 = [(VOTElementManager *)self _currentElement];
      [(VOTElementFetcher *)fetchManager updateCacheWithElement:v56];
    }
    goto LABEL_13;
  }
  if (v16)
  {
    id v32 = VOTLogElement();
    if (os_signpost_enabled(v32))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "ElementTraversal", "", buf, 2u);
    }

    if (v6) {
      int64_t v33 = 1;
    }
    else {
      int64_t v33 = 2;
    }
    self->_flags.lastElementMovement = v33;
    if (v8 && [(NSMutableDictionary *)self->_flowFromElements count])
    {
      id v34 = [(VOTElementManager *)self _currentElement];
      *(void *)long long buf = [v34 nonPersistentUniqueId];
      uint64_t v71 = v35;

      CFAbsoluteTime v36 = +[NSValue value:buf withObjCType:"{?=QQ}"];
      uint64_t v37 = [(NSMutableDictionary *)self->_flowFromElements objectForKey:v36];
      if (v37)
      {
        id v38 = (void *)v37;
        [(VOTElementManager *)self _echoDifferentElement:v37 forEvent:0];

        goto LABEL_18;
      }
    }
    int64_t v57 = +[VOTOutputManager outputManager];
    [v57 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

    if (sub_100050E5C()
      && !v15
      && ([(VOTElementManager *)self touchContainer],
          unsigned __int8 v58 = objc_claimAutoreleasedReturnValue(),
          v58,
          v58))
    {
      id v59 = [(VOTElementManager *)self touchContainer];
      uint64_t v60 = v59;
      if (v6) {
        [v59 firstContainedElement];
      }
      else {
      float v41 = [v59 lastContainedElement];
      }

      [(VOTElementManager *)self _echoDifferentElement:v41 forEvent:0];
    }
    else
    {
      self->_flags.performedKeyboardNavigation = [v4 isKeyEvent];
      self->_flags.performedFlickNavigation = 1;
      if ((v8 & 1) == 0 && [(VOTElementManager *)self _moveElementToFlowTo:v15]) {
        goto LABEL_13;
      }
      if ([v15 elementVisibilityAffectsLayout])
      {
        [v15 scrollToElementForDirectional:2 withCompletion:0];
        [(VOTElementFetcher *)self->_fetchManager forceUpdate];
      }
      float v41 = [(VOTElementManager *)self _copyMatchBlockAnyElement];
      uint64_t v61 = self->_fetchManager;
      unint64_t elementSearchGeneration = self->_elementSearchGeneration;
      id v63 = [v15 selectedTextRange];
      uint64_t v64 = v15;
      uint64_t v66 = v65;
      LOBYTE(v68) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
      uint64_t v67 = v66;
      uint64_t v15 = v64;
      -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:](v61, "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:", v33, v64, v41, 0, 0, elementSearchGeneration, v63, v67, v68);
    }
  }
  else
  {
    if (!v14) {
      goto LABEL_13;
    }
    float v41 = +[VOTEvent touchEventWithCommand:kVOTEventCommandTracking info:0];
    [(id)VOTSharedWorkspace convertDevicePointToZoomedPoint:sub_100051E14(0.5)];
    objc_msgSend(v41, "setTouchPoint:");
    uint8_t v42 = [VOTElement alloc];
    [v41 touchPoint];
    int v43 = -[VOTElement initWithPosition:](v42, "initWithPosition:");
    if (v43
      || ([(VOTElementManager *)self _sonarElementInForwardDirection:1 limit:10], (int v43 = (VOTElement *)objc_claimAutoreleasedReturnValue()) != 0)|| ([(VOTElementManager *)self _sonarElementInForwardDirection:0 limit:10], (int v43 = (VOTElement *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      [(VOTElementManager *)self _echoDifferentElement:v43 forEvent:0];
    }
  }

LABEL_13:
  if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXLaunchIconTrait]
    && ![(VOTElement *)self->_currentElement isInFolder])
  {
    [(NSMutableArray *)self->_cachedLaunchIcons removeAllObjects];
  }
  [(VOTElementManager *)self _resetOtherTapInputModes];
  if ([(VOTElement *)self->_currentElement isSafariScribbleActive]) {
    [(VOTElement *)self->_currentElement clearSelectedScribbleElement];
  }
LABEL_18:
}

- (void)_handleRealtimeElementMovement:(id)a3
{
  id v18 = a3;
  id v4 = [(VOTElement *)self->_currentElement application];
  unsigned int v5 = [v4 realtimeElements];

  if ([v5 count])
  {
    id v6 = [v18 command];
    unsigned int v7 = [v6 isEqualToString:kVOTEventCommandNextRealtimeElement];

    unsigned int v8 = (char *)[v5 indexOfObject:self->_currentElement];
    if (v8 == (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      if (v7) {
        [v5 firstObject];
      }
      else {
      id v9 = [v5 lastObject];
      }
      [(VOTElementManager *)self _setCurrentElement:v9];
      unsigned int v17 = +[VOTDisplayManager displayManager];
      [v17 setCursorFrameForElement:v9];
    }
    else
    {
      if (v7) {
        double v11 = v8 + 1;
      }
      else {
        double v11 = v8 - 1;
      }
      unint64_t v12 = (unint64_t)[v5 count] + (void)v11;
      unint64_t v13 = v12 % (unint64_t)[v5 count];
      unsigned int v14 = [v5 objectAtIndex:v13];
      [(VOTElementManager *)self _setCurrentElement:v14];

      uint64_t v15 = +[VOTDisplayManager displayManager];
      unsigned int v16 = [v5 objectAtIndex:v13];
      [v15 setCursorFrameForElement:v16];

      id v9 = [v5 objectAtIndex:v13];
    }
    [(VOTElementManager *)self _echoDifferentElement:v9 forEvent:v18];
  }
  else
  {
    id v9 = +[VOTOutputManager outputManager];
    unsigned int v10 = +[VOSOutputEvent BoundaryEncountered];
    [v9 sendEvent:v10];
  }
}

- (void)_handleShowEditingHUD:(id)a3
{
  id v4 = +[VOTOutputManager outputManager];
  unsigned int v5 = +[VOSOutputEvent DidBeginPassthrough];
  [v4 sendEvent:v5];

  id v7 = [(VOTElementManager *)self _currentElement];
  id v6 = [v7 application];
  [v6 showEditingHUD];
}

- (void)_handleVerticalMovement:(id)a3 direction:(int64_t)a4
{
  id v6 = a3;
  [(VOTElement *)self->_currentElement frame];
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  uint64_t v15 = +[VOTElement systemWideElement];
  objc_msgSend(v15, "convertRect:fromContextId:", -[VOTElement windowContextId](self->_currentElement, "windowContextId"), v8, v10, v12, v14);
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  double v23 = v22;

  AX_CGRectGetCenter();
  double v25 = v24;
  double v27 = v26;
  double v28 = 10.0;
  if (sub_100050E64()) {
    double v29 = 20.0;
  }
  else {
    double v29 = 10.0;
  }
  double v47 = v29;
  if (sub_100050E64()) {
    double v28 = 20.0;
  }
  long long v30 = (char *)[(id)VOTSharedWorkspace deviceOrientation];
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_100083878;
  v48[3] = &unk_1001B5810;
  v48[4] = self;
  id v31 = v6;
  id v49 = v31;
  id v32 = objc_retainBlock(v48);
  if ((unint64_t)(v30 - 1) > 1)
  {
    if ((unint64_t)(v30 - 3) <= 1)
    {
      v50.origin.double x = v17;
      v50.origin.double y = v19;
      v50.size.CGFloat width = v21;
      v50.size.CGFloat height = v23;
      if (v27 > CGRectGetMinY(v50) - v23)
      {
        if (v30 == (char *)3) {
          double v28 = -v28;
        }
        if ((a4 == 2) != (v30 == (char *)3)) {
          double v43 = -v47;
        }
        else {
          double v43 = v47;
        }
        do
        {
          v51.origin.double x = v17;
          v51.origin.double y = v19;
          v51.size.CGFloat width = v21;
          v51.size.CGFloat height = v23;
          if (v27 >= v23 + CGRectGetMaxY(v51)) {
            break;
          }
          while (v25 >= 0.0 && v25 <= *(double *)&xmmword_1001EBE30)
          {
            if (((uint64_t (*)(void *, double, double))v32[2])(v32, v25, v27)) {
              goto LABEL_51;
            }
            double v25 = v43 + v25;
          }
          double v27 = v28 + v27;
          v52.origin.double x = v17;
          v52.origin.double y = v19;
          v52.size.CGFloat width = v21;
          v52.size.CGFloat height = v23;
        }
        while (v27 > CGRectGetMinY(v52) - v23);
      }
    }
    goto LABEL_50;
  }
  double v33 = v25 + v28 * -3.0;
  double v34 = v25 + v28 * 3.0;
  if (v25 <= v33 || v25 >= v34)
  {
LABEL_50:
    double v45 = +[VOTOutputManager outputManager];
    int64_t v46 = +[VOSOutputEvent BoundaryEncountered];
    [v45 sendEvent:v46];

    goto LABEL_51;
  }
  if (v30 == (char *)2) {
    double v36 = -v28;
  }
  else {
    double v36 = v28;
  }
  if ((a4 == 2) != (v30 == (char *)2)) {
    double v37 = -v47;
  }
  else {
    double v37 = v47;
  }
  double v38 = *((double *)&xmmword_1001EBE30 + 1);
  while (v27 < 0.0 || v27 > v38)
  {
LABEL_30:
    double v25 = v36 + v25;
    if (v25 <= v33 || v25 >= v34) {
      goto LABEL_50;
    }
  }
  double v40 = v27;
  while ((((uint64_t (*)(void *, double, double))v32[2])(v32, v25, v40) & 1) == 0)
  {
    double v40 = v37 + v40;
    double v38 = *((double *)&xmmword_1001EBE30 + 1);
    if (v40 < 0.0 || v40 > *((double *)&xmmword_1001EBE30 + 1)) {
      goto LABEL_30;
    }
  }
LABEL_51:
}

- (id)webCustomRotorDictionary:(id)a3 direction:(int64_t)a4 forElement:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  double v10 = +[NSMutableDictionary dictionary];
  id v11 = v9;
  uint64_t v12 = kAXIsEditingTrait;
  id v13 = v11;
  if (([v11 doesHaveTraits:kAXIsEditingTrait] & 1) == 0)
  {
    double v14 = [(VOTElementManager *)self webEditableAncestor:v11];
    uint64_t v15 = v14;
    id v13 = v11;
    if (v14)
    {
      id v13 = v14;
    }
  }
  if ([v13 doesHaveTraits:v12])
  {
    [v10 setObject:v8 forKeyedSubscript:@"uuid"];
    double v16 = +[NSMutableDictionary dictionary];
    [v10 setObject:v16 forKeyedSubscript:@"currentItem"];

    CGFloat v17 = [v10 objectForKeyedSubscript:@"currentItem"];
    [v17 setObject:v13 forKeyedSubscript:@"targetElement"];

    double v18 = [v13 textMarkerRangeForSelection];
    if ([v18 count] == (id)2)
    {
      CGFloat v19 = [v10 objectForKeyedSubscript:@"currentItem"];
      [v19 setObject:v18 forKeyedSubscript:@"targetRange"];
    }
    double v20 = +[NSNumber numberWithInteger:a4 == 1];
    [v10 setObject:v20 forKeyedSubscript:@"direction"];
  }

  return v10;
}

- (BOOL)_customRotorTypeRequiresFirstElementProcessing:(id)a3
{
  return [a3 isEqualToString:@"AXCustomSystemRotorTypeMisspelledWord"];
}

- (void)_handlePublicCustomRotorMovement:(id)a3 direction:(int64_t)a4
{
  unint64_t v6 = [(VOTRotor *)self->_elementRotor publicCustomRotorIndex];
  double v7 = [(VOTRotor *)self->_elementRotor customPublicRotors];
  id v8 = [(VOTElementManager *)self _currentElement];
  if ((v6 & 0x8000000000000000) == 0 && v6 < (unint64_t)[v7 count])
  {
    id v9 = [v7 objectAtIndexedSubscript:v6];
    uint64_t v10 = [v9 objectForKeyedSubscript:@"uuid"];

    id v11 = [v7 objectAtIndexedSubscript:v6];
    uint64_t v12 = [v11 objectForKeyedSubscript:@"element"];

    if (v12)
    {
      id v13 = [v7 objectAtIndexedSubscript:v6];
      uint64_t v14 = [v13 objectForKeyedSubscript:@"element"];

      id v8 = (void *)v14;
    }
    uint64_t v15 = [v7 objectAtIndexedSubscript:v6];
    double v16 = [v15 objectForKeyedSubscript:@"name"];
    unsigned int v17 = [(VOTElementManager *)self _customRotorTypeRequiresFirstElementProcessing:v16];

    if (v17)
    {
      if ([v8 doesHaveTraits:kAXKeyboardKeyTrait])
      {
        double v18 = [v8 textInputElement];
        if (v18
          || ([(VOTElement *)self->_lastApplication firstResponderElement],
              (double v18 = objc_claimAutoreleasedReturnValue()) != 0))
        {
          id v19 = v18;

          id v8 = v19;
        }
      }
    }
    if ([v8 doesHaveTraits:kAXWebContentTrait])
    {
      double v20 = [(VOTElementManager *)self webCustomRotorDictionary:v10 direction:a4 forElement:v8];
      CGFloat v21 = [v20 objectForKeyedSubscript:@"currentItem"];
      id v22 = [v21 objectForKeyedSubscript:@"targetElement"];

      if (v22) {
        goto LABEL_20;
      }
    }
    else
    {
      double v20 = 0;
    }
    id v22 = v8;
    if (![v22 doesHaveTraits:kAXIsEditingTrait]
      || ([v22 doesHaveTraits:kAXStaticTextTrait] & 1) != 0
      || (id v25 = [v22 selectedTextRange], v25 == (id)0x7FFFFFFF))
    {
      NSUInteger location = self->_highlightedCharacterRange.location;
      NSUInteger length = self->_highlightedCharacterRange.length;
    }
    else
    {
      NSUInteger location = (NSUInteger)v25;
      NSUInteger length = v26;
    }
    uint64_t v29 = +[VOTElement customPublicRotorDictionaryForRotorId:startRange:direction:](VOTElement, "customPublicRotorDictionaryForRotorId:startRange:direction:", v10, location, length, a4);

    double v20 = (void *)v29;
LABEL_20:
    long long v30 = [v8 customPublicRotorResultWithItem:v20 startElement:v22];
    uint64_t v53 = (void *)v10;
    id v54 = v30;
    if ([(id)VOTSharedWorkspace inUnitTestMode])
    {
      id v31 = [v30 objectForKeyedSubscript:@"targetElement"];
    }
    else
    {
      id v32 = [v30 objectForKeyedSubscript:@"targetElement"];
      double v33 = +[AXUIElement uiElementWithAXElement:v32];
      id v31 = +[VOTElement elementWithUIElement:v33];

      long long v30 = v54;
    }
    if ([v31 isRemoteElement])
    {
      uint64_t v34 = [v31 elementForAttribute:3009];

      id v31 = (void *)v34;
    }
    long long valuePtr = xmmword_10016E510;
    uint64_t v35 = [v30 objectForKeyedSubscript:@"targetRange"];
    if (v35)
    {
      CFTypeID TypeID = AXValueGetTypeID();
      if (TypeID == CFGetTypeID(v35))
      {
        AXValueGetValue(v35, kAXValueTypeCFRange, &valuePtr);
LABEL_32:
        double v37 = 0;
        goto LABEL_33;
      }
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      double v37 = 0;
      *(void *)&long long valuePtr = [(__AXValue *)v35 rangeValue];
      *((void *)&valuePtr + 1) = v38;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_32;
      }
      double v37 = v35;
    }
LABEL_33:
    if (!v31
      || [v31 isEqual:v22]
      && (void)valuePtr == 0x7FFFFFFFLL
      && (!v37 || [(__AXValue *)v37 count] != (id)2))
    {
      int64_t v46 = +[VOTOutputManager outputManager];
      double v47 = +[VOSOutputEvent BoundaryEncountered];
      [v46 sendEvent:v47];

LABEL_69:
      goto LABEL_70;
    }
    BOOL preventCustomRotorItemIndexReset = self->_flags.preventCustomRotorItemIndexReset;
    self->_flags.BOOL preventCustomRotorItemIndexReset = 1;
    unsigned int v39 = objc_msgSend(v31, "isEqual:", v22, v20);
    unsigned int v40 = v39;
    BOOL v44 = (self->_highlightedCharacterRange.location != (void)valuePtr
        || self->_highlightedCharacterRange.length != *((void *)&valuePtr + 1))
       && (void)valuePtr != 0x7FFFFFFFLL
       || v37 != 0;
    if ((v39 & 1) != 0 || v44)
    {
      if (((v39 | !v44) & 1) == 0)
      {
        [(VOTElementManager *)self _setCurrentElement:v31];
        [v31 scrollToElementForDirectional:sub_10005273C(a4) withCompletion:0];
      }
    }
    else
    {
      [(VOTElementManager *)self _echoDifferentElement:v31 forEvent:0];
      self->_flags.focusIsOnElement = 1;
      uint64_t v45 = sub_10005273C(a4);
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472;
      v55[2] = sub_100084214;
      v55[3] = &unk_1001B3448;
      void v55[4] = self;
      id v56 = v31;
      [v56 scrollToElementForDirectional:v45 withCompletion:v55];
    }
    if (v44)
    {
      self->_performedTextSelectionOperation = CFAbsoluteTimeGetCurrent();
      if ((void)valuePtr == 0x7FFFFFFFLL)
      {
        double v20 = v51;
        if (v37)
        {
          __int16 v48 = [(__AXValue *)v37 firstObject];
          [v31 setSelectionToTextMarker:v48];

          id v49 = [v31 customPublicRotorName:v53];
          if ((id)+[VOTRotor rotorTypeForSystemRotorType:v49] == (id)74) {
            [v31 increaseWebSelection:2];
          }
          goto LABEL_67;
        }
      }
      else
      {
        [(VOTElementManager *)self _moveFocusToUpdatedRange:valuePtr element:v31 searchType:0];
        double v20 = v51;
      }
    }
    else
    {
      self->_performedTextSelectionOperation = -3061152000.0;
      double v20 = v51;
      if (v40)
      {
        if (*(_OWORD *)&self->_highlightedCharacterRange != valuePtr)
        {
          id v49 = +[VOTOutputManager outputManager];
          CGRect v50 = +[VOSOutputEvent BoundaryEncountered];
          [v49 sendEvent:v50];

LABEL_67:
          goto LABEL_68;
        }
        -[VOTElementManager _moveFocusToUpdatedRange:element:searchType:](self, "_moveFocusToUpdatedRange:element:searchType:");
      }
    }
LABEL_68:
    [(VOTElementManager *)self _resetOtherTapInputModes];
    self->_flags.shouldUpdateRotorForElement = 0;
    self->_flags.BOOL preventCustomRotorItemIndexReset = preventCustomRotorItemIndexReset;
    goto LABEL_69;
  }
  double v23 = +[VOTOutputManager outputManager];
  double v24 = +[VOSOutputEvent BoundaryEncountered];
  [v23 sendEvent:v24];

LABEL_70:
}

- (void)_moveFocusToUpdatedRange:(_NSRange)a3 element:(id)a4 searchType:(int64_t)a5
{
  NSUInteger length = a3.length;
  id location = (id)a3.location;
  id v41 = a4;
  if ([v41 isReadingContent] && objc_msgSend(v41, "supportsFrameForRange")) {
    objc_msgSend(v41, "frameForRange:", location, length);
  }
  else {
    objc_msgSend(v41, "boundsForRange:", location, length);
  }
  double v13 = v9;
  double v14 = v10;
  double v15 = v11;
  double v16 = v12;
  unsigned int v17 = +[VOTElement systemWideElement];
  objc_msgSend(v17, "convertRect:fromContextId:", objc_msgSend(v41, "windowContextId"), v13, v14, v15, v16);
  double v19 = v18;
  double v21 = v20;
  double v23 = v22;
  double v25 = v24;

  self->_lineFrame.origin.double x = v19;
  self->_lineFrame.origin.double y = v21;
  self->_lineFrame.size.CGFloat width = v23;
  self->_lineFrame.size.CGFloat height = v25;
  self->_highlightedCharacterRange.id location = (NSUInteger)location;
  self->_highlightedCharacterRange.NSUInteger length = length;
  unsigned int v26 = [v41 doesHaveTraits:kAXIsEditingTrait];
  if (v26)
  {
    id v27 = v41;
    if (a5 == 5)
    {
      double v28 = [v41 value];
      id location = [v28 wordFromPosition:location inDirection:1];
      NSUInteger length = v29;

      id v27 = v41;
    }
    -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:](self, "_setSelectedTextRange:onElement:refreshBraille:", location, length, v27, 1);
    long long v30 = +[VOTOutputManager outputManager];
    id v31 = +[VOSOutputEvent InsertionPointDidMove];
    [v30 sendEvent:v31];
  }
  v46.origin.double x = CGRectZero.origin.x;
  v46.origin.double y = CGRectZero.origin.y;
  v46.size.CGFloat width = CGRectZero.size.width;
  v46.size.CGFloat height = CGRectZero.size.height;
  v43.origin.double x = v19;
  v43.origin.double y = v21;
  v43.size.CGFloat width = v23;
  v43.size.CGFloat height = v25;
  BOOL v32 = CGRectEqualToRect(v43, v46);
  double v33 = +[VOTDisplayManager displayManager];
  uint64_t v34 = v33;
  if (v32) {
    [v33 setCursorFrameForElement:v41];
  }
  else {
    objc_msgSend(v33, "setCursorFrame:", v19, v21, v23, v25);
  }

  uint64_t v35 = [v41 value];
  if (length == 1) {
    uint64_t v36 = 1;
  }
  else {
    uint64_t v36 = 2;
  }
  -[VOTElementManager outputTextSegmentForRange:string:element:usePhonetics:segment:](self, "outputTextSegmentForRange:string:element:usePhonetics:segment:", location, length, v35, v41, length == 1, v36);

  if ([v41 isReadingContent])
  {
    self->_bookLineRange.id location = (NSUInteger)location;
    self->_bookLineRange.NSUInteger length = length;
    self->_int64_t bookCursorPosition = (int64_t)location;
    v44.origin.double x = v19;
    v44.origin.double y = v21;
    v44.size.CGFloat width = v23;
    v44.size.CGFloat height = v25;
    double MidX = CGRectGetMidX(v44);
    v45.origin.double x = v19;
    v45.origin.double y = v21;
    v45.size.CGFloat width = v23;
    v45.size.CGFloat height = v25;
    self->_int64_t bookLineNumber = (int64_t)objc_msgSend(v41, "lineNumberForPoint:", MidX, CGRectGetMidY(v45));
  }
  if (location == (id)0x7FFFFFFFFFFFFFFFLL) {
    char v38 = 1;
  }
  else {
    char v38 = v26;
  }
  if ((v38 & 1) == 0)
  {
    objc_msgSend((id)VOTSharedWorkspace, "setSuppressSelectionChangeNotificationCount:", (char *)objc_msgSend((id)VOTSharedWorkspace, "suppressSelectionChangeNotificationCount") + 1);
    -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:](self, "_setSelectedTextRange:onElement:refreshBraille:", location, 0, v41, 0);
    id v39 = [v41 selectedTextRange];
    -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", v39, v40, 0);
  }
  self->_cursorBorderHitCount = 0;
}

- (void)_handleValidatedCustomActionMovementThroughActions:(id)a3 forEvent:(id)a4 inDirection:(int64_t)a5
{
  id v8 = a3;
  id v9 = a4;
  double v10 = (char *)[v8 count];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100084730;
  v24[3] = &unk_1001B5838;
  id v23 = v9;
  id v25 = v23;
  unsigned int v26 = self;
  double v11 = objc_retainBlock(v24);
  if (a5 == 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = -1;
  }
  double v13 = v10 - 1;
  do
  {
    customActionIndedouble x = self->_customActionIndex;
    if (customActionIndex == 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v15 = (unint64_t)v13;
      if (a5 == 1)
      {
        unint64_t v15 = 0;
        self->_customActionIndedouble x = 0;
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v15 = customActionIndex + v12;
    }
    self->_customActionIndedouble x = v15;
    if ((v15 & 0x8000000000000000) != 0) {
      break;
    }
LABEL_10:
    if (v15 >= (unint64_t)[v8 count]) {
      break;
    }
    double v16 = [v8 objectAtIndexedSubscript:self->_customActionIndex];
    int v17 = ((uint64_t (*)(void *, void *))v11[2])(v11, v16);
  }
  while (!v17);
  customActionIdentifier = self->_customActionIdentifier;
  self->_customActionIdentifier = 0;

  unint64_t v19 = self->_customActionIndex;
  if ((v19 & 0x8000000000000000) != 0 || v19 >= (unint64_t)[v8 count])
  {
    self->_customActionIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    double v20 = [v8 objectAtIndexedSubscript:self->_customActionIndex];
    double v21 = [v20 identifier];
    double v22 = self->_customActionIdentifier;
    self->_customActionIdentifier = v21;
  }
}

- (id)_customActionsAddingDragCancelActionIfNecessaryForActions:(id)a3
{
  id v4 = a3;
  if ([(AXDragManager *)self->_dragManager isDragActive])
  {
    unsigned int v5 = [v4 firstObject];
    unint64_t v6 = [v5 actions];
    double v7 = objc_opt_new();
    [v6 addObject:v7];
  }

  return v4;
}

- (id)_currentCachedCustomActionCategories
{
  id v3 = [(VOTElement *)self->_currentElement cachedCustomRotorActions];
  id v4 = +[VOTElement organizedActionsByCategory:v3];
  unsigned int v5 = [(VOTElementManager *)self _customActionsAddingDragCancelActionIfNecessaryForActions:v4];

  return v5;
}

- (id)_currentCustomActions
{
  id v3 = [(VOTElementManager *)self elementRotor];
  id v4 = [v3 customActionIndex];
  unsigned int v5 = [(VOTElementManager *)self _currentCustomActionCategory];
  id v6 = [v5 count];

  if (v4 >= v6)
  {
    double v10 = 0;
  }
  else
  {
    double v7 = [(VOTElementManager *)self _currentCustomActionCategory];
    id v8 = [(VOTElementManager *)self elementRotor];
    id v9 = objc_msgSend(v7, "objectAtIndexedSubscript:", objc_msgSend(v8, "customActionIndex"));
    double v10 = [v9 actions];
  }

  return v10;
}

- (id)_currentCustomActionCategory
{
  id v3 = [(VOTElement *)self->_currentElement customRotorActions];
  id v4 = +[VOTElement organizedActionsByCategory:v3];
  unsigned int v5 = [(VOTElementManager *)self _customActionsAddingDragCancelActionIfNecessaryForActions:v4];

  return v5;
}

- (void)_handleCustomRotorContent:(id)a3 direction:(int64_t)a4
{
  id v6 = [(VOTElement *)self->_currentElement customContent];
  if (![v6 count]) {
    goto LABEL_21;
  }
  double v7 = [(id)VOTSharedWorkspace selectedLanguage];
  customContentIndedouble x = (unsigned char *)self->_customContentIndex;
  if (customContentIndex)
  {
    if (a4 == 2 && customContentIndex == (unsigned char *)0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_5;
    }
LABEL_7:
    if (customContentIndex == (char *)[v6 count] - 1)
    {
      if (a4 != 1)
      {
        id v9 = (char *)[v6 count] - 1;
        goto LABEL_15;
      }
    }
    else if (a4 != 1 || self->_customContentIndex != 0x7FFFFFFFFFFFFFFFLL)
    {
      id v9 = (char *)[v6 count] - 1;
      if (a4 == 1)
      {
        uint64_t v10 = 1;
        goto LABEL_16;
      }
LABEL_15:
      uint64_t v10 = -1;
LABEL_16:
      double v11 = (char *)(self->_customContentIndex + v10);
      if (v9 >= v11) {
        id v9 = v11;
      }
      goto LABEL_18;
    }
    id v9 = 0;
    goto LABEL_18;
  }
  if (a4 != 2) {
    goto LABEL_7;
  }
LABEL_5:
  id v9 = (char *)[v6 count] - 1;
LABEL_18:
  self->_customContentIndedouble x = (int64_t)v9;
  uint64_t v12 = VOTLogAudio();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int64_t v13 = self->_customContentIndex;
    v24[0] = 67109120;
    v24[1] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Content: %d", (uint8_t *)v24, 8u);
  }

  double v14 = [v6 objectAtIndexedSubscript:self->_customContentIndex];
  id v15 = +[VOTOutputRequest createRequest];
  id v16 = objc_alloc((Class)AXAttributedString);
  int v17 = [v14 attributedValue];
  id v18 = [v16 initWithStringOrAttributedString:v17];
  id v19 = [v15 addAttributedString:v18 withLanguage:v7];

  id v20 = objc_alloc((Class)AXAttributedString);
  double v21 = [v14 attributedLabel];
  id v22 = [v20 initWithStringOrAttributedString:v21];
  id v23 = [v15 addAttributedString:v22 withLanguage:v7];

  [v15 setGeneratesBraille:1];
  [v15 setBrailleType:1];
  [(VOTElementManager *)self sendRequest:v15];
  [(VOTElementManager *)self _resetOtherTapInputModes];

LABEL_21:
}

- (id)_customActionDefaultActionString
{
  id v3 = [(id)VOTSharedWorkspace selectedLanguage];
  if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXWebInteractiveVideoTrait])
  {
    id v4 = [(VOTElement *)self->_currentElement uiElement];
    [v4 updateCache:2179];

    unsigned int v5 = [(VOTElement *)self->_currentElement uiElement];
    LODWORD(v4) = [v5 BOOLWithAXAttribute:2179];

    id v6 = off_1001EA9E8;
    if (v4) {
      double v7 = @"web.interactive.video.pause.action";
    }
    else {
      double v7 = @"web.interactive.video.play.action";
    }
  }
  else
  {
    id v6 = off_1001EA9E8;
    double v7 = @"activate.action";
  }
  id v8 = sub_100051D04(v6, v7, 0, v3);

  return v8;
}

- (void)_handleCustomRotorAction:(id)a3 direction:(int64_t)a4
{
  id v5 = a3;
  id v15 = [(VOTElementManager *)self _currentCustomActions];
  -[VOTElementManager _handleValidatedCustomActionMovementThroughActions:forEvent:inDirection:](self, "_handleValidatedCustomActionMovementThroughActions:forEvent:inDirection:");

  id v6 = [(id)VOTSharedWorkspace selectedLanguage];
  if (self->_customActionIndex != 0x7FFFFFFFFFFFFFFFLL)
  {
    id v8 = objc_msgSend(v15, "objectAtIndex:");
    [v8 prepareWithContext:self];
    double v7 = [v8 name];
    if (!v6)
    {
      id v6 = [v8 language];
    }
LABEL_9:

    goto LABEL_11;
  }
  if ([v15 count])
  {
    if (self->_flags.itemChooserVisible && [(VOTElement *)self->_currentElement isInTableCell])
    {
      double v7 = sub_100051D04(off_1001EA9E8, @"item.chooser.default.action", 0, v6);
      goto LABEL_11;
    }
    id v8 = [(VOTElementManager *)self _customActionDefaultActionString];
    id v9 = sub_100051D04(off_1001EA9E8, @"default.action.suffix", 0, v6);
    double v7 = +[AXAttributedString axAttributedStringWithString:v8];
    uint64_t v10 = +[AXAttributedString axAttributedStringWithString:v9];
    [v10 setAttribute:&__kCFBooleanTrue forKey:UIAccessibilityTokenLowPitch];
    [v7 appendAXAttributedString:v10];

    goto LABEL_9;
  }
  double v7 = 0;
LABEL_11:
  [(VOTElementManager *)self _resetOtherTapInputModes];
  double v11 = objc_opt_new();
  id v12 = [v11 addString:v7 withLanguage:v6];
  [v11 setBrailleType:1];
  [v11 setGeneratesBraille:1];
  int64_t v13 = [v11 outputActions];
  double v14 = [v13 lastObject];
  [v14 setObject:&__kCFBooleanTrue forVariant:76];

  [v11 send];
}

- (id)availableAudiographActionsForElement:(id)a3
{
  id v3 = a3;
  id v4 = +[NSMutableArray array];
  if (AXDeviceSupportsSonification())
  {
    id v5 = off_1001EA9E8;
    id v6 = [v3 language];
    double v7 = sub_100051804(v5, @"search.rotor.audiograph.describe.chart", v6);
    [v4 addObject:v7];

    if ([v3 supportsAudiographs])
    {
      id v8 = off_1001EA9E8;
      uint64_t v9 = [v3 language];
      uint64_t v10 = sub_100051804(v8, @"search.rotor.audiograph.play.sonification", (void *)v9);
      [v4 addObject:v10];

      double v11 = +[AXSpringBoardServer server];
      LOBYTE(v9) = [v11 isShowingRemoteView:5];

      if ((v9 & 1) == 0)
      {
        id v12 = off_1001EA9E8;
        int64_t v13 = [v3 language];
        double v14 = sub_100051804(v12, @"search.rotor.audiograph.chart.details", v13);
        [v4 addObject:v14];
      }
    }
  }
  id v15 = [v4 copy];

  return v15;
}

- (void)_handleAudiographAction:(int64_t)a3 event:(id)a4
{
  if (AXDeviceSupportsSonification())
  {
    id v15 = [(VOTElementManager *)self availableAudiographActionsForElement:self->_currentElement];
    if ([v15 count])
    {
      unint64_t v6 = (unint64_t)[v15 count];
      double v7 = self->_audiographActionIdentifier;
      id v8 = [v15 indexOfObject:v7];
      if (v8 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        unint64_t v9 = 0;
      }
      else
      {
        if (a3 == 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = -1;
        }
        unint64_t v9 = ((unint64_t)v8 + v6 + v10) % v6;
      }
      double v11 = [v15 objectAtIndexedSubscript:v9];
      audiographActionIdentifier = self->_audiographActionIdentifier;
      self->_audiographActionIdentifier = v11;

      [(VOTElementManager *)self _resetOtherTapInputModes];
      int64_t v13 = [(id)VOTSharedWorkspace selectedLanguage];
      id v14 = sub_10000ABF8(self->_audiographActionIdentifier, 0, v13);
    }
  }
}

- (void)_handleToggleLiveRegionCommand:(id)a3
{
}

- (void)_handleToggleLiveRegions:(int64_t)a3
{
  id v4 = [(VOTElementManager *)self _appInfoForCurrentElement];
  unint64_t v6 = v5;
  id v7 = v4;
  id v8 = v6;
  unint64_t v9 = [(VOTElement *)self->_currentElement webAreaURL];
  uint64_t v10 = [v9 host];

  double v11 = VOTLogCommon();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138478083;
    id v28 = v4;
    __int16 v29 = 2113;
    long long v30 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Toggling live region for: %{private}@ %{private}@", buf, 0x16u);
  }

  id v12 = v8;
  int64_t v13 = v7;
  if ([v10 length])
  {
    id v14 = v10;

    id v12 = v14;
    int64_t v13 = v12;
  }
  id v15 = +[AXSettings sharedInstance];
  id v16 = [v15 liveRegionStatusForWebOrApp:v13];

  int v17 = &__kCFBooleanFalse;
  if (v16 && ![v16 BOOLValue]) {
    int v17 = &__kCFBooleanTrue;
  }

  id v18 = off_1001EA9E8;
  unsigned int v19 = [v17 BOOLValue];
  id v20 = [(id)VOTSharedWorkspace selectedLanguage];
  if (v19) {
    double v21 = @"search.rotor.toggle.live.regions.on";
  }
  else {
    double v21 = @"search.rotor.toggle.live.regions.off";
  }
  id v22 = sub_100051D04(v18, v21, 0, v20);

  id v23 = AXCFormattedString();
  double v24 = objc_msgSend((id)VOTSharedWorkspace, "selectedLanguage", v12);
  id v25 = sub_10000ABF8(v23, 0, v24);

  unsigned int v26 = +[AXSettings sharedInstance];
  [v26 setLiveRegionStatusForWebOrApp:v13 status:v17];
}

- (void)_handleAutomaticAppAccessibilityToggle:(id)a3
{
}

- (void)_handleMLElementModeWithDirection:(int64_t)a3 verboseOutput:(BOOL)a4
{
  BOOL v4 = a4;
  id v7 = [(VOTElementManager *)self _appInfoForCurrentElement];
  id v26 = v8;
  if (j__VOSProcessAllowsScreenRecognition())
  {
    unint64_t v9 = +[AXSettings sharedInstance];
    uint64_t v10 = (uint64_t)[v9 automaticAccessibilityModeForBundleIdentifier:v7];

    if (v10 >= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    if (a3 == 1)
    {
      if (v10 > 0)
      {
LABEL_13:
        id v12 = off_1001EA9E8;
        [(id)VOTSharedWorkspace selectedLanguage];
        if (v4) {
          int64_t v13 = {;
        }
          id v14 = sub_100051D04(v12, @"search.rotor.neural.vision.off", 0, v13);

          id v25 = v26;
          AXCFormattedString();
        }
        else {
          id v14 = {;
        }
          sub_100051D04(v12, @"element.off.text", 0, v14);
        id v18 = };

        if (![(VOTElement *)self->_currentElement isInAppSwitcher])
        {
          unsigned int v19 = +[VOTDisplayManager displayManager];
          [v19 setElementFrames:&__NSArray0__struct];

          id v20 = +[VOTDisplayManager displayManager];
          [v20 setCursorFrameForElement:0];

          [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer dispatchAfterDelay:1.0];
        }
        uint64_t v11 = 0;
        goto LABEL_24;
      }
      ++v11;
    }
    else if (a3 == 2)
    {
      if (!v11) {
        goto LABEL_15;
      }
      --v11;
    }
    if (v11 != 1)
    {
      if (!v11) {
        goto LABEL_13;
      }
      id v18 = 0;
LABEL_24:
      double v21 = +[AXSettings sharedInstance];
      [v21 setAutomaticAccessibilityMode:v11 forBundleIdentifier:v7];

      AXSetProcessWantsMLElementForBundle();
      id v22 = +[AXSettings sharedInstance];
      [v22 setAutomaticAccessibilityMode:v11 forBundleIdentifier:v7];

      id v23 = [(id)VOTSharedWorkspace selectedLanguage];
      id v24 = sub_10000ABF8(v18, 0, v23);

      goto LABEL_25;
    }
LABEL_15:
    id v15 = off_1001EA9E8;
    [(id)VOTSharedWorkspace selectedLanguage];
    if (v4) {
      id v16 = {;
    }
      int v17 = sub_100051D04(v15, @"search.rotor.neural.vision.on", 0, v16);

      id v25 = v26;
      AXCFormattedString();
    }
    else {
      int v17 = {;
    }
      sub_100051D04(v15, @"element.on.text", 0, v17);
    id v18 = };

    uint64_t v11 = 1;
    goto LABEL_24;
  }
LABEL_25:
}

- ($D3A4C128BFADF90F63068A1E85A19F01)_appInfoForCurrentElement
{
  if (![(VOTElement *)self->_currentElement isInStatusBar]
    || ([(NSArray *)self->_currentApplications firstObject],
        (id v3 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    id v3 = [(VOTElement *)self->_currentElement application];
    if (!v3)
    {
      id v3 = [(NSArray *)self->_currentApplications firstObject];
    }
  }
  BOOL v4 = [v3 bundleIdentifier];
  id v5 = [v3 label];
  if ([(VOTElement *)self->_currentElement isInAppSwitcher])
  {
    uint64_t v6 = [(VOTElement *)self->_currentElement bundleIdentifier];

    uint64_t v7 = [(VOTElement *)self->_currentElement label];

    BOOL v4 = (void *)v6;
    id v5 = (void *)v7;
  }

  id v8 = v4;
  unint64_t v9 = v5;
  result.int64_t var1 = v9;
  result.int64_t var0 = v8;
  return result;
}

- (void)_handleNavigationStyleMovement:(id)a3 direction:(int64_t)a4
{
  objc_msgSend((id)VOTSharedWorkspace, "selectedLanguage", a3, a4);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = +[AXSettings sharedInstance];
  id v6 = [v5 voiceOverNavigationStyle];

  uint64_t v7 = +[AXSettings sharedInstance];
  id v8 = v7;
  BOOL v9 = v6 != (id)1;
  if (v6 == (id)1) {
    uint64_t v10 = @"NAVIGATION_STYLE_FLAT";
  }
  else {
    uint64_t v10 = @"NAVIGATION_STYLE_GROUPS";
  }
  [v7 setVoiceOverNavigationStyle:v9];

  uint64_t v11 = sub_100051D04(off_1001EA9E8, v10, 0, v13);
  id v12 = sub_10000ABF8(v11, 0, v13);
  [(VOTElementFetcher *)self->_fetchManager forceUpdate];
}

- (void)_handleDetectionModeMovement:(id)a3 direction:(int64_t)a4
{
  id v5 = objc_msgSend((id)VOTSharedWorkspace, "currentRotorDetectionMode", a3);
  id v6 = +[AXSettings sharedInstance];
  double v33 = [v6 voiceOverDetectionModeItems];

  if ([v33 count])
  {
    if ([v33 count])
    {
      uint64_t v7 = 0;
      while (1)
      {
        id v8 = [v33 objectAtIndexedSubscript:v7];
        BOOL v9 = [v8 valueForKey:@"Detector"];
        uint64_t v10 = [v9 stringValue];
        int v11 = AXDetectionModeForName();

        if (v11 == v5) {
          break;
        }
        if ((unint64_t)[v33 count] <= ++v7) {
          goto LABEL_6;
        }
      }
      uint64_t v7 = v7;
    }
    else
    {
LABEL_6:
      uint64_t v7 = 0;
    }
    if (a4 == 1)
    {
      id v16 = v33;
      while ((unint64_t)[v16 count] > ++v7)
      {
        id v18 = [v33 objectAtIndexedSubscript:v7];
        unsigned int v19 = [v18 valueForKey:@"Enabled"];
        unsigned int v20 = [v19 BOOLValue];

        id v16 = v33;
        if (v20)
        {
          uint64_t v17 = v7;
          goto LABEL_19;
        }
      }
      id v16 = v33;
      uint64_t v17 = 0;
LABEL_19:
      double v21 = [v16 objectAtIndexedSubscript:v17];
    }
    else
    {
      if (a4 != 2)
      {
LABEL_21:
        [(id)VOTSharedWorkspace setCurrentRotorDetectionMode:v5];
        id v25 = AXLocalizedNameForDetectionMode();
        id v26 = +[AXSettings sharedInstance];
        id v27 = [v26 enabledLiveRecognitionModes];
        id v28 = +[NSNumber numberWithUnsignedInt:v5];
        id v29 = [v27 containsObject:v28];
        long long v30 = sub_100085D4C((uint64_t)v29, (int)v29);
        id v31 = +[NSString stringWithFormat:@"%@, %@", v25, v30];

        id v32 = sub_10000ABF8(v31, 0, 0);
        goto LABEL_22;
      }
      while (v7-- >= 1)
      {
        id v13 = [v33 objectAtIndexedSubscript:v7];
        id v14 = [v13 valueForKey:@"Enabled"];
        unsigned int v15 = [v14 BOOLValue];

        if (v15)
        {
          id v16 = v33;
          uint64_t v17 = v7;
          goto LABEL_19;
        }
      }
      double v21 = [v33 lastObject];
    }
    id v22 = v21;
    id v23 = [v21 valueForKey:@"Detector"];
    id v24 = [v23 stringValue];
    id v5 = (id)AXDetectionModeForName();

    goto LABEL_21;
  }
LABEL_22:

  _objc_release_x1();
}

- (void)_handleImageDescriptionsToggle:(int64_t)a3
{
  id v3 = [(VOTElementManager *)self _appInfoForCurrentElement];
  id v18 = v4;
  id v5 = +[AXSettings sharedInstance];
  id v6 = [v5 imageCaptioningDisabledApps];
  id v7 = [v6 mutableCopy];

  if (!v7)
  {
    id v7 = +[NSMutableSet set];
  }
  if ([v7 containsObject:v3])
  {
    [v7 removeObject:v3];
    id v8 = off_1001EA9E8;
    BOOL v9 = [(id)VOTSharedWorkspace selectedLanguage];
    sub_100051D04(v8, @"image.descriptions.on.for.app", 0, v9);
  }
  else
  {
    [v7 addObject:v3];
    uint64_t v10 = off_1001EA9E8;
    BOOL v9 = [(id)VOTSharedWorkspace selectedLanguage];
    sub_100051D04(v10, @"image.descriptions.off.for.app", 0, v9);
  int v11 = };

  id v12 = [v7 allObjects];
  id v13 = +[AXSettings sharedInstance];
  [v13 setImageCaptioningDisabledApps:v12];

  id v14 = [(id)VOTSharedWorkspace visionEngine];
  [v14 purgeCache];

  unsigned int v15 = AXCFormattedString();
  id v16 = objc_msgSend((id)VOTSharedWorkspace, "selectedLanguage", v18);
  id v17 = sub_10000ABF8(v15, 0, v16);
}

- (void)_handleIntraContainerMovement:(id)a3
{
  id v11 = a3;
  BOOL v4 = [v11 command];
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandContainerTop];

  id v6 = [(VOTElement *)self->_currentElement touchContainer];
  id v7 = v6;
  if (v5) {
    [v6 firstContainedElement];
  }
  else {
  id v8 = [v6 lastContainedElement];
  }
  if (v8)
  {
    [(VOTElementManager *)self _echoDifferentElement:v8 forEvent:v11];
  }
  else
  {
    BOOL v9 = +[VOTOutputManager outputManager];
    uint64_t v10 = +[VOSOutputEvent BoundaryEncountered];
    [v9 sendEvent:v10];
  }
}

- (void)_handleContainerMovement:(id)a3
{
  id v6 = a3;
  BOOL v4 = [v6 command];
  if ([v4 isEqualToString:kVOTEventCommandNextContainer]) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = 2;
  }

  [(VOTElementManager *)self _handleContainerMovement:v6 direction:v5];
}

- (void)_handleGuideElementMovement:(id)a3 direction:(int64_t)a4
{
  id v6 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v7 = [(VOTElementManager *)self _currentElement];
  id v8 = v7;
  if (a4 == 1) {
    [v7 nextGuideElement];
  }
  else {
  BOOL v9 = [v7 previousGuideElement];
  }
  if (![v9 isAccessibleElement])
  {
    id v13 = [v9 accessibleDescendants];
    id v10 = [v13 firstObject];

    if (v10) {
      goto LABEL_9;
    }
LABEL_11:
    id v14 = +[VOTOutputManager outputManager];
    unsigned int v15 = +[VOSOutputEvent BoundaryEncountered];
    [v14 sendEvent:v15];

    goto LABEL_12;
  }
  id v10 = v9;
  if (!v10) {
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v11 = sub_10005273C(a4);
  id v16 = _NSConcreteStackBlock;
  uint64_t v17 = 3221225472;
  id v18 = sub_100086348;
  unsigned int v19 = &unk_1001B3448;
  unsigned int v20 = self;
  id v12 = v10;
  id v21 = v12;
  [v12 scrollToElementForDirectional:v11 withCompletion:&v16];
  objc_msgSend(v6, "setIsGuideElementMovementEvent:", 1, v16, v17, v18, v19, v20);
  [(VOTElementManager *)self _echoDifferentElement:v12 forEvent:v6];
  [(VOTElementFetcher *)self->_fetchManager updateCacheWithElement:v12];

LABEL_12:
}

- (void)_handleContainerMovement:(id)a3 direction:(int64_t)a4
{
  id v6 = a3;
  id v7 = [(VOTElementManager *)self _currentElement];
  id v8 = v7;
  if (a4 == 1)
  {
    BOOL v9 = [v7 nextContainer];
    id v10 = 0;
  }
  else
  {
    uint64_t v11 = [v7 touchContainer];
    id v12 = [v11 firstContainedElement];
    id v13 = v12;
    if (v11 && ![v12 isEqual:v8])
    {
      id v10 = v13;
      BOOL v9 = 0;
    }
    else
    {
      BOOL v9 = [v8 previousContainer];
      id v10 = 0;
    }
  }
  if ([v9 isTouchContainer])
  {
    id v14 = [v9 firstContainedElement];
  }
  else
  {
    id v14 = v9;
  }
  id v16 = v14;
  BOOL v17 = v14 == 0;
  if (v14 || !v9)
  {
    id v18 = v9;
  }
  else
  {
    *(void *)&long long v15 = 138412546;
    long long v25 = v15;
    do
    {
      if (a4 == 1) {
        [v9 nextContainer];
      }
      else {
      id v18 = [v9 previousContainer];
      }

      id v16 = [v18 firstContainedElement];
      unsigned int v19 = VOTLogElement();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = v25;
        double v33 = v18;
        __int16 v34 = 2112;
        uint64_t v35 = v16;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "found empty container, trying next container: %@, with found element: %@", buf, 0x16u);
      }

      BOOL v17 = v16 == 0;
      if (v16) {
        break;
      }
      BOOL v9 = v18;
    }
    while (v18);
  }
  if (!v17 && ([v16 isEqual:v8] & 1) == 0)
  {
    id v23 = v16;

    uint64_t v24 = [v23 firstVisibleElementInList];
    if (v24)
    {
      id v10 = (id)v24;

      goto LABEL_30;
    }
    id v10 = v23;
LABEL_26:
    uint64_t v20 = sub_10005273C(a4);
    id v26 = _NSConcreteStackBlock;
    uint64_t v27 = 3221225472;
    id v28 = sub_1000866A8;
    id v29 = &unk_1001B3448;
    long long v30 = self;
    id v10 = v10;
    id v31 = v10;
    [v10 scrollToElementForDirectional:v20 withCompletion:&v26];

LABEL_30:
    -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v10, v6, v25, v26, v27, v28, v29, v30);
    [(VOTElementFetcher *)self->_fetchManager updateCacheWithElement:v10];
    goto LABEL_31;
  }
  if (v10) {
    goto LABEL_26;
  }
  id v21 = +[VOTOutputManager outputManager];
  id v22 = +[VOSOutputEvent BoundaryEncountered];
  [v21 sendEvent:v22];

LABEL_31:
}

- (void)_handleElementMoveToStatusBar:(id)a3
{
  id v4 = a3;
  uint64_t v5 = kAXStatusBarElementTrait;
  if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXStatusBarElementTrait])
  {
    id v6 = self->_elementBeforeStatusBarMovement;
    if (![(VOTElement *)v6 isValid])
    {
      id v7 = +[VOTElement systemAppApplication];
      id v8 = [v7 focusedApplications];
      BOOL v9 = [v8 firstObject];
      uint64_t v10 = [v9 firstElementInApplication];

      id v6 = (VOTElement *)v10;
    }
    elementBeforeStatusBarMovement = self->_elementBeforeStatusBarMovement;
    self->_elementBeforeStatusBarMovement = 0;

    [(VOTElementManager *)self _echoDifferentElement:v6 forEvent:v4];
  }
  else
  {
    objc_storeStrong((id *)&self->_elementBeforeStatusBarMovement, self->_currentElement);
    id v12 = +[VOTElement systemAppApplication];
    id v6 = [v12 firstElementInStatusBar];

    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v13 = +[VOTElement systemAppApplication];
    id v14 = [v13 statusBarElements];

    long long v15 = (VOTElement *)[v14 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v15)
    {
      long long v30 = v6;
      id v31 = v4;
      uint64_t v16 = *(void *)v33;
      while (2)
      {
        for (uint64_t i = 0; i != v15; uint64_t i = (VOTElement *)((char *)i + 1))
        {
          if (*(void *)v33 != v16) {
            objc_enumerationMutation(v14);
          }
          id v18 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          if (objc_msgSend(v18, "doesHaveTraits:", v5, v30, v31))
          {
            unsigned int v19 = [v18 roleDescription];
            uint64_t v20 = [(VOTElement *)self->_currentElement windowSceneIdentifier];
            unsigned int v21 = [v19 isEqualToString:v20];

            if (v21)
            {
              long long v15 = v18;
              goto LABEL_16;
            }
          }
        }
        long long v15 = (VOTElement *)[v14 countByEnumeratingWithState:&v32 objects:v36 count:16];
        if (v15) {
          continue;
        }
        break;
      }
LABEL_16:
      id v6 = v30;
      id v4 = v31;
    }

    id v22 = [(VOTElement *)v6 window];
    id v23 = [(VOTElement *)v15 window];
    unsigned int v24 = [v22 isEqual:v23];

    if (v15) {
      int v25 = v24;
    }
    else {
      int v25 = 1;
    }
    if (v25) {
      id v26 = v6;
    }
    else {
      id v26 = v15;
    }
    uint64_t v27 = v26;
    if ([(VOTElement *)v27 doesHaveTraits:v5])
    {
      [(VOTElementManager *)self _echoDifferentElement:v27 forEvent:v4];
    }
    else
    {
      id v28 = +[VOTOutputManager outputManager];
      id v29 = +[VOSOutputEvent NoItemExists];
      [v28 sendEvent:v29];
    }
  }
}

- (void)_dismissAlternativeKeyboardKeys
{
  [(VOTElement *)self->_currentElement dismissAlternativeKeyboardPicker];
  self->_keyboardAlternativesVisible = 0;
  CGPoint v3 = CGPointZero;
  self->_keyboardAlternativeVisibleTrackingPoint = CGPointZero;
  self->_keyboardAlternativeVisibleStartPoint = v3;
  [(id)VOTSharedWorkspace cancelTapAndHoldMode];
  id v4 = +[VOTElement systemWideElement];
  [v4 sendTouchCancelledEvent];

  uint64_t v5 = [(VOTElement *)self->_currentElement application];
  id v8 = [v5 currentSoftwareKeyboardLayout];

  if ((sub_100052C88(v8) & 1) == 0)
  {
    id v6 = +[VOTOutputManager outputManager];
    id v7 = +[VOSOutputEvent PopoverDidAppear];
    [v6 sendEvent:v7];
  }
}

- (void)_activateAlternativeKeyboardKey:(id)a3
{
  if (self->_flags.shouldTriggerAlternativeKeyActivation)
  {
    id v4 = [(VOTElement *)self->_currentElement application];
    uint64_t v5 = [v4 activeKeyboard];
    unsigned int v6 = [v5 isKeyboardContinuousPathAvailable];

    if (v6)
    {
      id v7 = +[AXHapticFeedbackManager sharedManager];
      [v7 playHapticFeedbackForType:17];
    }
    self->_flags.shouldTriggerAlternativeKeyActivation = 0;
    BOOL continuousPathActivationDesired = self->_flags.continuousPathActivationDesired;
    BOOL v9 = VOTLogCommon();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10[0] = 67109120;
      v10[1] = !continuousPathActivationDesired;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Starting alternative keyboard key: play sound: %d", (uint8_t *)v10, 8u);
    }

    [(id)VOTSharedWorkspace startTapAndHoldMode:!continuousPathActivationDesired];
    self->_flags.BOOL continuousPathActivationDesired = 0;
  }
}

- (void)_resetQuickNavState
{
  id v6 = +[VOTKeyboardManager keyboardManager];
  if ([v6 isQuickNavOn])
  {
  }
  else
  {
    CGPoint v3 = +[VOTConfiguration rootConfiguration];
    id v4 = [v3 preferenceForKey:@"VOTQuickNavEnabled"];
    unsigned int v5 = [v4 BOOLValue];

    if (v5 && CFAbsoluteTimeGetCurrent() - self->_lastTemporaryQuickNavDisableTime > 0.5)
    {
      [(id)VOTSharedWorkspace temporarilyChangeQuickNavState:1];
      [(VOTElementManager *)self _handleQuickNavFeedback:1];
    }
  }
}

- (void)_updateExternalAccessory:(id)a3
{
  id v3 = a3;
  id v4 = +[VOTExternalAccessoryManager accessoryManager];
  [v4 updateCurrentItemProperties:v3];
}

- (BOOL)_languageRotorItemsContainLanguage:(id)a3
{
  id v3 = a3;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = objc_msgSend((id)VOTSharedWorkspace, "languageRotorItems", 0);
  id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        BOOL v9 = [*(id *)(*((void *)&v15 + 1) + 8 * i) objectForKeyedSubscript:@"RotorItem"];
        if ([v9 isEqualToString:v3])
        {

LABEL_13:
          BOOL v13 = 1;
          goto LABEL_14;
        }
        uint64_t v10 = AXLanguageConvertToCanonicalForm();
        uint64_t v11 = AXLanguageConvertToCanonicalForm();
        unsigned __int8 v12 = [v10 isEqualToString:v11];

        if (v12) {
          goto LABEL_13;
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      BOOL v13 = 0;
      if (v6) {
        continue;
      }
      break;
    }
  }
  else
  {
    BOOL v13 = 0;
  }
LABEL_14:

  return v13;
}

- (void)_updateMostRecentElementCommunity
{
  id v3 = [(VOTElementManager *)self _elementCommunityForElement:self->_currentElement];
  [(VOTElementManager *)self _updateWithMostRecentElementCommunity:v3];
}

- (BOOL)_updateWithMostRecentElementCommunity:(id)a3
{
  id v4 = a3;
  if (v4
    && ([(VOTElementManager *)self mostRecentElementCommunity],
        id v5 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v6 = [v5 isEqual:v4],
        v5,
        (v6 & 1) == 0))
  {
    [(VOTElementManager *)self setMostRecentElementCommunity:v4];
    [(VOTElementManager *)self _updateMLElementAutorefresh];
    BOOL v7 = 1;
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

- (BOOL)_isElementValidForFirstResponder:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (self->_firstResponderElement)
  {
    if (objc_msgSend(v4, "isEqual:"))
    {
      unsigned __int8 v6 = 1;
    }
    else
    {
      BOOL v7 = [v5 textInputElement];
      unsigned __int8 v6 = [v7 isEqual:self->_firstResponderElement];
    }
  }
  else
  {
    unsigned __int8 v6 = 0;
  }

  return v6;
}

- (BOOL)_setCurrentElement:(id)a3
{
  return [(VOTElementManager *)self _setCurrentElement:a3 isProtectedApp:0];
}

- (BOOL)_setCurrentElement:(id)a3 shouldSetBrailleElement:(id)a4
{
  id v6 = a3;
  LOBYTE(a4) = -[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:shouldSetBrailleElement:](self, "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:shouldSetBrailleElement:", v6, 0, 1, 1, 0, [a4 BOOLValue]);

  return (char)a4;
}

- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4
{
  return [(VOTElementManager *)self _setCurrentElement:a3 isProtectedApp:a4 shouldResetTextSelection:1 shouldResetCharacterRange:1 ignoreIsAccessibilityElementCheck:0];
}

- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4 shouldResetTextSelection:(BOOL)a5 shouldResetCharacterRange:(BOOL)a6 ignoreIsAccessibilityElementCheck:(BOOL)a7
{
  return [(VOTElementManager *)self _setCurrentElement:a3 isProtectedApp:a4 shouldResetTextSelection:a5 shouldResetCharacterRange:a6 ignoreIsAccessibilityElementCheck:a7 shouldSetBrailleElement:1];
}

- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4 shouldResetTextSelection:(BOOL)a5 shouldResetCharacterRange:(BOOL)a6 ignoreIsAccessibilityElementCheck:(BOOL)a7 shouldSetBrailleElement:(BOOL)a8
{
  BOOL v8 = a8;
  BOOL v9 = a7;
  BOOL v10 = a6;
  BOOL v11 = a5;
  BOOL v12 = a4;
  id v14 = a3;
  long long v15 = VOTLogElement();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
    sub_10011F234();
  }

  int IsTV = AXDeviceIsTV();
  if (v14 && IsTV && [(id)VOTSharedWorkspace tvInteractionMode] != (id)2)
  {
    id v23 = VOTLogElement();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      sub_10011F188();
    }
    goto LABEL_59;
  }
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (!v14 && v12) {
    _AXAssert();
  }
  if (AXDeviceHasJindo())
  {
    jindoAppBundleIdentifiers = self->_jindoAppBundleIdentifiers;
    long long v18 = [v14 bundleIdentifier];
    if ([(NSArray *)jindoAppBundleIdentifiers containsObject:v18]
      && ([v14 isInJindoWindow] & 1) == 0)
    {
      unsigned __int8 v45 = [v14 isInAppSwitcher];

      if ((v45 & 1) == 0) {
        goto LABEL_61;
      }
    }
    else
    {
    }
  }
  if ([(id)VOTSharedWorkspace brailleInputActive]
    && ([(id)VOTSharedWorkspace brailleInputAllowsElementMovement] & 1) == 0)
  {
    id v23 = VOTLogElement();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Stopping _setCurrentElement to prevent the focus from moving while we're editing text in BSI", buf, 2u);
    }
    goto LABEL_59;
  }
  if ([(id)VOTSharedWorkspace navigationStyleHonorsGroups])
  {
    unsigned int v19 = [v14 isAccessibleGroup];
    if (!v14)
    {
LABEL_23:
      if ([v14 isBannerNotification])
      {
        uint64_t v20 = VOTLogElement();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          sub_10011F030(v20);
        }
      }
      unsigned int v118 = v19;
      p_currentElement = &self->_currentElement;
      if ([v14 isEqual:self->_currentElement])
      {
        objc_storeStrong((id *)&self->_currentElement, a3);
        [(VOTElementManager *)self _updateMostRecentElementCommunity];
        [(VOTElementManager *)self _updateExternalAccessory:v14];
        if ([v14 doesHaveTraits:kAXIsEditingTrait]) {
          [(VOTElementManager *)self _updateFirstResponder];
        }
        id v22 = [(VOTElement *)*p_currentElement application];
        id v23 = [v22 bundleIdentifier];

        if (([v23 isEqualToString:@"com.apple.InputUI"] & 1) == 0)
        {
          unsigned int v24 = [(VOTElement *)self->_currentElement application];
          lastApplication = self->_lastApplication;
          self->_lastApplication = v24;
        }
        if ((AXDeviceIsAudioAccessory() & 1) == 0)
        {
          if (([v14 mediaAnalysisOptions] & 0x40000) != 0)
          {
            id v26 = +[VOTWorkspace sharedWorkspace];
            uint64_t v27 = [v26 visionEngine];
            [v27 purgeCache];
          }
          id v28 = +[VOTWorkspace sharedWorkspace];
          id v29 = [v28 visionEngine];

          if (([v29 wasCachePurged] & 1) != 0
            || ([v29 resultsForElement:*p_currentElement],
                long long v30 = objc_claimAutoreleasedReturnValue(),
                id v31 = [v30 count],
                v30,
                !v31))
          {
            long long v32 = *p_currentElement;
            if (+[VOTVisionEngine shouldAnalyzeElement:v32])
            {
              long long v33 = objc_opt_new();
              objc_msgSend(v33, "setIncludeFullImageDescriptionsForValidElements:", -[VOTElementManager determineFullImageDescriptionsEnabled:](self, "determineFullImageDescriptionsEnabled:", v32));
              objc_msgSend(v33, "setIncludeSceneDetection:", -[VOTElementManager determineSceneDetectionsEnabled:](self, "determineSceneDetectionsEnabled:", v32));
              [v29 analyzeElement:v32 withOptions:v33];
            }
          }
        }
        [(VOTElementManager *)self _updateContextDescriptors];
        [(VOTElementManager *)self _updateAnyThreadElementAccess];
        goto LABEL_59;
      }
      long long v34 = VOTLogElement();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
        sub_10011EFC8();
      }

      long long v35 = +[VOTWorkspace sharedWorkspace];
      uint64_t v36 = [v35 visionEngine];
      [v36 purgeCache];

      double v37 = [v14 application];
      char v38 = [v37 supportedLanguageIfNecessary];

      BOOL v113 = v10;
      BOOL v110 = v8;
      if ([v14 doesHaveTraits:kAXStatusBarElementTrait])
      {

        char v38 = 0;
      }
      id v39 = [(id)VOTSharedWorkspace selectedLanguage];
      uint64_t v40 = AXLanguageCanonicalFormToGeneralLanguage();

      id v41 = [(id)VOTSharedWorkspace selectedLanguage];
      uint8_t v42 = [(id)VOTSharedWorkspace systemSpokenLanguage];
      long long v115 = (void *)v40;
      if ([v41 isEqualToString:v42]
        || !v38
        || !v40
        || ([v38 hasPrefix:v40] & 1) != 0)
      {

LABEL_66:
        [(id)VOTSharedWorkspace setAdditionalLanguageRotorItem:v38];
        unsigned int v51 = [v14 doesHaveTraits:kAXKeyboardKeyTrait];
        if (([v14 isEditableTextArea] & 1) != 0 || v51) {
          [(VOTElementManager *)self _updateFirstResponder];
        }
        CGRect v52 = +[VOTCommandHelper commandHelper];
        BOOL v109 = v12;
        if ([v14 handlesGestureArea])
        {
          [v52 setHelpEnabled:1];
          [v14 gesturePracticeRegion];
          objc_msgSend(v52, "setPracticeRegion:");
          [v52 setPracticeElement:v14];
        }
        else if ([v52 helpEnabled])
        {
          [v52 setHelpEnabled:0];
        }
        unsigned int v112 = v52;
        uint64_t v53 = [v14 customRotorActions];
        id v54 = [v14 customActionGroupIdentifier];
        unsigned int v55 = [(VOTElement *)*p_currentElement customActionGroupIdentifier];
        long long v114 = (id *)p_currentElement;
        long long v117 = (void *)v53;
        id v56 = v38;
        if ([v54 isEqualToString:v55])
        {

          id v57 = a3;
        }
        else
        {
          [(VOTElement *)self->_currentElement cachedCustomRotorActions];
          id v59 = v58 = v11;
          unsigned int v60 = [(VOTElementManager *)self customRotorActionsEqual:v53 otherActions:v59 ignoreDragItems:1];

          BOOL v11 = v58;
          id v57 = a3;
          if (!v60)
          {
            unsigned int v108 = 0;
            goto LABEL_78;
          }
        }
        unsigned int v108 = [v14 retainsCustomRotorActionSetting];
LABEL_78:
        uint64_t v61 = [(VOTElementManager *)self webEditableAncestor:v14];
        id v23 = v56;
        if (!v61
          || ([(VOTElementManager *)self webEditableAncestor:self->_currentElement],
              id v62 = objc_claimAutoreleasedReturnValue(),
              unsigned __int8 v63 = [v61 isEqual:v62],
              v62,
              (v63 & 1) == 0))
        {
          [(NSMutableDictionary *)self->_lastSeenFontProperties removeAllObjects];
        }
        [(VOTElementManager *)self _setLastSeenLineAndColumn:0];
        [(VOTElement *)self->_currentElement setVoiceOverFocused:0];
        [v14 setVoiceOverFocused:1];
        if (v118 && ![(NSString *)self->_lastEventCommand isEqualToString:kVOTEventCommandMoveOut])
        {
          uint64_t v64 = +[VOTOutputManager outputManager];
          uint64_t v65 = +[VOSOutputEvent IsInteractable];
          [v64 sendEvent:v65];
        }
        unsigned int v66 = [*v114 pid];
        if (v66 != [v14 pid]) {
          objc_msgSend(v14, "setNavigationDirectionMode:", objc_msgSend((id)VOTSharedWorkspace, "navigationDirection"));
        }
        objc_storeStrong((id *)&self->_previousElement, self->_currentElement);
        objc_storeStrong(v114, v57);
        uint64_t v67 = [v14 opaqueParent];
        currentOpaqueParent = self->_currentOpaqueParent;
        self->_currentOpaqueParent = v67;

        [(VOTElementManager *)self setElementGeneration:(char *)[(VOTElementManager *)self elementGeneration] + 1];
        [(VOTElementManager *)self setLastElementChangeTime:CFAbsoluteTimeGetCurrent()];
        unsigned int v69 = VOTLogWebPageMovement();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG)) {
          sub_10011EF4C();
        }
        id obja = v61;

        id v70 = [(VOTElementManager *)self _elementCommunityForElement:v14];
        if (!v109) {
          [(VOTElementManager *)self _cacheFocusedElement:v14 forElementCommunity:v70];
        }
        uint64_t v71 = [*v114 application];
        unsigned int v72 = [v71 bundleIdentifier];

        if (([v72 isEqualToString:@"com.apple.InputUI"] & 1) == 0)
        {
          id v73 = [(VOTElement *)self->_currentElement application];
          uint64_t v74 = self->_lastApplication;
          self->_lastApplication = v73;
        }
        [(VOTDragOutputManager *)self->_dragOutputManager currentElementChanged];
        [(VOTElementManager *)self resetFrequentUpdateTextCache];
        if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXUpdatesFrequentlyTrait])
        {
          [(VOTElementManager *)self _realTimeAdjustableUpdateFrequency:self->_currentElement];
          -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_elementUpdatesFrequentlyTimer, "dispatchAfterDelay:");
          if (!v110) {
            goto LABEL_97;
          }
        }
        else
        {
          [(SCRCTargetSelectorTimer *)self->_elementUpdatesFrequentlyTimer cancel];
          if (!v110)
          {
LABEL_97:
            if (!self->_firstResponderElement
              && [*v114 doesHaveTraits:kAXIsEditingTrait])
            {
              [(VOTElementManager *)self _updateFirstResponder];
            }
            if (![(VOTElementManager *)self _isElementValidForFirstResponder:self->_currentElement])[(VOTElementManager *)self _resetQuickNavState]; {
            [(VOTElementManager *)self _resetElementUnitIndexes];
            }
            if (v108 && self->_customActionIdentifier)
            {
              v121[0] = _NSConcreteStackBlock;
              v121[1] = 3221225472;
              v121[2] = sub_100087F9C;
              v121[3] = &unk_1001B5860;
              v121[4] = self;
              id v76 = [v117 indexOfObjectPassingTest:v121];
              self->_customActionIndedouble x = (int64_t)v76;
              if (v76 != (id)0x7FFFFFFFFFFFFFFFLL)
              {
LABEL_108:
                [(VOTElementManager *)self _resetMathGranularMovementState];
                webSelectionText = self->_webSelectionText;
                self->_webSelectionText = 0;

                lineArradouble y = self->_lineArray;
                self->_lineArradouble y = 0;

                CGSize size = CGRectZero.size;
                self->_lineFrame.origin = CGRectZero.origin;
                self->_lineFrame.CGSize size = size;
                self->_textRangeBeingDisplayed = 0;
                self->_lastNothingSoundTime = -3061152000.0;
                previouslySpokenImageCaptionResults = self->_previouslySpokenImageCaptionResults;
                self->_previouslySpokenImageCaptionResults = 0;

                if (v113) {
                  self->_highlightedCharacterRange = (_NSRange)xmmword_10016E510;
                }
                if (![(VOTElementRotor *)self->_elementRotor showsWebSearchResults]) {
                  goto LABEL_116;
                }
                CGRect v82 = [*v114 application];
                if ([v82 webSearchResultsActive])
                {
                  webSearchText = self->_webSearchText;

                  if (webSearchText)
                  {
LABEL_116:
                    if ([(VOTElementManager *)self _inMisspelledWordRotor]) {
                      [(VOTElementManager *)self _updateRotorForCurrentElement:&__kCFBooleanTrue completion:0];
                    }
                    if (v11 && ![(VOTElementManager *)self _inMisspelledWordRotor])
                    {
                      self->_lastUserTextSelectionDirection = 0;
                      self->_inTextProcessingRotorMode = 0;
                      self->_misspelledWordReplacementCycleIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
                      self->_flags.inKeyboardTextSelectionMode = 0;
                    }
                    self->_flags.shouldTriggerAlternativeKeyActivation = 0;
                    [(SCRCTargetSelectorTimer *)self->_keyboardAlternativeModeActivationTimer cancel];
                    currentPublicCustomRotorItemResult = self->_currentPublicCustomRotorItemResult;
                    self->_currentPublicCustomRotorItemResult = 0;

                    self->_flags.shouldUpdateRotorForElement = 1;
                    BOOL v85 = [(VOTElement *)self->_currentElement doesHaveTraits:kAXAllowsDirectInteractionTrait];
                    unsigned __int8 v86 = 0;
                    self->_flags.currentElementAllowsDirectTouch = v85;
                    if (v85) {
                      unsigned __int8 v86 = [*v114 avoidAnnouncingDirectTouchArea];
                    }
                    self->_flags.avoidAnnouncingDirectTouchArea = v86;
                    currentElement = self->_currentElement;
                    if (currentElement)
                    {
                      unsigned __int8 v88 = [(VOTElement *)currentElement shouldSkipValidateElement];
                      id v89 = *v114;
                      if ((v88 & 1) == 0)
                      {
                        id v90 = [*v114 application];
                        unsigned int v91 = [v89 isValidForApplication:v90];

                        id v89 = *v114;
                        if (v91)
                        {
                          [*v114 centerPoint];
                          self->_lastValidElementLocation.double x = v92;
                          self->_lastValidElementLocation.double y = v93;
                          id v89 = self->_currentElement;
                        }
                      }
                    }
                    else
                    {
                      id v89 = 0;
                    }
                    if ([v89 doesHaveTraits:kAXHeaderTrait])
                    {
                      double v94 = [(VOTElement *)self->_currentElement value];
                      -[VOTElementManager setLastElementHeadingLevel:](self, "setLastElementHeadingLevel:", (int)[v94 intValue]);
                    }
                    [(VOTElementManager *)self setLastElementBlockquoteLevel:[(VOTElement *)self->_currentElement blockquoteLevel]];
                    id WeakRetained = objc_loadWeakRetained((id *)&self->_updateDelegate);
                    [WeakRetained currentElementDidUpdate:self->_currentElement];

                    [(VOTElementManager *)self _updateExternalAccessory:v14];
                    [(VOTElementManager *)self _updateAnyThreadElementAccess];
                    [(VOTElementManager *)self _forceVisionRefresh];
                    [(VOTElementManager *)self _updateContextDescriptors];
                    id v96 = [(VOTElementManager *)self currentElementChangedCallback];

                    if (v96)
                    {
                      id v97 = [(VOTElementManager *)self currentElementChangedCallback];
                      ((void (**)(void, VOTElementManager *, VOTElement *))v97)[2](v97, self, self->_currentElement);
                    }
                    if (AXDeviceSupportsSonification())
                    {
                      id v98 = +[VOTAudiographManager sharedManager];
                      unsigned int v99 = [v98 isPlaying];

                      if (v99)
                      {
                        int64_t v100 = +[VOTAudiographManager sharedManager];
                        [v100 stopPlaying];
                      }
                      audiographActionIdentifier = self->_audiographActionIdentifier;
                      self->_audiographActionIdentifier = 0;
                    }
                    if ([(id)VOTSharedWorkspace pointerVoiceOverCursorOption] == 1)
                    {
                      BOOL v102 = +[VOTDisplayManager displayManager];
                      [*v114 centerPoint];
                      objc_msgSend(v102, "movePointerToPoint:contextId:", objc_msgSend(*v114, "windowContextId"), v103, v104);
                    }
                    if (_AXSAutomationEnabled())
                    {
                      __int16 v105 = +[NSDistributedNotificationCenter defaultCenter];
                      [v105 postNotificationName:@"VoiceOverEventOccurred" object:@"CurrentElementDidChange"];
                    }
                    BOOL v44 = 1;
                    goto LABEL_141;
                  }
                }
                else
                {
                }
                [(VOTElementRotor *)self->_elementRotor setShowsWebSearchResults:0];
                goto LABEL_116;
              }
            }
            else
            {
              self->_customActionIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
            }
            customActionIdentifier = self->_customActionIdentifier;
            self->_customActionIdentifier = 0;

            goto LABEL_108;
          }
        }
        uint64_t v75 = +[VOTBrailleManager manager];
        [v75 setBrailleElement:*v114];

        goto LABEL_97;
      }
      BOOL v116 = v11;
      uint64_t v46 = [(id)VOTSharedWorkspace additionalLanguageRotorItem];
      uint64_t v47 = [(id)VOTSharedWorkspace selectedLanguage];
      id v111 = (void *)v46;
      __int16 v48 = (void *)v46;
      id v49 = (void *)v47;
      if ([v48 isEqualToString:v47])
      {

        BOOL v11 = v116;
      }
      else
      {
        CGRect v50 = [(id)VOTSharedWorkspace selectedLanguage];
        unsigned __int8 v107 = [(VOTElementManager *)self _languageRotorItemsContainLanguage:v50];

        p_currentElement = &self->_currentElement;
        BOOL v11 = v116;
        if (v107) {
          goto LABEL_66;
        }
      }
      [(id)VOTSharedWorkspace setSelectedLanguage:0];
      goto LABEL_66;
    }
  }
  else
  {
    unsigned int v19 = 0;
    if (!v14) {
      goto LABEL_23;
    }
  }
  if (([v14 isAccessibleElement] | (v9 || v12) | v19)) {
    goto LABEL_23;
  }
  CGRect v43 = VOTLogElement();
  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
    sub_10011F0CC(v14);
  }

  if (_AXSInUnitTestMode())
  {
    id v23 = [v14 description];
    [v23 UTF8String];
    _AXAssert();
LABEL_59:
    BOOL v44 = 0;
LABEL_141:

    goto LABEL_142;
  }
LABEL_61:
  BOOL v44 = 0;
LABEL_142:

  return v44;
}

- (void)_updateAnyThreadElementAccess
{
  p_anyThreadCurrentElementLock = &self->_anyThreadCurrentElementLock;
  os_unfair_lock_lock(&self->_anyThreadCurrentElementLock);
  objc_storeStrong((id *)&self->_anyThreadCurrentElement, self->_currentElement);

  os_unfair_lock_unlock(p_anyThreadCurrentElementLock);
}

- (void)_updateSwipeFrames
{
  id v3 = [(VOTElementManager *)self _currentElement];
  if (v3)
  {
    id v4 = [(VOTElement *)self->_currentElement elementsInDirection:1 withCount:5];
    id v5 = [(VOTElement *)self->_currentElement elementsInDirection:2 withCount:5];
    id v6 = +[NSMutableArray array];
    BOOL v7 = +[NSMutableArray array];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100088264;
    v20[3] = &unk_1001B5888;
    id v8 = v6;
    id v21 = v8;
    [v5 enumerateObjectsWithOptions:2 usingBlock:v20];
    [v8 addObject:v3];
    [v8 addObjectsFromArray:v4];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v9 = v8;
    id v10 = [v9 countByEnumeratingWithState:&v16 objects:v22 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v17;
      do
      {
        BOOL v13 = 0;
        do
        {
          if (*(void *)v17 != v12) {
            objc_enumerationMutation(v9);
          }
          objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * (void)v13), "frame", (void)v16);
          id v14 = NSStringFromRect(v23);
          if (v14) {
            [v7 addObject:v14];
          }

          BOOL v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v16 objects:v22 count:16];
      }
      while (v11);
    }

    long long v15 = +[VOTDisplayManager displayManager];
    [v15 setElementFrames:v7];
  }
}

- (BOOL)mlElement:(id)a3 sharesLabel:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [v6 label];
  id v9 = [v7 label];
  if (([v8 isEqualToString:v9] & 1) == 0)
  {
    id v11 = [v7 label];
    if (v11)
    {
      uint64_t v12 = [v6 label];
      id v4 = [v7 label];
      if ([v12 containsString:v4])
      {
        unsigned __int8 v10 = 1;
LABEL_12:

LABEL_13:
        goto LABEL_14;
      }
      long long v18 = v12;
    }
    uint64_t v13 = [v6 label];
    if (v13)
    {
      id v14 = (void *)v13;
      long long v15 = [v7 label];
      long long v16 = [v6 label];
      unsigned __int8 v10 = [v15 containsString:v16];
    }
    else
    {
      unsigned __int8 v10 = 0;
    }
    uint64_t v12 = v18;
    if (!v11) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  unsigned __int8 v10 = 1;
LABEL_14:

  return v10;
}

- (void)_processExternalScrollToVisible:(id)a3
{
  [a3 pointValue];
  [(VOTElement *)self->_currentElement frame];
  AX_CGRectGetCenter();
  double v5 = v4;
  double v7 = v6;
  +[AXUIMLElement setPerformFuzzyHitTestNextTime:1];
  id v8 = [VOTElement alloc];
  id v9 = [(VOTElement *)self->_currentElement application];
  unsigned __int8 v10 = -[VOTElement initWithPosition:application:contextId:](v8, "initWithPosition:application:contextId:", v9, [(VOTElement *)self->_currentElement windowContextId], v5, v7);

  id v11 = AXMediaLogMLElement();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v20.double x = v5;
    v20.double y = v7;
    uint64_t v12 = NSStringFromCGPoint(v20);
    currentElement = self->_currentElement;
    int v14 = 138412802;
    long long v15 = v12;
    __int16 v16 = 2112;
    long long v17 = currentElement;
    __int16 v18 = 2112;
    long long v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Scroll to visible occurred -- looking for same element at %@\ncurrent %@\nfound: %@", (uint8_t *)&v14, 0x20u);
  }
  if (v10) {
    [(VOTElementManager *)self _setCurrentElement:v10];
  }
}

- (void)processExternalScrollToVisible:(CGPoint)a3
{
  elementManagerThread = self->_elementManagerThread;
  +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", a3.x, a3.y);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  -[SCRCThread performSelector:onTarget:count:objects:](elementManagerThread, "performSelector:onTarget:count:objects:", "_processExternalScrollToVisible:", self, 1, v5, 0);
}

- (void)_processExternalElementUpdate
{
  id v3 = AXMediaLogElementVision();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    currentElement = self->_currentElement;
    int v5 = 138412290;
    double v6 = currentElement;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "External element update with current: %@", (uint8_t *)&v5, 0xCu);
  }

  if (self->_currentElement)
  {
    self->_flags.shouldSpeakNextLayoutChange = 1;
    [(VOTElementManager *)self _handleLayoutChangeFromTimer];
  }
  else
  {
    [(VOTElementManager *)self _handleScreenChange:0 sound:0];
  }
}

- (void)processExternalElementUpdate
{
}

- (BOOL)customRotorActionsEqual:(id)a3 otherActions:(id)a4 ignoreDragItems:(BOOL)a5
{
  return sub_100053580(a3, a4, a5);
}

- (_NSRange)_highlightedCharacterRange
{
  NSUInteger length = self->_highlightedCharacterRange.length;
  NSUInteger location = self->_highlightedCharacterRange.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

- (id)_currentElement
{
  return self->_currentElement;
}

- (id)_lastApplication
{
  return self->_lastApplication;
}

- (CGRect)currentLineFrame
{
  double x = self->_lineFrame.origin.x;
  double y = self->_lineFrame.origin.y;
  double width = self->_lineFrame.size.width;
  double height = self->_lineFrame.size.height;
  result.size.double height = height;
  result.size.double width = width;
  result.origin.double y = y;
  result.origin.double x = x;
  return result;
}

- (void)__retrieveValueForKeyPath:(id)a3 intoPointedToLocation:(id)a4 semaphore:(id)a5
{
  dsema = a5;
  id v8 = a4;
  uint64_t v9 = [(VOTElementManager *)self valueForKeyPath:a3];
  unsigned __int8 v10 = (void **)[v8 pointerValue];

  id v11 = *v10;
  *unsigned __int8 v10 = (void *)v9;

  dispatch_semaphore_signal(dsema);
}

- (id)_valueForKeyPathOnElementManagerThread:(id)a3
{
  id v4 = a3;
  int v5 = dispatch_semaphore_create(0);
  id v9 = 0;
  double v6 = +[NSValue valueWithPointer:&v9];
  -[SCRCThread performSelector:onTarget:count:objects:](self->_elementManagerThread, "performSelector:onTarget:count:objects:", "__retrieveValueForKeyPath:intoPointedToLocation:semaphore:", self, 3, v4, v6, v5, 0);

  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  id v7 = v9;

  return v7;
}

- (id)currentElement
{
  p_anyThreadCurrentElementLock = &self->_anyThreadCurrentElementLock;
  os_unfair_lock_lock(&self->_anyThreadCurrentElementLock);
  id v4 = [(VOTElement *)self->_anyThreadCurrentElement copyWithCache];
  os_unfair_lock_unlock(p_anyThreadCurrentElementLock);

  return v4;
}

- (id)currentApplications
{
  if ([(VOTElementManager *)self isOnElementManagerThread]) {
    _AXAssert();
  }
  id v3 = [(VOTElementManager *)self _valueForKeyPathOnElementManagerThread:@"_currentApplications"];
  id v4 = [v3 copyWithZone:0];

  return v4;
}

- (BOOL)isOnElementManagerThread
{
  return [(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread];
}

- (void)_handleStartHelpMode:(id)a3
{
  objc_msgSend((id)VOTSharedWorkspace, "selectedLanguage", a3);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = sub_100051D04(off_1001EA9E8, @"starting.help.mode", 0, v11);
  id v4 = sub_10000ABF8(v3, 0, v11);

  int v5 = sub_100051D04(off_1001EA9E8, @"starting.help.mode.help", 0, v11);
  id v6 = sub_10000ABF8(v5, 2, v11);

  id v7 = +[AXSettings sharedInstance];
  [v7 setVoiceOverHelpMode:0];

  id v8 = +[VOTCommandHelper commandHelper];
  [v8 setHelpEnabled:1];

  long long v9 = xmmword_1001EBE30;
  unsigned __int8 v10 = +[VOTCommandHelper commandHelper];
  objc_msgSend(v10, "setPracticeRegion:", 0.0, 0.0, v9);
}

- (void)_handleEscape:(id)a3
{
  id v4 = a3;
  int v5 = [(id)VOTSharedWorkspace selectedLanguage];
  id v6 = +[VOTCommandHelper commandHelper];
  unsigned int v7 = [v6 helpEnabled];

  if (!v7)
  {
    if (![(id)VOTSharedWorkspace brailleInputActive]
      || [(id)VOTSharedWorkspace brailleInputShouldBeDeactivatedByEscape])
    {
      int v14 = [(VOTElementManager *)self elementRotor];
      id v15 = [v14 currentRotorType];

      if ([(VOTElementManager *)self forceRotorOffGesturedTextInputIfNeeded:1])
      {
        if (v15 == (id)61)
        {
          uint64_t v13 = sub_100051D04(off_1001EA9E8, @"stopping.handwriting", 0, v5);
        }
        else
        {
          uint64_t v13 = 0;
        }
        id v18 = sub_10000ABF8(v13, 1, v5);
        goto LABEL_42;
      }
      if ([(id)VOTSharedWorkspace brailleInputActive])
      {
        [(VOTElementManager *)self _sendBSIActiveStateOffNotificationAndNotify];
        goto LABEL_43;
      }
    }
    if (self->_flags.inSearchTextMode)
    {
      __int16 v16 = sub_100051D04(off_1001EA9E8, @"stopping.search.text.mode", 0, v5);
      id v17 = sub_10000ABF8(v16, 0, v5);

      self->_flags.inSearchTextMode = 0;
      uint64_t v13 = +[VOTKeyboardManager keyboardManager];
      [v13 setCaptureModeEnabled:0];
      goto LABEL_42;
    }
    uint64_t v13 = [(VOTElementManager *)self _currentElement];
    long long v19 = [v13 application];
    unsigned int v20 = [v13 doesHaveTraits:kAXStatusBarElementTrait];
    unsigned __int8 v21 = [v13 performEscape];
    if (v20)
    {
      if ((v21 & 1) == 0)
      {
        id v22 = self->_elementBeforeStatusBarMovement;
        if (![(VOTElement *)v22 isValid])
        {
          NSRect v23 = +[VOTElement systemAppApplication];
          unsigned int v24 = [v23 focusedApplications];
          int v25 = [v24 firstObject];
          uint64_t v26 = [v25 firstElementInApplication];

          id v22 = (VOTElement *)v26;
        }
        [(VOTElementManager *)self _echoDifferentElement:v22 forEvent:v4];
        elementBeforeStatusBarMovement = self->_elementBeforeStatusBarMovement;
        self->_elementBeforeStatusBarMovement = 0;
      }
      goto LABEL_41;
    }
    if ((v21 & 1) != 0
      || ([(VOTElementManager *)self touchContainer],
          id v28 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v29 = [v28 performEscape],
          v28,
          (v29 & 1) != 0))
    {
LABEL_41:

      goto LABEL_42;
    }
    long long v30 = [v19 firstElementInApplication];
    if ([v30 performEscape])
    {
LABEL_40:

      goto LABEL_41;
    }
    [v30 elementsInDirection:1 withCount:20];
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v31 = (id)objc_claimAutoreleasedReturnValue();
    id v32 = [v31 countByEnumeratingWithState:&v41 objects:v45 count:16];
    if (v32)
    {
      id v33 = v32;
      uint64_t v34 = *(void *)v42;
      while (2)
      {
        for (uint64_t i = 0; i != v33; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v42 != v34) {
            objc_enumerationMutation(v31);
          }
          if (objc_msgSend(*(id *)(*((void *)&v41 + 1) + 8 * i), "performEscape", (void)v41))
          {
            double v37 = v31;
            goto LABEL_38;
          }
        }
        id v33 = [v31 countByEnumeratingWithState:&v41 objects:v45 count:16];
        if (v33) {
          continue;
        }
        break;
      }
    }

    if (_AXSClarityBoardEnabled())
    {
      uint64_t v36 = +[VOTElement systemAppApplication];
      if ([v19 isEqual:v36])
      {
      }
      else
      {
        char v38 = [v36 firstElementInApplication];
        unsigned __int8 v39 = [v38 performEscape];

        if (v39)
        {
LABEL_39:

          goto LABEL_40;
        }
      }
    }
    double v37 = +[VOTOutputManager outputManager];
    uint64_t v40 = +[VOSOutputEvent BoundaryEncountered];
    [v37 sendEvent:v40];

LABEL_38:
    goto LABEL_39;
  }
  id v8 = +[VOTCommandHelper commandHelper];
  [v8 processHelpForEvent:v4];

  if (![v4 isTouchEvent]
    || (+[VOTCommandHelper commandHelper],
        long long v9 = objc_claimAutoreleasedReturnValue(),
        [v9 practiceElement],
        unsigned __int8 v10 = objc_claimAutoreleasedReturnValue(),
        v10,
        v9,
        !v10))
  {
    id v11 = sub_100051D04(off_1001EA9E8, @"stopping.help.mode", 0, v5);
    id v12 = sub_10000ABF8(v11, 2, v5);

    uint64_t v13 = +[VOTCommandHelper commandHelper];
    [v13 setHelpEnabled:0];
LABEL_42:
  }
LABEL_43:
}

- (void)_handleSpeechRateChange:(BOOL)a3
{
  BOOL v3 = a3;
  [(VOTElementManager *)self rotorRate];
  double v6 = -0.0500000007;
  if (v3) {
    double v6 = 0.0500000007;
  }
  double v7 = v6 + v5;
  double v8 = 0.0;
  if (v7 >= 0.0)
  {
    double v8 = v7;
    if (v7 > 1.0) {
      double v8 = 1.0;
    }
  }
  dispatch_semaphore_t v9 = dispatch_semaphore_create(0);
  unsigned __int8 v10 = [(id)VOTSharedWorkspace votSettings];
  float v11 = v8;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000890D0;
  v17[3] = &unk_1001B33B8;
  dispatch_semaphore_t v18 = v9;
  id v12 = v9;
  *(float *)&double v13 = v11;
  [v10 setRotorRate:v17 completionHandler:v13];

  dispatch_semaphore_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
  id v14 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v15 = AXFormatFloatWithPercentage();
  id v16 = [v14 addString:v15];

  [(VOTElementManager *)self _formatRequestForBrailleAlertConditional:v14];
  [(VOTElementManager *)self sendRequest:v14];
}

- (void)_handleSoundRotorChange:(BOOL)a3
{
  BOOL v3 = +[AXSettings sharedInstance];
  unsigned int v4 = [v3 voiceOverSoundEffectsEnabled];

  double v5 = +[AXSettings sharedInstance];
  [v5 setVoiceOverSoundEffectsEnabled:v4 ^ 1];

  double v6 = [(id)VOTSharedWorkspace selectedLanguage];
  id v10 = v6;
  if (v4) {
    double v7 = @"soundchange.off";
  }
  else {
    double v7 = @"soundchange.on";
  }
  double v8 = sub_100051D04(off_1001EA9E8, v7, 0, v6);
  id v9 = sub_10000ABF8(v8, 0, v10);
}

- (void)_handleSpeechPunctuationChange:(BOOL)a3
{
  BOOL v3 = a3;
  unsigned int v4 = [(id)VOTSharedWorkspace defaultPunctuationGroup];
  double v5 = +[AXSettings sharedInstance];
  id v6 = [v5 voiceOverPunctuationGroup];

  double v7 = [(id)VOTSharedWorkspace punctuationGroups];
  if ([v7 count])
  {
    if (!v6)
    {
      id v6 = [v4 uuid];
    }
    uint64_t v27 = _NSConcreteStackBlock;
    uint64_t v28 = 3221225472;
    unsigned __int8 v29 = sub_1000894C8;
    long long v30 = &unk_1001B45B0;
    id v6 = v6;
    id v31 = v6;
    id v8 = [v7 indexOfObjectPassingTest:&v27];
    if (v8 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v9 = AXLogPunctuationStorage();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)) {
        sub_10011F29C((uint64_t)v6);
      }

      id v8 = 0;
    }
    if (v3) {
      unint64_t v10 = (unint64_t)v8 + 1;
    }
    else {
      unint64_t v10 = (unint64_t)v8 - 1;
    }
    if ((v10 & 0x8000000000000000) != 0) {
      unint64_t v10 = (unint64_t)[v7 count] - 1;
    }
    if (v10 >= (unint64_t)[v7 count]) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = v10;
    }
    id v12 = [v7 objectAtIndexedSubscript:v11];
    double v13 = [v12 uuid];
    id v14 = +[AXSettings sharedInstance];
    [v14 setVoiceOverPunctuationGroup:v13];

    id v15 = [(id)VOTSharedWorkspace selectedLanguage];
    id v16 = [v12 name];
    id v17 = [v12 uuid];
    dispatch_semaphore_t v18 = [v4 uuid];
    unsigned int v19 = [v17 isEqual:v18];

    if (v19)
    {
      unsigned int v20 = +[AXSettings sharedInstance];
      [v20 setVoiceOverPunctuationGroup:0];

      unsigned __int8 v21 = sub_100051804(off_1001EA9E8, @"default.punctuation.format", 0);
      id v22 = [v12 name];
      uint64_t v23 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v21, v22, v27, v28, v29, v30);

      id v16 = (void *)v23;
    }
    id v24 = sub_10000ABF8(v16, 0, v15);
  }
  else
  {
    int v25 = +[VOTOutputManager outputManager];
    uint64_t v26 = +[VOSOutputEvent BoundaryEncountered];
    [v25 sendEvent:v26];
  }
}

- (id)_typingEchoString
{
  id v2 = +[AXSettings sharedInstance];
  id v3 = [v2 voiceOverHardwareTypingFeedback];

  if ((unint64_t)v3 > 3) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = *(&off_1001B5F78 + (void)v3);
  }
  double v5 = off_1001EA9E8;
  id v6 = [(id)VOTSharedWorkspace selectedLanguage];
  double v7 = sub_100051D04(v5, v4, 0, v6);

  return v7;
}

- (void)_handleTypingEchoChange:(BOOL)a3
{
  BOOL v3 = a3;
  id v11 = [(id)VOTSharedWorkspace selectedLanguage];
  double v5 = +[AXSettings sharedInstance];
  id v6 = [v5 voiceOverHardwareTypingFeedback];

  switch((unint64_t)v6)
  {
    case 0uLL:
      if (v3) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = 3;
      }
      break;
    case 1uLL:
      if (v3) {
        uint64_t v7 = 2;
      }
      else {
        uint64_t v7 = 0;
      }
      break;
    case 2uLL:
      if (v3) {
        uint64_t v7 = 3;
      }
      else {
        uint64_t v7 = 1;
      }
      break;
    case 3uLL:
      if (v3) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = 2;
      }
      break;
    default:
      uint64_t v7 = 0;
      break;
  }
  id v8 = +[AXSettings sharedInstance];
  [v8 setVoiceOverHardwareTypingFeedback:v7];

  id v9 = [(VOTElementManager *)self _typingEchoString];
  id v10 = sub_10000ABF8(v9, 0, v11);
}

- (id)_speechPhoneticsString
{
  id v2 = +[AXSettings sharedInstance];
  id v3 = [v2 voiceOverPhoneticsFeedback];

  if ((unint64_t)v3 > 2) {
    return 0;
  }
  else {
    return *(&off_1001B5F98 + (void)v3);
  }
}

- (void)_handleSpeechPhoneticsChange:(BOOL)a3
{
  BOOL v3 = a3;
  double v5 = +[AXSettings sharedInstance];
  id v6 = [v5 voiceOverPhoneticsFeedback];

  uint64_t v7 = 1;
  if (!v3) {
    uint64_t v7 = 2;
  }
  uint64_t v8 = !v3;
  uint64_t v9 = 2;
  if (!v3) {
    uint64_t v9 = 0;
  }
  if (v6 != (id)1) {
    uint64_t v9 = (uint64_t)v6;
  }
  if (v6 != (id)2) {
    uint64_t v8 = v9;
  }
  if (v6) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v7;
  }
  id v11 = +[AXSettings sharedInstance];
  [v11 setVoiceOverPhoneticsFeedback:v10];

  id v16 = [(id)VOTSharedWorkspace selectedLanguage];
  id v12 = off_1001EA9E8;
  double v13 = [(VOTElementManager *)self _speechPhoneticsString];
  id v14 = sub_100051D04(v12, v13, 0, v16);
  id v15 = sub_10000ABF8(v14, 0, v16);
}

- (void)_handleActivityRotorChange:(BOOL)a3
{
  BOOL v3 = a3;
  unsigned int v4 = [(id)VOTSharedWorkspace selectedActivity];
  double v5 = [(id)VOTSharedWorkspace activities];
  id v6 = VOTLogActivities();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v23 = 138412546;
    id v24 = v4;
    __int16 v25 = 2112;
    uint64_t v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "VO current activity: %@ activities: %@", (uint8_t *)&v23, 0x16u);
  }

  if (v3)
  {
    unint64_t v7 = 0;
    if (!v4) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v7 = (unint64_t)[v5 count] - 1;
    if (!v4) {
      goto LABEL_12;
    }
  }
  uint64_t v8 = (char *)[v5 indexOfObject:v4];
  uint64_t v9 = v8 - 1;
  if (v3) {
    uint64_t v9 = v8 + 1;
  }
  if (v8 == (char *)0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (unint64_t)v9;
  }
LABEL_12:
  uint64_t v10 = VOTLogActivities();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    int v23 = 67109120;
    LODWORD(v24) = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "VO activity index: %d", (uint8_t *)&v23, 8u);
  }

  id v11 = [(id)VOTSharedWorkspace selectedLanguage];
  id v12 = [v5 count];
  if ((v7 & 0x8000000000000000) != 0 || v7 >= (unint64_t)v12)
  {
    [(id)VOTSharedWorkspace setSelectedActivity:0];
    unsigned int v20 = [(id)VOTSharedWorkspace previousRotorVoiceIdentifier];
    unsigned __int8 v21 = +[AXSettings sharedInstance];
    [v21 setVoiceOverCurrentRotorVoiceIdentifier:v20];

    [(id)VOTSharedWorkspace setPreviousRotorVoiceIdentifier:0];
    double v13 = sub_100051D04(off_1001EA9E8, @"no.activity.selected", 0, v11);
    id v22 = sub_10000ABF8(v13, 0, v11);
  }
  else
  {
    double v13 = [v5 objectAtIndexedSubscript:v7];
    id v14 = [(id)VOTSharedWorkspace selectedActivity];

    if (!v14)
    {
      id v15 = +[AXSettings sharedInstance];
      id v16 = [v15 voiceOverCurrentRotorVoiceIdentifier];
      [(id)VOTSharedWorkspace setPreviousRotorVoiceIdentifier:v16];

      id v17 = +[AXSettings sharedInstance];
      [v17 setVoiceOverCurrentRotorVoiceIdentifier:0];
    }
    dispatch_semaphore_t v18 = [v13 name];
    id v19 = sub_10000ABF8(v18, 0, v11);

    [(id)VOTSharedWorkspace setSelectedActivity:v13];
  }
}

- (void)_handleAudioDestination:(BOOL)a3
{
  unsigned int v3 = objc_msgSend((id)VOTSharedWorkspace, "audioDestinationRequestExternal", a3);
  [(id)VOTSharedWorkspace setAudioDestinationRequestExternal:v3 ^ 1];
  id v9 = [(id)VOTSharedWorkspace selectedLanguage];
  unsigned int v4 = off_1001EA9E8;
  if ([(id)VOTSharedWorkspace audioDestinationRequestExternal]) {
    double v5 = @"audiodestination.external";
  }
  else {
    double v5 = @"audiodestination.local";
  }
  id v6 = sub_100051D04(v4, v5, 0, v9);
  id v7 = sub_10000ABF8(v6, 0, v9);

  uint64_t v8 = +[VOTOutputManager outputManager];
  [v8 updateAudioSessionProperties];
}

- (void)_handleAudioDuckingAmountChange:(BOOL)a3
{
  BOOL v3 = a3;
  unsigned int v4 = +[AXSettings sharedInstance];
  [v4 voiceOverMediaDuckingAmount];
  double v6 = v5;

  double v7 = 0.05;
  if (v3) {
    double v7 = -0.05;
  }
  double v8 = (v7 + v6) * 100.0;
  if ((int)v8 % 5 <= 2) {
    int v9 = 0;
  }
  else {
    int v9 = 5;
  }
  double v10 = fmax((double)(5 * ((int)v8 / 5) + v9) / 100.0, 0.01);
  if (v10 <= 0.99) {
    double v11 = v10;
  }
  else {
    double v11 = 0.99;
  }
  id v12 = +[AXSettings sharedInstance];
  [v12 setVoiceOverMediaDuckingAmount:v11];

  id v16 = [(id)VOTSharedWorkspace selectedLanguage];
  double v13 = sub_100051D04(off_1001EA9E8, @"ducking.amount.short", 0, v16);
  id v14 = AXCFormattedString();
  id v15 = sub_10000ABF8(v14, 0, v16);
}

- (void)_handleAudioDuckingChange:(BOOL)a3
{
  BOOL v3 = +[AXSettings sharedInstance];
  uint64_t v4 = [v3 voiceOverAudioDuckingEnabled] ^ 1;
  double v5 = +[AXSettings sharedInstance];
  [v5 setVoiceOverAudioDuckingEnabled:v4];

  AXPerformBlockOnMainThreadAfterDelay();
}

- (id)_audioDuckingModeString
{
  id v2 = +[AXSettings sharedInstance];
  id v3 = [v2 voiceOverMediaDuckingMode];

  if ((unint64_t)v3 > 2) {
    return &stru_1001B7888;
  }
  else {
    return *(&off_1001B5FB0 + (void)v3);
  }
}

- (void)_handleAudioDuckingModeChange:(BOOL)a3
{
  BOOL v3 = a3;
  double v5 = +[AXSettings sharedInstance];
  id v6 = [v5 voiceOverMediaDuckingMode];

  uint64_t v7 = 1;
  if (!v3) {
    uint64_t v7 = 2;
  }
  uint64_t v8 = 2;
  if (!v3) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = !v3;
  if (v6 != (id)2) {
    uint64_t v9 = (uint64_t)v6;
  }
  if (v6 != (id)1) {
    uint64_t v8 = v9;
  }
  if (v6) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v7;
  }
  double v11 = +[AXSettings sharedInstance];
  [v11 setVoiceOverMediaDuckingMode:v10];

  id v16 = [(id)VOTSharedWorkspace selectedLanguage];
  id v12 = off_1001EA9E8;
  double v13 = [(VOTElementManager *)self _audioDuckingModeString];
  id v14 = sub_100051D04(v12, v13, 0, v16);
  id v15 = sub_10000ABF8(v14, 0, v16);
}

- (void)_handleUsePitchChange:(BOOL)a3
{
  unsigned int v3 = objc_msgSend((id)VOTSharedWorkspace, "typingPitchChangeEnabled", a3);
  uint64_t v4 = +[AXSettings sharedInstance];
  [v4 setVoiceOverPitchChangeEnabled:v3 ^ 1];

  double v5 = [(id)VOTSharedWorkspace selectedLanguage];
  id v9 = v5;
  if (v3) {
    id v6 = @"pitchchange.off";
  }
  else {
    id v6 = @"pitchchange.on";
  }
  uint64_t v7 = sub_100051D04(off_1001EA9E8, v6, 0, v5);
  id v8 = sub_10000ABF8(v7, 0, v9);
}

- (void)_handleSpeechRotorChange:(id)a3
{
  id v4 = a3;
  double v5 = [v4 command];
  id v6 = [v5 isEqualToString:kVOTEventCommandSpeechRotorNext];

  char v10 = 0;
  speechRotor = self->_speechRotor;
  id v8 = [v4 origin];

  if (v6) {
    [(VOTRotor *)speechRotor increment:&v10 userInitiated:1 eventOrigin:v8];
  }
  else {
    [(VOTRotor *)speechRotor decrement:&v10 userInitiated:1 eventOrigin:v8];
  }
  [(VOTElementManager *)self _showVisualRotor:self->_speechRotor direction:v6];
  id v9 = [(VOTRotor *)self->_speechRotor generateRotorTypeRequest];
  [(VOTElementManager *)self _appendCurrentRotorValue:v9 forRotor:self->_speechRotor];
  [v9 setGeneratesBraille:1];
  [v9 setBrailleType:1];
  [v9 send];
}

- (void)_handleSpeechRotorValueChange:(id)a3
{
  id v6 = a3;
  id v4 = [v6 command];
  id v5 = [v4 isEqualToString:kVOTEventCommandSpeechRotorIncrementValue];

  switch([(VOTRotor *)self->_speechRotor currentRotorType])
  {
    case 'Q':
      if (v5) {
        [(VOTElementManager *)self _handleIncreaseVolume:v6];
      }
      else {
        [(VOTElementManager *)self _handleDecreaseVolume:v6];
      }
      break;
    case 'R':
      [(VOTElementManager *)self _handleSpeechRateChange:v5];
      break;
    case 'S':
      [(VOTElementManager *)self _handleTypingEchoChange:v5];
      break;
    case 'T':
      [(VOTElementManager *)self _handleSpeechPhoneticsChange:v5];
      break;
    case 'U':
      [(VOTElementManager *)self _handleUsePitchChange:v5];
      break;
    case 'V':
      [(VOTElementManager *)self _handleSpeechPunctuationChange:v5];
      break;
    case 'W':
      [(VOTElementManager *)self _handleSoundRotorChange:v5];
      break;
    case 'X':
      if (AXRuntimeCheck_SupportsVoiceoverIndepedentVolume()) {
        [(VOTElementManager *)self _handleAudioDuckingModeChange:v5];
      }
      else {
        [(VOTElementManager *)self _handleAudioDuckingChange:v5];
      }
      break;
    case 'Z':
      [(VOTElementManager *)self _handleAudioDestination:v5];
      break;
    default:
      break;
  }
}

- (void)_handleAppSwitch:(id)a3
{
  unsigned int v3 = [a3 command];
  id v4 = [v3 isEqualToString:kVOTEventAppSwitchNext];

  id v5 = +[VOTSpringBoardConnection defaultConnection];
  [v5 sendProgrammaticAppSwitch:v4];
}

- (id)_nearestWebElement:(id)a3
{
  return [(VOTElementManager *)self _nearestElementWithMatch:&stru_1001B58C8 startElement:a3];
}

- (id)_nearestScrollableElement:(id)a3
{
  return [(VOTElementManager *)self _nearestElementWithMatch:&stru_1001B58E8 startElement:a3];
}

- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4 forward:(BOOL)a5
{
  return [(VOTElementManager *)self _nearestElementWithMatch:a3 startElement:a4 forward:a5 itemCheckCount:10];
}

- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4 forward:(BOOL)a5 itemCheckCount:(int64_t)a6
{
  BOOL v7 = a5;
  id v9 = (uint64_t (**)(id, void *, void *))a3;
  id v10 = a4;
  double v11 = v10;
  if (v7) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = 2;
  }
  [v10 elementsInDirection:v12 withCount:a6];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  id v14 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v15) {
          objc_enumerationMutation(v13);
        }
        id v17 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (v9[2](v9, v17, v11))
        {
          id v14 = v17;
          goto LABEL_14;
        }
      }
      id v14 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v14) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v14;
}

- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4
{
  id v6 = (uint64_t (**)(id, id, id))a3;
  id v7 = a4;
  if (v6[2](v6, v7, v7))
  {
    id v10 = v7;
  }
  else
  {
    id v8 = [(VOTElementManager *)self _nearestElementWithMatch:v6 startElement:v7 forward:1];
    id v9 = v8;
    if (v8)
    {
      id v10 = v8;
    }
    else
    {
      double v11 = [(VOTElementManager *)self _nearestElementWithMatch:v6 startElement:v7 forward:0];
      id v10 = v11;
      if (v11) {
        id v12 = v11;
      }
    }
  }

  return v10;
}

- (void)_handleScrollToTop:(id)a3
{
  if (![(VOTElement *)self->_currentElement scrollToTop])
  {
    id v4 = +[VOTOutputManager outputManager];
    unsigned int v3 = +[VOSOutputEvent BoundaryEncountered];
    [v4 sendEvent:v3];
  }
}

- (void)_handleScrollToBottom:(id)a3
{
  if (![(VOTElement *)self->_currentElement scrollToBottom])
  {
    id v4 = +[VOTOutputManager outputManager];
    unsigned int v3 = +[VOSOutputEvent BoundaryEncountered];
    [v4 sendEvent:v3];
  }
}

- (void)_handleScrollByPage:(id)a3
{
  id v33 = a3;
  self->_double lastScreenChangeNotificationTime = -3061152000.0;
  id v4 = [(VOTElementManager *)self _currentElement];
  self->_flags.userInitiatedBooksScroll = 1;
  if (([v4 isValid] & 1) == 0)
  {
    [v4 centerPoint];
    if (v4) {
      double v7 = v6;
    }
    else {
      double v7 = 40.0;
    }
    if (v4) {
      double v8 = v5;
    }
    else {
      double v8 = 0.0;
    }
    double y = CGPointZero.y;
    if (CGPointZero.x == v8 && y == v7)
    {
      objc_msgSend(v4, "frame", CGPointZero.x, y);
      AX_CGRectGetCenter();
      double v8 = v11;
      double v7 = v12;
    }
    id v13 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", v8, v7);

    if (v13
      || (-[VOTElementManager _sonarElementFromPoint:inForwardDirection:limit:](self, "_sonarElementFromPoint:inForwardDirection:limit:", 1, 20, v8, v7), (id v13 = (id)objc_claimAutoreleasedReturnValue()) != 0))
    {
      [(VOTElementManager *)self _setCurrentElement:v13];
      id v14 = +[VOTDisplayManager displayManager];
      [v14 setCursorFrameForElement:v13];

      id v4 = v13;
    }
    else
    {
      id v4 = 0;
    }
  }
  if (([v4 doesHaveTraits:kAXScrollableTrait] & 1) == 0)
  {
    uint64_t v15 = [(VOTElementManager *)self _nearestScrollableElement:v4];

    id v4 = (void *)v15;
  }
  *(_WORD *)&self->_flags.isReadingAll = 0;
  id v16 = [v33 command];
  if ([v16 isEqualToString:kVOTEventCommandScrollUpPage])
  {
    id v17 = [(VOTElementManager *)self _currentElement];
    unsigned int v18 = [v17 doesHaveTraits:kAXStatusBarElementTrait];

    if (v18)
    {
      long long v19 = +[VOTElement systemAppApplication];
      [v19 showBulletinBoard:1];
LABEL_25:

      goto LABEL_47;
    }
    [v4 scrollUpPage];
    goto LABEL_47;
  }
  if (![v16 isEqualToString:kVOTEventCommandScrollDownPage])
  {
    if (([v16 isEqualToString:kVOTEventCommandScrollRightPage] & 1) == 0
      && ![v16 isEqualToString:kVOTEventCommandScrollLeftPage])
    {
      goto LABEL_47;
    }
    unsigned int v22 = [v16 isEqualToString:kVOTEventCommandScrollRightPage];
    if (![v4 isReadingContent])
    {
      int64_t v25 = 1;
      if (!v22) {
        int64_t v25 = 2;
      }
      self->_bookLastContentMovementDirection = v25;
      uint64_t v26 = [v33 objectForIndex:119];
      self->_flags.lastScrollWasFromBraillePanning = [v26 BOOLValue];

      goto LABEL_44;
    }
    id v23 = v4;
    if ([v23 isRTL])
    {
      if (!v22)
      {
LABEL_32:
        unsigned __int8 v24 = [v23 scrollNextPage];
        goto LABEL_40;
      }
    }
    else if (v22)
    {
      goto LABEL_32;
    }
    unsigned __int8 v24 = [v23 scrollPreviousPage];
LABEL_40:
    unsigned __int8 v27 = v24;
    self->_bookLastContentMovementUnit = 4;
    self->_flags.previousScrollWasBookContentMovement = 1;

    if (v22) {
      int64_t v28 = 1;
    }
    else {
      int64_t v28 = 2;
    }
    self->_bookLastContentMovementDirection = v28;
    unsigned __int8 v29 = [v33 objectForIndex:119];
    self->_flags.lastScrollWasFromBraillePanning = [v29 BOOLValue];

    if (v27) {
      goto LABEL_47;
    }
LABEL_44:
    if (v22) {
      [v4 scrollRightPage];
    }
    else {
      [v4 scrollLeftPage];
    }
    goto LABEL_47;
  }
  long long v20 = [(VOTElementManager *)self _currentElement];
  unsigned int v21 = [v20 doesHaveTraits:kAXStatusBarElementTrait];

  if (v21)
  {
    long long v19 = +[VOTElement systemAppApplication];
    [v19 showControlCenter:1];
    goto LABEL_25;
  }
  [v4 scrollDownPage];
LABEL_47:
  if ([v4 doesHaveTraits:kAXAdjustableTrait])
  {
    long long v30 = [v4 value];
    [(VOTElementManager *)self _valueWait:v4 oldValue:v30 waitTime:0 borderHitIfNoChange:0.3];
    id v31 = [v4 value];
    if (([v30 isEqualToString:v31] & 1) == 0)
    {
      id v32 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      [(VOTElementManager *)self _addDescription:v4 toRequest:v32 withOptions:8];
      [(VOTElementManager *)self sendRequest:v32];
    }
  }
}

- (void)_handleScrollDownPage:(id)a3
{
  id v6 = [(VOTElementManager *)self _currentElement];
  if ([v6 doesHaveTraits:kAXScrollableTrait])
  {
    id v4 = v6;
  }
  else
  {
    uint64_t v5 = [(VOTElementManager *)self _nearestScrollableElement:v6];

    id v4 = (void *)v5;
  }
  id v7 = v4;
  [v4 scrollDownPage];
}

- (void)_handleScrollToPoint:(id)a3
{
  id v4 = [a3 objectForIndex:101];
  [v4 pointValue];
  double v6 = v5;
  double v8 = v7;

  id v11 = [(VOTElementManager *)self _currentElement];
  if ([v11 doesHaveTraits:kAXScrollableTrait])
  {
    id v9 = v11;
  }
  else
  {
    uint64_t v10 = [(VOTElementManager *)self _nearestScrollableElement:v11];

    id v9 = (void *)v10;
  }
  id v12 = v9;
  objc_msgSend(v9, "scrollToPoint:", v6, v8);
}

- (void)_handleSelectedTextOutput:(id)a3
{
  id v10 = a3;
  id v4 = self->_firstResponderElement;
  double v5 = v4;
  if (v4 && [(VOTElement *)v4 selectedTextRange] != (id)0x7FFFFFFF)
  {
    id v6 = +[VOTOutputRequest createRequest];
    double v8 = [(VOTElement *)v5 language];
    [(VOTElement *)v5 applySelectedText:v6 language:v8];

    id v9 = [(VOTElement *)v5 language];
    [(VOTElement *)v5 applyTextEditingInformation:v9 request:v6 options:0];

    [v6 setBrailleType:2];
    [v6 setGeneratesBraille:1];
    [v6 send];
  }
  else
  {
    id v6 = +[VOTOutputManager outputManager];
    double v7 = +[VOSOutputEvent BoundaryEncountered];
    [v6 sendEvent:v7];
  }
}

- (void)_handleOutputFocusedElementSummary:(id)a3
{
  id v4 = [a3 command];
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandOutputDetailedFocusedElementSummary];

  id v9 = self->_firstResponderElement;
  if (v9)
  {
    if (v5) {
      uint64_t v6 = 0x1000000;
    }
    else {
      uint64_t v6 = 553648128;
    }
    id v7 = +[VOTOutputRequest createRequest];
    [(VOTElement *)v9 addTextualInformationToRequest:v7 options:v6 dataPackage:0];
    [v7 send];
  }
  else
  {
    id v7 = +[VOTOutputManager outputManager];
    double v8 = +[VOSOutputEvent BoundaryEncountered];
    [v7 sendEvent:v8];
  }
}

- (void)visionEngine:(id)a3 updatedResult:(id)a4 forElement:(id)a5 event:(int64_t)a6 visionOptions:(id)a7
{
  elementManagerThread = self->_elementManagerThread;
  id v13 = a7;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  id v17 = +[NSNumber numberWithInteger:a6];
  -[SCRCThread performSelector:onTarget:count:objects:](elementManagerThread, "performSelector:onTarget:count:objects:", "_visionEngine:updatedResult:forElement:event:visionOptions:", self, 5, v16, v15, v14, v17, v13, 0);
}

- (void)_visionEngine:(id)a3 updatedResult:(id)a4 forElement:(id)a5 event:(id)a6 visionOptions:(id)a7
{
  id v11 = a4;
  id v12 = a5;
  id v13 = a7;
  id v14 = (VOTElement *)[a6 integerValue];
  id v15 = VOTLogCommon();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    int v25 = 134218498;
    uint64_t v26 = v14;
    __int16 v27 = 2112;
    id v28 = v12;
    __int16 v29 = 2112;
    id v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Element manager received async update event from vision engine. event: %ld. updateElement: %@. result: %@", (uint8_t *)&v25, 0x20u);
  }

  if ([v12 isEqual:self->_currentElement])
  {
    id v16 = +[VOTWorkspace sharedWorkspace];
    uint64_t v17 = [v16 visionEngine];
    unsigned int v18 = [(id)v17 resultsForElement:v12];

    long long v19 = [(VOTElementManager *)self previouslySpokenImageCaptionResults];
    LOBYTE(v17) = [v18 isEqual:v19];

    long long v20 = VOTLogCommon();
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
    if (v17)
    {
      if (v21)
      {
        currentElement = self->_currentElement;
        int v25 = 138412290;
        uint64_t v26 = currentElement;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Already announced vision update for this element. Will not announce again: %@", (uint8_t *)&v25, 0xCu);
      }
    }
    else
    {
      if (v21)
      {
        unsigned __int8 v24 = self->_currentElement;
        int v25 = 138412290;
        uint64_t v26 = v24;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Have not yet announced vision update for this element. Will announce now: %@", (uint8_t *)&v25, 0xCu);
      }

      [(VOTElementManager *)self setPreviouslySpokenImageCaptionResults:v18];
      -[VOTElementManager _handleOutputComputerVisionAnalysisSummary:explicitUserRequest:](self, "_handleOutputComputerVisionAnalysisSummary:explicitUserRequest:", 0, [v13 userCommandInitiated]);
    }
  }
  else
  {
    unsigned int v18 = VOTLogCommon();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v23 = self->_currentElement;
      int v25 = 138412290;
      uint64_t v26 = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Vision update element and current element differnet. Will not announce vision update. Current element: %@", (uint8_t *)&v25, 0xCu);
    }
  }
}

- (void)_handleOutputComputerVisionAnalysisSummary:(id)a3
{
}

- (void)_handleOutputComputerVisionAnalysisSummary:(id)a3 explicitUserRequest:(BOOL)a4
{
  BOOL v4 = a4;
  id v16 = [(VOTElementManager *)self _currentElement];
  id v6 = +[VOTOutputRequest createRequest];
  [v16 applyCVMLGeneratedContentToRequest:v6 explicitUserRequest:v4];
  if ([v6 containsActions])
  {
    uint64_t v7 = v4 ^ 1;
    [v6 setIsComputerVisionAsynchrousRequest:v7];
    [v6 setDoesNotInterrupt:v7];
    [v6 setGeneratesBraille:0];
    [(VOTElementManager *)self sendRequest:v6];
    double v8 = +[VOTBrailleManager manager];
    id v9 = [v8 brailleElement];
    unsigned int v10 = [v9 isEqual:v16];

    if (!v10) {
      goto LABEL_7;
    }
    id v11 = [v6 supplementalBrailleDescription];
    id v12 = +[VOTBrailleManager manager];
    id v13 = [v12 brailleElement];
    [v13 setSupplementalBrailleDescription:v11];

    id v14 = +[VOTBrailleManager manager];
    [v14 refreshBrailleLine];
  }
  else
  {
    if (!v4) {
      goto LABEL_7;
    }
    id v14 = +[VOTOutputManager outputManager];
    id v15 = +[VOSOutputEvent NoResultsFound];
    [v14 sendEvent:v15];
  }
LABEL_7:
}

- (id)_imageExplorerCachedResults
{
  unsigned int v3 = +[VOTWorkspace sharedWorkspace];
  BOOL v4 = [v3 visionEngine];

  unsigned int v5 = [(VOTElementManager *)self _currentElement];
  id v6 = [v4 resultsForElement:v5];

  return v6;
}

- (BOOL)isValidElementForImageExploration
{
  unsigned int v3 = [(VOTElementManager *)self currentElement];
  BOOL v4 = [v3 imageAssetLocalIdentifier];

  if (v4)
  {
    LOBYTE(v5) = 1;
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v6 = [(VOTElementManager *)self _imageExplorerCachedResults];
    id v5 = [v6 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      uint64_t v7 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v6);
          }
          if ([*(id *)(*((void *)&v10 + 1) + 8 * i) includesFeaturesForImageExploration])
          {
            LOBYTE(v5) = 1;
            goto LABEL_13;
          }
        }
        id v5 = [v6 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }
  return (char)v5;
}

- (void)handleLaunchVoiceOverImageExplorer
{
  unsigned int v3 = +[AXSettings sharedInstance];
  unsigned int v4 = [v3 securePayAssertionActive];

  if (v4)
  {
    id v5 = AXLogAssertions();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not processing image explorer because secure pay mode active", buf, 2u);
    }
  }
  else
  {
    id v6 = VOTLogImageExplorer();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10011F320();
    }

    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v5 = [(VOTElementManager *)self _imageExplorerCachedResults];
    id v7 = [v5 countByEnumeratingWithState:&v24 objects:v34 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v25;
      do
      {
        long long v10 = 0;
        do
        {
          if (*(void *)v25 != v9) {
            objc_enumerationMutation(v5);
          }
          long long v11 = *(void **)(*((void *)&v24 + 1) + 8 * (void)v10);
          long long v12 = VOTLogImageExplorer();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            long long v19 = (objc_class *)objc_opt_class();
            long long v20 = NSStringFromClass(v19);
            unsigned int v21 = [v11 includesFeaturesForImageExploration];
            *(_DWORD *)long long buf = 138412802;
            CFStringRef v22 = @"NO";
            if (v21) {
              CFStringRef v22 = @"YES";
            }
            __int16 v29 = v20;
            __int16 v30 = 2112;
            CFStringRef v31 = v22;
            __int16 v32 = 2112;
            id v33 = v11;
            _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%@ - Image Explorer result includes features for exploration: %@, engineResult : %@", buf, 0x20u);
          }
          if ([v11 includesFeaturesForImageExploration])
          {
            id v13 = [objc_alloc((Class)AXSBImageExplorerData) init];
            id v14 = [(VOTElement *)self->_currentElement application];
            id v15 = [v14 bundleIdentifier];
            [v13 setHostAppBundleID:v15];

            id v16 = [(VOTElement *)self->_currentElement label];
            [v13 setAxLabel:v16];

            uint64_t v17 = [(VOTElement *)self->_currentElement customContent];
            [v13 setCustomContent:v17];

            unsigned int v18 = +[AXSpringBoardServer server];
            [v18 launchVoiceOverImageExplorerViewServiceForResult:v11 withData:v13];
          }
          long long v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v23 = [v5 countByEnumeratingWithState:&v24 objects:v34 count:16];
        id v8 = v23;
      }
      while (v23);
    }
  }
}

- (void)_handleOutputElementSummary:(id)a3
{
  id v4 = a3;
  id v5 = [(VOTElementManager *)self _currentElement];
  id v6 = +[VOTOutputRequest createRequest];
  unsigned int v7 = [v4 isKeyEvent];

  if (v7) {
    [v5 addTextualInformationToRequest:v6 options:1 dataPackage:0];
  }
  id v8 = [v5 touchContainer];
  [v8 addTextualInformationToRequest:v6 options:16793600 dataPackage:0];

  if ([v5 doesHaveTraits:kAXWebContentTrait])
  {
    uint64_t v9 = [v5 textMarkerRangeForSelection];
    long long v10 = [v5 stringForTextMarkers:v9];
    if ([v10 length])
    {
      long long v11 = sub_100051804(off_1001EA9E8, @"scrollstatus.selected.text", @"Selected Text");
      long long v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v11, v10);
      id v13 = [v6 addString:v12];

      int v14 = 0;
LABEL_40:

      goto LABEL_41;
    }
  }
  id v15 = [v5 selectedTextRange];
  if (v15 == (id)0x7FFFFFFF) {
    char v17 = 1;
  }
  else {
    char v17 = v7;
  }
  if ((v17 & 1) == 0
    && ((v18 = v15, uint64_t v19 = v16, ([v5 doesHaveTraits:kAXIsEditingTrait] & 1) != 0) || v19))
  {
    if (v19)
    {
      __int16 v29 = objc_msgSend(v5, "attributedValueForRange:", v18, v19);
      if ([v29 length])
      {
        __int16 v30 = sub_100051804(off_1001EA9E8, @"scrollstatus.selected.text", @"Selected Text");
        CFStringRef v31 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v30, v29);
        id v32 = [v6 addString:v31];
      }
    }
    else
    {
      __int16 v29 = objc_msgSend(v5, "attributedValueForRange:", v18, 1);
    }
    [(id)VOTSharedWorkspace addMisspellingsForString:v29];
    long long v20 = [v29 coalescedFontAttributes];

    id v33 = [(VOTElementManager *)self _computeChangedFontAttributes:v20 storedAttributes:0 haveMisspellCheck:1];
    if ([v33 length]) {
      id v34 = [v6 addAttributedString:v33];
    }
    long long v35 = [v5 language];
    [v5 applyTextEditingInformation:v35 request:v6 options:0];

    int v14 = 0;
  }
  else
  {
    long long v20 = [v5 label];
    if ([v20 isAXAttributedString])
    {
      unsigned int v21 = [v20 coalescedFontAttributes];
      CFStringRef v22 = [(VOTElementManager *)self _computeChangedFontAttributes:v21 storedAttributes:0 haveMisspellCheck:1];
      if ([v22 length]) {
        id v23 = [v6 addAttributedString:v22];
      }
    }
    else if ([v20 length])
    {
      id v24 = [v6 addString:v20];
    }
    if ([v5 doesHaveTraits:kAXMathEquationTrait])
    {
      long long v25 = [v5 mathSummary];
      if ([v25 length]) {
        id v26 = [v6 addString:v25];
      }
    }
    if ([v5 isAccessibleGroup]) {
      [v5 applyGroupChildrenCountToRequest:v6];
    }
    if (([v5 doesHaveTraits:kAXScrollableTrait] & 1) != 0
      || [v5 doesHaveTraits:kAXLaunchIconTrait])
    {
      long long v27 = [v5 scrollStatus];
      if ([v27 length]) {
        id v28 = [v6 addString:v27];
      }
    }
    [v5 applyCVMLGeneratedContentToRequest:v6 explicitUserRequest:0];
    int v14 = 1;
  }

  uint64_t v36 = [v5 uiElement];
  double v37 = [v36 numberWithAXAttribute:2123];
  unsigned int v38 = [v37 unsignedIntValue];

  if (v38 >= 2)
  {
    uint64_t v9 = sub_100051804(off_1001EA9E8, @"extended.display", 0);
    id v39 = [v6 addString:v9];
    goto LABEL_40;
  }
LABEL_41:
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472;
  v46[2] = sub_10008BF98;
  v46[3] = &unk_1001B48E0;
  id v40 = v5;
  id v47 = v40;
  __int16 v48 = self;
  id v41 = v6;
  id v49 = v41;
  long long v42 = objc_retainBlock(v46);
  if (v14 && [v40 shouldIncludeRegionDescription])
  {
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_10008C100;
    v43[3] = &unk_1001B5910;
    id v44 = v41;
    unsigned __int8 v45 = v42;
    [(VOTElementManager *)self regionDescriptionForElement:v40 withCompletion:v43];
  }
  else
  {
    ((void (*)(void *))v42[2])(v42);
  }
}

- (void)regionDescriptionForElement:(id)a3 withCompletion:(id)a4
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10008C204;
  v6[3] = &unk_1001B5938;
  id v7 = a4;
  id v5 = v7;
  [a3 regionDescriptionWithCompletion:v6];
}

- (BOOL)elementEligibleToFindTitleElement:(id)a3
{
  id v3 = a3;
  if ([v3 doesHaveTraits:kAXWebContentTrait])
  {
    if (([v3 doesHaveTraits:kAXTextEntryTrait] & 1) != 0
      || ([v3 doesHaveTraits:kAXPopupButtonTrait] & 1) != 0)
    {
      unsigned __int8 v4 = 1;
    }
    else
    {
      unsigned __int8 v4 = [v3 doesHaveTraits:kAXToggleTrait];
    }
  }
  else
  {
    unsigned __int8 v4 = 0;
  }

  return v4;
}

- (BOOL)shouldElement:(id)a3 beCombined:(id)a4 combineLinks:(BOOL)a5
{
  id v8 = a3;
  id v9 = a4;
  if (![(VOTElementManager *)self elementEligibleToFindTitleElement:v8]
    || ![v9 doesHaveTraits:kAXStaticTextTrait]
    || ![v9 doesHaveTraits:kAXWebContentTrait]
    || !a5 && ([v9 doesHaveTraits:kAXLinkTrait] & 1) != 0)
  {
    goto LABEL_8;
  }
  long long v10 = [v8 label];
  if (![v10 length])
  {

    goto LABEL_11;
  }
  long long v11 = [v8 label];
  long long v12 = [v9 label];
  unsigned int v13 = [v11 isEqualToString:v12];

  if (v13)
  {
LABEL_11:
    unsigned __int8 v14 = [v8 elementOnSameLine:v9];
    goto LABEL_9;
  }
LABEL_8:
  unsigned __int8 v14 = 0;
LABEL_9:

  return v14;
}

- (void)updateTitleElementLabels:(id)a3
{
  id v4 = a3;
  id v5 = [v4 titleElements];
  CFStringRef v22 = [v4 application];
  if ([v5 count])
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    unsigned int v21 = v5;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v24;
      uint64_t v10 = kAXButtonTrait | kAXLinkTrait;
      long long v11 = &stru_1001B7888;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v9) {
            objc_enumerationMutation(v6);
          }
          unsigned int v13 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          if (([v13 isEqual:v4] & 1) == 0)
          {
            unsigned __int8 v14 = [v13 label];
            id v15 = [v14 length];

            if (v15)
            {
              uint64_t v16 = [v13 label];
              uint64_t v17 = +[NSString stringWithFormat:@"%@ %@", v11, v16];

              long long v11 = (__CFString *)v17;
            }
            if (([v13 doesHaveTraits:v10] & 1) == 0) {
              [v22 addTitleElementToCache:v13];
            }
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }
      while (v8);
    }
    else
    {
      long long v11 = &stru_1001B7888;
    }

    if ([(__CFString *)v11 length]) {
      [v4 setDefinedLabel:v11];
    }

    id v5 = v21;
  }
  else if ([(VOTElementManager *)self elementEligibleToFindTitleElement:v4])
  {
    if ([v4 doesHaveTraits:kAXToggleTrait])
    {
      id v18 = [v4 nextElement];
      if (([v4 elementOnSameLine:v18] & 1) == 0)
      {
        uint64_t v19 = [v4 previousElement];

        id v18 = (void *)v19;
      }
    }
    else
    {
      id v18 = [v4 previousElement];
    }
    if (([v22 elementActsAsTitleElement:v18] & 1) == 0
      && [(VOTElementManager *)self shouldElement:v4 beCombined:v18 combineLinks:0])
    {
      long long v20 = [v18 label];
      [v4 setDefinedLabel:v20];
    }
  }
}

- (void)_addDescription:(id)a3 toRequest:(id)a4 withOptions:(unint64_t)a5
{
  id v8 = a4;
  id v9 = a3;
  id v10 = [(VOTElementManager *)self previousContextDescriptors];
  [(VOTElementManager *)self _addDescription:v9 toRequest:v8 withOptions:a5 lastSeenContextDescriptors:v10];
}

- (void)_addDescription:(id)a3 toRequest:(id)a4 withOptions:(unint64_t)a5 lastSeenContextDescriptors:(id)a6
{
  id v10 = a3;
  id v11 = a6;
  id v12 = a4;
  unsigned int v13 = objc_opt_new();
  unsigned int v14 = [v10 isEqual:self->_currentElement];
  uint64_t v15 = 64;
  if (v14) {
    uint64_t v15 = 72;
  }
  [v13 setPreviousElement:*(Class *)((char *)&self->super.isa + v15)];
  [v13 setLastSeenContextDescriptors:v11];

  [(VOTElementManager *)self updateTitleElementLabels:v10];
  if ([v10 containedIn:2]) {
    unint64_t v16 = (unint64_t)[v10 rowRange];
  }
  else {
    unint64_t v16 = 0x7FFFFFFFLL;
  }
  self->_lastTableRow = v16;
  if (self->_flags.performedFlickNavigation && ![(id)VOTSharedWorkspace hintsEnabled]) {
    a5 |= 0x2000uLL;
  }
  [v13 setLastSeenLineAndColumn:self->_lastSeenLineAndColumn];
  uint64_t v17 = [v10 cachedCustomRotorActions];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  _DWORD v24[2] = sub_10008C984;
  v24[3] = &unk_1001B5960;
  void v24[4] = self;
  id v18 = [v17 axFilterObjectsUsingBlock:v24];
  uint64_t v19 = [v18 firstObject];
  [v13 setCustomAction:v19];

  if ([v10 includeRoleDescription]) {
    a5 |= 0x1000000uLL;
  }
  if ((a5 & 0x40) != 0 && [v10 doesHaveTraits:kAXTextAreaTrait])
  {
    long long v20 = [(VOTElementManager *)self initialReadAllElement];
    unsigned int v21 = [v20 isEqual:v10];
    uint64_t v22 = 0x80000;
    if (!v21) {
      uint64_t v22 = 0;
    }
    a5 |= v22;
  }
  [v10 addTextualInformationToRequest:v12 options:a5 dataPackage:v13];
  long long v23 = [v12 imageCaptionResults];

  if ([v23 count]) {
    [(VOTElementManager *)self setPreviouslySpokenImageCaptionResults:v23];
  }
}

- (void)_endNativeSliding:(BOOL)a3
{
  id v4 = &kCFBooleanFalse;
  if (a3) {
    id v4 = &kCFBooleanTrue;
  }
  id v6 = +[NSDictionary dictionaryWithObject:*v4 forKey:@"disabledOnTap"];
  id v5 = +[NSNotificationCenter defaultCenter];
  [v5 postNotificationName:off_1001EAB28 object:0 userInfo:v6];

  self->_flags.wasSendingToNativeSlide = 0;
}

- (id)_elementToFocusWhenSwitchingToElementCommunity:(id)a3
{
  id v4 = a3;
  id v5 = [(VOTElementManager *)self _sideAppDividerElement];
  id v6 = [(VOTElementManager *)self _dockElementForDisplay];
  if (v5 == v4)
  {
    id v8 = v4;
  }
  else
  {
    id v7 = [v4 hash];
    if (v7 == [v6 hash])
    {
      id v8 = v6;
    }
    else
    {
      id v8 = [(VOTElementManager *)self _retrieveCachedFocusedElementForElementCommunity:v4];
    }
  }
  id v9 = v8;
  if (!v8)
  {
    id v9 = [v4 firstResponderElementForFocus];
    if (!v9)
    {
      id v9 = [v4 firstElementInApplicationForFocus];
      if (!v9)
      {
        id v9 = [v4 firstElementInApplication];
      }
    }
  }

  return v9;
}

- (id)_additionalElementCommunities
{
  id v3 = [(VOTElementManager *)self cachedAdditionalElementCommunities];

  if (!v3)
  {
    id v4 = +[NSMutableArray array];
    id v5 = +[VOTElement systemWideElement];
    id v6 = [v5 elementForAttribute:1005];

    if (v6)
    {
      id v7 = [v6 uiElement];
      [v7 updateCache:14000];

      id v8 = [v6 elementsForAttribute:14000];
      [v4 addObjectsFromArray:v8];
    }
    id v9 = +[VOTElement systemWideElement];
    id v10 = [v9 elementForAttribute:1006];

    if (v10) {
      [v4 addObject:v10];
    }
    id v11 = +[VOTElement systemWideElement];
    id v12 = [v11 elementForAttribute:1010];

    if (v12) {
      [v4 addObject:v12];
    }
    unsigned int v13 = +[VOTElement systemAppApplication];
    unsigned int v14 = [v13 elementForAttribute:1513];

    if (v14) {
      [v4 addObject:v14];
    }
    [(VOTElementManager *)self setCachedAdditionalElementCommunities:v4];
  }

  return [(VOTElementManager *)self cachedAdditionalElementCommunities];
}

- (id)_dockElementForDisplay
{
  id v2 = [(VOTElement *)self->_currentElement uiElement];
  id v3 = [v2 numberWithAXAttribute:2123];
  id v4 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v3 unsignedIntValue]);

  id v5 = +[VOTElement systemAppApplication];
  id v6 = [v5 elementForParameterizedAttribute:91513 parameter:v4];

  return v6;
}

- (id)_allElementCommunitiesWithFocusedApplications:(id)a3
{
  id v4 = a3;
  id v5 = +[NSMutableArray array];
  [v5 addObjectsFromArray:v4];

  id v6 = [(VOTElementManager *)self _sideAppDividerElement];
  if (v6)
  {
    if (![v5 count]) {
      _AXAssert();
    }
    if ([v5 count]) {
      objc_msgSend(v5, "insertObject:atIndex:", v6, (char *)objc_msgSend(v5, "count") - 1);
    }
  }
  id v7 = [(VOTElementManager *)self _dockElementForDisplay];
  if (v7) {
    [v5 addObject:v7];
  }
  id v8 = [(VOTElementManager *)self _additionalElementCommunities];
  [v5 addObjectsFromArray:v8];

  return v5;
}

- (id)_getNextFocusedElementInElementCommunityPrevious:(BOOL)a3 shouldUseCache:(BOOL)a4 shouldWrapAround:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  id v9 = [(VOTElementManager *)self _allElementCommunitiesWithFocusedApplications:self->_currentApplications];
  if (self->_currentElement)
  {
    id v10 = -[VOTElementManager _elementCommunityForElement:](self, "_elementCommunityForElement:");
    id v11 = (char *)[v9 indexOfObject:v10];
    if (v11 == (char *)0x7FFFFFFFFFFFFFFFLL || (id v12 = v11, (unint64_t)[v9 count] < 2))
    {
      _AXLogWithFacility();
      unsigned int v13 = 0;
    }
    else
    {
      if (a3)
      {
        unsigned int v13 = 0;
        unsigned int v14 = v12 - 1;
        while (1)
        {
          if (((unint64_t)v14 & 0x8000000000000000) != 0)
          {
            if (!v5) {
              goto LABEL_17;
            }
            unsigned int v14 = (char *)[v9 count] - 1;
          }
          uint64_t v15 = [v9 objectAtIndexedSubscript:v14];
          unint64_t v16 = v15;
          if (v6) {
            [(VOTElementManager *)self _elementToFocusWhenSwitchingToElementCommunity:v15];
          }
          else {
          uint64_t v17 = [v15 lastElementInApplication];
          }

          if (v17)
          {
            if (![v17 isRemoteElement]) {
              break;
            }
          }

          --v14;
          unsigned int v13 = v17;
          if (v14 == v12) {
            goto LABEL_35;
          }
        }
LABEL_36:
        unsigned int v13 = v17;
        goto LABEL_18;
      }
      unsigned int v13 = 0;
      id v19 = v12 + 1;
      while (1)
      {
        id v20 = [v9 count];
        unsigned int v21 = v19 == v20 ? 0 : (char *)v19;
        if (v19 == v20 && !v5) {
          break;
        }
        uint64_t v22 = [v9 objectAtIndexedSubscript:v21];
        unint64_t v16 = v22;
        if (v6) {
          [(VOTElementManager *)self _elementToFocusWhenSwitchingToElementCommunity:v22];
        }
        else {
        uint64_t v17 = [v22 firstElementInApplication];
        }

        if (v17 && ![v17 isRemoteElement]) {
          goto LABEL_36;
        }

        id v19 = v21 + 1;
        unsigned int v13 = v17;
        if (v21 + 1 == v12)
        {
LABEL_35:
          unint64_t v16 = 0;
          goto LABEL_36;
        }
      }
    }
LABEL_17:
    unint64_t v16 = 0;
LABEL_18:

    goto LABEL_20;
  }
  unsigned int v13 = 0;
  unint64_t v16 = 0;
LABEL_20:

  return v13;
}

- (void)_handleSwitchToElementCommunityPrevious:(BOOL)a3 event:(id)a4
{
  BOOL v4 = a3;
  id v6 = a4;
  id v7 = [(VOTElementManager *)self _getNextFocusedElementInElementCommunityPrevious:v4 shouldUseCache:1 shouldWrapAround:1];
  if (v7)
  {
    [(VOTElementManager *)self _echoDifferentElement:v7 forEvent:v6];
    if (v4) {
      uint64_t v8 = 2;
    }
    else {
      uint64_t v8 = 1;
    }
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10008D22C;
    v11[3] = &unk_1001B3448;
    v11[4] = self;
    id v12 = v7;
    [v12 scrollToElementForDirectional:v8 withCompletion:v11];
  }
  else
  {
    id v9 = +[VOTOutputManager outputManager];
    id v10 = +[VOSOutputEvent BoundaryEncountered];
    [v9 sendEvent:v10];
  }
}

- (void)_handleSwitchToPreviousElementCommunity:(id)a3
{
}

- (void)_handleSwitchToNextElementCommunity:(id)a3
{
}

- (void)_handleEdgeSwipeTop:(id)a3
{
  id v3 = +[VOTElement springBoardApplication];
  [v3 showBulletinBoard:1];
}

- (void)_handleEdgeSwipeBottom:(id)a3
{
  id v3 = +[VOTElement springBoardApplication];
  [v3 showControlCenter:1];
}

- (void)_handleBottomEdgePanDown:(id)a3
{
  if (objc_msgSend((id)VOTSharedWorkspace, "supportsHomeGestures", a3))
  {
    int IsPhone = AXDeviceIsPhone();
    BOOL v4 = +[AXSpringBoardServer server];
    id v5 = v4;
    if (IsPhone) {
      [v4 toggleReachability];
    }
    else {
      [v4 toggleDock];
    }
  }
}

- (void)_handleBottomEdgePanShort:(id)a3
{
  if (objc_msgSend((id)VOTSharedWorkspace, "supportsHomeGestures", a3))
  {
    id v3 = +[AXSettings sharedInstance];
    unsigned int v4 = [v3 liveRecognitionOverlayOpen];

    if (v4)
    {
      id v8 = +[VOTMagnifierService shared];
      [v8 hideDetectionUI];
    }
    else
    {
      id v5 = +[AXSpringBoardServer server];
      int v6 = [v5 dismissBuddyIfNecessary];

      if ((v6 & 1) == 0)
      {
        id v7 = (void *)VOTSharedWorkspace;
        _[v7 performHomeButtonPress];
      }
    }
  }
}

- (void)_handleBottomEdgePanLong:(id)a3
{
  if (objc_msgSend((id)VOTSharedWorkspace, "supportsHomeGestures", a3)
    && ![(VOTElementManager *)self isContinuitySessionActive])
  {
    unsigned int v4 = VOTLogCommon();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "App switcher gesture detected. Will perform openAppSwitcher command.", v6, 2u);
    }

    id v5 = +[AXSpringBoardServer server];
    [v5 openAppSwitcher];
  }
}

- (void)_handleBottomEdgePanExtraLong:(id)a3
{
  id v3 = +[AXSpringBoardServer server];
  unsigned int v4 = [v3 isTypeToSiriVisible];

  if (v4)
  {
    if ([(id)VOTSharedWorkspace supportsHomeGestures])
    {
      id v5 = +[AXSpringBoardServer server];
      unsigned __int8 v6 = [v5 dismissBuddyIfNecessary];

      if ((v6 & 1) == 0)
      {
        id v7 = (void *)VOTSharedWorkspace;
        _[v7 performHomeButtonPress];
      }
    }
  }
  else
  {
    id v8 = +[AXPISystemActionHelper sharedInstance];
    [v8 activateTypeToSiri];
  }
}

- (void)_handleTopEdgePanShort:(id)a3
{
  if (objc_msgSend((id)VOTSharedWorkspace, "supportsHomeGestures", a3))
  {
    id v3 = +[VOTElement springBoardApplication];
    unsigned int v4 = +[AXSpringBoardServer server];
    unsigned __int8 v5 = objc_msgSend(v3, "showControlCenter:", objc_msgSend(v4, "isControlCenterVisible") ^ 1);

    if ((v5 & 1) == 0)
    {
      id v7 = +[VOTOutputManager outputManager];
      unsigned __int8 v6 = +[VOSOutputEvent BoundaryEncountered];
      [v7 sendEvent:v6];
    }
  }
}

- (void)_handleTopEdgePanLong:(id)a3
{
  if (objc_msgSend((id)VOTSharedWorkspace, "supportsHomeGestures", a3))
  {
    id v3 = +[VOTElement systemAppApplication];
    unsigned __int8 v4 = [v3 showBulletinBoard:1];

    if ((v4 & 1) == 0)
    {
      id v6 = +[VOTOutputManager outputManager];
      unsigned __int8 v5 = +[VOSOutputEvent BoundaryEncountered];
      [v6 sendEvent:v5];
    }
  }
}

- (void)_handleSwitchToLeftElementCommunity:(id)a3
{
  id v6 = a3;
  unsigned __int8 v4 = +[VOTElement springBoardApplication];
  unsigned int v5 = [v4 applicationIsRTL];

  if (v5) {
    [(VOTElementManager *)self _handleSwitchToNextElementCommunity:v6];
  }
  else {
    [(VOTElementManager *)self _handleSwitchToPreviousElementCommunity:v6];
  }
}

- (void)_handleSwitchToRightElementCommunity:(id)a3
{
  id v6 = a3;
  unsigned __int8 v4 = +[VOTElement springBoardApplication];
  unsigned int v5 = [v4 applicationIsRTL];

  if (v5) {
    [(VOTElementManager *)self _handleSwitchToPreviousElementCommunity:v6];
  }
  else {
    [(VOTElementManager *)self _handleSwitchToNextElementCommunity:v6];
  }
}

- (void)_handleOpenVoiceOverOptions:(id)a3
{
  +[NSURL URLWithString:@"prefs:root=ACCESSIBILITY&path=VOICEOVER_TITLE"];
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = +[LSApplicationWorkspace defaultWorkspace];
  [v3 openSensitiveURL:v4 withOptions:0];
}

- (void)_handleNextKeyboardLanguage:(id)a3
{
}

- (void)_handleShowDetectionUIWithMagnifierService:(id)a3
{
  id v3 = +[VOTMagnifierService shared];
  [v3 showDetectionUI];
}

- (void)_handleHideDetectionUIWithMagnifierService:(id)a3
{
  id v3 = +[VOTMagnifierService shared];
  [v3 hideDetectionUI];
}

- (void)_handleToggleSideAppIfAvailableInGestures:(id)a3
{
  id v3 = a3;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = [&off_1001C7028 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(&off_1001C7028);
        }
        id v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if ([v3 containsObject:v8])
        {
          id v9 = +[AXSpringBoardServer server];
          objc_msgSend(v9, "performMedusaGesture:", objc_msgSend(v8, "unsignedIntegerValue"));

          goto LABEL_11;
        }
      }
      id v5 = [&off_1001C7028 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

- (void)_handleToggleSideApp:(id)a3
{
  id v4 = +[AXSpringBoardServer server];
  id v5 = [v4 allowedMedusaGestures];

  [(VOTElementManager *)self _handleToggleSideAppIfAvailableInGestures:v5];
}

- (BOOL)_continueTrackingRoadElementWithPoint:(CGPoint)a3
{
  BOOL result = 0;
  if (self->_shouldContinueRoadTracking)
  {
    double y = a3.y;
    double x = a3.x;
    if ((id)[(VOTElement *)self->_currentElement mapFeatureType] == (id)1
      && -[VOTElement roadContainsTrackingPoint:](self->_currentElement, "roadContainsTrackingPoint:", x, y))
    {
      return 1;
    }
  }
  return result;
}

- (BOOL)_continueTrackingKeyboardKey:(id)a3
{
  unint64_t v4 = (unint64_t)a3;
  currentElement = self->_currentElement;
  unsigned int v6 = v4 | currentElement;
  if (v4 | (unint64_t)currentElement) {
    unsigned int v6 = ![(VOTElement *)currentElement isEqual:v4];
  }
  if (!v4) {
    unsigned int v6 = 1;
  }
  BOOL v7 = !self->_flags.usePenumbraForKeyboardKeys || v6 == 0;
  if (!v7 && [(VOTElement *)self->_currentElement doesHaveTraits:kAXKeyboardKeyTrait])
  {
    [(VOTElement *)self->_currentElement centerPoint];
    SCRCMathGetDistanceBetweenPoints();
    double v9 = v8;
    [(VOTElementManager *)self keyboardKeyPenumbra:self->_currentElement];
    if (v9 < v10)
    {
      BOOL v12 = 1;
      goto LABEL_15;
    }
    long long v11 = VOTLogCommon();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned int v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Canceling alt keyboard activation timer since we moved too far", v14, 2u);
    }

    [(SCRCTargetSelectorTimer *)self->_keyboardAlternativeModeActivationTimer cancel];
  }
  BOOL v12 = 0;
LABEL_15:

  return v12;
}

- (void)_setDirectInteractionElement:(id)a3
{
  id v23 = a3;
  [v23 frame];
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  BOOL v12 = +[VOTElement systemWideElement];
  objc_msgSend(v12, "convertRect:fromContextId:", objc_msgSend(v23, "windowContextId"), v5, v7, v9, v11);
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;

  unsigned int v21 = +[VOTDisplayManager displayManager];
  objc_msgSend(v21, "setCursorFrame:", v14, v16, v18, v20);

  [(VOTElementManager *)self _setCurrentElement:v23];
  if (![(VOTElementManager *)self avoidAnnouncingDirectTouchArea])
  {
    id v22 = +[VOTOutputRequest createRequest];
    [(VOTElementManager *)self _addDescription:v23 toRequest:v22 withOptions:0x4000];
    [v22 send];
  }
}

- (void)setDirectInteractionElement:(id)a3
{
}

- (BOOL)_isPoint:(CGPoint)a3 withinRangeForDividerElement:(id)a4
{
  double y = a3.y;
  double x = a3.x;
  id v6 = a4;
  if (!v6) {
    _AXAssert();
  }
  [v6 frame];
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  double v15 = (char *)[(id)VOTSharedWorkspace deviceOrientation];
  CGFloat v16 = v8;
  CGFloat v17 = v10;
  CGFloat v18 = v12;
  CGFloat v19 = v14;
  if ((unint64_t)(v15 - 1) > 1)
  {
    if (y >= CGRectGetMinY(*(CGRect *)&v16) + -10.0)
    {
      v25.origin.double x = v8;
      v25.origin.double y = v10;
      v25.size.double width = v12;
      v25.size.double height = v14;
      if (y < CGRectGetMaxY(v25) + 10.0)
      {
        v26.origin.double x = v8;
        v26.origin.double y = v10;
        v26.size.double width = v12;
        v26.size.double height = v14;
        double y = CGRectGetMidY(v26);
        goto LABEL_10;
      }
    }
LABEL_11:
    unsigned __int8 v21 = 0;
    goto LABEL_12;
  }
  if (x < CGRectGetMinX(*(CGRect *)&v16) + -10.0) {
    goto LABEL_11;
  }
  v23.origin.double x = v8;
  v23.origin.double y = v10;
  v23.size.double width = v12;
  v23.size.double height = v14;
  if (x >= CGRectGetMaxX(v23) + 10.0) {
    goto LABEL_11;
  }
  v24.origin.double x = v8;
  v24.origin.double y = v10;
  v24.size.double width = v12;
  v24.size.double height = v14;
  double x = CGRectGetMidX(v24);
LABEL_10:
  double v20 = -[VOTElement initWithPosition:]([VOTElement alloc], "initWithPosition:", x, y);
  unsigned __int8 v21 = [(VOTElement *)v20 isEqual:v6];

LABEL_12:
  return v21;
}

- (id)_sideAppDividerElement
{
  if (![(VOTElementManager *)self didCacheSideAppDividerElement])
  {
    id v3 = +[VOTElement systemAppApplication];
    double v4 = [v3 elementForAttribute:5040];
    [(VOTElementManager *)self setCachedSideAppDividerElement:v4];

    [(VOTElementManager *)self setDidCacheSideAppDividerElement:1];
  }

  return [(VOTElementManager *)self cachedSideAppDividerElement];
}

- (id)_copySideAppDividerElementIfApplicableForPoint:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  id v6 = [(VOTElementManager *)self _sideAppDividerElement];
  if (v6
    && -[VOTElementManager _isPoint:withinRangeForDividerElement:](self, "_isPoint:withinRangeForDividerElement:", v6, x, y))
  {
    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

- (id)_currentMedusaApplications
{
  currentApplications = self->_currentApplications;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10008E194;
  v5[3] = &unk_1001B5988;
  v5[4] = self;
  id v3 = [(NSArray *)currentApplications ax_filteredArrayUsingBlock:v5];

  return v3;
}

- (id)_handleProtectedAppLogicForEvent:(id)a3 element:(id)a4 point:(CGPoint)a5
{
  CGFloat y = a5.y;
  CGFloat x = a5.x;
  id v9 = a4;
  CGFloat v10 = [a3 objectForIndex:113];
  if (!v10)
  {
    id v16 = 0;
    goto LABEL_41;
  }
  double v11 = [(VOTElementManager *)self _currentMedusaApplications];
  CGFloat v12 = objc_msgSend(v11, "ax_filteredArrayUsingBlock:", &stru_1001B59A8);

  if ((unint64_t)[v12 count] >= 2)
  {
    if ((AXDeviceSupportsSideApp() & 1) == 0)
    {
      double v13 = VOTLogCommon();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_10011F3D4();
      }
    }
    int v14 = sub_100050E5C();
    if (v14)
    {
      if (([v9 isAccessibleElement] & 1) == 0)
      {
        LOBYTE(v14) = [v9 isTouchContainer];
        if (!v9) {
          goto LABEL_16;
        }
LABEL_11:
        if ((v14 & 1) == 0)
        {
          id v15 = [(VOTElementManager *)self _elementCommunityForElement:v9];
          goto LABEL_27;
        }
LABEL_16:
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        id v17 = v12;
        id v15 = [v17 countByEnumeratingWithState:&v27 objects:v31 count:16];
        if (v15)
        {
          uint64_t v18 = *(void *)v28;
          while (2)
          {
            for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v28 != v18) {
                objc_enumerationMutation(v17);
              }
              double v20 = *(void **)(*((void *)&v27 + 1) + 8 * i);
              objc_msgSend(v20, "frame", (void)v27);
              v33.CGFloat x = x;
              v33.CGFloat y = y;
              if (CGRectContainsPoint(v34, v33))
              {
                id v15 = v20;
                goto LABEL_26;
              }
            }
            id v15 = [v17 countByEnumeratingWithState:&v27 objects:v31 count:16];
            if (v15) {
              continue;
            }
            break;
          }
        }
LABEL_26:

LABEL_27:
        if (objc_msgSend(v10, "BOOLValue", (void)v27))
        {
          if (v15 && [v12 containsObject:v15])
          {
            unsigned __int8 v21 = self;
            id v22 = v15;
          }
          else
          {
            unsigned __int8 v21 = self;
            id v22 = 0;
          }
          [(VOTElementManager *)v21 setFirstTrackedAppInGesture:v22];
        }
        else
        {
          CGRect v23 = [(VOTElementManager *)self firstTrackedAppInGesture];

          id v16 = 0;
          if (!v23 || !v15) {
            goto LABEL_39;
          }
          if ([v12 containsObject:v15])
          {
            CGRect v24 = [(VOTElementManager *)self firstTrackedAppInGesture];
            unsigned __int8 v25 = [v15 isEqual:v24];

            if ((v25 & 1) == 0)
            {
              id v16 = v15;
LABEL_39:

              goto LABEL_40;
            }
          }
        }
        id v16 = 0;
        goto LABEL_39;
      }
      LOBYTE(v14) = 0;
    }
    if (!v9) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  id v16 = 0;
LABEL_40:

LABEL_41:

  return v16;
}

- (void)_handleTracking:(id)a3
{
  double v4 = (VOTEvent *)a3;
  if (AXDeviceIsTV())
  {
    [(VOTElementManager *)self _tvOS_handleIdleAndTrackingEvents:v4];
    goto LABEL_104;
  }
  [(NSLock *)self->_trackingLock lock];
  if (!self->_mostRecentTrackingEvent)
  {
    [(NSLock *)self->_trackingLock unlock];
    goto LABEL_104;
  }
  [(VOTElementManager *)self setLastElementChangeAction:3];
  [(VOTElementManager *)self setLastUserElementTouchTime:CFAbsoluteTimeGetCurrent()];
  mostRecentTrackingEvent = self->_mostRecentTrackingEvent;
  if (mostRecentTrackingEvent)
  {
    id v6 = mostRecentTrackingEvent;

    id v7 = self->_mostRecentTrackingEvent;
    self->_mostRecentTrackingEvent = 0;

    double v4 = v6;
  }
  [(NSLock *)self->_trackingLock unlock];
  [(VOTEvent *)v4 touchPoint];
  double v9 = v8;
  double v11 = v10;
  if (-[VOTElementManager _continueTrackingRoadElementWithPoint:](self, "_continueTrackingRoadElementWithPoint:"))
  {
    id v12 = [(VOTElementManager *)self _currentElement];
  }
  else
  {
    id v12 = -[VOTElementManager _copySideAppDividerElementIfApplicableForPoint:](self, "_copySideAppDividerElementIfApplicableForPoint:", v9, v11);
  }
  id v13 = v12;
  if (!v12) {
    id v13 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", v9, v11);
  }
  int v14 = -[VOTElementManager _handleProtectedAppLogicForEvent:element:point:](self, "_handleProtectedAppLogicForEvent:element:point:", v4, v13, v9, v11);
  id v15 = v14;
  if (v14)
  {
    id v16 = v14;

    id v13 = v16;
  }
  objc_msgSend((id)VOTSharedWorkspace, "convertDevicePointToZoomedPoint:", v9, v11);
  self->_fingerLocation.CGFloat x = v17;
  self->_fingerLocation.CGFloat y = v18;
  [(VOTElementManager *)self _resetOtherTapInputModes];
  [(VOTElementManager *)self _resetSearchType];
  [(VOTElementManager *)self _resetRotorTextNavigation];
  [(VOTElementManager *)self _cancelPreviousElementSearch];
  CGFloat v19 = VOTLogElement();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
    sub_10011F43C();
  }

  [(VOTElementManager *)self _stopReadAll];
  if ([v13 doesHaveTraits:kAXSpacerTrait])
  {

    id v13 = 0;
  }
  uint64_t v60 = kAXAllowsDirectInteractionTrait;
  if (objc_msgSend(v13, "doesHaveTraits:"))
  {
    [(NSMutableSet *)self->_directInteractionElements addObject:v13];
    if ([(VOTElementManager *)self inDirectTouchMode])
    {
      double v20 = [(VOTEvent *)v4 objectForIndex:108];
      unsigned int v21 = [v20 isDownEvent];

      if (v21) {
        [(VOTElementManager *)self setShouldTurnTrackingIntoDirectTouch:1];
      }
    }
    else
    {
      id v22 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:startWithElement:", v13, v9, v11);
      CGRect v23 = v22;
      if (v22)
      {
        id v24 = v22;

        id v13 = v24;
      }
    }
  }
  uint64_t v25 = [(VOTElementManager *)self _currentElement];
  CGRect v26 = (void *)v25;
  if ((unint64_t)v13 | v25) {
    unsigned int v27 = [(id)v25 isEqual:v13];
  }
  else {
    unsigned int v27 = 1;
  }
  if ([(VOTElementManager *)self _continueTrackingKeyboardKey:v13])
  {
    id v28 = v26;

    unsigned int v27 = 1;
    id v13 = v28;
  }
  unsigned __int8 v29 = 1;
  [v13 setShouldSkipValidateElement:1];
  if (v13)
  {
    if (sub_100050E5C()) {
      unsigned __int8 v29 = [v13 isTouchContainer];
    }
    else {
      unsigned __int8 v29 = 0;
    }
  }
  self->_flags.focusIsOnElement = v29 ^ 1;
  long long v30 = +[AXSubsystemVoiceOver sharedInstance];
  unsigned __int8 v31 = [v30 ignoreLogging];

  if ((v31 & 1) == 0)
  {
    id v32 = +[AXSubsystemVoiceOver identifier];
    CGPoint v33 = AXLoggerForFacility();

    os_log_type_t v34 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v33, v34))
    {
      id v59 = v15;
      long long v35 = AXColorizeFormatLog();
      id v57 = v13;
      uint64_t v58 = v27;
      id v56 = v26;
      uint64_t v36 = _AXStringForArgs();
      double v37 = v33;
      if (os_log_type_enabled(v37, v34))
      {
        *(_DWORD *)long long buf = 138543362;
        id v62 = v36;
        _os_log_impl((void *)&_mh_execute_header, v37, v34, "%{public}@", buf, 0xCu);
      }

      id v15 = v59;
    }
  }
  if (v13) {
    char v38 = 1;
  }
  else {
    char v38 = v27;
  }
  if ((v38 & 1) == 0)
  {
    [v26 frame];
    v63.CGFloat x = v9;
    v63.CGFloat y = v11;
    if (CGRectContainsPoint(v64, v63) && [v26 doesHaveTraits:kAXWebContentTrait])
    {
      id v13 = v26;
      unsigned int v27 = 1;
    }
    else
    {
      unsigned int v27 = 0;
      id v13 = 0;
    }
  }
  unsigned int v39 = objc_msgSend(v13, "isReadingContent", v56, v57, v58);
  if ([v13 doesHaveTraits:kAXTextAreaTrait]
    && ([v13 doesHaveTraits:kAXStaticTextTrait] & 1) == 0)
  {
    long long v42 = [v13 value];
    BOOL v40 = [v42 length] != 0;

    if (v13) {
      goto LABEL_51;
    }
  }
  else
  {
    BOOL v40 = 0;
    if (v13)
    {
LABEL_51:
      if (v27 && !self->_flags.lastEventWasIdle && !self->_flags.touchingOnNothing)
      {
        if (v40)
        {
          id v54 = -[VOTElement initWithPosition:startWithElement:]([VOTElement alloc], "initWithPosition:startWithElement:", v13, v9, v11);
          unsigned int v55 = v54;
          if (v54)
          {
            if (![(VOTElement *)v54 isEqual:self->_currentSubElement])
            {
              [(VOTElementManager *)self _echoDifferentElement:v55 forEvent:v4 onlyOutputTouchContainerAndSounds:0 shouldPlayGuideWireSound:1 isProtectedApp:v15 != 0];
              [(VOTElementManager *)self _setCurrentElement:v13];
              objc_storeStrong((id *)&self->_currentSubElement, v55);
            }
          }
          else if (![(VOTElementManager *)self _echoLineInElement:v13 forEvent:v4 forDifferentElement:0])
          {
            [(VOTElementManager *)self _echoNoElementForEvent:v4];
          }
        }
        else if ((v39 & 1) == 0)
        {
          [(VOTElementManager *)self _echoSameElement:v13 forEvent:v4];
          self->_flags.touchingOnNothing = 0;
        }
        goto LABEL_75;
      }
      if ([(VOTElementManager *)self inDirectTouchMode]
        && [v13 doesHaveTraits:v60]
        && ([v13 avoidAnnouncingDirectTouchArea] & 1) != 0)
      {
        goto LABEL_61;
      }
      if ((v39 | v40) == 1)
      {
        if ((v27 | v39 ^ 1))
        {
          if (v27) {
            goto LABEL_61;
          }
        }
        else if (self->_bookSubelement)
        {
LABEL_61:
          if (v40
            && ![(VOTElementManager *)self _echoLineInElement:v13 forEvent:v4 forDifferentElement:v27 ^ 1])
          {
            id v41 = [v13 value];
            if ([v41 isAXAttributedString]
              && [v41 hasAttribute:UIAccessibilityTokenPlaceholder])
            {
              [(VOTElementManager *)self _echoDifferentElement:v13 forEvent:v4];
            }
            else
            {
              [(VOTElementManager *)self _echoNoElementForEvent:v4];
            }
          }
          if (([v13 isTouchContainer] & 1) == 0) {
            self->_timeSpentOnNothing = -3061152000.0;
          }
          self->_flags.touchingOnNothing = !self->_flags.focusIsOnElement;
          currentSubElement = self->_currentSubElement;
          self->_currentSubElement = 0;

          goto LABEL_75;
        }
      }
      -[VOTElementManager _echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:isProtectedApp:](self, "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:isProtectedApp:", v13, v4);
      goto LABEL_61;
    }
  }
  self->_flags.touchingOnNothing = 1;
  [(VOTElementManager *)self _echoNoElementForEvent:v4];
  long long v43 = +[VOTOutputManager outputManager];
  [v43 stopSpeakingAtBoundary:0];

LABEL_75:
  int v45 = sub_100050E5C();
  if (v45)
  {
    if ([v13 isAccessibleElement]) {
      LOBYTE(v45) = 0;
    }
    else {
      LOBYTE(v45) = [v13 isTouchContainer];
    }
  }
  if (v13 && (v45 & 1) == 0)
  {
    if (![(VOTElement *)self->_lastValidElement isEqual:v13]) {
      objc_storeStrong((id *)&self->_lastValidElement, v13);
    }
    [(VOTElementManager *)self _setCurrentElement:self->_lastValidElement isProtectedApp:v15 != 0];
    uint64_t v46 = self->_lastValidElement;

    id v13 = v46;
  }
  if (v39) {
    [(VOTElementManager *)self _echoLineInBookElement:v13 forEvent:v4];
  }
  uint64_t v47 = kAXAllowsNativeSlidingTrait;
  if ([v13 doesHaveTraits:kAXAllowsNativeSlidingTrait])
  {
    if (!self->_flags.wasSendingToNativeSlide && v13)
    {
      id v48 = [v13 copy];
      if (v48)
      {
        id v49 = +[NSDictionary dictionaryWithObject:v48 forKey:@"element"];
      }
      else
      {
        id v49 = 0;
      }
      CGRect v50 = +[NSNotificationCenter defaultCenter];
      [v50 postNotificationName:off_1001EAB20 object:0 userInfo:v49];

      self->_flags.wasSendingToNativeSlide = 1;
    }
  }
  else if (self->_flags.wasSendingToNativeSlide && ([v13 doesHaveTraits:v47] & 1) == 0)
  {
    [(VOTElementManager *)self _endNativeSliding:0];
  }
  if ([v13 doesHaveTraits:kAXLaunchIconTrait])
  {
    if (([v13 isInFolder] & 1) == 0)
    {
      unsigned int v51 = [(VOTEvent *)v4 objectForIndex:112];
      unsigned __int8 v52 = [v51 BOOLValue];

      if ((v52 & 1) == 0) {
        [(NSMutableArray *)self->_cachedLaunchIcons removeAllObjects];
      }
    }
  }
  [(VOTElementManager *)self hideVisualRotor];
  self->_lastItemSelectionFromTouch = CFAbsoluteTimeGetCurrent();
  self->_flags.lastEventWasIdle = 0;
  if ([(id)VOTSharedWorkspace reachabilityActive]
    && !self->_flags.setReachabilityIsActiveWhileFingerDown)
  {
    [(SCRCTargetSelectorTimer *)self->_reachabilityWaitForTrackingTimer cancel];
    uint64_t v53 = +[AXSpringBoardServer server];
    [v53 setReachabilityActive:1];

    self->_flags.setReachabilityIsActiveWhileFingerDown = 1;
  }

LABEL_104:
}

- (void)_handleKeyboardContinuousPathDidBegin:(id)a3
{
  self->_flags.continuousPathKeyboardBegan = 1;
  id v3 = VOTLogCommon();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Continuous path did begin", v6, 2u);
  }

  double v4 = +[VOTOutputManager outputManager];
  [v4 playSoundFast:@"Sounds/VOTOrbSound1-OrbHW.aiff"];

  double v5 = +[AXHapticFeedbackManager sharedManager];
  [v5 playHapticFeedbackForType:13];
}

- (void)_continuousPathIdleTimer:(id)a3
{
  double v4 = VOTLogCommon();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    continuousPathSuggestion = self->_continuousPathSuggestion;
    int v17 = 138412290;
    CGFloat v18 = continuousPathSuggestion;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Continuous path idle timer fired: %@", (uint8_t *)&v17, 0xCu);
  }

  if ([(NSString *)self->_continuousPathSuggestion length]
    && (CFAbsoluteTimeGetCurrent() - *(double *)&qword_1001EB9A8 > 1.0
     || ([(id)qword_1001EB9B0 isEqualToString:self->_continuousPathSuggestion] & 1) == 0))
  {
    id v6 = +[VOTOutputRequest createRequest];
    id v7 = [(VOTElement *)self->_firstResponderElement application];
    double v8 = [v7 currentSoftwareKeyboardLanguage];
    [v6 setKeyboardLanguageHint:v8];

    double v9 = [(id)VOTSharedWorkspace selectedLanguage];
    double v10 = v9;
    if (v9)
    {
      id v11 = v9;
    }
    else
    {
      id v11 = [v6 keyboardLanguageHint];
    }
    id v12 = v11;

    id v13 = [v6 addString:self->_continuousPathSuggestion withLanguage:v12];
    int v14 = [v6 lastAction];
    [v14 setObject:kCFBooleanTrue forVariant:50];

    [v6 setBrailleType:2];
    [v6 setGeneratesBraille:1];
    [(VOTElementManager *)self sendRequest:v6];
    id v15 = [(NSString *)self->_continuousPathSuggestion copy];
    id v16 = (void *)qword_1001EB9B0;
    qword_1001EB9B0 = (uint64_t)v15;

    qword_1001EB9A8 = CFAbsoluteTimeGetCurrent();
  }
}

- (void)_reachabilityWaitForTrackingTimeout
{
  id v2 = +[AXSpringBoardServer server];
  [v2 setReachabilityActive:0];
}

- (void)handleReachabilityToggled
{
  if ([(id)VOTSharedWorkspace reachabilityActive]) {
    [(SCRCTargetSelectorTimer *)self->_reachabilityWaitForTrackingTimer dispatchAfterDelay:8.0];
  }

  [(VOTElementManager *)self updateCurrentElementFrame];
}

- (void)_reachabilityHandleTrackingStopped
{
  self->_flags.setReachabilityIsActiveWhileFingerDown = 0;
  [(SCRCTargetSelectorTimer *)self->_reachabilityWaitForTrackingTimer dispatchAfterDelay:1.5];
}

- (void)_handleTapAndHoldEventMonitor:(id)a3
{
  id v4 = a3;
  double v5 = v4;
  if (self->_keyboardAlternativesVisible)
  {
    [v4 touchPoint];
    SCRCMathGetDistanceBetweenPoints();
    if (v6 <= 15.0)
    {
      if ([(VOTElementManager *)self _shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent:v5])
      {
        [(VOTElementManager *)self _dismissAlternativeKeyboardKeys];
      }
    }
    else
    {
      [v5 touchPoint];
      self->_keyboardAlternativeVisibleTrackingPoint.CGFloat x = v7;
      self->_keyboardAlternativeVisibleTrackingPoint.CGFloat y = v8;
      [(SCRCTargetSelectorTimer *)self->_alternativeKeyDismissalTimer cancel];
      [(SCRCTargetSelectorTimer *)self->_alternativeKeyDismissalTimer dispatchAfterDelay:5.0];
    }
  }
  else if (self->_flags.continuousPathKeyboardBegan)
  {
    double v9 = VOTLogCommon();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      unsigned int v10 = [(SCRCTargetSelectorTimer *)self->_continuousPathIdleTimer isPending];
      int v29 = 67109120;
      unsigned int v30 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "KB tracking: %d", (uint8_t *)&v29, 8u);
    }

    if ((![(SCRCTargetSelectorTimer *)self->_continuousPathIdleTimer isPending]
       || [(SCRCTargetSelectorTimer *)self->_continuousPathIdleTimer isCancelled])
      && !self->_flags.isContinuousPathOutsideBounds)
    {
      id v11 = VOTLogCommon();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        LOWORD(v29) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Waiting to speak suggestions for continuous path", (uint8_t *)&v29, 2u);
      }

      [(SCRCTargetSelectorTimer *)self->_continuousPathIdleTimer dispatchAfterDelay:0.45];
    }
    id v12 = [(VOTElement *)self->_currentElement application];
    id v13 = [v12 activeKeyboard];

    if ([v13 isKeyboardContinuousPathTracking])
    {
      [v13 frame];
      CGFloat v15 = v14;
      CGFloat v17 = v16;
      CGFloat v19 = v18;
      CGFloat v21 = v20;
      [v5 touchPoint];
      v33.CGFloat x = v22;
      v33.CGFloat y = v23;
      v34.origin.CGFloat x = v15;
      v34.origin.CGFloat y = v17;
      v34.size.double width = v19;
      v34.size.double height = v21;
      BOOL v24 = !CGRectContainsPoint(v34, v33);
    }
    else
    {
      BOOL v24 = 0;
    }
    uint64_t v25 = VOTLogCommon();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      BOOL isContinuousPathOutsideBounds = self->_flags.isContinuousPathOutsideBounds;
      int v29 = 67109376;
      unsigned int v30 = v24;
      __int16 v31 = 1024;
      BOOL v32 = isContinuousPathOutsideBounds;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Outside bounds for continuous path: %d (already out? %d)", (uint8_t *)&v29, 0xEu);
    }

    if (v24)
    {
      if (!self->_flags.isContinuousPathOutsideBounds)
      {
        unsigned int v27 = +[AXHapticFeedbackManager sharedManager];
        [v27 playHapticFeedbackForType:16];

        self->_flags.BOOL isContinuousPathOutsideBounds = 1;
        [(SCRCTargetSelectorTimer *)self->_continuousPathIdleTimer cancel];
      }
    }
    else
    {
      if (self->_flags.isContinuousPathOutsideBounds)
      {
        id v28 = +[AXHapticFeedbackManager sharedManager];
        [v28 playHapticFeedbackForType:13];
      }
      self->_flags.BOOL isContinuousPathOutsideBounds = 0;
    }
  }
}

- (BOOL)_shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent:(id)a3
{
  id v4 = a3;
  if ([(id)VOTSharedWorkspace applicationOrientation] == (id)3
    || [(id)VOTSharedWorkspace applicationOrientation] == (id)4)
  {
    double x = self->_keyboardAlternativeVisibleStartPoint.x;
    [v4 touchPoint];
    double v7 = x - v6;
  }
  else
  {
    double y = self->_keyboardAlternativeVisibleStartPoint.y;
    [v4 touchPoint];
    double v7 = y - v9;
  }
  BOOL v10 = fabs(v7) > 220.0;

  return v10;
}

- (id)_checkDataDetectorIfPresent:(CGRect)a3 element:(id)a4 includeLinks:(BOOL)a5
{
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  id v10 = a4;
  v26.origin.CGFloat x = x;
  v26.origin.CGFloat y = y;
  v26.size.CGFloat width = width;
  v26.size.CGFloat height = height;
  double MidX = CGRectGetMidX(v26);
  v27.origin.CGFloat x = x;
  v27.origin.CGFloat y = y;
  v27.size.CGFloat width = width;
  v27.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v27);
  id v13 = +[VOTElement systemWideElement];
  objc_msgSend(v13, "convertPoint:toContextId:", objc_msgSend(v10, "windowContextId"), MidX, MidY);
  double v15 = v14;
  double v17 = v16;

  objc_msgSend(v10, "dataDetectorURL:", v15, v17);
  double v18 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (!v18) {
    goto LABEL_11;
  }
  CFStringRef v19 = @"address";
  if ([(__CFString *)v18 hasPrefix:@"address"])
  {
LABEL_16:

    double v18 = (__CFString *)v19;
    goto LABEL_17;
  }
  if ([(__CFString *)v18 hasPrefix:@"event"])
  {
    CFStringRef v19 = @"calendar";
    goto LABEL_16;
  }
  if ([(__CFString *)v18 hasPrefix:@"tracking-number"])
  {
    CFStringRef v19 = @"track";
    goto LABEL_16;
  }
  if ([(__CFString *)v18 hasPrefix:@"item-number"])
  {
    CFStringRef v19 = @"item";
    goto LABEL_16;
  }
  if (([(__CFString *)v18 hasPrefix:@"http"] & 1) == 0)
  {
    CFStringRef v19 = @"mailto";
    if (([(__CFString *)v18 hasPrefix:@"mailto"] & 1) == 0)
    {
      CFStringRef v19 = @"tel";
      if (([(__CFString *)v18 hasPrefix:@"tel"] & 1) == 0)
      {
        CFStringRef v19 = @"facetime";
        if (([(__CFString *)v18 hasPrefix:@"facetime"] & 1) == 0)
        {
          CFStringRef v19 = @"ibooks";
          if (([(__CFString *)v18 hasPrefix:@"ibooks"] & 1) == 0) {
            goto LABEL_17;
          }
        }
      }
    }
    goto LABEL_16;
  }

  double v18 = @"http";
  if (!a5)
  {
LABEL_11:
    double v20 = 0;
    goto LABEL_18;
  }
LABEL_17:
  CGFloat v21 = [(id)VOTSharedWorkspace selectedLanguage];
  CGFloat v22 = off_1001EA9E8;
  CGFloat v23 = +[NSString stringWithFormat:@"data-detector.%@", v18];
  double v20 = sub_100051D04(v22, v23, 0, v21);

LABEL_18:

  return v20;
}

- (void)_outputDataDetectorIfPresent:(CGRect)a3 element:(id)a4 includeLinks:(BOOL)a5
{
  -[VOTElementManager _checkDataDetectorIfPresent:element:includeLinks:](self, "_checkDataDetectorIfPresent:element:includeLinks:", a4, a5, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  double v5 = [(id)VOTSharedWorkspace selectedLanguage];
  id v6 = sub_10000ABF8(v7, 2, v5);
}

- (void)_setLastSeenLineAndColumn:(id)a3
{
  self->_unint64_t lastTextPressAction = 0;
}

- (BOOL)_echoLineInElement:(id)a3 forEvent:(id)a4 forDifferentElement:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a3;
  [a4 touchPoint];
  double v10 = v9;
  double v12 = v11;
  if (([(id)VOTSharedWorkspace inUnitTestMode] & 1) == 0)
  {
    objc_msgSend((id)VOTSharedWorkspace, "convertDevicePointToZoomedPoint:", v10, v12);
    double v14 = v13;
    double v16 = v15;
    double v17 = +[VOTElement systemWideElement];
    objc_msgSend(v17, "convertPoint:toContextId:", objc_msgSend(v8, "windowContextId"), v14, v16);
    double v10 = v18;
    double v12 = v19;
  }
  double v20 = objc_msgSend(v8, "lineNumberAndColumnForPoint:", v10, v12);
  CGFloat v21 = v20;
  if (v20)
  {
    if ([v20 isEqual:self->_lastSeenLineAndColumn])
    {
LABEL_45:
      BOOL v48 = 1;
      goto LABEL_46;
    }
    CGFloat v22 = [v21 objectForKey:@"lineNumber"];
    unsigned int v23 = [v22 intValue];

    if (v23 != -1)
    {
      [(VOTElementManager *)self _setLastSeenLineAndColumn:v21];
      unsigned int v24 = [v8 doesHaveTraits:kAXIsEditingTrait];
      id v25 = [v8 rangeForLineNumberAndColumn:self->_lastSeenLineAndColumn];
      NSUInteger v27 = v26;
      id v28 = objc_msgSend(v8, "attributedValueForRange:", v25, v26);
      objc_msgSend(v8, "boundsForRange:", v25, v27);
      double v30 = v29;
      double v32 = v31;
      double v34 = v33;
      double v36 = v35;
      double v37 = +[VOTElement systemWideElement];
      objc_msgSend(v37, "convertRect:fromContextId:", objc_msgSend(v8, "windowContextId"), v30, v32, v34, v36);
      double v39 = v38;
      double v41 = v40;
      double v43 = v42;
      double v45 = v44;

      self->_lineFrame.origin.CGFloat x = v39;
      self->_lineFrame.origin.CGFloat y = v41;
      self->_lineFrame.size.CGFloat width = v43;
      self->_lineFrame.size.CGFloat height = v45;
      uint64_t v46 = -[VOTElementManager _checkDataDetectorIfPresent:element:includeLinks:](self, "_checkDataDetectorIfPresent:element:includeLinks:", v8, 1, v39, v41, v43, v45);
      int64_t v100 = [(id)VOTSharedWorkspace selectedLanguage];
      unsigned int v93 = v24;
      if (self->_lastSeenLineStartPositionForFontProperties == v25)
      {
        uint64_t v47 = 0;
      }
      else
      {
        uint64_t v47 = [(VOTElementManager *)self _listItemLabelForAXAttributedString:v28];
      }
      id v98 = (void *)v47;
      self->_lastSeenLineStartPositionForFontProperties = (unint64_t)v25;
      id v49 = -[VOTElementManager _textAttachmentElementForString:inRange:](self, "_textAttachmentElementForString:inRange:", v28, 0, v27);
      NSUInteger v99 = (NSUInteger)v25;
      id v96 = v46;
      NSUInteger v97 = v27;
      id v95 = v49;
      BOOL v94 = v5;
      if ([(VOTElementManager *)self stringIsTextAttachment:v28])
      {
        id v50 = objc_alloc((Class)AXAttributedString);
        if (v49)
        {
          unsigned int v51 = [v49 label];
          unsigned __int8 v52 = [v49 value];
          uint64_t v53 = __AXStringForVariables();
          id v54 = objc_msgSend(v50, "initWithString:", v53, v52, @"__AXStringForVariablesSentinel");

          unsigned int v55 = 0;
          id v28 = v54;
        }
        else
        {
          unsigned int v51 = sub_100051804(off_1001EA9E8, @"attachment", 0);
          id v62 = [v50 initWithString:v51];

          unsigned int v55 = 0;
          id v28 = v62;
        }
LABEL_20:

        if ([v8 doesHaveTraits:kAXTextAreaTrait]) {
          self->_elementUnitIndeCGFloat x = v99;
        }
        if (v93)
        {
          -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", v99 + v97, 0, 0);
          if (!v97)
          {
            CGPoint v63 = [v8 value];
            id v64 = [v63 length];

            if (v99 < (unint64_t)v64) {
              -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", self->_elementSelectionRangeBufferInternal.location + 1, self->_elementSelectionRangeBufferInternal.length, 0);
            }
          }
        }
        id v65 = [objc_allocWithZone((Class)VOTOutputRequest) init];
        if ([v98 length])
        {
          id v66 = [v65 addString:v98];
          uint64_t v67 = [v65 lastAction];
          LODWORD(v68) = 1062836634;
          unsigned int v69 = +[NSNumber numberWithFloat:v68];
          [v67 setObject:v69 forVariant:32];
        }
        if (v94)
        {
          id v70 = [v8 label];
          id v71 = [v65 addString:v70];

          if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
          {
            unsigned int v72 = [v65 lastAction];
            LODWORD(v73) = 1062836634;
            uint64_t v74 = +[NSNumber numberWithFloat:v73];
            [v72 setObject:v74 forVariant:32];
          }
        }
        unsigned int v75 = [(VOTElementManager *)self stringIsTextAttachment:v28];
        if ((v75 & 1) == 0)
        {
          id v76 = +[NSCharacterSet characterSetWithCharactersInString:@"\r\n"];
          uint64_t v77 = [v28 stringByTrimmingCharactersInSet:v76];

          id v28 = (void *)v77;
        }
        if ([v28 length])
        {
          id v78 = [v65 addString:v28];
          id v79 = [v65 lastAction];
          [v79 setPerformPunctuationTranslation:v75 ^ 1];

          unsigned __int8 v80 = [v65 lastAction];
          [v80 setReplaceCommas:v75 ^ 1];

          uint64_t v81 = [v8 language];

          CGRect v82 = "@\"NSUUID\"" + 8;
          os_log_type_t v83 = &objc_release_x25_ptr;
          if (!v81)
          {
LABEL_38:
            if ([v55 length])
            {
              id v86 = [v65 addString:v55];
              uint64_t v87 = [v65 lastAction];
              LODWORD(v88) = *((_DWORD *)v82 + 506);
              id v89 = [v83[336] numberWithFloat:v88];
              [v87 setObject:v89 forVariant:32];
            }
            [v65 setGeneratesBraille:1];
            objc_msgSend(v65, "setBrailleLineRange:", v99, v97);
            [v65 setBrailleType:4];
            [(VOTElementManager *)self sendRequest:v65];
            if (v99 != 0x7FFFFFFF)
            {
              id v90 = sub_10000ABF8(v96, 2, v100);
              v102.origin.CGFloat x = CGRectZero.origin.x;
              v102.origin.CGFloat y = CGRectZero.origin.y;
              v102.size.CGFloat width = CGRectZero.size.width;
              v102.size.CGFloat height = CGRectZero.size.height;
              v101.origin.CGFloat x = v39;
              v101.origin.CGFloat y = v41;
              v101.size.CGFloat width = v43;
              v101.size.CGFloat height = v45;
              if (!CGRectEqualToRect(v101, v102))
              {
                unsigned int v91 = +[VOTDisplayManager displayManager];
                objc_msgSend(v91, "setCursorFrame:", v39, v41, v43, v45);

                self->_textRangeBeingDisplayed = 1;
              }
              self->_highlightedCharacterRange.NSUInteger location = v99;
              self->_highlightedCharacterRange.NSUInteger length = v97;
            }

            goto LABEL_45;
          }
          id v84 = [v8 language];
          [v65 setLanguage:v84];
        }
        else
        {
          id v84 = sub_100051D04(off_1001EA9E8, @"empty.line", 0, v100);
          id v85 = [v65 addString:v84];
          CGRect v82 = "\"";
          os_log_type_t v83 = &objc_release_x25_ptr;
        }

        goto LABEL_38;
      }
      [(id)VOTSharedWorkspace addMisspellingsForString:v28];
      unsigned int v51 = [v28 coalescedFontAttributes];
      if (v46)
      {
        id v56 = sub_100051D04(off_1001EA9E8, @"data-detector.http", 0, v100);
        unsigned int v57 = [v46 isEqualToString:v56];

        lastSeenFontProperties = self->_lastSeenFontProperties;
        if (v57)
        {
          id v59 = self;
          uint64_t v60 = v51;
          uint64_t v61 = 0;
LABEL_19:
          unsigned int v55 = [(VOTElementManager *)v59 _computeChangedFontAttributes:v60 storedAttributes:lastSeenFontProperties haveMisspellCheck:v61];
          goto LABEL_20;
        }
      }
      else
      {
        lastSeenFontProperties = self->_lastSeenFontProperties;
      }
      id v59 = self;
      uint64_t v60 = v51;
      uint64_t v61 = 1;
      goto LABEL_19;
    }
  }
  BOOL v48 = 0;
LABEL_46:

  return v48;
}

- (void)_echoStatusBarStatus:(id)a3
{
  if ([a3 doesHaveTraits:kAXStatusBarElementTrait])
  {
    BOOL inStatusBar = self->_flags.inStatusBar;
    self->_flags.BOOL inStatusBar = 1;
    if (!inStatusBar)
    {
      id v7 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      BOOL v5 = sub_100051804(off_1001EA9E8, @"entered.status.bar", 0);
      id v6 = [v7 addString:v5];

      [v7 setCannotBeInterrupted:1];
      [(VOTElementManager *)self sendRequest:v7];
    }
  }
  else
  {
    self->_flags.BOOL inStatusBar = 0;
  }
}

- (void)_finishPassthroughMode
{
  id v3 = +[VOTElement systemWideElement];
  objc_msgSend(v3, "postFingerLiftAtPoint:withContextId:", 0, self->_passthroughFinish.x, self->_passthroughFinish.y);

  CGPoint v4 = CGPointZero;
  self->_passthroughFinish = CGPointZero;
  self->_passthroughStart = v4;
  self->_passthroughOffset = v4;
  self->_flags.inPassthroughMode = 0;
}

- (void)_processPassthroughAllowedWithEvent:(id)a3 initialTouch:(BOOL)a4
{
  BOOL v4 = a4;
  id v27 = a3;
  id v6 = [(VOTElementManager *)self _currentElement];
  [v6 centerPoint];
  double v8 = v7;
  double v10 = v9;
  unsigned int v11 = [(VOTElementManager *)self _useLineFrameBoundsForTouch:v6];
  if (v8 == CGPointZero.x && v10 == CGPointZero.y)
  {
    [v27 touchPoint];
    double MidX = v15;
    double MidY = v16;
  }
  else if (v11)
  {
    double MidX = CGRectGetMidX(self->_lineFrame);
    double MidY = CGRectGetMidY(self->_lineFrame);
  }
  else
  {
    [v27 touchPoint];
    CGFloat v18 = v17 - self->_passthroughStart.x;
    CGFloat v20 = v19 - self->_passthroughStart.y;
    self->_passthroughOffset.CGFloat x = v18;
    self->_passthroughOffset.CGFloat y = v20;
    double MidX = v8 + v18;
    double MidY = v10 + v20;
  }
  [v6 frame];
  CGFloat x = v29.origin.x;
  CGFloat y = v29.origin.y;
  CGFloat width = v29.size.width;
  CGFloat height = v29.size.height;
  if (MidX >= CGRectGetMaxX(v29))
  {
    v30.origin.CGFloat x = x;
    v30.origin.CGFloat y = y;
    v30.size.CGFloat width = width;
    v30.size.CGFloat height = height;
    double MidX = CGRectGetMaxX(v30) + -1.0;
  }
  v31.origin.CGFloat x = x;
  v31.origin.CGFloat y = y;
  v31.size.CGFloat width = width;
  v31.size.CGFloat height = height;
  if (MidY >= CGRectGetMaxY(v31))
  {
    v32.origin.CGFloat x = x;
    v32.origin.CGFloat y = y;
    v32.size.CGFloat width = width;
    v32.size.CGFloat height = height;
    double MidY = CGRectGetMaxY(v32) + -1.0;
  }
  self->_passthroughFinish.CGFloat x = MidX;
  self->_passthroughFinish.CGFloat y = MidY;
  id v25 = +[VOTElement systemWideElement];
  [v27 touchForce];
  if (v4) {
    objc_msgSend(v25, "postFingerTouchAtPoint:withForce:withContextId:", 0, MidX, MidY, v26);
  }
  else {
    objc_msgSend(v25, "postFingerDragAtPoint:withForce:withContextId:", 0, MidX, MidY, v26);
  }
}

- (void)_switchToOtherRoad
{
  if (self->_upcomingRoadElement)
  {
    id v8 = +[VOTOutputRequest createRequest];
    id v3 = sub_100051804(off_1001EA9E8, @"map-interaction.switch.to.road", 0);
    [(VOTElementManager *)self _addFormattedStringToRequest:v8 formattedString:v3 withElement:self->_upcomingRoadElement];
    [(VOTElementManager *)self _setCurrentElement:self->_upcomingRoadElement];
    BOOL v4 = +[VOTDisplayManager displayManager];
    [v4 setCursorFrameForElement:self->_currentElement];

    [v8 send];
    upcomingRoadElement = self->_upcomingRoadElement;
    self->_upcomingRoadElement = 0;

    self->_firstRoadTravelPoint = self->_lastRoadTravelPoint;
    self->_switchedToRoadTime = CFAbsoluteTimeGetCurrent();
    self->_intersectionTravelPoint = CGPointZero;
    id v6 = +[VOTOutputManager outputManager];
    double v7 = +[VOSOutputEvent DidFocusOnElement];
    [v6 sendEvent:v7];
  }
}

- (void)_addFormattedStringToRequest:(id)a3 formattedString:(id)a4 withElement:(id)a5
{
  id v19 = a3;
  id v7 = a4;
  id v8 = a5;
  uint64_t v9 = [v8 label];
  if (v9) {
    double v10 = (__CFString *)v9;
  }
  else {
    double v10 = &stru_1001B7888;
  }
  unsigned int v11 = AXCFormattedString();
  double v12 = +[AXAttributedString axAttributedStringWithString:](AXAttributedString, "axAttributedStringWithString:", v11, v10);
  double v13 = [v8 language];

  if (v13)
  {
    double v14 = (char *)[v7 length] + 1;
    double v15 = [v11 length];
    int64_t v16 = v15 - (unsigned char *)[v7 length];
    double v17 = [v8 language];
    objc_msgSend(v12, "setAttribute:forKey:withRange:", v17, UIAccessibilityTokenLanguage, v14, v16);
  }
  id v18 = [v19 addAttributedString:v12];
}

- (void)_handleMapSameElement:(id)a3 forEvent:(id)a4
{
  id v6 = a3;
  [a4 touchPoint];
  double v8 = v7;
  double v10 = v9;
  unsigned int v11 = [v6 touchContainer];
  objc_msgSend(v11, "mapsExplorationRecordTouchpoint:", v8, v10);

  if (self->_startTrackingRoadRequest)
  {
    self->_explorationStartPoint.CGFloat x = v8;
    p_double y = &self->_explorationStartPoint.y;
LABEL_50:
    *p_double y = v10;
    goto LABEL_51;
  }
  if (self->_shouldContinueRoadTracking)
  {
    SCRCMathGetDistanceBetweenPoints();
    double y = CGPointZero.y;
    if (CGPointZero.x == self->_lastRoadTravelPoint.x && y == self->_lastRoadTravelPoint.y) {
      goto LABEL_36;
    }
    float v16 = v13;
    BOOL v17 = y == self->_firstRoadTravelPoint.y && CGPointZero.x == self->_firstRoadTravelPoint.x;
    BOOL v18 = !v17 && v16 <= 6.0;
    if (v18 || CFAbsoluteTimeGetCurrent() - self->_switchedToRoadTime <= 2.0) {
      goto LABEL_36;
    }
    void v48[5] = 0;
    v48[6] = 0;
    SCRCMathGetVectorAndDistanceForPoints();
    SCRCMathUpdateAngleAverage();
    SCRCMathGetAverage();
    float v20 = v19;
    *(float *)&double v21 = v20;
    CGFloat v22 = -[VOTElement upcomingRoadsAtPoint:withDirection:](self->_currentElement, "upcomingRoadsAtPoint:withDirection:", v8, v10, v21);
    unsigned int v23 = [v22 firstObject];
    if (v16 <= 20.0)
    {
      p_approachingEndOfRoad = &self->_approachingEndOfRoad;
      float v26 = -1.0;
    }
    else
    {
      *(float *)&double v24 = v20;
      -[VOTElement distanceToEndOfRoad:withDirection:](self->_currentElement, "distanceToEndOfRoad:withDirection:", v8, v10, v24);
      float v26 = v25;
      p_approachingEndOfRoad = &self->_approachingEndOfRoad;
      if (self->_approachingEndOfRoad && v25 > 20.0) {
        BOOL *p_approachingEndOfRoad = 0;
      }
    }
    id v28 = [(id)VOTSharedWorkspace selectedLanguage];
    if (v26 < 20.0 && v26 > 0.0 && !*p_approachingEndOfRoad)
    {
      CGRect v29 = +[VOTOutputRequest createRequest];
      endOfRoadApproachingRequest = self->_endOfRoadApproachingRequest;
      self->_endOfRoadApproachingRequest = v29;

      CGRect v31 = self->_endOfRoadApproachingRequest;
      CGRect v32 = sub_100051D04(off_1001EA9E8, @"approaching.end.of.road", 0, v28);
      id v33 = [(VOTOutputRequest *)v31 addString:v32 withLanguage:v28];

      self->_approachingEndOfRoad = 1;
      [(VOTOutputRequest *)self->_endOfRoadApproachingRequest setCompletionDelegate:self];
      [(VOTOutputRequest *)self->_endOfRoadApproachingRequest setDoesNotInterrupt:1];
      [(VOTOutputRequest *)self->_endOfRoadApproachingRequest send];
    }
    if (v23)
    {
      if (![(VOTElement *)self->_upcomingRoadElement isEqual:v23])
      {
        double v34 = +[VOTOutputRequest createRequest];
        switchRoadsOutputRequest = self->_switchRoadsOutputRequest;
        self->_switchRoadsOutputRequest = v34;

        upcomingRoadElement = sub_100051D04(off_1001EA9E8, @"map-interaction.upcoming.road.juncture", 0, v28);
        [(VOTElementManager *)self _addFormattedStringToRequest:self->_switchRoadsOutputRequest formattedString:upcomingRoadElement withElement:v23];
        double v37 = [(VOTOutputRequest *)self->_switchRoadsOutputRequest lastAction];
        LODWORD(v38) = 1062836634;
        double v39 = +[NSNumber numberWithFloat:v38];
        [v37 setObject:v39 forVariant:32];

        p_upcomingRoadElement = &self->_upcomingRoadElement;
        if ([v22 count] == (id)2)
        {
          double v41 = [v22 objectAtIndex:1];
          if (v41)
          {
            double v42 = sub_100051804(off_1001EA9E8, @"map-interaction.next.road", 0);
            [(VOTElementManager *)self _addFormattedStringToRequest:self->_switchRoadsOutputRequest formattedString:v42 withElement:v41];
          }
          p_upcomingRoadElement = &self->_upcomingRoadElement;
        }
        [(VOTOutputRequest *)self->_switchRoadsOutputRequest setCompletionDelegate:self];
        [(VOTOutputRequest *)self->_switchRoadsOutputRequest setDoesNotInterrupt:0];
        [(VOTOutputRequest *)self->_switchRoadsOutputRequest send];
        self->_intersectionTravelPoint.CGFloat x = v8;
        self->_intersectionTravelPoint.double y = v10;
        [(SCRCTargetSelectorTimer *)self->_switchRoadsAtIntersectionTimer cancel];
        objc_storeStrong((id *)p_upcomingRoadElement, v23);
        goto LABEL_34;
      }
    }
    else if (!self->_switchRoadsOutputRequest)
    {
      upcomingRoadElement = self->_upcomingRoadElement;
      self->_upcomingRoadElement = 0;
LABEL_34:
    }
    self->_firstRoadTravelPoint = CGPointZero;

LABEL_36:
    if (self->_intersectionTravelPoint.x != CGPointZero.x || self->_intersectionTravelPoint.y != y)
    {
      SCRCMathGetDistanceBetweenPoints();
      if (v44 > 50.0 && self->_switchRoadsOutputRequest && self->_endOfRoadApproachingRequest)
      {
        double v45 = +[VOTOutputManager outputManager];
        [v45 stopSpeakingAtBoundary:0];
      }
    }
    p_double y = &self->_lastRoadTravelPoint.y;
    if (!self->_playingMapSound)
    {
      if ([v6 lastHitTestNearBorder]) {
        CFStringRef v46 = @"Sounds/RoadWalkingNearBorder.aiff";
      }
      else {
        CFStringRef v46 = @"Sounds/RoadWalking.aiff";
      }
      self->_playingMapSound = 1;
      uint64_t v47 = +[VOTOutputManager outputManager];
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_100090B34;
      v48[3] = &unk_1001B3560;
      v48[4] = self;
      [v47 playSoundFast:v46 completionBlock:v48];
    }
    self->_lastRoadTravelPoint.CGFloat x = v8;
    goto LABEL_50;
  }
LABEL_51:
}

- (void)_echoSameElement:(id)a3 forEvent:(id)a4
{
  id v7 = a3;
  id v6 = a4;
  if ([v7 mapFeatureType] == (id)1) {
    [(VOTElementManager *)self _handleMapSameElement:v7 forEvent:v6];
  }
}

- (void)_echoNoElementForEvent:(id)a3
{
  [a3 time];
  double v5 = v4;
  double timeSpentOnNothing = self->_timeSpentOnNothing;
  if (timeSpentOnNothing == -3061152000.0)
  {
    p_double timeSpentOnNothing = &self->_timeSpentOnNothing;
LABEL_6:
    *p_double timeSpentOnNothing = v5;
    goto LABEL_7;
  }
  if (v5 - timeSpentOnNothing > 0.025)
  {
    p_double timeSpentOnNothing = &self->_lastNothingSoundTime;
    if (v5 - self->_lastNothingSoundTime > 0.100000001)
    {
      double v8 = +[VOTOutputManager outputManager];
      double v9 = +[VOSOutputEvent NoItemExists];
      [v8 sendEvent:v9];

      double v10 = +[VOTDisplayManager displayManager];
      [v10 setCursorFrameForElement:0];

      self->_double timeSpentOnNothing = -3061152000.0;
      goto LABEL_6;
    }
  }
LABEL_7:
  self->_flags.elementCenterSoundPlaying = 0;
}

- (void)_drawTouchContainerFrame
{
}

- (id)_echoDifferentTouchContainer:(id)a3 forEvent:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer cancel];
  unsigned int v8 = [v6 isTouchContainer];
  if (sub_100050E5C() && v8)
  {
    if (![(SCRCTargetSelectorTimer *)self->_containerFrameDrawingTimer isPending]
      || [(SCRCTargetSelectorTimer *)self->_containerFrameDrawingTimer isCancelled])
    {
      [(SCRCTargetSelectorTimer *)self->_containerFrameDrawingTimer dispatchAfterDelay:0.5];
    }
    double v9 = [(VOTElementManager *)self touchContainer];
    unsigned __int8 v10 = [v6 isEqual:v9];

    if (v10)
    {
      [(VOTElementManager *)self _echoNoElementForEvent:v7];
      uint64_t v11 = +[NSNull null];
      goto LABEL_12;
    }
    if (([(id)VOTSharedWorkspace containerOutputFeedback] & 4) != 0)
    {
      double v12 = +[VOTOutputManager outputManager];
      double v13 = +[VOSOutputEvent DidEnterTouchContainer];
      [v12 sendEvent:v13];
    }
    [(VOTElementManager *)self setTouchContainer:v6];
    [(VOTElementManager *)self _setCurrentElement:0];
    id WeakRetained = objc_loadWeakRetained((id *)&self->_updateDelegate);
    [WeakRetained currentElementDidUpdate:self->_touchContainer];
  }
  uint64_t v11 = [(VOTElementManager *)self _updateTouchContainerForElement:v6 playSound:1];
LABEL_12:
  double v15 = (void *)v11;

  return v15;
}

- (BOOL)_addElementCommunityNameIfNeededToRequest:(id)a3 oldElementCommunity:(id)a4 newElementCommunity:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = v10;
  BOOL v12 = 0;
  if (v9 && v10)
  {
    if ([v10 isEqual:v9]) {
      goto LABEL_5;
    }
    double v13 = [(VOTElementManager *)self _sideAppDividerElement];
    unsigned __int8 v14 = [v11 isEqual:v13];

    if (v14) {
      goto LABEL_5;
    }
    double v15 = [(VOTElementManager *)self _additionalElementCommunities];
    float v16 = [(VOTElementManager *)self _currentMedusaApplications];
    if ((unint64_t)[v16 count] > 1 || objc_msgSend(v15, "containsObject:", v11))
    {
    }
    else
    {
      unsigned int v26 = [v15 containsObject:v9];

      if (!v26)
      {
LABEL_5:
        BOOL v12 = 0;
        goto LABEL_13;
      }
    }
    BOOL v17 = [v11 label];
    BOOL v18 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
    double v19 = [v17 stringByTrimmingCharactersInSet:v18];

    id v20 = [v19 length];
    BOOL v12 = v20 != 0;
    if (v20)
    {
      id v21 = [v8 addString:v19];
      if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
      {
        CGFloat v22 = [v8 lastAction];
        LODWORD(v23) = 1062836634;
        double v24 = +[NSNumber numberWithFloat:v23];
        [v22 setObject:v24 forVariant:32];
      }
    }
  }
LABEL_13:

  return v12;
}

- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 shouldPlayGuideWireSound:(BOOL)a6
{
}

- (id)_getSpeakableContainerForContainer:(id)a3
{
  id v3 = a3;
  double v4 = [v3 label];
  id v5 = [v4 length];

  if (v5)
  {
    id v6 = v3;
  }
  else
  {
    id v6 = [v3 touchContainerParent];
    if (v6)
    {
      do
      {
        id v8 = [v6 label];
        id v9 = [v8 length];

        if (v9) {
          break;
        }
        id v10 = [v6 touchContainerParent];
        unsigned int v11 = [v10 isEqual:v6];

        if (v11)
        {

          id v6 = 0;
          break;
        }
        id v6 = v10;
      }
      while (v10);
    }
  }

  return v6;
}

- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 canSetAsCurrentElement:(BOOL)a6 shouldPlayGuideWireSound:(BOOL)a7 isProtectedApp:(BOOL)a8 includeHint:(BOOL)a9 boundaryHit:(BOOL)a10
{
  BOOL v105 = a8;
  BOOL v10 = a7;
  BOOL v11 = a6;
  id v15 = a3;
  id v16 = a4;
  if ([(id)VOTSharedWorkspace navigationStyleHonorsGroups]
    && ([v15 isAccessibleGroup] & 1) != 0)
  {
    BOOL v17 = [v16 command];
    unsigned int v18 = [v17 isEqualToString:kVOTEventCommandTracking];

    unsigned int v19 = [v15 isTouchContainer] & v18;
    if (!v18)
    {
      unsigned int v108 = 0;
      id v20 = 0;
      int v21 = 0;
      if (!v10) {
        goto LABEL_12;
      }
LABEL_10:
      if ([v15 shouldPlaySoundWhenFocused])
      {
        double v23 = +[VOTOutputManager outputManager];
        double v24 = +[VOSOutputEvent DidFocusOnElement];
        [v23 sendEvent:v24];
      }
LABEL_12:
      if (sub_100050E5C() && ([v15 isAccessibleElement] & 1) == 0) {
        unsigned int v25 = v21 & [v15 isTouchContainer];
      }
      else {
        unsigned int v25 = 0;
      }
      unsigned __int8 v107 = [(VOTElementManager *)self _currentElement];
      uint64_t v106 = [(VOTElementManager *)self mostRecentElementCommunity];
      if (AXDeviceHasJindo())
      {
        jindoAppBundleIdentifiers = self->_jindoAppBundleIdentifiers;
        id v27 = [v15 bundleIdentifier];
        if ([(NSArray *)jindoAppBundleIdentifiers containsObject:v27]
          && ([v15 isInJindoWindow] & 1) == 0)
        {
          unsigned __int8 v60 = [v15 isInAppSwitcher];

          if ((v60 & 1) == 0)
          {
LABEL_113:

            goto LABEL_114;
          }
        }
        else
        {
        }
      }
      if (((v25 | !v11) & 1) == 0) {
        [(VOTElementManager *)self _setCurrentElement:v15 isProtectedApp:v105];
      }
      if ((v19 | !v11))
      {
        [(VOTElementRotor *)self->_elementRotor updateRotorForElement:v15 shouldPreserveRotorNavigation:0 firstResponder:self->_firstResponderElement];
        if (a5) {
          goto LABEL_100;
        }
      }
      else
      {
        id v28 = +[VOTDisplayManager displayManager];
        [v28 setCursorFrameForElement:v15];

        [(SCRCTargetSelectorTimer *)self->_containerFrameDrawingTimer cancel];
        if (a5) {
          goto LABEL_100;
        }
      }
      CGRect v29 = +[VOTOutputManager outputManager];
      [v29 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

      id v30 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      CGRect v31 = v16;
      CGRect v32 = v30;
      double v104 = v31;
      if ([v31 isGuideElementMovementEvent])
      {
        id v33 = [v15 guideElementHeaderText];
        if ([v33 length]
          && ([v33 isEqualToString:self->_lastSpokenGuideElementHeaderText] & 1) == 0)
        {
          id v34 = [objc_alloc((Class)AXAttributedString) initWithString:v33];
          [v34 setAttribute:&off_1001C4FC8 forKey:AXUIAccessibilitySpeechAttributePitch];
          id v35 = [v32 addAttributedString:v34];
          objc_storeStrong((id *)&self->_lastSpokenGuideElementHeaderText, v33);
        }
      }
      uint64_t v36 = [(VOTElementManager *)self _elementCommunityForElement:v15];
      [(VOTElementManager *)self _addElementCommunityNameIfNeededToRequest:v32 oldElementCommunity:v106 newElementCommunity:v36];
      uint64_t v37 = kAXWebContentTrait;
      if ([v15 doesHaveAllTraits:kAXWebContentTrait]) {
        unsigned int v38 = [v15 containedIn:1];
      }
      else {
        unsigned int v38 = 0;
      }
      double v103 = v32;
      if ([v15 doesHaveAllTraits:v37]
        && [v15 containedIn:8])
      {
        double v39 = v20;
        unsigned int v40 = v38;
        double v41 = [v15 label];
        double v42 = v39;
        double v43 = [v39 label];
        unsigned int v44 = [v41 isEqual:v43];
      }
      else
      {
        double v42 = v20;
        unsigned int v40 = v38;
        unsigned int v44 = 0;
      }
      id v45 = v42;
      CFStringRef v46 = [(VOTElementManager *)self _getSpeakableContainerForContainer:v42];
      uint64_t v47 = [(VOTElementManager *)self _getSpeakableContainerForContainer:v108];
      BOOL v48 = [v104 command];
      unsigned int v49 = [v48 isEqualToString:kVOTEventCommandMoveIn];

      if (v49)
      {
        id v50 = [v15 groupedParent];

        id v45 = v50;
        CGRect v102 = 0;
        CFStringRef v46 = v45;
      }
      else
      {
        CGRect v102 = v47;
      }
      uint64_t v100 = v36;
      if (v45)
      {
        id v51 = v45;
        if ((([v45 isEqual:v15] | v40 | v44) & 1) == 0)
        {
          uint64_t v53 = v46;
          unsigned int v52 = [v46 isEqual:v102] ^ 1;
          if (!v46) {
            LOBYTE(v52) = 1;
          }
          id v20 = v51;
          goto LABEL_49;
        }
        LOBYTE(v52) = 0;
        id v20 = v45;
      }
      else
      {
        LOBYTE(v52) = 0;
        id v20 = 0;
      }
      uint64_t v53 = v46;
LABEL_49:
      if (v53) {
        unsigned int v54 = v49;
      }
      else {
        unsigned int v54 = 0;
      }
      if ((v52 & 1) != 0 || v54)
      {
        int v55 = sub_100050E5C();
        uint64_t v56 = 0x4000;
        if (v55) {
          uint64_t v56 = 16386;
        }
        uint64_t v57 = 0x1000000000;
        if (!v54) {
          uint64_t v57 = 0;
        }
        uint64_t v58 = v56 | v57;
        if (v53)
        {
          id v59 = v53;

          id v20 = v59;
        }
        else if (![v20 includeRoleOnlyForGroupNavigation])
        {
          v58 |= 0x1000000uLL;
        }
        unsigned __int8 v61 = objc_msgSend((id)VOTSharedWorkspace, "containerOutputFeedback", v36);
        if ((v61 & 2) != 0)
        {
          [(VOTElementManager *)self _addDescription:v20 toRequest:v103 withOptions:v58];
          if ((v61 & 8) != 0 && [(id)VOTSharedWorkspace typingPitchChangeEnabled])
          {
            id v62 = [v103 lastAction];
            LODWORD(v63) = 1062836634;
            id v64 = +[NSNumber numberWithFloat:v63];
            [v62 setObject:v64 forVariant:32];
          }
          id v65 = [v103 lastAction];
          [v65 setObject:&__kCFBooleanTrue forVariant:68];
        }
      }
      unsigned int v66 = objc_msgSend(v15, "keyboardKeyAllowsTouchTyping", v100);
      if (a10) {
        uint64_t v67 = 0x20000000;
      }
      else {
        uint64_t v67 = 0;
      }
      double v68 = [v104 command];
      unsigned int v69 = [v68 isEqualToString:kVOTEventCommandMoveOut];

      if (v69) {
        v67 |= 0x2000000000uLL;
      }
      if (a9)
      {
        unsigned int v70 = [(VOTElementManager *)self _shouldAnnounceCustomRotorHintForElement:v15];
        uint64_t v71 = 2050;
        if (v70) {
          uint64_t v71 = 0x200000802;
        }
        v67 |= v71;
      }
      unsigned int v72 = [(AXDragManager *)self->_dragManager isDragActive];
      [(VOTElementManager *)self _prepareElementOutputHeaders:v15 currentElement:v107 request:v103];
      id v73 = [v15 blockquoteLevel];
      id v74 = [v107 blockquoteLevel];
      if (!v105)
      {
        uint64_t v75 = 0x40000000;
        if (!v72) {
          uint64_t v75 = 0;
        }
        uint64_t v76 = v75 | v67;
        if (v73 != v74) {
          v76 |= 0x20000uLL;
        }
        [(VOTElementManager *)self _addDescription:v15 toRequest:v103 withOptions:v76 | 0x800000];
      }
      if (v66)
      {
        self->_touchTypingStartTime = CFAbsoluteTimeGetCurrent();
        self->_flags.didTouchTypingOutputStart = 1;
        id v78 = v102;
        uint64_t v77 = v103;
        id v79 = v101;
        if ((char *)[(id)VOTSharedWorkspace typingMode] - 1 <= (char *)1)
        {
          unsigned __int8 v80 = [v15 application];
          uint64_t v81 = [v80 activeKeyboard];
          unsigned int v82 = [v81 isKeyboardContinuousPathAvailable];

          if (v82)
          {
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            v114[0] = _NSConcreteStackBlock;
            v114[1] = 3221225472;
            v114[2] = sub_100091CC4;
            v114[3] = &unk_1001B59D0;
            id v115 = v15;
            BOOL v116 = self;
            CFAbsoluteTime v117 = Current;
            [v103 setActionCompletionBlock:v114];
          }
          v111[0] = _NSConcreteStackBlock;
          v111[1] = 3221225472;
          v111[2] = sub_100091EEC;
          v111[3] = &unk_1001B59F8;
          char v113 = v82;
          v111[4] = self;
          id v84 = v15;
          id v112 = v84;
          [v103 setCompletionBlock:v111];
          if (([(id)VOTSharedWorkspace typingMode] == (id)2
             || ([v84 doesHaveTraits:kAXDeleteKeyTrait] & 1) == 0)
            && [v84 allowsAutoAlternativeCharacterActivation])
          {
            self->_flags.shouldTriggerAlternativeKeyActivation = 1;
          }
        }
      }
      else
      {
        [(VOTElementManager *)self _setPreviousTouchTypingKey:0];
        id v78 = v102;
        uint64_t v77 = v103;
        id v79 = v101;
      }
      if ([v15 isBannerNotification])
      {
        v109[0] = _NSConcreteStackBlock;
        v109[1] = 3221225472;
        v109[2] = sub_100091F54;
        v109[3] = &unk_1001B5A20;
        id v110 = v15;
        [v77 setCompletionBlock:v109];
      }
      [(VOTElementManager *)self sendRequest:v77];
      if ([v15 doesHaveTraits:kAXLinkTrait])
      {
        id v85 = [v15 url];

        if (v85)
        {
          [v15 frame];
          -[VOTElementManager _outputDataDetectorIfPresent:element:includeLinks:](self, "_outputDataDetectorIfPresent:element:includeLinks:", v15, 0);
        }
      }

      id v16 = v104;
LABEL_100:
      id v86 = [v15 application];
      if ([(NSArray *)self->_currentApplications containsObject:v86]) {
        goto LABEL_107;
      }
      double v87 = CFAbsoluteTimeGetCurrent();
      [(VOTElementManager *)self lastTrackingUpdateAppsFailureTime];
      if (v87 - v88 > 0.25)
      {
        [(VOTElementManager *)self setLastTrackingUpdateAppsFailureTime:-3061152000.0];
        [(VOTElementManager *)self setLastTrackingUpdateAppsFailureApplication:0];
      }
      id v89 = [(VOTElementManager *)self lastTrackingUpdateAppsFailureApplication];
      if (([v89 isEqual:v86] & 1) == 0)
      {
        id v90 = [(VOTElementManager *)self _sideAppDividerElement];
        unsigned __int8 v91 = [v90 isEqual:v15];

        if (v91) {
          goto LABEL_106;
        }
        NSUInteger v99 = +[VOTWorkspace sharedWorkspace];
        id v89 = [v99 focusedApplications];

        objc_storeStrong((id *)&self->_currentApplications, v89);
        if (![(NSArray *)self->_currentApplications containsObject:v86])
        {
          [(VOTElementManager *)self setLastTrackingUpdateAppsFailureTime:v87];
          [(VOTElementManager *)self setLastTrackingUpdateAppsFailureApplication:v86];
        }
      }

LABEL_106:
      [(VOTElementManager *)self _handleKeyboardChangedNotification];
LABEL_107:
      if ([v15 mapFeatureType] == (id)1 && !self->_shouldContinueRoadTracking)
      {
        CGFloat v92 = +[VOTOutputRequest createRequest];
        startTrackingRoadRequest = self->_startTrackingRoadRequest;
        self->_startTrackingRoadRequest = v92;

        BOOL v94 = [(id)VOTSharedWorkspace selectedLanguage];
        id v95 = sub_100051D04(off_1001EA9E8, @"map.follow.road.hint", 0, v94);
        id v96 = [(VOTOutputRequest *)self->_startTrackingRoadRequest addString:v95 withLanguage:v94];
        [(VOTOutputRequest *)self->_startTrackingRoadRequest setDoesNotInterrupt:1];
        [(VOTOutputRequest *)self->_startTrackingRoadRequest setCompletionDelegate:self];
        [(VOTElementManager *)self sendRequest:self->_startTrackingRoadRequest];
      }
      if ([v15 doesHaveTraits:kAXKeyboardKeyTrait]) {
        self->_flags.usePenumbraForKeyboardKeys = 1;
      }
      self->_flags.elementCenterSoundPlaying = 0;
      [v16 touchPoint];
      self->_firstRoadTravelPoint.CGFloat x = v97;
      self->_firstRoadTravelPoint.double y = v98;
      self->_approachingEndOfRoad = 0;

      goto LABEL_113;
    }
  }
  else
  {
    unsigned int v19 = [v15 isTouchContainer];
  }
  unsigned int v108 = [(VOTElementManager *)self touchContainer];
  id v20 = [(VOTElementManager *)self _echoDifferentTouchContainer:v15 forEvent:v16];
  CGFloat v22 = +[NSNull null];

  if (v20 != v22)
  {
    int v21 = 1;
    if ((sub_100050E5C() & v19) == 1 || !v10) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_114:
}

- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 shouldPlayGuideWireSound:(BOOL)a6 isProtectedApp:(BOOL)a7
{
  LOWORD(v7) = 1;
  -[VOTElementManager _echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound:isProtectedApp:includeHint:boundaryHit:](self, "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound:isProtectedApp:includeHint:boundaryHit:", a3, a4, a5, 1, a6, 0, v7);
}

- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4
{
}

- (id)_updateTouchContainerForElement:(id)a3 playSound:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  uint64_t v7 = [(VOTElementManager *)self touchContainer];
  id v8 = [v6 touchContainerAXElement];

  id v9 = [v7 uiElement];
  id v10 = [v9 axElement];

  if (v8 && v10 && CFEqual(v8, v10))
  {
    BOOL v11 = 0;
  }
  else
  {
    BOOL v12 = +[AXUIElement uiElementWithAXElement:v8];
    BOOL v11 = +[VOTElement elementWithUIElement:v12];

    if (v4
      && sub_100050E5C()
      && v11
      && ([(id)VOTSharedWorkspace containerOutputFeedback] & 4) != 0)
    {
      double v13 = +[VOTOutputManager outputManager];
      unsigned __int8 v14 = +[VOSOutputEvent DidEnterTouchContainer];
      [v13 sendEvent:v14];
    }
    [(VOTElementManager *)self setTouchContainer:v11];
  }
  self->_touchContainersTouchedCount = 0;

  return v11;
}

- (double)_alternativeKeyActivateTime
{
  id v2 = [(VOTElement *)self->_currentElement application];
  id v3 = [v2 currentSoftwareKeyboardLayout];

  double v4 = sub_100052CE0(v3);
  return v4;
}

- (void)_outputRequestFinished:(id)a3
{
  double v4 = (VOTOutputRequest *)a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (self->_bookPageContentOutputRequest == v4)
  {
    if ([(VOTOutputRequest *)v4 finishedSuccessfully])
    {
      if ([(VOTElementManager *)self _handleMoreBookContentElements]) {
        goto LABEL_36;
      }
      id v6 = [(VOTElementManager *)self _currentElement];
      if ([v6 readingContentCausesPageTurn])
      {

LABEL_28:
        [(VOTElementManager *)self _handleBookPageFlipAndContinue];
        goto LABEL_29;
      }
      double v13 = [(VOTElementManager *)self _currentElement];
      unsigned int v14 = [v13 includeDuringContentReading];

      if (v14) {
        goto LABEL_28;
      }
    }
LABEL_29:
    [(VOTOutputRequest *)self->_bookPageContentOutputRequest setCompletionDelegate:0];
    bookPageContentOutputRequest = self->_bookPageContentOutputRequest;
    self->_bookPageContentOutputRequest = 0;
    goto LABEL_30;
  }
  if (self->_readAllOutputRequest == v4)
  {
    if (!self->_flags.isReadingAll)
    {
LABEL_35:
      [(VOTElementManager *)self _resetReadAllRequest];
      goto LABEL_36;
    }
    if ([(VOTOutputRequest *)v4 finishedSuccessfully])
    {
      uint64_t v7 = [(VOTElementManager *)self _currentElement];
      unsigned int v8 = [v7 readingContentCausesPageTurn];

      if (v8)
      {
LABEL_19:
        [(VOTElementManager *)self _handleBookPageFlipAndContinue];
        goto LABEL_35;
      }
      id v15 = [(VOTElementManager *)self _currentElement];
      unsigned int v16 = [v15 includeDuringContentReading];

      if (v16)
      {
        BOOL v17 = [(VOTElementManager *)self _currentElement];
        unsigned int v18 = [(VOTElementManager *)self _nearestElementWithMatch:&stru_1001B5A40 startElement:v17 forward:1];

        if (!v18) {
          goto LABEL_19;
        }
      }
    }
    [(VOTElementManager *)self _handleReadAllNextElement];
    goto LABEL_35;
  }
  if (self->_switchRoadsOutputRequest == v4)
  {
    if ([(VOTOutputRequest *)v4 finishedSuccessfully]) {
      [(SCRCTargetSelectorTimer *)self->_switchRoadsAtIntersectionTimer dispatchAfterDelay:0.01];
    }
    [(VOTOutputRequest *)self->_switchRoadsOutputRequest setCompletionDelegate:0];
    bookPageContentOutputRequest = self->_switchRoadsOutputRequest;
    self->_switchRoadsOutputRequest = 0;
    goto LABEL_30;
  }
  if (self->_endOfRoadApproachingRequest == v4)
  {
    [(VOTOutputRequest *)v4 setCompletionDelegate:0];
    bookPageContentOutputRequest = self->_endOfRoadApproachingRequest;
    self->_endOfRoadApproachingRequest = 0;
LABEL_30:

    goto LABEL_36;
  }
  if (self->_startTrackingRoadRequest == v4)
  {
    if ([(VOTOutputRequest *)v4 finishedSuccessfully])
    {
      *(_WORD *)&self->_playingMapSound = 256;
      id v10 = +[VOTOutputManager outputManager];
      [v10 playSoundFast:@"Sounds/RoadWalking.aiff"];

      id v11 = +[VOTOutputRequest createRequest];
      BOOL v12 = sub_100051804(off_1001EA9E8, @"map-interaction.switch.to.road", 0);
      [(VOTElementManager *)self _addFormattedStringToRequest:v11 formattedString:v12 withElement:self->_currentElement];
      [(VOTElementManager *)self sendRequest:v11];
    }
    [(VOTOutputRequest *)self->_startTrackingRoadRequest setCompletionDelegate:0];
    bookPageContentOutputRequest = self->_startTrackingRoadRequest;
    self->_startTrackingRoadRequest = 0;
    goto LABEL_30;
  }
  if (self->_announcementRequest == v4)
  {
    if (self->_announcementPid == -1)
    {
      unsigned int v19 = +[VOTElement systemAppApplication];
      id v20 = [v19 focusedApplications];

      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v5 = v20;
      id v21 = [v5 countByEnumeratingWithState:&v28 objects:v32 count:16];
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v29;
        do
        {
          for (uint64_t i = 0; i != v22; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v29 != v23) {
              objc_enumerationMutation(v5);
            }
            objc_msgSend(*(id *)(*((void *)&v28 + 1) + 8 * i), "notifyAnnouncementFinishedWithString:didFinishSuccessfully:", self->_announcementOriginalString, -[VOTOutputRequest finishedSuccessfully](v4, "finishedSuccessfully", (void)v28));
          }
          id v22 = [v5 countByEnumeratingWithState:&v28 objects:v32 count:16];
        }
        while (v22);
      }
    }
    else
    {
      objc_msgSend((id)VOTSharedWorkspace, "applicationForPID:");
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "notifyAnnouncementFinishedWithString:didFinishSuccessfully:", self->_announcementOriginalString, -[VOTOutputRequest finishedSuccessfully](v4, "finishedSuccessfully"));
    }

    [(VOTOutputRequest *)self->_announcementRequest setCompletionDelegate:0];
    announcementRequest = self->_announcementRequest;
    self->_announcementRequest = 0;

    self->_announcementPid = -1;
    announcementOriginalString = self->_announcementOriginalString;
    self->_announcementOriginalString = 0;

    if (self->_readAllOutputRequest)
    {
      id v27 = +[VOTOutputManager outputManager];
      [v27 resumeCurrentRequest];
    }
  }
LABEL_36:
}

- (void)outputRequestFinished:(id)a3
{
}

- (id)_cachedLaunchIcon:(id)a3
{
  id v4 = a3;
  id v5 = [(NSMutableArray *)self->_cachedLaunchIcons lastObject];
  id v6 = [v4 uniqueIdentification];
  unsigned int v7 = [v5 isEqual:v6];

  if (v7)
  {
    id v8 = v4;
  }
  else
  {
    id v9 = [v4 elementsInDirection:1 withCount:28];
    id v10 = [(NSMutableArray *)self->_cachedLaunchIcons lastObject];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v11 = v9;
    id v8 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v8)
    {
      uint64_t v12 = *(void *)v19;
      while (2)
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v12) {
            objc_enumerationMutation(v11);
          }
          unsigned int v14 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          id v15 = objc_msgSend(v14, "uniqueIdentification", (void)v18);
          unsigned __int8 v16 = [v10 isEqual:v15];

          if (v16)
          {
            id v8 = v14;
            goto LABEL_13;
          }
        }
        id v8 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }

  return v8;
}

- (BOOL)_reDispatchUpdateAppFromTimerIfBundlesAreNotReady
{
  id v3 = +[VOTWorkspace sharedWorkspace];
  id v4 = [v3 focusedApplications];

  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v10 = objc_msgSend(v9, "uiElement", (void)v14);
        [(id)v10 updateCache:3045];

        id v11 = [v9 uiElement];
        LOBYTE(v10) = [v11 BOOLWithAXAttribute:3045];

        if ((v10 & 1) == 0)
        {
          CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent() - self->_lastScreenChangeNotificationTime;
          LOBYTE(v6) = v12 < 1.0;
          if (v12 < 1.0)
          {
            [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer dispatchAfterDelay:0.300000012];
            LOBYTE(v6) = 1;
          }
          goto LABEL_12;
        }
      }
      id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return (char)v6;
}

- (void)_handleUpdateAppFromTimer
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (![(VOTElementManager *)self _reDispatchUpdateAppFromTimerIfBundlesAreNotReady])
  {
    unsigned int v3 = [(VOTElementManager *)self _shouldSuppressSpeechForPlayPause];
    id v4 = &kCFBooleanFalse;
    if (!v3) {
      id v4 = &kCFBooleanTrue;
    }
    CFBooleanRef v5 = *v4;
    [(VOTElementManager *)self _updateApplicationAndSpeak:v5];
  }
}

- (void)voiceOverDidRegisterWithSystem
{
}

- (void)updateApplicationAndSpeak:(id)a3
{
  CFBooleanRef v4 = (const __CFBoolean *)a3;
  if (!v4) {
    CFBooleanRef v4 = kCFBooleanFalse;
  }
  CFBooleanRef v5 = v4;
  -[SCRCThread performSelector:onTarget:count:objects:](self->_elementManagerThread, "performSelector:onTarget:count:objects:", "_updateApplicationAndSpeak:", self, 1, v4, 0);
}

- (id)_firstResponderForApplications:(id)a3
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = a3;
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * i), "firstResponderElementForFocus", (void)v11);
        if (v8)
        {
          id v9 = (void *)v8;
          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  id v9 = 0;
LABEL_11:

  return v9;
}

- (id)_firstElementForFocusFromElementCommunities:(id)a3 currentElement:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (v7) {
    [(VOTElementManager *)self _elementCommunityForElement:v7];
  }
  else {
  uint64_t v8 = [(VOTElementManager *)self mostRecentElementCommunity];
  }
  if ([v6 containsObject:v8])
  {
    id v9 = [(VOTElementManager *)self _sideAppDividerElement];
    unsigned int v10 = [v8 isEqual:v9];

    if (v10)
    {
      id v11 = v8;
    }
    else
    {
      long long v12 = [v8 firstElementInApplicationForFocus];
      if (v12) {
        goto LABEL_11;
      }
      id v11 = [v8 firstElementInApplication];
    }
    long long v12 = v11;
    if (v11)
    {
LABEL_11:
      if ([v12 isAccessibleElement]) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    long long v12 = 0;
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v13 = v6;
  id v14 = [v13 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v23;
    do
    {
      long long v17 = 0;
      do
      {
        if (*(void *)v23 != v16) {
          objc_enumerationMutation(v13);
        }
        long long v18 = *(void **)(*((void *)&v22 + 1) + 8 * (void)v17);
        long long v19 = objc_msgSend(v18, "firstElementInApplicationForFocus", (void)v22);

        if (v19
          || ([v18 firstElementInApplication], (long long v19 = objc_claimAutoreleasedReturnValue()) != 0))
        {
          long long v12 = v19;
          if ([v19 isAccessibleElement]) {
            goto LABEL_26;
          }
        }
        else
        {
          long long v12 = 0;
        }
        long long v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      id v20 = [v13 countByEnumeratingWithState:&v22 objects:v26 count:16];
      id v15 = v20;
      long long v19 = v12;
    }
    while (v20);
  }
  else
  {
    long long v19 = v12;
  }
LABEL_26:

  long long v12 = v19;
LABEL_27:

  return v12;
}

- (id)_elementCommunityForElement:(id)a3
{
  id v4 = a3;
  id v5 = [v4 application];
  id v6 = [(VOTElementManager *)self _sideAppDividerElement];
  if ([v4 isEqual:v6])
  {
    id v7 = v6;
  }
  else
  {
    id v7 = [v4 elementCommunity];
  }
  uint64_t v8 = v7;

  return v8;
}

- (void)_cacheFocusedElement:(id)a3 forElementCommunity:(id)a4
{
  id v6 = a3;
  id v10 = [a4 elementCommunityIdentifier];
  id v7 = [v6 uiElement];

  id v8 = [v7 axElement];
  id v9 = v10;
  if (v8 && v10)
  {
    [(NSMutableDictionary *)self->_focusedElementsByElementCommunityIdentifier setObject:v8 forKey:v10];
    id v9 = v10;
  }
}

- (id)_retrieveCachedFocusedElementForElementCommunity:(id)a3
{
  id v4 = a3;
  id v5 = [v4 elementCommunityIdentifier];
  if (v5
    && (id v6 = [(NSMutableDictionary *)self->_focusedElementsByElementCommunityIdentifier objectForKey:v5]) != 0)
  {
    id v7 = +[AXUIElement uiElementWithAXElement:v6];
    id v8 = +[VOTElement elementWithUIElement:v7];

    id v9 = [v4 application];
    id v10 = [v9 uiElement];
    unsigned int v11 = [v10 pid];
    long long v12 = [v8 uiElement];
    unsigned int v13 = [v12 pid];

    if (v11 != v13)
    {
      id v14 = [v8 uiElement];
      [v14 axElement];
      id v15 = (const void *)AXUICreateApplicationElementForElement();

      if (v15)
      {
        uint64_t v16 = +[AXUIElement uiElementWithAXElement:v15];
        uint64_t v17 = +[VOTElement elementWithUIElement:v16];

        CFRelease(v15);
        id v9 = (void *)v17;
      }
    }
    if ([v8 isValidForApplication:v9])
    {
      id v18 = v8;
    }
    else
    {
      [(NSMutableDictionary *)self->_focusedElementsByElementCommunityIdentifier removeObjectForKey:v5];
      id v18 = 0;
    }
  }
  else
  {
    id v18 = 0;
  }

  return v18;
}

- (id)_stringForApplicationWithName:(id)a3 inApplications:(id)a4 withRole:(int64_t)a5
{
  id v7 = a3;
  id v8 = a4;
  id v9 = v7;
  id v10 = +[VOTElement springBoardApplication];
  unsigned int v11 = [v10 applicationIsRTL];

  long long v12 = v9;
  if ((unint64_t)[v8 count] >= 2)
  {
    long long v12 = v9;
    if (AXDeviceSupportsSideApp())
    {
      if (a5 == 3)
      {
        id v15 = off_1001EA9E8;
        id v18 = @"app.floating.position.format";
      }
      else
      {
        if (a5 == 2)
        {
          id v15 = off_1001EA9E8;
          CFStringRef v16 = @"app.right.position.format";
          CFStringRef v17 = @"app.left.position.format";
LABEL_10:
          if (v11) {
            id v18 = (__CFString *)v17;
          }
          else {
            id v18 = (__CFString *)v16;
          }
          goto LABEL_14;
        }
        long long v12 = v9;
        if (a5 != 1) {
          goto LABEL_15;
        }
        unsigned int v13 = [v8 allValues];
        unsigned int v14 = [v13 containsObject:&off_1001C5140];

        id v15 = off_1001EA9E8;
        if (v14)
        {
          CFStringRef v16 = @"app.left.position.format";
          CFStringRef v17 = @"app.right.position.format";
          goto LABEL_10;
        }
        id v18 = @"app.primary.position.format";
      }
LABEL_14:
      long long v19 = sub_100051804(v15, v18, 0);
      long long v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v19, v9);
    }
  }
LABEL_15:

  return v12;
}

- (BOOL)_addApplicationLabelsAndSummariesToRequest:(id)a3 applicationNames:(id *)a4 summaryElements:(id *)a5
{
  id v8 = a3;
  id v9 = +[NSMutableArray array];
  id v10 = +[NSMutableArray array];
  uint64_t v30 = 0;
  long long v31 = &v30;
  uint64_t v32 = 0x2020000000;
  char v33 = 0;
  int v11 = AXDeviceSupportsSideApp();
  char v12 = v11;
  if (v11)
  {
    unsigned int v13 = +[AXSpringBoardServer server];
    unsigned int v14 = [v13 medusaApps];
  }
  else
  {
    unsigned int v14 = 0;
  }
  currentApplications = self->_currentApplications;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100093508;
  v22[3] = &unk_1001B5A68;
  char v29 = v12;
  id v16 = v14;
  id v23 = v16;
  id v17 = v8;
  id v24 = v17;
  long long v25 = self;
  id v18 = v9;
  id v26 = v18;
  long long v28 = &v30;
  id v19 = v10;
  id v27 = v19;
  [(NSArray *)currentApplications enumerateObjectsUsingBlock:v22];
  if (a4) {
    *a4 = v18;
  }
  if (a5) {
    *a5 = v19;
  }
  char v20 = *((unsigned char *)v31 + 24);

  _Block_object_dispose(&v30, 8);
  return v20;
}

- (void)_testingSetApplications:(id)a3
{
}

- (BOOL)_isWebAppStillOpen
{
  id v2 = [(NSArray *)self->_currentApplications ax_filteredArrayUsingBlock:&stru_1001B5A88];
  BOOL v3 = [v2 count] != 0;

  return v3;
}

- (void)_updateApplicationAndSpeak:(id)a3
{
  id v4 = a3;
  id v5 = [(VOTElementManager *)self nextElementToFocus];
  [(VOTElementManager *)self setNextElementToFocus:0];
  id v6 = [(VOTElementManager *)self nextStringToSpeakOnScreenChange];
  id v7 = [v6 copy];

  [(VOTElementManager *)self setNextStringToSpeakOnScreenChange:0];
  id v8 = VOTLogLayoutChange();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_10011FE9C();
  }

  if ([(id)VOTSharedWorkspace screenOn])
  {
    id v9 = VOTLogElement();
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BeginAppUpdate", "", buf, 2u);
    }

    AXPerformBlockOnMainThreadAfterDelay();
    double v10 = CFAbsoluteTimeGetCurrent() - self->_lastPopupTime;
    int v11 = [(VOTElementManager *)self _currentElement];
    if ([(id)VOTSharedWorkspace tapAndHoldMode])
    {
      if (v10 >= 1.25)
      {
        char v12 = [v11 application];
        unsigned __int8 v13 = [v11 isValidForApplication:v12];

        if (v13) {
          goto LABEL_339;
        }
      }
    }
    unsigned int v14 = +[VOTElement springBoardApplication];
    if ([v14 isSystemSleeping])
    {
      id v15 = +[VOTWorkspace sharedWorkspace];
      unsigned int v16 = [v15 currentCallState];

      if (!v16)
      {
        [(VOTElementManager *)self _closeItemChooser];
        [(VOTElementManager *)self _setCurrentElement:0];
        [(VOTElementFetcher *)self->_fetchManager forceUpdate];
        [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer cancel];
        id v19 = +[VOTDisplayManager displayManager];
        [v19 setCursorFrameForElement:0];
        goto LABEL_26;
      }
    }
    id v17 = +[VOTWorkspace sharedWorkspace];
    if ([v17 currentCallState] == 1
      && _AXSVoiceOverTouchShouldRouteToSpeakerWithProximity())
    {

      if (!v5)
      {
        id v18 = VOTLogCommon();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Staying on current element because we're in a phone call and the proximity sensor is causing the screen to go off and on", buf, 2u);
        }

        id v5 = self->_currentElement;
      }
    }
    else
    {
    }
    if (([v14 isVoiceControlRunning] & 1) != 0
      || [v14 isSystemWideGestureInProgress])
    {
      id v19 = +[VOTOutputManager outputManager];
      [v19 stopSpeakingAtBoundary:0];
LABEL_26:

      byte_1001EB9B8 = 0;
LABEL_338:

LABEL_339:
      goto LABEL_340;
    }
    char v20 = +[VOTWorkspace sharedWorkspace];
    long long v21 = [v20 focusedApplications];

    long long v22 = VOTLogLayoutChange();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      sub_10011FE30();
    }

    id v309 = [(id)VOTSharedWorkspace fingerCount];
    if ([v4 BOOLValue])
    {
      id v23 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    }
    else
    {
      id v23 = 0;
    }
    NSUInteger location = (id *)&self->_currentApplications;
    unsigned int v323 = [(NSArray *)self->_currentApplications isEqualToArray:v21];
    uint64_t v24 = [v11 application];
    id obj = v21;
    v328 = (void *)v24;
    if (v24) {
      unsigned __int8 v25 = [v21 containsObject:v24];
    }
    else {
      unsigned __int8 v25 = 0;
    }
    if (![(VOTElementManager *)self _isWebAppStillOpen])
    {
      id v26 = VOTLogWebPageMovement();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
        sub_10011FDFC();
      }

      [(VOTElementManager *)self _clearWebLoadedSound];
    }
    if (v323)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      [(VOTElementManager *)self lastPauseSpeechAndHapticsStart];
      if (Current - v28 > 30.0) {
        [(VOTElementManager *)self _handlePauseSpeechAndHapticsNotification:&__kCFBooleanFalse];
      }
      id v327 = 0;
      id v322 = 0;
      unsigned int v307 = 0;
    }
    else
    {
      objc_storeStrong(location, v21);
      id v337 = 0;
      id v338 = 0;
      unsigned int v307 = [(VOTElementManager *)self _addApplicationLabelsAndSummariesToRequest:v23 applicationNames:&v338 summaryElements:&v337];
      id v322 = v338;
      id v327 = v337;
      double v29 = CFAbsoluteTimeGetCurrent();
      [(VOTElementManager *)self lastDuckingDisablementSessionStart];
      if (v29 - v30 > 1.0) {
        [(VOTElementManager *)self _handleDuckingDisabling:&__kCFBooleanFalse];
      }
      [(VOTElementManager *)self _handlePauseSpeechAndHapticsNotification:&__kCFBooleanFalse];
      elementBeforePopup = self->_elementBeforePopup;
      self->_elementBeforePopup = 0;

      uint64_t v32 = VOTLogCommon();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Application is no longer valid, resetting", buf, 2u);
      }
    }
    currentApplications = self->_currentApplications;
    id v34 = [(VOTElementManager *)self previousTableOrCollectionViewApplication];
    LOBYTE(currentApplications) = [(NSArray *)currentApplications containsObject:v34];

    if ((currentApplications & 1) == 0)
    {
      self->_previousTableOrCollectionViewRowTime = -3061152000.0;
      id v35 = [(VOTElementManager *)self previousTableOrCollectionViewList];
      [v35 removeAllObjects];

      uint64_t v36 = [(VOTElementManager *)self previousTableOrCollectionViewToMetadata];
      [v36 removeAllObjects];

      [(VOTElementManager *)self setPreviousTableOrCollectionViewApplication:0];
    }
    if ((v25 & 1) == 0)
    {
      lastScrollStatus = self->_lastScrollStatus;
      self->_lastScrollStatus = 0;
    }
    unsigned int v38 = [(VOTElement *)self->_currentElement verifyElementExists:0];
    double v39 = VOTLogWebPageMovement();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG)) {
      sub_10011FD30((id *)&self->_currentElement, v38);
    }
    p_currentElement = (id *)&self->_currentElement;

    double v40 = CFAbsoluteTimeGetCurrent();
    [(VOTElementManager *)self lastUserElementTouchTime];
    unsigned int v313 = v38;
    if (v40 - v41 < 1.0) {
      unsigned int v42 = v38;
    }
    else {
      unsigned int v42 = 0;
    }
    double v43 = obj;
    if (v42 == 1)
    {
      VOTLogCommon();
      unsigned int v44 = (VOTElement *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(&v44->super, OS_LOG_TYPE_INFO))
      {
        id v45 = *p_currentElement;
        *(_DWORD *)long long buf = 138412290;
        *(void *)v340 = v45;
        _os_log_impl((void *)&_mh_execute_header, &v44->super, OS_LOG_TYPE_INFO, "Not moving focus for screen change because we touched recently on an element and it still exists{%@}", buf, 0xCu);
      }
      goto LABEL_337;
    }
    v308 = v14;
    if ([obj count] == (id)1
      && ([obj firstObject],
          CFStringRef v46 = objc_claimAutoreleasedReturnValue(),
          unsigned int v47 = [v46 isClipViewService],
          v46,
          v47))
    {
    }
    else if (v5)
    {
      unsigned int v44 = v5;
      int v48 = 0;
      id v5 = v44;
      goto LABEL_62;
    }
    unsigned int v44 = [(VOTElementManager *)self _firstElementWithCurrentElement:v11 focusedApplications:obj];

    id v5 = 0;
    int v48 = 1;
LABEL_62:
    v311 = v11;
    unsigned int v49 = VOTLogWebPageMovement();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
      sub_10011FCC4();
    }

    if (v313 && (v48 & [*p_currentElement hasNativeFocus]) == 1)
    {
      id v50 = VOTLogWebPageMovement();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
        sub_10011FC18();
      }

      if (![*p_currentElement doesHaveTraits:kAXWebContentTrait]) {
        goto LABEL_71;
      }
      uint64_t v51 = [(VOTElementManager *)self webPageLoadURL];
      if (!v51) {
        goto LABEL_71;
      }
      unsigned int v52 = (void *)v51;
      [(VOTElementManager *)self webPageLoadURL];
      v54 = uint64_t v53 = v44;
      int v55 = [(VOTElement *)self->_currentElement webAreaURL];
      unsigned int v56 = [v54 isEqual:v55];

      double v43 = obj;
      unsigned int v44 = v53;

      if (v56)
      {
LABEL_71:
        uint64_t v57 = VOTLogWebPageMovement();
        if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
        {
          id v58 = *p_currentElement;
          [(VOTElement *)v44 webAreaURL];
          v60 = id v59 = v44;
          *(_DWORD *)long long buf = 138412802;
          *(void *)v340 = v58;
          *(_WORD *)&v340[8] = 2112;
          *(void *)v341 = v59;
          *(_WORD *)&v341[8] = 2112;
          *(void *)&v341[10] = v60;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "Current element has native focus, not moving focus again: %@ -> %@:newElement:%@", buf, 0x20u);

          unsigned int v44 = v59;
        }

        int v11 = v311;
        unsigned int v14 = v308;
        goto LABEL_337;
      }
    }
    v306 = v7;
    if (CFAbsoluteTimeGetCurrent() - self->_previousTableOrCollectionViewRowTime <= 1.0) {
      goto LABEL_103;
    }
    unsigned __int8 v61 = [(VOTElementManager *)self previousTableOrCollectionViewApplication];
    if ([v61 isSpringBoard])
    {
LABEL_102:

LABEL_103:
      int v11 = v311;
      goto LABEL_104;
    }
    v315 = v44;
    id v62 = [(VOTElementManager *)self previousTableOrCollectionViewApplication];
    unsigned __int8 v63 = [v62 isSetupBuddy];

    if (v63)
    {
      int v11 = v311;
      unsigned int v44 = v315;
LABEL_104:
      uint64_t v301 = kAXStatusBarElementTrait;
      if (-[VOTElement doesHaveTraits:](v44, "doesHaveTraits:")
        || ([(VOTElement *)v44 uiElement],
            unsigned int v93 = objc_claimAutoreleasedReturnValue(),
            unsigned int v94 = [v93 BOOLWithAXAttribute:2238],
            v93,
            v94))
      {

        id v95 = VOTLogLayoutChange();
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG)) {
          sub_10011FB7C();
        }

        unsigned int v44 = 0;
      }
      if ([v11 isValid])
      {
        id v96 = [v11 uiElement];
        unsigned int v97 = [v96 BOOLWithAXAttribute:2211];

        if (v97)
        {
          v316 = v44;
          CGFloat v98 = +[VOTElement systemWideElement];
          [v11 centerPoint];
          objc_msgSend(v98, "convertPoint:fromContextId:", objc_msgSend(v11, "windowContextId"), v99, v100);
          double v102 = v101;
          double v104 = v103;

          BOOL v105 = -[VOTElement initWithPosition:]([VOTElement alloc], "initWithPosition:", v102, v104);
          uint64_t v106 = v105;
          if (v105 && [(VOTElement *)v105 isEqual:v11] && v10 >= 1.25)
          {
            unsigned __int8 v107 = v11;

            unsigned int v108 = VOTLogLayoutChange();
            if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG)) {
              sub_10011FB14();
            }

            double v43 = obj;
          }
          else
          {
            unsigned __int8 v107 = v316;
          }

          unsigned int v44 = v107;
        }
      }
      if ([(VOTElement *)v44 isBannerNotification])
      {
        BOOL v109 = VOTLogElement();
        if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG)) {
          sub_10011FAE0();
        }

        unsigned int v44 = 0;
      }
      id v110 = [(VOTElement *)v44 bundleIdentifier];
      if ([v110 isEqualToString:@"com.apple.assistivetouchd"])
      {
        id v111 = [*p_currentElement bundleIdentifier];
        unsigned __int8 v112 = [v111 isEqualToString:@"com.apple.assistivetouchd"];

        unsigned int v14 = v308;
        if ((v112 & 1) == 0)
        {
          char v113 = VOTLogElement();
          if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG)) {
            sub_10011FAAC();
          }

LABEL_128:
          id v7 = v306;
LABEL_337:

          goto LABEL_338;
        }
      }
      else
      {
      }
      long long v114 = VOTLogWebPageMovement();
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG)) {
        sub_10011FA0C();
      }

      BOOL v115 = v10 >= 1.25 && v309 == (id)1;
      int v116 = !v115;
      int v310 = v116;
      v303 = v5;
      id v305 = v4;
      if (v115)
      {
        id v127 = objc_allocWithZone((Class)VOTElement);
        [(id)VOTSharedWorkspace fingerPosition];
        v128 = (VOTElement *)objc_msgSend(v127, "initWithPosition:");
        v129 = [(VOTElementManager *)self _currentElement];
        unsigned int v130 = [(VOTElement *)v128 isEqual:v129];

        if (!v130) {
          goto LABEL_290;
        }
        v128 = v128;
        v131 = v44;
        unsigned int v44 = v128;
        goto LABEL_288;
      }
      CFAbsoluteTime v117 = [(VOTElement *)v44 application];
      unsigned int v118 = [v117 isSystemApp];

      if (v118 && CFAbsoluteTimeGetCurrent() - self->_lastItemSelectionFromTouch > 1.0)
      {
        double v119 = v44;
        double v120 = [(VOTElementManager *)self _cachedLaunchIcon:v44];
        double v121 = VOTLogElement();
        if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG)) {
          sub_10011F9A4();
        }

        [v120 updateIsVisible];
        if ([v120 isVisible])
        {
          double v122 = v120;

          id v123 = VOTLogElement();
          if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG)) {
            sub_10011F86C();
          }

          if ([obj count] == (id)1)
          {
            v124 = [obj firstObject];
            unsigned int v125 = [v124 isSystemApp];

            if (v125) {
              [(NSMutableArray *)self->_cachedLaunchIcons removeLastObject];
            }
          }
          int v126 = 1;
          unsigned int v44 = v122;
          goto LABEL_165;
        }

        unsigned int v44 = v119;
      }
      if (!self->_elementBeforeAlert || [(VOTElement *)v44 doesHaveTraits:kAXIsEditingTrait])
      {
        int v126 = 0;
        goto LABEL_166;
      }
      p_elementBeforeAlert = &self->_elementBeforeAlert;
      v133 = VOTLogWebPageMovement();
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG)) {
        sub_10011F93C();
      }

      id v134 = +[VOTElement systemWideElement];
      [(VOTElement *)*p_elementBeforeAlert centerPoint];
      objc_msgSend(v134, "convertPoint:fromContextId:", -[VOTElement windowContextId](*p_elementBeforeAlert, "windowContextId"), v135, v136);
      double v138 = v137;
      double v140 = v139;

      double v122 = -[VOTElement initWithPosition:]([VOTElement alloc], "initWithPosition:", v138, v140);
      [(VOTElement *)v122 frame];
      CGFloat v142 = v141;
      CGFloat v144 = v143;
      CGFloat v146 = v145;
      CGFloat v148 = v147;
      [(VOTElement *)*p_elementBeforeAlert frame];
      v351.origin.CGFloat x = v149;
      v351.origin.double y = v150;
      v351.size.CGFloat width = v151;
      v351.size.CGFloat height = v152;
      v347.origin.CGFloat x = v142;
      v347.origin.double y = v144;
      v347.size.CGFloat width = v146;
      v347.size.CGFloat height = v148;
      CGRect v348 = CGRectIntersection(v347, v351);
      if (v348.size.width <= 0.0 || CFAbsoluteTimeGetCurrent() - self->_lastAlertTime <= 3.0)
      {
        int v126 = 0;
      }
      else
      {
        double v122 = v122;

        v153 = VOTLogLayoutChange();
        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG)) {
          sub_10011F8D4();
        }

        v154 = *p_elementBeforeAlert;
        *p_elementBeforeAlert = 0;

        int v126 = 1;
        unsigned int v44 = v122;
      }
      int v11 = v311;
LABEL_165:

      double v43 = obj;
LABEL_166:
      v155 = AXLogCommon();
      if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v156 = [(VOTElement *)self->_elementBeforePopup isVisible];
        v157 = self->_elementBeforePopup;
        *(_DWORD *)long long buf = 67109634;
        *(_DWORD *)v340 = v126;
        *(_WORD *)&v340[4] = 1024;
        *(_DWORD *)&v340[6] = v156;
        *(_WORD *)v341 = 2112;
        *(void *)&v341[2] = v157;
        _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "Chose new: %d, before pops: %d, %@", buf, 0x18u);
      }

      if (v126) {
        goto LABEL_186;
      }
      v158 = self->_elementBeforePopup;
      if (!v158)
      {
        char v160 = 0;
        goto LABEL_177;
      }
      p_elementBeforePopup = &self->_elementBeforePopup;
      [(VOTElement *)v158 updateIsVisible];
      if (![(VOTElement *)self->_elementBeforePopup isVisible]
        || ![(VOTElement *)*p_elementBeforePopup doesHaveTraits:kAXLaunchIconTrait | kAXWebContentTrait]&& ![(VOTElement *)*p_elementBeforePopup isChronod]|| [(VOTElement *)v44 doesHaveAllTraits:kAXTextEntryTrait | kAXIsEditingTrait])
      {
        char v160 = 0;
LABEL_175:
        double v43 = obj;
LABEL_177:
        if ((v160 & 1) == 0 && ((v323 ^ 1) & 1) == 0 && (byte_1001EB9B8 & 1) == 0)
        {
          if ([(VOTElement *)v44 doesHaveTraits:v301])
          {
            if ([*location count] == (id)1)
            {
              v161 = [*location firstObject];
              unsigned int v162 = [v161 isSpringBoard];

              if (v162)
              {
                v163 = VOTLogWebPageMovement();
                unsigned int v14 = v308;
                if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG)) {
                  sub_10011F734();
                }

                [(VOTElementManager *)self _handleScreenChange:0 sound:0];
                byte_1001EB9B8 = 1;
                goto LABEL_128;
              }
            }
          }
        }
LABEL_186:
        if ([(VOTElementManager *)self _shouldMoveToLastWebFormControl])
        {
          p_webFormControlBeforeInteraction = &self->_webFormControlBeforeInteraction;
          [(VOTElement *)self->_webFormControlBeforeInteraction updateLabel];
          [(VOTElement *)self->_webFormControlBeforeInteraction updateValue];
          v165 = self->_webFormControlBeforeInteraction;
          v166 = v44;
          unsigned int v44 = v165;

          v167 = VOTLogWebPageMovement();
          if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG)) {
            sub_10011F560();
          }

          v168 = *p_webFormControlBeforeInteraction;
          *p_webFormControlBeforeInteraction = 0;
LABEL_190:

          goto LABEL_191;
        }
        v172 = [(VOTElement *)v44 application];
        unsigned int v173 = [v172 isSafari];

        if (v173)
        {
          v174 = VOTLogWebPageMovement();
          id v7 = v306;
          unsigned int v14 = v308;
          if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v296 = [(VOTElementManager *)self webPageLoadedGenerationMark];
            currentElement = self->_currentElement;
            *(_DWORD *)long long buf = 134218498;
            *(void *)v340 = v296;
            *(_WORD *)&v340[8] = 1024;
            *(_DWORD *)v341 = v313;
            *(_WORD *)&v341[4] = 2112;
            *(void *)&v341[6] = currentElement;
            _os_log_debug_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEBUG, "In safari, web generation: %lld\nstill valid: %d current: %@", buf, 0x1Cu);
          }

          if ([(VOTElementManager *)self webPageLoadedGenerationMark])
          {
            v175 = [(VOTElement *)v44 immediateRemoteParent];
            [v175 firstWebElement];
            v177 = v176 = v44;

            v317 = v176;
            if (v177)
            {
              v178 = 0;
              unsigned int v14 = v308;
            }
            else
            {
              v218 = [(VOTElement *)v176 application];
              v178 = [v218 firstElementInApplication];

              unsigned int v14 = v308;
              if (!v178)
              {
                v219 = v176;
                v220 = VOTLogWebPageMovement();
                if (os_log_type_enabled(v220, OS_LOG_TYPE_DEBUG)) {
                  sub_10011F664();
                }

                v178 = v219;
              }
              v177 = [(VOTElementManager *)self _nearestWebElement:v178];
            }
            v221 = VOTLogWebPageMovement();
            if (os_log_type_enabled(v221, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v298 = [(VOTElementManager *)self webPageLoadedGenerationMark];
              *(_DWORD *)long long buf = 134218498;
              *(void *)v340 = v298;
              *(_WORD *)&v340[8] = 2112;
              *(void *)v341 = v177;
              *(_WORD *)&v341[8] = 2112;
              *(void *)&v341[10] = v178;
              _os_log_debug_impl((void *)&_mh_execute_header, v221, OS_LOG_TYPE_DEBUG, "Looking for webPageElement: %lld Nearest web element %@\n - starting with: %@", buf, 0x20u);
            }

            if (!v177)
            {
              v222 = VOTLogWebPageMovement();
              if (os_log_type_enabled(v222, OS_LOG_TYPE_DEBUG)) {
                sub_10011F630();
              }

              double v43 = obj;
              unsigned int v44 = v317;
              goto LABEL_337;
            }
            unsigned int v44 = v177;

            v168 = v44;
            goto LABEL_190;
          }
          if ((v313 & 1) != 0
            || (double v195 = CFAbsoluteTimeGetCurrent(),
                [(VOTElementManager *)self lastElementChangeTime],
                v195 - v196 < 1.0))
          {
            if ([*p_currentElement doesHaveTraits:kAXWebContentTrait])
            {
              v197 = VOTLogWebPageMovement();
              if (os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG)) {
                sub_10011F5C8();
              }

              goto LABEL_337;
            }
          }
        }
        else if ([*p_currentElement hasNativeFocus])
        {
          v185 = [*p_currentElement application];
          unsigned int v186 = [v185 isVisible];

          if (v186)
          {
            [*p_currentElement updateIsVisible];
            v187 = [*p_currentElement immediateRemoteParent];
            [v187 updateIsVisible];

            if ([*p_currentElement isVisible])
            {
              uint64_t v188 = [*p_currentElement immediateRemoteParent];
              if (!v188
                || (v189 = (void *)v188,
                    [*p_currentElement immediateRemoteParent],
                    v190 = objc_claimAutoreleasedReturnValue(),
                    unsigned int v191 = [v190 isVisible],
                    v190,
                    v189,
                    v191))
              {
                v192 = v44;
                v193 = VOTLogWebPageMovement();
                if (os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG)) {
                  sub_10011F6CC();
                }

                unsigned int v44 = (VOTElement *)*p_currentElement;
                v168 = v192;
                goto LABEL_190;
              }
            }
          }
        }
LABEL_191:
        v169 = [(VOTElementManager *)self _currentElement];
        unsigned __int8 v170 = [(VOTElement *)v44 isEqual:v169];

        if (v170)
        {
          int v171 = 1;
LABEL_242:
          v225 = VOTLogLayoutChange();
          if (os_log_type_enabled(v225, OS_LOG_TYPE_DEBUG)) {
            sub_10011F4F8();
          }

          v128 = [(VOTElementManager *)self _firstResponderForApplications:obj];
          unsigned int v226 = [(id)VOTSharedWorkspace brailleInputActive];
          unint64_t v227 = [(VOTElement *)v128 traits];
          if ((kAXIsEditingTrait & v227) != 0) {
            unsigned int v228 = v226;
          }
          else {
            unsigned int v228 = 0;
          }
          if (((v171 | v228) & 1) == 0) {
            [(VOTElementManager *)self deactivateGesturedTextInputIfNeeded:0];
          }
          if (AXDeviceHasJindo())
          {
            v229 = +[AXSpringBoardServer server];
            v230 = [v229 jindoAppBundleIndentifiers];
            jindoAppBundleIdentifiers = self->_jindoAppBundleIdentifiers;
            self->_jindoAppBundleIdentifiers = v230;

            v232 = self->_jindoAppBundleIdentifiers;
            v233 = [(VOTElement *)v44 bundleIdentifier];
            if ([(NSArray *)v232 containsObject:v233]
              && ![(VOTElement *)v44 isInJindoWindow])
            {
              unsigned __int8 v239 = [(VOTElement *)v44 isInAppSwitcher];

              if ((v239 & 1) == 0)
              {

                id v7 = v306;
                int v11 = v311;
                unsigned int v14 = v308;
                double v43 = obj;
                goto LABEL_337;
              }
            }
            else
            {
            }
          }
          [(VOTElement *)v44 scrollToElementForDirectional:1 withCompletion:0];
          [(VOTElementManager *)self _setCurrentElement:v44];
          if ([v306 length]) {
            id v234 = [v23 addAttributedString:v306];
          }
          if (v307 && ([v327 containsObject:v44] & 1) != 0) {
            goto LABEL_289;
          }
          if (v171)
          {
            double v43 = obj;
            if (![(VOTElement *)v44 isInAppSwitcher]) {
              goto LABEL_290;
            }
          }
          else
          {
            uint64_t v235 = [(VOTElement *)v44 label];
            double v43 = obj;
            if (v235)
            {
              v236 = (void *)v235;
              [(VOTElement *)v44 label];
              v238 = v237 = v44;
              if ([v322 containsObject:v238])
              {
                unsigned __int8 v324 = [(VOTElement *)v237 isInAppSwitcher];

                unsigned int v44 = v237;
                if ((v324 & 1) == 0)
                {
LABEL_290:

                  v250 = +[VOTElement springBoardApplication];
                  unsigned int v251 = [v250 isSystemLocked];

                  v252 = +[VOTWorkspace sharedWorkspace];
                  unsigned int v253 = [v252 currentCallState];

                  v254 = +[VOTWorkspace sharedWorkspace];
                  if ([v254 currentCallState] == 2)
                  {
                    BOOL v314 = 1;
                  }
                  else
                  {
                    v255 = +[VOTWorkspace sharedWorkspace];
                    BOOL v314 = [v255 currentCallState] == 1;
                  }
                  unsigned int v256 = [(VOTElementManager *)self _shouldNotSpeakForIncomingCall];
                  if (v253 == 1 && [v43 count] == (id)1)
                  {
                    v257 = [v43 firstObject];
                    if ([v257 isSpringBoard])
                    {
                      unsigned int v258 = 1;
                    }
                    else
                    {
                      v259 = [v43 firstObject];
                      unsigned int v258 = [v259 isMobilePhone];
                    }
                  }
                  else
                  {
                    unsigned int v258 = 0;
                  }
                  v321 = v44;
                  if (v251)
                  {
                    v260 = +[VOTElement springBoardApplication];
                    unsigned int v261 = [v260 isAlarmRinging];
                  }
                  else
                  {
                    unsigned int v261 = 0;
                  }
                  unsigned int v326 = v251;
                  double v262 = CFAbsoluteTimeGetCurrent();
                  [(VOTElementManager *)self lastLayoutChangeNotificationTime];
                  if (v262 - v263 >= 0.5) {
                    unsigned int v264 = 0;
                  }
                  else {
                    unsigned int v264 = [(VOTElement *)v321 isEqual:*p_currentElement];
                  }
                  int v265 = v256 | v258 | v310 ^ 1 | v261 | v264;
                  v266 = VOTLogCommon();
                  if (os_log_type_enabled(v266, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)long long buf = 67110656;
                    *(_DWORD *)v340 = v326;
                    *(_WORD *)&v340[4] = 1024;
                    *(_DWORD *)&v340[6] = v253;
                    *(_WORD *)v341 = 1024;
                    *(_DWORD *)&v341[2] = v256;
                    *(_WORD *)&v341[6] = 1024;
                    *(_DWORD *)&v341[8] = v258;
                    *(_WORD *)&v341[12] = 1024;
                    *(_DWORD *)&v341[14] = v261;
                    __int16 v342 = 1024;
                    unsigned int v343 = v264;
                    __int16 v344 = 1024;
                    int v345 = v256 | v258 | v310 ^ 1 | v261 | v264;
                    _os_log_impl((void *)&_mh_execute_header, v266, OS_LOG_TYPE_INFO, "Screen change data: locked: %d, callState: %d, shouldSquelchForIncomingCall: %d, shouldSquelchForActiveCall: %d, alarming Ringing: %d, layout change just happened: %d = should not send: %d", buf, 0x2Cu);
                  }

                  v267 = VOTLogCommon();
                  if (os_log_type_enabled(v267, OS_LOG_TYPE_INFO))
                  {
                    v268 = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent() - self->_lastPressOnMediaSessionElement];
                    *(_DWORD *)long long buf = 138412290;
                    *(void *)v340 = v268;
                    _os_log_impl((void *)&_mh_execute_header, v267, OS_LOG_TYPE_INFO, "Screen change should send? %@", buf, 0xCu);
                  }
                  if (CFAbsoluteTimeGetCurrent() - self->_lastPressOnMediaSessionElement < 3.5) {
                    BOOL v269 = 1;
                  }
                  else {
                    BOOL v269 = v265;
                  }
                  id v4 = v305;
                  int v11 = v311;
                  double v43 = obj;
                  if (v326)
                  {
                    double v270 = CFAbsoluteTimeGetCurrent();
                    [(id)VOTSharedWorkspace screenOnTime];
                    char v272 = v270 - v271 >= 2.0 || v314;
                    if ((v272 & 1) == 0)
                    {
                      buf[0] = !v269;
                      v332 = v321;
                      [(VOTElementManager *)self _handleSystemLockedOutputBehavior:v23 shouldSendRequest:buf startElement:&v332];
                      v273 = v332;

                      BOOL v269 = buf[0] == 0;
                      if (buf[0]) {
                        self->_lastLockScreenAlertSpokenTime = CFAbsoluteTimeGetCurrent();
                      }
                      v321 = v273;
                    }
                  }
                  if ([v23 containsActions])
                  {
                    if (v269)
                    {
LABEL_326:
                      unsigned int v44 = v321;
                      if (!v321) {
                        goto LABEL_331;
                      }
                      v276 = [(VOTElement *)v321 label];
                      if ([v276 length])
                      {
                      }
                      else
                      {
                        unint64_t v277 = [(VOTElement *)v321 traits];

                        if (!v277) {
                          goto LABEL_331;
                        }
                      }
                      v331 = v321;
                      AXPerformBlockOnMainThreadAfterDelay();

LABEL_331:
                      [(NSMutableString *)self->_elementTypingBuffer setString:&stru_1001B7888];
                      -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", 0x7FFFFFFFLL, 0, 0);
                      [(VOTElementManager *)self _setCurrentElement:v321];
                      [(VOTElementFetcher *)self->_fetchManager setTriggerSignpostCollection:1];
                      [(VOTElementFetcher *)self->_fetchManager forceUpdate];
                      fetchManager = self->_fetchManager;
                      v279 = [(VOTElementManager *)self _currentElement];
                      [(VOTElementFetcher *)fetchManager updateCacheWithElement:v279];

                      lastValidElement = self->_lastValidElement;
                      self->_lastValidElement = 0;

                      if ([(VOTElementManager *)self _isElementValidForFirstResponder:v321]&& [(VOTElement *)v321 doesHaveTraits:kAXTextEntryTrait])
                      {
                        [(VOTElementManager *)self _disableQuickNavStateTemporarily];
                      }
                      self->_flags.focusIsOnElement = 1;
                      byte_1001EB9B8 = 0;
                      [(VOTElementManager *)self _resetDirectInteractionCache];
                      v281 = VOTLogElement();
                      id v7 = v306;
                      unsigned int v14 = v308;
                      if (os_signpost_enabled(v281))
                      {
                        *(_WORD *)long long buf = 0;
                        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v281, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EndAppUpdate", "", buf, 2u);
                      }

                      id v5 = v303;
                      goto LABEL_337;
                    }
                  }
                  else
                  {
                    v274 = [(VOTElementManager *)self _currentElement];
                    unsigned int v275 = [(VOTElement *)v321 isEqual:v274];

                    if ((v275 | v269)) {
                      goto LABEL_326;
                    }
                  }
                  [(VOTElementManager *)self sendRequest:v23];
                  goto LABEL_326;
                }
              }
              else
              {

                unsigned int v44 = v237;
              }
            }
          }
          [v328 updateTitleElements];
          v131 = [v328 titleElements];
          if ([v131 count])
          {
            id v240 = [v131 objectAtIndex:0];

            if (v240 && ([v240 isEqual:v44] & 1) == 0)
            {
              v241 = [v240 label];
              lastTitleElemenTitle = self->_lastTitleElemenTitle;
              self->_lastTitleElemenTitle = v241;

              [(VOTElementManager *)self _addDescription:v240 toRequest:v23 withOptions:128];
            }
          }
          else
          {
            id v240 = 0;
          }
          if (self->_flags.watchDisplayDidTurnOn)
          {
            id v325 = v240;
            v320 = v44;
            [(VOTElementManager *)self _getAutoSpeakWatchFaceElements:v44];
            long long v333 = 0u;
            long long v334 = 0u;
            long long v335 = 0u;
            long long v336 = 0u;
            id v243 = (id)objc_claimAutoreleasedReturnValue();
            id v244 = [v243 countByEnumeratingWithState:&v333 objects:v346 count:16];
            if (v244)
            {
              id v245 = v244;
              uint64_t v246 = *(void *)v334;
              do
              {
                for (uint64_t i = 0; i != v245; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v334 != v246) {
                    objc_enumerationMutation(v243);
                  }
                  [(VOTElementManager *)self _addDescription:*(void *)(*((void *)&v333 + 1) + 8 * i) toRequest:v23 withOptions:2];
                }
                id v245 = [v243 countByEnumeratingWithState:&v333 objects:v346 count:16];
              }
              while (v245);
            }

            self->_flags.watchDisplayDidTurnOn = 0;
            unsigned int v44 = v320;
            id v240 = v325;
          }
          else
          {
            unint64_t v248 = [(VOTElement *)v44 traits];
            if (!v228 || ((kAXKeyboardKeyTrait | kAXAutoCorrectCandidateTrait) & v248) == 0)
            {
              if ([(VOTElementManager *)self _shouldAnnounceCustomRotorHintForElement:v44])
              {
                uint64_t v249 = 0x200000822;
              }
              else
              {
                uint64_t v249 = 2082;
              }
              [(VOTElementManager *)self _addDescription:v44 toRequest:v23 withOptions:v249];
            }
          }

LABEL_288:
LABEL_289:
          double v43 = obj;
          goto LABEL_290;
        }
        v179 = [(VOTElement *)v44 label];
        [(VOTElementManager *)self _currentElement];
        v180 = v44;
        id v181 = (id)objc_claimAutoreleasedReturnValue();
        v182 = [v181 label];
        if ([v179 isEqualToString:v182])
        {
          v183 = [(VOTElementManager *)self _currentElement];
          BOOL v184 = sub_100026EBC(v180, v183);

          if (v184)
          {
            int v171 = 0;
            unsigned int v44 = v180;
            goto LABEL_242;
          }
          v318 = v180;
          v194 = [(VOTElement *)v180 application];
          v179 = [v194 titleElements];

          if ([v179 count])
          {
            id v181 = [v179 objectAtIndex:0];
          }
          else
          {
            id v181 = 0;
          }
          v223 = [v181 label];
          unsigned int v224 = [v223 isEqualToString:self->_lastTitleElemenTitle];

          int v171 = v224 & !v184;
        }
        else
        {
          v318 = v180;

          int v171 = 0;
        }

        unsigned int v44 = v318;
        goto LABEL_242;
      }
      v319 = v44;
      v198 = VOTLogWebPageMovement();
      if (os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG)) {
        sub_10011F804();
      }

      id v199 = [(VOTElement *)*p_elementBeforePopup application];
      v200 = [v199 uiElement];
      unsigned int v201 = [v200 pid];
      v202 = [(VOTElement *)*p_elementBeforePopup uiElement];
      unsigned int v203 = [v202 pid];

      uint64_t v204 = (uint64_t)v199;
      if (v201 != v203)
      {
        v205 = [(VOTElement *)*p_elementBeforePopup uiElement];
        [v205 axElement];
        v206 = (const void *)AXUICreateApplicationElementForElement();

        uint64_t v204 = (uint64_t)v199;
        if (v206)
        {
          v207 = +[AXUIElement uiElementWithAXElement:v206];
          uint64_t v204 = +[VOTElement elementWithUIElement:v207];

          CFRelease(v206);
        }
      }
      v208 = (void *)v204;
      unsigned int v209 = [(VOTElement *)*p_elementBeforePopup isValidForApplication:v204];
      v210 = +[VOTElement systemWideElement];
      [(VOTElement *)*p_elementBeforePopup centerPoint];
      objc_msgSend(v210, "convertPoint:fromContextId:", -[VOTElement windowContextId](*p_elementBeforePopup, "windowContextId"), v211, v212);
      double v214 = v213;
      double v216 = v215;

      v217 = -[VOTElement initWithPosition:]([VOTElement alloc], "initWithPosition:", v214, v216);
      if ([obj containsObject:v199])
      {
        if (!v209) {
          goto LABEL_346;
        }
      }
      else if (([(VOTElement *)*p_elementBeforePopup isChronod] & v209 & 1) == 0)
      {
        goto LABEL_346;
      }
      [(VOTElement *)v217 frame];
      CGFloat v283 = v282;
      CGFloat v285 = v284;
      CGFloat v287 = v286;
      CGFloat v289 = v288;
      [(VOTElement *)*p_elementBeforePopup frame];
      v352.origin.CGFloat x = v290;
      v352.origin.double y = v291;
      v352.size.CGFloat width = v292;
      v352.size.CGFloat height = v293;
      v349.origin.CGFloat x = v283;
      v349.origin.double y = v285;
      v349.size.CGFloat width = v287;
      v349.size.CGFloat height = v289;
      CGRect v350 = CGRectIntersection(v349, v352);
      if (v350.size.width > 0.0)
      {
        unsigned int v44 = v217;

        v294 = VOTLogLayoutChange();
        if (os_log_type_enabled(v294, OS_LOG_TYPE_DEBUG)) {
          sub_10011F79C();
        }

        v295 = *p_elementBeforePopup;
        *p_elementBeforePopup = 0;

        char v160 = 1;
        goto LABEL_347;
      }
LABEL_346:
      char v160 = 0;
      unsigned int v44 = v319;
LABEL_347:

      id v5 = v303;
      id v4 = v305;
      int v11 = v311;
      goto LABEL_175;
    }
    id v64 = [(VOTElementManager *)self previousTableOrCollectionViewList];
    id v65 = [v64 count];

    if ((uint64_t)(v65 - 1) < 0)
    {
      unsigned __int8 v61 = 0;
      unsigned int v66 = 0;
      unsigned int v44 = v315;
LABEL_97:
      if (![v311 isEqual:v61]) {
        goto LABEL_101;
      }
      CGFloat v92 = VOTLogLayoutChange();
      if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "Not restoring focus to previous table cell because the previous table cell element is the same as the element we are currently focused on.", buf, 2u);
      }
    }
    else
    {
      id v300 = v23;
      v302 = v5;
      id v304 = v4;
      unsigned int v66 = 0;
      while (1)
      {
        uint64_t v67 = v66;
        uint64_t v68 = (uint64_t)(v65 - 1);
        unsigned int v69 = [(VOTElementManager *)self previousTableOrCollectionViewList];
        unsigned int v70 = [v69 objectAtIndexedSubscript:v65 - 1];

        uint64_t v71 = [(VOTElementManager *)self previousTableOrCollectionViewToMetadata];
        unsigned int v72 = [v71 objectForKey:v70];
        id v73 = [v72 indexPath];
        uint64_t v75 = v74;

        uint64_t v76 = [(VOTElementManager *)self previousTableOrCollectionViewToMetadata];
        uint64_t v77 = [v76 objectForKey:v70];
        uint64_t v78 = [v77 label];

        if (v73 != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          id v79 = [(VOTElementManager *)self previousTableOrCollectionViewApplication];
          unsigned __int8 v61 = objc_msgSend(v79, "cellWithRowIndexPath:parentView:", v73, v75, v70);

          if (v61) {
            break;
          }
        }

        --v65;
        unsigned int v66 = (void *)v78;
        if (v68 <= 0)
        {
          unsigned __int8 v61 = 0;
          id v5 = v302;
          id v4 = v304;
          double v43 = obj;
          unsigned int v44 = v315;
LABEL_96:
          id v23 = v300;
          goto LABEL_97;
        }
      }
      unsigned __int8 v80 = [(VOTElementManager *)self previousTableOrCollectionViewList];
      uint64_t v81 = [(VOTElementManager *)self previousTableOrCollectionViewList];
      objc_msgSend(v80, "removeObjectsInRange:", v65, (unsigned char *)objc_msgSend(v81, "count") - v65);

      if ([v311 isEqual:v61])
      {
        id v5 = v302;
        id v4 = v304;
        double v43 = obj;
        unsigned int v44 = v315;
LABEL_95:
        unsigned int v66 = (void *)v78;
        goto LABEL_96;
      }
      unsigned int v82 = [v61 application];
      unsigned int v44 = v315;
      os_log_type_t v83 = [(VOTElement *)v315 application];
      unsigned int v84 = [v82 isEqual:v83];

      id v5 = v302;
      id v4 = v304;
      double v43 = obj;
      if (!v84) {
        goto LABEL_95;
      }
      id v85 = [v61 label];
      unsigned int v66 = (void *)v78;
      id v86 = +[_PASLevenshtein distanceBetweenStrings:v78 and:v85];
      id v87 = [v66 length];
      v299 = v85;
      id v88 = [v85 length];
      if (v87 <= v88) {
        unint64_t v89 = (unint64_t)v88;
      }
      else {
        unint64_t v89 = (unint64_t)v87;
      }
      if (v89 && ((double)v89 - (double)(unint64_t)v86) / (double)v89 <= 0.8)
      {
        unsigned __int8 v91 = VOTLogLayoutChange();
        if (os_log_type_enabled(v91, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_INFO, "Not restoring focus to previous table cell because the previous table cell element has a different label from its current counterpart - table view may have changed out from under us.", buf, 2u);
        }
        id v90 = v315;
        id v23 = v300;
      }
      else
      {
        id v90 = v61;

        unsigned __int8 v91 = VOTLogLayoutChange();
        id v23 = v300;
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG)) {
          sub_10011FBB0();
        }
      }
      CGFloat v92 = v299;

      unsigned int v44 = v90;
    }

LABEL_101:
    goto LABEL_102;
  }
LABEL_340:
}

- (id)_getAutoSpeakWatchFaceElements:(id)a3
{
  id v3 = a3;
  id v4 = +[NSMutableArray array];
  id v5 = v4;
  if (v3) {
    [v4 addObject:v3];
  }
  id v6 = [v3 autoSpeakWatchElements];
  if ([v6 count]) {
    [v5 addObjectsFromArray:v6];
  }

  return v5;
}

- (id)_firstElementWithCurrentElement:(id)a3 focusedApplications:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(VOTElementManager *)self _firstResponderForApplications:v7];
  id v9 = VOTLogLayoutChange();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    sub_10011FFAC();
  }

  if (!v8)
  {
    double v10 = [(VOTElementManager *)self _allElementCommunitiesWithFocusedApplications:v7];
    int v11 = [(VOTElementManager *)self _elementCommunityForElement:v6];
    if (!v6 && CFAbsoluteTimeGetCurrent() - self->_lastScreenChangeNotificationTime <= 2.0)
    {
      uint64_t v12 = [(VOTElementManager *)self _elementCommunityForElement:self->_elementBeforeScreenChange];

      int v11 = (void *)v12;
    }
    id v8 = [(VOTElementManager *)self _firstElementForFocusFromElementCommunities:v10 currentElement:v6];
    unsigned __int8 v13 = [(VOTElementManager *)self _elementCommunityForElement:v8];
    unsigned int v14 = VOTLogLayoutChange();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
      sub_10011FF38((uint64_t)v8);
    }

    if (([v8 isAlive] & 1) == 0)
    {
      id v15 = VOTLogLayoutChange();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        sub_10011FF04();
      }

      id v8 = 0;
    }
    if ([v10 containsObject:v11]) {
      [v13 isEqual:v11];
    }
  }

  return v8;
}

- (void)_handleSystemLockedOutputBehavior:(id)a3 shouldSendRequest:(BOOL *)a4 startElement:(id *)a5
{
  id v8 = a3;
  unsigned int v9 = [(id)VOTSharedWorkspace isRingerSwitchSilent];
  unsigned int v10 = [(id)VOTSharedWorkspace useRingerSwitchForNotificationOutput];
  id v11 = [(id)VOTSharedWorkspace notificationsWhenLockedOutput];
  if (v10) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || ([(id)VOTSharedWorkspace userUnlockedDevice] & 1) != 0)
  {
    unsigned __int8 v13 = [*a5 elementsInDirection:1 withCount:100];
    unsigned int v14 = +[NSMutableArray arrayWithArray:v13];

    if (*a5 && (objc_msgSend(v14, "containsObject:") & 1) == 0) {
      [v14 insertObject:*a5 atIndex:0];
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v15 = v14;
    id v16 = [v15 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v33;
      while (2)
      {
        for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v33 != v17) {
            objc_enumerationMutation(v15);
          }
          id v19 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          if ([v19 isAwayAlertItem])
          {
            id v16 = v19;
            goto LABEL_19;
          }
        }
        id v16 = [v15 countByEnumeratingWithState:&v32 objects:v36 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }
LABEL_19:

    char v20 = +[VOTElement springBoardApplication];
    uint64_t v21 = (uint64_t)[v20 notificationCount];

    if (v21 >= 1)
    {
      uint64_t v22 = [(id)VOTSharedWorkspace userRecentlyUnlockedDevice] ^ 1;
      id v23 = +[VOTElement springBoardApplication];
      uint64_t v31 = [v23 notificationSummary:v22];

      uint64_t v24 = [(id)VOTSharedWorkspace selectedLanguage];
      sub_100051D04(off_1001EA9E8, @"number.of.alerts", 0, v24);
      v26 = id v25 = v11;
      id v27 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v26, v21);

      if (v25 == (id)1)
      {
        double v28 = (void *)v31;
        if (([(id)VOTSharedWorkspace userRecentlyUnlockedDevice] & 1) == 0) {
          [v8 removeActions];
        }
      }
      else
      {
        if (v16 && ([(id)VOTSharedWorkspace userUnlockedDevice] & 1) == 0)
        {
          *a5 = v16;
          [v8 removeActions];
        }
        if ((v25 & 0x30) != 0) {
          id v29 = [v8 addString:v27 withLanguage:v24];
        }
        double v28 = (void *)v31;
        if ((v25 & 0x12) != 0) {
          id v30 = [v8 addString:v31];
        }
        if (v25 == (id)16) {
          [v8 setLimitToComponentType:3];
        }
      }
    }
  }
  else
  {
    self->_lastSilencedAlertTime = CFAbsoluteTimeGetCurrent();
    *a4 = 0;
  }
}

- (void)_handleElementChangedNotification:(id)a3
{
  id v4 = a3;
  id v5 = VOTLogLayoutChange();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_100120014();
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0
    || ![(VOTElementManager *)self _shouldIgnoreElementMovementNotification:v4])
  {
    unsigned __int8 v6 = [(VOTElementManager *)self didReceiveForceUpdateChangeToken];
    [(VOTElementManager *)self setDidReceiveForceUpdateChangeToken:0];
    if ([(VOTElementManager *)self _notificationData:v4 containsToken:kAXPerformElementUpdateImmediatelyToken])
    {
      double v7 = 0.05;
    }
    else
    {
      double v7 = 0.75;
    }
    if ([(VOTElementManager *)self _notificationData:v4 containsToken:kAXAnnouncementTypeStopSpeech])
    {
      self->_flags.shouldSpeakNextLayoutChange = 0;
      if (v6) {
        goto LABEL_17;
      }
    }
    else
    {
      if (CFAbsoluteTimeGetCurrent() - self->_lastActivationTime < 0.25) {
        goto LABEL_17;
      }
      id v8 = [(VOTElementManager *)self nextElementToFocus];
      if (v8)
      {
        unsigned int v9 = [(VOTElementManager *)self _currentElement];
        unsigned int v10 = [v9 uniqueIdentification];
        id v11 = [(VOTElementManager *)self nextElementToFocus];
        BOOL v12 = [v11 uniqueIdentification];
        char v13 = [v10 isEqual:v12] ^ 1;
      }
      else
      {
        char v13 = 1;
      }

      self->_flags.shouldSpeakNextLayoutChange = v13;
      if (v6) {
        goto LABEL_17;
      }
    }
    unsigned int v14 = [(VOTElementManager *)self _currentElement];
    id v15 = [v14 application];
    unsigned int v16 = [v15 isIBooks];

    if (!v16)
    {
LABEL_18:
      [(SCRCTargetSelectorTimer *)self->_updateLayoutTimer cancel];
      [(SCRCTargetSelectorTimer *)self->_updateLayoutTimer dispatchAfterDelay:v7];
      goto LABEL_19;
    }
LABEL_17:
    [(VOTElementFetcher *)self->_fetchManager forceUpdate];
    goto LABEL_18;
  }
LABEL_19:
}

- (void)_handleLayoutChangeFromTimer
{
}

- (void)_handleLayoutChange:(BOOL)a3
{
  BOOL v3 = a3;
  [(VOTElementManager *)self setCachedAdditionalElementCommunities:0];
  id v5 = [(VOTElementManager *)self nextElementToFocus];
  [(VOTElementManager *)self setNextElementToFocus:0];
  [(VOTElementManager *)self setNextStringToSpeakOnScreenChange:0];
  unsigned __int8 v6 = VOTLogLayoutChange();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_1001206C0();
  }

  double v7 = +[VOTElement springBoardApplication];
  unsigned __int8 v8 = [v7 isSystemSleeping];

  if ((v8 & 1) == 0)
  {
    unsigned int v9 = +[VOTElement systemAppApplication];
    unsigned __int8 v10 = [v9 isVoiceControlRunning];

    if ((v10 & 1) == 0)
    {
      if ([(id)VOTSharedWorkspace brailleInputActive]
        && ([(id)VOTSharedWorkspace brailleInputAllowsElementMovement] & 1) == 0)
      {
        id v11 = VOTLogElement();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Stopping _handleLayoutChange to prevent the focus from moving while we're editing text in BSI", (uint8_t *)&buf, 2u);
        }
        goto LABEL_224;
      }
      if (([(id)VOTSharedWorkspace tapAndHoldMode] & 1) == 0
        && !self->_flags.isReadingAll
        && !self->_flags.performedElementUpdateForSelectionChange)
      {
        id v11 = [(VOTElementManager *)self _currentElement];
        if (self->_systemIsSleeping)
        {
          BOOL v12 = +[VOTElement springBoardApplication];
          uint64_t v13 = [v12 firstElementInApplicationForFocus];

          unsigned int v14 = (void *)v13;
        }
        else
        {
          unsigned int v14 = v5;
        }
        uint64_t v15 = kAXWebContentTrait;
        uint64_t v170 = kAXWebContentTrait;
        int v171 = v14;
        if (v14)
        {
          unsigned int v16 = objc_msgSend(v14, "doesHaveTraits:");
          uint64_t v15 = v170;
        }
        else
        {
          unsigned int v16 = 1;
        }
        uint64_t v169 = kAXIsEditingTrait;
        uint64_t v17 = kAXIsEditingTrait | v15;
        if ([v11 doesHaveAllTraits:kAXIsEditingTrait | v15])
        {
          id v18 = [v11 application];
          unsigned int v19 = [v18 isMail];

          if ((v19 & v16) != 0)
          {
            char v20 = VOTLogLayoutChange();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
              sub_10012007C();
            }
LABEL_223:

            id v5 = v171;
LABEL_224:

            goto LABEL_225;
          }
        }
        self->_systemIsSleeping = 0;
        if ([(VOTElementManager *)self webPageLoadedGenerationMark])
        {
          char v20 = VOTLogWebPageMovement();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
            sub_10012063C(self, v20);
          }
          goto LABEL_223;
        }
        uint64_t v21 = VOTLogLayoutChange();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
          sub_1001205C8((uint64_t)v11);
        }

        [v11 centerPoint];
        double v23 = v22;
        double v25 = v24;
        [v11 updateCenterPoint];
        [v11 centerPoint];
        double v27 = v26;
        double v29 = v28;
        id v30 = [v11 remoteParent];
        if (v30)
        {

          if (v5) {
            goto LABEL_50;
          }
        }
        else
        {
          BOOL v31 = v5 == 0;
          long long v32 = [v11 application];
          unsigned __int8 v33 = [v11 isValidForApplication:v32];

          if (!v31) {
            goto LABEL_50;
          }
          if ((v33 & 1) == 0)
          {
            double x = CGPointZero.x;
            double y = CGPointZero.y;
LABEL_36:
            if (v23 == x && v25 == y)
            {
              uint64_t v36 = VOTLogLayoutChange();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
                sub_100120528((CGPoint *)self, v36);
              }

              double v27 = self->_lastValidElementLocation.x;
              double v29 = self->_lastValidElementLocation.y;
            }
            else
            {
              BOOL v37 = sub_100052614();
              long long v38 = xmmword_1001EBE30;
              double v39 = +[VOTElement systemWideElement];
              objc_msgSend(v39, "convertPoint:fromContextId:", -[NSObject windowContextId](v11, "windowContextId"), v27, v29);
              double v41 = v40;

              if (v41 >= 0.0)
              {
                if (v37) {
                  double v43 = *((double *)&v38 + 1);
                }
                else {
                  double v43 = *(double *)&v38;
                }
                float v44 = v43;
                if (v41 < v44)
                {
                  double v29 = v25;
                  double v27 = v23;
                  goto LABEL_50;
                }
                uint64_t v42 = [v11 previousElement];
              }
              else
              {
                uint64_t v42 = [v11 nextElement];
              }
              int v171 = (void *)v42;
            }
LABEL_50:
            v168 = [v11 opaqueParent];
            if ([v171 isValid])
            {
              id v45 = v171;
              goto LABEL_98;
            }
            if ([v11 doesHaveTraits:kAXMenuItemTrait]
              && (p_firstResponderElement = &self->_firstResponderElement,
                  firstResponderElement = self->_firstResponderElement,
                  [(VOTElement *)firstResponderElement application],
                  int v48 = objc_claimAutoreleasedReturnValue(),
                  LODWORD(firstResponderElement) = [(VOTElement *)firstResponderElement isValidForApplication:v48], v48, firstResponderElement))
            {
              if (![(VOTElement *)*p_firstResponderElement isAccessibleElement]) {
                goto LABEL_103;
              }
              id v45 = *p_firstResponderElement;
              unsigned int v49 = VOTLogLayoutChange();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
                sub_100120250();
              }
            }
            else if ([(VOTElementManager *)self _isElementValidForFirstResponder:v11]&& [v11 isAlive]&& (v27 != CGPointZero.x || v29 != CGPointZero.y)&& (currentApplications = self->_currentApplications, [v11 application], uint64_t v51 = objc_claimAutoreleasedReturnValue(), LODWORD(currentApplications) = [(NSArray *)currentApplications containsObject:v51], v51, currentApplications))
            {
              id v45 = v11;
              unsigned int v49 = VOTLogLayoutChange();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
                sub_1001204F4();
              }
            }
            else if (v168 {
                   && (([v11 remoteParent],
            }
                        (unsigned int v52 = objc_claimAutoreleasedReturnValue()) == 0)
                    || ([v11 localOpaqueParent],
                        uint64_t v53 = objc_claimAutoreleasedReturnValue(),
                        unsigned int v54 = [v168 isEqual:v53],
                        v53,
                        v52,
                        v54)))
            {
              int v55 = [v11 opaqueParent];
              id v45 = [v55 currentOpaqueElement];

              unsigned int v49 = VOTLogLayoutChange();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
                sub_10012048C();
              }
            }
            else if ([v11 doesHaveTraits:v170] {
                   && ((unsigned int v56 = [v11 isAlive], v23 != 0.0) ? (v57 = v56) : (v57 = 0),
            }
                       v57 == 1 && v25 != 0.0))
            {
              id v45 = v11;
              unsigned int v49 = VOTLogLayoutChange();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
                sub_1001202B8(v45);
              }
            }
            else
            {
              if ([v11 verifyElementExists:0])
              {
                id v58 = v11;
              }
              else
              {
                id v59 = +[VOTElement systemWideElement];
                objc_msgSend(v59, "convertPoint:fromContextId:", -[NSObject windowContextId](v11, "windowContextId"), v27, v29);
                double v61 = v60;
                double v63 = v62;

                id v64 = objc_allocWithZone((Class)VOTElement);
                id v65 = [v11 application];
                id v58 = (VOTElement *)objc_msgSend(v64, "initWithPosition:application:contextId:", v65, -[NSObject windowContextId](v11, "windowContextId"), v61, v63);

                if (!v58) {
                  id v58 = (VOTElement *)objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", v61, v63);
                }
                unsigned int v66 = VOTLogLayoutChange();
                if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG)) {
                  sub_1001203E8(v61, v63);
                }
              }
              if ([(VOTElement *)v58 isEqual:self->_currentElement]) {
                goto LABEL_97;
              }
              if ([(id)VOTSharedWorkspace navigationStyleHonorsGroups]
                && [(VOTElement *)self->_currentElement isAccessibleGroup]
                && [(VOTElement *)self->_currentElement elementIsDescendant:v58])
              {
                id v45 = self->_currentElement;

                goto LABEL_98;
              }
              if (([v11 updateVisiblePoint],
                    [v11 visiblePoint],
                    double v69 = v67,
                    double v70 = v68,
                    v67 == CGPointZero.x)
                && v68 == CGPointZero.y
                || v67 == -1.0 && v68 == -1.0)
              {
LABEL_97:
                id v45 = v58;
                goto LABEL_98;
              }
              CGFloat v152 = +[VOTElement systemWideElement];
              objc_msgSend(v152, "convertPoint:fromContextId:", -[NSObject windowContextId](v11, "windowContextId"), v69, v70);
              double v154 = v153;
              double v156 = v155;

              id v45 = (VOTElement *)objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", v154, v156);
              unsigned int v49 = VOTLogLayoutChange();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
                sub_100120344(v154, v156);
              }
            }

LABEL_98:
            if (v45)
            {
              if (![(VOTElement *)v45 isTouchContainer]
                || [(id)VOTSharedWorkspace navigationStyleHonorsGroups]
                && [(VOTElement *)v45 isAccessibleGroup])
              {
                p_super = &v45->super;
                goto LABEL_112;
              }
              p_super = [(VOTElement *)v45 firstContainedElement];

              id v73 = VOTLogLayoutChange();
              if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG)) {
                sub_1001201E8();
              }
              goto LABEL_111;
            }
LABEL_103:
            p_super = [(VOTElementManager *)self _sonarElementInForwardDirection:0 limit:20];
            unsigned int v72 = VOTLogLayoutChange();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG)) {
              sub_100120180();
            }

            if (p_super)
            {
LABEL_112:
              if ([p_super doesHaveTraits:kAXStatusBarElementTrait]
                && ([p_super doesHaveTraits:kAXAllowsLayoutChangeInStatusBarTrait] & 1) == 0)
              {

                uint64_t v75 = VOTLogLayoutChange();
                if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG)) {
                  sub_1001200E4();
                }

                p_super = 0;
              }
              if ([p_super doesHaveTraits:v170])
              {
                uint64_t v76 = [p_super application];
                uint64_t v77 = [v76 firstResponderElement];

                if ([v77 doesHaveAllTraits:v17]
                  && ([v11 doesHaveTraits:kAXKeyboardKeyTrait] & 1) == 0
                  && (self->_lastActivationTime > self->_lastElementChangeTime || v171))
                {
                  uint64_t v78 = v77;

                  p_super = v78;
                }
              }
              if ([p_super doesHaveTraits:kAXAutoCorrectCandidateTrait])
              {
                id v79 = [p_super firstVisibleElementInList];
                unsigned __int8 v80 = v79;
                if (v79)
                {
                  uint64_t v81 = v79;

                  p_super = v81;
                }
              }
              if ([p_super doesHaveTraits:kAXLaunchIconTrait]
                && CFAbsoluteTimeGetCurrent() - self->_lastItemSelectionFromTouch > 1.0)
              {
                unsigned int v82 = [(VOTElementManager *)self _cachedLaunchIcon:p_super];
                os_log_type_t v83 = +[AXSubsystemVoiceOver sharedInstance];
                unsigned __int8 v84 = [v83 ignoreLogging];

                if ((v84 & 1) == 0)
                {
                  id v85 = +[AXSubsystemVoiceOver identifier];
                  id v86 = AXLoggerForFacility();

                  os_log_type_t v87 = AXOSLogLevelFromAXLogLevel();
                  if (os_log_type_enabled(v86, v87))
                  {
                    v166 = AXColorizeFormatLog();
                    unsigned int v162 = v82;
                    v164 = _AXStringForArgs();
                    id v88 = v86;
                    if (os_log_type_enabled(v88, v87))
                    {
                      LODWORD(buf) = 138543362;
                      *(void *)((char *)&buf + 4) = v164;
                      _os_log_impl((void *)&_mh_execute_header, v88, v87, "%{public}@", (uint8_t *)&buf, 0xCu);
                    }
                  }
                }
                if (v82)
                {
                  unint64_t v89 = v82;

                  p_super = v89;
                }
              }
              uint64_t v90 = kAXKeyboardKeyTrait;
              if (-[NSObject doesHaveTraits:](v11, "doesHaveTraits:", kAXKeyboardKeyTrait, v162)
                && [v11 isInternationalKeyboardKey]
                && ([p_super isInternationalKeyboardKey] & 1) == 0)
              {
                unsigned __int8 v91 = [(VOTElementManager *)self _nearestElementWithMatch:&stru_1001B5AC8 startElement:p_super];
                CGFloat v92 = v91;
                if (v91)
                {
                  unsigned int v93 = v91;

                  p_super = v93;
                }
              }
              if ([p_super isBannerNotification]
                && ([v11 isBannerNotification] & 1) == 0)
              {
                unsigned int v94 = VOTLogElement();
                if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG)) {
                  sub_1001200B0();
                }

                p_super = 0;
              }
              id v167 = [(id)VOTSharedWorkspace fingerCount];
              if (!p_super || !v3)
              {
                char v20 = p_super;
LABEL_205:
                uint64_t v130 = v170;
                if (v20)
                {
                  if (!v167)
                  {
                    if (([v20 isSiriTalkingOrListening] & 1) == 0)
                    {
                      [(VOTElementManager *)self _setCurrentElement:v20];

                      [v20 updateFrame];
                      [v20 updateCenterPoint];
                      [v20 updateTraits];
                      [v20 updateEquivalenceTag];
                      NSUInteger location = self->_highlightedCharacterRange.location;
                      if (location == 0x7FFFFFFF) {
                        goto LABEL_210;
                      }
                      -[NSObject boundsForRange:](v20, "boundsForRange:", location, self->_highlightedCharacterRange.length);
                      double v132 = v186.origin.x;
                      double v133 = v186.origin.y;
                      double width = v186.size.width;
                      double height = v186.size.height;
                      v187.origin.double x = CGRectZero.origin.x;
                      v187.origin.double y = CGRectZero.origin.y;
                      v187.size.double width = CGRectZero.size.width;
                      v187.size.double height = CGRectZero.size.height;
                      if (CGRectEqualToRect(v186, v187))
                      {
LABEL_210:
                        double v136 = +[VOTDisplayManager displayManager];
                        [v136 setCursorFrameForElement:v20];
                      }
                      else
                      {
                        double v141 = +[VOTElement systemWideElement];
                        objc_msgSend(v141, "convertRect:fromContextId:", -[NSObject windowContextId](v20, "windowContextId"), v132, v133, width, height);
                        double v143 = v142;
                        double v145 = v144;
                        double v147 = v146;
                        double v149 = v148;

                        double v136 = +[VOTDisplayManager displayManager];
                        objc_msgSend(v136, "setCursorFrame:", v143, v145, v147, v149);
                      }

                      id v11 = 0;
                    }
                    uint64_t v130 = v170;
                  }
                  if (([v20 doesHaveTraits:v130] & 1) == 0)
                  {
                    [(VOTElementFetcher *)self->_fetchManager forceUpdate];
                    [(VOTElementFetcher *)self->_fetchManager updateCacheWithElement:v20];
                  }
                }
                else
                {
                  double v137 = +[VOTDisplayManager displayManager];
                  [v137 setCursorFrameForElement:0];
                }
                CGFloat v150 = [(VOTElementManager *)self _currentElement];
                unsigned __int8 v151 = [v150 doesHaveTraits:kAXAllowsDirectInteractionTrait];

                if ((v151 & 1) == 0) {
                  [(VOTElementManager *)self _resetDirectInteractionCache];
                }
                [(VOTElementManager *)self setLastLayoutChangeNotificationTime:CFAbsoluteTimeGetCurrent()];
                [(VOTElementManager *)self _resetItemChooserCache];

                goto LABEL_223;
              }
              unsigned int v163 = [v11 isEqual:p_super];
              id v95 = [v11 application];
              unsigned int v96 = [v95 isSpringBoard];
              if (v11) {
                int v97 = v96;
              }
              else {
                int v97 = 1;
              }
              if (v97 == 1)
              {
                CGFloat v98 = +[VOTElement springBoardApplication];
                unsigned int v165 = [v98 isSystemLocked];
              }
              else
              {
                unsigned int v165 = 0;
              }

              double v99 = [v11 equivalenceTag];
              double v100 = [p_super equivalenceTag];
              unsigned int v101 = [v99 isEqualToString:v100];
              if ((v101 & v165) == 1)
              {
                unsigned int v102 = [v11 isAwayAlertItem];

                if (((v102 ^ 1 | v163) & 1) == 0) {
                  goto LABEL_161;
                }
              }
              else
              {

                if (!v101)
                {
LABEL_161:
                  if (v163) {
                    int v103 = [v11 doesHaveTraits:kAXUpdatesFrequentlyTrait] ^ 1 | v165;
                  }
                  else {
                    int v103 = 1;
                  }
LABEL_166:
                  BOOL v105 = v171;
                  *(void *)&long long buf = 0;
                  *((void *)&buf + 1) = &buf;
                  uint64_t v182 = 0x3032000000;
                  v183 = sub_100067578;
                  BOOL v184 = sub_100067588;
                  id v185 = 0;
                  if (!v103)
                  {
                    char v20 = p_super;
LABEL_204:
                    _Block_object_dispose(&buf, 8);

                    goto LABEL_205;
                  }
                  if (!v171)
                  {
                    uint64_t v106 = [p_super opaqueParent];
                    BOOL v107 = v106 == 0;

                    BOOL v105 = 0;
                    if (v107)
                    {
                      [v11 frame];
                      v174[0] = _NSConcreteStackBlock;
                      v174[1] = 3221225472;
                      v174[2] = sub_100097B00;
                      v174[3] = &unk_1001B5AF0;
                      uint64_t v177 = v108;
                      uint64_t v178 = v109;
                      uint64_t v179 = v110;
                      uint64_t v180 = v111;
                      v175 = v11;
                      p_long long buf = &buf;
                      unsigned __int8 v112 = objc_retainBlock(v174);
                      char v113 = [p_super elementsInDirection:2 withCount:10];
                      [v113 enumerateObjectsUsingBlock:v112];
                      if (!*(void *)(*((void *)&buf + 1) + 40))
                      {
                        long long v114 = [p_super elementsInDirection:1 withCount:10];
                        [v114 enumerateObjectsUsingBlock:v112];
                      }
                      BOOL v105 = 0;
                    }
                  }
                  double Current = CFAbsoluteTimeGetCurrent();
                  int v116 = [v105 bundleIdentifier];
                  if ([v116 isEqualToString:AXInCallServiceName])
                  {
                    CFAbsoluteTime v117 = +[VOTWorkspace sharedWorkspace];
                    BOOL v118 = [v117 currentCallState] == 1;
                  }
                  else
                  {
                    BOOL v118 = 0;
                  }

                  unsigned int v119 = [(VOTElementManager *)self _shouldNotSpeakForIncomingCall];
                  if (Current - self->_lastLiveRegionUpdate > 1.0
                    && Current - self->_lastPressOnMediaSessionElement > 3.5
                    && !v167)
                  {
                    unsigned int v120 = v119;
                    double v121 = +[VOTElement systemAppApplication];
                    if (([v121 isSiriTalkingOrListening] | v118 | v120))
                    {
                    }
                    else
                    {
                      double v138 = +[VOTElement systemAppApplication];
                      if ([v138 isSystemLocked])
                      {
                        double v139 = +[VOTElement systemAppApplication];
                        unsigned __int8 v140 = [v139 isAlarmRinging];

                        char v173 = v140 ^ 1;
                        if (v140) {
                          goto LABEL_182;
                        }
                      }
                      else
                      {

                        char v173 = 1;
                      }
                      if (![p_super doesHaveTraits:v90]) {
                        goto LABEL_244;
                      }
                      if ([(VOTElement *)self->_firstResponderElement doesHaveTraits:kAXSecureTextFieldTrait]|| Current + -0.75 - self->_lastValueChangeTime < 0.5|| Current - self->_lastSelectionChangeTime < 1.0)
                      {
                        char v173 = 0;
                      }
                      if (![v11 doesHaveTraits:v90]) {
                        goto LABEL_244;
                      }
                      v157 = [v11 label];
                      v158 = [v157 lowercaseString];
                      v159 = [p_super label];
                      char v160 = [v159 lowercaseString];
                      unsigned int v161 = [v158 isEqualToString:v160];

                      if (!v161)
                      {
LABEL_244:
                        if (!v173
                          || Current - self->_lastValueChangeTime >= 1.5
                          && Current - self->_lastSelectionChangeTime >= 1.5
                          || ![p_super doesHaveTraits:v169])
                        {
                          goto LABEL_182;
                        }
                      }
                    }
                  }
                  char v173 = 0;
LABEL_182:
                  id v122 = [objc_allocWithZone((Class)VOTOutputRequest) init];
                  id v123 = *(void **)(*((void *)&buf + 1) + 40);
                  if (v123)
                  {
                    char v20 = v123;
                  }
                  else
                  {
                    if ([(VOTElementManager *)self _shouldIncludeContainerInDescriptionForCurrentElement:p_super previousElement:v11])
                    {
                      uint64_t v124 = 34;
                    }
                    else
                    {
                      uint64_t v124 = 2;
                    }
                    [(VOTElementManager *)self _addDescription:p_super toRequest:v122 withOptions:v124];
                    if ((v163 & 1) != 0
                      || [v11 rowRange] != (id)0x7FFFFFFF
                      && [p_super rowRange] != (id)0x7FFFFFFF
                      || (BOOL systemNotificationInProgress = self->_systemNotificationInProgress))
                    {
                      [v122 setDoesNotInterrupt:1];
                      BOOL systemNotificationInProgress = self->_systemNotificationInProgress;
                    }
                    if (systemNotificationInProgress) {
                      unsigned int v126 = 0;
                    }
                    else {
                      unsigned int v126 = v165;
                    }
                    if (v126 == 1
                      && (double v127 = CFAbsoluteTimeGetCurrent(),
                          [(id)VOTSharedWorkspace screenOnTime],
                          v127 - v128 < 2.0))
                    {
                      v172 = p_super;
                      [(VOTElementManager *)self _handleSystemLockedOutputBehavior:v122 shouldSendRequest:&v173 startElement:&v172];
                      char v20 = v172;

                      if (v173 && [v20 isAwayAlertItem])
                      {
                        self->_lastLockScreenAlertSpokenTime = CFAbsoluteTimeGetCurrent();
                        [v122 setCannotBeInterrupted:1];
                      }
                    }
                    else
                    {
                      char v20 = p_super;
                    }
                    [v122 setGeneratesBraille:0];
                    v129 = +[VOTBrailleManager manager];
                    [v129 setBrailleElement:v20 resetBrailleCursor:0 rotorSelection:0];

                    if (v173) {
                      [(VOTElementManager *)self sendRequest:v122];
                    }
                  }

                  goto LABEL_204;
                }
              }
              id v104 = [v11 traits];
              int v103 = v104 != [p_super traits];
              goto LABEL_166;
            }
            id v73 = [v11 application];
            p_super = [v73 firstElementInApplication];
            uint64_t v74 = VOTLogLayoutChange();
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG)) {
              sub_100120118();
            }

LABEL_111:
            goto LABEL_112;
          }
        }
        double x = CGPointZero.x;
        if (v27 != CGPointZero.x) {
          goto LABEL_50;
        }
        double y = CGPointZero.y;
        if (v29 != y) {
          goto LABEL_50;
        }
        goto LABEL_36;
      }
    }
  }
LABEL_225:
}

- (void)_updateFirstResponderTypingBuffer
{
  [(VOTElement *)self->_firstResponderElement updateValue];
  BOOL v3 = [(VOTElement *)self->_firstResponderElement value];
  if (!v3) {
    BOOL v3 = &stru_1001B7888;
  }
  double v7 = v3;
  if ([(__CFString *)v3 isAXAttributedString]
    && ([(__CFString *)v7 hasAttribute:UIAccessibilityTokenPlaceholder] & 1) != 0)
  {
    CFStringRef v4 = &stru_1001B7888;
  }
  else
  {
    CFStringRef v4 = v7;
  }
  [(NSMutableString *)self->_elementTypingBuffer setString:v4];
  id v5 = [(VOTElement *)self->_firstResponderElement selectedTextRange];
  -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", v5, v6, 0);
  [(NSMutableDictionary *)self->_lastSeenFontProperties removeAllObjects];
  [(VOTElementManager *)self _setLastSeenLineAndColumn:0];
}

- (void)setCurrentElement:(id)a3
{
}

- (void)setCurrentElement:(id)a3 shouldSetBrailleElement:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL inUnitTestingMode = self->_inUnitTestingMode;
  id v7 = a3;
  if (inUnitTestingMode)
  {
    [(VOTElementManager *)self _setCurrentElement:v7];

    self->_flags.focusIsOnElement = 1;
  }
  else
  {
    unsigned __int8 v8 = VOTLogWebPageMovement();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_100120728(v8);
    }

    elementManagerThread = self->_elementManagerThread;
    unsigned __int8 v10 = +[NSNumber numberWithBool:v4];
    -[SCRCThread performSelector:onTarget:count:objects:](elementManagerThread, "performSelector:onTarget:count:objects:", "_setCurrentElement:shouldSetBrailleElement:", self, 2, v7, v10, 0);
  }
}

- (void)setFirstResponder:(id)a3
{
  id v8 = a3;
  if (!-[VOTElement isEqual:](self->_firstResponderElement, "isEqual:") || self->_inUnitTestingMode)
  {
    objc_storeStrong((id *)&self->_firstResponderElement, a3);
    id WeakRetained = objc_loadWeakRetained((id *)&self->_updateDelegate);
    [WeakRetained firstResponderDidUpdate:v8];

    uint64_t v6 = +[VOTKeyboardManager keyboardManager];
    [v6 setExplictlyEnabledQuickNav:0];

    [(VOTElementManager *)self _handleKeyboardChangedNotification];
    id v7 = +[VOTBrailleManager manager];
    [v7 updateKeyboardSettings];

LABEL_4:
    [(VOTElementManager *)self _updateFirstResponderTypingBuffer];
    goto LABEL_5;
  }
  if (self->_elementSelectionRangeBufferInternal.location == 0x7FFFFFFF) {
    goto LABEL_4;
  }
LABEL_5:
  [(VOTElementManager *)self _activateBrailleScreenInputIfNeededForElement:self->_firstResponderElement];
}

- (__AXUIElement)_firstResponderAXUIElementRefFromCurrentApplications
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  BOOL v3 = self->_currentApplications;
  id v4 = [(NSArray *)v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
LABEL_3:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v15 != v6) {
        objc_enumerationMutation(v3);
      }
      id v8 = objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v7), "uiElement", (void)v14);
      [v8 updateCache:3002];
      unsigned int v9 = (__AXUIElement *)[v8 objectWithAXAttribute:3002];

      if (v9) {
        goto LABEL_11;
      }
      if (v5 == (id)++v7)
      {
        id v5 = [(NSArray *)v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v5) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  unsigned __int8 v10 = +[VOTElement systemAppApplication];
  id v11 = [v10 uiElement];

  [v11 updateCache:3002];
  unsigned int v9 = (__AXUIElement *)[v11 objectWithAXAttribute:3002];

  if (!v9)
  {
    BOOL v12 = [(VOTElement *)self->_currentElement application];
    BOOL v3 = [v12 uiElement];

    [(NSArray *)v3 updateCache:3002];
    unsigned int v9 = (__AXUIElement *)[(NSArray *)v3 objectWithAXAttribute:3002];
LABEL_11:
  }
  return v9;
}

- (void)_updateFirstResponder
{
  if (!self->_inUnitTestingMode)
  {
    BOOL v3 = [(VOTElementManager *)self currentElement];
    id v4 = [v3 uiElement];
    id v5 = (__AXUIElement *)[v4 objectWithAXAttribute:3002];

    if (!v5) {
      id v5 = [(VOTElementManager *)self _firstResponderAXUIElementRefFromCurrentApplications];
    }
    uint64_t v6 = [(VOTElement *)self->_firstResponderElement uiElement];
    [v6 axElement];

    if (AXSafeEqual())
    {
      if (self->_elementSelectionRangeBufferInternal.location == 0x7FFFFFFF)
      {
        [(VOTElementManager *)self _updateFirstResponderTypingBuffer];
      }
    }
    else
    {
      uint64_t v7 = +[AXUIElement uiElementWithAXElement:v5];
      id v8 = +[VOTElement elementWithUIElement:v7];

      [(VOTElementManager *)self setFirstResponder:v8];
    }
  }
}

- (void)_updateCurrentElementFrame
{
  id v4 = +[VOTDisplayManager displayManager];
  BOOL v3 = [(VOTElementManager *)self _currentElement];
  [v4 setCursorFrameForElement:v3];
}

- (void)_updateCursorFrameForElementIfNeeded:(id)a3
{
  id v6 = a3;
  id v4 = [(VOTElementManager *)self _currentElement];

  id v5 = v6;
  if (v4 == v6)
  {
    [v6 updateFrame];
    [(VOTElementManager *)self _updateCurrentElementFrame];
    id v5 = v6;
  }
}

- (void)_updateCursorFrameForLineFrameMovement:(id)a3
{
  NSUInteger location = self->_elementUnitOutputRange.location;
  NSUInteger length = self->_elementUnitOutputRange.length;
  id v6 = a3;
  objc_msgSend(v6, "boundsForRange:", location, length);
  self->_lineFrame.origin.double x = v7;
  self->_lineFrame.origin.double y = v8;
  self->_lineFrame.size.double width = v9;
  self->_lineFrame.size.double height = v10;
  id v11 = +[VOTElement systemWideElement];
  id v12 = [v6 windowContextId];

  objc_msgSend(v11, "convertRect:fromContextId:", v12, self->_lineFrame.origin.x, self->_lineFrame.origin.y, self->_lineFrame.size.width, self->_lineFrame.size.height);
  self->_lineFrame.origin.double x = v13;
  self->_lineFrame.origin.double y = v14;
  self->_lineFrame.size.double width = v15;
  self->_lineFrame.size.double height = v16;

  long long v17 = +[VOTDisplayManager displayManager];
  objc_msgSend(v17, "setCursorFrame:", self->_lineFrame.origin.x, self->_lineFrame.origin.y, self->_lineFrame.size.width, self->_lineFrame.size.height);

  self->_textRangeBeingDisplayed = 1;
}

- (void)updateCurrentElementFrame
{
  if ([(VOTElementManager *)self isOnElementManagerThread]) {
    _AXAssert();
  }
  elementManagerThread = self->_elementManagerThread;

  [(SCRCThread *)elementManagerThread performSelector:"_updateCurrentElementFrame" onTarget:self count:0 objects:0];
}

- (void)_elementFetchFoundDirectTouchElements:(id)a3
{
  id v4 = a3;
  id v3 = v4;
  AXPerformBlockOnMainThread();
}

- (void)elementFetchFoundDirectTouchElements:(id)a3
{
}

- (BOOL)_shouldAnnounceCustomRotorHintForElement:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [v4 touchContainerParent];
  id v6 = [(VOTElementManager *)self lastContainerForCustomRotorHint];
  double v29 = self;
  id v30 = (void *)v5;
  if (v6 || !v5)
  {
    CGFloat v7 = [(VOTElementManager *)self lastContainerForCustomRotorHint];
    CGFloat v8 = v7;
    if (!v7 || v5)
    {
      CGFloat v9 = [(VOTElementManager *)self lastContainerForCustomRotorHint];
      CGFloat v10 = v9;
      if (!v9 || !v5)
      {

        char v28 = 0;
        goto LABEL_11;
      }
      id v11 = [(VOTElementManager *)self lastContainerForCustomRotorHint];
      unsigned __int8 v12 = [v11 isEqual:v5];

      if (v12)
      {
        char v28 = 0;
        goto LABEL_12;
      }
    }
    else
    {
    }
  }
  id v6 = [v4 touchContainerParent];
  [(VOTElementManager *)self setLastContainerForCustomRotorHint:v6];
  char v28 = 1;
LABEL_11:

LABEL_12:
  CGFloat v13 = [v4 customPublicRotors];
  CGFloat v14 = +[NSMutableSet set];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v15 = v13;
  id v16 = [v15 countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v17; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void *)(*((void *)&v31 + 1) + 8 * i);
        if ([v4 customPublicRotorIsVisibleInTouchRotor:v20])
        {
          uint64_t v21 = [v4 customPublicRotorName:v20];
          int64_t v22 = +[VOTRotor rotorTypeForSystemRotorType:v21];
          if (v22)
          {
            uint64_t v23 = +[VOTRotor stringForRotorType:v22];

            uint64_t v21 = (void *)v23;
          }
          if (v21) {
            [v14 addObject:v20];
          }
        }
      }
      id v17 = [v15 countByEnumeratingWithState:&v31 objects:v35 count:16];
    }
    while (v17);
  }

  double v24 = [(VOTElementManager *)v29 previousCustomRotorsForRotorHint];
  unsigned __int8 v25 = [v14 isEqualToSet:v24];

  BOOL v26 = v28;
  if ((v25 & 1) == 0)
  {
    [(VOTElementManager *)v29 setPreviousCustomRotorsForRotorHint:v14];
    BOOL v26 = 1;
  }

  return v26;
}

- (BOOL)_shouldNotSpeakForIncomingCall
{
  id v2 = +[VOTWorkspace sharedWorkspace];
  unsigned int v3 = [v2 currentCallState];

  id v4 = +[AVSystemController sharedAVSystemController];
  uint64_t v5 = [v4 routeForCategory:AVAudioSessionCategoryVoiceOver];

  if (([v5 isEqualToString:@"Headset"] & 1) != 0
    || ([v5 isEqualToString:@"HeadsetBT"] & 1) != 0
    || ([v5 isEqualToString:@"Headphone"] & 1) != 0)
  {
    unsigned int v6 = 0;
  }
  else
  {
    unsigned int v6 = [v5 isEqualToString:@"HeadphonesBT"] ^ 1;
  }
  unsigned int v7 = [(id)VOTSharedWorkspace isRingerSwitchSilent];
  CGFloat v8 = VOTLogCommon();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109632;
    v11[1] = v3 == 2;
    __int16 v12 = 1024;
    unsigned int v13 = v7;
    __int16 v14 = 1024;
    unsigned int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Should not speak for incoming call? %d & %d & %d", (uint8_t *)v11, 0x14u);
  }

  if (v3 == 2) {
    char v9 = v7;
  }
  else {
    char v9 = 0;
  }

  return v9 & v6;
}

- (id)_verifiedElementWithElement:(id)a3
{
  id v4 = a3;
  [v4 frame];
  double v6 = v5;
  double v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  [v4 centerPoint];
  unsigned int v13 = +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:");
  v42[0] = v13;
  __int16 v14 = +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:", v6 + 2.0, v8 + 2.0);
  v42[1] = v14;
  v44.origin.double x = v6;
  v44.origin.double y = v8;
  v44.size.double width = v10;
  v44.size.double height = v12;
  unsigned int v15 = +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:", v6 + 2.0, v8 + CGRectGetHeight(v44) + -2.0);
  v42[2] = v15;
  v45.origin.double x = v6;
  v45.origin.double y = v8;
  v45.size.double width = v10;
  v45.size.double height = v12;
  id v16 = +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:", v6 + CGRectGetWidth(v45) + -2.0, v8 + 2.0);
  v42[3] = v16;
  v46.origin.double x = v6;
  v46.origin.double y = v8;
  v46.size.double width = v10;
  v46.size.double height = v12;
  double v17 = v6 + CGRectGetWidth(v46) + -2.0;
  v47.origin.double x = v6;
  v47.origin.double y = v8;
  v47.size.double width = v10;
  v47.size.double height = v12;
  uint64_t v18 = +[NSValue valueWithCGPoint:](NSValue, "valueWithCGPoint:", v17, v8 + CGRectGetHeight(v47) + -2.0);
  v42[4] = v18;
  unsigned int v19 = +[NSArray arrayWithObjects:v42 count:5];

  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v20 = v19;
  id v21 = [v20 countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v38;
    while (2)
    {
      for (uint64_t i = 0; i != v22; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v38 != v23) {
          objc_enumerationMutation(v20);
        }
        unsigned __int8 v25 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        BOOL v26 = +[VOTElement systemWideElement];
        [v25 CGPointValue];
        objc_msgSend(v26, "convertPoint:fromContextId:", objc_msgSend(v4, "windowContextId"), v27, v28);
        double v30 = v29;
        double v32 = v31;

        long long v33 = -[VOTElementManager _verifiedElementWithElement:atPoint:](self, "_verifiedElementWithElement:atPoint:", v4, v30, v32);
        if (v33)
        {
          id v35 = v33;

          long long v34 = v35;
          goto LABEL_11;
        }
      }
      id v22 = [v20 countByEnumeratingWithState:&v37 objects:v41 count:16];
      if (v22) {
        continue;
      }
      break;
    }
  }
  long long v34 = 0;
  id v35 = v20;
LABEL_11:

  return v34;
}

- (id)_verifiedElementWithElement:(id)a3 atPoint:(CGPoint)a4
{
  double y = a4.y;
  double x = a4.x;
  id v6 = a3;
  id v7 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", x, y);
  double v8 = v7;
  if (v7
    && ([v7 label],
        double v9 = objc_claimAutoreleasedReturnValue(),
        [v6 label],
        CGFloat v10 = objc_claimAutoreleasedReturnValue(),
        unsigned int v11 = [v9 isEqual:v10],
        v10,
        v9,
        v11))
  {
    id v12 = v8;
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

- (BOOL)_finishHandlingMoveToElementNotification:(id)a3 shouldSyncNativeFocusElement:(id)a4 shouldEchoSameTouchContainer:(id)a5 shouldScrollToElement:(id)a6 shouldPlayTrackingSound:(id)a7 shouldRefocusIfSameElement:(id)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = [(VOTElementManager *)self _verifiedElementWithElement:v14];
  id v21 = [(VOTElementManager *)self _currentElement];
  if ([v21 isEqual:v14] && !objc_msgSend(v19, "BOOLValue"))
  {

    if (v14) {
      goto LABEL_14;
    }
LABEL_11:
    if ([v18 BOOLValue])
    {
      CGRect v47 = +[VOTOutputManager outputManager];
      int v48 = +[VOSOutputEvent NoItemExists];
      [v47 sendEvent:v48];
    }
    id v14 = 0;
    goto LABEL_14;
  }

  if (!v14) {
    goto LABEL_11;
  }
  if ((([v19 BOOLValue] & 1) != 0
     || ([v14 isEqual:v20] & 1) == 0)
    && v20)
  {
    [v14 frame];
    CGFloat v23 = v22;
    CGFloat v25 = v24;
    CGFloat v27 = v26;
    CGFloat v29 = v28;
    [v20 frame];
    v62.origin.double x = v30;
    v62.origin.double y = v31;
    v62.size.double width = v32;
    v62.size.double height = v33;
    v60.origin.double x = v23;
    v60.origin.double y = v25;
    v60.size.double width = v27;
    v60.size.double height = v29;
    if (CGRectIntersectsRect(v60, v62))
    {
      [v14 frame];
      CGFloat v35 = v34;
      CGFloat v37 = v36;
      CGFloat v39 = v38;
      CGFloat v41 = v40;
      [v20 frame];
      v63.origin.double x = v42;
      v63.origin.double y = v43;
      v63.size.double width = v44;
      v63.size.double height = v45;
      v61.origin.double x = v35;
      v61.origin.double y = v37;
      v61.size.double width = v39;
      v61.size.double height = v41;
      id v57 = v16;
      id v59 = v15;
      if (CGRectEqualToRect(v61, v63))
      {
        id v46 = v20;

        id v14 = v46;
      }
      goto LABEL_16;
    }
LABEL_14:
    BOOL v49 = 0;
    goto LABEL_25;
  }
  id v57 = v16;
  id v59 = v15;
LABEL_16:
  id v50 = +[VOTElement springBoardApplication];
  if ([v50 isVoiceControlRunning])
  {
    uint64_t v51 = 0;
  }
  else
  {
    unsigned int v52 = +[VOTElement springBoardApplication];
    uint64_t v51 = [v52 isSystemLocked] ^ 1;
  }
  uint64_t v53 = +[VOTWorkspace sharedWorkspace];
  if ([v53 currentCallState] == 2)
  {
    unsigned int v54 = +[AXSpringBoardServer server];
    unsigned int v55 = [v54 isRingerMuted];

    uint64_t v51 = v51 & ~v55;
  }
  else
  {
  }
  id v16 = v58;
  -[VOTElementManager _moveToElement:shouldPlaySound:echoSameTouchContainer:shouldScroll:moveToElementNotification:shouldPlayTrackingSound:](self, "_moveToElement:shouldPlaySound:echoSameTouchContainer:shouldScroll:moveToElementNotification:shouldPlayTrackingSound:", v14, v51, [v58 BOOLValue], objc_msgSend(v17, "BOOLValue"), 1, objc_msgSend(v18, "BOOLValue"));
  id v15 = v59;
  if ([v59 BOOLValue]) {
    [v14 setNativeFocus];
  }
  self->_lastFirstResponderChangeTime = CFAbsoluteTimeGetCurrent();
  self->_flags.tapShouldHandleTextOperation = 0;
  BOOL v49 = 1;
LABEL_25:

  return v49;
}

- (void)moveToElement:(id)a3
{
}

- (void)_moveToElement:(id)a3
{
}

- (void)_moveToElement:(id)a3 shouldPlaySound:(BOOL)a4 echoSameTouchContainer:(BOOL)a5 moveToElementNotification:(BOOL)a6
{
}

- (void)_moveToElement:(id)a3 shouldPlaySound:(BOOL)a4 echoSameTouchContainer:(BOOL)a5 shouldScroll:(BOOL)a6 moveToElementNotification:(BOOL)a7 shouldPlayTrackingSound:(BOOL)a8
{
  BOOL v8 = a8;
  BOOL v9 = a7;
  BOOL v10 = a6;
  BOOL v11 = a5;
  BOOL v12 = a4;
  id v14 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v15 = [(VOTElementManager *)self _currentElement];
  if ([(VOTElementManager *)self _setCurrentElement:v14]
    || ([v14 isEqual:v15] & 1) != 0
    || !v9)
  {
    if (v12)
    {
      id v18 = +[VOTOutputManager outputManager];
      id v19 = +[VOSOutputEvent DidFocusOnElement];
      [v18 sendEvent:v19];
    }
    if (v10)
    {
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_100099398;
      v26[3] = &unk_1001B3448;
      v26[4] = self;
      id v27 = v14;
      [v27 scrollToElementForDirectional:1 withCompletion:v26];
    }
    else
    {
      -[SCRCThread performSelector:onTarget:count:objects:](self->_elementManagerThread, "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", self, 1, v14, 0);
    }
    id v20 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    if ([(VOTElementManager *)self _shouldAnnounceCustomRotorHintForElement:v14])
    {
      uint64_t v21 = 0x200800802;
    }
    else
    {
      uint64_t v21 = 8390658;
    }
    if (v11)
    {
      uint64_t v22 = v21 | 0x20;
    }
    else if ([(VOTElementManager *)self _shouldIncludeContainerInDescriptionForCurrentElement:v14 previousElement:v15])
    {
      uint64_t v22 = v21 | 0x20;
    }
    else
    {
      uint64_t v22 = v21;
    }
    if (AXDeviceSupportsSonification()
      && [v14 supportsAudiographs]
      && [(VOTElementManager *)self _chartElementDidChangeForElement:v14 oldElement:v15])
    {
      v22 |= 0x4100000000uLL;
    }
    if (v9) {
      uint64_t v23 = v22 | 0x80000000;
    }
    else {
      uint64_t v23 = v22;
    }
    [v20 setGeneratesBraille:1];
    unsigned int v24 = [(AXDragManager *)self->_dragManager isDragActive];
    uint64_t v25 = 0x40000000;
    if (!v24) {
      uint64_t v25 = 0;
    }
    [(VOTElementManager *)self _addDescription:v14 toRequest:v20 withOptions:v25 | v23];
    if (v8) {
      [v20 setBrailleType:1];
    }
    if ([v14 shouldStartReadAllOnFocus])
    {
      [(VOTElementManager *)self _continueReadAllWithElement:v14 setCurrentElement:0];
    }
    else if (v12)
    {
      [(VOTElementManager *)self sendRequest:v20];
    }
  }
  else if (v8)
  {
    id v16 = +[VOTOutputManager outputManager];
    id v17 = +[VOSOutputEvent NoItemExists];
    [v16 sendEvent:v17];
  }
}

- (void)_handleMoveToElementNotification:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0
    || ![(VOTElementManager *)self _shouldIgnoreElementMovementNotification:v4])
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v5 = [v4 objectForKey:kAXMoveToElementNotificationKeyElement];
      id v6 = [v4 objectForKey:kAXMoveToElementNotificationKeySyncNativeFocus];
      id v7 = v6;
      if (v6) {
        unsigned int v8 = [v6 BOOLValue];
      }
      else {
        unsigned int v8 = 0;
      }
      id v15 = [v4 objectForKey:kAXMoveToElementNotificationKeyIgnoreTouchInProgress];
      id v16 = v15;
      if (v15) {
        unsigned __int8 v17 = [v15 BOOLValue];
      }
      else {
        unsigned __int8 v17 = 0;
      }
      id v18 = [v4 objectForKey:kAXMoveToElementNotificationKeyEchoSameTouchContainer];
      id v19 = v18;
      if (v18) {
        unsigned int v55 = [v18 BOOLValue];
      }
      else {
        unsigned int v55 = 1;
      }
      id v20 = [v4 objectForKey:kAXMoveToElementNotificationKeyShouldScrollToElement];
      unsigned int v57 = v8;
      if (v20) {
        unsigned int v59 = [v19 BOOLValue];
      }
      else {
        unsigned int v59 = 1;
      }
      uint64_t v21 = [v4 objectForKey:kAXMoveToElementNotificationKeyShouldPlayTrackingSound];
      uint64_t v22 = v21;
      unsigned int v54 = (void *)v5;
      if (v21 && [v21 BOOLValue])
      {
        unsigned __int8 v23 = v17;
        unsigned int v24 = self;
        [(VOTElementManager *)self setLastUserElementTouchTime:CFAbsoluteTimeGetCurrent()];
        uint64_t v10 = 1;
      }
      else
      {
        unsigned __int8 v23 = v17;
        unsigned int v24 = self;
        uint64_t v10 = 0;
      }
      uint64_t v25 = [v4 objectForKey:kAXMoveToElementNotificationKeyShouldRefocusIfSameElement];
      double v26 = v25;
      if (v25) {
        unsigned int v58 = [v25 BOOLValue];
      }
      else {
        unsigned int v58 = 0;
      }

      uint64_t v12 = v55;
      self = v24;
      unsigned __int8 v11 = v23;
      id v9 = v54;
      if (!v54) {
        goto LABEL_26;
      }
    }
    else
    {
      id v9 = v4;
      unsigned int v57 = 0;
      unsigned int v58 = 0;
      uint64_t v10 = 0;
      unsigned __int8 v11 = 0;
      unsigned int v59 = 1;
      uint64_t v12 = 1;
      if (!v9)
      {
LABEL_26:
        BOOL v14 = 0;
LABEL_27:
        objc_opt_class();
        int isKindOfClass = objc_opt_isKindOfClass();
        if ((v10 | v14 | isKindOfClass))
        {
          char v28 = isKindOfClass;
          CGFloat v29 = +[VOTElement springBoardApplication];
          if ([v29 isSystemLocked])
          {
            CFAbsoluteTime v30 = CFAbsoluteTimeGetCurrent() - self->_lastItemSelectionFromTouch;

            if (v30 < 2.0) {
              goto LABEL_50;
            }
          }
          else
          {
          }
          if ([(id)VOTSharedWorkspace brailleInputActive]
            && ([(id)VOTSharedWorkspace brailleInputAllowsElementMovement] & 1) == 0)
          {
            uint64_t v53 = VOTLogElement();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Stopping _handleMoveToElementNotification to prevent the focus from moving while we're editing text in BSI", buf, 2u);
            }
          }
          else
          {
            if (v28) {
              id v31 = v9;
            }
            else {
              id v31 = [objc_allocWithZone((Class)VOTElement) initWithAXElement:v9];
            }
            CGFloat v32 = v31;
            if (v11) {
              goto LABEL_44;
            }
            if (![(id)VOTSharedWorkspace fingerCount]) {
              goto LABEL_44;
            }
            if (!self->_flags.focusIsOnElement) {
              goto LABEL_44;
            }
            [(VOTElement *)self->_currentElement frame];
            CGFloat v34 = v33;
            CGFloat v36 = v35;
            CGFloat v38 = v37;
            CGFloat v40 = v39;
            [v32 frame];
            v62.origin.double x = v41;
            v62.origin.double y = v42;
            v62.size.double width = v43;
            v62.size.double height = v44;
            v61.origin.double x = v34;
            v61.origin.double y = v36;
            v61.size.double width = v38;
            v61.size.double height = v40;
            if (!CGRectIntersectsRect(v61, v62))
            {
              [(VOTElementManager *)self _handleLayoutChange:1];
            }
            else
            {
LABEL_44:
              if (!self->_flags.isReadingAll
                || (uint64_t v45 = kAXWebContentTrait,
                    ![(VOTElement *)self->_currentElement doesHaveTraits:kAXWebContentTrait])
                || ([v32 doesHaveTraits:v45] & 1) == 0)
              {
                unsigned int v56 = v32;
                elementManagerThread = self->_elementManagerThread;
                CGRect v47 = +[NSNumber numberWithBool:v57];
                int v48 = +[NSNumber numberWithBool:v12];
                BOOL v49 = +[NSNumber numberWithBool:v59];
                id v50 = +[NSNumber numberWithBool:v10];
                uint64_t v51 = +[NSNumber numberWithBool:v58];
                unsigned int v52 = elementManagerThread;
                CGFloat v32 = v56;
                -[SCRCThread performSelector:onTarget:cancelMask:count:objects:](v52, "performSelector:onTarget:cancelMask:count:objects:", "_finishHandlingMoveToElementNotification:shouldSyncNativeFocusElement:shouldEchoSameTouchContainer:shouldScrollToElement:shouldPlayTrackingSound:shouldRefocusIfSameElement:", self, 0x40000, 6, v56, v47, v48, v49, v50, v51, 0);
              }
            }
          }
          goto LABEL_50;
        }
        [(VOTElementManager *)self _handleLayoutChange:1];
LABEL_50:

        goto LABEL_51;
      }
    }
    CFTypeID v13 = CFGetTypeID(v9);
    BOOL v14 = v13 == AXUIElementGetTypeID();
    goto LABEL_27;
  }
LABEL_51:
}

- (id)_firstResponderFromCurrentApplications
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = self->_currentApplications;
  id v3 = [(NSArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "firstResponderElement", (void)v10);
        if (v7)
        {
          unsigned int v8 = (void *)v7;
          goto LABEL_11;
        }
      }
      id v4 = [(NSArray *)v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  unsigned int v8 = 0;
LABEL_11:

  return v8;
}

- (void)_handleNativeFocusItemChangedNotification:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
    {
      _AXAssert();
    }
    if (self->_systemIsSleeping)
    {
      uint64_t v5 = VOTLogCommon();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Ignoring focus update, system is sleeping", v11, 2u);
      }
LABEL_20:

      goto LABEL_21;
    }
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == AXUIElementGetTypeID())
    {
      uint64_t v5 = [objc_allocWithZone((Class)VOTElement) initWithAXElement:v4];
      if (!v5) {
        goto LABEL_21;
      }
      goto LABEL_17;
    }
    CFTypeID v7 = CFGetTypeID(v4);
    if (v7 == CFDictionaryGetTypeID())
    {
      unsigned int v8 = [v4 objectForKeyedSubscript:kAXElementKey];
      id v9 = v8;
      if (v8 && (CFTypeID v10 = CFGetTypeID(v8), v10 == AXUIElementGetTypeID())) {
        uint64_t v5 = [objc_allocWithZone((Class)VOTElement) initWithAXElement:v9];
      }
      else {
        uint64_t v5 = 0;
      }

      if (v5)
      {
LABEL_17:
        if ([(VOTElementManager *)self _setCurrentElement:v5]) {
          [(VOTElementManager *)self _echoDifferentElement:v5 forEvent:0];
        }
        [(VOTElementFetcher *)self->_fetchManager updateCacheWithElement:v5];
        goto LABEL_20;
      }
    }
  }
LABEL_21:
}

- (void)_handleFirstResponderChangedNotification:(id)a3
{
  id v4 = a3;
  [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer cancel];
  uint64_t v5 = [(VOTElementManager *)self _firstResponderFromCurrentApplications];
  CFTypeID v6 = VOTLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    double v39 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "First responder element: %@", buf, 0xCu);
  }

  if (v5)
  {
LABEL_12:
    if (CFAbsoluteTimeGetCurrent() - self->_lastExternalUnlockTime < 0.25)
    {
      id v37 = v4;
      AXPerformBlockOnMainThreadAfterDelay();
    }
    if (!v5
      || [(VOTElement *)self->_firstResponderElement isEqual:v5]
      || ![(VOTElement *)v5 isAccessibleElement])
    {
      goto LABEL_37;
    }
    CFTypeID v10 = [(VOTElementManager *)self _currentElement];
    [(VOTElement *)v5 frame];
    CGFloat v12 = v11;
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    [v10 frame];
    v41.origin.double x = v19;
    v41.origin.double y = v20;
    v41.size.double width = v21;
    v41.size.double height = v22;
    v40.origin.double x = v12;
    v40.origin.double y = v14;
    v40.size.double width = v16;
    v40.size.double height = v18;
    if (!CGRectEqualToRect(v40, v41))
    {
      unsigned __int8 v23 = [(VOTElement *)v5 value];
      if ([v23 length])
      {
        unsigned int v24 = [v10 value];
        unsigned int v25 = [v23 isEqualToString:v24];

        if (!v25)
        {

          goto LABEL_27;
        }
      }
      uint64_t v26 = kAXIsEditingTrait;
      if ([(VOTElement *)v5 doesHaveTraits:kAXIsEditingTrait])
      {
        unsigned __int8 v27 = [v10 doesHaveTraits:v26];

        if ((v27 & 1) == 0) {
          goto LABEL_27;
        }
      }
      else
      {
      }
    }
    if (self->_firstResponderElement)
    {
LABEL_36:

LABEL_37:
      [(VOTElementRotor *)self->_elementRotor setIgnoreDefaultTypeAutofill:1];
      double v35 = [(VOTElementManager *)self _currentElement];
      [v35 clearElementForGesturedTextInput];

      [(VOTElementManager *)self _updateLastFirstResponderChangedTime];
      [(VOTElementManager *)self _updateRotorForCurrentElement];
      CGFloat v36 = +[VOTBrailleManager manager];
      [v36 updateKeyboardSettings];

      [(VOTElementManager *)self _updateFirstResponder];
      [(VOTElementManager *)self _updateFirstResponderTypingBuffer];
      goto LABEL_38;
    }
LABEL_27:
    [(VOTElementManager *)self _setCurrentElement:v5];
    fetchManager = self->_fetchManager;
    CGFloat v29 = [(VOTElementManager *)self _currentElement];
    [(VOTElementFetcher *)fetchManager updateCacheWithElement:v29];

    if (![(VOTElementManager *)self _shouldSuppressSpeechForPlayPause]
      && ![(VOTElement *)v5 isInAlert])
    {
      id v30 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      if ([(VOTElementManager *)self _shouldAnnounceCustomRotorHintForElement:v5])
      {
        uint64_t v31 = 0x200800802;
      }
      else
      {
        uint64_t v31 = 8390658;
      }
      unsigned int v32 = [(AXDragManager *)self->_dragManager isDragActive];
      uint64_t v33 = 0x40000000;
      if (!v32) {
        uint64_t v33 = 0;
      }
      [(VOTElementManager *)self _addDescription:v5 toRequest:v30 withOptions:v33 | v31];
      [v30 setOriginationType:2];
      [v30 setRequestQueueMixinBehavior:&stru_1001B5B10];
      [(VOTElementManager *)self sendRequest:v30];
    }
    CGFloat v34 = +[VOTDisplayManager displayManager];
    [v34 setCursorFrameForElement:v5];

    [(VOTElementManager *)self _disableQuickNavStateTemporarily];
    goto LABEL_36;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || ![v4 isEqualToString:@"retry"])
  {
    AXPerformBlockOnMainThreadAfterDelay();
    goto LABEL_12;
  }
  currentElement = self->_currentElement;
  if (!currentElement || ![(VOTElement *)currentElement isVisible])
  {
    unsigned int v8 = VOTLogCommon();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = self->_currentElement;
      *(_DWORD *)long long buf = 138412290;
      double v39 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "First responder failed to retrieve twice, update app: %@", buf, 0xCu);
    }

    [(VOTElementManager *)self _handleUpdateAppFromTimer];
  }
LABEL_38:
}

- (BOOL)_shouldSwitchToFirstResponder:(id)a3
{
  id v4 = a3;
  if (CFAbsoluteTimeGetCurrent() - self->_lastAdjustValueTime >= 0.5)
  {
    CFTypeID v6 = [(VOTElementManager *)self _currentElement];
    if ([v6 isEqual:v4])
    {
      LOBYTE(v5) = 0;
    }
    else
    {
      CFTypeID v7 = [v6 textInputElement];
      if ([v7 isEqual:v4])
      {
        LOBYTE(v5) = 0;
      }
      else
      {
        unsigned int v8 = [v6 application];
        if (([v8 isSoftwareKeyboardActive] & 1) != 0
          || ([v6 doesHaveTraits:kAXKeyboardKeyTrait] & 1) != 0)
        {
          LOBYTE(v5) = 0;
        }
        else
        {
          unsigned int v5 = [v6 doesHaveTraits:kAXAllowsDirectInteractionTrait] ^ 1;
        }
      }
    }
  }
  else
  {
    LOBYTE(v5) = 0;
  }

  return v5;
}

- (void)_outputWebLineWithMarkerRange:(id)a3 withElement:(id)a4
{
  id v18 = a3;
  id v6 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v18 count] == (id)2)
  {
    CFTypeID v7 = [v18 objectAtIndex:0];
    unsigned int v8 = [v6 textLineStartMarker:v7];

    id v9 = [v18 objectAtIndex:1];
    CFTypeID v10 = [v6 textLineEndMarker:v9];

    double v11 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v8, v10, 0);
    CGFloat v12 = [v6 stringForTextMarkers:v11];

    id v13 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    CGFloat v14 = [v6 language];
    id v15 = [v13 addString:v12 withLanguage:v14];

    CGFloat v16 = [v13 lastAction];
    [v16 setPerformPunctuationTranslation:1];

    double v17 = [v13 lastAction];
    [v17 setReplaceCommas:1];

    [(VOTElementManager *)self sendRequest:v13];
  }
}

- (id)_applicationMatchingBlock:(id)a3 inApplications:(id)a4
{
  unsigned int v5 = (uint64_t (**)(id, void *))a3;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v6 = a4;
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        CFTypeID v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (v5[2](v5, v10))
        {
          id v7 = v10;
          goto LABEL_11;
        }
      }
      id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v7;
}

- (BOOL)_hasApplicationMatchingBlock:(id)a3 inApplications:(id)a4
{
  id v4 = [(VOTElementManager *)self _applicationMatchingBlock:a3 inApplications:a4];
  BOOL v5 = v4 != 0;

  return v5;
}

- (id)_currentApplicationMatchingBlock:(id)a3
{
  return [(VOTElementManager *)self _applicationMatchingBlock:a3 inApplications:self->_currentApplications];
}

- (BOOL)_hasCurrentApplicationMatchingBlock:(id)a3
{
  id v3 = [(VOTElementManager *)self _currentApplicationMatchingBlock:a3];
  BOOL v4 = v3 != 0;

  return v4;
}

- (void)_handleWebSelectionChangedNotification:(id)a3
{
  uint64_t v33 = [(VOTElementManager *)self _currentElement];
  if (![(VOTElement *)v33 doesHaveTraits:kAXKeyboardKeyTrait])
  {
    uint64_t v5 = kAXWebContentTrait;
LABEL_6:
    id v7 = v33;
    goto LABEL_7;
  }
  firstResponderElement = self->_firstResponderElement;
  uint64_t v5 = kAXWebContentTrait;
  if (!firstResponderElement
    || ![(VOTElement *)firstResponderElement doesHaveTraits:kAXWebContentTrait])
  {
    goto LABEL_6;
  }
  id v6 = self->_firstResponderElement;

  id v7 = v6;
LABEL_7:
  CGFloat v34 = v7;
  if ([(VOTElement *)v7 doesHaveTraits:v5]
    || [(VOTElement *)v34 isReadingContent])
  {
    uint64_t v8 = [(VOTElement *)v34 textMarkerRangeForSelection];
    id v9 = [(VOTElement *)v34 stringForTextMarkers:v8];
    p_webSelectionText = &self->_webSelectionText;
    uint64_t v11 = [(NSString *)self->_webSelectionText length];
    uint64_t v12 = (uint64_t)[v9 length];
    if (!v12)
    {
      CGFloat v21 = self->_firstResponderElement;
      if (v21)
      {
        if ([(VOTElement *)v21 doesHaveTraits:v5])
        {
          [(VOTElementManager *)self _handleSelectionChangedNotification:0];
          webSelectionText = self->_webSelectionText;
          self->_webSelectionText = 0;
          goto LABEL_42;
        }
      }
    }
    if (v12 | v11)
    {
      long long v13 = (void *)VOTSharedWorkspace;
      long long v14 = [(VOTElementManager *)self _currentRotorSelection];
      [v13 refreshBraille:1 rotorSelection:v14];
    }
    id v15 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    if (CFAbsoluteTimeGetCurrent() - self->_performedTextSelectionOperation < 0.25 && [v9 length]
      || v11 < 1)
    {
      id v18 = v9;
LABEL_21:
      webSelectionText = v18;
      CGFloat v20 = @"element.selected.text";
LABEL_39:
      if ([webSelectionText length])
      {
        char v28 = [(VOTElement *)v34 language];
        id v29 = [v15 addString:webSelectionText withLanguage:v28];

        id v30 = [(id)VOTSharedWorkspace selectedLanguage];
        uint64_t v31 = sub_100051D04(off_1001EA9E8, v20, 0, v30);
        id v32 = [v15 addString:v31 withLanguage:v30];

        [v15 setInterruptsEverything:1];
        [v15 setGeneratesBraille:1];
        [v15 setBrailleType:4];
        [(VOTElementManager *)self sendRequest:v15];
      }
      objc_storeStrong((id *)&self->_webSelectionText, v9);

      goto LABEL_42;
    }
    if (v12 > v11)
    {
      CGFloat v16 = (char *)[v9 rangeOfString:*p_webSelectionText];
      if (v16 != (char *)0x7FFFFFFFFFFFFFFFLL)
      {
        if (self->_lastUserTextSelectionDirection > 1uLL) {
          [v9 substringToIndex:v16];
        }
        else {
        id v18 = [v9 substringFromIndex:&v16[v17]];
        }
        goto LABEL_21;
      }
      goto LABEL_30;
    }
    if (v11 > v12)
    {
      unsigned int v24 = *p_webSelectionText;
      if (v12)
      {
        unsigned int v25 = (char *)[(NSString *)v24 rangeOfString:v9];
        if (v25 == (char *)0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_30;
        }
        if ((self->_lastUserTextSelectionDirection | 2) == 2) {
          [(NSString *)*p_webSelectionText substringFromIndex:&v25[v26]];
        }
        else {
        unsigned __int8 v27 = [(NSString *)*p_webSelectionText substringToIndex:v25];
        }
      }
      else
      {
        unsigned __int8 v27 = v24;
      }
      webSelectionText = v27;
      goto LABEL_38;
    }
LABEL_30:
    webSelectionText = 0;
LABEL_38:
    CGFloat v20 = @"element.unselected.text";
    goto LABEL_39;
  }
  CGFloat v22 = [(VOTElementManager *)self _currentApplicationMatchingBlock:&stru_1001B5B30];
  uint64_t v8 = v22;
  if (!v22) {
    goto LABEL_43;
  }
  id v9 = [v22 firstElementInApplicationForFocus];
  webSelectionText = [(VOTElementManager *)self _nearestWebElement:v9];
  unsigned __int8 v23 = [webSelectionText textMarkerRangeForSelection];
  [(VOTElementManager *)self _outputWebLineWithMarkerRange:v23 withElement:webSelectionText];

LABEL_42:
LABEL_43:
}

- (BOOL)_isKeyboardLineMovement
{
  id v2 = [(id)VOTSharedWorkspace keyboardPressInfo];
  unsigned int v3 = [v2 keyCode] - 81;

  if (v3 < 2) {
    return 1;
  }
  uint64_t v5 = +[VOTKeyboardManager keyboardManager];
  id v6 = [v5 lastDispatchedKeyEvent];
  if (v6)
  {
    id v7 = +[VOTKeyboardManager keyboardManager];
    uint64_t v8 = [v7 lastReleasedToSystemKeyEvent];
    if (v8)
    {
      id v9 = +[VOTKeyboardManager keyboardManager];
      [v9 lastDispatchedKeyEventTime];
      double v11 = v10;
      uint64_t v12 = +[VOTKeyboardManager keyboardManager];
      [v12 lastReleasedToSystemKeyEventTime];
      BOOL v14 = v11 > v13;
    }
    else
    {
      BOOL v14 = 0;
    }
  }
  else
  {
    BOOL v14 = 0;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  CGFloat v16 = +[VOTKeyboardManager keyboardManager];
  uint64_t v17 = [v16 lastDispatchedKeyEvent];
  id v18 = [v17 keyInfo];
  if ([v18 keyCode] - 81 >= 2)
  {

    if (v14) {
      return 0;
    }
    goto LABEL_17;
  }
  CGFloat v19 = +[VOTKeyboardManager keyboardManager];
  [v19 lastDispatchedKeyEventTime];
  double v21 = Current - v20;

  BOOL v4 = v21 < 0.2;
  char v22 = v21 < 0.2 || v14;
  if ((v22 & 1) == 0)
  {
LABEL_17:
    unsigned __int8 v23 = +[VOTKeyboardManager keyboardManager];
    unsigned int v24 = [v23 lastReleasedToSystemKeyEvent];
    if ([v24 keyCode] - 81 > 1)
    {
      BOOL v4 = 0;
    }
    else
    {
      unsigned int v25 = +[VOTKeyboardManager keyboardManager];
      [v25 lastReleasedToSystemKeyEventTime];
      BOOL v4 = Current - v26 < 0.2;
    }
  }
  return v4;
}

- (void)_handleSelectionChangedNotification:(id)a3
{
  id v5 = a3;
  if ((uint64_t)[(id)VOTSharedWorkspace suppressSelectionChangeNotificationCount] < 1)
  {
    double v13 = self->_firstResponderElement;
    [(VOTElementManager *)self _updateFirstResponder];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      BOOL v14 = [v5 objectForKey:kAXSelectionChangedRemoteUserOperation];
      unsigned __int8 v15 = [v14 BOOLValue];
    }
    else
    {
      unsigned __int8 v15 = 0;
    }
    if ([(VOTElementManager *)self _ignoreTextEditingNotificationsForPickerElementUsage])
    {
      goto LABEL_39;
    }
    unsigned __int8 v184 = v15;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v187 = [(id)VOTSharedWorkspace selectedLanguage];
    uint64_t v17 = +[VOTKeyboardManager keyboardManager];
    id v18 = [v17 lastDispatchedKeyEvent];
    if (v18)
    {
      unsigned int v3 = +[VOTKeyboardManager keyboardManager];
      [v3 lastDispatchedKeyEventTime];
      if (Current - v19 < 0.2)
      {
        BOOL v182 = 1;
        goto LABEL_22;
      }
      id v185 = self;
      id v20 = v5;
      double v21 = v13;
    }
    else
    {
      id v185 = self;
      id v20 = v5;
      double v21 = v13;
    }
    char v22 = +[VOTKeyboardManager keyboardManager];
    unsigned __int8 v23 = [v22 lastReleasedToSystemKeyEvent];
    if (v23)
    {
      unsigned int v24 = +[VOTKeyboardManager keyboardManager];
      [v24 lastReleasedToSystemKeyEventTime];
      BOOL v182 = Current - v25 < 0.2;
    }
    else
    {
      BOOL v182 = 0;
    }

    double v13 = v21;
    id v5 = v20;
    self = v185;
    if (!v18)
    {
LABEL_23:

      self->_lastSelectionChangeTime = Current;
      if (!self->_didIgnoreLastFirstResponderChangeOnSelectionChange
        && Current - self->_lastFirstResponderChangeTime < 1.5)
      {
        self->_didIgnoreLastFirstResponderChangeOnSelectionChange = 1;
        double v26 = (void *)v187;
LABEL_38:

LABEL_39:
        goto LABEL_40;
      }
      if (Current - self->_lastValueChangeTime < 0.1)
      {
        id v27 = 0;
        double v26 = (void *)v187;
LABEL_36:
        id v32 = (void *)VOTSharedWorkspace;
        uint64_t v33 = [(VOTElementManager *)self _currentRotorSelection];
        [v32 refreshBraille:1 rotorSelection:v33];

LABEL_37:
        [(VOTElementManager *)self _resetRotorTextNavigation];
        [(VOTElementManager *)self _updateCurrentElementForTextInputSelectionChangeIfNeeded];

        goto LABEL_38;
      }
      char v28 = VOTLogCommon();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        id v29 = +[NSNumber numberWithDouble:Current - self->_lastPressOnMediaSessionElement];
        *(_DWORD *)long long buf = 138412290;
        v189 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "layout change: last media session press: %@", buf, 0xCu);
      }
      double v26 = (void *)v187;
      if (Current - self->_lastPressOnMediaSessionElement < 3.5 || !self->_firstResponderElement)
      {
        id v27 = 0;
        goto LABEL_36;
      }
      if (-[VOTElementManager _shouldSwitchToFirstResponder:](self, "_shouldSwitchToFirstResponder:")
        && [(VOTElement *)self->_firstResponderElement isAccessibleElement])
      {
        [(VOTElementManager *)self _setCurrentElement:self->_firstResponderElement];
        id v30 = +[VOTDisplayManager displayManager];
        [v30 setCursorFrameForElement:self->_firstResponderElement];

        int v31 = 0;
      }
      else
      {
        int v31 = 1;
      }
      if (![(VOTElement *)v13 isEqual:self->_firstResponderElement]) {
        goto LABEL_38;
      }
      v181.NSUInteger location = (NSUInteger)[(VOTElement *)self->_firstResponderElement selectedTextRange];
      v181.NSUInteger length = v34;
      double v35 = +[AXSubsystemVoiceOver sharedInstance];
      unsigned __int8 v36 = [v35 ignoreLogging];

      if ((v36 & 1) == 0)
      {
        id v37 = +[AXSubsystemVoiceOver identifier];
        CGFloat v38 = AXLoggerForFacility();

        os_log_type_t v39 = AXOSLogLevelFromAXLogLevel();
        if (os_log_type_enabled(v38, v39))
        {
          CGRect v40 = AXColorizeFormatLog();
          CGRect v41 = NSStringFromRange(v181);
          NSStringFromRange(self->_elementSelectionRangeBufferForSelectionChange);
          unsigned int v165 = v164 = v41;
          CGFloat v42 = _AXStringForArgs();

          CGFloat v43 = v38;
          if (os_log_type_enabled(v43, v39))
          {
            *(_DWORD *)long long buf = 138543362;
            v189 = v42;
            _os_log_impl((void *)&_mh_execute_header, v43, v39, "%{public}@", buf, 0xCu);
          }

          double v26 = (void *)v187;
        }
      }
      NSUInteger length = v181.length;
      if (v181.length || self->_elementSelectionRangeBufferForSelectionChange.length)
      {
        NSUInteger location = v181.location;
        if (v184)
        {
          id v27 = 0;
          goto LABEL_59;
        }
        if (v26)
        {
          id v46 = v26;
        }
        else
        {
          CGRect v47 = [(VOTElement *)self->_firstResponderElement application];
          id v46 = [v47 currentSoftwareKeyboardLanguage];

          NSUInteger length = v181.length;
        }
        int v48 = [(VOTElement *)self->_firstResponderElement value];
        uint64_t v180 = v46;
        -[VOTElementManager _outputSelectionDifference:oldRange:string:language:](self, "_outputSelectionDifference:oldRange:string:language:", v181.location, length, self->_elementSelectionRangeBufferForSelectionChange.location, self->_elementSelectionRangeBufferForSelectionChange.length, v48, v46);
        id v27 = 0;
        goto LABEL_57;
      }
      NSUInteger v49 = self->_elementSelectionRangeBufferForSelectionChange.location;
      id v50 = [(VOTElement *)self->_firstResponderElement value];
      NSUInteger location = v181.location;
      uint64_t v180 = v50;
      if (v181.location > v49)
      {
        NSUInteger v51 = self->_elementSelectionRangeBufferForSelectionChange.location;
        unint64_t v175 = v49;
        if (v51 == 0x7FFFFFFF) {
          unsigned int v52 = 0;
        }
        else {
          unsigned int v52 = (char *)(self->_elementSelectionRangeBufferInternal.length + v51);
        }
        id v27 = 0;
        NSUInteger v53 = v181.location - (void)v52;
        self->_cursorBorderHitCount = 0;
        uint64_t v55 = v181.location - (void)v52;
        goto LABEL_69;
      }
      if (v181.location < v49)
      {
        unint64_t v175 = v49;
        NSUInteger v53 = 0;
        NSUInteger v54 = self->_elementSelectionRangeBufferForSelectionChange.location;
        self->_cursorBorderHitCount = 0;
        if (v54 == 0x7FFFFFFF)
        {
          uint64_t v55 = 1;
          unsigned int v52 = (char *)v181.location;
          id v27 = 0;
          goto LABEL_70;
        }
        uint64_t v55 = v54 - v181.location;
        unsigned int v52 = (char *)v181.location;
        id v27 = 0;
LABEL_69:
        if (v55 < 1) {
          goto LABEL_58;
        }
LABEL_70:
        NSUInteger v171 = v53;
        if (&v52[v55] > objc_msgSend(v180, "length", v164))
        {
LABEL_71:
          NSUInteger length = 0;
          goto LABEL_58;
        }
        uint64_t v177 = v55;
        unsigned int v56 = -[VOTElement attributedValueForRange:](self->_firstResponderElement, "attributedValueForRange:", v52, v55);
        if (!v56)
        {
          unsigned int v56 = -[VOTElement valueForRange:](self->_firstResponderElement, "valueForRange:", v52, v55);
        }
        unsigned int v57 = +[NSCharacterSet newlineCharacterSet];
        unsigned int v58 = v56;
        [v56 rangeOfCharacterFromSet:v57];
        uint64_t v60 = v59;

        char v173 = v52;
        int v169 = v31;
        if (self->_flags.performedRotorTextNavigation) {
          goto LABEL_75;
        }
        double v67 = [(id)VOTSharedWorkspace keyboardPressInfo];
        if (v67) {
          int v68 = 1;
        }
        else {
          int v68 = v182;
        }

        if (v68 == 1)
        {
          if ([(VOTElementManager *)self _isKeyboardLineMovement])
          {
            double v69 = (char *)[(VOTElement *)self->_firstResponderElement lineRangeForPosition:v181.location + 1];
            if (v69 == (char *)[(VOTElement *)self->_firstResponderElement lineRangeForPosition:v181.location]+ 1)
            {
              CFStringRef v70 = @"\n";
LABEL_132:

              CGRect v61 = (void *)v70;
LABEL_133:
              uint64_t v102 = (uint64_t)[v61 length];
              v172 = +[NSCharacterSet whitespaceCharacterSet];
              if (v102 < 1)
              {
                unint64_t v104 = 0;
              }
              else
              {
                uint64_t v103 = 0;
                unint64_t v104 = 0;
                do
                  v104 += objc_msgSend(v172, "characterIsMember:", objc_msgSend(v61, "characterAtIndex:", v103++));
                while (v102 != v103);
              }
              BOOL v166 = v104 < 2;
              if ((unint64_t)[v61 length] > 1)
              {
                uint64_t v105 = [v61 stringByReplacingOccurrencesOfString:@"\n" withString:@" "];

                CGRect v61 = (void *)v105;
              }
              uint64_t v106 = (void *)v187;
              unsigned __int8 v107 = [(VOTElement *)self->_firstResponderElement doesHaveTraits:kAXSecureTextFieldTrait];
              uint64_t v108 = -[VOTElement attributedValueForRange:](self->_firstResponderElement, "attributedValueForRange:", v173, v177);
              [(id)VOTSharedWorkspace addMisspellingsForString:v108];
              CGRect v186 = v61;
              if (v107)
              {
                int v48 = 0;
                v176 = 0;
                uint64_t v179 = 0;
                goto LABEL_157;
              }
              unint64_t v109 = [(VOTElement *)self->_firstResponderElement lineStartPosition];
              if (v109 == self->_lastSeenLineStartPositionForFontProperties)
              {
                uint64_t v179 = 0;
              }
              else
              {
                id v110 = [(VOTElement *)self->_firstResponderElement lineRangeForPosition:v181.location];
                unsigned __int8 v112 = -[VOTElement attributedValueForRange:](self->_firstResponderElement, "attributedValueForRange:", v110, v111);
                uint64_t v179 = [(VOTElementManager *)self _listItemLabelForAXAttributedString:v112];
              }
              self->_lastSeenLineStartPositionForFontProperties = v109;
              char v113 = [v108 string];
              unsigned int v114 = [(VOTElementManager *)self stringIsTextAttachment:v113];

              id v115 = [v108 length];
              if (v114)
              {
                uint64_t v116 = -[VOTElementManager _textAttachmentElementForString:inRange:](self, "_textAttachmentElementForString:inRange:", v108, 0, v115);
                if (v116)
                {
                  int v48 = v116;
                  BOOL v166 = 0;
                  v176 = 0;
                  goto LABEL_157;
                }
                sub_100051804(off_1001EA9E8, @"attachment", 0);
                BOOL v166 = 0;
                v176 = 0;
                v186 = unsigned int v119 = v61;
              }
              else
              {
                if (v115)
                {
                  CFAbsoluteTime v117 = (char *)[v108 length];
                  if ((unint64_t)(v117 - 1) >= (unint64_t)(((__PAIR128__(v181.location, v175)
                                                                          - v181.location) >> 64)
                                                                        - (void)v173))
                    BOOL v118 = (char *)(((__PAIR128__(v181.location, v175) - v181.location) >> 64) - (void)v173);
                  else {
                    BOOL v118 = v117 - 1;
                  }
                  unsigned int v119 = [v108 attributesAtIndex:v118 effectiveRange:0];
                }
                else
                {
                  unsigned int v119 = 0;
                }
                v176 = [(VOTElementManager *)self _computeChangedFontAttributes:v119 storedAttributes:self->_lastSeenFontProperties haveMisspellCheck:1];
                uint64_t v106 = (void *)v187;
              }

              int v48 = 0;
LABEL_157:
              id v120 = +[VOTOutputRequest createRequest];
              double v121 = VOTLogCommon();
              if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
              {
                id v122 = [v120 keyboardLanguageHint];
                *(_DWORD *)long long buf = 138412290;
                v189 = v122;
                _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_INFO, "Keyboard language hint: %@", buf, 0xCu);
              }
              id v123 = [(VOTElement *)self->_firstResponderElement application];
              uint64_t v124 = [v123 currentSoftwareKeyboardLanguage];
              [v120 setKeyboardLanguageHint:v124];

              unsigned int v125 = [v120 keyboardLanguageHint];
              if (([v125 hasPrefix:@"ar"] & 1) != 0
                || [v125 hasPrefix:@"he"])
              {

                unsigned int v125 = 0;
              }
              NSUInteger location = v181.location;
              if (v106) {
                unsigned int v126 = v106;
              }
              else {
                unsigned int v126 = v125;
              }
              id v174 = v126;
              if ([v27 length]) {
                id v127 = [v120 addString:v27 withLanguage:v106 category:@"TopBottomString"];
              }
              v183 = v120;
              id v167 = v125;
              if (v48)
              {
                [v48 addTextualInformationToRequest:v120 options:0x4000 dataPackage:0];
                double v128 = sub_100051804(off_1001EA9E8, @"attachment", v106);
                id v129 = [v120 addString:v128];

                CGRect v186 = 0;
              }
              v168 = v108;
              if ([v179 length])
              {
                id v130 = [v120 addString:v179];
                v131 = [v120 lastAction];
                LODWORD(v132) = 1062836634;
                double v133 = +[NSNumber numberWithFloat:v132];
                [v131 setObject:v133 forVariant:32];

                NSUInteger location = v181.location;
              }
              id v134 = +[AXSettings sharedInstance];
              id v135 = [v134 voiceOverPhoneticsFeedback];

              double v136 = 0;
              if ([v186 length] == (id)1)
              {
                NSUInteger length = 0;
                if (v135)
                {
                  double v136 = [(VOTElementManager *)self _phoneticStringForLetter:v186 language:v174];
                }
              }
              else
              {
                NSUInteger length = 0;
              }
              if ([v186 isAXAttributedString])
              {
                double v137 = [(VOTElementManager *)self _orderedMonitoredFontAttributes];
                [v186 removeAttributes:v137];

                NSUInteger length = 0;
              }
              uint64_t v170 = v136;
              id v138 = [v136 length];
              if (v138) {
                BOOL v139 = v135 == 0;
              }
              else {
                BOOL v139 = 1;
              }
              char v140 = !v139;
              if (v138 && v135 == (id)2)
              {
                double v26 = (void *)v187;
                if ((v140 & 1) == 0)
                {
LABEL_198:
                  if ((TTSisSpeakableEmojiString() & 1) != 0 || [v186 length] == (id)1)
                  {
                    CGFloat v150 = +[VOTWorkspace sharedWorkspace];
                    unsigned __int8 v151 = [v150 visionEngine];
                    [v151 processStringFor2DBrailleDisplay:v186];

                    NSUInteger location = v181.location;
                    NSUInteger length = 0;
                  }
                  int v31 = v169;
                  if ([v176 length])
                  {
                    id v152 = [v183 addAttributedString:v176];
                    if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
                    {
                      double v153 = [v183 lastAction];
                      LODWORD(v154) = 1062836634;
                      double v155 = +[NSNumber numberWithFloat:v154];
                      [v153 setObject:v155 forVariant:32];

                      NSUInteger location = v181.location;
                      NSUInteger length = 0;
                    }
                  }
                  if ((v184 & 1) == 0) {
                    [(VOTElementManager *)self sendRequest:v183];
                  }

                  goto LABEL_207;
                }
              }
              else
              {
                id v141 = [v183 addString:v186 withLanguage:v174];
                double v142 = [v183 lastAction];
                [v142 setObject:kCFBooleanTrue forVariant:50];

                if (v166)
                {
                  double v144 = [v183 lastAction];
                  double v145 = [(id)VOTSharedWorkspace punctuationGroupForUUID:AXSSVoiceOverPunctuationGroupAll];
                  [v144 setObject:v145 forVariant:30];

                  NSUInteger location = v181.location;
                }
                double v26 = (void *)v187;
                NSUInteger length = 0;
                if ((v140 & 1) == 0) {
                  goto LABEL_198;
                }
                LODWORD(v143) = 1061158912;
                [v183 addPause:v143];
              }
              id v146 = [v183 addString:v170];
              if ([(VOTElementManager *)self _needsPhoneticBrailleForLanauge:v174]) {
                [(VOTElementManager *)self _sendBrailleAlert:v170];
              }
              if ([v186 length] == (id)1)
              {
                if (sub_100050EB4(v186))
                {
                  double v147 = +[AXSettings sharedInstance];
                  id v148 = [v147 voiceOverCapitalLetterFeedback];

                  BOOL v139 = v148 == (id)1;
                  NSUInteger location = v181.location;
                  NSUInteger length = 0;
                  if (v139)
                  {
                    double v149 = [v183 lastAction];
                    [v149 setObject:&off_1001C4EC8 forVariant:32];

                    NSUInteger length = 0;
                  }
                }
              }
              goto LABEL_198;
            }
            if ((id)v181.location == [v180 length])
            {
              NSUInteger v93 = v181.location - 1;
            }
            else
            {
              unsigned int v94 = (char *)[(VOTElement *)self->_firstResponderElement lineRangeForPosition:v181.location];
              NSUInteger v93 = v181.location;
              if ((char *)v181.location == &v94[v95])
              {
                unsigned int v96 = -[VOTElement valueForRange:](self->_firstResponderElement, "valueForRange:", v181.location, 1);
                int v97 = +[NSCharacterSet newlineCharacterSet];
                id v98 = [v96 rangeOfCharacterFromSet:v97];

                if (v98 == (id)0x7FFFFFFFFFFFFFFFLL) {
                  NSUInteger v93 = v181.location + 1;
                }
                else {
                  NSUInteger v93 = v181.location;
                }
              }
            }
            firstResponderElement = self->_firstResponderElement;
            id v100 = [(VOTElement *)firstResponderElement lineRangeForPosition:v93];
            uint64_t v74 = -[VOTElement valueForRange:](firstResponderElement, "valueForRange:", v100, v101);
LABEL_131:
            CFStringRef v70 = (const __CFString *)v74;
            goto LABEL_132;
          }
          if (v60 != 1)
          {
            if ((unint64_t)[v58 length] >= 2)
            {
              uint64_t v78 = [(VOTElement *)self->_firstResponderElement value];
              if (&v173[v55] >= [v78 length])
              {
                char v79 = 0;
              }
              else
              {
                char v79 = 0;
                do
                {
                  unsigned __int8 v80 = +[NSCharacterSet punctuationCharacterSet];
                  unsigned int v81 = objc_msgSend(v80, "characterIsMember:", objc_msgSend(v78, "characterAtIndex:", &v173[v55]));

                  if (!v81) {
                    break;
                  }
                  ++v55;

                  uint64_t v78 = [(VOTElement *)self->_firstResponderElement value];
                  char v79 = 1;
                }
                while (&v173[v55] < [v78 length]);
              }

              if (v79)
              {
                uint64_t v156 = -[VOTElement valueForRange:](self->_firstResponderElement, "valueForRange:", v173, v55);

                unsigned int v58 = (void *)v156;
              }
            }
            if (v177 > 1)
            {
              NSUInteger v157 = v181.location >= v175 ? v171 : 0;
              uint64_t v158 = v181.location < v175 ? 1 : 2;
              v159 = (char *)[v58 wordFromPosition:v157 inDirection:v158];
              if (v160)
              {
                unsigned int v161 = v159;
                if (v159 != (char *)0x7FFFFFFFFFFFFFFFLL)
                {
                  uint64_t v162 = v160;
                  if (&v159[v160] <= [v58 length])
                  {
                    objc_msgSend(v58, "substringWithRange:", v161, v162);
                    CFStringRef v70 = (const __CFString *)objc_claimAutoreleasedReturnValue();
                    uint64_t v177 = v55;
                    goto LABEL_132;
                  }
                }
              }
            }
            uint64_t v177 = v55;
          }
        }
        else
        {
          id v73 = (char *)[(VOTElement *)self->_firstResponderElement lineRangeForPosition:v181.location + 1];
          if (v73 == (char *)-[VOTElement lineRangeForPosition:](self->_firstResponderElement, "lineRangeForPosition:", v181.location)+ 1|| [v58 isEqualToString:@"\n"])
          {
            uint64_t v74 = sub_100051804(off_1001EA9E8, @"empty.line", 0);
            goto LABEL_131;
          }
        }
LABEL_75:
        CGRect v61 = v58;
        goto LABEL_133;
      }
      CGRect v62 = v50;
      if ((v181.location || self->_elementSelectionRangeBufferForSelectionChange.location)
        && ((id)v181.location != objc_msgSend(v50, "length", v164, v165)
         || (id v63 = self->_elementSelectionRangeBufferForSelectionChange.location, v63 != [v62 length])))
      {
        int v64 = v31;
        id v65 = +[AXSubsystemVoiceOver sharedInstance];
        unsigned __int8 v66 = [v65 ignoreLogging];

        if ((v66 & 1) == 0)
        {
          uint64_t v71 = +[AXSubsystemVoiceOver identifier];
          int v48 = AXLoggerForFacility();

          os_log_type_t v72 = AXOSLogLevelFromAXLogLevel();
          if (!os_log_type_enabled(v48, v72))
          {
            id v27 = 0;
            int v31 = v64;
            NSUInteger location = v181.location;
            NSUInteger length = 0;
LABEL_57:

LABEL_58:
LABEL_59:
            -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", location, length, 1, v164);
            if (!v31) {
              goto LABEL_37;
            }
            goto LABEL_36;
          }
          CGRect v186 = AXColorizeFormatLog();
          v172 = _AXStringForArgs();
          if (os_log_type_enabled(v48, v72))
          {
            *(_DWORD *)long long buf = 138543362;
            v189 = v172;
            _os_log_impl((void *)&_mh_execute_header, v48, v72, "%{public}@", buf, 0xCu);
          }
          id v27 = 0;
          int v31 = v64;
          NSUInteger location = v181.location;
          NSUInteger length = 0;
LABEL_207:

          goto LABEL_57;
        }
        id v27 = 0;
        int v31 = v64;
      }
      else
      {
        if (objc_msgSend((id)VOTSharedWorkspace, "fingerCount", v164))
        {
          id v27 = 0;
          goto LABEL_71;
        }
        unint64_t v175 = v49;
        uint64_t v75 = self;
        uint64_t v76 = [(VOTElement *)self->_firstResponderElement application];
        unsigned __int8 v77 = [v76 isDictationListening];

        if ((v77 & 1) == 0)
        {
          unsigned int v82 = +[AXSubsystemVoiceOver sharedInstance];
          unsigned __int8 v83 = [v82 ignoreLogging];

          if ((v83 & 1) == 0)
          {
            unsigned __int8 v84 = +[AXSubsystemVoiceOver identifier];
            id v85 = AXLoggerForFacility();

            os_log_type_t v86 = AXOSLogLevelFromAXLogLevel();
            if (os_log_type_enabled(v85, v86))
            {
              os_log_type_t v87 = AXColorizeFormatLog();
              id v88 = _AXStringForArgs();
              unint64_t v89 = v85;
              if (os_log_type_enabled(v89, v86))
              {
                *(_DWORD *)long long buf = 138543362;
                v189 = v88;
                _os_log_impl((void *)&_mh_execute_header, v89, v86, "%{public}@", buf, 0xCu);
              }
            }
          }
          uint64_t v90 = +[VOTOutputManager outputManager];
          unsigned __int8 v91 = +[VOSOutputEvent BoundaryEncountered];
          [v90 sendEvent:v91];

          if ([v180 length]
            && ([(VOTElement *)v75->_firstResponderElement doesHaveTraits:kAXTextAreaTrait]
             || [(VOTElement *)v75->_firstResponderElement doesHaveAllTraits:kAXTextEntryTrait | kAXWebContentTrait | kAXIsEditingTrait]))
          {
            if (v181.location)
            {
              sub_100051804(off_1001EA9E8, @"bottom.document", 0);
              id v27 = (id)objc_claimAutoreleasedReturnValue();

              unsigned int v52 = (char *)[(VOTElement *)v75->_firstResponderElement lineRangeForPosition:v181.location - 1];
              uint64_t v178 = v92;
            }
            else
            {
              sub_100051804(off_1001EA9E8, @"top.document", 0);
              id v27 = (id)objc_claimAutoreleasedReturnValue();

              [(VOTElement *)v75->_firstResponderElement lineRangeForPosition:0];
              uint64_t v178 = v163;
              unsigned int v52 = 0;
            }
          }
          else
          {
            uint64_t v178 = 0;
            unsigned int v52 = 0;
            id v27 = 0;
          }

          NSUInteger v53 = 0;
          self = v75;
          double v26 = (void *)v187;
          NSUInteger location = v181.location;
          NSUInteger length = 0;
          uint64_t v55 = v178;
          goto LABEL_69;
        }
        id v27 = 0;
        double v26 = (void *)v187;
      }
      NSUInteger location = v181.location;
      NSUInteger length = 0;
      goto LABEL_58;
    }
LABEL_22:

    goto LABEL_23;
  }
  [(VOTElementManager *)self _reupdateTextSelectionInformation];
  id v6 = +[AXSubsystemVoiceOver sharedInstance];
  unsigned __int8 v7 = [v6 ignoreLogging];

  if ((v7 & 1) == 0)
  {
    uint64_t v8 = +[AXSubsystemVoiceOver identifier];
    id v9 = AXLoggerForFacility();

    os_log_type_t v10 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v9, v10))
    {
      double v11 = AXColorizeFormatLog();
      id v164 = [(id)VOTSharedWorkspace suppressSelectionChangeNotificationCount];
      uint64_t v12 = _AXStringForArgs();
      if (os_log_type_enabled(v9, v10))
      {
        *(_DWORD *)long long buf = 138543362;
        v189 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}@", buf, 0xCu);
      }
    }
  }
  objc_msgSend((id)VOTSharedWorkspace, "setSuppressSelectionChangeNotificationCount:", (char *)objc_msgSend((id)VOTSharedWorkspace, "suppressSelectionChangeNotificationCount", v164) - 1);
LABEL_40:
}

- (void)_elementSelectionRangeDidChange:(_NSRange)a3 reason:(int64_t)a4
{
  if ((unint64_t)a4 <= 2)
  {
    self->_elementSelectionRangeBufferInternal = a3;
    self->_elementSelectionRangeBufferForValueChange = a3;
    self->_elementSelectionRangeBufferForSelectionChange = a3;
  }
}

- (_NSRange)_elementSelectionRange
{
  NSUInteger length = self->_elementSelectionRangeBufferInternal.length;
  NSUInteger location = self->_elementSelectionRangeBufferInternal.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

- (void)_updateCurrentElementForTextInputSelectionChangeIfNeeded
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  unsigned int v3 = [(VOTElementManager *)self _currentElement];
  BOOL v4 = v3;
  if (self->_firstResponderElement)
  {
    id v5 = [v3 textInputElement];
    unsigned int v6 = [v5 isEqual:self->_firstResponderElement];

    if (v6)
    {
      id v7 = [v4 textInputElementRange];
      if (v7 != (id)0x7FFFFFFF)
      {
        unint64_t v9 = (unint64_t)v7;
        uint64_t v10 = v8;
        double v11 = [(VOTElement *)self->_firstResponderElement uiElement];
        [v11 rectWithAXAttribute:2057];
        CGFloat v13 = v12;
        CGFloat v15 = v14;
        CGFloat v17 = v16;
        CGFloat v19 = v18;

        NSUInteger location = self->_elementSelectionRangeBufferInternal.location;
        NSUInteger length = self->_elementSelectionRangeBufferInternal.length;
        if (v9 > length + location || v9 + v10 < location)
        {
          if (v9 <= length + location) {
            uint64_t v28 = 1;
          }
          else {
            uint64_t v28 = 2;
          }
LABEL_19:
          self->_flags.performedElementUpdateForSelectionChange = 1;
          [(VOTElementManager *)self _cancelPreviousElementSearch];
          fetchManager = self->_fetchManager;
          v34[0] = _NSConcreteStackBlock;
          v34[1] = 3221225472;
          v34[2] = sub_10009C4EC;
          v34[3] = &unk_1001B5B58;
          v34[4] = self;
          v34[5] = location;
          v34[6] = length;
          *(CGFloat *)&v34[7] = v13;
          *(CGFloat *)&v34[8] = v15;
          *(CGFloat *)&v34[9] = v17;
          *(CGFloat *)&v34[10] = v19;
          unint64_t elementSearchGeneration = self->_elementSearchGeneration;
          LOBYTE(v31) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
          -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:](fetchManager, "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:", v28, v4, v34, 0, 999999, elementSearchGeneration, 0x7FFFFFFFLL, 0, v31);
          goto LABEL_20;
        }
        [v4 updateFrame];
        [v4 frame];
        CGFloat x = v35.origin.x;
        CGFloat y = v35.origin.y;
        CGFloat width = v35.size.width;
        CGFloat height = v35.size.height;
        v41.origin.CGFloat x = v13;
        v41.origin.CGFloat y = v15;
        v41.size.CGFloat width = v17;
        v41.size.CGFloat height = v19;
        CGRect v36 = CGRectIntersection(v35, v41);
        if (CGRectIsEmpty(v36))
        {
          v37.origin.CGFloat x = x;
          v37.origin.CGFloat y = y;
          v37.size.CGFloat width = width;
          v37.size.CGFloat height = height;
          double MaxY = CGRectGetMaxY(v37);
          v38.origin.CGFloat x = v13;
          v38.origin.CGFloat y = v15;
          v38.size.CGFloat width = v17;
          v38.size.CGFloat height = v19;
          double MinY = CGRectGetMinY(v38);
          v39.origin.CGFloat x = x;
          v39.origin.CGFloat y = y;
          v39.size.CGFloat width = width;
          v39.size.CGFloat height = height;
          double v26 = CGRectGetMinY(v39);
          v40.origin.CGFloat x = v13;
          v40.origin.CGFloat y = v15;
          v40.size.CGFloat width = v17;
          v40.size.CGFloat height = v19;
          BOOL v27 = v26 >= CGRectGetMaxY(v40);
          uint64_t v28 = v27 ? 2 : 1;
          if (v27 || MaxY <= MinY) {
            goto LABEL_19;
          }
        }
      }
    }
  }
LABEL_20:
}

- (void)_cancelPreviousElementSearch
{
}

- (int64_t)typingFeedbackForKeyboardType
{
  if ([(id)VOTSharedWorkspace brailleInputActive])
  {
    unsigned int v3 = +[AXSettings sharedInstance];
    id v4 = [v3 voiceOverBrailleGesturesTypingFeedback];
LABEL_9:
    int64_t v7 = (int64_t)v4;

    return v7;
  }
  id v5 = [(VOTElementManager *)self elementRotor];
  id v6 = [v5 currentRotorType];

  if (v6 != (id)61)
  {
    unsigned int v8 = [(VOTElementManager *)self _hasCurrentApplicationMatchingBlock:&stru_1001B5B78];
    unsigned int v9 = [(VOTElementManager *)self _hasCurrentApplicationMatchingBlock:&stru_1001B5B98];
    uint64_t v10 = +[AXSettings sharedInstance];
    unsigned int v3 = v10;
    if (v8 || v9) {
      id v4 = [v10 voiceOverHardwareTypingFeedback];
    }
    else {
      id v4 = [v10 voiceOverSoftwareTypingFeedback];
    }
    goto LABEL_9;
  }
  return 2;
}

- (BOOL)_ignoreTextEditingNotificationsForPickerElementUsage
{
  unsigned int v3 = VOTLogCommon();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    CFAbsoluteTime v4 = CFAbsoluteTimeGetCurrent() - self->_lastAdjustValueTime;
    int v11 = 134217984;
    CFAbsoluteTime v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Ignore text editing for picker usage change: %f", (uint8_t *)&v11, 0xCu);
  }

  if (CFAbsoluteTimeGetCurrent() - self->_lastAdjustValueTime >= 0.300000012) {
    return 0;
  }
  id v5 = [(VOTElementManager *)self _currentElement];
  if ([(VOTElementManager *)self _isElementValidForFirstResponder:v5])
  {
    BOOL v6 = 0;
  }
  else
  {
    int64_t v7 = [(VOTElementManager *)self _currentElement];
    if ([v7 doesHaveTraits:kAXAdjustableTrait])
    {
      unsigned int v8 = [(VOTElementManager *)self _currentElement];
      unsigned int v9 = [v8 value];
      BOOL v6 = [v9 length] != 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  return v6;
}

- (void)_handleNonEditableValueChange:(id)a3
{
  id v4 = a3;
  unsigned __int8 v5 = [(VOTElement *)self->_currentElement isEqual:v4];
  BOOL v6 = VOTLogCommon();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    if (v7) {
      sub_1001207BC();
    }

    BOOL v6 = +[VOTBrailleManager manager];
    [v6 setBrailleElement:v4 resetBrailleCursor:0 rotorSelection:0];
  }
  else if (v7)
  {
    sub_100120824();
  }
}

- (void)_handleValueChangedNotification:(id)a3 associatedElement:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v8 = v6;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v8 = [v6 objectForKey:kAXValueChangeUserInfoKeyChangeType];
      unsigned int v9 = [v6 objectForKey:kAXValueChangeUserInfoKeyIsQuiet];
      id v10 = [v9 BOOLValue];

      goto LABEL_9;
    }
    if (v7 && ([v7 doesHaveTraits:kAXIsEditingTrait] & 1) == 0)
    {
      [(VOTElementManager *)self _handleNonEditableValueChange:v7];
      double v25 = VOTLogCommon();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Non editable value change element present, processing offline", buf, 2u);
      }

      id v8 = 0;
      goto LABEL_37;
    }
    id v8 = 0;
  }
  id v10 = 0;
LABEL_9:
  if ((uint64_t)[(id)VOTSharedWorkspace suppressValueChangeNotificationCount] >= 1)
  {
    int v11 = (char *)[(id)VOTSharedWorkspace suppressValueChangeNotificationCount];
    [(id)VOTSharedWorkspace setSuppressValueChangeNotificationCount:v11 - 1];
    goto LABEL_37;
  }
  if (self->_firstResponderElement) {
    -[VOTElementManager setPreviousFirstResponder:](self, "setPreviousFirstResponder:");
  }
  [(VOTElementManager *)self _updateFirstResponder];
  if (![(VOTElementManager *)self _ignoreTextEditingNotificationsForPickerElementUsage])
  {
    CFAbsoluteTime v12 = self->_firstResponderElement;
    CGFloat v13 = v12;
    if (!v12)
    {
      CGFloat v13 = [(VOTElementManager *)self previousFirstResponder];
    }
    double v14 = [(VOTElementManager *)self previousFirstResponderValue];
    [v13 updateValue];
    CGFloat v15 = [v13 value];
    if (![v13 doesHaveTraits:kAXSecureTextFieldTrait])
    {
      firstResponderElement = self->_firstResponderElement;
      if (firstResponderElement)
      {
        id v32 = v15;
        CGFloat v19 = [(VOTElement *)firstResponderElement application];
        if (![(NSArray *)self->_currentApplications containsObject:v19]
          || (uint64_t v20 = (uint64_t)[v19 valueChangeOriginationSource]) == 0)
        {
          NSUInteger v34 = v14;
          double Current = CFAbsoluteTimeGetCurrent();
          char v22 = +[VOTKeyboardManager keyboardManager];
          [v22 lastDispatchedKeyEventTime];
          double v24 = Current - v23;

          if (v24 >= 0.5)
          {
            if ([(id)VOTSharedWorkspace brailleInputActive])
            {
              uint64_t v20 = 3;
            }
            else
            {
              double v26 = [(VOTElementManager *)self elementRotor];
              BOOL v27 = [v26 currentRotorType] == (id)61;

              uint64_t v20 = 4 * v27;
            }
          }
          else
          {
            uint64_t v20 = 1;
          }
          double v14 = v34;
        }
        [(VOTElementManager *)self _processValueChangeWithFirstResponder:self->_firstResponderElement existingFirstResponder:1 changeType:v8 changeOrigination:v20 isQuiet:v10];
        self->_lastValueChangeTime = CFAbsoluteTimeGetCurrent();

        CGFloat v15 = v32;
      }
      if (v12) {
        goto LABEL_36;
      }
      goto LABEL_41;
    }
    if ((v10 & 1) == 0)
    {
      if ([v15 length] || objc_msgSend(v14, "length") == (id)1)
      {
        if ([v14 isEqualToString:v15]) {
          goto LABEL_40;
        }
        uint64_t v33 = v14;
        double v16 = +[VOTOutputManager outputManager];
        uint64_t v17 = +[VOSOutputEvent DidEnterSecureText];
      }
      else
      {
        uint64_t v33 = v14;
        double v16 = +[VOTOutputManager outputManager];
        uint64_t v17 = +[VOSOutputEvent BoundaryEncountered];
      }
      id v29 = (void *)v17;
      [v16 sendEvent:v17];

      double v14 = v33;
    }
LABEL_40:
    id v30 = (void *)VOTSharedWorkspace;
    uint64_t v31 = [(VOTElementManager *)self _currentRotorSelection];
    [v30 refreshBraille:1 rotorSelection:v31];

    self->_lastValueChangeTime = CFAbsoluteTimeGetCurrent();
    if (v12)
    {
LABEL_36:
      [(VOTElementManager *)self setPreviousFirstResponderValue:v15];
      autofillCurrentElement = self->_autofillCurrentElement;
      self->_autofillCurrentElement = 0;

      [(VOTElementManager *)self _updateCurrentElementForTextInputSelectionChangeIfNeeded];
      goto LABEL_37;
    }
LABEL_41:
    [(VOTElementManager *)self setPreviousFirstResponder:0];
    goto LABEL_36;
  }
LABEL_37:
}

- (void)_handleTextReplacementOccurredNotification:(id)a3
{
  id v12 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v12 length])
  {
    id v4 = objc_opt_new();
    id v5 = [v4 addString:v12];
    if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
    {
      id v6 = [v4 outputActions];
      id v7 = [v6 lastObject];
      [v7 setObject:&off_1001C4EC8 forVariant:32];
    }
    id v8 = [v4 outputActions];
    unsigned int v9 = [v8 lastObject];
    [v9 setObject:&__kCFBooleanTrue forVariant:57];

    id v10 = (char *)[(id)VOTSharedWorkspace suppressValueChangeNotificationCount];
    [(id)VOTSharedWorkspace setSuppressValueChangeNotificationCount:v10 + 1];
    int v11 = (char *)[(id)VOTSharedWorkspace suppressSelectionChangeNotificationCount];
    [(id)VOTSharedWorkspace setSuppressSelectionChangeNotificationCount:v11 + 1];
    [(VOTElementManager *)self _updateFirstResponderTypingBuffer];
    [v4 send];
  }
}

- (void)resetTextAndSelectionCaches
{
  self->_selectedTextStartLocation = 0;
  [(NSMutableString *)self->_elementTypingBuffer setString:&stru_1001B7888];

  -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", 0x7FFFFFFFLL, 0, 0);
}

- (void)_processValueChangeWithFirstResponder:(id)a3 existingFirstResponder:(BOOL)a4 changeType:(id)a5 changeOrigination:(int64_t)a6 isQuiet:(BOOL)a7
{
  BOOL v189 = a4;
  id v10 = a3;
  id v11 = a5;
  p_elementTypingBuffer = (id *)&self->_elementTypingBuffer;
  if (!self->_elementTypingBuffer)
  {
    CGFloat v13 = [v10 value];
    id v14 = [v13 mutableCopyWithZone:0];
    id v15 = *p_elementTypingBuffer;
    id *p_elementTypingBuffer = v14;

    double v16 = VOTLogElement();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
      sub_100120998();
    }
  }
  [v10 updateValue];
  uint64_t v17 = [v10 value];
  if ([(__CFString *)v17 isAXAttributedString]
    && [(__CFString *)v17 hasAttribute:UIAccessibilityTokenPlaceholder])
  {

    uint64_t v17 = &stru_1001B7888;
  }
  id v203 = [v10 selectedTextRange];
  uint64_t v209 = v18;
  CGFloat v19 = [v10 application];
  id v20 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  if (a6 == 3)
  {
    double v21 = [(id)VOTSharedWorkspace selectedBrailleGesturesInputTable];
    char v22 = [v21 localeIdentifier];

    if (v22 && [v22 length])
    {
      uint64_t v23 = AXLanguageConvertToCanonicalForm();

      int v186 = 1;
      if (v23) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  int v186 = 0;
LABEL_15:
  uint64_t v23 = [v19 currentSoftwareKeyboardLanguage];
LABEL_16:
  v192 = v19;
  v200 = (void *)v23;
  [v20 setKeyboardLanguageHint:v23];
  if (v17) {
    double v24 = v17;
  }
  else {
    double v24 = &stru_1001B7888;
  }
  double v196 = &self->_elementTypingBuffer;
  double v25 = [*p_elementTypingBuffer length];
  v208 = v24;
  double v26 = [(__CFString *)v24 length];
  int64_t v27 = v25 - v26;
  if (v25 != v26 && [(VOTElementManager *)self _shouldSwitchToFirstResponder:v10])
  {
    [(VOTElementManager *)self _setCurrentElement:v10];
    uint64_t v28 = +[VOTDisplayManager displayManager];
    [v28 setCursorFrameForElement:v10];
  }
  int64_t v206 = a6;
  id v29 = VOTLogElement();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
    sub_100120928();
  }

  unsigned int v30 = [v11 isEqualToString:kAXValueChangeTypeDelete];
  uint64_t v31 = &kAXValueChangeTypeSingleInsert;
  if ([v11 isEqualToString:kAXValueChangeTypeInsert]) {
    unsigned int v32 = 1;
  }
  else {
    unsigned int v32 = [v11 isEqualToString:kAXValueChangeTypeSingleInsert];
  }
  unsigned int v188 = [v11 isEqualToString:kAXValueChangeTypeReplacement];
  switch(v206)
  {
    case 0:
      uint64_t v33 = +[AXSettings sharedInstance];
      id v34 = [v33 voiceOverSoftwareTypingFeedback];
      goto LABEL_33;
    case 1:
      uint64_t v33 = +[AXSettings sharedInstance];
      id v34 = [v33 voiceOverHardwareTypingFeedback];
      goto LABEL_33;
    case 2:
      uint64_t v35 = 3;
      goto LABEL_35;
    case 3:
      uint64_t v33 = +[AXSettings sharedInstance];
      id v34 = [v33 voiceOverBrailleGesturesTypingFeedback];
LABEL_33:
      unint64_t v197 = (unint64_t)v34;

      break;
    case 4:
      uint64_t v35 = 2;
LABEL_35:
      unint64_t v197 = v35;
      break;
    default:
      unint64_t v197 = 0;
      break;
  }
  CGRect v36 = VOTLogElement();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    NSUInteger location = self->_elementSelectionRangeBufferForValueChange.location;
    NSUInteger length = self->_elementSelectionRangeBufferForValueChange.length;
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = location;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = length;
    __int16 v227 = 2048;
    id v228 = v203;
    __int16 v229 = 2048;
    uint64_t v230 = v209;
    _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Old selection: %lu, %lu -- new selection:%lu %lu", buf, 0x2Au);
  }

  v207 = self;
  if (self->_elementSelectionRangeBufferForValueChange.length) {
    BOOL v37 = v209 == 0;
  }
  else {
    BOOL v37 = 0;
  }
  int v38 = v37;
  int v204 = v38;
  if (v37) {
    uint64_t v39 = 1;
  }
  else {
    uint64_t v39 = v32;
  }
  uint64_t v224 = 0;
  if (v30) {
    uint64_t v39 = 2;
  }
  uint64_t v194 = v39;
  __int16 v223 = 0;
  BOOL v40 = v11 && ([v11 isEqualToString:kAXValueChangeTypeSingleInsert] & 1) != 0
     || v27 == -1;
  __int16 v222 = 0;
  *(_OWORD *)long long buf = xmmword_10016E510;
  char v221 = 0;
  CGRect v41 = +[AXAttributedString string];
  CGFloat v42 = +[NSString string];
  CGFloat v43 = [(id)VOTSharedWorkspace selectedLanguage];
  v210 = v20;
  v202 = v11;
  v190 = v43;
  if (v43
    && ([v20 keyboardLanguageHint],
        CGRect v36 = objc_claimAutoreleasedReturnValue(),
        AXLanguageCanonicalFormToGeneralLanguage(),
        uint64_t v31 = objc_claimAutoreleasedReturnValue(),
        [v36 hasPrefix:v31]))
  {
    id v205 = v43;
  }
  else
  {
    id v205 = [v20 keyboardLanguageHint];

    if (!v43) {
      goto LABEL_58;
    }
  }

LABEL_58:
  if (v197 < 3) {
    unint64_t v44 = v197 + 1;
  }
  else {
    unint64_t v44 = 0;
  }
  uint64_t v45 = +[AXFirstResponderValueChangeManager sharedInstance];
  elementTypingBuffer = v207->_elementTypingBuffer;
  id v191 = v10;
  [(id)VOTSharedWorkspace lastKeyboardKeyPress];
  id v219 = v42;
  id v220 = v41;
  LOBYTE(v184) = 0;
  BYTE1(v183) = v204;
  LOBYTE(v183) = v40;
  LOBYTE(v182) = v206 != 2;
  BOOL v47 = v10 != 0;
  id v48 = v203;
  objc_msgSend(v45, "outputValueChangeForNewValue:oldValue:isFirstResponderValid:selectedTextRange:oldSelectedTextRange:shouldEchoDeletion:optionalValueChangeType:derivedValueChangeType:didHitBorder:isBreakSpaceCharacter:isSingleInsert:selectionDeleted:feedbackType:textOperationOccurred:lastKeyboardKeyPress:isSingleCharacterInsertOrDelete:singleInsertDeleteAttString:singleInsertDeleteString:isSingleCharacterUpdate:wordRangeToFindMisspelled:pasteOperationSucceeded:processApostrophes:", v208, elementTypingBuffer, v47, v203, v209, v207->_elementSelectionRangeBufferForValueChange.location, v207->_elementSelectionRangeBufferForValueChange.length, v182, v194, &v224, (char *)&v223 + 1, &v223, v183, v44,
    &v207->_flags.tapShouldHandleTextOperation,
    &v221,
    &v220,
    &v219,
    &v222,
    buf,
    (char *)&v222 + 1,
    v184);
  NSUInteger v49 = (__CFString *)objc_claimAutoreleasedReturnValue();
  id v195 = v220;

  id v193 = v219;
  if ([(__CFString *)v49 length] == (id)1)
  {
    uint64_t v50 = TTSChoseong_JongseongToHangul();

    NSUInteger v49 = (__CFString *)v50;
  }
  int v51 = 0;
  unsigned int v52 = v191;
  NSUInteger v53 = v207;
  NSUInteger v54 = v210;
  if (v224)
  {
    if (v224 == 1)
    {
      int v187 = 1;
    }
    else if (v224 == 2)
    {
      int v187 = 0;
      int v51 = 1;
    }
    else
    {
      int v51 = 0;
      int v187 = 0;
    }
    [(VOTElementRotor *)v207->_elementRotor setIgnoreDefaultTypeAutofill:0];
  }
  else
  {
    int v187 = 0;
  }
  if (HIBYTE(v223) && !a7)
  {
    uint64_t v55 = +[VOTOutputManager outputManager];
    unsigned int v56 = +[VOSOutputEvent BoundaryEncountered];
    [v55 sendEvent:v56];
  }
  if ((_BYTE)v223)
  {
    unsigned int v57 = [v210 keyboardLanguageHint];
    uint64_t v58 = sub_10005215C(32, @"UnicodeHex.", @"VOTOutputPunctuation", v57);

    if (v58) {
      NSUInteger v49 = (__CFString *)v58;
    }
    else {
      NSUInteger v49 = @" ";
    }
  }
  if (v188)
  {
    uint64_t v59 = v208;
LABEL_91:

    NSUInteger v49 = v59;
    goto LABEL_92;
  }
  if (v221)
  {
    if (v197 != 3)
    {
      if ([(__CFString *)v208 isAXAttributedString]) {
        id v60 = [v210 addAttributedString:v195 withLanguage:v205];
      }
      else {
        id v61 = [v210 addString:v193 withLanguage:v205];
      }
    }
    unsigned int v62 = [(id)VOTSharedWorkspace typingPitchChangeEnabled];
    if (v206 != 3 && v62)
    {
      id v63 = [v210 outputActions];
      int v64 = [v63 lastObject];
      LODWORD(v65) = 1.5;
      +[NSNumber numberWithFloat:v65];
      v67 = int v66 = v51;
      [v64 setObject:v67 forVariant:32];

      int v51 = v66;
      unsigned int v52 = v191;
      id v48 = v203;
    }
    if ((unint64_t)[(__CFString *)v49 length] <= 1)
    {

      NSUInteger v49 = 0;
    }
    uint64_t v59 = v49;
    NSUInteger v49 = [v210 outputActions];
    int v68 = [(__CFString *)v49 lastObject];
    [v68 setObject:&__kCFBooleanTrue forVariant:57];

    goto LABEL_91;
  }
LABEL_92:
  if (*(void *)buf != 0x7FFFFFFFLL || *(void *)&buf[8])
  {
    double v69 = objc_msgSend(v52, "attributedValueForRange:");
    [(id)VOTSharedWorkspace addMisspellingsForString:v69];
    unsigned int v198 = [v69 hasAttribute:UIAccessibilityTokenMisspelled];
  }
  else if (HIBYTE(v222))
  {
    double v69 = sub_100051804(off_1001EA9E8, @"paste.operation.succeeded", 0);
    uint64_t v70 = [(__CFString *)v49 stringByAppendingFormat:@", %@", v69];

    unsigned int v198 = 0;
    NSUInteger v49 = (__CFString *)v70;
  }
  else
  {
    if (!(_BYTE)v222)
    {
      unsigned int v198 = 0;
      goto LABEL_98;
    }
    if ([(__CFString *)v208 isAXAttributedString]) {
      id v86 = [v210 addAttributedString:v195 withLanguage:v205];
    }
    else {
      id v173 = [v210 addString:v193 withLanguage:v205];
    }
    if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
    {
      id v199 = [v210 outputActions];
      id v174 = [v199 lastObject];
      LODWORD(v175) = 1.5;
      +[NSNumber numberWithFloat:v175];
      id v176 = v48;
      uint64_t v177 = v52;
      v179 = int v178 = v51;
      [v174 setObject:v179 forVariant:32];

      int v51 = v178;
      unsigned int v52 = v177;
      id v48 = v176;
    }
    if ((unint64_t)[(__CFString *)v49 length] <= 1)
    {

      NSUInteger v49 = 0;
    }
    double v69 = [v210 outputActions];
    uint64_t v180 = [v69 lastObject];
    [v180 setObject:&__kCFBooleanTrue forVariant:57];

    unsigned int v198 = 0;
  }

LABEL_98:
  if (v189
    && ([v52 doesHaveTraits:kAXSecureTextFieldTrait] & 1) == 0
    && !a7
    && [(NSMutableString *)*v196 isEqualToString:v208]
    && ![(__CFString *)v208 length]
    && CFAbsoluteTimeGetCurrent() - v207->_lastFirstResponderChangeTime > 0.25)
  {
    uint64_t v71 = +[VOTOutputManager outputManager];
    os_log_type_t v72 = +[VOSOutputEvent BoundaryEncountered];
    [v71 sendEvent:v72];
  }
  id v73 = VOTLogElement();
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG)) {
    sub_1001208C0();
  }

  if ([(__CFString *)v208 isAXAttributedString]
    && ([(__CFString *)v208 hasAttribute:UIAccessibilityTokenPlaceholder] & 1) != 0)
  {
    CFStringRef v74 = &stru_1001B7888;
  }
  else
  {
    CFStringRef v74 = v208;
  }
  [(NSMutableString *)*v196 setString:v74];
  if (v52)
  {
    uint64_t v75 = (uint64_t)[v52 selectedTextRange];
    uint64_t v77 = v76;
  }
  else
  {
    uint64_t v77 = 0;
    uint64_t v75 = 0x7FFFFFFFLL;
  }
  -[VOTElementManager _elementSelectionRangeDidChange:reason:](v207, "_elementSelectionRangeDidChange:reason:", v75, v77, 0);
  if ([(id)VOTSharedWorkspace brailleInputActive])
  {
    uint64_t v78 = +[AXSettings sharedInstance];
    unint64_t v79 = (unint64_t)[v78 voiceOverBrailleGesturesTypingFeedback];

    if ((v51 & 1) == 0 && (v79 | 2) == 2)
    {
      if ([(__CFString *)v49 length])
      {
        unsigned __int8 v80 = v52;
        int v81 = v51;
        id v82 = [(__CFString *)v49 characterAtIndex:(char *)[(__CFString *)v49 length] - 1];
        unsigned __int8 v83 = +[NSCharacterSet whitespaceCharacterSet];
        LODWORD(v82) = [v83 characterIsMember:v82];

        unsigned int v84 = [(__CFString *)v49 hasSuffix:@"\n"];
        if (v82)
        {
          id v85 = [v210 addString:@" " withLanguage:v205];
          int v51 = v81;
          unsigned int v52 = v80;
          id v48 = v203;
          goto LABEL_126;
        }
        int v51 = v81;
        unsigned int v52 = v80;
        id v48 = v203;
        if (!v84)
        {
LABEL_126:
          if (!v79)
          {

            NSUInteger v49 = &stru_1001B7888;
          }
          goto LABEL_128;
        }
      }
      else if (([(__CFString *)v49 hasSuffix:@"\n"] & 1) == 0)
      {
        goto LABEL_126;
      }
      id v87 = [v210 addString:@"\n"];
      goto LABEL_126;
    }
  }
LABEL_128:
  id v88 = VOTLogElement();
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG)) {
    sub_100120858();
  }

  if (v204)
  {
    unint64_t v89 = sub_100051804(off_1001EA9E8, @"selection.deleted", 0);
    id v90 = [v210 addString:v89];
  }
  if (![(__CFString *)v49 length]) {
    goto LABEL_178;
  }
  if ([(__CFString *)v208 isAXAttributedString])
  {
    id v91 = [(__CFString *)v208 copyWithZone:0];
    [v91 replaceString:v49];
    int v185 = v51;
    if (v51
      && (+[AXSettings sharedInstance],
          uint64_t v92 = objc_claimAutoreleasedReturnValue(),
          id v93 = [v92 voiceOverDeletionFeedback],
          v92,
          !v93))
    {
      uint64_t v163 = sub_100051D04(off_1001EA9E8, @"delete.text.prefix", 0, v205);
      uint64_t v95 = (uint64_t)[v163 rangeOfString:@"%@"];
      uint64_t v165 = v164;
      id v94 = [v91 length];
      BOOL v166 = AXCFormattedString();
      +[AXAttributedString axAttributedStringWithString:](AXAttributedString, "axAttributedStringWithString:", v166, v91);
      v215[0] = _NSConcreteStackBlock;
      v215[1] = 3221225472;
      v215[2] = sub_10009E560;
      v215[3] = &unk_1001B5BC0;
      uint64_t v217 = v95;
      uint64_t v218 = v165;
      id v167 = (id)objc_claimAutoreleasedReturnValue();
      id v216 = v167;
      [v91 enumerateAttributesUsingBlock:v215];
      id v168 = v167;

      NSUInteger v54 = v210;
      id v91 = v168;
      id v48 = v203;
      unsigned int v52 = v191;
    }
    else
    {
      id v94 = 0;
      uint64_t v95 = 0x7FFFFFFFFFFFFFFFLL;
    }
    id v96 = [v54 addAttributedString:v91 withLanguage:v205];
    if (v95 == 0x7FFFFFFFFFFFFFFFLL || v94 != (id)1) {
      goto LABEL_147;
    }
    goto LABEL_146;
  }
  id v91 = [(__CFString *)v49 copy];
  if (v51
    && (+[AXSettings sharedInstance],
        int v97 = objc_claimAutoreleasedReturnValue(),
        id v98 = [v97 voiceOverDeletionFeedback],
        v97,
        !v98))
  {
    sub_100051D04(off_1001EA9E8, @"delete.text.prefix", 0, v205);
    int v169 = v52;
    v171 = int v170 = v51;
    uint64_t v95 = (uint64_t)[v171 rangeOfString:@"%@"];
    id v99 = [v91 length];
    id v181 = v91;
    uint64_t v172 = AXCFormattedString();

    int v51 = v170;
    unsigned int v52 = v169;
    id v48 = v203;
    id v91 = (id)v172;
    NSUInteger v54 = v210;
  }
  else
  {
    id v99 = 0;
    uint64_t v95 = 0x7FFFFFFFFFFFFFFFLL;
  }
  id v100 = objc_msgSend(v54, "addString:withLanguage:", v91, v205, v181);
  if (v95 != 0x7FFFFFFFFFFFFFFFLL && v99 == (id)1)
  {
    int v185 = v51;
LABEL_146:
    uint64_t v101 = +[NSMutableIndexSet indexSet];
    objc_msgSend(v101, "addIndexesInRange:", v95, 1);
    uint64_t v102 = [v54 outputActions];
    uint64_t v103 = [v102 lastObject];
    [v103 setObject:v101 forVariant:29];

LABEL_147:
    int v51 = v185;
  }

  unint64_t v104 = [v54 outputActions];
  uint64_t v105 = [v104 lastObject];
  [v105 setObject:&__kCFBooleanTrue forVariant:57];

  if (v51)
  {
    uint64_t v106 = +[AXSettings sharedInstance];
    id v107 = [v106 voiceOverDeletionFeedback];

    if (v107 == (id)2)
    {
      uint64_t v108 = [v54 outputActions];
      [v108 enumerateObjectsUsingBlock:&stru_1001B5C00];
    }
    if ([(__CFString *)v49 length] == (id)1)
    {
      unint64_t v109 = v52;
      int v110 = v51;
      uint64_t v111 = +[AXLanguageManager sharedInstance];
      unsigned __int8 v112 = [v54 keyboardLanguageHint];
      char v113 = [v111 descriptionOfWord:v49 forLanguage:v112];

      if ([v113 length])
      {
        unsigned int v114 = +[AXAttributedString axAttributedStringWithString:v113];
        id v115 = [v54 keyboardLanguageHint];
        [v114 setAttribute:v115 forKey:UIAccessibilityTokenLanguage];

        id v116 = [v54 addString:v113];
      }

      int v51 = v110;
      unsigned int v52 = v109;
    }
  }
  if (![(__CFString *)v49 length])
  {
    CFAbsoluteTime v117 = [v54 lastAction];
    [v117 setObject:kCFBooleanTrue forVariant:28];
  }
  unsigned int v118 = [(id)VOTSharedWorkspace typingPitchChangeEnabled];
  if ((v51 | v187) == 1 && v118)
  {
    if (v51)
    {
      unsigned int v119 = +[AXSettings sharedInstance];
      id v120 = [v119 voiceOverDeletionFeedback];

      if (v120 == (id)1) {
        float v121 = 0.75;
      }
      else {
        float v121 = 1.0;
      }
    }
    else if (v187)
    {
      float v121 = 1.5;
    }
    else
    {
      float v121 = 1.0;
    }
    long long v213 = 0u;
    long long v214 = 0u;
    long long v211 = 0u;
    long long v212 = 0u;
    id v122 = [v54 outputActions];
    id v123 = [v122 countByEnumeratingWithState:&v211 objects:v225 count:16];
    if (v123)
    {
      id v125 = v123;
      uint64_t v126 = *(void *)v212;
      do
      {
        for (uint64_t i = 0; i != v125; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v212 != v126) {
            objc_enumerationMutation(v122);
          }
          double v128 = *(void **)(*((void *)&v211 + 1) + 8 * i);
          *(float *)&double v124 = v121;
          id v129 = +[NSNumber numberWithFloat:v124];
          [v128 setObject:v129 forVariant:32];
        }
        id v125 = [v122 countByEnumeratingWithState:&v211 objects:v225 count:16];
      }
      while (v125);
    }

    NSUInteger v53 = v207;
    NSUInteger v54 = v210;
  }
  if (!v198)
  {
LABEL_178:
    char v135 = 0;
    goto LABEL_179;
  }
  id v130 = sub_100051804(off_1001EA9E8, @"misspelled", 0);
  id v131 = [v54 addString:v130];

  if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
  {
    double v132 = [v54 lastAction];
    LODWORD(v133) = 1062836634;
    id v134 = +[NSNumber numberWithFloat:v133];
    [v132 setObject:v134 forVariant:32];
  }
  char v135 = 1;
LABEL_179:
  p_elementSelectionRangeBufferForValueChange = &v53->_elementSelectionRangeBufferForValueChange;
  if ([v210 containsActions]
    && ([v202 isEqualToString:kAXValueChangeTypeDictation] & 1) == 0)
  {
    if ([v200 hasPrefix:@"zh"])
    {
      if (AXUIKeyboardIsOOP())
      {
        double v137 = +[VOTElement inputUIApplication];
        id v138 = [v137 uiElement];
        [v138 updateCache:3004];

        BOOL v139 = +[VOTElement inputUIApplication];
        char v140 = [v139 typingCandidateElements];
      }
      else
      {
        id v141 = [v192 uiElement];
        [v141 updateCache:3004];

        char v140 = [v192 typingCandidateElements];
      }
      double v142 = [v140 firstObject];
      double v143 = [v142 label];

      if ([v143 length])
      {
        LODWORD(v144) = 1061158912;
        [v210 addPause:v144];
        id v145 = [v210 addString:v143 withLanguage:v200];
      }
    }
    id v146 = +[VOTBrailleManager manager];
    double v147 = [v146 brailleElement];
    unsigned __int8 v148 = [v52 isEqual:v147];

    if (v206 != 1 && (v148 & 1) == 0) {
      [v210 setGeneratesBraille:1];
    }
    double v149 = +[AXSettings sharedInstance];
    id v150 = [v149 voiceOverTouchBrailleDisplayInputMode];

    if (v150 == (id)2) {
      char v151 = 1;
    }
    else {
      char v151 = v135;
    }
    if (v150 == (id)2) {
      uint64_t v152 = 4;
    }
    else {
      uint64_t v152 = 2;
    }
    if (v151)
    {
      NSUInteger v53 = v207;
      double v153 = v210;
    }
    else
    {
      double v153 = v210;
      double v154 = objc_msgSend(v210, "outputActions", v152);
      double v155 = [v154 firstObject];
      uint64_t v156 = [v155 string];
      id v157 = [v156 length];

      if ((unint64_t)v157 <= 1) {
        uint64_t v152 = 4;
      }
      else {
        uint64_t v152 = 2;
      }
      NSUInteger v53 = v207;
    }
    [v153 setBrailleType:v152];
    if (v186)
    {
      uint64_t v158 = [v210 outputActions];
      [v158 enumerateObjectsUsingBlock:&stru_1001B5C20];
    }
    id v48 = v203;
    if (!a7) {
      [(VOTElementManager *)v53 sendRequest:v210];
    }
  }
  v159 = (void *)VOTSharedWorkspace;
  uint64_t v160 = [(VOTElementManager *)v53 _currentRotorSelection];
  [v159 refreshBraille:1 rotorSelection:v160];

  v53->_highlightedCharacterRange = (_NSRange)xmmword_10016E510;
  -[VOTElementManager _elementSelectionRangeDidChange:reason:](v53, "_elementSelectionRangeDidChange:reason:", v48, v209, 2);
  _NSRange *p_elementSelectionRangeBufferForValueChange = v53->_elementSelectionRangeBufferInternal;
}

- (void)_processSilentValueChange
{
  [(VOTElement *)self->_firstResponderElement updateValue];
  elementTypingBuffer = self->_elementTypingBuffer;
  uint64_t v4 = [(VOTElement *)self->_firstResponderElement value];
  id v5 = (void *)v4;
  if (v4) {
    CFStringRef v6 = (const __CFString *)v4;
  }
  else {
    CFStringRef v6 = &stru_1001B7888;
  }
  [(NSMutableString *)elementTypingBuffer setString:v6];

  [(VOTElementManager *)self _reupdateTextSelectionInformation];
  id v7 = (void *)VOTSharedWorkspace;
  id v8 = [(VOTElementManager *)self _currentRotorSelection];
  [v7 refreshBraille:1 rotorSelection:v8];
}

- (void)_handleElementMoved:(__AXUIElement *)a3
{
  id v23 = [(VOTElementManager *)self _currentElement];
  id v5 = +[AXUIElement uiElementWithAXElement:a3];
  CFStringRef v6 = +[VOTElement elementWithUIElement:v5];

  if ([v23 isEqual:v6])
  {
    double x = CGRectZero.origin.x;
    double y = CGRectZero.origin.y;
    double width = CGRectZero.size.width;
    double height = CGRectZero.size.height;
    NSUInteger location = self->_highlightedCharacterRange.location;
    if (location == 0x7FFFFFFF)
    {
      BOOL v12 = 0;
    }
    else
    {
      objc_msgSend(v23, "boundsForRange:", location, self->_highlightedCharacterRange.length);
      double v13 = v25.origin.x;
      double v14 = v25.origin.y;
      double v15 = v25.size.width;
      double v16 = v25.size.height;
      v26.origin.double x = CGRectZero.origin.x;
      v26.origin.double y = y;
      v26.size.double width = width;
      v26.size.double height = height;
      BOOL v17 = CGRectEqualToRect(v25, v26);
      if (!v17)
      {
        double height = v16;
        double width = v15;
        double y = v14;
        double x = v13;
      }
      BOOL v12 = !v17;
    }
    [v23 updateFrame];
    [v23 updateCenterPoint];
    if (!v12)
    {
      [v23 frame];
      double x = v18;
      double y = v19;
      double width = v20;
      double height = v21;
    }
    char v22 = +[VOTDisplayManager displayManager];
    objc_msgSend(v22, "setCursorFrame:", x, y, width, height);
  }
}

- (void)_handleKeyboardKeySelectedNotification:(id)a3
{
  id v4 = a3;
  id v20 = v4;
  if (!v4 || (objc_opt_class(), isKindOfClass = objc_opt_isKindOfClass(), id v4 = v20, (isKindOfClass & 1) != 0))
  {
    unsigned int v6 = [v4 isAXAttributedString]
       ? [v20 hasAttribute:UIAccessibilityTableIndexToken]
       : 0;
    if ([(id)VOTSharedWorkspace typingMode] != (id)2 || v6 != 0)
    {
      if (v20)
      {
        id v8 = [objc_allocWithZone((Class)VOTOutputRequest) init];
        unsigned int v9 = +[AXSettings sharedInstance];
        id v10 = [v9 voiceOverPhoneticsFeedback];

        if (v10 == (id)2)
        {
          id v11 = [(VOTElementManager *)self _phoneticStringForLetter:v20 language:0];
          BOOL v12 = v11;
          if (v11)
          {
            id v13 = v11;

            id v20 = v13;
          }
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          id v14 = [v8 addAttributedString:v20];
        }
        else {
          id v17 = [v8 addString:v20];
        }
        double v18 = sub_100051804(off_1001EA9E8, @"element.selected.text", 0);
        id v19 = [v8 addString:v18];

        [v8 setGeneratesBraille:1];
        [v8 setBrailleType:2];
        [(VOTElementManager *)self sendRequest:v8];
      }
      else
      {
        double v15 = +[VOTOutputManager outputManager];
        [v15 stopSpeakingAtBoundary:0];

        id v8 = +[VOTOutputManager outputManager];
        double v16 = +[VOSOutputEvent BoundaryEncountered];
        [v8 sendEvent:v16];
      }
    }
  }

  _objc_release_x1();
}

- (void)_appSuspensionSoundTimer
{
  if (*(double *)&qword_1001EB9C0 != 0.0)
  {
    unsigned int v3 = +[VOTOutputManager outputManager];
    id v4 = +[VOSOutputEvent ItemIsLoading];
    [v3 sendEvent:v4];

    appSuspensionSoundTimer = self->_appSuspensionSoundTimer;
    double v6 = *(double *)&qword_1001EB9C0;
    [(SCRCTargetSelectorTimer *)appSuspensionSoundTimer dispatchAfterDelay:v6];
  }
}

- (void)_handleAppSuspendAnimationProgressNotification:(id)a3
{
  id v8 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v8 floatValue];
    if (v4 == -1.0)
    {
      double v5 = *(double *)&qword_1001EB9C0;
      if (*(double *)&qword_1001EB9C0 > 0.0)
      {
        qword_1001EB9C0 = 0;
        -[VOTElementManager _handleScreenChange:sound:](self, "_handleScreenChange:sound:", 0, 0, v5);
      }
    }
    else
    {
      double v6 = v4;
      if (v6 > 1.0) {
        double v6 = 1.0;
      }
      if (v6 <= 0.0) {
        double v7 = 1.0;
      }
      else {
        double v7 = 1.0 - v6;
      }
      *(double *)&qword_1001EB9C0 = v7 * 0.5 + 0.01;
      if (([(SCRCTargetSelectorTimer *)self->_appSuspensionSoundTimer isCancelled] & 1) != 0
        || ([(SCRCTargetSelectorTimer *)self->_appSuspensionSoundTimer isPending] & 1) == 0)
      {
        [(VOTElementManager *)self _appSuspensionSoundTimer];
      }
    }
  }
}

- (void)__handleExpandedStatusChanged
{
  unsigned int v3 = [(VOTElementManager *)self _currentElement];
  id v4 = [v3 expandedStatus];
  [v3 updateExpandedStatus];
  id v5 = [v3 expandedStatus];
  if ([v3 doesHaveTraits:kAXWebContentTrait]
    && ([v3 isAlive] & 1) == 0
    && [v3 isValid])
  {
    double v6 = +[VOTElement systemWideElement];
    [v3 centerPoint];
    objc_msgSend(v6, "convertPoint:fromContextId:", objc_msgSend(v3, "windowContextId"), v7, v8);
    double v10 = v9;
    double v12 = v11;

    id v13 = -[VOTElement initWithPosition:]([VOTElement alloc], "initWithPosition:", v10, v12);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10009EE0C;
    v20[3] = &unk_1001B4AB0;
    id v21 = v3;
    id v14 = [(VOTElementManager *)self _nearestElementWithMatch:v20 startElement:v13];
    double v15 = v14;
    if (v14)
    {
      id v5 = [v14 expandedStatus];
      [(VOTElementManager *)self _setCurrentElement:v15];
    }
  }
  if (v4 != v5)
  {
    double v16 = [(id)VOTSharedWorkspace selectedLanguage];
    if (v5 == (id)1) {
      id v17 = @"expanded";
    }
    else {
      id v17 = @"collapsed";
    }
    double v18 = sub_100051D04(off_1001EA9E8, v17, 0, v16);
    id v19 = sub_10000ABF8(v18, 1, v16);
  }
}

- (void)_handleExpandedStatusChanged:(id)a3
{
}

- (void)_handleCurrentStateChanged:(id)a3
{
  id v4 = [(VOTElementManager *)self _currentElement];
  unsigned int v3 = [v4 uiElement];
  [v3 updateCache:2116];
}

- (void)_handleSortDirectionChanged:(id)a3
{
  id v4 = [(VOTElementManager *)self _currentElement];
  unsigned int v3 = [v4 uiElement];
  [v3 updateCache:2152];
}

- (void)_handleInvalidStatusChanged:(id)a3
{
  id v3 = a3;
  if (v3)
  {
    id v8 = v3;
    CFTypeID v4 = CFGetTypeID(v3);
    BOOL v5 = v4 == AXUIElementGetTypeID();
    id v3 = v8;
    if (v5)
    {
      id v6 = [objc_allocWithZone((Class)VOTElement) initWithAXElement:v8];
      id v7 = +[VOTOutputRequest createRequest];
      [v6 applyInvalidStatusToRequest:v7];
      [v7 setDoesNotInterrupt:1];
      [v7 send];

      id v3 = v8;
    }
  }
}

- (void)_handleInvalidTextInputNotification:(id)a3
{
  id v4 = +[VOTOutputManager outputManager];
  id v3 = +[VOSOutputEvent BoundaryEncountered];
  [v4 sendEvent:v3];
}

- (void)_reupdateTextSelectionInformation
{
  id v4 = [(VOTElement *)self->_firstResponderElement selectedTextRange];

  -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", v4, v3, 0);
}

- (void)_handleAnnouncementNotification:(id)a3
{
  id v7 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = [v7 objectForKeyedSubscript:kAXPidKey];
    id v5 = [v4 intValue];

    id v6 = [v7 objectForKeyedSubscript:kAXNotificationDataKey];
    if (!v6)
    {
      id v6 = [v7 objectForKeyedSubscript:kAXAnnouncementUserInfoKeyAnnouncement];
      if (!v6) {
        id v6 = v7;
      }
    }
    [(VOTElementManager *)self _handleAnnouncementWithData:v6 pid:v5];
  }
}

- (void)handleAnnouncement:(id)a3
{
}

- (void)_handleAnnouncement:(id)a3
{
}

- (void)_handleFireStewie
{
  stewieRangeTimer = self->_stewieRangeTimer;
  double stewieRepeatDuration = self->_stewieRepeatDuration;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10009F304;
  v4[3] = &unk_1001B33B8;
  v4[4] = self;
  [(AXDispatchTimer *)stewieRangeTimer afterDelay:v4 processBlock:stewieRepeatDuration];
}

- (void)_handleStewieAnnouncementInRange:(BOOL)a3 heading:(double)a4
{
  int v5 = a3;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  stewieRangeTimer = self->_stewieRangeTimer;
  if (Current - *(double *)&qword_1001EB9C8 <= 10.0)
  {
    if (!stewieRangeTimer)
    {
      double v10 = (AXDispatchTimer *)[objc_alloc((Class)AXDispatchTimer) init];
      double v11 = self->_stewieRangeTimer;
      self->_stewieRangeTimer = v10;

      [(VOTElementManager *)self _handleFireStewie];
    }
    self->_double stewieRepeatDuration = fabs(a4) / 180.0 * 1.3 + 0.2;
    if (byte_1001EB9D0 != v5 && v5)
    {
      double v12 = +[VOTOutputManager outputManager];
      [v12 playSoundFast:@"Sounds/Reorder.aiff"];
    }
    byte_1001EB9D0 = v5;
  }
  else
  {
    [(AXDispatchTimer *)stewieRangeTimer cancel];
    double v9 = self->_stewieRangeTimer;
    self->_stewieRangeTimer = 0;
  }
  qword_1001EB9C8 = CFAbsoluteTimeGetCurrent();
}

- (void)_handleAnnouncementWithData:(id)a3 pid:(int)a4
{
  id v4 = *(NSObject **)&a4;
  id v5 = a3;
  id v7 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v8 = v7;
  if (!v8 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && ![v8 length])
  {
    double v24 = VOTLogSpeech();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Stopping speaking because we got zero length announcement", buf, 2u);
    }

    id v14 = +[VOTOutputManager outputManager];
    [v14 stopSpeakingAtBoundary:0];
    goto LABEL_28;
  }
  if (v4)
  {
    double v9 = +[AXSettings sharedInstance];
    unsigned int v10 = [v9 liveRegionStatusEverSet];

    if (v10)
    {
      double v11 = self;
      id v12 = v5;
      int v13 = (int)v4;
      id v14 = [[VOTElement alloc] initApplicationWithPid:v4];
      double v15 = [v14 bundleIdentifier];
      double v16 = [v14 firstWebElement];
      id v17 = [v16 webAreaURL];

      double v18 = +[AXSettings sharedInstance];
      id v19 = [v18 liveRegionStatusForWebOrApp:v15];

      if (!v19 && v17)
      {
        id v20 = +[AXSettings sharedInstance];
        id v21 = [v17 host];
        id v19 = [v20 liveRegionStatusForWebOrApp:v21];
      }
      if (v19 && ([v19 BOOLValue] & 1) == 0)
      {
        uint64_t v28 = VOTLogCommon();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138478083;
          double v175 = v15;
          __int16 v176 = 2113;
          uint64_t v177 = v17;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Skipping live region updates for %{private}@ %{private}@", buf, 0x16u);
        }

        goto LABEL_27;
      }

      LODWORD(v4) = v13;
      id v5 = v12;
      self = v11;
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v14 = v8;
    double v15 = [v14 objectForKeyedSubscript:@"key"];
    if (([v15 isEqualToString:@"STEWIE_TARGET_IN_RANGE"] & 1) != 0
      || [v15 isEqualToString:@"STEWIE_TARGET_OUT_OF_RANGE"])
    {
      id v22 = [v15 isEqualToString:@"STEWIE_TARGET_IN_RANGE"];
      id v23 = [v14 objectForKeyedSubscript:@"heading"];
      [v23 doubleValue];
      -[VOTElementManager _handleStewieAnnouncementInRange:heading:](self, "_handleStewieAnnouncementInRange:heading:", v22);

LABEL_27:
      goto LABEL_28;
    }
    buf[0] = 0;
    CGRect v25 = [v14 objectForKeyedSubscript:@"AX_VOICEOVER_DISABLE_SCREEN_CURTAIN"];
    CGRect v26 = __UIAccessibilitySafeClass();

    id v27 = v26;
    LODWORD(v25) = [v27 BOOLValue];

    if (v25)
    {
      id v168 = _NSConcreteStackBlock;
      uint64_t v169 = 3221225472;
      int v170 = sub_1000A0EA4;
      NSUInteger v171 = &unk_1001B33B8;
      uint64_t v172 = self;
      AXPerformBlockOnMainThreadAfterDelay();
      goto LABEL_27;
    }
  }
  id v29 = +[AXSubsystemVoiceOver sharedInstance];
  unsigned __int8 v30 = [v29 ignoreLogging];

  if ((v30 & 1) == 0)
  {
    uint64_t v31 = +[AXSubsystemVoiceOver identifier];
    unsigned int v32 = AXLoggerForFacility();

    os_log_type_t v33 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v32, v33))
    {
      id v34 = self;
      id v35 = v5;
      int v36 = (int)v4;
      BOOL v37 = AXColorizeFormatLog();
      id v152 = v8;
      int v38 = _AXStringForArgs();
      id v4 = v32;
      if (os_log_type_enabled(v4, v33))
      {
        *(_DWORD *)long long buf = 138543362;
        double v175 = v38;
        _os_log_impl((void *)&_mh_execute_header, v4, v33, "%{public}@", buf, 0xCu);
      }

      LODWORD(v4) = v36;
      id v5 = v35;
      self = v34;
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v46 = +[AXSubsystemVoiceOver sharedInstance];
    unsigned __int8 v47 = [v46 ignoreLogging];

    if (v47) {
      goto LABEL_29;
    }
    id v48 = +[AXSubsystemVoiceOver identifier];
    id v14 = AXLoggerForFacility();

    os_log_type_t v49 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v14, v49))
    {
      uint64_t v50 = AXColorizeFormatLog();
      int v51 = _AXStringForArgs();
      if (os_log_type_enabled(v14, v49))
      {
        *(_DWORD *)long long buf = 138543362;
        double v175 = v51;
        _os_log_impl((void *)&_mh_execute_header, v14, v49, "%{public}@", buf, 0xCu);
      }
    }
    goto LABEL_28;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  self->_lastAnnouncementNotificationTime = Current;
  if ([(VOTElementManager *)self _shouldSuppressSpeechForPlayPause]) {
    goto LABEL_29;
  }
  if ([v8 isAXAttributedString])
  {
    BOOL v40 = [v8 attributeValueForKey:UIAccessibilityTokenPassthroughOnlyReordering];
    unsigned int v41 = [v40 BOOLValue];

    if (v41)
    {
      if ([(AXDragManager *)self->_dragManager isDragActive]) {
        goto LABEL_29;
      }
      CGFloat v42 = +[VOTOutputManager outputManager];
      CGFloat v43 = +[VOSOutputEvent DidReorderItem];
      [v42 sendEvent:v43];
    }
  }
  int v154 = (int)v4;
  if (objc_msgSend(v8, "isEqualToString:", kAXAnnouncementTypeReorderSound, v152))
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent DidReorderItem];
LABEL_54:
    unsigned int v52 = (void *)v45;
    [v44 sendEvent:v45];

LABEL_55:
    uint64_t v156 = 0;
    uint64_t v157 = 0;
    unsigned int v161 = 0;
    LODWORD(v153) = 0;
    id v14 = 0;
LABEL_56:
    HIDWORD(v153) = 0;
    goto LABEL_57;
  }
  if ([v8 isEqualToString:kAXAnnouncementCollaborationOccurredSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent CollaborationOccurred];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeScrollSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent DidScrollByPage];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeFolderOpeningSound])
  {
    uint64_t v103 = +[VOTOutputManager outputManager];
    uint64_t v104 = +[VOSOutputEvent FolderWillOpen];
LABEL_147:
    id v107 = (void *)v104;
    [v103 sendEvent:v104];

    uint64_t v156 = 0;
    uint64_t v157 = 0;
    unsigned int v161 = 0;
    uint64_t v153 = 0;
    id v14 = 0;
    self->_lastFolderOperationTime = Current;
    goto LABEL_57;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeFolderOpenedSound])
  {
    uint64_t v103 = +[VOTOutputManager outputManager];
    uint64_t v104 = +[VOSOutputEvent FolderDidOpen];
    goto LABEL_147;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeFolderClosedSound])
  {
    uint64_t v103 = +[VOTOutputManager outputManager];
    uint64_t v104 = +[VOSOutputEvent FolderDidClose];
    goto LABEL_147;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeKeyboardAppearSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent KeyboardAppeared];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeKeyboardDisappearSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent KeyboardDisappeared];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementAppSwitchBorderSound])
  {
    uint64_t v108 = +[VOTOutputManager outputManager];
    unint64_t v44 = v108;
    CFStringRef v109 = @"Sounds/AppSwitchBorder.aiff";
LABEL_154:
    [v108 playSoundFast:v109];
    goto LABEL_55;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeStopSpeech])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    [v44 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:&off_1001C5590];
    goto LABEL_55;
  }
  if ([v8 isEqualToString:kAXAnnouncementWebPageLoadingSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent ItemIsLoading];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementStackShotSound])
  {
    uint64_t v108 = +[VOTOutputManager outputManager];
    unint64_t v44 = v108;
    CFStringRef v109 = @"Sounds/StackShot.aiff";
    goto LABEL_154;
  }
  if ([v8 isEqualToString:kAXAnnouncementBorderHitSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent BoundaryEncountered];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementEnteredValidStateSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent DidEnterTargetArea];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementExitedValidStateSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent DidLeaveTargetArea];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeLockScreenTouchIDAuthenticationSuccessSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent TouchIDAuthenticated];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeLockScreenAuthenticationFailureSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent TouchIDFailed];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypePassthroughSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent DidBeginPassthrough];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeProgressMadeSound]
    || [v8 isEqualToString:kAXAnnouncementTypeSuccessSound])
  {
    uint64_t v108 = +[VOTOutputManager outputManager];
    unint64_t v44 = v108;
    CFStringRef v109 = @"Sounds/Reorder.aiff";
    goto LABEL_154;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeDockShowSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent DockDidAppear];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeDockHideSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent DockDidDisappear];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeTutorialSuccess])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent TutorialSuccess];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeTutorialMagicTapStart])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent TutorialMagicTapStart];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeTutorialMagicTapStop])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent TutorialMagicTapStop];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeDidActivateElementSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent DidActivateElement];
    goto LABEL_54;
  }
  if ([v8 isEqualToString:kAXAnnouncementTypeNoItemExistsSound])
  {
    unint64_t v44 = +[VOTOutputManager outputManager];
    uint64_t v45 = +[VOSOutputEvent NoItemExists];
    goto LABEL_54;
  }
  if (![v8 isAXAttributedString])
  {
    id v14 = +[VOTOutputRequest createRequest];
    id v120 = [v14 addString:v8];
    uint64_t v156 = 0;
    uint64_t v157 = 0;
    unsigned int v161 = 0;
    LODWORD(v153) = 0;
    goto LABEL_56;
  }
  id v110 = v8;
  uint64_t v111 = [v110 attributesAtIndex:0 effectiveRange:0];
  unsigned __int8 v112 = [v111 objectForKey:UIAccessibilityTokenAssistantString];
  HIDWORD(v156) = [v112 BOOLValue];

  char v113 = v111;
  unsigned int v114 = [v111 objectForKey:UIAccessibilityTokenAnnouncementPriority];

  if (v114)
  {
    id v115 = [v111 objectForKey:UIAccessibilityTokenAnnouncementPriority];
    uint64_t v116 = (int)[v115 intValue];
LABEL_193:
    uint64_t v160 = v116;

    goto LABEL_194;
  }
  uint64_t v149 = AXUIAccessibilitySpeechAttributeAnnouncementPriority;
  id v150 = [v111 objectForKey:AXUIAccessibilitySpeechAttributeAnnouncementPriority];

  if (v150)
  {
    id v115 = [v113 objectForKey:v149];
    if ([v115 isEqualToString:AXUIAccessibilityAnnouncementPriorityLow])
    {
      uint64_t v116 = 10;
    }
    else
    {
      unsigned int v151 = [v115 isEqualToString:AXUIAccessibilityAnnouncementPriorityHigh];
      uint64_t v116 = 5;
      if (v151) {
        uint64_t v116 = 1;
      }
    }
    goto LABEL_193;
  }
  uint64_t v160 = 5;
LABEL_194:
  CFAbsoluteTime v117 = [v113 objectForKey:UIAccessibilityTokenPassthroughOnlyPasteboardOp];
  HIDWORD(v153) = [v117 BOOLValue];

  if (v160 < 10)
  {
    int v163 = 0;
  }
  else
  {
    unsigned int v118 = +[VOTOutputManager outputManager];
    char v119 = [v118 isSpeaking] & (BYTE4(v156) ^ 1);

    int v163 = v119 & 1;
  }
  float v121 = [v113 objectForKey:UIAccessibilityTokenRequiresEditingStyleResolution];

  if (v121)
  {
    uint64_t v122 = [(VOTElementManager *)self _handleEditingStyleResolutionForAnnouncement:v110];

    id v110 = (id)v122;
  }
  id v123 = [v113 objectForKey:UIAccessibilityTokenHint];
  if ([v123 BOOLValue])
  {
    unsigned __int8 v124 = [(id)VOTSharedWorkspace hintsEnabled];

    if ((v124 & 1) == 0) {
      goto LABEL_225;
    }
  }
  else
  {
  }
  id v125 = [v113 objectForKey:UIAccessibilityTokenTextDeletion];
  if ([v125 BOOLValue])
  {
    unsigned int v126 = [(id)VOTSharedWorkspace typingPitchChangeEnabled];

    if (!v126) {
      goto LABEL_208;
    }
    id v125 = +[NSMutableDictionary dictionaryWithDictionary:v113];
    [v125 setObject:kCFBooleanTrue forKey:UIAccessibilityTokenLowPitch];
    [v110 setAttributes:v125];
  }

LABEL_208:
  id v127 = [v113 objectForKey:UIAccessibilityTokenLiveRegionAnnouncement];
  unsigned int v128 = [v127 BOOLValue];

  if (v128) {
    self->_lastLiveRegionUpdate = Current;
  }
  id v129 = [v113 objectForKey:UIAccessibilityTokenDictationAnnouncement];
  unsigned int v130 = [v129 BOOLValue];

  if (v130) {
    [(VOTElementManager *)self _processSilentValueChange];
  }
  id v131 = [v113 objectForKey:UIAccessibilityTokenTextOperationRelated];
  unsigned int v132 = [v131 BOOLValue];

  if (v132) {
    [(VOTElementManager *)self _reupdateTextSelectionInformation];
  }
  double v133 = [v113 objectForKey:UIAccessibilityTokenBrailleDisplayOnly];
  HIDWORD(v157) = [v133 BOOLValue];

  id v134 = [v113 objectForKey:UIAccessibilityTokenSystemNotificationAlert];
  unsigned int v161 = [v134 BOOLValue];

  char v135 = [v113 objectForKey:UIAccessibilityTokenAnnounceEvenIfSystemSleeping];
  LODWORD(v156) = [v135 BOOLValue];

  double v136 = [v113 objectForKey:UIAccessibilityTokenTextInsertion];
  unsigned int v137 = [v136 BOOLValue];

  if (v137)
  {
    id v138 = +[NSCharacterSet wordBreakCharacterSet];
    id v139 = [v110 rangeOfCharacterFromSet:v138];

    if (v139 == (id)0x7FFFFFFFFFFFFFFFLL
      && ([(VOTElementManager *)self typingFeedbackForKeyboardType] & 0xFFFFFFFFFFFFFFFDLL) == 1)
    {
      goto LABEL_225;
    }
    if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
    {
      char v140 = +[NSMutableDictionary dictionaryWithDictionary:v113];
      [v140 setObject:kCFBooleanTrue forKey:UIAccessibilityTokenHighPitch];
      [v110 setAttributes:v140];
    }
    CFAbsoluteTime v141 = CFAbsoluteTimeGetCurrent();
    int v142 = v163;
    if (v141 - self->_lastTextInsertionAnnouncementTime < 0.25) {
      int v142 = 1;
    }
    int v163 = v142;
    self->_lastTextInsertionAnnouncementTime = Current;
  }
  double v143 = [v113 objectForKey:UIAccessibilityTokenSystemAnnouncement];
  if ([v143 BOOLValue] && -[VOTElementManager isReadingAll](self, "isReadingAll"))
  {
    double v144 = +[VOTOutputManager outputManager];
    unsigned int v145 = [v144 isPaused];

    if (!v145)
    {
LABEL_225:

      id v14 = 0;
      goto LABEL_28;
    }
  }
  else
  {
  }
  id v14 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v146 = [v14 addAttributedString:v110];
  if ([v110 hasAttribute:UIAccessibilityTokenVeryPoliteAnnouncement])
  {
    double v147 = +[VOTOutputManager outputManager];
    unsigned int v148 = [v147 isSpeaking];

    if (((v148 ^ 1 | v128) & 1) == 0)
    {

      id v14 = 0;
    }
    int v163 = 1;
  }
  if (([v110 hasAttribute:UIAccessibilityTokenPoliteAnnouncement] & 1) != 0
    || ([v110 hasAttribute:AXUIAccessibilitySpeechAttributeQueueAnnouncement] & 1) != 0)
  {
    int v163 = 1;
  }
  else if (v160 == 1)
  {
    [v14 setCannotBeInterrupted:1];
  }
  LODWORD(v153) = [v110 hasAttribute:UIAccessibilityTokenSuppressBrailleOutput];

  LOBYTE(v157) = v163 != 0;
LABEL_57:
  unsigned int v53 = [(id)VOTSharedWorkspace useRingerSwitchForNotificationOutput];
  unsigned __int8 v162 = [(id)VOTSharedWorkspace bannerNotificationsOutput];
  unint64_t v54 = (unint64_t)[(id)VOTSharedWorkspace bannerNotificationsOutput];
  unsigned __int8 v158 = [(id)VOTSharedWorkspace bannerNotificationsOutput];
  uint64_t v55 = +[VOTWorkspace sharedWorkspace];
  unsigned int v56 = v53;
  if ([v55 currentCallState])
  {
    unsigned int v57 = +[VOTWorkspace sharedWorkspace];
    BOOL v58 = [v57 currentCallState] != 2;
  }
  else
  {
    BOOL v58 = 0;
  }

  uint64_t v59 = +[VOTElement springBoardApplication];
  unsigned int v155 = [v59 isSystemSleeping];

  id v60 = +[VOTElement springBoardApplication];
  unsigned int v61 = [v60 isSystemLocked];

  unsigned int v62 = +[VOTElement springBoardApplication];
  unsigned int v63 = 1;
  if ([v62 isVoiceControlRunning])
  {
    unsigned int v65 = v161;
  }
  else
  {
    char v64 = v58 & v161;
    unsigned int v65 = v161;
    if ((v64 & 1) == 0
      && ([(id)VOTSharedWorkspace tapAndHoldMode] & v161 & 1) == 0
      && ((v161 & v56) != 1 || ([(id)VOTSharedWorkspace isRingerSwitchSilent] & 1) == 0)
      && (v161 & v155 ^ 1 | v156) == 1)
    {
      unsigned int v66 = (v162 & 2) != 0 ? 0 : v161;
      unsigned int v63 = (v158 & 0x10) != 0 ? 0 : v66;
      if ((v63 & 1) == 0 && ((v61 ^ 1) & 1) == 0)
      {
        double v67 = +[VOTElement systemAppApplication];
        unsigned int v63 = [v67 isAlarmRinging];
      }
    }
  }

  if ((v162 & 2) != 0) {
    int v68 = HIDWORD(v157);
  }
  else {
    int v68 = 1;
  }
  uint64_t v69 = (v54 >> 6) & 1;
  int v70 = v65 ^ 1;
  if ((v158 & 0x10) != 0) {
    int v71 = v65 ^ 1;
  }
  else {
    int v71 = 1;
  }
  if ((v158 & 0x10) != 0) {
    unsigned int v72 = 0;
  }
  else {
    unsigned int v72 = v65;
  }
  if (v71) {
    int v68 = HIDWORD(v157);
  }
  int v159 = v68;
  unsigned int v73 = v65;
  if (v65) {
    char v74 = ((v162 & 2) >> 1) | v157;
  }
  else {
    char v74 = v157;
  }
  if ((v73 & v69) == 1)
  {
    uint64_t v75 = +[VOTOutputManager outputManager];
    uint64_t v76 = +[VOSOutputEvent NotificationDidAppear];
    [v75 sendEvent:v76];
  }
  [v14 setOriginationType:1];
  if ((v162 & 2) != 0) {
    int v77 = v70;
  }
  else {
    int v77 = 1;
  }
  if (v77 == 1)
  {
    if (v74)
    {
      [v14 setDoesNotInterrupt:1];
      uint64_t v78 = +[VOTOutputManager outputManager];
      unsigned int v79 = [v78 isPaused];

      if (!v79) {
        goto LABEL_103;
      }
    }
    else
    {
      *(_WORD *)&self->_flags.isReadingAll = 0;
    }
    unsigned __int8 v80 = VOTLogSpeech();
    if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "Speech paused or not queued, so resetting read all", buf, 2u);
    }

    *(_WORD *)&self->_flags.isReadingAll = 0;
  }
LABEL_103:
  if (v14)
  {
    if (((HIDWORD(v156) | v63 ^ 1) & 1) == 0)
    {
      long long v166 = 0u;
      long long v167 = 0u;
      long long v164 = 0u;
      long long v165 = 0u;
      id v98 = self->_currentApplications;
      id v99 = [(NSArray *)v98 countByEnumeratingWithState:&v164 objects:v173 count:16];
      if (v99)
      {
        id v100 = v99;
        uint64_t v101 = *(void *)v165;
        do
        {
          for (uint64_t i = 0; i != v100; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v165 != v101) {
              objc_enumerationMutation(v98);
            }
            [*(id *)(*((void *)&v164 + 1) + 8 * i) notifyAnnouncementFinishedWithString:v8 didFinishSuccessfully:0];
          }
          id v100 = [(NSArray *)v98 countByEnumeratingWithState:&v164 objects:v173 count:16];
        }
        while (v100);
      }

      goto LABEL_28;
    }
    int v81 = v72 | v153;
    if (self->_readAllOutputRequest)
    {
      id v82 = +[VOTOutputManager outputManager];
      unsigned __int8 v83 = [v82 isPaused];

      if ((v83 & 1) == 0)
      {
        unsigned int v84 = +[VOTOutputManager outputManager];
        [v84 holdCurrentRequest];

        LODWORD(v85) = 0.5;
        [v14 addPause:v85];
        id v86 = [v14 outputActions];
        id v87 = [v86 count];

        if ((unint64_t)v87 >= 2)
        {
          id v88 = [v14 outputActions];
          [v88 exchangeObjectAtIndex:1 withObjectAtIndex:0];
        }
      }
    }
    [v14 setGeneratesBraille:v81 ^ 1u];
    [v14 setBrailleType:2];
    [v14 setCompletionDelegate:self];
    if (v159) {
      [v14 setLimitToComponentType:3];
    }
    if (HIDWORD(v153))
    {
      unint64_t v89 = [v14 outputActions];
      [v89 enumerateObjectsUsingBlock:&stru_1001B5C40];
    }
    if (self->_announcementRequest)
    {
      [(VOTElementManager *)self _outputRequestFinished:"_outputRequestFinished:"];
      [(VOTOutputRequest *)self->_announcementRequest setCompletionDelegate:0];
      announcementRequest = self->_announcementRequest;
      self->_announcementRequest = 0;
    }
    objc_storeStrong((id *)&self->_announcementRequest, v14);
    self->_announcementPid = v154;
    objc_storeStrong((id *)&self->_announcementOriginalString, v5);
    id v91 = [(VOTElementManager *)self _currentElement];
    unint64_t v92 = (unint64_t)[v91 traits];
    unint64_t v93 = kAXIsEditingTrait & v92;

    if (v93)
    {
      id v94 = +[VOTBrailleManager manager];
      uint64_t v95 = [(VOTElementManager *)self _currentElement];
      id v96 = [(VOTElementManager *)self _currentRotorSelection];
      [v94 setBrailleElement:v95 resetBrailleCursor:0 rotorSelection:v96];
    }
    if ((v162 & 2) != 0) {
      char v97 = v70;
    }
    else {
      char v97 = 1;
    }
    if (v97 & 1) != 0 || ((v156 ^ 1) & 1) != 0 || ((v155 ^ 1))
    {
      if (v161)
      {
        [(VOTElementManager *)self _systemNotificationInProgressForRequest:v14];
        if (((v162 & 2) != 0) | v157 & 1) {
          [v14 setDoesNotInterrupt:1];
        }
        else {
          [v14 setInterruptsEverything:1];
        }
        uint64_t v105 = +[VOTElement springBoardApplication];
        if ([v105 isSystemLocked])
        {
          unsigned __int8 v106 = [(id)VOTSharedWorkspace isRingerSwitchSilent];

          if (v106) {
            goto LABEL_28;
          }
        }
        else
        {
        }
      }
      [(VOTElementManager *)self sendRequest:v14];
      goto LABEL_28;
    }
    [(VOTElementManager *)self setDelayedNotificationAnnouncementRequest:v14];
    AXPerformBlockOnMainThreadAfterDelay();
  }
LABEL_28:

LABEL_29:
}

- (id)_handleEditingStyleResolutionForAnnouncement:(id)a3
{
  firstResponderElement = self->_firstResponderElement;
  id v4 = a3;
  id v5 = [(VOTElement *)firstResponderElement resolvedEditingStyles];
  id v6 = [v4 coalescedAttributes];

  id v7 = [v6 objectForKey:UIAccessibilityTokenRequiresEditingStyleResolution];

  if ([v7 isEqualToString:UIAccessibilityTokenBold])
  {
    id v8 = off_1001EA9E8;
    double v9 = [v5 objectForKeyedSubscript:UIAccessibilityTokenBold];
    unsigned int v10 = [v9 BOOLValue];
    CFStringRef v11 = @"bold.off";
    CFStringRef v12 = @"bold.on";
LABEL_7:
    if (v10) {
      int v13 = (__CFString *)v12;
    }
    else {
      int v13 = (__CFString *)v11;
    }
    id v14 = sub_100051804(v8, v13, 0);
    goto LABEL_11;
  }
  if ([v7 isEqualToString:UIAccessibilityTokenUnderline])
  {
    id v8 = off_1001EA9E8;
    double v9 = [v5 objectForKeyedSubscript:UIAccessibilityTokenUnderline];
    unsigned int v10 = [v9 BOOLValue];
    CFStringRef v11 = @"underline.off";
    CFStringRef v12 = @"underline.on";
    goto LABEL_7;
  }
  if ([v7 isEqualToString:UIAccessibilityTokenItalic])
  {
    id v8 = off_1001EA9E8;
    double v9 = [v5 objectForKeyedSubscript:UIAccessibilityTokenItalic];
    unsigned int v10 = [v9 BOOLValue];
    CFStringRef v11 = @"italic.off";
    CFStringRef v12 = @"italic.on";
    goto LABEL_7;
  }
  if ([v7 isEqualToString:UIAccessibilityTokenFontSize])
  {
    double v9 = sub_100051804(off_1001EA9E8, @"font.size", 0);
    id v17 = [v5 objectForKeyedSubscript:UIAccessibilityTokenFontSize];
    id v14 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v9, [v17 intValue]);

LABEL_11:
    goto LABEL_12;
  }
  id v14 = 0;
LABEL_12:
  double v15 = +[AXAttributedString axAttributedStringWithString:v14];

  return v15;
}

- (void)_systemNotificationInProgressForRequest:(id)a3
{
  self->_BOOL systemNotificationInProgress = 1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000A126C;
  v3[3] = &unk_1001B5A20;
  v3[4] = self;
  [a3 setCompletionBlock:v3];
}

- (id)_retrieveDefaultElementForPosition:(CGPoint)a3
{
  objc_msgSend((id)VOTSharedWorkspace, "convertDevicePointToZoomedPoint:", a3.x, a3.y);
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initApplicationWithPosition:", v3, v5);
  id v8 = +[AXSubsystemVoiceOver sharedInstance];
  unsigned __int8 v9 = [v8 ignoreLogging];

  if ((v9 & 1) == 0)
  {
    unsigned int v10 = +[AXSubsystemVoiceOver identifier];
    CFStringRef v11 = AXLoggerForFacility();

    os_log_type_t v12 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v11, v12))
    {
      int v13 = AXColorizeFormatLog();
      v29.double x = v4;
      v29.double y = v6;
      NSStringFromPoint(v29);
      v25 = id v24 = v7;
      id v14 = _AXStringForArgs();

      if (os_log_type_enabled(v11, v12))
      {
        *(_DWORD *)long long buf = 138543362;
        id v27 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}@", buf, 0xCu);
      }
    }
  }
  double v15 = objc_msgSend(v7, "firstResponderElementForFocus", v24, v25);
  if (!v15)
  {
    double v15 = [v7 firstElementInApplication];
  }
  double v16 = +[AXSubsystemVoiceOver sharedInstance];
  unsigned __int8 v17 = [v16 ignoreLogging];

  if ((v17 & 1) == 0)
  {
    double v18 = +[AXSubsystemVoiceOver identifier];
    id v19 = AXLoggerForFacility();

    os_log_type_t v20 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v19, v20))
    {
      id v21 = AXColorizeFormatLog();
      id v22 = _AXStringForArgs();
      if (os_log_type_enabled(v19, v20))
      {
        *(_DWORD *)long long buf = 138543362;
        id v27 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}@", buf, 0xCu);
      }
    }
  }

  return v15;
}

- (void)_handleAlertReceived:(id)a3 forApplication:(__AXUIElement *)a4
{
  id v6 = a3;
  id v7 = +[AXUIElement uiElementWithAXElement:a4];
  id v8 = +[VOTElement elementWithUIElement:v7];

  unsigned __int8 v9 = +[VOTCommandHelper commandHelper];
  [v9 setHelpEnabled:0];

  [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer cancel];
  [(VOTElementManager *)self _resetItemChooserCache];
  [(VOTElementManager *)self _resetDirectInteractionCache];
  unsigned int v10 = +[NSNotificationCenter defaultCenter];
  [v10 postNotificationName:@"UpdateElement" object:0];

  if (v6 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    uint64_t v31 = +[AXSubsystemVoiceOver sharedInstance];
    unsigned __int8 v32 = [v31 ignoreLogging];

    if ((v32 & 1) == 0)
    {
      os_log_type_t v33 = +[AXSubsystemVoiceOver identifier];
      id v22 = AXLoggerForFacility();

      os_log_type_t v34 = AXOSLogLevelFromAXLogLevel();
      if (!os_log_type_enabled(v22, v34))
      {
LABEL_44:

        goto LABEL_45;
      }
      id v23 = AXColorizeFormatLog();
      objc_opt_class();
      CGRect v25 = _AXStringForArgs();
      if (os_log_type_enabled(v22, v34))
      {
        *(_DWORD *)long long buf = 138543362;
        unsigned int v62 = v25;
        _os_log_impl((void *)&_mh_execute_header, v22, v34, "%{public}@", buf, 0xCu);
      }
LABEL_43:

      goto LABEL_44;
    }
  }
  else
  {
    CFStringRef v11 = +[VOTElement springBoardApplication];
    unsigned __int8 v12 = [v11 isSystemSleeping];

    int v13 = +[VOTElement springBoardApplication];
    unsigned __int8 v14 = [v13 isQuietModeEnabled];

    if ((v14 & 1) == 0 && (v12 & 1) == 0)
    {
      double v15 = +[VOTElement springBoardApplication];
      unsigned int v16 = [v15 isSystemLocked];

      double Current = CFAbsoluteTimeGetCurrent();
      if (![(id)VOTSharedWorkspace isRingerSwitchSilent]
        || !v16
        || ([(id)VOTSharedWorkspace lastLockButtonPress], Current - v18 <= 1.5)
        || ([(id)VOTSharedWorkspace lastHomeButtonPress], Current - v19 <= 1.5))
      {
        if (CFAbsoluteTimeGetCurrent() - self->_lastAlertTime >= 1.25)
        {
          os_log_type_t v20 = +[VOTOutputManager outputManager];
          id v21 = +[VOSOutputEvent AlertDidAppear];
          [v20 sendEvent:v21];

          id v22 = [objc_allocWithZone((Class)VOTOutputRequest) init];
          [v22 setCannotBeInterrupted:1];
          [v22 setInterruptsEverything:1];
          id v23 = [(id)VOTSharedWorkspace selectedLanguage];
          id v24 = sub_100051D04(off_1001EA9E8, @"alert.message", 0, v23);
          CGRect v25 = [v22 addString:v24 withLanguage:v23];

          [v25 enumerateObjectsUsingBlock:&stru_1001B5C60];
          CGRect v26 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
          id v27 = [v6 stringByTrimmingCharactersInSet:v26];
          id v28 = [v27 length];

          if (v28) {
            id v29 = [v22 addString:v6];
          }
          BOOL v30 = ![v6 isAXAttributedString]
             || ([v6 hasAttribute:UIAccessibilityTokenSuppressBrailleOutput] & 1) == 0;
          [v22 setGeneratesBraille:v30];
          [v22 setBrailleType:2];
          [(VOTElementManager *)self sendRequest:v22];
          if (!self->_elementBeforeAlert)
          {
            id v35 = [(VOTElementManager *)self _currentElement];
            elementBeforeAlert = self->_elementBeforeAlert;
            self->_elementBeforeAlert = v35;
          }
          +[NSThread sleepForTimeInterval:0.05];
          BOOL v37 = self->_elementBeforeAlert;
          if (v37)
          {
            int v38 = [(VOTElement *)v37 application];
            uint64_t v39 = v38;
            if (v38)
            {
              [v38 frame];
              CGFloat x = v63.origin.x;
              CGFloat y = v63.origin.y;
              CGFloat width = v63.size.width;
              CGFloat height = v63.size.height;
              double MidX = CGRectGetMidX(v63);
              v64.origin.CGFloat x = x;
              v64.origin.CGFloat y = y;
              v64.size.CGFloat width = width;
              v64.size.CGFloat height = height;
              uint64_t v45 = -[VOTElementManager _retrieveDefaultElementForPosition:](self, "_retrieveDefaultElementForPosition:", MidX, CGRectGetMidY(v64));
            }
            else
            {
              uint64_t v45 = 0;
            }

            if (!v8)
            {
LABEL_30:
              if (!v45)
              {
                unsigned __int8 v47 = +[VOTElement systemAppApplication];
                [v47 centerPointOfScreen];
                uint64_t v45 = -[VOTElementManager _retrieveDefaultElementForPosition:](self, "_retrieveDefaultElementForPosition:");

                if (!v45)
                {
                  uint64_t v45 = -[VOTElementManager _retrieveDefaultElementForPosition:](self, "_retrieveDefaultElementForPosition:", *(double *)&qword_1001EBE60, *(double *)algn_1001EBE68);
                  if (!v45) {
                    goto LABEL_42;
                  }
                }
              }
              BOOL v58 = v25;
              [(VOTElementManager *)self _cancelPreviousElementSearch];
              [(VOTElementFetcher *)self->_fetchManager forceUpdate];
              [(VOTElementFetcher *)self->_fetchManager updateCacheWithElement:v45];
              [(VOTElementManager *)self _setCurrentElement:v45];
              uint64_t v48 = [v45 application];
              os_log_type_t v49 = (void *)v48;
              if (v48)
              {
                currentApplications = self->_currentApplications;
                uint64_t v60 = v48;
                int v51 = +[NSArray arrayWithObjects:&v60 count:1];
                LODWORD(currentApplications) = [(NSArray *)currentApplications isEqualToArray:v51];

                if (currentApplications)
                {
                  uint64_t v59 = v49;
                  unsigned int v52 = +[NSArray arrayWithObjects:&v59 count:1];
                  unsigned int v53 = self->_currentApplications;
                  self->_currentApplications = v52;
                }
                if (!v28) {
                  goto LABEL_40;
                }
              }
              else
              {
                unsigned int v57 = v45;
                _AXAssert();
                if (!v28) {
                  goto LABEL_40;
                }
              }
              if (!objc_msgSend(v45, "doesHaveTraits:", kAXIsEditingTrait, v57))
              {
LABEL_41:
                CGRect v25 = v58;
                AXPerformBlockOnMainThreadAfterDelay();

LABEL_42:
                self->_lastAlertTime = CFAbsoluteTimeGetCurrent();
                goto LABEL_43;
              }
LABEL_40:
              unint64_t v54 = [objc_allocWithZone((Class)VOTOutputRequest) init];

              [(VOTElementManager *)self _addDescription:v45 toRequest:v54 withOptions:1];
              [(VOTElementManager *)self sendRequest:v54];
              [(VOTElementManager *)self setFirstResponder:v45];
              id v55 = [v45 selectedTextRange];
              -[VOTElementManager _elementSelectionRangeDidChange:reason:](self, "_elementSelectionRangeDidChange:reason:", v55, v56, 0);
              id v22 = v54;
              goto LABEL_41;
            }
          }
          else
          {
            uint64_t v45 = 0;
            if (!v8) {
              goto LABEL_30;
            }
          }
          uint64_t v46 = [v8 firstElementInApplicationForFocus];

          uint64_t v45 = (void *)v46;
          goto LABEL_30;
        }
      }
    }
  }
LABEL_45:
}

- (void)_updateDisplayWithCurrentElement
{
  id v3 = +[VOTDisplayManager displayManager];
  [v3 setCursorFrameForElement:self->_currentElement];
}

- (void)_updateMLElementAutorefresh
{
  unsigned __int8 v2 = [(id)VOTSharedWorkspace automaticAccessibilityEnabled];
  id v3 = AXMediaLogMLElement();
  CGFloat v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Turning on auto refresh", buf, 2u);
    }

    double v5 = +[VOTElement systemAppApplication];
    id v6 = [v5 focusedApplications];

    id v7 = objc_msgSend(v6, "ax_mappedArrayUsingBlock:", &stru_1001B5CA0);
    +[AXUIMLElement clearCachesForAppsExcluding:v7];

    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    CGFloat v4 = v6;
    id v8 = [v4 countByEnumeratingWithState:&v22 objects:v30 count:16];
    if (v8)
    {
      id v10 = v8;
      uint64_t v11 = *(void *)v23;
      *(void *)&long long v9 = 138412546;
      long long v21 = v9;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v23 != v11) {
            objc_enumerationMutation(v4);
          }
          int v13 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          unsigned __int8 v14 = objc_msgSend(v13, "bundleIdentifier", v21, (void)v22);
          if ([v14 isEqualToString:@"com.apple.springboard"])
          {
            id v15 = [v4 count];

            if ((unint64_t)v15 > 1) {
              continue;
            }
          }
          else
          {
          }
          unsigned int v16 = [v13 bundleIdentifier];
          uint64_t v17 = AXProcessWantsMLElementsForBundle();

          double v18 = AXMediaLogMLElement();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = v21;
            id v27 = v13;
            __int16 v28 = 1024;
            int v29 = v17;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "For app: %@ -> %d", buf, 0x12u);
          }

          double v19 = [v13 uiElement];
          +[AXUIMLElement setAutoRefresh:v17 forApp:v19];

          if (v17) {
            uint64_t v20 = 2;
          }
          else {
            uint64_t v20 = 0;
          }
          [v13 setTemporaryVoiceOverStatus:v20];
        }
        id v10 = [v4 countByEnumeratingWithState:&v22 objects:v30 count:16];
      }
      while (v10);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    sub_100120A00();
  }
}

- (BOOL)_shouldIgnoreElementMovementNotification:(id)a3
{
  return 0;
}

- (void)_updateForContinuityStateChange
{
  id v3 = +[AXSpringBoardServer server];
  -[VOTElementManager setIsContinuitySessionActive:](self, "setIsContinuitySessionActive:", [v3 isContinuitySessionActive]);

  BOOL v4 = [(VOTElementManager *)self isContinuitySessionActive];
  double v5 = +[AXEventTapManager sharedManager];
  [v5 setIgnoreEventsForContinuitySession:v4];

  id v6 = VOTLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    unsigned int v7 = [(VOTElementManager *)self isContinuitySessionActive];
    CFStringRef v8 = @"NO";
    if (v7) {
      CFStringRef v8 = @"YES";
    }
    int v9 = 136315394;
    id v10 = "-[VOTElementManager _updateForContinuityStateChange]";
    __int16 v11 = 2112;
    CFStringRef v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s isContinuitySessionActive: %@", (uint8_t *)&v9, 0x16u);
  }
}

- (BOOL)_shouldIgnoreNotificationForContinuityDisplay:(id)a3 withElement:(__AXUIElement *)a4
{
  id v6 = a3;
  if (![(VOTElementManager *)self isContinuitySessionActive]) {
    goto LABEL_5;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_5;
  }
  unsigned int v7 = +[AXUIElement uiElementWithAXElement:a4];
  CFStringRef v8 = +[VOTElement elementWithUIElement:v7];

  int v9 = [v6 objectForKey:kAXPidKey];
  LODWORD(v7) = [v9 intValue];

  id v10 = +[VOTElement springBoardApplication];
  if (v7 != [v10 pid])
  {

    goto LABEL_8;
  }
  unsigned int v11 = [v8 pid];
  CFStringRef v12 = +[VOTElement springBoardApplication];
  unsigned int v13 = [v12 pid];

  if (v11 != v13)
  {
LABEL_8:
    BOOL v14 = 1;
    goto LABEL_6;
  }
LABEL_5:
  BOOL v14 = 0;
LABEL_6:

  return v14;
}

- (void)_handleScreenChange:(id)a3 sound:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  CFStringRef v8 = VOTLogLayoutChange();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_100120A34((uint64_t)v6);
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0
    || ![(VOTElementManager *)self _shouldIgnoreElementMovementNotification:v6])
  {
    double Current = CFAbsoluteTimeGetCurrent();
    id v10 = +[VOTBrailleManager manager];
    [v10 setPanEnabled:1];

    if ((AXDeviceIsAudioAccessory() & 1) == 0)
    {
      unsigned int v11 = +[VOTWorkspace sharedWorkspace];
      CFStringRef v12 = [v11 visionEngine];
      [v12 purgeCache];
    }
    [(VOTElementManager *)self _updateMLElementAutorefresh];
    [(SCRCTargetSelectorTimer *)self->_updateLayoutTimer cancel];
    [(VOTElementManager *)self setCachedSideAppDividerElement:0];
    [(VOTElementManager *)self setDidCacheSideAppDividerElement:0];
    [(VOTElementManager *)self setCachedAdditionalElementCommunities:0];
    [(VOTElementManager *)self setLastTrackingUpdateAppsFailureApplication:0];
    [(VOTElementManager *)self setLastTrackingUpdateAppsFailureTime:-3061152000.0];
    [(AXDispatchTimer *)self->_stewieRangeTimer cancel];
    unsigned int v13 = +[VOTCommandHelper commandHelper];
    [v13 setHelpEnabled:0];

    if ([(VOTElementManager *)self _notificationData:v6 containsToken:kAXAnnouncementTypeStopSpeech])
    {
      BOOL v14 = +[VOTOutputManager outputManager];
      [v14 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

      uint64_t v15 = [(VOTElementManager *)self _notificationData:v6 consumingToken:kAXAnnouncementTypeStopSpeech];

      id v6 = (id)v15;
    }
    if ([(VOTElementManager *)self _notificationData:v6 containsToken:kAXPerformElementUpdateImmediatelyToken])
    {
      float v16 = 0.005;
    }
    else
    {
      float v16 = 0.75;
    }
    uint64_t v17 = +[NSNotificationCenter defaultCenter];
    [v17 postNotificationName:@"UpdateElement" object:0];

    id v18 = objc_allocWithZone((Class)VOTElement);
    double v19 = +[VOTElement systemAppApplication];
    [v19 centerPointOfScreen];
    id v20 = objc_msgSend(v18, "initApplicationWithPosition:");

    if (Current - self->_lastAlertTime < 1.25
      || ([(VOTElementManager *)self lastValueChangeTime], Current - v21 < 0.75))
    {
      long long v22 = [v20 firstElementInApplication];
      long long v23 = [(VOTElementManager *)self _currentElement];
      if (([v23 isEqual:v22] & 1) != 0
        || ([v23 updateTraits], objc_msgSend(v23, "isValid"))
        && ([v23 doesHaveTraits:kAXKeyboardKeyTrait | kAXIsEditingTrait] & 1) != 0)
      {

        goto LABEL_49;
      }
    }
    unsigned int v24 = [(VOTElementManager *)self _notificationData:v6 containsToken:kAXScreenChangePopup];
    [(id)VOTSharedWorkspace tapAndHoldMode];
    id WeakRetained = objc_loadWeakRetained((id *)&self->_updateDelegate);
    unsigned __int8 v26 = [WeakRetained directInteractionGestureInProgress];

    if (v26)
    {
LABEL_50:

      goto LABEL_51;
    }
    [(SCRCTargetSelectorTimer *)self->_updateAppFromTimer cancel];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v22 = [v6 objectForKey:kAXScreenChangeSourceIdentifier];
    }
    else
    {
      long long v22 = 0;
    }
    if (![(NSNumber *)self->_lastScreenChangeSourceIdentifier isEqual:v22]
      || Current - self->_lastScreenChangeNotificationTime >= 2.5
      || [(id)VOTSharedWorkspace brailleInputActive])
    {
      objc_storeStrong((id *)&self->_lastScreenChangeSourceIdentifier, v22);
      if ([(VOTElementManager *)self screenCurtainIsTemporarilyDisabled])
      {
        id v27 = VOTLogElement();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Screen curtain re-enabled after temporary disablement", buf, 2u);
        }

        [(VOTElementManager *)self setScreenCurtainIsTemporarilyDisabled:0];
        __int16 v28 = +[VOTWorkspace sharedWorkspace];
        [v28 setScreenCurtainSuspended:0];
      }
      int v29 = +[VOTDisplayManager displayManager];
      [v29 setCursorFrameForElement:0];

      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472;
      v43[2] = sub_1000A2898;
      v43[3] = &unk_1001B5CC8;
      void v43[4] = self;
      float v44 = v16;
      BOOL v30 = objc_retainBlock(v43);
      if (Current - self->_lastScreenChangeNotificationTime >= 2.5
        || [(VOTElement *)self->_currentElement doesHaveTraits:kAXAdjustableTrait]
        || [(id)VOTSharedWorkspace brailleInputActive])
      {
        [(VOTElementManager *)self _resetDirectInteractionCache];
        [(VOTElementManager *)self _resetItemChooserCache];
        [(NSMutableDictionary *)self->_flowFromElements removeAllObjects];
        self->_double lastScreenChangeNotificationTime = CFAbsoluteTimeGetCurrent();
        double lastFirstResponderChangeTime = self->_lastFirstResponderChangeTime;
        unsigned __int8 v32 = +[VOTElement springBoardApplication];
        unsigned __int8 v33 = [v32 isSystemSleeping];

        if ((v33 & 1) == 0)
        {
          double v34 = Current - lastFirstResponderChangeTime;
          id v35 = +[VOTElement springBoardApplication];
          unsigned int v36 = [v35 isVoiceControlRunning];

          double v37 = CFAbsoluteTimeGetCurrent() - self->_lastFolderOperationTime;
          if (v34 >= 0.5 || v36)
          {
            int v38 = +[VOTOutputManager outputManager];
            [v38 stopSpeakingAtBoundary:0];
          }
          if (v37 < 0.25) {
            int v39 = 1;
          }
          else {
            int v39 = v36;
          }
          if (((v39 | v24) & 1) == 0)
          {
            BOOL v40 = +[VOTOutputManager outputManager];
            unsigned int v41 = v40;
            if (v7)
            {
              [v40 playSoundFast:v7];
            }
            else
            {
              CGFloat v42 = +[VOSOutputEvent ScreenDidChange];
              [v41 sendEvent:v42];
            }
          }
        }
      }
      ((void (*)(void *))v30[2])(v30);
    }
LABEL_49:

    goto LABEL_50;
  }
LABEL_51:
}

- (void)_clearWebLoadedSound
{
  [(SCRCTargetSelectorTimer *)self->_webPageLoadingSoundTimer invalidate];
  webPageLoadingSoundTimer = self->_webPageLoadingSoundTimer;
  self->_webPageLoadingSoundTimer = 0;

  BOOL v4 = VOTLogWebPageMovement();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_100120AA8();
  }
}

- (void)_webPageElementFinder
{
  id v3 = VOTLogWebPageMovement();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_100120B44();
  }

  unsigned __int8 v4 = [(VOTElementManager *)self _moveToWebItemDuringLoadIfNecessary];
  double v5 = VOTLogWebPageMovement();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_100120ADC();
  }

  webPageElementFinder = self->_webPageElementFinder;
  if (v4)
  {
    [(SCRCTargetSelectorTimer *)webPageElementFinder invalidate];
    id v7 = self->_webPageElementFinder;
    self->_webPageElementFinder = 0;
  }
  else
  {
    [(SCRCTargetSelectorTimer *)webPageElementFinder dispatchAfterDelay:0.5];
  }
}

- (void)_webPageLoadingSound
{
  if ([(VOTElementManager *)self _isWebAppStillOpen])
  {
    id v3 = +[VOTOutputManager outputManager];
    unsigned __int8 v4 = +[VOSOutputEvent ItemIsLoading];
    [v3 sendEvent:v4];

    [(SCRCTargetSelectorTimer *)self->_webPageLoadingSoundTimer dispatchAfterDelay:1.0];
    double v5 = VOTLogWebPageMovement();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_100120B78();
    }
  }
}

- (BOOL)_moveToWebItemDuringLoadIfNecessary
{
  id v3 = VOTLogWebPageMovement();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_100120CC8();
  }

  if ([(VOTElementManager *)self webPageLoadedGenerationMark]
    && (unint64_t v4 = [(VOTElementManager *)self webPageLoadedGenerationMark],
        v4 >= [(VOTElementManager *)self elementGeneration]))
  {
    [(VOTElementManager *)self _resetItemChooserCache];
    [(VOTElementFetcher *)self->_fetchManager forceUpdate];
    id v7 = VOTLogWebPageMovement();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_100120C94();
    }

    [(VOTElementManager *)self _updateApplicationAndSpeak:&__kCFBooleanTrue];
    if ([(VOTElement *)self->_currentElement doesHaveTraits:kAXWebContentTrait]) {
      unsigned int v8 = [(VOTElement *)self->_currentElement hasNativeFocus];
    }
    else {
      unsigned int v8 = 0;
    }
    int v9 = VOTLogWebPageMovement();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v14 = [(VOTElementManager *)self webPageLoadedGenerationMark];
      unint64_t v15 = [(VOTElementManager *)self elementGeneration];
      currentElement = self->_currentElement;
      v17[0] = 67109890;
      v17[1] = v8;
      __int16 v18 = 2048;
      unint64_t v19 = v14;
      __int16 v20 = 2048;
      unint64_t v21 = v15;
      __int16 v22 = 2112;
      long long v23 = currentElement;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Did we move from for web movement(has hasWebFocus: %d): web generation: %lld, element: %lld\nElement: %@", (uint8_t *)v17, 0x26u);
    }

    unint64_t v10 = [(VOTElementManager *)self webPageLoadedGenerationMark];
    if (v10 < [(VOTElementManager *)self elementGeneration]) {
      int v11 = 1;
    }
    else {
      int v11 = v8;
    }
    if (v11 == 1)
    {
      CFStringRef v12 = VOTLogWebPageMovement();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        sub_100120C18();
      }

      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v5 = [(VOTElementManager *)self elementGeneration];
    if (v5 > [(VOTElementManager *)self webPageLoadedGenerationMark])
    {
      id v6 = VOTLogWebPageMovement();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
        sub_100120BAC();
      }

LABEL_23:
      [(VOTElementManager *)self setWebPageLoadedGenerationMark:0];
      return 1;
    }
  }
  return 0;
}

- (void)_handleWebPageLoaded:(id)a3
{
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v5 = [v4 objectForKey:@"progress"];
    objc_opt_class();
    double v6 = 0.0;
    if (objc_opt_isKindOfClass())
    {
      id v7 = [v4 objectForKey:@"progress"];
      [v7 doubleValue];
      double v6 = v8;
    }
    int v9 = [v4 objectForKey:@"url"];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v4 floatValue];
      int v9 = 0;
      double v6 = v10;
    }
    else
    {
      int v9 = 0;
      double v6 = 0.0;
    }
  }
  int v11 = VOTLogWebPageMovement();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_100120E50();
  }

  if (v6 != 1.0 && v6 >= 0.0)
  {
    if (!self->_webPageLoadingSoundTimer)
    {
      [(VOTElementManager *)self setWebPageLoadedGenerationMark:[(VOTElementManager *)self elementGeneration]];
      [(VOTElementManager *)self setWebPageLoadURL:v9];
      CFStringRef v12 = VOTLogWebPageMovement();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
        sub_100120DD0(self, v12);
      }

      unsigned int v13 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:self selector:"_webPageLoadingSound" thread:self->_elementManagerThread];
      webPageLoadingSoundTimer = self->_webPageLoadingSoundTimer;
      self->_webPageLoadingSoundTimer = v13;

      [(SCRCTargetSelectorTimer *)self->_webPageLoadingSoundTimer dispatchAfterDelay:0.0];
      unint64_t v15 = (SCRCTargetSelectorTimer *)[objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:self selector:"_webPageElementFinder" thread:self->_elementManagerThread];
      webPageElementFinder = self->_webPageElementFinder;
      self->_webPageElementFinder = v15;

      [(SCRCTargetSelectorTimer *)self->_webPageElementFinder dispatchAfterDelay:0.0];
    }
    goto LABEL_25;
  }
  [(VOTElementManager *)self _clearWebLoadedSound];
  if (CFAbsoluteTimeGetCurrent() - self->_lastWebPageLoadTime > 3.0)
  {
    self->_lastWebPageLoadTime = CFAbsoluteTimeGetCurrent();
    self->_webPageLoadingProgress = 0.0;
    uint64_t v17 = +[VOTOutputManager outputManager];
    if (([v17 isSpeaking] & 1) == 0)
    {
      unsigned int v18 = [(id)VOTSharedWorkspace hintsEnabled];

      if (!v18)
      {
LABEL_21:
        unint64_t v21 = +[VOTOutputManager outputManager];
        __int16 v22 = +[VOSOutputEvent ItemDidLoad];
        [v21 sendEvent:v22];

        goto LABEL_22;
      }
      uint64_t v17 = [(id)VOTSharedWorkspace selectedLanguage];
      unint64_t v19 = sub_100051D04(off_1001EA9E8, @"webpage.loaded", 0, v17);
      id v20 = sub_10000ABF8(v19, 1, v17);
    }
    goto LABEL_21;
  }
LABEL_22:
  long long v23 = VOTLogWebPageMovement();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
    sub_100120D60(v23, v24, v25, v26, v27, v28, v29, v30);
  }

LABEL_25:
}

- (void)_captionsDisplayedWithTextRuns:(id)a3
{
  id v3 = a3;
  id v4 = +[AXSettings sharedInstance];
  unsigned __int8 v5 = [v4 voiceOverDescribedMedia];

  if ((v5 & 3) == 0) {
    goto LABEL_25;
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  double v6 = (VOTOutputRequest *)v3;
  id v7 = [(VOTOutputRequest *)v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (!v7)
  {
    int v9 = v6;
    goto LABEL_24;
  }
  id v8 = v7;
  id v16 = v3;
  int v9 = 0;
  uint64_t v10 = *(void *)v18;
  do
  {
    for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v18 != v10) {
        objc_enumerationMutation(v6);
      }
      CFStringRef v12 = *(void **)(*((void *)&v17 + 1) + 8 * i);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v13 = [v12 string];
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          continue;
        }
        id v13 = v12;
      }
      unint64_t v14 = v13;
      if (v13)
      {
        if (!v9) {
          int v9 = objc_alloc_init(VOTOutputRequest);
        }
        id v15 = [(VOTOutputRequest *)v9 addString:v14];
      }
    }
    id v8 = [(VOTOutputRequest *)v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  }
  while (v8);

  id v3 = v16;
  if (v9)
  {
    if ((v5 & 2) != 0) {
      [(VOTOutputRequest *)v9 setGeneratesBraille:1];
    }
    if ((v5 & 1) == 0) {
      [(VOTOutputRequest *)v9 setLimitToComponentType:3];
    }
    [(VOTOutputRequest *)v9 setBrailleType:1];
    [(VOTOutputRequest *)v9 send];
LABEL_24:
  }
LABEL_25:
}

- (void)_handleCaptionsDisplayedNotification:(id)a3
{
  id v5 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if ((AXDeviceIsAudioAccessory() & 1) == 0 && CFAbsoluteTimeGetCurrent() - self->_lastEventOccurredTime >= 2.0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v4 = [v5 objectForKeyedSubscript:kAXCaptionsDisplayedTextRuns];
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        [(VOTElementManager *)self _captionsDisplayedWithTextRuns:v4];
      }
    }
  }
}

- (void)_handleDidReceiveVisionEngineResult:(id)a3
{
  id v4 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if ((AXDeviceIsAudioAccessory() & 1) == 0 && CFAbsoluteTimeGetCurrent() - self->_lastEventOccurredTime >= 2.0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v5 = objc_opt_class();
      double v6 = AXMSecureCodingClasses();
      id v20 = 0;
      id v7 = +[NSKeyedUnarchiver axmSecurelyUnarchiveData:v4 withExpectedClass:v5 otherAllowedClasses:v6 error:&v20];
      id v8 = v20;

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || v8)
      {
        _AXAssert();
      }
      else
      {
        id v8 = (id)objc_opt_new();
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        int v9 = [v7 features];
        id v10 = [v9 countByEnumeratingWithState:&v16 objects:v21 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v17;
          do
          {
            for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v17 != v12) {
                objc_enumerationMutation(v9);
              }
              unint64_t v14 = *(void **)(*((void *)&v16 + 1) + 8 * i);
              if ([v14 featureType] == (id)12)
              {
                id v15 = [v14 value];
                [v8 addObject:v15];
              }
            }
            id v11 = [v9 countByEnumeratingWithState:&v16 objects:v21 count:16];
          }
          while (v11);
        }

        [(VOTElementManager *)self _captionsDisplayedWithTextRuns:v8];
      }
    }
    else
    {
      _AXAssert();
    }
  }
}

- (void)_handleScreenOn
{
  [(id)VOTSharedWorkspace setScreenOn:1 silently:0];
  [(VOTElementManager *)self _setCurrentElement:0];
  uint64_t v3 = kAXPerformElementUpdateImmediatelyToken;

  [(VOTElementManager *)self _handleScreenChange:v3 sound:0];
}

- (void)_handleScreenOff
{
  unsigned __int8 v2 = +[VOTOutputManager outputManager];
  uint64_t v3 = +[VOSOutputEvent ScreenDidTurnOff];
  [v2 sendEvent:v3];

  id v4 = (void *)VOTSharedWorkspace;

  [v4 setScreenOn:0 silently:0];
}

- (void)_handleScreenOnSilently
{
}

- (void)_handleScreenOffSilently
{
}

- (void)_handleStopSpeaking
{
  unsigned __int8 v2 = +[VOTOutputManager outputManager];
  [v2 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

  id v3 = +[VOTOutputManager outputManager];
  [v3 toggleAudioSessionActive:0];
}

- (void)_handleStopSpeakingAndClearQueue
{
  unsigned __int8 v2 = +[VOTOutputManager outputManager];
  [v2 clearQueue];

  id v3 = +[VOTOutputManager outputManager];
  [v3 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];
}

- (void)_handleStopSpeakingAndClearAllQueues
{
  unsigned __int8 v2 = +[VOTOutputManager outputManager];
  [v2 clearAllQueues];

  id v3 = +[VOTOutputManager outputManager];
  [v3 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];
}

- (void)_handleTemporaryScreenCurtainDisablement
{
  id v3 = VOTLogElement();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Screen curtain turned off for temporary disablement", v6, 2u);
  }

  if ([(id)VOTSharedWorkspace screenCurtainEnabled])
  {
    if (([(id)VOTSharedWorkspace screenCurtainSuspended] & 1) == 0)
    {
      [(VOTElementManager *)self setScreenCurtainIsTemporarilyDisabled:1];
      id v4 = +[VOTWorkspace sharedWorkspace];
      [v4 setScreenCurtainSuspended:1];

      uint64_t v5 = +[VOTDisplayManager displayManager];
      [v5 clearCursorFrame];
    }
  }
}

- (void)_handleRequestExclusiveAudioHardware
{
  unsigned __int8 v2 = +[VOTOutputManager outputManager];
  [v2 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

  id v3 = +[VOTOutputManager outputManager];
  [v3 toggleAudioSessionActive:0];

  id v4 = (void *)VOTSharedWorkspace;

  _[v4 setOutputDisabled:1];
}

- (void)_handleReleaseExclusiveAudioHardware
{
}

- (void)_handleUnmuteEligibleEventOccured
{
  id v2 = +[VOTWorkspace sharedWorkspace];
  [v2 unmuteEligibleEventOccured];
}

- (id)continuousPathSuggestion
{
  return self->_continuousPathSuggestion;
}

- (void)_handleAutoCorrectionDisplayNotification:(id)a3
{
  id v5 = a3;
  autofillCurrentElement = self->_autofillCurrentElement;
  self->_autofillCurrentElement = 0;

  id v7 = [(VOTElement *)self->_currentElement application];
  id v8 = [v7 activeKeyboard];
  unsigned int v9 = [v8 isKeyboardContinuousPathTracking];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && [v5 hasAttribute:kAXAutoCorrectionForContinuousPathKey])
  {
    objc_storeStrong((id *)&self->_continuousPathSuggestion, a3);
  }
  id v10 = VOTLogCommon();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    continuousPathSuggestion = self->_continuousPathSuggestion;
    int v14 = 138412802;
    id v15 = v5;
    __int16 v16 = 2112;
    long long v17 = continuousPathSuggestion;
    __int16 v18 = 1024;
    unsigned int v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Auto correct displayed: %@, continuous path: %@[%d]", (uint8_t *)&v14, 0x1Cu);
  }

  if (v9)
  {
    if ([(SCRCTargetSelectorTimer *)self->_continuousPathIdleTimer isPending])
    {
      [(SCRCTargetSelectorTimer *)self->_continuousPathIdleTimer cancel];
      [(SCRCTargetSelectorTimer *)self->_continuousPathIdleTimer dispatchAfterDelay:0.0];
    }
  }
  else
  {
    uint64_t v12 = +[VOTOutputManager outputManager];
    id v13 = +[VOSOutputEvent AutofillDidAppear];
    [v12 sendEvent:v13];
  }
}

- (void)_handleKeyboardChangedNotification
{
  id v2 = +[VOTKeyboardManager keyboardManager];
  [v2 loadKeyboardMap];

  id v3 = +[VOTBrailleManager manager];
  [v3 handleKeyboardChanged];

  id v4 = +[VOTBrailleManager manager];
  [v4 refreshBrailleLine];
}

- (void)_handleAutoCorrectionMadeNotification:(id)a3
{
  id v4 = a3;
  if ([v4 length])
  {
    id v5 = +[AXSubsystemVoiceOver sharedInstance];
    unsigned __int8 v6 = [v5 ignoreLogging];

    if ((v6 & 1) == 0)
    {
      id v7 = +[AXSubsystemVoiceOver identifier];
      id v8 = AXLoggerForFacility();

      os_log_type_t v9 = AXOSLogLevelFromAXLogLevel();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = AXColorizeFormatLog();
        id v11 = _AXStringForArgs();
        if (os_log_type_enabled(v8, v9))
        {
          *(_DWORD *)long long buf = 138543362;
          __int16 v16 = v11;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}@", buf, 0xCu);
        }
      }
    }
    uint64_t v12 = sub_100051804(off_1001EA9E8, @"autocorrection.text", 0);
    id v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v12, v4);

    int v14 = +[VOTOutputManager outputManager];
    [v14 speakSimpleString:v13];
  }
  [(VOTElementManager *)self _updateFirstResponderTypingBuffer];
}

- (void)_handleScrollByPageNotification:(id)a3
{
  id v4 = a3;
  if (!v4 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    unsigned int v5 = [v4 isEqualToString:kAXPageScrollFailed];
    char v6 = v5;
    if (v5)
    {

      id v4 = 0;
    }
    id v7 = [(VOTElementManager *)self _currentElement];
    if ([v7 isReadingContent])
    {
      unsigned int v8 = 1;
    }
    else
    {
      os_log_type_t v9 = [(VOTElementManager *)self _currentElement];
      unsigned int v8 = [v9 includeDuringContentReading];
    }
    unsigned int v10 = [(id)VOTSharedWorkspace tapAndHoldMode];
    if ([v4 isAXAttributedString]) {
      unsigned int v11 = [v4 hasAttribute:kAXPageScrollIsCrownScroll];
    }
    else {
      unsigned int v11 = 0;
    }
    unsigned int v105 = [v4 isEqualToString:kAXScrollWithContentPullDown];
    if (v105)
    {
      sub_100051804(off_1001EA9E8, @"scroll.content.pulldown", 0);
      uint64_t v12 = v4;
      id v4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_26:

      goto LABEL_27;
    }
    if ((v6 & 1) != 0
      || (v8 & 1) == 0
      && (!v4
       || -[NSString isEqualToString:](self->_lastScrollStatus, "isEqualToString:", v4) && [v4 length]))
    {
      id v13 = [(VOTElementManager *)self _currentElement];
      if ([v13 mapFeatureType]) {
        unsigned int v10 = 1;
      }

      if (((v10 | v11) & 1) == 0)
      {
        uint64_t v12 = +[VOTOutputManager outputManager];
        uint64_t v14 = +[VOSOutputEvent BoundaryEncountered];
LABEL_25:
        id v15 = (void *)v14;
        [v12 sendEvent:v14];

        goto LABEL_26;
      }
    }
    else if ((v11 & 1) == 0)
    {
      uint64_t v12 = +[VOTOutputManager outputManager];
      uint64_t v14 = +[VOSOutputEvent DidScrollByPage];
      goto LABEL_25;
    }
LABEL_27:
    id v16 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    if (![v4 length] || v8 && self->_flags.isReadingAllBook)
    {
      unsigned int v103 = 0;
LABEL_37:
      uint64_t v104 = v16;
      [v16 setCannotBeInterrupted:1];
      long long v23 = [(VOTElementManager *)self _currentElement];
      uint64_t v24 = self->_currentOpaqueParent;
      unsigned __int8 v106 = [v23 application];
      if ((v105 & 1) == 0 && ([v23 isValidForApplication:v106] & 1) == 0)
      {
        uint64_t v25 = [v23 firstVisibleElementInList];
        if (v25)
        {
          id v26 = (id)v25;
          uint64_t v27 = 27;
          while (1)
          {
            if ([v26 isValidForApplication:v106])
            {
              [v23 readingContentCausesPageTurn];
              unsigned __int8 v33 = v104;
              goto LABEL_108;
            }
            uint64_t v28 = [v26 nextElement];
            if ([v28 isEqual:v26]) {
              break;
            }
            id v29 = v28;

            if (!--v27)
            {
              id v26 = v29;
              break;
            }

            id v26 = v29;
            if (!v29) {
              goto LABEL_45;
            }
          }
          unsigned __int8 v33 = v104;

          unsigned int v30 = [v23 readingContentCausesPageTurn];
          if (!v26) {
            goto LABEL_46;
          }
LABEL_108:
          [(VOTElementManager *)self _setCurrentElement:v26];
          if (([v26 doesHaveTraits:kAXLaunchIconTrait] | v103) == 1) {
            [(VOTElementManager *)self _addDescription:v26 toRequest:v33 withOptions:0x800000];
          }
          double v34 = v24;
          if (!self->_flags.previousScrollWasBookContentMovement)
          {
            uint64_t v78 = +[VOTDisplayManager displayManager];
            [v78 setCursorFrameForElement:v26];
          }
          fetchManager = self->_fetchManager;
          unsigned __int8 v80 = [(VOTElementManager *)self _currentElement];
          [(VOTElementFetcher *)fetchManager updateCacheWithElement:v80];

          goto LABEL_124;
        }
      }
LABEL_45:
      unsigned int v30 = [v23 readingContentCausesPageTurn];
LABEL_46:
      unsigned int v31 = v30;
      if ((v6 & 1) == 0 && v30 | v8)
      {
        [v23 updateCache];
        [v23 updatePageContent];
        lastValidElement = self->_lastValidElement;
        self->_lastValidElement = 0;

        [(VOTElementManager *)self _resetElementUnitIndexes];
        self->_flags.shouldUpdateRotorForElement = 1;
        if (!self->_flags.previousScrollWasBookContentMovement)
        {
          unsigned int v71 = [v23 isReadingContent];
          unsigned __int8 v33 = v104;
          double v34 = v24;
          if ((v71 & v31 & 1) != 0
            || (v71 & 1) == 0 && (self->_flags.isReadingAll || self->_flags.userInitiatedBooksScroll))
          {
            AXPerformBlockOnMainThreadAfterDelay();
            objc_storeStrong((id *)&self->_lastScrollStatus, v4);
            self->_flags.previousScrollWasBookContentMovement = 0;
LABEL_126:
            uint64_t v102 = +[NSNotificationCenter defaultCenter];
            [v102 postNotificationName:@"UpdateElement" object:0];

            [(VOTElementManager *)self _resetItemChooserCache];
            goto LABEL_127;
          }
LABEL_125:
          objc_storeStrong((id *)&self->_lastScrollStatus, v4);
          self->_flags.previousScrollWasBookContentMovement = 0;
          id v100 = (void *)VOTSharedWorkspace;
          uint64_t v101 = [(VOTElementManager *)self _currentRotorSelection];
          [v100 refreshBraille:0 rotorSelection:v101];

          goto LABEL_126;
        }
        unsigned __int8 v33 = v104;
        double v34 = v24;
        if (self->_bookLastContentMovementDirection == 2) {
          [(VOTElementManager *)self _setElementUnitIndexesToEndOfElement:v23];
        }
        id v35 = [v23 pageContent];
        id v26 = v35;
        int64_t bookLastContentMovementUnit = self->_bookLastContentMovementUnit;
        if (bookLastContentMovementUnit == 3)
        {
          int64_t bookLineNumber = self->_bookLineNumber;
          if (bookLineNumber == 0x7FFFFFFF)
          {
            if (self->_bookLastContentMovementDirection == 1)
            {
              int64_t bookLineNumber = 0;
              self->_int64_t bookLineNumber = 0;
            }
            else
            {
              int64_t bookLineNumber = 0x7FFFFFFFLL;
            }
          }
          id v82 = [v23 stringForLineNumber:bookLineNumber];
          id v84 = [v104 addString:v82];
          [v23 frameForLineNumber:self->_bookLineNumber];
          double v86 = v85;
          double v88 = v87;
          double v90 = v89;
          double v92 = v91;
          unint64_t v93 = +[VOTElement systemWideElement];
          objc_msgSend(v93, "convertRect:fromContextId:", objc_msgSend(v23, "windowContextId"), v86, v88, v90, v92);
          self->_lineFrame.origin.CGFloat x = v94;
          self->_lineFrame.origin.double y = v95;
          self->_lineFrame.size.CGFloat width = v96;
          self->_lineFrame.size.CGFloat height = v97;

          goto LABEL_120;
        }
        if (bookLastContentMovementUnit == 2)
        {
          id v74 = [v35 wordFromPosition:self->_bookCursorPosition inDirection:self->_bookLastContentMovementDirection];
LABEL_117:
          id v82 = objc_msgSend(v26, "substringWithRange:", v74, v75);
          id v83 = [v104 addString:v82];
LABEL_120:

          goto LABEL_121;
        }
        if (bookLastContentMovementUnit != 1)
        {
LABEL_121:
          if (objc_msgSend(v104, "containsActions", v36))
          {
            id v98 = +[VOTOutputManager outputManager];
            [v98 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

            [(VOTElementManager *)self sendRequest:v104];
          }
          -[VOTElementManager _handleBookContentMovement:direction:unit:generateOutput:](self, "_handleBookContentMovement:direction:unit:generateOutput:", v23, self->_bookLastContentMovementDirection, self->_bookLastContentMovementUnit, [v104 containsActions] ^ 1);
          id v99 = +[VOTDisplayManager displayManager];
          objc_msgSend(v99, "setCursorFrame:", self->_lineFrame.origin.x, self->_lineFrame.origin.y, self->_lineFrame.size.width, self->_lineFrame.size.height);

LABEL_124:
          goto LABEL_125;
        }
        int64_t bookLastContentMovementDirection = self->_bookLastContentMovementDirection;
        if (bookLastContentMovementDirection == 1)
        {
          unint64_t bookCursorPosition = self->_bookCursorPosition;
          if (bookCursorPosition < (unint64_t)[v35 length])
          {
            int64_t v36 = self->_bookCursorPosition & ~(self->_bookCursorPosition >> 63);
LABEL_116:
            id v74 = [v26 rangeOfComposedCharacterSequenceAtIndex:v36];
            goto LABEL_117;
          }
          int64_t bookLastContentMovementDirection = self->_bookLastContentMovementDirection;
        }
        if (bookLastContentMovementDirection != 2) {
          goto LABEL_121;
        }
        int64_t v81 = self->_bookCursorPosition;
        int64_t v36 = v81 - 1;
        if (v81 < 1) {
          goto LABEL_121;
        }
        goto LABEL_116;
      }
      [v23 centerPoint];
      double MidX = v40;
      double MidY = v42;
      double y = CGPointZero.y;
      if (CGPointZero.x == v40 && y == MidY)
      {
        id v26 = v23;
        unsigned __int8 v33 = v104;
        double v34 = v24;
      }
      else
      {
        if (objc_msgSend(v23, "doesHaveTraits:", kAXWebContentTrait, CGPointZero.x, y))
        {
          uint64_t v46 = [v23 application];
          unsigned int v47 = [v46 isSafari];

          if (v47)
          {
            uint64_t v48 = [v23 remoteParent];
            os_log_type_t v49 = v48;
            if (v48)
            {
              uint64_t v50 = [v48 uiElement];
              [v50 rectWithAXAttribute:2057];
              CGFloat v52 = v51;
              CGFloat v54 = v53;
              CGFloat v56 = v55;
              CGFloat v58 = v57;

              v107.origin.CGFloat x = v52;
              v107.origin.double y = v54;
              v107.size.CGFloat width = v56;
              v107.size.CGFloat height = v58;
              double MidX = CGRectGetMidX(v107);
              v108.origin.CGFloat x = v52;
              v108.origin.double y = v54;
              v108.size.CGFloat width = v56;
              v108.size.CGFloat height = v58;
              double MidY = CGRectGetMidY(v108);
            }
          }
        }
        double v34 = v24;
        id v59 = [v23 windowContextId];
        if (v59)
        {
          uint64_t v60 = +[VOTElement systemWideElement];
          objc_msgSend(v60, "convertPoint:fromContextId:", v59, MidX, MidY);
          double MidX = v61;
          double MidY = v62;
        }
        id v63 = objc_allocWithZone((Class)VOTElement);
        CGRect v64 = [v23 application];
        id v26 = objc_msgSend(v63, "initWithPosition:application:contextId:", v64, v59, MidX, MidY);

        unsigned int v65 = [v26 parentTableOrCollectionView];
        unsigned int v66 = [v23 parentTableOrCollectionView];
        unsigned int v67 = [v65 isEqual:v66];

        if (!v26)
        {
          -[VOTElementManager _sonarElementFromPoint:inForwardDirection:limit:](self, "_sonarElementFromPoint:inForwardDirection:limit:", 1, 10, MidX, MidY);
          id v26 = (id)objc_claimAutoreleasedReturnValue();
        }
        unsigned __int8 v33 = v104;
        if (([v26 isInTableCell] & 1) == 0
          && ([v23 isInTableCell] & 1) != 0
          || (([v26 isInTableCell] ^ 1 | v67) & 1) == 0)
        {
          if (![v23 isAlive]
            || ([v23 firstVisibleElementInList],
                (int v68 = objc_claimAutoreleasedReturnValue()) == 0))
          {
            int v68 = [(VOTElement *)v24 firstVisibleElementInList];
          }
          id v69 = [v68 nextElement];

          if (!v69) {
            id v69 = v68;
          }

          id v26 = v69;
        }
      }
      if (![v26 isValid])
      {
        [v23 updateCache];
        goto LABEL_103;
      }
      if (v105)
      {
        id v70 = [v26 firstVisibleElementInList];
      }
      else
      {
        if ([v26 isEqual:v23])
        {
LABEL_102:
          [(VOTElementFetcher *)self->_fetchManager forceUpdate];
          self->_flags.shouldUpdateRotorForElement = 1;
LABEL_103:
          if ([v33 containsActions])
          {
            int v77 = +[VOTOutputManager outputManager];
            [v77 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

            [(VOTElementManager *)self sendRequest:v33];
          }
          goto LABEL_124;
        }
        id v70 = v26;
      }
      unsigned int v72 = v70;
      if (v70)
      {
        [(VOTElementManager *)self _setCurrentElement:v70];
        if (v103)
        {
          [(VOTElementManager *)self _addDescription:v72 toRequest:v33 withOptions:0x800000];
        }
        else if (([v72 isReadingContent] & 1) != 0 {
               || [v72 includeDuringContentReading])
        }
        {
          [(VOTElementManager *)self _startReadingBookForNewPage];
        }
        uint64_t v76 = +[VOTDisplayManager displayManager];
        [v76 setCursorFrameForElement:v72];
      }
      goto LABEL_102;
    }
    if ([v4 isAXAttributedString])
    {
      long long v17 = v16;
      unsigned int v103 = [v4 hasAttribute:kAXPageScrollShouldSpeakElement];
      __int16 v18 = +[NSCharacterSet whitespaceCharacterSet];
      uint64_t v19 = [v4 stringByTrimmingCharactersInSet:v18];

      if (v11)
      {
        id v4 = (id)v19;
        id v16 = v17;
        goto LABEL_37;
      }
      id v16 = v17;
      id v22 = [v17 addAttributedString:v19];
    }
    else
    {
      id v20 = +[NSCharacterSet whitespaceCharacterSet];
      uint64_t v19 = [v4 stringByTrimmingCharactersInSet:v20];

      id v21 = [v16 addString:v19];
      unsigned int v103 = 0;
    }
    id v4 = (id)v19;
    goto LABEL_37;
  }
  _AXAssert();
LABEL_127:
}

- (void)_handleSystemControlActivation:(id)a3
{
  id v11 = a3;
  id v4 = [v11 command];
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandSystemShowNotificationCenter];

  if (v5)
  {
    char v6 = +[AXPISystemActionHelper sharedInstance];
    [v6 toggleNotificationCenter];
LABEL_5:

    goto LABEL_6;
  }
  id v7 = [v11 command];
  unsigned int v8 = [v7 isEqualToString:kVOTEventCommandSystemShowControlCenter];

  if (v8)
  {
    char v6 = +[AXPISystemActionHelper sharedInstance];
    [v6 toggleControlCenter];
    goto LABEL_5;
  }
  os_log_type_t v9 = [v11 command];
  unsigned int v10 = [v9 isEqualToString:kVOTEventCommandSystemControlTwoTop];

  if (v10) {
    [(VOTElementManager *)self _handleSpeakScreen:v11];
  }
LABEL_6:
}

- (void)_handleSystemCommandNotificationCenter:(id)a3
{
  id v3 = +[AXPISystemActionHelper sharedInstance];
  [v3 toggleNotificationCenter];
}

- (void)_handleSystemCommandControlCenter:(id)a3
{
  id v3 = +[AXPISystemActionHelper sharedInstance];
  [v3 toggleControlCenter];
}

- (void)_handleSystemCommandToggleDock:(id)a3
{
  id v3 = +[AXPISystemActionHelper sharedInstance];
  [v3 toggleDock];
}

- (void)_handleSystemCommandToggleAppSwitcher:(id)a3
{
  if (![(VOTElementManager *)self isContinuitySessionActive])
  {
    id v3 = +[AXPISystemActionHelper sharedInstance];
    [v3 toggleAppSwitcher];
  }
}

- (void)_handleSystemCommandActivateLockButton:(id)a3
{
  id v3 = +[AXPISystemActionHelper sharedInstance];
  [v3 activateLockButton];
}

- (void)_handleSystemCommandSpotlight:(id)a3
{
  id v3 = +[AXPISystemActionHelper sharedInstance];
  [v3 toggleSpotlight];
}

- (void)_handleSystemCommandActivateAccessibilityShortcut:(id)a3
{
  id v3 = +[AXPISystemActionHelper sharedInstance];
  [v3 activateTripleClick];
}

- (void)_handleSystemCommandToggleReachability:(id)a3
{
  id v3 = +[AXPISystemActionHelper sharedInstance];
  [v3 toggleReachability];
}

- (void)_handleSystemCommandTakeScreenshot:(id)a3
{
  id v3 = +[AXPISystemActionHelper sharedInstance];
  [v3 takeScreenshot];
}

- (void)_handleSystemCommandSwitchToPreviousApp:(id)a3
{
  id v3 = +[VOTSpringBoardConnection defaultConnection];
  [v3 sendProgrammaticAppSwitch:0];
}

- (void)_handleSystemCommandSwitchToNextApp:(id)a3
{
  id v3 = +[VOTSpringBoardConnection defaultConnection];
  [v3 sendProgrammaticAppSwitch:1];
}

- (void)_handleSystemCommandToggleQuickNote:(id)a3
{
  id v3 = +[AXSpringBoardServer server];
  [v3 toggleQuickNote];
}

- (void)_handleSendCancelEvent:(id)a3
{
  id v3 = +[AXElement systemWideElement];
  [v3 performAction:5007];

  id v4 = sub_10000ABF8(@"Cancel event sent", 1, 0);
}

- (void)_handleSiriShortcutEvent:(id)a3
{
  id v4 = [a3 objectForIndex:117];
  if (v4)
  {
    id v3 = +[AXSiriShortcutsManager sharedManager];
    [v3 performShortcut:v4];
  }
}

- (BOOL)allowsSystemControlEventForPosition:(int)a3
{
  if ((a3 - 1) < 2)
  {
    if (([(id)VOTSharedWorkspace supportsHomeGestures] & 1) == 0)
    {
      id v3 = +[AXSpringBoardServer server];
      if ([v3 isNotificationCenterVisible])
      {
        LOBYTE(v4) = 0;
      }
      else
      {
        char v6 = +[AXSpringBoardServer server];
        unsigned int v4 = [v6 isControlCenterVisible] ^ 1;
      }
      return v4;
    }
LABEL_9:
    LOBYTE(v4) = 0;
    return v4;
  }
  if (a3 != 5) {
    goto LABEL_9;
  }

  return [(VOTElementManager *)self _shouldAllowSpeakThisGesture];
}

- (BOOL)_shouldAllowSpeakThisGesture
{
  int v2 = _AXSSpeakThisEnabled();
  if (v2)
  {
    id v3 = +[AXSpringBoardServer server];
    unsigned __int8 v4 = [v3 isSpeakThisTemporarilyDisabled];

    if (v4)
    {
      LOBYTE(v2) = 0;
    }
    else
    {
      unsigned int v5 = +[AXSpringBoardServer server];
      unsigned __int8 v6 = [v5 hasActiveOrPendingCallOrFaceTime];

      LOBYTE(v2) = v6 ^ 1;
    }
  }
  return v2;
}

- (void)_handleRotateOrientation:(id)a3
{
  id v3 = [a3 command];
  id v4 = [v3 isEqualToString:kVOTEventCommandRotateOrientationRight];

  unsigned int v5 = (void *)VOTSharedWorkspace;

  _[v5 rotateDeviceOrientation:v4];
}

- (void)_handleVolumeChange:(float)a3
{
  unsigned int v5 = +[AXSettings sharedInstance];
  [v5 voiceOverEffectiveSpeakingVolume];
  double v7 = v6;

  double v8 = a3 + v7;
  int v9 = (int)(v8 * 100.0);
  int v10 = (int)(a3 * 100.0);
  int v11 = v9 % v10;
  if (v9 % v10)
  {
    if (v10 >= 0) {
      int v12 = (int)(a3 * 100.0);
    }
    else {
      int v12 = v10 + 1;
    }
    if (v10 < 0) {
      int v10 = -v10;
    }
    if (v11 <= v12 >> 1) {
      int v10 = 0;
    }
    int v9 = v9 - v11 + v10;
  }
  double v13 = fmax((double)v9 / 100.0, 0.00999999978);
  if (v13 <= 1.0) {
    double v14 = v13;
  }
  else {
    double v14 = 1.0;
  }
  id v15 = VOTLogAudio();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    id v16 = +[NSNumber numberWithDouble:v8];
    long long v17 = +[NSNumber numberWithDouble:v14];
    int v24 = 138412546;
    uint64_t v25 = v16;
    __int16 v26 = 2112;
    uint64_t v27 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Set VO Rotor volume from %@ to %@", (uint8_t *)&v24, 0x16u);
  }
  __int16 v18 = +[AXSettings sharedInstance];
  float v19 = v14;
  *(float *)&double v20 = v19;
  [v18 setVoiceOverEffectiveSpeakingVolume:v20];

  id v21 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v22 = AXFormatFloatWithPercentage();
  id v23 = [v21 addString:v22];

  [(VOTElementManager *)self _formatRequestForBrailleAlertConditional:v21];
  [(VOTElementManager *)self sendRequest:v21];
}

- (void)_formatRequestForBrailleAlertConditional:(id)a3
{
}

- (void)_handleIncreaseVolume:(id)a3
{
  id v4 = [a3 objectForIndex:110];
  id v6 = v4;
  if (v4) {
    [v4 floatValue];
  }
  else {
    LODWORD(v5) = 1028443341;
  }
  [(VOTElementManager *)self _handleVolumeChange:v5];
}

- (void)_handleDecreaseVolume:(id)a3
{
  id v4 = [a3 objectForIndex:110];
  id v6 = v4;
  if (v4)
  {
    [v4 floatValue];
    *(float *)&double v5 = -*(float *)&v5;
  }
  else
  {
    LODWORD(v5) = -1119040307;
  }
  [(VOTElementManager *)self _handleVolumeChange:v5];
}

- (void)_handleStateReset
{
  [(VOTElementManager *)self _resetElementLabel];
  [(VOTElementManager *)self _stopReadAll];
  [(VOTElementManager *)self _endTextSearchMode];
  if (self->_flags.itemChooserVisible) {
    [(VOTElementManager *)self _closeItemChooser];
  }
  flowFromElements = self->_flowFromElements;

  [(NSMutableDictionary *)flowFromElements removeAllObjects];
}

- (void)handleStateReset
{
}

- (BOOL)_shouldSuppressSpeechForPlayPause
{
  double lastScreenWakeViaPlayPause = self->_lastScreenWakeViaPlayPause;
  return lastScreenWakeViaPlayPause > self->_lastEventOccurredTime
      && vabdd_f64(self->_lastExternalUnlockTime, lastScreenWakeViaPlayPause) < 0.25;
}

- (void)_handlePlayPauseButtonPress
{
  self->_flags.shouldSpeakNextLayoutChange = 0;
  if (![(VOTElementManager *)self _shouldSuppressSpeechForPlayPause]) {
    self->_double lastScreenWakeViaPlayPause = CFAbsoluteTimeGetCurrent();
  }
}

- (void)handlePlayPauseButtonPress
{
}

- (void)handleHomeButtonPress
{
  id v3 = VOTLogLayoutChange();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_100120EB8();
  }

  [(SCRCThread *)self->_elementManagerThread performSelector:"_handleHomeButtonPress" onTarget:self count:0 objects:0];
}

- (void)_handleHomeButtonPress
{
  self->_lastItemSelectionFromTouch = -3061152000.0;
  [(VOTElementManager *)self setLastHomeButtonPressTime:CFAbsoluteTimeGetCurrent()];
  id v3 = +[VOTOutputManager outputManager];
  id v4 = +[VOSOutputEvent ScreenDidChange];
  [v3 sendEvent:v4];

  NSUInteger v5 = [(NSArray *)self->_currentApplications count];
  if (v5 == 1)
  {
    id v3 = [(NSArray *)self->_currentApplications firstObject];
    if ([v3 isSpringBoard]) {
      goto LABEL_8;
    }
  }
  id v6 = +[VOTElement springBoardApplication];
  unsigned __int8 v7 = [v6 isVoiceControlRunning];

  if (v5 == 1) {
  if ((v7 & 1) == 0)
  }
  {
    double v8 = +[VOTWorkspace sharedWorkspace];
    unsigned int v9 = [v8 currentCallState];

    if (!v9)
    {
      id v3 = [(id)VOTSharedWorkspace selectedLanguage];
      int v10 = sub_100051D04(off_1001EA9E8, @"home.button.pressed", 0, v3);
      id v11 = sub_10000ABF8(v10, 1, v3);

LABEL_8:
    }
  }
  int v12 = +[VOTElement systemAppApplication];
  double v20 = v12;
  double v13 = +[NSArray arrayWithObjects:&v20 count:1];
  currentApplications = self->_currentApplications;
  self->_currentApplications = v13;

  id v15 = [(NSArray *)self->_currentApplications firstObject];
  id v16 = [v15 firstElementInApplication];

  long long v17 = [(VOTElementManager *)self _cachedLaunchIcon:v16];
  __int16 v18 = v17;
  if (v17)
  {
    id v19 = v17;

    id v16 = v19;
  }
  [(VOTElementManager *)self _echoDifferentElement:v16 forEvent:0];
  AXPerformBlockOnMainThreadAfterDelay();
}

- (void)updateRunningApplications
{
  id v5 = +[VOTWorkspace sharedWorkspace];
  id v3 = [v5 focusedApplications];
  currentApplications = self->_currentApplications;
  self->_currentApplications = v3;
}

- (void)_handleSiriStartedTalking:(id)a3
{
}

- (void)_handleSiriFinishedTalking:(id)a3
{
  [(id)VOTSharedWorkspace setIsSiriTalking:0];
  double Current = CFAbsoluteTimeGetCurrent();
  [(VOTElementManager *)self lastBlockedRequestBySiriOrDictationTime];
  if (Current - v5 < 0.1)
  {
    id v6 = [(VOTElementManager *)self lastRequestBlockedBySiriOrDictation];
    [v6 send];
  }

  [(VOTElementManager *)self setLastRequestBlockedBySiriOrDictation:0];
}

- (void)_handleSiriStartedListening:(id)a3
{
  [(id)VOTSharedWorkspace setIsSiriListening:1];
  id v3 = +[VOTOutputManager outputManager];
  [v3 stopSpeakingAtBoundary:0];
}

- (void)_handleSiriFinishedListening:(id)a3
{
}

- (void)_handleToggleVoiceOverModifierKeyLock:(id)a3
{
  id v3 = +[VOTKeyboardManager keyboardManager];
  [v3 toggleVoiceOverModifierKeyLock];

  id v4 = +[VOTKeyboardManager keyboardManager];
  unsigned int v5 = [v4 modifierKeyLockEnabled];

  if (v5) {
    id v6 = @"modifier.keys.locked";
  }
  else {
    id v6 = @"modifier.keys.unlocked";
  }
  sub_100051804(off_1001EA9E8, v6, 0);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  unsigned __int8 v7 = [(id)VOTSharedWorkspace selectedLanguage];
  id v8 = sub_10000ABF8(v9, 0, v7);
}

- (void)_handleToggleSingleLetterQuickNav:(id)a3
{
  unsigned int v3 = objc_msgSend((id)VOTSharedWorkspace, "allowSingleLetterSearching", a3);
  [(id)VOTSharedWorkspace setAllowSingleLetterSearching:v3 ^ 1];
  id v21 = [(id)VOTSharedWorkspace selectedLanguage];
  id v4 = +[VOTBrailleManager manager];
  objc_msgSend(v4, "setSingleLetterQuickNavOn:", objc_msgSend((id)VOTSharedWorkspace, "allowSingleLetterSearching"));

  unsigned int v5 = +[VOTKeyboardManager keyboardManager];
  unsigned int v6 = [v5 isQuickNavOn];

  unsigned __int8 v7 = +[VOTOutputManager outputManager];
  if (v6) {
    +[VOSOutputEvent DidEnableQuickNav];
  }
  else {
  id v8 = +[VOSOutputEvent DidDisableQuickNav];
  }
  [v7 sendEvent:v8];

  if (v3) {
    id v9 = @"single.letter.quick.nav.off";
  }
  else {
    id v9 = @"single.letter.quick.nav.on";
  }
  int v10 = sub_100051804(off_1001EA9E8, v9, 0);
  id v11 = sub_100051804(off_1001EA9E8, v9, 0);
  int v12 = off_1001EA9E8;
  double v13 = +[VOTKeyboardManager keyboardManager];
  if ([v13 isQuickNavOn]) {
    double v14 = @"quick.nav.on";
  }
  else {
    double v14 = @"quick.nav.off";
  }
  id v15 = sub_100051804(v12, v14, 0);
  id v16 = +[NSString stringWithFormat:@"%@, %@", v11, v15];

  id v17 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v18 = [v17 addString:v10 brailleString:v16 withLanguage:v21];
  [v17 setGeneratesBraille:1];
  id v19 = [v17 outputActions];
  double v20 = [v19 lastObject];
  [v20 setObject:&__kCFBooleanTrue forVariant:76];

  [v17 send];
}

- (void)_handleToggleQuickNav:(id)a3
{
  id v4 = +[VOTKeyboardManager keyboardManager];
  uint64_t v5 = [v4 isQuickNavOn] ^ 1;

  unsigned int v6 = +[VOTKeyboardManager keyboardManager];
  [v6 updateQuickNavState:v5];

  [(VOTElementManager *)self _handleAnnounceQuickNav:0];
  id v8 = +[VOTConfiguration rootConfiguration];
  unsigned __int8 v7 = +[NSNumber numberWithBool:v5];
  [v8 setPreference:v7 forKey:@"VOTQuickNavEnabled"];
}

- (void)_handleAnnounceQuickNav:(id)a3
{
  id v4 = +[VOTKeyboardManager keyboardManager];
  id v5 = [v4 isQuickNavOn];

  [(VOTElementManager *)self _handleQuickNavFeedback:v5];
  id v7 = +[VOTConfiguration rootConfiguration];
  unsigned int v6 = +[NSNumber numberWithBool:v5];
  [v7 setPreference:v6 forKey:@"VOTQuickNavEnabled"];
}

- (void)_handleQuickNavFeedback:(BOOL)a3
{
  BOOL v3 = a3;
  id v4 = +[AXSettings sharedInstance];
  unsigned __int8 v5 = [v4 voiceOverQuickNavAnnouncementFeedback];

  id v21 = +[VOTOutputRequest createRequest];
  if ((v5 & 2) != 0)
  {
    unsigned int v6 = @"quick.nav.off";
    if (v3) {
      unsigned int v6 = @"quick.nav.on";
    }
    id v7 = (void *)VOTSharedWorkspace;
    id v8 = v6;
    id v9 = [v7 selectedLanguage];
    int v10 = sub_100051D04(off_1001EA9E8, v8, 0, v9);

    id v11 = [v21 addString:v10 withLanguage:v9];
    if ((v5 & 8) != 0)
    {
      int v12 = [v21 lastAction];
      [v12 setObject:&off_1001C4ED8 forVariant:32];
    }
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_23;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  if (v3) {
    +[VOSOutputEvent DidEnableQuickNav];
  }
  else {
  double v13 = +[VOSOutputEvent DidDisableQuickNav];
  }
  double v14 = [v21 lastAction];
  id v15 = v14;
  if (v14)
  {
    [v14 addOutputEvent:v13];
  }
  else
  {
    id v16 = +[VOTOutputManager outputManager];
    [v16 sendEvent:v13];
  }
  if ((v5 & 0x10) == 0) {
    goto LABEL_23;
  }
LABEL_17:
  if ((v5 & 2) == 0)
  {
    if (v3) {
      id v17 = @"quick.nav.on";
    }
    else {
      id v17 = @"quick.nav.off";
    }
    id v18 = sub_100051804(off_1001EA9E8, v17, 0);
    id v19 = [v21 addString:v18];
    double v20 = [v21 lastAction];
    [v20 setObject:&__kCFBooleanTrue forVariant:76];
  }
  [v21 setGeneratesBraille:1];
LABEL_23:
  [v21 setCannotBeInterrupted:1];
  [v21 send];
}

- (void)fetchElementsFrom:(id)a3 inDirection:(int64_t)a4 count:(unint64_t)a5 scroll:(BOOL)a6 block:(id)a7
{
  BOOL v7 = a6;
  elementManagerThread = self->_elementManagerThread;
  id v13 = a7;
  id v14 = a3;
  id v18 = +[NSNumber numberWithInteger:a4];
  id v15 = +[NSNumber numberWithUnsignedInteger:a5];
  id v16 = +[NSNumber numberWithBool:v7];
  id v17 = objc_retainBlock(v13);

  -[SCRCThread performSelector:onTarget:count:objects:](elementManagerThread, "performSelector:onTarget:count:objects:", "_fetchElementsFrom:inDirection:count:scroll:block:", self, 5, v14, v18, v15, v16, v17);
}

- (void)_fetchElementsFrom:(id)a3 inDirection:(id)a4 count:(id)a5 scroll:(id)a6 block:(id)a7
{
  id v12 = a7;
  id v13 = a6;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  id v20 = [(VOTElementManager *)self _getNewElementExplorer];
  id v17 = [v15 integerValue];

  id v18 = [v14 unsignedIntegerValue];
  id v19 = [v13 BOOLValue];

  [v20 fetchElementsFrom:v16 inDirection:v17 count:v18 scroll:v19 block:v12];
}

- (id)_getNewElementExplorer
{
  BOOL v3 = [_VOTElementExplorer alloc];
  id v4 = [(VOTElementManager *)self _copyMatchBlockAnyElement];
  unsigned __int8 v5 = [(_VOTElementExplorer *)v3 initWithElementManager:self MatchBlock:v4];

  [(NSLock *)self->_explorersLock lock];
  [(NSMutableArray *)self->_explorers addObject:v5];
  [(NSLock *)self->_explorersLock unlock];

  return v5;
}

- (void)removeElementExplorer:(id)a3
{
  explorersLock = self->_explorersLock;
  id v5 = a3;
  [(NSLock *)explorersLock lock];
  [(NSMutableArray *)self->_explorers removeObject:v5];

  unsigned int v6 = self->_explorersLock;

  [(NSLock *)v6 unlock];
}

- (void)_sendBSIStateChangedNotification:(BOOL)a3 usage:(int64_t)a4
{
  v9[0] = @"VOTBSIStateChangedNotificationActive";
  id v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:");
  v10[0] = v5;
  v9[1] = @"VOTBSIStateChangedNotificationUsage";
  unsigned int v6 = +[NSNumber numberWithInteger:a4];
  v10[1] = v6;
  BOOL v7 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];

  id v8 = v7;
  AXPerformBlockOnMainThreadAfterDelay();
}

- (void)_sendBSIActiveStateOffNotificationAndNotify
{
}

- (void)deactivateGesturedTextInputIfNeeded:(BOOL)a3
{
  elementManagerThread = self->_elementManagerThread;
  id v5 = +[NSNumber numberWithBool:a3];
  [(SCRCThread *)elementManagerThread performSelector:"_deactivateGesturedTextInputIfNeeded:" onTarget:self count:1 objects:v5];
}

- (void)_deactivateGesturedTextInputIfNeeded:(id)a3
{
  id v4 = a3;
  if (([(id)VOTSharedWorkspace brailleInputWantsToStayActive] & 1) == 0
    && !-[VOTElementManager forceRotorOffGesturedTextInputIfNeeded:](self, "forceRotorOffGesturedTextInputIfNeeded:", [v4 BOOLValue])&& objc_msgSend((id)VOTSharedWorkspace, "brailleInputActive"))
  {
    [(VOTElementManager *)self _sendBSIActiveStateOffNotificationAndNotify];
  }
}

- (void)_handleActivateBrailleScreenInput:(id)a3
{
  id v4 = +[AXSettings sharedInstance];
  unsigned int v5 = [v4 voiceOverTouchBrailleGesturesActivationGestureEnabled];

  if (v5 && ([(id)VOTSharedWorkspace brailleInputActive] & 1) == 0)
  {
    if (self->_flags.shouldUpdateRotorForElement) {
      [(VOTElementManager *)self _updateRotorForCurrentElement];
    }
    if ([(VOTRotor *)self->_elementRotor indexOfRotorItem:62] == -1)
    {
      [(VOTElementManager *)self _sendBSIStateChangedNotification:1 usage:0];
    }
    else
    {
      unsigned int v6 = VOTLogBrailleGestures();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Activate BSI: BSI in the rotor. Setting the rotor to BSI.", v7, 2u);
      }

      [(VOTElementManager *)self _setElementRotorToType:62 saveToPreferences:1 userInitiated:1];
    }
  }
}

- (void)_handleActivateBrailleScreenInputCommand:(id)a3
{
  id v4 = +[AXSettings sharedInstance];
  unsigned int v5 = [v4 voiceOverTouchBrailleGesturesActivationGestureEnabled];

  if (v5 && ([(id)VOTSharedWorkspace brailleInputActive] & 1) == 0)
  {
    [(VOTElementManager *)self _sendBSIStateChangedNotification:1 usage:1];
  }
}

- (void)_handleDeactivateBrailleScreenInput:(id)a3
{
  if (objc_msgSend((id)VOTSharedWorkspace, "brailleInputActive", a3))
  {
    if (self->_flags.shouldUpdateRotorForElement) {
      [(VOTElementManager *)self _updateRotorForCurrentElement];
    }
    if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)62)
    {
      unsigned __int8 v4 = [(id)VOTSharedWorkspace brailleInputShouldBeDeactivatedByEscape];
      uint64_t v5 = [(VOTRotor *)self->_elementRotor previousRotorType];
      if (sub_1000F2B98(v5) || [(VOTRotor *)self->_elementRotor indexOfRotorItem:v5] == -1)
      {
        id v8 = VOTLogBrailleGestures();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v9) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Deactivate BSI: force rotor off gestured text input if needed.", (uint8_t *)&v9, 2u);
        }

        [(VOTElementManager *)self forceRotorOffGesturedTextInputIfNeeded:0];
        if (v4) {
          goto LABEL_18;
        }
      }
      else
      {
        unsigned int v6 = VOTLogBrailleGestures();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v7 = +[NSNumber numberWithInteger:v5];
          int v9 = 138412290;
          int v10 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Deactivate BSI: setting rotor to the previous one (%@).", (uint8_t *)&v9, 0xCu);
        }
        [(VOTElementManager *)self _setElementRotorToType:v5 saveToPreferences:1 userInitiated:1];
        if (v4) {
          goto LABEL_18;
        }
      }
      [(VOTElementManager *)self _sendBSIActiveStateOffNotificationAndNotify];
LABEL_18:
      [(VOTElementManager *)self _outputCurrentElementRotor];
      return;
    }
    [(VOTElementManager *)self _sendBSIActiveStateOffNotificationAndNotify];
  }
}

- (void)_handleReconnectBrailleDisplays:(id)a3
{
  BOOL v3 = VOTLogBraille();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Posting kAXSVoiceOverTouchBrailleReconnectionTriggeredNotification", v12, 2u);
  }

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, kAXSVoiceOverTouchBrailleReconnectionTriggeredNotification, 0, 0, 1u);
  uint64_t v5 = +[VOTOutputManager outputManager];
  unsigned int v6 = +[VOSOutputEvent BrailleDisplayReconnectionTriggered];
  [v5 sendEvent:v6];

  BOOL v7 = objc_alloc_init(VOTOutputRequest);
  id v8 = off_1001EA9E8;
  int v9 = [(id)VOTSharedWorkspace selectedLanguage];
  int v10 = sub_100051D04(v8, @"braille.display.reconnection.triggered", 0, v9);
  id v11 = [(VOTOutputRequest *)v7 addString:v10];

  [(VOTOutputRequest *)v7 send];
}

- (void)_handleTogglePerkinsKeyboardInput:(id)a3
{
  unsigned int v3 = objc_msgSend((id)VOTSharedWorkspace, "perkinsKeyboardInputEnabled", a3);
  [(id)VOTSharedWorkspace setPerkinsKeyboardInputEnabled:v3 ^ 1];
  if (v3) {
    unsigned __int8 v4 = @"perkins.keyboard.input.off";
  }
  else {
    unsigned __int8 v4 = @"perkins.keyboard.input.on";
  }
  sub_100051804(off_1001EA9E8, v4, 0);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = objc_opt_new();
  id v6 = [v5 addString:v9];
  [v5 setGeneratesBraille:1];
  BOOL v7 = [v5 outputActions];
  id v8 = [v7 lastObject];
  [v8 setObject:&__kCFBooleanTrue forVariant:76];

  [v5 send];
}

- (void)_handleBSIPreviousRotor:(id)a3
{
  id v4 = a3;
  if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)62) {
    [(VOTElementManager *)self _sendBSIActiveStateOffNotificationAndNotify];
  }
  [(VOTElementManager *)self _handleSearchRotorLeft:v4];
}

- (void)_handleBSINextRotor:(id)a3
{
  id v4 = a3;
  if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)62) {
    [(VOTElementManager *)self _sendBSIActiveStateOffNotificationAndNotify];
  }
  [(VOTElementManager *)self _handleSearchRotorRight:v4];
}

- (void)_handleBrailleEvent:(id)a3
{
  id v3 = a3;
  id v4 = +[VOTBrailleManager manager];
  [v4 handleEvent:v3];
}

- (void)_handleBrailleRefreshEvent:(id)a3
{
  id v4 = a3;
  id v9 = +[VOTBrailleManager manager];
  uint64_t v5 = [(VOTElementManager *)self _currentElement];
  id v6 = [v4 objectForIndex:106];
  id v7 = [v6 BOOLValue];
  id v8 = [v4 objectForIndex:109];

  [v9 setBrailleElement:v5 resetBrailleCursor:v7 rotorSelection:v8];
}

- (void)_handleBrailleWordWrapToggleEvent:(id)a3
{
  id v4 = +[AXSettings sharedInstance];
  unsigned int v5 = [v4 voiceOverBrailleWordWrapEnabled];

  id v6 = +[AXSettings sharedInstance];
  [v6 setVoiceOverBrailleWordWrapEnabled:v5 ^ 1];

  id v7 = [(id)VOTSharedWorkspace selectedLanguage];
  id v11 = v7;
  if (v5) {
    id v8 = @"braille.word.wrap.off";
  }
  else {
    id v8 = @"braille.word.wrap.on";
  }
  id v9 = sub_100051D04(off_1001EA9E8, v8, 0, v7);
  id v10 = sub_10000ABF8(v9, 0, v11);

  [(VOTElementManager *)self _handleBrailleRefreshEvent:0];
}

- (void)_handleBrailleEnableAutoAdvance:(id)a3
{
  id v3 = +[VOTBrailleManager manager];
  unsigned int v4 = [v3 autoAdvanceEnabled];

  unsigned int v5 = +[VOTBrailleManager manager];
  [v5 setAutoAdvanceEnabled:v4 ^ 1];

  id v6 = [(id)VOTSharedWorkspace selectedLanguage];
  id v10 = v6;
  if (v4) {
    id v7 = @"braille.auto.advance.off";
  }
  else {
    id v7 = @"braille.auto.advance.on";
  }
  id v8 = sub_100051D04(off_1001EA9E8, v7, 0, v6);
  id v9 = sub_10000ABF8(v8, 0, v10);
}

- (void)_handleBrailleDecreaseAutoAdvanceSpeed:(id)a3
{
  [(VOTElementManager *)self _brailleAutoAdvanceStepFactor];
  double v5 = v4;
  id v6 = +[AXSettings sharedInstance];
  [v6 voiceOverBrailleAutoAdvanceDuration];
  double v8 = v5 * v7;

  if (v8 >= kAXSVoiceOverBrailleAutoAdvanceDurationMax) {
    double v8 = kAXSVoiceOverBrailleAutoAdvanceDurationMax;
  }
  id v9 = +[AXSettings sharedInstance];
  [v9 voiceOverBrailleAutoAdvanceDuration];
  double v11 = v10;

  if (vabdd_f64(v8, v11) >= 0.0001)
  {
    id v13 = +[AXSettings sharedInstance];
    [v13 setVoiceOverBrailleAutoAdvanceDuration:v8];

    [(VOTElementManager *)self _speakBrailleAutoAdvanceSpeed];
  }
  else
  {
    id v14 = +[VOTOutputManager outputManager];
    id v12 = +[VOSOutputEvent BoundaryEncountered];
    [v14 sendEvent:v12];
  }
}

- (void)_handleBrailleIncreaseAutoAdvanceSpeed:(id)a3
{
  [(VOTElementManager *)self _brailleAutoAdvanceStepFactor];
  double v5 = v4;
  id v6 = +[AXSettings sharedInstance];
  [v6 voiceOverBrailleAutoAdvanceDuration];
  double v8 = v7 / v5;

  if (v8 < kAXSVoiceOverBrailleAutoAdvanceDurationMin) {
    double v8 = kAXSVoiceOverBrailleAutoAdvanceDurationMin;
  }
  id v9 = +[AXSettings sharedInstance];
  [v9 voiceOverBrailleAutoAdvanceDuration];
  double v11 = v10;

  if (vabdd_f64(v8, v11) >= 0.0001)
  {
    id v13 = +[AXSettings sharedInstance];
    [v13 setVoiceOverBrailleAutoAdvanceDuration:v8];

    [(VOTElementManager *)self _speakBrailleAutoAdvanceSpeed];
  }
  else
  {
    id v14 = +[VOTOutputManager outputManager];
    id v12 = +[VOSOutputEvent BoundaryEncountered];
    [v14 sendEvent:v12];
  }
}

- (double)_brailleAutoAdvanceStepFactor
{
  float v2 = kAXSVoiceOverBrailleAutoAdvanceDurationMax / kAXSVoiceOverBrailleAutoAdvanceDurationMin;
  return powf(v2, 0.05);
}

- (id)_brailleAutoAdvanceSpeedString
{
  id v3 = +[AXSettings sharedInstance];
  [v3 voiceOverBrailleAutoAdvanceDuration];
  double v5 = v4;

  [(VOTElementManager *)self _brailleAutoAdvanceStepFactor];
  id v6 = +[AXSettings sharedInstance];
  [v6 voiceOverBrailleAutoAdvanceDuration];

  v7.n128_f32[0] = round(v5 * 10.0) / 10.0;

  return (id)_AXTimeStringForType(1, v7);
}

- (void)_speakBrailleAutoAdvanceSpeed
{
  id v5 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v3 = [(VOTElementManager *)self _brailleAutoAdvanceSpeedString];
  id v4 = [v5 addString:v3];

  [(VOTElementManager *)self _formatRequestForBrailleAlertConditional:v5];
  [(VOTElementManager *)self sendRequest:v5];
}

- (void)_activateBrailleScreenInputIfNeededForElement:(id)a3
{
  if ([a3 doesHaveAllTraits:kAXIsEditingTrait | kAXTextEntryTrait])
  {
    id v5 = +[AXSettings sharedInstance];
    if ([v5 voiceOverBrailleGesturesEnabled])
    {
      id v3 = +[AXSettings sharedInstance];
      unsigned int v4 = [v3 voiceOverTouchBrailleGesturesAutoActivateOnTextFields];

      if (v4) {
        AXPerformBlockOnMainThreadAfterDelay();
      }
    }
    else
    {
    }
  }
}

- (void)_handleKeyboardCommandEvent:(id)a3
{
  id v4 = a3;
  id v74 = v4;
  if (!self->_keyboardKeyCommands)
  {
    id v58 = objc_allocWithZone((Class)NSDictionary);
    CGRect v64 = +[NSNumber numberWithUnsignedShort:79];
    unsigned int v65 = self;
    unsigned int v73 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v64, &stru_1001B7888, 0);
    uint64_t v55 = kVOTEventCommandRightArrow;
    id v63 = +[NSNumber numberWithUnsignedShort:80];
    unsigned int v72 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v63, &stru_1001B7888, 0);
    uint64_t v54 = kVOTEventCommandLeftArrow;
    double v62 = +[NSNumber numberWithUnsignedShort:81];
    unsigned int v71 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v62, &stru_1001B7888, 0);
    uint64_t v51 = kVOTEventCommandDownArrow;
    double v61 = +[NSNumber numberWithUnsignedShort:82];
    id v70 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v61, &stru_1001B7888, 0);
    uint64_t v50 = kVOTEventCommandUpArrow;
    uint64_t v60 = +[NSNumber numberWithUnsignedShort:42];
    id v59 = +[NSString stringWithUnichar:127];
    id v69 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v60, v59, 0);
    uint64_t v46 = kVOTEventCommandDelete;
    double v57 = +[NSNumber numberWithUnsignedShort:40];
    CGFloat v56 = +[NSString stringWithUnichar:10];
    int v68 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v57, v56, 0);
    uint64_t v43 = kVOTEventCommandReturn;
    double v53 = +[NSNumber numberWithUnsignedShort:43];
    CGFloat v52 = +[NSString stringWithUnichar:9];
    unsigned int v67 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v53, v52, 0);
    uint64_t v42 = kVOTEventCommandTab;
    os_log_type_t v49 = +[NSNumber numberWithUnsignedShort:43];
    uint64_t v48 = +[NSString stringWithUnichar:9];
    unsigned int v47 = +[NSNumber numberWithUnsignedInteger:8];
    int v39 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v49, v48, v47, 0);
    uint64_t v38 = kVOTEventCommandShiftTab;
    uint64_t v45 = +[NSNumber numberWithUnsignedShort:27];
    float v44 = +[NSNumber numberWithUnsignedInteger:1];
    unsigned int v66 = +[NSArray arrayWithObjects:v45, @"x", v44, 0];
    uint64_t v35 = kVOTEventCommandCut;
    unsigned int v41 = +[NSNumber numberWithUnsignedShort:6];
    double v40 = +[NSNumber numberWithUnsignedInteger:1];
    unsigned __int8 v32 = +[NSArray arrayWithObjects:v41, @"c", v40, 0];
    uint64_t v31 = kVOTEventCommandCopy;
    double v37 = +[NSNumber numberWithUnsignedShort:25];
    int64_t v36 = +[NSNumber numberWithUnsignedInteger:1];
    unsigned int v30 = +[NSArray arrayWithObjects:v37, @"v", v36, 0];
    uint64_t v28 = kVOTEventCommandPaste;
    double v34 = +[NSNumber numberWithUnsignedShort:4];
    unsigned __int8 v33 = +[NSNumber numberWithUnsignedInteger:1];
    id v5 = +[NSArray arrayWithObjects:v34, @"a", v33, 0];
    uint64_t v6 = kVOTEventCommandSelectAll;
    id v29 = +[NSNumber numberWithUnsignedShort:29];
    __n128 v7 = +[NSNumber numberWithUnsignedInteger:1];
    double v8 = +[NSArray arrayWithObjects:v29, @"z", v7, 0];
    uint64_t v9 = kVOTEventCommandUndo;
    double v10 = +[NSNumber numberWithUnsignedShort:29];
    double v11 = +[NSNumber numberWithUnsignedInteger:9];
    id v12 = +[NSArray arrayWithObjects:v10, @"z", v11, 0];
    uint64_t v27 = v6;
    self = v65;
    id v13 = (NSDictionary *)objc_msgSend(v58, "initWithObjectsAndKeys:", v73, v55, v72, v54, v71, v51, v70, v50, v69, v46, v68, v43, v67, v42, v39, v38, v66,
                            v35,
                            v32,
                            v31,
                            v30,
                            v28,
                            v5,
                            v27,
                            v8,
                            v9,
                            v12,
                            kVOTEventCommandRedo,
                            0);
    keyboardKeyCommands = v65->_keyboardKeyCommands;
    v65->_keyboardKeyCommands = v13;

    id v4 = v74;
  }
  id v15 = [v4 command];
  unsigned int v16 = [v15 isEqualToString:kVOTEventCommandPaste];

  if (v16)
  {
    id v17 = [(VOTElementManager *)self _currentResponder];
    id v18 = v17;
    if ([v17 doesHaveTraits:kAXWebContentTrait])
    {
      id v18 = [v17 textOperationsOperator];
    }
    [v18 performTextOperation:kAXTextOperationActionPaste];
    id v19 = +[VOTOutputManager outputManager];
    id v20 = +[VOSOutputEvent DidSelectAutofill];
    [v19 sendEvent:v20];
  }
  else
  {
    id v21 = self->_keyboardKeyCommands;
    id v22 = [v74 command];
    id v17 = [(NSDictionary *)v21 objectForKey:v22];

    if (!v17) {
      goto LABEL_13;
    }
    id v23 = [v17 objectAtIndex:1];
    if ((unint64_t)[v17 count] < 3)
    {
      id v25 = 0;
    }
    else
    {
      int v24 = [v17 objectAtIndex:2];
      id v25 = [v24 unsignedIntValue];
    }
    __int16 v26 = (void *)VOTSharedWorkspace;
    id v18 = [v17 objectAtIndex:0];
    objc_msgSend(v26, "postKeyboardEventWithCharacters:originalCharacters:modifiers:keyCode:", v23, v23, v25, objc_msgSend(v18, "unsignedShortValue"));
  }

LABEL_13:
}

- (BOOL)_processWatchSpecificOverrides:(id)a3
{
  unsigned int v4 = [a3 isEqualToString:kVOTEventCommandSelectAll];
  if (v4)
  {
    id v5 = [(VOTElementManager *)self _currentResponder];
    [v5 performTextOperation:kAXTextOperationActionSelectAll];
  }
  return v4;
}

- (BOOL)shouldAllowSpeaking
{
  return CFAbsoluteTimeGetCurrent() - self->_lastPressOnMediaSessionElement >= 3.5;
}

- (void)_handlePerformVolumeUpButtonPress:(id)a3
{
}

- (void)_handlePerformVolumeDownButtonPress:(id)a3
{
}

- (void)_handlePerformEjectButtonPress:(id)a3
{
}

- (void)_setLastSeenDeviceOrientation:(int64_t)a3
{
  self->_id lastSeenApplicationOrientation = a3;
}

- (void)_handleDescribeCameraScene:(id)a3
{
  unsigned int v4 = +[VOTWorkspace sharedWorkspace];
  unsigned __int8 v5 = [v4 imageCaptionsEnabled];

  if (v5)
  {
    uint64_t v6 = [(id)VOTSharedWorkspace visionEngine];
    double v11 = [v6 preferredMediaAnalysisLocale];

    __n128 v7 = [(VOTElementManager *)self cameraSceneDescriber];
    [v7 setIncludeTextDetection:1];

    double v8 = [(VOTElementManager *)self cameraSceneDescriber];
    [v8 imageDescriptionForCurrentCameraScene:&stru_1001B5D30 withPreferredLocale:v11];
  }
  else
  {
    double v11 = objc_alloc_init(VOTOutputRequest);
    uint64_t v9 = sub_10005386C(@"NoCaptionModel");
    id v10 = [(VOTOutputRequest *)v11 addString:v9];

    [(VOTOutputRequest *)v11 setLanguage:0];
    [(VOTOutputRequest *)v11 setBrailleType:2];
    [(VOTOutputRequest *)v11 setCannotBeInterrupted:1];
    [(VOTOutputRequest *)v11 send];
  }
}

- (id)focusedApplication:(id)a3
{
  id v4 = a3;
  if ([(VOTElementManager *)self isOnElementManagerThread])
  {
    unsigned __int8 v5 = self->_currentApplications;
  }
  else
  {
    unsigned __int8 v5 = [(VOTElementManager *)self currentApplications];
  }
  uint64_t v6 = v5;
  __n128 v7 = [v4 appTransition];

  if (!v7) {
    goto LABEL_17;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  double v8 = v6;
  id v9 = [(NSArray *)v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (!v9)
  {

LABEL_17:
    double v11 = [(NSArray *)v6 lastObject];
    goto LABEL_18;
  }
  id v10 = v9;
  id v20 = v6;
  double v11 = 0;
  uint64_t v12 = *(void *)v22;
  do
  {
    for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v22 != v12) {
        objc_enumerationMutation(v8);
      }
      id v14 = *(void **)(*((void *)&v21 + 1) + 8 * i);
      unsigned int v15 = [v14 pid];
      unsigned int v16 = [v4 appTransition];
      unsigned int v17 = [v16 pid];

      if (v15 == v17)
      {
        id v18 = v14;

        double v11 = v18;
      }
    }
    id v10 = [(NSArray *)v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
  }
  while (v10);

  uint64_t v6 = v20;
  if (!v11) {
    goto LABEL_17;
  }
LABEL_18:

  return v11;
}

- (BOOL)speakNonfocusableElementsAfterDelay
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  return self->_speakNonfocusableElementsAfterDelay;
}

- (void)setSpeakNonfocusableElementsAfterDelay:(BOOL)a3
{
  BOOL v3 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  self->_speakNonfocusableElementsAfterDeladouble y = v3;
  id v5 = +[AXSettings sharedInstance];
  [v5 setVoiceOverSpeakNonfocusableElementsAfterDelay:v3];
}

- (BOOL)shouldSilenceAnnouncements
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  return self->_shouldSilenceAnnouncements;
}

- (void)setShouldSilenceAnnouncements:(BOOL)a3
{
  BOOL v3 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  self->_shouldSilenceAnnouncements = v3;
  id v5 = +[AXSettings sharedInstance];
  [v5 setVoiceOverSilenceAnnouncements:v3];
}

- (BOOL)exploreFocusAffectsNativeFocus
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  return self->_exploreFocusAffectsNativeFocus;
}

- (void)setExploreFocusAffectsNativeFocus:(BOOL)a3
{
  BOOL v3 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  self->_exploreFocusAffectsNativeFocus = v3;
  id v5 = +[AXSettings sharedInstance];
  [v5 setVoiceOverExploreFocusAffectsNativeFocus:v3];
}

- (BOOL)_isDictationInProgressForCurrentApp
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  BOOL v3 = [(VOTElementManager *)self focusedApplication:0];
  unsigned __int8 v4 = [v3 isDictationListening];

  return v4;
}

- (BOOL)handleTVMenuButtonClicked
{
  if (self->_flags.itemChooserVisible)
  {
    [(VOTElementManager *)self _closeItemChooser];
    return 1;
  }
  if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2)
  {
    [(SCRCThread *)self->_elementManagerThread performSelector:"__handleTVMenuButtonClicked" onTarget:self count:0 objects:0];
    return 1;
  }
  return 0;
}

- (BOOL)handleTVSelectButtonClicked
{
  return 0;
}

- (void)__handleTVMenuButtonClicked
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2)
  {
    BOOL v3 = [(VOTElementManager *)self _currentElement];
    if (([v3 isContainedByPreferredNativeFocusElement] & 1) != 0
      || [v3 allowsActivationWithoutBeingNativeFocused])
    {
      unsigned __int8 v4 = [v3 performEscape];

      if (v4) {
        return;
      }
    }
    else
    {
    }
  }

  [(VOTElementManager *)self __sendTVRemoteCommand:6];
}

- (void)__handleTVSelectButtonClicked
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if ((id)[(VOTRotor *)self->_elementRotor currentRotorType] == (id)55)
  {
    [(VOTElementManager *)self _handlePerformCustomAction:0];
    return;
  }
  if (self->_flags.itemChooserVisible)
  {
    [(VOTElementManager *)self _closeItemChooser];
    return;
  }
  if (![(id)VOTSharedWorkspace tvInteractionMode]
    || [(id)VOTSharedWorkspace tvInteractionMode] == (id)1)
  {
    [(VOTElementManager *)self __sendTVRemoteCommand:4];
    return;
  }
  if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2)
  {
    BOOL v3 = [(VOTElementManager *)self _currentElement];
    id v10 = v3;
    if (!v3)
    {
      id v5 = +[AXSystemAppServer server];
      unsigned int v6 = [v5 isScreenSaverVisible];

      if (v6) {
        [(VOTElementManager *)self __sendTVRemoteCommand:6];
      }
      goto LABEL_35;
    }
    if ([v3 allowsActivationWithoutBeingNativeFocused])
    {
      if ([v10 activateIfSupported])
      {
LABEL_35:

        return;
      }
      unsigned __int8 v4 = +[VOTOutputManager outputManager];
    }
    else
    {
      if ([v10 isContainedByPreferredNativeFocusElement])
      {
        if (([v10 activateIfSupported] & 1) == 0) {
          [(VOTElementManager *)self __sendTVRemoteCommand:4];
        }
        unsigned __int8 v4 = +[VOTOutputManager outputManager];
        uint64_t v7 = +[VOSOutputEvent DidActivateElement];
        goto LABEL_34;
      }
      unsigned int v8 = [v10 setNativeFocus];
      unsigned __int8 v4 = +[VOTOutputManager outputManager];
      if (v8)
      {
        uint64_t v7 = +[VOSOutputEvent DidFocusOnElement];
LABEL_34:
        id v9 = (void *)v7;
        [v4 sendEvent:v7];

        goto LABEL_35;
      }
    }
    uint64_t v7 = +[VOSOutputEvent BoundaryEncountered];
    goto LABEL_34;
  }

  _AXAssert();
}

- (BOOL)_sendTVRemoteCommandOverrideForAXCommand:(int64_t)a3
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  int64_t v5 = a3 - 8;
  if ((unint64_t)(a3 - 8) > 9 || ((0x303u >> v5) & 1) == 0) {
    return 0;
  }
  [(VOTElementManager *)self __sendTVRemoteCommand:qword_10016E820[v5]];
  return 1;
}

- (void)__sendTVRemoteCommand:(unint64_t)a3
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  int64_t v5 = +[AXSettings sharedInstance];
  if ([v5 voiceOverUseTVToggleStyleNavigation])
  {
    unsigned int v6 = [(VOTElementManager *)self tvIsInteractingWithRotor];

    if (v6)
    {
      [(VOTElementManager *)self setTvIsInteractingWithRotor:0];
      return;
    }
  }
  else
  {
  }
  uint64_t v7 = [(VOTElementManager *)self focusedApplication:0];
  unsigned int v8 = v7;
  uint64_t v9 = 1219;
  uint64_t v10 = 1218;
  double v11 = 0.05;
  switch(a3)
  {
    case 0uLL:
      if (objc_msgSend(v7, "applicationHandleRemoteUpButton", 1218)) {
        goto LABEL_18;
      }
      uint64_t v9 = 1201;
      uint64_t v10 = 1200;
      goto LABEL_23;
    case 1uLL:
      if (objc_msgSend(v7, "applicationHandleRemoteRightButton", 1218)) {
        goto LABEL_18;
      }
      uint64_t v9 = 1207;
      uint64_t v10 = 1206;
      goto LABEL_23;
    case 2uLL:
      if (objc_msgSend(v7, "applicationHandleRemoteDownButton", 1218)) {
        goto LABEL_18;
      }
      uint64_t v9 = 1203;
      uint64_t v10 = 1202;
      goto LABEL_23;
    case 3uLL:
      if (objc_msgSend(v7, "applicationHandleRemoteLeftButton", 1218)) {
        goto LABEL_18;
      }
      uint64_t v9 = 1205;
      uint64_t v10 = 1204;
      goto LABEL_23;
    case 4uLL:
      goto LABEL_23;
    case 5uLL:
      uint64_t v9 = 1223;
      uint64_t v10 = 1222;
      goto LABEL_23;
    case 6uLL:
      goto LABEL_20;
    case 7uLL:
      double v11 = 1.25;
LABEL_20:
      uint64_t v9 = 1217;
      uint64_t v10 = 1216;
LABEL_23:
      id v17 = +[AXEventRepresentation buttonRepresentationWithType:v10];
      uint64_t v13 = +[AXEventRepresentation buttonRepresentationWithType:v9];
      uint64_t v12 = (void *)v13;
      if (v17 && v13)
      {
        id v14 = +[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", v17, v13, 0);
        unsigned int v15 = +[NSNumber numberWithDouble:v11];
        unsigned int v16 = +[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", v15, &off_1001C5590, 0);

        [(VOTElementManager *)self __sendHIDEvents:v14 postEventDelays:v16];
      }
      break;
    default:
LABEL_18:
      id v17 = 0;
      uint64_t v12 = 0;
      break;
  }
}

- (void)__sendHIDEvents:(id)a3 postEventDelays:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v8 = [v6 count];
  if (v8 == [v7 count])
  {
    uint64_t v9 = [v6 firstObject];
    uint64_t v10 = [v7 firstObject];
    [v10 doubleValue];
    double v12 = v11;

    if (v9)
    {
      uint64_t v13 = +[AXEventTapManager sharedManager];
      [v13 sendHIDSystemEvent:v9 repostCreatorHIDEvent:0 senderID:0x8000000817319373];
    }
    [v6 removeObjectAtIndex:0];
    [v7 removeObjectAtIndex:0];
    if ([v6 count])
    {
      dispatch_time_t v14 = dispatch_time(0, (uint64_t)(v12 * 1000000000.0));
      unsigned int v15 = dispatch_get_global_queue(2, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000A8F80;
      block[3] = &unk_1001B48E0;
      block[4] = self;
      id v17 = v6;
      id v18 = v7;
      dispatch_after(v14, v15, block);
    }
  }
  else
  {
    _AXAssert();
  }
}

- (void)__tvOS_toggleAudioDescriptions
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (_AXSInUnitTestMode()
    || ([(VOTElementManager *)self focusedApplication:0],
        BOOL v3 = objc_claimAutoreleasedReturnValue(),
        unsigned int v4 = [v3 fullscreenVideoViewIsVisible],
        v3,
        v4))
  {
    CFBooleanRef v5 = (const __CFBoolean *)MAAudibleMediaPrefCopyPreferDescriptiveVideo();
    if (v5
      || (+[NSNumber numberWithBool:0],
          (CFBooleanRef v5 = (const __CFBoolean *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      id v9 = [(id)VOTSharedWorkspace selectedLanguage];
      if (CFBooleanGetValue(v5)) {
        id v6 = @"audio.descriptions.disabled";
      }
      else {
        id v6 = @"audio.descriptions.enabled";
      }
      MAAudibleMediaPrefSetPreferDescriptiveVideo();
      id v7 = sub_100051D04(off_1001EA9E8, v6, 0, v9);
      id v8 = sub_10000ABF8(v7, 0, v9);

      CFRelease(v5);
    }
  }
}

- (void)__tvOS_toggleSpeakNonfocusableElementsAfterDelayUserPreference
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  [(VOTElementManager *)self setSpeakNonfocusableElementsAfterDelay:[(VOTElementManager *)self speakNonfocusableElementsAfterDelay] ^ 1];
  BOOL v3 = +[VOTWorkspace sharedWorkspace];
  id v6 = [v3 selectedLanguage];

  if ([(VOTElementManager *)self speakNonfocusableElementsAfterDelay]) {
    unsigned int v4 = @"element.on.text";
  }
  else {
    unsigned int v4 = @"element.off.text";
  }
  CFBooleanRef v5 = sub_100051D04(off_1001EA9E8, v4, 0, v6);
  [(VOTElementManager *)self _speak:v5 cannotBeInterrupted:0];
}

- (int64_t)_tvOS_userPreferredNonDirectTouchInteractionMode
{
  return 2;
}

- (void)__tvOS_toggleSilenceAnnouncementsUserPreference
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  [(VOTElementManager *)self setShouldSilenceAnnouncements:[(VOTElementManager *)self shouldSilenceAnnouncements] ^ 1];
  BOOL v3 = +[VOTWorkspace sharedWorkspace];
  id v6 = [v3 selectedLanguage];

  if ([(VOTElementManager *)self shouldSilenceAnnouncements]) {
    unsigned int v4 = @"element.on.text";
  }
  else {
    unsigned int v4 = @"element.off.text";
  }
  CFBooleanRef v5 = sub_100051D04(off_1001EA9E8, v4, 0, v6);
  [(VOTElementManager *)self _speak:v5 cannotBeInterrupted:0];
}

- (void)__tvOS_toggleExploreFocusAffectsNativeFocusPreference
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  [(VOTElementManager *)self setExploreFocusAffectsNativeFocus:[(VOTElementManager *)self exploreFocusAffectsNativeFocus] ^ 1];
  BOOL v3 = +[VOTWorkspace sharedWorkspace];
  id v6 = [v3 selectedLanguage];

  if ([(VOTElementManager *)self exploreFocusAffectsNativeFocus]) {
    unsigned int v4 = @"element.on.text";
  }
  else {
    unsigned int v4 = @"element.off.text";
  }
  CFBooleanRef v5 = sub_100051D04(off_1001EA9E8, v4, 0, v6);
  [(VOTElementManager *)self _speak:v5 cannotBeInterrupted:0];
}

- (void)__updateElementVisuals
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  BOOL v3 = [(VOTElementManager *)self _currentElement];
  if (v3)
  {
    id v7 = v3;
    unsigned int v4 = [(VOTElementManager *)self explorerElementManager];
    CFBooleanRef v5 = [v4 currentExplorerElement];

    BOOL v3 = v7;
    if (!v5)
    {
      [v7 updateFrame];
      [v7 updatePaths];
      id v6 = +[VOTDisplayManager displayManager];
      [v6 setCursorFrameForElement:v7 animated:0];

      BOOL v3 = v7;
    }
  }
}

- (BOOL)_didFocusUpdateOriginateFromFocusedApp:(id)a3
{
  id v4 = a3;
  id v5 = [v4 senderPID];
  if (v5 == -1
    || (id v6 = v5, ([v4 senderIsAppExtension] & 1) != 0)
    || [v4 reason] == (id)5
    && ([v4 focusElement], id v7 = objc_claimAutoreleasedReturnValue(), v7, v7))
  {
    id v8 = 0;
LABEL_6:
    BOOL v9 = 1;
    goto LABEL_7;
  }
  id v8 = [(VOTElementManager *)self focusedApplication:v4];
  if ([v8 pid] == v6) {
    goto LABEL_6;
  }
  double v11 = [v8 bundleIdentifier];
  unsigned int v12 = [v11 isEqualToString:@"com.apple.PineBoard"];

  if (v12)
  {
    uint64_t v13 = [v4 senderBundleID];
    if (([v13 isEqualToString:@"com.apple.siri"] & 1) != 0
      || ([v13 isEqualToString:@"com.apple.TVWLAccessService"] & 1) != 0
      || [v13 isEqualToString:@"com.apple.TVSystemMenuService"])
    {

      goto LABEL_6;
    }
  }
  dispatch_time_t v14 = VOTLogTVFocus();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    unsigned int v15 = +[NSNumber numberWithInt:v6];
    unsigned int v16 = [v4 senderBundleID];
    int v17 = 138543874;
    id v18 = v15;
    __int16 v19 = 2114;
    id v20 = v16;
    __int16 v21 = 2114;
    long long v22 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "update focus request did not come from focused app. ignoring.\nSender PID: %{public}@. BundleID: %{public}@. \nCurrent App: %{public}@", (uint8_t *)&v17, 0x20u);
  }
  BOOL v9 = 0;
LABEL_7:

  return v9;
}

- (void)_tvOS_updateWithNativeFocus:(id)a3 withDelayNumber:(id)a4
{
  id v6 = a3;
  [a4 doubleValue];
  -[VOTElementManager _tvOS_updateWithNativeFocus:withDelay:](self, "_tvOS_updateWithNativeFocus:withDelay:", v6);
}

- (void)_tvOS_updateWithNativeFocus:(id)a3 withDelay:(double)a4
{
  id v6 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (![(VOTElementManager *)self _isDictationInProgressForCurrentApp]
    && [(VOTElementManager *)self _didFocusUpdateOriginateFromFocusedApp:v6])
  {
    [(NSLock *)self->_tvAccessLock lock];
    self->_needsUpdateFocus = 1;
    [(VOTElementManager *)self setUpdateFocusContext:v6];
    id v7 = VOTLogTVFocus();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = +[NSNumber numberWithBool:self->_isUpdatingFocus];
      int v9 = 138543874;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      double v12 = a4;
      __int16 v13 = 2114;
      id v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "asking to update. isUpdating: %{public}@. delay: %.2f\n%{public}@", (uint8_t *)&v9, 0x20u);
    }
    [(SCRCTargetSelectorTimer *)self->_updateWithNativeFocusTimer dispatchAfterDelay:a4];
    [(NSLock *)self->_tvAccessLock unlock];
  }
}

- (void)_tvOS_handleUpdateWithNativeFocusFromTimer
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (!self->_isUpdatingFocus)
  {
    self->_isUpdatingFocus = 1;
    [(VOTElementManager *)self _tvOS_updateWithNativeFocus];
  }
}

- (id)_focusElementForFocusUpdate:(id)a3
{
  id v4 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v5 = [(VOTElementManager *)self focusedApplication:v4];
  id v6 = [v4 focusElement];
  if (!v6)
  {
    if (v5)
    {
      id v6 = [v5 nativeFocusPreferredElement];
    }
    else
    {
      id v7 = VOTLogTVFocus();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Suspicious: currentApp was nil", v9, 2u);
      }

      id v6 = 0;
    }
    [v4 setFocusElement:v6];
  }

  return v6;
}

- (void)_tvOS_retryUpdateWithNativeFocus
{
  [(VOTElementManager *)self setWaitingToRetryFocus:0];
  if ((unint64_t)[(VOTElementManager *)self focusRetryAttempts] <= 0x13)
  {
    BOOL v3 = +[VOTOutputManager outputManager];
    unsigned __int8 v4 = [v3 isSpeaking];

    if (v4)
    {
      [(VOTElementManager *)self setWaitingToRetryFocus:0];
      dispatch_time_t v5 = dispatch_time(0, (uint64_t)(kSCRCThreadWaitShort * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000A9C08;
      block[3] = &unk_1001B33B8;
      block[4] = self;
      dispatch_after(v5, (dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
      [(VOTElementManager *)self setFocusRetryAttempts:(char *)[(VOTElementManager *)self focusRetryAttempts] + 1];
      [(VOTElementManager *)self _tvOS_updateWithNativeFocus];
    }
  }
}

- (void)_tvOS_updateWithNativeFocus
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (![(VOTElementManager *)self waitingToRetryFocus])
  {
    id v3 = [(id)VOTSharedWorkspace tvInteractionMode];
    if (v3 == (id)2
      && CFAbsoluteTimeGetCurrent() - self->_lastScreenChangeNotificationTime < 1.0
      && ![(VOTElementManager *)self forceUpdateMask])
    {
      uint64_t v31 = VOTLogTVFocus();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Ignoring focusUpdate because a screen change was just handled", buf, 2u);
      }

      unsigned __int8 v4 = 0;
      uint64_t v28 = 0;
      id v14 = 0;
      dispatch_time_t v5 = 0;
      int v9 = 0;
      self->_isUpdatingFocus = 0;
      goto LABEL_73;
    }
    unsigned __int8 v4 = 0;
    os_log_type_t v49 = 0;
    dispatch_time_t v5 = 0;
    for (uint64_t i = 0; ; uint64_t i = v14)
    {
      id v7 = v4;
      self->_needsUpdateFocus = 0;
      [(NSLock *)self->_tvAccessLock lock];
      unsigned __int8 v4 = [(VOTElementManager *)self updateFocusContext];

      [(NSLock *)self->_tvAccessLock unlock];
      if (([v4 shouldIgnorePreviousFocusedElement] & 1) != 0
        || [(VOTElementManager *)self forceUpdateMask])
      {
        id v8 = [(VOTElementManager *)self tvSpeechRequestManager];
        [v8 reset];
      }
      int v9 = [(VOTElementManager *)self _focusElementForFocusUpdate:v4];

      uint64_t v10 = VOTLogTVFocus();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138543362;
        CGFloat v52 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Update FocusElement Candidate: %{public}@", buf, 0xCu);
      }

      if (!v9) {
        break;
      }
      if (([v9 isEqual:i] & 1) != 0 || !objc_msgSend(v9, "differenceAspectMask:", i))
      {
        int64_t v11 = [(VOTElementManager *)self forceUpdateMask];
        double v12 = VOTLogTVFocus();
        BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
        if (!v11)
        {
          if (v13)
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Pending and focus element the same after short delay. Going with original", buf, 2u);
          }
          goto LABEL_48;
        }
        if (v13)
        {
          *(_DWORD *)long long buf = 138543362;
          CGFloat v52 = v9;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Force update mask set. proceeding with element: %{public}@", buf, 0xCu);
        }
      }
      id v14 = v9;

      if (v3 == (id)2)
      {
        id v15 = [(VOTElementManager *)self __targetElementForFocusElement:v14 mustBeAccessibilityElement:1];

        [(VOTElementRotor *)self->_elementRotor updateRotorForElement:v15 shouldPreserveRotorNavigation:1 firstResponder:self->_firstResponderElement];
      }
      else
      {
        id v15 = v14;

        [(VOTElementRotor *)self->_elementRotor updateRotorForElement:v15 shouldPreserveRotorNavigation:1 firstResponder:self->_firstResponderElement];
        unsigned int v16 = [(VOTElementManager *)self tvSpeechRequestManager];
        unsigned int v17 = objc_msgSend(v16, "updateHeadersAndElementsWithTarget:ignoreLastUpdate:", v15, objc_msgSend(v4, "shouldIgnorePreviousFocusedElement"));

        if (v17)
        {
          char v50 = 0;
          id v18 = [(VOTElementManager *)self tvSpeechRequestManager];
          __int16 v19 = [v18 generateOutputRequest:&v50];

          if (!v50)
          {
            id v20 = VOTLogTVFocus();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "result outputRequest same as last time. setting to nil", buf, 2u);
            }

            __int16 v19 = 0;
          }
          os_log_type_t v49 = v19;
        }
        __int16 v21 = [(VOTElementManager *)self explorerElementManager];
        [v21 cancelCurrentReadAll];

        long long v22 = [(VOTElementManager *)self explorerElementManager];
        long long v23 = [v22 explorerElements];
        id v24 = [v23 count];

        if (!v24) {
          self->_explorerElementsNeedUpdate = 1;
        }
      }
      dispatch_time_t v5 = v15;
      if (!self->_needsUpdateFocus)
      {
        uint64_t v28 = v49;
        goto LABEL_50;
      }
      id v25 = VOTLogTVFocus();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "reject focus change. Going again", buf, 2u);
      }
    }
    __int16 v26 = VOTLogTVFocus();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "FocusElement was nil", buf, 2u);
    }

    [(VOTElementManager *)self setNativeFocusElement:0];
    uint64_t v27 = [(VOTElementManager *)self tvSpeechRequestManager];
    [v27 reset];

    uint64_t v28 = v49;
    if (v3 == (id)2)
    {
      id v14 = 0;
      goto LABEL_50;
    }
    id v29 = +[VOTDisplayManager displayManager];
    [v29 setCursorFrameForElement:0];

    [(VOTElementRotor *)self->_elementRotor updateRotorForElement:0 shouldPreserveRotorNavigation:1 firstResponder:self->_firstResponderElement];
    double v12 = [(VOTElementManager *)self __consumeAppTransitionForAnnouncingIfNeeded:v4];
    if (v12)
    {
      uint64_t v28 = objc_alloc_init(VOTOutputRequest);

      id v30 = [(VOTOutputRequest *)v28 addString:v12 breakWords:0 withLanguage:0 atIndex:0];
      [(VOTOutputRequest *)v28 setGeneratesBraille:1];
      uint64_t i = 0;
      goto LABEL_49;
    }
    self->_explorerElementsNeedUpdate = 1;
    [(VOTElementManager *)self _updateExplorerElementsIfNeeded];
    unsigned __int8 v32 = +[VOTExplorerElementManagerContext context];
    unsigned __int8 v33 = [(VOTElementManager *)self explorerElementManager];
    [v33 readAll:v32];

    uint64_t i = 0;
LABEL_48:
    uint64_t v28 = v49;
LABEL_49:

    id v14 = i;
LABEL_50:
    double v34 = VOTLogTVFocus();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138543618;
      CGFloat v52 = v9;
      __int16 v53 = 2114;
      uint64_t v54 = v28;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Did accept focus change: %{public}@\nOutputRequest:%{public}@", buf, 0x16u);
    }

    [(VOTElementManager *)self setNativeFocusElement:v9];
    self->_forceUpdateMask = 0;
    self->_isUpdatingFocus = 0;
    self->_explorerElementsNeedUpdate = 1;
    uint64_t v35 = [(VOTElementManager *)self explorerElementManager];
    [v35 setCurrentExplorerElement:0];

    self->_elementUnitIndeCGFloat x = -1;
    if (v3 != (id)2)
    {
      double v40 = +[VOTCommandHelper commandHelper];
      if ([v9 handlesGestureArea])
      {
        [v40 setHelpEnabled:1];
        objc_msgSend(v40, "setPracticeRegion:", 0.0, 0.0, xmmword_1001EBE30);
        [v40 setPracticeElement:v9];
      }
      else if ([v40 helpEnabled])
      {
        [v40 setHelpEnabled:0];
      }
      unsigned int v41 = [(VOTOutputRequest *)v28 outputActions];
      id v42 = [v41 count];

      if (v42)
      {
        uint64_t v43 = [(VOTElementManager *)self explorerElementManager];
        [v43 cancelPendingReadAll];

        self->_shouldReadExplorerElementsAfterSpeechFinished = 1;
        float v44 = [(VOTElementManager *)self __consumeAppTransitionForAnnouncingIfNeeded:v4];
        if (v44) {
          id v45 = [(VOTOutputRequest *)v28 addString:v44 breakWords:0 withLanguage:0 atIndex:0];
        }
        [(VOTElementManager *)self __sendOutputRequest:v28];
      }
      [(VOTElementManager *)self _setCurrentElement:0];

      int64_t v36 = +[VOTDisplayManager displayManager];
      [v36 setCursorFrameForElement:v9];
      goto LABEL_71;
    }
    int64_t v36 = [(VOTElementManager *)self _currentElement];
    unint64_t v37 = (unint64_t)[v36 traits];
    if (((kAXTextEntryTrait | kAXSearchFieldTrait) & v37) != 0)
    {
      unint64_t v38 = (unint64_t)[v5 traits];
      BOOL v39 = (kAXKeyboardKeyTrait & v38) != 0;
      if (!v5)
      {
LABEL_71:

        [(VOTElementManager *)self __updateVoiceOverEnabledWarningBannerVisibility];
        unsigned int v47 = [v4 updateFocusComplete];

        if (v47)
        {
          uint64_t v48 = [v4 updateFocusComplete];
          v48[2]();
        }
LABEL_73:

        return;
      }
    }
    else
    {
      BOOL v39 = 0;
      if (!v5) {
        goto LABEL_71;
      }
    }
    if ([v5 differenceAspectMask:v36]) {
      char v46 = v39;
    }
    else {
      char v46 = 1;
    }
    if ((v46 & 1) == 0) {
      -[VOTElementManager _moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:](self, "_moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:", v5, [v5 shouldPlaySoundWhenFocused], 0, 0);
    }
    goto LABEL_71;
  }
}

- (BOOL)_bundleIdentifierIsHostedByPineBoard:(id)a3
{
  id v3 = a3;
  if (([v3 isEqualToString:@"com.apple.TVScreenSaver"] & 1) != 0
    || ([v3 isEqualToString:@"com.apple.TVIdleScreen"] & 1) != 0
    || ([v3 isEqualToString:@"com.apple.TVAirPlay"] & 1) != 0
    || ([v3 isEqualToString:@"com.apple.TVConferenceRoomDisplay"] & 1) != 0)
  {
    unsigned __int8 v4 = 1;
  }
  else
  {
    unsigned __int8 v4 = [v3 isEqualToString:@"com.apple.TVPeripheralAgent"];
  }

  return v4;
}

- (id)__consumeAppTransitionForAnnouncingIfNeeded:(id)a3
{
  id v4 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  dispatch_time_t v5 = [v4 appTransition];
  if (v5)
  {
    id v6 = [(VOTElementManager *)self focusedApplication:v4];
    unsigned int v7 = [v5 pid];
    if (v7 == [v6 pid]
      || [v6 isSystemApp]
      && ([v5 bundleID],
          id v8 = objc_claimAutoreleasedReturnValue(),
          unsigned int v9 = [(VOTElementManager *)self _bundleIdentifierIsHostedByPineBoard:v8], v8, v9))
    {
      uint64_t v10 = [v5 announcableName];
    }
    else
    {
      id v14 = v5;
      id v15 = v6;
      CFStringRef v13 = @"appTransition:%@ does not represent our currentApp:%@";
      LOBYTE(v12) = 1;
      _AXLogWithFacility();
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  objc_msgSend(v4, "setAppTransition:", 0, v12, v13, v14, v15);

  return v10;
}

- (id)__targetElementForFocusElement:(id)a3 mustBeAccessibilityElement:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v7 = [v6 accessibleAncestor];
  if (v7
    || ([v6 accessibleDescendants],
        id v8 = objc_claimAutoreleasedReturnValue(),
        [v8 firstObject],
        id v7 = (id)objc_claimAutoreleasedReturnValue(),
        v8,
        v7))
  {
    if (!v4) {
      goto LABEL_10;
    }
  }
  else
  {
    id v7 = v6;
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (([v7 isAccessibleElement] & 1) == 0)
  {

    id v7 = 0;
  }
LABEL_10:

  return v7;
}

- (void)__handleUpdateVisualsTimer
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }

  [(VOTElementManager *)self __updateElementVisuals];
}

- (void)__tvOS_handleUpdatePreferredTVInteractionModeTimer
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v3 = +[AXSettings sharedInstance];
  objc_msgSend(v3, "setVoiceOverPreferredTVInteractionMode:", objc_msgSend((id)VOTSharedWorkspace, "tvInteractionMode"));
}

- (void)_readExplorerElementsAfterSpeechFinishedTimerFired
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (self->_shouldReadExplorerElementsAfterSpeechFinished)
  {
    self->_shouldReadExplorerElementsAfterSpeechFinished = 0;
    int64_t v3 = [(VOTElementManager *)self currentRotorType];
    if (!self->_flags.isReadingAll)
    {
      int64_t v4 = v3;
      if ([(VOTElementManager *)self speakNonfocusableElementsAfterDelay])
      {
        if (v4 != 1)
        {
          dispatch_time_t v5 = [(VOTElementManager *)self _currentElement];
          if (!v5 || [v5 shouldSpeakExplorerElementsAfterFocus])
          {
            [(VOTElementManager *)self _updateExplorerElementsIfNeeded];
            id v6 = [(VOTElementManager *)self explorerElementManager];
            id v7 = +[VOTExplorerElementManagerContext context];
            [v6 readAll:v7];
          }
          _objc_release_x1();
        }
      }
    }
  }
}

- (void)__tvOS_handleValueChangedWithType:(id)a3 oldValue:(id)a4 newValue:(id)a5 insertedTextOrNil:(id)a6 isSecureText:(BOOL)a7
{
  BOOL v7 = a7;
  id v33 = a3;
  uint64_t v12 = (__CFString *)a5;
  elementManagerThread = self->_elementManagerThread;
  id v14 = (__CFString *)a6;
  id v15 = (__CFString *)a4;
  if (([(SCRCThread *)elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (v12) {
    unsigned int v16 = v12;
  }
  else {
    unsigned int v16 = &stru_1001B7888;
  }
  unsigned int v17 = v16;

  if (v15) {
    id v18 = v15;
  }
  else {
    id v18 = &stru_1001B7888;
  }
  __int16 v19 = v18;

  if (v14) {
    id v20 = v14;
  }
  else {
    id v20 = &stru_1001B7888;
  }
  __int16 v21 = v20;

  if ([(__CFString *)v21 rangeOfString:@"●"] != (id)0x7FFFFFFFFFFFFFFFLL)
  {

    __int16 v21 = 0;
  }
  if (v7 && ([(__CFString *)v17 length] || [(__CFString *)v19 length] == (id)1))
  {
    long long v22 = +[VOTOutputManager outputManager];
    long long v23 = +[VOSOutputEvent DidEnterSecureText];
    [v22 sendEvent:v23];
  }
  id v24 = +[NSMutableArray array];
  id v25 = [(__CFString *)v17 length];
  if ([v33 isEqualToString:kAXValueChangeTypeInsert])
  {
    if (v7)
    {
      [v24 axSafelyAddObject:v21];
      if ([(__CFString *)v17 length])
      {
        __int16 v26 = +[AXAttributedString axAttributedStringWithString:v17];
        [v26 setAttribute:kCFBooleanTrue forKey:off_1001EAB48];
        [v24 addObject:v26];
      }
      uint64_t v27 = 1;
      goto LABEL_43;
    }
    uint64_t v28 = 1;
    goto LABEL_30;
  }
  if (![v33 isEqualToString:kAXValueChangeTypeDelete])
  {
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    if ([v33 isEqualToString:kAXValueChangeTypeReplacement])
    {
LABEL_30:
      id v29 = [(__CFString *)v17 stringByReplacingOccurrencesOfString:v19 withString:&stru_1001B7888];
      [v24 axSafelyAddObject:v29];

      uint64_t v27 = v28;
    }
LABEL_31:
    if (!v7 && v25 && ([v24 containsObject:v17] & 1) == 0)
    {
      if ([v24 count]) {
        [v24 addObject:off_1001EAB38];
      }
      [v24 addObject:v17];
    }
    goto LABEL_43;
  }
  if (v7)
  {
    [v24 axSafelyAddObject:v17];
    if (v25)
    {
LABEL_27:
      uint64_t v27 = 2;
      goto LABEL_31;
    }
  }
  else
  {
    id v30 = [(__CFString *)v19 stringByReplacingOccurrencesOfString:v17 withString:&stru_1001B7888];
    if ([v30 length]) {
      [v24 axSafelyAddObject:v30];
    }

    if (v25) {
      goto LABEL_27;
    }
  }
  if ([(VOTElementManager *)self _isDictationInProgressForCurrentApp]
    || [v24 count])
  {
    uint64_t v27 = 2;
LABEL_43:
    [(VOTElementManager *)self _speakMessages:v24 cannotBeInterrupted:0 pitch:v27];
    goto LABEL_44;
  }
  uint64_t v31 = +[VOTOutputManager outputManager];
  unsigned __int8 v32 = +[VOSOutputEvent BoundaryEncountered];
  [v31 sendEvent:v32];

LABEL_44:
}

- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4
{
}

- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 announcement:(BOOL)a5 brailleOnly:(BOOL)a6
{
}

- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5
{
}

- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5 announcement:(BOOL)a6 brailleOnly:(BOOL)a7
{
  BOOL v7 = a7;
  BOOL v8 = a6;
  BOOL v10 = a4;
  id v12 = a3;
  if ([v12 length])
  {
    id v14 = v12;
    CFStringRef v13 = +[NSArray arrayWithObjects:&v14 count:1];
    [(VOTElementManager *)self _speakMessages:v13 cannotBeInterrupted:v10 pitch:a5 announcement:v8 brailleOnly:v7];
  }
}

- (void)_speakMessages:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5
{
}

- (void)_speakMessages:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5 announcement:(BOOL)a6 brailleOnly:(BOOL)a7
{
  BOOL v7 = a7;
  BOOL v8 = a6;
  BOOL v9 = a4;
  id v11 = a3;
  if ([v11 count])
  {
    BOOL v28 = v9;
    BOOL v29 = v8;
    id v12 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    CFStringRef v13 = v12;
    if (v7) {
      [v12 setLimitToComponentType:3];
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v14 = v11;
    id v15 = [v14 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v33;
      uint64_t v31 = v13;
      do
      {
        id v18 = 0;
        do
        {
          if (*(void *)v33 != v17) {
            objc_enumerationMutation(v14);
          }
          __int16 v19 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v18);
          if ([v19 isEqualToString:off_1001EAB30])
          {
            LODWORD(v20) = 0.25;
LABEL_15:
            [v13 addPause:v20];
            goto LABEL_16;
          }
          if ([v19 isEqualToString:off_1001EAB38])
          {
            LODWORD(v20) = 0.5;
            goto LABEL_15;
          }
          if ([v19 isEqualToString:off_1001EAB40])
          {
            LODWORD(v20) = 0.75;
            goto LABEL_15;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v21 = v19;
            CFStringRef v13 = v31;
            if ([v21 hasAttribute:off_1001EAB48]) {
              goto LABEL_27;
            }
          }
          else
          {
            id v21 = +[AXAttributedString axAttributedStringWithString:v19];
            CFStringRef v13 = v31;
          }
          id v22 = [v21 length];
          if (a5 == 1)
          {
            long long v23 = &UIAccessibilityTokenHighPitch;
            goto LABEL_26;
          }
          if (a5 == 2)
          {
            long long v23 = &UIAccessibilityTokenLowPitch;
LABEL_26:
            objc_msgSend(v21, "setAttribute:forKey:withRange:", &__kCFBooleanTrue, *v23, 0, v22);
          }
LABEL_27:
          id v24 = [v13 addAttributedString:v21];

LABEL_16:
          id v18 = (char *)v18 + 1;
        }
        while (v16 != v18);
        id v25 = [v14 countByEnumeratingWithState:&v32 objects:v36 count:16];
        id v16 = v25;
      }
      while (v25);
    }

    [v13 setGeneratesBraille:0];
    [v13 setCannotBeInterrupted:v28];
    if (v29)
    {
      objc_storeStrong((id *)&self->_announcementRequest, v13);
      self->_announcementPid = -1;
      __int16 v26 = [v14 firstObject];
      announcementOriginalString = self->_announcementOriginalString;
      self->_announcementOriginalString = v26;

      [v13 setCompletionDelegate:self];
    }
    [(VOTElementManager *)self sendRequest:v13];
  }
}

- (void)__sendOutputRequest:(id)a3
{
  id v4 = a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  [v4 send];
}

- (void)_interruptSpeachAndPlayBorderHitSound
{
}

- (void)__interruptSpeachAndPlayBorderHitSound
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  int64_t v3 = +[VOTOutputManager outputManager];
  [v3 stopSpeakingAtBoundary:0];

  id v5 = +[VOTOutputManager outputManager];
  id v4 = +[VOSOutputEvent BoundaryEncountered];
  [v5 sendEvent:v4];
}

- (void)_updateExplorerElementsIfNeeded
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (self->_explorerElementsNeedUpdate)
  {
    id v13 = [(VOTElementManager *)self focusedApplication:0];
    int64_t v3 = [v13 explorerElements];
    if ([v13 isHeadBoard])
    {
      id v4 = +[VOTElement systemAppApplication];
      id v5 = [v4 explorerElements];
      uint64_t v6 = [v3 arrayByAddingObjectsFromArray:v5];

      int64_t v3 = (void *)v6;
    }
    BOOL v7 = [v13 nativeFocusElement];
    BOOL v8 = [(VOTElementManager *)self explorerElementManager];
    BOOL v9 = [(VOTElementManager *)self __targetElementForFocusElement:v7 mustBeAccessibilityElement:0];
    [v8 updateWithExplorerElements:v3 focusedElement:v9];

    BOOL v10 = [(VOTElementManager *)self explorerElementManager];
    id v11 = [v10 tvSpeechRequestManager];
    id v12 = [(VOTElementManager *)self tvSpeechRequestManager];
    [v11 transferHeadersFrom:v12];

    self->_explorerElementsNeedUpdate = 0;
  }
}

- (void)willBeginReadAll:(id)a3
{
  self->_shouldReadExplorerElementsAfterSpeechFinished = 0;
}

- (void)explorerElementManager:(id)a3 didSetExplorerElementFocus:(id)a4
{
  self->_elementUnitIndeCGFloat x = -1;
}

- (BOOL)explorerElementManagerShouldBeInUnitTestingMode:(id)a3
{
  return [(VOTElementManager *)self unitTestingMode];
}

- (void)explorerElementManager:(id)a3 willReadElement:(id)a4
{
  id v5 = a4;
  uint64_t v6 = +[VOTDisplayManager displayManager];
  [v6 setCursorFrameForElement:v5];

  [(VOTElementManager *)self _sendUserEventOccurredIfNeeded];
}

- (void)explorerElementManager:(id)a3 didFinishReadAll:(BOOL)a4
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  id v5 = +[VOTDisplayManager displayManager];
  uint64_t v6 = [(VOTElementManager *)self _currentElement];
  [v5 setCursorFrameForElement:v6];

  self->_flags.isReadingAll = 0;
}

- (void)_sendUserEventOccurredIfNeeded
{
  +[NSDate timeIntervalSinceReferenceDate];
  if (vabdd_f64(v3, self->_lastUserEventNotificationTime) > 4.0)
  {
    self->_lastUserEventNotificationTime = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_1001B5D50);
  }
}

- (void)gestureRepeaterWillSendFirstRepeaterEvent:(id)a3
{
  id v4 = +[VOTOutputManager outputManager];
  double v3 = +[VOSOutputEvent DidBeginPassthrough];
  [v4 sendEvent:v3];
}

- (void)gestureRepeater:(id)a3 repeaterEventDidFire:(int64_t)a4
{
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if ((unint64_t)(a4 - 1) <= 3)
  {
    -[VOTElementManager __sendTVRemoteCommand:](self, "__sendTVRemoteCommand:");
  }
}

- (_NSRange)_outputRangeForCharacterSegment:(id)a3 direction:(int64_t)a4
{
  id v6 = a3;
  id v7 = [v6 length];
  if (a4 == 2)
  {
    elementUnitIndeCGFloat x = self->_elementUnitIndex;
    if (elementUnitIndex > (uint64_t)v7)
    {
      self->_elementUnitIndeCGFloat x = (int64_t)v7;
      elementUnitIndeCGFloat x = (int64_t)v7;
    }
    if (elementUnitIndex >= 1)
    {
      int64_t v9 = (int64_t)[v6 rangeOfComposedCharacterSequenceAtIndex:elementUnitIndex - 1];
      NSUInteger v11 = v13;
      self->_elementUnitIndeCGFloat x = v9;
      goto LABEL_15;
    }
    NSUInteger v11 = 0;
    self->_elementUnitIndeCGFloat x = -1;
LABEL_14:
    int64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_15;
  }
  if (a4 != 1)
  {
    NSUInteger v11 = 0;
    goto LABEL_14;
  }
  int64_t v8 = self->_elementUnitIndex;
  if (v8 < 0)
  {
    int64_t v8 = 0;
    self->_elementUnitIndeCGFloat x = 0;
  }
  if (v8 >= (uint64_t)v7)
  {
    NSUInteger v11 = 0;
    self->_elementUnitIndeCGFloat x = (int64_t)v7;
    goto LABEL_14;
  }
  int64_t v9 = (int64_t)objc_msgSend(v6, "rangeOfComposedCharacterSequenceAtIndex:");
  NSUInteger v11 = v10;
  self->_elementUnitIndeCGFloat x = v9 + v10;
LABEL_15:

  NSUInteger v14 = v9;
  NSUInteger v15 = v11;
  result.NSUInteger length = v15;
  result.NSUInteger location = v14;
  return result;
}

- (void)outputNextTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4 string:(id)a5 element:(id)a6
{
  id v10 = a6;
  id v14 = a5;
  id v11 = [(VOTElementManager *)self outputRangeForTextSegmentUnit:a3 direction:a4 string:v14 element:v10];
  uint64_t v13 = v12;
  -[VOTElementManager updateIndexesForOutputRange:segment:direction:outputStringLength:](self, "updateIndexesForOutputRange:segment:direction:outputStringLength:", v11, v12, a3, a4, [v14 length]);
  -[VOTElementManager outputTextSegmentForRange:string:element:usePhonetics:segment:](self, "outputTextSegmentForRange:string:element:usePhonetics:segment:", v11, v13, v14, v10, a3 == 1, a3);
}

- (_NSRange)outputRangeForTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4 string:(id)a5 element:(id)a6
{
  id v10 = a5;
  id v11 = a6;
  NSUInteger v12 = 0;
  unint64_t v13 = 0x7FFFFFFFLL;
  switch(a3)
  {
    case 1:
      id v14 = [(VOTElementManager *)self _outputRangeForCharacterSegment:v10 direction:a4];
      goto LABEL_8;
    case 2:
      id v14 = [v10 wordFromPosition:self->_elementUnitIndex inDirection:a4];
      goto LABEL_8;
    case 3:
      lastSeenLineAndColumn = self->_lastSeenLineAndColumn;
      if (lastSeenLineAndColumn)
      {
        uint64_t v17 = lastSeenLineAndColumn;
      }
      else
      {
        v59[0] = @"lineNumber";
        v59[1] = @"lineColumn";
        v60[0] = &off_1001C5590;
        v60[1] = &off_1001C5590;
        uint64_t v17 = +[NSDictionary dictionaryWithObjects:v60 forKeys:v59 count:2];
      }
      double v20 = v17;
      id v21 = (char *)[v11 rangeForLineNumberAndColumn:v17];
      if (v21 == (char *)0x7FFFFFFF)
      {
        id v23 = [v10 lineFromPosition:self->_elementUnitIndex inDirection:a4];
LABEL_13:
        unint64_t v13 = (unint64_t)v23;
        NSUInteger v12 = v24;
        goto LABEL_35;
      }
      unint64_t v13 = (unint64_t)v21;
      NSUInteger v25 = v22;
      p_lastSeenLineAndColumn = &self->_lastSeenLineAndColumn;
      if (!*p_lastSeenLineAndColumn)
      {
        objc_storeStrong((id *)p_lastSeenLineAndColumn, v20);
        NSUInteger v12 = v25;
        goto LABEL_35;
      }
      if (a4 != 1)
      {
        NSUInteger v12 = 0;
        if (a4 != 2 || !v21) {
          goto LABEL_34;
        }
        if ((unint64_t)v21 >= v22) {
          unint64_t v31 = (unint64_t)&v21[-v22];
        }
        else {
          unint64_t v31 = 0;
        }
        v55[0] = @"lineNumber";
        long long v32 = +[NSNumber numberWithUnsignedInteger:v31];
        v55[1] = @"lineColumn";
        v56[0] = v32;
        v56[1] = &off_1001C5590;
        long long v33 = +[NSDictionary dictionaryWithObjects:v56 forKeys:v55 count:2];

        long long v34 = (char *)[v11 rangeForLineNumberAndColumn:v33];
        int64_t v36 = &v34[v35];
        unint64_t v37 = v33;
        unint64_t v38 = v37;
        if (v36 == (char *)v13)
        {
          if (v34 != (char *)0x7FFFFFFF)
          {
            BOOL v39 = v37;
            while (v31 < (unint64_t)[v10 length])
            {
              double v20 = v38;

              --v31;
              v53[0] = @"lineNumber";
              double v40 = +[NSNumber numberWithUnsignedInteger:v31];
              v53[1] = @"lineColumn";
              v54[0] = v40;
              v54[1] = &off_1001C5590;
              unint64_t v38 = +[NSDictionary dictionaryWithObjects:v54 forKeys:v53 count:2];

              unsigned int v41 = (char *)[v11 rangeForLineNumberAndColumn:v38];
              BOOL v43 = v41 != (char *)0x7FFFFFFF && &v41[v42] == (char *)v13;
              BOOL v39 = v20;
              if (!v43) {
                goto LABEL_48;
              }
            }
            double v20 = v39;
            goto LABEL_48;
          }
        }
        else if (v34 != (char *)0x7FFFFFFF)
        {
          unint64_t v44 = v13 - v25;
          if (v13 < v25) {
            unint64_t v44 = 0;
          }
          uint64_t v45 = v44 + 1;
          char v46 = v37;
          do
          {
            double v20 = v38;

            unsigned int v47 = +[NSNumber numberWithUnsignedInteger:v45, @"lineNumber"];
            v51[1] = @"lineColumn";
            v52[0] = v47;
            v52[1] = &off_1001C5590;
            unint64_t v38 = +[NSDictionary dictionaryWithObjects:v52 forKeys:v51 count:2];

            uint64_t v48 = (char *)[v11 rangeForLineNumberAndColumn:v38];
            ++v45;
            BOOL v50 = v48 == (char *)0x7FFFFFFF || &v48[v49] == (char *)v13;
            char v46 = v20;
          }
          while (!v50);
          goto LABEL_48;
        }
        double v20 = v37;
LABEL_48:

        objc_storeStrong((id *)p_lastSeenLineAndColumn, v20);
        id v23 = [v11 rangeForLineNumberAndColumn:v20];
        goto LABEL_13;
      }
      uint64_t v27 = &v21[v22];
      if (&v21[v22] >= [v10 length])
      {
        NSUInteger v12 = 0;
LABEL_34:
        unint64_t v13 = 0x7FFFFFFFLL;
        goto LABEL_35;
      }
      v57[0] = @"lineNumber";
      BOOL v28 = +[NSNumber numberWithUnsignedInteger:v27];
      v57[1] = @"lineColumn";
      v58[0] = v28;
      v58[1] = &off_1001C5590;
      BOOL v29 = +[NSDictionary dictionaryWithObjects:v58 forKeys:v57 count:2];

      objc_storeStrong((id *)p_lastSeenLineAndColumn, v29);
      unint64_t v13 = (unint64_t)[v11 rangeForLineNumberAndColumn:v29];
      NSUInteger v12 = v30;
      double v20 = v29;
LABEL_35:

LABEL_9:
      NSUInteger v18 = v13;
      NSUInteger v19 = v12;
      result.NSUInteger length = v19;
      result.NSUInteger location = v18;
      return result;
    case 5:
      id v14 = [v10 sentenceFromPosition:self->_elementUnitIndex inDirection:a4];
      goto LABEL_8;
    case 6:
      id v14 = [v10 paragraphFromPosition:self->_elementUnitIndex inDirection:a4];
LABEL_8:
      unint64_t v13 = (unint64_t)v14;
      NSUInteger v12 = v15;
      goto LABEL_9;
    default:
      goto LABEL_9;
  }
}

- (void)updateIndexesForOutputRange:(_NSRange)a3 segment:(int64_t)a4 direction:(int64_t)a5 outputStringLength:(unint64_t)a6
{
  if (a4 != 1)
  {
    if (a5 != 1) {
      a6 = -1;
    }
    if (a5 == 1) {
      NSUInteger length = a3.length;
    }
    else {
      NSUInteger length = 0;
    }
    unint64_t v8 = length + a3.location;
    if (a3.location != 0x7FFFFFFF) {
      a6 = v8;
    }
    self->_elementUnitIndeCGFloat x = a6;
  }
}

- (id)_listItemLabelForAXAttributedString:(id)a3
{
  double v3 = [a3 attributeValueForKey:UIAccessibilityTokenListItemLabel];
  if ([v3 length])
  {
    id v4 = sub_100051804(off_1001EA9E8, @"list.item.label", 0);
    id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v4, v3);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

- (void)outputTextSegmentForRange:(_NSRange)a3 string:(id)a4 element:(id)a5 usePhonetics:(BOOL)a6 segment:(int64_t)a7
{
  BOOL v8 = a6;
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  id v51 = a4;
  id v13 = a5;
  self->_elementUnitOutputRange.NSUInteger location = location;
  self->_elementUnitOutputRange.NSUInteger length = length;
  id v14 = [v51 length];
  if (location == 0x7FFFFFFFFFFFFFFFLL
    || !length
    || v51 && (location > (unint64_t)v14 || location + length > (unint64_t)v14))
  {
    NSUInteger v15 = +[VOTOutputManager outputManager];
    [v15 stopSpeakingAtBoundary:0];

    id v16 = +[VOTOutputManager outputManager];
    uint64_t v17 = +[VOSOutputEvent BoundaryEncountered];
    [v16 sendEvent:v17];
    goto LABEL_46;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    objc_msgSend(v51, "attributedSubstringFromRange:", location, length);
  }
  else {
  uint64_t v17 = objc_msgSend(v51, "substringWithRange:", location, length);
  }
  id v18 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  NSUInteger v19 = [v13 language];
  double v20 = +[AXSettings sharedInstance];
  id v49 = [v20 voiceOverPhoneticsFeedback];

  if (v8)
  {
    uint64_t v50 = 0;
    if ([v17 length] == (id)1 && v49)
    {
      uint64_t v50 = [(VOTElementManager *)self _phoneticStringForLetter:v17 language:v19];
    }
  }
  else
  {
    uint64_t v50 = 0;
  }
  id v21 = objc_msgSend(v13, "attributedValueForRange:", location, length);
  id v22 = [v13 lineRangeForPosition:location];
  id v23 = [(VOTElementManager *)self _listItemLabelForAXAttributedString:v21];
  unsigned int v47 = v23;
  if ([v23 length]
    && [v23 length]
    && v22 != self->_lastSeenLineStartPositionForFontProperties)
  {
    id v24 = [v18 addString:v23];
    [v18 setGeneratesBraille:1];
    NSUInteger v25 = [v18 lastAction];
    LODWORD(v26) = 1062836634;
    +[NSNumber numberWithFloat:v26];
    v28 = uint64_t v27 = v21;
    [v25 setObject:v28 forVariant:32];

    id v21 = v27;
  }
  self->_lastSeenLineStartPositionForFontProperties = (unint64_t)v22;
  BOOL v29 = [v21 string];
  unsigned int v30 = [(VOTElementManager *)self stringIsTextAttachment:v29];

  unint64_t v31 = (void *)v50;
  uint64_t v48 = v21;
  if (v30)
  {
    long long v32 = -[VOTElementManager _textAttachmentElementForString:inRange:](self, "_textAttachmentElementForString:inRange:", v21, 0, [v21 length]);
    long long v33 = v32;
    if (v32)
    {
      long long v34 = [v32 value];
      uint64_t v45 = [v33 label];
      CFStringRef v46 = @"__AXStringForVariablesSentinel";
      __AXStringForVariables();
      id v16 = (id)objc_claimAutoreleasedReturnValue();

      unint64_t v31 = (void *)v50;
    }
    else
    {
      sub_100051804(off_1001EA9E8, @"attachment", 0);
      id v16 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v16 = v17;
  }
  id v35 = objc_msgSend(v31, "length", v45, v46);
  if (v35) {
    BOOL v36 = v49 == 0;
  }
  else {
    BOOL v36 = 1;
  }
  char v37 = !v36;
  if (!v35 || v49 != (id)2)
  {
    id v38 = [v18 addAttributedString:v16 withLanguage:v19];
    if (a7 == 1)
    {
      double v40 = [v18 lastAction];
      [v40 setObject:kCFBooleanTrue forVariant:28];
    }
    if ((v37 & 1) == 0) {
      goto LABEL_45;
    }
    LODWORD(v39) = 1061158912;
    [v18 addPause:v39];
    goto LABEL_39;
  }
  if (v37)
  {
LABEL_39:
    id v41 = [v18 addString:v31];
    if ([(VOTElementManager *)self _needsPhoneticBrailleForLanauge:v19]) {
      [(VOTElementManager *)self _sendBrailleAlert:v31];
    }
    if ([v17 length] == (id)1)
    {
      if (sub_100050EB4(v17))
      {
        uint64_t v42 = +[AXSettings sharedInstance];
        id v43 = [v42 voiceOverCapitalLetterFeedback];

        if (v43 == (id)1)
        {
          unint64_t v44 = [v18 lastAction];
          [v44 setObject:&off_1001C4EC8 forVariant:32];
        }
      }
    }
  }
LABEL_45:
  --self->_elementUnitOutputRange.length;
  [(VOTElementManager *)self sendRequest:v18];

LABEL_46:
}

- (id)_textAttachmentElementForString:(id)a3 inRange:(_NSRange)a4
{
  id v5 = objc_msgSend(a3, "attributedSubstringFromRange:", a4.location, a4.length);
  id v6 = v5;
  if (self->_inUnitTestingMode) {
    [v5 attributeValueForKey:UIAccessibilityTokenAttachment];
  }
  else {
  id v7 = +[AXUIElement uiElementWithAXElement:](AXUIElement, "uiElementWithAXElement:", [v5 attributeValueForKey:UIAccessibilityTokenAttachment]);
  }
  BOOL v8 = +[VOTElement elementWithUIElement:v7];

  return v8;
}

- (BOOL)stringIsTextAttachment:(id)a3
{
  id v3 = a3;
  id v4 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
  id v5 = [v3 stringByTrimmingCharactersInSet:v4];

  BOOL v6 = [v5 length] == (id)1 && objc_msgSend(v5, "characterAtIndex:", 0) == 65532;
  return v6;
}

- (BOOL)_elementMonitoringOutputElement:(id)a3 userMonitored:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  id v7 = [v6 value];
  id v8 = [v7 length];

  int64_t v9 = +[VOTElement springBoardApplication];
  unsigned __int8 v10 = [v9 isSystemSleeping];

  if ((v10 & 1) == 0)
  {
    if (v8) {
      uint64_t v12 = 8;
    }
    else {
      uint64_t v12 = 1;
    }
    [v6 updateLanguage];
    id v13 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    int v14 = 1;
    [v13 setDoesNotInterrupt:1];
    [(VOTElementManager *)self _addDescription:v6 toRequest:v13 withOptions:v12];
    NSUInteger v15 = [v6 label];
    if ([v15 isAXAttributedString])
    {
      id v16 = [v15 coalescedAttributes];
      uint64_t v17 = [v16 objectForKey:UIAccessibilityTokenBrailleDisplayOnly];
      unsigned int v18 = [v17 BOOLValue];

      if (!v18)
      {
        int v14 = 1;
        if (v4)
        {
LABEL_10:
          [v13 setGeneratesBraille:1];
          [v13 setBrailleType:2];
          if (!v14) {
            goto LABEL_16;
          }
LABEL_14:
          NSUInteger v19 = +[VOTOutputManager outputManager];
          unsigned __int8 v20 = [v19 isSpeaking];

          if (v20)
          {
            BOOL v11 = 0;
LABEL_23:

            goto LABEL_24;
          }
LABEL_16:
          id v21 = +[AXSubsystemVoiceOver sharedInstance];
          unsigned __int8 v22 = [v21 ignoreLogging];

          if ((v22 & 1) == 0)
          {
            id v23 = +[AXSubsystemVoiceOver identifier];
            id v24 = AXLoggerForFacility();

            os_log_type_t v25 = AXOSLogLevelFromAXLogLevel();
            if (os_log_type_enabled(v24, v25))
            {
              double v26 = AXColorizeFormatLog();
              id v29 = v13;
              uint64_t v27 = _AXStringForArgs();
              if (os_log_type_enabled(v24, v25))
              {
                *(_DWORD *)long long buf = 138543362;
                unint64_t v31 = v27;
                _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}@", buf, 0xCu);
              }
            }
          }
          -[VOTElementManager sendRequest:](self, "sendRequest:", v13, v29);
          BOOL v11 = 1;
          goto LABEL_23;
        }
LABEL_13:
        [(VOTElementManager *)self refreshBraille];
        if (!v14) {
          goto LABEL_16;
        }
        goto LABEL_14;
      }
      [v13 setLimitToComponentType:3];
      int v14 = 0;
    }
    if (v4) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  BOOL v11 = 0;
LABEL_24:

  return v11;
}

- (double)_realTimeAdjustableUpdateFrequency:(id)a3
{
  id v4 = a3;
  double v5 = 1.0;
  if (![(NSArray *)self->_realTimeElementsCache containsObject:v4])
  {
    double v5 = 0.5;
    if (([v4 doesHaveTraits:kAXAdjustableTrait] & 1) == 0)
    {
      if ([v4 isLiveCaptionsTextView]) {
        double v5 = 1.0;
      }
      else {
        double v5 = 3.0;
      }
    }
  }

  return v5;
}

- (void)_elementUpdatesFrequently
{
  id v3 = [(VOTElementManager *)self getCurrentElement];
  id v4 = +[AXSubsystemVoiceOver sharedInstance];
  unsigned __int8 v5 = [v4 ignoreLogging];

  if ((v5 & 1) == 0)
  {
    id v6 = +[AXSubsystemVoiceOver identifier];
    id v7 = AXLoggerForFacility();

    os_log_type_t v8 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v7, v8))
    {
      int64_t v9 = AXColorizeFormatLog();
      id v23 = v3;
      unsigned __int8 v10 = _AXStringForArgs();
      if (os_log_type_enabled(v7, v8))
      {
        *(_DWORD *)long long buf = 138543362;
        double v26 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}@", buf, 0xCu);
      }
    }
  }
  if (([(SCRCTargetSelectorTimer *)self->_elementUpdatesFrequentlyTimer isCancelled] & 1) == 0
    && [v3 doesHaveTraits:kAXUpdatesFrequentlyTrait])
  {
    [(VOTElementManager *)self _realTimeAdjustableUpdateFrequency:v3];
    double v12 = v11;
    id v13 = [v3 label];
    uint64_t v14 = [v3 value];
    NSUInteger v15 = +[NSString stringWithFormat:@"%@%@", v13, v14];

    id v16 = +[AXSubsystemVoiceOver sharedInstance];
    LOBYTE(v14) = [v16 ignoreLogging];

    if ((v14 & 1) == 0)
    {
      uint64_t v17 = +[AXSubsystemVoiceOver identifier];
      unsigned int v18 = AXLoggerForFacility();

      os_log_type_t v19 = AXOSLogLevelFromAXLogLevel();
      if (os_log_type_enabled(v18, v19))
      {
        unsigned __int8 v20 = AXColorizeFormatLog();
        id v24 = v15;
        id v21 = _AXStringForArgs();
        if (os_log_type_enabled(v18, v19))
        {
          *(_DWORD *)long long buf = 138543362;
          double v26 = v21;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}@", buf, 0xCu);
        }
      }
    }
    cachedFrequentUpdateText = self->_cachedFrequentUpdateText;
    if (!cachedFrequentUpdateText)
    {
      objc_storeStrong((id *)&self->_cachedFrequentUpdateText, v15);
      cachedFrequentUpdateText = self->_cachedFrequentUpdateText;
    }
    if (!-[NSString isEqualToString:](cachedFrequentUpdateText, "isEqualToString:", v15, v24)
      && [(VOTElementManager *)self _elementMonitoringOutputElement:v3 userMonitored:0])
    {
      double v12 = v12 / 3.0;
      objc_storeStrong((id *)&self->_cachedFrequentUpdateText, v15);
    }
    [(SCRCTargetSelectorTimer *)self->_elementUpdatesFrequentlyTimer dispatchAfterDelay:v12];
  }
}

- (void)resetFrequentUpdateTextCache
{
  self->_cachedFrequentUpdateText = 0;
  _objc_release_x1();
}

- (BOOL)_needsPhoneticBrailleForLanauge:(id)a3
{
  id v3 = a3;
  id v4 = v3;
  if (!v3)
  {
    id v4 = [(id)VOTSharedWorkspace selectedLanguage];
    if (!v4)
    {
      id v4 = [(id)VOTSharedWorkspace systemSpokenLanguage];
    }
  }
  if ([v4 hasPrefix:@"ja"]) {
    unsigned __int8 v5 = 1;
  }
  else {
    unsigned __int8 v5 = [v4 hasPrefix:@"zh"];
  }

  return v5;
}

- (void)_sendBrailleAlert:(id)a3
{
  id v5 = a3;
  id v3 = +[VOTOutputRequest createRequest];
  id v4 = [v3 addString:v5];
  [v3 setGeneratesBraille:1];
  [v3 setLimitToComponentType:3];
  [v3 setBrailleType:2];
  [v3 send];
}

- (void)moveToElementMatchingRotorType:(int64_t)a3 inDirection:(int64_t)a4
{
}

- (id)elementRotor
{
  return self->_elementRotor;
}

- (void)rotor:(id)a3 didChangeFrom:(int64_t)a4 to:(int64_t)a5 userInitiated:(BOOL)a6
{
  int64_t v9 = (VOTElementRotor *)a3;
  if (([(SCRCThread *)self->_elementManagerThread _debug_currentlyRunningOnThisThread] & 1) == 0&& ([(SCRCThread *)self->_systemEventThread _debug_currentlyRunningOnThisThread] & 1) == 0)
  {
    _AXAssert();
  }
  if (self->_elementRotor == v9)
  {
    id v7 = +[AXSettings sharedInstance];
    [v7 voiceOverUseTVToggleStyleNavigation];
  }
  if (_AXSAutomationEnabled())
  {
    os_log_type_t v8 = +[NSDistributedNotificationCenter defaultCenter];
    [v8 postNotificationName:@"VoiceOverEventOccurred" object:@"RotorTypeDidChange"];
  }
}

- (int64_t)tvInteractionModeForElementRotor:(id)a3
{
  return (int64_t)objc_msgSend((id)VOTSharedWorkspace, "tvInteractionMode", a3);
}

- (int64_t)actionsRotorAddBehaviorForElementRotor:(id)a3
{
  return [(AXDragManager *)self->_dragManager isDragActive];
}

- (id)_lastSeenFontProperties
{
  return self->_lastSeenFontProperties;
}

- (id)_fetchManager
{
  return self->_fetchManager;
}

- (void)_setFetchManager:(id)a3
{
  id v5 = (VOTElementFetcher *)a3;
  fetchManager = self->_fetchManager;
  if (fetchManager != v5)
  {
    id v7 = v5;
    [(VOTElementFetcher *)fetchManager setDelegate:0];
    objc_storeStrong((id *)&self->_fetchManager, a3);
    fetchManager = (VOTElementFetcher *)[(VOTElementFetcher *)self->_fetchManager setDelegate:self];
    id v5 = v7;
  }

  _objc_release_x1(fetchManager, v5);
}

- (void)fillCacheWithElements:(id)a3
{
}

- (VOTElement)touchContainer
{
  return self->_touchContainer;
}

- (void)setTouchContainer:(id)a3
{
}

- (VOTElementUpdateProtocol)updateDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_updateDelegate);

  return (VOTElementUpdateProtocol *)WeakRetained;
}

- (void)setUpdateDelegate:(id)a3
{
}

- (double)timeSpentOnNothing
{
  return self->_timeSpentOnNothing;
}

- (void)setTimeSpentOnNothing:(double)a3
{
  self->_double timeSpentOnNothing = a3;
}

- (double)lastNothingSoundTime
{
  return self->_lastNothingSoundTime;
}

- (void)setLastNothingSoundTime:(double)a3
{
  self->_lastNothingSoundTime = a3;
}

- (double)lastAlertTime
{
  return self->_lastAlertTime;
}

- (void)setLastAlertTime:(double)a3
{
  self->_lastAlertTime = a3;
}

- (double)lastSelectionChangeTime
{
  return self->_lastSelectionChangeTime;
}

- (void)setLastSelectionChangeTime:(double)a3
{
  self->_lastSelectionChangeTime = a3;
}

- (double)lastScreenChangeNotificationTime
{
  return self->_lastScreenChangeNotificationTime;
}

- (void)setLastScreenChangeNotificationTime:(double)a3
{
  self->_double lastScreenChangeNotificationTime = a3;
}

- (double)lastPressOnMediaSessionElement
{
  return self->_lastPressOnMediaSessionElement;
}

- (void)setLastPressOnMediaSessionElement:(double)a3
{
  self->_lastPressOnMediaSessionElement = a3;
}

- (double)touchTypingStartTime
{
  return self->_touchTypingStartTime;
}

- (void)setTouchTypingStartTime:(double)a3
{
  self->_touchTypingStartTime = a3;
}

- (double)lastFirstResponderChangeTime
{
  return self->_lastFirstResponderChangeTime;
}

- (void)setLastFirstResponderChangeTime:(double)a3
{
  self->_double lastFirstResponderChangeTime = a3;
}

- (double)lastTemporaryQuickNavDisableTime
{
  return self->_lastTemporaryQuickNavDisableTime;
}

- (void)setLastTemporaryQuickNavDisableTime:(double)a3
{
  self->_lastTemporaryQuickNavDisableTime = a3;
}

- (double)lastEventOccurredTime
{
  return self->_lastEventOccurredTime;
}

- (void)setLastEventOccurredTime:(double)a3
{
  self->_lastEventOccurredTime = a3;
}

- (NSString)lastEventCommand
{
  return self->_lastEventCommand;
}

- (void)setLastEventCommand:(id)a3
{
}

- (double)lastValueChangeTime
{
  return self->_lastValueChangeTime;
}

- (void)setLastValueChangeTime:(double)a3
{
  self->_lastValueChangeTime = a3;
}

- (double)lastWebPageLoadTime
{
  return self->_lastWebPageLoadTime;
}

- (void)setLastWebPageLoadTime:(double)a3
{
  self->_lastWebPageLoadTime = a3;
}

- (double)lastSearchForElementsTime
{
  return self->_lastSearchForElementsTime;
}

- (void)setLastSearchForElementsTime:(double)a3
{
  self->_lastSearchForElementsTime = a3;
}

- (unint64_t)currentSimilarTraits
{
  return self->_currentSimilarTraits;
}

- (void)setCurrentSimilarTraits:(unint64_t)a3
{
  self->_currentSimilarTraits = a3;
}

- (VOTElement)previousFirstResponder
{
  return self->_previousFirstResponder;
}

- (void)setPreviousFirstResponder:(id)a3
{
}

- (NSString)previousFirstResponderValue
{
  return self->_previousFirstResponderValue;
}

- (void)setPreviousFirstResponderValue:(id)a3
{
}

- (NSMutableDictionary)fingersFromTouchCommands
{
  return self->_fingersFromTouchCommands;
}

- (void)setFingersFromTouchCommands:(id)a3
{
}

- (BOOL)didIgnoreLastFirstResponderChangeOnSelectionChange
{
  return self->_didIgnoreLastFirstResponderChangeOnSelectionChange;
}

- (void)setDidIgnoreLastFirstResponderChangeOnSelectionChange:(BOOL)a3
{
  self->_didIgnoreLastFirstResponderChangeOnSelectionChange = a3;
}

- (unint64_t)lastTextPressAction
{
  return self->_lastTextPressAction;
}

- (void)setLastTextPressAction:(unint64_t)a3
{
  self->_unint64_t lastTextPressAction = a3;
}

- (VOTElement)nativeFocusElement
{
  return self->_nativeFocusElement;
}

- (void)setNativeFocusElement:(id)a3
{
}

- (BOOL)tutorialListeningForGestureNotifications
{
  return self->_tutorialListeningForGestureNotifications;
}

- (void)setTutorialListeningForGestureNotifications:(BOOL)a3
{
  self->_tutorialListeningForGestureNotifications = a3;
}

- (NSString)tutorialPage
{
  return self->_tutorialPage;
}

- (void)setTutorialPage:(id)a3
{
}

- (NSMutableArray)tutorialRestrictedCommands
{
  return self->_tutorialRestrictedCommands;
}

- (void)setTutorialRestrictedCommands:(id)a3
{
}

- (int64_t)tutorialActiveRestrictionType
{
  return self->_tutorialActiveRestrictionType;
}

- (void)setTutorialActiveRestrictionType:(int64_t)a3
{
  self->_tutorialActiveRestrictionType = a3;
}

- (NSString)tutorialRecognizedGesture
{
  return self->_tutorialRecognizedGesture;
}

- (void)setTutorialRecognizedGesture:(id)a3
{
}

- (AXScribbleManager)safariScribbleManager
{
  return self->_safariScribbleManager;
}

- (void)setSafariScribbleManager:(id)a3
{
}

- (VOTElement)initialReadAllElement
{
  return self->_initialReadAllElement;
}

- (void)setInitialReadAllElement:(id)a3
{
}

- (double)lastLayoutChangeNotificationTime
{
  return self->_lastLayoutChangeNotificationTime;
}

- (void)setLastLayoutChangeNotificationTime:(double)a3
{
  self->_lastLayoutChangeNotificationTime = a3;
}

- (BOOL)unitTestingMode
{
  return self->_unitTestingMode;
}

- (id)elementManagerHandledEventCallback
{
  return self->_elementManagerHandledEventCallback;
}

- (void)setElementManagerHandledEventCallback:(id)a3
{
}

- (id)currentElementChangedCallback
{
  return self->_currentElementChangedCallback;
}

- (void)setCurrentElementChangedCallback:(id)a3
{
}

- (BOOL)tvIsInteractingWithRotor
{
  return self->_tvIsInteractingWithRotor;
}

- (void)setTvIsInteractingWithRotor:(BOOL)a3
{
  self->_tvIsInteractingWithRotor = a3;
}

- (NSArray)previouslySpokenImageCaptionResults
{
  return self->_previouslySpokenImageCaptionResults;
}

- (void)setPreviouslySpokenImageCaptionResults:(id)a3
{
}

- (double)lastCursorBorderHitTime
{
  return self->_lastCursorBorderHitTime;
}

- (void)setLastCursorBorderHitTime:(double)a3
{
  self->_lastCursorBorderHitTime = a3;
}

- (double)lastActivationTime
{
  return self->_lastActivationTime;
}

- (void)setLastActivationTime:(double)a3
{
  self->_lastActivationTime = a3;
}

- (double)lastSilencedAlertTime
{
  return self->_lastSilencedAlertTime;
}

- (void)setLastSilencedAlertTime:(double)a3
{
  self->_lastSilencedAlertTime = a3;
}

- (double)lastScreenWakeViaPlayPause
{
  return self->_lastScreenWakeViaPlayPause;
}

- (void)setLastScreenWakeViaPlayPause:(double)a3
{
  self->_double lastScreenWakeViaPlayPause = a3;
}

- (double)lastExternalUnlockTime
{
  return self->_lastExternalUnlockTime;
}

- (void)setLastExternalUnlockTime:(double)a3
{
  self->_lastExternalUnlockTime = a3;
}

- (double)lastFolderOperationTime
{
  return self->_lastFolderOperationTime;
}

- (void)setLastFolderOperationTime:(double)a3
{
  self->_lastFolderOperationTime = a3;
}

- (double)lastHomeButtonPressTime
{
  return self->_lastHomeButtonPressTime;
}

- (void)setLastHomeButtonPressTime:(double)a3
{
  self->_lastHomeButtonPressTime = a3;
}

- (double)lastBlockedRequestBySiriOrDictationTime
{
  return self->_lastBlockedRequestBySiriOrDictationTime;
}

- (void)setLastBlockedRequestBySiriOrDictationTime:(double)a3
{
  self->_lastBlockedRequestBySiriOrDictationTime = a3;
}

- (double)lastUserElementTouchTime
{
  return self->_lastUserElementTouchTime;
}

- (void)setLastUserElementTouchTime:(double)a3
{
  self->_lastUserElementTouchTime = a3;
}

- (double)lastElementChangeTime
{
  return self->_lastElementChangeTime;
}

- (void)setLastElementChangeTime:(double)a3
{
  self->_lastElementChangeTime = a3;
}

- (VOTElement)nextElementToFocus
{
  return self->_nextElementToFocus;
}

- (void)setNextElementToFocus:(id)a3
{
}

- (NSString)nextStringToSpeakOnScreenChange
{
  return self->_nextStringToSpeakOnScreenChange;
}

- (void)setNextStringToSpeakOnScreenChange:(id)a3
{
}

- (BOOL)screenCurtainIsTemporarilyDisabled
{
  return self->_screenCurtainIsTemporarilyDisabled;
}

- (void)setScreenCurtainIsTemporarilyDisabled:(BOOL)a3
{
  self->_screenCurtainIsTemporarilyDisabled = a3;
}

- (BOOL)didReceiveForceUpdateChangeToken
{
  return self->_didReceiveForceUpdateChangeToken;
}

- (void)setDidReceiveForceUpdateChangeToken:(BOOL)a3
{
  self->_didReceiveForceUpdateChangeToken = a3;
}

- (NSMutableDictionary)previousTableOrCollectionViewToMetadata
{
  return self->_previousTableOrCollectionViewToMetadata;
}

- (void)setPreviousTableOrCollectionViewToMetadata:(id)a3
{
}

- (NSMutableArray)previousTableOrCollectionViewList
{
  return self->_previousTableOrCollectionViewList;
}

- (void)setPreviousTableOrCollectionViewList:(id)a3
{
}

- (VOTElement)previousTableOrCollectionViewApplication
{
  return self->_previousTableOrCollectionViewApplication;
}

- (void)setPreviousTableOrCollectionViewApplication:(id)a3
{
}

- (BOOL)didCacheSideAppDividerElement
{
  return self->_didCacheSideAppDividerElement;
}

- (void)setDidCacheSideAppDividerElement:(BOOL)a3
{
  self->_didCacheSideAppDividerElement = a3;
}

- (VOTElement)cachedSideAppDividerElement
{
  return self->_cachedSideAppDividerElement;
}

- (void)setCachedSideAppDividerElement:(id)a3
{
}

- (NSArray)cachedAdditionalElementCommunities
{
  return self->_cachedAdditionalElementCommunities;
}

- (void)setCachedAdditionalElementCommunities:(id)a3
{
}

- (VOTElement)mostRecentElementCommunity
{
  return self->_mostRecentElementCommunity;
}

- (void)setMostRecentElementCommunity:(id)a3
{
}

- (VOTElement)firstTrackedAppInGesture
{
  return self->_firstTrackedAppInGesture;
}

- (void)setFirstTrackedAppInGesture:(id)a3
{
}

- (NSString)springBoardActionHandlerIdentifier
{
  return self->_springBoardActionHandlerIdentifier;
}

- (void)setSpringBoardActionHandlerIdentifier:(id)a3
{
}

- (BOOL)inTextSelection
{
  return self->_inTextSelection;
}

- (void)setInTextSelection:(BOOL)a3
{
  self->_inTextSelection = a3;
}

- (BOOL)selectingRightward
{
  return self->_selectingRightward;
}

- (void)setSelectingRightward:(BOOL)a3
{
  self->_BOOL selectingRightward = a3;
}

- (VOTOutputRequest)delayedNotificationAnnouncementRequest
{
  return self->_delayedNotificationAnnouncementRequest;
}

- (void)setDelayedNotificationAnnouncementRequest:(id)a3
{
}

- (int64_t)lastElementChangeAction
{
  return self->_lastElementChangeAction;
}

- (void)setLastElementChangeAction:(int64_t)a3
{
  self->_lastElementChangeAction = a3;
}

- (VOTElement)lastTrackingUpdateAppsFailureApplication
{
  return self->_lastTrackingUpdateAppsFailureApplication;
}

- (void)setLastTrackingUpdateAppsFailureApplication:(id)a3
{
}

- (double)lastTrackingUpdateAppsFailureTime
{
  return self->_lastTrackingUpdateAppsFailureTime;
}

- (void)setLastTrackingUpdateAppsFailureTime:(double)a3
{
  self->_lastTrackingUpdateAppsFailureTime = a3;
}

- (double)lastDuckingDisablementSessionStart
{
  return self->_lastDuckingDisablementSessionStart;
}

- (void)setLastDuckingDisablementSessionStart:(double)a3
{
  self->_lastDuckingDisablementSessionStart = a3;
}

- (double)lastPauseSpeechAndHapticsStart
{
  return self->_lastPauseSpeechAndHapticsStart;
}

- (void)setLastPauseSpeechAndHapticsStart:(double)a3
{
  self->_lastPauseSpeechAndHapticsStart = a3;
}

- (double)continuousPathTimeout
{
  return self->_continuousPathTimeout;
}

- (void)setContinuousPathTimeout:(double)a3
{
  self->_continuousPathTimeout = a3;
}

- (NSDictionary)previousContextDescriptors
{
  return self->_previousContextDescriptors;
}

- (void)setPreviousContextDescriptors:(id)a3
{
}

- (NSDictionary)currentContextDescriptors
{
  return self->_currentContextDescriptors;
}

- (void)setCurrentContextDescriptors:(id)a3
{
}

- (VOTElement)lastElementForAttemptToShowContextMenu
{
  return self->_lastElementForAttemptToShowContextMenu;
}

- (void)setLastElementForAttemptToShowContextMenu:(id)a3
{
}

- (double)lastAttemptToShowContextMenuTime
{
  return self->_lastAttemptToShowContextMenuTime;
}

- (void)setLastAttemptToShowContextMenuTime:(double)a3
{
  self->_lastAttemptToShowContextMenuTime = a3;
}

- (VOTExplorerElementManager)explorerElementManager
{
  return self->_explorerElementManager;
}

- (void)setExplorerElementManager:(id)a3
{
}

- (VOTTVSpeechRequestManager)tvSpeechRequestManager
{
  return self->_tvSpeechRequestManager;
}

- (void)setTvSpeechRequestManager:(id)a3
{
}

- (VOTTVGestureRepeater)tvGestureRepeater
{
  return self->_tvGestureRepeater;
}

- (void)setTvGestureRepeater:(id)a3
{
}

- (BOOL)isUpdatingFocus
{
  return self->_isUpdatingFocus;
}

- (void)setIsUpdatingFocus:(BOOL)a3
{
  self->_isUpdatingFocus = a3;
}

- (BOOL)needsUpdateFocus
{
  return self->_needsUpdateFocus;
}

- (void)setNeedsUpdateFocus:(BOOL)a3
{
  self->_needsUpdateFocus = a3;
}

- (int64_t)forceUpdateMask
{
  return self->_forceUpdateMask;
}

- (void)setForceUpdateMask:(int64_t)a3
{
  self->_forceUpdateMask = a3;
}

- (int64_t)lastElementHeadingLevel
{
  return self->_lastElementHeadingLevel;
}

- (void)setLastElementHeadingLevel:(int64_t)a3
{
  self->_lastElementHeadingLevel = a3;
}

- (int64_t)lastElementBlockquoteLevel
{
  return self->_lastElementBlockquoteLevel;
}

- (void)setLastElementBlockquoteLevel:(int64_t)a3
{
  self->_lastElementBlockquoteLevel = a3;
}

- (NSLock)tvAccessLock
{
  return self->_tvAccessLock;
}

- (void)setTvAccessLock:(id)a3
{
}

- (VOTUpdateFocusContext)updateFocusContext
{
  return self->_updateFocusContext;
}

- (void)setUpdateFocusContext:(id)a3
{
}

- (int64_t)focusRetryAttempts
{
  return self->_focusRetryAttempts;
}

- (void)setFocusRetryAttempts:(int64_t)a3
{
  self->_focusRetryAttempts = a3;
}

- (BOOL)waitingToRetryFocus
{
  return self->_waitingToRetryFocus;
}

- (void)setWaitingToRetryFocus:(BOOL)a3
{
  self->_waitingToRetryFocus = a3;
}

- (VOTElement)lastContainerForCustomRotorHint
{
  return self->_lastContainerForCustomRotorHint;
}

- (void)setLastContainerForCustomRotorHint:(id)a3
{
}

- (NSSet)previousCustomRotorsForRotorHint
{
  return self->_previousCustomRotorsForRotorHint;
}

- (void)setPreviousCustomRotorsForRotorHint:(id)a3
{
}

- (VOTTextMovementManager)textSelectionMovementManager
{
  return self->_textSelectionMovementManager;
}

- (void)setTextSelectionMovementManager:(id)a3
{
}

- (VOTOutputRequest)lastRequestBlockedBySiriOrDictation
{
  return self->_lastRequestBlockedBySiriOrDictation;
}

- (void)setLastRequestBlockedBySiriOrDictation:(id)a3
{
}

- (unint64_t)elementGeneration
{
  return self->_elementGeneration;
}

- (void)setElementGeneration:(unint64_t)a3
{
  self->_elementGeneration = a3;
}

- (unint64_t)webPageLoadedGenerationMark
{
  return self->_webPageLoadedGenerationMark;
}

- (void)setWebPageLoadedGenerationMark:(unint64_t)a3
{
  self->_webPageLoadedGenerationMark = a3;
}

- (NSURL)webPageLoadURL
{
  return self->_webPageLoadURL;
}

- (void)setWebPageLoadURL:(id)a3
{
}

- (SCRCTargetSelectorTimer)webPageElementFinder
{
  return self->_webPageElementFinder;
}

- (void)setWebPageElementFinder:(id)a3
{
}

- (NSMutableDictionary)directTouchApps
{
  return self->_directTouchApps;
}

- (void)setDirectTouchApps:(id)a3
{
}

- (NSString)lastItemChooserSearchTerm
{
  return self->_lastItemChooserSearchTerm;
}

- (void)setLastItemChooserSearchTerm:(id)a3
{
}

- (BOOL)isContinuitySessionActive
{
  return self->_isContinuitySessionActive;
}

- (void)setIsContinuitySessionActive:(BOOL)a3
{
  self->_isContinuitySessionActive = a3;
}

- (AXCameraSceneDescriber)cameraSceneDescriber
{
  return self->_cameraSceneDescriber;
}

- (void)setCameraSceneDescriber:(id)a3
{
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->_cameraSceneDescriber, 0);
  objc_storeStrong((id *)&self->_lastItemChooserSearchTerm, 0);
  objc_storeStrong((id *)&self->_directTouchApps, 0);
  objc_storeStrong((id *)&self->_webPageElementFinder, 0);
  objc_storeStrong((id *)&self->_webPageLoadURL, 0);
  objc_storeStrong((id *)&self->_lastRequestBlockedBySiriOrDictation, 0);
  objc_storeStrong((id *)&self->_textSelectionMovementManager, 0);
  objc_storeStrong((id *)&self->_previousCustomRotorsForRotorHint, 0);
  objc_storeStrong((id *)&self->_lastContainerForCustomRotorHint, 0);
  objc_storeStrong((id *)&self->_updateFocusContext, 0);
  objc_storeStrong((id *)&self->_tvAccessLock, 0);
  objc_storeStrong((id *)&self->_tvGestureRepeater, 0);
  objc_storeStrong((id *)&self->_tvSpeechRequestManager, 0);
  objc_storeStrong((id *)&self->_explorerElementManager, 0);
  objc_storeStrong((id *)&self->_lastElementForAttemptToShowContextMenu, 0);
  objc_storeStrong((id *)&self->_currentContextDescriptors, 0);
  objc_storeStrong((id *)&self->_previousContextDescriptors, 0);
  objc_storeStrong((id *)&self->_lastTrackingUpdateAppsFailureApplication, 0);
  objc_storeStrong((id *)&self->_delayedNotificationAnnouncementRequest, 0);
  objc_storeStrong((id *)&self->_springBoardActionHandlerIdentifier, 0);
  objc_storeStrong((id *)&self->_firstTrackedAppInGesture, 0);
  objc_storeStrong((id *)&self->_mostRecentElementCommunity, 0);
  objc_storeStrong((id *)&self->_cachedAdditionalElementCommunities, 0);
  objc_storeStrong((id *)&self->_cachedSideAppDividerElement, 0);
  objc_storeStrong((id *)&self->_previousTableOrCollectionViewApplication, 0);
  objc_storeStrong((id *)&self->_previousTableOrCollectionViewList, 0);
  objc_storeStrong((id *)&self->_previousTableOrCollectionViewToMetadata, 0);
  objc_storeStrong((id *)&self->_nextStringToSpeakOnScreenChange, 0);
  objc_storeStrong((id *)&self->_nextElementToFocus, 0);
  objc_storeStrong((id *)&self->_previouslySpokenImageCaptionResults, 0);
  objc_storeStrong(&self->_currentElementChangedCallback, 0);
  objc_storeStrong(&self->_elementManagerHandledEventCallback, 0);
  objc_storeStrong((id *)&self->_initialReadAllElement, 0);
  objc_storeStrong((id *)&self->_nativeFocusElement, 0);
  objc_storeStrong((id *)&self->_fingersFromTouchCommands, 0);
  objc_storeStrong((id *)&self->_previousFirstResponderValue, 0);
  objc_storeStrong((id *)&self->_previousFirstResponder, 0);
  objc_storeStrong((id *)&self->_lastEventCommand, 0);
  objc_destroyWeak((id *)&self->_updateDelegate);
  objc_storeStrong((id *)&self->_explorersLock, 0);
  objc_storeStrong((id *)&self->_explorers, 0);
  objc_storeStrong((id *)&self->_safariScribbleManager, 0);
  objc_storeStrong((id *)&self->_tutorialRecognizedGesture, 0);
  objc_storeStrong((id *)&self->_tutorialRestrictedCommands, 0);
  objc_storeStrong((id *)&self->_tutorialPage, 0);
  objc_storeStrong((id *)&self->_tvRotorInteractionTimer, 0);
  objc_storeStrong((id *)&self->_lastScreenChangeSourceIdentifier, 0);
  objc_storeStrong((id *)&self->_dragOutputManager, 0);
  objc_storeStrong((id *)&self->_dragManager, 0);
  objc_storeStrong((id *)&self->_lastSpokenGuideElementHeaderText, 0);
  objc_storeStrong((id *)&self->_updatePreferredTVInteractionModeTimer, 0);
  objc_storeStrong((id *)&self->_updateVisualsTimer, 0);
  objc_storeStrong((id *)&self->_readExplorerElementsAfterSpeechFinishedTimer, 0);
  objc_storeStrong((id *)&self->_cachedFrequentUpdateText, 0);
  objc_storeStrong((id *)&self->_elementUpdatesFrequentlyTimer, 0);
  objc_storeStrong((id *)&self->_touchEventElements, 0);
  objc_storeStrong((id *)&self->_currentSubElement, 0);
  objc_storeStrong((id *)&self->_jindoAppBundleIdentifiers, 0);
  objc_storeStrong((id *)&self->_stewieRangeTimer, 0);
  objc_storeStrong((id *)&self->_threadKey, 0);
  objc_storeStrong((id *)&self->_flashlightSystemTimer, 0);
  objc_storeStrong((id *)&self->_flashlightDevice, 0);
  objc_storeStrong((id *)&self->_systemEventThread, 0);
  objc_storeStrong((id *)&self->_elementManagerThread, 0);
  objc_storeStrong((id *)&self->_focusedElementsByElementCommunityIdentifier, 0);
  objc_storeStrong((id *)&self->_webSearchText, 0);
  objc_storeStrong((id *)&self->_startTrackingRoadRequest, 0);
  objc_storeStrong((id *)&self->_endOfRoadApproachingRequest, 0);
  objc_storeStrong((id *)&self->_switchRoadsOutputRequest, 0);
  objc_storeStrong((id *)&self->_switchRoadsAtIntersectionTimer, 0);
  objc_storeStrong((id *)&self->_upcomingRoadElement, 0);
  objc_storeStrong((id *)&self->_previousItemChooserElement, 0);
  objc_storeStrong((id *)&self->_allElements, 0);
  objc_storeStrong((id *)&self->_audiographActionIdentifier, 0);
  objc_storeStrong((id *)&self->_currentPublicCustomRotorItemResult, 0);
  objc_storeStrong((id *)&self->_customActionIdentifier, 0);
  objc_storeStrong((id *)&self->_cachedLabelElement, 0);
  objc_storeStrong((id *)&self->_labeledElementIdentification, 0);
  objc_storeStrong((id *)&self->_mostRecentTrackingEvent, 0);
  objc_storeStrong((id *)&self->_trackingLock, 0);
  objc_storeStrong((id *)&self->_lastTitleElemenTitle, 0);
  objc_storeStrong((id *)&self->_continuousPathIdleTimer, 0);
  objc_storeStrong((id *)&self->_continuousPathSuggestion, 0);
  objc_storeStrong((id *)&self->_directInteractionElements, 0);
  objc_storeStrong((id *)&self->_keyboardKeyCommands, 0);
  objc_storeStrong((id *)&self->_webFormControlBeforeInteraction, 0);
  objc_storeStrong((id *)&self->_elementBeforeScreenChange, 0);
  objc_storeStrong((id *)&self->_elementBeforeStatusBarMovement, 0);
  objc_storeStrong((id *)&self->_elementBeforePopup, 0);
  objc_storeStrong((id *)&self->_elementBeforeAlert, 0);
  objc_storeStrong((id *)&self->_announcementOriginalString, 0);
  objc_storeStrong((id *)&self->_announcementRequest, 0);
  objc_storeStrong((id *)&self->_readAllOutputRequest, 0);
  objc_storeStrong((id *)&self->_bookPageContentOutputRequest, 0);
  objc_storeStrong((id *)&self->_realTimeElementsCache, 0);
  objc_storeStrong((id *)&self->_bookSubelement, 0);
  objc_storeStrong((id *)&self->_bookPageScrollString, 0);
  objc_storeStrong((id *)&self->_bookLineString, 0);
  objc_storeStrong((id *)&self->_flowFromElements, 0);
  objc_storeStrong((id *)&self->_lineArray, 0);
  objc_storeStrong((id *)&self->_textMarkerRange, 0);
  objc_storeStrong((id *)&self->_textMarker, 0);
  objc_storeStrong((id *)&self->_lastSeenLineAndColumn, 0);
  objc_storeStrong((id *)&self->_lastSeenFontProperties, 0);
  objc_storeStrong((id *)&self->_cachedLaunchIcons, 0);
  objc_storeStrong((id *)&self->_speechRotor, 0);
  objc_storeStrong((id *)&self->_elementRotor, 0);
  objc_storeStrong((id *)&self->_lastScrollStatus, 0);
  objc_storeStrong((id *)&self->_alternativeKeyDismissalTimer, 0);
  objc_storeStrong((id *)&self->_keyboardAlternativeModeActivationTimer, 0);
  objc_storeStrong((id *)&self->_lastSpeakUnderPointerElement, 0);
  objc_storeStrong((id *)&self->_pointerSpeakElementTimer, 0);
  objc_storeStrong((id *)&self->_elementMonitorCache, 0);
  objc_storeStrong((id *)&self->_elementMonitorTimer, 0);
  objc_storeStrong((id *)&self->_pendingBrailleHomeButtonPress, 0);
  objc_storeStrong((id *)&self->_reachabilityWaitForTrackingTimer, 0);
  objc_storeStrong((id *)&self->_updateWithNativeFocusTimer, 0);
  objc_storeStrong((id *)&self->_updateAppFromTimer, 0);
  objc_storeStrong((id *)&self->_simulatedForceLiftTimer, 0);
  objc_storeStrong((id *)&self->_simulatedPressOutputTimer, 0);
  objc_storeStrong((id *)&self->_appSuspensionSoundTimer, 0);
  objc_storeStrong((id *)&self->_invalidStatusChangedTimer, 0);
  objc_storeStrong((id *)&self->_webPageLoadingSoundTimer, 0);
  objc_storeStrong((id *)&self->_visualRotorFadeTimer, 0);
  objc_storeStrong((id *)&self->_containerFrameDrawingTimer, 0);
  objc_storeStrong((id *)&self->_updateLayoutTimer, 0);
  objc_storeStrong((id *)&self->_previousTouchTypingKey, 0);
  objc_storeStrong((id *)&self->_firstResponderElement, 0);
  objc_storeStrong((id *)&self->_elementMathSegments, 0);
  objc_storeStrong((id *)&self->_webSelectionText, 0);
  objc_storeStrong((id *)&self->_elementTypingBuffer, 0);
  objc_storeStrong((id *)&self->_fetchManager, 0);
  objc_storeStrong((id *)&self->_currentOpaqueParent, 0);
  objc_storeStrong((id *)&self->_anyThreadCurrentElement, 0);
  objc_storeStrong((id *)&self->_lastApplication, 0);
  objc_storeStrong((id *)&self->_previousElement, 0);
  objc_storeStrong((id *)&self->_currentElement, 0);
  objc_storeStrong((id *)&self->_autofillCurrentElement, 0);
  objc_storeStrong((id *)&self->_touchContainer, 0);
  objc_storeStrong((id *)&self->_currentApplications, 0);
  objc_storeStrong((id *)&self->_lastValidElement, 0);

  objc_storeStrong((id *)&self->_commands, 0);
}

@end