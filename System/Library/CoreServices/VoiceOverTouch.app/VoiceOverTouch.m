uint64_t start()
{
  AXSetThreadPriority();
  SCRCArgumentParserRunWithClassName();
  return 0;
}

void sub_100004B9C(uint64_t a1)
{
  mach_msg_return_t v5;
  NSObject *v6;

  v2 = (mach_msg_header_t *)malloc_type_malloc(0x800uLL, 0x5E48955EuLL);
  *(void *)&v2->msgh_bits = 0x80000000000;
  mach_port_t v3 = *(_DWORD *)(a1 + 32);
  v2->msgh_remote_port = 0;
  v2->msgh_local_port = v3;
  v2->msgh_id = 0;
  p_msgh_id = &v2->msgh_id;
  v5 = mach_msg(v2, 258, 0, 0x800u, *(_DWORD *)(a1 + 32), 0x3E8u, 0);
  if (v5 || *p_msgh_id != 1776)
  {
    v6 = VOTLogLifeCycle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10011B5E0(p_msgh_id, v5, v6);
    }
  }
  free(v2);
}

void sub_100005258()
{
}

void sub_1000059AC(id a1)
{
  id v1 = objc_alloc_init((Class)NSLock);
  v2 = (void *)qword_1001EB638;
  qword_1001EB638 = (uint64_t)v1;

  qword_1001EB640 = objc_opt_new();

  _objc_release_x1();
}

void sub_100005CE0(id a1)
{
  qword_1001EB650 = objc_opt_new();

  _objc_release_x1();
}

uint64_t sub_100006138(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v4) {
    [v3 setOutputRequest:0];
  }

  return v4;
}

BOOL sub_100006B20(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 component];
  return v3 != [*(id *)(a1 + 32) limitToComponentType];
}

void sub_100007008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100007020(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100007030(uint64_t a1)
{
}

void sub_100007038(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (![v7 component])
  {
    v6 = [v7 string];
    uint64_t v3 = __AXStringForVariables();
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

void sub_1000071C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000071DC(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (![v7 component])
  {
    v6 = [v7 originalString];
    uint64_t v3 = __AXStringForVariables();
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

void sub_1000080CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v10 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = *(void **)(a1 + 32);
    v8 = [*(id *)(a1 + 40) string];
    v9 = objc_msgSend(v8, "substringWithRange:", a3, a4);
    [v7 setObject:v10 forKey:v9];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [*(id *)(a1 + 32) addEntriesFromDictionary:v10];
    }
  }
}

void sub_100008854(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100008890(uint64_t a1, uint64_t a2)
{
  if (a2 != 54)
  {
    uint64_t v4 = [*(id *)(a1 + 32) objectForIndex:a2];
    v5 = [*(id *)(a1 + 40) objectForIndex:a2];
    unsigned __int8 v6 = [v4 isEqual:v5];

    if ((v6 & 1) == 0)
    {
      id v7 = *(void **)(a1 + 48);
      v8 = +[NSNumber numberWithUnsignedInteger:a2];
      [v7 addObject:v8];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    }
  }
}

BOOL sub_10000894C(id a1, NSNumber *a2, BOOL *a3)
{
  return (([(NSNumber *)a2 intValue] - 15) & 0xFFFFFFFD) != 0;
}

void sub_10000AB8C(void *a1)
{
  id v2 = a1;
  [v2 setGeneratesBraille:1];
  if ([(id)VOTSharedWorkspace brailleAlertsEnabled]) {
    uint64_t v1 = 2;
  }
  else {
    uint64_t v1 = 1;
  }
  [v2 setBrailleType:v1];
}

id sub_10000ABF8(void *a1, char a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (v5)
  {
    id v7 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    id v8 = [v7 addString:v5 withLanguage:v6];
    if (a2)
    {
      [v7 setCannotBeInterrupted:1];
      if ((a2 & 2) == 0)
      {
LABEL_4:
        if ((a2 & 4) != 0) {
          goto LABEL_5;
        }
        goto LABEL_14;
      }
    }
    else if ((a2 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v7 setDoesNotInterrupt:1];
    if ((a2 & 4) != 0)
    {
LABEL_5:
      if ((a2 & 8) == 0)
      {
LABEL_7:
        v9 = [v7 outputActions];
        id v10 = [v9 lastObject];
        [v10 setObject:&__kCFBooleanTrue forVariant:76];

        [v7 send];
        goto LABEL_9;
      }
LABEL_6:
      [v7 setLimitToComponentType:3];
      goto LABEL_7;
    }
LABEL_14:
    sub_10000AB8C(v7);
    if ((a2 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v7 = 0;
LABEL_9:

  return v7;
}

id sub_10000B7BC(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 textualContexts];
  id v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

id sub_10000B800(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 appIdentifiers];
  id v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

void sub_10000BD30(id a1)
{
  id v1 = objc_alloc_init((Class)NSLock);
  id v2 = (void *)qword_1001EB680;
  qword_1001EB680 = (uint64_t)v1;

  qword_1001EB678 = (uint64_t)objc_alloc_init((Class)NSMutableArray);

  _objc_release_x1();
}

id sub_10000C4AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _voiceOverVolumeChanged:0];
}

id sub_10000C4B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _voiceOverVolumeChanged:0];
}

id sub_10000C4C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSoundCurtain];
}

id sub_10000C4CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSoundCurtain];
}

void sub_10000C5D8(id a1)
{
  qword_1001EB670 = (uint64_t)[objc_allocWithZone((Class)VOTOutputManager) init];

  _objc_release_x1();
}

id sub_10000C878(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeAllObjects];
}

id sub_10000C8F8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) removeAllObjects];
  [*(id *)(*(void *)(a1 + 32) + 40) removeAllObjects];
  id v2 = *(void **)(*(void *)(a1 + 32) + 32);

  return [v2 setCannotBeInterrupted:0];
}

void sub_10000CA90(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 32) isEqual:*(void *)(a1 + 40)])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(v2 + 32);
    *(void *)(v2 + 32) = 0;
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 48) = 0;
  [*(id *)(*(void *)(a1 + 32) + 40) removeObjectIdenticalTo:*(void *)(a1 + 40)];
  if (([*(id *)(a1 + 40) finishedSuccessfully] & 1) == 0)
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 8) firstObject];
    unsigned int v5 = [v4 isComputerVisionAsynchrousRequest];

    if (v5)
    {
      id v6 = *(void **)(*(void *)(a1 + 32) + 8);
      [v6 removeObjectAtIndex:0];
    }
  }
}

void sub_10000CCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000CCCC(uint64_t a1)
{
  if (([*(id *)(a1 + 32) doesNotInterrupt]
     && [*(id *)(*(void *)(a1 + 40) + 40) count]
     || [*(id *)(*(void *)(a1 + 40) + 40) count]
     && [*(id *)(*(void *)(a1 + 40) + 32) cannotBeInterrupted]
     && ([*(id *)(a1 + 32) interruptsEverything] & 1) == 0)
    && (uint64_t v2 = *(void *)(a1 + 40), *(_DWORD *)(v2 + 48) <= 4u))
  {
    [*(id *)(v2 + 8) addObject:*(void *)(a1 + 32)];
    if ([*(id *)(*(void *)(a1 + 40) + 32) cannotBeInterrupted]) {
      ++*(_DWORD *)(*(void *)(a1 + 40) + 48);
    }
  }
  else
  {
    uint64_t v3 = +[NSMutableArray array];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v4 = *(id *)(*(void *)(a1 + 40) + 8);
    id v5 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v21;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v21 != v7) {
            objc_enumerationMutation(v4);
          }
          v9 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          if ((objc_msgSend(v9, "cannotBeInterrupted", (void)v20) & 1) == 0)
          {
            id v10 = [*(id *)(a1 + 32) requestQueueMixinBehavior];

            if (!v10) {
              continue;
            }
            v11 = [*(id *)(a1 + 32) requestQueueMixinBehavior];
            uint64_t v12 = ((uint64_t (**)(void, void *))v11)[2](v11, v9);

            if (v12 != 1) {
              continue;
            }
          }
          [v3 addObject:v9];
        }
        id v6 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v6);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) removeAllObjects];
    [v3 addObject:*(void *)(a1 + 32)];
    [*(id *)(*(void *)(a1 + 40) + 8) addObjectsFromArray:v3];
    uint64_t v13 = [*(id *)(a1 + 32) requestQueueMixinBehavior];
    if (!v13) {
      goto LABEL_23;
    }
    v14 = (void *)v13;
    v15 = [*(id *)(a1 + 32) requestQueueMixinBehavior];
    v16 = [*(id *)(*(void *)(a1 + 40) + 16) firstObject];
    v17 = [v16 currentRequest];
    uint64_t v18 = ((uint64_t (**)(void, void *))v15)[2](v15, v17);

    if (v18 == 1) {
      char v19 = 0;
    }
    else {
LABEL_23:
    }
      char v19 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v19;
  }
}

void sub_10000D128(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D140(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000D150(uint64_t a1)
{
}

id sub_10000D158(void *a1)
{
  id result = [*(id *)(a1[4] + 8) count];
  if (result)
  {
    uint64_t v3 = [*(id *)(a1[4] + 8) firstObject];
    uint64_t v4 = *(void *)(a1[6] + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    [*(id *)(a1[4] + 8) removeObjectAtIndex:0];
    id v6 = (void *)a1[5];
    return _[v6 setIsActive:1];
  }
  return result;
}

id sub_10000D1E0(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) cannotBeInterrupted]) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 40);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);

  return [v2 addObject:v3];
}

id sub_10000DCC0(uint64_t a1)
{
  [*(id *)(a1 + 32) _activeRouteChanged:0];
  uint64_t v2 = [*(id *)(a1 + 32) speechComponent];
  [v2 callStatusChanged];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 _updateSoundCurtain];
}

id sub_10000DDC4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateActiveRoutes];
}

void sub_10000E0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000E0EC(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isRoutePicked:"))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
}

id sub_10000EEE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) performSelector:"_resumeCurrentRequest" withThreadKey:*(void *)(*(void *)(a1 + 32) + 136) count:0 objects:0];
}

void sub_10000F2CC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 128) addObject:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 112) cancel];
  uint64_t v2 = VOTLogAudio();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 128);
    int v8 = 134218498;
    CFAbsoluteTime v9 = Current;
    __int16 v10 = 2114;
    uint64_t v11 = v4;
    __int16 v12 = 2114;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "TRY ACTIVATE: %f [new user:%{public}@] %{public}@", (uint8_t *)&v8, 0x20u);
  }

  if (([*(id *)(a1 + 32) audioSessionActive] & 1) == 0)
  {
    [*(id *)(a1 + 32) toggleAudioSessionActive:1];
    id v6 = VOTLogAudio();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      CFAbsoluteTime v7 = CFAbsoluteTimeGetCurrent();
      int v8 = 134217984;
      CFAbsoluteTime v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ACTIVATE audio session: %f", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_10000F5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000F5DC(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(*(void *)(a1 + 32) + 128) copy];

  return _objc_release_x1();
}

void sub_10000F6D8(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  [*(id *)(*(void *)(a1 + 32) + 128) removeObject:*(void *)(a1 + 40)];
  if ([(id)VOTSharedWorkspace inUnitTestMode]) {
    double v3 = 0.1;
  }
  else {
    double v3 = 1.0;
  }
  double v4 = 0.0;
  if ([(id)VOTSharedWorkspace screenOn])
  {
    uint64_t v5 = VOTLogAudio();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_10011B9BC(v2, v5);
    }

    if ([*v2 externalAudioRouteSelected])
    {
      id v6 = +[AVAudioSession sharedInstance];
      unsigned __int8 v7 = [v6 isOtherAudioPlaying];

      if ((v7 & 1) == 0)
      {
        int v8 = VOTLogAudio();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
          sub_10011B978(v8);
        }

        if ([*v2 isRouteAirplayMirroring])
        {
          CFAbsoluteTime v9 = +[AXSubsystemVOTAudio sharedInstance];
          unsigned __int8 v10 = [v9 ignoreLogging];

          if ((v10 & 1) == 0)
          {
            uint64_t v11 = +[AXSubsystemVOTAudio identifier];
            __int16 v12 = AXLoggerForFacility();

            os_log_type_t v13 = AXOSLogLevelFromAXLogLevel();
            if (os_log_type_enabled(v12, v13))
            {
              v14 = AXColorizeFormatLog();
              v15 = _AXStringForArgs();
              if (os_log_type_enabled(v12, v13))
              {
                *(_DWORD *)buf = 138543362;
                double v22 = *(double *)&v15;
                _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}@", buf, 0xCu);
              }
            }
          }
          double v3 = 120.0;
        }
        else
        {
          double v3 = v3 * 6.0;
          double v4 = v3;
          if (v3 <= 0.0) {
            goto LABEL_23;
          }
        }
      }
    }
    if (*(double *)(a1 + 48) >= 0.0) {
      double v4 = *(double *)(a1 + 48);
    }
    else {
      double v4 = v3;
    }
  }
LABEL_23:
  v16 = VOTLogAudio();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    double v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Audio session de-activate delay: %f", buf, 0xCu);
  }

  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void **)(v17 + 112);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10000F9E4;
  v19[3] = &unk_1001B3448;
  v19[4] = v17;
  id v20 = *(id *)(a1 + 40);
  [v18 afterDelay:v19 processBlock:v4];
}

id sub_10000F9E4(uint64_t a1)
{
  uint64_t v2 = VOTLogAudio();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    unsigned int v3 = [*(id *)(a1 + 32) audioSessionActive];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 128);
    *(_DWORD *)buf = 67109634;
    unsigned int v12 = v3;
    __int16 v13 = 2114;
    uint64_t v14 = v4;
    __int16 v15 = 2114;
    uint64_t v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Attempt session deactivate. is active: %d - remove user: %{public}@, all users: %{public}@ ", buf, 0x1Cu);
  }

  if (AXDeviceSupportsSonification())
  {
    id v6 = +[VOTAudiographManager sharedManager];
    if ([v6 isPlaying])
    {
      unsigned int v7 = 1;
    }
    else
    {
      int v8 = +[VOTAudiographManager sharedManager];
      unsigned int v7 = [v8 isScrubbing];
    }
  }
  else
  {
    unsigned int v7 = 0;
  }
  id result = [*(id *)(a1 + 32) audioSessionActive];
  if (result)
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 128) count];
    if (!result)
    {
      id result = [*(id *)(a1 + 32) isSpeaking];
      if (result)
      {
        id result = [*(id *)(a1 + 32) isPaused];
        if ((result ^ 1 | v7)) {
          return result;
        }
      }
      else if (v7)
      {
        return result;
      }
      [*(id *)(a1 + 32) toggleAudioSessionActive:0];
      unsigned __int8 v10 = VOTLogAudio();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        sub_10011BA4C();
      }

      return (id)AX_PERFORM_WITH_LOCK();
    }
  }
  return result;
}

void sub_10000FBD8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 40) removeAllObjects];
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;
}

void sub_100010574(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 176) allValues];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100010624;
  v6[3] = &unk_1001B3538;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

uint64_t sub_100010624(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, *(void *)(a1 + 32));
}

void sub_10001063C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 168) allValues];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000106EC;
  v6[3] = &unk_1001B3538;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

uint64_t sub_1000106EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, *(void *)(a1 + 32));
}

void sub_100010BE8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100010C04(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100010C20(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_100010F6C(uint64_t a1)
{
  qword_1001EB6A8 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

void sub_100011050()
{
  id v0 = +[VOTLockStateManager sharedInstance];
  [v0 _notifyObserversLockStateDidChange];
}

uint64_t sub_100012204(uint64_t a1)
{
  CFPreferencesSetAppValue(*(CFStringRef *)(a1 + 32), *(CFPropertyListRef *)(a1 + 40), kAXSAccessibilityPreferenceDomain);
  CFStringRef v1 = (const __CFString *)kAXSAccessibilityPreferenceDomain;

  return CFPreferencesAppSynchronize(v1);
}

uint64_t sub_100012328(uint64_t a1)
{
  CFPreferencesSetAppValue(*(CFStringRef *)(a1 + 32), *(CFPropertyListRef *)(a1 + 40), kAXSAccessibilityPreferenceDomain);
  CFStringRef v1 = (const __CFString *)kAXSAccessibilityPreferenceDomain;

  return CFPreferencesAppSynchronize(v1);
}

void sub_100012B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100012B34(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateAudioSessionProperties];
}

uint64_t sub_100012BE8(uint64_t a1)
{
  uint64_t result = hearingAidStreamSelected();
  *(unsigned char *)(*(void *)(a1 + 32) + 104) = result;
  return result;
}

id sub_100013A10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cancelHelperFired:*(void *)(a1 + 40)];
}

uint64_t sub_100013A1C(uint64_t a1)
{
  CFStringRef v1 = (uint64_t *)(a1 + 32);
  [*(id *)(a1 + 32) _finishedPlaying];
  uint64_t v2 = VOTLogAudio();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10011BF48(v1, v2);
  }

  *(unsigned char *)(*v1 + 136) = 0;
  id v3 = VOTLogAudio();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_10011BF04(v3);
  }

  int inPropertyData = 0;
  return AudioServicesSetProperty(0x61637421u, 4u, (const void *)(*v1 + 32), 4u, &inPropertyData);
}

void sub_100013CBC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_100014A04(id a1)
{
  id v1 = objc_alloc_init((Class)NSLock);
  uint64_t v2 = (void *)qword_1001EB6E0;
  qword_1001EB6E0 = (uint64_t)v1;

  qword_1001EB6E8 = (uint64_t)objc_alloc_init((Class)NSLock);

  _objc_release_x1();
}

void sub_100014B48(id a1)
{
  id v3 = objc_alloc_init((Class)AXUIMockElement);
  uint64_t v1 = +[VOTElement elementWithUIElement:v3];
  uint64_t v2 = (void *)qword_1001EB6C8;
  qword_1001EB6C8 = v1;
}

void sub_100014BAC(uint64_t a1)
{
  id v1 = objc_allocWithZone(*(Class *)(a1 + 32));
  id v4 = +[AXUIElement uiSystemWideApplication];
  id v2 = [v1 initWithUIElement:v4];
  id v3 = (void *)qword_1001EB6C8;
  qword_1001EB6C8 = (uint64_t)v2;
}

void sub_100014D78(id a1)
{
  +[VOTElement resetSystemAppElement];
  id v1 = (void *)VOTSharedWorkspace;

  [v1 handleSystemWideServerDied];
}

void sub_100014EC8(id a1)
{
}

void sub_100016798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000167B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000167C0(uint64_t a1)
{
}

uint64_t sub_1000167C8(uint64_t a1, void *a2)
{
  id v3 = [a2 localOpaqueParent];
  if (v3) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v3);
  }

  return _objc_release_x1();
}

void sub_100016C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100016C1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = [a2 objectForKeyedSubscript:UIAccessibilityTokenReplaceWithWiFiSSID];
  unsigned int v8 = [v7 BOOLValue];

  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + a3, a4, *(void *)(a1 + 40));
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += (char *)[*(id *)(a1 + 40) length] - a4;
  }
}

void sub_10001782C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100017844(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = [a2 objectForKeyedSubscript:UIAccessibilityTokenReplaceWithActiveActivity];
  unsigned int v8 = [v7 BOOLValue];

  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + a3, a4, *(void *)(a1 + 40));
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += (char *)[*(id *)(a1 + 40) length] - a4;
  }
}

void sub_100017EAC(id a1)
{
  id v3 = objc_alloc_init((Class)AXUIMockElement);
  uint64_t v1 = +[VOTElement elementWithUIElement:v3];
  id v2 = (void *)qword_1001EB728;
  qword_1001EB728 = v1;
}

uint64_t sub_10001A3AC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) uiElement];
  CFStringRef v27 = @"direction";
  id v3 = +[NSNumber numberWithLong:*(void *)(a1 + 48)];
  v28 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  [v2 performAXAction:2003 withValue:v4];

  id v5 = [*(id *)(a1 + 32) uiElement];
  LODWORD(v3) = [v5 BOOLWithAXAttribute:2093];

  if (v3)
  {
    id v6 = [*(id *)(a1 + 32) remoteParent];
    if (v6)
    {
      [*(id *)(a1 + 32) updateFrame];
      [*(id *)(a1 + 32) frame];
      double v8 = v7;
      double v10 = v9;
      double v12 = v11;
      double v14 = v13;
      __int16 v15 = +[AXBackBoardServer server];
      objc_msgSend(v15, "convertFrame:fromContextId:", objc_msgSend(*(id *)(a1 + 32), "windowContextId"), v8, v10, v12, v14);
      double v17 = v16;
      double v19 = v18;
      double v21 = v20;
      double v23 = v22;

      v24 = [v6 uiElement];
      v25 = +[NSValue valueWithRect:](NSValue, "valueWithRect:", v17, v19, v21, v23);
      [v24 performAXAction:2039 withValue:v25];
    }
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10001AE94(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = +[NSKeyedArchiver archivedDataWithRootObject:a2 requiringSecureCoding:1 error:0];
  [v2 performAXAction:2065 withValue:v3];
}

void sub_10001B2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001B2FC(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = [a2 uiElement];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 performAXAction:2013];

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *a3 = 1;
  }
}

void sub_10001C544(id a1)
{
  id v1 = +[AXSpringBoardServer server];
  [v1 dismissShelfSwitcher];
}

void sub_10001C58C(id a1)
{
  id v1 = +[AXSpringBoardServer server];
  [v1 requestDismissJindo];
}

void sub_10001CA58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001CB3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001CCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001CCBC(uint64_t a1, void *a2, unsigned char *a3)
{
  id v8 = a2;
  id v5 = [v8 uiElement];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 performAXAction:*(unsigned int *)(a1 + 40)];

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
    || ([v8 uiElement],
        id v6 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v7 = [v6 BOOLWithAXAttribute:2093],
        v6,
        (v7 & 1) == 0))
  {
    *a3 = 1;
  }
}

uint64_t sub_10001CECC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = +[NSValue valueWithRect:](NSValue, "valueWithRect:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
  [v2 performAXAction:2039 withValue:v3];

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

BOOL sub_10001DC9C(uint64_t a1, float a2, float a3, float a4, float a5)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return vabds_f32(a2, a3) < (float)(a4 / 3.0);
  }
  v6.location = (unint64_t)a2;
  v6.length = (unint64_t)a4;
  v7.location = (unint64_t)a3;
  v7.length = (unint64_t)a5;
  return NSIntersectionRange(v6, v7).length != 0;
}

void sub_10001E5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001E5D8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v2 + 24))
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = (uint64_t)[a2 includesFeaturesForImageExploration];
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(unsigned char *)(v2 + 24) = result;
  return result;
}

id sub_10001E624(id a1, id a2, unint64_t a3)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = [[VOTCustomAction alloc] initWithWireDictionary:v3];
  }
  else {
    id v4 = (VOTCustomAction *)v3;
  }
  id v5 = v4;

  return v5;
}

int64_t sub_10001E69C(id a1, VOTCustomAction *a2, VOTCustomAction *a3)
{
  id v4 = a3;
  unint64_t v5 = [(VOTCustomAction *)a2 sortPriority];
  unint64_t v6 = [(VOTCustomAction *)v4 sortPriority];

  return v5 > v6;
}

BOOL sub_10001E928(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 categoryName];
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    BOOL v5 = 1;
  }
  else if (*(void *)(a1 + 32))
  {
    BOOL v5 = 0;
  }
  else
  {
    unint64_t v6 = [v3 categoryName];
    BOOL v5 = v6 == 0;
  }
  return v5;
}

int64_t sub_10001E9AC(id a1, VOTCustomActionCategory *a2, VOTCustomActionCategory *a3)
{
  id v4 = a3;
  BOOL v5 = [(VOTCustomActionCategory *)a2 categoryName];
  unint64_t v6 = [(VOTCustomActionCategory *)v4 categoryName];

  id v7 = [v5 localizedCompare:v6];
  return (int64_t)v7;
}

void sub_10001FE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001FEA0(uint64_t a1, void *a2, unsigned char *a3)
{
  BOOL v5 = [a2 application];
  uint64_t v6 = [v5 activeKeyboard];
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    *a3 = 1;
  }
}

void sub_1000201B0(uint64_t a1, void *a2)
{
  id v3 = [a2 uiElement];
  [v3 setAXAttribute:2018 withObject:*(void *)(a1 + 32) synchronous:0];
}

void sub_1000237DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100023FC0(id a1, id a2, unint64_t a3)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    BOOL v5 = [v4 objectForKeyedSubscript:AXInteractionLocationDescriptorViewPointerNumberKey];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0) {
      goto LABEL_7;
    }
    uint64_t v7 = [v4 objectForKeyedSubscript:AXInteractionLocationDescriptorAttributedNameKey];
    objc_opt_class();
    char v8 = objc_opt_isKindOfClass();

    if ((v8 & 1) == 0) {
      goto LABEL_7;
    }
    uint64_t v9 = AXInteractionLocationDescriptorPointValueKey;
    double v10 = [v4 objectForKeyedSubscript:AXInteractionLocationDescriptorPointValueKey];
    CFTypeID v11 = CFGetTypeID(v10);
    CFTypeID TypeID = AXValueGetTypeID();

    if (v11 == TypeID)
    {
      double v13 = [v4 objectForKeyedSubscript:v9];
      BOOL v14 = AXValueGetType(v13) == kAXValueTypeCGPoint;
    }
    else
    {
LABEL_7:
      BOOL v14 = 0;
    }
  }
  else
  {
    BOOL v14 = 0;
  }

  return v14;
}

void sub_100024320(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [VOTDragCustomAction alloc];
  uint64_t v7 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  BOOL v14 = [(VOTDragCustomAction *)v6 initWithName:v7 wireDictionary:v5];

  if (*(unsigned char *)(a1 + 64))
  {
    char v8 = [*(id *)(a1 + 40) remoteParent];

    if (v8)
    {
      [*(id *)(*(void *)(a1 + 40) + 8) rectWithAXAttribute:2171];
      CGFloat x = v16.origin.x;
      CGFloat y = v16.origin.y;
      CGFloat width = v16.size.width;
      CGFloat height = v16.size.height;
      double MidX = CGRectGetMidX(v16);
      v17.origin.CGFloat x = x;
      v17.origin.CGFloat y = y;
      v17.size.CGFloat width = width;
      v17.size.CGFloat height = height;
      -[VOTDragCustomAction setRemotePoint:](v14, "setRemotePoint:", MidX, CGRectGetMidY(v17));
      [(VOTDragCustomAction *)v14 setRemoteElement:*(void *)(a1 + 48)];
    }
  }
  [*(id *)(a1 + 56) addObject:v14];
}

BOOL sub_100024500(id a1, id a2, unint64_t a3)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    id v5 = [v4 objectForKeyedSubscript:AXInteractionLocationDescriptorViewPointerNumberKey];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v7 = [v4 objectForKeyedSubscript:AXInteractionLocationDescriptorAttributedNameKey];
    objc_opt_class();
    char v8 = objc_opt_isKindOfClass();

    if ((v8 & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v9 = AXInteractionLocationDescriptorPointValueKey;
    double v10 = [v4 objectForKeyedSubscript:AXInteractionLocationDescriptorPointValueKey];
    CFTypeID v11 = CFGetTypeID(v10);
    CFTypeID TypeID = AXValueGetTypeID();

    if (v11 != TypeID) {
      goto LABEL_12;
    }
    double v13 = [v4 objectForKeyedSubscript:v9];
    AXValueType Type = AXValueGetType(v13);

    if (Type != kAXValueTypeCGPoint) {
      goto LABEL_12;
    }
    uint64_t v15 = AXInteractionLocationDescriptorContextSpacePointKey;
    CGRect v16 = [v4 objectForKeyedSubscript:AXInteractionLocationDescriptorContextSpacePointKey];
    CFTypeID v17 = CFGetTypeID(v16);
    CFTypeID v18 = AXValueGetTypeID();

    if (v17 != v18) {
      goto LABEL_12;
    }
    double v19 = [v4 objectForKeyedSubscript:v15];
    AXValueType v20 = AXValueGetType(v19);

    if (v20 != kAXValueTypeCGPoint) {
      goto LABEL_12;
    }
    uint64_t v21 = AXInteractionLocationDescriptorFixedScreenSpacePointKey;
    double v22 = [v4 objectForKeyedSubscript:AXInteractionLocationDescriptorFixedScreenSpacePointKey];
    CFTypeID v23 = CFGetTypeID(v22);
    CFTypeID v24 = AXValueGetTypeID();

    if (v23 != v24) {
      goto LABEL_12;
    }
    v25 = [v4 objectForKeyedSubscript:v21];
    AXValueType v26 = AXValueGetType(v25);

    if (v26 == kAXValueTypeCGPoint)
    {
      CFStringRef v27 = [v4 objectForKeyedSubscript:AXInteractionLocationDescriptorContextIDKey];
      objc_opt_class();
      char v28 = objc_opt_isKindOfClass();
    }
    else
    {
LABEL_12:
      char v28 = 0;
    }
  }
  else
  {
    char v28 = 0;
  }

  return v28 & 1;
}

void sub_10002484C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [VOTDropCustomAction alloc];
  uint64_t v7 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  char v8 = [(VOTDropCustomAction *)v6 initWithName:v7 wireDictionary:v5];

  [*(id *)(a1 + 40) addObject:v8];
}

BOOL sub_100026EBC(void *a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = (unint64_t)[a1 traits];
  unint64_t v5 = (unint64_t)[v3 traits];

  if (((kAXButtonTrait & v4) != 0) == ((kAXButtonTrait & v5) == 0)
    || ((kAXHeaderTrait & v4) != 0) == ((kAXHeaderTrait & v5) == 0))
  {
    return 1;
  }
  unint64_t v6 = kAXTextEntryTrait & v5;
  if ((kAXTextEntryTrait & v4) != 0 && v6 == 0) {
    return 1;
  }
  return (kAXTextEntryTrait & v4) == 0 && v6 != 0;
}

uint64_t sub_100026F84()
{
  uint64_t result = _sl_dlopen();
  qword_1001EB748 = result;
  return result;
}

void sub_100026FF8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_100027FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100028010(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = VOTLogAudio();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v9 = 138412290;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sound complete: %@", (uint8_t *)&v9, 0xCu);
  }

  unint64_t v6 = +[VOTOutputManager outputManager];
  [v6 disableAudioSession:*(void *)(a1 + 32)];

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained setCompletionBlock:0];
  }
}

void sub_100028C78(id a1)
{
  qword_1001EB750 = [[VOTCrashManager alloc] _init];

  _objc_release_x1();
}

void sub_100028EB8(id a1)
{
  id v1 = VOTLogCommon();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "VoiceOver alive for 10s. Resetting crash count", v3, 2u);
  }

  uint64_t v2 = +[VOTCrashManager sharedInstance];
  [v2 _resetConsecutiveCrashCount];
}

void sub_100029348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002936C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _resetTranslator];
}

void sub_10002A978(uint64_t a1)
{
  uint64_t v2 = VOTLogBrailleGestures();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_10011CAC0(a1, v2);
  }
}

void sub_10002AFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002AFC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002AFD4(uint64_t a1)
{
}

void sub_10002AFDC(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10002B27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002B2A0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10002B3D8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_10002B404(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

__CFString *sub_10002B424(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = a1;
  id v11 = a2;
  v19[1] = &a9;
  id v12 = objc_alloc((Class)NSString);
  double v13 = +[NSLocale localeWithLocaleIdentifier:@"en-US"];
  v19[0] = 0;
  id v14 = [v12 initWithValidatedFormat:v10 validFormatSpecifiers:v11 locale:v13 arguments:&a9 error:v19];
  id v15 = v19[0];

  if (v15)
  {
    CGRect v16 = AXLogCommon();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412802;
      id v21 = v15;
      __int16 v22 = 2112;
      id v23 = v10;
      __int16 v24 = 2112;
      id v25 = v11;
      _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Error creating string: %@ [%@/%@]", buf, 0x20u);
    }

    CFTypeID v17 = &stru_1001B7888;
  }
  else
  {
    CFTypeID v17 = (__CFString *)v14;
  }

  return v17;
}

void sub_10002BEC0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_10002BEFC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateUserSubstitutions:*(void *)(*(void *)(a1 + 32) + 224)];
}

void sub_10002BF58(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = +[AXSettings sharedInstance];
  objc_msgSend(WeakRetained, "setShouldOutputToHearingAid:", objc_msgSend(v1, "voiceOverShouldOutputToHearingAid"));
}

void sub_10002BFC4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAudioSessionProperties:0];
}

void sub_10002C008(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAudioSessionProperties:0];
}

void sub_10002C04C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained callStatusChanged];
}

void sub_10002C08C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAudioSessionProperties:0];
}

void sub_10002C0D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateDuckingMode:0];
}

void sub_10002CB14(uint64_t a1)
{
  v42[0] = 0;
  v42[1] = v42;
  v42[2] = 0x3032000000;
  v42[3] = sub_10002D13C;
  v42[4] = sub_10002D14C;
  id v43 = 0;
  uint64_t v2 = +[AVAudioSession sharedInstance];
  id v3 = [v2 category];

  uint64_t v4 = +[AVAudioSession sharedInstance];
  id v5 = [v4 categoryOptions];

  unint64_t v6 = (NSString *)AVAudioSessionCategoryVoiceOver;
  uint64_t v7 = +[VOTOutputManager outputManager];
  unsigned __int8 v8 = [v7 audioSessionActive];

  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_10002D154;
  v40[3] = &unk_1001B3AF8;
  unsigned __int8 v41 = v8;
  int v9 = objc_retainBlock(v40);
  if ([(id)VOTSharedWorkspace audioDestinationRequestExternal]) {
    goto LABEL_2;
  }
  CGRect v16 = +[AXSettings sharedInstance];
  if ([v16 voiceOverAudioFollowsHDMIAudio])
  {
    CFTypeID v17 = +[VOTOutputManager outputManager];
    unsigned int v18 = [v17 selectedRouteIsHDMI];

    if (v18)
    {
LABEL_2:
      id v10 = VOTLogAudio();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio destination is External", buf, 2u);
      }

      id v11 = +[VOTOutputManager outputManager];
      unsigned int v12 = [v11 externalAudioRouteSelected];

      if (v12)
      {
        double v13 = VOTLogAudio();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "External audio selected - changing to playback category", buf, 2u);
        }

        id v14 = AVAudioSessionCategoryPlayback;
        id v15 = +[VOTOutputManager outputManager];
        [v15 updateWithCurrentRoute];
        unint64_t v6 = v14;
      }
      else
      {
        double v19 = VOTLogAudio();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Changing route name to external audio", buf, 2u);
        }

        id v15 = +[VOTOutputManager outputManager];
        [v15 selectExternalAudioRoute];
      }
      goto LABEL_22;
    }
  }
  else
  {
  }
  AXValueType v20 = +[VOTOutputManager outputManager];
  unsigned int v21 = [v20 externalAudioRouteSelected];

  if (v21)
  {
    __int16 v22 = VOTLogAudio();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "External audio already selected - going back to local", buf, 2u);
    }

    id v15 = +[VOTOutputManager outputManager];
    [v15 selectLocalAudioRoute];
  }
  else
  {
    id v23 = VOTLogAudio();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Update to current route when external audio route not selected", buf, 2u);
    }

    id v15 = +[VOTOutputManager outputManager];
    [v15 updateWithCurrentRoute];
  }
LABEL_22:

  id v24 = *(id *)(a1 + 40);
  if (v5 == v24)
  {
LABEL_27:
    int v28 = 0;
    goto LABEL_29;
  }
  if (*(id *)(*(void *)(a1 + 32) + 192) == v24)
  {
    id v25 = VOTLogAudio();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void *)(a1 + 40);
      uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 192);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v45 = 1;
      *(_WORD *)&v45[4] = 2048;
      *(void *)&v45[6] = v27;
      *(_WORD *)&v45[14] = 2048;
      *(void *)&v45[16] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Not really different options (different: %d) (lastSet: %lu, newSet: %lu)", buf, 0x1Cu);
    }

    goto LABEL_27;
  }
  int v28 = 1;
LABEL_29:
  unsigned int v29 = [v3 isEqualToString:v6];
  v30 = VOTLogAudio();
  int v31 = v28 | v29 ^ 1;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v32 = @"NO";
    uint64_t v33 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138544386;
    if (v31) {
      CFStringRef v32 = @"YES";
    }
    *(void *)v45 = v32;
    *(_WORD *)&v45[8] = 2114;
    *(void *)&v45[10] = v3;
    *(_WORD *)&v45[18] = 2114;
    *(void *)&v45[20] = v6;
    __int16 v46 = 2048;
    id v47 = v5;
    __int16 v48 = 2048;
    uint64_t v49 = v33;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Changing route? [%{public}@] - categories [%{public}@/%{public}@], options: [%lu/%lu]", buf, 0x34u);
  }

  if (v31)
  {
    *(void *)(*(void *)(a1 + 32) + 192) = *(void *)(a1 + 40);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10002D208;
    v36[3] = &unk_1001B3B20;
    v34 = v6;
    uint64_t v35 = *(void *)(a1 + 40);
    v37 = v34;
    v38 = v42;
    uint64_t v39 = v35;
    ((void (*)(void *, void *))v9[2])(v9, v36);
  }
  _Block_object_dispose(v42, 8);
}

void sub_10002D0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002D13C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002D14C(uint64_t a1)
{
}

void sub_10002D154(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v6 = v3;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v4 = +[VOTOutputManager outputManager];
    [v4 toggleAudioSessionActive:0];

    id v3 = v6;
  }
  if (v3)
  {
    v3[2](v6);
    id v3 = v6;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    id v5 = +[VOTOutputManager outputManager];
    [v5 toggleAudioSessionActive:1];

    id v3 = v6;
  }
}

void sub_10002D208(void *a1)
{
  uint64_t v2 = VOTLogAudio();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[6];
    *(_DWORD *)buf = 138412546;
    uint64_t v21 = v3;
    __int16 v22 = 1024;
    int v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting category to %@ with options: %d", buf, 0x12u);
  }

  id v5 = +[AVAudioSession sharedInstance];
  uint64_t v6 = *(void *)(a1[5] + 8);
  id obj = *(id *)(v6 + 40);
  [v5 setDuckingFadeOutDuration:&off_1001C4F18 fadeInDuration:&off_1001C4F28 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);

  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    uint64_t v7 = VOTLogAudio();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10011CC84();
    }
  }
  unsigned __int8 v8 = +[AVAudioSession sharedInstance];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[4];
  uint64_t v11 = *(void *)(a1[5] + 8);
  id v18 = *(id *)(v11 + 40);
  [v8 setCategory:v10 withOptions:v9 error:&v18];
  objc_storeStrong((id *)(v11 + 40), v18);

  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    unsigned int v12 = VOTLogAudio();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10011CC18();
    }
  }
  double v13 = VOTLogAudio();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Setting VoiceOver MX Session audio property for playback during continuity camera", buf, 2u);
  }

  id v14 = +[AVAudioSession sharedInstance];
  id v17 = 0;
  [v14 setMXSessionProperty:kMXSessionProperty_PrefersToPlayDuringWombat value:&__kCFBooleanTrue error:&v17];
  id v15 = v17;

  if (v15)
  {
    CGRect v16 = VOTLogAudio();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_10011CBB0();
    }
  }
}

void sub_10002E3C4(id a1)
{
  uint64_t v6 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v1 = dispatch_queue_create("vot-language-reload-queue", v6);
  uint64_t v2 = (void *)qword_1001EB768;
  qword_1001EB768 = (uint64_t)v1;

  id v3 = objc_alloc((Class)AXDispatchTimer);
  id v4 = [v3 initWithTargetSerialQueue:qword_1001EB768];
  id v5 = (void *)qword_1001EB760;
  qword_1001EB760 = (uint64_t)v4;

  [(id)qword_1001EB760 setAutomaticallyCancelPendingBlockUponSchedulingNewBlock:1];
}

void sub_10002E464(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 208) isEqualToString:*(void *)(a1 + 40)] & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 208), *(id *)(a1 + 40));
    id v2 = objc_alloc_init((Class)AXIndexMap);
    [*(id *)(a1 + 32) _loadPunctuationTable:v2 withLevel:1 language:*(void *)(a1 + 40)];
    id v3 = objc_alloc_init((Class)AXIndexMap);
    [*(id *)(a1 + 32) _loadPunctuationTable:v3 withLevel:2 language:*(void *)(a1 + 40)];
    id v4 = objc_alloc_init((Class)AXIndexMap);
    [*(id *)(a1 + 32) _loadPunctuationTable:v4 withLevel:3 language:*(void *)(a1 + 40)];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 40);
    v8[0] = v2;
    v8[1] = v3;
    v8[2] = v4;
    uint64_t v7 = +[NSArray arrayWithObjects:v8 count:3];
    objc_msgSend(v6, "performSelector:onTarget:count:objects:", "_resetLanguageDataOnSpeechThread:language:", v5, 2, v7, *(void *)(a1 + 40), 0);
  }
}

void sub_10002E5B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 208);
  *(void *)(v1 + 208) = 0;
}

void sub_1000300B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000300D8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000310D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100031108(id a1)
{
  id v5 = 0;
  uint64_t v1 = +[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", @"(?<!\\b[[:lower:]\\d]{1})[[:upper:]]+[[:lower:]\\d]+", 0, &v5);
  id v2 = v5;
  id v3 = (void *)qword_1001EB798;
  qword_1001EB798 = v1;

  if (v2)
  {
    id v4 = VOTLogSpeech();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10011CF48();
    }
  }
}

void sub_1000311A4(uint64_t a1, void *a2)
{
  id v19 = a2;
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    uint64_t v3 = +[NSMutableString string];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  [*(id *)(a1 + 32) rangeOfString:@"VoiceOver"];
  if (!v6)
  {
    [*(id *)(a1 + 32) rangeOfString:@"Hz"];
    if (!v7)
    {
      unsigned __int8 v8 = +[NSCharacterSet whitespaceNewlineAndSpecialCharacterSet];
      id v9 = [v8 mutableCopy];

      uint64_t v10 = +[NSCharacterSet punctuationCharacterSet];
      [v9 formUnionWithCharacterSet:v10];

      if ([v19 numberOfRanges])
      {
        unint64_t v11 = 0;
        do
        {
          unsigned int v12 = (char *)[v19 rangeAtIndex:v11];
          uint64_t v14 = v13;
          uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          id v17 = objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", v16, &v12[-v16]);
          [v15 appendString:v17];

          if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) length]
            && (objc_msgSend(v9, "characterIsMember:", objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "characterAtIndex:", (char *)objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "length")- 1)) & 1) == 0&& !*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
          {
            [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendString:@" "];
          }
          id v18 = objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", v12, v14);
          *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v18 isEqualToString:@"Mc"];
          [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendString:v18];
          *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = &v12[v14];

          ++v11;
        }
        while ((unint64_t)[v19 numberOfRanges] > v11);
      }
    }
  }
}

id sub_1000319C4(id a1, NSTextCheckingResult *a2, unint64_t a3)
{
  id v4 = [(NSTextCheckingResult *)a2 range];

  return +[NSValue valueWithRange:](NSValue, "valueWithRange:", v4, v3);
}

void sub_1000323F8(id a1)
{
  id v4 = 0;
  uint64_t v1 = +[NSRegularExpression regularExpressionWithPattern:@"\\bJP¥[0-9.,]+\\b" options:1 error:&v4];
  id v2 = v4;
  uint64_t v3 = (void *)qword_1001EB7C8;
  qword_1001EB7C8 = v1;
}

void sub_100032AB8(id a1)
{
  id v4 = 0;
  uint64_t v1 = +[NSRegularExpression regularExpressionWithPattern:@"([\\d])+" options:1 error:&v4];
  id v2 = v4;
  uint64_t v3 = (void *)qword_1001EB7D8;
  qword_1001EB7D8 = v1;
}

id sub_100032B24(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"%@ ", a2];
}

void sub_100032E94(id a1)
{
  id v4 = 0;
  uint64_t v1 = +[NSRegularExpression regularExpressionWithPattern:@"([1-9]){1}(′|')\\s?([0-9]{1,2})(″|\")" options:1 error:&v4];
  id v2 = v4;
  uint64_t v3 = (void *)qword_1001EB7E8;
  qword_1001EB7E8 = v1;
}

void sub_1000330F0(id a1)
{
  id v4 = 0;
  uint64_t v1 = +[NSRegularExpression regularExpressionWithPattern:@"\\b(([0-9]{1,2})h)?([0-9]{1,2})(min|m)\\b" options:1 error:&v4];
  id v2 = v4;
  uint64_t v3 = (void *)qword_1001EB7F8;
  qword_1001EB7F8 = v1;
}

BOOL sub_1000346A4(id a1, AXSSPunctuationEntry *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(AXSSPunctuationEntry *)a2 punctuation];
  char v5 = sub_1000519BC(v4);

  return v5;
}

CFStringRef sub_1000346E0(uint64_t a1)
{
  CFStringRef v1 = &stru_1001B7888;
  if ((a1 - 56319) >= 2 && a1 != 65532)
  {
    if (a1 == 8233)
    {
      return @"\n";
    }
    else
    {
      id v4 = +[NSCharacterSet controlCharacterSet];
      if ([v4 characterIsMember:a1])
      {
        char v5 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
        unsigned int v6 = [v5 characterIsMember:a1];

        if (v6) {
          CFStringRef v1 = 0;
        }
      }
      else
      {
        CFStringRef v1 = 0;
      }
    }
  }
  return v1;
}

NSString *__cdecl sub_100034E94(id a1)
{
  CFStringRef v1 = [(id)VOTSharedWorkspace selectedLanguage];
  id v2 = sub_10005215C(46, @"UnicodeHex.Alternate1.", @"VOTOutputPunctuation", v1);

  return (NSString *)v2;
}

void sub_1000361D4(id a1)
{
  CFStringRef v1 = +[NSCharacterSet punctuationCharacterSet];
  id v2 = [v1 mutableCopy];
  uint64_t v3 = (void *)qword_1001EB828;
  qword_1001EB828 = (uint64_t)v2;

  id v4 = (void *)qword_1001EB828;
  char v5 = +[NSCharacterSet symbolCharacterSet];
  [v4 formUnionWithCharacterSet:v5];

  qword_1001EB830 = +[NSCharacterSet alphanumericCharacterSet];

  _objc_release_x1();
}

void sub_100036470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1000364AC(uint64_t a1, uint64_t a2)
{
  if (a2 && *(uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= 3)
  {
    uint64_t v3 = sub_100051804(off_1001EA9E8, @"repeat.filter.no.spaces", 0);
    id v4 = AXFormatInteger();
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", v3, v4, CEMEmojiTokenGetString());
    id v11 = (id)objc_claimAutoreleasedReturnValue();

    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v6 = *(void *)(v5 + 40);
    uint64_t v7 = *(void *)(v5 + 32) + *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (v7)
    {
      uint64_t v8 = +[NSString stringWithFormat:@", %@", v11];

      id v9 = (id)v8;
    }
    else
    {
      id v9 = v11;
    }
    id v12 = v9;
    objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", v7, v6, v9);
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += (char *)[v12 length] - v10;
  }
}

void sub_10003662C(void *a1, CFTypeRef cf, unint64_t a3, uint64_t a4)
{
  if (*(void *)(*(void *)(a1[5] + 8) + 24))
  {
    if (a3 <= *(void *)(*(void *)(a1[6] + 8) + 40) + *(void *)(*(void *)(a1[6] + 8) + 32)
      && CEMEmojiTokensAreEquivalent())
    {
      if (*(void *)(*(void *)(a1[5] + 8) + 24)) {
        ++*(void *)(*(void *)(a1[7] + 8) + 24);
      }
    }
    else
    {
      (*(void (**)(void))(a1[4] + 16))();
      uint64_t v8 = *(const void **)(*(void *)(a1[5] + 8) + 24);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(*(void *)(a1[5] + 8) + 24) = 0;
      }
    }
  }
  if (!*(void *)(*(void *)(a1[5] + 8) + 24))
  {
    *(void *)(*(void *)(a1[6] + 8) + 32) = a3;
    *(void *)(*(void *)(a1[6] + 8) + 40) = 0;
    *(void *)(*(void *)(a1[5] + 8) + 24) = CFRetain(cf);
    *(void *)(*(void *)(a1[7] + 8) + 24) = 1;
  }
  *(void *)(*(void *)(a1[6] + 8) + 40) += a4;
}

void sub_100036EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100036F04(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100037A10(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) length])
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = (char *)objc_msgSend(*(id *)(a1 + 32), "rangeOfString:options:range:", v5, 2, v6, (char *)objc_msgSend(*(id *)(a1 + 32), "length") - v6);
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      if (!v7) {
        goto LABEL_15;
      }
      if (v7 == (char *)0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      if (objc_msgSend(*(id *)(a1 + 40), "characterIsMember:", objc_msgSend(*(id *)(a1 + 32), "characterAtIndex:", v7 - 1)))
      {
LABEL_15:
        if (&v10[(void)v8] == [*(id *)(a1 + 32) length]
          || objc_msgSend(*(id *)(a1 + 40), "characterIsMember:", objc_msgSend(*(id *)(a1 + 32), "characterAtIndex:", &v10[(void)v8])))
        {
          id v11 = objc_msgSend(v13, "substringToIndex:", objc_msgSend(v13, "rangeOfString:", @"."));

          id v12 = sub_100051804(off_1001EA9E8, v11, 0);
          objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", v8, v10, v12);
          uint64_t v10 = (char *)[v12 length];

          id v13 = v11;
        }
      }
      unint64_t v6 = (unint64_t)&v8[(void)v10];
    }
    while (v6 < (unint64_t)[*(id *)(a1 + 32) length]);
  }
}

void sub_100038204(_Unwind_Exception *a1)
{
}

uint64_t sub_100038290(void *a1)
{
  id v1 = a1;
  if ([v1 hasPrefix:@"he"]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = (uint64_t)[v1 hasPrefix:@"ar"];
  }

  return v2;
}

uint64_t sub_1000382E8()
{
  return 0;
}

id sub_1000382F0()
{
  if (qword_1001EB850 != -1) {
    dispatch_once(&qword_1001EB850, &stru_1001B3DD0);
  }
  id v0 = (void *)qword_1001EB848;

  return v0;
}

void sub_100038344(id a1)
{
  qword_1001EB848 = +[NSCharacterSet characterSetWithCharactersInString:@"1234567890"];

  _objc_release_x1();
}

id sub_10003838C()
{
  if (qword_1001EB860 != -1) {
    dispatch_once(&qword_1001EB860, &stru_1001B3DF0);
  }
  id v0 = (void *)qword_1001EB858;

  return v0;
}

void sub_1000383E0(id a1)
{
  qword_1001EB858 = +[NSCharacterSet characterSetWithCharactersInString:@"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"];

  _objc_release_x1();
}

void sub_100038E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exception_object);
    id v19 = VOTLogSpeech();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_10011D444();
    }

    [a17 mutableCopy];
    objc_end_catch();
    JUMPOUT(0x100038DACLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000391A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000391C8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v9 = v7 + v8;
  if (a2 != v7 + v8)
  {
    uint64_t v10 = objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", v7 + v8, a2 - (v7 + v8));
    if (v9) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *(unsigned char *)(a1 + 72) == 0;
    }
    uint64_t v12 = !v11;
    id v13 = [*(id *)(a1 + 40) _stringForNormalText:v10 action:*(void *)(a1 + 48) allowPausingAtBoundaries:1 ignoreLeadingCommas:v12];
    [*(id *)(a1 + 56) appendString:v13];
  }
  uint64_t v14 = (char *)[*(id *)(a1 + 32) length];
  if (a3 >= &v14[-a2]) {
    a3 = &v14[-a2];
  }
  if (&a3[a2] <= [*(id *)(a1 + 32) length])
  {
    objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", a2, a3);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v15 = [*(id *)(a1 + 40) _stringForLiteralText:v17 action:*(void *)(a1 + 48) allowChangingLanguageForPunctuation:0];
    [*(id *)(a1 + 56) appendString:v15];
    uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8);
    *(void *)(v16 + 32) = a2;
    *(void *)(v16 + 40) = a3;
  }
}

uint64_t sub_100039664(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 objectForKey:AXUIAccessibilitySpeechAttributePhonemeSubstitution];
  if (v3) {
    [*(id *)(a1 + 32) addObject:v3];
  }

  return _objc_release_x1();
}

void sub_1000396D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc_init((Class)TTSSubstitution);
  [v7 setOriginalString:v6];

  [v7 setPhonemes:v5];
  [*(id *)(a1 + 32) addObject:v7];
}

void sub_10003A3E0(id a1)
{
  qword_1001EB868 = +[NSCharacterSet characterSetWithRange:](NSCharacterSet, "characterSetWithRange:", 10240, 256);

  _objc_release_x1();
}

void sub_10003B85C(id a1)
{
  +[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", @"(\\s{1})?(\\[\\[SSMLESCAPED\\]\\])|▓\\\\lt;break time=▓\\\\quot;\\d*(ms|s)▓\\\\quot; ▓\\\\#47;▓\\\\gt;|▓\\\\lt;say-as interpret-as=▓\\\\quot;(.+?)▓\\\\quot;▓\\\\gt;|▓\\\\lt;▓\\\\#47;say-as▓\\\\gt;|(\\[\\[\\[SSMLESCAPED\\]\\]\\][,]?)",
    0,
  uint64_t v1 = 0);
  uint64_t v2 = (void *)qword_1001EB880;
  qword_1001EB880 = v1;

  uint64_t v3 = +[NSRegularExpression regularExpressionWithPattern:@"(\\s{1})?(\\e\\\\pause=(\\d{1,4})\\\\ |\\[\\[slnc \\d{1,4}\\]\\])([,]\\s{1})?" options:0 error:0];
  id v4 = (void *)qword_1001EB888;
  qword_1001EB888 = v3;

  qword_1001EB890 = +[NSRegularExpression regularExpressionWithPattern:@"(\\x1b\\\\tn=[a-z]+\\\\|\\[\\[char [a-z]+\\]\\]|\\x1b\\\\rst\\\\)" options:0 error:0];

  _objc_release_x1();
}

void sub_10003C8CC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_10003C8EC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_10003C970(id a1)
{
  qword_1001EB8A0 = (uint64_t)[objc_allocWithZone((Class)VOTSpringBoardConnection) init];

  _objc_release_x1();
}

void sub_10003CF58(id a1, int64_t a2)
{
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
  {
    _AXSVoiceOverTouchSetEnabled();
    if (_AXSCanDisableApplicationAccessibility())
    {
      _AXSApplicationAccessibilitySetEnabled();
    }
  }
  else
  {
    _AXSVoiceOverTouchSetUsageConfirmed();
  }
}

void sub_10003D0A4()
{
  __chkstk_darwin();
  uint64_t v1 = v0;
  uint64_t v2 = +[VOTSpringBoardConnection defaultConnection];
  unsigned __int8 v3 = [v2 isConnected];

  if ((v3 & 1) == 0)
  {
    LOBYTE(v8) = 1;
    _AXLogWithFacility();
    id v4 = +[VOTSpringBoardConnection defaultConnection];
    [v4 restartConnection];
  }
  if (!v1 || !AXSerializeWrapper())
  {
    id v5 = +[VOTSpringBoardConnection defaultConnection];
    id v6 = (__CFMachPort *)[v5 _sbPort];

    if (v6) {
      CFMachPortGetPort(v6);
    }
    if (sub_10010E968())
    {
      id v7 = +[VOTSpringBoardConnection defaultConnection];
      [v7 _sbPort];
      _AXLogWithFacility();
    }
  }
}

void sub_10003D490(id a1)
{
  uint64_t v1 = +[NSMutableCharacterSet controlCharacterSet];
  uint64_t v2 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
  [v1 formUnionWithCharacterSet:v2];

  [v1 addCharactersInString:@"\u200E"];
  unsigned __int8 v3 = (void *)qword_1001EB8B0;
  qword_1001EB8B0 = (uint64_t)v1;
}

void sub_10003D930(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [[VOTNameSearcherLaunchableApp alloc] initWithName:v6 displayID:v5];

  [*(id *)(a1 + 32) addObject:v7];
}

void sub_10003D9BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [[VOTNameSearcherLaunchableApp alloc] initWithName:v6 displayID:v5];

  [*(id *)(a1 + 32) addObject:v7];
}

int64_t sub_10003DA48(id a1, VOTNameSearcherLaunchableApp *a2, VOTNameSearcherLaunchableApp *a3)
{
  id v4 = a3;
  id v5 = [(VOTNameSearcherLaunchableApp *)a2 name];
  id v6 = [(VOTNameSearcherLaunchableApp *)v4 name];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

id sub_10003DC10(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = [v1 objectForKeyedSubscript:@"x"];
    [v2 floatValue];
    double v4 = v3;
    id v5 = [v1 objectForKeyedSubscript:@"y"];

    [v5 floatValue];
    id v7 = +[NSValue ax_valueWithCGPoint:](NSValue, "ax_valueWithCGPoint:", v4, v6);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id sub_10003DCCC(void *a1)
{
  id v1 = a1;
  if (!v1) {
    _AXAssert();
  }
  objc_msgSend(v1, "ax_CGPointValue");
  double v3 = v2;
  v8[0] = @"x";
  double v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v8[1] = @"y";
  v9[0] = v4;
  id v5 = +[NSNumber numberWithDouble:v3];
  v9[1] = v5;
  float v6 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];

  return v6;
}

double sub_10003DDE8(void *a1)
{
  id v1 = a1;
  double x = CGPointZero.x;
  double y = CGPointZero.y;
  id v4 = [v1 count];
  if (v4)
  {
    unint64_t v5 = (unint64_t)v4;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v6 = v1;
    id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v15;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v6);
          }
          objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * (void)v10), "ax_CGPointValue", (void)v14);
          double x = x + v11;
          double y = y + v12;
          uint64_t v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v8);
    }

    double x = x / (double)v5;
  }

  return x;
}

void sub_10003E048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E060(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10003E070(uint64_t a1)
{
}

void sub_10003E078(NSRange *a1, void *a2, NSUInteger a3, uint64_t a4, NSUInteger a5, NSUInteger a6, unsigned char *a7)
{
  id v14 = a2;
  NSRange v15 = a1[3];
  id v22 = v14;
  if (v15.length)
  {
    v24.NSUInteger location = a5;
    v24.NSUInteger length = a6;
    NSRange v16 = NSIntersectionRange(v15, v24);
    NSUInteger length = a1[3].length;
    if (v16.length != length)
    {
      v15.NSUInteger location = a1[3].location;
      goto LABEL_10;
    }
LABEL_12:
    NSUInteger location = a1[2].location;
    *(void *)(location + 24) = a3;
    *(void *)(location + 32) = a4;
    objc_storeStrong((id *)(*(void *)(a1[2].length + 8) + 40), a2);
    AXValueType v20 = v22;
    goto LABEL_13;
  }
  if (v15.location >= a5 && v15.location - a5 <= a6) {
    goto LABEL_12;
  }
  NSUInteger length = 0;
LABEL_10:
  NSUInteger v19 = length + v15.location;
  AXValueType v20 = v22;
  if (a3 > v19) {
LABEL_13:
  }
    *a7 = 1;
}

void sub_10003E2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_10003E76C(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_1001EB8C8)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_10003E898;
    v3[4] = &unk_1001B3580;
    v3[5] = v3;
    long long v4 = off_1001B4000;
    uint64_t v5 = 0;
    qword_1001EB8C8 = _sl_dlopen();
  }
  if (!qword_1001EB8C8) {
    sub_10011D82C(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("UITextChecker");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10011D8AC();
  }
  qword_1001EB8C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10003E898()
{
  uint64_t result = _sl_dlopen();
  qword_1001EB8C8 = result;
  return result;
}

void sub_10003EA64(id a1)
{
  qword_1001EB8D8 = (uint64_t)[objc_allocWithZone((Class)VOTDisplayManager) init];

  _objc_release_x1();
}

id sub_10003EDA8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setCursorFrameForElement:*(void *)(a1 + 40) animated:*(unsigned __int8 *)(a1 + 48)];
}

void sub_10003F5DC(uint64_t a1)
{
  CFStringRef v5 = @"frame";
  v7.origin.double x = CGRectZero.origin.x;
  v7.origin.double y = CGRectZero.origin.y;
  v7.size.CGFloat width = CGRectZero.size.width;
  v7.size.CGFloat height = CGRectZero.size.height;
  double v2 = NSStringFromRect(v7);
  id v6 = v2;
  double v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

  long long v4 = [*(id *)(a1 + 32) uiClient];
  [v4 sendAsynchronousMessage:v3 withIdentifier:1 targetAccessQueue:0 completion:0];
}

void sub_10003FB14(uint64_t a1, void *a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  if (a3)
  {
    id v8 = *(void (**)(__n128, __n128, __n128, __n128))(*(void *)(a1 + 32) + 16);
    a4.n128_u64[0] = *(void *)&CGRectNull.origin.x;
    a5.n128_u64[0] = *(void *)&CGRectNull.origin.y;
    a6.n128_u64[0] = *(void *)&CGRectNull.size.width;
    a7.n128_u64[0] = *(void *)&CGRectNull.size.height;
    v8(a4, a5, a6, a7);
  }
  else
  {
    uint64_t v10 = [a2 objectForKey:@"convertedFrame"];
    uint64_t v9 = *(void *)(a1 + 32);
    CGRect v12 = CGRectFromString(v10);
    (*(void (**)(uint64_t, CGPoint, __n128, CGSize, __n128))(v9 + 16))(v9, v12.origin, *(__n128 *)&v12.origin.y, v12.size, *(__n128 *)&v12.size.height);
  }
}

void sub_10003FD10(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    long long v4 = *(void (**)(uint64_t, void))(v3 + 16);
    uint64_t v5 = *(void *)(a1 + 32);
    v4(v5, 0);
  }
  else
  {
    id v6 = [a2 objectForKey:@"convertedFramesStrings"];
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v6);
  }
}

id sub_10003FFF4(void *a1)
{
  id v1 = a1;
  double v2 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 2 * (void)[v1 count]);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * i), "pointValue", (void)v13);
        double v9 = v8;
        uint64_t v10 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
        [v2 addObject:v10];

        double v11 = +[NSNumber numberWithDouble:v9];
        [v2 addObject:v11];
      }
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }

  return v2;
}

void sub_100040C24(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length] && objc_msgSend(*(id *)(a1 + 40), "_isSystemReadyForUI"))
  {
    double v2 = [*(id *)(a1 + 40) uiClient];
    uint64_t v3 = *(void *)(a1 + 32);
    v10[0] = @"VoiceOverCaptionText";
    v10[1] = @"VoiceOverCaptionLanguage";
    CFStringRef v4 = *(const __CFString **)(a1 + 48);
    if (!v4) {
      CFStringRef v4 = &stru_1001B7888;
    }
    v11[0] = v3;
    v11[1] = v4;
    v10[2] = @"VoiceOverCaptionSpokenRange";
    id v5 = NSStringFromRange(*(NSRange *)(a1 + 64));
    v11[2] = v5;
    v10[3] = @"VoiceOverCaptionVoiceName";
    uint64_t v6 = [*(id *)(a1 + 56) name];
    NSRect v7 = (void *)v6;
    if (v6) {
      CFStringRef v8 = (const __CFString *)v6;
    }
    else {
      CFStringRef v8 = &stru_1001B7888;
    }
    v11[3] = v8;
    double v9 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:4];
    [v2 sendAsynchronousMessage:v9 withIdentifier:8 targetAccessQueue:0 completion:0];
  }
}

void sub_100041D18(uint64_t a1)
{
  double v2 = *(void **)(*(void *)(a1 + 32) + 56);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100041DC0;
  v3[3] = &unk_1001B3448;
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  [v2 registerWithCompletionHandler:v3];
}

id sub_100041DC0(uint64_t a1)
{
  [*(id *)(a1 + 32) addObserver:*(void *)(a1 + 40) selector:"_callStatusChanged:" name:TUCallCenterCallStatusChangedNotification object:0];
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = TUCallCenterVideoCallStatusChangedNotification;

  return [v2 addObserver:v3 selector:"_callStatusChanged:" name:v4 object:0];
}

id sub_100041FE4(uint64_t a1)
{
  [*(id *)(a1 + 32) _hunterMigrateDefaultRotors];
  [*(id *)(a1 + 32) _hunterMigrateDigitalCrownNavigation];
  double v2 = *(void **)(a1 + 32);

  return _[v2 _crystalBMigrateDuckingVolumePreferences];
}

void sub_1000431B8(id a1)
{
  qword_1001EB8E0 = (uint64_t)[objc_alloc((Class)AXUIClient) initWithIdentifier:@"AXAssetClient-VoiceOver" serviceBundleName:@"AXAssetAndDataServer"];

  _objc_release_x1();
}

void sub_100044B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
}

void sub_100044BC8(id a1, NSNotification *a2)
{
  id v5 = a2;
  double v2 = [(NSNotification *)v5 object];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v4 = [(NSNotification *)v5 object];
    sub_100050FCC(v4);
  }
}

void sub_100044C50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = [WeakRetained userCommandManager];
  [v1 reloadPreferringUserProfile];
}

void sub_100044CA8()
{
  [(id)VOTSharedWorkspace setDisableVoiceOverSettingOnStop:0];
  id v0 = +[VOTWorkspace sharedWorkspace];
  [v0 stop:1];
}

uint64_t sub_100044D04(int a1, int a2, CFTypeRef cf1)
{
  if (CFEqual(cf1, kAXSVoiceOverTouchUsageConfirmedNotification))
  {
    id v5 = (void *)VOTSharedWorkspace;
    return (uint64_t)_objc_msgSend(v5, "_voiceOverUsageConfirmed", v4);
  }
  if (CFEqual(cf1, @"com.apple.preferences.sounds.changed"))
  {
    uint64_t v6 = (void *)VOTSharedWorkspace;
    return (uint64_t)[v6 preferencesKeyboardClickStatusChange:0];
  }
  if (CFEqual(cf1, @"com.apple.language.changed"))
  {
    NSRect v7 = (void *)VOTSharedWorkspace;
    CFStringRef v8 = "_languageChanged";
LABEL_13:
    return (uint64_t)[v7 performSelector:v8 withObject:0 afterDelay:2.0];
  }
  if (CFEqual(cf1, @"com.apple.purplebuddy.LanguageResetReady"))
  {
    NSRect v7 = (void *)VOTSharedWorkspace;
    CFStringRef v8 = "_languageChangedInBuddy";
    goto LABEL_13;
  }
  if (CFEqual(cf1, kAXSVoiceOverTouchSpeakingRateChangedNotification))
  {
    uint64_t v10 = (void *)VOTSharedWorkspace;
    return (uint64_t)_objc_msgSend(v10, "_preferencesSpeechRateChange", v9);
  }
  else if (CFEqual(cf1, kAXSVoiceOverTouchEnabledNotification))
  {
    double v11 = (void *)VOTSharedWorkspace;
    uint64_t v12 = kAXSVoiceOverTouchEnabledNotification;
    return (uint64_t)_[v11 _voiceOverTouchEnabledChange:v12];
  }
  else if (CFEqual(cf1, kAXSVoiceOverTouchLanguageRotorChangedNotification))
  {
    long long v13 = (void *)VOTSharedWorkspace;
    return (uint64_t)[v13 preferencesLanguageRotorItemsChanged:0];
  }
  else if (CFEqual(cf1, kAXSVoiceOverTouchBrailleLanguageRotorChangedNotification))
  {
    long long v14 = (void *)VOTSharedWorkspace;
    return (uint64_t)[v14 preferencesBrailleLanguageRotorItemsChanged:0];
  }
  else if (CFEqual(cf1, kTTSPreferencesSpokenLanguageChangedNotification))
  {
    long long v15 = (void *)VOTSharedWorkspace;
    return (uint64_t)[v15 systemSpokenLanguageChanged:0];
  }
  else if (CFEqual(cf1, kAXSVoiceOverTouchTypingModeChangedNotification))
  {
    long long v16 = (void *)VOTSharedWorkspace;
    return (uint64_t)_[v16 _preferencesTypingModeChanged:0];
  }
  else
  {
    uint64_t result = CFEqual(cf1, kAXSVoiceOverTouchScreenCurtainNotification);
    if (result)
    {
      long long v17 = (void *)VOTSharedWorkspace;
      return (uint64_t)_[v17 _preferencesScreenCurtainChanged:0];
    }
  }
  return result;
}

void sub_100044FC8(id a1)
{
  if (_AXSVoiceOverTouchEnabledThroughAccessory())
  {
    id v1 = AXLogSystemApp();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "VOT requesting system-app wake-up for enabled-through-accessory", v3, 2u);
    }

    double v2 = +[AXSystemAppServer server];
    [v2 wakeUpDeviceIfNecessary];
  }
}

void sub_100045054(id a1)
{
}

void sub_10004506C()
{
  if ((AXInPreboardScenario() & 1) == 0)
  {
    [(id)VOTSharedWorkspace setDisableVoiceOverSettingOnStop:0];
    id v0 = +[AXSubsystemVoiceOverLifeCycle sharedInstance];
    unsigned __int8 v1 = [v0 ignoreLogging];

    if ((v1 & 1) == 0)
    {
      double v2 = +[AXSubsystemVoiceOverLifeCycle identifier];
      uint64_t v3 = AXLoggerForFacility();

      os_log_type_t v4 = AXOSLogLevelFromAXLogLevel();
      if (os_log_type_enabled(v3, v4))
      {
        id v5 = AXColorizeFormatLog();
        uint64_t v6 = _AXStringForArgs();
        if (os_log_type_enabled(v3, v4))
        {
          int v8 = 138543362;
          uint64_t v9 = v6;
          _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}@", (uint8_t *)&v8, 0xCu);
        }
      }
    }
    NSRect v7 = +[VOTWorkspace sharedWorkspace];
    [v7 stop:1];
  }
}

id sub_1000451D0()
{
  return [(id)VOTSharedWorkspace _updatePointerVoiceOverOptions];
}

id sub_1000451DC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleBluetoothEnablement];
}

id sub_1000451E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleOnenessCheck];
}

void sub_100045904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100045920(uint64_t a1)
{
  [*(id *)(a1 + 32) lock];
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  if (!*(unsigned char *)(v2 + 24))
  {
    [*(id *)(a1 + 40) end];
    uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  }
  *(unsigned char *)(v2 + 24) = 1;
  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 unlock];
}

uint64_t sub_100045984(uint64_t a1)
{
  uint64_t v2 = +[AXSubsystemVoiceOverLifeCycle sharedInstance];
  unsigned __int8 v3 = [v2 ignoreLogging];

  if ((v3 & 1) == 0)
  {
    os_log_type_t v4 = +[AXSubsystemVoiceOverLifeCycle identifier];
    id v5 = AXLoggerForFacility();

    os_log_type_t v6 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v5, v6))
    {
      NSRect v7 = AXColorizeFormatLog();
      int v8 = _AXStringForArgs();
      if (os_log_type_enabled(v5, v6))
      {
        int v10 = 138543362;
        double v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}@", (uint8_t *)&v10, 0xCu);
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100045BB4(uint64_t a1, void *a2)
{
  id v2 = a2;
  unsigned __int8 v3 = [v2 objectForKeyedSubscript:@"offset"];
  [v3 doubleValue];

  id v4 = v2;
  AXPerformBlockAsynchronouslyOnMainThread();
}

void sub_100045C80(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"enabled"];
  if ([v2 BOOLValue]) {
    BOOL v3 = *(double *)(a1 + 48) > 0.0;
  }
  else {
    BOOL v3 = 0;
  }

  if (v3 != [*(id *)(a1 + 40) reachabilityActive])
  {
    id v4 = +[VOTOutputManager outputManager];
    if (v3) {
      +[VOSOutputEvent ReachabilityDidBegin];
    }
    else {
    id v5 = +[VOSOutputEvent ReachabilityDidEnd];
    }
    [v4 sendEvent:v5];

    [*(id *)(a1 + 40) setReachabilityOffset:*(double *)(a1 + 48) / *((double *)&xmmword_1001EBE30 + 1)];
    [*(id *)(a1 + 40) setReachabilityActive:v3];
    id v6 = [*(id *)(a1 + 40) elementManager];
    [v6 handleReachabilityToggled];
  }
}

id sub_100045DA8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setReachabilityIdentifier:a2];
}

void sub_1000467AC(id a1)
{
}

void sub_1000467B8(id a1)
{
}

void sub_1000467C4(id a1)
{
}

void sub_1000467D0(id a1)
{
}

void sub_1000467DC(id a1)
{
}

void sub_1000467E8(id a1)
{
}

void sub_1000467F4(id a1)
{
}

void sub_100046800(id a1)
{
}

void sub_10004680C(id a1)
{
}

void sub_100046818(id a1)
{
}

void sub_100046824(id a1)
{
}

void sub_100046830(id a1)
{
}

void sub_10004683C(id a1)
{
}

void sub_100046848(id a1)
{
}

void sub_100046854(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 424);
  *(void *)(v1 + 424) = 0;
}

void sub_100046864(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  *(unsigned char *)(*(void *)(a1 + 32) + 471) = [v2 voiceOverImageCaptionsEnabled];
}

void sub_1000468C0(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  *(unsigned char *)(*(void *)(a1 + 32) + 472) = [v2 voiceOverShouldSpeakDiscoveredText];
}

void sub_10004691C(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  *(unsigned char *)(*(void *)(a1 + 32) + 473) = [v2 voiceOverAutomaticButtonLabels];
}

void sub_100046978(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  *(void *)(*(void *)(a1 + 32) + 576) = [v2 voiceOverContentDescriptionLevel];
}

void sub_1000469D4(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  *(void *)(*(void *)(a1 + 32) + 592) = [v2 voiceOverContainerOutputFeedback];
}

void sub_100046A30(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  *(void *)(*(void *)(a1 + 32) + 600) = [v2 voiceOverMoreContentOutputFeedback];
}

void sub_100046A8C(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  *(unsigned char *)(*(void *)(a1 + 32) + 474) = [v2 voiceOverSoundEffectsEnabled];
}

void sub_100046AE8(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  *(void *)(*(void *)(a1 + 32) + 608) = [v2 voiceOverNumberFeedback];
}

void sub_100046B44(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  *(void *)(*(void *)(a1 + 32) + 616) = [v2 voiceOverVerbosityEmojiFeedback];
}

void sub_100046BA0(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  *(unsigned char *)(*(void *)(a1 + 32) + 481) = [v2 voiceOverBrailleAlertsEnabled];
}

void sub_100046BFC(uint64_t a1)
{
  id v5 = +[AXSettings sharedInstance];
  uint64_t v2 = [v5 imageCaptioningDisabledApps];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 584);
  *(void *)(v3 + 584) = v2;
}

void sub_100046C64(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  objc_msgSend(*(id *)(a1 + 32), "setAutomaticAccessibilityEnabled:", objc_msgSend(v2, "automaticAccessibilityEnabled"));
}

void sub_100046CC4(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  objc_msgSend(*(id *)(a1 + 32), "setAutomaticAccessibilityVisualizationsEnabled:", (double)objc_msgSend(v2, "automaticAccessibilityVisualizationsEnabled"));
}

void sub_100046D24(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  objc_msgSend(*(id *)(a1 + 32), "setNavigationStyle:", objc_msgSend(v2, "voiceOverNavigationStyle"));
}

void sub_100046D84(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  objc_msgSend(*(id *)(a1 + 32), "setNavigationDirection:", objc_msgSend(v2, "voiceOverNavigationDirectionMode"));
}

void sub_100046DE4(id a1)
{
}

void sub_100046DF0(uint64_t a1)
{
  id v2 = +[AXSettings sharedInstance];
  objc_msgSend(*(id *)(a1 + 32), "setUpdateRotorWithElement:", objc_msgSend(v2, "voiceOverRotorUpdatesWithElement"));
}

void sub_100046E50(id a1)
{
}

void sub_100046E5C(id a1)
{
}

void sub_100046E68(id a1)
{
}

void sub_100046E74(id a1)
{
}

void sub_100047000(uint64_t a1)
{
  [*(id *)(a1 + 32) updateSelectedLanguage];
  [*(id *)(a1 + 32) systemSpokenLanguageChanged:0];
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:off_1001EA730 object:0];
}

void sub_100047104(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateActivityListeners];
  id v2 = [*(id *)(a1 + 32) votSettings];
  [v2 currentElementDidUpdate:*(void *)(a1 + 40)];
}

void sub_100047600(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004771C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100047DE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerWithSpringBoard];
}

void sub_10004858C(id a1)
{
  id v1 = +[NSBundle bundleWithPath:@"/System/Library/Frameworks/UIKit.framework"];
  [v1 load];
}

id sub_1000492D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _postKeyboardEventsForModifiers:*(unsigned int *)(a1 + 40) isKeyDown:*(unsigned __int8 *)(a1 + 44)];
}

id sub_1000492E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _postKeyboardEventWithKeyCode:*(unsigned __int16 *)(a1 + 44) characters:0 originalCharacters:0 modifierState:*(unsigned int *)(a1 + 40) isKeyDown:*(unsigned __int8 *)(a1 + 46)];
}

void sub_100049384(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 46)];
  uint64_t v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  id v4 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 44)];
  [v2 _postKeyboardEvent:v5 modifiers:v3 keyCode:v4];
}

void sub_10004950C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 56)];
  id v5 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 60)];
  [v2 _postKeyboardEventWithCharacters:v3 originalCharacters:v4 modifiers:v6 keyCode:v5];
}

void sub_10004A134(id a1, NSArray *a2, NSError *a3)
{
  uint64_t v4 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = AXMediaLogLanguageTranslation();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10011D9C4();
    }
  }
  NSRect v7 = AXMediaLogLanguageTranslation();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);

  if (v8)
  {
    uint64_t v9 = [(NSArray *)v4 ax_flatMappedArrayUsingBlock:&stru_1001B4548];
    int v10 = AXMediaLogLanguageTranslation();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_10011D928(v9, v10);
    }
  }
}

id sub_10004A20C(id a1, AXMTranslationModelInstallStatus *a2)
{
  id v2 = a2;
  uint64_t v3 = [(AXMTranslationModelInstallStatus *)v2 localeIdentifier];
  uint64_t v4 = +[NSNumber numberWithUnsignedInteger:[(AXMTranslationModelInstallStatus *)v2 state]];
  id v5 = [(AXMTranslationModelInstallStatus *)v2 progress];

  id v6 = +[NSNumber numberWithLongLong:v5];
  NSRect v7 = +[NSString stringWithFormat:@"[id: %@ state:%@ progress:%@]", v3, v4, v6];

  return v7;
}

void sub_10004A2E8(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = AXMediaLogLanguageTranslation();
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10011DA38();
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Translation asset installation finished successfully", v5, 2u);
  }
}

id sub_10004A45C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 uuid];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_10004A564(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004A644(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004A760(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  [*(id *)(*(void *)(a1 + 32) + 416) removeAllObjects];
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 416);
  id v4 = +[AXSSPunctuationManager sharedDatabase];
  id v5 = [v4 punctuationGroups];
  [v3 axSafelyAddObjectsFromArray:v5];

  id v6 = AXLogPunctuationStorage();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 416);
    int v13 = 138412290;
    uint64_t v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "resetting punc groups: %@", (uint8_t *)&v13, 0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 424);
  *(void *)(v8 + 424) = 0;

  int v10 = [*(id *)(a1 + 32) punctuationGroupsUpdatedHandler];
  BOOL v11 = v10 == 0;

  if (!v11)
  {
    uint64_t v12 = [*(id *)(a1 + 32) punctuationGroupsUpdatedHandler];
    v12[2]();
  }
  objc_sync_exit(v2);
}

void sub_10004A8D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004AA4C(id a1, VOTOutputRequest *a2)
{
  id v2 = +[VOTOutputManager outputManagerIfExists];
  [v2 updateAudioSessionProperties];
}

void sub_10004B39C(id a1, BOOL a2)
{
  if (!a2)
  {
    id v4 = +[VOTOutputManager outputManager];
    uint64_t v3 = +[VOSOutputEvent DidChangeVolume];
    [v4 sendEvent:v3];
  }
}

void sub_10004B820(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  [v1 _temporarilyChangeQuickNav:v2];
}

void sub_10004BA90(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = off_1001EA9E8;
  id v4 = [(id)VOTSharedWorkspace selectedLanguage];
  uint64_t v3 = sub_100051804(v2, @"system.unmuted", v4);
  [v1 speakSimpleString:v3];
}

void sub_10004BB18(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) eventRecord];
  [*(id *)(*(void *)(a1 + 40) + 40) postEvent:v2];
  id v3 = [v2 copy];

  [v3 setType:1026];
  [v3 setOriginalType:1026];
  [*(id *)(*(void *)(a1 + 40) + 40) postEvent:v3];
}

id sub_10004CA08(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _postNextLanguageEvent];
}

void sub_10004CFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004CFBC(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_callCenterQueue_currentCallState");
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10004D064(uint64_t a1)
{
  id v3 = +[AVSystemController sharedAVSystemController];
  id v2 = [v3 attributeForKey:AVSystemController_ActiveAudioRouteAttribute];
  *(unsigned char *)(*(void *)(a1 + 32) + 371) = [v2 isEqualToString:@"Speaker"];
}

void sub_10004E0E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004E0F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004E108(uint64_t a1)
{
}

void sub_10004E110(void *a1)
{
  id v5 = [*(id *)(a1[4] + 336) objectForKey:a1[5]];
  id v2 = [v5 copyWithCache];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_10004E178(uint64_t a1)
{
  id result = *(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (result)
  {
    if (*(_DWORD *)(a1 + 64) != -1)
    {
      if ([result pid] == *(_DWORD *)(a1 + 64)
        || (id result = [*(id *)(a1 + 32) doesHaveTraits:kAXWebContentTrait], result))
      {
        uint64_t v3 = *(void *)(a1 + 48);
        id v4 = *(void **)(*(void *)(a1 + 40) + 336);
        uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        return [v4 setObject:v5 forKey:v3];
      }
    }
  }
  return result;
}

void sub_10004E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004E318(uint64_t a1)
{
  id v2 = (unsigned int *)(a1 + 48);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 344);
  id v4 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  uint64_t v5 = [v3 objectForKeyedSubscript:v4];
  uint64_t v6 = *(void *)(*((void *)v2 - 1) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if (!*(void *)(*(void *)(*((void *)v2 - 1) + 8) + 40))
  {
    uint64_t AppElementWithPid = _AXUIElementCreateAppElementWithPid();
    if (AppElementWithPid)
    {
      uint64_t v9 = (const void *)AppElementWithPid;
      int v10 = +[AXUIElement uiElementWithAXElement:AppElementWithPid];
      BOOL v11 = [[VOTElement alloc] initWithUIElement:v10 initializeAssociatedPids:0];
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
      int v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

      if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) isApplication] & 1) == 0)
      {
        uint64_t v14 = VOTLogCommon();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
          sub_10011DAAC(v2, (uint64_t)v10, v14);
        }
      }
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      long long v16 = *(void **)(*(void *)(a1 + 32) + 344);
      long long v17 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
      [v16 setObject:v15 forKeyedSubscript:v17];

      CFRelease(v9);
    }
  }
}

void sub_10004E64C(id a1, int64_t a2)
{
  if (!a2)
  {
    id v3 = +[AXSettings sharedInstance];
    [v3 setVoiceOverAlwaysTurnOnBluetooth:1];
  }
}

void sub_10004ECC4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_10004ECDC(uint64_t a1)
{
  uint64_t v2 = +[AXSettings sharedInstance];
  [v2 setVoiceOverUserDidReadUSBRestrictedModeAlert:1];

  id v3 = *(void **)(a1 + 32);

  return _[v3 _setUSBRMPreferenceDisabled];
}

uint64_t sub_10004F8E8(uint64_t result, _DWORD *a2, uint64_t a3)
{
  int v3 = -5;
  if (a2 && a3 == 4)
  {
    int v3 = 0;
    **(_DWORD **)(result + 40) = *a2;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v3;
  return result;
}

uint64_t sub_100050BA4(double a1, float a2)
{
  uint64_t result = TTSSpeechRateToNashvilleRate();
  if (a2 >= 0.5) {
    return TTSSpeechRateToNashvilleRate();
  }
  return result;
}

void sub_100050C2C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[AXSubsystemVoiceOverLifeCycle sharedInstance];
  unsigned __int8 v3 = [v2 ignoreLogging];

  if ((v3 & 1) == 0)
  {
    id v4 = +[AXSubsystemVoiceOverLifeCycle identifier];
    uint64_t v5 = AXLoggerForFacility();

    os_log_type_t v6 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = AXColorizeFormatLog();
      id v16 = v1;
      uint64_t v8 = _AXStringForArgs();
      if (os_log_type_enabled(v5, v6))
      {
        *(_DWORD *)buf = 138543362;
        NSUInteger v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}@", buf, 0xCu);
      }
    }
  }
  uint64_t v9 = +[AXSubsystemVoiceOverLifeCycle sharedInstance];
  unsigned __int8 v10 = [v9 ignoreLogging];

  if ((v10 & 1) == 0)
  {
    BOOL v11 = +[AXSubsystemVoiceOverLifeCycle identifier];
    uint64_t v12 = AXLoggerForFacility();

    os_log_type_t v13 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = AXColorizeFormatLog();
      long long v17 = [v1 callStackSymbols];
      uint64_t v15 = _AXStringForArgs();

      if (os_log_type_enabled(v12, v13))
      {
        *(_DWORD *)buf = 138543362;
        NSUInteger v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}@", buf, 0xCu);
      }
    }
  }
}

uint64_t sub_100050E5C()
{
  return 1;
}

BOOL sub_100050E64()
{
  if (byte_1001EB909 == 1) {
    return byte_1001EB908 != 0;
  }
  byte_1001EB909 = 1;
  BOOL result = *(double *)&xmmword_1001EBE30 > 640.0;
  byte_1001EB908 = *(double *)&xmmword_1001EBE30 > 640.0;
  return result;
}

id sub_100050EB4(void *a1)
{
  id v1 = a1;
  if ([v1 length] == (id)1)
  {
    uint64_t v2 = +[NSCharacterSet uppercaseLetterCharacterSet];
    id v3 = objc_msgSend(v2, "characterIsMember:", objc_msgSend(v1, "characterAtIndex:", 0));
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id sub_100050F30(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = +[AXSettings sharedInstance];
  BOOL v6 = [v5 voiceOverCapitalLetterFeedback] == 0;

  uint64_t v7 = +[TTSSpeechManager literalStringMarkup:v3 string:v4 speakCap:v6];

  return v7;
}

double sub_100050FCC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 coreAnimationMainDisplay];
  [v2 referenceBounds];
  *(void *)&xmmword_1001EBE30 = v3;
  *((void *)&xmmword_1001EBE30 + 1) = v4;

  uint64_t v5 = [v1 coreAnimationMainDisplay];

  [v5 scale];
  qword_1001EBE40 = v6;

  if (*((double *)&xmmword_1001EBE30 + 1) == 2272.0
    && *(double *)&xmmword_1001EBE30 == 1280.0
    && *(double *)&qword_1001EBE40 == 3.0)
  {
    qword_1001EBE40 = 0x4010000000000000;
  }
  __asm { FMOV            V3.2D, #0.5 }
  xmmword_1001EBE50 = (__int128)vmulq_f64((float64x2_t)xmmword_1001EBE30, _Q3);
  double result = *((double *)&xmmword_1001EBE30 + 1) / 3.0;
  qword_1001EBE60 = xmmword_1001EBE50;
  *(double *)algn_1001EBE68 = *((double *)&xmmword_1001EBE30 + 1) / 3.0;
  return result;
}

id sub_1000510DC(void *a1, void *a2, char a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  id v12 = a1;
  os_log_type_t v13 = +[NSCharacterSet whitespaceCharacterSet];
  id v14 = [v12 stringByTrimmingCharactersInSet:v13];

  if (![v14 length])
  {
    id v20 = 0;
    goto LABEL_53;
  }
  uint64_t v15 = [v14 lowercaseString];

  id v14 = v15;
  id v16 = [v14 rangeOfString:@"-"];
  uint64_t v17 = (uint64_t)v14;
  if (v16 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v17 = [v14 substringToIndex:v16];
  }
  id v18 = [(id)VOTSharedWorkspace systemSpokenLanguage];
  v54 = (void *)v17;
  if ((sub_100051640(v11, v14, v9) & 1) == 0)
  {
    char IsSpeakableEmojiString = AXLanguageIsSpeakableEmojiString();
    if (![v18 hasPrefix:v17] || (a3 & 1) != 0)
    {
      if (IsSpeakableEmojiString)
      {
        id v20 = 0;
        char v21 = 1;
      }
      else if ([v14 isEqualToString:@"emoji"])
      {
        NSRange v24 = +[AXLanguageManager sharedInstance];
        id v25 = [v24 dialectsThatCanSpeakString:v9];
        uint64_t v26 = [v25 firstObject];
        id v20 = [v26 specificLanguageID];

        char v21 = 0;
      }
      else
      {
        char v21 = 0;
        id v20 = 0;
      }
      goto LABEL_19;
    }
    if ((IsSpeakableEmojiString & 1) == 0)
    {
      uint64_t v27 = +[AXLanguageManager sharedInstance];
      int v28 = [v27 dialectsThatCanSpeakString:v9];
      uint64_t v29 = [v28 firstObject];
      id v20 = [v29 specificLanguageID];

      char v53 = 0;
      goto LABEL_26;
    }
LABEL_12:

    id v14 = 0;
    char v23 = 0;
    char v53 = 1;
    goto LABEL_27;
  }
  unsigned int v19 = [v18 hasPrefix:v17];
  id v20 = 0;
  char v21 = 1;
  if (v19 && (a3 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_19:
  char v53 = v21;
  if (([v14 isEqualToString:@"zh-hans"] & 1) != 0
    || [v14 isEqualToString:@"zh-hant"])
  {
    v30 = [v18 lowercaseString];
    unsigned int v31 = [v30 hasPrefix:@"zh"];

    if (v31)
    {
      id v32 = v18;

      id v20 = v32;
    }
  }
  if (!v20)
  {
    AXLanguageConvertToCanonicalForm();
    id v20 = (id)objc_claimAutoreleasedReturnValue();
LABEL_26:
    char v23 = 1;
    if (v20) {
      goto LABEL_35;
    }
LABEL_27:
    uint64_t v33 = AXCLanguageToLocales();
    v34 = [v33 allKeys];
    unsigned int v35 = [v34 containsObject:v14];

    if (v35)
    {
      id v20 = v14;
      if (v20) {
        goto LABEL_35;
      }
    }
    else
    {
      id v20 = 0;
    }
    if (v14)
    {
      v36 = [v14 stringByReplacingOccurrencesOfString:@"_" withString:@"-"];

      id v37 = [v36 rangeOfString:@"-"];
      if (v37 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v38 = [v36 substringToIndex:v37];

        v36 = (void *)v38;
      }
      AXLanguageConvertToCanonicalForm();
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      id v14 = v36;
    }
    goto LABEL_35;
  }
  char v23 = 1;
LABEL_35:
  if ((AXLanguageSupportedBySynthesizer() & 1) == 0)
  {
    uint64_t v39 = [v20 lowercaseString];
    id v40 = [v39 rangeOfString:@"-"];
    if (v40 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      unsigned __int8 v41 = 0;
    }
    else
    {
      id v42 = v40;
      id v43 = @"zh-hans";
      if (([v39 hasPrefix:@"zh-hans"] & 1) == 0)
      {
        id v43 = @"zh-hant";
        if (([v39 hasPrefix:@"zh-hant"] & 1) == 0)
        {
          id v43 = [v39 substringToIndex:v42];
        }
      }

      if (AXLanguageSupportedBySynthesizer())
      {
        unsigned __int8 v41 = v43;
        uint64_t v39 = v41;
      }
      else
      {
        unsigned __int8 v41 = 0;
        uint64_t v39 = v43;
      }
    }

    id v20 = v41;
  }
  char v44 = v23 ^ 1;
  if (v20) {
    char v44 = 1;
  }
  if (v44)
  {
    uint64_t v49 = v54;
  }
  else
  {
    id v20 = v18;
    v45 = [v10 objectForVariant:28];
    unsigned int v46 = [v45 BOOLValue];

    id v47 = [v10 string];
    BOOL v48 = sub_1000517A8(v47);

    uint64_t v49 = v54;
    if ((v53 & 1) == 0 && !v48 | v46)
    {
      v50 = sub_100051D04(off_1001EA9E8, @"unpronounceable", &stru_1001B7888, 0);
      uint64_t v51 = +[NSString stringWithFormat:@"%@, %@", v50, v9];

      [v10 setString:v51];
      id v9 = (id)v51;
    }
  }

LABEL_53:

  return v20;
}

uint64_t sub_100051640(void *a1, void *a2, void *a3)
{
  id v20 = a1;
  id v19 = a2;
  id v5 = a3;
  uint64_t v6 = (uint64_t)[v5 length];
  if (v6 < 1)
  {
    char v9 = 0;
    char v10 = 1;
  }
  else
  {
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    char v9 = 0;
    char v10 = 1;
    while (1)
    {
      id v11 = objc_msgSend(v5, "rangeOfComposedCharacterSequenceAtIndex:", v8, v19);
      uint64_t v13 = v12;
      id v14 = objc_msgSend(v5, "substringWithRange:", v11, v12);
      if (AXLanguageIsSpeakableEmojiString()) {
        break;
      }
      id v15 = [v5 characterAtIndex:v8];
      id v16 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
      unsigned __int8 v17 = [v16 characterIsMember:v15];

      if ((v17 & 1) == 0)
      {
        if ((v15 - 900) < 0x7C) {
          break;
        }
        if (sub_1000518D0((uint64_t)v15)) {
          break;
        }
        char v10 = 0;
        if (sub_10005180C(v20, v19, v14)) {
          break;
        }
        v9 |= v15 == 65532;
      }

      v8 += v13;
      if (v8 >= v7) {
        goto LABEL_13;
      }
    }

    char v9 = 1;
  }
LABEL_13:

  return (v9 | v10) & 1;
}

BOOL sub_1000517A8(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 length] == (id)1
    && (unsigned __int16)((unsigned __int16)((unsigned __int16)[v1 characterAtIndex:0] + 0x2000) >> 1) < 0xC7Fu;

  return v2;
}

id sub_100051804(void *a1, void *a2, void *a3)
{
  return sub_100051D04(a1, a2, a3, 0);
}

id sub_10005180C(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = [v5 speakableCharacters];
  if (v8)
  {
    id v9 = [v5 canSpeakString:v7];
  }
  else
  {
    char v10 = [(id)VOTSharedWorkspace votSettings];
    id v9 = [v10 stringIsSupported:v7 language:v6];
  }
  return v9;
}

BOOL sub_1000518C0(int a1)
{
  return (a1 - 900) < 0x7C;
}

BOOL sub_1000518D0(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)NSString);
  if (a1 >= 0x10000) {
    CFStringRef v3 = @"%@%08lx";
  }
  else {
    CFStringRef v3 = @"%@%04lx";
  }
  id v4 = objc_msgSend(v2, "initWithFormat:", v3, @"UnicodeHex.", a1);
  id v5 = sub_100051D04(@"VOTOutputPunctuation", v4, 0, 0);
  if (v5)
  {
    BOOL v6 = 1;
  }
  else
  {
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSString), "initWithFormat:", v3, @"UnicodeHex.Math.", a1);

    id v5 = sub_100051D04(@"VOTOutputPunctuation", v7, 0, 0);
    BOOL v6 = v5 != 0;
    id v4 = v7;
  }

  return v6;
}

uint64_t sub_1000519BC(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@","]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = (uint64_t)[v1 isEqualToString:@"·"];
  }

  return v2;
}

id sub_100051A14(char a1, void *a2, double a3)
{
  id v5 = a2;
  uint64_t v6 = vcvtmd_s64_f64(a3);
  if (v6 > 59 || (a1 & 1) != 0)
  {
    if (v6 > 3599)
    {
      unint64_t v13 = v6 / 0xE10uLL;
      int64_t v17 = v6 % 0xE10uLL;
      unint64_t v14 = v6 % 0x3CuLL;
      id v15 = off_1001EA9E8;
      if ((unint64_t)(v17 + 59) > 0x76)
      {
        uint64_t v18 = v17 / 60;
        if (v14)
        {
          id v7 = sub_100051D04(off_1001EA9E8, @"hours.minutes.seconds.format", 0, v5);
          unint64_t v22 = v14;
        }
        else
        {
          id v7 = sub_100051D04(off_1001EA9E8, @"hours.minutes.format", 0, v5);
        }
        unint64_t v21 = v18;
        goto LABEL_22;
      }
      if (v14)
      {
        id v16 = @"hours.seconds.format";
        goto LABEL_14;
      }
      id v19 = @"hours.format";
    }
    else
    {
      unint64_t v13 = v6 / 60;
      unint64_t v14 = v6 % 60;
      id v15 = off_1001EA9E8;
      if (v14)
      {
        id v16 = @"minutes.seconds.format";
LABEL_14:
        id v7 = sub_100051D04(v15, v16, 0, v5);
        unint64_t v21 = v14;
LABEL_22:
        +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v7, v13, v21, v22);
        goto LABEL_23;
      }
      id v19 = @"minutes.format";
    }
    id v7 = sub_100051D04(v15, v19, 0, v5);
    goto LABEL_22;
  }
  if (a3 - (double)(uint64_t)floor(a3) <= 0.0)
  {
    id v7 = sub_100051D04(off_1001EA9E8, @"seconds.format", 0, v5);
    +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v7, v6, v21, v22);
    uint64_t v12 = LABEL_23:;
    goto LABEL_24;
  }
  id v7 = AXFormatFloat();
  uint64_t v8 = +[NSLocale currentLocale];
  id v9 = [v8 objectForKey:NSLocaleDecimalSeparator];

  if (v9)
  {
    uint64_t v10 = [v7 stringByReplacingOccurrencesOfString:v9 withString:@"."];

    id v7 = (void *)v10;
  }
  id v11 = sub_100051D04(off_1001EA9E8, @"seconds.with.subseconds", 0, v5);
  uint64_t v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v11, v7);

LABEL_24:

  return v12;
}

id sub_100051D04(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v7;
  }
  id v11 = v10;
  id v12 = a4;
  id v13 = a1;
  unint64_t v14 = +[NSBundle mainBundle];
  id v15 = AXNSLocalizedStringForLocale();

  if (!v15 || [v15 isEqualToString:v11])
  {
    id v16 = v9;

    id v15 = v16;
  }

  return v15;
}

double sub_100051DFC(double a1)
{
  return a1 / *(double *)&xmmword_1001EBE30;
}

double sub_100051E14(double a1)
{
  return a1 * *(double *)&xmmword_1001EBE30;
}

double sub_100051E2C(double a1)
{
  double v1 = *(double *)&xmmword_1001EBE30;
  if (*(double *)&xmmword_1001EBE30 <= *((double *)&xmmword_1001EBE30 + 1)) {
    double v1 = *((double *)&xmmword_1001EBE30 + 1);
  }
  return v1 * a1;
}

void sub_100051E48(BOOL *a1, BOOL *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12)
{
  uint64_t v18 = a1;
  double v25 = 0.0 - a12;
  if (a3 == 2)
  {
    v32.origin.double x = a8;
    v32.origin.double y = a9;
    v32.size.CGFloat width = a10;
    v32.size.CGFloat height = a11;
    *a1 = a5 - CGRectGetMaxY(v32) >= v25;
    v33.origin.double x = a4;
    v33.origin.double y = a5;
    v33.size.CGFloat width = a6;
    v33.size.CGFloat height = a7;
    double v30 = a9 - CGRectGetMaxY(v33);
LABEL_7:
    uint64_t v18 = a2;
    goto LABEL_9;
  }
  if (a3 == 3)
  {
    v34.origin.double x = a8;
    v34.origin.double y = a9;
    v34.size.CGFloat width = a10;
    v34.size.CGFloat height = a11;
    *a1 = a4 - CGRectGetMaxX(v34) >= v25;
    v35.origin.double x = a4;
    v35.origin.double y = a5;
    v35.size.CGFloat width = a6;
    v35.size.CGFloat height = a7;
    double v30 = a8 - CGRectGetMaxX(v35);
    goto LABEL_7;
  }
  CGFloat v26 = a8;
  if (a3 == 4)
  {
    *a2 = a4 - CGRectGetMaxX(*(CGRect *)&v26) >= v25;
    v31.origin.double x = a4;
    v31.origin.double y = a5;
    v31.size.CGFloat width = a6;
    v31.size.CGFloat height = a7;
    double v30 = a8 - CGRectGetMaxX(v31);
  }
  else
  {
    *a2 = a5 - CGRectGetMaxY(*(CGRect *)&v26) >= v25;
    v36.origin.double x = a4;
    v36.origin.double y = a5;
    v36.size.CGFloat width = a6;
    v36.size.CGFloat height = a7;
    double v30 = a9 - CGRectGetMaxY(v36);
  }
LABEL_9:
  *uint64_t v18 = v30 >= v25;
}

double sub_100051FD4(uint64_t a1, double a2, double a3)
{
  double v3 = a3;
  if (a1 == 1) {
    return *(double *)&xmmword_1001EBE30 - a2;
  }
  if (a1 == 2) {
    return *((double *)&xmmword_1001EBE30 + 1) - a3;
  }
  if (a1 != 3) {
    return a2;
  }
  return v3;
}

double sub_10005203C(uint64_t a1)
{
  double result = *(double *)&xmmword_1001EBE30;
  if ((unint64_t)(a1 - 3) < 2) {
    return *((double *)&xmmword_1001EBE30 + 1);
  }
  return result;
}

uint64_t sub_10005205C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 rangeOfComposedCharacterSequenceAtIndex:a1];
  uint64_t v6 = objc_msgSend(v3, "substringWithRange:", v4, v5);
  if (![v6 isEqualToString:@"ツ"]) {
    goto LABEL_3;
  }
  uint64_t v7 = 1;
  id v8 = [v3 wordStringFromPosition:a1 inDirection:1];
  id v9 = +[VOTOutputManager outputManager];
  uint64_t v10 = [v9 speechComponent];
  id v11 = [v10 emoticonReplacements];
  id v12 = [v11 allValues];
  unsigned __int8 v13 = [v12 containsObject:v8];

  if ((v13 & 1) == 0) {
LABEL_3:
  }
    uint64_t v7 = 0;

  return v7;
}

id sub_10005215C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = objc_allocWithZone((Class)NSString);
  if (a1 >= 0x10000) {
    CFStringRef v11 = @"%@%08lx";
  }
  else {
    CFStringRef v11 = @"%@%04lx";
  }
  id v12 = objc_msgSend(v10, "initWithFormat:", v11, v7, a1);
  unsigned __int8 v13 = sub_100051D04(v8, v12, 0, v9);
  if ([v13 containsString:@"unicodehex"])
  {
    AXCFormattedString();
    id v14 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v14 = v13;
  }
  id v15 = v14;

  return v15;
}

id sub_100052260(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a4;
  id v10 = a3;
  id v11 = a2;
  id v12 = objc_allocWithZone((Class)NSString);
  if (a1 >= 0x10000) {
    CFStringRef v13 = @"%@%08lx.withCount";
  }
  else {
    CFStringRef v13 = @"%@%04lx.withCount";
  }
  id v14 = objc_msgSend(v12, "initWithFormat:", v13, v11, a1);

  id v15 = sub_100052334(v10, v14, 0, v9, a5);

  return v15;
}

id sub_100052334(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = v10;
  if (v10) {
    id v12 = v10;
  }
  else {
    id v12 = v9;
  }
  id v13 = v12;
  id v14 = a4;
  id v15 = a1;
  id v16 = +[NSBundle mainBundle];
  int64_t v17 = AXNSLocalizedStringForLocale();

  uint64_t v21 = a5;
  uint64_t v18 = AXCFormattedString();

  if (!v18 || objc_msgSend(v18, "isEqualToString:", v13, v21))
  {
    id v19 = v11;

    uint64_t v18 = v19;
  }

  return v18;
}

id sub_100052458(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  id v6 = 0;
  if (v3 && v4)
  {
    id v7 = [v3 rangeOfString:@"-"];
    if (v7 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v8 = [v3 substringToIndex:v7];

      id v3 = (id)v8;
    }
    id v9 = [v5 rangeOfString:@"-"];
    if (v9 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v10 = [v5 substringToIndex:v9];

      uint64_t v5 = (void *)v10;
    }
    id v6 = [v3 isEqualToString:v5];
  }

  return v6;
}

void sub_100052524()
{
  AXSystemRootDirectory();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  id v0 = [v2 stringByAppendingString:@"System/Library/PrivateFrameworks/ScreenReaderOutput.framework"];
  double v1 = +[NSBundle bundleWithPath:v0];
  [v1 load];
}

void sub_1000525A4()
{
  id v0 = +[NSBundle bundleWithPath:@"/System/Library/AccessibilityBundles/VoiceOverTouch.axbundle"];
  if (v0)
  {
    id v1 = v0;
    [v0 load];
    objc_msgSend(objc_msgSend(v1, "principalClass"), "initialize");
    id v0 = v1;
  }
}

uint64_t sub_100052604(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 6) {
    return 0;
  }
  return result;
}

BOOL sub_100052614()
{
  return (char *)[(id)VOTSharedWorkspace deviceOrientation] - 3 < (char *)2;
}

id sub_100052644(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)VOTSharedWorkspace;
  id v6 = a3;
  id v7 = a1;
  uint64_t v8 = +[AXSettings sharedInstance];
  id v9 = [v8 voiceOverPunctuationGroup];
  uint64_t v10 = [v5 punctuationGroupForUUID:v9];

  id v11 = +[VOTOutputManager outputManager];
  id v12 = [v11 speechComponent];

  id v13 = [v12 replacePunctuation:v7 punctuationGroup:v10 replaceCommas:a2 languageCode:v6];

  return v13;
}

uint64_t sub_10005273C(uint64_t a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 2 * (a1 == 2);
  }
}

id sub_100052754(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    id v12 = 0;
    goto LABEL_51;
  }
  if (!v6)
  {
    uint64_t v8 = +[VOTOutputRequest stringShouldSeparateDueToLanguage:v5 language:0 keyboardLanguageHint:v7];
    if ([v8 count])
    {
      id v9 = [v8 objectAtIndexedSubscript:0];
      uint64_t v10 = [v9 objectForKeyedSubscript:@"language"];

      id v11 = +[NSNull null];

      if (v10 == v11) {
        id v6 = 0;
      }
      else {
        id v6 = v10;
      }
    }
    else
    {
      id v6 = 0;
    }
  }
  id v13 = v6;
  id v14 = +[AXSettings sharedInstance];
  char v15 = [v14 voiceOverLanguageDetectionEnabled] ^ 1;
  id v16 = +[VOTOutputManager outputManager];
  int64_t v17 = [v16 currentLanguageMap];
  sub_1000510DC(v13, v5, v15, 0, v17);
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v18 = +[AXSettings sharedInstance];
  uint64_t v19 = AXSpeechSourceKeyVoiceOver;
  id v20 = [v18 speechVoiceIdentifierForLanguage:v6 sourceKey:AXSpeechSourceKeyVoiceOver exists:0];

  id v12 = [(id)VOTSharedWorkspace phoneticStringForCharacter:v5 andVoiceIdentifier:v20];
  if ([v6 hasPrefix:@"ko"])
  {
    unsigned int v21 = 1;
    if (v12) {
      goto LABEL_32;
    }
  }
  else
  {
    if (v6)
    {
      if (v12) {
        goto LABEL_48;
      }
      id v22 = v6;
      goto LABEL_36;
    }
    char v23 = [(id)VOTSharedWorkspace systemSpokenLanguage];
    if ([v23 hasPrefix:@"ko"]) {
      unsigned int v21 = 1;
    }
    else {
      unsigned int v21 = [v7 hasPrefix:@"ko"];
    }

    if (v12) {
      goto LABEL_32;
    }
  }
  if (v21)
  {
    if ([v5 length] != (id)1) {
      goto LABEL_33;
    }
    uint64_t v36 = v19;
    id v37 = v20;
    NSRange v24 = (__CFString *)[v5 mutableCopy];
    CFStringNormalize(v24, kCFStringNormalizationFormD);
    CFStringFold(v24, 0x181uLL, 0);
    id v12 = 0;
    if (([(__CFString *)v24 isEqualToString:v5] & 1) == 0)
    {
      if ([(__CFString *)v24 length])
      {
        unint64_t v25 = 0;
        CGFloat v26 = 0;
        do
        {
          uint64_t v27 = -[__CFString substringWithRange:](v24, "substringWithRange:", v25, 1);
          int v28 = sub_100052754(v27, v6, v7);
          if (!v28)
          {
            uint64_t v29 = TTSChoseong_JongseongToHangul();
            int v28 = sub_100052754(v29, v6, v7);
          }
          id v12 = __AXStringForVariables();

          ++v25;
          CGFloat v26 = v12;
        }
        while (v25 < (unint64_t)[(__CFString *)v24 length]);
      }
      else
      {
        id v12 = 0;
      }
    }

    uint64_t v19 = v36;
    id v20 = v37;
  }
LABEL_32:
  if (v12) {
    goto LABEL_48;
  }
LABEL_33:
  id v30 = v6;
  if (!v30)
  {
    id v30 = [(id)VOTSharedWorkspace selectedLanguage];
    if (!v30)
    {
      id v22 = [(id)VOTSharedWorkspace systemSpokenLanguage];
LABEL_36:
      id v30 = v22;
    }
  }
  if ([v5 length] != (id)1)
  {

    goto LABEL_45;
  }
  if (([v30 isEqualToString:@"zh-CN"] & 1) != 0
    || ([v30 isEqualToString:@"cmn-CN"] & 1) != 0)
  {
    CFStringRef v31 = @"zh-Hans";
LABEL_41:

    id v30 = (id)v31;
    goto LABEL_42;
  }
  if (([v30 isEqualToString:@"zh-TW"] & 1) != 0
    || ([v30 isEqualToString:@"cmn-TW"] & 1) != 0)
  {
    CFStringRef v31 = @"zh-Hant";
    goto LABEL_41;
  }
  if (([v30 isEqualToString:@"zh-HK"] & 1) != 0
    || [v30 isEqualToString:@"yue-HK"])
  {
    CFStringRef v31 = @"yue-Hant";
    goto LABEL_41;
  }
LABEL_42:
  CGRect v32 = +[AXLanguageManager sharedInstance];
  id v12 = [v32 descriptionOfWord:v5 forLanguage:v30];

  if (!v12)
  {
LABEL_45:
    if ([v6 hasPrefix:@"en"])
    {
      id v12 = 0;
    }
    else
    {
      CGRect v33 = +[AXSettings sharedInstance];
      uint64_t v34 = [v33 speechVoiceIdentifierForLanguage:@"en" sourceKey:v19 exists:0];

      id v12 = [(id)VOTSharedWorkspace phoneticStringForCharacter:v5 andVoiceIdentifier:v34];
      id v20 = (void *)v34;
    }
  }
LABEL_48:
  if ([v5 isEqualToString:v12])
  {

    id v12 = 0;
  }

LABEL_51:

  return v12;
}

uint64_t sub_100052C88(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"Kana"]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = (uint64_t)[v1 isEqualToString:@"Kana-Flick"];
  }

  return v2;
}

double sub_100052CE0(void *a1)
{
  int v1 = sub_100052C88(a1);
  double result = 2.25;
  if (v1) {
    return 0.25;
  }
  return result;
}

__CFString *sub_100052D08()
{
  if ([(id)VOTSharedWorkspace inUnitTestMode])
  {
    id v0 = @"AppleWeeFee";
  }
  else
  {
    id v1 = [objc_alloc((Class)CWFInterface) init];
    [v1 activate];
    uint64_t v2 = [v1 currentKnownNetworkProfile];
    id v0 = [v2 networkName];

    [v1 invalidate];
  }

  return v0;
}

__CFString *sub_100052DA4(int a1)
{
  if (a1 > 4999)
  {
    switch(a1)
    {
      case 5700:
        uint64_t v2 = @"Siri started speaking";
        break;
      case 5701:
        uint64_t v2 = @"Siri finished speaking";
        break;
      case 5702:
        uint64_t v2 = @"Siri started listening";
        break;
      case 5703:
        uint64_t v2 = @"Siri finished listening";
        break;
      default:
        if (a1 == 5000)
        {
          uint64_t v2 = @"App Was Activated";
        }
        else if (a1 == 5001)
        {
          uint64_t v2 = @"Focused Apps Did Change";
        }
        else
        {
LABEL_144:
          uint64_t v2 = +[NSString stringWithFormat:@"Unknown Notification (%ld)", a1];
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 1000:
        uint64_t v2 = @"Screen Changed";
        break;
      case 1001:
        uint64_t v2 = @"Layout Changed";
        break;
      case 1002:
        uint64_t v2 = @"Action Performed";
        break;
      case 1004:
        uint64_t v2 = @"Screen Locked";
        break;
      case 1005:
        uint64_t v2 = @"Value Changed";
        break;
      case 1006:
        uint64_t v2 = @"Alert";
        break;
      case 1007:
      case 1072:
        uint64_t v2 = @"Webpage Loaded";
        break;
      case 1008:
        uint64_t v2 = @"Announcement";
        break;
      case 1009:
        uint64_t v2 = @"Element Scrolled by Page";
        break;
      case 1010:
        uint64_t v2 = @"Auto Correction Mode";
        break;
      case 1011:
        uint64_t v2 = @"Orientation Changed";
        break;
      case 1012:
        uint64_t v2 = @"Keyboard Key Selected";
        break;
      case 1013:
        uint64_t v2 = @"Auto Correction Displayed";
        break;
      case 1014:
        uint64_t v2 = @"Keyboard Changed";
        break;
      case 1015:
        uint64_t v2 = @"SpringBoard Return";
        break;
      case 1016:
        uint64_t v2 = @"Element Moved";
        break;
      case 1017:
        uint64_t v2 = @"Selection Changed";
        break;
      case 1018:
        uint64_t v2 = @"First Responder Changed";
        break;
      case 1019:
        uint64_t v2 = @"Low Battery";
        break;
      case 1020:
        uint64_t v2 = @"Move to Element";
        break;
      case 1021:
        uint64_t v2 = @"PID Status Changed";
        break;
      case 1022:
        uint64_t v2 = @"Web Selection Changed";
        break;
      case 1023:
        uint64_t v2 = @"Invalid Text Input";
        break;
      case 1026:
        uint64_t v2 = @"Invalid Status Changed";
        break;
      case 1028:
        uint64_t v2 = @"HID Event Received";
        break;
      case 1044:
        uint64_t v2 = @"Update element Visuals";
        break;
      case 1050:
        uint64_t v2 = @"Unmute Eligible Event Occured";
        break;
      case 1052:
        uint64_t v2 = @"Text Replacement Occurred";
        break;
      case 1053:
        uint64_t v2 = @"Native Focus Item Changed With Context";
        break;
      case 1055:
        uint64_t v2 = @"Screen will change";
        break;
      case 1056:
        uint64_t v2 = @"Vision engine did produce result";
        break;
      case 1059:
        uint64_t v2 = @"Screen will wake";
        break;
      case 1061:
        uint64_t v2 = @"Web Form Control Interaction Start";
        break;
      case 1062:
        uint64_t v2 = @"Web Form Control Interaction End";
        break;
      case 1063:
        uint64_t v2 = @"cont. path began";
        break;
      case 1064:
        uint64_t v2 = @"Live Continuous Sonification Begin";
        break;
      case 1065:
        uint64_t v2 = @"Live Continuous Sonification Update";
        break;
      case 1066:
        uint64_t v2 = @"Live Continuous Sonification End";
        break;
      case 1068:
        uint64_t v2 = @"Captions were displayed onscreen";
        break;
      case 1070:
        uint64_t v2 = @"Context Menu Status";
        break;
      default:
        goto LABEL_144;
    }
  }
  return v2;
}

uint64_t sub_1000533F8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 0;
  if (v3 && v4)
  {
    id v7 = (char *)[v3 length];
    if ([v5 length] >= v7)
    {
      if (v7)
      {
        uint64_t v8 = 0;
        id v9 = v7 - 1;
        do
        {
          id v10 = [v3 indexAtPosition:v8];
          BOOL v11 = v10 == [v5 indexAtPosition:v8];
          uint64_t v6 = v11;
          if (!v11) {
            break;
          }
          BOOL v11 = v9 == v8++;
        }
        while (!v11);
      }
      else
      {
        uint64_t v6 = 1;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
  }

  return v6;
}

uint64_t sub_1000534C0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 0;
  if (v3 && v4)
  {
    id v7 = (char *)[v3 length];
    uint64_t v8 = (char *)[v5 length];
    if (v7 >= v8) {
      id v9 = v8;
    }
    else {
      id v9 = v7;
    }
    if (v9)
    {
      id v10 = 0;
      BOOL v11 = v9 - 1;
      do
      {
        id v12 = [v3 indexAtPosition:v10];
        BOOL v13 = v12 == [v5 indexAtPosition:v10];
        uint64_t v6 = v13;
        if (!v13) {
          break;
        }
        BOOL v13 = v11 == v10++;
      }
      while (!v13);
    }
    else
    {
      uint64_t v6 = 1;
    }
  }

  return v6;
}

BOOL sub_100053580(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = (uint64_t)[v5 count];
  if ((id)v7 != [v6 count])
  {
    BOOL v8 = 0;
    goto LABEL_22;
  }
  if (v7 < 1)
  {
    BOOL v8 = 1;
    goto LABEL_22;
  }
  BOOL v8 = 0;
  uint64_t v9 = 0;
  p_vtable = VOTTextMovementManager.vtable;
  id v23 = v6;
  while (1)
  {
    BOOL v11 = [v5 objectAtIndexedSubscript:v9];
    id v12 = [v11 name];

    if (a3)
    {
      BOOL v13 = [v5 objectAtIndexedSubscript:v9];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if (isKindOfClass) {
        goto LABEL_16;
      }
    }
    char v15 = [v6 objectAtIndexedSubscript:v9];
    id v16 = [v15 name];

    if (![v12 isAXAttributedString]
      || ![v16 isAXAttributedString])
    {
      if (([v12 isEqualToString:v16] & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_15;
    }
    int64_t v17 = p_vtable;
    uint64_t v18 = [v12 attributeValueForKey:UIAccessibilityCustomRotorActionIdentifierToken];
    uint64_t v19 = [v16 attributeValueForKey:UIAccessibilityCustomRotorActionIdentifierToken];
    id v20 = (void *)v19;
    BOOL v21 = !v18 || v19 == 0;
    if (!v21 && ![v18 isEqualToString:v19]) {
      break;
    }

    p_vtable = v17;
    id v6 = v23;
LABEL_15:

LABEL_16:
    BOOL v8 = ++v9 >= v7;
    if (v7 == v9) {
      goto LABEL_22;
    }
  }

  id v6 = v23;
LABEL_21:

LABEL_22:
  return v8;
}

id sub_10005376C(void *a1, char **a2)
{
  id v3 = a1;
  [v3 updateValue];
  id v4 = [v3 value];
  id v5 = (char *)[v3 selectedTextRange];
  uint64_t v7 = v6;

  if (v5 == (char *)0x7FFFFFFFFFFFFFFFLL || &v5[v7] > [v4 length]) {
    id v5 = (char *)[v4 length];
  }
  BOOL v8 = (char *)objc_msgSend(v4, "ax_wordFromPosition:inDirection:", v5 - 1, 1);
  uint64_t v10 = v9;
  if (&v8[v9] <= [v4 length])
  {
    if (a2)
    {
      *a2 = v8;
      a2[1] = (char *)v10;
    }
    BOOL v11 = objc_msgSend(v4, "substringWithRange:", v8, v10);
  }
  else
  {
    BOOL v11 = 0;
  }

  return v11;
}

id sub_10005386C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSBundle bundleForClass:objc_opt_class()];
  id v3 = [v2 localizedStringForKey:v1 value:&stru_1001B7888 table:off_1001EA9E8];

  return v3;
}

id sub_100053900(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (char *)[v1 count];
  id v3 = [v1 mutableCopy];
  if ((uint64_t)(v2 - 1) >= 0)
  {
    do
    {
      id v4 = [v3 objectAtIndexedSubscript:--v2];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        && [v4 isAccessibilityOpaqueElementProvider]
        && ([(id)VOTSharedWorkspace navigationStyleHonorsGroups] & 1) == 0)
      {
        id v5 = [v4 visibleOpaqueElements];
        if ([v5 count]) {
          objc_msgSend(v3, "replaceObjectsInRange:withObjectsFromArray:", v2, 1, v5);
        }
        else {
          [v3 removeObjectAtIndex:v2];
        }
      }
    }
    while ((uint64_t)v2 > 0);
  }
  [v3 sortUsingComparator:&stru_1001B47C8];
  uint64_t v6 = +[NSCharacterSet alphanumericCharacterSet];
  uint64_t v7 = [v6 invertedSet];

  +[NSCharacterSet whitespaceAndNewlineCharacterSet];
  id v12 = _NSConcreteStackBlock;
  uint64_t v13 = 3221225472;
  id v14 = sub_100053BB8;
  char v15 = &unk_1001B47F0;
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  id v17 = v7;
  id v8 = v7;
  id v9 = v16;
  uint64_t v10 = [v3 indexesOfObjectsPassingTest:&v12];
  objc_msgSend(v3, "removeObjectsAtIndexes:", v10, v12, v13, v14, v15);

  return v3;
}

int64_t sub_100053AF0(id a1, VOTElement *a2, VOTElement *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = +[NSNull null];

  if (v6 == v4
    || (+[NSNull null],
        uint64_t v7 = (VOTElement *)objc_claimAutoreleasedReturnValue(),
        v7,
        v7 == v5))
  {
    int64_t v10 = -1;
  }
  else
  {
    id v8 = [(VOTElement *)v4 label];
    id v9 = [(VOTElement *)v5 label];
    int64_t v10 = (int64_t)[v8 localizedCaseInsensitiveCompare:v9];
  }
  return v10;
}

BOOL sub_100053BB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSNull null];

  if (v4 == v3)
  {
    BOOL v6 = 1;
  }
  else
  {
    id v5 = v3;
    if (([v5 doesHaveTraits:kAXIgnoreItemChooserTrait] & 1) != 0
      || ([v5 doesHaveTraits:kAXSpacerTrait] & 1) != 0)
    {
      BOOL v6 = 1;
    }
    else
    {
      uint64_t v7 = [v5 label];
      id v8 = [v7 stringByTrimmingCharactersInSet:*(void *)(a1 + 32)];

      id v9 = [v5 value];
      int64_t v10 = [v9 stringByTrimmingCharactersInSet:*(void *)(a1 + 32)];

      BOOL v6 = 1;
      if ([v8 length] || objc_msgSend(v10, "length"))
      {
        [v8 rangeOfCharacterFromSet:*(void *)(a1 + 40)];
        if (v11 != [v8 length] || !objc_msgSend(v8, "length")) {
          BOOL v6 = 0;
        }
      }
    }
  }

  return v6;
}

id sub_100053D00(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    *a2 = &off_1001C6C50;
    id v7 = [objc_alloc((Class)AXAttributedString) initWithString:&stru_1001B7888];
    goto LABEL_24;
  }
  if ([v3 isAXAttributedString])
  {
    id v5 = v4;
    if (![v5 hasAttribute:UIAccessibilityTokenPlaceholder])
    {
      uint64_t v29 = v4;
      id v30 = a2;
      id v7 = [objc_alloc((Class)AXAttributedString) initWithString:&stru_1001B7888];
      id v12 = objc_opt_new();
      if ([v5 length])
      {
        unint64_t v13 = 0;
        id v14 = &OBJC_IVAR___VOTHandwritingManager__allowedCharacterModes;
        char v15 = &objc_release_x25_ptr;
        id v31 = v5;
        do
        {
          id v16 = v15[286];
          id v17 = [v5 attributesAtIndex:v13 effectiveRange:0];
          uint64_t v18 = objc_msgSend(v16, "uiElementWithAXElement:", objc_msgSend(v17, "objectForKey:", UIAccessibilityTokenAttachment));
          uint64_t v19 = [v14 + 378 elementWithUIElement:v18];

          if (v19)
          {
            id v20 = [v19 label];
            [v7 appendString:v20];
            if ([v20 length])
            {
              BOOL v21 = v15;
              id v22 = v7;
              id v23 = v14;
              unint64_t v24 = 0;
              do
              {
                unint64_t v25 = +[NSNumber numberWithUnsignedInteger:v13];
                [v12 addObject:v25];

                ++v24;
              }
              while (v24 < (unint64_t)[v20 length]);
              id v14 = v23;
              id v7 = v22;
              char v15 = v21;
              id v5 = v31;
            }
          }
          else
          {
            id v20 = objc_msgSend(v5, "substringWithRange:", v13, 1);
            [v7 appendString:v20];
            CGFloat v26 = +[NSNumber numberWithUnsignedInteger:v13];
            [v12 addObject:v26];
          }
          ++v13;
        }
        while (v13 < (unint64_t)[v5 length]);
      }
      uint64_t v27 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v5 length]);
      [v12 addObject:v27];

      if (v30) {
        void *v30 = v12;
      }

      id v4 = v29;
      goto LABEL_23;
    }
    *a2 = &off_1001C6C68;
    id v6 = v5;
  }
  else
  {
    id v8 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v4, "length"));
    if ([v4 length])
    {
      unint64_t v9 = 0;
      do
      {
        int64_t v10 = +[NSNumber numberWithUnsignedInteger:v9];
        [v8 addObject:v10];

        ++v9;
      }
      while (v9 < (unint64_t)[v4 length]);
    }
    id v11 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v4 length]);
    [v8 addObject:v11];

    id v5 = v8;
    *a2 = v5;
    id v6 = [objc_alloc((Class)AXAttributedString) initWithString:v4];
  }
  id v7 = v6;
LABEL_23:

LABEL_24:

  return v7;
}

unint64_t sub_100054094(unint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 count];
  if (v4)
  {
    unint64_t v5 = (unint64_t)v4;
    unint64_t v6 = 0;
    do
    {
      id v7 = [v3 objectAtIndexedSubscript:(v6 + v5) >> 1];
      id v8 = [v7 unsignedIntegerValue];

      if ((unint64_t)v8 < a1) {
        unint64_t v6 = ((v6 + v5) >> 1) + 1;
      }
      else {
        unint64_t v5 = (v6 + v5) >> 1;
      }
    }
    while (v6 < v5);
  }
  else
  {
    unint64_t v6 = 0;
  }

  return v6;
}

unint64_t sub_100054130(unint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = sub_100054094(a1, v5);
  sub_100054094(a1 + a2, v5);

  return v6;
}

id sub_100054190(unint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    if ((unint64_t)[v3 count] <= a1) {
      [v3 lastObject];
    }
    else {
    id v5 = [v3 objectAtIndex:a1];
    }
    id v4 = [v5 unsignedIntegerValue];
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_100054218(unint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_100054190(a1, v5);
  sub_100054190(a1 + a2, v5);

  return v6;
}

void sub_1000555AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (__CFString *)*(id *)(a1 + 32);
  if (v4) {
    id v5 = v4;
  }
  else {
    id v5 = &stru_1001B7888;
  }
  id v6 = VOTLogHandwriting();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v32 = 138543362;
    id v33 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "handwriting element: %{public}@", (uint8_t *)&v32, 0xCu);
  }

  [v3 updateGesturedTextInputAttributes];
  id v7 = [v3 gesturedTextInputAttributes];
  if ([v7 shouldPlayKeyboardSecureClickSound])
  {
    id v8 = +[VOTOutputManager outputManager];
    unint64_t v9 = +[VOSOutputEvent DidEnterSecureText];
    [v8 sendEvent:v9];
  }
  if ([v7 acceptsRawInput])
  {
    if ([v3 doesHaveAllTraits:kAXSecureTextFieldTrait | kAXWebContentTrait])
    {
      int64_t v10 = 0;
    }
    else
    {
      id v16 = [*(id *)(a1 + 40) currentInputString];
      int64_t v10 = [v16 commonPrefixWithString:v5 options:0];
    }
    id v12 = -[__CFString substringFromIndex:](v5, "substringFromIndex:", [v10 length]);
    id v17 = [v10 length];
    uint64_t v18 = [*(id *)(a1 + 40) currentInputString];
    id v19 = [v18 length];

    if (v17 == v19)
    {
      if ([v12 length]) {
        objc_msgSend(v3, "insertText:source:", v12, objc_msgSend(*(id *)(a1 + 40), "valueChangeOriginator"));
      }
    }
    else
    {
      BOOL v21 = *(void **)(a1 + 40);
      id v22 = [v10 length];
      id v23 = [*(id *)(a1 + 40) currentInputString];
      id v24 = [v21 _numberOfCharactersToDeleteToDesiredLength:v22 fromString:v23];

      objc_msgSend(v3, "replaceCharactersAtCursor:withString:source:", v24, v12, objc_msgSend(*(id *)(a1 + 40), "valueChangeOriginator"));
    }
    [*(id *)(a1 + 40) setCurrentInputString:v5];
LABEL_35:

    goto LABEL_36;
  }
  if ([v3 doesHaveTraits:kAXWebContentTrait])
  {
    id v11 = [*(id *)(a1 + 40) currentInputString];
    int64_t v10 = [v11 lowercaseString];

    id v12 = [(__CFString *)v5 lowercaseString];
    unint64_t v13 = 0;
    if ([v10 length])
    {
      do
      {
        if (v13 >= (unint64_t)[v12 length]) {
          break;
        }
        unsigned int v14 = [v10 characterAtIndex:v13];
        if (v14 != [v12 characterAtIndex:v13]) {
          break;
        }
        ++v13;
      }
      while (v13 < (unint64_t)[v10 length]);
    }
    if (v13 >= (unint64_t)[v12 length])
    {
      char v15 = &stru_1001B7888;
    }
    else
    {
      objc_msgSend(v12, "substringWithRange:", v13, 1);
      char v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    unint64_t v25 = [*(id *)(a1 + 40) localizedWebRotorMap];
    CGFloat v26 = [v25 objectForKey:v15];

    if (v26)
    {
      objc_msgSend(*(id *)(a1 + 40), "setRotorType:", objc_msgSend(v26, "integerValue"));
      uint64_t v27 = +[VOTRotor stringForRotorType:](VOTRotor, "stringForRotorType:", [*(id *)(a1 + 40) rotorType]);
      +[VOTOutputRequest sendRequestWithString:v27];

      [*(id *)(a1 + 40) clearCurrentString];
    }
    else if ([(__CFString *)v15 length])
    {
      id v31 = sub_100051804(off_1001EA9E8, @"handwrite.notrecognized", 0);
      +[VOTOutputRequest sendRequestWithString:v31];

      [*(id *)(a1 + 40) setCurrentInputString:v5];
    }

    goto LABEL_35;
  }
  if ([v3 doesHaveTraits:kAXTableIndexTrait])
  {
    uint64_t v20 = [(__CFString *)v5 lowercaseString];

    [v3 jumpToTableIndex:v20];
    [*(id *)(a1 + 40) clearCurrentString];
    id v5 = (__CFString *)v20;
  }
  else
  {
    int v28 = [*(id *)(a1 + 40) nameSearcherMonitorElement];
    unsigned __int8 v29 = [v3 isEqual:v28];

    if ((v29 & 1) == 0)
    {
      [*(id *)(a1 + 40) setNameSearcherMonitorElement:v3];
      [*(id *)(a1 + 40) setNameSearcher:0];
    }
    [*(id *)(a1 + 40) _prepareNameSearcherForElement:v3];
    [*(id *)(a1 + 40) setPendingInputString:v5];
    id v30 = [*(id *)(a1 + 40) nameSearcher];
    [v30 updateMatchingItems];

    [*(id *)(a1 + 40) setCurrentInputString:v5];
  }
LABEL_36:
}

void sub_100055BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100055BCC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100055BDC(uint64_t a1)
{
}

uint64_t sub_100055BE4(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [a2 gesturedTextInputAttributes];

  return _objc_release_x1();
}

void sub_100055DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100055E0C(uint64_t a1, void *a2)
{
  id v19 = a2;
  [v19 updateGesturedTextInputAttributes];
  id v3 = [v19 gesturedTextInputAttributes];
  if ([*(id *)(a1 + 32) isNextBrailleTableEvent:*(void *)(a1 + 40)])
  {
    unsigned __int8 v4 = [*(id *)(a1 + 32) performNextBrailleTableCommand];
    uint64_t v5 = a1 + 48;
LABEL_3:
    *(unsigned char *)(*(void *)(*(void *)v5 + 8) + 24) = v4;
    goto LABEL_4;
  }
  if ([v3 acceptsRawInput])
  {
    uint64_t v5 = a1 + 48;
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      unsigned __int8 v4 = [*(id *)(a1 + 32) _processRawInputEvent:*(void *)(a1 + 40) forElement:v19 withAttributes:v3];
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v14 = [v19 doesHaveTraits:kAXWebContentTrait];
    unsigned int v15 = [*(id *)(a1 + 32) gesturesControlRotor];
    if (v14)
    {
      if (v15) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) _processRotorEvent:*(void *)(a1 + 40)];
      }
      uint64_t v5 = a1 + 48;
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
      {
        unsigned __int8 v4 = [*(id *)(a1 + 32) _processWebRotorEvent:*(void *)(a1 + 40)];
        goto LABEL_3;
      }
    }
    else
    {
      if (v15) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) _processRotorEvent:*(void *)(a1 + 40)];
      }
      uint64_t v5 = a1 + 48;
      if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
      {
        [*(id *)(a1 + 32) _prepareNameSearcherForElement:v19];
        unsigned __int8 v4 = [*(id *)(a1 + 32) _processSearchEvent:*(void *)(a1 + 40) forElement:v19];
        goto LABEL_3;
      }
    }
  }
LABEL_4:
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    goto LABEL_24;
  }
  id v6 = [*(id *)(a1 + 40) command];
  if ([v6 isEqualToString:kVOTEventCommandToggleMute]) {
    goto LABEL_22;
  }
  id v7 = [*(id *)(a1 + 40) command];
  if ([v7 isEqualToString:kVOTEventCommandToggleScreenCurtain])
  {
LABEL_21:

LABEL_22:
LABEL_23:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    goto LABEL_24;
  }
  id v8 = [*(id *)(a1 + 40) command];
  if ([v8 isEqualToString:kVOTEventCommandCopySpeechToClipboard])
  {
LABEL_20:

    goto LABEL_21;
  }
  unint64_t v9 = [*(id *)(a1 + 40) command];
  if ([v9 isEqualToString:kVOTEventCommandStartHelp])
  {
LABEL_19:

    goto LABEL_20;
  }
  int64_t v10 = [*(id *)(a1 + 40) command];
  if ([v10 isEqualToString:kVOTEventCommandItemChooser])
  {
LABEL_18:

    goto LABEL_19;
  }
  id v11 = [*(id *)(a1 + 40) command];
  if ([v11 isEqualToString:kVOTEventCommandFirstElement])
  {
LABEL_17:

    goto LABEL_18;
  }
  id v12 = [*(id *)(a1 + 40) command];
  if ([v12 isEqualToString:kVOTEventCommandLastElement])
  {
LABEL_16:

    goto LABEL_17;
  }
  unint64_t v13 = [*(id *)(a1 + 40) command];
  if ([v13 isEqualToString:kVOTEventCommandCenterElement])
  {
LABEL_15:

    goto LABEL_16;
  }
  uint64_t v18 = [*(id *)(a1 + 40) command];
  if ([v18 isEqualToString:kVOTEventCommandIdle])
  {

    goto LABEL_15;
  }
  id v16 = [*(id *)(a1 + 40) command];
  unsigned __int8 v17 = [v16 isEqualToString:kVOTEventCommandTracking];

  if (v17) {
    goto LABEL_23;
  }
LABEL_24:
}

void sub_10005753C(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) messageForSelectingItem:*(void *)(a1 + 40)];
  uint64_t v2 = [(id)VOTSharedWorkspace selectedLanguage];
  id v3 = sub_10000ABF8(v4, 1, v2);

  [*(id *)(a1 + 48) setNameSearcher:0];
  [*(id *)(a1 + 48) didSelectItem];
}

uint64_t sub_100057EAC()
{
  return NSRequestConcreteImplementation();
}

void sub_100058074(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) repeaterTimer];
  [v2 cancel];

  *(void *)(*(void *)(a1 + 32) + 16) = 0;
  *(void *)(*(void *)(a1 + 32) + 8) = 4;
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
}

void sub_10005A2D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

id sub_10005A320(uint64_t a1, void *a2)
{
  return _[a2 _updateJindoNotificationHandler];
}

id sub_10005A328(uint64_t a1, void *a2)
{
  if (a2) {
    return [a2 performSelector:"_updateForContinuityStateChange" withObject:0 afterDelay:0.0];
  }
  return result;
}

void sub_10005A348(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateContinuousPathTimeout];
}

void sub_10005A388(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateRotorForCurrentElement:1 completion:0];
}

void sub_10005A3D0(uint64_t a1)
{
  id v5 = +[AXSettings sharedInstance];
  uint64_t v2 = [v5 voiceOverDirectTouchEnabledApps];
  id v3 = [v2 mutableCopy];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setDirectTouchApps:v3];
}

id sub_10005A45C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1632) performSelector:"_updateAutomationAccessibilityApps" onTarget:*(void *)(a1 + 32) cancelMask:0 count:0 objects:0];
}

void sub_10005A47C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateFlashlightEnabledStatus];
}

void sub_10005A4BC(uint64_t a1, uint64_t a2)
{
  if (a2 == 3)
  {
    id v3 = VOTLogLayoutChange();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      sub_10011E044();
    }

    double Current = CFAbsoluteTimeGetCurrent();
    id v5 = (id *)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained(v5);
    [WeakRetained lastHomeButtonPressTime];
    double v8 = Current - v7;

    if (v8 >= 1.0)
    {
      unint64_t v9 = objc_loadWeakRetained(v5);
      [v9 handleNotification:1000 withData:0 forElement:0];
    }
    else
    {
      unint64_t v9 = VOTLogLayoutChange();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        sub_10011E010();
      }
    }
  }
}

void sub_10005A58C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained setSpringBoardActionHandlerIdentifier:v3];
}

void sub_10005F5D0(id a1)
{
  +[NSSet setWithObjects:](NSSet, "setWithObjects:", kVOTEventCommandHomeButtonPress, kVOTEventCommandSystemShowNotificationCenter, kVOTEventCommandSystemShowControlCenter, kVOTEventCommandSystemActivateSpeakScreen, kVOTEventCommandSystemToggleDock, kVOTEventCommandSystemToggleAppSwitcher, kVOTEventCommandSystemActivateLockButton, kVOTEventCommandSystemShowSpotlight, kVOTEventCommandSystemActivateAccessibilityShortcut, kVOTEventCommandSystemToggleReachability, kVOTEventCommandSystemTakeScreenshot, kVOTEventCommandSystemSwitchToPreviousApp, kVOTEventCommandSystemSwitchToNextApp, kVOTEventCommandEdgeRight, kVOTEventCommandEdgeLeft, kVOTEventCommandEdgeTop, kVOTEventCommandEdgeBottom,
    kVOTEventCommandBottomEdgePanDown,
    kVOTEventCommandBottomEdgePanShort,
    kVOTEventCommandBottomEdgePanLong,
    kVOTEventCommandTopEdgePanShort,
    kVOTEventCommandTopEdgePanLong,
    kVOTEventCommandSystemToggleTypeToSiri,
  qword_1001EB918 = 0);

  _objc_release_x1();
}

void sub_10005F99C(id a1)
{
  v3[0] = kVOTEventCommandSimpleTap;
  v3[1] = kVOTEventCommandBottomEdgePanShort;
  v3[2] = kVOTEventCommandBottomEdgePanLong;
  v3[3] = kVOTEventCommandTopEdgePanShort;
  void v3[4] = kVOTEventCommandTopEdgePanLong;
  v3[5] = kVOTEventCommandSearchRotorRight;
  v3[6] = kVOTEventCommandSearchRotorLeft;
  v3[7] = kVOTEventCommandSearchRotorUp;
  v3[8] = kVOTEventCommandSearchRotorDown;
  v3[9] = kVOTEventCommandNextElement;
  v3[10] = kVOTEventCommandPreviousElement;
  v3[11] = kVOTEventCommandTracking;
  v3[12] = kVOTEventCommandEscape;
  v3[13] = kVOTEventCommandToggleSpeaking;
  v3[14] = kVOTEventCommandSimulatedLongPress;
  v3[15] = kVOTEventCommandStartStopToggle;
  uint8_t v3[16] = kVOTEventCommandScrollUpPage;
  v3[17] = kVOTEventCommandScrollDownPage;
  v3[18] = kVOTEventCommandScrollLeftPage;
  v3[19] = kVOTEventCommandScrollRightPage;
  v3[20] = kVOTEventCommandToggleScreenCurtain;
  v3[21] = kVOTEventCommandToggleMute;
  v3[22] = @"RotorWords";
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:23];
  uint64_t v2 = (void *)qword_1001EB928;
  qword_1001EB928 = v1;
}

void sub_100060290(id a1)
{
  qword_1001EB938 = (uint64_t)dispatch_queue_create("UserEventOccurred", 0);

  _objc_release_x1();
}

void sub_1000602D0(id a1)
{
  id v1 = +[VOTUserEventManager sharedInstance];
  [v1 userEventOccurred];
}

id sub_100060A18(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _monitorElements];
}

void sub_100061240(id a1)
{
  v3[0] = kVOTEventCommandNextElement;
  v3[1] = kVOTEventCommandPreviousElement;
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:2];
  uint64_t v2 = (void *)qword_1001EB948;
  qword_1001EB948 = v1;
}

id sub_1000612CC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) isValidForApplication:a2];
}

void sub_100061BD4(id a1)
{
  id v1 = objc_alloc((Class)NSSet);
  v5[0] = kAXScreenChangePopup;
  v5[1] = kAXForceUpdateChangeToken;
  v5[2] = kAXPerformElementUpdateImmediatelyToken;
  v5[3] = kAXAnnouncementTypeStopSpeech;
  uint64_t v2 = +[NSArray arrayWithObjects:v5 count:4];
  id v3 = [v1 initWithArray:v2];
  id v4 = (void *)qword_1001EB958;
  qword_1001EB958 = (uint64_t)v3;
}

uint64_t sub_1000627B4(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 336) = [objc_allocWithZone((Class)SCRCTargetSelectorTimer) initWithTarget:*(void *)(a1 + 32) selector:"_handleInvalidStatusChanged:" thread:*(void *)(*(void *)(a1 + 32) + 1632)];

  return _objc_release_x1();
}

BOOL sub_100062D20(id a1, VOTElement *a2)
{
  uint64_t v2 = a2;
  if ([(VOTElement *)v2 isSystemApp]
    && [(VOTElement *)v2 isSiriTalkingOrListening])
  {
    unsigned __int8 v3 = 1;
  }
  else
  {
    unsigned __int8 v3 = [(VOTElement *)v2 isDictationListening];
  }

  return v3;
}

uint64_t sub_100065818(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 readingContentCausesPageTurn] & 1) != 0
    || ([v3 isReadingContent] & 1) != 0
    || ([v3 includeDuringContentReading] & 1) != 0
    || [v3 doesHaveTraits:kAXWebContentTrait])
  {
    id v4 = [v3 pageContent];
    uint64_t v5 = [v4 isEqualToString:*(void *)(a1 + 32)] ^ 1;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

id sub_1000658B4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1632) performSelector:"updateFrame" onTarget:*(void *)(a1 + 40) count:0 objects:0];
}

$85E40A55691FE2F31975A98F57E3065D sub_100065C18(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = a2;
  if ([(VOTElement *)v3 readingContentCausesPageTurn]
    || [(VOTElement *)v3 isReadingContent])
  {
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = [(VOTElement *)v3 includeDuringContentReading];
  }

  BOOL v5 = v4;
  int64_t v6 = 0;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

void sub_100066078(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

void sub_100067558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t sub_100067578(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100067588(uint64_t a1)
{
}

uint64_t sub_100067590(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ((([v4 isReadingContent] & 1) != 0
     || [v4 includeDuringContentReading])
    && ([v4 isEqual:*(void *)(a1 + 32)] & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }

  return 0;
}

id sub_100067608(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1632) performSelector:"updateFrame" onTarget:*(void *)(a1 + 40) count:0 objects:0];
}

$85E40A55691FE2F31975A98F57E3065D sub_100067624(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = a2;
  if ([(VOTElement *)v3 readingContentCausesPageTurn]
    || [(VOTElement *)v3 isReadingContent])
  {
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = [(VOTElement *)v3 includeDuringContentReading];
  }

  BOOL v5 = v4;
  int64_t v6 = 0;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

id sub_10006767C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

void sub_100068300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000683F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100068484(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 2120));
  [WeakRetained directInteractionElementsUpdated:0];
}

void sub_100068E24(uint64_t a1)
{
  uint64_t v2 = +[VOTItemChooserAdapter sharedInstance];
  [v2 showItemChooser:1 withItems:*(void *)(a1 + 32)];

  *(unsigned char *)(*(void *)(a1 + 40) + 1742) = 1;
}

void sub_100068E7C(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
  if ([*(id *)(a1 + 32) count])
  {
    unint64_t v4 = 0;
    do
    {
      BOOL v5 = [*(id *)(a1 + 32) objectAtIndex:v4];
      if ((unint64_t)[v8 count] > v4)
      {
        int64_t v6 = [v8 objectAtIndex:v4];
        CGRect v10 = CGRectFromString(v6);
        double v7 = objc_msgSend(v5, "regionDescriptionWithFrame:", v10.origin.x, v10.origin.y, v10.size.width, v10.size.height);
        [v3 addObject:v7];
      }
      ++v4;
    }
    while ((unint64_t)[*(id *)(a1 + 32) count] > v4);
  }
  [*(id *)(a1 + 40) setObject:v3 forKey:@"regionDescriptions"];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

$85E40A55691FE2F31975A98F57E3065D sub_100069368(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = [(VOTElement *)a2 identifier];
  unsigned int v4 = [v3 isEqualToString:@"SFFindOnPageBarIdentifier"];

  uint64_t v5 = v4;
  int64_t v6 = 0;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

id sub_100069700(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
  if (*(unsigned char *)(a1 + 48))
  {
    id v3 = *(void **)(a1 + 40);
    return [v3 performSimpleTap];
  }
  return result;
}

void sub_100069FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_100069FD8(uint64_t a1, float a2)
{
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10006ABBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10006ACBC(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = @"element.on.text";
  }
  else {
    uint64_t v2 = @"element.off.text";
  }
  return sub_100051D04(off_1001EA9E8, v2, 0, *(void **)(a1 + 32));
}

id sub_10006ACF0(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_10006AD34(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_10006B534(uint64_t a1)
{
  if (atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1 + 32) + 1616), 0) == *(_DWORD *)(a1 + 56))
  {
    uint64_t v2 = +[AXSettings sharedInstance];
    unsigned __int8 v3 = [v2 voiceOverRotorSummaryFeedback];

    id v4 = +[AXSettings sharedInstance];
    unsigned __int8 v5 = [v4 voiceOverRotorSummaryFeedback];

    if (v5 & 2 | (unint64_t)(v3 & 0x10))
    {
      if ((v5 & 2) != 0) {
        char v6 = 2;
      }
      else {
        char v6 = 10;
      }
      if ((v3 & 0x10) != 0) {
        char v7 = v6;
      }
      else {
        char v7 = 6;
      }
      id v8 = sub_10000ABF8(*(void **)(a1 + 40), v7, *(void **)(a1 + 48));
    }
  }
}

void sub_10006BBE4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  [v4 frame];
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  double v10 = v9;
  double v12 = v11;
  [v3 frame];
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  v32.origin.double x = v6;
  v32.origin.double y = v8;
  v32.size.CGFloat width = v10;
  v32.size.CGFloat height = v12;
  v33.origin.double x = v14;
  v33.origin.double y = v16;
  v33.size.CGFloat width = v18;
  v33.size.CGFloat height = v20;
  if (!CGRectEqualToRect(v32, v33))
  {
    BOOL v21 = +[VOTElement systemAppApplication];
    id v22 = (char *)[v21 applicationOrientation];

    if ((unint64_t)(v22 - 3) >= 2)
    {
      if (v10 > *(double *)&xmmword_1001EBE30 + -50.0) {
        goto LABEL_13;
      }
    }
    else if (v12 > *((double *)&xmmword_1001EBE30 + 1) + -50.0)
    {
      goto LABEL_13;
    }
    __int16 v31 = 0;
    uint64_t v23 = kAXLaunchIconTrait;
    unsigned __int8 v24 = [v4 doesHaveTraits:kAXLaunchIconTrait];
    double v25 = 10.0;
    if ((v24 & 1) == 0)
    {
      unsigned int v26 = objc_msgSend(v3, "doesHaveTraits:", v23, 10.0);
      double v25 = 0.0;
      if (v26) {
        double v25 = 10.0;
      }
    }
    sub_100051E48((BOOL *)&v31, (BOOL *)&v31 + 1, (uint64_t)v22, v14, v16, v18, v20, v6, v8, v10, v12, v25);
    if (HIBYTE(v31))
    {
      uint64_t v27 = +[VOTOutputManager outputManager];
      int v28 = +[VOSOutputEvent DidWrapForwards];
      [v27 sendEvent:v28];
    }
    if ((_BYTE)v31)
    {
      unsigned __int8 v29 = +[VOTOutputManager outputManager];
      id v30 = +[VOSOutputEvent DidWrapBackwards];
      [v29 sendEvent:v30];
    }
  }
LABEL_13:
}

void sub_10006D478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_10006D494(uint64_t a1)
{
  uint64_t v2 = kAXWebContentTrait;
  if (![*(id *)(a1 + 32) doesHaveTraits:kAXWebContentTrait]) {
    return 0;
  }
  if ([*(id *)(a1 + 40) doesHaveTraits:v2]) {
    return 0;
  }
  uint64_t v3 = [*(id *)(a1 + 32) immediateRemoteParent];
  if (!v3) {
    return 0;
  }
  id v4 = (void *)v3;
  uint64_t v5 = kAXCausesPageTurnTrait;
  while (![v4 doesHaveTraits:v5])
  {
    uint64_t v6 = [v4 directParent];

    id v4 = (void *)v6;
    if (!v6) {
      return 0;
    }
  }
  id v8 = [v4 scrollNextPage];

  return v8;
}

id sub_10006D550(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

$85E40A55691FE2F31975A98F57E3065D sub_10006D5B8(id a1, VOTElement *a2, VOTElement *a3)
{
  uint64_t v3 = a2;
  id v4 = +[VOTTextSearchManager sharedManager];
  uint64_t v5 = [v4 currentSearchValue];

  if ([v5 length])
  {
    uint64_t v6 = [(VOTElement *)v3 label];
    if ([v6 length]
      && (uint64_t v7 = 1, [v6 rangeOfString:v5 options:1] != (id)0x7FFFFFFFFFFFFFFFLL))
    {
      uint64_t v9 = 2;
    }
    else
    {
      id v8 = [(VOTElement *)v3 value];
      if ([v8 length]
        && (uint64_t v7 = 1, [v8 rangeOfString:v5 options:1] != (id)0x7FFFFFFFFFFFFFFFLL))
      {
        uint64_t v9 = 2;
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }

  BOOL v10 = v7;
  int64_t v11 = v9;
  result.var1 = v11;
  result.var0 = v10;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006D70C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = 0;
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

BOOL sub_10006D7B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (![(id)VOTSharedWorkspace navigationStyleHonorsGroups]) {
    goto LABEL_36;
  }
  uint64_t v7 = [v6 groupedParent];
  if (v7)
  {
    id v8 = (void *)v7;
    uint64_t v9 = [v6 groupedParent];
    BOOL v10 = [v5 groupedParent];
    unsigned int v11 = [v9 isEqual:v10];

    if (!v11)
    {
      BOOL v12 = 0;
      goto LABEL_29;
    }
  }
  if (([v5 isAccessibleGroup] & 1) == 0)
  {
LABEL_36:
    if ([v5 doesHaveTraits:kAXStaticTextTrait]
      && [v5 doesHaveTraits:kAXWebContentTrait])
    {
      double v13 = [v5 nextElement];
      uint64_t v14 = kAXRadioButtonTrait | kAXToggleTrait;
      if (([v13 doesHaveTraits:kAXRadioButtonTrait | kAXToggleTrait] & 1) == 0)
      {
        double v15 = [v13 titleElements];
        if (([v15 containsObject:v5] & 1) != 0
          || [*(id *)(a1 + 32) shouldElement:v13 beCombined:v5 combineLinks:0]
          && ![v15 count])
        {
          goto LABEL_18;
        }
      }
      double v15 = [v5 previousElement];
      if ([v15 doesHaveTraits:v14]
        && [*(id *)(a1 + 32) shouldElement:v15 beCombined:v5 combineLinks:0])
      {
        CGFloat v16 = [v15 titleElements];
        if (![v16 count])
        {

          goto LABEL_18;
        }
        double v17 = [v15 titleElements];
        unsigned __int8 v18 = [v17 containsObject:v5];

        if (v18) {
          goto LABEL_18;
        }
      }
      double v19 = [v5 application];
      unsigned int v20 = [v19 elementActsAsTitleElement:v5];

      if (v20)
      {
LABEL_18:

LABEL_19:
        BOOL v12 = 0;
        goto LABEL_29;
      }
    }
    if ([v5 doesHaveTraits:kAXImageTrait]
      && ([v5 doesHaveTraits:kAXLinkTrait] & 1) == 0
      && ([v5 doesHaveTraits:kAXHeaderTrait] & 1) == 0)
    {
      id v21 = [(id)VOTSharedWorkspace navigateImagesOption];
      if (v21 == (id)3) {
        goto LABEL_19;
      }
      if (v21 == (id)2)
      {
        id v22 = [v5 originalLabel];
        id v23 = [v22 length];

        if (!v23)
        {
          double v25 = VOTLogCommon();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)unsigned int v26 = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Skipping image with no label", v26, 2u);
          }

          goto LABEL_19;
        }
      }
    }
    BOOL v12 = v5 != 0;
    goto LABEL_29;
  }
  BOOL v12 = 1;
LABEL_29:

  return v12;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006DB0C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = [(VOTElement *)a2 doesHaveTraits:kAXImageTrait];
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006DB6C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = [(VOTElement *)a2 doesHaveAllTraits:kAXLinkTrait | kAXVisitedTrait];
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006DBDC(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = a2;
  if ([(VOTElement *)v3 doesHaveTraits:kAXHeaderTrait]) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = [(VOTElement *)v3 servesAsHeadingLandmark];
  }

  BOOL v5 = v4;
  int64_t v6 = 0;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

void sub_10006DCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10006DD08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 doesHaveTraits:kAXHeaderTrait])
  {
    uint64_t v4 = [v3 value];
    unsigned int v5 = [v4 intValue];

    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    unint64_t v7 = v6 - 47;
    uint64_t v8 = v6 - 17;
    if (v7 < 5)
    {
      int v9 = v7 + 2;
    }
    else
    {
      uint64_t v8 = 29;
      int v9 = 1;
    }
    **(void **)(a1 + 40) = v8;
    BOOL v10 = v5 == v9;
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006DDE0(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = a2;
  if ([(VOTElement *)v3 doesHaveTraits:kAXVisitedTrait]) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = [(VOTElement *)v3 doesHaveTraits:kAXLinkTrait];
  }

  BOOL v5 = v4;
  int64_t v6 = 0;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006DE74(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = [(VOTElement *)a2 doesHaveTraits:kAXLinkTrait];
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

uint64_t sub_10006DF7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 doesHaveTraits:kAXStaticTextTrait])
  {
    int64_t v4 = [v3 label];
    [v4 rangeOfCharacterFromSet:*(void *)(a1 + 32)];
    if (v5 == [v4 length])
    {
    }
    else
    {
      unsigned int v6 = [v3 doesHaveTraits:kAXHeaderTrait | kAXLinkTrait];

      if (!v6)
      {
        uint64_t v7 = 1;
        goto LABEL_6;
      }
    }
  }
  uint64_t v7 = 0;
LABEL_6:

  return v7;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006E074(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = [(VOTElement *)a2 traits];
  BOOL v4 = ((kAXButtonTrait | kAXTextEntryTrait | kAXPickerElementTrait | kAXPopupButtonTrait | kAXRadioButtonTrait | kAXTabButtonTrait | kAXSecureTextFieldTrait) & v3) != 0;
  int64_t v5 = 0;
  result.var1 = v5;
  result.var0 = v4;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006E138(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  BOOL v4 = [(VOTElement *)v3 containerTypes];
  if ([v4 containsObject:&off_1001C5308])
  {
    uint64_t v5 = 1;
    if (![(VOTElement *)v3 isElementFirstElement:1 orLastElement:0 withType:4])uint64_t v5 = [(VOTElement *)v3 isElementFirstElement:1 orLastElement:0 withType:0x2000]; {
  }
    }
  else
  {
    unsigned int v6 = [(VOTElement *)v3 containerTypes];
    if ([v6 containsObject:&off_1001C5320])
    {
      uint64_t v5 = 1;
      if (![(VOTElement *)v3 isElementFirstElement:1 orLastElement:0 withType:4])uint64_t v5 = [(VOTElement *)v3 isElementFirstElement:1 orLastElement:0 withType:0x2000]; {
    }
      }
    else
    {
      uint64_t v5 = 0;
    }
  }
  BOOL v7 = v5;
  int64_t v8 = 0;
  result.var1 = v8;
  result.var0 = v7;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006E258(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  BOOL v4 = [(VOTElement *)v3 containerTypes];
  if ([v4 containsObject:&off_1001C5338]) {
    BOOL v5 = [(VOTElement *)v3 isElementFirstElement:1 orLastElement:0 withType:64];
  }
  else {
    BOOL v5 = 0;
  }

  BOOL v6 = v5;
  int64_t v7 = 0;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006E300(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  BOOL v4 = [(VOTElement *)v3 containerTypes];
  if ([v4 containsObject:&off_1001C52F0]) {
    BOOL v5 = [(VOTElement *)v3 isElementFirstElement:1 orLastElement:0 withType:2];
  }
  else {
    BOOL v5 = 0;
  }

  BOOL v6 = v5;
  int64_t v7 = 0;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006E3A8(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  BOOL v4 = [(VOTElement *)v3 containerTypes];
  if ([v4 containsObject:&off_1001C5350]) {
    BOOL v5 = [(VOTElement *)v3 isElementFirstElement:1 orLastElement:0 withType:128];
  }
  else {
    BOOL v5 = 0;
  }

  BOOL v6 = v5;
  int64_t v7 = 0;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006E450(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  BOOL v4 = [(VOTElement *)v3 containerTypes];
  if ([v4 containsObject:&off_1001C5368]) {
    BOOL v5 = [(VOTElement *)v3 isElementFirstElement:1 orLastElement:0 withType:1];
  }
  else {
    BOOL v5 = 0;
  }

  BOOL v6 = v5;
  int64_t v7 = 0;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006E4F8(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  if ([(VOTElement *)v3 doesHaveTraits:kAXLinkTrait])
  {
    BOOL v4 = [(VOTElement *)v3 linkedElement];
    BOOL v5 = v4 != 0;
  }
  else
  {
    BOOL v5 = 0;
  }

  BOOL v6 = v5;
  int64_t v7 = 0;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006E58C(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  if ([(VOTElement *)v3 doesHaveTraits:kAXRadioButtonTrait])
  {
    uint64_t v4 = 2;
    uint64_t v5 = 1;
  }
  else if ([(VOTElement *)v3 doesHaveTraits:kAXPopupButtonTrait | kAXButtonTrait])
  {
    uint64_t v4 = 0;
    uint64_t v5 = [(VOTElement *)v3 doesHaveTraits:kAXToggleTrait] ^ 1;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }

  BOOL v6 = v5;
  int64_t v7 = v4;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006E71C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = [(VOTElement *)a2 blockquoteLevel] != 0;
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

BOOL sub_10006E7DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((uint64_t)[*(id *)(a1 + 32) lastElementBlockquoteLevel] < 1)
  {
    BOOL v5 = 0;
  }
  else
  {
    id v4 = [v3 blockquoteLevel];
    BOOL v5 = v4 == [*(id *)(a1 + 32) lastElementBlockquoteLevel];
  }

  return v5;
}

BOOL sub_10006E8E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 doesHaveAllTraits:kAXHeaderTrait])
  {
    if ([*(id *)(a1 + 32) lastElementHeadingLevel])
    {
      id v4 = [v3 value];
      signed int v5 = [v4 intValue];
      BOOL v6 = [*(id *)(a1 + 32) lastElementHeadingLevel] == (id)v5;
    }
    else
    {
      BOOL v6 = 1;
    }
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

uint64_t sub_10006EA60(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  LODWORD(v2) = objc_msgSend(v3, "doesHaveAllTraits:", objc_msgSend(v2, "currentSimilarTraits"));

  return v2;
}

uint64_t sub_10006EB90(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  LODWORD(v2) = objc_msgSend(v3, "doesHaveAllTraits:", objc_msgSend(v2, "currentSimilarTraits"));

  return v2 ^ 1;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006EC0C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = [(VOTElement *)a2 doesHaveTraits:kAXTextEntryTrait];
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006EC6C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = [(VOTElement *)a2 doesHaveTraits:kAXRadioButtonTrait];
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006ECCC(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = [(VOTElement *)a2 doesHaveTraits:kAXToggleTrait];
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006ED2C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = [(VOTElement *)a2 doesHaveTraits:kAXSearchFieldTrait];
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

uint64_t sub_10006F37C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[0] = a3;
  v15[1] = a4;
  int64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v14 = a2;
  id v10 = a2;
  [v8 _customPublicRotorMatchForType:v9 range:v15 element:&v14 direction:a5 lastSearchUUID:a6];
  id v11 = v14;

  uint64_t v12 = v15[0];
  return v12;
}

void sub_10006F75C(id a1)
{
  v3[0] = kVOTEventCommandNextGraphic;
  v3[1] = kVOTEventCommandPreviousGraphic;
  v4[0] = &stru_1001B4FB8;
  v4[1] = &stru_1001B4FD8;
  void v3[2] = kVOTEventCommandNextHeading;
  v3[3] = kVOTEventCommandPreviousHeading;
  v4[2] = &stru_1001B4FF8;
  v4[3] = &stru_1001B5018;
  void v3[4] = kVOTEventCommandNextHeading;
  v3[5] = kVOTEventCommandPreviousHeading;
  v4[4] = &stru_1001B5038;
  v4[5] = &stru_1001B5058;
  v3[6] = kVOTEventCommandNextSameElement;
  v3[7] = kVOTEventCommandPreviousSameElement;
  v4[6] = &stru_1001B5078;
  v4[7] = &stru_1001B5098;
  v3[8] = kVOTEventCommandNextSameHeading;
  v3[9] = kVOTEventCommandPreviousSameHeading;
  v4[8] = &stru_1001B50B8;
  v4[9] = &stru_1001B50D8;
  v3[10] = kVOTEventCommandNextDifferentElement;
  v3[11] = kVOTEventCommandPreviousDifferentElement;
  v4[10] = &stru_1001B50F8;
  v4[11] = &stru_1001B5118;
  v3[12] = kVOTEventCommandNextTable;
  v3[13] = kVOTEventCommandPreviousTable;
  v4[12] = &stru_1001B5138;
  v4[13] = &stru_1001B5158;
  v3[14] = kVOTEventCommandNextFrame;
  v3[15] = kVOTEventCommandPreviousFrame;
  v4[14] = &stru_1001B5178;
  v4[15] = &stru_1001B5198;
  uint8_t v3[16] = kVOTEventCommandNextControl;
  v3[17] = kVOTEventCommandPreviousControl;
  v4[16] = &stru_1001B51B8;
  v4[17] = &stru_1001B51D8;
  v3[18] = kVOTEventCommandNextList;
  v3[19] = kVOTEventCommandPreviousList;
  v4[18] = &stru_1001B51F8;
  v4[19] = &stru_1001B5218;
  v3[20] = kVOTEventCommandNextLink;
  v3[21] = kVOTEventCommandPreviousLink;
  v4[20] = &stru_1001B5238;
  v4[21] = &stru_1001B5258;
  v3[22] = kVOTEventCommandNextBoldText;
  void v3[23] = kVOTEventCommandPreviousBoldText;
  v4[22] = &stru_1001B5278;
  v4[23] = &stru_1001B5298;
  v3[24] = kVOTEventCommandNextItalicText;
  v3[25] = kVOTEventCommandPreviousItalicText;
  v4[24] = &stru_1001B52B8;
  v4[25] = &stru_1001B52D8;
  v3[26] = kVOTEventCommandNextUnderlineText;
  v3[27] = kVOTEventCommandPreviousUnderlineText;
  v4[26] = &stru_1001B52F8;
  v4[27] = &stru_1001B5318;
  v3[28] = kVOTEventCommandNextMisspelledWord;
  v3[29] = kVOTEventCommandPreviousMisspelledWord;
  v4[28] = &stru_1001B5338;
  v4[29] = &stru_1001B5358;
  v3[30] = kVOTEventCommandNextPlainText;
  v3[31] = kVOTEventCommandPreviousPlainText;
  v4[30] = &stru_1001B5378;
  v4[31] = &stru_1001B5398;
  v3[32] = kVOTEventCommandNextColorChange;
  v3[33] = kVOTEventCommandPreviousColorChange;
  v4[32] = &stru_1001B53B8;
  v4[33] = &stru_1001B53D8;
  v3[34] = kVOTEventCommandNextFontChange;
  v3[35] = kVOTEventCommandPreviousFontChange;
  v4[34] = &stru_1001B53F8;
  v4[35] = &stru_1001B5418;
  v3[36] = kVOTEventCommandNextStyleChange;
  v3[37] = kVOTEventCommandPreviousStyleChange;
  v4[36] = &stru_1001B5438;
  v4[37] = &stru_1001B5458;
  v3[38] = kVOTEventCommandNextBlockquote;
  v3[39] = kVOTEventCommandPreviousBlockquote;
  v4[38] = &stru_1001B5478;
  v4[39] = &stru_1001B5498;
  v3[40] = kVOTEventCommandNextSameBlockquote;
  v3[41] = kVOTEventCommandPreviousSameBlockquote;
  v4[40] = &stru_1001B54B8;
  v4[41] = &stru_1001B54D8;
  v3[42] = kVOTEventCommandNextVisitedLink;
  v3[43] = kVOTEventCommandPreviousVisitedLink;
  v4[42] = &stru_1001B54F8;
  v4[43] = &stru_1001B5518;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:44];
  uint64_t v2 = (void *)qword_1001EB978;
  qword_1001EB978 = v1;
}

void sub_10006FC10(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 16;
  *a3 = 1;
}

void sub_10006FC24(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 16;
  *a3 = 2;
}

void sub_10006FC38(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 8;
  *a3 = 1;
}

void sub_10006FC4C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 8;
  *a3 = 2;
}

void sub_10006FC60(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 8;
  *a3 = 1;
}

void sub_10006FC74(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 8;
  *a3 = 2;
}

void sub_10006FC88(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 44;
  *a3 = 1;
}

void sub_10006FC9C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 44;
  *a3 = 2;
}

void sub_10006FCB0(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 52;
  *a3 = 1;
}

void sub_10006FCC4(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 52;
  *a3 = 2;
}

void sub_10006FCD8(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 53;
  *a3 = 1;
}

void sub_10006FCEC(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 53;
  *a3 = 2;
}

void sub_10006FD00(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 11;
  *a3 = 1;
}

void sub_10006FD14(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 11;
  *a3 = 2;
}

void sub_10006FD28(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 12;
  *a3 = 1;
}

void sub_10006FD3C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 12;
  *a3 = 2;
}

void sub_10006FD50(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 10;
  *a3 = 1;
}

void sub_10006FD64(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 10;
  *a3 = 2;
}

void sub_10006FD78(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 13;
  *a3 = 1;
}

void sub_10006FD8C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 13;
  *a3 = 2;
}

void sub_10006FDA0(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 9;
  *a3 = 1;
}

void sub_10006FDB4(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 9;
  *a3 = 2;
}

void sub_10006FDC8(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 71;
  *a3 = 1;
}

void sub_10006FDDC(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 71;
  *a3 = 2;
}

void sub_10006FDF0(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 72;
  *a3 = 1;
}

void sub_10006FE04(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 72;
  *a3 = 2;
}

void sub_10006FE18(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 73;
  *a3 = 1;
}

void sub_10006FE2C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 73;
  *a3 = 2;
}

void sub_10006FE40(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 74;
  *a3 = 1;
}

void sub_10006FE54(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 74;
  *a3 = 2;
}

void sub_10006FE68(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 75;
  *a3 = 1;
}

void sub_10006FE7C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 75;
  *a3 = 2;
}

void sub_10006FE90(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 76;
  *a3 = 1;
}

void sub_10006FEA4(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 76;
  *a3 = 2;
}

void sub_10006FEB8(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 77;
  *a3 = 1;
}

void sub_10006FECC(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 77;
  *a3 = 2;
}

void sub_10006FEE0(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 78;
  *a3 = 1;
}

void sub_10006FEF4(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 78;
  *a3 = 2;
}

void sub_10006FF08(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 79;
  *a3 = 1;
}

void sub_10006FF1C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 79;
  *a3 = 2;
}

void sub_10006FF30(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 80;
  *a3 = 1;
}

void sub_10006FF44(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 80;
  *a3 = 2;
}

void sub_10006FF58(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 14;
  *a3 = 1;
}

void sub_10006FF6C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 14;
  *a3 = 2;
}

void sub_1000707C8(id a1)
{
  uint64_t v1 = (void *)qword_1001EB988;
  qword_1001EB988 = (uint64_t)&off_1001C70C8;
}

id sub_10007094C()
{
  uint64_t v4 = 0;
  signed int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1001EB9D8;
  uint64_t v7 = qword_1001EB9D8;
  if (!qword_1001EB9D8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1000AE2EC;
    v3[3] = &unk_1001B3FE0;
    void v3[4] = &v4;
    sub_1000AE2EC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_100070A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100070A30(id a1, NSError *a2)
{
  if (a2) {
    _AXLogWithFacility();
  }
}

void sub_100070A90(id a1, NSError *a2)
{
  if (a2) {
    _AXLogWithFacility();
  }
}

id sub_100070FD8(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 identifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100072364(id a1)
{
  id v1 = objc_allocWithZone((Class)NSArray);
  qword_1001EB998 = (uint64_t)objc_msgSend(v1, "initWithObjects:", UIAccessibilityTokenMisspelled, AXUIAccessibilityTextAttributeHeadingLevel, AXUIAccessibilityTextAttributeCustom, UIAccessibilityTokenBlockquoteLevel, UIAccessibilityTokenStyleName, UIAccessibilityTokenFontFamily, UIAccessibilityTokenFontSize, UIAccessibilityTokenLineSpacing, UIAccessibilityTokenForegroundColor, UIAccessibilityTokenBold, UIAccessibilityTokenItalic, UIAccessibilityTokenUnderline, UIAccessibilityTokenStrikethrough, UIAccessibilityTokenParagraphAlignment, UIAccessibilityTokenHighlightedText, UIAccessibilityTokenFontName, UIAccessibilityTokenListItemLabel,
                               UIAccessibilityTokenIndentationLevel,
                               0);

  _objc_release_x1();
}

id sub_1000754A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

void sub_1000754D8(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  id v4 = *(void **)(v2 + 1632);
  id v5 = +[NSNumber numberWithInteger:a1[10]];
  objc_msgSend(v4, "performSelector:onTarget:count:objects:", "_finishHandlingLineMovementInWeb:direction:withCurrentElement:markerArray:textObjects:existingRequest:", v2, 6, v3, v5, a1[6], a1[7], a1[8], a1[9], 0);
}

id sub_100075F54(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

id sub_100076BE8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForLineFrameMovement:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

void sub_100078C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100078C90(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v7 = [*(id *)(a1 + 32) _treePositionForMathSegment:a2];
  if (sub_1000534C0(v7, *(void **)(a1 + 40)))
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a3;
    *a4 = 1;
  }
}

id sub_100079830(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_finishHandlingNextAutofillWithElement:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

void sub_100079AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100079AF0(uint64_t a1)
{
  [*(id *)(a1 + 32) updateValue];
  uint64_t v2 = [*(id *)(a1 + 32) value];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(a1 + 40) isEqualToString:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)] ^ 1;
}

id sub_10007AD38(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _monitorElements];
}

void sub_10007B364(uint64_t a1)
{
  id v10 = [*(id *)(a1 + 32) _currentElement];
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 232) application];
  unsigned int v3 = [v2 isDictationListening];

  if (v3)
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 232) application];
    unsigned __int8 v5 = [v4 startStopToggle];

    if (v5) {
      goto LABEL_13;
    }
  }
  if ([v10 doesHaveTraits:kAXStatusBarElementTrait]
    && ([*(id *)(a1 + 40) startStopToggle] & 1) != 0
    || ([v10 startStopToggle] & 1) != 0)
  {
    goto LABEL_13;
  }
  uint64_t v6 = [v10 remoteParent];
  if (v6)
  {
    id v7 = (void *)v6;
    int64_t v8 = [v10 immediateRemoteParent];
    if ([v8 startStopToggle])
    {

      goto LABEL_13;
    }
    if ([v8 isEqual:v7])
    {
    }
    else
    {
      unsigned __int8 v9 = [v7 startStopToggle];

      if (v9) {
        goto LABEL_13;
      }
    }
  }
  [*(id *)(a1 + 40) startStopToggle];
LABEL_13:
}

uint64_t sub_10007B4A4(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    LOBYTE(v10) = 1;
    _AXLogWithFacility();
    unsigned int v3 = +[AXSubsystemMagicTapToggle sharedInstance];
    unsigned __int8 v4 = [v3 ignoreLogging];

    if ((v4 & 1) == 0)
    {
      unsigned __int8 v5 = +[AXSubsystemMagicTapToggle identifier];
      uint64_t v6 = AXLoggerForFacility();

      os_log_type_t v7 = AXOSLogLevelFromAXLogLevel();
      if (os_log_type_enabled(v6, v7))
      {
        int64_t v8 = AXColorizeFormatLog();
        unsigned __int8 v9 = _AXStringForArgs();
        if (os_log_type_enabled(v6, v7))
        {
          *(_DWORD *)buf = 138543362;
          double v13 = v9;
          _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}@", buf, 0xCu);
        }
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16))();
  }
  return result;
}

id sub_10007B840(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:cancelMask:count:objects:", "_handlePressActionResultAtTime:", *(void *)(a1 + 32), 0, 1, *(void *)(a1 + 40), 0);
}

id sub_10007B9B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:cancelMask:count:objects:", "_handlePressActionResultAtTime:", *(void *)(a1 + 32), 0, 1, *(void *)(a1 + 40), 0);
}

id sub_10007CA78(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:cancelMask:count:objects:", "_handlePressActionResultAtTime:", *(void *)(a1 + 32), 0, 1, *(void *)(a1 + 40), 0);
}

void sub_10007CAB4(uint64_t a1)
{
  id v2 = +[VOTDisplayManager displayManager];
  [v2 setCursorFrameForElement:*(void *)(a1 + 32)];
}

id sub_10007CB0C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    [*(id *)(a1 + 40) updateValue];
    id v2 = [*(id *)(a1 + 40) toggleStatusLabel];
    if (([v2 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
    {
      id v3 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      [v3 setDoesNotInterrupt:1];
      id v4 = [v3 addString:v2];
      [*(id *)(a1 + 48) sendRequest:v3];
    }
  }
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void **)(v5 + 1632);
  uint64_t v7 = *(void *)(v5 + 112);

  return [v6 performSelector:"forceUpdate" onTarget:v7 cancelMask:0 count:0 objects:0];
}

id sub_10007D640(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1632) performSelector:"_handleElementChangedNotification:" onTarget:*(void *)(a1 + 32) cancelMask:1024 count:1 objects:0];
}

void sub_10007DB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007DB94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = objc_alloc_init((Class)AXEventPathInfoRepresentation);
  id v4 = [*(id *)(a1 + 32) fingersFromTouchCommands];
  uint64_t v5 = [v4 objectForKey:v3];

  [v5 pointValue];
  objc_msgSend(v6, "setPathLocation:");
  LOBYTE(v4) = [v3 intValue];

  [v6 setPathIndex:v4];
  objc_msgSend(v6, "setPathProximity:", objc_msgSend(v6, "pathProximity") | 3);
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v6];
}

void sub_10007E130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E2B4(id a1)
{
  id v1 = +[AXSettings sharedInstance];
  objc_msgSend(v1, "setTapticTimeUsageCount:", (char *)objc_msgSend(v1, "tapticTimeUsageCount") + 1);
}

void sub_10007ED9C(uint64_t a1)
{
  id v2 = +[VOTElement systemWideElement];
  objc_msgSend(v2, "postFingerLiftAtPoint:withContextId:", *(unsigned int *)(a1 + 48), *(double *)(a1 + 32), *(double *)(a1 + 40));
}

int64_t sub_10007F7EC(id a1, VOTOutputRequest *a2)
{
  return (id)[(VOTOutputRequest *)a2 originationType] == (id)1;
}

id sub_10007FD18(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1632) performSelector:"_handleFlashlightNotification" onTarget:*(void *)(a1 + 32) cancelMask:0 count:0 objects:0];
}

void sub_10007FF28(void *a1)
{
  id v1 = a1;
  double v17 = objc_opt_new();
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v2 = sub_1000AE48C();
  id v3 = [v2 deliveredNotifications];

  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v24 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        int64_t v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        unsigned __int8 v9 = [v8 request];
        uint64_t v10 = [v9 content];
        id v11 = [v10 threadIdentifier];
        unsigned int v12 = [v11 isEqualToString:v1];

        if (v12)
        {
          double v13 = [v8 request];
          id v14 = [v13 identifier];
          [v17 addObject:v14];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v24 count:16];
    }
    while (v5);
  }

  double v15 = VOTLogCommon();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v23 = v1;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Removing VO notifications %@", buf, 0xCu);
  }

  CGFloat v16 = sub_1000AE48C();
  [v16 removeDeliveredNotificationsWithIdentifiers:v17];
}

void sub_1000802C0()
{
  sub_1000AE48C();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  [v0 requestAuthorizationWithOptions:32 completionHandler:&stru_1001B5720];
}

void sub_10008041C(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  id v4 = a3;
  id v5 = VOTLogCommon();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109378;
    v6[1] = v3;
    __int16 v7 = 2112;
    int64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Requested authorization to show notification for flashlight: %d %@", (uint8_t *)v6, 0x12u);
  }
}

void sub_1000807EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100080F1C(id a1, VOTCustomActionCategory *a2)
{
  id v2 = [(VOTCustomActionCategory *)a2 categoryName];
  unsigned __int8 v3 = [v2 isEqualToString:UIAccessibilityCustomActionCategoryEdit];

  return v3;
}

BOOL sub_100081158(id a1, VOTCustomActionCategory *a2)
{
  id v2 = [(VOTCustomActionCategory *)a2 categoryName];
  unsigned __int8 v3 = [v2 isEqualToString:UIAccessibilityCustomActionCategoryEdit];

  return v3;
}

void sub_1000817B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000817DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + a3;
    objc_msgSend(*(id *)(a1 + 32), "_textAttachmentElementForString:inRange:", *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v6, a4);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    __int16 v7 = +[NSMutableArray array];
    int64_t v8 = [v16 value];
    [v7 axSafelyAddObject:v8];

    unsigned __int8 v9 = [v16 label];
    [v7 axSafelyAddObject:v9];

    uint64_t v10 = [v7 componentsJoinedByString:@", "];
    id v11 = [v16 label];
    id v12 = [v11 length];

    if (v12)
    {
      uint64_t v13 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), "axStringByReplacingCharactersInRange:withString:", v6, a4, v10);
      uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;

      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += (char *)[v10 length] - a4;
    }
  }
}

id sub_100081BD8(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = [a2 textualContexts];
  id v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

id sub_100081C1C(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = [a2 appIdentifiers];
  id v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

BOOL sub_1000829F8(id a1, VOTElement *a2, unint64_t a3, BOOL *a4)
{
  return [(VOTElement *)a2 isAccessibleElement];
}

id sub_100083250(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

uint64_t sub_100083878(uint64_t a1, double a2, double a3)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", a2, a3);
  if (([v4 isEqual:*(void *)(*(void *)(a1 + 32) + 64)] & 1) != 0
    || ![v4 isAccessibleElement])
  {
    uint64_t v5 = 0;
  }
  else
  {
    [*(id *)(a1 + 32) _echoDifferentElement:v4 forEvent:*(void *)(a1 + 40)];
    uint64_t v5 = 1;
  }

  return v5;
}

id sub_100084214(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

id sub_100084730(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 ignoreWhenVoiceOverTouches] && objc_msgSend(*(id *)(a1 + 32), "origin") == (id)2) {
    id v4 = 0;
  }
  else {
    id v4 = [v3 isValidForContext:*(void *)(a1 + 40)];
  }

  return v4;
}

void sub_100085520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100085D4C(uint64_t a1, int a2)
{
  id v2 = off_1001EA9E8;
  if (a2) {
    id v3 = @"element.on.text";
  }
  else {
    id v3 = @"element.off.text";
  }
  id v4 = [(id)VOTSharedWorkspace selectedLanguage];
  uint64_t v5 = sub_100051D04(v2, v3, 0, v4);

  return v5;
}

void sub_100085FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100086348(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

id sub_1000866A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

id sub_100087F9C(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [v3 isEqualToString:*(void *)(*(void *)(a1 + 32) + 992)];

  return v4;
}

id sub_100088264(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

intptr_t sub_1000890D0(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1000894C8(uint64_t a1, void *a2)
{
  id v3 = [a2 uuid];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_100089E60(id a1)
{
  id v6 = [(id)VOTSharedWorkspace selectedLanguage];
  id v1 = off_1001EA9E8;
  id v2 = +[AXSettings sharedInstance];
  if ([v2 voiceOverAudioDuckingEnabled]) {
    id v3 = @"audioducking.on";
  }
  else {
    id v3 = @"audioducking.off";
  }
  id v4 = sub_100051D04(v1, v3, 0, v6);
  id v5 = sub_10000ABF8(v4, 0, v6);
}

$85E40A55691FE2F31975A98F57E3065D sub_10008A478(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = [(VOTElement *)a2 doesHaveTraits:kAXWebContentTrait];
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10008A4B8(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = [(VOTElement *)a2 doesHaveTraits:kAXScrollableTrait];
  int64_t v4 = 0;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

void sub_10008BF98(id *a1)
{
  id v2 = [a1[4] mapFeatureType];
  if (v2)
  {
    if (v2 == (id)1)
    {
      id v3 = a1[4];
      int64_t v4 = (double *)a1[5];
      double v5 = v4[62];
      double v6 = v4[63];
    }
    else
    {
      id v7 = a1[4];
      [v7 centerPoint];
      id v3 = v7;
    }
    int64_t v8 = objc_msgSend(v3, "mapDetailedInformationAtPoint:", v5, v6);
    id v9 = [a1[6] addString:v8];
  }
  if ([a1[4] shouldAnnounceTableInfo])
  {
    id v10 = a1[4];
    id v11 = a1[6];
    id v12 = [v10 language];
    [v10 announceTableInfo:v11 options:0 language:v12];
  }
  [a1[4] announceAdditionalTextualInformation:a1[6]];
  id v18 = [a1[4] hint];
  if ([v18 length]) {
    id v13 = [a1[6] addString:v18];
  }
  id v14 = a1[6];
  uint64_t v15 = [a1[4] application];
  id v16 = [v15 label];
  id v17 = [v14 addString:v16];

  [a1[6] setGeneratesBraille:1];
  [a1[6] setBrailleType:2];
  [a1[5] sendRequest:a1[6]];
}

void sub_10008C100(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 length]) {
    id v3 = [*(id *)(a1 + 32) addString:v4];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10008C204(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_10008C984(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [v3 isEqualToString:*(void *)(*(void *)(a1 + 32) + 992)];

  return v4;
}

id sub_10008D22C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

uint64_t sub_10008E194(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isSystemApp] & 1) != 0
    || ([v3 isSpotlight] & 1) != 0)
  {
    uint64_t v4 = 0;
  }
  else
  {
    double v5 = *(void **)(*(void *)(a1 + 32) + 1712);
    double v6 = [v3 bundleIdentifier];
    uint64_t v4 = [v5 containsObject:v6] ^ 1;
  }
  return v4;
}

BOOL sub_10008E4E8(id a1, VOTElement *a2, unint64_t a3, BOOL *a4)
{
  return [(VOTElement *)a2 isVisible];
}

uint64_t sub_100090B34(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 1536) = 0;
  return result;
}

void sub_100091CC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  double v6 = [a2 outputActions];
  id v7 = [v6 firstObject];
  unsigned int v8 = [v7 isEqual:v5];

  if (v8)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    id v10 = VOTLogCommon();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = [*(id *)(a1 + 32) application];
      id v12 = [v11 activeKeyboard];
      id v13 = [*(id *)(a1 + 32) application];
      id v14 = [v13 activeKeyboard];
      int v22 = 138412546;
      double v23 = *(double *)&v12;
      __int16 v24 = 1024;
      LODWORD(v25) = [v14 isKeyboardContinuousPathAvailable];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Continuous path activation? %@ %d", (uint8_t *)&v22, 0x12u);
    }
    *(unsigned char *)(*(void *)(a1 + 40) + 1754) = 1;
    [*(id *)(a1 + 40) continuousPathTimeout];
    double v16 = v15;
    double v17 = Current - *(double *)(a1 + 48);
    [*(id *)(a1 + 40) continuousPathTimeout];
    if (v17 < v18)
    {
      [*(id *)(a1 + 40) continuousPathTimeout];
      double v16 = v19 - (Current - *(double *)(a1 + 48));
    }
    long long v20 = VOTLogCommon();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      [*(id *)(a1 + 40) continuousPathTimeout];
      int v22 = 134218240;
      double v23 = v16;
      __int16 v24 = 2048;
      uint64_t v25 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Continuous path waiting for %f (user choice: %f)", (uint8_t *)&v22, 0x16u);
    }

    [*(id *)(*(void *)(a1 + 40) + 432) dispatchAfterDelay:*(void *)(a1 + 32) withObject:v16];
  }
}

id sub_100091EEC(uint64_t a1, void *a2)
{
  id result = [a2 finishedSuccessfully];
  if (result && !*(unsigned char *)(a1 + 48))
  {
    [*(id *)(a1 + 32) _alternativeKeyActivateTime];
    *(unsigned char *)(*(void *)(a1 + 32) + 1754) = 0;
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(*(void *)(a1 + 32) + 432);
    return objc_msgSend(v5, "dispatchAfterDelay:withObject:", v4);
  }
  return result;
}

id sub_100091F54(uint64_t a1)
{
  id v2 = VOTLogElement();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10011F4C4();
  }

  return [*(id *)(a1 + 32) resetBannerTimer];
}

$85E40A55691FE2F31975A98F57E3065D sub_10009261C(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = a2;
  if ([(VOTElement *)v3 isReadingContent]) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = [(VOTElement *)v3 includeDuringContentReading];
  }

  BOOL v5 = v4;
  int64_t v6 = 0;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

void sub_1000934EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100093508(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 label];
  BOOL v5 = +[NSCharacterSet whitespaceCharacterSet];
  int64_t v6 = [v4 stringByTrimmingCharactersInSet:v5];

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100093774;
  v18[3] = &unk_1001B5A20;
  id v7 = v3;
  id v19 = v7;
  unsigned int v8 = objc_retainBlock(v18);
  if (*(unsigned char *)(a1 + 80))
  {
    id v9 = [*(id *)(a1 + 32) objectForKey:v6];
    if ([v6 length]) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      goto LABEL_11;
    }
    id v11 = *(void **)(a1 + 40);
    id v12 = objc_msgSend(*(id *)(a1 + 48), "_stringForApplicationWithName:inApplications:withRole:", v6, *(void *)(a1 + 32), objc_msgSend(v9, "integerValue"));
    id v13 = [v11 addString:v12];

    [*(id *)(a1 + 56) addObject:v6];
    ((void (*)(void *, void))v8[2])(v8, *(void *)(a1 + 40));

    goto LABEL_7;
  }
  if ([v6 length])
  {
    id v14 = *(void **)(*(void *)(a1 + 48) + 1712);
    id v9 = [v7 bundleIdentifier];
    if ([v14 containsObject:v9])
    {
LABEL_11:

      goto LABEL_12;
    }
    double v15 = [v7 bundleIdentifier];
    unsigned __int8 v16 = [v15 isEqualToString:@"com.apple.accessibility.MagnifierAngel"];

    if (v16) {
      goto LABEL_12;
    }
    id v17 = [*(id *)(a1 + 40) addString:v6];
    [*(id *)(a1 + 56) addObject:v6];
    ((void (*)(void *, void))v8[2])(v8, *(void *)(a1 + 40));
LABEL_7:
    id v9 = [v7 summaryElement];
    if (v9)
    {
      [*(id *)(a1 + 48) _addDescription:v9 toRequest:*(void *)(a1 + 40) withOptions:1];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
      [*(id *)(a1 + 64) addObject:v9];
    }
    goto LABEL_11;
  }
LABEL_12:
}

void sub_100093774(uint64_t a1, void *a2)
{
  id v11 = a2;
  id v3 = [*(id *)(a1 + 32) bundleIdentifier];
  if (j__VOSProcessAllowsScreenRecognition())
  {
    uint64_t v4 = +[AXSettings sharedInstance];
    BOOL v5 = [*(id *)(a1 + 32) bundleIdentifier];
    id v6 = [v4 automaticAccessibilityModeForBundleIdentifier:v5];

    if (v6 != (id)1) {
      goto LABEL_5;
    }
    id v7 = off_1001EA9E8;
    id v3 = [(id)VOTSharedWorkspace selectedLanguage];
    unsigned int v8 = sub_100051D04(v7, @"neuralvision.on", 0, v3);
    id v9 = [(id)VOTSharedWorkspace selectedLanguage];
    id v10 = [v11 addString:v8 withLanguage:v9];
  }
LABEL_5:
}

BOOL sub_1000938EC(id a1, VOTElement *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  if ([(VOTElement *)v4 isSafari]) {
    unsigned __int8 v5 = 1;
  }
  else {
    unsigned __int8 v5 = [(VOTElement *)v4 isGoogleChrome];
  }

  return v5;
}

void sub_100095D88(id a1)
{
}

id sub_100095D98(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

void sub_100097A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

$85E40A55691FE2F31975A98F57E3065D sub_100097AA8(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = a2;
  if ([(VOTElement *)v3 doesHaveTraits:kAXKeyboardKeyTrait]) {
    BOOL v4 = [(VOTElement *)v3 isInternationalKeyboardKey];
  }
  else {
    BOOL v4 = 0;
  }

  BOOL v5 = v4;
  int64_t v6 = 0;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

void sub_100097B00(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v14 = a2;
  [v14 frame];
  v17.origin.double x = v7;
  v17.origin.double y = v8;
  v17.size.CGFloat width = v9;
  v17.size.CGFloat height = v10;
  CGRect v16 = CGRectIntersection(*(CGRect *)(a1 + 48), v17);
  if (v16.size.width >= *(double *)(a1 + 64) * 0.5 && v16.size.height >= *(double *)(a1 + 72) * 0.5)
  {
    id v11 = [v14 equivalenceTag];
    id v12 = [*(id *)(a1 + 32) equivalenceTag];
    unsigned int v13 = [v11 isEqualToString:v12];

    if (v13)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }
}

void sub_100098460(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 2120));
  [WeakRetained directInteractionElementsUpdated:*(void *)(a1 + 40)];
}

id sub_100099398(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "_updateCursorFrameForElementIfNeeded:", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), 0);
}

id sub_10009A05C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:cancelMask:count:objects:", "_handleFirstResponderChangedNotification:", *(void *)(a1 + 32), 0x20000, 1, @"retry", 0);
}

id sub_10009A0A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:cancelMask:count:objects:", "_handleFirstResponderChangedNotification:", *(void *)(a1 + 32), 0x20000, 1, *(void *)(a1 + 40), 0);
}

int64_t sub_10009A0DC(id a1, VOTOutputRequest *a2)
{
  id v2 = a2;
  int64_t v3 = [(VOTOutputRequest *)v2 doesNotInterrupt]
    && (id)[(VOTOutputRequest *)v2 originationType] == (id)1;

  return v3;
}

BOOL sub_10009A978(id a1, VOTElement *a2)
{
  return [(VOTElement *)a2 isSafari];
}

BOOL sub_10009C4EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = [v3 textInputElement];
  unsigned int v5 = [v4 isEqual:*(void *)(*(void *)(a1 + 32) + 232)];

  if (v5 && (id v6 = [v3 textInputElementRange], v6 != (id)0x7FFFFFFF))
  {
    BOOL v8 = 0;
    unint64_t v10 = *(void *)(a1 + 40);
    if ((unint64_t)v6 <= *(void *)(a1 + 48) + v10 && (unint64_t)v6 + v7 >= v10)
    {
      [v3 updateFrame];
      [v3 frame];
      CGRect v12 = CGRectIntersection(v11, *(CGRect *)(a1 + 56));
      BOOL v8 = !CGRectIsEmpty(v12);
    }
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

BOOL sub_10009C6A8(id a1, VOTElement *a2)
{
  return [(VOTElement *)a2 usingHardwareKeyboard];
}

BOOL sub_10009C6B0(id a1, VOTElement *a2)
{
  return [(VOTElement *)a2 usingBrailleHardwareKeyboard];
}

id sub_10009E560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAttributes:withRange:", a2, *(void *)(a1 + 40) + a3, a4);
}

void sub_10009E574(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

void sub_10009E588(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
  id v6 = a2;
  BOOL v4 = [(VOTOutputAction *)v6 objectForVariant:15];

  if (v4)
  {
    unsigned int v5 = [(VOTOutputAction *)v6 objectForVariant:15];
    [(VOTOutputAction *)v6 setObject:v5 forVariant:16];
  }
}

uint64_t sub_10009EE0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 doesHaveTraits:kAXWebContentTrait] && objc_msgSend(v3, "expandedStatus"))
  {
    BOOL v4 = [v3 equivalenceTag];
    unsigned int v5 = [*(id *)(a1 + 32) equivalenceTag];
    unsigned int v6 = [v4 isEqualToString:v5];

    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id sub_10009EF1C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1632) performSelector:"__handleExpandedStatusChanged" onTarget:*(void *)(a1 + 32) cancelMask:0 count:0 objects:0];
}

id sub_10009F304(uint64_t a1)
{
  id v2 = +[AXHapticFeedbackManager sharedManager];
  [v2 playHapticFeedbackForType:19];

  id v3 = *(void **)(a1 + 32);

  return [v3 _handleFireStewie];
}

id sub_1000A0EA4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1000A0F18;
  v3[3] = &unk_1001B33B8;
  void v3[4] = v1;
  return [v1 performAsyncBlock:v3 forThreadKey:v1[211]];
}

id sub_1000A0F18(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleTemporaryScreenCurtainDisablement];
}

void sub_1000A0F20(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
  BOOL v4 = off_1001EA9E8;
  unsigned int v5 = a2;
  sub_100051804(v4, @"braille.paste.operation", 0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  [(VOTOutputAction *)v5 setBrailleString:v6];
}

id sub_1000A0F98(uint64_t a1)
{
  return [*(id *)(a1 + 32) setDelayedNotificationAnnouncementRequest:0];
}

uint64_t sub_1000A126C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 1992) = 0;
  return result;
}

void sub_1000A1C5C(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

id sub_1000A1C68(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1632) performSelector:"_updateDisplayWithCurrentElement" onTarget:*(void *)(a1 + 32) cancelMask:0 count:0 objects:0];
}

id sub_1000A1FA8(id a1, VOTElement *a2)
{
  return [(VOTElement *)a2 uiElement];
}

id sub_1000A2898(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 368) dispatchAfterDelay:*(float *)(a1 + 40)];
}

id sub_1000A4994(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1632) performSelector:"_startReadingBookForNewPage" onTarget:*(void *)(a1 + 32) cancelMask:0 count:0 objects:0];
}

id sub_1000A5778(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1632) performSelector:"updateRunningApplications" onTarget:*(void *)(a1 + 32) count:0 objects:0];
}

void sub_1000A6438(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"VOTBSIStateChangedNotification" object:*(void *)(a1 + 32) userInfo:*(void *)(a1 + 40)];

  id v3 = VOTLogBrailleGestures();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
    unsigned int v5 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
    int v6 = 138412546;
    uint64_t v7 = v4;
    __int16 v8 = 2112;
    CGFloat v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Posting BSIStateChangedNotification with active:%@ usage:%@", (uint8_t *)&v6, 0x16u);
  }
}

id sub_1000A7520(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendBSIStateChangedNotification:1 usage:0];
}

void sub_1000A7FD0(id a1, NSString *a2, NSString *a3)
{
  BOOL v4 = a2;
  unsigned int v5 = a3;
  int v6 = objc_alloc_init(VOTOutputRequest);
  id v7 = [(VOTOutputRequest *)v6 addString:v4];
  [(VOTOutputRequest *)v6 setLanguage:v5];
  [(VOTOutputRequest *)v6 setBrailleType:2];
  [(VOTOutputRequest *)v6 setCannotBeInterrupted:1];
  [(VOTOutputRequest *)v6 send];
  __int16 v8 = VOTLogCommon();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412546;
    unint64_t v10 = v4;
    __int16 v11 = 2112;
    CGRect v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Describing image: %@/%@", (uint8_t *)&v9, 0x16u);
  }
}

id sub_1000A8F80(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 1632), "performSelector:onTarget:count:objects:", "__sendHIDEvents:postEventDelays:", *(void *)(a1 + 48), 0);
}

id sub_1000A9C08(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1632) performSelector:"_tvOS_retryUpdateWithNativeFocus" onTarget:*(void *)(a1 + 32) count:0 objects:0];
}

void sub_1000AB6D4(id a1)
{
  id v1 = +[VOTUserEventManager sharedInstance];
  [v1 userEventOccurred];
}

Class sub_1000AE2EC(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_1001EB9E0)
  {
    v3[1] = _NSConcreteStackBlock;
    void v3[2] = (void *)3221225472;
    v3[3] = sub_1000AE418;
    void v3[4] = &unk_1001B3580;
    void v3[5] = v3;
    long long v4 = off_1001B5D70;
    uint64_t v5 = 0;
    qword_1001EB9E0 = _sl_dlopen();
  }
  if (!qword_1001EB9E0) {
    sub_100120EEC(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SpeakThisServices");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100120F6C();
  }
  qword_1001EB9D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000AE418()
{
  uint64_t result = _sl_dlopen();
  qword_1001EB9E0 = result;
  return result;
}

id sub_1000AE48C()
{
  if (qword_1001EB9F0 != -1) {
    dispatch_once(&qword_1001EB9F0, &stru_1001B5D88);
  }
  id v0 = (void *)qword_1001EB9E8;

  return v0;
}

void sub_1000AE4E0(id a1)
{
  uint64_t v15 = 0;
  CGRect v16 = &v15;
  uint64_t v17 = 0x2050000000;
  id v1 = (void *)qword_1001EB9F8;
  uint64_t v18 = qword_1001EB9F8;
  if (!qword_1001EB9F8)
  {
    unint64_t v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    CGRect v12 = sub_1000AE6CC;
    unsigned int v13 = &unk_1001B3FE0;
    id v14 = &v15;
    sub_1000AE6CC((uint64_t)&v10);
    id v1 = (void *)v16[3];
  }
  id v2 = v1;
  _Block_object_dispose(&v15, 8);
  id v3 = [[v2 alloc] initWithBundleIdentifier:@"com.apple.VoiceOverNotifications"];
  long long v4 = (void *)qword_1001EB9E8;
  qword_1001EB9E8 = (uint64_t)v3;

  uint64_t v15 = 0;
  CGRect v16 = &v15;
  uint64_t v17 = 0x2050000000;
  uint64_t v5 = (void *)qword_1001EBA08;
  uint64_t v18 = qword_1001EBA08;
  if (!qword_1001EBA08)
  {
    unint64_t v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    CGRect v12 = sub_1000AE88C;
    unsigned int v13 = &unk_1001B3FE0;
    id v14 = &v15;
    sub_1000AE88C((uint64_t)&v10);
    uint64_t v5 = (void *)v16[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v15, 8);
  id v7 = [v6 categoryWithIdentifier:@"com.apple.VoiceOver.message" actions:&__NSArray0__struct intentIdentifiers:&__NSArray0__struct options:0];
  __int16 v8 = (void *)qword_1001EB9E8;
  int v9 = +[NSSet setWithObject:v7];
  [v8 setNotificationCategories:v9];
}

void sub_1000AE6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000AE6CC(uint64_t a1)
{
  sub_1000AE724();
  Class result = objc_getClass("UNUserNotificationCenter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100120FE8();
  }
  qword_1001EB9F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000AE724()
{
  v0[0] = 0;
  if (!qword_1001EBA00)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = sub_1000AE818;
    v0[4] = &unk_1001B3580;
    v0[5] = v0;
    long long v1 = off_1001B5DA8;
    uint64_t v2 = 0;
    qword_1001EBA00 = _sl_dlopen();
  }
  if (!qword_1001EBA00) {
    sub_100121064(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_1000AE818()
{
  uint64_t result = _sl_dlopen();
  qword_1001EBA00 = result;
  return result;
}

Class sub_1000AE88C(uint64_t a1)
{
  sub_1000AE724();
  Class result = objc_getClass("UNNotificationCategory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1001210E4();
  }
  qword_1001EBA08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000AE8E4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = VOTLogCommon();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100121160();
    }
  }
}

Class sub_1000AE93C(uint64_t a1)
{
  sub_1000AE724();
  Class result = objc_getClass("UNMutableNotificationContent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1001211C8();
  }
  qword_1001EBA10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000AE994(uint64_t a1)
{
  sub_1000AE724();
  Class result = objc_getClass("UNNotificationRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100121244();
  }
  qword_1001EBA18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000AE9EC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_1000AEA40(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&a9, 8) = a1;
}

void sub_1000AEA4C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void sub_1000AEC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000AEC54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateWebRotorItems];
}

void sub_1000AF268(uint64_t a1)
{
}

uint64_t sub_1000AF374(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000AF384(uint64_t a1)
{
}

void sub_1000AF38C(uint64_t a1)
{
}

BOOL sub_1000B1B1C(id a1, VOTCustomAction *a2)
{
  uint64_t v2 = [(VOTCustomAction *)a2 categoryName];
  unsigned __int8 v3 = [v2 isEqualToString:UIAccessibilityCustomActionCategoryEdit];

  return v3;
}

void sub_1000B1B64(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v5 = [v4 customPublicRotors];
  id v6 = [v5 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v11 = [v4 customPublicRotorName:v10];
        CGRect v12 = v11;
        if ((*(unsigned char *)(a1 + 48)
           || ([v11 isEqualToString:@"AXCustomSystemRotorTypeMisspelledWord"] & 1) == 0)
          && [v12 length]
          && [v4 customPublicRotorIsVisibleInTouchRotor:v10]
          && ([*(id *)(a1 + 32) _customPublicRotorInRotor:v12] & 1) == 0)
        {
          v20[0] = @"uuid";
          v20[1] = @"name";
          v21[0] = v10;
          v21[1] = v12;
          unsigned int v13 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:2];
          id v14 = [v13 mutableCopy];

          if (a3) {
            [v14 setObject:*(void *)(a1 + 40) forKey:@"element"];
          }
          [*(id *)(*(void *)(a1 + 32) + 72) addObject:v14];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }
    while (v7);
  }
}

id sub_1000B1D54(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v7 = a2;
  id v3 = a2;
  id v4 = +[NSArray arrayWithObjects:&v7 count:1];
  id v5 = objc_msgSend(v2, "customActionsAreValid:", v4, v7);

  return v5;
}

void sub_1000B1DF8(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKey:@"VOTRotorType"];
  if (v3)
  {
    id v6 = v3;
    id v4 = (void *)(int)[v3 intValue];
    BOOL v5 = sub_1000F31E0(*(const __CFArray **)(*(void *)(a1 + 32) + 16), v4) == -1;
    id v3 = v6;
    if (!v5)
    {
      sub_1000F4A84(*(const __CFArray **)(*(void *)(a1 + 32) + 16), v4);
      sub_1000F4A70(*(__CFArray **)(*(void *)(a1 + 32) + 16), v4, 0);
      id v3 = v6;
    }
  }
}

uint64_t sub_1000B2040(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) delegate];
  if ([v3 isValidForContext:v4])
  {
    BOOL v5 = [v3 categoryName];
    uint64_t v6 = [v5 isEqualToString:UIAccessibilityCustomActionCategoryEdit] ^ 1;
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

BOOL sub_1000B2258(id a1, VOTCustomAction *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    char isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }

  return isKindOfClass & 1;
}

uint64_t sub_1000B2428(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) _init];
  uint64_t v2 = qword_1001EBA28;
  qword_1001EBA28 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_1000B2624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B2640(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleSiriVoiceUpdate];
}

id sub_1000B2680(uint64_t a1, void *a2)
{
  return [a2 _handleSiriVoiceUpdate];
}

void sub_1000B3654(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([*(id *)(a1 + 32) length]) {
    [*(id *)(a1 + 32) appendString:*(void *)(a1 + 40)];
  }
  id v3 = VOSLocString();
  if (v3) {
    [*(id *)(a1 + 32) appendString:v3];
  }
}

void sub_1000B4218(id a1)
{
  v4[0] = kVOTEventCommandHomeButtonPress;
  v4[1] = kVOTEventCommandMoveToStatusBar;
  v4[2] = kVOTEventCommandEjectButtonPress;
  v4[3] = kVOTEventCommandLeftElementCommunity;
  v4[4] = kVOTEventCommandRightElementCommunity;
  v4[5] = kVOTEventCommandShowSideApp;
  v4[6] = kVOTEventCommandPreviousContainer;
  v4[7] = kVOTEventCommandNextContainer;
  id v1 = +[NSArray arrayWithObjects:v4 count:8];
  uint64_t v2 = +[NSSet setWithArray:v1];
  id v3 = (void *)qword_1001EBA38;
  qword_1001EBA38 = v2;
}

void sub_1000B4404(id a1)
{
  id v1 = [objc_allocWithZone((Class)VOTUserEventManager) init];
  uint64_t v2 = qword_1001EBA48;
  qword_1001EBA48 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000B6FB0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v9 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v9 BOOLValue])
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = objc_msgSend(*(id *)(a1 + 40), "attributedSubstringFromRange:", a3, a4);
    [v7 addObject:v8];
  }
}

void sub_1000B75F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v25 = a2;
  BOOL v5 = [*(id *)(a1 + 32) objectAtIndex:a3];
  id v6 = [v5 longLongValue];
  unint64_t v7 = (unint64_t)[v5 unsignedLongLongValue];
  if (v6 == (id)-1) {
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 72) && (kAXButtonTrait & v7) != 0
    || *(unsigned char *)(a1 + 73) && (kAXSelectedTrait & v7) == kAXSelectedTrait)
  {
    goto LABEL_33;
  }
  if (((kAXInactiveTrait | kAXSelectedTrait) & v7) != 0)
  {
    uint64_t v8 = [*(id *)(a1 + 40) outputActions];
    uint64_t v9 = (uint64_t)[v8 count];

    if (v9)
    {
      uint64_t v10 = [*(id *)(a1 + 40) outputActions];
      uint64_t v11 = [v10 firstObject];
      CGRect v12 = [v11 objectForVariant:68];
      unsigned __int8 v13 = [v12 BOOLValue];

      if (v13)
      {
        uint64_t v9 = 1;
      }
      else if ([*(id *)(a1 + 48) doesHaveTraits:kAXPickerElementTrait])
      {
        uint64_t v21 = [*(id *)(a1 + 40) outputActions];
        uint64_t v9 = (uint64_t)[v21 count];
      }
      else
      {
        uint64_t v9 = 0;
      }
    }
    id v22 = [*(id *)(a1 + 40) addString:v25 breakWords:0 withLanguage:*(void *)(a1 + 56) atIndex:v9];
    id v16 = [*(id *)(a1 + 40) outputActions];
    long long v20 = [v16 objectAtIndexedSubscript:v9];
    [v20 setIsVoiceOverGeneratedContent:1];
LABEL_31:

LABEL_32:
    goto LABEL_33;
  }
  if ((kAXStatusBarElementTrait & v7) == 0 || (*(unsigned char *)(a1 + 65) & 0x20) == 0)
  {
    if ((kAXLinkTrait & v7) != 0)
    {
      id v14 = +[AXSettings sharedInstance];
      unsigned __int8 v15 = [v14 voiceOverLinkFeedback];

      if ((v15 & 2) != 0)
      {
        id v16 = [*(id *)(a1 + 40) addString:v25 withLanguage:*(void *)(a1 + 56)];
        double v23 = [*(id *)(a1 + 40) lastAction];
        [v23 setIsVoiceOverGeneratedContent:1];

        if ((v15 & 4) == 0) {
          goto LABEL_41;
        }
        if (v16)
        {
          __int16 v24 = [v16 firstObject];
LABEL_40:
          [v24 setObject:@"Sounds/LinkBegin.aiff" forVariant:75];

LABEL_41:
          if ((v15 & 8) != 0) {
            [v16 enumerateObjectsUsingBlock:&stru_1001B6138];
          }
          goto LABEL_32;
        }
      }
      else if ((v15 & 4) == 0)
      {
        id v16 = 0;
        goto LABEL_41;
      }
      __int16 v24 = [*(id *)(a1 + 40) lastAction];
      id v16 = 0;
      goto LABEL_40;
    }
LABEL_16:
    id v17 = [*(id *)(a1 + 40) addString:v25 withLanguage:*(void *)(a1 + 56)];
    long long v18 = [*(id *)(a1 + 40) lastAction];
    [v18 setIsVoiceOverGeneratedContent:1];

    if (!*(unsigned char *)(a1 + 74)) {
      goto LABEL_33;
    }
    id v16 = *(id *)(a1 + 48);
    if (([v16 containedIn:4] & 1) == 0
      && ([v16 containedIn:0x2000] & 1) == 0
      && ([v16 containedIn:2] & 1) == 0
      && ([v16 containedIn:1] & 1) == 0
      && ([v16 containedIn:8] & 1) == 0
      && ([v16 containedIn:32] & 1) == 0
      && ([v16 containedIn:16] & 1) == 0
      && ![v16 containedIn:0x8000]
      || ![v16 isElementFirstElement:1 orLastElement:1 withType:0])
    {
      goto LABEL_32;
    }

    id v16 = [*(id *)(a1 + 40) lastAction];
    LODWORD(v19) = 1062836634;
    long long v20 = +[NSNumber numberWithFloat:v19];
    [v16 setObject:v20 forVariant:32];
    goto LABEL_31;
  }
LABEL_33:
}

void sub_1000B79DC(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

void sub_1000B85DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000B860C(uint64_t a1, void *a2, NSUInteger a3, NSUInteger a4)
{
  id v7 = [a2 objectForKey:UIAccessibilityTokenMathTreePosition];
  if (sub_1000533F8(*(void **)(a1 + 32), v7))
  {
    objc_msgSend(*(id *)(a1 + 40), "addAttribute:value:range:", kSCROSelectionAttribute, kCFBooleanTrue, a3, a4);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a3;
    v9.NSUInteger location = a3;
    v9.NSUInteger length = a4;
    if (NSIntersectionRange(v9, *(NSRange *)*(void *)(a1 + 64)).length) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
  }
}

void sub_1000B9B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_1000B9BCC(void *a1, void *a2)
{
  id v4 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = a1[4];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v3 = a1[5];
    }
    else {
      uint64_t v3 = a1[6];
    }
  }
  ++*(void *)(*(void *)(v3 + 8) + 24);
}

void sub_1000B9DA4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v18 = a2;
  unint64_t v7 = *(void *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 40) + a3;
  unint64_t v9 = *(void *)(a1 + 56);
  BOOL v10 = v8 < v7 || v8 - v7 >= v9;
  if (!v10)
  {
    BOOL v10 = v8 >= v7;
    uint64_t v11 = v8 - v7;
    if (v10) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v12 + a4 > v9) {
      a4 = v9 - v12;
    }
    if ([(id)VOTSharedWorkspace brailleFormattingEnabled])
    {
      unsigned __int8 v13 = [v18 objectForKey:UIAccessibilityTokenBold];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v13 BOOLValue]) {
        objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", kSCROBoldTextAttribute, &__kCFBooleanTrue, v12, a4);
      }
      uint64_t v14 = [v18 objectForKey:UIAccessibilityTokenItalic];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v14 BOOLValue]) {
        objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", kSCROItalicTextAttribute, &__kCFBooleanTrue, v12, a4);
      }
      uint64_t v15 = [v18 objectForKey:UIAccessibilityTokenUnderline];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v15 BOOLValue]) {
        objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", kSCROUnderlineTextAttribute, &__kCFBooleanTrue, v12, a4);
      }
    }
    uint64_t v16 = [v18 objectForKey:UIAccessibilityInlineTextCompletion];
    if (v16) {
      objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", kSCROSuggestionTextAttribute, &__kCFBooleanTrue, v12, a4);
    }
    id v17 = [v18 objectForKey:UIAccessibilityTokenAttachment];
    if (v17) {
      objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", UIAccessibilityTokenAttachment, v17, v12, a4);
    }
  }
}

void sub_1000BCF90(_Unwind_Exception *a1)
{
}

void sub_1000BD110(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isTouchContainer];
  if (([*(id *)(a1 + 32) doesHaveTraits:kAXBackButtonTrait] & 1) != 0
    || ([*(id *)(a1 + 32) doesHaveTraits:kAXTextEntryTrait] & 1) != 0)
  {
    unsigned int v3 = 1;
  }
  else
  {
    unsigned int v3 = [*(id *)(a1 + 32) doesHaveTraits:kAXKeyboardKeyTrait];
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
    || *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    unsigned int v4 = !+[VOTVisionEngine elementNeedsAdditionalDescription:*(void *)(a1 + 32)];
  }
  else
  {
    unsigned int v4 = 0;
  }
  unsigned int v5 = [*(id *)(a1 + 32) doesHaveTraits:kAXPlaysSoundTrait];
  if (((v2 | v3) & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 56))
    {
      if ((v4 | v5)) {
        return;
      }
      goto LABEL_16;
    }
    if (*(unsigned char *)(a1 + 57)) {
      int v6 = v4;
    }
    else {
      int v6 = 1;
    }
    if (((v6 | v5) & 1) == 0)
    {
LABEL_16:
      id v10 = (id)objc_opt_new();
      unint64_t v7 = [(id)VOTSharedWorkspace elementManager];
      objc_msgSend(v10, "setIncludeFullImageDescriptionsForValidElements:", objc_msgSend(v7, "determineFullImageDescriptionsEnabled:", *(void *)(a1 + 32)));

      unint64_t v8 = [(id)VOTSharedWorkspace elementManager];
      objc_msgSend(v10, "setIncludeSceneDetection:", objc_msgSend(v8, "determineSceneDetectionsEnabled:", *(void *)(a1 + 32)));

      unint64_t v9 = [(id)VOTSharedWorkspace visionEngine];
      [v9 analyzeElement:*(void *)(a1 + 32) withOptions:v10];
    }
  }
}

id sub_1000BD2C8(id result)
{
  if (!*((unsigned char *)result + 64))
  {
    id v1 = result;
    Class result = [*((id *)result + 4) shouldAnnounceTableInfo];
    if (result)
    {
      unsigned int v2 = (void *)v1[4];
      uint64_t v3 = v1[5];
      uint64_t v5 = v1[6];
      uint64_t v4 = v1[7];
      return [v2 announceTableInfo:v3 options:v4 language:v5];
    }
  }
  return result;
}

void sub_1000BD320(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

void sub_1000BD334(void *a1, void *a2)
{
  id v7 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = a1[5];
LABEL_10:
    ++*(void *)(*(void *)(v3 + 8) + 24);
    goto LABEL_11;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = a1[6];
    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v3 = a1[7];
    goto LABEL_10;
  }
  uint64_t v4 = +[VOTWorkspace sharedWorkspace];
  uint64_t v5 = [v4 visionEngine];

  int v6 = [v5 resultsForElement:a1[4]];
  if ([v6 count]) {
    ++*(void *)(*(void *)(a1[7] + 8) + 24);
  }

LABEL_11:
}

id sub_1000BD458(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 importance];
  if (result != (id)1)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1000BD4A0(uint64_t a1)
{
  [*(id *)(a1 + 32) doesHaveTraits:kAXWebContentTrait];
  unsigned int v2 = [(id)VOTSharedWorkspace systemSpokenLanguage];
  uint64_t v3 = AXLanguageCanonicalFormToGeneralLanguage();

  if ([*(id *)(a1 + 32) doesHaveTraits:kAXStatusBarElementTrait])
  {
    uint64_t v4 = [*(id *)(a1 + 40) outputActions];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1000BD640;
    v9[3] = &unk_1001B62C0;
    id v10 = v3;
    [v4 enumerateObjectsUsingBlock:v9];
  }
  if ([*(id *)(a1 + 32) isReadingContent])
  {
    uint64_t v5 = [*(id *)(a1 + 40) outputActions];
    [v5 enumerateObjectsUsingBlock:&stru_1001B62E0];
  }
  int v6 = [*(id *)(a1 + 32) textualContext];
  if (v6)
  {
    id v7 = [*(id *)(a1 + 40) outputActions];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1000BD6D4;
    void v8[3] = &unk_1001B5888;
    v8[4] = v6;
    [v7 enumerateObjectsUsingBlock:v8];
  }
}

void sub_1000BD640(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = [v4 objectForVariant:15];
  LOBYTE(a1) = [v3 hasPrefix:*(void *)(a1 + 32)];

  if ((a1 & 1) == 0) {
    [v4 setObject:&stru_1001B7888 forVariant:16];
  }
}

void sub_1000BD6BC(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

id sub_1000BD6D4(uint64_t a1, void *a2)
{
  return [a2 setObject:*(void *)(a1 + 32) forVariant:79];
}

void sub_1000BD6E4(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 length])
  {
    id v3 = [*(id *)(a1 + 32) addString:v5 withLanguage:*(void *)(a1 + 40)];
    id v4 = [*(id *)(a1 + 32) lastAction];
    [v4 setIsVoiceOverGeneratedContent:1];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_1000BD770(uint64_t a1)
{
  unsigned int v2 = [(id)VOTSharedWorkspace elementManager];
  id v3 = [v2 elementRotor];
  id v4 = [v3 currentRotorType];

  if (v4 == (id)95)
  {
    id v5 = *(void **)(a1 + 32);
    int v6 = sub_100051D04(off_1001EA9F8, @"scribble.rotor.hint", 0, *(void **)(a1 + 40));
    id v7 = [v5 addString:v6 withLanguage:*(void *)(a1 + 40)];
  }
  unint64_t v8 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v8();
}

BOOL sub_1000BDA60(id a1, VOTCustomAction *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  unsigned __int8 v5 = [(VOTCustomAction *)v4 isMemberOfClass:objc_opt_class()];

  return v5;
}

BOOL sub_1000BDAAC(id a1, VOTCustomAction *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  unsigned __int8 v5 = [(VOTCustomAction *)v4 isMemberOfClass:objc_opt_class()];

  return v5;
}

void sub_1000BF0EC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v8 = a2;
  if (CGRectIsNull(*(CGRect *)&a2))
  {
    [*(id *)(a1 + 32) frame];
    double v8 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
  }
  uint64_t v14 = *(void *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "regionDescriptionWithFrame:", v8, a3, a4, a5);
  id v15 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v14 + 16))(v14, v15);
}

void sub_1000C0B3C(void *a1, double a2, double a3)
{
  unsigned __int8 v5 = [a1 handInfo];
  id v7 = [v5 paths];

  if ([v7 count] == (id)1)
  {
    int v6 = [v7 objectAtIndex:0];
    objc_msgSend(v6, "setPathLocation:", a2, a3);
  }
}

void sub_1000C0C68(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)VOTHandwritingManager) init];
  id v3 = (void *)qword_1001EBA58;
  qword_1001EBA58 = (uint64_t)v2;

  [(id)qword_1001EBA58 setDelegate:*(void *)(a1 + 32)];
  id v4 = [objc_alloc((Class)AXDispatchTimer) initWithTargetSerialQueue:&_dispatch_main_q];
  [v4 setAutomaticallyCancelPendingBlockUponSchedulingNewBlock:1];
  [*(id *)(a1 + 32) _setHandwritingCaptureTimer:v4];
}

void sub_1000C1738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id location)
{
  objc_destroyWeak(v34);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C1764(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = [a2 userInfo];
  id v3 = [v4 objectForKey:@"element"];
  [v2 _beginNativeSliding:v3];
}

void sub_1000C17D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(CFAbsoluteTime *)(*(void *)(a1 + 32) + 544) = CFAbsoluteTimeGetCurrent();
  *(unsigned char *)(*(void *)(a1 + 32) + 670) = 0;
  CGPoint v4 = CGPointZero;
  *(CGPoint *)(*(void *)(a1 + 32) + 376) = CGPointZero;
  *(CGPoint *)(*(void *)(a1 + 32) + 360) = v4;
  unsigned __int8 v5 = [v3 userInfo];

  int v6 = [v5 objectForKey:@"disabledOnTap"];
  unsigned __int8 v7 = [v6 BOOLValue];

  if ((v7 & 1) == 0)
  {
    id v8 = +[VOTElement systemWideElement];
    objc_msgSend(v8, "postFingerLiftAtPoint:withContextId:", 0, CGPointZero.x, CGPointZero.y);
  }
}

id sub_1000C18CC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleRotorChangedNotification:a2];
}

id sub_1000C18D8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleBSIStateChangedNotification:a2];
}

void sub_1000C18E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateDelayUntilSpeakUnderTouch];
}

void sub_1000C1924(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateTapSpeedFromPreferences];
}

void sub_1000C1964(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateVoiceOverHandGesturesActionCustomizations];
}

double sub_1000C1ACC(unint64_t a1)
{
  double v2 = *(double *)&qword_1001EBAC0;
  if (*(double *)&qword_1001EBAC0 == 0.0)
  {
    mach_timebase_info info = 0;
    if (mach_timebase_info(&info))
    {
      double v2 = *(double *)&qword_1001EBAC0;
    }
    else
    {
      LODWORD(v3) = info.numer;
      LODWORD(v4) = info.denom;
      double v2 = (double)v3 / (double)v4 * 0.000000001;
      qword_1001EBAC0 = *(void *)&v2;
    }
  }
  return v2 * (double)a1;
}

id sub_1000C263C(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetEventFactory];
}

uint64_t sub_1000C2844(uint64_t result, int a2)
{
  *(unsigned char *)(*(void *)(result + 32) + 824) = a2 != 0;
  return result;
}

void sub_1000C2D8C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000C2DBC(id a1, AXEventRepresentation *a2)
{
  unint64_t v4 = a2;
  if ([(AXEventRepresentation *)v4 type] == 3001)
  {
    BKSHIDServicesCancelTouchesOnMainDisplay();
    double v2 = +[AXEventRepresentation cancelEventForPathIndexMask:[(AXEventRepresentation *)v4 pathIndexMask]];
    unint64_t v3 = +[AXEventTapManager sharedManager];
    [v3 sendHIDSystemEvent:v2 senderID:0x8000000817319373];
  }
}

id sub_1000C2E64(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 40))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v6 = [WeakRetained _audioAccessoryEventFilter:v3];
  }
  else
  {
    int v7 = *(unsigned __int8 *)(a1 + 41);
    id v8 = objc_loadWeakRetained((id *)(a1 + 32));
    id WeakRetained = v8;
    if (v7) {
      id v6 = [v8 _atvEventFilter:v3];
    }
    else {
      id v6 = [v8 _iosEventFilter:v3];
    }
  }
  id v9 = v6;

  return v9;
}

void sub_1000C3000(uint64_t a1, void *a2)
{
  id v15 = a2;
  id v3 = +[AXSettings sharedInstance];
  unint64_t v4 = [v3 zoomCurrentLensMode];
  unsigned int v5 = [v4 isEqualToString:AXZoomLensModeFullscreen];

  if (v5)
  {
    id v6 = [v15 objectForKey:ZWAttributeKeyZoomLevel];
    [v6 floatValue];
    int v8 = v7;

    id v9 = [v15 objectForKey:ZWAttributeKeyZoomFrame];
    CGRect v17 = CGRectFromString(v9);
    CGFloat x = v17.origin.x;
    CGFloat y = v17.origin.y;
    CGFloat width = v17.size.width;
    CGFloat height = v17.size.height;

    *(CGFloat *)&xmmword_1001EBA90 = x;
    *((CGFloat *)&xmmword_1001EBA90 + 1) = y;
    qword_1001EBAA0 = *(void *)&width;
    unk_1001EBAA8 = *(void *)&height;
  }
  else
  {
    CGSize size = CGRectNull.size;
    xmmword_1001EBA90 = (__int128)CGRectNull.origin;
    *(CGSize *)&qword_1001EBAA0 = size;
    int v8 = 0;
  }
  dword_1001EBA68 = v8;
  [*(id *)(a1 + 32) _commitDeferredZoomInfoIfAppropriate];
}

id sub_1000C3140(uint64_t a1, void *a2)
{
  return [a2 _registerForZoomListener];
}

void sub_1000C3AF0()
{
  [(id)VOTSharedWorkspace handleSystemWideServerDied];
}

void sub_1000C3B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  if ((int)a3 <= 1030)
  {
    if ((int)a3 > 1018)
    {
      if (a3 == 1019)
      {
        [(id)VOTSharedWorkspace resetSystemBatteryLowState];
        goto LABEL_24;
      }
      if (a3 == 1028)
      {
        [v8 _handleEventWithData:a4];
        goto LABEL_24;
      }
    }
    else
    {
      if (a3 == 1011)
      {
        [(id)VOTSharedWorkspace handleOrientationChanged];
        [v8 updateOrientation];
        goto LABEL_24;
      }
      if (a3 == 1015)
      {
        [(id)VOTSharedWorkspace handleReturnToSpringBoard];
        goto LABEL_24;
      }
    }
    goto LABEL_22;
  }
  if ((int)a3 <= 1050)
  {
    if (a3 == 1031)
    {
      [v8 _handleKeyboardVisibilityChanged:a4];
      goto LABEL_24;
    }
    if (a3 == 1045)
    {
      [v8 _handleElementPreviewNotification:a4];
      double v10 = [v8 elementManager];
      [v10 handleNotification:1045 withData:a4 forElement:0];
LABEL_23:

      goto LABEL_24;
    }
LABEL_22:
    double v10 = [v8 elementManager];
    [v10 handleNotification:a3 withData:a4 forElement:a2];
    goto LABEL_23;
  }
  if (a3 == 1051)
  {
    [v8 _simulatePreviewActionGesture];
    goto LABEL_24;
  }
  if (a3 == 2027)
  {
    [(id)VOTSharedWorkspace handleRingerSwitchSwitched:0];
    goto LABEL_24;
  }
  if (a3 != 3030) {
    goto LABEL_22;
  }
  [v8 _handleSOSMedicalIDShown];
LABEL_24:
}

id sub_1000C6924(uint64_t a1)
{
  return _[*(id *)(a1 + 32) recognizeAndResetSession];
}

id sub_1000C7AB4(uint64_t a1)
{
  double v2 = (CGPoint **)(a1 + 32);
  *(CGPoint *)(*(void *)(a1 + 32) + 56) = CGPointZero;
  (*v2)[3].CGFloat x = CFAbsoluteTimeGetCurrent();
  id v3 = *v2;
  double v4 = 1.0;
  if (!*((unsigned char *)v2 + 24))
  {
    if (*(unsigned char *)(a1 + 57)) {
      double v4 = *(double *)(a1 + 48);
    }
    else {
      double v4 = 0.0;
    }
  }
  *(void *)&v3[2].CGFloat x = v2[1];
  v3[2].CGFloat y = v4;
  unsigned int v5 = VOTLogEvent();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_1001218C0(v2);
  }

  return [(CGPoint *)*v2 _transitionToGestureState:1];
}

void sub_1000C967C(id a1)
{
  v4[0] = kVOTEventCommandSearchRotorLeft;
  v4[1] = kVOTEventCommandSearchRotorRight;
  v4[2] = kVOTEventCommandEscape;
  v4[3] = kVOTEventCommandCut;
  v4[4] = kVOTEventCommandCopy;
  v4[5] = kVOTEventCommandPaste;
  v4[6] = kVOTEventCommandUndo;
  v4[7] = kVOTEventCommandRedo;
  void v4[8] = kVOTEventCommandBSIExit;
  v4[9] = kVOTEventCommandBSIPreviousRotor;
  v4[10] = kVOTEventCommandBSINextRotor;
  v4[11] = kVOTEventCommandBSIEscape;
  v4[12] = kVOTEventCommandPreviousTextSegment;
  v4[13] = kVOTEventCommandNextTextSegment;
  v4[14] = kVOTEventCommandPreviousTextSegmentType;
  v4[15] = kVOTEventCommandNextTextSegmentType;
  v4[16] = kVOTEventCommandSelectLeft;
  v4[17] = kVOTEventCommandSelectRight;
  uint64_t v1 = +[NSArray arrayWithObjects:v4 count:18];
  uint64_t v2 = +[NSSet setWithArray:v1];
  id v3 = (void *)qword_1001EBAB0;
  qword_1001EBAB0 = v2;
}

uint64_t sub_1000C9954(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 848)];
  if ((result & 1) == 0)
  {
    id v3 = [*(id *)(a1 + 32) copyWithCache];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(v4 + 848);
    *(void *)(v4 + 84_Block_object_dispose(&STACK[0x310], 8) = v3;
    return _objc_release_x1(v3, v5);
  }
  return result;
}

void sub_1000C9AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C9AC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000C9AD0(uint64_t a1)
{
}

void sub_1000C9AD8(uint64_t a1)
{
}

void sub_1000CA950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CA978(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 560) removeAllObjects];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 560);
  id v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  [v2 addObject:v3];

  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 560);
  id v5 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 44)];
  [v4 addObject:v5];
}

void sub_1000CAA20(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained[22];
  id v3 = +[NSValue valueWithPoint:](NSValue, "valueWithPoint:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  uint64_t v4 = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  id v5 = +[NSNumber numberWithDouble:*(double *)(a1 + 64)];
  id v6 = +[NSNumber numberWithDouble:*(double *)(a1 + 72)];
  objc_msgSend(WeakRetained, "performSelector:withThreadKey:count:objects:", "_startTouchDownForTapAndHoldActionWithCenter:force:altitude:azimuth:", v2, 4, v3, v4, v5, v6);

  int v7 = +[VOTOutputManager outputManager];
  [v7 removeVOSEventFinishedHandler:@"PassThroughHandler"];
}

void sub_1000CB938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CB950(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 560) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_1000CC3D8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) elementManager];
  [v1 updateCursorFrameAfterLift];
}

void sub_1000CC8A4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) directInteractionKeyboardManager];
  [v1 updateTypingMode];
}

id sub_1000CD358(uint64_t a1)
{
  return [*(id *)(a1 + 32) _liftPreviewFinger];
}

id sub_1000CD6B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _liftPreviewFinger];
}

void sub_1000CDBA4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 560) removeAllObjects];
  id v2 = *(void **)(*(void *)(a1 + 32) + 560);
  uint64_t v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  [v2 addObject:v3];

  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 560);
  id v5 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 44)];
  [v4 addObject:v5];
}

id sub_1000CE514(uint64_t a1)
{
  return [*(id *)(a1 + 32) processEvent:*(void *)(a1 + 40)];
}

id sub_1000CE62C(uint64_t a1)
{
  return [*(id *)(a1 + 32) processEvent:*(void *)(a1 + 40)];
}

id sub_1000CE744(uint64_t a1)
{
  return [*(id *)(a1 + 32) processEvent:*(void *)(a1 + 40)];
}

void sub_1000CFB5C(id a1)
{
  id v1 = [objc_allocWithZone((Class)VOTBrailleManager) init];
  uint64_t v2 = qword_1001EBAC8;
  qword_1001EBAC8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000D0490(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

id sub_1000D04D8(uint64_t a1, void *a2, uint64_t a3)
{
  return [a2 performSelector:"handleSettingsChange:" withObject:a3 afterDelay:0.5];
}

id sub_1000D04F0(uint64_t a1, void *a2)
{
  return [a2 performSelector:"updatePrefersNonBlinkingCursorIndicatorPrefs" withObject:0 afterDelay:0.5];
}

void sub_1000D0508(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateBrailleInputSettings];
}

void sub_1000D0548(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateBrailleInputSettings];
}

void sub_1000D0588(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateBrailleOutputSettings];
}

void sub_1000D05C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateOnscreenKeyboardSettings];
}

void sub_1000D0608(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateStatusCellPrefs];
}

void sub_1000D0648(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateStatusCellPrefs];
}

void sub_1000D0688(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateWordWrapPrefs];
}

void sub_1000D06C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateBrailleKeyDebouncePrefs];
}

void sub_1000D0708(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = +[AXSettings sharedInstance];
  objc_msgSend(WeakRetained, "setTestingHasActiveDisplay:", objc_msgSend(v1, "voiceOverTouchUpdateBrailleWithoutConnectedDisplay"));
}

void sub_1000D0774(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateBrailleAutoAdvancePrefs];
}

void sub_1000D07B4(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000DBFD4;
  block[3] = &unk_1001B3580;
  block[4] = a2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_1000D0A54(uint64_t a1, void *a2)
{
  uint64_t v3 = VOTLogBraille();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received SCRODisplayConfigurationChangedNotification.", v5, 2u);
  }

  return [a2 handleBrailleConfigurationChanged:&__kCFBooleanTrue];
}

BOOL sub_1000D1688(id a1, NSDictionary *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = VOSBrailleTableForRotorItem();
  id v5 = [v4 replacements];
  BOOL v6 = [v5 count] == 0;

  return v6;
}

BOOL sub_1000D3424(id a1, NSDictionary *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = VOSBrailleTableForRotorItem();
  id v5 = [v4 replacements];
  BOOL v6 = [v5 count] == 0;

  return v6;
}

uint64_t sub_1000D48F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  uint64_t v4 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000D49E8;
  v7[3] = &unk_1001B6688;
  v7[4] = &v8;
  objc_msgSend(v4, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, objc_msgSend(v4, "length"), 0, v7);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_1000D49D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000D49E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  id result = [a2 BOOLValue];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

uint64_t sub_1000D4A2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  uint64_t v4 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000D4B20;
  v7[3] = &unk_1001B6688;
  v7[4] = &v8;
  objc_msgSend(v4, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, objc_msgSend(v4, "length"), 0, v7);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_1000D4B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D4B20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  if (a2)
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

uint64_t sub_1000D4B3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  uint64_t v4 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000D4C30;
  v7[3] = &unk_1001B6688;
  v7[4] = &v8;
  objc_msgSend(v4, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, objc_msgSend(v4, "length"), 0, v7);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_1000D4C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000D4C30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  id result = [a2 intValue];
  if ((int)result >= 1)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

void sub_1000D68A8(id a1)
{
  id v1 = +[NSNotificationCenter defaultCenter];
  [v1 postNotificationName:@"VOTBrailleDisplayActiveStateChanged" object:0];
}

void sub_1000D6DE8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 keyString];
  if (v2) {
    id v3 = (__CFString *)v2;
  }
  else {
    id v3 = &stru_1001B7888;
  }
  uint64_t v4 = +[VOTBrailleTerminalManager sharedManager];
  id v5 = [v4 state];

  if (v5 == (id)1)
  {
    BOOL v6 = +[VOTBrailleTerminalManager sharedManager];
    [v6 commandInsertString:v3];
LABEL_35:

    goto LABEL_36;
  }
  unsigned int v7 = [v1 modifiers];
  if ([(__CFString *)v3 length] || v7 != kBRLTBrailleKeyboardKeyModifierNull)
  {
    int v8 = kBRLTBrailleKeyboardKeyModifierShift;
    int v9 = kBRLTBrailleKeyboardKeyModifierShift & v7;
    int v10 = ((kBRLTBrailleKeyboardKeyModifierCommand & ~v7) == 0) | (8
                                                                 * ((kBRLTBrailleKeyboardKeyModifierShift & v7) == kBRLTBrailleKeyboardKeyModifierShift));
    if ((kBRLTBrailleKeyboardKeyModifierOption & ~v7) == 0) {
      v10 |= 2u;
    }
    if ((kBRLTBrailleKeyboardKeyModifierControl & ~v7) == 0) {
      v10 |= 4u;
    }
    if ((kBRLTBrailleKeyboardKeyModifierSecondaryFn & ~v7) == 0) {
      v10 |= 0x40u;
    }
    unsigned int v31 = v10;
    if ([(__CFString *)v3 length])
    {
      char v11 = (char *)[(__CFString *)v3 length];
      if (v11)
      {
        double v12 = v11;
        double v13 = 0;
        uint64_t v14 = 0;
        id v15 = v11 - 1;
        do
        {
          uint64_t v16 = v3;
          CGRect v17 = -[__CFString substringWithRange:](v3, "substringWithRange:", v14, 1);
          id v18 = v17;
          if (v9 == v8)
          {
            id v19 = [v17 uppercaseString];
          }
          else
          {
            id v19 = v17;
          }
          BOOL v6 = v19;

          if (v14 < v15)
          {
            long long v20 = (char *)[(id)VOTSharedWorkspace suppressValueChangeNotificationCount];
            [(id)VOTSharedWorkspace setSuppressValueChangeNotificationCount:v20 + 1];
            uint64_t v21 = (char *)[(id)VOTSharedWorkspace suppressSelectionChangeNotificationCount];
            [(id)VOTSharedWorkspace setSuppressSelectionChangeNotificationCount:v21 + 1];
          }
          objc_msgSend((id)VOTSharedWorkspace, "postKeyboardEventWithCharacters:originalCharacters:modifiers:keyCode:", v6, v18, v31, (unsigned __int16)objc_msgSend(v1, "keyCode"));

          ++v14;
          double v13 = v6;
          id v3 = v16;
        }
        while (v12 != v14);
      }
      else
      {
        BOOL v6 = 0;
      }
    }
    else
    {
      if (v9 == v8)
      {
        id v22 = [(__CFString *)v3 uppercaseString];
      }
      else
      {
        id v22 = v3;
      }
      BOOL v6 = v22;
      objc_msgSend((id)VOTSharedWorkspace, "postKeyboardEventWithCharacters:originalCharacters:modifiers:keyCode:", v22, v3, v31, (unsigned __int16)objc_msgSend(v1, "keyCode"));
    }
    double v23 = +[AXSubsystemBrailleHardware sharedInstance];
    unsigned __int8 v24 = [v23 ignoreLogging];

    if ((v24 & 1) == 0)
    {
      id v25 = +[AXSubsystemBrailleHardware identifier];
      unsigned int v26 = AXLoggerForFacility();

      os_log_type_t v27 = AXOSLogLevelFromAXLogLevel();
      if (os_log_type_enabled(v26, v27))
      {
        int v28 = AXColorizeFormatLog();
        unsigned __int8 v29 = v3;
        id v30 = _AXStringForArgs();
        if (os_log_type_enabled(v26, v27))
        {
          *(_DWORD *)buf = 138543362;
          CGRect v33 = v30;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}@", buf, 0xCu);
        }

        id v3 = v29;
      }
    }
    goto LABEL_35;
  }
LABEL_36:
}

void sub_1000D7A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

id sub_1000D7A94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  id result = [a2 integerValue];
  if (result == (id)1)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
    *a5 = 1;
  }
  return result;
}

void sub_1000D830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1000D8334(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v12 = a3;
  if ([*(id *)(a1 + 32) isEqualToString:a2])
  {
    objc_msgSend(*(id *)(*(void *)(a1 + 40) + 168), "setPersistentKeyModifiers:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 168), "persistentKeyModifiers") ^ objc_msgSend(v12, "unsignedIntegerValue"));
    unsigned int v7 = objc_alloc_init(VOTOutputRequest);
    int v8 = off_1001EA9E8;
    int v9 = [*(id *)(a1 + 48) objectForKey:v12];
    int v10 = sub_100051804(v8, v9, 0);
    id v11 = [(VOTOutputRequest *)v7 addString:v10];

    [(VOTOutputRequest *)v7 setGeneratesBraille:1];
    [(VOTOutputRequest *)v7 setBrailleType:2];
    [(VOTOutputRequest *)v7 send];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_1000D8464(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v20 = a3;
  if ([*(id *)(a1 + 32) isEqualToString:a2])
  {
    unsigned int v7 = [*(id *)(*(void *)(a1 + 40) + 168) persistentKeyModifiers];
    *(_DWORD *)(*(void *)(a1 + 40) + 200) ^= [v20 unsignedIntegerValue];
    uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 40) + 200);
    unint64_t v9 = (unint64_t)[v20 unsignedIntegerValue] & v8;
    id v10 = [v20 unsignedIntegerValue];
    unsigned int v11 = [v20 unsignedIntegerValue];
    BOOL v12 = v9 == (void)v10;
    if ((id)v9 == v10) {
      CFStringRef v13 = @".on";
    }
    else {
      CFStringRef v13 = @".off";
    }
    if (v12) {
      uint64_t v14 = v7 | v11;
    }
    else {
      uint64_t v14 = v7 & ~v11;
    }
    [*(id *)(*(void *)(a1 + 40) + 168) setPersistentKeyModifiers:v14];
    id v15 = objc_alloc_init(VOTOutputRequest);
    uint64_t v16 = [*(id *)(a1 + 48) objectForKey:v20];
    CGRect v17 = [v16 stringByAppendingString:v13];

    id v18 = sub_100051804(off_1001EA9E8, v17, 0);
    id v19 = [(VOTOutputRequest *)v15 addString:v18];

    [(VOTOutputRequest *)v15 setGeneratesBraille:1];
    [(VOTOutputRequest *)v15 setBrailleType:2];
    [(VOTOutputRequest *)v15 send];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_1000D8D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D8DDC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000D8DEC(uint64_t a1)
{
}

uint64_t sub_1000D8DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) length];
  id v5 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) stringByTrimmingCharactersInSet:v3];
  unsigned int v6 = [(id)VOTSharedWorkspace inUnitTestMode];
  uint64_t v7 = 216;
  if (v6) {
    uint64_t v7 = 376;
  }
  id v8 = *(id *)(*(void *)(a1 + 32) + v7);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v9 = v8;
  id v10 = [v9 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v10)
  {
    id v11 = v10;
    os_log_type_t v27 = v4;
    uint64_t v12 = *(void *)v29;
    while (2)
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v29 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        id v15 = [v14 shortcut];
        id v16 = [v15 compare:v5 options:129];

        if (!v16)
        {
          id v18 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          id v19 = [v14 phrase];
          uint64_t v20 = [v18 stringByReplacingOccurrencesOfString:v5 withString:v19];
          uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
          id v22 = *(void **)(v21 + 40);
          *(void *)(v21 + 40) = v20;

          unint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          unsigned __int8 v24 = [*(id *)(a1 + 40) value];
          id v25 = &v27[(void)[v24 length]];

          if (v23 <= (unint64_t)v25) {
            *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += (unsigned char *)[*(id *)(*(void *)(*(void *)(a1 + 48) + 8)+ 40) length]- v27;
          }
          uint64_t v17 = 1;
          goto LABEL_15;
        }
      }
      id v11 = [v9 countByEnumeratingWithState:&v28 objects:v32 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }
  uint64_t v17 = 0;
LABEL_15:

  return v17;
}

void sub_1000D9664(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  LODWORD(v5) = 0.75;
  id v6 = +[NSNumber numberWithFloat:v5];
  [(VOTOutputAction *)v4 setObject:v6 forVariant:32];
}

void sub_1000D96D4(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

id sub_1000DA118(uint64_t a1)
{
  return [*(id *)(a1 + 32) setPanEnabled:1];
}

id sub_1000DA2C4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) setPersistentKeyModifiers:*(unsigned int *)(a1 + 40)];
}

id sub_1000DA3F8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) setLastUserInteractionTime:*(double *)(a1 + 40)];
}

id sub_1000DA4AC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) setBrailleMap:*(void *)(a1 + 40)];
}

NSNumber *sub_1000DA558(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(a1 + 32) + 168) persistentKeyModifiers];

  return +[NSNumber numberWithUnsignedInt:v1];
}

NSString *sub_1000DB334(uint64_t a1)
{
  v1.NSUInteger location = (NSUInteger)[*(id *)(*(void *)(a1 + 32) + 168) rangeOfCellRepresentingCharacterAtIndex:*(void *)(a1 + 40)];

  return NSStringFromRange(v1);
}

void sub_1000DB508(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 224);
  *(void *)(v1 + 224) = 0;
}

id sub_1000DB8F0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) setPlanarData:*(void *)(a1 + 40)];
}

void sub_1000DBB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DBB70(id a1)
{
  v3[0] = &off_1001C5F38;
  v3[1] = &off_1001C5F68;
  v4[0] = &off_1001C5F50;
  v4[1] = &off_1001C5F80;
  void v3[2] = &off_1001C5F98;
  v3[3] = &off_1001C5FC8;
  v4[2] = &off_1001C5FB0;
  v4[3] = &off_1001C5FE0;
  void v3[4] = &off_1001C5FF8;
  void v3[5] = &off_1001C6028;
  v4[4] = &off_1001C6010;
  v4[5] = &off_1001C6040;
  v3[6] = &off_1001C6058;
  v3[7] = &off_1001C6088;
  v4[6] = &off_1001C6070;
  v4[7] = &off_1001C60A0;
  v3[8] = &off_1001C60B8;
  void v4[8] = &off_1001C60D0;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:9];
  uint64_t v2 = (void *)qword_1001EBAD8;
  qword_1001EBAD8 = v1;
}

uint64_t sub_1000DBC9C(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 168);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    return (uint64_t)_[v3 systemVirtualDisplayPressKeyChord:v4];
  }
  return result;
}

id sub_1000DBFD4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) textShortcutsDidChange];
}

uint64_t sub_1000DBFDC(void *a1, int a2)
{
  id v3 = a1;
  uint64_t v4 = +[VOTKeyboardManager keyboardManager];
  unsigned __int8 v5 = [v4 modifierKeyLockEnabled];

  if ((v5 & 1) != 0
    || ([(id)VOTSharedWorkspace elementManager],
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        [(id)VOTSharedWorkspace currentElement],
        id v8 = objc_claimAutoreleasedReturnValue(),
        unsigned int v9 = [v7 modifierKeyChoiceForElement:v8],
        v8,
        v7,
        (v9 & 1) != 0)
    && [v3 isOptionKeyPressed]
    && ([v3 isControlKeyPressed] & 1) != 0)
  {
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = a2 & (v9 >> 1);
  }

  return v6;
}

void sub_1000DD1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DD254(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained[22];

  return v2;
}

unint64_t sub_1000DD284(id a1, VOSCommandResolver *a2)
{
  uint64_t v2 = [(id)VOTSharedWorkspace currentElement];
  unint64_t v3 = 2;
  if (([v2 containedIn:2] & 1) == 0) {
    unint64_t v3 = [v2 doesHaveTraits:kAXTextEntryTrait];
  }

  return v3;
}

uint64_t sub_1000DD2E8(uint64_t a1, unint64_t a2)
{
  id WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 40));
  unsigned __int8 v5 = WeakRetained;
  if (a2 <= 1 && WeakRetained[22] >= 2)
  {
    uint64_t v7 = WeakRetained;
    id WeakRetained = (uint64_t *)[*(id *)(a1 + 32) length];
    unsigned __int8 v5 = v7;
    if (WeakRetained) {
      v7[22] = 1;
    }
  }

  return _objc_release_x1(WeakRetained, v5);
}

id sub_1000DE890(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 152) performSelector:"_speakCapsLockKey" onTarget:*(void *)(a1 + 32) count:0 objects:0];
}

id sub_1000DF00C(uint64_t a1)
{
  [*(id *)(a1 + 32) lastVolumeDownButtonUpTime];
  double v3 = v2;
  id result = [*(id *)(a1 + 32) lastVolumeDownButtonDownTime];
  if (v3 - v5 >= 0.75)
  {
    [*(id *)(a1 + 32) lastVolumeDownButtonDownTime];
    double v7 = v6;
    id result = [*(id *)(a1 + 32) lastVolumeUpButtonDownTime];
    if (vabdd_f64(v7, v8) <= 0.25)
    {
      [*(id *)(a1 + 32) lastVolumeDownButtonUpTime];
      double v10 = v9;
      id result = [*(id *)(a1 + 32) lastVolumeUpButtonUpTime];
      if (vabdd_f64(v10, v11) <= 0.25)
      {
        uint64_t v12 = *(void **)(a1 + 32);
        return _[v12 _resetSoundAndScreenCurtain];
      }
    }
  }
  return result;
}

id sub_1000E0538(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateTypingMode];
}

id sub_1000E0A58(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleShiftLock:a2];
}

id sub_1000E0A64(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleShift:a2];
}

id sub_1000E0A70(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleTypingEnter:a2];
}

id sub_1000E0A7C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleTypingPeriod:a2];
}

id sub_1000E0A88(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleCommitTyping:a2];
}

id sub_1000E0A94(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleDelete:a2];
}

id sub_1000E0AA0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleSuggestionSelection:a2];
}

id sub_1000E0AAC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleSuggestionSelection:a2];
}

id sub_1000E0AB8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleKeyplaneSelection:a2];
}

id sub_1000E0AC4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleKeyplaneSelection:a2];
}

id sub_1000E0AD0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleKeyboardSelection:a2];
}

id sub_1000E0B88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateTypingMode];
}

id sub_1000E0C44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateKeyboardElement];
}

void sub_1000E13F0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 directInteractionModeStatus:*(unsigned __int8 *)(*(void *)(a1 + 32) + 32)];
}

uint64_t sub_1000E1BB0(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_1001EBB28;
  qword_1001EBB28 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_1000E5460(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id sub_1000E5DCC(void *a1)
{
  id v1 = [a1 stringByReplacingOccurrencesOfString:@"pageup" withString:@"⇞"];
  uint64_t v2 = [v1 stringByReplacingOccurrencesOfString:@"pagedown" withString:@"⇟"];

  double v3 = [v2 stringByReplacingOccurrencesOfString:@"home" withString:@"⇱"];

  uint64_t v4 = [v3 stringByReplacingOccurrencesOfString:@"end" withString:@"⇲"];

  double v5 = [v4 stringByReplacingOccurrencesOfString:@"shift" withString:@"⇧"];

  double v6 = [v5 stringByReplacingOccurrencesOfString:@"control" withString:@"⌃"];

  double v7 = [v6 stringByReplacingOccurrencesOfString:@"option" withString:@"⌥"];

  double v8 = [v7 stringByReplacingOccurrencesOfString:@"command" withString:@"⌘"];

  uint64_t v9 = [v8 stringByReplacingOccurrencesOfString:@"left" withString:@"←"];

  double v10 = [v9 stringByReplacingOccurrencesOfString:@"right" withString:@"→"];

  double v11 = [v10 stringByReplacingOccurrencesOfString:@"up" withString:@"↑"];

  uint64_t v12 = [v11 stringByReplacingOccurrencesOfString:@"down" withString:@"↓"];

  CFStringRef v13 = [v12 stringByReplacingOccurrencesOfString:@"esc" withString:@"⎋"];

  uint64_t v14 = [v13 stringByReplacingOccurrencesOfString:@"tab" withString:@"⇥"];

  id v15 = [v14 stringByReplacingOccurrencesOfString:@"capslock" withString:@"⇪"];

  id v16 = [v15 stringByReplacingOccurrencesOfString:@" " withString:@"␣"];

  uint64_t v17 = [v16 stringByReplacingOccurrencesOfString:@"return" withString:@"⏎"];

  id v18 = [v17 stringByReplacingOccurrencesOfString:@"backspace" withString:@"⌫"];

  id v19 = [v18 stringByReplacingOccurrencesOfString:@"delete" withString:@"⌦"];

  uint64_t v20 = [v19 stringByReplacingOccurrencesOfString:@"fn" withString:@"Fn"];

  uint64_t v21 = [v20 stringByReplacingOccurrencesOfString:@"f1" withString:@"F1"];

  id v22 = [v21 stringByReplacingOccurrencesOfString:@"f2" withString:@"F2"];

  unint64_t v23 = [v22 stringByReplacingOccurrencesOfString:@"f3" withString:@"F3"];

  unsigned __int8 v24 = [v23 stringByReplacingOccurrencesOfString:@"f4" withString:@"F4"];

  id v25 = [v24 stringByReplacingOccurrencesOfString:@"f5" withString:@"F5"];

  unsigned int v26 = [v25 stringByReplacingOccurrencesOfString:@"f6" withString:@"F6"];

  os_log_type_t v27 = [v26 stringByReplacingOccurrencesOfString:@"f7" withString:@"F7"];

  long long v28 = [v27 stringByReplacingOccurrencesOfString:@"f8" withString:@"F8"];

  long long v29 = [v28 stringByReplacingOccurrencesOfString:@"f9" withString:@"F9"];

  long long v30 = [v29 stringByReplacingOccurrencesOfString:@"f10" withString:@"F10"];

  long long v31 = [v30 stringByReplacingOccurrencesOfString:@"f11" withString:@"F11"];

  CGRect v32 = [v31 stringByReplacingOccurrencesOfString:@"f12" withString:@"F12"];

  CGRect v33 = +[AXSSKeyChord keyChordWithString:v32];

  return v33;
}

void sub_1000E6418(id a1)
{
  id v1 = [objc_allocWithZone((Class)VOTExternalAccessoryManager) init];
  uint64_t v2 = qword_1001EBB30;
  qword_1001EBB30 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000E65F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000E6610()
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1001EBB60;
  uint64_t v7 = qword_1001EBB60;
  if (!qword_1001EBB60)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1000EA730;
    v3[3] = &unk_1001B3FE0;
    void v3[4] = &v4;
    sub_1000EA730((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000E66DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E66F4(int a1, void *a2, CFTypeRef cf1)
{
  uint64_t result = CFEqual(cf1, kAXSVoiceOverTouchEnabledThroughAccessoryNotification);
  if (result)
  {
    return (uint64_t)_[a2 _accessoryWantsStop:0];
  }
  return result;
}

void sub_1000E6B20(id a1)
{
}

id sub_1000E6BBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleAccessoryShutdown];
}

void sub_1000E6C88(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  uint64_t v17 = 0;
  id v18 = &v17;
  uint64_t v19 = 0x2020000000;
  double v3 = (void *)qword_1001EBB78;
  uint64_t v20 = qword_1001EBB78;
  if (!qword_1001EBB78)
  {
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    id v22 = sub_1000EA944;
    unint64_t v23 = &unk_1001B3FE0;
    unsigned __int8 v24 = &v17;
    uint64_t v4 = (void *)sub_1000EA788();
    double v5 = dlsym(v4, "EAAccessoryKey");
    *(void *)(v24[1] + 24) = v5;
    qword_1001EBB78 = *(void *)(v24[1] + 24);
    double v3 = (void *)v18[3];
  }
  _Block_object_dispose(&v17, 8);
  if (!v3) {
    sub_10012253C();
  }
  uint64_t v6 = [v2 objectForKey:*v3];

  if ([v6 supportsAccessibility])
  {
    [v6 setDelegate:*(void *)(a1 + 40)];
    uint64_t v7 = objc_getAssociatedObject(v6, &unk_1001EBB40);
    unsigned __int8 v8 = [v7 BOOLValue];

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = +[NSNumber numberWithBool:1];
      [v6 updateSystemProperty:1 withValue:v9];
    }
    double v10 = +[AXSubsystemVoiceOverIAP sharedInstance];
    unsigned __int8 v11 = [v10 ignoreLogging];

    if ((v11 & 1) == 0)
    {
      uint64_t v12 = +[AXSubsystemVoiceOverIAP identifier];
      CFStringRef v13 = AXLoggerForFacility();

      os_log_type_t v14 = AXOSLogLevelFromAXLogLevel();
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = AXColorizeFormatLog();
        id v16 = _AXStringForArgs();
        if (os_log_type_enabled(v13, v14))
        {
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v16;
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}@", (uint8_t *)&buf, 0xCu);
        }
      }
    }
  }
}

void sub_1000E6F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E6FEC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) supportsAccessibility]) {
    [*(id *)(a1 + 32) setDelegate:0];
  }
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v2 = [sub_1000E6610() sharedAccessoryManager];
  double v3 = [v2 connectedAccessories];

  id v4 = [v3 countByEnumeratingWithState:&v33 objects:v39 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v34;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v34 != v6) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v33 + 1) + 8 * i) supportsAccessibility])
        {
          int v8 = 0;
          goto LABEL_13;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v33 objects:v39 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  int v8 = 1;
LABEL_13:

  uint64_t v9 = +[AXSubsystemVoiceOverIAP sharedInstance];
  unsigned __int8 v10 = [v9 ignoreLogging];

  if ((v10 & 1) == 0)
  {
    unsigned __int8 v11 = +[AXSubsystemVoiceOverIAP identifier];
    uint64_t v12 = AXLoggerForFacility();

    os_log_type_t v13 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = AXColorizeFormatLog();
      uint64_t v31 = *(void *)(a1 + 32);
      id v15 = _AXStringForArgs();
      if (os_log_type_enabled(v12, v13))
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v38 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}@", buf, 0xCu);
      }
    }
  }
  id v16 = +[AXSubsystemVoiceOverIAP sharedInstance];
  unsigned __int8 v17 = [v16 ignoreLogging];

  if ((v17 & 1) == 0)
  {
    id v18 = +[AXSubsystemVoiceOverIAP identifier];
    uint64_t v19 = AXLoggerForFacility();

    os_log_type_t v20 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = AXColorizeFormatLog();
      id v22 = [sub_1000E6610() sharedAccessoryManager];
      CGRect v32 = [v22 connectedAccessories];
      unint64_t v23 = _AXStringForArgs();

      if (os_log_type_enabled(v19, v20))
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v38 = v23;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}@", buf, 0xCu);
      }
    }
  }
  unsigned __int8 v24 = +[AXSubsystemVoiceOverIAP sharedInstance];
  unsigned __int8 v25 = [v24 ignoreLogging];

  if ((v25 & 1) == 0)
  {
    unsigned int v26 = +[AXSubsystemVoiceOverIAP identifier];
    os_log_type_t v27 = AXLoggerForFacility();

    os_log_type_t v28 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v27, v28))
    {
      long long v29 = AXColorizeFormatLog();
      _AXSVoiceOverTouchEnabledThroughAccessory();
      long long v30 = _AXStringForArgs();
      if (os_log_type_enabled(v27, v28))
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v38 = v30;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}@", buf, 0xCu);
      }
    }
  }
  if (v8) {
    [*(id *)(a1 + 40) _handleAccessoryShutdown];
  }
}

id sub_1000E7478(uint64_t a1)
{
  uint64_t v2 = +[AXSubsystemVoiceOverIAP sharedInstance];
  unsigned __int8 v3 = [v2 ignoreLogging];

  if ((v3 & 1) == 0)
  {
    id v4 = +[AXSubsystemVoiceOverIAP identifier];
    id v5 = AXLoggerForFacility();

    os_log_type_t v6 = AXOSLogLevelFromAXLogLevel();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = AXColorizeFormatLog();
      long long v34 = [sub_1000E6610() sharedAccessoryManager];
      int v8 = _AXStringForArgs();

      if (os_log_type_enabled(v5, v6))
      {
        *(_DWORD *)long long buf = 138543362;
        id v42 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}@", buf, 0xCu);
      }
    }
  }
  uint64_t v9 = [sub_1000E6610() sharedAccessoryManager];
  [v9 registerForLocalNotifications];

  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  unsigned __int8 v10 = [sub_1000E6610() sharedAccessoryManager];
  unsigned __int8 v11 = [v10 connectedAccessories];

  id v12 = [v11 countByEnumeratingWithState:&v36 objects:v40 count:16];
  os_log_type_t v13 = &objc_release_x25_ptr;
  if (v12)
  {
    id v14 = v12;
    id v15 = &unk_1001EBB40;
    uint64_t v16 = *(void *)v37;
    do
    {
      unsigned __int8 v17 = 0;
      id v35 = v14;
      do
      {
        if (*(void *)v37 != v16) {
          objc_enumerationMutation(v11);
        }
        id v18 = *(void **)(*((void *)&v36 + 1) + 8 * (void)v17);
        if (objc_msgSend(v18, "supportsAccessibility", v34))
        {
          uint64_t v19 = [v13[281] sharedInstance];
          unsigned __int8 v20 = [v19 ignoreLogging];

          if ((v20 & 1) == 0)
          {
            uint64_t v21 = v16;
            id v22 = v15;
            unint64_t v23 = v11;
            unsigned __int8 v24 = [v13[281] identifier];
            unsigned __int8 v25 = AXLoggerForFacility();

            os_log_type_t v26 = AXOSLogLevelFromAXLogLevel();
            if (os_log_type_enabled(v25, v26))
            {
              uint64_t v27 = a1;
              os_log_type_t v28 = AXColorizeFormatLog();
              long long v29 = _AXStringForArgs();
              if (os_log_type_enabled(v25, v26))
              {
                *(_DWORD *)long long buf = 138543362;
                id v42 = v29;
                _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}@", buf, 0xCu);
              }

              a1 = v27;
              os_log_type_t v13 = &objc_release_x25_ptr;
            }

            unsigned __int8 v11 = v23;
            id v15 = v22;
            uint64_t v16 = v21;
          }
          [v18 setDelegate:*(void *)(a1 + 32)];
          long long v30 = objc_getAssociatedObject(v18, v15);
          unsigned __int8 v31 = [v30 BOOLValue];

          if ((v31 & 1) == 0)
          {
            CGRect v32 = +[NSNumber numberWithBool:1];
            [v18 updateSystemProperty:1 withValue:v32];
          }
          objc_setAssociatedObject(v18, v15, &__kCFBooleanTrue, (void *)1);
          id v14 = v35;
        }
        unsigned __int8 v17 = (char *)v17 + 1;
      }
      while (v14 != v17);
      id v14 = [v11 countByEnumeratingWithState:&v36 objects:v40 count:16];
    }
    while (v14);
  }

  return [sub_1000E6610() accessibilityStartListening];
}

void sub_1000E78CC(uint64_t a1)
{
  [sub_1000E6610() accessibilityStopListening];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = objc_msgSend(sub_1000E6610(), "sharedAccessoryManager", 0);
  unsigned __int8 v3 = [v2 connectedAccessories];

  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ([v8 supportsAccessibility])
        {
          uint64_t v9 = +[NSNumber numberWithBool:0];
          [v8 updateSystemProperty:1 withValue:v9];

          [v8 updateItemProperty:5 withValue:&__NSDictionary0__struct];
        }
        objc_setAssociatedObject(*(id *)(a1 + 32), &unk_1001EBB40, &__kCFBooleanFalse, (void *)1);
        [v8 setDelegate:0];
      }
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  unsigned __int8 v10 = [sub_1000E6610() sharedAccessoryManager];
  [v10 unregisterForLocalNotifications];
}

id sub_1000E8134()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  id v0 = (void **)qword_1001EBB80;
  uint64_t v7 = qword_1001EBB80;
  if (!qword_1001EBB80)
  {
    id v1 = (void *)sub_1000EA788();
    v5[3] = (uint64_t)dlsym(v1, "EAAccessoryAccessibilityPointXKey");
    qword_1001EBB80 = v5[3];
    id v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    sub_1001225B4();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_1000E8224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000E823C()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  id v0 = (void **)qword_1001EBB88;
  uint64_t v7 = qword_1001EBB88;
  if (!qword_1001EBB88)
  {
    id v1 = (void *)sub_1000EA788();
    v5[3] = (uint64_t)dlsym(v1, "EAAccessoryAccessibilityPointYKey");
    qword_1001EBB88 = v5[3];
    id v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    sub_10012262C();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_1000E832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000E8344()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  id v0 = (void **)qword_1001EBB90;
  uint64_t v7 = qword_1001EBB90;
  if (!qword_1001EBB90)
  {
    id v1 = (void *)sub_1000EA788();
    v5[3] = (uint64_t)dlsym(v1, "EAAccessoryAccessibilityTextKey");
    qword_1001EBB90 = v5[3];
    id v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    sub_1001226A4();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_1000E8434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E9348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E9734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1000E9900(id a1)
{
  id v1 = (void *)qword_1001EBB50;
  qword_1001EBB50 = (uint64_t)&off_1001C7070;
}

void sub_1000E9918(uint64_t a1)
{
  uint64_t v2 = [sub_1000E6610() sharedAccessoryManager];
  unsigned __int8 v3 = [v2 connectedAccessories];
  id v4 = [v3 count];

  if (v4 && ([(id)qword_1001EBB48 isEqual:*(void *)(a1 + 32)] & 1) == 0)
  {
    objc_storeStrong((id *)&qword_1001EBB48, *(id *)(a1 + 32));
    [*(id *)(a1 + 40) accessories];
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v17 = [obj countByEnumeratingWithState:&v22 objects:v27 count:16];
    if (v17)
    {
      uint64_t v16 = *(void *)v23;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(void *)v23 != v16) {
            objc_enumerationMutation(obj);
          }
          uint64_t v6 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          long long v18 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          id v7 = (id)qword_1001EBB50;
          id v8 = [v7 countByEnumeratingWithState:&v18 objects:v26 count:16];
          if (v8)
          {
            id v9 = v8;
            uint64_t v10 = *(void *)v19;
            do
            {
              for (j = 0; j != v9; j = (char *)j + 1)
              {
                if (*(void *)v19 != v10) {
                  objc_enumerationMutation(v7);
                }
                long long v12 = *(void **)(*((void *)&v18 + 1) + 8 * (void)j);
                id v13 = [v12 intValue];
                long long v14 = objc_msgSend(*(id *)(a1 + 40), "accessibilityAccessory:currentValueForItemProperty:withElement:", v6, objc_msgSend(v12, "intValue"), *(void *)(a1 + 32));
                [v6 updateItemProperty:v13 withValue:v14];
              }
              id v9 = [v7 countByEnumeratingWithState:&v18 objects:v26 count:16];
            }
            while (v9);
          }
        }
        id v17 = [obj countByEnumeratingWithState:&v22 objects:v27 count:16];
      }
      while (v17);
    }
  }
}

void sub_1000E9BE8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) accessories];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * (void)v6);
        double v8 = *(double *)(a1 + 40);
        *(float *)&double v8 = v8;
        id v9 = +[NSNumber numberWithFloat:v8];
        [v7 updateSystemProperty:2 withValue:v9];

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_1000E9DA0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) accessories];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v9;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v5);
        _AXSVoiceOverTouchSpeakingRate();
        id v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
        [v6 updateSystemProperty:3 withValue:v7];

        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }
}

void sub_1000EA4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1000EA730(uint64_t a1)
{
  sub_1000EA788();
  Class result = objc_getClass("EAAccessoryManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1001230F4();
  }
  qword_1001EBB60 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000EA788()
{
  v2[0] = 0;
  if (!qword_1001EBB68)
  {
    v2[1] = _NSConcreteStackBlock;
    v2[2] = (void *)3221225472;
    v2[3] = sub_1000EA880;
    v2[4] = &unk_1001B3580;
    v2[5] = v2;
    long long v3 = off_1001B6930;
    uint64_t v4 = 0;
    qword_1001EBB68 = _sl_dlopen();
  }
  uint64_t v0 = qword_1001EBB68;
  if (!qword_1001EBB68) {
    sub_100123170(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t sub_1000EA880()
{
  uint64_t result = _sl_dlopen();
  qword_1001EBB68 = result;
  return result;
}

void *sub_1000EA8F4(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryDidConnectNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBB70 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EA944(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBB78 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EA994(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityPointXKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBB80 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EA9E4(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityPointYKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBB88 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAA34(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTextKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBB90 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAA84(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitButton");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBB98 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAAD4(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitLink");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBA0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAB24(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitImage");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAB74(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitSearchField");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EABC4(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitSelected");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAC14(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitSound");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAC64(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitKeyboardKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBC8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EACB4(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitStaticText");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBD0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAD04(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitSummaryElement");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAD54(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitNotEnabled");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBE0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EADA4(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitUpdatesFrequently");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBE8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EADF4(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitAdjustable");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBF0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAE44(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitBackButton");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBBF8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAE94(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitMap");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBC00 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAEE4(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitStartsMediaSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBC08 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAF34(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityTraitDeleteKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBC10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAF84(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityWidthKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBC18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EAFD4(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilityHeightKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBC20 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EB024(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilitySystemPropertyVoiceOverVolumeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBC28 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EB074(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilitySystemPropertySpeakingRateKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBC30 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000EB0C4(uint64_t a1)
{
  id v2 = (void *)sub_1000EA788();
  uint64_t result = dlsym(v2, "EAAccessoryAccessibilitySystemPropertyVoiceOverEnabledKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBC38 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000EC4C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  objc_msgSend(a2, "ax_CGPointValue");
  double v7 = v6;
  double v9 = v8;
  objc_msgSend(v5, "ax_CGPointValue");
  double v11 = v10;
  double v13 = v12;

  if (*(void *)(*(void *)(a1 + 32) + 24))
  {
    if (v7 <= v11)
    {
      if (v7 >= v11) {
        return 0;
      }
      BOOL v14 = *(void *)(a1 + 40) == 0;
      uint64_t v15 = 1;
    }
    else
    {
      BOOL v14 = *(void *)(a1 + 40) == 0;
      uint64_t v15 = -1;
    }
    if (v14) {
      return v15;
    }
    else {
      return -v15;
    }
  }
  else if (v9 >= v13)
  {
    return v9 > v13;
  }
  else
  {
    return -1;
  }
}

uint64_t sub_1000EC880(uint64_t a1, uint64_t a2)
{
  if (qword_1001EBC48 != -1) {
    dispatch_once(&qword_1001EBC48, &stru_1001B6988);
  }
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = (uint64_t)[(id)qword_1001EBC40 characterIsMember:a1];
  if (result)
  {
    id v5 = (void *)qword_1001EBC40;
    return (uint64_t)[v5 characterIsMember:a2];
  }
  return result;
}

void sub_1000EC920(id a1)
{
  long long v3 = +[NSString stringWithFormat:@"%C%C%C%C%C%C%C%C%C%C%C", 32, 160, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202];
  uint64_t v1 = +[NSCharacterSet characterSetWithCharactersInString:v3];
  id v2 = (void *)qword_1001EBC40;
  qword_1001EBC40 = v1;
}

uint64_t sub_1000ECD24(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 17) = 0;
  *(unsigned char *)(*(void *)(result + 32) + 16) = 1;
  return result;
}

id sub_1000ECDB0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 1_Block_object_dispose(&STACK[0x310], 8) = 0;
  *(CFAbsoluteTime *)(*(void *)(a1 + 32) + 40) = CFAbsoluteTimeGetCurrent();
  *(unsigned char *)(*(void *)(a1 + 32) + 17) = 1;
  id result = [*(id *)(*(void *)(a1 + 32) + 24) potentialOperation];
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000ECE64;
    v5[3] = &unk_1001B33B8;
    void v5[4] = v3;
    return [v4 afterDelay:v5 processBlock:1.0];
  }
  return result;
}

id sub_1000ECE64(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _announceDropReady];
  *(unsigned char *)(*(void *)(a1 + 32) + 1_Block_object_dispose(&STACK[0x310], 8) = 1;
  return result;
}

void sub_1000ECF30(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 24);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), *(id *)(a1 + 40));
  [*(id *)(*(void *)(a1 + 32) + 32) cancel];
  if (*(void *)(a1 + 40))
  {
    if (![v2 itemCount] && objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "itemCount")) {
      [*(id *)(a1 + 32) _announceDragPickup];
    }
    if ((uint64_t)[v2 itemCount] >= 1)
    {
      id v3 = [*(id *)(*(void *)(a1 + 32) + 24) itemCount];
      if (v3 != [v2 itemCount]) {
        [*(id *)(a1 + 32) _announceDragCount];
      }
    }
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v4 + 17)
      && !*(unsigned char *)(v4 + 18)
      && (v12 = [*(id *)(v4 + 24) potentialOperation], uint64_t v4 = *(void *)(a1 + 32), v12))
    {
      [(id)v4 _announceDropReady];
      *(unsigned char *)(*(void *)(a1 + 32) + 1_Block_object_dispose(&STACK[0x310], 8) = 1;
    }
    else if (*(unsigned char *)(v4 + 18) {
           && [v2 potentialOperation]
    }
           && ![*(id *)(*(void *)(a1 + 32) + 24) potentialOperation])
    {
      [*(id *)(a1 + 32) _announceDropUnready];
      *(unsigned char *)(*(void *)(a1 + 32) + 1_Block_object_dispose(&STACK[0x310], 8) = 0;
    }
  }
  else
  {
    id v5 = +[AXSubsystemVoiceOver sharedInstance];
    unsigned __int8 v6 = [v5 ignoreLogging];

    if ((v6 & 1) == 0)
    {
      double v7 = +[AXSubsystemVoiceOver identifier];
      double v8 = AXLoggerForFacility();

      os_log_type_t v9 = AXOSLogLevelFromAXLogLevel();
      if (os_log_type_enabled(v8, v9))
      {
        double v10 = AXColorizeFormatLog();
        double v11 = _AXStringForArgs();
        if (os_log_type_enabled(v8, v9))
        {
          int v13 = 138543362;
          BOOL v14 = v11;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}@", (uint8_t *)&v13, 0xCu);
        }
      }
    }
  }
}

void sub_1000ED1E0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 17) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 1_Block_object_dispose(&STACK[0x310], 8) = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
}

uint64_t sub_1000ED27C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 17) = 0;
  *(unsigned char *)(*(void *)(result + 32) + 1_Block_object_dispose(&STACK[0x310], 8) = 0;
  return result;
}

void sub_1000ED304(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 24) potentialOperation])
  {
    sub_100051804(off_1001EA9E8, @"drop.complete", 0);
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    +[VOTOutputRequest sendRequestWithString:v1];
  }
}

void sub_1000ED394(id a1)
{
  sub_100051804(off_1001EA9E8, @"drag.cancelled", 0);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  +[VOTOutputRequest sendRequestWithString:v1];
}

void sub_1000ED4E8(uint64_t a1)
{
  id v2 = off_1001EA9E8;
  id v3 = [(id)VOTSharedWorkspace selectedLanguage];
  uint64_t v4 = sub_100051804(v2, @"dragging.item.count", v3);
  +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v4, [*(id *)(*(void *)(a1 + 32) + 24) itemCount]);
  id v7 = (id)objc_claimAutoreleasedReturnValue();

  id v5 = objc_alloc_init(VOTOutputRequest);
  id v6 = [(VOTOutputRequest *)v5 addString:v7];
  [(VOTOutputRequest *)v5 setCannotBeInterrupted:1];
  [(VOTOutputRequest *)v5 send];
}

uint64_t sub_1000EE688(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 72) = *(void *)(*(void *)(result + 32) + 80);
  return result;
}

void *sub_1000EE748(void *result)
{
  *(unsigned char *)(*(void *)(result[5] + 8) + 24) = result[6] <= *(void *)(result[4] + 72);
  return result;
}

void *sub_1000EEE64(void *result)
{
  *(unsigned char *)(*(void *)(result[5] + 8) + 24) = result[6] <= *(void *)(result[4] + 48);
  return result;
}

void sub_1000F06E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F0804(uint64_t a1, uint64_t a2)
{
  LOBYTE(v13) = *(unsigned char *)(a1 + 96);
  id v3 = [*(id *)(a1 + 32) _handleOpaqueSearchForElementInDirection:*(void *)(a1 + 80) opaqueParent:a2 searchType:*(void *)(a1 + 88) range:*(void *)(*(void *)(a1 + 64) + 8) + 32 matchBlock:*(void *)(a1 + 56) resetContentOffsetInOpaqueParent:*(void *)(*(void *)(a1 + 72) + 8) + 24 peeking:v13];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 opaqueParent];

    if (v5)
    {
      id v6 = v4;
    }
    else
    {
      id v6 = [*(id *)(a1 + 40) currentOpaqueElement];

      os_log_type_t v9 = [v6 opaqueParent];

      if (!v9) {
        _AXAssert();
      }
    }
    if ([v6 isValid])
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 136));
      double v11 = +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:](VOTElementFetchFoundData, "fetchFoundData:forceUpdate:direction:generation:range:searchType:", v6, *(unsigned __int8 *)(a1 + 97), *(void *)(a1 + 80), [*(id *)(a1 + 48) clientGeneration], *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 32), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(void *)(a1 + 88));
      [WeakRetained elementFetchFound:v11];

      double v8 = VOTLogElement();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        sub_100123A20();
      }
LABEL_12:

      return 1;
    }
    id v12 = VOTLogElement();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
      sub_100123A88();
    }
  }
  else if (*(unsigned char *)(a1 + 98))
  {
    uint64_t result = (uint64_t)[*(id *)(a1 + 40) isAccessibleGroup];
    if (!result) {
      return result;
    }
    id v6 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 136));
    double v8 = +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:](VOTElementFetchFoundData, "fetchFoundData:forceUpdate:direction:generation:range:searchType:", 0, *(unsigned __int8 *)(a1 + 97), *(void *)(a1 + 80), [*(id *)(a1 + 48) clientGeneration], *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 32), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(void *)(a1 + 88));
    [v6 elementFetchFound:v8];
    goto LABEL_12;
  }
  return 0;
}

id sub_1000F0A4C(uint64_t a1, void *a2)
{
  return [a2 isEqual:*(void *)(a1 + 32)];
}

id sub_1000F0A58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    id v20 = v10;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, id, uint64_t, uint64_t, uint64_t, id *))(v11 + 16))(v11, v9, a3, a4, v12, &v20);
    uint64_t v15 = v14;
    id v16 = v20;

    if (v13 == 0x7FFFFFFF || (v13 == a3 ? (BOOL v17 = v15 == a4) : (BOOL v17 = 0), v17))
    {
      long long v18 = 0;
    }
    else
    {
      long long v18 = +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:](VOTElementFetchFoundData, "fetchFoundData:forceUpdate:direction:generation:range:searchType:", v9, *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 48), [*(id *)(a1 + 32) clientGeneration], v13, v15, *(void *)(a1 + 56));
    }
    id v10 = v16;
  }
  else
  {
    long long v18 = 0;
  }
  [v18 setSearchUUID:v10];

  return v18;
}

id sub_1000F0B94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  uint64_t v11 = +[VOTRotor systemRotorTypeForSearchType:*(void *)(a1 + 40)];
  if (v11)
  {
    uint64_t v12 = [v9 customPublicRotorForSystemType:v11];
    uint64_t v13 = v12;
    if (v12)
    {
      if ([v12 isEqual:v10])
      {
        uint64_t v14 = objc_opt_new();
        [v14 setSearchUUID:v10];
      }
      else
      {
        uint64_t v15 = +[VOTElement customPublicRotorDictionaryForRotorId:startRange:direction:](VOTElement, "customPublicRotorDictionaryForRotorId:startRange:direction:", v13, a3, a4, *(void *)(a1 + 48));
        id v16 = [v9 customPublicRotorResultWithItem:v15 startElement:v9];
        BOOL v17 = [v16 objectForKeyedSubscript:@"targetElement"];
        long long v18 = +[AXUIElement uiElementWithAXElement:v17];
        long long v19 = +[VOTElement elementWithUIElement:v18];

        if (v19)
        {
          os_log_type_t v26 = v15;
          long long valuePtr = xmmword_10016E510;
          id v20 = [v16 objectForKeyedSubscript:@"targetRange"];

          if (v20)
          {
            long long v21 = [v16 objectForKeyedSubscript:@"targetRange"];
            AXValueGetValue(v21, kAXValueTypeCFRange, &valuePtr);
          }
          uint64_t v22 = *(unsigned __int8 *)(a1 + 56);
          uint64_t v23 = *(void *)(a1 + 48);
          id v24 = [*(id *)(a1 + 32) clientGeneration];
          uint64_t v14 = +[VOTElementFetchFoundData fetchFoundData:v19 forceUpdate:v22 direction:v23 generation:v24 range:valuePtr searchType:*(void *)(a1 + 40)];
          [v14 setSearchUUID:v13];
          uint64_t v15 = v26;
        }
        else
        {
          uint64_t v14 = objc_opt_new();
          [v14 setSearchUUID:v13];
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1000F0E6C(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  *(void *)(*(void *)(a1 + 32) + 4_Block_object_dispose(&STACK[0x2C0], 8) = *(void *)(*(void *)(a1 + 32) + 56);
  id v2 = VOTLogElement();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_100123AF0(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void sub_1000F0FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F0FF8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(void *)(v1 + 80) + 1;
  *(void *)(v1 + 80) = v2;
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v2;
  return result;
}

void sub_1000F15A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1608(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(void *)(v1 + 56) + 1;
  *(void *)(v1 + 56) = v2;
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v2;
  return result;
}

id sub_1000F1CE0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _retrieveElementsWithElement:0 groupNavigationStyle:*(void *)(a1 + 40)];
}

void sub_1000F1FC0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

uint64_t sub_1000F2004(uint64_t result, float a2)
{
  *(float *)uint64_t v2 = a2;
  *(void *)(v2 + 4) = v3;
  *(_WORD *)(v2 + 12) = 2114;
  *(void *)(v2 + 14) = result;
  return result;
}

void sub_1000F24B4(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"VOTRotorChangedNotification" object:*(void *)(a1 + 32) userInfo:*(void *)(a1 + 40)];
}

BOOL sub_1000F2514(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 3;
}

void sub_1000F2524(uint64_t a1)
{
  id v3 = +[VOTConfiguration rootConfiguration];
  id v2 = +[NSNumber numberWithInteger:*(void *)(*(void *)(a1 + 32) + 24)];
  [v3 setPreference:v2 forKey:*(void *)(a1 + 40)];
}

BOOL sub_1000F2B98(uint64_t a1)
{
  return (unint64_t)(a1 - 61) < 2;
}

CFIndex sub_1000F31E0(const __CFArray *a1, const void *a2)
{
  v4.NSUInteger length = CFArrayGetCount(a1);
  v4.NSUInteger location = 0;

  return CFArrayGetFirstIndexOfValue(a1, v4, a2);
}

void sub_1000F32A4(id a1)
{
  v38[0] = kAXSVoiceOverTouchRotorItemSpeechRate;
  long long v37 = +[NSNumber numberWithInteger:82];
  v39[0] = v37;
  v38[1] = kAXSVoiceOverTouchRotorItemVolume;
  long long v36 = +[NSNumber numberWithInteger:81];
  v39[1] = v36;
  v38[2] = kAXSVoiceOverTouchRotorItemHandwriting;
  id v35 = +[NSNumber numberWithInteger:61];
  v39[2] = v35;
  v38[3] = kAXSVoiceOverTouchRotorItemBrailleGesture;
  long long v34 = +[NSNumber numberWithInteger:62];
  v39[3] = v34;
  v38[4] = kAXSVoiceOverTouchRotorItemHints;
  long long v33 = +[NSNumber numberWithInteger:60];
  v39[4] = v33;
  v38[5] = kAXSVoiceOverTouchRotorItemAudioDucking;
  CGRect v32 = +[NSNumber numberWithInteger:88];
  v39[5] = v32;
  v39[6] = &off_1001C6160;
  v38[6] = kAXSVoiceOverTouchRotorItemAudioDuckingAmount;
  v38[7] = kAXSVoiceOverTouchRotorItemCharacter;
  unsigned __int8 v31 = +[NSNumber numberWithInteger:3];
  v39[7] = v31;
  v38[8] = kAXSVoiceOverTouchRotorItemWord;
  long long v30 = +[NSNumber numberWithInteger:4];
  v39[8] = v30;
  v38[9] = kAXSVoiceOverTouchRotorItemLine;
  long long v29 = +[NSNumber numberWithInteger:5];
  v39[9] = v29;
  v38[10] = kAXSVoiceOverTouchRotorItemHeader;
  os_log_type_t v28 = +[NSNumber numberWithInteger:8];
  v39[10] = v28;
  v38[11] = kAXSVoiceOverTouchRotorItemLink;
  uint64_t v27 = +[NSNumber numberWithInteger:9];
  v39[11] = v27;
  v39[12] = &off_1001C6178;
  v38[12] = kAXSVoiceOverTouchRotorItemTextSelection;
  v38[13] = kAXSVoiceOverTouchRotorItemFormElement;
  os_log_type_t v26 = +[NSNumber numberWithInteger:10];
  v39[13] = v26;
  v38[14] = kAXSVoiceOverTouchRotorItemTableStart;
  long long v25 = +[NSNumber numberWithInteger:11];
  v39[14] = v25;
  v38[15] = kAXSVoiceOverTouchRotorItemListStart;
  id v24 = +[NSNumber numberWithInteger:13];
  v39[15] = v24;
  v38[16] = kAXSVoiceOverTouchRotorItemVisitedLink;
  uint64_t v23 = +[NSNumber numberWithInteger:14];
  v39[16] = v23;
  v38[17] = kAXSVoiceOverTouchRotorItemNonVisitedLink;
  uint64_t v22 = +[NSNumber numberWithInteger:15];
  v39[17] = v22;
  v38[18] = kAXSVoiceOverTouchRotorItemSame;
  long long v21 = +[NSNumber numberWithInteger:44];
  v39[18] = v21;
  v38[19] = kAXSVoiceOverTouchRotorItemAllItems;
  id v20 = +[NSNumber numberWithInteger:45];
  v39[19] = v20;
  v38[20] = kAXSVoiceOverTouchRotorItemImage;
  long long v19 = +[NSNumber numberWithInteger:16];
  v39[20] = v19;
  v38[21] = kAXSVoiceOverTouchRotorItemStaticText;
  long long v18 = +[NSNumber numberWithInteger:17];
  v39[21] = v18;
  v38[22] = kAXSVoiceOverTouchRotorItemTextZoom;
  BOOL v17 = +[NSNumber numberWithInteger:19];
  v39[22] = v17;
  v38[23] = kAXSVoiceOverTouchRotorItemLandmark;
  id v16 = +[NSNumber numberWithInteger:33];
  v39[23] = v16;
  v38[24] = kAXSVoiceOverTouchRotorItemArticle;
  uint64_t v15 = +[NSNumber numberWithInteger:34];
  v39[24] = v15;
  v38[25] = kAXSVoiceOverTouchRotorItemButton;
  uint64_t v14 = +[NSNumber numberWithInteger:35];
  v39[25] = v14;
  v38[26] = kAXSVoiceOverTouchRotorItemSearchField;
  uint64_t v13 = +[NSNumber numberWithInteger:40];
  v39[26] = v13;
  v38[27] = kAXSVoiceOverTouchRotorItemRadioButton;
  uint64_t v1 = +[NSNumber numberWithInteger:41];
  v39[27] = v1;
  v38[28] = kAXSVoiceOverTouchRotorItemCheckbox;
  id v2 = +[NSNumber numberWithInteger:42];
  v39[28] = v2;
  v38[29] = kAXSVoiceOverTouchRotorItemTextField;
  id v3 = +[NSNumber numberWithInteger:36];
  v39[29] = v3;
  v38[30] = kAXSVoiceOverTouchRotorItemContainers;
  CFRange v4 = +[NSNumber numberWithInteger:38];
  v39[30] = v4;
  v38[31] = kAXSVoiceOverTouchRotorItemVerticalNavigation;
  uint64_t v5 = +[NSNumber numberWithInteger:7];
  v39[31] = v5;
  v38[32] = kAXSVoiceOverTouchRotorItemPunctuation;
  uint64_t v6 = +[NSNumber numberWithInteger:86];
  v39[32] = v6;
  v38[33] = kAXSVoiceOverTouchRotorItemSounds;
  uint64_t v7 = +[NSNumber numberWithInteger:87];
  v39[33] = v7;
  v38[34] = kAXSVoiceOverTouchRotorItemTypingMode;
  uint64_t v8 = +[NSNumber numberWithInteger:20];
  v39[34] = v8;
  v38[35] = kAXSVoiceOverTouchRotorItemContinuousPath;
  id v9 = +[NSNumber numberWithInteger:21];
  v39[35] = v9;
  v38[36] = kAXSVoiceOverTouchRotorItemNavigationDirection;
  id v10 = +[NSNumber numberWithInteger:91];
  v39[36] = v10;
  v39[37] = &off_1001C6190;
  v38[37] = kAXSVoiceOverTouchRotorItemLanguage;
  v38[38] = kAXSVoiceOverTouchRotorItemVoice;
  v39[38] = &off_1001C61A8;
  v39[39] = &off_1001C61C0;
  v38[39] = kAXSVoiceOverTouchRotorItemBrailleLanguage;
  v38[40] = kAXSVoiceOverTouchRotorItemBrailleInputLanguage;
  v39[40] = &off_1001C61D8;
  v39[41] = &off_1001C61F0;
  v38[41] = kAXSVoiceOverTouchRotorItemBrailleAutoAdvance;
  v38[42] = kAXSVoiceOverTouchRotorItem2DBrailleZoom;
  v39[42] = &off_1001C6208;
  v39[43] = &off_1001C6220;
  v38[43] = kAXSVoiceOverTouchRotorItem2DBraillePanHorizontal;
  v38[44] = kAXSVoiceOverTouchRotorItem2DBraillePanVertical;
  v39[44] = &off_1001C6238;
  v39[45] = &off_1001C6250;
  v38[45] = kAXSVoiceOverTouchRotorItem2DBrailleInvert;
  v38[46] = kAXSVoiceOverTouchRotorItem2DBrailleTextMode;
  v39[46] = &off_1001C6268;
  v39[47] = &off_1001C6280;
  v38[47] = kAXSVoiceOverTouchRotorItem2DBrailleEdgeIntensity;
  v38[48] = kAXSVoiceOverTouchRotorAudioDestination;
  v39[48] = &off_1001C6298;
  v39[49] = &off_1001C62B0;
  v38[49] = kAXSVoiceOverTouchRotorActivities;
  v38[50] = kAXSVoiceOverTouchRotorToggleLiveRegions;
  v39[50] = &off_1001C62C8;
  v39[51] = &off_1001C62E0;
  v38[51] = kAXSVoiceOverTouchRotorMLElementsMode;
  v38[52] = kAXSVoiceOverTouchRotorNavigationStyle;
  v39[52] = &off_1001C62F8;
  v39[53] = &off_1001C6310;
  v38[53] = kAXSVoiceOverTouchRotorItemMisspelledWords;
  v38[54] = kAXSVoiceOverTouchRotorImageDescriptions;
  v39[54] = &off_1001C6328;
  v39[55] = &off_1001C6340;
  v38[55] = kAXSVoiceOverTouchRotorDetectionMode;
  v38[56] = kAXSVoiceOverTouchRotorDirectTouchMode;
  v39[56] = &off_1001C6358;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:v39 forKeys:v38 count:57];
  uint64_t v12 = (void *)qword_1001EBC50;
  qword_1001EBC50 = v11;
}

BOOL sub_1000F4A60(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFCLL) == 56;
}

void sub_1000F4A70(__CFArray *a1, void *value, CFIndex idx)
{
}

void sub_1000F4A84(const __CFArray *a1, const void *a2)
{
  v6.NSUInteger length = CFArrayGetCount(a1);
  v6.NSUInteger location = 0;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(a1, v6, a2);
  if (FirstIndexOfValue != -1)
  {
    CFArrayRemoveValueAtIndex(a1, FirstIndexOfValue);
  }
}

void sub_1000F5050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1000F506C(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000F5DB0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1000F5DDC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateDotPositions];
}

void sub_1000F5E1C(uint64_t a1)
{
  id v4 = +[AXSettings sharedInstance];
  id v2 = [v4 voiceOverTouchBrailleGesturesUsesTypingSoundFeedback];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setUsesTypingSoundFeedback:v2];
}

void sub_1000F5E8C(uint64_t a1)
{
  id v4 = +[AXSettings sharedInstance];
  id v2 = [v4 voiceOverTouchBrailleGesturesUsesHapticFeedback];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setUsesHapticFeedback:v2];
}

id sub_1000F64FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) disableIdleTimerAssertion];
  [v2 invalidate];

  id v3 = *(void **)(a1 + 32);

  return [v3 setDisableIdleTimerAssertion:0];
}

void sub_1000F654C(id a1)
{
  id v1 = +[AXSettings sharedInstance];
  objc_msgSend(v1, "setVoiceOverBSIUsageCount:", (char *)objc_msgSend(v1, "voiceOverBSIUsageCount") + 1);
}

id sub_1000F65A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateBrailleUI];
}

id sub_1000F6CA0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleChangeUsage:1];
}

id sub_1000F6CAC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleChangeUsage:0];
}

id sub_1000F6CB8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleTranslateImmediately];
}

BOOL sub_1000F7FB8(id a1, NSDictionary *a2, unint64_t a3, BOOL *a4)
{
  id v4 = VOSBrailleTableForRotorItem();
  if ([v4 supportsTranslationMode8Dot] && !AXDeviceSupportsManyTouches())
  {
    BOOL v6 = 0;
  }
  else
  {
    uint64_t v5 = [v4 replacements];
    BOOL v6 = [v5 count] == 0;
  }
  return v6;
}

void sub_1000F8718(id a1, VOTElement *a2)
{
  id v2 = a2;
  [(VOTElement *)v2 updateGesturedTextInputAttributes];
  id v5 = [(VOTElement *)v2 gesturedTextInputAttributes];

  if ([v5 shouldPlayKeyboardSecureClickSound])
  {
    id v3 = +[VOTOutputManager outputManager];
    id v4 = +[VOSOutputEvent DidEnterSecureText];
    [v3 sendEvent:v4];
  }
}

id sub_1000F8CD4(uint64_t a1, int a2)
{
  int HasHomeButton = AXDeviceHasHomeButton();
  CFStringRef v5 = @"landscape.right.hint.charge.port";
  if (a2) {
    CFStringRef v5 = @"landscape.left.hint.charge.port";
  }
  CFStringRef v6 = @"landscape.left.hint";
  if (!a2) {
    CFStringRef v6 = @"landscape.right.hint";
  }
  if (HasHomeButton) {
    uint64_t v7 = (__CFString *)v6;
  }
  else {
    uint64_t v7 = (__CFString *)v5;
  }
  uint64_t v8 = sub_100051D04(off_1001EA9E8, v7, 0, *(void **)(a1 + 32));

  return v8;
}

id sub_1000F9364(uint64_t a1)
{
  return [*(id *)(a1 + 32) _announceBrailleTypingPropertiesIncludingOrientation:1 typingMode:1 forUnlockConfiguration:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1000F9570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000F9588(uint64_t a1, void *a2)
{
  id result = [a2 requiresLaTeXInput];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1000F9A84(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) lastPrintBrailleCharacter];

  if (v2)
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = [v3 lastPrintBrailleCharacter];
    id v9 = [v3 _spokenStringForPrintBraille:v4];

    if ([v9 length])
    {
      if ([*(id *)(a1 + 32) didAnnounceExplorationMode])
      {
        id v5 = v9;
      }
      else
      {
        CFStringRef v6 = *(void **)(a1 + 32);
        uint64_t v7 = sub_100051804(off_1001EA9E8, @"braille.exploration.mode.announcement", 0);
        uint64_t v8 = [v6 _stringWithFirstPart:v7 secondPart:v9];

        [*(id *)(a1 + 32) setDidAnnounceExplorationMode:1];
        id v5 = (id)v8;
      }
      id v9 = v5;
      [*(id *)(a1 + 32) _speakText:v5 useKeyboardLanguage:0];
    }
  }
}

void sub_1000F9EC0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    id v3 = *(void **)(a1 + 32);
    AXFormatInteger();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [v3 addObject:v4];
  }
}

void sub_1000FA7C8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = +[NSNumber numberWithUnsignedInteger:a2];
    [v3 addObject:v4];
  }
}

id sub_1000FA928(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1000FA99C;
  v3[3] = &unk_1001B33B8;
  void v3[4] = v1;
  return [v1 _playWarningTones:2 completion:v3];
}

id sub_1000FA99C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _beginExploringDotPatterns];
}

id sub_1000FB3DC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) sendCarriageReturnForElement:a2];
}

void sub_1000FC774(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

void sub_1000FC788(id a1, VOTOutputRequest *a2)
{
  if ([(VOTOutputRequest *)a2 finishedSuccessfully])
  {
    id v2 = +[AXSettings sharedInstance];
    [v2 setVoiceOverTouchBrailleGesturesDidPlayCalibrationHint:1];
  }
}

void sub_1000FCA40(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) warningTonesTimer];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000FCAF0;
  v5[3] = &unk_1001B36E8;
  id v4 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  void v5[4] = *(void *)(a1 + 32);
  uint64_t v7 = v3;
  id v6 = v4;
  [v2 afterDelay:v5 processBlock:1.0];
}

id sub_1000FCAF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _playWarningTones:*(void *)(a1 + 48) - 1 completion:*(void *)(a1 + 40)];
}

void sub_1000FCB04(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) warningTonesTimer];
  [v2 afterDelay:*(void *)(a1 + 40) processBlock:1.0];
}

void sub_1000FDB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000FDB6C(uint64_t a1)
{
  id v5 = +[AXSettings sharedInstance];
  id v2 = [v5 imageCaptionGenderStrategy];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = [WeakRetained engine];
  [v4 setGenderStrategy:v2];
}

void sub_1000FDBF4(uint64_t a1)
{
  id v2 = VOTLogCommon();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Received langauge configuration change. Purging vision engine cache", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained purgeCache];
}

BOOL sub_1000FE374(uint64_t a1)
{
  return ([*(id *)(a1 + 32) includeFullImageDescriptionsForAllElements] & 1) == 0
      && ([*(id *)(a1 + 40) doesHaveTraits:kAXImageTrait] & 1) == 0
      && (*(unsigned char *)(a1 + 50) & 1) == 0;
}

unint64_t sub_1000FE3CC(id a1)
{
  return 1;
}

id sub_1000FE3D4(uint64_t a1)
{
  id v2 = +[NSMutableArray array];
  uint64_t v3 = [*(id *)(a1 + 32) language];
  if ([v3 length])
  {
    id v4 = +[NSLocale localeWithLocaleIdentifier:v3];
    if (v4) {
      [v2 addObject:v4];
    }
  }
  if (*(void *)(a1 + 40)) {
    objc_msgSend(v2, "addObject:");
  }

  return v2;
}

void sub_1000FE974(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AXLogBrailleHW();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Rendering string for 2d braille: %@", (uint8_t *)&v8, 0xCu);
  }

  id v6 = +[VOTPlanarBrailleManager manager];
  uint64_t v7 = [v3 brailleEdges];

  [v6 setImageData:v7];
}

void sub_1000FEDE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = AXLogBrailleHW();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Rendering element for 2d braille: %@", (uint8_t *)&v8, 0xCu);
  }

  id v6 = +[VOTPlanarBrailleManager manager];
  uint64_t v7 = [v3 brailleEdges];

  [v6 setImageData:v7];
}

void sub_1000FF6A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  +[NSDate timeIntervalSinceReferenceDate];
  double v5 = v4;
  id v6 = VOTLogCommon();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    double v7 = v5 - *(double *)(a1 + 56);
    int v13 = 134217984;
    double v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Vision request took %.3fs to complete", (uint8_t *)&v13, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  [WeakRetained visionEngine:*(void *)(a1 + 32) updatedResult:v3 forElement:*(void *)(a1 + 40) event:1 visionOptions:*(void *)(a1 + 48)];

  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v9 = AXLogBrailleHW();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      double v10 = *(double *)(a1 + 40);
      int v13 = 138412290;
      double v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Processing vision request for 2d braille: %@", (uint8_t *)&v13, 0xCu);
    }

    uint64_t v11 = +[VOTPlanarBrailleManager manager];
    uint64_t v12 = [v3 brailleEdges];
    [v11 setImageData:v12];
  }
}

void sub_1000FFC20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[NSError ax_errorWithDomain:@"vot" description:@"No element provided"];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_1000FFCAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  +[NSDate timeIntervalSinceReferenceDate];
  double v8 = v7;
  uint64_t v9 = VOTLogCommon();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    double v10 = v8 - *(double *)(a1 + 40);
    int v15 = 134217984;
    double v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Vision request took %.3fs to complete", (uint8_t *)&v15, 0xCu);
  }

  uint64_t v11 = *(void *)(a1 + 32);
  if (v11)
  {
    uint64_t v12 = [v5 captionFeatures];
    int v13 = [v12 firstObject];
    double v14 = [v13 caption];
    (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v14, v6);
  }
}

void sub_100100268(id a1)
{
  uint64_t v1 = objc_alloc_init(VOTDebugManager);
  uint64_t v2 = qword_1001EBC60;
  qword_1001EBC60 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100100980(id a1)
{
  id v1 = [objc_allocWithZone((Class)VOTElementLabelCache) init];
  uint64_t v2 = qword_1001EBC70;
  qword_1001EBC70 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100100D00(uint64_t a1)
{
  uint64_t v2 = +[NSUbiquitousKeyValueStore defaultStore];
  [v2 synchronize];

  id v3 = +[NSUbiquitousKeyValueStore defaultStore];
  double v4 = [v3 dictionaryForKey:@"VOTLabelCache"];

  id v5 = VOTLogICloud();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138477827;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Got element label synch from icloud: %{private}@", buf, 0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  double v7 = *(NSObject **)(v6 + 16);
  if (v4)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100100EBC;
    block[3] = &unk_1001B3448;
    block[4] = v6;
    id v10 = v4;
    dispatch_async(v7, block);
  }
  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100100EC8;
    void v8[3] = &unk_1001B33B8;
    v8[4] = v6;
    dispatch_async(v7, v8);
  }
}

id sub_100100EBC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _iCloudReconcileDataStore:*(void *)(a1 + 40)];
}

id sub_100100EC8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _iCloudPublishData:*(void *)(*(void *)(a1 + 32) + 8)];
}

void sub_100101188(uint64_t a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionary];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v9 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v8, (void)v14);
        id v10 = [v8 hashKey];
        [v2 setObject:v9 forKey:v10];
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
    }
    while (v5);
  }

  uint64_t v11 = +[NSUbiquitousKeyValueStore defaultStore];
  [v11 setDictionary:v2 forKey:@"VOTLabelCache"];

  uint64_t v12 = +[NSUbiquitousKeyValueStore defaultStore];
  [v12 synchronize];

  int v13 = VOTLogICloud();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138477827;
    long long v19 = v2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Publishing data to iCloud %{private}@", buf, 0xCu);
  }
}

id sub_1001015E8(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 8))
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 8);
    *(void *)(v3 + _Block_object_dispose(&STACK[0x2C0], 8) = v2;
  }
  id v5 = [*(id *)(a1 + 40) length];
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8);
  if (v5)
  {
    double v7 = [v6 allKeys];
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v15;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void **)(*((void *)&v14 + 1) + 8 * i);
          if ([v12 isEqual:*(void *)(a1 + 48)]) {
            [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:v12];
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }
    [*(id *)(*(void *)(a1 + 32) + 8) setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
  }
  else
  {
    [v6 removeObjectForKey:*(void *)(a1 + 48)];
  }
  [*(id *)(a1 + 32) _syncLabelCache];
  return [*(id *)(a1 + 32) _iCloudPublishData:*(void *)(*(void *)(a1 + 32) + 8)];
}

uint64_t sub_100101894(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001018A4(uint64_t a1)
{
}

void sub_1001018AC(void *a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = *(id *)(a1[4] + 8);
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        double v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v7, "isEqual:", a1[5], (void)v11))
        {
          uint64_t v8 = [*(id *)(a1[4] + 8) objectForKey:v7];
          uint64_t v9 = *(void *)(a1[6] + 8);
          uint64_t v10 = *(void **)(v9 + 40);
          *(void *)(v9 + 40) = v8;

          goto LABEL_11;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_100101A84(id a1)
{
  id v1 = objc_alloc_init(VOTPlanarBrailleManager);
  uint64_t v2 = qword_1001EBC80;
  qword_1001EBC80 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100101DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100101DDC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100101DEC(uint64_t a1)
{
}

void sub_100101DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableArray arrayWithArray:v3];
  [v4 addObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  uint64_t v5 = [*(id *)(a1 + 32) planarCacheLock];
  [v5 lock];

  uint64_t v6 = [*(id *)(a1 + 32) planarNeighborhoodCache];
  [v6 setObject:v4 forKey:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];

  double v7 = [*(id *)(a1 + 32) planarCacheLock];
  [v7 unlock];

  uint64_t v8 = [(id)VOTSharedWorkspace elementManager];
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100101F78;
  v10[3] = &unk_1001B6EE0;
  objc_copyWeak(&v12, (id *)(a1 + 48));
  long long v11 = *(_OWORD *)(a1 + 32);
  [v8 fetchElementsFrom:v9 inDirection:1 count:32 scroll:0 block:v10];

  objc_destroyWeak(&v12);
}

void sub_100101F64(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100101F78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = [WeakRetained planarCacheLock];
    [v6 lock];

    double v7 = [v5 planarNeighborhoodCache];
    uint64_t v8 = [v7 objectForKey:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];

    [v8 addObjectsFromArray:v3];
    if ([*(id *)(a1 + 32) _isModeReadingType]
      && [*(id *)(a1 + 32) _isElementForReading:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)])
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_100102250;
      v24[3] = &unk_1001B5988;
      v24[4] = *(void *)(a1 + 32);
      uint64_t v9 = objc_msgSend(v8, "ax_filteredArrayUsingBlock:", v24);
      uint64_t v10 = +[NSMutableArray arrayWithArray:v9];

      uint64_t v8 = (void *)v10;
    }
    [v5 setPlanarBrailleElements:v8];
    long long v11 = [v5 planarCacheLock];
    [v11 unlock];

    id v12 = objc_opt_new();
    id v23 = v3;
    if ([v8 count])
    {
      unint64_t v13 = 0;
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        long long v15 = [v8 objectAtIndex:v13];
        long long v16 = objc_opt_new();
        LOWORD(v22) = 0;
        LOWORD(v21) = 0;
        objc_msgSend(v15, "addTextualInformationToBrailleLine:forPosition:rotorSelection:shouldPreferRotorSelection:lineRange:descriptionRange:lineRangeKnown:isNewTouchContainer:previousElement:updateValue:singleLine:", v16, 0, 0, 0, 0, 0, v21, 0, v22);
        long long v17 = [v16 string];
        [v12 addObject:v17];
        if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) isEqual:v15]) {
          uint64_t v14 = v13;
        }

        ++v13;
      }
      while (v13 < (unint64_t)[v8 count]);
    }
    else
    {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    [*(id *)(a1 + 32) setFocusedElement:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
    [v5 _setTextData:v12 focusedIndex:v14];
    long long v18 = [*(id *)(a1 + 32) planarCacheLock];
    [v18 lock];

    long long v19 = [*(id *)(a1 + 32) planarNeighborhoodCache];
    [v19 removeObjectForKey:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];

    id v20 = [*(id *)(a1 + 32) planarCacheLock];
    [v20 unlock];

    id v3 = v23;
  }
}

id sub_100102250(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _isElementForReading:a2];
}

void sub_1001026B4(uint64_t a1, void *a2)
{
  id v10 = a2;
  [*(id *)(a1 + 32) setPreviousPanningDirection:0];
  if (!*(unsigned char *)(a1 + 56)
    || [v10 count]
    && (id v3 = *(void **)(a1 + 32),
        [v10 firstObject],
        id v4 = objc_claimAutoreleasedReturnValue(),
        LOBYTE(v3) = [v3 _isElementForReading:v4],
        v4,
        (v3 & 1) != 0))
  {
    id v5 = [v10 count];
    uint64_t v6 = [(id)VOTSharedWorkspace elementManager];
    double v7 = v6;
    if (v5)
    {
      uint64_t v8 = [v10 firstObject];
      [v7 moveToElement:v8];
    }
    else
    {
      [v6 setCurrentElement:*(void *)(a1 + 40) shouldSetBrailleElement:0];

      uint64_t v9 = [(id)VOTSharedWorkspace elementManager];
      [v9 moveToElement:*(void *)(a1 + 48)];

      double v7 = +[VOTOutputManager outputManager];
      uint64_t v8 = +[VOSOutputEvent BoundaryEncountered];
      [v7 sendEvent:v8];
    }
  }
  else
  {
    double v7 = +[VOTEvent brailleEventWithCommand:kVOTEventCommandScrollLeftPage info:0];
    [v7 setObject:&__kCFBooleanTrue forIndex:119];
    [(id)VOTSharedWorkspace dispatchCommand:v7];
  }
}

void sub_10010284C(uint64_t a1, void *a2)
{
  id v10 = a2;
  [*(id *)(a1 + 32) setPreviousPanningDirection:1];
  if (!*(unsigned char *)(a1 + 56)
    || [v10 count]
    && (id v3 = *(void **)(a1 + 32),
        [v10 firstObject],
        id v4 = objc_claimAutoreleasedReturnValue(),
        LOBYTE(v3) = [v3 _isElementForReading:v4],
        v4,
        (v3 & 1) != 0))
  {
    id v5 = [v10 count];
    uint64_t v6 = [(id)VOTSharedWorkspace elementManager];
    double v7 = v6;
    if (v5)
    {
      uint64_t v8 = [v10 firstObject];
      [v7 moveToElement:v8];
    }
    else
    {
      [v6 setCurrentElement:*(void *)(a1 + 40) shouldSetBrailleElement:0];

      uint64_t v9 = [(id)VOTSharedWorkspace elementManager];
      [v9 moveToElement:*(void *)(a1 + 48)];

      double v7 = +[VOTOutputManager outputManager];
      uint64_t v8 = +[VOSOutputEvent BoundaryEncountered];
      [v7 sendEvent:v8];
    }
  }
  else
  {
    double v7 = +[VOTEvent brailleEventWithCommand:kVOTEventCommandScrollRightPage info:0];
    [v7 setObject:&__kCFBooleanTrue forIndex:119];
    [(id)VOTSharedWorkspace dispatchCommand:v7];
  }
}

void sub_100103D68(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = qword_1001EBC98;
  qword_1001EBC98 = v1;

  _objc_release_x1(v1, v2);
}

void sub_100103FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100103FF4(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en_US"];
  id v3 = VOTLogHandwriting();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = [v2 localeIdentifier];
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Initializing handwriting engine with locale: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v10 = 0;
  long long v11 = &v10;
  uint64_t v12 = 0x2050000000;
  id v5 = (void *)qword_1001EBCD8;
  uint64_t v13 = qword_1001EBCD8;
  if (!qword_1001EBCD8)
  {
    *(void *)&long long buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472;
    long long v15 = sub_1001069A0;
    long long v16 = &unk_1001B3FE0;
    long long v17 = &v10;
    sub_1001069A0((uint64_t)&buf);
    id v5 = (void *)v11[3];
  }
  uint64_t v6 = v5;
  _Block_object_dispose(&v10, 8);
  id v7 = [[v6 alloc] initWithMode:1 locale:v2];
  if (!v7)
  {
    uint64_t v8 = VOTLogHandwriting();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001242B4(v2, v8);
    }
  }
  [v7 setAutoCapitalizationMode:0];
  [v7 setMaxRecognitionResultCount:8];
  [*(id *)(a1 + 32) setRecognitionEngine:v7];
  id v9 = *(id *)(a1 + 32);
  AXPerformBlockAsynchronouslyOnMainThread();
}

void sub_10010423C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10010425C(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateActiveCharacterSetFromCharacterMode:1 allowedCharacterModes:15 announceChange:0];
  id v2 = *(void **)(a1 + 32);

  return [v2 resetSession];
}

void sub_100104B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_100104BE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100104BF0(uint64_t a1)
{
}

void sub_100104BF8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recognitionEngine];
  id v3 = [*(id *)(a1 + 32) recognitionCanvas];
  id v7 = [v2 textRecognitionResultForDrawing:v3 options:0 shouldCancel:&stru_1001B6F90];

  uint64_t v4 = [v7 textRecognitionResultArray];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

BOOL sub_100104CA4(id a1)
{
  return 0;
}

void sub_100104CAC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recognitionEngine];
  id v3 = [v2 activeCharacterSet];
  unsigned __int8 v4 = [v3 characterIsMember:*(unsigned __int16 *)(a1 + 48)];

  if ((v4 & 1) == 0)
  {
    uint64_t v5 = VOTLogHandwriting();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v9 = 138543362;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Suggested char: (%{public}@) is not a member of our char set, returning not recognized", (uint8_t *)&v9, 0xCu);
    }

    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = 0;
  }
}

id sub_10010508C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _announceActiveCharacterMode];
}

void sub_100105794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001057B0(id a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2050000000;
  uint64_t v1 = (void *)qword_1001EBCE0;
  uint64_t v8 = qword_1001EBCE0;
  if (!qword_1001EBCE0)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1001069F8;
    v4[3] = &unk_1001B3FE0;
    v4[4] = &v5;
    sub_1001069F8((uint64_t)v4);
    uint64_t v1 = (void *)v6[3];
  }
  id v2 = v1;
  _Block_object_dispose(&v5, 8);
  id v3 = [v2 sharedInstance];
}

void sub_100105878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100105890()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void **)qword_1001EBCF0;
  uint64_t v7 = qword_1001EBCF0;
  if (!qword_1001EBCF0)
  {
    uint64_t v1 = (void *)sub_100106A50();
    v5[3] = (uint64_t)dlsym(v1, "UIKeyboardVariantStrings");
    qword_1001EBCF0 = v5[3];
    uint64_t v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    sub_1001244C8();
  }
  id v2 = *v0;

  return v2;
}

void sub_100105980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100106014(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) _characterSetForHandwritingMode:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 32) recognitionEngine];
  [v2 setActiveCharacterSet:v3];
}

void sub_100106540(id a1)
{
  xmmword_1001EBCB0 = xmmword_1001EBE30;
}

Class sub_1001067E0(uint64_t a1)
{
  sub_100106838();
  Class result = objc_getClass("CHDrawing");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_100124540();
  }
  qword_1001EBCC8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100106838()
{
  v0[0] = 0;
  if (!qword_1001EBCD0)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = sub_10010692C;
    v0[4] = &unk_1001B3580;
    v0[5] = v0;
    long long v1 = off_1001B7018;
    uint64_t v2 = 0;
    qword_1001EBCD0 = _sl_dlopen();
  }
  if (!qword_1001EBCD0) {
    sub_1001245BC(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_10010692C()
{
  uint64_t result = _sl_dlopen();
  qword_1001EBCD0 = result;
  return result;
}

Class sub_1001069A0(uint64_t a1)
{
  sub_100106838();
  Class result = objc_getClass("CHRecognizer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_10012463C();
  }
  qword_1001EBCD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1001069F8(uint64_t a1)
{
  sub_100106A50();
  Class result = objc_getClass("UIKeyboardImpl");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1001246B8();
  }
  qword_1001EBCE0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100106A50()
{
  v2[0] = 0;
  if (!qword_1001EBCE8)
  {
    v2[1] = _NSConcreteStackBlock;
    v2[2] = (void *)3221225472;
    v2[3] = sub_100106B48;
    v2[4] = &unk_1001B3580;
    v2[5] = v2;
    long long v3 = off_1001B7030;
    uint64_t v4 = 0;
    qword_1001EBCE8 = _sl_dlopen();
  }
  uint64_t v0 = qword_1001EBCE8;
  if (!qword_1001EBCE8) {
    sub_100124734(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t sub_100106B48()
{
  uint64_t result = _sl_dlopen();
  qword_1001EBCE8 = result;
  return result;
}

void *sub_100106BBC(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100106A50();
  uint64_t result = dlsym(v2, "UIKeyboardVariantStrings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001EBCF0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100106C0C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100106A50();
  uint64_t result = dlsym(v2, "UIKeyboardGetCurrentInputMode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1001EBCF8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_100106C5C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100106A50();
  uint64_t result = dlsym(v2, "UIKeyboardRomanAccentVariants");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1001EBD00 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100107184(id a1)
{
  id v1 = [[VOTSystemServerInstance alloc] _initServer];
  uint64_t v2 = qword_1001EBD08;
  qword_1001EBD08 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

intptr_t sub_100108E30(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100109190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1001091C4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  if (!*(unsigned char *)(v2 + 24))
  {
    *(unsigned char *)(v2 + 24) = 1;
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = a2;
    id v5 = [objc_alloc((Class)AXIPCMessage) initWithKey:7007 payload:v4];

    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
  }
}

void sub_100109274(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  if (!*(unsigned char *)(v2 + 24))
  {
    *(unsigned char *)(v2 + 24) = 1;
    CFStringRef v8 = @"error";
    int v9 = a2;
    id v4 = a2;
    id v5 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [objc_alloc((Class)AXIPCMessage) initWithKey:7007 payload:v5];
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
  }
}

uint64_t sub_100109360(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100109370(uint64_t a1)
{
}

intptr_t sub_100109378(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if ((unint64_t)(v2 - 1) < 2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:AXVoiceOverAutomationKeyRotorNames];
    if ([v3 count])
    {
      [*(id *)(a1 + 40) _modifyRotorItems:v3 shouldEnable:v2 == 1];
      id v4 = *(void **)(a1 + 40);
      uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
      id obj = *(id *)(v5 + 40);
      [v4 _updateRotorsForElementWithErrorMessage:&obj];
      objc_storeStrong((id *)(v5 + 40), obj);
    }
    else
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
      int v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = @"No rotor names provided";
    }
  }
  else if (v2 == 3)
  {
    +[VOTOutputManager clearPreviousSoundsPlayed];
  }
  else if (v2)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = @"Unknown automation command";
  }
  else
  {
    +[VOTOutputRequest clearPreviousRequests];
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

uint64_t sub_10010A084(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_1001EBD20;
  qword_1001EBD20 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_10010B37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10010B3AC(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 isHeader];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t result = v3 ^ 1;
  if (*(unsigned char *)(v4 + 24)) {
    char v6 = 1;
  }
  else {
    char v6 = result;
  }
  *(unsigned char *)(v4 + 24) = v6;
  return result;
}

BOOL sub_10010B3F0(id a1, VOTElement *a2, VOTElement *a3)
{
  return [(VOTElement *)a2 differenceAspectMask:a3] == 0;
}

void sub_10010CC0C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) eventQueue];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10010CDB4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) eventQueue];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10010CFB0(uint64_t a1)
{
  id v2 = *(unsigned char **)(a1 + 32);
  if (v2[9] || *(unsigned char *)(a1 + 48) || *(unsigned char *)(a1 + 49))
  {
    id v3 = [v2 eventQueue];
    [v3 addObject:*(void *)(a1 + 40)];
  }
}

void sub_10010D0B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    id v2 = +[AXEventTapManager sharedManager];
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = objc_msgSend(*(id *)(a1 + 32), "eventQueue", 0);
    id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v10;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          [v2 sendHIDSystemEvent:*(void *)(*((void *)&v9 + 1) + 8 * i) repostCreatorHIDEvent:1 senderID:0x8000000817319373];
          usleep(0x3E8u);
        }
        id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v5);
    }
  }
  uint64_t v8 = [*(id *)(a1 + 32) eventQueue];
  [v8 removeAllObjects];
}

id sub_10010D590(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processStateChangeWithEvent:0 axEvent:*(void *)(a1 + 40)];
}

id sub_10010D66C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processStateChangeWithEvent:1 axEvent:*(void *)(a1 + 40)];
}

id sub_10010DA64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processStateChangeWithEvent:2 axEvent:0];
}

id sub_10010DAF0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processStateChangeWithEvent:3 axEvent:0];
}

void sub_10010DF90(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v27;
    uint64_t v11 = kSCRCMathStringAttributeSpeakLiteralCharacters;
    uint64_t v12 = kSCRCMathStringAttributeIsNonTechnicalText;
    uint64_t v24 = kSCRCMathStringAttributeIsNonTechnicalText;
    uint64_t v25 = kSCRCMathStringAttributeTreePosition;
    uint64_t v23 = kSCRCMathStringAttributeSpeakWithPitchInflection;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v27 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v14 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        if ([v14 isEqualToString:v11])
        {
          objc_msgSend(*(id *)(a1 + 32), "addIndexesInRange:", a3, a4);
          continue;
        }
        if ([v14 isEqualToString:v12])
        {
          long long v15 = *(void **)(a1 + 40);
          uint64_t v16 = UIAccessibilityTokenIgnoreLeadingCommas;
          long long v17 = 0;
LABEL_10:
          objc_msgSend(v15, "setAttribute:forKey:withRange:", v17, v16, a3, a4);
          continue;
        }
        if ([v14 isEqualToString:v25])
        {
          long long v18 = *(void **)(a1 + 40);
          long long v19 = [v7 objectForKey:v14];
          id v20 = v18;
          uint64_t v12 = v24;
          objc_msgSend(v20, "setAttribute:forKey:withRange:", v19, UIAccessibilityTokenMathTreePosition, a3, a4);
        }
        else if ([v14 isEqualToString:v23])
        {
          uint64_t v21 = [v7 objectForKey:v14];
          id v22 = [v21 integerValue];

          if (v22 == (id)1)
          {
            objc_msgSend(*(id *)(a1 + 40), "setAttribute:forKey:withRange:", &__kCFBooleanTrue, UIAccessibilityTokenLowPitch, a3, a4);
            uint64_t v12 = v24;
          }
          else
          {
            uint64_t v12 = v24;
            if (v22 == (id)2)
            {
              long long v15 = *(void **)(a1 + 40);
              uint64_t v16 = UIAccessibilityTokenHighPitch;
              long long v17 = &__kCFBooleanTrue;
              goto LABEL_10;
            }
          }
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v9);
  }
}

uint64_t sub_10010E7A0(int a1, mach_msg_timeout_t a2, _DWORD *a3)
{
  memset(&rcv_name_12[4], 0, 28);
  int rcv_name = 0;
  mach_port_name_t reply_port = mig_get_reply_port();
  int rcv_name_4 = a1;
  mach_port_t rcv_name_8 = reply_port;
  int v10 = 5395;
  *(void *)rcv_name_12 = 0x66D0D600000000;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v10);
    mach_port_name_t reply_port = rcv_name_8;
  }
  uint64_t v7 = mach_msg((mach_msg_header_t *)&v10, 275, 0x18u, 0x30u, reply_port, a2, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) <= 0xE && ((1 << (v7 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(rcv_name_8);
  }
  else
  {
    if (!v7)
    {
      if (*(_DWORD *)&rcv_name_12[4] == 71)
      {
        uint64_t v8 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name_12[4] == 6738234)
      {
        if ((v10 & 0x80000000) == 0)
        {
          if (rcv_name == 36)
          {
            uint64_t v8 = 4294966996;
            if (*(_DWORD *)&rcv_name_12[16])
            {
              if (rcv_name_4) {
                uint64_t v8 = 4294966996;
              }
              else {
                uint64_t v8 = *(unsigned int *)&rcv_name_12[16];
              }
            }
          }
          else
          {
            uint64_t v8 = 4294966996;
          }
          goto LABEL_27;
        }
        uint64_t v8 = 4294966996;
        if (*(_DWORD *)&rcv_name_12[8] == 1
          && rcv_name == 40
          && !rcv_name_4
          && *(unsigned __int16 *)&rcv_name_12[22] << 16 == 0x100000)
        {
          uint64_t v8 = 0;
          *a3 = *(_DWORD *)&rcv_name_12[12];
          return v8;
        }
      }
      else
      {
        uint64_t v8 = 4294966995;
      }
LABEL_27:
      mach_msg_destroy((mach_msg_header_t *)&v10);
      return v8;
    }
    mig_dealloc_reply_port(rcv_name_8);
  }
  if ((v8 - 268435459) <= 1)
  {
    if ((v10 & 0x1F00) == 0x1100) {
      mach_port_deallocate(mach_task_self_, rcv_name_8);
    }
    goto LABEL_27;
  }
  return v8;
}

uint64_t sub_10010E968()
{
  mach_port_t v0 = __chkstk_darwin();
  long long v46 = 0u;
  memset(v47, 0, sizeof(v47));
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  memset(&msg.msgh_size, 0, 20);
  int v15 = 1;
  uint64_t v16 = v4;
  int v17 = 16777472;
  int v18 = v3;
  NDR_record_t v19 = NDR_record;
  LODWORD(v20) = v5;
  if (v2 > 0x1000) {
    return 4294966989;
  }
  int v7 = v3;
  unsigned int v8 = v2;
  mach_msg_timeout_t v9 = v1;
  mach_port_t v10 = v0;
  __memcpy_chk();
  uint64_t v11 = (v8 + 3) & 0xFFFFFFFC;
  mach_msg_size_t v12 = v11 + 64;
  *(_DWORD *)((char *)&msg + v11 + 60) = v7;
  msg.msgh_bits = -2147483629;
  msg.msgh_remote_port = v10;
  msg.msgh_local_port = 0;
  DWORD1(v20) = v8;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 6738135;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set(&msg);
  }
  uint64_t v6 = mach_msg(&msg, 17, v12, 0, 0, v9, 0);
  if ((v6 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(mach_task_self_, msg.msgh_local_port);
    }
    mach_msg_destroy(&msg);
  }
  return v6;
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_1001EB3A0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1001EB3A0);
    }
  }
}

id sub_10010EBC8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for VOTMagnifierService()) init];
  qword_1001EBE70 = (uint64_t)result;
  return result;
}

uint64_t sub_10010ECC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10010FF74(&qword_1001EB400);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  unsigned int v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR___VOTMagnifierService____lazy_storage___logger;
  swift_beginAccess();
  sub_10010FFBC(v9, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  sub_100110024((uint64_t)v8);
  Logger.init(subsystem:category:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  sub_100110084((uint64_t)v6, v9);
  return swift_endAccess();
}

void sub_10010F390(void (*a1)(void))
{
  uint64_t v3 = type metadata accessor for Logger();
  __chkstk_darwin(v3);
  id v4 = *(id *)(v1 + OBJC_IVAR___VOTMagnifierService_service);
  a1();
}

id sub_10010F6A0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10010F724()
{
  return type metadata accessor for VOTMagnifierService();
}

uint64_t type metadata accessor for VOTMagnifierService()
{
  uint64_t result = qword_1001EB3E0;
  if (!qword_1001EB3E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10010F778()
{
  sub_10010F818();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10010F818()
{
  if (!qword_1001EB3F0)
  {
    type metadata accessor for Logger();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001EB3F0);
    }
  }
}

uint64_t sub_10010F870(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10010F944(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectAXValueType Type = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10010FF18((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectAXValueType Type = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10010FF18((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10010FEC8((uint64_t)v12);
  return v7;
}

uint64_t sub_10010F944(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10010FB00(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10010FB00(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10010FB98(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10010FD78(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10010FD78(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10010FB98(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10010FD10(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10010FD10(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10010FF74(&qword_1001EB3F8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10010FD78(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10010FF74(&qword_1001EB3F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10010FEC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10010FF18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10010FF74(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10010FFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010FF74(&qword_1001EB400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100110024(uint64_t a1)
{
  uint64_t v2 = sub_10010FF74(&qword_1001EB400);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100110084(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010FF74(&qword_1001EB400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001100EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100110928(&OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage, &qword_1001EB4B8, a1);
}

uint64_t sub_100110108(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10010FF74(&qword_1001EB4B8);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100119E0C(a1, (uint64_t)v6, &qword_1001EB4B8);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  size_t v11 = v6;
  uint64_t v12 = v7;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_100119BE8((uint64_t)v6, &qword_1001EB4B8);
}

uint64_t sub_100110248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010FF74(&qword_1001EB4B8);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100119E0C(a2, (uint64_t)v6, &qword_1001EB4B8);
  uint64_t v7 = a1 + OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage;
  swift_beginAccess();
  sub_100119B84((uint64_t)v6, v7, &qword_1001EB4B8);
  swift_endAccess();
  [*(id *)(a1 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) systemSpokenLanguageChanged:0];
  return sub_100119BE8((uint64_t)v6, &qword_1001EB4B8);
}

uint64_t sub_100110360()
{
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10010FF74(&qword_1001EB4B8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  uint64_t v12 = v0;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = v0 + OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage;
  swift_beginAccess();
  sub_100119E0C(v8, (uint64_t)v7, &qword_1001EB4B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1))
  {
    sub_100119BE8((uint64_t)v7, &qword_1001EB4B8);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v7, v1);
    sub_100119BE8((uint64_t)v7, &qword_1001EB4B8);
    uint64_t v9 = Locale.minimalCanonicLocaleIdentifier.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v9;
}

uint64_t sub_10011090C@<X0>(uint64_t a1@<X8>)
{
  return sub_100110928(&OBJC_IVAR____TtC3vot11VOTSettings__systemVoiceSelection, &qword_1001EB578, a1);
}

uint64_t sub_100110928@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  swift_getKeyPath();
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v7 = v3 + *a1;
  swift_beginAccess();
  return sub_100119E0C(v7, a3, a2);
}

uint64_t sub_100110BFC@<X0>(uint64_t *a1@<X0>, void *a2@<X4>, uint64_t *a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  swift_getKeyPath();
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = v7 + *a2;
  swift_beginAccess();
  return sub_100119E0C(v8, a4, a3);
}

uint64_t sub_100110CD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10010FF74(&qword_1001EB578);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100119E0C(a1, (uint64_t)v6, &qword_1001EB578);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_100119BE8((uint64_t)v6, &qword_1001EB578);
}

id sub_100110ED8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11 = sub_10010FF74(a3);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1 + *a4;
  swift_beginAccess();
  sub_100119E0C(v14, (uint64_t)v13, a3);
  uint64_t v15 = a5(0);
  uint64_t v16 = *(void *)(v15 - 8);
  int v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) != 1)
  {
    int v17 = (void *)a6();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }

  return v17;
}

id sub_100111204(uint64_t a1)
{
  uint64_t v2 = sub_10010FF74(&qword_1001EB578);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v49 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v48 - v5;
  uint64_t v7 = sub_10010FF74(&qword_1001EB4D0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v51 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v50 = (uint64_t)&v48 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  int v17 = (char *)&v48 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v20 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v21 = *(void *)(v20 - 8);
  long long v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(a1, 1, v20);
  uint64_t v52 = a1;
  sub_100119E0C(a1, (uint64_t)v19, &qword_1001EB4D0);
  if (v23 == 1)
  {
    sub_100119BE8((uint64_t)v19, &qword_1001EB4D0);
    uint64_t v24 = v53;
  }
  else
  {
    sub_100119E0C((uint64_t)v19, (uint64_t)v17, &qword_1001EB4D0);
    if (v22((uint64_t)v17, 1, v20) == 1)
    {
      sub_100119BE8((uint64_t)v19, &qword_1001EB4D0);
      sub_100119BE8((uint64_t)v17, &qword_1001EB4D0);
      uint64_t v25 = type metadata accessor for VoiceSelection();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v6, 1, 1, v25);
      uint64_t v24 = v53;
    }
    else
    {
      AXPreferences.VoiceOver.Activity.voiceSelection.getter();
      sub_100119BE8((uint64_t)v19, &qword_1001EB4D0);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v20);
      uint64_t v26 = type metadata accessor for VoiceSelection();
      int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v6, 1, v26);
      uint64_t v24 = v53;
      if (v27 != 1)
      {
        uint64_t v34 = (uint64_t)v6;
        goto LABEL_13;
      }
    }
    sub_100119BE8((uint64_t)v6, &qword_1001EB578);
  }
  swift_getKeyPath();
  uint64_t v55 = v24;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v28 = v24 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity;
  swift_beginAccess();
  sub_100119E0C(v28, (uint64_t)v14, &qword_1001EB4D0);
  int v29 = v22((uint64_t)v14, 1, v20);
  sub_100119BE8((uint64_t)v14, &qword_1001EB4D0);
  if (v29 != 1)
  {
    swift_getKeyPath();
    uint64_t v54 = v24;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v30 = v50;
    sub_100119E0C(v28, v50, &qword_1001EB4D0);
    if (v22(v30, 1, v20))
    {
      sub_100119BE8(v30, &qword_1001EB4D0);
      uint64_t v31 = type metadata accessor for VoiceSelection();
      uint64_t v32 = (uint64_t)v49;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v49, 1, 1, v31);
LABEL_11:
      uint64_t v34 = v32;
LABEL_13:
      sub_100119BE8(v34, &qword_1001EB578);
      goto LABEL_14;
    }
    uint64_t v32 = (uint64_t)v49;
    AXPreferences.VoiceOver.Activity.voiceSelection.getter();
    sub_100119BE8(v30, &qword_1001EB4D0);
    uint64_t v33 = type metadata accessor for VoiceSelection();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33) == 1) {
      goto LABEL_11;
    }
    sub_100119BE8(v32, &qword_1001EB578);
    long long v44 = *(void **)(v24 + OBJC_IVAR____TtC3vot11VOTSettings_workspace);
    id v45 = [v44 previousRotorVoiceIdentifier];
    if (!v45)
    {
      AXPreferences.VoiceOver.currentRotorVoiceIdentifier.getter();
      if (v46)
      {
        NSString v47 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v47 = 0;
      }
      [v44 setPreviousRotorVoiceIdentifier:v47];

      return (id)AXPreferences.VoiceOver.currentRotorVoiceIdentifier.setter();
    }
  }
LABEL_14:
  id result = (id)v22(v52, 1, v20);
  if (result != 1)
  {
    swift_getKeyPath();
    uint64_t v54 = v24;
    sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v36 = v24 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity;
    swift_beginAccess();
    uint64_t v37 = v51;
    sub_100119E0C(v36, v51, &qword_1001EB4D0);
    LODWORD(v36) = v22(v37, 1, v20);
    id result = (id)sub_100119BE8(v37, &qword_1001EB4D0);
    if (v36 == 1)
    {
      AXPreferences.VoiceOver.currentRotorVoiceIdentifier.getter();
      uint64_t v39 = v38;
      id result = (id)swift_bridgeObjectRelease();
      if (!v39)
      {
        AXPreferences.VoiceOver.currentRotorVoiceIdentifier.getter();
        uint64_t v41 = v40;
        swift_bridgeObjectRelease();
        if (!v41)
        {
          id v42 = [*(id *)(v24 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) previousRotorVoiceIdentifier];
          if (v42)
          {
            long long v43 = v42;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          AXPreferences.VoiceOver.currentRotorVoiceIdentifier.setter();
          uint64_t v24 = v53;
        }
        return [*(id *)(v24 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) setPreviousRotorVoiceIdentifier:0];
      }
    }
  }
  return result;
}

uint64_t sub_100111B58@<X0>(uint64_t a1@<X8>)
{
  return sub_100110928(&OBJC_IVAR____TtC3vot11VOTSettings__currentActivity, &qword_1001EB4D0, a1);
}

uint64_t sub_100111D74(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10010FF74(&qword_1001EB4D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100119E0C(a1, (uint64_t)v6, &qword_1001EB4D0);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_100119BE8((uint64_t)v6, &qword_1001EB4D0);
}

uint64_t sub_100111EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010FF74(&qword_1001EB4D0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  uint64_t v9 = &v12[-v8];
  sub_100119E0C(a2, (uint64_t)&v12[-v8], &qword_1001EB4D0);
  uint64_t v10 = a1 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity;
  swift_beginAccess();
  sub_100119E0C(v10, (uint64_t)v7, &qword_1001EB4D0);
  swift_beginAccess();
  sub_100119B84((uint64_t)v9, v10, &qword_1001EB4D0);
  swift_endAccess();
  sub_100111204((uint64_t)v7);
  sub_100119BE8((uint64_t)v9, &qword_1001EB4D0);
  return sub_100119BE8((uint64_t)v7, &qword_1001EB4D0);
}

id sub_100111FF0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10010FF74(&qword_1001EB4D0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v17 - v8;
  id result = [*(id *)(v2 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) elementManager];
  if (result)
  {
    id v11 = [result determineActivityForElement:a1];
    swift_unknownObjectRelease();
    uint64_t v12 = type metadata accessor for AXPreferences.VoiceOver.Activity();
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    if (v11)
    {
      uint64_t v14 = *(void *)(v12 - 8);
      uint64_t v15 = 1;
      v13(v7, 1, 1, v12);
      sub_100119AEC(&qword_1001EB508, (void (*)(uint64_t))&type metadata accessor for AXPreferences.VoiceOver.Activity);
      dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v12) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v9, v7, v12);
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 1;
    }
    v13(v9, v15, 1, v12);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath);
    v17[-2] = v2;
    v17[-1] = v9;
    v17[1] = v2;
    sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    return (id)sub_100119BE8((uint64_t)v9, &qword_1001EB4D0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10011238C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10010FF74(&qword_1001EB4D8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v20 - v10;
  type metadata accessor for TTSExecutor();
  uint64_t v21 = static TTSExecutor.shared.getter();
  uint64_t v12 = type metadata accessor for TaskPriority();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = v2;
  sub_100119DA8((uint64_t)v11, (uint64_t)v9, &qword_1001EB4D8);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12);
  swift_retain();
  id v16 = v3;
  if (v15 == 1)
  {
    sub_100119BE8((uint64_t)v9, &qword_1001EB4D8);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
  }
  uint64_t v17 = sub_100119AEC(&qword_1001EB4F0, (void (*)(uint64_t))&type metadata accessor for TTSExecutor);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = &unk_1001EB588;
  *(void *)(v18 + 24) = v14;
  uint64_t v22 = 6;
  uint64_t v23 = 0;
  uint64_t v24 = v21;
  uint64_t v25 = v17;
  swift_task_create();
  return swift_release();
}

uint64_t sub_100112608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[9] = a3;
  v4[10] = a4;
  void v4[8] = a2;
  v4[11] = sub_10010FF74(&qword_1001EB540);
  v4[12] = swift_task_alloc();
  sub_10010FF74(&qword_1001EB4B8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  sub_10010FF74(&qword_1001EB578);
  uint8_t v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Locale();
  void v4[18] = v5;
  v4[19] = *(void *)(v5 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  sub_10010FF74(&qword_1001EB598);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  uint64_t v6 = sub_10010FF74(&qword_1001EB5A0);
  v4[24] = v6;
  v4[25] = *(void *)(v6 - 8);
  v4[26] = swift_task_alloc();
  uint64_t v7 = sub_10010FF74(&qword_1001EB5A8);
  v4[27] = v7;
  v4[28] = *(void *)(v7 - 8);
  v4[29] = swift_task_alloc();
  return _swift_task_switch(sub_10011289C, 0, 0);
}

uint64_t sub_10011289C()
{
  uint64_t v2 = v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[8];
  swift_retain();
  AXPreferences.VoiceOver.defaultVoiceSelectionStream.getter();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage;
  v0[30] = OBJC_IVAR____TtC3vot11VOTSettings___observationRegistrar;
  v0[31] = v6;
  swift_beginAccess();
  v0[33] = v5;
  v0[34] = v4;
  v0[32] = 0;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[35] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001129F0;
  uint64_t v8 = v0[27];
  uint64_t v9 = v0[22];
  return AsyncStream.Iterator.next(isolation:)(v9, 0, 0, v8);
}

uint64_t sub_1001129F0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100112AEC, 0, 0);
}

uint64_t sub_100112AEC()
{
  uint64_t v1 = v0[23];
  sub_100119DA8(v0[22], v1, &qword_1001EB598);
  uint64_t v2 = sub_10010FF74(&qword_1001EB5B0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    uint64_t v3 = v0[33];
    (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
    sub_100119A78(v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[18];
  uint64_t v8 = (void *)v0[19];
  uint64_t v9 = v0[17];
  uint64_t v10 = v0[15];
  uint64_t v11 = v0 + 12;
  uint64_t v50 = v0[12];
  uint64_t v12 = v0[10];
  uint64_t v49 = v0[11];
  uint64_t v51 = v12 + v0[31];
  uint64_t v13 = v0[23] + *(int *)(v2 + 48);
  NSString v47 = (void (*)(uint64_t))v8[4];
  v47(v6);
  sub_100119DA8(v13, v9, &qword_1001EB578);
  swift_getKeyPath();
  v0[5] = v12;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v48 = (void (*)(uint64_t, uint64_t, uint64_t))v8[2];
  v48(v10, v6, v7);
  uint64_t v14 = (void (*)(uint64_t, void, uint64_t, uint64_t))v8[7];
  v14(v10, 0, 1, v7);
  uint64_t v15 = v50 + *(int *)(v49 + 48);
  sub_100119E0C(v51, v50, &qword_1001EB4B8);
  sub_100119E0C(v10, v15, &qword_1001EB4B8);
  id v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v8[6];
  int v17 = v16(v50, 1, v7);
  uint64_t v18 = v0[18];
  if (v17 == 1)
  {
    sub_100119BE8(v0[15], &qword_1001EB4B8);
    if (v16(v15, 1, v18) == 1)
    {
      uint64_t v19 = v0[32];
LABEL_14:
      sub_100119BE8(*v11, &qword_1001EB4B8);
      goto LABEL_15;
    }
    goto LABEL_10;
  }
  sub_100119E0C(v0[12], v0[14], &qword_1001EB4B8);
  if (v16(v15, 1, v18) == 1)
  {
    uint64_t v20 = v0[18];
    uint64_t v21 = v0[19];
    uint64_t v22 = v0[14];
    sub_100119BE8(v0[15], &qword_1001EB4B8);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v20);
LABEL_10:
    uint64_t v52 = v14;
    sub_100119BE8(*v11, &qword_1001EB540);
LABEL_13:
    uint64_t v11 = v0 + 13;
    uint64_t v31 = v0[13];
    uint64_t v19 = v0[32];
    uint64_t v32 = v0[18];
    uint64_t v33 = v0[10];
    v48(v31, v0[21], v32);
    v52(v31, 0, 1, v32);
    swift_getKeyPath();
    uint64_t v34 = swift_task_alloc();
    *(void *)(v34 + 16) = v33;
    *(void *)(v34 + 24) = v31;
    v0[6] = v33;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    goto LABEL_14;
  }
  uint64_t v52 = v14;
  uint64_t v24 = v0[19];
  uint64_t v23 = v0[20];
  uint64_t v25 = v0[18];
  uint64_t v27 = v0[14];
  uint64_t v26 = v0[15];
  uint64_t v28 = v0[12];
  ((void (*)(uint64_t, uint64_t, uint64_t))v47)(v23, v15, v25);
  sub_100119AEC(&qword_1001EB568, (void (*)(uint64_t))&type metadata accessor for Locale);
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v30(v23, v25);
  sub_100119BE8(v26, &qword_1001EB4B8);
  v30(v27, v25);
  sub_100119BE8(v28, &qword_1001EB4B8);
  if ((v29 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v19 = v0[32];
LABEL_15:
  uint64_t v35 = v0[33];
  uint64_t v36 = v0[16];
  uint64_t v37 = v0[10];
  sub_100119E0C(v0[17], v36, &qword_1001EB578);
  swift_getKeyPath();
  uint64_t v38 = swift_task_alloc();
  *(void *)(v38 + 16) = v37;
  *(void *)(v38 + 24) = v36;
  v0[7] = v37;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_task_dealloc();
  sub_100119BE8(v36, &qword_1001EB578);
  if (v35)
  {
    uint64_t v39 = (void (*)(uint64_t))v0[33];
    uint64_t v40 = swift_retain();
    v39(v40);
    sub_100119A78((uint64_t)v39);
    sub_100119A78((uint64_t)v39);
  }
  uint64_t v41 = v0[21];
  uint64_t v42 = v0[18];
  uint64_t v43 = v0[19];
  sub_100119BE8(v0[17], &qword_1001EB578);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
  v0[33] = 0;
  v0[34] = 0;
  v0[32] = v19;
  long long v44 = (void *)swift_task_alloc();
  v0[35] = v44;
  *long long v44 = v0;
  v44[1] = sub_1001129F0;
  uint64_t v45 = v0[27];
  uint64_t v46 = v0[22];
  return AsyncStream.Iterator.next(isolation:)(v46, 0, 0, v45);
}

uint64_t sub_1001131F4@<X0>(uint64_t a1@<X8>)
{
  return sub_100110928(&OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage, &qword_1001EB4B8, a1);
}

uint64_t sub_100113210(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10010FF74(&qword_1001EB4B8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100119E0C(a1, (uint64_t)v6, &qword_1001EB4B8);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_100119BE8((uint64_t)v6, &qword_1001EB4B8);
}

uint64_t sub_100113350(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = sub_10010FF74(a3);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100119E0C(a2, (uint64_t)v10, a3);
  uint64_t v11 = a1 + *a4;
  swift_beginAccess();
  sub_100119ED0((uint64_t)v10, v11, a3);
  return swift_endAccess();
}

id sub_10011343C(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  if (v6)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v7 = 0;
  }

  return v7;
}

uint64_t sub_1001134BC()
{
  uint64_t v1 = sub_10010FF74(&qword_1001EB4B8);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  id v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - v5;
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v20 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - v11;
  swift_getKeyPath();
  uint64_t v22 = v0;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v13 = v0 + OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage;
  swift_beginAccess();
  sub_100119E0C(v13, (uint64_t)v6, &qword_1001EB4B8);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v14(v6, 1, v7) == 1)
  {
    sub_100119BE8((uint64_t)v6, &qword_1001EB4B8);
    swift_getKeyPath();
    uint64_t v21 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v15 = v0 + OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage;
    swift_beginAccess();
    sub_100119E0C(v15, (uint64_t)v4, &qword_1001EB4B8);
    if (v14(v4, 1, v7))
    {
      sub_100119BE8((uint64_t)v4, &qword_1001EB4B8);
      return 0;
    }
    else
    {
      int v17 = v20;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v20, v4, v7);
      sub_100119BE8((uint64_t)v4, &qword_1001EB4B8);
      uint64_t v16 = Locale.minimalCanonicLocaleIdentifier.getter();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v7);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v6, v7);
    uint64_t v16 = Locale.minimalCanonicLocaleIdentifier.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }
  return v16;
}

id sub_10011389C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10010FF74(&qword_1001EB4B8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    Locale.init(withAXRemapping:)();
    uint64_t v8 = type metadata accessor for Locale();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  }
  else
  {
    uint64_t v10 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v7, 1, 1, v10);
  }
  uint64_t KeyPath = swift_getKeyPath();
  __chkstk_darwin(KeyPath);
  v12[-2] = v3;
  v12[-1] = v7;
  v12[1] = v3;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  sub_100119BE8((uint64_t)v7, &qword_1001EB4B8);
  return [*(id *)(v3 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) _preferencesSelectedLanguageChanged];
}

uint64_t sub_100113B40@<X0>(uint64_t a1@<X8>)
{
  return sub_100110928(&OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage, &qword_1001EB4B8, a1);
}

uint64_t sub_100113B5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_10010FF74(&qword_1001EB4B8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100119E0C(a1, (uint64_t)v6, &qword_1001EB4B8);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_100119BE8((uint64_t)v6, &qword_1001EB4B8);
}

uint64_t sub_100113C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10010FF74(&qword_1001EB4B8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100119E0C(a2, (uint64_t)v6, &qword_1001EB4B8);
  uint64_t v7 = a1 + OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage;
  swift_beginAccess();
  sub_100119B84((uint64_t)v6, v7, &qword_1001EB4B8);
  swift_endAccess();
  [*(id *)(a1 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) _preferencesSelectedLanguageChanged];
  return sub_100119BE8((uint64_t)v6, &qword_1001EB4B8);
}

uint64_t sub_100113D98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10010FF74(&qword_1001EB4D8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v20 - v10;
  type metadata accessor for TTSExecutor();
  uint64_t v21 = static TTSExecutor.shared.getter();
  uint64_t v12 = type metadata accessor for TaskPriority();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v2;
  v14[3] = a1;
  v14[4] = a2;
  sub_100119DA8((uint64_t)v11, (uint64_t)v9, &qword_1001EB4D8);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12);
  id v16 = v3;
  swift_retain();
  if (v15 == 1)
  {
    sub_100119BE8((uint64_t)v9, &qword_1001EB4D8);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
  }
  uint64_t v17 = sub_100119AEC(&qword_1001EB4F0, (void (*)(uint64_t))&type metadata accessor for TTSExecutor);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = &unk_1001EB530;
  *(void *)(v18 + 24) = v14;
  uint64_t v22 = 6;
  uint64_t v23 = 0;
  uint64_t v24 = v21;
  uint64_t v25 = v17;
  swift_task_create();
  return swift_release();
}

uint64_t sub_100114014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a3;
  v4[12] = a4;
  v4[10] = a2;
  uint64_t v5 = type metadata accessor for Locale();
  v4[13] = v5;
  v4[14] = *(void *)(v5 - 8);
  v4[15] = swift_task_alloc();
  uint8_t v4[16] = sub_10010FF74(&qword_1001EB540);
  v4[17] = swift_task_alloc();
  sub_10010FF74(&qword_1001EB548);
  void v4[18] = swift_task_alloc();
  sub_10010FF74(&qword_1001EB4B8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  uint64_t v6 = sub_10010FF74(&qword_1001EB550);
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  uint64_t v7 = sub_10010FF74(&qword_1001EB558);
  v4[25] = v7;
  v4[26] = *(void *)(v7 - 8);
  v4[27] = swift_task_alloc();
  return _swift_task_switch(sub_100114248, 0, 0);
}

uint64_t sub_100114248()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = (void *)v0[10];
  *(void *)(swift_allocObject() + 16) = v3;
  id v4 = v3;
  sub_10010FF74(&qword_1001EB560);
  axObservationTrackingStream<A>(_:)();
  swift_release();
  swift_retain();
  AsyncStream.makeAsyncIterator()();
  uint64_t v5 = OBJC_IVAR____TtC3vot11VOTSettings_resolver;
  v0[28] = OBJC_IVAR____TtC3vot11VOTSettings___observationRegistrar;
  v0[29] = v5;
  v0[30] = OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage;
  swift_beginAccess();
  v0[32] = v2;
  v0[33] = v1;
  v0[31] = 0;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[34] = v6;
  void *v6 = v0;
  v6[1] = sub_1001143D4;
  uint64_t v7 = v0[22];
  return AsyncStream.Iterator.next(isolation:)(v0 + 5, 0, 0, v7);
}

uint64_t sub_1001143D4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001144D0, 0, 0);
}

uint64_t sub_1001144D0()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  v0[35] = v1;
  v0[36] = v2;
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = v0[32];
      uint64_t v5 = v0[26];
      uint64_t v4 = v0[27];
      uint64_t v6 = v0[25];
      (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
      sub_100119A78(v3);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v7 = (uint64_t (*)(void))v0[1];
      return v7();
    }
    else
    {
      uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of VoiceResolver.voice(forIdentifier:)
                                                              + async function pointer to dispatch thunk of VoiceResolver.voice(forIdentifier:));
      uint64_t v17 = (void *)swift_task_alloc();
      v0[37] = v17;
      void *v17 = v0;
      v17[1] = sub_100114860;
      uint64_t v18 = v0[18];
      return v20(v18, v1, v2);
    }
  }
  else
  {
    uint64_t v9 = v0[31];
    uint64_t v19 = v0[32];
    uint64_t v10 = v0[21];
    uint64_t v11 = v0[10];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[14] + 56))(v10, 1, 1, v0[13]);
    swift_getKeyPath();
    uint64_t v12 = swift_task_alloc();
    *(void *)(v12 + 16) = v11;
    *(void *)(v12 + 24) = v10;
    v0[7] = v11;
    sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    sub_100119BE8(v10, &qword_1001EB4B8);
    if (v19)
    {
      uint64_t v13 = (void (*)(void))v0[32];
      swift_retain();
      v13();
      uint64_t v14 = v0[32];
      sub_100119A78(v14);
      sub_100119A78(v14);
    }
    v0[32] = 0;
    v0[33] = 0;
    v0[31] = v9;
    int v15 = (void *)swift_task_alloc();
    v0[34] = v15;
    void *v15 = v0;
    v15[1] = sub_1001143D4;
    uint64_t v16 = v0[22];
    return AsyncStream.Iterator.next(isolation:)(v0 + 5, 0, 0, v16);
  }
}

uint64_t sub_100114860()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 288);
  uint64_t v2 = *(void *)(*(void *)v0 + 280);
  swift_task_dealloc();
  sub_100119AD8(v2, v1);
  return _swift_task_switch(sub_100114990, 0, 0);
}

uint64_t sub_100114990()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = type metadata accessor for CoreSynthesizer.Voice();
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_100119BE8(v1, &qword_1001EB548);
    uint64_t v4 = 1;
  }
  else
  {
    CoreSynthesizer.Voice.primaryLocale.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    uint64_t v4 = 0;
  }
  uint64_t v6 = v0 + 17;
  uint64_t v5 = v0[17];
  uint64_t v7 = v0[20];
  uint64_t v33 = v0[16];
  uint64_t v9 = v0[13];
  uint64_t v8 = v0[14];
  uint64_t v10 = v0[10];
  uint64_t v11 = v10 + v0[30];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v7, v4, 1, v9);
  swift_getKeyPath();
  v0[8] = v10;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v12 = v5 + *(int *)(v33 + 48);
  sub_100119E0C(v11, v5, &qword_1001EB4B8);
  sub_100119E0C(v7, v12, &qword_1001EB4B8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v13(v5, 1, v9) != 1)
  {
    uint64_t v15 = v0[13];
    sub_100119E0C(v0[17], v0[19], &qword_1001EB4B8);
    int v16 = v13(v12, 1, v15);
    uint64_t v17 = v0[19];
    if (v16 != 1)
    {
      uint64_t v18 = v0[17];
      uint64_t v19 = v0[14];
      uint64_t v20 = v0[15];
      uint64_t v21 = v0[13];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v20, v12, v21);
      sub_100119AEC(&qword_1001EB568, (void (*)(uint64_t))&type metadata accessor for Locale);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v23(v20, v21);
      v23(v17, v21);
      sub_100119BE8(v18, &qword_1001EB4B8);
      if (v22)
      {
        uint64_t v14 = v0[31];
        goto LABEL_14;
      }
      goto LABEL_12;
    }
    (*(void (**)(void, void))(v0[14] + 8))(v0[19], v0[13]);
LABEL_9:
    sub_100119BE8(*v6, &qword_1001EB540);
LABEL_12:
    uint64_t v6 = v0 + 21;
    uint64_t v24 = v0[21];
    uint64_t v14 = v0[31];
    uint64_t v25 = v0[10];
    sub_100119E0C(v0[20], v24, &qword_1001EB4B8);
    swift_getKeyPath();
    uint64_t v26 = swift_task_alloc();
    *(void *)(v26 + 16) = v25;
    *(void *)(v26 + 24) = v24;
    v0[9] = v25;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_task_dealloc();
    goto LABEL_13;
  }
  if (v13(v12, 1, v0[13]) != 1) {
    goto LABEL_9;
  }
  uint64_t v14 = v0[31];
LABEL_13:
  sub_100119BE8(*v6, &qword_1001EB4B8);
LABEL_14:
  uint64_t v27 = v0[32];
  sub_100119BE8(v0[20], &qword_1001EB4B8);
  if (v27)
  {
    uint64_t v28 = (void (*)(void))v0[32];
    swift_retain();
    v28();
    uint64_t v29 = v0[32];
    sub_100119A78(v29);
    sub_100119A78(v29);
  }
  v0[32] = 0;
  v0[33] = 0;
  v0[31] = v14;
  uint64_t v30 = (void *)swift_task_alloc();
  v0[34] = v30;
  void *v30 = v0;
  v30[1] = sub_1001143D4;
  uint64_t v31 = v0[22];
  return AsyncStream.Iterator.next(isolation:)(v0 + 5, 0, 0, v31);
}

uint64_t sub_100114E70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v33[0] = a2;
  uint64_t v3 = sub_10010FF74(&qword_1001EB4D0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v33 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v33 - v10;
  uint64_t v12 = sub_10010FF74(&qword_1001EB570);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v33 - v16;
  AXPreferences.VoiceOver.currentVoiceRotor.getter();
  swift_getKeyPath();
  v33[1] = a1;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v18 = a1 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity;
  swift_beginAccess();
  sub_100119E0C(v18, (uint64_t)v11, &qword_1001EB4D0);
  sub_100119E0C((uint64_t)v17, (uint64_t)v15, &qword_1001EB570);
  uint64_t v19 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19) == 1)
  {
    sub_100119BE8((uint64_t)v15, &qword_1001EB570);
    sub_100119E0C((uint64_t)v11, (uint64_t)v9, &qword_1001EB4D0);
  }
  else
  {
    uint64_t v21 = AXPreferences.VoiceOver.VoiceRotorItem.voiceId.getter();
    uint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
    sub_100119E0C((uint64_t)v11, (uint64_t)v9, &qword_1001EB4D0);
    if (v23)
    {
      sub_100119BE8((uint64_t)v9, &qword_1001EB4D0);
      sub_100119BE8((uint64_t)v11, &qword_1001EB4D0);
      uint64_t result = sub_100119BE8((uint64_t)v17, &qword_1001EB570);
      uint64_t v25 = v33[0];
      *(void *)v33[0] = v21;
      *(void *)(v25 + _Block_object_dispose(&STACK[0x2C0], 8) = v23;
      return result;
    }
  }
  sub_100119E0C((uint64_t)v9, (uint64_t)v6, &qword_1001EB4D0);
  uint64_t v26 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v6, 1, v26) == 1)
  {
    sub_100119BE8((uint64_t)v9, &qword_1001EB4D0);
    sub_100119BE8((uint64_t)v11, &qword_1001EB4D0);
    sub_100119BE8((uint64_t)v17, &qword_1001EB570);
    uint64_t result = sub_100119BE8((uint64_t)v6, &qword_1001EB4D0);
    uint64_t v28 = v33[0];
    *(void *)v33[0] = 0;
    *(void *)(v28 + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
  }
  else
  {
    uint64_t v29 = AXPreferences.VoiceOver.Activity.voiceIdentifier.getter();
    uint64_t v31 = v30;
    sub_100119BE8((uint64_t)v9, &qword_1001EB4D0);
    sub_100119BE8((uint64_t)v11, &qword_1001EB4D0);
    sub_100119BE8((uint64_t)v17, &qword_1001EB570);
    uint64_t v32 = v33[0];
    *(void *)v33[0] = v29;
    *(void *)(v32 + _Block_object_dispose(&STACK[0x2C0], 8) = v31;
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v6, v26);
  }
  return result;
}

uint64_t sub_1001153FC(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return _swift_task_switch(sub_100115474, 0, 0);
}

uint64_t sub_100115474()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100115514;
  return AXPreferences.VoiceOver.effectiveSpeakingRate()();
}

uint64_t sub_100115514(float a1)
{
  uint64_t v3 = *(void (***)(void, float))(*v1 + 24);
  id v4 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  v3[2](v3, a1);
  _Block_release(v3);
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t sub_1001157D4(const void *a1, void *a2, float a3)
{
  *(void *)(v3 + 16) = a2;
  *(float *)(v3 + 40) = a3;
  *(void *)(v3 + 24) = _Block_copy(a1);
  id v5 = a2;
  return _swift_task_switch(sub_100115850, 0, 0);
}

uint64_t sub_100115850()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001158F4;
  v2.n128_u32[0] = *(_DWORD *)(v0 + 40);
  return AXPreferences.VoiceOver.setEffectiveSpeakingRate(_:)(v2);
}

uint64_t sub_1001158F4()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 24);
  __n128 v2 = *(void **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();

  v1[2](v1);
  _Block_release(v1);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_100115A2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  uint64_t v25 = a2;
  uint64_t v9 = sub_10010FF74(&qword_1001EB4D8);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v23 - v13;
  type metadata accessor for TTSExecutor();
  uint64_t v26 = static TTSExecutor.shared.getter();
  uint64_t v15 = type metadata accessor for TaskPriority();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = v24;
  v17[3] = a5;
  v17[4] = v5;
  v17[5] = a1;
  v17[6] = v25;
  v17[7] = a3;
  sub_100119DA8((uint64_t)v14, (uint64_t)v12, &qword_1001EB4D8);
  LODWORD(v14) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15);
  id v18 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  id v19 = v5;
  if (v14 == 1)
  {
    sub_100119BE8((uint64_t)v12, &qword_1001EB4D8);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v15);
  }
  uint64_t v20 = sub_100119AEC(&qword_1001EB4F0, (void (*)(uint64_t))&type metadata accessor for TTSExecutor);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = &unk_1001EB518;
  *(void *)(v21 + 24) = v17;
  uint64_t v27 = 6;
  uint64_t v28 = 0;
  uint64_t v29 = v26;
  uint64_t v30 = v20;
  swift_task_create();
  return swift_release();
}

uint64_t sub_100115CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a2;
  v7[3] = a3;
  uint64_t v11 = type metadata accessor for VoiceSelection();
  v7[4] = v11;
  void v7[5] = *(void *)(v11 - 8);
  uint64_t v12 = swift_task_alloc();
  v7[6] = v12;
  uint64_t v13 = (void *)swift_task_alloc();
  v7[7] = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_100115DF0;
  return sub_100116060(v12, a5, a6, a7);
}

uint64_t sub_100115DF0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100115EEC, 0, 0);
}

uint64_t sub_100115EEC()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100116060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for Locale();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  sub_10010FF74(&qword_1001EB4D0);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  return _swift_task_switch(sub_100116168, 0, 0);
}

uint64_t sub_100116168()
{
  id v1 = [self outputManagerIfExists];
  if (!v1)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v4 = v1;
  id v5 = [v1 speechComponent];

  if (!v5)
  {
LABEL_13:
    __break(1u);
    return AXPreferences.VoiceOver.voiceSelection(locale:withActivity:)(v1, v2, v3);
  }
  id v6 = [v5 determineActivityForAction:v0[3]];

  uint64_t v7 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  if (!v6)
  {
    uint64_t v13 = v0[11];
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = v0[10];
  v8(v10, 1, 1, v7);
  sub_100119AEC(&qword_1001EB508, (void (*)(uint64_t))&type metadata accessor for AXPreferences.VoiceOver.Activity);
  dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();

  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v7);
  uint64_t v12 = v0[11];
  if (v11 == 1)
  {
    uint64_t v13 = v0[11];
LABEL_7:
    uint64_t v14 = 1;
    goto LABEL_9;
  }
  (*(void (**)(void, void, uint64_t))(v9 + 32))(v0[11], v0[10], v7);
  uint64_t v13 = v12;
  uint64_t v14 = 0;
LABEL_9:
  v8(v13, v14, 1, v7);
  swift_bridgeObjectRetain();
  Locale.init(withAXRemapping:)();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[12] = v15;
  void *v15 = v0;
  v15[1] = sub_1001163E4;
  uint64_t v3 = v0[11];
  uint64_t v2 = v0[9];
  id v1 = (id)v0[2];
  return AXPreferences.VoiceOver.voiceSelection(locale:withActivity:)(v1, v2, v3);
}

uint64_t sub_1001163E4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001164E0, 0, 0);
}

uint64_t sub_1001164E0()
{
  uint64_t v1 = v0[11];
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  sub_100119BE8(v1, &qword_1001EB4D0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100116588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = a2;
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v7 = sub_10010FF74(&qword_1001EB4D0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10010FF74(&qword_1001EB4D8);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - v15;
  type metadata accessor for TTSExecutor();
  uint64_t v33 = static TTSExecutor.shared.getter();
  uint64_t v17 = type metadata accessor for TaskPriority();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  sub_100119E0C(a3, (uint64_t)v10, &qword_1001EB4D0);
  unint64_t v19 = (*(unsigned __int8 *)(v8 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = v29;
  v20[3] = a5;
  uint64_t v22 = v31;
  uint64_t v21 = v32;
  uint64_t v23 = v30;
  v20[4] = v32;
  v20[5] = v23;
  v20[6] = v22;
  sub_100119DA8((uint64_t)v10, (uint64_t)v20 + v19, &qword_1001EB4D0);
  sub_100119DA8((uint64_t)v16, (uint64_t)v14, &qword_1001EB4D8);
  LODWORD(v19) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17);
  swift_retain();
  id v24 = v21;
  swift_bridgeObjectRetain();
  if (v19 == 1)
  {
    sub_100119BE8((uint64_t)v14, &qword_1001EB4D8);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v17);
  }
  uint64_t v25 = sub_100119AEC(&qword_1001EB4F0, (void (*)(uint64_t))&type metadata accessor for TTSExecutor);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = &unk_1001EB4E8;
  *(void *)(v26 + 24) = v20;
  uint64_t v34 = 6;
  uint64_t v35 = 0;
  uint64_t v36 = v33;
  uint64_t v37 = v25;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1001168C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  void v7[5] = a5;
  v7[2] = a2;
  v7[3] = a3;
  uint64_t v8 = type metadata accessor for Locale();
  v7[8] = v8;
  v7[9] = *(void *)(v8 - 8);
  v7[10] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for VoiceSelection();
  v7[11] = v9;
  v7[12] = *(void *)(v9 - 8);
  v7[13] = swift_task_alloc();
  return _swift_task_switch(sub_1001169EC, 0, 0);
}

uint64_t sub_1001169EC()
{
  swift_bridgeObjectRetain();
  Locale.init(withAXRemapping:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[14] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100116AC4;
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  return AXPreferences.VoiceOver.voiceSelection(locale:withActivity:)(v2, v3, v4);
}

uint64_t sub_100116AC4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100116BC0, 0, 0);
}

uint64_t sub_100116BC0()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = (void (*)(uint64_t))v0[2];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  v4(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  id v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

id sub_100116E3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CoreSynthesizer.Voice.Trait();
  __chkstk_darwin(v2 - 8);
  uint64_t v37 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for VoiceResolver.Mode();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = OBJC_IVAR____TtC3vot11VOTSettings_settings;
  type metadata accessor for AXPreferences();
  uint64_t v8 = v0;
  uint64_t v9 = (char *)static AXPreferences.shared.getter();
  uint64_t v10 = (id *)&v9[direct field offset for AXPreferences.voiceover];
  swift_beginAccess();
  id v11 = *v10;

  *(void *)&v1[v7] = v11;
  uint64_t v34 = OBJC_IVAR____TtC3vot11VOTSettings_resolver;
  v33[1] = type metadata accessor for VoiceResolver();
  sub_10010FF74(&qword_1001EB5B8);
  uint64_t v12 = type metadata accessor for VoiceResolver.VoiceSortKey();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10016EB10;
  unint64_t v17 = v16 + v15;
  static CoreSynthesizer.Voice.Trait.firstParty.getter();
  uint64_t v18 = enum case for VoiceResolver.VoiceSortKey.trait(_:);
  unint64_t v19 = *(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 104);
  v19(v17, enum case for VoiceResolver.VoiceSortKey.trait(_:), v12);
  static CoreSynthesizer.Voice.Trait.localeDefault.getter();
  v19(v17 + v14, v18, v12);
  v19(v17 + 2 * v14, enum case for VoiceResolver.VoiceSortKey.quality(_:), v12);
  v19(v17 + 3 * v14, enum case for VoiceResolver.VoiceSortKey.name(_:), v12);
  uint64_t *v6 = v16;
  (*(void (**)(uint64_t *, void, uint64_t))(v35 + 104))(v6, enum case for VoiceResolver.Mode.custom(_:), v36);
  uint64_t v20 = type metadata accessor for DefaultVoiceSource();
  uint64_t v21 = static DefaultVoiceSource.shared.getter();
  uint64_t v40 = v20;
  uint64_t v41 = &protocol witness table for DefaultVoiceSource;
  uint64_t v39 = v21;
  static CoreSynthesizer.Voice.Trait.installed.getter();
  *(void *)&v8[v34] = VoiceResolver.__allocating_init(voiceSource:requiredTraits:sortMode:)();
  id result = [self sharedWorkspace];
  if (result)
  {
    *(void *)&v8[OBJC_IVAR____TtC3vot11VOTSettings_workspace] = result;
    uint64_t v23 = &v8[OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage];
    uint64_t v24 = type metadata accessor for Locale();
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    v25(v23, 1, 1, v24);
    v25(v23, 1, 1, v24);
    uint64_t v26 = &v8[OBJC_IVAR____TtC3vot11VOTSettings__systemVoiceSelection];
    uint64_t v27 = type metadata accessor for VoiceSelection();
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
    v28(v26, 1, 1, v27);
    v28(v26, 1, 1, v27);
    uint64_t v29 = &v8[OBJC_IVAR____TtC3vot11VOTSettings__currentActivity];
    uint64_t v30 = type metadata accessor for AXPreferences.VoiceOver.Activity();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
    v25(&v8[OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage], 1, 1, v24);
    v25(&v8[OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage], 1, 1, v24);
    *(void *)&v8[OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters] = &_swiftEmptyDictionarySingleton;
    sub_10010FF74(&qword_1001EB5C0);
    uint64_t v31 = swift_allocObject();
    *(_DWORD *)(v31 + 16) = 0;
    *(void *)&v8[OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock] = v31;
    ObservationRegistrar.init()();

    uint64_t v32 = (objc_class *)type metadata accessor for VOTSettings();
    v38.receiver = v8;
    v38.super_class = v32;
    return objc_msgSendSuper2(&v38, "init");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100117480()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100117544@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = (void *)(v3 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters);
  swift_beginAccess();
  *a2 = *v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100117610()
{
  return swift_release();
}

uint64_t sub_1001176F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters);
  swift_beginAccess();
  *uint64_t v3 = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100117760()
{
  return swift_retain();
}

uint64_t sub_10011780C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock);
  return swift_retain();
}

uint64_t sub_1001178C0()
{
  return swift_release();
}

uint64_t sub_1001179A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v43 = (char *)&v40 - v15;
  uint64_t v16 = sub_10010FF74(&qword_1001EB4B8);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v14;
  if (a4)
  {
    uint64_t v41 = v11;
    uint64_t v42 = v10;
    uint64_t v44 = a1;
    uint64_t v45 = a2;
    uint64_t v19 = a4;
  }
  else
  {
    uint64_t v28 = a2;
    swift_getKeyPath();
    v47[1] = v5;
    sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    uint64_t v29 = v5 + OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage;
    swift_beginAccess();
    sub_100119E0C(v29, (uint64_t)v18, &qword_1001EB4B8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 1, v10))
    {
      sub_100119BE8((uint64_t)v18, &qword_1001EB4B8);
      char v27 = 1;
      return v27 & 1;
    }
    uint64_t v44 = a1;
    uint64_t v45 = v28;
    objc_super v38 = v43;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v43, v18, v10);
    sub_100119BE8((uint64_t)v18, &qword_1001EB4B8);
    a3 = Locale.minimalCanonicLocaleIdentifier.getter();
    uint64_t v19 = v39;
    uint64_t v41 = v11;
    uint64_t v42 = v10;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v38, v10);
  }
  swift_getKeyPath();
  uint64_t v20 = v5 + OBJC_IVAR____TtC3vot11VOTSettings___observationRegistrar;
  v47[0] = v5;
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  swift_bridgeObjectRetain();
  uint64_t v40 = v20;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  uint64_t v21 = swift_release();
  uint64_t v22 = OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock;
  uint64_t v23 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock);
  uint64_t v24 = __chkstk_darwin(v21);
  *(&v40 - 4) = v5;
  *(&v40 - 3) = a3;
  *(&v40 - 2) = v19;
  __chkstk_darwin(v24);
  *(&v40 - 2) = (uint64_t)sub_100118694;
  *(&v40 - 1) = v25;
  swift_retain();
  os_unfair_lock_lock(v23 + 4);
  sub_100119444(v47);
  os_unfair_lock_unlock(v23 + 4);
  uint64_t v26 = v47[0];
  swift_release();
  if (v26)
  {
    swift_bridgeObjectRelease();
    char v27 = dispatch thunk of AXCachedLocaleCharacterSupportMatrix.supports(string:)();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = v46;
    Locale.init(withAXRemapping:)();
    uint64_t v31 = v41;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v43, v30, v42);
    type metadata accessor for AXCachedLocaleCharacterSupportMatrix();
    swift_allocObject();
    uint64_t v32 = AXCachedLocaleCharacterSupportMatrix.init(locale:)();
    swift_getKeyPath();
    v47[0] = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    uint64_t v33 = swift_release();
    uint64_t v43 = (char *)&v40;
    uint64_t v34 = *(os_unfair_lock_s **)(v5 + v22);
    uint64_t v35 = __chkstk_darwin(v33);
    *(&v40 - 4) = v5;
    *(&v40 - 3) = a3;
    *(&v40 - 2) = v19;
    *(&v40 - 1) = v32;
    __chkstk_darwin(v35);
    *(&v40 - 2) = (uint64_t)sub_100119488;
    *(&v40 - 1) = v36;
    swift_retain();
    os_unfair_lock_lock(v34 + 4);
    sub_1001194A8();
    os_unfair_lock_unlock(v34 + 4);
    swift_bridgeObjectRelease();
    swift_release();
    char v27 = dispatch thunk of AXCachedLocaleCharacterSupportMatrix.supports(string:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v46, v42);
  }
  return v27 & 1;
}

uint64_t sub_100117EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  swift_getKeyPath();
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  swift_bridgeObjectRetain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = (uint64_t *)(a1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters);
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_100118CA8(a2, a3);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
      swift_retain();
    }
    else
    {
      uint64_t v12 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v12;
  return result;
}

uint64_t sub_100118030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getKeyPath();
  sub_100119AEC(&qword_1001EB4C0, (void (*)(uint64_t))type metadata accessor for VOTSettings);
  swift_bridgeObjectRetain();
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v8 = (uint64_t *)(a1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v8;
  uint64_t *v8 = 0x8000000000000000;
  sub_10011911C(a4, a2, a3, isUniquelyReferenced_nonNull_native);
  uint64_t *v8 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  return swift_release();
}

id sub_100118270()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VOTSettings();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001183DC()
{
  return type metadata accessor for VOTSettings();
}

uint64_t type metadata accessor for VOTSettings()
{
  uint64_t result = qword_1001EB488;
  if (!qword_1001EB488) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100118430()
{
  sub_100118604(319, &qword_1001EB4A0, (void (*)(uint64_t))&type metadata accessor for Locale);
  if (v0 <= 0x3F)
  {
    sub_100118604(319, &qword_1001EB4A8, (void (*)(uint64_t))&type metadata accessor for VoiceSelection);
    if (v1 <= 0x3F)
    {
      sub_100118604(319, &qword_1001EB4B0, (void (*)(uint64_t))&type metadata accessor for AXPreferences.VoiceOver.Activity);
      if (v2 <= 0x3F)
      {
        type metadata accessor for ObservationRegistrar();
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

void sub_100118604(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100118658@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100110BFC(a1, &OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage, &qword_1001EB4B8, a2);
}

uint64_t sub_100118694@<X0>(void *a1@<X8>)
{
  return sub_100117EEC(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1001186B4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *unint64_t v4 = v2;
  v4[1] = sub_10011A630;
  return v6(a1);
}

uint64_t sub_100118790(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *unint64_t v4 = v3;
  v4[1] = sub_10011A594;
  return v6();
}

uint64_t sub_10011885C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_10011A594;
  return v7();
}

uint64_t sub_100118928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100119BE8(a1, &qword_1001EB4D8);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100118AD4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100118BB0;
  return v6(a1);
}

uint64_t sub_100118BB0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_100118CA8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100118D20(a1, a2, v4);
}

unint64_t sub_100118D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_100118E04(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10010FF74(&qword_1001EB4C8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10011911C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100118CA8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10011928C();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100118E04(v15, a4 & 1);
  unint64_t v21 = sub_100118CA8(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void *sub_10011928C()
{
  unint64_t v1 = v0;
  sub_10010FF74(&qword_1001EB4C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100119444@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_100119488()
{
  return sub_100118030(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1001194A8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001194D8()
{
  return sub_1001176F0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001194F4()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_100119538()
{
  return sub_100110248(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100119554()
{
  uint64_t v1 = *(void *)(sub_10010FF74(&qword_1001EB4D0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for AXPreferences.VoiceOver.Activity();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10011968C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10010FF74(&qword_1001EB4D0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10011A594;
  return sub_1001168C8(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1001197A0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10011A594;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001EB4F8 + dword_1001EB4F8);
  return v6(a1, v4);
}

uint64_t sub_100119858()
{
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001198A8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10011A594;
  return sub_100115CC8(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10011997C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001199BC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10011A594;
  return sub_100114014(a1, v4, v5, v6);
}

uint64_t sub_100119A70@<X0>(uint64_t a1@<X8>)
{
  return sub_100114E70(*(void *)(v1 + 16), a1);
}

uint64_t sub_100119A78(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100119A88@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100110BFC(a1, &OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage, &qword_1001EB4B8, a2);
}

uint64_t sub_100119ABC()
{
  return sub_100113C9C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100119AD8(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100119AEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100119B34@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100110BFC(a1, &OBJC_IVAR____TtC3vot11VOTSettings__currentActivity, &qword_1001EB4D0, a2);
}

uint64_t sub_100119B68()
{
  return sub_100111EB4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100119B84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10010FF74(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_100119BE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10010FF74(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100119C44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100110BFC(a1, &OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage, &qword_1001EB4B8, a2);
}

uint64_t sub_100119C78()
{
  return sub_100113350(*(void *)(v0 + 16), *(void *)(v0 + 24), &qword_1001EB4B8, &OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage);
}

uint64_t sub_100119CA4()
{
  return sub_10011A024((void (*)(void))&_swift_release);
}

uint64_t sub_100119CBC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10011A594;
  return sub_100112608(a1, v4, v5, v6);
}

uint64_t sub_100119D70()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100119DA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10010FF74(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100119E0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10010FF74(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100119E70@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100110BFC(a1, &OBJC_IVAR____TtC3vot11VOTSettings__systemVoiceSelection, &qword_1001EB578, a2);
}

uint64_t sub_100119EA4()
{
  return sub_100113350(*(void *)(v0 + 16), *(void *)(v0 + 24), &qword_1001EB578, &OBJC_IVAR____TtC3vot11VOTSettings__systemVoiceSelection);
}

uint64_t sub_100119ED0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10010FF74(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100119F34()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100119F6C()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_100119F74()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100119FB0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = (id)VoiceSelection._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_10011A00C()
{
  return sub_10011A024((void (*)(void))&__Block_release);
}

uint64_t sub_10011A024(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_10011A06C()
{
  float v2 = *(float *)(v0 + 16);
  uint64_t v3 = *(const void **)(v0 + 24);
  uint64_t v4 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10011A120;
  uint64_t v6 = (uint64_t (*)(const void *, void *, float))((char *)&dword_1001EB5C8 + dword_1001EB5C8);
  return v6(v3, v4, v2);
}

uint64_t sub_10011A120()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10011A218()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10011A594;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001EB5D8 + dword_1001EB5D8);
  return v6(v2, v3, v4);
}

uint64_t sub_10011A2DC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10011A594;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001EB5E8 + dword_1001EB5E8);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10011A3A8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10011A120;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001EB5F8 + dword_1001EB5F8);
  return v6(a1, v4);
}

uint64_t sub_10011A460()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011A4A0()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10011A594;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1001EB608 + dword_1001EB608);
  return v5(v2, v3);
}

uint64_t sub_10011A554()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10011A5B8()
{
  return sub_100119ABC();
}

uint64_t sub_10011A5D0()
{
  return sub_100119C78();
}

uint64_t sub_10011A5E8()
{
  return sub_100119538();
}

uint64_t sub_10011A600()
{
  return sub_100119EA4();
}

uint64_t sub_10011A618()
{
  return sub_100119B68();
}

void *acm_mem_alloc_data(size_t size)
{
  uint64_t result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result) {
    qword_1001EBDF0 += size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1001EBDF0 - __n;
    if (qword_1001EBDF0 < __n) {
      uint64_t v4 = 0;
    }
    qword_1001EBDF0 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    qword_1001EBDE8 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v6 = "NULL";
    if (result) {
      uint64_t v7 = result;
    }
    else {
      uint64_t v7 = "NULL";
    }
    if (a4) {
      uint64_t v8 = a4;
    }
    else {
      uint64_t v8 = "NULL";
    }
    if (a6) {
      uint64_t v6 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_1001EBDE8, 0, qword_1001EBDF0, qword_1001EBDF8, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = qword_1001EBDE8 - a3;
    if (qword_1001EBDE8 < a3) {
      uint64_t v6 = 0;
    }
    qword_1001EBDE8 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v7 = "NULL";
    if (result) {
      uint64_t v8 = result;
    }
    else {
      uint64_t v8 = "NULL";
    }
    if (a4) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = "NULL";
    }
    if (a6) {
      uint64_t v7 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_1001EBDE8, 0, qword_1001EBDF0, qword_1001EBDF8, v9, a5, v7);
  }
  return result;
}

uint64_t LibCall_ACMKernelControl_Block(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  size_t v5 = v4;
  uint64_t v7 = v6;
  int v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))v1;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl_Block");
  }
  uint64_t v17 = 0x2000;
  uint64_t v13 = LibCall_ACMKernelControl(v12, v11, v9, v7, v5, (uint64_t)v18, (uint64_t)&v17);
  if (v3)
  {
    if (v17) {
      unint64_t v14 = v18;
    }
    else {
      unint64_t v14 = 0;
    }
    (*(void (**)(uint64_t, unsigned char *))(v3 + 16))(v3, v14);
  }
  if (v13) {
    unsigned int v15 = 70;
  }
  else {
    unsigned int v15 = 10;
  }
  if (v15 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl_Block", (int)v13);
  }
  return v13;
}

uint64_t sub_10011A98C(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1001EB629 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    unint64_t v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    uint64_t v14 = sub_10011AB6C();
    unsigned int v15 = 70;
    if (v14)
    {
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = sub_10011AD50(*a1, a2, a3, a4, a5, a6, a7);
      if (v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }
  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293;
  }
  if (v15 >= byte_1001EB629 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    unint64_t v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

uint64_t sub_10011AB6C()
{
  if (byte_1001EB629 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    int v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if (byte_1001EBE04)
  {
    uint64_t v0 = 0;
  }
  else
  {
    CFDictionaryRef v1 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      unsigned int v4 = 70;
      uint64_t v0 = 4294967291;
      goto LABEL_10;
    }
    io_object_t v3 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_1001EBE00);
    if (v0)
    {
      unsigned int v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_1001EBE04 = 1;
  }
  unsigned int v4 = 10;
LABEL_10:
  if (v4 >= byte_1001EB629 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    int v9 = "init";
    __int16 v10 = 2048;
    uint64_t v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_10011AD50(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1001EB629 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    BOOL v25 = "ACMLib";
    __int16 v26 = 2080;
    BOOL v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t inputStructCnt = 0;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    unsigned int v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293;
    }
    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(dword_1001EBE00, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if (v17)
      {
        if (byte_1001EB629 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136316418;
          BOOL v25 = "ACMLib";
          __int16 v26 = 2080;
          BOOL v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)uint64_t v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_1001EB629 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 136315906;
          BOOL v25 = "ACMLib";
          __int16 v26 = 2080;
          BOOL v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)uint64_t v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        uint64_t v18 = 0;
        if (a7) {
          *a7 = v22;
        }
      }
    }
    size_t v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if (v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }
  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291;
  }
  if (v20 >= byte_1001EB629 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315650;
    BOOL v25 = "ACMLib";
    __int16 v26 = 2080;
    BOOL v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)uint64_t v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMKernelControl(int a1)
{
  if (byte_1001EB629 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315394;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    __int16 v8 = "ACMKernelControl";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v2 = LibCall_ACMKernelControl_Block((uint64_t)sub_10011A98C);
  if (v2) {
    unsigned int v3 = 70;
  }
  else {
    unsigned int v3 = 10;
  }
  if (v3 >= byte_1001EB629 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136315906;
    int v6 = "ACMLib";
    __int16 v7 = 2080;
    __int16 v8 = "ACMKernelControl";
    __int16 v9 = 2048;
    uint64_t v10 = (int)v2;
    __int16 v11 = 1024;
    int v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, code=%u.\n", buf, 0x26u);
  }
  return v2;
}

unsigned char *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  }
  int v12 = 0;
  if (a5) {
    BOOL v13 = a4 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)int v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  }
  return v12;
}

uint64_t LibCall_ACMKernelControl(uint64_t (*a1)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t), uint64_t a2, int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v13 = a1;
  if (gACMLoggingLevel <= 0xAu) {
    a1 = (uint64_t (*)(uint64_t, uint64_t, void, char *, size_t, uint64_t, uint64_t))printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl");
  }
  if (!v13) {
    goto LABEL_16;
  }
  BOOL v14 = a5 != 0;
  if (a4) {
    BOOL v14 = a5 - 4097 < 0xFFFFFFFFFFFFF000;
  }
  if (v14)
  {
LABEL_16:
    unsigned int v18 = 70;
    uint64_t v17 = 4294967293;
  }
  else
  {
    uint64_t v20 = (uint64_t)&v20;
    __chkstk_darwin(a1);
    unsigned int v15 = (_DWORD *)((char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0));
    _DWORD *v15 = a3;
    size_t v16 = v15 + 1;
    if (a5)
    {
      memcpy(v15 + 1, a4, a5);
      size_t v16 = (_DWORD *)((char *)v16 + a5);
    }
    if (v16 != (_DWORD *)((char *)v15 + a5 + 4)) {
      sub_10011B5B4();
    }
    uint64_t v17 = v13(a2, 26, 0, (char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0), a5 + 4, a6, a7);
    if (v17) {
      unsigned int v18 = 70;
    }
    else {
      unsigned int v18 = 10;
    }
  }
  if (v18 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl", (int)v17);
  }
  return v17;
}

void sub_10011B5B4()
{
  __assert_rtn("LibCall_ACMKernelControl", "LibCall.c", 373, "commandCursor == commandBuffer + sizeof(commandBuffer)");
}

void sub_10011B5E0(int *a1, int a2, os_log_t log)
{
  int v3 = *a1;
  v4[0] = 67109376;
  v4[1] = a2;
  __int16 v5 = 1024;
  int v6 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Could not conusme start message: %d[%d]", (uint8_t *)v4, 0xEu);
}

void sub_10011B66C(os_log_t log)
{
  *(_WORD *)CFDictionaryRef v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "VO: Cannot set keep alive", v1, 2u);
}

void sub_10011B728(NSObject *a1)
{
  uint64_t v2 = +[NSThread callStackSymbols];
  sub_100010BDC();
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "***Shutdown requested during unit tests.  This shouldn't happen***\n%@", v3, 0xCu);
}

void sub_10011B7C4()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Could not set full mute: %@", v2, v3, v4, v5, v6);
}

void sub_10011B82C()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Set full mute to off %@", v2, v3, v4, v5, v6);
}

void sub_10011B894()
{
  CFAbsoluteTimeGetCurrent();
  sub_100010C20((void *)&_mh_execute_header, v0, v1, "Audio session toggled at t=%f", v2, v3, v4, v5, 0);
}

void sub_10011B910()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Error toggle audio session: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10011B978(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Using extended audio session timeout", v1, 2u);
}

void sub_10011B9BC(id *a1, NSObject *a2)
{
  unsigned int v3 = [*a1 externalAudioRouteSelected];
  v4[0] = 67109120;
  v4[1] = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "External route selected: %d", (uint8_t *)v4, 8u);
}

void sub_10011BA4C()
{
  CFAbsoluteTimeGetCurrent();
  sub_100010C20((void *)&_mh_execute_header, v0, v1, "Session deactivated. at t=%f", v2, v3, v4, v5, 0);
}

void sub_10011BAC8(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "attempting to play nil sound file", v1, 2u);
}

void sub_10011BB0C(uint64_t a1, NSObject *a2)
{
  unsigned int v4 = [(id)VOTSharedWorkspace screenOn];
  CFStringRef v5 = @"off";
  if (v4) {
    CFStringRef v5 = @"on";
  }
  int v6 = 138412546;
  CFStringRef v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "screen is %@, sound: %@", (uint8_t *)&v6, 0x16u);
}

void sub_10011BBCC()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Playing haptic: %@", v2, v3, v4, v5, v6);
}

void sub_10011BC34()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Playing sound: %@", v2, v3, v4, v5, v6);
}

void sub_10011BC9C()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Dispatching event: %@", v2, v3, v4, v5, v6);
}

void sub_10011BD04(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  int v3 = 138543362;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Media server session lost - remaking player for %{public}@", (uint8_t *)&v3, 0xCu);
}

void sub_10011BD80(uint64_t a1, id *a2)
{
  [*a2 numberOfChannels];
  sub_100013CBC((void *)&_mh_execute_header, v2, v3, "Made sound file: %{public}@ [channels %lu]", v4, v5, v6, v7, 2u);
}

void sub_10011BE10(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Existing sound channel count: %ld", (uint8_t *)&v3, 0xCu);
}

void sub_10011BE8C()
{
  sub_100013CA4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "finish player?  %@ -> %@", v1, 0x16u);
}

void sub_10011BF04(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Deactivating AudioServices", v1, 2u);
}

void sub_10011BF48(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "finish play mute SSS: %@", (uint8_t *)&v3, 0xCu);
}

void sub_10011BFC4()
{
  sub_100013CA4();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Decode failure: %@/%@", v1, 0x16u);
}

void sub_10011C03C(char a1)
{
  uint64_t v1 = +[NSNumber numberWithBool:a1 & 1];
  sub_100013CBC((void *)&_mh_execute_header, v2, v3, "Finish playing: %@/%@", v4, v5, v6, v7, 2u);
}

void sub_10011C0EC(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 label];
  uint64_t v5 = [a1 bundleIdentifier];
  int v6 = 138543618;
  uint64_t v7 = v4;
  __int16 v8 = 2114;
  uint64_t v9 = v5;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Element found using deprecated accessibility trait. This trait will be removed very soon. Please use an accessibilityContainerType of UIAccessibilityContainerTypeSemanticGroup. Element Label: %{public}@, App: %{public}@", (uint8_t *)&v6, 0x16u);
}

void sub_10011C1B0()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Activating touch container succeeded.", v2, v3, v4, v5, v6);
}

void sub_10011C1E4()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Falling back to using center point since we couldn't hit test the element.", v2, v3, v4, v5, v6);
}

void sub_10011C218()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Had a text cursor, so we didn't try to activate since we don't want to move the cursor position.", v2, v3, v4, v5, v6);
}

void sub_10011C24C()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Activating touch container failed.", v2, v3, v4, v5, v6);
}

void sub_10011C280()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Doing an activate action since this is a touch container, so its center point might be somewhere random.", v2, v3, v4, v5, v6);
}

void sub_10011C2B4(CGPoint *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4 = NSStringFromCGPoint(*a1);
  sub_100010BDC();
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Was original center point (dispatchPoint: %@)", v5, 0xCu);
}

void sub_10011C350()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "new element %@", v2, v3, v4, v5, v6);
}

void sub_10011C3B8()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "new parent %@", v2, v3, v4, v5, v6);
}

void sub_10011C420()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "simple tap has wrong cell range!", v2, v3, v4, v5, v6);
}

void sub_10011C454()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Performing simple tap for %@...", v2, v3, v4, v5, v6);
}

void sub_10011C4BC()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Fall back to simple tap for web combo boxes.", v2, v3, v4, v5, v6);
}

void sub_10011C4F0()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Was a link but apparently we didn't go anywhere.  Need to fallback to regular simple tap.", v2, v3, v4, v5, v6);
}

void sub_10011C524()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Was a text entry field and didn't start editing.  Need to fallback to regular simple tap.", v2, v3, v4, v5, v6);
}

void sub_10011C558(char a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Supports activate.  Successfully activated: %i", (uint8_t *)v2, 8u);
}

void sub_10011C5D4(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *UIKitServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"VOTElement.m", 75, @"%s", *a1);

  __break(1u);
}

void sub_10011C654(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [a1 localizedDescription];
  int v6 = 138543618;
  uint64_t v7 = v5;
  __int16 v8 = 2114;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error translating touch points to print braille: %{public}@, points = %{public}@", (uint8_t *)&v6, 0x16u);
}

void sub_10011C704(void *a1)
{
  LODWORD(v3) = 138543618;
  *(void *)((char *)&v3 + 4) = *a1;
  sub_10002B3F8();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "Braille buffer = \"%{public}@\", removed \"%{public}@\"", (void)v3, DWORD2(v3));
}

void sub_10011C77C(uint64_t a1)
{
  LODWORD(v3) = 138543618;
  *(void *)((char *)&v3 + 4) = a1;
  sub_10002B3F8();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "standalone = \"%{public}@\", prefiCGFloat x = \"%{public}@\"", (void)v3, DWORD2(v3));
}

void sub_10011C7F0(uint64_t a1)
{
  LODWORD(v3) = 138543618;
  *(void *)((char *)&v3 + 4) = a1;
  sub_10002B3F8();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "infiCGFloat x = \"%{public}@\", suffiCGFloat x = \"%{public}@\"", (void)v3, DWORD2(v3));
}

void sub_10011C864(os_log_t log)
{
  int v1 = 138412290;
  CFStringRef v2 = @"⠿";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Placeholder didn't get value: %@", (uint8_t *)&v1, 0xCu);
}

void sub_10011C8E8(uint64_t a1)
{
  LODWORD(v3) = 138478083;
  *(void *)((char *)&v3 + 4) = a1;
  sub_10002B3F8();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "Got print braille %{private}@ for input %{private}@", (void)v3, DWORD2(v3));
}

void sub_10011C95C(char a1, NSObject *a2)
{
  long long v3 = +[NSNumber numberWithBool:a1 & 1];
  int v4 = 138543362;
  uint64_t v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Translator active: %{public}@", (uint8_t *)&v4, 0xCu);
}

void sub_10011CA04(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Calibrate with %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10011CA7C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Reset translator", v1, 2u);
}

void sub_10011CAC0(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 138543362;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not load braille translation service for table %{public}@", (uint8_t *)&v3, 0xCu);
}

void sub_10011CB3C(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_10002B3F8();
  sub_10002B404((void *)&_mh_execute_header, v1, v2, "Timeout getting value: %@ : %@", (void)v3, DWORD2(v3));
}

void sub_10011CBB0()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Failed to set MX session property for playback during continuity camera on VoiceOver. error: %@", v2, v3, v4, v5, v6);
}

void sub_10011CC18()
{
  sub_10003C8EC(__stack_chk_guard);
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Set category error: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10011CC84()
{
  sub_10003C8EC(__stack_chk_guard);
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Set ducking data error: %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10011CCF0(int a1, NSObject *a2)
{
  uint64_t v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v5[0] = 67109378;
  v5[1] = a1;
  __int16 v6 = 2112;
  uint64_t v7 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to set static ducking amount with error: %d, volume: %@", (uint8_t *)v5, 0x12u);
}

void sub_10011CDA8()
{
  os_log_t v0 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  sub_10003C89C();
  sub_10003C8CC((void *)&_mh_execute_header, v1, v2, "Failed to set non static ducking amount with error: %@ %@", v3, v4, v5, v6, v7);
}

void sub_10011CE40()
{
  sub_100010BDC();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Our speech reload data is wrong: %@", v1, 0xCu);
}

void sub_10011CEB4()
{
}

void sub_10011CEE0()
{
  sub_10003C8B4();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "URL matched:[%{private}@] %{private}@");
}

void sub_10011CF48()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Regex Error: %@", v2, v3, v4, v5, v6);
}

void sub_10011CFB0()
{
  sub_10003C8B4();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "Changed (Date) %{private}@ to %{private}@");
}

void sub_10011D018(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to generate date regex", v1, 2u);
}

void sub_10011D05C()
{
  sub_10003C874();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "Changed (IP) %{public}@ to %{public}@");
}

void sub_10011D0C4()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "which went to %{public}@", v2, v3, v4, v5, v6);
}

void sub_10011D12C(uint64_t a1, NSObject *a2, double a3)
{
  int v3 = 138543618;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  double v6 = a3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Changed (Time) %{public}@ to %.1f", (uint8_t *)&v3, 0x16u);
}

void sub_10011D1B0()
{
  sub_10003C874();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "Changed (FmtTime) %{public}@ to %{public}@");
}

void sub_10011D218()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Processed string: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10011D280()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Original string: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10011D2E8(void *a1)
{
  uint64_t v1 = [a1 string];
  sub_100010BDC();
  sub_10003C88C();
  _os_log_debug_impl(v2, v3, v4, v5, v6, 0xCu);
}

void sub_10011D374()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Post-processed string: '%{private}@'", v2, v3, v4, v5, v6);
}

void sub_10011D3DC()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "pauseType unexpectedly nil! %@", v2, v3, v4, v5, v6);
}

void sub_10011D444()
{
  sub_10003C874();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Error processing text: %{public}@ %{public}@", v1, 0x16u);
}

void sub_10011D4BC()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Pre-processed string: '%{private}@'", v2, v3, v4, v5, v6);
}

void sub_10011D524(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 localizedDescription];
  sub_100010BDC();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Speech error: %{private}@", v4, 0xCu);
}

void sub_10011D5B8(id *a1)
{
  [*a1 rate];
  [*a1 pitch];
  sub_10003C88C();
  _os_log_debug_impl(v2, v3, v4, v5, v6, 0x16u);
}

void sub_10011D668()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "playing simultaneous sound: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10011D6D0(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 identifier];
  sub_10003C89C();
  sub_10003C8CC((void *)&_mh_execute_header, v3, v4, "Failed to speak request with error: %@. Attempting to speak again with fallback identifier: %@", v5, v6, v7, v8, v9);
}

void sub_10011D764(void *a1)
{
  CFAbsoluteTimeGetCurrent();
  uint64_t v7 = [a1 string];
  sub_10003C88C();
  _os_log_debug_impl(v2, v3, v4, v5, v6, 0x20u);
}

void sub_10011D82C(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  os_log_t v3 = +[NSString stringWithUTF8String:"void *UIKitLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"VOTBrailleGestureSpellingSuggestionHandler.m", 18, @"%s", *a1);

  __break(1u);
}

void sub_10011D8AC()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getUITextCheckerClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTBrailleGestureSpellingSuggestionHandler.m", 19, @"Unable to find class %s", "UITextChecker");

  __break(1u);
}

void sub_10011D928(void *a1, NSObject *a2)
{
  os_log_t v3 = [a1 componentsJoinedByString:@" "];
  sub_100010BDC();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Translation asset installation status: %@", v4, 0xCu);
}

void sub_10011D9C4()
{
  sub_100010BDC();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Translation asset installation progress error: %@", v1, 0xCu);
}

void sub_10011DA38()
{
  sub_100010BDC();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Translation asset installation finished with failure: %@", v1, 0xCu);
}

void sub_10011DAAC(unsigned int *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = +[NSNumber numberWithInt:*a1];
  sub_100010BDC();
  __int16 v7 = 2112;
  uint64_t v8 = a2;
  _os_log_fault_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_FAULT, "Making an app element that's not an app: %@ %@", v6, 0x16u);
}

void sub_10011DB68()
{
  os_log_t v0 = (objc_class *)objc_opt_class();
  uint64_t v1 = NSStringFromClass(v0);
  sub_1000552E8();
  sub_100013CBC((void *)&_mh_execute_header, v2, v3, "%@ - Image Explorer is valid for context : %@", v4, v5, v6, v7, v8);
}

void sub_10011DBFC()
{
  os_log_t v0 = (objc_class *)objc_opt_class();
  uint64_t v1 = NSStringFromClass(v0);
  sub_1000552E8();
  sub_100013CBC((void *)&_mh_execute_header, v2, v3, "%@ - Image Explorer is not valid for context : %@", v4, v5, v6, v7, v8);
}

void sub_10011DF20(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Unexpectedly missing creator HID event for gesture event: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10011DF98(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Unexpectedly found non-digitizer HID event for gesture event: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10011E010()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Ignoring because we just returned to SpringBoard recently", v2, v3, v4, v5, v6);
}

void sub_10011E044()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "App transition", v2, v3, v4, v5, v6);
}

void sub_10011E078(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10011E0E8(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 command];
  sub_100010BDC();
  sub_1000AE9EC((void *)&_mh_execute_header, a2, v4, "Resetting banner timer for VOTCommand: %@", v5);
}

void sub_10011E174()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Next string to speak on screen change: %@", v2, v3, v4, v5, v6);
}

void sub_10011E1DC()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Could not focus on invalid element for screen/layout change: %@", v2, v3, v4, v5, v6);
}

void sub_10011E244()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Next element to focus on screen/layout change: %@", v2, v3, v4, v5, v6);
}

void sub_10011E2AC()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Notification data for screen change: %@", v2, v3, v4, v5, v6);
}

void sub_10011E314()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Notification data for layout change: %@", v2, v3, v4, v5, v6);
}

void sub_10011E37C()
{
  sub_1000AEA94();
  uint64_t v1 = sub_100052DA4(v0);
  sub_1000552E8();
  sub_100013CBC((void *)&_mh_execute_header, v2, v3, "VoiceOver Received note: %@. Data:%@", v4, v5, v6, v7, v8);
}

void sub_10011E408()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "SEND req:%@", v2, v3, v4, v5, v6);
}

void sub_10011E470(uint64_t a1)
{
  LODWORD(v3) = 138478083;
  *(void *)((char *)&v3 + 4) = a1;
  sub_10002B3F8();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "cur ele: %{private}@ : %{private}@", (void)v3, DWORD2(v3));
}

void sub_10011E4E4()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "returning because of markers: %{private}@", v2, v3, v4, v5, v6);
}

void sub_10011E54C()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "taking cur element text marker", v2, v3, v4, v5, v6);
}

void sub_10011E580()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "starting at the selection text marker", v2, v3, v4, v5, v6);
}

void sub_10011E5B4()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Taking orig text marker", v2, v3, v4, v5, v6);
}

void sub_10011E5E8()
{
  sub_1000AEA94();
  id v0 = (id)objc_opt_class();
  sub_100013CBC((void *)&_mh_execute_header, v1, v2, "obj %{private}@ rw %{private}@", v3, v4, v5, v6, 3u);
}

void sub_10011E67C(uint64_t a1)
{
  LODWORD(v3) = 138478083;
  *(void *)((char *)&v3 + 4) = a1;
  sub_10002B3F8();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, " line string: '%{private}@' <= '%{private}@'", (void)v3, DWORD2(v3));
}

void sub_10011E6F0()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "----", v2, v3, v4, v5, v6);
}

void sub_10011E724()
{
  sub_1000AEA04();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "set selected range: {%ld,%ld}", v2, v3);
}

void sub_10011E78C()
{
  sub_1000AEA04();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "sel change %ld %ld", v2, v3);
}

void sub_10011E7F4()
{
  sub_1000AEA34();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "_selectedTextStartLocation: %ld", v2, v3, v4, v5, v6);
}

void sub_10011E860()
{
  sub_1000AEA04();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "selectedTextRange: %ld, %ld", v2, v3);
}

void sub_10011E8C8(NSRange a1, NSObject *a2)
{
  uint64_t v3 = NSStringFromRange(a1);
  sub_100010BDC();
  sub_1000AE9EC((void *)&_mh_execute_header, a2, v4, "line range: %{private}@", v5);
}

void sub_10011E954()
{
  sub_1000AEA40(__stack_chk_guard);
  sub_1000AEA34();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Setting element before popup: %@", v2, v3, v4, v5, v6);
}

void sub_10011E9BC()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Ignore screen will change while waiting for web load", v2, v3, v4, v5, v6);
}

void sub_10011E9F0()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Could not monitor element without bundle id: %@", v2, v3, v4, v5, v6);
}

void sub_10011EA58()
{
  uint64_t v0 = +[VOTKeyboardManager keyboardManager];
  [v0 isQuickNavOn];
  GSEventIsHardwareKeyboardAttached();
  sub_10003C88C();
  _os_log_debug_impl(v1, v2, v3, v4, v5, 0xEu);
}

void sub_10011EB10(NSObject *a1, double a2, double a3)
{
  uint64_t v4 = NSStringFromCGPoint(*(CGPoint *)&a2);
  sub_100010BDC();
  sub_1000AE9EC((void *)&_mh_execute_header, a1, v5, "Failed to find visible point or center point for simulated long press. Using midpoint of frame: %@", v6);
}

void sub_10011EB9C(NSObject *a1, double a2, double a3)
{
  uint64_t v4 = NSStringFromCGPoint(*(CGPoint *)&a2);
  sub_100010BDC();
  sub_1000AE9EC((void *)&_mh_execute_header, a1, v5, "Failed to find visible point for simulated long press. Using center: %@", v6);
}

void sub_10011EC28()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Could not process notification:kAXAudioDuckingDisablementSessionNotification argument is wrong kind: %@", v2, v3, v4, v5, v6);
}

void sub_10011EC90()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Could not process notification: kAXPauseSpeechAndHapticsNotification argument is wrong kind: %@", v2, v3, v4, v5, v6);
}

void sub_10011ECF8()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Could not process notification: kAXAudiographSelectedSeriesChangedNotification argument is wrong kind: %@", v2, v3, v4, v5, v6);
}

void sub_10011ED60()
{
  sub_100010BDC();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Unexpected data for context menu status notification: %@", v1, 0xCu);
}

void sub_10011EDD4()
{
  sub_1000AEA04();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "changed range %lu %lu", v2, v3);
}

void sub_10011EE3C()
{
  sub_1000AEA04();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "selectedTextRange range %lu %lu", v2, v3);
}

void sub_10011EEA4()
{
  sub_1000AEA04();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "textRange range %lu %lu", v2, v3);
}

void sub_10011EF0C(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *long long buf = 0;
  *a2 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Ignoring banner notification element for sonar", buf, 2u);
}

void sub_10011EF4C()
{
  sub_1000AEA94();
  [v0 elementGeneration];
  sub_1000AEA1C();
  sub_100013CBC((void *)&_mh_execute_header, v1, v2, "Setting element :%lld -> %@", v3, v4, v5, v6, v7);
}

void sub_10011EFC8()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Will set element: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10011F030(NSObject *a1)
{
  id v2 = +[NSThread callStackSymbols];
  sub_100010BDC();
  sub_1000AE9EC((void *)&_mh_execute_header, a1, v3, "Focusing on banner notification: %{private}@", v4);
}

void sub_10011F0CC(void *a1)
{
  id v1 = [a1 description];
  [v1 UTF8String];
  id v2 = +[NSThread callStackSymbols];
  sub_1000AEA68();
  sub_10003C8CC((void *)&_mh_execute_header, v3, v4, "'currentElement' expected to be an accessibility element: %s %@", v5, v6, v7, v8, 2u);
}

void sub_10011F188()
{
  sub_100057EC8();
  id v0 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [(id)VOTSharedWorkspace tvInteractionMode]);
  sub_1000552E8();
  sub_10003C8CC((void *)&_mh_execute_header, v1, v2, "should not be calling _setElement if not in explore mode. Current mode: %@. element: %@", v3, v4, v5, v6, v7);
}

void sub_10011F234()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Proposing current element: %@ ", v2, v3, v4, v5, v6);
}

void sub_10011F29C(uint64_t a1)
{
  int v2 = 138412546;
  uint64_t v3 = a1;
  sub_10002B3F8();
  _os_log_fault_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "We couldn't find our punctuation group? %@ / %@", (uint8_t *)&v2, 0x16u);
}

void sub_10011F320()
{
  sub_100057EC8();
  os_log_t v1 = (objc_class *)objc_opt_class();
  int v2 = NSStringFromClass(v1);
  uint64_t v3 = [v0 _imageExplorerCachedResults];
  [v3 count];
  sub_1000AEA68();
  sub_100013CBC((void *)&_mh_execute_header, v4, v5, "%@ - Image Explorer Cached Results Count : %ld", v6, v7, v8, v9, 2u);
}

void sub_10011F3D4()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Should not have been able to have multiple frontmost apps on a device that doesn't support a side app. %@", v2, v3, v4, v5, v6);
}

void sub_10011F43C()
{
  sub_100057EC8();
  CFAbsoluteTimeGetCurrent();
  sub_100013CBC((void *)&_mh_execute_header, v0, v1, "time to get element: %f -- %{public}@", v2, v3, v4, v5, 2u);
}

void sub_10011F4C4()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Resetting notification banner timer after landing on and speaking notification", v2, v3, v4, v5, v6);
}

void sub_10011F4F8()
{
  sub_1000AEA84();
  sub_1000AEA4C((void *)&_mh_execute_header, v0, v1, "Is same: %i", v2, v3, v4, v5, v6);
}

void sub_10011F560()
{
  sub_1000AEA40(__stack_chk_guard);
  sub_1000AEA34();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Used cached web form control element %@", v2, v3, v4, v5, v6);
}

void sub_10011F5C8()
{
  sub_1000AEA40(__stack_chk_guard);
  sub_1000AEA34();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "We got a screen change, but our current element is valid and in the web, so don't reset focus again: %@", v2, v3, v4, v5, v6);
}

void sub_10011F630()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "We want a web page element since the page is loading, but didn't find one, not doing anything", v2, v3, v4, v5, v6);
}

void sub_10011F664()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "No first element, using: %@", v2, v3, v4, v5, v6);
}

void sub_10011F6CC()
{
  sub_1000AEA40(__stack_chk_guard);
  sub_1000AEA34();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Current element has native focus, sticking with that %@", v2, v3, v4, v5, v6);
}

void sub_10011F734()
{
  sub_1000AEA84();
  sub_1000AEA4C((void *)&_mh_execute_header, v0, v1, "same apps %d", v2, v3, v4, v5, v6);
}

void sub_10011F79C()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Used element before popup %@", v2, v3, v4, v5, v6);
}

void sub_10011F804()
{
  sub_1000AEA40(__stack_chk_guard);
  sub_1000AEA34();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "pops? with %@", v2, v3, v4, v5, v6);
}

void sub_10011F86C()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Used replacement icon %@", v2, v3, v4, v5, v6);
}

void sub_10011F8D4()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Used element before alert %@", v2, v3, v4, v5, v6);
}

void sub_10011F93C()
{
  sub_1000AEA40(__stack_chk_guard);
  sub_1000AEA34();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "alert apps %@", v2, v3, v4, v5, v6);
}

void sub_10011F9A4()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "replacement icon: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10011FA0C()
{
  sub_100057EC8();
  id v1 = [v0 application];
  sub_1000AEA68();
  sub_100013CBC((void *)&_mh_execute_header, v2, v3, "Update application - new element with: %@ %@", v4, v5, v6, v7, 2u);
}

void sub_10011FAAC()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Ignoring AST as a screen change element", v2, v3, v4, v5, v6);
}

void sub_10011FAE0()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Ignoring banner notification element for _updateApplicationAndSpeak", v2, v3, v4, v5, v6);
}

void sub_10011FB14()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Kept current element because it said we should retain its focus on a screen change: %@", v2, v3, v4, v5, v6);
}

void sub_10011FB7C()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Ignoring element because it was a status bar element", v2, v3, v4, v5, v6);
}

void sub_10011FBB0()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Using table cell %@", v2, v3, v4, v5, v6);
}

void sub_10011FC18()
{
  sub_1000AEA94();
  uint64_t v2 = [v1 webPageLoadURL];
  uint64_t v3 = [*v0 webAreaURL];
  sub_1000AEA68();
  sub_100013CBC((void *)&_mh_execute_header, v4, v5, "Web page load URL %@, current webURL: %@", v6, v7, v8, v9, 2u);
}

void sub_10011FCC4()
{
  sub_1000AEA1C();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "New update application element: %@,\ncurrent element: %@");
}

void sub_10011FD30(id *a1, char a2)
{
  uint64_t v3 = +[NSNumber numberWithBool:a2 & 1];
  uint64_t v4 = [*a1 immediateRemoteParent];
  sub_1000AEA74();
  sub_10003C88C();
  _os_log_debug_impl(v5, v6, v7, v8, v9, 0x20u);
}

void sub_10011FDFC()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "web app not still open", v2, v3, v4, v5, v6);
}

void sub_10011FE30()
{
  sub_1000AEA1C();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "Applications: %@, old ones: %@");
}

void sub_10011FE9C()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Update application and speak: moveToElement %@", v2, v3, v4, v5, v6);
}

void sub_10011FF04()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Reset element, it's not alive", v2, v3, v4, v5, v6);
}

void sub_10011FF38(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_10002B3F8();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "First element from communities: %@. Communities: %@", (void)v3, DWORD2(v3));
}

void sub_10011FFAC()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "First responder: %@", v2, v3, v4, v5, v6);
}

void sub_100120014()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Handle element changed notification with data: %@", v2, v3, v4, v5, v6);
}

void sub_10012007C()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Not processing layout changes while editing in mail", v2, v3, v4, v5, v6);
}

void sub_1001200B0()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Ignoring banner notification element for layout change", v2, v3, v4, v5, v6);
}

void sub_1001200E4()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Ignoring because it's a status bar element", v2, v3, v4, v5, v6);
}

void sub_100120118()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Using first element in application %@", v2, v3, v4, v5, v6);
}

void sub_100120180()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Sonar element was %@", v2, v3, v4, v5, v6);
}

void sub_1001201E8()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Using first element in touch container %@", v2, v3, v4, v5, v6);
}

void sub_100120250()
{
  sub_1000AEA40(__stack_chk_guard);
  sub_1000AEA34();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Using first responder %@", v2, v3, v4, v5, v6);
}

void sub_1001202B8(void *a1)
{
  [a1 verifyElementExists:0];
  sub_10003C88C();
  _os_log_debug_impl(v1, v2, v3, v4, v5, 8u);
}

void sub_100120344(double a1, double a2)
{
  NSStringFromCGPoint(*(CGPoint *)&a1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1000AEA74();
  sub_100013CBC((void *)&_mh_execute_header, v3, v4, "Hit tested element at visible point %@ was %@", v5, v6, v7, v8, 2u);
}

void sub_1001203E8(double a1, double a2)
{
  NSStringFromCGPoint(*(CGPoint *)&a1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1000AEA74();
  sub_100013CBC((void *)&_mh_execute_header, v3, v4, "Hit tested element at center point %@ was %@", v5, v6, v7, v8, 2u);
}

void sub_10012048C()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Current element was from opaque provider, so replaced it with %@", v2, v3, v4, v5, v6);
}

void sub_1001204F4()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Current element still valid, use it", v2, v3, v4, v5, v6);
}

void sub_100120528(CGPoint *a1, NSObject *a2)
{
  NSStringFromCGPoint(a1[32]);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  sub_100010BDC();
  sub_1000AE9EC((void *)&_mh_execute_header, a2, v4, "Used last valid element location %@", v5);
}

void sub_1001205C8(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_10002B3F8();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "Layout change: current element %@, move to element %@", (void)v3, DWORD2(v3));
}

void sub_10012063C(void *a1, NSObject *a2)
{
  [a1 webPageLoadedGenerationMark];
  sub_100010BDC();
  sub_1000AE9EC((void *)&_mh_execute_header, a2, v3, "Not handling layout changes while looking for web page generation: %lld", v4);
}

void sub_1001206C0()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Layout change with moveToElement %@", v2, v3, v4, v5, v6);
}

void sub_100120728(NSObject *a1)
{
  uint64_t v2 = +[NSThread callStackSymbols];
  sub_100010BDC();
  sub_1000AE9EC((void *)&_mh_execute_header, a1, v3, "Element settings: %@", v4);
}

void sub_1001207BC()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Handling non editable value change: %@", v2, v3, v4, v5, v6);
}

void sub_100120824()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Element not the same as the current element, ignoring", v2, v3, v4, v5, v6);
}

void sub_100120858()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "SENDING: --%{private}@--", v2, v3, v4, v5, v6);
}

void sub_1001208C0()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "First responder selected text range: --%{public}@--", v2, v3, v4, v5, v6);
}

void sub_100120928()
{
  sub_1000AEA40(__stack_chk_guard);
  sub_1000AEA34();
  sub_10002B3F8();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "old --%{public}@-- new --%{public}@-- ");
}

void sub_100120998()
{
  sub_1000AEA40(__stack_chk_guard);
  sub_1000AEA34();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "No typing before, resetting %@", v2, v3, v4, v5, v6);
}

void sub_100120A00()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Automatic App AX off, no refreshing", v2, v3, v4, v5, v6);
}

void sub_100120A34(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_10002B3F8();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "Handle screen change with data %@, sound %@", (void)v3, DWORD2(v3));
}

void sub_100120AA8()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Clear web loaded sound timer", v2, v3, v4, v5, v6);
}

void sub_100120ADC()
{
  sub_1000AEA84();
  sub_1000AEA4C((void *)&_mh_execute_header, v0, v1, "Tried to move to web page with element finder: %d", v2, v3, v4, v5, v6);
}

void sub_100120B44()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Will look for web page element", v2, v3, v4, v5, v6);
}

void sub_100120B78()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Playing web page loading sound", v2, v3, v4, v5, v6);
}

void sub_100120BAC()
{
  sub_1000AEA34();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Someone set the element on us, stopping search: %@", v2, v3, v4, v5, v6);
}

void sub_100120C18()
{
  sub_1000AEA94();
  [v0 webPageLoadedGenerationMark];
  sub_1000AEA1C();
  sub_100013CBC((void *)&_mh_execute_header, v1, v2, "Reset webpage load, found element: %lld %@", v3, v4, v5, v6, v7);
}

void sub_100120C94()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Trying to update element for web move", v2, v3, v4, v5, v6);
}

void sub_100120CC8()
{
  sub_100057EC8();
  [v1 webPageLoadedGenerationMark];
  [v0 elementGeneration];
  sub_1000AEA68();
  sub_100013CBC((void *)&_mh_execute_header, v2, v3, "Trying to find a web page during webpage load: %lld element: %lld", v4, v5, v6, v7, 0);
}

void sub_100120D60(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100120DD0(void *a1, NSObject *a2)
{
  [a1 webPageLoadedGenerationMark];
  sub_100010BDC();
  sub_1000AE9EC((void *)&_mh_execute_header, a2, v3, "Setting web page generation mark: %lld", v4);
}

void sub_100120E50()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Web page loaded: data %@", v2, v3, v4, v5, v6);
}

void sub_100120EB8()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Return to SpringBoard", v2, v3, v4, v5, v6);
}

void sub_100120EEC(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *SpeakThisServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"VOTElementManager.m", 112, @"%s", *a1);

  __break(1u);
}

void sub_100120F6C()
{
  id v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getSpeakThisServicesClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTElementManager.m", 113, @"Unable to find class %s", "SpeakThisServices");

  __break(1u);
}

void sub_100120FE8()
{
  id v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getUNUserNotificationCenterClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTElementManager.m", 57, @"Unable to find class %s", "UNUserNotificationCenter");

  __break(1u);
}

void sub_100121064(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *UserNotificationsLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"VOTElementManager.m", 56, @"%s", *a1);

  __break(1u);
}

void sub_1001210E4()
{
  id v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getUNNotificationCategoryClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTElementManager.m", 60, @"Unable to find class %s", "UNNotificationCategory");

  __break(1u);
}

void sub_100121160()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Unable to send notification: %@", v2, v3, v4, v5, v6);
}

void sub_1001211C8()
{
  id v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getUNMutableNotificationContentClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTElementManager.m", 58, @"Unable to find class %s", "UNMutableNotificationContent");

  __break(1u);
}

void sub_100121244()
{
  id v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getUNNotificationRequestClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTElementManager.m", 59, @"Unable to find class %s", "UNNotificationRequest");

  __break(1u);
}

void sub_1001212C0()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Rotor default: preserve rotor nav", v2, v3, v4, v5, v6);
}

void sub_1001212F4()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Rotor default: custom actions", v2, v3, v4, v5, v6);
}

void sub_100121328()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Rotor default: custom public search", v2, v3, v4, v5, v6);
}

void sub_10012135C(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Rotor default: current type: %ld", (uint8_t *)&v2, 0xCu);
}

void sub_1001213D4(void *a1, NSObject *a2)
{
  int v3 = 134217984;
  id v4 = [a1 currentSelectionRotorType];
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Rotor default: current selection type: %ld", (uint8_t *)&v3, 0xCu);
}

void sub_100121460()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Rotor default: zoom", v2, v3, v4, v5, v6);
}

void sub_100121494()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Rotor default: auto fill", v2, v3, v4, v5, v6);
}

void sub_1001214C8()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Rotor default: math granularity 1", v2, v3, v4, v5, v6);
}

void sub_1001214FC()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Rotor default: audiograph", v2, v3, v4, v5, v6);
}

void sub_100121530()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Rotor default: adjust", v2, v3, v4, v5, v6);
}

void sub_100121564(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No help text found for command: '%@'. name: '%@'", (uint8_t *)&v3, 0x16u);
}

void sub_1001215EC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Truncating length of element value for speaking", v1, 2u);
}

void sub_100121630()
{
  sub_100010BDC();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Unable to %{public}@ notifications. Error: %d", v2, 0x12u);
}

void sub_1001216B4()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Force touch: simulating peek and switching to tap and hold mode", v2, v3, v4, v5, v6);
}

void sub_1001216E8()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Force touch: Reducing preview finger starting force", v2, v3, v4, v5, v6);
}

void sub_10012171C()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Force touch: simulating pop", v2, v3, v4, v5, v6);
}

void sub_100121750()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Tracking callback", v2, v3, v4, v5, v6);
}

void sub_100121784()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Did begin split gesture.", v2, v3, v4, v5, v6);
}

void sub_1001217B8()
{
  sub_100027014();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Could not terminate mediaserverd. PID was invalid", v1, 2u);
}

void sub_1001217F8(void *a1, NSObject *a2)
{
  int v4 = 134218496;
  id v5 = [a1 tapCount];
  __int16 v6 = 2048;
  id v7 = [a1 fingerCount];
  __int16 v8 = 1024;
  unsigned int v9 = [a1 tapIsDown];
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Tapping callback: tap count: %ld, finger count: %ld, isDown: %d", (uint8_t *)&v4, 0x1Cu);
}

void sub_1001218C0(CGPoint **a1)
{
  uint64_t v1 = NSStringFromCGPoint((*a1)[2]);
  sub_100010BDC();
  sub_100010C20((void *)&_mh_execute_header, v2, v3, "_edgePanGestureStartPoint=%@", v4, v5, v6, v7, v8);
}

void sub_10012194C()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Handing off event to regular event handling machinery.", v2, v3, v4, v5, v6);
}

void sub_100121980()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Passing handwriting event to regular event handling machinery.", v2, v3, v4, v5, v6);
}

void sub_1001219B4()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Processing event with current gestured text input manager.", v2, v3, v4, v5, v6);
}

void sub_1001219E8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = SCRCGestureStateToString();
  sub_100010BDC();
  __int16 v7 = 2048;
  uint64_t v8 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "got unhandled gesture state: %@, direction %ld", v6, 0x16u);
}

void sub_100121A94(void *a1)
{
  uint64_t v1 = [a1 command];
  sub_100010BDC();
  sub_100010C20((void *)&_mh_execute_header, v2, v3, "3 finger vertical tap-hold-slide -> %@", v4, v5, v6, v7, v8);
}

void sub_100121B18(void *a1)
{
  uint64_t v1 = [a1 command];
  sub_100010BDC();
  sub_100010C20((void *)&_mh_execute_header, v2, v3, "3 finger horizontal tap-hold-slide -> %@", v4, v5, v6, v7, v8);
}

void sub_100121B9C(uint64_t a1)
{
  uint64_t v1 = +[NSNumber numberWithInteger:a1];
  sub_100010BDC();
  sub_100010C20((void *)&_mh_execute_header, v2, v3, "split flick in direction %@", v4, v5, v6, v7, v8);
}

void sub_100121C2C(uint64_t a1, NSObject *a2)
{
  uint64_t v2 = *(void *)(a1 + 832);
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "split slide finger count %ld", (uint8_t *)&v3, 0xCu);
}

void sub_100121CA8(double a1, double a2)
{
  uint64_t v2 = NSStringFromCGPoint(*(CGPoint *)&a1);
  sub_100010BDC();
  sub_100010C20((void *)&_mh_execute_header, v3, v4, "Cancel tap and hold: %@", v5, v6, v7, v8, v9);
}

void sub_100121D2C()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Begin audiograph scrubbing mode", v2, v3, v4, v5, v6);
}

void sub_100121D60()
{
  sub_100027014();
  sub_100026FF8((void *)&_mh_execute_header, v0, v1, "Begin tap and hold mode", v2, v3, v4, v5, v6);
}

void sub_100121D94()
{
  sub_100027014();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Scribble: Failed to get center point for element.", v1, 2u);
}

void sub_100121DD4()
{
  sub_100027014();
  _os_log_fault_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Should only process tap and hold on down for stylus events during scribble.", v1, 2u);
}

void sub_100121E14(char a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Lift from tap and hold and reset fingers: %i.", (uint8_t *)v2, 8u);
}

void sub_100121E90(NSObject *a1)
{
  uint64_t v2 = +[NSThread callStackSymbols];
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "NO STRING FOR BRAILLE: %@", (uint8_t *)&v3, 0xCu);
}

void sub_100121FB8()
{
  sub_100027014();
  sub_1000E5460((void *)&_mh_execute_header, v0, v1, "Failed to save drifts.", v2, v3, v4, v5, v6);
}

void sub_100121FEC()
{
  sub_100027014();
  sub_1000E5460((void *)&_mh_execute_header, v0, v1, "Unable to write calibrated gesture data to file.", v2, v3, v4, v5, v6);
}

void sub_100122020(NSObject *a1, double a2, double a3)
{
  uint64_t v4 = NSStringFromCGPoint(*(CGPoint *)&a2);
  sub_100010BDC();
  _os_log_debug_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_DEBUG, "new drift %@ would move dots off screen", v5, 0xCu);
}

void sub_1001220B4()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Unable to remove recorded drifts: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10012211C()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Unable to remove calibrated dot positions: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100122184()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Error creating Braille Gestures directory: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1001221EC()
{
  sub_10003C874();
  sub_10002B404((void *)&_mh_execute_header, v0, v1, "Unable to read attributes of path: %{public}@\nError: %{public}@");
}

void sub_100122254()
{
  sub_10003C874();
  sub_10002B404((void *)&_mh_execute_header, v0, v1, "Could not set file protection class on path: %{public}@.\nError: %{public}@");
}

void sub_1001222BC()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Needed to repair file protection class on path: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100122324()
{
  sub_100010BDC();
  sub_100010BE8((void *)&_mh_execute_header, v0, v1, "Could not load data from file, possibly due to content protection being set incorrectly (will be repaired later).  File: %{public}@", v2, v3, v4, v5, v6);
}

void sub_10012238C()
{
  sub_100027014();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Had to generate dot positions", v1, 2u);
}

void sub_1001223CC(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 leftDotPositions];
  uint64_t v5 = [a1 rightDotPositions];
  int v6 = 138543618;
  uint64_t v7 = v4;
  __int16 v8 = 2114;
  uint8_t v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Serious error: calibration data was missing required dots. Left dots: %{public}@\nRight dots: %{public}@", (uint8_t *)&v6, 0x16u);
}

void sub_100122490()
{
  sub_100027014();
  sub_1000E5460((void *)&_mh_execute_header, v0, v1, "Initialized with calibrated dot positions", v2, v3, v4, v5, v6);
}

void sub_1001224C4()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryDidConnectNotification(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 55, @"%s", dlerror());

  __break(1u);
}

void sub_10012253C()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 56, @"%s", dlerror());

  __break(1u);
}

void sub_1001225B4()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityPointXKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 30, @"%s", dlerror());

  __break(1u);
}

void sub_10012262C()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityPointYKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 31, @"%s", dlerror());

  __break(1u);
}

void sub_1001226A4()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTextKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 54, @"%s", dlerror());

  __break(1u);
}

void sub_10012271C()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitDeleteKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 49, @"%s", dlerror());

  __break(1u);
}

void sub_100122794()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitStartsMediaSession(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 48, @"%s", dlerror());

  __break(1u);
}

void sub_10012280C()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitMap(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 47, @"%s", dlerror());

  __break(1u);
}

void sub_100122884()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitBackButton(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 46, @"%s", dlerror());

  __break(1u);
}

void sub_1001228FC()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitAdjustable(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 45, @"%s", dlerror());

  __break(1u);
}

void sub_100122974()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitUpdatesFrequently(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 44, @"%s", dlerror());

  __break(1u);
}

void sub_1001229EC()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitNotEnabled(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 43, @"%s", dlerror());

  __break(1u);
}

void sub_100122A64()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitSummaryElement(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 42, @"%s", dlerror());

  __break(1u);
}

void sub_100122ADC()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitStaticText(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 41, @"%s", dlerror());

  __break(1u);
}

void sub_100122B54()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitKeyboardKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 40, @"%s", dlerror());

  __break(1u);
}

void sub_100122BCC()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitSound(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 39, @"%s", dlerror());

  __break(1u);
}

void sub_100122C44()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitSelected(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 38, @"%s", dlerror());

  __break(1u);
}

void sub_100122CBC()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitSearchField(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 37, @"%s", dlerror());

  __break(1u);
}

void sub_100122D34()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitImage(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 36, @"%s", dlerror());

  __break(1u);
}

void sub_100122DAC()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitLink(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 35, @"%s", dlerror());

  __break(1u);
}

void sub_100122E24()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityTraitButton(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 34, @"%s", dlerror());

  __break(1u);
}

void sub_100122E9C()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityWidthKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 29, @"%s", dlerror());

  __break(1u);
}

void sub_100122F14()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilityHeightKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 28, @"%s", dlerror());

  __break(1u);
}

void sub_100122F8C()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilitySystemPropertyVoiceOverVolumeKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 53, @"%s", dlerror());

  __break(1u);
}

void sub_100123004()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilitySystemPropertySpeakingRateKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 51, @"%s", dlerror());

  __break(1u);
}

void sub_10012307C()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getEAAccessoryAccessibilitySystemPropertyVoiceOverEnabledKey(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 52, @"%s", dlerror());

  __break(1u);
}

void sub_1001230F4()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getEAAccessoryManagerClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTExternalAccessoryManager.m", 25, @"Unable to find class %s", "EAAccessoryManager");

  __break(1u);
}

void sub_100123170(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *ExternalAccessoryLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"VOTExternalAccessoryManager.m", 24, @"%s", *a1);

  __break(1u);
}

void sub_1001231F0(id *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = (char *)[*a1 count];
  int v7 = 134218240;
  __int16 v8 = &v5[-a2];
  __int16 v9 = 2048;
  uint64_t v10 = a2;
  sub_1000F1FC0((void *)&_mh_execute_header, a3, v6, "Removing objects: %lu %ld", (uint8_t *)&v7);
}

void sub_10012328C(uint64_t a1, NSObject *a2)
{
  v2[0] = 67109376;
  v2[1] = 0;
  __int16 v3 = 2048;
  uint64_t v4 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Removing objects: %d %ld", (uint8_t *)v2, 0x12u);
}

void sub_100123310(uint64_t a1)
{
  LODWORD(v3) = 138543618;
  *(void *)((char *)&v3 + 4) = a1;
  sub_1000F1FF4();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "retrieved:\nAHEAD: %{public}@\nBEHIND: %{public}@", (void)v3, DWORD2(v3));
}

void sub_100123380()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Filling up with :%{public}@", v2, v3, v4, v5, v6);
}

void sub_1001233E8()
{
  os_log_t v0 = +[NSThread callStackSymbols];
  sub_100010BDC();
  sub_100010C20((void *)&_mh_execute_header, v1, v2, "Forced update, so removing all from cache: %{private}@", v3, v4, v5, v6, v7);
}

void sub_100123474()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Hit end: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1001234DC()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Starting search again from hit tested element: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100123544(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Even with fallback, still had a zero point", v1, 2u);
}

void sub_100123588(uint64_t a1, void *a2, uint8_t *a3, NSObject *a4)
{
  id v6 = a2;
  sub_1000F2004((uint64_t)v6, 5.8382e-34);
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "Tried to use a zero point to find the next element after %{public}@. Going with fallback, %{public}@", a3, 0x16u);
}

void sub_1001235F8(void *a1, uint64_t a2, int a3, NSObject *a4)
{
  id v7 = a1;
  *(_DWORD *)a2 = 67109378;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + _Block_object_dispose(&STACK[0x2C0], 8) = 2114;
  *(void *)(a2 + 10) = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "After using window context id %u, got %{public}@", (uint8_t *)a2, 0x12u);
}

void sub_100123678(uint64_t a1, void *a2, uint8_t *a3, NSObject *a4)
{
  id v6 = a2;
  sub_1000F2004((uint64_t)v6, 5.8382e-34);
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "Center point for %{public}@ is %{public}@", a3, 0x16u);
}

void sub_1001236E8()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Cache re-seeding hit end: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100123750()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Starting search again from: %{public}@", v2, v3, v4, v5, v6);
}

void sub_1001237B8()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Reseeding cache with: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100123820()
{
  sub_100010BDC();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "Search parent: %@ group parent %@");
}

void sub_100123894()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Next element was outside of our current group - leaving %@", v2, v3, v4, v5, v6);
}

void sub_1001238FC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Re-updated cache", v1, 2u);
}

void sub_100123940()
{
  sub_100010BDC();
  sub_10002B3D8((void *)&_mh_execute_header, v0, v1, "Can't find %{public}@ in %{public}@");
}

void sub_1001239B8()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Did not find matching element in opaque parent %{public}@, so starting again from there", v2, v3, v4, v5, v6);
}

void sub_100123A20()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Found opaque element %{public}@", v2, v3, v4, v5, v6);
}

void sub_100123A88()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Found invalid opaque element: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100123AF0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100123B64(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Failed to find any element for starting the opaque element search, so bailing", v1, 2u);
}

void sub_100123BA8()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Starting opaque search again from hit tested element: %{public}@", v2, v3, v4, v5, v6);
}

void sub_100123C10(uint64_t a1, void *a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a3 = 138543618;
  *(void *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2114;
  *(void *)(a3 + 14) = a2;
  sub_1000F1FC0((void *)&_mh_execute_header, a4, a3, "Failed to copy element with opaque parent %{public}@. Hit testing at %{public}@ to find equivalent.", (uint8_t *)a3);
}

void sub_100123C70(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 138543362;
  *(void *)(buf + 4) = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Had to fall back to using midpoint of frame %{public}@", buf, 0xCu);
}

void sub_100123CC8(uint64_t a1)
{
  LODWORD(v3) = 134218242;
  *(void *)((char *)&v3 + 4) = *(void *)(*(void *)a1 + 24);
  sub_1000F1FF4();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "Starting search with generation %lld from: %{public}@", (void)v3, DWORD2(v3));
}

void sub_100123D40(void *a1)
{
  [a1 count];
  sub_100010BDC();
  sub_100010C20((void *)&_mh_execute_header, v1, v2, "Dumping elements: %lu", v3, v4, v5, v6, v7);
}

void sub_100123DB8(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Finished retrieving: %d", (uint8_t *)v2, 8u);
}

void sub_100123E30(void *a1, NSObject *a2)
{
  [a1 count];
  sub_1000F1FD8();
  sub_1000F1FC0((void *)&_mh_execute_header, a2, v3, "Got elements behind: %lu/%ld", v4);
}

void sub_100123EB0(void *a1, NSObject *a2)
{
  [a1 count];
  sub_1000F1FD8();
  sub_1000F1FC0((void *)&_mh_execute_header, a2, v3, "Got elements ahead: %lu/%ld", v4);
}

void sub_100123F30(uint64_t a1)
{
  LODWORD(v3) = 138543618;
  *(void *)((char *)&v3 + 4) = a1;
  sub_1000F1FF4();
  sub_10002B3D8((void *)&_mh_execute_header, v1, v2, "Starting with: %{public}@, last: %{public}@", (void)v3, DWORD2(v3));
}

void sub_100123FA0(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 customPublicRotors];
  int v5 = 134218240;
  id v6 = [v4 count];
  __int16 v7 = 2048;
  id v8 = [a1 publicCustomRotorIndex];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "customPublicRotors.count (%lu) unexpectedly <= index (%ld)", (uint8_t *)&v5, 0x16u);
}

void sub_100124060(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "kVOTRotorTypeMisspelledWord is soft-deprecated. File a radar if you see this report", v1, 2u);
}

void sub_1001240A4()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Update with string: \"%{private}@\"", v2, v3, v4, v5, v6);
}

void sub_10012410C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "BrailleGestureManager received BeginSplitGesture notification.", v1, 2u);
}

void sub_100124150(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "We had a locked orientation in portrait, but our device did not support it.  Highly unexpected, but let's fall back to using the actual device orientation.", v1, 2u);
}

void sub_100124194()
{
  sub_100010BDC();
  sub_100010C04((void *)&_mh_execute_header, v0, v1, "Speaking dot positions: \"%{public}@\"", v2, v3, v4, v5, v6);
}

void sub_1001241FC()
{
  sub_100010BDC();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Got 0-length braille string for touch points %@", v1, 0xCu);
}

void sub_100124270(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "_playWarningTones:completion: called without a valid warning tones timer", v1, 2u);
}

void sub_1001242B4(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 localeIdentifier];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Cannot make CHRecognizer instance with locale: %@", (uint8_t *)&v4, 0xCu);
}

void sub_100124350(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "did get recognition results:", v1, 2u);
}

void sub_100124394(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "A symbol from UIKit could not be found. Will be unable to determine diacritics. Please file a bug with Accessibility", v1, 2u);
}

void sub_1001243D8()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *VOT_UIKeyboardGetCurrentInputMode()"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTHandwritingManager.m", 26, @"%s", dlerror());

  __break(1u);
}

void sub_100124450()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSDictionary *VOT_UIKeyboardRomanAccentVariants(NSString *__strong, NSString *__strong, UIKeyboardVariantIncludes)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTHandwritingManager.m", 27, @"%s", dlerror());

  __break(1u);
}

void sub_1001244C8()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"NSString *getUIKeyboardVariantStrings(void)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTHandwritingManager.m", 28, @"%s", dlerror());

  __break(1u);
}

void sub_100124540()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getCHDrawingClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTHandwritingManager.m", 32, @"Unable to find class %s", "CHDrawing");

  __break(1u);
}

void sub_1001245BC(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *CoreHandwritingLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"VOTHandwritingManager.m", 31, @"%s", *a1);

  __break(1u);
}

void sub_10012463C()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getCHRecognizerClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTHandwritingManager.m", 33, @"Unable to find class %s", "CHRecognizer");

  __break(1u);
}

void sub_1001246B8()
{
  os_log_t v0 = +[NSAssertionHandler currentHandler];
  uint64_t v1 = +[NSString stringWithUTF8String:"Class getUIKeyboardImplClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"VOTHandwritingManager.m", 29, @"Unable to find class %s", "UIKeyboardImpl");

  __break(1u);
}

void sub_100124734(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *UIKitLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"VOTHandwritingManager.m", 25, @"%s", *a1);

  __break(1u);
}

void sub_1001247B4(NSObject *a1)
{
  uint64_t v2 = +[NSThread callStackSymbols];
  int v3 = 138477827;
  int v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_DEBUG, "currentReadAllContext set to nil, %{private}@", (uint8_t *)&v3, 0xCu);
}

void sub_100124854(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Explorer will stop all speech now", v1, 2u);
}

void sub_100124898(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = +[NSNumber numberWithInteger:*a1];
  uint8_t v6 = +[NSNumber numberWithInteger:a2];
  int v7 = 138412546;
  id v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "ButtonIntercepter: Invalid state change! state: %@ event: %@", (uint8_t *)&v7, 0x16u);
}

uint64_t Locale.minimalCanonicLocaleIdentifier.getter()
{
  return Locale.minimalCanonicLocaleIdentifier.getter();
}

uint64_t Locale.init(withAXRemapping:)()
{
  return Locale.init(withAXRemapping:)();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.access<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.didSet<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.didSet<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.willSet<A, B>(_:keyPath:)()
{
  return ObservationRegistrar.willSet<A, B>(_:keyPath:)();
}

uint64_t ObservationRegistrar.init()()
{
  return ObservationRegistrar.init()();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return type metadata accessor for ObservationRegistrar();
}

uint64_t static TTSExecutor.shared.getter()
{
  return static TTSExecutor.shared.getter();
}

uint64_t type metadata accessor for TTSExecutor()
{
  return type metadata accessor for TTSExecutor();
}

uint64_t type metadata accessor for VoiceResolver.VoiceSortKey()
{
  return type metadata accessor for VoiceResolver.VoiceSortKey();
}

uint64_t VoiceResolver.__allocating_init(voiceSource:requiredTraits:sortMode:)()
{
  return VoiceResolver.__allocating_init(voiceSource:requiredTraits:sortMode:)();
}

uint64_t type metadata accessor for VoiceResolver.Mode()
{
  return type metadata accessor for VoiceResolver.Mode();
}

uint64_t type metadata accessor for VoiceResolver()
{
  return type metadata accessor for VoiceResolver();
}

uint64_t CoreSynthesizer.Voice.primaryLocale.getter()
{
  return CoreSynthesizer.Voice.primaryLocale.getter();
}

uint64_t static CoreSynthesizer.Voice.Trait.firstParty.getter()
{
  return static CoreSynthesizer.Voice.Trait.firstParty.getter();
}

uint64_t static CoreSynthesizer.Voice.Trait.localeDefault.getter()
{
  return static CoreSynthesizer.Voice.Trait.localeDefault.getter();
}

uint64_t static CoreSynthesizer.Voice.Trait.installed.getter()
{
  return static CoreSynthesizer.Voice.Trait.installed.getter();
}

uint64_t type metadata accessor for CoreSynthesizer.Voice.Trait()
{
  return type metadata accessor for CoreSynthesizer.Voice.Trait();
}

uint64_t type metadata accessor for CoreSynthesizer.Voice()
{
  return type metadata accessor for CoreSynthesizer.Voice();
}

uint64_t static DefaultVoiceSource.shared.getter()
{
  return static DefaultVoiceSource.shared.getter();
}

uint64_t type metadata accessor for DefaultVoiceSource()
{
  return type metadata accessor for DefaultVoiceSource();
}

uint64_t VoiceSelection._bridgeToObjectiveC()()
{
  return VoiceSelection._bridgeToObjectiveC()();
}

uint64_t static VoiceSelection._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static VoiceSelection._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for VoiceSelection()
{
  return type metadata accessor for VoiceSelection();
}

uint64_t axObservationTrackingStream<A>(_:)()
{
  return axObservationTrackingStream<A>(_:)();
}

uint64_t AXCachedLocaleCharacterSupportMatrix.init(locale:)()
{
  return AXCachedLocaleCharacterSupportMatrix.init(locale:)();
}

uint64_t dispatch thunk of AXCachedLocaleCharacterSupportMatrix.supports(string:)()
{
  return dispatch thunk of AXCachedLocaleCharacterSupportMatrix.supports(string:)();
}

uint64_t type metadata accessor for AXCachedLocaleCharacterSupportMatrix()
{
  return type metadata accessor for AXCachedLocaleCharacterSupportMatrix();
}

uint64_t dispatch thunk of AXSetting.cachedValue.getter()
{
  return dispatch thunk of AXSetting.cachedValue.getter();
}

uint64_t type metadata accessor for MAGService()
{
  return type metadata accessor for MAGService();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return AsyncStream.makeAsyncIterator()();
}

uint64_t static AXPreferences.shared.getter()
{
  return static AXPreferences.shared.getter();
}

uint64_t AXPreferences.VoiceOver.currentRotorVoiceIdentifier.getter()
{
  return AXPreferences.VoiceOver.currentRotorVoiceIdentifier.getter();
}

uint64_t AXPreferences.VoiceOver.currentRotorVoiceIdentifier.setter()
{
  return AXPreferences.VoiceOver.currentRotorVoiceIdentifier.setter();
}

uint64_t AXPreferences.VoiceOver.currentVoiceRotor.getter()
{
  return AXPreferences.VoiceOver.currentVoiceRotor.getter();
}

uint64_t AXPreferences.VoiceOver.defaultVoiceSelectionStream.getter()
{
  return AXPreferences.VoiceOver.defaultVoiceSelectionStream.getter();
}

uint64_t AXPreferences.VoiceOver.VoiceRotorItem.voiceId.getter()
{
  return AXPreferences.VoiceOver.VoiceRotorItem.voiceId.getter();
}

uint64_t type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem()
{
  return type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem();
}

uint64_t AXPreferences.VoiceOver.$voiceRotors.getter()
{
  return AXPreferences.VoiceOver.$voiceRotors.getter();
}

uint64_t AXPreferences.VoiceOver.$speakUpEnabled.getter()
{
  return AXPreferences.VoiceOver.$speakUpEnabled.getter();
}

uint64_t AXPreferences.VoiceOver.Activity.voiceSelection.getter()
{
  return AXPreferences.VoiceOver.Activity.voiceSelection.getter();
}

uint64_t AXPreferences.VoiceOver.Activity.voiceIdentifier.getter()
{
  return AXPreferences.VoiceOver.Activity.voiceIdentifier.getter();
}

uint64_t AXPreferences.VoiceOver.Activity._bridgeToObjectiveC()()
{
  return AXPreferences.VoiceOver.Activity._bridgeToObjectiveC()();
}

uint64_t static AXPreferences.VoiceOver.Activity._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static AXPreferences.VoiceOver.Activity._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for AXPreferences.VoiceOver.Activity()
{
  return type metadata accessor for AXPreferences.VoiceOver.Activity();
}

uint64_t type metadata accessor for AXPreferences()
{
  return type metadata accessor for AXPreferences();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

Swift::Void __swiftcall OS_dispatch_group.wait()()
{
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

Boolean AXAPIEnabled(void)
{
  return _AXAPIEnabled();
}

uint64_t AXCFormattedString()
{
  return _AXCFormattedString();
}

uint64_t AXCLanguageCanonicalFormToGeneralLanguage()
{
  return _AXCLanguageCanonicalFormToGeneralLanguage();
}

uint64_t AXCLanguageToLocales()
{
  return _AXCLanguageToLocales();
}

uint64_t AXCRemapLanguageCodeToFallbackIfNeccessary()
{
  return _AXCRemapLanguageCodeToFallbackIfNeccessary();
}

uint64_t AXColorizeFormatLog()
{
  return _AXColorizeFormatLog();
}

uint64_t AXConvertPointFromHostedCoordinates()
{
  return _AXConvertPointFromHostedCoordinates();
}

uint64_t AXConvertPointToHostedCoordinates()
{
  return _AXConvertPointToHostedCoordinates();
}

uint64_t AXCopyUnicodeDescriptionStringForCharacter()
{
  return _AXCopyUnicodeDescriptionStringForCharacter();
}

uint64_t AXDateStringForFormat()
{
  return _AXDateStringForFormat();
}

uint64_t AXDetectionModeForName()
{
  return _AXDetectionModeForName();
}

uint64_t AXDeviceGetType()
{
  return _AXDeviceGetType();
}

uint64_t AXDeviceHasHomeButton()
{
  return _AXDeviceHasHomeButton();
}

uint64_t AXDeviceHasJindo()
{
  return _AXDeviceHasJindo();
}

uint64_t AXDeviceIsAudioAccessory()
{
  return _AXDeviceIsAudioAccessory();
}

uint64_t AXDeviceIsMultiUser()
{
  return _AXDeviceIsMultiUser();
}

uint64_t AXDeviceIsPad()
{
  return _AXDeviceIsPad();
}

uint64_t AXDeviceIsPhone()
{
  return _AXDeviceIsPhone();
}

uint64_t AXDeviceIsPhoneIdiom()
{
  return _AXDeviceIsPhoneIdiom();
}

uint64_t AXDeviceIsTV()
{
  return _AXDeviceIsTV();
}

uint64_t AXDeviceIsTallPhoneIdiom()
{
  return _AXDeviceIsTallPhoneIdiom();
}

uint64_t AXDevicePrimeDisplayManager()
{
  return _AXDevicePrimeDisplayManager();
}

uint64_t AXDeviceSizeMM()
{
  return _AXDeviceSizeMM();
}

uint64_t AXDeviceSupportsManyTouches()
{
  return _AXDeviceSupportsManyTouches();
}

uint64_t AXDeviceSupportsPencil()
{
  return _AXDeviceSupportsPencil();
}

uint64_t AXDeviceSupportsQuickNote()
{
  return _AXDeviceSupportsQuickNote();
}

uint64_t AXDeviceSupportsSideApp()
{
  return _AXDeviceSupportsSideApp();
}

uint64_t AXDeviceSupportsSonification()
{
  return _AXDeviceSupportsSonification();
}

uint64_t AXEventTypeIsHomeButtonPress()
{
  return _AXEventTypeIsHomeButtonPress();
}

uint64_t AXEventTypeIsLockButtonPress()
{
  return _AXEventTypeIsLockButtonPress();
}

uint64_t AXEventTypeIsVolumeButtonPress()
{
  return _AXEventTypeIsVolumeButtonPress();
}

uint64_t AXForceTouchThresholdPeek()
{
  return _AXForceTouchThresholdPeek();
}

uint64_t AXForceTouchThresholdPeekPopMidpoint()
{
  return _AXForceTouchThresholdPeekPopMidpoint();
}

uint64_t AXForceTouchThresholdPop()
{
  return _AXForceTouchThresholdPop();
}

uint64_t AXFormatFloat()
{
  return _AXFormatFloat();
}

uint64_t AXFormatFloatWithPercentage()
{
  return _AXFormatFloatWithPercentage();
}

uint64_t AXFormatInteger()
{
  return _AXFormatInteger();
}

uint64_t AXFormatNumber()
{
  return _AXFormatNumber();
}

uint64_t AXGuidedAccessGetAvailability()
{
  return _AXGuidedAccessGetAvailability();
}

uint64_t AXInCheckerBoardScenario()
{
  return _AXInCheckerBoardScenario();
}

uint64_t AXInPreboardScenario()
{
  return _AXInPreboardScenario();
}

uint64_t AXIsBuddyCompleted()
{
  return _AXIsBuddyCompleted();
}

uint64_t AXIsInternalInstall()
{
  return _AXIsInternalInstall();
}

uint64_t AXLanguageCanonicalFormToGeneralLanguage()
{
  return _AXLanguageCanonicalFormToGeneralLanguage();
}

uint64_t AXLanguageConvertToCanonicalForm()
{
  return _AXLanguageConvertToCanonicalForm();
}

uint64_t AXLanguageIsSpeakableEmojiString()
{
  return _AXLanguageIsSpeakableEmojiString();
}

uint64_t AXLanguageSupportedBySynthesizer()
{
  return _AXLanguageSupportedBySynthesizer();
}

uint64_t AXLoadPunctuationTable()
{
  return _AXLoadPunctuationTable();
}

uint64_t AXLocalizedNameForDetectionMode()
{
  return _AXLocalizedNameForDetectionMode();
}

uint64_t AXLogAppAccessibility()
{
  return _AXLogAppAccessibility();
}

uint64_t AXLogAssertions()
{
  return _AXLogAssertions();
}

uint64_t AXLogBrailleHW()
{
  return _AXLogBrailleHW();
}

uint64_t AXLogCommon()
{
  return _AXLogCommon();
}

uint64_t AXLogPunctuationStorage()
{
  return _AXLogPunctuationStorage();
}

uint64_t AXLogSpeechAssetDownload()
{
  return _AXLogSpeechAssetDownload();
}

uint64_t AXLogSystemApp()
{
  return _AXLogSystemApp();
}

uint64_t AXLogTapticTime()
{
  return _AXLogTapticTime();
}

uint64_t AXLoggerForFacility()
{
  return _AXLoggerForFacility();
}

uint64_t AXMSecureCodingClasses()
{
  return _AXMSecureCodingClasses();
}

uint64_t AXMediaLogCommon()
{
  return _AXMediaLogCommon();
}

uint64_t AXMediaLogElementVision()
{
  return _AXMediaLogElementVision();
}

uint64_t AXMediaLogLanguageTranslation()
{
  return _AXMediaLogLanguageTranslation();
}

uint64_t AXMediaLogMLElement()
{
  return _AXMediaLogMLElement();
}

uint64_t AXMediaLogService()
{
  return _AXMediaLogService();
}

uint64_t AXNSLocalizedStringForLocale()
{
  return _AXNSLocalizedStringForLocale();
}

uint64_t AXNamesForDrags()
{
  return _AXNamesForDrags();
}

uint64_t AXNamesForDrops()
{
  return _AXNamesForDrops();
}

uint64_t AXNormalizePoint()
{
  return _AXNormalizePoint();
}

uint64_t AXOSLogLevelFromAXLogLevel()
{
  return _AXOSLogLevelFromAXLogLevel();
}

AXError AXObserverAddNotification(AXObserverRef observer, AXUIElementRef element, CFStringRef notification, void *refcon)
{
  return _AXObserverAddNotification(observer, element, notification, refcon);
}

AXError AXObserverCreate(pid_t application, AXObserverCallback callback, AXObserverRef *outObserver)
{
  return _AXObserverCreate(application, callback, outObserver);
}

CFRunLoopSourceRef AXObserverGetRunLoopSource(AXObserverRef observer)
{
  return _AXObserverGetRunLoopSource(observer);
}

AXError AXObserverRemoveNotification(AXObserverRef observer, AXUIElementRef element, CFStringRef notification)
{
  return _AXObserverRemoveNotification(observer, element, notification);
}

uint64_t AXPerformBlockAsynchronouslyOnMainThread()
{
  return _AXPerformBlockAsynchronouslyOnMainThread();
}

uint64_t AXPerformBlockOnMainThread()
{
  return _AXPerformBlockOnMainThread();
}

uint64_t AXPerformBlockOnMainThreadAfterDelay()
{
  return _AXPerformBlockOnMainThreadAfterDelay();
}

uint64_t AXPidForLaunchLabel()
{
  return _AXPidForLaunchLabel();
}

uint64_t AXProcessWantsMLElementsForBundle()
{
  return _AXProcessWantsMLElementsForBundle();
}

uint64_t AXReadAllUtilitiesElementsToCombineForReadAll()
{
  return _AXReadAllUtilitiesElementsToCombineForReadAll();
}

uint64_t AXRetainAutorelease()
{
  return _AXRetainAutorelease();
}

uint64_t AXRetrieveSupportedAccessibilityLanguages()
{
  return _AXRetrieveSupportedAccessibilityLanguages();
}

uint64_t AXRuntimeCheck_MediaAnalysisSupport()
{
  return _AXRuntimeCheck_MediaAnalysisSupport();
}

uint64_t AXRuntimeCheck_SupportsVoiceoverIndepedentVolume()
{
  return _AXRuntimeCheck_SupportsVoiceoverIndepedentVolume();
}

uint64_t AXSafeClassFromString()
{
  return _AXSafeClassFromString();
}

uint64_t AXSafeEqual()
{
  return _AXSafeEqual();
}

uint64_t AXSerializeWrapper()
{
  return _AXSerializeWrapper();
}

uint64_t AXSessionIsLoginSession()
{
  return _AXSessionIsLoginSession();
}

uint64_t AXSetProcessWantsMLElementForBundle()
{
  return _AXSetProcessWantsMLElementForBundle();
}

uint64_t AXSetThreadPriority()
{
  return _AXSetThreadPriority();
}

uint64_t AXSystemRootDirectory()
{
  return _AXSystemRootDirectory();
}

uint64_t AXUICreateApplicationElementForElement()
{
  return _AXUICreateApplicationElementForElement();
}

AXError AXUIElementGetPid(AXUIElementRef element, pid_t *pid)
{
  return _AXUIElementGetPid(element, pid);
}

CFTypeID AXUIElementGetTypeID(void)
{
  return _AXUIElementGetTypeID();
}

uint64_t AXUIElementLastGlobalError()
{
  return _AXUIElementLastGlobalError();
}

uint64_t AXUIElementRegisterForApplicationDeath()
{
  return _AXUIElementRegisterForApplicationDeath();
}

uint64_t AXUIElementRegisterSystemWideServerDeathCallback()
{
  return _AXUIElementRegisterSystemWideServerDeathCallback();
}

AXError AXUIElementSetMessagingTimeout(AXUIElementRef element, float timeoutInSeconds)
{
  return _AXUIElementSetMessagingTimeout(element, timeoutInSeconds);
}

uint64_t AXUIKeyboardIsOOP()
{
  return _AXUIKeyboardIsOOP();
}

uint64_t AXUnicodeCodePointForCharacterString()
{
  return _AXUnicodeCodePointForCharacterString();
}

uint64_t AXVOLocalizedStringForCharacter()
{
  return _AXVOLocalizedStringForCharacter();
}

AXValueRef AXValueCreate(AXValueType theType, const void *valuePtr)
{
  return _AXValueCreate(theType, valuePtr);
}

AXValueType AXValueGetType(AXValueRef value)
{
  return _AXValueGetType(value);
}

CFTypeID AXValueGetTypeID(void)
{
  return _AXValueGetTypeID();
}

Boolean AXValueGetValue(AXValueRef value, AXValueType theType, void *valuePtr)
{
  return _AXValueGetValue(value, theType, valuePtr);
}

uint64_t AXVoiceNameForVoiceId()
{
  return _AXVoiceNameForVoiceId();
}

uint64_t AXVoiceOverMediaDescriptionLocString()
{
  return _AXVoiceOverMediaDescriptionLocString();
}

uint64_t AX_CGPathCopyDataRepresentation()
{
  return _AX_CGPathCopyDataRepresentation();
}

uint64_t AX_CGRectGetCenter()
{
  return _AX_CGRectGetCenter();
}

uint64_t AX_PERFORM_WITH_LOCK()
{
  return _AX_PERFORM_WITH_LOCK();
}

OSStatus AudioServicesCreateSystemSoundID(CFURLRef inFileURL, SystemSoundID *outSystemSoundID)
{
  return _AudioServicesCreateSystemSoundID(inFileURL, outSystemSoundID);
}

OSStatus AudioServicesDisposeSystemSoundID(SystemSoundID inSystemSoundID)
{
  return _AudioServicesDisposeSystemSoundID(inSystemSoundID);
}

uint64_t AudioServicesPlaySystemSoundWithOptions()
{
  return _AudioServicesPlaySystemSoundWithOptions();
}

OSStatus AudioServicesSetProperty(AudioServicesPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return _AudioServicesSetProperty(inPropertyID, inSpecifierSize, inSpecifier, inPropertyDataSize, inPropertyData);
}

uint64_t BKSHIDServicesCancelTouchesOnMainDisplay()
{
  return _BKSHIDServicesCancelTouchesOnMainDisplay();
}

uint64_t BKSHIDServicesIsCapsLockLightOn()
{
  return _BKSHIDServicesIsCapsLockLightOn();
}

uint64_t BRLLogTranslation()
{
  return _BRLLogTranslation();
}

uint64_t BRLTModeDescription()
{
  return _BRLTModeDescription();
}

uint64_t CEMEmojiTokenGetString()
{
  return _CEMEmojiTokenGetString();
}

uint64_t CEMEmojiTokensAreEquivalent()
{
  return _CEMEmojiTokensAreEquivalent();
}

uint64_t CEMEnumerateEmojiTokensInStringWithBlock()
{
  return _CEMEnumerateEmojiTokensInStringWithBlock();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayContainsValue(theArray, range, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreate(allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return _CFArrayCreateCopy(allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayGetFirstIndexOfValue(theArray, range, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return _CFMachPortCreateWithPort(allocator, portNum, callout, context, shouldFreeInfo);
}

mach_port_t CFMachPortGetPort(CFMachPortRef port)
{
  return _CFMachPortGetPort(port);
}

Boolean CFMachPortIsValid(CFMachPortRef port)
{
  return _CFMachPortIsValid(port);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return _CFNotificationCenterGetLocalCenter();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

uint64_t CFRunLoopRunSpecific()
{
  return _CFRunLoopRunSpecific();
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

void CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale)
{
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

CGPoint CGPointFromString(NSString *string)
{
  CGPoint v3 = _CGPointFromString(string);
  double y = v3.y;
  double x = v3.x;
  result.double y = y;
  result.double x = x;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return _CGRectContainsPoint(rect, point);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return _CGRectEqualToRect(rect1, rect2);
}

CGRect CGRectFromString(NSString *string)
{
  return _CGRectFromString(string);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  return _CGRectGetMaxX(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

CGFloat CGRectGetMinX(CGRect rect)
{
  return _CGRectGetMinX(rect);
}

CGFloat CGRectGetMinY(CGRect rect)
{
  return _CGRectGetMinY(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectInset(rect, dx, dy);
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  return _CGRectIntersection(r1, r2);
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return _CGRectIntersectsRect(rect1, rect2);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return _CGRectIsEmpty(rect);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return _CGRectIsInfinite(rect);
}

BOOL CGRectIsNull(CGRect rect)
{
  return _CGRectIsNull(rect);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  return _CGRectUnion(r1, r2);
}

CFStringRef CTFontCopyDisplayName(CTFontRef font)
{
  return _CTFontCopyDisplayName(font);
}

uint64_t GSEventIsHardwareKeyboardAttached()
{
  return _GSEventIsHardwareKeyboardAttached();
}

uint64_t GSInitialize()
{
  return _GSInitialize();
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallStructMethod(connection, selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

uint64_t IOHIDEventGetIntegerValue()
{
  return _IOHIDEventGetIntegerValue();
}

uint64_t IOHIDEventGetType()
{
  return _IOHIDEventGetType();
}

uint64_t IOHIDEventSetIntegerValue()
{
  return _IOHIDEventSetIntegerValue();
}

uint64_t IOHIDEventSetSenderID()
{
  return _IOHIDEventSetSenderID();
}

uint64_t IOHIDEventSetTimeStamp()
{
  return _IOHIDEventSetTimeStamp();
}

uint64_t IOHIDEventSystemClientCreate()
{
  return _IOHIDEventSystemClientCreate();
}

uint64_t IOHIDEventSystemClientDispatchEvent()
{
  return _IOHIDEventSystemClientDispatchEvent();
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t MAAudibleMediaPrefCopyPreferDescriptiveVideo()
{
  return _MAAudibleMediaPrefCopyPreferDescriptiveVideo();
}

uint64_t MAAudibleMediaPrefSetPreferDescriptiveVideo()
{
  return _MAAudibleMediaPrefSetPreferDescriptiveVideo();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

uint64_t MRMediaRemoteGetNowPlayingApplicationIsPlaying()
{
  return _MRMediaRemoteGetNowPlayingApplicationIsPlaying();
}

uint64_t MecabraAnalyzeStringWithContext()
{
  return _MecabraAnalyzeStringWithContext();
}

uint64_t MecabraCandidateGetAnalysisString()
{
  return _MecabraCandidateGetAnalysisString();
}

uint64_t MecabraCandidateGetSurface()
{
  return _MecabraCandidateGetSurface();
}

uint64_t MecabraContextAddInlineCandidate()
{
  return _MecabraContextAddInlineCandidate();
}

uint64_t MecabraContextCreateMutable()
{
  return _MecabraContextCreateMutable();
}

uint64_t MecabraContextRelease()
{
  return _MecabraContextRelease();
}

uint64_t MecabraCreateWithOptions()
{
  return _MecabraCreateWithOptions();
}

uint64_t MecabraGetNextCandidate()
{
  return _MecabraGetNextCandidate();
}

uint64_t MecabraRelease()
{
  return _MecabraRelease();
}

NSString *NSHomeDirectory(void)
{
  return _NSHomeDirectory();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSRange v4 = _NSIntersectionRange(range1, range2);
  NSUInteger length = v4.length;
  NSUInteger location = v4.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

void NSLog(NSString *format, ...)
{
}

NSRange NSRangeFromString(NSString *aString)
{
  NSRange v3 = _NSRangeFromString(aString);
  NSUInteger length = v3.length;
  NSUInteger location = v3.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

uint64_t NSRequestConcreteImplementation()
{
  return _NSRequestConcreteImplementation();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return _NSSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde);
}

void NSSetUncaughtExceptionHandler(NSUncaughtExceptionHandler *a1)
{
}

NSSize NSSizeFromString(NSString *aString)
{
  NSSize v3 = _NSSizeFromString(aString);
  double height = v3.height;
  double width = v3.width;
  result.double height = height;
  result.double width = width;
  return result;
}

uint64_t NSStringFromBOOL()
{
  return _NSStringFromBOOL();
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return _NSStringFromCGSize(size);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return _NSStringFromPoint(aPoint);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return _NSStringFromRange(range);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return _NSStringFromRect(aRect);
}

NSString *__cdecl NSStringFromSize(NSSize aSize)
{
  return _NSStringFromSize(aSize);
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSRange v4 = _NSUnionRange(range1, range2);
  NSUInteger length = v4.length;
  NSUInteger location = v4.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

uint64_t SBSIsReachabilityEnabled()
{
  return _SBSIsReachabilityEnabled();
}

uint64_t SCRCArgumentParserRunWithClassName()
{
  return _SCRCArgumentParserRunWithClassName();
}

uint64_t SCRCGestureStateToString()
{
  return _SCRCGestureStateToString();
}

uint64_t SCRCLinkRelationshipStringForType()
{
  return _SCRCLinkRelationshipStringForType();
}

uint64_t SCRCLogInitializeWithKeys()
{
  return _SCRCLogInitializeWithKeys();
}

uint64_t SCRCMathGetAverage()
{
  return _SCRCMathGetAverage();
}

uint64_t SCRCMathGetDistanceBetweenPoints()
{
  return _SCRCMathGetDistanceBetweenPoints();
}

uint64_t SCRCMathGetVectorAndDistanceForPoints()
{
  return _SCRCMathGetVectorAndDistanceForPoints();
}

uint64_t SCRCMathUpdateAngleAverage()
{
  return _SCRCMathUpdateAngleAverage();
}

uint64_t TTSChoseong_JongseongToHangul()
{
  return _TTSChoseong_JongseongToHangul();
}

uint64_t TTSSpeechRateToNashvilleRate()
{
  return _TTSSpeechRateToNashvilleRate();
}

uint64_t TTSisSpeakableEmojiString()
{
  return _TTSisSpeakableEmojiString();
}

uint64_t UIAccessibilityAddMetadataDescriptionToImage()
{
  return _UIAccessibilityAddMetadataDescriptionToImage();
}

uint64_t UIAccessibilityAddMetadataDescriptionToVideo()
{
  return _UIAccessibilityAddMetadataDescriptionToVideo();
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
}

void UIGraphicsEndImageContext(void)
{
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return _UIGraphicsGetCurrentContext();
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return _UIGraphicsGetImageFromCurrentImageContext();
}

uint64_t VOSBrailleTableForRotorItem()
{
  return _VOSBrailleTableForRotorItem();
}

uint64_t VOSCrystalMigrateBrailleTableReplacements()
{
  return _VOSCrystalMigrateBrailleTableReplacements();
}

uint64_t VOSLocString()
{
  return _VOSLocString();
}

uint64_t VOSProcessAllowsScreenRecognition()
{
  return _VOSProcessAllowsScreenRecognition();
}

uint64_t VOSRepairBrailleTableSettings()
{
  return _VOSRepairBrailleTableSettings();
}

uint64_t VOTLogActivities()
{
  return _VOTLogActivities();
}

uint64_t VOTLogAudio()
{
  return _VOTLogAudio();
}

uint64_t VOTLogBraille()
{
  return _VOTLogBraille();
}

uint64_t VOTLogBrailleGestures()
{
  return _VOTLogBrailleGestures();
}

uint64_t VOTLogCommon()
{
  return _VOTLogCommon();
}

uint64_t VOTLogElement()
{
  return _VOTLogElement();
}

uint64_t VOTLogEvent()
{
  return _VOTLogEvent();
}

uint64_t VOTLogHandwriting()
{
  return _VOTLogHandwriting();
}

uint64_t VOTLogICloud()
{
  return _VOTLogICloud();
}

uint64_t VOTLogImageExplorer()
{
  return _VOTLogImageExplorer();
}

uint64_t VOTLogKeyboard()
{
  return _VOTLogKeyboard();
}

uint64_t VOTLogLayoutChange()
{
  return _VOTLogLayoutChange();
}

uint64_t VOTLogLifeCycle()
{
  return _VOTLogLifeCycle();
}

uint64_t VOTLogNotifications()
{
  return _VOTLogNotifications();
}

uint64_t VOTLogRotor()
{
  return _VOTLogRotor();
}

uint64_t VOTLogSimpleTap()
{
  return _VOTLogSimpleTap();
}

uint64_t VOTLogSpeech()
{
  return _VOTLogSpeech();
}

uint64_t VOTLogTVExplorer()
{
  return _VOTLogTVExplorer();
}

uint64_t VOTLogTVFocus()
{
  return _VOTLogTVFocus();
}

uint64_t VOTLogWebPageMovement()
{
  return _VOTLogWebPageMovement();
}

uint64_t _AXAddAssociatedPid()
{
  return __AXAddAssociatedPid();
}

uint64_t _AXAssert()
{
  return __AXAssert();
}

uint64_t _AXIsPidAssociated()
{
  return __AXIsPidAssociated();
}

uint64_t _AXLogWithFacility()
{
  return __AXLogWithFacility();
}

uint64_t _AXSAccessibilityGetBooleaniTunesPreference()
{
  return __AXSAccessibilityGetBooleaniTunesPreference();
}

uint64_t _AXSApplicationAccessibilityEnabled()
{
  return __AXSApplicationAccessibilityEnabled();
}

uint64_t _AXSApplicationAccessibilitySetEnabled()
{
  return __AXSApplicationAccessibilitySetEnabled();
}

uint64_t _AXSAssistiveTouchEnabled()
{
  return __AXSAssistiveTouchEnabled();
}

uint64_t _AXSAutomationEnabled()
{
  return __AXSAutomationEnabled();
}

uint64_t _AXSBrailleInputDeviceSetConnected()
{
  return __AXSBrailleInputDeviceSetConnected();
}

uint64_t _AXSBrailleScreenInputSetEnabled()
{
  return __AXSBrailleScreenInputSetEnabled();
}

uint64_t _AXSCanDisableApplicationAccessibility()
{
  return __AXSCanDisableApplicationAccessibility();
}

uint64_t _AXSClarityBoardEnabled()
{
  return __AXSClarityBoardEnabled();
}

uint64_t _AXSForcePreferenceUpdate()
{
  return __AXSForcePreferenceUpdate();
}

uint64_t _AXSForceTouchEnabled()
{
  return __AXSForceTouchEnabled();
}

uint64_t _AXSGetUSBRMDisablers()
{
  return __AXSGetUSBRMDisablers();
}

uint64_t _AXSInUnitTestMode()
{
  return __AXSInUnitTestMode();
}

uint64_t _AXSKeyRepeatDelay()
{
  return __AXSKeyRepeatDelay();
}

uint64_t _AXSKeyRepeatEnabled()
{
  return __AXSKeyRepeatEnabled();
}

uint64_t _AXSKeyRepeatInterval()
{
  return __AXSKeyRepeatInterval();
}

uint64_t _AXSPointerVoiceOverCursorOption()
{
  return __AXSPointerVoiceOverCursorOption();
}

uint64_t _AXSPrefersNonBlinkingCursorIndicator()
{
  return __AXSPrefersNonBlinkingCursorIndicator();
}

uint64_t _AXSSpeakThisEnabled()
{
  return __AXSSpeakThisEnabled();
}

uint64_t _AXSVoiceOverSpeakUnderPointerDelay()
{
  return __AXSVoiceOverSpeakUnderPointerDelay();
}

uint64_t _AXSVoiceOverSpeakUnderPointerEnabled()
{
  return __AXSVoiceOverSpeakUnderPointerEnabled();
}

uint64_t _AXSVoiceOverTouchActive2DBrailleDisplays()
{
  return __AXSVoiceOverTouchActive2DBrailleDisplays();
}

uint64_t _AXSVoiceOverTouchBrailleContractionMode()
{
  return __AXSVoiceOverTouchBrailleContractionMode();
}

uint64_t _AXSVoiceOverTouchBrailleEightDotMode()
{
  return __AXSVoiceOverTouchBrailleEightDotMode();
}

uint64_t _AXSVoiceOverTouchCopyBrailleTableIdentifier()
{
  return __AXSVoiceOverTouchCopyBrailleTableIdentifier();
}

uint64_t _AXSVoiceOverTouchCopyLanguageRotorItems()
{
  return __AXSVoiceOverTouchCopyLanguageRotorItems();
}

uint64_t _AXSVoiceOverTouchEnabled()
{
  return __AXSVoiceOverTouchEnabled();
}

uint64_t _AXSVoiceOverTouchEnabledThroughAccessory()
{
  return __AXSVoiceOverTouchEnabledThroughAccessory();
}

uint64_t _AXSVoiceOverTouchScreenCurtainEnabled()
{
  return __AXSVoiceOverTouchScreenCurtainEnabled();
}

uint64_t _AXSVoiceOverTouchSetActive2DBrailleDisplays()
{
  return __AXSVoiceOverTouchSetActive2DBrailleDisplays();
}

uint64_t _AXSVoiceOverTouchSetBrailleContractionMode()
{
  return __AXSVoiceOverTouchSetBrailleContractionMode();
}

uint64_t _AXSVoiceOverTouchSetBrailleEightDotMode()
{
  return __AXSVoiceOverTouchSetBrailleEightDotMode();
}

uint64_t _AXSVoiceOverTouchSetEnabled()
{
  return __AXSVoiceOverTouchSetEnabled();
}

uint64_t _AXSVoiceOverTouchSetEnabledThroughAccessory()
{
  return __AXSVoiceOverTouchSetEnabledThroughAccessory();
}

uint64_t _AXSVoiceOverTouchSetScreenCurtainEnabled()
{
  return __AXSVoiceOverTouchSetScreenCurtainEnabled();
}

uint64_t _AXSVoiceOverTouchSetSpeakingRate()
{
  return __AXSVoiceOverTouchSetSpeakingRate();
}

uint64_t _AXSVoiceOverTouchSetTypingMode()
{
  return __AXSVoiceOverTouchSetTypingMode();
}

uint64_t _AXSVoiceOverTouchSetUsageConfirmed()
{
  return __AXSVoiceOverTouchSetUsageConfirmed();
}

uint64_t _AXSVoiceOverTouchSetUserHasReadNoHomeButtonGestureDescription()
{
  return __AXSVoiceOverTouchSetUserHasReadNoHomeButtonGestureDescription();
}

uint64_t _AXSVoiceOverTouchShouldRouteToSpeakerWithProximity()
{
  return __AXSVoiceOverTouchShouldRouteToSpeakerWithProximity();
}

uint64_t _AXSVoiceOverTouchSpeakingRate()
{
  return __AXSVoiceOverTouchSpeakingRate();
}

uint64_t _AXSVoiceOverTouchTypingMode()
{
  return __AXSVoiceOverTouchTypingMode();
}

uint64_t _AXSVoiceOverTouchUIEnabled()
{
  return __AXSVoiceOverTouchUIEnabled();
}

uint64_t _AXSVoiceOverTouchUsageConfirmed()
{
  return __AXSVoiceOverTouchUsageConfirmed();
}

uint64_t _AXSVoiceOverTouchUserHasReadNoHomeButtonGestureDescription()
{
  return __AXSVoiceOverTouchUserHasReadNoHomeButtonGestureDescription();
}

uint64_t _AXSZoomTouchEnabled()
{
  return __AXSZoomTouchEnabled();
}

uint64_t _AXStringForArgs()
{
  return __AXStringForArgs();
}

uint64_t _AXTraitsRemoveTrait()
{
  return __AXTraitsRemoveTrait();
}

uint64_t _AXUIElementCreateAppElementWithPid()
{
  return __AXUIElementCreateAppElementWithPid();
}

uint64_t _AXUIElementCreateData()
{
  return __AXUIElementCreateData();
}

uint64_t _AXUIElementIDForElement()
{
  return __AXUIElementIDForElement();
}

uint64_t _AXUIScreenConvertToCAScreen()
{
  return __AXUIScreenConvertToCAScreen();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _UIAccessibilityFullKeyboardAccessEnabled()
{
  return __UIAccessibilityFullKeyboardAccessEnabled();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __AXStringForVariables()
{
  return ___AXStringForVariables();
}

uint64_t __UIAccessibilityCastAsClass()
{
  return ___UIAccessibilityCastAsClass();
}

uint64_t __UIAccessibilitySafeClass()
{
  return ___UIAccessibilitySafeClass();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

__double2 __sincos_stret(double a1)
{
  __double2 v3 = ___sincos_stret(a1);
  double cosval = v3.__cosval;
  double sinval = v3.__sinval;
  result.__double cosval = cosval;
  result.__double sinval = sinval;
  return result;
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

void abort(void)
{
}

long double acos(long double __x)
{
  return _acos(__x);
}

float atan2f(float a1, float a2)
{
  return _atan2f(a1, a2);
}

kern_return_t bootstrap_check_in(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return _bootstrap_check_in(bp, service_name, sp);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return _bootstrap_look_up(bp, service_name, sp);
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  return _cos(__x);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void exit(int a1)
{
}

long double exp2(long double __x)
{
  return _exp2(__x);
}

void free(void *a1)
{
}

uint64_t hearingAidStreamSelected()
{
  return _hearingAidStreamSelected();
}

int kill(pid_t a1, int a2)
{
  return _kill(a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return _mach_msg(msg, option, send_size, rcv_size, rcv_name, timeout, notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return _mach_port_deallocate(task, name);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return _mach_port_mod_refs(task, name, right, delta);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return _memset_s(__s, __smax, __c, __n);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
}

mach_port_t mig_get_reply_port(void)
{
  return _mig_get_reply_port();
}

void mig_put_reply_port(mach_port_t reply_port)
{
}

int munmap(void *a1, size_t a2)
{
  return _munmap(a1, a2);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

float powf(float a1, float a2)
{
  return _powf(a1, a2);
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

long double sin(long double __x)
{
  return _sin(__x);
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return _voucher_mach_msg_set(msg);
}

uint64_t vproc_swap_integer()
{
  return _vproc_swap_integer();
}

id objc_msgSend_AMSymbol(void *a1, const char *a2, ...)
{
  return _[a1 AMSymbol];
}

id objc_msgSend_AlertDidAppear(void *a1, const char *a2, ...)
{
  return _[a1 AlertDidAppear];
}

id objc_msgSend_AutofillDidAppear(void *a1, const char *a2, ...)
{
  return _[a1 AutofillDidAppear];
}

id objc_msgSend_AutofillDidDismiss(void *a1, const char *a2, ...)
{
  return _[a1 AutofillDidDismiss];
}

id objc_msgSend_BSIDidCalibrate(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidCalibrate];
}

id objc_msgSend_BSIDidCarriageReturn(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidCarriageReturn];
}

id objc_msgSend_BSIDidDelete(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidDelete];
}

id objc_msgSend_BSIDidDisable(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidDisable];
}

id objc_msgSend_BSIDidEnableCommand(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidEnableCommand];
}

id objc_msgSend_BSIDidEnableTyping(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidEnableTyping];
}

id objc_msgSend_BSIDidEnterChord(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidEnterChord];
}

id objc_msgSend_BSIDidEnterSpace(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidEnterSpace];
}

id objc_msgSend_BSIDidType(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidType];
}

id objc_msgSend_BackTapDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 BackTapDoubleTap];
}

id objc_msgSend_BackTapTripleTap(void *a1, const char *a2, ...)
{
  return _[a1 BackTapTripleTap];
}

id objc_msgSend_BoundaryEncountered(void *a1, const char *a2, ...)
{
  return _[a1 BoundaryEncountered];
}

id objc_msgSend_BrailleDisplayConnected(void *a1, const char *a2, ...)
{
  return _[a1 BrailleDisplayConnected];
}

id objc_msgSend_BrailleDisplayDisconnected(void *a1, const char *a2, ...)
{
  return _[a1 BrailleDisplayDisconnected];
}

id objc_msgSend_BrailleDisplayReconnectionTriggered(void *a1, const char *a2, ...)
{
  return _[a1 BrailleDisplayReconnectionTriggered];
}

id objc_msgSend_BrailleScreenInput(void *a1, const char *a2, ...)
{
  return _[a1 BrailleScreenInput];
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _[a1 CGImage];
}

id objc_msgSend_CGPointValue(void *a1, const char *a2, ...)
{
  return _[a1 CGPointValue];
}

id objc_msgSend_CollaborationOccurred(void *a1, const char *a2, ...)
{
  return _[a1 CollaborationOccurred];
}

id objc_msgSend_DidActivateElement(void *a1, const char *a2, ...)
{
  return _[a1 DidActivateElement];
}

id objc_msgSend_DidBeginPassthrough(void *a1, const char *a2, ...)
{
  return _[a1 DidBeginPassthrough];
}

id objc_msgSend_DidChangeTextSelectionDirection(void *a1, const char *a2, ...)
{
  return _[a1 DidChangeTextSelectionDirection];
}

id objc_msgSend_DidChangeVolume(void *a1, const char *a2, ...)
{
  return _[a1 DidChangeVolume];
}

id objc_msgSend_DidDisableQuickNav(void *a1, const char *a2, ...)
{
  return _[a1 DidDisableQuickNav];
}

id objc_msgSend_DidEnableQuickNav(void *a1, const char *a2, ...)
{
  return _[a1 DidEnableQuickNav];
}

id objc_msgSend_DidEnterSecureText(void *a1, const char *a2, ...)
{
  return _[a1 DidEnterSecureText];
}

id objc_msgSend_DidEnterTargetArea(void *a1, const char *a2, ...)
{
  return _[a1 DidEnterTargetArea];
}

id objc_msgSend_DidEnterTouchContainer(void *a1, const char *a2, ...)
{
  return _[a1 DidEnterTouchContainer];
}

id objc_msgSend_DidFocusOnElement(void *a1, const char *a2, ...)
{
  return _[a1 DidFocusOnElement];
}

id objc_msgSend_DidFocusOnScreenRecognitionElement(void *a1, const char *a2, ...)
{
  return _[a1 DidFocusOnScreenRecognitionElement];
}

id objc_msgSend_DidLeaveTargetArea(void *a1, const char *a2, ...)
{
  return _[a1 DidLeaveTargetArea];
}

id objc_msgSend_DidRecognizeMLContent(void *a1, const char *a2, ...)
{
  return _[a1 DidRecognizeMLContent];
}

id objc_msgSend_DidReorderItem(void *a1, const char *a2, ...)
{
  return _[a1 DidReorderItem];
}

id objc_msgSend_DidScrollByPage(void *a1, const char *a2, ...)
{
  return _[a1 DidScrollByPage];
}

id objc_msgSend_DidSelectAutofill(void *a1, const char *a2, ...)
{
  return _[a1 DidSelectAutofill];
}

id objc_msgSend_DidSelectNextRotor(void *a1, const char *a2, ...)
{
  return _[a1 DidSelectNextRotor];
}

id objc_msgSend_DidSelectPreviousRotor(void *a1, const char *a2, ...)
{
  return _[a1 DidSelectPreviousRotor];
}

id objc_msgSend_DidSyncWithSystemFocus(void *a1, const char *a2, ...)
{
  return _[a1 DidSyncWithSystemFocus];
}

id objc_msgSend_DidWrapBackwards(void *a1, const char *a2, ...)
{
  return _[a1 DidWrapBackwards];
}

id objc_msgSend_DidWrapForwards(void *a1, const char *a2, ...)
{
  return _[a1 DidWrapForwards];
}

id objc_msgSend_DockDidAppear(void *a1, const char *a2, ...)
{
  return _[a1 DockDidAppear];
}

id objc_msgSend_DockDidDisappear(void *a1, const char *a2, ...)
{
  return _[a1 DockDidDisappear];
}

id objc_msgSend_FiveFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 FiveFingerDoubleTap];
}

id objc_msgSend_FolderDidClose(void *a1, const char *a2, ...)
{
  return _[a1 FolderDidClose];
}

id objc_msgSend_FolderDidOpen(void *a1, const char *a2, ...)
{
  return _[a1 FolderDidOpen];
}

id objc_msgSend_FolderWillOpen(void *a1, const char *a2, ...)
{
  return _[a1 FolderWillOpen];
}

id objc_msgSend_FourFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerDoubleTap];
}

id objc_msgSend_FourFingerFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerFlickDown];
}

id objc_msgSend_FourFingerFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerFlickLeft];
}

id objc_msgSend_FourFingerFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerFlickRight];
}

id objc_msgSend_FourFingerFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerFlickUp];
}

id objc_msgSend_FourFingerQuadrupleTap(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerQuadrupleTap];
}

id objc_msgSend_FourFingerSingleTap(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerSingleTap];
}

id objc_msgSend_FourFingerTripleTap(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerTripleTap];
}

id objc_msgSend_HIDTime(void *a1, const char *a2, ...)
{
  return _[a1 HIDTime];
}

id objc_msgSend_Handwriting(void *a1, const char *a2, ...)
{
  return _[a1 Handwriting];
}

id objc_msgSend_InsertionPointDidMove(void *a1, const char *a2, ...)
{
  return _[a1 InsertionPointDidMove];
}

id objc_msgSend_InteractIn(void *a1, const char *a2, ...)
{
  return _[a1 InteractIn];
}

id objc_msgSend_InteractOut(void *a1, const char *a2, ...)
{
  return _[a1 InteractOut];
}

id objc_msgSend_IsInteractable(void *a1, const char *a2, ...)
{
  return _[a1 IsInteractable];
}

id objc_msgSend_ItemDidLoad(void *a1, const char *a2, ...)
{
  return _[a1 ItemDidLoad];
}

id objc_msgSend_ItemIsLoading(void *a1, const char *a2, ...)
{
  return _[a1 ItemIsLoading];
}

id objc_msgSend_ItemMemorizationFailed(void *a1, const char *a2, ...)
{
  return _[a1 ItemMemorizationFailed];
}

id objc_msgSend_ItemMemorizationInProgress(void *a1, const char *a2, ...)
{
  return _[a1 ItemMemorizationInProgress];
}

id objc_msgSend_ItemMemorizationSucceeded(void *a1, const char *a2, ...)
{
  return _[a1 ItemMemorizationSucceeded];
}

id objc_msgSend_KeyboardAppeared(void *a1, const char *a2, ...)
{
  return _[a1 KeyboardAppeared];
}

id objc_msgSend_KeyboardDisappeared(void *a1, const char *a2, ...)
{
  return _[a1 KeyboardDisappeared];
}

id objc_msgSend_NextRotorProgress(void *a1, const char *a2, ...)
{
  return _[a1 NextRotorProgress];
}

id objc_msgSend_NoItemExists(void *a1, const char *a2, ...)
{
  return _[a1 NoItemExists];
}

id objc_msgSend_NoResultsFound(void *a1, const char *a2, ...)
{
  return _[a1 NoResultsFound];
}

id objc_msgSend_NotificationDidAppear(void *a1, const char *a2, ...)
{
  return _[a1 NotificationDidAppear];
}

id objc_msgSend_OneFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerDoubleTap];
}

id objc_msgSend_OneFingerFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerFlickDown];
}

id objc_msgSend_OneFingerFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerFlickLeft];
}

id objc_msgSend_OneFingerFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerFlickRight];
}

id objc_msgSend_OneFingerFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerFlickUp];
}

id objc_msgSend_OneFingerQuadrupleTap(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerQuadrupleTap];
}

id objc_msgSend_OneFingerSplitFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerSplitFlickDown];
}

id objc_msgSend_OneFingerSplitFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerSplitFlickLeft];
}

id objc_msgSend_OneFingerSplitFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerSplitFlickRight];
}

id objc_msgSend_OneFingerSplitFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerSplitFlickUp];
}

id objc_msgSend_OneFingerTripleTap(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerTripleTap];
}

id objc_msgSend_PMSymbol(void *a1, const char *a2, ...)
{
  return _[a1 PMSymbol];
}

id objc_msgSend_PopoverDidAppear(void *a1, const char *a2, ...)
{
  return _[a1 PopoverDidAppear];
}

id objc_msgSend_PreviousRotorProgress(void *a1, const char *a2, ...)
{
  return _[a1 PreviousRotorProgress];
}

id objc_msgSend_ReachabilityDidBegin(void *a1, const char *a2, ...)
{
  return _[a1 ReachabilityDidBegin];
}

id objc_msgSend_ReachabilityDidEnd(void *a1, const char *a2, ...)
{
  return _[a1 ReachabilityDidEnd];
}

id objc_msgSend_ScreenDidChange(void *a1, const char *a2, ...)
{
  return _[a1 ScreenDidChange];
}

id objc_msgSend_ScreenDidTurnOff(void *a1, const char *a2, ...)
{
  return _[a1 ScreenDidTurnOff];
}

id objc_msgSend_SensitiveContent(void *a1, const char *a2, ...)
{
  return _[a1 SensitiveContent];
}

id objc_msgSend_Startup(void *a1, const char *a2, ...)
{
  return _[a1 Startup];
}

id objc_msgSend_TVDidBeginInteractionWithRotor(void *a1, const char *a2, ...)
{
  return _[a1 TVDidBeginInteractionWithRotor];
}

id objc_msgSend_TVDidEndInteractionWithRotor(void *a1, const char *a2, ...)
{
  return _[a1 TVDidEndInteractionWithRotor];
}

id objc_msgSend_ThreeFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerDoubleTap];
}

id objc_msgSend_ThreeFingerDoubleTapHoldAndFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerDoubleTapHoldAndFlickDown];
}

id objc_msgSend_ThreeFingerDoubleTapHoldAndFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerDoubleTapHoldAndFlickLeft];
}

id objc_msgSend_ThreeFingerDoubleTapHoldAndFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerDoubleTapHoldAndFlickRight];
}

id objc_msgSend_ThreeFingerDoubleTapHoldAndFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerDoubleTapHoldAndFlickUp];
}

id objc_msgSend_ThreeFingerFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerFlickDown];
}

id objc_msgSend_ThreeFingerFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerFlickLeft];
}

id objc_msgSend_ThreeFingerFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerFlickRight];
}

id objc_msgSend_ThreeFingerFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerFlickUp];
}

id objc_msgSend_ThreeFingerQuadrupleTap(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerQuadrupleTap];
}

id objc_msgSend_ThreeFingerSingleTap(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerSingleTap];
}

id objc_msgSend_ThreeFingerTripleTap(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerTripleTap];
}

id objc_msgSend_TouchIDAuthenticated(void *a1, const char *a2, ...)
{
  return _[a1 TouchIDAuthenticated];
}

id objc_msgSend_TouchIDFailed(void *a1, const char *a2, ...)
{
  return _[a1 TouchIDFailed];
}

id objc_msgSend_TutorialMagicTapStart(void *a1, const char *a2, ...)
{
  return _[a1 TutorialMagicTapStart];
}

id objc_msgSend_TutorialMagicTapStop(void *a1, const char *a2, ...)
{
  return _[a1 TutorialMagicTapStop];
}

id objc_msgSend_TutorialSuccess(void *a1, const char *a2, ...)
{
  return _[a1 TutorialSuccess];
}

id objc_msgSend_TwoDistantFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoDistantFingerDoubleTap];
}

id objc_msgSend_TwoDistantFingerSingleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoDistantFingerSingleTap];
}

id objc_msgSend_TwoDistantFingerTripleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoDistantFingerTripleTap];
}

id objc_msgSend_TwoFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerDoubleTap];
}

id objc_msgSend_TwoFingerFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerFlickDown];
}

id objc_msgSend_TwoFingerFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerFlickLeft];
}

id objc_msgSend_TwoFingerFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerFlickRight];
}

id objc_msgSend_TwoFingerFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerFlickUp];
}

id objc_msgSend_TwoFingerPinch(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerPinch];
}

id objc_msgSend_TwoFingerQuadrupleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerQuadrupleTap];
}

id objc_msgSend_TwoFingerRotateClockwise(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerRotateClockwise];
}

id objc_msgSend_TwoFingerRotateCounterclockwise(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerRotateCounterclockwise];
}

id objc_msgSend_TwoFingerScrub(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerScrub];
}

id objc_msgSend_TwoFingerSingleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerSingleTap];
}

id objc_msgSend_TwoFingerSingleTapAndHold(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerSingleTapAndHold];
}

id objc_msgSend_TwoFingerSplitFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerSplitFlickLeft];
}

id objc_msgSend_TwoFingerSplitFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerSplitFlickRight];
}

id objc_msgSend_TwoFingerTripleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerTripleTap];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_UnknownCommand(void *a1, const char *a2, ...)
{
  return _[a1 UnknownCommand];
}

id objc_msgSend___consumeAppTransitionForAnnouncingIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__consumeAppTransitionForAnnouncingIfNeeded:");
}

id objc_msgSend___handleTVSelectButtonClicked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__handleTVSelectButtonClicked");
}

id objc_msgSend___sendHIDEvents_postEventDelays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__sendHIDEvents:postEventDelays:");
}

id objc_msgSend___sendOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__sendOutputRequest:");
}

id objc_msgSend___sendTVRemoteCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__sendTVRemoteCommand:");
}

id objc_msgSend___targetElementForFocusElement_mustBeAccessibilityElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__targetElementForFocusElement:mustBeAccessibilityElement:");
}

id objc_msgSend___updateAudioSessionProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__updateAudioSessionProperties");
}

id objc_msgSend___updateVoiceOverEnabledWarningBannerVisibility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__updateVoiceOverEnabledWarningBannerVisibility");
}

id objc_msgSend__activateBrailleScreenInputIfNeededForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateBrailleScreenInputIfNeededForElement:");
}

id objc_msgSend__activeAudioRouteChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeAudioRouteChanged:");
}

id objc_msgSend__activeRouteChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeRouteChanged:");
}

id objc_msgSend__addAXOutputActions_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAXOutputActions:atIndex:");
}

id objc_msgSend__addApplicationLabelsAndSummariesToRequest_applicationNames_summaryElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addApplicationLabelsAndSummariesToRequest:applicationNames:summaryElements:");
}

id objc_msgSend__addDescription_toRequest_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addDescription:toRequest:withOptions:");
}

id objc_msgSend__addDescription_toRequest_withOptions_lastSeenContextDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addDescription:toRequest:withOptions:lastSeenContextDescriptors:");
}

id objc_msgSend__addElementCommunityNameIfNeededToRequest_oldElementCommunity_newElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addElementCommunityNameIfNeededToRequest:oldElementCommunity:newElementCommunity:");
}

id objc_msgSend__addErrorMessageElement_toRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addErrorMessageElement:toRequest:");
}

id objc_msgSend__addFormattedStringToRequest_formattedString_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addFormattedStringToRequest:formattedString:withElement:");
}

id objc_msgSend__addHeaderElement_toRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addHeaderElement:toRequest:");
}

id objc_msgSend__addInstanceOfDrift_toArray_forPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addInstanceOfDrift:toArray:forPattern:");
}

id objc_msgSend__additionalElementCommunities(void *a1, const char *a2, ...)
{
  return _[a1 _additionalElementCommunities];
}

id objc_msgSend__adjustFrameToFitScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustFrameToFitScreen:");
}

id objc_msgSend__adjustPointValue_withDrift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustPointValue:withDrift:");
}

id objc_msgSend__adjustRecognizedStringForActiveCharacterMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustRecognizedStringForActiveCharacterMode:");
}

id objc_msgSend__adjustedRotorIndex_inDirection_rotorItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustedRotorIndex:inDirection:rotorItems:");
}

id objc_msgSend__allDotsAreOnScreen_withDrift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allDotsAreOnScreen:withDrift:");
}

id objc_msgSend__allElementCommunitiesWithFocusedApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allElementCommunitiesWithFocusedApplications:");
}

id objc_msgSend__alternativeKeyActivateTime(void *a1, const char *a2, ...)
{
  return _[a1 _alternativeKeyActivateTime];
}

id objc_msgSend__announceActiveCharacterMode(void *a1, const char *a2, ...)
{
  return _[a1 _announceActiveCharacterMode];
}

id objc_msgSend__announceBrailleTypingPropertiesIncludingOrientation_typingMode_forUnlockConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_announceBrailleTypingPropertiesIncludingOrientation:typingMode:forUnlockConfiguration:");
}

id objc_msgSend__announceDragCount(void *a1, const char *a2, ...)
{
  return _[a1 _announceDragCount];
}

id objc_msgSend__announceDragPickup(void *a1, const char *a2, ...)
{
  return _[a1 _announceDragPickup];
}

id objc_msgSend__announceDropReady(void *a1, const char *a2, ...)
{
  return _[a1 _announceDropReady];
}

id objc_msgSend__announceDropUnready(void *a1, const char *a2, ...)
{
  return _[a1 _announceDropUnready];
}

id objc_msgSend__announceRespectingSoundSettingsRequest_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_announceRespectingSoundSettingsRequest:event:");
}

id objc_msgSend__announceRespectingSoundSettingsRequest_event_hint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_announceRespectingSoundSettingsRequest:event:hint:");
}

id objc_msgSend__appInfoForCurrentElement(void *a1, const char *a2, ...)
{
  return _[a1 _appInfoForCurrentElement];
}

id objc_msgSend__appSuspensionSoundTimer(void *a1, const char *a2, ...)
{
  return _[a1 _appSuspensionSoundTimer];
}

id objc_msgSend__appendCurrentRotorValue_forRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendCurrentRotorValue:forRotor:");
}

id objc_msgSend__appendDots_toPositionsArray_withDrift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendDots:toPositionsArray:withDrift:");
}

id objc_msgSend__appendLiteralCharacterString_toString_hasPhoneContext_hasMathContext_action_punctuationTableLanguageUsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendLiteralCharacterString:toString:hasPhoneContext:hasMathContext:action:punctuationTableLanguageUsed:");
}

id objc_msgSend__appendOrientationToAnnouncement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendOrientationToAnnouncement:");
}

id objc_msgSend__applicationMatchingBlock_inApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationMatchingBlock:inApplications:");
}

id objc_msgSend__applyAttributesFromText_toRequest_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyAttributesFromText:toRequest:withLanguage:");
}

id objc_msgSend__applyBrailleTextFormattingAndInlineCompletionOptions_attributedString_brailleLineRange_rangeOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyBrailleTextFormattingAndInlineCompletionOptions:attributedString:brailleLineRange:rangeOffset:");
}

id objc_msgSend__applyCamelCaseSeparation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyCamelCaseSeparation:");
}

id objc_msgSend__applyCurrentStatus_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyCurrentStatus:language:");
}

id objc_msgSend__applyCustomContent_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyCustomContent:language:");
}

id objc_msgSend__applyDatetimeAttribute_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyDatetimeAttribute:language:");
}

id objc_msgSend__applyExpandedStatus_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyExpandedStatus:language:");
}

id objc_msgSend__applyHasPopupAttribute_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyHasPopupAttribute:withLanguage:");
}

id objc_msgSend__applyHeaderStatus_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyHeaderStatus:language:");
}

id objc_msgSend__applyInvalidStatus_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyInvalidStatus:language:");
}

id objc_msgSend__applyLabelToRequest_includeBlockQuote_language_isWebLanguageChoice_interactOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyLabelToRequest:includeBlockQuote:language:isWebLanguageChoice:interactOption:");
}

id objc_msgSend__applyLanguageTokens_attributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyLanguageTokens:attributedString:");
}

id objc_msgSend__applyLinkRelationshipType_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyLinkRelationshipType:language:");
}

id objc_msgSend__applyNextCandidate(void *a1, const char *a2, ...)
{
  return _[a1 _applyNextCandidate];
}

id objc_msgSend__applyPreviousCandidate(void *a1, const char *a2, ...)
{
  return _[a1 _applyPreviousCandidate];
}

id objc_msgSend__applyRoleDescription_language_interactOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyRoleDescription:language:interactOption:");
}

id objc_msgSend__applySelectedTrait_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applySelectedTrait:language:");
}

id objc_msgSend__applySortDirection_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applySortDirection:language:");
}

id objc_msgSend__applyStickyCustomActions_customAction_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyStickyCustomActions:customAction:language:");
}

id objc_msgSend__applySuggestionToElement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applySuggestionToElement:direction:");
}

id objc_msgSend__applyTableColumnIndex_options_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTableColumnIndex:options:language:");
}

id objc_msgSend__applyTableRowColumnSpan_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTableRowColumnSpan:language:");
}

id objc_msgSend__applyTableRowIndex_options_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTableRowIndex:options:language:");
}

id objc_msgSend__applyTelephoneFormatting_withRanges_languageCode_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTelephoneFormatting:withRanges:languageCode:voiceIdentifier:rate:");
}

id objc_msgSend__applyTextualWorkarounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTextualWorkarounds:");
}

id objc_msgSend__applyTraitsToRequest_options_numHeaderActions_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTraitsToRequest:options:numHeaderActions:language:");
}

id objc_msgSend__applyTransliteration_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTransliteration:languageCode:");
}

id objc_msgSend__applyValueToRequest_options_lastSeenLineAndColumn_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyValueToRequest:options:lastSeenLineAndColumn:language:");
}

id objc_msgSend__applyVoiceOverMigrations(void *a1, const char *a2, ...)
{
  return _[a1 _applyVoiceOverMigrations];
}

id objc_msgSend__arrayOfDictionariesFromPointValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_arrayOfDictionariesFromPointValues:");
}

id objc_msgSend__assetUpdaterClient(void *a1, const char *a2, ...)
{
  return _[a1 _assetUpdaterClient];
}

id objc_msgSend__attemptPerformActivateActionWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptPerformActivateActionWithElement:");
}

id objc_msgSend__attemptRecoveryFromCrashloopDueToVoiceMemoryPressure(void *a1, const char *a2, ...)
{
  return _[a1 _attemptRecoveryFromCrashloopDueToVoiceMemoryPressure];
}

id objc_msgSend__atvEventFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_atvEventFilter:");
}

id objc_msgSend__audioAccessoryEventFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_audioAccessoryEventFilter:");
}

id objc_msgSend__audioDuckingModeString(void *a1, const char *a2, ...)
{
  return _[a1 _audioDuckingModeString];
}

id objc_msgSend__averageLeftDrift(void *a1, const char *a2, ...)
{
  return _[a1 _averageLeftDrift];
}

id objc_msgSend__averageOfOldFloat_newFloat_dataCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_averageOfOldFloat:newFloat:dataCount:");
}

id objc_msgSend__averageOfOldPoint_newPoint_dataCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_averageOfOldPoint:newPoint:dataCount:");
}

id objc_msgSend__averagePointForLastDownEvent(void *a1, const char *a2, ...)
{
  return _[a1 _averagePointForLastDownEvent];
}

id objc_msgSend__averageRecentDriftFromDrifts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_averageRecentDriftFromDrifts:");
}

id objc_msgSend__averageRightDrift(void *a1, const char *a2, ...)
{
  return _[a1 _averageRightDrift];
}

id objc_msgSend__axEndPassthroughTouch(void *a1, const char *a2, ...)
{
  return _[a1 _axEndPassthroughTouch];
}

id objc_msgSend__beginAudiographScrubbingMode(void *a1, const char *a2, ...)
{
  return _[a1 _beginAudiographScrubbingMode];
}

id objc_msgSend__beginNativeSliding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginNativeSliding:");
}

id objc_msgSend__bookContentElementInteraction_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bookContentElementInteraction:element:");
}

id objc_msgSend__bothObjectsAreNilOrBothAreNonNil_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bothObjectsAreNilOrBothAreNonNil:object:");
}

id objc_msgSend__brailleAutoAdvanceSpeedString(void *a1, const char *a2, ...)
{
  return _[a1 _brailleAutoAdvanceSpeedString];
}

id objc_msgSend__brailleAutoAdvanceStepFactor(void *a1, const char *a2, ...)
{
  return _[a1 _brailleAutoAdvanceStepFactor];
}

id objc_msgSend__brailleGestureManager(void *a1, const char *a2, ...)
{
  return _[a1 _brailleGestureManager];
}

id objc_msgSend__brailleLineRangeForDescription_position_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_brailleLineRangeForDescription:position:");
}

id objc_msgSend__brailleMaxOrigin(void *a1, const char *a2, ...)
{
  return _[a1 _brailleMaxOrigin];
}

id objc_msgSend__brailleShouldTryToTurnPage_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_brailleShouldTryToTurnPage:direction:");
}

id objc_msgSend__bundleIdentifierIsHostedByPineBoard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bundleIdentifierIsHostedByPineBoard:");
}

id objc_msgSend__cacheFocusedElement_forElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheFocusedElement:forElementCommunity:");
}

id objc_msgSend__cachedLaunchIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedLaunchIcon:");
}

id objc_msgSend__calibrateWithTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calibrateWithTouchPoints:");
}

id objc_msgSend__calibratedDotPositionsFilePath(void *a1, const char *a2, ...)
{
  return _[a1 _calibratedDotPositionsFilePath];
}

id objc_msgSend__callCenterQueue_currentCallState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCenterQueue_currentCallState");
}

id objc_msgSend__callStatusChanged(void *a1, const char *a2, ...)
{
  return _[a1 _callStatusChanged];
}

id objc_msgSend__canActivateTapticTime(void *a1, const char *a2, ...)
{
  return _[a1 _canActivateTapticTime];
}

id objc_msgSend__canScribbleWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canScribbleWithElement:");
}

id objc_msgSend__canUseContractedBraille(void *a1, const char *a2, ...)
{
  return _[a1 _canUseContractedBraille];
}

id objc_msgSend__cancelPreviousElementSearch(void *a1, const char *a2, ...)
{
  return _[a1 _cancelPreviousElementSearch];
}

id objc_msgSend__cancelScribbleTapAndHoldModeTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _cancelScribbleTapAndHoldModeTimeout];
}

id objc_msgSend__cancelTapAndHold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelTapAndHold:");
}

id objc_msgSend__cancelTapAndHold_forScribble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelTapAndHold:forScribble:");
}

id objc_msgSend__cancelUpdateScribbleTapAndHoldModeOffset(void *a1, const char *a2, ...)
{
  return _[a1 _cancelUpdateScribbleTapAndHoldModeOffset];
}

id objc_msgSend__captionsDisplayedWithTextRuns_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_captionsDisplayedWithTextRuns:");
}

id objc_msgSend__changeOriginatorForSourceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changeOriginatorForSourceName:");
}

id objc_msgSend__characterModesForCharacterModeMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_characterModesForCharacterModeMask:");
}

id objc_msgSend__characterRangeWithFaultTolerance_forward_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_characterRangeWithFaultTolerance:forward:element:");
}

id objc_msgSend__characterSetForHandwritingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_characterSetForHandwritingMode:");
}

id objc_msgSend__characterStringRepresentationForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_characterStringRepresentationForKey:");
}

id objc_msgSend__chartElementDidChangeForElement_oldElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_chartElementDidChangeForElement:oldElement:");
}

id objc_msgSend__checkDataDetectorIfPresent_element_includeLinks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkDataDetectorIfPresent:element:includeLinks:");
}

id objc_msgSend__checkVoiceOverWasConfirmed(void *a1, const char *a2, ...)
{
  return _[a1 _checkVoiceOverWasConfirmed];
}

id objc_msgSend__cleanUpTouchesIncludingCalibrationStartPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanUpTouchesIncludingCalibrationStartPoints:");
}

id objc_msgSend__cleanupMapInteractionOnIdle(void *a1, const char *a2, ...)
{
  return _[a1 _cleanupMapInteractionOnIdle];
}

id objc_msgSend__clearWebLoadedSound(void *a1, const char *a2, ...)
{
  return _[a1 _clearWebLoadedSound];
}

id objc_msgSend__closeItemChooser(void *a1, const char *a2, ...)
{
  return _[a1 _closeItemChooser];
}

id objc_msgSend__closestHalfPatternForOrderedTouches_possibleMatches_side_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closestHalfPatternForOrderedTouches:possibleMatches:side:");
}

id objc_msgSend__commandResolver(void *a1, const char *a2, ...)
{
  return _[a1 _commandResolver];
}

id objc_msgSend__commitBufferedBraille(void *a1, const char *a2, ...)
{
  return _[a1 _commitBufferedBraille];
}

id objc_msgSend__commitDeferredZoomInfo(void *a1, const char *a2, ...)
{
  return _[a1 _commitDeferredZoomInfo];
}

id objc_msgSend__commitDeferredZoomInfoIfAppropriate(void *a1, const char *a2, ...)
{
  return _[a1 _commitDeferredZoomInfoIfAppropriate];
}

id objc_msgSend__computeChangedFontAttributes_storedAttributes_haveMisspellCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeChangedFontAttributes:storedAttributes:haveMisspellCheck:");
}

id objc_msgSend__configureAsSingleLinkElementWithRequest_linkTraitTitle_hint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureAsSingleLinkElementWithRequest:linkTraitTitle:hint:");
}

id objc_msgSend__configureSynthesizerWithPhonemeSubstitutionsFromAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureSynthesizerWithPhonemeSubstitutionsFromAction:");
}

id objc_msgSend__contextlessTouchWithHandType_location_force_altitude_azimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contextlessTouchWithHandType:location:force:altitude:azimuth:");
}

id objc_msgSend__continueReadAllWithElement_setCurrentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueReadAllWithElement:setCurrentElement:");
}

id objc_msgSend__continueTrackingKeyboardKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueTrackingKeyboardKey:");
}

id objc_msgSend__continueTrackingRoadElementWithPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueTrackingRoadElementWithPoint:");
}

id objc_msgSend__convertFrame_toPortraitFromOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertFrame:toPortraitFromOrientation:");
}

id objc_msgSend__convertTextMarkerArrayToString_addInContentExtras_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertTextMarkerArrayToString:addInContentExtras:");
}

id objc_msgSend__convertZoomPointToDevicePoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertZoomPointToDevicePoint:");
}

id objc_msgSend__convertZoomRecordToDeviceRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertZoomRecordToDeviceRecord:");
}

id objc_msgSend__copyInternalsToElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyInternalsToElement:");
}

id objc_msgSend__copyMatchBlockAnyElement(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockAnyElement];
}

id objc_msgSend__copyMatchBlockArticleStart(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockArticleStart];
}

id objc_msgSend__copyMatchBlockBlockquote(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockBlockquote];
}

id objc_msgSend__copyMatchBlockButton(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockButton];
}

id objc_msgSend__copyMatchBlockCheckbox(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockCheckbox];
}

id objc_msgSend__copyMatchBlockDifferent(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockDifferent];
}

id objc_msgSend__copyMatchBlockForHeadingLevel_searchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyMatchBlockForHeadingLevel:searchType:");
}

id objc_msgSend__copyMatchBlockForRotorType_searchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyMatchBlockForRotorType:searchType:");
}

id objc_msgSend__copyMatchBlockForTextAttribute_searchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyMatchBlockForTextAttribute:searchType:");
}

id objc_msgSend__copyMatchBlockFormElement(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockFormElement];
}

id objc_msgSend__copyMatchBlockFrameStart(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockFrameStart];
}

id objc_msgSend__copyMatchBlockHeader(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockHeader];
}

id objc_msgSend__copyMatchBlockImage(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockImage];
}

id objc_msgSend__copyMatchBlockLandmarkStart(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockLandmarkStart];
}

id objc_msgSend__copyMatchBlockLink(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockLink];
}

id objc_msgSend__copyMatchBlockListStart(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockListStart];
}

id objc_msgSend__copyMatchBlockNonVisitedLink(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockNonVisitedLink];
}

id objc_msgSend__copyMatchBlockRadioButton(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockRadioButton];
}

id objc_msgSend__copyMatchBlockSameBlockquote(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockSameBlockquote];
}

id objc_msgSend__copyMatchBlockSameHeading(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockSameHeading];
}

id objc_msgSend__copyMatchBlockSearchField(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockSearchField];
}

id objc_msgSend__copyMatchBlockSearchText(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockSearchText];
}

id objc_msgSend__copyMatchBlockSimilar(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockSimilar];
}

id objc_msgSend__copyMatchBlockStaticText(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockStaticText];
}

id objc_msgSend__copyMatchBlockTableStart(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockTableStart];
}

id objc_msgSend__copyMatchBlockTextField(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockTextField];
}

id objc_msgSend__copyMatchBlockVisitedLink(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockVisitedLink];
}

id objc_msgSend__copyMathTextualInformationWithBrailleLineRange_brailleDescriptionRange_position_rotorSelection_shouldPreferRotorSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyMathTextualInformationWithBrailleLineRange:brailleDescriptionRange:position:rotorSelection:shouldPreferRotorSelection:");
}

id objc_msgSend__copyRangeMatchBlockForRotorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyRangeMatchBlockForRotorType:");
}

id objc_msgSend__copySideAppDividerElementIfApplicableForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copySideAppDividerElementIfApplicableForPoint:");
}

id objc_msgSend__createTelephonySynthesizer(void *a1, const char *a2, ...)
{
  return _[a1 _createTelephonySynthesizer];
}

id objc_msgSend__currentApplicationMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentApplicationMatchingBlock:");
}

id objc_msgSend__currentAvailableRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 _currentAvailableRotorItems];
}

id objc_msgSend__currentCachedCustomActionCategories(void *a1, const char *a2, ...)
{
  return _[a1 _currentCachedCustomActionCategories];
}

id objc_msgSend__currentContext(void *a1, const char *a2, ...)
{
  return _[a1 _currentContext];
}

id objc_msgSend__currentCustomActionCategory(void *a1, const char *a2, ...)
{
  return _[a1 _currentCustomActionCategory];
}

id objc_msgSend__currentCustomActions(void *a1, const char *a2, ...)
{
  return _[a1 _currentCustomActions];
}

id objc_msgSend__currentCustomRotorString(void *a1, const char *a2, ...)
{
  return _[a1 _currentCustomRotorString];
}

id objc_msgSend__currentElement(void *a1, const char *a2, ...)
{
  return _[a1 _currentElement];
}

id objc_msgSend__currentElementAtCenterPointOfElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentElementAtCenterPointOfElement:");
}

id objc_msgSend__currentEnabledWebRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 _currentEnabledWebRotorItems];
}

id objc_msgSend__currentGestureRepeaterEvent(void *a1, const char *a2, ...)
{
  return _[a1 _currentGestureRepeaterEvent];
}

id objc_msgSend__currentGesturedTextInputManager(void *a1, const char *a2, ...)
{
  return _[a1 _currentGesturedTextInputManager];
}

id objc_msgSend__currentGesturedTextInputManagerAndCommandResolver_forCommandResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentGesturedTextInputManagerAndCommandResolver:forCommandResolver:");
}

id objc_msgSend__currentLocaleUsesSpaceAsSeparator(void *a1, const char *a2, ...)
{
  return _[a1 _currentLocaleUsesSpaceAsSeparator];
}

id objc_msgSend__currentMathGranularityLevel(void *a1, const char *a2, ...)
{
  return _[a1 _currentMathGranularityLevel];
}

id objc_msgSend__currentMedusaApplications(void *a1, const char *a2, ...)
{
  return _[a1 _currentMedusaApplications];
}

id objc_msgSend__currentResponder(void *a1, const char *a2, ...)
{
  return _[a1 _currentResponder];
}

id objc_msgSend__currentRotorSelection(void *a1, const char *a2, ...)
{
  return _[a1 _currentRotorSelection];
}

id objc_msgSend__currentTextLineInBookElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentTextLineInBookElement:");
}

id objc_msgSend__customActionDefaultActionString(void *a1, const char *a2, ...)
{
  return _[a1 _customActionDefaultActionString];
}

id objc_msgSend__customActionsAddingDragCancelActionIfNecessaryForActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customActionsAddingDragCancelActionIfNecessaryForActions:");
}

id objc_msgSend__customPublicRotorInRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customPublicRotorInRotor:");
}

id objc_msgSend__customPublicRotorMatchForType_range_element_direction_lastSearchUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customPublicRotorMatchForType:range:element:direction:lastSearchUUID:");
}

id objc_msgSend__customRotorTypeRequiresFirstElementProcessing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customRotorTypeRequiresFirstElementProcessing:");
}

id objc_msgSend__debug_currentlyRunningOnThisThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_debug_currentlyRunningOnThisThread");
}

id objc_msgSend__defaultLanguageRotorItem(void *a1, const char *a2, ...)
{
  return _[a1 _defaultLanguageRotorItem];
}

id objc_msgSend__delayForCurrentRepeatCount(void *a1, const char *a2, ...)
{
  return _[a1 _delayForCurrentRepeatCount];
}

id objc_msgSend__deleteCalibratedData(void *a1, const char *a2, ...)
{
  return _[a1 _deleteCalibratedData];
}

id objc_msgSend__deleteFromCurrentInputStringIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _deleteFromCurrentInputStringIfNeeded];
}

id objc_msgSend__denormalizeEventRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_denormalizeEventRepresentation:");
}

id objc_msgSend__depromoteMLElementSupport(void *a1, const char *a2, ...)
{
  return _[a1 _depromoteMLElementSupport];
}

id objc_msgSend__deregisterForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _deregisterForNotifications];
}

id objc_msgSend__descriptionForBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionForBool:");
}

id objc_msgSend__descriptionForCharacterSets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionForCharacterSets:");
}

id objc_msgSend__determineEmojiPreferenceForAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineEmojiPreferenceForAction:");
}

id objc_msgSend__determinePunctuationGroupForAction_isDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determinePunctuationGroupForAction:isDefault:");
}

id objc_msgSend__determineVoiceIdentifier_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineVoiceIdentifier:languageCode:");
}

id objc_msgSend__determineVoiceSelection_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineVoiceSelection:languageCode:");
}

id objc_msgSend__determineVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineVolume:");
}

id objc_msgSend__deviceSupportsMoreThanFiveTouches(void *a1, const char *a2, ...)
{
  return _[a1 _deviceSupportsMoreThanFiveTouches];
}

id objc_msgSend__diacriticsForCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_diacriticsForCharacter:");
}

id objc_msgSend__didDismissItemChooser(void *a1, const char *a2, ...)
{
  return _[a1 _didDismissItemChooser];
}

id objc_msgSend__didFocusUpdateOriginateFromFocusedApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFocusUpdateOriginateFromFocusedApp:");
}

id objc_msgSend__didStartSpeakingAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didStartSpeakingAction:");
}

id objc_msgSend__disableQuickNavStateTemporarily(void *a1, const char *a2, ...)
{
  return _[a1 _disableQuickNavStateTemporarily];
}

id objc_msgSend__dismissAlternativeKeyboardKeys(void *a1, const char *a2, ...)
{
  return _[a1 _dismissAlternativeKeyboardKeys];
}

id objc_msgSend__dispatchCommandForKeyInfo_isRepeatedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchCommandForKeyInfo:isRepeatedEvent:");
}

id objc_msgSend__dispatchEventRepresentationIntoSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchEventRepresentationIntoSystem:");
}

id objc_msgSend__dispatchKeyEventIntoSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchKeyEventIntoSystem:");
}

id objc_msgSend__dispatchNextQueuedRequest(void *a1, const char *a2, ...)
{
  return _[a1 _dispatchNextQueuedRequest];
}

id objc_msgSend__distanceBetweenPoint_andPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_distanceBetweenPoint:andPoint:");
}

id objc_msgSend__dockElementForDisplay(void *a1, const char *a2, ...)
{
  return _[a1 _dockElementForDisplay];
}

id objc_msgSend__drainQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drainQueue:");
}

id objc_msgSend__drainQueueAndSendEventsToSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drainQueueAndSendEventsToSystem:");
}

id objc_msgSend__driftByAddingDisplacementOfPointValue_fromPointValue_toDrift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_driftByAddingDisplacementOfPointValue:fromPointValue:toDrift:");
}

id objc_msgSend__driftOfHalfPattern_relativeToDotPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_driftOfHalfPattern:relativeToDotPositions:");
}

id objc_msgSend__echoDifferentElement_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoDifferentElement:forEvent:");
}

id objc_msgSend__echoDifferentElement_forEvent_onlyOutputTouchContainerAndSounds_canSetAsCurrentElement_shouldPlayGuideWireSound_isProtectedApp_includeHint_boundaryHit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound:isProtectedApp:includeHint:boundaryHit:");
}

id objc_msgSend__echoDifferentElement_forEvent_onlyOutputTouchContainerAndSounds_shouldPlayGuideWireSound_isProtectedApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:isProtectedApp:");
}

id objc_msgSend__echoDifferentTouchContainer_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoDifferentTouchContainer:forEvent:");
}

id objc_msgSend__echoFlickNavigationElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoFlickNavigationElement:");
}

id objc_msgSend__echoLineInBookElement_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoLineInBookElement:forEvent:");
}

id objc_msgSend__echoLineInElement_forEvent_forDifferentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoLineInElement:forEvent:forDifferentElement:");
}

id objc_msgSend__echoNoElementForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoNoElementForEvent:");
}

id objc_msgSend__echoSameElement_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoSameElement:forEvent:");
}

id objc_msgSend__echoSearchNavigationElement_forRangeAdjustment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoSearchNavigationElement:forRangeAdjustment:");
}

id objc_msgSend__echoSearchTypeNotFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoSearchTypeNotFound:");
}

id objc_msgSend__edgeGestureScaleFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_edgeGestureScaleFactor:");
}

id objc_msgSend__edgePanGestureStartThreshold(void *a1, const char *a2, ...)
{
  return _[a1 _edgePanGestureStartThreshold];
}

id objc_msgSend__elementActionsEquivalent_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementActionsEquivalent:withElement:");
}

id objc_msgSend__elementCommunityForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementCommunityForElement:");
}

id objc_msgSend__elementFetchFoundElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementFetchFoundElement:");
}

id objc_msgSend__elementForAttribute_shouldUpdateCache_shouldFetchAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementForAttribute:shouldUpdateCache:shouldFetchAttributes:");
}

id objc_msgSend__elementMonitoringOutputElement_userMonitored_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementMonitoringOutputElement:userMonitored:");
}

id objc_msgSend__elementSelectionRangeDidChange_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementSelectionRangeDidChange:reason:");
}

id objc_msgSend__elementToFocusWhenSwitchingToElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementToFocusWhenSwitchingToElementCommunity:");
}

id objc_msgSend__elementWithAXUIElementRef_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementWithAXUIElementRef:");
}

id objc_msgSend__elementWithAXUIElementRef_cache_identification_initializeAssociatedPids_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementWithAXUIElementRef:cache:identification:initializeAssociatedPids:");
}

id objc_msgSend__endAudiographScrubbingMode(void *a1, const char *a2, ...)
{
  return _[a1 _endAudiographScrubbingMode];
}

id objc_msgSend__endExploringDotPatterns(void *a1, const char *a2, ...)
{
  return _[a1 _endExploringDotPatterns];
}

id objc_msgSend__endNativeSliding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endNativeSliding:");
}

id objc_msgSend__endScribbleTapAndHoldMode(void *a1, const char *a2, ...)
{
  return _[a1 _endScribbleTapAndHoldMode];
}

id objc_msgSend__endTextSearchMode(void *a1, const char *a2, ...)
{
  return _[a1 _endTextSearchMode];
}

id objc_msgSend__enumerateDotNumbersForPrintBraille_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateDotNumbersForPrintBraille:usingBlock:");
}

id objc_msgSend__eventMaskHasTouch(void *a1, const char *a2, ...)
{
  return _[a1 _eventMaskHasTouch];
}

id objc_msgSend__executeCommand(void *a1, const char *a2, ...)
{
  return _[a1 _executeCommand];
}

id objc_msgSend__feedEventToHandwritingRecognition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_feedEventToHandwritingRecognition:");
}

id objc_msgSend__filenameSuffix(void *a1, const char *a2, ...)
{
  return _[a1 _filenameSuffix];
}

id objc_msgSend__filterUnacceptableBrailleStrings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterUnacceptableBrailleStrings:");
}

id objc_msgSend__finalizeReadAllOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finalizeReadAllOperation:");
}

id objc_msgSend__finalizeReadAllOperation_interruptSpeechIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finalizeReadAllOperation:interruptSpeechIfNeeded:");
}

id objc_msgSend__findSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findSound:");
}

id objc_msgSend__finishHandlingLineMovementInWeb_direction_withCurrentElement_markerArray_textObjects_existingRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishHandlingLineMovementInWeb:direction:withCurrentElement:markerArray:textObjects:existingRequest:");
}

id objc_msgSend__finishPassthroughMode(void *a1, const char *a2, ...)
{
  return _[a1 _finishPassthroughMode];
}

id objc_msgSend__finishedPlaying(void *a1, const char *a2, ...)
{
  return _[a1 _finishedPlaying];
}

id objc_msgSend__firstElementForFocusFromElementCommunities_currentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstElementForFocusFromElementCommunities:currentElement:");
}

id objc_msgSend__firstElementWithCurrentElement_focusedApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstElementWithCurrentElement:focusedApplications:");
}

id objc_msgSend__firstNonGesturedTextInputRotorTypeWithFallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstNonGesturedTextInputRotorTypeWithFallback:");
}

id objc_msgSend__firstResponderAXUIElementRefFromCurrentApplications(void *a1, const char *a2, ...)
{
  return _[a1 _firstResponderAXUIElementRefFromCurrentApplications];
}

id objc_msgSend__firstResponderForApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstResponderForApplications:");
}

id objc_msgSend__firstResponderFromCurrentApplications(void *a1, const char *a2, ...)
{
  return _[a1 _firstResponderFromCurrentApplications];
}

id objc_msgSend__flashInsertedTextIfAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flashInsertedTextIfAllowed:");
}

id objc_msgSend__flashlightNotificationsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _flashlightNotificationsEnabled];
}

id objc_msgSend__focusElementForFocusUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusElementForFocusUpdate:");
}

id objc_msgSend__focusOnItemAtIndexInFilteredItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusOnItemAtIndexInFilteredItems:");
}

id objc_msgSend__fontDisplayNameForFontName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fontDisplayNameForFontName:");
}

id objc_msgSend__forceVisionRefresh(void *a1, const char *a2, ...)
{
  return _[a1 _forceVisionRefresh];
}

id objc_msgSend__formatDetectedDates_voiceIdentifier_languageCode_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatDetectedDates:voiceIdentifier:languageCode:rate:");
}

id objc_msgSend__formatDetectedFinnishDates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatDetectedFinnishDates:");
}

id objc_msgSend__formatEthernetMacAddress_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatEthernetMacAddress:voiceIdentifier:rate:");
}

id objc_msgSend__formatExplicitTimeDuration_isMMSS_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatExplicitTimeDuration:isMMSS:languageCode:");
}

id objc_msgSend__formatIPAddress_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatIPAddress:voiceIdentifier:rate:");
}

id objc_msgSend__formatJapaneseYen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatJapaneseYen:");
}

id objc_msgSend__formatNumbers_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatNumbers:action:");
}

id objc_msgSend__formatRequestForBrailleAlertConditional_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatRequestForBrailleAlertConditional:");
}

id objc_msgSend__formatTelephoneNumber_languageCode_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatTelephoneNumber:languageCode:voiceIdentifier:rate:");
}

id objc_msgSend__formatTimeDuration_didMatch_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatTimeDuration:didMatch:voiceIdentifier:rate:");
}

id objc_msgSend__formatUSHeight_voiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatUSHeight:voiceIdentifier:");
}

id objc_msgSend__generateInitialData(void *a1, const char *a2, ...)
{
  return _[a1 _generateInitialData];
}

id objc_msgSend__generateSpellingSuggestionsForResponder_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateSpellingSuggestionsForResponder:languageCode:");
}

id objc_msgSend__gestureDataDirectory(void *a1, const char *a2, ...)
{
  return _[a1 _gestureDataDirectory];
}

id objc_msgSend__gestureEventIsInvalid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gestureEventIsInvalid:");
}

id objc_msgSend__gestureTrackingCallbackWithFactory_isHandlingSystemControlEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gestureTrackingCallbackWithFactory:isHandlingSystemControlEvent:");
}

id objc_msgSend__getAutoSpeakWatchFaceElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getAutoSpeakWatchFaceElements:");
}

id objc_msgSend__getEightDotTableTopMiddleLeftDot_middleRightDot_bottomLeftDot_bottomRightDot_angleFromXAxisToLineOfHand_topLeftDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getEightDotTableTopMiddleLeftDot:middleRightDot:bottomLeftDot:bottomRightDot:angleFromXAxisToLineOfHand:topLeftDot:");
}

id objc_msgSend__getMiddleDotsForSixDotTableTopInitialDataForLeft_right_angleFromXAxisToLineOfHand_topLeftDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getMiddleDotsForSixDotTableTopInitialDataForLeft:right:angleFromXAxisToLineOfHand:topLeftDot:");
}

id objc_msgSend__getNewElementExplorer(void *a1, const char *a2, ...)
{
  return _[a1 _getNewElementExplorer];
}

id objc_msgSend__getNextFocusedElementInElementCommunityPrevious_shouldUseCache_shouldWrapAround_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getNextFocusedElementInElementCommunityPrevious:shouldUseCache:shouldWrapAround:");
}

id objc_msgSend__getSpeakableContainerForContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getSpeakableContainerForContainer:");
}

id objc_msgSend__halfPatternFromOrderedTouches_correspondingHalfPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_halfPatternFromOrderedTouches:correspondingHalfPattern:");
}

id objc_msgSend__halfPatternFromTouches_side_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_halfPatternFromTouches:side:");
}

id objc_msgSend__handleAccessibilityEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAccessibilityEvent:");
}

id objc_msgSend__handleAccessoryShutdown(void *a1, const char *a2, ...)
{
  return _[a1 _handleAccessoryShutdown];
}

id objc_msgSend__handleActivityRotorChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleActivityRotorChange:");
}

id objc_msgSend__handleAdjustTextSegmentTypeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAdjustTextSegmentTypeEvent:");
}

id objc_msgSend__handleAdjustValue_reverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAdjustValue:reverse:");
}

id objc_msgSend__handleAllFingersLifted(void *a1, const char *a2, ...)
{
  return _[a1 _handleAllFingersLifted];
}

id objc_msgSend__handleAnnounceQuickNav_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAnnounceQuickNav:");
}

id objc_msgSend__handleAnnouncement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAnnouncement:");
}

id objc_msgSend__handleAnnouncementWithData_pid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAnnouncementWithData:pid:");
}

id objc_msgSend__handleAnnouncementsForKeyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAnnouncementsForKeyInfo:");
}

id objc_msgSend__handleArrowKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleArrowKey:");
}

id objc_msgSend__handleArrowKeyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleArrowKeyEvent:");
}

id objc_msgSend__handleAttachmentInRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAttachmentInRequest:");
}

id objc_msgSend__handleAudioDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAudioDestination:");
}

id objc_msgSend__handleAudioDuckingAmountChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAudioDuckingAmountChange:");
}

id objc_msgSend__handleAudioDuckingChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAudioDuckingChange:");
}

id objc_msgSend__handleAudioDuckingModeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAudioDuckingModeChange:");
}

id objc_msgSend__handleAudiographAction_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAudiographAction:event:");
}

id objc_msgSend__handleAudiographScrubbingPositionChanged(void *a1, const char *a2, ...)
{
  return _[a1 _handleAudiographScrubbingPositionChanged];
}

id objc_msgSend__handleAutomationGeneratedChordChangeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAutomationGeneratedChordChangeEvent:");
}

id objc_msgSend__handleBookContentMovement_direction_unit_generateOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBookContentMovement:direction:unit:generateOutput:");
}

id objc_msgSend__handleBookNavigateOverPageBoundary_unit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBookNavigateOverPageBoundary:unit:");
}

id objc_msgSend__handleBookPageFlipAndContinue(void *a1, const char *a2, ...)
{
  return _[a1 _handleBookPageFlipAndContinue];
}

id objc_msgSend__handleBrailleConfigurationChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBrailleConfigurationChanged:");
}

id objc_msgSend__handleBrailleKeyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBrailleKeyEvent:");
}

id objc_msgSend__handleBrailleRefreshEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBrailleRefreshEvent:");
}

id objc_msgSend__handleCapsLockToggle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCapsLockToggle:");
}

id objc_msgSend__handleCarriageReturnSwipe(void *a1, const char *a2, ...)
{
  return _[a1 _handleCarriageReturnSwipe];
}

id objc_msgSend__handleContainerMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleContainerMovement:direction:");
}

id objc_msgSend__handleContinueSpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleContinueSpeaking:");
}

id objc_msgSend__handleCustomRotorAction_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCustomRotorAction:direction:");
}

id objc_msgSend__handleCustomRotorContent_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCustomRotorContent:direction:");
}

id objc_msgSend__handleDecreaseVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDecreaseVolume:");
}

id objc_msgSend__handleDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDelete:");
}

id objc_msgSend__handleDescribedMediaMode_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDescribedMediaMode:direction:");
}

id objc_msgSend__handleDetectionModeMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDetectionModeMovement:direction:");
}

id objc_msgSend__handleDidReceivePointerGlobalPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDidReceivePointerGlobalPoint:");
}

id objc_msgSend__handleDirectInteractionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDirectInteractionEvent:");
}

id objc_msgSend__handleDirectTouchExplorationMode_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDirectTouchExplorationMode:direction:");
}

id objc_msgSend__handleDoubleTap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDoubleTap:");
}

id objc_msgSend__handleDuckingDisabling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDuckingDisabling:");
}

id objc_msgSend__handleEditingStyleResolutionForAnnouncement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEditingStyleResolutionForAnnouncement:");
}

id objc_msgSend__handleElementPreviewNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleElementPreviewNotification:");
}

id objc_msgSend__handleElementSearch_rotorType_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleElementSearch:rotorType:direction:");
}

id objc_msgSend__handleEventWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEventWithData:");
}

id objc_msgSend__handleFingersOnScreen_didAddOrRemoveFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFingersOnScreen:didAddOrRemoveFingers:");
}

id objc_msgSend__handleFireStewie(void *a1, const char *a2, ...)
{
  return _[a1 _handleFireStewie];
}

id objc_msgSend__handleGenericTextSegmentMovement_direction_granulary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleGenericTextSegmentMovement:direction:granulary:");
}

id objc_msgSend__handleGestureKeyboardTappingCallback_fingerCount_isDown_originalLocation_convertedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleGestureKeyboardTappingCallback:fingerCount:isDown:originalLocation:convertedLocation:");
}

id objc_msgSend__handleHintsSettingMode_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleHintsSettingMode:direction:");
}

id objc_msgSend__handleImageDescriptionsToggle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleImageDescriptionsToggle:");
}

id objc_msgSend__handleIncreaseVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIncreaseVolume:");
}

id objc_msgSend__handleInputText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleInputText:");
}

id objc_msgSend__handleKeyboardChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 _handleKeyboardChangedNotification];
}

id objc_msgSend__handleKeyboardKeyEvent_isRepeatedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleKeyboardKeyEvent:isRepeatedEvent:");
}

id objc_msgSend__handleKeyboardModifierCommands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleKeyboardModifierCommands:");
}

id objc_msgSend__handleKeyboardVisibilityChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleKeyboardVisibilityChanged:");
}

id objc_msgSend__handleLayoutChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLayoutChange:");
}

id objc_msgSend__handleLayoutChangeFromTimer(void *a1, const char *a2, ...)
{
  return _[a1 _handleLayoutChangeFromTimer];
}

id objc_msgSend__handleLetter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLetter:");
}

id objc_msgSend__handleLetterMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLetterMovement:direction:");
}

id objc_msgSend__handleLineMovementInWeb_direction_existingRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLineMovementInWeb:direction:existingRequest:");
}

id objc_msgSend__handleMLElementModeWithDirection_verboseOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMLElementModeWithDirection:verboseOutput:");
}

id objc_msgSend__handleMapSameElement_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMapSameElement:forEvent:");
}

id objc_msgSend__handleMathGranularMovement_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMathGranularMovement:event:");
}

id objc_msgSend__handleMisspelledWordRotorAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMisspelledWordRotorAction:");
}

id objc_msgSend__handleModifierCapsLockBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleModifierCapsLockBehavior:");
}

id objc_msgSend__handleMoreBookContentElements(void *a1, const char *a2, ...)
{
  return _[a1 _handleMoreBookContentElements];
}

id objc_msgSend__handleMoveIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMoveIn:");
}

id objc_msgSend__handleMoveOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMoveOut:");
}

id objc_msgSend__handleMovementForElementFollowingElement_direction_unit_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMovementForElementFollowingElement:direction:unit:mode:");
}

id objc_msgSend__handleNavigationDirectionChangeWithDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNavigationDirectionChangeWithDirection:");
}

id objc_msgSend__handleNavigationStyleMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNavigationStyleMovement:direction:");
}

id objc_msgSend__handleNextAutofill_reverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNextAutofill:reverse:");
}

id objc_msgSend__handleNextTextOperationInDirection_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNextTextOperationInDirection:withEvent:");
}

id objc_msgSend__handleNonEditableValueChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNonEditableValueChange:");
}

id objc_msgSend__handleNonPerkinsKeyboardKeyEvent_isRepeatedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNonPerkinsKeyboardKeyEvent:isRepeatedEvent:");
}

id objc_msgSend__handleNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNotifications:");
}

id objc_msgSend__handleOnenessCheck(void *a1, const char *a2, ...)
{
  return _[a1 _handleOnenessCheck];
}

id objc_msgSend__handleOpaqueSearchForElementInDirection_opaqueParent_searchType_range_matchBlock_resetContentOffsetInOpaqueParent_peeking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleOpaqueSearchForElementInDirection:opaqueParent:searchType:range:matchBlock:resetContentOffsetInOpaqueParent:peeking:");
}

id objc_msgSend__handleOrbEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleOrbEvent:");
}

id objc_msgSend__handleOutputComputerVisionAnalysisSummary_explicitUserRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleOutputComputerVisionAnalysisSummary:explicitUserRequest:");
}

id objc_msgSend__handlePauseSpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePauseSpeaking:");
}

id objc_msgSend__handlePauseSpeechAndHapticsNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePauseSpeechAndHapticsNotification:");
}

id objc_msgSend__handlePerformAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformAction:");
}

id objc_msgSend__handlePerformAudiographAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformAudiographAction:");
}

id objc_msgSend__handlePerformCustomAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformCustomAction:");
}

id objc_msgSend__handlePerformPressAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformPressAction:");
}

id objc_msgSend__handlePerformTapAutofill_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformTapAutofill:");
}

id objc_msgSend__handlePerformTextOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformTextOperation:");
}

id objc_msgSend__handlePlanarPanFailedInPreviewModeIsLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePlanarPanFailedInPreviewModeIsLeft:");
}

id objc_msgSend__handlePlanarPanFailedInReadingTypeModeIsLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePlanarPanFailedInReadingTypeModeIsLeft:");
}

id objc_msgSend__handlePrintBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePrintBraille:");
}

id objc_msgSend__handleProcessActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleProcessActions:");
}

id objc_msgSend__handleProcessRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleProcessRequest:");
}

id objc_msgSend__handleProtectedAppLogicForEvent_element_point_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleProtectedAppLogicForEvent:element:point:");
}

id objc_msgSend__handlePublicCustomRotorMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePublicCustomRotorMovement:direction:");
}

id objc_msgSend__handleQuickNavDownArrowRepostPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleQuickNavDownArrowRepostPress:");
}

id objc_msgSend__handleQuickNavFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleQuickNavFeedback:");
}

id objc_msgSend__handleQuickNavPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleQuickNavPress:");
}

id objc_msgSend__handleReachabilityChanges(void *a1, const char *a2, ...)
{
  return _[a1 _handleReachabilityChanges];
}

id objc_msgSend__handleReadAllBookContent_fromTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReadAllBookContent:fromTop:");
}

id objc_msgSend__handleReadAllNextElement(void *a1, const char *a2, ...)
{
  return _[a1 _handleReadAllNextElement];
}

id objc_msgSend__handleReadFromTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReadFromTop:");
}

id objc_msgSend__handleRequestFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRequestFinished:");
}

id objc_msgSend__handleRightLeftMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRightLeftMovement:");
}

id objc_msgSend__handleRotor2DBrailleDisplayMode_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotor2DBrailleDisplayMode:withEvent:");
}

id objc_msgSend__handleRotor2DBrailleEdgeIntensity_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotor2DBrailleEdgeIntensity:withEvent:");
}

id objc_msgSend__handleRotor2DBrailleInvert_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotor2DBrailleInvert:withEvent:");
}

id objc_msgSend__handleRotor2DBraillePanHorizontal_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotor2DBraillePanHorizontal:withEvent:");
}

id objc_msgSend__handleRotor2DBraillePanVertical_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotor2DBraillePanVertical:withEvent:");
}

id objc_msgSend__handleRotor2DBrailleZoom_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotor2DBrailleZoom:withEvent:");
}

id objc_msgSend__handleRotorBrailleAutoAdvanceMovement_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorBrailleAutoAdvanceMovement:withEvent:");
}

id objc_msgSend__handleRotorBrailleInputLanguageMovement_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorBrailleInputLanguageMovement:withEvent:");
}

id objc_msgSend__handleRotorBrailleLanguageMovement_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorBrailleLanguageMovement:withEvent:");
}

id objc_msgSend__handleRotorContinusPathChange_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorContinusPathChange:withEvent:");
}

id objc_msgSend__handleRotorTextSelectionMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorTextSelectionMovement:direction:");
}

id objc_msgSend__handleRotorTypingModeMovement_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorTypingModeMovement:withEvent:");
}

id objc_msgSend__handleRotorVoiceMovement_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorVoiceMovement:withEvent:");
}

id objc_msgSend__handleRowMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRowMovement:direction:");
}

id objc_msgSend__handleSOSMedicalIDShown(void *a1, const char *a2, ...)
{
  return _[a1 _handleSOSMedicalIDShown];
}

id objc_msgSend__handleScreenChange_sound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleScreenChange:sound:");
}

id objc_msgSend__handleScreenOn(void *a1, const char *a2, ...)
{
  return _[a1 _handleScreenOn];
}

id objc_msgSend__handleScribbleMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleScribbleMovement:");
}

id objc_msgSend__handleSearchRotorDirection_event_notifyUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSearchRotorDirection:event:notifyUser:");
}

id objc_msgSend__handleSearchRotorLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSearchRotorLeft:");
}

id objc_msgSend__handleSearchRotorMovementWithoutRotorUpdateInDirectionUp_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSearchRotorMovementWithoutRotorUpdateInDirectionUp:event:");
}

id objc_msgSend__handleSearchRotorRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSearchRotorRight:");
}

id objc_msgSend__handleSearchTextEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSearchTextEvent:");
}

id objc_msgSend__handleSelectionChangedNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSelectionChangedNotification:");
}

id objc_msgSend__handleSiriVoiceUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _handleSiriVoiceUpdate];
}

id objc_msgSend__handleSoundRotorChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSoundRotorChange:");
}

id objc_msgSend__handleSpeakScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpeakScreen:");
}

id objc_msgSend__handleSpeakString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpeakString:");
}

id objc_msgSend__handleSpeechPhoneticsChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpeechPhoneticsChange:");
}

id objc_msgSend__handleSpeechPunctuationChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpeechPunctuationChange:");
}

id objc_msgSend__handleSpeechRateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpeechRateChange:");
}

id objc_msgSend__handleStatusRouterForIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleStatusRouterForIndex:");
}

id objc_msgSend__handleStewieAnnouncementInRange_heading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleStewieAnnouncementInRange:heading:");
}

id objc_msgSend__handleStopSpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleStopSpeaking:");
}

id objc_msgSend__handleSwitchToNextElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSwitchToNextElementCommunity:");
}

id objc_msgSend__handleSwitchToPreviousElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSwitchToPreviousElementCommunity:");
}

id objc_msgSend__handleSystemLockedOutputBehavior_shouldSendRequest_startElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSystemLockedOutputBehavior:shouldSendRequest:startElement:");
}

id objc_msgSend__handleTerminalKeyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTerminalKeyEvent:");
}

id objc_msgSend__handleTextOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTextOperation:");
}

id objc_msgSend__handleTextRotorSelectionAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTextRotorSelectionAction:");
}

id objc_msgSend__handleToggleLiveRegions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleToggleLiveRegions:");
}

id objc_msgSend__handleToggleSideAppIfAvailableInGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleToggleSideAppIfAvailableInGestures:");
}

id objc_msgSend__handleTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTouchPoints:");
}

id objc_msgSend__handleTrackingDetailMovement_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTrackingDetailMovement:event:");
}

id objc_msgSend__handleTypingEchoChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTypingEchoChange:");
}

id objc_msgSend__handleUnmuteEligibleEventOccured(void *a1, const char *a2, ...)
{
  return _[a1 _handleUnmuteEligibleEventOccured];
}

id objc_msgSend__handleUpDownMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUpDownMovement:");
}

id objc_msgSend__handleUpdateAppFromTimer(void *a1, const char *a2, ...)
{
  return _[a1 _handleUpdateAppFromTimer];
}

id objc_msgSend__handleUpdatedMathElementIndex(void *a1, const char *a2, ...)
{
  return _[a1 _handleUpdatedMathElementIndex];
}

id objc_msgSend__handleUsePitchChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUsePitchChange:");
}

id objc_msgSend__handleUserAllSelection_inString_rightward_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUserAllSelection:inString:rightward:");
}

id objc_msgSend__handleUserCharacterSelection_inString_rightward_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUserCharacterSelection:inString:rightward:");
}

id objc_msgSend__handleUserLineSelectionInElement_currentRange_rightward_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUserLineSelectionInElement:currentRange:rightward:");
}

id objc_msgSend__handleUserPageSelection_inString_rightward_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUserPageSelection:inString:rightward:");
}

id objc_msgSend__handleUserSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUserSelection:");
}

id objc_msgSend__handleUserWordSelectionInElement_currentRange_rightward_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUserWordSelectionInElement:currentRange:rightward:");
}

id objc_msgSend__handleValidatedCustomActionMovementThroughActions_forEvent_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleValidatedCustomActionMovementThroughActions:forEvent:inDirection:");
}

id objc_msgSend__handleVerticalMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleVerticalMovement:direction:");
}

id objc_msgSend__handleVoiceOverGreySupportAccessibilityEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleVoiceOverGreySupportAccessibilityEvent:");
}

id objc_msgSend__handleVolumeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleVolumeChange:");
}

id objc_msgSend__handleWebSearchResult_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleWebSearchResult:withEvent:");
}

id objc_msgSend__handleWebSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleWebSelection:");
}

id objc_msgSend__handleWordBreak_includeSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleWordBreak:includeSpace:");
}

id objc_msgSend__handleWordMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleWordMovement:direction:");
}

id objc_msgSend__handleZoomMovement_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleZoomMovement:event:");
}

id objc_msgSend__handwritingCaptureTimer(void *a1, const char *a2, ...)
{
  return _[a1 _handwritingCaptureTimer];
}

id objc_msgSend__hasContractedBraillePreference(void *a1, const char *a2, ...)
{
  return _[a1 _hasContractedBraillePreference];
}

id objc_msgSend__hasCurrentApplicationMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasCurrentApplicationMatchingBlock:");
}

id objc_msgSend__hearingAidRouteChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hearingAidRouteChange:");
}

id objc_msgSend__hitTestedElementForOriginalElement_hitTestPoint_opaqueParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hitTestedElementForOriginalElement:hitTestPoint:opaqueParent:");
}

id objc_msgSend__hunterMigrateDefaultRotors(void *a1, const char *a2, ...)
{
  return _[a1 _hunterMigrateDefaultRotors];
}

id objc_msgSend__hunterMigrateDigitalCrownNavigation(void *a1, const char *a2, ...)
{
  return _[a1 _hunterMigrateDigitalCrownNavigation];
}

id objc_msgSend__iCloudPublishData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_iCloudPublishData:");
}

id objc_msgSend__icloudDataChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_icloudDataChanged:");
}

id objc_msgSend__ignoreCustomActionIndicator_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ignoreCustomActionIndicator:withElement:");
}

id objc_msgSend__ignoreTextEditingNotificationsForPickerElementUsage(void *a1, const char *a2, ...)
{
  return _[a1 _ignoreTextEditingNotificationsForPickerElementUsage];
}

id objc_msgSend__imageExplorerCachedResults(void *a1, const char *a2, ...)
{
  return _[a1 _imageExplorerCachedResults];
}

id objc_msgSend__inMisspelledWordRotor(void *a1, const char *a2, ...)
{
  return _[a1 _inMisspelledWordRotor];
}

id objc_msgSend__incrementConsecutiveCrashCount(void *a1, const char *a2, ...)
{
  return _[a1 _incrementConsecutiveCrashCount];
}

id objc_msgSend__indexOfBrailleTable_inRotorItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexOfBrailleTable:inRotorItems:");
}

id objc_msgSend__informDelegateOfRetrieveElements(void *a1, const char *a2, ...)
{
  return _[a1 _informDelegateOfRetrieveElements];
}

id objc_msgSend__init(void *a1, const char *a2, ...)
{
  return _[a1 _init];
}

id objc_msgSend__initServer(void *a1, const char *a2, ...)
{
  return _[a1 _initServer];
}

id objc_msgSend__initWithAsynchronousLoading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithAsynchronousLoading:");
}

id objc_msgSend__initWithComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithComponent:");
}

id objc_msgSend__initWithDeviceIdentifier_andEventRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithDeviceIdentifier:andEventRepresentation:");
}

id objc_msgSend__initWithUIElement_identification_initializeAssociatedPids_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithUIElement:identification:initializeAssociatedPids:");
}

id objc_msgSend__initialize(void *a1, const char *a2, ...)
{
  return _[a1 _initialize];
}

id objc_msgSend__initializeCommands(void *a1, const char *a2, ...)
{
  return _[a1 _initializeCommands];
}

id objc_msgSend__initializeDispatchTable(void *a1, const char *a2, ...)
{
  return _[a1 _initializeDispatchTable];
}

id objc_msgSend__initializeExpandedStatusCellDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 _initializeExpandedStatusCellDictionaries];
}

id objc_msgSend__initializePunctuationData(void *a1, const char *a2, ...)
{
  return _[a1 _initializePunctuationData];
}

id objc_msgSend__initializeQuickNav(void *a1, const char *a2, ...)
{
  return _[a1 _initializeQuickNav];
}

id objc_msgSend__initiateScrodConnection(void *a1, const char *a2, ...)
{
  return _[a1 _initiateScrodConnection];
}

id objc_msgSend__inputBrailleFromSeriesOfTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inputBrailleFromSeriesOfTouchPoints:");
}

id objc_msgSend__inputBrailleFromTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inputBrailleFromTouchPoints:");
}

id objc_msgSend__insertCurrentSelectedCandidate(void *a1, const char *a2, ...)
{
  return _[a1 _insertCurrentSelectedCandidate];
}

id objc_msgSend__insertCurrentSelectedSuggestion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertCurrentSelectedSuggestion:");
}

id objc_msgSend__insertLongerPausesForSymbol_withText_allowPausingAtBoundaries_onlyApplyWhenFollowedBySpace_languageCode_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertLongerPausesForSymbol:withText:allowPausingAtBoundaries:onlyApplyWhenFollowedBySpace:languageCode:voiceIdentifier:rate:");
}

id objc_msgSend__installLanguageTranslationModelForLanguageIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_installLanguageTranslationModelForLanguageIfNeeded:");
}

id objc_msgSend__interfaceOrientationForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interfaceOrientationForElement:");
}

id objc_msgSend__internalVoiceOverSubstitutions(void *a1, const char *a2, ...)
{
  return _[a1 _internalVoiceOverSubstitutions];
}

id objc_msgSend__iosEventFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_iosEventFilter:");
}

id objc_msgSend__isActiveUserDisplayConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isActiveUserDisplayConfig:");
}

id objc_msgSend__isAdjustTextSegmentEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAdjustTextSegmentEvent:");
}

id objc_msgSend__isAdjustTextSegmentTypeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAdjustTextSegmentTypeEvent:");
}

id objc_msgSend__isBogusTouchEvent(void *a1, const char *a2, ...)
{
  return _[a1 _isBogusTouchEvent];
}

id objc_msgSend__isCalibrationEndPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCalibrationEndPattern:");
}

id objc_msgSend__isCalibrationStartPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCalibrationStartPattern:");
}

id objc_msgSend__isCarriageReturnSwipeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCarriageReturnSwipeEvent:");
}

id objc_msgSend__isDictationInProgressForCurrentApp(void *a1, const char *a2, ...)
{
  return _[a1 _isDictationInProgressForCurrentApp];
}

id objc_msgSend__isEdgePressSupportedAtPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEdgePressSupportedAtPosition:");
}

id objc_msgSend__isElementForReading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isElementForReading:");
}

id objc_msgSend__isElementValidForFirstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isElementValidForFirstResponder:");
}

id objc_msgSend__isFullCellStrong(void *a1, const char *a2, ...)
{
  return _[a1 _isFullCellStrong];
}

id objc_msgSend__isHeadphoneRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isHeadphoneRoute:");
}

id objc_msgSend__isHeadsetRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isHeadsetRoute:");
}

id objc_msgSend__isInHomeScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInHomeScreen:");
}

id objc_msgSend__isKeyboardLineMovement(void *a1, const char *a2, ...)
{
  return _[a1 _isKeyboardLineMovement];
}

id objc_msgSend__isModeReadingType(void *a1, const char *a2, ...)
{
  return _[a1 _isModeReadingType];
}

id objc_msgSend__isNextBrailleUsageEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isNextBrailleUsageEvent:");
}

id objc_msgSend__isPoint_withinRangeForDividerElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPoint:withinRangeForDividerElement:");
}

id objc_msgSend__isPreviewElementSelected(void *a1, const char *a2, ...)
{
  return _[a1 _isPreviewElementSelected];
}

id objc_msgSend__isPreviousBrailleUsageEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPreviousBrailleUsageEvent:");
}

id objc_msgSend__isRouteExternalHDMIRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRouteExternalHDMIRoute:");
}

id objc_msgSend__isSelectEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSelectEvent:");
}

id objc_msgSend__isShowingTodayViewForPhone(void *a1, const char *a2, ...)
{
  return _[a1 _isShowingTodayViewForPhone];
}

id objc_msgSend__isStylusGesture(void *a1, const char *a2, ...)
{
  return _[a1 _isStylusGesture];
}

id objc_msgSend__isSystemReadyForUI(void *a1, const char *a2, ...)
{
  return _[a1 _isSystemReadyForUI];
}

id objc_msgSend__isTapAndHoldPending(void *a1, const char *a2, ...)
{
  return _[a1 _isTapAndHoldPending];
}

id objc_msgSend__isTerminalModeOn(void *a1, const char *a2, ...)
{
  return _[a1 _isTerminalModeOn];
}

id objc_msgSend__isToggleLockedConfigurationEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isToggleLockedConfigurationEvent:");
}

id objc_msgSend__isTouchTypingEventTooCloseToEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTouchTypingEventTooCloseToEdge:");
}

id objc_msgSend__isTranslateImmediatelyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTranslateImmediatelyEvent:");
}

id objc_msgSend__isWebAppStillOpen(void *a1, const char *a2, ...)
{
  return _[a1 _isWebAppStillOpen];
}

id objc_msgSend__issueCommands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_issueCommands:");
}

id objc_msgSend__issueSingleCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_issueSingleCommand:");
}

id objc_msgSend__iterateSelfAndRemoteParentsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_iterateSelfAndRemoteParentsUsingBlock:");
}

id objc_msgSend__keyInfoIsModifierOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyInfoIsModifierOnly:");
}

id objc_msgSend__keyboardKeyStringForEvent_spoken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyboardKeyStringForEvent:spoken:");
}

id objc_msgSend__languageCodeForBrailleTable(void *a1, const char *a2, ...)
{
  return _[a1 _languageCodeForBrailleTable];
}

id objc_msgSend__languageCodeForSpeakingAndBrailleTranslation(void *a1, const char *a2, ...)
{
  return _[a1 _languageCodeForSpeakingAndBrailleTranslation];
}

id objc_msgSend__languageCodeForSpellChecking(void *a1, const char *a2, ...)
{
  return _[a1 _languageCodeForSpellChecking];
}

id objc_msgSend__languageIsCJK(void *a1, const char *a2, ...)
{
  return _[a1 _languageIsCJK];
}

id objc_msgSend__languageIsNBSC(void *a1, const char *a2, ...)
{
  return _[a1 _languageIsNBSC];
}

id objc_msgSend__languageRangesForText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_languageRangesForText:");
}

id objc_msgSend__languageRotorItemsContainLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_languageRotorItemsContainLanguage:");
}

id objc_msgSend__lastContainedElementIncludingRemotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastContainedElementIncludingRemotes:");
}

id objc_msgSend__layoutChangeForDragSessionStart(void *a1, const char *a2, ...)
{
  return _[a1 _layoutChangeForDragSessionStart];
}

id objc_msgSend__liftFromTapAndHoldAndResetFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_liftFromTapAndHoldAndResetFingers:");
}

id objc_msgSend__liftPreviewFinger(void *a1, const char *a2, ...)
{
  return _[a1 _liftPreviewFinger];
}

id objc_msgSend__lineRangeWithFaultTolerance_forward_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lineRangeWithFaultTolerance:forward:element:");
}

id objc_msgSend__listItemLabelForAXAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_listItemLabelForAXAttributedString:");
}

id objc_msgSend__literalStringMarkupForString_languageCode_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_literalStringMarkupForString:languageCode:action:");
}

id objc_msgSend__loadAllDataFromFiles(void *a1, const char *a2, ...)
{
  return _[a1 _loadAllDataFromFiles];
}

id objc_msgSend__loadDataFromFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadDataFromFile:");
}

id objc_msgSend__loadNoneTableOverrides(void *a1, const char *a2, ...)
{
  return _[a1 _loadNoneTableOverrides];
}

id objc_msgSend__loadPunctuationTable_withLevel_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadPunctuationTable:withLevel:language:");
}

id objc_msgSend__loadSpecialPunctuation(void *a1, const char *a2, ...)
{
  return _[a1 _loadSpecialPunctuation];
}

id objc_msgSend__localeIdentifierForCurrentInputTable(void *a1, const char *a2, ...)
{
  return _[a1 _localeIdentifierForCurrentInputTable];
}

id objc_msgSend__localeIdentifierForCurrentTable(void *a1, const char *a2, ...)
{
  return _[a1 _localeIdentifierForCurrentTable];
}

id objc_msgSend__localeSpecificURLRegexForLanguageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localeSpecificURLRegexForLanguageCode:");
}

id objc_msgSend__localeSpecificURLsForLanguageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localeSpecificURLsForLanguageCode:");
}

id objc_msgSend__localizeKeyboardString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localizeKeyboardString:");
}

id objc_msgSend__localizePoint_forOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localizePoint:forOrientation:");
}

id objc_msgSend__localizedStringForCurrentBrailleTextMode(void *a1, const char *a2, ...)
{
  return _[a1 _localizedStringForCurrentBrailleTextMode];
}

id objc_msgSend__localizedTypingModeStringForCurrentMode(void *a1, const char *a2, ...)
{
  return _[a1 _localizedTypingModeStringForCurrentMode];
}

id objc_msgSend__makeSubstitution_withString_punctuationGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeSubstitution:withString:punctuationGroup:");
}

id objc_msgSend__mapAXEventToVOTEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mapAXEventToVOTEvent:");
}

id objc_msgSend__mapsExplorationGestureManager(void *a1, const char *a2, ...)
{
  return _[a1 _mapsExplorationGestureManager];
}

id objc_msgSend__mathAXStringFromAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mathAXStringFromAttributedString:");
}

id objc_msgSend__mathExpression(void *a1, const char *a2, ...)
{
  return _[a1 _mathExpression];
}

id objc_msgSend__mergeActionsStartingAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mergeActionsStartingAtIndex:");
}

id objc_msgSend__migratePerAppDirectTouchBehavior(void *a1, const char *a2, ...)
{
  return _[a1 _migratePerAppDirectTouchBehavior];
}

id objc_msgSend__migratePreferencesIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _migratePreferencesIfNeeded];
}

id objc_msgSend__minimumSegmentDepth(void *a1, const char *a2, ...)
{
  return _[a1 _minimumSegmentDepth];
}

id objc_msgSend__minimumSegmentDepthForExpression_withMaximumDepth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_minimumSegmentDepthForExpression:withMaximumDepth:");
}

id objc_msgSend__modifyRotorItems_shouldEnable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_modifyRotorItems:shouldEnable:");
}

id objc_msgSend__monitoredElementCachedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_monitoredElementCachedText:");
}

id objc_msgSend__moveCursorForElement_direction_unit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveCursorForElement:direction:unit:");
}

id objc_msgSend__moveElementToFlowTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveElementToFlowTo:");
}

id objc_msgSend__moveFocusToUpdatedRange_element_searchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveFocusToUpdatedRange:element:searchType:");
}

id objc_msgSend__moveToElement_shouldPlaySound_echoSameTouchContainer_moveToElementNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:");
}

id objc_msgSend__moveToElement_shouldPlaySound_echoSameTouchContainer_shouldScroll_moveToElementNotification_shouldPlayTrackingSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveToElement:shouldPlaySound:echoSameTouchContainer:shouldScroll:moveToElementNotification:shouldPlayTrackingSound:");
}

id objc_msgSend__moveToNextRawCandidate(void *a1, const char *a2, ...)
{
  return _[a1 _moveToNextRawCandidate];
}

id objc_msgSend__moveToWebItemDuringLoadIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _moveToWebItemDuringLoadIfNecessary];
}

id objc_msgSend__mutableArrayOfPointValuesFromDictionaries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mutableArrayOfPointValuesFromDictionaries:");
}

id objc_msgSend__mutableArrayOfZeroPointValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mutableArrayOfZeroPointValues:");
}

id objc_msgSend__navigationDirectionModeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_navigationDirectionModeString:");
}

id objc_msgSend__nearestElementWithMatch_startElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestElementWithMatch:startElement:");
}

id objc_msgSend__nearestElementWithMatch_startElement_forward_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestElementWithMatch:startElement:forward:");
}

id objc_msgSend__nearestElementWithMatch_startElement_forward_itemCheckCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestElementWithMatch:startElement:forward:itemCheckCount:");
}

id objc_msgSend__nearestScrollableElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestScrollableElement:");
}

id objc_msgSend__nearestWebElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestWebElement:");
}

id objc_msgSend__needsPhoneticBrailleForLanauge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_needsPhoneticBrailleForLanauge:");
}

id objc_msgSend__newBrailleInput(void *a1, const char *a2, ...)
{
  return _[a1 _newBrailleInput];
}

id objc_msgSend__newNavigationDirectionModeForRotorDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newNavigationDirectionModeForRotorDirection:");
}

id objc_msgSend__nextActiveCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 _nextActiveCharacterSet];
}

id objc_msgSend__nextExplorerElementInDirection_fromElement_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nextExplorerElementInDirection:fromElement:didWrap:");
}

id objc_msgSend__notificationData_consumingToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationData:consumingToken:");
}

id objc_msgSend__notificationData_containsToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationData:containsToken:");
}

id objc_msgSend__notificationsToRegister(void *a1, const char *a2, ...)
{
  return _[a1 _notificationsToRegister];
}

id objc_msgSend__notifyDidFinishSpeakingWithFakeRequestForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDidFinishSpeakingWithFakeRequestForEvent:");
}

id objc_msgSend__notifyObserversLockStateDidChange(void *a1, const char *a2, ...)
{
  return _[a1 _notifyObserversLockStateDidChange];
}

id objc_msgSend__notifyObserversOutputManagerDidFinishProcessingQueuedRequests(void *a1, const char *a2, ...)
{
  return _[a1 _notifyObserversOutputManagerDidFinishProcessingQueuedRequests];
}

id objc_msgSend__notifyObserversOutputManagerWillProcessNextRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyObserversOutputManagerWillProcessNextRequest:");
}

id objc_msgSend__numberOfCharactersToDeleteStartingAtIndex_toDesiredLength_fromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfCharactersToDeleteStartingAtIndex:toDesiredLength:fromString:");
}

id objc_msgSend__numberOfCharactersToDeleteToDesiredLength_fromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfCharactersToDeleteToDesiredLength:fromString:");
}

id objc_msgSend__numberOfDots(void *a1, const char *a2, ...)
{
  return _[a1 _numberOfDots];
}

id objc_msgSend__orderedLeftDots_rightDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_orderedLeftDots:rightDots:");
}

id objc_msgSend__orderedMonitoredFontAttributes(void *a1, const char *a2, ...)
{
  return _[a1 _orderedMonitoredFontAttributes];
}

id objc_msgSend__orderedTouchesFromHalfPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_orderedTouchesFromHalfPattern:");
}

id objc_msgSend__outputChosenCandidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputChosenCandidate:");
}

id objc_msgSend__outputChosenSuggestion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputChosenSuggestion:");
}

id objc_msgSend__outputCurrentElementRotor(void *a1, const char *a2, ...)
{
  return _[a1 _outputCurrentElementRotor];
}

id objc_msgSend__outputDataDetectorIfPresent_element_includeLinks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputDataDetectorIfPresent:element:includeLinks:");
}

id objc_msgSend__outputForBefore_after_delete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputForBefore:after:delete:");
}

id objc_msgSend__outputNavigationDirectionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputNavigationDirectionMode:");
}

id objc_msgSend__outputNextTextSegmentUnit_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputNextTextSegmentUnit:direction:");
}

id objc_msgSend__outputRangeForCharacterSegment_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputRangeForCharacterSegment:direction:");
}

id objc_msgSend__outputRequestFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputRequestFinished:");
}

id objc_msgSend__outputRequestForText_hint_useKeyboardLanguage_shouldQueue_isInsert_isSuggestion_isDelete_speakLiterally_otherLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputRequestForText:hint:useKeyboardLanguage:shouldQueue:isInsert:isSuggestion:isDelete:speakLiterally:otherLanguage:");
}

id objc_msgSend__outputRotorTypeCount(void *a1, const char *a2, ...)
{
  return _[a1 _outputRotorTypeCount];
}

id objc_msgSend__outputSelectionDifference_oldRange_string_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputSelectionDifference:oldRange:string:language:");
}

id objc_msgSend__outputWebLineWithMarkerRange_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputWebLineWithMarkerRange:withElement:");
}

id objc_msgSend__overrideSetHardwareKeyboardAttached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_overrideSetHardwareKeyboardAttached:");
}

id objc_msgSend__patternIncludesEveryFinger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_patternIncludesEveryFinger:");
}

id objc_msgSend__pauseDelayForType_speechRate_voiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pauseDelayForType:speechRate:voiceType:");
}

id objc_msgSend__performAction_withComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performAction:withComponent:");
}

id objc_msgSend__performPressOnElement_withEvent_centerPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performPressOnElement:withEvent:centerPoint:");
}

id objc_msgSend__performTouchTypingKeyPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performTouchTypingKeyPress:");
}

id objc_msgSend__performWordBackspaceForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performWordBackspaceForElement:");
}

id objc_msgSend__phoneticStringForLetter_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_phoneticStringForLetter:language:");
}

id objc_msgSend__playBonk(void *a1, const char *a2, ...)
{
  return _[a1 _playBonk];
}

id objc_msgSend__playFeedbackForGestureState_gestureComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_playFeedbackForGestureState:gestureComplete:");
}

id objc_msgSend__playSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_playSound:");
}

id objc_msgSend__playWarningTone(void *a1, const char *a2, ...)
{
  return _[a1 _playWarningTone];
}

id objc_msgSend__playWarningTones_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_playWarningTones:completion:");
}

id objc_msgSend__populateLeftTouchPoints_rightTouchPoints_fromTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateLeftTouchPoints:rightTouchPoints:fromTouchPoints:");
}

id objc_msgSend__postKeyboardEvent_modifiers_keyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEvent:modifiers:keyCode:");
}

id objc_msgSend__postKeyboardEventWithCharacters_originalCharacters_modifiers_keyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEventWithCharacters:originalCharacters:modifiers:keyCode:");
}

id objc_msgSend__postKeyboardEventWithKeyCode_characters_originalCharacters_modifierState_eventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEventWithKeyCode:characters:originalCharacters:modifierState:eventType:");
}

id objc_msgSend__postKeyboardEventWithKeyCode_characters_originalCharacters_modifierState_isKeyDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEventWithKeyCode:characters:originalCharacters:modifierState:isKeyDown:");
}

id objc_msgSend__postKeyboardEventWithKeyCode_modifierState_isKeyDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEventWithKeyCode:modifierState:isKeyDown:");
}

id objc_msgSend__postKeyboardEventsForModifiers_isKeyDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEventsForModifiers:isKeyDown:");
}

id objc_msgSend__postKeyboardKey_keyCode_eventFlags_keyFlags_keyDown_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardKey:keyCode:eventFlags:keyFlags:keyDown:source:");
}

id objc_msgSend__preferencesActivitiesChanged(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesActivitiesChanged];
}

id objc_msgSend__preferencesAlwaysUseNemethForMathChange(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesAlwaysUseNemethForMathChange];
}

id objc_msgSend__preferencesCaptionPanelChanged(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesCaptionPanelChanged];
}

id objc_msgSend__preferencesNavigateImagesOptionChange(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesNavigateImagesOptionChange];
}

id objc_msgSend__preferencesSelectedActivityChanged(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesSelectedActivityChanged];
}

id objc_msgSend__preferencesSelectedLanguageChanged(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesSelectedLanguageChanged];
}

id objc_msgSend__preferencesSpeakHintsChange(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesSpeakHintsChange];
}

id objc_msgSend__preferencesSpeakNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesSpeakNotifications];
}

id objc_msgSend__preferencesSpeakingRateInRotorChanged(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesSpeakingRateInRotorChanged];
}

id objc_msgSend__preferencesTypingPitchChange(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesTypingPitchChange];
}

id objc_msgSend__prepareElementOutputHeaders_currentElement_request_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareElementOutputHeaders:currentElement:request:");
}

id objc_msgSend__prepareNameSearcherForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareNameSearcherForElement:");
}

id objc_msgSend__prepareStitchedWebReadAll_request_setCurrentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareStitchedWebReadAll:request:setCurrentElement:");
}

id objc_msgSend__preprocessActionLanguageAndVoice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preprocessActionLanguageAndVoice:");
}

id objc_msgSend__pressActionResultDelay(void *a1, const char *a2, ...)
{
  return _[a1 _pressActionResultDelay];
}

id objc_msgSend__previousActiveCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 _previousActiveCharacterSet];
}

id objc_msgSend__printBrailleForTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_printBrailleForTouchPoints:");
}

id objc_msgSend__proceed(void *a1, const char *a2, ...)
{
  return _[a1 _proceed];
}

id objc_msgSend__processActionForLiteralEmojis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processActionForLiteralEmojis:");
}

id objc_msgSend__processActions(void *a1, const char *a2, ...)
{
  return _[a1 _processActions];
}

id objc_msgSend__processCaptionTextForMarkup_regex_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processCaptionTextForMarkup:regex:range:");
}

id objc_msgSend__processEmoji_action_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processEmoji:action:rate:");
}

id objc_msgSend__processEmojiFor2DBrailleDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processEmojiFor2DBrailleDisplay:");
}

id objc_msgSend__processFallbackHelpForEvent_command_commandHelpText_activationSpokenHelpText_activationDisplayedHelpText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processFallbackHelpForEvent:command:commandHelpText:activationSpokenHelpText:activationDisplayedHelpText:");
}

id objc_msgSend__processGestureEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processGestureEvent:");
}

id objc_msgSend__processHelpForEvent_userCommandContext_commandHelpText_activationSpokenHelpText_activationDisplayedHelpText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processHelpForEvent:userCommandContext:commandHelpText:activationSpokenHelpText:activationDisplayedHelpText:");
}

id objc_msgSend__processIdle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processIdle:");
}

id objc_msgSend__processMisspelledWordTextReplacement(void *a1, const char *a2, ...)
{
  return _[a1 _processMisspelledWordTextReplacement];
}

id objc_msgSend__processRawInputEvent_forElement_withAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processRawInputEvent:forElement:withAttributes:");
}

id objc_msgSend__processRotorEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processRotorEvent:");
}

id objc_msgSend__processSearchEvent_forElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processSearchEvent:forElement:");
}

id objc_msgSend__processSilentValueChange(void *a1, const char *a2, ...)
{
  return _[a1 _processSilentValueChange];
}

id objc_msgSend__processTapAndHoldMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processTapAndHoldMode:");
}

id objc_msgSend__processValueChangeWithFirstResponder_existingFirstResponder_changeType_changeOrigination_isQuiet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processValueChangeWithFirstResponder:existingFirstResponder:changeType:changeOrigination:isQuiet:");
}

id objc_msgSend__processVolumeButtonsForCurtainReset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processVolumeButtonsForCurtainReset:");
}

id objc_msgSend__processWebRotorEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processWebRotorEvent:");
}

id objc_msgSend__promoteCommaToBeginningOfListIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_promoteCommaToBeginningOfListIfNeeded:");
}

id objc_msgSend__promoteGesturedTextInputRotorIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _promoteGesturedTextInputRotorIfNeeded];
}

id objc_msgSend__rangeOfLine_inBookContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rangeOfLine:inBookContent:");
}

id objc_msgSend__rawMathEquation(void *a1, const char *a2, ...)
{
  return _[a1 _rawMathEquation];
}

id objc_msgSend__reDispatchUpdateAppFromTimerIfBundlesAreNotReady(void *a1, const char *a2, ...)
{
  return _[a1 _reDispatchUpdateAppFromTimerIfBundlesAreNotReady];
}

id objc_msgSend__reachabilityHandleTrackingStopped(void *a1, const char *a2, ...)
{
  return _[a1 _reachabilityHandleTrackingStopped];
}

id objc_msgSend__realTimeAdjustableUpdateFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_realTimeAdjustableUpdateFrequency:");
}

id objc_msgSend__reallySimulateLongPressForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reallySimulateLongPressForElement:");
}

id objc_msgSend__recognitionThresholdForCharacterMode(void *a1, const char *a2, ...)
{
  return _[a1 _recognitionThresholdForCharacterMode];
}

id objc_msgSend__recordedDriftsFilePath(void *a1, const char *a2, ...)
{
  return _[a1 _recordedDriftsFilePath];
}

id objc_msgSend__reducePreviewFingerStartingForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reducePreviewFingerStartingForce:");
}

id objc_msgSend__refresh(void *a1, const char *a2, ...)
{
  return _[a1 _refresh];
}

id objc_msgSend__refreshBrailleLine(void *a1, const char *a2, ...)
{
  return _[a1 _refreshBrailleLine];
}

id objc_msgSend__refreshBrailleLinePreferringPositionOverRotorSelection_knownLineRange_updatedPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshBrailleLinePreferringPositionOverRotorSelection:knownLineRange:updatedPosition:");
}

id objc_msgSend__refreshBrailleLinePreferringPositionOverRotorSelection_knownLineRange_updatedPosition_updateBrailleElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshBrailleLinePreferringPositionOverRotorSelection:knownLineRange:updatedPosition:updateBrailleElement:");
}

id objc_msgSend__refreshMathSegmentsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _refreshMathSegmentsIfNeeded];
}

id objc_msgSend__refreshMathSegmentsIfNeededWithPreferredDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshMathSegmentsIfNeededWithPreferredDirection:");
}

id objc_msgSend__registerForAXNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForAXNotifications:");
}

id objc_msgSend__registerForExternalDevices(void *a1, const char *a2, ...)
{
  return _[a1 _registerForExternalDevices];
}

id objc_msgSend__registerForIOHIDUsage(void *a1, const char *a2, ...)
{
  return _[a1 _registerForIOHIDUsage];
}

id objc_msgSend__registerForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForNotifications];
}

id objc_msgSend__registerForPreferenceChanges(void *a1, const char *a2, ...)
{
  return _[a1 _registerForPreferenceChanges];
}

id objc_msgSend__registerForUserSwitches(void *a1, const char *a2, ...)
{
  return _[a1 _registerForUserSwitches];
}

id objc_msgSend__registerForZoomListener(void *a1, const char *a2, ...)
{
  return _[a1 _registerForZoomListener];
}

id objc_msgSend__registerMachServer(void *a1, const char *a2, ...)
{
  return _[a1 _registerMachServer];
}

id objc_msgSend__registerWithSpringBoard(void *a1, const char *a2, ...)
{
  return _[a1 _registerWithSpringBoard];
}

id objc_msgSend__registerWithSystem(void *a1, const char *a2, ...)
{
  return _[a1 _registerWithSystem];
}

id objc_msgSend__removeBadDeveloperDecisions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBadDeveloperDecisions:");
}

id objc_msgSend__removeInstanceOfDriftFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeInstanceOfDriftFromArray:");
}

id objc_msgSend__removeRunsOfNewLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeRunsOfNewLines:");
}

id objc_msgSend__renderStringToImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_renderStringToImage:");
}

id objc_msgSend__repairFileProtectionClassOnPathIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_repairFileProtectionClassOnPathIfNecessary:");
}

id objc_msgSend__repeatStateForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_repeatStateForEvent:");
}

id objc_msgSend__replaceEmoticonsWithText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceEmoticonsWithText:");
}

id objc_msgSend__replaceHighMemoryVoiceIDWithDefaultVoiceIDForLanguage_preferredFallbackLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceHighMemoryVoiceIDWithDefaultVoiceIDForLanguage:preferredFallbackLanguage:");
}

id objc_msgSend__replacePunctuation_punctuationGroup_hasMathContext_hasPhoneContext_isText_replaceCommas_languageCode_speakPunctuationCounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replacePunctuation:punctuationGroup:hasMathContext:hasPhoneContext:isText:replaceCommas:languageCode:speakPunctuationCounts:");
}

id objc_msgSend__replacePunctuation_withAction_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replacePunctuation:withAction:languageCode:");
}

id objc_msgSend__replaceRepeatedEmoji_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceRepeatedEmoji:");
}

id objc_msgSend__replaceRepeatedPuntuationAndEmoji_newString_charReplacementString_charSequence_charIndex_speakPunctuationCounts_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceRepeatedPuntuationAndEmoji:newString:charReplacementString:charSequence:charIndex:speakPunctuationCounts:languageCode:");
}

id objc_msgSend__replaceRotorEventWithTextMovementEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceRotorEventWithTextMovementEvent:");
}

id objc_msgSend__replaceUserSubstitutions_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceUserSubstitutions:action:");
}

id objc_msgSend__requestSecurePasteAuthenticationMessageWithContext_forClientVersionedPID_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestSecurePasteAuthenticationMessageWithContext:forClientVersionedPID:completionBlock:");
}

id objc_msgSend__requiresCandidateSelection(void *a1, const char *a2, ...)
{
  return _[a1 _requiresCandidateSelection];
}

id objc_msgSend__requiresLaTeXInput(void *a1, const char *a2, ...)
{
  return _[a1 _requiresLaTeXInput];
}

id objc_msgSend__resetAlternateCharacterSuggestions(void *a1, const char *a2, ...)
{
  return _[a1 _resetAlternateCharacterSuggestions];
}

id objc_msgSend__resetBrailleCursor(void *a1, const char *a2, ...)
{
  return _[a1 _resetBrailleCursor];
}

id objc_msgSend__resetConsecutiveCrashCount(void *a1, const char *a2, ...)
{
  return _[a1 _resetConsecutiveCrashCount];
}

id objc_msgSend__resetDirectInteractionCache(void *a1, const char *a2, ...)
{
  return _[a1 _resetDirectInteractionCache];
}

id objc_msgSend__resetElementLabel(void *a1, const char *a2, ...)
{
  return _[a1 _resetElementLabel];
}

id objc_msgSend__resetElementUnitIndexes(void *a1, const char *a2, ...)
{
  return _[a1 _resetElementUnitIndexes];
}

id objc_msgSend__resetItemChooserCache(void *a1, const char *a2, ...)
{
  return _[a1 _resetItemChooserCache];
}

id objc_msgSend__resetLearnedData(void *a1, const char *a2, ...)
{
  return _[a1 _resetLearnedData];
}

id objc_msgSend__resetMathGranularMovementState(void *a1, const char *a2, ...)
{
  return _[a1 _resetMathGranularMovementState];
}

id objc_msgSend__resetOtherTapInputModes(void *a1, const char *a2, ...)
{
  return _[a1 _resetOtherTapInputModes];
}

id objc_msgSend__resetQuickNavState(void *a1, const char *a2, ...)
{
  return _[a1 _resetQuickNavState];
}

id objc_msgSend__resetReadAllRequest(void *a1, const char *a2, ...)
{
  return _[a1 _resetReadAllRequest];
}

id objc_msgSend__resetRotorTextNavigation(void *a1, const char *a2, ...)
{
  return _[a1 _resetRotorTextNavigation];
}

id objc_msgSend__resetSearchType(void *a1, const char *a2, ...)
{
  return _[a1 _resetSearchType];
}

id objc_msgSend__resetStateAndSendPendingEventsToSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetStateAndSendPendingEventsToSystem:");
}

id objc_msgSend__resetSystemControlStatus(void *a1, const char *a2, ...)
{
  return _[a1 _resetSystemControlStatus];
}

id objc_msgSend__resetTranslator(void *a1, const char *a2, ...)
{
  return _[a1 _resetTranslator];
}

id objc_msgSend__resolvedOutputLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resolvedOutputLanguage:");
}

id objc_msgSend__retrieveCachedFocusedElementForElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveCachedFocusedElementForElementCommunity:");
}

id objc_msgSend__retrieveCurrentCharacterFromEditableElement(void *a1, const char *a2, ...)
{
  return _[a1 _retrieveCurrentCharacterFromEditableElement];
}

id objc_msgSend__retrieveDefaultElementForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveDefaultElementForPosition:");
}

id objc_msgSend__reupdateTextSelectionInformation(void *a1, const char *a2, ...)
{
  return _[a1 _reupdateTextSelectionInformation];
}

id objc_msgSend__roleDescriptionWithInteractOption_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_roleDescriptionWithInteractOption:language:");
}

id objc_msgSend__rotorTypeSupportsCounting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rotorTypeSupportsCounting:");
}

id objc_msgSend__savedDescriptionToPhoto_description_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_savedDescriptionToPhoto:description:element:");
}

id objc_msgSend__sbPort(void *a1, const char *a2, ...)
{
  return _[a1 _sbPort];
}

id objc_msgSend__scheduleExploringModeIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleExploringModeIfNeeded];
}

id objc_msgSend__scheduleUpdateScribbleTapAndHoldModeOffset(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleUpdateScribbleTapAndHoldModeOffset];
}

id objc_msgSend__searchForElementWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_searchForElementWithParameters:");
}

id objc_msgSend__searchForElementWithParameters_searchFromOpaqueElementsInRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_searchForElementWithParameters:searchFromOpaqueElementsInRemoteParent:");
}

id objc_msgSend__secureTextDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_secureTextDescription:");
}

id objc_msgSend__selectedBrailleGesturesInputTableChanged(void *a1, const char *a2, ...)
{
  return _[a1 _selectedBrailleGesturesInputTableChanged];
}

id objc_msgSend__selectedBrailleInputTableChanged(void *a1, const char *a2, ...)
{
  return _[a1 _selectedBrailleInputTableChanged];
}

id objc_msgSend__selectedBrailleTableChanged(void *a1, const char *a2, ...)
{
  return _[a1 _selectedBrailleTableChanged];
}

id objc_msgSend__selectedLanguageChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectedLanguageChanged:");
}

id objc_msgSend__selectionStringForSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectionStringForSegment:");
}

id objc_msgSend__sendAutomationTouchCommand_location_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAutomationTouchCommand:location:");
}

id objc_msgSend__sendBSIActiveStateOffNotificationAndNotify(void *a1, const char *a2, ...)
{
  return _[a1 _sendBSIActiveStateOffNotificationAndNotify];
}

id objc_msgSend__sendBrailleAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendBrailleAlert:");
}

id objc_msgSend__sendEvent_withKeyInfo_arrowMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendEvent:withKeyInfo:arrowMask:");
}

id objc_msgSend__sendEventForCommand_withKeyInfo_arrowMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendEventForCommand:withKeyInfo:arrowMask:");
}

id objc_msgSend__sendExplorerOutputRequest_forceReread_interruptCurrentSpeech_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendExplorerOutputRequest:forceReread:interruptCurrentSpeech:");
}

id objc_msgSend__sendGreetingMessage(void *a1, const char *a2, ...)
{
  return _[a1 _sendGreetingMessage];
}

id objc_msgSend__sendSystemControlEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendSystemControlEvent:");
}

id objc_msgSend__setAutomaticBrailleTranslationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAutomaticBrailleTranslationEnabled:");
}

id objc_msgSend__setBrailleInputTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBrailleInputTable:");
}

id objc_msgSend__setBrailleString_type_timeout_priority_langCode_brailleLineRangeValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBrailleString:type:timeout:priority:langCode:brailleLineRangeValue:");
}

id objc_msgSend__setBrailleTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBrailleTable:");
}

id objc_msgSend__setCurrentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentElement:");
}

id objc_msgSend__setCurrentElement_isProtectedApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentElement:isProtectedApp:");
}

id objc_msgSend__setCurrentElement_isProtectedApp_shouldResetTextSelection_shouldResetCharacterRange_ignoreIsAccessibilityElementCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:");
}

id objc_msgSend__setCurrentElement_isProtectedApp_shouldResetTextSelection_shouldResetCharacterRange_ignoreIsAccessibilityElementCheck_shouldSetBrailleElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:shouldSetBrailleElement:");
}

id objc_msgSend__setDuckingLevelAlways_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDuckingLevelAlways:");
}

id objc_msgSend__setDuckingLevelOnlySpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDuckingLevelOnlySpeaking:");
}

id objc_msgSend__setElementRotorToType_saveToPreferences_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setElementRotorToType:saveToPreferences:userInitiated:");
}

id objc_msgSend__setElementUnitIndexesToEndOfElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setElementUnitIndexesToEndOfElement:");
}

id objc_msgSend__setFingerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setFingerCount:");
}

id objc_msgSend__setHandwritingCaptureTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHandwritingCaptureTimer:");
}

id objc_msgSend__setImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setImageData:");
}

id objc_msgSend__setInputContractionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInputContractionMode:");
}

id objc_msgSend__setLastSeenLineAndColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLastSeenLineAndColumn:");
}

id objc_msgSend__setNearestElementMovingForward_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearestElementMovingForward:");
}

id objc_msgSend__setPreviousTouchTypingKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPreviousTouchTypingKey:");
}

id objc_msgSend__setSelectedTextRange_onElement_refreshBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSelectedTextRange:onElement:refreshBraille:");
}

id objc_msgSend__setSelectedTextRange_onElement_refreshBraille_isVoiceOverSelectionMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSelectedTextRange:onElement:refreshBraille:isVoiceOverSelectionMovement:");
}

id objc_msgSend__setTextData_focusedIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTextData:focusedIndex:");
}

id objc_msgSend__shouldAllowSpeakThisGesture(void *a1, const char *a2, ...)
{
  return _[a1 _shouldAllowSpeakThisGesture];
}

id objc_msgSend__shouldAnalyzeElement_deferToMediaAnalysisElementIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAnalyzeElement:deferToMediaAnalysisElementIfNeeded:");
}

id objc_msgSend__shouldAnnounceCustomRotorHintForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAnnounceCustomRotorHintForElement:");
}

id objc_msgSend__shouldAttemptTracking(void *a1, const char *a2, ...)
{
  return _[a1 _shouldAttemptTracking];
}

id objc_msgSend__shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent:");
}

id objc_msgSend__shouldDismissPreviewOnLift(void *a1, const char *a2, ...)
{
  return _[a1 _shouldDismissPreviewOnLift];
}

id objc_msgSend__shouldIgnoreElementMovementNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIgnoreElementMovementNotification:");
}

id objc_msgSend__shouldIgnoreNotificationForContinuityDisplay_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIgnoreNotificationForContinuityDisplay:withElement:");
}

id objc_msgSend__shouldIncludeContainerInDescriptionForCurrentElement_previousElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIncludeContainerInDescriptionForCurrentElement:previousElement:");
}

id objc_msgSend__shouldIncludeServiceNameForSpokenBrailleRotorAnnouncementOfTable_rotorItems_locale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIncludeServiceNameForSpokenBrailleRotorAnnouncementOfTable:rotorItems:locale:");
}

id objc_msgSend__shouldMoveToLastWebFormControl(void *a1, const char *a2, ...)
{
  return _[a1 _shouldMoveToLastWebFormControl];
}

id objc_msgSend__shouldNotSpeakForIncomingCall(void *a1, const char *a2, ...)
{
  return _[a1 _shouldNotSpeakForIncomingCall];
}

id objc_msgSend__shouldReverseDots(void *a1, const char *a2, ...)
{
  return _[a1 _shouldReverseDots];
}

id objc_msgSend__shouldSendTapStraightToSystem(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSendTapStraightToSystem];
}

id objc_msgSend__shouldShowImages(void *a1, const char *a2, ...)
{
  return _[a1 _shouldShowImages];
}

id objc_msgSend__shouldSuppressSpeechForPlayPause(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSuppressSpeechForPlayPause];
}

id objc_msgSend__shouldSwitchToFirstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSwitchToFirstResponder:");
}

id objc_msgSend__shouldUseContractedBraille(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseContractedBraille];
}

id objc_msgSend__shouldUseEightDotBraille(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseEightDotBraille];
}

id objc_msgSend__shouldUseGesturedTextInputManager(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseGesturedTextInputManager];
}

id objc_msgSend__showItemChooser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showItemChooser:");
}

id objc_msgSend__showVisualRotor_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showVisualRotor:direction:");
}

id objc_msgSend__sideAppDividerElement(void *a1, const char *a2, ...)
{
  return _[a1 _sideAppDividerElement];
}

id objc_msgSend__similarMonitoredElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_similarMonitoredElement:");
}

id objc_msgSend__simulateEdgePress(void *a1, const char *a2, ...)
{
  return _[a1 _simulateEdgePress];
}

id objc_msgSend__simulatePeekAndSwitchToTapHoldMode(void *a1, const char *a2, ...)
{
  return _[a1 _simulatePeekAndSwitchToTapHoldMode];
}

id objc_msgSend__simulatePop(void *a1, const char *a2, ...)
{
  return _[a1 _simulatePop];
}

id objc_msgSend__simulatePreviewActionGesture(void *a1, const char *a2, ...)
{
  return _[a1 _simulatePreviewActionGesture];
}

id objc_msgSend__simulatedForceTouchLift(void *a1, const char *a2, ...)
{
  return _[a1 _simulatedForceTouchLift];
}

id objc_msgSend__simulatedPressOutputTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_simulatedPressOutputTimer:");
}

id objc_msgSend__sonarElementFromPoint_inForwardDirection_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sonarElementFromPoint:inForwardDirection:limit:");
}

id objc_msgSend__sonarElementInForwardDirection_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sonarElementInForwardDirection:limit:");
}

id objc_msgSend__sortTouches_fromTopToBottomForSide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sortTouches:fromTopToBottomForSide:");
}

id objc_msgSend__soundVolume(void *a1, const char *a2, ...)
{
  return _[a1 _soundVolume];
}

id objc_msgSend__sourceNameForChangeOriginator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sourceNameForChangeOriginator:");
}

id objc_msgSend__speak_cannotBeInterrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speak:cannotBeInterrupted:");
}

id objc_msgSend__speakAllDigits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakAllDigits:");
}

id objc_msgSend__speakAsLiteralText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakAsLiteralText:");
}

id objc_msgSend__speakAsMixOfLiteralAndNormalText_withLiteralRanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakAsMixOfLiteralAndNormalText:withLiteralRanges:");
}

id objc_msgSend__speakAsNormalText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakAsNormalText:");
}

id objc_msgSend__speakAsPhoneticText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakAsPhoneticText:");
}

id objc_msgSend__speakMessages_cannotBeInterrupted_pitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakMessages:cannotBeInterrupted:pitch:");
}

id objc_msgSend__speakMessages_cannotBeInterrupted_pitch_announcement_brailleOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakMessages:cannotBeInterrupted:pitch:announcement:brailleOnly:");
}

id objc_msgSend__speakPrintBrailleForExploration(void *a1, const char *a2, ...)
{
  return _[a1 _speakPrintBrailleForExploration];
}

id objc_msgSend__speakText_doesNotInterrupt_cannotBeInterrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakText:doesNotInterrupt:cannotBeInterrupted:");
}

id objc_msgSend__speakText_hint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakText:hint:");
}

id objc_msgSend__speakText_hint_useKeyboardLanguage_shouldQueue_isInsert_isSuggestion_isDelete_speakLiterally_otherLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakText:hint:useKeyboardLanguage:shouldQueue:isInsert:isSuggestion:isDelete:speakLiterally:otherLanguage:");
}

id objc_msgSend__speakText_useKeyboardLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakText:useKeyboardLanguage:");
}

id objc_msgSend__speakText_useKeyboardLanguage_shouldQueue_isInsert_isDelete_speakLiterally_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakText:useKeyboardLanguage:shouldQueue:isInsert:isDelete:speakLiterally:");
}

id objc_msgSend__speechPhoneticsString(void *a1, const char *a2, ...)
{
  return _[a1 _speechPhoneticsString];
}

id objc_msgSend__speechVoiceForIdentifier_language_footprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speechVoiceForIdentifier:language:footprint:");
}

id objc_msgSend__spellingSuggestionsForWord_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spellingSuggestionsForWord:languageCode:");
}

id objc_msgSend__spokenStringForPrintBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spokenStringForPrintBraille:");
}

id objc_msgSend__spokenStringForPrintBraille_useLongForm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spokenStringForPrintBraille:useLongForm:");
}

id objc_msgSend__spokenTextForRequest_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spokenTextForRequest:range:");
}

id objc_msgSend__startPointForScribbleWithElement_originalStartPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startPointForScribbleWithElement:originalStartPoint:");
}

id objc_msgSend__startReadingBookForNewPage(void *a1, const char *a2, ...)
{
  return _[a1 _startReadingBookForNewPage];
}

id objc_msgSend__startScribbleTapAndHoldModeTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _startScribbleTapAndHoldModeTimeout];
}

id objc_msgSend__startTouchDownForTapAndHoldActionWithCenter_force_altitude_azimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startTouchDownForTapAndHoldActionWithCenter:force:altitude:azimuth:");
}

id objc_msgSend__stopMemorizingSession(void *a1, const char *a2, ...)
{
  return _[a1 _stopMemorizingSession];
}

id objc_msgSend__stopReadAll(void *a1, const char *a2, ...)
{
  return _[a1 _stopReadAll];
}

id objc_msgSend__stopRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 _stopRunLoop];
}

id objc_msgSend__stringByDeletingFromCurrentInputStringIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _stringByDeletingFromCurrentInputStringIfNeeded];
}

id objc_msgSend__stringForApplicationWithName_inApplications_withRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForApplicationWithName:inApplications:withRole:");
}

id objc_msgSend__stringForBrailleGestureCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForBrailleGestureCommand:");
}

id objc_msgSend__stringForLiteralText_action_allowChangingLanguageForPunctuation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForLiteralText:action:allowChangingLanguageForPunctuation:");
}

id objc_msgSend__stringForNormalText_action_allowPausingAtBoundaries_ignoreLeadingCommas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForNormalText:action:allowPausingAtBoundaries:ignoreLeadingCommas:");
}

id objc_msgSend__stringMatchesSpecialCases_forSymbol_ranges_langaugeCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringMatchesSpecialCases:forSymbol:ranges:langaugeCode:");
}

id objc_msgSend__stringWithFirstPart_secondPart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringWithFirstPart:secondPart:");
}

id objc_msgSend__switchToTrackingMode(void *a1, const char *a2, ...)
{
  return _[a1 _switchToTrackingMode];
}

id objc_msgSend__syncLabelCache(void *a1, const char *a2, ...)
{
  return _[a1 _syncLabelCache];
}

id objc_msgSend__systemBootTime(void *a1, const char *a2, ...)
{
  return _[a1 _systemBootTime];
}

id objc_msgSend__systemControlPosition_fingerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemControlPosition:fingerCount:");
}

id objc_msgSend__systemNotificationInProgressForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemNotificationInProgressForRequest:");
}

id objc_msgSend__tableIdentifierFromDefaultRotorItem_forLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tableIdentifierFromDefaultRotorItem:forLocale:");
}

id objc_msgSend__tapAndHoldModeIsForScribble(void *a1, const char *a2, ...)
{
  return _[a1 _tapAndHoldModeIsForScribble];
}

id objc_msgSend__tearDownTelephonySynthesizer(void *a1, const char *a2, ...)
{
  return _[a1 _tearDownTelephonySynthesizer];
}

id objc_msgSend__temporarilyChangeQuickNav_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_temporarilyChangeQuickNav:");
}

id objc_msgSend__testFetchWebElementRects(void *a1, const char *a2, ...)
{
  return _[a1 _testFetchWebElementRects];
}

id objc_msgSend__textAttachmentElementForString_inRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_textAttachmentElementForString:inRange:");
}

id objc_msgSend__totalDistanceBetweenCorrespondingPointsInTouches_andTouches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_totalDistanceBetweenCorrespondingPointsInTouches:andTouches:");
}

id objc_msgSend__totalNumberOfDots(void *a1, const char *a2, ...)
{
  return _[a1 _totalNumberOfDots];
}

id objc_msgSend__touchContainerDidChangeForElement_oldElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchContainerDidChangeForElement:oldElement:");
}

id objc_msgSend__touchDownAtPoint_withForce_altitude_azimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchDownAtPoint:withForce:altitude:azimuth:");
}

id objc_msgSend__touchDragAtPoint_withForce_altitude_azimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchDragAtPoint:withForce:altitude:azimuth:");
}

id objc_msgSend__touchLiftAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchLiftAtPoint:");
}

id objc_msgSend__touchLocationsByFilteringOutEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchLocationsByFilteringOutEdges:");
}

id objc_msgSend__touchLocationsForGestureEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchLocationsForGestureEvent:");
}

id objc_msgSend__touchPointsForCalibrationGivenFirstPoints_lastPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchPointsForCalibrationGivenFirstPoints:lastPoints:");
}

id objc_msgSend__transitionToGestureState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transitionToGestureState:");
}

id objc_msgSend__treePositionForMathSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_treePositionForMathSegment:");
}

id objc_msgSend__trimCommonPrefixWithString_fromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trimCommonPrefixWithString:fromString:");
}

id objc_msgSend__ttsVoiceTypeForPauseCalculationWithVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ttsVoiceTypeForPauseCalculationWithVoiceIdentifier:");
}

id objc_msgSend__tvOS_handleIdleAndTrackingEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tvOS_handleIdleAndTrackingEvents:");
}

id objc_msgSend__tvOS_updateWithNativeFocus_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tvOS_updateWithNativeFocus:withDelay:");
}

id objc_msgSend__twoFingersDistant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_twoFingersDistant:");
}

id objc_msgSend__typePrintBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_typePrintBraille:");
}

id objc_msgSend__typingEchoString(void *a1, const char *a2, ...)
{
  return _[a1 _typingEchoString];
}

id objc_msgSend__uncapVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uncapVolume:");
}

id objc_msgSend__updateAccelerometerDataIfNeededAndAnnounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccelerometerDataIfNeededAndAnnounce:");
}

id objc_msgSend__updateActionWithCanonicalMappings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateActionWithCanonicalMappings:");
}

id objc_msgSend__updateActiveCharacterSetFromCharacterMode_allowedCharacterModes_announceChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateActiveCharacterSetFromCharacterMode:allowedCharacterModes:announceChange:");
}

id objc_msgSend__updateActivityListeners(void *a1, const char *a2, ...)
{
  return _[a1 _updateActivityListeners];
}

id objc_msgSend__updateAnyThreadElementAccess(void *a1, const char *a2, ...)
{
  return _[a1 _updateAnyThreadElementAccess];
}

id objc_msgSend__updateApplicationAndSpeak_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateApplicationAndSpeak:");
}

id objc_msgSend__updateAudioSessionProperties(void *a1, const char *a2, ...)
{
  return _[a1 _updateAudioSessionProperties];
}

id objc_msgSend__updateBrailleAutoAdvancePrefs(void *a1, const char *a2, ...)
{
  return _[a1 _updateBrailleAutoAdvancePrefs];
}

id objc_msgSend__updateBrailleKeyDebouncePrefs(void *a1, const char *a2, ...)
{
  return _[a1 _updateBrailleKeyDebouncePrefs];
}

id objc_msgSend__updateBrailleTypingPropertiesAndDelayAnnouncement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBrailleTypingPropertiesAndDelayAnnouncement:");
}

id objc_msgSend__updateBrailleTypingPropertiesAndDelayAnnouncement_forUnlockConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBrailleTypingPropertiesAndDelayAnnouncement:forUnlockConfiguration:");
}

id objc_msgSend__updateBrailleUI(void *a1, const char *a2, ...)
{
  return _[a1 _updateBrailleUI];
}

id objc_msgSend__updateBrailleWithBuffer(void *a1, const char *a2, ...)
{
  return _[a1 _updateBrailleWithBuffer];
}

id objc_msgSend__updateCacheWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCacheWithElement:");
}

id objc_msgSend__updateChannelLayout(void *a1, const char *a2, ...)
{
  return _[a1 _updateChannelLayout];
}

id objc_msgSend__updateConsecutiveKeyCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateConsecutiveKeyCount:");
}

id objc_msgSend__updateContextDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 _updateContextDescriptors];
}

id objc_msgSend__updateContinuousPathTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _updateContinuousPathTimeout];
}

id objc_msgSend__updateCurrentElementByMovingInDirection_fromElement_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCurrentElementByMovingInDirection:fromElement:context:");
}

id objc_msgSend__updateCurrentElementForTextInputSelectionChangeIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _updateCurrentElementForTextInputSelectionChangeIfNeeded];
}

id objc_msgSend__updateCurrentElementFrame(void *a1, const char *a2, ...)
{
  return _[a1 _updateCurrentElementFrame];
}

id objc_msgSend__updateCurrentElementOrbGestureMode(void *a1, const char *a2, ...)
{
  return _[a1 _updateCurrentElementOrbGestureMode];
}

id objc_msgSend__updateCurrentVoiceOverItem(void *a1, const char *a2, ...)
{
  return _[a1 _updateCurrentVoiceOverItem];
}

id objc_msgSend__updateCurrentWordContextForBook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCurrentWordContextForBook:");
}

id objc_msgSend__updateCursorAfterPressForElement_currentElementRange_request_didHaveCursor_doesHaveCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCursorAfterPressForElement:currentElementRange:request:didHaveCursor:doesHaveCursor:");
}

id objc_msgSend__updateCursorFrameForElementIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCursorFrameForElementIfNeeded:");
}

id objc_msgSend__updateDelayUntilSpeakUnderTouch(void *a1, const char *a2, ...)
{
  return _[a1 _updateDelayUntilSpeakUnderTouch];
}

id objc_msgSend__updateDotNumberCirclesForPrintBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDotNumberCirclesForPrintBraille:");
}

id objc_msgSend__updateDotPositions(void *a1, const char *a2, ...)
{
  return _[a1 _updateDotPositions];
}

id objc_msgSend__updateDuckingBasedOnActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDuckingBasedOnActivity:");
}

id objc_msgSend__updateEdgePanGestureForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEdgePanGestureForState:");
}

id objc_msgSend__updateEventFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEventFlags:");
}

id objc_msgSend__updateExplorerElementsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _updateExplorerElementsIfNeeded];
}

id objc_msgSend__updateExternalAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateExternalAccessory:");
}

id objc_msgSend__updateExternalRoutesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _updateExternalRoutesAvailable];
}

id objc_msgSend__updateFingersInSystemControlLocation_fingerCount_isLift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFingersInSystemControlLocation:fingerCount:isLift:");
}

id objc_msgSend__updateFirstResponder(void *a1, const char *a2, ...)
{
  return _[a1 _updateFirstResponder];
}

id objc_msgSend__updateFirstResponderTypingBuffer(void *a1, const char *a2, ...)
{
  return _[a1 _updateFirstResponderTypingBuffer];
}

id objc_msgSend__updateFirstnessOfTrackingEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFirstnessOfTrackingEvent:");
}

id objc_msgSend__updateFlashlightEnabledStatus(void *a1, const char *a2, ...)
{
  return _[a1 _updateFlashlightEnabledStatus];
}

id objc_msgSend__updateFocusForFKA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFocusForFKA:");
}

id objc_msgSend__updateForContinuityStateChange(void *a1, const char *a2, ...)
{
  return _[a1 _updateForContinuityStateChange];
}

id objc_msgSend__updateHelpEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _updateHelpEnabled];
}

id objc_msgSend__updateLastFirstResponderChangedTime(void *a1, const char *a2, ...)
{
  return _[a1 _updateLastFirstResponderChangedTime];
}

id objc_msgSend__updateLocalizedResources(void *a1, const char *a2, ...)
{
  return _[a1 _updateLocalizedResources];
}

id objc_msgSend__updateMLElementAutorefresh(void *a1, const char *a2, ...)
{
  return _[a1 _updateMLElementAutorefresh];
}

id objc_msgSend__updateMostRecentElementCommunity(void *a1, const char *a2, ...)
{
  return _[a1 _updateMostRecentElementCommunity];
}

id objc_msgSend__updateOnscreenKeyboardSettings(void *a1, const char *a2, ...)
{
  return _[a1 _updateOnscreenKeyboardSettings];
}

id objc_msgSend__updatePitch_settingsPitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePitch:settingsPitch:");
}

id objc_msgSend__updatePlayerWithAudioFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePlayerWithAudioFile:");
}

id objc_msgSend__updatePointerVoiceOverOptions(void *a1, const char *a2, ...)
{
  return _[a1 _updatePointerVoiceOverOptions];
}

id objc_msgSend__updatePrefersNonBlinkingCursorIndicatorPrefs(void *a1, const char *a2, ...)
{
  return _[a1 _updatePrefersNonBlinkingCursorIndicatorPrefs];
}

id objc_msgSend__updateRangeToReplaceInContext_selectedRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRangeToReplaceInContext:selectedRange:");
}

id objc_msgSend__updateRealtimeElementStatus(void *a1, const char *a2, ...)
{
  return _[a1 _updateRealtimeElementStatus];
}

id objc_msgSend__updateRotorForCurrentElement(void *a1, const char *a2, ...)
{
  return _[a1 _updateRotorForCurrentElement];
}

id objc_msgSend__updateRotorForCurrentElement_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRotorForCurrentElement:completion:");
}

id objc_msgSend__updateRotorsForElementWithErrorMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRotorsForElementWithErrorMessage:");
}

id objc_msgSend__updateScreenCurtainEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateScreenCurtainEnabled:");
}

id objc_msgSend__updateShouldUseContractedBraille(void *a1, const char *a2, ...)
{
  return _[a1 _updateShouldUseContractedBraille];
}

id objc_msgSend__updateSoundCurtain(void *a1, const char *a2, ...)
{
  return _[a1 _updateSoundCurtain];
}

id objc_msgSend__updateStatusCellPrefs(void *a1, const char *a2, ...)
{
  return _[a1 _updateStatusCellPrefs];
}

id objc_msgSend__updateStatusCells(void *a1, const char *a2, ...)
{
  return _[a1 _updateStatusCells];
}

id objc_msgSend__updateTapAndHoldLocationDataForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTapAndHoldLocationDataForElement:");
}

id objc_msgSend__updateTapSpeedFromPreferences(void *a1, const char *a2, ...)
{
  return _[a1 _updateTapSpeedFromPreferences];
}

id objc_msgSend__updateTouchContainerForElement_playSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTouchContainerForElement:playSound:");
}

id objc_msgSend__updateUserSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateUserSubstitutions:");
}

id objc_msgSend__updateValueChangeOriginatorForApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateValueChangeOriginatorForApplication:");
}

id objc_msgSend__updateVoiceOverHandGesturesActionCustomizations(void *a1, const char *a2, ...)
{
  return _[a1 _updateVoiceOverHandGesturesActionCustomizations];
}

id objc_msgSend__updateWebRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 _updateWebRotorItems];
}

id objc_msgSend__updateWithMostRecentElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithMostRecentElementCommunity:");
}

id objc_msgSend__updateWordWrapPrefs(void *a1, const char *a2, ...)
{
  return _[a1 _updateWordWrapPrefs];
}

id objc_msgSend__updateZoom_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateZoom:element:");
}

id objc_msgSend__updateZoomFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateZoomFrame:");
}

id objc_msgSend__urlRangesInString_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_urlRangesInString:languageCode:");
}

id objc_msgSend__useLineFrameBoundsForTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useLineFrameBoundsForTouch:");
}

id objc_msgSend__userHasDisabledUSBRM(void *a1, const char *a2, ...)
{
  return _[a1 _userHasDisabledUSBRM];
}

id objc_msgSend__usingAllChannels(void *a1, const char *a2, ...)
{
  return _[a1 _usingAllChannels];
}

id objc_msgSend__validateAssetFromResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateAssetFromResults:");
}

id objc_msgSend__valueForKeyPathOnElementManagerThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForKeyPathOnElementManagerThread:");
}

id objc_msgSend__valueWait_oldValue_waitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueWait:oldValue:waitTime:");
}

id objc_msgSend__valueWait_oldValue_waitTime_borderHitIfNoChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueWait:oldValue:waitTime:borderHitIfNoChange:");
}

id objc_msgSend__verifiedElementWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifiedElementWithElement:");
}

id objc_msgSend__verifiedElementWithElement_atPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifiedElementWithElement:atPoint:");
}

id objc_msgSend__verifyCorrectThread(void *a1, const char *a2, ...)
{
  return _[a1 _verifyCorrectThread];
}

id objc_msgSend__visionAnalysisOptionsForElement_visionOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visionAnalysisOptionsForElement:visionOptions:");
}

id objc_msgSend__voiceFromInternalVoiceListWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_voiceFromInternalVoiceListWithIdentifier:");
}

id objc_msgSend__waitForBrailleClientConnection(void *a1, const char *a2, ...)
{
  return _[a1 _waitForBrailleClientConnection];
}

id objc_msgSend__wasCanceledWithCountGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wasCanceledWithCountGeneration:");
}

id objc_msgSend__wasCanceledWithSearchGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wasCanceledWithSearchGeneration:");
}

id objc_msgSend__willStartEdgePanGestureForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willStartEdgePanGestureForEvent:");
}

id objc_msgSend__wrapup(void *a1, const char *a2, ...)
{
  return _[a1 _wrapup];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_absoluteValue(void *a1, const char *a2, ...)
{
  return _[a1 absoluteValue];
}

id objc_msgSend_acceptsContractedBraille(void *a1, const char *a2, ...)
{
  return _[a1 acceptsContractedBraille];
}

id objc_msgSend_acceptsRawInput(void *a1, const char *a2, ...)
{
  return _[a1 acceptsRawInput];
}

id objc_msgSend_accessibilityAccessory_currentValueForItemProperty_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityAccessory:currentValueForItemProperty:withElement:");
}

id objc_msgSend_accessibilityData(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityData];
}

id objc_msgSend_accessibilityStartListening(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityStartListening];
}

id objc_msgSend_accessibilityStopListening(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityStopListening];
}

id objc_msgSend_accessibleAncestor(void *a1, const char *a2, ...)
{
  return _[a1 accessibleAncestor];
}

id objc_msgSend_accessibleDescendants(void *a1, const char *a2, ...)
{
  return _[a1 accessibleDescendants];
}

id objc_msgSend_accessories(void *a1, const char *a2, ...)
{
  return _[a1 accessories];
}

id objc_msgSend_accessoryManager(void *a1, const char *a2, ...)
{
  return _[a1 accessoryManager];
}

id objc_msgSend_accessoryShutdownInProgress(void *a1, const char *a2, ...)
{
  return _[a1 accessoryShutdownInProgress];
}

id objc_msgSend_accessoryTraitsFromElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryTraitsFromElement:");
}

id objc_msgSend_acquireAssertionToDisableIdleTimerWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireAssertionToDisableIdleTimerWithReason:");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _[a1 action];
}

id objc_msgSend_actionCompletionBlock(void *a1, const char *a2, ...)
{
  return _[a1 actionCompletionBlock];
}

id objc_msgSend_actionElement(void *a1, const char *a2, ...)
{
  return _[a1 actionElement];
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _[a1 actions];
}

id objc_msgSend_actionsRotorAddBehaviorForElementRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionsRotorAddBehaviorForElementRotor:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activateDragWithDescriptorDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateDragWithDescriptorDictionary:");
}

id objc_msgSend_activateHomeButton(void *a1, const char *a2, ...)
{
  return _[a1 activateHomeButton];
}

id objc_msgSend_activateIfSupported(void *a1, const char *a2, ...)
{
  return _[a1 activateIfSupported];
}

id objc_msgSend_activateKeyboardReturnKey(void *a1, const char *a2, ...)
{
  return _[a1 activateKeyboardReturnKey];
}

id objc_msgSend_activateLockButton(void *a1, const char *a2, ...)
{
  return _[a1 activateLockButton];
}

id objc_msgSend_activateSiri(void *a1, const char *a2, ...)
{
  return _[a1 activateSiri];
}

id objc_msgSend_activateTripleClick(void *a1, const char *a2, ...)
{
  return _[a1 activateTripleClick];
}

id objc_msgSend_activateTypeToSiri(void *a1, const char *a2, ...)
{
  return _[a1 activateTypeToSiri];
}

id objc_msgSend_activatedDirectTouchThatRequiredActivation(void *a1, const char *a2, ...)
{
  return _[a1 activatedDirectTouchThatRequiredActivation];
}

id objc_msgSend_activationDelay(void *a1, const char *a2, ...)
{
  return _[a1 activationDelay];
}

id objc_msgSend_activationPoint(void *a1, const char *a2, ...)
{
  return _[a1 activationPoint];
}

id objc_msgSend_activeBrailleAutoAdvanceDuration(void *a1, const char *a2, ...)
{
  return _[a1 activeBrailleAutoAdvanceDuration];
}

id objc_msgSend_activeBrailleGeneralStatusCellPreference(void *a1, const char *a2, ...)
{
  return _[a1 activeBrailleGeneralStatusCellPreference];
}

id objc_msgSend_activeBrailleInputPreference(void *a1, const char *a2, ...)
{
  return _[a1 activeBrailleInputPreference];
}

id objc_msgSend_activeBrailleOutputPreference(void *a1, const char *a2, ...)
{
  return _[a1 activeBrailleOutputPreference];
}

id objc_msgSend_activeBrailleTextStatusCellPreference(void *a1, const char *a2, ...)
{
  return _[a1 activeBrailleTextStatusCellPreference];
}

id objc_msgSend_activeCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 activeCharacterSet];
}

id objc_msgSend_activeKeyboard(void *a1, const char *a2, ...)
{
  return _[a1 activeKeyboard];
}

id objc_msgSend_activities(void *a1, const char *a2, ...)
{
  return _[a1 activities];
}

id objc_msgSend_activityBasedAudioDucking(void *a1, const char *a2, ...)
{
  return _[a1 activityBasedAudioDucking];
}

id objc_msgSend_adaptFrameForSystemElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adaptFrameForSystemElement:");
}

id objc_msgSend_addAttribute_forKey_withRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:forKey:withRange:");
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributedString:");
}

id objc_msgSend_addAttributedString_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributedString:withLanguage:");
}

id objc_msgSend_addAttributedString_withLanguage_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributedString:withLanguage:category:");
}

id objc_msgSend_addAttributesToAction_fromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributesToAction:fromDictionary:");
}

id objc_msgSend_addCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCharactersInString:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventHandler:");
}

id objc_msgSend_addFingerWithIdentifier_location_pressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFingerWithIdentifier:location:pressure:");
}

id objc_msgSend_addHapticItemWithURL_intensity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addHapticItemWithURL:intensity:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addIndexesInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndexesInRange:");
}

id objc_msgSend_addMisspellingsForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMisspellingsForString:");
}

id objc_msgSend_addNotificationRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNotificationRequest:withCompletionHandler:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObjectsFromIndexMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromIndexMap:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOption_argument_target_action_argumentDescription_required_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOption:argument:target:action:argumentDescription:required:");
}

id objc_msgSend_addOutputEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOutputEvent:");
}

id objc_msgSend_addOutputEvent_toFirstActionMatchingCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOutputEvent:toFirstActionMatchingCategory:");
}

id objc_msgSend_addPause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPause:");
}

id objc_msgSend_addPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPoint:");
}

id objc_msgSend_addPointToSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPointToSession:");
}

id objc_msgSend_addPointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPointer:");
}

id objc_msgSend_addPrintBrailleToBuffer_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPrintBrailleToBuffer:language:");
}

id objc_msgSend_addSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSound:");
}

id objc_msgSend_addString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:");
}

id objc_msgSend_addString_brailleString_breakWords_withLanguage_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:brailleString:breakWords:withLanguage:atIndex:");
}

id objc_msgSend_addString_brailleString_breakWords_withLanguage_atIndex_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:brailleString:breakWords:withLanguage:atIndex:category:");
}

id objc_msgSend_addString_brailleString_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:brailleString:withLanguage:");
}

id objc_msgSend_addString_breakWords_withLanguage_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:breakWords:withLanguage:atIndex:");
}

id objc_msgSend_addString_breakWords_withLanguage_atIndex_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:breakWords:withLanguage:atIndex:category:");
}

id objc_msgSend_addString_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:category:");
}

id objc_msgSend_addString_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:withLanguage:");
}

id objc_msgSend_addString_withLanguage_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:withLanguage:category:");
}

id objc_msgSend_addStylusWithIdentifier_location_pressure_altitude_azimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStylusWithIdentifier:location:pressure:altitude:azimuth:");
}

id objc_msgSend_addTVElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTVElement:");
}

id objc_msgSend_addTVElement_servesAsHeader_filterWithAspectMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTVElement:servesAsHeader:filterWithAspectMask:");
}

id objc_msgSend_addTVElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTVElements:");
}

id objc_msgSend_addTextualInformationToBrailleLine_forPosition_rotorSelection_shouldPreferRotorSelection_lineRange_descriptionRange_lineRangeKnown_isNewTouchContainer_previousElement_updateValue_singleLine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTextualInformationToBrailleLine:forPosition:rotorSelection:shouldPreferRotorSelection:lineRange:descriptionRange:lineRangeKnown:isNewTouchContainer:previousElement:updateValue:singleLine:");
}

id objc_msgSend_addTextualInformationToRequest_options_dataPackage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTextualInformationToRequest:options:dataPackage:");
}

id objc_msgSend_addTitleElementToCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTitleElementToCache:");
}

id objc_msgSend_addVOSEventFinishedHandler_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addVOSEventFinishedHandler:forIdentifier:");
}

id objc_msgSend_additionalFlags(void *a1, const char *a2, ...)
{
  return _[a1 additionalFlags];
}

id objc_msgSend_additionalLanguageRotorItem(void *a1, const char *a2, ...)
{
  return _[a1 additionalLanguageRotorItem];
}

id objc_msgSend_adjustBrailleInputLanguageRotorInDirection_isDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustBrailleInputLanguageRotorInDirection:isDefault:");
}

id objc_msgSend_adjustBrailleLanguageRotorInDirection_isDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustBrailleLanguageRotorInDirection:isDefault:");
}

id objc_msgSend_adjustedPointForFactoryPoint_forOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedPointForFactoryPoint:forOrientation:");
}

id objc_msgSend_afterDelay_processBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterDelay:processBlock:");
}

id objc_msgSend_afterDelay_processBlock_cancelBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterDelay:processBlock:cancelBlock:");
}

id objc_msgSend_afterDelay_processWritingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterDelay:processWritingBlock:");
}

id objc_msgSend_airTunesRouteIsAirPlaying(void *a1, const char *a2, ...)
{
  return _[a1 airTunesRouteIsAirPlaying];
}

id objc_msgSend_airTunesRouteIsAirPlayingTestingBlock(void *a1, const char *a2, ...)
{
  return _[a1 airTunesRouteIsAirPlayingTestingBlock];
}

id objc_msgSend_allEntries(void *a1, const char *a2, ...)
{
  return _[a1 allEntries];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 allPunctuationGroup];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowSingleLetterSearching(void *a1, const char *a2, ...)
{
  return _[a1 allowSingleLetterSearching];
}

id objc_msgSend_allowedCharacterModes(void *a1, const char *a2, ...)
{
  return _[a1 allowedCharacterModes];
}

id objc_msgSend_allowedCharacterSets(void *a1, const char *a2, ...)
{
  return _[a1 allowedCharacterSets];
}

id objc_msgSend_allowedMedusaGestures(void *a1, const char *a2, ...)
{
  return _[a1 allowedMedusaGestures];
}

id objc_msgSend_allowsActivationWithoutBeingNativeFocused(void *a1, const char *a2, ...)
{
  return _[a1 allowsActivationWithoutBeingNativeFocused];
}

id objc_msgSend_allowsAutoAlternativeCharacterActivation(void *a1, const char *a2, ...)
{
  return _[a1 allowsAutoAlternativeCharacterActivation];
}

id objc_msgSend_allowsElementMovement(void *a1, const char *a2, ...)
{
  return _[a1 allowsElementMovement];
}

id objc_msgSend_allowsSystemControlEventForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsSystemControlEventForPosition:");
}

id objc_msgSend_alphanumericCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 alphanumericCharacterSet];
}

id objc_msgSend_alternateSuggestions(void *a1, const char *a2, ...)
{
  return _[a1 alternateSuggestions];
}

id objc_msgSend_alternativeKeyCode(void *a1, const char *a2, ...)
{
  return _[a1 alternativeKeyCode];
}

id objc_msgSend_altitude(void *a1, const char *a2, ...)
{
  return _[a1 altitude];
}

id objc_msgSend_analysisOptionsFor2DBraille(void *a1, const char *a2, ...)
{
  return _[a1 analysisOptionsFor2DBraille];
}

id objc_msgSend_analyzeElement_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyzeElement:withOptions:");
}

id objc_msgSend_analyzeString_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyzeString:language:");
}

id objc_msgSend_anlayzeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anlayzeString:");
}

id objc_msgSend_announcableName(void *a1, const char *a2, ...)
{
  return _[a1 announcableName];
}

id objc_msgSend_announceActiveCharacterModeWithDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceActiveCharacterModeWithDelay:");
}

id objc_msgSend_announceAdditionalTextualInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceAdditionalTextualInformation:");
}

id objc_msgSend_announceBrailleTable_isDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceBrailleTable:isDefault:");
}

id objc_msgSend_announceCharacterModeTimer(void *a1, const char *a2, ...)
{
  return _[a1 announceCharacterModeTimer];
}

id objc_msgSend_announceOrientationChanges(void *a1, const char *a2, ...)
{
  return _[a1 announceOrientationChanges];
}

id objc_msgSend_announceTableInfo_options_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceTableInfo:options:language:");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 appIdentifiers];
}

id objc_msgSend_appName(void *a1, const char *a2, ...)
{
  return _[a1 appName];
}

id objc_msgSend_appSwitcherApps(void *a1, const char *a2, ...)
{
  return _[a1 appSwitcherApps];
}

id objc_msgSend_appTransition(void *a1, const char *a2, ...)
{
  return _[a1 appTransition];
}

id objc_msgSend_appendAXAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAXAttributedString:");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appendStringWithComma_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendStringWithComma:");
}

id objc_msgSend_appleTVRemoteEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleTVRemoteEventWithCommand:info:");
}

id objc_msgSend_application(void *a1, const char *a2, ...)
{
  return _[a1 application];
}

id objc_msgSend_applicationForCurrentElement(void *a1, const char *a2, ...)
{
  return _[a1 applicationForCurrentElement];
}

id objc_msgSend_applicationForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationForElement:");
}

id objc_msgSend_applicationForPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationForPID:");
}

id objc_msgSend_applicationHandleRemoteDownButton(void *a1, const char *a2, ...)
{
  return _[a1 applicationHandleRemoteDownButton];
}

id objc_msgSend_applicationHandleRemoteLeftButton(void *a1, const char *a2, ...)
{
  return _[a1 applicationHandleRemoteLeftButton];
}

id objc_msgSend_applicationHandleRemoteRightButton(void *a1, const char *a2, ...)
{
  return _[a1 applicationHandleRemoteRightButton];
}

id objc_msgSend_applicationHandleRemoteUpButton(void *a1, const char *a2, ...)
{
  return _[a1 applicationHandleRemoteUpButton];
}

id objc_msgSend_applicationInterfaceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 applicationInterfaceOrientation];
}

id objc_msgSend_applicationIsRTL(void *a1, const char *a2, ...)
{
  return _[a1 applicationIsRTL];
}

id objc_msgSend_applicationOrientation(void *a1, const char *a2, ...)
{
  return _[a1 applicationOrientation];
}

id objc_msgSend_applicationProvidedOCRText(void *a1, const char *a2, ...)
{
  return _[a1 applicationProvidedOCRText];
}

id objc_msgSend_appliesToAllApps(void *a1, const char *a2, ...)
{
  return _[a1 appliesToAllApps];
}

id objc_msgSend_applyBrailleSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyBrailleSubstitutions:");
}

id objc_msgSend_applyCVMLGeneratedContentToRequest_explicitUserRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyCVMLGeneratedContentToRequest:explicitUserRequest:");
}

id objc_msgSend_applyElementAttributeCacheScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyElementAttributeCacheScheme:");
}

id objc_msgSend_applyGroupChildrenCountToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyGroupChildrenCountToRequest:");
}

id objc_msgSend_applyHeaderElementsToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyHeaderElementsToRequest:");
}

id objc_msgSend_applyInvalidStatusToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyInvalidStatusToRequest:");
}

id objc_msgSend_applyNextSuggestionToElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyNextSuggestionToElement:");
}

id objc_msgSend_applyPreviousSuggestionToElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyPreviousSuggestionToElement:");
}

id objc_msgSend_applyRowHeadersToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyRowHeadersToRequest:");
}

id objc_msgSend_applySelectedText_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySelectedText:language:");
}

id objc_msgSend_applySpellingSuggestionForResponder_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySpellingSuggestionForResponder:languageCode:");
}

id objc_msgSend_applyTableDimension_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyTableDimension:language:");
}

id objc_msgSend_applyTextEditingInformation_request_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyTextEditingInformation:request:options:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_areDotNumberPositionsCalibrated(void *a1, const char *a2, ...)
{
  return _[a1 areDotNumberPositionsCalibrated];
}

id objc_msgSend_areMediaLegibilityEventsBeingTapped(void *a1, const char *a2, ...)
{
  return _[a1 areMediaLegibilityEventsBeingTapped];
}

id objc_msgSend_ariaColumnCount(void *a1, const char *a2, ...)
{
  return _[a1 ariaColumnCount];
}

id objc_msgSend_ariaColumnIndex(void *a1, const char *a2, ...)
{
  return _[a1 ariaColumnIndex];
}

id objc_msgSend_ariaRowCount(void *a1, const char *a2, ...)
{
  return _[a1 ariaRowCount];
}

id objc_msgSend_ariaRowIndex(void *a1, const char *a2, ...)
{
  return _[a1 ariaRowIndex];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForParameterizedAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForParameterizedAttribute:parameter:");
}

id objc_msgSend_arrayOfTraitsAsStrings(void *a1, const char *a2, ...)
{
  return _[a1 arrayOfTraitsAsStrings];
}

id objc_msgSend_arrayOfTraitsAsStringsWithTraitOrder_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayOfTraitsAsStringsWithTraitOrder:language:");
}

id objc_msgSend_arrayWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithAXAttribute:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_aspectMask(void *a1, const char *a2, ...)
{
  return _[a1 aspectMask];
}

id objc_msgSend_assetControllerWithPolicy_qosClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetControllerWithPolicy:qosClass:");
}

id objc_msgSend_attachmentFilenameForCID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentFilenameForCID:");
}

id objc_msgSend_attemptToSetNativeFocus(void *a1, const char *a2, ...)
{
  return _[a1 attemptToSetNativeFocus];
}

id objc_msgSend_attemptToShowContextMenuWithTargetPointValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptToShowContextMenuWithTargetPointValue:");
}

id objc_msgSend_attributeForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeForKey:");
}

id objc_msgSend_attributeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeValueForKey:");
}

id objc_msgSend_attributedLabel(void *a1, const char *a2, ...)
{
  return _[a1 attributedLabel];
}

id objc_msgSend_attributedString(void *a1, const char *a2, ...)
{
  return _[a1 attributedString];
}

id objc_msgSend_attributedSubstringFromRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedSubstringFromRange:");
}

id objc_msgSend_attributedValue(void *a1, const char *a2, ...)
{
  return _[a1 attributedValue];
}

id objc_msgSend_attributedValueForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedValueForRange:");
}

id objc_msgSend_attributesAtIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesAtIndex:effectiveRange:");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_audioDestinationRequestExternal(void *a1, const char *a2, ...)
{
  return _[a1 audioDestinationRequestExternal];
}

id objc_msgSend_audioDucking(void *a1, const char *a2, ...)
{
  return _[a1 audioDucking];
}

id objc_msgSend_audioOrVideoCallWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioOrVideoCallWithStatus:");
}

id objc_msgSend_audioSessionActive(void *a1, const char *a2, ...)
{
  return _[a1 audioSessionActive];
}

id objc_msgSend_audioSessionQueue(void *a1, const char *a2, ...)
{
  return _[a1 audioSessionQueue];
}

id objc_msgSend_autoAdvanceEnabled(void *a1, const char *a2, ...)
{
  return _[a1 autoAdvanceEnabled];
}

id objc_msgSend_autoSpeakWatchElements(void *a1, const char *a2, ...)
{
  return _[a1 autoSpeakWatchElements];
}

id objc_msgSend_automaticAccessibilityEnabled(void *a1, const char *a2, ...)
{
  return _[a1 automaticAccessibilityEnabled];
}

id objc_msgSend_automaticAccessibilityModeForBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "automaticAccessibilityModeForBundleIdentifier:");
}

id objc_msgSend_automaticAccessibilityModes(void *a1, const char *a2, ...)
{
  return _[a1 automaticAccessibilityModes];
}

id objc_msgSend_automaticAccessibilityVisualizationsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 automaticAccessibilityVisualizationsEnabled];
}

id objc_msgSend_availableAudiographActionsForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableAudiographActionsForElement:");
}

id objc_msgSend_avoidAnnouncingDirectTouchArea(void *a1, const char *a2, ...)
{
  return _[a1 avoidAnnouncingDirectTouchArea];
}

id objc_msgSend_axArrayByIgnoringNilElementsWithCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axArrayByIgnoringNilElementsWithCount:");
}

id objc_msgSend_axArrayWithPossiblyNilArrays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axArrayWithPossiblyNilArrays:");
}

id objc_msgSend_axAttributedStringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axAttributedStringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_axAttributedStringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axAttributedStringWithString:");
}

id objc_msgSend_axElement(void *a1, const char *a2, ...)
{
  return _[a1 axElement];
}

id objc_msgSend_axFilterObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axFilterObjectsUsingBlock:");
}

id objc_msgSend_axIsEqualToOrderedArray_withPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axIsEqualToOrderedArray:withPredicate:");
}

id objc_msgSend_axMapObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axMapObjectsUsingBlock:");
}

id objc_msgSend_axSafelyAddObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axSafelyAddObject:");
}

id objc_msgSend_axSafelyAddObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axSafelyAddObjectsFromArray:");
}

id objc_msgSend_axStringByReplacingCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axStringByReplacingCharactersInRange:withString:");
}

id objc_msgSend_ax_CGPointValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_CGPointValue");
}

id objc_msgSend_ax_errorWithDomain_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_errorWithDomain:description:");
}

id objc_msgSend_ax_filteredArrayUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_filteredArrayUsingBlock:");
}

id objc_msgSend_ax_filteredSetUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_filteredSetUsingBlock:");
}

id objc_msgSend_ax_firstObjectUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_firstObjectUsingBlock:");
}

id objc_msgSend_ax_flatMappedArrayUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_flatMappedArrayUsingBlock:");
}

id objc_msgSend_ax_lineRangeForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_lineRangeForPosition:");
}

id objc_msgSend_ax_mappedArrayUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_mappedArrayUsingBlock:");
}

id objc_msgSend_ax_valueWithCGPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_valueWithCGPoint:");
}

id objc_msgSend_ax_wordFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_wordFromPosition:inDirection:");
}

id objc_msgSend_axmSecurelyUnarchiveData_withExpectedClass_otherAllowedClasses_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axmSecurelyUnarchiveData:withExpectedClass:otherAllowedClasses:error:");
}

id objc_msgSend_azimuth(void *a1, const char *a2, ...)
{
  return _[a1 azimuth];
}

id objc_msgSend_bannerNotificationsOutput(void *a1, const char *a2, ...)
{
  return _[a1 bannerNotificationsOutput];
}

id objc_msgSend_basePunctuationUUID(void *a1, const char *a2, ...)
{
  return _[a1 basePunctuationUUID];
}

id objc_msgSend_baseTableForPunctuationGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseTableForPunctuationGroup:");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_beginExploration(void *a1, const char *a2, ...)
{
  return _[a1 beginExploration];
}

id objc_msgSend_beginHandlingHIDEventsForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginHandlingHIDEventsForReason:");
}

id objc_msgSend_beginLiveModeSession(void *a1, const char *a2, ...)
{
  return _[a1 beginLiveModeSession];
}

id objc_msgSend_beginNewTextSearchSession(void *a1, const char *a2, ...)
{
  return _[a1 beginNewTextSearchSession];
}

id objc_msgSend_beginScrubbingSession(void *a1, const char *a2, ...)
{
  return _[a1 beginScrubbingSession];
}

id objc_msgSend_beginTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 beginTimestamp];
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _[a1 blackColor];
}

id objc_msgSend_blockquoteLevel(void *a1, const char *a2, ...)
{
  return _[a1 blockquoteLevel];
}

id objc_msgSend_bluetoothBrailleDisplayConnected(void *a1, const char *a2, ...)
{
  return _[a1 bluetoothBrailleDisplayConnected];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_BOOLWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLWithAXAttribute:");
}

id objc_msgSend_bottomDot(void *a1, const char *a2, ...)
{
  return _[a1 bottomDot];
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _[a1 bounds];
}

id objc_msgSend_boundsForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundsForRange:");
}

id objc_msgSend_braille2DCanvasElement(void *a1, const char *a2, ...)
{
  return _[a1 braille2DCanvasElement];
}

id objc_msgSend_braille2DRenderRegion(void *a1, const char *a2, ...)
{
  return _[a1 braille2DRenderRegion];
}

id objc_msgSend_brailleAlerts(void *a1, const char *a2, ...)
{
  return _[a1 brailleAlerts];
}

id objc_msgSend_brailleAlertsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 brailleAlertsEnabled];
}

id objc_msgSend_brailleAutoAdvanceDuration(void *a1, const char *a2, ...)
{
  return _[a1 brailleAutoAdvanceDuration];
}

id objc_msgSend_brailleEdgeOptions(void *a1, const char *a2, ...)
{
  return _[a1 brailleEdgeOptions];
}

id objc_msgSend_brailleEdges(void *a1, const char *a2, ...)
{
  return _[a1 brailleEdges];
}

id objc_msgSend_brailleElement(void *a1, const char *a2, ...)
{
  return _[a1 brailleElement];
}

id objc_msgSend_brailleEnabled(void *a1, const char *a2, ...)
{
  return _[a1 brailleEnabled];
}

id objc_msgSend_brailleEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brailleEventWithCommand:info:");
}

id objc_msgSend_brailleForText_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brailleForText:mode:");
}

id objc_msgSend_brailleForText_parameters_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brailleForText:parameters:withReply:");
}

id objc_msgSend_brailleFormatting(void *a1, const char *a2, ...)
{
  return _[a1 brailleFormatting];
}

id objc_msgSend_brailleFormattingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 brailleFormattingEnabled];
}

id objc_msgSend_brailleGestureManager_setForcedOrientation_shouldAnnounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brailleGestureManager:setForcedOrientation:shouldAnnounce:");
}

id objc_msgSend_brailleGestureManager_unsetForcedOrientationAndAnnounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brailleGestureManager:unsetForcedOrientationAndAnnounce:");
}

id objc_msgSend_brailleGestureManagerDelegate(void *a1, const char *a2, ...)
{
  return _[a1 brailleGestureManagerDelegate];
}

id objc_msgSend_brailleInput(void *a1, const char *a2, ...)
{
  return _[a1 brailleInput];
}

id objc_msgSend_brailleInputActive(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputActive];
}

id objc_msgSend_brailleInputAllowsElementMovement(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputAllowsElementMovement];
}

id objc_msgSend_brailleInputShouldBeDeactivatedByEscape(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputShouldBeDeactivatedByEscape];
}

id objc_msgSend_brailleInputTable(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputTable];
}

id objc_msgSend_brailleInputTableFromSettings(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputTableFromSettings];
}

id objc_msgSend_brailleInputTypingMode(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputTypingMode];
}

id objc_msgSend_brailleInputWantsToStayActive(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputWantsToStayActive];
}

id objc_msgSend_brailleLanguageRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 brailleLanguageRotorItems];
}

id objc_msgSend_brailleManager(void *a1, const char *a2, ...)
{
  return _[a1 brailleManager];
}

id objc_msgSend_brailleMap(void *a1, const char *a2, ...)
{
  return _[a1 brailleMap];
}

id objc_msgSend_brailleOutput(void *a1, const char *a2, ...)
{
  return _[a1 brailleOutput];
}

id objc_msgSend_brailleStatusCellGeneral(void *a1, const char *a2, ...)
{
  return _[a1 brailleStatusCellGeneral];
}

id objc_msgSend_brailleStatusCellText(void *a1, const char *a2, ...)
{
  return _[a1 brailleStatusCellText];
}

id objc_msgSend_brailleString(void *a1, const char *a2, ...)
{
  return _[a1 brailleString];
}

id objc_msgSend_brailleStringSetCallback(void *a1, const char *a2, ...)
{
  return _[a1 brailleStringSetCallback];
}

id objc_msgSend_brailleSubstitutionLanguage(void *a1, const char *a2, ...)
{
  return _[a1 brailleSubstitutionLanguage];
}

id objc_msgSend_brailleTable(void *a1, const char *a2, ...)
{
  return _[a1 brailleTable];
}

id objc_msgSend_brailleTableFromSettings(void *a1, const char *a2, ...)
{
  return _[a1 brailleTableFromSettings];
}

id objc_msgSend_brailleTextEntrySupported(void *a1, const char *a2, ...)
{
  return _[a1 brailleTextEntrySupported];
}

id objc_msgSend_brailleTypingPropertiesAnnouncementTimer(void *a1, const char *a2, ...)
{
  return _[a1 brailleTypingPropertiesAnnouncementTimer];
}

id objc_msgSend_brl_languageAndVariant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brl_languageAndVariant");
}

id objc_msgSend_broadcast(void *a1, const char *a2, ...)
{
  return _[a1 broadcast];
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return _[a1 bundleID];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifiers];
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_buttonDownOccurred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonDownOccurred:");
}

id objc_msgSend_buttonIconDetectionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 buttonIconDetectionEnabled];
}

id objc_msgSend_buttonNamesForInputIdentifier_forDisplayWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonNamesForInputIdentifier:forDisplayWithToken:");
}

id objc_msgSend_buttonRepresentationWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonRepresentationWithType:");
}

id objc_msgSend_buttonUpOccurred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonUpOccurred:");
}

id objc_msgSend_bypassHelp(void *a1, const char *a2, ...)
{
  return _[a1 bypassHelp];
}

id objc_msgSend_cache(void *a1, const char *a2, ...)
{
  return _[a1 cache];
}

id objc_msgSend_cachedAdditionalElementCommunities(void *a1, const char *a2, ...)
{
  return _[a1 cachedAdditionalElementCommunities];
}

id objc_msgSend_cachedCustomRotorActions(void *a1, const char *a2, ...)
{
  return _[a1 cachedCustomRotorActions];
}

id objc_msgSend_cachedDisplayId(void *a1, const char *a2, ...)
{
  return _[a1 cachedDisplayId];
}

id objc_msgSend_cachedDragCustomActions(void *a1, const char *a2, ...)
{
  return _[a1 cachedDragCustomActions];
}

id objc_msgSend_cachedDropCustomActions(void *a1, const char *a2, ...)
{
  return _[a1 cachedDropCustomActions];
}

id objc_msgSend_cachedImmediateRemoteParent(void *a1, const char *a2, ...)
{
  return _[a1 cachedImmediateRemoteParent];
}

id objc_msgSend_cachedRemoteApplication(void *a1, const char *a2, ...)
{
  return _[a1 cachedRemoteApplication];
}

id objc_msgSend_cachedRemoteParent(void *a1, const char *a2, ...)
{
  return _[a1 cachedRemoteParent];
}

id objc_msgSend_calibrateWithDotNumberPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calibrateWithDotNumberPositions:");
}

id objc_msgSend_calibrateWithTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calibrateWithTouchPoints:");
}

id objc_msgSend_calibrationStartTouchPoints(void *a1, const char *a2, ...)
{
  return _[a1 calibrationStartTouchPoints];
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _[a1 callStackSymbols];
}

id objc_msgSend_callStatusChanged(void *a1, const char *a2, ...)
{
  return _[a1 callStatusChanged];
}

id objc_msgSend_cameraSceneDescriber(void *a1, const char *a2, ...)
{
  return _[a1 cameraSceneDescriber];
}

id objc_msgSend_canDeleteCharacter(void *a1, const char *a2, ...)
{
  return _[a1 canDeleteCharacter];
}

id objc_msgSend_canExpandMathEquation(void *a1, const char *a2, ...)
{
  return _[a1 canExpandMathEquation];
}

id objc_msgSend_canNavigateMathSegments(void *a1, const char *a2, ...)
{
  return _[a1 canNavigateMathSegments];
}

id objc_msgSend_canSpeakCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canSpeakCharacter:");
}

id objc_msgSend_canSpeakString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canSpeakString:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAnnounceActiveCharacterMode(void *a1, const char *a2, ...)
{
  return _[a1 cancelAnnounceActiveCharacterMode];
}

id objc_msgSend_cancelCandidateSelection(void *a1, const char *a2, ...)
{
  return _[a1 cancelCandidateSelection];
}

id objc_msgSend_cancelCurrentReadAll(void *a1, const char *a2, ...)
{
  return _[a1 cancelCurrentReadAll];
}

id objc_msgSend_cancelDrag(void *a1, const char *a2, ...)
{
  return _[a1 cancelDrag];
}

id objc_msgSend_cancelElementCountOutput(void *a1, const char *a2, ...)
{
  return _[a1 cancelElementCountOutput];
}

id objc_msgSend_cancelEventForPathIndexMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelEventForPathIndexMask:");
}

id objc_msgSend_cancelPendingReadAll(void *a1, const char *a2, ...)
{
  return _[a1 cancelPendingReadAll];
}

id objc_msgSend_cancelPreviousCount(void *a1, const char *a2, ...)
{
  return _[a1 cancelPreviousCount];
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_cancelRequest(void *a1, const char *a2, ...)
{
  return _[a1 cancelRequest];
}

id objc_msgSend_cancelTapAndHoldMode(void *a1, const char *a2, ...)
{
  return _[a1 cancelTapAndHoldMode];
}

id objc_msgSend_cannotBeInterrupted(void *a1, const char *a2, ...)
{
  return _[a1 cannotBeInterrupted];
}

id objc_msgSend_capitalizedString(void *a1, const char *a2, ...)
{
  return _[a1 capitalizedString];
}

id objc_msgSend_caption(void *a1, const char *a2, ...)
{
  return _[a1 caption];
}

id objc_msgSend_captionFeatures(void *a1, const char *a2, ...)
{
  return _[a1 captionFeatures];
}

id objc_msgSend_captionMayContainSensitiveContent(void *a1, const char *a2, ...)
{
  return _[a1 captionMayContainSensitiveContent];
}

id objc_msgSend_captionTranslationLocale(void *a1, const char *a2, ...)
{
  return _[a1 captionTranslationLocale];
}

id objc_msgSend_captureNode(void *a1, const char *a2, ...)
{
  return _[a1 captureNode];
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _[a1 category];
}

id objc_msgSend_categoryName(void *a1, const char *a2, ...)
{
  return _[a1 categoryName];
}

id objc_msgSend_categoryOptions(void *a1, const char *a2, ...)
{
  return _[a1 categoryOptions];
}

id objc_msgSend_categoryWithIdentifier_actions_intentIdentifiers_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "categoryWithIdentifier:actions:intentIdentifiers:options:");
}

id objc_msgSend_cellWithRowIndexPath_parentView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellWithRowIndexPath:parentView:");
}

id objc_msgSend_centerPoint(void *a1, const char *a2, ...)
{
  return _[a1 centerPoint];
}

id objc_msgSend_centerPointOfScreen(void *a1, const char *a2, ...)
{
  return _[a1 centerPointOfScreen];
}

id objc_msgSend_changedModifiers(void *a1, const char *a2, ...)
{
  return _[a1 changedModifiers];
}

id objc_msgSend_channelsAreAirplay_route_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelsAreAirplay:route:");
}

id objc_msgSend_channelsAreWiredHeadphones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelsAreWiredHeadphones:");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterIsMember:");
}

id objc_msgSend_characterMode(void *a1, const char *a2, ...)
{
  return _[a1 characterMode];
}

id objc_msgSend_characterRangeForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterRangeForPosition:");
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterSetWithCharactersInString:");
}

id objc_msgSend_characterSetWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterSetWithRange:");
}

id objc_msgSend_characters(void *a1, const char *a2, ...)
{
  return _[a1 characters];
}

id objc_msgSend_chartDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 chartDescriptor];
}

id objc_msgSend_chartElement(void *a1, const char *a2, ...)
{
  return _[a1 chartElement];
}

id objc_msgSend_chartStructureDescription(void *a1, const char *a2, ...)
{
  return _[a1 chartStructureDescription];
}

id objc_msgSend_checkedImmediateRemoteParent(void *a1, const char *a2, ...)
{
  return _[a1 checkedImmediateRemoteParent];
}

id objc_msgSend_checkedRemoteParent(void *a1, const char *a2, ...)
{
  return _[a1 checkedRemoteParent];
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return _[a1 cleanup];
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _[a1 clear];
}

id objc_msgSend_clearAllQueues(void *a1, const char *a2, ...)
{
  return _[a1 clearAllQueues];
}

id objc_msgSend_clearBrailleBuffer(void *a1, const char *a2, ...)
{
  return _[a1 clearBrailleBuffer];
}

id objc_msgSend_clearCaches(void *a1, const char *a2, ...)
{
  return _[a1 clearCaches];
}

id objc_msgSend_clearCachesForAppsExcluding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCachesForAppsExcluding:");
}

id objc_msgSend_clearCurrentString(void *a1, const char *a2, ...)
{
  return _[a1 clearCurrentString];
}

id objc_msgSend_clearCursorFrame(void *a1, const char *a2, ...)
{
  return _[a1 clearCursorFrame];
}

id objc_msgSend_clearElementForGesturedTextInput(void *a1, const char *a2, ...)
{
  return _[a1 clearElementForGesturedTextInput];
}

id objc_msgSend_clearPreviousRequests(void *a1, const char *a2, ...)
{
  return _[a1 clearPreviousRequests];
}

id objc_msgSend_clearPreviousSoundsPlayed(void *a1, const char *a2, ...)
{
  return _[a1 clearPreviousSoundsPlayed];
}

id objc_msgSend_clearQueue(void *a1, const char *a2, ...)
{
  return _[a1 clearQueue];
}

id objc_msgSend_clearSelectedScribbleElement(void *a1, const char *a2, ...)
{
  return _[a1 clearSelectedScribbleElement];
}

id objc_msgSend_clearSpellingSuggestions(void *a1, const char *a2, ...)
{
  return _[a1 clearSpellingSuggestions];
}

id objc_msgSend_clickAndHoldHandler(void *a1, const char *a2, ...)
{
  return _[a1 clickAndHoldHandler];
}

id objc_msgSend_clickHandler(void *a1, const char *a2, ...)
{
  return _[a1 clickHandler];
}

id objc_msgSend_clientGeneration(void *a1, const char *a2, ...)
{
  return _[a1 clientGeneration];
}

id objc_msgSend_clientId(void *a1, const char *a2, ...)
{
  return _[a1 clientId];
}

id objc_msgSend_clientIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentifier];
}

id objc_msgSend_coalescedAttributes(void *a1, const char *a2, ...)
{
  return _[a1 coalescedAttributes];
}

id objc_msgSend_coalescedFontAttributes(void *a1, const char *a2, ...)
{
  return _[a1 coalescedFontAttributes];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_columnCount(void *a1, const char *a2, ...)
{
  return _[a1 columnCount];
}

id objc_msgSend_columnRange(void *a1, const char *a2, ...)
{
  return _[a1 columnRange];
}

id objc_msgSend_combinedActionString(void *a1, const char *a2, ...)
{
  return _[a1 combinedActionString];
}

id objc_msgSend_combinedOriginalString(void *a1, const char *a2, ...)
{
  return _[a1 combinedOriginalString];
}

id objc_msgSend_command(void *a1, const char *a2, ...)
{
  return _[a1 command];
}

id objc_msgSend_commandForBrailleKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForBrailleKey:");
}

id objc_msgSend_commandForKeyChord_withResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForKeyChord:withResolver:");
}

id objc_msgSend_commandForTouchGesture_withResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForTouchGesture:withResolver:");
}

id objc_msgSend_commandForVOSEventCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForVOSEventCommand:");
}

id objc_msgSend_commandHelper(void *a1, const char *a2, ...)
{
  return _[a1 commandHelper];
}

id objc_msgSend_commandInsertString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandInsertString:");
}

id objc_msgSend_commandLine(void *a1, const char *a2, ...)
{
  return _[a1 commandLine];
}

id objc_msgSend_commandType(void *a1, const char *a2, ...)
{
  return _[a1 commandType];
}

id objc_msgSend_commands(void *a1, const char *a2, ...)
{
  return _[a1 commands];
}

id objc_msgSend_commonPrefixWithString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commonPrefixWithString:options:");
}

id objc_msgSend_commonPunctuationCharacters(void *a1, const char *a2, ...)
{
  return _[a1 commonPunctuationCharacters];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _[a1 completionBlock];
}

id objc_msgSend_completionDelegate(void *a1, const char *a2, ...)
{
  return _[a1 completionDelegate];
}

id objc_msgSend_component(void *a1, const char *a2, ...)
{
  return _[a1 component];
}

id objc_msgSend_componentForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentForType:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByCharactersInSet:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_concatenateLabelsWithLinebreaksBasedOnFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "concatenateLabelsWithLinebreaksBasedOnFrame:");
}

id objc_msgSend_configureWithDriverConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithDriverConfiguration:");
}

id objc_msgSend_configuredOptionsDisableAllDetectors_elementOptions_textRecognitionLevel_textDetectionLocales_preferringFullCaptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configuredOptionsDisableAllDetectors:elementOptions:textRecognitionLevel:textDetectionLocales:preferringFullCaptions:");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectedAccessories(void *a1, const char *a2, ...)
{
  return _[a1 connectedAccessories];
}

id objc_msgSend_consecutiveCrashCount(void *a1, const char *a2, ...)
{
  return _[a1 consecutiveCrashCount];
}

id objc_msgSend_containedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containedIn:");
}

id objc_msgSend_containerFeedback(void *a1, const char *a2, ...)
{
  return _[a1 containerFeedback];
}

id objc_msgSend_containerOutputFeedback(void *a1, const char *a2, ...)
{
  return _[a1 containerOutputFeedback];
}

id objc_msgSend_containerType(void *a1, const char *a2, ...)
{
  return _[a1 containerType];
}

id objc_msgSend_containerTypes(void *a1, const char *a2, ...)
{
  return _[a1 containerTypes];
}

id objc_msgSend_containsActions(void *a1, const char *a2, ...)
{
  return _[a1 containsActions];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _[a1 content];
}

id objc_msgSend_contentOffset(void *a1, const char *a2, ...)
{
  return _[a1 contentOffset];
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_contextDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 contextDescriptors];
}

id objc_msgSend_contextId(void *a1, const char *a2, ...)
{
  return _[a1 contextId];
}

id objc_msgSend_contextIdForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextIdForPosition:");
}

id objc_msgSend_contextIdHostingContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextIdHostingContextId:");
}

id objc_msgSend_contextWithCommand_gesture_keyChord_resolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithCommand:gesture:keyChord:resolver:");
}

id objc_msgSend_continueSpeaking(void *a1, const char *a2, ...)
{
  return _[a1 continueSpeaking];
}

id objc_msgSend_continueSpeakingWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueSpeakingWithError:");
}

id objc_msgSend_continuousPathTimeout(void *a1, const char *a2, ...)
{
  return _[a1 continuousPathTimeout];
}

id objc_msgSend_contractionMode(void *a1, const char *a2, ...)
{
  return _[a1 contractionMode];
}

id objc_msgSend_controlCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 controlCharacterSet];
}

id objc_msgSend_controlKeyToggleSpeakingAllowed(void *a1, const char *a2, ...)
{
  return _[a1 controlKeyToggleSpeakingAllowed];
}

id objc_msgSend_convertAccessibilityFrameToScreenCoordinates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertAccessibilityFrameToScreenCoordinates:");
}

id objc_msgSend_convertChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertChannels:");
}

id objc_msgSend_convertDevicePointToZoomedPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertDevicePointToZoomedPoint:");
}

id objc_msgSend_convertFrame_fromContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFrame:fromContextId:");
}

id objc_msgSend_convertFrame_fromContextId_fromDisplayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFrame:fromContextId:fromDisplayId:");
}

id objc_msgSend_convertFrameToCursorSpace_displayID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFrameToCursorSpace:displayID:completion:");
}

id objc_msgSend_convertFramesToCursorSpace_displayID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFramesToCursorSpace:displayID:completion:");
}

id objc_msgSend_convertPath_fromContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPath:fromContextId:");
}

id objc_msgSend_convertPath_fromContextId_displayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPath:fromContextId:displayId:");
}

id objc_msgSend_convertPath_fromContextId_fromDisplayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPath:fromContextId:fromDisplayId:");
}

id objc_msgSend_convertPoint_fromContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:fromContextId:");
}

id objc_msgSend_convertPoint_toContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:toContextId:");
}

id objc_msgSend_convertRect_fromContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:fromContextId:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyCachedAttributes(void *a1, const char *a2, ...)
{
  return _[a1 copyCachedAttributes];
}

id objc_msgSend_copyStringToPasteboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyStringToPasteboard:");
}

id objc_msgSend_copyWithCache(void *a1, const char *a2, ...)
{
  return _[a1 copyWithCache];
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_coreAnimationMainDisplay(void *a1, const char *a2, ...)
{
  return _[a1 coreAnimationMainDisplay];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countElementsMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countElementsMatchingBlock:");
}

id objc_msgSend_crashloopTimer(void *a1, const char *a2, ...)
{
  return _[a1 crashloopTimer];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createRequest(void *a1, const char *a2, ...)
{
  return _[a1 createRequest];
}

id objc_msgSend_creatorHIDEvent(void *a1, const char *a2, ...)
{
  return _[a1 creatorHIDEvent];
}

id objc_msgSend_currentAllPunctuationTable(void *a1, const char *a2, ...)
{
  return _[a1 currentAllPunctuationTable];
}

id objc_msgSend_currentAlternateSuggestion(void *a1, const char *a2, ...)
{
  return _[a1 currentAlternateSuggestion];
}

id objc_msgSend_currentApplications(void *a1, const char *a2, ...)
{
  return _[a1 currentApplications];
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentCallState(void *a1, const char *a2, ...)
{
  return _[a1 currentCallState];
}

id objc_msgSend_currentCandidateAnalysisString(void *a1, const char *a2, ...)
{
  return _[a1 currentCandidateAnalysisString];
}

id objc_msgSend_currentCandidateSurfaceString(void *a1, const char *a2, ...)
{
  return _[a1 currentCandidateSurfaceString];
}

id objc_msgSend_currentChartElement(void *a1, const char *a2, ...)
{
  return _[a1 currentChartElement];
}

id objc_msgSend_currentContextDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 currentContextDescriptors];
}

id objc_msgSend_currentCursorContextID(void *a1, const char *a2, ...)
{
  return _[a1 currentCursorContextID];
}

id objc_msgSend_currentCursorDisplayID(void *a1, const char *a2, ...)
{
  return _[a1 currentCursorDisplayID];
}

id objc_msgSend_currentCursorFrame(void *a1, const char *a2, ...)
{
  return _[a1 currentCursorFrame];
}

id objc_msgSend_currentCursorPath(void *a1, const char *a2, ...)
{
  return _[a1 currentCursorPath];
}

id objc_msgSend_currentDefaultBrailleAlertTimeout(void *a1, const char *a2, ...)
{
  return _[a1 currentDefaultBrailleAlertTimeout];
}

id objc_msgSend_currentDeviceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 currentDeviceOrientation];
}

id objc_msgSend_currentElement(void *a1, const char *a2, ...)
{
  return _[a1 currentElement];
}

id objc_msgSend_currentElementAllowsDirectTouch(void *a1, const char *a2, ...)
{
  return _[a1 currentElementAllowsDirectTouch];
}

id objc_msgSend_currentElementAttributes(void *a1, const char *a2, ...)
{
  return _[a1 currentElementAttributes];
}

id objc_msgSend_currentElementChanged(void *a1, const char *a2, ...)
{
  return _[a1 currentElementChanged];
}

id objc_msgSend_currentElementChangedCallback(void *a1, const char *a2, ...)
{
  return _[a1 currentElementChangedCallback];
}

id objc_msgSend_currentElementDidUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentElementDidUpdate:");
}

id objc_msgSend_currentElementRotorString(void *a1, const char *a2, ...)
{
  return _[a1 currentElementRotorString];
}

id objc_msgSend_currentExplorerElement(void *a1, const char *a2, ...)
{
  return _[a1 currentExplorerElement];
}

id objc_msgSend_currentFingerCount(void *a1, const char *a2, ...)
{
  return _[a1 currentFingerCount];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentHardwareKeyboardLayout(void *a1, const char *a2, ...)
{
  return _[a1 currentHardwareKeyboardLayout];
}

id objc_msgSend_currentInputMode(void *a1, const char *a2, ...)
{
  return _[a1 currentInputMode];
}

id objc_msgSend_currentInputString(void *a1, const char *a2, ...)
{
  return _[a1 currentInputString];
}

id objc_msgSend_currentIntersectionInformation(void *a1, const char *a2, ...)
{
  return _[a1 currentIntersectionInformation];
}

id objc_msgSend_currentKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return _[a1 currentKnownNetworkProfile];
}

id objc_msgSend_currentLanguageMap(void *a1, const char *a2, ...)
{
  return _[a1 currentLanguageMap];
}

id objc_msgSend_currentLineFrame(void *a1, const char *a2, ...)
{
  return _[a1 currentLineFrame];
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _[a1 currentLocale];
}

id objc_msgSend_currentLocalization(void *a1, const char *a2, ...)
{
  return _[a1 currentLocalization];
}

id objc_msgSend_currentMap(void *a1, const char *a2, ...)
{
  return _[a1 currentMap];
}

id objc_msgSend_currentNonePunctuationTable(void *a1, const char *a2, ...)
{
  return _[a1 currentNonePunctuationTable];
}

id objc_msgSend_currentOpaqueElement(void *a1, const char *a2, ...)
{
  return _[a1 currentOpaqueElement];
}

id objc_msgSend_currentPlaybackPosition(void *a1, const char *a2, ...)
{
  return _[a1 currentPlaybackPosition];
}

id objc_msgSend_currentQueue(void *a1, const char *a2, ...)
{
  return _[a1 currentQueue];
}

id objc_msgSend_currentReadAllContext(void *a1, const char *a2, ...)
{
  return _[a1 currentReadAllContext];
}

id objc_msgSend_currentRequest(void *a1, const char *a2, ...)
{
  return _[a1 currentRequest];
}

id objc_msgSend_currentRotorDetectionMode(void *a1, const char *a2, ...)
{
  return _[a1 currentRotorDetectionMode];
}

id objc_msgSend_currentRotorElement(void *a1, const char *a2, ...)
{
  return _[a1 currentRotorElement];
}

id objc_msgSend_currentRotorHint(void *a1, const char *a2, ...)
{
  return _[a1 currentRotorHint];
}

id objc_msgSend_currentRotorString(void *a1, const char *a2, ...)
{
  return _[a1 currentRotorString];
}

id objc_msgSend_currentRotorType(void *a1, const char *a2, ...)
{
  return _[a1 currentRotorType];
}

id objc_msgSend_currentRoute(void *a1, const char *a2, ...)
{
  return _[a1 currentRoute];
}

id objc_msgSend_currentRouteName(void *a1, const char *a2, ...)
{
  return _[a1 currentRouteName];
}

id objc_msgSend_currentSearchValue(void *a1, const char *a2, ...)
{
  return _[a1 currentSearchValue];
}

id objc_msgSend_currentSelectionRotorType(void *a1, const char *a2, ...)
{
  return _[a1 currentSelectionRotorType];
}

id objc_msgSend_currentSimilarTraits(void *a1, const char *a2, ...)
{
  return _[a1 currentSimilarTraits];
}

id objc_msgSend_currentSoftwareKeyboardLanguage(void *a1, const char *a2, ...)
{
  return _[a1 currentSoftwareKeyboardLanguage];
}

id objc_msgSend_currentSoftwareKeyboardLayout(void *a1, const char *a2, ...)
{
  return _[a1 currentSoftwareKeyboardLayout];
}

id objc_msgSend_currentSomePunctuationTable(void *a1, const char *a2, ...)
{
  return _[a1 currentSomePunctuationTable];
}

id objc_msgSend_currentSonificationPlaybackBounds(void *a1, const char *a2, ...)
{
  return _[a1 currentSonificationPlaybackBounds];
}

id objc_msgSend_currentSpellingSuggestion(void *a1, const char *a2, ...)
{
  return _[a1 currentSpellingSuggestion];
}

id objc_msgSend_currentStatus(void *a1, const char *a2, ...)
{
  return _[a1 currentStatus];
}

id objc_msgSend_currentString(void *a1, const char *a2, ...)
{
  return _[a1 currentString];
}

id objc_msgSend_currentSystemInputMode(void *a1, const char *a2, ...)
{
  return _[a1 currentSystemInputMode];
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return _[a1 currentThread];
}

id objc_msgSend_currentVisualRotorString(void *a1, const char *a2, ...)
{
  return _[a1 currentVisualRotorString];
}

id objc_msgSend_cursor(void *a1, const char *a2, ...)
{
  return _[a1 cursor];
}

id objc_msgSend_customAction(void *a1, const char *a2, ...)
{
  return _[a1 customAction];
}

id objc_msgSend_customActionGroupIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 customActionGroupIdentifier];
}

id objc_msgSend_customActionIndex(void *a1, const char *a2, ...)
{
  return _[a1 customActionIndex];
}

id objc_msgSend_customActionsAreDragDrop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customActionsAreDragDrop:");
}

id objc_msgSend_customActionsAreValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customActionsAreValid:");
}

id objc_msgSend_customContent(void *a1, const char *a2, ...)
{
  return _[a1 customContent];
}

id objc_msgSend_customContentImportance(void *a1, const char *a2, ...)
{
  return _[a1 customContentImportance];
}

id objc_msgSend_customContentWithLabel_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customContentWithLabel:value:");
}

id objc_msgSend_customPronunciationSubstitutions(void *a1, const char *a2, ...)
{
  return _[a1 customPronunciationSubstitutions];
}

id objc_msgSend_customPublicRotorDictionaryForRotorId_startRange_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorDictionaryForRotorId:startRange:direction:");
}

id objc_msgSend_customPublicRotorForSystemType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorForSystemType:");
}

id objc_msgSend_customPublicRotorIsVisibleInTouchRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorIsVisibleInTouchRotor:");
}

id objc_msgSend_customPublicRotorLinkCountForRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorLinkCountForRotor:");
}

id objc_msgSend_customPublicRotorName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorName:");
}

id objc_msgSend_customPublicRotorResultWithItem_startElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorResultWithItem:startElement:");
}

id objc_msgSend_customPublicRotors(void *a1, const char *a2, ...)
{
  return _[a1 customPublicRotors];
}

id objc_msgSend_customRotorActions(void *a1, const char *a2, ...)
{
  return _[a1 customRotorActions];
}

id objc_msgSend_customRotorActionsEqual_otherActions_ignoreDragItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customRotorActionsEqual:otherActions:ignoreDragItems:");
}

id objc_msgSend_dataDetectorURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataDetectorURL:");
}

id objc_msgSend_dataRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dataRepresentation];
}

id objc_msgSend_dataSeriesElement(void *a1, const char *a2, ...)
{
  return _[a1 dataSeriesElement];
}

id objc_msgSend_dataSeriesMaximumValueForAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSeriesMaximumValueForAxis:");
}

id objc_msgSend_dataSeriesMinimumValueForAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSeriesMinimumValueForAxis:");
}

id objc_msgSend_dataSeriesTitleForAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSeriesTitleForAxis:");
}

id objc_msgSend_dataSeriesUnitsLabelForAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSeriesUnitsLabelForAxis:");
}

id objc_msgSend_dataSeriesXAxisValueDescriptionForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSeriesXAxisValueDescriptionForPosition:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateToResumeRequests(void *a1, const char *a2, ...)
{
  return _[a1 dateToResumeRequests];
}

id objc_msgSend_dateToResumeSounds(void *a1, const char *a2, ...)
{
  return _[a1 dateToResumeSounds];
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_deactivate(void *a1, const char *a2, ...)
{
  return _[a1 deactivate];
}

id objc_msgSend_deactivateGesturedTextInputIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateGesturedTextInputIfNeeded:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 decimalDigitCharacterSet];
}

id objc_msgSend_decreaseTrackingDetail(void *a1, const char *a2, ...)
{
  return _[a1 decreaseTrackingDetail];
}

id objc_msgSend_decreaseWebSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decreaseWebSelection:");
}

id objc_msgSend_decrement_userInitiated_eventOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decrement:userInitiated:eventOrigin:");
}

id objc_msgSend_decrementAction(void *a1, const char *a2, ...)
{
  return _[a1 decrementAction];
}

id objc_msgSend_deepCopyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deepCopyWithZone:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultConnection(void *a1, const char *a2, ...)
{
  return _[a1 defaultConnection];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultPort(void *a1, const char *a2, ...)
{
  return _[a1 defaultPort];
}

id objc_msgSend_defaultPortChannels(void *a1, const char *a2, ...)
{
  return _[a1 defaultPortChannels];
}

id objc_msgSend_defaultPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 defaultPunctuationGroup];
}

id objc_msgSend_defaultRouteDescription(void *a1, const char *a2, ...)
{
  return _[a1 defaultRouteDescription];
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return _[a1 defaultStore];
}

id objc_msgSend_defaultTableForLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTableForLocale:");
}

id objc_msgSend_defaultVoiceForLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultVoiceForLanguage:");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_definedLabel(void *a1, const char *a2, ...)
{
  return _[a1 definedLabel];
}

id objc_msgSend_delayBeforeUpdatingOnActivation(void *a1, const char *a2, ...)
{
  return _[a1 delayBeforeUpdatingOnActivation];
}

id objc_msgSend_delayedNotificationAnnouncementRequest(void *a1, const char *a2, ...)
{
  return _[a1 delayedNotificationAnnouncementRequest];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteCharacterAtCursorWithSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCharacterAtCursorWithSource:");
}

id objc_msgSend_deleteCharactersInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCharactersInRange:");
}

id objc_msgSend_deliveredNotifications(void *a1, const char *a2, ...)
{
  return _[a1 deliveredNotifications];
}

id objc_msgSend_denormalizedEventRepresentation_descale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "denormalizedEventRepresentation:descale:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionOfWord_forLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionOfWord:forLanguage:");
}

id objc_msgSend_detectedFeatureDescriptionWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detectedFeatureDescriptionWithOptions:");
}

id objc_msgSend_detectedTextDescription(void *a1, const char *a2, ...)
{
  return _[a1 detectedTextDescription];
}

id objc_msgSend_detectionModeRotorActive(void *a1, const char *a2, ...)
{
  return _[a1 detectionModeRotorActive];
}

id objc_msgSend_determineActivityForAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineActivityForAction:");
}

id objc_msgSend_determineActivityForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineActivityForElement:");
}

id objc_msgSend_determineFullImageDescriptionsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineFullImageDescriptionsEnabled:");
}

id objc_msgSend_determineLanguageForAction_overrideLanguage_targetLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineLanguageForAction:overrideLanguage:targetLanguage:");
}

id objc_msgSend_determineLanguageForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineLanguageForEvent:");
}

id objc_msgSend_determineOutputMutedForActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineOutputMutedForActivity:");
}

id objc_msgSend_determineSceneDetectionsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineSceneDetectionsEnabled:");
}

id objc_msgSend_deviceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 deviceOrientation];
}

id objc_msgSend_dialectForLanguageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dialectForLanguageID:");
}

id objc_msgSend_dialectsThatCanSpeakCharacter_overridePreferredLanguages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dialectsThatCanSpeakCharacter:overridePreferredLanguages:");
}

id objc_msgSend_dialectsThatCanSpeakString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dialectsThatCanSpeakString:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didAnnounceBrailleTypingProperties(void *a1, const char *a2, ...)
{
  return _[a1 didAnnounceBrailleTypingProperties];
}

id objc_msgSend_didAnnounceExplorationMode(void *a1, const char *a2, ...)
{
  return _[a1 didAnnounceExplorationMode];
}

id objc_msgSend_didCacheSideAppDividerElement(void *a1, const char *a2, ...)
{
  return _[a1 didCacheSideAppDividerElement];
}

id objc_msgSend_didEnterInvalidGesture(void *a1, const char *a2, ...)
{
  return _[a1 didEnterInvalidGesture];
}

id objc_msgSend_didFallThruToDevice(void *a1, const char *a2, ...)
{
  return _[a1 didFallThruToDevice];
}

id objc_msgSend_didFinishBatchPeeking(void *a1, const char *a2, ...)
{
  return _[a1 didFinishBatchPeeking];
}

id objc_msgSend_didInputBackspace(void *a1, const char *a2, ...)
{
  return _[a1 didInputBackspace];
}

id objc_msgSend_didInputSpace(void *a1, const char *a2, ...)
{
  return _[a1 didInputSpace];
}

id objc_msgSend_didInputWordBackspace(void *a1, const char *a2, ...)
{
  return _[a1 didInputWordBackspace];
}

id objc_msgSend_didMoveFingersTooFarForInput(void *a1, const char *a2, ...)
{
  return _[a1 didMoveFingersTooFarForInput];
}

id objc_msgSend_didPostKeyboardEventsWithCharacters_originalCharacters_modifiers_keyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPostKeyboardEventsWithCharacters:originalCharacters:modifiers:keyCode:");
}

id objc_msgSend_didPressReturnKey(void *a1, const char *a2, ...)
{
  return _[a1 didPressReturnKey];
}

id objc_msgSend_didReceiveForceUpdateChangeToken(void *a1, const char *a2, ...)
{
  return _[a1 didReceiveForceUpdateChangeToken];
}

id objc_msgSend_didRegisterForPointerEvents(void *a1, const char *a2, ...)
{
  return _[a1 didRegisterForPointerEvents];
}

id objc_msgSend_didRetrieveAllEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRetrieveAllEntries:");
}

id objc_msgSend_didSearchForOpaqueElement(void *a1, const char *a2, ...)
{
  return _[a1 didSearchForOpaqueElement];
}

id objc_msgSend_didSelectCandidateWithSurfaceString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSelectCandidateWithSurfaceString:");
}

id objc_msgSend_didSelectCurrentCandidate(void *a1, const char *a2, ...)
{
  return _[a1 didSelectCurrentCandidate];
}

id objc_msgSend_didSelectItem(void *a1, const char *a2, ...)
{
  return _[a1 didSelectItem];
}

id objc_msgSend_didStartFromCrashState(void *a1, const char *a2, ...)
{
  return _[a1 didStartFromCrashState];
}

id objc_msgSend_didStartFullGesture(void *a1, const char *a2, ...)
{
  return _[a1 didStartFullGesture];
}

id objc_msgSend_differenceAspectMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "differenceAspectMask:");
}

id objc_msgSend_directInteractionElementsUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directInteractionElementsUpdated:");
}

id objc_msgSend_directInteractionGestureInProgress(void *a1, const char *a2, ...)
{
  return _[a1 directInteractionGestureInProgress];
}

id objc_msgSend_directInteractionKeyboardManager(void *a1, const char *a2, ...)
{
  return _[a1 directInteractionKeyboardManager];
}

id objc_msgSend_directInteractionModeStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directInteractionModeStatus:");
}

id objc_msgSend_directParent(void *a1, const char *a2, ...)
{
  return _[a1 directParent];
}

id objc_msgSend_directTouchApps(void *a1, const char *a2, ...)
{
  return _[a1 directTouchApps];
}

id objc_msgSend_directTouchElementsPresent(void *a1, const char *a2, ...)
{
  return _[a1 directTouchElementsPresent];
}

id objc_msgSend_directTouchModeHandledEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directTouchModeHandledEvent:");
}

id objc_msgSend_directTouchOptions(void *a1, const char *a2, ...)
{
  return _[a1 directTouchOptions];
}

id objc_msgSend_direction(void *a1, const char *a2, ...)
{
  return _[a1 direction];
}

id objc_msgSend_directionalSlope(void *a1, const char *a2, ...)
{
  return _[a1 directionalSlope];
}

id objc_msgSend_disableAudioSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableAudioSession:");
}

id objc_msgSend_disableAudioSession_userDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableAudioSession:userDelay:");
}

id objc_msgSend_disableIdleTimerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 disableIdleTimerAssertion];
}

id objc_msgSend_disableOutput(void *a1, const char *a2, ...)
{
  return _[a1 disableOutput];
}

id objc_msgSend_disableVoiceOverSettingOnStop(void *a1, const char *a2, ...)
{
  return _[a1 disableVoiceOverSettingOnStop];
}

id objc_msgSend_dismissAlternativeKeyboardPicker(void *a1, const char *a2, ...)
{
  return _[a1 dismissAlternativeKeyboardPicker];
}

id objc_msgSend_dismissBuddyIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 dismissBuddyIfNecessary];
}

id objc_msgSend_dismissDetectionUI(void *a1, const char *a2, ...)
{
  return _[a1 dismissDetectionUI];
}

id objc_msgSend_dismissShelfSwitcher(void *a1, const char *a2, ...)
{
  return _[a1 dismissShelfSwitcher];
}

id objc_msgSend_dispatchAfterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchAfterDelay:");
}

id objc_msgSend_dispatchAfterDelay_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchAfterDelay:withBlock:");
}

id objc_msgSend_dispatchAfterDelay_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchAfterDelay:withObject:");
}

id objc_msgSend_dispatchCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchCommand:");
}

id objc_msgSend_dispatchCommand_bypassGesturedInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchCommand:bypassGesturedInput:");
}

id objc_msgSend_dispatchKeyboardEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchKeyboardEvent:");
}

id objc_msgSend_dispatchRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchRequest:");
}

id objc_msgSend_displayID(void *a1, const char *a2, ...)
{
  return _[a1 displayID];
}

id objc_msgSend_displayId(void *a1, const char *a2, ...)
{
  return _[a1 displayId];
}

id objc_msgSend_displayIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 displayIfNeeded];
}

id objc_msgSend_displayManager(void *a1, const char *a2, ...)
{
  return _[a1 displayManager];
}

id objc_msgSend_displayMode(void *a1, const char *a2, ...)
{
  return _[a1 displayMode];
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _[a1 displayName];
}

id objc_msgSend_displayToken(void *a1, const char *a2, ...)
{
  return _[a1 displayToken];
}

id objc_msgSend_displayValue(void *a1, const char *a2, ...)
{
  return _[a1 displayValue];
}

id objc_msgSend_distance(void *a1, const char *a2, ...)
{
  return _[a1 distance];
}

id objc_msgSend_distanceBetweenStrings_and_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceBetweenStrings:and:");
}

id objc_msgSend_distanceToEndOfRoad_withDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceToEndOfRoad:withDirection:");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _[a1 distantFuture];
}

id objc_msgSend_doNotTranslateWords(void *a1, const char *a2, ...)
{
  return _[a1 doNotTranslateWords];
}

id objc_msgSend_doesHaveAllTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesHaveAllTraits:");
}

id objc_msgSend_doesHaveTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesHaveTraits:");
}

id objc_msgSend_doesHaveTraitsForGesturedTextInput(void *a1, const char *a2, ...)
{
  return _[a1 doesHaveTraitsForGesturedTextInput];
}

id objc_msgSend_doesNotInterrupt(void *a1, const char *a2, ...)
{
  return _[a1 doesNotInterrupt];
}

id objc_msgSend_dollarCodeDescription(void *a1, const char *a2, ...)
{
  return _[a1 dollarCodeDescription];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_dotArrayReversed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dotArrayReversed:");
}

id objc_msgSend_dotNumberPositions(void *a1, const char *a2, ...)
{
  return _[a1 dotNumberPositions];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadAssets_successStartBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadAssets:successStartBlock:");
}

id objc_msgSend_dragCancelled(void *a1, const char *a2, ...)
{
  return _[a1 dragCancelled];
}

id objc_msgSend_dragSessionActive(void *a1, const char *a2, ...)
{
  return _[a1 dragSessionActive];
}

id objc_msgSend_dragSessionStarted(void *a1, const char *a2, ...)
{
  return _[a1 dragSessionStarted];
}

id objc_msgSend_dragSourceDescriptorDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 dragSourceDescriptorDictionaries];
}

id objc_msgSend_drawInRect_withAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:withAttributes:");
}

id objc_msgSend_driverConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 driverConfiguration];
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return _[a1 drop];
}

id objc_msgSend_dropDrag(void *a1, const char *a2, ...)
{
  return _[a1 dropDrag];
}

id objc_msgSend_dropPointDescriptorDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 dropPointDescriptorDictionaries];
}

id objc_msgSend_duckingTemporarilyDisabled(void *a1, const char *a2, ...)
{
  return _[a1 duckingTemporarilyDisabled];
}

id objc_msgSend_dynamicReplacement(void *a1, const char *a2, ...)
{
  return _[a1 dynamicReplacement];
}

id objc_msgSend_eaQueue(void *a1, const char *a2, ...)
{
  return _[a1 eaQueue];
}

id objc_msgSend_effects(void *a1, const char *a2, ...)
{
  return _[a1 effects];
}

id objc_msgSend_element(void *a1, const char *a2, ...)
{
  return _[a1 element];
}

id objc_msgSend_elementActsAsTitleElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementActsAsTitleElement:");
}

id objc_msgSend_elementAtPointIntercept(void *a1, const char *a2, ...)
{
  return _[a1 elementAtPointIntercept];
}

id objc_msgSend_elementAtRow_andColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementAtRow:andColumn:");
}

id objc_msgSend_elementCommunity(void *a1, const char *a2, ...)
{
  return _[a1 elementCommunity];
}

id objc_msgSend_elementCommunityIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 elementCommunityIdentifier];
}

id objc_msgSend_elementEligibleToFindTitleElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementEligibleToFindTitleElement:");
}

id objc_msgSend_elementFetchFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementFetchFound:");
}

id objc_msgSend_elementFetchFoundDirectTouchElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementFetchFoundDirectTouchElements:");
}

id objc_msgSend_elementFetcher(void *a1, const char *a2, ...)
{
  return _[a1 elementFetcher];
}

id objc_msgSend_elementForAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementForAttribute:");
}

id objc_msgSend_elementForGesturedTextInput(void *a1, const char *a2, ...)
{
  return _[a1 elementForGesturedTextInput];
}

id objc_msgSend_elementForParameterizedAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementForParameterizedAttribute:parameter:");
}

id objc_msgSend_elementForTextMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementForTextMarker:");
}

id objc_msgSend_elementFrameLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementFrameLocation:");
}

id objc_msgSend_elementGeneration(void *a1, const char *a2, ...)
{
  return _[a1 elementGeneration];
}

id objc_msgSend_elementHeadersForOutput(void *a1, const char *a2, ...)
{
  return _[a1 elementHeadersForOutput];
}

id objc_msgSend_elementIsDescendant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementIsDescendant:");
}

id objc_msgSend_elementManager(void *a1, const char *a2, ...)
{
  return _[a1 elementManager];
}

id objc_msgSend_elementManagerHandledEventCallback(void *a1, const char *a2, ...)
{
  return _[a1 elementManagerHandledEventCallback];
}

id objc_msgSend_elementNeedsAdditionalDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementNeedsAdditionalDescription:");
}

id objc_msgSend_elementOnSameLine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementOnSameLine:");
}

id objc_msgSend_elementRotor(void *a1, const char *a2, ...)
{
  return _[a1 elementRotor];
}

id objc_msgSend_elementSetCallback(void *a1, const char *a2, ...)
{
  return _[a1 elementSetCallback];
}

id objc_msgSend_elementStoredUserLabel(void *a1, const char *a2, ...)
{
  return _[a1 elementStoredUserLabel];
}

id objc_msgSend_elementVisibilityAffectsLayout(void *a1, const char *a2, ...)
{
  return _[a1 elementVisibilityAffectsLayout];
}

id objc_msgSend_elementWithUIElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementWithUIElement:");
}

id objc_msgSend_elementsCounted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsCounted:");
}

id objc_msgSend_elementsDidChangeOnLastUpdate(void *a1, const char *a2, ...)
{
  return _[a1 elementsDidChangeOnLastUpdate];
}

id objc_msgSend_elementsForAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsForAttribute:");
}

id objc_msgSend_elementsForAttribute_withParameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsForAttribute:withParameter:");
}

id objc_msgSend_elementsInDirection_withCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsInDirection:withCount:");
}

id objc_msgSend_elementsRetrieved_finished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsRetrieved:finished:");
}

id objc_msgSend_emojiFeedback(void *a1, const char *a2, ...)
{
  return _[a1 emojiFeedback];
}

id objc_msgSend_emojiRangeFromString_withSearchRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emojiRangeFromString:withSearchRange:");
}

id objc_msgSend_emoticonReplacements(void *a1, const char *a2, ...)
{
  return _[a1 emoticonReplacements];
}

id objc_msgSend_enableAudioSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableAudioSession:");
}

id objc_msgSend_enableCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableCache:");
}

id objc_msgSend_enableVoiceOverCaptions(void *a1, const char *a2, ...)
{
  return _[a1 enableVoiceOverCaptions];
}

id objc_msgSend_enableWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableWithCompletion:");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _[a1 enabled];
}

id objc_msgSend_enabledLiveRecognitionModes(void *a1, const char *a2, ...)
{
  return _[a1 enabledLiveRecognitionModes];
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _[a1 end];
}

id objc_msgSend_endCurrentStroke(void *a1, const char *a2, ...)
{
  return _[a1 endCurrentStroke];
}

id objc_msgSend_endExploration(void *a1, const char *a2, ...)
{
  return _[a1 endExploration];
}

id objc_msgSend_endHandlingHIDEventsForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endHandlingHIDEventsForReason:");
}

id objc_msgSend_endLiveModeSession(void *a1, const char *a2, ...)
{
  return _[a1 endLiveModeSession];
}

id objc_msgSend_endLocation(void *a1, const char *a2, ...)
{
  return _[a1 endLocation];
}

id objc_msgSend_endScrubbingSession(void *a1, const char *a2, ...)
{
  return _[a1 endScrubbingSession];
}

id objc_msgSend_endStroke(void *a1, const char *a2, ...)
{
  return _[a1 endStroke];
}

id objc_msgSend_endTextSearchSession(void *a1, const char *a2, ...)
{
  return _[a1 endTextSearchSession];
}

id objc_msgSend_engine(void *a1, const char *a2, ...)
{
  return _[a1 engine];
}

id objc_msgSend_engineAccessQueue(void *a1, const char *a2, ...)
{
  return _[a1 engineAccessQueue];
}

id objc_msgSend_entries(void *a1, const char *a2, ...)
{
  return _[a1 entries];
}

id objc_msgSend_enumerateAttribute_inRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:");
}

id objc_msgSend_enumerateAttributesInRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAttributesInRange:options:usingBlock:");
}

id objc_msgSend_enumerateAttributesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAttributesUsingBlock:");
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateIndexesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateMatchesInString_options_range_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateMatchesInString:options:range:usingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_enumerateRangesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRangesUsingBlock:");
}

id objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSubstringsInRange:options:usingBlock:");
}

id objc_msgSend_enumeratorWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorWithOptions:");
}

id objc_msgSend_equivalenceTag(void *a1, const char *a2, ...)
{
  return _[a1 equivalenceTag];
}

id objc_msgSend_errorMessageElements(void *a1, const char *a2, ...)
{
  return _[a1 errorMessageElements];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_eventFactoryDidBeginSplitGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventFactoryDidBeginSplitGesture:");
}

id objc_msgSend_eventForKeyChord_resolver_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventForKeyChord:resolver:info:");
}

id objc_msgSend_eventForTouchGesture_resolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventForTouchGesture:resolver:");
}

id objc_msgSend_eventForTouchGesture_resolver_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventForTouchGesture:resolver:info:");
}

id objc_msgSend_eventIsSystemEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventIsSystemEvent:");
}

id objc_msgSend_eventOrigin(void *a1, const char *a2, ...)
{
  return _[a1 eventOrigin];
}

id objc_msgSend_eventProcessor(void *a1, const char *a2, ...)
{
  return _[a1 eventProcessor];
}

id objc_msgSend_eventQueue(void *a1, const char *a2, ...)
{
  return _[a1 eventQueue];
}

id objc_msgSend_eventRecord(void *a1, const char *a2, ...)
{
  return _[a1 eventRecord];
}

id objc_msgSend_eventRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 eventRepresentation];
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return _[a1 eventType];
}

id objc_msgSend_exchangeObjectAtIndex_withObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exchangeObjectAtIndex:withObjectAtIndex:");
}

id objc_msgSend_exitCurrentDisplayMode(void *a1, const char *a2, ...)
{
  return _[a1 exitCurrentDisplayMode];
}

id objc_msgSend_expandMathEquation(void *a1, const char *a2, ...)
{
  return _[a1 expandMathEquation];
}

id objc_msgSend_expandedStatus(void *a1, const char *a2, ...)
{
  return _[a1 expandedStatus];
}

id objc_msgSend_expandedStatusTogglesOnActivate(void *a1, const char *a2, ...)
{
  return _[a1 expandedStatusTogglesOnActivate];
}

id objc_msgSend_expandedTextValue(void *a1, const char *a2, ...)
{
  return _[a1 expandedTextValue];
}

id objc_msgSend_explorationIsActive(void *a1, const char *a2, ...)
{
  return _[a1 explorationIsActive];
}

id objc_msgSend_explorationIsPending(void *a1, const char *a2, ...)
{
  return _[a1 explorationIsPending];
}

id objc_msgSend_explorationSegmentsForRoadsWithAngles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "explorationSegmentsForRoadsWithAngles:");
}

id objc_msgSend_exploreFocusAffectsNativeFocus(void *a1, const char *a2, ...)
{
  return _[a1 exploreFocusAffectsNativeFocus];
}

id objc_msgSend_explorerElementManager(void *a1, const char *a2, ...)
{
  return _[a1 explorerElementManager];
}

id objc_msgSend_explorerElementManager_didFinishReadAll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "explorerElementManager:didFinishReadAll:");
}

id objc_msgSend_explorerElementManager_didSetExplorerElementFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "explorerElementManager:didSetExplorerElementFocus:");
}

id objc_msgSend_explorerElementManager_willReadElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "explorerElementManager:willReadElement:");
}

id objc_msgSend_explorerElements(void *a1, const char *a2, ...)
{
  return _[a1 explorerElements];
}

id objc_msgSend_externalAudioRouteIsHearingAid(void *a1, const char *a2, ...)
{
  return _[a1 externalAudioRouteIsHearingAid];
}

id objc_msgSend_externalAudioRouteSelected(void *a1, const char *a2, ...)
{
  return _[a1 externalAudioRouteSelected];
}

id objc_msgSend_externalAudioRoutesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 externalAudioRoutesAvailable];
}

id objc_msgSend_externalAudioRoutesContainHDMIRoute(void *a1, const char *a2, ...)
{
  return _[a1 externalAudioRoutesContainHDMIRoute];
}

id objc_msgSend_externalDeviceEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "externalDeviceEventWithCommand:info:");
}

id objc_msgSend_fallbackLocalOpaqueParent(void *a1, const char *a2, ...)
{
  return _[a1 fallbackLocalOpaqueParent];
}

id objc_msgSend_fallbackOpaqueParent(void *a1, const char *a2, ...)
{
  return _[a1 fallbackOpaqueParent];
}

id objc_msgSend_fbSceneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 fbSceneIdentifier];
}

id objc_msgSend_featureType(void *a1, const char *a2, ...)
{
  return _[a1 featureType];
}

id objc_msgSend_features(void *a1, const char *a2, ...)
{
  return _[a1 features];
}

id objc_msgSend_feet(void *a1, const char *a2, ...)
{
  return _[a1 feet];
}

id objc_msgSend_fetchElementsFrom_inDirection_count_scroll_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchElementsFrom:inDirection:count:scroll:block:");
}

id objc_msgSend_fetchFoundData_forceUpdate_direction_generation_range_searchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFoundData:forceUpdate:direction:generation:range:searchType:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileSystemPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemPunctuationGroup];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_filter(void *a1, const char *a2, ...)
{
  return _[a1 filter];
}

id objc_msgSend_filterTraitsByPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterTraitsByPriority:");
}

id objc_msgSend_filteredEntries(void *a1, const char *a2, ...)
{
  return _[a1 filteredEntries];
}

id objc_msgSend_findLocationOfDifferenceInOldString_withNewString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findLocationOfDifferenceInOldString:withNewString:");
}

id objc_msgSend_findSearchResult_withSearchText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findSearchResult:withSearchText:");
}

id objc_msgSend_fingerCount(void *a1, const char *a2, ...)
{
  return _[a1 fingerCount];
}

id objc_msgSend_fingerPosition(void *a1, const char *a2, ...)
{
  return _[a1 fingerPosition];
}

id objc_msgSend_fingers(void *a1, const char *a2, ...)
{
  return _[a1 fingers];
}

id objc_msgSend_fingersFromTouchCommands(void *a1, const char *a2, ...)
{
  return _[a1 fingersFromTouchCommands];
}

id objc_msgSend_finishedOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedOutputRequest:");
}

id objc_msgSend_finishedSuccessfully(void *a1, const char *a2, ...)
{
  return _[a1 finishedSuccessfully];
}

id objc_msgSend_firstContainedElement(void *a1, const char *a2, ...)
{
  return _[a1 firstContainedElement];
}

id objc_msgSend_firstElementInApplication(void *a1, const char *a2, ...)
{
  return _[a1 firstElementInApplication];
}

id objc_msgSend_firstElementInApplicationForFocus(void *a1, const char *a2, ...)
{
  return _[a1 firstElementInApplicationForFocus];
}

id objc_msgSend_firstElementInApplicationForReadFromTop(void *a1, const char *a2, ...)
{
  return _[a1 firstElementInApplicationForReadFromTop];
}

id objc_msgSend_firstElementInStatusBar(void *a1, const char *a2, ...)
{
  return _[a1 firstElementInStatusBar];
}

id objc_msgSend_firstFingerAltitude(void *a1, const char *a2, ...)
{
  return _[a1 firstFingerAltitude];
}

id objc_msgSend_firstFingerAzimuth(void *a1, const char *a2, ...)
{
  return _[a1 firstFingerAzimuth];
}

id objc_msgSend_firstFingerPressure(void *a1, const char *a2, ...)
{
  return _[a1 firstFingerPressure];
}

id objc_msgSend_firstIndex(void *a1, const char *a2, ...)
{
  return _[a1 firstIndex];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_firstPath(void *a1, const char *a2, ...)
{
  return _[a1 firstPath];
}

id objc_msgSend_firstResponderDidUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstResponderDidUpdate:");
}

id objc_msgSend_firstResponderElement(void *a1, const char *a2, ...)
{
  return _[a1 firstResponderElement];
}

id objc_msgSend_firstResponderElementForFocus(void *a1, const char *a2, ...)
{
  return _[a1 firstResponderElementForFocus];
}

id objc_msgSend_firstResponderElementWithoutCache(void *a1, const char *a2, ...)
{
  return _[a1 firstResponderElementWithoutCache];
}

id objc_msgSend_firstTrackedAppInGesture(void *a1, const char *a2, ...)
{
  return _[a1 firstTrackedAppInGesture];
}

id objc_msgSend_firstVisibleElementInList(void *a1, const char *a2, ...)
{
  return _[a1 firstVisibleElementInList];
}

id objc_msgSend_firstWebElement(void *a1, const char *a2, ...)
{
  return _[a1 firstWebElement];
}

id objc_msgSend_flashBrailleInsertedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flashBrailleInsertedText:");
}

id objc_msgSend_flashlightLevel(void *a1, const char *a2, ...)
{
  return _[a1 flashlightLevel];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_flowToElements(void *a1, const char *a2, ...)
{
  return _[a1 flowToElements];
}

id objc_msgSend_focus(void *a1, const char *a2, ...)
{
  return _[a1 focus];
}

id objc_msgSend_focusElement(void *a1, const char *a2, ...)
{
  return _[a1 focusElement];
}

id objc_msgSend_focusModeActivityName(void *a1, const char *a2, ...)
{
  return _[a1 focusModeActivityName];
}

id objc_msgSend_focusOnNextMatchingItem(void *a1, const char *a2, ...)
{
  return _[a1 focusOnNextMatchingItem];
}

id objc_msgSend_focusOnPreviousMatchingItem(void *a1, const char *a2, ...)
{
  return _[a1 focusOnPreviousMatchingItem];
}

id objc_msgSend_focusRetryAttempts(void *a1, const char *a2, ...)
{
  return _[a1 focusRetryAttempts];
}

id objc_msgSend_focusedApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "focusedApplication:");
}

id objc_msgSend_focusedApplications(void *a1, const char *a2, ...)
{
  return _[a1 focusedApplications];
}

id objc_msgSend_focusedElement(void *a1, const char *a2, ...)
{
  return _[a1 focusedElement];
}

id objc_msgSend_focusedEntry(void *a1, const char *a2, ...)
{
  return _[a1 focusedEntry];
}

id objc_msgSend_fontWithName_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithName:size:");
}

id objc_msgSend_footprint(void *a1, const char *a2, ...)
{
  return _[a1 footprint];
}

id objc_msgSend_forceRotorOffGesturedTextInputIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceRotorOffGesturedTextInputIfNeeded:");
}

id objc_msgSend_forceUpdate(void *a1, const char *a2, ...)
{
  return _[a1 forceUpdate];
}

id objc_msgSend_forceUpdateMask(void *a1, const char *a2, ...)
{
  return _[a1 forceUpdateMask];
}

id objc_msgSend_formIntersectionWithCharacterSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formIntersectionWithCharacterSet:");
}

id objc_msgSend_formUnionWithCharacterSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formUnionWithCharacterSet:");
}

id objc_msgSend_formattedDatetime(void *a1, const char *a2, ...)
{
  return _[a1 formattedDatetime];
}

id objc_msgSend_foundScribbleElement_atSearchPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foundScribbleElement:atSearchPoint:");
}

id objc_msgSend_fourthDot(void *a1, const char *a2, ...)
{
  return _[a1 fourthDot];
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _[a1 frame];
}

id objc_msgSend_frameForDirectInteraction(void *a1, const char *a2, ...)
{
  return _[a1 frameForDirectInteraction];
}

id objc_msgSend_frameForLineNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForLineNumber:");
}

id objc_msgSend_frameForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForRange:");
}

id objc_msgSend_fullscreenVideoViewIsVisible(void *a1, const char *a2, ...)
{
  return _[a1 fullscreenVideoViewIsVisible];
}

id objc_msgSend_general(void *a1, const char *a2, ...)
{
  return _[a1 general];
}

id objc_msgSend_generalDict(void *a1, const char *a2, ...)
{
  return _[a1 generalDict];
}

id objc_msgSend_generalLanguageID(void *a1, const char *a2, ...)
{
  return _[a1 generalLanguageID];
}

id objc_msgSend_generalPasteboard(void *a1, const char *a2, ...)
{
  return _[a1 generalPasteboard];
}

id objc_msgSend_generateCVMLContentForBraille(void *a1, const char *a2, ...)
{
  return _[a1 generateCVMLContentForBraille];
}

id objc_msgSend_generateOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateOutputRequest:");
}

id objc_msgSend_generateRotorTypeRequest(void *a1, const char *a2, ...)
{
  return _[a1 generateRotorTypeRequest];
}

id objc_msgSend_generatesBraille(void *a1, const char *a2, ...)
{
  return _[a1 generatesBraille];
}

id objc_msgSend_generation(void *a1, const char *a2, ...)
{
  return _[a1 generation];
}

id objc_msgSend_gesture(void *a1, const char *a2, ...)
{
  return _[a1 gesture];
}

id objc_msgSend_gestureEventWithEventRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureEventWithEventRepresentation:");
}

id objc_msgSend_gestureKeyboardRegion(void *a1, const char *a2, ...)
{
  return _[a1 gestureKeyboardRegion];
}

id objc_msgSend_gesturePracticeRegion(void *a1, const char *a2, ...)
{
  return _[a1 gesturePracticeRegion];
}

id objc_msgSend_gestureRepeater_repeaterEventDidFire_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureRepeater:repeaterEventDidFire:");
}

id objc_msgSend_gestureRepeaterWillSendFirstRepeaterEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureRepeaterWillSendFirstRepeaterEvent:");
}

id objc_msgSend_gestureState(void *a1, const char *a2, ...)
{
  return _[a1 gestureState];
}

id objc_msgSend_gesturedTextInputAttributes(void *a1, const char *a2, ...)
{
  return _[a1 gesturedTextInputAttributes];
}

id objc_msgSend_gesturedTextInputManager_accessCurrentGesturedTextInputElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gesturedTextInputManager:accessCurrentGesturedTextInputElement:");
}

id objc_msgSend_gesturedTextInputManager_moveToElementMatchingRotorType_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gesturedTextInputManager:moveToElementMatchingRotorType:inDirection:");
}

id objc_msgSend_gesturesControlRotor(void *a1, const char *a2, ...)
{
  return _[a1 gesturesControlRotor];
}

id objc_msgSend_getCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCharacters:");
}

id objc_msgSend_getCurrentElement(void *a1, const char *a2, ...)
{
  return _[a1 getCurrentElement];
}

id objc_msgSend_getRange_ofAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRange:ofAttribute:");
}

id objc_msgSend_getRouterIndex_token_location_appToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRouterIndex:token:location:appToken:");
}

id objc_msgSend_getVolume_forCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getVolume:forCategory:");
}

id objc_msgSend_groupNavigationStyle(void *a1, const char *a2, ...)
{
  return _[a1 groupNavigationStyle];
}

id objc_msgSend_groupedChildrenCount(void *a1, const char *a2, ...)
{
  return _[a1 groupedChildrenCount];
}

id objc_msgSend_groupedParent(void *a1, const char *a2, ...)
{
  return _[a1 groupedParent];
}

id objc_msgSend_guessesForWordRange_inString_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guessesForWordRange:inString:language:");
}

id objc_msgSend_guideElementHeaderText(void *a1, const char *a2, ...)
{
  return _[a1 guideElementHeaderText];
}

id objc_msgSend_halfPatternWithDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "halfPatternWithDictionaryRepresentation:");
}

id objc_msgSend_halfPatternWithTopDot_middleDot_bottomDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "halfPatternWithTopDot:middleDot:bottomDot:");
}

id objc_msgSend_halfPatternWithTopDot_middleDot_bottomDot_fourthDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "halfPatternWithTopDot:middleDot:bottomDot:fourthDot:");
}

id objc_msgSend_halfPatternsForNumberOfDots_side_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "halfPatternsForNumberOfDots:side:");
}

id objc_msgSend_handEventMask(void *a1, const char *a2, ...)
{
  return _[a1 handEventMask];
}

id objc_msgSend_handInfo(void *a1, const char *a2, ...)
{
  return _[a1 handInfo];
}

id objc_msgSend_handleAppleTVRemoteEvent_eventOrigin_isRTL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAppleTVRemoteEvent:eventOrigin:isRTL:");
}

id objc_msgSend_handleBluetoothBrailleDisplayConnected(void *a1, const char *a2, ...)
{
  return _[a1 handleBluetoothBrailleDisplayConnected];
}

id objc_msgSend_handleBrailleConfigurationChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleBrailleConfigurationChanged:");
}

id objc_msgSend_handleCommandIfActiveBrailleRelated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCommandIfActiveBrailleRelated:");
}

id objc_msgSend_handleDelete(void *a1, const char *a2, ...)
{
  return _[a1 handleDelete];
}

id objc_msgSend_handleEscape(void *a1, const char *a2, ...)
{
  return _[a1 handleEscape];
}

id objc_msgSend_handleEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEvent:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFirstElement(void *a1, const char *a2, ...)
{
  return _[a1 handleFirstElement];
}

id objc_msgSend_handleForwardDelete(void *a1, const char *a2, ...)
{
  return _[a1 handleForwardDelete];
}

id objc_msgSend_handleGestureEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleGestureEvent:");
}

id objc_msgSend_handleHomeButtonPress(void *a1, const char *a2, ...)
{
  return _[a1 handleHomeButtonPress];
}

id objc_msgSend_handleKeyboardChanged(void *a1, const char *a2, ...)
{
  return _[a1 handleKeyboardChanged];
}

id objc_msgSend_handleKeyboardKeyEvent_eventOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleKeyboardKeyEvent:eventOrigin:");
}

id objc_msgSend_handleKeyboardPerkinsInput_chordOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleKeyboardPerkinsInput:chordOnly:");
}

id objc_msgSend_handleLastElement(void *a1, const char *a2, ...)
{
  return _[a1 handleLastElement];
}

id objc_msgSend_handleLaunchVoiceOverImageExplorer(void *a1, const char *a2, ...)
{
  return _[a1 handleLaunchVoiceOverImageExplorer];
}

id objc_msgSend_handleLeftArrow(void *a1, const char *a2, ...)
{
  return _[a1 handleLeftArrow];
}

id objc_msgSend_handleLockButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleLockButtonPress:");
}

id objc_msgSend_handleMediaKeyPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMediaKeyPress:");
}

id objc_msgSend_handleMenuButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMenuButtonPress:");
}

id objc_msgSend_handleNotification_withData_forElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNotification:withData:forElement:");
}

id objc_msgSend_handleOrientationChanged(void *a1, const char *a2, ...)
{
  return _[a1 handleOrientationChanged];
}

id objc_msgSend_handlePlanarPanFailedIsLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePlanarPanFailedIsLeft:");
}

id objc_msgSend_handlePlayPauseKeyPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePlayPauseKeyPress:");
}

id objc_msgSend_handleProximityEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleProximityEvent:");
}

id objc_msgSend_handleReachabilityToggled(void *a1, const char *a2, ...)
{
  return _[a1 handleReachabilityToggled];
}

id objc_msgSend_handleReplaceRange_withString_cursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReplaceRange:withString:cursor:");
}

id objc_msgSend_handleReturn(void *a1, const char *a2, ...)
{
  return _[a1 handleReturn];
}

id objc_msgSend_handleReturnToSpringBoard(void *a1, const char *a2, ...)
{
  return _[a1 handleReturnToSpringBoard];
}

id objc_msgSend_handleRightArrow(void *a1, const char *a2, ...)
{
  return _[a1 handleRightArrow];
}

id objc_msgSend_handleRingerSwitchSwitched_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRingerSwitchSwitched:");
}

id objc_msgSend_handleSelection(void *a1, const char *a2, ...)
{
  return _[a1 handleSelection];
}

id objc_msgSend_handleSetForcedOrientation_shouldAnnounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSetForcedOrientation:shouldAnnounce:");
}

id objc_msgSend_handleShowOnscreenKeyboardToggle(void *a1, const char *a2, ...)
{
  return _[a1 handleShowOnscreenKeyboardToggle];
}

id objc_msgSend_handleStartUp(void *a1, const char *a2, ...)
{
  return _[a1 handleStartUp];
}

id objc_msgSend_handleStateReset(void *a1, const char *a2, ...)
{
  return _[a1 handleStateReset];
}

id objc_msgSend_handleSystemWideServerDied(void *a1, const char *a2, ...)
{
  return _[a1 handleSystemWideServerDied];
}

id objc_msgSend_handleTextSearchEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTextSearchEvent:");
}

id objc_msgSend_handleTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTracking:");
}

id objc_msgSend_handleTurnOffSoundAndCurtainEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTurnOffSoundAndCurtainEvent:");
}

id objc_msgSend_handleUSBMFiBrailleDisplayConnected(void *a1, const char *a2, ...)
{
  return _[a1 handleUSBMFiBrailleDisplayConnected];
}

id objc_msgSend_handleUnsetForcedOrientationAndAnnounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUnsetForcedOrientationAndAnnounce:");
}

id objc_msgSend_handleVerbosityChangeIncreasing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleVerbosityChangeIncreasing:");
}

id objc_msgSend_handleVolumeButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleVolumeButtonPress:");
}

id objc_msgSend_handlesGestureArea(void *a1, const char *a2, ...)
{
  return _[a1 handlesGestureArea];
}

id objc_msgSend_handwritingInputActive(void *a1, const char *a2, ...)
{
  return _[a1 handwritingInputActive];
}

id objc_msgSend_handwritingManager(void *a1, const char *a2, ...)
{
  return _[a1 handwritingManager];
}

id objc_msgSend_handwritingSendCarriageReturn(void *a1, const char *a2, ...)
{
  return _[a1 handwritingSendCarriageReturn];
}

id objc_msgSend_hapticAssetURLForOutputEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hapticAssetURLForOutputEvent:");
}

id objc_msgSend_hapticsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 hapticsEnabled];
}

id objc_msgSend_hasActive2DBrailleDisplay(void *a1, const char *a2, ...)
{
  return _[a1 hasActive2DBrailleDisplay];
}

id objc_msgSend_hasActiveBrailleDisplay(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveBrailleDisplay];
}

id objc_msgSend_hasActiveOrPendingCallOrFaceTime(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveOrPendingCallOrFaceTime];
}

id objc_msgSend_hasAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAttribute:");
}

id objc_msgSend_hasAttributes(void *a1, const char *a2, ...)
{
  return _[a1 hasAttributes];
}

id objc_msgSend_hasBeenDispatched(void *a1, const char *a2, ...)
{
  return _[a1 hasBeenDispatched];
}

id objc_msgSend_hasExplicitColumnInfo(void *a1, const char *a2, ...)
{
  return _[a1 hasExplicitColumnInfo];
}

id objc_msgSend_hasExplicitRowInfo(void *a1, const char *a2, ...)
{
  return _[a1 hasExplicitRowInfo];
}

id objc_msgSend_hasImage(void *a1, const char *a2, ...)
{
  return _[a1 hasImage];
}

id objc_msgSend_hasNativeFocus(void *a1, const char *a2, ...)
{
  return _[a1 hasNativeFocus];
}

id objc_msgSend_hasNextCandidate(void *a1, const char *a2, ...)
{
  return _[a1 hasNextCandidate];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasPreviousCandidate(void *a1, const char *a2, ...)
{
  return _[a1 hasPreviousCandidate];
}

id objc_msgSend_hasSameOutputAs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSameOutputAs:");
}

id objc_msgSend_hasSpeakableCharacters(void *a1, const char *a2, ...)
{
  return _[a1 hasSpeakableCharacters];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hashKey(void *a1, const char *a2, ...)
{
  return _[a1 hashKey];
}

id objc_msgSend_headerElements(void *a1, const char *a2, ...)
{
  return _[a1 headerElements];
}

id objc_msgSend_headerElementsForColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerElementsForColumn:");
}

id objc_msgSend_headerElementsForRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerElementsForRow:");
}

id objc_msgSend_headingLevelValue(void *a1, const char *a2, ...)
{
  return _[a1 headingLevelValue];
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return _[a1 height];
}

id objc_msgSend_helpEnabled(void *a1, const char *a2, ...)
{
  return _[a1 helpEnabled];
}

id objc_msgSend_hideAlert(void *a1, const char *a2, ...)
{
  return _[a1 hideAlert];
}

id objc_msgSend_hideBrailleUI(void *a1, const char *a2, ...)
{
  return _[a1 hideBrailleUI];
}

id objc_msgSend_hideDetectionUI(void *a1, const char *a2, ...)
{
  return _[a1 hideDetectionUI];
}

id objc_msgSend_hideMapsExplorationUI(void *a1, const char *a2, ...)
{
  return _[a1 hideMapsExplorationUI];
}

id objc_msgSend_hideRemoteView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideRemoteView:");
}

id objc_msgSend_hideSelectedElement(void *a1, const char *a2, ...)
{
  return _[a1 hideSelectedElement];
}

id objc_msgSend_hideVisualRotor(void *a1, const char *a2, ...)
{
  return _[a1 hideVisualRotor];
}

id objc_msgSend_highlightBrailleDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "highlightBrailleDots:");
}

id objc_msgSend_highlightMapsExplorationSegmentWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "highlightMapsExplorationSegmentWithIndex:");
}

id objc_msgSend_hint(void *a1, const char *a2, ...)
{
  return _[a1 hint];
}

id objc_msgSend_hintForAppLaunch(void *a1, const char *a2, ...)
{
  return _[a1 hintForAppLaunch];
}

id objc_msgSend_hintForItemChooser(void *a1, const char *a2, ...)
{
  return _[a1 hintForItemChooser];
}

id objc_msgSend_hints(void *a1, const char *a2, ...)
{
  return _[a1 hints];
}

id objc_msgSend_hintsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 hintsEnabled];
}

id objc_msgSend_hitTestPoint(void *a1, const char *a2, ...)
{
  return _[a1 hitTestPoint];
}

id objc_msgSend_holdCurrentRequest(void *a1, const char *a2, ...)
{
  return _[a1 holdCurrentRequest];
}

id objc_msgSend_holdHandler(void *a1, const char *a2, ...)
{
  return _[a1 holdHandler];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_iconClassFeatures(void *a1, const char *a2, ...)
{
  return _[a1 iconClassFeatures];
}

id objc_msgSend_identificationFromElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identificationFromElement:");
}

id objc_msgSend_identificationFromKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identificationFromKey:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_ignoreCase(void *a1, const char *a2, ...)
{
  return _[a1 ignoreCase];
}

id objc_msgSend_ignoreDefaultTypeAutofill(void *a1, const char *a2, ...)
{
  return _[a1 ignoreDefaultTypeAutofill];
}

id objc_msgSend_ignoreLogging(void *a1, const char *a2, ...)
{
  return _[a1 ignoreLogging];
}

id objc_msgSend_ignoreWhenVoiceOverTouches(void *a1, const char *a2, ...)
{
  return _[a1 ignoreWhenVoiceOverTouches];
}

id objc_msgSend_imageAssetLocalIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 imageAssetLocalIdentifier];
}

id objc_msgSend_imageCaptionGenderStrategy(void *a1, const char *a2, ...)
{
  return _[a1 imageCaptionGenderStrategy];
}

id objc_msgSend_imageCaptionModelAssetPolicy(void *a1, const char *a2, ...)
{
  return _[a1 imageCaptionModelAssetPolicy];
}

id objc_msgSend_imageCaptionResults(void *a1, const char *a2, ...)
{
  return _[a1 imageCaptionResults];
}

id objc_msgSend_imageCaptioningDisabledApps(void *a1, const char *a2, ...)
{
  return _[a1 imageCaptioningDisabledApps];
}

id objc_msgSend_imageCaptionsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 imageCaptionsEnabled];
}

id objc_msgSend_imageDescriptionForCurrentCameraScene_withPreferredLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageDescriptionForCurrentCameraScene:withPreferredLocale:");
}

id objc_msgSend_imageDescriptions(void *a1, const char *a2, ...)
{
  return _[a1 imageDescriptions];
}

id objc_msgSend_imageIntensity(void *a1, const char *a2, ...)
{
  return _[a1 imageIntensity];
}

id objc_msgSend_imageInvert(void *a1, const char *a2, ...)
{
  return _[a1 imageInvert];
}

id objc_msgSend_imageNode(void *a1, const char *a2, ...)
{
  return _[a1 imageNode];
}

id objc_msgSend_imageOrigin(void *a1, const char *a2, ...)
{
  return _[a1 imageOrigin];
}

id objc_msgSend_imageOverlayElements(void *a1, const char *a2, ...)
{
  return _[a1 imageOverlayElements];
}

id objc_msgSend_imageWithCGImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithCGImage:");
}

id objc_msgSend_imageZoom(void *a1, const char *a2, ...)
{
  return _[a1 imageZoom];
}

id objc_msgSend_immediateRemoteParent(void *a1, const char *a2, ...)
{
  return _[a1 immediateRemoteParent];
}

id objc_msgSend_importance(void *a1, const char *a2, ...)
{
  return _[a1 importance];
}

id objc_msgSend_inDirectInteractionTypingMode(void *a1, const char *a2, ...)
{
  return _[a1 inDirectInteractionTypingMode];
}

id objc_msgSend_inDirectTouchMode(void *a1, const char *a2, ...)
{
  return _[a1 inDirectTouchMode];
}

id objc_msgSend_inGestureMode(void *a1, const char *a2, ...)
{
  return _[a1 inGestureMode];
}

id objc_msgSend_inMisspelledWordRotor(void *a1, const char *a2, ...)
{
  return _[a1 inMisspelledWordRotor];
}

id objc_msgSend_inPerformanceTestMode(void *a1, const char *a2, ...)
{
  return _[a1 inPerformanceTestMode];
}

id objc_msgSend_inUnitTestMode(void *a1, const char *a2, ...)
{
  return _[a1 inUnitTestMode];
}

id objc_msgSend_inches(void *a1, const char *a2, ...)
{
  return _[a1 inches];
}

id objc_msgSend_includeDuringContentReading(void *a1, const char *a2, ...)
{
  return _[a1 includeDuringContentReading];
}

id objc_msgSend_includeFullImageDescriptionsForAllElements(void *a1, const char *a2, ...)
{
  return _[a1 includeFullImageDescriptionsForAllElements];
}

id objc_msgSend_includeFullImageDescriptionsForValidElements(void *a1, const char *a2, ...)
{
  return _[a1 includeFullImageDescriptionsForValidElements];
}

id objc_msgSend_includeRoleDescription(void *a1, const char *a2, ...)
{
  return _[a1 includeRoleDescription];
}

id objc_msgSend_includeRoleOnlyForGroupNavigation(void *a1, const char *a2, ...)
{
  return _[a1 includeRoleOnlyForGroupNavigation];
}

id objc_msgSend_includeSceneDetection(void *a1, const char *a2, ...)
{
  return _[a1 includeSceneDetection];
}

id objc_msgSend_includeURLLabelInLabel(void *a1, const char *a2, ...)
{
  return _[a1 includeURLLabelInLabel];
}

id objc_msgSend_includesFeaturesForImageExploration(void *a1, const char *a2, ...)
{
  return _[a1 includesFeaturesForImageExploration];
}

id objc_msgSend_increaseTrackingDetail(void *a1, const char *a2, ...)
{
  return _[a1 increaseTrackingDetail];
}

id objc_msgSend_increaseWebSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "increaseWebSelection:");
}

id objc_msgSend_increment_userInitiated_eventOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "increment:userInitiated:eventOrigin:");
}

id objc_msgSend_incrementAction(void *a1, const char *a2, ...)
{
  return _[a1 incrementAction];
}

id objc_msgSend_indexAtPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexAtPosition:");
}

id objc_msgSend_indexForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexForPoint:");
}

id objc_msgSend_indexGreaterThanIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexGreaterThanIndex:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexOfRotorItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfRotorItem:");
}

id objc_msgSend_indexPath(void *a1, const char *a2, ...)
{
  return _[a1 indexPath];
}

id objc_msgSend_indexPathAsRange(void *a1, const char *a2, ...)
{
  return _[a1 indexPathAsRange];
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_indexSetWithIndexesInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSetWithIndexesInRange:");
}

id objc_msgSend_indexes(void *a1, const char *a2, ...)
{
  return _[a1 indexes];
}

id objc_msgSend_indexesOfObjectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexesOfObjectsPassingTest:");
}

id objc_msgSend_informConnectionDied(void *a1, const char *a2, ...)
{
  return _[a1 informConnectionDied];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initAndWaitForMainDisplayConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 initAndWaitForMainDisplayConfiguration];
}

id objc_msgSend_initApplicationWithPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initApplicationWithPid:");
}

id objc_msgSend_initApplicationWithPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initApplicationWithPosition:");
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:isDirectory:");
}

id objc_msgSend_initPreferringUserProfile(void *a1, const char *a2, ...)
{
  return _[a1 initPreferringUserProfile];
}

id objc_msgSend_initWithAXAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAXAction:");
}

id objc_msgSend_initWithAXElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAXElement:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributedString:");
}

id objc_msgSend_initWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributes:");
}

id objc_msgSend_initWithBits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBits:");
}

id objc_msgSend_initWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBool:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithCanvasDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCanvasDescription:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCharacters_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacters:length:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfFile:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDelegate_itemSource_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:itemSource:filter:");
}

id objc_msgSend_initWithDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceIdentifier:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDoubleValue_unit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDoubleValue:unit:");
}

id objc_msgSend_initWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElement:");
}

id objc_msgSend_initWithElementManager_MatchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElementManager:MatchBlock:");
}

id objc_msgSend_initWithEventRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventRepresentation:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_locale_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:locale:arguments:");
}

id objc_msgSend_initWithHIDTapIdentifier_HIDEventTapPriority_systemEventTapIdentifier_systemEventTapPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHIDTapIdentifier:HIDEventTapPriority:systemEventTapIdentifier:systemEventTapPriority:");
}

id objc_msgSend_initWithHeight_width_numberOfDiscretePinHeights_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHeight:width:numberOfDiscretePinHeights:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_serviceBundleName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:serviceBundleName:");
}

id objc_msgSend_initWithImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImageData:");
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInt:");
}

id objc_msgSend_initWithItemSource_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemSource:filter:");
}

id objc_msgSend_initWithKey_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:payload:");
}

id objc_msgSend_initWithLabel_value_traits_rowRange_frame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLabel:value:traits:rowRange:frame:");
}

id objc_msgSend_initWithLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLanguage:");
}

id objc_msgSend_initWithLanguage_mode_partial_useTechnicalTable_textPositionsRange_textFormattingRanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLanguage:mode:partial:useTechnicalTable:textPositionsRange:textFormattingRanges:");
}

id objc_msgSend_initWithLaunchContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLaunchContext:");
}

id objc_msgSend_initWithLeftDots_rightDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLeftDots:rightDots:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMode_locale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMode:locale:");
}

id objc_msgSend_initWithName_displayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:displayID:");
}

id objc_msgSend_initWithName_wireDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:wireDictionary:");
}

id objc_msgSend_initWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObject:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPosition:");
}

id objc_msgSend_initWithPosition_application_contextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPosition:application:contextId:");
}

id objc_msgSend_initWithPosition_startWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPosition:startWithElement:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithSegments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSegments:");
}

id objc_msgSend_initWithServiceName_perPidService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:perPidService:");
}

id objc_msgSend_initWithSize_delegate_threadKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:delegate:threadKey:");
}

id objc_msgSend_initWithSoundPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSoundPath:");
}

id objc_msgSend_initWithSoundPath_thread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSoundPath:thread:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithString_brailleString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:brailleString:");
}

id objc_msgSend_initWithStringOrAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStringOrAttributedString:");
}

id objc_msgSend_initWithStrings_focusedIndex_truncateStrings_alignAtTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStrings:focusedIndex:truncateStrings:alignAtTop:");
}

id objc_msgSend_initWithTarget_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:");
}

id objc_msgSend_initWithTarget_selector_thread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:thread:");
}

id objc_msgSend_initWithTarget_selector_threadKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:threadKey:");
}

id objc_msgSend_initWithTargetAccessQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetAccessQueue:");
}

id objc_msgSend_initWithTargetSerialQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetSerialQueue:");
}

id objc_msgSend_initWithText_geometry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithText:geometry:");
}

id objc_msgSend_initWithTextDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTextDisplay:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithTypingMode_keyboardSize_shouldUseEightDotBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTypingMode:keyboardSize:shouldUseEightDotBraille:");
}

id objc_msgSend_initWithUIElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUIElement:");
}

id objc_msgSend_initWithUIElement_initializeAssociatedPids_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUIElement:initializeAssociatedPids:");
}

id objc_msgSend_initWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedInt:");
}

id objc_msgSend_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:");
}

id objc_msgSend_initWithWireDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWireDictionary:");
}

id objc_msgSend_initialOrientationTimer(void *a1, const char *a2, ...)
{
  return _[a1 initialOrientationTimer];
}

id objc_msgSend_initialReadAllElement(void *a1, const char *a2, ...)
{
  return _[a1 initialReadAllElement];
}

id objc_msgSend_initialize(void *a1, const char *a2, ...)
{
  return _[a1 initialize];
}

id objc_msgSend_initializeAssociatedPids(void *a1, const char *a2, ...)
{
  return _[a1 initializeAssociatedPids];
}

id objc_msgSend_inputContractionMode(void *a1, const char *a2, ...)
{
  return _[a1 inputContractionMode];
}

id objc_msgSend_inputEightDotBraille(void *a1, const char *a2, ...)
{
  return _[a1 inputEightDotBraille];
}

id objc_msgSend_inputSpaceForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputSpaceForElement:");
}

id objc_msgSend_inputUIApplication(void *a1, const char *a2, ...)
{
  return _[a1 inputUIApplication];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertObjects_atIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObjects:atIndexes:");
}

id objc_msgSend_insertString_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertString:atIndex:");
}

id objc_msgSend_insertText_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertText:source:");
}

id objc_msgSend_installOfflineTranslationModelForLanguageCodeIfNeeded_progress_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installOfflineTranslationModelForLanguageCodeIfNeeded:progress:completion:");
}

id objc_msgSend_installedAssetsForLanguage_voiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installedAssetsForLanguage:voiceType:");
}

id objc_msgSend_instructions(void *a1, const char *a2, ...)
{
  return _[a1 instructions];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_internalEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalEventWithCommand:info:");
}

id objc_msgSend_interruptsCurrentSpeech(void *a1, const char *a2, ...)
{
  return _[a1 interruptsCurrentSpeech];
}

id objc_msgSend_interruptsEverything(void *a1, const char *a2, ...)
{
  return _[a1 interruptsEverything];
}

id objc_msgSend_invalidStatus(void *a1, const char *a2, ...)
{
  return _[a1 invalidStatus];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invertedSet(void *a1, const char *a2, ...)
{
  return _[a1 invertedSet];
}

id objc_msgSend_iosSystemAppApplication(void *a1, const char *a2, ...)
{
  return _[a1 iosSystemAppApplication];
}

id objc_msgSend_isAXAttributedString(void *a1, const char *a2, ...)
{
  return _[a1 isAXAttributedString];
}

id objc_msgSend_isAccessibilityEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibilityEnabled];
}

id objc_msgSend_isAccessibilityOpaqueElementProvider(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibilityOpaqueElementProvider];
}

id objc_msgSend_isAccessibilitySystemUIServer(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibilitySystemUIServer];
}

id objc_msgSend_isAccessibleElement(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibleElement];
}

id objc_msgSend_isAccessibleGroup(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibleGroup];
}

id objc_msgSend_isActivatedForContinuityScreen(void *a1, const char *a2, ...)
{
  return _[a1 isActivatedForContinuityScreen];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isActiveResponder(void *a1, const char *a2, ...)
{
  return _[a1 isActiveResponder];
}

id objc_msgSend_isAlarmRinging(void *a1, const char *a2, ...)
{
  return _[a1 isAlarmRinging];
}

id objc_msgSend_isAlive(void *a1, const char *a2, ...)
{
  return _[a1 isAlive];
}

id objc_msgSend_isAllPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 isAllPunctuationGroup];
}

id objc_msgSend_isAppleVendorKey(void *a1, const char *a2, ...)
{
  return _[a1 isAppleVendorKey];
}

id objc_msgSend_isApplication(void *a1, const char *a2, ...)
{
  return _[a1 isApplication];
}

id objc_msgSend_isArrowKey(void *a1, const char *a2, ...)
{
  return _[a1 isArrowKey];
}

id objc_msgSend_isAssistiveTouch(void *a1, const char *a2, ...)
{
  return _[a1 isAssistiveTouch];
}

id objc_msgSend_isAtEnd(void *a1, const char *a2, ...)
{
  return _[a1 isAtEnd];
}

id objc_msgSend_isAwayAlertItem(void *a1, const char *a2, ...)
{
  return _[a1 isAwayAlertItem];
}

id objc_msgSend_isBackspaceEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackspaceEvent:");
}

id objc_msgSend_isBannerNotification(void *a1, const char *a2, ...)
{
  return _[a1 isBannerNotification];
}

id objc_msgSend_isBaseSystemSpokenEqualToLocalization(void *a1, const char *a2, ...)
{
  return _[a1 isBaseSystemSpokenEqualToLocalization];
}

id objc_msgSend_isBrailleEvent(void *a1, const char *a2, ...)
{
  return _[a1 isBrailleEvent];
}

id objc_msgSend_isCameraIrisOpen(void *a1, const char *a2, ...)
{
  return _[a1 isCameraIrisOpen];
}

id objc_msgSend_isCancelEvent(void *a1, const char *a2, ...)
{
  return _[a1 isCancelEvent];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isCandidateSelectionOn(void *a1, const char *a2, ...)
{
  return _[a1 isCandidateSelectionOn];
}

id objc_msgSend_isCapsLockKeyDown(void *a1, const char *a2, ...)
{
  return _[a1 isCapsLockKeyDown];
}

id objc_msgSend_isCapsLockKeyUp(void *a1, const char *a2, ...)
{
  return _[a1 isCapsLockKeyUp];
}

id objc_msgSend_isChronod(void *a1, const char *a2, ...)
{
  return _[a1 isChronod];
}

id objc_msgSend_isClipViewService(void *a1, const char *a2, ...)
{
  return _[a1 isClipViewService];
}

id objc_msgSend_isComboBox(void *a1, const char *a2, ...)
{
  return _[a1 isComboBox];
}

id objc_msgSend_isCommandKeyPressed(void *a1, const char *a2, ...)
{
  return _[a1 isCommandKeyPressed];
}

id objc_msgSend_isComputerVisionAsynchrousRequest(void *a1, const char *a2, ...)
{
  return _[a1 isComputerVisionAsynchrousRequest];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isContainedByPreferredNativeFocusElement(void *a1, const char *a2, ...)
{
  return _[a1 isContainedByPreferredNativeFocusElement];
}

id objc_msgSend_isContinuitySessionActive(void *a1, const char *a2, ...)
{
  return _[a1 isContinuitySessionActive];
}

id objc_msgSend_isControlCenterVisible(void *a1, const char *a2, ...)
{
  return _[a1 isControlCenterVisible];
}

id objc_msgSend_isControlKeyPressed(void *a1, const char *a2, ...)
{
  return _[a1 isControlKeyPressed];
}

id objc_msgSend_isCurrentRouteConsideredExternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCurrentRouteConsideredExternal:");
}

id objc_msgSend_isDialectSecondaryForCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDialectSecondaryForCharacter:");
}

id objc_msgSend_isDictationListening(void *a1, const char *a2, ...)
{
  return _[a1 isDictationListening];
}

id objc_msgSend_isDownEvent(void *a1, const char *a2, ...)
{
  return _[a1 isDownEvent];
}

id objc_msgSend_isDragActive(void *a1, const char *a2, ...)
{
  return _[a1 isDragActive];
}

id objc_msgSend_isEditableTextArea(void *a1, const char *a2, ...)
{
  return _[a1 isEditableTextArea];
}

id objc_msgSend_isElementFirstElement_orLastElement_withType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isElementFirstElement:orLastElement:withType:");
}

id objc_msgSend_isEligibleForVOTWithVoiceInfo_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEligibleForVOTWithVoiceInfo:language:");
}

id objc_msgSend_isEmojiKey(void *a1, const char *a2, ...)
{
  return _[a1 isEmojiKey];
}

id objc_msgSend_isEmojiKeyboard(void *a1, const char *a2, ...)
{
  return _[a1 isEmojiKeyboard];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isEscapeKey(void *a1, const char *a2, ...)
{
  return _[a1 isEscapeKey];
}

id objc_msgSend_isExistingInputContainedIn_withMode_isPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExistingInputContainedIn:withMode:isPrefix:");
}

id objc_msgSend_isExploring(void *a1, const char *a2, ...)
{
  return _[a1 isExploring];
}

id objc_msgSend_isFNKeyPressed(void *a1, const char *a2, ...)
{
  return _[a1 isFNKeyPressed];
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _[a1 isFileURL];
}

id objc_msgSend_isFirstItemInDescriptionList(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInDescriptionList];
}

id objc_msgSend_isFirstItemInFieldset(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInFieldset];
}

id objc_msgSend_isFirstItemInLandmark(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInLandmark];
}

id objc_msgSend_isFirstItemInList(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInList];
}

id objc_msgSend_isFirstItemInTable(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInTable];
}

id objc_msgSend_isFirstItemInTree(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInTree];
}

id objc_msgSend_isGoogleChrome(void *a1, const char *a2, ...)
{
  return _[a1 isGoogleChrome];
}

id objc_msgSend_isGuideElementMovementEvent(void *a1, const char *a2, ...)
{
  return _[a1 isGuideElementMovementEvent];
}

id objc_msgSend_isGuidedAccessActive(void *a1, const char *a2, ...)
{
  return _[a1 isGuidedAccessActive];
}

id objc_msgSend_isHandUI(void *a1, const char *a2, ...)
{
  return _[a1 isHandUI];
}

id objc_msgSend_isHardwareKeyboardAttached(void *a1, const char *a2, ...)
{
  return _[a1 isHardwareKeyboardAttached];
}

id objc_msgSend_isHeadBoard(void *a1, const char *a2, ...)
{
  return _[a1 isHeadBoard];
}

id objc_msgSend_isHeader(void *a1, const char *a2, ...)
{
  return _[a1 isHeader];
}

id objc_msgSend_isIBooks(void *a1, const char *a2, ...)
{
  return _[a1 isIBooks];
}

id objc_msgSend_isInAlert(void *a1, const char *a2, ...)
{
  return _[a1 isInAlert];
}

id objc_msgSend_isInAppSwitcher(void *a1, const char *a2, ...)
{
  return _[a1 isInAppSwitcher];
}

id objc_msgSend_isInDescriptionDefinition(void *a1, const char *a2, ...)
{
  return _[a1 isInDescriptionDefinition];
}

id objc_msgSend_isInDescriptionTerm(void *a1, const char *a2, ...)
{
  return _[a1 isInDescriptionTerm];
}

id objc_msgSend_isInFolder(void *a1, const char *a2, ...)
{
  return _[a1 isInFolder];
}

id objc_msgSend_isInJindoWindow(void *a1, const char *a2, ...)
{
  return _[a1 isInJindoWindow];
}

id objc_msgSend_isInStatusBar(void *a1, const char *a2, ...)
{
  return _[a1 isInStatusBar];
}

id objc_msgSend_isInTableCell(void *a1, const char *a2, ...)
{
  return _[a1 isInTableCell];
}

id objc_msgSend_isInstalled(void *a1, const char *a2, ...)
{
  return _[a1 isInstalled];
}

id objc_msgSend_isInternalInstall(void *a1, const char *a2, ...)
{
  return _[a1 isInternalInstall];
}

id objc_msgSend_isInternationalKeyboardKey(void *a1, const char *a2, ...)
{
  return _[a1 isInternationalKeyboardKey];
}

id objc_msgSend_isItemChooserVisible(void *a1, const char *a2, ...)
{
  return _[a1 isItemChooserVisible];
}

id objc_msgSend_isKeyEvent(void *a1, const char *a2, ...)
{
  return _[a1 isKeyEvent];
}

id objc_msgSend_isKeyboardActiveOrAttached(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardActiveOrAttached];
}

id objc_msgSend_isKeyboardContinuousPathAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardContinuousPathAvailable];
}

id objc_msgSend_isKeyboardContinuousPathTracking(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardContinuousPathTracking];
}

id objc_msgSend_isKeyboardEmojiInputMode(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardEmojiInputMode];
}

id objc_msgSend_isKeyboardSelectKey(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardSelectKey];
}

id objc_msgSend_isLiftEvent(void *a1, const char *a2, ...)
{
  return _[a1 isLiftEvent];
}

id objc_msgSend_isLiveCaptionsParagraphView(void *a1, const char *a2, ...)
{
  return _[a1 isLiveCaptionsParagraphView];
}

id objc_msgSend_isLiveCaptionsTextView(void *a1, const char *a2, ...)
{
  return _[a1 isLiveCaptionsTextView];
}

id objc_msgSend_isLocked(void *a1, const char *a2, ...)
{
  return _[a1 isLocked];
}

id objc_msgSend_isMLElement(void *a1, const char *a2, ...)
{
  return _[a1 isMLElement];
}

id objc_msgSend_isMail(void *a1, const char *a2, ...)
{
  return _[a1 isMail];
}

id objc_msgSend_isMapItem(void *a1, const char *a2, ...)
{
  return _[a1 isMapItem];
}

id objc_msgSend_isMediaKey(void *a1, const char *a2, ...)
{
  return _[a1 isMediaKey];
}

id objc_msgSend_isMediaPlayingForApp_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMediaPlayingForApp:completionHandler:");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMobilePhone(void *a1, const char *a2, ...)
{
  return _[a1 isMobilePhone];
}

id objc_msgSend_isMovedEvent(void *a1, const char *a2, ...)
{
  return _[a1 isMovedEvent];
}

id objc_msgSend_isNeuralSiriVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNeuralSiriVoiceIdentifier:");
}

id objc_msgSend_isNextBrailleTableEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNextBrailleTableEvent:");
}

id objc_msgSend_isNextKeyboardLanguageEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNextKeyboardLanguageEvent:");
}

id objc_msgSend_isNextSuggestionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNextSuggestionEvent:");
}

id objc_msgSend_isNonLiftingInRangeEvent(void *a1, const char *a2, ...)
{
  return _[a1 isNonLiftingInRangeEvent];
}

id objc_msgSend_isNotificationCenterVisible(void *a1, const char *a2, ...)
{
  return _[a1 isNotificationCenterVisible];
}

id objc_msgSend_isOldSiriVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOldSiriVoiceIdentifier:");
}

id objc_msgSend_isOnElementManagerThread(void *a1, const char *a2, ...)
{
  return _[a1 isOnElementManagerThread];
}

id objc_msgSend_isOptionKeyPressed(void *a1, const char *a2, ...)
{
  return _[a1 isOptionKeyPressed];
}

id objc_msgSend_isOtherAudioPlaying(void *a1, const char *a2, ...)
{
  return _[a1 isOtherAudioPlaying];
}

id objc_msgSend_isPHAssetLocallyAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isPHAssetLocallyAvailable];
}

id objc_msgSend_isPassivelyListeningForEvents(void *a1, const char *a2, ...)
{
  return _[a1 isPassivelyListeningForEvents];
}

id objc_msgSend_isPaused(void *a1, const char *a2, ...)
{
  return _[a1 isPaused];
}

id objc_msgSend_isPending(void *a1, const char *a2, ...)
{
  return _[a1 isPending];
}

id objc_msgSend_isPlaying(void *a1, const char *a2, ...)
{
  return _[a1 isPlaying];
}

id objc_msgSend_isPressed(void *a1, const char *a2, ...)
{
  return _[a1 isPressed];
}

id objc_msgSend_isPreviousSuggestionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPreviousSuggestionEvent:");
}

id objc_msgSend_isQuickNavOn(void *a1, const char *a2, ...)
{
  return _[a1 isQuickNavOn];
}

id objc_msgSend_isQuietModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isQuietModeEnabled];
}

id objc_msgSend_isRTL(void *a1, const char *a2, ...)
{
  return _[a1 isRTL];
}

id objc_msgSend_isReadingAll(void *a1, const char *a2, ...)
{
  return _[a1 isReadingAll];
}

id objc_msgSend_isReadingContent(void *a1, const char *a2, ...)
{
  return _[a1 isReadingContent];
}

id objc_msgSend_isRemoteElement(void *a1, const char *a2, ...)
{
  return _[a1 isRemoteElement];
}

id objc_msgSend_isReplacementTextAllPunctuation(void *a1, const char *a2, ...)
{
  return _[a1 isReplacementTextAllPunctuation];
}

id objc_msgSend_isRequired(void *a1, const char *a2, ...)
{
  return _[a1 isRequired];
}

id objc_msgSend_isReturnKeyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReturnKeyEvent:");
}

id objc_msgSend_isRingerMuted(void *a1, const char *a2, ...)
{
  return _[a1 isRingerMuted];
}

id objc_msgSend_isRingerSwitchSilent(void *a1, const char *a2, ...)
{
  return _[a1 isRingerSwitchSilent];
}

id objc_msgSend_isRotorDownEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRotorDownEvent:");
}

id objc_msgSend_isRotorLeftEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRotorLeftEvent:");
}

id objc_msgSend_isRotorRightEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRotorRightEvent:");
}

id objc_msgSend_isRotorUpEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRotorUpEvent:");
}

id objc_msgSend_isRouteAirplayMirroring(void *a1, const char *a2, ...)
{
  return _[a1 isRouteAirplayMirroring];
}

id objc_msgSend_isRoutePicked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRoutePicked:");
}

id objc_msgSend_isRouteWireless_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRouteWireless:");
}

id objc_msgSend_isRunningInStoreDemoMode(void *a1, const char *a2, ...)
{
  return _[a1 isRunningInStoreDemoMode];
}

id objc_msgSend_isSafari(void *a1, const char *a2, ...)
{
  return _[a1 isSafari];
}

id objc_msgSend_isSafariScribbleActive(void *a1, const char *a2, ...)
{
  return _[a1 isSafariScribbleActive];
}

id objc_msgSend_isScreenLockedWithPasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isScreenLockedWithPasscode:");
}

id objc_msgSend_isScreenSaverVisible(void *a1, const char *a2, ...)
{
  return _[a1 isScreenSaverVisible];
}

id objc_msgSend_isScrubbing(void *a1, const char *a2, ...)
{
  return _[a1 isScrubbing];
}

id objc_msgSend_isSelectItemEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSelectItemEvent:");
}

id objc_msgSend_isSetupBuddy(void *a1, const char *a2, ...)
{
  return _[a1 isSetupBuddy];
}

id objc_msgSend_isShiftKeyPressed(void *a1, const char *a2, ...)
{
  return _[a1 isShiftKeyPressed];
}

id objc_msgSend_isShowingRemoteView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShowingRemoteView:");
}

id objc_msgSend_isSiriTalking(void *a1, const char *a2, ...)
{
  return _[a1 isSiriTalking];
}

id objc_msgSend_isSiriTalkingOrListening(void *a1, const char *a2, ...)
{
  return _[a1 isSiriTalkingOrListening];
}

id objc_msgSend_isSiriVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSiriVoiceIdentifier:");
}

id objc_msgSend_isSlideToTypeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isSlideToTypeEnabled];
}

id objc_msgSend_isSoftwareKeyboardActive(void *a1, const char *a2, ...)
{
  return _[a1 isSoftwareKeyboardActive];
}

id objc_msgSend_isSoftwareKeyboardMimic(void *a1, const char *a2, ...)
{
  return _[a1 isSoftwareKeyboardMimic];
}

id objc_msgSend_isSpaceEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSpaceEvent:");
}

id objc_msgSend_isSpeakThisTemporarilyDisabled(void *a1, const char *a2, ...)
{
  return _[a1 isSpeakThisTemporarilyDisabled];
}

id objc_msgSend_isSpeaking(void *a1, const char *a2, ...)
{
  return _[a1 isSpeaking];
}

id objc_msgSend_isSplitting(void *a1, const char *a2, ...)
{
  return _[a1 isSplitting];
}

id objc_msgSend_isSpotlight(void *a1, const char *a2, ...)
{
  return _[a1 isSpotlight];
}

id objc_msgSend_isSpringBoard(void *a1, const char *a2, ...)
{
  return _[a1 isSpringBoard];
}

id objc_msgSend_isStrongPasswordField(void *a1, const char *a2, ...)
{
  return _[a1 isStrongPasswordField];
}

id objc_msgSend_isStylus(void *a1, const char *a2, ...)
{
  return _[a1 isStylus];
}

id objc_msgSend_isStylusEvent(void *a1, const char *a2, ...)
{
  return _[a1 isStylusEvent];
}

id objc_msgSend_isSwitch(void *a1, const char *a2, ...)
{
  return _[a1 isSwitch];
}

id objc_msgSend_isSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 isSystemApp];
}

id objc_msgSend_isSystemBatteryLow(void *a1, const char *a2, ...)
{
  return _[a1 isSystemBatteryLow];
}

id objc_msgSend_isSystemLocked(void *a1, const char *a2, ...)
{
  return _[a1 isSystemLocked];
}

id objc_msgSend_isSystemMuted(void *a1, const char *a2, ...)
{
  return _[a1 isSystemMuted];
}

id objc_msgSend_isSystemServerEvent(void *a1, const char *a2, ...)
{
  return _[a1 isSystemServerEvent];
}

id objc_msgSend_isSystemSleeping(void *a1, const char *a2, ...)
{
  return _[a1 isSystemSleeping];
}

id objc_msgSend_isSystemWideGestureInProgress(void *a1, const char *a2, ...)
{
  return _[a1 isSystemWideGestureInProgress];
}

id objc_msgSend_isTextSelectionBackwardEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTextSelectionBackwardEvent:");
}

id objc_msgSend_isTextSelectionForwardEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTextSelectionForwardEvent:");
}

id objc_msgSend_isTouchContainer(void *a1, const char *a2, ...)
{
  return _[a1 isTouchContainer];
}

id objc_msgSend_isTouchEvent(void *a1, const char *a2, ...)
{
  return _[a1 isTouchEvent];
}

id objc_msgSend_isTourGuideRunning(void *a1, const char *a2, ...)
{
  return _[a1 isTourGuideRunning];
}

id objc_msgSend_isTutorialActive(void *a1, const char *a2, ...)
{
  return _[a1 isTutorialActive];
}

id objc_msgSend_isTypeToSiriVisible(void *a1, const char *a2, ...)
{
  return _[a1 isTypeToSiriVisible];
}

id objc_msgSend_isUniqueElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUniqueElement:");
}

id objc_msgSend_isUnitTesting(void *a1, const char *a2, ...)
{
  return _[a1 isUnitTesting];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isValidElementForImageExploration(void *a1, const char *a2, ...)
{
  return _[a1 isValidElementForImageExploration];
}

id objc_msgSend_isValidForApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidForApplication:");
}

id objc_msgSend_isValidForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidForContext:");
}

id objc_msgSend_isVisible(void *a1, const char *a2, ...)
{
  return _[a1 isVisible];
}

id objc_msgSend_isVoiceControlRunning(void *a1, const char *a2, ...)
{
  return _[a1 isVoiceControlRunning];
}

id objc_msgSend_isVoiceOverGeneratedContent(void *a1, const char *a2, ...)
{
  return _[a1 isVoiceOverGeneratedContent];
}

id objc_msgSend_isVoiceOverTouchPreferenceEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isVoiceOverTouchPreferenceEnabled];
}

id objc_msgSend_isVolumeSound(void *a1, const char *a2, ...)
{
  return _[a1 isVolumeSound];
}

id objc_msgSend_isWestern(void *a1, const char *a2, ...)
{
  return _[a1 isWestern];
}

id objc_msgSend_isWesternTextForNonWesternLanguage_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWesternTextForNonWesternLanguage:language:");
}

id objc_msgSend_isWirelessRoutePicked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWirelessRoutePicked:");
}

id objc_msgSend_isWordBackspaceEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWordBackspaceEvent:");
}

id objc_msgSend_isWordDescriptionOn(void *a1, const char *a2, ...)
{
  return _[a1 isWordDescriptionOn];
}

id objc_msgSend_isolatedWindow(void *a1, const char *a2, ...)
{
  return _[a1 isolatedWindow];
}

id objc_msgSend_itemChooserName(void *a1, const char *a2, ...)
{
  return _[a1 itemChooserName];
}

id objc_msgSend_itemCount(void *a1, const char *a2, ...)
{
  return _[a1 itemCount];
}

id objc_msgSend_itemSource(void *a1, const char *a2, ...)
{
  return _[a1 itemSource];
}

id objc_msgSend_itemSource_didFilter_didSwitchFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemSource:didFilter:didSwitchFocus:");
}

id objc_msgSend_itemSource_didSelect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemSource:didSelect:");
}

id objc_msgSend_itemsLoaded(void *a1, const char *a2, ...)
{
  return _[a1 itemsLoaded];
}

id objc_msgSend_jindoAppBundleIndentifiers(void *a1, const char *a2, ...)
{
  return _[a1 jindoAppBundleIndentifiers];
}

id objc_msgSend_jumpToTableIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jumpToTableIndex:");
}

id objc_msgSend_keyChord(void *a1, const char *a2, ...)
{
  return _[a1 keyChord];
}

id objc_msgSend_keyChordWithKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyChordWithKeys:");
}

id objc_msgSend_keyChordWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyChordWithString:");
}

id objc_msgSend_keyCode(void *a1, const char *a2, ...)
{
  return _[a1 keyCode];
}

id objc_msgSend_keyDown(void *a1, const char *a2, ...)
{
  return _[a1 keyDown];
}

id objc_msgSend_keyDownInfo(void *a1, const char *a2, ...)
{
  return _[a1 keyDownInfo];
}

id objc_msgSend_keyEventWithCommand_keyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyEventWithCommand:keyInfo:");
}

id objc_msgSend_keyEventWithCommand_keyInfo_otherInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyEventWithCommand:keyInfo:otherInfo:");
}

id objc_msgSend_keyInfo(void *a1, const char *a2, ...)
{
  return _[a1 keyInfo];
}

id objc_msgSend_keyRepresentationWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyRepresentationWithType:");
}

id objc_msgSend_keyString(void *a1, const char *a2, ...)
{
  return _[a1 keyString];
}

id objc_msgSend_keyUp(void *a1, const char *a2, ...)
{
  return _[a1 keyUp];
}

id objc_msgSend_keyboardElement(void *a1, const char *a2, ...)
{
  return _[a1 keyboardElement];
}

id objc_msgSend_keyboardEventForKeyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardEventForKeyInfo:");
}

id objc_msgSend_keyboardKeyAllowsTouchTyping(void *a1, const char *a2, ...)
{
  return _[a1 keyboardKeyAllowsTouchTyping];
}

id objc_msgSend_keyboardKeyPenumbra_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardKeyPenumbra:");
}

id objc_msgSend_keyboardLanguageHint(void *a1, const char *a2, ...)
{
  return _[a1 keyboardLanguageHint];
}

id objc_msgSend_keyboardManager(void *a1, const char *a2, ...)
{
  return _[a1 keyboardManager];
}

id objc_msgSend_keyboardOrientation(void *a1, const char *a2, ...)
{
  return _[a1 keyboardOrientation];
}

id objc_msgSend_keyboardPressInfo(void *a1, const char *a2, ...)
{
  return _[a1 keyboardPressInfo];
}

id objc_msgSend_keyboardShortcutKeyChordWithInfo_characters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardShortcutKeyChordWithInfo:characters:");
}

id objc_msgSend_keypressCallback(void *a1, const char *a2, ...)
{
  return _[a1 keypressCallback];
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _[a1 label];
}

id objc_msgSend_labeledTouchContainer(void *a1, const char *a2, ...)
{
  return _[a1 labeledTouchContainer];
}

id objc_msgSend_langMap(void *a1, const char *a2, ...)
{
  return _[a1 langMap];
}

id objc_msgSend_language(void *a1, const char *a2, ...)
{
  return _[a1 language];
}

id objc_msgSend_languageCode(void *a1, const char *a2, ...)
{
  return _[a1 languageCode];
}

id objc_msgSend_languageRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 languageRotorItems];
}

id objc_msgSend_languageTranslator(void *a1, const char *a2, ...)
{
  return _[a1 languageTranslator];
}

id objc_msgSend_languages(void *a1, const char *a2, ...)
{
  return _[a1 languages];
}

id objc_msgSend_laserEnabled(void *a1, const char *a2, ...)
{
  return _[a1 laserEnabled];
}

id objc_msgSend_lastAction(void *a1, const char *a2, ...)
{
  return _[a1 lastAction];
}

id objc_msgSend_lastAttemptToShowContextMenuTime(void *a1, const char *a2, ...)
{
  return _[a1 lastAttemptToShowContextMenuTime];
}

id objc_msgSend_lastBlockedRequestBySiriOrDictationTime(void *a1, const char *a2, ...)
{
  return _[a1 lastBlockedRequestBySiriOrDictationTime];
}

id objc_msgSend_lastContainedElement(void *a1, const char *a2, ...)
{
  return _[a1 lastContainedElement];
}

id objc_msgSend_lastContainerForCustomRotorHint(void *a1, const char *a2, ...)
{
  return _[a1 lastContainerForCustomRotorHint];
}

id objc_msgSend_lastDispatchedKeyEvent(void *a1, const char *a2, ...)
{
  return _[a1 lastDispatchedKeyEvent];
}

id objc_msgSend_lastDispatchedKeyEventTime(void *a1, const char *a2, ...)
{
  return _[a1 lastDispatchedKeyEventTime];
}

id objc_msgSend_lastDuckingDisablementSessionStart(void *a1, const char *a2, ...)
{
  return _[a1 lastDuckingDisablementSessionStart];
}

id objc_msgSend_lastElementBlockquoteLevel(void *a1, const char *a2, ...)
{
  return _[a1 lastElementBlockquoteLevel];
}

id objc_msgSend_lastElementChangeAction(void *a1, const char *a2, ...)
{
  return _[a1 lastElementChangeAction];
}

id objc_msgSend_lastElementChangeTime(void *a1, const char *a2, ...)
{
  return _[a1 lastElementChangeTime];
}

id objc_msgSend_lastElementForAttemptToShowContextMenu(void *a1, const char *a2, ...)
{
  return _[a1 lastElementForAttemptToShowContextMenu];
}

id objc_msgSend_lastElementHeadingLevel(void *a1, const char *a2, ...)
{
  return _[a1 lastElementHeadingLevel];
}

id objc_msgSend_lastElementInApplication(void *a1, const char *a2, ...)
{
  return _[a1 lastElementInApplication];
}

id objc_msgSend_lastElementInStatusBar(void *a1, const char *a2, ...)
{
  return _[a1 lastElementInStatusBar];
}

id objc_msgSend_lastEventCommand(void *a1, const char *a2, ...)
{
  return _[a1 lastEventCommand];
}

id objc_msgSend_lastEventOccurred(void *a1, const char *a2, ...)
{
  return _[a1 lastEventOccurred];
}

id objc_msgSend_lastFetchedElement(void *a1, const char *a2, ...)
{
  return _[a1 lastFetchedElement];
}

id objc_msgSend_lastHitTestNearBorder(void *a1, const char *a2, ...)
{
  return _[a1 lastHitTestNearBorder];
}

id objc_msgSend_lastHomeButtonPress(void *a1, const char *a2, ...)
{
  return _[a1 lastHomeButtonPress];
}

id objc_msgSend_lastHomeButtonPressTime(void *a1, const char *a2, ...)
{
  return _[a1 lastHomeButtonPressTime];
}

id objc_msgSend_lastIndex(void *a1, const char *a2, ...)
{
  return _[a1 lastIndex];
}

id objc_msgSend_lastItemChooserSearchTerm(void *a1, const char *a2, ...)
{
  return _[a1 lastItemChooserSearchTerm];
}

id objc_msgSend_lastKeyboardKeyPress(void *a1, const char *a2, ...)
{
  return _[a1 lastKeyboardKeyPress];
}

id objc_msgSend_lastLayoutChangeNotificationTime(void *a1, const char *a2, ...)
{
  return _[a1 lastLayoutChangeNotificationTime];
}

id objc_msgSend_lastLockButtonPress(void *a1, const char *a2, ...)
{
  return _[a1 lastLockButtonPress];
}

id objc_msgSend_lastLockButtonPressTime(void *a1, const char *a2, ...)
{
  return _[a1 lastLockButtonPressTime];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastPauseSpeechAndHapticsStart(void *a1, const char *a2, ...)
{
  return _[a1 lastPauseSpeechAndHapticsStart];
}

id objc_msgSend_lastPlayheadPosition(void *a1, const char *a2, ...)
{
  return _[a1 lastPlayheadPosition];
}

id objc_msgSend_lastPrintBrailleCharacter(void *a1, const char *a2, ...)
{
  return _[a1 lastPrintBrailleCharacter];
}

id objc_msgSend_lastProgressNotificationTime(void *a1, const char *a2, ...)
{
  return _[a1 lastProgressNotificationTime];
}

id objc_msgSend_lastRefreshTrigger(void *a1, const char *a2, ...)
{
  return _[a1 lastRefreshTrigger];
}

id objc_msgSend_lastReleasedToSystemKeyEvent(void *a1, const char *a2, ...)
{
  return _[a1 lastReleasedToSystemKeyEvent];
}

id objc_msgSend_lastReleasedToSystemKeyEventTime(void *a1, const char *a2, ...)
{
  return _[a1 lastReleasedToSystemKeyEventTime];
}

id objc_msgSend_lastRequestBlockedBySiriOrDictation(void *a1, const char *a2, ...)
{
  return _[a1 lastRequestBlockedBySiriOrDictation];
}

id objc_msgSend_lastScreenChangeNotificationTime(void *a1, const char *a2, ...)
{
  return _[a1 lastScreenChangeNotificationTime];
}

id objc_msgSend_lastScreenChangeTime(void *a1, const char *a2, ...)
{
  return _[a1 lastScreenChangeTime];
}

id objc_msgSend_lastSearchForElementsTime(void *a1, const char *a2, ...)
{
  return _[a1 lastSearchForElementsTime];
}

id objc_msgSend_lastSearchPoint(void *a1, const char *a2, ...)
{
  return _[a1 lastSearchPoint];
}

id objc_msgSend_lastSeenContextDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenContextDescriptors];
}

id objc_msgSend_lastSeenLineAndColumn(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenLineAndColumn];
}

id objc_msgSend_lastSystemRequest(void *a1, const char *a2, ...)
{
  return _[a1 lastSystemRequest];
}

id objc_msgSend_lastTelephonyCallActive(void *a1, const char *a2, ...)
{
  return _[a1 lastTelephonyCallActive];
}

id objc_msgSend_lastTouchLocationsByIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 lastTouchLocationsByIdentifier];
}

id objc_msgSend_lastTouchedDirectTouchElement(void *a1, const char *a2, ...)
{
  return _[a1 lastTouchedDirectTouchElement];
}

id objc_msgSend_lastTrackingUpdateAppsFailureApplication(void *a1, const char *a2, ...)
{
  return _[a1 lastTrackingUpdateAppsFailureApplication];
}

id objc_msgSend_lastTrackingUpdateAppsFailureTime(void *a1, const char *a2, ...)
{
  return _[a1 lastTrackingUpdateAppsFailureTime];
}

id objc_msgSend_lastUsedActivity(void *a1, const char *a2, ...)
{
  return _[a1 lastUsedActivity];
}

id objc_msgSend_lastUsedActivityTime(void *a1, const char *a2, ...)
{
  return _[a1 lastUsedActivityTime];
}

id objc_msgSend_lastUserElementTouchTime(void *a1, const char *a2, ...)
{
  return _[a1 lastUserElementTouchTime];
}

id objc_msgSend_lastValueChangeTime(void *a1, const char *a2, ...)
{
  return _[a1 lastValueChangeTime];
}

id objc_msgSend_lastVolumeDownButtonDownTime(void *a1, const char *a2, ...)
{
  return _[a1 lastVolumeDownButtonDownTime];
}

id objc_msgSend_lastVolumeDownButtonUpTime(void *a1, const char *a2, ...)
{
  return _[a1 lastVolumeDownButtonUpTime];
}

id objc_msgSend_lastVolumeUpButtonDownTime(void *a1, const char *a2, ...)
{
  return _[a1 lastVolumeUpButtonDownTime];
}

id objc_msgSend_lastVolumeUpButtonUpTime(void *a1, const char *a2, ...)
{
  return _[a1 lastVolumeUpButtonUpTime];
}

id objc_msgSend_launchAppWithDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchAppWithDisplayID:");
}

id objc_msgSend_launchContext(void *a1, const char *a2, ...)
{
  return _[a1 launchContext];
}

id objc_msgSend_launchVoiceOverImageExplorerViewServiceForResult_withData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchVoiceOverImageExplorerViewServiceForResult:withData:");
}

id objc_msgSend_launchVoiceOverQuickSettingsViewService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchVoiceOverQuickSettingsViewService:");
}

id objc_msgSend_launchableApps(void *a1, const char *a2, ...)
{
  return _[a1 launchableApps];
}

id objc_msgSend_leftDotPositions(void *a1, const char *a2, ...)
{
  return _[a1 leftDotPositions];
}

id objc_msgSend_leftDots(void *a1, const char *a2, ...)
{
  return _[a1 leftDots];
}

id objc_msgSend_leftDrifts(void *a1, const char *a2, ...)
{
  return _[a1 leftDrifts];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_letterCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 letterCharacterSet];
}

id objc_msgSend_liftVolumeDownButtonUp(void *a1, const char *a2, ...)
{
  return _[a1 liftVolumeDownButtonUp];
}

id objc_msgSend_liftVolumeUpButtonUp(void *a1, const char *a2, ...)
{
  return _[a1 liftVolumeUpButtonUp];
}

id objc_msgSend_limitToComponentType(void *a1, const char *a2, ...)
{
  return _[a1 limitToComponentType];
}

id objc_msgSend_lineFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineFromPosition:inDirection:");
}

id objc_msgSend_lineNumberAndColumnForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineNumberAndColumnForPoint:");
}

id objc_msgSend_lineNumberForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineNumberForPoint:");
}

id objc_msgSend_lineRangeForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineRangeForPosition:");
}

id objc_msgSend_lineRangeForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineRangeForRange:");
}

id objc_msgSend_lineStartPosition(void *a1, const char *a2, ...)
{
  return _[a1 lineStartPosition];
}

id objc_msgSend_linkRelationshipType(void *a1, const char *a2, ...)
{
  return _[a1 linkRelationshipType];
}

id objc_msgSend_linkedElement(void *a1, const char *a2, ...)
{
  return _[a1 linkedElement];
}

id objc_msgSend_linkedUIElements(void *a1, const char *a2, ...)
{
  return _[a1 linkedUIElements];
}

id objc_msgSend_listensPassively(void *a1, const char *a2, ...)
{
  return _[a1 listensPassively];
}

id objc_msgSend_literalStringMarkup_string_speakCap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "literalStringMarkup:string:speakCap:");
}

id objc_msgSend_liveRecognitionActive(void *a1, const char *a2, ...)
{
  return _[a1 liveRecognitionActive];
}

id objc_msgSend_liveRecognitionOverlayOpen(void *a1, const char *a2, ...)
{
  return _[a1 liveRecognitionOverlayOpen];
}

id objc_msgSend_liveRegionStatusEverSet(void *a1, const char *a2, ...)
{
  return _[a1 liveRegionStatusEverSet];
}

id objc_msgSend_liveRegionStatusForWebOrApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "liveRegionStatusForWebOrApp:");
}

id objc_msgSend_load(void *a1, const char *a2, ...)
{
  return _[a1 load];
}

id objc_msgSend_loadKeyboardMap(void *a1, const char *a2, ...)
{
  return _[a1 loadKeyboardMap];
}

id objc_msgSend_loadUIKit(void *a1, const char *a2, ...)
{
  return _[a1 loadUIKit];
}

id objc_msgSend_localOpaqueParent(void *a1, const char *a2, ...)
{
  return _[a1 localOpaqueParent];
}

id objc_msgSend_locale(void *a1, const char *a2, ...)
{
  return _[a1 locale];
}

id objc_msgSend_localeForLanguageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeForLanguageCode:");
}

id objc_msgSend_localeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 localeIdentifier];
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeWithLocaleIdentifier:");
}

id objc_msgSend_localizedCaseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedCaseInsensitiveCompare:");
}

id objc_msgSend_localizedCaseInsensitiveContainsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedCaseInsensitiveContainsString:");
}

id objc_msgSend_localizedCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedCompare:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedDetectedIconHint(void *a1, const char *a2, ...)
{
  return _[a1 localizedDetectedIconHint];
}

id objc_msgSend_localizedDetectedTextHint(void *a1, const char *a2, ...)
{
  return _[a1 localizedDetectedTextHint];
}

id objc_msgSend_localizedLanguage(void *a1, const char *a2, ...)
{
  return _[a1 localizedLanguage];
}

id objc_msgSend_localizedLowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 localizedLowercaseString];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_localizedNameWithFootprint(void *a1, const char *a2, ...)
{
  return _[a1 localizedNameWithFootprint];
}

id objc_msgSend_localizedNameWithService(void *a1, const char *a2, ...)
{
  return _[a1 localizedNameWithService];
}

id objc_msgSend_localizedScannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedScannerWithString:");
}

id objc_msgSend_localizedSegmentName(void *a1, const char *a2, ...)
{
  return _[a1 localizedSegmentName];
}

id objc_msgSend_localizedSegmentNameForSelection(void *a1, const char *a2, ...)
{
  return _[a1 localizedSegmentNameForSelection];
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringFromNumber_numberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringFromNumber:numberStyle:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_localizedVariant(void *a1, const char *a2, ...)
{
  return _[a1 localizedVariant];
}

id objc_msgSend_localizedWebRotorMap(void *a1, const char *a2, ...)
{
  return _[a1 localizedWebRotorMap];
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _[a1 location];
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockScreenDimmingTimer(void *a1, const char *a2, ...)
{
  return _[a1 lockScreenDimmingTimer];
}

id objc_msgSend_lockStateDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockStateDidChange:");
}

id objc_msgSend_logBSIUsageTimer(void *a1, const char *a2, ...)
{
  return _[a1 logBSIUsageTimer];
}

id objc_msgSend_logSoundPlayed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSoundPlayed:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longPressHandler(void *a1, const char *a2, ...)
{
  return _[a1 longPressHandler];
}

id objc_msgSend_longPressHostContextId(void *a1, const char *a2, ...)
{
  return _[a1 longPressHostContextId];
}

id objc_msgSend_lowercaseLetterCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseLetterCharacterSet];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_mainAccessQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainAccessQueue];
}

id objc_msgSend_mainAttributedString(void *a1, const char *a2, ...)
{
  return _[a1 mainAttributedString];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainQueue];
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _[a1 mainScreen];
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return _[a1 manager];
}

id objc_msgSend_mapDetailedInformationAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapDetailedInformationAtPoint:");
}

id objc_msgSend_mapFeatureType(void *a1, const char *a2, ...)
{
  return _[a1 mapFeatureType];
}

id objc_msgSend_mapSettingsPitchToSpeechPitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapSettingsPitchToSpeechPitch:");
}

id objc_msgSend_mapsExplorationBeginFromCurrentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapsExplorationBeginFromCurrentElement:");
}

id objc_msgSend_mapsExplorationChangeVerbosity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapsExplorationChangeVerbosity:");
}

id objc_msgSend_mapsExplorationContinueWithVertexIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapsExplorationContinueWithVertexIndex:");
}

id objc_msgSend_mapsExplorationCurrentIntersectionDescription(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationCurrentIntersectionDescription];
}

id objc_msgSend_mapsExplorationCurrentLocation(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationCurrentLocation];
}

id objc_msgSend_mapsExplorationCurrentRoadsWithAngles(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationCurrentRoadsWithAngles];
}

id objc_msgSend_mapsExplorationEnd(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationEnd];
}

id objc_msgSend_mapsExplorationInputActive(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationInputActive];
}

id objc_msgSend_mapsExplorationIsActive(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationIsActive];
}

id objc_msgSend_mapsExplorationIsPending(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationIsPending];
}

id objc_msgSend_mapsExplorationRecordTouchpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapsExplorationRecordTouchpoint:");
}

id objc_msgSend_matchBlock(void *a1, const char *a2, ...)
{
  return _[a1 matchBlock];
}

id objc_msgSend_matchesInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesInString:options:range:");
}

id objc_msgSend_mathBrailleDescription(void *a1, const char *a2, ...)
{
  return _[a1 mathBrailleDescription];
}

id objc_msgSend_mathEquationDescription(void *a1, const char *a2, ...)
{
  return _[a1 mathEquationDescription];
}

id objc_msgSend_mathExpressionWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mathExpressionWithDictionary:");
}

id objc_msgSend_mathSegmentsWithGranularityLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mathSegmentsWithGranularityLevel:");
}

id objc_msgSend_mathSummary(void *a1, const char *a2, ...)
{
  return _[a1 mathSummary];
}

id objc_msgSend_maxValue(void *a1, const char *a2, ...)
{
  return _[a1 maxValue];
}

id objc_msgSend_maximumDepth(void *a1, const char *a2, ...)
{
  return _[a1 maximumDepth];
}

id objc_msgSend_mediaAnalysisElement(void *a1, const char *a2, ...)
{
  return _[a1 mediaAnalysisElement];
}

id objc_msgSend_mediaAnalysisFrame(void *a1, const char *a2, ...)
{
  return _[a1 mediaAnalysisFrame];
}

id objc_msgSend_mediaAnalysisImageCaptionFeatures(void *a1, const char *a2, ...)
{
  return _[a1 mediaAnalysisImageCaptionFeatures];
}

id objc_msgSend_mediaAnalysisOptions(void *a1, const char *a2, ...)
{
  return _[a1 mediaAnalysisOptions];
}

id objc_msgSend_mediaKeyCode(void *a1, const char *a2, ...)
{
  return _[a1 mediaKeyCode];
}

id objc_msgSend_medusaApps(void *a1, const char *a2, ...)
{
  return _[a1 medusaApps];
}

id objc_msgSend_messageForMatchingItemsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageForMatchingItemsCount:");
}

id objc_msgSend_messageForNoMatchingItems(void *a1, const char *a2, ...)
{
  return _[a1 messageForNoMatchingItems];
}

id objc_msgSend_messageForSelectingItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageForSelectingItem:");
}

id objc_msgSend_middleDot(void *a1, const char *a2, ...)
{
  return _[a1 middleDot];
}

id objc_msgSend_minValue(void *a1, const char *a2, ...)
{
  return _[a1 minValue];
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _[a1 mode];
}

id objc_msgSend_modifiedInput(void *a1, const char *a2, ...)
{
  return _[a1 modifiedInput];
}

id objc_msgSend_modifierKeyChoiceForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifierKeyChoiceForElement:");
}

id objc_msgSend_modifierKeyLockEnabled(void *a1, const char *a2, ...)
{
  return _[a1 modifierKeyLockEnabled];
}

id objc_msgSend_modifierKeys(void *a1, const char *a2, ...)
{
  return _[a1 modifierKeys];
}

id objc_msgSend_modifierState(void *a1, const char *a2, ...)
{
  return _[a1 modifierState];
}

id objc_msgSend_modifiers(void *a1, const char *a2, ...)
{
  return _[a1 modifiers];
}

id objc_msgSend_modifiersChanged(void *a1, const char *a2, ...)
{
  return _[a1 modifiersChanged];
}

id objc_msgSend_moreContentOutputFeedback(void *a1, const char *a2, ...)
{
  return _[a1 moreContentOutputFeedback];
}

id objc_msgSend_mostBasePunctuationGroupForGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostBasePunctuationGroupForGroup:");
}

id objc_msgSend_mostRecentElementCommunity(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentElementCommunity];
}

id objc_msgSend_movePointerToPoint_contextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "movePointerToPoint:contextId:");
}

id objc_msgSend_moveToElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveToElement:");
}

id objc_msgSend_moveToElementMatchingRotorType_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveToElementMatchingRotorType:inDirection:");
}

id objc_msgSend_moveToFirstOutput(void *a1, const char *a2, ...)
{
  return _[a1 moveToFirstOutput];
}

id objc_msgSend_moveToLastOutput(void *a1, const char *a2, ...)
{
  return _[a1 moveToLastOutput];
}

id objc_msgSend_moveToNextCandidate(void *a1, const char *a2, ...)
{
  return _[a1 moveToNextCandidate];
}

id objc_msgSend_moveToNextOutput(void *a1, const char *a2, ...)
{
  return _[a1 moveToNextOutput];
}

id objc_msgSend_moveToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveToPoint:");
}

id objc_msgSend_moveToPreviousCandidate(void *a1, const char *a2, ...)
{
  return _[a1 moveToPreviousCandidate];
}

id objc_msgSend_moveToPreviousOutput(void *a1, const char *a2, ...)
{
  return _[a1 moveToPreviousOutput];
}

id objc_msgSend_movementManager(void *a1, const char *a2, ...)
{
  return _[a1 movementManager];
}

id objc_msgSend_multiTapFrame(void *a1, const char *a2, ...)
{
  return _[a1 multiTapFrame];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_mutableCopyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopyWithZone:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameForSpokenAnnouncementOfBrailleTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameForSpokenAnnouncementOfBrailleTable:");
}

id objc_msgSend_nameSearcher(void *a1, const char *a2, ...)
{
  return _[a1 nameSearcher];
}

id objc_msgSend_nameSearcherEntriesPassingSearchFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameSearcherEntriesPassingSearchFrom:");
}

id objc_msgSend_nameSearcherHint(void *a1, const char *a2, ...)
{
  return _[a1 nameSearcherHint];
}

id objc_msgSend_nameSearcherMonitorElement(void *a1, const char *a2, ...)
{
  return _[a1 nameSearcherMonitorElement];
}

id objc_msgSend_nativeFocusElement(void *a1, const char *a2, ...)
{
  return _[a1 nativeFocusElement];
}

id objc_msgSend_nativeFocusPreferredElement(void *a1, const char *a2, ...)
{
  return _[a1 nativeFocusPreferredElement];
}

id objc_msgSend_navigateImagesOption(void *a1, const char *a2, ...)
{
  return _[a1 navigateImagesOption];
}

id objc_msgSend_navigationDirection(void *a1, const char *a2, ...)
{
  return _[a1 navigationDirection];
}

id objc_msgSend_navigationStyle(void *a1, const char *a2, ...)
{
  return _[a1 navigationStyle];
}

id objc_msgSend_navigationStyleHonorsGroups(void *a1, const char *a2, ...)
{
  return _[a1 navigationStyleHonorsGroups];
}

id objc_msgSend_needsForceCacheUpdate(void *a1, const char *a2, ...)
{
  return _[a1 needsForceCacheUpdate];
}

id objc_msgSend_networkName(void *a1, const char *a2, ...)
{
  return _[a1 networkName];
}

id objc_msgSend_neuterUpdates(void *a1, const char *a2, ...)
{
  return _[a1 neuterUpdates];
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 newlineCharacterSet];
}

id objc_msgSend_newsestCompatibleImageCaptionModelAssetFromAssets_withStage_language_isInstalled_isDownloadable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newsestCompatibleImageCaptionModelAssetFromAssets:withStage:language:isInstalled:isDownloadable:");
}

id objc_msgSend_nextContainer(void *a1, const char *a2, ...)
{
  return _[a1 nextContainer];
}

id objc_msgSend_nextCursorRangeInDirection_unit_outputRange_currentCursorRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextCursorRangeInDirection:unit:outputRange:currentCursorRange:");
}

id objc_msgSend_nextElement(void *a1, const char *a2, ...)
{
  return _[a1 nextElement];
}

id objc_msgSend_nextElementToFocus(void *a1, const char *a2, ...)
{
  return _[a1 nextElementToFocus];
}

id objc_msgSend_nextElementsWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextElementsWithParameters:");
}

id objc_msgSend_nextGuideElement(void *a1, const char *a2, ...)
{
  return _[a1 nextGuideElement];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_nextSearchPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextSearchPoint:");
}

id objc_msgSend_nextSegment(void *a1, const char *a2, ...)
{
  return _[a1 nextSegment];
}

id objc_msgSend_nextStringToSpeakOnScreenChange(void *a1, const char *a2, ...)
{
  return _[a1 nextStringToSpeakOnScreenChange];
}

id objc_msgSend_nextTextNavigationElement(void *a1, const char *a2, ...)
{
  return _[a1 nextTextNavigationElement];
}

id objc_msgSend_nonPersistentUniqueId(void *a1, const char *a2, ...)
{
  return _[a1 nonPersistentUniqueId];
}

id objc_msgSend_normalizedEventRepresentation_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalizedEventRepresentation:scale:");
}

id objc_msgSend_notePostedEventForUnitTesting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notePostedEventForUnitTesting:");
}

id objc_msgSend_notificationCount(void *a1, const char *a2, ...)
{
  return _[a1 notificationCount];
}

id objc_msgSend_notificationSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationSummary:");
}

id objc_msgSend_notificationsWhenLockedOutput(void *a1, const char *a2, ...)
{
  return _[a1 notificationsWhenLockedOutput];
}

id objc_msgSend_notifyActionComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyActionComplete:");
}

id objc_msgSend_notifyAnnouncementFinishedWithString_didFinishSuccessfully_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyAnnouncementFinishedWithString:didFinishSuccessfully:");
}

id objc_msgSend_notifyElementOfPlaybackProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyElementOfPlaybackProgress:");
}

id objc_msgSend_notifyElementOfPlaybackStatusChange(void *a1, const char *a2, ...)
{
  return _[a1 notifyElementOfPlaybackStatusChange];
}

id objc_msgSend_notifyRangeWillOutput_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyRangeWillOutput:container:");
}

id objc_msgSend_notifyZoomFocusDidChangeWithType_rect_contextId_displayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyZoomFocusDidChangeWithType:rect:contextId:displayId:");
}

id objc_msgSend_notifyZoomWillHideBrailleInputUI(void *a1, const char *a2, ...)
{
  return _[a1 notifyZoomWillHideBrailleInputUI];
}

id objc_msgSend_notifyZoomWillShowBrailleInputUI(void *a1, const char *a2, ...)
{
  return _[a1 notifyZoomWillShowBrailleInputUI];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberFeedback(void *a1, const char *a2, ...)
{
  return _[a1 numberFeedback];
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberOfActions(void *a1, const char *a2, ...)
{
  return _[a1 numberOfActions];
}

id objc_msgSend_numberOfActionsWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfActionsWithString:");
}

id objc_msgSend_numberOfChannels(void *a1, const char *a2, ...)
{
  return _[a1 numberOfChannels];
}

id objc_msgSend_numberOfRanges(void *a1, const char *a2, ...)
{
  return _[a1 numberOfRanges];
}

id objc_msgSend_numberOfTextLinesInPlanarBraille(void *a1, const char *a2, ...)
{
  return _[a1 numberOfTextLinesInPlanarBraille];
}

id objc_msgSend_numberWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithAXAttribute:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForIndex:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectForRange_withParameterizedAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForRange:withParameterizedAttribute:");
}

id objc_msgSend_objectForVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForVariant:");
}

id objc_msgSend_objectWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithAXAttribute:");
}

id objc_msgSend_objectWithAXAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithAXAttribute:parameter:");
}

id objc_msgSend_objectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsAtIndexes:");
}

id objc_msgSend_onHold(void *a1, const char *a2, ...)
{
  return _[a1 onHold];
}

id objc_msgSend_opaqueElementInDirection_searchType_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "opaqueElementInDirection:searchType:range:");
}

id objc_msgSend_opaqueElementInDirection_searchType_range_peeking_startOpaqueElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "opaqueElementInDirection:searchType:range:peeking:startOpaqueElement:");
}

id objc_msgSend_opaqueParent(void *a1, const char *a2, ...)
{
  return _[a1 opaqueParent];
}

id objc_msgSend_openAppSwitcher(void *a1, const char *a2, ...)
{
  return _[a1 openAppSwitcher];
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_orbValue(void *a1, const char *a2, ...)
{
  return _[a1 orbValue];
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return _[a1 orderedSet];
}

id objc_msgSend_orderedSetWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithArray:");
}

id objc_msgSend_orderedSetWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithObject:");
}

id objc_msgSend_orderedSetWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithObjects:");
}

id objc_msgSend_organizedActionsByCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "organizedActionsByCategory:");
}

id objc_msgSend_orientation(void *a1, const char *a2, ...)
{
  return _[a1 orientation];
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return _[a1 origin];
}

id objc_msgSend_originalCharacters(void *a1, const char *a2, ...)
{
  return _[a1 originalCharacters];
}

id objc_msgSend_originalElementforElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originalElementforElement:");
}

id objc_msgSend_originalLabel(void *a1, const char *a2, ...)
{
  return _[a1 originalLabel];
}

id objc_msgSend_originalString(void *a1, const char *a2, ...)
{
  return _[a1 originalString];
}

id objc_msgSend_originalType(void *a1, const char *a2, ...)
{
  return _[a1 originalType];
}

id objc_msgSend_originationType(void *a1, const char *a2, ...)
{
  return _[a1 originationType];
}

id objc_msgSend_outermostLocalOpaqueParent(void *a1, const char *a2, ...)
{
  return _[a1 outermostLocalOpaqueParent];
}

id objc_msgSend_outputActionID(void *a1, const char *a2, ...)
{
  return _[a1 outputActionID];
}

id objc_msgSend_outputActions(void *a1, const char *a2, ...)
{
  return _[a1 outputActions];
}

id objc_msgSend_outputDevices(void *a1, const char *a2, ...)
{
  return _[a1 outputDevices];
}

id objc_msgSend_outputDisabled(void *a1, const char *a2, ...)
{
  return _[a1 outputDisabled];
}

id objc_msgSend_outputEvents(void *a1, const char *a2, ...)
{
  return _[a1 outputEvents];
}

id objc_msgSend_outputForLatestInput(void *a1, const char *a2, ...)
{
  return _[a1 outputForLatestInput];
}

id objc_msgSend_outputHoursAndMinutes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputHoursAndMinutes:");
}

id objc_msgSend_outputManager(void *a1, const char *a2, ...)
{
  return _[a1 outputManager];
}

id objc_msgSend_outputManager_willProcessNextRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputManager:willProcessNextRequest:");
}

id objc_msgSend_outputManagerDidFinishProcessingQueuedRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputManagerDidFinishProcessingQueuedRequests:");
}

id objc_msgSend_outputManagerIfExists(void *a1, const char *a2, ...)
{
  return _[a1 outputManagerIfExists];
}

id objc_msgSend_outputMinutes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputMinutes:");
}

id objc_msgSend_outputMutedActivityLastToggleTime(void *a1, const char *a2, ...)
{
  return _[a1 outputMutedActivityLastToggleTime];
}

id objc_msgSend_outputMutedActivityValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputMutedActivityValue:");
}

id objc_msgSend_outputRangeForTextSegmentUnit_direction_string_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputRangeForTextSegmentUnit:direction:string:element:");
}

id objc_msgSend_outputRequest(void *a1, const char *a2, ...)
{
  return _[a1 outputRequest];
}

id objc_msgSend_outputRequestFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputRequestFinished:");
}

id objc_msgSend_outputTextSegmentForRange_string_element_usePhonetics_segment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputTextSegmentForRange:string:element:usePhonetics:segment:");
}

id objc_msgSend_outputValueChangeForNewValue_oldValue_isFirstResponderValid_selectedTextRange_oldSelectedTextRange_shouldEchoDeletion_optionalValueChangeType_derivedValueChangeType_didHitBorder_isBreakSpaceCharacter_isSingleInsert_selectionDeleted_feedbackType_textOperationOccurred_lastKeyboardKeyPress_isSingleCharacterInsertOrDelete_singleInsertDeleteAttString_singleInsertDeleteString_isSingleCharacterUpdate_wordRangeToFindMisspelled_pasteOperationSucceeded_processApostrophes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputValueChangeForNewValue:oldValue:isFirstResponderValid:selectedTextRange:oldSelectedTextRange:shouldEchoDeletion:optionalValueChangeType:derivedValueChangeType:didHitBorder:isBreakSpaceCharacter:isSingleInsert:selectionDeleted:feedbackType:textOperationOccurred:lastKeyboardKeyPress:isSingleCharacterInsertOrDelete:singleInsertDeleteAttString:singleInsertDeleteString:isSingleCharacterUpdate:wordRangeToFindMisspelled:pasteOperationSucceeded:processApostrophes:");
}

id objc_msgSend_outputVariants(void *a1, const char *a2, ...)
{
  return _[a1 outputVariants];
}

id objc_msgSend_outputVoice(void *a1, const char *a2, ...)
{
  return _[a1 outputVoice];
}

id objc_msgSend_outputs(void *a1, const char *a2, ...)
{
  return _[a1 outputs];
}

id objc_msgSend_overridePrintBrailleWithAllSixDots(void *a1, const char *a2, ...)
{
  return _[a1 overridePrintBrailleWithAllSixDots];
}

id objc_msgSend_overridePropertiesForTesting(void *a1, const char *a2, ...)
{
  return _[a1 overridePropertiesForTesting];
}

id objc_msgSend_overridesVoiceOverInstructions(void *a1, const char *a2, ...)
{
  return _[a1 overridesVoiceOverInstructions];
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _[a1 owner];
}

id objc_msgSend_page(void *a1, const char *a2, ...)
{
  return _[a1 page];
}

id objc_msgSend_pageContent(void *a1, const char *a2, ...)
{
  return _[a1 pageContent];
}

id objc_msgSend_pageTextMarkerRange(void *a1, const char *a2, ...)
{
  return _[a1 pageTextMarkerRange];
}

id objc_msgSend_panDisplayBeginning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panDisplayBeginning:");
}

id objc_msgSend_panDisplayEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panDisplayEnd:");
}

id objc_msgSend_panDisplayLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panDisplayLeft:");
}

id objc_msgSend_panDisplayRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panDisplayRight:");
}

id objc_msgSend_panEnabled(void *a1, const char *a2, ...)
{
  return _[a1 panEnabled];
}

id objc_msgSend_paragraphFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paragraphFromPosition:inDirection:");
}

id objc_msgSend_parentTableOrCollectionView(void *a1, const char *a2, ...)
{
  return _[a1 parentTableOrCollectionView];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pathForResource_ofType_inDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:inDirectory:");
}

id objc_msgSend_pathIndex(void *a1, const char *a2, ...)
{
  return _[a1 pathIndex];
}

id objc_msgSend_pathIndexMask(void *a1, const char *a2, ...)
{
  return _[a1 pathIndexMask];
}

id objc_msgSend_pathLocation(void *a1, const char *a2, ...)
{
  return _[a1 pathLocation];
}

id objc_msgSend_pathProximity(void *a1, const char *a2, ...)
{
  return _[a1 pathProximity];
}

id objc_msgSend_paths(void *a1, const char *a2, ...)
{
  return _[a1 paths];
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return _[a1 pause];
}

id objc_msgSend_pauseSpeakingAtBoundary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseSpeakingAtBoundary:");
}

id objc_msgSend_pauseSpeakingAtNextBoundary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseSpeakingAtNextBoundary:error:");
}

id objc_msgSend_pauseSpeechAndHaptics(void *a1, const char *a2, ...)
{
  return _[a1 pauseSpeechAndHaptics];
}

id objc_msgSend_pauseStringForType_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseStringForType:voiceIdentifier:rate:");
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _[a1 payload];
}

id objc_msgSend_peeking(void *a1, const char *a2, ...)
{
  return _[a1 peeking];
}

id objc_msgSend_pendingDownEvent(void *a1, const char *a2, ...)
{
  return _[a1 pendingDownEvent];
}

id objc_msgSend_pendingInputString(void *a1, const char *a2, ...)
{
  return _[a1 pendingInputString];
}

id objc_msgSend_performAXAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAXAction:");
}

id objc_msgSend_performAXAction_withValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAXAction:withValue:");
}

id objc_msgSend_performAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAction:");
}

id objc_msgSend_performAction_owner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAction:owner:");
}

id objc_msgSend_performAction_withValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAction:withValue:");
}

id objc_msgSend_performAsyncBlock_forThreadKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAsyncBlock:forThreadKey:");
}

id objc_msgSend_performAsynchronousWritingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAsynchronousWritingBlock:");
}

id objc_msgSend_performCustomActionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performCustomActionWithIdentifier:");
}

id objc_msgSend_performCustomActionWithIdentifier_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performCustomActionWithIdentifier:data:");
}

id objc_msgSend_performCustomBackspace(void *a1, const char *a2, ...)
{
  return _[a1 performCustomBackspace];
}

id objc_msgSend_performCustomWordBackspace(void *a1, const char *a2, ...)
{
  return _[a1 performCustomWordBackspace];
}

id objc_msgSend_performDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 performDoubleTap];
}

id objc_msgSend_performEscape(void *a1, const char *a2, ...)
{
  return _[a1 performEscape];
}

id objc_msgSend_performMedusaGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMedusaGesture:");
}

id objc_msgSend_performNextBrailleTableCommand(void *a1, const char *a2, ...)
{
  return _[a1 performNextBrailleTableCommand];
}

id objc_msgSend_performNextKeyboardLanguage(void *a1, const char *a2, ...)
{
  return _[a1 performNextKeyboardLanguage];
}

id objc_msgSend_performNextLanguageButtonPress(void *a1, const char *a2, ...)
{
  return _[a1 performNextLanguageButtonPress];
}

id objc_msgSend_performPunctuationTranslation(void *a1, const char *a2, ...)
{
  return _[a1 performPunctuationTranslation];
}

id objc_msgSend_performScribbleAction(void *a1, const char *a2, ...)
{
  return _[a1 performScribbleAction];
}

id objc_msgSend_performSelector_onTarget_cancelMask_count_objects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:onTarget:cancelMask:count:objects:");
}

id objc_msgSend_performSelector_onTarget_count_objects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:onTarget:count:objects:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:");
}

id objc_msgSend_performSelector_withThreadKey_count_objects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withThreadKey:count:objects:");
}

id objc_msgSend_performSelector_withThreadKey_waitTime_cancelMask_count_objects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withThreadKey:waitTime:cancelMask:count:objects:");
}

id objc_msgSend_performSelectorOnMainThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelectorOnMainThread:withObject:waitUntilDone:");
}

id objc_msgSend_performShortcut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performShortcut:");
}

id objc_msgSend_performSimpleTap(void *a1, const char *a2, ...)
{
  return _[a1 performSimpleTap];
}

id objc_msgSend_performSimpleTap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSimpleTap:");
}

id objc_msgSend_performSimpleTapAtPoint_forElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSimpleTapAtPoint:forElement:");
}

id objc_msgSend_performSimpleTapAtPoint_withForce_withContextId_withDelay_forElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSimpleTapAtPoint:withForce:withContextId:withDelay:forElement:");
}

id objc_msgSend_performSynchronousWritingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSynchronousWritingBlock:");
}

id objc_msgSend_performTapAtPoint_withForce_playSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTapAtPoint:withForce:playSound:");
}

id objc_msgSend_performTextOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTextOperation:");
}

id objc_msgSend_performWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithContext:");
}

id objc_msgSend_perkinsChordKeyboardInputEnabled(void *a1, const char *a2, ...)
{
  return _[a1 perkinsChordKeyboardInputEnabled];
}

id objc_msgSend_perkinsKeyboardInputEnabled(void *a1, const char *a2, ...)
{
  return _[a1 perkinsKeyboardInputEnabled];
}

id objc_msgSend_persistentKeyModifiers(void *a1, const char *a2, ...)
{
  return _[a1 persistentKeyModifiers];
}

id objc_msgSend_phoneNumberWithoutFormattingCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneNumberWithoutFormattingCharacters:");
}

id objc_msgSend_phonemes(void *a1, const char *a2, ...)
{
  return _[a1 phonemes];
}

id objc_msgSend_phoneticStringForCharacter_andVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneticStringForCharacter:andVoiceIdentifier:");
}

id objc_msgSend_phoneticStringForCharacter_forLanguage_andVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneticStringForCharacter:forLanguage:andVoiceIdentifier:");
}

id objc_msgSend_photoDescription(void *a1, const char *a2, ...)
{
  return _[a1 photoDescription];
}

id objc_msgSend_photoLibraryURL(void *a1, const char *a2, ...)
{
  return _[a1 photoLibraryURL];
}

id objc_msgSend_phrase(void *a1, const char *a2, ...)
{
  return _[a1 phrase];
}

id objc_msgSend_pickableRoutesForCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pickableRoutesForCategory:");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_pitch(void *a1, const char *a2, ...)
{
  return _[a1 pitch];
}

id objc_msgSend_planarBrailleElements(void *a1, const char *a2, ...)
{
  return _[a1 planarBrailleElements];
}

id objc_msgSend_planarCacheLock(void *a1, const char *a2, ...)
{
  return _[a1 planarCacheLock];
}

id objc_msgSend_planarNeighborhoodCache(void *a1, const char *a2, ...)
{
  return _[a1 planarNeighborhoodCache];
}

id objc_msgSend_planarPanDisplayLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "planarPanDisplayLeft:");
}

id objc_msgSend_planarPanDisplayRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "planarPanDisplayRight:");
}

id objc_msgSend_play(void *a1, const char *a2, ...)
{
  return _[a1 play];
}

id objc_msgSend_playAvoidingSSS(void *a1, const char *a2, ...)
{
  return _[a1 playAvoidingSSS];
}

id objc_msgSend_playHapticFeedbackForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playHapticFeedbackForType:");
}

id objc_msgSend_playHapticWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playHapticWithType:");
}

id objc_msgSend_playKeyboardClicksOnHWInput(void *a1, const char *a2, ...)
{
  return _[a1 playKeyboardClicksOnHWInput];
}

id objc_msgSend_playSoundFast_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playSoundFast:");
}

id objc_msgSend_playSoundFast_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playSoundFast:completionBlock:");
}

id objc_msgSend_playSoundFast_startedBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playSoundFast:startedBlock:completionBlock:");
}

id objc_msgSend_playbackStatus(void *a1, const char *a2, ...)
{
  return _[a1 playbackStatus];
}

id objc_msgSend_pointCount(void *a1, const char *a2, ...)
{
  return _[a1 pointCount];
}

id objc_msgSend_pointValue(void *a1, const char *a2, ...)
{
  return _[a1 pointValue];
}

id objc_msgSend_pointerDidMoveToGlobalPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointerDidMoveToGlobalPoint:");
}

id objc_msgSend_pointerEventObservers(void *a1, const char *a2, ...)
{
  return _[a1 pointerEventObservers];
}

id objc_msgSend_pointerValue(void *a1, const char *a2, ...)
{
  return _[a1 pointerValue];
}

id objc_msgSend_pointerVoiceOverCursorOption(void *a1, const char *a2, ...)
{
  return _[a1 pointerVoiceOverCursorOption];
}

id objc_msgSend_popLastBrailleCellFromBuffer(void *a1, const char *a2, ...)
{
  return _[a1 popLastBrailleCellFromBuffer];
}

id objc_msgSend_popupValue(void *a1, const char *a2, ...)
{
  return _[a1 popupValue];
}

id objc_msgSend_portType(void *a1, const char *a2, ...)
{
  return _[a1 portType];
}

id objc_msgSend_postEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEvent:");
}

id objc_msgSend_postEvent_systemEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEvent:systemEvent:");
}

id objc_msgSend_postFingerDragAtPoint_withForce_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFingerDragAtPoint:withForce:withContextId:");
}

id objc_msgSend_postFingerLiftAtPoint_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFingerLiftAtPoint:withContextId:");
}

id objc_msgSend_postFingerTouchAtPoint_withForce_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFingerTouchAtPoint:withForce:withContextId:");
}

id objc_msgSend_postKeyboardEventWithCharacters_originalCharacters_modifiers_keyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postKeyboardEventWithCharacters:originalCharacters:modifiers:keyCode:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_postStylusDragAtPoint_withForce_altitude_azimuth_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postStylusDragAtPoint:withForce:altitude:azimuth:withContextId:");
}

id objc_msgSend_postStylusLiftAtPoint_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postStylusLiftAtPoint:withContextId:");
}

id objc_msgSend_postStylusTouchAtPoint_withForce_altitude_azimuth_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postStylusTouchAtPoint:withForce:altitude:azimuth:withContextId:");
}

id objc_msgSend_potentialOperation(void *a1, const char *a2, ...)
{
  return _[a1 potentialOperation];
}

id objc_msgSend_practiceElement(void *a1, const char *a2, ...)
{
  return _[a1 practiceElement];
}

id objc_msgSend_practiceRegion(void *a1, const char *a2, ...)
{
  return _[a1 practiceRegion];
}

id objc_msgSend_precomposedStringWithCanonicalMapping(void *a1, const char *a2, ...)
{
  return _[a1 precomposedStringWithCanonicalMapping];
}

id objc_msgSend_preferenceForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferenceForKey:");
}

id objc_msgSend_preferencesBrailleLanguageRotorItemsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferencesBrailleLanguageRotorItemsChanged:");
}

id objc_msgSend_preferencesKeyboardClickStatusChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferencesKeyboardClickStatusChange:");
}

id objc_msgSend_preferencesLanguageRotorItemsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferencesLanguageRotorItemsChanged:");
}

id objc_msgSend_preferredBrailleTableIdentifierForKeyboardLanguage_keyboardLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredBrailleTableIdentifierForKeyboardLanguage:keyboardLayout:");
}

id objc_msgSend_preferredCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 preferredCharacterSet];
}

id objc_msgSend_preferredMediaAnalysisLocale(void *a1, const char *a2, ...)
{
  return _[a1 preferredMediaAnalysisLocale];
}

id objc_msgSend_prefersContextlessPassthrough(void *a1, const char *a2, ...)
{
  return _[a1 prefersContextlessPassthrough];
}

id objc_msgSend_prepareForKeycodeTranslation(void *a1, const char *a2, ...)
{
  return _[a1 prepareForKeycodeTranslation];
}

id objc_msgSend_prepareWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWithContext:");
}

id objc_msgSend_preprocessAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preprocessAction:");
}

id objc_msgSend_pressReturnKeyForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pressReturnKeyForElement:");
}

id objc_msgSend_pressVolumeDownButtonDown(void *a1, const char *a2, ...)
{
  return _[a1 pressVolumeDownButtonDown];
}

id objc_msgSend_pressVolumeUpButtonDown(void *a1, const char *a2, ...)
{
  return _[a1 pressVolumeUpButtonDown];
}

id objc_msgSend_previousContainer(void *a1, const char *a2, ...)
{
  return _[a1 previousContainer];
}

id objc_msgSend_previousContextDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 previousContextDescriptors];
}

id objc_msgSend_previousCustomRotorsForRotorHint(void *a1, const char *a2, ...)
{
  return _[a1 previousCustomRotorsForRotorHint];
}

id objc_msgSend_previousElement(void *a1, const char *a2, ...)
{
  return _[a1 previousElement];
}

id objc_msgSend_previousElementsWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousElementsWithParameters:");
}

id objc_msgSend_previousFirstResponder(void *a1, const char *a2, ...)
{
  return _[a1 previousFirstResponder];
}

id objc_msgSend_previousFirstResponderValue(void *a1, const char *a2, ...)
{
  return _[a1 previousFirstResponderValue];
}

id objc_msgSend_previousGuideElement(void *a1, const char *a2, ...)
{
  return _[a1 previousGuideElement];
}

id objc_msgSend_previousRequests(void *a1, const char *a2, ...)
{
  return _[a1 previousRequests];
}

id objc_msgSend_previousRotorType(void *a1, const char *a2, ...)
{
  return _[a1 previousRotorType];
}

id objc_msgSend_previousRotorVoiceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 previousRotorVoiceIdentifier];
}

id objc_msgSend_previousSegment(void *a1, const char *a2, ...)
{
  return _[a1 previousSegment];
}

id objc_msgSend_previousSoundsPlayed(void *a1, const char *a2, ...)
{
  return _[a1 previousSoundsPlayed];
}

id objc_msgSend_previousSpokenValueParts(void *a1, const char *a2, ...)
{
  return _[a1 previousSpokenValueParts];
}

id objc_msgSend_previousTableOrCollectionViewApplication(void *a1, const char *a2, ...)
{
  return _[a1 previousTableOrCollectionViewApplication];
}

id objc_msgSend_previousTableOrCollectionViewList(void *a1, const char *a2, ...)
{
  return _[a1 previousTableOrCollectionViewList];
}

id objc_msgSend_previousTableOrCollectionViewToMetadata(void *a1, const char *a2, ...)
{
  return _[a1 previousTableOrCollectionViewToMetadata];
}

id objc_msgSend_previousTextNavigationElement(void *a1, const char *a2, ...)
{
  return _[a1 previousTextNavigationElement];
}

id objc_msgSend_previousTouchContainer(void *a1, const char *a2, ...)
{
  return _[a1 previousTouchContainer];
}

id objc_msgSend_previouslySpokenImageCaptionResults(void *a1, const char *a2, ...)
{
  return _[a1 previouslySpokenImageCaptionResults];
}

id objc_msgSend_prewarmEngine(void *a1, const char *a2, ...)
{
  return _[a1 prewarmEngine];
}

id objc_msgSend_primaryLanguage(void *a1, const char *a2, ...)
{
  return _[a1 primaryLanguage];
}

id objc_msgSend_principalClass(void *a1, const char *a2, ...)
{
  return _[a1 principalClass];
}

id objc_msgSend_printBrailleCharacterFromBraillePattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printBrailleCharacterFromBraillePattern:");
}

id objc_msgSend_printBrailleForAllTouchPointsInInput_shouldLearn_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printBrailleForAllTouchPointsInInput:shouldLearn:error:");
}

id objc_msgSend_printBrailleForGesturePattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printBrailleForGesturePattern:");
}

id objc_msgSend_printBrailleForInput_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printBrailleForInput:error:");
}

id objc_msgSend_printBrailleForTouchPoints_shouldLearn_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printBrailleForTouchPoints:shouldLearn:error:");
}

id objc_msgSend_processElementFor2DBrailleDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processElementFor2DBrailleDisplay:");
}

id objc_msgSend_processEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processEvent:");
}

id objc_msgSend_processEventAsGesturedTextInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processEventAsGesturedTextInput:");
}

id objc_msgSend_processExternalElementUpdate(void *a1, const char *a2, ...)
{
  return _[a1 processExternalElementUpdate];
}

id objc_msgSend_processExternalScrollToVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processExternalScrollToVisible:");
}

id objc_msgSend_processHelpForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processHelpForEvent:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processStringFor2DBrailleDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processStringFor2DBrailleDisplay:");
}

id objc_msgSend_processStringsAndLanguages_brailleString_breakWords_withLanguage_atIndex_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processStringsAndLanguages:brailleString:breakWords:withLanguage:atIndex:category:");
}

id objc_msgSend_processTapWithFingerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processTapWithFingerCount:");
}

id objc_msgSend_processTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processTouch:");
}

id objc_msgSend_processTouchLocations_isFirstTouch_isCancelTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processTouchLocations:isFirstTouch:isCancelTouch:");
}

id objc_msgSend_progress(void *a1, const char *a2, ...)
{
  return _[a1 progress];
}

id objc_msgSend_publicCustomRotorIndex(void *a1, const char *a2, ...)
{
  return _[a1 publicCustomRotorIndex];
}

id objc_msgSend_punctuation(void *a1, const char *a2, ...)
{
  return _[a1 punctuation];
}

id objc_msgSend_punctuationCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 punctuationCharacterSet];
}

id objc_msgSend_punctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 punctuationGroup];
}

id objc_msgSend_punctuationGroupForUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "punctuationGroupForUUID:");
}

id objc_msgSend_punctuationGroups(void *a1, const char *a2, ...)
{
  return _[a1 punctuationGroups];
}

id objc_msgSend_punctuationGroupsUpdatedHandler(void *a1, const char *a2, ...)
{
  return _[a1 punctuationGroupsUpdatedHandler];
}

id objc_msgSend_punctuationReplacement_withGroup_baseTable_languageCode_selectedLanguage_spokenLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "punctuationReplacement:withGroup:baseTable:languageCode:selectedLanguage:spokenLanguage:");
}

id objc_msgSend_purgeCache(void *a1, const char *a2, ...)
{
  return _[a1 purgeCache];
}

id objc_msgSend_quickNavDownDurationAllowedAcceptance(void *a1, const char *a2, ...)
{
  return _[a1 quickNavDownDurationAllowedAcceptance];
}

id objc_msgSend_quickNavKeyChordWithInfo_arrowMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quickNavKeyChordWithInfo:arrowMask:");
}

id objc_msgSend_range(void *a1, const char *a2, ...)
{
  return _[a1 range];
}

id objc_msgSend_rangeAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeAtIndex:");
}

id objc_msgSend_rangeBlock(void *a1, const char *a2, ...)
{
  return _[a1 rangeBlock];
}

id objc_msgSend_rangeForLineNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeForLineNumber:");
}

id objc_msgSend_rangeForLineNumberAndColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeForLineNumberAndColumn:");
}

id objc_msgSend_rangeForTextMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeForTextMarker:");
}

id objc_msgSend_rangeOfCellRepresentingCharacterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCellRepresentingCharacterAtIndex:");
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:");
}

id objc_msgSend_rangeOfCharacterFromSet_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:");
}

id objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfComposedCharacterSequenceAtIndex:");
}

id objc_msgSend_rangeOfMisspelledWordInString_range_startingAt_wrap_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfMisspelledWordInString:range:startingAt:wrap:language:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_rangeOfString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:range:");
}

id objc_msgSend_rangeOfString_options_range_locale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:range:locale:");
}

id objc_msgSend_rangeValue(void *a1, const char *a2, ...)
{
  return _[a1 rangeValue];
}

id objc_msgSend_rangeWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeWithAXAttribute:");
}

id objc_msgSend_rate(void *a1, const char *a2, ...)
{
  return _[a1 rate];
}

id objc_msgSend_rawAverageLocation(void *a1, const char *a2, ...)
{
  return _[a1 rawAverageLocation];
}

id objc_msgSend_rawLocation(void *a1, const char *a2, ...)
{
  return _[a1 rawLocation];
}

id objc_msgSend_rawValue(void *a1, const char *a2, ...)
{
  return _[a1 rawValue];
}

id objc_msgSend_reachabilityActive(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityActive];
}

id objc_msgSend_reachabilityIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityIdentifier];
}

id objc_msgSend_reachabilityOffset(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityOffset];
}

id objc_msgSend_readAll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readAll:");
}

id objc_msgSend_readAllExplorerElementsTimer(void *a1, const char *a2, ...)
{
  return _[a1 readAllExplorerElementsTimer];
}

id objc_msgSend_readFromCurrentExplorerElement(void *a1, const char *a2, ...)
{
  return _[a1 readFromCurrentExplorerElement];
}

id objc_msgSend_readingContentCausesPageTurn(void *a1, const char *a2, ...)
{
  return _[a1 readingContentCausesPageTurn];
}

id objc_msgSend_realtime(void *a1, const char *a2, ...)
{
  return _[a1 realtime];
}

id objc_msgSend_realtimeBlinkIsUp(void *a1, const char *a2, ...)
{
  return _[a1 realtimeBlinkIsUp];
}

id objc_msgSend_realtimeBlinking(void *a1, const char *a2, ...)
{
  return _[a1 realtimeBlinking];
}

id objc_msgSend_realtimeElementCompleted(void *a1, const char *a2, ...)
{
  return _[a1 realtimeElementCompleted];
}

id objc_msgSend_realtimeElementUnread(void *a1, const char *a2, ...)
{
  return _[a1 realtimeElementUnread];
}

id objc_msgSend_realtimeElements(void *a1, const char *a2, ...)
{
  return _[a1 realtimeElements];
}

id objc_msgSend_realtimeSpinnerCount(void *a1, const char *a2, ...)
{
  return _[a1 realtimeSpinnerCount];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_recognitionCanvas(void *a1, const char *a2, ...)
{
  return _[a1 recognitionCanvas];
}

id objc_msgSend_recognitionEngine(void *a1, const char *a2, ...)
{
  return _[a1 recognitionEngine];
}

id objc_msgSend_rectValue(void *a1, const char *a2, ...)
{
  return _[a1 rectValue];
}

id objc_msgSend_rectWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectWithAXAttribute:");
}

id objc_msgSend_referenceBounds(void *a1, const char *a2, ...)
{
  return _[a1 referenceBounds];
}

id objc_msgSend_refreshAssetsByForceUpdatingCatalog_updatingCatalogIfNeeded_catalogRefreshOverrideTimeout_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAssetsByForceUpdatingCatalog:updatingCatalogIfNeeded:catalogRefreshOverrideTimeout:completion:");
}

id objc_msgSend_refreshBraille(void *a1, const char *a2, ...)
{
  return _[a1 refreshBraille];
}

id objc_msgSend_refreshBraille_rotorSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshBraille:rotorSelection:");
}

id objc_msgSend_refreshBrailleForTerminalCommand_cursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshBrailleForTerminalCommand:cursor:");
}

id objc_msgSend_refreshBrailleForTerminalOff(void *a1, const char *a2, ...)
{
  return _[a1 refreshBrailleForTerminalOff];
}

id objc_msgSend_refreshBrailleForTerminalOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshBrailleForTerminalOutput:");
}

id objc_msgSend_refreshBrailleLine(void *a1, const char *a2, ...)
{
  return _[a1 refreshBrailleLine];
}

id objc_msgSend_refreshPlanarBraille(void *a1, const char *a2, ...)
{
  return _[a1 refreshPlanarBraille];
}

id objc_msgSend_regionDescriptionForElement_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionDescriptionForElement:withCompletion:");
}

id objc_msgSend_regionDescriptionWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionDescriptionWithCompletion:");
}

id objc_msgSend_regionDescriptionWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionDescriptionWithFrame:");
}

id objc_msgSend_registerCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerCapabilities:");
}

id objc_msgSend_registerForCoalescedZoomAttributesWithChangedHandler_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForCoalescedZoomAttributesWithChangedHandler:onDisplay:");
}

id objc_msgSend_registerForEvents(void *a1, const char *a2, ...)
{
  return _[a1 registerForEvents];
}

id objc_msgSend_registerForLocalNotifications(void *a1, const char *a2, ...)
{
  return _[a1 registerForLocalNotifications];
}

id objc_msgSend_registerForPointerEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForPointerEvents:");
}

id objc_msgSend_registerInterestInZoomAttributes(void *a1, const char *a2, ...)
{
  return _[a1 registerInterestInZoomAttributes];
}

id objc_msgSend_registerReachabilityHandler_withIdentifierCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerReachabilityHandler:withIdentifierCallback:");
}

id objc_msgSend_registerSpringBoardActionHandler_withIdentifierCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerSpringBoardActionHandler:withIdentifierCallback:");
}

id objc_msgSend_registerUpdateBlock_forRetrieveSelector_withListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerUpdateBlock:forRetrieveSelector:withListener:");
}

id objc_msgSend_registerUserSwitchStakeHolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerUserSwitchStakeHolder:");
}

id objc_msgSend_registerWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerWithCompletionHandler:");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_reloadPreferringUserProfile(void *a1, const char *a2, ...)
{
  return _[a1 reloadPreferringUserProfile];
}

id objc_msgSend_remoteApplication(void *a1, const char *a2, ...)
{
  return _[a1 remoteApplication];
}

id objc_msgSend_remoteParent(void *a1, const char *a2, ...)
{
  return _[a1 remoteParent];
}

id objc_msgSend_remoteParentIsViewHost(void *a1, const char *a2, ...)
{
  return _[a1 remoteParentIsViewHost];
}

id objc_msgSend_removeActionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeActionHandler:");
}

id objc_msgSend_removeActions(void *a1, const char *a2, ...)
{
  return _[a1 removeActions];
}

id objc_msgSend_removeActionsWithHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeActionsWithHelper:");
}

id objc_msgSend_removeAllHandlersForTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllHandlersForTarget:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAttributes:");
}

id objc_msgSend_removeCharactersInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCharactersInRange:");
}

id objc_msgSend_removeCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCharactersInString:");
}

id objc_msgSend_removeCoalescedZoomAttributesChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCoalescedZoomAttributesChangedHandler:");
}

id objc_msgSend_removeDeliveredNotificationsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeliveredNotificationsWithIdentifiers:");
}

id objc_msgSend_removeDriftAddedByPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDriftAddedByPattern:");
}

id objc_msgSend_removeElementExplorer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeElementExplorer:");
}

id objc_msgSend_removeEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEventHandler:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeLastActionWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLastActionWithString:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectForVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForVariant:");
}

id objc_msgSend_removeObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectIdenticalTo:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeOutputManagerObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeOutputManagerObserver:");
}

id objc_msgSend_removeReachabilityHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeReachabilityHandler:");
}

id objc_msgSend_removeReasonToDisableSoftwareKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeReasonToDisableSoftwareKeyboard:");
}

id objc_msgSend_removeVOSEventFinishedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeVOSEventFinishedHandler:");
}

id objc_msgSend_renderedText(void *a1, const char *a2, ...)
{
  return _[a1 renderedText];
}

id objc_msgSend_repeaterTimer(void *a1, const char *a2, ...)
{
  return _[a1 repeaterTimer];
}

id objc_msgSend_replaceCharactersAtCursor_withString_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersAtCursor:withString:source:");
}

id objc_msgSend_replaceCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withString:");
}

id objc_msgSend_replaceCommandRange_withString_cursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCommandRange:withString:cursor:");
}

id objc_msgSend_replaceCommas(void *a1, const char *a2, ...)
{
  return _[a1 replaceCommas];
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replaceObjectsInRange_withObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectsInRange:withObjectsFromArray:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_replacePunctuation_punctuationGroup_replaceCommas_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replacePunctuation:punctuationGroup:replaceCommas:languageCode:");
}

id objc_msgSend_replaceString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceString:");
}

id objc_msgSend_replaceTextInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceTextInRange:withString:");
}

id objc_msgSend_replacement(void *a1, const char *a2, ...)
{
  return _[a1 replacement];
}

id objc_msgSend_replacementString(void *a1, const char *a2, ...)
{
  return _[a1 replacementString];
}

id objc_msgSend_replacements(void *a1, const char *a2, ...)
{
  return _[a1 replacements];
}

id objc_msgSend_replacesCharacterAsPunctuation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replacesCharacterAsPunctuation:");
}

id objc_msgSend_repostEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repostEvent:");
}

id objc_msgSend_representationWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "representationWithData:");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestAuthorizationWithOptions_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestAuthorizationWithOptions:completionHandler:");
}

id objc_msgSend_requestDismissJindo(void *a1, const char *a2, ...)
{
  return _[a1 requestDismissJindo];
}

id objc_msgSend_requestElements(void *a1, const char *a2, ...)
{
  return _[a1 requestElements];
}

id objc_msgSend_requestHeaders(void *a1, const char *a2, ...)
{
  return _[a1 requestHeaders];
}

id objc_msgSend_requestQueueMixinBehavior(void *a1, const char *a2, ...)
{
  return _[a1 requestQueueMixinBehavior];
}

id objc_msgSend_requestWithIdentifier_content_trigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithIdentifier:content:trigger:");
}

id objc_msgSend_requiresLaTeXInput(void *a1, const char *a2, ...)
{
  return _[a1 requiresLaTeXInput];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_resetAspectMask(void *a1, const char *a2, ...)
{
  return _[a1 resetAspectMask];
}

id objc_msgSend_resetBannerTimer(void *a1, const char *a2, ...)
{
  return _[a1 resetBannerTimer];
}

id objc_msgSend_resetElements(void *a1, const char *a2, ...)
{
  return _[a1 resetElements];
}

id objc_msgSend_resetEventFactory(void *a1, const char *a2, ...)
{
  return _[a1 resetEventFactory];
}

id objc_msgSend_resetFrequentUpdateTextCache(void *a1, const char *a2, ...)
{
  return _[a1 resetFrequentUpdateTextCache];
}

id objc_msgSend_resetLastGestures(void *a1, const char *a2, ...)
{
  return _[a1 resetLastGestures];
}

id objc_msgSend_resetSession(void *a1, const char *a2, ...)
{
  return _[a1 resetSession];
}

id objc_msgSend_resetSoundForLostMediaSession(void *a1, const char *a2, ...)
{
  return _[a1 resetSoundForLostMediaSession];
}

id objc_msgSend_resetSystemAppElement(void *a1, const char *a2, ...)
{
  return _[a1 resetSystemAppElement];
}

id objc_msgSend_resetSystemBatteryLowState(void *a1, const char *a2, ...)
{
  return _[a1 resetSystemBatteryLowState];
}

id objc_msgSend_resolvedEditingStyles(void *a1, const char *a2, ...)
{
  return _[a1 resolvedEditingStyles];
}

id objc_msgSend_resolvedVoiceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 resolvedVoiceIdentifier];
}

id objc_msgSend_resolverForCurrentHost(void *a1, const char *a2, ...)
{
  return _[a1 resolverForCurrentHost];
}

id objc_msgSend_resourcePath(void *a1, const char *a2, ...)
{
  return _[a1 resourcePath];
}

id objc_msgSend_resourceSpecifier(void *a1, const char *a2, ...)
{
  return _[a1 resourceSpecifier];
}

id objc_msgSend_restartConnection(void *a1, const char *a2, ...)
{
  return _[a1 restartConnection];
}

id objc_msgSend_resultForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultForKey:");
}

id objc_msgSend_resultsForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultsForElement:");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_resumeCurrentRequest(void *a1, const char *a2, ...)
{
  return _[a1 resumeCurrentRequest];
}

id objc_msgSend_retainsCustomRotorActionSetting(void *a1, const char *a2, ...)
{
  return _[a1 retainsCustomRotorActionSetting];
}

id objc_msgSend_retrieveAllEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveAllEntries:");
}

id objc_msgSend_retrieveElementsWithElement_groupNavigationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveElementsWithElement:groupNavigationStyle:");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_rightDotPositions(void *a1, const char *a2, ...)
{
  return _[a1 rightDotPositions];
}

id objc_msgSend_rightDots(void *a1, const char *a2, ...)
{
  return _[a1 rightDots];
}

id objc_msgSend_rightDrifts(void *a1, const char *a2, ...)
{
  return _[a1 rightDrifts];
}

id objc_msgSend_roadContainsTrackingPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roadContainsTrackingPoint:");
}

id objc_msgSend_roleDescription(void *a1, const char *a2, ...)
{
  return _[a1 roleDescription];
}

id objc_msgSend_rootConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 rootConfiguration];
}

id objc_msgSend_rotor_didChangeFrom_to_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotor:didChangeFrom:to:userInitiated:");
}

id objc_msgSend_rotorCount(void *a1, const char *a2, ...)
{
  return _[a1 rotorCount];
}

id objc_msgSend_rotorEnabled(void *a1, const char *a2, ...)
{
  return _[a1 rotorEnabled];
}

id objc_msgSend_rotorManager(void *a1, const char *a2, ...)
{
  return _[a1 rotorManager];
}

id objc_msgSend_rotorRate(void *a1, const char *a2, ...)
{
  return _[a1 rotorRate];
}

id objc_msgSend_rotorRateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotorRateWithCompletionHandler:");
}

id objc_msgSend_rotorType(void *a1, const char *a2, ...)
{
  return _[a1 rotorType];
}

id objc_msgSend_rotorTypeForPreferenceString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotorTypeForPreferenceString:");
}

id objc_msgSend_rotorTypeForSearchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotorTypeForSearchType:");
}

id objc_msgSend_rotorTypeForSystemRotorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotorTypeForSystemRotorType:");
}

id objc_msgSend_rotorTypeIsValid_eventOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotorTypeIsValid:eventOrigin:");
}

id objc_msgSend_routeForCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routeForCategory:");
}

id objc_msgSend_rowCount(void *a1, const char *a2, ...)
{
  return _[a1 rowCount];
}

id objc_msgSend_rowRange(void *a1, const char *a2, ...)
{
  return _[a1 rowRange];
}

id objc_msgSend_rule(void *a1, const char *a2, ...)
{
  return _[a1 rule];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_runOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runOutputRequest:");
}

id objc_msgSend_safariScribbleManager(void *a1, const char *a2, ...)
{
  return _[a1 safariScribbleManager];
}

id objc_msgSend_safeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeValueForKey:");
}

id objc_msgSend_saveDrift(void *a1, const char *a2, ...)
{
  return _[a1 saveDrift];
}

id objc_msgSend_savePersistentGestureData(void *a1, const char *a2, ...)
{
  return _[a1 savePersistentGestureData];
}

id objc_msgSend_savePhotoLabeliCloud_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savePhotoLabeliCloud:");
}

id objc_msgSend_savedChannelsForOutput_forSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedChannelsForOutput:forSource:");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _[a1 scale];
}

id objc_msgSend_scanFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanFloat:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_score(void *a1, const char *a2, ...)
{
  return _[a1 score];
}

id objc_msgSend_screenCurtainEnabled(void *a1, const char *a2, ...)
{
  return _[a1 screenCurtainEnabled];
}

id objc_msgSend_screenCurtainIsTemporarilyDisabled(void *a1, const char *a2, ...)
{
  return _[a1 screenCurtainIsTemporarilyDisabled];
}

id objc_msgSend_screenCurtainSuspended(void *a1, const char *a2, ...)
{
  return _[a1 screenCurtainSuspended];
}

id objc_msgSend_screenLockOccurred(void *a1, const char *a2, ...)
{
  return _[a1 screenLockOccurred];
}

id objc_msgSend_screenOn(void *a1, const char *a2, ...)
{
  return _[a1 screenOn];
}

id objc_msgSend_screenOnTime(void *a1, const char *a2, ...)
{
  return _[a1 screenOnTime];
}

id objc_msgSend_scribbleAreaForSearchPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scribbleAreaForSearchPoint:");
}

id objc_msgSend_scribbleRotorActive(void *a1, const char *a2, ...)
{
  return _[a1 scribbleRotorActive];
}

id objc_msgSend_scrollAmount(void *a1, const char *a2, ...)
{
  return _[a1 scrollAmount];
}

id objc_msgSend_scrollDownPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollDownPage];
}

id objc_msgSend_scrollLeftPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollLeftPage];
}

id objc_msgSend_scrollNextPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollNextPage];
}

id objc_msgSend_scrollPreviousPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollPreviousPage];
}

id objc_msgSend_scrollRectToVisible_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollRectToVisible:withCompletion:");
}

id objc_msgSend_scrollRightPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollRightPage];
}

id objc_msgSend_scrollStatus(void *a1, const char *a2, ...)
{
  return _[a1 scrollStatus];
}

id objc_msgSend_scrollToBottom(void *a1, const char *a2, ...)
{
  return _[a1 scrollToBottom];
}

id objc_msgSend_scrollToElementForDirectional_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToElementForDirectional:withCompletion:");
}

id objc_msgSend_scrollToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToPoint:");
}

id objc_msgSend_scrollToTop(void *a1, const char *a2, ...)
{
  return _[a1 scrollToTop];
}

id objc_msgSend_scrollUpPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollUpPage];
}

id objc_msgSend_scrubToPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrubToPosition:");
}

id objc_msgSend_searchEndedWithDifferentGroup(void *a1, const char *a2, ...)
{
  return _[a1 searchEndedWithDifferentGroup];
}

id objc_msgSend_searchForElementInDirection_fromElement_matchBlock_rangeMatch_searchType_generation_startingRange_groupNavigationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:");
}

id objc_msgSend_searchForElementInDirection_fromElement_matchBlock_rangeMatch_searchType_generation_startingRange_groupNavigationStyle_peeking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:peeking:");
}

id objc_msgSend_searchForElementInDirection_fromElement_needsForceCacheUpdate_matchBlock_rangeMatch_searchType_generation_startingRange_groupNavigationStyle_peeking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchForElementInDirection:fromElement:needsForceCacheUpdate:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:peeking:");
}

id objc_msgSend_searchPending(void *a1, const char *a2, ...)
{
  return _[a1 searchPending];
}

id objc_msgSend_searchType(void *a1, const char *a2, ...)
{
  return _[a1 searchType];
}

id objc_msgSend_searchUUID(void *a1, const char *a2, ...)
{
  return _[a1 searchUUID];
}

id objc_msgSend_secureName(void *a1, const char *a2, ...)
{
  return _[a1 secureName];
}

id objc_msgSend_securePayAssertionActive(void *a1, const char *a2, ...)
{
  return _[a1 securePayAssertionActive];
}

id objc_msgSend_secureUnarchiveData_withExpectedClass_otherAllowedClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secureUnarchiveData:withExpectedClass:otherAllowedClasses:");
}

id objc_msgSend_segment(void *a1, const char *a2, ...)
{
  return _[a1 segment];
}

id objc_msgSend_segmentIndex(void *a1, const char *a2, ...)
{
  return _[a1 segmentIndex];
}

id objc_msgSend_segments(void *a1, const char *a2, ...)
{
  return _[a1 segments];
}

id objc_msgSend_select(void *a1, const char *a2, ...)
{
  return _[a1 select];
}

id objc_msgSend_selectButtonReceivedNotificationObserverToken(void *a1, const char *a2, ...)
{
  return _[a1 selectButtonReceivedNotificationObserverToken];
}

id objc_msgSend_selectCurrentOutput(void *a1, const char *a2, ...)
{
  return _[a1 selectCurrentOutput];
}

id objc_msgSend_selectExternalAudioRoute(void *a1, const char *a2, ...)
{
  return _[a1 selectExternalAudioRoute];
}

id objc_msgSend_selectFocusedItem(void *a1, const char *a2, ...)
{
  return _[a1 selectFocusedItem];
}

id objc_msgSend_selectLocalAudioRoute(void *a1, const char *a2, ...)
{
  return _[a1 selectLocalAudioRoute];
}

id objc_msgSend_selectNextSpellingSuggestionInDirection_responder_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectNextSpellingSuggestionInDirection:responder:languageCode:");
}

id objc_msgSend_selectSpeechDelay(void *a1, const char *a2, ...)
{
  return _[a1 selectSpeechDelay];
}

id objc_msgSend_selectedActivity(void *a1, const char *a2, ...)
{
  return _[a1 selectedActivity];
}

id objc_msgSend_selectedBrailleGesturesInputTable(void *a1, const char *a2, ...)
{
  return _[a1 selectedBrailleGesturesInputTable];
}

id objc_msgSend_selectedBrailleInputTable(void *a1, const char *a2, ...)
{
  return _[a1 selectedBrailleInputTable];
}

id objc_msgSend_selectedBrailleTable(void *a1, const char *a2, ...)
{
  return _[a1 selectedBrailleTable];
}

id objc_msgSend_selectedLanguage(void *a1, const char *a2, ...)
{
  return _[a1 selectedLanguage];
}

id objc_msgSend_selectedLanguageIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 selectedLanguageIdentifier];
}

id objc_msgSend_selectedRouteIsHDMI(void *a1, const char *a2, ...)
{
  return _[a1 selectedRouteIsHDMI];
}

id objc_msgSend_selectedTextRange(void *a1, const char *a2, ...)
{
  return _[a1 selectedTextRange];
}

id objc_msgSend_selector(void *a1, const char *a2, ...)
{
  return _[a1 selector];
}

id objc_msgSend_send(void *a1, const char *a2, ...)
{
  return _[a1 send];
}

id objc_msgSend_sendAsynchronousMessage_withIdentifier_targetAccessQueue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAsynchronousMessage:withIdentifier:targetAccessQueue:completion:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendHIDSystemEvent_repostCreatorHIDEvent_senderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendHIDSystemEvent:repostCreatorHIDEvent:senderID:");
}

id objc_msgSend_sendHIDSystemEvent_senderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendHIDSystemEvent:senderID:");
}

id objc_msgSend_sendProgrammaticAppSwitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProgrammaticAppSwitch:");
}

id objc_msgSend_sendRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequest:");
}

id objc_msgSend_sendRequestWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestWithString:");
}

id objc_msgSend_sendRequestWithString_shouldQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestWithString:shouldQueue:");
}

id objc_msgSend_sendTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 sendTimestamp];
}

id objc_msgSend_sendTouchCancelledEvent(void *a1, const char *a2, ...)
{
  return _[a1 sendTouchCancelledEvent];
}

id objc_msgSend_senderBundleID(void *a1, const char *a2, ...)
{
  return _[a1 senderBundleID];
}

id objc_msgSend_senderID(void *a1, const char *a2, ...)
{
  return _[a1 senderID];
}

id objc_msgSend_senderIsAppExtension(void *a1, const char *a2, ...)
{
  return _[a1 senderIsAppExtension];
}

id objc_msgSend_senderPID(void *a1, const char *a2, ...)
{
  return _[a1 senderPID];
}

id objc_msgSend_sentenceFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sentenceFromPosition:inDirection:");
}

id objc_msgSend_seriesOfTouchPoints(void *a1, const char *a2, ...)
{
  return _[a1 seriesOfTouchPoints];
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _[a1 server];
}

id objc_msgSend_serverInstance(void *a1, const char *a2, ...)
{
  return _[a1 serverInstance];
}

id objc_msgSend_servesAsHeadingLandmark(void *a1, const char *a2, ...)
{
  return _[a1 servesAsHeadingLandmark];
}

id objc_msgSend_serviceBundleName(void *a1, const char *a2, ...)
{
  return _[a1 serviceBundleName];
}

id objc_msgSend_serviceForIdentifier_input_loopback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceForIdentifier:input:loopback:");
}

id objc_msgSend_serviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 serviceIdentifier];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAXAttribute_withArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withArray:");
}

id objc_msgSend_setAXAttribute_withBOOL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withBOOL:");
}

id objc_msgSend_setAXAttribute_withFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withFloat:");
}

id objc_msgSend_setAXAttribute_withNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withNumber:");
}

id objc_msgSend_setAXAttribute_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withObject:");
}

id objc_msgSend_setAXAttribute_withObject_synchronous_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withObject:synchronous:");
}

id objc_msgSend_setAXAttribute_withRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withRange:");
}

id objc_msgSend_setAXAttribute_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withString:");
}

id objc_msgSend_setAcceptsContractedBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceptsContractedBraille:");
}

id objc_msgSend_setAcceptsRawInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceptsRawInput:");
}

id objc_msgSend_setAccessoryShutdownInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryShutdownInProgress:");
}

id objc_msgSend_setActionCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionCompletionBlock:");
}

id objc_msgSend_setActivatedDirectTouchThatRequiredActivation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivatedDirectTouchThatRequiredActivation:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActive_usage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:usage:");
}

id objc_msgSend_setActive_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:withOptions:error:");
}

id objc_msgSend_setActiveCharacterSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveCharacterSet:");
}

id objc_msgSend_setActivities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivities:");
}

id objc_msgSend_setActivityBasedAudioDucking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityBasedAudioDucking:");
}

id objc_msgSend_setAdditionalLanguageRotorItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalLanguageRotorItem:");
}

id objc_msgSend_setAggregatedStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAggregatedStatus:");
}

id objc_msgSend_setAlertString_timeout_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlertString:timeout:priority:");
}

id objc_msgSend_setAllEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllEntries:");
}

id objc_msgSend_setAllowSingleLetterSearching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowSingleLetterSearching:");
}

id objc_msgSend_setAllowedCharacterModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedCharacterModes:");
}

id objc_msgSend_setAllowedCharacterSets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedCharacterSets:");
}

id objc_msgSend_setAlternateSuggestions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternateSuggestions:");
}

id objc_msgSend_setAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltitude:");
}

id objc_msgSend_setAlwaysUsesNemethCodeForTechnicalText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysUsesNemethCodeForTechnicalText:");
}

id objc_msgSend_setAnnounceCharacterModeTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnnounceCharacterModeTimer:");
}

id objc_msgSend_setAnnouncementString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnnouncementString:");
}

id objc_msgSend_setAnnouncementsDisplayMode(void *a1, const char *a2, ...)
{
  return _[a1 setAnnouncementsDisplayMode];
}

id objc_msgSend_setAppTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppTransition:");
}

id objc_msgSend_setArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArray:");
}

id objc_msgSend_setAspectMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAspectMask:");
}

id objc_msgSend_setAttemptToSetNativeFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttemptToSetNativeFocus:");
}

id objc_msgSend_setAttribute_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttribute:forKey:");
}

id objc_msgSend_setAttribute_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttribute:forKey:error:");
}

id objc_msgSend_setAttribute_forKey_withRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttribute:forKey:withRange:");
}

id objc_msgSend_setAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAttributes_withRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:withRange:");
}

id objc_msgSend_setAudioDestinationRequestExternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioDestinationRequestExternal:");
}

id objc_msgSend_setAudioEffects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioEffects:");
}

id objc_msgSend_setAudioQueueFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioQueueFlags:");
}

id objc_msgSend_setAutoAdvanceEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoAdvanceEnabled:");
}

id objc_msgSend_setAutoCapitalizationMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoCapitalizationMode:");
}

id objc_msgSend_setAutoRefresh_forApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoRefresh:forApp:");
}

id objc_msgSend_setAutomaticAccessibilityEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomaticAccessibilityEnabled:");
}

id objc_msgSend_setAutomaticAccessibilityMode_forBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomaticAccessibilityMode:forBundleIdentifier:");
}

id objc_msgSend_setAutomaticAccessibilityVisualizationsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomaticAccessibilityVisualizationsEnabled:");
}

id objc_msgSend_setAutomaticallyCancelPendingBlockUponSchedulingNewBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomaticallyCancelPendingBlockUponSchedulingNewBlock:");
}

id objc_msgSend_setAxLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAxLabel:");
}

id objc_msgSend_setAzimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAzimuth:");
}

id objc_msgSend_setBannerNotificationsOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBannerNotificationsOutput:");
}

id objc_msgSend_setBaseElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaseElement:");
}

id objc_msgSend_setBasePunctuationUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBasePunctuationUUID:");
}

id objc_msgSend_setBeginTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeginTimestamp:");
}

id objc_msgSend_setBluetoothPowerEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBluetoothPowerEnabled:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setBookCursorPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBookCursorPosition:");
}

id objc_msgSend_setBoolValue_forSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBoolValue:forSetting:");
}

id objc_msgSend_setBottomDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBottomDot:");
}

id objc_msgSend_setBrailleChordDebounceTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleChordDebounceTimeout:");
}

id objc_msgSend_setBrailleEdgeOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleEdgeOptions:");
}

id objc_msgSend_setBrailleElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleElement:");
}

id objc_msgSend_setBrailleElement_resetBrailleCursor_rotorSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleElement:resetBrailleCursor:rotorSelection:");
}

id objc_msgSend_setBrailleGestureManagerDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleGestureManagerDelegate:");
}

id objc_msgSend_setBrailleLineRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleLineRange:");
}

id objc_msgSend_setBrailleManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleManager:");
}

id objc_msgSend_setBrailleMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleMap:");
}

id objc_msgSend_setBrailleString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleString:");
}

id objc_msgSend_setBrailleString_type_timeout_langCode_brailleLineRange_isBrailleLineRangeKnown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleString:type:timeout:langCode:brailleLineRange:isBrailleLineRangeKnown:");
}

id objc_msgSend_setBrailleType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleType:");
}

id objc_msgSend_setBrailleTypingPropertiesAnnouncementTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleTypingPropertiesAnnouncementTimer:");
}

id objc_msgSend_setBsiTypingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBsiTypingMode:");
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleID:");
}

id objc_msgSend_setBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIdentifier:");
}

id objc_msgSend_setBypassHelp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBypassHelp:");
}

id objc_msgSend_setCachedAdditionalElementCommunities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedAdditionalElementCommunities:");
}

id objc_msgSend_setCachedDisplayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedDisplayId:");
}

id objc_msgSend_setCachedImmediateRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedImmediateRemoteParent:");
}

id objc_msgSend_setCachedRemoteApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedRemoteApplication:");
}

id objc_msgSend_setCachedRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedRemoteParent:");
}

id objc_msgSend_setCachedSideAppDividerElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedSideAppDividerElement:");
}

id objc_msgSend_setCalibrationStartTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalibrationStartTouchPoints:");
}

id objc_msgSend_setCanDeleteCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanDeleteCharacter:");
}

id objc_msgSend_setCancelRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelRequest:");
}

id objc_msgSend_setCannotBeInterrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCannotBeInterrupted:");
}

id objc_msgSend_setCapsLockLightOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCapsLockLightOn:");
}

id objc_msgSend_setCaptionPanelEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaptionPanelEnabled:");
}

id objc_msgSend_setCaptureModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaptureModeEnabled:");
}

id objc_msgSend_setCategory_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategory:withOptions:error:");
}

id objc_msgSend_setCategoryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategoryIdentifier:");
}

id objc_msgSend_setCategoryName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategoryName:");
}

id objc_msgSend_setChangedModifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangedModifiers:");
}

id objc_msgSend_setChannelAssignments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelAssignments:");
}

id objc_msgSend_setCharacterMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharacterMode:");
}

id objc_msgSend_setCheckedImmediateRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheckedImmediateRemoteParent:");
}

id objc_msgSend_setCheckedRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheckedRemoteParent:");
}

id objc_msgSend_setClientGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientGeneration:");
}

id objc_msgSend_setClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientID:");
}

id objc_msgSend_setClientId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientId:");
}

id objc_msgSend_setCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommand:");
}

id objc_msgSend_setCommandLine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommandLine:");
}

id objc_msgSend_setCommandManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommandManager:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setCompletionDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionDelegate:");
}

id objc_msgSend_setComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComponent:");
}

id objc_msgSend_setComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComponents:");
}

id objc_msgSend_setContentOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentOffset:");
}

id objc_msgSend_setContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextId:");
}

id objc_msgSend_setContinuousPathTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContinuousPathTimeout:");
}

id objc_msgSend_setControlKeyToggleSpeakingAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlKeyToggleSpeakingAllowed:");
}

id objc_msgSend_setCrashloopTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCrashloopTimer:");
}

id objc_msgSend_setCurrentAlternateSuggestion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentAlternateSuggestion:");
}

id objc_msgSend_setCurrentChartDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentChartDescriptor:");
}

id objc_msgSend_setCurrentChartElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentChartElement:");
}

id objc_msgSend_setCurrentContextDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentContextDescriptors:");
}

id objc_msgSend_setCurrentCursorContextID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCursorContextID:");
}

id objc_msgSend_setCurrentCursorDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCursorDisplayID:");
}

id objc_msgSend_setCurrentCursorFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCursorFrame:");
}

id objc_msgSend_setCurrentCursorPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCursorPath:");
}

id objc_msgSend_setCurrentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentElement:");
}

id objc_msgSend_setCurrentElement_shouldSetBrailleElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentElement:shouldSetBrailleElement:");
}

id objc_msgSend_setCurrentElementToWebEditableAncestor(void *a1, const char *a2, ...)
{
  return _[a1 setCurrentElementToWebEditableAncestor];
}

id objc_msgSend_setCurrentExplorerElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentExplorerElement:");
}

id objc_msgSend_setCurrentInputString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentInputString:");
}

id objc_msgSend_setCurrentOutputActionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentOutputActionID:");
}

id objc_msgSend_setCurrentReadAllContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentReadAllContext:");
}

id objc_msgSend_setCurrentRotorDetectionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentRotorDetectionMode:");
}

id objc_msgSend_setCurrentRotorElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentRotorElement:");
}

id objc_msgSend_setCurrentRotorType_saveToPreferences_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentRotorType:saveToPreferences:userInitiated:");
}

id objc_msgSend_setCurrentRouteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentRouteName:");
}

id objc_msgSend_setCurrentSeriesIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSeriesIndex:");
}

id objc_msgSend_setCurrentSimilarTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSimilarTraits:");
}

id objc_msgSend_setCurrentSonificationPlaybackBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSonificationPlaybackBounds:");
}

id objc_msgSend_setCurrentWordContextForBook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentWordContextForBook:");
}

id objc_msgSend_setCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursor:");
}

id objc_msgSend_setCursorFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorFrame:");
}

id objc_msgSend_setCursorFrame_withPath_withContextId_withDisplayId_element_forceRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorFrame:withPath:withContextId:withDisplayId:element:forceRefresh:");
}

id objc_msgSend_setCursorFrame_withPath_withContextId_withDisplayId_element_forceRefresh_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorFrame:withPath:withContextId:withDisplayId:element:forceRefresh:animated:");
}

id objc_msgSend_setCursorFrameForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorFrameForElement:");
}

id objc_msgSend_setCursorFrameForElement_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorFrameForElement:animated:");
}

id objc_msgSend_setCustomAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomAction:");
}

id objc_msgSend_setCustomActionIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomActionIndex:");
}

id objc_msgSend_setCustomContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomContent:");
}

id objc_msgSend_setDateToResumeRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateToResumeRequests:");
}

id objc_msgSend_setDateToResumeSounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateToResumeSounds:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDefaultThreadPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultThreadPriority:");
}

id objc_msgSend_setDefinedLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefinedLabel:");
}

id objc_msgSend_setDelayedNotificationAnnouncementRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelayedNotificationAnnouncementRequest:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDetectBrailleEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectBrailleEdges:");
}

id objc_msgSend_setDetectCaptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectCaptions:");
}

id objc_msgSend_setDetectIconClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectIconClass:");
}

id objc_msgSend_setDetectMADScenes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectMADScenes:");
}

id objc_msgSend_setDetectScenes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectScenes:");
}

id objc_msgSend_setDeviceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceOrientation:");
}

id objc_msgSend_setDictionary_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDictionary:forKey:");
}

id objc_msgSend_setDidAnnounceBrailleTypingProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidAnnounceBrailleTypingProperties:");
}

id objc_msgSend_setDidAnnounceExplorationMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidAnnounceExplorationMode:");
}

id objc_msgSend_setDidCacheSideAppDividerElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidCacheSideAppDividerElement:");
}

id objc_msgSend_setDidEnterInvalidGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidEnterInvalidGesture:");
}

id objc_msgSend_setDidMoveFingersTooFarForInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidMoveFingersTooFarForInput:");
}

id objc_msgSend_setDidReceiveForceUpdateChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidReceiveForceUpdateChangeToken:");
}

id objc_msgSend_setDidRegisterForPointerEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidRegisterForPointerEvents:");
}

id objc_msgSend_setDidStartFullGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidStartFullGesture:");
}

id objc_msgSend_setDirectInteractionElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectInteractionElement:");
}

id objc_msgSend_setDirectTouchApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectTouchApps:");
}

id objc_msgSend_setDirectTouchManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectTouchManager:");
}

id objc_msgSend_setDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirection:");
}

id objc_msgSend_setDisableIdleTimerAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableIdleTimerAssertion:");
}

id objc_msgSend_setDisableVoiceOverSettingOnStop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableVoiceOverSettingOnStop:");
}

id objc_msgSend_setDisplayDescriptorCallbackEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayDescriptorCallbackEnabled:");
}

id objc_msgSend_setDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayID:");
}

id objc_msgSend_setDisplayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayId:");
}

id objc_msgSend_setDisplayManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayManager:");
}

id objc_msgSend_setDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayName:");
}

id objc_msgSend_setDisplayToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayToken:");
}

id objc_msgSend_setDoesNotInterrupt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDoesNotInterrupt:");
}

id objc_msgSend_setDuckScalarForVoiceOver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckScalarForVoiceOver:");
}

id objc_msgSend_setDuckToLevelScalar_unduckToLevelScalar_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckToLevelScalar:unduckToLevelScalar:error:");
}

id objc_msgSend_setDuckingFadeOutDuration_fadeInDuration_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckingFadeOutDuration:fadeInDuration:error:");
}

id objc_msgSend_setDuckingProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckingProperties:");
}

id objc_msgSend_setDuckingTemporarilyDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckingTemporarilyDisabled:");
}

id objc_msgSend_setDynamicReplacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDynamicReplacement:");
}

id objc_msgSend_setEdgeStrength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEdgeStrength:");
}

id objc_msgSend_setElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElement:");
}

id objc_msgSend_setElementFetcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementFetcher:");
}

id objc_msgSend_setElementForGesturedTextInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementForGesturedTextInput:");
}

id objc_msgSend_setElementFrames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementFrames:");
}

id objc_msgSend_setElementFrames_labels_uiClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementFrames:labels:uiClasses:");
}

id objc_msgSend_setElementGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementGeneration:");
}

id objc_msgSend_setElementHeadersForOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementHeadersForOutput:");
}

id objc_msgSend_setElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementManager:");
}

id objc_msgSend_setElementRotorToType_saveToPreferences_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementRotorToType:saveToPreferences:userInitiated:");
}

id objc_msgSend_setElementsDidChangeOnLastUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementsDidChangeOnLastUpdate:");
}

id objc_msgSend_setEnableVoiceOverCaptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableVoiceOverCaptions:");
}

id objc_msgSend_setEndMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndMarker:");
}

id objc_msgSend_setEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEngine:");
}

id objc_msgSend_setEngineAccessQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEngineAccessQueue:");
}

id objc_msgSend_setEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntries:");
}

id objc_msgSend_setEventCaptureMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventCaptureMode:");
}

id objc_msgSend_setEventOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventOrigin:");
}

id objc_msgSend_setEventProcessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventProcessor:");
}

id objc_msgSend_setEventRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventRecord:");
}

id objc_msgSend_setEventRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventRepresentation:");
}

id objc_msgSend_setExpandedStatusDisplayModeWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpandedStatusDisplayModeWithStatus:");
}

id objc_msgSend_setExpirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpirationDate:");
}

id objc_msgSend_setExplictlyEnabledQuickNav_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExplictlyEnabledQuickNav:");
}

id objc_msgSend_setExploreFocusAffectsNativeFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExploreFocusAffectsNativeFocus:");
}

id objc_msgSend_setExplorerElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExplorerElements:");
}

id objc_msgSend_setExploring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExploring:");
}

id objc_msgSend_setFailedToHandleEventInTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailedToHandleEventInTime:");
}

id objc_msgSend_setFallbackLocalOpaqueParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFallbackLocalOpaqueParent:");
}

id objc_msgSend_setFallbackOpaqueParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFallbackOpaqueParent:");
}

id objc_msgSend_setFetchContextBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchContextBlock:");
}

id objc_msgSend_setFetchPressCountBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchPressCountBlock:");
}

id objc_msgSend_setFill(void *a1, const char *a2, ...)
{
  return _[a1 setFill];
}

id objc_msgSend_setFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilter:");
}

id objc_msgSend_setFilteredEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilteredEntries:");
}

id objc_msgSend_setFingerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerCount:");
}

id objc_msgSend_setFinishedSuccessfully_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinishedSuccessfully:");
}

id objc_msgSend_setFirstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstResponder:");
}

id objc_msgSend_setFirstTrackedAppInGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstTrackedAppInGesture:");
}

id objc_msgSend_setFlickSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlickSpeed:");
}

id objc_msgSend_setFocusElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusElement:");
}

id objc_msgSend_setFocusRetryAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusRetryAttempts:");
}

id objc_msgSend_setFocusedElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusedElement:");
}

id objc_msgSend_setFocusedEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusedEntry:");
}

id objc_msgSend_setFourthDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFourthDot:");
}

id objc_msgSend_setFrameDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrameDelegate:");
}

id objc_msgSend_setFrontmostAppIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrontmostAppIdentifier:");
}

id objc_msgSend_setGenderStrategy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGenderStrategy:");
}

id objc_msgSend_setGeneral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneral:");
}

id objc_msgSend_setGeneralDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneralDict:");
}

id objc_msgSend_setGeneratesBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneratesBraille:");
}

id objc_msgSend_setGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneration:");
}

id objc_msgSend_setGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGesture:");
}

id objc_msgSend_setGesturePracticeInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGesturePracticeInfo:");
}

id objc_msgSend_setGroupNavigationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupNavigationStyle:");
}

id objc_msgSend_setHIDEventFilterMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHIDEventFilterMask:");
}

id objc_msgSend_setHIDEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHIDEventHandler:");
}

id objc_msgSend_setHandlerWithTarget_selector_async_forKey_possibleRequiredEntitlements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandlerWithTarget:selector:async:forKey:possibleRequiredEntitlements:");
}

id objc_msgSend_setHandlerWithTarget_selector_forKey_possibleRequiredEntitlements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandlerWithTarget:selector:forKey:possibleRequiredEntitlements:");
}

id objc_msgSend_setHapticEngineAutoShutdownTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapticEngineAutoShutdownTimeout:");
}

id objc_msgSend_setHapticEngineUsesAutoShutdown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapticEngineUsesAutoShutdown:");
}

id objc_msgSend_setHapticEngineUsesHapticsOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHapticEngineUsesHapticsOnly:");
}

id objc_msgSend_setHasBeenDispatched_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasBeenDispatched:");
}

id objc_msgSend_setHashKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHashKey:");
}

id objc_msgSend_setHelpEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHelpEnabled:");
}

id objc_msgSend_setHintsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHintsEnabled:");
}

id objc_msgSend_setHitTestPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHitTestPoint:");
}

id objc_msgSend_setHostAppBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHostAppBundleID:");
}

id objc_msgSend_setIgnoreDefaultTypeAutofill_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreDefaultTypeAutofill:");
}

id objc_msgSend_setIgnoreEventsForContinuitySession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreEventsForContinuitySession:");
}

id objc_msgSend_setIgnoreSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreSubstitutions:");
}

id objc_msgSend_setIgnoredLayerContextIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoredLayerContextIDs:");
}

id objc_msgSend_setImageCaptionResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageCaptionResults:");
}

id objc_msgSend_setImageCaptioningDisabledApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageCaptioningDisabledApps:");
}

id objc_msgSend_setImageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageData:");
}

id objc_msgSend_setImageIntensity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageIntensity:");
}

id objc_msgSend_setImageInvert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageInvert:");
}

id objc_msgSend_setImageOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageOrigin:");
}

id objc_msgSend_setImageZoom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageZoom:");
}

id objc_msgSend_setInDirectInteractionTypingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInDirectInteractionTypingMode:");
}

id objc_msgSend_setInPassthroughMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInPassthroughMode:");
}

id objc_msgSend_setInPerformanceTestMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInPerformanceTestMode:");
}

id objc_msgSend_setInTextSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInTextSelection:");
}

id objc_msgSend_setIncludeFullImageDescriptionsForAllElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeFullImageDescriptionsForAllElements:");
}

id objc_msgSend_setIncludeFullImageDescriptionsForValidElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeFullImageDescriptionsForValidElements:");
}

id objc_msgSend_setIncludeImageInResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeImageInResult:");
}

id objc_msgSend_setIncludeSceneDetection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeSceneDetection:");
}

id objc_msgSend_setIncludeTextDetection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeTextDetection:");
}

id objc_msgSend_setIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIndexPath:");
}

id objc_msgSend_setInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInfo:");
}

id objc_msgSend_setInitialReadAllElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialReadAllElement:");
}

id objc_msgSend_setInputTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputTableIdentifier:");
}

id objc_msgSend_setInterruptsCurrentSpeech_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptsCurrentSpeech:");
}

id objc_msgSend_setInterruptsEverything_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptsEverything:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setInvert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvert:");
}

id objc_msgSend_setIsActiveResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsActiveResponder:");
}

id objc_msgSend_setIsComputerVisionAsynchrousRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsComputerVisionAsynchrousRequest:");
}

id objc_msgSend_setIsContinuitySessionActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsContinuitySessionActive:");
}

id objc_msgSend_setIsFirstItemInDescriptionList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInDescriptionList:");
}

id objc_msgSend_setIsFirstItemInFieldset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInFieldset:");
}

id objc_msgSend_setIsFirstItemInLandmark_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInLandmark:");
}

id objc_msgSend_setIsFirstItemInList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInList:");
}

id objc_msgSend_setIsFirstItemInTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInTable:");
}

id objc_msgSend_setIsFirstItemInTree_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInTree:");
}

id objc_msgSend_setIsGuideElementMovementEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsGuideElementMovementEvent:");
}

id objc_msgSend_setIsHardwareKeyboardAttached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsHardwareKeyboardAttached:");
}

id objc_msgSend_setIsInvalid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInvalid:");
}

id objc_msgSend_setIsOnenessActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOnenessActive:");
}

id objc_msgSend_setIsSiriListening_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSiriListening:");
}

id objc_msgSend_setIsSiriTalking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSiriTalking:");
}

id objc_msgSend_setIsVoiceOverGeneratedContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsVoiceOverGeneratedContent:");
}

id objc_msgSend_setIsVolumeSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsVolumeSound:");
}

id objc_msgSend_setItemChooserName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemChooserName:");
}

id objc_msgSend_setItemSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemSource:");
}

id objc_msgSend_setItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItems:");
}

id objc_msgSend_setKeepAlive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAlive:");
}

id objc_msgSend_setKeepConnectionAlive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepConnectionAlive:");
}

id objc_msgSend_setKeyChord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyChord:");
}

id objc_msgSend_setKeyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyCode:");
}

id objc_msgSend_setKeyDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyDown:");
}

id objc_msgSend_setKeyDownInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyDownInfo:");
}

id objc_msgSend_setKeyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyInfo:");
}

id objc_msgSend_setKeyString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyString:");
}

id objc_msgSend_setKeyUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyUp:");
}

id objc_msgSend_setKeyboardLanguageHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardLanguageHint:");
}

id objc_msgSend_setKeyboardMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardMode:");
}

id objc_msgSend_setKeyboardOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardOrientation:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLanguage:");
}

id objc_msgSend_setLanguageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLanguageCode:");
}

id objc_msgSend_setLastAttemptToShowContextMenuTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAttemptToShowContextMenuTime:");
}

id objc_msgSend_setLastBlockedRequestBySiriOrDictationTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastBlockedRequestBySiriOrDictationTime:");
}

id objc_msgSend_setLastContainerForCustomRotorHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastContainerForCustomRotorHint:");
}

id objc_msgSend_setLastDispatchedKeyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastDispatchedKeyEvent:");
}

id objc_msgSend_setLastDispatchedKeyEventTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastDispatchedKeyEventTime:");
}

id objc_msgSend_setLastDuckingDisablementSessionStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastDuckingDisablementSessionStart:");
}

id objc_msgSend_setLastElementBlockquoteLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastElementBlockquoteLevel:");
}

id objc_msgSend_setLastElementChangeAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastElementChangeAction:");
}

id objc_msgSend_setLastElementChangeTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastElementChangeTime:");
}

id objc_msgSend_setLastElementForAttemptToShowContextMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastElementForAttemptToShowContextMenu:");
}

id objc_msgSend_setLastElementHeadingLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastElementHeadingLevel:");
}

id objc_msgSend_setLastEventCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastEventCommand:");
}

id objc_msgSend_setLastExplorerOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastExplorerOutputRequest:");
}

id objc_msgSend_setLastFetchedElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastFetchedElement:");
}

id objc_msgSend_setLastGestureEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastGestureEvent:");
}

id objc_msgSend_setLastHomeButtonPressTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastHomeButtonPressTime:");
}

id objc_msgSend_setLastItemChooserSearchTerm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastItemChooserSearchTerm:");
}

id objc_msgSend_setLastLayoutChangeNotificationTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastLayoutChangeNotificationTime:");
}

id objc_msgSend_setLastPauseSpeechAndHapticsStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastPauseSpeechAndHapticsStart:");
}

id objc_msgSend_setLastPrintBrailleCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastPrintBrailleCharacter:");
}

id objc_msgSend_setLastRefreshTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastRefreshTrigger:");
}

id objc_msgSend_setLastReleasedToSystemKeyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastReleasedToSystemKeyEvent:");
}

id objc_msgSend_setLastReleasedToSystemKeyEventTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastReleasedToSystemKeyEventTime:");
}

id objc_msgSend_setLastRequestBlockedBySiriOrDictation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastRequestBlockedBySiriOrDictation:");
}

id objc_msgSend_setLastSearchForElementsTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSearchForElementsTime:");
}

id objc_msgSend_setLastSeenContextDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSeenContextDescriptors:");
}

id objc_msgSend_setLastSeenLineAndColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSeenLineAndColumn:");
}

id objc_msgSend_setLastSystemRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSystemRequest:");
}

id objc_msgSend_setLastTelephonyCallActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTelephonyCallActive:");
}

id objc_msgSend_setLastTouchLocationsByIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTouchLocationsByIdentifier:");
}

id objc_msgSend_setLastTouchedDirectTouchElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTouchedDirectTouchElement:");
}

id objc_msgSend_setLastTrackingUpdateAppsFailureApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTrackingUpdateAppsFailureApplication:");
}

id objc_msgSend_setLastTrackingUpdateAppsFailureTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTrackingUpdateAppsFailureTime:");
}

id objc_msgSend_setLastUsedActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUsedActivity:");
}

id objc_msgSend_setLastUsedActivityTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUsedActivityTime:");
}

id objc_msgSend_setLastUserElementTouchTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUserElementTouchTime:");
}

id objc_msgSend_setLastUserInteractionTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUserInteractionTime:");
}

id objc_msgSend_setLastVolumeDownButtonDownTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVolumeDownButtonDownTime:");
}

id objc_msgSend_setLastVolumeDownButtonUpTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVolumeDownButtonUpTime:");
}

id objc_msgSend_setLastVolumeUpButtonDownTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVolumeUpButtonDownTime:");
}

id objc_msgSend_setLastVolumeUpButtonUpTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVolumeUpButtonUpTime:");
}

id objc_msgSend_setLaunchContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchContext:");
}

id objc_msgSend_setLeftDotPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftDotPositions:");
}

id objc_msgSend_setLeftDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftDots:");
}

id objc_msgSend_setLeftDrifts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftDrifts:");
}

id objc_msgSend_setLimitToComponentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLimitToComponentType:");
}

id objc_msgSend_setLiveModeValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLiveModeValue:");
}

id objc_msgSend_setLiveRecognitionOverlayOpen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLiveRecognitionOverlayOpen:");
}

id objc_msgSend_setLiveRegionStatusForWebOrApp_status_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLiveRegionStatusForWebOrApp:status:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocalizedWebRotorMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedWebRotorMap:");
}

id objc_msgSend_setLockScreenDimmingTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLockScreenDimmingTimer:");
}

id objc_msgSend_setLongPressHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongPressHandler:");
}

id objc_msgSend_setMXSessionProperty_value_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMXSessionProperty:value:error:");
}

id objc_msgSend_setMainAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMainAttributedString:");
}

id objc_msgSend_setMapsExplorationGestureManagerDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMapsExplorationGestureManagerDelegate:");
}

id objc_msgSend_setMasterStatusCellIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMasterStatusCellIndex:");
}

id objc_msgSend_setMatchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMatchBlock:");
}

id objc_msgSend_setMaxRecognitionResultCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxRecognitionResultCount:");
}

id objc_msgSend_setMiddleDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMiddleDot:");
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMode:");
}

id objc_msgSend_setModifiedInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedInput:");
}

id objc_msgSend_setModifierState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifierState:");
}

id objc_msgSend_setModifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiers:");
}

id objc_msgSend_setModifiersChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiersChanged:");
}

id objc_msgSend_setMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonth:");
}

id objc_msgSend_setMostRecentElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMostRecentElementCommunity:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNameSearcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNameSearcher:");
}

id objc_msgSend_setNameSearcherHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNameSearcherHint:");
}

id objc_msgSend_setNameSearcherMonitorElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNameSearcherMonitorElement:");
}

id objc_msgSend_setNativeFocus(void *a1, const char *a2, ...)
{
  return _[a1 setNativeFocus];
}

id objc_msgSend_setNativeFocusElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNativeFocusElement:");
}

id objc_msgSend_setNavigateImagesOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigateImagesOption:");
}

id objc_msgSend_setNavigationDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationDirection:");
}

id objc_msgSend_setNavigationDirectionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationDirectionMode:");
}

id objc_msgSend_setNavigationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationStyle:");
}

id objc_msgSend_setNeedToShowVOWarningBanner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedToShowVOWarningBanner:");
}

id objc_msgSend_setNeedsForceCacheUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsForceCacheUpdate:");
}

id objc_msgSend_setNextElementToFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextElementToFocus:");
}

id objc_msgSend_setNextStringToSpeakOnScreenChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextStringToSpeakOnScreenChange:");
}

id objc_msgSend_setNotificationCategories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationCategories:");
}

id objc_msgSend_setNotificationsWhenLockedOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationsWhenLockedOutput:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setObject_forIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forIndex:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObject_forVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forVariant:");
}

id objc_msgSend_setOnHold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnHold:");
}

id objc_msgSend_setOrbValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrbValue:");
}

id objc_msgSend_setOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientation:");
}

id objc_msgSend_setOrientationEventsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientationEventsEnabled:");
}

id objc_msgSend_setOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrigin:");
}

id objc_msgSend_setOriginalString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalString:");
}

id objc_msgSend_setOriginalType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalType:");
}

id objc_msgSend_setOriginationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginationType:");
}

id objc_msgSend_setOutputChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputChannels:");
}

id objc_msgSend_setOutputManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputManager:");
}

id objc_msgSend_setOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputRequest:");
}

id objc_msgSend_setOverridePrintBrailleWithAllSixDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverridePrintBrailleWithAllSixDots:");
}

id objc_msgSend_setOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwner:");
}

id objc_msgSend_setPanEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPanEnabled:");
}

id objc_msgSend_setPassiveOrientationEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassiveOrientationEvents:");
}

id objc_msgSend_setPathIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPathIndex:");
}

id objc_msgSend_setPathLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPathLocation:");
}

id objc_msgSend_setPathProximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPathProximity:");
}

id objc_msgSend_setPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPaths:");
}

id objc_msgSend_setPauseSpeechAndHaptics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPauseSpeechAndHaptics:");
}

id objc_msgSend_setPeeking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeeking:");
}

id objc_msgSend_setPendingDownEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingDownEvent:");
}

id objc_msgSend_setPendingInputString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingInputString:");
}

id objc_msgSend_setPerVoiceSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerVoiceSettings:");
}

id objc_msgSend_setPerformFuzzyHitTestNextTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerformFuzzyHitTestNextTime:");
}

id objc_msgSend_setPerformPunctuationTranslation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerformPunctuationTranslation:");
}

id objc_msgSend_setPerkinsKeyboardInputEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerkinsKeyboardInputEnabled:");
}

id objc_msgSend_setPersistentKeyModifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentKeyModifiers:");
}

id objc_msgSend_setPhonemes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhonemes:");
}

id objc_msgSend_setPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPid:");
}

id objc_msgSend_setPitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPitch:");
}

id objc_msgSend_setPlanarBrailleElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlanarBrailleElement:");
}

id objc_msgSend_setPlanarBrailleElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlanarBrailleElements:");
}

id objc_msgSend_setPlanarData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlanarData:");
}

id objc_msgSend_setPointerEventObservers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointerEventObservers:");
}

id objc_msgSend_setPointerVoiceOverCursorOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointerVoiceOverCursorOption:");
}

id objc_msgSend_setPracticeElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPracticeElement:");
}

id objc_msgSend_setPracticeRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPracticeRegion:");
}

id objc_msgSend_setPreference_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreference:forKey:");
}

id objc_msgSend_setPreferenceSync_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferenceSync:forKey:");
}

id objc_msgSend_setPreferredBrailleTableIdentifier_forKeyboardLanguage_keyboardLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredBrailleTableIdentifier:forKeyboardLanguage:keyboardLayout:");
}

id objc_msgSend_setPreferredCharacterSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredCharacterSet:");
}

id objc_msgSend_setPreferredOutputLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredOutputLocale:");
}

id objc_msgSend_setPreviousContextDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousContextDescriptors:");
}

id objc_msgSend_setPreviousCustomRotorsForRotorHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousCustomRotorsForRotorHint:");
}

id objc_msgSend_setPreviousElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousElement:");
}

id objc_msgSend_setPreviousFirstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousFirstResponder:");
}

id objc_msgSend_setPreviousFirstResponderValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousFirstResponderValue:");
}

id objc_msgSend_setPreviousPanningDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousPanningDirection:");
}

id objc_msgSend_setPreviousRotorVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousRotorVoiceIdentifier:");
}

id objc_msgSend_setPreviousSpokenValueParts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousSpokenValueParts:");
}

id objc_msgSend_setPreviousTableOrCollectionViewApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousTableOrCollectionViewApplication:");
}

id objc_msgSend_setPreviousTouchContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousTouchContainer:");
}

id objc_msgSend_setPreviouslySpokenImageCaptionResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviouslySpokenImageCaptionResults:");
}

id objc_msgSend_setPunctuation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPunctuation:");
}

id objc_msgSend_setQuickNavDownDurationAllowedAcceptance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuickNavDownDurationAllowedAcceptance:");
}

id objc_msgSend_setRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRange:");
}

id objc_msgSend_setRangeBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRangeBlock:");
}

id objc_msgSend_setRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRate:");
}

id objc_msgSend_setReachabilityActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachabilityActive:");
}

id objc_msgSend_setReachabilityIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachabilityIdentifier:");
}

id objc_msgSend_setReachabilityOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachabilityOffset:");
}

id objc_msgSend_setReadAllExplorerElementsTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadAllExplorerElementsTimer:");
}

id objc_msgSend_setRealtime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealtime:");
}

id objc_msgSend_setRealtimeBlinkIsUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealtimeBlinkIsUp:");
}

id objc_msgSend_setRealtimeBlinking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealtimeBlinking:");
}

id objc_msgSend_setRealtimeSpinnerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealtimeSpinnerCount:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setRecognitionCanvas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecognitionCanvas:");
}

id objc_msgSend_setRecognitionEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecognitionEngine:");
}

id objc_msgSend_setRemoteElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteElement:");
}

id objc_msgSend_setRemotePoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemotePoint:");
}

id objc_msgSend_setRepeaterTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepeaterTimer:");
}

id objc_msgSend_setReplaceCommas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplaceCommas:");
}

id objc_msgSend_setReplacementString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplacementString:");
}

id objc_msgSend_setReplacements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplacements:");
}

id objc_msgSend_setRequestElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestElements:");
}

id objc_msgSend_setRequestHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestHeaders:");
}

id objc_msgSend_setRequestQueueMixinBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestQueueMixinBehavior:");
}

id objc_msgSend_setResolvedSoundPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResolvedSoundPath:");
}

id objc_msgSend_setResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResolver:");
}

id objc_msgSend_setResolvingEventOccurredBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResolvingEventOccurredBlock:");
}

id objc_msgSend_setResultUpdateDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultUpdateDelegate:");
}

id objc_msgSend_setRightDotPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightDotPositions:");
}

id objc_msgSend_setRightDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightDots:");
}

id objc_msgSend_setRightDrifts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightDrifts:");
}

id objc_msgSend_setRotationCapabilityEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotationCapabilityEnabled:");
}

id objc_msgSend_setRotorManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotorManager:");
}

id objc_msgSend_setRotorRate_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotorRate:completionHandler:");
}

id objc_msgSend_setRotorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotorType:");
}

id objc_msgSend_setRule_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRule:");
}

id objc_msgSend_setScreenCurtainEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenCurtainEnabled:");
}

id objc_msgSend_setScreenCurtainIsTemporarilyDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenCurtainIsTemporarilyDisabled:");
}

id objc_msgSend_setScreenCurtainSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenCurtainSuspended:");
}

id objc_msgSend_setScreenOn_silently_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenOn:silently:");
}

id objc_msgSend_setScreenreaderMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenreaderMode:");
}

id objc_msgSend_setSearchEndedWithDifferentGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchEndedWithDifferentGroup:");
}

id objc_msgSend_setSearchPending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchPending:");
}

id objc_msgSend_setSearchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchType:");
}

id objc_msgSend_setSearchUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchUUID:");
}

id objc_msgSend_setSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSegment:");
}

id objc_msgSend_setSegmentIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSegmentIndex:");
}

id objc_msgSend_setSelectButtonReceivedNotificationObserverToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectButtonReceivedNotificationObserverToken:");
}

id objc_msgSend_setSelectedActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedActivity:");
}

id objc_msgSend_setSelectedBrailleGesturesInputTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedBrailleGesturesInputTable:");
}

id objc_msgSend_setSelectedBrailleInputTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedBrailleInputTable:");
}

id objc_msgSend_setSelectedBrailleTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedBrailleTable:");
}

id objc_msgSend_setSelectedLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedLanguage:");
}

id objc_msgSend_setSelectedLanguageIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedLanguageIdentifier:");
}

id objc_msgSend_setSelectedTextRange_refreshBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedTextRange:refreshBraille:");
}

id objc_msgSend_setSelectedTextRange_refreshBraille_isVoiceOverSelectionMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedTextRange:refreshBraille:isVoiceOverSelectionMovement:");
}

id objc_msgSend_setSelectionToTextMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectionToTextMarker:");
}

id objc_msgSend_setSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSenderID:");
}

id objc_msgSend_setSeriesOfTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeriesOfTouchPoints:");
}

id objc_msgSend_setShouldApplyRTL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldApplyRTL:");
}

id objc_msgSend_setShouldAuthenticateDefaultAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAuthenticateDefaultAction:");
}

id objc_msgSend_setShouldEchoCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldEchoCharacter:");
}

id objc_msgSend_setShouldOutputToHearingAid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldOutputToHearingAid:");
}

id objc_msgSend_setShouldPlayKeyboardSecureClickSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPlayKeyboardSecureClickSound:");
}

id objc_msgSend_setShouldProcessRemotely_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldProcessRemotely:");
}

id objc_msgSend_setShouldSilenceAnnouncements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSilenceAnnouncements:");
}

id objc_msgSend_setShouldSkipValidateElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSkipValidateElement:");
}

id objc_msgSend_setShouldSuppressDefaultAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSuppressDefaultAction:");
}

id objc_msgSend_setShouldTurnTrackingIntoDirectTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldTurnTrackingIntoDirectTouch:");
}

id objc_msgSend_setShouldUpdateDotPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUpdateDotPositions:");
}

id objc_msgSend_setShowGeneral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowGeneral:");
}

id objc_msgSend_setShowRealtime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowRealtime:");
}

id objc_msgSend_setShowText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowText:");
}

id objc_msgSend_setShowsWebSearchResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsWebSearchResults:");
}

id objc_msgSend_setSimpleClickHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimpleClickHandler:");
}

id objc_msgSend_setSingleLetterInputIsOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSingleLetterInputIsOn:");
}

id objc_msgSend_setSingleLetterQuickNavOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSingleLetterQuickNavOn:");
}

id objc_msgSend_setSlideToTypeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSlideToTypeEnabled:");
}

id objc_msgSend_setSortPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortPriority:");
}

id objc_msgSend_setSoundCurtainEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoundCurtainEnabled:");
}

id objc_msgSend_setSoundMuted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoundMuted:");
}

id objc_msgSend_setSoundThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoundThread:");
}

id objc_msgSend_setSpeakNonfocusableElementsAfterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeakNonfocusableElementsAfterDelay:");
}

id objc_msgSend_setSpeakUnderPointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeakUnderPointer:");
}

id objc_msgSend_setSpeakingDelayTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeakingDelayTimer:");
}

id objc_msgSend_setSpeakingRateInRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeakingRateInRotor:");
}

id objc_msgSend_setSpeechLogging_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechLogging:");
}

id objc_msgSend_setSpeechMuted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechMuted:");
}

id objc_msgSend_setSpeechSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechSource:");
}

id objc_msgSend_setSpeechVoiceIdentifier_forLanguage_sourceKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechVoiceIdentifier:forLanguage:sourceKey:");
}

id objc_msgSend_setSplitFlickEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSplitFlickEnabled:");
}

id objc_msgSend_setSplitting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSplitting:");
}

id objc_msgSend_setSpringBoardActionHandlerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpringBoardActionHandlerIdentifier:");
}

id objc_msgSend_setStartMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartMarker:");
}

id objc_msgSend_setStartedReadingCurrentElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartedReadingCurrentElements:");
}

id objc_msgSend_setStartedRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartedRequest:");
}

id objc_msgSend_setStartingRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartingRange:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:");
}

id objc_msgSend_setString_overrideOriginalString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:overrideOriginalString:");
}

id objc_msgSend_setSupplementalBrailleDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupplementalBrailleDescription:");
}

id objc_msgSend_setSupportsHomeGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsHomeGestures:");
}

id objc_msgSend_setSuppressSelectionChangeNotificationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressSelectionChangeNotificationCount:");
}

id objc_msgSend_setSuppressValueChangeNotificationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressValueChangeNotificationCount:");
}

id objc_msgSend_setSynchronization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSynchronization:");
}

id objc_msgSend_setSynthesizeSilently_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSynthesizeSilently:");
}

id objc_msgSend_setSynthesizerForTelephonyMixin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSynthesizerForTelephonyMixin:");
}

id objc_msgSend_setSystemVisualizationState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemVisualizationState:");
}

id objc_msgSend_setSystemVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemVolume:");
}

id objc_msgSend_setSystemVolumeControlsAvailablity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemVolumeControlsAvailablity:");
}

id objc_msgSend_setTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableIdentifier:");
}

id objc_msgSend_setTapticTimeUsageCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTapticTimeUsageCount:");
}

id objc_msgSend_setTargetThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetThread:");
}

id objc_msgSend_setTelephonyIsActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTelephonyIsActive:");
}

id objc_msgSend_setTemporaryVoiceOverStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemporaryVoiceOverStatus:");
}

id objc_msgSend_setTestingHasActiveDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTestingHasActiveDisplay:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextDict:");
}

id objc_msgSend_setTextSearchModeOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextSearchModeOn:");
}

id objc_msgSend_setThreadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThreadIdentifier:");
}

id objc_msgSend_setThreadWaitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThreadWaitTime:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTopDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopDot:");
}

id objc_msgSend_setTouchContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchContainer:");
}

id objc_msgSend_setTouchForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchForce:");
}

id objc_msgSend_setTouchPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchPoint:");
}

id objc_msgSend_setTouchRawLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchRawLocation:");
}

id objc_msgSend_setTouchVelocity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchVelocity:");
}

id objc_msgSend_setTrailingBookCursorPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrailingBookCursorPosition:");
}

id objc_msgSend_setTransducerType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransducerType:");
}

id objc_msgSend_setTriggerSignpostCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerSignpostCollection:");
}

id objc_msgSend_setTutorialActiveRestrictionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTutorialActiveRestrictionType:");
}

id objc_msgSend_setTutorialListeningForGestureNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTutorialListeningForGestureNotifications:");
}

id objc_msgSend_setTutorialPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTutorialPage:");
}

id objc_msgSend_setTutorialRecognizedGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTutorialRecognizedGesture:");
}

id objc_msgSend_setTutorialRestrictedCommands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTutorialRestrictedCommands:");
}

id objc_msgSend_setTvInteractionModeWithoutSaving_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTvInteractionModeWithoutSaving:");
}

id objc_msgSend_setTvSpeechRequestManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTvSpeechRequestManager:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setTypingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypingMode:");
}

id objc_msgSend_setTypingMode_keyboardSize_shouldUseEightDotBraille_shouldReverseDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypingMode:keyboardSize:shouldUseEightDotBraille:shouldReverseDots:");
}

id objc_msgSend_setTypingPitchChangeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypingPitchChangeEnabled:");
}

id objc_msgSend_setUiClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUiClient:");
}

id objc_msgSend_setUiServerIsReady_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUiServerIsReady:");
}

id objc_msgSend_setUnDuckingProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnDuckingProperties:");
}

id objc_msgSend_setUnitOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnitOptions:");
}

id objc_msgSend_setUnitStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnitStyle:");
}

id objc_msgSend_setUnmodifiedInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnmodifiedInput:");
}

id objc_msgSend_setUpdateDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateDelegate:");
}

id objc_msgSend_setUpdateFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateFocusContext:");
}

id objc_msgSend_setUpdateRotorWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateRotorWithElement:");
}

id objc_msgSend_setUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsage:");
}

id objc_msgSend_setUsage_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsage:userInitiated:");
}

id objc_msgSend_setUseDigitalCrownNavigationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseDigitalCrownNavigationEnabled:");
}

id objc_msgSend_setUseRingerSwitchForNotificationOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseRingerSwitchForNotificationOutput:");
}

id objc_msgSend_setUserCommandContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserCommandContext:");
}

id objc_msgSend_setUserCommandInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserCommandInitiated:");
}

id objc_msgSend_setUserCommandManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserCommandManager:");
}

id objc_msgSend_setUserDefinedLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDefinedLabel:");
}

id objc_msgSend_setUserInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInitiated:");
}

id objc_msgSend_setUserSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserSubstitutions:");
}

id objc_msgSend_setUsesAbsoluteDistanceForPinch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesAbsoluteDistanceForPinch:");
}

id objc_msgSend_setUsesBrailleSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesBrailleSubstitutions:");
}

id objc_msgSend_setUsesHapticFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesHapticFeedback:");
}

id objc_msgSend_setUsesTypingSoundFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesTypingSoundFeedback:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVisionEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisionEngine:");
}

id objc_msgSend_setVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceIdentifier:");
}

id objc_msgSend_setVoiceOverAlwaysTurnOnBluetooth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverAlwaysTurnOnBluetooth:");
}

id objc_msgSend_setVoiceOverAudioDuckingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverAudioDuckingEnabled:");
}

id objc_msgSend_setVoiceOverBSIUsageCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverBSIUsageCount:");
}

id objc_msgSend_setVoiceOverBrailleAutoAdvanceDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverBrailleAutoAdvanceDuration:");
}

id objc_msgSend_setVoiceOverBrailleTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverBrailleTableIdentifier:");
}

id objc_msgSend_setVoiceOverBrailleWordWrapEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverBrailleWordWrapEnabled:");
}

id objc_msgSend_setVoiceOverCaptionText_withRange_language_voice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverCaptionText:withRange:language:voice:");
}

id objc_msgSend_setVoiceOverCurrentRotorVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverCurrentRotorVoiceIdentifier:");
}

id objc_msgSend_setVoiceOverDescribedMedia_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverDescribedMedia:");
}

id objc_msgSend_setVoiceOverDirectTouchEnabledApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverDirectTouchEnabledApps:");
}

id objc_msgSend_setVoiceOverEffectiveSpeakingVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverEffectiveSpeakingVolume:");
}

id objc_msgSend_setVoiceOverExploreFocusAffectsNativeFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverExploreFocusAffectsNativeFocus:");
}

id objc_msgSend_setVoiceOverFocused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverFocused:");
}

id objc_msgSend_setVoiceOverHardwareTypingFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverHardwareTypingFeedback:");
}

id objc_msgSend_setVoiceOverHelpMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverHelpMode:");
}

id objc_msgSend_setVoiceOverHintsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverHintsEnabled:");
}

id objc_msgSend_setVoiceOverMediaDuckingAmount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverMediaDuckingAmount:");
}

id objc_msgSend_setVoiceOverMediaDuckingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverMediaDuckingMode:");
}

id objc_msgSend_setVoiceOverMuted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverMuted:");
}

id objc_msgSend_setVoiceOverMuted_sendRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverMuted:sendRequest:");
}

id objc_msgSend_setVoiceOverNavigationDirectionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverNavigationDirectionMode:");
}

id objc_msgSend_setVoiceOverNavigationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverNavigationStyle:");
}

id objc_msgSend_setVoiceOverPhoneticsFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverPhoneticsFeedback:");
}

id objc_msgSend_setVoiceOverPitchChangeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverPitchChangeEnabled:");
}

id objc_msgSend_setVoiceOverPreferredTVInteractionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverPreferredTVInteractionMode:");
}

id objc_msgSend_setVoiceOverPunctuationGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverPunctuationGroup:");
}

id objc_msgSend_setVoiceOverRotorItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverRotorItems:");
}

id objc_msgSend_setVoiceOverScreenCurtainEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverScreenCurtainEnabled:");
}

id objc_msgSend_setVoiceOverSelectedActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSelectedActivity:");
}

id objc_msgSend_setVoiceOverShouldDisallowUSBRestrictedMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverShouldDisallowUSBRestrictedMode:");
}

id objc_msgSend_setVoiceOverShowSoftwareKeyboardWithBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverShowSoftwareKeyboardWithBraille:");
}

id objc_msgSend_setVoiceOverSilenceAnnouncements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSilenceAnnouncements:");
}

id objc_msgSend_setVoiceOverSoundCurtain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSoundCurtain:");
}

id objc_msgSend_setVoiceOverSoundEffectsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSoundEffectsEnabled:");
}

id objc_msgSend_setVoiceOverSpeakNonfocusableElementsAfterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSpeakNonfocusableElementsAfterDelay:");
}

id objc_msgSend_setVoiceOverTouchBrailleDisplayInputTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleDisplayInputTableIdentifier:");
}

id objc_msgSend_setVoiceOverTouchBrailleDisplayOutputTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleDisplayOutputTableIdentifier:");
}

id objc_msgSend_setVoiceOverTouchBrailleGesturesDidPlayCalibrationHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleGesturesDidPlayCalibrationHint:");
}

id objc_msgSend_setVoiceOverTouchBrailleGesturesInputTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleGesturesInputTableIdentifier:");
}

id objc_msgSend_setVoiceOverTouchBrailleGesturesLockedOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleGesturesLockedOrientation:");
}

id objc_msgSend_setVoiceOverTouchBrailleGesturesLockedTypingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleGesturesLockedTypingMode:");
}

id objc_msgSend_setVoiceOverTouchBrailleGesturesShouldUseLockedConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleGesturesShouldUseLockedConfiguration:");
}

id objc_msgSend_setVoiceOverTouchPerkinsChordKeyboardInputEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchPerkinsChordKeyboardInputEnabled:");
}

id objc_msgSend_setVoiceOverTouchPerkinsKeyboardInputEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchPerkinsKeyboardInputEnabled:");
}

id objc_msgSend_setVoiceOverTouchSingleLetterQuickNavEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchSingleLetterQuickNavEnabled:");
}

id objc_msgSend_setVoiceOverUseDigitalCrownNavigation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverUseDigitalCrownNavigation:");
}

id objc_msgSend_setVoiceOverUserDidReadUSBRestrictedModeAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverUserDidReadUSBRestrictedModeAlert:");
}

id objc_msgSend_setVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolume:");
}

id objc_msgSend_setVolumeTo_forCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeTo:forCategory:");
}

id objc_msgSend_setVolumeTo_forCategory_retainFullMute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeTo:forCategory:retainFullMute:");
}

id objc_msgSend_setVotTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVotTransaction:");
}

id objc_msgSend_setWaitingToRetryFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaitingToRetryFocus:");
}

id objc_msgSend_setWarningTonesTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWarningTonesTimer:");
}

id objc_msgSend_setWasDivided_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWasDivided:");
}

id objc_msgSend_setWasEnabledThroughAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWasEnabledThroughAccessory:");
}

id objc_msgSend_setWebAreaURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebAreaURL:");
}

id objc_msgSend_setWebPageLoadURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebPageLoadURL:");
}

id objc_msgSend_setWebPageLoadedGenerationMark_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebPageLoadedGenerationMark:");
}

id objc_msgSend_setWebsiteLanguageMappingOverrides_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebsiteLanguageMappingOverrides:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWordWrapEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWordWrapEnabled:");
}

id objc_msgSend_setYear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYear:");
}

id objc_msgSend_setZoomLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoomLevel:");
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _[a1 shared];
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAVSystemController];
}

id objc_msgSend_sharedAccessoryManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccessoryManager];
}

id objc_msgSend_sharedAudioPresentationOutputContext(void *a1, const char *a2, ...)
{
  return _[a1 sharedAudioPresentationOutputContext];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedDatabase(void *a1, const char *a2, ...)
{
  return _[a1 sharedDatabase];
}

id objc_msgSend_sharedInputModeController(void *a1, const char *a2, ...)
{
  return _[a1 sharedInputModeController];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedSystemAudioContext(void *a1, const char *a2, ...)
{
  return _[a1 sharedSystemAudioContext];
}

id objc_msgSend_sharedWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 sharedWorkspace];
}

id objc_msgSend_shortcut(void *a1, const char *a2, ...)
{
  return _[a1 shortcut];
}

id objc_msgSend_shouldAddAlternateActionForLinkElement(void *a1, const char *a2, ...)
{
  return _[a1 shouldAddAlternateActionForLinkElement];
}

id objc_msgSend_shouldAllowRotorEvents(void *a1, const char *a2, ...)
{
  return _[a1 shouldAllowRotorEvents];
}

id objc_msgSend_shouldAllowSpeaking(void *a1, const char *a2, ...)
{
  return _[a1 shouldAllowSpeaking];
}

id objc_msgSend_shouldAnalyzeElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAnalyzeElement:");
}

id objc_msgSend_shouldAnnounceFontInfo(void *a1, const char *a2, ...)
{
  return _[a1 shouldAnnounceFontInfo];
}

id objc_msgSend_shouldAnnounceTableInfo(void *a1, const char *a2, ...)
{
  return _[a1 shouldAnnounceTableInfo];
}

id objc_msgSend_shouldBeDeactivatedByEscape(void *a1, const char *a2, ...)
{
  return _[a1 shouldBeDeactivatedByEscape];
}

id objc_msgSend_shouldEchoCharacter(void *a1, const char *a2, ...)
{
  return _[a1 shouldEchoCharacter];
}

id objc_msgSend_shouldElement_beCombined_combineLinks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldElement:beCombined:combineLinks:");
}

id objc_msgSend_shouldExpandMathEquation(void *a1, const char *a2, ...)
{
  return _[a1 shouldExpandMathEquation];
}

id objc_msgSend_shouldHideCursor(void *a1, const char *a2, ...)
{
  return _[a1 shouldHideCursor];
}

id objc_msgSend_shouldIgnorePreviousFocusedElement(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnorePreviousFocusedElement];
}

id objc_msgSend_shouldIgnoreTextEditingTrait(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnoreTextEditingTrait];
}

id objc_msgSend_shouldIncludeMediaDescriptionsRotor(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeMediaDescriptionsRotor];
}

id objc_msgSend_shouldIncludeRegionDescription(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeRegionDescription];
}

id objc_msgSend_shouldIncludeRemoteParentCustomActions(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeRemoteParentCustomActions];
}

id objc_msgSend_shouldIncludeRowRangeInDescription(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeRowRangeInDescription];
}

id objc_msgSend_shouldPerformSearchSynchronously(void *a1, const char *a2, ...)
{
  return _[a1 shouldPerformSearchSynchronously];
}

id objc_msgSend_shouldPlayHapticForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPlayHapticForEvent:");
}

id objc_msgSend_shouldPlayKeyboardSecureClickSound(void *a1, const char *a2, ...)
{
  return _[a1 shouldPlayKeyboardSecureClickSound];
}

id objc_msgSend_shouldPlaySoundForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPlaySoundForEvent:");
}

id objc_msgSend_shouldPlaySoundWhenFocused(void *a1, const char *a2, ...)
{
  return _[a1 shouldPlaySoundWhenFocused];
}

id objc_msgSend_shouldReverseDots(void *a1, const char *a2, ...)
{
  return _[a1 shouldReverseDots];
}

id objc_msgSend_shouldSilenceAnnouncements(void *a1, const char *a2, ...)
{
  return _[a1 shouldSilenceAnnouncements];
}

id objc_msgSend_shouldSkipImageTraitDescription(void *a1, const char *a2, ...)
{
  return _[a1 shouldSkipImageTraitDescription];
}

id objc_msgSend_shouldSkipValidateElement(void *a1, const char *a2, ...)
{
  return _[a1 shouldSkipValidateElement];
}

id objc_msgSend_shouldSnarfCrown(void *a1, const char *a2, ...)
{
  return _[a1 shouldSnarfCrown];
}

id objc_msgSend_shouldSnarfEventForTapWakeGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSnarfEventForTapWakeGesture:");
}

id objc_msgSend_shouldSpeakExplorerElementsAfterFocus(void *a1, const char *a2, ...)
{
  return _[a1 shouldSpeakExplorerElementsAfterFocus];
}

id objc_msgSend_shouldSpeakHelpInGestureArea(void *a1, const char *a2, ...)
{
  return _[a1 shouldSpeakHelpInGestureArea];
}

id objc_msgSend_shouldSpeakMathEquationTrait(void *a1, const char *a2, ...)
{
  return _[a1 shouldSpeakMathEquationTrait];
}

id objc_msgSend_shouldSpeakScrollStatusOnEntry(void *a1, const char *a2, ...)
{
  return _[a1 shouldSpeakScrollStatusOnEntry];
}

id objc_msgSend_shouldStartReadAllOnFocus(void *a1, const char *a2, ...)
{
  return _[a1 shouldStartReadAllOnFocus];
}

id objc_msgSend_shouldTurnTrackingIntoDirectTouch(void *a1, const char *a2, ...)
{
  return _[a1 shouldTurnTrackingIntoDirectTouch];
}

id objc_msgSend_shouldTutorialIgnoreCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldTutorialIgnoreCommand:");
}

id objc_msgSend_shouldUpdateDotPositions(void *a1, const char *a2, ...)
{
  return _[a1 shouldUpdateDotPositions];
}

id objc_msgSend_shouldUseAVAudioPlayer(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseAVAudioPlayer];
}

id objc_msgSend_shouldUseEightDotBraille(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseEightDotBraille];
}

id objc_msgSend_showAlert_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAlert:withHandler:");
}

id objc_msgSend_showBrailleUIWithOrientation_dotPositions_typingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showBrailleUIWithOrientation:dotPositions:typingMode:");
}

id objc_msgSend_showBulletinBoard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showBulletinBoard:");
}

id objc_msgSend_showControlCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showControlCenter:");
}

id objc_msgSend_showDetectionUI(void *a1, const char *a2, ...)
{
  return _[a1 showDetectionUI];
}

id objc_msgSend_showEditingHUD(void *a1, const char *a2, ...)
{
  return _[a1 showEditingHUD];
}

id objc_msgSend_showEightDotBraille(void *a1, const char *a2, ...)
{
  return _[a1 showEightDotBraille];
}

id objc_msgSend_showElementLabelPanel_currentLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showElementLabelPanel:currentLabel:");
}

id objc_msgSend_showGeneral(void *a1, const char *a2, ...)
{
  return _[a1 showGeneral];
}

id objc_msgSend_showItemChooser_withItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showItemChooser:withItems:");
}

id objc_msgSend_showMapsExplorationUIWithCenter_andData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showMapsExplorationUIWithCenter:andData:");
}

id objc_msgSend_showNextAnnouncement(void *a1, const char *a2, ...)
{
  return _[a1 showNextAnnouncement];
}

id objc_msgSend_showNextCandidate(void *a1, const char *a2, ...)
{
  return _[a1 showNextCandidate];
}

id objc_msgSend_showNextWordDescription(void *a1, const char *a2, ...)
{
  return _[a1 showNextWordDescription];
}

id objc_msgSend_showPreviousAnnouncement(void *a1, const char *a2, ...)
{
  return _[a1 showPreviousAnnouncement];
}

id objc_msgSend_showPreviousCandidate(void *a1, const char *a2, ...)
{
  return _[a1 showPreviousCandidate];
}

id objc_msgSend_showPreviousWordDescription(void *a1, const char *a2, ...)
{
  return _[a1 showPreviousWordDescription];
}

id objc_msgSend_showRealtime(void *a1, const char *a2, ...)
{
  return _[a1 showRealtime];
}

id objc_msgSend_showRemoteView_withData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showRemoteView:withData:");
}

id objc_msgSend_showSpringBoardVOConfirmation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showSpringBoardVOConfirmation:");
}

id objc_msgSend_showSpringboardNoHomeButtonGestureAlert(void *a1, const char *a2, ...)
{
  return _[a1 showSpringboardNoHomeButtonGestureAlert];
}

id objc_msgSend_showText(void *a1, const char *a2, ...)
{
  return _[a1 showText];
}

id objc_msgSend_showsDualPages(void *a1, const char *a2, ...)
{
  return _[a1 showsDualPages];
}

id objc_msgSend_showsWebSearchResults(void *a1, const char *a2, ...)
{
  return _[a1 showsWebSearchResults];
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_simpleClickHandler(void *a1, const char *a2, ...)
{
  return _[a1 simpleClickHandler];
}

id objc_msgSend_simulateEdgePressHaptics(void *a1, const char *a2, ...)
{
  return _[a1 simulateEdgePressHaptics];
}

id objc_msgSend_singleLetterCommandForKeyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "singleLetterCommandForKeyInfo:");
}

id objc_msgSend_siriShortcut(void *a1, const char *a2, ...)
{
  return _[a1 siriShortcut];
}

id objc_msgSend_sizeWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeWithAttributes:");
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_snapshot(void *a1, const char *a2, ...)
{
  return _[a1 snapshot];
}

id objc_msgSend_softwareKeyboardManager(void *a1, const char *a2, ...)
{
  return _[a1 softwareKeyboardManager];
}

id objc_msgSend_sortDirection(void *a1, const char *a2, ...)
{
  return _[a1 sortDirection];
}

id objc_msgSend_sortPriority(void *a1, const char *a2, ...)
{
  return _[a1 sortPriority];
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingSelector:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sound_didFinishPlaying_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sound:didFinishPlaying:");
}

id objc_msgSend_soundAssetURLForOutputEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "soundAssetURLForOutputEvent:");
}

id objc_msgSend_soundEffectsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 soundEffectsEnabled];
}

id objc_msgSend_soundMuted(void *a1, const char *a2, ...)
{
  return _[a1 soundMuted];
}

id objc_msgSend_soundPath(void *a1, const char *a2, ...)
{
  return _[a1 soundPath];
}

id objc_msgSend_soundThread(void *a1, const char *a2, ...)
{
  return _[a1 soundThread];
}

id objc_msgSend_speakCorrectionsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 speakCorrectionsEnabled];
}

id objc_msgSend_speakEmojis(void *a1, const char *a2, ...)
{
  return _[a1 speakEmojis];
}

id objc_msgSend_speakNonfocusableElementsAfterDelay(void *a1, const char *a2, ...)
{
  return _[a1 speakNonfocusableElementsAfterDelay];
}

id objc_msgSend_speakSimpleString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakSimpleString:");
}

id objc_msgSend_speakSimpleString_braille_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakSimpleString:braille:language:");
}

id objc_msgSend_speakTableHeadersForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakTableHeadersForElement:");
}

id objc_msgSend_speakTableRowAndColumnForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakTableRowAndColumnForElement:");
}

id objc_msgSend_speakThisWithOptions_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakThisWithOptions:errorHandler:");
}

id objc_msgSend_speakThisWithOptions_useAppAtPoint_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakThisWithOptions:useAppAtPoint:errorHandler:");
}

id objc_msgSend_speakUnderPointer(void *a1, const char *a2, ...)
{
  return _[a1 speakUnderPointer];
}

id objc_msgSend_speakUnderPointerDelay(void *a1, const char *a2, ...)
{
  return _[a1 speakUnderPointerDelay];
}

id objc_msgSend_speakableCharacters(void *a1, const char *a2, ...)
{
  return _[a1 speakableCharacters];
}

id objc_msgSend_speakableDescription(void *a1, const char *a2, ...)
{
  return _[a1 speakableDescription];
}

id objc_msgSend_speakableSegmentsUpToDepth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakableSegmentsUpToDepth:");
}

id objc_msgSend_speakableSegmentsWithSpeakingStyle_upToDepth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakableSegmentsWithSpeakingStyle:upToDepth:");
}

id objc_msgSend_speakableSummary(void *a1, const char *a2, ...)
{
  return _[a1 speakableSummary];
}

id objc_msgSend_speakingDelayTimer(void *a1, const char *a2, ...)
{
  return _[a1 speakingDelayTimer];
}

id objc_msgSend_speakingRequiresTransliteration(void *a1, const char *a2, ...)
{
  return _[a1 speakingRequiresTransliteration];
}

id objc_msgSend_specificLanguageID(void *a1, const char *a2, ...)
{
  return _[a1 specificLanguageID];
}

id objc_msgSend_speechComponent(void *a1, const char *a2, ...)
{
  return _[a1 speechComponent];
}

id objc_msgSend_speechMarkupStringForType_forIdentifier_string_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechMarkupStringForType:forIdentifier:string:");
}

id objc_msgSend_speechMuted(void *a1, const char *a2, ...)
{
  return _[a1 speechMuted];
}

id objc_msgSend_speechRateFromSettings(void *a1, const char *a2, ...)
{
  return _[a1 speechRateFromSettings];
}

id objc_msgSend_speechSynthesizer_didFinishSpeakingRequest_successfully_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechSynthesizer:didFinishSpeakingRequest:successfully:withError:");
}

id objc_msgSend_speechSynthesizer_willSpeakRangeOfSpeechString_forRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechSynthesizer:willSpeakRangeOfSpeechString:forRequest:");
}

id objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechVoiceIdentifierForLanguage:sourceKey:exists:");
}

id objc_msgSend_speechVoiceWithVoiceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechVoiceWithVoiceId:");
}

id objc_msgSend_spokenStringForDateTimeAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spokenStringForDateTimeAttribute:");
}

id objc_msgSend_springBoardApplication(void *a1, const char *a2, ...)
{
  return _[a1 springBoardApplication];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_startBlock(void *a1, const char *a2, ...)
{
  return _[a1 startBlock];
}

id objc_msgSend_startListening(void *a1, const char *a2, ...)
{
  return _[a1 startListening];
}

id objc_msgSend_startLocation(void *a1, const char *a2, ...)
{
  return _[a1 startLocation];
}

id objc_msgSend_startMarker(void *a1, const char *a2, ...)
{
  return _[a1 startMarker];
}

id objc_msgSend_startServerWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startServerWithError:");
}

id objc_msgSend_startSpeakingString_withLanguageCode_request_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSpeakingString:withLanguageCode:request:error:");
}

id objc_msgSend_startStopToggle(void *a1, const char *a2, ...)
{
  return _[a1 startStopToggle];
}

id objc_msgSend_startTapAndHoldMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTapAndHoldMode:");
}

id objc_msgSend_startedReadingCurrentElements(void *a1, const char *a2, ...)
{
  return _[a1 startedReadingCurrentElements];
}

id objc_msgSend_startingRange(void *a1, const char *a2, ...)
{
  return _[a1 startingRange];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_staticRecognitionText(void *a1, const char *a2, ...)
{
  return _[a1 staticRecognitionText];
}

id objc_msgSend_staticTextString(void *a1, const char *a2, ...)
{
  return _[a1 staticTextString];
}

id objc_msgSend_statusAttributeDotText(void *a1, const char *a2, ...)
{
  return _[a1 statusAttributeDotText];
}

id objc_msgSend_statusBarElements(void *a1, const char *a2, ...)
{
  return _[a1 statusBarElements];
}

id objc_msgSend_stop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stop:");
}

id objc_msgSend_stopListening(void *a1, const char *a2, ...)
{
  return _[a1 stopListening];
}

id objc_msgSend_stopPlaying(void *a1, const char *a2, ...)
{
  return _[a1 stopPlaying];
}

id objc_msgSend_stopSpeakingAtBoundary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSpeakingAtBoundary:");
}

id objc_msgSend_stopSpeakingAtBoundary_allRequests_sessionDeactivationDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSpeakingAtBoundary:allRequests:sessionDeactivationDelay:");
}

id objc_msgSend_stopSpeakingAtNextBoundary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSpeakingAtNextBoundary:error:");
}

id objc_msgSend_stopSpeech(void *a1, const char *a2, ...)
{
  return _[a1 stopSpeech];
}

id objc_msgSend_storeUserLabel_forIdentification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeUserLabel:forIdentification:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByRemovingEmojiCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByRemovingEmojiCharacters:");
}

id objc_msgSend_stringByReplacingCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingCharactersInRange:withString:");
}

id objc_msgSend_stringByReplacingEmojiCharactersWithEmojiDescriptions_stringForPauses_language_rangeReplacements_appendEmojiSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingEmojiCharactersWithEmojiDescriptions:stringForPauses:language:rangeReplacements:appendEmojiSuffix:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForLineNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForLineNumber:");
}

id objc_msgSend_stringForParameterizedAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForParameterizedAttribute:parameter:");
}

id objc_msgSend_stringForRotorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForRotorType:");
}

id objc_msgSend_stringForTextMarkers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForTextMarkers:");
}

id objc_msgSend_stringFromMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromMeasurement:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringIsInSupportedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringIsInSupportedCharacters:");
}

id objc_msgSend_stringIsSupported_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringIsSupported:language:");
}

id objc_msgSend_stringIsTextAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringIsTextAttachment:");
}

id objc_msgSend_stringReplacingBrailleDotRanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringReplacingBrailleDotRanges:");
}

id objc_msgSend_stringShouldSeparateDueToLanguage_language_keyboardLanguageHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringShouldSeparateDueToLanguage:language:keyboardLanguageHint:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithAXAttribute:");
}

id objc_msgSend_stringWithBrailleSubstitutions_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithBrailleSubstitutions:withLanguage:");
}

id objc_msgSend_stringWithCharacters_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCharacters:length:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_stringWithUnichar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUnichar:");
}

id objc_msgSend_subExpressions(void *a1, const char *a2, ...)
{
  return _[a1 subExpressions];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_subtype(void *a1, const char *a2, ...)
{
  return _[a1 subtype];
}

id objc_msgSend_summaryElement(void *a1, const char *a2, ...)
{
  return _[a1 summaryElement];
}

id objc_msgSend_supplementalBrailleDescription(void *a1, const char *a2, ...)
{
  return _[a1 supplementalBrailleDescription];
}

id objc_msgSend_supportedLanguageIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 supportedLanguageIfNecessary];
}

id objc_msgSend_supportsAccessibility(void *a1, const char *a2, ...)
{
  return _[a1 supportsAccessibility];
}

id objc_msgSend_supportsActivate(void *a1, const char *a2, ...)
{
  return _[a1 supportsActivate];
}

id objc_msgSend_supportsAudiographActions(void *a1, const char *a2, ...)
{
  return _[a1 supportsAudiographActions];
}

id objc_msgSend_supportsAudiographs(void *a1, const char *a2, ...)
{
  return _[a1 supportsAudiographs];
}

id objc_msgSend_supportsDataSeriesSonification(void *a1, const char *a2, ...)
{
  return _[a1 supportsDataSeriesSonification];
}

id objc_msgSend_supportsDataSeriesSummarization(void *a1, const char *a2, ...)
{
  return _[a1 supportsDataSeriesSummarization];
}

id objc_msgSend_supportsDirectionOrbManipulation(void *a1, const char *a2, ...)
{
  return _[a1 supportsDirectionOrbManipulation];
}

id objc_msgSend_supportsFrameForRange(void *a1, const char *a2, ...)
{
  return _[a1 supportsFrameForRange];
}

id objc_msgSend_supportsHeaderElementOutput(void *a1, const char *a2, ...)
{
  return _[a1 supportsHeaderElementOutput];
}

id objc_msgSend_supportsHomeGestures(void *a1, const char *a2, ...)
{
  return _[a1 supportsHomeGestures];
}

id objc_msgSend_supportsMediaAnalysis(void *a1, const char *a2, ...)
{
  return _[a1 supportsMediaAnalysis];
}

id objc_msgSend_supportsPressedState(void *a1, const char *a2, ...)
{
  return _[a1 supportsPressedState];
}

id objc_msgSend_supportsRangeForLineNumber(void *a1, const char *a2, ...)
{
  return _[a1 supportsRangeForLineNumber];
}

id objc_msgSend_supportsSecondaryActivate(void *a1, const char *a2, ...)
{
  return _[a1 supportsSecondaryActivate];
}

id objc_msgSend_supportsSoundEffect(void *a1, const char *a2, ...)
{
  return _[a1 supportsSoundEffect];
}

id objc_msgSend_supportsTextSelection(void *a1, const char *a2, ...)
{
  return _[a1 supportsTextSelection];
}

id objc_msgSend_supportsTranslationMode8Dot(void *a1, const char *a2, ...)
{
  return _[a1 supportsTranslationMode8Dot];
}

id objc_msgSend_supportsTranslationModeContracted(void *a1, const char *a2, ...)
{
  return _[a1 supportsTranslationModeContracted];
}

id objc_msgSend_suppressCustomActionHint(void *a1, const char *a2, ...)
{
  return _[a1 suppressCustomActionHint];
}

id objc_msgSend_suppressSelectionChangeNotificationCount(void *a1, const char *a2, ...)
{
  return _[a1 suppressSelectionChangeNotificationCount];
}

id objc_msgSend_suppressSpeech(void *a1, const char *a2, ...)
{
  return _[a1 suppressSpeech];
}

id objc_msgSend_suppressValueChangeNotificationCount(void *a1, const char *a2, ...)
{
  return _[a1 suppressValueChangeNotificationCount];
}

id objc_msgSend_symbolCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 symbolCharacterSet];
}

id objc_msgSend_synchronization(void *a1, const char *a2, ...)
{
  return _[a1 synchronization];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _[a1 synchronize];
}

id objc_msgSend_synthesizeSilently(void *a1, const char *a2, ...)
{
  return _[a1 synthesizeSilently];
}

id objc_msgSend_synthesizerForTelephonyMixin(void *a1, const char *a2, ...)
{
  return _[a1 synthesizerForTelephonyMixin];
}

id objc_msgSend_systemAppApplication(void *a1, const char *a2, ...)
{
  return _[a1 systemAppApplication];
}

id objc_msgSend_systemApplication(void *a1, const char *a2, ...)
{
  return _[a1 systemApplication];
}

id objc_msgSend_systemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:");
}

id objc_msgSend_systemLanguageIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 systemLanguageIdentifier];
}

id objc_msgSend_systemRotorTypeForRotorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemRotorTypeForRotorType:");
}

id objc_msgSend_systemRotorTypeForSearchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemRotorTypeForSearchType:");
}

id objc_msgSend_systemServerDied(void *a1, const char *a2, ...)
{
  return _[a1 systemServerDied];
}

id objc_msgSend_systemServerEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemServerEventWithCommand:info:");
}

id objc_msgSend_systemSpokenLanguage(void *a1, const char *a2, ...)
{
  return _[a1 systemSpokenLanguage];
}

id objc_msgSend_systemSpokenLanguageChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemSpokenLanguageChanged:");
}

id objc_msgSend_systemVisualizationState(void *a1, const char *a2, ...)
{
  return _[a1 systemVisualizationState];
}

id objc_msgSend_systemVoiceSelection(void *a1, const char *a2, ...)
{
  return _[a1 systemVoiceSelection];
}

id objc_msgSend_systemVolume(void *a1, const char *a2, ...)
{
  return _[a1 systemVolume];
}

id objc_msgSend_systemWideAXUIElement(void *a1, const char *a2, ...)
{
  return _[a1 systemWideAXUIElement];
}

id objc_msgSend_systemWideElement(void *a1, const char *a2, ...)
{
  return _[a1 systemWideElement];
}

id objc_msgSend_tableDimensionStringWithRow_andColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableDimensionStringWithRow:andColumn:");
}

id objc_msgSend_tableHeaders(void *a1, const char *a2, ...)
{
  return _[a1 tableHeaders];
}

id objc_msgSend_tableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 tableIdentifier];
}

id objc_msgSend_tableRowAndColumn(void *a1, const char *a2, ...)
{
  return _[a1 tableRowAndColumn];
}

id objc_msgSend_tableSetCallback(void *a1, const char *a2, ...)
{
  return _[a1 tableSetCallback];
}

id objc_msgSend_takeScreenshot(void *a1, const char *a2, ...)
{
  return _[a1 takeScreenshot];
}

id objc_msgSend_tapAndHoldContextNumbers(void *a1, const char *a2, ...)
{
  return _[a1 tapAndHoldContextNumbers];
}

id objc_msgSend_tapAndHoldMode(void *a1, const char *a2, ...)
{
  return _[a1 tapAndHoldMode];
}

id objc_msgSend_tapCount(void *a1, const char *a2, ...)
{
  return _[a1 tapCount];
}

id objc_msgSend_tapHostContextId(void *a1, const char *a2, ...)
{
  return _[a1 tapHostContextId];
}

id objc_msgSend_tapInterval(void *a1, const char *a2, ...)
{
  return _[a1 tapInterval];
}

id objc_msgSend_tapIsDown(void *a1, const char *a2, ...)
{
  return _[a1 tapIsDown];
}

id objc_msgSend_tapPoint(void *a1, const char *a2, ...)
{
  return _[a1 tapPoint];
}

id objc_msgSend_tapticTimeUsageCount(void *a1, const char *a2, ...)
{
  return _[a1 tapticTimeUsageCount];
}

id objc_msgSend_target(void *a1, const char *a2, ...)
{
  return _[a1 target];
}

id objc_msgSend_targetSelectorWithTarget_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetSelectorWithTarget:selector:");
}

id objc_msgSend_targetThread(void *a1, const char *a2, ...)
{
  return _[a1 targetThread];
}

id objc_msgSend_taskWithName_reason_forBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskWithName:reason:forBundleID:");
}

id objc_msgSend_telephonyIsActive(void *a1, const char *a2, ...)
{
  return _[a1 telephonyIsActive];
}

id objc_msgSend_temporarilyChangeQuickNavState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "temporarilyChangeQuickNavState:");
}

id objc_msgSend_testingBrailleElementLocked(void *a1, const char *a2, ...)
{
  return _[a1 testingBrailleElementLocked];
}

id objc_msgSend_testingEventDispatchTap(void *a1, const char *a2, ...)
{
  return _[a1 testingEventDispatchTap];
}

id objc_msgSend_testingHasActiveDisplay(void *a1, const char *a2, ...)
{
  return _[a1 testingHasActiveDisplay];
}

id objc_msgSend_testingProcessEventCallback(void *a1, const char *a2, ...)
{
  return _[a1 testingProcessEventCallback];
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _[a1 text];
}

id objc_msgSend_textCursorFrame(void *a1, const char *a2, ...)
{
  return _[a1 textCursorFrame];
}

id objc_msgSend_textDetectionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 textDetectionEnabled];
}

id objc_msgSend_textDict(void *a1, const char *a2, ...)
{
  return _[a1 textDict];
}

id objc_msgSend_textForBraille_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textForBraille:mode:");
}

id objc_msgSend_textForBraille_parameters_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textForBraille:parameters:withReply:");
}

id objc_msgSend_textInputElement(void *a1, const char *a2, ...)
{
  return _[a1 textInputElement];
}

id objc_msgSend_textInputElementRange(void *a1, const char *a2, ...)
{
  return _[a1 textInputElementRange];
}

id objc_msgSend_textLineEndMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textLineEndMarker:");
}

id objc_msgSend_textLineStartMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textLineStartMarker:");
}

id objc_msgSend_textMarkerArrayOfText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textMarkerArrayOfText:");
}

id objc_msgSend_textMarkerFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textMarkerFrame:");
}

id objc_msgSend_textMarkerRange(void *a1, const char *a2, ...)
{
  return _[a1 textMarkerRange];
}

id objc_msgSend_textMarkerRangeForSelection(void *a1, const char *a2, ...)
{
  return _[a1 textMarkerRangeForSelection];
}

id objc_msgSend_textMarkerSelectionRange(void *a1, const char *a2, ...)
{
  return _[a1 textMarkerSelectionRange];
}

id objc_msgSend_textMarkersForPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textMarkersForPoints:");
}

id objc_msgSend_textMarkersForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textMarkersForRange:");
}

id objc_msgSend_textNextMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textNextMarker:");
}

id objc_msgSend_textOperations(void *a1, const char *a2, ...)
{
  return _[a1 textOperations];
}

id objc_msgSend_textOperationsAvailable(void *a1, const char *a2, ...)
{
  return _[a1 textOperationsAvailable];
}

id objc_msgSend_textOperationsOperator(void *a1, const char *a2, ...)
{
  return _[a1 textOperationsOperator];
}

id objc_msgSend_textPreviousMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textPreviousMarker:");
}

id objc_msgSend_textRecognitionResultArray(void *a1, const char *a2, ...)
{
  return _[a1 textRecognitionResultArray];
}

id objc_msgSend_textRecognitionResultForDrawing_options_shouldCancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textRecognitionResultForDrawing:options:shouldCancel:");
}

id objc_msgSend_textReplacementEntries(void *a1, const char *a2, ...)
{
  return _[a1 textReplacementEntries];
}

id objc_msgSend_textReplacements(void *a1, const char *a2, ...)
{
  return _[a1 textReplacements];
}

id objc_msgSend_textSearchModeIsOn(void *a1, const char *a2, ...)
{
  return _[a1 textSearchModeIsOn];
}

id objc_msgSend_textSelectionMovementManager(void *a1, const char *a2, ...)
{
  return _[a1 textSelectionMovementManager];
}

id objc_msgSend_textualContext(void *a1, const char *a2, ...)
{
  return _[a1 textualContext];
}

id objc_msgSend_textualContexts(void *a1, const char *a2, ...)
{
  return _[a1 textualContexts];
}

id objc_msgSend_threadIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 threadIdentifier];
}

id objc_msgSend_threadWaitTime(void *a1, const char *a2, ...)
{
  return _[a1 threadWaitTime];
}

id objc_msgSend_time(void *a1, const char *a2, ...)
{
  return _[a1 time];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return _[a1 timer];
}

id objc_msgSend_titleElements(void *a1, const char *a2, ...)
{
  return _[a1 titleElements];
}

id objc_msgSend_toggleAppSwitcher(void *a1, const char *a2, ...)
{
  return _[a1 toggleAppSwitcher];
}

id objc_msgSend_toggleAudioSessionActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleAudioSessionActive:");
}

id objc_msgSend_toggleControlCenter(void *a1, const char *a2, ...)
{
  return _[a1 toggleControlCenter];
}

id objc_msgSend_toggleDetectionMode(void *a1, const char *a2, ...)
{
  return _[a1 toggleDetectionMode];
}

id objc_msgSend_toggleDetectionUI(void *a1, const char *a2, ...)
{
  return _[a1 toggleDetectionUI];
}

id objc_msgSend_toggleDock(void *a1, const char *a2, ...)
{
  return _[a1 toggleDock];
}

id objc_msgSend_toggleDoorDetection(void *a1, const char *a2, ...)
{
  return _[a1 toggleDoorDetection];
}

id objc_msgSend_toggleFurnitureDetection(void *a1, const char *a2, ...)
{
  return _[a1 toggleFurnitureDetection];
}

id objc_msgSend_toggleImageDescriptions(void *a1, const char *a2, ...)
{
  return _[a1 toggleImageDescriptions];
}

id objc_msgSend_toggleIncomingCall(void *a1, const char *a2, ...)
{
  return _[a1 toggleIncomingCall];
}

id objc_msgSend_toggleNotificationCenter(void *a1, const char *a2, ...)
{
  return _[a1 toggleNotificationCenter];
}

id objc_msgSend_togglePeopleDetection(void *a1, const char *a2, ...)
{
  return _[a1 togglePeopleDetection];
}

id objc_msgSend_togglePointAndSpeak(void *a1, const char *a2, ...)
{
  return _[a1 togglePointAndSpeak];
}

id objc_msgSend_toggleQuickNote(void *a1, const char *a2, ...)
{
  return _[a1 toggleQuickNote];
}

id objc_msgSend_toggleReachability(void *a1, const char *a2, ...)
{
  return _[a1 toggleReachability];
}

id objc_msgSend_toggleSpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleSpeaking:");
}

id objc_msgSend_toggleSpotlight(void *a1, const char *a2, ...)
{
  return _[a1 toggleSpotlight];
}

id objc_msgSend_toggleStatusLabel(void *a1, const char *a2, ...)
{
  return _[a1 toggleStatusLabel];
}

id objc_msgSend_toggleTextDetection(void *a1, const char *a2, ...)
{
  return _[a1 toggleTextDetection];
}

id objc_msgSend_toggleVoiceOverModifierKeyLock(void *a1, const char *a2, ...)
{
  return _[a1 toggleVoiceOverModifierKeyLock];
}

id objc_msgSend_topDot(void *a1, const char *a2, ...)
{
  return _[a1 topDot];
}

id objc_msgSend_touchContainer(void *a1, const char *a2, ...)
{
  return _[a1 touchContainer];
}

id objc_msgSend_touchContainerAXElement(void *a1, const char *a2, ...)
{
  return _[a1 touchContainerAXElement];
}

id objc_msgSend_touchContainerParent(void *a1, const char *a2, ...)
{
  return _[a1 touchContainerParent];
}

id objc_msgSend_touchContainerParentAXElement(void *a1, const char *a2, ...)
{
  return _[a1 touchContainerParentAXElement];
}

id objc_msgSend_touchContainerShouldOutputBraille(void *a1, const char *a2, ...)
{
  return _[a1 touchContainerShouldOutputBraille];
}

id objc_msgSend_touchEventOccurred_inTVDirectTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchEventOccurred:inTVDirectTouch:");
}

id objc_msgSend_touchEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchEventWithCommand:info:");
}

id objc_msgSend_touchForce(void *a1, const char *a2, ...)
{
  return _[a1 touchForce];
}

id objc_msgSend_touchPoint(void *a1, const char *a2, ...)
{
  return _[a1 touchPoint];
}

id objc_msgSend_touchRawLocation(void *a1, const char *a2, ...)
{
  return _[a1 touchRawLocation];
}

id objc_msgSend_touchRepresentationWithHandType_location_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchRepresentationWithHandType:location:");
}

id objc_msgSend_traits(void *a1, const char *a2, ...)
{
  return _[a1 traits];
}

id objc_msgSend_transducerType(void *a1, const char *a2, ...)
{
  return _[a1 transducerType];
}

id objc_msgSend_transferHeadersFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transferHeadersFrom:");
}

id objc_msgSend_translateBrailleToClipboard(void *a1, const char *a2, ...)
{
  return _[a1 translateBrailleToClipboard];
}

id objc_msgSend_translateExistingInputWithMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translateExistingInputWithMode:");
}

id objc_msgSend_translateKeycode(void *a1, const char *a2, ...)
{
  return _[a1 translateKeycode];
}

id objc_msgSend_translatedTextForPrintBraille_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translatedTextForPrintBraille:mode:");
}

id objc_msgSend_translatedTextForPrintBraille_mode_buffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translatedTextForPrintBraille:mode:buffer:");
}

id objc_msgSend_translatedTextOfBufferWithMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translatedTextOfBufferWithMode:");
}

id objc_msgSend_translationOverride(void *a1, const char *a2, ...)
{
  return _[a1 translationOverride];
}

id objc_msgSend_translationService(void *a1, const char *a2, ...)
{
  return _[a1 translationService];
}

id objc_msgSend_transliteratedStringForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transliteratedStringForString:");
}

id objc_msgSend_triggerSignpostCollection(void *a1, const char *a2, ...)
{
  return _[a1 triggerSignpostCollection];
}

id objc_msgSend_triggerWithImage_options_cacheKey_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithImage:options:cacheKey:resultHandler:");
}

id objc_msgSend_triggerWithImageAssetLocalIdentifier_photoLibraryURL_options_cacheKey_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithImageAssetLocalIdentifier:photoLibraryURL:options:cacheKey:resultHandler:");
}

id objc_msgSend_triggerWithImageAssetLocalIdentifier_photoLibraryURL_usePHAsset_options_cacheKey_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithImageAssetLocalIdentifier:photoLibraryURL:usePHAsset:options:cacheKey:resultHandler:");
}

id objc_msgSend_triggerWithImageURL_assetLocalIdentifier_photoLibraryURL_options_cacheKey_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithImageURL:assetLocalIdentifier:photoLibraryURL:options:cacheKey:resultHandler:");
}

id objc_msgSend_triggerWithImageURL_options_cacheKey_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithImageURL:options:cacheKey:resultHandler:");
}

id objc_msgSend_triggerWithScreenCaptureRegion_interfaceOrientation_options_cacheKey_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithScreenCaptureRegion:interfaceOrientation:options:cacheKey:resultHandler:");
}

id objc_msgSend_turnOff(void *a1, const char *a2, ...)
{
  return _[a1 turnOff];
}

id objc_msgSend_tutorialActiveRestrictionType(void *a1, const char *a2, ...)
{
  return _[a1 tutorialActiveRestrictionType];
}

id objc_msgSend_tutorialListeningForGestureNotifications(void *a1, const char *a2, ...)
{
  return _[a1 tutorialListeningForGestureNotifications];
}

id objc_msgSend_tutorialPage(void *a1, const char *a2, ...)
{
  return _[a1 tutorialPage];
}

id objc_msgSend_tutorialRecognizedGesture(void *a1, const char *a2, ...)
{
  return _[a1 tutorialRecognizedGesture];
}

id objc_msgSend_tutorialRestrictedCommands(void *a1, const char *a2, ...)
{
  return _[a1 tutorialRestrictedCommands];
}

id objc_msgSend_tutorialSetRecognizedGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tutorialSetRecognizedGesture:");
}

id objc_msgSend_tvInteractionMode(void *a1, const char *a2, ...)
{
  return _[a1 tvInteractionMode];
}

id objc_msgSend_tvIsInteractingWithRotor(void *a1, const char *a2, ...)
{
  return _[a1 tvIsInteractingWithRotor];
}

id objc_msgSend_tvSpeechRequestManager(void *a1, const char *a2, ...)
{
  return _[a1 tvSpeechRequestManager];
}

id objc_msgSend_tvTouchPadRegion(void *a1, const char *a2, ...)
{
  return _[a1 tvTouchPadRegion];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typingCandidateElements(void *a1, const char *a2, ...)
{
  return _[a1 typingCandidateElements];
}

id objc_msgSend_typingFeedbackForKeyboardType(void *a1, const char *a2, ...)
{
  return _[a1 typingFeedbackForKeyboardType];
}

id objc_msgSend_typingMode(void *a1, const char *a2, ...)
{
  return _[a1 typingMode];
}

id objc_msgSend_typingPitchChangeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 typingPitchChangeEnabled];
}

id objc_msgSend_typingStyle(void *a1, const char *a2, ...)
{
  return _[a1 typingStyle];
}

id objc_msgSend_uiApplicationAtCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiApplicationAtCoordinate:");
}

id objc_msgSend_uiApplicationForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiApplicationForContext:");
}

id objc_msgSend_uiApplicationWithPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiApplicationWithPid:");
}

id objc_msgSend_uiClient(void *a1, const char *a2, ...)
{
  return _[a1 uiClient];
}

id objc_msgSend_uiElement(void *a1, const char *a2, ...)
{
  return _[a1 uiElement];
}

id objc_msgSend_uiElementAtCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementAtCoordinate:");
}

id objc_msgSend_uiElementAtCoordinate_forApplication_contextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementAtCoordinate:forApplication:contextId:");
}

id objc_msgSend_uiElementAtCoordinate_startWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementAtCoordinate:startWithElement:");
}

id objc_msgSend_uiElementWithAXElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementWithAXElement:");
}

id objc_msgSend_uiElementWithAXElement_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementWithAXElement:cache:");
}

id objc_msgSend_uiElementsWithAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementsWithAttribute:");
}

id objc_msgSend_uiElementsWithAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementsWithAttribute:parameter:");
}

id objc_msgSend_uiSystemWideApplication(void *a1, const char *a2, ...)
{
  return _[a1 uiSystemWideApplication];
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unicode(void *a1, const char *a2, ...)
{
  return _[a1 unicode];
}

id objc_msgSend_uniqueIdentification(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentification];
}

id objc_msgSend_unitTestDelegate(void *a1, const char *a2, ...)
{
  return _[a1 unitTestDelegate];
}

id objc_msgSend_unitTestSpeechRate(void *a1, const char *a2, ...)
{
  return _[a1 unitTestSpeechRate];
}

id objc_msgSend_unitTestSystemSpokenLanguage(void *a1, const char *a2, ...)
{
  return _[a1 unitTestSystemSpokenLanguage];
}

id objc_msgSend_unlearnLastGesture(void *a1, const char *a2, ...)
{
  return _[a1 unlearnLastGesture];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unmodifiedInput(void *a1, const char *a2, ...)
{
  return _[a1 unmodifiedInput];
}

id objc_msgSend_unmuteEligibleEventOccured(void *a1, const char *a2, ...)
{
  return _[a1 unmuteEligibleEventOccured];
}

id objc_msgSend_unregisterForEvents(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForEvents];
}

id objc_msgSend_unregisterForLocalNotifications(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForLocalNotifications];
}

id objc_msgSend_unsetEventCaptureMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsetEventCaptureMode:");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedShortValue];
}

id objc_msgSend_upcomingRoadsAtPoint_withDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upcomingRoadsAtPoint:withDirection:");
}

id objc_msgSend_updateAudioSessionProperties(void *a1, const char *a2, ...)
{
  return _[a1 updateAudioSessionProperties];
}

id objc_msgSend_updateAudioSessionProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAudioSessionProperties:");
}

id objc_msgSend_updateBrailleAutoAdvancePrefs(void *a1, const char *a2, ...)
{
  return _[a1 updateBrailleAutoAdvancePrefs];
}

id objc_msgSend_updateBrailleInputSettings(void *a1, const char *a2, ...)
{
  return _[a1 updateBrailleInputSettings];
}

id objc_msgSend_updateBrailleLanguage(void *a1, const char *a2, ...)
{
  return _[a1 updateBrailleLanguage];
}

id objc_msgSend_updateBrailleOutputSettings(void *a1, const char *a2, ...)
{
  return _[a1 updateBrailleOutputSettings];
}

id objc_msgSend_updateBrailleUIWithOrientation_dotPositions_typingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBrailleUIWithOrientation:dotPositions:typingMode:");
}

id objc_msgSend_updateCache(void *a1, const char *a2, ...)
{
  return _[a1 updateCache];
}

id objc_msgSend_updateCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCache:");
}

id objc_msgSend_updateCacheWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCacheWithElement:");
}

id objc_msgSend_updateCenterPoint(void *a1, const char *a2, ...)
{
  return _[a1 updateCenterPoint];
}

id objc_msgSend_updateCharacterModesWithHandwritingAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCharacterModesWithHandwritingAttributes:");
}

id objc_msgSend_updateCurrentElementFrame(void *a1, const char *a2, ...)
{
  return _[a1 updateCurrentElementFrame];
}

id objc_msgSend_updateCurrentItemProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCurrentItemProperties:");
}

id objc_msgSend_updateCurrentLocation(void *a1, const char *a2, ...)
{
  return _[a1 updateCurrentLocation];
}

id objc_msgSend_updateCursorFrameAfterLift(void *a1, const char *a2, ...)
{
  return _[a1 updateCursorFrameAfterLift];
}

id objc_msgSend_updateCustomPublicRotors(void *a1, const char *a2, ...)
{
  return _[a1 updateCustomPublicRotors];
}

id objc_msgSend_updateDriftWithPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDriftWithPattern:");
}

id objc_msgSend_updateDuckingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDuckingMode:");
}

id objc_msgSend_updateEquivalenceTag(void *a1, const char *a2, ...)
{
  return _[a1 updateEquivalenceTag];
}

id objc_msgSend_updateExpandedStatus(void *a1, const char *a2, ...)
{
  return _[a1 updateExpandedStatus];
}

id objc_msgSend_updateExplorationSegments(void *a1, const char *a2, ...)
{
  return _[a1 updateExplorationSegments];
}

id objc_msgSend_updateFlowToElements(void *a1, const char *a2, ...)
{
  return _[a1 updateFlowToElements];
}

id objc_msgSend_updateFocusActiveActivityDisplayName(void *a1, const char *a2, ...)
{
  return _[a1 updateFocusActiveActivityDisplayName];
}

id objc_msgSend_updateFocusComplete(void *a1, const char *a2, ...)
{
  return _[a1 updateFocusComplete];
}

id objc_msgSend_updateFocusContext(void *a1, const char *a2, ...)
{
  return _[a1 updateFocusContext];
}

id objc_msgSend_updateFrame(void *a1, const char *a2, ...)
{
  return _[a1 updateFrame];
}

id objc_msgSend_updateGesturedTextInputAttributes(void *a1, const char *a2, ...)
{
  return _[a1 updateGesturedTextInputAttributes];
}

id objc_msgSend_updateHeadersAndElementsWithTarget_ignoreLastUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHeadersAndElementsWithTarget:ignoreLastUpdate:");
}

id objc_msgSend_updateHint(void *a1, const char *a2, ...)
{
  return _[a1 updateHint];
}

id objc_msgSend_updateIndexesForOutputRange_segment_direction_outputStringLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIndexesForOutputRange:segment:direction:outputStringLength:");
}

id objc_msgSend_updateIsVisible(void *a1, const char *a2, ...)
{
  return _[a1 updateIsVisible];
}

id objc_msgSend_updateItemProperty_withValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateItemProperty:withValue:");
}

id objc_msgSend_updateKeyboardElement(void *a1, const char *a2, ...)
{
  return _[a1 updateKeyboardElement];
}

id objc_msgSend_updateKeyboardSettings(void *a1, const char *a2, ...)
{
  return _[a1 updateKeyboardSettings];
}

id objc_msgSend_updateLabel(void *a1, const char *a2, ...)
{
  return _[a1 updateLabel];
}

id objc_msgSend_updateLanguage(void *a1, const char *a2, ...)
{
  return _[a1 updateLanguage];
}

id objc_msgSend_updateMapsExplorationUIWithCurrentCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMapsExplorationUIWithCurrentCenter:");
}

id objc_msgSend_updateMapsExplorationUIWithCurrentLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMapsExplorationUIWithCurrentLocation:");
}

id objc_msgSend_updateMatchingItems(void *a1, const char *a2, ...)
{
  return _[a1 updateMatchingItems];
}

id objc_msgSend_updateNavigationModeForClassicRemote(void *a1, const char *a2, ...)
{
  return _[a1 updateNavigationModeForClassicRemote];
}

id objc_msgSend_updateOrientation(void *a1, const char *a2, ...)
{
  return _[a1 updateOrientation];
}

id objc_msgSend_updatePageContent(void *a1, const char *a2, ...)
{
  return _[a1 updatePageContent];
}

id objc_msgSend_updatePaths(void *a1, const char *a2, ...)
{
  return _[a1 updatePaths];
}

id objc_msgSend_updatePrefersNonBlinkingCursorIndicatorPrefs(void *a1, const char *a2, ...)
{
  return _[a1 updatePrefersNonBlinkingCursorIndicatorPrefs];
}

id objc_msgSend_updateQuickNavState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateQuickNavState:");
}

id objc_msgSend_updateRealtimeElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRealtimeElements:");
}

id objc_msgSend_updateRoleDescription(void *a1, const char *a2, ...)
{
  return _[a1 updateRoleDescription];
}

id objc_msgSend_updateRotorForCurrentElement_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRotorForCurrentElement:completion:");
}

id objc_msgSend_updateRotorForElement_shouldPreserveRotorNavigation_firstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:");
}

id objc_msgSend_updateRotorWithElement(void *a1, const char *a2, ...)
{
  return _[a1 updateRotorWithElement];
}

id objc_msgSend_updateSelectedLanguage(void *a1, const char *a2, ...)
{
  return _[a1 updateSelectedLanguage];
}

id objc_msgSend_updateSpeakingRate(void *a1, const char *a2, ...)
{
  return _[a1 updateSpeakingRate];
}

id objc_msgSend_updateStatusCellPrefs(void *a1, const char *a2, ...)
{
  return _[a1 updateStatusCellPrefs];
}

id objc_msgSend_updateSupportedLanguageMap(void *a1, const char *a2, ...)
{
  return _[a1 updateSupportedLanguageMap];
}

id objc_msgSend_updateSystemProperty_withValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSystemProperty:withValue:");
}

id objc_msgSend_updateTitleElementLabels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTitleElementLabels:");
}

id objc_msgSend_updateTitleElements(void *a1, const char *a2, ...)
{
  return _[a1 updateTitleElements];
}

id objc_msgSend_updateTouchForceSounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTouchForceSounds:");
}

id objc_msgSend_updateTraits(void *a1, const char *a2, ...)
{
  return _[a1 updateTraits];
}

id objc_msgSend_updateTypingMode(void *a1, const char *a2, ...)
{
  return _[a1 updateTypingMode];
}

id objc_msgSend_updateUsesNemethForMath(void *a1, const char *a2, ...)
{
  return _[a1 updateUsesNemethForMath];
}

id objc_msgSend_updateValue(void *a1, const char *a2, ...)
{
  return _[a1 updateValue];
}

id objc_msgSend_updateVisiblePoint(void *a1, const char *a2, ...)
{
  return _[a1 updateVisiblePoint];
}

id objc_msgSend_updateVisualRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateVisualRotor:");
}

id objc_msgSend_updateVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateVolume:");
}

id objc_msgSend_updateWindowContextId(void *a1, const char *a2, ...)
{
  return _[a1 updateWindowContextId];
}

id objc_msgSend_updateWithCurrentRoute(void *a1, const char *a2, ...)
{
  return _[a1 updateWithCurrentRoute];
}

id objc_msgSend_updateWithExplorerElements_focusedElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithExplorerElements:focusedElement:");
}

id objc_msgSend_updateWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithString:");
}

id objc_msgSend_updatedWebRotorItemsCallback(void *a1, const char *a2, ...)
{
  return _[a1 updatedWebRotorItemsCallback];
}

id objc_msgSend_uppercaseLetterCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseLetterCharacterSet];
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _[a1 url];
}

id objc_msgSend_urlLabel(void *a1, const char *a2, ...)
{
  return _[a1 urlLabel];
}

id objc_msgSend_usage(void *a1, const char *a2, ...)
{
  return _[a1 usage];
}

id objc_msgSend_usagePage(void *a1, const char *a2, ...)
{
  return _[a1 usagePage];
}

id objc_msgSend_useDigitalCrownNavigation(void *a1, const char *a2, ...)
{
  return _[a1 useDigitalCrownNavigation];
}

id objc_msgSend_useElementAtPositionAfterActivation(void *a1, const char *a2, ...)
{
  return _[a1 useElementAtPositionAfterActivation];
}

id objc_msgSend_useRingerSwitchForNotificationOutput(void *a1, const char *a2, ...)
{
  return _[a1 useRingerSwitchForNotificationOutput];
}

id objc_msgSend_userBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userBoolValueForSetting:");
}

id objc_msgSend_userCommandContext(void *a1, const char *a2, ...)
{
  return _[a1 userCommandContext];
}

id objc_msgSend_userCommandInitiated(void *a1, const char *a2, ...)
{
  return _[a1 userCommandInitiated];
}

id objc_msgSend_userCommandManager(void *a1, const char *a2, ...)
{
  return _[a1 userCommandManager];
}

id objc_msgSend_userDefinedLabel(void *a1, const char *a2, ...)
{
  return _[a1 userDefinedLabel];
}

id objc_msgSend_userDefinedName(void *a1, const char *a2, ...)
{
  return _[a1 userDefinedName];
}

id objc_msgSend_userEventOccurred(void *a1, const char *a2, ...)
{
  return _[a1 userEventOccurred];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userInitiated(void *a1, const char *a2, ...)
{
  return _[a1 userInitiated];
}

id objc_msgSend_userInteractedWithDevice(void *a1, const char *a2, ...)
{
  return _[a1 userInteractedWithDevice];
}

id objc_msgSend_userLabelForIdentification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userLabelForIdentification:");
}

id objc_msgSend_userLocale(void *a1, const char *a2, ...)
{
  return _[a1 userLocale];
}

id objc_msgSend_userRecentlyUnlockedDevice(void *a1, const char *a2, ...)
{
  return _[a1 userRecentlyUnlockedDevice];
}

id objc_msgSend_userUnlockedDevice(void *a1, const char *a2, ...)
{
  return _[a1 userUnlockedDevice];
}

id objc_msgSend_usesDisplayManager(void *a1, const char *a2, ...)
{
  return _[a1 usesDisplayManager];
}

id objc_msgSend_usesHapticFeedback(void *a1, const char *a2, ...)
{
  return _[a1 usesHapticFeedback];
}

id objc_msgSend_usesTypingSoundFeedback(void *a1, const char *a2, ...)
{
  return _[a1 usesTypingSoundFeedback];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _[a1 uuid];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_value_withObjCType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value:withObjCType:");
}

id objc_msgSend_valueChangeOriginationSource(void *a1, const char *a2, ...)
{
  return _[a1 valueChangeOriginationSource];
}

id objc_msgSend_valueChangeOriginator(void *a1, const char *a2, ...)
{
  return _[a1 valueChangeOriginator];
}

id objc_msgSend_valueDescriptionForPlayheadPosition(void *a1, const char *a2, ...)
{
  return _[a1 valueDescriptionForPlayheadPosition];
}

id objc_msgSend_valueForBlock_forThreadKey_waitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForBlock:forThreadKey:waitTime:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_valueForKeyPath_forThreadKey_waitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:forThreadKey:waitTime:");
}

id objc_msgSend_valueForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForRange:");
}

id objc_msgSend_valueWithCGPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCGPoint:");
}

id objc_msgSend_valueWithPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithPoint:");
}

id objc_msgSend_valueWithPointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithPointer:");
}

id objc_msgSend_valueWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithRange:");
}

id objc_msgSend_valueWithRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithRect:");
}

id objc_msgSend_valueWithUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithUpdate:");
}

id objc_msgSend_velocity(void *a1, const char *a2, ...)
{
  return _[a1 velocity];
}

id objc_msgSend_verifyElementExists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyElementExists:");
}

id objc_msgSend_versionedPID(void *a1, const char *a2, ...)
{
  return _[a1 versionedPID];
}

id objc_msgSend_visibleFrame(void *a1, const char *a2, ...)
{
  return _[a1 visibleFrame];
}

id objc_msgSend_visibleOpaqueElements(void *a1, const char *a2, ...)
{
  return _[a1 visibleOpaqueElements];
}

id objc_msgSend_visiblePoint(void *a1, const char *a2, ...)
{
  return _[a1 visiblePoint];
}

id objc_msgSend_visibleText(void *a1, const char *a2, ...)
{
  return _[a1 visibleText];
}

id objc_msgSend_visionEngine(void *a1, const char *a2, ...)
{
  return _[a1 visionEngine];
}

id objc_msgSend_visionEngine_updatedResult_forElement_event_visionOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visionEngine:updatedResult:forElement:event:visionOptions:");
}

id objc_msgSend_visionFeatureDescriptionOptions(void *a1, const char *a2, ...)
{
  return _[a1 visionFeatureDescriptionOptions];
}

id objc_msgSend_voiceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voiceForIdentifier:");
}

id objc_msgSend_voiceId(void *a1, const char *a2, ...)
{
  return _[a1 voiceId];
}

id objc_msgSend_voiceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 voiceIdentifier];
}

id objc_msgSend_voiceOverActionFeedbackFirstInListOnly(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverActionFeedbackFirstInListOnly];
}

id objc_msgSend_voiceOverActionsFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverActionsFeedback];
}

id objc_msgSend_voiceOverActivities(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverActivities];
}

id objc_msgSend_voiceOverAdjustSoundVolumeIndependently(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAdjustSoundVolumeIndependently];
}

id objc_msgSend_voiceOverAlwaysTurnOnBluetooth(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAlwaysTurnOnBluetooth];
}

id objc_msgSend_voiceOverAlwaysUseNemethCodeForMathEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAlwaysUseNemethCodeForMathEnabled];
}

id objc_msgSend_voiceOverAudioDuckingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAudioDuckingEnabled];
}

id objc_msgSend_voiceOverAudioFollowsHDMIAudio(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAudioFollowsHDMIAudio];
}

id objc_msgSend_voiceOverAutomaticButtonLabels(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAutomaticButtonLabels];
}

id objc_msgSend_voiceOverBSIUsageCount(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBSIUsageCount];
}

id objc_msgSend_voiceOverBannerNotificationOutput(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBannerNotificationOutput];
}

id objc_msgSend_voiceOverBrailleAlertDisplayDuration(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleAlertDisplayDuration];
}

id objc_msgSend_voiceOverBrailleAlertShowUntilDismissed(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleAlertShowUntilDismissed];
}

id objc_msgSend_voiceOverBrailleAlertsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleAlertsEnabled];
}

id objc_msgSend_voiceOverBrailleAutoAdvanceDuration(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleAutoAdvanceDuration];
}

id objc_msgSend_voiceOverBrailleFormattingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleFormattingEnabled];
}

id objc_msgSend_voiceOverBrailleGesturesEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleGesturesEnabled];
}

id objc_msgSend_voiceOverBrailleGesturesTypingFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleGesturesTypingFeedback];
}

id objc_msgSend_voiceOverBrailleGradeTwoAutoTranslateEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleGradeTwoAutoTranslateEnabled];
}

id objc_msgSend_voiceOverBrailleKeyDebounceTimeout(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleKeyDebounceTimeout];
}

id objc_msgSend_voiceOverBrailleLanguageRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleLanguageRotorItems];
}

id objc_msgSend_voiceOverBrailleWordWrapEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleWordWrapEnabled];
}

id objc_msgSend_voiceOverCapitalLetterFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverCapitalLetterFeedback];
}

id objc_msgSend_voiceOverContainerOutputFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverContainerOutputFeedback];
}

id objc_msgSend_voiceOverContentDescriptionLevel(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverContentDescriptionLevel];
}

id objc_msgSend_voiceOverContinuousPathKeyboardStartTimeout(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverContinuousPathKeyboardStartTimeout];
}

id objc_msgSend_voiceOverCurrentRotorVoiceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverCurrentRotorVoiceIdentifier];
}

id objc_msgSend_voiceOverDefaultPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDefaultPunctuationGroup];
}

id objc_msgSend_voiceOverDelayUntilSpeakUnderTouch(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDelayUntilSpeakUnderTouch];
}

id objc_msgSend_voiceOverDeletionFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDeletionFeedback];
}

id objc_msgSend_voiceOverDescribedMedia(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDescribedMedia];
}

id objc_msgSend_voiceOverDetectionModeItems(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDetectionModeItems];
}

id objc_msgSend_voiceOverDidRegisterWithSystem(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDidRegisterWithSystem];
}

id objc_msgSend_voiceOverDidSpeak_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voiceOverDidSpeak:");
}

id objc_msgSend_voiceOverDirectTouchEnabledApps(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDirectTouchEnabledApps];
}

id objc_msgSend_voiceOverDiscoveredSensitiveContentFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDiscoveredSensitiveContentFeedback];
}

id objc_msgSend_voiceOverDoubleTapInterval(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDoubleTapInterval];
}

id objc_msgSend_voiceOverEffectiveSpeakingVolume(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverEffectiveSpeakingVolume];
}

id objc_msgSend_voiceOverFlashlightNotificationsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverFlashlightNotificationsEnabled];
}

id objc_msgSend_voiceOverHandGesturesActionCustomizations(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverHandGesturesActionCustomizations];
}

id objc_msgSend_voiceOverHapticIntensity(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverHapticIntensity];
}

id objc_msgSend_voiceOverHardwareTypingFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverHardwareTypingFeedback];
}

id objc_msgSend_voiceOverHelpMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverHelpMode];
}

id objc_msgSend_voiceOverHintsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverHintsEnabled];
}

id objc_msgSend_voiceOverImageCaptionsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverImageCaptionsEnabled];
}

id objc_msgSend_voiceOverInlineTextCompletionAppearanceFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverInlineTextCompletionAppearanceFeedback];
}

id objc_msgSend_voiceOverIsConfirmed(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverIsConfirmed];
}

id objc_msgSend_voiceOverIsIdle(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverIsIdle];
}

id objc_msgSend_voiceOverKeyboardModifierChoice(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverKeyboardModifierChoice];
}

id objc_msgSend_voiceOverLanguageDetectionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverLanguageDetectionEnabled];
}

id objc_msgSend_voiceOverLinkFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverLinkFeedback];
}

id objc_msgSend_voiceOverLockedScreenNotificationOutput(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverLockedScreenNotificationOutput];
}

id objc_msgSend_voiceOverMediaDuckingAmount(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverMediaDuckingAmount];
}

id objc_msgSend_voiceOverMediaDuckingMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverMediaDuckingMode];
}

id objc_msgSend_voiceOverMoreContentOutputFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverMoreContentOutputFeedback];
}

id objc_msgSend_voiceOverMuted(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverMuted];
}

id objc_msgSend_voiceOverNavigateImagesOption(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverNavigateImagesOption];
}

id objc_msgSend_voiceOverNavigationDirectionMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverNavigationDirectionMode];
}

id objc_msgSend_voiceOverNavigationStyle(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverNavigationStyle];
}

id objc_msgSend_voiceOverNeuralElementFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverNeuralElementFeedback];
}

id objc_msgSend_voiceOverNumberFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverNumberFeedback];
}

id objc_msgSend_voiceOverPhoneticsFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverPhoneticsFeedback];
}

id objc_msgSend_voiceOverPitchChangeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverPitchChangeEnabled];
}

id objc_msgSend_voiceOverPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverPunctuationGroup];
}

id objc_msgSend_voiceOverQuickNavAnnouncementFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverQuickNavAnnouncementFeedback];
}

id objc_msgSend_voiceOverRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverRotorItems];
}

id objc_msgSend_voiceOverRotorSummaryFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverRotorSummaryFeedback];
}

id objc_msgSend_voiceOverRotorUpdatesWithElement(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverRotorUpdatesWithElement];
}

id objc_msgSend_voiceOverScreenCurtainEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverScreenCurtainEnabled];
}

id objc_msgSend_voiceOverSelectedActivity(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSelectedActivity];
}

id objc_msgSend_voiceOverShouldDisallowUSBRestrictedMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverShouldDisallowUSBRestrictedMode];
}

id objc_msgSend_voiceOverShouldOutputToHearingAid(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverShouldOutputToHearingAid];
}

id objc_msgSend_voiceOverShouldSpeakDiscoveredText(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverShouldSpeakDiscoveredText];
}

id objc_msgSend_voiceOverShowSoftwareKeyboardWithBraille(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverShowSoftwareKeyboardWithBraille];
}

id objc_msgSend_voiceOverSoftwareTypingFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSoftwareTypingFeedback];
}

id objc_msgSend_voiceOverSoundCurtain(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSoundCurtain];
}

id objc_msgSend_voiceOverSoundEffectsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSoundEffectsEnabled];
}

id objc_msgSend_voiceOverSoundVolume(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSoundVolume];
}

id objc_msgSend_voiceOverSpeakTableColumnRowInformation(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSpeakTableColumnRowInformation];
}

id objc_msgSend_voiceOverSpeakTableHeaders(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSpeakTableHeaders];
}

id objc_msgSend_voiceOverSpeakingRateInRotorEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSpeakingRateInRotorEnabled];
}

id objc_msgSend_voiceOverSpeaksOverTelephoneCalls(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSpeaksOverTelephoneCalls];
}

id objc_msgSend_voiceOverTapticTimeEncoding(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTapticTimeEncoding];
}

id objc_msgSend_voiceOverTapticTimeMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTapticTimeMode];
}

id objc_msgSend_voiceOverTouchBrailleDisplayInputMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleDisplayInputMode];
}

id objc_msgSend_voiceOverTouchBrailleDisplayInputTableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleDisplayInputTableIdentifier];
}

id objc_msgSend_voiceOverTouchBrailleDisplayOutputMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleDisplayOutputMode];
}

id objc_msgSend_voiceOverTouchBrailleDisplayOutputTableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleDisplayOutputTableIdentifier];
}

id objc_msgSend_voiceOverTouchBrailleDisplaySyncInputOutputTables(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleDisplaySyncInputOutputTables];
}

id objc_msgSend_voiceOverTouchBrailleGestureControl(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGestureControl];
}

id objc_msgSend_voiceOverTouchBrailleGesturesActivationGestureEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesActivationGestureEnabled];
}

id objc_msgSend_voiceOverTouchBrailleGesturesAutoActivateOnTextFields(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesAutoActivateOnTextFields];
}

id objc_msgSend_voiceOverTouchBrailleGesturesDidPlayCalibrationHint(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesDidPlayCalibrationHint];
}

id objc_msgSend_voiceOverTouchBrailleGesturesDisplaysEnteredText(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesDisplaysEnteredText];
}

id objc_msgSend_voiceOverTouchBrailleGesturesInputMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesInputMode];
}

id objc_msgSend_voiceOverTouchBrailleGesturesInputTableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesInputTableIdentifier];
}

id objc_msgSend_voiceOverTouchBrailleGesturesLockedOrientation(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesLockedOrientation];
}

id objc_msgSend_voiceOverTouchBrailleGesturesLockedTypingMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesLockedTypingMode];
}

id objc_msgSend_voiceOverTouchBrailleGesturesShouldUseLockedConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesShouldUseLockedConfiguration];
}

id objc_msgSend_voiceOverTouchBrailleGesturesSoundOption(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesSoundOption];
}

id objc_msgSend_voiceOverTouchBrailleGesturesUsesHapticFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesUsesHapticFeedback];
}

id objc_msgSend_voiceOverTouchBrailleGesturesUsesTypingSoundFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesUsesTypingSoundFeedback];
}

id objc_msgSend_voiceOverTouchBraillePanningAutoTurnsReadingContent(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBraillePanningAutoTurnsReadingContent];
}

id objc_msgSend_voiceOverTouchBrailleShouldReverseDots(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleShouldReverseDots];
}

id objc_msgSend_voiceOverTouchBrailleShowGeneralStatus(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleShowGeneralStatus];
}

id objc_msgSend_voiceOverTouchBrailleShowTextStyleStatus(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleShowTextStyleStatus];
}

id objc_msgSend_voiceOverTouchDidLaunch(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchDidLaunch];
}

id objc_msgSend_voiceOverTouchPerkinsChordKeyboardInputEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchPerkinsChordKeyboardInputEnabled];
}

id objc_msgSend_voiceOverTouchPerkinsKeyboardInputEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchPerkinsKeyboardInputEnabled];
}

id objc_msgSend_voiceOverTouchSingleLetterQuickNavEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchSingleLetterQuickNavEnabled];
}

id objc_msgSend_voiceOverTouchUpdateBrailleWithoutConnectedDisplay(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchUpdateBrailleWithoutConnectedDisplay];
}

id objc_msgSend_voiceOverTutorialEventCommandTriggered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voiceOverTutorialEventCommandTriggered:");
}

id objc_msgSend_voiceOverUseDigitalCrownNavigation(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverUseDigitalCrownNavigation];
}

id objc_msgSend_voiceOverUseRingerSwitchToControlNotificationOutput(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverUseRingerSwitchToControlNotificationOutput];
}

id objc_msgSend_voiceOverUseTVToggleStyleNavigation(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverUseTVToggleStyleNavigation];
}

id objc_msgSend_voiceOverUserDidReadUSBRestrictedModeAlert(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverUserDidReadUSBRestrictedModeAlert];
}

id objc_msgSend_voiceOverVerbosityEmojiFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverVerbosityEmojiFeedback];
}

id objc_msgSend_voiceOverVerbosityEmojiSuffixEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverVerbosityEmojiSuffixEnabled];
}

id objc_msgSend_voiceOverVoiceRotors(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverVoiceRotors];
}

id objc_msgSend_voiceRotors(void *a1, const char *a2, ...)
{
  return _[a1 voiceRotors];
}

id objc_msgSend_voiceSelectionForAction_languageCode_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voiceSelectionForAction:languageCode:completionHandler:");
}

id objc_msgSend_voiceSelectionWithLanguageCode_withActivity_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voiceSelectionWithLanguageCode:withActivity:completionHandler:");
}

id objc_msgSend_voiceSettings(void *a1, const char *a2, ...)
{
  return _[a1 voiceSettings];
}

id objc_msgSend_volume(void *a1, const char *a2, ...)
{
  return _[a1 volume];
}

id objc_msgSend_votActionForEdgePanGestureState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "votActionForEdgePanGestureState:");
}

id objc_msgSend_votEventCommandName(void *a1, const char *a2, ...)
{
  return _[a1 votEventCommandName];
}

id objc_msgSend_votSettings(void *a1, const char *a2, ...)
{
  return _[a1 votSettings];
}

id objc_msgSend_waitForDragStartFromPid_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitForDragStartFromPid:completionHandler:");
}

id objc_msgSend_waitUntilDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitUntilDate:");
}

id objc_msgSend_waitingToRetryFocus(void *a1, const char *a2, ...)
{
  return _[a1 waitingToRetryFocus];
}

id objc_msgSend_wakeUpDeviceIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 wakeUpDeviceIfNecessary];
}

id objc_msgSend_wantsToStayActive(void *a1, const char *a2, ...)
{
  return _[a1 wantsToStayActive];
}

id objc_msgSend_warm(void *a1, const char *a2, ...)
{
  return _[a1 warm];
}

id objc_msgSend_warningTonesTimer(void *a1, const char *a2, ...)
{
  return _[a1 warningTonesTimer];
}

id objc_msgSend_wasCachePurged(void *a1, const char *a2, ...)
{
  return _[a1 wasCachePurged];
}

id objc_msgSend_wasEnabledThroughAccessory(void *a1, const char *a2, ...)
{
  return _[a1 wasEnabledThroughAccessory];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakObjectsPointerArray(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsPointerArray];
}

id objc_msgSend_webAreaURL(void *a1, const char *a2, ...)
{
  return _[a1 webAreaURL];
}

id objc_msgSend_webCustomRotorDictionary_direction_forElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "webCustomRotorDictionary:direction:forElement:");
}

id objc_msgSend_webEditableAncestor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "webEditableAncestor:");
}

id objc_msgSend_webPageLoadURL(void *a1, const char *a2, ...)
{
  return _[a1 webPageLoadURL];
}

id objc_msgSend_webPageLoadedGenerationMark(void *a1, const char *a2, ...)
{
  return _[a1 webPageLoadedGenerationMark];
}

id objc_msgSend_webSearchResultsActive(void *a1, const char *a2, ...)
{
  return _[a1 webSearchResultsActive];
}

id objc_msgSend_websiteLanguageMappingOverrides(void *a1, const char *a2, ...)
{
  return _[a1 websiteLanguageMappingOverrides];
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _[a1 whiteColor];
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceAndNewlineCharacterSet];
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceCharacterSet];
}

id objc_msgSend_whitespaceNewlineAndSpecialCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceNewlineAndSpecialCharacterSet];
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return _[a1 width];
}

id objc_msgSend_willBeginReadAll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willBeginReadAll:");
}

id objc_msgSend_willPlayheadPositionChangePassGridline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willPlayheadPositionChangePassGridline:");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _[a1 window];
}

id objc_msgSend_windowContextIDs(void *a1, const char *a2, ...)
{
  return _[a1 windowContextIDs];
}

id objc_msgSend_windowContextId(void *a1, const char *a2, ...)
{
  return _[a1 windowContextId];
}

id objc_msgSend_windowContextIdForPress(void *a1, const char *a2, ...)
{
  return _[a1 windowContextIdForPress];
}

id objc_msgSend_windowContextIdImmediateRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowContextIdImmediateRemoteParent:");
}

id objc_msgSend_windowSceneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 windowSceneIdentifier];
}

id objc_msgSend_wordBreakCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 wordBreakCharacterSet];
}

id objc_msgSend_wordBreakSet(void *a1, const char *a2, ...)
{
  return _[a1 wordBreakSet];
}

id objc_msgSend_wordFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wordFromPosition:inDirection:");
}

id objc_msgSend_wordStringFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wordStringFromPosition:inDirection:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_xGridlinePositions(void *a1, const char *a2, ...)
{
  return _[a1 xGridlinePositions];
}

id objc_msgSend_zoomCurrentLensMode(void *a1, const char *a2, ...)
{
  return _[a1 zoomCurrentLensMode];
}

id objc_msgSend_zoomFrameOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomFrameOnDisplay:");
}

id objc_msgSend_zoomInAtLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomInAtLocation:");
}

id objc_msgSend_zoomLevelOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomLevelOnDisplay:");
}

id objc_msgSend_zoomOutAtLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomOutAtLocation:");
}