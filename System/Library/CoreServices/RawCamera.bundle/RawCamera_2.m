uint64_t sub_1DDB23724(uint64_t result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t j;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  BOOL *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t i;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;

  v2 = a2[114] - 3;
  if (v2 >= 3)
  {
    v61 = a2[113] - 3;
    if (v61 <= 2)
    {
      for (i = 2; i < v2; i += 2)
        ;
    }
    else
    {
      v3 = a2[116];
      v4 = *(_DWORD *)(result + 888);
      v5 = *(_DWORD *)(result + 892);
      v6 = *(void *)(result + 896);
      v7 = *(void *)(result + 904);
      v8 = *(void *)(result + 912);
      v9 = v3 & 0xFFFFFFFFFFFFFFFELL;
      v10 = v3 >> 1;
      v58 = v9 + 2;
      v59 = a2[118];
      v11 = a2[115];
      v12 = v11 + 2 * v9;
      if (*(_DWORD *)(result + 160) == 4) {
        v13 = -1;
      }
      else {
        v13 = 0;
      }
      v14 = 2 * v13;
      v15 = v12 + v14;
      v57 = a2[118] + 1;
      v56 = 4 * v10;
      v16 = v14 + 6 * v10 + v11 + 10;
      v17 = a2[117];
      v18 = v14 + 8 * v10 + v11 + 8;
      v19 = 2;
      v60 = v2;
      do
      {
        v20 = 0;
        v21 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v15 + 4));
        v22 = v57;
        v23 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v15 + 2 * v58));
        for (j = 2; j < v61; j += 4)
        {
          v33 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v15 + v20 + 8));
          v34 = (v23 + v33 + 1) >> 1;
          if (v33 - v23 >= 0) {
            v35 = v33 - v23;
          }
          else {
            v35 = v23 - v33;
          }
          v36 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v18 + v20));
          v37 = (v21 + v36 + 1) >> 1;
          v38 = v21 - v36;
          if (v21 - v36 < 0) {
            v38 = v36 - v21;
          }
          v39 = 2404 * *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v16 + v20 - 4));
          if ((v19 & 2) != 0)
          {
            v40 = v39 + 467 * v34 + 1225 * v37;
            v41 = v8;
            v42 = v7;
          }
          else
          {
            v40 = v39 + 1225 * v34 + 467 * v37;
            v41 = v7;
            v42 = v8;
          }
          v43 = (BOOL *)(v17 + v22);
          v44 = *(unsigned __int16 *)(v42 + 2 * v37);
          v45 = v35 - ((v4 * *(unsigned __int16 *)(v41 + 2 * v34) + 2048) >> 12);
          v46 = v38 - (v45 + ((v4 * v44 + 2048) >> 12));
          v47 = (v46 & ~(v46 >> 31)) + v45;
          if ((v40 + 2048) >> 12 <= 0x1000) {
            v48 = 4096;
          }
          else {
            v48 = (v40 + 2048) >> 12;
          }
          v49 = (int)(v47 * (v48 - 4096)) >> 12;
          if (v40 <= 0x1FFF7FF) {
            v47 = v49;
          }
          *v43 = ((int)(((v40 + 2048) >> 12) * v5) >> 16) + ~v47 < 0;
          v21 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v15 + v20 + 12));
          v50 = (v36 + v21 + 1) >> 1;
          if (v21 - v36 >= 0) {
            v51 = v21 - v36;
          }
          else {
            v51 = v36 - v21;
          }
          v23 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v18 + v20 + 4));
          v52 = (v33 + v23 + 1) >> 1;
          if (v33 - v23 >= 0) {
            v53 = v33 - v23;
          }
          else {
            v53 = v23 - v33;
          }
          v54 = 2404 * *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v16 + v20));
          if ((v19 & 2) != 0)
          {
            v25 = v54 + 1225 * v50 + 467 * v52;
            v26 = v7;
            v27 = v8;
          }
          else
          {
            v25 = v54 + 467 * v50 + 1225 * v52;
            v26 = v8;
            v27 = v7;
          }
          v28 = *(unsigned __int16 *)(v26 + 2 * v50);
          result = ((int)(((v25 + 2048) >> 12) * v5) >> 16);
          v29 = v4 * *(unsigned __int16 *)(v27 + 2 * v52) + 2048;
          v30 = ((v53 - (v51 - ((v4 * v28 + 2048) >> 12) + (v29 >> 12))) & ~((v53
                                                                            - (v51
                                                                             - ((v4 * v28 + 2048) >> 12)
                                                                             + (v29 >> 12))) >> 31))
              + v51
              - ((v4 * v28 + 2048) >> 12);
          if ((v25 + 2048) >> 12 <= 0x1000) {
            v31 = 4096;
          }
          else {
            v31 = (v25 + 2048) >> 12;
          }
          v32 = (int)(v30 * (v31 - 4096)) >> 12;
          if (v25 <= 0x1FFF7FF) {
            v30 = v32;
          }
          v43[1] = (int)result + ~v30 < 0;
          v22 += 2;
          v20 += 8;
        }
        v19 += 2;
        v15 += v56;
        v16 += v56;
        v18 += v56;
        v17 += v59;
      }
      while (v19 < v60);
    }
  }
  return result;
}

void *sub_1DDB23A4C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[119];
  uint64_t v3 = a2[124];
  v4 = (_WORD *)(a2[123] + 2 * v3);
  unint64_t v5 = a2[120] - 2;
  uint64_t __len = 2 * v2;
  v68 = v4;
  v69 = (char *)a2[123];
  if (v5 >= 3)
  {
    unint64_t v6 = v2 - 2;
    if ((unint64_t)(v2 - 2) <= 2)
    {
      v4 = (_WORD *)(a2[123] + 2 * v3);
      v59 = &v69[3 * v3 - 6];
      for (unint64_t i = 2; i < v5; i += 2)
      {
        __int16 v61 = v4[2];
        v4[1] = v61;
        _WORD *v4 = v61;
        v62 = &v4[(unint64_t)__len / 2];
        __int16 v63 = v4[(unint64_t)__len / 2 - 3];
        *(v62 - 2) = v63;
        *(v62 - 1) = v63;
        __int16 v64 = *((_WORD *)v59 + 5);
        *((_WORD *)v59 + 4) = v64;
        *((_WORD *)v59 + 3) = v64;
        v65 = &v59[__len];
        __int16 v66 = *(_WORD *)&v59[2 * v2];
        *((_WORD *)v65 + 1) = v66;
        *((_WORD *)v65 + 2) = v66;
        v4 = (_WORD *)((char *)v4 + v3 + v3);
        v59 += 2 * v3;
      }
    }
    else
    {
      unint64_t v7 = a2[122];
      uint64_t v8 = a2[126];
      unint64_t v9 = v7 >> 1;
      int v10 = *(_DWORD *)(a1 + 960);
      v7 &= ~1uLL;
      int v11 = *(_DWORD *)(a1 + 968);
      uint64_t v12 = a2[121];
      uint64_t v13 = v12 + 2 * v7;
      uint64_t v70 = 4 * v9;
      uint64_t v14 = v12 + 8 * v9;
      uint64_t v15 = v12 + v7;
      uint64_t v16 = v12 + 6 * v9;
      uint64_t v17 = v16 + 4;
      v4 = (_WORD *)(a2[123] + 2 * v3);
      v18 = &v69[3 * v3];
      uint64_t v19 = a2[125];
      v20 = (unsigned __int16 *)(v16 + 6);
      unint64_t v21 = 2;
      uint64_t v71 = 2 * v3;
      uint64_t v72 = v3;
      do
      {
        unint64_t v25 = 0;
        uint64_t v74 = v19 + v8;
        int v26 = v11;
        unint64_t v27 = 2;
        do
        {
          uint64_t v29 = 2 * v26;
          uint64_t v30 = v19 + v8;
          v31 = (unsigned __int16 *)(v19 + v8 + v29);
          uint64_t v32 = v19 + v29;
          unsigned int v33 = *v31 + v31[3] + *(unsigned __int16 *)(v19 + v29 + 6) + *(unsigned __int16 *)(v19 + v29);
          int v34 = *(unsigned __int16 *)(v13 + v25 + 4);
          if (v33 >= 2)
          {
            int v38 = ((*(unsigned __int16 *)(v30 + 8)
                  + *(unsigned __int16 *)(v30 + 2)
                  + *(unsigned __int16 *)(v19 + 8)
                  + *(unsigned __int16 *)(v19 + 2)
                  + 2) >> 2)
                * v34
                / ((v33 + 2) >> 2);
          }
          else
          {
            unsigned int v35 = (*(unsigned __int16 *)(v15 + v25 + 2)
                 + *(unsigned __int16 *)(v15 + v25 + 6)
                 + *(unsigned __int16 *)(v17 + v25 - 2)
                 + *(unsigned __int16 *)(v17 + v25 + 2)
                 + 2) >> 2;
            unsigned int v36 = (3 * v34
                 + ((*(unsigned __int16 *)(v12 + v25)
                   + *(unsigned __int16 *)(v12 + v25 + 8)
                   + *(unsigned __int16 *)(v14 + v25)
                   + *(unsigned __int16 *)(v14 + v25 + 8)
                   + 2) >> 2)
                 + 2) >> 2;
            if (v10 == 0x10000)
            {
              int v37 = v34 - v36 + v35;
            }
            else
            {
              int v39 = (int)((v35 - v36) * v10 + 0x8000) >> 16;
              int v40 = v39 + v36;
              int v37 = v39 + v34;
              if (v40 >= 1) {
                int v37 = (int)(((v40 >> 1) + (v35 << 14)) / v40 * v37 + 4096) >> 14;
              }
            }
            int v38 = v37 & ~(v37 >> 31);
          }
          v41 = &v4[v25 / 2];
          if (v38 >= 0xFFFF) {
            LOWORD(v38) = -1;
          }
          v41[2] = v38;
          int v42 = *(unsigned __int16 *)(v32 + 6);
          int v43 = *(unsigned __int16 *)(v13 + v25 + 6);
          int v44 = v42 + v31[3];
          if (v44)
          {
            int v28 = ((*(unsigned __int16 *)(v30 + 8) + *(unsigned __int16 *)(v19 + 8) + 1) >> 1)
                * v43
                / ((v44 + 1) >> 1);
          }
          else
          {
            unsigned int v45 = (*(unsigned __int16 *)(v15 + v25 + 4)
                 + *(unsigned __int16 *)(v15 + v25 + 8)
                 + *(unsigned __int16 *)(v17 + v25)
                 + *(unsigned __int16 *)(v17 + v25 + 4)
                 + 2) >> 2;
            unsigned int v46 = (3 * v43
                 + ((*(unsigned __int16 *)(v12 + v25 + 2)
                   + *(unsigned __int16 *)(v12 + v25 + 10)
                   + *(unsigned __int16 *)(v14 + v25 + 2)
                   + *(unsigned __int16 *)(v14 + v25 + 10)
                   + 2) >> 2)
                 + 2) >> 2;
            if (v10 == 0x10000)
            {
              int v47 = v43 - v46 + v45;
            }
            else
            {
              int v48 = (int)((v45 - v46) * v10 + 0x8000) >> 16;
              int v49 = v48 + v46;
              int v47 = v48 + v43;
              if (v49 >= 1) {
                int v47 = (int)(((v49 >> 1) + (v45 << 14)) / v49 * v47 + 4096) >> 14;
              }
            }
            int v28 = v47 & ~(v47 >> 31);
          }
          if (v28 >= 0xFFFF) {
            LOWORD(v28) = -1;
          }
          v41[3] = v28;
          v26 ^= 2u;
          v27 += 2;
          v25 += 4;
          v19 += 6;
        }
        while (v27 < v6);
        v11 ^= 2u;
        __int16 v50 = v4[2];
        v4[1] = v50;
        _WORD *v4 = v50;
        v51 = &v4[v2];
        __int16 v52 = *(v51 - 3);
        *(v51 - 2) = v52;
        *(v51 - 1) = v52;
        uint64_t v3 = v72;
        v53 = (_WORD *)((char *)v4 + v72);
        v54 = v20;
        unint64_t v55 = 2;
        uint64_t v19 = v74;
        do
        {
          LOWORD(v58) = *(v54 - 1);
          if (!(_WORD)v58) {
            unsigned int v58 = (*(v54 - 2) + *v54 + 1) >> 1;
          }
          v56 = &v18[2 * v55];
          *(_WORD *)v56 = v58;
          __int16 v57 = *v54;
          v54 += 2;
          *((_WORD *)v56 + 1) = v57;
          v55 += 2;
        }
        while (v55 < v6);
        __int16 v22 = v53[2];
        v53[1] = v22;
        _WORD *v53 = v22;
        v23 = &v53[v2];
        v4 = (_WORD *)((char *)v53 + v72);
        v21 += 2;
        __int16 v24 = *(v23 - 3);
        v12 += v70;
        v14 += v70;
        v13 += v70;
        v15 += v70;
        *(v23 - 2) = v24;
        *(v23 - 1) = v24;
        v17 += v70;
        v18 += v71;
        v20 = (unsigned __int16 *)((char *)v20 + v70);
      }
      while (v21 < v5);
    }
  }
  memmove(v4, (char *)v4 - v3, __len);
  memmove((char *)v4 + v3, (char *)v4 - v3, __len);
  memmove(v69, v68, __len);

  return memmove(&v69[v3], v68, __len);
}

void *sub_1DDB23F28(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[119];
  uint64_t v3 = a2[124];
  uint64_t v70 = (char *)a2[123];
  v4 = &v70[2 * v3];
  unint64_t v5 = a2[120] - 2;
  uint64_t __len = 2 * v2;
  v69 = v4;
  if (v5 >= 3)
  {
    unint64_t v74 = a2[120] - 2;
    uint64_t v75 = 2 * v3;
    uint64_t v6 = a2[121];
    uint64_t v7 = a2[122] >> 1;
    unint64_t v8 = *(void *)(a1 + 976);
    uint64_t v73 = a2[119];
    unint64_t v9 = v2 - 2;
    unint64_t v10 = v8 ^ 1;
    unint64_t v76 = v8;
    if (v8 >= v9)
    {
      if (v10 >= v9)
      {
        uint64_t v55 = 3 * v3;
        uint64_t v56 = 3 * v3 + 2 * v10 - 2;
        uint64_t v57 = v75 + __len - 6;
        unint64_t v58 = 2;
        v59 = (_WORD *)a2[123];
        do
        {
          v60 = &v59[(unint64_t)v75 / 2];
          v59[v8 - 1 + (unint64_t)v75 / 2] = 0;
          __int16 v61 = v59[(unint64_t)v75 / 2 + 2];
          v60[1] = v61;
          _WORD *v60 = v61;
          v62 = (char *)v59 + v57;
          __int16 v63 = *(_WORD *)((char *)v59 + v57);
          *((_WORD *)v62 + 1) = v63;
          *((_WORD *)v62 + 2) = v63;
          __int16 v64 = (_WORD *)((char *)v59 + v55);
          *(_WORD *)((char *)v59 + v56) = 0;
          __int16 v65 = *(_WORD *)((char *)v59 + v55 + 4);
          v64[1] = v65;
          *__int16 v64 = v65;
          __int16 v66 = (_WORD *)((char *)v59 + 3 * v3 + __len - 2);
          LOWORD(v64) = *(v66 - 2);
          *(v66 - 1) = (_WORD)v64;
          *__int16 v66 = (_WORD)v64;
          v58 += 2;
          v59 = v60;
        }
        while (v58 < v5);
        v4 = (char *)&v60[(unint64_t)v75 / 2];
      }
      else
      {
        v4 = &v70[2 * v3];
        int v44 = &v70[3 * v3];
        uint64_t v45 = v6 + 6 * v7;
        unint64_t v46 = 2;
        do
        {
          *(_WORD *)&v4[2 * v8 - 2] = 0;
          __int16 v47 = *((_WORD *)v4 + 2);
          *((_WORD *)v4 + 1) = v47;
          *(_WORD *)v4 = v47;
          int v48 = &v4[2 * v73];
          __int16 v49 = *((_WORD *)v48 - 3);
          *((_WORD *)v48 - 2) = v49;
          *((_WORD *)v48 - 1) = v49;
          __int16 v50 = &v4[v3];
          *(_WORD *)&v4[2 * v10 - 2 + v3] = 0;
          unint64_t v51 = v8 ^ 1;
          do
          {
            *(_DWORD *)&v44[2 * v51] = *(unsigned __int16 *)(v45 + 2 * v51);
            v51 += 2;
          }
          while (v51 < v9);
          __int16 v52 = *((_WORD *)v50 + 2);
          *((_WORD *)v50 + 1) = v52;
          *(_WORD *)__int16 v50 = v52;
          v53 = &v50[2 * v73];
          __int16 v54 = *((_WORD *)v53 - 3);
          *((_WORD *)v53 - 2) = v54;
          *((_WORD *)v53 - 1) = v54;
          v4 = &v50[v3];
          v46 += 2;
          v44 += v75;
          v45 += 4 * v7;
        }
        while (v46 < v74);
      }
    }
    else
    {
      int v11 = *(_DWORD *)(a1 + 964);
      uint64_t v12 = a2[126];
      int v13 = *(_DWORD *)(a1 + 960);
      uint64_t v14 = (uint64_t)&v70[2 * v8 + 2 + v75];
      int v15 = *(_DWORD *)(a1 + 968);
      uint64_t v16 = v6 + 2 * v8;
      uint64_t v71 = 4 * v7;
      uint64_t v17 = v16 + 4 * v7;
      uint64_t v18 = 6 * v7 + v16 - 2;
      uint64_t v19 = v6 + 2 * (v8 + v7) - 2;
      uint64_t v20 = 2 * v8 + 8 * v7 + v6 - 4;
      unint64_t v21 = &v70[3 * v3];
      uint64_t v22 = v6 + 6 * v7;
      v23 = (unsigned __int16 *)(a2[125] + 8);
      uint64_t v24 = 2;
      v4 = &v70[2 * v3];
      uint64_t v72 = a2[124];
      do
      {
        uint64_t v77 = v24;
        uint64_t v28 = 0;
        unint64_t v29 = v76;
        *(_WORD *)&v4[2 * v76 - 2] = 0;
        v78 = v23;
        int v30 = v15;
        do
        {
          unsigned int v32 = *(unsigned __int16 *)((char *)&v23[v30 - 1 + v11] + v12)
              + *(unsigned __int16 *)((char *)&v23[v30 - 1] + v12)
              + v23[v30 - 1]
              + v23[v30 - 1 + v11];
          int v33 = *(unsigned __int16 *)(v17 + v28);
          if (v32 >= 2)
          {
            int v31 = ((*(unsigned __int16 *)((char *)v23 + v12)
                  + *(unsigned __int16 *)((char *)&v23[v11] + v12)
                  + *v23
                  + v23[v11]
                  + 2) >> 2)
                * v33
                / ((v32 + 2) >> 2);
          }
          else
          {
            unsigned int v34 = (*(unsigned __int16 *)(v19 + v28)
                 + *(unsigned __int16 *)(v19 + v28 + 4)
                 + *(unsigned __int16 *)(v18 + v28)
                 + *(unsigned __int16 *)(v18 + v28 + 4)
                 + 2) >> 2;
            unsigned int v35 = (3 * v33
                 + ((*(unsigned __int16 *)(v16 + v28 - 4)
                   + *(unsigned __int16 *)(v16 + v28 + 4)
                   + *(unsigned __int16 *)(v20 + v28)
                   + *(unsigned __int16 *)(v20 + v28 + 8)
                   + 2) >> 2)
                 + 2) >> 2;
            if (v13 == 0x10000)
            {
              int v36 = v33 - v35 + v34;
            }
            else
            {
              int v37 = (int)((v34 - v35) * v13 + 0x8000) >> 16;
              int v38 = v37 + v35;
              int v36 = v37 + v33;
              if (v38 >= 1) {
                int v36 = (int)(((v38 >> 1) + (v34 << 14)) / v38 * v36 + 4096) >> 14;
              }
            }
            int v31 = v36 & ~(v36 >> 31);
          }
          *(_WORD *)(v14 + v28) = 0;
          v30 ^= 2u;
          if (v31 >= 0xFFFF) {
            LOWORD(v31) = -1;
          }
          *(_WORD *)(v14 + v28 - 2) = v31;
          v29 += 2;
          v23 += 3;
          v28 += 4;
        }
        while (v29 < v9);
        __int16 v39 = *((_WORD *)v4 + 2);
        *((_WORD *)v4 + 1) = v39;
        *(_WORD *)v4 = v39;
        uint64_t v3 = v72;
        int v40 = &v4[2 * v73];
        __int16 v41 = *((_WORD *)v40 - 3);
        *((_WORD *)v40 - 2) = v41;
        *((_WORD *)v40 - 1) = v41;
        int v42 = &v4[v72];
        *(_WORD *)&v4[2 * v10 - 2 + v72] = 0;
        for (unint64_t i = v10; i < v9; i += 2)
          *(_DWORD *)&v21[2 * i] = *(unsigned __int16 *)(v22 + 2 * i);
        v15 ^= 2u;
        __int16 v25 = *((_WORD *)v42 + 2);
        *((_WORD *)v42 + 1) = v25;
        *(_WORD *)int v42 = v25;
        int v26 = &v42[2 * v73];
        v4 = &v42[v72];
        v24 += 2;
        v23 = (unsigned __int16 *)((char *)v78 + v12);
        v14 += v75;
        __int16 v27 = *((_WORD *)v26 - 3);
        *((_WORD *)v26 - 2) = v27;
        v17 += v71;
        v18 += v71;
        v16 += v71;
        v19 += v71;
        *((_WORD *)v26 - 1) = v27;
        v20 += v71;
        v21 += v75;
        v22 += v71;
      }
      while (v77 + 2 < v74);
    }
  }
  memmove(v4, &v4[-v3], __len);
  memmove(&v4[v3], &v4[-v3], __len);
  memmove(v70, v69, __len);

  return memmove(&v70[v3], v69, __len);
}

unint64_t sub_1DDB24470(unint64_t result, void *a2)
{
  v1049[3] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a2[127];
  unint64_t v3 = a2[128];
  v4 = (unsigned __int16 *)a2[129];
  uint64_t v987 = a2[130];
  uint64_t v5 = a2[131];
  uint64_t v974 = a2[132];
  uint64_t v6 = (char *)a2[133];
  uint64_t v7 = a2[134];
  float v8 = *(float *)(result + 1024);
  uint64_t v9 = *(void *)(result + 1032);
  uint64_t v10 = *(void *)(result + 1040);
  uint64_t v11 = *(void *)(result + 1048);
  uint64_t v12 = *(void *)(result + 1056);
  uint64_t v973 = *(void *)(result + 1064);
  int v972 = *(_DWORD *)(result + 1072);
  int v13 = *(_DWORD *)(result + 1076);
  int v971 = *(_DWORD *)(result + 1080);
  int v980 = *(_DWORD *)(result + 1084);
  uint64_t v14 = *(void *)(*(void *)(result + 2416) + 64);
  long long v1029 = 0u;
  long long v1030 = 0u;
  long long v1027 = 0u;
  long long v1028 = 0u;
  long long v1025 = 0u;
  long long v1026 = 0u;
  long long v1023 = 0u;
  long long v1024 = 0u;
  long long v1021 = 0u;
  long long v1022 = 0u;
  long long v1019 = 0u;
  long long v1020 = 0u;
  long long v1017 = 0u;
  long long v1018 = 0u;
  long long v1015 = 0u;
  long long v1016 = 0u;
  long long v1013 = 0u;
  long long v1014 = 0u;
  long long v1011 = 0u;
  long long v1012 = 0u;
  long long v1009 = 0u;
  long long v1010 = 0u;
  long long v1007 = 0u;
  long long v1008 = 0u;
  long long v1005 = 0u;
  long long v1006 = 0u;
  long long v1003 = 0u;
  memset(v1004, 0, sizeof(v1004));
  long long v1001 = 0u;
  long long v1002 = 0u;
  v1049[0] = v9;
  v1049[1] = v11;
  v1049[2] = v9;
  uint64_t v981 = v10;
  uint64_t v979 = v12;
  if (v2 > 1)
  {
    uint64_t v16 = v4;
    if (v2 >> 1 <= 1) {
      size_t v17 = 1;
    }
    else {
      size_t v17 = v2 >> 1;
    }
    uint64_t v18 = v7;
    memset(v6, 68, v17);
    memset(&v6[v18], 68, v17);
    memset(&v6[v18 + v18], 68, v17);
    unint64_t v15 = v3 - 3;
    if (v3 < 3)
    {
      v4 = v16;
      uint64_t v7 = v18;
      uint64_t v10 = v981;
      uint64_t v12 = v979;
      goto LABEL_11;
    }
    uint64_t v19 = &v6[v18 * v15];
    memset(v19, 68, v17);
    uint64_t v20 = &v19[v18];
    memset(v20, 68, v17);
    result = (unint64_t)memset(&v20[v18], 68, v17);
    unint64_t v15 = v3 - 3;
    v4 = v16;
    uint64_t v7 = v18;
    uint64_t v10 = v981;
    uint64_t v12 = v979;
    if (v3 - 3 >= 4) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v15 = v3 - 3;
    if (v3 - 3 >= 4)
    {
LABEL_11:
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      v23 = &v6[3 * v7];
      uint64_t v24 = (unsigned __int16 *)(v5 + v974 + 2 * v974 + 6);
      uint64_t v986 = v987;
      uint64_t v978 = (uint64_t)v4 + 3 * v987 + 6;
      int v968 = (2 * v13) ^ 2;
      unint64_t v967 = v2 - 3;
      uint64_t v984 = 2 * v987;
      uint64_t v985 = 3 * v987;
      uint64_t v983 = 5 * v987;
      uint64_t v982 = 3 * v987;
      float v25 = 0.0;
      uint64_t v26 = 3;
      unint64_t v992 = v2;
      unint64_t v969 = v15;
      uint64_t v970 = v7;
      while (1)
      {
        __int16 v27 = &v24[-v974];
        uint64_t v28 = (unsigned __int16 *)((char *)v24 - v974);
        unint64_t v29 = (unsigned __int16 *)((char *)v24 + v974);
        int v30 = &v24[v974];
        unsigned int v999 = 7u >> *(unsigned char *)(v973 + 4 * (v26 & 3) + 3);
        v998 = v27;
        if (v999)
        {
          int v50 = *(v27 - 2);
          int v51 = *(v24 - 2);
          int v52 = *(v30 - 2);
          int v33 = v51 + v50 + v52;
          LODWORD(v1010) = v33;
          int v53 = ((v51 - v50) & ((v51 - v50) >> 31)) + v50;
          if (v51 > v50) {
            int v50 = v51;
          }
          LOWORD(v1002) = ((v52 - v53) & ((v52 - v53) >> 31)) + v53;
          if (v52 > v50) {
            LOWORD(v50) = v52;
          }
          WORD4(v1003) = v50;
          __int32 v35 = *(v28 - 1);
          int v54 = *(v29 - 1);
          int v38 = v54 + v35;
          DWORD1(v1010) = v54 + v35;
          int v55 = (v54 - v35) & ((v54 - v35) >> 31);
          LOWORD(v40) = v35 + v55;
          WORD1(v1002) = v35 + v55;
          LOWORD(v35) = v54 - v55;
          WORD5(v1003) = v54 - v55;
          int v56 = *v27;
          int v44 = *v24;
          int v57 = *v30;
          int v41 = v44 + v56 + v57;
          DWORD2(v1010) = v41;
          int v58 = ((v44 - v56) & ((v44 - v56) >> 31)) + v56;
          if (v44 <= v56) {
            int v44 = v56;
          }
          int v43 = ((v57 - v58) & ((v57 - v58) >> 31)) + v58;
          WORD2(v1002) = ((v57 - v58) & ((v57 - v58) >> 31)) + v58;
          if (v57 > v44) {
            LOWORD(v44) = v57;
          }
          WORD6(v1003) = v44;
          int v59 = v28[1];
          int v60 = v29[1];
          int v48 = v60 + v59;
          HIDWORD(v1010) = v60 + v59;
          WORD3(v1002) = v59 + ((v60 - v59) & ((v60 - v59) >> 31));
          int v45 = v60 - ((v60 - v59) & ((v60 - v59) >> 31));
        }
        else
        {
          int v31 = *(v28 - 2);
          int v32 = *(v29 - 2);
          int v33 = v32 + v31;
          LODWORD(v1010) = v32 + v31;
          __int16 v34 = (v32 - v31) & ((v32 - v31) >> 31);
          LOWORD(v1002) = v31 + v34;
          WORD4(v1003) = v32 - v34;
          __int32 v35 = *(v27 - 1);
          __int32 v36 = *(v24 - 1);
          __int32 v37 = *(v30 - 1);
          int v38 = v36 + v35 + v37;
          DWORD1(v1010) = v38;
          __int32 v39 = ((v36 - v35) & ((v36 - v35) >> 31)) + v35;
          if (v36 > v35) {
            __int32 v35 = v36;
          }
          int v40 = ((v37 - v39) & ((v37 - v39) >> 31)) + v39;
          WORD1(v1002) = ((v37 - v39) & ((v37 - v39) >> 31)) + v39;
          if (v37 > v35) {
            LOWORD(v35) = v37;
          }
          WORD5(v1003) = v35;
          int v43 = *v28;
          int v44 = *v29;
          int v41 = v44 + v43;
          DWORD2(v1010) = v44 + v43;
          int v42 = (v44 - v43) & ((v44 - v43) >> 31);
          LOWORD(v43) = v43 + v42;
          WORD2(v1002) = v43;
          LOWORD(v44) = v44 - v42;
          WORD6(v1003) = v44;
          int v45 = v27[1];
          int v46 = v24[1];
          int v47 = v30[1];
          int v48 = v46 + v45 + v47;
          HIDWORD(v1010) = v48;
          int v49 = ((v46 - v45) & ((v46 - v45) >> 31)) + v45;
          if (v46 > v45) {
            int v45 = v46;
          }
          WORD3(v1002) = ((v47 - v49) & ((v47 - v49) >> 31)) + v49;
          if (v47 > v45) {
            LOWORD(v45) = v47;
          }
        }
        uint64_t v976 = v26;
        v977 = v23;
        HIWORD(v1003) = v45;
        __int32 v35 = (unsigned __int16)v35;
        if ((unsigned __int16)v44 > (int)(unsigned __int16)v35) {
          __int32 v35 = (unsigned __int16)v44;
        }
        __int32 v997 = v35;
        v975 = (unsigned __int16 *)((char *)v24 + v974);
        if (v999)
        {
          unsigned int v95 = *(v998 - 2);
          unsigned int v96 = *(v24 - 2);
          unsigned int v97 = *(v30 - 2);
          float v98 = (float)((float)v95 - (float)v96) * *(float *)(v14 + 4 * (v96 + v95));
          float v99 = (float)((float)v96 - (float)v97) * *(float *)(v14 + 4 * (v97 + v96));
          *(float *)&long long v1039 = (float)(v99 * v99) + (float)(v98 * v98);
          unsigned int v100 = *(v28 - 1);
          unsigned int v101 = *(v29 - 1);
          float v102 = (float)((float)v100 - (float)v96) * *(float *)(v14 + 4 * (v100 + v96));
          float v103 = (float)((float)v101 - (float)v97) * *(float *)(v14 + 4 * (v101 + v97));
          *(float *)&uint64_t v1032 = (float)(v103 * v103) + (float)(v102 * v102);
          float v104 = (float)((float)v100 - (float)v101) * *(float *)(v14 + 4 * (v101 + v100));
          *((float *)&v1039 + 1) = v104 * v104;
          float v105 = (float)((float)v95 - (float)v100) * *(float *)(v14 + 4 * (v100 + v95));
          float v106 = (float)((float)v96 - (float)v101) * *(float *)(v14 + 4 * (v101 + v96));
          *(float *)&uint64_t v1047 = (float)(v106 * v106) + (float)(v105 * v105);
          unsigned int v107 = *v998;
          unsigned int v108 = *v24;
          unsigned int v109 = *v30;
          float v110 = (float)((float)v107 - (float)v95) * *(float *)(v14 + 4 * (v107 + v95));
          float v111 = (float)((float)v108 - (float)v96) * *(float *)(v14 + 4 * (v108 + v96));
          float v112 = *(float *)(v14 + 4 * (v109 + v97));
          *((float *)&v1028 + 1) = (float)((float)(v111 * v111) + (float)(v110 * v110))
                                 + (float)((float)((float)((float)v109 - (float)v97) * v112)
                                         * (float)((float)((float)v109 - (float)v97) * v112));
          float v113 = (float)((float)v107 - (float)v100) * *(float *)(v14 + 4 * (v107 + v100));
          float v114 = (float)((float)v108 - (float)v101) * *(float *)(v14 + 4 * (v108 + v101));
          *((float *)&v1032 + 1) = (float)(v114 * v114) + (float)(v113 * v113);
          float v115 = (float)((float)v107 - (float)v108) * *(float *)(v14 + 4 * (v108 + v107));
          float v116 = (float)((float)v108 - (float)v109) * *(float *)(v14 + 4 * (v109 + v108));
          *((float *)&v1039 + 2) = (float)(v116 * v116) + (float)(v115 * v115);
          float v117 = (float)((float)v100 - (float)v108) * *(float *)(v14 + 4 * (v108 + v100));
          float v118 = (float)((float)v101 - (float)v109) * *(float *)(v14 + 4 * (v109 + v101));
          *((float *)&v1047 + 1) = (float)(v118 * v118) + (float)(v117 * v117);
          unsigned int v119 = v28[1];
          unsigned int v120 = v29[1];
          float v121 = (float)((float)v119 - (float)v100) * *(float *)(v14 + 4 * (v119 + v100));
          float v122 = (float)((float)v120 - (float)v101) * *(float *)(v14 + 4 * (v120 + v101));
          *((float *)&v1028 + 2) = (float)(v122 * v122) + (float)(v121 * v121);
          float v123 = (float)((float)v119 - (float)v108) * *(float *)(v14 + 4 * (v119 + v108));
          float v124 = (float)((float)v120 - (float)v109) * *(float *)(v14 + 4 * (v120 + v109));
          float v1033 = (float)(v124 * v124) + (float)(v123 * v123);
          float v125 = (float)((float)v119 - (float)v120) * *(float *)(v14 + 4 * (v120 + v119));
          *((float *)&v1039 + 3) = v125 * v125;
          float v92 = (float)((float)v107 - (float)v119) * *(float *)(v14 + 4 * (v119 + v107));
          float v93 = (float)v108 - (float)v120;
          unsigned int v94 = v120 + v108;
        }
        else
        {
          unsigned int v61 = *(v28 - 2);
          unsigned int v62 = *(v29 - 2);
          float v63 = *(float *)(v14 + 4 * (v62 + v61)) * (float)((float)v62 - (float)v61);
          *(float *)&long long v1039 = v63 * v63;
          unsigned int v64 = *(v998 - 1);
          unsigned int v65 = *(v24 - 1);
          unsigned int v66 = *(v30 - 1);
          float v67 = (float)((float)v64 - (float)v61) * *(float *)(v14 + 4 * (v64 + v61));
          float v68 = (float)((float)v65 - (float)v62) * *(float *)(v14 + 4 * (v65 + v62));
          *(float *)&uint64_t v1032 = (float)(v68 * v68) + (float)(v67 * v67);
          float v69 = (float)((float)v65 - (float)v64) * *(float *)(v14 + 4 * (v65 + v64));
          float v70 = (float)((float)v66 - (float)v65) * *(float *)(v14 + 4 * (v66 + v65));
          *((float *)&v1039 + 1) = (float)(v70 * v70) + (float)(v69 * v69);
          float v71 = (float)((float)v65 - (float)v61) * *(float *)(v14 + 4 * (v65 + v61));
          float v72 = (float)((float)v66 - (float)v62) * *(float *)(v14 + 4 * (v66 + v62));
          *(float *)&uint64_t v1047 = (float)(v72 * v72) + (float)(v71 * v71);
          unsigned int v73 = *v28;
          unsigned int v74 = *v29;
          float v75 = (float)((float)v73 - (float)v61) * *(float *)(v14 + 4 * (v73 + v61));
          float v76 = (float)((float)v74 - (float)v62) * *(float *)(v14 + 4 * (v74 + v62));
          *((float *)&v1028 + 1) = (float)(v76 * v76) + (float)(v75 * v75);
          float v77 = (float)((float)v73 - (float)v65) * *(float *)(v14 + 4 * (v73 + v65));
          float v78 = (float)((float)v74 - (float)v66) * *(float *)(v14 + 4 * (v74 + v66));
          *((float *)&v1032 + 1) = (float)(v78 * v78) + (float)(v77 * v77);
          float v79 = (float)((float)v74 - (float)v73) * *(float *)(v14 + 4 * (v74 + v73));
          *((float *)&v1039 + 2) = v79 * v79;
          float v80 = (float)((float)v73 - (float)v64) * *(float *)(v14 + 4 * (v73 + v64));
          float v81 = (float)((float)v74 - (float)v65) * *(float *)(v14 + 4 * (v74 + v65));
          *((float *)&v1047 + 1) = (float)(v81 * v81) + (float)(v80 * v80);
          unsigned int v82 = v998[1];
          unsigned int v83 = v24[1];
          unsigned int v84 = v30[1];
          float v85 = (float)((float)v82 - (float)v64) * *(float *)(v14 + 4 * (v82 + v64));
          float v86 = (float)((float)v83 - (float)v65) * *(float *)(v14 + 4 * (v83 + v65));
          float v87 = *(float *)(v14 + 4 * (v84 + v66));
          *((float *)&v1028 + 2) = (float)((float)(v86 * v86) + (float)(v85 * v85))
                                 + (float)((float)((float)((float)v84 - (float)v66) * v87)
                                         * (float)((float)((float)v84 - (float)v66) * v87));
          float v88 = (float)((float)v82 - (float)v73) * *(float *)(v14 + 4 * (v82 + v73));
          float v89 = (float)((float)v83 - (float)v74) * *(float *)(v14 + 4 * (v83 + v74));
          float v1033 = (float)(v89 * v89) + (float)(v88 * v88);
          float v90 = (float)((float)v83 - (float)v82) * *(float *)(v14 + 4 * (v83 + v82));
          float v91 = *(float *)(v14 + 4 * (v84 + v83));
          *((float *)&v1039 + 3) = (float)((float)((float)((float)v84 - (float)v83) * v91)
                                         * (float)((float)((float)v84 - (float)v83) * v91))
                                 + (float)(v90 * v90);
          float v92 = (float)((float)v83 - (float)v73) * *(float *)(v14 + 4 * (v83 + v73));
          float v93 = (float)v84 - (float)v74;
          unsigned int v94 = v84 + v74;
        }
        int v126 = v980;
        float v1048 = (float)((float)(v93 * *(float *)(v14 + 4 * v94)) * (float)(v93 * *(float *)(v14 + 4 * v94)))
              + (float)(v92 * v92);
        uint64_t v127 = v976;
        LOWORD(v1006) = (v976 & 1 ^ v972) + v968;
        WORD6(v1005) = v1006;
        WORD4(v1005) = v1006;
        WORD2(v1005) = v1006;
        WORD1(v1006) = v1006 ^ 2;
        HIWORD(v1005) = v1006 ^ 2;
        WORD5(v1005) = v1006 ^ 2;
        WORD3(v1005) = v1006 ^ 2;
        WORD5(v1007) = (v976 & 2) == 0;
        WORD2(v1007) = WORD5(v1007);
        WORD6(v1006) = WORD5(v1007);
        WORD4(v1007) = (v976 >> 1) & 1;
        WORD3(v1007) = WORD4(v1007);
        LODWORD(v1007) = DWORD2(v1007);
        HIWORD(v1006) = WORD4(v1007);
        if (v971)
        {
          if ((int)((v976 & 1 ^ v972) + v968) < 2)
          {
            WORD3(v1007) = (v976 & 2) == 0;
            HIWORD(v1006) = WORD3(v1007);
            WORD5(v1007) = (v976 >> 1) & 1;
            WORD1(v1007) = WORD5(v1007);
            unsigned int v128 = (unsigned __int16)((v976 & 1 ^ v972) + v968);
LABEL_396:
            unsigned int v917 = v128;
            v918 = (unsigned __int16 *)(v978 - 3 * v987);
            switch(v917)
            {
              case 0u:
                v919 = &v918[v986];
                v920 = &v918[v986 + v986];
                v921 = &v920[v986];
                int v922 = *(v920 - 3);
                int v923 = *(v918 - 3);
                __int16 v924 = (v922 - v923) & ((v922 - v923) >> 31);
                WORD4(v1011) = v923 + v924;
                LOWORD(v1013) = v922 - v924;
                int v925 = v920[v986 - 1];
                int v926 = v918[v986 - 1];
                __int16 v927 = (v925 - v926) & ((v925 - v926) >> 31);
                WORD5(v1011) = v926 + v927;
                WORD1(v1013) = v925 - v927;
                int v928 = v920[1];
                int v929 = v918[1];
                __int16 v930 = (v928 - v929) & ((v928 - v929) >> 31);
                WORD6(v1011) = v929 + v930;
                WORD2(v1013) = v928 - v930;
                int v931 = v920[v986 - 3];
                int v932 = v918[v986 - 3];
                LOWORD(v1016) = v932 + ((v931 - v932) & ((v931 - v932) >> 31));
                WORD4(v1017) = v931 - ((v931 - v932) & ((v931 - v932) >> 31));
                LODWORD(v920) = *(v920 - 1);
                int v933 = *(v918 - 1);
                WORD1(v1016) = v933 + (((_WORD)v920 - v933) & (((int)v920 - v933) >> 31));
                WORD5(v1017) = (_WORD)v920 - (((_WORD)v920 - v933) & (((int)v920 - v933) >> 31));
                int v934 = v921[1];
                int v935 = v919[1];
                goto LABEL_400;
              case 1u:
                v936 = (char *)v918 + v987;
                v937 = &v936[v986 * 2];
                uint64_t v938 = (uint64_t)&v936[v986 * 2 + v986 * 2];
                int v939 = *(unsigned __int16 *)(v938 - 6);
                int v940 = *((unsigned __int16 *)v936 - 3);
                __int16 v941 = (v939 - v940) & ((v939 - v940) >> 31);
                WORD4(v1011) = v940 + v941;
                LOWORD(v1013) = v939 - v941;
                WORD5(v1011) = *(_WORD *)&v936[v986 * 2 - 2];
                WORD1(v1013) = WORD5(v1011);
                int v942 = *(unsigned __int16 *)(v938 + 2);
                int v943 = *((unsigned __int16 *)v936 + 1);
                WORD6(v1011) = v943 + ((v942 - v943) & ((v942 - v943) >> 31));
                WORD2(v1013) = v942 - ((v942 - v943) & ((v942 - v943) >> 31));
                LOWORD(v1016) = *(_WORD *)&v936[v986 * 2 - 6];
                WORD4(v1017) = v1016;
                LODWORD(v938) = *(unsigned __int16 *)(v938 - 2);
                LODWORD(v936) = *((unsigned __int16 *)v936 - 1);
                WORD1(v1016) = (_WORD)v936 + ((v938 - (_WORD)v936) & (((int)v938 - (int)v936) >> 31));
                WORD5(v1017) = v938 - ((v938 - (_WORD)v936) & (((int)v938 - (int)v936) >> 31));
                unsigned __int16 v944 = *((_WORD *)v937 + 1);
                goto LABEL_403;
              case 2u:
                v945 = &v918[v986];
                v946 = &v918[v986 + v986];
                v947 = &v946[v986];
                int v948 = *(v946 - 2);
                int v949 = *(v918 - 2);
                __int16 v950 = (v948 - v949) & ((v948 - v949) >> 31);
                WORD4(v1011) = v949 + v950;
                LOWORD(v1013) = v948 - v950;
                int v951 = v946[v987];
                int v952 = v918[v987];
                __int16 v953 = (v951 - v952) & ((v951 - v952) >> 31);
                WORD5(v1011) = v952 + v953;
                WORD1(v1013) = v951 - v953;
                int v954 = v946[2];
                int v955 = v918[2];
                __int16 v956 = (v954 - v955) & ((v954 - v955) >> 31);
                WORD6(v1011) = v955 + v956;
                WORD2(v1013) = v954 - v956;
                int v957 = v946[v986 - 2];
                int v958 = v918[v986 - 2];
                LOWORD(v1016) = v958 + ((v957 - v958) & ((v957 - v958) >> 31));
                WORD4(v1017) = v957 - ((v957 - v958) & ((v957 - v958) >> 31));
                LODWORD(v946) = *v946;
                int v959 = *v918;
                WORD1(v1016) = v959 + (((_WORD)v946 - v959) & (((int)v946 - v959) >> 31));
                WORD5(v1017) = (_WORD)v946 - (((_WORD)v946 - v959) & (((int)v946 - v959) >> 31));
                int v934 = v947[2];
                int v935 = v945[2];
LABEL_400:
                WORD2(v1016) = v935 + ((v934 - v935) & ((v934 - v935) >> 31));
                WORD6(v1017) = v934 - ((v934 - v935) & ((v934 - v935) >> 31));
                if (v967 < 4) {
                  goto LABEL_404;
                }
                goto LABEL_42;
              case 3u:
                v960 = (unsigned __int16 *)((char *)v918 + v987);
                v961 = &v960[v986];
                v962 = &v960[v986 + v986];
                int v963 = *(v962 - 2);
                int v964 = *(v960 - 2);
                WORD4(v1011) = v964 + ((v963 - v964) & ((v963 - v964) >> 31));
                LOWORD(v1013) = v963 - ((v963 - v964) & ((v963 - v964) >> 31));
                WORD5(v1011) = v960[v987];
                WORD1(v1013) = WORD5(v1011);
                LODWORD(v962) = v962[2];
                int v965 = v960[2];
                WORD6(v1011) = v965 + (((_WORD)v962 - v965) & (((int)v962 - v965) >> 31));
                WORD2(v1013) = (_WORD)v962 - (((_WORD)v962 - v965) & (((int)v962 - v965) >> 31));
                LOWORD(v1016) = v960[v986 - 2];
                WORD4(v1017) = v1016;
                LODWORD(v962) = v960[v987 + v987];
                LODWORD(v960) = *v960;
                WORD1(v1016) = (_WORD)v960 + (((_WORD)v962 - (_WORD)v960) & (((int)v962 - (int)v960) >> 31));
                WORD5(v1017) = (_WORD)v962 - (((_WORD)v962 - (_WORD)v960) & (((int)v962 - (int)v960) >> 31));
                unsigned __int16 v944 = v961[2];
LABEL_403:
                WORD2(v1016) = v944;
                WORD6(v1017) = v944;
                if (v967 < 4) {
                  goto LABEL_404;
                }
                goto LABEL_42;
              default:
                goto LABEL_41;
            }
          }
          WORD2(v1007) = (v976 >> 1) & 1;
          WORD6(v1006) = WORD2(v1007);
          WORD4(v1007) = (v976 & 2) == 0;
          LOWORD(v1007) = WORD4(v1007);
        }
        unsigned int v128 = (unsigned __int16)((v976 & 1 ^ v972) + v968);
        if (v128 <= 3) {
          goto LABEL_396;
        }
LABEL_41:
        if (v967 >= 4) {
          break;
        }
LABEL_404:
        unsigned int v129 = 1092;
        LODWORD(result) = 12;
        v916 = v977;
        v132 = v977;
        uint64_t v24 = (unsigned __int16 *)((char *)v24 + v974);
        do
        {
LABEL_405:
          *v132++ = v129;
          v129 >>= 8;
          result = (result - 8);
        }
        while (result > 7);
LABEL_12:
        char *v132 = v129 | 0x40;
        uint64_t v26 = v127 + 1;
        v978 += v987;
        v132[1] = 68;
        v23 = &v916[v970];
        v4 = (unsigned __int16 *)((char *)v4 + v987);
        if (v26 == v969) {
          return result;
        }
      }
LABEL_42:
      int v996 = v38 + v48 + v33 + v41;
      int v995 = (((unsigned __int16)v43 - (unsigned __int16)v40) & (((unsigned __int16)v43 - (unsigned __int16)v40) >> 31))
           + (unsigned __int16)v40;
      unsigned int v129 = 1092;
      LODWORD(result) = 12;
      v966 = v4;
      v130 = v4;
      uint64_t v131 = 6;
      v132 = v977;
      v1000 = (unsigned __int16 *)((char *)v24 + v974);
      while (1)
      {
        if ((((_BYTE)v131 - 3) & 7) == 3)
        {
          int16x4_t v134 = *(int16x4_t *)((char *)&v1003 + 8);
          int16x4_t v135 = (int16x4_t)v1002;
          *((void *)&v1002 + 1) = *((void *)&v1003 + 1);
          *(void *)&long long v1001 = v1002;
          int v136 = v1010;
          int v137 = DWORD1(v1010);
          long long v1008 = v1010;
          int v138 = DWORD2(v1010);
          int v139 = HIDWORD(v1010);
          if (v999)
          {
            int v185 = v998[2];
            int v186 = v24[2];
            int v187 = v30[2];
            LODWORD(v1009) = v186 + v185 + v187;
            int v188 = ((v186 - v185) & ((v186 - v185) >> 31)) + v185;
            if (v186 > v185) {
              int v185 = v186;
            }
            WORD4(v1001) = ((v187 - v188) & ((v187 - v188) >> 31)) + v188;
            if (v187 > v185) {
              LOWORD(v185) = v187;
            }
            LOWORD(v1003) = v185;
            int v189 = v28[3];
            int v190 = v1000[3];
            DWORD1(v1009) = v190 + v189;
            __int16 v191 = (v190 - v189) & ((v190 - v189) >> 31);
            WORD5(v1001) = v189 + v191;
            WORD1(v1003) = v190 - v191;
            int v192 = v998[4];
            int v193 = v24[4];
            int v194 = v30[4];
            DWORD2(v1009) = v193 + v192 + v194;
            int v195 = ((v193 - v192) & ((v193 - v192) >> 31)) + v192;
            if (v193 > v192) {
              int v192 = v193;
            }
            WORD6(v1001) = ((v194 - v195) & ((v194 - v195) >> 31)) + v195;
            if (v194 > v192) {
              LOWORD(v192) = v194;
            }
            WORD2(v1003) = v192;
            int v196 = v28[5];
            int v197 = v1000[5];
            HIDWORD(v1009) = v197 + v196;
            __int16 v198 = (v197 - v196) & ((v197 - v196) >> 31);
            HIWORD(v1001) = v196 + v198;
            WORD3(v1003) = v197 - v198;
            int v199 = v998[6];
            int v200 = v24[6];
            int v201 = v30[6];
            LODWORD(v1010) = v200 + v199 + v201;
            int v202 = ((v200 - v199) & ((v200 - v199) >> 31)) + v199;
            if (v200 > v199) {
              int v199 = v200;
            }
            LOWORD(v1002) = ((v201 - v202) & ((v201 - v202) >> 31)) + v202;
            if (v201 > v199) {
              LOWORD(v199) = v201;
            }
            WORD4(v1003) = v199;
            int v203 = v28[7];
            int v204 = v1000[7];
            int v205 = v204 + v203;
            DWORD1(v1010) = v204 + v203;
            __int16 v206 = (v204 - v203) & ((v204 - v203) >> 31);
            WORD1(v1002) = v203 + v206;
            WORD5(v1003) = v204 - v206;
            int v166 = v998[8];
            int v207 = v24[8];
            v169 = v30;
            int v208 = v30[8];
            int v209 = v207 + v166 + v208;
            DWORD2(v1010) = v209;
            int v210 = ((v207 - v166) & ((v207 - v166) >> 31)) + v166;
            if (v207 > v166) {
              int v166 = v207;
            }
            WORD2(v1002) = ((v208 - v210) & ((v208 - v210) >> 31)) + v210;
            if (v208 > v166) {
              LOWORD(v166) = v208;
            }
            WORD6(v1003) = v166;
            v162 = v28;
            int v211 = v28[9];
            __int32 v173 = v1000[9];
            int v212 = v173 + v211;
            HIDWORD(v1010) = v173 + v211;
            int v213 = (v173 - v211) & ((v173 - v211) >> 31);
            if (v173 <= v211) {
              __int32 v173 = v211;
            }
            WORD3(v1002) = v211 + v213;
            HIWORD(v1003) = v173;
            unsigned int v214 = v1009 + v996;
            unsigned int v215 = v1009 + v996 - v136 + DWORD1(v1009);
            int v216 = v215 - v137 + DWORD2(v1009);
            int v217 = v216 - v138 + HIDWORD(v1009);
            v218.i32[0] = v217 - v139 + v1010;
            v218.i32[1] = v218.i32[0] - v1009 + v205;
            v218.i32[2] = v218.i32[1] - DWORD1(v1009) + v209;
            int v996 = v218.i32[2] - DWORD2(v1009) + v212 - HIDWORD(v1009);
            v218.i32[3] = v218.i32[2] - DWORD2(v1009) + v212;
            v219.i64[0] = __PAIR64__(v215, v214);
            v219.i64[1] = __PAIR64__(v217, v216);
            int32x4_t v220 = vmulq_s32(v218, (int32x4_t)xmmword_1DDBFE2F0);
            int32x4_t v221 = vmulq_s32(v219, (int32x4_t)xmmword_1DDBFE2F0);
            *(int16x8_t *)((char *)&v1004[1] + 12) = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(vaddq_s32(v221, (int32x4_t)xmmword_1DDBFE310), vshlq_s32(v221, (int32x4_t)xmmword_1DDBFE300)), 0xCuLL), vaddq_s32(vaddq_s32(v220, (int32x4_t)xmmword_1DDBFE310), vshlq_s32(v220, (int32x4_t)xmmword_1DDBFE300)), 0xCuLL);
          }
          else
          {
            int v140 = v28[2];
            int v141 = v1000[2];
            LODWORD(v1009) = v141 + v140;
            __int16 v142 = (v141 - v140) & ((v141 - v140) >> 31);
            WORD4(v1001) = v140 + v142;
            LOWORD(v1003) = v141 - v142;
            int v143 = v998[3];
            int v144 = v24[3];
            int v145 = v30[3];
            DWORD1(v1009) = v144 + v143 + v145;
            int v146 = ((v144 - v143) & ((v144 - v143) >> 31)) + v143;
            if (v144 > v143) {
              int v143 = v144;
            }
            WORD5(v1001) = ((v145 - v146) & ((v145 - v146) >> 31)) + v146;
            if (v145 > v143) {
              LOWORD(v143) = v145;
            }
            WORD1(v1003) = v143;
            int v147 = v28[4];
            int v148 = v1000[4];
            DWORD2(v1009) = v148 + v147;
            __int16 v149 = (v148 - v147) & ((v148 - v147) >> 31);
            WORD6(v1001) = v147 + v149;
            WORD2(v1003) = v148 - v149;
            int v150 = v998[5];
            int v151 = v24[5];
            int v152 = v30[5];
            HIDWORD(v1009) = v151 + v150 + v152;
            int v153 = ((v151 - v150) & ((v151 - v150) >> 31)) + v150;
            if (v151 > v150) {
              int v150 = v151;
            }
            HIWORD(v1001) = ((v152 - v153) & ((v152 - v153) >> 31)) + v153;
            if (v152 > v150) {
              LOWORD(v150) = v152;
            }
            WORD3(v1003) = v150;
            int v154 = v28[6];
            int v155 = v1000[6];
            LODWORD(v1010) = v155 + v154;
            __int16 v156 = (v155 - v154) & ((v155 - v154) >> 31);
            LOWORD(v1002) = v154 + v156;
            WORD4(v1003) = v155 - v156;
            int v157 = v998[7];
            int v158 = v24[7];
            int v159 = v30[7];
            int v160 = v158 + v157 + v159;
            DWORD1(v1010) = v160;
            int v161 = ((v158 - v157) & ((v158 - v157) >> 31)) + v157;
            if (v158 > v157) {
              int v157 = v158;
            }
            WORD1(v1002) = ((v159 - v161) & ((v159 - v161) >> 31)) + v161;
            if (v159 > v157) {
              LOWORD(v157) = v159;
            }
            WORD5(v1003) = v157;
            v162 = v28;
            int v166 = v28[8];
            int v163 = v1000[8];
            int v164 = v163 + v166;
            DWORD2(v1010) = v163 + v166;
            int v165 = (v163 - v166) & ((v163 - v166) >> 31);
            WORD2(v1002) = v166 + v165;
            LOWORD(v166) = v163 - v165;
            WORD6(v1003) = v163 - v165;
            __int32 v167 = v998[9];
            __int32 v168 = v24[9];
            v169 = v30;
            __int32 v170 = v30[9];
            __int32 v171 = v168 + v167 + v170;
            HIDWORD(v1010) = v171;
            __int32 v172 = ((v168 - v167) & ((v168 - v167) >> 31)) + v167;
            if (v168 > v167) {
              __int32 v167 = v168;
            }
            WORD3(v1002) = ((v170 - v172) & ((v170 - v172) >> 31)) + v172;
            if (v170 <= v167) {
              __int32 v173 = v167;
            }
            else {
              __int32 v173 = v170;
            }
            __int32 v174 = v1009 + v996 - v136 + DWORD1(v1009);
            int v175 = v174 - v137 + DWORD2(v1009);
            int v176 = v175 - v138 + HIDWORD(v1009);
            unsigned int v177 = v176 - v139 + v1010;
            unsigned int v178 = v177 - v1009 + v160;
            unsigned int v179 = v178 - DWORD1(v1009) + v164;
            unsigned int v180 = v179 - DWORD2(v1009) + v171;
            v181.i64[0] = __PAIR64__(v178, v177);
            v181.i64[1] = __PAIR64__(v180, v179);
            HIWORD(v1003) = v173;
            v182.i32[0] = v1009 + v996;
            v182.i32[1] = v174;
            v182.i64[1] = __PAIR64__(v176, v175);
            int v996 = v180 - HIDWORD(v1009);
            int32x4_t v183 = vmulq_s32(v181, (int32x4_t)xmmword_1DDBFE320);
            int32x4_t v184 = vmulq_s32(v182, (int32x4_t)xmmword_1DDBFE320);
            *(int16x8_t *)((char *)&v1004[1] + 12) = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(vaddq_s32(v184, (int32x4_t)xmmword_1DDBFE340), vshlq_s32(v184, (int32x4_t)xmmword_1DDBFE330)), 0xCuLL), vaddq_s32(vaddq_s32(v183, (int32x4_t)xmmword_1DDBFE340), vshlq_s32(v183, (int32x4_t)xmmword_1DDBFE330)), 0xCuLL);
          }
          v222.i16[0] = v1003;
          unsigned int v223 = v134.u16[0];
          v224.i16[0] = WORD4(v1001);
          unsigned int v225 = v135.u16[0];
          unsigned int v226 = v134.u16[2];
          unsigned int v227 = v135.u16[2];
          v228.i16[0] = vdup_lane_s16(v134, 3).u16[0];
          v228.i16[1] = WORD1(v1003);
          v228.i16[2] = WORD3(v1003);
          v228.i16[3] = WORD5(v1003);
          v229.i16[0] = vdup_lane_s16(v135, 3).u16[0];
          v229.i16[1] = *(_WORD *)((unint64_t)&v1001 | 0xA);
          int32x4_t v230 = (int32x4_t)vmovl_u16(v228);
          v229.i16[2] = *(_WORD *)((unint64_t)&v1001 | 0xE);
          v229.i16[3] = WORD1(v1002);
          int8x16_t v231 = (int8x16_t)vmovl_u16(v229);
          v222.i16[1] = WORD2(v1003);
          v222.i16[2] = WORD4(v1003);
          v222.i16[3] = v166;
          int32x4_t v232 = (int32x4_t)vmovl_u16(v222);
          int32x4_t v233 = vmaxq_s32(v232, v230);
          v224.i16[1] = *(_WORD *)((unint64_t)&v1001 | 0xC);
          v224.i16[2] = v1002;
          v224.i16[3] = WORD2(v1002);
          int32x4_t v234 = (int32x4_t)vmovl_u16(v224);
          int32x4_t v235 = (int32x4_t)vaddw_u16((uint32x4_t)vminq_s32((int32x4_t)vsubl_u16(v224, v229), (int32x4_t)0), v229);
          int32x4_t v236 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v233, 0xCuLL);
          v236.i32[0] = v997;
          int32x4_t v237 = vmaxq_s32(v233, v236);
          int32x4_t v238 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v235, 0xCuLL);
          v238.i32[0] = v995;
          int32x4_t v239 = vaddq_s32(vminq_s32(vsubq_s32(v235, v238), (int32x4_t)0), v238);
          int32x4_t v240 = vzip2q_s32(v239, v239);
          v241.i64[0] = __PAIR64__(v230.u32[1], v223);
          v241.i64[1] = __PAIR64__(v230.u32[2], v226);
          int32x4_t v242 = vzip1q_s32(v232, (int32x4_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 0xCuLL));
          v242.i32[3] = v173;
          int32x4_t v243 = vzip1q_s32(v239, v239);
          v244.i64[0] = __PAIR64__(v231.u32[1], v225);
          v244.i64[1] = __PAIR64__(v231.u32[2], v227);
          int32x4_t v245 = vzip1q_s32(v234, (int32x4_t)vextq_s8(v231, v231, 0xCuLL));
          v245.i32[3] = WORD3(v1002);
          *(int16x8_t *)((char *)v1004 + 4) = vuzp1q_s16((int16x8_t)vsubq_s32(vmaxq_s32(v241, vzip1q_s32(v237, v237)), vaddq_s32(v243, vminq_s32(vsubq_s32(v244, v243), (int32x4_t)0))), (int16x8_t)vsubq_s32(vmaxq_s32(v242, vzip2q_s32(v237, v237)), vaddq_s32(v240, vminq_s32(vsubq_s32(v245, v240), (int32x4_t)0))));
          *(void *)((char *)&v1026 + 4) = *(void *)((char *)&v1028 + 4);
          *(void *)((char *)&v1029 + 4) = v1032;
          *((float *)&v1029 + 3) = v1033;
          long long v1034 = v1039;
          uint64_t v1040 = v1047;
          float v1041 = v1048;
          v246 = v162;
          if (v999)
          {
            unsigned int v337 = v162[1];
            v248 = v1000;
            unsigned int v338 = v1000[1];
            unsigned int v339 = v998[2];
            unsigned int v340 = v24[2];
            unsigned int v341 = v169[2];
            float v342 = (float)((float)v339 - (float)*v998) * *(float *)(v14 + 4 * (v339 + *v998));
            float v343 = (float)((float)v340 - (float)*v24) * *(float *)(v14 + 4 * (v340 + *v24));
            float v344 = (float)((float)v341 - (float)*v169) * *(float *)(v14 + 4 * (v341 + *v169));
            *((float *)&v1026 + 3) = (float)((float)(v343 * v343) + (float)(v342 * v342)) + (float)(v344 * v344);
            float v345 = (float)((float)v339 - (float)v337) * *(float *)(v14 + 4 * (v339 + v337));
            float v346 = (float)((float)v340 - (float)v338) * *(float *)(v14 + 4 * (v340 + v338));
            *(float *)&long long v1030 = (float)(v346 * v346) + (float)(v345 * v345);
            float v347 = (float)((float)v339 - (float)v340) * *(float *)(v14 + 4 * (v340 + v339));
            float v348 = (float)((float)v340 - (float)v341) * *(float *)(v14 + 4 * (v341 + v340));
            float v1035 = (float)(v348 * v348) + (float)(v347 * v347);
            float v349 = (float)((float)v337 - (float)v340) * *(float *)(v14 + 4 * (v340 + v337));
            float v350 = (float)((float)v338 - (float)v341) * *(float *)(v14 + 4 * (v341 + v338));
            float v1042 = (float)(v350 * v350) + (float)(v349 * v349);
            unsigned int v351 = v246[3];
            unsigned int v352 = v1000[3];
            float v353 = (float)((float)v351 - (float)v337) * *(float *)(v14 + 4 * (v351 + v337));
            float v354 = (float)((float)v352 - (float)v338) * *(float *)(v14 + 4 * (v352 + v338));
            *(float *)&long long v1027 = (float)(v354 * v354) + (float)(v353 * v353);
            float v355 = (float)((float)v351 - (float)v340) * *(float *)(v14 + 4 * (v351 + v340));
            float v356 = (float)((float)v352 - (float)v341) * *(float *)(v14 + 4 * (v352 + v341));
            *((float *)&v1030 + 1) = (float)(v356 * v356) + (float)(v355 * v355);
            float v357 = (float)((float)v351 - (float)v352) * *(float *)(v14 + 4 * (v352 + v351));
            float v1036 = v357 * v357;
            float v358 = (float)((float)v339 - (float)v351) * *(float *)(v14 + 4 * (v351 + v339));
            float v359 = (float)((float)v340 - (float)v352) * *(float *)(v14 + 4 * (v352 + v340));
            float v1043 = (float)(v359 * v359) + (float)(v358 * v358);
            unsigned int v360 = v998[4];
            unsigned int v361 = v24[4];
            unsigned int v362 = v169[4];
            float v363 = (float)((float)v360 - (float)v339) * *(float *)(v14 + 4 * (v360 + v339));
            float v364 = (float)((float)v361 - (float)v340) * *(float *)(v14 + 4 * (v361 + v340));
            float v365 = (float)((float)v362 - (float)v341) * *(float *)(v14 + 4 * (v362 + v341));
            *((float *)&v1027 + 1) = (float)((float)(v364 * v364) + (float)(v363 * v363)) + (float)(v365 * v365);
            float v366 = (float)((float)v360 - (float)v351) * *(float *)(v14 + 4 * (v360 + v351));
            float v367 = (float)((float)v361 - (float)v352) * *(float *)(v14 + 4 * (v361 + v352));
            *((float *)&v1030 + 2) = (float)(v367 * v367) + (float)(v366 * v366);
            float v368 = (float)((float)v360 - (float)v361) * *(float *)(v14 + 4 * (v361 + v360));
            float v369 = (float)((float)v361 - (float)v362) * *(float *)(v14 + 4 * (v362 + v361));
            float v1037 = (float)(v369 * v369) + (float)(v368 * v368);
            float v370 = (float)((float)v351 - (float)v361) * *(float *)(v14 + 4 * (v361 + v351));
            float v371 = (float)((float)v352 - (float)v362) * *(float *)(v14 + 4 * (v362 + v352));
            float v1044 = (float)(v371 * v371) + (float)(v370 * v370);
            unsigned int v372 = v246[5];
            unsigned int v373 = v1000[5];
            float v374 = (float)((float)v372 - (float)v351) * *(float *)(v14 + 4 * (v372 + v351));
            float v375 = (float)((float)v373 - (float)v352) * *(float *)(v14 + 4 * (v373 + v352));
            *((float *)&v1027 + 2) = (float)(v375 * v375) + (float)(v374 * v374);
            float v376 = (float)((float)v372 - (float)v361) * *(float *)(v14 + 4 * (v372 + v361));
            float v377 = (float)((float)v373 - (float)v362) * *(float *)(v14 + 4 * (v373 + v362));
            *((float *)&v1030 + 3) = (float)(v377 * v377) + (float)(v376 * v376);
            float v378 = (float)((float)v372 - (float)v373) * *(float *)(v14 + 4 * (v373 + v372));
            float v1038 = v378 * v378;
            float v379 = (float)((float)v360 - (float)v372) * *(float *)(v14 + 4 * (v372 + v360));
            float v380 = (float)((float)v361 - (float)v373) * *(float *)(v14 + 4 * (v373 + v361));
            float v1045 = (float)(v380 * v380) + (float)(v379 * v379);
            unsigned int v381 = v998[6];
            unsigned int v382 = v24[6];
            unsigned int v383 = v169[6];
            float v384 = (float)((float)v381 - (float)v360) * *(float *)(v14 + 4 * (v381 + v360));
            float v385 = (float)((float)v382 - (float)v361) * *(float *)(v14 + 4 * (v382 + v361));
            float v386 = (float)((float)v383 - (float)v362) * *(float *)(v14 + 4 * (v383 + v362));
            *((float *)&v1027 + 3) = (float)((float)(v385 * v385) + (float)(v384 * v384)) + (float)(v386 * v386);
            float v387 = (float)((float)v381 - (float)v372) * *(float *)(v14 + 4 * (v381 + v372));
            float v388 = (float)((float)v382 - (float)v373) * *(float *)(v14 + 4 * (v382 + v373));
            float v1031 = (float)(v388 * v388) + (float)(v387 * v387);
            float v389 = (float)((float)v381 - (float)v382) * *(float *)(v14 + 4 * (v382 + v381));
            float v390 = (float)((float)v382 - (float)v383) * *(float *)(v14 + 4 * (v383 + v382));
            *(float *)&long long v1039 = (float)(v390 * v390) + (float)(v389 * v389);
            float v391 = (float)((float)v372 - (float)v382) * *(float *)(v14 + 4 * (v382 + v372));
            float v392 = (float)((float)v373 - (float)v383) * *(float *)(v14 + 4 * (v383 + v373));
            float v1046 = (float)(v392 * v392) + (float)(v391 * v391);
            unsigned int v393 = v246[7];
            unsigned int v394 = v1000[7];
            float v395 = (float)((float)v393 - (float)v372) * *(float *)(v14 + 4 * (v393 + v372));
            float v396 = (float)((float)v394 - (float)v373) * *(float *)(v14 + 4 * (v394 + v373));
            *(float *)&long long v1028 = (float)(v396 * v396) + (float)(v395 * v395);
            float v397 = (float)((float)v393 - (float)v382) * *(float *)(v14 + 4 * (v393 + v382));
            float v398 = (float)((float)v394 - (float)v383) * *(float *)(v14 + 4 * (v394 + v383));
            *(float *)&uint64_t v1032 = (float)(v398 * v398) + (float)(v397 * v397);
            float v399 = (float)((float)v393 - (float)v394) * *(float *)(v14 + 4 * (v394 + v393));
            *((float *)&v1039 + 1) = v399 * v399;
            float v400 = (float)((float)v381 - (float)v393) * *(float *)(v14 + 4 * (v393 + v381));
            float v401 = (float)((float)v382 - (float)v394) * *(float *)(v14 + 4 * (v394 + v382));
            *(float *)&uint64_t v1047 = (float)(v401 * v401) + (float)(v400 * v400);
            unsigned int v402 = v998[8];
            unsigned int v403 = v24[8];
            unsigned int v404 = v169[8];
            float v405 = (float)((float)v402 - (float)v381) * *(float *)(v14 + 4 * (v402 + v381));
            float v406 = (float)((float)v403 - (float)v382) * *(float *)(v14 + 4 * (v403 + v382));
            float v407 = *(float *)(v14 + 4 * (v404 + v383));
            *((float *)&v1028 + 1) = (float)((float)(v406 * v406) + (float)(v405 * v405))
                                   + (float)((float)((float)((float)v404 - (float)v383) * v407)
                                           * (float)((float)((float)v404 - (float)v383) * v407));
            float v408 = (float)((float)v402 - (float)v393) * *(float *)(v14 + 4 * (v402 + v393));
            float v409 = (float)((float)v403 - (float)v394) * *(float *)(v14 + 4 * (v403 + v394));
            *((float *)&v1032 + 1) = (float)(v409 * v409) + (float)(v408 * v408);
            float v410 = (float)((float)v402 - (float)v403) * *(float *)(v14 + 4 * (v403 + v402));
            float v411 = (float)((float)v403 - (float)v404) * *(float *)(v14 + 4 * (v404 + v403));
            *((float *)&v1039 + 2) = (float)(v411 * v411) + (float)(v410 * v410);
            float v412 = (float)((float)v393 - (float)v403) * *(float *)(v14 + 4 * (v403 + v393));
            float v413 = (float)((float)v394 - (float)v404) * *(float *)(v14 + 4 * (v404 + v394));
            *((float *)&v1047 + 1) = (float)(v413 * v413) + (float)(v412 * v412);
            unsigned int v414 = v246[9];
            unsigned int v415 = v1000[9];
            float v416 = (float)((float)v414 - (float)v393) * *(float *)(v14 + 4 * (v414 + v393));
            float v417 = (float)((float)v415 - (float)v394) * *(float *)(v14 + 4 * (v415 + v394));
            *((float *)&v1028 + 2) = (float)(v417 * v417) + (float)(v416 * v416);
            float v418 = (float)((float)v414 - (float)v403) * *(float *)(v14 + 4 * (v414 + v403));
            float v419 = (float)((float)v415 - (float)v404) * *(float *)(v14 + 4 * (v415 + v404));
            float v1033 = (float)(v419 * v419) + (float)(v418 * v418);
            float v420 = *(float *)(v14 + 4 * (v415 + v414));
            *((float *)&v1039 + 3) = (float)((float)((float)v414 - (float)v415) * v420)
                                   * (float)((float)((float)v414 - (float)v415) * v420);
            float v334 = (float)((float)v402 - (float)v414) * *(float *)(v14 + 4 * (v414 + v402));
            float v335 = (float)v403 - (float)v415;
            unsigned int v336 = v415 + v403;
          }
          else
          {
            unsigned int v247 = *v162;
            v248 = v1000;
            unsigned int v249 = v998[1];
            unsigned int v250 = v24[1];
            unsigned int v251 = v169[1];
            unsigned int v252 = v246[2];
            unsigned int v253 = v1000[2];
            float v254 = (float)((float)v252 - (float)v247) * *(float *)(v14 + 4 * (v252 + v247));
            float v255 = (float)((float)v253 - (float)*v1000) * *(float *)(v14 + 4 * (v253 + *v1000));
            *((float *)&v1026 + 3) = (float)(v255 * v255) + (float)(v254 * v254);
            float v256 = (float)((float)v252 - (float)v250) * *(float *)(v14 + 4 * (v252 + v250));
            float v257 = (float)((float)v253 - (float)v251) * *(float *)(v14 + 4 * (v253 + v251));
            *(float *)&long long v1030 = (float)(v257 * v257) + (float)(v256 * v256);
            float v258 = (float)((float)v253 - (float)v252) * *(float *)(v14 + 4 * (v253 + v252));
            float v1035 = v258 * v258;
            float v259 = (float)((float)v252 - (float)v249) * *(float *)(v14 + 4 * (v252 + v249));
            float v260 = (float)((float)v253 - (float)v250) * *(float *)(v14 + 4 * (v253 + v250));
            float v1042 = (float)(v260 * v260) + (float)(v259 * v259);
            unsigned int v261 = v998[3];
            unsigned int v262 = v24[3];
            unsigned int v263 = v169[3];
            float v264 = (float)((float)v261 - (float)v249) * *(float *)(v14 + 4 * (v261 + v249));
            float v265 = (float)((float)v262 - (float)v250) * *(float *)(v14 + 4 * (v262 + v250));
            float v266 = (float)((float)v263 - (float)v251) * *(float *)(v14 + 4 * (v263 + v251));
            *(float *)&long long v1027 = (float)((float)(v265 * v265) + (float)(v264 * v264)) + (float)(v266 * v266);
            float v267 = (float)((float)v261 - (float)v252) * *(float *)(v14 + 4 * (v261 + v252));
            float v268 = (float)((float)v262 - (float)v253) * *(float *)(v14 + 4 * (v262 + v253));
            *((float *)&v1030 + 1) = (float)(v268 * v268) + (float)(v267 * v267);
            float v269 = (float)((float)v262 - (float)v261) * *(float *)(v14 + 4 * (v262 + v261));
            float v270 = (float)((float)v263 - (float)v262) * *(float *)(v14 + 4 * (v263 + v262));
            float v1036 = (float)(v270 * v270) + (float)(v269 * v269);
            float v271 = (float)((float)v262 - (float)v252) * *(float *)(v14 + 4 * (v262 + v252));
            float v272 = (float)((float)v263 - (float)v253) * *(float *)(v14 + 4 * (v263 + v253));
            float v1043 = (float)(v272 * v272) + (float)(v271 * v271);
            unsigned int v273 = v246[4];
            unsigned int v274 = v1000[4];
            float v275 = (float)((float)v273 - (float)v252) * *(float *)(v14 + 4 * (v273 + v252));
            float v276 = (float)((float)v274 - (float)v253) * *(float *)(v14 + 4 * (v274 + v253));
            *((float *)&v1027 + 1) = (float)(v276 * v276) + (float)(v275 * v275);
            float v277 = (float)((float)v273 - (float)v262) * *(float *)(v14 + 4 * (v273 + v262));
            float v278 = (float)((float)v274 - (float)v263) * *(float *)(v14 + 4 * (v274 + v263));
            *((float *)&v1030 + 2) = (float)(v278 * v278) + (float)(v277 * v277);
            float v279 = (float)((float)v274 - (float)v273) * *(float *)(v14 + 4 * (v274 + v273));
            float v1037 = v279 * v279;
            float v280 = (float)((float)v273 - (float)v261) * *(float *)(v14 + 4 * (v273 + v261));
            float v281 = (float)((float)v274 - (float)v262) * *(float *)(v14 + 4 * (v274 + v262));
            float v1044 = (float)(v281 * v281) + (float)(v280 * v280);
            unsigned int v282 = v998[5];
            unsigned int v283 = v24[5];
            unsigned int v284 = v169[5];
            float v285 = (float)((float)v282 - (float)v261) * *(float *)(v14 + 4 * (v282 + v261));
            float v286 = (float)((float)v283 - (float)v262) * *(float *)(v14 + 4 * (v283 + v262));
            float v287 = (float)((float)v284 - (float)v263) * *(float *)(v14 + 4 * (v284 + v263));
            *((float *)&v1027 + 2) = (float)((float)(v286 * v286) + (float)(v285 * v285)) + (float)(v287 * v287);
            float v288 = (float)((float)v282 - (float)v273) * *(float *)(v14 + 4 * (v282 + v273));
            float v289 = (float)((float)v283 - (float)v274) * *(float *)(v14 + 4 * (v283 + v274));
            *((float *)&v1030 + 3) = (float)(v289 * v289) + (float)(v288 * v288);
            float v290 = (float)((float)v283 - (float)v282) * *(float *)(v14 + 4 * (v283 + v282));
            float v291 = (float)((float)v284 - (float)v283) * *(float *)(v14 + 4 * (v284 + v283));
            float v1038 = (float)(v291 * v291) + (float)(v290 * v290);
            float v292 = (float)((float)v283 - (float)v273) * *(float *)(v14 + 4 * (v283 + v273));
            float v293 = (float)((float)v284 - (float)v274) * *(float *)(v14 + 4 * (v284 + v274));
            float v1045 = (float)(v293 * v293) + (float)(v292 * v292);
            unsigned int v294 = v246[6];
            unsigned int v295 = v1000[6];
            float v296 = (float)((float)v294 - (float)v273) * *(float *)(v14 + 4 * (v294 + v273));
            float v297 = (float)((float)v295 - (float)v274) * *(float *)(v14 + 4 * (v295 + v274));
            *((float *)&v1027 + 3) = (float)(v297 * v297) + (float)(v296 * v296);
            float v298 = (float)((float)v294 - (float)v283) * *(float *)(v14 + 4 * (v294 + v283));
            float v299 = (float)((float)v295 - (float)v284) * *(float *)(v14 + 4 * (v295 + v284));
            float v1031 = (float)(v299 * v299) + (float)(v298 * v298);
            float v300 = (float)((float)v295 - (float)v294) * *(float *)(v14 + 4 * (v295 + v294));
            *(float *)&long long v1039 = v300 * v300;
            float v301 = (float)((float)v294 - (float)v282) * *(float *)(v14 + 4 * (v294 + v282));
            float v302 = (float)((float)v295 - (float)v283) * *(float *)(v14 + 4 * (v295 + v283));
            float v1046 = (float)(v302 * v302) + (float)(v301 * v301);
            unsigned int v303 = v998[7];
            unsigned int v304 = v24[7];
            unsigned int v305 = v169[7];
            float v306 = (float)((float)v303 - (float)v282) * *(float *)(v14 + 4 * (v303 + v282));
            float v307 = (float)((float)v304 - (float)v283) * *(float *)(v14 + 4 * (v304 + v283));
            float v308 = (float)((float)v305 - (float)v284) * *(float *)(v14 + 4 * (v305 + v284));
            *(float *)&long long v1028 = (float)((float)(v307 * v307) + (float)(v306 * v306)) + (float)(v308 * v308);
            float v309 = (float)((float)v303 - (float)v294) * *(float *)(v14 + 4 * (v303 + v294));
            float v310 = (float)((float)v304 - (float)v295) * *(float *)(v14 + 4 * (v304 + v295));
            *(float *)&uint64_t v1032 = (float)(v310 * v310) + (float)(v309 * v309);
            float v311 = (float)((float)v304 - (float)v303) * *(float *)(v14 + 4 * (v304 + v303));
            float v312 = (float)((float)v305 - (float)v304) * *(float *)(v14 + 4 * (v305 + v304));
            *((float *)&v1039 + 1) = (float)(v312 * v312) + (float)(v311 * v311);
            float v313 = (float)((float)v304 - (float)v294) * *(float *)(v14 + 4 * (v304 + v294));
            float v314 = (float)((float)v305 - (float)v295) * *(float *)(v14 + 4 * (v305 + v295));
            *(float *)&uint64_t v1047 = (float)(v314 * v314) + (float)(v313 * v313);
            unsigned int v315 = v246[8];
            unsigned int v316 = v1000[8];
            float v317 = (float)((float)v315 - (float)v294) * *(float *)(v14 + 4 * (v315 + v294));
            float v318 = (float)((float)v316 - (float)v295) * *(float *)(v14 + 4 * (v316 + v295));
            *((float *)&v1028 + 1) = (float)(v318 * v318) + (float)(v317 * v317);
            float v319 = (float)((float)v315 - (float)v304) * *(float *)(v14 + 4 * (v315 + v304));
            float v320 = (float)((float)v316 - (float)v305) * *(float *)(v14 + 4 * (v316 + v305));
            *((float *)&v1032 + 1) = (float)(v320 * v320) + (float)(v319 * v319);
            float v321 = (float)((float)v316 - (float)v315) * *(float *)(v14 + 4 * (v316 + v315));
            *((float *)&v1039 + 2) = v321 * v321;
            float v322 = (float)((float)v315 - (float)v303) * *(float *)(v14 + 4 * (v315 + v303));
            float v323 = (float)((float)v316 - (float)v304) * *(float *)(v14 + 4 * (v316 + v304));
            *((float *)&v1047 + 1) = (float)(v323 * v323) + (float)(v322 * v322);
            unsigned int v324 = v998[9];
            unsigned int v325 = v24[9];
            unsigned int v326 = v169[9];
            float v327 = (float)((float)v324 - (float)v303) * *(float *)(v14 + 4 * (v324 + v303));
            float v328 = (float)((float)v325 - (float)v304) * *(float *)(v14 + 4 * (v325 + v304));
            float v329 = *(float *)(v14 + 4 * (v326 + v305));
            *((float *)&v1028 + 2) = (float)((float)(v328 * v328) + (float)(v327 * v327))
                                   + (float)((float)((float)((float)v326 - (float)v305) * v329)
                                           * (float)((float)((float)v326 - (float)v305) * v329));
            float v330 = (float)((float)v324 - (float)v315) * *(float *)(v14 + 4 * (v324 + v315));
            float v331 = (float)((float)v325 - (float)v316) * *(float *)(v14 + 4 * (v325 + v316));
            float v1033 = (float)(v331 * v331) + (float)(v330 * v330);
            float v332 = (float)((float)v325 - (float)v324) * *(float *)(v14 + 4 * (v325 + v324));
            float v333 = *(float *)(v14 + 4 * (v326 + v325));
            *((float *)&v1039 + 3) = (float)((float)((float)((float)v326 - (float)v325) * v333)
                                           * (float)((float)((float)v326 - (float)v325) * v333))
                                   + (float)(v332 * v332);
            float v334 = (float)((float)v325 - (float)v315) * *(float *)(v14 + 4 * (v325 + v315));
            float v335 = (float)v326 - (float)v316;
            unsigned int v336 = v326 + v316;
          }
          float v1048 = (float)((float)(v335 * *(float *)(v14 + 4 * v336)) * (float)(v335 * *(float *)(v14 + 4 * v336)))
                + (float)(v334 * v334);
          v24 += 8;
          int v421 = WORD4(v1011);
          v993 = v169 + 8;
          v994 = v246 + 8;
          LODWORD(v1011) = DWORD2(v1011);
          int v422 = (unsigned __int16)v1013;
          DWORD2(v1012) = v1013;
          int v423 = WORD5(v1011);
          int v424 = WORD1(v1013);
          int v425 = WORD6(v1011);
          WORD2(v1011) = WORD6(v1011);
          int v426 = WORD2(v1013);
          WORD6(v1012) = WORD2(v1013);
          DWORD2(v1015) = v1016;
          LODWORD(v1017) = DWORD2(v1017);
          int v427 = WORD5(v1017);
          int v428 = WORD2(v1016);
          WORD6(v1015) = WORD2(v1016);
          int v429 = WORD6(v1017);
          WORD2(v1017) = WORD6(v1017);
          unint64_t v2 = v992;
          v998 += 8;
          v1000 = v248 + 8;
          __int32 v997 = v233.i32[3];
          int v995 = v235.i32[3];
          int v988 = WORD4(v1017);
          int v989 = WORD1(v1016);
          int v990 = (unsigned __int16)v1016;
          v991 = v24;
          switch(WORD2(v1005))
          {
            case 0:
              v430 = &v130[v984];
              v431 = &v130[v986];
              v432 = &v130[v982];
              int v433 = v130[v982 + 2] + v130[v986 + 2];
              int v434 = v130[v984 + 4] + v130[4];
              int v435 = v130[v986 + 6];
              int v436 = v130[v982 + 6];
              DWORD2(v1020) = v433 + v130[2 * v987] + *v130 + v434 + v436 + v435;
              HIDWORD(v1023) = v433 + v434 + v436 + v435;
              LODWORD(v1024) = HIDWORD(v1023) + v130[8] + v130[v984 + 8];
              DWORD1(v1021) = v1024 - v433;
              DWORD2(v1021) = v1024 - v433 + v130[v986 + 10] + v130[v982 + 10];
              HIDWORD(v1024) = DWORD2(v1021) - v434;
              LODWORD(v1025) = DWORD2(v1021) - v434 + v130[12] + v130[v984 + 12];
              DWORD1(v1022) = v1025 - (v436 + v435);
              int v437 = (v436 - v435) & ((v436 - v435) >> 31);
              LOWORD(v438) = v435 + v437;
              WORD3(v1011) = v435 + v437;
              HIWORD(v1012) = v436 - v437;
              int v439 = v130[v984 + 8];
              int v440 = v130[8];
              int v442 = (v439 - v440) & ((v439 - v440) >> 31);
              unsigned __int16 v441 = v440 + v442;
              WORD4(v1011) = v441;
              LOWORD(v442) = v439 - v442;
              LOWORD(v1013) = v442;
              int v443 = v130[v982 + 10];
              int v444 = v130[v986 + 10];
              int v445 = (v443 - v444) & ((v443 - v444) >> 31);
              unsigned __int16 v446 = v444 + v445;
              WORD5(v1011) = v444 + v445;
              unsigned __int16 v447 = v443 - v445;
              WORD1(v1013) = v443 - v445;
              int v448 = v130[v984 + 12];
              int v449 = v130[12];
              int v450 = (v448 - v449) & ((v448 - v449) >> 31);
              unsigned __int16 v451 = v449 + v450;
              WORD6(v1011) = v451;
              unsigned __int16 v452 = v448 - v450;
              WORD2(v1013) = v452;
              int v453 = HIWORD(v1012);
              if (HIWORD(v1012) <= v426) {
                int v454 = v426;
              }
              else {
                int v454 = HIWORD(v1012);
              }
              if (v454 > v424) {
                int v424 = v454;
              }
              if (v424 > v422) {
                LOWORD(v422) = v424;
              }
              int v442 = (unsigned __int16)v442;
              if ((unsigned __int16)v442 <= v424) {
                __int16 v455 = v424;
              }
              else {
                __int16 v455 = v442;
              }
              if ((unsigned __int16)v442 > v454) {
                LOWORD(v454) = v442;
              }
              if (v447 > (int)(unsigned __int16)v442) {
                int v442 = v447;
              }
              if (v442 > HIWORD(v1012)) {
                int v453 = v442;
              }
              if (v453 > v426) {
                LOWORD(v426) = v453;
              }
              int v456 = v452;
              if (v452 <= v453) {
                unsigned __int16 v452 = v453;
              }
              if (v456 > v442) {
                LOWORD(v442) = v456;
              }
              int v438 = (unsigned __int16)v438;
              int v457 = ((v438 - v425) & ((v438 - v425) >> 31)) + v425;
              int v458 = ((v457 - v423) & ((v457 - v423) >> 31)) + v423;
              WORD2(v1014) = v422 - v421 - ((v458 - v421) & ((v458 - v421) >> 31));
              HIWORD(v1018) = v424 - v458;
              LOWORD(v1019) = v455 - v458 - ((v441 - v458) & ((v441 - v458) >> 31));
              WORD5(v1014) = v454
                           - (((v438 - v425) & (((unsigned __int16)v438 - v425) >> 31))
                            + v425)
                           - ((v441 - v457) & ((v441 - v457) >> 31));
              int v459 = ((v446 - v441) & ((v446 - v441) >> 31)) + v441;
              int v460 = ((v459 - v438) & ((v459 - v438) >> 31)) + v438;
              WORD6(v1014) = v426 - v425 - ((v460 - v425) & ((v460 - v425) >> 31));
              WORD3(v1019) = v453 - v460;
              WORD4(v1019) = v452 - v460 - ((v451 - v460) & ((v451 - v460) >> 31));
              WORD1(v1015) = v442
                           - (((v446 - v441) & ((v446 - v441) >> 31))
                            + v441)
                           - ((v451 - v459) & ((v451 - v459) >> 31));
              int v461 = v430[2] + v130[2];
              int v465 = v432[4] + v431[4];
              int v462 = v130[6];
              int v463 = v430[6];
              DWORD2(v1023) = v461 + *v432 + *v431 + v465 + v463 + v462;
              HIDWORD(v1020) = v461 + v465 + v463 + v462;
              LODWORD(v1021) = HIDWORD(v1020) + v431[8] + v432[8];
              DWORD1(v1024) = v1021 - v461;
              DWORD2(v1024) = v1021 - v461 + v130[10] + v430[10];
              HIDWORD(v1021) = DWORD2(v1024) - v465;
              LODWORD(v1022) = DWORD2(v1024) - v465 + v431[12] + v432[12];
              DWORD1(v1025) = v1022 - (v463 + v462);
              int v464 = (v463 - v462) & ((v463 - v462) >> 31);
              LOWORD(v465) = v462 + v464;
              HIWORD(v1015) = v462 + v464;
              WORD3(v1017) = v463 - v464;
              int v466 = v432[8];
              int v468 = v431[8];
              int v467 = (v466 - v468) & ((v466 - v468) >> 31);
              LOWORD(v468) = v468 + v467;
              LOWORD(v1016) = v468;
              unsigned __int16 v469 = v466 - v467;
              WORD4(v1017) = v469;
              int v470 = v430[10];
              int v471 = v130[10];
              int v472 = (v470 - v471) & ((v470 - v471) >> 31);
              unsigned __int16 v473 = v471 + v472;
              unsigned __int16 v474 = v470 - v472;
              WORD1(v1016) = v473;
              WORD5(v1017) = v474;
              int v475 = v432[12];
              int v476 = v431[12];
              int v477 = (v475 - v476) & ((v475 - v476) >> 31);
              unsigned __int16 v478 = v476 + v477;
              unsigned __int16 v479 = v475 - v477;
              int v480 = WORD3(v1017);
              if (WORD3(v1017) <= (int)WORD6(v1017)) {
                int v481 = WORD6(v1017);
              }
              else {
                int v481 = WORD3(v1017);
              }
              WORD2(v1016) = v478;
              if (v481 <= v427) {
                int v482 = v427;
              }
              else {
                int v482 = v481;
              }
              WORD6(v1017) = v479;
              if (v482 <= v988) {
                __int16 v483 = v988;
              }
              else {
                __int16 v483 = v482;
              }
              int v484 = v469;
              if (v469 <= v482) {
                unsigned __int16 v469 = v482;
              }
              if (v484 > v481) {
                LOWORD(v481) = v484;
              }
              if (v474 > v484) {
                int v484 = v474;
              }
              if (v484 > WORD3(v1017)) {
                int v480 = v484;
              }
              if (v480 > v429) {
                LOWORD(v429) = v480;
              }
              if (v479 <= v480) {
                __int16 v485 = v480;
              }
              else {
                __int16 v485 = v479;
              }
              if (v479 > v484) {
                LOWORD(v484) = v479;
              }
              int v465 = (unsigned __int16)v465;
              int v486 = ((v465 - v428) & ((v465 - v428) >> 31)) + v428;
              int v487 = ((v486 - v989) & ((v486 - v989) >> 31)) + v989;
              WORD6(v1018) = v483 - v990 - ((v487 - v990) & ((v487 - v990) >> 31));
              WORD3(v1014) = v482 - (((v486 - v989) & ((v486 - v989) >> 31)) + v989);
              int v468 = (unsigned __int16)v468;
              WORD4(v1014) = v469
                           - (((v486 - v989) & ((v486 - v989) >> 31))
                            + v989)
                           - ((v468 - v487) & (((unsigned __int16)v468 - v487) >> 31));
              WORD1(v1019) = v481 - v486 - ((v468 - v486) & (((unsigned __int16)v468 - v486) >> 31));
              int v488 = ((v473 - v468) & ((v473 - v468) >> 31)) + v468;
              int v489 = ((v488 - v465) & ((v488 - v465) >> 31)) + v465;
              WORD2(v1019) = v429 - v428 - ((v489 - v428) & ((v489 - v428) >> 31));
              HIWORD(v1014) = v480 - v489;
              LOWORD(v1015) = v485 - v489 - ((v478 - v489) & ((v478 - v489) >> 31));
              int v490 = v478 - v488;
              v491 = (char *)&v1019 + 10;
              goto LABEL_288;
            case 1:
              v492 = (unsigned __int16 *)((char *)v130 + v987);
              v493 = (unsigned __int16 *)((char *)v130 + v983);
              v494 = (unsigned __int16 *)((char *)v130 + v985);
              int v495 = *(unsigned __int16 *)((char *)v130 + v985 + 4);
              int v496 = *(unsigned __int16 *)((char *)v130 + v983 + 8) + *(unsigned __int16 *)((char *)v130 + v987 + 8);
              int v497 = *(unsigned __int16 *)((char *)v130 + v985 + 12);
              DWORD2(v1020) = *(unsigned __int16 *)((char *)v130 + 5 * v987)
                            + *(unsigned __int16 *)((char *)v130 + v987)
                            + v495
                            + v496
                            + v497;
              HIDWORD(v1023) = v495 + v496 + v497;
              LODWORD(v1024) = HIDWORD(v1023)
                             + *(unsigned __int16 *)((char *)v130 + v987 + 16)
                             + *(unsigned __int16 *)((char *)v130 + v983 + 16);
              DWORD1(v1021) = v1024 - v495;
              DWORD2(v1021) = v1024 - v495 + *(unsigned __int16 *)((char *)v130 + v985 + 20);
              HIDWORD(v1024) = DWORD2(v1021) - v496;
              LODWORD(v1025) = DWORD2(v1021)
                             - v496
                             + *(unsigned __int16 *)((char *)v130 + v987 + 24)
                             + *(unsigned __int16 *)((char *)v130 + v983 + 24);
              DWORD1(v1022) = v1025 - v497;
              WORD3(v1011) = v497;
              HIWORD(v1012) = v497;
              int v501 = *(unsigned __int16 *)((char *)v130 + v983 + 16);
              int v498 = *(unsigned __int16 *)((char *)v130 + v987 + 16);
              int v499 = (v501 - v498) & ((v501 - v498) >> 31);
              unsigned __int16 v500 = v498 + v499;
              WORD4(v1011) = v500;
              LOWORD(v501) = v501 - v499;
              LOWORD(v1013) = v501;
              int v502 = *(unsigned __int16 *)((char *)v130 + v985 + 20);
              WORD5(v1011) = v502;
              WORD1(v1013) = v502;
              int v503 = *(unsigned __int16 *)((char *)v130 + v983 + 24);
              int v504 = *(unsigned __int16 *)((char *)v130 + v987 + 24);
              int v505 = (v503 - v504) & ((v503 - v504) >> 31);
              unsigned __int16 v506 = v504 + v505;
              WORD6(v1011) = v506;
              unsigned __int16 v507 = v503 - v505;
              WORD2(v1013) = v507;
              if (v497 <= v426) {
                int v508 = v426;
              }
              else {
                int v508 = v497;
              }
              if (v508 > v424) {
                int v424 = v508;
              }
              if (v424 > v422) {
                LOWORD(v422) = v424;
              }
              int v501 = (unsigned __int16)v501;
              if ((unsigned __int16)v501 <= v424) {
                __int16 v509 = v424;
              }
              else {
                __int16 v509 = v501;
              }
              if ((unsigned __int16)v501 > v508) {
                LOWORD(v508) = v501;
              }
              if (v502 > (unsigned __int16)v501) {
                int v501 = v502;
              }
              if (v501 <= v497) {
                int v510 = v497;
              }
              else {
                int v510 = v501;
              }
              if (v510 > v426) {
                LOWORD(v426) = v510;
              }
              if (v507 <= v510) {
                __int16 v511 = v510;
              }
              else {
                __int16 v511 = v507;
              }
              if (v507 > v501) {
                LOWORD(v501) = v507;
              }
              int v512 = ((v497 - v425) & ((v497 - v425) >> 31)) + v425;
              int v513 = ((v512 - v423) & ((v512 - v423) >> 31)) + v423;
              WORD2(v1014) = v422 - v421 - ((v513 - v421) & ((v513 - v421) >> 31));
              HIWORD(v1018) = v424 - v513;
              LOWORD(v1019) = v509 - v513 - ((v500 - v513) & ((v500 - v513) >> 31));
              WORD5(v1014) = v508 - v512 - ((v500 - v512) & ((v500 - v512) >> 31));
              int v514 = ((v502 - v500) & ((v502 - v500) >> 31)) + v500;
              int v515 = ((v514 - v497) & ((v514 - v497) >> 31)) + v497;
              WORD6(v1014) = v426 - v425 - ((v515 - v425) & ((v515 - v425) >> 31));
              WORD3(v1019) = v510 - v515;
              WORD4(v1019) = v511 - v515 - ((v506 - v515) & ((v506 - v515) >> 31));
              WORD1(v1015) = v501
                           - (((v502 - v500) & ((v502 - v500) >> 31))
                            + v500)
                           - ((v506 - v514) & ((v506 - v514) >> 31));
              int v516 = v493[2] + v492[2];
              int v520 = v494[4];
              int v517 = v492[6];
              int v518 = v493[6];
              DWORD2(v1023) = v516 + *v494 + v520 + v518 + v517;
              HIDWORD(v1020) = v516 + v520 + v518 + v517;
              LODWORD(v1021) = HIDWORD(v1020) + v494[8];
              DWORD1(v1024) = v1021 - v516;
              DWORD2(v1024) = v1021 - v516 + v492[10] + v493[10];
              HIDWORD(v1021) = DWORD2(v1024) - v520;
              LODWORD(v1022) = DWORD2(v1024) - v520 + v494[12];
              DWORD1(v1025) = v1022 - (v518 + v517);
              int v519 = (v518 - v517) & ((v518 - v517) >> 31);
              LOWORD(v520) = v517 + v519;
              HIWORD(v1015) = v517 + v519;
              WORD3(v1017) = v518 - v519;
              int v521 = v494[8];
              LOWORD(v1016) = v521;
              WORD4(v1017) = v521;
              int v522 = v493[10];
              int v523 = v492[10];
              int v524 = (v522 - v523) & ((v522 - v523) >> 31);
              unsigned __int16 v525 = v523 + v524;
              unsigned __int16 v526 = v522 - v524;
              int v527 = (unsigned __int16)(v518 - v519);
              if (v527 <= WORD6(v1017)) {
                int v528 = WORD6(v1017);
              }
              else {
                int v528 = v527;
              }
              if (v528 <= WORD5(v1017)) {
                int v529 = WORD5(v1017);
              }
              else {
                int v529 = v528;
              }
              if (v529 <= v988) {
                __int16 v530 = v988;
              }
              else {
                __int16 v530 = v529;
              }
              if (v521 <= v529) {
                __int16 v531 = v529;
              }
              else {
                __int16 v531 = v521;
              }
              WORD1(v1016) = v525;
              if (v521 > v528) {
                LOWORD(v528) = v521;
              }
              WORD5(v1017) = v526;
              int v532 = v526;
              int v533 = v494[12];
              WORD2(v1016) = v533;
              WORD6(v1017) = v533;
              if (v532 <= v521) {
                int v534 = v521;
              }
              else {
                int v534 = v532;
              }
              if (v534 > v527) {
                int v527 = v534;
              }
              if (v527 > v429) {
                LOWORD(v429) = v527;
              }
              if (v533 <= v527) {
                __int16 v535 = v527;
              }
              else {
                __int16 v535 = v533;
              }
              if (v533 <= v534) {
                LOWORD(v484) = v534;
              }
              else {
                LOWORD(v484) = v533;
              }
              int v520 = (unsigned __int16)v520;
              int v536 = ((v520 - v428) & ((v520 - v428) >> 31)) + v428;
              int v537 = ((v536 - v989) & ((v536 - v989) >> 31)) + v989;
              WORD6(v1018) = v530 - v990 - ((v537 - v990) & ((v537 - v990) >> 31));
              WORD3(v1014) = v529 - (((v536 - v989) & ((v536 - v989) >> 31)) + v989);
              WORD4(v1014) = v531 - v537 - ((v521 - v537) & ((v521 - v537) >> 31));
              WORD1(v1019) = v528 - v536 - ((v521 - v536) & ((v521 - v536) >> 31));
              int v488 = ((v525 - v521) & ((v525 - v521) >> 31)) + v521;
              int v538 = ((v488 - v520) & ((v488 - v520) >> 31)) + v520;
              WORD2(v1019) = v429 - v428 - ((v538 - v428) & ((v538 - v428) >> 31));
              HIWORD(v1014) = v527 - v538;
              LOWORD(v1015) = v535 - v538 - ((v533 - v538) & ((v533 - v538) >> 31));
              int v490 = v533 - v488;
              v491 = (char *)&v1019 + 10;
              goto LABEL_288;
            case 2:
              v539 = &v130[v986];
              v540 = &v130[v984];
              v541 = &v130[v982];
              int v542 = v130[v984 + 1] + v130[1];
              int v546 = v130[v982 + 3] + v130[v986 + 3];
              int v543 = v130[v984 + 5] + v130[5];
              DWORD2(v1020) = v546 + v542 + v543;
              int v544 = v130[v986 + 7];
              int v545 = v130[v982 + 7];
              HIDWORD(v1020) = DWORD2(v1020) + v544 + v545;
              LODWORD(v1024) = HIDWORD(v1020) - v542;
              DWORD1(v1024) = HIDWORD(v1020) - v542 + v130[9] + v130[v984 + 9];
              DWORD2(v1021) = DWORD1(v1024) - v546;
              HIDWORD(v1021) = DWORD1(v1024) - v546 + v130[v986 + 11] + v130[v982 + 11];
              LODWORD(v1025) = HIDWORD(v1021) - v543;
              DWORD1(v1025) = HIDWORD(v1021) - v543 + v130[13] + v130[v984 + 13];
              int v547 = (v545 - v544) & ((v545 - v544) >> 31);
              LOWORD(v546) = v544 + v547;
              WORD3(v1011) = v544 + v547;
              LOWORD(v547) = v545 - v547;
              HIWORD(v1012) = v547;
              int v548 = v130[v984 + 9];
              int v549 = v130[9];
              int v550 = (v548 - v549) & ((v548 - v549) >> 31);
              unsigned __int16 v551 = v549 + v550;
              WORD4(v1011) = v551;
              unsigned __int16 v552 = v548 - v550;
              LOWORD(v1013) = v552;
              int v553 = v130[v982 + 11];
              int v554 = v130[v986 + 11];
              int v555 = (v553 - v554) & ((v553 - v554) >> 31);
              unsigned __int16 v556 = v554 + v555;
              WORD5(v1011) = v554 + v555;
              unsigned __int16 v557 = v553 - v555;
              WORD1(v1013) = v557;
              int v558 = v130[v984 + 13];
              int v559 = v130[13];
              int v560 = (v558 - v559) & ((v558 - v559) >> 31);
              unsigned __int16 v561 = v559 + v560;
              WORD6(v1011) = v559 + ((v558 - v559) & ((v558 - v559) >> 31));
              unsigned __int16 v562 = v558 - v560;
              WORD2(v1013) = v562;
              if (v426 > v424) {
                int v424 = v426;
              }
              if (v424 > v422) {
                int v422 = v424;
              }
              int v547 = (unsigned __int16)v547;
              if ((unsigned __int16)v547 <= v422) {
                __int16 v563 = v422;
              }
              else {
                __int16 v563 = v547;
              }
              if ((unsigned __int16)v547 > v424) {
                int v424 = (unsigned __int16)v547;
              }
              if (v552 <= v424) {
                __int16 v564 = v424;
              }
              else {
                __int16 v564 = v552;
              }
              if (v552 > (int)(unsigned __int16)v547) {
                int v547 = v552;
              }
              if (v547 <= v426) {
                int v565 = v426;
              }
              else {
                int v565 = v547;
              }
              if (v557 <= v565) {
                __int16 v566 = v565;
              }
              else {
                __int16 v566 = v557;
              }
              if (v557 > v547) {
                int v547 = v557;
              }
              __int16 v567 = v562;
              if (v562 <= v547) {
                __int16 v567 = v547;
              }
              int v568 = ((v425 - v423) & ((v425 - v423) >> 31)) + v423;
              int v569 = ((v568 - v421) & ((v568 - v421) >> 31)) + v421;
              WORD2(v1014) = v422 - v569;
              int v546 = (unsigned __int16)v546;
              WORD3(v1014) = v563 - v569 - ((v546 - v569) & (((unsigned __int16)v546 - v569) >> 31));
              int v570 = ((v546 - v568) & ((v546 - v568) >> 31)) + v568;
              LOWORD(v1019) = v424 - v570;
              WORD1(v1019) = v564 - v570 - ((v551 - v570) & ((v551 - v570) >> 31));
              int v571 = ((v551 - v546) & ((v551 - v546) >> 31)) + v546;
              int v572 = ((v571 - v425) & ((v571 - v425) >> 31)) + v425;
              WORD6(v1014) = v565 - v572;
              HIWORD(v1014) = v566 - v572 - ((v556 - v572) & ((v556 - v572) >> 31));
              int v573 = ((v556 - v571) & ((v556 - v571) >> 31)) + v571;
              WORD4(v1019) = v547 - v573;
              WORD5(v1019) = v567 - v573 - ((v561 - v573) & ((v561 - v573) >> 31));
              int v574 = v541[1] + v539[1];
              int v575 = v540[3] + v130[3];
              int v576 = v541[5] + v539[5];
              DWORD2(v1023) = v575 + v574 + v576;
              int v577 = v130[7];
              int v578 = v540[7];
              HIDWORD(v1023) = DWORD2(v1023) + v577 + v578;
              LODWORD(v1021) = HIDWORD(v1023) - v574;
              DWORD1(v1021) = HIDWORD(v1023) - v574 + v539[9] + v541[9];
              DWORD2(v1024) = DWORD1(v1021) - v575;
              HIDWORD(v1024) = DWORD1(v1021) - v575 + v130[11] + v540[11];
              LODWORD(v1022) = HIDWORD(v1024) - v576;
              DWORD1(v1022) = HIDWORD(v1024) - v576 + v539[13] + v541[13];
              int v580 = (v578 - v577) & ((v578 - v577) >> 31);
              unsigned __int16 v579 = v577 + v580;
              HIWORD(v1015) = v579;
              LOWORD(v580) = v578 - v580;
              WORD3(v1017) = v580;
              int v581 = v541[9];
              int v583 = v539[9];
              int v582 = (v581 - v583) & ((v581 - v583) >> 31);
              LOWORD(v583) = v583 + v582;
              LOWORD(v1016) = v583;
              unsigned __int16 v584 = v581 - v582;
              WORD4(v1017) = v584;
              int v585 = v540[11];
              int v587 = v130[11];
              int v586 = (v585 - v587) & ((v585 - v587) >> 31);
              LOWORD(v587) = v587 + v586;
              unsigned __int16 v588 = v585 - v586;
              WORD1(v1016) = v587;
              WORD5(v1017) = v588;
              int v589 = v541[13];
              int v590 = v539[13];
              int v591 = (v589 - v590) & ((v589 - v590) >> 31);
              unsigned __int16 v592 = v590 + v591;
              unsigned __int16 v593 = v589 - v591;
              if (WORD6(v1017) > v427) {
                int v427 = WORD6(v1017);
              }
              int v594 = v988;
              if (v427 > v988) {
                int v594 = v427;
              }
              int v580 = (unsigned __int16)v580;
              WORD2(v1016) = v592;
              if ((unsigned __int16)v580 <= v594) {
                __int16 v595 = v594;
              }
              else {
                __int16 v595 = v580;
              }
              WORD6(v1017) = v593;
              if ((unsigned __int16)v580 <= v427) {
                int v596 = v427;
              }
              else {
                int v596 = (unsigned __int16)v580;
              }
              int v597 = v584;
              if (v584 <= v596) {
                unsigned __int16 v584 = v596;
              }
              if (v597 > (unsigned __int16)v580) {
                int v580 = v597;
              }
              if (v580 > v429) {
                int v429 = v580;
              }
              int v598 = v588;
              if (v588 <= v429) {
                unsigned __int16 v588 = v429;
              }
              if (v598 > v580) {
                int v580 = v598;
              }
              LOWORD(v484) = v593;
              if (v593 <= v580) {
                LOWORD(v484) = v580;
              }
              int v599 = ((v428 - v989) & ((v428 - v989) >> 31)) + v989;
              int v600 = ((v599 - v990) & ((v599 - v990) >> 31)) + v990;
              WORD6(v1018) = v594 - (((v599 - v990) & ((v599 - v990) >> 31)) + v990);
              int v601 = v579;
              HIWORD(v1018) = v595 - v600 - ((v579 - v600) & ((v579 - v600) >> 31));
              int v602 = ((v601 - v599) & ((v601 - v599) >> 31)) + v599;
              WORD4(v1014) = v596 - v602;
              int v583 = (unsigned __int16)v583;
              WORD5(v1014) = v584 - v602 - ((v583 - v602) & (((unsigned __int16)v583 - v602) >> 31));
              int v603 = ((v583 - v601) & ((v583 - v601) >> 31)) + v601;
              int v604 = ((v603 - v428) & ((v603 - v428) >> 31)) + v428;
              WORD2(v1019) = v429 - v604;
              int v587 = (unsigned __int16)v587;
              WORD3(v1019) = v588 - v604 - ((v587 - v604) & (((unsigned __int16)v587 - v604) >> 31));
              int v488 = ((v587 - v603) & ((v587 - v603) >> 31)) + v603;
              LOWORD(v1015) = v580 - v488;
              int v490 = v592 - v488;
              goto LABEL_287;
            case 3:
              v605 = (unsigned __int16 *)((char *)v130 + v987);
              v606 = (unsigned __int16 *)((char *)v130 + v985);
              v607 = (unsigned __int16 *)((char *)v130 + v983);
              int v608 = *(unsigned __int16 *)((char *)v130 + v985 + 6);
              int v609 = *(unsigned __int16 *)((char *)v130 + v983 + 10) + *(unsigned __int16 *)((char *)v130 + v987 + 10);
              DWORD2(v1020) = *(unsigned __int16 *)((char *)v130 + v983 + 2)
                            + *(unsigned __int16 *)((char *)v130 + v987 + 2)
                            + v608
                            + v609;
              int v610 = *(unsigned __int16 *)((char *)v130 + v985 + 14);
              HIDWORD(v1020) = DWORD2(v1020) + v610;
              LODWORD(v1024) = v608 + v609 + v610;
              DWORD1(v1024) = v1024
                            + *(unsigned __int16 *)((char *)v130 + v987 + 18)
                            + *(unsigned __int16 *)((char *)v130 + v983 + 18);
              DWORD2(v1021) = DWORD1(v1024) - v608;
              HIDWORD(v1021) = DWORD1(v1024) - v608 + *(unsigned __int16 *)((char *)v130 + v985 + 22);
              LODWORD(v1025) = HIDWORD(v1021) - v609;
              DWORD1(v1025) = HIDWORD(v1021)
                            - v609
                            + *(unsigned __int16 *)((char *)v130 + v987 + 26)
                            + *(unsigned __int16 *)((char *)v130 + v983 + 26);
              WORD3(v1011) = v610;
              HIWORD(v1012) = v610;
              int v614 = *(unsigned __int16 *)((char *)v130 + v983 + 18);
              int v611 = *(unsigned __int16 *)((char *)v130 + v987 + 18);
              int v612 = (v614 - v611) & ((v614 - v611) >> 31);
              unsigned __int16 v613 = v611 + v612;
              WORD4(v1011) = v613;
              LOWORD(v614) = v614 - v612;
              LOWORD(v1013) = v614;
              int v615 = *(unsigned __int16 *)((char *)v130 + v985 + 22);
              WORD5(v1011) = v615;
              WORD1(v1013) = v615;
              int v616 = *(unsigned __int16 *)((char *)v130 + v983 + 26);
              int v617 = *(unsigned __int16 *)((char *)v130 + v987 + 26);
              int v618 = (v616 - v617) & ((v616 - v617) >> 31);
              unsigned __int16 v619 = v617 + v618;
              WORD6(v1011) = v619;
              unsigned __int16 v620 = v616 - v618;
              WORD2(v1013) = v620;
              if (v426 > v424) {
                int v424 = v426;
              }
              if (v424 <= v422) {
                int v621 = v422;
              }
              else {
                int v621 = v424;
              }
              if (v610 <= v621) {
                __int16 v622 = v621;
              }
              else {
                __int16 v622 = v610;
              }
              if (v610 > v424) {
                int v424 = v610;
              }
              int v614 = (unsigned __int16)v614;
              if ((unsigned __int16)v614 <= v424) {
                __int16 v623 = v424;
              }
              else {
                __int16 v623 = v614;
              }
              if ((unsigned __int16)v614 <= v610) {
                int v614 = v610;
              }
              if (v614 > v426) {
                int v426 = v614;
              }
              if (v615 <= v426) {
                __int16 v624 = v426;
              }
              else {
                __int16 v624 = v615;
              }
              if (v615 > v614) {
                int v614 = v615;
              }
              if (v620 <= v614) {
                unsigned __int16 v620 = v614;
              }
              int v625 = ((v425 - v423) & ((v425 - v423) >> 31)) + v423;
              int v626 = ((v625 - v421) & ((v625 - v421) >> 31)) + v421;
              WORD2(v1014) = v621 - v626;
              WORD3(v1014) = v622 - v626 - ((v610 - v626) & ((v610 - v626) >> 31));
              int v627 = ((v610 - v625) & ((v610 - v625) >> 31)) + v625;
              LOWORD(v1019) = v424 - v627;
              WORD1(v1019) = v623 - v627 - ((v613 - v627) & ((v613 - v627) >> 31));
              int v628 = ((v613 - v610) & ((v613 - v610) >> 31)) + v610;
              int v629 = ((v628 - v425) & ((v628 - v425) >> 31)) + v425;
              WORD6(v1014) = v426 - v629;
              HIWORD(v1014) = v624 - v629 - ((v615 - v629) & ((v615 - v629) >> 31));
              int v630 = ((v615 - v628) & ((v615 - v628) >> 31)) + v628;
              WORD4(v1019) = v614 - v630;
              WORD5(v1019) = v620 - v630 - ((v619 - v630) & ((v619 - v630) >> 31));
              int v631 = v607[3] + v605[3];
              int v632 = v606[5];
              DWORD2(v1023) = v631 + v606[1] + v632;
              int v633 = v605[7];
              int v634 = v607[7];
              HIDWORD(v1023) = DWORD2(v1023) + v633 + v634;
              LODWORD(v1021) = v631 + v632 + v633 + v634;
              DWORD1(v1021) = v1021 + v606[9];
              DWORD2(v1024) = DWORD1(v1021) - v631;
              HIDWORD(v1024) = DWORD1(v1021) - v631 + v605[11] + v607[11];
              LODWORD(v1022) = HIDWORD(v1024) - v632;
              DWORD1(v1022) = HIDWORD(v1024) - v632 + v606[13];
              int v636 = (v634 - v633) & ((v634 - v633) >> 31);
              LOWORD(v635) = v633 + v636;
              HIWORD(v1015) = v633 + v636;
              LOWORD(v636) = v634 - v636;
              WORD3(v1017) = v636;
              int v637 = v606[9];
              LOWORD(v1016) = v637;
              WORD4(v1017) = v637;
              int v638 = v607[11];
              int v639 = v605[11];
              int v640 = (v638 - v639) & ((v638 - v639) >> 31);
              unsigned __int16 v641 = v639 + v640;
              unsigned __int16 v642 = v638 - v640;
              if (WORD6(v1017) > (int)WORD5(v1017)) {
                int v427 = WORD6(v1017);
              }
              int v643 = v988;
              if (v427 > v988) {
                int v643 = v427;
              }
              int v636 = (unsigned __int16)v636;
              if ((unsigned __int16)v636 <= v643) {
                __int16 v644 = v643;
              }
              else {
                __int16 v644 = v636;
              }
              if ((unsigned __int16)v636 <= v427) {
                int v645 = v427;
              }
              else {
                int v645 = (unsigned __int16)v636;
              }
              if (v637 <= v645) {
                __int16 v646 = v645;
              }
              else {
                __int16 v646 = v637;
              }
              WORD1(v1016) = v641;
              if (v637 > (unsigned __int16)v636) {
                int v636 = v637;
              }
              WORD5(v1017) = v642;
              int v647 = v606[13];
              WORD2(v1016) = v647;
              WORD6(v1017) = v647;
              if (v636 <= v429) {
                int v648 = v429;
              }
              else {
                int v648 = v636;
              }
              int v649 = v642;
              if (v642 <= v648) {
                unsigned __int16 v642 = v648;
              }
              if (v649 > v636) {
                int v636 = v649;
              }
              if (v647 <= v636) {
                LOWORD(v484) = v636;
              }
              else {
                LOWORD(v484) = v647;
              }
              int v650 = ((v428 - v989) & ((v428 - v989) >> 31)) + v989;
              int v651 = ((v650 - v990) & ((v650 - v990) >> 31)) + v990;
              WORD6(v1018) = v643 - (((v650 - v990) & ((v650 - v990) >> 31)) + v990);
              int v635 = (unsigned __int16)v635;
              HIWORD(v1018) = v644 - v651 - ((v635 - v651) & (((unsigned __int16)v635 - v651) >> 31));
              int v652 = ((v635 - v650) & ((v635 - v650) >> 31)) + v650;
              WORD4(v1014) = v645 - v652;
              WORD5(v1014) = v646 - v652 - ((v637 - v652) & ((v637 - v652) >> 31));
              int v653 = ((v637 - v635) & ((v637 - v635) >> 31)) + v635;
              int v654 = ((v653 - v428) & ((v653 - v428) >> 31)) + v428;
              WORD2(v1019) = v648 - v654;
              WORD3(v1019) = v642 - v654 - ((v641 - v654) & ((v641 - v654) >> 31));
              int v488 = ((v641 - v653) & ((v641 - v653) >> 31)) + v653;
              LOWORD(v1015) = v636 - (((v641 - v653) & ((v641 - v653) >> 31)) + v653);
              int v490 = v647 - v488;
LABEL_287:
              v491 = (char *)&v1015 + 2;
LABEL_288:
              *(_WORD *)v491 = v484 - v488 - (v490 & (v490 >> 31));
              unint64_t v21 = (float *)&v1001 + 2;
              uint64_t v22 = (unsigned __int16 *)&v1001 + 2;
              uint64_t v24 = v991;
              unint64_t v2 = v992;
              uint64_t v10 = v981;
              uint64_t v12 = v979;
              int v126 = v980;
              int v30 = v993;
              uint64_t v28 = v994;
              break;
            default:
              unint64_t v21 = (float *)&v1001 + 2;
              uint64_t v22 = (unsigned __int16 *)&v1001 + 2;
              int v30 = v993;
              uint64_t v28 = v246 + 8;
              uint64_t v10 = v981;
              break;
          }
        }
        if (v22[24] >= (v126 * *(unsigned __int16 *)(v10 + 2 * *(unsigned __int16 *)(v12 + 2 * v22[36])) + 0x8000) >> 16)
        {
          float v655 = (float)(v21[107] + v21[108]) + v21[109];
          float v656 = (float)((float)((float)(v21[130] + v21[131]) + v21[132]) + v21[133]) + v21[134];
          BOOL v657 = v656 < v655;
          float v658 = v655 / v656;
          float v659 = v656 / v655;
          if (v657)
          {
            float v659 = v658;
            int v660 = 2;
          }
          else
          {
            int v660 = 0;
          }
          float v661 = (float)((float)(v21[119] + v21[120]) + v21[121]) + v21[122];
          float v662 = (float)((float)(v21[142] + v21[143]) + v21[144]) + v21[145];
          BOOL v657 = v662 < v661;
          float v663 = v661 / v662;
          float v664 = v662 / v661;
          if (v657)
          {
            float v664 = v663;
            int v133 = 3;
          }
          else
          {
            int v133 = 1;
          }
          if (v664 <= v659) {
            int v133 = v660;
          }
          else {
            float v659 = v664;
          }
          if (v659 >= v8) {
            goto LABEL_45;
          }
        }
        v665 = &v1049[v22[60]];
        uint64_t v666 = *v665;
        uint64_t v667 = v665[1];
        unsigned int v668 = v22[48];
        int v669 = v22[120];
        int v670 = *((_DWORD *)v21 + 84);
        if (v668 <= 1) {
          break;
        }
        if (v668 == 2)
        {
          if (v669 >= (v126
                      * *(unsigned __int16 *)(v666
                                            + 2
                                            * *(unsigned __int16 *)(v12 + 2
                                                                        * ((683 * v670 + 2048) >> 12)))
                      + 0x8000) >> 16)
          {
            unsigned int v776 = v130[1];
            unsigned int v777 = v130[5];
            unsigned int v778 = v130[v986 + 3];
            unsigned int v779 = v130[v984 + 1];
            unsigned int v780 = v130[v984 + 5];
            unsigned int v781 = v130[v982 + 3];
            float v782 = (float)((float)v777 - (float)v776) * *(float *)(v14 + 4 * (v777 + v776));
            float v783 = (float)v780;
            float v784 = (float)v779;
            float v785 = (float)((float)v780 - (float)v779) * *(float *)(v14 + 4 * (v780 + v779));
            float v786 = (float)(v785 * v785) + (float)(v782 * v782);
            float v787 = (float)((float)v779 - (float)v776) * *(float *)(v14 + 4 * (v779 + v776));
            float v788 = (float)v781;
            float v789 = (float)v778;
            float v790 = (float)((float)v781 - (float)v778) * *(float *)(v14 + 4 * (v781 + v778));
            float v791 = (float)((float)v780 - (float)v777) * *(float *)(v14 + 4 * (v780 + v777));
            float v792 = (float)((float)(v790 * v790) + (float)(v787 * v787)) + (float)(v791 * v791);
            float v793 = v786 * 1.5;
            BOOL v657 = v792 < v793;
            float v794 = v793 / v792;
            float v795 = v792 / v793;
            if (v657)
            {
              float v795 = v794;
              int v796 = 2;
            }
            else
            {
              int v796 = 0;
            }
            float v797 = (float)(v784 - v789) * *(float *)(v14 + 4 * (v779 + v778));
            float v798 = (float)(v789 - (float)v777) * *(float *)(v14 + 4 * (v778 + v777));
            float v799 = *(float *)(v14 + 4 * (v781 + v780));
            float v800 = (float)((float)((float)((float)(v788 - v783) * v799) * (float)((float)(v788 - v783) * v799))
                         + (float)(v798 * v798))
                 + (float)(v797 * v797);
            float v801 = (float)(v789 - (float)v776) * *(float *)(v14 + 4 * (v778 + v776));
            float v802 = (float)(v788 - v784) * *(float *)(v14 + 4 * (v781 + v779));
            float v803 = *(float *)(v14 + 4 * (v780 + v778));
            float v804 = (float)((float)(v802 * v802) + (float)(v801 * v801))
                 + (float)((float)((float)(v783 - v789) * v803) * (float)((float)(v783 - v789) * v803));
            BOOL v657 = v804 < v800;
            float v805 = v800 / v804;
            float v25 = v804 / v800;
            if (v657)
            {
              float v25 = v805;
              int v133 = 3;
            }
            else
            {
              int v133 = 1;
            }
            if (v25 <= v795)
            {
              float v25 = v795;
              int v133 = v796;
            }
            if (v25 < v8) {
              int v133 = 4;
            }
          }
          else
          {
            int v133 = 4;
          }
          if (v22[156] < (v126
                         * *(unsigned __int16 *)(v667
                                               + 2
                                               * *(unsigned __int16 *)(v12
                                                                     + 2
                                                                     * ((683 * *((_DWORD *)v21 + 96) + 2048) >> 12)))
                         + 0x8000) >> 16)
            goto LABEL_45;
          unsigned int v806 = v130[3];
          unsigned int v807 = v130[v986 + 1];
          unsigned int v808 = v130[v986 + 5];
          unsigned int v809 = v130[v984 + 3];
          unsigned int v810 = v130[v982 + 1];
          float v811 = (float)v808;
          float v812 = (float)v807;
          unsigned int v813 = v130[v982 + 5];
          float v814 = (float)((float)v808 - (float)v807) * *(float *)(v14 + 4 * (v808 + v807));
          float v815 = (float)((float)v813 - (float)v810) * *(float *)(v14 + 4 * (v813 + v810));
          float v816 = (float)(v815 * v815) + (float)(v814 * v814);
          float v817 = (float)((float)v810 - (float)v807) * *(float *)(v14 + 4 * (v810 + v807));
          float v818 = (float)v809;
          float v819 = (float)v806;
          float v820 = (float)((float)v809 - (float)v806) * *(float *)(v14 + 4 * (v809 + v806));
          float v821 = (float)((float)v813 - (float)v808) * *(float *)(v14 + 4 * (v813 + v808));
          float v822 = (float)((float)(v820 * v820) + (float)(v817 * v817)) + (float)(v821 * v821);
          float v823 = v816 * 1.5;
          BOOL v657 = v822 < v823;
          float v824 = v823 / v822;
          float v766 = v822 / v823;
          if (v657)
          {
            float v766 = v824;
            int v767 = 2;
          }
          else
          {
            int v767 = 0;
          }
          float v825 = (float)(v812 - v819) * *(float *)(v14 + 4 * (v807 + v806));
          float v826 = (float)((float)v810 - v818) * *(float *)(v14 + 4 * (v810 + v809));
          float v827 = (float)(v818 - v811) * *(float *)(v14 + 4 * (v809 + v808));
          float v828 = (float)((float)(v826 * v826) + (float)(v825 * v825)) + (float)(v827 * v827);
          float v829 = (float)(v818 - v812) * *(float *)(v14 + 4 * (v809 + v807));
          float v830 = (float)(v811 - v819) * *(float *)(v14 + 4 * (v808 + v806));
          float v831 = *(float *)(v14 + 4 * (v813 + v809));
          float v832 = (float)((float)((float)((float)((float)v813 - v818) * v831)
                               * (float)((float)((float)v813 - v818) * v831))
                       + (float)(v830 * v830))
               + (float)(v829 * v829);
          BOOL v774 = v832 < v828;
          float v775 = v828 / v832;
          float v729 = v832 / v828;
        }
        else
        {
          if (v669 < (v126
                     * *(unsigned __int16 *)(v666
                                           + 2
                                           * *(unsigned __int16 *)(v12 + 2 * ((819 * v670 + 2048) >> 12)))
                     + 0x8000) >> 16)
            goto LABEL_340;
          unsigned int v731 = *(unsigned __int16 *)((char *)v130 + v987 + 2);
          unsigned int v732 = *(unsigned __int16 *)((char *)v130 + v987 + 10);
          unsigned int v733 = *(unsigned __int16 *)((char *)v130 + v985 + 6);
          unsigned int v734 = *(unsigned __int16 *)((char *)v130 + v983 + 2);
          unsigned int v735 = *(unsigned __int16 *)((char *)v130 + v983 + 10);
          float v736 = (float)((float)v732 - (float)v731) * *(float *)(v14 + 4 * (v732 + v731));
          float v737 = (float)((float)v735 - (float)v734) * *(float *)(v14 + 4 * (v735 + v734));
          float v738 = (float)(v737 * v737) + (float)(v736 * v736);
          float v739 = (float)((float)v734 - (float)v731) * *(float *)(v14 + 4 * (v734 + v731));
          float v740 = *(float *)(v14 + 4 * (v735 + v732));
          float v741 = (float)((float)((float)((float)v735 - (float)v732) * v740)
                       * (float)((float)((float)v735 - (float)v732) * v740))
               + (float)(v739 * v739);
          BOOL v657 = v741 < v738;
          float v742 = v738 / v741;
          float v743 = v741 / v738;
          if (v657)
          {
            float v743 = v742;
            int v744 = 2;
          }
          else
          {
            int v744 = 0;
          }
          float v745 = (float)((float)v734 - (float)v733) * *(float *)(v14 + 4 * (v734 + v733));
          float v746 = *(float *)(v14 + 4 * (v733 + v732));
          float v747 = (float)((float)((float)((float)v733 - (float)v732) * v746)
                       * (float)((float)((float)v733 - (float)v732) * v746))
               + (float)(v745 * v745);
          float v748 = *(float *)(v14 + 4 * (v733 + v731));
          float v749 = *(float *)(v14 + 4 * (v735 + v733));
          float v750 = (float)((float)((float)((float)v735 - (float)v733) * v749)
                       * (float)((float)((float)v735 - (float)v733) * v749))
               + (float)((float)((float)((float)v733 - (float)v731) * v748)
                       * (float)((float)((float)v733 - (float)v731) * v748));
          BOOL v657 = v750 < v747;
          float v751 = v747 / v750;
          float v25 = v750 / v747;
          if (v657)
          {
            float v25 = v751;
            int v752 = 3;
          }
          else
          {
            int v752 = 1;
          }
          if (v25 > v743)
          {
            int v133 = v752;
          }
          else
          {
            float v25 = v743;
            int v133 = v744;
          }
          if (v25 < v8) {
LABEL_340:
          }
            int v133 = 4;
          if (v22[156] < (v126
                         * *(unsigned __int16 *)(v667
                                               + 2
                                               * *(unsigned __int16 *)(v12
                                                                     + 2
                                                                     * ((*((_DWORD *)v21 + 96) + 2) >> 2)))
                         + 0x8000) >> 16)
            goto LABEL_45;
          unsigned int v753 = *(unsigned __int16 *)((char *)v130 + v987 + 6);
          unsigned int v754 = *(unsigned __int16 *)((char *)v130 + v985 + 2);
          unsigned int v755 = *(unsigned __int16 *)((char *)v130 + v985 + 10);
          unsigned int v756 = *(unsigned __int16 *)((char *)v130 + v983 + 6);
          float v757 = (float)v755;
          float v758 = (float)v754;
          float v759 = (float)((float)v755 - (float)v754) * *(float *)(v14 + 4 * (v755 + v754));
          float v760 = v759 * v759;
          float v761 = (float)v756;
          float v762 = (float)v753;
          float v763 = (float)((float)v756 - (float)v753) * *(float *)(v14 + 4 * (v756 + v753));
          float v764 = v763 * v763;
          BOOL v657 = v764 < v760;
          float v765 = v760 / v764;
          float v766 = v764 / v760;
          if (v657)
          {
            float v766 = v765;
            int v767 = 2;
          }
          else
          {
            int v767 = 0;
          }
          float v768 = (float)(v758 - v762) * *(float *)(v14 + 4 * (v754 + v753));
          float v769 = *(float *)(v14 + 4 * (v756 + v755));
          float v770 = (float)((float)((float)(v761 - v757) * v769) * (float)((float)(v761 - v757) * v769))
               + (float)(v768 * v768);
          float v771 = (float)(v761 - v758) * *(float *)(v14 + 4 * (v756 + v754));
          float v772 = *(float *)(v14 + 4 * (v755 + v753));
          float v773 = (float)((float)((float)(v757 - v762) * v772) * (float)((float)(v757 - v762) * v772))
               + (float)(v771 * v771);
          BOOL v774 = v773 < v770;
          float v775 = v770 / v773;
          float v729 = v773 / v770;
        }
        if (v774)
        {
          float v729 = v775;
          int v730 = 3;
        }
        else
        {
          int v730 = 1;
        }
        if (v729 <= v766)
        {
          float v729 = v766;
          int v730 = v767;
        }
        if (v729 >= v8) {
          goto LABEL_391;
        }
LABEL_45:
        v129 |= v133 << result;
        result = (result + 4);
        if (result == 32)
        {
          result = 0;
          *(_DWORD *)v132 = v129;
          v132 += 4;
          unsigned int v129 = 0;
        }
        ++v22;
        ++v21;
        ++v131;
        ++v130;
        if (v2 == v131)
        {
          v4 = v966;
          uint64_t v127 = v976;
          v916 = v977;
          uint64_t v24 = v975;
          if (result < 8) {
            goto LABEL_12;
          }
          goto LABEL_405;
        }
      }
      if (v668 == 1)
      {
        if (v669 < (v126
                   * *(unsigned __int16 *)(v666
                                         + 2
                                         * *(unsigned __int16 *)(v12 + 2 * ((683 * v670 + 2048) >> 12)))
                   + 0x8000) >> 16)
          goto LABEL_312;
        unsigned int v671 = *(unsigned __int16 *)((char *)v130 + v987);
        unsigned int v672 = *(unsigned __int16 *)((char *)v130 + v987 + 8);
        unsigned int v673 = *(unsigned __int16 *)((char *)v130 + v985 + 4);
        unsigned int v674 = *(unsigned __int16 *)((char *)v130 + v985 + 12);
        unsigned int v675 = *(unsigned __int16 *)((char *)v130 + 5 * v987);
        float v676 = (float)v672;
        unsigned int v677 = *(unsigned __int16 *)((char *)v130 + v983 + 8);
        float v678 = (float)((float)v672 - (float)v671) * *(float *)(v14 + 4 * (v672 + v671));
        float v679 = (float)v677;
        float v680 = (float)v674;
        float v681 = (float)v673;
        float v682 = (float)((float)v677 - (float)v675) * *(float *)(v14 + 4 * (v677 + v675));
        float v683 = (float)((float)v674 - (float)v673) * *(float *)(v14 + 4 * (v674 + v673));
        float v684 = (float)((float)(v682 * v682) + (float)(v678 * v678)) + (float)(v683 * v683);
        float v685 = (float)((float)v675 - (float)v671) * *(float *)(v14 + 4 * (v675 + v671));
        float v686 = *(float *)(v14 + 4 * (v677 + v672));
        float v687 = (float)((float)((float)((float)((float)v677 - (float)v672) * v686)
                             * (float)((float)((float)v677 - (float)v672) * v686))
                     + (float)(v685 * v685))
             * 1.5;
        BOOL v657 = v687 < v684;
        float v688 = v684 / v687;
        float v689 = v687 / v684;
        if (v657)
        {
          float v689 = v688;
          int v690 = 2;
        }
        else
        {
          int v690 = 0;
        }
        float v691 = (float)((float)v675 - v681) * *(float *)(v14 + 4 * (v675 + v673));
        float v692 = (float)(v681 - v676) * *(float *)(v14 + 4 * (v673 + v672));
        float v693 = (float)(v679 - v680) * *(float *)(v14 + 4 * (v677 + v674));
        float v694 = (float)((float)(v692 * v692) + (float)(v691 * v691)) + (float)(v693 * v693);
        float v695 = (float)(v681 - (float)v671) * *(float *)(v14 + 4 * (v673 + v671));
        float v696 = (float)(v679 - v681) * *(float *)(v14 + 4 * (v677 + v673));
        float v697 = *(float *)(v14 + 4 * (v674 + v672));
        float v698 = (float)((float)(v696 * v696) + (float)(v695 * v695))
             + (float)((float)((float)(v680 - v676) * v697) * (float)((float)(v680 - v676) * v697));
        BOOL v657 = v698 < v694;
        float v699 = v694 / v698;
        float v25 = v698 / v694;
        if (v657)
        {
          float v25 = v699;
          int v133 = 3;
        }
        else
        {
          int v133 = 1;
        }
        if (v25 <= v689)
        {
          float v25 = v689;
          int v133 = v690;
        }
        if (v25 < v8) {
LABEL_312:
        }
          int v133 = 4;
        if (v22[156] < (v126
                       * *(unsigned __int16 *)(v667
                                             + 2
                                             * *(unsigned __int16 *)(v12
                                                                   + 2
                                                                   * ((683 * *((_DWORD *)v21 + 96) + 2048) >> 12)))
                       + 0x8000) >> 16)
          goto LABEL_45;
        unsigned int v700 = *(unsigned __int16 *)((char *)v130 + v987 + 4);
        unsigned int v701 = *(unsigned __int16 *)((char *)v130 + v987 + 12);
        unsigned int v702 = *(unsigned __int16 *)((char *)v130 + 3 * v987);
        unsigned int v703 = *(unsigned __int16 *)((char *)v130 + v985 + 8);
        unsigned int v704 = *(unsigned __int16 *)((char *)v130 + v983 + 4);
        float v705 = (float)v703;
        float v706 = (float)v702;
        unsigned int v707 = *(unsigned __int16 *)((char *)v130 + v983 + 12);
        float v708 = (float)((float)v703 - (float)v702) * *(float *)(v14 + 4 * (v703 + v702));
        float v709 = (float)v700;
        float v710 = (float)v704;
        float v711 = (float)((float)v701 - (float)v700) * *(float *)(v14 + 4 * (v701 + v700));
        float v712 = (float)((float)v707 - (float)v704) * *(float *)(v14 + 4 * (v707 + v704));
        float v713 = (float)((float)(v712 * v712) + (float)(v711 * v711)) + (float)(v708 * v708);
        float v714 = (float)((float)v704 - (float)v700) * *(float *)(v14 + 4 * (v704 + v700));
        float v715 = *(float *)(v14 + 4 * (v707 + v701));
        float v716 = (float)((float)((float)((float)((float)v707 - (float)v701) * v715)
                             * (float)((float)((float)v707 - (float)v701) * v715))
                     + (float)(v714 * v714))
             * 1.5;
        BOOL v657 = v716 < v713;
        float v717 = v713 / v716;
        float v718 = v716 / v713;
        if (v657)
        {
          float v718 = v717;
          int v719 = 2;
        }
        else
        {
          int v719 = 0;
        }
        float v720 = (float)(v706 - v709) * *(float *)(v14 + 4 * (v702 + v700));
        float v721 = (float)(v710 - v705) * *(float *)(v14 + 4 * (v704 + v703));
        float v722 = *(float *)(v14 + 4 * (v703 + v701));
        float v723 = (float)((float)(v721 * v721) + (float)(v720 * v720))
             + (float)((float)((float)(v705 - (float)v701) * v722) * (float)((float)(v705 - (float)v701) * v722));
        float v724 = (float)(v710 - v706) * *(float *)(v14 + 4 * (v704 + v702));
        float v725 = (float)(v705 - v709) * *(float *)(v14 + 4 * (v703 + v700));
        float v726 = *(float *)(v14 + 4 * (v707 + v703));
        float v727 = (float)((float)(v725 * v725) + (float)(v724 * v724))
             + (float)((float)((float)((float)v707 - v705) * v726) * (float)((float)((float)v707 - v705) * v726));
        BOOL v657 = v727 < v723;
        float v728 = v723 / v727;
        float v729 = v727 / v723;
        if (v657)
        {
          float v729 = v728;
          int v730 = 3;
        }
        else
        {
          int v730 = 1;
        }
        if (v729 <= v718)
        {
          float v729 = v718;
          int v730 = v719;
        }
        if (v729 < v8) {
          goto LABEL_45;
        }
      }
      else
      {
        if (v669 >= (v126
                    * *(unsigned __int16 *)(v666
                                          + 2 * *(unsigned __int16 *)(v12 + 2 * ((v670 + 4) >> 3)))
                    + 0x8000) >> 16)
        {
          uint64_t v833 = v12;
          uint64_t v834 = v10;
          v835 = v30;
          unsigned int v836 = *v130;
          unsigned int v837 = v130[4];
          unsigned int v838 = v130[v986 + 2];
          unsigned int v839 = v130[v986 + 6];
          unsigned int v840 = v130[2 * v987];
          unsigned int v841 = v130[v984 + 4];
          unsigned int v842 = v130[v982 + 2];
          unsigned int v843 = v130[v982 + 6];
          float v844 = (float)v837;
          float v845 = (float)((float)v837 - (float)v836) * *(float *)(v14 + 4 * (v837 + v836));
          float v846 = (float)v841;
          float v847 = (float)v840;
          float v848 = (float)((float)v841 - (float)v840) * *(float *)(v14 + 4 * (v841 + v840));
          float v849 = (float)v839;
          float v850 = (float)v838;
          float v851 = (float)((float)v839 - (float)v838) * *(float *)(v14 + 4 * (v839 + v838));
          float v852 = (float)v842;
          float v853 = (float)((float)v843 - (float)v842) * *(float *)(v14 + 4 * (v843 + v842));
          float v854 = (float)((float)(v848 * v848) + (float)(v845 * v845))
               + (float)((float)(v853 * v853) + (float)(v851 * v851));
          float v855 = (float)((float)v840 - (float)v836) * *(float *)(v14 + 4 * (v840 + v836));
          float v856 = (float)((float)v842 - (float)v838) * *(float *)(v14 + 4 * (v842 + v838));
          float v857 = (float)((float)v841 - (float)v837) * *(float *)(v14 + 4 * (v841 + v837));
          float v858 = (float)((float)v843 - (float)v839) * *(float *)(v14 + 4 * (v843 + v839));
          float v859 = (float)((float)((float)(v856 * v856) + (float)(v855 * v855)) + (float)(v857 * v857))
               + (float)(v858 * v858);
          BOOL v657 = v859 < v854;
          float v860 = v854 / v859;
          float v861 = v859 / v854;
          if (v657)
          {
            float v861 = v860;
            int v862 = 2;
          }
          else
          {
            int v862 = 0;
          }
          float v863 = (float)(v847 - v850) * *(float *)(v14 + 4 * (v840 + v838));
          float v864 = (float)(v850 - v844) * *(float *)(v14 + 4 * (v838 + v837));
          float v865 = (float)(v852 - v846) * *(float *)(v14 + 4 * (v842 + v841));
          float v866 = (float)(v846 - v849) * *(float *)(v14 + 4 * (v841 + v839));
          float v867 = (float)((float)((float)(v865 * v865) + (float)(v864 * v864)) + (float)(v863 * v863))
               + (float)(v866 * v866);
          float v868 = (float)(v850 - (float)v836) * *(float *)(v14 + 4 * (v838 + v836));
          float v869 = (float)(v852 - v847) * *(float *)(v14 + 4 * (v842 + v840));
          float v870 = (float)(v846 - v850) * *(float *)(v14 + 4 * (v841 + v838));
          float v871 = (float)(v849 - v844) * *(float *)(v14 + 4 * (v839 + v837));
          float v872 = (float)((float)v843 - v846) * *(float *)(v14 + 4 * (v843 + v841));
          float v873 = (float)((float)((float)((float)(v869 * v869) + (float)(v868 * v868)) + (float)(v870 * v870))
                       + (float)((float)(v872 * v872) + (float)(v871 * v871)))
               * 1.6;
          BOOL v657 = v873 < (float)(v867 + v867);
          float v874 = (float)(v867 + v867) / v873;
          float v25 = v873 / (float)(v867 + v867);
          if (v657)
          {
            float v25 = v874;
            int v875 = 3;
          }
          else
          {
            int v875 = 1;
          }
          if (v25 > v861)
          {
            int v133 = v875;
          }
          else
          {
            float v25 = v861;
            int v133 = v862;
          }
          if (v25 < v8) {
            int v133 = 4;
          }
          int v30 = v835;
          uint64_t v10 = v834;
          uint64_t v12 = v833;
        }
        else
        {
          int v133 = 4;
        }
        if (v22[156] < (v126
                       * *(unsigned __int16 *)(v667
                                             + 2
                                             * *(unsigned __int16 *)(v12
                                                                   + 2
                                                                   * ((*((_DWORD *)v21 + 96) + 4) >> 3)))
                       + 0x8000) >> 16)
          goto LABEL_45;
        unsigned int v876 = v130[2];
        unsigned int v877 = v130[6];
        unsigned int v878 = v130[v987];
        unsigned int v879 = v130[v986 + 4];
        unsigned int v880 = v130[v984 + 2];
        unsigned int v881 = v130[v984 + 6];
        unsigned int v882 = v130[3 * v987];
        unsigned int v883 = v130[v982 + 4];
        float v884 = (float)v879;
        float v885 = (float)v878;
        float v886 = (float)((float)v879 - (float)v878) * *(float *)(v14 + 4 * (v879 + v878));
        float v887 = (float)v883;
        float v888 = (float)((float)v883 - (float)v882) * *(float *)(v14 + 4 * (v883 + v882));
        float v889 = (float)v876;
        float v890 = (float)((float)v877 - (float)v876) * *(float *)(v14 + 4 * (v877 + v876));
        float v891 = (float)v881;
        float v892 = (float)v880;
        float v893 = (float)((float)v881 - (float)v880) * *(float *)(v14 + 4 * (v881 + v880));
        float v894 = (float)((float)(v888 * v888) + (float)(v886 * v886))
             + (float)((float)(v893 * v893) + (float)(v890 * v890));
        float v895 = (float)((float)v882 - (float)v878) * *(float *)(v14 + 4 * (v882 + v878));
        float v896 = (float)((float)v880 - (float)v876) * *(float *)(v14 + 4 * (v880 + v876));
        float v897 = (float)((float)v883 - (float)v879) * *(float *)(v14 + 4 * (v883 + v879));
        float v898 = (float)((float)v881 - (float)v877) * *(float *)(v14 + 4 * (v881 + v877));
        float v899 = (float)((float)((float)(v896 * v896) + (float)(v895 * v895)) + (float)(v897 * v897))
             + (float)(v898 * v898);
        BOOL v657 = v899 < v894;
        float v900 = v894 / v899;
        float v901 = v899 / v894;
        if (v657)
        {
          float v901 = v900;
          int v902 = 2;
        }
        else
        {
          int v902 = 0;
        }
        float v903 = (float)(v885 - v889) * *(float *)(v14 + 4 * (v878 + v876));
        float v904 = (float)((float)v882 - v892) * *(float *)(v14 + 4 * (v882 + v880));
        float v905 = (float)(v892 - v884) * *(float *)(v14 + 4 * (v880 + v879));
        float v906 = (float)(v884 - (float)v877) * *(float *)(v14 + 4 * (v879 + v877));
        float v907 = (float)(v887 - v891) * *(float *)(v14 + 4 * (v883 + v881));
        float v908 = (float)(v892 - v885) * *(float *)(v14 + 4 * (v880 + v878));
        float v909 = (float)(v884 - v889) * *(float *)(v14 + 4 * (v879 + v876));
        float v910 = (float)(v887 - v892) * *(float *)(v14 + 4 * (v883 + v880));
        float v911 = *(float *)(v14 + 4 * (v881 + v879));
        float v912 = (float)((float)((float)(v910 * v910) + (float)(v909 * v909)) + (float)(v908 * v908))
             + (float)((float)((float)(v891 - v884) * v911) * (float)((float)(v891 - v884) * v911));
        float v913 = (float)((float)((float)((float)(v904 * v904) + (float)(v903 * v903)) + (float)(v905 * v905))
                     + (float)((float)(v907 * v907) + (float)(v906 * v906)))
             * 1.6;
        float v914 = v912 + v912;
        BOOL v657 = v914 < v913;
        float v915 = v913 / v914;
        float v729 = v914 / v913;
        if (v657)
        {
          float v729 = v915;
          int v730 = 3;
        }
        else
        {
          int v730 = 1;
        }
        if (v729 <= v901)
        {
          float v729 = v901;
          int v730 = v902;
        }
        if (v729 < v8) {
          goto LABEL_45;
        }
      }
LABEL_391:
      if (v133 == 4)
      {
        int v133 = v730;
      }
      else if (v25 <= v729)
      {
        int v133 = v730;
      }
      goto LABEL_45;
    }
  }
  return result;
}

void sub_1DDB28670(uint64_t a1, void *a2)
{
  uint64_t v78 = a2[135];
  uint64_t v2 = a2[136];
  unint64_t v68 = a2[138];
  uint64_t v70 = a2[137];
  unint64_t v3 = (char *)a2[139];
  size_t v4 = a2[140];
  uint64_t v75 = *(void *)(a1 + 1128);
  uint64_t v63 = *(void *)(a1 + 1136);
  uint64_t v5 = *(void *)(a1 + 1144);
  int v6 = *(_DWORD *)(a1 + 1152);
  int v7 = *(_DWORD *)(a1 + 1156);
  unsigned int v8 = *(_DWORD *)(a1 + 1160);
  int v9 = *(_DWORD *)(a1 + 1164);
  int v10 = *(_DWORD *)(a1 + 1168);
  int v11 = *(_DWORD *)(a1 + 160);
  bzero(v3, v4);
  uint64_t v12 = &v3[v4];
  if ((unint64_t)(v2 - 3) < 3)
  {
    unint64_t v21 = &v3[v4];
  }
  else
  {
    int v80 = v9;
    int v81 = v10;
    unsigned int v72 = v8;
    int v73 = v7;
    char v74 = v6;
    unint64_t v79 = v78 - 2;
    if (v79 <= 2)
    {
      unint64_t v62 = 2;
      do
      {
        v62 += 2;
        unint64_t v21 = &v12[v4];
        *(void *)uint64_t v12 = 0;
        v12 += v4;
      }
      while (v62 < v2 - 3);
    }
    else
    {
      uint64_t v77 = v5;
      int v13 = 0;
      char v14 = 0;
      int v76 = 0;
      uint64_t v15 = -(uint64_t)(v68 >> 1);
      uint64_t v16 = (v68 >> 1) + 2;
      unint64_t v17 = (v68 & 0xFFFFFFFFFFFFFFFELL) - 1;
      uint64_t v18 = v68 | 1;
      uint64_t v64 = 2 * v68;
      uint64_t v19 = 2;
      uint64_t v20 = 2 * (v68 >> 1);
      unint64_t v21 = &v3[v4];
      unint64_t v22 = v70 + 2 * (v68 & 0xFFFFFFFFFFFFFFFELL) + 2 * (v11 != 4);
      int v23 = 1;
      uint64_t v24 = 3 * (v68 >> 1);
      int v25 = v81;
      unint64_t v65 = v2 - 3;
      size_t v66 = v4;
      do
      {
        uint64_t v69 = v19;
        float v71 = v21;
        *(_DWORD *)unint64_t v21 = 0;
        uint64_t v26 = v21 + 4;
        unint64_t v67 = v22;
        unint64_t v27 = v22;
        unint64_t v28 = 2;
        do
        {
          unint64_t v36 = v27 + 4;
          int v37 = *(unsigned __int16 *)(v27 + 4 + 2 * v15);
          int v38 = v26;
          int v39 = *(unsigned __int16 *)(v27 + 2);
          int v40 = *(unsigned __int16 *)(v27 + v20);
          int v41 = *(unsigned __int16 *)(v27 + 4 + v20);
          int v42 = *(unsigned __int16 *)(v27 + 4 + 2 * v16);
          int v43 = *(unsigned __int16 *)(v27 + 4 + 2 * v17);
          int v44 = *(unsigned __int16 *)(v27 + 4 + 2 * v18);
          int v45 = *(unsigned __int16 *)(v27 + 6);
          int v46 = *(unsigned __int16 *)(v27 + 4 + 2 * v24);
          int v47 = ((v43 - v45) & ((v43 - v45) >> 31)) + v45;
          if (v43 <= v45) {
            int v48 = *(unsigned __int16 *)(v27 + 6);
          }
          else {
            int v48 = *(unsigned __int16 *)(v27 + 4 + 2 * v17);
          }
          unsigned int v49 = 16 * v48 / v47;
          if (v47 >= 100) {
            unsigned int v50 = v49;
          }
          else {
            unsigned int v50 = 0;
          }
          int v51 = ((v44 - v39) & ((v44 - v39) >> 31)) + v39;
          if (v44 <= v39) {
            int v52 = v39;
          }
          else {
            int v52 = v44;
          }
          unsigned int v53 = 16 * v52 / v51;
          if (v51 >= 100) {
            unsigned int v54 = v53;
          }
          else {
            unsigned int v54 = 0;
          }
          unsigned int v55 = v50 * v50 + v54 * v54;
          if (v55 >= 0xFFFF) {
            __int16 v56 = -1;
          }
          else {
            __int16 v56 = v55;
          }
          int v57 = (v25
               * *(unsigned __int16 *)(v63
                                     + 2
                                     * *(unsigned __int16 *)(v77
                                                           + ((v41 + ((v37 + v40 + v42 + v46 + 2) >> 2) + 1) & 0x7FFFFFFE)))
               + 2048) >> 12;
          int v58 = 6 * v57 * v57;
          if (v58 <= v80)
          {
            int v31 = v73;
            char v30 = v74;
            unsigned int v29 = v72;
          }
          else
          {
            if ((v58 & v76) != v23)
            {
              if (v58 < 0x1000)
              {
                char v14 = 0;
                int v13 = 0;
              }
              else
              {
                char v59 = -1;
                int v60 = v58;
                do
                {
                  unsigned int v61 = v60 >> 13;
                  v60 >>= 1;
                  ++v59;
                }
                while (v61);
                int v13 = 1 << v59;
                char v14 = v59 + 1;
              }
              int v76 = -2048 << v14;
              int v23 = 2048 << v14;
            }
            unsigned int v29 = (*(_DWORD *)(v75 + 4 * ((v13 + v58) >> v14)) + 1024) >> 11;
            char v30 = v14;
            int v31 = v13;
          }
          unsigned int v32 = (((v41 - v40) * (v41 - v40)
                + (v41 - v37) * (v41 - v37)
                + (v41 - v42) * (v41 - v42)
                + (v45 - v43) * (v45 - v43)
                + (v39 - v44) * (v39 - v44)
                + (v41 - v46) * (v41 - v46)
                + v31) >> v30)
              * v29
              + 32;
          __int16 v33 = v32 > 0x3FFF7F;
          unsigned int v34 = ((int)((v32 >> 3) - 1048560) >> 5) + 0x4000;
          __int16 v35 = v33 << 15;
          if (v34 > 0x8000) {
            LOWORD(v34) = v35;
          }
          *((_WORD *)v21 + 2) = v34;
          *((_WORD *)v21 + 3) = v56;
          v28 += 2;
          uint64_t v26 = v38 + 4;
          unint64_t v21 = v38;
          unint64_t v27 = v36;
          int v25 = v81;
        }
        while (v28 < v79);
        *((_DWORD *)v38 + 1) = 0;
        uint64_t v19 = v69 + 2;
        unint64_t v22 = v67 + v64;
        size_t v4 = v66;
        unint64_t v21 = &v71[v66];
      }
      while (v69 + 2 < v65);
    }
  }

  bzero(v21, v4);
}

uint64_t sub_1DDB28A2C(uint64_t a1, void *a2)
{
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[141];
  uint64_t v4 = a2[142];
  uint64_t v5 = (char *)a2[143];
  uint64_t v6 = a2[144];
  uint64_t v181 = a2[145];
  uint64_t v156 = a2[146];
  int v165 = *(_DWORD *)(a1 + 1216);
  int v155 = *(_DWORD *)(a1 + 1220);
  int v170 = *(_DWORD *)(a1 + 1224);
  uint64_t v163 = *(void *)(a1 + 1240);
  uint64_t v164 = *(void *)(a1 + 1232);
  uint64_t v162 = *(void *)(a1 + 1248);
  uint64_t v169 = *(void *)(a1 + 1256);
  int v185 = 0;
  long long v183 = 0u;
  long long v184 = 0u;
  int v7 = (char *)a2[147];
  unsigned int v8 = (char *)a2[148];
  int v9 = (char *)a2[149];
  size_t v10 = 6 * v3;
  memmove(v7, v5, 6 * v3);
  memmove(v8, &v5[v6], 6 * v3);
  uint64_t v177 = v6;
  int v11 = v5;
  uint64_t v12 = &v5[2 * v6];
  uint64_t result = (uint64_t)memmove(v9, v12, 6 * v3);
  if ((unint64_t)(v4 - 2) >= 3)
  {
    char v14 = v12;
    size_t v15 = 6 * v3;
    unint64_t v16 = v3 - 2;
    if (v16 > 2)
    {
      uint64_t v17 = v181 + 2 * v156;
      uint64_t v166 = a1 + 1264;
      unint64_t v167 = v16;
      uint64_t v18 = (uint64_t)&v11[4 * v6 + 24];
      uint64_t v19 = (uint64_t)&v11[3 * v6 + 24];
      uint64_t v20 = 2;
      uint64_t v168 = v6;
      while (1)
      {
        uint64_t v161 = v18;
        uint64_t v157 = v20;
        int32x4_t v182 = v7;
        unint64_t v21 = v14;
        uint64_t v22 = v17;
        uint64_t result = (uint64_t)memmove(v9, v14, v15);
        uint64_t v159 = v22;
        int v160 = v21;
        int v23 = (unsigned __int16 *)(v21 + 12);
        uint64_t v24 = (unsigned char *)(v22 + 2);
        int v25 = v9 + 24;
        uint64_t v26 = v8;
        uint64_t v158 = v19;
        uint64_t v27 = v19;
        uint64_t v28 = v161;
        unsigned int v29 = v182;
        uint64_t v30 = 2;
        __int32 v173 = v9;
        __int32 v174 = v8;
        do
        {
          if (*v24)
          {
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 6 * v30 - 12;
            *(void *)&long long v183 = &v182[v34];
            *((void *)&v183 + 1) = &v8[v34];
            *(void *)&long long v184 = &v9[v34];
            *((void *)&v184 + 1) = (char *)v23 + v6 - 12;
            int v185 = &v23[v177 - 6];
            do
            {
              __int16 v35 = (unsigned __int16 *)&v29[v33];
              unsigned int v36 = *(unsigned __int16 *)&v29[v33];
              unsigned int v37 = *(unsigned __int16 *)&v29[v33 + 6];
              if ((int)v36 >= (int)v37) {
                int v38 = *(unsigned __int16 *)&v29[v33 + 6];
              }
              else {
                int v38 = *(unsigned __int16 *)&v29[v33];
              }
              if (v36 <= v37) {
                unsigned int v36 = *(unsigned __int16 *)&v29[v33 + 6];
              }
              unsigned int v39 = v35[6];
              if (v38 >= (int)v39) {
                int v38 = v35[6];
              }
              unsigned int v40 = v35[9];
              if (v36 <= v39) {
                unsigned int v36 = v35[6];
              }
              if (v38 >= (int)v40) {
                int v41 = v35[9];
              }
              else {
                int v41 = v38;
              }
              if (v36 <= v40) {
                unsigned int v36 = v35[9];
              }
              unsigned int v42 = v35[12];
              if (v41 >= (int)v42) {
                int v41 = v42;
              }
              if (v36 > v42) {
                unsigned int v42 = v36;
              }
              int v43 = (unsigned __int16 *)&v26[v33];
              int v44 = *(unsigned __int16 *)&v26[v33];
              if (v41 >= v44) {
                int v41 = *(unsigned __int16 *)&v26[v33];
              }
              if ((int)v42 <= v44) {
                unsigned int v42 = *(unsigned __int16 *)&v26[v33];
              }
              unsigned int v45 = v43[3];
              if (v41 >= (int)v45) {
                int v41 = v43[3];
              }
              if (v42 <= v45) {
                unsigned int v42 = v43[3];
              }
              unsigned int v46 = v43[6];
              if (v41 >= (int)v46) {
                int v41 = v43[6];
              }
              if (v42 <= v46) {
                unsigned int v42 = v43[6];
              }
              unsigned int v47 = v43[9];
              if (v41 >= (int)v47) {
                int v41 = v43[9];
              }
              if (v42 <= v47) {
                unsigned int v42 = v43[9];
              }
              unsigned int v48 = v43[12];
              if (v41 >= (int)v48) {
                int v41 = v48;
              }
              unsigned int v49 = &v25[v33];
              if (v42 <= v48) {
                unsigned int v42 = v48;
              }
              int v50 = *((unsigned __int16 *)v49 - 12);
              if (v41 >= v50) {
                int v41 = *((unsigned __int16 *)v49 - 12);
              }
              unsigned int v51 = *((unsigned __int16 *)v49 - 9);
              if ((int)v42 <= v50) {
                unsigned int v42 = *((unsigned __int16 *)v49 - 12);
              }
              if (v41 >= (int)v51) {
                int v52 = *((unsigned __int16 *)v49 - 9);
              }
              else {
                int v52 = v41;
              }
              if (v42 <= v51) {
                unsigned int v42 = *((unsigned __int16 *)v49 - 9);
              }
              unsigned int v53 = *((unsigned __int16 *)v49 - 6);
              if (v52 >= (int)v53) {
                int v52 = *((unsigned __int16 *)v49 - 6);
              }
              if (v42 <= v53) {
                unsigned int v42 = *((unsigned __int16 *)v49 - 6);
              }
              unsigned int v54 = *((unsigned __int16 *)v49 - 3);
              if (v52 >= (int)v54) {
                int v52 = *((unsigned __int16 *)v49 - 3);
              }
              if (v42 <= v54) {
                unsigned int v42 = *((unsigned __int16 *)v49 - 3);
              }
              unsigned int v55 = *(unsigned __int16 *)v49;
              if (v52 >= (int)v55) {
                int v52 = *(unsigned __int16 *)v49;
              }
              if (v42 <= v55) {
                unsigned int v42 = *(unsigned __int16 *)v49;
              }
              __int16 v56 = (unsigned __int16 *)(v27 + v33);
              int v57 = *(unsigned __int16 *)(v27 + v33 - 24);
              if (v52 >= v57) {
                int v52 = *(unsigned __int16 *)(v27 + v33 - 24);
              }
              if ((int)v42 <= v57) {
                unsigned int v42 = *(unsigned __int16 *)(v27 + v33 - 24);
              }
              unsigned int v58 = *(v56 - 9);
              if (v52 >= (int)v58) {
                int v52 = *(v56 - 9);
              }
              if (v42 <= v58) {
                unsigned int v42 = *(v56 - 9);
              }
              unsigned int v59 = *(v56 - 6);
              if (v52 >= (int)v59) {
                int v52 = *(v56 - 6);
              }
              unsigned int v60 = *(v56 - 3);
              if (v42 <= v59) {
                unsigned int v42 = *(v56 - 6);
              }
              if (v52 >= (int)v60) {
                int v52 = *(v56 - 3);
              }
              if (v42 <= v60) {
                unsigned int v42 = *(v56 - 3);
              }
              unsigned int v61 = *v56;
              if (v52 >= (int)v61) {
                int v52 = v61;
              }
              if (v42 <= v61) {
                unsigned int v42 = v61;
              }
              unint64_t v62 = (unsigned __int16 *)(v28 + v33);
              int v63 = *(unsigned __int16 *)(v28 + v33 - 24);
              if (v52 >= v63) {
                int v52 = *(unsigned __int16 *)(v28 + v33 - 24);
              }
              if ((int)v42 <= v63) {
                unsigned int v42 = *(unsigned __int16 *)(v28 + v33 - 24);
              }
              unsigned int v64 = *(v62 - 9);
              if (v52 >= (int)v64) {
                int v52 = *(v62 - 9);
              }
              if (v42 <= v64) {
                unsigned int v42 = *(v62 - 9);
              }
              unsigned int v65 = *(v62 - 6);
              if (v52 >= (int)v65) {
                int v52 = *(v62 - 6);
              }
              if (v42 <= v65) {
                unsigned int v42 = *(v62 - 6);
              }
              unsigned int v66 = *(v62 - 3);
              if (v52 >= (int)v66) {
                int v52 = *(v62 - 3);
              }
              if (v42 <= v66) {
                unsigned int v42 = *(v62 - 3);
              }
              unsigned int v67 = *v62;
              if (v52 >= (int)v67) {
                int v52 = v67;
              }
              *(int *)((char *)&v189 + v32) = v52;
              if (v42 <= v67) {
                unsigned int v42 = v67;
              }
              *(int *)((char *)&v186 + v32) = v42;
              v33 += 2;
              v32 += 4;
            }
            while (v33 != 6);
            int v68 = v186 - v189;
            uint64_t result = v187 - v190 > v186 - v189;
            if (v187 - v190 > v186 - v189) {
              int v68 = v187 - v190;
            }
            if (v188 - v191 > v68)
            {
              int v68 = v188 - v191;
              uint64_t result = 2;
            }
            if (v68)
            {
              uint64_t v69 = 0;
              int v70 = 0;
              int v71 = 0;
              int v72 = 0;
              int v73 = 0;
              int v74 = 0;
              int v75 = 0;
              int v76 = 0;
              int v77 = 0;
              int v78 = (*(&v186 + result) + *(&v189 + result) + 1) >> 1;
              do
              {
                unint64_t v79 = *(unsigned __int16 **)((char *)&v183 + v69);
                int v80 = *v79;
                int v81 = v75 + v80;
                int v82 = v79[1];
                int v83 = v76 + v82;
                int v84 = v79[2];
                int v85 = v77 + v84;
                int v86 = v71 + v80;
                int v87 = v72 + v82;
                int v88 = v73 + v84;
                if (v78 <= v79[result])
                {
                  int v81 = v75;
                }
                else
                {
                  int v77 = v85;
                  int v76 = v83;
                }
                if (v78 <= v79[result]) {
                  int v73 = v88;
                }
                else {
                  ++v74;
                }
                if (v78 > v79[result])
                {
                  int v86 = v71;
                }
                else
                {
                  int v72 = v87;
                  ++v70;
                }
                int v89 = v79[3];
                int v90 = v79[4];
                int v91 = v79[5];
                int v92 = v81 + v89;
                int v93 = v76 + v90;
                int v94 = v77 + v91;
                int v95 = v86 + v89;
                int v96 = v72 + v90;
                int v97 = v73 + v91;
                if (v78 <= v79[result + 3])
                {
                  int v73 = v97;
                }
                else
                {
                  int v77 = v94;
                  int v76 = v93;
                  int v81 = v92;
                  ++v74;
                }
                if (v78 <= v79[result + 3])
                {
                  int v72 = v96;
                  int v86 = v95;
                  ++v70;
                }
                int v98 = v79[6];
                int v99 = v79[7];
                int v100 = v79[8];
                int v101 = v81 + v98;
                int v102 = v76 + v99;
                int v103 = v77 + v100;
                int v104 = v86 + v98;
                int v105 = v72 + v99;
                int v106 = v73 + v100;
                if (v78 <= v79[result + 6])
                {
                  int v73 = v106;
                }
                else
                {
                  int v77 = v103;
                  int v76 = v102;
                  int v81 = v101;
                  ++v74;
                }
                if (v78 <= v79[result + 6])
                {
                  int v72 = v105;
                  int v86 = v104;
                  ++v70;
                }
                int v107 = v79[9];
                int v108 = v79[10];
                int v109 = v79[11];
                int v110 = v81 + v107;
                int v111 = v76 + v108;
                int v112 = v77 + v109;
                int v113 = v86 + v107;
                int v114 = v72 + v108;
                int v115 = v73 + v109;
                if (v78 <= v79[result + 9])
                {
                  int v73 = v115;
                }
                else
                {
                  int v77 = v112;
                  int v76 = v111;
                  int v81 = v110;
                  ++v74;
                }
                if (v78 <= v79[result + 9])
                {
                  int v72 = v114;
                  int v86 = v113;
                  ++v70;
                }
                int v117 = v79[12];
                float v116 = v79 + 12;
                int v118 = v116[result];
                int v119 = v116[1];
                LODWORD(v116) = v116[2];
                BOOL v120 = v78 <= v118;
                int v121 = v81 + v117;
                int v122 = v76 + v119;
                int v123 = v77 + v116;
                int v124 = v86 + v117;
                int v125 = v72 + v119;
                int v126 = v73 + v116;
                if (v120)
                {
                  int v75 = v81;
                }
                else
                {
                  int v77 = v123;
                  int v76 = v122;
                  int v75 = v121;
                }
                if (v120) {
                  int v73 = v126;
                }
                else {
                  ++v74;
                }
                if (v120) {
                  int v72 = v125;
                }
                if (v120) {
                  int v71 = v124;
                }
                else {
                  int v71 = v86;
                }
                if (v120) {
                  ++v70;
                }
                v69 += 8;
              }
              while (v69 != 40);
              uint64_t v127 = *(unsigned __int16 *)(v169 + 2 * *v23);
              uint64_t v128 = *(unsigned __int16 *)(v169 + 2 * v23[1]);
              uint64_t v129 = *(unsigned __int16 *)(v169 + 2 * v23[2]);
              int v130 = *(_DWORD *)(v166 + 4 * v74);
              unsigned int v179 = v130 * v75;
              int v131 = (v130 * v75) >> 15;
              unsigned int v178 = v130 * v76;
              int v132 = (v130 * v76) >> 15;
              int v133 = (v130 * v77) >> 15;
              int v134 = *(_DWORD *)(v166 + 4 * v70);
              unsigned int v176 = v134 * v71;
              int v135 = (v134 * v71) >> 15;
              unsigned int v175 = v134 * v72;
              int v136 = (v134 * v72) >> 15;
              int v171 = v71 + v75;
              int v172 = v72 + v76;
              int v137 = *(unsigned __int16 *)(v169 + 2 * v131);
              int v138 = *(unsigned __int16 *)(v169 + 2 * v132);
              __int16 v180 = v133;
              int v139 = *(unsigned __int16 *)(v169 + 2 * v133);
              int v140 = (v134 * v73) >> 15;
              unsigned int v141 = *(unsigned __int16 *)(v169 + 2 * v135);
              unsigned int v142 = *(unsigned __int16 *)(v169 + 2 * v136);
              int v143 = v73 + v77;
              unsigned int v144 = *(unsigned __int16 *)(v169 + 2 * v140);
              int v145 = (((int)v127 - v137) >> 1) * (((int)v127 - v137) >> 1);
              if (v170)
              {
                uint64_t result = (3 * v137);
                if (result >= v141
                  && (uint64_t result = (3 * v138), result >= v142)
                  && (uint64_t result = (3 * v139), result >= v144)
                  || v74 == 1)
                {
                  unsigned int v146 = v145
                       + (((int)v128 - v138) >> 1) * (((int)v128 - v138) >> 1)
                       + (((int)v129 - v139) >> 1) * (((int)v129 - v139) >> 1);
                  unsigned int v147 = ((int)(v127 - v141) >> 1) * ((int)(v127 - v141) >> 1)
                       + ((int)(v128 - v142) >> 1) * ((int)(v128 - v142) >> 1)
                       + ((int)(v129 - v144) >> 1) * ((int)(v129 - v144) >> 1);
                  uint64_t result = 9 * v146;
                  if (result >= v147)
                  {
                    uint64_t result = 9 * v147;
                    unint64_t v16 = v167;
                    uint64_t v6 = v168;
                    int v9 = v173;
                    unsigned int v8 = v174;
                    if (result < v146) {
                      goto LABEL_6;
                    }
                    if (v74 <= 16)
                    {
                      if (v70 <= 16)
                      {
                        unsigned __int16 *v23 = (v171 * v155) >> 15;
                        v23[1] = (v172 * v155) >> 15;
                        unsigned int v31 = (v143 * v155) >> 15;
                        goto LABEL_7;
                      }
LABEL_6:
                      unsigned __int16 *v23 = v176 >> 15;
                      v23[1] = v175 >> 15;
                      LOWORD(v31) = v140;
LABEL_7:
                      v23[2] = v31;
                      goto LABEL_8;
                    }
LABEL_176:
                    unsigned __int16 *v23 = v179 >> 15;
                    v23[1] = v178 >> 15;
LABEL_169:
                    LOWORD(v31) = v180;
                    goto LABEL_7;
                  }
                }
              }
              else
              {
                int v148 = (v165 * *(unsigned __int16 *)(v164 + 2 * v127) + 2048) >> 12;
                int v149 = (v165 * *(unsigned __int16 *)(v163 + 2 * v128) + 2048) >> 12;
                unsigned int v150 = v148 * v148
                     + v149 * v149
                     + ((v165 * *(unsigned __int16 *)(v162 + 2 * v129) + 2048) >> 12)
                     * ((v165 * *(unsigned __int16 *)(v162 + 2 * v129) + 2048) >> 12);
                uint64_t result = (v145
                                      + (((int)v128 - v138) >> 1) * (((int)v128 - v138) >> 1)
                                      + (((int)v129 - v139) >> 1) * (((int)v129 - v139) >> 1));
                if (result >= v150 || v74 == 1)
                {
                  uint64_t result = (((int)(v127 - v141) >> 1) * ((int)(v127 - v141) >> 1)
                                        + ((int)(v128 - v142) >> 1) * ((int)(v128 - v142) >> 1)
                                        + ((int)(v129 - v144) >> 1) * ((int)(v129 - v144) >> 1));
                  BOOL v151 = result >= v150 || v70 == 1;
                  int v9 = v173;
                  unsigned int v8 = v174;
                  if (!v151)
                  {
                    unsigned __int16 *v23 = v176 >> 15;
                    v23[1] = v175 >> 15;
                    LOWORD(v31) = v140;
                    unint64_t v16 = v167;
                    uint64_t v6 = v168;
                    goto LABEL_7;
                  }
                  unint64_t v16 = v167;
                  uint64_t v6 = v168;
                  if (v74 <= 16)
                  {
                    if (v70 <= 16)
                    {
                      unsigned __int16 *v23 = (v171 * v155) >> 15;
                      v23[1] = (v172 * v155) >> 15;
                      unsigned int v31 = (v143 * v155) >> 15;
                      goto LABEL_7;
                    }
                    goto LABEL_6;
                  }
                  goto LABEL_176;
                }
              }
              unsigned __int16 *v23 = v179 >> 15;
              v23[1] = v178 >> 15;
              unint64_t v16 = v167;
              uint64_t v6 = v168;
              int v9 = v173;
              unsigned int v8 = v174;
              goto LABEL_169;
            }
          }
LABEL_8:
          ++v30;
          v23 += 3;
          ++v24;
          v29 += 6;
          v28 += 6;
          v27 += 6;
          v25 += 6;
          v26 += 6;
        }
        while (v30 != v16);
        uint64_t v20 = v157 + 1;
        char v14 = &v160[v6];
        uint64_t v17 = v159 + v156;
        size_t v15 = v10;
        uint64_t v18 = v161 + v6;
        uint64_t v19 = v158 + v6;
        int v7 = v8;
        unsigned int v8 = v9;
        int v9 = v182;
        if (v157 + 1 == v4 - 2) {
          return result;
        }
      }
    }
    uint64_t v152 = v4 - 4;
    do
    {
      int v153 = v7;
      int v154 = v14;
      uint64_t result = (uint64_t)memmove(v9, v14, v10);
      char v14 = &v154[v6];
      int v7 = v8;
      unsigned int v8 = v9;
      int v9 = v153;
      --v152;
    }
    while (v152);
  }
  return result;
}

uint64_t sub_1DDB293D4(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[150];
  uint64_t v5 = a2[151];
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2[154];
    uint64_t v9 = *(void *)(a1 + 1408);
    uint64_t v10 = a2[152];
    uint64_t v11 = a2[153];
    do
    {
      uint64_t v12 = 0;
      uint64_t v13 = v4;
      do
      {
        char v14 = (_WORD *)(v11 + v12);
        *char v14 = *(_WORD *)(v9 + 2 * *(unsigned __int16 *)(v10 + v12));
        v14[1] = *(_WORD *)(v9 + 2 * *(unsigned __int16 *)(v10 + v12 + 2));
        v14[2] = *(_WORD *)(v9 + 2 * *(unsigned __int16 *)(v10 + v12 + 4));
        v12 += 6;
        --v13;
      }
      while (v13);
      ++v7;
      v10 += v8;
      v11 += v8;
    }
    while (v7 != v5);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(a1 + 1488))(a1, a2);
  unint64_t v16 = *(uint64_t (**)(uint64_t, void *))(a1 + 1496);
  if (v16)
  {
    return v16(a1, a2);
  }
  return result;
}

unint64_t sub_1DDB294B0(unint64_t result, void *a2)
{
  uint64_t v2 = a2[150];
  uint64_t v3 = a2[151];
  float v259 = (_WORD *)a2[153];
  uint64_t v4 = a2[154];
  uint64_t v5 = (unsigned __int16 *)a2[155];
  uint64_t v297 = a2[156];
  uint64_t v258 = a2[160];
  __dst = (unsigned __int16 *)a2[157];
  float v260 = (unsigned __int16 *)a2[158];
  int v290 = *(_DWORD *)(result + 1444);
  int v291 = *(_DWORD *)(result + 1440);
  signed int v289 = *(_DWORD *)(result + 1448);
  int v274 = *(_DWORD *)(result + 1452);
  int v292 = *(_DWORD *)(result + 1456);
  int v239 = *(_DWORD *)(result + 1460);
  int v278 = *(_DWORD *)(result + 1464);
  uint64_t v277 = *(void *)(result + 1472);
  int v298 = *(_DWORD *)(result + 1480);
  int v264 = *(_DWORD *)(result + 1484);
  uint64_t v287 = *(void *)(result + 1424);
  uint64_t v288 = *(void *)(result + 1416);
  uint64_t v265 = a2[161];
  uint64_t v275 = 2 * v265;
  uint64_t v286 = *(void *)(result + 1432);
  uint64_t v266 = v2;
  uint64_t v272 = v3;
  uint64_t v276 = v4;
  if (v3)
  {
    uint64_t v6 = 0;
    unint64_t v250 = v2 - 2;
    unint64_t v262 = v2 - 1;
    uint64_t __len = 6 * v2;
    unint64_t v7 = v2 - 4;
    BOOL v8 = v260 + 6 >= &__dst[3 * v2] || __dst >= &v260[3 * v2 - 6];
    unint64_t v242 = v7 & 0xFFFFFFFFFFFFFFF8 | 2;
    uint64_t v243 = v2 - 4;
    unint64_t v244 = v7 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = 3 * (v7 & 0xFFFFFFFFFFFFFFF8);
    int32x4_t v240 = &__dst[v9 + 6];
    int32x4_t v241 = &v260[v9 + 6];
    char v11 = !v8 || v7 < 8;
    char v245 = v11;
    uint64_t v257 = a2[160];
    unsigned int v295 = (unsigned __int16 *)a2[155];
    uint64_t v12 = (_WORD *)a2[153];
    float v293 = v5;
    while (1)
    {
      uint64_t v254 = v6;
      float v256 = v12;
      uint64_t result = (unint64_t)memmove(__dst, v12, __len);
      *float v260 = (__dst[6] - *__dst + 8 * *__dst + 4 * (__dst[3] + *__dst) + 8) >> 4;
      v260[1] = (__dst[7] - __dst[1] + 8 * __dst[1] + 4 * (__dst[4] + __dst[1]) + 8) >> 4;
      v260[2] = (__dst[8] - __dst[2] + 8 * __dst[2] + 4 * (__dst[5] + __dst[2]) + 8) >> 4;
      v260[3] = (*__dst + 6 * __dst[3] + __dst[9] + 4 * (*__dst + __dst[6]) + 8) >> 4;
      v260[4] = (__dst[1] + 6 * __dst[4] + __dst[10] + 4 * (__dst[1] + __dst[7]) + 8) >> 4;
      v260[5] = (__dst[2] + 6 * __dst[5] + __dst[11] + 4 * (__dst[2] + __dst[8]) + 8) >> 4;
      uint64_t v13 = v260 + 6;
      char v14 = __dst + 6;
      if (v250 < 3) {
        goto LABEL_21;
      }
      if (v245) {
        break;
      }
      unint64_t v16 = v244;
      uint64_t v17 = (__int16 *)(v260 + 6);
      uint64_t v18 = (const __int16 *)(__dst + 6);
      uint64_t v19 = (const __int16 *)(__dst + 6);
      v20.i64[0] = 0x6000600060006;
      v20.i64[1] = 0x6000600060006;
      do
      {
        unint64_t v21 = v18 + 3;
        uint64_t v22 = v18 - 3;
        int16x8x3_t v299 = vld3q_s16(v19);
        v19 += 24;
        int16x8x3_t v301 = vld3q_s16(v21);
        int16x8x3_t v304 = vld3q_s16(v22);
        int v23 = v18 + 6;
        int16x8x3_t v306 = vld3q_s16(v23);
        uint64_t v24 = v18 - 6;
        int16x8x3_t v308 = vld3q_s16(v24);
        v310.val[0] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v299.val[0].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v306.val[0].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v304.val[0].i8, *(uint16x4_t *)v301.val[0].i8), 2uLL)), *(uint16x4_t *)v308.val[0].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v306.val[0]),
                                                                (uint16x8_t)v299.val[0],
                                                                v20),
                                                   vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v304.val[0], (uint16x8_t)v301.val[0]), 2uLL)), (uint16x8_t)v308.val[0]), 4uLL);
        v310.val[1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v299.val[1].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v306.val[1].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v304.val[1].i8, *(uint16x4_t *)v301.val[1].i8), 2uLL)), *(uint16x4_t *)v308.val[1].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v306.val[1]),
                                                                (uint16x8_t)v299.val[1],
                                                                v20),
                                                   vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v304.val[1], (uint16x8_t)v301.val[1]), 2uLL)), (uint16x8_t)v308.val[1]), 4uLL);
        v310.val[2] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v299.val[2].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v306.val[2].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v304.val[2].i8, *(uint16x4_t *)v301.val[2].i8), 2uLL)), *(uint16x4_t *)v308.val[2].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v306.val[2]),
                                                                (uint16x8_t)v299.val[2],
                                                                v20),
                                                   vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v304.val[2], (uint16x8_t)v301.val[2]), 2uLL)), (uint16x8_t)v308.val[2]), 4uLL);
        vst3q_s16(v17, v310);
        v17 += 24;
        uint64_t v18 = v19;
        v16 -= 8;
      }
      while (v16);
      uint64_t v13 = v241;
      uint64_t v15 = v242;
      char v14 = v240;
      if (v243 != v244) {
        goto LABEL_19;
      }
LABEL_21:
      *uint64_t v13 = (v14[3] + 6 * *v14 + *(v14 - 6) + 4 * (*(v14 - 3) + v14[3]) + 8) >> 4;
      v13[1] = (v14[4] + 6 * v14[1] + *(v14 - 5) + 4 * (*(v14 - 2) + v14[4]) + 8) >> 4;
      v13[2] = (v14[5] + 6 * v14[2] + *(v14 - 4) + 4 * (*(v14 - 1) + v14[5]) + 8) >> 4;
      v13[3] = (*(v14 - 3) - v14[3] + 8 * v14[3] + 4 * (*v14 + v14[3]) + 8) >> 4;
      v13[4] = (*(v14 - 2) - v14[4] + 8 * v14[4] + 4 * (v14[1] + v14[4]) + 8) >> 4;
      v13[5] = (*(v14 - 1) - v14[5] + 8 * v14[5] + 4 * (v14[2] + v14[5]) + 8) >> 4;
      if (v2)
      {
        uint64_t v29 = 0;
        int v30 = 0;
        unint64_t v31 = 0;
        int v32 = 1;
        int v33 = 2;
        int v34 = -v292;
        unsigned int v36 = v256;
        uint64_t v35 = v257;
        unsigned int v37 = v295;
        int v38 = v260;
        uint64_t result = (unint64_t)__dst;
        do
        {
          uint64_t v40 = *v38;
          uint64_t v41 = v38[1];
          uint64_t v42 = v38[2];
          signed int v43 = ((*(unsigned __int16 *)(v288 + 2 * v40) * *(unsigned __int16 *)(v288 + 2 * v40)
                + *(unsigned __int16 *)(v287 + 2 * v41) * *(unsigned __int16 *)(v287 + 2 * v41)
                + *(unsigned __int16 *)(v286 + 2 * v42) * *(unsigned __int16 *)(v286 + 2 * v42))
               * v291) >> v290;
          unsigned int v44 = *v37;
          int v45 = v37[1];
          int v283 = v30;
          uint64_t v284 = v29;
          int v281 = v33;
          int v279 = v34;
          if (v44 <= 0x7F && v298 > v45)
          {
            if (v289 <= v43) {
              signed int v46 = ((*(unsigned __int16 *)(v288 + 2 * v40) * *(unsigned __int16 *)(v288 + 2 * v40)
            }
                    + *(unsigned __int16 *)(v287 + 2 * v41) * *(unsigned __int16 *)(v287 + 2 * v41)
                    + *(unsigned __int16 *)(v286 + 2 * v42) * *(unsigned __int16 *)(v286 + 2 * v42))
                   * v291) >> v290;
            else {
              signed int v46 = v289;
            }
            int v47 = (v31 - v292) & ~(((int)v31 - v292) >> 31);
            if (v292 + (int)v31 < (int)v2) {
              int v48 = v292 + v31 + 1;
            }
            else {
              int v48 = v2;
            }
            int v49 = *(unsigned __int16 *)result;
            int v50 = *(unsigned __int16 *)(result + 2);
            int v51 = *(unsigned __int16 *)(result + 4);
            if (v47 >= v48)
            {
              int v58 = 1;
            }
            else
            {
              uint64_t v52 = 3 * (v34 & ~(v34 >> 31));
              uint64_t v53 = v29 - v52 * 2;
              unsigned int v54 = &__dst[v52 + 2];
              int v55 = v49 + 2;
              int v56 = v50 + 1;
              int v57 = v51 + 2;
              int v58 = 1;
              do
              {
                if (v53)
                {
                  int v59 = *(v54 - 2);
                  int v60 = *(v54 - 1);
                  int v61 = *v54;
                  if (((v55 - v59) >> 2) * ((v55 - v59) >> 2)
                     + ((v56 - v60) >> 1) * ((v56 - v60) >> 1)
                     + ((v57 - v61) >> 2) * ((v57 - v61) >> 2) <= v46)
                  {
                    ++v58;
                    v49 += v59;
                    v50 += v60;
                    v51 += v61;
                  }
                }
                ++v47;
                v53 -= 6;
                v54 += 3;
              }
              while (v47 < v48);
            }
            if (!v278 || !v31 || v58 != 1 || v31 >= v262) {
              goto LABEL_23;
            }
LABEL_76:
            int v93 = *(unsigned __int16 *)(result - 6);
            int v94 = *(unsigned __int16 *)(result - 4);
            int v95 = *(unsigned __int16 *)(result - 2);
            int v96 = *(unsigned __int16 *)(result + 6);
            int v97 = *(unsigned __int16 *)(result + 8);
            int v98 = *(unsigned __int16 *)(result + 10);
            signed int v99 = (2404 * v94 + 1225 * v93 + 467 * v95 + 2048) >> 12;
            signed int v100 = (2404 * *(unsigned __int16 *)(result + 2)
                  + 1225 * *(unsigned __int16 *)result
                  + 467 * *(unsigned __int16 *)(result + 4)
                  + 2048) >> 12;
            signed int v101 = (2404 * v97 + 1225 * v96 + 467 * v98 + 2048) >> 12;
            int v102 = ((v100 - v99) & ((v100 - v99) >> 31)) + v99;
            if (v100 <= v99) {
              signed int v100 = (2404 * v94 + 1225 * v93 + 467 * v95 + 2048) >> 12;
            }
            int v103 = ((v101 - v102) & ((v101 - v102) >> 31)) + v102;
            if (v101 > v100) {
              signed int v100 = (2404 * v97 + 1225 * v96 + 467 * v98 + 2048) >> 12;
            }
            if (3 * v103 < v100)
            {
              LODWORD(v40) = (v93 + v96 + 1) >> 1;
              LODWORD(v41) = (v94 + v97 + 1) >> 1;
              LODWORD(v42) = (v95 + v98 + 1) >> 1;
            }
            else
            {
LABEL_23:
              int v39 = *(_DWORD *)(v277 + 4 * v58);
              LODWORD(v40) = (v39 * v49 + 0x8000) >> 16;
              LODWORD(v41) = (v39 * v50 + 0x8000) >> 16;
              LODWORD(v42) = (v39 * v51 + 0x8000) >> 16;
            }
            goto LABEL_24;
          }
          unsigned int v62 = (v44 + 128) >> 8;
          int v63 = v292 + ((int)(v62 * (v239 - v292) + 64) >> 7);
          if ((int)(v289 + v62 * v274) <= v43) {
            signed int v64 = ((*(unsigned __int16 *)(v288 + 2 * v40) * *(unsigned __int16 *)(v288 + 2 * v40)
          }
                  + *(unsigned __int16 *)(v287 + 2 * v41) * *(unsigned __int16 *)(v287 + 2 * v41)
                  + *(unsigned __int16 *)(v286 + 2 * v42) * *(unsigned __int16 *)(v286 + 2 * v42))
                 * v291) >> v290;
          else {
            signed int v64 = v289 + v62 * v274;
          }
          int v65 = (v31 - v63) & ~(((int)v31 - v63) >> 31);
          if (v63 + (int)v31 < (int)v2) {
            int v66 = v63 + v31 + 1;
          }
          else {
            int v66 = v2;
          }
          if (v298 <= v45)
          {
            if (v65 >= v66) {
              goto LABEL_24;
            }
            unsigned __int16 v268 = v38[2];
            unsigned __int16 v269 = v38[1];
            __int16 v271 = *v38;
            int v51 = 0;
            int v50 = 0;
            int v49 = 0;
            int v58 = 0;
            uint64_t v82 = (v31 - v63) & ~(((int)v31 - v63) >> 31);
            uint64_t v83 = (4 * v82) | 2;
            int v84 = &__dst[(3 * v82) + 1];
            do
            {
              if (v298 > *(unsigned __int16 *)((char *)v295 + v83))
              {
                ++v58;
                v49 += *(v84 - 1);
                v50 += *v84;
                v51 += v84[1];
              }
              ++v65;
              v84 += 3;
              v83 += 4;
            }
            while (v65 < v66);
          }
          else
          {
            unsigned __int16 v268 = v38[2];
            unsigned __int16 v269 = v38[1];
            __int16 v271 = *v38;
            uint64_t v67 = v33;
            uint64_t v68 = v30;
            int v69 = *(unsigned __int16 *)result + 2;
            int v70 = *(unsigned __int16 *)(result + 2) + 1;
            int v71 = *(unsigned __int16 *)(result + 4) + 2;
            if ((v264 & *(unsigned char *)(v35 + v265)) != 0)
            {
              if (v65 <= (int)v31)
              {
                int v51 = 0;
                int v50 = 0;
                int v49 = 0;
                int v58 = 0;
                int v104 = &__dst[3 * v31];
                int v105 = v32;
                do
                {
                  int v106 = *v104;
                  int v107 = v104[1];
                  int v108 = v104[2];
                  int v109 = (v69 - v106) >> 2;
                  int v110 = (v71 - v108) >> 2;
                  int v111 = ((v70 - v107) >> 1) * ((v70 - v107) >> 1);
                  if (v111 + v109 * v109 + v110 * v110 > 3 * v64) {
                    break;
                  }
                  signed int v112 = v111 + (v110 + v109) * (v110 + v109);
                  if (v295[v68] >= 0x80u && v112 <= v64)
                  {
                    ++v58;
                    v49 += v106;
                    v50 += v107;
                    v51 += v108;
                  }
                  --v105;
                  v68 -= 2;
                  v104 -= 3;
                }
                while (v105 > v65);
              }
              else
              {
                int v58 = 0;
                int v49 = 0;
                int v50 = 0;
                int v51 = 0;
              }
              uint64_t v72 = (int)v31 + 1;
              uint64_t v2 = v266;
              if ((int)v72 < v66)
              {
                int v73 = &__dst[3 * v72];
                do
                {
                  int v74 = *v73;
                  int v75 = v73[1];
                  int v76 = v73[2];
                  int v77 = (v69 - v74) >> 2;
                  int v78 = (v71 - v76) >> 2;
                  int v79 = ((v70 - v75) >> 1) * ((v70 - v75) >> 1);
                  if (v79 + v77 * v77 + v78 * v78 > 3 * v64) {
                    break;
                  }
                  signed int v80 = v79 + (v78 + v77) * (v78 + v77);
                  if (v295[v67] >= 0x80u && v80 <= v64)
                  {
                    ++v58;
                    v49 += v74;
                    v50 += v75;
                    v51 += v76;
                  }
                  --v66;
                  v67 += 2;
                  v73 += 3;
                }
                while (v32 != v66);
              }
            }
            else
            {
              if (v65 <= (int)v31)
              {
                int v51 = 0;
                int v50 = 0;
                int v49 = 0;
                int v58 = 0;
                int v114 = &__dst[3 * v31];
                int v115 = v32;
                do
                {
                  int v116 = *v114;
                  int v117 = v114[1];
                  int v118 = v114[2];
                  int v119 = (v69 - v116) >> 2;
                  int v120 = (v70 - v117) >> 1;
                  int v121 = (v71 - v118) >> 2;
                  if (v119 * v119 + v120 * v120 + v121 * v121 > 3 * v64) {
                    break;
                  }
                  if (v295[v68] >= 0x80u
                    && (v120 + ((v119 + v121 + 1) >> 1)) * (v120 + ((v119 + v121 + 1) >> 1)) <= v64)
                  {
                    ++v58;
                    v49 += v116;
                    v50 += v117;
                    v51 += v118;
                  }
                  --v115;
                  v68 -= 2;
                  v114 -= 3;
                }
                while (v115 > v65);
              }
              else
              {
                int v58 = 0;
                int v49 = 0;
                int v50 = 0;
                int v51 = 0;
              }
              uint64_t v85 = (int)v31 + 1;
              uint64_t v2 = v266;
              if ((int)v85 < v66)
              {
                int v86 = &__dst[3 * v85];
                do
                {
                  int v87 = *v86;
                  int v88 = v86[1];
                  int v89 = v86[2];
                  int v90 = (v69 - v87) >> 2;
                  int v91 = (v70 - v88) >> 1;
                  int v92 = (v71 - v89) >> 2;
                  if (v90 * v90 + v91 * v91 + v92 * v92 > 3 * v64) {
                    break;
                  }
                  if (v295[v67] >= 0x80u && (v91 + ((v90 + v92 + 1) >> 1)) * (v91 + ((v90 + v92 + 1) >> 1)) <= v64)
                  {
                    ++v58;
                    v49 += v87;
                    v50 += v88;
                    v51 += v89;
                  }
                  --v66;
                  v67 += 2;
                  v86 += 3;
                }
                while (v32 != v66);
              }
            }
          }
          LOWORD(v40) = v271;
          uint64_t v3 = v272;
          LOWORD(v42) = v268;
          LOWORD(v41) = v269;
          if (v58) {
            goto LABEL_76;
          }
LABEL_24:
          *unsigned int v36 = v40;
          ++v31;
          result += 6;
          v38 += 3;
          v36[1] = v41;
          v36[2] = v42;
          v36 += 3;
          v37 += 2;
          ++v35;
          ++v32;
          int v30 = v283 + 2;
          int v33 = v281 + 2;
          uint64_t v29 = v284 + 6;
          int v34 = v279 + 1;
        }
        while (v31 != v2);
      }
      uint64_t v6 = v254 + 1;
      uint64_t v4 = v276;
      uint64_t v12 = (_WORD *)((char *)v256 + v276);
      unsigned int v295 = (unsigned __int16 *)((char *)v295 + v297);
      v257 += v275;
      uint64_t v5 = v293;
      if (v254 + 1 == v3) {
        goto LABEL_101;
      }
    }
    uint64_t v15 = 2;
    uint64_t v13 = v260 + 6;
    char v14 = __dst + 6;
LABEL_19:
    unint64_t v25 = v250 - v15;
    do
    {
      uint64_t v26 = v14;
      int v27 = *v14;
      int v28 = v14[3];
      v14 += 3;
      *uint64_t v13 = (v26[6] + 6 * v27 + 4 * (*(v26 - 3) + v28) + *(v26 - 6) + 8) >> 4;
      v13[1] = (v26[7] + 6 * v26[1] + 4 * (*(v26 - 2) + v26[4]) + *(v26 - 5) + 8) >> 4;
      v13[2] = (v26[8] + 6 * v26[2] + 4 * (*(v26 - 1) + v26[5]) + *(v26 - 4) + 8) >> 4;
      v13 += 3;
      --v25;
    }
    while (v25);
    goto LABEL_21;
  }
LABEL_101:
  if (v2)
  {
    uint64_t v122 = 0;
    unint64_t v255 = v3 - 2;
    unint64_t v270 = v3 - 1;
    unint64_t v123 = v3 - 4;
    BOOL v124 = v260 + 6 >= &__dst[3 * v3] || __dst >= &v260[3 * v3 - 6];
    size_t __lena = v123 & 0xFFFFFFFFFFFFFFF8 | 2;
    uint64_t v251 = v3 - 4;
    unint64_t v252 = v123 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v125 = 3 * (v123 & 0xFFFFFFFFFFFFFFF8);
    v246 = &__dst[v125 + 6];
    unsigned int v247 = &v260[v125 + 6];
    char v127 = !v124 || v123 < 8;
    char v253 = v127;
    uint64_t v128 = v259 + 1;
    v129.i64[0] = 0x6000600060006;
    v129.i64[1] = 0x6000600060006;
    do
    {
      uint64_t v263 = v122;
      if (v3)
      {
        int v130 = v128;
        uint64_t v131 = v3;
        int v132 = __dst;
        do
        {
          unsigned __int16 *v132 = *(v130 - 1);
          v132[1] = *v130;
          v132[2] = v130[1];
          int v130 = (unsigned __int16 *)((char *)v130 + v4);
          v132 += 3;
          --v131;
        }
        while (v131);
      }
      unsigned int v261 = v128;
      *float v260 = (__dst[6] - *__dst + 8 * *__dst + 4 * (__dst[3] + *__dst) + 8) >> 4;
      v260[1] = (__dst[7] - __dst[1] + 8 * __dst[1] + 4 * (__dst[4] + __dst[1]) + 8) >> 4;
      v260[2] = (__dst[8] - __dst[2] + 8 * __dst[2] + 4 * (__dst[5] + __dst[2]) + 8) >> 4;
      v260[3] = (*__dst + 6 * __dst[3] + __dst[9] + 4 * (*__dst + __dst[6]) + 8) >> 4;
      v260[4] = (__dst[1] + 6 * __dst[4] + __dst[10] + 4 * (__dst[1] + __dst[7]) + 8) >> 4;
      v260[5] = (__dst[2] + 6 * __dst[5] + __dst[11] + 4 * (__dst[2] + __dst[8]) + 8) >> 4;
      int v133 = v260 + 6;
      int v134 = __dst + 6;
      if (v255 >= 3)
      {
        if (v253)
        {
          uint64_t v135 = 2;
          int v133 = v260 + 6;
          int v134 = __dst + 6;
LABEL_122:
          unint64_t v144 = v255 - v135;
          do
          {
            int v145 = v134;
            int v146 = *v134;
            int v147 = v134[3];
            v134 += 3;
            *int v133 = (v145[6] + 6 * v146 + 4 * (*(v145 - 3) + v147) + *(v145 - 6) + 8) >> 4;
            v133[1] = (v145[7] + 6 * v145[1] + 4 * (*(v145 - 2) + v145[4]) + *(v145 - 5) + 8) >> 4;
            v133[2] = (v145[8] + 6 * v145[2] + 4 * (*(v145 - 1) + v145[5]) + *(v145 - 4) + 8) >> 4;
            v133 += 3;
            --v144;
          }
          while (v144);
          goto LABEL_124;
        }
        unint64_t v136 = v252;
        int v137 = (__int16 *)(v260 + 6);
        int v138 = (const __int16 *)(__dst + 6);
        int v139 = (const __int16 *)(__dst + 6);
        do
        {
          int v140 = v138 + 3;
          unsigned int v141 = v138 - 3;
          int16x8x3_t v300 = vld3q_s16(v139);
          v139 += 24;
          int16x8x3_t v302 = vld3q_s16(v140);
          int16x8x3_t v305 = vld3q_s16(v141);
          unsigned int v142 = v138 + 6;
          int16x8x3_t v307 = vld3q_s16(v142);
          int v143 = v138 - 6;
          int16x8x3_t v309 = vld3q_s16(v143);
          v303.val[0] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v300.val[0].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v307.val[0].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v305.val[0].i8, *(uint16x4_t *)v302.val[0].i8), 2uLL)), *(uint16x4_t *)v309.val[0].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v307.val[0]),
                                                                  (uint16x8_t)v300.val[0],
                                                                  v129),
                                                     vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v305.val[0], (uint16x8_t)v302.val[0]), 2uLL)), (uint16x8_t)v309.val[0]), 4uLL);
          v303.val[1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v300.val[1].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v307.val[1].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v305.val[1].i8, *(uint16x4_t *)v302.val[1].i8), 2uLL)), *(uint16x4_t *)v309.val[1].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v307.val[1]),
                                                                  (uint16x8_t)v300.val[1],
                                                                  v129),
                                                     vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v305.val[1], (uint16x8_t)v302.val[1]), 2uLL)), (uint16x8_t)v309.val[1]), 4uLL);
          v303.val[2] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v300.val[2].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v307.val[2].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v305.val[2].i8, *(uint16x4_t *)v302.val[2].i8), 2uLL)), *(uint16x4_t *)v309.val[2].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v307.val[2]),
                                                                  (uint16x8_t)v300.val[2],
                                                                  v129),
                                                     vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v305.val[2], (uint16x8_t)v302.val[2]), 2uLL)), (uint16x8_t)v309.val[2]), 4uLL);
          vst3q_s16(v137, v303);
          v137 += 24;
          int v138 = v139;
          v136 -= 8;
        }
        while (v136);
        int v133 = v247;
        uint64_t v135 = __lena;
        int v134 = v246;
        if (v251 != v252) {
          goto LABEL_122;
        }
      }
LABEL_124:
      *int v133 = (v134[3] + 6 * *v134 + *(v134 - 6) + 4 * (*(v134 - 3) + v134[3]) + 8) >> 4;
      v133[1] = (v134[4] + 6 * v134[1] + *(v134 - 5) + 4 * (*(v134 - 2) + v134[4]) + 8) >> 4;
      v133[2] = (v134[5] + 6 * v134[2] + *(v134 - 4) + 4 * (*(v134 - 1) + v134[5]) + 8) >> 4;
      v133[3] = (*(v134 - 3) - v134[3] + 8 * v134[3] + 4 * (*v134 + v134[3]) + 8) >> 4;
      v133[4] = (*(v134 - 2) - v134[4] + 8 * v134[4] + 4 * (v134[1] + v134[4]) + 8) >> 4;
      v133[5] = (*(v134 - 1) - v134[5] + 8 * v134[5] + 4 * (v134[2] + v134[5]) + 8) >> 4;
      if (v3)
      {
        uint64_t v148 = 0;
        unint64_t v149 = 0;
        LODWORD(result) = 1;
        int v150 = -v292;
        uint64_t v151 = v258;
        uint64_t v152 = v259;
        int v153 = v5;
        int v154 = v260;
        int v155 = __dst;
        unsigned int v294 = v5;
        do
        {
          uint64_t v157 = *v154;
          uint64_t v158 = v154[1];
          uint64_t v159 = v154[2];
          signed int v160 = ((*(unsigned __int16 *)(v288 + 2 * v157) * *(unsigned __int16 *)(v288 + 2 * v157)
                 + *(unsigned __int16 *)(v287 + 2 * v158) * *(unsigned __int16 *)(v287 + 2 * v158)
                 + *(unsigned __int16 *)(v286 + 2 * v159) * *(unsigned __int16 *)(v286 + 2 * v159))
                * v291) >> v290;
          unsigned int v161 = *v153;
          int v162 = v153[1];
          uint64_t v296 = v148;
          int v285 = v150;
          if (v161 <= 0x7F && v298 > v162)
          {
            signed int v163 = v289;
            if (v289 <= v160) {
              signed int v163 = ((*(unsigned __int16 *)(v288 + 2 * v157) * *(unsigned __int16 *)(v288 + 2 * v157)
            }
                     + *(unsigned __int16 *)(v287 + 2 * v158) * *(unsigned __int16 *)(v287 + 2 * v158)
                     + *(unsigned __int16 *)(v286 + 2 * v159) * *(unsigned __int16 *)(v286 + 2 * v159))
                    * v291) >> v290;
            int v164 = (v149 - v292) & ~(((int)v149 - v292) >> 31);
            if (v292 + (int)v149 < (int)v3) {
              int v165 = v292 + v149 + 1;
            }
            else {
              int v165 = v3;
            }
            int v166 = *v155;
            int v167 = v155[1];
            int v168 = v155[2];
            if (v164 >= v165)
            {
              int v175 = 1;
            }
            else
            {
              uint64_t v169 = 3 * (v150 & ~(v150 >> 31));
              uint64_t v170 = v148 - v169 * 2;
              int v171 = &__dst[v169 + 2];
              int v172 = v166 + 2;
              int v173 = v167 + 1;
              int v174 = v168 + 2;
              int v175 = 1;
              do
              {
                if (v170)
                {
                  int v176 = *(v171 - 2);
                  int v177 = *(v171 - 1);
                  int v178 = *v171;
                  if (((v172 - v176) >> 2) * ((v172 - v176) >> 2)
                     + ((v173 - v177) >> 1) * ((v173 - v177) >> 1)
                     + ((v174 - v178) >> 2) * ((v174 - v178) >> 2) <= v163)
                  {
                    ++v175;
                    v166 += v176;
                    v167 += v177;
                    v168 += v178;
                  }
                }
                ++v164;
                v170 -= 6;
                v171 += 3;
              }
              while (v164 < v165);
            }
            if (!v278 || !v149 || v175 != 1 || v149 >= v270) {
              goto LABEL_126;
            }
LABEL_196:
            int v228 = *(v155 - 3);
            int v229 = *(v155 - 2);
            int v230 = *(v155 - 1);
            int v231 = v155[3];
            int v232 = v155[4];
            int v233 = v155[5];
            signed int v234 = (2404 * v229 + 1225 * v228 + 467 * v230 + 2048) >> 12;
            signed int v235 = (2404 * v155[1] + 1225 * *v155 + 467 * v155[2] + 2048) >> 12;
            signed int v236 = (2404 * v232 + 1225 * v231 + 467 * v233 + 2048) >> 12;
            int v237 = ((v235 - v234) & ((v235 - v234) >> 31)) + v234;
            if (v235 <= v234) {
              signed int v235 = (2404 * v229 + 1225 * v228 + 467 * v230 + 2048) >> 12;
            }
            int v238 = ((v236 - v237) & ((v236 - v237) >> 31)) + v237;
            if (v236 > v235) {
              signed int v235 = (2404 * v232 + 1225 * v231 + 467 * v233 + 2048) >> 12;
            }
            if (3 * v238 < v235)
            {
              LODWORD(v157) = (v228 + v231 + 1) >> 1;
              LODWORD(v158) = (v229 + v232 + 1) >> 1;
              LODWORD(v159) = (v230 + v233 + 1) >> 1;
            }
            else
            {
LABEL_126:
              int v156 = *(_DWORD *)(v277 + 4 * v175);
              LODWORD(v157) = (v156 * v166 + 0x8000) >> 16;
              LODWORD(v158) = (v156 * v167 + 0x8000) >> 16;
              LODWORD(v159) = (v156 * v168 + 0x8000) >> 16;
            }
            goto LABEL_127;
          }
          unsigned int v179 = (v161 + 128) >> 8;
          int v180 = v292 + ((int)(v179 * (v239 - v292) + 64) >> 7);
          if ((int)(v289 + v179 * v274) <= v160) {
            signed int v181 = ((*(unsigned __int16 *)(v288 + 2 * v157) * *(unsigned __int16 *)(v288 + 2 * v157)
          }
                   + *(unsigned __int16 *)(v287 + 2 * v158) * *(unsigned __int16 *)(v287 + 2 * v158)
                   + *(unsigned __int16 *)(v286 + 2 * v159) * *(unsigned __int16 *)(v286 + 2 * v159))
                  * v291) >> v290;
          else {
            signed int v181 = v289 + v179 * v274;
          }
          int v182 = (v149 - v180) & ~(((int)v149 - v180) >> 31);
          if (v180 + (int)v149 < (int)v3) {
            int v183 = v180 + v149 + 1;
          }
          else {
            int v183 = v3;
          }
          if (v298 <= v162)
          {
            if (v182 >= v183) {
              goto LABEL_127;
            }
            int v273 = v154[2];
            int v280 = v154[1];
            int v282 = *v154;
            int v168 = 0;
            int v167 = 0;
            int v166 = 0;
            int v175 = 0;
            uint64_t v189 = (v149 - v180) & ~(((int)v149 - v180) >> 31);
            uint64_t v190 = v297 * v189 + 2;
            int v191 = &__dst[(3 * v189) + 1];
            do
            {
              if (v298 > *(unsigned __int16 *)((char *)v5 + v190))
              {
                ++v175;
                v166 += *(v191 - 1);
                v167 += *v191;
                v168 += v191[1];
              }
              v190 += v297;
              ++v182;
              v191 += 3;
            }
            while (v182 < v183);
          }
          else
          {
            int v280 = v154[1];
            uint64_t v184 = v297 * (int)result;
            uint64_t v185 = v297 * (int)v149;
            int v186 = *v155 + 2;
            int v187 = v155[1] + 1;
            int v188 = v155[2] + 2;
            int v282 = *v154;
            int v273 = v154[2];
            if ((v264 & *(unsigned char *)(v151 + v265)) != 0)
            {
              if (v182 <= (int)v149)
              {
                int v168 = 0;
                int v167 = 0;
                int v166 = 0;
                int v175 = 0;
                int v200 = &__dst[3 * v149];
                int v201 = result;
                while (1)
                {
                  int v202 = *v200;
                  int v203 = v200[1];
                  int v204 = v200[2];
                  int v205 = (v186 - v202) >> 2;
                  int v206 = (v188 - v204) >> 2;
                  int v207 = ((v187 - v203) >> 1) * ((v187 - v203) >> 1);
                  if (v207 + v205 * v205 + v206 * v206 > 3 * v181) {
                    break;
                  }
                  signed int v208 = v207 + (v206 + v205) * (v206 + v205);
                  if (*(unsigned __int16 *)((char *)v294 + v185) >= 0x80u && v208 <= v181)
                  {
                    ++v175;
                    v166 += v202;
                    v167 += v203;
                    v168 += v204;
                  }
                  uint64_t v5 = v294;
                  v185 -= v297;
                  --v201;
                  v200 -= 3;
                  if (v201 <= v182) {
                    goto LABEL_184;
                  }
                }
                uint64_t v5 = v294;
              }
              else
              {
                int v175 = 0;
                int v166 = 0;
                int v167 = 0;
                int v168 = 0;
              }
LABEL_184:
              uint64_t v218 = (int)v149 + 1;
              if ((int)v218 >= v183)
              {
                uint64_t v2 = v266;
              }
              else
              {
                uint64_t v2 = v266;
                int32x4_t v219 = &__dst[3 * v218];
                do
                {
                  int v220 = *v219;
                  int v221 = v219[1];
                  int v222 = v219[2];
                  int v223 = (v186 - v220) >> 2;
                  int v224 = (v188 - v222) >> 2;
                  int v225 = ((v187 - v221) >> 1) * ((v187 - v221) >> 1);
                  if (v225 + v223 * v223 + v224 * v224 > 3 * v181) {
                    break;
                  }
                  signed int v226 = v225 + (v224 + v223) * (v224 + v223);
                  if (*(unsigned __int16 *)((char *)v5 + v184) >= 0x80u && v226 <= v181)
                  {
                    ++v175;
                    v166 += v220;
                    v167 += v221;
                    v168 += v222;
                  }
                  v184 += v297;
                  --v183;
                  v219 += 3;
                }
                while (result != v183);
              }
            }
            else
            {
              if (v182 <= (int)v149)
              {
                int v168 = 0;
                int v167 = 0;
                int v166 = 0;
                int v175 = 0;
                int v210 = &__dst[3 * v149];
                int v211 = result;
                do
                {
                  int v212 = *v210;
                  int v213 = v210[1];
                  int v214 = v210[2];
                  int v215 = (v186 - v212) >> 2;
                  int v216 = (v187 - v213) >> 1;
                  int v217 = (v188 - v214) >> 2;
                  if (v215 * v215 + v216 * v216 + v217 * v217 > 3 * v181) {
                    break;
                  }
                  if (*(unsigned __int16 *)((char *)v294 + v185) >= 0x80u
                    && (v216 + ((v215 + v217 + 1) >> 1)) * (v216 + ((v215 + v217 + 1) >> 1)) <= v181)
                  {
                    ++v175;
                    v166 += v212;
                    v167 += v213;
                    v168 += v214;
                  }
                  v185 -= v297;
                  --v211;
                  v210 -= 3;
                }
                while (v211 > v182);
              }
              else
              {
                int v175 = 0;
                int v166 = 0;
                int v167 = 0;
                int v168 = 0;
              }
              uint64_t v192 = (int)v149 + 1;
              if ((int)v192 >= v183)
              {
                uint64_t v2 = v266;
                uint64_t v5 = v294;
              }
              else
              {
                uint64_t v2 = v266;
                int v193 = &__dst[3 * v192];
                uint64_t v5 = v294;
                do
                {
                  int v194 = *v193;
                  int v195 = v193[1];
                  int v196 = v193[2];
                  int v197 = (v186 - v194) >> 2;
                  int v198 = (v187 - v195) >> 1;
                  int v199 = (v188 - v196) >> 2;
                  if (v197 * v197 + v198 * v198 + v199 * v199 > 3 * v181) {
                    break;
                  }
                  if (*(unsigned __int16 *)((char *)v294 + v184) >= 0x80u
                    && (v198 + ((v197 + v199 + 1) >> 1)) * (v198 + ((v197 + v199 + 1) >> 1)) <= v181)
                  {
                    ++v175;
                    v166 += v194;
                    v167 += v195;
                    v168 += v196;
                  }
                  v184 += v297;
                  --v183;
                  v193 += 3;
                }
                while (result != v183);
              }
            }
          }
          uint64_t v3 = v272;
          LODWORD(v159) = v273;
          LODWORD(v158) = v280;
          LODWORD(v157) = v282;
          if (v175) {
            goto LABEL_196;
          }
LABEL_127:
          ++v149;
          v155 += 3;
          *uint64_t v152 = (v157 * v157 + 0x8000) >> 16;
          v152[1] = (v158 * v158 + 0x8000) >> 16;
          v152[2] = (v159 * v159 + 0x8000) >> 16;
          v154 += 3;
          uint64_t v4 = v276;
          uint64_t v152 = (_WORD *)((char *)v152 + v276);
          int v153 = (unsigned __int16 *)((char *)v153 + v297);
          v151 += v275;
          uint64_t result = (result + 1);
          uint64_t v148 = v296 + 6;
          int v150 = v285 + 1;
        }
        while (v149 != v3);
      }
      uint64_t v122 = v263 + 1;
      v5 += 2;
      ++v258;
      v259 += 3;
      uint64_t v128 = v261 + 3;
    }
    while (v263 + 1 != v2);
  }
  return result;
}

unint64_t sub_1DDB2AD84(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[150];
  uint64_t v3 = a2[151];
  uint64_t v4 = (char *)a2[153];
  uint64_t v5 = a2[154];
  uint64_t v6 = (unsigned __int16 *)a2[155];
  uint64_t v157 = a2[156];
  unint64_t v7 = (unsigned __int16 *)a2[157];
  BOOL v8 = (unsigned __int16 *)a2[158];
  uint64_t v9 = a2[159];
  int v165 = *(_DWORD *)(a1 + 1444);
  int v166 = *(_DWORD *)(a1 + 1440);
  int v163 = *(_DWORD *)(a1 + 1452);
  int v164 = *(_DWORD *)(a1 + 1448);
  int v159 = *(_DWORD *)(a1 + 1468);
  uint64_t v156 = *(void *)(a1 + 1472);
  int v10 = *(_DWORD *)(a1 + 1480);
  uint64_t v161 = *(void *)(a1 + 1424);
  uint64_t v162 = *(void *)(a1 + 1416);
  uint64_t v160 = *(void *)(a1 + 1432);
  unint64_t result = (unint64_t)memmove(v7, v4, 6 * v2);
  uint64_t v147 = v3 - 1;
  if ((unint64_t)(v3 - 1) < 2) {
    return result;
  }
  size_t v13 = 6 * v2;
  uint64_t v144 = v2 - 1;
  uint64_t v11 = 6 * v2;
  uint64_t v154 = 6 * v2;
  if ((unint64_t)(v2 - 1) <= 1)
  {
    uint64_t v134 = v3 - 2;
    uint64_t v135 = &v4[v5];
    do
    {
      unint64_t v136 = v8;
      unint64_t result = (unint64_t)memmove(v8, v135, v13);
      size_t v13 = v154;
      v135 += v5;
      BOOL v8 = v7;
      unint64_t v7 = v136;
      --v134;
    }
    while (v134);
    return result;
  }
  unint64_t v143 = v11 + v9 - 6;
  unint64_t v145 = v2 - 2;
  unint64_t v14 = (v2 - 2) & 0xFFFFFFFFFFFFFFF8;
  int v168 = (char *)(v9 + 6);
  uint64_t v139 = 3 * v14;
  unint64_t v140 = v14;
  uint64_t v138 = v9 + 6 + 6 * v14;
  uint64_t v137 = v14 | 1;
  uint64_t v169 = &v4[2 * v5];
  int v155 = (const __int16 *)(v169 + 12);
  uint64_t v171 = v157;
  unsigned int v142 = &v4[2 * v5 + v11];
  unsigned int v141 = &v4[2 * v5 + 12];
  uint64_t v15 = 1;
  uint64_t v16 = v5;
  uint64_t v146 = v5;
  uint64_t v17 = v7;
  uint64_t v18 = 0;
  uint64_t v19 = &v4[v5];
  while (2)
  {
    uint64_t v151 = v15;
    uint16x8_t v20 = v8 + 6;
    size_t v21 = v13;
    memmove(v8, v19, v13);
    uint64_t v158 = v19;
    uint64_t v22 = &v19[v16 + 12];
    int v23 = (const __int16 *)(v17 + 6);
    unsigned int v24 = v17[5] + 2 * v8[5] + *(unsigned __int16 *)&v19[v16 + 10];
    unsigned int v25 = v17[2] + 2 * v8[2] + *(unsigned __int16 *)&v19[v16 + 4];
    unsigned int v26 = v17[4] + 2 * v8[4] + *(unsigned __int16 *)&v19[v16 + 8];
    unsigned int v27 = v17[1] + 2 * v8[1] + *(unsigned __int16 *)&v19[v16 + 2];
    unsigned int v28 = v17[3] + 2 * v8[3] + *(unsigned __int16 *)&v19[v16 + 6];
    unsigned int v29 = *v17 + 2 * *v8 + *(unsigned __int16 *)&v19[v16];
    int v30 = v17;
    uint64_t v152 = v18;
    int v150 = &v19[v16];
    if (v145 <= 7
      || (v168 < (char *)v17 + v21 ? (BOOL v103 = (unint64_t)v23 >= v143) : (BOOL v103 = 1),
          v103 ? (char v104 = 0) : (char v104 = 1),
          v168 < &v142[v16 * v18] ? (BOOL v105 = (unint64_t)&v141[v16 * v18] >= v143) : (BOOL v105 = 1),
          v105 ? (char v106 = 0) : (char v106 = 1),
          (unint64_t)v20 < v143 ? (BOOL v107 = v168 >= (char *)v8 + v21) : (BOOL v107 = 1),
          !v107 || (v104 & 1) != 0))
    {
      unint64_t v31 = v8 + 6;
      int v32 = v168;
      int v33 = v169;
      uint64_t v34 = 1;
      uint64_t v36 = v157;
      uint64_t v35 = v158;
    }
    else
    {
      uint64_t v36 = v157;
      uint64_t v35 = v19;
      int v33 = v169;
      if (v106)
      {
        unint64_t v31 = v8 + 6;
        int v32 = v168;
        uint64_t v34 = 1;
      }
      else
      {
        v22 += v139 * 2;
        unint64_t v31 = &v20[v139];
        int v108 = (unsigned __int16 *)&v23[v139];
        int32x4_t v109 = vdupq_n_s32(v24);
        int32x4_t v110 = vdupq_n_s32(v25);
        int32x4_t v111 = vdupq_n_s32(v26);
        int32x4_t v112 = vdupq_n_s32(v27);
        int32x4_t v113 = vdupq_n_s32(v28);
        int v114 = v155;
        int v115 = (const __int16 *)(v8 + 6);
        int32x4_t v116 = vdupq_n_s32(v29);
        int v117 = (__int16 *)v168;
        unint64_t v118 = v140;
        do
        {
          int16x8x3_t v172 = vld3q_s16(v23);
          v23 += 24;
          int16x8x3_t v173 = vld3q_s16(v115);
          v115 += 24;
          int16x8x3_t v174 = vld3q_s16(v114);
          v114 += 24;
          int32x4_t v119 = vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v174.val[0].i8, *(uint16x4_t *)v172.val[0].i8), (int32x4_t)vshll_n_u16(*(uint16x4_t *)v173.val[0].i8, 1uLL));
          int32x4_t v120 = (int32x4_t)vextq_s8((int8x16_t)v113, (int8x16_t)v119, 0xCuLL);
          int32x4_t v121 = vuzp2q_s32(v116, v113);
          int32x4_t v113 = vaddq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v174.val[0], (uint16x8_t)v172.val[0]), (int32x4_t)vshll_high_n_u16((uint16x8_t)v173.val[0], 1uLL));
          v122.i64[0] = vuzp2q_s32(v121, v116).u64[0];
          int32x4_t v116 = (int32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v113, 0xCuLL);
          v122.i64[1] = v119.i64[0];
          int32x4_t v123 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v113, 8uLL), v113);
          int32x4_t v124 = vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v174.val[1].i8, *(uint16x4_t *)v172.val[1].i8), (int32x4_t)vshll_n_u16(*(uint16x4_t *)v173.val[1].i8, 1uLL));
          int32x4_t v125 = vaddq_s32(vaddq_s32(v120, v120), v119);
          int32x4_t v126 = (int32x4_t)vextq_s8((int8x16_t)v111, (int8x16_t)v124, 0xCuLL);
          int32x4_t v127 = vuzp2q_s32(v112, v111);
          int32x4_t v111 = vaddq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v174.val[1], (uint16x8_t)v172.val[1]), (int32x4_t)vshll_high_n_u16((uint16x8_t)v173.val[1], 1uLL));
          v128.i64[0] = vuzp2q_s32(v127, v112).u64[0];
          int32x4_t v112 = (int32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v111, 0xCuLL);
          v128.i64[1] = v124.i64[0];
          int32x4_t v129 = vaddq_s32(v122, v125);
          int32x4_t v130 = vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v111, 8uLL), v111), vaddq_s32(v112, v112));
          int32x4_t v131 = vaddq_s32(v128, vaddq_s32(vaddq_s32(v126, v126), v124));
          v172.val[0] = (int16x8_t)vaddl_high_u16((uint16x8_t)v174.val[2], (uint16x8_t)v172.val[2]);
          v172.val[1] = (int16x8_t)vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v174.val[2].i8, *(uint16x4_t *)v172.val[2].i8), (int32x4_t)vshll_n_u16(*(uint16x4_t *)v173.val[2].i8, 1uLL));
          v172.val[2] = (int16x8_t)vextq_s8((int8x16_t)v109, (int8x16_t)v172.val[1], 0xCuLL);
          v175.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(v129, 4uLL), vaddq_s32(v123, vaddq_s32(v116, v116)), 4uLL);
          v173.val[0] = (int16x8_t)vuzp2q_s32(v110, v109);
          int32x4_t v109 = vaddq_s32((int32x4_t)v172.val[0], (int32x4_t)vshll_high_n_u16((uint16x8_t)v173.val[2], 1uLL));
          v132.i64[0] = vuzp2q_s32((int32x4_t)v173.val[0], v110).u64[0];
          v132.i64[1] = v172.val[1].i64[0];
          int32x4_t v133 = (int32x4_t)vextq_s8((int8x16_t)v172.val[1], (int8x16_t)v109, 0xCuLL);
          v175.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(v131, 4uLL), v130, 4uLL);
          v175.val[2] = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v132, vaddq_s32(vaddq_s32((int32x4_t)v172.val[2], (int32x4_t)v172.val[2]), (int32x4_t)v172.val[1])), 4uLL), vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v172.val[1], (int8x16_t)v109, 8uLL), v109), vaddq_s32(v133, v133)), 4uLL);
          vst3q_s16(v117, v175);
          v117 += 24;
          int32x4_t v110 = v133;
          v118 -= 8;
        }
        while (v118);
        if (v145 == v140) {
          goto LABEL_9;
        }
        unsigned int v24 = v109.u32[3];
        unsigned int v25 = v109.u32[2];
        unsigned int v26 = v111.u32[3];
        int v23 = (const __int16 *)v108;
        unsigned int v27 = v111.u32[2];
        unsigned int v28 = v113.u32[3];
        uint64_t v34 = v137;
        int v32 = (_WORD *)v138;
        unsigned int v29 = v113.u32[2];
      }
    }
    uint64_t v37 = v144 - v34;
    do
    {
      unsigned int v38 = v29 + 2 * v28;
      unsigned int v29 = v28;
      unsigned int v28 = *(unsigned __int16 *)v22 + *(unsigned __int16 *)v23 + 2 * *v31;
      *int v32 = (v38 + v28 + 8) >> 4;
      unsigned int v39 = v27 + 2 * v26;
      unsigned int v27 = v26;
      unsigned int v26 = *((unsigned __int16 *)v22 + 1) + *((unsigned __int16 *)v23 + 1) + 2 * v31[1];
      v32[1] = (v39 + v26 + 8) >> 4;
      unsigned int v40 = v25 + 2 * v24;
      unsigned int v25 = v24;
      unsigned int v24 = *((unsigned __int16 *)v22 + 2) + *((unsigned __int16 *)v23 + 2) + 2 * v31[2];
      v32[2] = (v40 + v24 + 8) >> 4;
      v23 += 3;
      v31 += 3;
      v22 += 6;
      v32 += 3;
      --v37;
    }
    while (v37);
LABEL_9:
    uint64_t v41 = 0;
    uint64_t v148 = (unsigned __int16 *)((char *)v6 + v36);
    unint64_t v149 = v8;
    int v153 = v30;
    uint64_t v42 = v30 + 8;
    unint64_t v43 = v145;
    int v167 = v8 + 6;
    do
    {
      int v48 = &v33[v41 * 2];
      int v49 = &v42[v41];
      unsigned int v50 = *(unsigned __int16 *)((char *)v6 + v36 + 4);
      unint64_t result = *(unsigned __int16 *)&v168[v41 * 2];
      uint64_t v45 = *(unsigned __int16 *)&v168[v41 * 2 + 2];
      uint64_t v46 = *(unsigned __int16 *)&v168[v41 * 2 + 4];
      if ((int)(v164 + ((v50 + 128) >> 8) * v163) <= (int)(((*(unsigned __int16 *)(v162 + 2 * result)
                                                            * *(unsigned __int16 *)(v162 + 2 * result)
                                                            + *(unsigned __int16 *)(v161 + 2 * v45)
                                                            * *(unsigned __int16 *)(v161 + 2 * v45)
                                                            + *(unsigned __int16 *)(v160 + 2 * v46)
                                                            * *(unsigned __int16 *)(v160 + 2 * v46))
                                                           * v166) >> v165))
        signed int v51 = ((*(unsigned __int16 *)(v162 + 2 * result) * *(unsigned __int16 *)(v162 + 2 * result)
              + *(unsigned __int16 *)(v161 + 2 * v45) * *(unsigned __int16 *)(v161 + 2 * v45)
              + *(unsigned __int16 *)(v160 + 2 * v46) * *(unsigned __int16 *)(v160 + 2 * v46))
             * v166) >> v165;
      else {
        signed int v51 = v164 + ((v50 + 128) >> 8) * v163;
      }
      if (v10 > *(unsigned __int16 *)((char *)v6 + v36 + 6))
      {
        int v52 = v20[v41 - 3];
        int v53 = v20[v41 - 2];
        int v54 = v20[v41 - 1];
        int v55 = v52 + 2;
        int v56 = v53 + 1;
        int v57 = v54 + 2;
        if (v50 < 0x80)
        {
          int v58 = &v42[v41];
          int v59 = v42[v41 - 8];
          int v60 = v42[v41 - 7];
          int v61 = v42[v41 - 6];
          if (((v55 - v59) >> 2) * ((v55 - v59) >> 2)
             + ((v56 - v60) >> 1) * ((v56 - v60) >> 1)
             + ((v57 - v61) >> 2) * ((v57 - v61) >> 2) <= v51)
          {
            v52 += v59;
            v53 += v60;
            v54 += v61;
            unint64_t v62 = 2;
          }
          else
          {
            unint64_t v62 = 1;
          }
          int v67 = *(v49 - 5);
          int v68 = *(v58 - 4);
          int v83 = *(v58 - 3);
          int v170 = v83;
          if (((v55 - v67) >> 2) * ((v55 - v67) >> 2)
             + ((v56 - v68) >> 1) * ((v56 - v68) >> 1)
             + ((v57 - v83) >> 2) * ((v57 - v83) >> 2) <= v51)
          {
            ++v62;
            v52 += v67;
            v53 += v68;
            v54 += v83;
          }
          int v84 = v42[v41 - 2];
          int v85 = v42[v41 - 1];
          int v86 = v42[v41];
          if (((v55 - v84) >> 2) * ((v55 - v84) >> 2)
             + ((v56 - v85) >> 1) * ((v56 - v85) >> 1)
             + ((v57 - v86) >> 2) * ((v57 - v86) >> 2) <= v51)
          {
            ++v62;
            v52 += v84;
            v53 += v85;
            v54 += v86;
          }
          int v87 = &v20[v41];
          int v71 = v20[v41 - 6];
          int v72 = v20[v41 - 5];
          int v73 = v20[v41 - 4];
          if (((v55 - v71) >> 2) * ((v55 - v71) >> 2)
             + ((v56 - v72) >> 1) * ((v56 - v72) >> 1)
             + ((v57 - v73) >> 2) * ((v57 - v73) >> 2) <= v51)
          {
            ++v62;
            v52 += v71;
            v53 += v72;
            v54 += v73;
          }
          int v75 = *v87;
          int v76 = v87[1];
          int v77 = v87[2];
          if (((v55 - v75) >> 2) * ((v55 - v75) >> 2)
             + ((v56 - v76) >> 1) * ((v56 - v76) >> 1)
             + ((v57 - v77) >> 2) * ((v57 - v77) >> 2) <= v51)
          {
            ++v62;
            v52 += v75;
            v53 += v76;
            v54 += v77;
          }
          int v88 = (unsigned __int16 *)&v33[v41 * 2];
          int v89 = *v88;
          int v90 = v88[1];
          int v91 = v88[2];
          if (((v55 - v89) >> 2) * ((v55 - v89) >> 2)
             + ((v56 - v90) >> 1) * ((v56 - v90) >> 1)
             + ((v57 - v91) >> 2) * ((v57 - v91) >> 2) <= v51)
          {
            ++v62;
            v52 += v89;
            v53 += v90;
            v54 += v91;
          }
          int v80 = *((unsigned __int16 *)v48 + 3);
          int v81 = v88[4];
          int v82 = v88[5];
          if (((v55 - v80) >> 2) * ((v55 - v80) >> 2)
             + ((v56 - v81) >> 1) * ((v56 - v81) >> 1)
             + ((v57 - v82) >> 2) * ((v57 - v82) >> 2) <= v51)
          {
            ++v62;
            v52 += v80;
            v53 += v81;
            v54 += v82;
          }
          int v92 = *(unsigned __int16 *)&v169[v41 * 2 + 12];
          int v93 = *(unsigned __int16 *)&v169[v41 * 2 + 14];
          int v94 = *(unsigned __int16 *)&v169[v41 * 2 + 16];
          if (((v55 - v92) >> 2) * ((v55 - v92) >> 2)
             + ((v56 - v93) >> 1) * ((v56 - v93) >> 1)
             + ((v57 - v94) >> 2) * ((v57 - v94) >> 2) > v51)
            goto LABEL_58;
          goto LABEL_57;
        }
        int v63 = &v42[v41];
        if (*v6 >= 0x80u
          && (int v64 = *(v63 - 8),
              int v65 = *(v63 - 7),
              int v66 = *(v63 - 6),
              ((v56 - v65) >> 1) * ((v56 - v65) >> 1)
            + (((v57 - v66) >> 2) + ((v55 - v64) >> 2)) * (((v57 - v66) >> 2) + ((v55 - v64) >> 2)) <= v51))
        {
          v52 += v64;
          v53 += v65;
          v54 += v66;
          unint64_t v62 = 2;
          int v67 = *(v49 - 5);
          int v68 = *(v63 - 4);
          int v69 = *(v63 - 3);
          if (v6[2] < 0x80u) {
            goto LABEL_62;
          }
        }
        else
        {
          unint64_t v62 = 1;
          int v67 = *(v49 - 5);
          int v68 = *(v63 - 4);
          int v69 = *(v63 - 3);
          if (v6[2] < 0x80u) {
            goto LABEL_62;
          }
        }
        if (((v56 - v68) >> 1) * ((v56 - v68) >> 1)
           + (((v57 - v69) >> 2) + ((v55 - v67) >> 2)) * (((v57 - v69) >> 2) + ((v55 - v67) >> 2)) <= v51)
        {
          ++v62;
          v52 += v67;
          v53 += v68;
          v54 += v69;
        }
LABEL_62:
        int v170 = v69;
        if (v6[4] >= 0x80u)
        {
          int v95 = v42[v41 - 2];
          int v96 = v42[v41 - 1];
          int v97 = v42[v41];
          if (((v56 - v96) >> 1) * ((v56 - v96) >> 1)
             + (((v57 - v97) >> 2) + ((v55 - v95) >> 2)) * (((v57 - v97) >> 2) + ((v55 - v95) >> 2)) <= v51)
          {
            ++v62;
            v52 += v95;
            v53 += v96;
            v54 += v97;
          }
        }
        int v98 = &v20[v41];
        int v71 = v20[v41 - 6];
        int v72 = v20[v41 - 5];
        int v73 = v20[v41 - 4];
        if (*(unsigned __int16 *)((char *)v6 + v36) >= 0x80u
          && ((v56 - v72) >> 1) * ((v56 - v72) >> 1)
           + (((v57 - v73) >> 2) + ((v55 - v71) >> 2)) * (((v57 - v73) >> 2) + ((v55 - v71) >> 2)) <= v51)
        {
          ++v62;
          v52 += v71;
          v53 += v72;
          v54 += v73;
        }
        int v75 = *v98;
        int v76 = v98[1];
        int v77 = v98[2];
        if (*(unsigned __int16 *)((char *)v6 + v36 + 8) >= 0x80u)
        {
          if (((v56 - v76) >> 1) * ((v56 - v76) >> 1)
             + (((v57 - v77) >> 2) + ((v55 - v75) >> 2)) * (((v57 - v77) >> 2) + ((v55 - v75) >> 2)) <= v51)
          {
            ++v62;
            v52 += v75;
            v53 += v76;
            v54 += v77;
          }
          int v33 = v169;
        }
        signed int v99 = (unsigned __int16 *)&v33[v41 * 2];
        if (v6[v157] >= 0x80u)
        {
          int v100 = *v99;
          int v101 = v99[1];
          int v102 = v99[2];
          if (((v56 - v101) >> 1) * ((v56 - v101) >> 1)
             + (((v57 - v102) >> 2) + ((v55 - v100) >> 2)) * (((v57 - v102) >> 2) + ((v55 - v100) >> 2)) <= v51)
          {
            ++v62;
            v52 += v100;
            v53 += v101;
            v54 += v102;
          }
          uint64_t v36 = v157;
          uint64_t v35 = v158;
        }
        int v80 = *((unsigned __int16 *)v48 + 3);
        int v81 = v99[4];
        int v82 = v99[5];
        if (v6[v171 + 2] >= 0x80u)
        {
          if (((v56 - v81) >> 1) * ((v56 - v81) >> 1)
             + (((v57 - v82) >> 2) + ((v55 - v80) >> 2)) * (((v57 - v82) >> 2) + ((v55 - v80) >> 2)) <= v51)
          {
            ++v62;
            v52 += v80;
            v53 += v81;
            v54 += v82;
          }
          uint64_t v35 = v158;
        }
        if (v6[v171 + 4] < 0x80u) {
          goto LABEL_83;
        }
        int v92 = *(unsigned __int16 *)&v169[v41 * 2 + 12];
        int v93 = *(unsigned __int16 *)&v169[v41 * 2 + 14];
        int v94 = *(unsigned __int16 *)&v169[v41 * 2 + 16];
        if (((v56 - v93) >> 1) * ((v56 - v93) >> 1)
           + (((v57 - v94) >> 2) + ((v55 - v92) >> 2)) * (((v57 - v94) >> 2) + ((v55 - v92) >> 2)) > v51)
        {
LABEL_58:
          uint64_t v36 = v157;
          uint64_t v35 = v158;
LABEL_83:
          int v33 = v169;
          goto LABEL_84;
        }
LABEL_57:
        ++v62;
        v52 += v92;
        v53 += v93;
        v54 += v94;
        goto LABEL_58;
      }
      if (v10 <= v6[1])
      {
        unint64_t v62 = 0;
        int v52 = 0;
        int v53 = 0;
        int v54 = 0;
      }
      else
      {
        int v54 = v42[v41 - 6];
        int v53 = v42[v41 - 7];
        int v52 = v42[v41 - 8];
        unint64_t v62 = 1;
      }
      int v67 = *(v49 - 5);
      int v68 = v42[v41 - 4];
      if (v10 > v6[3])
      {
        ++v62;
        v52 += v67;
        v53 += v68;
        v54 += v42[v41 - 3];
      }
      int v170 = v42[v41 - 3];
      if (v10 > v6[5])
      {
        ++v62;
        v52 += v42[v41 - 2];
        v53 += v42[v41 - 1];
        v54 += v42[v41];
      }
      int v70 = &v20[v41];
      int v71 = v20[v41 - 6];
      int v72 = v20[v41 - 5];
      int v73 = v20[v41 - 4];
      int v74 = (char *)v6 + v36;
      if (v10 <= *(unsigned __int16 *)((char *)v6 + v36 + 2))
      {
        int v75 = *v70;
        int v76 = v70[1];
        int v77 = v70[2];
        if (v10 <= *((unsigned __int16 *)v74 + 5))
        {
LABEL_32:
          int v78 = &v6[v171];
          if (v10 <= v6[v171 + 1]) {
            goto LABEL_34;
          }
LABEL_33:
          int v79 = *(unsigned __int16 *)&v33[v41 * 2 + 4];
          ++v62;
          v52 += *(unsigned __int16 *)&v33[v41 * 2];
          v53 += *(unsigned __int16 *)&v33[v41 * 2 + 2];
          int v33 = v169;
          v54 += v79;
          goto LABEL_34;
        }
      }
      else
      {
        ++v62;
        v52 += v71;
        v53 += v72;
        v54 += v73;
        int v75 = *v70;
        int v76 = v70[1];
        int v77 = v70[2];
        if (v10 <= *((unsigned __int16 *)v74 + 5)) {
          goto LABEL_32;
        }
      }
      ++v62;
      v52 += v75;
      v53 += v76;
      v54 += v77;
      int v78 = &v6[v171];
      if (v10 > v6[v171 + 1]) {
        goto LABEL_33;
      }
LABEL_34:
      int v80 = *((unsigned __int16 *)v48 + 3);
      int v81 = *(unsigned __int16 *)&v33[v41 * 2 + 8];
      int v82 = *(unsigned __int16 *)&v33[v41 * 2 + 10];
      if (v10 > v78[3])
      {
        ++v62;
        v52 += v80;
        v53 += v81;
        v54 += v82;
      }
      if (v10 <= v6[v171 + 5])
      {
        if (!v62) {
          goto LABEL_11;
        }
      }
      else
      {
        ++v62;
        v52 += *(unsigned __int16 *)&v33[v41 * 2 + 12];
        v53 += *(unsigned __int16 *)&v33[v41 * 2 + 14];
        v54 += *(unsigned __int16 *)&v33[v41 * 2 + 16];
      }
LABEL_84:
      if (v159 && v62 < 3)
      {
        unint64_t result = (v80 + v75 + v71 + v67 + 2) >> 2;
        LODWORD(v45) = (v81 + v76 + v72 + v68 + 2) >> 2;
        LODWORD(v46) = (v82 + v77 + v73 + v170 + 2) >> 2;
      }
      else
      {
        int v44 = *(_DWORD *)(v156 + 4 * v62);
        unint64_t result = (v44 * v52 + 0x8000) >> 16;
        LODWORD(v45) = (v44 * v53 + 0x8000) >> 16;
        LODWORD(v46) = (v44 * v54 + 0x8000) >> 16;
      }
LABEL_11:
      uint16x8_t v20 = v167;
      *(_WORD *)&v35[v41 * 2 + 6] = result;
      int v47 = &v35[v41 * 2];
      *((_WORD *)v47 + 4) = v45;
      *((_WORD *)v47 + 5) = v46;
      v41 += 3;
      v6 += 2;
      --v43;
    }
    while (v43);
    uint64_t v15 = v151 + 1;
    uint64_t v18 = v152 + 1;
    uint64_t v16 = v146;
    int v155 = (const __int16 *)((char *)v155 + v146);
    uint64_t v169 = &v33[v146];
    uint64_t v6 = v148;
    uint64_t v17 = v149;
    BOOL v8 = v153;
    size_t v13 = v154;
    uint64_t v19 = v150;
    if (v151 + 1 != v147) {
      continue;
    }
    return result;
  }
}

unint64_t sub_1DDB2BB14(_DWORD *a1, void *a2)
{
  uint64_t v2 = a2[162];
  uint64_t v3 = a2[163];
  uint64_t v4 = (char *)a2[164];
  unint64_t v5 = a2[165];
  uint64_t v74 = a2[167];
  uint64_t v76 = a2[166];
  unint64_t v6 = v5 >> 1;
  unint64_t v7 = (char *)a2[168];
  unsigned int v8 = a1[388];
  int v9 = a1[389];
  int v72 = a1[390];
  int v78 = a1[391];
  int v82 = a1[392];
  int v10 = &v7[2 * (v5 >> 1)];
  size_t v11 = v5 & 0xFFFFFFFFFFFFFFFELL;
  memmove(v7, v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v12 = v4;
  unint64_t result = (unint64_t)memmove(v10, &v4[2 * v11], v11);
  if ((unint64_t)(v3 - 4) >= 5)
  {
    size_t v14 = v11;
    uint64_t v79 = 4 * v6;
    unint64_t v80 = v3 - 4;
    uint64_t v15 = &v4[8 * v6];
    unint64_t v16 = v2 - 4;
    uint64_t v17 = &v7[2 * v11];
    size_t __len = v11;
    if (v16 > 4)
    {
      uint64_t v18 = v4;
      uint64_t v71 = 2 * v74;
      uint64_t v19 = v76 + 4 * v74;
      uint64_t v20 = (uint64_t)&v12[12 * v6 + 12];
      uint64_t v21 = (uint64_t)&v18[10 * v6 + 8];
      uint64_t v22 = (uint64_t)&v18[6 * v6 + 6];
      uint64_t v23 = 4;
      while (1)
      {
        uint64_t v75 = v23;
        int v77 = v7;
        unsigned int v24 = v10;
        int v10 = v17;
        int v73 = v24;
        unsigned int v25 = v24 + 12;
        unint64_t result = (unint64_t)memmove(v17, v15, v14);
        uint64_t v26 = 0;
        uint64_t v27 = 2;
        for (unint64_t i = 4; i < v16; i += 2)
        {
          unsigned int v29 = &v10[v26];
          int v30 = &v15[v26];
          unsigned int v31 = *(unsigned char *)(v19 + v27) & 0xF;
          if (((v8 >> v31) & 1) == 0) {
            goto LABEL_56;
          }
          int v32 = &v25[v26];
          int v33 = *((unsigned __int16 *)v29 + 4);
          if (v31 >= 2)
          {
            if (v31 >= 4)
            {
              unsigned int v50 = *(unsigned __int16 *)(v22 + v26)
                  + *(unsigned __int16 *)(v22 + v26 + 4)
                  + *(unsigned __int16 *)(v21 + v26 - 2)
                  + *(unsigned __int16 *)(v21 + v26 + 2)
                  + 2;
              unsigned int v51 = v50 >> 2;
              unsigned int v52 = v50 >> 4;
              if (v51 + v52 < v33 || (int)(v51 - v52) > v33) {
                LOWORD(v33) = v51;
              }
            }
            else if (v31 == 2)
            {
              unsigned int v43 = *((unsigned __int16 *)v32 - 2);
              int v44 = *(unsigned __int16 *)(v20 + v26 - 4);
              unsigned int v45 = (v43 + v44 + 1) >> 1;
              unsigned int v46 = (*(unsigned __int16 *)(v22 + v26) + *(unsigned __int16 *)(v21 + v26 - 2) + 1) >> 1;
              unint64_t result = (*(unsigned __int16 *)(v22 + v26 + 4) + *(unsigned __int16 *)(v21 + v26 + 2) + 1) >> 1;
              if (v46 < 4 * (int)result && result < 4 * v46)
              {
                int v47 = ((v46 + result + 1) >> 1) - v33;
                LODWORD(result) = v45 - v33;
                if (v47 < 0) {
                  int v47 = -v47;
                }
                if ((result & 0x80000000) == 0) {
                  unint64_t result = result;
                }
                else {
                  unint64_t result = v33 - v45;
                }
                if (3 * v47 < result)
                {
                  unsigned int v48 = v43 - v33;
                  int v49 = v44 - v33;
                  if ((int)(v43 - v33) < 0) {
                    unsigned int v48 = v33 - v43;
                  }
                  if (v49 < 0) {
                    int v49 = v33 - v44;
                  }
                  if (v48 <= v49) {
                    unsigned int v45 = v43;
                  }
                  else {
                    unsigned int v45 = *(unsigned __int16 *)(v20 + v26 - 4);
                  }
                }
              }
              int v33 = (v45 + v33 + 1) >> 1;
            }
            else
            {
              unsigned int v62 = *(unsigned __int16 *)&v25[v26 - 8] + *(unsigned __int16 *)(v20 + v26) + 1;
              if (v33 <= v62 >> 2 || (v62 & 0x3FFFE) <= v33) {
                goto LABEL_56;
              }
              signed int v64 = v33
                  - ((v33 + (v62 >> 1) + 1) >> 1)
                  + ((*(unsigned __int16 *)(v21 + v26 + 2) + *(unsigned __int16 *)(v22 + v26) + 1) >> 1);
              int v33 = v64 & ~(v64 >> 31);
              if (v33 >= 0xFFFF) {
                LOWORD(v33) = -1;
              }
            }
            goto LABEL_55;
          }
          if ((*(unsigned char *)(v19 + v27) & 0xF) == 0)
          {
            int v54 = (unsigned __int16 *)&v10[v26];
            unsigned int v55 = (*(unsigned __int16 *)&v10[v26] + *(unsigned __int16 *)&v10[v26 + 16] + 1) >> 1;
            if ((int)(v33 - v55 - 2 * ((v33 - v55) & ((int)(v33 - v55) >> 31))) >= (int)((v33 + 2) >> 2)) {
              goto LABEL_56;
            }
            signed int v56 = (v33 + v55 + 1) >> 1;
            unsigned int v57 = (v54[6] + v54[2] + 1) >> 1;
            int v58 = (int)(v57 * v78 + 0x8000) >> 16;
            unint64_t result = v58 + v57;
            signed int v59 = v57 - v58;
            if (v56 <= (int)result && v56 >= v59) {
              goto LABEL_56;
            }
            int32x2_t v61 = vmin_s32(vmax_s32(vadd_s32(vdup_n_s32((int)(v57 - v56 + 1) >> 1), (int32x2_t)__PAIR64__(v54[5], v33)), 0), (int32x2_t)0xFFFF0000FFFFLL);
            *((_WORD *)v30 + 5) = v61.i16[2];
            LOWORD(v33) = v61.i16[0];
            goto LABEL_55;
          }
          int v34 = *((unsigned __int16 *)v32 - 2);
          int v35 = *(unsigned __int16 *)(v22 + v26 + 4);
          int v36 = *(unsigned __int16 *)(v21 + v26 - 2);
          unsigned int v37 = (*(unsigned __int16 *)&v25[v26 - 8]
               + *(unsigned __int16 *)(v22 + v26)
               + *(unsigned __int16 *)(v21 + v26 + 2)
               + *(unsigned __int16 *)(v20 + v26)
               + 2) >> 2;
          unsigned int v38 = ((21845 * (v35 + v34 + *(unsigned __int16 *)&v10[v26 + 12]) + 0x8000) >> 16)
              + 2 * v37
              + ((21845
                * (v36 + *(unsigned __int16 *)&v10[v26 + 4] + *(unsigned __int16 *)(v20 + v26 - 4))
                + 0x8000) >> 16)
              + 2;
          unint64_t result = (v37 - (v38 >> 2)) * (v37 - (v38 >> 2));
          if (result >= 0x65)
          {
            signed int v39 = (v33
                 + ((*(unsigned __int16 *)&v25[v26] + *(unsigned __int16 *)(v20 + v26 - 8) + 1) >> 1)
                 + 1) >> 1;
            unsigned int v40 = v35 + v36 + 1;
            unsigned int v41 = v40 >> 1;
            int v42 = (int)((v40 >> 1) * v82 + 0x8000) >> 16;
            unint64_t result = v42 + (v40 >> 1);
            if (v39 > (int)result || v39 < (int)(v41 - v42))
            {
              v33 += v41 - v39;
              if (v33 < (int)(v40 >> 2)) {
                int v33 = v40 >> 1;
              }
              if (v33 >= 0xFFFF) {
                LOWORD(v33) = -1;
              }
LABEL_55:
              *((_WORD *)v30 + 4) = v33;
            }
          }
LABEL_56:
          if (v9 == *(unsigned __int8 *)(v19 + v27) >> 4)
          {
            int v65 = *((unsigned __int16 *)v29 + 4);
            unint64_t result = *(unsigned __int16 *)&v10[v26 + 10];
            unsigned int v66 = *(unsigned __int16 *)(v22 + v26 + 4) + *(unsigned __int16 *)(v21 + v26 + 2) + 1;
            int v67 = v65
                - ((*(unsigned __int16 *)(v22 + v26 + 2) + *(unsigned __int16 *)(v21 + v26) + 1) >> 1);
            unsigned int v68 = *(unsigned __int16 *)&v10[v26 + 12]
                - ((*(unsigned __int16 *)(v22 + v26 + 6) + *(unsigned __int16 *)(v21 + v26 + 4) + 1) >> 1);
            if ((int)(v67 * v67 + (result - (v66 >> 1)) * (result - (v66 >> 1)) + v68 * v68) < v72) {
              *((_WORD *)v30 + 5) = v66 >> 1;
            }
          }
          ++v27;
          v26 += 4;
        }
        unint64_t v7 = v73;
        uint64_t v23 = v75 + 2;
        v15 += v79;
        v19 += v71;
        v20 += v79;
        v21 += v79;
        v22 += v79;
        uint64_t v17 = v77;
        size_t v14 = __len;
        if (v75 + 2 >= v80) {
          return result;
        }
      }
    }
    unint64_t v69 = 4;
    do
    {
      int v70 = v10;
      int v10 = v17;
      unint64_t result = (unint64_t)memmove(v17, v15, v11);
      v69 += 2;
      v15 += v79;
      uint64_t v17 = v7;
      unint64_t v7 = v70;
    }
    while (v69 < v80);
  }
  return result;
}

char *sub_1DDB2C0C0(char *result, void *a2)
{
  unsigned int v2 = *((_DWORD *)result + 40);
  BOOL v3 = v2 > 7;
  int v4 = (1 << v2) & 0xB0;
  if (!v3 && v4 != 0)
  {
    uint64_t v6 = a2[162];
    unint64_t v7 = a2[165];
    uint64_t v8 = a2[167];
    unint64_t v9 = v7 >> 1;
    unint64_t v78 = *((void *)result + 193);
    unsigned int v10 = *((_DWORD *)result + 388);
    uint64_t v11 = a2[163];
    uint64_t v12 = (char *)a2[168];
    uint64_t v13 = a2[166];
    size_t v14 = (char *)a2[164];
    uint64_t v15 = &v12[2 * (v7 >> 1)];
    size_t v16 = v7 & 0xFFFFFFFFFFFFFFFELL;
    memmove(v12, v14, v7 & 0xFFFFFFFFFFFFFFFELL);
    unint64_t result = (char *)memmove(v15, &v14[2 * v16], v16);
    unint64_t v17 = v11 - 4;
    if ((unint64_t)(v11 - 4) >= 5)
    {
      size_t v18 = v16;
      uint64_t v19 = v15;
      uint64_t v84 = 4 * v9;
      uint64_t v20 = v14;
      uint64_t v21 = &v14[8 * v9];
      unint64_t v22 = v6 - 4;
      uint64_t v23 = &v12[2 * v16];
      size_t v86 = v16;
      unint64_t v85 = v17;
      if (v78 < v6 - 4)
      {
        char v24 = 4 * (v78 & 1);
        uint64_t v77 = 2 * v8;
        uint64_t v25 = v13 + 4 * v8;
        uint64_t v26 = 2 * v78;
        uint64_t v27 = &v20[16 * v9];
        uint64_t v28 = (uint64_t)&v20[6 * v9 - 2];
        uint64_t v29 = (uint64_t)&v20[12 * v9 - 4];
        uint64_t v30 = (uint64_t)&v20[10 * v9 - 2];
        uint64_t v31 = 4;
        while (1)
        {
          uint64_t v79 = v29;
          int v87 = v12;
          uint64_t v81 = v31;
          uint64_t v12 = v19;
          unint64_t v80 = v23;
          memmove(v23, v21, v18);
          int v32 = &v12[v26];
          uint64_t v33 = -4;
          int v34 = v21;
          int v35 = v87;
          uint64_t v82 = v30;
          unint64_t result = (char *)v78;
          uint64_t v36 = v79;
          int v83 = v27;
          uint64_t v37 = v28;
          unsigned int v38 = v80;
          unint64_t v39 = v78 >> 1;
          do
          {
            unsigned int v45 = (*(unsigned __int8 *)(v25 + v39) >> v24) & 0xF;
            if (((v10 >> ((*(unsigned __int8 *)(v25 + v39) >> v24) & 0xF)) & 1) == 0) {
              goto LABEL_20;
            }
            int v46 = *(unsigned __int16 *)&v38[2 * v78];
            if (v45 >= 2)
            {
              if (v45 == 2)
              {
                unsigned int v52 = *(unsigned __int16 *)&v35[2 * v78];
                unsigned int v53 = *(unsigned __int16 *)&v27[2 * v78];
                unsigned int v54 = *(unsigned __int16 *)&v32[v33 + 4];
                unsigned int v55 = *(unsigned __int16 *)(v36 + v26 + 4);
                BOOL v56 = 3 * v46 >= v52 && 3 * v46 >= v53;
                unsigned int v57 = (v52 + 2 * v46 + v53 + 2) >> 2;
                if (!v56) {
                  unsigned int v57 = *(unsigned __int16 *)&v38[2 * v78];
                }
                if (3 * v54 < v55 || 3 * v55 < v54)
                {
                  unsigned int v73 = v54 - v57;
                  int v74 = v55 - v57;
                  if ((int)(v54 - v57) < 0) {
                    unsigned int v73 = v57 - v54;
                  }
                  if (v74 < 0) {
                    int v74 = v57 - v55;
                  }
                  if (v73 >= v74) {
                    unsigned int v54 = *(unsigned __int16 *)(v36 + v26 + 4);
                  }
                  unsigned int v58 = v54 - v57;
                }
                else
                {
                  unsigned int v58 = ((v54 + v55 + 1) >> 1) - v57;
                }
                goto LABEL_75;
              }
              unsigned int v59 = *(unsigned __int16 *)&v32[v33];
              unsigned int v60 = *(unsigned __int16 *)(v36 + v26 + 8);
              BOOL v61 = 3 * v46 >= v59 && 3 * v46 >= v60;
              unsigned int v50 = (v59 + 2 * v46 + v60 + 2) >> 2;
              if (!v61) {
                unsigned int v50 = *(unsigned __int16 *)&v38[2 * v78];
              }
              unsigned int v42 = *(unsigned __int16 *)(v37 + 2 * v78);
              unsigned int v51 = *(unsigned __int16 *)(v30 + v26 + 4);
              if (3 * v51 < v42 || 3 * v42 < v51)
              {
LABEL_10:
                unsigned int v40 = v51 - v50;
                int v41 = v42 - v50;
                if ((int)(v51 - v50) < 0) {
                  unsigned int v40 = v50 - v51;
                }
                if (v41 < 0) {
                  int v41 = v50 - v42;
                }
                if (v40 < v41) {
                  unsigned int v42 = v51;
                }
                int v43 = v42 - v50;
                goto LABEL_17;
              }
            }
            else
            {
              if (!v45)
              {
                unsigned int v62 = *(unsigned __int16 *)&v38[v26 - 8];
                unsigned int v63 = *(unsigned __int16 *)&v38[v26 + 8];
                unsigned int v64 = *(unsigned __int16 *)&v38[v26 - 4];
                unsigned int v65 = *(unsigned __int16 *)&v38[v26 + 4];
                BOOL v66 = 3 * v46 >= v62 && 3 * v46 >= v63;
                unsigned int v67 = (v62 + 2 * v46 + v63 + 2) >> 2;
                if (!v66) {
                  unsigned int v67 = *(unsigned __int16 *)&v38[2 * v78];
                }
                unsigned int v68 = v64 - v67;
                int v69 = v65 - v67;
                if ((int)(v64 - v67) < 0) {
                  unsigned int v68 = v67 - v64;
                }
                if (v69 < 0) {
                  int v69 = v67 - v65;
                }
                if (v68 >= v69) {
                  unsigned int v70 = *(unsigned __int16 *)&v38[v26 + 4];
                }
                else {
                  unsigned int v70 = *(unsigned __int16 *)&v38[v26 - 4];
                }
                if (3 * v64 >= v65 && 3 * v65 >= v64) {
                  unsigned int v72 = (v64 + v65 + 1) >> 1;
                }
                else {
                  unsigned int v72 = v70;
                }
                unsigned int v58 = v72 - v67;
LABEL_75:
                int v43 = (int)(v58 + 1) >> 1;
                goto LABEL_17;
              }
              unsigned int v47 = *(unsigned __int16 *)&v32[v33 + 8];
              unsigned int v48 = *(unsigned __int16 *)(v36 + 2 * v78);
              BOOL v49 = 3 * v46 >= v47 && 3 * v46 >= v48;
              unsigned int v50 = (v47 + 2 * v46 + v48 + 2) >> 2;
              if (!v49) {
                unsigned int v50 = *(unsigned __int16 *)&v38[2 * v78];
              }
              unsigned int v42 = *(unsigned __int16 *)(v37 + v26 + 4);
              unsigned int v51 = *(unsigned __int16 *)(v30 + 2 * v78);
              if (3 * v51 < v42 || 3 * v42 < v51) {
                goto LABEL_10;
              }
            }
            int v43 = ((v42 + v51 + 1) >> 1) - v50;
LABEL_17:
            int v44 = (v43 + v46) & ~((v43 + v46) >> 31);
            if (v44 >= 0xFFFF) {
              LOWORD(v44) = -1;
            }
            *(_WORD *)&v34[2 * v78] = v44;
LABEL_20:
            result += 2;
            v38 += 4;
            v27 += 4;
            v37 += 4;
            v36 += 4;
            v30 += 4;
            v33 += 4;
            v35 += 4;
            v34 += 4;
            ++v39;
          }
          while ((unint64_t)result < v22);
          uint64_t v31 = v81 + 2;
          v21 += v84;
          v25 += v77;
          uint64_t v27 = &v83[v84];
          uint64_t v19 = v80;
          v28 += v84;
          uint64_t v29 = v79 + v84;
          uint64_t v30 = v82 + v84;
          size_t v18 = v86;
          uint64_t v23 = v87;
          if (v81 + 2 >= v85) {
            return result;
          }
        }
      }
      unint64_t v75 = 4;
      do
      {
        uint64_t v76 = v15;
        uint64_t v15 = v23;
        unint64_t result = (char *)memmove(v23, v21, v16);
        v75 += 2;
        v21 += v84;
        uint64_t v23 = v12;
        uint64_t v12 = v76;
      }
      while (v75 < v85);
    }
  }
  return result;
}

unint64_t sub_1DDB2C534(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[169];
  uint64_t v3 = a2[170];
  int v4 = (char *)a2[171];
  uint64_t v5 = a2[173];
  uint64_t v44 = a2[174];
  unint64_t v45 = a2[172];
  int v6 = *(_DWORD *)(a1 + 1616);
  uint64_t v7 = *(void *)(a1 + 1624);
  uint64_t v8 = 2 * v45;
  unsigned int v48 = (char *)a2[175];
  unint64_t result = (unint64_t)memmove(v48, v4, 2 * v45);
  uint64_t v43 = v3 - 2;
  if ((unint64_t)(v3 - 2) >= 3)
  {
    uint64_t v10 = v5 + 2 * v44;
    uint64_t v11 = &v4[v8];
    uint64_t v12 = &v48[2 * (v45 & 0xFFFFFFFFFFFFFFFELL)];
    unint64_t v13 = v2 - 2;
    uint64_t v14 = (uint64_t)&v4[v8 + 4];
    unint64_t v15 = (unint64_t)&v4[v8 + 4 + (v45 & 0xFFFFFFFFFFFFFFFELL)];
    char v16 = 4;
    uint64_t v17 = 2;
    uint64_t v18 = 1;
    uint64_t v19 = &v48[2 * (v45 >> 1)];
    do
    {
      uint64_t v46 = v17;
      unsigned int v47 = v11;
      uint64_t v20 = v19;
      uint64_t v19 = v12;
      unint64_t result = (unint64_t)memmove(v12, v11, v45 & 0xFFFFFFFFFFFFFFFELL);
      unint64_t v21 = v18 + 2;
      if (v13 > v18 + 2)
      {
        uint64_t v22 = 2 * v18;
        uint64_t v23 = v19 + 4;
        char v24 = v20 + 4;
        unint64_t v25 = v15;
        uint64_t v26 = v14;
        uint64_t v27 = 1;
        do
        {
          int v28 = *(unsigned __int16 *)&v24[2 * v18];
          int v29 = *(unsigned __int16 *)&v23[v22 - 2];
          int v30 = *(unsigned __int16 *)&v23[v22 + 2];
          signed int v31 = *(unsigned __int16 *)(v25 + 2 * v18);
          switch((*(unsigned __int8 *)(v10 + v27) >> v16) & 0xF)
          {
            case 0:
              int v32 = ((v30 - v29) & ((v30 - v29) >> 31)) + v29;
              if (v30 <= v29) {
                signed int v33 = *(unsigned __int16 *)&v23[v22 - 2];
              }
              else {
                signed int v33 = *(unsigned __int16 *)&v23[v22 + 2];
              }
              break;
            case 1:
              signed int v33 = (v28 + v30 + 1) >> 1;
              int v36 = v29 + v31;
              goto LABEL_24;
            case 2:
              int v32 = ((v31 - v28) & ((v31 - v28) >> 31)) + v28;
              if (v31 <= v28) {
                signed int v33 = *(unsigned __int16 *)&v24[2 * v18];
              }
              else {
                signed int v33 = *(unsigned __int16 *)(v25 + 2 * v18);
              }
              break;
            case 3:
              signed int v33 = (v28 + v29 + 1) >> 1;
              int v36 = v30 + v31;
LABEL_24:
              signed int v37 = (v36 + 1) >> 1;
              int v32 = ((v37 - v33) & ((v37 - v33) >> 31)) + v33;
              if (v37 > v33) {
                signed int v33 = v37;
              }
              break;
            default:
              if (v30 <= v29) {
                signed int v33 = *(unsigned __int16 *)&v23[v22 - 2];
              }
              else {
                signed int v33 = *(unsigned __int16 *)&v23[v22 + 2];
              }
              int v35 = ((v31 - v28) & ((v31 - v28) >> 31)) + v28;
              if (v31 <= v28) {
                signed int v31 = *(unsigned __int16 *)&v24[2 * v18];
              }
              int v34 = ((v30 - v29) & ((v30 - v29) >> 31)) + v29;
              int v32 = ((v34 - v35) & ((v34 - v35) >> 31)) + v35;
              if (v31 > v33) {
                signed int v33 = v31;
              }
              break;
          }
          int v38 = (v32 * v6 + 512) >> 10;
          int v39 = *(unsigned __int16 *)&v23[2 * v18];
          int v40 = v39 - v33;
          unint64_t result = (v32 - v39);
          if (v40 > v38 || (int)result > v38)
          {
            unsigned int v42 = (*(unsigned __int16 *)(v7 + 2 * v32)
                 + *(unsigned __int16 *)(v7 + 2 * v33)
                 + 1) >> 1;
            *(_WORD *)(v26 + 2 * v18) = (v42 * v42 + 0x8000) >> 16;
          }
          v25 += 4;
          v21 += 2;
          v26 += 4;
          v23 += 4;
          v24 += 4;
          ++v27;
        }
        while (v21 < v13);
      }
      v18 ^= 1uLL;
      v16 ^= 4u;
      uint64_t v17 = v46 + 1;
      uint64_t v11 = &v47[v45];
      v10 += v44;
      v14 += v45;
      v15 += v45;
      uint64_t v12 = v48;
      unsigned int v48 = v20;
    }
    while (v46 + 1 != v43);
  }
  return result;
}

uint64_t sub_1DDB2C7EC(uint64_t result, void *a2)
{
  unint64_t v2 = a2[177] - 2;
  if (v2 >= 3)
  {
    unint64_t v3 = a2[179];
    uint64_t v4 = a2[181];
    unint64_t v5 = v3 >> 1;
    uint64_t v6 = *(void *)(result + 1680);
    uint64_t v7 = a2[180] + 2 * v4;
    uint64_t v8 = a2[178];
    unint64_t v9 = v3 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v10 = v8 + 2 * v9;
    int v11 = *(_DWORD *)(result + 1688);
    char v12 = 4 * (v11 & 1);
    unint64_t v13 = a2[176] - 2;
    uint64_t v14 = v8 + v9;
    unint64_t result = v8 + 6 * v5;
    uint64_t v15 = 2;
    do
    {
      unint64_t v16 = v11 + 2;
      if (v13 > v16)
      {
        unint64_t v17 = v16 >> 1;
        uint64_t v18 = (_WORD *)(v10 + 2 * v16);
        int v19 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v10 + 2 * v11 + 2));
        do
        {
          int v20 = *(unsigned __int8 *)(v7 + v17) >> v12;
          int v21 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v14 + 2 * v16));
          int v22 = *(unsigned __int16 *)(v6 + 2 * (unsigned __int16)v18[1]);
          int v23 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(result + 2 * v16));
          unsigned int v24 = (v23 + v21 + 1) >> 1;
          if ((v20 & 0xF) == 0) {
            unsigned int v24 = (v19 + v22 + 1) >> 1;
          }
          unsigned int v25 = (v19 + v21 + v22 + v23 + 2) >> 2;
          if ((v20 & 5) == 0) {
            unsigned int v25 = v24;
          }
          _WORD *v18 = (v25 * v25 + 0x8000) >> 16;
          v18 += 2;
          v16 += 2;
          ++v17;
          int v19 = v22;
        }
        while (v16 < v13);
      }
      v11 ^= 1u;
      v12 ^= 4u;
      ++v15;
      v10 += 2 * v5;
      v7 += v4;
      v14 += v9;
      result += v9;
    }
    while (v15 != v2);
  }
  return result;
}

char *sub_1DDB2C934(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[182];
  uint64_t v3 = a2[183];
  uint64_t v4 = (char *)a2[184];
  size_t v5 = a2[185];
  uint64_t v6 = a2[186];
  uint64_t v7 = a2[188];
  uint64_t v118 = a2[187];
  unint64_t v119 = a2[189];
  uint64_t v8 = (char *)a2[190];
  int v150 = *(_DWORD *)(a1 + 1736);
  uint64_t v9 = 2 * v5;
  unint64_t result = (char *)memmove(v8, v4, 2 * v5);
  uint64_t v117 = v3 - 2;
  if ((unint64_t)(v3 - 2) >= 3)
  {
    int v11 = &v4[v9];
    char v12 = &v8[v9];
    unint64_t v13 = &v8[v5];
    if (v119 > 3)
    {
      uint64_t v14 = (_DWORD *)(v7 + 2 * v119);
      unint64_t v134 = (unint64_t)&v4[v9 + 10 + (v5 & 0xFFFFFFFFFFFFFFFELL)];
      uint64_t v135 = (uint64_t)&v4[v9 + 4];
      uint64_t v15 = 2;
      size_t v132 = v135 + 4 * (v5 >> 1);
      uint64_t v133 = v6 + 2 * v118;
      size_t v116 = v5;
      unint64_t v149 = v2 - 3;
      while (1)
      {
        uint64_t v151 = v14;
        int32x4_t v130 = v13;
        int32x4_t v131 = v8;
        uint64_t v136 = v15;
        uint64_t v157 = 2 * (v15 & 1);
        int32x4_t v128 = v11;
        int32x4_t v129 = v12;
        unint64_t result = (char *)memmove(v12, v11, v5);
        unint64_t v16 = v151;
        unint64_t v17 = v149;
        uint64_t v18 = 0;
        int v19 = v150;
        while (!v151[v18])
        {
          if (v119 >> 2 == ++v18) {
            goto LABEL_4;
          }
        }
        unint64_t v20 = v136 & 1 | 2;
        if (v20 < v149) {
          break;
        }
LABEL_4:
        uint64_t v14 = (_DWORD *)((char *)v16 + v119);
        uint64_t v15 = v136 + 1;
        size_t v5 = v116;
        unint64_t v13 = v129;
        int v11 = &v128[v116];
        char v12 = v131;
        v132 += v116;
        v133 += v118;
        v134 += v116;
        v135 += v116;
        uint64_t v8 = v130;
        if (v136 + 1 == v117) {
          return result;
        }
      }
      unint64_t v21 = v134;
      int v22 = (unsigned __int8 *)(v133 + 1);
      int v23 = 1 << v20;
      unsigned int v24 = v12;
      unsigned int v25 = v130 + 6;
      uint64_t v27 = v8;
      size_t v26 = v132;
      uint64_t v28 = v135;
      int v29 = (char *)v151;
      while (1)
      {
        if ((*(_DWORD *)v29 & v23) != 0)
        {
          if (v19 == 2)
          {
            uint64_t v34 = v157;
            int v35 = &v24[v157];
            int v36 = &v25[v157];
            unint64_t v31 = v20 & 1;
            unsigned int v37 = *v22;
            int v38 = v37 >> 4;
            int v39 = v37 & 0xF;
            if (v20) {
              int v40 = v38;
            }
            else {
              int v40 = v39;
            }
            switch(v40)
            {
              case 0:
                unsigned int v41 = *(unsigned __int16 *)&v24[v157 + 2];
                unsigned int v42 = *((unsigned __int16 *)v35 + 2);
                unsigned int v43 = *(unsigned __int16 *)&v24[v157 + 6];
                if (v41 >= v42) {
                  goto LABEL_50;
                }
                goto LABEL_56;
              case 1:
                unsigned int v41 = *(unsigned __int16 *)&v25[v157];
                unsigned int v42 = *((unsigned __int16 *)v35 + 2);
                unsigned int v43 = *(unsigned __int16 *)(v21 + v157 - 8);
                if (v41 < v42) {
                  goto LABEL_56;
                }
                goto LABEL_50;
              case 2:
                unsigned int v41 = *((unsigned __int16 *)v36 - 1);
                unsigned int v42 = *((unsigned __int16 *)v35 + 2);
                unsigned int v43 = *(unsigned __int16 *)(v21 + v157 - 6);
                if (v41 >= v42) {
                  goto LABEL_50;
                }
                goto LABEL_56;
              case 3:
                unsigned int v41 = *(unsigned __int16 *)&v25[v157 - 4];
                unsigned int v42 = *((unsigned __int16 *)v35 + 2);
                unsigned int v43 = *(unsigned __int16 *)(v21 + v157 - 4);
                if (v41 >= v42)
                {
LABEL_50:
                  if ((int)v43 > (int)v42) {
                    LOWORD(v42) = v43;
                  }
                  if (v41 >= v43) {
                    __int16 v63 = v42;
                  }
                  else {
                    __int16 v63 = v41;
                  }
                }
                else
                {
LABEL_56:
                  if ((int)v41 <= (int)v43) {
                    LOWORD(v41) = v43;
                  }
                  if (v42 >= v43) {
                    __int16 v63 = v41;
                  }
                  else {
                    __int16 v63 = v42;
                  }
                }
                goto LABEL_62;
              case 4:
                int v153 = v22;
                __int16 v63 = sub_1DDB2D304(*((unsigned __int16 *)v36 - 1), *(unsigned __int16 *)&v24[v157 + 2], *((unsigned __int16 *)v35 + 2), *(unsigned __int16 *)&v24[v157 + 6], *(unsigned __int16 *)(v21 + v157 - 6));
                unint64_t v31 = v20 & 1;
                int v36 = &v25[v157];
                int v22 = v153;
                uint64_t v34 = v157;
                unint64_t v16 = v151;
                unint64_t v17 = v149;
                int v19 = v150;
LABEL_62:
                *(_WORD *)(v28 + v34) = v63;
                break;
              default:
                break;
            }
            unint64_t result = &v29[4 * (2 * v23 == 0)];
            if ((2 * v23) <= 1) {
              int v30 = 1;
            }
            else {
              int v30 = 2 * v23;
            }
            unsigned int v64 = v22[v31];
            unint64_t v32 = v20 + 1;
            int v65 = v64 >> 4;
            int v66 = v64 & 0xF;
            if (v32) {
              int v67 = v65;
            }
            else {
              int v67 = v66;
            }
            switch(v67)
            {
              case 0:
                unsigned int v68 = *((unsigned __int16 *)v35 + 2);
                unsigned int v69 = *(unsigned __int16 *)&v24[v34 + 6];
                unsigned int v70 = *(unsigned __int16 *)&v24[v34 + 8];
                if (v68 >= v69) {
                  goto LABEL_87;
                }
                goto LABEL_92;
              case 1:
                unsigned int v68 = *(unsigned __int16 *)&v25[v34 + 2];
                unsigned int v69 = *(unsigned __int16 *)&v24[v34 + 6];
                unsigned int v70 = *(unsigned __int16 *)(v21 + v34 - 6);
                if (v68 < v69) {
                  goto LABEL_92;
                }
                goto LABEL_87;
              case 2:
                unsigned int v68 = *(unsigned __int16 *)&v25[v34];
                unsigned int v69 = *(unsigned __int16 *)&v24[v34 + 6];
                unsigned int v70 = *(unsigned __int16 *)(v21 + v34 - 4);
                if (v68 >= v69) {
                  goto LABEL_87;
                }
                goto LABEL_92;
              case 3:
                unsigned int v68 = *((unsigned __int16 *)v36 - 1);
                unsigned int v69 = *(unsigned __int16 *)&v24[v34 + 6];
                unsigned int v70 = *(unsigned __int16 *)(v21 + v34 - 2);
                if (v68 >= v69)
                {
LABEL_87:
                  if ((int)v70 > (int)v69) {
                    LOWORD(v69) = v70;
                  }
                  if (v68 >= v70) {
                    LOWORD(v68) = v69;
                  }
                }
                else
                {
LABEL_92:
                  if ((int)v68 <= (int)v70) {
                    LOWORD(v68) = v70;
                  }
                  if (v69 < v70) {
                    LOWORD(v68) = v69;
                  }
                }
                *(_WORD *)(v28 + v34 + 2) = v68;
                break;
              case 4:
                unint64_t v145 = result;
                int v76 = *((unsigned __int16 *)v35 + 2);
                uint64_t v154 = v22;
                unint64_t v77 = v31;
                uint64_t v78 = v34;
                __int16 v79 = sub_1DDB2D304(*(unsigned __int16 *)&v25[v34], v76, *(unsigned __int16 *)&v24[v34 + 6], *(unsigned __int16 *)&v24[v34 + 8], *(unsigned __int16 *)(v21 + v34 - 4));
                unint64_t v31 = v77;
                unint64_t v16 = v151;
                int v22 = v154;
                int v19 = v150;
                *(_WORD *)(v28 + v78 + 2) = v79;
                unint64_t result = v145;
                unint64_t v17 = v149;
                break;
              default:
                goto LABEL_15;
            }
            goto LABEL_15;
          }
          uint64_t v44 = v157;
          unsigned int v45 = *(unsigned __int16 *)(v28 + v157);
          unsigned int v46 = *(unsigned __int16 *)&v27[v157 + 4];
          unsigned int v47 = *(unsigned __int16 *)&v25[v157 - 4];
          uint64_t v48 = *(unsigned __int16 *)&v25[v157];
          unsigned int v49 = *(unsigned __int16 *)&v24[v157];
          int v50 = *(unsigned __int16 *)&v24[v157 + 8];
          int v51 = *(unsigned __int16 *)(v21 + v157 - 8);
          int v52 = *(unsigned __int16 *)(v21 + v157 - 4);
          size_t v53 = v26 + v157;
          unsigned int v54 = *(unsigned __int16 *)(v26 + v157);
          if (!v19)
          {
            unint64_t v31 = v20 & 1;
            unsigned int v57 = *v22;
            int v58 = v57 >> 4;
            int v59 = v57 & 0xF;
            if (v20) {
              int v60 = v58;
            }
            else {
              int v60 = v59;
            }
            switch(v60)
            {
              case 0:
                if (v49 >= v45)
                {
                  if (v50 <= (int)v45) {
                    __int16 v93 = *(_WORD *)(v28 + v157);
                  }
                  else {
                    __int16 v93 = *(_WORD *)&v24[v157 + 8];
                  }
                  if (v49 >= v50) {
                    __int16 v62 = v93;
                  }
                  else {
                    __int16 v62 = *(_WORD *)&v24[v157];
                  }
                }
                else
                {
                  if ((int)v49 <= v50) {
                    __int16 v61 = *(_WORD *)&v24[v157 + 8];
                  }
                  else {
                    __int16 v61 = *(_WORD *)&v24[v157];
                  }
                  if (v45 >= v50) {
                    __int16 v62 = v61;
                  }
                  else {
                    __int16 v62 = *(_WORD *)(v28 + v157);
                  }
                }
                goto LABEL_164;
              case 1:
                if (v48 >= v45)
                {
                  if (v51 <= (int)v45) {
                    __int16 v94 = *(_WORD *)(v28 + v157);
                  }
                  else {
                    __int16 v94 = *(_WORD *)(v21 + v157 - 8);
                  }
                  if (v48 >= v51) {
                    __int16 v62 = v94;
                  }
                  else {
                    __int16 v62 = *(_WORD *)&v25[v157];
                  }
                }
                else
                {
                  if ((int)v48 <= v51) {
                    __int16 v89 = *(_WORD *)(v21 + v157 - 8);
                  }
                  else {
                    __int16 v89 = *(_WORD *)&v25[v157];
                  }
                  if (v45 >= v51) {
                    __int16 v62 = v89;
                  }
                  else {
                    __int16 v62 = *(_WORD *)(v28 + v157);
                  }
                }
                goto LABEL_164;
              case 2:
                if (v46 >= v45)
                {
                  if ((int)v54 <= (int)v45) {
                    __int16 v95 = *(_WORD *)(v28 + v157);
                  }
                  else {
                    __int16 v95 = *(_WORD *)(v26 + v157);
                  }
                  if (v46 >= v54) {
                    __int16 v62 = v95;
                  }
                  else {
                    __int16 v62 = *(_WORD *)&v27[v157 + 4];
                  }
                }
                else
                {
                  if ((int)v46 <= (int)v54) {
                    __int16 v90 = *(_WORD *)(v26 + v157);
                  }
                  else {
                    __int16 v90 = *(_WORD *)&v27[v157 + 4];
                  }
                  if (v45 >= v54) {
                    __int16 v62 = v90;
                  }
                  else {
                    __int16 v62 = *(_WORD *)(v28 + v157);
                  }
                }
                goto LABEL_164;
              case 3:
                if (v47 >= v45)
                {
                  if (v52 <= (int)v45) {
                    __int16 v96 = *(_WORD *)(v28 + v157);
                  }
                  else {
                    __int16 v96 = *(_WORD *)(v21 + v157 - 4);
                  }
                  if (v47 >= v52) {
                    __int16 v62 = v96;
                  }
                  else {
                    __int16 v62 = *(_WORD *)&v25[v157 - 4];
                  }
                }
                else
                {
                  if ((int)v47 <= v52) {
                    __int16 v91 = *(_WORD *)(v21 + v157 - 4);
                  }
                  else {
                    __int16 v91 = *(_WORD *)&v25[v157 - 4];
                  }
                  if (v45 >= v52) {
                    __int16 v62 = v91;
                  }
                  else {
                    __int16 v62 = *(_WORD *)(v28 + v157);
                  }
                }
                goto LABEL_164;
              case 4:
                int v155 = v22;
                int v92 = *(unsigned __int16 *)(v21 + v157 - 4);
                unsigned int v147 = *(unsigned __int16 *)&v25[v157];
                unsigned int v127 = *(unsigned __int16 *)&v25[v157 - 4];
                int v141 = *(unsigned __int16 *)(v21 + v157 - 8);
                int v124 = *(unsigned __int16 *)&v24[v157 + 8];
                __int16 v62 = sub_1DDB2D304(*(unsigned __int16 *)&v25[v157 - 4], v147, v45, v51, v52);
                int v50 = v124;
                int v51 = v141;
                unsigned int v47 = v127;
                uint64_t v48 = v147;
                int v52 = v92;
                unint64_t v31 = v20 & 1;
                int v22 = v155;
                uint64_t v44 = v157;
                unint64_t v16 = v151;
                unint64_t v17 = v149;
                int v19 = v150;
LABEL_164:
                *(_WORD *)(v28 + v44) = v62;
                break;
              default:
                break;
            }
            unint64_t result = &v29[4 * (2 * v23 == 0)];
            if ((2 * v23) <= 1) {
              int v30 = 1;
            }
            else {
              int v30 = 2 * v23;
            }
            unint64_t v32 = v20 + 1;
            unsigned int v97 = v22[v31];
            int v98 = v97 >> 4;
            int v99 = v97 & 0xF;
            if (v32) {
              int v99 = v98;
            }
            uint64_t v100 = v28 + v44;
            unsigned int v101 = *(unsigned __int16 *)(v28 + v44 + 2);
            switch(v99)
            {
              case 1:
                unsigned int v102 = *(unsigned __int16 *)&v25[v44 + 4];
                if (v102 < v101)
                {
                  if ((int)v102 <= v51) {
                    LOWORD(v102) = v51;
                  }
                  BOOL v103 = v51 > v101;
                  goto LABEL_180;
                }
                if (v51 <= (int)v101) {
                  __int16 v109 = *(_WORD *)(v28 + v44 + 2);
                }
                else {
                  __int16 v109 = v51;
                }
                if (v51 <= v102) {
                  LOWORD(v102) = v109;
                }
                *(_WORD *)(v100 + 2) = v102;
                break;
              case 2:
                if (v48 >= v101)
                {
                  if (v52 <= (int)v101) {
                    __int16 v110 = *(_WORD *)(v28 + v44 + 2);
                  }
                  else {
                    __int16 v110 = v52;
                  }
                  if (v48 < v52) {
                    __int16 v110 = v48;
                  }
                  *(_WORD *)(v100 + 2) = v110;
                }
                else
                {
                  if ((int)v48 <= v52) {
                    LOWORD(v102) = v52;
                  }
                  else {
                    LOWORD(v102) = v48;
                  }
                  BOOL v103 = v52 > v101;
LABEL_180:
                  if (v103) {
                    LOWORD(v102) = *(_WORD *)(v28 + v44 + 2);
                  }
                  *(_WORD *)(v100 + 2) = v102;
                }
                break;
              case 3:
                unsigned int v104 = *(unsigned __int16 *)(v21 + v44);
                if (v47 >= v101)
                {
                  if ((int)v104 <= (int)v101) {
                    __int16 v111 = *(_WORD *)(v28 + v44 + 2);
                  }
                  else {
                    __int16 v111 = *(_WORD *)(v21 + v44);
                  }
                  if (v47 >= v104) {
                    __int16 v112 = v111;
                  }
                  else {
                    __int16 v112 = v47;
                  }
                  *(_WORD *)(v100 + 2) = v112;
                }
                else
                {
                  if ((int)v47 <= (int)v104) {
                    __int16 v105 = *(_WORD *)(v21 + v44);
                  }
                  else {
                    __int16 v105 = v47;
                  }
                  if (v101 >= v104) {
                    __int16 v106 = v105;
                  }
                  else {
                    __int16 v106 = *(_WORD *)(v28 + v44 + 2);
                  }
                  *(_WORD *)(v100 + 2) = v106;
                }
                break;
              case 4:
                uint64_t v148 = result;
                uint64_t v156 = v22;
                unint64_t v107 = v31;
                __int16 v108 = sub_1DDB2D304(v48, v101, v101, v50, v52);
                unint64_t v31 = v107;
                unint64_t v16 = v151;
                int v22 = v156;
                int v19 = v150;
                *(_WORD *)(v100 + 2) = v108;
                unint64_t result = v148;
                unint64_t v17 = v149;
                break;
              default:
                goto LABEL_15;
            }
            goto LABEL_15;
          }
          if (v19 == 1)
          {
            size_t v122 = v26;
            int v138 = *(unsigned __int16 *)(v26 + v157);
            unsigned int v123 = *(unsigned __int16 *)&v24[v157 + 8];
            unsigned int v140 = *(unsigned __int16 *)(v21 + v157 - 8);
            int v139 = *(unsigned __int16 *)(v21 + v157 - 4);
            uint64_t v152 = v22;
            int v120 = *(unsigned __int16 *)(v53 - 4);
            int v137 = *(unsigned __int16 *)(v53 + 4);
            unsigned int v142 = *(unsigned __int16 *)&v27[v157 + 4];
            int v121 = *(unsigned __int16 *)&v27[v157 + 8];
            int v125 = *(unsigned __int16 *)&v25[v157 - 4];
            int v144 = *(unsigned __int16 *)&v25[v157];
            unsigned int v55 = sub_1DDB2D304(*(unsigned __int16 *)&v27[v157], v46, v121, v47, v48);
            if (v49 >= v45)
            {
              if ((int)v123 <= (int)v45) {
                unsigned int v71 = v45;
              }
              else {
                unsigned int v71 = v123;
              }
              if (v49 >= v123) {
                unsigned int v49 = v71;
              }
            }
            else
            {
              if ((int)v49 <= (int)v123) {
                unsigned int v56 = v123;
              }
              else {
                unsigned int v56 = v49;
              }
              if (v45 >= v123) {
                unsigned int v49 = v56;
              }
              else {
                unsigned int v49 = v45;
              }
            }
            unsigned int v72 = sub_1DDB2D304(v140, v139, v120, v138, v137);
            unsigned int v73 = v55;
            BOOL v74 = v55 >= v49;
            size_t v26 = v122;
            if (v74)
            {
              if ((int)v72 <= (int)v49) {
                __int16 v75 = v49;
              }
              else {
                __int16 v75 = v72;
              }
              if (v73 < v72) {
                __int16 v75 = v73;
              }
            }
            else
            {
              if ((int)v73 <= (int)v72) {
                __int16 v75 = v72;
              }
              else {
                __int16 v75 = v73;
              }
              if (v49 < v72) {
                __int16 v75 = v49;
              }
            }
            int v80 = v144;
            int v81 = v125;
            uint64_t v82 = v142;
            *(_WORD *)(v28 + v157) = v75;
            int v83 = 2 * v23;
            uint64_t v146 = &v29[4 * (2 * v23 == 0)];
            if ((2 * v23) <= 1) {
              int v83 = 1;
            }
            int v126 = v83;
            unint64_t v143 = v20 & 1;
            unint64_t v32 = v20 + 1;
            unsigned int v84 = *(unsigned __int16 *)(v28 + v157 + 2);
            int v85 = *(unsigned __int16 *)(v21 + v157);
            unsigned int v86 = sub_1DDB2D304(v82, v121, v81, v80, *(unsigned __int16 *)&v25[v157 + 4]);
            unsigned int v87 = sub_1DDB2D304(v140, v139, v85, v138, v137);
            if (v86 >= v84)
            {
              if ((int)v87 <= (int)v84) {
                __int16 v88 = v84;
              }
              else {
                __int16 v88 = v87;
              }
              if (v86 < v87) {
                __int16 v88 = v86;
              }
            }
            else
            {
              if ((int)v86 <= (int)v87) {
                __int16 v88 = v87;
              }
              else {
                __int16 v88 = v86;
              }
              if (v87 > v84) {
                __int16 v88 = v84;
              }
            }
            *(_WORD *)(v28 + v157 + 2) = v88;
            int v19 = v150;
            unint64_t result = v146;
            unint64_t v17 = v149;
            unint64_t v16 = v151;
            int v22 = v152;
            unint64_t v31 = v143;
            int v30 = v126;
            goto LABEL_15;
          }
        }
        unint64_t result = &v29[4 * (2 * v23 == 0)];
        if ((2 * v23) <= 1) {
          int v30 = 1;
        }
        else {
          int v30 = 2 * v23;
        }
        unint64_t v31 = v20 & 1;
        unint64_t v32 = v20 + 1;
LABEL_15:
        unsigned int v33 = 2 * v30;
        int v29 = &result[4 * (2 * v30 == 0)];
        if (v33 <= 1) {
          int v23 = 1;
        }
        else {
          int v23 = v33;
        }
        v22 += v31 + (v32 & 1);
        unint64_t v20 = v32 + 1;
        v26 += 4;
        v21 += 4;
        v28 += 4;
        v27 += 4;
        v24 += 4;
        v25 += 4;
        if (v20 >= v17) {
          goto LABEL_4;
        }
      }
    }
    uint64_t v113 = v3 - 4;
    int v114 = &v8[v5];
    do
    {
      int v115 = v8;
      unint64_t result = (char *)memmove(v12, v11, v5);
      v11 += v5;
      uint64_t v8 = v114;
      int v114 = v12;
      char v12 = v115;
      --v113;
    }
    while (v113);
  }
  return result;
}

uint64_t sub_1DDB2D304(uint64_t result, int a2, int a3, int a4, int a5)
{
  if ((int)result >= a2)
  {
    if (a3 >= a4)
    {
      if ((int)result < a3)
      {
        if (a4 < a5)
        {
          if ((int)result < a5)
          {
            if ((int)result <= a4) {
              return a4;
            }
            else {
              return result;
            }
          }
LABEL_58:
          if (a2 <= a5) {
            return a5;
          }
          else {
            return a2;
          }
        }
        if ((int)result < a4) {
          goto LABEL_55;
        }
        goto LABEL_74;
      }
      if (a2 >= a5)
      {
        if (a2 >= a3) {
          goto LABEL_80;
        }
        goto LABEL_74;
      }
      if (a3 < a5) {
        goto LABEL_66;
      }
    }
    else
    {
      if ((int)result < a4)
      {
        if (a3 < a5)
        {
          if ((int)result < a5)
          {
            if ((int)result <= a3) {
              return a3;
            }
            else {
              return result;
            }
          }
          goto LABEL_58;
        }
        if ((int)result >= a3)
        {
LABEL_66:
          if (a2 <= a3) {
            return a3;
          }
          else {
            return a2;
          }
        }
LABEL_55:
        if ((int)result <= a5) {
          return a5;
        }
        else {
          return result;
        }
      }
      if (a2 < a5)
      {
        if (a4 >= a5)
        {
LABEL_80:
          if (a3 <= a5) {
            return a5;
          }
          else {
            return a3;
          }
        }
LABEL_74:
        if (a2 <= a4) {
          return a4;
        }
        else {
          return a2;
        }
      }
      if (a2 < a4) {
        goto LABEL_66;
      }
    }
    if (a4 <= a5) {
      return a5;
    }
    else {
      return a4;
    }
  }
  if (a3 < a4)
  {
    if ((int)result < a3)
    {
      if (a2 < a5)
      {
        if (a2 >= a3) {
          goto LABEL_51;
        }
        goto LABEL_48;
      }
      if (a3 < a5)
      {
LABEL_39:
        if (a4 >= a5) {
          return a5;
        }
        else {
          return a4;
        }
      }
      goto LABEL_42;
    }
    if (a4 < a5)
    {
      if ((int)result < a4)
      {
LABEL_51:
        if (a2 >= a4) {
          return a4;
        }
        else {
          return a2;
        }
      }
      goto LABEL_32;
    }
    if ((int)result >= a5)
    {
      if ((int)result >= a4) {
        return a4;
      }
      else {
        return result;
      }
    }
    goto LABEL_70;
  }
  if ((int)result < a4)
  {
    if (a2 >= a5)
    {
      if (a4 >= a5) {
        goto LABEL_51;
      }
LABEL_48:
      if (a3 >= a5) {
        return a5;
      }
      else {
        return a3;
      }
    }
    if (a2 < a4) {
      goto LABEL_39;
    }
    goto LABEL_42;
  }
  if (a3 < a5)
  {
    if ((int)result >= a3)
    {
LABEL_32:
      if ((int)result >= a5) {
        return a5;
      }
      else {
        return result;
      }
    }
LABEL_42:
    if (a2 >= a3) {
      return a3;
    }
    else {
      return a2;
    }
  }
  if ((int)result < a5)
  {
LABEL_70:
    if (a2 >= a5) {
      return a5;
    }
    else {
      return a2;
    }
  }
  if ((int)result >= a3) {
    return a3;
  }
  else {
    return result;
  }
}

unint64_t sub_1DDB2D4D4(uint64_t a1, void *a2)
{
  uint64_t v374 = *(void *)(a1 + 1792);
  unint64_t v2 = a2[191];
  uint64_t v3 = a2[192];
  unint64_t v4 = a2[194];
  size_t v5 = (uint16x8_t *)a2[199];
  if (v3) {
    BOOL v6 = v2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  uint64_t v7 = 4 * v2;
  unint64_t v8 = v4 >> 1;
  uint64_t v261 = 4 * v2;
  unint64_t v262 = (_WORD *)a2[193];
  if (v6)
  {
    uint64_t v9 = (void *)a2[43];
    if (v2) {
      BOOL v10 = v3 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    char v11 = v10;
    char v260 = v11;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(a1 + 1784);
    uint64_t v14 = a2[199];
    uint64_t v15 = a2[193];
    do
    {
      uint64_t v16 = 0;
      do
      {
        *(_WORD *)(v14 + 2 * v16) = *(_WORD *)(v13 + 2 * *(unsigned __int16 *)(v15 + 2 * v16));
        ++v16;
      }
      while (v2 != v16);
      ++v12;
      v15 += v4;
      v14 += v4;
    }
    while (v12 != v3);
    uint64_t v9 = (void *)a2[43];
    uint64_t v17 = 2 * v8;
    if (v2 > 0xF)
    {
      if (v2 == (v2 & 0xFFFFFFFFFFFFFFF0))
      {
        uint64_t v22 = 0;
        int v23 = v5 + 1;
        unsigned int v24 = (unsigned long long *)(v9 + 4);
        do
        {
          unsigned int v25 = v24;
          size_t v26 = v23;
          unint64_t v27 = v2 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            uint16x8_t v28 = v26[-1];
            uint32x4_t v29 = vmovl_high_u16(*v26);
            unsigned long long v30 = *(_OWORD *)&vmovl_u16(*(uint16x4_t *)v26->i8) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *(v25 - 2) = *(_OWORD *)&vmovl_u16(*(uint16x4_t *)v28.i8) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *(v25 - 1) = *(_OWORD *)&vmovl_high_u16(v28) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *unsigned int v25 = v30;
            v25[1] = *(_OWORD *)&v29 | __PAIR128__(0x100000001000000, 0x100000001000000);
            v25 += 4;
            v26 += 2;
            v27 -= 16;
          }
          while (v27);
          ++v22;
          int v23 = (uint16x8_t *)((char *)v23 + v17);
          unsigned int v24 = (unsigned long long *)((char *)v24 + v7);
        }
        while (v22 != v3);
      }
      else
      {
        uint64_t v31 = 0;
        unint64_t v32 = v5 + 1;
        unsigned int v33 = (unsigned long long *)(v9 + 4);
        uint64_t v34 = v5;
        uint64_t v35 = a2[43];
        do
        {
          unint64_t v36 = v2 & 0xFFFFFFFFFFFFFFF0;
          unsigned int v37 = v33;
          int v38 = v32;
          do
          {
            uint16x8_t v39 = v38[-1];
            uint32x4_t v40 = vmovl_high_u16(*v38);
            unsigned long long v41 = *(_OWORD *)&vmovl_u16(*(uint16x4_t *)v38->i8) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *(v37 - 2) = *(_OWORD *)&vmovl_u16(*(uint16x4_t *)v39.i8) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *(v37 - 1) = *(_OWORD *)&vmovl_high_u16(v39) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *unsigned int v37 = v41;
            v37[1] = *(_OWORD *)&v40 | __PAIR128__(0x100000001000000, 0x100000001000000);
            v37 += 4;
            v38 += 2;
            v36 -= 16;
          }
          while (v36);
          unint64_t v42 = v2 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            *(_DWORD *)(v35 + 4 * v42) = v34->u16[v42] | 0x1000000;
            ++v42;
          }
          while (v2 != v42);
          ++v31;
          unint64_t v32 = (uint16x8_t *)((char *)v32 + v17);
          unsigned int v33 = (unsigned long long *)((char *)v33 + v7);
          v35 += v7;
          uint64_t v34 = (uint16x8_t *)((char *)v34 + v17);
        }
        while (v31 != v3);
      }
    }
    else
    {
      uint64_t v18 = 0;
      int v19 = v5;
      uint64_t v20 = a2[43];
      do
      {
        uint64_t v21 = 0;
        do
        {
          *(_DWORD *)(v20 + 4 * v21) = v19->u16[v21] | 0x1000000;
          ++v21;
        }
        while (v2 != v21);
        ++v18;
        v20 += v7;
        int v19 = (uint16x8_t *)((char *)v19 + v17);
      }
      while (v18 != v3);
    }
    char v260 = 0;
  }
  uint64_t v263 = v3;
  unint64_t v264 = v2;
  int v268 = v3 - 2;
  int v283 = v2 - 2;
  uint64_t v282 = (int)((2 * v8) ^ 0xFFFFFFFE);
  uint64_t v43 = (uint64_t)v5->i64 - 4 * (int)v8;
  unint64_t v258 = v8;
  uint64_t v266 = v43 - 2;
  uint64_t v267 = (int)v2;
  uint64_t v278 = v43 + 4;
  uint64_t v279 = (int)v8;
  uint64_t v265 = v43 - 6;
  uint64_t v301 = 16 * v2;
  LODWORD(result) = 3;
  uint64_t v45 = -3;
  uint64_t v309 = 4 * (int)v2;
  uint64_t v46 = 2 * (int)v8;
  int v47 = 5;
  uint64_t v300 = 8 * v8;
  uint64_t v377 = v46;
  int v280 = v5;
  int v281 = v9;
  do
  {
    int v48 = result & ((int)result >> 31);
    int v269 = v47;
    uint64_t v49 = v47 - v48;
    uint64_t v295 = v266 + v279 * (2 * (v45 + v49) + 14);
    uint64_t v294 = v266 + v279 * (2 * (v45 + v49) + 12);
    uint64_t v293 = v266 + v279 * (2 * (v45 + v49) + 10);
    uint64_t v291 = v266 + v46 * (v45 + v49);
    uint64_t v292 = v266 + v279 * (2 * (v45 + v49) + 8);
    uint64_t v290 = v266 + v279 * (2 * (v45 + v49) + 6);
    uint64_t v289 = v266 + v279 * (2 * (v45 + v49) + 2);
    uint64_t v288 = v266 + v279 * (2 * (v45 + v49) + 4);
    int v270 = result;
    unint64_t v50 = (int)(result - (-(int)v45 & (-(int)v45 >> 31)) + 2);
    uint64_t v277 = (uint64_t)v5->i64 + 2 * (int)v279 * v50;
    unint64_t v285 = v50;
    uint64_t v276 = (uint64_t)v5->i64 + 2 * (v45 + v50) * v279;
    unint64_t v310 = v268 + v48;
    unint64_t v302 = v310 - 3;
    uint64_t v275 = (char *)v9 + v267 * (4 * v49 + 12);
    int v273 = (char *)v9 + v267 * (4 * v49 + 4);
    int v274 = (char *)v9 + v267 * (4 * v49 + 8);
    uint64_t v51 = -3;
    int v299 = 5;
    int v298 = 3;
    uint64_t v296 = v265;
    uint64_t v297 = v266;
    uint64_t v271 = v278 + v46 * v49;
    uint64_t v272 = (char *)v9 + v309 * v49;
    uint64_t v286 = v45;
    do
    {
      if (v51 | v45)
      {
        int v52 = v298 & (v298 >> 31);
        uint64_t v375 = v299 - v52;
        uint64_t v284 = 4 * v375;
        uint64_t v404 = 2 * v375;
        unint64_t v376 = v283 + v52;
        uint64_t v287 = v298 - (-(int)v51 & (-(int)v51 >> 31)) + 2;
        uint64_t v311 = 2 * v282;
        uint64_t v312 = 2 * v287;
        unint64_t v53 = v285;
        uint64_t v313 = v51;
        if (v302 > v285)
        {
          unint64_t v53 = v285;
          if (v287 >= v376)
          {
            do
              v53 += 4;
            while (v53 < v302);
          }
          else
          {
            float v319 = &v275[v284];
            float v318 = &v274[v284];
            float v317 = &v273[v284];
            uint64_t v324 = v295 + v404;
            uint64_t v54 = v293;
            uint64_t v323 = v294 + v404;
            unsigned int v316 = &v272[v284];
            uint64_t v322 = v271 + v404;
            uint64_t v55 = v290;
            uint64_t v321 = v291 + v404;
            uint64_t v56 = v288;
            uint64_t v320 = v289 + v404;
            uint64_t v57 = v292;
            uint64_t v59 = v276;
            uint64_t v58 = v277;
            unint64_t v53 = v285;
            do
            {
              unint64_t v315 = v53;
              uint64_t v138 = 0;
              uint64_t v303 = v58;
              uint64_t v304 = v59;
              int v139 = (uint16x4_t *)(v58 + v312 + v311);
              unsigned int v140 = (uint16x4_t *)(v59 + v312 + 2 * v51 + v311);
              int32x4_t v141 = (int32x4_t)vsubl_u16(*v139, *v140);
              v142.i64[0] = 0x1000000010;
              v142.i64[1] = 0x1000000010;
              uint32x4_t v143 = (uint32x4_t)vmlaq_s32(v142, v141, v141);
              uint32x4_t v144 = vshrq_n_u32(v143, 5uLL);
              uint16x4_t v145 = *(uint16x4_t *)((char *)v139 + v46);
              uint64_t v146 = (uint16x4_t *)((char *)v139 + v46 + v46);
              unsigned int v147 = (uint16x4_t *)((char *)v140 + v46 + v46);
              uint16x4_t v148 = *v146;
              unint64_t v149 = (uint16x4_t *)((char *)v146 + v46);
              int v150 = (char *)v147 + v46;
              uint16x4_t v151 = *(uint16x4_t *)((char *)v149 + v46);
              int32x4_t v152 = (int32x4_t)vsubl_u16(*v149, *(uint16x4_t *)((char *)v147 + v46));
              int32x4_t v153 = (int32x4_t)vsubl_u16(v151, *(uint16x4_t *)((char *)v147 + v46 + v46));
              int32x4_t v154 = (int32x4_t)vsubl_u16(v145, *(uint16x4_t *)((char *)v140 + v46));
              int32x4_t v155 = (int32x4_t)vsubl_u16(v148, *v147);
              v156.i64[0] = 0x1000000010;
              v156.i64[1] = 0x1000000010;
              uint32x4_t v157 = (uint32x4_t)vmlaq_s32(v156, v152, v152);
              v158.i64[0] = 0x1000000010;
              v158.i64[1] = 0x1000000010;
              uint32x4_t v159 = (uint32x4_t)vmlaq_s32(v158, v153, v153);
              v152.i64[0] = 0x1000000010;
              v152.i64[1] = 0x1000000010;
              uint32x4_t v160 = (uint32x4_t)vmlaq_s32(v152, v154, v154);
              v153.i64[0] = 0x1000000010;
              v153.i64[1] = 0x1000000010;
              uint32x4_t v161 = vshrq_n_u32(v157, 5uLL);
              uint32x4_t v162 = vshrq_n_u32((uint32x4_t)vmlaq_s32(v153, v155, v155), 5uLL);
              int32x4_t v163 = (int32x4_t)vshrq_n_u32(v160, 5uLL);
              __int32 v164 = v163.i32[1];
              __int32 v165 = v163.i32[2];
              unsigned int v166 = v163.u32[3];
              __int32 v167 = v163.i32[0];
              __int32 v168 = v162.i32[0];
              __int32 v169 = v162.i32[1];
              __int32 v170 = v162.i32[2];
              unsigned int v171 = v162.u32[3];
              int32x4_t v172 = vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v163, v157, 5uLL), (int32x4_t)vsraq_n_u32(v162, v159, 5uLL));
              int16x8x3_t v173 = (unsigned __int16 *)((char *)v149 + v46 + v46);
              int16x8x3_t v174 = (unsigned __int16 *)&v150[v46 + v46];
              int v175 = *v173 - *v174;
              unsigned int v176 = (v175 * v175 + 16) >> 5;
              int v357 = v173[1];
              int v409 = v173[2];
              unsigned int v399 = ((v357 - v174[1]) * (v357 - v174[1]) + 16) >> 5;
              unsigned int v397 = ((v409 - v174[2]) * (v409 - v174[2]) + 16) >> 5;
              int v371 = v173[3];
              unsigned int v391 = ((v371 - v174[3]) * (v371 - v174[3]) + 16) >> 5;
              int v177 = vaddvq_s32(v172) + v176 + v399 + v397 + v391;
              int v178 = (unsigned __int16 *)((char *)v173 + v46);
              unsigned int v179 = (unsigned __int16 *)((char *)v174 + v46);
              int v180 = *v178 - *v179;
              int v359 = v178[1];
              unsigned int v385 = (v180 * v180 + 16) >> 5;
              unsigned int v361 = ((v359 - v179[1]) * (v359 - v179[1]) + 16) >> 5;
              unsigned int v181 = ((v178[2] - v179[2]) * (v178[2] - v179[2]) + 16) >> 5;
              int v407 = v178[3];
              unsigned int v369 = ((v407 - v179[3]) * (v407 - v179[3]) + 16) >> 5;
              v157.i64[0] = *(void *)((char *)v178 + v46);
              v163.i64[0] = *(void *)((char *)v179 + v46);
              unsigned int v182 = v171;
              int32x4_t v183 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v157.i8, *(uint16x4_t *)v163.i8);
              v163.i64[0] = 0x1000000010;
              v163.i64[1] = 0x1000000010;
              int32x4_t v184 = (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(v163, v183, v183), 5uLL);
              __int32 v185 = v184.i32[1];
              __int32 v186 = v184.i32[2];
              unsigned int v355 = v184.u32[3];
              __int32 v395 = v161.i32[1];
              int v360 = v177 - (v164 + v167 + v165 + v166) + v385 + v361 + v181 + v369;
              int v358 = vaddvq_s32(v184) + v360 - (v169 + v168 + v170 + v171);
              __int32 v393 = v161.i32[2];
              uint32x4_t v187 = vmovl_u16(v151);
              uint32x4_t v188 = vmovl_u16(*v149);
              uint32x4_t v189 = vmovl_u16(v148);
              uint32x4_t v190 = vmovl_u16(v145);
              uint32x4_t v191 = vshrq_n_u32(v159, 5uLL);
              unsigned int v192 = v161.u32[3];
              __int32 v389 = v191.i32[1];
              unsigned int v365 = v191.u32[3];
              unsigned int v387 = v191.u32[2];
              __int32 v193 = v190.i32[1];
              __int32 v194 = v190.i32[2];
              __int32 v353 = v190.i32[3];
              __int32 v195 = v189.i32[1];
              __int32 v354 = v189.i32[2];
              int v350 = vaddvq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v172, v143, 5uLL));
              __int32 v196 = v184.i32[0];
              __int32 v351 = v161.i32[0];
              __int32 v363 = v189.i32[3];
              __int32 v197 = v188.i32[1];
              __int32 v352 = v188.i32[3];
              __int32 v383 = v188.i32[2];
              __int32 v347 = v187.i32[1];
              __int32 v367 = v187.i32[3];
              __int32 v381 = v187.i32[2];
              __int32 v379 = v144.i32[1];
              __int32 v356 = v144.i32[3];
              __int32 v373 = v144.i32[2];
              __int32 v349 = v191.i32[0];
              __int32 v348 = v144.i32[0];
              uint64_t v307 = v55;
              uint64_t v308 = v56;
              uint64_t v198 = v56;
              uint64_t v305 = v54;
              uint64_t v306 = v57;
              uint64_t v199 = v57;
              uint64_t v200 = v54;
              int v201 = v178[2];
              do
              {
                __int32 v333 = v196;
                int v334 = v177;
                __int32 v336 = v168;
                unsigned int v339 = v176;
                __int32 v342 = v167;
                uint64_t v204 = v199;
                uint64_t v205 = v55;
                int v206 = (unsigned __int16 *)(v322 + 2 * v138);
                int v207 = *v206 - *(unsigned __int16 *)(v321 + 2 * v138);
                __int32 v208 = v354;
                __int32 v209 = v197;
                uint64_t v210 = v198;
                __int32 v211 = v383;
                __int32 v383 = v352;
                __int32 v212 = v209 + v352;
                __int32 v337 = v353;
                int v213 = v209 + v352 + 4 * v354 + v353 + v193;
                __int32 v354 = v363;
                __int32 v214 = v195 + v363;
                __int32 v338 = v194;
                int v215 = v213 + 2 * (v195 + v363 + v211 + v194);
                __int32 v332 = v379;
                __int32 v379 = v373;
                __int32 v373 = v356;
                __int32 v331 = v164;
                __int32 v346 = v165;
                unsigned int v345 = v166;
                unsigned int v343 = v182;
                __int32 v330 = v395;
                __int32 v395 = v393;
                __int32 v393 = v192;
                __int32 v329 = v389;
                __int32 v389 = v387;
                unsigned int v387 = v365;
                unsigned int v328 = v399;
                unsigned int v399 = v397;
                unsigned int v397 = v391;
                unsigned int v327 = v361;
                unsigned int v216 = v369;
                __int32 v326 = v185;
                __int32 v341 = v186;
                unsigned int v340 = v355;
                __int32 v217 = v381;
                __int32 v218 = v367;
                int v219 = v409;
                int v409 = v371;
                int v325 = v201;
                int v220 = v407;
                __int32 v353 = *(unsigned __int16 *)((char *)v206 + v377);
                __int32 v221 = v353 - *(unsigned __int16 *)(v320 + 2 * v138);
                int v222 = (unsigned __int16 *)((char *)v206 + v377 + v377);
                uint64_t v223 = v210;
                __int32 v363 = *v222;
                __int32 v224 = v363 - *(unsigned __int16 *)(v210 + 2 * v375);
                int v225 = (unsigned __int16 *)((char *)v222 + v377);
                uint64_t v403 = v205;
                __int32 v352 = *v225;
                __int32 v226 = v352 - *(unsigned __int16 *)(v205 + 2 * v375);
                unsigned int v227 = (unsigned __int16 *)((char *)v225 + v377);
                uint64_t v401 = v204;
                __int32 v367 = *v227;
                int v228 = (unsigned __int16 *)((char *)v227 + v377);
                int v229 = *v228;
                int v230 = (unsigned __int16 *)((char *)v228 + v377);
                int v407 = *v230;
                int v231 = *(unsigned __int16 *)((char *)v230 + v377);
                int v232 = *(unsigned __int16 *)(v323 + 2 * v138);
                int v233 = *(unsigned __int16 *)(v324 + 2 * v138);
                LODWORD(v205) = (v207 * v207 + 16) >> 5;
                unsigned int v182 = (v224 * v224 + 16) >> 5;
                unsigned int v335 = (v226 * v226 + 16) >> 5;
                unsigned int v365 = ((v367 - *(unsigned __int16 *)(v204 + 2 * v375))
                      * (v367 - *(unsigned __int16 *)(v204 + 2 * v375))
                      + 16) >> 5;
                unsigned int v344 = (v221 * v221 + 16) >> 5;
                int v234 = v182 + v344 + v365 + v335;
                __int32 v356 = v205;
                int v235 = v205 + v350 + v234;
                int v236 = *(_DWORD *)(v374 + 4 * ((v215 + 8) >> 4));
                int v237 = *(unsigned __int16 *)(v200 + 2 * v375);
                if (v235 < v236) {
                  *(_DWORD *)&v316[4 * v138] += *(unsigned __int16 *)(v223 + v404 - 4) + 0x1000000;
                }
                unsigned int v238 = ((v229 - v237) * (v229 - v237) + 16) >> 5;
                signed int v239 = v238 + v334 + v234;
                __int32 v195 = v208;
                __int32 v381 = v218;
                __int32 v240 = v347 + v218;
                int v371 = v229;
                if (v239 < *(_DWORD *)(v374
                                      + 4
                                      * ((v347 + v218 + 4 * v211 + v214 + 2 * (v212 + v217 + v208) + 8) >> 4)))
                  *(_DWORD *)&v317[4 * v138] += *(unsigned __int16 *)(v403 + v404 - 4) + 0x1000000;
                unsigned int v391 = v238;
                unsigned int v369 = ((v407 - v232) * (v407 - v232) + 16) >> 5;
                unsigned int v241 = v238 + v365 + v335 + v369;
                signed int v242 = v182 + v360 + v241;
                __int32 v197 = v211;
                unsigned int v361 = v181;
                if (v242 < *(_DWORD *)(v374
                                      + 4
                                      * ((v357 + v409 + 4 * v217 + v212 + 2 * (v240 + v219 + v211) + 8) >> 4)))
                  *(_DWORD *)&v318[4 * v138] += *(unsigned __int16 *)(v204 + v404 - 4) + 0x1000000;
                unsigned int v355 = ((v231 - v233) * (v231 - v233) + 16) >> 5;
                signed int v243 = v241 + v358 + v355;
                int v201 = v220;
                unsigned int v181 = v216;
                if (v243 < *(_DWORD *)(v374
                                      + 4
                                      * ((v220
                                                      + v359
                                                      + 4 * v219
                                                      + v240
                                                      + 2 * (v357 + v409 + v325 + v217)
                                                      + 8) >> 4)))
                  *(_DWORD *)&v319[4 * v138] += *(unsigned __int16 *)(v200 + v404 - 4) + 0x1000000;
                int v202 = v342 + v336 + v351 + v349;
                int v350 = v235 - (v348 + v202);
                int v177 = v239 - (v202 + v339);
                int v203 = v351 + v349 + v339 + v385;
                int v360 = v242 - (v336 + v203);
                int v358 = v243 - (v203 + v333);
                ++v138;
                v200 += 2;
                uint64_t v199 = v401 + 2;
                uint64_t v55 = v403 + 2;
                uint64_t v198 = v223 + 2;
                int v359 = v325;
                int v357 = v219;
                __int32 v347 = v217;
                __int32 v196 = v326;
                unsigned int v385 = v327;
                unsigned int v176 = v328;
                __int32 v349 = v329;
                __int32 v351 = v330;
                __int32 v168 = v169;
                __int32 v167 = v331;
                __int32 v348 = v332;
                __int32 v164 = v346;
                __int32 v165 = v345;
                unsigned int v166 = v344;
                __int32 v169 = v170;
                __int32 v170 = v343;
                __int32 v185 = v341;
                __int32 v186 = v340;
                __int32 v193 = v338;
                __int32 v194 = v337;
                unsigned int v192 = v335;
              }
              while (v375 + v138 < v376);
              unint64_t v53 = v315 + 4;
              uint64_t v58 = v303 + v300;
              uint64_t v59 = v304 + v300;
              v319 += v301;
              v318 += v301;
              v317 += v301;
              v324 += v300;
              v323 += v300;
              uint64_t v54 = v305 + v300;
              v316 += v301;
              v322 += v300;
              uint64_t v57 = v306 + v300;
              v321 += v300;
              uint64_t v55 = v307 + v300;
              v320 += v300;
              uint64_t v56 = v308 + v300;
              uint64_t v46 = v377;
              uint64_t v51 = v313;
            }
            while (v315 + 4 < v302);
          }
        }
        if (v53 < v310 && v287 < v376)
        {
          uint64_t v60 = (uint64_t)v280->i64 + 2 * v53 * v279;
          uint64_t v61 = (uint64_t)v280->i64 + 2 * (v53 + v286) * v279;
          uint64_t v368 = (uint64_t)v281 + v284 + v309 * v53;
          uint64_t v366 = v296 + v404 + v279 * (2 * (v53 + v286) + 4);
          uint64_t v372 = v297 + v404 + v46 * (v53 + v286);
          uint64_t v370 = v278 + v404 + v46 * v53;
          do
          {
            unint64_t v314 = v53;
            uint64_t v62 = 0;
            uint64_t v364 = v60;
            __int16 v63 = (uint16x4_t *)(v60 + v312 + v311);
            uint64_t v362 = v61;
            unsigned int v64 = (uint16x4_t *)(v61 + v312 + 2 * v51 + v311);
            uint16x4_t v65 = *v63;
            uint16x4_t v66 = *v64;
            int v67 = (uint16x4_t *)((char *)v63 + v46);
            unsigned int v68 = (uint16x4_t *)((char *)v64 + v46);
            uint16x4_t v69 = *v67;
            uint16x4_t v70 = *v68;
            unsigned int v71 = (__int16 *)((char *)v67 + v46);
            unsigned int v72 = (__int16 *)((char *)v68 + v46);
            unsigned int v73 = (__int16 *)((char *)v67 + v46 + 2);
            BOOL v74 = (__int16 *)((char *)v68 + v46 + 2);
            __int16 v75 = (__int16 *)((char *)v67 + v46 + 4);
            int v76 = (__int16 *)((char *)v68 + v46 + 4);
            unint64_t v77 = (__int16 *)((char *)v67 + v46 + 6);
            uint64_t v78 = (__int16 *)((char *)v68 + v46 + 6);
            __int16 v79 = (uint16x4_t *)((char *)v67 + v46 + v46);
            int v80 = (uint16x4_t *)((char *)v68 + v46 + v46);
            v81.i16[0] = *v71;
            v81.i16[1] = *v73;
            v81.i16[2] = *v75;
            v81.i16[3] = *v77;
            uint32x4_t v82 = vmovl_u16(*v79);
            uint32x4_t v83 = vmovl_u16(v81);
            v84.i16[0] = *v72;
            v84.i16[1] = *v74;
            uint32x4_t v85 = vmovl_u16(v69);
            v84.i16[2] = *v76;
            v84.i16[3] = *v78;
            int32x4_t v86 = (int32x4_t)vsubl_u16(v81, v84);
            int32x4_t v87 = (int32x4_t)vsubl_u16(*v79, *v80);
            int32x4_t v88 = (int32x4_t)vsubl_u16(v65, v66);
            int32x4_t v89 = (int32x4_t)vsubl_u16(v69, v70);
            v90.i64[0] = 0x1000000010;
            v90.i64[1] = 0x1000000010;
            uint32x4_t v91 = (uint32x4_t)vmlaq_s32(v90, v86, v86);
            v92.i64[0] = 0x1000000010;
            v92.i64[1] = 0x1000000010;
            uint32x4_t v93 = (uint32x4_t)vmlaq_s32(v92, v87, v87);
            v87.i64[0] = 0x1000000010;
            v87.i64[1] = 0x1000000010;
            uint32x4_t v94 = (uint32x4_t)vmlaq_s32(v87, v88, v88);
            v86.i64[0] = 0x1000000010;
            v86.i64[1] = 0x1000000010;
            uint32x4_t v95 = (uint32x4_t)vmlaq_s32(v86, v89, v89);
            uint32x4_t v96 = vshrq_n_u32(v93, 5uLL);
            uint32x4_t v97 = vshrq_n_u32(v91, 5uLL);
            uint32x4_t v98 = vshrq_n_u32(v95, 5uLL);
            uint32x4_t v99 = vshrq_n_u32(v94, 5uLL);
            int32x4_t v100 = (int32x4_t)vsubl_u16(*(uint16x4_t *)((char *)v79 + v46), *(uint16x4_t *)((char *)v80 + v46));
            v101.i64[0] = 0x1000000010;
            v101.i64[1] = 0x1000000010;
            uint32x4_t v102 = (uint32x4_t)vmlaq_s32(v101, v100, v100);
            uint32x4_t v103 = vshrq_n_u32(v102, 5uLL);
            __int32 v104 = v99.i32[0];
            __int32 v105 = v99.i32[1];
            __int32 v106 = v99.i32[2];
            unsigned int v402 = v99.u32[3];
            __int32 v408 = v98.i32[1];
            unsigned int v406 = v98.u32[2];
            __int32 v107 = v98.i32[0];
            unsigned int v396 = v98.u32[3];
            __int32 v405 = v97.i32[1];
            unsigned int v392 = v97.u32[3];
            unsigned int v400 = v97.u32[2];
            __int32 v398 = v96.i32[1];
            unsigned int v390 = v96.u32[3];
            unsigned int v394 = v96.u32[2];
            __int32 v108 = v85.i32[1];
            __int32 v109 = v85.i32[2];
            int v110 = vaddvq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(v99, v91, 5uLL), (int32x4_t)vsraq_n_u32(v98, v93, 5uLL)), v102, 5uLL));
            __int32 v111 = v97.i32[0];
            __int32 v386 = v85.i32[3];
            __int32 v112 = v83.i32[1];
            __int32 v113 = v83.i32[2];
            __int32 v114 = v83.i32[3];
            __int32 v388 = v82.i32[1];
            __int32 v384 = v82.i32[2];
            __int32 v115 = v82.i32[3];
            __int32 v382 = v103.i32[1];
            __int32 v116 = v96.i32[0];
            unsigned int v380 = v103.u32[2];
            unsigned int v117 = v103.u32[3];
            __int32 v118 = v103.i32[0];
            do
            {
              __int32 v378 = v104;
              unint64_t v119 = (unsigned __int16 *)(v372 + 2 * v62);
              int v120 = (unsigned __int16 *)(v370 + 2 * v62);
              int v121 = *v120 - *v119;
              size_t v122 = (unsigned __int16 *)((char *)v120 + v46);
              unsigned int v123 = (unsigned __int16 *)((char *)v119 + v46);
              int v124 = (unsigned __int16 *)((char *)v120 + v46 + v46);
              int v125 = (unsigned __int16 *)((char *)v119 + v46 + v46);
              int v126 = (unsigned __int16 *)((char *)v124 + v46);
              unsigned int v127 = (unsigned __int16 *)((char *)v125 + v46);
              int v128 = *(unsigned __int16 *)((char *)v124 + v46 + v46) - *(unsigned __int16 *)((char *)v125 + v46 + v46);
              LODWORD(v120) = v108;
              __int32 v108 = v109;
              LODWORD(v119) = v112 + v109;
              __int32 v112 = v113;
              __int32 v129 = v114;
              __int32 v130 = v388;
              __int32 v113 = v129;
              __int32 v388 = v384;
              LODWORD(v119) = v129 + v384 + v119;
              __int32 v384 = v115;
              __int32 v109 = v386;
              int v131 = v115 + v130 + 4 * v112 + v386 + v120 + 2 * v119;
              __int32 v104 = v105;
              unsigned int v132 = v402;
              __int32 v133 = v408;
              __int32 v408 = v406;
              unsigned int v406 = v396;
              __int32 v134 = v405;
              __int32 v405 = v400;
              unsigned int v400 = v392;
              __int32 v135 = v398;
              __int32 v398 = v394;
              unsigned int v394 = v390;
              __int32 v136 = v382;
              __int32 v382 = v380;
              unsigned int v380 = v117;
              __int32 v386 = *v122;
              __int32 v114 = *v124;
              __int32 v115 = *v126;
              unsigned int v117 = (v128 * v128 + 16) >> 5;
              unsigned int v402 = (v121 * v121 + 16) >> 5;
              unsigned int v396 = ((v386 - *v123) * (v386 - *v123) + 16) >> 5;
              unsigned int v392 = ((v114 - *v125) * (v114 - *v125) + 16) >> 5;
              unsigned int v390 = ((v115 - *v127) * (v115 - *v127) + 16) >> 5;
              signed int v137 = v402 + v110 + v396 + v392 + v390 + v117;
              if (v137 < *(_DWORD *)(v374 + 4 * ((v131 + 8) >> 4))) {
                *(_DWORD *)(v368 + 4 * v62) += *(unsigned __int16 *)(v366 + 2 * v62) + 0x1000000;
              }
              int v110 = v137 - (v116 + v118 + v111 + v107 + v378);
              ++v62;
              __int32 v118 = v136;
              __int32 v116 = v135;
              __int32 v111 = v134;
              __int32 v107 = v133;
              uint64_t v46 = v377;
              __int32 v105 = v106;
              __int32 v106 = v132;
            }
            while (v375 + v62 < v376);
            unint64_t v53 = v314 + 1;
            uint64_t v60 = v364 + v377;
            uint64_t v61 = v362 + v377;
            v368 += v309;
            v366 += v377;
            v372 += v377;
            v370 += v377;
            uint64_t v51 = v313;
          }
          while (v314 + 1 != v310);
        }
      }
      ++v51;
      --v298;
      --v299;
      v294 += 2;
      v295 += 2;
      v292 += 2;
      v293 += 2;
      v290 += 2;
      v291 += 2;
      v288 += 2;
      v289 += 2;
      v296 += 2;
      v297 += 2;
      LODWORD(v45) = v286;
    }
    while (v51 != 4);
    uint64_t v45 = v286 + 1;
    unint64_t result = (v270 - 1);
    int v47 = v269 - 1;
    size_t v5 = v280;
    uint64_t v9 = v281;
  }
  while (v286 != 3);
  unint64_t v244 = v262;
  if ((v260 & 1) == 0)
  {
    uint64_t v245 = 0;
    uint64_t v246 = a1 + 1800;
    do
    {
      if (v264 >= 2)
      {
        unsigned int v247 = (unsigned int *)v9 + (v264 & 0xFFFFFFFFFFFFFFFELL);
        v248 = &v244[v264 & 0xFFFFFFFFFFFFFFFELL];
        unint64_t v249 = v264 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v250 = (uint32x2_t *)v9;
        uint64_t v251 = v244;
        do
        {
          uint32x2_t v252 = *v250++;
          int32x2_t v253 = (int32x2_t)vshr_n_u32(v252, 0x18uLL);
          v253.i32[0] = *(_DWORD *)(v246 + 4 * v253.u32[0]);
          v253.i32[1] = *(_DWORD *)(v246 + 4 * v253.u32[1]);
          int32x2_t v254 = vshr_n_s32(vmla_s32((int32x2_t)0x200000002000, (int32x2_t)(*(void *)&v252 & 0xFFFFFF00FFFFFFLL), v253), 0xEuLL);
          uint32x2_t v255 = vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v254, v254), 0x10uLL);
          v251[1] = v255.i16[2];
          *uint64_t v251 = v255.i16[0];
          v251 += 2;
          v249 -= 2;
        }
        while (v249);
        unint64_t result = v264 & 0xFFFFFFFFFFFFFFFELL;
        if (v264 == (v264 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_66;
        }
      }
      else
      {
        unint64_t result = 0;
        unsigned int v247 = (unsigned int *)v9;
        v248 = v244;
      }
      unint64_t result = v264 - result;
      do
      {
        unsigned int v256 = *v247++;
        int v257 = (int)((v256 & 0xFFFFFF) * *(_DWORD *)(v246 + (((unint64_t)v256 >> 22) & 0x3FC)) + 0x2000) >> 14;
        *v248++ = (v257 * v257 + 0x8000) >> 16;
        --result;
      }
      while (result);
LABEL_66:
      ++v245;
      v244 += v258;
      uint64_t v9 = (void *)((char *)v9 + v261);
    }
    while (v245 != v263);
  }
  return result;
}

void *sub_1DDB2E9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 1600);
  unint64_t v5 = *(void *)(a2 + 1608);
  uint64_t v6 = *(void *)(a2 + 1632);
  uint64_t v7 = *(void *)(a1 + 2040);
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v8 = *(void *)(a2 + 1624);
  if (v5) {
    BOOL v9 = v4 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(a2 + 1616);
    uint64_t v12 = *(void *)(a2 + 1624);
    do
    {
      uint64_t v13 = 0;
      do
      {
        *(_WORD *)(v12 + 2 * v13) = *(_WORD *)(v7 + 2 * *(unsigned __int16 *)(v11 + 2 * v13));
        ++v13;
      }
      while (v4 != v13);
      ++v10;
      v11 += v6;
      v12 += v6;
    }
    while (v10 != v5);
  }
  v16[0] = *(void *)(a1 + 2056);
  uint64_t v14 = *(void *)(a1 + 2072);
  v16[1] = *(void *)(a1 + 2048);
  v16[2] = v14;
  if (*(unsigned char *)(a1 + 2064)) {
    return sub_1DDB308CC(v8, v4, v5, v6, v8, *(char **)(a2 + 1640), a1 + 2080, *(void (**)(char *))(a1 + 2152), *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 2176), (uint64_t)v16);
  }
  sub_1DDB308CC(v8, v4, v5, v6, *(void *)(a2 + 1648), *(char **)(a2 + 1640), a1 + 2080, *(void (**)(char *))(a1 + 2152), *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 2168), (uint64_t)v16);
  long long v18 = *(_OWORD *)(a2 + 1648);
  *(void *)&long long v17 = v6;
  *((void *)&v17 + 1) = v18;
  return sub_1DDB308CC(*(void *)(a2 + 1624), v4, v5, v6, *(void *)(a2 + 1624), *(char **)(a2 + 1640), a1 + 2116, *(void (**)(char *))(a1 + 2160), *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 2184), (uint64_t)v16);
}

float sub_1DDB2EB20(float32x2_t *a1, float a2)
{
  float v37 = 1.0 / a2;
  double v3 = (float)(1.0 / a2);
  double v39 = v3 * 0.39894228;
  float v4 = v3 * 0.39894228 * exp((float)((float)(1.0 / a2) * 0.0) * -0.5 * (float)((float)(1.0 / a2) * 0.0));
  double v5 = v4;
  float v6 = v3 * 0.39894228 * exp((float)(v37 * 0.33333) * -0.5 * (float)(v37 * 0.33333));
  *(float *)&double v5 = (v5 + v6 * 2.0) / 3.0;
  float v7 = v3 * 0.39894228 * exp((float)(v37 * 0.66667) * -0.5 * (float)(v37 * 0.66667));
  float v8 = v3 * 0.39894228 * exp(v3 * -0.5 * v3);
  *(float *)&double v3 = v8 + v7;
  float v9 = v39 * exp((float)(v37 * 1.3333) * -0.5 * (float)(v37 * 1.3333));
  *(float *)&double v3 = (float)(*(float *)&v3 + v9) / 3.0;
  float v10 = v39 * exp((float)(v37 * 3.6667) * -0.5 * (float)(v37 * 3.6667));
  float v11 = v39 * exp((float)(v37 * 4.0) * -0.5 * (float)(v37 * 4.0));
  float v12 = v11 + v10;
  float v13 = v39 * exp((float)(v37 * 4.3333) * -0.5 * (float)(v37 * 4.3333));
  float v14 = (float)(v12 + v13) / 3.0;
  float64x2_t v15 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x402AAAAB3FD55555, v37));
  __asm { FMOV            V1.2D, #-0.5 }
  float64x2_t v35 = _Q1;
  float64x2_t __x = vmulq_f64(vmulq_f64(v15, _Q1), v15);
  long double v33 = exp(__x.f64[1]);
  v21.f64[0] = exp(__x.f64[0]);
  v21.f64[1] = v33;
  float32x2_t v22 = vcvt_f32_f64(vmulq_n_f64(v21, v39));
  float64x2_t v23 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x4040000040000000, v37));
  float64x2_t __xa = vmulq_f64(vmulq_f64(v23, v35), v23);
  long double v34 = exp(__xa.f64[1]);
  v24.f64[0] = exp(__xa.f64[0]);
  v24.f64[1] = v34;
  float32x2_t v25 = vadd_f32(vcvt_f32_f64(vmulq_n_f64(v24, v39)), v22);
  float64x2_t v26 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x4055555540155555, v37));
  float64x2_t v36 = vmulq_f64(vmulq_f64(v26, v35), v26);
  long double v38 = exp(v36.f64[1]);
  v27.f64[0] = exp(v36.f64[0]);
  v27.f64[1] = v38;
  __asm { FMOV            V1.2S, #3.0 }
  *(float32x2_t *)&v27.f64[0] = vdiv_f32(vadd_f32(v25, vcvt_f32_f64(vmulq_n_f64(v27, v39))), _D1);
  float32x2_t v29 = vadd_f32(*(float32x2_t *)&v27.f64[0], *(float32x2_t *)&v27.f64[0]);
  v29.f32[0] = 1.0
             / (float)((float)((float)((float)((float)(*(float *)&v3 + *(float *)&v3) + *(float *)&v5) + v29.f32[0])
                             + v29.f32[1])
                     + (float)(v14 + v14));
  a1->f32[0] = v29.f32[0] * *(float *)&v5;
  a1->f32[1] = v29.f32[0] * *(float *)&v3;
  a1[1] = vmul_n_f32(*(float32x2_t *)&v27.f64[0], v29.f32[0]);
  float result = v29.f32[0] * v14;
  a1[2].f32[0] = v29.f32[0] * v14;
  return result;
}

uint64_t sub_1DDB2EE50(__int16 *a1, unsigned __int16 *a2, int a3, unsigned __int16 *a4)
{
  unsigned int v4 = *a4;
  unsigned int v5 = a4[1];
  unsigned int v6 = a4[2];
  unsigned int v7 = a4[3];
  unsigned int v8 = a4[4];
  int v9 = *a2;
  unsigned int v10 = v8 + v7 + v6 + v5;
  int v11 = a2[1];
  int v12 = a2[2];
  int v13 = a2[3];
  float v14 = (__int16 *)(a2 + 4);
  int v15 = a2[4];
  unsigned int v16 = (v11 * v5 + v12 * v6 + (v10 + v4) * v9 + v13 * v7 + v15 * v8) >> 16;
  int v17 = v12 * v5;
  int v18 = a2[5];
  int v19 = a2[6];
  unsigned int v20 = (v11 * v5 + (v8 + v7 + v6) * v9 + v12 * v4 + v13 * v5 + v15 * v6 + v18 * v7 + v19 * v8) >> 16;
  int v21 = a2[7];
  *a1 = v16;
  a1[1] = (v11 * v4 + v10 * v9 + v17 + v13 * v6 + v15 * v7 + v18 * v8) >> 16;
  a1[2] = v20;
  a1[3] = (v17 + (v8 + v7) * v9 + v13 * v4 + v15 * v5 + v19 * v7 + (v18 + v11) * v6 + v21 * v8) >> 16;
  float32x2_t v22 = a1 + 4;
  unsigned int v23 = a3 - 12;
  if (a3 >= 12)
  {
    int v85 = a3 & 0x7FFFFFFC;
    if (v23 >= 0x1C)
    {
      unsigned int v28 = v23 >> 2;
      uint64_t v29 = 4 * (v23 >> 2);
      signed int v24 = 4;
      if (v22 >= (__int16 *)&a2[v29 + 12] || &a1[v29 + 8] <= (__int16 *)a2)
      {
        uint64_t v66 = v28 + 1;
        uint64_t v67 = 4 * (v66 & 0x7FFFFFF8);
        unsigned long long v30 = &v22[v67];
        uint64_t v31 = (unsigned __int16 *)&v14[v67];
        a1 = (__int16 *)((char *)a1 + v67 * 2);
        signed int v24 = (32 * ((v66 & 0x7FFFFFF8) >> 3)) | 4;
        int32x4_t v68 = vdupq_n_s32(v6);
        int32x4_t v69 = vdupq_n_s32(v7);
        int32x4_t v70 = vdupq_n_s32(v8);
        uint16x8_t v71 = (uint16x8_t)vdupq_n_s16(v5);
        uint16x8_t v72 = (uint16x8_t)vdupq_n_s16(v4);
        uint64_t v73 = v66 & 0x7FFFFFF8;
        BOOL v74 = v14;
        do
        {
          __int16 v75 = v14 - 4;
          int16x8x4_t v87 = vld4q_s16(v75);
          int16x8x4_t v88 = vld4q_s16(v74);
          v74 += 32;
          int v76 = v14 + 4;
          int16x8x4_t v89 = vld4q_s16(v76);
          v86.val[0] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v88.val[0].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v87.val[3].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[1].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v88.val[2].i8, *(uint16x4_t *)v87.val[2].i8), v68), (int32x4_t)vaddl_u16(*(uint16x4_t *)v88.val[3].i8, *(uint16x4_t *)v87.val[1].i8), v69), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[0].i8, *(uint16x4_t *)v87.val[0].i8), v70)), vmlaq_s32(vmlaq_s32(
                             (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v72, (uint16x8_t)v88.val[0]), v71, (uint16x8_t)v87.val[3]), v71, (uint16x8_t)v88.val[1]), (int32x4_t)vaddl_high_u16((uint16x8_t)v88.val[2], (uint16x8_t)v87.val[2]), v68), (int32x4_t)vaddl_high_u16((uint16x8_t)v88.val[3], (uint16x8_t)v87.val[1]), v69), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[0], (uint16x8_t)v87.val[0]), v70));
          v86.val[1] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v88.val[1].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[0].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[2].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v88.val[3].i8, *(uint16x4_t *)v87.val[3].i8), v68), (int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[0].i8, *(uint16x4_t *)v87.val[2].i8), v69), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[1].i8, *(uint16x4_t *)v87.val[1].i8), v70)), vmlaq_s32(vmlaq_s32(
                             (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v72, (uint16x8_t)v88.val[1]), v71, (uint16x8_t)v88.val[0]), v71, (uint16x8_t)v88.val[2]), (int32x4_t)vaddl_high_u16((uint16x8_t)v88.val[3], (uint16x8_t)v87.val[3]), v68), (int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[0], (uint16x8_t)v87.val[2]), v69), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[1], (uint16x8_t)v87.val[1]), v70));
          v86.val[2] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v88.val[2].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[1].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[3].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[0].i8, *(uint16x4_t *)v88.val[0].i8), v68), (int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[1].i8, *(uint16x4_t *)v87.val[3].i8), v69), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[2].i8, *(uint16x4_t *)v87.val[2].i8), v70)), vmlaq_s32(vmlaq_s32(
                             (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v72, (uint16x8_t)v88.val[2]), v71, (uint16x8_t)v88.val[1]), v71, (uint16x8_t)v88.val[3]), (int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[0], (uint16x8_t)v88.val[0]), v68), (int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[1], (uint16x8_t)v87.val[3]), v69), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[2], (uint16x8_t)v87.val[2]), v70));
          v86.val[3] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v88.val[3].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[2].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v89.val[0].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[1].i8, *(uint16x4_t *)v88.val[1].i8), v68), (int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[2].i8, *(uint16x4_t *)v88.val[0].i8), v69), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[3].i8, *(uint16x4_t *)v87.val[3].i8), v70)), vmlaq_s32(vmlaq_s32(
                             (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v72, (uint16x8_t)v88.val[3]), v71, (uint16x8_t)v88.val[2]), v71, (uint16x8_t)v89.val[0]), (int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[1], (uint16x8_t)v88.val[1]), v68), (int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[2], (uint16x8_t)v88.val[0]), v69), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[3], (uint16x8_t)v87.val[3]), v70));
          vst4q_s16(v22, v86);
          v22 += 32;
          float v14 = (__int16 *)v74;
          v73 -= 8;
        }
        while (v73);
        if ((v66 & 0x7FFFFFF8) == v66)
        {
LABEL_11:
          int v25 = v85 - 4;
          float v14 = (__int16 *)v31;
          float32x2_t v22 = v30;
          if (v85 - 4 < a3 - 4) {
            goto LABEL_12;
          }
LABEL_5:
          float64x2_t v26 = v22;
          float64x2_t v27 = (unsigned __int16 *)v14;
          goto LABEL_18;
        }
LABEL_9:
        unint64_t v32 = v31;
        do
        {
          long double v33 = v30;
          int v34 = *(v32 - 3);
          int v35 = *(v32 - 2);
          int v36 = *(v32 - 1);
          int v37 = *v32;
          int v38 = v32[1];
          int v39 = v32[2];
          int v40 = v32[3];
          int v41 = v31[4];
          v31 += 4;
          unsigned int v42 = (v36 * v5 + v37 * v4 + v38 * v5 + (v39 + v35) * v6 + (v40 + v34) * v7 + (v41 + *(v32 - 4)) * v8) >> 16;
          int v43 = v32[5];
          unsigned int v44 = (v37 * v5 + v38 * v4 + v39 * v5 + (v40 + v36) * v6 + (v41 + v35) * v7 + (v43 + v34) * v8) >> 16;
          int v45 = v32[6];
          int v46 = v32[7] + v36;
          *unsigned long long v30 = v42;
          v30 += 4;
          a1[5] = v44;
          a1[6] = (v38 * v5 + v39 * v4 + v40 * v5 + (v41 + v37) * v6 + (v43 + v36) * v7 + (v45 + v35) * v8) >> 16;
          a1[7] = (v39 * v5 + v40 * v4 + v41 * v5 + (v43 + v38) * v6 + (v45 + v37) * v7 + v46 * v8) >> 16;
          v24 += 4;
          unint64_t v32 = v31;
          a1 = v33;
        }
        while (v24 < a3 - 7);
        goto LABEL_11;
      }
    }
    else
    {
      signed int v24 = 4;
    }
    unsigned long long v30 = a1 + 4;
    uint64_t v31 = a2 + 4;
    goto LABEL_9;
  }
  int v25 = 4;
  if (a3 - 4 <= 4) {
    goto LABEL_5;
  }
LABEL_12:
  uint64_t v47 = (a3 - v25 - 5);
  if (v47 < 7 || v22 < &v14[v47 + 5] && v14 - 4 < &v22[v47 + 1])
  {
    float64x2_t v27 = (unsigned __int16 *)v14;
    float64x2_t v26 = v22;
LABEL_16:
    int v48 = a3 - v25 - 4;
    uint64_t v49 = v27;
    do
    {
      int v50 = v27[1];
      ++v27;
      *v26++ = (*v49 * v4
              + (v50 + *(v49 - 1)) * v5
              + (v49[2] + *(v49 - 2)) * v6
              + (v49[3] + *(v49 - 3)) * v7
              + (v49[4] + *(v49 - 4)) * v8) >> 16;
      uint64_t v49 = v27;
      --v48;
    }
    while (v48);
    goto LABEL_18;
  }
  uint64_t v77 = v47 + 1;
  uint64_t v78 = (v47 + 1) & 0x1FFFFFFF8;
  float64x2_t v27 = (unsigned __int16 *)&v14[v78];
  float64x2_t v26 = &v22[v78];
  int32x4_t v79 = vdupq_n_s32(v5);
  int32x4_t v80 = vdupq_n_s32(v6);
  int32x4_t v81 = vdupq_n_s32(v7);
  v25 += v78;
  int32x4_t v82 = vdupq_n_s32(v8);
  uint16x8_t v83 = (uint16x8_t)vdupq_n_s16(v4);
  uint64_t v84 = v78;
  do
  {
    *(int16x8_t *)float32x2_t v22 = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)(v14 + 1), *(uint16x4_t *)(v14 - 1)), v79), *(uint16x4_t *)v83.i8, *(uint16x4_t *)v14), (int32x4_t)vaddl_u16(*(uint16x4_t *)(v14 + 2), *(uint16x4_t *)(v14 - 2)), v80), (int32x4_t)vaddl_u16(*(uint16x4_t *)(v14 + 3), *(uint16x4_t *)(v14 - 3)), v81), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)(v14 + 4), *(uint16x4_t *)(v14 - 4)), v82)), vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_high_u16(
                                           (uint32x4_t)vmulq_s32((int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v14 + 1), *(uint16x8_t *)(v14 - 1)), v79), v83, *(uint16x8_t *)v14), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v14 + 2), *(uint16x8_t *)(v14 - 2)), v80), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v14 + 3), *(uint16x8_t *)(v14 - 3)), v81), vmulq_s32((int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v14 + 4), *(uint16x8_t *)(v14 - 4)), v82));
    v22 += 8;
    v14 += 8;
    v84 -= 8;
  }
  while (v84);
  if (v77 != v78) {
    goto LABEL_16;
  }
LABEL_18:
  int v51 = *(v27 - 4);
  int v52 = *(v27 - 3);
  int v53 = *(v27 - 2);
  int v54 = *(v27 - 1);
  int v55 = *v27;
  int v56 = v27[1];
  int v57 = v56 * v5;
  int v58 = v27[2];
  int v59 = v27[3];
  int v60 = (v8 + v7) * v59;
  unsigned int v61 = (v60 + v51 * v8 + v52 * v7 + v54 * v5 + v55 * v4 + v56 * v5 + (v58 + v53) * v6) >> 16;
  int v62 = v58 * v5;
  unsigned int v63 = (v60 + v52 * v8 + v53 * v7 + v54 * v6 + v55 * v5 + v56 * v4 + v58 * v5 + v59 * v6) >> 16;
  int v64 = v59 * v5 + v59 * v6;
  uint64_t result = (v60 + v53 * v8 + v54 * v7 + v55 * v6 + v57 + v58 * v4 + v64) >> 16;
  *float64x2_t v26 = v61;
  v26[1] = v63;
  v26[2] = result;
  v26[3] = (v60 + v54 * v8 + v55 * v7 + v56 * v6 + v62 + v59 * v4 + v64) >> 16;
  return result;
}

uint64_t sub_1DDB2F4E0(__int16 *a1, uint16x4_t *a2, int a3, unsigned __int16 *a4, uint64_t a5)
{
  unsigned int v5 = *(_DWORD *)a5;
  unsigned int v6 = *(_DWORD *)(a5 + 4);
  uint64_t v7 = *(void *)(a5 + 8);
  unsigned int v8 = *(uint16x4_t **)(a5 + 40);
  int v9 = *(unsigned __int16 **)(a5 + 48);
  *(void *)(a5 + 40) = (char *)v8 + *(void *)(a5 + 24);
  signed int v10 = a3 & 0xFFFFFFFC;
  signed int v11 = 0;
  if ((int)(a3 & 0xFFFFFFFC) < 1)
  {
    int v17 = (int16x4_t *)v9;
    int v27 = a3;
    if (a3 <= 0) {
      goto LABEL_12;
    }
  }
  else
  {
    int32x4_t v12 = vdupq_n_s32(v5);
    unsigned int v13 = ((a3 & 0xFFFFFFFC) - 1) & 0xFFFFFFFC;
    v14.i64[0] = 0xFFFFLL;
    v14.i64[1] = 0xFFFFLL;
    uint32x4_t v15 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v6));
    v16.i64[0] = 0xFFFF0000FFFFLL;
    v16.i64[1] = 0xFFFF0000FFFFLL;
    int v17 = (int16x4_t *)v9;
    do
    {
      uint16x4_t v18 = *v8++;
      uint16x4_t v19 = v18;
      uint64_t v20 = v18.u16[0];
      uint32x4_t v21 = vmovl_u16(v18);
      unsigned __int16 v22 = v18.u16[1];
      v23.i64[0] = v21.u32[2];
      v23.i64[1] = v21.u32[3];
      int8x16_t v24 = vandq_s8(v23, v14);
      uint16x4_t v25 = *a2++;
      float64x2_t v26 = (__int16 *)(v7 + 2 * v24.i64[0]);
      v24.i16[0] = *(_WORD *)(v7 + 2 * v20);
      v24.i16[1] = *(_WORD *)(v7 + 2 * v22);
      v24.i16[2] = *v26;
      v24.i16[3] = *(_WORD *)(v7 + 2 * v24.i64[1]);
      *v17++ = vmovn_s32(vminq_s32(vmaxq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmulq_s32(vmaxq_s32((int32x4_t)vsubl_u16(vabd_u16(v25, v19), *(uint16x4_t *)v24.i8), (int32x4_t)0), v12), v15), (int32x4_t)0), v16));
      v11 += 4;
    }
    while (v11 < v10);
    int v27 = a3 - (v13 + 4);
    if (a3 <= (int)(v13 + 4)) {
      goto LABEL_12;
    }
  }
  do
  {
    unsigned int v29 = v8->u16[0];
    unsigned int v8 = (uint16x4_t *)((char *)v8 + 2);
    uint64_t v28 = v29;
    int v30 = a2->u16[0];
    a2 = (uint16x4_t *)((char *)a2 + 2);
    int v31 = *(unsigned __int16 *)(v7 + 2 * v28);
    int v32 = v30 - v28;
    if (v32 < 0) {
      int v32 = -v32;
    }
    signed int v33 = (((v32 - v31) & ~((v32 - v31) >> 31)) * v5) >> v6;
    if (v33 >= 0xFFFF) {
      LOWORD(v33) = -1;
    }
    v17->i16[0] = v33;
    int v17 = (int16x4_t *)((char *)v17 + 2);
    --v27;
  }
  while (v27);
LABEL_12:
  unsigned int v34 = *a4;
  unsigned int v35 = a4[1];
  unsigned int v36 = a4[2];
  unsigned int v37 = a4[3];
  unsigned int v38 = a4[4];
  int v39 = *v9;
  unsigned int v40 = v38 + v37;
  unsigned int v41 = v38 + v37 + v36 + v35;
  int v42 = v9[1];
  int v43 = v9[2];
  int v44 = v9[3];
  int v45 = (__int16 *)(v9 + 4);
  int v46 = v9[4];
  unsigned int v47 = (v42 * v35 + v43 * v36 + (v41 + v34) * v39 + v44 * v37 + v46 * v38) >> 16;
  int v48 = v43 * v35;
  int v49 = v9[5];
  int v50 = v9[6];
  unsigned int v51 = (v42 * v35 + (v38 + v37 + v36) * v39 + v43 * v34 + v44 * v35 + v46 * v36 + v49 * v37 + v50 * v38) >> 16;
  int v52 = v9[7];
  *a1 = v47;
  a1[1] = (v42 * v34 + v41 * v39 + v48 + v44 * v36 + v46 * v37 + v49 * v38) >> 16;
  a1[2] = v51;
  a1[3] = (v48 + (v38 + v37) * v39 + v44 * v34 + v46 * v35 + v50 * v37 + (v49 + v42) * v36 + v52 * v38) >> 16;
  int v53 = a1 + 4;
  unsigned int v54 = a3 - 12;
  if (a3 >= 12)
  {
    if (v54 >= 0x1C)
    {
      unsigned int v59 = v54 >> 2;
      uint64_t v60 = 4 * (v54 >> 2);
      signed int v55 = 4;
      if (v53 >= (__int16 *)&v9[v60 + 12] || v9 >= (unsigned __int16 *)&a1[v60 + 8])
      {
        uint64_t v95 = v59 + 1;
        uint64_t v96 = 4 * (v95 & 0x7FFFFFF8);
        unsigned int v61 = &v53[v96];
        int v62 = (unsigned __int16 *)&v45[v96];
        a1 = (__int16 *)((char *)a1 + v96 * 2);
        signed int v55 = (32 * ((v95 & 0x7FFFFFF8) >> 3)) | 4;
        int32x4_t v97 = vdupq_n_s32(v36);
        int32x4_t v98 = vdupq_n_s32(v37);
        int32x4_t v99 = vdupq_n_s32(v38);
        uint16x8_t v100 = (uint16x8_t)vdupq_n_s16(v35);
        uint16x8_t v101 = (uint16x8_t)vdupq_n_s16(v34);
        uint64_t v102 = v95 & 0x7FFFFFF8;
        uint32x4_t v103 = v45;
        do
        {
          __int32 v104 = v45 - 4;
          int16x8x4_t v115 = vld4q_s16(v104);
          int16x8x4_t v116 = vld4q_s16(v103);
          v103 += 32;
          __int32 v105 = v45 + 4;
          int16x8x4_t v117 = vld4q_s16(v105);
          v114.val[0] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v101.i8, *(uint16x4_t *)v116.val[0].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v115.val[3].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[1].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v116.val[2].i8, *(uint16x4_t *)v115.val[2].i8), v97), (int32x4_t)vaddl_u16(*(uint16x4_t *)v116.val[3].i8, *(uint16x4_t *)v115.val[1].i8), v98), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[0].i8, *(uint16x4_t *)v115.val[0].i8), v99)), vmlaq_s32(vmlaq_s32(
                              (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v101, (uint16x8_t)v116.val[0]), v100, (uint16x8_t)v115.val[3]), v100, (uint16x8_t)v116.val[1]), (int32x4_t)vaddl_high_u16((uint16x8_t)v116.val[2], (uint16x8_t)v115.val[2]), v97), (int32x4_t)vaddl_high_u16((uint16x8_t)v116.val[3], (uint16x8_t)v115.val[1]), v98), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[0], (uint16x8_t)v115.val[0]), v99));
          v114.val[1] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v101.i8, *(uint16x4_t *)v116.val[1].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[0].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[2].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v116.val[3].i8, *(uint16x4_t *)v115.val[3].i8), v97), (int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[0].i8, *(uint16x4_t *)v115.val[2].i8), v98), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[1].i8, *(uint16x4_t *)v115.val[1].i8), v99)), vmlaq_s32(vmlaq_s32(
                              (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v101, (uint16x8_t)v116.val[1]), v100, (uint16x8_t)v116.val[0]), v100, (uint16x8_t)v116.val[2]), (int32x4_t)vaddl_high_u16((uint16x8_t)v116.val[3], (uint16x8_t)v115.val[3]), v97), (int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[0], (uint16x8_t)v115.val[2]), v98), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[1], (uint16x8_t)v115.val[1]), v99));
          v114.val[2] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v101.i8, *(uint16x4_t *)v116.val[2].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[1].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[3].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[0].i8, *(uint16x4_t *)v116.val[0].i8), v97), (int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[1].i8, *(uint16x4_t *)v115.val[3].i8), v98), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[2].i8, *(uint16x4_t *)v115.val[2].i8), v99)), vmlaq_s32(vmlaq_s32(
                              (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v101, (uint16x8_t)v116.val[2]), v100, (uint16x8_t)v116.val[1]), v100, (uint16x8_t)v116.val[3]), (int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[0], (uint16x8_t)v116.val[0]), v97), (int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[1], (uint16x8_t)v115.val[3]), v98), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[2], (uint16x8_t)v115.val[2]), v99));
          v114.val[3] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v101.i8, *(uint16x4_t *)v116.val[3].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[2].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v117.val[0].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[1].i8, *(uint16x4_t *)v116.val[1].i8), v97), (int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[2].i8, *(uint16x4_t *)v116.val[0].i8), v98), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[3].i8, *(uint16x4_t *)v115.val[3].i8), v99)), vmlaq_s32(vmlaq_s32(
                              (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v101, (uint16x8_t)v116.val[3]), v100, (uint16x8_t)v116.val[2]), v100, (uint16x8_t)v117.val[0]), (int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[1], (uint16x8_t)v116.val[1]), v97), (int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[2], (uint16x8_t)v116.val[0]), v98), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[3], (uint16x8_t)v115.val[3]), v99));
          vst4q_s16(v53, v114);
          v53 += 32;
          int v45 = (__int16 *)v103;
          v102 -= 8;
        }
        while (v102);
        if ((v95 & 0x7FFFFFF8) == v95)
        {
LABEL_22:
          int v56 = v10 - 4;
          int v45 = (__int16 *)v62;
          int v53 = v61;
          if (v10 - 4 < a3 - 4) {
            goto LABEL_23;
          }
LABEL_16:
          int v57 = v53;
          int v58 = (unsigned __int16 *)v45;
          goto LABEL_29;
        }
LABEL_20:
        unsigned int v63 = v62;
        do
        {
          int v64 = v61;
          int v65 = *(v63 - 3);
          int v66 = *(v63 - 2);
          int v67 = *(v63 - 1);
          int v68 = *v63;
          int v69 = v63[1];
          int v70 = v63[2];
          int v71 = v63[3];
          int v72 = v62[4];
          v62 += 4;
          unsigned int v73 = (v67 * v35 + v68 * v34 + v69 * v35 + (v70 + v66) * v36 + (v71 + v65) * v37 + (v72 + *(v63 - 4)) * v38) >> 16;
          int v74 = v63[5];
          unsigned int v75 = (v68 * v35 + v69 * v34 + v70 * v35 + (v71 + v67) * v36 + (v72 + v66) * v37 + (v74 + v65) * v38) >> 16;
          int v76 = v63[6];
          int v77 = v63[7] + v67;
          *unsigned int v61 = v73;
          v61 += 4;
          a1[5] = v75;
          a1[6] = (v69 * v35 + v70 * v34 + v71 * v35 + (v72 + v68) * v36 + (v74 + v67) * v37 + (v76 + v66) * v38) >> 16;
          a1[7] = (v70 * v35 + v71 * v34 + v72 * v35 + (v74 + v69) * v36 + (v76 + v68) * v37 + v77 * v38) >> 16;
          v55 += 4;
          unsigned int v63 = v62;
          a1 = v64;
        }
        while (v55 < a3 - 7);
        goto LABEL_22;
      }
    }
    else
    {
      signed int v55 = 4;
    }
    unsigned int v61 = a1 + 4;
    int v62 = (unsigned __int16 *)v45;
    goto LABEL_20;
  }
  int v56 = 4;
  if (a3 - 4 <= 4) {
    goto LABEL_16;
  }
LABEL_23:
  uint64_t v78 = (a3 - v56 - 5);
  if (v78 < 7 || v53 < &v45[v78 + 5] && v45 - 4 < &v53[v78 + 1])
  {
    int v58 = (unsigned __int16 *)v45;
    int v57 = v53;
LABEL_27:
    int v79 = a3 - v56 - 4;
    int32x4_t v80 = v58;
    do
    {
      int v81 = v58[1];
      ++v58;
      *v57++ = (*v80 * v34
              + (v81 + *(v80 - 1)) * v35
              + (v80[2] + *(v80 - 2)) * v36
              + (v80[3] + *(v80 - 3)) * v37
              + (v80[4] + *(v80 - 4)) * v38) >> 16;
      int32x4_t v80 = v58;
      --v79;
    }
    while (v79);
    goto LABEL_29;
  }
  uint64_t v106 = v78 + 1;
  uint64_t v107 = (v78 + 1) & 0x1FFFFFFF8;
  int v58 = (unsigned __int16 *)&v45[v107];
  int v57 = &v53[v107];
  int32x4_t v108 = vdupq_n_s32(v35);
  int32x4_t v109 = vdupq_n_s32(v36);
  int32x4_t v110 = vdupq_n_s32(v37);
  v56 += v107;
  int32x4_t v111 = vdupq_n_s32(v38);
  uint16x8_t v112 = (uint16x8_t)vdupq_n_s16(v34);
  uint64_t v113 = v107;
  do
  {
    *(int16x8_t *)int v53 = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)(v45 + 1), *(uint16x4_t *)(v45 - 1)), v108), *(uint16x4_t *)v112.i8, *(uint16x4_t *)v45), (int32x4_t)vaddl_u16(*(uint16x4_t *)(v45 + 2), *(uint16x4_t *)(v45 - 2)), v109), (int32x4_t)vaddl_u16(*(uint16x4_t *)(v45 + 3), *(uint16x4_t *)(v45 - 3)), v110), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)(v45 + 4), *(uint16x4_t *)(v45 - 4)), v111)), vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_high_u16(
                                           (uint32x4_t)vmulq_s32((int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v45 + 1), *(uint16x8_t *)(v45 - 1)), v108), v112, *(uint16x8_t *)v45), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v45 + 2), *(uint16x8_t *)(v45 - 2)), v109), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v45 + 3), *(uint16x8_t *)(v45 - 3)), v110), vmulq_s32((int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v45 + 4), *(uint16x8_t *)(v45 - 4)), v111));
    v53 += 8;
    v45 += 8;
    v113 -= 8;
  }
  while (v113);
  if (v106 != v107) {
    goto LABEL_27;
  }
LABEL_29:
  int v82 = *(v58 - 4);
  int v83 = *(v58 - 3);
  int v84 = *(v58 - 2);
  uint64_t result = *(v58 - 1);
  int v86 = *v58;
  int v87 = v58[1];
  int v88 = v87 * v35;
  int v89 = v58[2];
  int v90 = v58[3];
  unsigned int v91 = (v40 * v90 + v82 * v38 + v83 * v37 + result * v35 + v86 * v34 + v87 * v35 + (v89 + v84) * v36) >> 16;
  int v92 = v89 * v35;
  unsigned int v93 = (v40 * v90 + v83 * v38 + v84 * v37 + result * v36 + v86 * v35 + v87 * v34 + v89 * v35 + v90 * v36) >> 16;
  int v94 = v90 * v35 + v90 * v36;
  *int v57 = v91;
  v57[1] = v93;
  v57[2] = (v40 * v90 + v84 * v38 + result * v37 + v86 * v36 + v88 + v89 * v34 + v94) >> 16;
  v57[3] = (v40 * v90 + result * v38 + v86 * v37 + v87 * v36 + v92 + v90 * v34 + v94) >> 16;
  return result;
}

uint16x8_t *sub_1DDB2FC80(uint16x8_t *result, unsigned int a2, int a3, int16x8_t *a4, unsigned __int16 *a5)
{
  unsigned int v5 = *a5;
  unsigned int v6 = a5[8];
  unint64_t v7 = a2 & 0xFFFFFFF8;
  if ((int)v7 < 1)
  {
    LODWORD(v8) = 0;
    if ((int)a2 <= 0) {
      return result;
    }
LABEL_7:
    uint64_t v37 = a3;
    uint64_t v38 = v8;
    uint64_t v39 = a2;
    unint64_t v40 = a2 - (unint64_t)v8;
    if (v40 < 0x10)
    {
LABEL_8:
      uint64_t v41 = v38;
      int v42 = a4;
      goto LABEL_9;
    }
    unint64_t v136 = v40;
    uint64_t v52 = 2 * a2;
    unint64_t v53 = (unint64_t)a4->u64 + v52 - 2 * v38;
    unint64_t v138 = (unint64_t)result + 5 * a3 + 2 * v38;
    uint64_t v139 = a2;
    unint64_t v137 = (unint64_t)result + 5 * a3 + v52;
    unsigned int v54 = &result->i8[4 * a3];
    unint64_t v55 = (unint64_t)result + 2 * v37 + 2 * a2;
    unint64_t v56 = (unint64_t)result->u64 + v37 + v52;
    unint64_t v57 = (unint64_t)result + 2 * v38;
    unint64_t v58 = (unint64_t)result->u64 + v52;
    unint64_t v59 = (unint64_t)result + 6 * v37 + v52;
    unint64_t v60 = (unint64_t)result + 7 * v37 + v52;
    unsigned int v61 = &result->i8[8 * v37];
    unint64_t v62 = (unint64_t)&v61[2 * v38];
    unint64_t v63 = (unint64_t)&v61[v52];
    BOOL v65 = a4 < (int16x8_t *)&v54[2 * a2] && (unint64_t)&v54[2 * v38] < v53;
    BOOL v67 = a4 < (int16x8_t *)((char *)result + 3 * v37 + 2 * a2) && (unint64_t)result + 3 * v37 + 2 * v38 < v53;
    BOOL v69 = (unint64_t)a4 < v55 && (unint64_t)result + 2 * v37 + 2 * v38 < v53;
    BOOL v71 = (unint64_t)a4 < v56 && (unint64_t)result + 2 * v38 + v37 < v53;
    BOOL v73 = (unint64_t)a4 < v58 && v57 < v53;
    BOOL v75 = a4 < (int16x8_t *)a5 + 1 && (unint64_t)(a5 + 1) < v53;
    BOOL v77 = (unint64_t)a4 < v59 && v57 + 6 * v37 < v53;
    BOOL v79 = (unint64_t)a4 < v60 && (unint64_t)result + 7 * v37 + 2 * v38 < v53;
    BOOL v81 = (unint64_t)a4 < v63 && v62 < v53;
    if (v138 >= v53 || (unint64_t)a4 >= v137)
    {
      uint64_t v39 = v139;
      if (v65 || v67 || v69 || v71 || v73 || v75 || v77 || v79 || v81) {
        goto LABEL_8;
      }
      uint64_t v41 = (v136 & 0xFFFFFFFFFFFFFFF8) + v38;
      int v42 = (int16x8_t *)((char *)a4 + 2 * (v136 & 0xFFFFFFFFFFFFFFF8));
      int v83 = (const __int16 *)(a5 + 1);
      uint16x4_t v84 = (uint16x4_t)vld1_dup_s16(v83);
      int v85 = (const __int16 *)(a5 + 2);
      uint16x4_t v86 = (uint16x4_t)vld1_dup_s16(v85);
      int16x8_t v87 = (int16x8_t)vmovl_u16(v84);
      int16x8_t v88 = (int16x8_t)vmovl_u16(v86);
      int v89 = (const __int16 *)(a5 + 3);
      uint16x4_t v90 = (uint16x4_t)vld1_dup_s16(v89);
      int16x8_t v91 = (int16x8_t)vmovl_u16(v90);
      int v92 = (const __int16 *)(a5 + 4);
      uint16x4_t v93 = (uint16x4_t)vld1_dup_s16(v92);
      int v94 = (const __int16 *)(a5 + 5);
      uint16x4_t v95 = (uint16x4_t)vld1_dup_s16(v94);
      int16x8_t v96 = (int16x8_t)vmovl_u16(v93);
      int16x8_t v97 = (int16x8_t)vmovl_u16(v95);
      int32x4_t v98 = (const __int16 *)(a5 + 6);
      uint16x4_t v99 = (uint16x4_t)vld1_dup_s16(v98);
      int16x8_t v100 = (int16x8_t)vmovl_u16(v99);
      uint16x8_t v101 = (const __int16 *)(a5 + 7);
      uint16x4_t v102 = (uint16x4_t)vld1_dup_s16(v101);
      int16x8_t v103 = (int16x8_t)vmovl_u16(v102);
      int16x8_t v104 = vdupq_n_s16(v5);
      __int32 v105 = (uint16x4_t *)((char *)result + 2 * v38);
      uint16x8_t v106 = (uint16x8_t)vuzp1q_s16(v104, v87);
      uint16x4_t v107 = (uint16x4_t)vmovn_s32((int32x4_t)v87);
      uint16x8_t v108 = (uint16x8_t)vuzp1q_s16(v104, v88);
      uint16x4_t v109 = (uint16x4_t)vmovn_s32((int32x4_t)v88);
      uint16x8_t v110 = (uint16x8_t)vuzp1q_s16(v104, v91);
      uint16x4_t v111 = (uint16x4_t)vmovn_s32((int32x4_t)v91);
      uint16x8_t v112 = (uint16x8_t)vuzp1q_s16(v104, v96);
      uint16x4_t v113 = (uint16x4_t)vmovn_s32((int32x4_t)v96);
      uint16x8_t v114 = (uint16x8_t)vuzp1q_s16(v104, v97);
      uint16x4_t v115 = (uint16x4_t)vmovn_s32((int32x4_t)v97);
      uint16x8_t v116 = (uint16x8_t)vuzp1q_s16(v104, v100);
      uint16x4_t v117 = (uint16x4_t)vmovn_s32((int32x4_t)v100);
      uint16x8_t v118 = (uint16x8_t)vuzp1q_s16(v104, v103);
      uint16x4_t v119 = (uint16x4_t)vmovn_s32((int32x4_t)v103);
      uint16x8_t v120 = (uint16x8_t)vdupq_n_s16(v6);
      unint64_t v121 = v136 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        uint16x8_t v122 = *(uint16x8_t *)&v105->i8[v37];
        unsigned int v123 = (uint16x4_t *)((char *)v105 + v37 + v37);
        uint32x4_t v124 = vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v122.i8, v107), *(uint16x4_t *)v104.i8, *v105), *v123, v109);
        uint32x4_t v125 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v122, v106), (uint16x8_t)v104, *(uint16x8_t *)v105->i8), *(uint16x8_t *)v123->i8, v108);
        int v126 = (uint16x4_t *)((char *)v123 + v37);
        uint16x8_t v127 = *(uint16x8_t *)v126->i8;
        uint32x4_t v128 = vmlal_u16(v124, *v126, v111);
        __int32 v129 = (uint16x4_t *)((char *)v126 + v37);
        uint32x4_t v130 = vmlal_u16(v128, *v129, v113);
        uint32x4_t v131 = vmlal_high_u16(vmlal_high_u16(v125, v127, v110), *(uint16x8_t *)v129->i8, v112);
        unsigned int v132 = (uint16x8_t *)((char *)v129 + v37);
        uint32x4_t v133 = vmlal_high_u16(v131, *v132, v114);
        uint32x4_t v134 = vmlal_u16(v130, *(uint16x4_t *)v132->i8, v115);
        __int32 v135 = (uint16x4_t *)&v132->i8[v37];
        *a4++ = vaddhn_high_s32(vaddhn_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v120.i8, *(uint16x4_t *)((char *)v135 + v37 + v37)), (int32x4_t)vmlal_u16(vmlal_u16(v134, *v135, v117), *(uint16x4_t *)((char *)v135 + v37), v119)), (int32x4_t)vmull_high_u16(v120, *(uint16x8_t *)&v135->i8[v37 + v37]), (int32x4_t)vmlal_high_u16(vmlal_high_u16(v133, *(uint16x8_t *)v135->i8, v116), *(uint16x8_t *)&v135->i8[v37], v118));
        v105 += 2;
        v121 -= 8;
      }
      while (v121);
      if (v136 == (v136 & 0xFFFFFFFFFFFFFFF8)) {
        return result;
      }
    }
    else
    {
      uint64_t v41 = v38;
      int v42 = a4;
      uint64_t v39 = v139;
    }
LABEL_9:
    int v43 = (unsigned __int16 *)result + v41;
    uint64_t v44 = v39 - v41;
    do
    {
      int v45 = (unsigned __int16 *)((char *)v43 + v37 + v37);
      int v46 = *v43 * v5 + *(unsigned __int16 *)((char *)v43 + v37) * a5[1] + *v45 * a5[2];
      unsigned int v47 = (unsigned __int16 *)((char *)v45 + v37);
      int v48 = v46 + *v47 * a5[3];
      int v49 = (unsigned __int16 *)((char *)v47 + v37);
      int v50 = *v49;
      uint64_t result = (uint16x8_t *)a5[5];
      unsigned int v51 = (unsigned __int16 *)((char *)v49 + v37);
      v42->i16[0] = (v48
                   + v50 * a5[4]
                   + *v51 * result
                   + *(unsigned __int16 *)((char *)v51 + v37) * a5[6]
                   + *(unsigned __int16 *)((char *)v51 + v37 + v37) * a5[7]
                   + *(unsigned __int16 *)((char *)v51 + v37 + v37 + v37) * v6) >> 16;
      int v42 = (int16x8_t *)((char *)v42 + 2);
      ++v43;
      --v44;
    }
    while (v44);
    return result;
  }
  unint64_t v8 = 0;
  uint16x8_t v9 = (uint16x8_t)vdupq_n_s16(v5);
  uint16x8_t v10 = (uint16x8_t)vdupq_n_s16(v6);
  signed int v11 = result;
  do
  {
    uint16x8_t v12 = *(uint16x8_t *)((char *)v11 + a3);
    uint16x8_t v13 = (uint16x8_t)vdupq_n_s16(a5[1]);
    uint32x4_t v14 = vmull_u16(*(uint16x4_t *)v13.i8, *(uint16x4_t *)v12.i8);
    uint32x4_t v15 = vmlal_high_u16(vmull_high_u16(v13, v12), v9, *v11);
    int32x4_t v16 = (uint16x4_t *)&v11->i8[a3 + a3];
    uint16x8_t v17 = (uint16x8_t)vdupq_n_s16(a5[2]);
    uint32x4_t v18 = vmlal_u16(vmlal_u16(v14, *(uint16x4_t *)v9.i8, *(uint16x4_t *)v11->i8), *(uint16x4_t *)v17.i8, *v16);
    uint32x4_t v19 = vmlal_high_u16(v15, v17, *(uint16x8_t *)v16->i8);
    uint64_t v20 = (uint16x8_t *)((char *)v16 + a3);
    uint16x8_t v21 = (uint16x8_t)vdupq_n_s16(a5[3]);
    uint32x4_t v22 = vmlal_high_u16(v19, v21, *v20);
    uint32x4_t v23 = vmlal_u16(v18, *(uint16x4_t *)v21.i8, *(uint16x4_t *)v20->i8);
    int8x16_t v24 = (uint16x4_t *)&v20->i8[a3];
    uint16x8_t v25 = (uint16x8_t)vdupq_n_s16(a5[4]);
    uint32x4_t v26 = vmlal_u16(v23, *(uint16x4_t *)v25.i8, *v24);
    uint32x4_t v27 = vmlal_high_u16(v22, v25, *(uint16x8_t *)v24->i8);
    uint64_t v28 = (uint16x8_t *)((char *)v24 + a3);
    uint16x8_t v29 = (uint16x8_t)vdupq_n_s16(a5[5]);
    uint32x4_t v30 = vmlal_high_u16(v27, v29, *v28);
    uint32x4_t v31 = vmlal_u16(v26, *(uint16x4_t *)v29.i8, *(uint16x4_t *)v28->i8);
    int v32 = (uint16x4_t *)&v28->i8[a3];
    uint16x8_t v33 = (uint16x8_t)vdupq_n_s16(a5[6]);
    uint32x4_t v34 = vmlal_u16(v31, *(uint16x4_t *)v33.i8, *v32);
    uint32x4_t v35 = vmlal_high_u16(v30, v33, *(uint16x8_t *)v32->i8);
    uint16x8_t v36 = (uint16x8_t)vdupq_n_s16(a5[7]);
    *a4++ = vaddhn_high_s32(vaddhn_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)((char *)v32 + a3 + a3)), (int32x4_t)vmlal_u16(v34, *(uint16x4_t *)v36.i8, *(uint16x4_t *)((char *)v32 + a3))), (int32x4_t)vmull_high_u16(v10, *(uint16x8_t *)&v32->i8[a3 + a3]), (int32x4_t)vmlal_high_u16(v35, v36, *(uint16x8_t *)&v32->i8[a3]));
    v8 += 8;
    ++v11;
  }
  while (v8 < v7);
  if ((int)v8 < (int)a2) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1DDB3015C(uint64_t result, int a2, int a3, uint16x4_t *a4, unsigned __int16 *a5, uint64_t a6)
{
  unsigned int v6 = *(_DWORD *)a6;
  unsigned int v7 = *(_DWORD *)(a6 + 4);
  uint64_t v8 = *(void *)(a6 + 8);
  uint64_t v9 = *(void *)(a6 + 16);
  unsigned int v10 = *a5;
  unsigned int v11 = a5[8];
  unint64_t v12 = a2 & 0xFFFFFFF8;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    if (a2 <= 0) {
      return result;
    }
  }
  else
  {
    unint64_t v13 = 0;
    int32x4_t v14 = vdupq_n_s32(v6);
    uint32x4_t v15 = (uint16x4_t *)(result + 8);
    uint16x4_t v16 = (uint16x4_t)vdup_n_s16(v10);
    uint16x4_t v17 = (uint16x4_t)vdup_n_s16(v11);
    uint32x4_t v18 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v7));
    v19.i64[0] = 0xFFFF0000FFFFLL;
    v19.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      uint64_t v20 = (const __int16 *)(a5 + 1);
      uint16x8_t v21 = (const __int16 *)(a5 + 2);
      uint32x4_t v22 = (const __int16 *)(a5 + 3);
      uint32x4_t v23 = (const __int16 *)(a5 + 4);
      int8x16_t v24 = (const __int16 *)(a5 + 5);
      uint16x8_t v25 = (const __int16 *)(a5 + 6);
      uint32x4_t v26 = (const __int16 *)(a5 + 7);
      uint32x4_t v27 = (uint16x4_t *)((char *)v15 + a3 - 8);
      uint16x4_t v28 = (uint16x4_t)vld1_dup_s16(v20);
      uint16x4_t v29 = (uint16x4_t)vld1_dup_s16(v21);
      uint32x4_t v30 = (uint16x4_t *)((char *)v27 + a3 + a3);
      uint16x4_t v31 = *v30;
      uint16x4_t v32 = (uint16x4_t)vld1_dup_s16(v22);
      uint16x8_t v33 = (uint16x4_t *)((char *)v30 + a3);
      uint32x4_t v34 = vmlal_u16(vmlal_u16(vmlal_u16(vmull_u16(v28, *v27), v16, v15[-1]), v29, *(uint16x4_t *)((char *)v27 + a3)), v32, v31);
      uint16x4_t v35 = *v33;
      uint16x4_t v36 = (uint16x4_t)vld1_dup_s16(v23);
      uint64_t v37 = (uint16x4_t *)((char *)v33 + a3);
      uint16x4_t v38 = *v37;
      uint16x4_t v39 = (uint16x4_t)vld1_dup_s16(v24);
      unint64_t v40 = (uint16x4_t *)((char *)v37 + a3);
      uint16x4_t v41 = (uint16x4_t)vld1_dup_s16(v25);
      uint32x4_t v42 = vmlal_u16(vmlal_u16(v34, v36, v35), v39, v38);
      uint16x4_t v43 = *v40;
      uint64_t v44 = (uint16x4_t *)((char *)v40 + a3);
      uint16x4_t v45 = (uint16x4_t)vld1_dup_s16(v26);
      uint32x4_t v46 = vmlal_u16(vmlal_u16(v42, v41, v43), v45, *v44);
      unsigned int v47 = (uint16x4_t *)((char *)v44 + a3);
      uint32x4_t v48 = vmlal_u16(v46, v17, *v47);
      uint16x4_t v49 = *v15;
      v15 += 2;
      int v50 = (uint16x4_t *)((char *)v47 - 7 * a3 + 8);
      uint32x4_t v51 = vmull_u16(v28, *v50);
      uint64_t v52 = (uint16x4_t *)((char *)v50 + a3);
      uint32x4_t v53 = vmlal_u16(vmlal_u16(v51, v16, v49), v29, *v52);
      unsigned int v54 = (uint16x4_t *)((char *)v52 + a3);
      uint16x4_t v55 = *v54;
      unint64_t v56 = (uint16x4_t *)((char *)v54 + a3);
      uint16x4_t v57 = *v56;
      unint64_t v58 = (uint16x4_t *)((char *)v56 + a3);
      uint16x4_t v59 = *v58;
      unint64_t v60 = (uint16x4_t *)((char *)v58 + a3);
      uint16x4_t v61 = *v60;
      unint64_t v62 = (uint16x4_t *)((char *)v60 + a3);
      int32x4_t v63 = (int32x4_t)vshrq_n_u32(v48, 0x10uLL);
      uint32x4_t v64 = vmlal_u16(vmlal_u16(vmlal_u16(v53, v32, v55), v36, v57), v39, v59);
      uint16x4_t v65 = a4[1];
      int32x4_t v66 = (int32x4_t)vmovl_u16(*a4);
      uint32x4_t v67 = vmlal_u16(v64, v41, v61);
      v41.i16[0] = *(_WORD *)(v8 + 2 * v63.u32[0]);
      v41.i16[1] = *(_WORD *)(v8 + 2 * v63.u32[1]);
      uint32x4_t v68 = vmlal_u16(v67, v45, *v62);
      v41.i16[2] = *(_WORD *)(v8 + 2 * v63.u32[2]);
      v41.i16[3] = *(_WORD *)(v8 + 2 * v63.u32[3]);
      int32x4_t v69 = vsubq_s32(v66, v63);
      uint32x4_t v70 = vabdq_u32((uint32x4_t)v63, (uint32x4_t)v66);
      uint32x4_t v71 = (uint32x4_t)vmulq_s32(vmaxq_s32((int32x4_t)vsubw_u16(v70, v41), (int32x4_t)0), v14);
      v70.i16[0] = *(_WORD *)(v9 + 2 * v70.u32[0]);
      v70.i16[1] = *(_WORD *)(v9 + 2 * v70.u32[1]);
      v70.i16[2] = *(_WORD *)(v9 + 2 * v70.u32[2]);
      v70.i16[3] = *(_WORD *)(v9 + 2 * v70.u32[3]);
      int32x4_t v72 = vminq_s32(vmaxq_s32(vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v66, (uint32x4_t)v69, 0x1FuLL), (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32(vmull_u16((uint16x4_t)vmovn_s32(vminq_s32(vmaxq_s32((int32x4_t)vshlq_u32(v71, v18), (int32x4_t)0), v19)), *(uint16x4_t *)v70.i8), 0x10uLL), (int8x16_t)vcltzq_s32(v69))), (int32x4_t)0), v19);
      int32x4_t v73 = (int32x4_t)vshrq_n_u32(vmlal_u16(v68, v17, *(uint16x4_t *)((char *)v62 + a3)), 0x10uLL);
      *a4 = (uint16x4_t)vraddhn_s32(vmulq_s32(v72, v72), (int32x4_t)0);
      v72.i16[0] = *(_WORD *)(v8 + 2 * v73.u32[0]);
      v72.i16[1] = *(_WORD *)(v8 + 2 * v73.u32[1]);
      v72.i16[2] = *(_WORD *)(v8 + 2 * v73.u32[2]);
      v72.i16[3] = *(_WORD *)(v8 + 2 * v73.u32[3]);
      int32x4_t v74 = (int32x4_t)vmovl_u16(v65);
      int32x4_t v75 = vsubq_s32(v74, v73);
      uint32x4_t v76 = vabdq_u32((uint32x4_t)v73, (uint32x4_t)v74);
      uint64_t v77 = v76.u32[2];
      uint64_t v78 = v76.u32[3];
      uint64_t v79 = v76.u32[0];
      int32x4_t v80 = (__int16 *)(v9 + 2 * v76.u32[1]);
      int32x4_t v81 = (int32x4_t)vshlq_u32((uint32x4_t)vmulq_s32(vmaxq_s32((int32x4_t)vsubw_u16(v76, *(uint16x4_t *)v72.i8), (int32x4_t)0), v14), v18);
      v72.i16[0] = *(_WORD *)(v9 + 2 * v79);
      v72.i16[1] = *v80;
      v72.i16[2] = *(_WORD *)(v9 + 2 * v77);
      v72.i16[3] = *(_WORD *)(v9 + 2 * v78);
      int32x4_t v82 = vminq_s32(vmaxq_s32(vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v74, (uint32x4_t)v75, 0x1FuLL), (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32(vmull_u16((uint16x4_t)vmovn_s32(vminq_s32(vmaxq_s32(v81, (int32x4_t)0), v19)), *(uint16x4_t *)v72.i8), 0x10uLL), (int8x16_t)vcltzq_s32(v75))), (int32x4_t)0), v19);
      a4[1] = (uint16x4_t)vraddhn_s32(vmulq_s32(v82, v82), (int32x4_t)0);
      a4 += 2;
      v13 += 8;
    }
    while (v13 < v12);
    if ((int)v13 >= a2) {
      return result;
    }
  }
  uint64_t v83 = a3;
  uint16x4_t v84 = (unsigned __int16 *)(result + 2 * v13);
  uint64_t result = 0x8000;
  unint64_t v85 = a2 - (unint64_t)v13;
  do
  {
    uint16x4_t v86 = (unsigned __int16 *)((char *)v84 + v83 + v83);
    int v87 = *v84 * v10 + *(unsigned __int16 *)((char *)v84 + v83) * a5[1] + *v86 * a5[2];
    int16x8_t v88 = (unsigned __int16 *)((char *)v86 + v83);
    int v89 = v87 + *v88 * a5[3];
    uint16x4_t v90 = (unsigned __int16 *)((char *)v88 + v83);
    int v91 = v89 + *v90 * a5[4];
    int v92 = (unsigned __int16 *)((char *)v90 + v83);
    unsigned int v93 = (v91
         + *v92 * a5[5]
         + *(unsigned __int16 *)((char *)v92 + v83) * a5[6]
         + *(unsigned __int16 *)((char *)v92 + v83 + v83) * a5[7]
         + *(unsigned __int16 *)((char *)v92 + v83 + v83 + v83) * v11) >> 16;
    int v94 = a4->u16[0];
    int v95 = *(unsigned __int16 *)(v8 + 2 * v93);
    int v96 = v94 - v93;
    if (v96 >= 0) {
      unsigned int v97 = v96;
    }
    else {
      unsigned int v97 = -v96;
    }
    signed int v98 = (((v97 - v95) & ~((int)(v97 - v95) >> 31)) * v6) >> v7;
    if (v98 >= 0xFFFF) {
      signed int v98 = 0xFFFF;
    }
    unsigned int v99 = ((v98 * *(unsigned __int16 *)(v9 + 2 * v97)) >> 16) ^ (v96 >> 31);
    int v100 = (v94 + (v96 >> 31) + v99) & ~((int)(v94 + (v96 >> 31) + v99) >> 31);
    if (v100 >= 0xFFFF) {
      int v100 = 0xFFFF;
    }
    a4->i16[0] = (v100 * v100 + 0x8000) >> 16;
    a4 = (uint16x4_t *)((char *)a4 + 2);
    ++v84;
    --v85;
  }
  while (v85);
  return result;
}

uint16x4_t *sub_1DDB3057C(uint16x4_t *result, int a2, int a3, uint16x4_t *a4, unsigned __int16 *a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a6 + 16);
  unsigned int v7 = *(uint16x4_t **)(a6 + 32);
  uint64_t v8 = a3;
  *(void *)(a6 + 32) = (char *)v7 + a3;
  unsigned int v9 = *a5;
  unsigned int v10 = a5[8];
  unint64_t v11 = a2 & 0xFFFFFFF8;
  if ((int)v11 < 1)
  {
    LODWORD(v12) = 0;
    if (a2 <= 0) {
      return result;
    }
  }
  else
  {
    unint64_t v12 = 0;
    unint64_t v13 = result + 1;
    uint16x4_t v14 = (uint16x4_t)vdup_n_s16(v9);
    uint16x4_t v15 = (uint16x4_t)vdup_n_s16(v10);
    v16.i64[0] = 0xFFFF0000FFFFLL;
    v16.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      uint16x4_t v17 = (const __int16 *)(a5 + 1);
      uint32x4_t v18 = (const __int16 *)(a5 + 2);
      int32x4_t v19 = (const __int16 *)(a5 + 3);
      uint64_t v20 = (const __int16 *)(a5 + 4);
      uint16x8_t v21 = (const __int16 *)(a5 + 5);
      uint32x4_t v22 = (const __int16 *)(a5 + 6);
      uint32x4_t v23 = (const __int16 *)(a5 + 7);
      int8x16_t v24 = (uint16x4_t *)((char *)v13 + v8 - 8);
      uint16x4_t v25 = (uint16x4_t)vld1_dup_s16(v17);
      uint16x4_t v26 = (uint16x4_t)vld1_dup_s16(v18);
      uint32x4_t v27 = (uint16x4_t *)((char *)v24 + v8 + v8);
      uint16x4_t v28 = (uint16x4_t)vld1_dup_s16(v19);
      uint32x4_t v29 = vmlal_u16(vmlal_u16(vmlal_u16(vmull_u16(v25, *v24), v14, v13[-1]), v26, *(uint16x4_t *)((char *)v24 + v8)), v28, *v27);
      uint32x4_t v30 = (uint16x4_t *)((char *)v27 + v8);
      uint16x4_t v31 = (uint16x4_t)vld1_dup_s16(v20);
      uint32x4_t v32 = vmlal_u16(v29, v31, *v30);
      uint16x8_t v33 = (uint16x4_t *)((char *)v30 + v8);
      uint16x4_t v34 = (uint16x4_t)vld1_dup_s16(v21);
      uint32x4_t v35 = vmlal_u16(v32, v34, *v33);
      uint16x4_t v36 = (uint16x4_t *)((char *)v33 + v8);
      uint16x4_t v37 = (uint16x4_t)vld1_dup_s16(v22);
      uint32x4_t v38 = vmlal_u16(v35, v37, *v36);
      uint16x4_t v39 = (uint16x4_t *)((char *)v36 + v8);
      uint16x4_t v40 = (uint16x4_t)vld1_dup_s16(v23);
      int32x4_t v41 = (int32x4_t)vmlal_u16(v38, v40, *v39);
      uint32x4_t v42 = (uint16x4_t *)((char *)v39 + v8);
      int32x4_t v43 = (int32x4_t)vmull_u16(v15, *v42);
      uint16x4_t v44 = *v13;
      v13 += 2;
      uint16x4_t v45 = (uint16x4_t *)((char *)v42 - 7 * v8 + 8);
      uint32x4_t v46 = vmlal_u16(vmull_u16(v25, *v45), v14, v44);
      unsigned int v47 = (uint16x4_t *)((char *)v45 + v8);
      uint32x4_t v48 = vmlal_u16(v46, v26, *v47);
      uint16x4_t v49 = (uint16x4_t *)((char *)v47 + v8);
      uint32x4_t v50 = vmlal_u16(v48, v28, *v49);
      uint32x4_t v51 = (uint16x4_t *)((char *)v49 + v8);
      uint32x4_t v52 = vmlal_u16(v50, v31, *v51);
      uint32x4_t v53 = (uint16x4_t *)((char *)v51 + v8);
      uint32x4_t v54 = vmlal_u16(v52, v34, *v53);
      uint16x4_t v55 = (uint16x4_t *)((char *)v53 + v8);
      uint32x4_t v56 = vmlal_u16(v54, v37, *v55);
      uint16x4_t v57 = (uint16x4_t *)((char *)v55 + v8);
      int32x4_t v58 = (int32x4_t)vmlal_u16(v56, v40, *v57);
      int32x4_t v59 = (int32x4_t)vmull_u16(v15, *(uint16x4_t *)((char *)v57 + v8));
      uint16x4_t v60 = a4[1];
      int32x4_t v61 = (int32x4_t)vsubl_u16(*a4, *v7);
      uint32x4_t v62 = vabdl_u16(*a4, *v7);
      v62.i16[0] = *(_WORD *)(v6 + 2 * v62.u32[0]);
      v62.i16[1] = *(_WORD *)(v6 + 2 * v62.u32[1]);
      v62.i16[2] = *(_WORD *)(v6 + 2 * v62.u32[2]);
      v62.i16[3] = *(_WORD *)(v6 + 2 * v62.u32[3]);
      int32x4_t v63 = vminq_s32(vmaxq_s32(vaddq_s32((int32x4_t)vsraq_n_u32(vmovl_u16(*a4), (uint32x4_t)v61, 0x1FuLL), (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32(vmull_u16((uint16x4_t)vaddhn_s32(v43, v41), *(uint16x4_t *)v62.i8), 0x10uLL), (int8x16_t)vcltzq_s32(v61))), (int32x4_t)0), v16);
      *a4 = (uint16x4_t)vraddhn_s32(vmulq_s32(v63, v63), (int32x4_t)0);
      *(uint16x4_t *)v63.i8 = v7[1];
      int32x4_t v64 = (int32x4_t)vsubl_u16(v60, *(uint16x4_t *)v63.i8);
      uint32x4_t v65 = vabdl_u16(v60, *(uint16x4_t *)v63.i8);
      v65.i16[0] = *(_WORD *)(v6 + 2 * v65.u32[0]);
      v65.i16[1] = *(_WORD *)(v6 + 2 * v65.u32[1]);
      v65.i16[2] = *(_WORD *)(v6 + 2 * v65.u32[2]);
      v65.i16[3] = *(_WORD *)(v6 + 2 * v65.u32[3]);
      int32x4_t v66 = vminq_s32(vmaxq_s32(vaddq_s32((int32x4_t)vsraq_n_u32(vmovl_u16(v60), (uint32x4_t)v64, 0x1FuLL), (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32(vmull_u16((uint16x4_t)vaddhn_s32(v59, v58), *(uint16x4_t *)v65.i8), 0x10uLL), (int8x16_t)vcltzq_s32(v64))), (int32x4_t)0), v16);
      a4[1] = (uint16x4_t)vraddhn_s32(vmulq_s32(v66, v66), (int32x4_t)0);
      a4 += 2;
      v7 += 2;
      v12 += 8;
    }
    while (v12 < v11);
    if ((int)v12 >= a2) {
      return result;
    }
  }
  uint32x4_t v67 = (unsigned __int16 *)result + v12;
  unint64_t v68 = a2 - (unint64_t)v12;
  do
  {
    int32x4_t v69 = (unsigned __int16 *)((char *)v67 + v8 + v8);
    int v70 = *v67 * v9 + *(unsigned __int16 *)((char *)v67 + v8) * a5[1] + *v69 * a5[2];
    uint32x4_t v71 = (unsigned __int16 *)((char *)v69 + v8);
    int v72 = v70 + *v71 * a5[3];
    int32x4_t v73 = (unsigned __int16 *)((char *)v71 + v8);
    int v74 = v72 + *v73 * a5[4];
    int32x4_t v75 = (unsigned __int16 *)((char *)v73 + v8);
    unsigned int v76 = v74
        + *v75 * a5[5]
        + *(unsigned __int16 *)((char *)v75 + v8) * a5[6]
        + *(unsigned __int16 *)((char *)v75 + v8 + v8) * a5[7]
        + *(unsigned __int16 *)((char *)v75 + v8 + v8 + v8) * v10;
    int v77 = v7->u16[0];
    unsigned int v7 = (uint16x4_t *)((char *)v7 + 2);
    int v78 = a4->u16[0];
    unsigned int v79 = HIWORD(v76);
    int v80 = v78 - v77;
    if (v78 - v77 >= 0) {
      unsigned int v81 = v80;
    }
    else {
      unsigned int v81 = -v80;
    }
    unsigned int v82 = ((v79 * *(unsigned __int16 *)(v6 + 2 * v81)) >> 16) ^ (v80 >> 31);
    uint64_t result = (uint16x4_t *)(v78 + (v80 >> 31));
    int v83 = (result + v82) & ~((int)(result + v82) >> 31);
    if (v83 >= 0xFFFF) {
      int v83 = 0xFFFF;
    }
    a4->i16[0] = (v83 * v83 + 0x8000) >> 16;
    a4 = (uint16x4_t *)((char *)a4 + 2);
    ++v67;
    --v68;
  }
  while (v68);
  return result;
}

void *sub_1DDB308CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, void (*a8)(char *), uint64_t (*a9)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a10)
{
  v54[9] = *MEMORY[0x1E4F143B8];
  v54[0] = a7 + 10;
  v54[1] = a7 + 8;
  v54[2] = a7 + 6;
  v54[3] = a7 + 4;
  v54[6] = a7 + 16;
  v54[7] = a7 + 14;
  v54[8] = a7 + 12;
  uint64_t v16 = 9 * a4;
  v54[4] = a7 + 2;
  v54[5] = a7;
  a8(a6);
  memcpy(&a6[a4], a6, 2 * a2);
  memcpy(&a6[a4 + a4], a6, 2 * a2);
  memcpy(&a6[a4 + a4 + a4], a6, 2 * a2);
  uint64_t __n = 2 * a2;
  memcpy(&a6[a4 + a4 + a4 + a4], a6, 2 * a2);
  uint64_t v17 = a5;
  uint32x4_t v18 = &a6[a4 + a4 + a4 + a4 + a4];
  int32x4_t v19 = &a6[v16];
  uint64_t v20 = a5 + a4;
  uint32x4_t v53 = v19;
  if (a3 < 2)
  {
    uint64_t v22 = 5;
    uint16x8_t v21 = &a6[a4 + a4 + a4 + a4 + a4];
    goto LABEL_8;
  }
  uint64_t v51 = v17;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))a8)(&a6[a4 + a4 + a4 + a4 + a4], a1 + a4, a2, a7, a10);
  if (&v18[a4] == v19) {
    uint16x8_t v21 = a6;
  }
  else {
    uint16x8_t v21 = &v18[a4];
  }
  v20 += a4;
  if (a3 == 2)
  {
    uint64_t v22 = 6;
LABEL_8:
    uint64_t v23 = v20;
LABEL_9:
    uint64_t v24 = a10;
    goto LABEL_10;
  }
  uint64_t v37 = a1 + a4 + a4;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))a8)(v21, v37, a2, a7, a10);
  uint32x4_t v38 = &v21[a4];
  if (&v21[a4] == v19) {
    uint32x4_t v38 = a6;
  }
  v20 += a4;
  if (a3 == 3)
  {
    uint64_t v22 = 7;
    uint32x4_t v18 = v21;
    uint16x8_t v21 = v38;
    goto LABEL_8;
  }
  uint64_t v41 = v37 + a4;
  uint32x4_t v42 = v38;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))a8)(v38, v41, a2, a7, a10);
  if (&v42[a4] == v19) {
    uint16x8_t v21 = a6;
  }
  else {
    uint16x8_t v21 = &v42[a4];
  }
  uint64_t v46 = v20 + a4;
  if (a3 == 4)
  {
    int32x4_t v43 = v42;
    uint64_t v22 = 8;
    uint32x4_t v18 = v43;
    uint64_t v23 = v20 + a4;
    goto LABEL_9;
  }
  uint64_t v44 = 0;
  unint64_t v49 = a3;
  uint64_t v45 = 4;
  uint64_t v22 = 8;
  uint64_t v48 = a1 + 4 * a4;
  do
  {
    uint32x4_t v18 = v21;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))a8)(v21, v48 + v44, a2, a7, a10);
    if (&v21[a4] == v19) {
      uint16x8_t v21 = a6;
    }
    else {
      v21 += a4;
    }
    if (v22 == 8) {
      uint64_t v22 = 0;
    }
    else {
      ++v22;
    }
    uint64_t result = (void *)a9(a6, a2, a4, v51 + v44, v54[v22], a10);
    ++v45;
    v44 += a4;
  }
  while (v49 != v45);
  if (v49 > 0xFFFFFFFFFFFFFFFBLL) {
    return result;
  }
  uint64_t v23 = v46 + v44;
  uint64_t v24 = a10;
  a3 = v49;
LABEL_10:
  unint64_t v25 = a3 + 4;
  uint64_t result = memcpy(v21, v18, __n);
  unint64_t v27 = a3;
  if (&v21[a4] == v53) {
    uint16x4_t v28 = a6;
  }
  else {
    uint16x4_t v28 = &v21[a4];
  }
  if (v22 == 8) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v22 + 1;
  }
  unint64_t v30 = v27;
  if (v27 > 3) {
    uint64_t result = (void *)a9(a6, a2, a4, v23 - 4 * a4, v54[v29], v24);
  }
  if (v30 + 1 < v25)
  {
    uint64_t v31 = v23 + a4;
    memcpy(v28, v21, __n);
    if (&v28[a4] == v53) {
      uint32x4_t v32 = a6;
    }
    else {
      uint32x4_t v32 = &v28[a4];
    }
    if (v29 == 8) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v29 + 1;
    }
    if (v30 >= 3) {
      a9(a6, a2, a4, v31 - 4 * a4, v54[v33], a10);
    }
    uint64_t v34 = v31 + a4;
    memcpy(v32, v28, __n);
    if (&v32[a4] == v53) {
      uint32x4_t v35 = a6;
    }
    else {
      uint32x4_t v35 = &v32[a4];
    }
    if (v33 == 8) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v33 + 1;
    }
    if (v30 < 2)
    {
      uint64_t result = memcpy(v35, v32, __n);
      if (!v30) {
        return result;
      }
    }
    else
    {
      a9(a6, a2, a4, v34 - 4 * a4, v54[v36], a10);
      memcpy(v35, v32, __n);
    }
    if (v36 == 8) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = v36 + 1;
    }
    uint64_t v40 = v54[v39];
    return (void *)a9(a6, a2, a4, v34 + a4 - 4 * a4, v40, a10);
  }
  return result;
}

unsigned __int16 *sub_1DDB30DB0(unsigned __int16 *result, void *a2)
{
  uint64_t v436 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a2[208];
  uint64_t v3 = a2[210];
  unint64_t v4 = a2[211];
  uint64_t v5 = a2[212];
  uint64_t v6 = a2[213];
  uint64_t v7 = a2[214];
  uint64_t v8 = a2[215];
  unint64_t v9 = a2[216];
  uint64_t v10 = a2[217];
  uint64_t v292 = a2[218];
  uint64_t v11 = a2[219];
  uint64_t v291 = a2[220];
  uint64_t v12 = a2[221];
  uint64_t v355 = a2[222];
  uint64_t v13 = *((void *)result + 280);
  uint64_t v14 = 4 * v4;
  unint64_t v293 = a2[209] - 8;
  uint64_t v294 = 4 * v9;
  int v354 = *((_DWORD *)result + 40);
  uint64_t v15 = 2 * (v354 != 4);
  if (v2)
  {
    unint64_t v16 = 0;
    uint64_t v17 = (unsigned __int16 *)(2 * v9 + v6 + v15 + 6);
    uint32x4_t v18 = (_WORD *)(2 * v4 + v3 + v15 + 6);
    do
    {
      *(v18 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v18 - 2));
      _WORD *v18 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v18);
      *(v18 - 3) = *(_WORD *)(v13 + 2 * *(v17 - 2));
      unsigned int v19 = *v17;
      v17 += 4;
      *(v18 - 1) = *(_WORD *)(v13 + 2 * v19);
      v16 += 4;
      v18 += 4;
    }
    while (v16 < v2);
    unint64_t v20 = 0;
    uint16x8_t v21 = (unsigned __int16 *)(v294 + v15 + v6 + 6);
    uint64_t v22 = (_WORD *)(v14 + v15 + v3 + 6);
    do
    {
      *(v22 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v22 - 2));
      *uint64_t v22 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v22);
      *(v22 - 3) = *(_WORD *)(v13 + 2 * *(v21 - 2));
      unsigned int v23 = *v21;
      v21 += 4;
      *(v22 - 1) = *(_WORD *)(v13 + 2 * v23);
      v20 += 4;
      v22 += 4;
    }
    while (v20 < v2);
    unint64_t v24 = 0;
    unint64_t v25 = (unsigned __int16 *)(v15 + 6 * v9 + v6 + 6);
    uint16x4_t v26 = (_WORD *)(v15 + 6 * v4 + v3 + 6);
    do
    {
      *(v26 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v26 - 2));
      *uint16x4_t v26 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v26);
      *(v26 - 3) = *(_WORD *)(v13 + 2 * *(v25 - 2));
      unsigned int v27 = *v25;
      v25 += 4;
      *(v26 - 1) = *(_WORD *)(v13 + 2 * v27);
      v24 += 4;
      v26 += 4;
    }
    while (v24 < v2);
  }
  if (v293)
  {
    unint64_t v353 = v2 - 8;
    if (v2 != 8)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v5 + v294 + 8;
      uint64_t v30 = v7 + v294 + 8;
      uint64_t v31 = v8 + v294 + 8;
      uint64_t v32 = 2 * v292 + v10 + 12;
      uint64_t v33 = (unsigned __int8 *)(v12 + 4 * v355 + 2);
      unint64_t v34 = v4 >> 1;
      unint64_t v35 = v9 >> 1;
      signed int v36 = *((_DWORD *)result + 558);
      int v37 = *((_DWORD *)result + 559);
      unint64_t v38 = v4 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v351 = v4 | 1;
      uint64_t v39 = 2 * (v4 >> 1);
      uint64_t v350 = 1 - v39;
      uint64_t v40 = 4 * (v4 >> 1);
      uint64_t v348 = v40 | 3;
      uint64_t v41 = (v15 | (8 * v9)) + v6;
      uint64_t v42 = v15 + 10 * v9 + v6;
      uint64_t v43 = v15 | (8 * v4);
      uint64_t v44 = v15 + 10 * v4;
      uint64_t v347 = (4 * v34) | 2;
      uint64_t v352 = (4 * v34) | 1;
      uint64_t v346 = (2 * (v39 + v34)) | 1;
      uint64_t v45 = 2 * (v39 + v34);
      uint64_t v345 = 3 - v39;
      uint64_t v344 = 2 - v39;
      uint64_t v310 = 4 - v39;
      uint64_t v343 = -v39;
      uint64_t v320 = ~v39;
      unint64_t v307 = v39 ^ 0xFFFFFFFFFFFFFFFELL;
      uint64_t v46 = 2 * v291 + v11 + 8;
      int v47 = v37 << 14;
      uint64_t v48 = (unsigned __int16 *)(v41 + 6);
      uint64_t result = (unsigned __int16 *)(v14 + v3 + 8);
      uint64_t v306 = v43 + v3 + 6;
      uint64_t v304 = v44 + v3 + 6;
      uint64_t v305 = (unsigned __int16 *)(v42 + 6);
      uint64_t v49 = 2 * v35;
      unint64_t v342 = v38 + 5;
      unint64_t v340 = v38 - 3;
      uint64_t v341 = v40 - 1;
      uint64_t v338 = v40 - 2;
      unint64_t v339 = v38 + 4;
      unint64_t v336 = v38 - 1;
      unint64_t v337 = v38 + 3;
      uint64_t v309 = v40 + 5;
      unint64_t v334 = v38 - 2;
      unint64_t v335 = v38 + 2;
      uint64_t v332 = v45 + 2;
      uint64_t v333 = v40 + 4;
      uint64_t v349 = v40;
      uint64_t v308 = v40 - 3;
      uint64_t v289 = v13;
      unint64_t v290 = v2;
      uint64_t v288 = v14;
      while (1)
      {
        if (v2)
        {
          unint64_t v50 = 0;
          uint64_t v51 = (_WORD *)v306;
          uint32x4_t v52 = v48;
          do
          {
            *(v51 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v51 - 2));
            _WORD *v51 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v51);
            *(v51 - 3) = *(_WORD *)(v13 + 2 * *(v52 - 2));
            unsigned int v53 = *v52;
            v52 += 4;
            *(v51 - 1) = *(_WORD *)(v13 + 2 * v53);
            v50 += 4;
            v51 += 4;
          }
          while (v50 < v2);
          unint64_t v54 = 0;
          uint16x4_t v55 = (_WORD *)v304;
          uint32x4_t v56 = v305;
          do
          {
            *(v55 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v55 - 2));
            *uint16x4_t v55 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v55);
            *(v55 - 3) = *(_WORD *)(v13 + 2 * *(v56 - 2));
            unsigned int v57 = *v56;
            v56 += 4;
            *(v55 - 1) = *(_WORD *)(v13 + 2 * v57);
            v54 += 4;
            v55 += 4;
          }
          while (v54 < v2);
        }
        uint64_t v302 = v29;
        uint64_t v303 = v28;
        uint64_t v58 = 0;
        uint64_t v295 = (unsigned __int16 *)((char *)result + v14);
        uint64_t v296 = v48;
        unsigned int v415 = (unsigned __int16 *)(v32 - v292);
        unsigned int v414 = (unsigned __int16 *)(v32 + v292);
        float v413 = (unsigned __int16 *)(v46 - v291);
        float v412 = (unsigned __int16 *)(v46 + v291);
        uint64_t v411 = v29;
        uint64_t v300 = v31;
        uint64_t v301 = v30;
        uint64_t v410 = v30;
        uint64_t v409 = v31;
        uint64_t v297 = v33;
        uint64_t v298 = v46;
        __int32 v408 = (unsigned __int16 *)v46;
        uint64_t v299 = v32;
        int v407 = (unsigned __int16 *)v32;
        do
        {
          uint64_t v395 = v58;
          long long v435 = 0uLL;
          long long v433 = 0uLL;
          long long v434 = 0uLL;
          long long v431 = 0uLL;
          long long v432 = 0uLL;
          long long v429 = 0uLL;
          long long v430 = 0uLL;
          long long v427 = 0uLL;
          long long v428 = 0uLL;
          long long v425 = 0uLL;
          long long v426 = 0uLL;
          long long v423 = 0uLL;
          long long v424 = 0uLL;
          long long v421 = 0uLL;
          long long v422 = 0uLL;
          long long v420 = 0uLL;
          unsigned int v59 = *v33;
          int v60 = v59 & 0xF;
          unsigned int v61 = v59 >> 4;
          unsigned int v62 = v33[1];
          int v63 = v62 & 0xF;
          unsigned int v64 = v62 >> 4;
          unsigned int v65 = v33[2 * v355];
          int v66 = v65 & 0xF;
          unsigned int v67 = v33[(2 * v355) | 1];
          unsigned int v389 = v65;
          unsigned int v367 = v65 >> 4;
          int v391 = v67 & 0xF;
          unsigned int v387 = v33[v355];
          unsigned int v388 = v33[v355 + 1];
          unsigned int v368 = v67 >> 4;
          unsigned int v68 = v33[3 * v355];
          unsigned int v394 = v33;
          unsigned int v396 = result;
          unsigned int v393 = v33[3 * v355 + 1];
          unsigned int v392 = v67;
          if (v354 == 4)
          {
            int v331 = v65 & 0xF;
            int v417 = result[v351];
            int v398 = result[3];
            int v378 = result[v350];
            int v402 = *(result - 1);
            int v384 = result[v342];
            int v329 = result[v348];
            int v363 = result[v341];
            int v317 = result[v340];
            int v311 = result[v346];
            int v366 = result[v38];
            int v380 = result[v343];
            int v82 = result[2];
            int v83 = *(result - 2);
            int v386 = result[v339];
            int v357 = result[v347];
            int v365 = result[v338];
            int v319 = result[v38 - 4];
            int v312 = result[v45];
            int v326 = result[v337];
            int v400 = result[v336];
            int v376 = result[v352];
            int v418 = result[1];
            int v359 = result[v345];
            int v372 = result[5];
            int v324 = result[v309];
            int v315 = result[v45 + 3];
            int v84 = *(result - 3);
            int v85 = *result;
            int v86 = result[v335];
            int v370 = result[v334];
            int v87 = result[v349];
            int v361 = result[v344];
            int v374 = result[4];
            int v322 = result[v333];
            int v313 = result[v332];
            int v88 = *(result - 4);
            int v382 = v82;
            int v406 = v85;
            int v404 = v83;
            if ((v59 & 0xF) != 0)
            {
              unsigned int v89 = v68;
              int v90 = result[v320];
              int v91 = result[v307];
              if (v60 == 2)
              {
                int v92 = result[v351];
                LOWORD(v420) = (3 * (v378 + v417) + 10 * v402 + 8) >> 4;
                WORD4(v420) = (3 * (v380 + v366) + 10 * v83 + 8) >> 4;
                LOWORD(v421) = (3 * (v90 + v400) + 10 * v418 + 8) >> 4;
                unsigned int v93 = (3 * (v91 + v370) + 10 * v85 + 8) >> 4;
              }
              else
              {
                LOWORD(v420) = (v398 + 9 * v402 + 3 * (v378 + v417) + 8) >> 4;
                WORD4(v420) = (v82 + 9 * v83 + 3 * (v380 + v366) + 8) >> 4;
                LOWORD(v421) = (9 * v418 + v84 + 3 * (v90 + v400) + 8) >> 4;
                int v109 = 9 * v85 + v88;
                int v92 = v417;
                unsigned int v93 = (v109 + 3 * (v91 + v370) + 8) >> 4;
              }
              unsigned int v68 = v89;
              int v100 = v86;
              unsigned int v61 = v59 >> 4;
              int v63 = v62 & 0xF;
              WORD4(v421) = v93;
              if (v59 < 0x10)
              {
LABEL_41:
                int v103 = v398;
                int v106 = v402;
                WORD1(v420) = (v402 + v398 + 1) >> 1;
                int v102 = v366;
                int v104 = v406;
                int v105 = v400;
                WORD5(v420) = (v404 + v82 + 1) >> 1;
                WORD1(v421) = v418;
                WORD5(v421) = v406;
                if (v63) {
                  goto LABEL_42;
                }
LABEL_53:
                WORD2(v420) = (3 * v103 + v106 + 2) >> 2;
                WORD6(v420) = (3 * v82 + v404 + 2) >> 2;
                WORD2(v421) = (3 * v418 + v372 + 2) >> 2;
                unsigned int v111 = v389;
                int v110 = v326;
                WORD6(v421) = (3 * v104 + v374 + 2) >> 2;
                if (v62 < 0x10)
                {
LABEL_54:
                  unsigned int v117 = v68;
                  WORD3(v420) = v103;
                  HIWORD(v420) = v82;
                  int v116 = v418;
                  WORD3(v421) = (v372 + v418 + 1) >> 1;
                  int v118 = v374 + v104;
LABEL_55:
                  unsigned int v142 = (v118 + 1) >> 1;
                  goto LABEL_88;
                }
LABEL_49:
                WORD3(v420) = v103;
                HIWORD(v420) = v82;
                int v114 = v359 + v110;
                BOOL v115 = v64 == 2;
                int v116 = v418;
                unsigned int v117 = v68;
                if (v115)
                {
                  WORD3(v421) = (v114 + 1) >> 1;
                  int v118 = v361 + v100;
                  goto LABEL_55;
                }
                WORD3(v421) = (v114 + v418 + v372 + 2) >> 2;
                int v106 = v402;
                unsigned int v142 = (v361 + v100 + v104 + v374 + 2) >> 2;
LABEL_88:
                HIWORD(v421) = v142;
                int v327 = v92 + 1;
                LOWORD(v424) = (v92 + 1 + v106) >> 1;
                int v390 = v102 + 1;
                WORD4(v424) = (v102 + 1 + v404) >> 1;
                LOWORD(v425) = (v116 + v105 + 1) >> 1;
                WORD4(v425) = (v104 + v370 + 1) >> 1;
                if (v387 < 0x10)
                {
                  WORD1(v424) = (3 * (v106 + v103) + 10 * v92 + 8) >> 4;
                  WORD5(v424) = (3 * (v404 + v82) + 10 * v102 + 8) >> 4;
                  WORD1(v425) = (3 * (v105 + v110) + 10 * v116 + 8) >> 4;
                  int v143 = v370;
                  int v144 = 3 * (v370 + v100) + 10 * v104;
                  goto LABEL_111;
                }
                if ((v387 & 0xF0) == 0x20)
                {
                  int v143 = v370;
                  WORD1(v424) = (v378 + 3 * v92 + 2) >> 2;
                  WORD5(v424) = (v380 + 3 * v102 + 2) >> 2;
                  WORD1(v425) = (3 * v116 + v376 + 2) >> 2;
                  unsigned int v145 = (3 * v104 + v87 + 2) >> 2;
                }
                else
                {
                  WORD1(v424) = (9 * v92 + v378 + 3 * (v106 + v103) + 8) >> 4;
                  WORD5(v424) = (9 * v102 + v380 + 3 * (v404 + v82) + 8) >> 4;
                  WORD1(v425) = (9 * v116 + v376 + 3 * (v105 + v110) + 8) >> 4;
                  int v143 = v370;
                  int v144 = 9 * v104 + v87 + 3 * (v370 + v100);
LABEL_111:
                  unsigned int v145 = (v144 + 8) >> 4;
                }
                unsigned int v188 = v117;
                WORD5(v425) = v145;
                int v189 = v92 + v103;
                WORD2(v424) = (v92 + v103 + 1) >> 1;
                WORD6(v424) = (v102 + v82 + 1) >> 1;
                WORD2(v425) = (v110 + v116 + 1) >> 1;
                WORD6(v425) = (v100 + v104 + 1) >> 1;
                int v190 = v87;
                if (v388 >= 0x10)
                {
                  if ((v388 & 0xF0) == 0x20)
                  {
                    int v192 = v329;
                    WORD3(v424) = (3 * v103 + v329 + 2) >> 2;
                    HIWORD(v424) = (3 * v82 + v357 + 2) >> 2;
                    WORD3(v425) = (3 * v110 + v359 + 2) >> 2;
                    int v191 = v331;
                    HIWORD(v425) = (3 * v100 + v361 + 2) >> 2;
                    if (!v331) {
                      goto LABEL_124;
                    }
                  }
                  else
                  {
                    int v192 = v329;
                    WORD3(v424) = (9 * v103 + v329 + 3 * (v384 + v417) + 8) >> 4;
                    HIWORD(v424) = (9 * v82 + v357 + 3 * (v386 + v102) + 8) >> 4;
                    WORD3(v425) = (9 * v110 + v359 + 3 * (v372 + v418) + 8) >> 4;
                    int v191 = v331;
                    HIWORD(v425) = (9 * v100 + v361 + 3 * (v374 + v406) + 8) >> 4;
                    if (!v331) {
                      goto LABEL_124;
                    }
                  }
                }
                else
                {
                  WORD3(v424) = (3 * (v384 + v92) + 10 * v103 + 8) >> 4;
                  HIWORD(v424) = (3 * (v386 + v102) + 10 * v82 + 8) >> 4;
                  WORD3(v425) = (3 * (v372 + v116) + 10 * v110 + 8) >> 4;
                  int v191 = v331;
                  int v192 = v329;
                  HIWORD(v425) = (3 * (v374 + v104) + 10 * v100 + 8) >> 4;
                  if (!v331)
                  {
LABEL_124:
                    LOWORD(v428) = (3 * v417 + v317 + 2) >> 2;
                    WORD4(v428) = (3 * v102 + v319 + 2) >> 2;
                    LOWORD(v429) = (v110 + 3 * v400 + 2) >> 2;
                    int v193 = v190;
                    WORD4(v429) = (v100 + 3 * v143 + 2) >> 2;
                    if (v111 >= 0x10) {
                      goto LABEL_125;
                    }
LABEL_121:
                    WORD1(v428) = v417;
                    WORD5(v428) = v102;
                    int v195 = v400;
                    WORD1(v429) = (v400 + v110 + 1) >> 1;
                    int v196 = v376;
                    WORD5(v429) = (v143 + v100 + 1) >> 1;
                    int v197 = v391;
                    int v198 = v357;
                    if (!v391)
                    {
LABEL_133:
                      WORD2(v428) = (3 * v417 + v384 + 2) >> 2;
                      WORD6(v428) = (3 * v102 + v386 + 2) >> 2;
                      WORD2(v429) = (v195 + 3 * v110 + 2) >> 2;
                      WORD6(v429) = (v143 + 3 * v100 + 2) >> 2;
                      if (v392 >= 0x10) {
                        goto LABEL_134;
                      }
LABEL_131:
                      int v200 = v327;
                      WORD3(v428) = (v327 + v384) >> 1;
                      int v201 = v102 + 1;
                      unsigned int v202 = (v390 + v386) >> 1;
                      int v203 = v365;
                      goto LABEL_138;
                    }
LABEL_127:
                    if (v197 == 2)
                    {
                      WORD2(v428) = (3 * (v192 + v398) + 10 * v417 + 8) >> 4;
                      WORD6(v428) = (3 * (v198 + v82) + 10 * v102 + 8) >> 4;
                      WORD2(v429) = (3 * (v196 + v418) + 10 * v110 + 8) >> 4;
                      int v199 = 3 * (v193 + v406) + 10 * v100;
                    }
                    else
                    {
                      WORD2(v428) = (9 * v417 + v384 + 3 * (v192 + v398) + 8) >> 4;
                      WORD6(v428) = (9 * v102 + v386 + 3 * (v198 + v82) + 8) >> 4;
                      WORD2(v429) = (9 * v110 + v195 + 3 * (v196 + v418) + 8) >> 4;
                      int v199 = 9 * v100 + v143 + 3 * (v193 + v406);
                    }
                    WORD6(v429) = (v199 + 8) >> 4;
                    if (v392 < 0x10) {
                      goto LABEL_131;
                    }
LABEL_134:
                    int v203 = v365;
                    if (v368 == 2)
                    {
                      WORD3(v428) = (v192 + v398 + 1) >> 1;
                      unsigned int v202 = (v198 + v82 + 1) >> 1;
                    }
                    else
                    {
                      WORD3(v428) = (v189 + v384 + v192 + 2) >> 2;
                      unsigned int v202 = (v102 + v82 + v386 + v198 + 2) >> 2;
                    }
                    int v200 = v327;
                    int v201 = v102 + 1;
LABEL_138:
                    HIWORD(v428) = v202;
                    WORD3(v429) = v110;
                    HIWORD(v429) = v100;
                    LOWORD(v432) = (v200 + v363) >> 1;
                    WORD4(v432) = (v201 + v203) >> 1;
                    LOWORD(v433) = (v195 + v196 + 1) >> 1;
                    WORD4(v433) = (v143 + v193 + 1) >> 1;
                    if (v188 >= 0x10)
                    {
                      int v206 = v188 & 0xF0;
                      unsigned int v205 = v393;
                      if (v206 == 32)
                      {
                        WORD1(v432) = (3 * v417 + v311 + 2) >> 2;
                        WORD5(v432) = (3 * v102 + v312 + 2) >> 2;
                        WORD1(v433) = (v418 + 3 * v196 + 2) >> 2;
                        unsigned int v204 = (v406 + 3 * v193 + 2) >> 2;
                      }
                      else
                      {
                        WORD1(v432) = (9 * v417 + v311 + 3 * (v363 + v192) + 8) >> 4;
                        WORD5(v432) = (9 * v102 + v312 + 3 * (v203 + v198) + 8) >> 4;
                        WORD1(v433) = (v418 + 9 * v196 + 3 * (v195 + v110) + 8) >> 4;
                        int v102 = v366;
                        unsigned int v204 = (v406 + 9 * v193 + 3 * (v143 + v100) + 8) >> 4;
                      }
                    }
                    else
                    {
                      WORD1(v432) = (3 * (v363 + v192) + 10 * v417 + 8) >> 4;
                      WORD5(v432) = (3 * (v203 + v198) + 10 * v102 + 8) >> 4;
                      WORD1(v433) = (3 * (v195 + v110) + 10 * v196 + 8) >> 4;
                      unsigned int v204 = (3 * (v143 + v100) + 10 * v193 + 8) >> 4;
                      unsigned int v205 = v393;
                    }
                    WORD5(v433) = v204;
                    WORD2(v432) = (v200 + v192) >> 1;
                    WORD6(v432) = (v390 + v198) >> 1;
                    WORD2(v433) = (v110 + v196 + 1) >> 1;
                    WORD6(v433) = (v100 + v193 + 1) >> 1;
                    if (v205 < 0x10)
                    {
                      WORD3(v432) = (3 * (v384 + v417) + 10 * v192 + 8) >> 4;
                      HIWORD(v432) = (3 * (v386 + v102) + 10 * v198 + 8) >> 4;
                      WORD3(v433) = (3 * (v324 + v196) + 10 * v110 + 8) >> 4;
                      int v207 = 3 * (v322 + v193) + 10 * v100;
                      goto LABEL_148;
                    }
                    if ((v205 & 0xF0) == 0x20)
                    {
                      WORD3(v432) = (v398 + 3 * v192 + 2) >> 2;
                      HIWORD(v432) = (v382 + 3 * v198 + 2) >> 2;
                      WORD3(v433) = (3 * v110 + v315 + 2) >> 2;
                      unsigned int v208 = (3 * v100 + v313 + 2) >> 2;
                    }
                    else
                    {
                      WORD3(v432) = (v398 + 9 * v192 + 3 * (v384 + v417) + 8) >> 4;
                      HIWORD(v432) = (v382 + 9 * v198 + 3 * (v386 + v102) + 8) >> 4;
                      WORD3(v433) = (9 * v110 + v315 + 3 * (v324 + v196) + 8) >> 4;
                      int v207 = 9 * v100 + v313 + 3 * (v322 + v193);
LABEL_148:
                      unsigned int v208 = (v207 + 8) >> 4;
                    }
                    HIWORD(v433) = v208;
                    int v209 = *v415;
                    int v210 = v415[3];
                    int v211 = v415[6];
                    int v212 = *v407;
                    int v213 = v407[3];
                    int v214 = v407[6];
                    int v215 = *v414;
                    int v216 = v414[3];
                    int v217 = v414[6];
                    LOWORD(v422) = (v212 + 1 + v209) >> 1;
                    int v218 = v213 + v210;
                    WORD1(v422) = (v218 + 2 + v209 + v212) >> 2;
                    WORD2(v422) = (v218 + 1) >> 1;
                    WORD3(v422) = (v218 + 2 + v211 + v214) >> 2;
                    LOWORD(v426) = v212;
                    WORD1(v426) = (v213 + v212 + 1) >> 1;
                    WORD2(v426) = v213;
                    WORD3(v426) = (v214 + v213 + 1) >> 1;
                    LOWORD(v430) = (v212 + 1 + v215) >> 1;
                    WORD1(v430) = (v216 + 2 + v213 + v212 + v215) >> 2;
                    WORD2(v430) = (v216 + 1 + v213) >> 1;
                    WORD3(v430) = (v216 + 2 + v214 + v213 + v217) >> 2;
                    LOWORD(v434) = v215;
                    WORD1(v434) = (v216 + 1 + v215) >> 1;
                    WORD2(v434) = v216;
                    WORD3(v434) = (v216 + 1 + v217) >> 1;
                    int v219 = v415[1];
                    int v220 = v415[4];
                    int v221 = v415[7];
                    int v222 = v407[1];
                    int v223 = v407[4];
                    int v224 = v407[7];
                    int v225 = v414[1];
                    int v226 = v414[4];
                    int v227 = v414[7];
                    WORD4(v422) = (v222 + 1 + v219) >> 1;
                    int v228 = v223 + v220;
                    WORD5(v422) = (v228 + 2 + v219 + v222) >> 2;
                    WORD6(v422) = (v228 + 1) >> 1;
                    HIWORD(v422) = (v228 + 2 + v221 + v224) >> 2;
                    WORD4(v426) = v222;
                    WORD5(v426) = (v223 + v222 + 1) >> 1;
                    WORD6(v426) = v223;
                    HIWORD(v426) = (v224 + v223 + 1) >> 1;
                    WORD4(v430) = (v222 + 1 + v225) >> 1;
                    WORD5(v430) = (v226 + 2 + v223 + v222 + v225) >> 2;
                    WORD6(v430) = (v226 + 1 + v223) >> 1;
                    HIWORD(v430) = (v226 + 2 + v224 + v223 + v227) >> 2;
                    WORD4(v434) = v225;
                    WORD5(v434) = (v226 + 1 + v225) >> 1;
                    WORD6(v434) = v226;
                    HIWORD(v434) = (v226 + 1 + v227) >> 1;
                    int v229 = v415[2];
                    int v230 = v415[5];
                    int v231 = v415[8];
                    int v232 = v407[2];
                    int v233 = v407[5];
                    int v234 = v407[8];
                    int v235 = v414[2];
                    int v236 = v414[5];
                    int v237 = v414[8];
                    LOWORD(v423) = (v232 + 1 + v229) >> 1;
                    int v238 = v233 + v230;
                    WORD1(v423) = (v238 + 2 + v229 + v232) >> 2;
                    WORD2(v423) = (v238 + 1) >> 1;
                    WORD3(v423) = (v238 + 2 + v231 + v234) >> 2;
                    LOWORD(v427) = v232;
                    WORD1(v427) = (v233 + v232 + 1) >> 1;
                    WORD2(v427) = v233;
                    WORD3(v427) = (v234 + v233 + 1) >> 1;
                    LOWORD(v431) = (v232 + 1 + v235) >> 1;
                    WORD1(v431) = (v236 + 2 + v233 + v232 + v235) >> 2;
                    WORD2(v431) = (v236 + 1 + v233) >> 1;
                    WORD3(v431) = (v236 + 2 + v234 + v233 + v237) >> 2;
                    LOWORD(v435) = v235;
                    WORD1(v435) = (v236 + 1 + v235) >> 1;
                    WORD2(v435) = v236;
                    WORD3(v435) = (v236 + 1 + v237) >> 1;
                    int v239 = v413[1];
                    int v240 = v413[5];
                    int v241 = v408[1];
                    int v242 = v408[3];
                    int v243 = v408[5];
                    int v244 = v412[1];
                    int v245 = v412[3];
                    int v246 = v242 + v413[3];
                    int v247 = v412[5];
                    WORD4(v423) = (v241 + 1 + v239) >> 1;
                    WORD5(v423) = (v246 + 2 + v239 + v241) >> 2;
                    WORD6(v423) = (v246 + 1) >> 1;
                    HIWORD(v423) = (v246 + 2 + v240 + v243) >> 2;
                    WORD4(v427) = v241;
                    WORD5(v427) = (v242 + v241 + 1) >> 1;
                    WORD6(v427) = v242;
                    HIWORD(v427) = (v243 + v242 + 1) >> 1;
                    WORD4(v431) = (v241 + 1 + v244) >> 1;
                    WORD5(v431) = (v245 + 2 + v242 + v241 + v244) >> 2;
                    WORD6(v431) = (v245 + 1 + v242) >> 1;
                    HIWORD(v431) = (v245 + 2 + v243 + v242 + v247) >> 2;
                    WORD4(v435) = v244;
                    WORD5(v435) = (v245 + 1 + v244) >> 1;
                    unsigned int v187 = (v245 + 1 + v247) >> 1;
                    WORD6(v435) = v245;
                    goto LABEL_150;
                  }
                }
                if (v191 == 2)
                {
                  LOWORD(v428) = (3 * (v363 + v402) + 10 * v417 + 8) >> 4;
                  WORD4(v428) = (3 * (v365 + v404) + 10 * v102 + 8) >> 4;
                  LOWORD(v429) = (3 * (v376 + v418) + 10 * v400 + 8) >> 4;
                  int v193 = v190;
                  int v194 = 3 * (v190 + v406) + 10 * v143;
                }
                else
                {
                  LOWORD(v428) = (9 * v417 + v317 + 3 * (v363 + v402) + 8) >> 4;
                  WORD4(v428) = (9 * v102 + v319 + 3 * (v365 + v404) + 8) >> 4;
                  LOWORD(v429) = (v110 + 9 * v400 + 3 * (v376 + v418) + 8) >> 4;
                  int v193 = v190;
                  int v194 = v100 + 9 * v143 + 3 * (v190 + v406);
                }
                WORD4(v429) = (v194 + 8) >> 4;
                if (v111 < 0x10) {
                  goto LABEL_121;
                }
LABEL_125:
                WORD1(v428) = v417;
                WORD5(v428) = v102;
                int v196 = v376;
                if (v367 == 2)
                {
                  WORD1(v429) = (v376 + v418 + 1) >> 1;
                  int v195 = v400;
                  WORD5(v429) = (v193 + v406 + 1) >> 1;
                  int v197 = v391;
                  int v198 = v357;
                  if (!v391) {
                    goto LABEL_133;
                  }
                }
                else
                {
                  int v195 = v400;
                  WORD1(v429) = (v400 + v110 + v116 + v376 + 2) >> 2;
                  WORD5(v429) = (v143 + v100 + v104 + v193 + 2) >> 2;
                  int v197 = v391;
                  int v198 = v357;
                  if (!v391) {
                    goto LABEL_133;
                  }
                }
                goto LABEL_127;
              }
            }
            else
            {
              LOWORD(v420) = (v398 + 3 * v402 + 2) >> 2;
              WORD4(v420) = (v82 + 3 * v83 + 2) >> 2;
              LOWORD(v421) = (3 * v418 + v84 + 2) >> 2;
              unsigned int v99 = (3 * v85 + v88 + 2) >> 2;
              int v100 = v86;
              int v92 = v417;
              WORD4(v421) = v99;
              if (v59 < 0x10) {
                goto LABEL_41;
              }
            }
            int v101 = v378 + v92;
            int v102 = v366;
            int v103 = v398;
            int v104 = v406;
            int v105 = v400;
            int v106 = v402;
            if (v61 == 2)
            {
              WORD1(v420) = (v101 + 1) >> 1;
              WORD5(v420) = (v380 + v366 + 1) >> 1;
              WORD1(v421) = v418;
              WORD5(v421) = v406;
              if (v63) {
                goto LABEL_42;
              }
              goto LABEL_53;
            }
            WORD1(v420) = (v101 + v398 + v402 + 2) >> 2;
            int v106 = v402;
            WORD5(v420) = (v380 + v366 + v82 + v404 + 2) >> 2;
            WORD1(v421) = v418;
            WORD5(v421) = v406;
            if (!v63) {
              goto LABEL_53;
            }
LABEL_42:
            if (v63 == 2)
            {
              WORD2(v420) = (3 * (v378 + v92) + 10 * v103 + 8) >> 4;
              WORD6(v420) = (3 * (v380 + v102) + 10 * v82 + 8) >> 4;
              int v110 = v326;
              WORD2(v421) = (3 * (v359 + v326) + 10 * v418 + 8) >> 4;
              unsigned int v111 = v389;
              int v106 = v402;
              WORD6(v421) = (3 * (v361 + v100) + 10 * v104 + 8) >> 4;
              if (v62 < 0x10) {
                goto LABEL_54;
              }
            }
            else
            {
              WORD2(v420) = (9 * v103 + v402 + 3 * (v378 + v92) + 8) >> 4;
              WORD6(v420) = (9 * v82 + v404 + 3 * (v380 + v102) + 8) >> 4;
              int v110 = v326;
              WORD2(v421) = (9 * v418 + v372 + 3 * (v359 + v326) + 8) >> 4;
              int v106 = v402;
              unsigned int v111 = v389;
              WORD6(v421) = (9 * v104 + v374 + 3 * (v361 + v100) + 8) >> 4;
              if (v62 < 0x10) {
                goto LABEL_54;
              }
            }
            goto LABEL_49;
          }
          unsigned int v69 = v59 >> 4;
          unsigned __int8 v369 = v33[3 * v355];
          int v70 = *result;
          int v71 = result[v335];
          int v72 = result[v344];
          int v397 = result[4];
          int v399 = result[v334];
          int v73 = result[v349];
          int v364 = result[v333];
          int v360 = result[v38 + 6];
          int v328 = result[v332];
          int v74 = result[v351];
          int v75 = *(result - 1);
          int v76 = result[v350];
          int v385 = result[3];
          int v373 = result[v340];
          int v401 = result[v341];
          int v371 = result[v348];
          int v362 = result[v342];
          int v330 = result[v346];
          int v77 = result[v38];
          int v405 = result[v339];
          int v78 = result[2];
          int v379 = result[v347];
          int v375 = result[v343];
          int v381 = *(result - 2);
          int v314 = result[v310];
          int v321 = result[v338];
          int v318 = result[v45];
          int v356 = result[6];
          int v79 = result[1];
          int v80 = result[v336];
          int v403 = result[v337];
          int v416 = result[v352];
          int v377 = result[v320];
          int v316 = result[v345];
          int v383 = *(result - 3);
          int v325 = result[v308];
          int v323 = result[v45 - 1];
          int v358 = result[5];
          if ((v59 & 0xF) == 0)
          {
            LOWORD(v420) = *result;
            WORD4(v420) = v75;
            LOWORD(v421) = (v381 + v78 + 1) >> 1;
            int v81 = v383 + v79;
LABEL_27:
            int v94 = v76;
            WORD4(v421) = (v81 + 1) >> 1;
            int v419 = v73;
            if (v59 < 0x10) {
              goto LABEL_28;
            }
            goto LABEL_37;
          }
          if (v60 == 2)
          {
            LOWORD(v420) = *result;
            WORD4(v420) = v75;
            LOWORD(v421) = (v375 + v77 + 1) >> 1;
            int v81 = v377 + v80;
            goto LABEL_27;
          }
          LOWORD(v420) = *result;
          WORD4(v420) = v75;
          LOWORD(v421) = (v375 + v77 + v78 + v381 + 2) >> 2;
          int v94 = v76;
          WORD4(v421) = (v377 + v80 + v79 + v383 + 2) >> 2;
          int v419 = v73;
          if (v59 < 0x10)
          {
LABEL_28:
            WORD1(v420) = (3 * v70 + v397 + 2) >> 2;
            int v95 = v75;
            int v96 = v385;
            WORD5(v420) = (3 * v75 + v385 + 2) >> 2;
            WORD1(v421) = (3 * v78 + v381 + 2) >> 2;
            WORD5(v421) = (3 * v79 + v383 + 2) >> 2;
            int v97 = v62 & 0xF;
            if ((v62 & 0xF) != 0) {
              goto LABEL_29;
            }
            goto LABEL_58;
          }
LABEL_37:
          int v107 = 3 * (v72 + v71);
          int v96 = v385;
          if (v69 == 2)
          {
            WORD1(v420) = (v107 + 10 * v70 + 8) >> 4;
            int v95 = v75;
            WORD5(v420) = (3 * (v94 + v74) + 10 * v75 + 8) >> 4;
            WORD1(v421) = (3 * (v375 + v77) + 10 * v78 + 8) >> 4;
            int v108 = 3 * (v377 + v80) + 10 * v79;
          }
          else
          {
            int v94 = v76;
            WORD1(v420) = (9 * v70 + v397 + v107 + 8) >> 4;
            int v95 = v75;
            WORD5(v420) = (9 * v75 + v385 + 3 * (v76 + v74) + 8) >> 4;
            WORD1(v421) = (9 * v78 + v381 + 3 * (v375 + v77) + 8) >> 4;
            int v108 = 9 * v79 + v383 + 3 * (v377 + v80);
          }
          int v73 = v419;
          WORD5(v421) = (v108 + 8) >> 4;
          int v97 = v62 & 0xF;
          if ((v62 & 0xF) != 0)
          {
LABEL_29:
            if (v97 == 2)
            {
              WORD2(v420) = (v72 + v71 + 1) >> 1;
              int v98 = v397;
              WORD6(v420) = (v94 + v74 + 1) >> 1;
              WORD2(v421) = v78;
              WORD6(v421) = v79;
              if (v62 < 0x10) {
                goto LABEL_59;
              }
            }
            else
            {
              int v98 = v397;
              WORD2(v420) = (v72 + v71 + v70 + v397 + 2) >> 2;
              int v73 = v419;
              WORD6(v420) = (v94 + v74 + v95 + v96 + 2) >> 2;
              WORD2(v421) = v78;
              WORD6(v421) = v79;
              if (v62 < 0x10) {
                goto LABEL_59;
              }
            }
            goto LABEL_46;
          }
LABEL_58:
          int v98 = v397;
          WORD2(v420) = (v397 + v70 + 1) >> 1;
          WORD6(v420) = (v96 + v95 + 1) >> 1;
          WORD2(v421) = v78;
          WORD6(v421) = v79;
          if (v62 < 0x10)
          {
LABEL_59:
            WORD3(v420) = (v70 + 3 * v98 + 2) >> 2;
            HIWORD(v420) = (v95 + 3 * v96 + 2) >> 2;
            WORD3(v421) = (3 * v78 + v356 + 2) >> 2;
            HIWORD(v421) = (3 * v79 + v358 + 2) >> 2;
            int v119 = v387 & 0xF;
            if ((v387 & 0xF) == 0) {
              goto LABEL_65;
            }
            goto LABEL_60;
          }
LABEL_46:
          int v112 = 3 * (v72 + v71);
          if (v64 == 2)
          {
            WORD3(v420) = (v112 + 10 * v98 + 8) >> 4;
            HIWORD(v420) = (3 * (v94 + v74) + 10 * v96 + 8) >> 4;
            WORD3(v421) = (3 * (v314 + v405) + 10 * v78 + 8) >> 4;
            int v113 = 3 * (v316 + v403) + 10 * v79;
          }
          else
          {
            WORD3(v420) = (v70 + v112 + 9 * v98 + 8) >> 4;
            HIWORD(v420) = (v95 + 9 * v96 + 3 * (v94 + v74) + 8) >> 4;
            WORD3(v421) = (9 * v78 + v356 + 3 * (v314 + v405) + 8) >> 4;
            int v113 = 9 * v79 + v358 + 3 * (v316 + v403);
          }
          int v73 = v419;
          HIWORD(v421) = (v113 + 8) >> 4;
          int v119 = v387 & 0xF;
          if ((v387 & 0xF) == 0)
          {
LABEL_65:
            LOWORD(v424) = (3 * (v399 + v71) + 10 * v70 + 8) >> 4;
            WORD4(v424) = (3 * (v373 + v74) + 10 * v95 + 8) >> 4;
            LOWORD(v425) = (3 * (v381 + v78) + 10 * v77 + 8) >> 4;
            int v121 = 3 * (v383 + v79) + 10 * v80;
            goto LABEL_66;
          }
LABEL_60:
          if (v119 == 2)
          {
            LOWORD(v424) = (3 * v70 + v73 + 2) >> 2;
            WORD4(v424) = (3 * v95 + v401 + 2) >> 2;
            LOWORD(v425) = (3 * v77 + v375 + 2) >> 2;
            unsigned int v120 = (3 * v80 + v377 + 2) >> 2;
            goto LABEL_67;
          }
          LOWORD(v424) = (9 * v70 + v73 + 3 * (v399 + v71) + 8) >> 4;
          WORD4(v424) = (9 * v95 + v401 + 3 * (v373 + v74) + 8) >> 4;
          LOWORD(v425) = (9 * v77 + v375 + 3 * (v381 + v78) + 8) >> 4;
          int v121 = 9 * v80 + v377 + 3 * (v383 + v79);
LABEL_66:
          unsigned int v120 = (v121 + 8) >> 4;
LABEL_67:
          WORD4(v425) = v120;
          WORD1(v424) = (v71 + v70 + 1) >> 1;
          WORD5(v424) = (v74 + v95 + 1) >> 1;
          WORD1(v425) = (v77 + v78 + 1) >> 1;
          WORD5(v425) = (v80 + v79 + 1) >> 1;
          if ((v388 & 0xF) != 0)
          {
            if ((v388 & 0xF) == 2)
            {
              WORD2(v424) = (v72 + 3 * v71 + 2) >> 2;
              WORD6(v424) = (v94 + 3 * v74 + 2) >> 2;
              WORD2(v425) = (3 * v78 + v379 + 2) >> 2;
              unsigned int v122 = (3 * v79 + v416 + 2) >> 2;
              int v123 = v405;
              int v124 = v403;
              int v125 = v385;
              goto LABEL_73;
            }
            int v126 = v66;
            WORD2(v424) = (9 * v71 + v72 + 3 * (v98 + v70) + 8) >> 4;
            int v125 = v385;
            WORD6(v424) = (9 * v74 + v94 + 3 * (v385 + v95) + 8) >> 4;
            int v123 = v405;
            WORD2(v425) = (9 * v78 + v379 + 3 * (v405 + v77) + 8) >> 4;
            int v124 = v403;
            int v98 = v397;
            int v127 = 9 * v79 + v416 + 3 * (v403 + v80);
          }
          else
          {
            int v126 = v66;
            WORD2(v424) = (3 * (v98 + v70) + 10 * v71 + 8) >> 4;
            int v125 = v385;
            WORD6(v424) = (3 * (v385 + v95) + 10 * v74 + 8) >> 4;
            int v123 = v405;
            WORD2(v425) = (3 * (v405 + v77) + 10 * v78 + 8) >> 4;
            int v124 = v403;
            int v127 = 3 * (v403 + v80) + 10 * v79;
          }
          int v66 = v126;
          unsigned int v122 = (v127 + 8) >> 4;
LABEL_73:
          WORD6(v425) = v122;
          int v128 = v71 + 1;
          WORD3(v424) = (v71 + 1 + v98) >> 1;
          int v129 = v74 + 1;
          HIWORD(v424) = (v74 + 1 + v125) >> 1;
          WORD3(v425) = (v78 + v123 + 1) >> 1;
          HIWORD(v425) = (v79 + v124 + 1) >> 1;
          if (v66)
          {
            int v130 = v379;
            if (v66 == 2)
            {
              LOWORD(v428) = (v419 + v70 + 1) >> 1;
              int v131 = v364;
              int v132 = v373;
              WORD4(v428) = (v401 + v95 + 1) >> 1;
              LOWORD(v429) = v77;
              WORD4(v429) = v80;
              if (v389 < 0x10) {
                goto LABEL_81;
              }
            }
            else
            {
              LOWORD(v428) = (v71 + v70 + v399 + v419 + 2) >> 2;
              int v132 = v373;
              int v131 = v364;
              WORD4(v428) = (v74 + v95 + v373 + v401 + 2) >> 2;
              LOWORD(v429) = v77;
              WORD4(v429) = v80;
              if (v389 < 0x10)
              {
LABEL_81:
                WORD1(v428) = (3 * v71 + v399 + 2) >> 2;
                WORD5(v428) = (3 * v74 + v132 + 2) >> 2;
                WORD1(v429) = (v405 + 3 * v77 + 2) >> 2;
                WORD5(v429) = (v403 + 3 * v80 + 2) >> 2;
                int v135 = v391;
                if (v391) {
                  goto LABEL_82;
                }
                goto LABEL_94;
              }
            }
          }
          else
          {
            LOWORD(v428) = (v128 + v399) >> 1;
            int v132 = v373;
            int v131 = v364;
            int v130 = v379;
            WORD4(v428) = (v129 + v373) >> 1;
            LOWORD(v429) = v77;
            WORD4(v429) = v80;
            if (v389 < 0x10) {
              goto LABEL_81;
            }
          }
          int v133 = 3 * (v419 + v70);
          if (v367 == 2)
          {
            WORD1(v428) = (v133 + 10 * v71 + 8) >> 4;
            WORD5(v428) = (3 * (v401 + v95) + 10 * v74 + 8) >> 4;
            WORD1(v429) = (3 * (v130 + v78) + 10 * v77 + 8) >> 4;
            int v134 = 3 * (v416 + v79) + 10 * v80;
          }
          else
          {
            WORD1(v428) = (9 * v71 + v399 + v133 + 8) >> 4;
            WORD5(v428) = (9 * v74 + v132 + 3 * (v401 + v95) + 8) >> 4;
            int v146 = 3 * (v130 + v78);
            int v130 = v379;
            WORD1(v429) = (9 * v77 + v405 + v146 + 8) >> 4;
            int v134 = 9 * v80 + v403 + 3 * (v416 + v79);
          }
          WORD5(v429) = (v134 + 8) >> 4;
          int v135 = v391;
          if (v391)
          {
LABEL_82:
            if (v135 == 2)
            {
              WORD2(v428) = v71;
              WORD6(v428) = v74;
              WORD2(v429) = (v130 + v78 + 1) >> 1;
              int v136 = v405;
              int v137 = v403;
              int v138 = v419;
              WORD6(v429) = (v416 + v79 + 1) >> 1;
              if (v392 < 0x10) {
                goto LABEL_95;
              }
            }
            else
            {
              WORD2(v428) = v71;
              WORD6(v428) = v74;
              int v136 = v405;
              WORD2(v429) = (v405 + v77 + v78 + v130 + 2) >> 2;
              int v137 = v403;
              int v138 = v419;
              WORD6(v429) = (v403 + v80 + v79 + v416 + 2) >> 2;
              if (v392 < 0x10) {
                goto LABEL_95;
              }
            }
            goto LABEL_86;
          }
LABEL_94:
          WORD2(v428) = v71;
          WORD6(v428) = v74;
          int v136 = v405;
          WORD2(v429) = (v405 + v77 + 1) >> 1;
          int v137 = v403;
          int v138 = v419;
          WORD6(v429) = (v403 + v80 + 1) >> 1;
          if (v392 < 0x10)
          {
LABEL_95:
            int v139 = v131;
            WORD3(v428) = (3 * v71 + v360 + 2) >> 2;
            HIWORD(v428) = (3 * v74 + v362 + 2) >> 2;
            WORD3(v429) = (v77 + 3 * v136 + 2) >> 2;
            HIWORD(v429) = (v80 + 3 * v137 + 2) >> 2;
            int v147 = v369 & 0xF;
            if ((v369 & 0xF) == 0) {
              goto LABEL_101;
            }
            goto LABEL_96;
          }
LABEL_86:
          int v139 = v131;
          int v140 = 3 * (v131 + v397);
          if (v368 == 2)
          {
            WORD3(v428) = (v140 + 10 * v71 + 8) >> 4;
            HIWORD(v428) = (3 * (v371 + v385) + 10 * v74 + 8) >> 4;
            WORD3(v429) = (3 * (v130 + v78) + 10 * v136 + 8) >> 4;
            int v141 = 3 * (v416 + v79) + 10 * v137;
          }
          else
          {
            WORD3(v428) = (9 * v71 + v360 + v140 + 8) >> 4;
            HIWORD(v428) = (9 * v74 + v362 + 3 * (v371 + v385) + 8) >> 4;
            WORD3(v429) = (v77 + 9 * v136 + 3 * (v130 + v78) + 8) >> 4;
            int v141 = v80 + 9 * v137 + 3 * (v416 + v79);
          }
          int v138 = v419;
          HIWORD(v429) = (v141 + 8) >> 4;
          int v147 = v369 & 0xF;
          if ((v369 & 0xF) == 0)
          {
LABEL_101:
            LOWORD(v432) = (3 * (v399 + v71) + 10 * v138 + 8) >> 4;
            int v151 = v401;
            WORD4(v432) = (3 * (v132 + v74) + 10 * v401 + 8) >> 4;
            LOWORD(v433) = (3 * (v321 + v130) + 10 * v77 + 8) >> 4;
            int v150 = v416;
            int v152 = 3 * (v325 + v416) + 10 * v80;
            goto LABEL_102;
          }
LABEL_96:
          if (v147 == 2)
          {
            LOWORD(v432) = (v70 + 3 * v138 + 2) >> 2;
            int v148 = v401;
            WORD4(v432) = (v95 + 3 * v401 + 2) >> 2;
            LOWORD(v433) = (3 * v77 + v318 + 2) >> 2;
            unsigned int v149 = (3 * v80 + v323 + 2) >> 2;
            int v150 = v416;
            goto LABEL_103;
          }
          LOWORD(v432) = (v70 + 9 * v138 + 3 * (v399 + v71) + 8) >> 4;
          int v151 = v401;
          WORD4(v432) = (v95 + 9 * v401 + 3 * (v132 + v74) + 8) >> 4;
          LOWORD(v433) = (9 * v77 + v318 + 3 * (v321 + v130) + 8) >> 4;
          int v150 = v416;
          int v152 = 9 * v80 + v323 + 3 * (v325 + v416);
LABEL_102:
          int v148 = v151;
          int v138 = v419;
          unsigned int v149 = (v152 + 8) >> 4;
LABEL_103:
          WORD4(v433) = v149;
          WORD1(v432) = (v128 + v138) >> 1;
          WORD5(v432) = (v129 + v148) >> 1;
          WORD1(v433) = (v77 + v130 + 1) >> 1;
          WORD5(v433) = (v80 + v150 + 1) >> 1;
          if ((v393 & 0xF) == 0)
          {
            WORD2(v432) = (3 * (v139 + v138) + 10 * v71 + 8) >> 4;
            int v154 = v371;
            WORD6(v432) = (3 * (v371 + v148) + 10 * v74 + 8) >> 4;
            WORD2(v433) = (3 * (v136 + v77) + 10 * v130 + 8) >> 4;
            int v155 = 3 * (v137 + v80) + 10 * v150;
LABEL_108:
            unsigned int v153 = (v155 + 8) >> 4;
            goto LABEL_109;
          }
          if ((v393 & 0xF) != 2)
          {
            WORD2(v432) = (9 * v71 + v328 + 3 * (v139 + v138) + 8) >> 4;
            int v154 = v371;
            WORD6(v432) = (9 * v74 + v330 + 3 * (v371 + v148) + 8) >> 4;
            WORD2(v433) = (v78 + 9 * v130 + 3 * (v136 + v77) + 8) >> 4;
            int v155 = v79 + 9 * v150 + 3 * (v137 + v80);
            goto LABEL_108;
          }
          WORD2(v432) = (3 * v71 + v328 + 2) >> 2;
          WORD6(v432) = (3 * v74 + v330 + 2) >> 2;
          WORD2(v433) = (v78 + 3 * v130 + 2) >> 2;
          unsigned int v153 = (v79 + 3 * v150 + 2) >> 2;
          int v154 = v371;
LABEL_109:
          WORD6(v433) = v153;
          WORD3(v432) = (v128 + v139) >> 1;
          HIWORD(v432) = (v129 + v154) >> 1;
          WORD3(v433) = (v136 + v130 + 1) >> 1;
          HIWORD(v433) = (v137 + v150 + 1) >> 1;
          int v156 = v415[3];
          int v157 = *(v407 - 3);
          int v158 = *v407;
          int v159 = v407[3];
          int v160 = *(v414 - 3);
          int v161 = *v414;
          int v162 = v414[3];
          int v163 = v158 + *v415;
          LOWORD(v422) = (v163 + 2 + *(v415 - 3) + v157) >> 2;
          WORD1(v422) = (v163 + 1) >> 1;
          WORD2(v422) = (v163 + 2 + v156 + v159) >> 2;
          WORD3(v422) = (v159 + 1 + v156) >> 1;
          LOWORD(v426) = (v158 + v157 + 1) >> 1;
          WORD1(v426) = v158;
          WORD2(v426) = (v159 + v158 + 1) >> 1;
          WORD3(v426) = v159;
          LOWORD(v430) = (v161 + 2 + v158 + v157 + v160) >> 2;
          WORD1(v430) = (v161 + 1 + v158) >> 1;
          WORD2(v430) = (v161 + 2 + v159 + v158 + v162) >> 2;
          WORD3(v430) = (v159 + 1 + v162) >> 1;
          LOWORD(v434) = (v161 + 1 + v160) >> 1;
          WORD1(v434) = v161;
          WORD2(v434) = (v161 + 1 + v162) >> 1;
          WORD3(v434) = v162;
          int v164 = v415[4];
          int v165 = *(v407 - 2);
          int v166 = v407[1];
          int v167 = v407[4];
          int v168 = *(v414 - 2);
          int v169 = v414[1];
          int v170 = v414[4];
          int v171 = v166 + v415[1];
          WORD4(v422) = (v171 + 2 + *(v415 - 2) + v165) >> 2;
          WORD5(v422) = (v171 + 1) >> 1;
          WORD6(v422) = (v171 + 2 + v164 + v167) >> 2;
          HIWORD(v422) = (v167 + 1 + v164) >> 1;
          WORD4(v426) = (v166 + v165 + 1) >> 1;
          WORD5(v426) = v166;
          WORD6(v426) = (v167 + v166 + 1) >> 1;
          HIWORD(v426) = v167;
          WORD4(v430) = (v169 + 2 + v166 + v165 + v168) >> 2;
          WORD5(v430) = (v169 + 1 + v166) >> 1;
          WORD6(v430) = (v169 + 2 + v167 + v166 + v170) >> 2;
          HIWORD(v430) = (v167 + 1 + v170) >> 1;
          WORD4(v434) = (v169 + 1 + v168) >> 1;
          WORD5(v434) = v169;
          WORD6(v434) = (v169 + 1 + v170) >> 1;
          HIWORD(v434) = v170;
          int v172 = v415[5];
          int v173 = *(v407 - 1);
          int v174 = v407[2];
          int v175 = v407[5];
          int v176 = *(v414 - 1);
          int v177 = v414[2];
          int v178 = v414[5];
          int v179 = v174 + v415[2];
          LOWORD(v423) = (v179 + 2 + *(v415 - 1) + v173) >> 2;
          WORD1(v423) = (v179 + 1) >> 1;
          WORD2(v423) = (v179 + 2 + v172 + v175) >> 2;
          WORD3(v423) = (v175 + 1 + v172) >> 1;
          LOWORD(v427) = (v174 + v173 + 1) >> 1;
          WORD1(v427) = v174;
          WORD2(v427) = (v175 + v174 + 1) >> 1;
          WORD3(v427) = v175;
          LOWORD(v431) = (v177 + 2 + v174 + v173 + v176) >> 2;
          WORD1(v431) = (v177 + 1 + v174) >> 1;
          WORD2(v431) = (v177 + 2 + v175 + v174 + v178) >> 2;
          WORD3(v431) = (v175 + 1 + v178) >> 1;
          LOWORD(v435) = (v177 + 1 + v176) >> 1;
          WORD1(v435) = v177;
          WORD2(v435) = (v177 + 1 + v178) >> 1;
          WORD3(v435) = v178;
          int v180 = v413[3];
          int v181 = *(v408 - 1);
          int v182 = v408[1];
          int v183 = v408[3];
          int v184 = *(v412 - 1);
          int v185 = v182 + v413[1];
          int v186 = v412[1];
          unsigned int v187 = v412[3];
          WORD4(v423) = (v185 + 2 + *(v413 - 1) + v181) >> 2;
          WORD5(v423) = (v185 + 1) >> 1;
          WORD6(v423) = (v185 + 2 + v180 + v183) >> 2;
          HIWORD(v423) = (v183 + 1 + v180) >> 1;
          WORD4(v427) = (v182 + v181 + 1) >> 1;
          WORD5(v427) = v182;
          WORD6(v427) = (v183 + v182 + 1) >> 1;
          HIWORD(v427) = v183;
          WORD4(v431) = (v186 + 2 + v182 + v181 + v184) >> 2;
          WORD5(v431) = (v186 + 1 + v182) >> 1;
          WORD6(v431) = (v186 + 2 + v183 + v182 + v187) >> 2;
          HIWORD(v431) = (v183 + 1 + v187) >> 1;
          WORD4(v435) = (v186 + 1 + v184) >> 1;
          WORD5(v435) = v186;
          WORD6(v435) = (v186 + 1 + v187) >> 1;
LABEL_150:
          uint64_t v248 = 0;
          HIWORD(v435) = v187;
          unint64_t v249 = &v420;
          uint64_t v250 = v411;
          uint64_t v251 = v410;
          uint64_t v252 = v409;
          do
          {
            for (uint64_t i = 0; i != 8; i += 2)
            {
              unsigned int v260 = (*(unsigned __int16 *)((char *)v249 + i) * *(unsigned __int16 *)((char *)v249 + i)
                    + 0x8000) >> 16;
              signed int v261 = (*(unsigned __int16 *)((char *)v249 + i + 8)
                    * *(unsigned __int16 *)((char *)v249 + i + 8)
                    + 0x8000) >> 16;
              int v262 = *(unsigned __int16 *)(v252 + i);
              int v263 = v262 - v261;
              unsigned int v264 = *(unsigned __int16 *)((char *)v249 + i + 40)
                   + ((*(unsigned __int16 *)((char *)v249 + i + 40) - 1) >> 31);
              int v265 = ((int)(8389 * v260 - 25164952) >> 12) & ~((int)(8389 * v260 - 25164952) >> 31);
              signed int v266 = (((4096 - v265) & ((4096 - v265) >> 31)) + v265)
                   * (((*(unsigned __int16 *)((char *)v249 + i + 32) << 16) / v264 + 2048) >> 12);
              if (v266 >= 0x10000)
              {
                if (v266 > 0x20000)
                {
                  int v267 = (v47 * v261 + 0x8000) >> 16;
                  if (v261 >= v36) {
                    int v267 = 0x4000;
                  }
                  int v268 = (v267 * v261 + 0x8000) >> 16;
                  if (-v268 > ((v268 - v263) & ((v268 - v263) >> 31)) + v263) {
                    int v263 = -v268;
                  }
                  else {
                    v263 += (v268 - v263) & ((v268 - v263) >> 31);
                  }
                }
              }
              else
              {
                signed int v266 = 0x10000;
              }
              unsigned int v269 = (*(unsigned __int16 *)((char *)v249 + i + 16)
                    * *(unsigned __int16 *)((char *)v249 + i + 16)
                    + 0x8000) >> 16;
              signed int v270 = (*(unsigned __int16 *)((char *)v249 + i + 24)
                    * *(unsigned __int16 *)((char *)v249 + i + 24)
                    + 0x8000) >> 16;
              int v271 = v262 - v270;
              int v272 = ((int)(8389 * v269 - 25164952) >> 12) & ~((int)(8389 * v269 - 25164952) >> 31);
              signed int v254 = (((4096 - v272) & ((4096 - v272) >> 31)) + v272)
                   * (((*(unsigned __int16 *)((char *)v249 + i + 48) << 16) / v264 + 2048) >> 12);
              if (v254 < 0x10000)
              {
                signed int v254 = 0x10000;
              }
              else if (v254 > 0x20000)
              {
                int v273 = (v47 * v270 + 0x8000) >> 16;
                if (v270 >= v36) {
                  int v273 = 0x4000;
                }
                int v274 = (v273 * v270 + 0x8000) >> 16;
                if (-v274 > ((v274 - v271) & ((v274 - v271) >> 31)) + v271) {
                  int v271 = -v274;
                }
                else {
                  v271 += (v274 - v271) & ((v274 - v271) >> 31);
                }
              }
              int v255 = (49152 - *(unsigned __int16 *)((char *)v249 + i + 56)) & ~((49152
                                                                               - *(unsigned __int16 *)((char *)v249 + i + 56)) >> 31);
              unsigned int v256 = ((((0x8000 - v255) & ((0x8000 - v255) >> 31)) + v255) * ((v266 + 2) >> 2) + 0x4000) >> 15;
              int v257 = (v260 + ((int)(v256 * v263 + 0x2000) >> 14)) & ~((int)(v260 + ((int)(v256 * v263 + 0x2000) >> 14)) >> 31);
              if (v257 >= 0xFFFF) {
                LOWORD(v257) = -1;
              }
              *(_WORD *)(v250 + i) = v257;
              int v258 = v269 + ((int)(((v254 + 2) >> 2) * v271 + 0x2000) >> 14);
              int v259 = v258 & ~(v258 >> 31);
              if (v259 >= 0xFFFF) {
                LOWORD(v259) = -1;
              }
              *(_WORD *)(v251 + i) = v259;
            }
            v249 += 4;
            ++v248;
            v252 += v49;
            v251 += v49;
            v250 += v49;
          }
          while (v248 != 4);
          uint64_t v58 = v395 + 4;
          uint64_t result = v396 + 4;
          uint64_t v33 = v394 + 2;
          v415 += 6;
          v407 += 6;
          v414 += 6;
          v413 += 4;
          v408 += 4;
          v412 += 4;
          v409 += 8;
          v410 += 8;
          v411 += 8;
        }
        while (v395 + 4 < v353);
        uint64_t v28 = v303 + 4;
        uint64_t v29 = v302 + v294;
        uint64_t v30 = v301 + v294;
        uint64_t v31 = v300 + v294;
        uint64_t v14 = v288;
        uint64_t v32 = v299 + 2 * v292;
        uint64_t v46 = v298 + 2 * v291;
        uint64_t v33 = &v297[4 * v355];
        uint64_t v48 = &v296[(unint64_t)v294 / 2];
        v306 += v288;
        v304 += v288;
        uint64_t v305 = (unsigned __int16 *)((char *)v305 + v294);
        uint64_t result = v295;
        uint64_t v13 = v289;
        unint64_t v2 = v290;
        if (v303 + 4 >= v293) {
          return result;
        }
      }
    }
    unint64_t v275 = 0;
    uint64_t v276 = (v15 | (8 * v9)) + v6 + 6;
    uint64_t v277 = (v15 | (8 * v4)) + v3 + 6;
    uint64_t v278 = v15 + 10 * v9 + v6 + 6;
    uint64_t v279 = v15 + 10 * v4 + v3 + 6;
    do
    {
      unint64_t v280 = 0;
      int v281 = (_WORD *)v277;
      uint64_t v282 = (unsigned __int16 *)v276;
      do
      {
        *(v281 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v281 - 2));
        *int v281 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v281);
        *(v281 - 3) = *(_WORD *)(v13 + 2 * *(v282 - 2));
        unsigned int v283 = *v282;
        v282 += 4;
        *(v281 - 1) = *(_WORD *)(v13 + 2 * v283);
        v280 += 4;
        v281 += 4;
      }
      while (v280 < 8);
      unint64_t v284 = 0;
      unint64_t v285 = (_WORD *)v279;
      uint64_t v286 = (unsigned __int16 *)v278;
      do
      {
        *(v285 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v285 - 2));
        *unint64_t v285 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v285);
        *(v285 - 3) = *(_WORD *)(v13 + 2 * *(v286 - 2));
        unsigned int v287 = *v286;
        v286 += 4;
        *(v285 - 1) = *(_WORD *)(v13 + 2 * v287);
        v284 += 4;
        v285 += 4;
      }
      while (v284 < 8);
      v275 += 4;
      v276 += v294;
      v277 += v14;
      v278 += v294;
      v279 += v14;
    }
    while (v275 < v293);
  }
  return result;
}

uint64_t sub_1DDB34388(uint64_t result, void *a2)
{
  int v169 = *(_DWORD *)(result + 156);
  unint64_t v172 = a2[223];
  unint64_t v2 = a2[224];
  uint64_t v3 = a2[225];
  unint64_t v4 = a2[226];
  uint64_t v5 = (_WORD *)a2[227];
  uint64_t v149 = a2[228];
  uint64_t v6 = a2[231];
  uint64_t v7 = a2[232];
  uint64_t v8 = a2[233];
  uint64_t v9 = a2[235];
  uint64_t v151 = a2[236];
  uint64_t v152 = a2[234];
  uint64_t v10 = a2[237];
  uint64_t v150 = a2[238];
  uint64_t v11 = *(void *)(result + 2352);
  uint64_t v12 = *(void *)(result + 2360);
  uint64_t v13 = *(void *)(result + 2368);
  int v165 = *(_DWORD *)(result + 2376);
  int v164 = *(_DWORD *)(result + 2380);
  int v168 = *(_DWORD *)(result + 2384);
  int v163 = *(_DWORD *)(result + 2388);
  int v162 = *(_DWORD *)(result + 2392);
  int v161 = *(_DWORD *)(result + 2396);
  int v167 = *(_DWORD *)(result + 2400);
  int v160 = *(_DWORD *)(result + 2404);
  int v166 = *(_DWORD *)(result + 2408);
  int v159 = *(_DWORD *)(result + 2412);
  uint64_t v14 = *(void *)(result + 2336);
  long long v175 = 0u;
  long long v176 = 0u;
  long long v173 = 0u;
  long long v174 = 0u;
  if (v2)
  {
    if (v172)
    {
      uint64_t v15 = 0;
      LODWORD(v170) = 0;
      unint64_t v16 = (unsigned __int16 *)(v6 + 2 * v3 + v152 * v4);
      uint64_t v17 = (unsigned __int16 *)(v7 + 2 * v3 + v152 * v4);
      uint32x4_t v18 = (unsigned __int16 *)(v8 + 2 * v3 + v152 * v4);
      unint64_t v19 = v4 >> 1;
      unint64_t v20 = v3 & 0xFFFFFFFFFFFFFFFELL;
      uint16x8_t v21 = (unsigned __int16 *)(v9 + v151 * v19 + 3 * v20);
      uint64_t v22 = (unsigned __int16 *)(v10 + v150 * v19 + 2 * v20);
      unint64_t v148 = v2;
      while (1)
      {
        LODWORD(v25) = 0;
        uint16x4_t v26 = (unsigned __int16 *)((char *)v21 - v151);
        int v171 = (unsigned __int16 *)((char *)v22 - v150);
        int v157 = v16;
        int v158 = v5;
        unsigned int v27 = v5;
        int v155 = v18;
        int v156 = v17;
        unsigned int v153 = v22;
        int v154 = v21;
        do
        {
          if ((v25 & 7) == 0)
          {
            if (v169 == 4)
            {
              int v34 = *v21;
              if ((v170 & 1) == 0)
              {
                unsigned int v35 = v34 + *v26 + 1;
                LOWORD(v173) = v35 >> 1;
                unsigned int v36 = v21[3] + v26[3] + 1;
                WORD1(v173) = (v36 + v35) >> 2;
                WORD2(v173) = v36 >> 1;
                unsigned int v37 = v21[6] + v26[6] + 1;
                WORD3(v173) = (v37 + v36) >> 2;
                WORD4(v173) = v37 >> 1;
                unsigned int v38 = v21[9] + v26[9] + 1;
                WORD5(v173) = (v38 + v37) >> 2;
                WORD6(v173) = v38 >> 1;
                HIWORD(v173) = (v38 + v21[12] + v26[12] + 1) >> 2;
                unsigned int v39 = v21[1] + v26[1] + 1;
                LOWORD(v174) = v39 >> 1;
                unsigned int v40 = v21[4] + v26[4] + 1;
                WORD1(v174) = (v40 + v39) >> 2;
                WORD2(v174) = v40 >> 1;
                unsigned int v41 = v21[7] + v26[7] + 1;
                WORD3(v174) = (v41 + v40) >> 2;
                WORD4(v174) = v41 >> 1;
                unsigned int v42 = v21[10] + v26[10] + 1;
                WORD5(v174) = (v42 + v41) >> 2;
                WORD6(v174) = v42 >> 1;
                HIWORD(v174) = (v42 + v21[13] + v26[13] + 1) >> 2;
                unsigned int v43 = v21[2] + v26[2] + 1;
                LOWORD(v175) = v43 >> 1;
                unsigned int v44 = v21[5] + v26[5] + 1;
                WORD1(v175) = (v44 + v43) >> 2;
                WORD2(v175) = v44 >> 1;
                unsigned int v45 = v21[8] + v26[8] + 1;
                WORD3(v175) = (v45 + v44) >> 2;
                WORD4(v175) = v45 >> 1;
                unsigned int v46 = v21[11] + v26[11] + 1;
                WORD5(v175) = (v46 + v45) >> 2;
                WORD6(v175) = v46 >> 1;
                HIWORD(v175) = (v46 + v21[14] + v26[14] + 1) >> 2;
                int v47 = v171;
                unsigned int v48 = v22[1] + v171[1] + 1;
                unsigned int v33 = (unsigned __int16)(v48 >> 1);
                LOWORD(v176) = v48 >> 1;
                unsigned int v49 = v22[3] + v171[3] + 1;
                WORD1(v176) = (v49 + v48) >> 2;
                WORD2(v176) = v49 >> 1;
                unsigned int v50 = v22[5] + v171[5] + 1;
                WORD3(v176) = (v50 + v49) >> 2;
                WORD4(v176) = v50 >> 1;
                unsigned int v51 = v22[7] + v171[7] + 1;
                WORD5(v176) = (v51 + v50) >> 2;
                WORD6(v176) = v51 >> 1;
                unsigned int v52 = (v51 + v22[9] + v171[9] + 1) >> 2;
LABEL_25:
                v21 += 12;
                HIWORD(v176) = v52;
                v26 += 12;
                v22 += 8;
                int v171 = v47 + 8;
                uint64_t v15 = (unsigned __int16 *)&v173;
                goto LABEL_26;
              }
              LOWORD(v173) = *v21;
              int v71 = v21[3];
              WORD1(v173) = (v71 + 1 + v34) >> 1;
              WORD2(v173) = v71;
              int v72 = v21[6];
              WORD3(v173) = (v71 + 1 + v72) >> 1;
              WORD4(v173) = v72;
              int v73 = v21[9];
              WORD5(v173) = (v72 + v73 + 1) >> 1;
              WORD6(v173) = v73;
              HIWORD(v173) = (v73 + v21[12] + 1) >> 1;
              LOWORD(v174) = v21[1];
              int v74 = v21[4];
              WORD1(v174) = (v74 + 1 + (unsigned __int16)v174) >> 1;
              WORD2(v174) = v74;
              int v75 = v21[7];
              WORD3(v174) = (v74 + 1 + v75) >> 1;
              WORD4(v174) = v75;
              int v76 = v21[10];
              WORD5(v174) = (v75 + v76 + 1) >> 1;
              WORD6(v174) = v76;
              HIWORD(v174) = (v76 + v21[13] + 1) >> 1;
              LOWORD(v175) = v21[2];
              int v77 = v21[5];
              WORD1(v175) = (v77 + 1 + (unsigned __int16)v175) >> 1;
              WORD2(v175) = v77;
              int v78 = v21[8];
              WORD3(v175) = (v77 + 1 + v78) >> 1;
              WORD4(v175) = v78;
              int v79 = v21[11];
              WORD5(v175) = (v78 + v79 + 1) >> 1;
              WORD6(v175) = v79;
              HIWORD(v175) = (v79 + v21[14] + 1) >> 1;
              LOWORD(v176) = v22[1];
              unsigned int v33 = (unsigned __int16)v176;
              int v80 = v22[3];
              int v81 = v80 + 1;
              WORD1(v176) = (v80 + 1 + (unsigned __int16)v176) >> 1;
              WORD2(v176) = v80;
              int v82 = v22[5];
              WORD3(v176) = (v81 + v82) >> 1;
              WORD4(v176) = v82;
              int v83 = v22[7];
              WORD5(v176) = (v82 + v83 + 1) >> 1;
              WORD6(v176) = v83;
              unsigned int v52 = (v83 + v22[9] + 1) >> 1;
            }
            else
            {
              int v53 = *(v21 - 3);
              if ((v170 & 1) == 0)
              {
                unsigned int v54 = *v21 + *v26 + 1;
                LOWORD(v173) = (v53 + *(v26 - 3) + v54 + 1) >> 2;
                WORD1(v173) = v54 >> 1;
                unsigned int v55 = v21[3] + v26[3] + 1;
                WORD2(v173) = (v55 + v54) >> 2;
                WORD3(v173) = v55 >> 1;
                unsigned int v56 = v21[6] + v26[6] + 1;
                WORD4(v173) = (v56 + v55) >> 2;
                WORD5(v173) = v56 >> 1;
                unsigned int v57 = v21[9] + v26[9] + 1;
                WORD6(v173) = (v57 + v56) >> 2;
                HIWORD(v173) = v57 >> 1;
                unsigned int v58 = v21[1] + v26[1] + 1;
                LOWORD(v174) = (*(v21 - 2) + *(v26 - 2) + v58 + 1) >> 2;
                WORD1(v174) = v58 >> 1;
                unsigned int v59 = v21[4] + v26[4] + 1;
                WORD2(v174) = (v59 + v58) >> 2;
                WORD3(v174) = v59 >> 1;
                unsigned int v60 = v21[7] + v26[7] + 1;
                WORD4(v174) = (v60 + v59) >> 2;
                WORD5(v174) = v60 >> 1;
                unsigned int v61 = v21[10] + v26[10] + 1;
                WORD6(v174) = (v61 + v60) >> 2;
                HIWORD(v174) = v61 >> 1;
                unsigned int v62 = v21[2] + v26[2] + 1;
                LOWORD(v175) = (*(v21 - 1) + *(v26 - 1) + v62 + 1) >> 2;
                WORD1(v175) = v62 >> 1;
                unsigned int v63 = v21[5] + v26[5] + 1;
                WORD2(v175) = (v63 + v62) >> 2;
                WORD3(v175) = v63 >> 1;
                unsigned int v64 = v21[8] + v26[8] + 1;
                WORD4(v175) = (v64 + v63) >> 2;
                WORD5(v175) = v64 >> 1;
                unsigned int v65 = v21[11] + v26[11] + 1;
                WORD6(v175) = (v65 + v64) >> 2;
                HIWORD(v175) = v65 >> 1;
                int v47 = v171;
                unsigned int v66 = v22[1] + v171[1] + 1;
                unsigned int v67 = *(v22 - 1) + *(v171 - 1) + v66 + 1;
                unsigned int v33 = (unsigned __int16)(v67 >> 2);
                LOWORD(v176) = v67 >> 2;
                WORD1(v176) = v66 >> 1;
                unsigned int v68 = v22[3] + v171[3] + 1;
                WORD2(v176) = (v68 + v66) >> 2;
                WORD3(v176) = v68 >> 1;
                unsigned int v69 = v22[5] + v171[5] + 1;
                WORD4(v176) = (v69 + v68) >> 2;
                WORD5(v176) = v69 >> 1;
                unsigned int v70 = v22[7] + v171[7] + 1;
                WORD6(v176) = (v70 + v69) >> 2;
                unsigned int v52 = v70 >> 1;
                goto LABEL_25;
              }
              int v84 = *v21;
              LOWORD(v173) = (v84 + 1 + v53) >> 1;
              WORD1(v173) = v84;
              int v85 = v21[3];
              WORD2(v173) = (v84 + 1 + v85) >> 1;
              WORD3(v173) = v85;
              int v86 = v21[6];
              WORD4(v173) = (v85 + v86 + 1) >> 1;
              WORD5(v173) = v86;
              int v87 = v21[9];
              WORD6(v173) = (v86 + v87 + 1) >> 1;
              HIWORD(v173) = v87;
              int v88 = v21[1];
              LOWORD(v174) = (v88 + 1 + *(v21 - 2)) >> 1;
              WORD1(v174) = v88;
              int v89 = v21[4];
              WORD2(v174) = (v88 + 1 + v89) >> 1;
              WORD3(v174) = v89;
              int v90 = v21[7];
              WORD4(v174) = (v89 + v90 + 1) >> 1;
              WORD5(v174) = v90;
              int v91 = v21[10];
              WORD6(v174) = (v90 + v91 + 1) >> 1;
              HIWORD(v174) = v91;
              int v92 = v21[2];
              LOWORD(v175) = (v92 + 1 + *(v21 - 1)) >> 1;
              WORD1(v175) = v92;
              int v93 = v21[5];
              WORD2(v175) = (v92 + 1 + v93) >> 1;
              WORD3(v175) = v93;
              int v94 = v21[8];
              WORD4(v175) = (v93 + v94 + 1) >> 1;
              WORD5(v175) = v94;
              int v95 = v21[11];
              WORD6(v175) = (v94 + v95 + 1) >> 1;
              HIWORD(v175) = v95;
              int v96 = v22[1];
              unsigned int v97 = v96 + 1 + *(v22 - 1);
              unsigned int v33 = (unsigned __int16)(v97 >> 1);
              LOWORD(v176) = v97 >> 1;
              WORD1(v176) = v96;
              int v98 = v22[3];
              WORD2(v176) = (v96 + 1 + v98) >> 1;
              WORD3(v176) = v98;
              int v99 = v22[5];
              WORD4(v176) = (v98 + v99 + 1) >> 1;
              WORD5(v176) = v99;
              unsigned int v52 = v22[7];
              WORD6(v176) = (v99 + v52 + 1) >> 1;
            }
            int v47 = v171;
            goto LABEL_25;
          }
          unsigned int v33 = v15[24];
LABEL_26:
          unsigned int v100 = *v17;
          unsigned int v101 = (2417 * v100 + 1229 * *v16 + 450 * *v18 + 2048) >> 12;
          int v102 = *v15;
          int v103 = v15[8];
          int v104 = v15[16];
          unint64_t v105 = (unint64_t)(2417 * v103 + 1229 * v102 + 450 * v104 + 2048) >> 12;
          if (v33 >> 4 > 0x270) {
            goto LABEL_36;
          }
          int v106 = *(unsigned __int16 *)(v13 + 2 * *v15);
          int v107 = *(unsigned __int16 *)(v13 + 2 * v15[8]);
          int v108 = *(unsigned __int16 *)(v13 + 2 * v15[16]);
          int v109 = (v107 - v106) & ((v107 - v106) >> 31);
          int v110 = v109 + v106;
          int v111 = v109 - v107;
          int v112 = ((v108 - v110) & ((v108 - v110) >> 31)) + v110;
          if (v108 > v110) {
            int v110 = *(unsigned __int16 *)(v13 + 2 * v15[16]);
          }
          unsigned int v113 = v110 - ((v111 + v110) & ((v111 + v110) >> 31));
          int v114 = 2 * (v113 - v112) - v112;
          if (v114 < 1)
          {
LABEL_36:
            unsigned int v117 = ((0x80000u >> *(unsigned char *)(v12 + v105))
                  + (((1 << (*(unsigned char *)(v12 + v105) - 1)) + *(_DWORD *)(v11 + 4 * v105)) >> *(unsigned char *)(v12 + v105))
                  * v101) >> (20 - *(unsigned char *)(v12 + v105));
            goto LABEL_37;
          }
          if (v113 == v108)
          {
            if (v102 < v168) {
              goto LABEL_36;
            }
            int v115 = ((v102 - v168) * v165) >> v164;
            if (v163 <= v102) {
              int v115 = 0x10000;
            }
            unsigned int v100 = *v16;
            int v116 = *v15;
          }
          else
          {
            if (v103 < v167) {
              goto LABEL_36;
            }
            int v115 = ((v103 - v167) * v162) >> v161;
            if (v160 <= v103) {
              int v115 = 0x10000;
            }
            int v116 = v15[8];
          }
          if (v100 < 0x100) {
            int v115 = (int)(v115 * v100) >> 8;
          }
          if (v114 < v113 >> 1) {
            int v115 = ((v114 << 11) / (int)v113 * v115 + 512) >> 10;
          }
          int v135 = (v115 * v166 + 0x8000) >> 16;
          int v136 = v135 * (v100 - v101) + 2048;
          int v137 = v105 + ((v135 * (v116 - (int)v105) + 2048) >> 12);
          unsigned int v117 = ((0x80000u >> *(unsigned char *)(v12 + v137))
                + (v101 + (v136 >> 12))
                * (((1 << (*(unsigned char *)(v12 + v137) - 1)) + *(_DWORD *)(v11 + 4 * v137)) >> *(unsigned char *)(v12 + v137))) >> (20 - *(unsigned char *)(v12 + v137));
          signed int v138 = ((0x80000u >> *(unsigned char *)(v12 + v105))
                + (((1 << (*(unsigned char *)(v12 + v105) - 1)) + *(_DWORD *)(v11 + 4 * v105)) >> *(unsigned char *)(v12 + v105))
                * v101) >> (20 - *(unsigned char *)(v12 + v105));
          if (v138 != v117)
          {
            signed int v139 = v138;
            if (v138 >= 66000)
            {
              do
              {
                unsigned int v117 = (int)(v117 + 1) >> 1;
                BOOL v140 = v139 > 0x2039E;
                signed int v139 = (v139 + 1) >> 1;
              }
              while (v140);
            }
            unsigned int v141 = ((0x80000u >> *(unsigned char *)(v12 + v139))
                  + ((*(_DWORD *)(v11 + 4 * v139) + (1 << *(unsigned char *)(v12 + v139) >> 1)) >> *(unsigned char *)(v12 + v139))
                  * v117) >> (20 - *(unsigned char *)(v12 + v139));
            int v143 = v141 - 4096;
            BOOL v142 = (int)(v141 - 4096) < 0;
            int v144 = 4096 - v141;
            if (!v142) {
              int v144 = v143;
            }
            unsigned int v117 = (int)((((((v159 - v144) & ((v159 - v144) >> 31)) + v144) ^ (v143 >> 31))
                        + (v143 >> 31)
                        + 4096)
                       * v138
                       + 2048) >> 12;
          }
LABEL_37:
          int v118 = (int)(v117 * v103 + 2048) >> 14;
          int v119 = ((int)(v117 * v102 + 2048) >> 14) * *(_DWORD *)(result + 2288);
          int v28 = v119 >> 10;
          int v120 = v118 * *(_DWORD *)(result + 2304);
          int v29 = v120 >> 10;
          int v121 = ((int)(v117 * v104 + 2048) >> 14) * *(_DWORD *)(result + 2320);
          int v30 = v121 >> 10;
          if (((v119 >> 10) | (v120 >> 10) | (v121 >> 10)) < 0x10000) {
            goto LABEL_14;
          }
          if (v29 >= v28) {
            int v122 = v119 >> 10;
          }
          else {
            int v122 = v120 >> 10;
          }
          if (v29 <= v28) {
            int v123 = v119 >> 10;
          }
          else {
            int v123 = v120 >> 10;
          }
          if (v30 >= v122) {
            int v124 = v122;
          }
          else {
            int v124 = v121 >> 10;
          }
          if (v30 <= v123) {
            int v125 = v123;
          }
          else {
            int v125 = v121 >> 10;
          }
          if ((v125 & 0x80000000) == 0 && v124 < 0x10000)
          {
            if (v119 >= 0) {
              int v126 = 0xFFFF;
            }
            else {
              int v126 = 0;
            }
            if (!(v119 >> 26)) {
              int v126 = v119 >> 10;
            }
            if (v120 >= 0) {
              int v127 = 0xFFFF;
            }
            else {
              int v127 = 0;
            }
            if (!(v120 >> 26)) {
              int v127 = v120 >> 10;
            }
            if (v121 >= 0) {
              int v128 = 0xFFFF;
            }
            else {
              int v128 = 0;
            }
            if (v121 >> 26) {
              int v129 = v128;
            }
            else {
              int v129 = v121 >> 10;
            }
            unsigned int v130 = v127 + 341 * (v126 + v127 + v129);
            unsigned int v131 = (v130 + 512) >> 10;
            if (v130 >= 0x1FFFA00) {
              unsigned int v132 = (v130 + 512) >> 10;
            }
            else {
              unsigned int v132 = 0xFFFF - v131;
            }
            unsigned int v133 = (((v132 + 2) >> 2) * v131 + 0x2000) >> 14;
            if (v125 < 0x10000)
            {
              int v134 = 4096;
              if (v124 < 0)
              {
LABEL_78:
                if (v134 >= (int)(float)((float)(int)(-4096 * v133) / (float)(int)(v124 - v133))) {
                  int v134 = (int)(float)((float)(int)(-4096 * v133) / (float)(int)(v124 - v133));
                }
              }
            }
            else
            {
              if ((int)(float)((float)(int)(268431360 - (v133 << 12)) / (float)(int)(v125 - v133)) >= 4096) {
                int v134 = 4096;
              }
              else {
                int v134 = (int)(float)((float)(int)(268431360 - (v133 << 12)) / (float)(int)(v125 - v133));
              }
              if (v124 < 0) {
                goto LABEL_78;
              }
            }
            int v28 = v133 + ((int)(v134 * (v28 - v133) + 2048) >> 12);
            int v29 = v133 + ((int)(v134 * (v29 - v133) + 2048) >> 12);
            int v30 = v133 + ((int)(v134 * (v30 - v133) + 2048) >> 12);
            goto LABEL_14;
          }
          if (v125 >= 0) {
            int v28 = 0xFFFF;
          }
          else {
            int v28 = 0;
          }
          int v29 = v28;
          int v30 = v28;
LABEL_14:
          __int16 v31 = *(_WORD *)(v14 + 2 * v29);
          __int16 v32 = *(_WORD *)(v14 + 2 * v30);
          *unsigned int v27 = *(_WORD *)(v14 + 2 * v28);
          ++v15;
          unint64_t v25 = (v25 + 1);
          ++v16;
          v27[1] = v31;
          v27[2] = v32;
          ++v17;
          ++v18;
          v27 += 3;
        }
        while (v172 > v25);
        uint64_t v23 = v151;
        if ((v170 & 1) == 0) {
          uint64_t v23 = 0;
        }
        uint16x8_t v21 = (unsigned __int16 *)((char *)v154 + v23);
        uint64_t v24 = v150;
        if ((v170 & 1) == 0) {
          uint64_t v24 = 0;
        }
        uint64_t v22 = (unsigned __int16 *)((char *)v153 + v24);
        unint64_t v16 = (unsigned __int16 *)((char *)v157 + v152);
        uint64_t v17 = (unsigned __int16 *)((char *)v156 + v152);
        uint32x4_t v18 = (unsigned __int16 *)((char *)v155 + v152);
        uint64_t v5 = (_WORD *)((char *)v158 + v149);
        unint64_t v170 = (v170 + 1);
        if (v148 <= v170) {
          return result;
        }
      }
    }
    if (v2 < 2)
    {
      int v145 = 0;
LABEL_102:
      unsigned int v147 = v145 + 1;
      do
        BOOL v140 = v2 > v147++;
      while (v140);
      return result;
    }
    int v145 = 0;
    if (!v2) {
      goto LABEL_102;
    }
    if ((v2 - 1) >> 32) {
      goto LABEL_102;
    }
    int v145 = v2 & 0xFFFFFFFE;
    int v146 = v2 & 0xFFFFFFFE;
    do
      v146 -= 2;
    while (v146);
    if (v145 != v2) {
      goto LABEL_102;
    }
  }
  return result;
}

int32x2_t *sub_1DDB352C0(int32x2_t *result, void *a2)
{
  __int32 v167 = result[19].i32[1];
  unint64_t v170 = a2[223];
  unint64_t v2 = a2[224];
  uint64_t v3 = a2[225];
  unint64_t v4 = a2[226];
  uint64_t v5 = (_WORD *)a2[227];
  uint64_t v147 = a2[228];
  uint64_t v6 = a2[231];
  uint64_t v7 = a2[232];
  uint64_t v8 = a2[233];
  uint64_t v150 = a2[234];
  uint64_t v9 = a2[235];
  uint64_t v149 = a2[236];
  uint64_t v10 = a2[237];
  uint64_t v148 = a2[238];
  int32x2_t v11 = result[294];
  int32x2_t v12 = result[295];
  int32x2_t v13 = result[296];
  __int32 v163 = result[297].i32[0];
  __int32 v162 = result[297].i32[1];
  __int32 v166 = result[298].i32[0];
  __int32 v161 = result[298].i32[1];
  __int32 v160 = result[299].i32[0];
  __int32 v159 = result[299].i32[1];
  __int32 v165 = result[300].i32[0];
  __int32 v158 = result[300].i32[1];
  __int32 v164 = result[301].i32[0];
  __int32 v157 = result[301].i32[1];
  int32x2_t v14 = result[292];
  long long v173 = 0u;
  long long v174 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  if (v2)
  {
    if (v170)
    {
      uint64_t v15 = 0;
      LODWORD(v168) = 0;
      unint64_t v16 = (int32x2_t *)((char *)result + 2300);
      uint64_t v17 = (unsigned __int16 *)(v6 + 2 * v3 + v150 * v4);
      uint32x4_t v18 = (unsigned __int16 *)(v7 + 2 * v3 + v150 * v4);
      unint64_t v19 = (unsigned __int16 *)(v8 + 2 * v3 + v150 * v4);
      unint64_t v20 = v4 >> 1;
      unint64_t v21 = v3 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v22 = (unsigned __int16 *)(v9 + v149 * v20 + 3 * v21);
      uint64_t v23 = (unsigned __int16 *)(v10 + v148 * v20 + 2 * v21);
      unint64_t v146 = v2;
      while (1)
      {
        LODWORD(v26) = 0;
        unsigned int v27 = (unsigned __int16 *)((char *)v22 - v149);
        int v169 = (unsigned __int16 *)((char *)v23 - v148);
        int v155 = v17;
        int v156 = v5;
        int v28 = v5;
        unsigned int v153 = v19;
        int v154 = v18;
        uint64_t v151 = v23;
        uint64_t v152 = v22;
        do
        {
          if ((v26 & 7) == 0)
          {
            if (v167 == 4)
            {
              int v34 = *v22;
              if ((v168 & 1) == 0)
              {
                unsigned int v35 = v34 + *v27 + 1;
                LOWORD(v171) = v35 >> 1;
                unsigned int v36 = v22[3] + v27[3] + 1;
                WORD1(v171) = (v36 + v35) >> 2;
                WORD2(v171) = v36 >> 1;
                unsigned int v37 = v22[6] + v27[6] + 1;
                WORD3(v171) = (v37 + v36) >> 2;
                WORD4(v171) = v37 >> 1;
                unsigned int v38 = v22[9] + v27[9] + 1;
                WORD5(v171) = (v38 + v37) >> 2;
                WORD6(v171) = v38 >> 1;
                HIWORD(v171) = (v38 + v22[12] + v27[12] + 1) >> 2;
                unsigned int v39 = v22[1] + v27[1] + 1;
                LOWORD(v172) = v39 >> 1;
                unsigned int v40 = v22[4] + v27[4] + 1;
                WORD1(v172) = (v40 + v39) >> 2;
                WORD2(v172) = v40 >> 1;
                unsigned int v41 = v22[7] + v27[7] + 1;
                WORD3(v172) = (v41 + v40) >> 2;
                WORD4(v172) = v41 >> 1;
                unsigned int v42 = v22[10] + v27[10] + 1;
                WORD5(v172) = (v42 + v41) >> 2;
                WORD6(v172) = v42 >> 1;
                HIWORD(v172) = (v42 + v22[13] + v27[13] + 1) >> 2;
                unsigned int v43 = v22[2] + v27[2] + 1;
                LOWORD(v173) = v43 >> 1;
                unsigned int v44 = v22[5] + v27[5] + 1;
                WORD1(v173) = (v44 + v43) >> 2;
                WORD2(v173) = v44 >> 1;
                unsigned int v45 = v22[8] + v27[8] + 1;
                WORD3(v173) = (v45 + v44) >> 2;
                WORD4(v173) = v45 >> 1;
                unsigned int v46 = v22[11] + v27[11] + 1;
                WORD5(v173) = (v46 + v45) >> 2;
                WORD6(v173) = v46 >> 1;
                HIWORD(v173) = (v46 + v22[14] + v27[14] + 1) >> 2;
                int v47 = v169;
                unsigned int v48 = v23[1] + v169[1] + 1;
                unsigned int v33 = (unsigned __int16)(v48 >> 1);
                LOWORD(v174) = v48 >> 1;
                unsigned int v49 = v23[3] + v169[3] + 1;
                WORD1(v174) = (v49 + v48) >> 2;
                WORD2(v174) = v49 >> 1;
                unsigned int v50 = v23[5] + v169[5] + 1;
                WORD3(v174) = (v50 + v49) >> 2;
                WORD4(v174) = v50 >> 1;
                unsigned int v51 = v23[7] + v169[7] + 1;
                WORD5(v174) = (v51 + v50) >> 2;
                WORD6(v174) = v51 >> 1;
                unsigned int v52 = (v51 + v23[9] + v169[9] + 1) >> 2;
LABEL_25:
                v22 += 12;
                HIWORD(v174) = v52;
                v27 += 12;
                v23 += 8;
                int v169 = v47 + 8;
                uint64_t v15 = (unsigned __int16 *)&v171;
                goto LABEL_26;
              }
              LOWORD(v171) = *v22;
              int v71 = v22[3];
              WORD1(v171) = (v71 + 1 + v34) >> 1;
              WORD2(v171) = v71;
              int v72 = v22[6];
              WORD3(v171) = (v71 + 1 + v72) >> 1;
              WORD4(v171) = v72;
              int v73 = v22[9];
              WORD5(v171) = (v72 + v73 + 1) >> 1;
              WORD6(v171) = v73;
              HIWORD(v171) = (v73 + v22[12] + 1) >> 1;
              LOWORD(v172) = v22[1];
              int v74 = v22[4];
              WORD1(v172) = (v74 + 1 + (unsigned __int16)v172) >> 1;
              WORD2(v172) = v74;
              int v75 = v22[7];
              WORD3(v172) = (v74 + 1 + v75) >> 1;
              WORD4(v172) = v75;
              int v76 = v22[10];
              WORD5(v172) = (v75 + v76 + 1) >> 1;
              WORD6(v172) = v76;
              HIWORD(v172) = (v76 + v22[13] + 1) >> 1;
              LOWORD(v173) = v22[2];
              int v77 = v22[5];
              WORD1(v173) = (v77 + 1 + (unsigned __int16)v173) >> 1;
              WORD2(v173) = v77;
              int v78 = v22[8];
              WORD3(v173) = (v77 + 1 + v78) >> 1;
              WORD4(v173) = v78;
              int v79 = v22[11];
              WORD5(v173) = (v78 + v79 + 1) >> 1;
              WORD6(v173) = v79;
              HIWORD(v173) = (v79 + v22[14] + 1) >> 1;
              LOWORD(v174) = v23[1];
              unsigned int v33 = (unsigned __int16)v174;
              int v80 = v23[3];
              int v81 = v80 + 1;
              WORD1(v174) = (v80 + 1 + (unsigned __int16)v174) >> 1;
              WORD2(v174) = v80;
              int v82 = v23[5];
              WORD3(v174) = (v81 + v82) >> 1;
              WORD4(v174) = v82;
              int v83 = v23[7];
              WORD5(v174) = (v82 + v83 + 1) >> 1;
              WORD6(v174) = v83;
              unsigned int v52 = (v83 + v23[9] + 1) >> 1;
            }
            else
            {
              int v53 = *(v22 - 3);
              if ((v168 & 1) == 0)
              {
                unsigned int v54 = *v22 + *v27 + 1;
                LOWORD(v171) = (v53 + *(v27 - 3) + v54 + 1) >> 2;
                WORD1(v171) = v54 >> 1;
                unsigned int v55 = v22[3] + v27[3] + 1;
                WORD2(v171) = (v55 + v54) >> 2;
                WORD3(v171) = v55 >> 1;
                unsigned int v56 = v22[6] + v27[6] + 1;
                WORD4(v171) = (v56 + v55) >> 2;
                WORD5(v171) = v56 >> 1;
                unsigned int v57 = v22[9] + v27[9] + 1;
                WORD6(v171) = (v57 + v56) >> 2;
                HIWORD(v171) = v57 >> 1;
                unsigned int v58 = v22[1] + v27[1] + 1;
                LOWORD(v172) = (*(v22 - 2) + *(v27 - 2) + v58 + 1) >> 2;
                WORD1(v172) = v58 >> 1;
                unsigned int v59 = v22[4] + v27[4] + 1;
                WORD2(v172) = (v59 + v58) >> 2;
                WORD3(v172) = v59 >> 1;
                unsigned int v60 = v22[7] + v27[7] + 1;
                WORD4(v172) = (v60 + v59) >> 2;
                WORD5(v172) = v60 >> 1;
                unsigned int v61 = v22[10] + v27[10] + 1;
                WORD6(v172) = (v61 + v60) >> 2;
                HIWORD(v172) = v61 >> 1;
                unsigned int v62 = v22[2] + v27[2] + 1;
                LOWORD(v173) = (*(v22 - 1) + *(v27 - 1) + v62 + 1) >> 2;
                WORD1(v173) = v62 >> 1;
                unsigned int v63 = v22[5] + v27[5] + 1;
                WORD2(v173) = (v63 + v62) >> 2;
                WORD3(v173) = v63 >> 1;
                unsigned int v64 = v22[8] + v27[8] + 1;
                WORD4(v173) = (v64 + v63) >> 2;
                WORD5(v173) = v64 >> 1;
                unsigned int v65 = v22[11] + v27[11] + 1;
                WORD6(v173) = (v65 + v64) >> 2;
                HIWORD(v173) = v65 >> 1;
                int v47 = v169;
                unsigned int v66 = v23[1] + v169[1] + 1;
                unsigned int v67 = *(v23 - 1) + *(v169 - 1) + v66 + 1;
                unsigned int v33 = (unsigned __int16)(v67 >> 2);
                LOWORD(v174) = v67 >> 2;
                WORD1(v174) = v66 >> 1;
                unsigned int v68 = v23[3] + v169[3] + 1;
                WORD2(v174) = (v68 + v66) >> 2;
                WORD3(v174) = v68 >> 1;
                unsigned int v69 = v23[5] + v169[5] + 1;
                WORD4(v174) = (v69 + v68) >> 2;
                WORD5(v174) = v69 >> 1;
                unsigned int v70 = v23[7] + v169[7] + 1;
                WORD6(v174) = (v70 + v69) >> 2;
                unsigned int v52 = v70 >> 1;
                goto LABEL_25;
              }
              int v84 = *v22;
              LOWORD(v171) = (v84 + 1 + v53) >> 1;
              WORD1(v171) = v84;
              int v85 = v22[3];
              WORD2(v171) = (v84 + 1 + v85) >> 1;
              WORD3(v171) = v85;
              int v86 = v22[6];
              WORD4(v171) = (v85 + v86 + 1) >> 1;
              WORD5(v171) = v86;
              int v87 = v22[9];
              WORD6(v171) = (v86 + v87 + 1) >> 1;
              HIWORD(v171) = v87;
              int v88 = v22[1];
              LOWORD(v172) = (v88 + 1 + *(v22 - 2)) >> 1;
              WORD1(v172) = v88;
              int v89 = v22[4];
              WORD2(v172) = (v88 + 1 + v89) >> 1;
              WORD3(v172) = v89;
              int v90 = v22[7];
              WORD4(v172) = (v89 + v90 + 1) >> 1;
              WORD5(v172) = v90;
              int v91 = v22[10];
              WORD6(v172) = (v90 + v91 + 1) >> 1;
              HIWORD(v172) = v91;
              int v92 = v22[2];
              LOWORD(v173) = (v92 + 1 + *(v22 - 1)) >> 1;
              WORD1(v173) = v92;
              int v93 = v22[5];
              WORD2(v173) = (v92 + 1 + v93) >> 1;
              WORD3(v173) = v93;
              int v94 = v22[8];
              WORD4(v173) = (v93 + v94 + 1) >> 1;
              WORD5(v173) = v94;
              int v95 = v22[11];
              WORD6(v173) = (v94 + v95 + 1) >> 1;
              HIWORD(v173) = v95;
              int v96 = v23[1];
              unsigned int v97 = v96 + 1 + *(v23 - 1);
              unsigned int v33 = (unsigned __int16)(v97 >> 1);
              LOWORD(v174) = v97 >> 1;
              WORD1(v174) = v96;
              int v98 = v23[3];
              WORD2(v174) = (v96 + 1 + v98) >> 1;
              WORD3(v174) = v98;
              int v99 = v23[5];
              WORD4(v174) = (v98 + v99 + 1) >> 1;
              WORD5(v174) = v99;
              unsigned int v52 = v23[7];
              WORD6(v174) = (v99 + v52 + 1) >> 1;
            }
            int v47 = v169;
            goto LABEL_25;
          }
          unsigned int v33 = v15[24];
LABEL_26:
          unsigned int v100 = *v18;
          unsigned int v101 = (2417 * v100 + 1229 * *v17 + 450 * *v19 + 2048) >> 12;
          __int32 v102 = *v15;
          __int32 v103 = v15[8];
          int v104 = v15[16];
          unint64_t v105 = (unint64_t)(2417 * v103 + 1229 * v102 + 450 * v104 + 2048) >> 12;
          if (v33 >> 4 > 0x270) {
            goto LABEL_37;
          }
          int v106 = *(unsigned __int16 *)(*(void *)&v13 + 2 * *v15);
          int v107 = *(unsigned __int16 *)(*(void *)&v13 + 2 * v15[8]);
          int v108 = *(unsigned __int16 *)(*(void *)&v13 + 2 * v15[16]);
          int v109 = (v107 - v106) & ((v107 - v106) >> 31);
          int v110 = v109 + v106;
          int v111 = v109 - v107;
          int v112 = ((v108 - v110) & ((v108 - v110) >> 31)) + v110;
          if (v108 > v110) {
            int v110 = *(unsigned __int16 *)(*(void *)&v13 + 2 * v15[16]);
          }
          unsigned int v113 = v110 - ((v111 + v110) & ((v111 + v110) >> 31));
          int v114 = 2 * (v113 - v112) - v112;
          if (v114 < 1)
          {
LABEL_37:
            unsigned int v117 = ((0x80000u >> *(unsigned char *)(*(void *)&v12 + v105))
                  + (((1 << (*(unsigned char *)(*(void *)&v12 + v105) - 1))
                                  + *(_DWORD *)(*(void *)&v11 + 4 * v105)) >> *(unsigned char *)(*(void *)&v12 + v105))
                  * v101) >> (20 - *(unsigned char *)(*(void *)&v12 + v105));
            goto LABEL_38;
          }
          if (v113 == v108)
          {
            if (v102 < v166) {
              goto LABEL_37;
            }
            if (v161 > v102) {
              int v115 = ((v102 - v166) * v163) >> v162;
            }
            else {
              int v115 = 0x10000;
            }
            unsigned int v100 = *v17;
            int v116 = *v15;
          }
          else
          {
            if (v103 < v165) {
              goto LABEL_37;
            }
            if (v158 > v103) {
              int v115 = ((v103 - v165) * v160) >> v159;
            }
            else {
              int v115 = 0x10000;
            }
            int v116 = v15[8];
          }
          if (v100 < 0x100) {
            int v115 = (int)(v115 * v100) >> 8;
          }
          if (v114 < v113 >> 1) {
            int v115 = ((v114 << 11) / (int)v113 * v115 + 512) >> 10;
          }
          int v133 = (v115 * v164 + 0x8000) >> 16;
          int v134 = v133 * (v100 - v101) + 2048;
          int v135 = v105 + ((v133 * (v116 - (int)v105) + 2048) >> 12);
          unsigned int v117 = ((0x80000u >> *(unsigned char *)(*(void *)&v12 + v135))
                + (v101 + (v134 >> 12))
                * (((1 << (*(unsigned char *)(*(void *)&v12 + v135) - 1))
                                + *(_DWORD *)(*(void *)&v11 + 4 * v135)) >> *(unsigned char *)(*(void *)&v12 + v135))) >> (20 - *(unsigned char *)(*(void *)&v12 + v135));
          signed int v136 = ((0x80000u >> *(unsigned char *)(*(void *)&v12 + v105))
                + (((1 << (*(unsigned char *)(*(void *)&v12 + v105) - 1))
                                + *(_DWORD *)(*(void *)&v11 + 4 * v105)) >> *(unsigned char *)(*(void *)&v12 + v105))
                * v101) >> (20 - *(unsigned char *)(*(void *)&v12 + v105));
          if (v136 != v117)
          {
            signed int v137 = ((0x80000u >> *(unsigned char *)(*(void *)&v12 + v105))
                  + (((1 << (*(unsigned char *)(*(void *)&v12 + v105) - 1))
                                  + *(_DWORD *)(*(void *)&v11 + 4 * v105)) >> *(unsigned char *)(*(void *)&v12 + v105))
                  * v101) >> (20 - *(unsigned char *)(*(void *)&v12 + v105));
            if (v136 >= 66000)
            {
              do
              {
                unsigned int v117 = (int)(v117 + 1) >> 1;
                BOOL v138 = v137 > 0x2039E;
                signed int v137 = (v137 + 1) >> 1;
              }
              while (v138);
            }
            unsigned int v139 = ((0x80000u >> *(unsigned char *)(*(void *)&v12 + v137))
                  + ((*(_DWORD *)(*(void *)&v11 + 4 * v137)
                                  + (1 << *(unsigned char *)(*(void *)&v12 + v137) >> 1)) >> *(unsigned char *)(*(void *)&v12 + v137))
                  * v117) >> (20 - *(unsigned char *)(*(void *)&v12 + v137));
            int v141 = v139 - 4096;
            BOOL v140 = (int)(v139 - 4096) < 0;
            int v142 = 4096 - v139;
            if (!v140) {
              int v142 = v141;
            }
            unsigned int v117 = (int)((((((v157 - v142) & ((v157 - v142) >> 31)) + v142) ^ (v141 >> 31))
                        + (v141 >> 31)
                        + 4096)
                       * v136
                       + 2048) >> 12;
          }
          unint64_t v16 = (int32x2_t *)((char *)result + 2300);
LABEL_38:
          unsigned int v118 = (int)(v117 * v102 + 2048) >> 14;
          unsigned int v119 = (int)(v117 * v103 + 2048) >> 14;
          unsigned int v120 = (int)(v117 * v104 + 2048) >> 14;
          int32x2_t v30 = vadd_s32(vsra_n_s32(vsra_n_s32(vshr_n_s32(vmul_s32(*v16, vdup_n_s32(v119)), 0xAuLL), vmul_s32(vdup_n_s32(v118), result[286]), 0xAuLL), vmul_s32(result[289], vdup_n_s32(v120)), 0xAuLL), v16[3]);
          signed int v29 = ((int)(result[288].i32[1] * v119) >> 10)
              + ((int)(v118 * result[287].i32[0]) >> 10)
              + ((int)(result[290].i32[0] * v120) >> 10)
              + result[291].i32[1];
          signed int v121 = v30.i32[0];
          if ((v30.i32[1] | v30.i32[0] | v29) < 0x10000) {
            goto LABEL_14;
          }
          if (v30.i32[1] >= v30.i32[0]) {
            signed int v122 = v30.i32[0];
          }
          else {
            signed int v122 = v30.i32[1];
          }
          if (v30.i32[1] > v30.i32[0]) {
            signed int v121 = v30.i32[1];
          }
          if (v29 >= v122) {
            int v123 = v122;
          }
          else {
            int v123 = v29;
          }
          if (v29 <= v121) {
            int v124 = v121;
          }
          else {
            int v124 = v29;
          }
          if ((v124 & 0x80000000) == 0 && v123 < 0x10000)
          {
            int32x2_t v125 = vmin_s32(vmax_s32(v30, 0), (int32x2_t)0xFFFF0000FFFFLL);
            int v126 = v29 & ~(v29 >> 31);
            if (v126 >= 0xFFFF) {
              int v126 = 0xFFFF;
            }
            unsigned int v127 = v125.i32[1] + 341 * (v125.i32[1] + v125.i32[0] + v126);
            unsigned int v128 = (v127 + 512) >> 10;
            if (v127 >= 0x1FFFA00) {
              unsigned int v129 = (v127 + 512) >> 10;
            }
            else {
              unsigned int v129 = 0xFFFF - v128;
            }
            unsigned int v130 = (((v129 + 2) >> 2) * v128 + 0x2000) >> 14;
            if (v124 < 0x10000)
            {
              signed int v131 = 4096;
              if (v123 < 0)
              {
LABEL_64:
                if (v131 >= (int)(float)((float)(int)(-4096 * v130) / (float)(int)(v123 - v130))) {
                  signed int v131 = (int)(float)((float)(int)(-4096 * v130) / (float)(int)(v123 - v130));
                }
              }
            }
            else
            {
              if ((int)(float)((float)(int)(268431360 - (v130 << 12)) / (float)(int)(v124 - v130)) >= 4096) {
                signed int v131 = 4096;
              }
              else {
                signed int v131 = (int)(float)((float)(int)(268431360 - (v130 << 12)) / (float)(int)(v124 - v130));
              }
              if (v123 < 0) {
                goto LABEL_64;
              }
            }
            int32x2_t v132 = vdup_n_s32(v130);
            signed int v29 = v130 + ((int)(v131 * (v29 - v130) + 2048) >> 12);
            int32x2_t v30 = vsra_n_s32(v132, vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v131), vsub_s32(v30, v132)), 0xCuLL);
            goto LABEL_14;
          }
          if (v124 >= 0) {
            signed int v29 = 0xFFFF;
          }
          else {
            signed int v29 = 0;
          }
          int32x2_t v30 = vdup_n_s32(v29);
LABEL_14:
          __int16 v31 = *(_WORD *)(*(void *)&v14 + 2 * v30.i32[1]);
          __int16 v32 = *(_WORD *)(*(void *)&v14 + 2 * v29);
          *int v28 = *(_WORD *)(*(void *)&v14 + 2 * v30.i32[0]);
          ++v15;
          unint64_t v26 = (v26 + 1);
          ++v17;
          v28[1] = v31;
          v28[2] = v32;
          ++v18;
          ++v19;
          v28 += 3;
        }
        while (v170 > v26);
        uint64_t v24 = v149;
        if ((v168 & 1) == 0) {
          uint64_t v24 = 0;
        }
        uint64_t v22 = (unsigned __int16 *)((char *)v152 + v24);
        uint64_t v25 = v148;
        if ((v168 & 1) == 0) {
          uint64_t v25 = 0;
        }
        uint64_t v23 = (unsigned __int16 *)((char *)v151 + v25);
        uint64_t v17 = (unsigned __int16 *)((char *)v155 + v150);
        uint32x4_t v18 = (unsigned __int16 *)((char *)v154 + v150);
        unint64_t v19 = (unsigned __int16 *)((char *)v153 + v150);
        uint64_t v5 = (_WORD *)((char *)v156 + v147);
        unint64_t v168 = (v168 + 1);
        if (v146 <= v168) {
          return result;
        }
      }
    }
    if (v2 < 2)
    {
      int v143 = 0;
LABEL_89:
      unsigned int v145 = v143 + 1;
      do
        BOOL v138 = v2 > v145++;
      while (v138);
      return result;
    }
    int v143 = 0;
    if (!v2) {
      goto LABEL_89;
    }
    if ((v2 - 1) >> 32) {
      goto LABEL_89;
    }
    int v143 = v2 & 0xFFFFFFFE;
    int v144 = v2 & 0xFFFFFFFE;
    do
      v144 -= 2;
    while (v144);
    if (v143 != v2) {
      goto LABEL_89;
    }
  }
  return result;
}

uint64_t sub_1DDB3622C(uint64_t result, void *a2)
{
  unint64_t v2 = a2[224];
  if (v2)
  {
    unint64_t v3 = a2[223];
    if (v3)
    {
      LODWORD(v4) = 0;
      uint64_t v5 = a2[225];
      uint64_t v6 = (_WORD *)a2[227];
      uint64_t v7 = a2[228];
      uint64_t v8 = a2[231];
      uint64_t v9 = a2[232];
      uint64_t v10 = a2[233];
      uint64_t v11 = a2[234];
      uint64_t v12 = v11 * a2[226];
      uint64_t v13 = 2 * v5;
      uint64_t v14 = v8 + 2 * v5 + v12;
      uint64_t v15 = v9 + v13 + v12;
      uint64_t v16 = v10 + v13 + v12;
      uint64_t v17 = *(void *)(result + 2336);
      int v18 = *(_DWORD *)(result + 2288);
      int v19 = *(_DWORD *)(result + 2304);
      uint64_t result = *(unsigned int *)(result + 2320);
      while (1)
      {
        uint64_t v20 = 0;
        unint64_t v21 = v6;
        do
        {
          int v27 = v18 * (*(unsigned __int16 *)(v14 + 2 * v20) >> 2);
          int v22 = v27 >> 10;
          int v28 = v19 * (*(unsigned __int16 *)(v15 + 2 * v20) >> 2);
          int v23 = v28 >> 10;
          int v29 = result * (*(unsigned __int16 *)(v16 + 2 * v20) >> 2);
          int v24 = v29 >> 10;
          if (((v28 >> 10) | (v27 >> 10) | (v29 >> 10)) < 0x10000) {
            goto LABEL_10;
          }
          if (v23 >= v22) {
            int v30 = v27 >> 10;
          }
          else {
            int v30 = v28 >> 10;
          }
          if (v23 <= v22) {
            int v31 = v27 >> 10;
          }
          else {
            int v31 = v28 >> 10;
          }
          if (v24 < v30) {
            int v30 = v29 >> 10;
          }
          if (v24 > v31) {
            int v31 = v29 >> 10;
          }
          if ((v31 & 0x80000000) == 0 && v30 < 0x10000)
          {
            if (v27 >= 0) {
              int v32 = 0xFFFF;
            }
            else {
              int v32 = 0;
            }
            if (v27 >> 26) {
              int v33 = v32;
            }
            else {
              int v33 = v27 >> 10;
            }
            if (v28 >= 0) {
              int v34 = 0xFFFF;
            }
            else {
              int v34 = 0;
            }
            if (v28 >> 26) {
              int v35 = v34;
            }
            else {
              int v35 = v28 >> 10;
            }
            if (v29 >= 0) {
              int v36 = 0xFFFF;
            }
            else {
              int v36 = 0;
            }
            if (v29 >> 26) {
              int v37 = v36;
            }
            else {
              int v37 = v29 >> 10;
            }
            unsigned int v38 = v35 + 341 * (v35 + v33 + v37);
            unsigned int v39 = (v38 + 512) >> 10;
            if (v38 >= 0x1FFFA00) {
              unsigned int v40 = (v38 + 512) >> 10;
            }
            else {
              unsigned int v40 = 0xFFFF - v39;
            }
            unsigned int v41 = (((v40 + 2) >> 2) * v39 + 0x2000) >> 14;
            if (v31 < 0x10000)
            {
              int v42 = 4096;
              if (v30 < 0) {
                goto LABEL_51;
              }
            }
            else
            {
              int v42 = (int)(float)((float)(int)(268431360 - (v41 << 12)) / (float)(int)(v31 - v41));
              if (v42 >= 4096) {
                int v42 = 4096;
              }
              if (v30 < 0)
              {
LABEL_51:
                int v43 = (int)(float)((float)(int)(-4096 * v41) / (float)(int)(v30 - v41));
                if (v42 >= v43) {
                  int v42 = v43;
                }
              }
            }
            int v22 = v41 + ((int)(v42 * (v22 - v41) + 2048) >> 12);
            int v23 = v41 + ((int)(v42 * (v23 - v41) + 2048) >> 12);
            int v24 = v41 + ((int)(v42 * (v24 - v41) + 2048) >> 12);
            goto LABEL_10;
          }
          if (v31 >= 0) {
            int v22 = 0xFFFF;
          }
          else {
            int v22 = 0;
          }
          int v23 = v22;
          int v24 = v22;
LABEL_10:
          __int16 v25 = *(_WORD *)(v17 + 2 * v23);
          __int16 v26 = *(_WORD *)(v17 + 2 * v24);
          *unint64_t v21 = *(_WORD *)(v17 + 2 * v22);
          v21[1] = v25;
          v21[2] = v26;
          ++v20;
          v21 += 3;
        }
        while (v3 > v20);
        unint64_t v4 = (v4 + 1);
        v14 += v11;
        v15 += v11;
        v16 += v11;
        uint64_t v6 = (_WORD *)((char *)v6 + v7);
        if (v2 <= v4) {
          return result;
        }
      }
    }
    if (v2 < 2 || (v2 ? (BOOL v44 = (v2 - 1) >> 32 == 0) : (BOOL v44 = 0), !v44))
    {
      int v45 = 0;
LABEL_60:
      unsigned int v46 = v45 + 1;
      while (v2 > v46++)
        ;
      return result;
    }
    int v45 = v2 & 0xFFFFFFFE;
    int v48 = v2 & 0xFFFFFFFE;
    do
      v48 -= 2;
    while (v48);
    if (v45 != v2) {
      goto LABEL_60;
    }
  }
  return result;
}

uint64_t sub_1DDB364F0(uint64_t result, void *a2)
{
  unint64_t v2 = a2[224];
  if (v2)
  {
    unint64_t v3 = a2[223];
    if (v3)
    {
      LODWORD(v4) = 0;
      uint64_t v5 = a2[225];
      uint64_t v6 = (_WORD *)a2[227];
      uint64_t v7 = a2[228];
      uint64_t v8 = a2[231];
      uint64_t v9 = a2[232];
      uint64_t v10 = a2[233];
      uint64_t v11 = a2[234];
      uint64_t v12 = v11 * a2[226];
      uint64_t v13 = 2 * v5;
      uint64_t v14 = v8 + 2 * v5 + v12;
      uint64_t v15 = v9 + v13 + v12;
      uint64_t v16 = v10 + v13 + v12;
      uint64_t v17 = *(void *)(result + 2336);
      int v18 = *(_DWORD *)(result + 2296);
      int v19 = *(_DWORD *)(result + 2308);
      int v20 = *(_DWORD *)(result + 2320);
      int32x2_t v21 = *(int32x2_t *)(result + 2288);
      int32x2_t v22 = *(int32x2_t *)(result + 2300);
      int32x2_t v23 = *(int32x2_t *)(result + 2312);
      int32x2_t v24 = *(int32x2_t *)(result + 2324);
      uint64_t result = *(unsigned int *)(result + 2332);
      while (1)
      {
        uint64_t v25 = 0;
        __int16 v26 = v6;
        do
        {
          unsigned int v31 = *(unsigned __int16 *)(v14 + 2 * v25) >> 2;
          unsigned int v32 = *(unsigned __int16 *)(v15 + 2 * v25) >> 2;
          unsigned int v33 = *(unsigned __int16 *)(v16 + 2 * v25) >> 2;
          int32x2_t v28 = vadd_s32(vsra_n_s32(vsra_n_s32(vshr_n_s32(vmul_s32(v22, vdup_n_s32(v32)), 0xAuLL), vmul_s32(v21, vdup_n_s32(v31)), 0xAuLL), vmul_s32(v23, vdup_n_s32(v33)), 0xAuLL), v24);
          signed int v27 = ((int)(v19 * v32) >> 10) + ((int)(v18 * v31) >> 10) + ((int)(v20 * v33) >> 10) + result;
          signed int v34 = v28.i32[1];
          if ((v28.i32[1] | v28.i32[0] | v27) < 0x10000) {
            goto LABEL_10;
          }
          if (v28.i32[1] >= v28.i32[0]) {
            signed int v35 = v28.i32[0];
          }
          else {
            signed int v35 = v28.i32[1];
          }
          if (v28.i32[1] <= v28.i32[0]) {
            signed int v34 = v28.i32[0];
          }
          if (v27 >= v35) {
            int v36 = v35;
          }
          else {
            int v36 = v27;
          }
          if (v27 <= v34) {
            int v37 = v34;
          }
          else {
            int v37 = v27;
          }
          if ((v37 & 0x80000000) == 0 && v36 < 0x10000)
          {
            int32x2_t v38 = vmin_s32(vmax_s32(v28, 0), (int32x2_t)0xFFFF0000FFFFLL);
            int v39 = v27 & ~(v27 >> 31);
            if (v39 >= 0xFFFF) {
              int v39 = 0xFFFF;
            }
            unsigned int v40 = v38.i32[1] + 341 * (v38.i32[1] + v38.i32[0] + v39);
            unsigned int v41 = (v40 + 512) >> 10;
            if (v40 >= 0x1FFFA00) {
              unsigned int v42 = (v40 + 512) >> 10;
            }
            else {
              unsigned int v42 = 0xFFFF - v41;
            }
            unsigned int v43 = (((v42 + 2) >> 2) * v41 + 0x2000) >> 14;
            if (v37 < 0x10000)
            {
              signed int v44 = 4096;
              if (v36 < 0) {
                goto LABEL_36;
              }
            }
            else
            {
              signed int v44 = (int)(float)((float)(int)(268431360 - (v43 << 12)) / (float)(int)(v37 - v43));
              if (v44 >= 4096) {
                signed int v44 = 4096;
              }
              if (v36 < 0)
              {
LABEL_36:
                int v45 = (int)(float)((float)(int)(-4096 * v43) / (float)(int)(v36 - v43));
                if (v44 >= v45) {
                  signed int v44 = v45;
                }
              }
            }
            int32x2_t v46 = vdup_n_s32(v43);
            signed int v27 = v43 + ((int)(v44 * (v27 - v43) + 2048) >> 12);
            int32x2_t v28 = vsra_n_s32(v46, vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v44), vsub_s32(v28, v46)), 0xCuLL);
            goto LABEL_10;
          }
          if (v37 >= 0) {
            signed int v27 = 0xFFFF;
          }
          else {
            signed int v27 = 0;
          }
          int32x2_t v28 = vdup_n_s32(v27);
LABEL_10:
          __int16 v29 = *(_WORD *)(v17 + 2 * v28.i32[1]);
          __int16 v30 = *(_WORD *)(v17 + 2 * v27);
          *__int16 v26 = *(_WORD *)(v17 + 2 * v28.i32[0]);
          v26[1] = v29;
          v26[2] = v30;
          ++v25;
          v26 += 3;
        }
        while (v3 > v25);
        unint64_t v4 = (v4 + 1);
        v14 += v11;
        v15 += v11;
        v16 += v11;
        uint64_t v6 = (_WORD *)((char *)v6 + v7);
        if (v2 <= v4) {
          return result;
        }
      }
    }
    if (v2 < 2 || (v2 ? (BOOL v47 = (v2 - 1) >> 32 == 0) : (BOOL v47 = 0), !v47))
    {
      int v48 = 0;
LABEL_45:
      unsigned int v49 = v48 + 1;
      while (v2 > v49++)
        ;
      return result;
    }
    int v48 = v2 & 0xFFFFFFFE;
    int v51 = v2 & 0xFFFFFFFE;
    do
      v51 -= 2;
    while (v51);
    if (v48 != v2) {
      goto LABEL_45;
    }
  }
  return result;
}

uint64_t sub_1DDB367E4(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 512))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB36880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB36898(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v7);
  uint64_t v2 = v7;
  sub_1DDA1A880(__p, "IFD0:EPExposureIndex");
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 264))(v2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    sub_1DDA18310(v8);
  }
  if (!v3) {
    return sub_1DDA2DA38(a1);
  }
  return v3;
}

void sub_1DDB36964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB36994(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CKodakCompressedUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v63[0] = MEMORY[0x1E4F143A8];
  v63[1] = 3221225472;
  v63[2] = sub_1DDB370F0;
  v63[3] = &unk_1E6D04A58;
  v63[4] = v1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v63);
  memset(v66, 0, 256);
  memset(v65, 0, sizeof(v65));
  uint64_t v5 = (_WORD *)sub_1DDAA5B9C(v1);
  unsigned int v60 = (void (**)(void))v4;
  unsigned int v7 = *(_DWORD *)(v1 + 44);
  int v6 = *(_DWORD *)(v1 + 48);
  (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t, void))(*(void *)v1 + 176))(v1, buf, 4096, 12, 0);
  if (v6)
  {
    int v8 = 0;
    int v61 = v6;
    do
    {
      int v62 = v8;
      if (v7)
      {
        for (unsigned int i = 0; i < v7; i += 2 * v10)
        {
          if (v7 - i >= 0x100) {
            uint64_t v10 = 128;
          }
          else {
            uint64_t v10 = (v7 - i) >> 1;
          }
          (*(void (**)(void, unsigned char *, uint64_t))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), v65, v10);
          unsigned int v11 = v10 >> 2;
          if (v10 >= 4)
          {
            unsigned int v12 = 0;
            if (v11 <= 1) {
              unsigned int v15 = 1;
            }
            else {
              unsigned int v15 = v10 >> 2;
            }
            uint64_t v14 = v66;
            uint64_t v13 = v65;
            do
            {
              unsigned int v16 = *v13;
              unsigned int v17 = v13[1];
              unsigned int v18 = v13[2];
              unsigned int v19 = v13[3];
              v13 += 4;
              *uint64_t v14 = v16 & 0xF;
              v14[1] = v16 >> 4;
              v14[2] = v17 & 0xF;
              v14[3] = v17 >> 4;
              v14[4] = v18 & 0xF;
              v14[5] = v18 >> 4;
              v14[6] = v19 & 0xF;
              v14[7] = v19 >> 4;
              v14 += 8;
              unsigned int v12 = (0x10000 << (v16 & 0xF)) | (0x10000 << (v16 >> 4)) | (0x10000 << (v17 >> 4)) | (0x10000 << (v17 & 0xF)) | (0x10000 << (v18 >> 4)) | (0x10000 << (v18 & 0xF)) | (0x10000 << (v19 >> 4)) | (0x10000 << (v19 & 0xF)) | (v12 + (v16 >> 4) + (v16 & 0xF) + (v17 >> 4) + (v17 & 0xF) + (v18 >> 4) + (v18 & 0xF) + (v19 >> 4) + (v19 & 0xF));
              --v15;
            }
            while (v15);
          }
          else
          {
            unsigned int v12 = 0;
            uint64_t v13 = v65;
            uint64_t v14 = v66;
          }
          int v20 = v10 & 3;
          if ((v10 & 3) != 0)
          {
            uint64_t v21 = (v20 - 1) + 1;
            do
            {
              unsigned int v22 = *v13++;
              *uint64_t v14 = v22 & 0xF;
              v14[1] = v22 >> 4;
              unsigned int v12 = (0x10000 << (v22 & 0xF)) | (0x10000 << (v22 >> 4)) | (v12 + (v22 >> 4) + (v22 & 0xF));
              v14 += 2;
              --v21;
            }
            while (v21);
          }
          if (v12 >> 29)
          {
            (*(void (**)(void, unsigned char *, void))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), &v65[v10], 12 * ((2 * v10 + 7) >> 3) - v10);
            if (v10 >= 4)
            {
              if (v11 <= 1) {
                unsigned int v35 = 1;
              }
              else {
                unsigned int v35 = v10 >> 2;
              }
              signed int v34 = v65;
              do
              {
                char v36 = v34[4];
                unsigned int v37 = v34[8];
                unsigned __int8 v38 = v34[2];
                char v39 = v34[6];
                unsigned int v40 = v34[10];
                __int16 v41 = *(_WORD *)&buf[2 * (v36 & 0xF0 | (*v34 >> 4 << 8) | (v37 >> 4))];
                __int16 v42 = *(_WORD *)&buf[2 * (v39 & 0xF0 | (v38 >> 4 << 8) | (v40 >> 4))];
                __int16 v43 = *(_WORD *)&buf[2 * (v34[1] | ((*v34 & 0xF) << 8))];
                __int16 v44 = *(_WORD *)&buf[2 * (v34[3] | ((v38 & 0xF) << 8))];
                __int16 v45 = *(_WORD *)&buf[2 * (v34[5] | ((v36 & 0xF) << 8))];
                __int16 v46 = *(_WORD *)&buf[2 * (v34[7] | ((v39 & 0xF) << 8))];
                LOWORD(v37) = *(_WORD *)&buf[2 * (v34[9] | ((v37 & 0xF) << 8))];
                __int16 v47 = *(_WORD *)&buf[2 * (v34[11] | ((v40 & 0xF) << 8))];
                *uint64_t v5 = v41;
                v5[1] = v42;
                v5[2] = v43;
                v5[3] = v44;
                v5[4] = v45;
                v5[5] = v46;
                v5[6] = v37;
                v5[7] = v47;
                v34 += 12;
                v5 += 8;
                --v35;
              }
              while (v35);
            }
            else
            {
              signed int v34 = v65;
            }
            if ((v10 & 3) != 0)
            {
              char v48 = *v34;
              int v49 = v34[4];
              unsigned __int8 v50 = v34[2];
              int v51 = v34[6];
              int v52 = v51 & 0xF0 | (v50 >> 4 << 8) | (v34[10] >> 4);
              int v53 = v34[1];
              int v54 = v34[3];
              int v55 = v34[5];
              __int16 v56 = *(_WORD *)&buf[2 * (v49 & 0xF0 | (*v34 >> 4 << 8) | (v34[8] >> 4))];
              int v57 = v34[7];
              LOWORD(v52) = *(_WORD *)&buf[2 * v52];
              *uint64_t v5 = v56;
              v5[1] = v52;
              if (v20 == 1)
              {
                v5 += 2;
              }
              else
              {
                __int16 v58 = *(_WORD *)&buf[2 * (v54 & 0xFFFFF0FF | ((v50 & 0xF) << 8))];
                v5[2] = *(_WORD *)&buf[2 * (v53 & 0xFFFFF0FF | ((v48 & 0xF) << 8))];
                v5[3] = v58;
                if (v20 == 3)
                {
                  __int16 v59 = *(_WORD *)&buf[2 * ((v51 << 8) & 0xF00 | v57)];
                  v5[4] = *(_WORD *)&buf[2 * ((v49 << 8) & 0xF00 | v55)];
                  v5[5] = v59;
                  v5 += 6;
                }
                else
                {
                  v5 += 4;
                }
              }
            }
          }
          else
          {
            (*(void (**)(void, unsigned char *, void))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), v65, (((8 * v10 + (unsigned __int16)v12 + 31) >> 3) & 0xFFFFFFC) - v10);
            if (v10)
            {
              int v23 = 0;
              int v24 = 0;
              int v25 = 0;
              unsigned int v26 = 0;
              signed int v27 = v66;
              int32x2_t v28 = v65;
              int v29 = v10;
              do
              {
                if (v23 <= 15)
                {
                  v23 += 16;
                  unsigned int v26 = HIWORD(v26) | (*v28 << 24) | (v28[1] << 16);
                  v28 += 2;
                }
                unsigned int v30 = *v27;
                int v31 = v23 - v30;
                if (*v27) {
                  unsigned int v30 = (v26 << v31 >> -(char)v30) - (((v26 << v31 >> 31) - 1) >> -(char)v30);
                }
                if (v31 <= 15)
                {
                  v31 += 16;
                  unsigned int v26 = HIWORD(v26) | (*v28 << 24) | (v28[1] << 16);
                  v28 += 2;
                }
                unsigned int v32 = v27[1];
                int v23 = v31 - v32;
                if (v27[1]) {
                  unsigned int v32 = (v26 << v23 >> -(char)v32) - (((v26 << v23 >> 31) - 1) >> -(char)v32);
                }
                v24 += v30;
                v25 += v32;
                __int16 v33 = *(_WORD *)&buf[2 * (v25 & 0xFFF)];
                *uint64_t v5 = *(_WORD *)&buf[2 * (v24 & 0xFFF)];
                v5[1] = v33;
                v27 += 2;
                v5 += 2;
                --v29;
              }
              while (v29);
            }
          }
        }
      }
      int v8 = v62 + 1;
    }
    while (v62 + 1 != v61);
  }
  v60[2](v60);
}

void sub_1DDB3709C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB370F0(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CKodakCompressedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB37178(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CKodakUncompressedUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = sub_1DDB374E4;
  v18[3] = &unk_1E6D04A58;
  v18[4] = v1;
  os_signpost_id_t v4 = (void (**)(void))MEMORY[0x1E01C46E0](v18);
  uint64_t v5 = (unsigned __int8 *)sub_1DDAA5B9C(v1);
  uint64_t v6 = *(unsigned int *)(v1 + 44);
  int v7 = *(_DWORD *)(v1 + 48);
  if (v7 * (int)v6 > (*(unsigned int (**)(uint64_t))(*(void *)v1 + 152))(v1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t, void))(*(void *)v1 + 176))(v1, buf, 4096, 12, 0);
  if (v7)
  {
    int v8 = 0;
    if (v6 >> 2 <= 1) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = v6 >> 2;
    }
    do
    {
      (*(void (**)(void, unsigned __int8 *, uint64_t))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), v5, 2 * v6);
      uint64_t v10 = v5;
      unsigned int v11 = v9;
      unsigned int v12 = v5;
      if (v6 >= 4)
      {
        do
        {
          __int16 v13 = *(_WORD *)&buf[2 * v12[1]];
          __int16 v14 = *(_WORD *)&buf[2 * v12[2]];
          __int16 v15 = *(_WORD *)&buf[2 * v12[3]];
          *(_WORD *)uint64_t v5 = *(_WORD *)&buf[2 * *v12];
          *((_WORD *)v5 + 1) = v13;
          *((_WORD *)v5 + 2) = v14;
          *((_WORD *)v5 + 3) = v15;
          v12 += 4;
          v5 += 8;
          --v11;
        }
        while (v11);
        uint64_t v10 = v5;
        uint64_t v5 = v12;
        if ((v6 & 2) != 0)
        {
LABEL_15:
          __int16 v16 = *(_WORD *)&buf[2 * v5[1]];
          *(_WORD *)uint64_t v10 = *(_WORD *)&buf[2 * *v5];
          *((_WORD *)v10 + 1) = v16;
          v5 += 2;
          v10 += 4;
          if ((v6 & 1) == 0) {
            goto LABEL_11;
          }
LABEL_10:
          *(_WORD *)uint64_t v10 = *(_WORD *)&buf[2 * *v5];
          v10 += 2;
          goto LABEL_11;
        }
      }
      else if ((v6 & 2) != 0)
      {
        goto LABEL_15;
      }
      if (v6) {
        goto LABEL_10;
      }
LABEL_11:
      ++v8;
      uint64_t v5 = v10;
    }
    while (v8 != v7);
  }
  v4[2](v4);
}

void sub_1DDB37484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB374E4(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CKodakUncompressedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

double sub_1DDB3756C(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&__p);
  sub_1DDAC82D4(&__p, &v11);
  if (v8) {
    sub_1DDA18310(v8);
  }
  uint64_t v2 = v11;
  if (v11)
  {
    double v10 = 0.0;
    sub_1DDA1A880(&__p, "IFD0:EXIF:MAKERNOTE:ISOInfo");
    int v3 = (*(uint64_t (**)(void *, void **, double *))(*(void *)v2 + 808))(v2, &__p, &v10);
    if (v9 < 0) {
      operator delete(__p);
    }
    if (v3) {
      double v4 = v10 + 0.0;
    }
    else {
      double v4 = 0.0;
    }
  }
  else
  {
    double v4 = 0.0;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)
      && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1) & 1) == 0)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&__p, a1);
      double v5 = (*(double (**)(void *))(*(void *)__p + 352))(__p);
      if (v8) {
        sub_1DDA18310(v8);
      }
      double v4 = v5 + 0.0;
    }
  }
  if (v12) {
    sub_1DDA18310(v12);
  }
  return v4;
}

void sub_1DDB3773C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB37788(uint64_t a1, int a2)
{
  unint64_t v4 = *(unsigned int *)(a1 + 44);
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  unsigned int v6 = (v5 + 3) >> 2;
  uint64_t v7 = *(void *)(a1 + 192);
  __int16 v8 = *(_WORD *)(v7 + 112);
  int v9 = *(unsigned __int16 *)(v7 + 114);
  int v10 = *(_DWORD *)(v7 + 72);
  uint64_t v11 = sub_1DDAA5B9C(a1);
  uint64_t result = sub_1DDAA72BC(a1);
  unsigned int v13 = v6 * a2;
  unsigned int v14 = v6 * a2 + v6;
  if (v5 < v14) {
    unsigned int v14 = v5;
  }
  if (v13 < v14)
  {
    if (v10 == 1) {
      int v15 = 21845;
    }
    else {
      int v15 = 4948;
    }
    __int16 v16 = ~(_WORD)v15;
    BOOL v18 = result == 1 || v4 == 0;
    unsigned int v19 = v4 * a2 * v6;
    do
    {
      if (!v18)
      {
        unint64_t v20 = v4;
        unsigned int v21 = v19;
        do
        {
          *(_WORD *)(v11 + 2 * v21) = bswap32(*(unsigned __int16 *)(v11 + 2 * v21)) >> 16;
          ++v21;
          --v20;
        }
        while (v20);
      }
      if (v4)
      {
        for (unint64_t i = 0; i < v4; i += 2)
        {
          __int16 v23 = *(_WORD *)(v11 + 2 * (v19 + i)) ^ v8;
          unsigned int v24 = v19 + i + 1;
          int v25 = *(unsigned __int16 *)(v11 + 2 * v24) ^ v9;
          __int16 v26 = v25 & v16 | v15 & v23;
          uint64_t result = v15 & v25;
          *(_WORD *)(v11 + 2 * (v19 + i)) = v26;
          *(_WORD *)(v11 + 2 * v24) = result | v23 & v16;
        }
      }
      ++v13;
      v19 += v4;
    }
    while (v13 != v14);
  }
  return result;
}

void sub_1DDB378BC(uint64_t *a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "CPhaseOneUnpacker", (const char *)&unk_1DDC3ACB6, (uint8_t *)buf, 2u);
  }

  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1DDB37AD8;
  v10[3] = &unk_1E6D04A58;
  v10[4] = a1;
  unint64_t v4 = (void (**)(void))MEMORY[0x1E01C46E0](v10);
  uint64_t v5 = sub_1DDAA72BC((uint64_t)a1);
  sub_1DDA29F88(buf, a1 + 3, v5);
  sub_1DDA1A94C(v8, a1 + 3, (uint64_t)(a1 + 5), 0);
  unsigned int v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 152))(a1);
  uint64_t v7 = sub_1DDAA5B9C((uint64_t)a1);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1[3] + 32))(a1[3], v7, v6);
  if (*(_DWORD *)(a1[24] + 72)) {
    sub_1DDB106E0((uint64_t)sub_1DDB37B60, 4, (uint64_t)a1, 0, 0);
  }
  sub_1DDA1AA18(v8);
  sub_1DDA2A000(buf);
  v4[2](v4);
}

void sub_1DDB37A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1DDA1AA18((uint64_t *)va);
  sub_1DDA2A000((uint64_t *)va1);
  v2[2](v2);

  _Unwind_Resume(a1);
}

void sub_1DDB37AD8(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPhaseOneUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDB37B60(uint64_t a1)
{
  return sub_1DDB37788(*(void *)(a1 + 16), *(_DWORD *)a1);
}

void *sub_1DDB37B70(void *a1)
{
  *a1 = &unk_1F397A0B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[25];
  if (v2) {
    sub_1DDA18310(v2);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDB37BCC(void *a1)
{
  *a1 = &unk_1F397A0B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[25];
  if (v2) {
    sub_1DDA18310(v2);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDB37C3C(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPhaseOneCompressedUnpacker", (const char *)&unk_1DDC3ACB6, (uint8_t *)buf, 2u);
  }

  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1DDB37F88;
  v9[3] = &unk_1E6D04A58;
  v9[4] = a1;
  MEMORY[0x1E01C46E0](v9);
  uint64_t v4 = sub_1DDAA72BC(a1);
  sub_1DDA29F88(buf, (uint64_t *)(a1 + 24), v4);
  sub_1DDA1A94C(v7, (uint64_t *)(a1 + 24), a1 + 40, 0);
  if (*(int *)(a1 + 48) <= (unint64_t)((uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 2))
  {
    LODWORD(v6) = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1);
    sub_1DDA47EF8(&v6, &dword_1DDBFAC9C);
    operator new[]();
  }
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDB37EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB37F88(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPhaseOneCompressedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDB38010(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  uint64_t result = *v2;
  if (!*v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*(unsigned char *)(result + 208))
  {
    unsigned int v4 = *(_DWORD *)(result + 288) * *(_DWORD *)a1;
    uint64_t v5 = v2[1];
    return sub_1DDB380BC(result, v4, v5);
  }
  return result;
}

void sub_1DDB380A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB380BC(uint64_t result, unsigned int a2, uint64_t a3)
{
  v46[1] = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(_DWORD *)(result + 48);
  if (*(_DWORD *)(result + 288) + a2 < v3) {
    unsigned int v3 = *(_DWORD *)(result + 288) + a2;
  }
  if (v3 > a2)
  {
    uint64_t v4 = *(void *)(result + 232);
    uint64_t v5 = *(unsigned int *)(result + 44);
    unint64_t v6 = (*(void *)(result + 240) - v4) >> 2;
    unsigned int v7 = v5 * a2;
    do
    {
      if (v6 <= a2) {
        sub_1DDA24AD0();
      }
      unsigned int v8 = a2;
      uint64_t v9 = *(void *)(result + 216);
      uint64_t v10 = *(unsigned int *)(v4 + 4 * a2);
      uint64_t v45 = 0;
      v46[0] = 0;
      if ((int)v5 >= 1)
      {
        int64_t v11 = 0;
        int v12 = 0;
        unint64_t v13 = 0;
        uint64_t v14 = a3 + 2 * v5 * a2;
        int v15 = (unsigned int *)(v9 + v10);
        do
        {
          if (v11 >= (uint64_t)((int)v5 & 0xFFFFFFFFFFFFFFF8))
          {
            uint64_t v45 = 0xE0000000ELL;
          }
          else if ((v11 & 7) == 0)
          {
            uint64_t v16 = 0;
            char v17 = 1;
            do
            {
              int v18 = 0;
              char v19 = v17;
              while (1)
              {
                if (v12 <= 0)
                {
                  unsigned int v21 = *v15++;
                  unint64_t v13 = v21 | (v13 << 32);
                  int v20 = v12 + 32;
                }
                else
                {
                  int v20 = v12;
                }
                int v12 = v20 - 1;
                if (((v13 << -(char)v20) & 0x8000000000000000) != 0) {
                  break;
                }
                if (++v18 == 5) {
                  goto LABEL_19;
                }
              }
              if (!v18) {
                goto LABEL_22;
              }
LABEL_19:
              if (v20 <= 1)
              {
                unsigned int v22 = *v15++;
                unint64_t v13 = v22 | (v13 << 32);
                int v12 = v20 + 31;
              }
              unint64_t v23 = v13 << -(char)v12-- >> 63;
              *((_DWORD *)&v46[-1] + v16) = dword_1DDBFE438[(2 * v18 - 2) | v23];
LABEL_22:
              char v17 = 0;
              uint64_t v16 = 1;
            }
            while ((v19 & 1) != 0);
          }
          int v24 = *(_DWORD *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
          if (v24 <= 0)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](exception, "RawCameraException");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int64_t v25 = v11 & 1;
          if (v24 == 14)
          {
            if (v12 <= 15)
            {
              unsigned int v26 = *v15++;
              unint64_t v13 = v26 | (v13 << 32);
              v12 += 32;
            }
            unint64_t v27 = v13 << -(char)v12 >> 48;
            v12 -= 16;
            *(_DWORD *)((unint64_t)v46 | (4 * v25)) = v27;
          }
          else
          {
            if (v12 < v24)
            {
              unsigned int v28 = *v15++;
              unint64_t v13 = v28 | (v13 << 32);
              v12 += 32;
            }
            int v29 = (_DWORD *)((unint64_t)v46 | (4 * v25));
            LODWORD(v27) = (-1 << (v24 - 1)) + *v29 + (v13 << -(char)v12 >> -(char)v24) + 1;
            *int v29 = v27;
            if (WORD1(v27))
            {
              *(unsigned char *)(result + 208) = 1;
              return result;
            }
            v12 -= v24;
          }
          if (v27 <= 0xFF && *(_DWORD *)(result + 224) == 5) {
            LOWORD(v27) = word_1DDBFE460[v27];
          }
          *(_WORD *)(v14 + 2 * v11++) = v27;
        }
        while (v11 != v5);
      }
      int v31 = *(_DWORD *)(result + 256);
      uint64_t v32 = v8 << (v31 != 0);
      uint64_t v33 = v32 + 1;
      uint64_t v34 = *(void *)(result + 264);
      if (v32 + 1 < (unint64_t)((*(void *)(result + 272) - v34) >> 1))
      {
        uint64_t v35 = (*(_DWORD *)(result + 52) + v31);
        if ((int)v35 < 1)
        {
          LODWORD(v35) = 0;
        }
        else
        {
          int v36 = *(__int16 *)(v34 + 2 * v32);
          uint64_t v37 = v35;
          unsigned __int8 v38 = (_WORD *)(a3 + 2 * v7);
          do
          {
            int v39 = (unsigned __int16)*v38 + v36;
            if (v39 >= 1)
            {
              if (v39 >= 0xFFFF) {
                LOWORD(v39) = -1;
              }
              *unsigned __int8 v38 = v39;
            }
            ++v38;
            --v37;
          }
          while (v37);
        }
        if ((int)v35 < (int)v5)
        {
          int v40 = *(__int16 *)(v34 + 2 * v33);
          __int16 v41 = (_WORD *)(a3 + 2 * v7 + 2 * v35);
          uint64_t v42 = v5 - v35;
          do
          {
            int v43 = (unsigned __int16)*v41 + v40;
            if (v43 >= 1)
            {
              if (v43 >= 0xFFFF) {
                LOWORD(v43) = -1;
              }
              _WORD *v41 = v43;
            }
            ++v41;
            --v42;
          }
          while (v42);
        }
      }
      a2 = v8 + 1;
      v7 += v5;
    }
    while (v8 + 1 != v3);
  }
  return result;
}

void sub_1DDB38440(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB38454(void *a1)
{
  *a1 = &unk_1F397A190;
  uint64_t v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  *a1 = &unk_1F397A0B8;
  uint64_t v4 = (std::__shared_weak_count *)a1[25];
  if (v4) {
    sub_1DDA18310(v4);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDB384EC(void *a1)
{
  *a1 = &unk_1F397A190;
  uint64_t v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  *a1 = &unk_1F397A0B8;
  uint64_t v4 = (std::__shared_weak_count *)a1[25];
  if (v4) {
    sub_1DDA18310(v4);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

double sub_1DDB38598@<D0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  unint64_t v10 = a2;
  *a6 = 0;
  a6[1] = 0;
  if (!*a5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(int *)(*a5 + 72) < 3) {
    sub_1DDB3891C(a1, &v10, a3, a4, a5, &v9);
  }
  else {
    sub_1DDB3866C(a1, &v10, a3, a4, a5, &v9);
  }
  double result = *(double *)&v9;
  *(_OWORD *)a6 = v9;
  return result;
}

void sub_1DDB38658(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB3866C(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  int v12 = operator new(0x140uLL);
  sub_1DDB38710(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDB386FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB38710(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5, void *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397A280;
  sub_1DDB3880C((uint64_t)(a1 + 3), a2, *a3, a4, a5, a6);
  return a1;
}

void sub_1DDB3875C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB38770(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397A280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB38790(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397A280;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB387E4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDB3880C(uint64_t a1, void *a2, unint64_t a3, void *a4, _OWORD *a5, void *a6)
{
  unsigned int v8 = (void *)sub_1DDAA58A8(a1, a2, a3, a4, a5);
  *unsigned int v8 = &unk_1F397A0B8;
  uint64_t v9 = a6[1];
  v8[24] = *a6;
  v8[25] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F397A190;
  *(unsigned char *)(a1 + 208) = 0;
  uint64_t v10 = *a6;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(*a6 + 72);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  sub_1DDA1D984((void *)(a1 + 232), *(const void **)(v10 + 48), *(void *)(v10 + 56), (uint64_t)(*(void *)(v10 + 56) - *(void *)(v10 + 48)) >> 2);
  uint64_t v11 = *a6;
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(*a6 + 144);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  sub_1DDA1D908((void *)(a1 + 264), *(const void **)(v11 + 120), *(void *)(v11 + 128), (uint64_t)(*(void *)(v11 + 128) - *(void *)(v11 + 120)) >> 1);
  *(_DWORD *)(a1 + 288) = 20;
  return a1;
}

void sub_1DDB388F0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[30] = v4;
    operator delete(v4);
  }
  sub_1DDB37B70(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB3891C(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X5>, void *a6@<X8>)
{
  int v12 = operator new(0xE8uLL);
  sub_1DDB389C0(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDB389AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB389C0(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5, void *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397A2D0;
  sub_1DDB38ABC((uint64_t)(a1 + 3), a2, *a3, a4, a5, a6);
  return a1;
}

void sub_1DDB38A0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB38A20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397A2D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB38A40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397A2D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB38A94(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDB38ABC(uint64_t a1, void *a2, unint64_t a3, void *a4, _OWORD *a5, void *a6)
{
  double result = (void *)sub_1DDAA58A8(a1, a2, a3, a4, a5);
  *double result = &unk_1F397A0B8;
  uint64_t v8 = a6[1];
  result[24] = *a6;
  result[25] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *double result = &unk_1F3979FB0;
  return result;
}

void sub_1DDB38B30(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA83CFC();
  unsigned int v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CLosslessJpegSRawUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1DDB39CD4;
  uint64_t v7[3] = &unk_1E6D04A58;
  v7[4] = v1;
  MEMORY[0x1E01C46E0](v7);
  sub_1DDAA5B9C(v1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 152))(v1))
  {
    unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(v1 + 24) + 16))(*(void *)(v1 + 24));
    unsigned int v5 = *(_DWORD *)(v1 + 40);
    if ((v5 & 0x80000000) != 0 || v5 < v4) {
      operator new[]();
    }
  }
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDB39B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(void), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a25) {
    MEMORY[0x1E01C3DA0](a25, 0x1000C8077774924);
  }
  MEMORY[0x1E01C3DA0](a30, 0x1000C80BDFB0063);
  MEMORY[0x1E01C3DA0](a10, 0x1000C8077774924);
  a11[2](a11);

  _Unwind_Resume(a1);
}

void sub_1DDB39CD4(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  unsigned int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CLosslessJpegSRawUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDB39D5C(int *a1)
{
  return 3 * (*(uint64_t (**)(int *))(*(void *)a1 + 128))(a1) * a1[12];
}

void *sub_1DDB39DAC(void *a1)
{
  *a1 = &unk_1F397A320;
  uint64_t v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1F39627F0;
  unsigned int v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDB39E38(void *a1)
{
  *a1 = &unk_1F397A320;
  uint64_t v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1F39627F0;
  unsigned int v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

double sub_1DDB39ED8@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x58uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1F397A460;
  v4[4] = 0;
  v4[5] = 0;
  v4[3] = &unk_1F397A418;
  *((unsigned char *)v4 + 48) = 0;
  double result = *a1;
  v4[7] = *(void *)a1;
  v4[9] = 0;
  v4[10] = 0;
  v4[8] = 0;
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void *sub_1DDB39F60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1DDB3A120(a1, a2);
}

double sub_1DDB39F88()
{
  return 0.4;
}

void *sub_1DDB39F94@<X0>(void *a1@<X8>)
{
  uint64_t v2 = 0x3FD999999999999ALL;
  return sub_1DDA25B2C(a1, 4uLL, &v2);
}

void sub_1DDB39FD4(void *a1)
{
  sub_1DDB3A00C(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB3A00C(void *a1)
{
  *a1 = &unk_1F397A418;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1F3971328;
  unsigned int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1DDA18310(v3);
  }
  return a1;
}

void sub_1DDB3A084(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397A460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB3A0A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397A460;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB3A0F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_1DDB3A120@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x58uLL);
  double result = sub_1DDB3A17C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDB3A168(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB3A17C(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397A460;
  sub_1DDB3A1D8((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1DDB3A1C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB3A1D8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F397A418;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  sub_1DDA1808C((void *)(a1 + 40), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  return a1;
}

void sub_1DDB3A248(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_1F3971328;
  unsigned int v3 = (std::__shared_weak_count *)v1[2];
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB3A27C(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  unsigned int v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CNikonNRWUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1DDB3A514;
  v19[3] = &unk_1E6D04A58;
  v19[4] = a1;
  os_signpost_id_t v4 = (void (**)(void))MEMORY[0x1E01C46E0](v19);
  unsigned int v5 = *(_DWORD *)(a1 + 44);
  int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v7 = ((3 * v5) >> 1) & 0x1FFFFFFF;
  if ((*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1) < v7 * v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = sub_1DDAA5B9C(a1);
  if (v6)
  {
    uint64_t v9 = (char *)v8;
    int v10 = 0;
    uint64_t v11 = 2 * v5 - v7;
    do
    {
      int v12 = &v9[v11];
      (*(void (**)(void, char *, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), &v9[v11], ((3 * v5) >> 1) & 0x1FFFFFFF);
      if (v5)
      {
        for (unsigned int i = 0; i < v5; i += 8)
        {
          int v14 = *(_DWORD *)v12;
          unsigned int v15 = *((_DWORD *)v12 + 1);
          unsigned int v16 = *((_DWORD *)v12 + 2);
          int v17 = (*(_DWORD *)v12 >> 8) & 0xFFF;
          *(_WORD *)uint64_t v9 = *(_DWORD *)v12 >> 20;
          *((_WORD *)v9 + 1) = v17;
          *((_WORD *)v9 + 2) = (v15 >> 28) & 0xF | (16 * v14);
          *((_WORD *)v9 + 3) = HIWORD(v15) & 0xFFF;
          *((_WORD *)v9 + 4) = (unsigned __int16)v15 >> 4;
          *((_WORD *)v9 + 5) = HIBYTE(v16) | ((v15 & 0xF) << 8);
          *((_WORD *)v9 + 6) = (v16 >> 12) & 0xFFF;
          *((_WORD *)v9 + 7) = v16 & 0xFFF;
          v9 += 16;
          v12 += 12;
        }
      }
      ++v10;
    }
    while (v10 != v6);
  }
  v4[2](v4);
}

void sub_1DDB3A4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB3A514(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  unsigned int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CNikonNRWUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDB3A59C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = sub_1DDBF0D7C(a1, a2);
  *(void *)uint64_t v5 = &unk_1F397A5A0;
  *(_OWORD *)(v5 + 16) = 0u;
  int v6 = (char **)(v5 + 16);
  __int16 v44 = (char **)(v5 + 40);
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_DWORD *)(a1 + 12) = sub_1DDA19EC8(*a3);
  int v7 = sub_1DDA19EC8(*a3);
  int v8 = sub_1DDA19EC8(*a3);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      unsigned int v10 = sub_1DDA19EC8(*a3);
      uint64_t v11 = sub_1DDA19EC8(*a3);
      uint64_t v12 = v11;
      int v14 = *(unint64_t **)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 32);
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = ((char *)v14 - *v6) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          sub_1DDA17F78();
        }
        uint64_t v17 = v13 - (void)*v6;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          int v20 = (char *)sub_1DDA1814C(a1 + 32, v19);
        }
        else {
          int v20 = 0;
        }
        unsigned int v21 = (unint64_t *)&v20[8 * v16];
        *unsigned int v21 = v10 | (unint64_t)(v12 << 32);
        unsigned int v15 = v21 + 1;
        unint64_t v23 = *(char **)(a1 + 16);
        unsigned int v22 = *(char **)(a1 + 24);
        if (v22 != v23)
        {
          do
          {
            unint64_t v24 = *((void *)v22 - 1);
            v22 -= 8;
            *--unsigned int v21 = v24;
          }
          while (v22 != v23);
          unsigned int v22 = *v6;
        }
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v15;
        *(void *)(a1 + 32) = &v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *int v14 = v10 | (unint64_t)(v11 << 32);
        unsigned int v15 = v14 + 1;
      }
      *(void *)(a1 + 24) = v15;
    }
  }
  if (v8)
  {
    for (int j = 0; j != v8; ++j)
    {
      int v26 = sub_1DDA19EC8(*a3);
      int v27 = sub_1DDA19EC8(*a3);
      int v28 = sub_1DDA19EC8(*a3);
      int v29 = sub_1DDA19EC8(*a3);
      int v30 = v29;
      int v31 = *(_DWORD **)(a1 + 48);
      unint64_t v32 = *(void *)(a1 + 56);
      if ((unint64_t)v31 >= v32)
      {
        uint64_t v34 = ((char *)v31 - *v44) >> 4;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60) {
          sub_1DDA17F78();
        }
        uint64_t v36 = v32 - (void)*v44;
        if (v36 >> 3 > v35) {
          unint64_t v35 = v36 >> 3;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37) {
          unsigned __int8 v38 = (char *)sub_1DDA19838(a1 + 56, v37);
        }
        else {
          unsigned __int8 v38 = 0;
        }
        int v39 = &v38[16 * v34];
        *(_DWORD *)int v39 = v26;
        *((_DWORD *)v39 + 1) = v27;
        *((_DWORD *)v39 + 2) = v28;
        *((_DWORD *)v39 + 3) = v30;
        __int16 v41 = *(char **)(a1 + 40);
        int v40 = *(char **)(a1 + 48);
        uint64_t v42 = v39;
        if (v40 != v41)
        {
          do
          {
            *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
            v42 -= 16;
            v40 -= 16;
          }
          while (v40 != v41);
          int v40 = *v44;
        }
        uint64_t v33 = v39 + 16;
        *(void *)(a1 + 40) = v42;
        *(void *)(a1 + 48) = v39 + 16;
        *(void *)(a1 + 56) = &v38[16 * v37];
        if (v40) {
          operator delete(v40);
        }
      }
      else
      {
        _DWORD *v31 = v26;
        v31[1] = v27;
        uint64_t v33 = v31 + 4;
        v31[2] = v28;
        v31[3] = v29;
      }
      *(void *)(a1 + 48) = v33;
    }
  }
  return a1;
}

void sub_1DDB3A860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  unint64_t v13 = *a10;
  if (*a10)
  {
    *(void *)(v10 + 48) = v13;
    operator delete(v13);
  }
  int v14 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 24) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDB3A8C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v75[2] = *MEMORY[0x1E4F143B8];
  unsigned int v70 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5);
  uint64_t v9 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v6, *(unsigned int *)(a1 + 12), v7, v8);
  objc_msgSend_setObject_forKeyedSubscript_(v70, v10, (uint64_t)v9, @"BayerPhase", v11);

  int v71 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v12, v13, v14, v15);
  unint64_t v19 = *(unint64_t **)(a1 + 16);
  for (int i = *(unint64_t **)(a1 + 24); v19 != i; ++v19)
  {
    unint64_t v21 = *v19;
    v74[0] = @"BadRow";
    unsigned int v22 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v16, v21, v17, v18);
    v74[1] = @"BadCol";
    v75[0] = v22;
    int v26 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v23, HIDWORD(v21), v24, v25);
    v75[1] = v26;
    int v28 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v27, (uint64_t)v75, (uint64_t)v74, 2);
    objc_msgSend_addObject_(v71, v29, (uint64_t)v28, v30, v31);
  }
  objc_msgSend_setObject_forKeyedSubscript_(v70, v16, (uint64_t)v71, @"BadPoints", v18);
  int v39 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v32, v33, v34, v35);
  __int16 v41 = *(unsigned int **)(a1 + 40);
  for (int j = *(unsigned int **)(a1 + 48); v41 != j; v41 += 4)
  {
    uint64_t v42 = *v41;
    uint64_t v43 = v41[1];
    uint64_t v44 = v41[2];
    uint64_t v45 = v41[3];
    v72[0] = @"Top";
    __int16 v46 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v36, v42, v37, v38);
    v73[0] = v46;
    v72[1] = @"Left";
    unsigned __int8 v50 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v47, v43, v48, v49);
    v73[1] = v50;
    v72[2] = @"Bottom";
    int v54 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v51, v44, v52, v53);
    v73[2] = v54;
    v72[3] = @"Right";
    __int16 v58 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v55, v45, v56, v57);
    v73[3] = v58;
    unsigned int v60 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v59, (uint64_t)v73, (uint64_t)v72, 4);
    objc_msgSend_addObject_(v39, v61, (uint64_t)v60, v62, v63);
  }
  objc_msgSend_setObject_forKeyedSubscript_(v70, v36, (uint64_t)v39, @"BadRects", v38);
  unsigned int v64 = [RAWOpcodeFixBadPixelsList alloc];
  unsigned int v68 = objc_msgSend_initWithArguments_(v64, v65, (uint64_t)v70, v66, v67);

  return v68;
}

void sub_1DDB3AB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1DDB3AC40(void *a1)
{
  sub_1DDB3AC80(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB3AC78()
{
  return 5;
}

void *sub_1DDB3AC80(void *a1)
{
  *a1 = &unk_1F397A5A0;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

id sub_1DDB3ACE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v61[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_numberWithUnsignedLong_(NSNumber, a2, (uint64_t)sub_1DDB3B0D0, a4, a5);
  uint64_t v9 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v6, (uint64_t)sub_1DDB3B140, v7, v8);
  uint64_t v13 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v10, (uint64_t)sub_1DDB3B14C, v11, v12);
  __int16 v47 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v14, (uint64_t)sub_1DDA818EC, v15, v16);
  __int16 v46 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v17, (uint64_t)sub_1DDB3B158, v18, v19);
  uint64_t v23 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v20, (uint64_t)sub_1DDB3B164, v21, v22);
  uint64_t v43 = *MEMORY[0x1E4F30058];
  v50[0] = *MEMORY[0x1E4F30038];
  uint64_t v44 = v50[0];
  v50[1] = v43;
  v60[0] = MEMORY[0x1E4F1CC38];
  v60[1] = @"com.nikon.raw-image";
  uint64_t v41 = *MEMORY[0x1E4F30050];
  uint64_t v51 = *MEMORY[0x1E4F30018];
  uint64_t v42 = v51;
  uint64_t v52 = v41;
  v60[2] = @".nef.";
  v60[3] = &unk_1F39AEFF0;
  uint64_t v39 = *MEMORY[0x1E4F30048];
  uint64_t v53 = *MEMORY[0x1E4F30040];
  uint64_t v40 = v53;
  uint64_t v54 = v39;
  v60[4] = &unk_1F39AF008;
  v60[5] = v5;
  uint64_t v24 = (void *)v5;
  uint64_t v26 = *MEMORY[0x1E4F30020];
  uint64_t v55 = *MEMORY[0x1E4F30000];
  uint64_t v25 = v55;
  uint64_t v56 = v26;
  v60[6] = v9;
  v60[7] = v13;
  int v27 = (void *)v9;
  uint64_t v29 = *MEMORY[0x1E4F30028];
  uint64_t v57 = *MEMORY[0x1E4F30008];
  uint64_t v28 = v57;
  uint64_t v58 = v29;
  v60[8] = v47;
  v60[9] = v46;
  uint64_t v59 = *MEMORY[0x1E4F30030];
  uint64_t v30 = v59;
  uint64_t v45 = (void *)v23;
  v60[10] = v23;
  uint64_t v38 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v31, (uint64_t)v60, (uint64_t)v50, 11);
  v61[0] = v38;
  v48[0] = v44;
  v48[1] = v43;
  v49[0] = MEMORY[0x1E4F1CC38];
  v49[1] = @"com.nikon.nrw-raw-image";
  v48[2] = v42;
  v48[3] = v41;
  v49[2] = @".nrw.";
  v49[3] = &unk_1F39AEFF0;
  v48[4] = v40;
  v48[5] = v39;
  v49[4] = &unk_1F39AF008;
  v49[5] = v24;
  v48[6] = v25;
  v48[7] = v26;
  v49[6] = v27;
  v49[7] = v13;
  v48[8] = v28;
  v48[9] = v29;
  v49[8] = v47;
  v49[9] = v46;
  v48[10] = v30;
  v49[10] = v45;
  uint64_t v33 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v32, (uint64_t)v49, (uint64_t)v48, 11);
  v61[1] = v33;
  uint64_t v36 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v34, (uint64_t)v61, 2, v35);

  return v36;
}

void sub_1DDB3B030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDB3B0D0(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  unsigned __int16 v5 = 42;
  return sub_1DDA57F94(a1, a2, &v5)
      && ((sub_1DDA844D0(@"com.nikon.raw-image", a3) & 1) != 0
       || (sub_1DDA844D0(@"com.nikon.nrw-raw-image", a3) & 1) != 0);
}

void sub_1DDB3B140(const void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1DDB3B14C(os_signpost_id_t a1)
{
  return sub_1DDA81764(a1);
}

uint64_t sub_1DDB3B158(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA7FF34(a1, a2, a3, &unk_1F397A5D8);
}

uint64_t sub_1DDB3B164(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA82568(a1, a2, a3, &unk_1F397A5D8);
}

void sub_1DDB3B170(void *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  char v11 = a2;
  id v10 = a3;
  id v9 = a4;
  sub_1DDB427E8(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;
}

void sub_1DDB3B1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

double sub_1DDB3B20C(uint64_t a1, void *a2, char a3, void *a4, void *a5)
{
  sub_1DDA3F2B0(a1, a2, a3, a4, a5);
  *(void *)uint64_t v5 = &unk_1F397A608;
  *(void *)(v5 + 1184) = 0;
  double result = 0.0;
  *(_OWORD *)(v5 + 1192) = 0u;
  *(_OWORD *)(v5 + 1216) = 0u;
  *(void *)(v5 + 1208) = v5 + 1216;
  *(_OWORD *)(v5 + 1240) = 0u;
  *(_DWORD *)(v5 + 1264) = 0;
  *(unsigned char *)(v5 + 1316) = 0;
  *(void *)(v5 + 1320) = 0;
  *(_WORD *)(v5 + 1328) = 0;
  *(_OWORD *)(v5 + 1280) = 0u;
  *(void *)(v5 + 1293) = 0;
  *(_DWORD *)(v5 + 1332) = 1;
  *(unsigned char *)(v5 + 1336) = 0;
  *(unsigned char *)(v5 + 1340) = 0;
  *(unsigned char *)(v5 + 1344) = 0;
  *(void *)(v5 + 1584) = 0;
  *(_DWORD *)(v5 + 1348) = 0;
  *(_WORD *)(v5 + 1384) = 0;
  *(void *)(v5 + 1376) = 0;
  *(_OWORD *)(v5 + 1360) = 0u;
  *(void *)(v5 + 1408) = 0;
  *(_OWORD *)(v5 + 1392) = 0u;
  *(unsigned char *)(v5 + 1416) = 0;
  *(void *)(v5 + 1440) = 0;
  *(_OWORD *)(v5 + 1424) = 0u;
  *(unsigned char *)(v5 + 1448) = 0;
  *(void *)(v5 + 1472) = 0;
  *(_OWORD *)(v5 + 1456) = 0u;
  *(unsigned char *)(v5 + 1480) = 0;
  *(_OWORD *)(v5 + 1488) = 0u;
  *(_OWORD *)(v5 + 1504) = 0u;
  *(_OWORD *)(v5 + 1520) = 0u;
  *(_OWORD *)(v5 + 1536) = 0u;
  *(_OWORD *)(v5 + 1552) = 0u;
  *(void *)(v5 + 1568) = 0;
  return result;
}

uint64_t sub_1DDB3B2E4(uint64_t a1)
{
  *(void *)a1 = &unk_1F397A608;
  uint64_t v2 = *(const void **)(a1 + 1584);
  if (v2) {
    CFRelease(v2);
  }
  unsigned int v3 = *(void **)(a1 + 1552);
  if (v3)
  {
    *(void *)(a1 + 1560) = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = *(void **)(a1 + 1512);
  if (v4)
  {
    *(void *)(a1 + 1520) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 1488);
  if (v5)
  {
    *(void *)(a1 + 1496) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 1456);
  if (v6)
  {
    *(void *)(a1 + 1464) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 1424);
  if (v7)
  {
    *(void *)(a1 + 1432) = v7;
    operator delete(v7);
  }
  long long v8 = *(void **)(a1 + 1392);
  if (v8)
  {
    *(void *)(a1 + 1400) = v8;
    operator delete(v8);
  }
  id v9 = *(void **)(a1 + 1360);
  if (v9)
  {
    *(void *)(a1 + 1368) = v9;
    operator delete(v9);
  }
  id v10 = *(std::__shared_weak_count **)(a1 + 1248);
  if (v10) {
    sub_1DDA18310(v10);
  }
  sub_1DDA2A4CC(a1 + 1208, *(char **)(a1 + 1216));
  if (*(char *)(a1 + 1207) < 0) {
    operator delete(*(void **)(a1 + 1184));
  }

  return sub_1DDA49A44(a1);
}

void sub_1DDB3B3E0(uint64_t a1)
{
  sub_1DDB3B2E4(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB3B418(uint64_t a1)
{
  memset(&__str, 0, sizeof(__str));
  sub_1DDA27D28(a1, &v19);
  uint64_t v2 = (*(int (**)(uint64_t))(*(void *)v19 + 48))(v19);
  if (v20) {
    sub_1DDA18310(v20);
  }
  uint64_t v23 = v2;
  sub_1DDA27D28(a1, &v19);
  uint64_t v3 = v19;
  LODWORD(v21) = 8;
  sub_1DDA1B3CC(&v17, (unsigned int *)&v21);
  BOOL v4 = sub_1DDA1A0CC(v3, (unsigned int *)&v17, (uint64_t)&__str);
  if (v20) {
    sub_1DDA18310(v20);
  }
  if (!v4) {
    goto LABEL_15;
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size != 5) {
    goto LABEL_15;
  }
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  int data = (int)p_str->__r_.__value_.__l.__data_;
  int v8 = p_str->__r_.__value_.__s.__data_[4];
  if (data != 1869310286 || v8 != 110)
  {
LABEL_15:
    sub_1DDA1B2DC(&v19, &v23);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 160))(a1, &v19);
LABEL_16:
    uint64_t v10 = 1;
    goto LABEL_17;
  }
  int v22 = 0;
  sub_1DDA27D28(a1, &v19);
  *(_DWORD *)(a1 + 1232) = sub_1DDA19EC8(v19);
  if (v20) {
    sub_1DDA18310(v20);
  }
  std::string::operator=((std::string *)(a1 + 1184), &__str);
  uint64_t v21 = 0;
  sub_1DDA27D28(a1, &v19);
  uint64_t v12 = (*(int (**)(uint64_t))(*(void *)v19 + 48))(v19);
  if (v20) {
    sub_1DDA18310(v20);
  }
  uint64_t v21 = v12;
  sub_1DDA1B2DC(&v19, &v21);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 144))(a1, &v19);
  sub_1DDA27D28(a1, &v17);
  sub_1DDA1B2DC(&v16, &v21);
  sub_1DDA49398((uint64_t)&v19, &v17, &v16);
  if (v18) {
    sub_1DDA18310(v18);
  }
  sub_1DDA27D28(a1, &v17);
  int v13 = sub_1DDA19E68(v17);
  if (v18) {
    sub_1DDA18310(v18);
  }
  if (v13 == 18761 || v13 == 19789)
  {
    if (v13 == 19789) {
      uint64_t v14 = 2;
    }
    else {
      uint64_t v14 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v14);
    sub_1DDA27D28(a1, &v17);
    int v15 = sub_1DDA19E68(v17);
    if (v18) {
      sub_1DDA18310(v18);
    }
    if (v15 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 664))(a1))
    {
      sub_1DDA27D28(a1, &v17);
      int v22 = sub_1DDA19EC8(v17);
      if (v18) {
        sub_1DDA18310(v18);
      }
      sub_1DDA18410((int *)&v17, &v22);
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 160))(a1, &v17);
      sub_1DDA49424((uint64_t)&v19);
      goto LABEL_16;
    }
  }
  sub_1DDA49424((uint64_t)&v19);
  uint64_t v10 = 0;
LABEL_17:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_1DDB3B7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    sub_1DDA18310(a4);
  }
  sub_1DDA49424((uint64_t)va);
  if (*(char *)(v4 - 17) < 0) {
    operator delete(*(void **)(v4 - 40));
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_1DDB3B848(uint64_t *result, long long *a2, int a3)
{
  switch(a3)
  {
    case 257:
      uint64_t v4 = a2;
      double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
      unint64_t v3 = 0x3F9EB851EB851EB8;
      goto LABEL_17;
    case 258:
      uint64_t v4 = a2;
      double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
      unint64_t v3 = 0x3FA999999999999ALL;
      goto LABEL_17;
    case 259:
      uint64_t v4 = a2;
      double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
      unint64_t v3 = 0x3FB1EB851EB851ECLL;
      goto LABEL_17;
    case 260:
      uint64_t v4 = a2;
      double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
      unint64_t v3 = 0x3FB999999999999ALL;
      goto LABEL_17;
    case 261:
      uint64_t v4 = a2;
      double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
      unint64_t v3 = 0x3FC0A3D70A3D70A4;
      goto LABEL_17;
    case 262:
      uint64_t v4 = a2;
      double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
      unint64_t v3 = 0x3FC3333333333333;
      goto LABEL_17;
    case 263:
      uint64_t v4 = a2;
      double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
      unint64_t v3 = 0x3FC5C28F5C28F5C3;
      goto LABEL_17;
    case 264:
      uint64_t v4 = a2;
      double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
      unint64_t v3 = 0x3FC999999999999ALL;
LABEL_17:
      result[7] = v3;
      break;
    default:
      switch(a3)
      {
        case 513:
          uint64_t v4 = a2;
          double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
          unint64_t v3 = 0xBF9EB851EB851EB8;
          goto LABEL_17;
        case 514:
          uint64_t v4 = a2;
          double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
          unint64_t v3 = 0xBFA999999999999ALL;
          goto LABEL_17;
        case 515:
          uint64_t v4 = a2;
          double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
          unint64_t v3 = 0xBFB1EB851EB851ECLL;
          goto LABEL_17;
        case 516:
          uint64_t v4 = a2;
          double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
          unint64_t v3 = 0xBFB999999999999ALL;
          goto LABEL_17;
        default:
          if (!a3)
          {
            uint64_t v4 = a2;
            double result = sub_1DDA4BE58((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1DDBFB044, &v4);
            result[7] = 0;
          }
          break;
      }
      break;
  }
  return result;
}

void sub_1DDB3BB38(uint64_t a1, std::string::size_type a2, unsigned __int16 *a3)
{
  v137[1] = *MEMORY[0x1E4F143B8];
  nullsub_6();
  unsigned int v6 = *a3;
  if (v6 > 0x3C)
  {
    uint64_t v7 = (uint64_t *)(a1 + 1240);
    if (*a3 > 0x92u)
    {
      if (*a3 > 0x96u)
      {
        if (v6 != 151)
        {
          if (v6 == 167)
          {
            if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0) {
              *(_DWORD *)(a1 + 1268) = *((_DWORD *)a3 + 2);
            }
          }
          else if (v6 == 176)
          {
            BOOL v8 = !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) && a3[1] == 7;
            if (v8 && *((_DWORD *)a3 + 1) == 16)
            {
              sub_1DDA27D28(a1, &__p);
              LODWORD(__src) = sub_1DDA3CE7C((uint64_t)a3);
              sub_1DDA1B4D8((int *)v136, (int *)&__src);
              sub_1DDA1A94C((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)v136, 0);
              if (*((void *)&__p + 1)) {
                sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
              }
              sub_1DDA27D28(a1, &__p);
              sub_1DDA19EC8(__p);
              if (*((void *)&__p + 1)) {
                sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
              }
              sub_1DDA27D28(a1, &__p);
              int v10 = sub_1DDA19EC8(__p);
              if (*((void *)&__p + 1)) {
                sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
              }
              sub_1DDA27D28(a1, &__p);
              sub_1DDA19EC8(__p);
              if (*((void *)&__p + 1)) {
                sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
              }
              sub_1DDA27D28(a1, &__p);
              sub_1DDA19EC8(__p);
              if (*((void *)&__p + 1)) {
                sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
              }
              *(unsigned char *)(a1 + 1328) = v10 != 0;
              sub_1DDA1AA18((uint64_t *)&__dst);
            }
          }
          return;
        }
        if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1)) {
          return;
        }
        if (*(char *)(a2 + 23) < 0) {
          sub_1DDA2639C(&__dst, *(void **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __dst = *(std::string *)a2;
        }
        std::string::append(&__dst, ":ColorBalance", 0xDuLL);
        sub_1DDA27D28(a1, v136);
        LODWORD(v127[0]) = *((_DWORD *)a3 + 2);
        sub_1DDA18410((int *)&__src, (int *)v127);
        sub_1DDA1A94C((uint64_t *)&__p, (uint64_t *)v136, (uint64_t)&__src, 0);
        if (v136[1]) {
          sub_1DDA18310((std::__shared_weak_count *)v136[1]);
        }
        int v72 = 0;
        int v73 = 4;
        do
        {
          sub_1DDA27D28(a1, v136);
          int v74 = sub_1DDA19DA0((uint64_t)v136[0]);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          int v72 = 16 * v72 + v74 - 48;
          --v73;
        }
        while (v73);
        if (v72 > 258)
        {
          if (v72 != 259)
          {
            if (v72 == 1282)
            {
              sub_1DDA27D28(a1, &__src);
              sub_1DDA49310((uint64_t *)v136, (uint64_t *)&__src);
              if (v134) {
                sub_1DDA18310(v134);
              }
              sub_1DDA27D28(a1, &__src);
              LODWORD(v127[0]) = 52;
              (*(void (**)(void *, void **, uint64_t))(*(void *)__src + 40))(__src, v127, 1);
              if (v134) {
                sub_1DDA18310(v134);
              }
              sub_1DDA27D28(a1, &__src);
              sub_1DDA19E68((uint64_t)__src);
              if (v134) {
                sub_1DDA18310(v134);
              }
              sub_1DDA27D28(a1, &__src);
              unsigned int v79 = sub_1DDA19E68((uint64_t)__src);
              if (v134) {
                sub_1DDA18310(v134);
              }
              sub_1DDA27D28(a1, &__src);
              sub_1DDA19E68((uint64_t)__src);
              if (v134) {
                sub_1DDA18310(v134);
              }
              *(double *)unsigned int v127 = (double)v79;
              sub_1DDA25B2C(&__src, 4uLL, v127);
              sub_1DDA47580(":BLACKLEVELS", (const void **)a2, v127);
              int32x2_t v132 = v127;
              int v80 = (char *)sub_1DDA52108((uint64_t **)(a1 + 264), v127, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v132) + 56;
              if (v80 != (char *)&__src) {
                sub_1DDA25BB0(v80, (char *)__src, (uint64_t)v134, ((char *)v134 - (unsigned char *)__src) >> 3);
              }
              if (v128 < 0) {
                operator delete(v127[0]);
              }
              if (__src)
              {
                int v134 = (std::__shared_weak_count *)__src;
                operator delete(__src);
              }
              sub_1DDA1AA18((uint64_t *)v136);
              goto LABEL_360;
            }
            goto LABEL_336;
          }
          std::string::append(&__dst, ":103", 4uLL);
          sub_1DDA27D28(a1, v136);
          LODWORD(__src) = 16;
          (*(void (**)(void *, void **, uint64_t))(*(void *)v136[0] + 40))(v136[0], &__src, 1);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          sub_1DDA27D28(a1, v136);
          unsigned int v75 = sub_1DDA19E68((uint64_t)v136[0]);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          sub_1DDA27D28(a1, v136);
          unsigned int v76 = sub_1DDA19E68((uint64_t)v136[0]);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          sub_1DDA27D28(a1, v136);
          unsigned int v78 = sub_1DDA19E68((uint64_t)v136[0]);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
        }
        else
        {
          if (v72 != 256)
          {
            if (v72 == 258)
            {
              std::string::append(&__dst, ":102", 4uLL);
              sub_1DDA27D28(a1, v136);
              LODWORD(__src) = 6;
              (*(void (**)(void *, void **, uint64_t))(*(void *)v136[0] + 40))(v136[0], &__src, 1);
              if (v136[1]) {
                sub_1DDA18310((std::__shared_weak_count *)v136[1]);
              }
              sub_1DDA27D28(a1, v136);
              unsigned int v75 = sub_1DDA19E68((uint64_t)v136[0]);
              if (v136[1]) {
                sub_1DDA18310((std::__shared_weak_count *)v136[1]);
              }
              sub_1DDA27D28(a1, v136);
              unsigned int v76 = sub_1DDA19E68((uint64_t)v136[0]);
              if (v136[1]) {
                sub_1DDA18310((std::__shared_weak_count *)v136[1]);
              }
              sub_1DDA27D28(a1, v136);
              unsigned int v77 = sub_1DDA19E68((uint64_t)v136[0]);
              if (v136[1]) {
                sub_1DDA18310((std::__shared_weak_count *)v136[1]);
              }
              sub_1DDA27D28(a1, v136);
              unsigned int v78 = sub_1DDA19E68((uint64_t)v136[0]);
              goto LABEL_357;
            }
LABEL_336:
            if ((v72 & 0xFFFFFF00) != 0x200) {
              goto LABEL_360;
            }
            if (v72 == 517)
            {
              uint64_t v119 = 14;
            }
            else
            {
              sub_1DDA27D28(a1, v136);
              LODWORD(__src) = 280;
              (*(void (**)(void *, void **, uint64_t))(*(void *)v136[0] + 40))(v136[0], &__src, 1);
              if (v136[1]) {
                sub_1DDA18310((std::__shared_weak_count *)v136[1]);
              }
              *(void *)(a1 + 1256) = 6;
              if ((v72 - 521) <= 0xB && ((1 << (v72 - 9)) & 0xA01) != 0) {
                *(void *)(a1 + 1256) = 10;
              }
              if ((v72 & 0xFFFFFFFE) != 0x216) {
                goto LABEL_378;
              }
              uint64_t v119 = 4;
            }
            *(void *)(a1 + 1256) = v119;
LABEL_378:
            if (*v7)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1E01C3B90](exception, "RawCameraException");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            sub_1DDAA520C(0x144uLL, v136);
            long long v122 = *(_OWORD *)v136;
            v136[0] = 0;
            v136[1] = 0;
            int v123 = *(std::__shared_weak_count **)(a1 + 1248);
            *(_OWORD *)uint64_t v7 = v122;
            if (v123)
            {
              sub_1DDA18310(v123);
              if (v136[1]) {
                sub_1DDA18310((std::__shared_weak_count *)v136[1]);
              }
            }
            sub_1DDA27D28(a1, v136);
            int v124 = v136[0];
            uint64_t v125 = sub_1DDA7EF68(*v7);
            (*(void (**)(void *, uint64_t, void))(*(void *)v124 + 32))(v124, v125, *(void *)(*v7 + 24));
            if (v136[1]) {
              sub_1DDA18310((std::__shared_weak_count *)v136[1]);
            }
            sub_1DDA27D28(a1, v136);
            *(void *)(a1 + 1272) = sub_1DDA19C94((uint64_t)v136[0]);
            if (v136[1]) {
              sub_1DDA18310((std::__shared_weak_count *)v136[1]);
            }
            goto LABEL_360;
          }
          std::string::append(&__dst, ":100", 4uLL);
          sub_1DDA27D28(a1, v136);
          LODWORD(__src) = 68;
          (*(void (**)(void *, void **, uint64_t))(*(void *)v136[0] + 40))(v136[0], &__src, 1);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          sub_1DDA27D28(a1, v136);
          unsigned int v75 = sub_1DDA19E68((uint64_t)v136[0]);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          sub_1DDA27D28(a1, v136);
          unsigned int v78 = sub_1DDA19E68((uint64_t)v136[0]);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          sub_1DDA27D28(a1, v136);
          unsigned int v76 = sub_1DDA19E68((uint64_t)v136[0]);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
        }
        sub_1DDA27D28(a1, v136);
        unsigned int v77 = sub_1DDA19E68((uint64_t)v136[0]);
LABEL_357:
        if (v136[1]) {
          sub_1DDA18310((std::__shared_weak_count *)v136[1]);
        }
        v136[0] = (void *)__PAIR64__(v76, v75);
        v136[1] = (void *)__PAIR64__(v77, v78);
        __src = &__dst;
        unsigned int v120 = sub_1DDA4B960((uint64_t **)(a1 + 120), (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&__src);
        sub_1DDA17E28((char *)v120 + 56, (char *)v136, (uint64_t)v137, 4uLL);
        goto LABEL_360;
      }
      if (v6 == 147)
      {
        LODWORD(__p) = 0;
        sub_1DDA1B3CC(&__dst, (unsigned int *)&__p);
        *(_DWORD *)(a1 + 1340) = sub_1DDA3F234((uint64_t)a3, (unsigned int *)&__dst);
        *(unsigned char *)(a1 + 1344) = 1;
        return;
      }
      if (v6 != 150 || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) != 0) {
        return;
      }
      if (!*(unsigned char *)(a1 + 1344))
      {
        if (sub_1DDA41E28((uint64_t)a3) == 46)
        {
          int v13 = 3;
        }
        else
        {
          if (sub_1DDA41E28((uint64_t)a3) != 624) {
            goto LABEL_367;
          }
          int v13 = 4;
        }
        *(_DWORD *)(a1 + 1340) = v13;
        *(unsigned char *)(a1 + 1344) = 1;
      }
LABEL_367:
      sub_1DDA27D28(a1, &__dst);
      int v121 = sub_1DDA19CA4((uint64_t)__dst.__r_.__value_.__l.__data_);
      LODWORD(v136[0]) = *((_DWORD *)a3 + 2);
      LODWORD(__p) = v121;
      *(void *)(a1 + 1320) = *sub_1DDA2A648((int *)&__p, (unsigned int *)v136);
      if (__dst.__r_.__value_.__l.__size_) {
        sub_1DDA18310((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
      }
      return;
    }
    if (*a3 > 0x44u)
    {
      if (v6 != 69)
      {
        if (v6 != 140 || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) != 0) {
          return;
        }
        goto LABEL_367;
      }
      if (a3[1] != 3 || *((_DWORD *)a3 + 1) != 4) {
        return;
      }
      memset(&__dst, 0, sizeof(__dst));
      BOOL v57 = sub_1DDA45C20(a1, (uint64_t)a3, &__dst.__r_.__value_.__l.__data_);
      unint64_t v32 = (unsigned __int16 *)__dst.__r_.__value_.__r.__words[0];
      if (v57)
      {
        int v58 = *(unsigned __int8 *)(a1 + 1316);
        *(uint32x4_t *)(a1 + 1300) = vmovl_u16(*(uint16x4_t *)__dst.__r_.__value_.__l.__data_);
        if (!v58) {
          *(unsigned char *)(a1 + 1316) = 1;
        }
LABEL_155:
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
LABEL_363:
        operator delete(v32);
        return;
      }
    }
    else
    {
      if (v6 != 61)
      {
        if (v6 == 62
          && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0
          && *((_DWORD *)a3 + 1) == 1)
        {
          *(_DWORD *)(a1 + 1332) = sub_1DDA44F28((uint64_t)a3);
        }
        return;
      }
      if (a3[1] != 3 || *((_DWORD *)a3 + 1) != 4) {
        return;
      }
      memset(&__dst, 0, sizeof(__dst));
      BOOL v39 = sub_1DDA45C20(a1, (uint64_t)a3, &__dst.__r_.__value_.__l.__data_);
      unint64_t v32 = (unsigned __int16 *)__dst.__r_.__value_.__r.__words[0];
      if (v39
        && *((_DWORD *)a3 + 1) == (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 1)
      {
        long long __p = 0uLL;
        unsigned int v130 = 0;
        int v40 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 520))(a1);
        if ((v40 & 0xFFFFFFFD) == 0xC)
        {
          std::string::size_type v41 = __dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
          {
            uint64_t v42 = 0;
            unsigned int v43 = 0;
            char v44 = 14 - v40;
            uint64_t v45 = (double *)*((void *)&__p + 1);
            do
            {
              double v46 = (double)(*(unsigned __int16 *)(v41 + 2 * v42) >> v44);
              if (v45 >= v130)
              {
                uint64_t v48 = (double *)__p;
                uint64_t v49 = (uint64_t)((uint64_t)v45 - __p) >> 3;
                unint64_t v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 61) {
                  sub_1DDA17F78();
                }
                uint64_t v51 = (uint64_t)v130 - __p;
                if ((uint64_t)((uint64_t)v130 - __p) >> 2 > v50) {
                  unint64_t v50 = v51 >> 2;
                }
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v52 = v50;
                }
                if (v52)
                {
                  uint64_t v53 = (char *)sub_1DDA1814C((uint64_t)&v130, v52);
                  uint64_t v45 = (double *)*((void *)&__p + 1);
                  uint64_t v48 = (double *)__p;
                }
                else
                {
                  uint64_t v53 = 0;
                }
                uint64_t v54 = (double *)&v53[8 * v49];
                double *v54 = v46;
                __int16 v47 = v54 + 1;
                while (v45 != v48)
                {
                  uint64_t v55 = *((void *)v45-- - 1);
                  *((void *)v54-- - 1) = v55;
                }
                *(void *)&long long __p = v54;
                *((void *)&__p + 1) = v47;
                unsigned int v130 = (double *)&v53[8 * v52];
                if (v48) {
                  operator delete(v48);
                }
              }
              else
              {
                *uint64_t v45 = v46;
                __int16 v47 = v45 + 1;
              }
              *((void *)&__p + 1) = v47;
              std::string::size_type v41 = __dst.__r_.__value_.__r.__words[0];
              uint64_t v45 = v47;
              uint64_t v42 = ++v43;
            }
            while (v43 < (unint64_t)((uint64_t)(__dst.__r_.__value_.__l.__size_
                                                     - __dst.__r_.__value_.__r.__words[0]) >> 1));
          }
          sub_1DDA47580(":BLACKLEVELS", (const void **)a2, v136);
          __src = v136;
          uint64_t v56 = (char *)sub_1DDA52108((uint64_t **)(a1 + 264), v136, (uint64_t)&unk_1DDBFB044, (_OWORD **)&__src) + 56;
          if (v56 != (char *)&__p) {
            sub_1DDA25BB0(v56, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
          }
          if (SHIBYTE(v137[0]) < 0) {
            operator delete(v136[0]);
          }
        }
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        unint64_t v32 = (unsigned __int16 *)__dst.__r_.__value_.__r.__words[0];
      }
    }
LABEL_154:
    if (!v32) {
      return;
    }
    goto LABEL_155;
  }
  if (*a3 > 0xFu)
  {
    switch(*a3)
    {
      case 0x10u:
        if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1)
          && *((_DWORD *)a3 + 1) >= 0x84u
          && a3[1] == 7)
        {
          if (*(char *)(a2 + 23) < 0) {
            sub_1DDA2639C(&__dst, *(void **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string __dst = *(std::string *)a2;
          }
          std::string::append(&__dst, ":DataDump", 9uLL);
          sub_1DDA27D28(a1, v136);
          __src = (void *)(*((unsigned int *)a3 + 2) + 128);
          sub_1DDA18488(v127, (unint64_t *)&__src);
          sub_1DDA1A94C((uint64_t *)&__p, (uint64_t *)v136, (uint64_t)v127, 0);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          sub_1DDA27D28(a1, v136);
          unsigned int v69 = sub_1DDA19E68((uint64_t)v136[0]);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          sub_1DDA27D28(a1, v136);
          int v70 = sub_1DDA19E68((uint64_t)v136[0]);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          v136[0] = (void *)(v69 | 0x10000000000);
          LODWORD(v136[1]) = v70;
          __src = &__dst;
          int v71 = sub_1DDA4B960((uint64_t **)(a1 + 120), (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&__src);
          sub_1DDA17E28((char *)v71 + 56, (char *)v136, (uint64_t)&v136[1] + 4, 3uLL);
          sub_1DDA1AA18((uint64_t *)&__p);
          goto LABEL_361;
        }
        break;
      case 0x11u:
        if (a3[1] == 4 && *((_DWORD *)a3 + 1) == 1)
        {
          uint64_t v25 = *(void (**)(uint64_t, std::string::size_type, unsigned __int16 *))(*(void *)a1 + 720);
          v25(a1, a2, a3);
        }
        break;
      case 0x12u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Cu:
        return;
      case 0x14u:
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0)
        {
          sub_1DDA27D28(a1, &__p);
          LODWORD(__src) = *((_DWORD *)a3 + 2);
          sub_1DDA18410((int *)v136, (int *)&__src);
          sub_1DDA1A94C((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)v136, 0);
          if (*((void *)&__p + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
          }
          long long __p = 0uLL;
          unsigned int v130 = 0;
          sub_1DDA27D28(a1, v136);
          uint64_t v26 = v136[0];
          LODWORD(v127[0]) = 4;
          sub_1DDA1B3CC(&__src, (unsigned int *)v127);
          BOOL v27 = sub_1DDA1A0CC((uint64_t)v26, (unsigned int *)&__src, (uint64_t)&__p);
          if (v136[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v136[1]);
          }
          if (v27)
          {
            unsigned int v28 = 0;
            if (sub_1DDA48F20((const void **)&__p, "NRW "))
            {
              int v29 = 4;
              do
              {
                sub_1DDA27D28(a1, v136);
                int v30 = sub_1DDA19DA0((uint64_t)v136[0]);
                if (v136[1]) {
                  sub_1DDA18310((std::__shared_weak_count *)v136[1]);
                }
                unsigned int v28 = (v30 - 48) | (v28 << 8);
                --v29;
              }
              while (v29);
              BOOL v27 = 1;
              *(unsigned char *)(a1 + 1329) = 1;
            }
            else
            {
              BOOL v27 = 0;
            }
          }
          else
          {
            unsigned int v28 = 0;
          }
          if (SHIBYTE(v130) < 0) {
            operator delete((void *)__p);
          }
          sub_1DDA1AA18((uint64_t *)&__dst);
          if (v27)
          {
            if (v28 <= 0x10000) {
              uint64_t v101 = 5096;
            }
            else {
              uint64_t v101 = 56;
            }
            if (v101 + 16 <= (unint64_t)*((unsigned int *)a3 + 1) && a3[1] == 7)
            {
              sub_1DDA27D28(a1, &__p);
              v136[0] = (void *)(v101 + *((unsigned int *)a3 + 2));
              sub_1DDA1B2DC(&__src, (uint64_t *)v136);
              sub_1DDA1A94C((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)&__src, 0);
              if (*((void *)&__p + 1)) {
                sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
              }
              sub_1DDA47580(":0x14", (const void **)a2, (void **)&__p);
              sub_1DDA27D28(a1, v136);
              int v103 = sub_1DDA19EC8((uint64_t)v136[0]);
              if (v136[1]) {
                sub_1DDA18310((std::__shared_weak_count *)v136[1]);
              }
              sub_1DDA27D28(a1, v136);
              int v104 = sub_1DDA19EC8((uint64_t)v136[0]);
              if (v136[1]) {
                sub_1DDA18310((std::__shared_weak_count *)v136[1]);
              }
              sub_1DDA27D28(a1, v136);
              int v105 = sub_1DDA19EC8((uint64_t)v136[0]);
              if (v136[1]) {
                sub_1DDA18310((std::__shared_weak_count *)v136[1]);
              }
              sub_1DDA27D28(a1, v136);
              int v106 = sub_1DDA19EC8((uint64_t)v136[0]);
              if (v136[1]) {
                sub_1DDA18310((std::__shared_weak_count *)v136[1]);
              }
              LODWORD(v136[0]) = 4 * v103;
              HIDWORD(v136[0]) = v105 + v104;
              LODWORD(v136[1]) = 4 * v106;
              __src = &__p;
              int v107 = sub_1DDA4B960((uint64_t **)(a1 + 120), (void **)&__p, (uint64_t)&unk_1DDBFB044, (long long **)&__src);
              sub_1DDA17E28((char *)v107 + 56, (char *)v136, (uint64_t)&v136[1] + 4, 3uLL);
              if (SHIBYTE(v130) < 0) {
                operator delete((void *)__p);
              }
              sub_1DDA1AA18((uint64_t *)&__dst);
            }
          }
          else if (*((_DWORD *)a3 + 1) == 2560 && a3[1] == 7)
          {
            sub_1DDA47580(":0x14", (const void **)a2, (void **)&__dst.__r_.__value_.__l.__data_);
            sub_1DDA27D28(a1, v136);
            LODWORD(v127[0]) = *((_DWORD *)a3 + 2) + 1248;
            sub_1DDA18410((int *)&__src, (int *)v127);
            sub_1DDA1A94C((uint64_t *)&__p, (uint64_t *)v136, (uint64_t)&__src, 0);
            if (v136[1]) {
              sub_1DDA18310((std::__shared_weak_count *)v136[1]);
            }
            sub_1DDA27D28(a1, &__src);
            sub_1DDA29F88((uint64_t *)v136, (uint64_t *)&__src, 2);
            if (v134) {
              sub_1DDA18310(v134);
            }
            sub_1DDA27D28(a1, &__src);
            unsigned int v108 = sub_1DDA19E68((uint64_t)__src);
            if (v134) {
              sub_1DDA18310(v134);
            }
            sub_1DDA27D28(a1, &__src);
            int v109 = sub_1DDA19E68((uint64_t)__src);
            if (v134) {
              sub_1DDA18310(v134);
            }
            __src = (void *)(v108 | 0x10000000000);
            LODWORD(v134) = v109;
            v127[0] = &__dst;
            int v110 = sub_1DDA4B960((uint64_t **)(a1 + 120), (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)v127);
            sub_1DDA17E28((char *)v110 + 56, (char *)&__src, (uint64_t)&v134 + 4, 3uLL);
            sub_1DDA2A000((uint64_t *)v136);
            sub_1DDA1AA18((uint64_t *)&__p);
            goto LABEL_361;
          }
        }
        break;
      case 0x1Bu:
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0)
        {
          memset(&__dst, 0, sizeof(__dst));
          if (a3[1] == 3 && *((_DWORD *)a3 + 1) >= 7u)
          {
            BOOL v31 = sub_1DDA45C20(a1, (uint64_t)a3, &__dst.__r_.__value_.__l.__data_);
            unint64_t v32 = (unsigned __int16 *)__dst.__r_.__value_.__r.__words[0];
            if (!v31) {
              goto LABEL_154;
            }
            *(_DWORD *)(a1 + 1280) = *(unsigned __int16 *)__dst.__r_.__value_.__l.__data_;
            int v33 = v32[3];
            int v34 = v32[4];
            *(void *)(a1 + 1284) = 0;
            *(_DWORD *)(a1 + 1292) = v33;
            *(_DWORD *)(a1 + 1296) = v34;
            goto LABEL_155;
          }
        }
        break;
      case 0x1Du:
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0)
        {
          sub_1DDA27D28(a1, &__p);
          LODWORD(__src) = *((_DWORD *)a3 + 2);
          sub_1DDA18410((int *)v136, (int *)&__src);
          sub_1DDA1A94C((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)v136, 0);
          if (*((void *)&__p + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
          }
          *(_DWORD *)(a1 + 1264) = 0;
          int v19 = *((_DWORD *)a3 + 1);
          uint64_t v20 = MEMORY[0x1E4F14390];
          while (1)
          {
            sub_1DDA27D28(a1, &__p);
            unsigned int v21 = sub_1DDA19DA0(__p);
            BOOL v23 = v19-- != 0 && v21 != 0;
            if (*((void *)&__p + 1)) {
              sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
            }
            if (!v23) {
              break;
            }
            if ((*(_DWORD *)(v20 + 4 * v21 + 60) & 0x400) != 0) {
              unsigned int v24 = v21 - 48;
            }
            else {
              unsigned int v24 = (v21 - 10 * ((205 * v21) >> 11));
            }
            *(_DWORD *)(a1 + 1264) = v24 + 10 * *(_DWORD *)(a1 + 1264);
          }
          goto LABEL_335;
        }
        break;
      case 0x1Eu:
        uint64_t v35 = *(const void **)(a1 + 1584);
        if (v35) {
          CFRelease(v35);
        }
        LODWORD(__p) = 0;
        sub_1DDA1B3CC(&__dst, (unsigned int *)&__p);
        int v36 = sub_1DDA3F234((uint64_t)a3, (unsigned int *)&__dst);
        if (v36 == 4)
        {
          unsigned int v68 = (CGColorSpace *)sub_1DDBEEE90();
          CGColorSpaceRef v38 = CGColorSpaceRetain(v68);
        }
        else
        {
          if (v36 == 2) {
            uint64_t v37 = (CGColorSpace *)sub_1DDBEEC5C();
          }
          else {
            uint64_t v37 = (CGColorSpace *)sub_1DDBEEBC4();
          }
          CGColorSpaceRef v38 = CGColorSpaceRetain(v37);
        }
        *(void *)(a1 + 1584) = v38;
        break;
      default:
        if (v6 == 37
          && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0
          && a3[1] == 7
          && *((_DWORD *)a3 + 1) >= 4u)
        {
          sub_1DDA27D28(a1, &__p);
          LODWORD(__src) = *((_DWORD *)a3 + 2);
          sub_1DDA18410((int *)v136, (int *)&__src);
          sub_1DDA1A94C((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)v136, 0);
          if (*((void *)&__p + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
          }
          sub_1DDA27D28(a1, &__p);
          unsigned int v14 = sub_1DDA19DA0(__p);
          if (*((void *)&__p + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
          }
          unsigned int v15 = (exp2((double)v14 / 12.0 + -5.0) * 100.0);
          switch(v14)
          {
            case '<':
              LODWORD(__src) = 100;
              sub_1DDA47580(":ISOInfo", (const void **)a2, (void **)&__p);
              v136[0] = &__p;
              int v112 = (char *)sub_1DDA52108((uint64_t **)(a1 + 192), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)v136);
              sub_1DDA17E28(v112 + 56, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
              if (SHIBYTE(v130) < 0) {
                operator delete((void *)__p);
              }
              sub_1DDA47580(":ISOInfo", (const void **)a2, (void **)&__p);
              v136[0] = &__p;
              uint64_t v17 = sub_1DDA70898((uint64_t **)(a1 + 1208), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)v136);
              unint64_t v18 = 0xBFE0000000000000;
              break;
            case '@':
              LODWORD(__src) = 125;
              sub_1DDA47580(":ISOInfo", (const void **)a2, (void **)&__p);
              v136[0] = &__p;
              int v111 = (char *)sub_1DDA52108((uint64_t **)(a1 + 192), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)v136);
              sub_1DDA17E28(v111 + 56, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
              if (SHIBYTE(v130) < 0) {
                operator delete((void *)__p);
              }
              sub_1DDA47580(":ISOInfo", (const void **)a2, (void **)&__p);
              v136[0] = &__p;
              uint64_t v17 = sub_1DDA70898((uint64_t **)(a1 + 1208), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)v136);
              unint64_t v18 = 0xBFC5C28F5C28F5C3;
              break;
            case 'D':
              LODWORD(__src) = 160;
              sub_1DDA47580(":ISOInfo", (const void **)a2, (void **)&__p);
              v136[0] = &__p;
              int v16 = (char *)sub_1DDA52108((uint64_t **)(a1 + 192), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)v136);
              sub_1DDA17E28(v16 + 56, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
              if (SHIBYTE(v130) < 0) {
                operator delete((void *)__p);
              }
              sub_1DDA47580(":ISOInfo", (const void **)a2, (void **)&__p);
              v136[0] = &__p;
              uint64_t v17 = sub_1DDA70898((uint64_t **)(a1 + 1208), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)v136);
              unint64_t v18 = 0x3FC5C28F5C28F5C3;
              break;
            default:
              LODWORD(__src) = v15;
              sub_1DDA47580(":ISOInfo", (const void **)a2, (void **)&__p);
              v136[0] = &__p;
              unsigned int v113 = (char *)sub_1DDA52108((uint64_t **)(a1 + 192), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)v136);
              sub_1DDA17E28(v113 + 56, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
              if (SHIBYTE(v130) < 0) {
                operator delete((void *)__p);
              }
              sub_1DDA47580(":ISOInfo", (const void **)a2, (void **)&__p);
              v136[0] = &__p;
              uint64_t v17 = sub_1DDA70898((uint64_t **)(a1 + 1208), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)v136);
              unint64_t v18 = 0x3FE0000000000000;
              break;
          }
          *((void *)v17 + 7) = v18;
          if (SHIBYTE(v130) < 0) {
            operator delete((void *)__p);
          }
          (*(void (**)(long long *__return_ptr, uint64_t, std::string::size_type))(*(void *)a1 + 392))(&__p, a1, a2);
          int v114 = sub_1DDA2A530(a1 + 192, (void **)&__p);
          BOOL v115 = (void **)(a1 + 200) != v114 && v114[8] != v114[7];
          if (SHIBYTE(v130) < 0) {
            operator delete((void *)__p);
          }
          if (!v115)
          {
            LODWORD(v136[0]) = v15;
            *(void *)&long long __p = a2;
            int v116 = sub_1DDA4B960((uint64_t **)(a1 + 192), (void **)a2, (uint64_t)&unk_1DDBFB044, (long long **)&__p);
            sub_1DDA17E28((char *)v116 + 56, (char *)v136, (uint64_t)v136 + 4, 1uLL);
          }
          if (*((_DWORD *)a3 + 1) >= 6u)
          {
            sub_1DDA27D28(a1, &__p);
            uint64_t v117 = __p;
            LODWORD(__src) = *((_DWORD *)a3 + 2) + 4;
            sub_1DDA18410((int *)v136, (int *)&__src);
            (*(void (**)(uint64_t, void **, void))(*(void *)v117 + 40))(v117, v136, 0);
            if (*((void *)&__p + 1)) {
              sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
            }
            sub_1DDA27D28(a1, &__p);
            int v118 = sub_1DDA19E68(__p);
            if (*((void *)&__p + 1)) {
              sub_1DDA18310(*((std::__shared_weak_count **)&__p + 1));
            }
            sub_1DDA47580(":ISOExpansion", (const void **)a2, (void **)&__p);
            sub_1DDB3B848((uint64_t *)a1, &__p, v118);
            if (SHIBYTE(v130) < 0) {
              operator delete((void *)__p);
            }
          }
LABEL_335:
          sub_1DDA1AA18((uint64_t *)&__dst);
        }
        break;
    }
    return;
  }
  if (v6 == 2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1)) {
      return;
    }
    if ((a3[1] | 4) != 7) {
      return;
    }
    if (!*((_DWORD *)a3 + 1)) {
      return;
    }
    LODWORD(__p) = 0;
    sub_1DDA1B3CC(&__dst, (unsigned int *)&__p);
    if (sub_1DDA3F234((uint64_t)a3, (unsigned int *)&__dst))
    {
      LODWORD(__src) = 0;
      sub_1DDA1B3CC(v136, (unsigned int *)&__src);
      if (sub_1DDA3F234((uint64_t)a3, (unsigned int *)v136) != 1) {
        return;
      }
    }
    if (a3[1] == 7)
    {
      unsigned int v66 = *((_DWORD *)a3 + 1);
      if (v66 < 2)
      {
LABEL_188:
        LODWORD(__src) = v66 != 1;
        sub_1DDA1B3CC(v136, (unsigned int *)&__src);
        LODWORD(__p) = sub_1DDA3F234((uint64_t)a3, (unsigned int *)v136);
        __dst.__r_.__value_.__r.__words[0] = a2;
        uint64_t v67 = sub_1DDA4B960((uint64_t **)(a1 + 192), (void **)a2, (uint64_t)&unk_1DDBFB044, (long long **)&__dst);
        sub_1DDA17E28((char *)v67 + 56, (char *)&__p, (uint64_t)&__p + 4, 1uLL);
        return;
      }
      LODWORD(__p) = 0;
      sub_1DDA1B3CC(&__dst, (unsigned int *)&__p);
      if (!sub_1DDA3F234((uint64_t)a3, (unsigned int *)&__dst))
      {
        LODWORD(__src) = 1;
        sub_1DDA1B3CC(v136, (unsigned int *)&__src);
        if (!sub_1DDA3F234((uint64_t)a3, (unsigned int *)v136)) {
          return;
        }
      }
    }
    unsigned int v66 = *((_DWORD *)a3 + 1);
    goto LABEL_188;
  }
  if (v6 != 4)
  {
    if (v6 != 12) {
      return;
    }
    BOOL v11 = !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) && a3[1] == 5;
    if (!v11 || *((_DWORD *)a3 + 1) != 4) {
      return;
    }
    if (*(char *)(a2 + 23) < 0) {
      sub_1DDA2639C(&__dst, *(void **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __dst = *(std::string *)a2;
    }
    std::string::append(&__dst, ":ColorBalance1", 0xEuLL);
    sub_1DDA27D28(a1, v136);
    LODWORD(v127[0]) = *((_DWORD *)a3 + 2);
    sub_1DDA18410((int *)&__src, (int *)v127);
    sub_1DDA1A94C((uint64_t *)&__p, (uint64_t *)v136, (uint64_t)&__src, 0);
    if (v136[1]) {
      sub_1DDA18310((std::__shared_weak_count *)v136[1]);
    }
    int v81 = 0;
    v136[0] = 0;
    v136[1] = 0;
    v137[0] = 0;
    do
    {
      sub_1DDA27D28(a1, &__src);
      int v82 = sub_1DDA19EC8((uint64_t)__src);
      if (v134) {
        sub_1DDA18310(v134);
      }
      int v84 = (char *)v136[1];
      if (v136[1] >= (void *)v137[0])
      {
        int v86 = (char *)v136[0];
        int64_t v87 = ((char *)v136[1] - (char *)v136[0]) >> 2;
        unint64_t v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 62) {
          sub_1DDA17F78();
        }
        int64_t v89 = v137[0] - (unint64_t)v136[0];
        if ((uint64_t)(v137[0] - (unint64_t)v136[0]) >> 1 > v88) {
          unint64_t v88 = v89 >> 1;
        }
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v88;
        }
        if (v90)
        {
          int v91 = (char *)sub_1DDA17F90((uint64_t)v137, v90);
          int v86 = (char *)v136[0];
          int v84 = (char *)v136[1];
        }
        else
        {
          int v91 = 0;
        }
        int v92 = &v91[4 * v87];
        *(_DWORD *)int v92 = v82;
        int v85 = v92 + 4;
        while (v84 != v86)
        {
          int v93 = *((_DWORD *)v84 - 1);
          v84 -= 4;
          *((_DWORD *)v92 - 1) = v93;
          v92 -= 4;
        }
        v136[0] = v92;
        v136[1] = v85;
        v137[0] = &v91[4 * v90];
        if (v86) {
          operator delete(v86);
        }
      }
      else
      {
        *(_DWORD *)v136[1] = v82;
        int v85 = v84 + 4;
      }
      v136[1] = v85;
      ++v81;
    }
    while (v81 != 8);
    int v94 = v136[0];
    int v95 = *((_DWORD *)v136[0] + 1);
    if (v95 != *((_DWORD *)v136[0] + 3) || v95 != *((_DWORD *)v136[0] + 5) || v95 != *((_DWORD *)v136[0] + 7))
    {
      uint64_t v96 = 0;
      uint64_t v97 = 0;
      do
      {
        int v98 = &v94[v96 + 1];
        if (*v98)
        {
          LODWORD(v83) = v94[v96];
          double v83 = (double)*(unint64_t *)&v83 / (double)*v98 * 256.0;
          v94[v96] = llround(v83);
        }
        else
        {
          *int v98 = 256;
          int v98 = &v94[2 * v97];
        }
        *int v98 = 256;
        ++v97;
        v96 += 2;
      }
      while (v96 != 8);
    }
    int v99 = v94[4];
    LODWORD(__src) = *v94;
    HIDWORD(__src) = v99;
    int v134 = (std::__shared_weak_count *)__PAIR64__(v94[6], v94[2]);
    v127[0] = &__dst;
    unsigned int v100 = sub_1DDA4B960((uint64_t **)(a1 + 120), (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)v127);
    sub_1DDA17E28((char *)v100 + 56, (char *)&__src, (uint64_t)&v135, 4uLL);
    if (v136[0])
    {
      v136[1] = v136[0];
      operator delete(v136[0]);
    }
LABEL_360:
    sub_1DDA1AA18((uint64_t *)&__p);
LABEL_361:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_362;
  }
  if (a3[1] == 2)
  {
    memset(&__dst, 0, sizeof(__dst));
    int v59 = sub_1DDA45530(a1, (uint64_t)a3, &__dst, 1);
    char v60 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (v59)
    {
      std::string::size_type v61 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__dst.__r_.__value_.__r.__words[2])
          : __dst.__r_.__value_.__l.__size_;
      if (v61 == 3)
      {
        p_dst = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        int data_low = LOWORD(p_dst->__r_.__value_.__l.__data_);
        int v64 = p_dst->__r_.__value_.__s.__data_[2];
        if (data_low == 21070 && v64 == 87) {
          *(unsigned char *)(a1 + 1329) = 1;
        }
      }
    }
    if (v60 < 0)
    {
LABEL_362:
      unint64_t v32 = (unsigned __int16 *)__dst.__r_.__value_.__r.__words[0];
      goto LABEL_363;
    }
  }
}

void sub_1DDB3DB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,std::__shared_weak_count *a33,int a34,__int16 a35,char a36,char a37)
{
  if (a33) {
    sub_1DDA18310(a33);
  }
  sub_1DDA1AA18((uint64_t *)&a15);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB3E018(uint64_t a1)
{
  sub_1DDA48424(a1, 0, __p);
  uint64_t v2 = sub_1DDA481F0(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDB3E070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB3E08C(uint64_t a1)
{
  sub_1DDA48424(a1, 0, __p);
  uint64_t v2 = sub_1DDA48264(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDB3E0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DDB3E100(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 448))(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 456))(a1);
  return ((v3 & 0xFFFFFFFF00000000) + v2) & 0xFFFFFFFF00000000 | (v3 + v2);
}

uint64_t sub_1DDB3E194(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1316)) {
    return *(void *)(a1 + 1300);
  }
  else {
    return sub_1DDA27EA8(a1);
  }
}

uint64_t sub_1DDB3E1C0(uint64_t a1)
{
  return 0;
}

unint64_t sub_1DDB3E208(uint64_t a1)
{
  sub_1DDA48424(a1, 0, __p);
  unint64_t v2 = sub_1DDA48394(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDB3E260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB3E27C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1328);
}

void sub_1DDB3E284(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1DDA47F74(a1, a2);
  sub_1DDA48424(a1, 1, __p);
  sub_1DDA476FC(a1, __p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_1DDA1A880(__p, "IFD0:SUBIFD2");
  sub_1DDA476FC(a1, __p, &v5);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:SUBIFD0");
  sub_1DDA476FC(a1, __p, &v4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((void)v8)
  {
    (*(void (**)(void, void))(*(void *)v8 + 64))(v8, *(void *)(a1 + 1584));
    sub_1DDA480D4(a2, &v8);
  }
  if ((void)v5)
  {
    (*(void (**)(void, void))(*(void *)v5 + 64))(v5, *(void *)(a1 + 1584));
    sub_1DDA480D4(a2, &v5);
  }
  if ((void)v4)
  {
    (*(void (**)(void, void))(*(void *)v4 + 64))(v4, *(void *)(a1 + 1584));
    sub_1DDA480D4(a2, &v4);
  }
  if (*((void *)&v4 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v5 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v5 + 1));
  }
  if (*((void *)&v8 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v8 + 1));
  }
}

void sub_1DDB3E41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a13) {
    sub_1DDA18310(a13);
  }
  unsigned int v21 = *(std::__shared_weak_count **)(v19 - 24);
  if (v21) {
    sub_1DDA18310(v21);
  }
  sub_1DDA18270((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1DDB3E4B8(std::string *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, void **a5@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a4 != 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!std::string::compare(this, "encrypted") || !std::string::compare(this, "encrypted2"))
  {
    uint64_t v9 = *(void *)(a2 + 1240);
    if (v9)
    {
      if (*(void *)(v9 + 24) >= 0x144uLL && *(void *)(a2 + 1256) <= 0x13BuLL)
      {
        int v10 = byte_1DDBFE7F3[*(unsigned __int8 *)(a2 + 1264)];
        int v11 = byte_1DDBFE7F3[((HIWORD(*(_DWORD *)(a2 + 1268)) ^ BYTE1(*(_DWORD *)(a2 + 1268)) ^ *(_DWORD *)(a2 + 1268)) ^ HIBYTE(*(_DWORD *)(a2 + 1268)))
                           + 256];
        uint64_t v12 = sub_1DDA7EF68(v9);
        uint64_t v13 = 0;
        int v14 = 96;
        do
        {
          v11 += v14 * v10;
          ++v14;
          v32[v13] = *(unsigned char *)(v12 + v13) ^ v11;
          ++v13;
        }
        while (v13 != 324);
        unsigned int v15 = &v32[*(void *)(a2 + 1256)];
        if (!std::string::compare(this, "encrypted"))
        {
          int v25 = *v15;
          int v26 = v15[2];
          int v27 = v15[4];
          int v23 = v15[6];
          if (*(void *)(a2 + 1272) == 1)
          {
            double v16 = (double)(v25 | (v15[1] << 8));
            double v17 = (double)(v26 | (v15[3] << 8));
            double v19 = (double)(v27 | (v15[5] << 8));
            int v24 = v15[7];
            goto LABEL_18;
          }
          double v16 = (double)(v15[1] | (v25 << 8));
          double v17 = (double)(v15[3] | (v26 << 8));
          double v19 = (double)(v15[5] | (v27 << 8));
          int v29 = v15[7];
        }
        else
        {
          double v16 = 1.0;
          double v17 = 1.0;
          double v18 = 1.0;
          double v19 = 1.0;
          if (std::string::compare(this, "encrypted2"))
          {
LABEL_23:
            sub_1DDA24B78(a5, 3uLL);
            int v30 = (double *)*a5;
            *int v30 = v16 / v17;
            v30[1] = 1.0;
            v30[2] = v18 / v19;
            return;
          }
          int v20 = v15[2];
          int v21 = *v15;
          int v22 = v15[6];
          int v23 = v15[4];
          if (*(void *)(a2 + 1272) == 1)
          {
            double v16 = (double)(v20 | (v15[3] << 8));
            double v17 = (double)(v21 | (v15[1] << 8));
            double v19 = (double)(v22 | (v15[7] << 8));
            int v24 = v15[5];
LABEL_18:
            int v28 = v23 | (v24 << 8);
LABEL_22:
            double v18 = (double)v28;
            goto LABEL_23;
          }
          double v16 = (double)(v15[3] | (v20 << 8));
          double v17 = (double)(v15[1] | (v21 << 8));
          double v19 = (double)(v15[7] | (v22 << 8));
          int v29 = v15[5];
        }
        int v28 = v29 | (v23 << 8);
        goto LABEL_22;
      }
    }
  }

  sub_1DDA282F0(a2, (void **)&this->__r_.__value_.__l.__data_, a3, 3, a5);
}

void sub_1DDB3E7D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB3E7EC(uint64_t a1)
{
  uint64_t v2 = a1 + 656;
  sub_1DDA48424(a1, 0, __p);
  uint64_t v3 = sub_1DDA2A530(v2, __p);
  if ((void **)(a1 + 664) == v3 || (long long v4 = (int *)v3[7], v3[8] == v4))
  {
    LOBYTE(v5) = 0;
    int v6 = 0;
  }
  else
  {
    int v5 = *v4;
    int v6 = 1;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_7;
    }
LABEL_9:
    LOWORD(result) = sub_1DDA27FA0();
    return (unsigned __int16)result;
  }
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  LODWORD(result) = ~(-1 << v5);
  return (unsigned __int16)result;
}

void sub_1DDB3E898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB3E8B4(uint64_t a1)
{
  uint64_t v2 = a1 + 656;
  sub_1DDA48424(a1, 0, __p);
  uint64_t v3 = sub_1DDA2A530(v2, __p);
  if ((void **)(a1 + 664) == v3 || (long long v4 = (unsigned int *)v3[7], v3[8] == v4))
  {
    uint64_t v5 = 0;
    char v6 = 0;
  }
  else
  {
    uint64_t v5 = *v4;
    char v6 = 1;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      return v5;
    }
    return sub_1DDA27FA8();
  }
  if ((v6 & 1) == 0) {
    return sub_1DDA27FA8();
  }
  return v5;
}

void sub_1DDB3E958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB3E974(uint64_t a1)
{
  uint64_t v2 = a1 + 584;
  sub_1DDA48424(a1, 0, __p);
  uint64_t v3 = sub_1DDA2A530(v2, __p);
  long long v4 = v3;
  if ((void **)(a1 + 592) == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((unsigned int *)v3 + 14);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((void **)(a1 + 592) == v4) {
    return sub_1DDA27FB8();
  }
  return v5;
}

void sub_1DDB3EA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB3EA20(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1280);
}

uint64_t sub_1DDB3EA28(uint64_t a1)
{
  return *(void *)(a1 + 1320);
}

BOOL sub_1DDB3EA30(uint64_t a1, void **a2, void *a3)
{
  uint64_t v5 = sub_1DDA2A530(a1 + 1208, a2);
  if ((void **)(a1 + 1216) != v5) {
    *a3 = v5[7];
  }
  return a1 + 1216 != (void)v5;
}

uint64_t sub_1DDB3EA78(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1336))
  {
    if (!*(unsigned char *)(a1 + 1344))
    {
      if (!*(unsigned char *)(a1 + 1329))
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 536))(a1) == 34713) {
          return 3;
        }
        else {
          return 2;
        }
      }
      return 5;
    }
    return *(unsigned int *)(a1 + 1340);
  }
  if (*(unsigned char *)(a1 + 1344)) {
    return *(unsigned int *)(a1 + 1340);
  }
  if (*(unsigned char *)(a1 + 1329)) {
    return 5;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 520))(a1) == 12) {
    return 6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 520))(a1) != 14)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return 100006;
}

void sub_1DDB3EBC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1DDB3EBDC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1332) == 3;
}

BOOL sub_1DDB3EBEC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1332) == 2;
}

void sub_1DDB3EBFC(unsigned char *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = &v64;
  sub_1DDA29B20((uint64_t)a1, &v64);
  uint64_t v5 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v64.__r_.__value_.__l.__size_;
  std::string::size_type v8 = v64.__r_.__value_.__r.__words[0];
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v9 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v9 = v64.__r_.__value_.__l.__size_;
  }
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v10 = &v64;
  }
  else {
    int v10 = (std::string *)v64.__r_.__value_.__r.__words[0];
  }
  if (v9 >= 5)
  {
    int v11 = (std::string *)((char *)v10 + v9);
    uint64_t v12 = v10;
    while (1)
    {
      uint64_t v13 = (std::string *)memchr(v12, 78, v9 - 4);
      if (!v13)
      {
LABEL_15:
        long long v4 = &v64;
        goto LABEL_16;
      }
      if (LODWORD(v13->__r_.__value_.__l.__data_) == 1330334030 && v13->__r_.__value_.__s.__data_[4] == 78) {
        break;
      }
      uint64_t v12 = (std::string *)((char *)&v13->__r_.__value_.__l.__data_ + 1);
      int64_t v9 = (char *)v11 - (char *)v12;
      if ((char *)v11 - (char *)v12 < 5) {
        goto LABEL_15;
      }
    }
    long long v4 = &v64;
    if (v13 != v11 && v13 == v10)
    {
      std::string::erase(&v64, 0, 5uLL);
      uint64_t v5 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v64.__r_.__value_.__l.__size_;
      std::string::size_type v8 = v64.__r_.__value_.__r.__words[0];
      char v6 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    }
  }
LABEL_16:
  if (v6 >= 0) {
    uint64_t v15 = v5;
  }
  else {
    uint64_t v15 = size;
  }
  if (v6 < 0) {
    long long v4 = (std::string *)v8;
  }
  if (v15 >= 7)
  {
    double v16 = (std::string *)((char *)v4 + v15);
    double v17 = v4;
    do
    {
      double v18 = (std::string *)memchr(v17, 67, v15 - 6);
      if (!v18) {
        break;
      }
      if (LODWORD(v18->__r_.__value_.__l.__data_) == 1280266051
        && *(_DWORD *)((char *)v18->__r_.__value_.__r.__words + 3) == 1481199692)
      {
        if (v18 != v16 && v18 == v4) {
          std::string::erase(&v64, 0, 7uLL);
        }
        break;
      }
      double v17 = (std::string *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
      uint64_t v15 = (char *)v16 - (char *)v17;
    }
    while ((char *)v16 - (char *)v17 >= 7);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[1329]) {
    int v20 = "nrw";
  }
  else {
    int v20 = "nef";
  }
  sub_1DDA1A880(__p, v20);
  unint64_t v21 = a2[2];
  unint64_t v22 = a2[1];
  if (v22 >= v21)
  {
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
    unint64_t v25 = v24 + 1;
    if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a2) >> 3);
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x555555555555555) {
      unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v27 = v25;
    }
    unsigned int v69 = a2 + 2;
    if (v27) {
      int v28 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v27);
    }
    else {
      int v28 = 0;
    }
    int v29 = &v28[24 * v24];
    unsigned int v65 = v28;
    unsigned int v66 = v29;
    unsigned int v68 = &v28[24 * v27];
    long long v30 = *(_OWORD *)__p;
    *((void *)v29 + 2) = v63;
    *(_OWORD *)int v29 = v30;
    __p[1] = 0;
    uint64_t v63 = 0;
    __p[0] = 0;
    uint64_t v67 = v29 + 24;
    sub_1DDA2A0E8(a2, &v65);
    uint64_t v31 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v65);
    int v32 = SHIBYTE(v63);
    a2[1] = v31;
    if (v32 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v23 = *(_OWORD *)__p;
    *(void *)(v22 + 16) = v63;
    *(_OWORD *)unint64_t v22 = v23;
    a2[1] = v22 + 24;
  }
  sub_1DDA1A880(__p, "nikon");
  unint64_t v34 = a2[1];
  unint64_t v33 = a2[2];
  if (v34 >= v33)
  {
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *a2) >> 3);
    unint64_t v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *a2) >> 3);
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x555555555555555) {
      unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v40 = v38;
    }
    unsigned int v69 = a2 + 2;
    if (v40) {
      std::string::size_type v41 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v40);
    }
    else {
      std::string::size_type v41 = 0;
    }
    uint64_t v42 = &v41[24 * v37];
    unsigned int v65 = v41;
    unsigned int v66 = v42;
    unsigned int v68 = &v41[24 * v40];
    long long v43 = *(_OWORD *)__p;
    *((void *)v42 + 2) = v63;
    *(_OWORD *)uint64_t v42 = v43;
    __p[1] = 0;
    uint64_t v63 = 0;
    __p[0] = 0;
    uint64_t v67 = v42 + 24;
    sub_1DDA2A0E8(a2, &v65);
    unint64_t v36 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v65);
    int v44 = SHIBYTE(v63);
    a2[1] = v36;
    if (v44 < 0)
    {
      operator delete(__p[0]);
      unint64_t v36 = a2[1];
    }
  }
  else
  {
    long long v35 = *(_OWORD *)__p;
    *(void *)(v34 + 16) = v63;
    *(_OWORD *)unint64_t v34 = v35;
    unint64_t v36 = v34 + 24;
    a2[1] = v34 + 24;
  }
  if (v36 >= a2[2])
  {
    uint64_t v46 = sub_1DDA49920(a2, (long long *)&v64);
  }
  else
  {
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1DDA2639C((unsigned char *)v36, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v45 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
      *(void *)(v36 + 16) = *((void *)&v64.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v36 = v45;
    }
    uint64_t v46 = v36 + 24;
    a2[1] = v36 + 24;
  }
  a2[1] = v46;
  if (!(*(unsigned int (**)(unsigned char *))(*(void *)a1 + 824))(a1))
  {
    if (!(*(unsigned int (**)(unsigned char *))(*(void *)a1 + 832))(a1)) {
      goto LABEL_96;
    }
    sub_1DDA1A880(__p, "rawm");
    unint64_t v48 = a2[1];
    unint64_t v53 = a2[2];
    if (v48 >= v53)
    {
      unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *a2) >> 3);
      unint64_t v55 = v49 + 1;
      if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1DDA17F78();
      }
      unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *a2) >> 3);
      if (2 * v56 > v55) {
        unint64_t v55 = 2 * v56;
      }
      if (v56 >= 0x555555555555555) {
        unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v52 = v55;
      }
      unsigned int v69 = a2 + 2;
      if (v52) {
        goto LABEL_91;
      }
      BOOL v57 = 0;
      goto LABEL_94;
    }
LABEL_83:
    long long v54 = *(_OWORD *)__p;
    *(void *)(v48 + 16) = v63;
    *(_OWORD *)unint64_t v48 = v54;
    a2[1] = v48 + 24;
    goto LABEL_96;
  }
  sub_1DDA1A880(__p, "raws");
  unint64_t v48 = a2[1];
  unint64_t v47 = a2[2];
  if (v48 < v47) {
    goto LABEL_83;
  }
  unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *a2) >> 3);
  unint64_t v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1DDA17F78();
  }
  unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *a2) >> 3);
  if (2 * v51 > v50) {
    unint64_t v50 = 2 * v51;
  }
  if (v51 >= 0x555555555555555) {
    unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v52 = v50;
  }
  unsigned int v69 = a2 + 2;
  if (v52)
  {
LABEL_91:
    BOOL v57 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v52);
    goto LABEL_94;
  }
  BOOL v57 = 0;
LABEL_94:
  int v58 = &v57[24 * v49];
  unsigned int v65 = v57;
  unsigned int v66 = v58;
  unsigned int v68 = &v57[24 * v52];
  long long v59 = *(_OWORD *)__p;
  *((void *)v58 + 2) = v63;
  *(_OWORD *)int v58 = v59;
  __p[1] = 0;
  uint64_t v63 = 0;
  __p[0] = 0;
  uint64_t v67 = v58 + 24;
  sub_1DDA2A0E8(a2, &v65);
  uint64_t v60 = a2[1];
  sub_1DDA2A2C8((uint64_t)&v65);
  int v61 = SHIBYTE(v63);
  a2[1] = v60;
  if (v61 < 0) {
    operator delete(__p[0]);
  }
LABEL_96:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
}

void sub_1DDB3F244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1DDA2A044((void ***)&__p);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1DDB3F2D0(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)MEMORY[0x1F4188790](a1);
  uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = (uint64_t)v1;
  int v6 = *v3;
  if (v6 == 51158)
  {
    if (v3[1] == 1 && *((_DWORD *)v3 + 1) == 1)
    {
      LODWORD(v228[0]) = 0;
      sub_1DDA1B3CC(&v222, (unsigned int *)v228);
      if (sub_1DDA49028(v4, (unsigned int *)&v222) == 1) {
        *(unsigned char *)(v5 + 1348) = 1;
      }
    }
  }
  else if (v6 == 51157)
  {
    if (v3[1] == 7)
    {
      sub_1DDA27D28((uint64_t)v1, &v222);
      LODWORD(__p[0]) = sub_1DDA3CE7C(v4);
      sub_1DDA1B4D8((int *)&v225, (int *)__p);
      sub_1DDA1A94C(v228, &v222, (uint64_t)&v225, 0);
      if (v223) {
        sub_1DDA18310(v223);
      }
      int v225 = 0;
      uint64_t v226 = 0;
      uint64_t v227 = 0;
      sub_1DDA27D28(v5, &v222);
      uint64_t v7 = v222;
      LODWORD(v218.__r_.__value_.__l.__data_) = 6;
      sub_1DDA1B3CC(__p, (unsigned int *)&v218);
      BOOL v8 = sub_1DDA1A0CC(v7, (unsigned int *)__p, (uint64_t)&v225);
      if (v223) {
        sub_1DDA18310(v223);
      }
      if (v8)
      {
        uint64_t v9 = HIBYTE(v227);
        if (v227 < 0) {
          uint64_t v9 = v226;
        }
        if (v9 == 5)
        {
          int v10 = (void **)&v225;
          if (v227 < 0) {
            int v10 = v225;
          }
          int v11 = *(_DWORD *)v10;
          int v12 = *((unsigned __int8 *)v10 + 4);
          if (v11 == 1869310286 && v12 == 110)
          {
            *(unsigned char *)(v5 + 1336) = 1;
            sub_1DDA27D28(v5, &v222);
            unsigned __int16 v14 = sub_1DDA19FB0(v222);
            if (v223) {
              sub_1DDA18310(v223);
            }
            if (v14 - 256 < 2 || v14 == 513 || v14 == 769)
            {
              sub_1DDA27D28(v5, &v222);
              int v15 = sub_1DDA19FB0(v222);
              if (v223) {
                sub_1DDA18310(v223);
              }
              if (!v15)
              {
                unint64_t v224 = 0;
                sub_1DDA27D28(v5, &v222);
                unint64_t v16 = (*(int (**)(uint64_t))(*(void *)v222 + 48))(v222);
                if (v223) {
                  sub_1DDA18310(v223);
                }
                unint64_t v224 = v16;
                sub_1DDA27D28(v5, &v222);
                int v17 = sub_1DDA19EC8(v222);
                if (v223) {
                  sub_1DDA18310(v223);
                }
                if (v17 == 2771273)
                {
                  sub_1DDA27D28(v5, &v222);
                  int v18 = sub_1DDA19EC8(v222);
                  if (v223) {
                    sub_1DDA18310(v223);
                  }
                  if (v18 == 8)
                  {
                    *(unsigned char *)(v5 + 1349) = 1;
                    sub_1DDA1A880(__p, "");
                    int v19 = sub_1DDA419CC(v5, (uint64_t)__p, &v222);
                    if (v221 < 0) {
                      operator delete(__p[0]);
                    }
                    if (v19)
                    {
                      uint64_t v20 = 0;
                      int v207 = (void **)(v5 + 1552);
                      unsigned int v208 = (char **)(v5 + 1568);
                      uint64_t v202 = v5 + 1512;
                      uint64_t v203 = v5 + 1488;
                      uint64_t v201 = v5 + 1424;
                      uint64_t v204 = v5 + 1456;
                      unsigned int v205 = (void **)(v5 + 1360);
                      int v206 = (void **)(v5 + 1392);
                      while (2)
                      {
                        unint64_t v21 = (char *)&v222 + 12 * v20;
                        int v23 = *((unsigned __int16 *)v21 + 2);
                        uint64_t v22 = (uint64_t)(v21 + 4);
                        switch(v23)
                        {
                          case 1:
                            if (*((_WORD *)&v222 + 6 * v20 + 3) != 7 || *((_DWORD *)&v222 + 3 * v20 + 2) != 12) {
                              goto LABEL_305;
                            }
                            sub_1DDA27D28(v5, &v218);
                            sub_1DDA18500(&v209, &v224);
                            unsigned int v219 = sub_1DDA3CE7C(v22);
                            LODWORD(v217.__r_.__value_.__l.__data_) = v209;
                            LODWORD(v211) = *sub_1DDA47EF8(&v217, &v219);
                            sub_1DDA1B4D8((int *)&v213, (int *)&v211);
                            sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v218, (uint64_t)&v213, 0);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            sub_1DDA27D28(v5, &v218);
                            unsigned int v24 = sub_1DDA19EC8((uint64_t)v218.__r_.__value_.__l.__data_);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            sub_1DDA27D28(v5, &v218);
                            unsigned int v25 = sub_1DDA19EC8((uint64_t)v218.__r_.__value_.__l.__data_);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            sub_1DDA27D28(v5, &v218);
                            int v26 = sub_1DDA19E68((uint64_t)v218.__r_.__value_.__l.__data_);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            if (!v26) {
                              *(float *)(v5 + 1576) = (float)v24 / (float)v25;
                            }
                            goto LABEL_304;
                          case 2:
                            if (*((_WORD *)&v222 + 6 * v20 + 3) != 7) {
                              goto LABEL_305;
                            }
                            sub_1DDA27D28(v5, &v218);
                            sub_1DDA18500(&v209, &v224);
                            unsigned int v219 = sub_1DDA3CE7C(v22);
                            LODWORD(v217.__r_.__value_.__l.__data_) = v209;
                            LODWORD(v211) = *sub_1DDA47EF8(&v217, &v219);
                            sub_1DDA1B4D8((int *)&v213, (int *)&v211);
                            sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v218, (uint64_t)&v213, 0);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            memset(&v218, 0, sizeof(v218));
                            memset(&v217, 0, sizeof(v217));
                            sub_1DDA27D28(v5, &v213);
                            int v32 = v213;
                            unsigned int v219 = 2;
                            sub_1DDA1B3CC(&v209, &v219);
                            if (sub_1DDA1A0CC((uint64_t)v32, (unsigned int *)&v209, (uint64_t)&v218))
                            {
                              sub_1DDA27D28(v5, &v211);
                              unint64_t v33 = v211;
                              unsigned int v215 = 2;
                              sub_1DDA1B3CC(&v216, &v215);
                              BOOL v34 = sub_1DDA1A0CC((uint64_t)v33, &v216, (uint64_t)&v217);
                              if (v212) {
                                sub_1DDA18310(v212);
                              }
                            }
                            else
                            {
                              BOOL v34 = 0;
                            }
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (v34)
                            {
                              if (!std::string::compare(&v218, "01") && !std::string::compare(&v217, "00"))
                              {
                                sub_1DDA27D28(v5, &v213);
                                int v141 = sub_1DDA19DA0((uint64_t)v213);
                                *(unsigned char *)(v5 + 1350) = v141;
                                if (v214)
                                {
                                  sub_1DDA18310(v214);
                                  int v141 = *(unsigned __int8 *)(v5 + 1350);
                                }
                                if (v141)
                                {
                                  sub_1DDA27D28(v5, &v213);
                                  *(unsigned char *)(v5 + 1352) = sub_1DDA19DA0((uint64_t)v213);
                                  if (v214) {
                                    sub_1DDA18310(v214);
                                  }
                                  sub_1DDA27D28(v5, &v213);
                                  unsigned int v142 = sub_1DDA19DA0((uint64_t)v213);
                                  *(unsigned char *)(v5 + 1351) = v142;
                                  if (v214)
                                  {
                                    sub_1DDA18310(v214);
                                    unsigned int v142 = *(unsigned __int8 *)(v5 + 1351);
                                  }
                                  if (v142 >= 2)
                                  {
                                    sub_1DDA27D28(v5, &v213);
                                    *(unsigned char *)(v5 + 1353) = sub_1DDA19DA0((uint64_t)v213);
                                    if (v214) {
                                      sub_1DDA18310(v214);
                                    }
                                    if (*(unsigned char *)(v5 + 1351))
                                    {
                                      unint64_t v143 = 0;
                                      do
                                      {
                                        sub_1DDA27D28(v5, &v213);
                                        int v144 = sub_1DDA19EC8((uint64_t)v213);
                                        if (v214) {
                                          sub_1DDA18310(v214);
                                        }
                                        sub_1DDA27D28(v5, &v213);
                                        int v145 = sub_1DDA19EC8((uint64_t)v213);
                                        if (v214) {
                                          sub_1DDA18310(v214);
                                        }
                                        if (!(v145 | v144)) {
                                          break;
                                        }
                                        double v146 = (double)v144 / (double)v145;
                                        uint64_t v147 = *(double **)(v5 + 1368);
                                        unint64_t v148 = *(void *)(v5 + 1376);
                                        if ((unint64_t)v147 >= v148)
                                        {
                                          uint64_t v150 = (double *)*v205;
                                          uint64_t v151 = ((char *)v147 - (unsigned char *)*v205) >> 3;
                                          unint64_t v152 = v151 + 1;
                                          if ((unint64_t)(v151 + 1) >> 61) {
                                            sub_1DDA17F78();
                                          }
                                          uint64_t v153 = v148 - (void)v150;
                                          if (v153 >> 2 > v152) {
                                            unint64_t v152 = v153 >> 2;
                                          }
                                          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8) {
                                            unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            unint64_t v154 = v152;
                                          }
                                          if (v154)
                                          {
                                            int v155 = (char *)sub_1DDA1814C(v5 + 1376, v154);
                                            uint64_t v147 = *(double **)(v5 + 1368);
                                            uint64_t v150 = *(double **)(v5 + 1360);
                                          }
                                          else
                                          {
                                            int v155 = 0;
                                          }
                                          int v156 = (double *)&v155[8 * v151];
                                          *int v156 = v146;
                                          uint64_t v149 = v156 + 1;
                                          while (v147 != v150)
                                          {
                                            uint64_t v157 = *((void *)v147-- - 1);
                                            *((void *)v156-- - 1) = v157;
                                          }
                                          *(void *)(v5 + 1360) = v156;
                                          *(void *)(v5 + 1368) = v149;
                                          *(void *)(v5 + 1376) = &v155[8 * v154];
                                          if (v150) {
                                            operator delete(v150);
                                          }
                                        }
                                        else
                                        {
                                          *uint64_t v147 = v146;
                                          uint64_t v149 = v147 + 1;
                                        }
                                        *(void *)(v5 + 1368) = v149;
                                        ++v143;
                                      }
                                      while (v143 < *(unsigned __int8 *)(v5 + 1351));
                                    }
                                    sub_1DDA27D28(v5, &v213);
                                    sub_1DDA19E68((uint64_t)v213);
                                    if (v214) {
                                      sub_1DDA18310(v214);
                                    }
                                  }
                                }
                              }
                              else
                              {
                                long long v35 = &v218;
                                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  long long v35 = (std::string *)v218.__r_.__value_.__r.__words[0];
                                }
                                unint64_t v36 = &v217;
                                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  unint64_t v36 = (std::string *)v217.__r_.__value_.__r.__words[0];
                                }
                                printf("Unknown version for Nikon Lens Distortion Correction.  The values are major: %s and minor: %s", (const char *)v35, (const char *)v36);
                              }
                            }
                            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v217.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v218.__r_.__value_.__l.__data_);
                            }
                            goto LABEL_304;
                          case 3:
                            if (*((_WORD *)&v222 + 6 * v20 + 3) != 7) {
                              goto LABEL_305;
                            }
                            sub_1DDA27D28(v5, &v218);
                            sub_1DDA18500(&v209, &v224);
                            unsigned int v219 = sub_1DDA3CE7C(v22);
                            LODWORD(v217.__r_.__value_.__l.__data_) = v209;
                            LODWORD(v211) = *sub_1DDA47EF8(&v217, &v219);
                            sub_1DDA1B4D8((int *)&v213, (int *)&v211);
                            sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v218, (uint64_t)&v213, 0);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            memset(&v218, 0, sizeof(v218));
                            memset(&v217, 0, sizeof(v217));
                            sub_1DDA27D28(v5, &v213);
                            unint64_t v47 = v213;
                            unsigned int v219 = 2;
                            sub_1DDA1B3CC(&v209, &v219);
                            if (sub_1DDA1A0CC((uint64_t)v47, (unsigned int *)&v209, (uint64_t)&v218))
                            {
                              sub_1DDA27D28(v5, &v211);
                              unint64_t v48 = v211;
                              unsigned int v215 = 2;
                              sub_1DDA1B3CC(&v216, &v215);
                              BOOL v49 = sub_1DDA1A0CC((uint64_t)v48, &v216, (uint64_t)&v217);
                              if (v212) {
                                sub_1DDA18310(v212);
                              }
                            }
                            else
                            {
                              BOOL v49 = 0;
                            }
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (!v49) {
                              goto LABEL_153;
                            }
                            if (std::string::compare(&v218, "01") || std::string::compare(&v217, "00"))
                            {
                              unint64_t v50 = &v218;
                              if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                unint64_t v50 = (std::string *)v218.__r_.__value_.__r.__words[0];
                              }
                              unint64_t v51 = &v217;
                              if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                unint64_t v51 = (std::string *)v217.__r_.__value_.__r.__words[0];
                              }
                              printf("Unknown version for Nikon Lens CA Correction.  The values are major: %s and minor: %s", (const char *)v50, (const char *)v51);
LABEL_153:
                              int v52 = 16;
                              goto LABEL_154;
                            }
                            sub_1DDA27D28(v5, &v213);
                            int v171 = sub_1DDA19DA0((uint64_t)v213);
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (!v171) {
                              goto LABEL_153;
                            }
                            sub_1DDA27D28(v5, &v213);
                            unsigned int v172 = sub_1DDA19DA0((uint64_t)v213);
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (v172 < 2) {
                              goto LABEL_153;
                            }
                            sub_1DDA27D28(v5, &v213);
                            int v173 = sub_1DDA19DA0((uint64_t)v213);
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (!v173) {
                              goto LABEL_153;
                            }
                            sub_1DDA27D28(v5, &v213);
                            int v174 = sub_1DDA19DA0((uint64_t)v213);
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (v174) {
                              goto LABEL_153;
                            }
                            unint64_t v175 = v172 >> 1;
                            sub_1DDA24B78(&v213, v175);
                            sub_1DDA24B78(&v211, v175);
                            uint64_t v176 = 0;
                            do
                            {
                              sub_1DDA27D28(v5, &v209);
                              int v177 = sub_1DDA19EC8(v209);
                              if (v210) {
                                sub_1DDA18310(v210);
                              }
                              sub_1DDA27D28(v5, &v209);
                              int v178 = sub_1DDA19EC8(v209);
                              if (v210) {
                                sub_1DDA18310(v210);
                              }
                              if (v178) {
                                double v179 = (double)v177 / (double)v178;
                              }
                              else {
                                double v179 = 0.0;
                              }
                              *((double *)v213 + v176++) = v179;
                            }
                            while (v175 != v176);
                            uint64_t v180 = 0;
                            if (v175 <= 1) {
                              uint64_t v181 = 1;
                            }
                            else {
                              uint64_t v181 = v175;
                            }
                            uint64_t v182 = 8 * v181;
                            do
                            {
                              sub_1DDA27D28(v5, &v209);
                              int v183 = sub_1DDA19EC8(v209);
                              if (v210) {
                                sub_1DDA18310(v210);
                              }
                              sub_1DDA27D28(v5, &v209);
                              int v184 = sub_1DDA19EC8(v209);
                              if (v210) {
                                sub_1DDA18310(v210);
                              }
                              if (v184) {
                                double v185 = (double)v183 / (double)v184;
                              }
                              else {
                                double v185 = 0.0;
                              }
                              *(double *)((char *)v211 + v180) = v185;
                              v180 += 8;
                            }
                            while (v182 != v180);
                            sub_1DDA27D28(v5, &v209);
                            int v186 = sub_1DDA19E68(v209);
                            if (v210) {
                              sub_1DDA18310(v210);
                            }
                            BOOL v187 = v186 != 0;
                            if (v211)
                            {
                              int v212 = (std::__shared_weak_count *)v211;
                              operator delete(v211);
                            }
                            if (v213)
                            {
                              int v214 = (std::__shared_weak_count *)v213;
                              operator delete(v213);
                            }
                            int v52 = 16 * v187;
LABEL_154:
                            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v217.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v218.__r_.__value_.__l.__data_);
                            }
                            sub_1DDA1AA18((uint64_t *)__p);
                            if (!v52)
                            {
LABEL_159:
                              if (*((_WORD *)&v222 + 6 * v20 + 3) == 7)
                              {
                                sub_1DDA27D28(v5, &v218);
                                sub_1DDA18500(&v209, &v224);
                                unsigned int v219 = sub_1DDA3CE7C(v22);
                                LODWORD(v217.__r_.__value_.__l.__data_) = v209;
                                LODWORD(v211) = *sub_1DDA47EF8(&v217, &v219);
                                sub_1DDA1B4D8((int *)&v213, (int *)&v211);
                                sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v218, (uint64_t)&v213, 0);
                                if (v218.__r_.__value_.__l.__size_) {
                                  sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                                }
                                memset(&v218, 0, sizeof(v218));
                                memset(&v217, 0, sizeof(v217));
                                sub_1DDA27D28(v5, &v213);
                                unint64_t v53 = v213;
                                unsigned int v219 = 2;
                                sub_1DDA1B3CC(&v209, &v219);
                                if (sub_1DDA1A0CC((uint64_t)v53, (unsigned int *)&v209, (uint64_t)&v218))
                                {
                                  sub_1DDA27D28(v5, &v211);
                                  long long v54 = v211;
                                  unsigned int v215 = 2;
                                  sub_1DDA1B3CC(&v216, &v215);
                                  BOOL v55 = sub_1DDA1A0CC((uint64_t)v54, &v216, (uint64_t)&v217);
                                  if (v212) {
                                    sub_1DDA18310(v212);
                                  }
                                }
                                else
                                {
                                  BOOL v55 = 0;
                                }
                                if (v214) {
                                  sub_1DDA18310(v214);
                                }
                                if (v55)
                                {
                                  if (!std::string::compare(&v218, "01") && !std::string::compare(&v217, "00"))
                                  {
                                    sub_1DDA27D28(v5, &v213);
                                    *(unsigned char *)(v5 + 1384) = sub_1DDA19DA0((uint64_t)v213);
                                    if (v214) {
                                      sub_1DDA18310(v214);
                                    }
                                    sub_1DDA27D28(v5, &v213);
                                    unsigned int v111 = sub_1DDA19DA0((uint64_t)v213);
                                    *(unsigned char *)(v5 + 1385) = v111;
                                    if (v214)
                                    {
                                      sub_1DDA18310(v214);
                                      unsigned int v111 = *(unsigned __int8 *)(v5 + 1385);
                                    }
                                    if (v111 >= 2)
                                    {
                                      sub_1DDA27D28(v5, &v213);
                                      *(unsigned char *)(v5 + 1386) = sub_1DDA19DA0((uint64_t)v213);
                                      if (v214) {
                                        sub_1DDA18310(v214);
                                      }
                                      sub_1DDA27D28(v5, &v213);
                                      float v112 = (double)sub_1DDA19DA0((uint64_t)v213) / 100.0;
                                      *(float *)(v5 + 1388) = v112;
                                      if (v214) {
                                        sub_1DDA18310(v214);
                                      }
                                      *(void *)(v5 + 1400) = *(void *)(v5 + 1392);
                                      if (*(unsigned char *)(v5 + 1385))
                                      {
                                        unint64_t v113 = 0;
                                        do
                                        {
                                          sub_1DDA27D28(v5, &v213);
                                          int v114 = sub_1DDA19EC8((uint64_t)v213);
                                          if (v214) {
                                            sub_1DDA18310(v214);
                                          }
                                          sub_1DDA27D28(v5, &v213);
                                          int v115 = sub_1DDA19EC8((uint64_t)v213);
                                          if (v214) {
                                            sub_1DDA18310(v214);
                                          }
                                          if (v114 | v115)
                                          {
                                            float v116 = (float)v114 / (float)v115;
                                            uint64_t v117 = *(float **)(v5 + 1400);
                                            unint64_t v118 = *(void *)(v5 + 1408);
                                            if ((unint64_t)v117 >= v118)
                                            {
                                              unsigned int v120 = (float *)*v206;
                                              uint64_t v121 = ((char *)v117 - (unsigned char *)*v206) >> 2;
                                              unint64_t v122 = v121 + 1;
                                              if ((unint64_t)(v121 + 1) >> 62) {
                                                sub_1DDA17F78();
                                              }
                                              uint64_t v123 = v118 - (void)v120;
                                              if (v123 >> 1 > v122) {
                                                unint64_t v122 = v123 >> 1;
                                              }
                                              if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL) {
                                                unint64_t v124 = 0x3FFFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v124 = v122;
                                              }
                                              if (v124)
                                              {
                                                uint64_t v125 = (char *)sub_1DDA17F90(v5 + 1408, v124);
                                                uint64_t v117 = *(float **)(v5 + 1400);
                                                unsigned int v120 = *(float **)(v5 + 1392);
                                              }
                                              else
                                              {
                                                uint64_t v125 = 0;
                                              }
                                              int v126 = (float *)&v125[4 * v121];
                                              *int v126 = v116;
                                              uint64_t v119 = v126 + 1;
                                              while (v117 != v120)
                                              {
                                                int v127 = *((_DWORD *)v117-- - 1);
                                                *((_DWORD *)v126-- - 1) = v127;
                                              }
                                              *(void *)(v5 + 1392) = v126;
                                              *(void *)(v5 + 1400) = v119;
                                              *(void *)(v5 + 1408) = &v125[4 * v124];
                                              if (v120) {
                                                operator delete(v120);
                                              }
                                            }
                                            else
                                            {
                                              *uint64_t v117 = v116;
                                              uint64_t v119 = v117 + 1;
                                            }
                                            *(void *)(v5 + 1400) = v119;
                                          }
                                          ++v113;
                                        }
                                        while (v113 < *(unsigned __int8 *)(v5 + 1385));
                                      }
                                      sub_1DDA27D28(v5, &v213);
                                      sub_1DDA19E68((uint64_t)v213);
                                      if (v214) {
                                        sub_1DDA18310(v214);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    unint64_t v56 = &v218;
                                    if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                      unint64_t v56 = (std::string *)v218.__r_.__value_.__r.__words[0];
                                    }
                                    BOOL v57 = &v217;
                                    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                      BOOL v57 = (std::string *)v217.__r_.__value_.__r.__words[0];
                                    }
                                    printf("Unknown version for Nikon Lens Vignette Correction.  The values are major: %s and minor: %s", (const char *)v56, (const char *)v57);
                                  }
                                }
                                if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v217.__r_.__value_.__l.__data_);
                                }
                                if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v218.__r_.__value_.__l.__data_);
                                }
LABEL_304:
                                sub_1DDA1AA18((uint64_t *)__p);
                              }
                            }
LABEL_305:
                            if (++v20 == v19) {
                              break;
                            }
                            continue;
                          case 4:
                            goto LABEL_159;
                          case 5:
                            if (*((_WORD *)&v222 + 6 * v20 + 3) != 7) {
                              goto LABEL_305;
                            }
                            sub_1DDA27D28(v5, &v218);
                            sub_1DDA18500(&v209, &v224);
                            unsigned int v219 = sub_1DDA3CE7C(v22);
                            LODWORD(v217.__r_.__value_.__l.__data_) = v209;
                            LODWORD(v211) = *sub_1DDA47EF8(&v217, &v219);
                            sub_1DDA1B4D8((int *)&v213, (int *)&v211);
                            sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v218, (uint64_t)&v213, 0);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            memset(&v218, 0, sizeof(v218));
                            memset(&v217, 0, sizeof(v217));
                            sub_1DDA27D28(v5, &v213);
                            int v58 = v213;
                            unsigned int v219 = 2;
                            sub_1DDA1B3CC(&v209, &v219);
                            if (sub_1DDA1A0CC((uint64_t)v58, (unsigned int *)&v209, (uint64_t)&v218))
                            {
                              sub_1DDA27D28(v5, &v211);
                              long long v59 = v211;
                              unsigned int v215 = 2;
                              sub_1DDA1B3CC(&v216, &v215);
                              BOOL v60 = sub_1DDA1A0CC((uint64_t)v59, &v216, (uint64_t)&v217);
                              if (v212) {
                                sub_1DDA18310(v212);
                              }
                            }
                            else
                            {
                              BOOL v60 = 0;
                            }
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (v60)
                            {
                              if (!std::string::compare(&v218, "01") && !std::string::compare(&v217, "00"))
                              {
                                sub_1DDA27D28(v5, &v213);
                                int v188 = sub_1DDA19DA0((uint64_t)v213);
                                if (v214) {
                                  sub_1DDA18310(v214);
                                }
                                if (v188)
                                {
                                  sub_1DDA27D28(v5, &v213);
                                  int v189 = sub_1DDA19DA0((uint64_t)v213);
                                  if (v214) {
                                    sub_1DDA18310(v214);
                                  }
                                  if (v189 == 1)
                                  {
                                    sub_1DDA27D28(v5, &v213);
                                    int v190 = sub_1DDA19E68((uint64_t)v213);
                                    if (v214) {
                                      sub_1DDA18310(v214);
                                    }
                                    if (!v190)
                                    {
                                      sub_1DDA27D28(v5, &v213);
                                      sub_1DDA1A08C((uint64_t)v213);
                                      if (v214) {
                                        sub_1DDA18310(v214);
                                      }
                                      sub_1DDA27D28(v5, &v213);
                                      int v191 = sub_1DDA19DA0((uint64_t)v213);
                                      if (v214) {
                                        sub_1DDA18310(v214);
                                      }
                                      if (v191 == 4)
                                      {
                                        sub_1DDA27D28(v5, &v213);
                                        int v192 = sub_1DDA19E68((uint64_t)v213);
                                        if (v214) {
                                          sub_1DDA18310(v214);
                                        }
                                        if (!v192)
                                        {
                                          sub_1DDA27D28(v5, &v213);
                                          int v193 = sub_1DDA19DA0((uint64_t)v213);
                                          if (v214) {
                                            sub_1DDA18310(v214);
                                          }
                                          if (!v193)
                                          {
                                            sub_1DDA27D28(v5, &v213);
                                            LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                            sub_1DDB421F0(v201, &v211);
                                            if (v214) {
                                              sub_1DDA18310(v214);
                                            }
                                            sub_1DDA27D28(v5, &v213);
                                            LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                            sub_1DDB421F0(v201, &v211);
                                            if (v214) {
                                              sub_1DDA18310(v214);
                                            }
                                            sub_1DDA27D28(v5, &v213);
                                            LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                            sub_1DDB421F0(v201, &v211);
                                            if (v214) {
                                              sub_1DDA18310(v214);
                                            }
                                            sub_1DDA27D28(v5, &v213);
                                            float v194 = sub_1DDA1A04C((uint64_t)v213);
                                            if (v214) {
                                              sub_1DDA18310(v214);
                                            }
                                            if (v194 == 0.0)
                                            {
                                              sub_1DDA27D28(v5, &v213);
                                              float v195 = sub_1DDA1A04C((uint64_t)v213);
                                              if (v214) {
                                                sub_1DDA18310(v214);
                                              }
                                              if (v195 == 0.0)
                                              {
                                                sub_1DDA27D28(v5, &v213);
                                                int v196 = sub_1DDA19E68((uint64_t)v213);
                                                if (v214) {
                                                  sub_1DDA18310(v214);
                                                }
                                                if (!v196)
                                                {
                                                  sub_1DDA27D28(v5, &v213);
                                                  int v197 = sub_1DDA19E68((uint64_t)v213);
                                                  if (v214) {
                                                    sub_1DDA18310(v214);
                                                  }
                                                  if (!v197)
                                                  {
                                                    sub_1DDA27D28(v5, &v213);
                                                    *(float *)(v5 + 1420) = sub_1DDA1A04C((uint64_t)v213);
                                                    if (v214) {
                                                      sub_1DDA18310(v214);
                                                    }
                                                    sub_1DDA27D28(v5, &v213);
                                                    int v198 = sub_1DDA19E68((uint64_t)v213);
                                                    if (v214) {
                                                      sub_1DDA18310(v214);
                                                    }
                                                    if (!v198) {
                                                      *(unsigned char *)(v5 + 1416) = v188;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              else
                              {
                                int v61 = &v218;
                                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  int v61 = (std::string *)v218.__r_.__value_.__r.__words[0];
                                }
                                uint64_t v62 = &v217;
                                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  uint64_t v62 = (std::string *)v217.__r_.__value_.__r.__words[0];
                                }
                                printf("Unknown version for Nikon DistortionCorrectionCurve.  The values are major: %s and minor: %s", (const char *)v61, (const char *)v62);
                              }
                            }
                            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v217.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v218.__r_.__value_.__l.__data_);
                            }
                            goto LABEL_304;
                          case 6:
                            if (*((_WORD *)&v222 + 6 * v20 + 3) != 7) {
                              goto LABEL_305;
                            }
                            sub_1DDA27D28(v5, &v218);
                            sub_1DDA18500(&v209, &v224);
                            unsigned int v219 = sub_1DDA3CE7C(v22);
                            LODWORD(v217.__r_.__value_.__l.__data_) = v209;
                            LODWORD(v211) = *sub_1DDA47EF8(&v217, &v219);
                            sub_1DDA1B4D8((int *)&v213, (int *)&v211);
                            sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v218, (uint64_t)&v213, 0);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            memset(&v218, 0, sizeof(v218));
                            memset(&v217, 0, sizeof(v217));
                            sub_1DDA27D28(v5, &v213);
                            unint64_t v27 = v213;
                            unsigned int v219 = 2;
                            sub_1DDA1B3CC(&v209, &v219);
                            if (sub_1DDA1A0CC((uint64_t)v27, (unsigned int *)&v209, (uint64_t)&v218))
                            {
                              sub_1DDA27D28(v5, &v211);
                              int v28 = v211;
                              unsigned int v215 = 2;
                              sub_1DDA1B3CC(&v216, &v215);
                              BOOL v29 = sub_1DDA1A0CC((uint64_t)v28, &v216, (uint64_t)&v217);
                              if (v212) {
                                sub_1DDA18310(v212);
                              }
                            }
                            else
                            {
                              BOOL v29 = 0;
                            }
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (v29)
                            {
                              if (!std::string::compare(&v218, "01") && !std::string::compare(&v217, "00"))
                              {
                                sub_1DDA27D28(v5, &v213);
                                int v128 = sub_1DDA19DA0((uint64_t)v213);
                                if (v214) {
                                  sub_1DDA18310(v214);
                                }
                                if (v128)
                                {
                                  sub_1DDA27D28(v5, &v213);
                                  int v129 = sub_1DDA19DA0((uint64_t)v213);
                                  if (v214) {
                                    sub_1DDA18310(v214);
                                  }
                                  if (v129 == 1)
                                  {
                                    sub_1DDA27D28(v5, &v213);
                                    int v130 = sub_1DDA19E68((uint64_t)v213);
                                    if (v214) {
                                      sub_1DDA18310(v214);
                                    }
                                    if (!v130)
                                    {
                                      sub_1DDA27D28(v5, &v213);
                                      sub_1DDA1A08C((uint64_t)v213);
                                      if (v214) {
                                        sub_1DDA18310(v214);
                                      }
                                      sub_1DDA27D28(v5, &v213);
                                      int v131 = sub_1DDA19DA0((uint64_t)v213);
                                      if (v214) {
                                        sub_1DDA18310(v214);
                                      }
                                      if (v131 == 8)
                                      {
                                        sub_1DDA27D28(v5, &v213);
                                        int v132 = sub_1DDA19E68((uint64_t)v213);
                                        if (v214) {
                                          sub_1DDA18310(v214);
                                        }
                                        if (!v132)
                                        {
                                          sub_1DDA27D28(v5, &v213);
                                          int v133 = sub_1DDA19DA0((uint64_t)v213);
                                          if (v214) {
                                            sub_1DDA18310(v214);
                                          }
                                          if (!v133)
                                          {
                                            sub_1DDA27D28(v5, &v213);
                                            LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                            sub_1DDB421F0(v204, &v211);
                                            if (v214) {
                                              sub_1DDA18310(v214);
                                            }
                                            sub_1DDA27D28(v5, &v213);
                                            float v134 = sub_1DDA1A04C((uint64_t)v213);
                                            if (v214) {
                                              sub_1DDA18310(v214);
                                            }
                                            if (v134 == 0.0)
                                            {
                                              sub_1DDA27D28(v5, &v213);
                                              LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                              sub_1DDB421F0(v204, &v211);
                                              if (v214) {
                                                sub_1DDA18310(v214);
                                              }
                                              sub_1DDA27D28(v5, &v213);
                                              float v135 = sub_1DDA1A04C((uint64_t)v213);
                                              if (v214) {
                                                sub_1DDA18310(v214);
                                              }
                                              if (v135 == 0.0)
                                              {
                                                sub_1DDA27D28(v5, &v213);
                                                LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                                sub_1DDB421F0(v204, &v211);
                                                if (v214) {
                                                  sub_1DDA18310(v214);
                                                }
                                                sub_1DDA27D28(v5, &v213);
                                                float v136 = sub_1DDA1A04C((uint64_t)v213);
                                                if (v214) {
                                                  sub_1DDA18310(v214);
                                                }
                                                if (v136 == 0.0)
                                                {
                                                  sub_1DDA27D28(v5, &v213);
                                                  LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                                  sub_1DDB421F0(v204, &v211);
                                                  if (v214) {
                                                    sub_1DDA18310(v214);
                                                  }
                                                  sub_1DDA27D28(v5, &v213);
                                                  float v137 = sub_1DDA1A04C((uint64_t)v213);
                                                  if (v214) {
                                                    sub_1DDA18310(v214);
                                                  }
                                                  if (v137 == 0.0)
                                                  {
                                                    sub_1DDA27D28(v5, &v213);
                                                    float v138 = sub_1DDA1A04C((uint64_t)v213);
                                                    if (v214) {
                                                      sub_1DDA18310(v214);
                                                    }
                                                    if (v138 == 1.0)
                                                    {
                                                      sub_1DDA27D28(v5, &v213);
                                                      int v139 = sub_1DDA19E68((uint64_t)v213);
                                                      if (v214) {
                                                        sub_1DDA18310(v214);
                                                      }
                                                      if (!v139)
                                                      {
                                                        sub_1DDA27D28(v5, &v213);
                                                        int v140 = sub_1DDA19E68((uint64_t)v213);
                                                        if (v214) {
                                                          sub_1DDA18310(v214);
                                                        }
                                                        if (!v140)
                                                        {
                                                          sub_1DDA27D28(v5, &v213);
                                                          *(float *)(v5 + 1452) = sub_1DDA1A04C((uint64_t)v213);
                                                          if (v214) {
                                                            sub_1DDA18310(v214);
                                                          }
                                                          *(unsigned char *)(v5 + 1448) = v128;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              else
                              {
                                long long v30 = &v218;
                                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  long long v30 = (std::string *)v218.__r_.__value_.__r.__words[0];
                                }
                                uint64_t v31 = &v217;
                                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  uint64_t v31 = (std::string *)v217.__r_.__value_.__r.__words[0];
                                }
                                printf("Unknown version for Nikon VignetteCorrectionCurve.  The values are major: %s and minor: %s", (const char *)v30, (const char *)v31);
                              }
                            }
                            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v217.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v218.__r_.__value_.__l.__data_);
                            }
                            goto LABEL_304;
                          case 7:
                            if (*((_WORD *)&v222 + 6 * v20 + 3) != 7) {
                              goto LABEL_305;
                            }
                            sub_1DDA27D28(v5, &v218);
                            sub_1DDA18500(&v209, &v224);
                            unsigned int v219 = sub_1DDA3CE7C(v22);
                            LODWORD(v217.__r_.__value_.__l.__data_) = v209;
                            LODWORD(v211) = *sub_1DDA47EF8(&v217, &v219);
                            sub_1DDA1B4D8((int *)&v213, (int *)&v211);
                            sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v218, (uint64_t)&v213, 0);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            memset(&v218, 0, sizeof(v218));
                            memset(&v217, 0, sizeof(v217));
                            sub_1DDA27D28(v5, &v213);
                            unint64_t v37 = v213;
                            unsigned int v219 = 2;
                            sub_1DDA1B3CC(&v209, &v219);
                            if (sub_1DDA1A0CC((uint64_t)v37, (unsigned int *)&v209, (uint64_t)&v218))
                            {
                              sub_1DDA27D28(v5, &v211);
                              unint64_t v38 = v211;
                              unsigned int v215 = 2;
                              sub_1DDA1B3CC(&v216, &v215);
                              BOOL v39 = sub_1DDA1A0CC((uint64_t)v38, &v216, (uint64_t)&v217);
                              if (v212) {
                                sub_1DDA18310(v212);
                              }
                            }
                            else
                            {
                              BOOL v39 = 0;
                            }
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (v39)
                            {
                              if (!std::string::compare(&v218, "01") && !std::string::compare(&v217, "00"))
                              {
                                sub_1DDA27D28(v5, &v213);
                                int v158 = sub_1DDA19DA0((uint64_t)v213);
                                if (v214) {
                                  sub_1DDA18310(v214);
                                }
                                if (v158)
                                {
                                  sub_1DDA27D28(v5, &v213);
                                  int v159 = sub_1DDA19DA0((uint64_t)v213);
                                  if (v214) {
                                    sub_1DDA18310(v214);
                                  }
                                  if (v159 == 2)
                                  {
                                    sub_1DDA27D28(v5, &v213);
                                    int v160 = sub_1DDA19E68((uint64_t)v213);
                                    if (v214) {
                                      sub_1DDA18310(v214);
                                    }
                                    if (!v160)
                                    {
                                      sub_1DDA27D28(v5, &v213);
                                      sub_1DDA1A08C((uint64_t)v213);
                                      if (v214) {
                                        sub_1DDA18310(v214);
                                      }
                                      sub_1DDA27D28(v5, &v213);
                                      int v161 = sub_1DDA19DA0((uint64_t)v213);
                                      if (v214) {
                                        sub_1DDA18310(v214);
                                      }
                                      if (v161 == 3)
                                      {
                                        sub_1DDA27D28(v5, &v213);
                                        int v162 = sub_1DDA19E68((uint64_t)v213);
                                        if (v214) {
                                          sub_1DDA18310(v214);
                                        }
                                        if (!v162)
                                        {
                                          sub_1DDA27D28(v5, &v213);
                                          int v163 = sub_1DDA19DA0((uint64_t)v213);
                                          if (v214) {
                                            sub_1DDA18310(v214);
                                          }
                                          if (!v163)
                                          {
                                            sub_1DDA27D28(v5, &v213);
                                            LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                            sub_1DDB421F0(v203, &v211);
                                            if (v214) {
                                              sub_1DDA18310(v214);
                                            }
                                            sub_1DDA27D28(v5, &v213);
                                            LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                            sub_1DDB421F0(v203, &v211);
                                            if (v214) {
                                              sub_1DDA18310(v214);
                                            }
                                            sub_1DDA27D28(v5, &v213);
                                            float v164 = sub_1DDA1A04C((uint64_t)v213);
                                            if (v214) {
                                              sub_1DDA18310(v214);
                                            }
                                            if (v164 == 0.0)
                                            {
                                              sub_1DDA27D28(v5, &v213);
                                              LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                              sub_1DDB421F0(v203, &v211);
                                              if (v214) {
                                                sub_1DDA18310(v214);
                                              }
                                              sub_1DDA27D28(v5, &v213);
                                              int v165 = sub_1DDA19DA0((uint64_t)v213);
                                              if (v214) {
                                                sub_1DDA18310(v214);
                                              }
                                              if (v165 == 3)
                                              {
                                                sub_1DDA27D28(v5, &v213);
                                                int v166 = sub_1DDA19E68((uint64_t)v213);
                                                if (v214) {
                                                  sub_1DDA18310(v214);
                                                }
                                                if (!v166)
                                                {
                                                  sub_1DDA27D28(v5, &v213);
                                                  int v167 = sub_1DDA19DA0((uint64_t)v213);
                                                  if (v214) {
                                                    sub_1DDA18310(v214);
                                                  }
                                                  if (!v167)
                                                  {
                                                    sub_1DDA27D28(v5, &v213);
                                                    LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                                    sub_1DDB421F0(v202, &v211);
                                                    if (v214) {
                                                      sub_1DDA18310(v214);
                                                    }
                                                    sub_1DDA27D28(v5, &v213);
                                                    LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                                    sub_1DDB421F0(v202, &v211);
                                                    if (v214) {
                                                      sub_1DDA18310(v214);
                                                    }
                                                    sub_1DDA27D28(v5, &v213);
                                                    float v168 = sub_1DDA1A04C((uint64_t)v213);
                                                    if (v214) {
                                                      sub_1DDA18310(v214);
                                                    }
                                                    if (v168 == 0.0)
                                                    {
                                                      sub_1DDA27D28(v5, &v213);
                                                      LODWORD(v211) = sub_1DDA1A04C((uint64_t)v213);
                                                      sub_1DDB421F0(v202, &v211);
                                                      if (v214) {
                                                        sub_1DDA18310(v214);
                                                      }
                                                      sub_1DDA27D28(v5, &v213);
                                                      int v169 = sub_1DDA19E68((uint64_t)v213);
                                                      if (v214) {
                                                        sub_1DDA18310(v214);
                                                      }
                                                      if (!v169)
                                                      {
                                                        sub_1DDA27D28(v5, &v213);
                                                        *(unsigned char *)(v5 + 1481) = sub_1DDA19DA0((uint64_t)v213);
                                                        if (v214) {
                                                          sub_1DDA18310(v214);
                                                        }
                                                        sub_1DDA27D28(v5, &v213);
                                                        int v170 = sub_1DDA19DA0((uint64_t)v213);
                                                        if (v214) {
                                                          sub_1DDA18310(v214);
                                                        }
                                                        if (!v170) {
                                                          *(unsigned char *)(v5 + 1480) = v158;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              else
                              {
                                unint64_t v40 = &v218;
                                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  unint64_t v40 = (std::string *)v218.__r_.__value_.__r.__words[0];
                                }
                                std::string::size_type v41 = &v217;
                                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  std::string::size_type v41 = (std::string *)v217.__r_.__value_.__r.__words[0];
                                }
                                printf("Unknown version for Nikon LateralChromaticAberrationCorrectionCurve.  The values are major: %s and minor: %s", (const char *)v40, (const char *)v41);
                              }
                            }
                            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v217.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v218.__r_.__value_.__l.__data_);
                            }
                            goto LABEL_304;
                          case 8:
                            if (*((_WORD *)&v222 + 6 * v20 + 3) != 7) {
                              goto LABEL_305;
                            }
                            sub_1DDA27D28(v5, &v218);
                            sub_1DDA18500(&v209, &v224);
                            unsigned int v219 = sub_1DDA3CE7C(v22);
                            LODWORD(v217.__r_.__value_.__l.__data_) = v209;
                            LODWORD(v211) = *sub_1DDA47EF8(&v217, &v219);
                            sub_1DDA1B4D8((int *)&v213, (int *)&v211);
                            sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v218, (uint64_t)&v213, 0);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            memset(&v218, 0, sizeof(v218));
                            memset(&v217, 0, sizeof(v217));
                            sub_1DDA27D28(v5, &v213);
                            uint64_t v42 = v213;
                            unsigned int v219 = 2;
                            sub_1DDA1B3CC(&v209, &v219);
                            if (sub_1DDA1A0CC((uint64_t)v42, (unsigned int *)&v209, (uint64_t)&v218))
                            {
                              sub_1DDA27D28(v5, &v211);
                              long long v43 = v211;
                              unsigned int v215 = 2;
                              sub_1DDA1B3CC(&v216, &v215);
                              BOOL v44 = sub_1DDA1A0CC((uint64_t)v43, &v216, (uint64_t)&v217);
                              if (v212) {
                                sub_1DDA18310(v212);
                              }
                            }
                            else
                            {
                              BOOL v44 = 0;
                            }
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (v44)
                            {
                              if (!std::string::compare(&v218, "01") && !std::string::compare(&v217, "00"))
                              {
                                sub_1DDA27D28(v5, &v213);
                                sub_1DDA1A04C((uint64_t)v213);
                                if (v214) {
                                  sub_1DDA18310(v214);
                                }
                                sub_1DDA27D28(v5, &v213);
                                sub_1DDA1A04C((uint64_t)v213);
                                if (v214) {
                                  sub_1DDA18310(v214);
                                }
                                sub_1DDA27D28(v5, &v213);
                                sub_1DDA19E68((uint64_t)v213);
                                if (v214) {
                                  sub_1DDA18310(v214);
                                }
                              }
                              else
                              {
                                long long v45 = &v218;
                                if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  long long v45 = (std::string *)v218.__r_.__value_.__r.__words[0];
                                }
                                uint64_t v46 = &v217;
                                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                  uint64_t v46 = (std::string *)v217.__r_.__value_.__r.__words[0];
                                }
                                printf("Unknown version for Nikon OpticalCenterOffset.  The values are major: %s and minor: %s", (const char *)v45, (const char *)v46);
                              }
                            }
                            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v217.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v218.__r_.__value_.__l.__data_);
                            }
                            goto LABEL_304;
                          case 9:
                            if (*((_WORD *)&v222 + 6 * v20 + 3) != 7) {
                              goto LABEL_305;
                            }
                            sub_1DDA27D28(v5, &v218);
                            sub_1DDA18500(&v209, &v224);
                            unsigned int v219 = sub_1DDA3CE7C(v22);
                            LODWORD(v217.__r_.__value_.__l.__data_) = v209;
                            LODWORD(v211) = *sub_1DDA47EF8(&v217, &v219);
                            sub_1DDA1B4D8((int *)&v213, (int *)&v211);
                            sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v218, (uint64_t)&v213, 0);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            sub_1DDA27D28(v5, &v218);
                            float v68 = sub_1DDA1A08C((uint64_t)v218.__r_.__value_.__l.__data_);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            sub_1DDA27D28(v5, &v218);
                            float v69 = sub_1DDA1A08C((uint64_t)v218.__r_.__value_.__l.__data_);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            sub_1DDA27D28(v5, &v218);
                            float v70 = sub_1DDA1A08C((uint64_t)v218.__r_.__value_.__l.__data_);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            sub_1DDA27D28(v5, &v218);
                            float v71 = sub_1DDA1A08C((uint64_t)v218.__r_.__value_.__l.__data_);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            sub_1DDA27D28(v5, &v218);
                            int v72 = sub_1DDA19E68((uint64_t)v218.__r_.__value_.__l.__data_);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            if (v72) {
                              goto LABEL_304;
                            }
                            int v73 = *(char **)(v5 + 1560);
                            int v74 = *(char **)(v5 + 1568);
                            if (v73 >= v74)
                            {
                              unsigned int v76 = (char *)*v207;
                              uint64_t v77 = (v73 - (unsigned char *)*v207) >> 2;
                              unint64_t v78 = v77 + 1;
                              if ((unint64_t)(v77 + 1) >> 62) {
                                goto LABEL_602;
                              }
                              uint64_t v79 = v74 - v76;
                              if (v79 >> 1 > v78) {
                                unint64_t v78 = v79 >> 1;
                              }
                              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v80 = v78;
                              }
                              if (v80)
                              {
                                int v81 = (char *)sub_1DDA17F90((uint64_t)v208, v80);
                                int v73 = *(char **)(v5 + 1560);
                                unsigned int v76 = *(char **)(v5 + 1552);
                              }
                              else
                              {
                                int v81 = 0;
                              }
                              int v82 = &v81[4 * v77];
                              *(float *)int v82 = v68;
                              unsigned int v75 = v82 + 4;
                              while (v73 != v76)
                              {
                                int v83 = *((_DWORD *)v73 - 1);
                                v73 -= 4;
                                *((_DWORD *)v82 - 1) = v83;
                                v82 -= 4;
                              }
                              *(void *)(v5 + 1552) = v82;
                              int v74 = &v81[4 * v80];
                              *(void *)(v5 + 1560) = v75;
                              *(void *)(v5 + 1568) = v74;
                              if (v76)
                              {
                                operator delete(v76);
                                int v74 = *v208;
                              }
                            }
                            else
                            {
                              *(float *)int v73 = v68;
                              unsigned int v75 = v73 + 4;
                            }
                            *(void *)(v5 + 1560) = v75;
                            if (v75 >= v74)
                            {
                              int v85 = (char *)*v207;
                              uint64_t v86 = (v75 - (unsigned char *)*v207) >> 2;
                              unint64_t v87 = v86 + 1;
                              if ((unint64_t)(v86 + 1) >> 62) {
                                goto LABEL_602;
                              }
                              uint64_t v88 = v74 - v85;
                              if (v88 >> 1 > v87) {
                                unint64_t v87 = v88 >> 1;
                              }
                              if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v89 = v87;
                              }
                              if (v89)
                              {
                                unint64_t v90 = (char *)sub_1DDA17F90((uint64_t)v208, v89);
                                unsigned int v75 = *(char **)(v5 + 1560);
                                int v85 = *(char **)(v5 + 1552);
                              }
                              else
                              {
                                unint64_t v90 = 0;
                              }
                              int v91 = &v90[4 * v86];
                              *(float *)int v91 = v69;
                              int v84 = v91 + 4;
                              while (v75 != v85)
                              {
                                int v92 = *((_DWORD *)v75 - 1);
                                v75 -= 4;
                                *((_DWORD *)v91 - 1) = v92;
                                v91 -= 4;
                              }
                              *(void *)(v5 + 1552) = v91;
                              int v74 = &v90[4 * v89];
                              *(void *)(v5 + 1560) = v84;
                              *(void *)(v5 + 1568) = v74;
                              if (v85)
                              {
                                operator delete(v85);
                                int v74 = *v208;
                              }
                            }
                            else
                            {
                              *(float *)unsigned int v75 = v69;
                              int v84 = v75 + 4;
                            }
                            *(void *)(v5 + 1560) = v84;
                            if (v84 >= v74)
                            {
                              int v94 = (char *)*v207;
                              uint64_t v95 = (v84 - (unsigned char *)*v207) >> 2;
                              unint64_t v96 = v95 + 1;
                              if ((unint64_t)(v95 + 1) >> 62) {
                                goto LABEL_602;
                              }
                              uint64_t v97 = v74 - v94;
                              if (v97 >> 1 > v96) {
                                unint64_t v96 = v97 >> 1;
                              }
                              if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v98 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v98 = v96;
                              }
                              if (v98)
                              {
                                int v99 = (char *)sub_1DDA17F90((uint64_t)v208, v98);
                                int v84 = *(char **)(v5 + 1560);
                                int v94 = *(char **)(v5 + 1552);
                              }
                              else
                              {
                                int v99 = 0;
                              }
                              unsigned int v100 = &v99[4 * v95];
                              *(float *)unsigned int v100 = v70;
                              int v93 = v100 + 4;
                              while (v84 != v94)
                              {
                                int v101 = *((_DWORD *)v84 - 1);
                                v84 -= 4;
                                *((_DWORD *)v100 - 1) = v101;
                                v100 -= 4;
                              }
                              *(void *)(v5 + 1552) = v100;
                              int v74 = &v99[4 * v98];
                              *(void *)(v5 + 1560) = v93;
                              *(void *)(v5 + 1568) = v74;
                              if (v94)
                              {
                                operator delete(v94);
                                int v74 = *v208;
                              }
                            }
                            else
                            {
                              *(float *)int v84 = v70;
                              int v93 = v84 + 4;
                            }
                            *(void *)(v5 + 1560) = v93;
                            if (v93 >= v74)
                            {
                              int v103 = (char *)*v207;
                              uint64_t v104 = (v93 - (unsigned char *)*v207) >> 2;
                              unint64_t v105 = v104 + 1;
                              if ((unint64_t)(v104 + 1) >> 62) {
LABEL_602:
                              }
                                sub_1DDA17F78();
                              uint64_t v106 = v74 - v103;
                              if (v106 >> 1 > v105) {
                                unint64_t v105 = v106 >> 1;
                              }
                              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL) {
                                unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v107 = v105;
                              }
                              if (v107)
                              {
                                unsigned int v108 = (char *)sub_1DDA17F90((uint64_t)v208, v107);
                                int v93 = *(char **)(v5 + 1560);
                                int v103 = *(char **)(v5 + 1552);
                              }
                              else
                              {
                                unsigned int v108 = 0;
                              }
                              int v109 = (float *)&v108[4 * v104];
                              *int v109 = v71;
                              __int32 v102 = v109 + 1;
                              while (v93 != v103)
                              {
                                int v110 = *((_DWORD *)v93 - 1);
                                v93 -= 4;
                                *((_DWORD *)v109-- - 1) = v110;
                              }
                              *(void *)(v5 + 1552) = v109;
                              *(void *)(v5 + 1560) = v102;
                              *(void *)(v5 + 1568) = &v108[4 * v107];
                              if (v103) {
                                operator delete(v103);
                              }
                            }
                            else
                            {
                              *(float *)int v93 = v71;
                              __int32 v102 = v93 + 4;
                            }
                            *(void *)(v5 + 1560) = v102;
                            goto LABEL_304;
                          case 13:
                            if (*((_WORD *)&v222 + 6 * v20 + 3) != 7) {
                              goto LABEL_305;
                            }
                            sub_1DDA27D28(v5, &v218);
                            sub_1DDA18500(&v209, &v224);
                            unsigned int v219 = sub_1DDA3CE7C(v22);
                            LODWORD(v217.__r_.__value_.__l.__data_) = v209;
                            LODWORD(v211) = *sub_1DDA47EF8(&v217, &v219);
                            sub_1DDA1B4D8((int *)&v213, (int *)&v211);
                            sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v218, (uint64_t)&v213, 0);
                            if (v218.__r_.__value_.__l.__size_) {
                              sub_1DDA18310((std::__shared_weak_count *)v218.__r_.__value_.__l.__size_);
                            }
                            memset(&v218, 0, sizeof(v218));
                            memset(&v217, 0, sizeof(v217));
                            sub_1DDA27D28(v5, &v213);
                            uint64_t v63 = v213;
                            unsigned int v219 = 2;
                            sub_1DDA1B3CC(&v209, &v219);
                            if (sub_1DDA1A0CC((uint64_t)v63, (unsigned int *)&v209, (uint64_t)&v218))
                            {
                              sub_1DDA27D28(v5, &v211);
                              std::string v64 = v211;
                              unsigned int v215 = 2;
                              sub_1DDA1B3CC(&v216, &v215);
                              BOOL v65 = sub_1DDA1A0CC((uint64_t)v64, &v216, (uint64_t)&v217);
                              if (v212) {
                                sub_1DDA18310(v212);
                              }
                            }
                            else
                            {
                              BOOL v65 = 0;
                            }
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (!v65 || std::string::compare(&v218, "01") || std::string::compare(&v217, "00")) {
                              goto LABEL_220;
                            }
                            sub_1DDA27D28(v5, &v213);
                            unsigned int v66 = sub_1DDA19E68((uint64_t)v213);
                            if (v214) {
                              sub_1DDA18310(v214);
                            }
                            if (v66 <= 0xE && ((1 << v66) & 0x6458) != 0)
                            {
                              *(_DWORD *)(v5 + 1340) = v66;
                              int v67 = 1;
                              *(unsigned char *)(v5 + 1344) = 1;
                            }
                            else
                            {
                              int v67 = *(unsigned __int8 *)(v5 + 1344);
                              unsigned int v66 = *(_DWORD *)(v5 + 1340);
                              if (!*(unsigned char *)(v5 + 1344)) {
                                goto LABEL_218;
                              }
                            }
                            if (v66 == 13) {
                              goto LABEL_601;
                            }
LABEL_218:
                            if (v67 && v66 == 14)
                            {
LABEL_601:
                              exception = __cxa_allocate_exception(0x10uLL);
                              MEMORY[0x1E01C3B90](exception, "RawCameraException");
                              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                            }
LABEL_220:
                            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v217.__r_.__value_.__l.__data_);
                            }
                            if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v218.__r_.__value_.__l.__data_);
                            }
                            goto LABEL_304;
                          default:
                            goto LABEL_305;
                        }
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (SHIBYTE(v227) < 0) {
        operator delete(v225);
      }
      sub_1DDA1AA18(v228);
    }
  }
  else
  {
    sub_1DDA43480(v1, v2, v3);
  }
}

void sub_1DDB41A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50)
{
  if (a27) {
    sub_1DDA18310(a27);
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  sub_1DDA1AA18((uint64_t *)&a43);
  if (*(char *)(v50 - 161) < 0) {
    operator delete(*(void **)(v50 - 184));
  }
  sub_1DDA1AA18((uint64_t *)(v50 - 160));
  _Unwind_Resume(a1);
}

void sub_1DDB421F0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    BOOL v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_1DDA17F78();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_1DDA17F90(v4, v12);
      BOOL v8 = *(_DWORD **)a1;
      int v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unsigned __int16 v14 = &v13[4 * v9];
    int v15 = &v13[4 * v12];
    *(_DWORD *)unsigned __int16 v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t sub_1DDB422D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1348);
}

uint64_t sub_1DDB422E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1349);
}

uint64_t sub_1DDB422E8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1350);
}

uint64_t sub_1DDB422F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1352);
}

uint64_t sub_1DDB422F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1353);
}

void *sub_1DDB42300@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1DDA1808C(a2, *(const void **)(a1 + 1360), *(void *)(a1 + 1368), (uint64_t)(*(void *)(a1 + 1368) - *(void *)(a1 + 1360)) >> 3);
}

uint64_t sub_1DDB42320(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1351);
}

uint64_t sub_1DDB42328(uint64_t a1, int a2)
{
  if (a2) {
    return ((*(unsigned char *)(a1 + 1416) - 1) & 0xFD) == 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 1416) + 255) >> 8;
  }
}

void *sub_1DDB4234C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1DDA1D984(a2, *(const void **)(a1 + 1424), *(void *)(a1 + 1432), (uint64_t)(*(void *)(a1 + 1432) - *(void *)(a1 + 1424)) >> 2);
}

float sub_1DDB4236C(uint64_t a1)
{
  return *(float *)(a1 + 1420);
}

uint64_t sub_1DDB42374(uint64_t a1, int a2)
{
  if (a2) {
    return ((*(unsigned char *)(a1 + 1448) - 1) & 0xFD) == 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 1448) + 255) >> 8;
  }
}

void *sub_1DDB42398@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1DDA1D984(a2, *(const void **)(a1 + 1456), *(void *)(a1 + 1464), (uint64_t)(*(void *)(a1 + 1464) - *(void *)(a1 + 1456)) >> 2);
}

float sub_1DDB423B8(uint64_t a1)
{
  return *(float *)(a1 + 1452);
}

double sub_1DDB423C0(uint64_t a1)
{
  return *(double *)(a1 + 1536);
}

id sub_1DDB423CC(uint64_t a1)
{
  v25[12] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA409F0();
  uint64_t v7 = objc_msgSend_mutableCopy(v2, v3, v4, v5, v6);

  v24[0] = &unk_1F39AF020;
  v24[1] = &unk_1F39AF038;
  v25[0] = &unk_1F39B4910;
  v25[1] = &unk_1F39B4938;
  v24[2] = &unk_1F39AF050;
  v24[3] = &unk_1F39AEFF0;
  v25[2] = &unk_1F39B4960;
  v25[3] = &unk_1F39B4988;
  v24[4] = &unk_1F39AF068;
  v24[5] = &unk_1F39AF080;
  v25[4] = &unk_1F39B49B0;
  v25[5] = &unk_1F39B49D8;
  v24[6] = &unk_1F39AF098;
  v24[7] = &unk_1F39AF0B0;
  v25[6] = &unk_1F39B4A00;
  v25[7] = &unk_1F39B4A28;
  v24[8] = &unk_1F39AF0C8;
  v24[9] = &unk_1F39AF0E0;
  v25[8] = &unk_1F39B4A50;
  v25[9] = &unk_1F39B4A78;
  v24[10] = &unk_1F39AF0F8;
  v22[0] = @"Name";
  v22[1] = @"Type";
  v23[0] = @"PreviewIFD";
  v23[1] = &unk_1F39AF110;
  v22[2] = @"Namespace";
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1DDB42690;
  v21[3] = &unk_1E6D04D38;
  v21[4] = a1;
  BOOL v8 = (void *)MEMORY[0x1E01C46E0](v21);
  v23[2] = v8;
  unint64_t v10 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v9, (uint64_t)v23, (uint64_t)v22, 3);
  v24[11] = &unk_1F39AF128;
  v25[10] = v10;
  v25[11] = &unk_1F39B4AA0;
  unint64_t v12 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v11, (uint64_t)v25, (uint64_t)v24, 12);
  objc_msgSend_addEntriesFromDictionary_(v7, v13, (uint64_t)v12, v14, v15);

  int v19 = objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1C9E8], v16, (uint64_t)v7, v17, v18);

  return v19;
}

void sub_1DDB42644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB42694(uint64_t a1, const char *a2)
{
  v5[8] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1F39AF140;
  v4[1] = &unk_1F39AF158;
  v5[0] = &unk_1F39B4AC8;
  v5[1] = &unk_1F39B4AF0;
  v4[2] = &unk_1F39AF170;
  v4[3] = &unk_1F39AF188;
  v5[2] = &unk_1F39B4B18;
  v5[3] = &unk_1F39B4B40;
  v4[4] = &unk_1F39AF1A0;
  v4[5] = &unk_1F39AF1B8;
  v5[4] = &unk_1F39B4B68;
  v5[5] = &unk_1F39B4B90;
  v4[6] = &unk_1F39AF1D0;
  v4[7] = &unk_1F39AF1E8;
  v5[6] = &unk_1F39B4BB8;
  v5[7] = &unk_1F39B4BE0;
  uint64_t v2 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v5, (uint64_t)v4, 8);

  return v2;
}

uint64_t sub_1DDB427A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1384);
}

uint64_t sub_1DDB427B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1385);
}

uint64_t sub_1DDB427B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1386);
}

float sub_1DDB427C0(uint64_t a1)
{
  return *(float *)(a1 + 1388);
}

void *sub_1DDB427C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1DDA1D984(a2, *(const void **)(a1 + 1392), *(void *)(a1 + 1400), (uint64_t)(*(void *)(a1 + 1400) - *(void *)(a1 + 1392)) >> 2);
}

void sub_1DDB427E8(void *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x650uLL);
  sub_1DDB4287C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDB42868(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB4287C(void *a1, void *a2, char *a3, void **a4, void **a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397AA10;
  sub_1DDB3B20C((uint64_t)(a1 + 3), a2, *a3, *a4, *a5);
  return a1;
}

void sub_1DDB428D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB428E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397AA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB42904(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397AA10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB42958(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

id sub_1DDB42980(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = sub_1DDB42A6C();
  BOOL v8 = objc_msgSend_URLForResource_withExtension_(v5, v6, (uint64_t)v3, (uint64_t)v4, v7);
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return v8;
}

void sub_1DDB42A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB42A6C()
{
  if (qword_1EBA50710 != -1) {
    dispatch_once(&qword_1EBA50710, &unk_1F397AA50);
  }
  v0 = (void *)qword_1EBA50708;

  return v0;
}

void sub_1DDB42AC0()
{
  if (!dladdr(sub_1DDB42A6C, &v26))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDA1A880(&__str, (char *)v26.dli_fname);
  sub_1DDA1A880(v23, "/RawCamera.bundle");
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  unint64_t v2 = v24;
  id v3 = (void **)v23[0];
  if ((v24 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)v23[1];
  }
  else {
    id v3 = v23;
  }
  id v4 = (unsigned __int8 *)p_str + size;
  if (size && v2)
  {
    uint64_t v5 = p_str;
    uint64_t v6 = (std::string *)((char *)p_str + size);
    do
    {
      if (v5->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v3)
      {
        uint64_t v7 = 1;
        while (v2 != v7)
        {
          if ((unsigned __int8 *)((char *)v5 + v7) == v4) {
            goto LABEL_21;
          }
          int v8 = v5->__r_.__value_.__s.__data_[v7];
          int v9 = *((unsigned __int8 *)v3 + v7++);
          if (v8 != v9) {
            goto LABEL_12;
          }
        }
        uint64_t v6 = v5;
      }
LABEL_12:
      uint64_t v5 = (std::string *)((char *)v5 + 1);
    }
    while (v5 != (std::string *)v4);
  }
  else
  {
    uint64_t v6 = (std::string *)((char *)p_str + size);
  }
LABEL_21:
  BOOL v10 = v6 != (std::string *)v4 || v2 == 0;
  if (!v10 || (int64_t v11 = (char *)v6 - (char *)p_str, v11 == -1))
  {
    unint64_t v21 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v21, "RawCameraException");
    __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::basic_string(&__p, &__str, 0, v11 + v2, (std::allocator<char> *)&v27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFIndex v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    CFIndex v13 = __p.__r_.__value_.__l.__size_;
  }
  CFURLRef v17 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)p_p, v13, 1u);
  if (v17)
  {
    uint64_t v18 = objc_msgSend_bundleWithURL_(MEMORY[0x1E4F28B50], v14, (uint64_t)v17, v15, v16);
    int v19 = (void *)qword_1EBA50708;
    qword_1EBA50708 = v18;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1DDB42CF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  char v27 = v26;

  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  __cxa_begin_catch(a1);
  BOOL v29 = (void *)qword_1EBA50708;
  qword_1EBA50708 = 0;

  __cxa_end_catch();
  JUMPOUT(0x1DDB42C6CLL);
}

id sub_1DDB42D98()
{
  if (qword_1EAB91210 != -1) {
    dispatch_once(&qword_1EAB91210, &unk_1F397AA70);
  }
  v0 = (void *)qword_1EAB91208;

  return v0;
}

void sub_1DDB42DEC()
{
  sub_1DDB42A6C();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = objc_msgSend_objectForInfoDictionaryKey_(v5, v0, @"CFBundleShortVersionString", v1, v2);
  id v4 = (void *)qword_1EAB91208;
  qword_1EAB91208 = v3;
}

void sub_1DDB42E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB42E64(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E01C4510]();
  uint64_t v6 = objc_msgSend_componentsSeparatedByString_(a1, v3, @".", v4, v5);
  unint64_t v11 = objc_msgSend_count(v6, v7, v8, v9, v10);
  unint64_t v15 = v11;
  if (v11 >= 4) {
    uint64_t v16 = 4;
  }
  else {
    uint64_t v16 = v11;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    LODWORD(v18) = 0;
    do
    {
      int v19 = objc_msgSend_objectAtIndexedSubscript_(v6, v12, v17, v13, v14);
      int v24 = objc_msgSend_intValue(v19, v20, v21, v22, v23);

      uint64_t v18 = (v24 + 100 * v18);
      ++v17;
    }
    while (v16 != v17);
  }
  else
  {
    uint64_t v18 = 0;
  }
  if (v15 <= 3)
  {
    uint64x2_t v25 = (uint64x2_t)vdupq_n_s64(3 - v16);
    v26.i64[1] = 0x100000001;
    v26.i64[0] = v18 | 0x100000000;
    v27.i32[1] = 100;
    v27.i64[1] = 0x6400000064;
    v27.i32[0] = 100 * v18;
    int8x16_t v28 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)xmmword_1DDBF8D60, v25), (int32x4_t)vcgtq_u64((uint64x2_t)xmmword_1DDBF8D90, v25)), v26, v27);
    *(int32x2_t *)v28.i8 = vmul_s32(*(int32x2_t *)v28.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
    uint64_t v18 = (v28.i32[0] * v28.i32[1]);
  }

  return v18;
}

void sub_1DDB42F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB42FB0(os_signpost_id_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPanasonicUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1DDB43694;
  v5[3] = &unk_1E6D04A58;
  v5[4] = a1;
  uint64_t v4 = (void (**)(void))MEMORY[0x1E01C46E0](v5);
  if (*(_DWORD *)(a1 + 188)) {
    operator new[]();
  }
  v4[2](v4);
}

void sub_1DDB43628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(void))
{
  MEMORY[0x1E01C3DA0](v10, 0x1000C8077774924);
  a10[2](a10);

  _Unwind_Resume(a1);
}

void sub_1DDB43694(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPanasonicUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB4371C(void *a1)
{
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB43754()
{
  return 1;
}

void *sub_1DDB4375C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = 0;
  return sub_1DDA25B2C(a1, 4uLL, &v2);
}

uint64_t sub_1DDB4378C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB91220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EAB91220))
  {
    operator new();
  }
  return qword_1EAB91218;
}

void sub_1DDB43804(_Unwind_Exception *a1)
{
  MEMORY[0x1E01C3DC0](v1, 0x10A0C40AD2D8FC7);
  __cxa_guard_abort(&qword_1EAB91220);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB4383C(uint64_t a1)
{
  *(void *)a1 = dispatch_queue_create("PurgableImageStore", 0);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 2;
  *(void *)(a1 + 40) = nullsub_9;
  *(void *)(a1 + 48) = sub_1DDB439A4;
  *(void *)(a1 + 56) = sub_1DDB439B0;
  *(void *)(a1 + 64) = nullsub_10;
  *(void *)(a1 + 96) = a1;
  *(void *)(a1 + 104) = nullsub_11;
  *(void *)(a1 + 72) = sub_1DDB439C0;
  *(void *)(a1 + 80) = sub_1DDB43A34;
  *(void *)(a1 + 88) = sub_1DDB43AEC;
  if (cache_create("com.apple.rawcamera.images", (const cache_attributes_t *)(a1 + 32), (cache_t **)(a1 + 112)))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1DDB43970(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  sub_1DDA2AF00(v2, *(void **)(v1 + 16));

  _Unwind_Resume(a1);
}

BOOL sub_1DDB439A4(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_1DDB439B0(uint64_t result, void *a2)
{
  *a2 = result;
  return result;
}

void sub_1DDB439C0(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *a2;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1DDB43F3C;
  v3[3] = &unk_1E6D05518;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_sync(v2, v3);
}

uint64_t sub_1DDB43A34(unint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  unint64_t v7 = a1;
  uint64_t v8 = &v7;
  uint64_t v2 = sub_1DDB443C8((uint64_t **)(a2 + 8), &v7, (uint64_t)&unk_1DDBFB044, (uint64_t **)&v8);
  uint64_t v3 = v2[5];
  os_signpost_id_t v4 = (std::__shared_weak_count *)v2[6];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    uint64_t v5 = sub_1DDA2D8DC(v3);
    if (!v4) {
      return v5;
    }
    goto LABEL_8;
  }
  uint64_t v5 = 0;
  if (v4) {
LABEL_8:
  }
    sub_1DDA18310(v4);
  return v5;
}

void sub_1DDB43AD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DDA18310(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB43AEC(unint64_t a1, uint64_t a2)
{
  if (a1)
  {
    unint64_t v5 = a1;
    uint64_t v6 = &v5;
    uint64_t v2 = sub_1DDB443C8((uint64_t **)(a2 + 8), &v5, (uint64_t)&unk_1DDBFB044, (uint64_t **)&v6);
    uint64_t v3 = v2[5];
    os_signpost_id_t v4 = (std::__shared_weak_count *)v2[6];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3) {
      sub_1DDA2D8CC(v3);
    }
    if (v4) {
      sub_1DDA18310(v4);
    }
  }
}

void sub_1DDB43B70(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DDA18310(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB43B88@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  value_out = 0;
  uint64_t result = cache_get_and_retain(*(cache_t **)(a1 + 112), a2, &value_out);
  if (result == 2)
  {
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  if (result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = *(void **)(a1 + 16);
  unint64_t v7 = (void *)(a1 + 16);
  uint64_t v6 = v8;
  if (!v8) {
    goto LABEL_20;
  }
  uint64_t v9 = v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= (unint64_t)value_out;
    if (v10 >= (unint64_t)value_out) {
      unint64_t v12 = v6;
    }
    else {
      unint64_t v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v7 || v9[4] > (unint64_t)value_out)
  {
LABEL_20:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_21;
  }
  uint64_t v13 = v9[5];
  uint64_t v14 = v9[6];
  *a3 = v13;
  a3[1] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  if (!v13)
  {
LABEL_21:
    uint64_t v16 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v16, "RawCameraException");
    __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDB43CB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB43CEC(uint64_t a1, void **a2)
{
  uint64_t result = cache_release_value(*(cache_t **)(a1 + 112), *a2);
  if (result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDB43D50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB43D64(uint64_t a1, void *a2, void **a3)
{
  if (cache_set_and_retain(*(cache_t **)(a1 + 112), a2, *a3, 0x64uLL))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v5 = *(NSObject **)a1;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1DDB43E44;
  uint64_t v7[3] = &unk_1E6D05518;
  v7[4] = a1;
  void v7[5] = a3;
  dispatch_sync(v5, v7);
}

void sub_1DDB43E30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB43E44(uint64_t a1)
{
  uint64_t v1 = *(unint64_t **)(a1 + 40);
  uint64_t v2 = (uint64_t **)(*(void *)(a1 + 32) + 8);
  unint64_t v7 = *v1;
  uint64_t v8 = &v7;
  uint64_t v3 = sub_1DDB443C8(v2, &v7, (uint64_t)&unk_1DDBFB044, (uint64_t **)&v8);
  unint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)v3[6];
  v3[5] = v5;
  void v3[6] = v4;
  if (v6) {
    sub_1DDA18310(v6);
  }
}

uint64_t sub_1DDB43EC0(uint64_t a1, void *a2)
{
  uint64_t result = cache_remove(*(cache_t **)(a1 + 112), a2);
  if ((result | 2) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDB43F28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DDB43F3C(uint64_t *result)
{
  uint64_t v1 = result[4];
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v2 = (uint64_t *)(v1 + 16);
  uint64_t v3 = v4;
  if (v4)
  {
    unint64_t v5 = result;
    uint64_t result = v2 - 1;
    unint64_t v6 = v5[5];
    unint64_t v7 = v2;
    do
    {
      unint64_t v8 = v3[4];
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        unint64_t v10 = v3;
      }
      else {
        unint64_t v10 = v3 + 1;
      }
      if (v9) {
        unint64_t v7 = v3;
      }
      uint64_t v3 = (void *)*v10;
    }
    while (*v10);
    if (v7 != v2 && v7[4] <= v6) {
      return sub_1DDB43F90((uint64_t **)result, v7);
    }
  }
  return result;
}

uint64_t *sub_1DDB43F90(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_1DDB43FD0(a1, a2);
  uint64_t v4 = (std::__shared_weak_count *)a2[6];
  if (v4) {
    sub_1DDA18310(v4);
  }
  operator delete(a2);
  return v3;
}

uint64_t *sub_1DDB43FD0(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1DDB44044(v6, a2);
  return v3;
}

uint64_t *sub_1DDB44044(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  unint64_t v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *unint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      unint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *unint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      int v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *int v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    unint64_t v7 = *(uint64_t **)v12;
  }
  int v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    int v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  int v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t *sub_1DDB443C8(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    v11[5] = 0;
    v11[6] = 0;
    sub_1DDA25078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

char *sub_1DDB4448C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 228) = a3;
  unint64_t v7 = (char *)(a1 + 232);
  if (v7 != (char *)a4) {
    sub_1DDA17E28(v7, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  uint64_t result = (char *)(a1 + 256);
  if (a1 + 256 != a5)
  {
    uint64_t v9 = *(char **)a5;
    uint64_t v10 = *(void *)(a5 + 8);
    unint64_t v11 = (v10 - *(void *)a5) >> 2;
    return sub_1DDA17E28(result, v9, v10, v11);
  }
  return result;
}

uint64_t sub_1DDB44504(_DWORD *a1)
{
  int v1 = a1[17];
  if (((a1[70] + 2 * v1) & 0xFLL) != 0) {
    return (2 * (a1[15] + 2 * v1) + 31) & 0x3FFFFFFE0;
  }
  else {
    return 2 * (a1[70] + 2 * v1);
  }
}

uint64_t sub_1DDB4453C(uint64_t a1)
{
  uint64_t v2 = (dispatch_once_t *)(a1 + 131368);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1DDB445D0;
  block[3] = &unk_1E6D04A58;
  block[4] = a1;
  if (*v2 != -1) {
    dispatch_once(v2, block);
  }
  return a1 + 288;
}

void sub_1DDB445D0(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1 + 16420;
  uint64_t v4 = v1[24];
  uint64_t v3 = v1[25];
  uint64_t v5 = v3 - v4;
  if (v3 == v4 || (unint64_t)v5 > 0x20001)
  {
    uint64_t v8 = v1[16422];
    uint64_t v7 = v1[16423];
    *uint64_t v2 = 1;
    if (v7 == v8)
    {
      uint64_t v26 = 0;
      int16x8_t v27 = (int16x8_t)xmmword_1DDBF8D50;
      v28.i64[0] = 0x8000800080008;
      v28.i64[1] = 0x8000800080008;
      do
      {
        *(int16x8_t *)&v1[v26 + 36] = v27;
        int16x8_t v27 = vaddq_s16(v27, v28);
        v26 += 2;
      }
      while (v26 != 0x4000);
      return;
    }
    while (1)
    {
      uint64_t v9 = *(uint64_t **)v8;
      if (*(void *)v8
        && (uint64_t v9 = (uint64_t *)__dynamic_cast(v9, (const struct __class_type_info *)&unk_1F395A728, (const struct __class_type_info *)&unk_1F398C238, 0)) != 0)
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      int v11 = *((_DWORD *)v9 + 7);
      if (v11)
      {
        uint64_t v12 = sub_1DDBBA998();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v11;
          LOWORD(v30) = 2048;
          *(void *)((char *)&v30 + 2) = 1;
          _os_log_impl(&dword_1DDA14000, v12, OS_LOG_TYPE_INFO, "Plane %d will be ignored. Only expected up to %zu planes\n", buf, 0x12u);
        }

        if (!v10) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v13 = (const void *)v9[6];
        uint64_t v14 = v9[7];
        unint64_t v15 = (v14 - (uint64_t)v13) >> 3;
        *(void *)buf = 0;
        long long v30 = 0uLL;
        sub_1DDA1808C(buf, v13, v14, v15);
        uint64_t v16 = 0;
        unint64_t v17 = v15 - 1;
        uint64_t v18 = *(double **)buf;
        do
        {
          uint64_t v19 = 0;
          double v20 = 0.0;
          do
          {
            double v21 = v18[v19];
            double v20 = v20 + v21 * pow((float)((float)v16 / 65535.0), (double)v19++);
          }
          while (v17 >= v19);
          *((_WORD *)v1 + v16++ + 144) = (int)(v20 * 65535.0);
        }
        while (v16 != 0x10000);
        *(void *)&long long v30 = v18;
        operator delete(v18);
        if (!v10) {
          goto LABEL_17;
        }
      }
      sub_1DDA18310(v10);
LABEL_17:
      v8 += 16;
      if (v8 == v7) {
        return;
      }
    }
  }
  unint64_t v22 = 0;
  unint64_t v23 = v5 >> 1;
  unsigned int v24 = -1;
  do
  {
    *((_WORD *)v1 + v22 + 144) = *(_WORD *)(v4 + 2 * v22);
    unint64_t v22 = v24 + 2;
    ++v24;
  }
  while (v23 > v22);
  if (!((v24 + 1) >> 16))
  {
    __int16 v25 = *((_WORD *)v1 + v24 + 144);
    do
      *((_WORD *)v1 + v22++ + 144) = v25;
    while (v22 != 0x10000);
  }
  *uint64_t v2 = 1;
}

void sub_1DDB448B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DDA18310(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDB448D4(uint64_t a1, int a2, unsigned int a3)
{
  int v9 = a2;
  uint64_t v5 = malloc_type_malloc(a3 + 64, 0x4AD844B7uLL);
  uint64_t v6 = *(void *)(a1 + 24);
  sub_1DDA18410(&v8, &v9);
  (*(void (**)(uint64_t, int *, void))(*(void *)v6 + 40))(v6, &v8, 0);
  (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5, a3);
  return v5;
}

void sub_1DDB4499C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    free(v1);
  }
  __cxa_end_catch();
  JUMPOUT(0x1DDB44984);
}

void sub_1DDB449C0(os_signpost_id_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = sub_1DDA83CFC();
  unint64_t v15 = v14;
  if (a1 + 1 >= 2 && os_signpost_enabled(v14))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v15, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGJPEGXLBayerUnpacker::unpackTile", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v50[0] = MEMORY[0x1E4F143A8];
  v50[1] = 3221225472;
  void v50[2] = sub_1DDB44FF8;
  v50[3] = &unk_1E6D04A58;
  v50[4] = a1;
  uint64_t v16 = (void (**)(void))MEMORY[0x1E01C46E0](v50);
  JxlDecoderCreate();
  JxlDecoderSubscribeEvents();
  if (JxlDecoderSetInput() || JxlDecoderProcessInput() != 64)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v61 = 0u;
  memset(v62, 0, sizeof(v62));
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  *(_OWORD *)buf = 0u;
  long long v52 = 0u;
  if (JxlDecoderGetBasicInfo() || JxlDecoderProcessInput() != 256)
  {
    uint64_t v46 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v46, "RawCameraException");
    __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (JxlDecoderGetColorAsEncodedProfile() || JxlDecoderSetPreferredColorProfile())
  {
    unint64_t v47 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v47, "RawCameraException");
    __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (JxlDecoderImageOutBufferSize())
  {
    unint64_t v48 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v48, "RawCameraException");
    __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v20 = a3[2];
  int v19 = a3[3];
  if (!(2 * v19 * (uint64_t)v20) && (int v21 = *a3, v22 = a3[1], v22 == a5[1]) && v21 == *a5)
  {
    id v23 = 0;
    double x = (double)v21;
    double y = (double)v22;
    double width = (double)v20;
    uint64_t v27 = a2;
    double height = (double)v19;
  }
  else
  {
    objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v17, 0, 0, v18);
    id v23 = objc_claimAutoreleasedReturnValue();
    uint64_t v27 = objc_msgSend_mutableBytes(v23, v29, v30, v31, v32);
    v64.origin.double x = (double)*a3;
    v64.origin.double y = (double)a3[1];
    v64.size.double width = (double)a3[2];
    v64.size.double height = (double)a3[3];
    v66.origin.double x = (double)*a5;
    v66.origin.double y = (double)a5[1];
    v66.size.double width = (double)a5[2];
    v66.size.double height = (double)a5[3];
    CGRect v65 = CGRectIntersection(v64, v66);
    double x = v65.origin.x;
    double y = v65.origin.y;
    double width = v65.size.width;
    double height = v65.size.height;
  }
  if JxlDecoderSetImageOutBuffer() || JxlDecoderProcessInput() != 4096 || (a4)
  {
    BOOL v49 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v49, "RawCameraException");
    __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v33 = (unint64_t)y;
  unint64_t v34 = (unint64_t)(y + height);
  if ((unint64_t)y < v34)
  {
    unint64_t v35 = (unint64_t)(x + width);
    uint64_t v36 = a5[2];
    unint64_t v37 = a2 + 2 * (unint64_t)x - 2 * *a3;
    unint64_t v38 = a4 * (v33 - a3[1]);
    BOOL v39 = (unsigned __int16 *)(v27 + 2 * (v33 - a5[1]) * v36 + 2 * (unint64_t)x - 2 * *a5);
    uint64_t v40 = 2 * v36;
    do
    {
      if (v35 > (unint64_t)x)
      {
        std::string::size_type v41 = (_WORD *)(v37 + (v38 & 0xFFFFFFFFFFFFFFFELL));
        uint64_t v42 = v39;
        unint64_t v43 = v35 - (unint64_t)x;
        do
        {
          unsigned int v44 = *v42++;
          *v41++ = *(_WORD *)(a8 + 2 * v44);
          --v43;
        }
        while (v43);
      }
      ++v33;
      v38 += a4;
      BOOL v39 = (unsigned __int16 *)((char *)v39 + v40);
    }
    while (v33 != v34);
  }
  JxlDecoderDestroy();

  v16[2](v16);
}

void sub_1DDB44F54(_Unwind_Exception *a1)
{
  v1[2](v1);
  _Unwind_Resume(a1);
}

void sub_1DDB44FF8(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGJPEGXLBayerUnpacker::unpackTile", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB45080(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGJPEGXLBayerUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v58[0] = MEMORY[0x1E4F143A8];
  v58[1] = 3221225472;
  v58[2] = sub_1DDB45684;
  v58[3] = &unk_1E6D04A58;
  v58[4] = a1;
  os_signpost_id_t v4 = (void (**)(void))MEMORY[0x1E01C46E0](v58);
  unint64_t v5 = *(unsigned int *)(a1 + 44);
  unint64_t v46 = *(unsigned int *)(a1 + 48);
  unsigned int v6 = *(_DWORD *)(a1 + 224);
  unsigned int v7 = *(_DWORD *)(a1 + 228);
  *(void *)buf = (uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 2;
  sub_1DDA18500(&v57, (unint64_t *)buf);
  uint64_t v8 = v57;
  int v42 = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 40))(a1);
  if (*(void *)(a1 + 240) - *(void *)(a1 + 232) != *(void *)(a1 + 264) - *(void *)(a1 + 256)
    || (v5 - 100000) < 0xFFFE7961
    || (v46 - 100000) < 0xFFFE7961
    || v6 - 100000 < 0xFFFE7961
    || v7 - 100000 < 0xFFFE7961
    || v8 >> 5 >= 0x271)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((v46 + v7 - 1) / v7 * ((v5 + v6 - 1) / v6) != v8)
  {
    BOOL v39 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v39, "RawCameraException");
    __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  group = dispatch_group_create();
  unint64_t v43 = dispatch_queue_create("JPEGXL DNG Tile Unpacker Queue", MEMORY[0x1E4F14430]);
  BOOL v9 = *(_DWORD *)(a1 + 131400) != 1 || *(_DWORD *)(a1 + 131404) != 1;
  uint64_t v10 = sub_1DDAA5B9C(a1);
  uint64_t v14 = (_WORD *)v10;
  BOOL v40 = v9;
  if (v9)
  {
    objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v11, 2 * (v46 * v5), v12, v13);
    id v15 = objc_claimAutoreleasedReturnValue();
    uint64_t v20 = objc_msgSend_mutableBytes(v15, v16, v17, v18, v19);
    std::string::size_type v41 = v15;
    unsigned int v21 = v6;
    if (!v8) {
      goto LABEL_26;
    }
  }
  else
  {
    unsigned int v21 = v6;
    std::string::size_type v41 = 0;
    uint64_t v20 = v10;
    if (!v8) {
      goto LABEL_26;
    }
  }
  uint64_t v22 = 0;
  uint64_t v23 = v8;
  int v24 = 0;
  int v25 = 0;
  uint64_t v45 = 4 * v23;
  do
  {
    uint64_t v26 = sub_1DDB448D4(a1, *(_DWORD *)(*(void *)(a1 + 232) + v22), *(_DWORD *)(*(void *)(a1 + 256) + v22));
    if (v26)
    {
      int v27 = *(_DWORD *)(*(void *)(a1 + 256) + v22);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1DDB4570C;
      block[3] = &unk_1E6D04A98;
      block[4] = a1;
      void block[5] = v26;
      block[6] = v20;
      int v48 = v27;
      int v49 = v5;
      int v50 = v46;
      int v51 = v42;
      int v52 = v24;
      int v53 = v25;
      unsigned int v54 = v21;
      unsigned int v55 = v7;
      dispatch_group_async(group, v43, block);
    }
    v22 += 4;
    if (v24 + v21 >= v5) {
      unsigned int v28 = v7;
    }
    else {
      unsigned int v28 = 0;
    }
    v25 += v28;
    if (v24 + v21 >= v5) {
      int v24 = 0;
    }
    else {
      v24 += v21;
    }
  }
  while (v45 != v22);
LABEL_26:
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  if (v40 && v46)
  {
    unint64_t v29 = 0;
    unint64_t v30 = *(unsigned int *)(a1 + 131400);
    unint64_t v31 = *(unsigned int *)(a1 + 131404);
    unint64_t v32 = *(int *)(a1 + 280) / v30;
    unint64_t v33 = *(int *)(a1 + 284) / v31;
    do
    {
      if (v5)
      {
        unint64_t v34 = 0;
        unint64_t v35 = v14;
        do
        {
          unint64_t v36 = v34 / v30 + v29 * v5 / v31;
          *unint64_t v35 = *(_WORD *)(v20 + 2 * v36);
          v35[1] = *(_WORD *)(v20 + 2 * (v36 + v32));
          unint64_t v37 = (v29 / v31 + v33) * v5 + v34 / v30;
          v35[v5] = *(_WORD *)(v20 + 2 * v37);
          v35[v5 + 1] = *(_WORD *)(v20 + 2 * (v37 + v32));
          v34 += 2;
          v35 += 2;
        }
        while (v34 < v5);
      }
      v29 += 2;
      v14 += 2 * v5;
    }
    while (v29 < v46);
  }

  v4[2](v4);
}

void sub_1DDB455F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB45684(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGJPEGXLBayerUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB4570C(uint64_t a1)
{
  os_signpost_id_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 60);
  uint64_t v4 = *(void *)(a1 + 40) + *(unsigned int *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 48);
  int v6 = *(_DWORD *)(a1 + 64);
  uint64_t v14 = 0;
  sub_1DDA18218(&v15, v3, v6);
  uint64_t v7 = 2 * (*(_DWORD *)(a1 + 68) * *(_DWORD *)(a1 + 60));
  int v8 = *(_DWORD *)(a1 + 80);
  int v9 = *(_DWORD *)(a1 + 84);
  sub_1DDA18218(&v12, *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76));
  sub_1DDA18218(&v13, v8, v9);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = sub_1DDB4453C(v2);
  sub_1DDB449C0(v2, v5, (int *)&v14, v7, &v12, v10, v4, v11);
  free(*(void **)(a1 + 40));
}

void *sub_1DDB457DC(uint64_t a1)
{
  *(void *)a1 = &unk_1F397B760;
  int v6 = (void **)(a1 + 131376);
  sub_1DDA18270(&v6);
  os_signpost_id_t v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(void *)(a1 + 264) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }
  *(void *)a1 = &unk_1F3977E98;
  uint64_t v4 = *(void **)(a1 + 192);
  if (v4)
  {
    *(void *)(a1 + 200) = v4;
    operator delete(v4);
  }
  return sub_1DDA18384((void *)a1);
}

uint64_t sub_1DDB45888(uint64_t a1)
{
  *(void *)a1 = &unk_1F397B760;
  uint64_t v7 = (void **)(a1 + 131376);
  sub_1DDA18270(&v7);
  os_signpost_id_t v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(void *)(a1 + 264) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }
  *(void *)a1 = &unk_1F3977E98;
  uint64_t v4 = *(void **)(a1 + 192);
  if (v4)
  {
    *(void *)(a1 + 200) = v4;
    operator delete(v4);
  }
  uint64_t v5 = sub_1DDA18384((void *)a1);
  return MEMORY[0x1E01C3DC0](v5, 0x10B1C4032A9F176);
}

double sub_1DDB45B64(uint64_t a1, int8x16_t a2)
{
  *(double *)v2.i64 = pow(fabs(*(double *)a2.i64), *(long double *)(a1 + 32));
  v3.f64[0] = NAN;
  v3.f64[1] = NAN;
  *(void *)&double result = vbslq_s8((int8x16_t)vnegq_f64(v3), v2, a2).u64[0];
  return result;
}

double sub_1DDB45BA0(uint64_t a1, int8x16_t a2)
{
  *(double *)v2.i64 = pow(fabs(*(double *)a2.i64), 1.0 / *(double *)(a1 + 32));
  v3.f64[0] = NAN;
  v3.f64[1] = NAN;
  *(void *)&double result = vbslq_s8((int8x16_t)vnegq_f64(v3), v2, a2).u64[0];
  return result;
}

double sub_1DDB45DB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  objc_msgSend_inverse(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t v7 = (double (**)(double))objc_claimAutoreleasedReturnValue();
  double v8 = v7[2](a6);

  return v8;
}

double sub_1DDB45E08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  objc_msgSend_function(*(void **)(a1 + 32), a2, a3, a4, a5);
  uint64_t v7 = (double (**)(double))objc_claimAutoreleasedReturnValue();
  double v8 = v7[2](a6);

  return v8;
}

double sub_1DDB4608C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  objc_msgSend_function(*(void **)(a1 + 32), a2, a3, a4, a5);
  double v8 = (double (**)(void))objc_claimAutoreleasedReturnValue();
  objc_msgSend_function(*(void **)(a1 + 40), v9, v10, v11, v12);
  int v13 = (void (**)(double))objc_claimAutoreleasedReturnValue();
  v13[2](a6);
  double v14 = v8[2](v8);

  return v14;
}

double sub_1DDB46108(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  objc_msgSend_inverse(*(void **)(a1 + 32), a2, a3, a4, a5);
  double v8 = (double (**)(void))objc_claimAutoreleasedReturnValue();
  objc_msgSend_inverse(*(void **)(a1 + 40), v9, v10, v11, v12);
  int v13 = (void (**)(double))objc_claimAutoreleasedReturnValue();
  v13[2](a6);
  double v14 = v8[2](v8);

  return v14;
}

id sub_1DDB46464(void *a1, double a2, double a3)
{
  id v5 = a1;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1DDB46C94;
  v10[3] = &unk_1E6D055F8;
  double v12 = a2;
  double v13 = a3;
  id v11 = v5;
  id v6 = v5;
  uint64_t v7 = (void *)MEMORY[0x1E01C46E0](v10);
  double v8 = (void *)MEMORY[0x1E01C46E0]();

  return v8;
}

double sub_1DDB468FC(uint64_t a1, double a2)
{
  id v4 = *(id *)(a1 + 32);
  uint64_t v9 = objc_msgSend_mutableBytes(v4, v5, v6, v7, v8);
  int v10 = *(_DWORD *)(a1 + 56);
  double v11 = (a2 - *(double *)(a1 + 40)) / (*(double *)(a1 + 48) - *(double *)(a1 + 40)) * (double)v10;
  int v12 = (int)fmin(floor(fmax(v11, 0.0)), (double)(v10 - 1));
  return *(double *)(v9 + 8 * v12) * ((double)(v12 + 1) - v11)
       + (v11 - (double)v12) * *(double *)(v9 + 8 * (v12 + 1));
}

uint64_t sub_1DDB46994(uint64_t a1, double a2)
{
  id v4 = *(id *)(a1 + 32);
  uint64_t result = objc_msgSend_mutableBytes(v4, v5, v6, v7, v8);
  uint64_t v10 = *(unsigned int *)(a1 + 56);
  do
  {
    if ((int)v10 < 1) {
      break;
    }
    if (!--v10) {
      break;
    }
  }
  while (*(double *)(result + 8 * v10) > a2);
  return result;
}

uint64_t sub_1DDB46A2C(uint64_t a1, double a2)
{
  id v4 = *(id *)(a1 + 32);
  uint64_t result = objc_msgSend_mutableBytes(v4, v5, v6, v7, v8);
  uint64_t v10 = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 56);
  int v12 = -1;
  do
  {
    uint64_t v13 = v11 + v10;
    if ((int)v11 + (int)v10 < 1) {
      break;
    }
    double v14 = *(double *)(result + 8 * (v11 + v10-- - 1));
    ++v12;
    if (v13 == 1) {
      break;
    }
  }
  while (v14 < a2);
  return result;
}

double sub_1DDB46C94(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 40);
  double v5 = *(double *)(a1 + 48);
  double v6 = (*(double (**)(double))(*(void *)(a1 + 32) + 16))(v4);
  double v7 = (*(double (**)(double))(*(void *)(a1 + 32) + 16))(v5);
  double v8 = v6;
  double v9 = v4;
  double v10 = v7;
  int v11 = -21;
  while (1)
  {
    if (v8 >= v10) {
      double v12 = v10;
    }
    else {
      double v12 = v8;
    }
    if (v8 >= v10) {
      double v13 = v5;
    }
    else {
      double v13 = v9;
    }
    if (v8 <= v10) {
      double v14 = v10;
    }
    else {
      double v14 = v8;
    }
    if (v8 <= v10) {
      double v15 = v5;
    }
    else {
      double v15 = v9;
    }
    if (v12 >= a2) {
      return v13;
    }
    if (v14 <= a2) {
      return v15;
    }
    double v23 = v5;
    double v24 = v8;
    double v16 = (v9 + v5) * 0.5;
    double v17 = v9;
    (*(void (**)(double))(*(void *)(a1 + 32) + 16))(v16);
    if (v12 > a2 || v18 < a2)
    {
      BOOL v20 = v14 < a2 || v18 > a2;
      double v9 = v17;
      double v5 = v23;
      double v8 = v24;
      if (v20) {
        goto LABEL_27;
      }
      double v9 = v15;
      double v5 = v16;
      double v8 = v14;
    }
    else
    {
      double v9 = v13;
      double v5 = v16;
      double v8 = v12;
    }
    double v10 = v18;
LABEL_27:
    if (__CFADD__(v11++, 1)) {
      return v16;
    }
  }
}

void *sub_1DDB46DC8@<X0>(void *a1@<X8>)
{
  return sub_1DDB46F18(a1);
}

uint64_t sub_1DDB46DEC(uint64_t a1)
{
  *(void *)a1 = &unk_1F397B8C0;
  if (pthread_mutex_init((pthread_mutex_t *)(a1 + 8), 0))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1DDB46E70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB46E84(uint64_t a1)
{
  *(void *)a1 = &unk_1F397B8C0;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  return a1;
}

void sub_1DDB46ED0(uint64_t a1)
{
  sub_1DDB46E84(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB46F08(uint64_t a1)
{
  return pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
}

uint64_t sub_1DDB46F10(uint64_t a1)
{
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 8));
}

void *sub_1DDB46F18@<X0>(void *a1@<X8>)
{
  int8x16_t v2 = operator new(0x60uLL);
  uint64_t result = sub_1DDB46F64(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1DDB46F50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB46F64(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397B8F0;
  sub_1DDB46DEC((uint64_t)(a1 + 3));
  return a1;
}

void sub_1DDB46FAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB46FC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397B8F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB46FE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397B8F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB47034(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDB4705C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = sub_1DDBF0D7C(a1, a2);
  *(void *)uint64_t v5 = &unk_1F397B940;
  *(_OWORD *)(v5 + 16) = 0u;
  double v6 = (uint64_t *)(v5 + 16);
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 48) = 0;
  for (int i = sub_1DDA19EC8(*a3); i; --i)
  {
    double v8 = sub_1DDA1A030(*a3);
    double v9 = sub_1DDA1A030(*a3);
    double v10 = sub_1DDA1A030(*a3);
    double v11 = sub_1DDA1A030(*a3);
    double v12 = sub_1DDA1A030(*a3);
    double v13 = sub_1DDA1A030(*a3);
    double v14 = (double *)operator new(0x30uLL);
    uint64_t v19 = v14 + 6;
    BOOL v20 = v14 + 6;
    *double v14 = v8;
    v14[1] = v9;
    v14[2] = v10;
    v14[3] = v11;
    v14[4] = v12;
    v14[5] = v13;
    std::string __p = v14;
    sub_1DDAD756C(v6, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v19 = __p;
      operator delete(__p);
    }
  }
  double v15 = sub_1DDA1A030(*a3);
  double v16 = sub_1DDA1A030(*a3);
  *(double *)(a1 + 40) = v15;
  *(double *)(a1 + 48) = v16;
  return a1;
}

void sub_1DDB47194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

void sub_1DDB471EC(void *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  double v6 = a2 + 2;
  double v7 = (char *)operator new(0x10uLL);
  double v8 = v7 + 16;
  *double v6 = v7 + 16;
  *(void *)double v7 = v4;
  *((void *)v7 + 1) = v5;
  *a2 = v7;
  a2[1] = v7 + 16;
  uint64_t v10 = a1[2];
  for (uint64_t i = a1[3]; v10 != i; v10 += 24)
  {
    double v11 = *(void **)v10;
    double v12 = *(void **)(v10 + 8);
    while (v11 != v12)
    {
      if ((unint64_t)v8 >= *v6)
      {
        double v14 = *a2;
        uint64_t v15 = (v8 - *a2) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          sub_1DDA17F78();
        }
        uint64_t v17 = *v6 - (void)v14;
        if (v17 >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          uint64_t v19 = (char *)sub_1DDA1814C((uint64_t)v6, v18);
          double v14 = *a2;
          double v8 = a2[1];
        }
        else
        {
          uint64_t v19 = 0;
        }
        BOOL v20 = &v19[8 * v15];
        *(void *)BOOL v20 = *v11;
        double v13 = v20 + 8;
        while (v8 != v14)
        {
          uint64_t v21 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v20 - 1) = v21;
          v20 -= 8;
        }
        *a2 = v20;
        a2[1] = v13;
        a2[2] = &v19[8 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)double v8 = *v11;
        double v13 = v8 + 8;
      }
      a2[1] = v13;
      ++v11;
      double v8 = v13;
    }
  }
}

void sub_1DDB47348(_Unwind_Exception *exception_object)
{
  float64x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDB47368(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v73[6] = *MEMORY[0x1E4F143B8];
  float v69 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5);
  float v70 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7, v8);
  double v13 = *(double ***)(a1 + 16);
  for (uint64_t i = *(double ***)(a1 + 24); v13 != i; v13 += 3)
  {
    v72[0] = @"kr0";
    uint64_t v15 = objc_msgSend_numberWithDouble_(NSNumber, v9, v10, v11, v12, **v13);
    v73[0] = v15;
    v72[1] = @"kr1";
    BOOL v20 = objc_msgSend_numberWithDouble_(NSNumber, v16, v17, v18, v19, (*v13)[1]);
    v73[1] = v20;
    v72[2] = @"kr2";
    int v25 = objc_msgSend_numberWithDouble_(NSNumber, v21, v22, v23, v24, (*v13)[2]);
    v73[2] = v25;
    v72[3] = @"kr3";
    unint64_t v30 = objc_msgSend_numberWithDouble_(NSNumber, v26, v27, v28, v29, (*v13)[3]);
    v73[3] = v30;
    void v72[4] = @"kt0";
    unint64_t v35 = objc_msgSend_numberWithDouble_(NSNumber, v31, v32, v33, v34, (*v13)[4]);
    void v73[4] = v35;
    v72[5] = @"kt1";
    BOOL v40 = objc_msgSend_numberWithDouble_(NSNumber, v36, v37, v38, v39, (*v13)[5]);
    v73[5] = v40;
    int v42 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v41, (uint64_t)v73, (uint64_t)v72, 6);
    objc_msgSend_addObject_(v70, v43, (uint64_t)v42, v44, v45);
  }
  objc_msgSend_setObject_forKeyedSubscript_(v69, v9, (uint64_t)v70, @"CoefficientSets", v12);
  double v46 = *(double *)(a1 + 48);
  int v51 = objc_msgSend_numberWithDouble_(NSNumber, v47, v48, v49, v50, *(double *)(a1 + 40));
  v71[0] = v51;
  long long v56 = objc_msgSend_numberWithDouble_(NSNumber, v52, v53, v54, v55, v46);
  v71[1] = v56;
  long long v59 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v57, (uint64_t)v71, 2, v58);
  objc_msgSend_setObject_forKeyedSubscript_(v69, v60, (uint64_t)v59, @"NormalizedCenter", v61);

  uint64_t v62 = [RAWOpcodeWarpRectilinear alloc];
  CGRect v66 = objc_msgSend_initWithArguments_(v62, v63, (uint64_t)v69, v64, v65);

  return v66;
}

void sub_1DDB47624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB476D0(uint64_t a1)
{
  *(void *)a1 = &unk_1F397B940;
  float64x2_t v3 = (void **)(a1 + 16);
  sub_1DDA9E7E4(&v3);
  return a1;
}

uint64_t sub_1DDB47728(uint64_t a1)
{
  *(void *)a1 = &unk_1F397B940;
  float64x2_t v3 = (void **)(a1 + 16);
  sub_1DDA9E7E4(&v3);
  return MEMORY[0x1E01C3DC0](a1, 0x10A1C40C9E8D6FDLL);
}

uint64_t sub_1DDB47794(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 72))(v3);
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB4781C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB47834(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 80))(v3);
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB478BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB478D4(uint64_t *a1)
{
  int v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 176))(a1);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(v3 + 2176);
    uint64_t v5 = a1;
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(v3 + 2184);
    uint64_t v5 = a1;
  }
  return v4(v5);
}

uint64_t sub_1DDB47994(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 504))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB47A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB47A48(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 504))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB47AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB47AFC(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1048))(a1) & 1) == 0)
  {
    double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 1600))(a1);
    fmin(fmax(v2 * (*(double (**)(uint64_t))(*(void *)a1 + 2088))(a1), 0.0), 1.0);
  }
}

BOOL sub_1DDB47BD4(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1240))(a1);
  unsigned __int8 v9 = v2;
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v7, a1);
    int v2 = sub_1DDB15F6C(v7, &v9, v3, v4, v5);
    unsigned __int8 v9 = v2;
    if (v8)
    {
      sub_1DDA18310(v8);
      int v2 = v9;
    }
  }
  return v2 != 0;
}

void sub_1DDB47C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB47CA8(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 1456))(a1);
  double v9 = v2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2224))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v7, a1);
    double v2 = sub_1DDB15F80(v7, &v9, v3, v4, v5);
    double v9 = v2;
    if (v8)
    {
      sub_1DDA18310(v8);
      double v2 = v9;
    }
  }
  return fmin(fmax(v2, 0.0), 1.04);
}

void sub_1DDB47DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB47DC4(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 1472))(a1);
  double v9 = v2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2224))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v7, a1);
    double v2 = sub_1DDB16010(v7, &v9, v3, v4, v5);
    double v9 = v2;
    if (v8)
    {
      sub_1DDA18310(v8);
      double v2 = v9;
    }
  }
  return fmin(fmax(v2, 1.5), 3.1);
}

void sub_1DDB47EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB47EE0(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return 1.0;
}

void sub_1DDB47F64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDB47F78(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 1464))(a1);
  double v9 = v2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2224))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v7, a1);
    double v2 = sub_1DDB16024(v7, &v9, v3, v4, v5);
    double v9 = v2;
    if (v8)
    {
      sub_1DDA18310(v8);
      return v9;
    }
  }
  return v2;
}

void sub_1DDB4806C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDB48084(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1248))(a1);
  unsigned __int8 v9 = v2;
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v7, a1);
    int v2 = sub_1DDB16038(v7, &v9, v3, v4, v5);
    unsigned __int8 v9 = v2;
    if (v8)
    {
      sub_1DDA18310(v8);
      int v2 = v9;
    }
  }
  return v2 != 0;
}

void sub_1DDB48140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB48158(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v2 = (*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0);
  double result = 4.0;
  if (v2 >= 0.5) {
    return ceil(sqrt((v2 + -0.5) * 60.0)) + 4.0;
  }
  return result;
}

void sub_1DDB4824C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDB48260(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 2296))(a1);
  return fmax(v2, (*(double (**)(uint64_t))(*(void *)a1 + 2272))(a1));
}

void sub_1DDB482EC(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 1776))(a1);
  if (v2 == 0.0) {
    double v3 = 0.5;
  }
  else {
    double v3 = v2;
  }
  double v10 = v3;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2264))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v8, a1);
    double v10 = sub_1DDB16060(v8, &v10, v4, v5, v6);
    if (v9) {
      sub_1DDA18310(v9);
    }
  }
}

void sub_1DDB48464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB4848C(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 1544))(a1);
  double v9 = v2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2264))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v7, a1);
    double v2 = sub_1DDB16074(v7, &v9, v3, v4, v5);
    double v9 = v2;
    if (v8)
    {
      sub_1DDA18310(v8);
      double v2 = v9;
    }
  }
  return fmin(fmax(v2, 0.1), 25.0);
}

void sub_1DDB48590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB485A8(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 1512))(a1);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1048))(a1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1112))(a1) & 1) == 0)
  {
    double v3 = v2 * ((*(double (**)(uint64_t))(*(void *)a1 + 1560))(a1) + -1.0);
    double v2 = v2 + v3 * (*(double (**)(uint64_t))(*(void *)a1 + 2088))(a1);
  }
  double v4 = (*(double (**)(uint64_t))(*(void *)a1 + 1520))(a1) - v2;
  return v2 + v4 * (*(double (**)(uint64_t))(*(void *)a1 + 2288))(a1);
}

double sub_1DDB48740(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 1528))(a1);
  double v3 = (*(double (**)(uint64_t))(*(void *)a1 + 1536))(a1) - v2;
  double v4 = v2 + v3 * (*(double (**)(uint64_t))(*(void *)a1 + 2288))(a1);
  return fmax(v4, (*(double (**)(uint64_t))(*(void *)a1 + 2304))(a1));
}

double sub_1DDB4884C()
{
  return 0.00184;
}

double sub_1DDB48858(uint64_t a1)
{
  double v2 = operator new(0x18uLL);
  *(_OWORD *)double v2 = xmmword_1DDBFEC60;
  v2[2] = 0x400D99999999999ALL;
  double v3 = (char *)operator new(0x18uLL);
  *(_OWORD *)double v3 = xmmword_1DDBFEC78;
  *((void *)v3 + 2) = 0x3FB1EB851EB851ECLL;
  (*(void (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0);
  uint64_t v5 = 0;
  while (1)
  {
    double v6 = *(double *)&v2[v5];
    if (v4 < v6) {
      break;
    }
    if (++v5 == 3)
    {
      double v7 = *((double *)v3 + 2);
      goto LABEL_8;
    }
  }
  if (v5 * 8) {
    double v7 = *(double *)&v3[v5 * 8 - 8]
  }
       + (v4 - *(double *)&v2[v5 - 1])
       / (v6 - *(double *)&v2[v5 - 1])
       * (*(double *)&v3[v5 * 8] - *(double *)&v3[v5 * 8 - 8]);
  else {
    double v7 = *(double *)v3;
  }
LABEL_8:
  operator delete(v3);
  operator delete(v2);
  return v7;
}

void sub_1DDB48970(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_1DDB48994(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(void *)a1 + 1752))(a1), 0.5), 3.5);
}

double sub_1DDB489E4(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(void *)a1 + 1320))(a1), -0.2), 0.2);
}

double sub_1DDB48A3C(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(void *)a1 + 1328))(a1), -0.2), 0.2);
}

double sub_1DDB48A94(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(void *)a1 + 1336))(a1), -0.2), 0.2);
}

double sub_1DDB48AEC(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(void *)a1 + 1344))(a1), -0.2), 0.2);
}

double sub_1DDB48B44(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(void *)a1 + 1352))(a1), -0.2), 0.2);
}

double sub_1DDB48B9C(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(void *)a1 + 1360))(a1), -0.2), 0.2);
}

uint64_t sub_1DDB48BF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1264))();
}

double sub_1DDB48C20(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v9);
  uint64_t v2 = v9;
  double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 1312))(a1);
  double v6 = sub_1DDB16088(v2, &v8, v3, v4, v5);
  if (v10) {
    sub_1DDA18310(v10);
  }
  return fmin(fmax(v6, 0.0), 1.0);
}

void sub_1DDB48CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB48D08(uint64_t a1, int a2)
{
  if (a2) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)a1 + 1256))();
  }
}

double sub_1DDB48D40(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(void *)a1 + 1288))(a1), 0.0), 1.0);
}

double sub_1DDB48D90(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(void *)a1 + 1304))(a1), 0.0), 1.0);
}

double sub_1DDB48DE0(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(void *)a1 + 1416))(a1), 0.0), 1.0);
}

BOOL sub_1DDB48E30(uint64_t a1)
{
  return (*(double (**)(uint64_t))(*(void *)a1 + 2432))(a1) > 0.125;
}

BOOL sub_1DDB48E7C(uint64_t a1)
{
  return ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2464))(a1) & 1) != 0
      || (*(double (**)(uint64_t))(*(void *)a1 + 1416))(a1) <= 0.125;
}

BOOL sub_1DDB48F10(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return (*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0) > 0.7;
}

void sub_1DDB48FDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB48FF0(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 184))(a1)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 128))(a1))
  {
    return (*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) > 7;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2152))(a1)) {
    return 1;
  }
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 8) {
    return 0;
  }
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 128))(a1) ^ 1;
}

void sub_1DDB491A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDB491B4(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2480))(a1);
  double result = 0.0;
  if (v2)
  {
    uint64_t v10 = 0x3FE0000000000000;
    if ((*(double (**)(uint64_t, void, void, double))(*(void *)a1 + 2664))(a1, 0, 0, 0.0) < 0.5) {
      uint64_t v10 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v8, a1);
    double v7 = sub_1DDB16358(v8, (double *)&v10, v4, v5, v6);
    uint64_t v10 = *(void *)&v7;
    if (v9)
    {
      sub_1DDA18310(v9);
      double v7 = *(double *)&v10;
    }
    return fmin(fmax(v7, 0.0), 1.0);
  }
  return result;
}

void sub_1DDB492C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB492DC(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) > 8)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v18, a1);
    uint64_t v9 = v18;
    unsigned __int8 v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2264))(a1);
    char v13 = sub_1DDB16368(v9, &v17, v10, v11, v12);
    if (v19) {
      sub_1DDA18310(v19);
    }
    if (v13)
    {
      double v14 = (*(double (**)(uint64_t))(*(void *)a1 + 2504))(a1);
      (*(void (**)(uint64_t))(*(void *)a1 + 2512))(a1);
      return v15 > 0.0 && v14 > 0.0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 280))(a1);
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2264))(a1);
    double v4 = (*(double (**)(uint64_t))(*(void *)a1 + 2504))(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 2512))(a1);
    BOOL v5 = v4 != 0.0;
    if (v6 == 0.0) {
      BOOL v5 = 0;
    }
    unsigned int v7 = v5 & v3;
    if (v2 <= 3.0) {
      return v7;
    }
    else {
      return 0;
    }
  }
}

void sub_1DDB495BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB495E4(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v9);
  uint64_t v2 = v9;
  double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 1776))(a1);
  double v6 = sub_1DDB16378(v2, &v8, v3, v4, v5);
  if (v10) {
    sub_1DDA18310(v10);
  }
  return v6;
}

void sub_1DDB496A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB496C0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v9);
  uint64_t v2 = v9;
  double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 1544))(a1);
  double v6 = sub_1DDB16388(v2, &v8, v3, v4, v5);
  if (v10) {
    sub_1DDA18310(v10);
  }
  return v6;
}

void sub_1DDB49784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB4979C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v11);
  uint64_t v2 = v11;
  double v10 = (*(double (**)(uint64_t))(*(void *)a1 + 1784))(a1);
  double v6 = sub_1DDB16398(v2, &v10, v3, v4, v5);
  if (v12) {
    sub_1DDA18310(v12);
  }
  BOOL v7 = (*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0) > 1.0 && v6 == 0.0;
  double v8 = 0.1;
  if (!v7) {
    double v8 = v6;
  }
  return fmin(fmax(v8, 0.0), 1.3);
}

void sub_1DDB498C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB498D8(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v9);
  uint64_t v2 = v9;
  double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 1792))(a1);
  double v6 = sub_1DDB163A8(v2, &v8, v3, v4, v5);
  if (v10) {
    sub_1DDA18310(v10);
  }
  return fmin(fmax(v6, 0.0), 1.0);
}

void sub_1DDB499A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB499C0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v9);
  uint64_t v2 = v9;
  unsigned __int8 v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1800))(a1);
  uint64_t v6 = sub_1DDB163B8(v2, &v8, v3, v4, v5);
  if (v10) {
    sub_1DDA18310(v10);
  }
  return v6;
}

void sub_1DDB49A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB49A94(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 184))(a1)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 128))(a1))
  {
    double v2 = fmax((*(double (**)(uint64_t))(*(void *)a1 + 168))(a1) + -0.5, 0.0);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v10, a1);
    uint64_t v3 = v10;
    double v9 = (*(double (**)(uint64_t))(*(void *)a1 + 1808))(a1);
    double v7 = sub_1DDB163C8(v3, &v9, v4, v5, v6);
    if (v11) {
      sub_1DDA18310(v11);
    }
    double v2 = fmax(v7, 0.0);
  }
  return fmin(v2, 1.0);
}

void sub_1DDB49BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB49C10(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v9);
  uint64_t v2 = v9;
  double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 1816))(a1);
  double v6 = sub_1DDB163D8(v2, &v8, v3, v4, v5);
  if (v10) {
    sub_1DDA18310(v10);
  }
  return fmin(fmax(v6, -2.0), 2.0);
}

void sub_1DDB49CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB49CF8(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 184))(a1)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 128))(a1))
  {
    double v2 = fmax((*(double (**)(uint64_t))(*(void *)a1 + 168))(a1) * 0.1 / 1.5, 0.0);
    double v3 = 0.2;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v11, a1);
    uint64_t v4 = v11;
    double v10 = (*(double (**)(uint64_t))(*(void *)a1 + 1824))(a1);
    double v8 = sub_1DDB163E8(v4, &v10, v5, v6, v7);
    if (v12) {
      sub_1DDA18310(v12);
    }
    double v2 = fmax(v8, 0.0);
    double v3 = 1.0;
  }
  return fmin(v2, v3);
}

void sub_1DDB49E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB49E88(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v9);
  uint64_t v2 = v9;
  double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 1832))(a1);
  double v6 = sub_1DDB163F8(v2, &v8, v3, v4, v5);
  if (v10) {
    sub_1DDA18310(v10);
  }
  return fmin(fmax(v6, 0.0), 4.0);
}

void sub_1DDB49F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB49F70(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v7);
  unsigned __int8 v6 = 0;
  uint64_t v4 = sub_1DDB16408(v7, &v6, v1, v2, v3);
  if (v8) {
    sub_1DDA18310(v8);
  }
  return v4;
}

void sub_1DDB49FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB4A000(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v7);
  unsigned __int8 v6 = 0;
  uint64_t v4 = sub_1DDB16418(v7, &v6, v1, v2, v3);
  if (v8) {
    sub_1DDA18310(v8);
  }
  return v4;
}

void sub_1DDB4A078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB4A090(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v7);
  unsigned __int8 v6 = 0;
  uint64_t v4 = sub_1DDB16428(v7, &v6, v1, v2, v3);
  if (v8) {
    sub_1DDA18310(v8);
  }
  return v4;
}

void sub_1DDB4A108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB4A120(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2272))();
}

double sub_1DDB4A14C()
{
  return 0.12;
}

double sub_1DDB4A158()
{
  return 1.0;
}

void sub_1DDB4A160(uint64_t a1@<X0>, int a2@<W2>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2408))(a1) | a2) != 1)
  {
    unsigned __int8 v6 = 0;
LABEL_7:
    sub_1DDA58E88(&v11, v5);
    uint64_t v8 = v11;
    uint64_t v9 = v12;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    *a3 = v8;
    a3[1] = (uint64_t)v9;
    if (v6)
    {
      sub_1DDA18310(v6);
      if (v12) {
        sub_1DDA18310(v12);
      }
    }
    if (!v8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    return;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 1720))(&v11, a1);
  uint64_t v7 = v11;
  unsigned __int8 v6 = v12;
  *a3 = v11;
  a3[1] = (uint64_t)v6;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2712))(a1)) {
    v5.n128_f64[0] = sub_1DDA59098(v7);
  }
  if (!v7) {
    goto LABEL_7;
  }
}

void sub_1DDB4A2D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DDA18310(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB4A308()
{
  return 10000.0;
}

void sub_1DDB4A314(uint64_t a1, _DWORD *a2, _DWORD *a3, char *a4)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 264))(a1);
  if (v8 <= (*(double (**)(uint64_t))(*(void *)a1 + 2448))(a1))
  {
    char v9 = 0;
    *a3 = 1065353216;
    *a2 = 1065353216;
  }
  else
  {
    *a2 = 1071300739;
    *a3 = 1084393259;
    char v9 = 1;
  }
  *a4 = v9;
}

void sub_1DDB4A454(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDB4A468(uint64_t a1, int a2)
{
  double result = 2.2;
  if (a2) {
    return 1.0;
  }
  return result;
}

double sub_1DDB4A480()
{
  return 1.0;
}

double sub_1DDB4A488()
{
  return 1.0;
}

uint64_t sub_1DDB4A490(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2168))(a1);
  if (v2 >> 8 == 8487297)
  {
    if (v2 + 2122219136 >= 0x12) {
      return 23;
    }
    else {
      return v2 + 2122219145;
    }
  }
  else
  {
    signed int v4 = (v2 >> 4) & 0xF0F0F0F | (16 * v2) & 0xF0F0F0F0;
    if (v4 > 555819296)
    {
      if (v4 > 1229539656)
      {
        if (v4 == 1229539657) {
          return 3;
        }
        if (v4 == 1633771873) {
          return 2;
        }
      }
      else
      {
        if (v4 == 555819297) {
          return 30;
        }
        if (v4 == 825307441) {
          return 29;
        }
      }
    }
    else if (v4 > 320017170)
    {
      if (v4 == 320017171) {
        return 28;
      }
      if (v4 == 370546198) {
        return 1;
      }
    }
    else
    {
      if (v4 == -1802201964) {
        return 0;
      }
      if (v4 == 303174162) {
        return 27;
      }
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_1DDB4A67C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB4A690(uint64_t a1, double *a2, double *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)
    || (char v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2152))(a1), v6.n128_u64[0] = 1.0, (v7 & 1) == 0))
  {
    if ((*(unsigned int (**)(uint64_t, __n128))(*(void *)a1 + 2656))(a1, v6)) {
      BOOL v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2656))(a1) == 1;
    }
    else {
      BOOL v8 = 1;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1016))(&__p, a1);
    unint64_t v9 = !v8;
    if (v9 >= ((char *)v32 - (unsigned char *)__p) >> 3) {
      sub_1DDA24AD0();
    }
    double v10 = *((double *)__p + v9);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1016))(&v29, a1);
    unint64_t v11 = 2;
    if (v8) {
      unint64_t v11 = 3;
    }
    if (v11 >= (v30 - (unsigned char *)v29) >> 3) {
      sub_1DDA24AD0();
    }
    double v12 = *((double *)v29 + v11);
    unint64_t v30 = v29;
    operator delete(v29);
    if (__p)
    {
      uint64_t v32 = (std::__shared_weak_count *)__p;
      operator delete(__p);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1120))(&__p, a1);
    char v13 = __p;
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
    (*(void (**)(void **__return_ptr, void *, uint64_t))(*(void *)v13 + 8))(&v29, v13, v14);
    if (v32) {
      sub_1DDA18310(v32);
    }
    if (v9 >= (v30 - (unsigned char *)v29) >> 3) {
      sub_1DDA24AD0();
    }
    double v15 = *((double *)v29 + v9);
    char v28 = 0;
    (*(void (**)(void (****__return_ptr)(void, uint64_t, void **, char *), uint64_t))(*(void *)a1 + 2128))(&v26, a1);
    unint64_t v16 = v26;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
    (**v16)(v16, v17, &__p, &v28);
    if (v27) {
      sub_1DDA18310(v27);
    }
    uint64_t v18 = (float *)(&__p + 2 * v9);
    if (v28) {
      float v19 = v18[2];
    }
    else {
      float v19 = v18[3] * v18[3];
    }
    float v20 = *v18;
    float v21 = v18[1];
    double v22 = (*(double (**)(uint64_t))(*(void *)a1 + 904))(a1);
    double v23 = (v10 + v12) * 0.5;
    double v24 = v22 - v23;
    if (a2) {
      *a2 = (v20 + (v23 + (v22 - v23) * 0.150000006) * (v21 + (v23 + (v22 - v23) * 0.150000006) * v19))
    }
          / (v24
           * v24)
          / 0.150000006;
    if (a3) {
      *a3 = v15 * v15 / (v24 * v24);
    }
    if (v29)
    {
      unint64_t v30 = v29;
      operator delete(v29);
    }
  }
}

void sub_1DDB4ABAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long double sub_1DDB4AC40(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0);
  long double v3 = (*(double (**)(uint64_t))(*(void *)a1 + 928))(a1);
  return v2 * exp2(v3);
}

float sub_1DDB4ACE8@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  bzero(a3, 0x4D8uLL);
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)a3 + 13) = _D0;
  a3[50] = 1045220557;
  a3[61] = 0;
  a3[64] = 0;
  *((void *)a3 + 27) = 0;
  *(void *)((char *)a3 + 221) = 0;
  *((void *)a3 + 29) = 0;
  *((unsigned char *)a3 + 240) = 0;
  a3[17] = 1077936128;
  *((unsigned char *)a3 + 9) = 1;
  a3[3] = 1077936128;
  *((unsigned char *)a3 + 20) = 1;
  a3[12] = 1063665663;
  (*(void (**)(uint64_t, int *, int *, uint64_t))(*(void *)a1 + 2456))(a1, a3 + 14, a3 + 15, (uint64_t)a3 + 53);
  float v11 = (*(double (**)(uint64_t))(*(void *)a1 + 1080))(a1);
  *((float *)a3 + 29) = v11;
  a3[33] = 1059760816;
  a3[49] = 1077936128;
  *(_OWORD *)(a3 + 78) = xmmword_1DDBFEBB0;
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2168))(a1);
  if (!v12) {
    int v12 = -1802201964;
  }
  *a3 = v12;
  a3[1] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2656))(a1);
  *((unsigned char *)a3 + 21) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  float v13 = (*(double (**)(uint64_t))(*(void *)a1 + 2216))(a1);
  *((float *)a3 + 124) = v13;
  *((unsigned char *)a3 + 52) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2112))(a1);
  *((unsigned char *)a3 + 272) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2224))(a1);
  float v14 = (*(double (**)(uint64_t))(*(void *)a1 + 2232))(a1);
  *((float *)a3 + 70) = v14;
  float v15 = (*(double (**)(uint64_t))(*(void *)a1 + 2256))(a1);
  *((float *)a3 + 71) = v15;
  double v16 = (*(double (**)(uint64_t))(*(void *)a1 + 2240))(a1);
  float v17 = __exp10(v16);
  *((float *)a3 + 72) = v17;
  *((unsigned char *)a3 + 160) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2264))(a1);
  float v18 = (*(double (**)(uint64_t))(*(void *)a1 + 2272))(a1);
  *((float *)a3 + 41) = v18;
  float v19 = (*(double (**)(uint64_t))(*(void *)a1 + 2280))(a1);
  *((float *)a3 + 42) = v19;
  float v20 = (*(double (**)(uint64_t))(*(void *)a1 + 2304))(a1);
  *((float *)a3 + 44) = v20;
  float v21 = (*(double (**)(uint64_t))(*(void *)a1 + 2312))(a1);
  *((float *)a3 + 45) = v21;
  float v22 = (*(double (**)(uint64_t))(*(void *)a1 + 2320))(a1);
  *((float *)a3 + 28) = v22;
  *((unsigned char *)a3 + 420) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 2408))(a1, a2);
  float v23 = (*(double (**)(uint64_t, uint64_t))(*(void *)a1 + 2632))(a1, a2);
  *((float *)a3 + 115) = v23;
  float v24 = (*(double (**)(uint64_t))(*(void *)a1 + 2640))(a1);
  *((float *)a3 + 125) = v24;
  float v25 = (*(double (**)(uint64_t))(*(void *)a1 + 2648))(a1);
  *((float *)a3 + 126) = v25;
  float v26 = (*(double (**)(uint64_t))(*(void *)a1 + 896))(a1);
  *((float *)a3 + 103) = v26;
  *((float *)a3 + 102) = v26;
  *((float *)a3 + 101) = v26;
  float v27 = (*(double (**)(uint64_t))(*(void *)a1 + 2080))(a1);
  *((float *)a3 + 4) = v27;
  (*(void (**)(uint64_t))(*(void *)a1 + 432))(a1);
  a3[23] = v28 & 0xFFFFFFFC;
  a3[24] = v29 & 0xFFFFFFFE;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 744))(&v108, a1);
  unint64_t v30 = (double *)v108;
  unint64_t v31 = (char *)v109 - (unsigned char *)v108;
  if (v109 == v108
    || (float v32 = *(double *)v108, *((float *)a3 + 82) = v32, v31 < 9)
    || (float v33 = v30[1], *((float *)a3 + 83) = v33, v31 <= 0x10))
  {
    sub_1DDA24AD0();
  }
  float v34 = v30[2];
  *((float *)a3 + 84) = v34;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 792))(__p, a1, a2);
  if (sub_1DDAD88E0((uint64_t)__p) < 5 || sub_1DDAD88D8((unsigned int *)__p) <= 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 0);
  uint64_t v107 = v35;
  float v36 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 0);
  *((float *)a3 + 85) = v36;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 0);
  uint64_t v107 = v37;
  float v38 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 1u);
  *((float *)a3 + 86) = v38;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 0);
  uint64_t v107 = v39;
  float v40 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 2u);
  *((float *)a3 + 87) = v40;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 1u);
  uint64_t v107 = v41;
  float v42 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 0);
  *((float *)a3 + 88) = v42;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 1u);
  uint64_t v107 = v43;
  float v44 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 1u);
  *((float *)a3 + 89) = v44;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 1u);
  uint64_t v107 = v45;
  float v46 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 2u);
  *((float *)a3 + 90) = v46;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 2u);
  uint64_t v107 = v47;
  float v48 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 0);
  *((float *)a3 + 91) = v48;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 2u);
  uint64_t v107 = v49;
  float v50 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 1u);
  *((float *)a3 + 92) = v50;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 2u);
  uint64_t v107 = v51;
  float v52 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 2u);
  *((float *)a3 + 93) = v52;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 0);
  uint64_t v107 = v53;
  float v54 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 4u);
  *((float *)a3 + 94) = v54;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 1u);
  uint64_t v107 = v55;
  float v56 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 4u);
  *((float *)a3 + 95) = v56;
  uint64_t v106 = sub_1DDAD8560((uint64_t)__p, 2u);
  uint64_t v107 = v57;
  float v58 = *(double *)sub_1DDAD85FC((uint64_t)&v106, 4u);
  *((float *)a3 + 96) = v58;
  if (__p[1])
  {
    *(void **)&long long v104 = __p[1];
    operator delete(__p[1]);
  }
  if (v108)
  {
    int v109 = (std::__shared_weak_count *)v108;
    operator delete(v108);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1016))(__p, a1);
  long long v59 = (double *)__p[0];
  long long v60 = (char *)__p[1];
  if (__p[0] == __p[1])
  {
    if (!__p[0]) {
      goto LABEL_19;
    }
  }
  else
  {
    int v61 = 0;
    uint64_t v62 = (char *)__p[0];
    do
    {
      *(float *)&int v63 = v59[v61];
      a3[v61 + 97] = v63;
      if ((v63 & 0x7FFFFFFFu) >= 0x7F800000)
      {
        int v101 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v101, "RawCameraException");
        __cxa_throw(v101, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v62 += 8;
      ++v61;
    }
    while (v62 != v60);
  }
  __p[1] = v59;
  operator delete(v59);
LABEL_19:
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void))(*(void *)a1 + 2624))(&v108, a1, a2, 0);
  sub_1DDA590CC((uint64_t)v108, (uint64_t)__p);
  a3[114] = v105;
  long long v64 = v104;
  *(_OWORD *)(a3 + 106) = *(_OWORD *)__p;
  *(_OWORD *)(a3 + 110) = v64;
  if (v109) {
    sub_1DDA18310(v109);
  }
  a3[136] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  *((unsigned char *)a3 + 161) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2440))(a1);
  *((unsigned char *)a3 + 162) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2464))(a1);
  float v65 = (*(double (**)(uint64_t))(*(void *)a1 + 1384))(a1);
  *((float *)a3 + 6) = v65;
  float v66 = (*(double (**)(uint64_t))(*(void *)a1 + 1392))(a1);
  *((float *)a3 + 7) = v66;
  float v67 = (*(double (**)(uint64_t))(*(void *)a1 + 1400))(a1);
  *((float *)a3 + 8) = v67;
  a3[9] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1408))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 624))(a1)) {
    a3[9] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 624))(a1);
  }
  *((unsigned char *)a3 + 44) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1208))(a1);
  *((unsigned char *)a3 + 64) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1232))(a1);
  float v68 = (*(double (**)(uint64_t))(*(void *)a1 + 1448))(a1);
  *((float *)a3 + 69) = v68;
  float v69 = (*(double (**)(uint64_t))(*(void *)a1 + 1488))(a1);
  *((float *)a3 + 73) = v69;
  float v70 = (*(double (**)(uint64_t))(*(void *)a1 + 1496))(a1);
  *((float *)a3 + 74) = v70;
  float v71 = (*(double (**)(uint64_t))(*(void *)a1 + 1584))(a1);
  *((float *)a3 + 122) = v71;
  float v72 = (*(double (**)(uint64_t))(*(void *)a1 + 1592))(a1);
  *((float *)a3 + 123) = v72;
  *((unsigned char *)a3 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1376))(a1);
  float v73 = (*(double (**)(uint64_t))(*(void *)a1 + 1768))(a1);
  *((float *)a3 + 43) = v73;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2056))(__p, a1);
  if (__p[0])
  {
    if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 16))(__p[0]))
    {
      *((unsigned char *)a3 + 636) = 1;
      *((float *)a3 + 160) = (float)(*(unsigned int (**)(uint64_t))(*(void *)a1 + 256))(a1);
      int v74 = __p[0];
      uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
      float v76 = (*(double (**)(void *, uint64_t))(*(void *)v74 + 32))(v74, v75);
      *((float *)a3 + 161) = v76;
      uint64_t v77 = __p[0];
      uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
      float v79 = (*(double (**)(void *, uint64_t))(*(void *)v77 + 40))(v77, v78);
      *((float *)a3 + 162) = v79;
    }
    if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 48))(__p[0]))
    {
      a3[127] = (*(uint64_t (**)(void *))(*(void *)__p[0] + 56))(__p[0]);
      float v80 = (*(double (**)(void *))(*(void *)__p[0] + 64))(__p[0]);
      *((float *)a3 + 128) = v80;
      float v81 = (*(double (**)(void *))(*(void *)__p[0] + 72))(__p[0]);
      *((float *)a3 + 129) = v81;
      float v82 = (*(double (**)(void *))(*(void *)__p[0] + 80))(__p[0]);
      *((float *)a3 + 130) = v82;
      a3[131] = (*(uint64_t (**)(void *))(*(void *)__p[0] + 88))(__p[0]);
      float v83 = (*(double (**)(void *))(*(void *)__p[0] + 96))(__p[0]);
      *((float *)a3 + 132) = v83;
      float v84 = (*(double (**)(void *))(*(void *)__p[0] + 104))(__p[0]);
      *((float *)a3 + 133) = v84;
      float v85 = (*(double (**)(void *))(*(void *)__p[0] + 112))(__p[0]);
      *((float *)a3 + 134) = v85;
      a3[135] = (*(uint64_t (**)(void *))(*(void *)__p[0] + 120))(__p[0]);
    }
    if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 128))(__p[0]))
    {
      *((unsigned char *)a3 + 548) = 1;
      float v86 = (*(double (**)(void *))(*(void *)__p[0] + 144))(__p[0]);
      *((float *)a3 + 138) = v86;
      a3[139] = (*(uint64_t (**)(void *))(*(void *)__p[0] + 136))(__p[0]);
      float v87 = (*(double (**)(void *))(*(void *)__p[0] + 152))(__p[0]);
      *((float *)a3 + 140) = v87;
      float v88 = (*(double (**)(void *))(*(void *)__p[0] + 160))(__p[0]);
      *((float *)a3 + 141) = v88;
      float v89 = (*(double (**)(void *))(*(void *)__p[0] + 168))(__p[0]);
      *((float *)a3 + 142) = v89;
      a3[143] = (*(uint64_t (**)(void *))(*(void *)__p[0] + 176))(__p[0]);
      float v90 = (*(double (**)(void *))(*(void *)__p[0] + 184))(__p[0]);
      *((float *)a3 + 144) = v90;
      float v91 = (*(double (**)(void *))(*(void *)__p[0] + 192))(__p[0]);
      *((float *)a3 + 145) = v91;
      float v92 = (*(double (**)(void *))(*(void *)__p[0] + 200))(__p[0]);
      *((float *)a3 + 146) = v92;
      a3[147] = (*(uint64_t (**)(void *))(*(void *)__p[0] + 208))(__p[0]);
      float v93 = (*(double (**)(void *))(*(void *)__p[0] + 216))(__p[0]);
      *((float *)a3 + 148) = v93;
      float v94 = (*(double (**)(void *))(*(void *)__p[0] + 224))(__p[0]);
      *((float *)a3 + 149) = v94;
      float v95 = (*(double (**)(void *))(*(void *)__p[0] + 232))(__p[0]);
      *((float *)a3 + 150) = v95;
      a3[151] = (*(uint64_t (**)(void *))(*(void *)__p[0] + 240))(__p[0]);
      float v96 = (*(double (**)(void *))(*(void *)__p[0] + 248))(__p[0]);
      *((float *)a3 + 152) = v96;
      float v97 = (*(double (**)(void *))(*(void *)__p[0] + 256))(__p[0]);
      *((float *)a3 + 153) = v97;
      float v98 = (*(double (**)(void *))(*(void *)__p[0] + 264))(__p[0]);
      *((float *)a3 + 154) = v98;
    }
  }
  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  if (getenv("RAWCAMERA_DENOISE_BAYER"))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 256))(a1) >> 9 <= 0x18)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 256))(a1) >> 8 <= 0x18)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 256))(a1) < 0xC80)
        {
LABEL_40:
          float result = *((float *)a3 + 4) / 10.0;
          *((float *)a3 + 4) = result;
          a3[9] = 1;
          return result;
        }
        int v100 = -1139844055;
      }
      else
      {
        int v100 = -1131455447;
      }
    }
    else
    {
      int v100 = -1123066839;
    }
    a3[7] = v100;
    a3[8] = v100;
    goto LABEL_40;
  }
  return result;
}

void sub_1DDB4C47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB4C53C(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  __n128 v6 = a3 + 162;
  bzero(a3, 0x478uLL);
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)a3 + 25) = _D0;
  a3[3] = 1075838976;
  *((unsigned char *)a3 + 16) = 1;
  a3[10] = 1063665663;
  *((void *)a3 + 6) = 0x4051999A3F94DD2FLL;
  a3[14] = 1075838976;
  *((unsigned char *)a3 + 60) = (*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0) >= 0.85;
  a3[16] = 1065856532;
  float v12 = (*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0) * -1.5 + 5.19999981;
  *((float *)a3 + 17) = v12;
  float v13 = (*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0) * 1136.0;
  *((float *)a3 + 25) = v13;
  *((void *)a3 + 9) = 0x3F4DD2F200000001;
  *((_OWORD *)a3 + 5) = xmmword_1DDBFEBC0;
  float v14 = (*(double (**)(uint64_t))(*(void *)a1 + 1080))(a1);
  *((float *)a3 + 139) = v14;
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  float v16 = 3.0;
  if (v15 >= 9)
  {
    float v17 = (*(double (**)(uint64_t, void, void, float))(*(void *)a1 + 2664))(a1, 0, 0, 3.0);
    float v16 = 5.0;
    if (v17 <= 0.5)
    {
      float v16 = 1.0;
      if (v17 > 0.15) {
        float v16 = (float)(v17 * 11.429) + -0.71429;
      }
    }
  }
  *((float *)a3 + 151) = v16;
  *((unsigned char *)a3 + 608) = 0;
  a3[153] = 0;
  *((_WORD *)a3 + 308) = 256;
  float v18 = 7.1;
  if ((a3[1] - 27) >= 4) {
    float v18 = 12.0;
  }
  *((float *)a3 + 155) = v18;
  *((void *)a3 + 78) = 0x6800000000;
  a3[158] = 1052334096;
  a3[160] = 1065353216;
  *((unsigned char *)a3 + 644) = 0;
  *__n128 v6 = xmmword_1DDBFEBD0;
  a3[166] = 0;
  *((unsigned char *)a3 + 600) = (*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) > 8;
  *(void *)(a3 + 167) = 0x3F00000000000000;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 456))(a1);
  uint64_t v21 = v20;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 520))(a1);
  int v23 = sub_1DDA2E598(a1);
  if (v23 == 3)
  {
    if (!sub_1DDA2E5A8(a1)) {
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
    }
  }
  else if (v23 == 2)
  {
    uint64_t v22 = v21;
  }
  *((float *)a3 + 169) = (float)(int)v22 / (float)(int)v21;
  *((float *)a3 + 170) = (float)((float)SHIDWORD(v22) + (float)SHIDWORD(v22)) / (float)SHIDWORD(v21);
  *(void *)(a3 + 171) = 0x404000003F543958;
  a3[173] = 1;
  *((void *)a3 + 87) = v19;
  *((void *)a3 + 88) = 0x4190000041400000;
  *a3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2168))(a1);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2152))(a1) & 1) == 0 && !*a3) {
    *a3 = -1802201964;
  }
  a3[1] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2656))(a1);
  a3[246] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2656))(a1);
  *((unsigned char *)a3 + 17) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  float v24 = (*(double (**)(uint64_t))(*(void *)a1 + 2216))(a1);
  *((float *)a3 + 210) = v24;
  *((unsigned char *)a3 + 44) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2112))(a1);
  *((unsigned char *)a3 + 560) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2264))(a1);
  float v25 = (*(double (**)(uint64_t))(*(void *)a1 + 2272))(a1);
  *((float *)a3 + 141) = v25;
  float v26 = (*(double (**)(uint64_t))(*(void *)a1 + 2280))(a1);
  *((float *)a3 + 142) = v26;
  float v27 = (*(double (**)(uint64_t))(*(void *)a1 + 2304))(a1);
  *((float *)a3 + 148) = v27;
  float v28 = (*(double (**)(uint64_t))(*(void *)a1 + 2312))(a1);
  *((float *)a3 + 149) = v28;
  float v29 = (*(double (**)(uint64_t))(*(void *)a1 + 2320))(a1);
  *((float *)a3 + 138) = v29;
  *((unsigned char *)a3 + 788) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 2408))(a1, a2);
  float v30 = (*(double (**)(uint64_t, uint64_t))(*(void *)a1 + 2632))(a1, a2);
  *((float *)a3 + 207) = v30;
  float v31 = (*(double (**)(uint64_t))(*(void *)a1 + 2640))(a1);
  *((float *)a3 + 211) = v31;
  float v32 = (*(double (**)(uint64_t))(*(void *)a1 + 2648))(a1);
  *((float *)a3 + 212) = v32;
  float v33 = (*(double (**)(uint64_t))(*(void *)a1 + 896))(a1);
  *((float *)a3 + 195) = v33;
  *((float *)a3 + 194) = v33;
  *((float *)a3 + 193) = v33;
  uint64_t v34 = *(void *)a1;
  if ((a3[1] - 27) > 3)
  {
    (*(void (**)(uint64_t))(v34 + 432))(a1);
    uint64_t v35 = v36;
  }
  else
  {
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(v34 + 520))(a1);
  }
  *(void *)(a3 + 47) = v35;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 744))(&v152, a1);
  uint64_t v37 = (double *)v152;
  unint64_t v38 = (char *)v153 - (unsigned char *)v152;
  if (v153 == v152
    || (float v39 = *(double *)v152, *((float *)a3 + 178) = v39, v38 < 9)
    || (float v40 = v37[1], *((float *)a3 + 179) = v40, v38 <= 0x10))
  {
    sub_1DDA24AD0();
  }
  float v41 = v37[2];
  *((float *)a3 + 180) = v41;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 792))(__p, a1, a2);
  if (sub_1DDAD88E0((uint64_t)__p) < 5 || sub_1DDAD88D8((unsigned int *)__p) <= 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 0);
  uint64_t v151 = v42;
  float v43 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 0);
  *((float *)a3 + 181) = v43;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 0);
  uint64_t v151 = v44;
  float v45 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 1u);
  *((float *)a3 + 182) = v45;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 0);
  uint64_t v151 = v46;
  float v47 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 2u);
  *((float *)a3 + 183) = v47;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 1u);
  uint64_t v151 = v48;
  float v49 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 0);
  *((float *)a3 + 184) = v49;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 1u);
  uint64_t v151 = v50;
  float v51 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 1u);
  *((float *)a3 + 185) = v51;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 1u);
  uint64_t v151 = v52;
  float v53 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 2u);
  *((float *)a3 + 186) = v53;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 2u);
  uint64_t v151 = v54;
  float v55 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 0);
  *((float *)a3 + 187) = v55;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 2u);
  uint64_t v151 = v56;
  float v57 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 1u);
  *((float *)a3 + 188) = v57;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 2u);
  uint64_t v151 = v58;
  float v59 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 2u);
  *((float *)a3 + 189) = v59;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 0);
  uint64_t v151 = v60;
  float v61 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 4u);
  *((float *)a3 + 190) = v61;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 1u);
  uint64_t v151 = v62;
  float v63 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 4u);
  *((float *)a3 + 191) = v63;
  uint64_t v150 = sub_1DDAD8560((uint64_t)__p, 2u);
  uint64_t v151 = v64;
  float v65 = *(double *)sub_1DDAD85FC((uint64_t)&v150, 4u);
  *((float *)a3 + 192) = v65;
  a3[196] = 0;
  if (__p[1])
  {
    *(void **)&long long v148 = __p[1];
    operator delete(__p[1]);
  }
  if (v152)
  {
    uint64_t v153 = (std::__shared_weak_count *)v152;
    operator delete(v152);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1016))(__p, a1);
  float v66 = (double *)__p[0];
  float v67 = (double *)__p[1];
  if (__p[0] == __p[1])
  {
    int v72 = 0;
LABEL_36:
    bzero((char *)a3 + (4 * v72 + 856), ((4 * v72) ^ 0xCu) + 4);
    goto LABEL_37;
  }
  uint64_t v68 = 214;
  do
  {
    float v69 = *v66;
    if ((LODWORD(v69) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      int v141 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v141, "RawCameraException");
      __cxa_throw(v141, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *(float *)&a3[v68] = v69;
    ++v66;
    int v70 = v68 + 1;
    if (v66 == v67) {
      break;
    }
    unint64_t v71 = v68 - 214;
    ++v68;
  }
  while (v71 < 3);
  if (v66 != v67)
  {
    double v146 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v146, "RawCameraException");
    __cxa_throw(v146, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v72 = v70 - 214;
  if ((v70 - 214) <= 3) {
    goto LABEL_36;
  }
LABEL_37:
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a1 + 2680))(a1, a3 + 214);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1120))(&v152, a1);
  float v73 = v152;
  uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
  (*(void (**)(void **__return_ptr, void *, uint64_t))(*(void *)v73 + 8))(__p, v73, v74);
  if (v153) {
    sub_1DDA18310(v153);
  }
  float v76 = __p[0];
  uint64_t v75 = (double *)__p[1];
  if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)32)
  {
    int v144 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v144, "RawCameraException");
    __cxa_throw(v144, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (__p[0] == __p[1])
  {
    int v82 = 0;
  }
  else
  {
    uint64_t v77 = 218;
    uint64_t v78 = (double *)__p[0];
    do
    {
      float v79 = *v78;
      if ((LODWORD(v79) & 0x7FFFFFFFu) >= 0x7F800000)
      {
        unsigned int v142 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v142, "RawCameraException");
        __cxa_throw(v142, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      *(float *)&a3[v77] = v79;
      ++v78;
      int v80 = v77 + 1;
      if (v78 == v75) {
        break;
      }
      unint64_t v81 = v77 - 218;
      ++v77;
    }
    while (v81 < 3);
    if (v78 != v75)
    {
      int v145 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v145, "RawCameraException");
      __cxa_throw(v145, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v82 = v80 - 218;
    if ((v80 - 218) > 3)
    {
      if (!v76) {
        goto LABEL_51;
      }
      goto LABEL_50;
    }
  }
  bzero((char *)a3 + (4 * v82 + 872), ((4 * v82) ^ 0xCu) + 4);
  if (v76)
  {
LABEL_50:
    __p[1] = v76;
    operator delete(v76);
  }
LABEL_51:
  float v83 = (*(double (**)(uint64_t))(*(void *)a1 + 2344))(a1);
  *((float *)a3 + 240) = v83;
  float v84 = (*(double (**)(uint64_t))(*(void *)a1 + 2352))(a1);
  *((float *)a3 + 241) = v84;
  float v85 = (*(double (**)(uint64_t))(*(void *)a1 + 2360))(a1);
  *((float *)a3 + 242) = v85;
  float v86 = (*(double (**)(uint64_t))(*(void *)a1 + 2368))(a1);
  *((float *)a3 + 243) = v86;
  float v87 = (*(double (**)(uint64_t))(*(void *)a1 + 2376))(a1);
  *((float *)a3 + 244) = v87;
  float v88 = (*(double (**)(uint64_t))(*(void *)a1 + 2384))(a1);
  *((float *)a3 + 245) = v88;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void))(*(void *)a1 + 2624))(&v152, a1, a2, 0);
  sub_1DDA590CC((uint64_t)v152, (uint64_t)__p);
  a3[206] = v149;
  long long v89 = v148;
  *(_OWORD *)(a3 + 198) = *(_OWORD *)__p;
  *(_OWORD *)(a3 + 202) = v89;
  if (v153) {
    sub_1DDA18310(v153);
  }
  a3[213] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  *((unsigned char *)a3 + 561) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2440))(a1);
  double v90 = (*(double (**)(uint64_t))(*(void *)a1 + 264))(a1);
  if (v90 > (*(double (**)(uint64_t))(*(void *)a1 + 2448))(a1))
  {
    *((unsigned char *)a3 + 561) = 1;
    a3[148] = 998445679;
  }
  float v91 = (*(double (**)(uint64_t))(*(void *)a1 + 2328))(a1);
  *((float *)a3 + 143) = v91;
  float v92 = (*(double (**)(uint64_t))(*(void *)a1 + 2608))(a1);
  *((float *)a3 + 144) = v92;
  float v93 = (*(double (**)(uint64_t))(*(void *)a1 + 2600))(a1);
  *((float *)a3 + 145) = v93;
  float v94 = (*(double (**)(uint64_t))(*(void *)a1 + 2616))(a1);
  *((float *)a3 + 147) = v94;
  float v95 = (*(double (**)(uint64_t))(*(void *)a1 + 2528))(a1);
  *((float *)a3 + 146) = v95;
  float v96 = (*(double (**)(uint64_t))(*(void *)a1 + 1384))(a1);
  *((float *)a3 + 5) = v96;
  float v97 = (*(double (**)(uint64_t))(*(void *)a1 + 1392))(a1);
  *((float *)a3 + 6) = v97;
  float v98 = (*(double (**)(uint64_t))(*(void *)a1 + 1400))(a1);
  *((float *)a3 + 7) = v98;
  a3[8] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1408))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 624))(a1)) {
    a3[8] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 624))(a1);
  }
  *((unsigned char *)a3 + 36) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1208))(a1);
  float v99 = (*(double (**)(uint64_t))(*(void *)a1 + 1584))(a1);
  *((float *)a3 + 208) = v99;
  float v100 = (*(double (**)(uint64_t))(*(void *)a1 + 1592))(a1);
  *((float *)a3 + 209) = v100;
  if ((*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0) >= 0.5) {
    char v101 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1376))(a1);
  }
  else {
    char v101 = 0;
  }
  *((unsigned char *)a3 + 8) = v101;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2128))(__p, a1);
  __int32 v102 = (void (***)(void *, uint64_t, uint64_t, uint64_t))__p[0];
  uint64_t v103 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  (**v102)(v102, v103, (uint64_t)(a3 + 223), (uint64_t)(a3 + 222));
  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 7) {
    char v104 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2496))(a1);
  }
  else {
    char v104 = 0;
  }
  *((unsigned char *)a3 + 956) = v104;
  float v105 = (*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0);
  if ((a3[1] - 9) <= 0x11)
  {
    *((unsigned char *)a3 + 44) = 0;
    if (v105 <= 0.65)
    {
      int v106 = 0;
    }
    else
    {
      a3[16] = 1084227584;
      int v106 = 1;
    }
    *((unsigned char *)a3 + 60) = v106;
    a3[156] = v106;
    float v107 = fmaxf(fminf((float)((float)(int)a3[213] + -2500.0) / 3900.0, 1.0), 0.0);
    a3[157] = llroundf((float)(v107 * 396.0) + 104.0);
    *((float32x2_t *)a3 + 79) = vmla_n_f32((float32x2_t)0x3F0000003EB95810, (float32x2_t)0x3F000000BEB95810, v107);
  }
  double v108 = (*(double (**)(uint64_t))(*(void *)a1 + 2528))(a1);
  double v109 = (*(double (**)(uint64_t))(*(void *)a1 + 2520))(a1);
  double v110 = (*(double (**)(uint64_t))(*(void *)a1 + 2544))(a1);
  double v111 = (*(double (**)(uint64_t))(*(void *)a1 + 2560))(a1);
  double v112 = (*(double (**)(uint64_t))(*(void *)a1 + 2568))(a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 744))(__p, a1);
  if (__p[1] == __p[0]) {
    goto LABEL_111;
  }
  double v113 = *(double *)__p[0];
  double v114 = (*(double (**)(uint64_t, uint64_t))(*(void *)a1 + 800))(a1, a2);
  float v115 = v113;
  *(float *)&double v114 = v115 / v114;
  a3[268] = LODWORD(v114);
  if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9
    || (double v116 = *((double *)__p[0] + 1),
        double v117 = (*(double (**)(uint64_t, uint64_t))(*(void *)a1 + 800))(a1, a2),
        float v118 = v116,
        *(float *)&double v117 = v118 / v117,
        a3[269] = LODWORD(v117),
        (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x10))
  {
LABEL_111:
    sub_1DDA24AD0();
  }
  double v119 = *((double *)__p[0] + 2);
  double v120 = (*(double (**)(uint64_t, uint64_t))(*(void *)a1 + 800))(a1, a2);
  float v121 = v108;
  float v122 = v119;
  *(float *)&double v120 = v122 / v120;
  a3[270] = LODWORD(v120);
  *((float *)a3 + 271) = v105;
  *((unsigned char *)a3 + 989) = v121 != 0.0;
  *((float *)a3 + 272) = v121;
  float v123 = (*(double (**)(uint64_t))(*(void *)a1 + 2608))(a1);
  *((float *)a3 + 274) = v123;
  float v124 = (*(double (**)(uint64_t))(*(void *)a1 + 2600))(a1);
  *((float *)a3 + 273) = v124;
  float v125 = (*(double (**)(uint64_t))(*(void *)a1 + 2616))(a1);
  *((float *)a3 + 275) = v125;
  a3[276] = 16843009;
  *(_OWORD *)((char *)v6 + 460) = xmmword_1DDBFEBE0;
  *((unsigned char *)a3 + 1124) = 1;
  *((void *)a3 + 141) = 0x138800000005;
  a3[284] = 1076258406;
  if (v105 <= 3.7633)
  {
    if (v105 <= 2.1287)
    {
      if (v105 <= 1.6717)
      {
        if (v105 <= 0.8968)
        {
          if (v105 <= 0.5)
          {
            float v126 = 0.0021;
            goto LABEL_87;
          }
          float v127 = (float)(v105 + -0.5) / 0.3968;
          float v128 = 0.0021;
          float v129 = 0.0039;
        }
        else
        {
          float v127 = (float)(v105 + -0.8968) / 0.7749;
          float v128 = 0.006;
          float v129 = 0.0038;
        }
      }
      else
      {
        float v127 = (float)(v105 + -1.6717) / 0.457;
        float v128 = 0.0098;
        float v129 = 0.0085;
      }
    }
    else
    {
      float v127 = (float)(v105 + -2.1287) / 1.6346;
      float v128 = 0.0183;
      float v129 = 0.0067;
    }
    float v126 = v128 + (float)(v127 * v129);
  }
  else
  {
    float v126 = 0.025;
  }
LABEL_87:
  float v130 = v105 * 50.0;
  float v131 = v105 * 25.0;
  float v132 = 0.0;
  float v133 = 0.0;
  if ((float)(v105 * 25.0) >= 18.0)
  {
    float v133 = 1.0;
    if (v131 < 36.0) {
      float v133 = (float)(v131 + -18.0) / 18.0;
    }
  }
  float v134 = v105 * 100.0;
  if (v130 >= 18.0)
  {
    float v132 = 1.0;
    if (v130 < 36.0) {
      float v132 = (float)(v130 + -18.0) / 18.0;
    }
  }
  float v135 = v109;
  float v136 = v111;
  float v137 = v112;
  float v138 = 0.0;
  if (v134 >= 18.0)
  {
    float v138 = 1.0;
    if (v134 < 36.0) {
      float v138 = (float)(v134 + -18.0) / 18.0;
    }
  }
  BOOL v139 = v135 > 0.0;
  if (v136 > 0.0) {
    BOOL v139 = 1;
  }
  if (v137 > 0.0) {
    BOOL v139 = 1;
  }
  *((unsigned char *)a3 + 988) = v139;
  *((float *)a3 + 248) = v135;
  *((_WORD *)a3 + 498) = 257;
  *((void *)a3 + 125) = 0x3DCCCCCD3EBC6A7FLL;
  *((float *)a3 + 252) = v138;
  float v140 = v110;
  *((float *)a3 + 253) = v132;
  *((float *)a3 + 254) = v133;
  *((float *)a3 + 255) = v126 + v126;
  *((float *)a3 + 257) = v126;
  *((float *)a3 + 259) = v126 * 0.5;
  a3[256] = 1061158912;
  a3[258] = 1061158912;
  a3[260] = 1061158912;
  *((float *)a3 + 261) = v138;
  *((float *)a3 + 262) = v132;
  *((float *)a3 + 263) = v133;
  *((float *)a3 + 264) = v136;
  *((unsigned char *)a3 + 1060) = v140 != 0.0;
  *((float *)a3 + 266) = v140;
  *((float *)a3 + 267) = v137;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DDB4E4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB4E5E4(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = a1;
  sub_1DDB4F108(&v4, a2, a3, a4);
}

void sub_1DDB4E618(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  *(void *)&long long v9 = a1;
  sub_1DDB4F108((uint64_t *)&v9, a2, a3, a5);
  if (sub_1DDB4EE44() != 16)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDB4F31C(a4, a2, &v9);
  sub_1DDB4E72C((uint64_t *)(*a5 + 24), &v9);
  if (*((void *)&v9 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_1DDB4E6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  float v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    sub_1DDA18310(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB4E724()
{
  return sub_1DDB4EE44();
}

void **sub_1DDB4E72C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  float result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1DDA17F78();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    float v14 = (char *)sub_1DDA19838((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_1DDB4EFC4(a1, v18);
    long long v9 = (void *)a1[1];
    float result = sub_1DDA49898(v18);
  }
  else
  {
    *char v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1DDB4E834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA49898((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB4E848(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F397B988;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = *a3;
  *(void *)(a1 + 64) = *a4;
  uint64_t v5 = CGImageProviderRetain();
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1DDB4E908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v11);
  sub_1DDA18270((void ***)&a10);
  unint64_t v13 = *(std::__shared_weak_count **)(v10 + 16);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB4E93C(uint64_t a1)
{
  *(void *)a1 = &unk_1F397B988;
  CGImageProviderRelease();
  *(void *)(a1 + 80) = 0;
  uint64_t v4 = (void **)(a1 + 24);
  sub_1DDA18270(&v4);
  double v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1DDB4E9B4(uint64_t a1)
{
  sub_1DDB4E93C(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB4E9EC(void *a1)
{
  uint64_t result = a1[10];
  if (!result)
  {
    uint64_t v3 = a1[4] - a1[3];
    if (v3 && (unint64_t)v3 < 0x1F31)
    {
      std::string __p = 0;
      float v24 = 0;
      float v25 = 0;
      sub_1DDB4ED3C(&__p, v3 >> 4);
      CGFloat x = *MEMORY[0x1E4F1DB20];
      CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      CGFloat width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
      uint64_t v9 = a1[3];
      for (uint64_t i = a1[4]; v9 != i; v9 += 16)
      {
        v28.origin.CGFloat x = (double)*(int *)(*(void *)v9 + 28);
        v28.origin.CGFloat y = (double)*(int *)(*(void *)v9 + 32);
        v28.size.CGFloat width = (double)*(int *)(*(void *)v9 + 36);
        v28.size.CGFloat height = (double)*(int *)(*(void *)v9 + 40);
        v26.origin.CGFloat x = x;
        v26.origin.CGFloat y = y;
        v26.size.CGFloat width = width;
        v26.size.CGFloat height = height;
        CGRect v27 = CGRectUnion(v26, v28);
        CGFloat x = v27.origin.x;
        CGFloat y = v27.origin.y;
        CGFloat width = v27.size.width;
        CGFloat height = v27.size.height;
        uint64_t v10 = (***(uint64_t (****)(void))v9)();
        uint64_t v11 = v10;
        uint64_t v12 = v24;
        if (v24 >= v25)
        {
          uint64_t v14 = ((char *)v24 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v14 + 1) >> 61) {
            sub_1DDA17F78();
          }
          unint64_t v15 = ((char *)v25 - (unsigned char *)__p) >> 2;
          if (v15 <= v14 + 1) {
            unint64_t v15 = v14 + 1;
          }
          if ((unint64_t)((char *)v25 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            long long v17 = (char *)sub_1DDA1814C((uint64_t)&v25, v16);
          }
          else {
            long long v17 = 0;
          }
          float v18 = (uint64_t *)&v17[8 * v14];
          uint64_t *v18 = v11;
          unint64_t v13 = v18 + 1;
          uint64_t v20 = (char *)__p;
          uint64_t v19 = (char *)v24;
          if (v24 != __p)
          {
            do
            {
              uint64_t v21 = *((void *)v19 - 1);
              v19 -= 8;
              *--float v18 = v21;
            }
            while (v19 != v20);
            uint64_t v19 = (char *)__p;
          }
          std::string __p = v18;
          float v24 = v13;
          float v25 = (uint64_t *)&v17[8 * v16];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *float v24 = v10;
          unint64_t v13 = v12 + 1;
        }
        float v24 = v13;
      }
      operator new();
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDB4ECC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB4ED3C(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_1DDA17F78();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_1DDA1814C(v3, a2);
    char v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_1DDB4EDE4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1) {
      sub_1DDA18310(v1);
    }
    JUMPOUT(0x1E01C3DC0);
  }
  return result;
}

void **sub_1DDB4EE3C(uint64_t a1, long long *a2)
{
  return sub_1DDB4E72C((uint64_t *)(a1 + 24), a2);
}

uint64_t sub_1DDB4EE44()
{
  int ComponentType = CGImageProviderGetComponentType();
  if (ComponentType == 1) {
    return 8;
  }
  if (ComponentType != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return 16;
}

void sub_1DDB4EEB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB4EECC(void *a1)
{
  char v7 = a1;
  uint64_t v1 = *a1;
  double v2 = (std::__shared_weak_count *)a1[1];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v1)
  {
    unint64_t v3 = atomic_fetch_add((atomic_ullong *volatile)(v1 + 88), 0xFFFFFFFFFFFFFFFFLL) - 1;
    uint64_t v5 = v1 + 24;
    uint64_t v4 = *(void *)(v1 + 24);
    if (v3 < (*(void *)(v5 + 8) - v4) >> 4) {
      (*(void (**)(void))(**(void **)(v4 + 16 * v3) + 16))(*(void *)(v4 + 16 * v3));
    }
  }
  if (v2) {
    sub_1DDA18310(v2);
  }
  uint64_t v6 = (uint64_t)v7;
  char v7 = 0;
  if (v6) {
    sub_1DDB4F290((uint64_t)&v7, v6);
  }
}

void sub_1DDB4EF84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    sub_1DDA18310(v9);
  }
  sub_1DDBF4DCC(&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDB4EF70);
}

void sub_1DDB4EFAC(_Unwind_Exception *a1)
{
}

uint64_t sub_1DDB4EFC4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1DDB4F03C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DDB4F03C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1DDB4F0D0((uint64_t)v12);
  return v10;
}

uint64_t sub_1DDB4F0D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DDA49854(a1);
  }
  return a1;
}

void sub_1DDB4F108(uint64_t *a1@<X1>, _OWORD *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x78uLL);
  sub_1DDB4F194(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1DDB4F180(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB4F194(void *a1, uint64_t *a2, _OWORD *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397B9F0;
  sub_1DDB4E848((uint64_t)(a1 + 3), *a2, a3, a4);
  return a1;
}

void sub_1DDB4F1E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB4F1F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397B9F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB4F214(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397B9F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB4F268(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDB4F290(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    double v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      sub_1DDA18310(v2);
    }
    JUMPOUT(0x1E01C3DC0);
  }
}

void sub_1DDB4F2E8(_OWORD *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v3 = a2;
  sub_1DDB4F974(a1, &v3, a3);
}

double sub_1DDB4F31C@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  sub_1DDB4FAD0(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void *sub_1DDB4F360(void *a1)
{
  *a1 = &unk_1F397BA40;
  double v2 = (void *)a1[7];
  if (v2)
  {
    sub_1DDBE8890(v2);
    a1[7] = 0;
  }
  int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1DDB4F3C4(void *a1)
{
  sub_1DDB4F360(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB4F3FC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(result + 8);
    if (v1) {
      sub_1DDA18310(v1);
    }
    JUMPOUT(0x1E01C3DC0);
  }
  return result;
}

void sub_1DDB4F454(_DWORD *a1)
{
  if (!a1[6]) {
    (*(void (**)(_DWORD *, void))(*(void *)a1 + 8))(a1, 0);
  }
  operator new();
}

void sub_1DDB4F57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB4F5B4(unsigned int *a1)
{
  uint64_t result = a1[6];
  if (!result)
  {
    (*(void (**)(unsigned int *, void))(*(void *)a1 + 8))(a1, 0);
    return a1[6];
  }
  return result;
}

uint64_t *sub_1DDB4F60C(uint64_t a1, int a2)
{
  uint64_t result = *(uint64_t **)(a1 + 56);
  if (!result)
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)(a1 + 28);
    sub_1DDA1B3CC(&v11, (unsigned int *)((unint64_t)v10 | 0xC));
    *(_OWORD *)uint64_t v10 = *(_OWORD *)(a1 + 28);
    sub_1DDA1B3CC(&v9, &v10[2]);
    if (a2) {
      int v5 = 3;
    }
    else {
      int v5 = 4;
    }
    v10[0] = (*(_DWORD *)(a1 + 44) >> 3) * v5;
    sub_1DDA4BDD8(&v9, v10);
    unsigned int v6 = v9;
    if (*(unsigned char *)(a1 + 52) && (v9 & 0xF) != 0)
    {
      v10[0] = 16 - (v9 & 0xF);
      sub_1DDA47EF8(&v9, v10);
      unsigned int v6 = v9;
    }
    *(_DWORD *)(a1 + 24) = v6;
    v10[0] = v11;
    uint64_t v7 = sub_1DDA4BDD8(v10, &v9);
    uint64_t result = sub_1DDBE8958((uint64_t *)*v7, 0, 2);
    *(void *)(a1 + 56) = result;
    if (!result)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return result;
}

void sub_1DDB4F734(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB4F74C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (!result)
  {
    *(void *)(a1 + 56) = sub_1DDAA7CC0(*(void *)(a1 + 64));
    unint64_t v3 = 2 * *(unsigned int *)(*(void *)(a1 + 64) + 56);
    sub_1DDA18500(&v4, &v3);
    *(_DWORD *)(a1 + 24) = v4;
    return *(void *)(a1 + 56);
  }
  return result;
}

void sub_1DDB4F7B0(uint64_t a1)
{
}

void sub_1DDB4F898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB4F8D4(void *a1)
{
  sub_1DDB4F90C(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB4F90C(void *a1)
{
  *a1 = &unk_1F397BAD0;
  sub_1DDAA7F30(a1[8]);
  double v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_1DDA18310(v2);
  }

  return sub_1DDB4F360(a1);
}

void sub_1DDB4F974(_OWORD *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  unsigned int v6 = (char *)operator new(0x58uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unsigned int v6 = &unk_1F397BB20;
  int v7 = *a2;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 3) = &unk_1F397BA40;
  *((_DWORD *)v6 + 12) = 0;
  *(_OWORD *)(v6 + 52) = *a1;
  *((_DWORD *)v6 + 17) = v7;
  *((_DWORD *)v6 + 18) = -1;
  v6[76] = 1;
  *((void *)v6 + 10) = 0;
  *a3 = v6 + 24;
  a3[1] = v6;

  sub_1DDA1AF34((uint64_t)a3, (void *)v6 + 4, (uint64_t)(v6 + 24));
}

void sub_1DDB4FA34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397BB20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB4FA54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397BB20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB4FAA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

void sub_1DDB4FAD0(uint64_t *a1@<X1>, _OWORD *a2@<X2>, void *a3@<X8>)
{
  unsigned int v6 = operator new(0x68uLL);
  sub_1DDB4FB4C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1DDA1AF34((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1DDB4FB38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB4FB4C(void *a1, uint64_t *a2, _OWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397BB70;
  sub_1DDB4FC44((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1DDB4FB94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB4FBA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397BB70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB4FBC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397BB70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB4FC1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

uint64_t sub_1DDB4FC44(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F397BA40;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 28) = *a3;
  *(void *)(a1 + 44) = 0xFFFFFFFF00000010;
  *(unsigned char *)(a1 + 52) = 1;
  *(void *)(a1 + 56) = 0;
  *(void *)a1 = &unk_1F397BAD0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 64) = *a2;
  *(void *)(a1 + 72) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = *(void *)(a1 + 64);
  }
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDAA7F60(v4);
  return a1;
}

void sub_1DDB4FD30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[9];
  if (v4) {
    sub_1DDA18310(v4);
  }
  sub_1DDB4F360(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB4FD60(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 448))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB4FE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB4FE1C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 456))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB4FEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB4FED8(uint64_t a1)
{
  (*(void (**)(std::__shared_weak_count **__return_ptr))(*(void *)a1 + 160))(&v17);
  double v2 = v17;
  sub_1DDA1A880(&__p, "IFD0:EXIF");
  int v3 = ((uint64_t (*)(std::__shared_weak_count *, void **))v2->__vftable[6].__on_zero_shared_weak)(v2, &__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  if (v18) {
    sub_1DDA18310(v18);
  }
  sub_1DDA1AD40(&v17, 3uLL);
  uint64_t v4 = v17;
  if (v3 == 2) {
    int v5 = 473000;
  }
  else {
    int v5 = 550000;
  }
  if (v3 == 2) {
    int v6 = 359000;
  }
  else {
    int v6 = 418000;
  }
  LODWORD(v17->__vftable) = v5;
  HIDWORD(v4->__vftable) = 256000;
  LODWORD(v4->__shared_owners_) = v6;
  int v13 = 0;
  std::string __p = &unk_1F397C770;
  long long v14 = 0;
  long long v15 = 0;
  uint64_t v16 = 0;
  sub_1DDA1D984(&v14, v4, (uint64_t)v18, ((char *)v18 - (char *)v4) >> 2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v10, a1);
  uint64_t v7 = v10;
  sub_1DDA1A880(v8, "IFD0:EXIF:MAKERNOTE:WhitePoint");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v7 + 600))(v7, v8, &__p, 3);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11) {
    sub_1DDA18310(v11);
  }
  std::string __p = &unk_1F397C770;
  if (v14)
  {
    long long v15 = v14;
    operator delete(v14);
  }
  if (v17)
  {
    float v18 = v17;
    operator delete(v17);
  }
}

void sub_1DDB500EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  int v23 = *(void **)(v21 - 56);
  if (v23)
  {
    *(void *)(v21 - 48) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDB5017C(void *a1)
{
  *a1 = &unk_1F397C770;
  double v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1DDB501CC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v13 = 0x4050000000000000;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) != 10) {
    goto LABEL_11;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v9, a1);
  uint64_t v4 = v9;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE");
  char v5 = (*(uint64_t (**)(uint64_t, void **, void **, void))(*(void *)v4 + 248))(v4, __p, v11, 0);
  if ((void *)((char *)v11[1] - (char *)v11[0]) == (void *)32) {
    char v6 = v5;
  }
  else {
    char v6 = 0;
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    sub_1DDA18310(v10);
  }
  if (v6)
  {
    *(_OWORD *)a2 = *(_OWORD *)v11;
    a2[2] = v12;
  }
  else
  {
LABEL_11:
    sub_1DDA25B2C(a2, 4uLL, &v13);
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
  }
}

void sub_1DDB50314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB50360(void *a1)
{
  sub_1DDA30DE8((uint64_t)a1);
  if (!a1[3])
  {
    (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 160))(&v9, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 384))(&v11);
    if (v10) {
      sub_1DDA18310(v10);
    }
    uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 408))(a1);
    *(void *)&long long v6 = (*(uint64_t (**)(void *))(*a1 + 432))(a1);
    *((void *)&v6 + 1) = v2;
    sub_1DDB50684(&v11, (unint64_t *)&v8, &v7, &v6, &v9);
    sub_1DDAB4288(v9, 1);
    uint64_t v4 = v9;
    int v3 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v5 = (std::__shared_weak_count *)a1[4];
    a1[3] = v4;
    a1[4] = v3;
    if (v5) {
      sub_1DDA18310(v5);
    }
    if (v10) {
      sub_1DDA18310(v10);
    }
    if (v12) {
      sub_1DDA18310(v12);
    }
  }
}

void sub_1DDB5050C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1DDA18310(a15);
  }
  long long v17 = *(std::__shared_weak_count **)(v15 - 32);
  if (v17) {
    sub_1DDA18310(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB50550(void *a1)
{
  *a1 = &unk_1F397C770;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB505C0(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  int v8 = sub_1DDAB76F0(a1, a2, a3, a4, a5);
  if (a4 == 3 && v8 && *(void *)(a1 + 24) - *(void *)(a1 + 16) == 12)
  {
    sub_1DDA1AD40(&v15, 3uLL);
    uint64_t v9 = *(_DWORD **)(a1 + 16);
    uint64_t v10 = (_DWORD *)*a5;
    long long v11 = v15;
    uint64_t v12 = v15;
    *(_DWORD *)long long v15 = *(_DWORD *)*a5 * *v9;
    *(_DWORD *)(v12 + 4) = v10[1] * v9[1];
    *(_DWORD *)(v12 + 8) = v10[2] * v9[2];
    *(_OWORD *)a5 = v11;
    uint64_t v13 = a5[2];
    a5[2] = v16;
    *((void *)&v15 + 1) = v10;
    uint64_t v16 = v13;
    *(void *)&long long v15 = v10;
    operator delete(v10);
  }
  return 1;
}

void sub_1DDB50684(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xE0uLL);
  sub_1DDA5891C((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDB50704(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB50718(int a1, unsigned int a2)
{
  uint64_t v2 = (unsigned int *)&unk_1DDBFEE74;
  if ((a1 + 2122219136) < 0x12) {
    return v2[a2];
  }
  if (a1 > 370546197)
  {
    if (a1 > 1229539656)
    {
      if (a1 == 1229539657)
      {
        if (a2 < 4)
        {
          uint64_t v2 = (unsigned int *)&unk_1DDBFEE64;
          return v2[a2];
        }
      }
      else
      {
        if (a1 == 1364283729) {
          return v2[a2];
        }
        if (a1 == 1633771873 && a2 < 4)
        {
          uint64_t v2 = (unsigned int *)&unk_1DDBFEE54;
          return v2[a2];
        }
      }
LABEL_26:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (a1 == 370546198)
    {
      if (a2 < 4)
      {
        uint64_t v2 = (unsigned int *)&unk_1DDBFEE44;
        return v2[a2];
      }
      goto LABEL_26;
    }
    int v4 = 1094795585;
LABEL_18:
    if (a1 == v4) {
      return v2[a2];
    }
    goto LABEL_26;
  }
  if (a1 > 336860179)
  {
    if (a1 == 336860180) {
      return v2[a2];
    }
    int v4 = 353703189;
    goto LABEL_18;
  }
  if (a1 == -1802201964)
  {
    if (a2 < 4)
    {
      uint64_t v2 = (unsigned int *)&unk_1DDBFEE74;
      return v2[a2];
    }
    goto LABEL_26;
  }
  if (a1) {
    goto LABEL_26;
  }
  return 1;
}

void sub_1DDB50904(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB50928(void *a1)
{
  (*(void (**)(char **__return_ptr))(*a1 + 2888))(&v38);
  if (v39 == v38 || *(_DWORD *)v38 != 11)
  {
    sub_1DDACF4F0(a1);
  }
  else
  {
    if ((unint64_t)(v39 - v38) <= 0xB)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
LABEL_47:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    (*(void (**)(void **__return_ptr, void *))(*a1 + 160))(&v33, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v33 + 384))(&v36);
    if (v34) {
      sub_1DDA18310(v34);
    }
    uint64_t v35 = 0;
    uint64_t v35 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
    uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 3016))(a1);
    (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 2960))(&v33, a1, v2);
    int v3 = (double *)v33;
    if ((char *)v34 - (unsigned char *)v33 != 24)
    {
      int v23 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v23, "RawCameraException");
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::string __p = 0;
    float v31 = 0;
    float v32 = 0;
    if (v34 != v33)
    {
      int v4 = 0;
      unint64_t v5 = 0;
      do
      {
        int v6 = (int)(v3[v5] * 0.5);
        if (v4 >= v32)
        {
          int v8 = (int *)__p;
          uint64_t v9 = ((char *)v4 - (unsigned char *)__p) >> 2;
          unint64_t v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 62) {
            sub_1DDA17F78();
          }
          uint64_t v11 = (char *)v32 - (unsigned char *)__p;
          if (((char *)v32 - (unsigned char *)__p) >> 1 > v10) {
            unint64_t v10 = v11 >> 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v10;
          }
          if (v12)
          {
            uint64_t v13 = (char *)sub_1DDA17F90((uint64_t)&v32, v12);
            int v8 = (int *)__p;
            int v4 = v31;
          }
          else
          {
            uint64_t v13 = 0;
          }
          long long v14 = (int *)&v13[4 * v9];
          *long long v14 = v6;
          uint64_t v7 = v14 + 1;
          while (v4 != v8)
          {
            int v15 = *--v4;
            *--long long v14 = v15;
          }
          std::string __p = v14;
          float v31 = v7;
          float v32 = (int *)&v13[4 * v12];
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          int *v4 = v6;
          uint64_t v7 = v4 + 1;
        }
        float v31 = v7;
        ++v5;
        int v3 = (double *)v33;
        int v4 = v7;
      }
      while (v5 < ((char *)v34 - (unsigned char *)v33) >> 3);
    }
    uint64_t v27 = (*(uint64_t (**)(void *))(*a1 + 408))(a1);
    v24[0] = (void *)(*(uint64_t (**)(void *))(*a1 + 432))(a1);
    v24[1] = v16;
    int v17 = *((_DWORD *)v38 + 2);
    BOOL v26 = *((_DWORD *)v38 + 1) != 0;
    int v25 = v17;
    sub_1DDB510D0(&v36, (unint64_t *)&v35, &v27, v24, (uint64_t)&__p, (char *)&v26, &v25, &v28);
    float v18 = v28;
    v28[185] = 0;
    sub_1DDACF398((uint64_t)a1, (uint64_t)v24);
    (*(void (**)(unsigned char *, void **))(*(void *)v18 + 200))(v18, v24);
    if (v24[0])
    {
      v24[1] = v24[0];
      operator delete(v24[0]);
    }
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v28 + 48))(v28, 3);
    uint64_t v20 = v28;
    uint64_t v19 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = (std::__shared_weak_count *)a1[4];
    a1[3] = v20;
    a1[4] = v19;
    if (v21) {
      sub_1DDA18310(v21);
    }
    if (v29) {
      sub_1DDA18310(v29);
    }
    if (__p)
    {
      float v31 = (int *)__p;
      operator delete(__p);
    }
    if (v33)
    {
      uint64_t v34 = (std::__shared_weak_count *)v33;
      operator delete(v33);
    }
    if (v37) {
      sub_1DDA18310(v37);
    }
  }
  if (!a1[3])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    goto LABEL_47;
  }
  if (v38)
  {
    float v39 = v38;
    operator delete(v38);
  }
}

void sub_1DDB50E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a15) {
    sub_1DDA18310(a15);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a24) {
    sub_1DDA18310(a24);
  }
  BOOL v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB50EE8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 2960))(a1, 63);
}

uint64_t sub_1DDB50F18(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 464))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB50FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDB50FD4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = 0;
  return sub_1DDA25B2C(a1, 4uLL, &v2);
}

uint64_t sub_1DDB51004(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDB0BDDC(v2, @"srawMultipliersOffset", v3, &unk_1F397C7A8);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDB510B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB510C8()
{
  return 0xFFFFFFFFLL;
}

void sub_1DDB510D0(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, uint64_t a5@<X5>, char *a6@<X6>, int *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x118uLL);
  sub_1DDB5118C(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;

  sub_1DDA1AF34((uint64_t)a8, v16 + 4, (uint64_t)(v16 + 3));
}

void sub_1DDB51178(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB5118C(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5, uint64_t a6, char *a7, int *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397D3D0;
  sub_1DDB51290((uint64_t)(a1 + 3), a2, *a3, a4, a5, a6, *a7, *a8);
  return a1;
}

void sub_1DDB511E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB511F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D3D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB51214(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D3D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB51268(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDB51290(uint64_t a1, void *a2, unint64_t a3, void *a4, _OWORD *a5, uint64_t a6, char a7, int a8)
{
  uint64_t v12 = sub_1DDAA58A8(a1, a2, a3, a4, a5);
  *(void *)(v12 + 200) = 0;
  *(void *)(v12 + 208) = 0;
  *(void *)(v12 + 192) = 0;
  *(_WORD *)(v12 + 216) = -1;
  *(void *)uint64_t v12 = &unk_1F397A320;
  *(void *)(v12 + 232) = 0;
  *(void *)(v12 + 240) = 0;
  *(void *)(v12 + 224) = 0;
  sub_1DDA1D984((void *)(v12 + 224), *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  *(unsigned char *)(a1 + 248) = a7;
  *(_DWORD *)(a1 + 252) = a8;
  return a1;
}

void sub_1DDB51318(_Unwind_Exception *a1)
{
  sub_1DDB5132C(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB5132C(void *a1)
{
  *a1 = &unk_1F39627F0;
  uint64_t v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDB5138C(uint64_t *a1)
{
  sub_1DDB53DE8(a1, &v1);
  sub_1DDB513EC(v1);
  if (v2) {
    sub_1DDA18310(v2);
  }
}

void sub_1DDB513D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB513EC(uint64_t a1)
{
  sub_1DDB515B4(a1);
  sub_1DDB5188C((void *)a1);
  if (*(void *)(a1 + 128))
  {
    uint64_t v2 = *(void (**)(void))(**(void **)(a1 + 8) + 24);
    v2();
  }
}

uint64_t sub_1DDB51464(uint64_t result, uint64_t *a2)
{
  *(void *)uint64_t result = &unk_1F397D420;
  uint64_t v2 = *a2;
  *(void *)(result + 8) = *a2;
  uint64_t v3 = a2[1];
  *(void *)(result + 16) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    uint64_t v2 = *(void *)(result + 8);
  }
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_DWORD *)(result + 24) = *(_DWORD *)(v2 + 48);
  return result;
}

void sub_1DDB51548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = *(std::__shared_weak_count **)(v10 + 136);
  if (v13) {
    sub_1DDA18310(v13);
  }
  a10 = v11 + 9;
  sub_1DDA9E7E4(&a10);
  sub_1DDA9E7E4(&a10);
  a10 = v11 + 3;
  sub_1DDA9E7E4(&a10);
  a10 = v11;
  sub_1DDA9E7E4(&a10);
  long long v14 = *(std::__shared_weak_count **)(v10 + 16);
  if (v14) {
    sub_1DDA18310(v14);
  }
  _Unwind_Resume(a1);
}

void sub_1DDB515B4(uint64_t a1)
{
  sub_1DDA1AC54(&__p, *(unsigned int *)(a1 + 24));
  sub_1DDB535DC(v21, 4uLL, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  sub_1DDA1AC54(v17, *(unsigned int *)(a1 + 24));
  sub_1DDB535DC(&__p, 4uLL, (uint64_t)v17);
  uint64_t v2 = v17[0];
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  unint64_t v3 = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 24);
  do
  {
    if (v4)
    {
      unint64_t v5 = 0;
      uint64_t v2 = *(_DWORD **)(a1 + 8);
      do
      {
        unint64_t v6 = v2[13];
        uint64_t v7 = sub_1DDAA7CC0((uint64_t)v2);
        if (0xAAAAAAAAAAAAAAABLL * ((v20 - (unsigned char *)__p) >> 3) <= v3) {
          sub_1DDA24AD0();
        }
        int v8 = (uint64_t *)((char *)__p + 24 * v3);
        uint64_t v9 = *v8;
        if (v5 >= (v8[1] - *v8) >> 1) {
          sub_1DDA24AD0();
        }
        unint64_t v10 = v6 >> 1;
        uint64_t v11 = *(void *)(a1 + 8);
        *(_WORD *)(v9 + 2 * v5) = *(_WORD *)(v7
                                           + 2 * (*(_DWORD *)(v11 + 56) * v5)
                                           + 2 * (v10 + ~v3));
        uint64_t v12 = sub_1DDAA7CC0(v11);
        if (0xAAAAAAAAAAAAAAABLL * (v21[1] - v21[0]) <= v3) {
          sub_1DDA24AD0();
        }
        uint64_t v13 = v12;
        long long v14 = &v21[0][3 * v3];
        int v15 = *v14;
        if (v5 >= v14[1] - *v14) {
          sub_1DDA24AD0();
        }
        uint64_t v2 = *(_DWORD **)(a1 + 8);
        v15[v5] = *(_WORD *)(v13 + 2 * (v2[14] * v5) + 2 * (v3 + v10));
        ++v5;
        unint64_t v4 = *(unsigned int *)(a1 + 24);
      }
      while (v5 < v4);
    }
    ++v3;
  }
  while (v3 != 4);
  sub_1DDB51D20((uint64_t)v2, (uint64_t *)v21);
  sub_1DDB51D20(v16, (uint64_t *)&__p);
  sub_1DDB52070(v21, (uint64_t *)(a1 + 56), (uint64_t **)v17);
  sub_1DDB53698((uint64_t *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v17;
  *(void *)(a1 + 48) = v18;
  v17[1] = 0;
  uint64_t v18 = 0;
  v17[0] = 0;
  uint64_t v22 = v17;
  sub_1DDA9E7E4(&v22);
  sub_1DDB52070((unsigned __int16 ***)&__p, (uint64_t *)(a1 + 104), (uint64_t **)v17);
  sub_1DDB53698((uint64_t *)(a1 + 80));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v17;
  *(void *)(a1 + 96) = v18;
  v17[1] = 0;
  uint64_t v18 = 0;
  v17[0] = 0;
  uint64_t v22 = v17;
  sub_1DDA9E7E4(&v22);
  v17[0] = &__p;
  sub_1DDA9E7E4((void ***)v17);
  std::string __p = v21;
  sub_1DDA9E7E4((void ***)&__p);
}

void sub_1DDB51810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **__p, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15)
{
  std::string __p = &a12;
  sub_1DDA9E7E4((void ***)&__p);
  a12 = &a15;
  sub_1DDA9E7E4((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1DDB5188C(void *a1)
{
  BOOL v38 = 0;
  double v36 = 0.0;
  double v37 = 0.0;
  sub_1DDB52670(a1, &v38, &v37, &v36);
  BOOL v2 = 0;
  if (v37 > 0.15) {
    BOOL v2 = v37 / v36 > 0.7;
  }
  double v35 = 0.0;
  sub_1DDB5286C(a1, 1u, 1, 1, 1, 1u, 0, &v35, &v33);
  uint64_t v4 = v33;
  unint64_t v3 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v5 = v35;
  double v32 = 0.0;
  sub_1DDB5286C(a1, 1u, 0, 0, 1, 1u, 0, &v32, &v30);
  double v29 = 0.0;
  sub_1DDB5286C(a1, 1u, 1, 1, 0, 0, 0, &v29, &v27);
  if (v38)
  {
    if (v32 >= v29) {
      double v6 = v29;
    }
    else {
      double v6 = v32;
    }
    if (v32 >= v29) {
      uint64_t v7 = &v27;
    }
    else {
      uint64_t v7 = &v30;
    }
    uint64_t v8 = *v7;
    uint64_t v9 = &v28;
    if (v32 < v29) {
      uint64_t v9 = &v31;
    }
    unint64_t v10 = *v9;
    if (*v9)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v6 / v5 >= 1.05)
      {
        double v6 = v5;
        uint64_t v8 = v4;
      }
      else
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v3) {
          sub_1DDA18310(v3);
        }
        unint64_t v3 = v10;
      }
      sub_1DDA18310(v10);
      uint64_t v12 = v3;
      goto LABEL_37;
    }
    double v13 = v6 / v5;
    if (v6 / v5 < 1.05) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v3;
    }
    if (v6 / v5 < 1.05) {
      uint64_t v11 = *v7;
    }
    else {
      uint64_t v11 = v4;
    }
    if (v6 / v5 < 1.05) {
      double v5 = v6;
    }
    if (v3 && v13 < 1.05)
    {
      sub_1DDA18310(v3);
      uint64_t v12 = 0;
LABEL_37:
      uint64_t v11 = v8;
      double v5 = v6;
    }
  }
  else
  {
    uint64_t v11 = v27;
    uint64_t v12 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3) {
      sub_1DDA18310(v3);
    }
    double v5 = v29;
  }
  double v26 = 0.0;
  sub_1DDB5286C(a1, 1u, 1, 0, 0, 0, 0, &v26, &v25);
  double v14 = v26;
  if (v26 / v5 >= 1.05)
  {
    int v15 = v12;
  }
  else
  {
    int v15 = (std::__shared_weak_count *)*((void *)&v25 + 1);
    uint64_t v11 = v25;
    if (*((void *)&v25 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (v12)
    {
      sub_1DDA18310(v12);
      double v5 = v26;
    }
    else
    {
      double v5 = v14;
    }
  }
  sub_1DDB5286C(a1, 1u, 0, 0, 0, 0, 0, &v26, &v24);
  long long v16 = v24;
  long long v24 = 0uLL;
  int v17 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  long long v25 = v16;
  if (v17)
  {
    sub_1DDA18310(v17);
    if (*((void *)&v24 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
    }
  }
  double v18 = v26;
  if (v26 / v5 >= 1.05)
  {
    uint64_t v19 = v15;
    if (!v2) {
      goto LABEL_67;
    }
  }
  else
  {
    uint64_t v19 = (std::__shared_weak_count *)*((void *)&v25 + 1);
    uint64_t v11 = v25;
    if (*((void *)&v25 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (v15)
    {
      sub_1DDA18310(v15);
      double v5 = v26;
      if (!v2) {
        goto LABEL_67;
      }
    }
    else
    {
      double v5 = v18;
      if (!v2) {
        goto LABEL_67;
      }
    }
  }
  sub_1DDB5286C(a1, 0, 0, 0, 0, 0, 1, &v26, &v24);
  long long v20 = v24;
  long long v24 = 0uLL;
  uint64_t v21 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  long long v25 = v20;
  if (v21)
  {
    sub_1DDA18310(v21);
    if (*((void *)&v24 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
    }
  }
  if (v26 / v5 >= 1.05)
  {
LABEL_67:
    uint64_t v22 = v19;
    if (!v11) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  uint64_t v11 = v25;
  if (*((void *)&v25 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (v19) {
    sub_1DDA18310(v19);
  }
  if (v11) {
LABEL_68:
  }
    nullsub_1(v11);
LABEL_69:
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v23 = (std::__shared_weak_count *)a1[17];
  a1[16] = v11;
  a1[17] = v22;
  if (v23) {
    sub_1DDA18310(v23);
  }
  if (*((void *)&v25 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (v28) {
    sub_1DDA18310(v28);
  }
  if (v31) {
    sub_1DDA18310(v31);
  }
  if (v34) {
    sub_1DDA18310(v34);
  }
  if (v22) {
    sub_1DDA18310(v22);
  }
}

void sub_1DDB51CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  if (a19) {
    sub_1DDA18310(a19);
  }
  if (a22) {
    sub_1DDA18310(a22);
  }
  if (v22) {
    sub_1DDA18310(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB51D20(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = (void *)*a2;
  uint64_t v4 = a2[1];
  if ((void *)v4 == v3) {
    sub_1DDA24AD0();
  }
  uint64_t v6 = v3[1] - *v3;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  sub_1DDB536D4(&v46, (uint64_t)v3, v4, 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v3) >> 3));
  uint64_t v9 = *(void *)*a2;
  uint64_t v10 = *(void *)(*a2 + 24);
  uint64_t v11 = *(void *)(*a2 + 48);
  double v12 = 0.0;
  double v13 = 0.0;
  uint64_t v14 = *(void *)(*a2 + 72);
  int v15 = (_WORD *)(v9 + 2);
  long long v16 = (_WORD *)(v10 + 2);
  int v17 = (_WORD *)(v11 + 2);
  double v18 = (_WORD *)(v14 + 2);
  unint64_t v19 = -2;
  double v20 = 0.0;
  double v21 = 0.0;
  double v22 = 0.0;
  double v23 = 0.0;
  double v24 = 0.0;
  double v25 = 0.0;
  do
  {
    LOWORD(v7) = *(v15 - 1);
    *(double *)&unint64_t v26 = (double)*(unint64_t *)&v7;
    double v12 = v12 + *(double *)&v26;
    LOWORD(v26) = *(v16 - 1);
    *(double *)&unint64_t v27 = (double)v26;
    double v25 = v25 + *(double *)&v27;
    LOWORD(v27) = *(v17 - 1);
    *(double *)&unint64_t v28 = (double)v27;
    double v24 = v24 + *(double *)&v28;
    LOWORD(v28) = *(v18 - 1);
    *(double *)&unint64_t v29 = (double)v28;
    double v23 = v23 + *(double *)&v29;
    LOWORD(v29) = *v15;
    *(double *)&unint64_t v30 = (double)v29;
    double v22 = v22 + *(double *)&v30;
    LOWORD(v30) = *v16;
    *(double *)&unint64_t v31 = (double)v30;
    double v21 = v21 + *(double *)&v31;
    LOWORD(v31) = *v17;
    *(double *)&unint64_t v32 = (double)v31;
    double v20 = v20 + *(double *)&v32;
    LOWORD(v32) = *v18;
    double v7 = (double)v32;
    v19 += 2;
    v15 += 2;
    double v13 = v13 + v7;
    v16 += 2;
    v17 += 2;
    v18 += 2;
  }
  while (v19 < 0x62);
  if ((unint64_t)v6 >= 0xCB)
  {
    unsigned int v33 = 0;
    uint64_t v34 = *v46;
    uint64_t v35 = v46[3];
    uint64_t v36 = v46[6];
    uint64_t v37 = v46[9];
    unint64_t v38 = 101;
    do
    {
      LOWORD(v8) = *(_WORD *)(v9 + 2 * (v33 + 50));
      *(double *)&unint64_t v39 = (v12 / 50.0 + (double)*(unint64_t *)&v8) * 0.5;
      *(_WORD *)(v34 + 2 * (v33 + 50)) = (int)*(double *)&v39;
      LOWORD(v39) = *(_WORD *)(v10 + 2 * (v33 + 50));
      *(double *)&unint64_t v40 = (v25 / 50.0 + (double)v39) * 0.5;
      *(_WORD *)(v35 + 2 * (v33 + 50)) = (int)*(double *)&v40;
      LOWORD(v40) = *(_WORD *)(v11 + 2 * (v33 + 50));
      *(double *)&unint64_t v41 = (v24 / 50.0 + (double)v40) * 0.5;
      *(_WORD *)(v36 + 2 * (v33 + 50)) = (int)*(double *)&v41;
      LOWORD(v41) = *(_WORD *)(v14 + 2 * (v33 + 50));
      *(double *)&unint64_t v42 = (v23 / 50.0 + (double)v41) * 0.5;
      *(_WORD *)(v37 + 2 * (v33 + 50)) = (int)*(double *)&v42;
      LOWORD(v42) = *(_WORD *)(v9 + 2 * (v33 + 51));
      *(double *)&unint64_t v43 = (v22 / 50.0 + (double)v42) * 0.5;
      *(_WORD *)(v34 + 2 * (v33 + 51)) = (int)*(double *)&v43;
      LOWORD(v43) = *(_WORD *)(v10 + 2 * (v33 + 51));
      *(double *)&unint64_t v44 = (v21 / 50.0 + (double)v43) * 0.5;
      *(_WORD *)(v35 + 2 * (v33 + 51)) = (int)*(double *)&v44;
      LOWORD(v44) = *(_WORD *)(v11 + 2 * (v33 + 51));
      *(double *)&unint64_t v45 = (v20 / 50.0 + (double)v44) * 0.5;
      *(_WORD *)(v36 + 2 * (v33 + 51)) = (int)*(double *)&v45;
      LOWORD(v45) = *(_WORD *)(v14 + 2 * (v33 + 51));
      *(_WORD *)(v37 + 2 * (v33 + 51)) = (int)((v13 / 50.0 + (double)v45) * 0.5);
      double v12 = v12 + (double)(*(unsigned __int16 *)(v9 + 2 * (v33 + 100)) - *(unsigned __int16 *)(v9 + 2 * v33));
      double v25 = v25 + (double)(*(unsigned __int16 *)(v10 + 2 * (v33 + 100)) - *(unsigned __int16 *)(v10 + 2 * v33));
      double v24 = v24 + (double)(*(unsigned __int16 *)(v11 + 2 * (v33 + 100)) - *(unsigned __int16 *)(v11 + 2 * v33));
      double v23 = v23 + (double)(*(unsigned __int16 *)(v14 + 2 * (v33 + 100)) - *(unsigned __int16 *)(v14 + 2 * v33));
      double v22 = v22 + (double)(*(unsigned __int16 *)(v9 + 2 * v38) - *(unsigned __int16 *)(v9 + 2 * (v33 + 1)));
      double v21 = v21 + (double)(*(unsigned __int16 *)(v10 + 2 * v38) - *(unsigned __int16 *)(v10 + 2 * (v33 + 1)));
      double v20 = v20 + (double)(*(unsigned __int16 *)(v11 + 2 * v38) - *(unsigned __int16 *)(v11 + 2 * (v33 + 1)));
      double v8 = (double)(*(unsigned __int16 *)(v14 + 2 * v38) - *(unsigned __int16 *)(v14 + 2 * (v33 + 1)));
      double v13 = v13 + v8;
      unint64_t v38 = v33 + 103;
      v33 += 2;
    }
    while (v6 >> 1 > v38);
  }
  if (&v46 != (uint64_t **)a2) {
    sub_1DDB53848((uint64_t)a2, (uint64_t)v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - (uint64_t)v46) >> 3));
  }
  float v49 = (void **)&v46;
  sub_1DDA9E7E4(&v49);
}

void sub_1DDB52054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1DDA9E7E4(&a12);
  _Unwind_Resume(a1);
}

void sub_1DDB52070(unsigned __int16 ***a1@<X1>, uint64_t *a2@<X2>, uint64_t **a3@<X8>)
{
  if (a1[1] == *a1) {
    sub_1DDA24AD0();
  }
  uint64_t v5 = (char *)(*a1)[1] - (char *)**a1;
  float v96 = (void *)0x4197D78400000000;
  sub_1DDA25B2C(__p, ((unint64_t)(int)(v5 >> 1) >> 1) + 1, &v96);
  sub_1DDB53A44(v100, (int)(v5 >> 1), (uint64_t)__p);
  unint64_t v6 = (unint64_t)v5 >> 1;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v7 = 2;
  uint64_t v8 = 2;
  do
  {
    sub_1DDA24B78(__p, 9uLL);
    sub_1DDA24B78(&v96, 9uLL);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = v7 + 4;
    double v12 = **a1;
    double v13 = (*a1)[3];
    uint64_t v14 = (*a1)[6];
    int v15 = (*a1)[9];
    long long v16 = (double *)__p[0];
    int v17 = (double *)v96;
    int v18 = *v12;
    int v19 = *v13;
    int v20 = *v14;
    int v21 = *v15;
    double v22 = &v12[v8];
    double v23 = &v13[v8];
    double v24 = &v14[v8];
    double v25 = &v15[v8];
    double v26 = 0.0;
    double v27 = 0.0;
    do
    {
      int v28 = v18 - v22[v10];
      int v18 = v12[v10 + 1];
      double v29 = (double)(v18 - v22[v10 + 1]);
      double v30 = (double)(v19 - v23[v10]);
      int v19 = v13[v10 + 1];
      double v31 = (double)(v19 - v23[v10 + 1]);
      double v32 = (double)(v20 - v24[v10]);
      double v33 = (double)v28 * (double)v28 + 0.0 + v30 * v30;
      int v20 = v14[v10 + 1];
      double v34 = (double)(v20 - v24[v10 + 1]);
      double v35 = v29 * v29 + 0.0 + v31 * v31;
      double v36 = (double)(v21 - v25[v10]);
      int v21 = v15[v10 + 1];
      double v37 = (double)(v21 - v25[v10 + 1]);
      double v38 = v33 + v32 * v32 + v36 * v36;
      v16[v9] = v38;
      double v39 = v35 + v34 * v34 + v37 * v37;
      double v26 = v26 + v38;
      v17[v9] = v39;
      double v27 = v27 + v39;
      ++v10;
      ++v9;
    }
    while (v10 != 9);
    double v40 = (double)(int)v7 * 5.0 / 400.0;
    uint64_t v41 = v100[0];
    uint64_t v42 = *(void *)(v100[0] + 24 * v11);
    uint64_t v43 = 4 * v11;
    *(double *)(*(void *)(v100[0] + 96) + v43) = v40 * v26;
    *(double *)(v42 + 16) = v40 * v27;
    *(double *)(*(void *)(v41 + 120) + v43) = v40 * v27;
    unint64_t v44 = (v6 - 4 + ~v7);
    if ((int)v44 < 7) {
      goto LABEL_13;
    }
    for (unint64_t i = 6; i < v44; i += 2)
    {
      uint64_t v46 = 0;
      double v47 = 0.0;
      double v48 = 0.0;
      do
      {
        double v49 = v16[v46 + 1];
        v16[v46] = v49;
        double v47 = v47 + v49;
        double v50 = v17[v46 + 1];
        v17[v46] = v50;
        double v48 = v48 + v50;
        ++v46;
      }
      while (v46 != 8);
      uint64_t v51 = 2 * i + 8;
      uint64_t v52 = i + v7;
      uint64_t v53 = v52 * 2 + 8;
      double v54 = (double)(*(unsigned __int16 *)((char *)v12 + v51) - v12[v52 + 4]);
      uint64_t v55 = 2 * i + 10;
      v52 += 5;
      double v56 = (double)(*(unsigned __int16 *)((char *)v12 + v55) - v12[v52]);
      double v57 = (double)(*(unsigned __int16 *)((char *)v13 + v51) - *(unsigned __int16 *)((char *)v13 + v53));
      double v58 = (double)(*(unsigned __int16 *)((char *)v13 + v55) - v13[v52]);
      double v59 = v54 * v54 + 0.0 + v57 * v57;
      double v60 = (double)(*(unsigned __int16 *)((char *)v14 + v51) - *(unsigned __int16 *)((char *)v14 + v53));
      double v61 = v56 * v56 + 0.0 + v58 * v58;
      double v62 = (double)(*(unsigned __int16 *)((char *)v14 + v55) - v14[v52]);
      double v63 = v59 + v60 * v60;
      double v64 = (double)(*(unsigned __int16 *)((char *)v15 + v51) - *(unsigned __int16 *)((char *)v15 + v53));
      double v65 = v61 + v62 * v62;
      double v66 = (double)(*(unsigned __int16 *)((char *)v15 + v55) - v15[v52]);
      double v67 = v63 + v64 * v64;
      v16[8] = v67;
      double v68 = v47 + v67;
      double v69 = v65 + v66 * v66;
      v17[8] = v69;
      uint64_t v70 = *(void *)(v41 + 24 * (i + v7));
      uint64_t v71 = 4 * (i + v7);
      *(double *)(*(void *)(v41 + 24 * i) + v71) = v40 * v68;
      double v72 = v40 * (v48 + v69);
      *(double *)(v70 + 4 * i) = v72;
      *(double *)(*(void *)(v41 + 24 * (i | 1)) + v71) = v72;
    }
    int v17 = (double *)v96;
    if (v96)
    {
LABEL_13:
      float v97 = v17;
      operator delete(v17);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v8 += 2;
    BOOL v73 = v7 >= 0x18E;
    v7 += 2;
  }
  while (!v73);
  sub_1DDA24B78(__p, (int)(v5 >> 1));
  sub_1DDB53A44(a3, 2uLL, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_1DDA24B78(&v96, (int)(v5 >> 1));
  sub_1DDB53A44(__p, 2uLL, (uint64_t)&v96);
  sub_1DDB53698(a2);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  a2[2] = v99;
  __p[1] = 0;
  uint64_t v99 = 0;
  __p[0] = 0;
  char v101 = __p;
  sub_1DDA9E7E4(&v101);
  if (v96)
  {
    float v97 = v96;
    operator delete(v96);
  }
  if ((int)v6 >= 1)
  {
    uint64_t v76 = 0;
    char v77 = 0;
    uint64_t v78 = *a1;
    uint64_t v79 = v100[0];
    uint64_t v80 = **a3;
    uint64_t v81 = (*a3)[3];
    uint64_t v82 = *(void *)(*a2 + 24);
    uint64_t v83 = *(void *)*a2;
    int v84 = -400;
    do
    {
      if (v84 <= (v77 & 1)) {
        uint64_t v85 = v77 & 1;
      }
      else {
        uint64_t v85 = v84;
      }
      int v86 = v76 & 1;
      if ((int)v76 - 400 > v86) {
        int v86 = v76 - 400;
      }
      int v87 = v76 + 400;
      if ((int)v76 + 400 >= (int)v6) {
        int v87 = (unint64_t)v5 >> 1;
      }
      double v88 = 0.0;
      double v89 = 0.0;
      double v90 = 0.0;
      if (v86 < v87)
      {
        if (v84 <= (v77 & 1)) {
          uint64_t v91 = v77 & 1;
        }
        else {
          uint64_t v91 = v84;
        }
        float v92 = (double *)(*(void *)(v79 + 24 * v76) + ((4 * v85) & 0x1FFFFFFF8));
        do
        {
          LOWORD(v74) = (*v78)[v91];
          double v74 = (double)*(unint64_t *)&v74;
          LOWORD(v75) = v78[3][v91];
          double v75 = (double)*(unint64_t *)&v75;
          double v93 = *v92++;
          double v88 = v88 + v74 * (1.0 / v93);
          double v89 = v89 + v75 * (1.0 / v93);
          double v90 = v90 + 1.0 / v93;
          v91 += 2;
        }
        while (v91 < v87);
      }
      *(double *)(v80 + 8 * v76) = v88 / v90;
      *(double *)(v81 + 8 * v76) = v89 / v90;
      double v94 = v90 * v90;
      *(double *)(v82 + 8 * v76) = v94;
      *(double *)(v83 + 8 * v76++) = v94;
      ++v77;
      ++v84;
    }
    while (v76 != ((unint64_t)v5 >> 1));
  }
  __p[0] = v100;
  sub_1DDA9E7E4((void ***)__p);
}

void sub_1DDB525EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, void *__p, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  a13 = a9;
  sub_1DDA9E7E4((void ***)&a13);
  a13 = &a17;
  sub_1DDA9E7E4((void ***)&a13);
  _Unwind_Resume(a1);
}

double sub_1DDB52670(void *a1, BOOL *a2, double *a3, double *a4)
{
  uint64_t v5 = (void *)a1[4];
  if ((void *)a1[5] == v5) {
    sub_1DDA24AD0();
  }
  uint64_t v9 = (uint64_t)(v5[1] - *v5) >> 3;
  double v10 = sub_1DDB53020((uint64_t)a1);
  double v11 = (double)v9;
  if (v9)
  {
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = 0;
    double v15 = 0.0;
    double v16 = 0.0;
    do
    {
      unint64_t v17 = 0;
      char v18 = 0;
      do
      {
        char v19 = v17;
        unint64_t v20 = v14 + (v17++ >> 1);
        double v21 = *(double *)(*(void *)(a1[4] + 24 * (v17 & 1)) + 8 * v20);
        unsigned int v22 = v19 & 1;
        double v23 = *(double *)(*(void *)(a1[10] + 24 * (v19 & 1)) + 8 * v20);
        BOOL v24 = v21 > 600.0;
        if (v23 > 600.0) {
          BOOL v24 = 1;
        }
        if (v21 <= 1500.0
          && v23 <= 1500.0
          && fmin(fmax((v21 - v23)/ 133.333333* ((v21 - v23)/ 133.333333* -((v21 - v23) / 133.333333 * ((v21 - v23) / 133.333333)))* ((v21 - v23)/ 133.333333)+ 1.0, 0.0), 1.0)* fmin(fmax((fmin(*(double *)(*(void *)(a1[7] + 24 * (v17 & 1)) + 8 * v20), *(double *)(*(void *)(a1[13] + 24 * v22) + 8 * v20))- v10)/ v10, 0.0),
               2.0) >= 0.00001)
        {
          v18 |= v24;
          double v16 = (double)v14 / v11 + v16;
          double v15 = v15 + 1.0;
          ++v13;
        }
        else
        {
          char v18 = 1;
        }
      }
      while (v17 != 4);
      if ((v18 & 1) == 0) {
        v12 += 4;
      }
      v14 += 2;
    }
    while (v14 < v9);
    double v25 = v16 / v15 + -0.5;
    double v26 = (double)v12;
  }
  else
  {
    unsigned int v13 = 0;
    double v26 = 0.0;
    double v25 = NAN;
  }
  *a2 = fabs(v25) < 0.15;
  *a3 = v26 / v11;
  double result = (double)v13 / v11;
  *a4 = result;
  return result;
}

void sub_1DDB5286C(void *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, int a7@<W6>, void *a8@<X7>, void *a9@<X8>)
{
  uint64_t v9 = (void *)a1[4];
  if ((void *)a1[5] == v9) {
    sub_1DDA24AD0();
  }
  unint64_t v16 = v9[1] - *v9;
  size_t v62 = a3 + a2;
  uint64_t v63 = (v62 + a4);
  uint64_t v64 = (v63 + a5);
  if (a7) {
    int v17 = 4;
  }
  else {
    int v17 = 0;
  }
  uint64_t v61 = v64 + a6;
  unint64_t v18 = v64 + a6 + v17;
  v68[0] = 0;
  sub_1DDA25B2C(&__p, (v18 + 1), v68);
  sub_1DDB53A44(v71, (v16 >> 2) & 0xFFFFFFFE, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v70 = __p;
    operator delete(__p);
  }
  double v19 = sub_1DDB53020((uint64_t)a1);
  if ((v16 >> 3))
  {
    double v20 = v19;
    unsigned int v21 = 0;
    unsigned int v60 = 0;
    uint64_t v22 = (v17 | a6) + a5 + a4 + a3 + a2 + 1;
    while (1)
    {
      sub_1DDA24B78(&__p, 4uLL);
      sub_1DDA24B78(v68, 4uLL);
      sub_1DDA24B78(v67, 4uLL);
      sub_1DDA24B78(v66, 4uLL);
      sub_1DDA24B78(v65, 4uLL);
      unint64_t v23 = 0;
      uint64_t v24 = a1[4];
      double v25 = (double)v60 / (double)(v16 >> 3);
      double v26 = __p;
      uint64_t v27 = a1[10];
      int v28 = v68[0];
      uint64_t v29 = a1[7];
      double v30 = v67[0];
      uint64_t v31 = a1[13];
      double v32 = v66[0];
      int v33 = 1;
      double v34 = (double *)v65[0];
      do
      {
        unint64_t v35 = v23 + 1;
        uint64_t v36 = (8 * ((v23 + 1) & 1)) & 0xEF | (16 * ((v23 + 1) & 1));
        unint64_t v37 = v60 + (v23 >> 1);
        v26[v23] = *(void *)(*(void *)(v24 + v36) + 8 * v37);
        uint64_t v38 = (8 * (v23 & 1)) & 0xEF | (16 * (v23 & 1));
        v28[v23] = *(void *)(*(void *)(v27 + v38) + 8 * v37);
        v30[v23] = *(void *)(*(void *)(v29 + v36) + 8 * v37);
        v32[v23] = *(void *)(*(void *)(v31 + v38) + 8 * v37);
        double v39 = *(double *)&v26[v23];
        if (v39 <= 1500.0 && (double v40 = *(double *)&v28[v23], v40 <= 1500.0))
        {
          BOOL v41 = v39 <= 600.0;
          if (v40 > 600.0) {
            BOOL v41 = 0;
          }
          double v42 = fmin(fmax((v39 - v40)/ 133.333333* ((v39 - v40)/ 133.333333* -((v39 - v40) / 133.333333 * ((v39 - v40) / 133.333333)))* ((v39 - v40)/ 133.333333)+ 1.0, 0.0), 1.0);
          v34[v23] = v42;
          double v43 = v42 * fmin(fmax((fmin(*(double *)&v30[v23], *(double *)&v32[v23]) - v20) / v20, 0.0), 2.0);
          v34[v23] = v43;
          if (v43 < 0.00001) {
            BOOL v41 = 0;
          }
          v33 &= v41;
          double v44 = fmin(*(double *)&v26[v23], *(double *)&v28[v23]);
          v34[v23] = v43 * ((v44 * -0.5 + 2000.0) / 2000.0 * ((v44 * -0.5 + 2000.0) / 2000.0));
        }
        else
        {
          int v33 = 0;
        }
        ++v23;
      }
      while (v35 != 4);
      if (a7)
      {
        unint64_t v45 = (double *)v65[0];
        double v46 = (*(double *)v65[0] + *((double *)v65[0] + 1) + *((double *)v65[0] + 2) + *((double *)v65[0] + 3)) * 0.25;
        *((double *)v65[0] + 2) = v46;
        v45[3] = v46;
        *unint64_t v45 = v46;
        v45[1] = v46;
      }
      uint64_t v47 = 0;
      double v48 = (double *)v65[0];
      double v49 = (double *)__p;
      double v50 = (double *)v68[0];
      uint64_t v51 = v71[0];
      do
      {
        if (v48[v47] < 0.00001) {
          goto LABEL_41;
        }
        double v52 = v49[v47];
        double v53 = v50[v47];
        if (a2) {
          **(void **)(v51 + 24 * v21) = 0x3FF0000000000000;
        }
        double v54 = (v52 + v53) * 0.5;
        if (a3)
        {
          *(double *)(*(void *)(v51 + 24 * v21) + 8 * a2) = v54;
          if (!a4)
          {
LABEL_27:
            if (!a5) {
              goto LABEL_28;
            }
            goto LABEL_33;
          }
        }
        else if (!a4)
        {
          goto LABEL_27;
        }
        *(double *)(*(void *)(v51 + 24 * v21) + 8 * v62) = v54 * v54;
        if (!a5)
        {
LABEL_28:
          if (!a6) {
            goto LABEL_29;
          }
          goto LABEL_34;
        }
LABEL_33:
        *(double *)(*(void *)(v51 + 24 * v21) + 8 * v63) = v25;
        if (!a6)
        {
LABEL_29:
          if (!a7) {
            goto LABEL_38;
          }
          goto LABEL_35;
        }
LABEL_34:
        *(double *)(*(void *)(v51 + 24 * v21) + 8 * v64) = v25 * v25;
        if (!a7) {
          goto LABEL_38;
        }
LABEL_35:
        if (v33)
        {
          *(void *)(*(void *)(v51 + 24 * v21) + 8 * (v47 + v61)) = 0x3FF0000000000000;
        }
        else if (!(a5 | a6 | a3 | a2 | a4))
        {
          goto LABEL_41;
        }
LABEL_38:
        uint64_t v55 = *(double **)(v51 + 24 * v21);
        v55[v18] = v49[v47] - v50[v47];
        uint64_t v56 = v22;
        do
        {
          *uint64_t v55 = v48[v47] * *v55;
          ++v55;
          --v56;
        }
        while (v56);
        ++v21;
LABEL_41:
        ++v47;
      }
      while (v47 != 4);
      if (v65[0])
      {
        v65[1] = v65[0];
        operator delete(v65[0]);
        double v32 = v66[0];
      }
      if (v32)
      {
        v66[1] = v32;
        operator delete(v32);
      }
      if (v67[0])
      {
        v67[1] = v67[0];
        operator delete(v67[0]);
      }
      if (v68[0])
      {
        v68[1] = v68[0];
        operator delete(v68[0]);
      }
      if (__p)
      {
        uint64_t v70 = __p;
        operator delete(__p);
      }
      v60 += 2;
      if (v60 >= (v16 >> 3))
      {
        if (v21 >= 0x64)
        {
          sub_1DDA24B78(&__p, v18);
          operator new[]();
        }
        break;
      }
    }
  }
  *a8 = 0x4202A05F20000000;
  *a9 = 0;
  a9[1] = 0;
  std::string __p = v71;
  sub_1DDA9E7E4((void ***)&__p);
}

void sub_1DDB52F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  a34 = (void *)(v35 - 176);
  sub_1DDA9E7E4((void ***)&a34);
  _Unwind_Resume(a1);
}

double sub_1DDB53020(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (*(void **)(a1 + 40) == v1) {
    sub_1DDA24AD0();
  }
  return (double)(unint64_t)((uint64_t)(v1[1] - *v1) >> 3) * 0.0000000018;
}

void *sub_1DDB53060(uint64_t a1, int a2, uint64_t a3, const void *a4, void *a5)
{
  uint64_t v7 = dgels_NEWLAPACK();
  MEMORY[0x1F4188790](v7);
  dgels_NEWLAPACK();
  return memcpy(a5, a4, 8 * a2);
}

double sub_1DDB531C8(uint64_t *a1, double ***a2)
{
  unsigned int v12 = 0;
  unsigned int v13 = 0;
  uint64_t v14 = 0;
  memset(v11, 0, sizeof(v11));
  sub_1DDB53308(a1, a2, (uint64_t *)&v12, (uint64_t *)v11);
  if (v13 == v12) {
    sub_1DDA24AD0();
  }
  unint64_t v2 = v12[1] - *v12;
  if ((v2 >> 3))
  {
    unint64_t v3 = 0;
    double v4 = 0.0;
    do
    {
      for (unint64_t i = 0; i != 4; ++i)
      {
        unint64_t v6 = v3 + (i >> 1);
        float v7 = *(double *)(v12[3 * (((int)i + 1) & 1)] + 8 * v6);
        float v8 = *((double *)v11[0][3 * (i & 1)] + v6);
        double v4 = v4 + (float)(v7 - v8) * (float)(v7 - v8);
      }
      v3 += 2;
    }
    while (v3 < (v2 >> 3));
  }
  else
  {
    double v4 = 0.0;
  }
  double v9 = v4 / (double)(v2 >> 3);
  double v15 = v11;
  sub_1DDA9E7E4((void ***)&v15);
  v11[0] = (void **)&v12;
  sub_1DDA9E7E4(v11);
  return v9;
}

void sub_1DDB532D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 40) = &a10;
  sub_1DDA9E7E4((void ***)(v13 - 40));
  a10 = (void **)&a13;
  sub_1DDA9E7E4(&a10);
  _Unwind_Resume(a1);
}

void sub_1DDB53308(uint64_t *a1, double ***a2, uint64_t *a3, uint64_t *a4)
{
  if (a1 + 4 != a3) {
    sub_1DDB53B00((uint64_t)a3, a1[4], a1[5], 0xAAAAAAAAAAAAAAABLL * ((a1[5] - a1[4]) >> 3));
  }
  if (a1 + 10 != a4) {
    sub_1DDB53B00((uint64_t)a4, a1[10], a1[11], 0xAAAAAAAAAAAAAAABLL * ((a1[11] - a1[10]) >> 3));
  }
  float v8 = (void *)*a3;
  if (a3[1] == *a3) {
    sub_1DDA24AD0();
  }
  double v9 = *a2;
  double v10 = **a2;
  float v11 = 0.0;
  float v12 = 0.0;
  float v13 = 0.0;
  float v14 = 0.0;
  unint64_t v15 = (char *)(*a2)[1] - (char *)v10;
  if (v15)
  {
    float v13 = *v10;
    if (v15 >= 9)
    {
      float v12 = v10[1];
      if (v15 >= 0x11) {
        float v14 = v10[2];
      }
    }
  }
  unint64_t v16 = v9[6];
  unint64_t v17 = (char *)v9[7] - (char *)v16;
  if (v17)
  {
    float v18 = *v16;
    if (v17 >= 9) {
      float v11 = v16[1];
    }
  }
  else
  {
    float v18 = 0.0;
  }
  unint64_t v19 = ((v8[1] - *v8) >> 3);
  if (((v8[1] - *v8) >> 3))
  {
    unint64_t v20 = 0;
    uint64_t v22 = v9 + 3;
    unsigned int v21 = v9[3];
    int64_t v23 = (char *)v22[1] - (char *)v21;
    uint64_t v24 = *a4;
    do
    {
      unint64_t v25 = 0;
      do
      {
        unint64_t v26 = v25 + 1;
        unint64_t v27 = v20 + (v25 >> 1);
        uint64_t v28 = v8[3 * (((int)v25 + 1) & 1)];
        float v29 = *(double *)(v28 + 8 * v27);
        uint64_t v30 = *(void *)(v24 + 24 * (v25 & 1));
        float v31 = *(double *)(v30 + 8 * v27);
        if (v29 <= 2000.0 && v31 <= 2000.0)
        {
          if (v23 == 32)
          {
            float v33 = v21[v25];
            float v34 = v29 + (float)((float)((float)((float)(v29 * v29) * -0.0000015625) + 1.0) * (float)(v33 * 0.5));
            if (v29 <= 800.0) {
              float v29 = v34;
            }
          }
          float v35 = (float)((float)(v11 * (float)v27) * (float)v27) + (float)(v18 * (float)v27);
          if (v29 <= 2000.0) {
            float v29 = v29
          }
                + (float)((float)((float)((float)(v29 * v29) * -0.00000025) + 1.0)
                        * (float)((float)(v35
                                        + (float)((float)(v13 + (float)(v12 * v29)) + (float)((float)(v14 * v29) * v29)))
                                * 0.5));
          if (v23 == 32)
          {
            float v36 = v21[v25];
            float v37 = v31 + (float)((float)((float)((float)(v31 * v31) * -0.0000015625) + 1.0) * (float)(v36 * -0.5));
            if (v31 <= 800.0) {
              float v31 = v37;
            }
          }
          float v38 = v31
              + (float)((float)((float)((float)(v31 * v31) * -0.00000025) + 1.0)
                      * (float)((float)(v35
                                      + (float)((float)(v13 + (float)(v12 * v31)) + (float)((float)(v14 * v31) * v31)))
                              * -0.5));
          if (v31 <= 2000.0) {
            float v31 = v38;
          }
          *(double *)(v28 + 8 * v27) = v29;
          *(double *)(v30 + 8 * v27) = v31;
        }
        ++v25;
      }
      while (v26 != 4);
      v20 += 2;
    }
    while (v20 < v19);
  }
}

void sub_1DDB535A4(uint64_t a1)
{
  sub_1DDB53F3C(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB535DC(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DDA9E654(a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    float v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *unint64_t v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_1DDA1D908(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1DDB53678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1DDB53698(uint64_t *a1)
{
  if (*a1)
  {
    sub_1DDA9E838(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_1DDB536D4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_1DDA9E654(result, a4);
    double result = sub_1DDB5375C((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1DDB5373C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1DDA9E7E4(&a9);
  _Unwind_Resume(a1);
}

void *sub_1DDB5375C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  double v4 = a4;
  uint64_t v10 = a4;
  float v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1DDA1D908(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 1);
      double v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1DDB53810((uint64_t)v8);
  return v4;
}

void sub_1DDB537FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1DDB53810(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DDA9E794(a1);
  }
  return a1;
}

void sub_1DDB53848(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1DDB53698((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1DDA9E654((void *)a1, v11);
    float v12 = sub_1DDB5375C(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_1DDB539D4((int)&v20, a2, v13, v9);
    float v12 = sub_1DDB5375C(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1DDB539D4((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      unint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      float v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1DDB539C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DDB539CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB539D4(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        sub_1DDA49474(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 1);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_1DDB53A44(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DDA9E654(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *uint64_t v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_1DDA1808C(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1DDB53AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1DDB53B00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1DDB53698((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1DDA9E654((void *)a1, v11);
    float v12 = sub_1DDB53C8C(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_1DDB53D78((int)&v20, a2, v13, v9);
    float v12 = sub_1DDB53C8C(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1DDB53D78((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      unint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      float v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1DDB53C7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DDB53C84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_1DDB53C8C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  double v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1DDA1808C(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      double v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1DDB53D40((uint64_t)v8);
  return v4;
}

void sub_1DDB53D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1DDB53D40(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DDA9E794(a1);
  }
  return a1;
}

uint64_t sub_1DDB53D78(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        sub_1DDA25BB0(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_1DDB53DE8@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0xA8uLL);
  double result = sub_1DDB53E44(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDB53E30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB53E44(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397D450;
  sub_1DDB51464((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1DDB53E8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB53EA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB53EC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D450;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB53F14(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDB53F3C(uint64_t a1)
{
  *(void *)a1 = &unk_1F397D420;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2) {
    sub_1DDA18310(v2);
  }
  uint64_t v5 = (void **)(a1 + 104);
  sub_1DDA9E7E4(&v5);
  uint64_t v5 = (void **)(a1 + 80);
  sub_1DDA9E7E4(&v5);
  uint64_t v5 = (void **)(a1 + 56);
  sub_1DDA9E7E4(&v5);
  uint64_t v5 = (void **)(a1 + 32);
  sub_1DDA9E7E4(&v5);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_1DDA18310(v3);
  }
  return a1;
}

void *sub_1DDB53FDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  return sub_1DDB54458(&v4, a2, a3);
}

double sub_1DDB5400C(uint64_t a1)
{
  (*(void (**)(double **__return_ptr))(*(void *)a1 + 8))(&v6);
  double v1 = -1.0;
  if (v6 != v7)
  {
    uint64_t v2 = v6;
    do
    {
      double v3 = *v2++;
      double v4 = v3;
      if (v3 > v1) {
        double v1 = v4;
      }
    }
    while (v2 != v7);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  return v1;
}

void *sub_1DDB54090@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = a2;
  double result = sub_1DDA24B78(a3, a2);
  if (a2)
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *a3;
    unint64_t v13 = (a3[1] - *a3) >> 3;
    do
    {
      uint64_t v14 = v11 + 16 * v10;
      uint64_t v15 = *(unsigned int *)(v14 + 4);
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(double **)(v14 + 8);
        while (*v17 <= a4)
        {
          ++v16;
          v17 += 3;
          if (v15 == v16)
          {
            LODWORD(v16) = v15;
            break;
          }
        }
      }
      else
      {
        LODWORD(v16) = 0;
      }
      if (v13 <= v10) {
        sub_1DDA24AD0();
      }
      uint64_t v18 = *(void *)(v11 + 16 * v10 + 8) + 24 * (v16 - (v16 == v15));
      *(double *)(v12 + 8 * v10++) = *(double *)(v18 + 8) + *(double *)(v18 + 16) * a4;
    }
    while (v10 != v8);
  }
  return result;
}

void sub_1DDB54178(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB54194(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  double v5 = a4;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(v7 + 4);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(unsigned int **)(v7 + 8);
  while (*v12 < a2)
  {
    ++v11;
    v12 += 4;
    if (v8 == v11)
    {
      LODWORD(v11) = *(_DWORD *)(v7 + 4);
      goto LABEL_7;
    }
  }
  if (*v12 == a2) {
    goto LABEL_11;
  }
LABEL_7:
  if (!v11)
  {
LABEL_10:
    uint64_t v12 = *(unsigned int **)(v7 + 8);
    goto LABEL_11;
  }
  if (v11 == v8)
  {
    uint64_t v12 = (unsigned int *)(*(void *)(v7 + 8) + 16 * (v8 - 1));
LABEL_11:
    unsigned int v13 = *(_DWORD *)v7;
    sub_1DDB54090((uint64_t)v12, v13, a3, a4);
    return;
  }
  uint64_t v14 = (v11 - 1);
  sub_1DDB54090(*(void *)(v7 + 8) + 16 * v14, *(_DWORD *)v7, (uint64_t *)&v28, a4);
  sub_1DDB54090(*(void *)(*(void *)(a1 + 24) + 8) + 16 * v11, **(_DWORD **)(a1 + 24), (uint64_t *)&__p, v5);
  uint64_t v15 = v28;
  uint64_t v16 = (uint64_t)v29;
  unint64_t v17 = ((char *)v29 - (unsigned char *)v28) >> 3;
  if (v17 != (v27 - (unsigned char *)__p) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 8);
  LODWORD(v4) = *(_DWORD *)(v18 + 16 * v14);
  LODWORD(v5) = *(_DWORD *)(v18 + 16 * v11);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_1DDA1808C(a3, v15, v16, v17);
  unint64_t v19 = __p;
  char v20 = (double *)v28;
  char v21 = v29;
  if (v28 != v29)
  {
    uint64_t v22 = (double *)v28;
    int64_t v23 = (double *)__p;
    do
    {
      double v24 = *v23++;
      *uint64_t v22 = *v22 + (*v22 + v24) * (((double)a2 - (double)v4) / ((double)*(unint64_t *)&v5 - (double)v4));
      ++v22;
    }
    while (v22 != v21);
  }
  if (v19)
  {
    unint64_t v27 = v19;
    operator delete(v19);
    char v20 = (double *)v28;
  }
  if (v20)
  {
    float v29 = v20;
    operator delete(v20);
  }
}

void sub_1DDB543A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB543EC(void *a1)
{
  *a1 = &unk_1F3971328;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1DDA18310(v1);
  }

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB54458@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x38uLL);
  double result = sub_1DDB544BC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1DDB544A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB544BC(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397D4E8;
  sub_1DDB545B8(a1 + 3, *a2, a3);
  return a1;
}

void sub_1DDB54508(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB5451C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D4E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB5453C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D4E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB54590(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_1DDB545B8(void *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  *double result = &unk_1F3971328;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *double result = &unk_1F397D4A0;
  result[3] = a2;
  if (!a2 || !*(_DWORD *)(a2 + 4))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDB546A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  *uint64_t v1 = v2;
  double v5 = (std::__shared_weak_count *)v1[2];
  if (v5) {
    sub_1DDA18310(v5);
  }
  _Unwind_Resume(a1);
}

void *sub_1DDB546D0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  return sub_1DDB5516C(&v4, a2, a3);
}

void sub_1DDB54700(uint64_t a1, unsigned int a2, float *a3, unsigned char *a4)
{
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    *a4 = *(unsigned char *)(v4 + 8);
    sub_1DDB54874(a1, a2, &v34);
    char v9 = v34;
    uint64_t v8 = v35;
    if (v34 != v35)
    {
      unint64_t v10 = a3;
      uint64_t v11 = v34;
      do
      {
        double v12 = *v11++;
        float v13 = v12;
        *unint64_t v10 = v13;
        v10 += 4;
      }
      while (v11 != v8);
    }
    sub_1DDB54AFC(a1, a2, &v32);
    if (v9) {
      operator delete(v9);
    }
    uint64_t v15 = v32;
    uint64_t v14 = v33;
    if (v32 != v33)
    {
      uint64_t v16 = a3 + 1;
      unint64_t v17 = v32;
      do
      {
        double v18 = *v17++;
        float v19 = v18;
        *uint64_t v16 = v19;
        v16 += 4;
      }
      while (v17 != v14);
    }
    sub_1DDB54D8C(a1, a2, &v32);
    if (v15) {
      operator delete(v15);
    }
    char v21 = v32;
    char v20 = v33;
    if (v32 != v33)
    {
      uint64_t v22 = a3 + 2;
      int64_t v23 = v32;
      do
      {
        double v24 = *v23++;
        float v25 = v24;
        *uint64_t v22 = v25;
        v22 += 4;
      }
      while (v23 != v20);
    }
    sub_1DDB5501C(a1, (uint64_t *)&v32);
    if (v21) {
      operator delete(v21);
    }
    unint64_t v26 = v32;
    unint64_t v27 = v33;
    if (v32 != v33)
    {
      uint64_t v28 = a3 + 3;
      float v29 = v32;
      do
      {
        double v30 = *v29++;
        float v31 = v30;
        *uint64_t v28 = v31;
        v28 += 4;
      }
      while (v29 != v27);
    }
    if (v26) {
      operator delete(v26);
    }
  }
}

void sub_1DDB54854(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB54874(uint64_t a1@<X0>, unsigned int a2@<W1>, double **a3@<X8>)
{
  sub_1DDA24B78(&__p, **(unsigned int **)(a1 + 8));
  uint64_t v6 = *(unsigned int **)(a1 + 8);
  uint64_t v7 = (unsigned int *)*((void *)v6 + 3);
  unsigned int v8 = v6[1];
  if (!v8) {
    goto LABEL_14;
  }
  int v9 = 0;
  uint64_t v10 = (uint64_t)&v7[4 * v8];
  while (*v7 < a2)
  {
    ++v9;
    v7 += 4;
    if (v8 == v9)
    {
      uint64_t v7 = (unsigned int *)v10;
      goto LABEL_9;
    }
  }
  if (!v9 || *v7 == a2)
  {
LABEL_14:
    uint64_t v18 = *v6;
    double v12 = (double *)__p;
    float v13 = v34;
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = ((char *)v34 - (unsigned char *)__p) >> 3;
      uint64_t v21 = 24 * v18;
      uint64_t v22 = __p;
      while (v20)
      {
        *v22++ = *(void *)(*((void *)v7 + 1) + v19);
        --v20;
        v19 += 24;
        if (v21 == v19) {
          goto LABEL_18;
        }
      }
LABEL_29:
      sub_1DDA24AD0();
    }
    goto LABEL_18;
  }
  if (v8 == v9)
  {
LABEL_9:
    uint64_t v11 = *v6;
    double v12 = (double *)__p;
    float v13 = v34;
    if (v11)
    {
      uint64_t v14 = 0;
      uint64_t v15 = ((char *)v34 - (unsigned char *)__p) >> 3;
      uint64_t v16 = 24 * v11;
      unint64_t v17 = __p;
      while (v15)
      {
        *v17++ = *(void *)(*((void *)v7 - 1) + v14);
        --v15;
        v14 += 24;
        if (v16 == v14) {
          goto LABEL_18;
        }
      }
      goto LABEL_29;
    }
LABEL_18:
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v35;
    return;
  }
  sub_1DDB54874(a1, *(v7 - 4));
  sub_1DDB54874(a1, *v7);
  unint64_t v26 = *a3;
  float v25 = a3[1];
  if ((char *)v25 - (char *)*a3 != v32 - (void)v31)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v26 != v25)
  {
    LODWORD(v23) = *(v7 - 4);
    LODWORD(v24) = *v7;
    double v27 = ((double)a2 - (double)v23) / ((double)v24 - (double)v23);
    uint64_t v28 = v31;
    do
    {
      double v29 = *v28++;
      *unint64_t v26 = *v26 + (v29 - *v26) * v27;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v31) {
    operator delete(v31);
  }
  if (__p)
  {
    float v34 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1DDB54A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  __pa = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = __pa;
    operator delete(__pa);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB54AFC(uint64_t a1@<X0>, unsigned int a2@<W1>, double **a3@<X8>)
{
  sub_1DDA24B78(&__p, **(unsigned int **)(a1 + 8));
  uint64_t v6 = *(unsigned int **)(a1 + 8);
  uint64_t v7 = (unsigned int *)*((void *)v6 + 3);
  unsigned int v8 = v6[1];
  if (!v8) {
    goto LABEL_14;
  }
  int v9 = 0;
  uint64_t v10 = (uint64_t)&v7[4 * v8];
  while (*v7 < a2)
  {
    ++v9;
    v7 += 4;
    if (v8 == v9)
    {
      uint64_t v7 = (unsigned int *)v10;
      goto LABEL_9;
    }
  }
  if (!v9 || *v7 == a2)
  {
LABEL_14:
    uint64_t v18 = *v6;
    double v12 = (double *)__p;
    float v13 = v34;
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = ((char *)v34 - (unsigned char *)__p) >> 3;
      uint64_t v21 = 24 * v18;
      uint64_t v22 = __p;
      while (v20)
      {
        *v22++ = *(void *)(*((void *)v7 + 1) + v19 + 8);
        --v20;
        v19 += 24;
        if (v21 == v19) {
          goto LABEL_18;
        }
      }
LABEL_29:
      sub_1DDA24AD0();
    }
    goto LABEL_18;
  }
  if (v8 == v9)
  {
LABEL_9:
    uint64_t v11 = *v6;
    double v12 = (double *)__p;
    float v13 = v34;
    if (v11)
    {
      uint64_t v14 = 0;
      uint64_t v15 = ((char *)v34 - (unsigned char *)__p) >> 3;
      uint64_t v16 = 24 * v11;
      unint64_t v17 = __p;
      while (v15)
      {
        *v17++ = *(void *)(*((void *)v7 - 1) + v14 + 8);
        --v15;
        v14 += 24;
        if (v16 == v14) {
          goto LABEL_18;
        }
      }
      goto LABEL_29;
    }
LABEL_18:
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v35;
    return;
  }
  sub_1DDB54AFC(a1, *(v7 - 4));
  sub_1DDB54AFC(a1, *v7);
  unint64_t v26 = *a3;
  float v25 = a3[1];
  if ((char *)v25 - (char *)*a3 != v32 - (void)v31)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v26 != v25)
  {
    LODWORD(v23) = *(v7 - 4);
    LODWORD(v24) = *v7;
    double v27 = ((double)a2 - (double)v23) / ((double)v24 - (double)v23);
    uint64_t v28 = v31;
    do
    {
      double v29 = *v28++;
      *unint64_t v26 = *v26 + (v29 - *v26) * v27;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v31) {
    operator delete(v31);
  }
  if (__p)
  {
    float v34 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1DDB54D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  __pa = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = __pa;
    operator delete(__pa);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB54D8C(uint64_t a1@<X0>, unsigned int a2@<W1>, double **a3@<X8>)
{
  sub_1DDA24B78(&__p, **(unsigned int **)(a1 + 8));
  uint64_t v6 = *(unsigned int **)(a1 + 8);
  uint64_t v7 = (unsigned int *)*((void *)v6 + 3);
  unsigned int v8 = v6[1];
  if (!v8) {
    goto LABEL_14;
  }
  int v9 = 0;
  uint64_t v10 = (uint64_t)&v7[4 * v8];
  while (*v7 < a2)
  {
    ++v9;
    v7 += 4;
    if (v8 == v9)
    {
      uint64_t v7 = (unsigned int *)v10;
      goto LABEL_9;
    }
  }
  if (!v9 || *v7 == a2)
  {
LABEL_14:
    uint64_t v18 = *v6;
    double v12 = (double *)__p;
    float v13 = v34;
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = ((char *)v34 - (unsigned char *)__p) >> 3;
      uint64_t v21 = 24 * v18;
      uint64_t v22 = __p;
      while (v20)
      {
        *v22++ = *(void *)(*((void *)v7 + 1) + v19 + 16);
        --v20;
        v19 += 24;
        if (v21 == v19) {
          goto LABEL_18;
        }
      }
LABEL_29:
      sub_1DDA24AD0();
    }
    goto LABEL_18;
  }
  if (v8 == v9)
  {
LABEL_9:
    uint64_t v11 = *v6;
    double v12 = (double *)__p;
    float v13 = v34;
    if (v11)
    {
      uint64_t v14 = 0;
      uint64_t v15 = ((char *)v34 - (unsigned char *)__p) >> 3;
      uint64_t v16 = 24 * v11;
      unint64_t v17 = __p;
      while (v15)
      {
        *v17++ = *(void *)(*((void *)v7 - 1) + v14 + 16);
        --v15;
        v14 += 24;
        if (v16 == v14) {
          goto LABEL_18;
        }
      }
      goto LABEL_29;
    }
LABEL_18:
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v35;
    return;
  }
  sub_1DDB54D8C(a1, *(v7 - 4));
  sub_1DDB54D8C(a1, *v7);
  unint64_t v26 = *a3;
  float v25 = a3[1];
  if ((char *)v25 - (char *)*a3 != v32 - (void)v31)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v26 != v25)
  {
    LODWORD(v23) = *(v7 - 4);
    LODWORD(v24) = *v7;
    double v27 = ((double)a2 - (double)v23) / ((double)v24 - (double)v23);
    uint64_t v28 = v31;
    do
    {
      double v29 = *v28++;
      *unint64_t v26 = *v26 + (v29 - *v26) * v27;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v31) {
    operator delete(v31);
  }
  if (__p)
  {
    float v34 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1DDB54FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  __pa = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = __pa;
    operator delete(__pa);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB5501C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1DDA24B78(a2, **(unsigned int **)(a1 + 8));
  double v5 = *(unsigned int **)(a1 + 8);
  uint64_t v6 = *v5;
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a2;
    uint64_t v9 = (a2[1] - *a2) >> 3;
    do
    {
      if (v9 == v7) {
        sub_1DDA24AD0();
      }
      double result = *(double *)(*((void *)v5 + 2) + 8 * v7);
      *(double *)(v8 + 8 * v7++) = result;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_1DDB55098(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDB550B4(void *a1)
{
  *a1 = &unk_1F397D538;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_1DDA18310(v2);
  }
  return a1;
}

void sub_1DDB55100(void *a1)
{
  *a1 = &unk_1F397D538;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_1DDA18310(v1);
  }

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB5516C@<X0>(uint64_t *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  double result = operator new(0x38uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = &unk_1F397D570;
  uint64_t v7 = *a1;
  result[3] = &unk_1F397D538;
  result[4] = v7;
  uint64_t v8 = a2[1];
  result[5] = *a2;
  result[6] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *a3 = result + 3;
  a3[1] = result;
  return result;
}

void sub_1DDB55204(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB55224(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D570;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB55278(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void *sub_1DDB552A0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  return sub_1DDB55704(&v4, a2, a3);
}

void *sub_1DDB552D0@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = a2;
  double result = sub_1DDA24B78(a3, a2);
  if (a2)
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *a3;
    unint64_t v13 = (a3[1] - *a3) >> 3;
    do
    {
      uint64_t v14 = v11 + 16 * v10;
      uint64_t v15 = *(unsigned int *)(v14 + 4);
      if (v15)
      {
        uint64_t v16 = 0;
        unint64_t v17 = *(double **)(v14 + 8);
        while (*v17 <= a4)
        {
          ++v16;
          v17 += 3;
          if (v15 == v16)
          {
            LODWORD(v16) = v15;
            break;
          }
        }
      }
      else
      {
        LODWORD(v16) = 0;
      }
      if (v13 <= v10) {
        sub_1DDA24AD0();
      }
      *(double *)(v12 + 8 * v10) = *(double *)(*(void *)(v11 + 16 * v10 + 8)
                                             + 24 * (v16 - (v16 == v15))
                                             + 8)
                                 + *(double *)(*(void *)(v11 + 16 * v10 + 8)
                                             + 24 * (v16 - (v16 == v15))
                                             + 16)
                                 * fmin(a4, *(double *)(*(void *)(v11 + 16 * v10 + 8) + 24 * (v15 - 1)));
      ++v10;
    }
    while (v10 != v8);
  }
  return result;
}

void sub_1DDB553C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB553E4(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  double v7 = a4;
  uint64_t v8 = *(unsigned int *)(v6 + 4);
  if (!v8) {
    goto LABEL_11;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(unsigned int **)(v6 + 8);
  while (*v12 < a2)
  {
    ++v11;
    v12 += 4;
    if (v8 == v11)
    {
      LODWORD(v11) = *(_DWORD *)(v6 + 4);
      goto LABEL_8;
    }
  }
  if (*v12 == a2) {
    goto LABEL_12;
  }
LABEL_8:
  if (!v11)
  {
LABEL_11:
    uint64_t v12 = *(unsigned int **)(v6 + 8);
    goto LABEL_12;
  }
  if (v11 == v8)
  {
    uint64_t v12 = (unsigned int *)(*(void *)(v6 + 8) + 16 * (v8 - 1));
LABEL_12:
    unsigned int v13 = *(_DWORD *)v6;
    sub_1DDB552D0((uint64_t)v12, v13, a3, a4);
    return;
  }
  uint64_t v14 = (v11 - 1);
  sub_1DDB552D0(*(void *)(v6 + 8) + 16 * v14, *(_DWORD *)v6, (uint64_t *)&v28, a4);
  sub_1DDB552D0(*(void *)(*(void *)(a1 + 8) + 8) + 16 * v11, **(_DWORD **)(a1 + 8), (uint64_t *)&__p, v7);
  uint64_t v15 = v28;
  uint64_t v16 = (uint64_t)v29;
  unint64_t v17 = ((char *)v29 - (unsigned char *)v28) >> 3;
  if (v17 != (v27 - (unsigned char *)__p) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v18 = *(void *)(*(void *)(a1 + 8) + 8);
  LODWORD(v4) = *(_DWORD *)(v18 + 16 * v14);
  LODWORD(v7) = *(_DWORD *)(v18 + 16 * v11);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_1DDA1808C(a3, v15, v16, v17);
  uint64_t v19 = __p;
  uint64_t v20 = (double *)v28;
  uint64_t v21 = v29;
  if (v28 != v29)
  {
    uint64_t v22 = (double *)v28;
    unint64_t v23 = (double *)__p;
    do
    {
      double v24 = *v23++;
      *uint64_t v22 = *v22 + (*v22 + v24) * (((double)a2 - (double)v4) / ((double)*(unint64_t *)&v7 - (double)v4));
      ++v22;
    }
    while (v22 != v21);
  }
  if (v19)
  {
    double v27 = v19;
    operator delete(v19);
    uint64_t v20 = (double *)v28;
  }
  if (v20)
  {
    double v29 = v20;
    operator delete(v20);
  }
}

void sub_1DDB55604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDB5564C(void *a1)
{
  *a1 = &unk_1F397D5C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_1DDA18310(v2);
  }
  return a1;
}

void sub_1DDB55698(void *a1)
{
  *a1 = &unk_1F397D5C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_1DDA18310(v1);
  }

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB55704@<X0>(uint64_t *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  double result = operator new(0x38uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = &unk_1F397D5F8;
  uint64_t v7 = *a1;
  result[3] = &unk_1F397D5C0;
  result[4] = v7;
  uint64_t v8 = a2[1];
  result[5] = *a2;
  result[6] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *a3 = result + 3;
  a3[1] = result;
  return result;
}

void sub_1DDB5579C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D5F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB557BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D5F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB55810(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

uint64_t sub_1DDB55838(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  *(void *)a1 = &unk_1F397D648;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 24) = 0x80000000800;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 520))(v5);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 32) = v7;
  int v9 = *(_DWORD *)(a1 + 24);
  int v8 = *(_DWORD *)(a1 + 28);
  int v10 = (v9 + (int)v7 - 1) / v9;
  int v11 = (HIDWORD(v7) + v8 - 1) / v8;
  *(_DWORD *)(a1 + 40) = v10;
  *(_DWORD *)(a1 + 44) = v11;
  unint64_t v12 = (v11 * v10);
  *(_DWORD *)(a1 + 48) = v12;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 68) = 0;
  *(void *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = *a3;
  if ((v9 - 10000) < 0xFFFFD8F1
    || (v8 - 10000) <= 0xFFFFD8F0
    || (v7 - 100000) < 0xFFFE7961
    || (HIDWORD(v7) - 100000) < 0xFFFE7961)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDB55A7C(a1 + 56, v12);
  return a1;
}

void sub_1DDB55A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = *(std::__shared_weak_count **)(v10 + 16);
  if (v12) {
    sub_1DDA18310(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB55A7C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_1DDB566DC((void **)a1, a2 - v2);
  }
}

void *sub_1DDB55AAC@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  return sub_1DDB56948(a1, a2, a3);
}

void sub_1DDB55AD8(uint64_t a1, uint64_t *a2)
{
  int v4 = sub_1DDB4E724();
  sub_1DDB55C80(a1, v4);
  long long v13 = *(_OWORD *)(*a2 + 48);
  sub_1DDB55CFC(a1, (int *)&v13, (char *)&v14);
  int v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  sub_1DDA1D984(&__p, v14, (uint64_t)v15, (v15 - (unsigned char *)v14) >> 2);
  sub_1DDB560F0((uint64_t *)a1, (unsigned int **)&__p, (uint64_t *)&v13);
  if (__p)
  {
    int v11 = __p;
    operator delete(__p);
  }
  for (unint64_t i = (void *)v13; i != *((void **)&v13 + 1); i += 2)
  {
    *(void *)&long long v9 = *i;
    uint64_t v6 = i[1];
    *((void *)&v9 + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1DDB4EE3C(*a2, &v9);
    if (*((void *)&v9 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  int v8 = *(char **)(a1 + 104);
  uint64_t v7 = *(char **)(a1 + 112);
  if (*(_DWORD *)(a1 + 48) == (v7 - v8) >> 4)
  {
    while (v8 != v7)
    {
      if (!*(void *)v8) {
        goto LABEL_14;
      }
      v8 += 16;
    }
    sub_1DDA2D924(*(void *)(a1 + 8));
  }
LABEL_14:
  *(void *)&long long v9 = &v13;
  sub_1DDA18270((void ***)&v9);
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
}

void sub_1DDB55C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  a10 = &a15;
  sub_1DDA18270((void ***)&a10);
  unint64_t v17 = *(void **)(v15 - 56);
  if (v17)
  {
    *(void *)(v15 - 48) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB55C80(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 52);
  if (v2 != a2 && v2 != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_DWORD *)(result + 52) = a2;
  return result;
}

void sub_1DDB55CE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB55CFC(uint64_t a1@<X0>, int *a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  BOOL v8 = v6 >= 0x8000 || v7 >= 0x8000;
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  int v13 = !v8 && v9 < 0x8000 && v10 < 0x8000;
  unint64_t v14 = (v7 << 32) + (v6 << 48) + (v9 << 16) + v10;
  unint64_t v48 = v14;
  if (v13 != 1) {
    goto LABEL_25;
  }
  uint64_t v15 = *(void **)(a1 + 88);
  if (!v15) {
    goto LABEL_25;
  }
  uint64_t v16 = (void *)(a1 + 88);
  do
  {
    unint64_t v17 = v15[4];
    BOOL v18 = v17 >= v14;
    if (v17 >= v14) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = v15 + 1;
    }
    if (v18) {
      uint64_t v16 = v15;
    }
    uint64_t v15 = (void *)*v19;
  }
  while (*v19);
  if (v16 != (void *)(a1 + 88) && v14 >= v16[4])
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    BOOL v41 = (const void *)v16[5];
    uint64_t v42 = v16[6];
    sub_1DDA1D984(a3, v41, v42, (v42 - (uint64_t)v41) >> 2);
  }
  else
  {
LABEL_25:
    double v46 = 0;
    uint64_t v47 = *(void *)(a1 + 32);
    if (!sub_1DDB56B24(a2, (int *)&v46))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    unsigned int v20 = *(_DWORD *)(a1 + 40);
    sub_1DDA490A4((void **)a3, *(unsigned int *)(a1 + 48));
    if (*(_DWORD *)(a1 + 44))
    {
      unsigned int v21 = 0;
      char v45 = 0;
      char v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      do
      {
        if (v23 >= v20)
        {
          uint64_t v24 = v23;
        }
        else
        {
          while (1)
          {
            unsigned int v25 = v23 + *(_DWORD *)(a1 + 40) * v21;
            unint64_t v26 = (uint64_t *)sub_1DDB56468(a1, v25);
            double v46 = (unint64_t *)v26;
            uint64_t v47 = v27;
            if (a2[2] + *a2 <= (int)v26) {
              break;
            }
            int v28 = a2[1];
            if (v28 >= HIDWORD(v27) + HIDWORD(v26)) {
              goto LABEL_60;
            }
            if (a2[3] + v28 <= SHIDWORD(v26))
            {
              unsigned int v21 = *(_DWORD *)(a1 + 44);
              goto LABEL_60;
            }
            if (v22) {
              uint64_t v24 = v24;
            }
            else {
              uint64_t v24 = v23;
            }
            if (sub_1DDB56B98((int *)&v46, a2))
            {
              double v30 = (unsigned int *)*((void *)a3 + 1);
              unint64_t v29 = *((void *)a3 + 2);
              if ((unint64_t)v30 >= v29)
              {
                uint64_t v32 = *(unsigned int **)a3;
                uint64_t v33 = ((uint64_t)v30 - *(void *)a3) >> 2;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62) {
                  sub_1DDA17F78();
                }
                uint64_t v35 = v29 - (void)v32;
                if (v35 >> 1 > v34) {
                  unint64_t v34 = v35 >> 1;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  float v37 = (char *)sub_1DDA17F90((uint64_t)(a3 + 16), v36);
                  uint64_t v32 = *(unsigned int **)a3;
                  double v30 = (unsigned int *)*((void *)a3 + 1);
                }
                else
                {
                  float v37 = 0;
                }
                float v38 = (unsigned int *)&v37[4 * v33];
                *float v38 = v25;
                float v31 = v38 + 1;
                while (v30 != v32)
                {
                  unsigned int v39 = *--v30;
                  *--float v38 = v39;
                }
                *(void *)a3 = v38;
                *((void *)a3 + 1) = v31;
                *((void *)a3 + 2) = &v37[4 * v36];
                if (v32) {
                  operator delete(v32);
                }
              }
              else
              {
                *double v30 = v25;
                float v31 = v30 + 1;
              }
              *((void *)a3 + 1) = v31;
            }
            LODWORD(v23) = v23 + 1;
            char v22 = 1;
            if (v23 == v20) {
              goto LABEL_60;
            }
          }
          if ((v45 & 1) == 0) {
            unsigned int v20 = v23;
          }
          char v45 = 1;
        }
LABEL_60:
        ++v21;
        uint64_t v23 = v24;
      }
      while (v21 < *(_DWORD *)(a1 + 44));
    }
    if (*((void *)a3 + 1) == *(void *)a3)
    {
      double v44 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v44, "RawCameraException");
      __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v13 && *(void *)(a1 + 96) <= 0x3FFuLL)
    {
      double v46 = &v48;
      double v40 = (char *)(sub_1DDACB754((uint64_t **)(a1 + 80), &v48, (uint64_t)&unk_1DDBFB044, (uint64_t **)&v46) + 5);
      if (v40 != a3) {
        sub_1DDA17E28(v40, *(char **)a3, *((void *)a3 + 1), (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 2);
      }
    }
  }
}

void sub_1DDB560AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB560F0(uint64_t *a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  memset(v16, 0, sizeof(v16));
  uint64_t v5 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v7 = a1 + 13;
    do
    {
      uint64_t v8 = *v5;
      uint64_t v9 = a1[13];
      unint64_t v10 = (v8 + 1);
      if (v10 > (a1[14] - v9) >> 4)
      {
        long long v15 = 0uLL;
        sub_1DDB5627C(a1 + 13, v10, &v15);
        if (*((void *)&v15 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v15 + 1));
        }
        uint64_t v9 = *v7;
      }
      long long v11 = *(_OWORD *)(v9 + 16 * v8);
      long long v15 = v11;
      if (*((void *)&v11 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (!(void)v11)
      {
        sub_1DDB5630C((uint64_t)a1, v8, &v14);
        long long v12 = v14;
        long long v14 = 0uLL;
        int v13 = (std::__shared_weak_count *)*((void *)&v15 + 1);
        long long v15 = v12;
        if (v13)
        {
          sub_1DDA18310(v13);
          if (*((void *)&v14 + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&v14 + 1));
          }
        }
        sub_1DDB4E72C(v16, &v15);
      }
      sub_1DDB4E72C(a3, &v15);
      if (*((void *)&v15 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v15 + 1));
      }
      ++v5;
    }
    while (v5 != a2[1]);
  }
  sub_1DDB563A4(a1[1]);
  *(void *)&long long v15 = v16;
  sub_1DDA18270((void ***)&v15);
}

void sub_1DDB56238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy((va_list)v4, va1);
  sub_1DDA18270((void ***)va);
  sub_1DDA18270((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_1DDB5627C(uint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v7 = *a1 + 16 * a2;
      while (v4 != v7)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v4 - 8);
        if (v8) {
          sub_1DDA18310(v8);
        }
        v4 -= 16;
      }
      a1[1] = v7;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    sub_1DDB567FC(a1, v6, a3);
  }
}

void sub_1DDB5630C(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  *(void *)&long long v13 = sub_1DDB56468(a1, a2);
  *((void *)&v13 + 1) = v6;
  int v7 = sub_1DDB56630(a1);
  sub_1DDB4F2E8(&v13, v7, a3);
  uint64_t v8 = *a3;
  *(_DWORD *)(*a3 + 48) = a2;
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v10 = a3[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v9 + 16 * a2) = v8;
  uint64_t v11 = v9 + 16 * a2;
  long long v12 = *(std::__shared_weak_count **)(v11 + 8);
  *(void *)(v11 + 8) = v10;
  if (v12) {
    sub_1DDA18310(v12);
  }
}

uint64_t sub_1DDB563A4(uint64_t a1)
{
  (*(void (**)(uint64_t (****__return_ptr)(void)))(*(void *)a1 + 2720))(&v3);
  uint64_t v1 = (**v3)();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB56450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB56468(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = a2;
  if (a2 >= (unint64_t)((*(void *)(a1 + 64) - v2) >> 4)) {
    goto LABEL_29;
  }
  uint64_t v6 = (_DWORD *)(v2 + 16 * a2);
  if (v6[2] && v6[3]) {
    return *(void *)v6;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  int v9 = a2 / v8;
  int v10 = a2 / v8 * v8;
  int v11 = a2 % v8;
  if (a2 % v8 >= v8)
  {
LABEL_29:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    goto LABEL_32;
  }
  sub_1DDA18218(&v28, *(_DWORD *)(a1 + 24) * v11, *(_DWORD *)(a1 + 28) * v9);
  uint64_t v12 = v29;
  int v13 = *(_DWORD *)(a1 + 24);
  int v14 = *(_DWORD *)(a1 + 28);
  int v15 = *(_DWORD *)(a1 + 32);
  int v16 = *(_DWORD *)(a1 + 36);
  if ((int)(v13 + v28) > v15) {
    int v13 = v15 - v28;
  }
  if ((int)(v14 + v29) > v16) {
    int v14 = v16 - v29;
  }
  int v18 = *(_DWORD *)(a1 + 128);
  int v17 = *(_DWORD *)(a1 + 132);
  if (v11 == v8 - 1) {
    int v19 = *(_DWORD *)(a1 + 128);
  }
  else {
    int v19 = 0;
  }
  unsigned int v20 = v13 - v19;
  LODWORD(v21) = v18 + v13;
  if (a2 == v10) {
    uint64_t v22 = v28;
  }
  else {
    uint64_t v22 = v18 + v28;
  }
  if (a2 == v10) {
    uint64_t v21 = v21;
  }
  else {
    uint64_t v21 = v20;
  }
  if (v8 <= a2)
  {
    uint64_t v12 = v17 + v29;
    if (v9 != *(_DWORD *)(a1 + 44) - 1) {
      int v17 = 0;
    }
    uint64_t v23 = (v14 - v17);
  }
  else
  {
    uint64_t v23 = (v17 + v14);
  }
  if ((int)v21 < 1 || (int)v23 <= 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
LABEL_32:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v25 = v21 | (v23 << 32);
  unint64_t v26 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v3);
  uint64_t result = v22 | (v12 << 32);
  *unint64_t v26 = result;
  v26[1] = v25;
  return result;
}

void sub_1DDB56614(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB56630(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 52);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDB5668C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB566A4(uint64_t a1)
{
  sub_1DDB56AA4(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDB566DC(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_1DDA17F78();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)sub_1DDA19838(v4, v12);
    }
    else {
      int v13 = 0;
    }
    int v14 = &v13[16 * v10];
    int v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    int v16 = &v14[16 * a2];
    int v18 = (char *)*a1;
    int v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      int v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void **sub_1DDB567FC(uint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v7 = v8;
  unint64_t v9 = *(result - 1);
  if (a2 <= (v8 - (uint64_t)v9) >> 4)
  {
    if (a2)
    {
      int v16 = &v9[2 * a2];
      do
      {
        *unint64_t v9 = *a3;
        uint64_t v17 = a3[1];
        v9[1] = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        v9 += 2;
      }
      while (v9 != v16);
      unint64_t v9 = v16;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    uint64_t v10 = (uint64_t)v9 - *a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      sub_1DDA17F78();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - *a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    v21[4] = result;
    if (v14) {
      int v15 = (char *)sub_1DDA19838((uint64_t)result, v14);
    }
    else {
      int v15 = 0;
    }
    int v18 = &v15[16 * v12];
    v21[0] = v15;
    v21[1] = v18;
    v21[3] = &v15[16 * v14];
    int v19 = &v18[16 * a2];
    do
    {
      *(void *)int v18 = *a3;
      uint64_t v20 = a3[1];
      *((void *)v18 + 1) = v20;
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      v18 += 16;
    }
    while (v18 != v19);
    v21[2] = v19;
    sub_1DDB4EFC4(a1, v21);
    return sub_1DDA49898(v21);
  }
  return result;
}

void sub_1DDB56934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA49898((void **)va);
  _Unwind_Resume(a1);
}

void *sub_1DDB56948@<X0>(uint64_t *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xA0uLL);
  uint64_t result = sub_1DDB569AC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1DDB56998(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB569AC(void *a1, uint64_t *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397D678;
  sub_1DDB55838((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1DDB569F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB56A08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB56A28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D678;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB56A7C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDB56AA4(uint64_t a1)
{
  *(void *)a1 = &unk_1F397D648;
  unint64_t v5 = (void **)(a1 + 104);
  sub_1DDA18270(&v5);
  sub_1DDA24F4C(a1 + 80, *(void **)(a1 + 88));
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_1DDA18310(v3);
  }
  return a1;
}

BOOL sub_1DDB56B24(int *a1, int *a2)
{
  int v2 = *a2;
  int v3 = *a1;
  if (*a2 > *a1) {
    return 0;
  }
  int v4 = a2[2] + v2;
  if (v3 > v4) {
    return 0;
  }
  int v5 = a1[2] + v3;
  if (v2 > v5 || v5 > v4) {
    return 0;
  }
  int v7 = a2[1];
  int v8 = a1[1];
  if (v7 > v8) {
    return 0;
  }
  int v9 = a2[3] + v7;
  if (v8 > v9) {
    return 0;
  }
  int v11 = a1[3] + v8;
  return v7 <= v11 && v11 <= v9;
}

uint64_t sub_1DDB56B98(int *a1, int *a2)
{
  int v2 = a1[2];
  if (v2 < 1) {
    return 0;
  }
  int v3 = a2[2];
  if (v3 < 1) {
    return 0;
  }
  int v4 = a1[3];
  if (v4 < 1) {
    return 0;
  }
  int v5 = a2[3];
  if (v5 < 1) {
    return 0;
  }
  int v6 = *a1;
  int v7 = *a2;
  if (*a1 >= *a2)
  {
    if (v7 + v3 <= v6) {
      return 0;
    }
  }
  else if (v6 + v2 <= v7)
  {
    return 0;
  }
  int v8 = a1[1];
  int v9 = a2[1];
  if (v8 >= v9)
  {
    if (v9 + v5 <= v8) {
      return 0;
    }
  }
  else if (v8 + v4 <= v9)
  {
    return 0;
  }
  return 1;
}

id sub_1DDB56C2C(int a1)
{
  v24[3] = *MEMORY[0x1E4F143B8];
  if (qword_1EAB91238 != -1) {
    dispatch_once(&qword_1EAB91238, &unk_1F397D6B8);
  }
  id v2 = (id)qword_1EAB91228[a1];
  objc_sync_enter(v2);
  if (objc_msgSend_count(v2, v3, v4, v5, v6))
  {
    int v11 = objc_msgSend_firstObject(v2, v7, v8, v9, v10);
    objc_msgSend_removeObjectAtIndex_(v2, v12, 0, v13, v14);
  }
  else
  {
    v23[0] = *MEMORY[0x1E4F1E208];
    v23[1] = @"kCIContextUseMetalRenderer";
    int v15 = (void *)MEMORY[0x1E4F1E018];
    v24[0] = @"RawCamera-Internal-Context";
    v24[1] = MEMORY[0x1E4F1CC38];
    v23[2] = *MEMORY[0x1E4F1E248];
    int v16 = objc_msgSend_numberWithInt_(NSNumber, v7, *MEMORY[0x1E4F1E300], v9, v10);
    v24[2] = v16;
    int v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v17, (uint64_t)v24, (uint64_t)v23, 3);
    int v11 = objc_msgSend_contextWithOptions_(v15, v19, (uint64_t)v18, v20, v21);
  }
  objc_sync_exit(v2);

  return v11;
}

void sub_1DDB56DD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB56E10()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)qword_1EAB91228;
  qword_1EAB91228 = v0;

  qword_1EAB91230 = objc_opt_new();

  return MEMORY[0x1F41817F8]();
}

void sub_1DDB56E6C(void *a1, int a2)
{
  id v11 = a1;
  id v3 = (id)qword_1EAB91228[a2];
  objc_sync_enter(v3);
  if ((unint64_t)objc_msgSend_count(v3, v4, v5, v6, v7) <= 4) {
    objc_msgSend_addObject_(v3, v8, (uint64_t)v11, v9, v10);
  }
  objc_sync_exit(v3);
}

void sub_1DDB56EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void *sub_1DDB56F1C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1DDB57BF0(a1, a2);
}

id sub_1DDB56F44(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = (dispatch_once_t *)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1DDB56FE0;
  block[3] = &unk_1E6D04A58;
  block[4] = a1;
  if (v3 != -1) {
    dispatch_once(v2, block);
  }
  uint64_t v4 = *(void **)(a1 + 24);

  return v4;
}

void sub_1DDB56FE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1DDB57070(v1, &v4);
  uint64_t v2 = sub_1DDACAB90(v4, 1);
  uint64_t v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = v2;

  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDB5703C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  __cxa_begin_catch(a1);
  uint64_t v12 = *(void **)(v10 + 24);
  *(void *)(v10 + 24) = 0;

  __cxa_end_catch();
  JUMPOUT(0x1DDB5702CLL);
}

uint64_t sub_1DDB57070@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = *(void *)(result + 16);
  *a2 = v2;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1DDB570E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB570F8(uint64_t a1, unsigned int ***a2)
{
  v137[1] = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB91248, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EAB91248))
  {
    byte_1EAB91240 = getenv("RAWCAMERA_ENABLE_INFO_OVERLAY") != 0;
    __cxa_guard_release(&qword_1EAB91248);
  }
  uint64_t v3 = (void *)MEMORY[0x1E01C4510]();
  if (*a2 != a2[1])
  {
    context = v3;
    int v122 = *MEMORY[0x1E4F1E300];
    if ((**a2)[11] == 16) {
      unsigned int v4 = *MEMORY[0x1E4F1E300];
    }
    else {
      unsigned int v4 = *MEMORY[0x1E4F1E2F0];
    }
    unsigned int v124 = v4;
    sub_1DDB57070(a1, &dest);
    int v5 = sub_1DDA2E598((uint64_t)dest.data);
    vImagePixelCount height = dest.height;
    if (dest.height) {
      sub_1DDA18310((std::__shared_weak_count *)dest.height);
    }
    if (v5)
    {
      if (v5 != 3) {
        goto LABEL_16;
      }
      sub_1DDB57070(a1, &dest);
      int v7 = sub_1DDA2E5A0((uint64_t)dest.data);
      if (dest.height) {
        sub_1DDA18310((std::__shared_weak_count *)dest.height);
      }
      if (v7 == 3)
      {
        CFTypeRef v123 = sub_1DDBEE718();
        unsigned int v124 = *MEMORY[0x1E4F1E290];
LABEL_17:
        uint64_t v8 = sub_1DDB56F44(a1);
        double v9 = *MEMORY[0x1E4F1DAD8];
        double v10 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
        float v130 = sub_1DDB56C2C(0);
        id v11 = *a2;
        float v121 = a2[1];
        if (*a2 != v121)
        {
          do
          {
            spid = v8;
            uint64_t v12 = sub_1DDA83DFC();
            uint64_t v13 = v12;
            if ((unint64_t)v8 + 1 >= 2 && os_signpost_enabled(v12))
            {
              objc_msgSend_stringWithFormat_(NSString, v109, @"{{%d, %d}, {%d, %d}}", v110, v111, *(void *)(*v11 + 7), HIDWORD(*(void *)(*v11 + 7)), *(void *)(*v11 + 9), HIDWORD(*(void *)(*v11 + 9)));
              id v112 = objc_claimAutoreleasedReturnValue();
              double v117 = objc_msgSend_UTF8String(v112, v113, v114, v115, v116);
              LODWORD(dest.data) = 136315138;
              *(void **)((char *)&dest.data + 4) = v117;
              _os_signpost_emit_with_name_impl(&dword_1DDA14000, v13, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)spid, "renderToBlock", "%s", (uint8_t *)&dest, 0xCu);
            }
            v134[0] = MEMORY[0x1E4F143A8];
            v134[1] = 3221225472;
            v134[2] = sub_1DDB57A2C;
            v134[3] = &unk_1E6D05518;
            v134[4] = spid;
            v134[5] = v11;
            float v129 = (void (**)(void))MEMORY[0x1E01C46E0](v134);
            uint64_t v14 = *(void *)(*v11 + 7);
            uint64_t v15 = *(void *)(*v11 + 9);
            unsigned int v128 = sub_1DDB4F5B4(*v11);
            uint64_t v8 = spid;
            uint64_t v20 = (void *)(*(uint64_t (**)(unsigned int *, void))(*(void *)*v11 + 8))(*v11, 0);
            if (byte_1EAB91240)
            {
              uint64_t v21 = NSString;
              sub_1DDB57070(a1, &dest);
              int v22 = sub_1DDA2E5A0((uint64_t)dest.data);
              uint64_t v23 = sub_1DDB10E40(v22);
              float v127 = objc_msgSend_stringWithFormat_(v21, v24, @"Requested Sushi Mode : %@", v25, v26, v23);

              if (dest.height) {
                sub_1DDA18310((std::__shared_weak_count *)dest.height);
              }
              uint64_t v27 = NSString;
              sub_1DDB57070(a1, &dest);
              int v28 = sub_1DDA2E598((uint64_t)dest.data);
              unsigned int v29 = sub_1DDB10E40(v28);
              float v126 = objc_msgSend_stringWithFormat_(v27, v30, @"Sushi Mode : %@", v31, v32, v29);

              if (dest.height) {
                sub_1DDA18310((std::__shared_weak_count *)dest.height);
              }
              uint64_t v33 = NSString;
              sub_1DDB57070(a1, &dest);
              int v133 = (*(uint64_t (**)(void *))(*(void *)dest.data + 120))(dest.data);
              unint64_t v34 = sub_1DDA4C49C(&v133);
              float v125 = objc_msgSend_stringWithFormat_(v33, v35, @"Version : %@", v36, v37, v34);

              if (dest.height) {
                sub_1DDA18310((std::__shared_weak_count *)dest.height);
              }
              BOOL v41 = objc_msgSend_stringWithFormat_(NSString, v38, @" %@ \n %@ \n %@ ", v39, v40, v127, v126, v125);
              uint64_t v42 = (void *)MEMORY[0x1E4F1E040];
              float v136 = @"inputText";
              v137[0] = v41;
              double v44 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v43, (uint64_t)v137, (uint64_t)&v136, 1);
              uint64_t v47 = objc_msgSend_filterWithName_withInputParameters_(v42, v45, @"CITextImageGenerator", (uint64_t)v44, v46);

              objc_msgSend_extent(spid, v48, v49, v50, v51);
              double v53 = v52;
              double v58 = objc_msgSend_outputImage(v47, v54, v55, v56, v57);
              objc_msgSend_extent(v58, v59, v60, v61, v62);
              double v64 = v63;

              double v69 = objc_msgSend_numberWithDouble_(NSNumber, v65, v66, v67, v68, v53 * 0.25 / v64);
              objc_msgSend_setValue_forKey_(v47, v70, (uint64_t)v69, @"inputScaleFactor", v71);

              uint64_t v76 = objc_msgSend_whiteImage(MEMORY[0x1E4F1E050], v72, v73, v74, v75);
              uint64_t v81 = objc_msgSend_outputImage(v47, v77, v78, v79, v80);
              objc_msgSend_extent(v81, v82, v83, v84, v85);
              double v90 = objc_msgSend_imageByCroppingToRect_(v76, v86, v87, v88, v89);

              float v95 = objc_msgSend_outputImage(v47, v91, v92, v93, v94);
              uint64_t v99 = objc_msgSend_imageByCompositingOverImage_(v95, v96, (uint64_t)v90, v97, v98);

              uint64_t v8 = objc_msgSend_imageByCompositingOverImage_(v99, v100, (uint64_t)spid, v101, v102);
            }
            objc_msgSend_extent(v8, v16, v17, v18, v19);
            objc_msgSend_render_toBitmap_rowBytes_bounds_format_colorSpace_(v130, v104, (uint64_t)v8, (uint64_t)v20, v128, v124, v123, (double)(int)v14 - v9, v103 - (double)SHIDWORD(v14) - (double)SHIDWORD(v15) - v10, (double)(int)v15);
            if (v124 == v122)
            {
              dest.int data = v20;
              dest.vImagePixelCount height = v15 >> 32;
              dest.CGFloat width = 4 * (int)v15;
              dest.rowBytes = v128;
              vImageConvert_16Fto16U(&dest, &dest, 0);
            }
            objc_msgSend_clearCaches(v130, v105, v106, v107, v108);
            v129[2](v129);

            v11 += 2;
          }
          while (v11 != v121);
        }
        sub_1DDB56E6C(v130, 0);

        uint64_t v3 = context;
        goto LABEL_34;
      }
      sub_1DDB57070(a1, &dest);
      BOOL v119 = sub_1DDA2E5A8((uint64_t)dest.data);
      vImagePixelCount height = dest.height;
      if (dest.height) {
        sub_1DDA18310((std::__shared_weak_count *)dest.height);
      }
      if (!v119)
      {
LABEL_16:
        CFTypeRef v123 = (CFTypeRef)sub_1DDBEE610(height);
        goto LABEL_17;
      }
    }
    sub_1DDB57070(a1, &dest);
    CFTypeRef v123 = sub_1DDA2E5C8((uint64_t)dest.data);
    if (dest.height) {
      sub_1DDA18310((std::__shared_weak_count *)dest.height);
    }
    goto LABEL_17;
  }
LABEL_34:
  return 1;
}

void sub_1DDB5785C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v31 = *(std::__shared_weak_count **)(v29 - 184);
  if (v31) {
    sub_1DDA18310(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB57A2C(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA83DFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    objc_msgSend_stringWithFormat_(NSString, v5, @"{{%d, %d}, {%d, %d}}", v6, v7, *(void *)(**(void **)(a1 + 40) + 28), HIDWORD(*(void *)(**(void **)(a1 + 40) + 28)), *(void *)(**(void **)(a1 + 40) + 36), HIDWORD(*(void *)(**(void **)(a1 + 40) + 36)));
    id v8 = objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136315138;
    uint64_t v14 = objc_msgSend_UTF8String(v8, v9, v10, v11, v12);
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "renderToBlock", "%s", buf, 0xCu);
  }
}

void sub_1DDB57B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB57B64(uint64_t a1)
{
  sub_1DDB57B9C(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB57B9C(uint64_t a1)
{
  *(void *)a1 = &unk_1F397D6E8;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_1DDA18310(v2);
  }
  return a1;
}

void *sub_1DDB57BF0@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x40uLL);
  uint64_t result = sub_1DDB57C4C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDB57C38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB57C4C(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397D720;
  sub_1DDB57D44(a1 + 3, a2);
  return a1;
}

void sub_1DDB57C94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB57CA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB57CC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D720;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB57D1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void *sub_1DDB57D44(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  *uint64_t result = &unk_1F397D6E8;
  result[1] = v2;
  result[2] = v3;
  if (v3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    uint64_t v2 = result[1];
  }
  result[3] = 0;
  result[4] = 0;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDB57DEC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(a1);
}

void *sub_1DDB57E1C(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (void *)sub_1DDAD6F28(a1, a2, a3);
  *uint64_t result = &unk_1F397D770;
  result[4] = a4;
  result[5] = a5;
  return result;
}

uint64_t sub_1DDB57E64(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1DDB57E6C(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t *sub_1DDB57E74(uint64_t a1, uint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  sub_1DDA49310(v18, a2);
  long long v29 = 0u;
  memset(v30, 0, sizeof(v30));
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v13 = 0;
  size_t v14 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  JxlDecoderCreate();
  JxlDecoderSubscribeEvents();
  size_t v4 = *(void *)(a1 + 40);
  sub_1DDA1AB9C(__p, v4);
  uint64_t v5 = *a2;
  sub_1DDA1B2DC(&v8, (uint64_t *)(a1 + 32));
  (*(void (**)(uint64_t, int *, void))(*(void *)v5 + 40))(v5, &v8, 0);
  (*(void (**)(uint64_t, void *, size_t))(*(void *)*a2 + 32))(*a2, __p[0], v4);
  if (!JxlDecoderSetInput()
    && JxlDecoderProcessInput() == 64
    && !JxlDecoderGetBasicInfo()
    && JxlDecoderProcessInput() == 256)
  {
    if (JxlDecoderGetColorAsEncodedProfile())
    {
      if (JxlDecoderGetICCProfileSize()) {
        goto LABEL_15;
      }
      if (v14) {
        sub_1DDB5843C((unint64_t *)&v15, v14);
      }
      int ColorAsICCProfile = JxlDecoderGetColorAsICCProfile();
    }
    else
    {
      int ColorAsICCProfile = JxlDecoderSetPreferredColorProfile();
    }
    if (!ColorAsICCProfile)
    {
      uint64_t v10 = 0x200000003;
      uint64_t v12 = 1;
      if (!JxlDecoderImageOutBufferSize() && !JxlDecoderSetImageOutBuffer()) {
        JxlDecoderProcessInput();
      }
    }
  }
LABEL_15:
  JxlDecoderDestroy();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v15)
  {
    int v16 = v15;
    operator delete(v15);
  }
  return sub_1DDA1AA18(v18);
}

void sub_1DDB580E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1DDA1AA18(&a34);
  _Unwind_Resume(a1);
}

CGColorSpaceRef sub_1DDB58144(uint64_t a1, uint64_t *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  sub_1DDA49310(v19, a2);
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  size_t v15 = 0;
  JxlDecoderCreate();
  JxlDecoderSubscribeEvents();
  size_t v4 = *(void *)(a1 + 40);
  sub_1DDA1AB9C(__p, v4);
  uint64_t v5 = *a2;
  sub_1DDA1B2DC(&v13, (uint64_t *)(a1 + 32));
  (*(void (**)(uint64_t, int *, void))(*(void *)v5 + 40))(v5, &v13, 0);
  (*(void (**)(uint64_t, void *, size_t))(*(void *)*a2 + 32))(*a2, __p[0], v4);
  if (JxlDecoderSetInput()
    || JxlDecoderProcessInput() != 64
    || JxlDecoderGetBasicInfo()
    || JxlDecoderProcessInput() != 256)
  {
LABEL_25:
    CGColorSpaceRef v8 = 0;
    goto LABEL_20;
  }
  if (JxlDecoderGetColorAsEncodedProfile())
  {
    if (!JxlDecoderGetICCProfileSize())
    {
      if (v15) {
        sub_1DDB5843C((unint64_t *)&v16, v15);
      }
      if (!JxlDecoderGetColorAsICCProfile())
      {
        CFDataRef v7 = CFDataCreate(0, (const UInt8 *)v16, v15);
        CGColorSpaceRef v8 = (CGColorSpaceRef)MEMORY[0x1E01C3590]();
        CFRelease(v7);
        goto LABEL_20;
      }
    }
    goto LABEL_25;
  }
  if (v10 == 1 && v11 == 1 && v12 == 13)
  {
    uint64_t v6 = (CFStringRef *)MEMORY[0x1E4F1DC98];
LABEL_19:
    CGColorSpaceRef v8 = CGColorSpaceCreateWithName(*v6);
    goto LABEL_20;
  }
  CGColorSpaceRef v8 = 0;
  if (v10 == 1 && v11 == 11 && v12 == 13)
  {
    uint64_t v6 = (CFStringRef *)MEMORY[0x1E4F1DB90];
    goto LABEL_19;
  }
LABEL_20:
  JxlDecoderDestroy();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  sub_1DDA1AA18(v19);
  return v8;
}

void sub_1DDB583D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1DDA1AA18(&a30);
  _Unwind_Resume(a1);
}

void sub_1DDB5843C(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  size_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    CFDataRef v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_1DDA17F78();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    int v12 = &v7[v11];
    int v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      size_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_1DDB58578(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = (void *)sub_1DDBF0D7C(a1, a2);
  *uint64_t v5 = &unk_1F397D7E0;
  v5[6] = 0;
  unint64_t v6 = (void **)(v5 + 6);
  v5[7] = 0;
  v5[8] = 0;
  *(_DWORD *)(a1 + 12) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1DDA19EC8(*a3);
  int v7 = sub_1DDA19EC8(*a3);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      float v9 = sub_1DDA1A014(*a3);
      float v10 = v9;
      int v12 = *(float **)(a1 + 56);
      unint64_t v11 = *(void *)(a1 + 64);
      if ((unint64_t)v12 >= v11)
      {
        size_t v14 = (float *)*v6;
        uint64_t v15 = ((char *)v12 - (unsigned char *)*v6) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          sub_1DDA17F78();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          long long v19 = (char *)sub_1DDA17F90(a1 + 64, v18);
          size_t v14 = *(float **)(a1 + 48);
          int v12 = *(float **)(a1 + 56);
        }
        else
        {
          long long v19 = 0;
        }
        long long v20 = (float *)&v19[4 * v15];
        float *v20 = v10;
        int v13 = v20 + 1;
        while (v12 != v14)
        {
          int v21 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(void *)(a1 + 48) = v20;
        *(void *)(a1 + 56) = v13;
        *(void *)(a1 + 64) = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *int v12 = v9;
        int v13 = v12 + 1;
      }
      *(void *)(a1 + 56) = v13;
    }
  }
  return a1;
}

void sub_1DDB58734(_Unwind_Exception *exception_object)
{
  size_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDB58760(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5);
  float v10 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v7, *(unsigned int *)(a1 + 12), v8, v9);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, @"Top", v12);

  unint64_t v16 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v13, *(unsigned int *)(a1 + 16), v14, v15);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, @"Left", v18);

  long long v22 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v19, *(unsigned int *)(a1 + 20), v20, v21);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, @"Bottom", v24);

  long long v28 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v25, *(unsigned int *)(a1 + 24), v26, v27);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, @"Right", v30);

  unint64_t v34 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v31, *(unsigned int *)(a1 + 28), v32, v33);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, @"Plane", v36);

  uint64_t v40 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v37, *(unsigned int *)(a1 + 32), v38, v39);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, @"Planes", v42);

  uint64_t v46 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v43, *(unsigned int *)(a1 + 36), v44, v45);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, @"RowPitch", v48);

  double v52 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v49, *(unsigned int *)(a1 + 40), v50, v51);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, @"ColPitch", v54);

  double v63 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v55, v56, v57, v58);
  double v65 = *(_DWORD **)(a1 + 48);
  uint64_t v66 = *(_DWORD **)(a1 + 56);
  while (v65 != v66)
  {
    LODWORD(v64) = *v65;
    uint64_t v67 = objc_msgSend_numberWithFloat_(NSNumber, v59, v60, v61, v62, v64);
    objc_msgSend_addObject_(v63, v68, (uint64_t)v67, v69, v70);

    ++v65;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v63, @"Scale", v62);
  uint64_t v71 = [RAWOpcodeScalePerRow alloc];
  uint64_t v75 = objc_msgSend_initWithArguments_(v71, v72, (uint64_t)v6, v73, v74);

  return v75;
}

void sub_1DDB5899C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1DDB589F0(void *a1)
{
  *a1 = &unk_1F397D7E0;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1DDB58A40(void *a1)
{
  *a1 = &unk_1F397D7E0;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB58AB0()
{
  return 12;
}

double sub_1DDB58AB8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double v10 = a4;
  int v9 = a2;
  double v8 = a5;
  sub_1DDB58D98(a1, &v10, &v9, &v8, &v7);
  double result = *(double *)&v7;
  *a3 = v7;
  return result;
}

uint64_t sub_1DDB58B14(uint64_t a1, unsigned int a2, _OWORD *a3, unsigned char *a4)
{
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  long double v7 = log((double)a2);
  unint64_t v8 = 0;
  double v9 = pow(1.9, v7 + -5.768321) * (*(double *)(a1 + 56) / 12810.0);
  double v10 = (_DWORD *)a3 + 3;
  __asm { FMOV            V0.2D, #2.0 }
  float64_t v24 = *((double *)&_Q0 + 1);
  do
  {
    uint64_t v16 = *(void *)(a1 + 32);
    if (v8 >= (*(void *)(a1 + 40) - v16) >> 3) {
      sub_1DDA24AD0();
    }
    double v25 = dbl_1DDBFF1D0[v8] - *(double *)(v16 + 8 * v8);
    uint64_t result = sub_1DDB50718(*(_DWORD *)(a1 + 64), v8);
    if (result == 2) {
      uint64_t v18 = (float *)&unk_1DDBFF1C0;
    }
    else {
      uint64_t v18 = (float *)&unk_1DDBFF1A0;
    }
    if (result == 3) {
      uint64_t v18 = (float *)&unk_1DDBFF1B0;
    }
    double v19 = v9 * *(double *)(a1 + 72);
    int v20 = *((_DWORD *)v18 + 3);
    double v21 = v18[2];
    v22.f64[0] = *v18 + v18[1] * v25;
    v22.f64[1] = v18[1];
    v23.f64[1] = v24;
    v23.f64[0] = v25;
    *(float32x2_t *)(v10 - 3) = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(v22, vmulq_n_f64(v23, v21), v25), v19));
    *(float *)&double v19 = v19 * v21;
    *(v10 - 1) = LODWORD(v19);
    *double v10 = v20;
    ++v8;
    v10 += 4;
  }
  while (v8 != 4);
  *a4 = 0;
  return result;
}

void *sub_1DDB58C88(void *a1)
{
  *a1 = &unk_1F397D828;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1F397D538;
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_1DDA18310(v3);
  }
  return a1;
}

void sub_1DDB58D00(void *a1)
{
  *a1 = &unk_1F397D828;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1F397D538;
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_1DDA18310(v3);
  }

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB58D98@<X0>(uint64_t a1@<X1>, double *a2@<X2>, int *a3@<X3>, double *a4@<X4>, void *a5@<X8>)
{
  double v10 = operator new(0x68uLL);
  uint64_t result = sub_1DDB58E14(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1DDB58E00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB58E14(void *a1, uint64_t a2, double *a3, int *a4, double *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397D868;
  sub_1DDB58F18((uint64_t)(a1 + 3), a2, *a4, *a3, *a5);
  return a1;
}

void sub_1DDB58E68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB58E7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB58E9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397D868;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB58EF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

uint64_t sub_1DDB58F18(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F397D828;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_1DDA1808C((void *)(a1 + 32), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(double *)(a1 + 56) = a4;
  *(_DWORD *)(a1 + 64) = a3;
  *(double *)(a1 + 72) = a5;
  return a1;
}

void sub_1DDB58F98(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_1F397D538;
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB58FCC(void *a1)
{
  size_t v2 = NSPageSize();
  uint64_t v3 = (v2 + a1[3] - 1) & -(uint64_t)v2;
  size_t v4 = v3 + 2 * v2;
  if ((*(unsigned int (**)(void *))(*a1 + 40))(a1)) {
    int v5 = 1325400066;
  }
  else {
    int v5 = 1325400064;
  }
  a1[5] = v4;
  unint64_t v6 = (char *)j__mmap(0, v4, 3, 4098, v5, 0);
  if (v6 == (char *)-1
    || (a1[4] = v6, a1[2] = &v6[v2], mprotect(v6, v2, 1), uint64_t result = mprotect((void *)(a1[2] + v3), v2, 1), !a1[2]))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDB590FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB59114(void *a1)
{
  *a1 = &unk_1F397D8B8;
  size_t v2 = (void *)a1[4];
  if (v2)
  {
    munmap(v2, a1[5]);
    a1[4] = 0;
  }

  return sub_1DDAA5428((uint64_t)a1);
}

void sub_1DDB59180(void *a1)
{
  sub_1DDB59114(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB591B8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1F397D8F8;
  *(_DWORD *)(a1 + 48) = 1;
  sub_1DDB46DC8((void *)(a1 + 56));
  return a1;
}

void sub_1DDB59214(_Unwind_Exception *a1)
{
  sub_1DDB59114(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DDB5922C(uint64_t a1)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (result && *(void *)(a1 + 16))
  {
    sub_1DDA7A800(v5, (uint64_t *)(a1 + 56));
    int v3 = *(_DWORD *)(a1 + 48);
    BOOL v4 = __OFSUB__(v3--, 1);
    *(_DWORD *)(a1 + 48) = v3;
    if ((v3 < 0) ^ v4 | (v3 == 0)) {
      sub_1DDA7EF68(a1);
    }
    return sub_1DDA7A8CC(v5);
  }
  return result;
}

void sub_1DDB592B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1DDB592C4(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1) && *(void *)(a1 + 16))
  {
    sub_1DDA7A800(v4, (uint64_t *)(a1 + 56));
    int v2 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v2 + 1;
    if (v2 <= 1) {
      sub_1DDA7EF68(a1);
    }
    sub_1DDA7A8CC(v4);
  }
  return 1;
}

void sub_1DDB59350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1DDB59368(void *a1)
{
  sub_1DDB593A0(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB593A0(void *a1)
{
  *a1 = &unk_1F397D8F8;
  int v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_1DDA18310(v2);
  }

  return sub_1DDB59114(a1);
}

void sub_1DDB593FC(_DWORD *a1)
{
  int v2 = sub_1DDA83CFC();
  int v3 = v2;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "CPacked14Unpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  v36[2] = sub_1DDB5986C;
  v36[3] = &unk_1E6D04A58;
  v36[4] = a1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v36);
  int v5 = a1[11];
  uint64_t v6 = a1[12];
  if ((int)v6 * v5 > (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 152))(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v29 = (void (**)(void))v4;
  (*(void (**)(uint8_t *__return_ptr, _DWORD *))(*(void *)a1 + 112))(buf, a1);
  long double v7 = (_WORD *)sub_1DDA7EF68(*(uint64_t *)buf);
  if (v35) {
    sub_1DDA18310(v35);
  }
  if (v6)
  {
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = (14 * v5) >> 3;
    int v11 = (2 * v5) & 0x1FFFFFFE;
    uint64_t v33 = (v11 - v10);
    unsigned int v31 = 14 * v5;
    int v32 = (14 * v5) & 0x18;
    LODWORD(v12) = (14 * v5) >> 5;
    unsigned int v13 = v5 & 0xFFFFFFFC;
    if (v12 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v12;
    }
    uint64_t v30 = v12;
    do
    {
      uint64_t v14 = v6;
      (*(void (**)(uint8_t *__return_ptr, _DWORD *))(*(void *)a1 + 112))(buf, a1);
      uint64_t v15 = sub_1DDA7EF68(*(uint64_t *)buf);
      if (v35) {
        sub_1DDA18310(v35);
      }
      uint64_t v16 = (unsigned __int8 *)(v15 + v33 + (v11 * v9));
      if ((unint64_t)&v16[v10] > (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 120))(a1)
        || ((*(void (**)(void, uint64_t, uint64_t))(**((void **)a1 + 3) + 32))(*((void *)a1 + 3), v15 + v33 + (v11 * v9), v10), v32))
      {
        uint64_t v27 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v27, "RawCameraException");
        __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v31 >= 0x20)
      {
        uint64_t v17 = (unsigned int *)(v15 + v33 + v8);
        uint64_t v18 = v30;
        do
        {
          *uint64_t v17 = bswap32(*v17);
          ++v17;
          --v18;
        }
        while (v18);
      }
      if (v13)
      {
        unsigned int v19 = 0;
        uint64_t v6 = v14;
        do
        {
          unsigned int v20 = v16[1];
          unsigned int v21 = v16[3];
          __int16 v22 = v16[4];
          unsigned int v23 = v16[5];
          unsigned int v24 = v20 >> 2;
          int v25 = (16 * v16[2]) & 0xCFFF | ((v20 & 3) << 12) | (v21 >> 4);
          __int16 v26 = v16[6] | ((v23 & 0x3F) << 8);
          *long double v7 = v24 | (*v16 << 6);
          v7[1] = v25;
          v7[2] = (4 * v22) & 0xC3FF | ((v21 & 0xF) << 10) | (v23 >> 6);
          uint64_t v7[3] = v26;
          v7 += 4;
          v19 += 4;
          v16 += 7;
        }
        while (v19 < v13);
      }
      else
      {
        uint64_t v6 = v14;
      }
      ++v9;
      v8 += v11;
    }
    while (v9 != v6);
  }
  v29[2](v29);
}

void sub_1DDB597EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB5986C(uint64_t a1)
{
  int v2 = sub_1DDA83CFC();
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPacked14Unpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

double sub_1DDB598F4(uint64_t a1, void *a2)
{
  *(void *)(a1 + 56) = *a2;
  return sub_1DDB59908(a1, a1 + 64, a1 + 96);
}

double sub_1DDB59908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  bzero(v42, 0x328uLL);
  uint64_t v6 = 0;
  double v7 = *(double *)(a1 + 40);
  double v8 = *(double *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  double v10 = *(double *)(a1 + 24) + 1.0;
  float64x2_t v11 = (float64x2_t)vdupq_lane_s64(v9, 0);
  float64x2_t v12 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
  float64x2_t v13 = (float64x2_t)vdupq_n_s64(0x3F84AFD6A052BF5BuLL);
  int32x2_t v14 = (int32x2_t)0x100000000;
  __asm { FMOV            V2.2D, #1.0 }
  do
  {
    v20.i64[0] = v14.i32[0];
    v20.i64[1] = v14.i32[1];
    float64x2_t v21 = vmulq_f64(vcvtq_f64_s64(v20), v13);
    float64x2_t v22 = vmulq_f64(v21, v21);
    *(float64x2_t *)&v42[v6] = vdivq_f64(vmulq_f64(v21, vmlaq_f64(vmlaq_f64(vmlaq_f64(_Q2, v22, v11), v22, vmulq_n_f64(v22, v7)), v22, vmulq_f64(v22, vmulq_n_f64(v22, v8)))), v12);
    int32x2_t v14 = vadd_s32(v14, (int32x2_t)0x200000002);
    v6 += 2;
  }
  while (v6 != 100);
  uint64_t v23 = 0;
  while (v42[v23] + -1.0 <= 1.0)
  {
    if (++v23 == 100)
    {
      double v24 = 1.0;
      goto LABEL_8;
    }
  }
  double v24 = (double)(int)v23 * 0.0101010101;
LABEL_8:
  uint64_t v25 = 0;
  float64x2_t v26 = (float64x2_t)vdupq_lane_s64(v9, 0);
  float64x2_t v27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
  int32x2_t v28 = (int32x2_t)0x100000000;
  double v29 = v24 / 99.0;
  do
  {
    v30.i64[0] = v28.i32[0];
    v30.i64[1] = v28.i32[1];
    float64x2_t v31 = vmulq_n_f64(vcvtq_f64_s64(v30), v29);
    float64x2_t v32 = vmulq_f64(v31, v31);
    *(float64x2_t *)&v42[v25] = vdivq_f64(vmulq_f64(v31, vmlaq_f64(vmlaq_f64(vmlaq_f64(_Q2, v32, v26), v32, vmulq_n_f64(v32, v7)), v32, vmulq_f64(v32, vmulq_n_f64(v32, v8)))), v27);
    int32x2_t v28 = vadd_s32(v28, (int32x2_t)0x200000002);
    v25 += 2;
  }
  while (v25 != 100);
  for (uint64_t i = 0; i != 100; ++i)
  {
    double v34 = (double)(int)i * 0.0101010101;
    v41[i] = v34;
    for (uint64_t j = 1; j != 100; ++j)
    {
      if (v42[j] >= v34) {
        break;
      }
    }
    v40[i] = v29 * ((v34 - v42[(int)j - 1]) / (v42[j] - v42[(int)j - 1]) + (double)((int)j - 1));
  }
  uint64_t v36 = 0;
  double v37 = v40[0];
  do
  {
    if (v36 * 8)
    {
      double v38 = v41[v36];
      v40[v36] = v40[v36] / v38;
    }
    else
    {
      double v37 = 1.0;
      double v38 = v41[0];
    }
    v41[v36++] = v38 * v38;
  }
  while (v36 != 100);
  v40[0] = v37;
  return sub_1DDB59B9C(a1, a2, a3, (uint64_t)v41, (uint64_t)v40, 100);
}

double sub_1DDB59B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a6 < 2)
  {
    LODWORD(v12) = 1;
  }
  else
  {
    uint64_t v12 = 1;
    while (*(double *)(a4 + 8 * v12) < *(double *)(a1 + 128))
    {
      if (a6 == ++v12)
      {
        LODWORD(v12) = a6;
        break;
      }
    }
  }
  int v13 = v12 - 1;
  long long v25 = xmmword_1DDBFF2A8;
  *(_OWORD *)float64x2_t v26 = unk_1DDBFF2B8;
  long long v23 = xmmword_1DDBFF2A8;
  long long v24 = unk_1DDBFF2B8;
  int32x2_t v14 = sub_1DDB59D18(a1, &v25, a4, a5, 0, (int)v12 - 1);
  sub_1DDB59D18((uint64_t)v14, &v23, a4, a5, v13, a6 - v13);
  double v15 = *(double *)(a1 + 128) * *(double *)(a1 + 128);
  uint64_t v16 = *((void *)&v25 + 1);
  double v17 = v26[0];
  long long v18 = v23;
  uint64_t v19 = v24;
  double v20 = *((double *)&v24 + 1)
      + v15 * (v15 * *((double *)&v23 + 1))
      + v15 * (v15 * *(double *)&v23) * v15
      + *(double *)&v24 * v15
      - (v26[1]
       + v15 * (v15 * *((double *)&v25 + 1))
       + v15 * (*(double *)&v25 * v15) * v15
       + v26[0] * v15);
  double v21 = v26[1] + v20 * 0.8;
  double result = *((double *)&v24 + 1) + v20 * -0.2;
  *(void *)a2 = v25;
  *(void *)(a2 + 8) = v16;
  *(double *)(a2 + 16) = v17;
  *(double *)(a2 + 24) = v21;
  *(_OWORD *)a3 = v18;
  *(void *)(a3 + 16) = v19;
  *(double *)(a3 + 24) = result;
  return result;
}

void *sub_1DDB59D18(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a6 - 2000 <= 0xFFFFF830)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = a6;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = &v22[-32 * v11];
  bzero(v12, v13);
  uint64_t v15 = 0;
  do
  {
    double v16 = *(double *)(a3 + 8 * a5 + v15);
    *(double *)&v12[v15] = v16 * (v16 * v16);
    *(double *)&v12[8 * a6 + v15] = v16 * v16;
    *(double *)&v12[16 * a6 + v15] = v16;
    *(void *)&v12[24 * a6 + v15] = 0x3FF0000000000000;
    v15 += 8;
  }
  while (8 * a6 != v15);
  MEMORY[0x1F4188790](v14);
  long long v18 = &v22[-((v17 + 15) & 0xFFFFFFFF0)];
  memcpy(v18, (const void *)(a4 + 8 * v19), v17);
  int v29 = 4;
  unsigned int v30 = a6;
  unsigned int v27 = a6;
  int v28 = 1;
  unsigned int v26 = a6;
  double v25 = 0.0;
  v23[2] = 0;
  *(_WORD *)&void v23[3] = 0;
  int v24 = -1;
  strcpy(v23, "N");
  double result = (void *)dgels_NEWLAPACK();
  if (!*(_DWORD *)&v23[1])
  {
    int v24 = llround(ceil(v25));
    MEMORY[0x1F4188790](result);
    double result = (void *)dgels_NEWLAPACK();
    if (!*(_DWORD *)&v23[1]) {
      return memcpy(a2, v18, 8 * v29);
    }
  }
  return result;
}

void sub_1DDB59FA0(_Unwind_Exception *exception_object)
{
}

double sub_1DDB59FBC(uint64_t a1)
{
  return (double)*(int *)(a1 + 56) / *(double *)(a1 + 8) * *(double *)(a1 + 16);
}

void sub_1DDB59FD4()
{
}

uint64_t sub_1DDB59FE8(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v9);
  uint64_t v2 = v9;
  sub_1DDA1A880(__p, "IFD0");
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 264))(v2, __p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    sub_1DDA18310(v10);
  }
  if (v3 == 0xFFFF)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v9, a1);
    uint64_t v4 = v9;
    sub_1DDA1A880(__p, "EmbeddedThumbnail:IFD0:EXIF");
    unsigned int v5 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v4 + 264))(v4, __p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      sub_1DDA18310(v10);
    }
    if (v5 < 0x10000) {
      return 0xFFFFLL;
    }
    else {
      return v5;
    }
  }
  return v3;
}

void sub_1DDB5A150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB5A188(uint64_t a1@<X0>, double **a2@<X8>)
{
  double v4 = (*(double (**)(uint64_t))(*(void *)a1 + 2952))(a1);
  double v20 = v4;
  size_t v17 = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v15, a1);
  uint64_t v5 = v15;
  sub_1DDA1A880(__p, "IFD0:OBCorrection");
  if ((*(unsigned int (**)(uint64_t, void **, void **, void))(*(void *)v5 + 248))(v5, __p, &v17, 0))
  {
    double v7 = v17;
    uint64_t v6 = v18;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = v6 - v7;
    if (v16) {
      sub_1DDA18310(v16);
    }
    if (v8 == 32)
    {
      double v10 = (double *)v17;
      uint64_t v9 = (double *)v18;
      if (v18 != v17)
      {
        uint64_t v11 = 0;
        unint64_t v12 = (v18 - (unsigned char *)v17) >> 3;
        do
        {
          v10[v11] = v4 + v10[v11];
          ++v11;
        }
        while (v12 > v11);
      }
      *a2 = v10;
      a2[1] = v9;
      a2[2] = v19;
      return;
    }
  }
  else
  {
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16) {
      sub_1DDA18310(v16);
    }
  }
  sub_1DDA25B2C(a2, 4uLL, &v20);
  if (v17)
  {
    long long v18 = v17;
    operator delete(v17);
  }
}

void sub_1DDB5A31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB5A368(uint64_t a1)
{
  uint64_t v6 = &unk_1F39665D8;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "redGreenBlue");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v1 + 600))(v1, __p, &v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDB5A448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5A478(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2784))();
}

BOOL sub_1DDB5A4A4(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v3);
  sub_1DDAC7E9C(&v3, &v5);
  if (v4) {
    sub_1DDA18310(v4);
  }
  if (v5)
  {
    (*(void (**)(void *, void **))(*(void *)v5 + 800))(v5, &v3);
    BOOL v1 = (_BYTE)v3 != 0;
  }
  else
  {
    BOOL v1 = 0;
  }
  if (v6) {
    sub_1DDA18310(v6);
  }
  return v1;
}

void sub_1DDB5A564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1DDA18310(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5A57C(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v5);
  sub_1DDAC7E9C(&v5, &v7);
  if (v6) {
    sub_1DDA18310(v6);
  }
  if (v7) {
    uint64_t v2 = (*(uint64_t (**)(void *))(*(void *)v7 + 792))(v7);
  }
  else {
    uint64_t v2 = sub_1DDAC9BB4(a1);
  }
  uint64_t v3 = v2;
  if (v8) {
    sub_1DDA18310(v8);
  }
  return v3;
}

void sub_1DDB5A638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDB5A650(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = sub_1DDABC160(a1, a2);
  if (sub_1DDA2E580(a1))
  {
    id v4 = v3;
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v87, a1);
    sub_1DDAC7E9C(&v87, &v94);
    if (v88) {
      sub_1DDA18310(v88);
    }
    if (v94)
    {
      (*(void (**)(void *, void **))(*(void *)v94 + 800))(v94, &v87);
      if ((_BYTE)v87)
      {
        uint64_t v5 = sub_1DDA7A98C(v3, @"PanasonicChromaticAberration", 0);
        uint64_t v6 = (void *)MEMORY[0x1E01C4510]();
        double v10 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v7, v87, v8, v9);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v11, (uint64_t)v10, @"ChAber_SW", v12);

        double v16 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v13, WORD1(v87), v14, v15);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v17, (uint64_t)v16, @"CA1", v18);

        float64x2_t v22 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v19, WORD2(v87), v20, v21);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v23, (uint64_t)v22, @"CA2", v24);

        int v28 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v25, HIWORD(v87), v26, v27);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v29, (uint64_t)v28, @"CA3", v30);

        double v34 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v31, (unsigned __int16)v88, v32, v33);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v35, (uint64_t)v34, @"CA4", v36);

        uint64_t v40 = objc_msgSend_numberWithShort_(NSNumber, v37, SWORD1(v88), v38, v39);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v41, (uint64_t)v40, @"RG1", v42);

        uint64_t v46 = objc_msgSend_numberWithShort_(NSNumber, v43, SWORD2(v88), v44, v45);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v47, (uint64_t)v46, @"RG2", v48);

        double v52 = objc_msgSend_numberWithShort_(NSNumber, v49, SHIWORD(v88), v50, v51);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v53, (uint64_t)v52, @"RG3", v54);

        uint64_t v58 = objc_msgSend_numberWithShort_(NSNumber, v55, v89, v56, v57);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v59, (uint64_t)v58, @"RG4", v60);

        double v64 = objc_msgSend_numberWithShort_(NSNumber, v61, v90, v62, v63);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v65, (uint64_t)v64, @"BG1", v66);

        uint64_t v70 = objc_msgSend_numberWithShort_(NSNumber, v67, v91, v68, v69);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v71, (uint64_t)v70, @"BG2", v72);

        uint64_t v76 = objc_msgSend_numberWithShort_(NSNumber, v73, v92, v74, v75);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v77, (uint64_t)v76, @"BG3", v78);

        uint64_t v82 = objc_msgSend_numberWithShort_(NSNumber, v79, v93, v80, v81);
        objc_msgSend_setObject_forKeyedSubscript_(v5, v83, (uint64_t)v82, @"BG4", v84);
      }
    }
    id v85 = v3;
    if (v95) {
      sub_1DDA18310(v95);
    }
  }

  return v3;
}

void sub_1DDB5A9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1DDA18310(a14);
  }

  _Unwind_Resume(a1);
}

id sub_1DDB5AA38(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"leicaCropRect", v5, v6))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v21, a1);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 448))(v21);
    uint64_t v24 = v10;
    uint64_t v14 = sub_1DDAD06E0((unsigned int *)&v23, v10, v11, v12, v13);
  }
  else
  {
    if (!objc_msgSend_isEqualToString_(v3, v7, @"cropRectFromTag", v8, v9))
    {
      uint64_t v19 = sub_1DDBCE65C(a1, v3);
      goto LABEL_8;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v21, a1);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 456))(v21);
    uint64_t v24 = v15;
    uint64_t v14 = sub_1DDAD06E0((unsigned int *)&v23, v15, v16, v17, v18);
  }
  uint64_t v19 = (void *)v14;
  if (v22) {
    sub_1DDA18310(v22);
  }
LABEL_8:

  return v19;
}

void sub_1DDB5ABA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB5ABD8(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  double v4 = sub_1DDAEE388(v2, @"blackLevelOffsetAdjustment", v3, &unk_1F397DA88);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDB5AC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB5ACA4()
{
  return 0.0;
}

char *sub_1DDB5ACAC(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 188) = a2;
  *(_DWORD *)(a1 + 192) = a3;
  double v7 = (char *)(a1 + 200);
  if (v7 != (char *)a4) {
    sub_1DDA17E28(v7, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  double result = (char *)(a1 + 224);
  if (a1 + 224 != a5)
  {
    uint64_t v9 = *(char **)a5;
    uint64_t v10 = *(void *)(a5 + 8);
    unint64_t v11 = (v10 - *(void *)a5) >> 2;
    return sub_1DDA17E28(result, v9, v10, v11);
  }
  return result;
}

void *sub_1DDB5AD24(uint64_t a1, int a2, size_t size)
{
  int v9 = a2;
  uint64_t v4 = size;
  uint64_t v5 = malloc_type_malloc(size, 0x8AFC5D55uLL);
  uint64_t v6 = *(void *)(a1 + 24);
  sub_1DDA18410(&v8, &v9);
  (*(void (**)(uint64_t, int *, void))(*(void *)v6 + 40))(v6, &v8, 0);
  (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5, v4);
  return v5;
}

void sub_1DDB5ADEC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    free(v1);
  }
  __cxa_end_catch();
  JUMPOUT(0x1DDB5ADD4);
}

void sub_1DDB5AE10(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  applejpeg_decode_create();
  if (applejpeg_decode_open_mem()
    || applejpeg_decode_set_option_outformat()
    || applejpeg_decode_get_image_info()
    || a5[2] != 2 * v37
    || a5[3] != 2 * v38
    || applejpeg_decode_get_output_buffer_size()
    || 2 * a5[2] * a5[2])
  {
    id v26 = 0;
  }
  else
  {
    objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v9, 0, v10, v11);
    id v12 = objc_claimAutoreleasedReturnValue();
    objc_msgSend_mutableBytes(v12, v13, v14, v15, v16);
    if (applejpeg_decode_image_all()) {
      goto LABEL_16;
    }
    v39.origin.CGFloat x = (double)*a3;
    v39.origin.CGFloat y = (double)a3[1];
    v39.size.CGFloat width = (double)a3[2];
    v39.size.vImagePixelCount height = (double)a3[3];
    v41.origin.CGFloat x = (double)*a5;
    v41.origin.CGFloat y = (double)a5[1];
    v41.size.CGFloat width = (double)a5[2];
    v41.size.vImagePixelCount height = (double)a5[3];
    CGRect v40 = CGRectIntersection(v39, v41);
    unint64_t v17 = (unint64_t)(v40.origin.y - (double)a3[1]);
    unint64_t v18 = v17 + (unint64_t)v40.size.height;
    if (v18 <= v17)
    {
LABEL_16:
      id v26 = v12;
    }
    else
    {
      unint64_t v19 = (unint64_t)(v40.origin.x - (double)*a3);
      unint64_t v20 = v19 + (unint64_t)v40.size.width;
      uint64_t v21 = v17 * a4 + 2 * v19;
      uint64_t v22 = v21 + a4 + a2 + 2;
      uint64_t v23 = 2 * a4;
      uint64_t v24 = a2 + v21;
      unint64_t v25 = v17;
      do
      {
        id v26 = v12;
        uint64_t v31 = objc_msgSend_bytes(v26, v27, v28, v29, v30);
        if (v20 > v19)
        {
          uint64_t v32 = 0;
          unint64_t v33 = v19;
          do
          {
            __int16 v34 = *(_WORD *)(v31 + ((2 * v32) | 4));
            __int16 v35 = *(_WORD *)(v31 + ((2 * v32) | 6));
            *(_DWORD *)(v24 + v32) = *(_DWORD *)(v31 + 2 * (v32 & 0x7FFFFFFFFFFFFFFCLL));
            uint64_t v36 = (_WORD *)(v22 + v32);
            *(v36 - 1) = v34;
            *uint64_t v36 = v35;
            v33 += 2;
            v32 += 4;
          }
          while (v33 < v20);
        }
        v25 += 2;
        v22 += v23;
        v24 += v23;
      }
      while (v25 < v18);
    }
  }
  applejpeg_decode_destroy();
}

void sub_1DDB5B090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1DDB5B0B4(size_t a1)
{
  return malloc_type_malloc(a1, 0x5167B75AuLL);
}

void sub_1DDB5B0C4(uint64_t a1)
{
  uint64_t v3 = *(unsigned int *)(a1 + 44);
  int v2 = *(_DWORD *)(a1 + 48);
  unsigned int v4 = *(_DWORD *)(a1 + 188);
  unsigned int v5 = *(_DWORD *)(a1 + 192);
  uint64_t v16 = (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 2;
  sub_1DDA18488(&v19, (unint64_t *)&v16);
  if (*(void *)(a1 + 208) - *(void *)(a1 + 200) != *(void *)(a1 + 232) - *(void *)(a1 + 224)
    || (v3 - 100000) < 0xFFFE7961
    || (v2 - 100000) < 0xFFFE7961
    || v4 - 100000 < 0xFFFE7961
    || v5 - 100000 < 0xFFFE7961
    || (uint64_t v6 = v19, v19 >= 20000)
    || (v2 + v5 - 1) / v5 * ((v3 + v4 - 1) / v4) != v19)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v15 = sub_1DDAA5B9C(a1);
  if (v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 4 * v6;
    do
    {
      uint64_t v16 = __PAIR64__(v9, v8);
      unsigned int v17 = v4;
      unsigned int v18 = v5;
      uint64_t v11 = sub_1DDB5AD24(a1, *(_DWORD *)(*(void *)(a1 + 200) + v7), *(unsigned int *)(*(void *)(a1 + 224) + v7));
      if (v11)
      {
        id v12 = v11;
        sub_1DDB5AE10((uint64_t)v11, v15 + 2 * (int)(v9 * v3) + 2 * (int)v8, (int *)&v16, 2 * v3, (int *)&v16);
        free(v12);
      }
      v7 += 4;
      if ((int)(v8 + v4) >= (int)v3) {
        unsigned int v13 = v5;
      }
      else {
        unsigned int v13 = 0;
      }
      v9 += v13;
      if ((int)(v8 + v4) >= (int)v3) {
        unsigned int v8 = 0;
      }
      else {
        v8 += v4;
      }
    }
    while (v10 != v7);
  }
}

void sub_1DDB5B340(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB5B36C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a1 + 44);
  int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v8 = *(_DWORD *)(a1 + 188);
  unsigned int v9 = *(_DWORD *)(a1 + 192);
  uint64_t v20 = (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 2;
  sub_1DDA18488(&v23, (unint64_t *)&v20);
  if (*(void *)(a1 + 208) - *(void *)(a1 + 200) != *(void *)(a1 + 232) - *(void *)(a1 + 224)
    || (v7 - 100000) < 0xFFFE7961
    || (v6 - 100000) < 0xFFFE7961
    || v8 - 100000 < 0xFFFE7961
    || v9 - 100000 < 0xFFFE7961
    || v23 >= 20000
    || (v6 + v9 - 1) / v9 * ((v7 + v8 - 1) / v8) != v23)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v23)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = 4 * v23;
    do
    {
      uint64_t v20 = __PAIR64__(v12, v11);
      unsigned int v21 = v8;
      unsigned int v22 = v9;
      if (sub_1DDB56B98((int *)&v20, a3))
      {
        uint64_t v14 = sub_1DDB5AD24(a1, *(_DWORD *)(*(void *)(a1 + 200) + v10), *(unsigned int *)(*(void *)(a1 + 224) + v10));
        if (v14)
        {
          uint64_t v15 = v14;
          sub_1DDB5AE10((uint64_t)v14, a2, a3, a4, (int *)&v20);
          free(v15);
        }
      }
      if ((int)(v11 + v8) >= v7) {
        unsigned int v16 = v9;
      }
      else {
        unsigned int v16 = 0;
      }
      v12 += v16;
      if ((int)(v11 + v8) >= v7) {
        unsigned int v11 = 0;
      }
      else {
        v11 += v8;
      }
      v10 += 4;
    }
    while (v13 != v10);
  }
}

void sub_1DDB5B5E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB5B60C(void *a1)
{
  *a1 = &unk_1F397E688;
  int v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDB5B67C(void *a1)
{
  *a1 = &unk_1F397E688;
  int v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDB5B778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB5B8A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB5B96C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F30058];
  uint64_t v34 = *MEMORY[0x1E4F30038];
  uint64_t v35 = v5;
  v42[0] = MEMORY[0x1E4F1CC38];
  v42[1] = @"com.samsung.raw-image";
  uint64_t v6 = *MEMORY[0x1E4F30050];
  uint64_t v36 = *MEMORY[0x1E4F30018];
  v42[2] = @".srw.";
  v42[3] = &unk_1F39AF200;
  v42[4] = &unk_1F39AF218;
  int v7 = objc_msgSend_numberWithUnsignedLong_(NSNumber, a2, (uint64_t)sub_1DDB5BC64, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E4F30040], *MEMORY[0x1E4F30048]);
  v42[5] = v7;
  uint64_t v37 = *MEMORY[0x1E4F30000];
  unsigned int v11 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v8, (uint64_t)sub_1DDB5BCB0, v9, v10);
  v42[6] = v11;
  uint64_t v38 = *MEMORY[0x1E4F30020];
  uint64_t v15 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v12, (uint64_t)sub_1DDB5BCBC, v13, v14);
  v42[7] = v15;
  uint64_t v39 = *MEMORY[0x1E4F30008];
  int v19 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v16, (uint64_t)sub_1DDA818EC, v17, v18);
  v42[8] = v19;
  uint64_t v40 = *MEMORY[0x1E4F30028];
  int v23 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v20, (uint64_t)sub_1DDB5BCC8, v21, v22);
  v42[9] = v23;
  uint64_t v41 = *MEMORY[0x1E4F30030];
  uint64_t v27 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v24, (uint64_t)sub_1DDB5BCD4, v25, v26);
  v42[10] = v27;
  uint64_t v29 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v43[0] = v29;
  uint64_t v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v30, (uint64_t)v43, 1, v31);

  return v32;
}

void sub_1DDB5BC04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB5BC64(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  unsigned __int16 v5 = 42;
  uint64_t result = sub_1DDA57F94(a1, a2, &v5);
  if (result) {
    return sub_1DDA844D0(@"com.samsung.raw-image", a3);
  }
  return result;
}

void sub_1DDB5BCB0(const void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1DDB5BCBC(os_signpost_id_t a1)
{
  return sub_1DDA81764(a1);
}

uint64_t sub_1DDB5BCC8(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA7FF34(a1, a2, a3, &unk_1F397E770);
}

uint64_t sub_1DDB5BCD4(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA82568(a1, a2, a3, &unk_1F397E770);
}

void sub_1DDB5BCE0(void *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  char v11 = a2;
  id v10 = a3;
  id v9 = a4;
  sub_1DDB5D7A8(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;
}

void sub_1DDB5BD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB5BD7C(uint64_t a1)
{
  sub_1DDA27D28(a1, &v5);
  uint64_t v2 = (*(int (**)(uint64_t))(*(void *)v5 + 48))(v5);
  if (v6) {
    sub_1DDA18310(v6);
  }
  uint64_t v7 = v2;
  sub_1DDA27D28(a1, &v5);
  uint64_t v3 = sub_1DDA19C94(v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3);
  if (v6) {
    sub_1DDA18310(v6);
  }
  sub_1DDA1B2DC(&v5, &v7);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 144))(a1, &v5);
  LODWORD(v5) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 160))(a1, &v5);
  return 1;
}

void sub_1DDB5BEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB5BEBC(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  nullsub_6();
  unsigned int v6 = *a3;
  if (v6 <= 0xA01F)
  {
    if (v6 == 53)
    {
      if (a3[1] == 4 && *((_DWORD *)a3 + 1) == 1)
      {
        int v23 = *(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)a1 + 720);
        v23(a1, a2, a3);
      }
      return;
    }
    if (v6 != 40976
      || a3[1] != 4
      || *((_DWORD *)a3 + 1) != 8
      || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) != 0)
    {
      return;
    }
    sub_1DDA27D28(a1, &__p);
    LODWORD(v70[0]) = *((_DWORD *)a3 + 2);
    sub_1DDA18410((int *)&v72, (int *)v70);
    sub_1DDA1A94C((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)&v72, 0);
    if (__p.__r_.__value_.__l.__size_) {
      sub_1DDA18310((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    sub_1DDA27D28(a1, &v72);
    LODWORD(v70[0]) = *((_DWORD *)a3 + 1);
    sub_1DDA1A5BC(v72, (unsigned int *)v70, (uint64_t *)&__p);
    if (v73) {
      sub_1DDA18310(v73);
    }
    uint64_t v7 = (char *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
LABEL_68:
      operator delete(v7);
    }
LABEL_69:
    sub_1DDA1AA18((uint64_t *)&__dst);
    return;
  }
  if (v6 == 40992)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) != 0
      || a3[1] != 4
      || *((_DWORD *)a3 + 1) != 11)
    {
      return;
    }
    sub_1DDA27D28(a1, &__p);
    LODWORD(v70[0]) = *((_DWORD *)a3 + 2);
    sub_1DDA18410((int *)&v72, (int *)v70);
    sub_1DDA1A94C((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)&v72, 0);
    if (__p.__r_.__value_.__l.__size_) {
      sub_1DDA18310((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    memset(&__p, 0, sizeof(__p));
    if (*((_DWORD *)a3 + 1))
    {
      unsigned int v8 = 0;
      do
      {
        sub_1DDA27D28(a1, &v72);
        int v9 = sub_1DDA19EC8((uint64_t)v72);
        int v10 = v9;
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          uint64_t v13 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v14 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            sub_1DDA17F78();
          }
          int64_t v16 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)sub_1DDA17F90((uint64_t)&__p.__r_.__value_.__r.__words[2], v17);
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            uint64_t v13 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v18 = 0;
          }
          int v19 = &v18[4 * v14];
          *(_DWORD *)int v19 = v10;
          std::string::size_type v12 = (std::string::size_type)(v19 + 4);
          while ((void *)size != v13)
          {
            int v20 = *(_DWORD *)(size - 4);
            size -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
          __p.__r_.__value_.__l.__size_ = v12;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v18[4 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v9;
          std::string::size_type v12 = size + 4;
        }
        __p.__r_.__value_.__l.__size_ = v12;
        if (v73) {
          sub_1DDA18310(v73);
        }
        ++v8;
      }
      while (v8 < *((_DWORD *)a3 + 1));
      uint64_t v21 = (char *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v21 = 0;
    }
    if ((std::string *)(a1 + 1184) != &__p)
    {
      sub_1DDA17E28((char *)(a1 + 1184), v21, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - (void)v21) >> 2);
      uint64_t v21 = (char *)__p.__r_.__value_.__r.__words[0];
    }
    if (v21)
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
      uint64_t v7 = v21;
      goto LABEL_68;
    }
    goto LABEL_69;
  }
  if (v6 == 40993)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) != 0
      || a3[1] != 4
      || *((_DWORD *)a3 + 1) != 4)
    {
      return;
    }
    if (*(void *)(a1 + 1192) - *(void *)(a1 + 1184) != 44) {
      goto LABEL_144;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1DDA2639C(&__dst, *(void **)a2, *(void *)(a2 + 8));
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1DDA2639C(&__p, *(void **)a2, *(void *)(a2 + 8));
        goto LABEL_72;
      }
    }
    else
    {
      std::string __dst = *(std::string *)a2;
    }
    std::string __p = *(std::string *)a2;
LABEL_72:
    std::string::append(&__dst, ":WhitePoint", 0xBuLL);
    std::string::append(&__p, ":WhitePointDecrypted", 0x14uLL);
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    unint64_t v74 = 0;
    v70[0] = 0;
    v70[1] = 0;
    uint64_t v71 = 0;
    sub_1DDA27D28(a1, &p_dst);
    int v65 = *((_DWORD *)a3 + 2);
    sub_1DDA18410(&v66, &v65);
    sub_1DDA1A94C((uint64_t *)v69, (uint64_t *)&p_dst, (uint64_t)&v66, 0);
    if (v68) {
      sub_1DDA18310(v68);
    }
    if (*((_DWORD *)a3 + 1))
    {
      unsigned int v24 = 0;
      do
      {
        sub_1DDA27D28(a1, &p_dst);
        int v25 = sub_1DDA19EC8((uint64_t)p_dst);
        int v26 = v25;
        uint64_t v27 = v73;
        if ((unint64_t)v73 >= v74)
        {
          uint64_t v29 = (std::__shared_weak_count *)v72;
          int64_t v30 = ((char *)v73 - (unsigned char *)v72) >> 2;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62) {
            sub_1DDA17F78();
          }
          uint64_t v32 = v74 - (void)v72;
          if ((uint64_t)(v74 - (void)v72) >> 1 > v31) {
            unint64_t v31 = v32 >> 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            uint64_t v34 = (char *)sub_1DDA17F90((uint64_t)&v74, v33);
            uint64_t v29 = (std::__shared_weak_count *)v72;
            uint64_t v27 = v73;
          }
          else
          {
            uint64_t v34 = 0;
          }
          uint64_t v35 = &v34[4 * v30];
          *(_DWORD *)uint64_t v35 = v26;
          uint64_t v28 = (std::__shared_weak_count *)(v35 + 4);
          while (v27 != v29)
          {
            int shared_weak_owners_high = HIDWORD(v27[-1].__shared_weak_owners_);
            uint64_t v27 = (std::__shared_weak_count *)((char *)v27 - 4);
            *((_DWORD *)v35 - 1) = shared_weak_owners_high;
            v35 -= 4;
          }
          uint64_t v72 = v35;
          uint64_t v73 = v28;
          unint64_t v74 = (unint64_t)&v34[4 * v33];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          LODWORD(v73->__vftable) = v25;
          uint64_t v28 = (std::__shared_weak_count *)((char *)&v27->__vftable + 4);
        }
        uint64_t v73 = v28;
        if (v68) {
          sub_1DDA18310(v68);
        }
        ++v24;
      }
      while (v24 < *((_DWORD *)a3 + 1));
    }
    sub_1DDA17E28((char *)v70, (char *)v72, (uint64_t)v73, ((char *)v73 - (unsigned char *)v72) >> 2);
    uint64_t v37 = v70[0];
    if (v70[1] != v70[0])
    {
      uint64_t v38 = 0;
      unint64_t v39 = ((char *)v70[1] - (char *)v70[0]) >> 2;
      uint64_t v40 = *(void *)(a1 + 1184);
      do
      {
        v37[v38] -= *(_DWORD *)(v40 + 4 * ((v38 + 4) % v39));
        ++v38;
      }
      while (v39 > v38);
    }
    uint64_t v41 = (uint64_t **)(a1 + 120);
    p_dst = &__dst;
    uint64_t v42 = (char *)(sub_1DDA4B960(v41, (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_dst)+ 7);
    if (v42 != (char *)&v72) {
      sub_1DDA17E28(v42, (char *)v72, (uint64_t)v73, ((char *)v73 - (unsigned char *)v72) >> 2);
    }
    p_dst = &__p;
    uint64_t v43 = (char *)(sub_1DDA4B960(v41, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_dst)+ 7);
    if (v43 != (char *)v70) {
      sub_1DDA17E28(v43, (char *)v70[0], (uint64_t)v70[1], ((char *)v70[1] - (char *)v70[0]) >> 2);
    }
    sub_1DDA1AA18((uint64_t *)v69);
    if (v70[0])
    {
      v70[1] = v70[0];
      operator delete(v70[0]);
    }
    if (v72)
    {
      uint64_t v73 = (std::__shared_weak_count *)v72;
      operator delete(v72);
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_140;
    }
    uint64_t v44 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_139;
  }
  if (v6 == 41000
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0
    && a3[1] == 9
    && *((_DWORD *)a3 + 1) == 4)
  {
    if (*(void *)(a1 + 1192) - *(void *)(a1 + 1184) == 44)
    {
      if (*(char *)(a2 + 23) < 0) {
        sub_1DDA2639C(&__dst, *(void **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __dst = *(std::string *)a2;
      }
      std::string::append(&__dst, ":BlackLevel", 0xBuLL);
      memset(&__p, 0, sizeof(__p));
      sub_1DDA27D28(a1, v70);
      LODWORD(p_dst) = *((_DWORD *)a3 + 2);
      sub_1DDA18410((int *)v69, (int *)&p_dst);
      sub_1DDA1A94C((uint64_t *)&v72, (uint64_t *)v70, (uint64_t)v69, 0);
      if (v70[1]) {
        sub_1DDA18310((std::__shared_weak_count *)v70[1]);
      }
      if (*((_DWORD *)a3 + 1))
      {
        unsigned int v45 = 0;
        do
        {
          sub_1DDA27D28(a1, v70);
          int v46 = sub_1DDA19EC8((uint64_t)v70[0]);
          int v47 = v46;
          std::string::size_type v48 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            uint64_t v50 = (void *)__p.__r_.__value_.__r.__words[0];
            uint64_t v51 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62) {
              sub_1DDA17F78();
            }
            int64_t v53 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v52) {
              unint64_t v52 = v53 >> 1;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v54 = v52;
            }
            if (v54)
            {
              uint64_t v55 = (char *)sub_1DDA17F90((uint64_t)&__p.__r_.__value_.__r.__words[2], v54);
              std::string::size_type v48 = __p.__r_.__value_.__l.__size_;
              uint64_t v50 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              uint64_t v55 = 0;
            }
            uint64_t v56 = &v55[4 * v51];
            *(_DWORD *)uint64_t v56 = v47;
            std::string::size_type v49 = (std::string::size_type)(v56 + 4);
            while ((void *)v48 != v50)
            {
              int v57 = *(_DWORD *)(v48 - 4);
              v48 -= 4;
              *((_DWORD *)v56 - 1) = v57;
              v56 -= 4;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
            __p.__r_.__value_.__l.__size_ = v49;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v55[4 * v54];
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            *(_DWORD *)__p.__r_.__value_.__l.__size_ = v46;
            std::string::size_type v49 = v48 + 4;
          }
          __p.__r_.__value_.__l.__size_ = v49;
          if (v70[1]) {
            sub_1DDA18310((std::__shared_weak_count *)v70[1]);
          }
          ++v45;
        }
        while (v45 < *((_DWORD *)a3 + 1));
      }
      long long v58 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      unint64_t v59 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        unint64_t v60 = 0;
        uint64_t v61 = *(void *)(a1 + 1184);
        do
        {
          *(_DWORD *)(v58 + 4 * v60) -= *(_DWORD *)(v61 + 4 * (v60 % v59));
          ++v60;
        }
        while (v59 > v60);
      }
      v70[0] = 0;
      v70[1] = 0;
      uint64_t v71 = 0;
      sub_1DDB5D6D0((char *)v70, (int *)v58, *((int **)&v58 + 1), v59);
      v69[0] = (long long *)&__dst;
      uint64_t v62 = sub_1DDA4B960((uint64_t **)(a1 + 264), (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, v69);
      uint64_t v63 = (void *)v62[7];
      if (v63)
      {
        v62[8] = (uint64_t)v63;
        operator delete(v63);
        v62[7] = 0;
        v62[8] = 0;
        v62[9] = 0;
      }
      *(_OWORD *)(v62 + 7) = *(_OWORD *)v70;
      v62[9] = v71;
      sub_1DDA1AA18((uint64_t *)&v72);
      uint64_t v44 = (void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_140;
      }
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
LABEL_139:
      operator delete(v44);
LABEL_140:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      return;
    }
LABEL_144:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_1DDB5C878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 73) < 0) {
    operator delete(*(void **)(v26 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5CA1C(uint64_t a1)
{
  unsigned int v6 = 1;
  sub_1DDA1A880(__p, "IFD0:SUBIFD1");
  BOOL v2 = sub_1DDA3FE4C(a1, __p, &v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v2) {
    return v6;
  }
  else {
    return 1;
  }
}

void sub_1DDB5CA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5CAA8(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD1");
  uint64_t v2 = sub_1DDA481F0(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDB5CB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5CB20(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD1");
  uint64_t v2 = sub_1DDA48264(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDB5CB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DDB5CB98(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD1");
  unint64_t v2 = sub_1DDA48394(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDB5CBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB5CC10(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1 + 704;
  sub_1DDA1A880(__p, "IFD0");
  sub_1DDA2A530(v4, __p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  sub_1DDA476FC(a1, __p, &v7);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:SUBIFD0");
  sub_1DDA476FC(a1, __p, &v6);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  sub_1DDA1A880(__p, "IFD1:SUBIFD0");
  sub_1DDA476FC(a1, __p, &v5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if ((void)v7) {
    sub_1DDA480D4(a2, &v7);
  }
  if ((void)v6) {
    sub_1DDA480D4(a2, &v6);
  }
  if ((void)v5) {
    sub_1DDA480D4(a2, &v5);
  }
  if (*((void *)&v5 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v5 + 1));
  }
  if (*((void *)&v6 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v6 + 1));
  }
  if (*((void *)&v7 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_1DDB5CD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a13) {
    sub_1DDA18310(a13);
  }
  if (a15) {
    sub_1DDA18310(a15);
  }
  sub_1DDA18270((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB5CE20(uint64_t a1)
{
  uint64_t v2 = a1 + 656;
  sub_1DDA1A880(__p, "IFD0:SUBIFD1");
  uint64_t v3 = sub_1DDA2A530(v2, __p);
  if ((void **)(a1 + 664) == v3 || (uint64_t v4 = (int *)v3[7], v3[8] == v4))
  {
    LOBYTE(v5) = 0;
    int v6 = 0;
  }
  else
  {
    int v5 = *v4;
    int v6 = 1;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_7;
    }
LABEL_9:
    LOWORD(result) = sub_1DDA27FA0();
    return (unsigned __int16)result;
  }
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  LODWORD(result) = ~(-1 << v5);
  return (unsigned __int16)result;
}

void sub_1DDB5CED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5CEEC(void *a1)
{
  if ((*(unsigned int (**)(void *))(*a1 + 536))(a1) == 32769) {
    return 1;
  }

  return sub_1DDA26BC4(a1);
}

void sub_1DDB5CF68(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 536))(a1);
  if (v8 == 32769)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 384))(&v10, a1);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424))(a1);
    sub_1DDA58378(&v10, (unint64_t *)&v9, a2, a3, &v12);
    if (v11) {
      sub_1DDA18310(v11);
    }
    goto LABEL_8;
  }
  if (v8 == 32770)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 384))(&v10, a1);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424))(a1);
    sub_1DDA58888(&v10, (unint64_t *)&v9, a2, a3, &v12);
    if (v11) {
      sub_1DDA18310(v11);
    }
    sub_1DDAB426C(v12, 0);
    sub_1DDAB4274(v12, 1);
LABEL_8:
    *(_OWORD *)a4 = v12;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
}

void sub_1DDB5D14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB5D178(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1DDA1A880(&__p, "srw");
  unint64_t v4 = a2[2];
  unint64_t v5 = a2[1];
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    unsigned int v45 = a2 + 2;
    if (v10) {
      char v11 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v10);
    }
    else {
      char v11 = 0;
    }
    long long v12 = &v11[24 * v7];
    uint64_t v41 = v11;
    uint64_t v42 = v12;
    uint64_t v44 = &v11[24 * v10];
    long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v12 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)long long v12 = v13;
    memset(&__p, 0, sizeof(__p));
    uint64_t v43 = v12 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v14 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v14;
    if (v15 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1DDA1A880(&__p, "samsung");
  unint64_t v17 = a2[1];
  unint64_t v16 = a2[2];
  if (v17 >= v16)
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    unsigned int v45 = a2 + 2;
    if (v22) {
      int v23 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v22);
    }
    else {
      int v23 = 0;
    }
    unsigned int v24 = &v23[24 * v19];
    uint64_t v41 = v23;
    uint64_t v42 = v24;
    uint64_t v44 = &v23[24 * v22];
    long long v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v24 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unsigned int v24 = v25;
    memset(&__p, 0, sizeof(__p));
    uint64_t v43 = v24 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v26 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v26;
    if (v27 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v17 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1DDA29B20(a1, &__p);
  unint64_t v29 = a2[1];
  unint64_t v28 = a2[2];
  if (v29 >= v28)
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32) {
      unint64_t v32 = 2 * v33;
    }
    if (v33 >= 0x555555555555555) {
      unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v34 = v32;
    }
    unsigned int v45 = a2 + 2;
    if (v34) {
      uint64_t v35 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v34);
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = &v35[24 * v31];
    uint64_t v41 = v35;
    uint64_t v42 = v36;
    uint64_t v44 = &v35[24 * v34];
    long long v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v36 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v36 = v37;
    memset(&__p, 0, sizeof(__p));
    uint64_t v43 = v36 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v38 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v38;
    if (v39 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v29 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1DDB5D4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1DDA2A044((void ***)&__p);
  _Unwind_Resume(a1);
}

id sub_1DDB5D528()
{
  v17[5] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = sub_1DDA409F0();
  unint64_t v5 = objc_msgSend_mutableCopy(v0, v1, v2, v3, v4);

  v16[0] = &unk_1F39AF230;
  v16[1] = &unk_1F39AF260;
  v17[0] = &unk_1F39B4C08;
  v17[1] = &unk_1F39B4C30;
  v16[2] = &unk_1F39AF278;
  uint64_t v16[3] = &unk_1F39AF290;
  v17[2] = &unk_1F39B4C58;
  v17[3] = &unk_1F39B4C80;
  v16[4] = &unk_1F39AF2A8;
  v17[4] = &unk_1F39B4CA8;
  unint64_t v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v6, (uint64_t)v17, (uint64_t)v16, 5);
  objc_msgSend_addEntriesFromDictionary_(v5, v8, (uint64_t)v7, v9, v10);

  uint64_t v14 = objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1C9E8], v11, (uint64_t)v5, v12, v13);

  return v14;
}

void sub_1DDB5D65C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DDB5D698(void *a1)
{
  sub_1DDB5D748(a1);

  JUMPOUT(0x1E01C3DC0);
}

char *sub_1DDB5D6D0(char *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_1DDA18108(result, a4);
    unint64_t v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      int v8 = *a2++;
      *v7++ = (double)v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DDB5D72C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5D748(void *a1)
{
  *a1 = &unk_1F397E7A0;
  uint64_t v2 = (void *)a1[148];
  if (v2)
  {
    a1[149] = v2;
    operator delete(v2);
  }

  return sub_1DDA49A44((uint64_t)a1);
}

void sub_1DDB5D7A8(void *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x4D0uLL);
  sub_1DDB5D83C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDB5D828(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB5D83C(void *a1, void *a2, char *a3, void **a4, void **a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F397EAD8;
  sub_1DDA3F2B0((uint64_t)(a1 + 3), a2, *a3, *a4, *a5);
  a1[3] = &unk_1F397E7A0;
  a1[151] = 0;
  a1[153] = 0;
  a1[152] = 0;
  return a1;
}

void sub_1DDB5D8B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB5D8CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397EAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB5D8EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F397EAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB5D940(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

id sub_1DDB5D968(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"isSonySRFCompressedRaw", v5, v6))
  {
    BOOL v7 = sub_1DDB5DA04(a1);
    int v8 = (void *)MEMORY[0x1E4F1CC28];
    if (v7) {
      int v8 = (void *)MEMORY[0x1E4F1CC38];
    }
    id v9 = v8;
  }
  else
  {
    sub_1DDBCE65C(a1, v3);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v10 = v9;

  return v10;
}

void sub_1DDB5D9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDB5DA04(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v4);
  sub_1DDAC7F20(&v4, (void **)&v6);
  if (v5) {
    sub_1DDA18310(v5);
  }
  if (v6)
  {
    BOOL v2 = sub_1DDA86E18(v6) == 2;
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1))
  {
    BOOL v2 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 864))(a1) > 0xFFF;
  }
  else
  {
    BOOL v2 = 0;
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v2;
}

void sub_1DDB5DB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB5DB1C(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2192))(a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2200))(__p, a1);
  int v6 = 0;
  int v7 = v2;
  uint64_t v5 = &unk_1F396F638;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v3, a1);
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v3 + 600))(v3, __p, &v5, 3);
  if (v4) {
    sub_1DDA18310(v4);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DDB5DC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB5DC9C(uint64_t a1@<X0>, void **a2@<X8>)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 960))(a1);
  if (v4 == 11) {
    goto LABEL_19;
  }
  if (v4 == 10)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v17, a1);
    uint64_t v5 = v17;
    sub_1DDA1A880(&__p, "IFD0:DNGPrivate:SR2Private:SR2SubIFD:BlackLevels");
    if ((*(unsigned int (**)(uint64_t, void **, void **, void))(*(void *)v5 + 248))(v5, &__p, a2, 0))
    {
      int v7 = *a2;
      int v6 = a2[1];
      if (v16 < 0) {
        operator delete(__p);
      }
      uint64_t v8 = v6 - v7;
      if (v18) {
        sub_1DDA18310(v18);
      }
      if (v8 == 32) {
        return;
      }
    }
    else
    {
      if (v16 < 0) {
        operator delete(__p);
      }
      if (v18) {
        sub_1DDA18310(v18);
      }
    }
    char v9 = *a2;
    if (*a2)
    {
      a2[1] = v9;
      operator delete(v9);
    }
LABEL_19:
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 72))(&__p, a1);
    uint64_t v10 = __p;
    char v11 = off_1EAB8A908[0];
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = sub_1DDB5DF40;
    v13[3] = &unk_1E6D05198;
    v13[4] = a1;
    sub_1DDAB6440((uint64_t)v10, v11, v12, v13, a2);
    if (v15) {
      sub_1DDA18310(v15);
    }
    return;
  }

  sub_1DDBCFB0C(a1, a2);
}

void sub_1DDB5DEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  unint64_t v22 = *(std::__shared_weak_count **)(v20 - 40);
  if (v22) {
    sub_1DDA18310(v22);
  }
  int v23 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB5DF40(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_1DDB5DF48(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1) == 7)
  {
    return 1;
  }
  if (sub_1DDA2E588(a1)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2792))(a1);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 2800);
      return v3(a1);
    }
  }
  return result;
}

uint64_t sub_1DDB5E094(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v7);
  sub_1DDAC7F20(&v7, (void **)&v9);
  if (v8) {
    sub_1DDA18310(v8);
  }
  if (v9)
  {
    int v1 = sub_1DDA868F4(v9);
    int v2 = v1 & 1;
    if ((v1 & 0x10) != 0) {
      int v2 = 0;
    }
    if ((~v1 & 0x11) != 0) {
      int v3 = v2;
    }
    else {
      int v3 = 1;
    }
    if (v1 == 255) {
      unsigned int v4 = 0;
    }
    else {
      unsigned int v4 = v3;
    }
    if (v1) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v10) {
    sub_1DDA18310(v10);
  }
  return v5;
}

void sub_1DDB5E14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5E164(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2808))(a1);
  if (v2 == 3 || v2 == 5) {
    return 1;
  }
  if (v2 != 4) {
    return 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v11, a1);
  sub_1DDAC7F20(&v11, (void **)&v13);
  if (v12) {
    sub_1DDA18310(v12);
  }
  if (v13)
  {
    __int16 v5 = sub_1DDA868F4(v13);
    int v6 = v5 & 1;
    if ((v5 & 0x10) != 0) {
      int v6 = 0;
    }
    if ((~v5 & 0x11) != 0) {
      int v7 = v6;
    }
    else {
      int v7 = 1;
    }
    if (v5 == 255) {
      int v8 = 0;
    }
    else {
      int v8 = v7;
    }
    if ((v5 & 0x100) != 0) {
      unsigned int v9 = 0;
    }
    else {
      unsigned int v9 = v8;
    }
    if ((unsigned __int16)(v5 - 1) <= 0xFEFEu) {
      uint64_t v4 = v9;
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v14) {
    sub_1DDA18310(v14);
  }
  return v4;
}

void sub_1DDB5E288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5E2A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2800))();
}

void sub_1DDB5E344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB5E474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB5E538(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2784))();
}

uint64_t sub_1DDB5E564(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2800))();
}

BOOL sub_1DDB5E590(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 2824))(&v4);
  int v1 = v4;
  int v2 = v5;
  if (v4)
  {
    __int16 v5 = v4;
    operator delete(v4);
  }
  return v2 != v1;
}

void sub_1DDB5E600(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 496) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_1DDB4C53C(a1, a2, (_DWORD *)a3);
  if ((sub_1DDA2E580(a1) & 1) == 0)
  {
    (*(void (**)(double **__return_ptr, uint64_t))(*(void *)a1 + 2824))(&v38, a1);
    unsigned int v9 = v38;
    uint64_t v10 = (char *)v39 - (char *)v38;
    if (v39 == v38)
    {
      if (!v39) {
        return;
      }
    }
    else
    {
      if ((v10 & 8) != 0 || (uint64_t v11 = v10 >> 3, (unint64_t)((v10 >> 3) - 6) >= 0x1D))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LOBYTE(v36[0]) = 1;
      unint64_t v12 = (unint64_t)*v38;
      if (v12 - 9 < 0xFFFFFFFFFFFFFFF8 || (unint64_t v13 = (unint64_t)(v11 - 4) >> 1, v13 < v12))
      {
        unint64_t v34 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v34, "RawCameraException");
        __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v14 = &v38[2 * v12];
      unint64_t v15 = (unint64_t)v14[1];
      if (v15 - 9 < 0xFFFFFFFFFFFFFFF8 || v13 < v15)
      {
        uint64_t v35 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v35, "RawCameraException");
        __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v17 = 0;
      long long v18 = v14 + 2;
      do
      {
        uint64_t v19 = (char *)v36 + 2 * v17;
        double v20 = v18[v17];
        *((_WORD *)v19 + 1) = (int)v9[v17 + 1];
        *((_WORD *)v19 + 9) = (int)v20;
        ++v17;
      }
      while (v12 != v17);
      unint64_t v21 = &v9[v12];
      int64x2_t v22 = vcvtq_s64_f64(*(float64x2_t *)(v21 + 7));
      int32x2_t v23 = vmovn_s64(v22);
      int32x2_t v24 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v21 + 5)));
      int32x2_t v25 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v21 + 3)));
      *(int32x2_t *)v22.i8 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v21 + 1)));
      *(int8x16_t *)&v37[2] = vqtbl4q_s8(*(int8x16x4_t *)(&v5 - 3), (int8x16_t)xmmword_1DDBFF3A0);
      uint64_t v26 = (float64x2_t *)&v9[3 * v12];
      int64x2_t v27 = vcvtq_s64_f64(v26[4]);
      int32x2_t v28 = vmovn_s64(v27);
      int32x2_t v29 = vmovn_s64(vcvtq_s64_f64(v26[3]));
      int32x2_t v30 = vmovn_s64(vcvtq_s64_f64(v26[2]));
      *(int32x2_t *)v27.i8 = vmovn_s64(vcvtq_s64_f64(v26[1]));
      *(int8x16_t *)&v37[18] = vqtbl4q_s8(*(int8x16x4_t *)(&v6 - 3), (int8x16_t)xmmword_1DDBFF3A0);
      long long v31 = v36[0];
      *(_OWORD *)(a3 + 120) = v36[1];
      *(_OWORD *)(a3 + 104) = v31;
      long long v32 = *(_OWORD *)&v37[16];
      *(_OWORD *)(a3 + 136) = *(_OWORD *)v37;
      *(_OWORD *)(a3 + 152) = v32;
      *(_WORD *)(a3 + 168) = *(_WORD *)&v37[32];
    }
    int v39 = v9;
    operator delete(v9);
  }
}

void sub_1DDB5E8C0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(void *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDB5E8FC(uint64_t a1, unsigned int a2)
{
  int v3 = sub_1DDABC160(a1, a2);
  if (sub_1DDA2E580(a1))
  {
    id v4 = v3;
  }
  else
  {
    (*(void (**)(double **__return_ptr, uint64_t))(*(void *)a1 + 2824))(&v256, a1);
    unsigned int v9 = v256;
    uint64_t v10 = (char *)v257 - (char *)v256;
    if (v257 == v256)
    {
      id v232 = v3;
    }
    else
    {
      if ((v10 & 8) != 0 || (uint64_t v11 = v10 >> 3, (unint64_t)((v10 >> 3) - 6) >= 0x1D))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v12 = (unint64_t)*v256;
      v237[0] = 1;
      unint64_t v13 = (unint64_t)(v11 - 4) >> 1;
      if (v12 - 1 > 7 || v13 < v12)
      {
        int v235 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v235, "RawCameraException");
        __cxa_throw(v235, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v15 = &v256[2 * v12];
      unint64_t v16 = (unint64_t)v15[1];
      if (v16 - 1 > 7 || v13 < v16)
      {
        int v236 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v236, "RawCameraException");
        __cxa_throw(v236, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v18 = 0;
      uint64_t v19 = (char *)(v15 + 2);
      do
      {
        double v20 = &v237[2 * v18];
        double v21 = *(double *)&v19[8 * v18];
        *((_WORD *)v20 + 1) = (int)v9[v18 + 1];
        *((_WORD *)v20 + 9) = (int)v21;
        ++v18;
      }
      while (v12 != v18);
      int64x2_t v22 = &v9[v12];
      int64x2_t v23 = vcvtq_s64_f64(*(float64x2_t *)(v22 + 7));
      int32x2_t v24 = vmovn_s64(v23);
      int32x2_t v25 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v22 + 5)));
      int32x2_t v26 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v22 + 3)));
      *(int32x2_t *)v23.i8 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v22 + 1)));
      int8x16_t v254 = vqtbl4q_s8(*(int8x16x4_t *)(&v5 - 3), (int8x16_t)xmmword_1DDBFF3A0);
      int64x2_t v27 = (float64x2_t *)&v9[3 * v12];
      int64x2_t v28 = vcvtq_s64_f64(v27[4]);
      int32x2_t v29 = vmovn_s64(v28);
      int32x2_t v30 = vmovn_s64(vcvtq_s64_f64(v27[3]));
      int32x2_t v31 = vmovn_s64(vcvtq_s64_f64(v27[2]));
      *(int32x2_t *)v28.i8 = vmovn_s64(vcvtq_s64_f64(v27[1]));
      int8x16_t v255 = vqtbl4q_s8(*(int8x16x4_t *)(&v6 - 3), (int8x16_t)xmmword_1DDBFF3A0);
      long long v32 = sub_1DDA7A98C(v3, @"PanasonicChromaticAberrationExtended", 0);
      uint64_t v36 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v33, 1, v34, v35);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v37, (uint64_t)v36, @"ChAber_SW_Extended", v38);

      uint64_t v42 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v39, v238, v40, v41);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v43, (uint64_t)v42, @"CA_blu0", v44);

      std::string::size_type v48 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v45, v239, v46, v47);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v49, (uint64_t)v48, @"CA_blu1", v50);

      unint64_t v54 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v51, v240, v52, v53);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v55, (uint64_t)v54, @"CA_blu2", v56);

      unint64_t v60 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v57, v241, v58, v59);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v61, (uint64_t)v60, @"CA_blu3", v62);

      int v66 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v63, v242, v64, v65);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v67, (uint64_t)v66, @"CA_blu4", v68);

      uint64_t v72 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v69, v243, v70, v71);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v73, (uint64_t)v72, @"CA_blu5", v74);

      uint64_t v78 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v75, v244, v76, v77);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v79, (uint64_t)v78, @"CA_blu6", v80);

      uint64_t v84 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v81, v245, v82, v83);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v85, (uint64_t)v84, @"CA_blu7", v86);

      __int16 v90 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v87, v246, v88, v89);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v91, (uint64_t)v90, @"CA_red0", v92);

      float v96 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v93, v247, v94, v95);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v97, (uint64_t)v96, @"CA_red1", v98);

      uint64_t v102 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v99, v248, v100, v101);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v103, (uint64_t)v102, @"CA_red2", v104);

      uint64_t v108 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v105, v249, v106, v107);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v109, (uint64_t)v108, @"CA_red3", v110);

      uint64_t v114 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v111, v250, v112, v113);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v115, (uint64_t)v114, @"CA_red4", v116);

      double v120 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v117, v251, v118, v119);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v121, (uint64_t)v120, @"CA_red5", v122);

      float v126 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v123, v252, v124, v125);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v127, (uint64_t)v126, @"CA_red6", v128);

      float v132 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v129, v253, v130, v131);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v133, (uint64_t)v132, @"CA_red7", v134);

      float v138 = objc_msgSend_numberWithShort_(NSNumber, v135, v254.i16[0], v136, v137);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v139, (uint64_t)v138, @"BG0", v140);

      int v144 = objc_msgSend_numberWithShort_(NSNumber, v141, v254.i16[1], v142, v143);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v145, (uint64_t)v144, @"BG1", v146);

      uint64_t v150 = objc_msgSend_numberWithShort_(NSNumber, v147, v254.i16[2], v148, v149);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v151, (uint64_t)v150, @"BG2", v152);

      int v156 = objc_msgSend_numberWithShort_(NSNumber, v153, v254.i16[3], v154, v155);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v157, (uint64_t)v156, @"BG3", v158);

      int v162 = objc_msgSend_numberWithShort_(NSNumber, v159, v254.i16[4], v160, v161);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v163, (uint64_t)v162, @"BG4", v164);

      float v168 = objc_msgSend_numberWithShort_(NSNumber, v165, v254.i16[5], v166, v167);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v169, (uint64_t)v168, @"BG5", v170);

      int v174 = objc_msgSend_numberWithShort_(NSNumber, v171, v254.i16[6], v172, v173);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v175, (uint64_t)v174, @"BG6", v176);

      uint64_t v180 = objc_msgSend_numberWithShort_(NSNumber, v177, v254.i16[7], v178, v179);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v181, (uint64_t)v180, @"BG7", v182);

      int v186 = objc_msgSend_numberWithShort_(NSNumber, v183, v255.i16[0], v184, v185);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v187, (uint64_t)v186, @"RG0", v188);

      int v192 = objc_msgSend_numberWithShort_(NSNumber, v189, v255.i16[1], v190, v191);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v193, (uint64_t)v192, @"RG1", v194);

      int v198 = objc_msgSend_numberWithShort_(NSNumber, v195, v255.i16[2], v196, v197);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v199, (uint64_t)v198, @"RG2", v200);

      uint64_t v204 = objc_msgSend_numberWithShort_(NSNumber, v201, v255.i16[3], v202, v203);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v205, (uint64_t)v204, @"RG3", v206);

      int v210 = objc_msgSend_numberWithShort_(NSNumber, v207, v255.i16[4], v208, v209);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v211, (uint64_t)v210, @"RG4", v212);

      unsigned int v216 = objc_msgSend_numberWithShort_(NSNumber, v213, v255.i16[5], v214, v215);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v217, (uint64_t)v216, @"RG5", v218);

      uint64_t v222 = objc_msgSend_numberWithShort_(NSNumber, v219, v255.i16[6], v220, v221);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v223, (uint64_t)v222, @"RG6", v224);

      int v228 = objc_msgSend_numberWithShort_(NSNumber, v225, v255.i16[7], v226, v227);
      objc_msgSend_setObject_forKeyedSubscript_(v32, v229, (uint64_t)v228, @"RG7", v230);

      id v231 = v3;
    }
    if (v256)
    {
      int v257 = v256;
      operator delete(v256);
    }
  }

  return v3;
}

void sub_1DDB5F154(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v4 - 56);
  if (v5)
  {
    *(void *)(v4 - 48) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

BOOL sub_1DDB5F240(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  BOOL v4 = sub_1DDAC8A08(v2, @"applyLensCorrection", v3, &unk_1F397F6C8);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDB5F2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5F304()
{
  return 0;
}

uint64_t sub_1DDB5F30C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDAB5FB8(v2, @"lensCorrectionFilter", v3, &unk_1F397F6E8);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDB5F3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB5F3D0()
{
  return 0;
}

void sub_1DDB5F3D8(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v4 = v6;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  sub_1DDAB6440(v4, @"lensCorrectionParameters", v5, &unk_1F397F708, a2);
  if (v7) {
    sub_1DDA18310(v7);
  }
}

void sub_1DDB5F48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB5F4A4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_1DDB5F4B0(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v4 = v6;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  sub_1DDAB6440(v4, @"chromaticAberrationParameters", v5, &unk_1F397F728, a2);
  if (v7) {
    sub_1DDA18310(v7);
  }
}

void sub_1DDB5F564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB5F57C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1DDB5F588()
{
  return 2;
}

void sub_1DDB5F590(uint64_t a1)
{
  uint64_t v6 = &unk_1F39665D8;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:0x14");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v1 + 600))(v1, __p, &v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDB5F670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DDB5F6A0(uint64_t *a1, void *a2)
{
  id v3 = a2;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v7 = objc_msgSend_dataWithContentsOfFile_(MEMORY[0x1E4F1C9B8], v4, (uint64_t)v3, v5, v6);
  int v8 = (void *)*a1;
  *a1 = v7;

  unsigned int v9 = (void *)MEMORY[0x1E4F442D8];
  uint64_t v14 = objc_msgSend_pathExtension(v3, v10, v11, v12, v13);
  uint64_t v18 = objc_msgSend_typeWithFilenameExtension_(v9, v15, (uint64_t)v14, v16, v17);
  uint64_t v23 = objc_msgSend_identifier(v18, v19, v20, v21, v22);
  int32x2_t v24 = (void *)a1[1];
  a1[1] = v23;

  return a1;
}

void sub_1DDB5F744(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DDB5F780(float a1, uint64_t a2, void *a3, void *a4)
{
  id v13 = a3;
  id v6 = a4;
  uint64_t v10 = objc_msgSend_stringWithFormat_(NSString, v7, @"%af\t// %g", v8, v9, a1, a1);
  objc_msgSend_setValue_forKey_(v13, v11, (uint64_t)v10, (uint64_t)v6, v12);
}

void sub_1DDB5F81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDB5F840(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5)
{
  id v20 = a2;
  id v11 = a3;
  if (a5)
  {
    uint64_t v12 = 0;
    do
    {
      id v13 = objc_msgSend_stringWithFormat_(NSString, v8, @"%af\t// %g", v9, v10, *(float *)(a4 + 4 * v12), *(float *)(a4 + 4 * v12));
      uint64_t v17 = objc_msgSend_stringWithFormat_(NSString, v14, @"%@[%d]", v15, v16, v11, v12);
      objc_msgSend_setValue_forKey_(v20, v18, (uint64_t)v13, (uint64_t)v17, v19);

      ++v12;
    }
    while (a5 != v12);
  }
}

void sub_1DDB5F934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDB5F964(uint64_t a1, void *a2, uint64_t a3)
{
  id v17 = a2;
  sub_1DDB5F780(*(float *)a3, (uint64_t)v17, v17, @"otrc.s0");
  sub_1DDB5F780(*(float *)(a3 + 4), v4, v17, @"otrc.y1");
  sub_1DDB5F780(*(float *)(a3 + 8), v5, v17, @"otrc.s1");
  sub_1DDB5F780(*(float *)(a3 + 12), v6, v17, @"otrc.y2");
  sub_1DDB5F780(*(float *)(a3 + 16), v7, v17, @"otrc.s2");
  sub_1DDB5F780(*(float *)(a3 + 20), v8, v17, @"otrc.y3");
  sub_1DDB5F780(*(float *)(a3 + 24), v9, v17, @"otrc.s3");
  sub_1DDB5F780(*(float *)(a3 + 28), v10, v17, @"otrc.s4");
  uint64_t v14 = objc_msgSend_numberWithBool_(NSNumber, v11, *(unsigned __int8 *)(a3 + 32), v12, v13);
  objc_msgSend_setObject_forKeyedSubscript_(v17, v15, (uint64_t)v14, @"otrc.disabled", v16);
}

void sub_1DDB5FA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1DDB5FA98(uint64_t a1, uint64_t *a2)
{
  memset(v535, 0, 96);
  long long v534 = 0u;
  long long v532 = 0u;
  memset(v533, 0, sizeof(v533));
  long long v530 = 0u;
  long long v531 = 0u;
  long long v528 = 0u;
  long long v529 = 0u;
  long long v526 = 0u;
  long long v527 = 0u;
  long long v524 = 0u;
  long long v525 = 0u;
  long long v522 = 0u;
  long long v523 = 0u;
  long long v520 = 0u;
  long long v521 = 0u;
  uint64_t v2 = *a2;
  uint64_t v3 = sub_1DDA2E598(*a2);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v2 + 2696))(&v520, v2, v3);
  uint64_t v8 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v4, v5, v6, v7);
  uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, v9, @"%#x", v10, v11, v520);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v13, (uint64_t)v12, @"pattern", v14);

  uint64_t v18 = objc_msgSend_numberWithInt_(NSNumber, v15, DWORD1(v520), v16, v17);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v19, (uint64_t)v18, @"bitmapType", v20);

  int32x2_t v24 = objc_msgSend_numberWithBool_(NSNumber, v21, BYTE8(v520), v22, v23);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v25, (uint64_t)v24, @"despeckleBlackNoiseEnabled", v26);

  int32x2_t v30 = objc_msgSend_numberWithBool_(NSNumber, v27, BYTE9(v520), v28, v29);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v31, (uint64_t)v30, @"blackLevelExtendEnabled", v32);

  sub_1DDB5F780(*((float *)&v520 + 3), v33, v8, @"blackDespeckleNoiseFactor");
  long long v37 = objc_msgSend_numberWithBool_(NSNumber, v34, v521, v35, v36);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v38, (uint64_t)v37, @"greenSplitEnabled", v39);

  uint64_t v43 = objc_msgSend_numberWithBool_(NSNumber, v40, BYTE1(v521), v41, v42);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v44, (uint64_t)v43, @"unknownDNGCamera", v45);

  sub_1DDB5F780(*((float *)&v521 + 1), v46, v8, @"greenSplitRed");
  sub_1DDB5F780(*((float *)&v521 + 2), v47, v8, @"greenSplitGreen1");
  sub_1DDB5F780(*((float *)&v521 + 3), v48, v8, @"greenSplitBlue");
  uint64_t v52 = objc_msgSend_numberWithInt_(NSNumber, v49, v522, v50, v51);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v53, (uint64_t)v52, @"greenBayerSplit", v54);

  uint64_t v58 = objc_msgSend_numberWithBool_(NSNumber, v55, BYTE4(v522), v56, v57);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v59, (uint64_t)v58, @"HREnabled", v60);

  sub_1DDB5F780(*((float *)&v522 + 2), v61, v8, @"HRGreenClip");
  uint64_t v65 = objc_msgSend_numberWithBool_(NSNumber, v62, BYTE12(v522), v63, v64);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v66, (uint64_t)v65, @"SPEEnabled", v67);

  sub_1DDB5F780(*(float *)&v523, v68, v8, @"SPEDeadNoiseFactor");
  sub_1DDB5F780(*((float *)&v523 + 1), v69, v8, @"SPEDeadNoticeabilityFactor");
  sub_1DDB5F780(*((float *)&v523 + 2), v70, v8, @"SPEHotNoiseFactor");
  uint64_t v74 = objc_msgSend_numberWithBool_(NSNumber, v71, BYTE12(v523), v72, v73);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v75, (uint64_t)v74, @"DESEnabled", v76);

  sub_1DDB5F780(*(float *)&v524, v77, v8, @"DESNoiseFactor");
  sub_1DDB5F780(*((float *)&v524 + 1), v78, v8, @"DESSignalToNoiseThreshold");
  uint64_t v82 = objc_msgSend_numberWithInt_(NSNumber, v79, DWORD2(v524), v80, v81);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v83, (uint64_t)v82, @"DESDoEarlyOut", v84);

  sub_1DDB5F780(*((float *)&v524 + 3), v85, v8, @"DESEarlyOutFactor");
  uint64_t v89 = objc_msgSend_numberWithInt_(NSNumber, v86, v525, v87, v88);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v90, (uint64_t)v89, @"DESDoRed", v91);

  uint64_t v95 = objc_msgSend_numberWithInt_(NSNumber, v92, DWORD1(v525), v93, v94);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v96, (uint64_t)v95, @"DESDoGreen", v97);

  uint64_t v101 = objc_msgSend_numberWithInt_(NSNumber, v98, DWORD2(v525), v99, v100);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v102, (uint64_t)v101, @"DESDoBlue", v103);

  uint64_t v107 = objc_msgSend_numberWithInt_(NSNumber, v104, HIDWORD(v525), v105, v106);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v108, (uint64_t)v107, @"DESTaperMethod", v109);

  uint64_t v113 = objc_msgSend_numberWithInt_(NSNumber, v110, v526, v111, v112);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v114, (uint64_t)v113, @"DESMethod", v115);

  uint64_t v119 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v116, BYTE8(v526), v117, v118);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v120, (uint64_t)v119, @"CAParameters.ChAber_SW_Extended", v121);

  uint64_t v125 = 0;
  float v126 = (__int16 *)&v529 + 5;
  do
  {
    float v127 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v122, (unsigned __int16)*(v126 - 24), v123, v124);
    uint64_t v131 = objc_msgSend_stringWithFormat_(NSString, v128, @"CAParameters.CA_blu[%d]", v129, v130, v125);
    objc_msgSend_setValue_forKey_(v8, v132, (uint64_t)v127, (uint64_t)v131, v133);

    uint64_t v137 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v134, (unsigned __int16)*(v126 - 16), v135, v136);
    int v141 = objc_msgSend_stringWithFormat_(NSString, v138, @"CAParameters.CA_red[%d]", v139, v140, v125);
    objc_msgSend_setValue_forKey_(v8, v142, (uint64_t)v137, (uint64_t)v141, v143);

    uint64_t v147 = objc_msgSend_numberWithShort_(NSNumber, v144, *(v126 - 8), v145, v146);
    uint64_t v151 = objc_msgSend_stringWithFormat_(NSString, v148, @"CAParameters.BG[%d]", v149, v150, v125);
    objc_msgSend_setValue_forKey_(v8, v152, (uint64_t)v147, (uint64_t)v151, v153);

    uint64_t v157 = objc_msgSend_numberWithShort_(NSNumber, v154, *v126, v155, v156);
    uint64_t v161 = objc_msgSend_stringWithFormat_(NSString, v158, @"CAParameters.RG[%d]", v159, v160, v125);
    objc_msgSend_setValue_forKey_(v8, v162, (uint64_t)v157, (uint64_t)v161, v163);

    ++v125;
    ++v126;
  }
  while (v125 != 8);
  uint64_t v164 = objc_msgSend_numberWithBool_(NSNumber, v122, BYTE10(v530), v123, v124);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v165, (uint64_t)v164, @"CACorrectionEnabled", v166);

  sub_1DDB5F780(*((float *)&v530 + 3), v167, v8, @"CACorrectionRedPower");
  sub_1DDB5F780(*(float *)&v531, v168, v8, @"CACorrectionBluePower");
  sub_1DDB5F780(*((float *)&v531 + 1), v169, v8, @"CACorrectionRedScale");
  sub_1DDB5F780(*((float *)&v531 + 2), v170, v8, @"CACorrectionBlueScale");
  int v174 = objc_msgSend_numberWithInt_(NSNumber, v171, HIDWORD(v531), v172, v173);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v175, (uint64_t)v174, @"fullWidth", v176);

  uint64_t v180 = objc_msgSend_numberWithInt_(NSNumber, v177, v532, v178, v179);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v181, (uint64_t)v180, @"fullHeight", v182);

  int v186 = objc_msgSend_numberWithBool_(NSNumber, v183, BYTE4(v532), v184, v185);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v187, (uint64_t)v186, @"vignetteCorrectionEnabled", v188);

  sub_1DDB5F780(*((float *)&v532 + 2), v189, v8, @"vignetteCorrectionPower");
  sub_1DDB5F780(*((float *)&v532 + 3), v190, v8, @"vignetteCorrectionAmount");
  uint64_t v194 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v191, LOBYTE(v533[0]), v192, v193);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v195, (uint64_t)v194, @"fujiCAParameters.FujiCAEnable", v196);

  if (LOBYTE(v533[0]))
  {
    uint64_t v200 = objc_msgSend_numberWithInt_(NSNumber, v197, DWORD1(v533[0]), v198, v199);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v201, (uint64_t)v200, @"fujiCAParameters.numberOfPoints", v202);

    uint64_t v206 = objc_msgSend_numberWithInt_(NSNumber, v203, DWORD2(v533[0]), v204, v205);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v207, (uint64_t)v206, @"fujiCAParameters.maxDistance", v208);

    sub_1DDB5F840(v209, v8, @"fujiCAParameters.CA_LR", (uint64_t)v533 + 12, 16);
    sub_1DDB5F840(v210, v8, @"fujiCAParameters.CA_red", (uint64_t)&v533[4] + 12, 16);
    sub_1DDB5F840(v211, v8, @"fujiCAParameters.CA_blu", (uint64_t)&v533[8] + 12, 16);
  }
  uint64_t v212 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v197, BYTE12(v534), v198, v199);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v213, (uint64_t)v212, @"fujiLensParameters.FujiLensCorrectionEnable", v214);

  if (BYTE12(v534))
  {
    unsigned int v219 = objc_msgSend_numberWithInt_(NSNumber, v216, LODWORD(v535[0]), v217, v218);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v220, (uint64_t)v219, @"fujiLensParameters.maxDistance", v221);

    int v225 = objc_msgSend_numberWithInt_(NSNumber, v222, DWORD1(v535[0]), v223, v224);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v226, (uint64_t)v225, @"fujiLensParameters.numberOfPoints", v227);

    sub_1DDB5F840(v228, v8, @"fujiLensParameters.lengthRatio", (uint64_t)v535 + 8, 16);
    sub_1DDB5F840(v229, v8, @"fujiLensParameters.factor", (uint64_t)&v535[4] + 8, 16);
  }
  sub_1DDB5F780(v536, v215, v8, off_1EAB8A928[0]);
  sub_1DDB5F780(v537, v230, v8, off_1EAB8A8F8[0]);
  int v234 = objc_msgSend_numberWithBool_(NSNumber, v231, v538, v232, v233);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v235, (uint64_t)v234, @"chromaBlurEnabled", v236);

  unsigned __int16 v240 = objc_msgSend_numberWithBool_(NSNumber, v237, v539, v238, v239);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v241, (uint64_t)v240, @"noAntiAliasingFilter", v242);

  sub_1DDB5F780(v540, v243, v8, off_1EAB8AA30[0]);
  sub_1DDB5F780(v541, v244, v8, @"chromaBlurRadius2");
  sub_1DDB5F780(v542, v245, v8, off_1EAB8A940[0]);
  sub_1DDB5F780(v543, v246, v8, @"cnrNoiseFactor");
  sub_1DDB5F780(v544, v247, v8, @"cnrRadius");
  sub_1DDB5F780(v545, v248, v8, @"cnrAmount");
  sub_1DDB5F780(v546, v249, v8, off_1EAB8AA38[0]);
  sub_1DDB5F780(v547, v250, v8, @"chromaBlurEdgeThreshold2");
  sub_1DDB5F780(v548, v251, v8, @"adaptiveNormalizationNoiseFactor");
  int8x16_t v255 = objc_msgSend_numberWithBool_(NSNumber, v252, v549, v253, v254);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v256, (uint64_t)v255, @"adaptiveNormalizationSimple", v257);

  signed int v261 = objc_msgSend_numberWithInt_(NSNumber, v258, v550, v259, v260);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v262, (uint64_t)v261, @"adaptiveNormalizationDirectionFindingMethod", v263);

  int v267 = objc_msgSend_numberWithBool_(NSNumber, v264, v551, v265, v266);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v268, (uint64_t)v267, @"fujiGreenReconstructionCopyRaw", v269);

  int v273 = objc_msgSend_numberWithBool_(NSNumber, v270, v552, v271, v272);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v274, (uint64_t)v273, @"fujiGreenReconstructionHighFrequency", v275);

  sub_1DDB5F780(v553, v276, v8, @"fujiDirectionsNoiseFactor");
  unint64_t v280 = objc_msgSend_numberWithInt_(NSNumber, v277, v554, v278, v279);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v281, (uint64_t)v280, @"fujiGreenSmoothingEnabled", v282);

  uint64_t v286 = objc_msgSend_numberWithInt_(NSNumber, v283, v555, v284, v285);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v287, (uint64_t)v286, @"fujiGreenSmoothingThreshold", v288);

  sub_1DDB5F780(v556, v289, v8, @"fujiGreenSmoothingSharpeningAmount");
  sub_1DDB5F780(v557, v290, v8, @"fujiGreenSmoothingCornerThreshold");
  sub_1DDB5F780(v558, v291, v8, @"fujiGreenSmoothingAdjuster");
  uint64_t v295 = objc_msgSend_numberWithBool_(NSNumber, v292, v559, v293, v294);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v296, (uint64_t)v295, @"fujiRedBluePlanarValidity", v297);

  uint64_t v301 = objc_msgSend_numberWithInt_(NSNumber, v298, v560, v299, v300);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v302, (uint64_t)v301, @"redBlueDefringe", v303);

  unint64_t v307 = objc_msgSend_numberWithInt_(NSNumber, v304, v561, v305, v306);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v308, (uint64_t)v307, @"redBlueRangeLimit", v309);

  int v313 = objc_msgSend_numberWithInt_(NSNumber, v310, v562, v311, v312);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v314, (uint64_t)v313, @"redBlueGradientThreshold", v315);

  int v319 = objc_msgSend_numberWithInt_(NSNumber, v316, v563, v317, v318);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v320, (uint64_t)v319, @"redBlueDumbOnly", v321);

  int v325 = objc_msgSend_numberWithInt_(NSNumber, v322, v564, v323, v324);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v326, (uint64_t)v325, @"redBlueGreenOnly", v327);

  int v331 = objc_msgSend_numberWithInt_(NSNumber, v328, v565, v329, v330);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v332, (uint64_t)v331, @"colorSmoothingEnabled", v333);

  sub_1DDB5F780(v566, v334, v8, @"colorSmoothingSharpnessAmount");
  sub_1DDB5F780(v567, v335, v8, @"resampleHorizScale");
  sub_1DDB5F780(v568, v336, v8, @"resampleVertScale");
  sub_1DDB5F780(v569, v337, v8, @"resampleVSharpness");
  sub_1DDB5F780(v570, v338, v8, @"minimumSignalToNoiseRatio");
  sub_1DDB5F780(v571, v339, v8, @"maximumSignalToNoiseRatio");
  sub_1DDB5F840(v340, v8, @"factors", (uint64_t)&v572, 3);
  sub_1DDB5F840(v341, v8, @"RVector", (uint64_t)&v573, 3);
  sub_1DDB5F840(v342, v8, @"GVector", (uint64_t)&v574, 3);
  sub_1DDB5F840(v343, v8, @"BVector", (uint64_t)&v575, 3);
  sub_1DDB5F840(v344, v8, @"bias", (uint64_t)&v576, 3);
  sub_1DDB5F840(v345, v8, @"clipLevels", (uint64_t)v577, 3);
  uint64_t v349 = objc_msgSend_numberWithInt_(NSNumber, v346, v577[3], v347, v348);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v350, (uint64_t)v349, @"biasOff", v351);

  uint64_t v355 = objc_msgSend_numberWithBool_(NSNumber, v352, v578, v353, v354);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v356, (uint64_t)v355, @"boostEnabled", v357);

  sub_1DDB5F964(v358, v8, (uint64_t)v579);
  sub_1DDB5F780(v579[9], v359, v8, @"gamma");
  sub_1DDB5F780(v579[10], v360, v8, @"shadowDesaturatePoint");
  sub_1DDB5F780(v579[11], v361, v8, @"shadowDesaturateWidth");
  sub_1DDB5F780(v579[12], v362, v8, @"shadowDesaturateAmount");
  sub_1DDB5F780(v579[13], v363, v8, off_1EAB8A950[0]);
  sub_1DDB5F780(v579[14], v364, v8, off_1EAB8A958[0]);
  unsigned int v368 = objc_msgSend_numberWithInt_(NSNumber, v365, LODWORD(v579[15]), v366, v367);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v369, (uint64_t)v368, @"ISO", v370);

  sub_1DDB5F840(v371, v8, @"blackLevels", (uint64_t)&v580, 4);
  sub_1DDB5F840(v372, v8, @"darkNoise", (uint64_t)v581, 4);
  int v376 = objc_msgSend_numberWithBool_(NSNumber, v373, v581[16], v374, v375);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v377, (uint64_t)v376, @"individualQuadratics", v378);

  uint64_t v382 = 0;
  int v383 = (float *)v582;
  do
  {
    int v384 = objc_msgSend_stringWithFormat_(NSString, v379, @"signalNoiseModels[%d].a", v380, v381, v382);
    sub_1DDB5F780(*(v383 - 3), (uint64_t)v384, v8, v384);

    unsigned int v388 = objc_msgSend_stringWithFormat_(NSString, v385, @"signalNoiseModels[%d].b", v386, v387, v382);
    sub_1DDB5F780(*(v383 - 2), (uint64_t)v388, v8, v388);

    unsigned int v392 = objc_msgSend_stringWithFormat_(NSString, v389, @"signalNoiseModels[%d].c", v390, v391, v382);
    sub_1DDB5F780(*(v383 - 1), (uint64_t)v392, v8, v392);

    unsigned int v396 = objc_msgSend_stringWithFormat_(NSString, v393, @"signalNoiseModels[%d].PRNU", v394, v395, v382);
    sub_1DDB5F780(*v383, (uint64_t)v396, v8, v396);

    ++v382;
    v383 += 4;
  }
  while (v382 != 4);
  int v397 = objc_msgSend_numberWithBool_(NSNumber, v379, v582[52], v380, v381);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v398, (uint64_t)v397, @"moireSuppressionEnabled", v399);

  sub_1DDB5F780(v583, v400, v8, @"hueMagMR");
  sub_1DDB5F780(v584, v401, v8, @"hueMagRY");
  sub_1DDB5F780(v585, v402, v8, @"hueMagYG");
  sub_1DDB5F780(v586, v403, v8, @"hueMagGC");
  sub_1DDB5F780(v587, v404, v8, @"hueMagCB");
  sub_1DDB5F780(v588, v405, v8, @"hueMagBM");
  uint64_t v409 = objc_msgSend_numberWithInt_(NSNumber, v406, v589, v407, v408);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v410, (uint64_t)v409, @"bitmapType", v411);

  unsigned int v415 = objc_msgSend_numberWithBool_(NSNumber, v412, v590, v413, v414);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v416, (uint64_t)v415, @"luminanceNoiseReductionEnabled", v417);

  long long v421 = objc_msgSend_numberWithBool_(NSNumber, v418, v591, v419, v420);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v422, (uint64_t)v421, @"chromaNoiseReductionEnabled", v423);

  sub_1DDB5F780(v592, v424, v8, @"luminanceNoiseReductionAmount");
  long long v428 = objc_msgSend_numberWithBool_(NSNumber, v425, v593, v426, v427);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v429, (uint64_t)v428, @"vectorFieldProcessingEnabled", v430);

  long long v434 = objc_msgSend_numberWithBool_(NSNumber, v431, v594, v432, v433);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v435, (uint64_t)v434, @"vectorFieldCorners", v436);

  sub_1DDB5F780(v595, v437, v8, @"vectorFieldSmoothingCoefficient");
  sub_1DDB5F780(v596, v438, v8, @"vectorFieldCornerThreshold");
  sub_1DDB5F780(v597, v439, v8, @"fullSizeSmoothingAmount");
  sub_1DDB5F780(v598, v440, v8, @"halfSizeSmoothingAmount");
  sub_1DDB5F780(v599, v441, v8, @"quarterSizeSmoothingAmount");
  sub_1DDB5F780(v600, v442, v8, @"fullSizeThreshold");
  sub_1DDB5F780(v601, v443, v8, @"fullSizeThresholdSoftness");
  sub_1DDB5F780(v602, v444, v8, @"halfSizeThreshold");
  sub_1DDB5F780(v603, v445, v8, @"halfSizeThresholdSoftness");
  sub_1DDB5F780(v604, v446, v8, @"quarterSizeThreshold");
  sub_1DDB5F780(v605, v447, v8, @"quarterSizeThresholdSoftness");
  sub_1DDB5F780(v606, v448, v8, @"fullSizeGradientMaskAmount");
  sub_1DDB5F780(v607, v449, v8, @"halfSizeGradientMaskAmount");
  sub_1DDB5F780(v608, v450, v8, @"quarterSizeGradientMaskAmount");
  sub_1DDB5F780(v609, v451, v8, @"contrastOverdrive");
  __int16 v455 = objc_msgSend_numberWithBool_(NSNumber, v452, v610, v453, v454);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v456, (uint64_t)v455, @"sharpenEdgesEnabled", v457);

  sub_1DDB5F780(v611, v458, v8, @"sharpenIntensity");
  sub_1DDB5F780(v612, v459, v8, @"addNoiseAmount");
  sub_1DDB5F840(v460, v8, @"factors", (uint64_t)v613, 3);
  sub_1DDB61290(v613[3], v461, v8, @"representativeNoiseAmount");
  sub_1DDB61290(v613[4], v462, v8, @"CNR_value");
  sub_1DDB61290(v613[5], v463, v8, @"CNR_radius");
  sub_1DDB5F780(v613[7], v464, v8, @"CNR_bias");
  sub_1DDB61290(v613[6], v465, v8, @"CNR_noiseFactor");
  unsigned __int16 v469 = objc_msgSend_numberWithBool_(NSNumber, v466, v614, v467, v468);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v470, (uint64_t)v469, @"powerBlurPass1Enabled", v471);

  int v475 = objc_msgSend_numberWithBool_(NSNumber, v472, v615, v473, v474);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v476, (uint64_t)v475, @"powerBlurPass2Enabled", v477);

  int v481 = objc_msgSend_numberWithBool_(NSNumber, v478, v616, v479, v480);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v482, (uint64_t)v481, @"powerBlurPass3Enabled", v483);

  int v487 = objc_msgSend_numberWithBool_(NSNumber, v484, v617, v485, v486);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v488, (uint64_t)v487, @"powerBlurPass4Enabled", v489);

  sub_1DDB5F780(v618, v490, v8, @"powerBlurPass1Threshold");
  sub_1DDB5F780(v619, v491, v8, @"powerBlurPass2Threshold");
  sub_1DDB5F780(v620, v492, v8, @"powerBlurPass3Threshold");
  sub_1DDB5F780(v621, v493, v8, @"powerBlurPass4Threshold");
  int v497 = objc_msgSend_numberWithBool_(NSNumber, v494, v622, v495, v496);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v498, (uint64_t)v497, @"powerBlurPass2Despeckle", v499);

  int v503 = objc_msgSend_numberWithInt_(NSNumber, v500, v623, v501, v502);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v504, (uint64_t)v503, @"powerBlurPass2DespeckleCountThreshold", v505);

  __int16 v509 = objc_msgSend_numberWithInt_(NSNumber, v506, v624, v507, v508);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v510, (uint64_t)v509, @"powerBlurPass2DespeckleLuminanceThreshold", v511);

  sub_1DDB5F780(v625, v512, v8, @"powerBlurPass2DespeckleDifferenceAmount");
  int v516 = objc_msgSend_numberWithBool_(NSNumber, v513, v626, v514, v515);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v517, (uint64_t)v516, @"powerBlurPass2DespeckleAverageCloseIn", v518);

  return v8;
}

void sub_1DDB61130(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDB610FCLL);
}

void sub_1DDB61290(double a1, uint64_t a2, void *a3, void *a4)
{
  id v13 = a3;
  id v6 = a4;
  uint64_t v10 = objc_msgSend_stringWithFormat_(NSString, v7, @"%a\t// %lg", v8, v9, *(void *)&a1, *(void *)&a1);
  objc_msgSend_setValue_forKey_(v13, v11, (uint64_t)v10, (uint64_t)v6, v12);
}

void sub_1DDB61328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

id sub_1DDB6134C(void **a1, void *a2)
{
  id v3 = a2;
  sub_1DDB614D4(a1, v3, 0, &v27);
  uint64_t v8 = v27;
  if (v27)
  {
    uint64_t v9 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v4, v5, v6, v7);
    uint64_t v14 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v10, v11, v12, v13);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v15, v14, @"ReconstructionData", v16);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v27 + 2152))(v27) & 1) == 0)
    {
      uint64_t v21 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v17, v18, v19, v20);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v22, v21, @"SushiImageFilterParameters", v23);
    }
    objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1C9E8], v17, (uint64_t)v9, v19, v20);
    id v24 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v24 = 0;
  }
  if (v28) {
    sub_1DDA18310(v28);
  }
  if (v8)
  {
    id v24 = v24;
    int32x2_t v25 = v24;
  }
  else
  {
    int32x2_t v25 = 0;
  }

  return v25;
}

void sub_1DDB61484(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDB61438);
}

void sub_1DDB614C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB614D4(void **a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  id v7 = a2;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  sub_1DDA4C3D4(v7, &v34, &v36);
  if (v35) {
    sub_1DDA18310(v35);
  }
  uint64_t v12 = objc_msgSend_bytes(*a1, v8, v9, v10, v11);
  uint64_t v30 = objc_msgSend_length(*a1, v13, v14, v15, v16);
  sub_1DDA18500(&v32, (unint64_t *)&v30);
  sub_1DDA199C4(v12, (uint64_t)&v32, 0, &v33);
  uint64_t v30 = 0;
  int32x2_t v31 = 0;
  sub_1DDA2BC38((uint64_t)&v30, &v36, a4);
  if (v31) {
    sub_1DDA18310(v31);
  }
  if (!*a4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v21 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v17, v18, v19, v20);
  objc_msgSend_setValue_forKey_(v21, v22, (uint64_t)v7, *MEMORY[0x1E4F2FF38], v23);
  id v24 = sub_1DDB10E40(a3);
  objc_msgSend_setValue_forKey_(v21, v25, (uint64_t)v24, *MEMORY[0x1E4F2FF20], v26);

  sub_1DDA2DE74(*a4, v21);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a4 + 112))(&v28);
  if (v29) {
    sub_1DDA18310(v29);
  }

  if (*((void *)&v33 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v33 + 1));
  }
  if (v37) {
    sub_1DDA18310(v37);
  }
}

void sub_1DDB6168C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  uint64_t v21 = (std::__shared_weak_count *)v16[1];
  if (v21) {
    sub_1DDA18310(v21);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v19 - 56);
  if (v22) {
    sub_1DDA18310(v22);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  *uint64_t v16 = 0;
  v16[1] = 0;
  JUMPOUT(0x1DDB61634);
}

void sub_1DDB61720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB61730(void **a1, int a2)
{
  sub_1DDB614D4(a1, @"6.dng", a2, &v44);
  uint64_t v8 = v44;
  if (v44)
  {
    uint64_t v9 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v4, v5, v6, v7);
    uint64_t v14 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v10, v11, v12, v13);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v15, v14, @"DebayerParameters", v16);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v44 + 2152))(v44) & 1) == 0)
    {
      uint64_t v17 = sub_1DDB5FA98((uint64_t)a1, &v44);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v18, (uint64_t)v17, @"ReconstructionData", v19);

      uint64_t v24 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v20, v21, v22, v23);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v25, v24, @"SushiImageFilterParameters", v26);
    }
    uint64_t v27 = sub_1DDB6197C((uint64_t)a1, @"6.dng", a2);
    int32x2_t v31 = v27;
    if (v27)
    {
      int v32 = objc_msgSend_objectAtIndexedSubscript_(v27, v28, 0, v29, v30);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v33, (uint64_t)v32, @"CoreImageInitialTreePre", v34);

      uint64_t v38 = objc_msgSend_objectAtIndexedSubscript_(v31, v35, 1, v36, v37);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v39, (uint64_t)v38, @"CoreImageInitialTreePost", v40);
    }
    objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v9, v29, v30);
    id v41 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v41 = 0;
  }
  if (v45) {
    sub_1DDA18310(v45);
  }
  if (v8)
  {
    id v41 = v41;
    uint64_t v42 = v41;
  }
  else
  {
    uint64_t v42 = 0;
  }

  return v42;
}

void sub_1DDB61910(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDB618C4);
}

id sub_1DDB6197C(uint64_t a1, void *a2, int a3)
{
  v88[1] = *MEMORY[0x1E4F143B8];
  id v76 = a2;
  uint64_t v5 = MEMORY[0x1E01C4510]();
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v87 = *MEMORY[0x1E4F2FF78];
  v88[0] = v6;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v7, (uint64_t)v88, (uint64_t)&v87, 1);
  CFDictionaryRef v75 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = CGImageSourceCreateWithData(*(CFDataRef *)a1, v75);
  context = (void *)v5;
  if (!v8)
  {
    uint64_t v64 = 0;
    goto LABEL_21;
  }
  uint64_t v9 = *MEMORY[0x1E4F2FF20];
  v85[0] = *MEMORY[0x1E4F2FF20];
  uint64_t v10 = sub_1DDB10E40(1);
  v85[1] = *MEMORY[0x1E4F2FEC8];
  v86[0] = v10;
  v86[1] = MEMORY[0x1E4F1CC38];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v11, (uint64_t)v86, (uint64_t)v85, 2);
  CFDictionaryRef v12 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  CFDictionaryRef v13 = CGImageSourceCopyPropertiesAtIndex(v8, 0, v12);
  uint64_t v73 = objc_msgSend_valueForKeyPath_(v13, v14, @"kCGImageSourceRawReconstructionOptions.kCGImageSourceSupportedSushiLevels", v15, v16);
  uint64_t v72 = objc_msgSend_valueForKeyPath_(v13, v17, @"kCGImageSourceRawReconstructionOptions.kCGImageSourceRawReconstructionMethodVersions", v18, v19);
  uint64_t v20 = sub_1DDB10E40(a3);
  if (objc_msgSend_containsObject_(v73, v21, (uint64_t)v20, v22, v23))
  {
    int v27 = objc_msgSend_containsObject_(v72, v24, (uint64_t)v76, v25, v26);

    if (!v27)
    {
      uint64_t v64 = 0;
      goto LABEL_20;
    }
    v83[0] = v9;
    uint64_t v28 = sub_1DDB10E40(a3);
    v83[1] = *MEMORY[0x1E4F2FF38];
    v84[0] = v28;
    v84[1] = v76;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v29, (uint64_t)v84, (uint64_t)v83, 2);
    CFDictionaryRef options = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    image = CGImageSourceCreateImageAtIndex(v8, 0, options);
    CFDictionaryRef v70 = CGImageSourceCopyPropertiesAtIndex(v8, 0, options);

    uint64_t v20 = objc_msgSend_imageWithCGImage_(MEMORY[0x1E4F1E050], v30, (uint64_t)image, v31, v32);
    uint64_t v68 = objc_msgSend_debugDescription(v20, v33, v34, v35, v36);
    uint64_t v40 = objc_msgSend_objectForKeyedSubscript_(v70, v37, @"{Raw}", v38, v39);
    int v66 = v40;
    if (v40)
    {
      objc_msgSend_objectForKeyedSubscript_(v40, v41, @"filters", v43, v44, v40);
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      id v45 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v45, v46, (uint64_t)&v77, (uint64_t)v82, 16);
      if (v49)
      {
        uint64_t v50 = *(void *)v78;
        uint64_t v51 = *MEMORY[0x1E4F1E480];
        uint64_t v52 = *MEMORY[0x1E4F1E520];
        do
        {
          uint64_t v53 = 0;
          uint64_t v54 = v20;
          do
          {
            if (*(void *)v78 != v50) {
              objc_enumerationMutation(v45);
            }
            uint64_t v55 = *(void **)(*((void *)&v77 + 1) + 8 * v53);
            objc_msgSend_setValue_forKey_(v55, v47, (uint64_t)v54, v51, v48);
            uint64_t v20 = objc_msgSend_valueForKey_(v55, v56, v52, v57, v58);

            objc_msgSend_setValue_forKey_(v55, v59, 0, v51, v60);
            ++v53;
            uint64_t v54 = v20;
          }
          while (v49 != v53);
          uint64_t v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v45, v47, (uint64_t)&v77, (uint64_t)v82, 16);
        }
        while (v49);
      }
    }
    uint64_t v63 = objc_msgSend_debugDescription(v20, v41, v42, v43, v44, v66);
    if (image) {
      CGImageRelease(image);
    }
    v81[0] = v68;
    v81[1] = v63;
    uint64_t v64 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v61, (uint64_t)v81, 2, v62);

    CFDictionaryRef v13 = v70;
    CFDictionaryRef v12 = options;
  }
  else
  {
    uint64_t v64 = 0;
  }

LABEL_20:
  CFRelease(v8);

LABEL_21:

  return v64;
}

void sub_1DDB61DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (a2)
  {

    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1DDB61D48);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDB61F28(void **a1, int a2)
{
  sub_1DDB614D4(a1, @"6", a2, &v47);
  uint64_t v8 = v47;
  if (v47)
  {
    uint64_t v9 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v4, v5, v6, v7);
    uint64_t v14 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v10, v11, v12, v13);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v15, v14, @"DebayerParameters", v16);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v47 + 2152))(v47) & 1) == 0)
    {
      uint64_t v17 = sub_1DDB5FA98((uint64_t)a1, &v47);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v18, (uint64_t)v17, @"ReconstructionData", v19);

      uint64_t v24 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v20, v21, v22, v23);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v25, v24, @"SushiImageFilterParameters", v26);
    }
    int v27 = sub_1DDB6197C((uint64_t)a1, @"6", a2);
    uint64_t v31 = v27;
    if (v27)
    {
      uint64_t v32 = objc_msgSend_objectAtIndexedSubscript_(v27, v28, 0, v29, v30);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v33, (uint64_t)v32, @"CoreImageInitialTreePre", v34);

      uint64_t v38 = objc_msgSend_objectAtIndexedSubscript_(v31, v35, 1, v36, v37);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v39, (uint64_t)v38, @"CoreImageInitialTreePost", v40);
    }
    if (a2 == 2)
    {
      uint64_t v43 = sub_1DDB621B0((uint64_t)a1);
      if (v43) {
        objc_msgSend_setObject_forKeyedSubscript_(v9, v41, (uint64_t)v43, @"BayerImageHash", v42);
      }
    }
    objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v9, v29, v30);
    id v44 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v44 = 0;
  }
  if (v48) {
    sub_1DDA18310(v48);
  }
  if (v8)
  {
    id v44 = v44;
    id v45 = v44;
  }
  else
  {
    id v45 = 0;
  }

  return v45;
}

void sub_1DDB6213C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDB620F0);
}

id sub_1DDB621B0(uint64_t a1)
{
  v54[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x1E01C4510]();
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v53 = *MEMORY[0x1E4F2FF78];
  v54[0] = v3;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v4, (uint64_t)v54, (uint64_t)&v53, 1);
  CFDictionaryRef v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = CGImageSourceCreateWithData(*(CFDataRef *)a1, v5);
  if (!v6)
  {
    uint64_t v39 = 0;
    goto LABEL_22;
  }
  uint64_t v7 = *MEMORY[0x1E4F2FF20];
  v51[0] = *MEMORY[0x1E4F2FF20];
  uint64_t v8 = sub_1DDB10E40(1);
  v51[1] = *MEMORY[0x1E4F2FEC8];
  v52[0] = v8;
  v52[1] = MEMORY[0x1E4F1CC38];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v9, (uint64_t)v52, (uint64_t)v51, 2);
  CFDictionaryRef v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  CFDictionaryRef v11 = CGImageSourceCopyPropertiesAtIndex(v6, 0, v10);
  id v44 = objc_msgSend_valueForKeyPath_(v11, v12, @"kCGImageSourceRawReconstructionOptions.kCGImageSourceSupportedSushiLevels", v13, v14);
  uint64_t v43 = objc_msgSend_valueForKeyPath_(v11, v15, @"kCGImageSourceRawReconstructionOptions.kCGImageSourceRawReconstructionMethodVersions", v16, v17);
  uint64_t v18 = sub_1DDB10E40(2);
  if (objc_msgSend_containsObject_(v44, v19, (uint64_t)v18, v20, v21))
  {
    int v25 = objc_msgSend_containsObject_(v43, v22, @"6", v23, v24);

    if (v25)
    {
      uint64_t v27 = *MEMORY[0x1E4F2FF38];
      v49[0] = v7;
      v49[1] = v27;
      v50[0] = @"2";
      v50[1] = @"6";
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v26, (uint64_t)v50, (uint64_t)v49, 2);
      CFDictionaryRef v28 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

      ImageAtIndeCGFloat x = CGImageSourceCreateImageAtIndex(v6, 0, v28);
      DataProvider = CGImageGetDataProvider(ImageAtIndex);
      CFDataRef v31 = CGDataProviderCopyData(DataProvider);
      if (v31)
      {
        CC_SHA256_Init(&c);
        BytePtr = CFDataGetBytePtr(v31);
        CC_LONG Length = CFDataGetLength(v31);
        CC_SHA256_Update(&c, BytePtr, Length);
        CGImageRef image = ImageAtIndex;
        CC_SHA256_Final(md, &c);
        unint64_t v34 = 0;
        __s1[0] = 0;
        do
        {
          __s2 = 0;
          if (asprintf(&__s2, "%02xd", md[v34]) != 3)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](exception, "RawCameraException");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v35 = __s2;
          strncat(__s1, __s2, 2uLL);
          if (v34 <= 0x1E && (v34 & 1) != 0) {
            *(_WORD *)&__s1[strlen(__s1)] = 58;
          }
          if (v35) {
            free(v35);
          }
          ++v34;
        }
        while (v34 != 32);
        uint64_t v39 = objc_msgSend_stringWithUTF8String_(NSString, v36, (uint64_t)__s1, v37, v38);
        CFRelease(v31);
        ImageAtIndeCGFloat x = image;
        if (!image) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v39 = 0;
        if (!ImageAtIndex)
        {
LABEL_20:
          CFDictionaryRef v10 = v28;
          goto LABEL_21;
        }
      }
      CGImageRelease(ImageAtIndex);
      goto LABEL_20;
    }
  }
  else
  {
  }
  uint64_t v39 = 0;
LABEL_21:
  CFRelease(v6);

LABEL_22:

  return v39;
}

void sub_1DDB62554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  if (a2)
  {

    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1DDB624C4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDB62694(void **a1)
{
  sub_1DDB614D4(a1, @"best", 0, (uint64_t *)&v6);
  id v1 = v6;
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v6 + 160))(&v4, v6);
    uint64_t v2 = (*(void (**)(uint64_t))(*(void *)v4 + 400))(v4);
    if (v5) {
      sub_1DDA18310(v5);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
  if (v1)
  {
    id v1 = v2;
    uint64_t v2 = v1;
  }

  return v1;
}

void sub_1DDB62780(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  if (a12) {
    sub_1DDA18310(a12);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDB62744);
}

id sub_1DDB627C0(void **a1)
{
  sub_1DDB614D4(a1, @"best", 0, &v14);
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 2872))(&v12);
    if (v12)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 24))(&v10);
      if (v10)
      {
        sub_1DDAA946C(v10, __p);
        if (v9 >= 0) {
          objc_msgSend_stringWithUTF8String_(NSString, v1, (uint64_t)__p, v2, v3);
        }
        else {
        uint64_t v4 = objc_msgSend_stringWithUTF8String_(NSString, v1, (uint64_t)__p[0], v2, v3);
        }
        if (v9 < 0) {
          operator delete(__p[0]);
        }
        int v5 = 0;
      }
      else
      {
        uint64_t v4 = 0;
        int v5 = 1;
      }
      if (v11) {
        sub_1DDA18310(v11);
      }
    }
    else
    {
      uint64_t v4 = 0;
      int v5 = 1;
    }
    if (v13) {
      sub_1DDA18310(v13);
    }
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = 1;
  }
  if (v15) {
    sub_1DDA18310(v15);
  }
  if (v5)
  {
    id v6 = 0;
  }
  else
  {
    id v6 = v4;
    uint64_t v4 = v6;
  }

  return v6;
}

id sub_1DDB6298C(void **a1)
{
  sub_1DDB614D4(a1, @"best", 0, &v22);
  if (v22)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v22 + 80))(&__p);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v22 + 144))(&v18);
    uint64_t v8 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v1, v2, v3, v4);
    uint64_t v9 = v18;
    for (uint64_t i = v19; v9 != i; v9 += 24)
    {
      uint64_t v11 = v9;
      if (*(char *)(v9 + 23) < 0) {
        uint64_t v11 = *(void *)v9;
      }
      uint64_t v12 = objc_msgSend_stringWithUTF8String_(NSString, v5, v11, v6, v7);
      objc_msgSend_addObject_(v8, v13, (uint64_t)v12, v14, v15);
    }
    uint64_t v16 = objc_msgSend_arrayWithArray_(MEMORY[0x1E4F1C978], v5, (uint64_t)v8, v6, v7);

    uint64_t v24 = (void **)&v18;
    sub_1DDA2A044(&v24);
    if (v21 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (v23) {
    sub_1DDA18310(v23);
  }

  return v16;
}

void sub_1DDB62AF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20)
{
  *(void *)(v21 - 56) = &a10;
  sub_1DDA2A044((void ***)(v21 - 56));
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a20) {
    sub_1DDA18310(a20);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDB62AC8);
}

void *RawCameraTP(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)MEMORY[0x1E01C4510]();
  if (!v1 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    uint64_t v53 = 0;
    int v47 = 1;
    goto LABEL_38;
  }
  uint64_t v6 = objc_msgSend_objectForKeyedSubscript_(v1, v3, @"path", v4, v5);
  if (!v6 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    uint64_t v53 = 0;
    int v47 = 1;
    goto LABEL_37;
  }
  sub_1DDB5F6A0((uint64_t *)v54, v6);
  uint64_t v50 = v2;
  uint64_t v51 = v6;
  id v52 = v1;
  uint64_t v53 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v7, v8, v9, v10);
  uint64_t v15 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v11, v12, v13, v14);
  uint64_t v20 = sub_1DDB6298C(v54);
  for (unint64_t i = 0; i < objc_msgSend_count(v20, v16, v17, v18, v19); ++i)
  {
    int v25 = objc_msgSend_objectAtIndexedSubscript_(v20, v22, i, v23, v24);
    if (objc_msgSend_isEqualToString_(v25, v26, @"6", v27, v28))
    {
      uint64_t v32 = sub_1DDB6134C(v54, @"6");
      long long v33 = sub_1DDB61F28(v54, 0);
      unint64_t v34 = sub_1DDB61F28(v54, 1);
      uint64_t v35 = sub_1DDB61F28(v54, 2);
      uint64_t v38 = sub_1DDB61F28(v54, 3);
      if (v32) {
        objc_msgSend_setObject_forKeyedSubscript_(v15, v36, (uint64_t)v32, @"v6 halfsize", v37);
      }
      if (v33) {
        objc_msgSend_setObject_forKeyedSubscript_(v15, v36, (uint64_t)v33, @"v6", v37);
      }
      if (v34) {
        objc_msgSend_setObject_forKeyedSubscript_(v15, v36, (uint64_t)v34, @"v6 sushi", v37);
      }
      if (v35) {
        objc_msgSend_setObject_forKeyedSubscript_(v15, v36, (uint64_t)v35, @"v6 sushi 2", v37);
      }
      if (v38) {
        objc_msgSend_setObject_forKeyedSubscript_(v15, v36, (uint64_t)v38, @"v6 sushi 3", v37);
      }
    }
    else
    {
      if (!objc_msgSend_isEqualToString_(v25, v29, @"6.dng", v30, v31)) {
        goto LABEL_29;
      }
      uint64_t v32 = sub_1DDB61730(v54, 0);
      long long v33 = sub_1DDB61730(v54, 1);
      unint64_t v34 = sub_1DDB61730(v54, 2);
      uint64_t v35 = sub_1DDB61730(v54, 3);
      if (v32) {
        objc_msgSend_setObject_forKeyedSubscript_(v15, v39, (uint64_t)v32, @"v6.dng", v40);
      }
      if (v33) {
        objc_msgSend_setObject_forKeyedSubscript_(v15, v39, (uint64_t)v33, @"v6.dng sushi", v40);
      }
      if (v34) {
        objc_msgSend_setObject_forKeyedSubscript_(v15, v39, (uint64_t)v34, @"v6.dng sushi 2", v40);
      }
      if (v35) {
        objc_msgSend_setObject_forKeyedSubscript_(v15, v39, (uint64_t)v35, @"v6.dng sushi 3", v40);
      }
    }

LABEL_29:
  }
  if (v15) {
    objc_msgSend_setObject_forKeyedSubscript_(v53, v22, (uint64_t)v15, @"reconstruction", v24);
  }
  uint64_t v43 = sub_1DDB62694(v54);
  if (v43) {
    objc_msgSend_setObject_forKeyedSubscript_(v53, v41, (uint64_t)v43, @"metadata", v42);
  }
  uint64_t v46 = sub_1DDB627C0(v54);
  if (v46) {
    objc_msgSend_setObject_forKeyedSubscript_(v53, v44, (uint64_t)v46, @"rawdata_checksum", v45);
  }

  int v47 = 0;
  uint64_t v6 = v51;
  id v1 = v52;
  uint64_t v2 = v50;
LABEL_37:

LABEL_38:
  if (v47) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = v53;
  }

  return v48;
}

void sub_1DDB62F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB63020(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v6);
  int v1 = (*(uint64_t (**)(void))(*(void *)v6 + 504))();
  if (v7) {
    sub_1DDA18310(v7);
  }
  uint64_t result = 1;
  if ((v1 + 2122219136) >= 0x12)
  {
    if (v1 > 555819296)
    {
      if (v1 > 1229539656)
      {
        BOOL v3 = v1 == 1229539657;
        int v4 = 1633771873;
      }
      else
      {
        BOOL v3 = v1 == 555819297;
        int v4 = 825307441;
      }
    }
    else if (v1 > 320017170)
    {
      BOOL v3 = v1 == 320017171;
      int v4 = 370546198;
    }
    else
    {
      BOOL v3 = v1 == -1802201964;
      int v4 = 303174162;
    }
    if (!v3 && v1 != v4) {
      return 0;
    }
  }
  return result;
}

void sub_1DDB6316C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB63184(uint64_t a1)
{
  v6[0] = &unk_1F396F638;
  v6[1] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "IFD0");
  (*(void (**)(uint64_t, void **, void *, uint64_t))(*(void *)v1 + 600))(v1, __p, v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDB63264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB63294(uint64_t a1@<X0>, void *a2@<X8>)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v9);
  uint64_t v3 = v9;
  sub_1DDA1A880(__p, "IFD0");
  if ((*(unsigned int (**)(uint64_t, void **, void **, void))(*(void *)v3 + 248))(v3, __p, v11, 0))
  {
    uint64_t v5 = v11[0];
    uint64_t v4 = v11[1];
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    int64_t v6 = v4 - v5;
    if (v10) {
      sub_1DDA18310(v10);
    }
    if (v6 == 32)
    {
      *(_OWORD *)a2 = *(_OWORD *)v11;
      a2[2] = v12;
      return;
    }
  }
  else
  {
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      sub_1DDA18310(v10);
    }
  }
  __p[0] = 0;
  sub_1DDA25B2C(a2, 4uLL, __p);
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
}

void sub_1DDB633C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDB6340C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"automaticDynamicRange", v5, v6))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v21, a1);
    sub_1DDAC81CC(&v21, &v23);
    if (v22) {
      sub_1DDA18310(v22);
    }
    if (v23) {
      uint64_t v13 = (*(uint64_t (**)(void *))(*(void *)v23 + 808))(v23);
    }
    else {
      uint64_t v13 = 0;
    }
    if (v24) {
      sub_1DDA18310(v24);
    }
    uint64_t v18 = objc_msgSend_numberWithInt_(NSNumber, v10, v13, v11, v12);
  }
  else if (objc_msgSend_isEqualToString_(v3, v7, @"hasExtendedRawData", v8, v9))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v21, a1);
    sub_1DDAC81CC(&v21, &v23);
    if (v22) {
      sub_1DDA18310(v22);
    }
    if (v23) {
      uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v23 + 800))(v23);
    }
    else {
      uint64_t v17 = 0;
    }
    if (v24) {
      sub_1DDA18310(v24);
    }
    uint64_t v18 = objc_msgSend_numberWithBool_(NSNumber, v14, v17, v15, v16);
  }
  else
  {
    uint64_t v18 = sub_1DDBCE65C(a1, v3);
  }
  uint64_t v19 = (void *)v18;

  return v19;
}

void sub_1DDB635DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDB63614(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2784))();
}

BOOL sub_1DDB63640(uint64_t a1)
{
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 160))(v3);
  sub_1DDAC81CC((void **)v3, &v4);
  if (*((void *)&v3[0] + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v3[0] + 1));
  }
  if (v4)
  {
    memset(v3, 0, 204);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)v4 + 848))(v3);
    BOOL v1 = LOBYTE(v3[0]) != 0;
  }
  else
  {
    BOOL v1 = 0;
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
  return v1;
}

void sub_1DDB6372C(_Unwind_Exception *exception_object)
{
  id v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB63744(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v5);
  sub_1DDAC81CC(&v5, &v7);
  if (v6) {
    sub_1DDA18310(v6);
  }
  id v3 = v7;
  if (v7) {
    char v1 = (*(uint64_t (**)(void *))(*(void *)v7 + 824))(v7);
  }
  if (v8) {
    sub_1DDA18310(v8);
  }
  if (!v3) {
    char v1 = sub_1DDAC9BB4(a1);
  }
  return v1 & 1;
}

void sub_1DDB63814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB6382C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 496) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_1DDB4C53C(a1, a2, (_DWORD *)a3);
  if ((sub_1DDA2E580(a1) & 1) == 0)
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v15, a1);
    sub_1DDAC81CC((void **)&v15, &v26);
    if (*((void *)&v15 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v15 + 1));
    }
    if (v26)
    {
      (*(void (**)(long long *__return_ptr))(*(void *)v26 + 848))(&v15);
      long long v5 = v25[0];
      *(_OWORD *)(a3 + 368) = v24;
      *(_OWORD *)(a3 + 384) = v5;
      long long v6 = *(_OWORD *)v22;
      *(_OWORD *)(a3 + 304) = v21;
      *(_OWORD *)(a3 + 320) = v6;
      long long v7 = v23;
      *(_OWORD *)(a3 + 336) = *(_OWORD *)&v22[16];
      *(_OWORD *)(a3 + 352) = v7;
      long long v8 = v18;
      *(_OWORD *)(a3 + 240) = v17;
      *(_OWORD *)(a3 + 256) = v8;
      long long v9 = v20;
      *(_OWORD *)(a3 + 272) = v19;
      *(_OWORD *)(a3 + 288) = v9;
      long long v10 = v16;
      *(_OWORD *)(a3 + 208) = v15;
      *(_OWORD *)(a3 + 224) = v10;
      *(_OWORD *)(a3 + 396) = *(_OWORD *)((char *)v25 + 12);
      (*(void (**)(long long *__return_ptr))(*(void *)v26 + 856))(&v15);
      long long v11 = *(_OWORD *)v22;
      *(_OWORD *)(a3 + 508) = v21;
      *(_OWORD *)(a3 + 524) = v11;
      *(_OWORD *)(a3 + 536) = *(_OWORD *)&v22[12];
      long long v12 = v18;
      *(_OWORD *)(a3 + 444) = v17;
      *(_OWORD *)(a3 + 460) = v12;
      long long v13 = v20;
      *(_OWORD *)(a3 + 476) = v19;
      *(_OWORD *)(a3 + 492) = v13;
      long long v14 = v16;
      *(_OWORD *)(a3 + 412) = v15;
      *(_OWORD *)(a3 + 428) = v14;
    }
    if (v27) {
      sub_1DDA18310(v27);
    }
  }
}

void sub_1DDB639E4(_Unwind_Exception *exception_object)
{
  id v3 = *(std::__shared_weak_count **)(v1 - 40);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB63A00(uint64_t *a1)
{
  uint64_t v2 = sub_1DDB478D4(a1);
  if (v2 >> 8 == 8487297)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t *))(*a1 + 432))(a1);
    int v4 = (12 * HIDWORD(v3) + v2 - 128) % 18;
    return (v4
                        - 2122219264
                        - (char)(v4 - 6 * ((((43 * (char)v4) & 0x8000) != 0) + ((unsigned __int16)(43 * (char)v4) >> 8)))
                        + ((int)v3
                         + (char)(v4 - 6
                                     * ((((43 * (char)v4) & 0x8000) != 0) + ((unsigned __int16)(43 * (char)v4) >> 8))))
                        % 6
                        + 128);
  }
  return v2;
}

double sub_1DDB63B00(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v9);
  sub_1DDAC81CC(&v9, (void **)&v11);
  if (v10) {
    sub_1DDA18310(v10);
  }
  if (v11)
  {
    uint64_t v1 = *((void *)v11 + 3);
    uint64_t v2 = (std::__shared_weak_count *)*((void *)v11 + 4);
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = sub_1DDB65568(v1);
    if (v2) {
      sub_1DDA18310(v2);
    }
    if (!v3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v4 = sub_1DDB42E64(v3);
    double v5 = 0.0;
    if (v4 >= (int)sub_1DDB42E64(@"9.20"))
    {
      double v6 = 0.0;
      if (*((unsigned char *)v11 + 1640)) {
        double v6 = v11[204];
      }
      double v5 = 0.0 - v6;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  if (v12) {
    sub_1DDA18310(v12);
  }
  return v5;
}

void sub_1DDB63C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1DDB63C90(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = a1;
  uint64_t v8 = objc_msgSend_bytes(v3, v4, v5, v6, v7);
  unint64_t v13 = objc_msgSend_length(v3, v9, v10, v11, v12);
  sub_1DDA18500(&v14, &v13);
  sub_1DDA199C4(v8, (uint64_t)&v14, 0, &v15);
  sub_1DDB63D48(&v15, v3, a2);
  if (*((void *)&v15 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v15 + 1));
  }
}

void sub_1DDB63D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1DDB63D48(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v5 = a2;
  sub_1DDB64CEC(a1, &v5, a3);
  sub_1DDB63EC0(*a3);
}

void sub_1DDB63DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 8);
  if (v11) {
    sub_1DDA18310(v11);
  }

  _Unwind_Resume(a1);
}

void sub_1DDB63DC8(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = a1;
  id v5 = objc_msgSend_dataWithContentsOfURL_options_error_(MEMORY[0x1E4F1C9B8], v4, (uint64_t)v3, 1, 0);
  uint64_t v10 = v5;
  if (v5)
  {
    sub_1DDB63C90(v5, a2);
  }
  else
  {
    objc_msgSend_path(v3, v6, v7, v8, v9);
    id v11 = objc_claimAutoreleasedReturnValue();
    uint64_t v16 = objc_msgSend_UTF8String(v11, v12, v13, v14, v15);
    sub_1DDA1997C(v16, 0, &v17);

    sub_1DDB63D48(&v17, 0, a2);
    if (*((void *)&v17 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v17 + 1));
    }
  }
}

void sub_1DDB63E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1DDB63EC0(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*(void *)(a1 + 48))
  {
    sub_1DDA19C9C(v2, 1);
    uint64_t v3 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t v61 = -278;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v3 + 40))(v3, v61, 2);
    memset(v61, 0, sizeof(v61));
    if ((*(unsigned int (**)(void, unsigned char *, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v61, 278) != 278)
    {
      uint64_t v50 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v50, "RawCameraException");
      __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v4 = 277;
    while (v61[v4 - 3] != 80 || v61[v4 - 2] != 75 || v61[v4 - 1] != 5 || v61[v4] != 6)
    {
      if (--v4 == 2) {
        return;
      }
    }
    uint64_t v5 = *(void *)(a1 + 24);
    LODWORD(__p[0]) = v4 - 281;
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v5 + 40))(v5, __p, 2);
    if (sub_1DDA19EC8(*(void *)(a1 + 24)) != 101010256)
    {
      uint64_t v51 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v51, "RawCameraException");
      __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v6 = sub_1DDA19E68(*(void *)(a1 + 24));
    if (v6 != sub_1DDA19E68(*(void *)(a1 + 24)))
    {
      id v52 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v52, "RawCameraException");
      __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v7 = sub_1DDA19E68(*(void *)(a1 + 24));
    int v8 = sub_1DDA19E68(*(void *)(a1 + 24));
    if (v7 != v8)
    {
      uint64_t v53 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v53, "RawCameraException");
      __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v9 = sub_1DDA19EC8(*(void *)(a1 + 24));
    unsigned int v60 = 0;
    unsigned int v60 = sub_1DDA19EC8(*(void *)(a1 + 24));
    if (v9 >= (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 16))())
    {
      uint64_t v54 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v54, "RawCameraException");
      __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
    if (v60 >= v10)
    {
      uint64_t v55 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v55, "RawCameraException");
      __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v11 = sub_1DDA19E68(*(void *)(a1 + 24));
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 16))() <= v11)
    {
      uint64_t v56 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v56, "RawCameraException");
      __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v15 = objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E4F1CA60], v12, v7, v13, v14);
    uint64_t v16 = *(void *)(a1 + 24);
    sub_1DDA18410((int *)__p, (int *)&v60);
    (*(void (**)(uint64_t, void **, void))(*(void *)v16 + 40))(v16, __p, 0);
    if (v7)
    {
      do
      {
        if (sub_1DDA19EC8(*(void *)(a1 + 24)) != 33639248)
        {
          id v44 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](v44, "RawCameraException");
          __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        sub_1DDA19E68(*(void *)(a1 + 24));
        sub_1DDA19E68(*(void *)(a1 + 24));
        sub_1DDA19E68(*(void *)(a1 + 24));
        if (sub_1DDA19E68(*(void *)(a1 + 24)))
        {
          uint64_t v45 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](v45, "RawCameraException");
          __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        sub_1DDA19E68(*(void *)(a1 + 24));
        sub_1DDA19E68(*(void *)(a1 + 24));
        sub_1DDA19EC8(*(void *)(a1 + 24));
        int v17 = sub_1DDA19EC8(*(void *)(a1 + 24));
        if (v17 != sub_1DDA19EC8(*(void *)(a1 + 24)))
        {
          uint64_t v46 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](v46, "RawCameraException");
          __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unsigned int v18 = sub_1DDA19E68(*(void *)(a1 + 24));
        if (!v18)
        {
          int v47 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](v47, "RawCameraException");
          __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unsigned int v19 = sub_1DDA19E68(*(void *)(a1 + 24));
        unsigned int v20 = sub_1DDA19E68(*(void *)(a1 + 24));
        sub_1DDA19E68(*(void *)(a1 + 24));
        sub_1DDA19E68(*(void *)(a1 + 24));
        sub_1DDA19EC8(*(void *)(a1 + 24));
        uint64_t v21 = sub_1DDA19EC8(*(void *)(a1 + 24));
        if (v21 >= (*(unsigned int (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24)))
        {
          uint64_t v48 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](v48, "RawCameraException");
          __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v59 = 0;
        uint64_t v22 = *(void *)(a1 + 24);
        unsigned int v57 = v18;
        sub_1DDA1A0CC(v22, &v57, (uint64_t)__p);
        uint64_t v23 = *(void *)(a1 + 24);
        unsigned int v57 = v19;
        (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v23 + 40))(v23, &v57, 1);
        uint64_t v24 = *(void *)(a1 + 24);
        unsigned int v57 = v20;
        (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v24 + 40))(v24, &v57, 1);
        uint64_t v29 = sub_1DDA1E51C((uint64_t)__p, v25, v26, v27, v28);
        BOOL v30 = sub_1DDA2E4E0(v15, v29);

        if (v30)
        {
          uint64_t v49 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](v49, "RawCameraException");
          __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v35 = sub_1DDA1E51C((uint64_t)__p, v31, v32, v33, v34);
        uint64_t v39 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v36, v21, v37, v38);
        objc_msgSend_setObject_forKeyedSubscript_(v15, v40, (uint64_t)v39, (uint64_t)v35, v41);

        if (SHIBYTE(v59) < 0) {
          operator delete(__p[0]);
        }
        --v8;
      }
      while (v8);
    }
    uint64_t v42 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v15;
  }
}

void sub_1DDB64740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void *sub_1DDB6485C(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  *a1 = &unk_1F3981AC8;
  sub_1DDB46DC8(a1 + 1);
  uint64_t v6 = a2[1];
  a1[3] = *a2;
  a1[4] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[5] = v5;
  a1[6] = 0;
  return a1;
}

void sub_1DDB648D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB648E4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v9 = a2;
  if (sub_1DDA2E4E0(*(void **)(a1 + 48), v9))
  {
    int v8 = sub_1DDA2E1C4(*(void **)(a1 + 48), v9, v5, v6, v7);
    sub_1DDB64974(a1, v8, (_OWORD *)a3);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

void sub_1DDB64960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_1DDB64974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v20 = a2;
  sub_1DDA7A800(v19, (uint64_t *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    goto LABEL_9;
  }
  sub_1DDA19C9C(v5, 1);
  uint64_t v6 = *(void *)(a1 + 24);
  sub_1DDA1B2DC(&v18, &v20);
  (*(void (**)(uint64_t, long long *, void))(*(void *)v6 + 40))(v6, &v18, 0);
  if (sub_1DDA19EC8(*(void *)(a1 + 24)) != 67324752)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDA19E68(*(void *)(a1 + 24));
  sub_1DDA19E68(*(void *)(a1 + 24));
  if (sub_1DDA19E68(*(void *)(a1 + 24)))
  {
    uint64_t v15 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v15, "RawCameraException");
    __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDA19E68(*(void *)(a1 + 24));
  sub_1DDA19E68(*(void *)(a1 + 24));
  sub_1DDA19EC8(*(void *)(a1 + 24));
  unsigned int v7 = sub_1DDA19EC8(*(void *)(a1 + 24));
  if (v7 != sub_1DDA19EC8(*(void *)(a1 + 24)))
  {
    uint64_t v16 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v16, "RawCameraException");
    __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v8 = sub_1DDA19E68(*(void *)(a1 + 24));
  if (!v8)
  {
    int v17 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v17, "RawCameraException");
    __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = sub_1DDA19E68(*(void *)(a1 + 24));
  uint64_t v10 = *(void *)(a1 + 24);
  LODWORD(v18) = v9 + v8;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v10 + 40))(v10, &v18, 1);
  sub_1DDAA520C(v7, &v18);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = sub_1DDA7EF68(v18);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v11 + 32))(v11, v12, *(void *)(v18 + 24));
  *a3 = v18;
  return sub_1DDA7A8CC(v19);
}

void sub_1DDB64C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1DDA7A8CC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB64CA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_allKeys(*(void **)(a1 + 48), a2, a3, a4, a5);
}

void sub_1DDB64CB4(uint64_t a1)
{
  sub_1DDB64E4C(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB64CEC@<X0>(void *a1@<X1>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  uint64_t result = sub_1DDB64D50(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1DDB64D3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB64D50(void *a1, void *a2, void **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3981AF8;
  sub_1DDB6485C(a1 + 3, a2, *a3);
  return a1;
}

void sub_1DDB64D9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB64DB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3981AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB64DD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3981AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB64E24(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDB64E4C(uint64_t a1)
{
  *(void *)a1 = &unk_1F3981AC8;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_1DDA18310(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_1DDA18310(v3);
  }
  return a1;
}

uint64_t sub_1DDB64EB4(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = (void *)sub_1DDBF0D7C(a1, a2);
  *uint64_t v5 = &unk_1F3981B48;
  v5[6] = 0;
  uint64_t v6 = (void **)(v5 + 6);
  v5[7] = 0;
  v5[8] = 0;
  *(_DWORD *)(a1 + 12) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1DDA19EC8(*a3);
  int v7 = sub_1DDA19EC8(*a3);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      float v9 = sub_1DDA1A014(*a3);
      float v10 = v9;
      uint64_t v12 = *(float **)(a1 + 56);
      unint64_t v11 = *(void *)(a1 + 64);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = (float *)*v6;
        uint64_t v15 = ((char *)v12 - (unsigned char *)*v6) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          sub_1DDA17F78();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          unsigned int v19 = (char *)sub_1DDA17F90(a1 + 64, v18);
          uint64_t v14 = *(float **)(a1 + 48);
          uint64_t v12 = *(float **)(a1 + 56);
        }
        else
        {
          unsigned int v19 = 0;
        }
        uint64_t v20 = (float *)&v19[4 * v15];
        float *v20 = v10;
        uint64_t v13 = v20 + 1;
        while (v12 != v14)
        {
          int v21 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(void *)(a1 + 48) = v20;
        *(void *)(a1 + 56) = v13;
        *(void *)(a1 + 64) = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v12 = v9;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 56) = v13;
    }
  }
  return a1;
}

void sub_1DDB65070(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDB6509C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5);
  float v10 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v7, *(unsigned int *)(a1 + 12), v8, v9);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, @"Top", v12);

  unint64_t v16 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v13, *(unsigned int *)(a1 + 16), v14, v15);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, @"Left", v18);

  uint64_t v22 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v19, *(unsigned int *)(a1 + 20), v20, v21);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, @"Bottom", v24);

  uint64_t v28 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v25, *(unsigned int *)(a1 + 24), v26, v27);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, @"mRight", v30);

  uint64_t v34 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v31, *(unsigned int *)(a1 + 28), v32, v33);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, @"Plane", v36);

  uint64_t v40 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v37, *(unsigned int *)(a1 + 32), v38, v39);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, @"Planes", v42);

  uint64_t v46 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v43, *(unsigned int *)(a1 + 36), v44, v45);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, @"RowPitch", v48);

  id v52 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v49, *(unsigned int *)(a1 + 40), v50, v51);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, @"ColPitch", v54);

  uint64_t v63 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v55, v56, v57, v58);
  uint64_t v65 = *(_DWORD **)(a1 + 48);
  int v66 = *(_DWORD **)(a1 + 56);
  while (v65 != v66)
  {
    LODWORD(v64) = *v65;
    uint64_t v67 = objc_msgSend_numberWithFloat_(NSNumber, v59, v60, v61, v62, v64);
    objc_msgSend_addObject_(v63, v68, (uint64_t)v67, v69, v70);

    ++v65;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v63, @"Delta", v62);
  uint64_t v71 = [RAWOpcodeDeltaPerColumn alloc];
  CFDictionaryRef v75 = objc_msgSend_initWithArguments_(v71, v72, (uint64_t)v6, v73, v74);

  return v75;
}

void sub_1DDB652D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1DDB6532C(void *a1)
{
  *a1 = &unk_1F3981B48;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1DDB6537C(void *a1)
{
  *a1 = &unk_1F3981B48;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB653EC()
{
  return 11;
}

void sub_1DDB653F4(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v6 = a1;
  id v5 = a2;
  sub_1DDB674C8(&v6, &v5, a3);
}

void sub_1DDB65454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_1DDB65470(id *a1)
{
  return *a1;
}

id sub_1DDB65478(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v1 = sub_1DDB65534(a1, @"rawImageClass");
  id v5 = sub_1DDA2E474(v1, (const char *)@"className", v2, v3, v4);

  return v5;
}

void sub_1DDB65514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB65534(uint64_t a1, void *a2)
{
  uint64_t v2 = sub_1DDA2E3A8(*(void **)(a1 + 8), a2, 0);

  return v2;
}

id sub_1DDB65568(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v1 = sub_1DDB65534(a1, @"version");
  id v5 = sub_1DDA2E474(v1, (const char *)@"minRawCameraVersion", v2, v3, v4);

  return v5;
}

void sub_1DDB65604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB65624(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDB65534(a1, @"rawProperties");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  sub_1DDA1E4C0(v4, a2);
}

void sub_1DDB656BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDB656E0(uint64_t a1)
{
  uint64_t v2 = sub_1DDB42D98();
  uint64_t v3 = sub_1DDB65568(a1);
  id v4 = (void *)v3;
  if (!v2 || !v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v5 = sub_1DDB42E64(v2);
  BOOL v6 = v5 >= (int)sub_1DDB42E64(v4);

  return v6;
}

void sub_1DDB657AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB657E4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
}

void sub_1DDB657F4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  id v9 = a2;
  id v10 = a3;
  uint64_t v43 = a1;
  id v44 = a4;
  unint64_t v11 = sub_1DDB65534(a1, @"rawPlugin");
  *a5 = 0;
  a5[1] = 0;
  if (objc_msgSend_isEqualToString_(v10, v12, (uint64_t)off_1EAB8AA90[0], v13, v14))
  {
LABEL_19:
    if (sub_1DDA2E4E0(v11, v10))
    {
      uint64_t v38 = sub_1DDB6C4F4();
      uint64_t v39 = (void *)MEMORY[0x1E01C46E0](*(void *)(v43 + 16));
      sub_1DDB679CC(v11, v10, v38, v39, v44, &v45);
      long long v40 = v45;
      long long v45 = 0uLL;
      uint64_t v41 = (std::__shared_weak_count *)a5[1];
      *(_OWORD *)a5 = v40;
      if (v41)
      {
        sub_1DDA18310(v41);
        if (*((void *)&v45 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v45 + 1));
        }
      }
    }
    goto LABEL_24;
  }
  uint64_t v15 = (void (**)(void, void))MEMORY[0x1E01C46E0](*(void *)(v43 + 16));
  unint64_t v16 = ((void (**)(void, __CFString *))v15)[2](v15, @"methodNumber");

  int v21 = objc_msgSend_shortValue(v16, v17, v18, v19, v20);
  if (v21 < 0)
  {

    goto LABEL_19;
  }
  uint64_t v42 = v16;
  int v22 = (unsigned __int16)v21;
  do
  {
    uint64_t v23 = NSString;
    LODWORD(v45) = v22;
    uint64_t v24 = sub_1DDA4C49C(&v45);
    uint64_t v28 = objc_msgSend_stringWithFormat_(v23, v25, @"v%@", v26, v27, v24);

    uint64_t v29 = sub_1DDA2E3A8(v11, v28, 0);
    uint64_t v30 = v29;
    if (v29)
    {
      if (v9 && sub_1DDA2E4E0(v29, v9))
      {
        uint64_t v31 = sub_1DDA2E3A8(v30, v9, 0);

        uint64_t v30 = (void *)v31;
      }
      if (sub_1DDA2E4E0(v30, v10))
      {
        uint64_t v32 = sub_1DDB6C4F4();
        uint64_t v33 = (void *)MEMORY[0x1E01C46E0](*(void *)(v43 + 16));
        sub_1DDB679CC(v30, v10, v32, v33, v44, &v45);
        long long v34 = v45;
        long long v45 = 0uLL;
        uint64_t v35 = (std::__shared_weak_count *)a5[1];
        *(_OWORD *)a5 = v34;
        if (v35)
        {
          sub_1DDA18310(v35);
          if (*((void *)&v45 + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&v45 + 1));
          }
        }
      }
    }

    uint64_t v36 = *a5;
    if (*a5) {
      break;
    }
  }
  while (v22-- >= 1);

  if (!v36) {
    goto LABEL_19;
  }
LABEL_24:
}

void sub_1DDB65A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v19 = *(std::__shared_weak_count **)(v15 + 8);
  if (v19) {
    sub_1DDA18310(v19);
  }

  _Unwind_Resume(a1);
}

void sub_1DDB65B3C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!*(void *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = sub_1DDB65534(a1, @"rawImageClass");
  int v7 = sub_1DDA83A80(v3, (const char *)@"supportedMethods", v4, v5, v6);

  int v12 = sub_1DDB65DA4();
  for (unint64_t i = 0; i < objc_msgSend_count(v7, v8, v9, v10, v11); ++i)
  {
    v27.__r_.__value_.__r.__words[0] = i;
    uint64_t v17 = sub_1DDB65E24(v7, (const char *)&v27, v14, v15, v16);
    sub_1DDA31384(v17, &__str);

    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    char v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    uint64_t v20 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string::size_type v10 = size - 1;
      int v21 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v21->__r_.__value_.__s.__data_[v10] == 112)
      {
        if (!v12) {
          goto LABEL_26;
        }
        std::string::basic_string(&v27, &__str, 0, v10, (std::allocator<char> *)&v29);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string __str = v27;
        char v19 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        uint64_t v20 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
    }
    if (v19 >= 0) {
      p_str = &__str;
    }
    else {
      p_str = v20;
    }
    if (atoi((const char *)p_str) >= 6)
    {
      unint64_t v23 = a2[1];
      if (v23 >= a2[2])
      {
        uint64_t v25 = sub_1DDA49920(a2, (long long *)&__str);
      }
      else
      {
        if (v19 < 0)
        {
          sub_1DDA2639C((unsigned char *)a2[1], v20, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v24 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          *(void *)(v23 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v23 = v24;
        }
        uint64_t v25 = v23 + 24;
        a2[1] = v23 + 24;
      }
      a2[1] = v25;
      char v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
LABEL_26:
    if (v19 < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1DDB65D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1DDA2A044((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB65DA4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB8AF90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EAB8AF90))
  {
    byte_1EAB8AF88 = getenv("RAWCAMERA_ENABLE_PRELIMINARY_SUPPORT") != 0;
    __cxa_guard_release(&qword_1EAB8AF90);
  }
  return byte_1EAB8AF88;
}

id sub_1DDB65E24(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_objectAtIndexedSubscript_(a1, a2, *(void *)a2, a4, a5);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;

  return v7;
}

void sub_1DDB65E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB65E90(uint64_t a1, void *a2, void *a3)
{
  sub_1DDB657F4(a1, a2, a3, 0, &v9);
  if (v9)
  {
    id v7 = sub_1DDB67AB8(v9, v3, v4, v5, v6);
  }
  else
  {
    id v7 = 0;
  }
  if (v10) {
    sub_1DDA18310(v10);
  }

  return v7;
}

void sub_1DDB65EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDB65F14(uint64_t a1, void *a2)
{
  sub_1DDB657F4(a1, 0, @"blackNoiseModel", 0, &v139);
  uint64_t v7 = v139;
  if (v139)
  {
    uint64_t v8 = sub_1DDB67AB8(v139, v3, v4, v5, v6);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0 || (unint64_t)objc_msgSend_count(v8, v9, v10, v11, v12) < 2)
    {
      int v47 = (std::__shared_weak_count *)a2[1];
      *a2 = 0;
      a2[1] = 0;
      if (!v47)
      {
LABEL_18:

        goto LABEL_19;
      }
LABEL_17:
      sub_1DDA18310(v47);
      goto LABEL_18;
    }
    uint64_t v137 = 0;
    int v16 = sub_1DDB66788(v8, (const char *)&v137, v13, v14, v15);
    uint64_t v131 = v8;
    if (v16)
    {
      if (v16 != 1 || (unint64_t)objc_msgSend_count(v8, v17, v18, v19, v20) <= 2)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v137 = 1;
      unsigned int v130 = sub_1DDB66788(v8, (const char *)&v137, v21, v22, v23);
      int v28 = objc_msgSend_count(v8, v24, v25, v26, v27);
      uint64_t v125 = a2;
      uint64_t v126 = v7;
      uint64_t v32 = (v28 - 2);
      if (v28 == 2)
      {
        uint64_t v46 = 0;
        uint64_t v34 = 0;
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        do
        {
          uint64_t v137 = v33 + 2;
          uint64_t v38 = sub_1DDB66820(v8, (const char *)&v137, v29, v30, v31);
          if (!v38)
          {
            double v120 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v120, "RawCameraException");
            __cxa_throw(v120, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (v130)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v137 = ++v39;
              long long v40 = sub_1DDB66820(v38, (const char *)&v137, v35, v36, v37);
              long long v45 = v40;
              if (!v40)
              {
                uint64_t v118 = __cxa_allocate_exception(0x10uLL);
                MEMORY[0x1E01C3B90](v118, "RawCameraException");
                __cxa_throw(v118, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              v34 += objc_msgSend_count(v40, v41, v42, v43, v44);
            }
            while (v130 != v39);
          }

          ++v33;
        }
        while (v33 != v32);
        uint64_t v46 = v32;
      }
      uint64_t v74 = 16 * v46;
      unsigned int v75 = v32 * v130;
      sub_1DDAA520C(16 * v46 + 16 * v32 * v130 + 24 * v34 + 16, &v137);
      uint64_t v76 = sub_1DDA7EF68(v137);
      *(_DWORD *)uint64_t v76 = v130;
      *(_DWORD *)(v76 + 4) = v32;
      uint64_t v124 = v76;
      uint64_t v128 = v76 + 16;
      *(void *)(v76 + 8) = v76 + 16;
      if (v32)
      {
        uint64_t v80 = 0;
        uint64_t v81 = v128 + v74;
        uint64_t v82 = v128 + v74 + 16 * v75;
        uint64_t v127 = v46;
        do
        {
          *(void *)&long long v134 = (v80 + 2);
          uint64_t v83 = sub_1DDB66820(v8, (const char *)&v134, v77, v78, v79);
          uint64_t v87 = v83;
          if (!v83)
          {
            uint64_t v121 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v121, "RawCameraException");
            __cxa_throw(v121, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          *(void *)&long long v134 = 0;
          int v88 = sub_1DDB66788(v83, (const char *)&v134, v84, v85, v86);
          uint64_t v129 = v80;
          uint64_t v92 = v128 + 16 * v80;
          *(_DWORD *)uint64_t v92 = v88;
          *(void *)(v92 + 8) = v81;
          if (v130)
          {
            uint64_t v93 = 0;
            do
            {
              uint64_t v94 = v93 + 1;
              *(void *)&long long v134 = v93 + 1;
              uint64_t v95 = sub_1DDB66820(v87, (const char *)&v134, v89, v90, v91);
              uint64_t v100 = v95;
              if (!v95)
              {
                uint64_t v119 = __cxa_allocate_exception(0x10uLL);
                MEMORY[0x1E01C3B90](v119, "RawCameraException");
                __cxa_throw(v119, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              *(_DWORD *)(v81 + 16 * v93) = v93;
              unint64_t v101 = objc_msgSend_count(v95, v96, v97, v98, v99);
              uint64_t v105 = v81 + 16 * v93;
              *(_DWORD *)(v105 + 4) = v101 / 3;
              uint64_t v106 = (unsigned int *)(v105 + 4);
              *(void *)(v106 + 1) = v82;
              if ((v101 / 3))
              {
                unint64_t v107 = 0;
                uint64_t v108 = 0;
                do
                {
                  *(void *)&long long v134 = v108;
                  *(double *)(v82 + 8 * v108) = sub_1DDB667D0(v100, (const char *)&v134, v102, v103, v104);
                  *(void *)&long long v134 = v108 + 1;
                  uint64_t v112 = v82 + 8 * v108;
                  *(double *)(v112 + 8) = sub_1DDB667D0(v100, (const char *)&v134, v109, v110, v111);
                  *(void *)&long long v134 = v108 + 2;
                  *(double *)(v112 + 16) = sub_1DDB667D0(v100, (const char *)&v134, v113, v114, v115);
                  ++v107;
                  unint64_t v116 = *v106;
                  v108 += 3;
                }
                while (v107 < v116);
              }
              else
              {
                LODWORD(v116) = 0;
              }
              v82 += 24 * v116;

              uint64_t v93 = v94;
              uint64_t v8 = v131;
            }
            while (v94 != v130);
          }
          v81 += 16 * v130;

          uint64_t v80 = v129 + 1;
        }
        while (v129 + 1 != v127);
      }
      uint64_t v132 = v137;
      uint64_t v133 = v138;
      if (v138) {
        atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1DDB53FDC(v124, &v132, &v134);
      uint64_t v7 = v126;
      long long v117 = v134;
      long long v134 = 0uLL;
      uint64_t v73 = (std::__shared_weak_count *)v125[1];
      *(_OWORD *)uint64_t v125 = v117;
      if (v73)
      {
LABEL_51:
        sub_1DDA18310(v73);
        if (*((void *)&v134 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v134 + 1));
        }
      }
    }
    else
    {
      unint64_t v53 = (objc_msgSend_count(v8, v17, v18, v19, v20) - 1) / 0xEuLL;
      if (objc_msgSend_count(v8, v49, v50, v51, v52) != ((14 * v53) | 1))
      {
        uint64_t v123 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v123, "RawCameraException");
        __cxa_throw(v123, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      sub_1DDAA520C(112 * (v53 + 1), &v137);
      uint64_t v136 = 0;
      uint64_t v57 = sub_1DDA7EF68(v137);
      uint64_t v58 = a2;
      uint64_t v59 = v7;
      uint64_t v135 = v57;
      if (v53)
      {
        int v60 = 0;
        do
        {
          ++v136;
          *(_DWORD *)uint64_t v57 = sub_1DDB66788(v8, (const char *)&v136, v54, v55, v56);
          ++v136;
          *(double *)(v57 + 8) = sub_1DDB667D0(v8, (const char *)&v136, v61, v62, v63);
          ++v136;
          *(double *)(v57 + 16) = sub_1DDB667D0(v8, (const char *)&v136, v64, v65, v66);
          for (uint64_t i = 24; i != 64; i += 8)
          {
            ++v136;
            *(double *)(v57 + i) = sub_1DDB667D0(v8, (const char *)&v136, v67, v68, v69);
          }
          ++v136;
          *(double *)(v57 + 64) = sub_1DDB667D0(v8, (const char *)&v136, v67, v68, v69);
          for (uint64_t j = 72; j != 112; j += 8)
          {
            ++v136;
            *(double *)(v57 + j) = sub_1DDB667D0(v8, (const char *)&v136, v54, v55, v56);
          }
          ++v60;
          v57 += 112;
        }
        while (v60 != v53);
      }
      *(_OWORD *)(v57 + 80) = 0u;
      *(_OWORD *)(v57 + 96) = 0u;
      *(_OWORD *)(v57 + 48) = 0u;
      *(_OWORD *)(v57 + 64) = 0u;
      *(_OWORD *)(v57 + 16) = 0u;
      *(_OWORD *)(v57 + 32) = 0u;
      *(_OWORD *)uint64_t v57 = 0u;
      uint64_t v132 = v137;
      uint64_t v133 = v138;
      if (v138) {
        atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1DDAF39D0(&v135, &v132, &v134);
      uint64_t v7 = v59;
      long long v72 = v134;
      long long v134 = 0uLL;
      uint64_t v73 = (std::__shared_weak_count *)v58[1];
      *(_OWORD *)uint64_t v58 = v72;
      if (v73) {
        goto LABEL_51;
      }
    }
    if (v133) {
      sub_1DDA18310(v133);
    }
    int v47 = v138;
    if (!v138) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_19:
  if (v140) {
    sub_1DDA18310(v140);
  }
  return v7 != 0;
}

void sub_1DDB66628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  __cxa_free_exception(v20);

  uint64_t v23 = *(std::__shared_weak_count **)(v21 - 96);
  if (v23) {
    sub_1DDA18310(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB66788(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = sub_1DDB6745C(a1, a2, a3, a4, a5);
  uint64_t v10 = objc_msgSend_intValue(v5, v6, v7, v8, v9);

  return v10;
}

void sub_1DDB667C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB667D0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = sub_1DDB6745C(a1, a2, a3, a4, a5);
  objc_msgSend_doubleValue(v5, v6, v7, v8, v9);
  double v11 = v10;

  return v11;
}

void sub_1DDB66810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB66820(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_objectAtIndexedSubscript_(a1, a2, *(void *)a2, a4, a5);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;

  return v7;
}

void sub_1DDB6687C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDB6688C(uint64_t a1, void *a2)
{
  sub_1DDB657F4(a1, 0, @"blackLevelModel", 0, &v113);
  uint64_t v7 = v113;
  if (v113)
  {
    uint64_t v8 = sub_1DDB67AB8(v113, v3, v4, v5, v6);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if ((unint64_t)objc_msgSend_count(v8, v9, v10, v11, v12) <= 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v111 = 0;
      uint64_t v104 = v8;
      if (sub_1DDB66788(v8, (const char *)&v111, v13, v14, v15)
        || (unint64_t)objc_msgSend_count(v8, v16, v17, v18, v19) <= 2)
      {
        uint64_t v98 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v98, "RawCameraException");
        __cxa_throw(v98, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v111 = 1;
      unsigned int v23 = sub_1DDB66788(v8, (const char *)&v111, v20, v21, v22);
      int v28 = objc_msgSend_count(v8, v24, v25, v26, v27);
      uint64_t v100 = a2;
      uint64_t v101 = v7;
      uint64_t v32 = (v28 - 2);
      if (v28 == 2)
      {
        uint64_t v46 = 0;
        uint64_t v34 = 0;
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        do
        {
          uint64_t v111 = (v33 + 2);
          uint64_t v38 = sub_1DDB66820(v8, (const char *)&v111, v29, v30, v31);
          if (!v38)
          {
            uint64_t v95 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v95, "RawCameraException");
            __cxa_throw(v95, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (v23)
          {
            uint64_t v39 = 0;
            do
            {
              uint64_t v111 = ++v39;
              long long v40 = sub_1DDB66820(v38, (const char *)&v111, v35, v36, v37);
              long long v45 = v40;
              if (!v40)
              {
                uint64_t v93 = __cxa_allocate_exception(0x10uLL);
                MEMORY[0x1E01C3B90](v93, "RawCameraException");
                __cxa_throw(v93, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              v34 += objc_msgSend_count(v40, v41, v42, v43, v44);
            }
            while (v23 != v39);
          }

          ++v33;
        }
        while (v33 != v32);
        uint64_t v46 = v32;
      }
      sub_1DDAA520C(16 * v46 + 16 * v32 * v23 + 24 * v34 + 16, &v111);
      uint64_t v49 = sub_1DDA7EF68(v111);
      *(_DWORD *)uint64_t v49 = v23;
      *(_DWORD *)(v49 + 4) = v32;
      uint64_t v99 = v49;
      uint64_t v105 = v49 + 16;
      *(void *)(v49 + 8) = v49 + 16;
      if (v32)
      {
        uint64_t v53 = 0;
        uint64_t v54 = v105 + 16 * v46;
        uint64_t v55 = v54 + 16 * v32 * v23;
        uint64_t v107 = v23;
        unsigned int v103 = v23;
        uint64_t v102 = v46;
        do
        {
          *(void *)&long long v110 = (v53 + 2);
          uint64_t v56 = sub_1DDB66820(v8, (const char *)&v110, v50, v51, v52);
          int v60 = v56;
          if (!v56)
          {
            float v96 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v96, "RawCameraException");
            __cxa_throw(v96, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          *(void *)&long long v110 = 0;
          int v61 = sub_1DDB66788(v56, (const char *)&v110, v57, v58, v59);
          uint64_t v106 = v53;
          uint64_t v65 = v105 + 16 * v53;
          *(_DWORD *)uint64_t v65 = v61;
          *(void *)(v65 + 8) = v54;
          if (v23)
          {
            uint64_t v66 = 0;
            do
            {
              uint64_t v67 = v66 + 1;
              *(void *)&long long v110 = v66 + 1;
              uint64_t v68 = sub_1DDB66820(v60, (const char *)&v110, v62, v63, v64);
              uint64_t v73 = v68;
              if (!v68)
              {
                uint64_t v94 = __cxa_allocate_exception(0x10uLL);
                MEMORY[0x1E01C3B90](v94, "RawCameraException");
                __cxa_throw(v94, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              *(_DWORD *)(v54 + 16 * v66) = v66;
              unint64_t v74 = objc_msgSend_count(v68, v69, v70, v71, v72);
              uint64_t v78 = v60;
              uint64_t v79 = v54 + 16 * v66;
              *(_DWORD *)(v79 + 4) = v74 / 3;
              uint64_t v80 = (unsigned int *)(v79 + 4);
              *(void *)(v80 + 1) = v55;
              if ((v74 / 3))
              {
                unint64_t v81 = 0;
                uint64_t v82 = 0;
                do
                {
                  *(void *)&long long v110 = v82;
                  *(double *)(v55 + 8 * v82) = sub_1DDB667D0(v73, (const char *)&v110, v75, v76, v77);
                  *(void *)&long long v110 = v82 + 1;
                  uint64_t v86 = v55 + 8 * v82;
                  *(double *)(v86 + 8) = sub_1DDB667D0(v73, (const char *)&v110, v83, v84, v85);
                  *(void *)&long long v110 = v82 + 2;
                  *(double *)(v86 + 16) = sub_1DDB667D0(v73, (const char *)&v110, v87, v88, v89);
                  ++v81;
                  unint64_t v90 = *v80;
                  v82 += 3;
                }
                while (v81 < v90);
              }
              else
              {
                LODWORD(v90) = 0;
              }
              v55 += 24 * v90;

              uint64_t v66 = v67;
              int v60 = v78;
            }
            while (v67 != v107);
          }
          v54 += 16 * v107;

          uint64_t v53 = v106 + 1;
          uint64_t v8 = v104;
          unsigned int v23 = v103;
        }
        while (v106 + 1 != v102);
      }
      uint64_t v108 = v111;
      uint64_t v109 = v112;
      if (v112) {
        atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1DDB552A0(v99, &v108, &v110);
      uint64_t v7 = v101;
      long long v91 = v110;
      long long v110 = 0uLL;
      uint64_t v92 = (std::__shared_weak_count *)v100[1];
      *(_OWORD *)uint64_t v100 = v91;
      if (v92)
      {
        sub_1DDA18310(v92);
        if (*((void *)&v110 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v110 + 1));
        }
      }
      if (v109) {
        sub_1DDA18310(v109);
      }
      int v47 = v112;
      if (!v112) {
        goto LABEL_17;
      }
    }
    else
    {
      int v47 = (std::__shared_weak_count *)a2[1];
      *a2 = 0;
      a2[1] = 0;
      if (!v47)
      {
LABEL_17:

        goto LABEL_18;
      }
    }
    sub_1DDA18310(v47);
    goto LABEL_17;
  }
LABEL_18:
  if (v114) {
    sub_1DDA18310(v114);
  }
  return v7 != 0;
}

void sub_1DDB66DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  __cxa_free_exception(v24);

  uint64_t v27 = *(std::__shared_weak_count **)(v25 - 88);
  if (v27) {
    sub_1DDA18310(v27);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1DDB66F24(uint64_t a1, void *a2)
{
  __src[4] = *MEMORY[0x1E4F143B8];
  sub_1DDB657F4(a1, 0, @"signalNoiseModel", 0, &v80);
  uint64_t v7 = v80;
  if (v80)
  {
    uint64_t v8 = sub_1DDB67AB8(v80, v3, v4, v5, v6);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if ((unint64_t)objc_msgSend_count(v8, v9, v10, v11, v12) <= 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      __src[0] = 0;
      if (sub_1DDB66788(v8, (const char *)__src, v13, v14, v15)
        || (unint64_t)objc_msgSend_count(v8, v16, v17, v18, v19) <= 2)
      {
        uint64_t v67 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v67, "RawCameraException");
        __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      __src[0] = 1;
      unsigned int v26 = sub_1DDB66788(v8, (const char *)__src, v20, v21, v22);
      if (v26 - 5 <= 0xFFFFFFFB)
      {
        uint64_t v68 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v68, "RawCameraException");
        __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v27 = objc_msgSend_objectAtIndexedSubscript_(v8, v23, 2, v24, v25);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v69 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v69, "RawCameraException");
        __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      char v72 = objc_msgSend_BOOLValue(v27, v28, v29, v30, v31);
      uint64_t v71 = a2;
      unint64_t v74 = v27;
      uint64_t v36 = 0;
      unsigned int v37 = v26 + 3;
      unsigned int v41 = objc_msgSend_count(v8, v32, v33, v34, v35) - (v26 + 3);
      uint64_t v42 = v26;
      unsigned int v43 = v41 / (3 * v26 + 1);
      do
      {
        uint64_t v78 = v36 + 3;
        *(double *)&__src[v36++] = sub_1DDB667D0(v8, (const char *)&v78, v38, v39, v40);
      }
      while (v26 != v36);
      sub_1DDAA520C(8 * v26 + 16 * v43 + 24 * v43 * v26 + 32, &v78);
      uint64_t v70 = v7;
      uint64_t v44 = sub_1DDA7EF68(v78);
      uint64_t v45 = v44 + 32 + 8 * v26;
      *(_DWORD *)uint64_t v44 = v26;
      *(_DWORD *)(v44 + 4) = v43;
      *(unsigned char *)(v44 + 8) = v72;
      *(void *)(v44 + 16) = v44 + 32;
      memcpy((void *)(v44 + 32), __src, 8 * v26);
      uint64_t v73 = v44;
      *(void *)(v44 + 24) = v45;
      if (3 * v26 < v41)
      {
        uint64_t v49 = 0;
        uint64_t v50 = v45 + 16 * v43;
        if (v43 <= 1) {
          uint64_t v51 = 1;
        }
        else {
          uint64_t v51 = v43;
        }
        do
        {
          *(void *)&long long v77 = v37;
          int v52 = sub_1DDB66788(v8, (const char *)&v77, v46, v47, v48);
          uint64_t v53 = 0;
          uint64_t v54 = v45 + 16 * v49;
          *(_DWORD *)uint64_t v54 = v52;
          *(void *)(v54 + 8) = v50;
          ++v37;
          uint64_t v55 = v42;
          do
          {
            *(void *)&long long v77 = v37;
            *(double *)(v50 + 24 * v53) = sub_1DDB667D0(v8, (const char *)&v77, v46, v47, v48);
            *(void *)&long long v77 = v37 + 1;
            *(double *)(v50 + 24 * v53 + 8) = sub_1DDB667D0(v8, (const char *)&v77, v56, v57, v58);
            *(void *)&long long v77 = v37 + 2;
            *(double *)(v50 + 24 * v53++ + 16) = sub_1DDB667D0(v8, (const char *)&v77, v59, v60, v61);
            v37 += 3;
            --v55;
          }
          while (v55);
          v50 += 24 * v42;
          ++v49;
        }
        while (v49 != v51);
      }
      uint64_t v75 = v78;
      uint64_t v76 = v79;
      if (v79) {
        atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1DDB546D0(v73, &v75, &v77);
      uint64_t v7 = v70;
      long long v62 = v77;
      long long v77 = 0uLL;
      uint64_t v63 = (std::__shared_weak_count *)v71[1];
      *(_OWORD *)uint64_t v71 = v62;
      if (v63)
      {
        sub_1DDA18310(v63);
        if (*((void *)&v77 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v77 + 1));
        }
      }
      if (v76) {
        sub_1DDA18310(v76);
      }
      if (v79) {
        sub_1DDA18310(v79);
      }
    }
    else
    {
      uint64_t v64 = (std::__shared_weak_count *)a2[1];
      *a2 = 0;
      a2[1] = 0;
      if (v64) {
        sub_1DDA18310(v64);
      }
    }
  }
  if (v81) {
    sub_1DDA18310(v81);
  }
  return v7 != 0;
}

void sub_1DDB67390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  __cxa_free_exception(v22);

  if (a21) {
    sub_1DDA18310(a21);
  }
  _Unwind_Resume(a1);
}

id sub_1DDB6745C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_objectAtIndexedSubscript_(a1, a2, *(void *)a2, a4, a5);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;

  return v7;
}

void sub_1DDB674B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB674C8@<X0>(id *a1@<X1>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x48uLL);
  uint64_t result = sub_1DDB6752C((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_1DDB67518(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB6752C(uint64_t a1, id *a2, void **a3)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1F3981B90;
  uint64_t v4 = *a3;
  id v5 = *a2;
  id v6 = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  return a1;
}

void sub_1DDB675A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3981B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB675C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3981B90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB67618(uint64_t a1)
{
  return sub_1DDB67624(a1 + 24);
}

uint64_t sub_1DDB67624(uint64_t a1)
{
  return a1;
}

void sub_1DDB6766C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1DDB6766C(a1, *a2);
    sub_1DDB6766C(a1, a2[1]);
    sub_1DDAB6E08((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1DDB676C8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB91258, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EAB91258))
  {
    operator new();
  }
  return qword_1EAB91250;
}

void sub_1DDB67748(_Unwind_Exception *a1)
{
}

void sub_1DDB67760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t **)sub_1DDB676C8();
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    uint64_t v6 = *(void *)(a1 + 16);
  }
  uint64_t v7 = a2;
  sub_1DDB67938(v4, __p, (uint64_t)__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DDB677E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB67804(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 24);
  id v5 = *(std::__shared_weak_count **)(v3 + 32);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = sub_1DDB65478(v4);
  if (v5) {
    sub_1DDA18310(v5);
  }
  uint64_t v7 = sub_1DDB676C8();
  sub_1DDA31384(v6, __p);
  uint64_t v8 = sub_1DDA2A530(v7, __p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if ((void **)(sub_1DDB676C8() + 8) != v8)
  {
    uint64_t v9 = v8[7];
    if (v9)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v9 + 16))(__p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
    }
  }
}

void sub_1DDB678F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1DDB67924()
{
  if (v0) {
    sub_1DDA18310(v0);
  }
  JUMPOUT(0x1DDB6791CLL);
}

_OWORD *sub_1DDB67938(uint64_t **a1, void **a2, uint64_t a3)
{
  id v5 = (void **)sub_1DDA4B7C4((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    void v6[2] = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *((void *)v6 + 6) = v8;
    *((void *)v6 + 7) = v9;
    sub_1DDA25078(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1DDB679CC(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  id v15 = a1;
  id v14 = a2;
  id v13 = a3;
  id v12 = a4;
  id v11 = a5;
  sub_1DDB681C4(&v15, &v14, &v13, &v12, &v11, a6);
}

void sub_1DDB67A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1DDB67AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_1DDA2E474(*(void **)(a1 + 16), *(const char **)(a1 + 24), a3, a4, a5);
  if (v6)
  {
    uint64_t v26 = 0;
    uint64_t v27 = &v26;
    uint64_t v28 = 0x3032000000;
    uint64_t v29 = sub_1DDB67D30;
    uint64_t v30 = sub_1DDB67D5C;
    id v31 = 0;
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    _OWORD v25[2] = sub_1DDB67D64;
    v25[3] = &unk_1E6D05620;
    v25[4] = &v26;
    v25[5] = a1;
    uint64_t v7 = MEMORY[0x1E01C46E0](v25);
    uint64_t v8 = (void *)v27[5];
    v27[5] = v7;

    id v9 = v6;
    objc_msgSend_UTF8String(v9, v10, v11, v12, v13);
    id v14 = sub_1DDB69460();
    id v15 = (void *)v27[5];
    v27[5] = 0;

    if (!v14)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    id v16 = v14;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      objc_msgSend_description(v16, v17, v18, v19, v20);
      unsigned int v23 = (const void *)objc_claimAutoreleasedReturnValue();
      CFShow(v23);
      uint64_t v24 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v24, "RawCameraException");
      __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }

    _Block_object_dispose(&v26, 8);
  }
  else
  {
    id v16 = 0;
  }

  return v16;
}

void sub_1DDB67CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  __cxa_free_exception(v23);

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB67D30(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x1E01C46E0](*(void *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1DDB67D5C(uint64_t a1)
{
}

id sub_1DDB67D64(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1DDA1A880(__p, a2);
  uint64_t v10 = sub_1DDA1E51C((uint64_t)__p, v3, v4, v5, v6);
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  if ((objc_msgSend_hasPrefix_(v10, v7, @"@", v8, v9) & 1) == 0)
  {
    if (objc_msgSend_isEqualToString_(v10, v11, @"inherited", v13, v14))
    {
      uint64_t v32 = *(void *)(v2 + 48);
      if (!v32)
      {
        uint64_t v18 = objc_msgSend_stringWithFormat_(NSString, v29, @"Inherited::%@", v30, v31, *(void *)(v2 + 24));

        uint64_t v37 = *(void *)(v2 + 40);
        if (v37)
        {
          unsigned int v23 = (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v18);
        }
        else
        {
          unsigned int v23 = 0;
        }
        goto LABEL_16;
      }
      uint64_t v33 = (*(void (**)(void))(v32 + 16))();
    }
    else
    {
      uint64_t v34 = *(void **)(v2 + 32);
      if (v34)
      {
        unsigned int v23 = objc_msgSend_objectForKeyedSubscript_(v34, v29, (uint64_t)v10, v30, v31);
        if (v23) {
          goto LABEL_15;
        }
      }
      uint64_t v35 = *(void *)(v2 + 40);
      if (!v35)
      {
        unsigned int v23 = 0;
        goto LABEL_15;
      }
      uint64_t v33 = (*(void (**)(uint64_t, void *))(v35 + 16))(v35, v10);
    }
    unsigned int v23 = (void *)v33;
LABEL_15:
    uint64_t v18 = v10;
    goto LABEL_16;
  }
  uint64_t v15 = objc_msgSend_length(v10, v11, v12, v13, v14);
  uint64_t v18 = objc_msgSend_substringWithRange_(v10, v16, 1, v15 - 1, v17);

  objc_msgSend_objectForKeyedSubscript_(*(void **)(v2 + 16), v19, (uint64_t)v18, v20, v21);
  id v22 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  unsigned int v23 = v22;
  if (objc_opt_isKindOfClass())
  {
    id v24 = v22;
    objc_msgSend_UTF8String(v24, v25, v26, v27, v28);
    unsigned int v23 = sub_1DDB69460();
  }
LABEL_16:

  return v23;
}

void sub_1DDB67F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDB67FA4(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  *a1 = &unk_1F3981BE0;
  a1[1] = 0;
  id v16 = v11;
  a1[2] = v16;
  id v17 = v12;
  a1[3] = v17;
  id v18 = v13;
  a1[4] = v18;
  a1[5] = MEMORY[0x1E01C46E0](v14);
  a1[6] = MEMORY[0x1E01C46E0](v15);
  if (!v16 || !v17 || !v14)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v23 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v19, v20, v21, v22);
  id v24 = (void *)a1[1];
  a1[1] = v23;

  return a1;
}

void sub_1DDB68120(_Unwind_Exception *a1)
{
  __cxa_free_exception(v7);

  _Unwind_Resume(a1);
}

void sub_1DDB6818C(id *a1)
{
  sub_1DDB6835C(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB681C4@<X0>(void **a1@<X1>, void **a2@<X2>, void **a3@<X3>, void **a4@<X4>, void **a5@<X5>, void *a6@<X8>)
{
  id v12 = operator new(0x50uLL);
  uint64_t result = sub_1DDB68250(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1DDB6823C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB68250(void *a1, void **a2, void **a3, void **a4, void **a5, void **a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3981C10;
  sub_1DDB67FA4(a1 + 3, *a2, *a3, *a4, *a5, *a6);
  return a1;
}

void sub_1DDB682AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB682C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3981C10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB682E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3981C10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB68334(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

id *sub_1DDB6835C(id *a1)
{
  return a1;
}

void sub_1DDB683B0(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 2200))(__p);
  v4[0] = &unk_1F396F638;
  v4[1] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v2, a1);
  (*(void (**)(uint64_t, void **, void *, uint64_t))(*(void *)v2 + 600))(v2, __p, v4, 3);
  if (v3) {
    sub_1DDA18310(v3);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DDB684B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB684E4(uint64_t a1@<X0>, void *a2@<X8>)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) != 10) {
    goto LABEL_11;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v9, a1);
  uint64_t v4 = v9;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:BlackLevel");
  char v5 = (*(uint64_t (**)(uint64_t, void **, void **, void))(*(void *)v4 + 248))(v4, __p, v11, 0);
  if ((void *)((char *)v11[1] - (char *)v11[0]) == (void *)32) {
    char v6 = v5;
  }
  else {
    char v6 = 0;
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    sub_1DDA18310(v10);
  }
  if (v6)
  {
    *(_OWORD *)a2 = *(_OWORD *)v11;
    a2[2] = v12;
  }
  else
  {
LABEL_11:
    __p[0] = 0;
    sub_1DDA25B2C(a2, 4uLL, __p);
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
  }
}

void sub_1DDB68628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB68678(uint64_t a1)
{
  (*(void (**)(char **__return_ptr))(*(void *)a1 + 2888))(&v22);
  unint64_t v2 = v23 - v22;
  if (v23 == v22) {
    goto LABEL_13;
  }
  if (*(_DWORD *)v22 != 5)
  {
    if (*(_DWORD *)v22 == 4)
    {
      if (v2 > 7 && (*((_DWORD *)v22 + 1) & 0x80000000) == 0)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v17, a1);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v17 + 384))(&v19);
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
        *(void *)&long long v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
        *((void *)&v14 + 1) = v3;
        int v13 = *((_DWORD *)v22 + 1);
        sub_1DDAFB614(&v19, (unint64_t *)&v16, &v15, &v14, &v13, &v21);
        long long v4 = v21;
        long long v21 = 0uLL;
        char v5 = *(std::__shared_weak_count **)(a1 + 32);
        *(_OWORD *)(a1 + 24) = v4;
        if (v5)
        {
          sub_1DDA18310(v5);
          if (*((void *)&v21 + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&v21 + 1));
          }
        }
        if (v20) {
          sub_1DDA18310(v20);
        }
        char v6 = v18;
        if (!v18) {
          goto LABEL_27;
        }
LABEL_26:
        sub_1DDA18310(v6);
        goto LABEL_27;
      }
LABEL_33:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
LABEL_32:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_13:
    sub_1DDA30DE8(a1);
    goto LABEL_27;
  }
  if (v2 <= 0xB) {
    goto LABEL_33;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v17, a1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v17 + 384))(&v19);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
  *(void *)&long long v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
  *((void *)&v14 + 1) = v7;
  sub_1DDAFEDD4(&v19, (unint64_t *)&v16, &v15, &v14, &v21);
  if (v20) {
    sub_1DDA18310(v20);
  }
  if (v18) {
    sub_1DDA18310(v18);
  }
  int v8 = *((_DWORD *)v22 + 1);
  if (v8 < 0 || (*((_DWORD *)v22 + 2) & 0x80000000) != 0)
  {
    uint64_t v12 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v12, "RawCameraException");
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDAB4274(v21, v8);
  sub_1DDAB426C(v21, *((_DWORD *)v22 + 2));
  long long v9 = v21;
  if (*((void *)&v21 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v9;
  if (v10) {
    sub_1DDA18310(v10);
  }
  char v6 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)) {
    goto LABEL_26;
  }
LABEL_27:
  if (!*(void *)(a1 + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    goto LABEL_32;
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
}

void sub_1DDB68B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1DDA18310(a18);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  uint64_t v20 = *(void **)(v18 - 48);
  if (v20)
  {
    *(void *)(v18 - 40) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB68BAC(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2192))(a1);
  int v9 = 0;
  int v10 = v2;
  int v8 = &unk_1F396F638;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v6, a1);
  uint64_t v3 = v6;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2200))(__p, a1);
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v3 + 600))(v3, __p, &v8, 3);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
}

void sub_1DDB68CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB68D2C(uint64_t a1)
{
  sub_1DDA30DE8(a1);
  if (!*(void *)(a1 + 24))
  {
    (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(void *)a1 + 2888))(&v15, a1);
    int v2 = v15;
    if (v16 == v15)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*v15 != 10) {
      goto LABEL_12;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v10, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v10 + 384))(&v12);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
    *(void *)&long long v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
    *((void *)&v7 + 1) = v3;
    sub_1DDB68FB0(&v12, (unint64_t *)&v9, &v8, &v7, &v14);
    long long v4 = v14;
    long long v14 = 0uLL;
    char v5 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v4;
    if (v5)
    {
      sub_1DDA18310(v5);
      if (*((void *)&v14 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v14 + 1));
      }
    }
    if (v13) {
      sub_1DDA18310(v13);
    }
    if (v11) {
      sub_1DDA18310(v11);
    }
    int v2 = v15;
    if (v15)
    {
LABEL_12:
      uint64_t v16 = v2;
      operator delete(v2);
    }
  }
}

void sub_1DDB68F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  if (a14) {
    sub_1DDA18310(a14);
  }
  uint64_t v18 = *(void **)(v16 - 48);
  if (v18)
  {
    *(void *)(v16 - 40) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB68FB0(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xD8uLL);
  sub_1DDB69044(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDB69030(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB69044(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39833D8;
  sub_1DDAA58A8((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1F3963508;
  return a1;
}

void sub_1DDB690AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB690C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39833D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB690E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39833D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB69134(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

float32x2_t *sub_1DDB6915C@<X0>(float32x2_t *result@<X0>, float32x2_t *a2@<X8>)
{
  float32x2_t v2 = result[89];
  float v3 = result[90].f32[0];
  __int32 v4 = result->i32[1];
  if (v4 == 2)
  {
    uint64_t v15 = (float *)&result[107];
    float v5 = result[108].f32[1];
    float v6 = result[110].f32[1] * result[110].f32[1];
    uint64_t v17 = (__int32 *)&result[111] + 1;
    __int32 v7 = result[117].i32[1];
    __int32 v8 = result[118].i32[0];
    if (result[111].i8[0])
    {
      float v9 = result[118].f32[1];
      uint64_t v10 = (float *)&result[108];
      float v11 = result[110].f32[0] * result[110].f32[0];
      uint64_t v12 = (__int32 *)&result[115] + 1;
      int v13 = result + 116;
      float v14 = result[116].f32[1];
      float v16 = result[109].f32[0] * result[109].f32[0];
      uint64_t v18 = result + 112;
      float v19 = result[112].f32[1];
      goto LABEL_17;
    }
    float v9 = result[119].f32[0] * result[119].f32[0];
    uint64_t v10 = (float *)&result[108];
    float v11 = result[110].f32[0] * result[110].f32[0];
    uint64_t v12 = (__int32 *)&result[115] + 1;
    int v13 = result + 116;
    float v14 = result[117].f32[0] * result[117].f32[0];
    float v16 = result[109].f32[0] * result[109].f32[0];
    uint64_t v18 = result + 112;
    float v20 = result[113].f32[0];
  }
  else if (v4 == 1)
  {
    float v5 = result[107].f32[1];
    float v6 = result[109].f32[1] * result[109].f32[1];
    __int32 v7 = result[113].i32[1];
    __int32 v8 = result[114].i32[0];
    if (result[111].i8[0])
    {
      float v9 = result[114].f32[1];
      uint64_t v10 = (float *)&result[108] + 1;
      float v11 = result[110].f32[1] * result[110].f32[1];
      uint64_t v12 = (__int32 *)&result[117] + 1;
      int v13 = result + 118;
      float v14 = result[118].f32[1];
      uint64_t v15 = (float *)&result[108];
      float v16 = result[110].f32[0] * result[110].f32[0];
      uint64_t v17 = (__int32 *)&result[115] + 1;
      uint64_t v18 = result + 116;
      float v19 = result[116].f32[1];
      goto LABEL_17;
    }
    float v9 = result[115].f32[0] * result[115].f32[0];
    uint64_t v10 = (float *)&result[108] + 1;
    float v11 = result[110].f32[1] * result[110].f32[1];
    uint64_t v12 = (__int32 *)&result[117] + 1;
    int v13 = result + 118;
    float v14 = result[119].f32[0] * result[119].f32[0];
    uint64_t v15 = (float *)&result[108];
    float v16 = result[110].f32[0] * result[110].f32[0];
    uint64_t v17 = (__int32 *)&result[115] + 1;
    uint64_t v18 = result + 116;
    float v20 = result[117].f32[0];
  }
  else if (v4)
  {
    float v5 = result[107].f32[0];
    float v6 = result[109].f32[0] * result[109].f32[0];
    __int32 v7 = result[111].i32[1];
    __int32 v8 = result[112].i32[0];
    if (result[111].i8[0])
    {
      float v9 = result[112].f32[1];
      uint64_t v10 = (float *)&result[108];
      float v11 = result[110].f32[0] * result[110].f32[0];
      uint64_t v12 = (__int32 *)&result[115] + 1;
      int v13 = result + 116;
      float v14 = result[116].f32[1];
      uint64_t v15 = (float *)&result[108] + 1;
      float v16 = result[110].f32[1] * result[110].f32[1];
      uint64_t v17 = (__int32 *)&result[117] + 1;
      uint64_t v18 = result + 118;
      float v19 = result[118].f32[1];
      goto LABEL_17;
    }
    float v9 = result[113].f32[0] * result[113].f32[0];
    uint64_t v10 = (float *)&result[108];
    float v11 = result[110].f32[0] * result[110].f32[0];
    uint64_t v12 = (__int32 *)&result[115] + 1;
    int v13 = result + 116;
    float v14 = result[117].f32[0] * result[117].f32[0];
    uint64_t v15 = (float *)&result[108] + 1;
    float v16 = result[110].f32[1] * result[110].f32[1];
    uint64_t v17 = (__int32 *)&result[117] + 1;
    uint64_t v18 = result + 118;
    float v20 = result[119].f32[0];
  }
  else
  {
    float v5 = result[108].f32[0];
    float v6 = result[110].f32[0] * result[110].f32[0];
    __int32 v7 = result[115].i32[1];
    __int32 v8 = result[116].i32[0];
    if (result[111].i8[0])
    {
      float v9 = result[116].f32[1];
      uint64_t v10 = (float *)&result[108] + 1;
      float v11 = result[110].f32[1] * result[110].f32[1];
      uint64_t v12 = (__int32 *)&result[117] + 1;
      int v13 = result + 118;
      float v14 = result[118].f32[1];
      uint64_t v15 = (float *)&result[107] + 1;
      float v16 = result[109].f32[1] * result[109].f32[1];
      uint64_t v17 = (__int32 *)&result[113] + 1;
      uint64_t v18 = result + 114;
      float v19 = result[114].f32[1];
      goto LABEL_17;
    }
    float v9 = result[117].f32[0] * result[117].f32[0];
    uint64_t v10 = (float *)&result[108] + 1;
    float v11 = result[110].f32[1] * result[110].f32[1];
    uint64_t v12 = (__int32 *)&result[117] + 1;
    int v13 = result + 118;
    float v14 = result[119].f32[0] * result[119].f32[0];
    uint64_t v15 = (float *)&result[107] + 1;
    float v16 = result[109].f32[1] * result[109].f32[1];
    uint64_t v17 = (__int32 *)&result[113] + 1;
    uint64_t v18 = result + 114;
    float v20 = result[115].f32[0];
  }
  float v19 = v20 * v20;
LABEL_17:
  __int32 v21 = v18->i32[0];
  __int32 v22 = v13->i32[0];
  __int32 v23 = *v17;
  __int32 v24 = *v12;
  float v25 = *v15;
  float v26 = *v10;
  if (v5 < 0.0) {
    float v5 = 0.0;
  }
  __asm { FMOV            V26.2S, #1.0 }
  *a2 = v2;
  a2[1].f32[0] = v3;
  a2[1].i32[1] = 0;
  a2[2] = vdiv_f32(_D26, v2);
  a2[3].f32[0] = 1.0 / v3;
  a2[3].i32[1] = 0;
  if (v26 >= 0.0) {
    float v32 = v26;
  }
  else {
    float v32 = 0.0;
  }
  a2[4].f32[0] = v5;
  a2[4].f32[1] = v32;
  if (v25 >= 0.0) {
    float v33 = v25;
  }
  else {
    float v33 = 0.0;
  }
  a2[5].f32[0] = v33;
  a2[5].i32[1] = 0;
  a2[6].f32[0] = v6;
  a2[6].f32[1] = v11;
  a2[7].f32[0] = v16;
  a2[7].i32[1] = 0;
  a2[8].i32[0] = v7;
  a2[8].i32[1] = v24;
  a2[9].i32[0] = v23;
  a2[9].i32[1] = 0;
  a2[10].i32[0] = v8;
  a2[10].i32[1] = v22;
  a2[11].i32[0] = v21;
  a2[11].i32[1] = 0;
  a2[12].f32[0] = v9;
  a2[12].f32[1] = v14;
  a2[13].f32[0] = v19;
  a2[13].i32[1] = 0;
  return result;
}

id sub_1DDB69460()
{
  uint64_t v0 = (void *)MEMORY[0x1F4188790]();
  float32x2_t v2 = v1;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v29 = v0;
  bzero(__s1, 0xF000uLL);
  uint64_t v30 = 0;
  char v3 = *v2;
  if (!*v2)
  {
    id v22 = 0;
    int v5 = 0;
    goto LABEL_46;
  }
  __int32 v4 = 0;
  int v5 = 0;
  uint64_t v6 = MEMORY[0x1E4F14390];
  while (1)
  {
    uint64_t v7 = v3;
    if (v3 < 0) {
      int v8 = __maskrune(v3, 0x4000uLL);
    }
    else {
      int v8 = *(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000;
    }
    if (v8)
    {
      uint64_t v9 = 1;
      goto LABEL_39;
    }
    uint64_t v10 = 0x30u;
    while (1)
    {
      size_t v11 = strlen(*(const char **)((char *)&off_1E6D05640 + v10));
      if (!strncmp(v2, *(const char **)((char *)&off_1E6D05640 + v10), v11)) {
        break;
      }
      v10 += 24;
      if (v10 == 960) {
        goto LABEL_14;
      }
    }
    if (!v10) {
      break;
    }
    uint64_t v15 = &v2[strlen(*(const char **)((char *)&off_1E6D05640 + v10))];
LABEL_22:
    uint64_t v30 = v15;
LABEL_37:
    uint64_t v9 = v15 - v2;
    __int32 v21 = &v4[v15 - v2];
    if ((unint64_t)(v21 + 1) > 0xF000)
    {
      sub_1DDB6A04C(7, @"Error: Expression too long.");
      id v23 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_44;
    }
    memcpy(&__s1[(void)v4], v2, v15 - v2);
    __s1[(void)v21] = 0;
    ++v5;
    __int32 v4 = v21 + 1;
LABEL_39:
    v2 += v9;
    char v3 = *v2;
    if (!*v2)
    {
      id v22 = 0;
      goto LABEL_46;
    }
  }
LABEL_14:
  if ((v7 & 0x80000000) != 0) {
    int v16 = __maskrune(v7, 0x400uLL);
  }
  else {
    int v16 = *(_DWORD *)(v6 + 4 * v7 + 60) & 0x400;
  }
  if (v7 == 46 || v16)
  {
    strtod(v2, &v30);
    uint64_t v15 = v30;
    if (v30 == v2)
    {
      sub_1DDB6A04C(10, @"Error: Expression has invalid number.");
      id v23 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_44;
    }
    goto LABEL_37;
  }
  if (v7 != 39)
  {
    if ((v7 & 0x80000000) != 0) {
      int v18 = __maskrune(v7, 0x100uLL);
    }
    else {
      int v18 = *(_DWORD *)(v6 + 4 * v7 + 60) & 0x100;
    }
    if (!v18 && v7 != 64 && v7 != 36)
    {
      uint64_t v28 = objc_msgSend_stringWithFormat_(NSString, v12, @"Error: Expression has unexpected character #%d", v13, v14, v7, v29);
      sub_1DDB6A04C(8, v28);
      id v22 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_45;
    }
    uint64_t v15 = v2;
    while (1)
    {
      uint64_t v30 = v15 + 1;
      unsigned int v19 = v15[1];
      if ((v19 & 0x80000000) != 0)
      {
        int v20 = __maskrune(v19, 0x500uLL);
        uint64_t v15 = v30;
        if (v20) {
          continue;
        }
      }
      else
      {
        ++v15;
        if ((*(_DWORD *)(v6 + 4 * v19 + 60) & 0x500) != 0) {
          continue;
        }
      }
      if (*v15 != 95) {
        goto LABEL_37;
      }
    }
  }
  uint64_t v17 = strchr(v2 + 1, 39);
  uint64_t v30 = v17;
  if (v17)
  {
    uint64_t v15 = v17 + 1;
    goto LABEL_22;
  }
  sub_1DDB6A04C(9, @"Error: Expression has unterminated quote.");
  id v23 = (id)objc_claimAutoreleasedReturnValue();
LABEL_44:
  id v22 = v23;
LABEL_45:
  int v5 = -1;
LABEL_46:
  id v24 = v22;
  float v25 = v24;
  if (v5 < 0)
  {
    id v26 = v24;
    float v25 = v26;
  }
  else
  {
    if (v5) {
      operator new();
    }
    id v26 = 0;
  }

  return v26;
}

void sub_1DDB69F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_1DDB6A04C(uint64_t a1, void *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v9 = *MEMORY[0x1E4F1D170];
  v10[0] = v3;
  int v5 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v4, (uint64_t)v10, (uint64_t)&v9, 1);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v6, @"com.apple.RawExpression", a1, (uint64_t)v5);

  return v7;
}

void sub_1DDB6A120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1DDB6A144(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t result = (void *)a1[3];
  if (v4 >= v5)
  {
    uint64_t result = malloc_type_realloc(result, 8 * v5 + 80, 0x2004093837F09uLL);
    unint64_t v4 = a1[1];
    a1[2] += 10;
    a1[3] = result;
  }
  a1[1] = v4 + 1;
  *((void *)result + v4) = a2;
  return result;
}

uint64_t sub_1DDB6A1AC(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  switch(*((_DWORD *)&off_1E6D05640 + 6 * v8 + 5))
  {
    case 1:
      uint64_t v9 = a1[1];
      if (v9)
      {
        uint64_t v10 = v9 - 1;
        uint64_t v11 = *(void *)(a1[3] + 8 * v10);
        if (*(_DWORD *)(v11 + 8) != 16) {
          goto LABEL_13;
        }
      }
      if (!a3) {
        goto LABEL_33;
      }
      uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, (const char *)a2, @"Error: function '%s' requires 1 parameter.", a4, a5, *((void *)&off_1E6D05640 + 3 * v8));
      uint64_t v13 = sub_1DDB6A04C(6, v12);
      goto LABEL_32;
    case 2:
      unint64_t v23 = a1[1];
      if (v23) {
        goto LABEL_24;
      }
      if (!a3) {
        goto LABEL_33;
      }
      uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, (const char *)a2, @"Error: function '%s' requires 1 or more parameters.", a4, a5, *((void *)&off_1E6D05640 + 3 * v8));
      uint64_t v13 = sub_1DDB6A04C(6, v12);
      goto LABEL_32;
    case 3:
      uint64_t v14 = a1[1];
      if (v14)
      {
        uint64_t v15 = v14 - 1;
        uint64_t v16 = *(void *)(a1[3] + 8 * v15);
        if (*(_DWORD *)(v16 + 8) == 16)
        {
          uint64_t v17 = *(void *)(v16 + 32);
          if (*(_DWORD *)(v17 + 8) != 16)
          {
            a1[1] = v15;
            *(void *)(a2 + 24) = *(void *)(v16 + 24);
            *(void *)(a2 + 32) = v17;
            *(void *)(v16 + 24) = 0;
            *(void *)(v16 + 32) = 0;
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            goto LABEL_27;
          }
        }
      }
      if (!a3) {
        goto LABEL_33;
      }
      uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, (const char *)a2, @"Error: function '%s' requires 2 parameters.", a4, a5, *((void *)&off_1E6D05640 + 3 * v8));
      uint64_t v13 = sub_1DDB6A04C(6, v12);
      goto LABEL_32;
    case 4:
      uint64_t v18 = a1[1];
      if (v18)
      {
        uint64_t v10 = v18 - 1;
        uint64_t v11 = *(void *)(a1[3] + 8 * v10);
        if (*(_DWORD *)(v11 + 8) == 16)
        {
LABEL_13:
          a1[1] = v10;
          *(void *)(a2 + 24) = v11;
          goto LABEL_27;
        }
      }
      if (!a3) {
        goto LABEL_33;
      }
      uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, (const char *)a2, @"Error: function '%s' requires 2 or more parameters.", a4, a5, *((void *)&off_1E6D05640 + 3 * v8));
      uint64_t v13 = sub_1DDB6A04C(6, v12);
      goto LABEL_32;
    case 5:
      uint64_t v19 = a1[1];
      if (!v19) {
        goto LABEL_27;
      }
      uint64_t v20 = a1[3];
      uint64_t v21 = v19 - 1;
      a1[1] = v21;
      uint64_t v22 = *(void *)(v20 + 8 * v21);
      goto LABEL_26;
    default:
      unint64_t v23 = a1[1];
      if (v8 == 2 && v23 == 0) {
        goto LABEL_27;
      }
      unint64_t v25 = *(void *)(a2 + 16);
      if (v23 >= v25)
      {
        if (v25 == 2)
        {
          if (!v23)
          {
            uint64_t v22 = 0;
            *(void *)(a2 + 32) = 0;
            goto LABEL_26;
          }
          uint64_t v29 = a1[3];
          a1[1] = v23 - 1;
          *(void *)(a2 + 32) = *(void *)(v29 + 8 * (v23 - 1));
          if (v23 == 1) {
            goto LABEL_44;
          }
          uint64_t v26 = a1[3];
          unint64_t v27 = v23 - 2;
        }
        else
        {
          if (v25 != 1)
          {
            if (v25)
            {
              if (!a3) {
                goto LABEL_33;
              }
              uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, (const char *)a2, @"Error: unexpected operator '%s'.\n", a4, a5, *((void *)&off_1E6D05640 + 3 * v8));
              uint64_t v13 = sub_1DDB6A04C(5, v12);
              goto LABEL_32;
            }
LABEL_27:
            sub_1DDB6A144(a1, a2);
            return 1;
          }
          if (!v23)
          {
LABEL_44:
            uint64_t v22 = 0;
            goto LABEL_26;
          }
LABEL_24:
          uint64_t v26 = a1[3];
          unint64_t v27 = v23 - 1;
        }
        a1[1] = v27;
        uint64_t v22 = *(void *)(v26 + 8 * v27);
LABEL_26:
        *(void *)(a2 + 24) = v22;
        goto LABEL_27;
      }
      if (a3)
      {
        uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, (const char *)a2, @"Error: operator '%s' requires %zu operands.", a4, a5, *((void *)&off_1E6D05640 + 3 * v8), v25);
        uint64_t v13 = sub_1DDB6A04C(6, v12);
LABEL_32:
        *a3 = v13;
      }
LABEL_33:
      (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
      return 0;
  }
}

void sub_1DDB6A564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB6A59C(uint64_t a1, void *a2)
{
  uint64_t v7 = a2;
  unsigned int v8 = 0;
  v9.n128_u64[0] = 0x7FF8000000000000;
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
    case 0x15:
      objc_msgSend_null(MEMORY[0x1E4F1CA98], v3, v4, v5, v6, NAN);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_98;
    case 1:
      unint64_t v27 = *(const char **)(a1 + 40);
      unsigned int v28 = *v27;
      if ((v28 & 0x80000000) != 0)
      {
        int v29 = __maskrune(v28, 0x400uLL);
        unint64_t v27 = *(const char **)(a1 + 40);
      }
      else
      {
        int v29 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v28 + 60) & 0x400;
      }
      if (v29) {
        goto LABEL_95;
      }
      int v162 = *(unsigned __int8 *)v27;
      if (v162 == 39)
      {
        id v168 = [NSString alloc];
        uint64_t v169 = *(const char **)(a1 + 40);
        uint64_t v170 = (uint64_t)(v169 + 1);
        size_t v171 = strlen(v169);
        id v10 = (id)objc_msgSend_initWithBytes_length_encoding_(v168, v172, v170, v171 - 2, 1);
        goto LABEL_98;
      }
      if (v162 != 46)
      {
        v7[2](v7, v9);
        id v10 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
LABEL_95:
      v9.n128_f64[0] = strtod(v27, 0);
LABEL_96:
      objc_msgSend_numberWithDouble_(NSNumber, v3, v4, v5, v6, v9.n128_f64[0]);
      goto LABEL_97;
    case 2:
      uint64_t v30 = *(void *)(a1 + 24);
      if (v30) {
        sub_1DDB6A59C(v30, v7);
      }
      else {
        objc_msgSend_null(MEMORY[0x1E4F1CA98], v3, v4, v5, v6, NAN);
      }
      goto LABEL_97;
    case 4:
      double v31 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      double v32 = v31 * sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      objc_msgSend_numberWithDouble_(NSNumber, v33, v34, v35, v36, v32);
      goto LABEL_97;
    case 5:
      double v37 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      double v38 = v37 / sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      objc_msgSend_numberWithDouble_(NSNumber, v39, v40, v41, v42, v38);
      goto LABEL_97;
    case 6:
      double v43 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      double v44 = v43 + sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      objc_msgSend_numberWithDouble_(NSNumber, v45, v46, v47, v48, v44);
      goto LABEL_97;
    case 7:
      double v49 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      double v50 = v49 - sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      objc_msgSend_numberWithDouble_(NSNumber, v51, v52, v53, v54, v50);
      goto LABEL_97;
    case 8:
      double v55 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      double v56 = sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      uint64_t v57 = (void *)MEMORY[0x1E4F1CC28];
      if (v55 >= v56) {
        uint64_t v57 = (void *)MEMORY[0x1E4F1CC38];
      }
      goto LABEL_29;
    case 9:
      double v58 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      double v59 = sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      uint64_t v57 = (void *)MEMORY[0x1E4F1CC28];
      if (v58 > v59) {
        uint64_t v57 = (void *)MEMORY[0x1E4F1CC38];
      }
      goto LABEL_29;
    case 0xA:
      double v60 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      double v61 = sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      uint64_t v57 = (void *)MEMORY[0x1E4F1CC28];
      if (v60 <= v61) {
        uint64_t v57 = (void *)MEMORY[0x1E4F1CC38];
      }
      goto LABEL_29;
    case 0xB:
      double v62 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      double v63 = sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      uint64_t v57 = (void *)MEMORY[0x1E4F1CC28];
      if (v62 < v63) {
        uint64_t v57 = (void *)MEMORY[0x1E4F1CC38];
      }
      goto LABEL_29;
    case 0xC:
      int v64 = sub_1DDB6B364(*(void *)(a1 + 24), v7, *(void *)(a1 + 32));
      uint64_t v57 = (void *)MEMORY[0x1E4F1CC28];
      uint64_t v65 = (void *)MEMORY[0x1E4F1CC38];
      goto LABEL_27;
    case 0xD:
      int v64 = sub_1DDB6B364(*(void *)(a1 + 24), v7, *(void *)(a1 + 32));
      uint64_t v57 = (void *)MEMORY[0x1E4F1CC38];
      uint64_t v65 = (void *)MEMORY[0x1E4F1CC28];
LABEL_27:
      if (v64) {
        uint64_t v57 = v65;
      }
LABEL_29:
      id v10 = v57;
      goto LABEL_98;
    case 0xE:
      int v66 = sub_1DDB6B4DC(*(void *)(a1 + 24), (uint64_t)v7);
      uint64_t v67 = (void *)MEMORY[0x1E4F1CC28];
      if (v66 && sub_1DDB6B4DC(*(void *)(a1 + 32), (uint64_t)v7)) {
        uint64_t v67 = (void *)MEMORY[0x1E4F1CC38];
      }
      id v10 = v67;
      goto LABEL_98;
    case 0xF:
      if ((sub_1DDB6B4DC(*(void *)(a1 + 24), (uint64_t)v7) & 1) != 0
        || sub_1DDB6B4DC(*(void *)(a1 + 32), (uint64_t)v7))
      {
        goto LABEL_36;
      }
      goto LABEL_37;
    case 0x10:
      sub_1DDB6B580(a1, v7);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_98;
    case 0x11:
      if (*(_DWORD *)(*(void *)(a1 + 32) + 8) == 18)
      {
        int v144 = sub_1DDB6B4DC(*(void *)(a1 + 24), (uint64_t)v7);
        uint64_t v145 = *(void *)(a1 + 32);
        if (v144) {
          sub_1DDB6A59C(*(void *)(v145 + 24), v7);
        }
        else {
          sub_1DDB6A59C(*(void *)(v145 + 32), v7);
        }
LABEL_97:
        id v10 = (id)objc_claimAutoreleasedReturnValue();
LABEL_98:
        unsigned int v8 = v10;
      }
      else
      {
        unsigned int v8 = 0;
      }
      goto LABEL_115;
    case 0x13:
LABEL_36:
      unsigned int v8 = (void *)MEMORY[0x1E4F1CC38];
      goto LABEL_115;
    case 0x14:
LABEL_37:
      unsigned int v8 = (void *)MEMORY[0x1E4F1CC28];
      goto LABEL_115;
    case 0x16:
      goto LABEL_96;
    case 0x17:
      sub_1DDB6A59C(*(void *)(a1 + 24), v7);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v68 = sub_1DDB6A59C(*(void *)(a1 + 32), v7);
      objc_opt_class();
      if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass()))
      {
        unsigned int v8 = objc_msgSend_objectForKeyedSubscript_(v11, v69, (uint64_t)v68, v70, v71);
      }
      else
      {
        unsigned int v8 = 0;
      }

      goto LABEL_114;
    case 0x18:
      sub_1DDB6A59C(*(void *)(a1 + 24), v7);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      double v72 = sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & (v72 >= 0.0)) != 1
        || v72 > (double)(unint64_t)(objc_msgSend_count(v11, v73, v74, v75, v76) - 1))
      {
        goto LABEL_53;
      }
      uint64_t v80 = objc_msgSend_objectAtIndexedSubscript_(v11, v77, (unint64_t)v72, v78, v79);
      goto LABEL_113;
    case 0x19:
      sub_1DDB6B580(*(void *)(a1 + 24), v7);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      if (v11)
      {
        unsigned int v8 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v81, v82, v83, v84);
        unint64_t v92 = objc_msgSend_count(v11, v85, v86, v87, v88);
        if (v92)
        {
          for (unint64_t i = 0; i < v92; unint64_t i = v95 + 1)
          {
            uint64_t v94 = objc_msgSend_objectAtIndexedSubscript_(v11, v89, i, v90, v91);
            uint64_t v95 = i + 1;
            uint64_t v99 = objc_msgSend_objectAtIndexedSubscript_(v11, v96, v95, v97, v98);
            uint64_t v102 = (void *)v99;
            if (v94 && v99) {
              objc_msgSend_setObject_forKeyedSubscript_(v8, v100, v99, (uint64_t)v94, v101);
            }
          }
        }
      }
      else
      {
LABEL_53:
        unsigned int v8 = 0;
      }
      goto LABEL_114;
    case 0x1A:
      sub_1DDB6B580(*(void *)(a1 + 24), v7);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_98;
    case 0x1B:
      uint64_t v103 = *(void *)(a1 + 24);
      double v104 = 0.0;
      if (v103)
      {
        sub_1DDB6A59C(v103, v7);
        id v11 = (id)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
          {
            uint64_t v163 = objc_msgSend_count(v11, v105, v106, v107, v108);
            objc_msgSend_numberWithDouble_(NSNumber, v164, v165, v166, v167, (double)(unint64_t)v163);
            goto LABEL_112;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            objc_msgSend_numberWithDouble_(NSNumber, v3, v4, v5, v6, 1.0);
            goto LABEL_112;
          }
          double v104 = NAN;
        }
      }
      else
      {
        id v11 = 0;
      }
      objc_msgSend_numberWithDouble_(NSNumber, v3, v4, v5, v6, v104);
      uint64_t v80 = LABEL_112:;
LABEL_113:
      unsigned int v8 = (void *)v80;
      goto LABEL_114;
    case 0x1C:
    case 0x1D:
      sub_1DDB6B580(*(void *)(a1 + 24), v7);
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v16 = objc_msgSend_count(v11, v12, v13, v14, v15);
      uint64_t v20 = objc_msgSend_objectAtIndexedSubscript_(v11, v17, 0, v18, v19);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        objc_msgSend_doubleValue(v20, v21, v22, v23, v24);
        double v26 = v25;
      }
      else
      {
        double v26 = NAN;
      }
      unint64_t v151 = v16 - 1;
      unsigned int v8 = objc_msgSend_objectAtIndexedSubscript_(v11, v21, v16 - 1, v23, v24);
      if (v151 < 2)
      {
        uint64_t v156 = v20;
      }
      else
      {
        uint64_t v155 = 2;
        while (1)
        {
          uint64_t v156 = objc_msgSend_objectAtIndexedSubscript_(v11, v152, v155 - 1, v153, v154);

          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            objc_msgSend_doubleValue(v156, v152, v157, v153, v154);
          }
          else {
            double v158 = NAN;
          }
          int v159 = *(_DWORD *)(a1 + 8);
          if (v159 == 29 && v26 == v158) {
            break;
          }
          if (v159 == 28 && v26 <= v158) {
            break;
          }
          unint64_t v160 = v155 + 1;
          v155 += 2;
          uint64_t v20 = v156;
          if (v160 >= v151) {
            goto LABEL_91;
          }
        }
        uint64_t v161 = objc_msgSend_objectAtIndexedSubscript_(v11, v152, v155, v153, v154);

        unsigned int v8 = (void *)v161;
      }
LABEL_91:

LABEL_114:
LABEL_115:

      return v8;
    case 0x1E:
      double v109 = round(sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0));
      objc_msgSend_numberWithDouble_(NSNumber, v110, v111, v112, v113, v109);
      goto LABEL_97;
    case 0x1F:
      double v114 = floor(sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0));
      objc_msgSend_numberWithDouble_(NSNumber, v115, v116, v117, v118, v114);
      goto LABEL_97;
    case 0x20:
      double v119 = sqrt(sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0));
      objc_msgSend_numberWithDouble_(NSNumber, v120, v121, v122, v123, v119);
      goto LABEL_97;
    case 0x21:
      double v124 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      v9.n128_f64[0] = exp(v124);
      goto LABEL_96;
    case 0x22:
      double v146 = fabs(sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0));
      objc_msgSend_numberWithDouble_(NSNumber, v147, v148, v149, v150, v146);
      goto LABEL_97;
    case 0x23:
      double v125 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      double v126 = sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      v9.n128_f64[0] = pow(v125, v126);
      goto LABEL_96;
    case 0x24:
      double v127 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      v9.n128_f64[0] = sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      BOOL v128 = v9.n128_f64[0] < v127;
      goto LABEL_72;
    case 0x25:
      double v127 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      v9.n128_f64[0] = sub_1DDB6B284(*(void *)(a1 + 32), (uint64_t)v7, 0);
      BOOL v128 = v127 < v9.n128_f64[0];
LABEL_72:
      if (!v128) {
        v9.n128_f64[0] = v127;
      }
      goto LABEL_96;
    case 0x26:
      double v129 = sub_1DDB6B284(*(void *)(a1 + 24), (uint64_t)v7, 0);
      v9.n128_f64[0] = log2(v129);
      goto LABEL_96;
    case 0x27:
      unsigned int v130 = objc_msgSend_stringWithUTF8String_(NSString, v3, *(void *)(*(void *)(a1 + 24) + 40), v5, v6, NAN);
      uint64_t v135 = objc_msgSend_length(v130, v131, v132, v133, v134);
      float v138 = objc_msgSend_substringWithRange_(v130, v136, 1, v135 - 2, v137);

      id v11 = v138;
      uint64_t v143 = objc_msgSend_UTF8String(v11, v139, v140, v141, v142);
      uint64_t v80 = ((void (*)(void (**)(void, __n128), uint64_t))v7[2])(v7, v143);
      goto LABEL_113;
    default:
      goto LABEL_115;
  }
}

void sub_1DDB6AF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB6B0B4(void *a1)
{
  sub_1DDB6B0EC(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB6B0EC(void *a1)
{
  *a1 = &unk_1F3983428;
  uint64_t v2 = a1[1];
  while (v2)
  {
    uint64_t v3 = a1[3];
    a1[1] = --v2;
    uint64_t v4 = *(void *)(v3 + 8 * v2);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      uint64_t v2 = a1[1];
    }
  }
  uint64_t v5 = (void *)a1[3];
  if (v5)
  {
    free(v5);
    a1[3] = 0;
  }
  return a1;
}

void sub_1DDB6B188(void *a1)
{
  sub_1DDB6B1C0(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB6B1C0(void *a1)
{
  *a1 = &unk_1F3983458;
  uint64_t v3 = a1 + 3;
  uint64_t v2 = a1[3];
  if (v2)
  {
    uint64_t v4 = a1[4];
    (*(void (**)(void))(*(void *)v2 + 8))(a1[3]);
    if (v2 == v4) {
      v3[1] = 0;
    }
    *uint64_t v3 = 0;
  }
  uint64_t v5 = a1[4];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    a1[4] = 0;
  }
  a1[5] = 0;
  return a1;
}

double sub_1DDB6B284(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = sub_1DDB6A59C();
  unsigned int v8 = v4;
  if (a3)
  {
    int isEqualToValue = objc_msgSend_isEqualToValue_(v4, v5, MEMORY[0x1E4F1CC28], v6, v7);
    int v13 = objc_msgSend_isEqualToValue_(v8, v10, MEMORY[0x1E4F1CC38], v11, v12);
    double v14 = NAN;
    if (isEqualToValue) {
      double v14 = 0.0;
    }
    if (v13) {
      double v15 = 1.0;
    }
    else {
      double v15 = v14;
    }
  }
  else
  {
    double v15 = NAN;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    CFTypeID v16 = CFGetTypeID(v8);
    if (v16 != CFBooleanGetTypeID())
    {
      objc_msgSend_doubleValue(v8, v17, v18, v19, v20);
      double v15 = v21;
    }
  }

  return v15;
}

void sub_1DDB6B354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB6B364(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = sub_1DDB6A59C(a1, v5);
  uint64_t v7 = sub_1DDB6A59C(a3, v5);
  if (v6 == v7)
  {
    uint64_t isEqualToString = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass()))
    {
      uint64_t isEqualToString = objc_msgSend_isEqualToString_(v6, v8, (uint64_t)v7, v9, v10);
    }
    else
    {
      objc_opt_class();
      int isKindOfClass = objc_opt_isKindOfClass();
      objc_opt_class();
      if (isKindOfClass & objc_opt_isKindOfClass())
      {
        double v13 = sub_1DDB6B284(a1, (uint64_t)v5, 1);
        uint64_t isEqualToString = v13 == sub_1DDB6B284(a3, (uint64_t)v5, 1);
      }
      else
      {
        uint64_t isEqualToString = 0;
      }
    }
  }

  return isEqualToString;
}

void sub_1DDB6B4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB6B4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1DDB6A59C(a1, a2);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = v2;
    unsigned int v8 = (const char *)objc_msgSend_objCType(v3, v4, v5, v6, v7);
    if (!strcmp(v8, "B"))
    {
      uint64_t v14 = objc_msgSend_BOOLValue(v3, v9, v10, v11, v12);
    }
    else
    {
      objc_msgSend_doubleValue(v3, v9, v10, v11, v12);
      uint64_t v14 = v13 != 0.0;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1DDB6B570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB6B580(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v9 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7, v8);
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 16)
    {
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 24);
        a1 = *(void *)(a1 + 32);
        uint64_t v14 = sub_1DDB6A59C(v10, v4);
        uint64_t v15 = (uint64_t)v14;
        if (!v14)
        {
          uint64_t v2 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v11, 0, v12, v13);
          uint64_t v15 = (uint64_t)v2;
        }
        objc_msgSend_addObject_(v9, v11, v15, v12, v13);
        if (!v14) {

        }
        if (*(_DWORD *)(a1 + 8) != 16) {
          break;
        }
      }
      uint64_t v20 = sub_1DDB6A59C(a1, v4);

      double v21 = v20;
      if (!v20)
      {
        double v21 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v16, v22, v18, v19);
      }
    }
    else
    {
      uint64_t v20 = sub_1DDB6A59C(a1, v4);
      double v21 = v20;
      if (!v20)
      {
        double v21 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v16, v17, v18, v19);
      }
    }
    objc_msgSend_addObject_(v9, v16, (uint64_t)v21, v18, v19);
    if (!v20) {
  }
    }

  return v9;
}

void sub_1DDB6B6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB6B754(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  uint64_t v6 = &unk_1F3968EA8;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:ColorBalance1");
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(void *)a1 + 2976))(a1, a2, __p, &v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DDB6B81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB6B838(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v3);
  sub_1DDACF46C(&v3, &v5);
  if (v4) {
    sub_1DDA18310(v4);
  }
  if (v5) {
    uint64_t v1 = (*(uint64_t (**)(void *))(*(void *)v5 + 800))(v5);
  }
  else {
    uint64_t v1 = 0;
  }
  if (v6) {
    sub_1DDA18310(v6);
  }
  return v1;
}

void sub_1DDB6B8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB6B904(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2992))(a1);
  double result = 0.6;
  if (!v1) {
    return 1.0;
  }
  return result;
}

void sub_1DDB6B958(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&__p);
  sub_1DDB6BBC8(&__p, &v11);
  if (v6) {
    sub_1DDA18310(v6);
  }
  if (!v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((*(unsigned int (**)(void *))(*(void *)v11 + 632))(v11))
  {
    v10[0] = &unk_1F396F638;
    v10[1] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v8, a1);
    uint64_t v2 = v8;
    sub_1DDA1A880(&__p, "AsShotWhiteBalance");
    (*(void (**)(uint64_t, void **, void *, uint64_t))(*(void *)v2 + 600))(v2, &__p, v10, 3);
    if (v7 < 0) {
      operator delete(__p);
    }
    if (v9) {
      sub_1DDA18310(v9);
    }
  }
  else
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3000))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 2960))(a1, v3);
  }
  if (v12) {
    sub_1DDA18310(v12);
  }
}

void sub_1DDB6BB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 - 24);
  if (v19) {
    sub_1DDA18310(v19);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDB6BBC8@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  double result = *a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F395EF30, 0)) != 0)
  {
    char v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t sub_1DDB6BC4C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDACFD70(v2, @"cameraMultipliersOffset", v3, &unk_1F3983478);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDB6BCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB6BD10()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDB6BD58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB6BD6C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDACFD70(v2, @"blackLevelTableOffset", v3, &unk_1F3983498);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDB6BE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB6BE30()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDB6BE78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB6BE8C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDACFD70(v2, @"cameraMultipliersChannelCount", v3, &unk_1F39834B8);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDB6BF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB6BF50()
{
  return 4;
}

id sub_1DDB6BF58(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"aspectRatioCrop", v5, v6))
  {
    uint64_t v28 = 0;
    int v29 = 0;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
    uint64_t v12 = v11;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v24, a1);
    sub_1DDACF46C(&v24, &v26);
    if (v25) {
      sub_1DDA18310(v25);
    }
    if (v26)
    {
      uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v26 + 792))(v26);
      uint64_t v12 = (std::__shared_weak_count *)v13;
    }
    uint64_t v28 = v10;
    int v29 = v12;
    if (v27) {
      sub_1DDA18310(v27);
    }
    uint64_t v17 = sub_1DDAD06E0((unsigned int *)&v28, v13, v14, v15, v16);
  }
  else if (objc_msgSend_isEqualToString_(v3, v7, @"firmwareVersion", v8, v9))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v26, a1);
    sub_1DDACF46C(&v26, (void **)&v28);
    if (v27) {
      sub_1DDA18310(v27);
    }
    if (v28) {
      uint64_t v21 = sub_1DDA506E8(v28);
    }
    else {
      uint64_t v21 = 0;
    }
    if (v29) {
      sub_1DDA18310(v29);
    }
    uint64_t v17 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v18, v21, v19, v20);
  }
  else
  {
    uint64_t v17 = sub_1DDB0C3C8(a1, v3);
  }
  uint64_t v22 = (void *)v17;

  return v22;
}

void sub_1DDB6C13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1DDA18310(a14);
  }

  _Unwind_Resume(a1);
}

void sub_1DDB6C180(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) != 10)
  {
LABEL_23:
    sub_1DDB0C48C(a1, (void **)a2);
    return;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&__p, a1);
  sub_1DDB6BBC8(&__p, &v17);
  if (v13) {
    sub_1DDA18310(v13);
  }
  if (!v17)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((*(unsigned int (**)(void *))(*(void *)v17 + 632))(v17))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v15, a1);
    uint64_t v4 = v15;
    sub_1DDA1A880(&__p, "IFD0:EXIF:MAKERNOTE:BLACKLEVELS");
    char v5 = (*(uint64_t (**)(uint64_t, void **, uint64_t, void))(*(void *)v4 + 248))(v4, &__p, a2, 0);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v16) {
      sub_1DDA18310(v16);
    }
    if (v5)
    {
LABEL_11:
      int v6 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3016))(a1);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v15, a1);
    uint64_t v8 = v15;
    sub_1DDA1A880(&__p, "IFD0:EXIF:MAKERNOTE:BLACKLEVELS");
    char v9 = (*(uint64_t (**)(uint64_t, void **, uint64_t, void))(*(void *)v8 + 248))(v8, &__p, a2, v7);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v16) {
      sub_1DDA18310(v16);
    }
    if (v9) {
      goto LABEL_11;
    }
  }
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v10;
    operator delete(v10);
  }
  int v6 = 1;
LABEL_20:
  if (v18) {
    sub_1DDA18310(v18);
  }
  if (v6) {
    goto LABEL_23;
  }
}

void sub_1DDB6C44C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  uint64_t v21 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v21;
    operator delete(v21);
  }
  if (a19) {
    sub_1DDA18310(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB6C4C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2784))();
}

void *sub_1DDB6C4F4()
{
  return &unk_1F39B4CD0;
}

char *sub_1DDB6C500@<X0>(char *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a2;
  if (result[23] < 0)
  {
    double result = (char *)sub_1DDA2639C(a2, *(void **)result, *((void *)result + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    a2[2] = *((void *)result + 2);
  }
  uint64_t v3 = *((unsigned __int8 *)v2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = v2[1];
  }
  if (!v3)
  {
    if (v4 < 0)
    {
      v2[1] = 7;
      uint64_t v2 = (uint64_t *)*v2;
    }
    else
    {
      *((unsigned char *)v2 + 23) = 7;
    }
    strcpy((char *)v2, "<empty>");
  }
  return result;
}

char *sub_1DDB6C598@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2 = a2;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1DDA2639C(a2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *((void *)a2 + 2) = *(void *)(a1 + 16);
  }
  int v3 = v2[23];
  int v4 = *(char **)v2;
  if (v3 >= 0) {
    int64_t v5 = v2[23];
  }
  else {
    int64_t v5 = *((void *)v2 + 1);
  }
  if (v3 >= 0) {
    int v6 = v2;
  }
  else {
    int v6 = *(char **)v2;
  }
  unsigned int v7 = &v6[v5];
  if (v5 < 1)
  {
    uint64_t v11 = -1;
  }
  else
  {
    size_t v8 = v5;
    char v9 = v6;
    do
    {
      uint64_t v10 = (char *)memchr(v9, 64, v8);
      if (!v10) {
        break;
      }
      if (*v10 == 64) {
        goto LABEL_16;
      }
      char v9 = v10 + 1;
      size_t v8 = v7 - (unsigned char *)v9;
    }
    while (v7 - (unsigned char *)v9 > 0);
    uint64_t v10 = &v6[v5];
LABEL_16:
    if (v10 == v7) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = v10 - v6;
    }
    uint64_t v12 = v6;
    do
    {
      double result = (char *)memchr(v12, 46, v5);
      if (!result) {
        break;
      }
      if (*result == 46) {
        goto LABEL_26;
      }
      uint64_t v12 = result + 1;
      int64_t v5 = v7 - (unsigned char *)v12;
    }
    while (v7 - (unsigned char *)v12 > 0);
  }
  double result = v7;
LABEL_26:
  unint64_t v14 = result - v6;
  if (result == v7) {
    unint64_t v14 = -1;
  }
  if (v11 != -1 && v14 != -1 && v14 > v11 + 1)
  {
    if (v3 < 0)
    {
      *((void *)v2 + 1) = 7;
      uint64_t v2 = v4;
    }
    else
    {
      v2[23] = 7;
    }
    strcpy(v2, "<email>");
  }
  return result;
}

unint64_t sub_1DDB6C700(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1;
  }
  int64_t v8 = v7;
  if (v7)
  {
    char v9 = (void *)(v5 + a3);
    uint64_t v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        uint64_t v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        uint64_t v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        char v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    uint64_t v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }
  return a3;
}

void sub_1DDB6C7D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1DDA2639C(__dst, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a1;
    uint64_t v49 = *(void *)(a1 + 16);
  }
  sub_1DDB6C598((uint64_t)__dst, (char *)__p);
  sub_1DDB6C500((char *)__p, (uint64_t *)a2);
  if (v51 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(__dst[0]);
  }
  if (*(char *)(a2 + 23) < 0) {
    sub_1DDA2639C(&v47, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v47 = *(std::string *)a2;
  }
  uint64_t v3 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  LOBYTE(v4) = *((unsigned char *)&v47.__r_.__value_.__s + 23);
  std::string::size_type size = v47.__r_.__value_.__l.__size_;
  std::string::size_type v5 = v47.__r_.__value_.__r.__words[0];
  size_t v7 = &v47;
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v8 = (std::string *)((char *)&v47 + HIBYTE(v47.__r_.__value_.__r.__words[2]));
  }
  else {
    int64_t v8 = (std::string *)(v47.__r_.__value_.__r.__words[0] + v47.__r_.__value_.__l.__size_);
  }
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v9 = &v47;
  }
  else {
    char v9 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  if (v9 != v8)
  {
    do
    {
      v9->__r_.__value_.__s.__data_[0] = __toupper(v9->__r_.__value_.__s.__data_[0]);
      char v9 = (std::string *)((char *)v9 + 1);
    }
    while (v9 != v8);
    uint64_t v3 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
    std::string::size_type v5 = v47.__r_.__value_.__r.__words[0];
    LOBYTE(v4) = *((unsigned char *)&v47.__r_.__value_.__s + 23);
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = size;
  }
  if ((v4 & 0x80u) != 0) {
    size_t v7 = (std::string *)v5;
  }
  if (v10 >= 5)
  {
    int64_t v11 = (char *)v7 + v10;
    uint64_t v12 = v10;
    uint64_t v13 = v7;
    do
    {
      int v14 = (char *)memchr(v13, 78, v12 - 4);
      if (!v14) {
        break;
      }
      if (*(_DWORD *)v14 == 1330334030 && v14[4] == 78)
      {
        if (v14 != v11 && v14 - (char *)v7 != -1)
        {
          if (*(char *)(a2 + 23) < 0)
          {
            *(void *)(a2 + 8) = 5;
            a2 = *(void *)a2;
          }
          else
          {
            *(unsigned char *)(a2 + 23) = 5;
          }
          *(unsigned char *)(a2 + 4) = 78;
          int v45 = 1330334030;
          goto LABEL_151;
        }
        break;
      }
      uint64_t v13 = (std::string *)(v14 + 1);
      uint64_t v12 = v11 - (char *)v13;
    }
    while (v11 - (char *)v13 >= 5);
    uint64_t v16 = v10;
    uint64_t v17 = v7;
    if (v10 < 7) {
      goto LABEL_47;
    }
    uint64_t v18 = v10;
    uint64_t v19 = v7;
    while (1)
    {
      uint64_t v20 = memchr(v19, 79, v18 - 6);
      if (!v20)
      {
LABEL_46:
        uint64_t v16 = v10;
        uint64_t v17 = v7;
        goto LABEL_47;
      }
      uint64_t v21 = (char *)v20;
      if (*v20 == 1297697871 && *(_DWORD *)((char *)v20 + 3) == 1398100045) {
        break;
      }
      uint64_t v19 = (std::string *)((char *)v20 + 1);
      uint64_t v18 = v11 - (v21 + 1);
      if (v18 < 7) {
        goto LABEL_46;
      }
    }
    uint64_t v16 = v10;
    uint64_t v17 = v7;
    if (v21 != v11)
    {
      uint64_t v16 = v10;
      uint64_t v17 = v7;
      if (v21 - (char *)v7 != -1)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          *(void *)(a2 + 8) = 7;
          a2 = *(void *)a2;
        }
        else
        {
          *(unsigned char *)(a2 + 23) = 7;
        }
        *(_DWORD *)(a2 + 3) = 1398100045;
        int v46 = 1297697871;
LABEL_158:
        *(_DWORD *)a2 = v46;
        double v44 = (unsigned char *)(a2 + 7);
        goto LABEL_159;
      }
    }
LABEL_47:
    do
    {
      uint64_t v23 = (char *)memchr(v17, 76, v16 - 4);
      if (!v23) {
        break;
      }
      if (*(_DWORD *)v23 == 1128875340 && v23[4] == 65)
      {
        if (v23 != v11 && v23 - (char *)v7 != -1)
        {
          if (*(char *)(a2 + 23) < 0)
          {
            *(void *)(a2 + 8) = 5;
            a2 = *(void *)a2;
          }
          else
          {
            *(unsigned char *)(a2 + 23) = 5;
          }
          *(unsigned char *)(a2 + 4) = 65;
          int v45 = 1128875340;
          goto LABEL_151;
        }
        break;
      }
      uint64_t v17 = (std::string *)(v23 + 1);
      uint64_t v16 = v11 - (char *)v17;
    }
    while (v11 - (char *)v17 >= 5);
    if (v10 > 5)
    {
      double v25 = v7;
      do
      {
        double v26 = (char *)memchr(v25, 80, v10 - 5);
        if (!v26) {
          break;
        }
        if (*(_DWORD *)v26 == 1414415696 && *((_WORD *)v26 + 2) == 22593)
        {
          if (v26 == v11 || v26 - (char *)v7 == -1) {
            break;
          }
          if (*(char *)(a2 + 23) < 0)
          {
            *(void *)(a2 + 8) = 6;
            a2 = *(void *)a2;
          }
          else
          {
            *(unsigned char *)(a2 + 23) = 6;
          }
          *(_WORD *)(a2 + 4) = 22593;
          *(_DWORD *)a2 = 1414415696;
          double v44 = (unsigned char *)(a2 + 6);
          goto LABEL_159;
        }
        double v25 = (std::string *)(v26 + 1);
        uint64_t v10 = v11 - (char *)v25;
      }
      while (v11 - (char *)v25 >= 6);
    }
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = size;
  }
  uint64_t v28 = (char *)v7 + v4;
  if (v4 > 6)
  {
    uint64_t v29 = v4;
    uint64_t v30 = v7;
    do
    {
      double v31 = (char *)memchr(v30, 77, v29 - 6);
      if (!v31) {
        break;
      }
      if (*(_DWORD *)v31 == 1330530637 && *(_DWORD *)(v31 + 3) == 1096043599)
      {
        if (v31 != v28 && v31 - (char *)v7 != -1)
        {
          if (*(char *)(a2 + 23) < 0)
          {
            *(void *)(a2 + 8) = 7;
            a2 = *(void *)a2;
          }
          else
          {
            *(unsigned char *)(a2 + 23) = 7;
          }
          *(_DWORD *)(a2 + 3) = 1096043599;
          int v46 = 1330530637;
          goto LABEL_158;
        }
        break;
      }
      uint64_t v30 = (std::string *)(v31 + 1);
      uint64_t v29 = v28 - (char *)v30;
    }
    while (v28 - (char *)v30 >= 7);
    uint64_t v33 = v4;
    uint64_t v34 = v7;
    do
    {
      uint64_t v35 = (char *)memchr(v34, 83, v33 - 6);
      if (!v35) {
        break;
      }
      if (*(_DWORD *)v35 == 1397571923 && *(_DWORD *)(v35 + 3) == 1196315987)
      {
        if (v35 == v28 || v35 - (char *)v7 == -1) {
          break;
        }
        if (*(char *)(a2 + 23) < 0)
        {
          *(void *)(a2 + 8) = 7;
          a2 = *(void *)a2;
        }
        else
        {
          *(unsigned char *)(a2 + 23) = 7;
        }
        *(_DWORD *)(a2 + 3) = 1196315987;
        int v46 = 1397571923;
        goto LABEL_158;
      }
      uint64_t v34 = (std::string *)(v35 + 1);
      uint64_t v33 = v28 - (char *)v34;
    }
    while (v28 - (char *)v34 >= 7);
  }
  if (v4 >= 5)
  {
    uint64_t v37 = v4;
    double v38 = v7;
    do
    {
      char v39 = (char *)memchr(v38, 69, v37 - 4);
      if (!v39) {
        break;
      }
      if (*(_DWORD *)v39 == 1330860101 && v39[4] == 78)
      {
        if (v39 != v28 && v39 - (char *)v7 != -1)
        {
          if (*(char *)(a2 + 23) < 0)
          {
            *(void *)(a2 + 8) = 5;
            a2 = *(void *)a2;
          }
          else
          {
            *(unsigned char *)(a2 + 23) = 5;
          }
          *(unsigned char *)(a2 + 4) = 78;
          int v45 = 1330860101;
          goto LABEL_151;
        }
        break;
      }
      double v38 = (std::string *)(v39 + 1);
      uint64_t v37 = v28 - (char *)v38;
    }
    while (v28 - (char *)v38 >= 5);
    if (v4 >= 10)
    {
      uint64_t v41 = v7;
      do
      {
        uint64_t v42 = (char *)memchr(v41, 72, v4 - 9);
        if (!v42) {
          break;
        }
        if (*(void *)v42 == 0x4C424C4553534148 && *((_WORD *)v42 + 4) == 17473)
        {
          if (v42 == v28 || v42 - (char *)v7 == -1) {
            break;
          }
          if (*(char *)(a2 + 23) < 0)
          {
            *(void *)(a2 + 8) = 10;
            a2 = *(void *)a2;
          }
          else
          {
            *(unsigned char *)(a2 + 23) = 10;
          }
          *(_WORD *)(a2 + 8) = 17473;
          *(void *)a2 = *(void *)"HASSELBLAD";
          double v44 = (unsigned char *)(a2 + 10);
          goto LABEL_159;
        }
        uint64_t v41 = (std::string *)(v42 + 1);
        uint64_t v4 = v28 - (char *)v41;
      }
      while (v28 - (char *)v41 >= 10);
    }
  }
  if (sub_1DDB6C700((uint64_t *)&v47, "LEAF", 0) == -1)
  {
    if (sub_1DDB6C700((uint64_t *)&v47, "RICOH", 0) == -1)
    {
      if (sub_1DDB6C700((uint64_t *)&v47, "PHASE ONE", 0) == -1)
      {
        std::string::operator=((std::string *)a2, &v47);
        goto LABEL_160;
      }
      if (*(char *)(a2 + 23) < 0)
      {
        *(void *)(a2 + 8) = 9;
        a2 = *(void *)a2;
      }
      else
      {
        *(unsigned char *)(a2 + 23) = 9;
      }
      *(unsigned char *)(a2 + 8) = 69;
      *(void *)a2 = *(void *)"PHASE ONE";
      double v44 = (unsigned char *)(a2 + 9);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        *(void *)(a2 + 8) = 5;
        a2 = *(void *)a2;
      }
      else
      {
        *(unsigned char *)(a2 + 23) = 5;
      }
      *(unsigned char *)(a2 + 4) = 72;
      int v45 = 1329809746;
LABEL_151:
      *(_DWORD *)a2 = v45;
      double v44 = (unsigned char *)(a2 + 5);
    }
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      *(void *)(a2 + 8) = 4;
      a2 = *(void *)a2;
    }
    else
    {
      *(unsigned char *)(a2 + 23) = 4;
    }
    *(_DWORD *)a2 = 1178682700;
    double v44 = (unsigned char *)(a2 + 4);
  }
LABEL_159:
  *double v44 = 0;
LABEL_160:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_1DDB6CF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 + 23) < 0) {
    operator delete(*(void **)v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB6CFA8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1DDA2639C(v3, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
    uint64_t v4 = *(void *)(a1 + 16);
  }
  sub_1DDB6C598((uint64_t)v3, (char *)__p);
  sub_1DDB6C500((char *)__p, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
}

void sub_1DDB6D030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDB6D064(int a1, int a2, char *__s, uint64_t a4, uint64_t **a5)
{
  size_t v7 = __s;
  if (__s[23] < 0)
  {
    uint64_t v8 = *((void *)__s + 1);
    if (!v8) {
      goto LABEL_18;
    }
    size_t v7 = *(char **)__s;
  }
  else
  {
    uint64_t v8 = __s[23];
    if (!__s[23]) {
      goto LABEL_18;
    }
  }
  char v9 = &v7[v8];
  if (v8 >= 4)
  {
    uint64_t v10 = v7;
    do
    {
      int64_t v11 = (char *)memchr(v10, 100, v8 - 3);
      if (!v11) {
        break;
      }
      if (*(_DWORD *)v11 == 778530404) {
        goto LABEL_12;
      }
      uint64_t v10 = v11 + 1;
      uint64_t v8 = v9 - v10;
    }
    while (v9 - v10 > 3);
  }
  int64_t v11 = v9;
LABEL_12:
  LODWORD(v8) = v11 != v9 && v11 == v7;
LABEL_18:
  uint64_t v13 = *(unsigned __int8 *)(a4 + 23);
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a4 + 8);
  }
  if (v13 != 14) {
    return 0;
  }
  if (v14 >= 0) {
    uint64_t v15 = (uint64_t *)a4;
  }
  else {
    uint64_t v15 = *(uint64_t **)a4;
  }
  uint64_t v16 = *v15;
  uint64_t v17 = *(uint64_t *)((char *)v15 + 6);
  if (v16 != 0x4F45206E6F6E6143 || v17 != 0x4430303320534F45) {
    LODWORD(v8) = 0;
  }
  if (v8 != 1) {
    return 0;
  }
  uint64_t v19 = (uint64_t *)*((unsigned __int8 *)a5 + 23);
  int v20 = (char)v19;
  if ((char)v19 < 0) {
    uint64_t v19 = a5[1];
  }
  if (v19 != (uint64_t *)10) {
    return 0;
  }
  if (v20 >= 0) {
    uint64_t v21 = (uint64_t *)a5;
  }
  else {
    uint64_t v21 = *a5;
  }
  uint64_t v22 = *v21;
  int v23 = *((unsigned __int16 *)v21 + 4);
  return v22 == 0x3831313330363830 && v23 == 14646;
}

void sub_1DDB6D1CC(void *a1, void *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB91268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EAB91268))
  {
    qword_1EAB91260 = (uint64_t)dispatch_queue_create("CoreAnalytics Logging", 0);
    __cxa_guard_release(&qword_1EAB91268);
  }
  if (qword_1EAB91270 != -1) {
    dispatch_once(&qword_1EAB91270, &unk_1F39840D0);
  }
  uint64_t v4 = *a1;
  if (qword_1EAB91260) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (*a2)
    {
      LODWORD(v51) = (*(uint64_t (**)(void))(*(void *)*a2 + 120))(*a2);
      int v6 = sub_1DDA4C4C8(&v51);
      size_t v7 = sub_1DDA4C49C(&v51);
      sub_1DDA31384(v7, &v57);

      (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 144))(&v55);
      uint64_t v8 = (unsigned __int8 *)v55;
      if (*((void *)&v55 + 1) == (void)v55) {
        goto LABEL_28;
      }
      uint64_t v9 = *(unsigned __int8 *)(v55 + 23);
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = *(unsigned __int8 *)(v55 + 23);
      }
      else {
        uint64_t v10 = *(void *)(v55 + 8);
      }
      uint64_t v11 = HIBYTE(v58);
      if (v58 < 0) {
        uint64_t v11 = *((void *)&v57 + 1);
      }
      if (v10 != v11)
      {
LABEL_28:
        BOOL v20 = 0;
      }
      else
      {
        if (v58 >= 0) {
          uint64_t v12 = (unsigned __int8 *)&v57;
        }
        else {
          uint64_t v12 = (unsigned __int8 *)v57;
        }
        if ((v9 & 0x80) != 0)
        {
          BOOL v20 = memcmp(*(const void **)v55, v12, *(void *)(v55 + 8)) == 0;
        }
        else if (*(unsigned char *)(v55 + 23))
        {
          uint64_t v13 = v9 - 1;
          do
          {
            int v15 = *v8++;
            int v14 = v15;
            int v17 = *v12++;
            int v16 = v17;
            BOOL v19 = v13-- != 0;
            BOOL v20 = v14 == v16;
          }
          while (v14 == v16 && v19);
        }
        else
        {
          BOOL v20 = 1;
        }
      }
      *(void *)&long long v53 = &v55;
      sub_1DDA2A044((void ***)&v53);
      if (SHIBYTE(v58) < 0) {
        operator delete((void *)v57);
      }
      uint64_t v4 = *a1;
    }
    else
    {
      BOOL v20 = 0;
      int v6 = -1;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v4 + 216))(&v57);
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 224))(&v55);
    (**(void (***)(long long *__return_ptr))*a1)(&v53);
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 232))(&v51);
    uint64_t v21 = (*(void (**)(void))(*(void *)*a1 + 400))(*a1);
    uint64_t v22 = sub_1DDB6DAE4(v21, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F7A0]);
    sub_1DDA31384(v22, &v49);

    if (SHIBYTE(v58) < 0)
    {
      int v23 = sub_1DDA2639C(&__dst, (void *)v57, *((unint64_t *)&v57 + 1));
    }
    else
    {
      long long __dst = v57;
      uint64_t v48 = v58;
    }
    if (SHIBYTE(v56) < 0)
    {
      int v23 = sub_1DDA2639C(v45, (void *)v55, *((unint64_t *)&v55 + 1));
    }
    else
    {
      *(_OWORD *)int v45 = v55;
      uint64_t v46 = v56;
    }
    if (SHIBYTE(v54) < 0)
    {
      int v23 = sub_1DDA2639C(__s, (void *)v53, *((unint64_t *)&v53 + 1));
    }
    else
    {
      *(_OWORD *)__s = v53;
      uint64_t v44 = v54;
    }
    if (SHIBYTE(v52) < 0)
    {
      int v23 = sub_1DDA2639C(v41, (void *)v51, *((unint64_t *)&v51 + 1));
    }
    else
    {
      *(_OWORD *)uint64_t v41 = v51;
      uint64_t v42 = v52;
    }
    if (SHIBYTE(v50) < 0)
    {
      int v23 = sub_1DDA2639C(__p, (void *)v49, *((unint64_t *)&v49 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v49;
      uint64_t v40 = v50;
    }
    BOOL v25 = sub_1DDB6D064(v23, v24, (char *)__s, (uint64_t)v41, (uint64_t **)__p);
    if (SHIBYTE(v40) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(v41[0]);
    }
    if (SHIBYTE(v44) < 0) {
      operator delete(__s[0]);
    }
    if (SHIBYTE(v46) < 0) {
      operator delete(v45[0]);
    }
    if (SHIBYTE(v48) < 0)
    {
      operator delete((void *)__dst);
      if (v25)
      {
LABEL_79:
        if (SHIBYTE(v50) < 0) {
          operator delete((void *)v49);
        }

        if (SHIBYTE(v52) < 0) {
          operator delete((void *)v51);
        }
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)v53);
        }
        if (SHIBYTE(v56) < 0) {
          operator delete((void *)v55);
        }
        if (SHIBYTE(v58) < 0) {
          operator delete((void *)v57);
        }
        return;
      }
    }
    else if (v25)
    {
      goto LABEL_79;
    }
    double v26 = qword_1EAB91260;
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3321888768;
    v28[2] = sub_1DDB6DB78;
    v28[3] = &unk_1F3984110;
    if (SHIBYTE(v58) < 0)
    {
      sub_1DDA2639C(&v29, (void *)v57, *((unint64_t *)&v57 + 1));
    }
    else
    {
      long long v29 = v57;
      uint64_t v30 = v58;
    }
    if (SHIBYTE(v56) < 0)
    {
      sub_1DDA2639C(&v31, (void *)v55, *((unint64_t *)&v55 + 1));
    }
    else
    {
      long long v31 = v55;
      uint64_t v32 = v56;
    }
    if (SHIBYTE(v54) < 0)
    {
      sub_1DDA2639C(&v33, (void *)v53, *((unint64_t *)&v53 + 1));
    }
    else
    {
      long long v33 = v53;
      uint64_t v34 = v54;
    }
    uint64_t v27 = (std::__shared_weak_count *)a2[1];
    uint64_t v35 = *a2;
    uint64_t v36 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v37 = v6;
    BOOL v38 = v20;
    dispatch_async(v26, v28);
    if (v36) {
      sub_1DDA18310(v36);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete((void *)v33);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)v29);
    }
    goto LABEL_79;
  }
}

void sub_1DDB6D7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (*(char *)(v55 - 161) < 0) {
    operator delete(*(void **)(v55 - 184));
  }

  if (*(char *)(v55 - 137) < 0) {
    operator delete(*(void **)(v55 - 160));
  }
  if (*(char *)(v55 - 113) < 0) {
    operator delete(*(void **)(v55 - 136));
  }
  if (*(char *)(v55 - 89) < 0) {
    operator delete(*(void **)(v55 - 112));
  }
  if (*(char *)(v55 - 65) < 0) {
    operator delete(*(void **)(v55 - 88));
  }
  _Unwind_Resume(a1);
}

void sub_1DDB6D8EC()
{
}

void sub_1DDB6D900()
{
  uint64_t v0 = (void *)MEMORY[0x1E01C4510]();
  BOOL v5 = objc_msgSend_mainBundle(MEMORY[0x1E4F28B50], v1, v2, v3, v4);
  uint64_t v10 = objc_msgSend_bundleIdentifier(v5, v6, v7, v8, v9);
  int v15 = objc_msgSend_bundleURL(v5, v11, v12, v13, v14);
  BOOL v20 = objc_msgSend_pathExtension(v15, v16, v17, v18, v19);

  if (v10) {
    BOOL v21 = v20 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    id v22 = v10;
    id v23 = v20;
    AnalyticsSendEventLazy();
  }
}

void sub_1DDB6DA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1DDB6DA54(uint64_t a1, const char *a2)
{
  void v6[2] = *MEMORY[0x1E4F143B8];
  v5[0] = @"Signature";
  v5[1] = @"Extension";
  uint64_t v2 = *(void *)(a1 + 40);
  v6[0] = *(void *)(a1 + 32);
  v6[1] = v2;
  uint64_t v3 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v6, (uint64_t)v5, 2);

  return v3;
}

id sub_1DDB6DAE4(void *a1, void *a2, void *a3)
{
  BOOL v5 = a3;
  int v6 = sub_1DDA2E3A8(a1, a2, 0);
  uint64_t v10 = sub_1DDA2E474(v6, v5, v7, v8, v9);

  return v10;
}

void sub_1DDB6DB5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB6DB78(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E01C4510]();
  uint64_t v3 = NSString;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_1DDA2639C(&__dst, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    long long __dst = *(_OWORD *)(a1 + 32);
    uint64_t v50 = *(void *)(a1 + 48);
  }
  sub_1DDB6C7D8((uint64_t)&__dst, (uint64_t)v51);
  if (v52 >= 0) {
    objc_msgSend_stringWithUTF8String_(v3, v4, (uint64_t)v51, v5, v6);
  }
  else {
  uint64_t v7 = objc_msgSend_stringWithUTF8String_(v3, v4, (uint64_t)v51[0], v5, v6);
  }
  uint64_t v8 = (void *)v7;
  uint64_t v9 = @"Unknown Make";
  if (v7) {
    uint64_t v9 = (__CFString *)v7;
  }
  uint64_t v10 = v9;

  if (v52 < 0) {
    operator delete(v51[0]);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v11 = NSString;
  if (*(char *)(a1 + 79) < 0)
  {
    sub_1DDA2639C(&__p, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 56);
    uint64_t v48 = *(void *)(a1 + 72);
  }
  sub_1DDB6CFA8((uint64_t)&__p, (uint64_t *)v51);
  if (v52 >= 0) {
    objc_msgSend_stringWithUTF8String_(v11, v12, (uint64_t)v51, v13, v14);
  }
  else {
  uint64_t v15 = objc_msgSend_stringWithUTF8String_(v11, v12, (uint64_t)v51[0], v13, v14);
  }
  int v16 = (void *)v15;
  uint64_t v17 = @"Unknown Model";
  if (v15) {
    uint64_t v17 = (__CFString *)v15;
  }
  uint64_t v18 = v17;

  if (v52 < 0) {
    operator delete(v51[0]);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)__p);
  }
  id v22 = (void *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    id v22 = (void *)*v22;
  }
  uint64_t v23 = objc_msgSend_stringWithUTF8String_(NSString, v19, (uint64_t)v22, v20, v21);
  int v24 = (void *)v23;
  BOOL v25 = @"Unknown Key";
  if (v23) {
    BOOL v25 = (__CFString *)v23;
  }
  double v26 = v25;

  uint64_t v27 = *(void *)(a1 + 104);
  if (v27)
  {
    char v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 2152))(v27);
    char v29 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 176))(*(void *)(a1 + 104));
    uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 408))(*(void *)(a1 + 104));
    double v31 = 0.0;
    if ((v28 & 1) == 0) {
      double v31 = (*(double (**)(void, void, void))(**(void **)(a1 + 104) + 2664))(*(void *)(a1 + 104), 0, 0);
    }
    unsigned int v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 256))(*(void *)(a1 + 104));
    double v33 = (*(double (**)(void))(**(void **)(a1 + 104) + 264))(*(void *)(a1 + 104));
    v39[1] = MEMORY[0x1E4F143A8];
    v39[2] = 3221225472;
    v39[3] = sub_1DDB6E0D8;
    v39[4] = &unk_1E6D05A30;
    int v43 = *(_DWORD *)(a1 + 120);
    char v44 = *(unsigned char *)(a1 + 124);
    char v45 = v29;
    char v46 = v28;
    uint64_t v40 = v10;
    uint64_t v41 = v18;
    v42[0] = v26;
    *(double *)&v42[1] = v31;
    *(double *)&v42[2] = (double)(int)v30 * (double)SHIDWORD(v30);
    *(double *)&v42[3] = (double)v32;
    *(double *)&v42[4] = v33;
    AnalyticsSendEventLazy();
    uint64_t v34 = (id *)&v40;
    uint64_t v35 = (id *)&v41;
    uint64_t v36 = (id *)v42;
  }
  else
  {
    int v37 = v10;
    BOOL v38 = v18;
    v39[0] = v26;
    AnalyticsSendEventLazy();
    uint64_t v34 = (id *)&v37;
    uint64_t v35 = (id *)&v38;
    uint64_t v36 = (id *)v39;
  }
}

void sub_1DDB6DFEC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDB6DFC4);
}

void sub_1DDB6E070()
{
}

void sub_1DDB6E078(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 - 113) < 0) {
    operator delete(*(void **)(v34 - 136));
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1DDB6E054);
}

void sub_1DDB6E0A8()
{
  if (*(char *)(v0 - 113) < 0) {
    operator delete(*(void **)(v0 - 136));
  }
  if (*(char *)(v0 - 137) < 0) {
    operator delete(*(void **)(v0 - 160));
  }
  JUMPOUT(0x1DDB6E058);
}

id sub_1DDB6E0D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  v42[0] = @"ProcessingVersion";
  uint64_t v6 = objc_msgSend_numberWithInt_(NSNumber, a2, *(unsigned int *)(a1 + 88), a4, a5);
  v43[0] = v6;
  v42[1] = @"LatestVersion";
  uint64_t v10 = objc_msgSend_numberWithBool_(NSNumber, v7, *(unsigned __int8 *)(a1 + 92), v8, v9);
  v43[1] = v10;
  v42[2] = @"DNG";
  uint64_t v14 = objc_msgSend_numberWithBool_(NSNumber, v11, *(unsigned __int8 *)(a1 + 93), v12, v13);
  void v43[2] = v14;
  v42[3] = @"Linearized";
  uint64_t v18 = objc_msgSend_numberWithBool_(NSNumber, v15, *(unsigned __int8 *)(a1 + 94), v16, v17);
  v43[3] = v18;
  long long v44 = *(_OWORD *)(a1 + 32);
  v42[4] = @"CameraMake";
  void v42[5] = @"CameraModel";
  uint64_t v45 = *(void *)(a1 + 48);
  v42[6] = @"CameraKey";
  v42[7] = @"RepresentativeNoise";
  uint64_t v23 = objc_msgSend_numberWithDouble_(NSNumber, v19, v20, v21, v22, *(double *)(a1 + 56));
  char v46 = v23;
  v42[8] = @"Megapixel";
  char v28 = objc_msgSend_numberWithDouble_(NSNumber, v24, v25, v26, v27, *(double *)(a1 + 64));
  std::string v47 = v28;
  v42[9] = @"ISO";
  double v33 = objc_msgSend_numberWithDouble_(NSNumber, v29, v30, v31, v32, *(double *)(a1 + 72));
  uint64_t v48 = v33;
  v42[10] = @"ExposureTime";
  BOOL v38 = objc_msgSend_numberWithDouble_(NSNumber, v34, v35, v36, v37, *(double *)(a1 + 80));
  long long v49 = v38;
  uint64_t v40 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v39, (uint64_t)v43, (uint64_t)v42, 11);

  return v40;
}

void sub_1DDB6E2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB6E35C(uint64_t a1, const char *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(a1 + 32);
  v5[0] = @"CameraMake";
  v5[1] = @"CameraModel";
  long long v6 = v2;
  void v5[2] = @"CameraKey";
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v3 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)&v6, (uint64_t)v5, 3);

  return v3;
}

unsigned char *sub_1DDB6E400(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1DDA2639C((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1DDA2639C((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  double result = (unsigned char *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    double result = sub_1DDA2639C(result, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)double result = v7;
  }
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1DDB6E4D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB6E504(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (v2) {
    sub_1DDA18310(v2);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    operator delete(v3);
  }
}

void sub_1DDB6E878(_Unwind_Exception *a1)
{
}

void sub_1DDB6E884(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1DDB6E8A0(uint64_t a1)
{
  long long v2 = sub_1DDA83E7C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)long long v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWBayerInterleavedFilter", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB6E928(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGAffineTransformMakeScale(&v8, 0.5, 0.5);
  v9.origin.CGFloat x = a1;
  v9.origin.CGFloat y = a2;
  v9.size.CGFloat width = a3;
  v9.size.vImagePixelCount height = a4;
  CGRect v10 = CGRectApplyAffineTransform(v9, &v8);
  CGRectIntegral(v10);
}

void sub_1DDB6EA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB6EBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB6EF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB6F430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1DDB6F6C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB6F850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB707E8(_Unwind_Exception *a1)
{
}

void sub_1DDB707F4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1DDB70810(uint64_t a1)
{
  long long v2 = sub_1DDA83E7C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)long long v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWDemosaicFilter", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

double sub_1DDB70898(double *a1, double a2, double a3, double a4, double a5)
{
  return sub_1DDB708C8(a2, a3, a4, a5, a1[4], a1[5], a1[6], a1[7], 1.0);
}

double sub_1DDB708C8(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  double v19 = a1 + a7;
  double v20 = a2 + a8;
  CGRect v27 = CGRectInset(*(CGRect *)(&a3 - 2), (float)-a9, (float)-a9);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  double v23 = a5;
  double v24 = a6;

  *(void *)&double result = (unint64_t)CGRectIntersection(v27, *(CGRect *)&v21);
  return result;
}

double sub_1DDB70928(double *a1, double a2, double a3, double a4, double a5)
{
  return sub_1DDB708C8(a2, a3, a4, a5, a1[4], a1[5], a1[6], a1[7], 2.0);
}

double sub_1DDB70958(double *a1, double a2, double a3, double a4, double a5)
{
  return sub_1DDB708C8(a2, a3, a4, a5, a1[4], a1[5], a1[6], a1[7], 3.0);
}

double sub_1DDB70988(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (!a6) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -2.0, -2.0);
  }
  return result;
}

double sub_1DDB709B4(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (!a6) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -3.0, -3.0);
  }
  return result;
}

void sub_1DDB70B10(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(_DWORD **__return_ptr))(*(void *)a1 + 160))(&v7);
  sub_1DDB70C68((void **)&v7, &v9);
  if (v8) {
    sub_1DDA18310(v8);
  }
  if (v9)
  {
    (*(void (**)(double *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v5, a1);
    sub_1DDBE9808((uint64_t)&v5, (uint64_t *)&v7);
    if (v6) {
      sub_1DDA18310(v6);
    }
    double v4 = 0.0;
    if ((int)v7[18] >= 3)
    {
      LODWORD(v4) = v7[29];
      double v4 = (double)*(unint64_t *)&v4;
    }
    double v5 = v4;
    sub_1DDA25B2C(a2, 4uLL, &v5);
    if (v8) {
      sub_1DDA18310(v8);
    }
  }
  else
  {
    long long v7 = 0;
    sub_1DDA25B2C(a2, 4uLL, &v7);
  }
  if (v10) {
    sub_1DDA18310(v10);
  }
}

void sub_1DDB70C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1DDA18310(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDB70C68@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  long long v2 = a1;
  double result = *a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F398F228, 0)) != 0)
  {
    double v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    long long v2 = a2;
  }
  *long long v2 = 0;
  v2[1] = 0;
  return result;
}

void sub_1DDB70CEC(_DWORD *a1)
{
  if (!a1[10]) {
    sub_1DDA30F38(a1);
  }
}

uint64_t sub_1DDB70CFC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  double v4 = (char *)operator new(0x108uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)double v4 = &unk_1F3984D60;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  v4[72] = 1;
  *((void *)v4 + 10) = &unk_1F3984DB0;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((void *)v4 + 15) = &unk_1F3984DE0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  v4[224] = 0;
  *((void *)v4 + 29) = 0;
  *((void *)v4 + 30) = 0;
  *((_DWORD *)v4 + 64) = 0;
  *((void *)v4 + 31) = 0;
  *a2 = v4 + 24;
  a2[1] = v4;
  return sub_1DDB70E04((uint64_t *)v4 + 3, a1);
}

void sub_1DDB70DDC(void *a1)
{
}

void sub_1DDB70DEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB70E04(uint64_t *a1, uint64_t *a2)
{
  int v4 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))();
  int v14 = sub_1DDA19CA4(*a2);
  LODWORD(v13[0]) = v4;
  LODWORD(v13[0]) = *sub_1DDA1A378(v13, &v14);
  sub_1DDA49398((uint64_t)v15, a2, v13);
  int v5 = sub_1DDA19EC8(*a2);
  sub_1DDA19EC8(*a2);
  int v14 = sub_1DDA19EC8(*a2);
  if (v5 != 1229539657 && v5 != 1296911693)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDA18410(&v12, &v14);
  sub_1DDA1A94C(v13, a2, (uint64_t)&v12, 0);
  unsigned int v6 = sub_1DDA19EC8(*a2);
  sub_1DDA19EC8(*a2);
  if (v6 > 0x1FF)
  {
    CGRect v9 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v9, "RawCameraException");
    __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  for (; v6; --v6)
  {
    int v7 = sub_1DDA19EC8(*a2);
    int v12 = sub_1DDA19EC8(*a2);
    int v11 = sub_1DDA19EC8(*a2);
    sub_1DDB71050(a1, a2, v7, &v12, &v11);
  }
  sub_1DDA1AA18(v13);
  return sub_1DDA49424((uint64_t)v15);
}

void sub_1DDB70FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  __cxa_free_exception(v14);
  sub_1DDA49424((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DDB71050(uint64_t *result, uint64_t *a2, int a3, _DWORD *a4, int *a5)
{
  int v7 = result;
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  if (a3 > 1048)
  {
    if (a3 == 1049)
    {
      sub_1DDA1B4D8((int *)__s, a5);
      sub_1DDA1A94C(v140, a2, (uint64_t)__s, 0);
      if (*a4 >= 0x24u && sub_1DDA19E68(*a2) == 18761 && sub_1DDA19E68(*a2) == 1)
      {
        *((float *)v7 + 16) = sub_1DDA1A014(*a2);
        *((float *)v7 + 17) = sub_1DDA1A014(*a2);
        *((float *)v7 + 18) = sub_1DDA1A014(*a2);
        *((float *)v7 + 19) = sub_1DDA1A014(*a2);
        *((float *)v7 + 20) = sub_1DDA1A014(*a2);
        *((float *)v7 + 21) = sub_1DDA1A014(*a2);
        *((float *)v7 + 22) = sub_1DDA1A014(*a2);
        float v90 = sub_1DDA1A014(*a2);
        *((float *)v7 + 23) = v90;
        *((unsigned char *)v7 + 48) = 0;
        if ((v7[8] & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (*((_DWORD *)v7 + 17) & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (v7[9] & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (*((_DWORD *)v7 + 19) & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (v7[10] & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (*((_DWORD *)v7 + 21) & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (v7[11] & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (LODWORD(v90) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      return sub_1DDA1AA18(v140);
    }
    if (a3 != 1050)
    {
      if (a3 != 1051) {
        return result;
      }
      sub_1DDA1B4D8((int *)__s, a5);
      sub_1DDA1A94C(v140, a2, (uint64_t)__s, 0);
      if (*a4 == 116)
      {
        int v9 = 0;
        CGRect v10 = (void **)(v7 + 13);
        do
        {
          int v11 = sub_1DDA19EC8(*a2);
          int v12 = v11;
          int v14 = (char *)v7[14];
          unint64_t v13 = v7[15];
          if ((unint64_t)v14 >= v13)
          {
            uint64_t v16 = (char *)*v10;
            uint64_t v17 = (v14 - (unsigned char *)*v10) >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              sub_1DDA17F78();
            }
            uint64_t v19 = v13 - (void)v16;
            if (v19 >> 1 > v18) {
              unint64_t v18 = v19 >> 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              uint64_t v21 = (char *)sub_1DDA17F90((uint64_t)(v7 + 15), v20);
              uint64_t v16 = (char *)v7[13];
              int v14 = (char *)v7[14];
            }
            else
            {
              uint64_t v21 = 0;
            }
            uint64_t v22 = &v21[4 * v17];
            *(_DWORD *)uint64_t v22 = v12;
            uint64_t v15 = v22 + 4;
            while (v14 != v16)
            {
              int v23 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            v7[13] = (uint64_t)v22;
            v7[14] = (uint64_t)v15;
            v7[15] = (uint64_t)&v21[4 * v20];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *(_DWORD *)int v14 = v11;
            uint64_t v15 = v14 + 4;
          }
          v7[14] = (uint64_t)v15;
          ++v9;
        }
        while (v9 != 5);
        int v24 = 0;
        uint64_t v25 = (void **)(v7 + 16);
        do
        {
          int v26 = sub_1DDA19EC8(*a2);
          int v27 = v26;
          char v29 = (char *)v7[17];
          unint64_t v28 = v7[18];
          if ((unint64_t)v29 >= v28)
          {
            uint64_t v31 = (char *)*v25;
            uint64_t v32 = (v29 - (unsigned char *)*v25) >> 2;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62) {
              sub_1DDA17F78();
            }
            uint64_t v34 = v28 - (void)v31;
            if (v34 >> 1 > v33) {
              unint64_t v33 = v34 >> 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              uint64_t v36 = (char *)sub_1DDA17F90((uint64_t)(v7 + 18), v35);
              uint64_t v31 = (char *)v7[16];
              char v29 = (char *)v7[17];
            }
            else
            {
              uint64_t v36 = 0;
            }
            uint64_t v37 = &v36[4 * v32];
            *(_DWORD *)uint64_t v37 = v27;
            uint64_t v30 = v37 + 4;
            while (v29 != v31)
            {
              int v38 = *((_DWORD *)v29 - 1);
              v29 -= 4;
              *((_DWORD *)v37 - 1) = v38;
              v37 -= 4;
            }
            v7[16] = (uint64_t)v37;
            v7[17] = (uint64_t)v30;
            v7[18] = (uint64_t)&v36[4 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(_DWORD *)char v29 = v26;
            uint64_t v30 = v29 + 4;
          }
          v7[17] = (uint64_t)v30;
          ++v24;
        }
        while (v24 != 5);
        int v39 = 0;
        uint64_t v40 = (void **)(v7 + 19);
        do
        {
          int v41 = sub_1DDA19EC8(*a2);
          int v42 = v41;
          long long v44 = (char *)v7[20];
          unint64_t v43 = v7[21];
          if ((unint64_t)v44 >= v43)
          {
            char v46 = (char *)*v40;
            uint64_t v47 = (v44 - (unsigned char *)*v40) >> 2;
            unint64_t v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 62) {
              sub_1DDA17F78();
            }
            uint64_t v49 = v43 - (void)v46;
            if (v49 >> 1 > v48) {
              unint64_t v48 = v49 >> 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v48;
            }
            if (v50)
            {
              long long v51 = (char *)sub_1DDA17F90((uint64_t)(v7 + 21), v50);
              char v46 = (char *)v7[19];
              long long v44 = (char *)v7[20];
            }
            else
            {
              long long v51 = 0;
            }
            char v52 = &v51[4 * v47];
            *(_DWORD *)char v52 = v42;
            uint64_t v45 = v52 + 4;
            while (v44 != v46)
            {
              int v53 = *((_DWORD *)v44 - 1);
              v44 -= 4;
              *((_DWORD *)v52 - 1) = v53;
              v52 -= 4;
            }
            v7[19] = (uint64_t)v52;
            v7[20] = (uint64_t)v45;
            v7[21] = (uint64_t)&v51[4 * v50];
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *(_DWORD *)long long v44 = v41;
            uint64_t v45 = v44 + 4;
          }
          v7[20] = (uint64_t)v45;
          ++v39;
        }
        while (v39 != 5);
        int v54 = 0;
        uint64_t v55 = (void **)(v7 + 22);
        do
        {
          int v56 = sub_1DDA19EC8(*a2);
          int v57 = v56;
          double v59 = (char *)v7[23];
          unint64_t v58 = v7[24];
          if ((unint64_t)v59 >= v58)
          {
            double v61 = (char *)*v55;
            uint64_t v62 = (v59 - (unsigned char *)*v55) >> 2;
            unint64_t v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 62) {
              sub_1DDA17F78();
            }
            uint64_t v64 = v58 - (void)v61;
            if (v64 >> 1 > v63) {
              unint64_t v63 = v64 >> 1;
            }
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v63;
            }
            if (v65)
            {
              int v66 = (char *)sub_1DDA17F90((uint64_t)(v7 + 24), v65);
              double v61 = (char *)v7[22];
              double v59 = (char *)v7[23];
            }
            else
            {
              int v66 = 0;
            }
            uint64_t v67 = &v66[4 * v62];
            *(_DWORD *)uint64_t v67 = v57;
            double v60 = v67 + 4;
            while (v59 != v61)
            {
              int v68 = *((_DWORD *)v59 - 1);
              v59 -= 4;
              *((_DWORD *)v67 - 1) = v68;
              v67 -= 4;
            }
            v7[22] = (uint64_t)v67;
            v7[23] = (uint64_t)v60;
            v7[24] = (uint64_t)&v66[4 * v65];
            if (v61) {
              operator delete(v61);
            }
          }
          else
          {
            *(_DWORD *)double v59 = v56;
            double v60 = v59 + 4;
          }
          v7[23] = (uint64_t)v60;
          ++v54;
        }
        while (v54 != 5);
        uint64_t v69 = *a2;
        *(_DWORD *)__s = 32;
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v69 + 40))(v69, __s, 1);
        *((unsigned char *)v7 + 200) = sub_1DDA19EC8(*a2) == 1;
      }
      return sub_1DDA1AA18(v140);
    }
    sub_1DDA1B4D8((int *)__s, a5);
    sub_1DDA1A94C(v140, a2, (uint64_t)__s, 0);
    if (*a4 != 16) {
      return sub_1DDA1AA18(v140);
    }
    float v91 = sub_1DDA1A014(*a2);
    float v92 = sub_1DDA1A014(*a2);
    float v93 = sub_1DDA1A014(*a2);
    float v94 = sub_1DDA1A014(*a2);
    if ((LODWORD(v91) & 0x7FFFFFFFu) > 0x7F7FFFFF
      || (LODWORD(v92) & 0x7FFFFFFFu) > 0x7F7FFFFF
      || (float v95 = v94, (LODWORD(v93) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      || (LODWORD(v94) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      uint64_t v137 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v137, "RawCameraException");
      __cxa_throw(v137, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v97 = (char **)(v7 + 5);
    float v96 = (char *)v7[5];
    uint64_t v98 = (void **)(v7 + 3);
    uint64_t v99 = (char *)v7[4];
    if (v99 >= v96)
    {
      uint64_t v101 = (char *)*v98;
      uint64_t v102 = (v99 - (unsigned char *)*v98) >> 2;
      unint64_t v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 62) {
        goto LABEL_200;
      }
      uint64_t v104 = v96 - v101;
      if (v104 >> 1 > v103) {
        unint64_t v103 = v104 >> 1;
      }
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v105 = v103;
      }
      if (v105)
      {
        uint64_t v106 = (char *)sub_1DDA17F90((uint64_t)(v7 + 5), v105);
        uint64_t v101 = (char *)v7[3];
        uint64_t v99 = (char *)v7[4];
      }
      else
      {
        uint64_t v106 = 0;
      }
      uint64_t v107 = &v106[4 * v102];
      float v96 = &v106[4 * v105];
      *(float *)uint64_t v107 = v91;
      uint64_t v100 = v107 + 4;
      while (v99 != v101)
      {
        int v108 = *((_DWORD *)v99 - 1);
        v99 -= 4;
        *((_DWORD *)v107 - 1) = v108;
        v107 -= 4;
      }
      uint64_t v7[3] = (uint64_t)v107;
      v7[4] = (uint64_t)v100;
      void v7[5] = (uint64_t)v96;
      if (v101)
      {
        operator delete(v101);
        float v96 = *v97;
      }
    }
    else
    {
      *(float *)uint64_t v99 = v91;
      uint64_t v100 = v99 + 4;
    }
    v7[4] = (uint64_t)v100;
    if (v100 >= v96)
    {
      long long v110 = (char *)*v98;
      uint64_t v111 = (v100 - (unsigned char *)*v98) >> 2;
      unint64_t v112 = v111 + 1;
      if ((unint64_t)(v111 + 1) >> 62) {
        goto LABEL_200;
      }
      uint64_t v113 = v96 - v110;
      if (v113 >> 1 > v112) {
        unint64_t v112 = v113 >> 1;
      }
      if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v114 = v112;
      }
      if (v114)
      {
        uint64_t v115 = (char *)sub_1DDA17F90((uint64_t)(v7 + 5), v114);
        long long v110 = (char *)v7[3];
        uint64_t v100 = (char *)v7[4];
      }
      else
      {
        uint64_t v115 = 0;
      }
      uint64_t v116 = &v115[4 * v111];
      float v96 = &v115[4 * v114];
      *(float *)uint64_t v116 = v92;
      double v109 = v116 + 4;
      while (v100 != v110)
      {
        int v117 = *((_DWORD *)v100 - 1);
        v100 -= 4;
        *((_DWORD *)v116 - 1) = v117;
        v116 -= 4;
      }
      uint64_t v7[3] = (uint64_t)v116;
      v7[4] = (uint64_t)v109;
      void v7[5] = (uint64_t)v96;
      if (v110)
      {
        operator delete(v110);
        float v96 = *v97;
      }
    }
    else
    {
      *(float *)uint64_t v100 = v92;
      double v109 = v100 + 4;
    }
    v7[4] = (uint64_t)v109;
    if (v109 >= v96)
    {
      double v119 = (char *)*v98;
      uint64_t v120 = (v109 - (unsigned char *)*v98) >> 2;
      unint64_t v121 = v120 + 1;
      if ((unint64_t)(v120 + 1) >> 62) {
        goto LABEL_200;
      }
      uint64_t v122 = v96 - v119;
      if (v122 >> 1 > v121) {
        unint64_t v121 = v122 >> 1;
      }
      if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v123 = v121;
      }
      if (v123)
      {
        double v124 = (char *)sub_1DDA17F90((uint64_t)(v7 + 5), v123);
        double v119 = (char *)v7[3];
        double v109 = (char *)v7[4];
      }
      else
      {
        double v124 = 0;
      }
      double v125 = &v124[4 * v120];
      float v96 = &v124[4 * v123];
      *(float *)double v125 = v93;
      uint64_t v118 = v125 + 4;
      while (v109 != v119)
      {
        int v126 = *((_DWORD *)v109 - 1);
        v109 -= 4;
        *((_DWORD *)v125 - 1) = v126;
        v125 -= 4;
      }
      uint64_t v7[3] = (uint64_t)v125;
      v7[4] = (uint64_t)v118;
      void v7[5] = (uint64_t)v96;
      if (v119)
      {
        operator delete(v119);
        float v96 = *v97;
      }
    }
    else
    {
      *(float *)double v109 = v93;
      uint64_t v118 = v109 + 4;
    }
    v7[4] = (uint64_t)v118;
    if (v118 < v96)
    {
      *(float *)uint64_t v118 = v95;
      double v127 = v118 + 4;
LABEL_190:
      v7[4] = (uint64_t)v127;
      return sub_1DDA1AA18(v140);
    }
    BOOL v128 = (char *)*v98;
    uint64_t v129 = (v118 - (unsigned char *)*v98) >> 2;
    unint64_t v130 = v129 + 1;
    if (!((unint64_t)(v129 + 1) >> 62))
    {
      uint64_t v131 = v96 - v128;
      if (v131 >> 1 > v130) {
        unint64_t v130 = v131 >> 1;
      }
      if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v132 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v132 = v130;
      }
      if (v132)
      {
        uint64_t v133 = (char *)sub_1DDA17F90((uint64_t)(v7 + 5), v132);
        BOOL v128 = (char *)v7[3];
        uint64_t v118 = (char *)v7[4];
      }
      else
      {
        uint64_t v133 = 0;
      }
      uint64_t v134 = &v133[4 * v129];
      uint64_t v135 = &v133[4 * v132];
      *(float *)uint64_t v134 = v95;
      double v127 = v134 + 4;
      while (v118 != v128)
      {
        int v136 = *((_DWORD *)v118 - 1);
        v118 -= 4;
        *((_DWORD *)v134 - 1) = v136;
        v134 -= 4;
      }
      uint64_t v7[3] = (uint64_t)v134;
      v7[4] = (uint64_t)v127;
      void v7[5] = (uint64_t)v135;
      if (v128) {
        operator delete(v128);
      }
      goto LABEL_190;
    }
LABEL_200:
    sub_1DDA17F78();
  }
  switch(a3)
  {
    case 1024:
      sub_1DDA1B4D8((int *)__s, a5);
      sub_1DDA1A94C(v140, a2, (uint64_t)__s, 0);
      int v139 = 8;
      *(_DWORD *)__s = *a4;
      int v70 = *sub_1DDAA99E4(__s, &v139);
      if (v70)
      {
        for (int i = 0; i != v70; ++i)
        {
          unsigned int v72 = sub_1DDA19E68(*a2);
          uint64_t v73 = sub_1DDA19E68(*a2);
          int v74 = sub_1DDA19E68(*a2);
          sub_1DDA19E68(*a2);
          unint64_t v75 = v72 | (unint64_t)(v73 << 32);
          unint64_t v77 = v7[1];
          unint64_t v76 = v7[2];
          if (v77 >= v76)
          {
            unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - *v7) >> 2);
            unint64_t v80 = v79 + 1;
            if (v79 + 1 > 0x1555555555555555) {
              sub_1DDA17F78();
            }
            unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *v7) >> 2);
            if (2 * v81 > v80) {
              unint64_t v80 = 2 * v81;
            }
            if (v81 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v82 = 0x1555555555555555;
            }
            else {
              unint64_t v82 = v80;
            }
            if (v82) {
              uint64_t v83 = (char *)sub_1DDAD6AA0((uint64_t)(v7 + 2), v82);
            }
            else {
              uint64_t v83 = 0;
            }
            uint64_t v84 = &v83[12 * v79];
            *(_DWORD *)uint64_t v84 = v74;
            *(void *)(v84 + 4) = v75;
            uint64_t v86 = (_DWORD *)*v7;
            uint64_t v85 = (_DWORD *)v7[1];
            uint64_t v87 = v84;
            if (v85 != (_DWORD *)*v7)
            {
              do
              {
                uint64_t v88 = *(void *)(v85 - 3);
                v85 -= 3;
                int v89 = v85[2];
                *(void *)(v87 - 12) = v88;
                v87 -= 12;
                *((_DWORD *)v87 + 2) = v89;
              }
              while (v85 != v86);
              uint64_t v85 = (_DWORD *)*v7;
            }
            uint64_t v78 = v84 + 12;
            *int v7 = (uint64_t)v87;
            v7[1] = (uint64_t)(v84 + 12);
            v7[2] = (uint64_t)&v83[12 * v82];
            if (v85) {
              operator delete(v85);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v77 = v74;
            *(void *)(v77 + 4) = v75;
            uint64_t v78 = (char *)(v77 + 12);
          }
          v7[1] = (uint64_t)v78;
        }
      }
      return sub_1DDA1AA18(v140);
    case 1026:
      if (!*a4) {
        *((_DWORD *)result + 58) = *a5;
      }
      break;
    case 1031:
      sub_1DDA1B4D8((int *)__s, a5);
      sub_1DDA1A94C(v140, a2, (uint64_t)__s, 0);
      *(void *)__s = 0;
      uint64_t v142 = 0;
      int v143 = 0;
      if (*a4 <= 0x12u)
      {
        int v8 = (*(uint64_t (**)(uint64_t, char *))(*(void *)*a2 + 32))(*a2, __s);
        if (*a4 == v8)
        {
          __s[v8] = 0;
          sub_1DDA1AB54((std::string *)(v7 + 26), __s);
        }
      }
      return sub_1DDA1AA18(v140);
    default:
      return result;
  }
  return result;
}

void sub_1DDB71C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1DDB71D10(uint64_t a1)
{
  return *(unsigned char *)(a1 + 48) == 0;
}

BOOL sub_1DDB71D20(uint64_t a1)
{
  return *(void *)(a1 + 32) - *(void *)(a1 + 24) == 16;
}

BOOL sub_1DDB71D34(uint64_t a1)
{
  return *(void *)(a1 + 112) != *(void *)(a1 + 104);
}

BOOL sub_1DDB71D44(uint64_t a1)
{
  return *(_DWORD *)(a1 + 232) < dword_1EAB8AFA0 || *(void *)(a1 + 112) != *(void *)(a1 + 104);
}

void sub_1DDB71D70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3984D60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB71D90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3984D60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB71DE4(uint64_t a1)
{
  return sub_1DDB71EC0(a1 + 24);
}

void sub_1DDB71DF0()
{
}

void sub_1DDB71E08(void *a1)
{
  sub_1DDB71E40(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDB71E40(void *a1)
{
  *a1 = &unk_1F3984DE0;
  long long v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_1DDB71EC0(uint64_t a1)
{
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  sub_1DDB71E40((void *)(a1 + 96));
  long long v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1DDB71F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB71FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDB721FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDB722AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB72330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB7243C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDB725DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDB728CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDB72C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDB730A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDB73364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDB733A0(void *a1)
{
  long long v2 = objc_opt_class();
  int v7 = objc_msgSend_description(v2, v3, v4, v5, v6);
  NSLog(&cfstr_FixmeOutputima.isa, v7);

  int v12 = objc_msgSend_inputKeys(a1, v8, v9, v10, v11);
  uint64_t v13 = *MEMORY[0x1E4F1E480];
  int v17 = objc_msgSend_containsObject_(v12, v14, *MEMORY[0x1E4F1E480], v15, v16);

  if (v17)
  {
    uint64_t v21 = objc_msgSend_valueForKey_(a1, v18, v13, v19, v20);
  }
  else
  {
    uint64_t v21 = 0;
  }

  return v21;
}

void sub_1DDB7344C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB73460(uint64_t a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (double *)operator new(0x18uLL);
  a2[1] = v4 + 3;
  a2[2] = v4 + 3;
  void v4[2] = 1.0;
  *(_OWORD *)uint64_t v4 = xmmword_1DDBFF690;
  *a2 = v4;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&__p, a1);
  sub_1DDAC7F20(&__p, (void **)&v12);
  if (v11) {
    sub_1DDA18310(v11);
  }
  if (v12)
  {
    sub_1DDB73610(v12, &__p);
    uint64_t v5 = (std::__shared_weak_count *)__p;
    if (*(float *)__p != 0.0)
    {
      float v6 = *((float *)__p + 1);
      if (v6 != 0.0)
      {
        float v7 = *((float *)__p + 2);
        if (v7 != 0.0)
        {
          double *v4 = (float)(v6 / *(float *)__p);
          v4[1] = (float)(v6 / v6);
          void v4[2] = (float)(v6 / v7);
LABEL_11:
          uint64_t v11 = v5;
          operator delete(v5);
          goto LABEL_12;
        }
      }
    }
    int v8 = sub_1DDBBA998();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = 0;
      _os_log_impl(&dword_1DDA14000, v8, OS_LOG_TYPE_INFO, "Not applying LevelBalanceAdjustment as it would result in a divide by zero", (uint8_t *)&v9, 2u);
    }

    uint64_t v5 = (std::__shared_weak_count *)__p;
    if (__p) {
      goto LABEL_11;
    }
  }
LABEL_12:
  if (v13) {
    sub_1DDA18310(v13);
  }
}

void sub_1DDB735CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    sub_1DDA18310(a14);
  }
  *(void *)(v15 + 8) = v14;
  operator delete(v14);
  _Unwind_Resume(a1);
}

void *sub_1DDB73610@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)result + 1400))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return sub_1DDA1D984(a2, (const void *)result[172], result[173], (uint64_t)(result[173] - result[172]) >> 2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_1DDB73644(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2192))(a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2200))(v17, a1);
  int v15 = 0;
  int v16 = v4;
  int v14 = &unk_1F396F638;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&__p, a1);
  (*(void (**)(void *, void **, void **, uint64_t))(*(void *)__p + 600))(__p, v17, &v14, 3);
  if (v11) {
    sub_1DDA18310(v11);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&__p, a1);
  sub_1DDAC7F20(&__p, (void **)&v12);
  if (v11) {
    sub_1DDA18310(v11);
  }
  if (v12 && *(void *)(a2 + 8) - *(void *)a2 >= 0x11uLL)
  {
    sub_1DDB73610(v12, &__p);
    uint64_t v5 = (std::__shared_weak_count *)__p;
    if (*(float *)__p != 0.0 && *((float *)__p + 1) != 0.0)
    {
      float v6 = *((float *)__p + 2);
      if (v6 != 0.0)
      {
        float v7 = *(float64x2_t **)a2;
        *float v7 = vdivq_f64(*(float64x2_t *)*(void *)a2, vcvtq_f64_f32(*(float32x2_t *)__p));
        v7[1].f64[0] = v7[1].f64[0] / v6;
LABEL_14:
        uint64_t v11 = v5;
        operator delete(v5);
        goto LABEL_15;
      }
    }
    int v8 = sub_1DDBBA998();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int16 v9 = 0;
      _os_log_impl(&dword_1DDA14000, v8, OS_LOG_TYPE_INFO, "Not applying LevelBalanceAdjustment as it would result in a divide by zero", v9, 2u);
    }

    uint64_t v5 = (std::__shared_weak_count *)__p;
    if (__p) {
      goto LABEL_14;
    }
  }
LABEL_15:
  if (v13) {
    sub_1DDA18310(v13);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_1DDB738AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    sub_1DDA18310(a15);
  }
  char v18 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v18;
    operator delete(v18);
  }
  if (*(char *)(v16 - 33) < 0) {
    operator delete(*(void **)(v16 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB73920(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
    goto LABEL_2;
  }
  uint64_t v10 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v8, a1);
  uint64_t v2 = v8;
  sub_1DDA1A880(__p, "IFD0:DNGPrivate:SR2Private:SR2SubIFD:WhiteLevel");
  char v3 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(void *)v2 + 240))(v2, __p, &v10);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9) {
    sub_1DDA18310(v9);
  }
  if (v3) {
    goto LABEL_13;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v8, a1);
  uint64_t v4 = v8;
  sub_1DDA1A880(__p, "IFD0:SR2Private:SR2SubIFD:0x7306");
  char v5 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(void *)v4 + 240))(v4, __p, &v10);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9) {
    sub_1DDA18310(v9);
  }
  if (v5) {
LABEL_13:
  }
    (*(double (**)(uint64_t))(*(void *)a1 + 848))(a1);
  else {
LABEL_2:
  }
    sub_1DDBD39EC(a1);
}

void sub_1DDB73AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB73B20(uint64_t a1@<X0>, float64x2_t **a2@<X8>)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1) & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v10, a1);
    uint64_t v4 = v10;
    sub_1DDA1A880(__p, "IFD0:DNGPrivate:SR2Private:SR2SubIFD:BlackLevels");
    char v5 = (*(uint64_t (**)(uint64_t, void **, float64x2_t **, void))(*(void *)v4 + 248))(v4, __p, a2, 0);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      sub_1DDA18310(v11);
    }
    float v6 = *a2;
    if (v5)
    {
      float64x2_t v7 = vaddq_f64(v6[1], v6[1]);
      *float v6 = vaddq_f64(*v6, *v6);
      v6[1] = v7;
      return;
    }
    if (v6)
    {
      a2[1] = v6;
      operator delete(v6);
    }
  }
  sub_1DDBCFB0C(a1, a2);
}

void sub_1DDB73C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  uint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB73C94(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  char v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPanasonic14BitUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = sub_1DDB74074;
  v4[3] = &unk_1E6D04A58;
  v4[4] = a1;
  MEMORY[0x1E01C46E0](v4);
  operator new[]();
}

void sub_1DDB7400C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB74074(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)char v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPanasonic14BitUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB74214(void *a1)
{
  __cxa_begin_catch(a1);
  char v3 = sub_1DDBBA998();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1DDBF4EF8(v3);
  }

  __cxa_end_catch();
  JUMPOUT(0x1DDB741ACLL);
}

void sub_1DDB74260(_Unwind_Exception *a1)
{
}

void sub_1DDB74274(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)char v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWLinearSpacePlaceholder", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB743F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB744F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB750F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48)
{
  _Unwind_Resume(a1);
}

void sub_1DDB76BF8()
{
  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void sub_1DDB76C04(void *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(v2);
}

void sub_1DDB76C20(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)char v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWAdjustColorTRC", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB76CA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v44[1] = *MEMORY[0x1E4F143B8];
  unint64_t v7 = *(void *)(a1 + 48);
  if (v7 < 5)
  {
    int v26 = (char *)v44 - ((8 * v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v27 = *(void *)(a1 + 48);
    unint64_t v28 = (char *)v44 - ((8 * v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v27)
    {
      unint64_t v29 = 0;
      do
      {
        objc_msgSend_valueAtIndex_(*(void **)(a1 + 32), a2, v29, a4, a5);
        *(void *)&v26[8 * v29] = v30;
        objc_msgSend_valueAtIndex_(*(void **)(a1 + 40), v31, v29, v32, v33);
        *(void *)&v28[8 * v29++] = v34;
        unint64_t v35 = *(void *)(a1 + 48);
      }
      while (v29 < v35);
    }
    else
    {
      unint64_t v35 = 0;
    }
    uint64_t v25 = objc_msgSend_curveWithCount_xvalues_yvalues_(Curve, a2, v35, (uint64_t)v26, (uint64_t)v28);
  }
  else
  {
    id v8 = *(id *)(a1 + 32);
    uint64_t v13 = objc_msgSend__values(v8, v9, v10, v11, v12);
    id v14 = *(id *)(a1 + 40);
    uint64_t v19 = objc_msgSend__values(v14, v15, v16, v17, v18);
    uint64_t v25 = objc_msgSend_curveWithCount_xvalues_yvalues_(Curve, v20, *(unsigned int *)(a1 + 48), v13, v19);
  }
  for (unint64_t i = 0; i != 256; ++i)
  {
    objc_msgSend_function(v25, v21, v22, v23, v24);
    uint64_t v37 = (double (**)(double))objc_claimAutoreleasedReturnValue();
    _D8 = v37[2]((double)i / 255.0);

    __asm { FCVT            H0, D8 }
    *(_WORD *)&a2[2 * i] = _H0;
  }
}

void sub_1DDB76E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB76E70(uint64_t a1, int a2)
{
  if (a2) {
    return *(double *)(a1 + 32);
  }
  return result;
}

void sub_1DDB77278(_Unwind_Exception *a1)
{
}

void sub_1DDB7728C(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)char v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWConvertSRGBtoLinear", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB77554(_Unwind_Exception *a1)
{
}

void sub_1DDB77568(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)char v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWConvertLinearToSRGB", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB77B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1DDB78470(_Unwind_Exception *a1)
{
}

void sub_1DDB7847C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1DDB78498(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)char v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWHueMagnet", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB78E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_1DDB79154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB793B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB79588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB796EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB798A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB798D4(double a1)
{
  return a1 * 2.0 + 0.5;
}

void sub_1DDB79B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB79B60(double a1)
{
  return a1 * 2.0 + 0.5;
}

void sub_1DDB79D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB79DB0(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

void sub_1DDB79EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB7A0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7A0F8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1DDB7A310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7A358(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1DDB7A534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7A570(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1DDB7A75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7A798(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1DDB7A924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7A964(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -4.0, -4.0);
  return result;
}

void sub_1DDB7AB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7AB7C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1DDB7AD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7ADE4(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1DDB7AFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7B008(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1DDB7B220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7B268(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1DDB7B42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7B478(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -4.0, -4.0);
  return result;
}

void sub_1DDB7B51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB7B620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7B63C(double a1, double a2, double a3, double a4)
{
  float v4 = a1;
  float v5 = (float)(v4 * 0.5) + 0.5;
  float v6 = a1 + a3;
  float v7 = (float)(v6 * 0.5) + 0.5;
  float v8 = a2;
  float v9 = (float)(v8 * 0.5) + 0.5;
  float v10 = a2 + a4;
  float v11 = (float)(v10 * 0.5) + 0.5;
  v13.origin.CGFloat x = v5;
  v13.origin.CGFloat y = v9;
  v13.size.CGFloat width = (float)(v7 - v5);
  v13.size.vImagePixelCount height = (float)(v11 - v9);
  *(void *)&double result = (unint64_t)CGRectInset(v13, -1.0, -1.0);
  return result;
}

void sub_1DDB7B7F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7B830(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

void sub_1DDB7B9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7BA30(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7BA38(a6, a1, a2, a3, a4);
}

double sub_1DDB7BA38(int a1, double result, double a3, double a4, double a5)
{
  if (a1 == 1)
  {
    float v5 = result;
    float v6 = (float)(v5 * 0.5) + 0.5;
    float v7 = result + a4;
    float v8 = (float)(v7 * 0.5) + 0.5;
    float v9 = a3;
    float v10 = (float)(v9 * 0.5) + 0.5;
    float v11 = a3 + a5;
    float v12 = (float)(v11 * 0.5) + 0.5;
    v13.origin.CGFloat x = v6;
    v13.origin.CGFloat y = v10;
    v13.size.CGFloat width = (float)(v8 - v6);
    v13.size.vImagePixelCount height = (float)(v12 - v10);
    *(void *)&double result = (unint64_t)CGRectInset(v13, -1.0, -1.0);
  }
  return result;
}

void sub_1DDB7BB94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7BBB0(double a1, double a2, double a3, double a4)
{
  float v4 = a1;
  float v5 = (float)(v4 * 2.0) + 0.5;
  float v6 = a1 + a3;
  float v7 = (float)(v6 * 2.0) + 0.5;
  float v8 = a2;
  float v9 = (float)(v8 * 2.0) + 0.5;
  float v10 = a2 + a4;
  float v11 = (float)(v10 * 2.0) + 0.5;
  v13.origin.CGFloat x = v5;
  v13.origin.CGFloat y = v9;
  v13.size.CGFloat width = (float)(v7 - v5);
  v13.size.vImagePixelCount height = (float)(v11 - v9);
  *(void *)&double result = (unint64_t)CGRectInset(v13, -2.0, -2.0);
  return result;
}

void sub_1DDB7BDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7BE50(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

void sub_1DDB7BFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7C000(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

void sub_1DDB7C0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7C0D8(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

void sub_1DDB7C2D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7C31C(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (!a6) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -2.0, -2.0);
  }
  return result;
}

void sub_1DDB7C564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7C5A4(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (!a2) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)-*(float *)(a1 + 32), (float)-*(float *)(a1 + 32));
  }
  return result;
}

void sub_1DDB7C7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7C838(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (!a2) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)-*(float *)(a1 + 32), (float)-*(float *)(a1 + 32));
  }
  return result;
}

void sub_1DDB7CAD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7CB24(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (!a2) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  }
  return result;
}

void sub_1DDB7CDD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7CE1C(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (!a2) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  }
  return result;
}

void sub_1DDB7CFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7D020(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

void sub_1DDB7D200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7D260(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

void sub_1DDB7D494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7D50C(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7BA38(a6, a1, a2, a3, a4);
}

void sub_1DDB7D754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7D7D4(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7BA38(a6, a1, a2, a3, a4);
}

void sub_1DDB7D9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7DA3C(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7BA38(a6, a1, a2, a3, a4);
}

void sub_1DDB7DC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7DCC8(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7BA38(a6, a1, a2, a3, a4);
}

void sub_1DDB7DEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7DEFC(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7DF04(a6, a1, a2, a3, a4);
}

double sub_1DDB7DF04(int a1, double result, double a3, double a4, double a5)
{
  if (!a1)
  {
    float v5 = result;
    float v6 = (float)(v5 * 0.5) + 0.5;
    float v7 = result + a4;
    float v8 = (float)(v7 * 0.5) + 0.5;
    float v9 = a3;
    float v10 = (float)(v9 * 0.5) + 0.5;
    float v11 = a3 + a5;
    float v12 = (float)(v11 * 0.5) + 0.5;
    v13.origin.CGFloat x = v6;
    v13.origin.CGFloat y = v10;
    v13.size.CGFloat width = (float)(v8 - v6);
    v13.size.vImagePixelCount height = (float)(v12 - v10);
    *(void *)&double result = (unint64_t)CGRectInset(v13, -1.0, -1.0);
  }
  return result;
}

void sub_1DDB7E148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7E190(uint64_t a1, double a2)
{
  return a2 + *(double *)(a1 + 32);
}

void sub_1DDB7E390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7E3DC(uint64_t a1, double a2)
{
  return a2 + *(double *)(a1 + 32);
}

void sub_1DDB7E5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7E618(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7DF04(a6, a1, a2, a3, a4);
}

void sub_1DDB7E6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7E6EC(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

void sub_1DDB7E8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7E90C(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

void sub_1DDB7EBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7EC08(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7DF04(a6, a1, a2, a3, a4);
}

void sub_1DDB7EDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB7F08C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7F0DC(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7BA38(a6, a1, a2, a3, a4);
}

void sub_1DDB7F38C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7F3D4(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7DF04(a6, a1, a2, a3, a4);
}

void sub_1DDB7F5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB7F680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB7F74C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7F768(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

void sub_1DDB7F8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7F914(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -4.0, -4.0);
  return result;
}

void sub_1DDB7FADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB7FB10(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1DDB7BA38(a6, a1, a2, a3, a4);
}

void sub_1DDB7FC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB7FE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB7FFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB801B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB80358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB8050C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB8073C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB808E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB80B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB80DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB80FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB8116C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB814F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDB817F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1DDB81EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB865B0(_Unwind_Exception *a1)
{
}

void sub_1DDB865DC(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)float v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWReduceNoise", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

id sub_1DDB86664(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  v78[5] = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  v77[0] = @"inputRVector";
  CGRect v13 = (void *)MEMORY[0x1E4F1E080];
  objc_msgSend_X(v12, v14, v15, v16, v17);
  uint64_t v23 = objc_msgSend_vectorWithX_Y_Z_W_(v13, v18, v19, v20, v21, 0.0, 0.0, 0.0, v22);
  v78[0] = v23;
  v77[1] = @"inputGVector";
  uint64_t v24 = (void *)MEMORY[0x1E4F1E080];
  objc_msgSend_Y(v12, v25, v26, v27, v28);
  uint64_t v34 = objc_msgSend_vectorWithX_Y_Z_W_(v24, v29, v30, v31, v32, 0.0, 0.0, 0.0, v33);
  v78[1] = v34;
  v77[2] = @"inputBVector";
  unint64_t v35 = (void *)MEMORY[0x1E4F1E080];
  objc_msgSend_Z(v12, v36, v37, v38, v39);
  uint64_t v45 = objc_msgSend_vectorWithX_Y_Z_W_(v35, v40, v41, v42, v43, 0.0, 0.0, 0.0, v44);
  v78[2] = v45;
  v77[3] = @"inputAVector";
  unint64_t v50 = objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E4F1E080], v46, v47, v48, v49, 0.0, 0.0, 0.0, 0.0);
  v78[3] = v50;
  v77[4] = @"inputBiasVector";
  uint64_t v55 = objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E4F1E080], v51, v52, v53, v54, 0.0, 0.0, 0.0, 1.0);
  v78[4] = v55;
  int v57 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v56, (uint64_t)v78, (uint64_t)v77, 5);
  double v60 = objc_msgSend_imageByApplyingFilter_withInputParameters_(v11, v58, @"CIColorMatrix", (uint64_t)v57, v59);

  unint64_t v65 = objc_msgSend_imageByCroppingToRect_(v60, v61, v62, v63, v64, a3, a4, a5, a6);
  int v70 = objc_msgSend__imageBySamplingNearest(v65, v66, v67, v68, v69);

  CGAffineTransformMakeScale(&v76, 2.0, 2.0);
  int v74 = objc_msgSend_imageByApplyingTransform_(v70, v71, (uint64_t)&v76, v72, v73);

  return v74;
}

void sub_1DDB868EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB86A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB86AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB88DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_Unwind_Exception *exception_object,void *a42,void *a43,void *a44)
{
  _Unwind_Resume(a1);
}

double sub_1DDB8929C(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

double sub_1DDB892A8(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -4.0, -4.0);
  return result;
}

double sub_1DDB892B8(double a1, double a2, double a3, double a4)
{
  float v4 = floor(a1);
  float v5 = (float)(v4 * 2.0) + 0.5;
  float v6 = floor(a1 + a3);
  float v7 = (float)(v6 * 2.0) + 0.5;
  float v8 = floor(a2);
  float v9 = (float)(v8 * 2.0) + 0.5;
  float v10 = floor(a2 + a4);
  float v11 = (float)(v10 * 2.0) + 0.5;
  v13.origin.CGFloat x = v5;
  v13.origin.CGFloat y = v9;
  v13.size.CGFloat width = (float)(v7 - v5);
  v13.size.vImagePixelCount height = (float)(v11 - v9);
  *(void *)&double result = (unint64_t)CGRectInset(v13, -2.0, -2.0);
  return result;
}

double sub_1DDB8931C(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

double sub_1DDB89328(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -6.0, -6.0);
  return result;
}

double sub_1DDB89334(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -6.0, -6.0);
  return result;
}

double sub_1DDB89340(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -14.0, -14.0);
  return result;
}

double sub_1DDB8934C(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -28.0, -28.0);
  return result;
}

double sub_1DDB89358(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -28.0, -28.0);
  return result;
}

double sub_1DDB89364(double a1, double a2, double a3, double a4)
{
  return sub_1DDB8936C(a1, a2, a3, a4, 0.5);
}

double sub_1DDB8936C(double a1, double a2, double a3, double a4, float a5)
{
  float v5 = floor(a1 * 0.5);
  float v6 = v5 + a5;
  float v7 = floor((a1 + a3) * 0.5);
  float v8 = v7 + a5;
  float v9 = floor(a2 * 0.5);
  float v10 = v9 + a5;
  float v11 = floor((a2 + a4) * 0.5);
  float v12 = v11 + a5;
  v14.origin.CGFloat x = v6;
  v14.origin.CGFloat y = v10;
  v14.size.CGFloat width = (float)(v8 - v6);
  v14.size.vImagePixelCount height = (float)(v12 - v10);
  *(void *)&double result = (unint64_t)CGRectInset(v14, -1.0, -1.0);
  return result;
}

void sub_1DDB89584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB89700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB95930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,_Unwind_Exception *exception_objecta,void *a49,void *a50,void *a51,void *a52,void *a53,void *a54,void *a55,void *a56,void *a57,uint64_t a58,void *a59,void *a60,void *a61,void *a62,void *a63)
{
  STACK[0x320] = v75;
  STACK[0x228] = v73;
  STACK[0x2E0] = STACK[0x318];

  CGAffineTransform v76 = (void *)STACK[0x320];
  _Unwind_Resume(a1);
}

float sub_1DDB97484(float *a1, float *a2, float a3)
{
  if (*a1 > a3) {
    return *a2;
  }
  uint64_t v4 = 0;
  for (uint64_t i = 0; ; i += 0x100000000)
  {
    float v6 = a1[v4 + 1];
    if (v6 > a3) {
      break;
    }
    if (++v4 == 8) {
      return a2[8];
    }
  }
  return *(float *)((char *)a2 + (i >> 30))
       + (float)((float)((float)(a3 - *(float *)((char *)a1 + (i >> 30)))
                       / (float)(v6 - *(float *)((char *)a1 + (i >> 30))))
               * (float)(a2[v4 + 1] - *(float *)((char *)a2 + (i >> 30))));
}

double sub_1DDB974F8(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1DDB97504(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

float64_t sub_1DDB97514(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

float64_t sub_1DDB97538(float64x2_t a1, float64_t a2)
{
  a1.f64[1] = a2;
  __asm
  {
    FMOV            V1.2D, #0.5
    FMOV            V6.2S, #-1.0
  }
  *(void *)&a1.f64[0] = *(_OWORD *)&vcvtq_f64_f32(vadd_f32(vadd_f32(vcvt_f32_f64(vrndmq_f64(vmulq_f64(a1, _Q1))), (float32x2_t)0x3F0000003F000000), _D6));
  return a1.f64[0];
}

float64_t sub_1DDB97598(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

float64_t sub_1DDB975C0(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

float64_t sub_1DDB975E8(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

double sub_1DDB9760C(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1DDB97618(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1DDB97624(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -8.0, -8.0);
  return result;
}

double sub_1DDB97630(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -1.0, -1.0);
  }
  return result;
}

float64_t sub_1DDB9765C(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

float64_t sub_1DDB97680(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

double sub_1DDB976A4(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1DDB976B0(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1DDB976BC(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -8.0, -8.0);
  return result;
}

double sub_1DDB976C8(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -1.0, -1.0);
  }
  return result;
}

double sub_1DDB976F4(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -2.0, -2.0);
  }
  return result;
}

double sub_1DDB97720(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -4.0, -4.0);
  }
  return result;
}

double sub_1DDB9774C(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -8.0, -8.0);
  }
  return result;
}

float64_t sub_1DDB97778(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

float64_t sub_1DDB9779C(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

double sub_1DDB977C0(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1DDB977CC(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1DDB977D8(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -8.0, -8.0);
  return result;
}

double sub_1DDB977E4(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -1.0, -1.0);
  }
  return result;
}

double sub_1DDB97810(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -2.0, -2.0);
  }
  return result;
}

double sub_1DDB9783C(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -4.0, -4.0);
  }
  return result;
}

double sub_1DDB97868(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -8.0, -8.0);
  }
  return result;
}

double sub_1DDB97894(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -16.0, -16.0);
  }
  return result;
}

float64_t sub_1DDB978C0(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

float64_t sub_1DDB978E4(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

double sub_1DDB97908(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1DDB97914(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -8.0, -8.0);
  return result;
}

double sub_1DDB97920(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -1.0, -1.0);
  }
  return result;
}

double sub_1DDB9794C(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -2.0, -2.0);
  }
  return result;
}

double sub_1DDB97978(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -4.0, -4.0);
  }
  return result;
}

double sub_1DDB979A4(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -8.0, -8.0);
  }
  return result;
}

double sub_1DDB979D0(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -16.0, -16.0);
  }
  return result;
}

double sub_1DDB979FC(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

float64_t sub_1DDB97A08(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

double sub_1DDB97A2C(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

double sub_1DDB97A38(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

float64_t sub_1DDB97A44(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    a1.f64[0] = sub_1DDB97538(a1, a2);
  }
  return a1.f64[0];
}

void sub_1DDB97D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB97E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDB980C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDB98484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (a2)
  {

    if (__p) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1DDB98438);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB987D0(_Unwind_Exception *a1)
{
}

void sub_1DDB987E4(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)float v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWTemperatureAdjust", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB98984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB98C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDB98EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB99174(_Unwind_Exception *a1)
{
}

void sub_1DDB99188()
{
}

void sub_1DDB99190()
{
}

void sub_1DDB99198(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)float v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWAdjustExposureAndBias", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB99610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1DDB99BF8(_Unwind_Exception *a1)
{
}

void sub_1DDB99C04(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1DDB99C20(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)float v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWVignetteRadial", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB99DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB99EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9A7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9AC08(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  sub_1DDAD869C(v1);
  JUMPOUT(0x1DDB9ABE0);
}

void sub_1DDB9AC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9AD4C(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {

    sub_1DDACB228((uint64_t *)va);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1DDB9AD04);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB9B3F8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (a37) {
      operator delete(a37);
    }
    sub_1DDACB228(&a42);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1DDB9B3A0);
  }
  _Unwind_Resume(a1);
}

void sub_1DDB9B5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1DDACB228((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DDB9BFD0(_Unwind_Exception *a1)
{
}

void sub_1DDB9BFDC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1DDB9BFF8(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)float v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWConvert", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB9C4EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  sub_1DDB0B8CC(v12);
  JUMPOUT(0x1DDB9C4CCLL);
}

void sub_1DDB9C55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1DDACB228((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB9C93C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F39681B8;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  sub_1DDAD80E8((void *)(a1 + 16), a2 + 16);
  sub_1DDAD80E8((void *)(a1 + 48), a2 + 48);
  sub_1DDAD80E8((void *)(a1 + 80), a2 + 80);
  sub_1DDAD80E8((void *)(a1 + 112), a2 + 112);
  sub_1DDAD80E8((void *)(a1 + 144), a2 + 144);
  sub_1DDAD80E8((void *)(a1 + 176), a2 + 176);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  sub_1DDAD80E8((void *)(a1 + 216), a2 + 216);
  sub_1DDAD80E8((void *)(a1 + 248), a2 + 248);
  return a1;
}

void sub_1DDB9C9F0(_Unwind_Exception *exception_object)
{
  char v3 = (void *)v1[28];
  if (v3)
  {
    v1[29] = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = (void *)v1[23];
  if (v4)
  {
    v1[24] = v4;
    operator delete(v4);
  }
  float v5 = (void *)v1[19];
  if (v5)
  {
    v1[20] = v5;
    operator delete(v5);
  }
  float v6 = (void *)v1[15];
  if (v6)
  {
    v1[16] = v6;
    operator delete(v6);
  }
  float v7 = (void *)v1[11];
  if (v7)
  {
    v1[12] = v7;
    operator delete(v7);
  }
  float v8 = (void *)v1[7];
  if (v8)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  float v9 = (void *)v1[3];
  if (v9)
  {
    v1[4] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB9CB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9CE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_1DDB9D12C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1DDB9D1DC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1DDB9D268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9D9D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9DA68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9DAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9DB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB9EBC8()
{
  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void sub_1DDB9EBD4(void *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(v2);
}

void sub_1DDB9EBF0(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  char v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)float v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWDefringeFilter", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

double sub_1DDB9EC7C(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1DDB9EC88(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1DDB9EC94(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -4.0, -4.0);
  return result;
}

double sub_1DDB9ECA0(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

double sub_1DDB9ECAC(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

double sub_1DDB9ECBC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&a2, *(CGFloat *)(a1 + 32), *(CGFloat *)(a1 + 32));
  return result;
}

double sub_1DDB9ECC8(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -5.0, -5.0);
  }
  return result;
}

double sub_1DDB9ECF4(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (a2 < 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)-*(float *)(a1 + 32), (float)-*(float *)(a1 + 32));
  }
  return result;
}

double sub_1DDB9ED2C(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, -5.0, -5.0);
  }
  return result;
}

double sub_1DDB9ED58(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (a2 < 1) {
    *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)-*(float *)(a1 + 32), (float)-*(float *)(a1 + 32));
  }
  return result;
}

void sub_1DDB9EE0C(int a1@<W0>, _DWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  sub_1DDAD849C(3u, (uint64_t)&v52);
  if (a1) {
    sub_1DDAD8AE0((unsigned int *)&v52, (uint64_t)&v77, 2.55);
  }
  else {
    sub_1DDAD8AE0((unsigned int *)&v52, (uint64_t)&v77, 2.0);
  }
  sub_1DDAD88E8(&v52, (uint64_t)&v77);
  if (v78)
  {
    unint64_t v79 = v78;
    operator delete(v78);
  }
  v83[0] = a4 / a5;
  v83[1] = 1.0;
  void v83[2] = (1.0 - a4 - a5) / a5;
  long long v80 = xmmword_1DDC0AF48;
  uint64_t v81 = 0x3FEA6594AF4F0D84;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_1DDA1808C(&v49, v83, (uint64_t)&v84, 3uLL);
  char v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  sub_1DDA1808C(&v46, &v80, (uint64_t)&v82, 3uLL);
  if (v50 - (unsigned char *)v49 != 24 || v47 - (unsigned char *)v46 != 24)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDAD8240((uint64_t)&v77, 3u, 3u, 0.8951, v10, v11, v12, v13, v14, 0x3FD10CB295E9E1B1);
  sub_1DDAD8240((uint64_t)&v74, 3u, 3u, 0.986993, v15, v16, v17, v18, v19, 0xBFC2D2AA5C5F7C67);
  uint64_t v20 = (_DWORD *)sub_1DDAD823C((uint64_t)&v71, 3u, 1u);
  sub_1DDAD96F4(v20, (uint64_t)&v49);
  sub_1DDAD8BC8(&v77, &v71, (uint64_t)v68);
  sub_1DDAD96F4(&v71, (uint64_t)&v46);
  sub_1DDAD8BC8(&v77, &v71, (uint64_t)v65);
  sub_1DDAD849C(3u, (uint64_t)&v62);
  uint64_t v55 = sub_1DDAD8560((uint64_t)v65, 0);
  long long __p = v21;
  double v22 = *(double *)sub_1DDAD85FC((uint64_t)&v55, 0);
  uint64_t v60 = sub_1DDAD8560((uint64_t)v68, 0);
  uint64_t v61 = v23;
  double v24 = *(double *)sub_1DDAD85FC((uint64_t)&v60, 0);
  uint64_t v58 = sub_1DDAD8560((uint64_t)&v62, 0);
  uint64_t v59 = v25;
  *(double *)sub_1DDAD85FC((uint64_t)&v58, 0) = v22 / v24;
  uint64_t v55 = sub_1DDAD8560((uint64_t)v65, 1u);
  long long __p = v26;
  double v27 = *(double *)sub_1DDAD85FC((uint64_t)&v55, 0);
  uint64_t v60 = sub_1DDAD8560((uint64_t)v68, 1u);
  uint64_t v61 = v28;
  double v29 = *(double *)sub_1DDAD85FC((uint64_t)&v60, 0);
  uint64_t v58 = sub_1DDAD8560((uint64_t)&v62, 1u);
  uint64_t v59 = v30;
  *(double *)sub_1DDAD85FC((uint64_t)&v58, 1u) = v27 / v29;
  uint64_t v55 = sub_1DDAD8560((uint64_t)v65, 2u);
  long long __p = v31;
  double v32 = *(double *)sub_1DDAD85FC((uint64_t)&v55, 0);
  uint64_t v60 = sub_1DDAD8560((uint64_t)v68, 2u);
  uint64_t v61 = v33;
  double v34 = *(double *)sub_1DDAD85FC((uint64_t)&v60, 0);
  uint64_t v58 = sub_1DDAD8560((uint64_t)&v62, 2u);
  uint64_t v59 = v35;
  *(double *)sub_1DDAD85FC((uint64_t)&v58, 2u) = v32 / v34;
  sub_1DDAD823C((uint64_t)&v43, 3u, 3u);
  sub_1DDAD8BC8(&v62, &v77, (uint64_t)&v55);
  sub_1DDAD88E8(&v43, (uint64_t)&v55);
  if (__p)
  {
    int v57 = __p;
    operator delete(__p);
  }
  sub_1DDAD8BC8(&v74, &v43, (uint64_t)&v55);
  sub_1DDAD88E8(&v43, (uint64_t)&v55);
  if (__p)
  {
    int v57 = __p;
    operator delete(__p);
  }
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
  if (v66)
  {
    uint64_t v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    int v70 = v69;
    operator delete(v69);
  }
  if (v72)
  {
    unint64_t v73 = v72;
    operator delete(v72);
  }
  if (v75)
  {
    CGAffineTransform v76 = v75;
    operator delete(v75);
  }
  if (v78)
  {
    unint64_t v79 = v78;
    operator delete(v78);
  }
  sub_1DDAD8BC8((unsigned int *)&v43, &v52, (uint64_t)&v77);
  sub_1DDAD88E8(&v52, (uint64_t)&v77);
  if (v78)
  {
    unint64_t v79 = v78;
    operator delete(v78);
  }
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    unint64_t v50 = v49;
    operator delete(v49);
  }
  uint64_t v41 = (unsigned int *)sub_1DDAD8240((uint64_t)&v74, 3u, 3u, 1.82412008, v36, v37, v38, v39, v40, 0xBFE026BD9F433306);
  sub_1DDAD8BC8(v41, &v52, (uint64_t)&v77);
  sub_1DDAD88E8(&v52, (uint64_t)&v77);
  if (v78)
  {
    unint64_t v79 = v78;
    operator delete(v78);
  }
  if (v75)
  {
    CGAffineTransform v76 = v75;
    operator delete(v75);
  }
  sub_1DDAD8BC8((unsigned int *)&v52, a2, a3);
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
}

void sub_1DDB9F4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  uint64_t v47 = *(void **)(v45 - 136);
  if (v47)
  {
    *(void *)(v45 - 128) = v47;
    operator delete(v47);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB9F680(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  void (*v29)(long long *__return_ptr, uint64_t *, void *, id);
  long long v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t (**v33)();
  uint64_t v34;
  long long v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unsigned int v38;
  id v39;
  id v40;
  long long v41;
  std::__shared_weak_count *v42;
  uint64_t v44;
  char v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  long long v50;
  long long v51;
  std::__shared_weak_count *v52;
  void *v53;
  int v54;
  void *context;
  void *v56;
  void *v57;
  void *v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  void *v62;
  void *v63;
  id v64;
  uint64_t v66;
  long long v67;
  long long v68;

  id v10 = a2;
  uint64_t v64 = a3;
  *a5 = 0;
  a5[1] = 0;
  unint64_t v11 = 0x1E4F1C000uLL;
  context = (void *)MEMORY[0x1E01C4510]();
  int v56 = v10;
  if (v10)
  {
    id v16 = v10;
  }
  else
  {
    objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v12, v13, v14, v15);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v54 = a4;
  unsigned int v62 = v16;
  int v57 = (void *)*MEMORY[0x1E4F2FD60];
  uint64_t v58 = (void *)*MEMORY[0x1E4F2FD40];
  uint64_t v17 = sub_1DDB6DAE4(v16, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD60]);
  uint64_t v61 = 0;
  unsigned int v18 = 0;
  uint64_t v53 = (void *)*MEMORY[0x1E4F2F800];
  while (2)
  {
    uint64_t v63 = v17;
    if (!v17) {
      goto LABEL_34;
    }
    uint64_t v59 = v18;
    uint64_t v19 = 0;
    uint64_t v20 = (id *)&qword_1F39866E0;
    do
    {
      uint64_t v21 = *(v20 - 1);
      if (v21)
      {
        id v6 = v21;
        if (sub_1DDB9FCD0(v17, v6, 1)) {
          goto LABEL_12;
        }
      }
      if ((v19 & 0x7FFFFFFE) == 0xA)
      {
        id v5 = *v20;
        if (sub_1DDB9FCD0(v17, v5, 1))
        {

          if (v21) {
LABEL_12:
          }

LABEL_23:
          unint64_t v28 = v11;
          uint64_t v26 = objc_msgSend_dictionary(*(void **)(v11 + 2656), v22, v23, v24, v25, v53);
          double v29 = (void (*)(long long *__return_ptr, uint64_t *, void *, id))*(v20 - 2);
          v29(&v68, a1, v26, v64);
          uint64_t v30 = v68;
          uint64_t v68 = 0uLL;
          uint64_t v31 = (std::__shared_weak_count *)a5[1];
          *(_OWORD *)a5 = v30;
          if (v31)
          {
            sub_1DDA18310(v31);
            if (*((void *)&v68 + 1)) {
              sub_1DDA18310(*((std::__shared_weak_count **)&v68 + 1));
            }
          }
          if ((void)v30)
          {
            (**(void (***)(void))v30)(v30);
            if ((*(uint64_t (**)(void))(*(void *)v30 + 32))(v30))
            {
              double v44 = *(void *)(v30 + 24);
              uint64_t v45 = *(unsigned char *)(v30 + 32);
              char v46 = v62;
              uint64_t v17 = v63;
              if (v54)
              {
                uint64_t v49 = sub_1DDA2E3A8(v26, v53, 0);
                if (v49) {
                  objc_msgSend_setObject_forKeyedSubscript_(v62, v47, (uint64_t)v49, @"__ExifProperties", v48);
                }
              }
              v29(&v68, a1, v62, v64);
              unint64_t v50 = v68;
              uint64_t v68 = 0uLL;
              int v66 = v50;
              *(_OWORD *)a5 = v50;
              if (*((void *)&v30 + 1))
              {
                sub_1DDA18310(*((std::__shared_weak_count **)&v30 + 1));
                if (*((void *)&v68 + 1)) {
                  sub_1DDA18310(*((std::__shared_weak_count **)&v68 + 1));
                }
              }
              *(void *)(v66 + 24) = v44;
              *(unsigned char *)(v66 + 32) = v45;

              goto LABEL_66;
            }
            *a5 = 0;
            a5[1] = 0;
            if (*((void *)&v30 + 1)) {
              sub_1DDA18310(*((std::__shared_weak_count **)&v30 + 1));
            }
          }
          unint64_t v11 = v28;
          uint64_t v17 = v63;
LABEL_31:

          goto LABEL_32;
        }
        if (v19 != 11)
        {
          BOOL v27 = 0;
          goto LABEL_19;
        }
      }
      else if (v19 != 11)
      {
        uint64_t v26 = v6;
        if (v21) {
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      BOOL v27 = sub_1DDB9FCD0(v17, @"ricoh", 1);
LABEL_19:

      if (!v21)
      {
        if (!v27) {
          goto LABEL_32;
        }
        goto LABEL_23;
      }

      if (v27) {
        goto LABEL_23;
      }
LABEL_32:
      ++v19;
      v20 += 6;
    }
    while (v19 != 14);
    unsigned int v18 = v59;
    if (*a5) {
      goto LABEL_69;
    }
LABEL_34:
    double v32 = 0;
    uint64_t v33 = &off_1F39866D0;
    while (((0x3934uLL >> v32) & 1) != 0 || !((unsigned int (*)(uint64_t *))*(v33 - 1))(a1))
    {
      ++v32;
      v33 += 6;
      if (v32 == 14)
      {
        double v34 = 0;
        goto LABEL_43;
      }
    }
    ((void (*)(long long *__return_ptr, uint64_t *, void *, id))*v33)(&v68, a1, v62, v64);
    uint64_t v35 = v68;
    uint64_t v68 = 0uLL;
    uint64_t v36 = (std::__shared_weak_count *)a5[1];
    uint64_t v60 = v35;
    *(_OWORD *)a5 = v35;
    if (v36)
    {
      sub_1DDA18310(v36);
      if (*((void *)&v68 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v68 + 1));
      }
    }
    double v34 = v60;
LABEL_43:
    if ((v34 != 0) | v61 & 1)
    {
      uint64_t v37 = (uint64_t)v17;
      if (v34) {
        goto LABEL_67;
      }
LABEL_55:
      uint64_t v17 = (void *)v37;
      if (v18++ >= 2) {
        goto LABEL_67;
      }
      continue;
    }
    break;
  }
  sub_1DDBBA650(a1, v62, v64, &v68);
  if ((void)v68)
  {
    uint64_t v38 = v18;
    (**(void (***)(void))v68)(v68);
    uint64_t v39 = v58;
    uint64_t v40 = v57;
    uint64_t v37 = sub_1DDB6DAE4(v62, v39, v40);

    unsigned int v18 = v38;
    if ((*(unsigned int (**)(void))(*(void *)v68 + 24))(v68))
    {
      sub_1DDBA1010(a1, v62, v64, &v67);
      uint64_t v41 = v67;
      uint64_t v67 = 0uLL;
      uint64_t v42 = (std::__shared_weak_count *)a5[1];
      *(_OWORD *)a5 = v41;
      if (v42)
      {
        sub_1DDA18310(v42);
        if (*((void *)&v67 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v67 + 1));
        }
      }
    }
  }
  else
  {
    uint64_t v37 = (uint64_t)v17;
  }
  if (*((void *)&v68 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v68 + 1));
  }
  double v34 = *a5;
  uint64_t v61 = 1;
  if (!*a5) {
    goto LABEL_55;
  }
LABEL_67:
  if (v34)
  {
    uint64_t v17 = (void *)v37;
LABEL_69:
    char v46 = v62;
  }
  else
  {
    char v46 = v62;
    sub_1DDBA1010(a1, v62, v64, &v68);
    uint64_t v51 = v68;
    uint64_t v68 = 0uLL;
    uint64_t v52 = (std::__shared_weak_count *)a5[1];
    *(_OWORD *)a5 = v51;
    if (v52)
    {
      sub_1DDA18310(v52);
      if (*((void *)&v68 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v68 + 1));
      }
    }
    uint64_t v17 = (void *)v37;
  }
LABEL_66:
}

void sub_1DDB9FBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  double v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    sub_1DDA18310(v22);
  }

  _Unwind_Resume(a1);
}

BOOL sub_1DDB9FCD0(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  float v9 = v6;
  BOOL v10 = 0;
  if (v5 && v6)
  {
    objc_msgSend_rangeOfString_options_(v5, v7, (uint64_t)v6, a3, v8);
    BOOL v10 = v11 != 0;
  }

  return v10;
}

void sub_1DDB9FD3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB9FD50@<D0>(uint64_t *a1@<X0>, int *a2@<X1>, unsigned int *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  int v18 = a4;
  LODWORD(v17) = *a2;
  int v9 = *sub_1DDA2A648((int *)&v17, a3);
  sub_1DDB57070((uint64_t)a1, &v17);
  unsigned int v10 = (*(uint64_t (**)(void))(*(void *)v17 + 16))(v17);
  BOOL v13 = v9 < 0 || v10 >= v9;
  if (*((void *)&v17 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v17 + 1));
  }
  *a5 = 0;
  a5[1] = 0;
  if (v13)
  {
    uint64_t v14 = *a3;
    if (v14)
    {
      unint64_t v15 = sub_1DDB9FE70(a1, *a2, v14);
      unint64_t v16 = v15;
      if (v15)
      {
        if (HIDWORD(v15))
        {
          sub_1DDA2A6DC(&v16, &v18, a2, a3, &v17);
          double result = *(double *)&v17;
          *(_OWORD *)a5 = v17;
        }
      }
    }
  }
  return result;
}

void sub_1DDB9FE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

unint64_t sub_1DDB9FE70(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  if (a3)
  {
    int v3 = a3;
    sub_1DDB57070((uint64_t)a1, &v23);
    sub_1DDA1B2DC(&v21, &v26);
    sub_1DDA1A94C(v25, &v23, (uint64_t)&v21, 0);
    if (v24) {
      sub_1DDA18310(v24);
    }
    id v5 = a1 + 1;
    sub_1DDA29F88(&v23, a1 + 1, 2);
    sub_1DDB57070((uint64_t)a1, &v21);
    uint64_t v6 = sub_1DDA19E68(v21);
    if (v22) {
      sub_1DDA18310(v22);
    }
    int v7 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 64))(a1, v6);
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    if (v7)
    {
      do
      {
        sub_1DDB57070((uint64_t)a1, &v21);
        unsigned int v10 = sub_1DDA19E68(v21);
        if (v22) {
          sub_1DDA18310(v22);
        }
        sub_1DDB57070((uint64_t)a1, &v21);
        __int16 v11 = sub_1DDA19E68(v21);
        if (v22) {
          sub_1DDA18310(v22);
        }
        int v12 = (*(uint64_t (**)(void))(*(void *)*v5 + 48))();
        if (v10 < 0xFF01) {
          break;
        }
        int v13 = v12;
        if (v10 == 65472)
        {
          sub_1DDA19DA0(*v5);
          sub_1DDB57070((uint64_t)a1, &v21);
          uint64_t v9 = sub_1DDA19E68(v21);
          if (v22) {
            sub_1DDA18310(v22);
          }
          sub_1DDB57070((uint64_t)a1, &v21);
          unsigned int v8 = sub_1DDA19E68(v21);
          if (v22) {
            sub_1DDA18310(v22);
          }
        }
        unsigned __int16 v14 = v11 - 2;
        int v3 = v3 - 4 - (unsigned __int16)(v11 - 2);
        if (v3 >= 0)
        {
          sub_1DDB57070((uint64_t)a1, &v21);
          uint64_t v15 = v21;
          unint64_t v19 = v13 + (unint64_t)v14;
          sub_1DDA1B2DC(&v20, (uint64_t *)&v19);
          (*(void (**)(uint64_t, int *, void))(*(void *)v15 + 40))(v15, &v20, 0);
          if (v22) {
            sub_1DDA18310(v22);
          }
        }
        BOOL v16 = !v8 || v9 == 0;
        BOOL v17 = v16;
      }
      while (v3 >= 5 && v17 && v10 != 65498);
    }
    sub_1DDA2A000(&v23);
    sub_1DDA1AA18(v25);
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = 0;
  }
  return v8 | (unint64_t)(v9 << 32);
}

void sub_1DDBA0100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_1DDA2A000((uint64_t *)va);
  sub_1DDA1AA18((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1DDBA0184(long long **a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  os_signpost_id_t v4 = *a1;
  if (a1[1] == *a1)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    long long v7 = *v4;
    *(_OWORD *)a3 = *v4;
    if (*((void *)&v7 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v7;
    if ((void)v7) {
      int v9 = *(_DWORD *)(v7 + 16);
    }
    else {
      int v9 = 0;
    }
    uint64_t v10 = *a1;
    if (a1[1] != *a1)
    {
      unint64_t v11 = 0;
      while (1)
      {
        long long v22 = v7;
        if (a2 > 0xA0)
        {
          uint64_t v16 = sub_1DDAD6FB0(v7);
          uint64_t v17 = sub_1DDAD6FB0(*(void *)&(*a1)[v11]);
          BOOL v18 = (int)v16 <= (int)v17 && SHIDWORD(v16) <= SHIDWORD(v17);
          unint64_t v19 = (std::__shared_weak_count *)*((void *)&v22 + 1);
          if (v18)
          {
            long long v15 = (*a1)[v11];
            uint64_t v20 = *((void *)&(*a1)[v11] + 1);
            if (!v20) {
              goto LABEL_23;
            }
LABEL_22:
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
LABEL_23:
            *(_OWORD *)a3 = v15;
            if (v19)
            {
              long long v23 = v15;
              sub_1DDA18310(v19);
              long long v15 = v23;
            }
            if (!v9) {
              int v9 = *(_DWORD *)(v15 + 16);
            }
            goto LABEL_27;
          }
          long long v15 = v22;
        }
        else
        {
          uint64_t v12 = sub_1DDAD6FB0(*(void *)&v10[v11]);
          uint64_t v13 = sub_1DDAD6FB0(v22);
          if ((int)v12 <= (int)v13 && SHIDWORD(v12) <= SHIDWORD(v13))
          {
            long long v15 = (*a1)[v11];
            uint64_t v20 = *((void *)&(*a1)[v11] + 1);
            unint64_t v19 = (std::__shared_weak_count *)*((void *)&v22 + 1);
            if (v20) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }
          long long v15 = v22;
        }
LABEL_27:
        ++v11;
        uint64_t v10 = *a1;
        long long v7 = v15;
        if (v11 >= a1[1] - *a1)
        {
          uint64_t v8 = *a3;
          break;
        }
      }
    }
    if (*(_DWORD *)(v8 + 16)) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = v9 == 0;
    }
    if (!v21) {
      *(_DWORD *)(v8 + 16) = v9;
    }
  }
}

void sub_1DDBA032C(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDBA0350(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)double result = &unk_1F3986970;
  *(void *)(result + 8) = v3;
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 0;
  return result;
}

BOOL sub_1DDBA0390(uint64_t a1, int a2)
{
  return a2 == 65496;
}

void sub_1DDBA03A0(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v10) {
      sub_1DDBA66F4((uint64_t)v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBA045C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA0470(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v11) {
      sub_1DDBA684C((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBA053C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA0550(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v11) {
      sub_1DDBA6158(v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBA061C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1DDBA0630(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (result)
  {
    double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (result && a7 != 0)
    {
      uint64_t v11 = *(unsigned int *)(a4 + 4);
      if ((v11 - 1000001) >= 0xFFF0BDC0)
      {
        LODWORD(v12) = *(_DWORD *)(a4 + 8);
        unsigned int v13 = bswap32(v12);
        if (a6) {
          uint64_t v12 = v13;
        }
        else {
          uint64_t v12 = v12;
        }
        result[19] = v12;
        result[20] = v11;
      }
    }
  }
  return result;
}

void sub_1DDBA06E4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  id v15 = a2;
  if (a1)
  {
    uint64_t v12 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v12) {
      sub_1DDBA5858((uint64_t)v12, v13, v14, a4, a5, a6, a7);
    }
  }
}

void sub_1DDBA07A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA07BC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v11) {
      sub_1DDBA6074(v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBA0888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA089C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v11) {
      sub_1DDBA5954(v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBA0968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA097C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v14 = a2;
  if (a1)
  {
    uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v10) {
      sub_1DDBA514C((uint64_t)v10, v13, v11, v12, a4, a5, a6);
    }
  }
}

void sub_1DDBA0A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA0A48(const void *a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  id v9 = a2;
  if (a1)
  {
    long long v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v7) {
      sub_1DDBA4FBC((uint64_t)v7, v8, a3, a4);
    }
  }
}

void sub_1DDBA0AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA0B10(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v10) {
      sub_1DDBA5F7C((uint64_t)v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBA0BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA0BE0(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v11 = a2;
  if (a1)
  {
    long long v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v7) {
      sub_1DDBA4DB0((uint64_t)v7, v9, v10, v8, a3, a4);
    }
  }
}

void sub_1DDBA0C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA0CA8(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = a2;
  if (a1)
  {
    uint16x8_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v10) {
      sub_1DDBA5E88(v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBA0D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA0D78(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v11) {
      sub_1DDBA5554((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBA0E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA0E54(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v11) {
      sub_1DDBA6B00((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBA0F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA0F34(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39890B8, 0);
    if (v11) {
      sub_1DDBA5260((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBA0FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA1010(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBAA4C0(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBA1088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDBA10A4(unsigned char *a1)
{
  return ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 24))(a1) & 1) != 0 || a1[194] != 0;
}

BOOL sub_1DDBA1100(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    return 1;
  }
  do
  {
    int v3 = *a2++;
    int v2 = v3;
  }
  while (v3 == 32);
  return v2 == 0;
}

uint64_t sub_1DDBA1124(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  char v3 = 0;
  if (!a3) {
    return v3 & 1;
  }
  while (1)
  {
    while (((char)*a2 & 0x80000000) == 0)
    {
      ++a2;
      if (!--a3) {
        return v3 & 1;
      }
    }
    int v4 = *a2;
    if ((v4 + 2) < 0xC2u) {
      break;
    }
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v5;
      char v7 = v5++ + 2;
    }
    while (((v4 << v7) & 0x80) != 0);
    if (a3 < v5 + 1) {
      break;
    }
    int v8 = v4 & ~(-1 << (6 - v5));
    if ((unint64_t)(v5 + 1) < 2)
    {
      unsigned int v11 = v4 & ~(-1 << (6 - v5));
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = v6 + 1;
      do
      {
        unsigned int v11 = a2[++v9] & 0x3F | (v8 << 6);
        int v8 = v11;
      }
      while (v10 != v9);
    }
    if (HIWORD(v11) > 0x10u || v11 < dword_1DDC0AFB0[v5 + 1]) {
      break;
    }
    uint64_t v13 = v5 + 1;
    a2 += v5 + 1;
    unint64_t v14 = ~v5 + a3;
    char v3 = 1;
    BOOL v15 = v13 == a3;
    a3 = v14;
    if (v15) {
      return v3 & 1;
    }
  }
  return 2;
}

unsigned __int16 *sub_1DDBA1214(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, _DWORD *a4)
{
  *a4 = 0;
  while (a3)
  {
    int v8 = *a3;
    if (v8 != 0xFFFF)
    {
      int v9 = *a2;
      do
      {
        if (v8 == v9)
        {
          int v10 = a2[1];
          if ((v10 - 1) <= 0xC && ((unsigned int v11 = a3[1], v10 == v11) || ((v11 >> v10) & 0x10) != 0))
          {
            if (!a3[2] || *((_DWORD *)a2 + 1) == a3[2])
            {
              *a4 = 0;
              return a3;
            }
            int v12 = 2;
          }
          else
          {
            int v12 = 1;
          }
          *a4 |= v12;
        }
        int v13 = a3[20];
        a3 += 20;
        int v8 = v13;
      }
      while (v13 != 0xFFFF);
    }
    if ((__int16)a3[2] != -1) {
      return 0;
    }
    uint64_t v14 = *((void *)a3 + 2);
    if (!v14) {
      return 0;
    }
    uint64_t v15 = sub_1DDBA1214(a1, a2, v14, a4);
    a3 += 20;
    if (v15) {
      return (unsigned __int16 *)v15;
    }
  }
  return a3;
}

uint64_t sub_1DDBA1314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  if (__CFADD__(a5, a4)) {
    uint64_t v6 = (a4 >> 63) + 1;
  }
  else {
    uint64_t v6 = a4 >> 63;
  }
  uint64_t v7 = v6 << 63 >> 63;
  unint64_t v15 = a5 + a4;
  if (v7 == v6 && (v7 & 0x8000000000000000) == 0)
  {
    sub_1DDB57070(a1, &v13);
    uint64_t v10 = v13;
    sub_1DDA18500(&v12, &v15);
    uint64_t v5 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)v10 + 24))(v10, a2, a3, &v12);
    if (v14) {
      sub_1DDA18310(v14);
    }
  }
  return v5;
}

void sub_1DDBA13CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDBA13E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11 = a2;
  sub_1DDA1AB9C(&__p, *(unsigned int *)(a4 + 4));
  size_t v12 = v63 - (unsigned char *)__p;
  uint64_t v13 = (unsigned int *)(a4 + 8);
  if ((unint64_t)(v63 - (unsigned char *)__p) > 4)
  {
    unsigned int v14 = bswap32(*v13);
    if (a6) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = *v13;
    }
    uint64_t v16 = sub_1DDBA1314(a1, (uint64_t)__p, v12, a5, v15);
    uint64_t v17 = __p;
    if (v16 != v63 - (unsigned char *)__p) {
      goto LABEL_25;
    }
  }
  else
  {
    memmove(__p, v13, v12);
  }
  BOOL v18 = sub_1DDBA175C(a3);
  uint64_t v23 = objc_msgSend_length(v18, v19, v20, v21, v22);

  if (v23)
  {
    BOOL v27 = sub_1DDA49F48(*(unsigned int *)(a4 + 4));
    if (*(_DWORD *)(a4 + 4))
    {
      unint64_t v28 = 0;
      do
      {
        double v29 = objc_msgSend_numberWithInt_(NSNumber, v24, *((unsigned __int8 *)__p + v28), v25, v26);
        objc_msgSend_addObject_(v27, v30, (uint64_t)v29, v31, v32);

        ++v28;
      }
      while (v28 < *(unsigned int *)(a4 + 4));
    }
    __int16 v33 = *(_WORD *)(a3 + 32);
    if ((v33 & 4) != 0)
    {
      double v34 = sub_1DDBA1778(a1);
      uint64_t v35 = sub_1DDBA17F8(a3);
      uint64_t v36 = sub_1DDA7A98C(v34, v35, 1);

      if (*(_WORD *)(a3 + 4) != 1 || (*(_WORD *)(a3 + 32) & 2) != 0)
      {
        uint64_t v40 = sub_1DDBA175C(a3);
        objc_msgSend_setObject_forKeyedSubscript_(v36, v44, (uint64_t)v27, (uint64_t)v40, v45);
      }
      else
      {
        uint64_t v61 = 0;
        uint64_t v40 = sub_1DDB6745C(v27, (const char *)&v61, v37, v38, v39);
        uint64_t v41 = sub_1DDBA175C(a3);
        objc_msgSend_setObject_forKeyedSubscript_(v36, v42, (uint64_t)v40, (uint64_t)v41, v43);
      }
      __int16 v33 = *(_WORD *)(a3 + 32);
    }
    if ((v33 & 8) != 0)
    {
      char v46 = NSString;
      uint64_t v47 = sub_1DDBA175C(a3);
      uint64_t v51 = objc_msgSend_stringWithFormat_(v46, v48, @"%@/%@", v49, v50, v11, v47);

      if (*(_WORD *)(a3 + 4) != 1 || (*(_WORD *)(a3 + 32) & 2) != 0)
      {
        uint64_t v55 = sub_1DDBA1814(a1);
        objc_msgSend_setObject_forKeyedSubscript_(v55, v59, (uint64_t)v27, (uint64_t)v51, v60);
      }
      else
      {
        uint64_t v61 = 0;
        uint64_t v55 = sub_1DDB6745C(v27, (const char *)&v61, v52, v53, v54);
        int v56 = sub_1DDBA1814(a1);
        objc_msgSend_setObject_forKeyedSubscript_(v56, v57, (uint64_t)v55, (uint64_t)v51, v58);
      }
    }
  }
  uint64_t v17 = __p;
LABEL_25:
  if (v17)
  {
    uint64_t v63 = v17;
    operator delete(v17);
  }
}

void sub_1DDBA16A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__CFString *sub_1DDBA175C(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 16);
  if (v1) {
    return (__CFString *)*v1;
  }
  else {
    return &stru_1F398F7F8;
  }
}

id sub_1DDBA1778(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 168);
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return v1;
}

void sub_1DDBA17E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBA17F8(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 8);
  if (v1) {
    return (__CFString *)*v1;
  }
  else {
    return &stru_1F398F7F8;
  }
}

id sub_1DDBA1814(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 184);
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return v1;
}

void sub_1DDBA1880(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id sub_1DDBA1894(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if (a4 > 0x2710)
  {
    unint64_t v19 = 0;
    goto LABEL_16;
  }
  sub_1DDA1AB9C(__s, a4 + 1);
  if (sub_1DDBA1314(a1, (uint64_t)__s[0], a4, a2, a3) != a4) {
    goto LABEL_11;
  }
  __s[0][a4] = 0;
  size_t v10 = strlen(__s[0]);
  __s[0][v10] = 0;
  id v11 = __s[0];
  if ((a5 & 1) == 0)
  {
    if (__s[0])
    {
      size_t v12 = __s[0];
      while (1)
      {
        int v13 = *v12;
        if (!*v12) {
          break;
        }
        ++v12;
        if (v13 != 32) {
          goto LABEL_8;
        }
      }
    }
    goto LABEL_11;
  }
LABEL_8:
  int v14 = sub_1DDBA1124(v10, (unsigned __int8 *)__s[0], v10);
  if (v14)
  {
    if (v14 != 1)
    {
LABEL_11:
      unint64_t v19 = 0;
      goto LABEL_14;
    }
    uint64_t v18 = objc_msgSend_stringWithUTF8String_(NSString, v15, (uint64_t)v11, v16, v17);
  }
  else
  {
    uint64_t v18 = objc_msgSend_stringWithCString_encoding_(NSString, v15, (uint64_t)v11, 1, v17);
  }
  unint64_t v19 = (void *)v18;
LABEL_14:
  if (__s[0])
  {
    __s[1] = __s[0];
    operator delete(__s[0]);
  }
LABEL_16:

  return v19;
}

void sub_1DDBA19D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDBA19F0(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  id v13 = a2;
  uint64_t v14 = *(unsigned int *)(a5 + 4);
  if ((v14 - 10001) < 0xFFFFD8F0) {
    goto LABEL_28;
  }
  unint64_t v15 = *(unsigned __int16 *)(a5 + 2);
  if (v15 > 0x6F) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = qword_1DDC0B020[v15];
  }
  size_t v17 = v16 * v14;
  sub_1DDBAA154(__dst, v16 * v14 + 1);
  uint64_t v18 = (_DWORD *)(a5 + 8);
  if (v17 <= 4)
  {
    uint64_t v19 = (uint64_t)memmove(__dst[0], v18, v17);
    *((unsigned char *)__dst[0] + v17) = 0;
    goto LABEL_10;
  }
  unsigned int v20 = bswap32(*v18);
  if (a7) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = *v18;
  }
  uint64_t v19 = sub_1DDBA1314(a1, (uint64_t)__dst[0], v17, a6, v21);
  *((unsigned char *)__dst[0] + v17) = 0;
  if (v19 == v17)
  {
LABEL_10:
    uint64_t v22 = __dst[0];
    if ((a4 & 1) == 0)
    {
      if (!__dst[0]) {
        goto LABEL_28;
      }
      uint64_t v23 = __dst[0];
      do
      {
        int v24 = *v23;
        if (!*v23) {
          goto LABEL_26;
        }
        ++v23;
      }
      while (v24 == 32);
    }
    int v25 = sub_1DDBA1124(v19, (unsigned __int8 *)__dst[0], v17);
    if (v25)
    {
      if (v25 != 1) {
        goto LABEL_22;
      }
      uint64_t v26 = sub_1DDBA1778(a1);
      BOOL v27 = sub_1DDBA17F8(a3);
      unint64_t v28 = sub_1DDA7A98C(v26, v27, 1);

      if (v28) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v32 = sub_1DDBA1778(a1);
      __int16 v33 = sub_1DDBA17F8(a3);
      unint64_t v28 = sub_1DDA7A98C(v32, v33, 1);

      if (v28)
      {
LABEL_20:
        double v34 = objc_msgSend_stringWithUTF8String_(NSString, v29, (uint64_t)__dst[0], v30, v31);
        uint64_t v35 = sub_1DDBA175C(a3);
        objc_msgSend_setObject_forKeyedSubscript_(v28, v36, (uint64_t)v34, (uint64_t)v35, v37);
      }
    }

LABEL_22:
    uint64_t v22 = __dst[0];
    if (v17 >= 0x33)
    {
      *(_DWORD *)((char *)__dst[0] + 45) = 3026478;
LABEL_27:
      __dst[1] = v22;
      operator delete(v22);
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  uint64_t v22 = __dst[0];
LABEL_26:
  if (v22) {
    goto LABEL_27;
  }
LABEL_28:
}

void sub_1DDBA1C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DDBA1CE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (*(_WORD *)(a4 + 2) == 2 || *(_DWORD *)(a4 + 4) <= 0x50u)
  {
    switch(*(_WORD *)(a4 + 2))
    {
      case 1:
        goto LABEL_12;
      case 2:
        __int16 v11 = *(_WORD *)(a3 + 32);
        goto LABEL_13;
      case 3:
        sub_1DDBA1F24(a1, v12, a3, a4, a5, a6);
        break;
      case 4:
        sub_1DDBA279C(a1, v12, a3, a4, a5, a6);
        break;
      case 5:
        sub_1DDBA395C(a1, v12, a3, a4, a5, a6);
        break;
      case 7:
        __int16 v11 = *(_WORD *)(a3 + 32);
        if ((v11 & 0x10) != 0) {
LABEL_13:
        }
          sub_1DDBA19F0(a1, v12, a3, (v11 & 0x20) != 0, a4, a5, a6);
        else {
LABEL_12:
        }
          sub_1DDBA13E4(a1, v12, a3, a4, a5, a6);
        break;
      case 8:
        sub_1DDBA2360(a1, v12, a3, a4, a5, a6);
        break;
      case 9:
        sub_1DDBA2BD8(a1, v12, a3, a4, a5, a6);
        break;
      case 0xA:
        sub_1DDBA3D68(a1, v12, a3, a4, a5, a6);
        break;
      case 0xB:
        sub_1DDBA3014(a1, v12, a3, a4, a5, a6);
        break;
      case 0xC:
        sub_1DDBA34B8(a1, v12, a3, a4, a5, a6);
        break;
      default:
        break;
    }
  }
}

void sub_1DDBA1EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA1F24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    unsigned int v12 = *(_DWORD *)(a4 + 4);
    if (v12 == 1)
    {
      int v13 = 0;
      goto LABEL_7;
    }
LABEL_38:
    uint64_t v29 = 0;
    goto LABEL_37;
  }
  unsigned int v12 = *(_DWORD *)(a4 + 4);
  if (v12 - 1 > 0xF423F) {
    goto LABEL_38;
  }
  int v13 = 1;
LABEL_7:
  sub_1DDA1AC54(&__dst, v12);
  int v14 = *(unsigned __int16 *)(a3 + 32);
  uint64_t v15 = *(unsigned int *)(a4 + 4);
  if (v15 <= 2)
  {
    unint64_t v16 = *(unsigned __int16 *)(a4 + 2);
    if (v16 > 0x6F) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = qword_1DDC0B020[v16];
    }
    memmove(__dst, (const void *)(a4 + 8), v17 * v15);
LABEL_15:
    uint64_t v26 = (unsigned __int16 *)__dst;
    if (a6 && v77 != __dst)
    {
      uint64_t v27 = (v77 - (unsigned char *)__dst) >> 1;
      unint64_t v28 = __dst;
      do
      {
        *unint64_t v28 = bswap32((unsigned __int16)*v28) >> 16;
        ++v28;
        --v27;
      }
      while (v27);
    }
    uint64_t v29 = *v26;
    __int16 v33 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v18, v19, v20, v21);
    if (*(_DWORD *)(a4 + 4))
    {
      unint64_t v34 = 0;
      int v35 = (v14 << 31 >> 31) & a5;
      do
      {
        uint64_t v36 = objc_msgSend_numberWithInt_(NSNumber, v30, v35 + *((unsigned __int16 *)__dst + v34), v31, v32);
        objc_msgSend_addObject_(v33, v37, (uint64_t)v36, v38, v39);

        ++v34;
      }
      while (v34 < *(unsigned int *)(a4 + 4));
    }
    uint64_t v40 = sub_1DDBA175C(a3);
    uint64_t v45 = objc_msgSend_length(v40, v41, v42, v43, v44);

    if (v45)
    {
      __int16 v46 = *(_WORD *)(a3 + 32);
      if ((v46 & 4) != 0)
      {
        uint64_t v47 = sub_1DDBA1778(a1);
        uint64_t v48 = sub_1DDBA17F8(a3);
        uint64_t v49 = sub_1DDA7A98C(v47, v48, 1);

        if (v13)
        {
          uint64_t v53 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v49, v54, (uint64_t)v33, (uint64_t)v53, v55);
        }
        else
        {
          uint64_t v75 = 0;
          uint64_t v53 = sub_1DDB6745C(v33, (const char *)&v75, v50, v51, v52);
          int v56 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v49, v57, (uint64_t)v53, (uint64_t)v56, v58);
        }
        __int16 v46 = *(_WORD *)(a3 + 32);
      }
      if ((v46 & 8) != 0)
      {
        uint64_t v59 = NSString;
        uint64_t v60 = sub_1DDBA175C(a3);
        uint64_t v64 = objc_msgSend_stringWithFormat_(v59, v61, @"%@/%@", v62, v63, v11, v60);

        if (v13)
        {
          uint64_t v68 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v68, v69, (uint64_t)v33, (uint64_t)v64, v70);
        }
        else
        {
          uint64_t v75 = 0;
          uint64_t v68 = sub_1DDB6745C(v33, (const char *)&v75, v65, v66, v67);
          int v71 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v71, v72, (uint64_t)v68, (uint64_t)v64, v73);
        }
      }
    }

    goto LABEL_35;
  }
  unsigned int v23 = *(_DWORD *)(a4 + 8);
  unsigned int v24 = bswap32(v23);
  if (a6) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = v23;
  }
  int64_t v22 = v77 - (unsigned char *)__dst;
  if (sub_1DDBA1314(a1, (uint64_t)__dst, v77 - (unsigned char *)__dst, a5, v25) == v22) {
    goto LABEL_15;
  }
  uint64_t v29 = 0;
LABEL_35:
  if (__dst)
  {
    unsigned int v77 = __dst;
    operator delete(__dst);
  }
LABEL_37:

  return v29;
}

void sub_1DDBA2294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA2360(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    unsigned int v12 = *(_DWORD *)(a4 + 4);
    if (v12 == 1)
    {
      int v13 = 0;
      goto LABEL_7;
    }
LABEL_38:
    __int16 v29 = 0;
    goto LABEL_37;
  }
  unsigned int v12 = *(_DWORD *)(a4 + 4);
  if (v12 - 1 > 0xF423F) {
    goto LABEL_38;
  }
  int v13 = 1;
LABEL_7:
  sub_1DDA4A3A0(&__dst, v12);
  int v14 = *(unsigned __int16 *)(a3 + 32);
  uint64_t v15 = *(unsigned int *)(a4 + 4);
  if (v15 <= 2)
  {
    unint64_t v16 = *(unsigned __int16 *)(a4 + 2);
    if (v16 > 0x6F) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = qword_1DDC0B020[v16];
    }
    memmove(__dst, (const void *)(a4 + 8), v17 * v15);
LABEL_15:
    uint64_t v26 = (__int16 *)__dst;
    if (a6 && v77 != __dst)
    {
      uint64_t v27 = (v77 - (unsigned char *)__dst) >> 1;
      unint64_t v28 = __dst;
      do
      {
        *unint64_t v28 = bswap32((unsigned __int16)*v28) >> 16;
        ++v28;
        --v27;
      }
      while (v27);
    }
    __int16 v29 = *v26;
    __int16 v33 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v18, v19, v20, v21);
    if (*(_DWORD *)(a4 + 4))
    {
      unint64_t v34 = 0;
      int v35 = (v14 << 31 >> 31) & a5;
      do
      {
        uint64_t v36 = objc_msgSend_numberWithInt_(NSNumber, v30, (v35 + *((__int16 *)__dst + v34)), v31, v32);
        objc_msgSend_addObject_(v33, v37, (uint64_t)v36, v38, v39);

        ++v34;
      }
      while (v34 < *(unsigned int *)(a4 + 4));
    }
    uint64_t v40 = sub_1DDBA175C(a3);
    uint64_t v45 = objc_msgSend_length(v40, v41, v42, v43, v44);

    if (v45)
    {
      __int16 v46 = *(_WORD *)(a3 + 32);
      if ((v46 & 4) != 0)
      {
        uint64_t v47 = sub_1DDBA1778(a1);
        uint64_t v48 = sub_1DDBA17F8(a3);
        uint64_t v49 = sub_1DDA7A98C(v47, v48, 1);

        if (v13)
        {
          uint64_t v53 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v49, v54, (uint64_t)v33, (uint64_t)v53, v55);
        }
        else
        {
          uint64_t v75 = 0;
          uint64_t v53 = sub_1DDB6745C(v33, (const char *)&v75, v50, v51, v52);
          int v56 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v49, v57, (uint64_t)v53, (uint64_t)v56, v58);
        }
        __int16 v46 = *(_WORD *)(a3 + 32);
      }
      if ((v46 & 8) != 0)
      {
        uint64_t v59 = NSString;
        uint64_t v60 = sub_1DDBA175C(a3);
        uint64_t v64 = objc_msgSend_stringWithFormat_(v59, v61, @"%@/%@", v62, v63, v11, v60);

        if (v13)
        {
          uint64_t v68 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v68, v69, (uint64_t)v33, (uint64_t)v64, v70);
        }
        else
        {
          uint64_t v75 = 0;
          uint64_t v68 = sub_1DDB6745C(v33, (const char *)&v75, v65, v66, v67);
          int v71 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v71, v72, (uint64_t)v68, (uint64_t)v64, v73);
        }
      }
    }

    goto LABEL_35;
  }
  unsigned int v23 = *(_DWORD *)(a4 + 8);
  unsigned int v24 = bswap32(v23);
  if (a6) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = v23;
  }
  int64_t v22 = v77 - (unsigned char *)__dst;
  if (sub_1DDBA1314(a1, (uint64_t)__dst, v77 - (unsigned char *)__dst, a5, v25) == v22) {
    goto LABEL_15;
  }
  __int16 v29 = 0;
LABEL_35:
  if (__dst)
  {
    unsigned int v77 = __dst;
    operator delete(__dst);
  }
LABEL_37:

  return v29;
}

void sub_1DDBA26D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA279C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    unsigned int v12 = *(_DWORD *)(a4 + 4);
    if (v12 == 1)
    {
      int v13 = 0;
      goto LABEL_7;
    }
LABEL_40:
    uint64_t v29 = 0;
    goto LABEL_39;
  }
  unsigned int v12 = *(_DWORD *)(a4 + 4);
  if (v12 - 1 > 0xF423F) {
    goto LABEL_40;
  }
  int v13 = 1;
LABEL_7:
  sub_1DDA1AD40(&__dst, v12);
  __int16 v14 = *(_WORD *)(a3 + 32);
  uint64_t v15 = *(unsigned int *)(a4 + 4);
  if (v15 <= 1)
  {
    unint64_t v16 = *(unsigned __int16 *)(a4 + 2);
    if (v16 > 0x6F) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = qword_1DDC0B020[v16];
    }
    memmove(__dst, (const void *)(a4 + 8), v17 * v15);
LABEL_15:
    uint64_t v26 = (unsigned int *)__dst;
    if (a6 && v77 != __dst)
    {
      uint64_t v27 = (v77 - (unsigned char *)__dst) >> 2;
      unint64_t v28 = (unsigned int *)__dst;
      do
      {
        *unint64_t v28 = bswap32(*v28);
        ++v28;
        --v27;
      }
      while (v27);
    }
    uint64_t v29 = *v26;
    __int16 v33 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v18, v19, v20, v21);
    if (*(_DWORD *)(a4 + 4))
    {
      unint64_t v34 = 0;
      if (v14) {
        uint64_t v35 = (int)a5;
      }
      else {
        uint64_t v35 = 0;
      }
      do
      {
        uint64_t v36 = objc_msgSend_numberWithLongLong_(NSNumber, v30, v35 + *((unsigned int *)__dst + v34), v31, v32);
        objc_msgSend_addObject_(v33, v37, (uint64_t)v36, v38, v39);

        ++v34;
      }
      while (v34 < *(unsigned int *)(a4 + 4));
    }
    uint64_t v40 = sub_1DDBA175C(a3);
    uint64_t v45 = objc_msgSend_length(v40, v41, v42, v43, v44);

    if (v45)
    {
      __int16 v46 = *(_WORD *)(a3 + 32);
      if ((v46 & 4) != 0)
      {
        uint64_t v47 = sub_1DDBA1778(a1);
        uint64_t v48 = sub_1DDBA17F8(a3);
        uint64_t v49 = sub_1DDA7A98C(v47, v48, 1);

        if (v13)
        {
          uint64_t v53 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v49, v54, (uint64_t)v33, (uint64_t)v53, v55);
        }
        else
        {
          uint64_t v75 = 0;
          uint64_t v53 = sub_1DDB6745C(v33, (const char *)&v75, v50, v51, v52);
          int v56 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v49, v57, (uint64_t)v53, (uint64_t)v56, v58);
        }
        __int16 v46 = *(_WORD *)(a3 + 32);
      }
      if ((v46 & 8) != 0)
      {
        uint64_t v59 = NSString;
        uint64_t v60 = sub_1DDBA175C(a3);
        uint64_t v64 = objc_msgSend_stringWithFormat_(v59, v61, @"%@/%@", v62, v63, v11, v60);

        if (v13)
        {
          uint64_t v68 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v68, v69, (uint64_t)v33, (uint64_t)v64, v70);
        }
        else
        {
          uint64_t v75 = 0;
          uint64_t v68 = sub_1DDB6745C(v33, (const char *)&v75, v65, v66, v67);
          int v71 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v71, v72, (uint64_t)v68, (uint64_t)v64, v73);
        }
      }
    }

    goto LABEL_37;
  }
  unsigned int v23 = *(_DWORD *)(a4 + 8);
  unsigned int v24 = bswap32(v23);
  if (a6) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = v23;
  }
  int64_t v22 = v77 - (unsigned char *)__dst;
  if (sub_1DDBA1314(a1, (uint64_t)__dst, v77 - (unsigned char *)__dst, a5, v25) == v22) {
    goto LABEL_15;
  }
  uint64_t v29 = 0;
LABEL_37:
  if (__dst)
  {
    unsigned int v77 = __dst;
    operator delete(__dst);
  }
LABEL_39:

  return v29;
}

void sub_1DDBA2B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA2BD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    unsigned int v12 = *(_DWORD *)(a4 + 4);
    if (v12 == 1)
    {
      int v13 = 0;
      goto LABEL_7;
    }
LABEL_40:
    uint64_t v29 = 0;
    goto LABEL_39;
  }
  unsigned int v12 = *(_DWORD *)(a4 + 4);
  if (v12 - 1 > 0xF423F) {
    goto LABEL_40;
  }
  int v13 = 1;
LABEL_7:
  sub_1DDA4A844(&__dst, v12);
  __int16 v14 = *(_WORD *)(a3 + 32);
  uint64_t v15 = *(unsigned int *)(a4 + 4);
  if (v15 <= 1)
  {
    unint64_t v16 = *(unsigned __int16 *)(a4 + 2);
    if (v16 > 0x6F) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = qword_1DDC0B020[v16];
    }
    memmove(__dst, (const void *)(a4 + 8), v17 * v15);
LABEL_15:
    uint64_t v26 = (unsigned int *)__dst;
    if (a6 && v77 != __dst)
    {
      uint64_t v27 = (v77 - (unsigned char *)__dst) >> 2;
      unint64_t v28 = (unsigned int *)__dst;
      do
      {
        *unint64_t v28 = bswap32(*v28);
        ++v28;
        --v27;
      }
      while (v27);
    }
    uint64_t v29 = *v26;
    __int16 v33 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v18, v19, v20, v21);
    if (*(_DWORD *)(a4 + 4))
    {
      unint64_t v34 = 0;
      if (v14) {
        uint64_t v35 = (int)a5;
      }
      else {
        uint64_t v35 = 0;
      }
      do
      {
        uint64_t v36 = objc_msgSend_numberWithLongLong_(NSNumber, v30, v35 + *((int *)__dst + v34), v31, v32);
        objc_msgSend_addObject_(v33, v37, (uint64_t)v36, v38, v39);

        ++v34;
      }
      while (v34 < *(unsigned int *)(a4 + 4));
    }
    uint64_t v40 = sub_1DDBA175C(a3);
    uint64_t v45 = objc_msgSend_length(v40, v41, v42, v43, v44);

    if (v45)
    {
      __int16 v46 = *(_WORD *)(a3 + 32);
      if ((v46 & 4) != 0)
      {
        uint64_t v47 = sub_1DDBA1778(a1);
        uint64_t v48 = sub_1DDBA17F8(a3);
        uint64_t v49 = sub_1DDA7A98C(v47, v48, 1);

        if (v13)
        {
          uint64_t v53 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v49, v54, (uint64_t)v33, (uint64_t)v53, v55);
        }
        else
        {
          uint64_t v75 = 0;
          uint64_t v53 = sub_1DDB6745C(v33, (const char *)&v75, v50, v51, v52);
          int v56 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v49, v57, (uint64_t)v53, (uint64_t)v56, v58);
        }
        __int16 v46 = *(_WORD *)(a3 + 32);
      }
      if ((v46 & 8) != 0)
      {
        uint64_t v59 = NSString;
        uint64_t v60 = sub_1DDBA175C(a3);
        uint64_t v64 = objc_msgSend_stringWithFormat_(v59, v61, @"%@/%@", v62, v63, v11, v60);

        if (v13)
        {
          uint64_t v68 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v68, v69, (uint64_t)v33, (uint64_t)v64, v70);
        }
        else
        {
          uint64_t v75 = 0;
          uint64_t v68 = sub_1DDB6745C(v33, (const char *)&v75, v65, v66, v67);
          int v71 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v71, v72, (uint64_t)v68, (uint64_t)v64, v73);
        }
      }
    }

    goto LABEL_37;
  }
  unsigned int v23 = *(_DWORD *)(a4 + 8);
  unsigned int v24 = bswap32(v23);
  if (a6) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = v23;
  }
  int64_t v22 = v77 - (unsigned char *)__dst;
  if (sub_1DDBA1314(a1, (uint64_t)__dst, v77 - (unsigned char *)__dst, a5, v25) == v22) {
    goto LABEL_15;
  }
  uint64_t v29 = 0;
LABEL_37:
  if (__dst)
  {
    unsigned int v77 = __dst;
    operator delete(__dst);
  }
LABEL_39:

  return v29;
}

void sub_1DDBA2F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

float sub_1DDBA3014(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v15 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    if (*(_DWORD *)(a4 + 4) == 1)
    {
      int v16 = 0;
      goto LABEL_7;
    }
LABEL_41:
    float v50 = 0.0;
    goto LABEL_40;
  }
  if ((*(_DWORD *)(a4 + 4) - 1) > 0xF423F) {
    goto LABEL_41;
  }
  int v16 = 1;
LABEL_7:
  uint64_t v20 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v11, v12, v13, v14);
  unint64_t v22 = *(unsigned int *)(a4 + 4);
  unint64_t v23 = *(unsigned __int16 *)(a4 + 2);
  if (v23 > 0x6F) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = qword_1DDC0B020[v23];
  }
  if (v24 * v22 == 4)
  {
    unsigned int v25 = *(_DWORD *)(a4 + 8);
    unsigned int v26 = bswap32(v25);
    if (a6) {
      unsigned int v25 = v26;
    }
    float v27 = *(float *)&v25;
    LODWORD(v21) = v25;
    unint64_t v28 = objc_msgSend_numberWithFloat_(NSNumber, (const char *)v22, v17, v18, v19, v21);
    objc_msgSend_addObject_(v20, v29, (uint64_t)v28, v30, v31);

    goto LABEL_27;
  }
  sub_1DDA1AD40(&__p, v22);
  int64_t v32 = (char *)v87 - (unsigned char *)__p;
  unsigned int v33 = *(_DWORD *)(a4 + 8);
  unsigned int v34 = bswap32(v33);
  if (a6) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = v33;
  }
  uint64_t v40 = sub_1DDBA1314(a1, (uint64_t)__p, (char *)v87 - (unsigned char *)__p, a5, v35);
  uint64_t v42 = (float *)__p;
  if (v40 == v32)
  {
    if (a6 && v87 != __p)
    {
      uint64_t v43 = ((char *)v87 - (unsigned char *)__p) >> 2;
      uint64_t v44 = (unsigned int *)__p;
      do
      {
        *uint64_t v44 = bswap32(*v44);
        ++v44;
        --v43;
      }
      while (v43);
    }
    float v27 = *v42;
    if (!*(_DWORD *)(a4 + 4)) {
      goto LABEL_25;
    }
    unint64_t v45 = 0;
    do
    {
      LODWORD(v41) = *((_DWORD *)__p + v45);
      __int16 v46 = objc_msgSend_numberWithFloat_(NSNumber, v36, v37, v38, v39, v41);
      objc_msgSend_addObject_(v20, v47, (uint64_t)v46, v48, v49);

      ++v45;
    }
    while (v45 < *(unsigned int *)(a4 + 4));
    uint64_t v42 = (float *)__p;
    if (__p) {
      goto LABEL_25;
    }
  }
  else
  {
    float v27 = 0.0;
    if (__p)
    {
LABEL_25:
      uint64_t v87 = v42;
      operator delete(v42);
    }
  }
  float v50 = 0.0;
  if (v40 == v32)
  {
LABEL_27:
    uint64_t v51 = sub_1DDBA175C(a3);
    uint64_t v56 = objc_msgSend_length(v51, v52, v53, v54, v55);

    if (v56)
    {
      __int16 v57 = *(_WORD *)(a3 + 32);
      if ((v57 & 4) != 0)
      {
        uint64_t v58 = sub_1DDBA1778(a1);
        uint64_t v59 = sub_1DDBA17F8(a3);
        uint64_t v60 = sub_1DDA7A98C(v58, v59, 1);

        if (v16)
        {
          uint64_t v64 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v60, v65, (uint64_t)v20, (uint64_t)v64, v66);
        }
        else
        {
          long long __p = 0;
          uint64_t v64 = sub_1DDB6745C(v20, (const char *)&__p, v61, v62, v63);
          uint64_t v67 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v60, v68, (uint64_t)v64, (uint64_t)v67, v69);
        }
        __int16 v57 = *(_WORD *)(a3 + 32);
      }
      if ((v57 & 8) != 0)
      {
        uint64_t v70 = NSString;
        int v71 = sub_1DDBA175C(a3);
        uint64_t v75 = objc_msgSend_stringWithFormat_(v70, v72, @"%@/%@", v73, v74, v15, v71);

        if (v16)
        {
          unint64_t v79 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v79, v80, (uint64_t)v20, (uint64_t)v75, v81);
        }
        else
        {
          long long __p = 0;
          unint64_t v79 = sub_1DDB6745C(v20, (const char *)&__p, v76, v77, v78);
          uint64_t v82 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v82, v83, (uint64_t)v79, (uint64_t)v75, v84);
        }
      }
    }
    float v50 = v27;
  }

LABEL_40:
  return v50;
}

void sub_1DDBA33C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

double sub_1DDBA34B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v15 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    if (*(_DWORD *)(a4 + 4) == 1)
    {
      int v16 = 0;
      goto LABEL_7;
    }
LABEL_42:
    double v48 = 0.0;
    goto LABEL_41;
  }
  if ((*(_DWORD *)(a4 + 4) - 1) > 0xF423F) {
    goto LABEL_42;
  }
  int v16 = 1;
LABEL_7:
  uint64_t v20 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v11, v12, v13, v14);
  unint64_t v21 = *(unsigned int *)(a4 + 4);
  unint64_t v22 = *(unsigned __int16 *)(a4 + 2);
  if (v22 > 0x6F) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = qword_1DDC0B020[v22];
  }
  if (v23 * v21 == 4)
  {
    LODWORD(v24) = *(_DWORD *)(a4 + 8);
    unsigned int v25 = bswap32(LODWORD(v24));
    if (a6) {
      *(void *)&double v24 = v25;
    }
    else {
      *(void *)&double v24 = LODWORD(v24);
    }
    double v26 = v24;
    float v27 = objc_msgSend_numberWithDouble_(NSNumber, (const char *)v21, v17, v18, v19, v24);
    objc_msgSend_addObject_(v20, v28, (uint64_t)v27, v29, v30);

    goto LABEL_28;
  }
  sub_1DDBAA7D0(&__p, v21);
  int64_t v31 = (char *)v85 - (unsigned char *)__p;
  unsigned int v32 = *(_DWORD *)(a4 + 8);
  unsigned int v33 = bswap32(v32);
  if (a6) {
    uint64_t v34 = v33;
  }
  else {
    uint64_t v34 = v32;
  }
  uint64_t v39 = sub_1DDBA1314(a1, (uint64_t)__p, (char *)v85 - (unsigned char *)__p, a5, v34);
  uint64_t v40 = (double *)__p;
  if (v39 == v31)
  {
    if (a6 && v85 != __p)
    {
      uint64_t v41 = ((char *)v85 - (unsigned char *)__p) >> 3;
      uint64_t v42 = (unint64_t *)__p;
      do
      {
        *uint64_t v42 = bswap64(*v42);
        ++v42;
        --v41;
      }
      while (v41);
    }
    double v26 = *v40;
    if (!*(_DWORD *)(a4 + 4)) {
      goto LABEL_26;
    }
    unint64_t v43 = 0;
    do
    {
      uint64_t v44 = objc_msgSend_numberWithDouble_(NSNumber, v35, v36, v37, v38, *((double *)__p + v43));
      objc_msgSend_addObject_(v20, v45, (uint64_t)v44, v46, v47);

      ++v43;
    }
    while (v43 < *(unsigned int *)(a4 + 4));
    uint64_t v40 = (double *)__p;
    if (__p) {
      goto LABEL_26;
    }
  }
  else
  {
    double v26 = 0.0;
    if (__p)
    {
LABEL_26:
      uint64_t v85 = v40;
      operator delete(v40);
    }
  }
  double v48 = 0.0;
  if (v39 == v31)
  {
LABEL_28:
    uint64_t v49 = sub_1DDBA175C(a3);
    uint64_t v54 = objc_msgSend_length(v49, v50, v51, v52, v53);

    if (v54)
    {
      __int16 v55 = *(_WORD *)(a3 + 32);
      if ((v55 & 4) != 0)
      {
        uint64_t v56 = sub_1DDBA1778(a1);
        __int16 v57 = sub_1DDBA17F8(a3);
        uint64_t v58 = sub_1DDA7A98C(v56, v57, 1);

        if (v16)
        {
          uint64_t v62 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v58, v63, (uint64_t)v20, (uint64_t)v62, v64);
        }
        else
        {
          long long __p = 0;
          uint64_t v62 = sub_1DDB6745C(v20, (const char *)&__p, v59, v60, v61);
          uint64_t v65 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v58, v66, (uint64_t)v62, (uint64_t)v65, v67);
        }
        __int16 v55 = *(_WORD *)(a3 + 32);
      }
      if ((v55 & 8) != 0)
      {
        uint64_t v68 = NSString;
        uint64_t v69 = sub_1DDBA175C(a3);
        uint64_t v73 = objc_msgSend_stringWithFormat_(v68, v70, @"%@/%@", v71, v72, v15, v69);

        if (v16)
        {
          uint64_t v77 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v77, v78, (uint64_t)v20, (uint64_t)v73, v79);
        }
        else
        {
          long long __p = 0;
          uint64_t v77 = sub_1DDB6745C(v20, (const char *)&__p, v74, v75, v76);
          long long v80 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v80, v81, (uint64_t)v77, (uint64_t)v73, v82);
        }
      }
    }
    double v48 = v26;
  }

LABEL_41:
  return v48;
}

void sub_1DDBA3864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

double sub_1DDBA395C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11 = a2;
  if (*(_WORD *)(a3 + 4) != 1 || (*(_WORD *)(a3 + 32) & 2) != 0)
  {
    int v12 = *(_DWORD *)(a4 + 4);
    if ((v12 - 1) <= 0xF423F)
    {
      int v13 = 1;
      goto LABEL_7;
    }
LABEL_39:
    double v32 = 0.0;
    goto LABEL_38;
  }
  int v12 = *(_DWORD *)(a4 + 4);
  if (v12 != 1) {
    goto LABEL_39;
  }
  int v13 = 0;
LABEL_7:
  sub_1DDA1AD40(&__p, (2 * v12));
  unsigned int v15 = *(_DWORD *)(a4 + 8);
  unsigned int v16 = bswap32(v15);
  if (a6) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = v15;
  }
  int64_t v14 = v76 - (unsigned char *)__p;
  if (sub_1DDBA1314(a1, (uint64_t)__p, v76 - (unsigned char *)__p, a5, v17) == v14)
  {
    double v26 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v18, v19, v20, v21);
    if (a6)
    {
      unint64_t v28 = (unsigned int *)__p;
      if (v76 != __p)
      {
        uint64_t v29 = (v76 - (unsigned char *)__p) >> 2;
        do
        {
          *unint64_t v28 = bswap32(*v28);
          ++v28;
          --v29;
        }
        while (v29);
      }
    }
    if (*(_DWORD *)(a4 + 4))
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      double v32 = 0.0;
      do
      {
        unsigned int v33 = *(_DWORD *)((char *)__p + v30);
        double v34 = 0.0;
        if (v33)
        {
          LODWORD(v27) = *(_DWORD *)((char *)__p + v30 + 4);
          double v34 = (double)v33 / (double)v27;
        }
        if (!v31) {
          double v32 = v34;
        }
        *(float *)&double v34 = v34;
        uint64_t v35 = objc_msgSend_numberWithFloat_(NSNumber, v22, v23, v24, v25, v34);
        objc_msgSend_addObject_(v26, v36, (uint64_t)v35, v37, v38);

        ++v31;
        v30 += 8;
      }
      while (v31 < *(unsigned int *)(a4 + 4));
    }
    else
    {
      double v32 = 0.0;
    }
    uint64_t v39 = sub_1DDBA175C(a3);
    uint64_t v44 = objc_msgSend_length(v39, v40, v41, v42, v43);

    if (v44)
    {
      __int16 v45 = *(_WORD *)(a3 + 32);
      if ((v45 & 4) != 0)
      {
        uint64_t v46 = sub_1DDBA1778(a1);
        uint64_t v47 = sub_1DDBA17F8(a3);
        double v48 = sub_1DDA7A98C(v46, v47, 1);

        if (v13)
        {
          uint64_t v52 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v48, v53, (uint64_t)v26, (uint64_t)v52, v54);
        }
        else
        {
          uint64_t v74 = 0;
          uint64_t v52 = sub_1DDB6745C(v26, (const char *)&v74, v49, v50, v51);
          __int16 v55 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v48, v56, (uint64_t)v52, (uint64_t)v55, v57);
        }
        __int16 v45 = *(_WORD *)(a3 + 32);
      }
      if ((v45 & 8) != 0)
      {
        uint64_t v58 = NSString;
        uint64_t v59 = sub_1DDBA175C(a3);
        uint64_t v63 = objc_msgSend_stringWithFormat_(v58, v60, @"%@/%@", v61, v62, v11, v59);

        if (v13)
        {
          uint64_t v67 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v67, v68, (uint64_t)v26, (uint64_t)v63, v69);
        }
        else
        {
          uint64_t v74 = 0;
          uint64_t v67 = sub_1DDB6745C(v26, (const char *)&v74, v64, v65, v66);
          uint64_t v70 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v70, v71, (uint64_t)v67, (uint64_t)v63, v72);
        }
      }
    }
  }
  else
  {
    double v32 = 0.0;
  }
  if (__p)
  {
    uint64_t v76 = __p;
    operator delete(__p);
  }
LABEL_38:

  return v32;
}

void sub_1DDBA3CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

double sub_1DDBA3D68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11 = a2;
  if (*(_WORD *)(a3 + 4) != 1 || (*(_WORD *)(a3 + 32) & 2) != 0)
  {
    int v12 = *(_DWORD *)(a4 + 4);
    if ((v12 - 1) <= 0xF423F)
    {
      int v13 = 1;
      goto LABEL_7;
    }
LABEL_39:
    double v31 = 0.0;
    goto LABEL_38;
  }
  int v12 = *(_DWORD *)(a4 + 4);
  if (v12 != 1) {
    goto LABEL_39;
  }
  int v13 = 0;
LABEL_7:
  sub_1DDA4A844(&__p, (2 * v12));
  unsigned int v15 = *(_DWORD *)(a4 + 8);
  unsigned int v16 = bswap32(v15);
  if (a6) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = v15;
  }
  int64_t v14 = v75 - (unsigned char *)__p;
  if (sub_1DDBA1314(a1, (uint64_t)__p, v75 - (unsigned char *)__p, a5, v17) == v14)
  {
    double v26 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v18, v19, v20, v21);
    if (a6)
    {
      unint64_t v27 = (unsigned int *)__p;
      if (v75 != __p)
      {
        uint64_t v28 = (v75 - (unsigned char *)__p) >> 2;
        do
        {
          *unint64_t v27 = bswap32(*v27);
          ++v27;
          --v28;
        }
        while (v28);
      }
    }
    if (*(_DWORD *)(a4 + 4))
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      double v31 = 0.0;
      do
      {
        int v32 = *(_DWORD *)((char *)__p + v29);
        double v33 = 0.0;
        if (v32) {
          double v33 = (double)v32 / (double)*(int *)((char *)__p + v29 + 4);
        }
        if (!v30) {
          double v31 = v33;
        }
        *(float *)&double v33 = v33;
        double v34 = objc_msgSend_numberWithFloat_(NSNumber, v22, v23, v24, v25, v33);
        objc_msgSend_addObject_(v26, v35, (uint64_t)v34, v36, v37);

        ++v30;
        v29 += 8;
      }
      while (v30 < *(unsigned int *)(a4 + 4));
    }
    else
    {
      double v31 = 0.0;
    }
    uint64_t v38 = sub_1DDBA175C(a3);
    uint64_t v43 = objc_msgSend_length(v38, v39, v40, v41, v42);

    if (v43)
    {
      __int16 v44 = *(_WORD *)(a3 + 32);
      if ((v44 & 4) != 0)
      {
        __int16 v45 = sub_1DDBA1778(a1);
        uint64_t v46 = sub_1DDBA17F8(a3);
        uint64_t v47 = sub_1DDA7A98C(v45, v46, 1);

        if (v13)
        {
          uint64_t v51 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v47, v52, (uint64_t)v26, (uint64_t)v51, v53);
        }
        else
        {
          uint64_t v73 = 0;
          uint64_t v51 = sub_1DDB6745C(v26, (const char *)&v73, v48, v49, v50);
          uint64_t v54 = sub_1DDBA175C(a3);
          objc_msgSend_setObject_forKeyedSubscript_(v47, v55, (uint64_t)v51, (uint64_t)v54, v56);
        }
        __int16 v44 = *(_WORD *)(a3 + 32);
      }
      if ((v44 & 8) != 0)
      {
        uint64_t v57 = NSString;
        uint64_t v58 = sub_1DDBA175C(a3);
        uint64_t v62 = objc_msgSend_stringWithFormat_(v57, v59, @"%@/%@", v60, v61, v11, v58);

        if (v13)
        {
          uint64_t v66 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v66, v67, (uint64_t)v26, (uint64_t)v62, v68);
        }
        else
        {
          uint64_t v73 = 0;
          uint64_t v66 = sub_1DDB6745C(v26, (const char *)&v73, v63, v64, v65);
          uint64_t v69 = sub_1DDBA1814(a1);
          objc_msgSend_setObject_forKeyedSubscript_(v69, v70, (uint64_t)v66, (uint64_t)v62, v71);
        }
      }
    }
  }
  else
  {
    double v31 = 0.0;
  }
  if (__p)
  {
    uint64_t v75 = __p;
    operator delete(__p);
  }
LABEL_38:

  return v31;
}

void sub_1DDBA40B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA4174(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t, void))
{
  id v7 = a2;
  int v12 = v7;
  if (!a4)
  {
    a3 = 0;
    if (!v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (!a3)
  {
    while (1)
    {
      int v13 = a4(a1, (unsigned __int16)a3);

      if (!v13) {
        break;
      }
      a3 = (a3 + 1);
    }
  }
  if (v12) {
LABEL_9:
  }
    objc_msgSend_length(v12, v8, v9, v10, v11);
LABEL_10:
  if (a3)
  {
    int v14 = 0;
    do
    {
      unsigned int v15 = a4(a1, (unsigned __int16)v14);

      if (v15)
      {
        unsigned int v16 = a4(a1, (unsigned __int16)v14);
        objc_msgSend_length(v16, v17, v18, v19, v20);
      }
      ++v14;
    }
    while (a3 != v14);
  }

  return a3;
}

void sub_1DDBA424C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA4270(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  if (v1 >= 1)
  {
    char v3 = sub_1DDBA1778(a1);
    int v4 = sub_1DDA7A98C(v3, (void *)*MEMORY[0x1E4F2F6D8], 0);

    uint64_t v39 = v4;
    uint64_t v5 = sub_1DDADAF54(v4, @"AFInfo");
    if (!v5 || (int v6 = *(_DWORD *)(a1 + 64)) == 0 || (v7 = *(_DWORD *)(a1 + 68)) == 0)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    float v41 = (float)v7;
    float v42 = (float)v6;
    uint64_t v40 = 0;
    int v12 = (*(uint64_t (**)(uint64_t, char *, uint64_t *, float *, float *))(*(void *)a1 + 192))(a1, (char *)&v40 + 4, &v40, &v42, &v41);
    uint64_t v14 = 0;
    if (v1 >> 4 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v1 >> 4;
    }
    while (1)
    {
      unsigned int v16 = (int *)(*(void *)(a1 + 72) + 16 * v14);
      float v17 = (float)*v16;
      float v18 = (float)v16[1];
      int v19 = v16[2];
      int v20 = v16[3];
      float v21 = (float)v19;
      float v22 = (float)v20;
      if (!v12) {
        goto LABEL_12;
      }
      if ((float)(vabds_f32(v17, (float)SHIDWORD(v40)) + (float)(fabsf(v21) * 0.5)) <= (float)(v42 * 0.5)
        && (float)(vabds_f32(v18, (float)(int)v40) + (float)(fabsf(v22) * 0.5)) <= (float)(v41 * 0.5))
      {
        break;
      }
LABEL_34:
      if (++v14 == v15)
      {

        return;
      }
    }
    float v17 = v17 - (float)SHIDWORD(v40);
    float v18 = v18 - (float)(int)v40;
LABEL_12:
    if (v19) {
      BOOL v23 = v20 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (!v23)
    {
      uint64_t v24 = 0;
      void v43[2] = v21 / v42;
      v43[3] = v22 / v41;
      v43[0] = (float)((float)(v17 / v42) + 0.5) - (float)((float)(v21 / v42) * 0.5);
      v43[1] = (float)((float)(v18 / v41) + 0.5) - (float)((float)(v22 / v41) * 0.5);
      do
      {
        *(float *)&double v13 = v43[v24];
        uint64_t v25 = objc_msgSend_numberWithFloat_(NSNumber, v8, v9, v10, v11, v13, v39);
        objc_msgSend_addObject_(v5, v26, (uint64_t)v25, v27, v28);

        ++v24;
      }
      while (v24 != 4);
      if (v14 == (int)v14)
      {
        int v32 = *(_DWORD **)(a1 + 120);
        double v31 = *(_DWORD **)(a1 + 128);
        if (v32 == v31)
        {
          int v29 = 0;
        }
        else
        {
          while (*v32 != v14)
          {
            if (++v32 == v31)
            {
              int v32 = *(_DWORD **)(a1 + 128);
              break;
            }
          }
          int v29 = v32 != v31;
        }
        double v33 = *(_DWORD **)(a1 + 96);
        unint64_t v30 = *(_DWORD **)(a1 + 104);
        if (v33 == v30)
        {
          unint64_t v30 = *(_DWORD **)(a1 + 96);
        }
        else
        {
          while (*v33 != v14)
          {
            if (++v33 == v30) {
              goto LABEL_29;
            }
          }
        }
      }
      else
      {
        int v29 = 0;
        unint64_t v30 = *(_DWORD **)(a1 + 104);
LABEL_29:
        double v33 = v30;
      }
      if (v33 != v30) {
        v29 |= 2u;
      }
      double v34 = objc_msgSend_stringWithUTF8String_(NSString, v8, (uint64_t)off_1E6D06220[v29], v10, v11);
      objc_msgSend_addObject_(v5, v35, (uint64_t)v34, v36, v37);
    }
    goto LABEL_34;
  }
}

void sub_1DDBA45D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA463C(uint64_t a1)
{
  int v2 = sub_1DDBA1778(a1);
  sub_1DDA2E3A8(v2, @"{LensInfo}", 0);
  id v23 = (id)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    float v6 = sub_1DDBA477C(v23, (const char *)@"_MinFocalLength", v3, v4, v5);
    float v10 = sub_1DDBA477C(v23, (const char *)@"_MaxFocalLength", v7, v8, v9);
    float v14 = sub_1DDBA477C(v23, (const char *)@"_MaxApertureAtMinFocalLength", v11, v12, v13);
    float v18 = sub_1DDBA477C(v23, (const char *)@"_MaxApertureAtMaxFocalLength", v15, v16, v17);
    sub_1DDBA47CC(a1, v6, v10, v14, v18);
  }
  int v19 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v19, v20, @"{LensInfo}", v21, v22);
}

void sub_1DDBA4740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA4774()
{
}

float sub_1DDBA477C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = sub_1DDA357A8(a1, a2, a3, a4, a5);
  objc_msgSend_floatValue(v5, v6, v7, v8, v9);
  float v11 = v10;

  return v11;
}

void sub_1DDBA47BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA47CC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (a2 > 0.0 && a3 > 0.0)
  {
    uint64_t v9 = sub_1DDBA1778(a1);
    sub_1DDA7A98C(v9, (void *)*MEMORY[0x1E4F2F6D8], 0);
    id v43 = (id)objc_claimAutoreleasedReturnValue();

    float v10 = sub_1DDBA57C0(v43, (void *)*MEMORY[0x1E4F2F700]);
    uint64_t v15 = objc_msgSend_numberWithDouble_(NSNumber, v11, v12, v13, v14, a2);
    objc_msgSend_addObject_(v10, v16, (uint64_t)v15, v17, v18);

    id v23 = objc_msgSend_numberWithDouble_(NSNumber, v19, v20, v21, v22, a3);
    objc_msgSend_addObject_(v10, v24, (uint64_t)v23, v25, v26);

    double v31 = objc_msgSend_numberWithDouble_(NSNumber, v27, v28, v29, v30, fmax(round(a4 * 10.0) / 10.0, 0.0));
    objc_msgSend_addObject_(v10, v32, (uint64_t)v31, v33, v34);

    uint64_t v39 = objc_msgSend_numberWithDouble_(NSNumber, v35, v36, v37, v38, fmax(round(a5 * 10.0) / 10.0, 0.0));
    objc_msgSend_addObject_(v10, v40, (uint64_t)v39, v41, v42);
  }
}

void sub_1DDBA4960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1DDBA49A8(uint64_t a1)
{
  int v2 = sub_1DDBA1778(a1);
  sub_1DDA2E3A8(v2, @"{PictureStyle}", 0);
  id v13 = (id)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    if (!sub_1DDA2E4E0(v13, @"Monochrome")) {
      sub_1DDBA4B30(a1, @"Monochrome", 0);
    }
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    if ((v3 & 0x80000000) == 0)
    {
      if ((unsigned __int16)(v3 + 1) > 4u) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = *(&off_1E6D06240 + (__int16)(v3 + 1));
      }
      sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictStyleColorSpace", v4, (float)v3, (float)v3);
    }
  }
  uint64_t v5 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v5, v6, @"{PictStyleSetting}", v7, v8);

  uint64_t v9 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v9, v10, @"{PictStyleNormalized}", v11, v12);
}

void sub_1DDBA4AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA4B30(uint64_t a1, void *a2, int a3)
{
  id v9 = a2;
  uint64_t v8 = objc_msgSend_stringWithFormat_(NSString, v5, @"%ld", v6, v7, a3);
  sub_1DDBA4BE8(a1, @"{PictureStyle}", v9, v8, (float)a3, (float)a3);
}

void sub_1DDBA4BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA4BE8(uint64_t a1, void *a2, void *a3, void *a4, float a5, float a6)
{
  id v42 = a2;
  id v11 = a3;
  id v12 = a4;
  uint64_t v16 = v12;
  if (v12)
  {
    id v17 = v12;
  }
  else
  {
    objc_msgSend_stringWithFormat_(NSString, v13, @"%ld", v14, v15, (uint64_t)a5);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v18 = v17;
  int v19 = sub_1DDBA1778(a1);
  uint64_t v20 = sub_1DDBA4F28(v19, v42, v11);

  objc_msgSend_addObject_(v20, v21, (uint64_t)v18, v22, v23);
  *(float *)&double v24 = a5;
  uint64_t v29 = objc_msgSend_numberWithFloat_(NSNumber, v25, v26, v27, v28, v24);
  objc_msgSend_addObject_(v20, v30, (uint64_t)v29, v31, v32);

  *(float *)&double v33 = a6;
  uint64_t v38 = objc_msgSend_numberWithFloat_(NSNumber, v34, v35, v36, v37, v33);
  objc_msgSend_addObject_(v20, v39, (uint64_t)v38, v40, v41);
}

void sub_1DDBA4D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA4D7C(uint64_t a1, __int16 a2)
{
  if ((unsigned __int16)(a2 + 1) > 4u) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E6D06240 + (__int16)(a2 + 1));
  }
}

uint64_t sub_1DDBA4DA8()
{
  return 1;
}

void sub_1DDBA4DB0(uint64_t a1, uint8x8_t a2, uint16x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a2.i32[0] = *(_DWORD *)(a6 + 8);
  a3.i32[0] = 13631696;
  a3.i16[2] = 208;
  a3.i16[3] = 208;
  *(_DWORD *)(a6 + 8) = vmovn_s16((int16x8_t)vaddw_u8(a3, a2)).u32[0];
  uint64_t v8 = sub_1DDBA1778(a1);
  id v9 = sub_1DDBA17F8(a5);
  float v10 = sub_1DDBA175C(a5);
  sub_1DDBA4F28(v8, v9, v10);
  id v32 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v14 = objc_msgSend_numberWithInt_(NSNumber, v11, (*(char *)(a6 + 9) + 10 * *(char *)(a6 + 8)), v12, v13);
  objc_msgSend_addObject_(v32, v15, (uint64_t)v14, v16, v17);

  uint64_t v21 = objc_msgSend_numberWithInt_(NSNumber, v18, *(char *)(a6 + 10), v19, v20);
  objc_msgSend_addObject_(v32, v22, (uint64_t)v21, v23, v24);

  if (*(unsigned char *)(a6 + 11))
  {
    uint64_t v28 = objc_msgSend_numberWithInt_(NSNumber, v25, *(char *)(a6 + 11), v26, v27);
    objc_msgSend_addObject_(v32, v29, (uint64_t)v28, v30, v31);
  }
}

void sub_1DDBA4EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1DDBA4F28(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1DDA7A98C(a1, a2, 0);
  uint64_t v7 = sub_1DDBA57C0(v6, v5);

  return v7;
}

void sub_1DDBA4FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA4FBC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v6 = sub_1DDBA1778(a1);
  uint64_t v7 = sub_1DDBA17F8(a3);
  uint64_t v8 = sub_1DDBA175C(a3);
  sub_1DDBA4F28(v6, v7, v8);
  id v37 = (id)objc_claimAutoreleasedReturnValue();

  uint64_t v12 = objc_msgSend_numberWithInt_(NSNumber, v9, a4[8], v10, v11);
  objc_msgSend_addObject_(v37, v13, (uint64_t)v12, v14, v15);

  uint64_t v19 = objc_msgSend_numberWithInt_(NSNumber, v16, a4[9], v17, v18);
  objc_msgSend_addObject_(v37, v20, (uint64_t)v19, v21, v22);

  if (*((_WORD *)a4 + 5))
  {
    uint64_t v26 = objc_msgSend_numberWithInt_(NSNumber, v23, a4[10], v24, v25);
    objc_msgSend_addObject_(v37, v27, (uint64_t)v26, v28, v29);

    if (a4[11])
    {
      double v33 = objc_msgSend_numberWithInt_(NSNumber, v30, a4[11], v31, v32);
      objc_msgSend_addObject_(v37, v34, (uint64_t)v33, v35, v36);
    }
  }
}

void sub_1DDBA50FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double sub_1DDBA514C(uint64_t a1, double result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a5 + 4) >= 4u)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
    unsigned int v11 = bswap32(v10);
    uint64_t v10 = a7 ? v11 : v10;
    if (sub_1DDBA1314(a1, (uint64_t)&v24, 32, a6, v10) == 32)
    {
      if (a7)
      {
        uint64_t v16 = *(unsigned int *)(a5 + 4);
        if (v16)
        {
          uint64_t v17 = (unsigned int *)&v24;
          do
          {
            *uint64_t v17 = bswap32(*v17);
            ++v17;
            --v16;
          }
          while (v16);
        }
      }
      LODWORD(v12) = DWORD1(v24);
      LODWORD(result) = v24;
      *(double *)&unint64_t v18 = (double)v12;
      double v19 = (double)*(unint64_t *)&result / *(double *)&v18;
      LODWORD(v13) = HIDWORD(v24);
      LODWORD(v18) = DWORD2(v24);
      *(double *)&unint64_t v20 = (double)v13;
      double v21 = (double)v18 / *(double *)&v20;
      LODWORD(v14) = DWORD1(v25);
      LODWORD(v20) = v25;
      *(double *)&unint64_t v22 = (double)v14;
      double v23 = (double)v20 / *(double *)&v22;
      LODWORD(v15) = HIDWORD(v25);
      LODWORD(v22) = DWORD2(v25);
      sub_1DDBA47CC(a1, v19, v21, v23, (double)v22 / (double)v15);
    }
  }
  return result;
}

void sub_1DDBA5260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unsigned int v11 = *(_DWORD *)(a4 + 8);
  unsigned int v12 = bswap32(v11);
  if (a6) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v11;
  }
  if (sub_1DDBA1314(a1, (uint64_t)&v34, 24, a5, v13) == 24)
  {
    if (a6)
    {
      for (uint64_t i = 0; i != 24; i += 4)
        *(_DWORD *)((char *)&v34 + i) = bswap32(*(_DWORD *)((char *)&v34 + i));
    }
    double v15 = 0.0;
    if (v34) {
      BOOL v16 = HIDWORD(v34) == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16) {
      double v15 = (double)v34 / (double)HIDWORD(v34);
    }
    if (v35) {
      BOOL v17 = HIDWORD(v35) == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17) {
      double v15 = v15 + (double)v35 / ((double)HIDWORD(v35) * 60.0);
    }
    if (v36 && HIDWORD(v36)) {
      double v15 = v15 + (double)v36 / ((double)HIDWORD(v36) * 3600.0);
    }
    if (*(_WORD *)a4 == 7)
    {
      double v18 = 2000000000.0;
      if (v15 <= 2000000000.0) {
        double v18 = v15;
      }
      if (v15 >= -2000000000.0) {
        double v19 = v18;
      }
      else {
        double v19 = -2000000000.0;
      }
      unint64_t v20 = NSString;
      uint64_t v21 = (int)fmod(v19 * 60.0, 60.0);
      float v22 = fmod(v19 * 3600.0, 60.0);
      uint64_t v26 = objc_msgSend_stringWithFormat_(v20, v23, @"%.2d:%.2d:%05.2f", v24, v25, (int)v19, v21, v22);
      uint64_t v27 = sub_1DDBA1778(a1);
      uint64_t v28 = sub_1DDBA17F8(a3);
      uint64_t v29 = sub_1DDBA175C(a3);
      sub_1DDA784D0(v27, v28, v29, v26);
    }
    else
    {
      uint64_t v26 = sub_1DDBA1778(a1);
      uint64_t v27 = sub_1DDBA17F8(a3);
      uint64_t v28 = sub_1DDBA175C(a3);
      uint64_t v29 = objc_msgSend_numberWithDouble_(NSNumber, v30, v31, v32, v33, v15);
      sub_1DDA784D0(v26, v27, v28, v29);
    }
  }
}

void sub_1DDBA54E8(_Unwind_Exception *a1)
{
  id v5 = v2;

  _Unwind_Resume(a1);
}

void sub_1DDBA5554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  size_t v6 = *(unsigned int *)(a4 + 4);
  if ((v6 - 9) >> 3 <= 0x4E0 && *(_WORD *)(a4 + 2) == 7)
  {
    sub_1DDA1AB9C(&__p, v6);
    unsigned int v13 = *(_DWORD *)(a4 + 8);
    unsigned int v14 = bswap32(v13);
    if (a6) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = v13;
    }
    uint64_t v16 = sub_1DDBA1314(a1, (uint64_t)__p, v26 - (unsigned char *)__p, a5, v15);
    BOOL v17 = __p;
    if (v16 == v26 - (unsigned char *)__p)
    {
      uint64_t v18 = *(void *)__p;
      if (*(void *)__p == 0x45444F43494E55) {
        int v19 = 256;
      }
      else {
        int v19 = -1;
      }
      if (v18 == 0x4949435341) {
        int v19 = 1536;
      }
      if (v18 == 5458250) {
        CFStringEncoding v20 = 1570;
      }
      else {
        CFStringEncoding v20 = v19;
      }
      if (v20 != -1)
      {
        uint64_t v21 = (__CFString *)CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)__p + 8, v16 - 8, v20, 1u);
        if (v21)
        {
          float v22 = sub_1DDBA1778(a1);
          double v23 = sub_1DDBA17F8(a3);
          uint64_t v24 = sub_1DDBA175C(a3);
          sub_1DDA784D0(v22, v23, v24, v21);
        }
      }
      BOOL v17 = __p;
    }
    if (v17)
    {
      uint64_t v26 = v17;
      operator delete(v17);
    }
  }
}

void sub_1DDBA56DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v15 = v11;

  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1DDBA5730(uint64_t a1, int a2)
{
  int v3 = sub_1DDBA1778(a1);
  uint64_t v4 = v3;
  id v5 = (void *)*MEMORY[0x1E4F2F800];
  if (a2) {
    sub_1DDA7A98C(v3, v5, 0);
  }
  else {
  size_t v6 = sub_1DDA2E3A8(v3, v5, 0);
  }

  return v6;
}

void sub_1DDBA57AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDBA57C0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v9 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7, v8);
  objc_msgSend_setObject_forKeyedSubscript_(v3, v10, (uint64_t)v9, (uint64_t)v4, v11);

  return v9;
}

void sub_1DDBA5838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA5858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7 = *(unsigned int *)(a4 + 4);
  if ((v7 - 1) <= 0xF423F && a7 != 0)
  {
    unint64_t v13 = *(unsigned __int16 *)(a4 + 2);
    if (v13 > 0x6F) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = qword_1DDC0B020[v13];
    }
    sub_1DDA1AB9C(&__p, v14 * v7);
    unsigned int v15 = *(_DWORD *)(a4 + 8);
    unsigned int v16 = bswap32(v15);
    if (a6) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }
    uint64_t v18 = sub_1DDBA1314(a1, (uint64_t)__p, v21 - (unsigned char *)__p, a5, v17);
    int v19 = __p;
    if (v18 == v21 - (unsigned char *)__p)
    {
      sub_1DDBA1778(a1);
      CGImagePluginReadRawIPTCProps();
      int v19 = __p;
    }
    if (v19)
    {
      uint64_t v21 = v19;
      operator delete(v19);
    }
  }
}

void sub_1DDBA5938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDBA5954(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v15 = a2;
  unint64_t v13 = objc_msgSend_stringWithFormat_(NSString, v15, @"%@/GPS", v11, v12, v15);
  unsigned int v14 = sub_1DDBA279C((uint64_t)a1, v15, a3, a4, a5, a6);
  sub_1DDBA5A38(a1, v13, word_1F3988AC8, v14, a5, a6);
}

void sub_1DDBA5A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA5A38(unsigned char *a1, void *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  uint64_t v12 = (*(uint64_t (**)(unsigned char *, unsigned __int16 *))(*(void *)a1 + 88))(a1, a3);
  unsigned __int16 v39 = 0;
  unsigned int v38 = 0;
  if (sub_1DDBA1314((uint64_t)a1, (uint64_t)&v39, 2, a5, a4) != 2) {
    goto LABEL_46;
  }
  unsigned __int16 v13 = v39;
  unsigned int v14 = bswap32(v39) >> 16;
  if (a6) {
    unsigned __int16 v13 = v14;
  }
  unsigned __int16 v39 = v13;
  if (v13 > 0xFEu)
  {
LABEL_46:
    uint64_t v30 = 0;
    goto LABEL_44;
  }
  sub_1DDBAA1C8(&__p, v13);
  int64_t v15 = v37 - (unsigned char *)__p;
  uint64_t v16 = a4 + 2;
  if (sub_1DDBA1314((uint64_t)a1, (uint64_t)__p, v37 - (unsigned char *)__p, a5, v16) == v15
    && sub_1DDBA1314((uint64_t)a1, (uint64_t)&v38, 4, a5, v15 + v16) == 4)
  {
    unsigned int v17 = v38;
    if (a6)
    {
      unsigned int v17 = bswap32(v38);
      if (v39)
      {
        unsigned int v18 = 0;
        int v19 = (unsigned __int16 *)__p;
        do
        {
          *int v19 = bswap32(*v19) >> 16;
          v19[1] = bswap32(v19[1]) >> 16;
          *((_DWORD *)v19 + 1) = bswap32(*((_DWORD *)v19 + 1));
          ++v18;
          v19 += 6;
        }
        while (v18 < v39);
      }
    }
    if (v12)
    {
      unsigned int v20 = v39;
      if (v39)
      {
        unsigned int v21 = 0;
        float v22 = (char *)__p + 2;
        do
        {
          if (*((unsigned __int16 *)v22 - 1) == 50706 && *(_WORD *)v22 == 1 && *(_DWORD *)(v22 + 2) == 4) {
            a1[193] = 1;
          }
          ++v21;
          v22 += 12;
        }
        while (v21 < v20);
      }
      if (a3 == (unsigned __int16 *)&unk_1F3988AC8 && v20 < 2) {
        goto LABEL_42;
      }
      if (((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 40))(a1) & 1) == 0
        && (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 24))(a1))
      {
        a3 = (unsigned __int16 *)&unk_1E6D061A8;
      }
      goto LABEL_27;
    }
    if (a3 != (unsigned __int16 *)&unk_1F3988AC8 || v39 >= 2u)
    {
LABEL_27:
      sub_1DDB57070((uint64_t)a1, &v34);
      unsigned int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
      unsigned int v33 = v17;
      if (v35) {
        sub_1DDA18310(v35);
      }
      if (v39)
      {
        unsigned int v24 = 0;
        uint64_t v25 = (unsigned __int16 *)__p;
        do
        {
          LODWORD(v34) = 0;
          uint64_t v26 = sub_1DDBA1214((uint64_t)a1, v25, a3, &v34);
          if (v26)
          {
            unint64_t v27 = v25[1];
            if (v27 > 0x6F) {
              uint64_t v28 = 0;
            }
            else {
              uint64_t v28 = qword_1DDC0B020[v27];
            }
            if (v28 * (unint64_t)*((unsigned int *)v25 + 1) >= v23)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1E01C3B90](exception, "RawCameraException");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            uint64_t v29 = (void (*)(unsigned char *, id, unsigned __int16 *, unsigned __int16 *, uint64_t, uint64_t, uint64_t))*((void *)v26 + 3);
            if (v29) {
              v29(a1, v11, v26, v25, a5, a6, v12);
            }
            else {
              sub_1DDBA1CE4((uint64_t)a1, v11, (uint64_t)v26, (uint64_t)v25, a5, a6);
            }
          }
          ++v24;
          v25 += 6;
        }
        while (v24 < v39);
      }
      unsigned int v17 = v33;
    }
  }
  else
  {
    unsigned int v17 = 0;
  }
LABEL_42:
  uint64_t v30 = v17;
  if (__p)
  {
    uint64_t v37 = __p;
    operator delete(__p);
  }
LABEL_44:

  return v30;
}

void sub_1DDBA5E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DDBA5E88(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = a2;
  uint64_t v12 = objc_msgSend_stringWithFormat_(NSString, v16, @"%@/Makernote", v10, v11, v16);
  unsigned int v13 = *(_DWORD *)(a4 + 8);
  unsigned int v14 = bswap32(v13);
  if (a6) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v13;
  }
  (*(void (**)(unsigned char *, void *, uint64_t, void, uint64_t, uint64_t, void))(*(void *)a1 + 136))(a1, v12, v15, *(unsigned int *)(a4 + 4), a5, a6, 0);
  a1[194] = 1;
}

void sub_1DDBA5F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA5F7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a2;
  unsigned int v13 = v10;
  if (*(_DWORD *)(a4 + 4) >= 0x15u)
  {
    int v19 = v10;
    unsigned int v14 = objc_msgSend_stringWithFormat_(NSString, v10, @"%@/Makernote", v11, v12, v10);
    unsigned int v15 = *(_DWORD *)(a4 + 8);
    unsigned int v16 = bswap32(v15);
    if (a6) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v14, v17, a5, a6, 1);

    unsigned int v13 = v19;
  }

  return MEMORY[0x1F41817F8](v10, v13);
}

void sub_1DDBA6054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA6074(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v15 = a2;
  unsigned int v13 = objc_msgSend_stringWithFormat_(NSString, v15, @"%@/Exif", v11, v12, v15);
  unsigned int v14 = sub_1DDBA279C((uint64_t)a1, v15, a3, a4, a5, a6);
  sub_1DDBA5A38(a1, v13, word_1F3987FB0, v14, a5, a6);
}

void sub_1DDBA6138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA6158(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v43 = a2;
  sub_1DDBA279C((uint64_t)a1, v43, a3, a4, a5, a6);
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 184))(a1))
  {
    uint64_t v11 = sub_1DDBA1778((uint64_t)a1);
    uint64_t v12 = sub_1DDBA17F8(a3);
    uint64_t v41 = a3;
    unsigned int v13 = sub_1DDBA175C(a3);
    id v42 = sub_1DDBA64D4(v11, v12, v13);

    unsigned int v18 = 0;
    unint64_t v19 = 0;
    unsigned int v20 = (void *)*MEMORY[0x1E4F2FD40];
    while (v19 < objc_msgSend_count(v42, v14, v15, v16, v17))
    {
      unint64_t v44 = v19;
      unsigned int v24 = sub_1DDB6745C(v42, (const char *)&v44, v21, v22, v23);

      if (!v24) {
        goto LABEL_13;
      }
      uint64_t v28 = objc_msgSend_stringWithFormat_(NSString, v25, @"%@/SubIFD%d", v26, v27, v43, v19);
      LODWORD(v33) = objc_msgSend_intValue(v24, v29, v30, v31, v32);
      uint64_t v34 = sub_1DDBA1778((uint64_t)a1);
      BOOL v35 = sub_1DDBA6568(v34, v20, @"_SubfileType");

      if (v35
        && (sub_1DDBA1778((uint64_t)a1),
            uint64_t v36 = objc_claimAutoreleasedReturnValue(),
            int v37 = sub_1DDBA65E8(v36, v20, @"_SubfileType"),
            v36,
            !v37))
      {
        uint64_t v33 = v33;
      }
      else
      {
        uint64_t v33 = v33;
        sub_1DDBA5A38(a1, v28, word_1F39869D0, v33, a5, a6);
      }
      sub_1DDBA5A38(a1, v28, word_1E6D05E58, v33, a5, a6);
      if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 24))(a1)) {
        sub_1DDBA5A38(a1, v28, word_1F39870D8, v33, a5, a6);
      }

      ++v19;
      unsigned int v18 = v24;
    }

LABEL_13:
    a3 = v41;
  }
  unsigned int v38 = sub_1DDBA1778((uint64_t)a1);
  unsigned __int16 v39 = sub_1DDBA17F8(a3);
  uint64_t v40 = sub_1DDBA175C(a3);
  sub_1DDBA6668(v38, v39, v40);
}

void sub_1DDBA6430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1DDBA64D4(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1DDA2E3A8(a1, a2, 0);
  uint64_t v10 = sub_1DDA83A80(v6, v5, v7, v8, v9);

  return v10;
}

void sub_1DDBA654C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDBA6568(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1DDA2E3A8(a1, a2, 0);
  BOOL v7 = sub_1DDA2E4E0(v6, v5);

  return v7;
}

void sub_1DDBA65CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA65E8(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1DDA2E3A8(a1, a2, 0);
  uint64_t v10 = sub_1DDA2E1C4(v6, v5, v7, v8, v9);

  return v10;
}

void sub_1DDBA664C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA6668(void *a1, void *a2, void *a3)
{
  id v9 = a3;
  id v5 = sub_1DDA2E3A8(a1, a2, 0);
  objc_msgSend_removeObjectForKey_(v5, v6, (uint64_t)v9, v7, v8);
}

void sub_1DDBA66D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA66F4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  unint64_t v11 = *(unsigned __int16 *)(a4 + 2);
  if (v11 > 0x6F) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = qword_1DDC0B020[v11];
  }
  uint64_t v13 = *(unsigned int *)(a4 + 4);
  unint64_t v14 = v12 * v13;
  if ((unint64_t)(v12 * v13) > 0x28) {
    goto LABEL_19;
  }
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  if (v14 < 5)
  {
    if (v12 != 2 || !a6) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  unsigned int v15 = *(_DWORD *)(a4 + 8);
  unsigned int v16 = bswap32(v15);
  if (a6) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = v15;
  }
  uint64_t v18 = sub_1DDBA1314(a1, (uint64_t)v21, v14, a5, v17);
  if (v12 == 2 && v18 == v14 && a6 != 0)
  {
    LODWORD(v13) = *(_DWORD *)(a4 + 4);
LABEL_16:
    if (v13)
    {
      int v20 = 0;
      do
      {
        *((_WORD *)v21 + (unsigned __int16)v20) = bswap32(*((unsigned __int16 *)v21 + (unsigned __int16)v20)) >> 16;
        ++v20;
      }
      while (v13 > (unsigned __int16)v20);
    }
  }
LABEL_19:
}

void sub_1DDBA6834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA684C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  unint64_t v12 = *(unsigned __int16 *)(a4 + 2);
  if (v12 > 0x6F) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = qword_1DDC0B020[v12];
  }
  unint64_t v14 = v13 * *(unsigned int *)(a4 + 4);
  if (v14 > 0x28) {
    goto LABEL_23;
  }
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  unsigned int v15 = *(_DWORD *)(a4 + 8);
  if (v14 < 5)
  {
    LODWORD(v38) = *(_DWORD *)(a4 + 8);
  }
  else
  {
    unsigned int v16 = bswap32(v15);
    if (a6) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }
    if (sub_1DDBA1314(a1, (uint64_t)&v38, v14, a5, v17) != v14) {
      goto LABEL_23;
    }
  }
  if (v13 == 2)
  {
    if (a6)
    {
      unsigned int v18 = *(_DWORD *)(a4 + 4);
      if (v18)
      {
        int v19 = 0;
        do
        {
          *((_WORD *)&v38 + (unsigned __int16)v19) = bswap32(*((unsigned __int16 *)&v38 + (unsigned __int16)v19)) >> 16;
          ++v19;
        }
        while (v18 > (unsigned __int16)v19);
      }
    }
  }
  int v20 = sub_1DDBA1778(a1);
  uint64_t v21 = sub_1DDBA17F8(a3);
  uint64_t v22 = sub_1DDBA175C(a3);
  BOOL v23 = sub_1DDBA6568(v20, v21, v22);

  if (v14) {
    char v24 = v23;
  }
  else {
    char v24 = 1;
  }
  if ((v24 & 1) == 0)
  {
    uint64_t v25 = sub_1DDBA1778(a1);
    uint64_t v26 = sub_1DDBA17F8(a3);
    uint64_t v27 = sub_1DDBA175C(a3);
    uint64_t v28 = sub_1DDBA4F28(v25, v26, v27);

    uint64_t v32 = 0;
    int v33 = 0;
    do
    {
      uint64_t v34 = objc_msgSend_numberWithInt_(NSNumber, v29, *((unsigned __int8 *)&v38 + v32), v30, v31, v38, v39, v40, v41);
      objc_msgSend_addObject_(v28, v35, (uint64_t)v34, v36, v37);

      uint64_t v32 = (unsigned __int16)++v33;
    }
    while (v14 > (unsigned __int16)v33);
  }
LABEL_23:
}

void sub_1DDBA6A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA6B00(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  unint64_t v12 = *(unsigned __int16 *)(a4 + 2);
  if (v12 > 0x6F) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = qword_1DDC0B020[v12];
  }
  unint64_t v14 = v13 * *(unsigned int *)(a4 + 4);
  if (v14 > 0x28) {
    goto LABEL_19;
  }
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  unsigned int v15 = *(_DWORD *)(a4 + 8);
  if (v14 >= 5)
  {
    unsigned int v16 = bswap32(v15);
    if (a6) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }
    if (sub_1DDBA1314(a1, (uint64_t)&v33, v14, a5, v17) != v14) {
      goto LABEL_19;
    }
  }
  else
  {
    LODWORD(v33) = *(_DWORD *)(a4 + 8);
  }
  if (v13 == 2)
  {
    if (a6)
    {
      unsigned int v18 = *(_DWORD *)(a4 + 4);
      if (v18)
      {
        int v19 = 0;
        do
        {
          *((_WORD *)&v33 + (unsigned __int16)v19) = bswap32(*((unsigned __int16 *)&v33 + (unsigned __int16)v19)) >> 16;
          ++v19;
        }
        while (v18 > (unsigned __int16)v19);
      }
    }
  }
  if (v14 >= 5)
  {
    int v20 = sub_1DDBA1778(a1);
    uint64_t v21 = sub_1DDBA17F8(a3);
    uint64_t v22 = sub_1DDBA175C(a3);
    BOOL v23 = sub_1DDBA4F28(v20, v21, v22);

    uint64_t v27 = 4;
    int v28 = 4;
    do
    {
      uint64_t v29 = objc_msgSend_numberWithInt_(NSNumber, v24, *((unsigned __int8 *)&v33 + v27), v25, v26, v33, v34, v35, v36);
      objc_msgSend_addObject_(v23, v30, (uint64_t)v29, v31, v32);

      uint64_t v27 = (unsigned __int16)++v28;
    }
    while (v14 > (unsigned __int16)v28);
  }
LABEL_19:
}

void sub_1DDBA6CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1DDBA6D38()
{
  return &unk_1F3986BD8;
}

BOOL sub_1DDBA6D44(uint64_t a1, void *a2)
{
  return a2 == &unk_1F3986BD8;
}

uint64_t sub_1DDBA6D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  __int16 v31 = 0;
  uint64_t v30 = 0;
  if (sub_1DDBA1314(a1, (uint64_t)&v30, 10, a5, a3) != 10) {
    return 0;
  }
  if (v30 != 0x4F6920656C707041 || v31 != 83) {
    return 0;
  }
  id v11 = (void *)MEMORY[0x1E01C4510]();
  objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v12, a4 + 62, v13, v14);
  id v15 = objc_claimAutoreleasedReturnValue();
  uint64_t v20 = objc_msgSend_mutableBytes(v15, v16, v17, v18, v19);
  *(_OWORD *)uint64_t v20 = xmmword_1DDC0AF90;
  *(void *)(v20 + 16) = 0x100000004006987;
  *(_DWORD *)(v20 + 24) = 436207616;
  *(_DWORD *)(v20 + 28) = 0;
  *(unsigned char *)(v20 + 32) = 0;
  *(_OWORD *)(v20 + 33) = xmmword_1DDC0AFA0;
  *(unsigned char *)(v20 + 49) = 7;
  *(_DWORD *)(v20 + 50) = bswap32(a4);
  *(_DWORD *)(v20 + 54) = 939524096;
  *(_DWORD *)(v20 + 58) = 0;
  id v21 = v15;
  uint64_t v26 = objc_msgSend_mutableBytes(v21, v22, v23, v24, v25);
  sub_1DDBA1314(a1, v26 + 62, a4, a5, a3);
  id v29 = v21;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v27, (uint64_t)&v29, 1, v28);
  CGImageCreateMetadataFromDataArray();

  return 1;
}

void sub_1DDBA6F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDBA6FA8(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v23[3] = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  memset(v23, 0, 21);
  uint64_t v10 = sub_1DDBA1314((uint64_t)a1, (uint64_t)v23, 20, a4, a3);
  if (v10 == 20)
  {
    if (v23[0] == 0x614D0065626F6441 && LOWORD(v23[1]) == 20075)
    {
      unsigned int v15 = *(_DWORD *)((char *)&v23[1] + 2);
      sub_1DDB57070((uint64_t)a1, &v22);
      unsigned int v16 = (*(uint64_t (**)(void))(*(void *)v22 + 16))(v22);
      unsigned int v17 = bswap32(v15);
      if (*((void *)&v22 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v22 + 1));
      }
      if (v16 < v17)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if ((*(unsigned int (**)(unsigned char *, id))(*(void *)a1 + 136))(a1, v9)) {
        sub_1DDBA5A38(a1, &stru_1F398F7F8, word_1F3987060, a3, a4, a5);
      }
    }
    else if (v23[0] == 0x205841544E4550 || v23[0] == 0x474E55534D4153)
    {
      int v12 = LOBYTE(v23[1]);
      sub_1DDB57070((uint64_t)a1, &v20);
      uint64_t v13 = sub_1DDBA1778((uint64_t)a1);
      sub_1DDBC8784(&v20, v13, 0, &v22);

      uint64_t v14 = a4 + a3;
      if (v21) {
        sub_1DDA18310(v21);
      }
      (*(void (**)(void, uint64_t, void, uint64_t, BOOL, uint64_t, void))(*(void *)v22 + 8))(v22, 10, 0, v14, v12 == 77, 1, 0);
      if (*((void *)&v22 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v22 + 1));
      }
    }
  }

  return v10 == 20;
}

void sub_1DDBA726C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA72D8()
{
  return 0;
}

uint64_t sub_1DDBA72E0(uint64_t a1)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  v34[0] = 0;
  uint64_t v3 = v2;
  if (sub_1DDBA1314(a1, (uint64_t)v34, 8, v2, 0) != 8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v4 = LOBYTE(v34[0]);
  if (LOBYTE(v34[0]) != BYTE1(v34[0]))
  {
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v26, "RawCameraException");
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((LOBYTE(v34[0]) | 4) != 0x4D)
  {
    __int16 v31 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v31, "RawCameraException");
    __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v5 = bswap32(WORD1(v34[0])) >> 16;
  if (LOBYTE(v34[0]) == 77) {
    unsigned __int16 v6 = v5;
  }
  else {
    unsigned __int16 v6 = WORD1(v34[0]);
  }
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 120))(a1, v6) & 1) == 0)
  {
    uint64_t v27 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v27, "RawCameraException");
    __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v7 = bswap32(HIDWORD(v34[0]));
  if (v4 == 77) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = HIDWORD(v34[0]);
  }
  sub_1DDB57070(a1, &__p);
  unsigned int v9 = (*(uint64_t (**)(void *))(*(void *)__p + 16))(__p);
  if (v33) {
    sub_1DDA18310(v33);
  }
  if (v8 >= v9)
  {
    uint64_t v28 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v28, "RawCameraException");
    __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  unint64_t v11 = sub_1DDBA5A38((unsigned char *)a1, @"IFD0", v10, v8, v3, v4 == 77);
  if (v11 >= v9)
  {
    id v29 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v29, "RawCameraException");
    __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) & 1) == 0)
  {
    if (v11)
    {
      unint64_t v12 = sub_1DDBA5A38((unsigned char *)a1, @"IFD1", word_1F3986F70, v11, v3, v4 == 77);
      if (v12 >= v9)
      {
        uint64_t v30 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v30, "RawCameraException");
        __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v12) {
        sub_1DDBA5A38((unsigned char *)a1, @"IFD2", word_1E6D06070, v12, v3, v4 == 77);
      }
    }
    if (*(void *)(a1 + 144))
    {
      sub_1DDBA1778(a1);
      objc_msgSend_bytes(*(void **)(a1 + 144), v13, v14, v15, v16);
      objc_msgSend_length(*(void **)(a1 + 144), v17, v18, v19, v20);
      CGImagePluginReadRawXMPProps();
    }
    else if (*(void *)(a1 + 152))
    {
      size_t v22 = *(void *)(a1 + 160);
      if (v22)
      {
        sub_1DDA1AB9C(&__p, v22);
        uint64_t v23 = sub_1DDBA1314(a1, (uint64_t)__p, (char *)v33 - (unsigned char *)__p, v3, *(void *)(a1 + 152));
        uint64_t v24 = (std::__shared_weak_count *)__p;
        if (v23 == (char *)v33 - (unsigned char *)__p)
        {
          sub_1DDBA1778(a1);
          CGImagePluginReadRawXMPProps();
          uint64_t v24 = (std::__shared_weak_count *)__p;
        }
        if (v24)
        {
          long long v33 = v24;
          operator delete(v24);
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
}

void sub_1DDBA77AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDBA780C()
{
  return 0;
}

BOOL sub_1DDBA7814(uint64_t a1, int a2)
{
  return a2 == 42;
}

id sub_1DDBA7820(uint64_t a1)
{
  return *(id *)(a1 + 56);
}

void sub_1DDBA7828(uint64_t a1)
{
  unsigned int v2 = sub_1DDBA1778(a1);
  uint64_t v3 = (void *)*MEMORY[0x1E4F2F6D8];
  id v11 = v2;
  BOOL v4 = sub_1DDBA6568(v2, (void *)*MEMORY[0x1E4F2F6D8], @"ImageStabilization");

  if (v4)
  {
    sub_1DDBA1778(a1);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = sub_1DDBA65E8(v12, v3, @"ImageStabilization");

    unsigned __int16 v6 = sub_1DDBA1778(a1);
    id v13 = v6;
    if (v5 == 0x7FFF)
    {
      sub_1DDBA6668(v6, v3, @"ImageStabilization");
    }
    else
    {
      uint64_t v10 = objc_msgSend_numberWithInt_(NSNumber, v7, v5, v8, v9);
      sub_1DDA784D0(v13, v3, @"ImageStabilization", v10);
    }
  }
}

void sub_1DDBA7948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA7974(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  unsigned int v2 = sub_1DDBA1778(a1);
  sub_1DDBA6668(v2, (void *)*MEMORY[0x1E4F2FD40], @"_SubfileType");

  uint64_t v3 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v3, v4, @"{Temporary}", v5, v6);

  unsigned int v7 = sub_1DDBA1778(a1);
  uint64_t v8 = (void *)*MEMORY[0x1E4F2F800];
  uint64_t v9 = sub_1DDB6DAE4(v7, (void *)*MEMORY[0x1E4F2F800], @"CameraOwnerName");

  uint64_t v10 = (void **)MEMORY[0x1E4F2F6D8];
  uint64_t v62 = v9;
  if (v9)
  {
    id v11 = sub_1DDBA1778(a1);
    sub_1DDA784D0(v11, *v10, (void *)*MEMORY[0x1E4F2F718], v9);
  }
  id v12 = sub_1DDBA1778(a1);
  id v13 = sub_1DDB6DAE4(v12, v8, @"BodySerialNumber");

  uint64_t v61 = v13;
  if (v13)
  {
    uint64_t v14 = sub_1DDBA1778(a1);
    sub_1DDA784D0(v14, *v10, (void *)*MEMORY[0x1E4F2F7A0], v13);
  }
  uint64_t v15 = sub_1DDBA1778(a1);
  uint64_t v63 = sub_1DDB6DAE4(v15, v8, @"LensModel");

  uint64_t v16 = sub_1DDBA1778(a1);
  unsigned int v17 = *v10;
  uint64_t v18 = (void *)*MEMORY[0x1E4F2F708];
  uint64_t v19 = sub_1DDB6DAE4(v16, *v10, (void *)*MEMORY[0x1E4F2F708]);

  uint64_t v60 = v19;
  if (v19)
  {
    id v20 = v19;
    goto LABEL_11;
  }
  if (v63)
  {
    id v20 = v63;
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 152))(a1);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    if (!v20) {
      goto LABEL_11;
    }
  }
  id v21 = sub_1DDBA1778(a1);
  sub_1DDA784D0(v21, v17, v18, v20);

LABEL_11:
  size_t v22 = sub_1DDBA1778(a1);
  uint64_t v59 = v20;
  BOOL v23 = sub_1DDBA6568(v22, v17, v18);

  if (!v23)
  {
    uint64_t v24 = sub_1DDBA1778(a1);
    sub_1DDBA6668(v24, v17, (void *)*MEMORY[0x1E4F2F6F8]);
  }
  uint64_t v25 = sub_1DDBA1778(a1);
  uint64_t v26 = sub_1DDB6DAE4(v25, v8, @"LensSerialNumber");

  if (v26)
  {
    uint64_t v27 = sub_1DDBA1778(a1);
    sub_1DDA784D0(v27, v17, (void *)*MEMORY[0x1E4F2F710], v26);
  }
  uint64_t v28 = sub_1DDBA1778(a1);
  id v29 = sub_1DDBA64D4(v28, v8, @"LensSpecification");

  if (v29)
  {
    uint64_t v30 = sub_1DDBA1778(a1);
    sub_1DDA784D0(v30, v17, (void *)*MEMORY[0x1E4F2F700], v29);
  }
  __int16 v31 = sub_1DDBA1778(a1);
  uint64_t v32 = (void *)*MEMORY[0x1E4F2F878];
  long long v33 = sub_1DDBA64D4(v31, v8, (void *)*MEMORY[0x1E4F2F878]);

  long long v34 = sub_1DDBA1778(a1);
  unsigned __int16 v35 = sub_1DDBA65E8(v34, v8, (void *)*MEMORY[0x1E4F2F910]);

  uint64_t v36 = sub_1DDBA1778(a1);
  uint64_t v37 = sub_1DDBA65E8(v36, v8, (void *)*MEMORY[0x1E4F2F930]);

  long long v38 = sub_1DDBA1778(a1);
  uint64_t v39 = sub_1DDBA65E8(v38, v8, (void *)*MEMORY[0x1E4F2F8E8]);

  uint64_t v40 = sub_1DDBA1778(a1);
  uint64_t v41 = sub_1DDBA65E8(v40, v8, (void *)*MEMORY[0x1E4F2F870]);

  uint64_t v46 = objc_msgSend_count(v33, v42, v43, v44, v45);
  if (v46)
  {
    uint64_t v64 = 0;
    LODWORD(v46) = sub_1DDBA8078(v33, (const char *)&v64, v47, v48, v49);
  }
  if (v35 <= 7u)
  {
    if (((1 << v35) & 0xB2) == 0)
    {
      uint64_t v37 = v39;
      if (((1 << v35) & 0x44) == 0)
      {
        if (v35 != 3) {
          goto LABEL_27;
        }
        uint64_t v37 = v41;
      }
    }
    if (v46 == -1 && v37)
    {
      uint64_t v50 = sub_1DDBA5730(a1, 1);
      uint64_t v51 = sub_1DDBA57C0(v50, v32);
      __int16 v55 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v52, v37, v53, v54, v59);
      objc_msgSend_addObject_(v51, v56, (uint64_t)v55, v57, v58);
    }
  }
LABEL_27:
}

void sub_1DDBA7F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA8078(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = sub_1DDB6745C(a1, a2, a3, a4, a5);
  uint64_t v10 = objc_msgSend_shortValue(v5, v6, v7, v8, v9);

  return v10;
}

void sub_1DDBA80B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA80C0(uint64_t result)
{
  if (!*(unsigned char *)(result + 192))
  {
    uint64_t v1 = result;
    double result = sub_1DDBA72E0(result);
    *(unsigned char *)(v1 + 192) = 1;
  }
  return result;
}

void sub_1DDBA80F4(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v15 = a7;
  if (v15) {
    objc_storeStrong(a1 + 22, a7);
  }
  if ((*((unsigned int (**)(id *, __CFString *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*a1 + 17))(a1, @"IFD0/Exif/Makernote", a2, a3, a4, a5, a6))
  {
    (*((void (**)(id *))*a1 + 16))(a1);
  }
  id v14 = a1[22];
  a1[22] = 0;
}

void sub_1DDBA81F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA8208(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v5 = a2;
  uint64_t v6 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v7, @"%@/%@", v8, v9, v5, @"_BitsPerSample");
  uint64_t v10 = (char *)objc_claimAutoreleasedReturnValue();
  id v14 = sub_1DDA83A80(v6, v10, v11, v12, v13);

  uint64_t v223 = v14;
  if (v14)
  {
    if (!objc_msgSend_count(v14, v15, v16, v17, v18)
      || (*(void *)&long long v236 = 0, sub_1DDB66788(v14, (const char *)&v236, v19, v20, v21) != 8))
    {
      *a3 = 0;
      a3[1] = 0;
      goto LABEL_81;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  uint64_t v222 = a3;
  size_t v22 = sub_1DDBA1814((uint64_t)a1);
  BOOL v23 = (void *)*MEMORY[0x1E4F2FD70];
  objc_msgSend_stringWithFormat_(NSString, v24, @"%@/%@", v25, v26, v5, *MEMORY[0x1E4F2FD70]);
  uint64_t v27 = (char *)objc_claimAutoreleasedReturnValue();
  __int16 v31 = sub_1DDA357A8(v22, v27, v28, v29, v30);

  unsigned int v240 = 1;
  if (v31) {
    goto LABEL_6;
  }
  uint64_t v224 = sub_1DDBA1814((uint64_t)a1);
  uint64_t v36 = NSString;
  id v37 = v23;
  objc_msgSend_stringWithFormat_(v36, v38, @"IFD0/%@", v39, v40, v37);
  uint64_t v41 = (char *)objc_claimAutoreleasedReturnValue();
  __int16 v31 = sub_1DDA357A8(v224, v41, v42, v43, v44);

  if (v31)
  {
LABEL_6:
    int v45 = objc_msgSend_intValue(v31, v32, v33, v34, v35);
    if ((v45 - 9) < 0xFFFFFFF8) {
      int v46 = 1;
    }
    else {
      int v46 = v45;
    }
    unsigned int v240 = v46;
    uint64_t v47 = v31;
  }
  else
  {
    uint64_t v47 = 0;
  }
  int v225 = v47;
  uint64_t v48 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v49, @"%@/%@", v50, v51, v5, @"_ImageWidth");
  uint64_t v52 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v228 = sub_1DDA357A8(v48, v52, v53, v54, v55);

  uint64_t v56 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v57, @"%@/%@", v58, v59, v5, @"_ImageLength");
  uint64_t v60 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v227 = sub_1DDA357A8(v56, v60, v61, v62, v63);

  uint64_t v64 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v65, @"%@/%@", v66, v67, v5, *MEMORY[0x1E4F2FD28]);
  uint64_t v68 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v72 = sub_1DDA357A8(v64, v68, v69, v70, v71);

  uint64_t v226 = v72;
  if (v72) {
    int v77 = objc_msgSend_intValue(v72, v73, v74, v75, v76);
  }
  else {
    int v77 = 0;
  }
  uint64_t v78 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v79, @"%@/%@", v80, v81, v5, @"_StripOffsets");
  uint64_t v82 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v86 = sub_1DDA83A80(v78, v82, v83, v84, v85);

  uint64_t v87 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v88, @"%@/%@", v89, v90, v5, @"_StripByteCounts");
  float v91 = (char *)objc_claimAutoreleasedReturnValue();
  float v95 = sub_1DDA83A80(v87, v91, v92, v93, v94);

  float v96 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v97, @"%@/%@", v98, v99, v5, @"_StripOffsets");
  uint64_t v100 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v229 = sub_1DDA357A8(v96, v100, v101, v102, v103);

  uint64_t v104 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v105, @"%@/%@", v106, v107, v5, @"_StripByteCounts");
  int v108 = (char *)objc_claimAutoreleasedReturnValue();
  unint64_t v112 = sub_1DDA357A8(v104, v108, v109, v110, v111);

  if (v86 && !v229)
  {
    *(void *)&long long v236 = 0;
    uint64_t v229 = sub_1DDB6745C(v86, (const char *)&v236, v114, v115, v116);
  }
  if (v95 && !v112)
  {
    *(void *)&long long v236 = 0;
    unint64_t v112 = sub_1DDB6745C(v95, (const char *)&v236, v114, v115, v116);
  }
  unint64_t v117 = objc_msgSend_count(v86, v113, v114, v115, v116);
  uint64_t v122 = objc_msgSend_count(v95, v118, v119, v120, v121);
  int v239 = objc_msgSend_intValue(v229, v123, v124, v125, v126);
  LODWORD(v236) = objc_msgSend_intValue(v112, v127, v128, v129, v130);
  sub_1DDA1B3CC(&v238, (unsigned int *)&v236);
  if (v228 && v227 && v226 && v117 && v122 && v117 == v122)
  {
    uint64_t v131 = sub_1DDBA1814((uint64_t)a1);
    objc_msgSend_stringWithFormat_(NSString, v132, @"%@/%@", v133, v134, v5, @"_PlanarConfiguration");
    uint64_t v135 = (char *)objc_claimAutoreleasedReturnValue();
    uint64_t v221 = sub_1DDA357A8(v131, v135, v136, v137, v138);

    int v139 = sub_1DDBA1814((uint64_t)a1);
    objc_msgSend_stringWithFormat_(NSString, v140, @"%@/%@", v141, v142, v5, *MEMORY[0x1E4F2FD78]);
    int v143 = (char *)objc_claimAutoreleasedReturnValue();
    uint64_t v147 = sub_1DDA357A8(v139, v143, v144, v145, v146);

    if ((v77 & 0xFFFFFFFE) != 6 || v117 != 1)
    {
      uint64_t v152 = v221;
      if (v77 == 1
        && (!v221 || objc_msgSend_intValue(v221, v148, v149, v150, v151) == 1)
        && (!v147 || objc_msgSend_intValue(v147, v148, v149, v150, v151) == 2))
      {
        long long v236 = 0uLL;
        int v237 = 0;
        long long __p = 0;
        int v234 = 0;
        int v235 = 0;
        LODWORD(v231) = 0;
        sub_1DDA1B3CC(&v232, (unsigned int *)&v231);
        uint64_t v181 = 0;
        for (unsigned int i = 0; i < v117; v181 = ++i)
        {
          *(void *)&long long v231 = v181;
          int v183 = sub_1DDB66788(v86, (const char *)&v231, v178, v179, v180);
          int v239 = v183;
          *(void *)&long long v231 = v181;
          v230[0] = sub_1DDB66788(v95, (const char *)&v231, v184, v185, v186);
          sub_1DDA1B354(&v238, v230);
          BOOL v187 = (char *)*((void *)&v236 + 1);
          if (*((void *)&v236 + 1) >= (unint64_t)v237)
          {
            uint64_t v189 = (char *)v236;
            uint64_t v190 = (uint64_t)(*((void *)&v236 + 1) - v236) >> 2;
            unint64_t v191 = v190 + 1;
            if ((unint64_t)(v190 + 1) >> 62) {
              sub_1DDA17F78();
            }
            uint64_t v192 = (uint64_t)&v237[-v236];
            if ((uint64_t)&v237[-v236] >> 1 > v191) {
              unint64_t v191 = v192 >> 1;
            }
            if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v193 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v193 = v191;
            }
            if (v193)
            {
              uint64_t v194 = (char *)sub_1DDA17F90((uint64_t)&v237, v193);
              BOOL v187 = (char *)*((void *)&v236 + 1);
              uint64_t v189 = (char *)v236;
            }
            else
            {
              uint64_t v194 = 0;
            }
            float v195 = (int *)&v194[4 * v190];
            *float v195 = v183;
            uint64_t v188 = v195 + 1;
            while (v187 != v189)
            {
              int v196 = *((_DWORD *)v187 - 1);
              v187 -= 4;
              *--float v195 = v196;
            }
            *(void *)&long long v236 = v195;
            *((void *)&v236 + 1) = v188;
            int v237 = &v194[4 * v193];
            if (v189) {
              operator delete(v189);
            }
          }
          else
          {
            **((_DWORD **)&v236 + 1) = v183;
            uint64_t v188 = v187 + 4;
          }
          *((void *)&v236 + 1) = v188;
          unsigned int v197 = v238;
          uint64_t v198 = v234;
          if (v234 >= v235)
          {
            uint64_t v200 = (char *)__p;
            uint64_t v201 = (v234 - (unsigned char *)__p) >> 2;
            unint64_t v202 = v201 + 1;
            if ((unint64_t)(v201 + 1) >> 62) {
              sub_1DDA17F78();
            }
            uint64_t v203 = v235 - (unsigned char *)__p;
            if ((v235 - (unsigned char *)__p) >> 1 > v202) {
              unint64_t v202 = v203 >> 1;
            }
            if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v204 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v204 = v202;
            }
            if (v204)
            {
              uint64_t v205 = (char *)sub_1DDA17F90((uint64_t)&v235, v204);
              uint64_t v200 = (char *)__p;
              uint64_t v198 = v234;
            }
            else
            {
              uint64_t v205 = 0;
            }
            uint64_t v206 = (unsigned int *)&v205[4 * v201];
            *uint64_t v206 = v197;
            uint64_t v199 = (char *)(v206 + 1);
            while (v198 != v200)
            {
              unsigned int v207 = *((_DWORD *)v198 - 1);
              v198 -= 4;
              *--uint64_t v206 = v207;
            }
            long long __p = v206;
            int v234 = v199;
            int v235 = &v205[4 * v204];
            if (v200) {
              operator delete(v200);
            }
          }
          else
          {
            *(_DWORD *)int v234 = v238;
            uint64_t v199 = v198 + 4;
          }
          int v234 = v199;
          sub_1DDA47EF8(&v232, &v238);
        }
        if (*((void *)&v236 + 1) == (void)v236) {
          sub_1DDA24AD0();
        }
        unsigned int v208 = *(_DWORD *)v236;
        sub_1DDB57070((uint64_t)a1, &v231);
        v230[0] = (*(uint64_t (**)(void))(*(void *)v231 + 16))(v231);
        unsigned int v213 = *sub_1DDA4C118(v230, &v232);
        if (*((void *)&v231 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v231 + 1));
        }
        BOOL v214 = v208 > v213;
        uint64_t v152 = v221;
        if (!v214)
        {
          unsigned int v215 = objc_msgSend_intValue(v228, v209, v210, v211, v212);
          unsigned int v220 = objc_msgSend_intValue(v227, v216, v217, v218, v219);
          v230[0] = v215;
          v230[1] = v220;
          sub_1DDA4C194((uint64_t)v230, &v240, &v231);
          *uint64_t v222 = v231;
        }
        if (__p)
        {
          int v234 = (char *)__p;
          operator delete(__p);
        }
        if ((void)v236)
        {
          *((void *)&v236 + 1) = v236;
          operator delete((void *)v236);
        }
      }
      goto LABEL_80;
    }
    uint64_t v152 = v221;
    sub_1DDA18410((int *)&__p, &v239);
    sub_1DDB9FD50(a1, (int *)&__p, &v238, v240, &v236);
  }
  else
  {
    uint64_t v153 = sub_1DDBA1814((uint64_t)a1);
    objc_msgSend_stringWithFormat_(NSString, v154, @"%@/%@", v155, v156, v5, @"_JPEGInterchangeFormat");
    uint64_t v157 = (char *)objc_claimAutoreleasedReturnValue();
    uint64_t v161 = sub_1DDA357A8(v153, v157, v158, v159, v160);

    int v162 = sub_1DDBA1814((uint64_t)a1);
    objc_msgSend_stringWithFormat_(NSString, v163, @"%@/%@", v164, v165, v5, @"_JPEGInterchangeFormatLength");
    uint64_t v166 = (char *)objc_claimAutoreleasedReturnValue();
    uint64_t v147 = sub_1DDA357A8(v162, v166, v167, v168, v169);

    uint64_t v152 = v161;
    if (!v161 || !v147) {
      goto LABEL_80;
    }
    LODWORD(__p) = objc_msgSend_intValue(v161, v170, v171, v172, v173);
    v230[0] = objc_msgSend_intValue(v147, v174, v175, v176, v177);
    sub_1DDA1B3CC(&v231, v230);
    sub_1DDB9FD50(a1, (int *)&__p, (unsigned int *)&v231, v240, &v236);
  }
  *uint64_t v222 = v236;
LABEL_80:

  id v14 = v223;
LABEL_81:
}

void sub_1DDBA8BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v34 = *(void **)(v32 - 128);
  if (v34)
  {
    *(void *)(v32 - 120) = v34;
    operator delete(v34);
  }

  uint64_t v35 = *(std::__shared_weak_count **)(a15 + 8);
  if (v35) {
    sub_1DDA18310(v35);
  }

  _Unwind_Resume(a1);
}

void sub_1DDBA8EB8(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  memset(v13, 0, sizeof(v13));
  sub_1DDBA8208(a1, @"IFD0", &v12);
  sub_1DDBA8208(a1, @"IFD1", &v11);
  sub_1DDBA8208(a1, @"IFD0/SubIFD0", &v10);
  sub_1DDBA8208(a1, @"IFD0/SubIFD1", &v9);
  sub_1DDBA8208(a1, @"IFD0/SubIFD2", &v8);
  uint64_t v6 = v12;
  if ((void)v12)
  {
    int v7 = *(_DWORD *)(v12 + 16);
    if (v7)
    {
      if (!(void)v11 || *(_DWORD *)(v11 + 16) || (*(_DWORD *)(v11 + 16) = v7, (int v7 = *(_DWORD *)(v6 + 16)) != 0))
      {
        if (!(void)v10 || *(_DWORD *)(v10 + 16) || (*(_DWORD *)(v10 + 16) = v7, (int v7 = *(_DWORD *)(v6 + 16)) != 0))
        {
          if (!(void)v9 || *(_DWORD *)(v9 + 16) || (*(_DWORD *)(v9 + 16) = v7, (int v7 = *(_DWORD *)(v6 + 16)) != 0))
          {
            if ((void)v8 && !*(_DWORD *)(v8 + 16)) {
              *(_DWORD *)(v8 + 16) = v7;
            }
          }
        }
      }
    }
    sub_1DDA480D4((uint64_t *)v13, &v12);
  }
  if ((void)v11) {
    sub_1DDA480D4((uint64_t *)v13, &v11);
  }
  if ((void)v10) {
    sub_1DDA480D4((uint64_t *)v13, &v10);
  }
  if ((void)v9) {
    sub_1DDA480D4((uint64_t *)v13, &v9);
  }
  if ((void)v8) {
    sub_1DDA480D4((uint64_t *)v13, &v8);
  }
  sub_1DDBA0184(v13, a2, a3);
  if (*((void *)&v8 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v8 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v9 + 1));
  }
  if (*((void *)&v10 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (*((void *)&v11 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v11 + 1));
  }
  if (*((void *)&v12 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v12 + 1));
  }
  *(void *)&long long v12 = v13;
  sub_1DDA18270((void ***)&v12);
}

void sub_1DDBA908C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, void **a18, std::__shared_weak_count *a19)
{
  if (a13) {
    sub_1DDA18310(a13);
  }
  if (a15) {
    sub_1DDA18310(a15);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  if (a19) {
    sub_1DDA18310(a19);
  }
  a18 = (void **)(v19 - 56);
  sub_1DDA18270(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA910C(uint64_t a1)
{
  unsigned int v2 = sub_1DDBA1778(a1);
  uint64_t v3 = (void *)*MEMORY[0x1E4F2F7C0];
  BOOL v4 = sub_1DDBA6568(v2, @"{PictStyleSetting}", (void *)*MEMORY[0x1E4F2F7C0]);

  if (v4)
  {
    id v5 = sub_1DDBA1778(a1);
    uint64_t v6 = sub_1DDBA65E8(v5, @"{PictStyleSetting}", v3);
  }
  else
  {
    int v7 = sub_1DDBA91F8(a1);
    BOOL v8 = sub_1DDA2E4E0(v7, v3);

    if (!v8) {
      return 0xFFFFFFFFLL;
    }
    id v5 = sub_1DDBA91F8(a1);
    uint64_t v6 = sub_1DDA2E1C4(v5, (const char *)v3, v9, v10, v11);
  }
  uint64_t v12 = v6;

  return v12;
}

void sub_1DDBA91DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDBA91F8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 176);
  if (v1)
  {
    id v2 = v1;
  }
  else
  {
    uint64_t v3 = sub_1DDBA1778(a1);
    sub_1DDA2E3A8(v3, (void *)*MEMORY[0x1E4F2F800], 0);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

void sub_1DDBA9268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBA9278()
{
  return 0;
}

id sub_1DDBA9280(uint64_t a1)
{
  uint64_t v1 = sub_1DDBA1778(a1);
  id v2 = sub_1DDBA64D4(v1, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F700]);

  if (!v2 || objc_msgSend_count(v2, v3, v4, v5, v6) != 4)
  {
    uint64_t v28 = 0;
    goto LABEL_18;
  }
  uint64_t v31 = 0;
  double v10 = sub_1DDB667D0(v2, (const char *)&v31, v7, v8, v9);
  uint64_t v31 = 1;
  double v14 = sub_1DDB667D0(v2, (const char *)&v31, v11, v12, v13);
  uint64_t v31 = 2;
  double v18 = sub_1DDB667D0(v2, (const char *)&v31, v15, v16, v17);
  uint64_t v31 = 3;
  double v25 = sub_1DDB667D0(v2, (const char *)&v31, v19, v20, v21);
  double v26 = vabdd_f64(v14, v10);
  if (v18 > 0.0 && v25 > 0.0)
  {
    double v27 = vabdd_f64(v18, v25);
    if (v26 >= 0.01)
    {
      if (v27 >= 0.01)
      {
        uint64_t v29 = objc_msgSend_stringWithFormat_(NSString, v22, @"%.1f-%.1f mm f/%.1f-%.1f", v23, v24, *(void *)&v10, *(void *)&v14, *(void *)&v18, *(void *)&v25);
        goto LABEL_17;
      }
      objc_msgSend_stringWithFormat_(NSString, v22, @"%.1f-%.1f mm f/%.1f", v23, v24, *(void *)&v10, *(void *)&v14, *(void *)&v18);
    }
    else if (v27 >= 0.01)
    {
      objc_msgSend_stringWithFormat_(NSString, v22, @"%.1f mm f/%.1f-%.1f", v23, v24, *(void *)&v10, *(void *)&v18, *(void *)&v25);
    }
    else
    {
      objc_msgSend_stringWithFormat_(NSString, v22, @"%.1f mm f/%.1f", v23, v24, *(void *)&v10, *(void *)&v18);
    }
    goto LABEL_12;
  }
  if (v26 >= 0.01)
  {
    objc_msgSend_stringWithFormat_(NSString, v22, @"%.1f-%.1f mm", v23, v24, *(void *)&v10, *(void *)&v14);
    uint64_t v29 = LABEL_12:;
    goto LABEL_17;
  }
  uint64_t v29 = objc_msgSend_stringWithFormat_(NSString, v22, @"%.1f mm", v23, v24, *(void *)&v10);
LABEL_17:
  uint64_t v28 = (void *)v29;
LABEL_18:

  return v28;
}

void sub_1DDBA9450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBA9484(char *a1, _OWORD *a2, char a3)
{
  sub_1DDBAA264(__p, 1uLL, a2);
  sub_1DDBA94FC(a1, (uint64_t)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DDBA94E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DDBA94FC(char *result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0 || *((void *)result + 9) == *((void *)result + 10))
  {
    result += 72;
    if (result != (char *)a2) {
      return sub_1DDBAA2E8(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    }
  }
  return result;
}

uint64_t sub_1DDBA9530(uint64_t result, void *a2, char a3)
{
  if ((a3 & 1) != 0 || !*(_DWORD *)(result + 64) || !*(_DWORD *)(result + 68)) {
    *(void *)(result + 64) = *a2;
  }
  return result;
}

uint64_t sub_1DDBA9554(void *a1, unint64_t a2, unint64_t a3, char a4)
{
  unint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v8 = (void **)(a1 + 12);
  uint64_t v7 = (char *)a1[12];
  if ((a4 & 1) == 0 && v7 != (char *)a1[13]) {
    return 0;
  }
  a1[13] = v7;
  if (!(a2 | a3)) {
    return 1;
  }
  int v10 = 0;
  uint64_t v11 = a1 + 14;
  do
  {
    if (v5)
    {
      if ((unint64_t)v7 >= *v11)
      {
        uint64_t v13 = (char *)*v8;
        uint64_t v14 = (v7 - (unsigned char *)*v8) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          sub_1DDA17F78();
        }
        uint64_t v16 = *v11 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          double v18 = (char *)sub_1DDA17F90((uint64_t)(a1 + 14), v17);
          uint64_t v13 = (char *)a1[12];
          uint64_t v7 = (char *)a1[13];
        }
        else
        {
          double v18 = 0;
        }
        uint64_t v19 = &v18[4 * v14];
        *(_DWORD *)uint64_t v19 = v10;
        uint64_t v12 = v19 + 4;
        while (v7 != v13)
        {
          int v20 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        a1[12] = v19;
        a1[13] = v12;
        a1[14] = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v7 = v10;
        uint64_t v12 = v7 + 4;
      }
      a1[13] = v12;
      uint64_t v7 = v12;
    }
    ++v10;
    uint64_t result = 1;
    BOOL v21 = v5 <= 1;
    *((void *)&v22 + 1) = v4;
    *(void *)&long long v22 = v5;
    unint64_t v5 = v22 >> 1;
    v4 >>= 1;
  }
  while (!v21);
  return result;
}

uint64_t sub_1DDBA96A8(void *a1, unint64_t a2, unint64_t a3, char a4)
{
  unint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v8 = (void **)(a1 + 15);
  uint64_t v7 = (char *)a1[15];
  if ((a4 & 1) == 0 && v7 != (char *)a1[16]) {
    return 0;
  }
  a1[16] = v7;
  if (!(a2 | a3)) {
    return 1;
  }
  int v10 = 0;
  uint64_t v11 = a1 + 17;
  do
  {
    if (v5)
    {
      if ((unint64_t)v7 >= *v11)
      {
        uint64_t v13 = (char *)*v8;
        uint64_t v14 = (v7 - (unsigned char *)*v8) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          sub_1DDA17F78();
        }
        uint64_t v16 = *v11 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          double v18 = (char *)sub_1DDA17F90((uint64_t)(a1 + 17), v17);
          uint64_t v13 = (char *)a1[15];
          uint64_t v7 = (char *)a1[16];
        }
        else
        {
          double v18 = 0;
        }
        uint64_t v19 = &v18[4 * v14];
        *(_DWORD *)uint64_t v19 = v10;
        uint64_t v12 = v19 + 4;
        while (v7 != v13)
        {
          int v20 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        a1[15] = v19;
        a1[16] = v12;
        a1[17] = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v7 = v10;
        uint64_t v12 = v7 + 4;
      }
      a1[16] = v12;
      uint64_t v7 = v12;
    }
    ++v10;
    uint64_t result = 1;
    BOOL v21 = v5 <= 1;
    *((void *)&v22 + 1) = v4;
    *(void *)&long long v22 = v5;
    unint64_t v5 = v22 >> 1;
    v4 >>= 1;
  }
  while (!v21);
  return result;
}

void sub_1DDBA97FC(const void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_1DDA83C7C();
  uint64_t v8 = v7;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v8, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "ReadRawTiffPropsFromSession", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = sub_1DDBA9D78;
  uint64_t v16[3] = &unk_1E6D04A58;
  v16[4] = a1;
  uint64_t v9 = (void (**)(void))MEMORY[0x1E01C46E0](v16);
  int v10 = (void *)MEMORY[0x1E01C4510]();
  sub_1DDA19A18(a1, &v15);
  LODWORD(v12) = 0;
  sub_1DDA49398((uint64_t)buf, (uint64_t *)&v15, &v12);
  sub_1DDB9F680((uint64_t *)&v15, v5, v6, 0, &v12);
  if (!v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (**v12)(v12);
  if (v13) {
    sub_1DDA18310(v13);
  }
  sub_1DDA49424((uint64_t)buf);
  if (*((void *)&v15 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v15 + 1));
  }
  v9[2](v9);
}

void sub_1DDBA99E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1DDA18310(a15);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDBA992CLL);
}

void sub_1DDBA9A54()
{
  (*(void (**)(uint64_t))(v0 + 16))(v0);
  JUMPOUT(0x1DDBA9A68);
}

void ReadMakerNoteProps(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = a2;
  int v10 = sub_1DDA83C7C();
  uint64_t v11 = v10;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v11, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "ReadMakerNoteProps", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  _OWORD v21[2] = sub_1DDBA9CF0;
  v21[3] = &unk_1E6D04A58;
  v21[4] = a1;
  uint64_t v12 = (void (**)(void))MEMORY[0x1E01C46E0](v21);
  uint64_t v13 = (void *)MEMORY[0x1E01C4510]();
  if (a1 && v9)
  {
    sub_1DDA19A18(a1, buf);
    sub_1DDB9F680((uint64_t *)buf, v9, 0, 1, &v18);
    if (v18)
    {
      unint64_t v17 = sub_1DDA2E3A8(v9, @"__ExifProperties", 0);
      if (v17) {
        objc_msgSend_removeObjectForKey_(v9, v14, @"__ExifProperties", v15, v16);
      }
      (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void, void *))(*(void *)v18 + 8))(v18, a3, 0, a4, a5, 0, v17);
    }
    if (v19) {
      sub_1DDA18310(v19);
    }
    if (*(void *)&buf[8]) {
      sub_1DDA18310(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  v12[2](v12);
}

void sub_1DDBA9C70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  if (a12) {
    sub_1DDA18310(a12);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDBA9BF0);
}

void sub_1DDBA9CB8(_Unwind_Exception *a1)
{
  v2[2](v2);

  _Unwind_Resume(a1);
}

void sub_1DDBA9CF0(uint64_t a1)
{
  id v2 = sub_1DDA83C7C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)id v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ReadMakerNoteProps", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDBA9D78(uint64_t a1)
{
  id v2 = sub_1DDA83C7C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)id v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ReadRawTiffPropsFromSession", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDBA9E00(os_signpost_id_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_1DDA83C7C();
  uint64_t v8 = v7;
  if (a1 + 1 >= 2 && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v8, OS_SIGNPOST_INTERVAL_BEGIN, a1, "ReadRawTiffPropsFromPath", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = sub_1DDBAA088;
  uint64_t v16[3] = &unk_1E6D04A58;
  v16[4] = a1;
  id v9 = (void (**)(void))MEMORY[0x1E01C46E0](v16);
  int v10 = (void *)MEMORY[0x1E01C4510]();
  sub_1DDA1997C(a1, 0, &v15);
  LODWORD(v12) = 0;
  sub_1DDA49398((uint64_t)buf, (uint64_t *)&v15, &v12);
  sub_1DDB9F680((uint64_t *)&v15, v5, v6, 0, &v12);
  if (!v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (**v12)(v12);
  if (v13) {
    sub_1DDA18310(v13);
  }
  sub_1DDA49424((uint64_t)buf);
  if (*((void *)&v15 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v15 + 1));
  }
  v9[2](v9);
}

void sub_1DDBA9FF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1DDA18310(a15);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDBA9F34);
}

void sub_1DDBAA05C()
{
  (*(void (**)(uint64_t))(v0 + 16))(v0);
  JUMPOUT(0x1DDBAA070);
}

void sub_1DDBAA088(uint64_t a1)
{
  id v2 = sub_1DDA83C7C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)id v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ReadRawTiffPropsFromPath", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDBAA110(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 193);
}

void sub_1DDBAA11C(uint64_t a1)
{
  sub_1DDBAA3F4(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDBAA154(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DDA1AC10(a1, a2);
    os_signpost_id_t v4 = (char *)a1[1];
    id v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1DDBAA1AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDBAA1C8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DDAD6A4C(a1, a2);
    os_signpost_id_t v4 = (char *)a1[1];
    size_t v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DDBAA248(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDBAA264(void *a1, unint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DDA197F4(a1, a2);
    id v6 = (_OWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DDBAA2CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DDBAA2E8(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  id v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      sub_1DDA17F78();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_1DDA197F4(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    id v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    id v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t sub_1DDBAA3F4(uint64_t a1)
{
  *(void *)a1 = &unk_1F3988FD8;

  id v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  size_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)a1 = &unk_1F3986970;
  id v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6) {
    sub_1DDA18310(v6);
  }
  return a1;
}

void sub_1DDBAA4C0(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  sub_1DDBAA54C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBAA538(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDBAA54C(void *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3989100;
  sub_1DDBAA64C((uint64_t)(a1 + 3), a2, *a3, *a4);
  return a1;
}

void sub_1DDBAA59C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBAA5B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3989100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBAA5D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3989100;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBAA624(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

uint64_t sub_1DDBAA64C(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  sub_1DDBA0350(a1, a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1F3988FD8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  id v9 = v8;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = v9;
  id v10 = v7;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = v10;
  *(_DWORD *)(a1 + 191) = 0;
  uint64_t v15 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v11, v12, v13, v14);
  uint64_t v16 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = v15;

  return a1;
}

void sub_1DDBAA728(_Unwind_Exception *a1)
{
  size_t v5 = *(void **)(v2 + 120);
  if (v5)
  {
    *(void *)(v2 + 128) = v5;
    operator delete(v5);
  }
  id v6 = *(void **)(v2 + 96);
  if (v6)
  {
    *(void *)(v2 + 104) = v6;
    operator delete(v6);
  }
  id v7 = *(void **)(v2 + 72);
  if (v7)
  {
    *(void *)(v2 + 80) = v7;
    operator delete(v7);
  }

  id v8 = *(std::__shared_weak_count **)(v2 + 48);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)uint64_t v2 = &unk_1F3986970;
  id v9 = *(std::__shared_weak_count **)(v2 + 16);
  if (v9) {
    sub_1DDA18310(v9);
  }

  _Unwind_Resume(a1);
}

void *sub_1DDBAA7D0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DDA18108(a1, a2);
    os_signpost_id_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DDBAA82C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDBAA848(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  objc_msgSend_numberWithUnsignedInt_(NSNumber, a2, a8, a4, a5);
  id v19 = (id)objc_claimAutoreleasedReturnValue();
  id v10 = sub_1DDBA1814(a1);
  objc_msgSend_setObject_forKeyedSubscript_(v10, v11, (uint64_t)v19, @"JPEGImage/Offset", v12);

  objc_msgSend_numberWithUnsignedInt_(NSNumber, v13, a7, v14, v15);
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = sub_1DDBA1814(a1);
  objc_msgSend_setObject_forKeyedSubscript_(v16, v17, (uint64_t)v20, @"JPEGImage/Length", v18);
}

void sub_1DDBAA90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAA93C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  objc_msgSend_numberWithUnsignedInt_(NSNumber, a2, a8, a4, a5);
  id v19 = (id)objc_claimAutoreleasedReturnValue();
  id v10 = sub_1DDBA1814(a1);
  objc_msgSend_setObject_forKeyedSubscript_(v10, v11, (uint64_t)v19, @"JPEGThumbnail/Offset", v12);

  objc_msgSend_numberWithUnsignedInt_(NSNumber, v13, a7, v14, v15);
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = sub_1DDBA1814(a1);
  objc_msgSend_setObject_forKeyedSubscript_(v16, v17, (uint64_t)v20, @"JPEGThumbnail/Length", v18);
}

void sub_1DDBAAA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAAA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  char v26 = 0;
  memset(v25, 0, sizeof(v25));
  uint64_t v10 = sub_1DDBA1314(a1, (uint64_t)v25, 64, 0, a8);
  if (v10)
  {
    *((unsigned char *)v25 + v10) = 0;
    size_t v11 = strlen((const char *)v25);
    if (v11 <= 0x27)
    {
      size_t v12 = v11;
      uint64_t v13 = sub_1DDBA1778(a1);
      uint64_t v14 = sub_1DDBA17F8(a2);
      uint64_t v18 = objc_msgSend_stringWithUTF8String_(NSString, v15, (uint64_t)v25, v16, v17);
      sub_1DDA784D0(v13, v14, (void *)*MEMORY[0x1E4F2FD60], v18);

      if (v12 + strlen((const char *)v25 + v12 + 1) - 62 >= 0xFFFFFFFFFFFFFFC0)
      {
        id v19 = sub_1DDBA1778(a1);
        id v20 = sub_1DDBA17F8(a2);
        uint64_t v24 = objc_msgSend_stringWithUTF8String_(NSString, v21, (uint64_t)v25 + v12 + 1, v22, v23);
        sub_1DDA784D0(v19, v20, (void *)*MEMORY[0x1E4F2FD68], v24);
      }
    }
  }
}

void sub_1DDBAABC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAAC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  if (a7 <= 0x1FF)
  {
    sub_1DDBA17F8(a2);
    id v43 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_length(v43, v12, v13, v14, v15))
    {
      uint64_t v16 = sub_1DDBA175C(a2);
      uint64_t v21 = objc_msgSend_length(v16, v17, v18, v19, v20);

      if (!a7 || !v21) {
        return;
      }
      sub_1DDBA1894(a1, 0, a8, a7, 1);
      id v43 = (id)objc_claimAutoreleasedReturnValue();
      if (sub_1DDB9FCD0(v43, @"Firmware Version ", 0))
      {
        uint64_t v26 = objc_msgSend_length(@"Firmware Version ", v22, v23, v24, v25);
        uint64_t v31 = objc_msgSend_length(v43, v27, v28, v29, v30);
        uint64_t v36 = objc_msgSend_length(@"Firmware Version ", v32, v33, v34, v35);
        uint64_t v39 = objc_msgSend_substringWithRange_(v43, v37, v26, v31 - v36, v38);

        id v43 = (id)v39;
      }
      uint64_t v40 = sub_1DDBA1778(a1);
      uint64_t v41 = sub_1DDBA17F8(a2);
      uint64_t v42 = sub_1DDBA175C(a2);
      sub_1DDA784D0(v40, v41, v42, v43);
    }
  }
}

void sub_1DDBAAD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAADE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a3)
  {
    unsigned int v10 = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
    if (a9) {
      unsigned __int16 v11 = v10;
    }
    else {
      unsigned __int16 v11 = *(_WORD *)(a3 + 4);
    }
    sub_1DDBA1778(a1);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    size_t v12 = sub_1DDBA17F8(a2);
    uint64_t v13 = sub_1DDBA175C(a2);
    uint64_t v17 = objc_msgSend_numberWithInt_(NSNumber, v14, v11, v15, v16);
    sub_1DDA784D0(v18, v12, v13, v17);
  }
}

void sub_1DDBAAEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1DDBAAEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  sub_1DDBA5730(a1, 1);
  id v91 = (id)objc_claimAutoreleasedReturnValue();
  unsigned __int16 v11 = sub_1DDBA1778(a1);
  size_t v12 = sub_1DDA7A98C(v11, (void *)*MEMORY[0x1E4F2F6D8], 0);

  sub_1DDBAE010(a1, a8, a9);
  unsigned int v13 = sub_1DDBAE0CC(a1, a8 + 4, a9);
  if (v13 == 268) {
    uint64_t v14 = 1000;
  }
  else {
    uint64_t v14 = (int)(exp2((float)((float)v13 * 0.03125)) * 50.0 * 0.0625);
  }
  uint64_t v15 = sub_1DDBA57C0(v91, (void *)*MEMORY[0x1E4F2F878]);
  uint64_t v19 = objc_msgSend_numberWithInt_(NSNumber, v16, v14, v17, v18);
  objc_msgSend_addObject_(v15, v20, (uint64_t)v19, v21, v22);

  uint64_t v23 = sub_1DDBAE0CC(a1, a8 + 14, a9);
  uint64_t v24 = sub_1DDBA1778(a1);
  uint64_t v28 = objc_msgSend_numberWithInt_(NSNumber, v25, v23, v26, v27);
  sub_1DDA784D0(v24, (void *)*MEMORY[0x1E4F2F548], (void *)*MEMORY[0x1E4F2F570], v28);

  sub_1DDBAE0CC(a1, a8 + 6, a9);
  unsigned int v29 = sub_1DDBAE0CC(a1, a8 + 8, a9);
  float v30 = exp2((float)((float)((float)v29 * 0.03125) * 0.5));
  BOOL v31 = v30 <= 10.0;
  float v32 = roundf(v30 * 10.0);
  float v33 = roundf(v30);
  if (v31) {
    float v34 = v32 / 10.0;
  }
  else {
    float v34 = v33;
  }
  float v35 = log2f(v34);
  *(float *)&double v36 = roundf((float)((float)(int)sub_1DDBAE190(a1, a8 + 12, a9) * 0.03125) * 6.0) / 6.0;
  uint64_t v41 = objc_msgSend_numberWithFloat_(NSNumber, v37, v38, v39, v40, v36);
  objc_msgSend_setObject_forKeyedSubscript_(v91, v42, (uint64_t)v41, *MEMORY[0x1E4F2F810], v43);

  __int16 v44 = sub_1DDBAE0CC(a1, a8 + 28, a9);
  if ((v44 & 0xFFF0) == 0x3000) {
    *(_WORD *)(a1 + 206) = v44 & 0xF;
  }
  *(float *)&double v45 = roundf((float)((float)(__int16)sub_1DDBAE0CC(a1, a8 + 30, a9) * 0.03125) * 6.0) / 6.0;
  uint64_t v50 = objc_msgSend_numberWithFloat_(NSNumber, v46, v47, v48, v49, v45);
  objc_msgSend_setObject_forKeyedSubscript_(v12, v51, (uint64_t)v50, *MEMORY[0x1E4F2F6E8], v52);

  sub_1DDBAE0CC(a1, a8 + 32, a9);
  sub_1DDBAE010(a1, a8 + 34, a9);
  sub_1DDBAE0CC(a1, a8 + 38, a9);
  sub_1DDBAE0CC(a1, a8 + 40, a9);
  int v53 = sub_1DDBAE190(a1, a8 + 44, a9);
  uint64_t v54 = sub_1DDBAE190(a1, a8 + 48, a9);
  int v55 = v54;
  float v56 = v35 + v35;
  float v57 = sub_1DDBACA10(v54, v53);
  *(float *)&double v62 = log2f(v57);
  if (v55)
  {
    float v57 = (float)v55 / 10.0;
    *(float *)&double v62 = log2f(v57);
  }
  float v63 = -*(float *)&v62;
  *(float *)&double v62 = v56;
  uint64_t v64 = objc_msgSend_numberWithFloat_(NSNumber, v58, v59, v60, v61, v62);
  objc_msgSend_setObject_forKeyedSubscript_(v91, v65, (uint64_t)v64, *MEMORY[0x1E4F2F6D0], v66);

  *(float *)&double v67 = v34;
  uint64_t v72 = objc_msgSend_numberWithFloat_(NSNumber, v68, v69, v70, v71, v67);
  objc_msgSend_setObject_forKeyedSubscript_(v91, v73, (uint64_t)v72, *MEMORY[0x1E4F2F830], v74);

  *(float *)&double v75 = v63;
  uint64_t v80 = objc_msgSend_numberWithFloat_(NSNumber, v76, v77, v78, v79, v75);
  objc_msgSend_setObject_forKeyedSubscript_(v91, v81, (uint64_t)v80, *MEMORY[0x1E4F2F920], v82);

  *(float *)&double v83 = v57;
  uint64_t v88 = objc_msgSend_numberWithFloat_(NSNumber, v84, v85, v86, v87, v83);
  objc_msgSend_setObject_forKeyedSubscript_(v91, v89, (uint64_t)v88, *MEMORY[0x1E4F2F828], v90);

  sub_1DDBAE190(a1, a8 + 46, a9);
  sub_1DDBAE190(a1, a8 + 48, a9);
}

void sub_1DDBAB3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAB45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  sub_1DDBA5730(a1, 1);
  id v156 = (id)objc_claimAutoreleasedReturnValue();
  unsigned __int16 v11 = sub_1DDBA1778(a1);
  size_t v12 = sub_1DDA7A98C(v11, (void *)*MEMORY[0x1E4F2F6D8], 0);

  uint64_t v155 = v12;
  unsigned int v13 = sub_1DDBA1778(a1);
  uint64_t v14 = sub_1DDA7A98C(v13, (void *)*MEMORY[0x1E4F2F548], 0);

  uint64_t v154 = v14;
  sub_1DDBAE0CC(a1, a8, a9);
  sub_1DDBAE0CC(a1, a8 + 2, a9);
  sub_1DDBAE0CC(a1, a8 + 4, a9);
  sub_1DDBAE0CC(a1, a8 + 6, a9);
  int v15 = sub_1DDBAE0CC(a1, a8 + 8, a9);
  if (v15)
  {
    if (v15 != 2) {
      goto LABEL_5;
    }
    LOWORD(v15) = 1;
  }
  uint64_t v19 = objc_msgSend_numberWithShort_(NSNumber, v16, (__int16)v15, v17, v18);
  objc_msgSend_setObject_forKeyedSubscript_(v156, v20, (uint64_t)v19, *MEMORY[0x1E4F2F838], v21);

LABEL_5:
  __int16 v22 = sub_1DDBAE0CC(a1, a8 + 10, a9);
  uint64_t v26 = objc_msgSend_numberWithShort_(NSNumber, v23, v22, v24, v25);
  objc_msgSend_setObject_forKeyedSubscript_(v14, v27, (uint64_t)v26, *MEMORY[0x1E4F2F540], v28);

  sub_1DDBAE0CC(a1, a8 + 12, a9);
  unsigned int v29 = sub_1DDBAE0CC(a1, a8 + 14, a9);
  float v33 = objc_msgSend_numberWithShort_(NSNumber, v30, (__int16)v29, v31, v32);
  objc_msgSend_setObject_forKeyedSubscript_(v14, v34, (uint64_t)v33, *MEMORY[0x1E4F2F550], v35);

  uint64_t v39 = (uint64_t *)MEMORY[0x1E4F2FC58];
  if (v29 < 7)
  {
    uint64_t v40 = objc_msgSend_numberWithInt_(NSNumber, v36, dword_1DDC0B378[(__int16)v29], v37, v38);
    objc_msgSend_setObject_forKeyedSubscript_(v12, v41, (uint64_t)v40, *v39, v42);
  }
  __int16 v43 = sub_1DDBAE0CC(a1, a8 + 22, a9);
  uint64_t v44 = sub_1DDBAE190(a1, a8 + 26, a9);
  uint64_t v45 = sub_1DDBAE190(a1, a8 + 28, a9);
  uint64_t v46 = sub_1DDBAE190(a1, a8 + 30, a9);
  HIDWORD(v151) = sub_1DDBAE190(a1, a8 + 84, a9);
  int v47 = sub_1DDBB0464(a1, v43);
  uint64_t v48 = sub_1DDBB0614(a1, v43);
  LODWORD(v151) = v47;
  uint64_t v49 = sub_1DDBA1778(a1);
  uint64_t v50 = sub_1DDA7A98C(v49, @"{PictStyleSetting}", 0);

  if (v48) {
    objc_msgSend_setObject_forKeyedSubscript_(v50, v51, (uint64_t)v48, @"PictureStyle", v53);
  }
  uint64_t v54 = objc_msgSend_numberWithShort_(NSNumber, v51, v46, v52, v53, v151);
  objc_msgSend_setObject_forKeyedSubscript_(v50, v55, (uint64_t)v54, *MEMORY[0x1E4F2F918], v56);

  uint64_t v60 = objc_msgSend_numberWithShort_(NSNumber, v57, v44, v58, v59);
  objc_msgSend_setObject_forKeyedSubscript_(v50, v61, (uint64_t)v60, *MEMORY[0x1E4F2F7D8], v62);

  uint64_t v66 = objc_msgSend_numberWithShort_(NSNumber, v63, v45, v64, v65);
  objc_msgSend_setObject_forKeyedSubscript_(v50, v67, (uint64_t)v66, *MEMORY[0x1E4F2F8F0], v68);

  uint64_t v72 = objc_msgSend_numberWithShort_(NSNumber, v69, v153, v70, v71);
  objc_msgSend_setObject_forKeyedSubscript_(v50, v73, (uint64_t)v72, @"ColorTone", v74);

  uint64_t v78 = objc_msgSend_numberWithShort_(NSNumber, v75, v152, v76, v77);
  objc_msgSend_setObject_forKeyedSubscript_(v50, v79, (uint64_t)v78, @"Monochrome", v80);

  int v84 = (__int16)sub_1DDBAE0CC(a1, a8 + 38, a9) - 12288;
  unsigned int v85 = 1;
  switch(v84)
  {
    case 0:
      goto LABEL_14;
    case 2:
      goto LABEL_12;
    case 3:
      unsigned int v85 = 2;
      goto LABEL_12;
    case 4:
      unsigned int v85 = 4;
LABEL_12:
      sub_1DDBACA84((char *)a1, 2, v85, 0);
      break;
    default:
      break;
  }
  uint64_t v86 = objc_msgSend_numberWithInt_(NSNumber, v81, 1, v82, v83);
  objc_msgSend_setObject_forKeyedSubscript_(v155, v87, (uint64_t)v86, *MEMORY[0x1E4F2FC58], v88);

LABEL_14:
  uint64_t v90 = sub_1DDBAE0CC(a1, a8 + 34, a9);
  if ((v90 - 1) >= 5)
  {
    uint64_t v93 = objc_msgSend_numberWithInt_(NSNumber, v89, v90, v91, v92);
    objc_msgSend_setObject_forKeyedSubscript_(v154, v96, (uint64_t)v93, *MEMORY[0x1E4F2F560], v97);
  }
  else
  {
    uint64_t v93 = objc_msgSend_numberWithShort_(NSNumber, v89, word_1DDC0B394[(__int16)(v90 - 1)], v91, v92);
    objc_msgSend_setObject_forKeyedSubscript_(v156, v94, (uint64_t)v93, *MEMORY[0x1E4F2F8B8], v95);
  }

  uint64_t v99 = sub_1DDBAE0CC(a1, a8 + 40, a9);
  if ((v99 - 1) >= 5)
  {
    uint64_t v102 = objc_msgSend_numberWithInt_(NSNumber, v98, v99, v100, v101);
    objc_msgSend_setObject_forKeyedSubscript_(v154, v105, (uint64_t)v102, *MEMORY[0x1E4F2F568], v106);
  }
  else
  {
    uint64_t v102 = objc_msgSend_numberWithShort_(NSNumber, v98, word_1DDC0B39E[(__int16)(v99 - 1)], v100, v101);
    objc_msgSend_setObject_forKeyedSubscript_(v156, v103, (uint64_t)v102, *MEMORY[0x1E4F2F820], v104);
  }

  uint64_t v107 = sub_1DDBAE0CC(a1, a8 + 44, a9);
  unsigned int v108 = sub_1DDBAE0CC(a1, a8 + 46, a9);
  unsigned int v109 = sub_1DDBAE0CC(a1, a8 + 48, a9);
  unsigned int v110 = sub_1DDBAE0CC(a1, a8 + 50, a9);
  sub_1DDBA47CC(a1, (float)((float)v109 / (float)v110), (float)((float)v108 / (float)v110), 0.0, 0.0);
  if (v110 >= 2) {
    *(_WORD *)(a1 + 204) = v110;
  }
  if ((unsigned __int16)(v107 - 1) <= 0xFFFDu)
  {
    uint64_t v114 = objc_msgSend_numberWithInt_(NSNumber, v111, v107, v112, v113);
    objc_msgSend_setObject_forKeyedSubscript_(v155, v115, (uint64_t)v114, *MEMORY[0x1E4F2F6F8], v116);
  }
  __int16 v117 = sub_1DDBAE0CC(a1, a8 + 52, a9);
  __int16 v118 = sub_1DDBAE0CC(a1, a8 + 54, a9);
  double v119 = sub_1DDBB0E98(a1, v117);
  double v120 = exp2(v119 * 0.5);
  double v121 = sub_1DDBB0E98(a1, v118);
  double v122 = exp2(v121 * 0.5);
  double v127 = objc_msgSend_numberWithDouble_(NSNumber, v123, v124, v125, v126, v120);
  objc_msgSend_setObject_forKeyedSubscript_(v156, v128, (uint64_t)v127, *MEMORY[0x1E4F2F8B0], v129);

  uint64_t v134 = objc_msgSend_numberWithDouble_(NSNumber, v130, v131, v132, v133, v120);
  objc_msgSend_setObject_forKeyedSubscript_(v154, v135, (uint64_t)v134, @"MaxAperture", v136);

  uint64_t v141 = objc_msgSend_numberWithDouble_(NSNumber, v137, v138, v139, v140, v122);
  objc_msgSend_setObject_forKeyedSubscript_(v154, v142, (uint64_t)v141, @"MinAperture", v143);

  unsigned int v144 = sub_1DDBAE0CC(a1, a8 + 68, a9);
  if (v144 >= 4) {
    objc_msgSend_numberWithInt_(NSNumber, v145, 3, v146, v147);
  }
  else {
  uint64_t v148 = objc_msgSend_numberWithInt_(NSNumber, v145, dword_1DDC0B110[(__int16)v144], v146, v147);
  }
  objc_msgSend_setObject_forKeyedSubscript_(v155, v149, (uint64_t)v148, @"ImageStabilization", v150);
}

void sub_1DDBABCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDBABE20(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  int v41 = sub_1DDBB0C1C((uint64_t)a1);
  unsigned int v11 = sub_1DDBAE0CC((uint64_t)a1, a8, a9);
  sub_1DDBAE0CC((uint64_t)a1, a8 + 2, a9);
  LODWORD(v45) = sub_1DDBAE0CC((uint64_t)a1, a8 + 8, a9);
  HIDWORD(v45) = sub_1DDBAE0CC((uint64_t)a1, a8 + 10, a9);
  int v12 = sub_1DDBAE0CC((uint64_t)a1, a8 + 12, a9);
  int v13 = sub_1DDBAE0CC((uint64_t)a1, a8 + 14, a9);
  if ((unsigned __int16)((unsigned __int16)(v11 - 65) >> 6) >= 0x3FFu)
  {
    int v14 = v13;
    uint64_t v15 = 0;
    long long __p = 0;
    __int16 v43 = 0;
    uint64_t v44 = 0;
    unsigned int v40 = v11;
    uint64_t v16 = v11;
    do
    {
      int v17 = sub_1DDBAE190((uint64_t)a1, a8 + 2 * ((int)v15 + 8), a9);
      int v18 = sub_1DDBAE190((uint64_t)a1, a8 + 2 * ((int)v15 + 8 + (int)v16), a9);
      if (v41) {
        int v19 = -v18;
      }
      else {
        int v19 = v18;
      }
      uint64_t v20 = v43;
      if (v43 >= v44)
      {
        __int16 v22 = (char *)__p;
        uint64_t v23 = (v43 - (unsigned char *)__p) >> 4;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60) {
          sub_1DDA17F78();
        }
        uint64_t v25 = v44 - (unsigned char *)__p;
        if ((v44 - (unsigned char *)__p) >> 3 > v24) {
          unint64_t v24 = v25 >> 3;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          uint64_t v27 = (char *)sub_1DDA19838((uint64_t)&v44, v26);
          __int16 v22 = (char *)__p;
          uint64_t v20 = v43;
        }
        else
        {
          uint64_t v27 = 0;
        }
        uint64_t v28 = &v27[16 * v23];
        *(_DWORD *)uint64_t v28 = v17;
        *((_DWORD *)v28 + 1) = v19;
        *((_DWORD *)v28 + 2) = v12;
        *((_DWORD *)v28 + 3) = v14;
        unsigned int v29 = v28;
        if (v20 != v22)
        {
          do
          {
            *((_OWORD *)v29 - 1) = *((_OWORD *)v20 - 1);
            v29 -= 16;
            v20 -= 16;
          }
          while (v20 != v22);
          __int16 v22 = (char *)__p;
        }
        uint64_t v21 = v28 + 16;
        long long __p = v29;
        __int16 v43 = v28 + 16;
        uint64_t v44 = &v27[16 * v26];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_DWORD *)__int16 v43 = v17;
        *((_DWORD *)v20 + 1) = v19;
        uint64_t v21 = v20 + 16;
        *((_DWORD *)v20 + 2) = v12;
        *((_DWORD *)v20 + 3) = v14;
      }
      __int16 v43 = v21;
      ++v15;
    }
    while (v15 != v16);
    char v30 = 0;
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    unint64_t v33 = 0;
    int v34 = a8 + 2 * ((2 * (_WORD)v40 + 8) & 0xFFFE);
    do
    {
      unsigned int v35 = sub_1DDBAE318((uint64_t)a1, v34 + (int)v31);
      for (int i = 0; i != 8; ++i)
      {
        uint64_t v37 = 1 << (v30 + i);
        if (((v30 + (_BYTE)i) & 0x40) != 0) {
          uint64_t v38 = 1 << (v30 + i);
        }
        else {
          uint64_t v38 = 0;
        }
        if (((v30 + (_BYTE)i) & 0x40) != 0) {
          uint64_t v37 = 0;
        }
        if ((v35 >> i)) {
          uint64_t v39 = v37;
        }
        else {
          uint64_t v39 = 0;
        }
        if (((v35 >> i) & 1) == 0) {
          uint64_t v38 = 0;
        }
        v33 |= v38;
        v32 |= v39;
      }
      ++v31;
      v30 += 8;
    }
    while (v31 != ((v40 - 1) >> 3) + 1);
    sub_1DDBA96A8(a1, v32, v33, 1);
    sub_1DDBA94FC(a1, (uint64_t)&__p, 1);
    sub_1DDBA9530((uint64_t)a1, &v45, 1);
    if (__p)
    {
      __int16 v43 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1DDBAC124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDBAC14C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, unsigned __int8 a9)
{
  if ((a5 & 1) == 0) {
    a7 = sub_1DDBAE010(a1, a8, a9);
  }
  *(_DWORD *)(a1 + 200) = a7;
  objc_msgSend_stringWithFormat_(NSString, a2, @"%010ld", a4, a5, a7);
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  unsigned int v11 = sub_1DDBA1778(a1);
  int v12 = sub_1DDBA17F8((uint64_t)a2);
  int v13 = sub_1DDBA175C((uint64_t)a2);
  sub_1DDA784D0(v11, v12, v13, v14);
}

void sub_1DDBAC224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v11;

  _Unwind_Resume(a1);
}

void sub_1DDBAC260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  time_t v20 = sub_1DDBAE010(a1, a8, a9);
  sub_1DDBAE010(a1, a8 + 4, a9);
  sub_1DDBAE010(a1, a8 + 8, a9);
  memset(&v19, 0, sizeof(v19));
  gmtime_r(&v20, &v19);
  uint64_t v15 = objc_msgSend_stringWithFormat_(NSString, v12, @"%.2d:%.2d:%.2d %.2d:%.2d:%.2d", v13, v14, (v19.tm_year + 1900), (v19.tm_mon + 1), v19.tm_mday, v19.tm_hour, v19.tm_min, v19.tm_sec);
  uint64_t v16 = sub_1DDBA1778(a1);
  int v17 = sub_1DDBA17F8(a2);
  int v18 = sub_1DDBA175C(a2);
  sub_1DDA784D0(v16, v17, v18, v15);
}

void sub_1DDBAC384(_Unwind_Exception *a1)
{
  size_t v5 = v2;

  _Unwind_Resume(a1);
}

void sub_1DDBAC3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  sub_1DDBAE010(a1, a8, a9);
  sub_1DDBAE010(a1, a8 + 4, a9);
  sub_1DDBAE254(a1, a8 + 8, a9);
  sub_1DDBAE010(a1, a8 + 12, a9);
  sub_1DDBAE010(a1, a8 + 16, a9);
  sub_1DDBAE010(a1, a8 + 20, a9);
  sub_1DDBAE010(a1, a8 + 24, a9);
  int v11 = sub_1DDBAE010(a1, a8 + 12, a9);
  if (v11 == 90) {
    unsigned int v15 = 6;
  }
  else {
    unsigned int v15 = 0;
  }
  if (v11 == 180) {
    unsigned int v15 = 3;
  }
  if (v11 == 270) {
    uint64_t v16 = 8;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16)
  {
    objc_msgSend_numberWithInt_(NSNumber, v12, v16, v13, v14);
    id v24 = (id)objc_claimAutoreleasedReturnValue();
    int v17 = sub_1DDBA1778(a1);
    objc_msgSend_setObject_forKeyedSubscript_(v17, v18, (uint64_t)v24, *MEMORY[0x1E4F2FCA0], v19);

    sub_1DDBA1778(a1);
    id v25 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v23 = objc_msgSend_numberWithInt_(NSNumber, v20, v16, v21, v22);
    sub_1DDA784D0(v25, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD70], v23);
  }
}

void sub_1DDBAC570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAC5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, int a8, unsigned __int8 a9)
{
  if ((a5 & 1) == 0) {
    a7 = sub_1DDBAE010(a1, a8, a9);
  }
  sub_1DDBA1778(a1);
  id v17 = (id)objc_claimAutoreleasedReturnValue();
  LODWORD(v11) = a7;
  uint64_t v16 = objc_msgSend_numberWithFloat_(NSNumber, v12, v13, v14, v15, v11);
  sub_1DDA784D0(v17, (void *)*MEMORY[0x1E4F2F548], (void *)*MEMORY[0x1E4F2F558], v16);
}

void sub_1DDBAC648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAC668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, int a8, unsigned __int8 a9)
{
  if ((a5 & 1) == 0) {
    a7 = sub_1DDBAE010(a1, a8, a9);
  }
  *(_DWORD *)(a1 + 196) = a7;
  if (a7)
  {
    sub_1DDBA17F8(a2);
    id v27 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_length(v27, v11, v12, v13, v14))
    {
      uint64_t v15 = sub_1DDBA175C(a2);
      uint64_t v20 = objc_msgSend_length(v15, v16, v17, v18, v19);

      if (!v20) {
        return;
      }
      sub_1DDBA1778(a1);
      id v27 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v21 = sub_1DDBA17F8(a2);
      uint64_t v22 = sub_1DDBA175C(a2);
      unint64_t v26 = objc_msgSend_numberWithInt_(NSNumber, v23, *(unsigned int *)(a1 + 196), v24, v25);
      sub_1DDA784D0(v27, v21, v22, v26);
    }
  }
}

void sub_1DDBAC78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v10;

  _Unwind_Resume(a1);
}

BOOL sub_1DDBAC7D0(unsigned char *a1, unint64_t a2)
{
  return a2 >= 0xE
      && *a1 == 73
      && a1[1] == 73
      && a1[2] == 26
      && !a1[3]
      && !a1[4]
      && !a1[5]
      && a1[6] == 72
      && a1[7] == 69
      && a1[8] == 65
      && a1[9] == 80
      && a1[10] == 67
      && a1[11] == 67
      && a1[12] == 68
      && a1[13] == 82;
}

BOOL sub_1DDBAC880(uint64_t *a1)
{
  void v5[2] = *MEMORY[0x1E4F143B8];
  LODWORD(v5[0]) = 0;
  sub_1DDA1A94C(v4, a1, (uint64_t)v5, 0);
  memset(v5, 0, 14);
  BOOL v2 = (*(unsigned int (**)(uint64_t, void *, uint64_t))(*(void *)*a1 + 32))(*a1, v5, 14) == 14
    && sub_1DDBAC7D0(v5, 0xEuLL);
  sub_1DDA1AA18(v4);
  return v2;
}

void sub_1DDBAC950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1DDBAC97C(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBAE3B8(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBAC9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

float sub_1DDBACA10(uint64_t a1, int a2)
{
  float result = 30.0;
  if (a2 >= -160)
  {
    if (a2 <= 384)
    {
      uint64_t v3 = 0;
      os_signpost_id_t v4 = &word_1DDC0B130;
      for (uint64_t i = 1; i != 62; ++i)
      {
        int v6 = *v4;
        v4 += 4;
        unsigned int v7 = a2 - v6;
        if (a2 - v6 < 0) {
          unsigned int v7 = -v7;
        }
        int v8 = a2 - word_1DDC0B128[4 * v3];
        if (v8 < 0) {
          int v8 = word_1DDC0B128[4 * v3] - a2;
        }
        if (v7 < v8) {
          uint64_t v3 = i;
        }
      }
      return *(float *)&word_1DDC0B128[4 * v3 + 2];
    }
    else
    {
      return 0.00025;
    }
  }
  return result;
}

void sub_1DDBACA84(char *a1, char a2, unint64_t a3, unint64_t a4)
{
  unint64_t v32 = 0;
  int v8 = (char *)sub_1DDA19838((uint64_t)&v32, 1uLL);
  unint64_t v10 = (unint64_t)&v8[16 * v9];
  *(_OWORD *)int v8 = xmmword_1DDC0B0E0;
  double v11 = v8 + 16;
  long long __p = v8;
  unint64_t v32 = v10;
  uint64_t v31 = v8 + 16;
  if ((unint64_t)(v8 + 16) >= v10)
  {
    uint64_t v13 = (char *)__p;
    uint64_t v14 = (v11 - (unsigned char *)__p) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      sub_1DDA17F78();
    }
    uint64_t v16 = v10 - (void)__p;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      uint64_t v18 = (char *)sub_1DDA19838((uint64_t)&v32, v17);
      uint64_t v13 = (char *)__p;
      double v11 = v31;
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = &v18[16 * v14];
    unint64_t v10 = (unint64_t)&v18[16 * v17];
    *(_OWORD *)uint64_t v19 = xmmword_1DDC0B0F0;
    uint64_t v12 = v19 + 16;
    if (v11 != v13)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v11 - 1);
        v19 -= 16;
        v11 -= 16;
      }
      while (v11 != v13);
      uint64_t v13 = (char *)__p;
    }
    long long __p = v19;
    uint64_t v31 = v12;
    unint64_t v32 = v10;
    if (v13)
    {
      operator delete(v13);
      unint64_t v10 = v32;
    }
  }
  else
  {
    *((_OWORD *)v8 + 1) = xmmword_1DDC0B0F0;
    uint64_t v12 = v8 + 32;
  }
  uint64_t v31 = v12;
  if ((unint64_t)v12 >= v10)
  {
    uint64_t v21 = (char *)__p;
    uint64_t v22 = (v12 - (unsigned char *)__p) >> 4;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60) {
      sub_1DDA17F78();
    }
    uint64_t v24 = v10 - (void)__p;
    if (v24 >> 3 > v23) {
      unint64_t v23 = v24 >> 3;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      unint64_t v26 = (char *)sub_1DDA19838((uint64_t)&v32, v25);
      uint64_t v21 = (char *)__p;
      uint64_t v12 = v31;
    }
    else
    {
      unint64_t v26 = 0;
    }
    id v27 = &v26[16 * v22];
    uint64_t v28 = &v26[16 * v25];
    *(_OWORD *)id v27 = xmmword_1DDC0B100;
    uint64_t v20 = v27 + 16;
    if (v12 != v21)
    {
      do
      {
        *((_OWORD *)v27 - 1) = *((_OWORD *)v12 - 1);
        v27 -= 16;
        v12 -= 16;
      }
      while (v12 != v21);
      uint64_t v21 = (char *)__p;
    }
    long long __p = v27;
    uint64_t v31 = v20;
    unint64_t v32 = (unint64_t)v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v12 = xmmword_1DDC0B100;
    uint64_t v20 = v12 + 16;
  }
  uint64_t v31 = v20;
  sub_1DDBA94FC(a1, (uint64_t)&__p, 1);
  if (a2) {
    sub_1DDBA96A8(a1, a3, a4, 1);
  }
  if ((a2 & 2) != 0) {
    sub_1DDBA9554(a1, a3, a4, 1);
  }
  uint64_t v29 = 0x190000001F4;
  sub_1DDBA9530((uint64_t)a1, &v29, 1);
  if (__p)
  {
    uint64_t v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1DDBACD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDBACD88(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (a5 <= 9)
  {
    unsigned int v6 = sub_1DDBAE010(a1, (int)(a2 + a3 - 4), a4);
    unsigned int v7 = a3 - v6;
    if (a3 > v6)
    {
      int v8 = v6 + a2;
      unsigned int v9 = sub_1DDBAE0CC(a1, (int)(v6 + a2), a4);
      unsigned int v10 = v9;
      if (a5)
      {
        if (v9 - 51 < 0xFFFFFFCE) {
          return;
        }
        unsigned int v11 = 10 * v9;
        if (10 * v9 + 6 != v7) {
          return;
        }
      }
      else
      {
        if (v9 - 11 < 0xFFFFFFF8) {
          return;
        }
        unsigned int v11 = 10 * v9;
        if (10 * v9 + 6 > v7) {
          return;
        }
      }
      int v93 = 0;
      memset(v92, 0, sizeof(v92));
      if (sub_1DDBA1314(a1, (uint64_t)v92, v11, 0, (v8 + 2)) == v11)
      {
        uint64_t v12 = 0;
        int v84 = (void *)*MEMORY[0x1E4F2F548];
        uint64_t v87 = v10;
        do
        {
          uint64_t v13 = (unsigned __int16 *)v92 + 5 * v12;
          unsigned int v14 = *v13;
          if (a4)
          {
            LOWORD(v14) = __rev16(v14);
            uint64_t v15 = bswap32(*(_DWORD *)(v13 + 1));
            unsigned int v16 = bswap32(*(_DWORD *)(v13 + 3));
          }
          else
          {
            uint64_t v15 = *(unsigned int *)(v13 + 1);
            unsigned int v16 = *(_DWORD *)(v13 + 3);
          }
          int v17 = v14 & 0x3800;
          int v18 = v14 & 0xC000;
          unsigned int v19 = v16 + a2;
          if (v18 == 0x4000) {
            uint64_t v20 = 0;
          }
          else {
            uint64_t v20 = v19;
          }
          if (v18 == 0x4000)
          {
            if (v17 == 10240 || v17 == 12288) {
              return;
            }
          }
          else if (v16 >= a3 || v15 >= a3 || v16 + v15 >= a3)
          {
            return;
          }
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          do
          {
            if (*(_WORD *)((char *)&unk_1F3989140 + v23) == (v14 & 0x3FFF)) {
              uint64_t v24 = (char *)&unk_1F3989140 + v23;
            }
            v23 += 40;
          }
          while (v23 != 920);
          if (v24)
          {
            unint64_t v25 = *((void *)v24 + 3);
            uint64_t v26 = *((void *)v24 + 4);
            if (v26) {
              BOOL v27 = (*((void *)v24 + 4) & 1 | v25) == 0;
            }
            else {
              BOOL v27 = 1;
            }
            int v28 = !v27;
            if (v25) {
              BOOL v29 = 0;
            }
            else {
              BOOL v29 = v28 == 0;
            }
            if (v29)
            {
              uint64_t v31 = sub_1DDBA175C((uint64_t)v24);
              BOOL v36 = objc_msgSend_length(v31, v32, v33, v34, v35) == 0;

              if (!v36)
              {
                switch((unsigned __int16)(v17 - 2048) >> 11)
                {
                  case 0:
                    memset(&v91[2], 0, 480);
                    if (v15 >= 0x1FF) {
                      uint64_t v37 = 511;
                    }
                    else {
                      uint64_t v37 = v15;
                    }
                    memset(v91, 0, 32);
                    if (v37 && sub_1DDBA1314(a1, (uint64_t)v91, v37, 0, v20))
                    {
                      *((unsigned char *)v91 + v37) = 0;
                      uint64_t v38 = sub_1DDBA17F8((uint64_t)v24);
                      BOOL v43 = objc_msgSend_length(v38, v39, v40, v41, v42) == 0;

                      uint64_t v44 = sub_1DDBA1778(a1);
                      if (v43)
                      {
                        uint64_t v45 = sub_1DDBA175C((uint64_t)v24);
                        uint64_t v46 = objc_msgSend_stringWithUTF8String_(NSString, v81, (uint64_t)v91, v82, v83);
                        sub_1DDA784D0(v44, v84, v45, v46);
                      }
                      else
                      {
                        uint64_t v45 = sub_1DDBA17F8((uint64_t)v24);
                        uint64_t v46 = sub_1DDBA175C((uint64_t)v24);
                        uint64_t v50 = objc_msgSend_stringWithUTF8String_(NSString, v47, (uint64_t)v91, v48, v49);
                        sub_1DDA784D0(v44, v45, v46, v50);
                      }
                    }
                    break;
                  case 1:
                    if (v18 == 0x4000) {
                      uint64_t v51 = (unsigned __int16)v15;
                    }
                    else {
                      uint64_t v51 = sub_1DDBAE0CC(a1, (int)v19, a4);
                    }
                    uint64_t v65 = sub_1DDBA17F8((uint64_t)v24);
                    BOOL v70 = objc_msgSend_length(v65, v66, v67, v68, v69) == 0;

                    unsigned int v85 = sub_1DDBA1778(a1);
                    if (v70)
                    {
                      uint64_t v59 = sub_1DDBA175C((uint64_t)v24);
                      uint64_t v60 = objc_msgSend_numberWithInt_(NSNumber, v78, v51, v79, v80);
                      sub_1DDA784D0(v85, v84, v59, v60);
                    }
                    else
                    {
                      uint64_t v59 = sub_1DDBA17F8((uint64_t)v24);
                      uint64_t v60 = sub_1DDBA175C((uint64_t)v24);
                      uint64_t v74 = objc_msgSend_numberWithInt_(NSNumber, v71, v51, v72, v73);
                      sub_1DDA784D0(v85, v59, v60, v74);
                    }
                    goto LABEL_68;
                  case 2:
                    uint64_t v52 = v15;
                    if (v18 != 0x4000) {
                      uint64_t v52 = sub_1DDBAE010(a1, (int)v19, a4);
                    }
                    uint64_t v53 = sub_1DDBA17F8((uint64_t)v24);
                    BOOL v58 = objc_msgSend_length(v53, v54, v55, v56, v57) == 0;

                    unsigned int v85 = sub_1DDBA1778(a1);
                    if (v58)
                    {
                      uint64_t v59 = sub_1DDBA175C((uint64_t)v24);
                      uint64_t v60 = objc_msgSend_numberWithInt_(NSNumber, v75, v52, v76, v77);
                      sub_1DDA784D0(v85, v84, v59, v60);
                    }
                    else
                    {
                      uint64_t v59 = sub_1DDBA17F8((uint64_t)v24);
                      uint64_t v60 = sub_1DDBA175C((uint64_t)v24);
                      uint64_t v64 = objc_msgSend_numberWithInt_(NSNumber, v61, v52, v62, v63);
                      sub_1DDA784D0(v85, v59, v60, v64);
                    }
LABEL_68:

                    break;
                  case 4:
                  case 5:
                    goto LABEL_59;
                  default:
                    goto LABEL_60;
                }
              }
            }
            else
            {
              char v30 = (void *)(a1 + (v26 >> 1));
              if (v26) {
                unint64_t v25 = *(void *)(*v30 + v25);
              }
              ((void (*)(void *, char *))v25)(v30, v24);
            }
          }
          if (v17 == 12288 || v17 == 10240) {
LABEL_59:
          }
            sub_1DDBACD88(a1, v20, v15, a4, (a5 + 1));
LABEL_60:
          ++v12;
        }
        while (v12 != v87);
      }
    }
  }
}

void sub_1DDBAD45C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBAD5AC(id *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  sub_1DDB57070((uint64_t)a1, &v19);
  int v17 = 0;
  sub_1DDA49398((uint64_t)v18, (uint64_t *)&v19, &v17);
  if (*((void *)&v19 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v19 + 1));
  }
  sub_1DDB57070((uint64_t)a1, &v19);
  unsigned int v2 = (*(uint64_t (**)(void))(*(void *)v19 + 16))(v19);
  if (*((void *)&v19 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v19 + 1));
  }
  if (v2 >= 0x1B)
  {
    sub_1DDB57070((uint64_t)a1, &v19);
    char v3 = (**(uint64_t (***)(void))v19)(v19);
    if (*((void *)&v19 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v19 + 1));
    }
    if ((unint64_t)v2 - 0x100000 <= 0xE00000) {
      char v4 = v3;
    }
    else {
      char v4 = 0;
    }
    if ((v4 & 1) != 0
      && sub_1DDBA1314((uint64_t)a1, (uint64_t)&v19, 14, 0, 0) == 14
      && (void)v19 == 0x45480000001A4949
      && *(void *)((char *)&v19 + 6) == 0x5244434350414548)
    {
      sub_1DDBACD88((uint64_t)a1, 26, v2 - 26, 0, 0);
      (*((void (**)(id *))*a1 + 16))(a1);
      if (a1[18])
      {
        sub_1DDBA1778((uint64_t)a1);
        id v6 = a1[18];
        objc_msgSend_bytes(v6, v7, v8, v9, v10);
        id v11 = a1[18];
        objc_msgSend_length(v11, v12, v13, v14, v15);
        CGImagePluginReadRawXMPProps();
      }
    }
  }
  return sub_1DDA49424((uint64_t)v18);
}

void sub_1DDBAD7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  sub_1DDA49424((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1DDBAD82C()
{
  return (id)*MEMORY[0x1E4F2F548];
}

void sub_1DDBAD83C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 196);
  if (v2 == 23494656 || v2 == 18087936)
  {
    sub_1DDBACA84((char *)a1, 1, *(unsigned __int16 *)(a1 + 206), 0);
    if (*(_WORD *)(a1 + 206))
    {
      sub_1DDBA1778(a1);
      id v34 = (id)objc_claimAutoreleasedReturnValue();
      sub_1DDA784D0(v34, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58], &unk_1F39AFA58);
    }
  }
  sub_1DDBAF0A4(a1);
  if (*(unsigned __int16 *)(a1 + 204) >= 2u)
  {
    unsigned int v7 = sub_1DDBA5730(a1, 0);
    uint64_t v8 = *MEMORY[0x1E4F2F850];
    id v35 = v7;
    uint64_t v12 = sub_1DDA357A8(v7, (const char *)*MEMORY[0x1E4F2F850], v9, v10, v11);
    int v17 = v12;
    if (v12)
    {
      int v18 = NSNumber;
      int v19 = objc_msgSend_intValue(v12, v13, v14, v15, v16);
      LOWORD(v20) = *(_WORD *)(a1 + 204);
      *(float *)&double v21 = (float)v19 / (float)v20;
      uint64_t v26 = objc_msgSend_numberWithFloat_(v18, v22, v23, v24, v25, v21);
      objc_msgSend_setObject_forKeyedSubscript_(v35, v27, (uint64_t)v26, v8, v28);
    }
  }
  unint64_t v29 = *(unsigned int *)(a1 + 200);
  if (v29 && *(_DWORD *)(a1 + 196) == 18087936)
  {
    objc_msgSend_stringWithFormat_(NSString, v4, @"%04lX%05u", v5, v6, v29 >> 16, (unsigned __int16)*(_DWORD *)(a1 + 200));
    id v36 = (id)objc_claimAutoreleasedReturnValue();
    char v30 = sub_1DDBA1778(a1);
    sub_1DDA784D0(v30, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F7A0], v36);
  }
  sub_1DDBA1778(a1);
  id v37 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v37, v31, @"{Temporary}", v32, v33);
}

void sub_1DDBADA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDBADA64(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_1DDBA1778((uint64_t)a1);
  int v10 = sub_1DDA2E1C4(v6, (const char *)*MEMORY[0x1E4F2FCA0], v7, v8, v9);

  memset(v55, 0, sizeof(v55));
  long long v54 = 0uLL;
  long long v53 = 0uLL;
  uint64_t v11 = sub_1DDBA1814((uint64_t)a1);
  uint64_t v15 = sub_1DDA357A8(v11, (const char *)@"JPEGImage/Offset", v12, v13, v14);

  uint64_t v16 = sub_1DDBA1814((uint64_t)a1);
  unsigned int v20 = sub_1DDA357A8(v16, (const char *)@"JPEGImage/Length", v17, v18, v19);

  uint64_t v25 = 0;
  if (v15 && v20)
  {
    int v51 = objc_msgSend_intValue(v15, v21, v22, v23, v24);
    unsigned int v49 = objc_msgSend_intValue(v20, v26, v27, v28, v29);
    sub_1DDA1B3CC(&v50, &v49);
    sub_1DDB9FD50(a1, &v51, &v50, v10, &v52);
    long long v54 = v52;
    uint64_t v25 = v52;
  }
  char v30 = sub_1DDBA1814((uint64_t)a1);
  id v34 = sub_1DDA357A8(v30, (const char *)@"JPEGThumbnail/Offset", v31, v32, v33);

  id v35 = sub_1DDBA1814((uint64_t)a1);
  uint64_t v39 = sub_1DDA357A8(v35, (const char *)@"JPEGThumbnail/Length", v36, v37, v38);

  uint64_t v44 = 0;
  if (v34 && v39)
  {
    int v51 = objc_msgSend_intValue(v34, v40, v41, v42, v43);
    unsigned int v49 = objc_msgSend_intValue(v39, v45, v46, v47, v48);
    sub_1DDA1B3CC(&v50, &v49);
    sub_1DDB9FD50(a1, &v51, &v50, v10, &v52);
    long long v53 = v52;
    uint64_t v44 = v52;
  }
  if (v25) {
    sub_1DDA480D4((uint64_t *)v55, &v54);
  }
  if (v44) {
    sub_1DDA480D4((uint64_t *)v55, &v53);
  }
  sub_1DDBA0184(v55, a2, a3);

  if (*((void *)&v53 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v53 + 1));
  }
  if (*((void *)&v54 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v54 + 1));
  }
  *(void *)&long long v54 = v55;
  sub_1DDA18270((void ***)&v54);
}

void sub_1DDBADC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void **a15, std::__shared_weak_count *a16, uint64_t a17, char a18)
{
  if (a14) {
    sub_1DDA18310(a14);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  a15 = (void **)&a18;
  sub_1DDA18270(&a15);
  _Unwind_Resume(a1);
}

void sub_1DDBADD4C(const void *a1, void *a2, void *a3)
{
  id v11 = a2;
  id v10 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E01C4510]();
  sub_1DDA19A18(a1, &v9);
  LODWORD(v6) = 0;
  sub_1DDA49398((uint64_t)v8, (uint64_t *)&v9, &v6);
  sub_1DDBAE56C((uint64_t *)&v9, &v11, &v10, &v6);
  (**v6)(v6);
  if (v7) {
    sub_1DDA18310(v7);
  }
  sub_1DDA49424((uint64_t)v8);
  if (*((void *)&v9 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_1DDBADE28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  sub_1DDA49424((uint64_t)&a11);
  if (a15) {
    sub_1DDA18310(a15);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDBADE00);
}

void sub_1DDBADE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBADE90(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v10 = a3;
  uint64_t v5 = (void *)MEMORY[0x1E01C4510]();
  sub_1DDA1997C(a1, 0, &v9);
  LODWORD(v6) = 0;
  sub_1DDA49398((uint64_t)v8, (uint64_t *)&v9, &v6);
  sub_1DDBAE56C((uint64_t *)&v9, &v11, &v10, &v6);
  (**v6)(v6);
  if (v7) {
    sub_1DDA18310(v7);
  }
  sub_1DDA49424((uint64_t)v8);
  if (*((void *)&v9 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_1DDBADF70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  sub_1DDA49424((uint64_t)&a11);
  if (a15) {
    sub_1DDA18310(a15);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDBADF48);
}

void sub_1DDBADFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBADFD8(uint64_t a1)
{
  sub_1DDBAA3F4(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBAE010(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  unint64_t v12 = a2;
  unsigned int v11 = 0;
  sub_1DDB57070(a1, &v9);
  uint64_t v4 = v9;
  sub_1DDA18500(&v8, &v12);
  int v5 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, int *))(*(void *)v4 + 24))(v4, &v11, 4, &v8);
  if (v10) {
    sub_1DDA18310(v10);
  }
  unsigned int v6 = bswap32(v11);
  if (((v5 == 4) & a3) != 0) {
    return v6;
  }
  else {
    return v11;
  }
}

void sub_1DDBAE0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDBAE0CC(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  unint64_t v13 = a2;
  unsigned __int16 v12 = 0;
  sub_1DDB57070(a1, &v10);
  uint64_t v4 = v10;
  sub_1DDA18500(&v9, &v13);
  int v5 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t, int *))(*(void *)v4 + 24))(v4, &v12, 2, &v9);
  if (v11) {
    sub_1DDA18310(v11);
  }
  unsigned int v6 = bswap32(v12) >> 16;
  if (((v5 == 2) & a3) != 0) {
    return (unsigned __int16)v6;
  }
  else {
    return v12;
  }
}

void sub_1DDBAE178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDBAE190(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  unint64_t v13 = a2;
  unsigned __int16 v12 = 0;
  sub_1DDB57070(a1, &v10);
  uint64_t v4 = v10;
  sub_1DDA18500(&v9, &v13);
  int v5 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t, int *))(*(void *)v4 + 24))(v4, &v12, 2, &v9);
  if (v11) {
    sub_1DDA18310(v11);
  }
  unsigned int v6 = bswap32(v12) >> 16;
  if (((v5 == 2) & a3) != 0) {
    return (__int16)v6;
  }
  else {
    return (__int16)v12;
  }
}

void sub_1DDBAE23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

float sub_1DDBAE254(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  unint64_t v12 = a2;
  float v11 = 0.0;
  sub_1DDB57070(a1, &v9);
  uint64_t v4 = v9;
  sub_1DDA18500(&v8, &v12);
  int v5 = (*(uint64_t (**)(uint64_t, float *, uint64_t, int *))(*(void *)v4 + 24))(v4, &v11, 4, &v8);
  if (v10) {
    sub_1DDA18310(v10);
  }
  float result = v11;
  unsigned int v7 = bswap32(v11);
  if (((v5 == 4) & a3) != 0) {
    return (float)v7;
  }
  return result;
}

void sub_1DDBAE300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDBAE318(uint64_t a1, unint64_t a2)
{
  unint64_t v8 = a2;
  unsigned __int8 v7 = 0;
  sub_1DDB57070(a1, &v5);
  uint64_t v2 = v5;
  sub_1DDA18500(&v4, &v8);
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, int *))(*(void *)v2 + 24))(v2, &v7, 1, &v4);
  if (v6) {
    sub_1DDA18310(v6);
  }
  return v7;
}

void sub_1DDBAE3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDBAE3B8(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0xE8uLL);
  sub_1DDBAE444((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBAE430(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBAE444(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F39895E0;
  sub_1DDBAA64C(a1 + 24, a2, *a3, *a4);
  *(void *)(a1 + 24) = &unk_1F39894E8;
  *(_DWORD *)(a1 + 220) = -1;
  *(void *)(a1 + 224) = 0;
  return a1;
}

void sub_1DDBAE4BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBAE4D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39895E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBAE4F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39895E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBAE544(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void sub_1DDBAE56C(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0xE8uLL);
  sub_1DDBAE444((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBAE5E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBAE5F8(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    float v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (v11) {
      sub_1DDBB1328((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBAE6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAE6D4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (v10) {
      sub_1DDBB0F04((uint64_t)v10, v11, v12, a4, a5, a6);
    }
  }
}

void sub_1DDBAE78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAE7A0(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (v11) {
      sub_1DDBB20E4((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBAE86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAE880(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (v10) {
      sub_1DDBB24FC((uint64_t)v10, v11, v12, a4, a5, a6);
    }
  }
}

void sub_1DDBAE938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAE94C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (v10) {
      sub_1DDBB1DD0((uint64_t)v10, v11, v12, a4, a5, a6);
    }
  }
}

void sub_1DDBAEA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAEA18(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (v11) {
      sub_1DDBB3558((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBAEAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAEAF8(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (v10) {
      sub_1DDBB3A54((uint64_t)v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBAEBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAEBC8(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v10 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (v10) {
      sub_1DDBB3F60(v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBAEC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAEC98(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v10 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (v10) {
      sub_1DDBB4570(v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBAED54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAED68(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (v11) {
      sub_1DDBB2214((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBAEE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBAEE44(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 >= 0xC)
  {
    int v2 = *a1;
    if (v2 == 77)
    {
      if (a1[1] == 77 && !a1[2] && a1[3] == 42 && a1[8] == 186 && a1[9] == 176 && a1[10] == 172 && a1[11] == 187) {
        return 1;
      }
    }
    else if (v2 == 73 && a1[1] == 73 && a1[2] == 42 && !a1[3] && a1[8] == 67 && a1[9] == 82 && a1[10] == 2 && !a1[11])
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1DDBAEF10(uint64_t *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  sub_1DDA49310(v4, a1);
  int v6 = 0;
  uint64_t v5 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(void *)*a1 + 32))(*a1, &v5, 12) == 12) {
    uint64_t v2 = sub_1DDBAEE44((unsigned __int8 *)&v5, 0xCuLL);
  }
  else {
    uint64_t v2 = 0;
  }
  sub_1DDA1AA18(v4);
  return v2;
}

void sub_1DDBAEFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1DDBAF000(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBB5A28(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBAF078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1DDBAF094()
{
  return (id)*MEMORY[0x1E4F2FC28];
}

void sub_1DDBAF0A4(uint64_t a1)
{
  uint64_t v2 = sub_1DDBA91F8(a1);
  char v3 = sub_1DDBA1778(a1);
  int v4 = (void *)*MEMORY[0x1E4F2F6D8];
  uint64_t v5 = sub_1DDA2E3A8(v3, (void *)*MEMORY[0x1E4F2F6D8], 0);

  int v6 = sub_1DDBA1778(a1);
  long long v7 = (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  id v8 = sub_1DDA2E3A8(v6, v7, 0);

  uint64_t v15 = sub_1DDA2E474(v2, (const char *)@"LensModel", v9, v10, v11);
  if (!v15)
  {
    uint64_t v15 = sub_1DDA2E474(v8, (const char *)*MEMORY[0x1E4F2F708], v12, v13, v14);
  }
  uint64_t v16 = (const char *)*MEMORY[0x1E4F2F6F8];
  if (sub_1DDA2E4E0(v5, (void *)*MEMORY[0x1E4F2F6F8]))
  {
    unsigned __int16 v20 = sub_1DDA2E1C4(v5, v16, v17, v18, v19);
    uint64_t v24 = sub_1DDA83A80(v5, (const char *)*MEMORY[0x1E4F2F700], v21, v22, v23);
    uint64_t v29 = v24;
    double v30 = 0.0;
    if (v24)
    {
      double v31 = 0.0;
      if (objc_msgSend_count(v24, v25, v26, v27, v28) == 4)
      {
        uint64_t v43 = 0;
        double v30 = sub_1DDB667D0(v29, (const char *)&v43, v26, v27, v28);
        uint64_t v43 = 1;
        double v31 = sub_1DDB667D0(v29, (const char *)&v43, v32, v33, v34);
      }
    }
    else
    {
      double v31 = 0.0;
    }
    double v35 = sub_1DDA83A30(v8, (const char *)@"MaxAperture", v26, v27, v28);
    double v39 = sub_1DDA83A30(v2, (const char *)*MEMORY[0x1E4F2F850], v36, v37, v38);
    uint64_t v41 = sub_1DDBAF3A8(v39, v30, v31, v35, v40, v20, v15);
    if (v41)
    {
      uint64_t v42 = sub_1DDBA1778(a1);
      sub_1DDA784D0(v42, v4, (void *)*MEMORY[0x1E4F2F708], v41);
    }
  }
  sub_1DDBA7974(a1);
}

void sub_1DDBAF308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBAF394()
{
  JUMPOUT(0x1DDBAF388);
}

void sub_1DDBAF3A0()
{
}

id sub_1DDBAF3A8(double a1, double a2, double a3, double a4, uint64_t a5, unsigned int a6, void *a7)
{
  id v175 = a7;
  uint64_t v186 = 0;
  uint64_t v187 = 0;
  uint64_t v188 = 0;
  uint64_t v176 = sub_1DDBE3DE4(@"canon");
  if (v176)
  {
    objc_msgSend_stringWithFormat_(NSString, v13, @"%u", v14, v15, a6);
    uint64_t v16 = (char *)objc_claimAutoreleasedReturnValue();
    unsigned __int16 v20 = sub_1DDA83A80(v176, v16, v17, v18, v19);

    if (v20)
    {
      for (unint64_t i = 0; ; unint64_t i = v185 + 1)
      {
        unint64_t v185 = i;
        if (i >= objc_msgSend_count(v20, v21, v22, v23, v24)) {
          break;
        }
        uint64_t v29 = sub_1DDB66820(v20, (const char *)&v185, v26, v27, v28);
        if (objc_msgSend_count(v29, v30, v31, v32, v33) == 5)
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          uint64_t v37 = sub_1DDB65E24(v29, (const char *)&__p, v34, v35, v36);
          __p.__r_.__value_.__r.__words[0] = 1;
          double v41 = sub_1DDB667D0(v29, (const char *)&__p, v38, v39, v40);
          __p.__r_.__value_.__r.__words[0] = 2;
          double v45 = sub_1DDB667D0(v29, (const char *)&__p, v42, v43, v44);
          __p.__r_.__value_.__r.__words[0] = 3;
          double v49 = sub_1DDB667D0(v29, (const char *)&__p, v46, v47, v48);
          __p.__r_.__value_.__r.__words[0] = 4;
          double v53 = sub_1DDB667D0(v29, (const char *)&__p, v50, v51, v52);
          if (v37)
          {
            double v54 = v53;
            id v55 = v37;
            uint64_t v60 = (char *)objc_msgSend_UTF8String(v55, v56, v57, v58, v59);
            sub_1DDA1A880(&v184, v60);
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
              sub_1DDA2639C(&__p, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
            }
            else {
              std::string __p = v184;
            }
            *(double *)&long long v181 = v41;
            *((double *)&v181 + 1) = v45;
            *(double *)&long long v182 = v49;
            *((double *)&v182 + 1) = v54;
            sub_1DDBB4C18(&v186, (long long *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v184.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }

    uint64_t v61 = v186;
    uint64_t v62 = v187;
    if (v187 == v186)
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
      __p.__r_.__value_.__r.__words[2] = 0x4812000000;
      *(void *)&long long v181 = sub_1DDBB4D8C;
      *((void *)&v181 + 1) = sub_1DDBB4DC8;
      *(void *)&long long v182 = "";
      v183[0] = 0;
      v183[1] = 0;
      *((void *)&v182 + 1) = v183;
      v179[0] = MEMORY[0x1E4F143A8];
      v179[1] = 3221225472;
      v179[2] = sub_1DDBB4DD8;
      v179[3] = &unk_1E6D06318;
      *(double *)&v179[5] = a2;
      *(double *)&v179[6] = a3;
      *(double *)&v179[7] = a4;
      *(double *)&v179[8] = a1;
      v179[4] = &__p;
      objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v176, v13, (uint64_t)v179, v14, v15);
      unint64_t v66 = *(void *)(__p.__r_.__value_.__l.__size_ + 64) - 3;
      if (v66 >= 0xFFFFFFFFFFFFFFFELL)
      {
        memset(&v184, 0, sizeof(v184));
        uint64_t v67 = *(void **)(__p.__r_.__value_.__l.__size_ + 48);
        std::string::size_type v68 = __p.__r_.__value_.__l.__size_ + 56;
        if (v67 == (void *)(__p.__r_.__value_.__l.__size_ + 56)) {
          goto LABEL_103;
        }
        do
        {
          std::string::size_type size = HIBYTE(v184.__r_.__value_.__r.__words[2]);
          if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v184.__r_.__value_.__l.__size_;
          }
          if (size) {
            std::string::append(&v184, " or ", 4uLL);
          }
          int v70 = *((char *)v67 + 55);
          if (v70 >= 0) {
            uint64_t v71 = (const std::string::value_type *)(v67 + 4);
          }
          else {
            uint64_t v71 = (const std::string::value_type *)v67[4];
          }
          if (v70 >= 0) {
            std::string::size_type v72 = *((unsigned __int8 *)v67 + 55);
          }
          else {
            std::string::size_type v72 = v67[5];
          }
          std::string::append(&v184, v71, v72);
          uint64_t v73 = (void *)v67[1];
          if (v73)
          {
            do
            {
              uint64_t v74 = v73;
              uint64_t v73 = (void *)*v73;
            }
            while (v73);
          }
          else
          {
            do
            {
              uint64_t v74 = (void *)v67[2];
              BOOL v93 = *v74 == (void)v67;
              uint64_t v67 = v74;
            }
            while (!v93);
          }
          uint64_t v67 = v74;
        }
        while (v74 != (void *)v68);
        if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
LABEL_103:
        }
          objc_msgSend_stringWithUTF8String_(NSString, v63, (uint64_t)&v184, v64, v65);
        else {
        uint64_t v7 = objc_msgSend_stringWithUTF8String_(NSString, v63, (uint64_t)v184.__r_.__value_.__l.__data_, v64, v65);
        }
        if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v184.__r_.__value_.__l.__data_);
        }
      }
      _Block_object_dispose(&__p, 8);
      sub_1DDA2A4CC((uint64_t)&v182 + 8, v183[0]);
      __int16 v118 = v176;
      if (v66 >= 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_113;
      }
      goto LABEL_107;
    }
  }
  else
  {
    uint64_t v61 = v186;
    uint64_t v62 = v187;
  }
  uint64_t v75 = v62 - v61;
  if (v75 == 56)
  {
    if (*(char *)(v61 + 23) < 0) {
      uint64_t v61 = *(void *)v61;
    }
    uint64_t v76 = objc_msgSend_stringWithUTF8String_(NSString, v13, v61, v14, v15);
    goto LABEL_112;
  }
  uint64_t v178 = sub_1DDA49F48(0x6DB6DB6DB6DB6DB7 * (v75 >> 3));
  uint64_t v177 = sub_1DDA49F48(0x6DB6DB6DB6DB6DB7 * ((v187 - v186) >> 3));
  int v174 = sub_1DDA49F48(0x6DB6DB6DB6DB6DB7 * ((v187 - v186) >> 3));
  uint64_t v80 = v186;
  if (v187 != v186)
  {
    unint64_t v81 = 0;
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7;
    do
    {
      unint64_t v82 = v80 + 56 * v81;
      if (*(char *)(v82 + 23) < 0)
      {
        sub_1DDA2639C(&__p, *(void **)v82, *(void *)(v82 + 8));
      }
      else
      {
        long long v83 = *(_OWORD *)v82;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v82 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v83;
      }
      unint64_t v84 = v80 + 56 * v81;
      long long v85 = *(_OWORD *)(v84 + 40);
      long long v181 = *(_OWORD *)(v84 + 24);
      long long v182 = v85;
      double v86 = *(double *)&v181;
      if (*(double *)&v181 != 0.0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v87 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          uint64_t v87 = __p.__r_.__value_.__l.__size_;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v87 >= 3)
        {
          uint64_t v89 = (std::string *)((char *)p_p + v87);
          uint64_t v90 = v87;
          uint64_t v91 = p_p;
          do
          {
            uint64_t v92 = (std::string *)memchr(v91, 91, v90 - 2);
            if (!v92) {
              break;
            }
            BOOL v93 = LOWORD(v92->__r_.__value_.__l.__data_) == 22619 && v92->__r_.__value_.__s.__data_[2] == 93;
            if (v93)
            {
              if (v92 == v89 || v92 != p_p) {
                break;
              }
              std::string::basic_string(&v184, &__p, 4uLL, v87, (std::allocator<char> *)&v185);
              for (uint64_t j = 0; j != 4; ++j)
              {
                double v95 = *(double *)&qword_1DDC0B538[j];
                if (fabs(a2 - *(double *)&v181 * v95) <= 0.9)
                {
                  if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    objc_msgSend_stringWithUTF8String_(NSString, v77, (uint64_t)&v184, v78, v79);
                  }
                  else {
                  uint64_t v99 = objc_msgSend_stringWithUTF8String_(NSString, v77, (uint64_t)v184.__r_.__value_.__l.__data_, v78, v79);
                  }
                  if (j * 8)
                  {
                    uint64_t v100 = objc_msgSend_stringWithFormat_(NSString, v96, @"%@ + %.1lfx", v97, v98, v99, *(void *)&v95);

                    uint64_t v99 = (void *)v100;
                  }
                  objc_msgSend_addObject_(v178, v96, (uint64_t)v99, v97, v98);
                  if (fabs(a3 - *((double *)&v181 + 1) * v95) <= 0.9)
                  {
                    objc_msgSend_addObject_(v177, v101, (uint64_t)v99, v102, v103);
                    if (a4 <= 0.0 || *(double *)&v182 * v95 + -0.15 <= a4 && *((double *)&v182 + 1) * v95 + 0.15 >= a4) {
                      objc_msgSend_addObject_(v174, v104, (uint64_t)v99, v105, v106);
                    }
                  }
                }
              }
              if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v184.__r_.__value_.__l.__data_);
              }
              uint64_t v7 = 0x6DB6DB6DB6DB6DB7;
              goto LABEL_90;
            }
            uint64_t v91 = (std::string *)((char *)&v92->__r_.__value_.__l.__data_ + 1);
            uint64_t v90 = (char *)v89 - (char *)v91;
          }
          while ((char *)v89 - (char *)v91 >= 3);
        }
        uint64_t v7 = 0x6DB6DB6DB6DB6DB7;
        if (vabdd_f64(a2, v86) <= 0.9)
        {
          uint64_t v107 = objc_msgSend_stringWithUTF8String_(NSString, v77, (uint64_t)p_p, v78, v79);
          objc_msgSend_addObject_(v178, v108, (uint64_t)v107, v109, v110);
          if (vabdd_f64(a3, *((double *)&v181 + 1)) <= 0.9)
          {
            objc_msgSend_addObject_(v177, v111, (uint64_t)v107, v112, v113);
            if (a4 <= 0.0 || *(double *)&v182 + -0.15 <= a4 && *((double *)&v182 + 1) + 0.15 >= a4) {
              objc_msgSend_addObject_(v174, v114, (uint64_t)v107, v115, v116);
            }
          }
        }
      }
LABEL_90:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v81;
      uint64_t v80 = v186;
    }
    while (v81 < 0x6DB6DB6DB6DB6DB7 * ((v187 - v186) >> 3));
  }
  id v117 = v174;
  __int16 v118 = v176;
  id v127 = v117;
  if (!objc_msgSend_count(v117, v119, v120, v121, v122))
  {
    id v127 = v177;
  }
  if (!objc_msgSend_count(v127, v123, v124, v125, v126))
  {
    id v132 = v178;

    id v127 = v132;
  }
  uint64_t v136 = objc_msgSend_count(v127, v128, v129, v130, v131);
  if (v136)
  {
    uint64_t v137 = (void *)MEMORY[0x1E4F28E78];
    __p.__r_.__value_.__r.__words[0] = 0;
    uint64_t v138 = sub_1DDB65E24(v127, (const char *)&__p, v133, v134, v135);
    uint64_t v7 = objc_msgSend_stringWithString_(v137, v139, (uint64_t)v138, v140, v141);

    for (std::string::size_type k = 1; ; std::string::size_type k = __p.__r_.__value_.__r.__words[0] + 1)
    {
      __p.__r_.__value_.__r.__words[0] = k;
      if (k >= objc_msgSend_count(v127, v142, v143, v144, v145)) {
        break;
      }
      objc_msgSend_appendString_((void *)v7, v147, @" or ", v148, v149);
      unsigned int v153 = sub_1DDB65E24(v127, (const char *)&__p, v150, v151, v152);
      objc_msgSend_appendString_((void *)v7, v154, (uint64_t)v153, v155, v156);
    }
  }

  if (!v136)
  {
LABEL_107:
    if (objc_msgSend_length(v175, v157, v158, v159, v160))
    {
      uint64_t v164 = NSString;
      if (objc_msgSend_hasPrefix_(v175, v161, @"Canon", v162, v163)) {
        objc_msgSend_stringWithFormat_(v164, v165, @"%s%@", v166, v167, "", v175);
      }
      else {
      uint64_t v76 = objc_msgSend_stringWithFormat_(v164, v165, @"%s%@", v166, v167, "Canon ", v175);
      }
LABEL_112:
      uint64_t v7 = v76;
      __int16 v118 = v176;
      goto LABEL_113;
    }
    if (a2 <= 0.0)
    {
      uint64_t v173 = &stru_1F398F7F8;
      __int16 v118 = v176;
      objc_msgSend_stringWithFormat_(NSString, v161, @"%@", v162, v163, &stru_1F398F7F8);
    }
    else
    {
      __int16 v118 = v176;
      if (a3 <= 0.0 || a2 == a3)
      {
        uint64_t v169 = objc_msgSend_stringWithFormat_(NSString, v161, @" %.1lfmm", v162, v163, *(void *)&a2);
      }
      else
      {
        uint64_t v169 = objc_msgSend_stringWithFormat_(NSString, v161, @" %.1lf-%.1lfmm", v162, v163, *(void *)&a2, *(void *)&a3);
      }
      uint64_t v173 = (__CFString *)v169;
      objc_msgSend_stringWithFormat_(NSString, v170, @"%@", v171, v172, v169);
    uint64_t v7 = };
  }
LABEL_113:

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
  sub_1DDBB5984((void ***)&__p);

  return (id)v7;
}

void sub_1DDBAFD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a25, 8);
  sub_1DDA2A4CC(v43, a35);

  a25 = (void *)(v44 - 176);
  sub_1DDBB5984((void ***)&a25);

  _Unwind_Resume(a1);
}

void sub_1DDBAFF0C(uint64_t a1)
{
  uint64_t v2 = sub_1DDBA1778(a1);
  sub_1DDA2E3A8(v2, @"{PictStyleSetting}", 0);
  id v56 = (id)objc_claimAutoreleasedReturnValue();

  if (sub_1DDA2E4E0(v56, @"PictureStyle"))
  {
    unsigned int v6 = sub_1DDA2E1C4(v56, (const char *)@"PictureStyle", v3, v4, v5);
    BOOL v8 = v6 <= 0xB && ((1 << v6) & 0x8C0) != 0;
  }
  else
  {
    BOOL v8 = 0;
    unsigned int v6 = -1;
  }
  uint64_t v9 = sub_1DDBA1778(a1);
  BOOL v10 = sub_1DDBA6568(v9, @"{PictStyleNormalized}", @"PictureStyle");

  if (v10)
  {
    uint64_t v11 = sub_1DDBA1778(a1);
    int v12 = sub_1DDBA65E8(v11, @"{PictStyleNormalized}", @"PictureStyle");

    if (v12 == 134) {
      BOOL v8 = 1;
    }
    if (v12 || v6 <= 1)
    {
      uint64_t v14 = sub_1DDBB047C(v13, v12);
      sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictureStyle", v14, (float)v12, (float)v12);

      unsigned int v6 = -1;
    }
    goto LABEL_16;
  }
  if (v6 >= 2)
  {
LABEL_16:
    int v15 = v6 + 4096;
    uint64_t v16 = @"{PictureStyle}";
    uint64_t v17 = sub_1DDBB0614((uint64_t)v16, v6 + 4096);
    sub_1DDBA4BE8(a1, v16, @"PictureStyle", v17, (float)v15, (float)v15);
  }
  if (sub_1DDA2E4E0(v56, @"PhotoEffect"))
  {
    uint64_t v21 = sub_1DDA2E1C4(v56, (const char *)@"PhotoEffect", v18, v19, v20);
    unsigned int v22 = v21;
    uint64_t v23 = sub_1DDBB088C(v21, v21);
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PhotoEffect", v23, (float)v22, (float)v22);

    if ((v22 & 0xFFFFFFFE) == 4) {
      BOOL v8 = 1;
    }
  }
  if (sub_1DDA2E4E0(v56, @"ColorTone"))
  {
    int v27 = sub_1DDA2E1C4(v56, (const char *)@"ColorTone", v24, v25, v26);
    sub_1DDBA4B30(a1, @"ColorTone", v27);
  }
  if (sub_1DDA2E4E0(v56, @"SharpnessFreq"))
  {
    int v31 = sub_1DDA2E1C4(v56, (const char *)@"SharpnessFreq", v28, v29, v30);
    sub_1DDBA4B30(a1, @"SharpnessFreq", v31);
  }
  if (sub_1DDA2E4E0(v56, @"FilterEffect"))
  {
    unsigned int v35 = sub_1DDA2E1C4(v56, (const char *)@"FilterEffect", v32, v33, v34);
    if (v35 > 4) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = off_1E6D06338[v35];
    }
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"FilterEffect", v36, (float)v35, (float)v35);
  }
  if (sub_1DDA2E4E0(v56, @"ToningEffect"))
  {
    unsigned int v40 = sub_1DDA2E1C4(v56, (const char *)@"ToningEffect", v37, v38, v39);
    if (v40 > 4) {
      double v41 = 0;
    }
    else {
      double v41 = off_1E6D06360[v40];
    }
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"ToningEffect", v41, (float)v40, (float)v40);
  }
  uint64_t v42 = sub_1DDBA1778(a1);
  uint64_t v43 = sub_1DDA2E3A8(v42, @"{PictureStyle}", 0);

  if (v43)
  {
    uint64_t v44 = sub_1DDBA1778(a1);
    BOOL v45 = sub_1DDBA6568(v44, @"{PictureStyle}", @"Monochrome");

    if (!v45) {
      sub_1DDBA4B30(a1, @"Monochrome", v8);
    }
    int v46 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    if ((v46 & 0x80000000) == 0)
    {
      uint64_t v47 = sub_1DDBA4D7C(a1, v46);
      sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictStyleColorSpace", v47, (float)v46, (float)v46);
    }
  }
  uint64_t v48 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v48, v49, @"{PictStyleSetting}", v50, v51);

  uint64_t v52 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v52, v53, @"{PictStyleNormalized}", v54, v55);
}

void sub_1DDBB0398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB0464(uint64_t a1, unsigned int a2)
{
  return (a2 < 0xC) & (0x8C0u >> a2);
}

__CFString *sub_1DDBB047C(uint64_t a1, int a2)
{
  if (a2 > 34)
  {
    if (a2 <= 66)
    {
      uint64_t v3 = @"User Def. 3";
      uint64_t v4 = @"External 1";
      uint64_t v5 = @"External 2";
      if (a2 != 66) {
        uint64_t v5 = 0;
      }
      if (a2 != 65) {
        uint64_t v4 = v5;
      }
      BOOL v6 = a2 == 35;
LABEL_15:
      if (v6) {
        return v3;
      }
      else {
        return v4;
      }
    }
    else
    {
      switch(a2)
      {
        case 129:
LABEL_6:
          float result = @"Standard";
          break;
        case 130:
LABEL_18:
          float result = @"Portrait";
          break;
        case 131:
          float result = @"Landscape";
          break;
        case 132:
          float result = @"Neutral";
          break;
        case 133:
          float result = @"Faithful";
          break;
        case 134:
          float result = @"Monochrome";
          break;
        default:
          if (a2 == 67) {
            float result = @"External 3";
          }
          else {
            float result = 0;
          }
          break;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        float result = @"None";
        break;
      case 1:
        goto LABEL_6;
      case 2:
        goto LABEL_18;
      case 3:
        float result = @"High Saturation";
        break;
      case 4:
        float result = @"Adobe RGB";
        break;
      case 5:
        float result = @"Low Saturation";
        break;
      case 6:
        float result = @"CM Set 1";
        break;
      case 7:
        float result = @"CM Set 2";
        break;
      default:
        uint64_t v3 = @"User Def. 1";
        uint64_t v4 = @"User Def. 2";
        if (a2 != 34) {
          uint64_t v4 = 0;
        }
        BOOL v6 = a2 == 33;
        goto LABEL_15;
    }
  }
  return result;
}

__CFString *sub_1DDBB0614(uint64_t a1, int a2)
{
  float result = 0;
  switch(a2)
  {
    case 0:
      float result = @"Full auto";
      break;
    case 1:
      float result = @"Manual";
      break;
    case 2:
      float result = @"Landscape";
      break;
    case 3:
      float result = @"Fast shutter";
      break;
    case 4:
      float result = @"Slow shutter";
      break;
    case 5:
      float result = @"Night";
      break;
    case 6:
      float result = @"Gray Scale";
      break;
    case 7:
      float result = @"Sepia";
      break;
    case 8:
      float result = @"Portrait";
      break;
    case 9:
      float result = @"Sports";
      break;
    case 10:
      float result = @"Macro";
      break;
    case 11:
      float result = @"Black & White";
      break;
    case 12:
      float result = @"Pan focus";
      break;
    case 13:
      float result = @"Vivid";
      break;
    case 14:
      float result = @"Neutral";
      break;
    case 15:
      float result = @"Flash Off";
      break;
    case 16:
      float result = @"Long Shutter";
      break;
    case 17:
      float result = @"Super Macro";
      break;
    case 18:
      float result = @"Foliage";
      break;
    case 19:
      float result = @"Indoor";
      break;
    case 20:
      float result = @"Fireworks";
      break;
    case 21:
      float result = @"Beach";
      break;
    case 22:
      float result = @"Underwater";
      break;
    case 23:
      float result = @"Snow";
      break;
    case 24:
      float result = @"Kids & Pets";
      break;
    case 25:
      float result = @"Night Snapshot";
      break;
    case 26:
      float result = @"Digital Macro";
      break;
    case 27:
      float result = @"My Colors";
      break;
    case 28:
      float result = @"Still Image";
      break;
    case 29:
    case 34:
    case 35:
    case 36:
    case 37:
      return result;
    case 30:
      float result = @"Color Accent";
      break;
    case 31:
      float result = @"Color Swap";
      break;
    case 32:
      float result = @"Aquarium";
      break;
    case 33:
      float result = @"ISO 3200";
      break;
    case 38:
      float result = @"Creative Auto";
      break;
    default:
      if (a2 == 261) {
        float result = @"Sunset";
      }
      else {
        float result = 0;
      }
      break;
  }
  return result;
}

__CFString *sub_1DDBB088C(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      float result = @"Off";
      break;
    case 1:
      float result = @"Vivid";
      break;
    case 2:
      float result = @"Neutral";
      break;
    case 3:
      float result = @"Smooth";
      break;
    case 4:
      float result = @"Sepia";
      break;
    case 5:
      float result = @"B & W";
      break;
    case 6:
      float result = @"Custom";
      break;
    default:
      if (a2 == 100) {
        float result = @"My Color Data";
      }
      else {
        float result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_1DDBB093C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v21[2] = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  if (!a4)
  {
    uint64_t v14 = *(void *)(a1 + 24);
    if (v14 >= 1)
    {
      uint64_t v15 = a3 - v14;
      int v13 = *(unsigned __int8 *)(a1 + 32);
      goto LABEL_16;
    }
    uint64_t v20 = 0;
    v21[0] = 0;
    *(void *)((char *)v21 + 5) = 0;
    uint64_t v19 = sub_1DDBA1314(a1, (uint64_t)&v20, 20, a5, a3);
    BOOL v16 = (unsigned __int16)v20 > 0xFFu;
    if (v19 == 20)
    {
      uint64_t v15 = a5;
      uint64_t v14 = a3;
      goto LABEL_17;
    }
LABEL_22:
    uint64_t v17 = 0;
    goto LABEL_18;
  }
  uint64_t v20 = 0;
  if (sub_1DDBA1314(a1, (uint64_t)&v20, 8, a5, a3 + a4 - 8) != 8) {
    goto LABEL_22;
  }
  if (v20 == 77 && BYTE1(v20) == 77 && !BYTE2(v20) && BYTE3(v20) == 42)
  {
    unsigned int v12 = bswap32(HIDWORD(v20));
    int v13 = 1;
LABEL_15:
    uint64_t v14 = v12;
    uint64_t v15 = a3 - v12;
    *(void *)(a1 + 24) = v12;
    *(unsigned char *)(a1 + 32) = v13;
    goto LABEL_16;
  }
  if (v20 != 73 || BYTE1(v20) != 73 || BYTE2(v20) != 42)
  {
    int v13 = a6;
    uint64_t v15 = a5;
    uint64_t v14 = a3;
    goto LABEL_16;
  }
  int v13 = a6;
  uint64_t v15 = a5;
  uint64_t v14 = a3;
  if (!BYTE3(v20))
  {
    int v13 = 0;
    unsigned int v12 = HIDWORD(v20);
    goto LABEL_15;
  }
LABEL_16:
  BOOL v16 = v13 != 0;
LABEL_17:
  sub_1DDBA5A38((unsigned char *)a1, @"IFD0", word_1E6D06298, a3, a5, a6);
  sub_1DDBA5A38((unsigned char *)a1, v11, word_1F3989620, v14, v15, v16);
  (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v17 = 1;
LABEL_18:

  return v17;
}

void sub_1DDBB0B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB0B78(uint64_t a1)
{
  uint64_t v2 = sub_1DDBA1778(a1);
  uint64_t v3 = (void *)*MEMORY[0x1E4F2FC28];
  BOOL v4 = sub_1DDBA6568(v2, (void *)*MEMORY[0x1E4F2FC28], @"UniqueModelID");

  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = sub_1DDBA1778(a1);
  uint64_t v6 = sub_1DDBA65E8(v5, v3, @"UniqueModelID");

  return v6;
}

void sub_1DDBB0C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB0C1C(uint64_t a1)
{
  int v2 = sub_1DDBB0B78(a1);
  BOOL v3 = 0;
  if (v2 > 17825791)
  {
    if (v2 > 20971519)
    {
      if (v2 > 38338559)
      {
        if (v2 <= 41025535)
        {
          if (v2 == 38338560) {
            return 1;
          }
          int v5 = 40894464;
        }
        else
        {
          if (v2 == 41025536 || v2 == 67371008) {
            return 1;
          }
          int v5 = 50397184;
        }
      }
      else
      {
        if (v2 <= 26738687)
        {
          if (v2 != 20971520)
          {
            int v4 = 23494656;
            goto LABEL_33;
          }
          return 1;
        }
        if (v2 == 26738688 || v2 == 35848192) {
          return 1;
        }
        int v5 = 38141952;
      }
    }
    else if (v2 > 19464191)
    {
      if (v2 <= 20381695)
      {
        if (v2 == 19464192) {
          return 1;
        }
        int v5 = 19988480;
      }
      else
      {
        if (v2 == 20381696 || v2 == 20447232) {
          return 1;
        }
        int v5 = 20512768;
      }
    }
    else
    {
      if (v2 > 17956863)
      {
        if (v2 != 17956864)
        {
          if (v2 == 18087936) {
            return v3;
          }
          int v5 = 18415616;
          goto LABEL_39;
        }
        return 1;
      }
      if (v2 == 17825792) {
        return 1;
      }
      int v5 = 17891328;
    }
LABEL_39:
    if (v2 != v5)
    {
LABEL_42:
      uint64_t v7 = sub_1DDBA1778(a1);
      BOOL v8 = sub_1DDB6DAE4(v7, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD68]);

      BOOL v3 = sub_1DDB9FCD0(v8, @"POWERSHOT", 1);
      return v3;
    }
    return 1;
  }
  if (v2 > -2147483118)
  {
    if ((v2 + 2147483117) <= 0x3F && ((1 << (v2 - 19)) & 0x8000000A80000025) != 0
      || v2 == -2147483052)
    {
      return v3;
    }
    int v4 = -2147483039;
  }
  else
  {
    if ((v2 + 2147483289) <= 0x29 && ((1 << (v2 - 103)) & 0x2060000E207) != 0) {
      return v3;
    }
    int v4 = -2147483647;
  }
LABEL_33:
  if (v2 != v4) {
    goto LABEL_42;
  }
  return v3;
}

void sub_1DDBB0E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDBB0E98(uint64_t a1, int a2)
{
  int v2 = (a2 >> 31) | 1;
  unsigned int v3 = ((_WORD)v2 * (_WORD)a2) & 0x1F;
  if (v3 == 12)
  {
    double v4 = 0.333333333;
  }
  else if (v3 == 20)
  {
    double v4 = 0.666666667;
  }
  else
  {
    double v4 = (double)v3 * 0.03125;
  }
  return (v4 + (double)((__int16)(v2 * a2 + (((__int16)(v2 * a2) >> 26) & 0x1F)) >> 5)) * (double)v2;
}

void sub_1DDBB0F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6 = *(_DWORD *)(a4 + 4);
  if (v6 >= 0xC8) {
    uint64_t v7 = 200;
  }
  else {
    uint64_t v7 = v6;
  }
  unsigned int v8 = *(unsigned __int16 *)(a4 + 2);
  if (v8 <= 0x6F)
  {
    BOOL v9 = v8 == 8 || v8 == 3;
    if (v9 && v7 >= 3)
    {
      sub_1DDA1AC54(&__p, v7);
      unsigned int v16 = *(_DWORD *)(a4 + 8);
      unsigned int v17 = bswap32(v16);
      if (a6) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = v16;
      }
      int64_t v15 = v67 - (unsigned char *)__p;
      if (sub_1DDBA1314(a1, (uint64_t)__p, v67 - (unsigned char *)__p, a5, v18) == v15)
      {
        if (a6)
        {
          uint64_t v19 = __p;
          if (v67 != __p)
          {
            uint64_t v20 = (v67 - (unsigned char *)__p) >> 1;
            do
            {
              *uint64_t v19 = bswap32((unsigned __int16)*v19) >> 16;
              ++v19;
              --v20;
            }
            while (v20);
          }
        }
        uint64_t v21 = sub_1DDBA5730(a1, 0);
        unsigned int v22 = (void *)*MEMORY[0x1E4F2F878];
        BOOL v23 = sub_1DDA2E4E0(v21, (void *)*MEMORY[0x1E4F2F878]);

        if (!v23)
        {
          uint64_t v25 = __p;
          LOWORD(v24) = *((_WORD *)__p + 1);
          float v26 = exp2f((float)v24 * 0.03125);
          float v27 = v26 * 100.0;
          LOWORD(v26) = v25[2];
          float v28 = (float)(exp2f((float)LODWORD(v26) * 0.03125) * 100.0) * 0.03125;
          float v29 = fabsf(v28);
          if (fabsf(v27) != INFINITY && v29 != INFINITY)
          {
            float v31 = (float)(v27 * v28) / 100.0;
            float v32 = *(float *)"(knO20CCanonCR2ImageParser";
            if (v31 <= 4000000000.0) {
              float v32 = v31;
            }
            if (v31 >= 0.0) {
              float v33 = v32;
            }
            else {
              float v33 = 0.0;
            }
            uint64_t v34 = sub_1DDBA5730(a1, 1);
            unsigned int v35 = sub_1DDBA57C0(v34, v22);
            uint64_t v39 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v36, rintf(v33), v37, v38);
            objc_msgSend_addObject_(v35, v40, (uint64_t)v39, v41, v42);
          }
        }
        if (v7 >= 8)
        {
          uint64_t v43 = sub_1DDBA1778(a1);
          uint64_t v47 = objc_msgSend_numberWithInt_(NSNumber, v44, *((unsigned __int16 *)__p + 7), v45, v46);
          sub_1DDA784D0(v43, (void *)*MEMORY[0x1E4F2FC28], (void *)*MEMORY[0x1E4F2F570], v47);

          if (v7 >= 0xF)
          {
            if ((unsigned __int16)(*((_WORD *)__p + 14) - 12288) <= 7u)
            {
              uint64_t v48 = dword_1DDC0B62C[(__int16)(*((_WORD *)__p + 14) - 12288)];
              double v49 = sub_1DDBA1778(a1);
              double v53 = objc_msgSend_numberWithInt_(NSNumber, v50, v48, v51, v52);
              sub_1DDA784D0(v49, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58], v53);
            }
            if (v7 >= 0x10)
            {
              int v54 = *((__int16 *)__p + 15);
              int v55 = (v54 >> 31) | 1;
              int v56 = v54 * v55;
              unsigned int v57 = (v54 * v55) & 0x1F;
              uint64_t v58 = (v56 & 0x1F) - 10;
              if v58 < 0xD && ((0x1C07u >> v58)) {
                double v59 = dbl_1DDC0B650[v58];
              }
              else {
                double v59 = (double)v57 * 0.03125;
              }
              uint64_t v60 = sub_1DDBA1778(a1);
              uint64_t v65 = objc_msgSend_numberWithDouble_(NSNumber, v61, v62, v63, v64, (v59 + (double)((int)((v56 + (((__int16)v56 >> 26) & 0x1F)) << 16) >> 21)) * (double)v55);
              sub_1DDA784D0(v60, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F6E8], v65);
            }
          }
        }
      }
      if (__p)
      {
        uint64_t v67 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1DDBB12B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1DDBB1328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6 = *(_DWORD *)(a4 + 4);
  if (v6 >= 0xC8) {
    uint64_t v7 = 200;
  }
  else {
    uint64_t v7 = v6;
  }
  unsigned int v8 = *(unsigned __int16 *)(a4 + 2);
  if (v8 <= 0x6F)
  {
    BOOL v9 = v8 == 8 || v8 == 3;
    if (v9 && v7 >= 3)
    {
      sub_1DDA1AC54(&__p, v7);
      unsigned int v17 = *(_DWORD *)(a4 + 8);
      unsigned int v18 = bswap32(v17);
      if (a6) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = v17;
      }
      int64_t v16 = v157 - (unsigned char *)__p;
      if (sub_1DDBA1314(a1, (uint64_t)__p, v157 - (unsigned char *)__p, a5, v19) != v16) {
        goto LABEL_102;
      }
      if (a6)
      {
        uint64_t v20 = __p;
        if (v157 != __p)
        {
          uint64_t v21 = (v157 - (unsigned char *)__p) >> 1;
          do
          {
            _WORD *v20 = bswap32((unsigned __int16)*v20) >> 16;
            ++v20;
            --v21;
          }
          while (v21);
        }
      }
      if (v7 < 6) {
        goto LABEL_102;
      }
      unsigned int v22 = sub_1DDBA1778(a1);
      BOOL v23 = sub_1DDBA17F8(a3);
      float v27 = objc_msgSend_numberWithInt_(NSNumber, v24, *((unsigned __int16 *)__p + 5), v25, v26);
      sub_1DDA784D0(v22, v23, @"ContinuousDrive", v27);

      if (v7 < 8) {
        goto LABEL_102;
      }
      unint64_t v28 = *((__int16 *)__p + 7);
      if (v28 <= 6)
      {
        uint64_t v29 = dword_1DDC0B6B8[v28];
        uint64_t v30 = sub_1DDBA1778(a1);
        uint64_t v34 = objc_msgSend_numberWithInt_(NSNumber, v31, v29, v32, v33);
        sub_1DDA784D0(v30, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58], v34);
      }
      if (v7 < 0xC) {
        goto LABEL_102;
      }
      uint64_t v35 = *((__int16 *)__p + 11);
      uint64_t v36 = sub_1DDBA1778(a1);
      unsigned int v40 = objc_msgSend_numberWithInt_(NSNumber, v37, v35, v38, v39);
      sub_1DDA784D0(v36, @"{PictStyleSetting}", @"PictureStyle", v40);

      if (v7 < 0xE) {
        goto LABEL_102;
      }
      uint64_t v42 = *((__int16 *)__p + 13);
      if ((int)v42 >= 0) {
        unsigned int v43 = *((__int16 *)__p + 13);
      }
      else {
        unsigned int v43 = -(int)v42;
      }
      if (v43 <= 0xF)
      {
        uint64_t v44 = sub_1DDBA1778(a1);
        uint64_t v48 = objc_msgSend_numberWithInt_(NSNumber, v45, v42, v46, v47);
        sub_1DDA784D0(v44, @"{PictStyleSetting}", (void *)*MEMORY[0x1E4F2F7D8], v48);
      }
      if (v7 < 0xF) {
        goto LABEL_102;
      }
      uint64_t v49 = *((__int16 *)__p + 14);
      if ((int)v49 >= 0) {
        unsigned int v50 = *((__int16 *)__p + 14);
      }
      else {
        unsigned int v50 = -(int)v49;
      }
      if (v50 <= 0xF)
      {
        uint64_t v51 = sub_1DDBA1778(a1);
        int v55 = objc_msgSend_numberWithInt_(NSNumber, v52, v49, v53, v54);
        sub_1DDA784D0(v51, @"{PictStyleSetting}", (void *)*MEMORY[0x1E4F2F8F0], v55);
      }
      if (v7 < 0x10) {
        goto LABEL_102;
      }
      uint64_t v56 = *((__int16 *)__p + 15);
      if ((int)v56 >= 0) {
        unsigned int v57 = *((__int16 *)__p + 15);
      }
      else {
        unsigned int v57 = -(int)v56;
      }
      if (v57 <= 0xF)
      {
        uint64_t v58 = sub_1DDBA1778(a1);
        uint64_t v62 = objc_msgSend_numberWithInt_(NSNumber, v59, v56, v60, v61);
        sub_1DDA784D0(v58, @"{PictStyleSetting}", (void *)*MEMORY[0x1E4F2F918], v62);
      }
      if (v7 < 0x29)
      {
        if (v7 < 0x11)
        {
LABEL_102:
          if (__p)
          {
            uint64_t v157 = __p;
            operator delete(__p);
          }
          return;
        }
      }
      else
      {
        uint64_t v63 = sub_1DDBB088C(v41, *((unsigned __int16 *)__p + 40));

        if (v63)
        {
          uint64_t v64 = sub_1DDBA1778(a1);
          std::string::size_type v68 = objc_msgSend_numberWithInt_(NSNumber, v65, *((unsigned __int16 *)__p + 40), v66, v67);
          sub_1DDA784D0(v64, @"{PictStyleSetting}", @"PhotoEffect", v68);
        }
        if (v7 >= 0x2B)
        {
          uint64_t v69 = *((__int16 *)__p + 42);
          unsigned int v70 = (int)v69 >= 0 ? *((__int16 *)__p + 42) : -(int)v69;
          if (v70 <= 0xF)
          {
            uint64_t v71 = sub_1DDBA1778(a1);
            uint64_t v75 = objc_msgSend_numberWithInt_(NSNumber, v72, v69, v73, v74);
            sub_1DDA784D0(v71, @"{PictStyleSetting}", @"ColorTone", v75);
          }
        }
      }
      unsigned int v76 = *((unsigned __int16 *)__p + 16);
      if (v76 != 0x7FFF)
      {
        uint64_t v77 = v76 - 0x4000;
        if (v76 > 0x4000)
        {
          uint64_t v78 = sub_1DDBA5730(a1, 0);
          uint64_t v79 = (void *)*MEMORY[0x1E4F2F878];
          BOOL v80 = sub_1DDA2E4E0(v78, (void *)*MEMORY[0x1E4F2F878]);

          if (!v80)
          {
            unint64_t v81 = sub_1DDBA5730(a1, 1);
            unint64_t v82 = sub_1DDADAF54(v81, v79);
            double v86 = objc_msgSend_numberWithInt_(NSNumber, v83, v77, v84, v85);
            objc_msgSend_addObject_(v82, v87, (uint64_t)v86, v88, v89);
          }
        }
      }
      if (v7 < 0x14) {
        goto LABEL_102;
      }
      unsigned int v90 = *((unsigned __int16 *)__p + 19);
      if (v90 <= 0x3000)
      {
        if (v90 != 8197)
        {
          if (v90 != 12288) {
            goto LABEL_63;
          }
          uint64_t v91 = 0;
LABEL_62:
          uint64_t v92 = sub_1DDBA1778(a1);
          float v96 = objc_msgSend_numberWithInt_(NSNumber, v93, v91, v94, v95);
          sub_1DDA784D0(v92, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58], v96);

          goto LABEL_63;
        }
      }
      else if (v90 - 12289 >= 4)
      {
        if (v90 == 16390)
        {
          uint64_t v91 = 2;
          goto LABEL_62;
        }
        if (v90 != 16385)
        {
LABEL_63:
          if (v7 >= 0x15)
          {
            unsigned int v97 = *((unsigned __int16 *)__p + 20) - 1;
            if (v97 <= 4)
            {
              uint64_t v98 = dword_1DDC0B6D4[(__int16)v97];
              uint64_t v99 = sub_1DDBA1778(a1);
              uint64_t v103 = objc_msgSend_numberWithInt_(NSNumber, v100, v98, v101, v102);
              sub_1DDA784D0(v99, (void *)*MEMORY[0x1E4F2F800], (void *)*MEMORY[0x1E4F2F820], v103);
            }
            if (v7 >= 0x17)
            {
              if (*((_WORD *)__p + 22) && *((unsigned __int16 *)__p + 22) != 0xFFFF)
              {
                uint64_t v104 = sub_1DDBA1778(a1);
                unsigned int v108 = objc_msgSend_numberWithInt_(NSNumber, v105, *((unsigned __int16 *)__p + 22), v106, v107);
                sub_1DDA784D0(v104, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F6F8], v108);
              }
              if (v7 >= 0x1A)
              {
                if (*((_WORD *)__p + 25) && *((_WORD *)__p + 23) && *((_WORD *)__p + 24)) {
                  sub_1DDBA47CC(a1, (double)*((unsigned __int16 *)__p + 24) / (double)*((unsigned __int16 *)__p + 25), (double)*((unsigned __int16 *)__p + 23) / (double)*((unsigned __int16 *)__p + 25), 0.0, 0.0);
                }
                if (v7 >= 0x1C)
                {
                  int v109 = *((unsigned __int16 *)__p + 26);
                  uint64_t v110 = sub_1DDBA1778(a1);
                  uint64_t v111 = sub_1DDA7A98C(v110, (void *)*MEMORY[0x1E4F2FC28], 0);

                  if (v109 != 0xFFFF)
                  {
                    int v112 = *((__int16 *)__p + 26);
                    int v113 = (v112 >> 31) | 1;
                    int v114 = v112 * v113;
                    unsigned int v115 = v114 & 0x1F;
                    if (v115 == 12)
                    {
                      double v116 = 0.333333333;
                    }
                    else if (v115 == 20)
                    {
                      double v116 = 0.666666667;
                    }
                    else
                    {
                      double v116 = (double)v115 * 0.03125;
                    }
                    double v117 = exp2((v116 + (double)((int)((v114 + (((__int16)v114 >> 26) & 0x1F)) << 16) >> 21))* (double)v113* 0.5);
                    uint64_t v122 = objc_msgSend_numberWithDouble_(NSNumber, v118, v119, v120, v121);
                    objc_msgSend_setObject_forKeyedSubscript_(v111, v123, (uint64_t)v122, @"MaxAperture", v124);

                    uint64_t v125 = sub_1DDBA5730(a1, 0);
                    uint64_t v126 = *MEMORY[0x1E4F2F8B0];
                    BOOL v127 = sub_1DDA2E4E0(v125, (void *)*MEMORY[0x1E4F2F8B0]);

                    if (!v127)
                    {
                      id v132 = objc_msgSend_numberWithDouble_(NSNumber, v128, v129, v130, v131, v117);
                      uint64_t v133 = sub_1DDBA5730(a1, 1);
                      objc_msgSend_setObject_forKeyedSubscript_(v133, v134, (uint64_t)v132, v126, v135);
                    }
                    int v136 = *((__int16 *)__p + 27);
                    int v137 = (v136 >> 31) | 1;
                    int v138 = v136 * v137;
                    unsigned int v139 = v138 & 0x1F;
                    if (v139 == 12)
                    {
                      double v140 = 0.333333333;
                    }
                    else if (v139 == 20)
                    {
                      double v140 = 0.666666667;
                    }
                    else
                    {
                      double v140 = (double)v139 * 0.03125;
                    }
                    long double v141 = exp2((v140 + (double)((int)((v138 + (((__int16)v138 >> 26) & 0x1F)) << 16) >> 21))* (double)v137* 0.5);
                    uint64_t v146 = objc_msgSend_numberWithDouble_(NSNumber, v142, v143, v144, v145, (double)v141);
                    objc_msgSend_setObject_forKeyedSubscript_(v111, v147, (uint64_t)v146, @"MinAperture", v148);
                  }
                  if (v7 >= 0x23)
                  {
                    unint64_t v149 = *((__int16 *)__p + 34);
                    if (v149 > 3) {
                      uint64_t v150 = 3;
                    }
                    else {
                      uint64_t v150 = dword_1DDC0B110[v149];
                    }
                    uint64_t v151 = sub_1DDBA1778(a1);
                    uint64_t v155 = objc_msgSend_numberWithInt_(NSNumber, v152, v150, v153, v154);
                    sub_1DDA784D0(v151, (void *)*MEMORY[0x1E4F2F6D8], @"ImageStabilization", v155);
                  }
                }
              }
            }
          }
          goto LABEL_102;
        }
      }
      uint64_t v91 = 1;
      goto LABEL_62;
    }
  }
}

void sub_1DDBB1C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1DDBB1DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6 = *(unsigned __int16 *)(a4 + 2);
  if (v6 <= 0x6F && (v6 == 8 || v6 == 3))
  {
    unsigned int v9 = *(_DWORD *)(a4 + 4);
    uint64_t v10 = v9 >= 0x32 ? 50 : v9;
    if (v10 >= 3)
    {
      sub_1DDA4A3A0(&__p, v10);
      unsigned int v15 = *(_DWORD *)(a4 + 8);
      unsigned int v16 = bswap32(v15);
      if (a6) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = v15;
      }
      int64_t v14 = v46 - (unsigned char *)__p;
      if (sub_1DDBA1314(a1, (uint64_t)__p, v46 - (unsigned char *)__p, a5, v17) == v14)
      {
        unsigned int v18 = *((unsigned __int16 *)__p + 2);
        unsigned int v19 = bswap32(v18) >> 16;
        if (a6) {
          LOWORD(v18) = v19;
        }
        uint64_t v20 = (__int16)v18;
        if ((int)v20 >= 2)
        {
          uint64_t v21 = sub_1DDBA1778(a1);
          unsigned int v22 = (void *)*MEMORY[0x1E4F2F6D8];
          BOOL v23 = (void *)*MEMORY[0x1E4F2F6F0];
          int v24 = sub_1DDBA6568(v21, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F6F0]);

          if (v24)
          {
            uint64_t v25 = sub_1DDBA1778(a1);
            int v24 = sub_1DDBA65E8(v25, v22, v23);
          }
          if (v24 < (int)v20)
          {
            uint64_t v26 = sub_1DDBA1778(a1);
            uint64_t v30 = objc_msgSend_numberWithInt_(NSNumber, v27, v20, v28, v29);
            sub_1DDA784D0(v26, v22, v23, v30);
          }
        }
        if (v10 >= 0xF)
        {
          unsigned int v31 = bswap32(*((unsigned __int16 *)__p + 14)) >> 16;
          if (a6) {
            unsigned __int16 v32 = v31;
          }
          else {
            unsigned __int16 v32 = *((_WORD *)__p + 14);
          }
          if (v32 <= 4u)
          {
            uint64_t v33 = sub_1DDBA1778(a1);
            uint64_t v37 = objc_msgSend_numberWithInt_(NSNumber, v34, (__int16)v32, v35, v36);
            sub_1DDA784D0(v33, @"{PictStyleSetting}", @"FilterEffect", v37);
          }
          if (v10 >= 0x10)
          {
            unsigned int v38 = bswap32(*((unsigned __int16 *)__p + 15)) >> 16;
            if (a6) {
              unsigned __int16 v39 = v38;
            }
            else {
              unsigned __int16 v39 = *((_WORD *)__p + 15);
            }
            if (v39 <= 4u)
            {
              unsigned int v40 = sub_1DDBA1778(a1);
              uint64_t v44 = objc_msgSend_numberWithInt_(NSNumber, v41, (__int16)v39, v42, v43);
              sub_1DDA784D0(v40, @"{PictStyleSetting}", @"ToningEffect", v44);
            }
          }
        }
      }
      if (__p)
      {
        uint64_t v46 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1DDBB206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1DDBB20E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v19 = a2;
  uint64_t v11 = sub_1DDBA279C(a1, v19, a3, a4, a5, a6);
  if (v11 != -1)
  {
    unsigned int v12 = sub_1DDBA1778(a1);
    int v13 = sub_1DDBA17F8(a3);
    int64_t v14 = sub_1DDBA175C(a3);
    unsigned int v18 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v15, v11, v16, v17);
    sub_1DDA784D0(v12, v13, v14, v18);
  }
}

void sub_1DDBB21DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1DDBB2214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(unsigned int *)(a4 + 4);
  unsigned int v11 = *(_DWORD *)(a4 + 8);
  unsigned int v12 = bswap32(v11);
  if (a6) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v11;
  }
  unint64_t v14 = *(unsigned __int16 *)(a4 + 2);
  if (v14 > 0x6F) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = qword_1DDC0B570[v14];
  }
  int v42 = 0;
  unint64_t v16 = v15 * v10;
  unsigned __int16 v41 = 0;
  int v17 = sub_1DDBB0B78(a1);
  if (v17 != -2147483275 && v17 != -2147483255)
  {
    if (v16 < 6) {
      return;
    }
    if (sub_1DDBA1314(a1, (uint64_t)&v42, 2, a5, v13 + 4) == 2)
    {
      LOWORD(v18) = v42;
      unsigned int v19 = bswap32((unsigned __int16)v42) >> 16;
      if (a6) {
        LOWORD(v18) = v19;
      }
      LOWORD(v42) = v18;
      if ((v18 & 0x8000u) != 0) {
        int v18 = -(__int16)v18;
      }
      if ((unsigned __int16)v18 <= 0xFu)
      {
        uint64_t v20 = sub_1DDBA1778(a1);
        uint64_t v21 = sub_1DDBA17F8(a3);
        uint64_t v25 = objc_msgSend_numberWithInt_(NSNumber, v22, (__int16)v42, v23, v24);
        sub_1DDA784D0(v20, v21, (void *)*MEMORY[0x1E4F2F918], v25);
      }
    }
  }
  if (v16 < 0x16)
  {
    if (v16 < 8) {
      return;
    }
  }
  else if (sub_1DDBA1314(a1, (uint64_t)&v42 + 2, 2, a5, v13 + 20) == 2)
  {
    __int16 v26 = HIWORD(v42);
    unsigned int v27 = bswap32(HIWORD(v42)) >> 16;
    if (a6) {
      __int16 v26 = v27;
    }
    HIWORD(v42) = v26;
    uint64_t v28 = sub_1DDBA1778(a1);
    unsigned __int16 v32 = objc_msgSend_numberWithInt_(NSNumber, v29, HIWORD(v42), v30, v31);
    sub_1DDA784D0(v28, @"{PictStyleNormalized}", @"PictureStyle", v32);
  }
  if (sub_1DDBA1314(a1, (uint64_t)&v41, 2, a5, v13 + 6) == 2)
  {
    unsigned __int16 v33 = v41;
    unsigned int v34 = bswap32(v41) >> 16;
    if (a6) {
      unsigned __int16 v33 = v34;
    }
    unsigned __int16 v41 = v33;
    uint64_t v35 = sub_1DDBA1778(a1);
    uint64_t v36 = sub_1DDBA17F8(a3);
    unsigned int v40 = objc_msgSend_numberWithInt_(NSNumber, v37, (__int16)v41, v38, v39);
    sub_1DDA784D0(v35, v36, @"SharpnessFreq", v40);
  }
}

void sub_1DDBB24B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB24FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(_DWORD *)(a4 + 8);
  unsigned int v9 = bswap32(v8);
  if (a6) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v8;
  }
  unint64_t v11 = *(unsigned __int16 *)(a4 + 2);
  if (v11 > 0x6F) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = qword_1DDC0B570[v11];
  }
  uint64_t v13 = *(unsigned int *)(a4 + 4);
  int v141 = 0;
  int v142 = 0;
  unsigned __int8 v140 = 0;
  unsigned __int16 v139 = 0;
  unsigned __int16 v138 = 0;
  int v14 = sub_1DDBB0B78(a1);
  if (v14 > -2147483113)
  {
    if (v14 <= -2147483053)
    {
      if (v14 <= -2147483057)
      {
        if (v14 != -2147483112)
        {
          if (v14 != -2147483086) {
            return;
          }
          int v128 = 0;
          int v124 = 0;
          HIDWORD(v129) = 1;
          int v130 = 0;
          unint64_t v19 = 118;
          unint64_t v127 = 119;
          unint64_t v126 = 117;
          unint64_t v17 = 116;
          unint64_t v18 = 115;
LABEL_36:
          uint64_t v117 = 0xFFFFFFFFLL;
          uint64_t v15 = 12;
          char v119 = 1;
          uint64_t v118 = 0xFFFFFFFFLL;
          char v121 = 1;
          uint64_t v120 = 0xFFFFFFFFLL;
          LODWORD(v129) = 1;
          HIDWORD(v132) = 1;
          unint64_t v16 = 0xFFFFFFFFLL;
LABEL_47:
          unint64_t v125 = 0xFFFFFFFFLL;
          goto LABEL_48;
        }
        int v128 = 0;
        uint64_t v129 = 0x100000000;
        uint64_t v132 = 0;
        int v130 = 0;
        uint64_t v122 = 82;
        uint64_t v123 = 80;
        unint64_t v125 = 25;
        unint64_t v18 = 167;
        uint64_t v117 = 0xFFFFFFFFLL;
        uint64_t v15 = 230;
        goto LABEL_52;
      }
      if (v14 != -2147483056)
      {
        if (v14 != -2147483054) {
          return;
        }
        int v128 = 0;
        uint64_t v129 = 0x100000000;
        uint64_t v132 = 0;
        int v130 = 0;
        uint64_t v122 = 82;
        uint64_t v123 = 80;
        unint64_t v125 = 25;
        unint64_t v18 = 171;
        uint64_t v117 = 0xFFFFFFFFLL;
        uint64_t v15 = 246;
        goto LABEL_52;
      }
      int v130 = 0;
      uint64_t v129 = 0;
      uint64_t v132 = 0;
      int v128 = 0;
      char v119 = 1;
      uint64_t v122 = 86;
      uint64_t v123 = 84;
      unint64_t v125 = 25;
      uint64_t v117 = 0xFFFFFFFFLL;
      uint64_t v15 = 274;
    }
    else
    {
      if (v14 <= -2147483025)
      {
        if (v14 == -2147483052)
        {
          uint64_t v129 = 0;
          uint64_t v132 = 0;
          int v128 = 0;
          int v130 = 1;
          uint64_t v122 = 69;
          uint64_t v123 = 67;
          unint64_t v125 = 24;
          unint64_t v18 = 0xFFFFFFFFLL;
          uint64_t v117 = 2359;
          uint64_t v15 = 226;
        }
        else
        {
          if (v14 != -2147483039) {
            return;
          }
          int v128 = 0;
          uint64_t v129 = 0x100000000;
          uint64_t v132 = 0;
          int v130 = 0;
          uint64_t v122 = 82;
          uint64_t v123 = 80;
          unint64_t v125 = 25;
          unint64_t v18 = 167;
          uint64_t v117 = 0xFFFFFFFFLL;
          uint64_t v15 = 234;
        }
        goto LABEL_52;
      }
      switch(v14)
      {
        case -2147483024:
          int v128 = 0;
          uint64_t v129 = 0x100000000;
          uint64_t v132 = 0;
          int v130 = 0;
          uint64_t v122 = 86;
          uint64_t v123 = 84;
          unint64_t v125 = 25;
          unint64_t v18 = 176;
          uint64_t v117 = 0xFFFFFFFFLL;
          uint64_t v15 = 255;
          goto LABEL_52;
        case -2147483007:
          int v130 = 0;
          uint64_t v129 = 0;
          uint64_t v132 = 0;
          int v128 = 0;
          char v119 = 1;
          uint64_t v122 = 86;
          uint64_t v123 = 84;
          unint64_t v125 = 25;
          uint64_t v117 = 0xFFFFFFFFLL;
          uint64_t v15 = 335;
          break;
        case -2147483001:
          int v130 = 0;
          uint64_t v129 = 0;
          uint64_t v132 = 0;
          int v128 = 0;
          char v119 = 1;
          uint64_t v122 = 87;
          uint64_t v123 = 85;
          unint64_t v125 = 25;
          uint64_t v117 = 0xFFFFFFFFLL;
          uint64_t v15 = 232;
          break;
        default:
          return;
      }
    }
    unint64_t v18 = 0xFFFFFFFFLL;
    goto LABEL_55;
  }
  if (v14 > -2147483275)
  {
    if (v14 > -2147483249)
    {
      if (v14 != -2147483248)
      {
        if (v14 != -2147483117)
        {
          if (v14 != -2147483115) {
            return;
          }
          goto LABEL_40;
        }
        char v121 = 0;
        int v128 = 0;
        uint64_t v129 = 0x100000000;
        HIDWORD(v132) = 0;
        int v130 = 0;
        unint64_t v125 = 23;
        uint64_t v120 = 208;
        unint64_t v18 = 108;
        uint64_t v117 = 0xFFFFFFFFLL;
        uint64_t v15 = 151;
        char v119 = 1;
        uint64_t v118 = 0xFFFFFFFFLL;
        unint64_t v17 = 0xFFFFFFFFLL;
        unint64_t v126 = 0xFFFFFFFFLL;
        unint64_t v127 = 0xFFFFFFFFLL;
        unint64_t v19 = 0xFFFFFFFFLL;
        unint64_t v16 = 0xFFFFFFFFLL;
        int v124 = 1;
LABEL_48:
        LOBYTE(v132) = 1;
        uint64_t v123 = 0xFFFFFFFFLL;
        uint64_t v122 = 0xFFFFFFFFLL;
        goto LABEL_57;
      }
      uint64_t v129 = 0;
      uint64_t v132 = 0;
      int v128 = 0;
      int v130 = 1;
      uint64_t v122 = 69;
      uint64_t v123 = 67;
      unint64_t v125 = 24;
      unint64_t v18 = 0xFFFFFFFFLL;
      uint64_t v117 = 2347;
      uint64_t v15 = 214;
      goto LABEL_52;
    }
    if (v14 != -2147483274)
    {
      unsigned __int16 v20 = 392;
LABEL_34:
      if (v14 != (v20 | 0x80000000)) {
        return;
      }
      int v128 = 0;
      int v124 = 0;
      HIDWORD(v129) = 1;
      int v130 = 0;
      unint64_t v19 = 110;
      unint64_t v127 = 111;
      unint64_t v126 = 115;
      unint64_t v17 = 114;
      unint64_t v18 = 108;
      goto LABEL_36;
    }
    uint64_t v129 = 0;
    uint64_t v132 = 0;
    int v128 = 0;
    int v130 = 1;
    uint64_t v122 = 69;
    uint64_t v123 = 67;
    unint64_t v125 = 24;
    unint64_t v18 = 0xFFFFFFFFLL;
    uint64_t v117 = 2355;
    uint64_t v15 = 222;
LABEL_52:
    char v119 = 1;
LABEL_55:
    uint64_t v118 = 0xFFFFFFFFLL;
    goto LABEL_56;
  }
  if (v14 <= -2147483288)
  {
    if (v14 == -2147483647)
    {
      HIDWORD(v132) = 0;
      int v124 = 0;
      HIDWORD(v129) = 1;
      int v130 = 0;
      unint64_t v16 = 65;
      unint64_t v17 = 66;
      unint64_t v18 = 75;
    }
    else
    {
      if (v14 != -2147483289) {
        return;
      }
      HIDWORD(v132) = 0;
      int v124 = 0;
      HIDWORD(v129) = 1;
      int v130 = 0;
      unint64_t v16 = 71;
      unint64_t v17 = 72;
      unint64_t v18 = 81;
    }
    uint64_t v117 = 0xFFFFFFFFLL;
    uint64_t v15 = 13;
    char v119 = 1;
    uint64_t v118 = 0xFFFFFFFFLL;
    char v121 = 1;
    uint64_t v120 = 0xFFFFFFFFLL;
    unint64_t v126 = 0xFFFFFFFFLL;
    unint64_t v127 = 0xFFFFFFFFLL;
    unint64_t v19 = 0xFFFFFFFFLL;
    int v128 = 1;
    LODWORD(v129) = 1;
    goto LABEL_47;
  }
  if (v14 != -2147483287)
  {
    unsigned __int16 v20 = 372;
    goto LABEL_34;
  }
LABEL_40:
  char v119 = 0;
  int v128 = 0;
  uint64_t v129 = 0x100000000;
  uint64_t v132 = 0;
  int v130 = 0;
  uint64_t v122 = 69;
  uint64_t v123 = 67;
  unint64_t v125 = 24;
  uint64_t v118 = 374;
  unint64_t v18 = 134;
  uint64_t v117 = 0xFFFFFFFFLL;
  uint64_t v15 = 273;
LABEL_56:
  char v121 = 1;
  uint64_t v120 = 0xFFFFFFFFLL;
  unint64_t v17 = 0xFFFFFFFFLL;
  unint64_t v126 = 0xFFFFFFFFLL;
  unint64_t v127 = 0xFFFFFFFFLL;
  unint64_t v19 = 0xFFFFFFFFLL;
  unint64_t v16 = 0xFFFFFFFFLL;
  int v124 = 1;
LABEL_57:
  unint64_t v21 = v12 * v13;
  if (v12 * v13 >= (unint64_t)(v15 + 2) && sub_1DDBA1314(a1, (uint64_t)&v141, 2, a5, v15 + v10) == 2)
  {
    __int16 v22 = v141;
    unsigned int v23 = bswap32((unsigned __int16)v141) >> 16;
    if (!a6) {
      __int16 v22 = v23;
    }
    LOWORD(v141) = v22;
    if ((unsigned __int16)(v22 - 1) <= 0xFFFDu)
    {
      uint64_t v24 = sub_1DDBA1778(a1);
      uint64_t v28 = objc_msgSend_numberWithInt_(NSNumber, v25, (unsigned __int16)v141, v26, v27);
      sub_1DDA784D0(v24, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F6F8], v28);

      if ((v130 & 1) == 0) {
        goto LABEL_68;
      }
LABEL_65:
      unint64_t v29 = sub_1DDBA1314(a1, (uint64_t)v143, 64, a5, v117 + v10);
      if (v29 <= 0x40)
      {
        v143[v29] = 0;
        if (!sub_1DDBA1100(a1, v143))
        {
          uint64_t v30 = sub_1DDBA1778(a1);
          unsigned int v34 = objc_msgSend_stringWithUTF8String_(NSString, v31, (uint64_t)v143, v32, v33);
          sub_1DDA784D0(v30, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F708], v34);
        }
      }
      goto LABEL_68;
    }
  }
  if (v130) {
    goto LABEL_65;
  }
LABEL_68:
  v143[0] = 0;
  int v35 = HIDWORD(v129);
  if (v21 <= v18) {
    int v35 = 0;
  }
  if (v35 == 1 && sub_1DDBA1314(a1, (uint64_t)v143, 1, a5, v18 + v10) == 1)
  {
    uint64_t v36 = sub_1DDBA1778(a1);
    unsigned int v40 = objc_msgSend_numberWithInt_(NSNumber, v37, v143[0], v38, v39);
    sub_1DDA784D0(v36, @"{PictStyleNormalized}", @"PictureStyle", v40);
  }
  char v137 = 0;
  int v41 = v129;
  if (v21 <= v17) {
    int v41 = 0;
  }
  if (v41 == 1 && sub_1DDBA1314(a1, (uint64_t)&v137, 1, a5, v17 + v10) == 1)
  {
    LOBYTE(v42) = v137;
    if (v137 < 0) {
      int v42 = -v137;
    }
    if (v42 <= 0xFu)
    {
      uint64_t v43 = sub_1DDBA1778(a1);
      uint64_t v47 = objc_msgSend_numberWithInt_(NSNumber, v44, v137, v45, v46);
      sub_1DDA784D0(v43, @"{PictStyleSetting}", (void *)*MEMORY[0x1E4F2F918], v47);
    }
  }
  char v136 = 0;
  int v48 = v128;
  if (v21 <= v16) {
    int v48 = 0;
  }
  if (v48 == 1 && sub_1DDBA1314(a1, (uint64_t)&v136, 1, a5, v16 + v10) == 1)
  {
    uint64_t v49 = sub_1DDBA1778(a1);
    uint64_t v53 = objc_msgSend_numberWithInt_(NSNumber, v50, v136, v51, v52);
    sub_1DDA784D0(v49, @"{PictStyleSetting}", @"SharpnessFreq", v53);
  }
  char v135 = 0;
  int v54 = HIDWORD(v132);
  if (v21 <= v19) {
    int v54 = 0;
  }
  if (v54 == 1 && sub_1DDBA1314(a1, (uint64_t)&v135, 1, a5, v19 + v10) == 1)
  {
    LOBYTE(v55) = v135;
    if (v135 < 0) {
      int v55 = -v135;
    }
    if (v55 <= 0xFu)
    {
      uint64_t v56 = sub_1DDBA1778(a1);
      uint64_t v60 = objc_msgSend_numberWithInt_(NSNumber, v57, v135, v58, v59);
      sub_1DDA784D0(v56, @"{PictStyleSetting}", (void *)*MEMORY[0x1E4F2F8F0], v60);
    }
  }
  char v134 = 0;
  int v61 = HIDWORD(v132);
  if (v21 <= v127) {
    int v61 = 0;
  }
  if (v61 == 1 && sub_1DDBA1314(a1, (uint64_t)&v134, 1, a5, v127 + v10) == 1)
  {
    uint64_t v62 = sub_1DDBA1778(a1);
    uint64_t v66 = objc_msgSend_numberWithInt_(NSNumber, v63, v134, v64, v65);
    sub_1DDA784D0(v62, @"{PictStyleSetting}", @"ColorTone", v66);
  }
  char v133 = 0;
  int v67 = HIDWORD(v132);
  if (v21 <= v126) {
    int v67 = 0;
  }
  if (v67 == 1 && sub_1DDBA1314(a1, (uint64_t)&v133, 1, a5, v126 + v10) == 1)
  {
    std::string::size_type v68 = sub_1DDBA1778(a1);
    std::string::size_type v72 = objc_msgSend_numberWithInt_(NSNumber, v69, v133, v70, v71);
    sub_1DDA784D0(v68, @"{PictStyleSetting}", (void *)*MEMORY[0x1E4F2F7D8], v72);
  }
  int v73 = v124;
  if (v21 <= v125) {
    int v73 = 0;
  }
  if (v73 == 1 && sub_1DDBA1314(a1, (uint64_t)&v140, 1, a5, v125 + v10) == 1)
  {
    uint64_t v74 = sub_1DDBA1778(a1);
    uint64_t v78 = objc_msgSend_numberWithInt_(NSNumber, v75, v140 - 128, v76, v77);
    sub_1DDA784D0(v74, (void *)*MEMORY[0x1E4F2FC28], @"CameraTemperatur", v78);
  }
  char v79 = v132;
  if (v21 < v123 + 2) {
    char v79 = 1;
  }
  if ((v79 & 1) == 0 && sub_1DDBA1314(a1, (uint64_t)&v139, 2, a5, v123 + v10) == 2)
  {
    unsigned __int16 v80 = v139;
    unsigned int v81 = bswap32(v139) >> 16;
    if (!a6) {
      unsigned __int16 v80 = v81;
    }
    unsigned __int16 v139 = v80;
    unint64_t v82 = sub_1DDBA1778(a1);
    LOWORD(v83) = v139;
    *(float *)&double v84 = (float)v83 / 100.0;
    uint64_t v89 = objc_msgSend_numberWithFloat_(NSNumber, v85, v86, v87, v88, v84);
    sub_1DDA784D0(v82, (void *)*MEMORY[0x1E4F2FC28], @"FocusDistanceUpper", v89);
  }
  char v90 = v132;
  if (v21 < v122 + 2) {
    char v90 = 1;
  }
  if ((v90 & 1) == 0 && sub_1DDBA1314(a1, (uint64_t)&v138, 2, a5, v122 + v10) == 2)
  {
    unsigned __int16 v91 = v138;
    unsigned int v92 = bswap32(v138) >> 16;
    if (!a6) {
      unsigned __int16 v91 = v92;
    }
    unsigned __int16 v138 = v91;
    BOOL v93 = sub_1DDBA1778(a1);
    LOWORD(v94) = v138;
    *(float *)&double v95 = (float)v94 / 100.0;
    uint64_t v100 = objc_msgSend_numberWithFloat_(NSNumber, v96, v97, v98, v99, v95);
    sub_1DDA784D0(v93, (void *)*MEMORY[0x1E4F2FC28], @"FocusDistanceLower", v100);
  }
  char v101 = v121;
  if (v21 < v120 + 2) {
    char v101 = 1;
  }
  if ((v101 & 1) != 0 || sub_1DDBA1314(a1, (uint64_t)&v141 + 2, 2, a5, v120 + v10) != 2)
  {
    unsigned int v102 = 0;
  }
  else
  {
    LOWORD(v102) = HIWORD(v141);
    unsigned int v103 = bswap32(HIWORD(v141)) >> 16;
    if (a6) {
      LOWORD(v102) = v103;
    }
    unsigned int v102 = (unsigned __int16)v102;
    int v142 = (unsigned __int16)v102;
  }
  char v104 = v119;
  if (v21 < v118 + 4) {
    char v104 = 1;
  }
  if ((v104 & 1) == 0)
  {
    uint64_t v105 = sub_1DDBA1314(a1, (uint64_t)&v142, 4, a5, v118 + v10);
    unsigned int v102 = v142;
    if (v105 == 4)
    {
      unsigned int v106 = bswap32(v142);
      if (a6) {
        unsigned int v102 = v106;
      }
      int v142 = v102;
    }
  }
  if (v102 >= 2)
  {
    uint64_t v107 = sub_1DDBA1778(a1);
    unsigned int v108 = (void *)*MEMORY[0x1E4F2F6D8];
    int v109 = (void *)*MEMORY[0x1E4F2F6F0];
    signed int v110 = sub_1DDBA65E8(v107, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F6F0]);

    uint64_t v111 = v142;
    if (v142 > v110)
    {
      int v112 = sub_1DDBA1778(a1);
      double v116 = objc_msgSend_numberWithInt_(NSNumber, v113, v111, v114, v115);
      sub_1DDA784D0(v112, v108, v109, v116);
    }
  }
}

void sub_1DDBB3404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB3558(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11 = a2;
  unsigned __int16 v49 = 0;
  unsigned int v12 = *(_DWORD *)(a4 + 8);
  unsigned int v13 = bswap32(v12);
  if (a6) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = v12;
  }
  uint64_t v15 = sub_1DDBA1314(a1, (uint64_t)&v49, 2, a5, v14);
  unsigned __int16 v16 = v49;
  unsigned int v17 = bswap32(v49) >> 16;
  if (a6) {
    unsigned __int16 v16 = v17;
  }
  unsigned __int16 v49 = v16;
  if (v15 == 2 && v16 >= 7u && v16 <= 0xFFFu && (v16 & 3) == 0)
  {
    sub_1DDBAA154(&__p, v16);
    unsigned int v20 = *(_DWORD *)(a4 + 8);
    unsigned int v21 = bswap32(v20);
    if (a6) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = v20;
    }
    uint64_t v23 = sub_1DDBA1314(a1, (uint64_t)__p, v48 - (unsigned char *)__p, a5, v22);
    uint64_t v24 = __p;
    if (v23 == v48 - (unsigned char *)__p)
    {
      id v45 = v11;
      if (v23 >= 9)
      {
        uint64_t v46 = (char *)__p + v23;
        uint64_t v25 = (char *)__p + 8;
        do
        {
          uint64_t v26 = (unsigned int *)(v25 + 12);
          if (v25 + 12 > v46) {
            break;
          }
          unsigned int v27 = *((_DWORD *)v25 + 1);
          unsigned int v28 = bswap32(v27);
          if (a6) {
            unsigned int v27 = v28;
          }
          BOOL v29 = (v27 & 3) == 0 && v27 >= 8;
          if (!v29 || v27 > v49) {
            break;
          }
          unint64_t v31 = (unint64_t)v26 + v27 - 8;
          if (v31 > (unint64_t)v46) {
            break;
          }
          for (unint64_t i = (unsigned int *)(v25 + 20); (unint64_t)i < v31; unint64_t i = v26 + 2)
          {
            unsigned int v33 = *v26;
            if (a6)
            {
              unsigned int v33 = bswap32(v33);
              unsigned int v34 = bswap32(v26[1]);
            }
            else
            {
              unsigned int v34 = v26[1];
            }
            uint64_t v26 = &i[v34];
            if (v34 >= v49 || (unint64_t)v26 > v31) {
              goto LABEL_49;
            }
            if (v33 == 2062)
            {
              unsigned int v36 = *i;
              uint64_t v37 = sub_1DDBA1778(a1);
              unsigned int v38 = bswap32(v36);
              if (a6) {
                uint64_t v39 = v38;
              }
              else {
                uint64_t v39 = v36;
              }
              unsigned int v40 = sub_1DDBA17F8(a3);
              uint64_t v44 = objc_msgSend_numberWithInt_(NSNumber, v41, v39, v42, v43);
              sub_1DDA784D0(v37, v40, @"AspectRatioInfo", v44);
            }
          }
          uint64_t v25 = (char *)v31;
        }
        while (v31 < (unint64_t)v46);
      }
LABEL_49:
      uint64_t v24 = __p;
      id v11 = v45;
    }
    if (v24)
    {
      int v48 = v24;
      operator delete(v24);
    }
  }
}

void sub_1DDBB37A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB37FC(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t *a5)
{
  id v8 = a3;
  unsigned int v9 = v8;
  uint64_t v10 = 0;
  uint64_t v11 = 0x92000000DB0;
  if (a2 <= -2147483277)
  {
    if (a2 != -2147483647)
    {
      if (a2 != -2147483289) {
        goto LABEL_22;
      }
LABEL_8:
      uint64_t v11 = 0xD0000001380;
    }
  }
  else if (a2 != -2147483276)
  {
    if (a2 != -2147483256)
    {
      if (a2 != -2147483086) {
        goto LABEL_22;
      }
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_9:
  *a5 = v11;
  if (!v8) {
    goto LABEL_21;
  }
  unsigned int v12 = sub_1DDBB397C(v8, 0);
  int v13 = sub_1DDBB397C(v9, 1uLL);
  int v14 = sub_1DDBB397C(v9, 2uLL);
  if (v12 <= 0x41) {
    int v15 = -529;
  }
  else {
    int v15 = -522;
  }
  unsigned int v16 = v15 + 10 * v13 + v14;
  if (v12 > 0x42) {
    v16 += 10;
  }
  if (v12 > 0x43) {
    v16 += 11;
  }
  if (v12 > 0x44) {
    v16 += 10;
  }
  if (v16 < 0x2D)
  {
    int v17 = dword_1DDC0B3D0[v16];
    int v18 = dword_1DDC0B484[v16];
    *(_DWORD *)a4 = v17;
    *(_DWORD *)(a4 + 4) = v18;
    *(void *)(a4 + 8) = 0xA400000076;
    uint64_t v10 = 1;
  }
  else
  {
LABEL_21:
    uint64_t v10 = 0;
  }
LABEL_22:

  return v10;
}

void sub_1DDBB3968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB397C(void *a1, unint64_t a2)
{
  id v3 = a1;
  if (objc_msgSend_length(v3, v4, v5, v6, v7) <= a2) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = objc_msgSend_characterAtIndex_(v3, v8, a2, v9, v10);
  }

  return v11;
}

void sub_1DDBB39D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDBB39E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a2 >= objc_msgSend_length(@"A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  ", a2, a3, a4, a5)/ 0xCuLL)
  {
    id v8 = 0;
  }
  else
  {
    id v8 = objc_msgSend_substringWithRange_(@"A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  ", v6, 12 * v5, 12, v7);
  }

  return v8;
}

void sub_1DDBB3A54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v9 = a2;
  uint64_t v10 = *(unsigned __int16 *)(a4 + 2);
  if ((v10 - 112) >= 0xFFFFFF91)
  {
    unint64_t v11 = qword_1DDC0B570[v10];
    size_t v12 = v11 * *(unsigned int *)(a4 + 4);
    if (v12 <= 0x4000)
    {
      sub_1DDA1AB9C(&v74, v12);
      unsigned int v13 = *(_DWORD *)(a4 + 8);
      unsigned int v14 = bswap32(v13);
      if (a6) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = v13;
      }
      unint64_t v16 = sub_1DDBA1314(a1, (uint64_t)v74, (char *)v75 - (char *)v74, a5, v15);
      int v17 = v74;
      if (v16 == (char *)v75 - (char *)v74)
      {
        int v18 = sub_1DDBB0B78(a1);
        int v66 = sub_1DDBB0C1C(a1);
        unint64_t v19 = v16 / v11;
        if (v16 / v11 >= 8)
        {
          if (a6) {
            *int v17 = vrev16q_s8(*v17);
          }
          uint64_t v20 = v17->u16[0];
          uint64_t v21 = v20 >= v17->u16[1] ? v17->u16[1] : v17->u16[0];
          uint64_t v65 = v21;
          int v22 = v17->i16[5];
          LODWORD(v73) = v17->i16[4];
          HIDWORD(v73) = v22;
          int v23 = v17->i16[6];
          int v24 = v17->i16[7];
          sub_1DDBA9530(a1, &v73, 1);
          if ((unsigned __int16)(v20 - 1) <= 0x62u)
          {
            uint64_t v63 = (char *)a1;
            id v64 = v9;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            std::string __p = 0;
            uint64_t v71 = 0;
            std::string::size_type v72 = 0;
            do
            {
              uint64_t v30 = v29 + 8;
              unint64_t v31 = v29 + 8 + v20;
              if (v31 < v19)
              {
                if (a6)
                {
                  v17->i16[v30] = bswap32(v17->u16[v30]) >> 16;
                  unsigned int v32 = bswap32(v17->u16[v31]) >> 16;
                }
                else
                {
                  LOWORD(v32) = v17->i16[v31];
                }
                v17->i16[v31] = v32;
                unsigned int v33 = v17->i16[v30];
                int v34 = (__int16)v32;
                if (v66) {
                  int v34 = -(__int16)v32;
                }
                *(void *)&long long v69 = __PAIR64__(v34, v33);
                sub_1DDA18218((_DWORD *)&v69 + 2, v23, v24);
                int v35 = v71;
                if (v71 >= v72)
                {
                  uint64_t v36 = (v71 - (unsigned char *)__p) >> 4;
                  unint64_t v37 = v36 + 1;
                  if ((unint64_t)(v36 + 1) >> 60) {
                    sub_1DDA17F78();
                  }
                  uint64_t v38 = v72 - (unsigned char *)__p;
                  if ((v72 - (unsigned char *)__p) >> 3 > v37) {
                    unint64_t v37 = v38 >> 3;
                  }
                  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v39 = v37;
                  }
                  if (v39) {
                    unsigned int v40 = (char *)sub_1DDA19838((uint64_t)&v72, v39);
                  }
                  else {
                    unsigned int v40 = 0;
                  }
                  int v41 = &v40[16 * v36];
                  *(_OWORD *)int v41 = v69;
                  uint64_t v43 = (char *)__p;
                  uint64_t v42 = v71;
                  uint64_t v44 = v41;
                  if (v71 != __p)
                  {
                    do
                    {
                      *((_OWORD *)v44 - 1) = *((_OWORD *)v42 - 1);
                      v44 -= 16;
                      v42 -= 16;
                    }
                    while (v42 != v43);
                    uint64_t v42 = (char *)__p;
                  }
                  unsigned int v28 = v41 + 16;
                  std::string __p = v44;
                  uint64_t v71 = v41 + 16;
                  std::string::size_type v72 = &v40[16 * v39];
                  if (v42) {
                    operator delete(v42);
                  }
                }
                else
                {
                  *(_OWORD *)uint64_t v71 = v69;
                  unsigned int v28 = v35 + 16;
                }
                uint64_t v71 = v28;
              }
              ++v29;
            }
            while (v29 != v20);
            uint64_t v45 = 0;
            uint64_t v46 = 0;
            unint64_t v47 = 0;
            unint64_t v48 = 0;
            char v49 = 0;
            uint64_t v50 = 4 * v20 + 16;
            uint64_t v51 = (char *)__p + 4;
            uint64_t v52 = 2147484020;
            do
            {
              if (v50 + v45 < v16)
              {
                uint64_t v25 = 0;
                uint64_t v26 = (unsigned int *)v51;
                do
                {
                  if ((v18 == -2147483256 || v18 == -2147483276)
                    && (v28 - (unsigned char *)__p) >> 4 > (unint64_t)(v46 + v25)
                    && (uint64_t v27 = *v26, v27 == -1))
                  {
                    ++v49;
                  }
                  else
                  {
                    uint64_t v27 = v74->u8[v50 + v45] >> v25;
                    char v53 = v46 + v25 - v49;
                    uint64_t v54 = 1 << v53;
                    BOOL v55 = (v53 & 0x40) == 0;
                    if ((v53 & 0x40) != 0) {
                      uint64_t v56 = 0;
                    }
                    else {
                      uint64_t v56 = 1 << v53;
                    }
                    if (v55) {
                      uint64_t v54 = 0;
                    }
                    unint64_t v57 = v54 | v48;
                    unint64_t v58 = v56 | v47;
                    if (v27)
                    {
                      unint64_t v47 = v58;
                      unint64_t v48 = v57;
                    }
                  }
                  ++v25;
                  v26 += 4;
                }
                while (v25 != 8);
              }
              ++v45;
              v46 += 8;
              v51 += 128;
            }
            while (v45 != ((v20 - 1) >> 3) + 1);
            if (v18 != -2147483256 && v18 != -2147483276 || !v65)
            {
LABEL_66:
              sub_1DDBA96A8(v63, v47, v48, 1);
              sub_1DDBA94FC(v63, (uint64_t)&__p, 1);
              id v9 = v64;
              if (__p)
              {
                uint64_t v71 = (char *)__p;
                operator delete(__p);
              }
              goto LABEL_68;
            }
            uint64_t v59 = 0;
            unint64_t v60 = 0;
            while (1)
            {
              long long v69 = 0uLL;
              int v61 = sub_1DDBB39E0(v52, (const char *)(unsigned __int16)v60, v25, (uint64_t)v26, v27);
              int v62 = sub_1DDBB37FC((uint64_t)v61, v18, v61, (uint64_t)&v69, &v68);

              if (v62)
              {
                uint64_t v52 = (uint64_t)__p;
                if (v60 >= (v71 - (unsigned char *)__p) >> 4)
                {
                  if (__p)
                  {
                    uint64_t v71 = (char *)__p;
                    operator delete(__p);
                  }
                  id v9 = v64;
                  break;
                }
                *(void *)((char *)__p + v59) = v69;
              }
              ++v60;
              v59 += 16;
              if (v65 == v60) {
                goto LABEL_66;
              }
            }
          }
        }
LABEL_68:
        int v17 = v74;
      }
      if (v17)
      {
        uint64_t v75 = v17;
        operator delete(v17);
      }
    }
  }
}

void sub_1DDBB3EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void sub_1DDBB3F60(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10 = a2;
  uint64_t v11 = *(unsigned __int16 *)(a4 + 2);
  if ((v11 - 112) >= 0xFFFFFF91)
  {
    unint64_t v12 = qword_1DDC0B570[v11];
    size_t v13 = v12 * *(unsigned int *)(a4 + 4);
    if (v13 <= 0x4000)
    {
      sub_1DDA1AB9C(&v76, v13);
      unsigned int v14 = *(_DWORD *)(a4 + 8);
      unsigned int v15 = bswap32(v14);
      if (a6) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = v14;
      }
      unint64_t v17 = sub_1DDBA1314((uint64_t)a1, (uint64_t)v76, (char *)v77 - (char *)v76, a5, v16);
      int v18 = v76;
      if (v17 == (char *)v77 - (char *)v76)
      {
        int v70 = sub_1DDBB0C1C((uint64_t)a1);
        unint64_t v19 = v17 / v12;
        if (v19 >= 8)
        {
          if (a6) {
            int8x16_t *v18 = vrev16q_s8(*v18);
          }
          uint64_t v20 = v18->i16[1];
          uint64_t v21 = v18->u16[2];
          if (v21 >= v18->u16[3]) {
            uint64_t v22 = v18->u16[3];
          }
          else {
            uint64_t v22 = v18->u16[2];
          }
          int v23 = v18->i16[7];
          LODWORD(v75) = v18->i16[6];
          HIDWORD(v75) = v23;
          sub_1DDBA9530((uint64_t)a1, &v75, 1);
          if (v20 > 5) {
            int v24 = @"UNKNOWN  AF MODE";
          }
          else {
            int v24 = off_1E6D06388[v20];
          }
          sub_1DDBA4174((uint64_t)a1, v24, 0, 0);
          switch((int)v20)
          {
            case 0:
              uint64_t v25 = sub_1DDBA1778((uint64_t)a1);
              sub_1DDA784D0(v25, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58], &unk_1F39AFA70);
              goto LABEL_20;
            case 2:
            case 4:
              uint64_t v25 = sub_1DDBA1778((uint64_t)a1);
              sub_1DDA784D0(v25, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58], &unk_1F39AFA88);
              goto LABEL_20;
            case 5:
              uint64_t v25 = sub_1DDBA1778((uint64_t)a1);
              sub_1DDA784D0(v25, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58], &unk_1F39AFAA0);
LABEL_20:

              break;
            default:
              break;
          }
          if ((unsigned __int16)(v21 - 1) <= 0x62u)
          {
            id v69 = v10;
            std::string __p = 0;
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            if (v22)
            {
              for (uint64_t i = 0; i != v22; ++i)
              {
                uint64_t v27 = i + 8;
                unint64_t v28 = i + 8 + v21;
                if (v28 >= v19)
                {
                  int v30 = 0;
                  int v31 = 0;
                }
                else
                {
                  unsigned int v29 = v18->u16[v27];
                  if (a6)
                  {
                    LOWORD(v29) = __rev16(v29);
                    LODWORD(v28) = bswap32(v18->u16[v28]) >> 16;
                  }
                  else
                  {
                    LOWORD(v28) = v18->i16[v28];
                  }
                  int v30 = (__int16)v29;
                  int v31 = (__int16)v28;
                }
                uint64_t v32 = v27 + 2 * v21;
                uint64_t v33 = v32 + v21;
                if (v32 + v21 >= v19)
                {
                  unsigned int v34 = 0;
                  LODWORD(v33) = 0;
                }
                else
                {
                  unsigned int v34 = v18->u16[v32];
                  if (a6)
                  {
                    LOWORD(v34) = __rev16(v34);
                    LODWORD(v33) = bswap32(v18->u16[v33]) >> 16;
                  }
                  else
                  {
                    LOWORD(v33) = v18->i16[v33];
                  }
                  unsigned int v34 = (__int16)v34;
                  LODWORD(v33) = (__int16)v33;
                  if (v70) {
                    LODWORD(v33) = -(__int16)v33;
                  }
                }
                *(void *)&long long v71 = __PAIR64__(v33, v34);
                sub_1DDA18218((_DWORD *)&v71 + 2, v30, v31);
                int v35 = v73;
                if (v73 >= v74)
                {
                  uint64_t v37 = (v73 - (unsigned char *)__p) >> 4;
                  unint64_t v38 = v37 + 1;
                  if ((unint64_t)(v37 + 1) >> 60) {
                    sub_1DDA17F78();
                  }
                  uint64_t v39 = v74 - (unsigned char *)__p;
                  if ((v74 - (unsigned char *)__p) >> 3 > v38) {
                    unint64_t v38 = v39 >> 3;
                  }
                  if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v40 = v38;
                  }
                  if (v40) {
                    int v41 = (char *)sub_1DDA19838((uint64_t)&v74, v40);
                  }
                  else {
                    int v41 = 0;
                  }
                  uint64_t v42 = &v41[16 * v37];
                  *(_OWORD *)uint64_t v42 = v71;
                  uint64_t v44 = (char *)__p;
                  uint64_t v43 = v73;
                  uint64_t v45 = v42;
                  if (v73 != __p)
                  {
                    do
                    {
                      *((_OWORD *)v45 - 1) = *((_OWORD *)v43 - 1);
                      v45 -= 16;
                      v43 -= 16;
                    }
                    while (v43 != v44);
                    uint64_t v43 = (char *)__p;
                  }
                  uint64_t v36 = v42 + 16;
                  std::string __p = v45;
                  uint64_t v73 = v42 + 16;
                  uint64_t v74 = &v41[16 * v40];
                  if (v43) {
                    operator delete(v43);
                  }
                }
                else
                {
                  *(_OWORD *)uint64_t v73 = v71;
                  uint64_t v36 = v35 + 16;
                }
                uint64_t v73 = v36;
              }
            }
            sub_1DDBA94FC(a1, (uint64_t)&__p, 1);
            id v10 = v69;
            if (__p)
            {
              uint64_t v73 = (char *)__p;
              operator delete(__p);
            }
          }
          uint64_t v46 = 4 * v21 + 8;
          if (v22)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            unint64_t v49 = 0;
            unint64_t v50 = 0;
            uint64_t v51 = 2 * v46;
            unsigned int v52 = (v22 - 1) >> 3;
            do
            {
              if (v51 + v48 < v17)
              {
                for (int j = 0; j != 8; ++j)
                {
                  if ((v76->u8[v51 + v48] >> j))
                  {
                    char v54 = v47 + j;
                    if ((v47 + j) > 0x7F) {
                      goto LABEL_92;
                    }
                    uint64_t v55 = 1 << v54;
                    BOOL v56 = (v54 & 0x40) == 0;
                    if ((((_BYTE)v47 + (_BYTE)j) & 0x40) != 0) {
                      uint64_t v57 = 0;
                    }
                    else {
                      uint64_t v57 = 1 << v54;
                    }
                    if (v56) {
                      uint64_t v55 = 0;
                    }
                    v50 |= v55;
                    v49 |= v57;
                  }
                }
              }
              ++v48;
              v47 += 8;
            }
            while (v48 != v52 + 1);
            uint64_t v58 = (v52 + 2) >> 1;
          }
          else
          {
            uint64_t v58 = 0;
            unint64_t v49 = 0;
            unint64_t v50 = 0;
          }
          sub_1DDBA96A8(a1, v49, v50, 1);
          unint64_t v59 = 2 * (v46 + v58);
          if (v59 < v17)
          {
            if (v22)
            {
              int v60 = 0;
              uint64_t v61 = 0;
              unint64_t v62 = 0;
              unint64_t v63 = 0;
              do
              {
                if (v59 + v61 < v17)
                {
                  for (int k = 0; k != 8; ++k)
                  {
                    if ((v76->u8[v59 + v61] >> k))
                    {
                      char v65 = v60 + k;
                      if ((v60 + k) > 0x7F) {
                        goto LABEL_92;
                      }
                      uint64_t v66 = 1 << v65;
                      BOOL v67 = (v65 & 0x40) == 0;
                      if ((((_BYTE)v60 + (_BYTE)k) & 0x40) != 0) {
                        uint64_t v68 = 0;
                      }
                      else {
                        uint64_t v68 = 1 << v65;
                      }
                      if (v67) {
                        uint64_t v66 = 0;
                      }
                      v63 |= v66;
                      v62 |= v68;
                    }
                  }
                }
                ++v61;
                v60 += 8;
              }
              while (v61 != ((v22 - 1) >> 3) + 1);
            }
            else
            {
              unint64_t v62 = 0;
              unint64_t v63 = 0;
            }
            sub_1DDBA9554(a1, v62, v63, 1);
          }
        }
LABEL_92:
        int v18 = v76;
      }
      if (v18)
      {
        uint64_t v77 = v18;
        operator delete(v18);
      }
    }
  }
}

void sub_1DDBB44DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DDBB4570(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10 = a2;
  uint64_t v11 = *(unsigned int *)(a4 + 4);
  unint64_t v12 = *(unsigned __int16 *)(a4 + 2);
  if (v12 > 0x6F) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = qword_1DDC0B570[v12];
  }
  if ((unint64_t)(v13 * v11) > 0x4000) {
    goto LABEL_94;
  }
  sub_1DDA1AB9C(&v84, v13 * v11);
  unsigned int v14 = *(_DWORD *)(a4 + 8);
  unsigned int v15 = bswap32(v14);
  if (a6) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = v14;
  }
  unint64_t v17 = sub_1DDBA1314((uint64_t)a1, (uint64_t)v84, v85 - v84, a5, v16);
  int v18 = v84;
  if (v17 == v85 - v84)
  {
    int v19 = sub_1DDBB0B78((uint64_t)a1);
    if (v17 >= 8)
    {
      unsigned int v23 = *v84;
      uint64_t v24 = 88;
      if ((v23 | 0x40) == 0xFF)
      {
        unsigned int v25 = 0;
        goto LABEL_11;
      }
      if (v23 >= 0x91) {
        int v37 = 0;
      }
      else {
        int v37 = 130;
      }
      uint64_t v20 = 69;
      if (v23 >= 0x91) {
        LODWORD(v24) = 88;
      }
      else {
        LODWORD(v24) = 69;
      }
      if (v23 >= 0x82) {
        int v38 = v37;
      }
      else {
        int v38 = 95;
      }
      if (v23 < 0x82) {
        LODWORD(v24) = 68;
      }
      if (v23 >= 0x5F) {
        int v39 = v38;
      }
      else {
        int v39 = 62;
      }
      if (v23 < 0x5F) {
        LODWORD(v24) = 67;
      }
      if (v23 >= 0x3E) {
        int v40 = v39;
      }
      else {
        int v40 = 31;
      }
      if (v23 < 0x3E) {
        LODWORD(v24) = 66;
      }
      if (v23 >= 0x1F) {
        unsigned int v25 = v40;
      }
      else {
        unsigned int v25 = 2;
      }
      if (v23 >= 0x1F) {
        uint64_t v24 = v24;
      }
      else {
        uint64_t v24 = 65;
      }
      if (v25 <= v23)
      {
LABEL_11:
        int v74 = v19;
        uint64_t v26 = objc_msgSend_stringWithFormat_(NSString, (const char *)v20, @"%c%.2d", v21, v22, v24, (v23 - v25) >> 1);
        int v30 = (void *)v26;
        int v31 = 0;
        for (unsigned __int16 i = 0; ; ++i)
        {
          uint64_t v33 = sub_1DDBB39E0(v26, (const char *)i, v27, v28, v29);

          if (!v33) {
            break;
          }
          uint64_t v36 = objc_msgSend_substringWithRange_(v33, v34, 0, 3, v35);
          if (!sub_1DDBB4B08(v30, v36, 0))
          {
            if ((i & 0x40) != 0) {
              unint64_t v41 = 0;
            }
            else {
              unint64_t v41 = 1 << i;
            }
            if ((i & 0x40) != 0) {
              unint64_t v42 = 1 << i;
            }
            else {
              unint64_t v42 = 0;
            }
            sub_1DDBA9554(a1, v41, v42, 0);

            break;
          }

          int v31 = v33;
        }
        id v75 = v10;
        uint64_t v76 = a1;
        unint64_t v43 = 0;
        unint64_t v44 = 0;
        unsigned int v45 = 0;
        char v46 = 0;
        while (sub_1DDBB397C(@"A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  ", v45))
        {
          int v47 = sub_1DDBB397C(@"A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  ", v45 + 6);
          int v48 = sub_1DDBB397C(@"A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  ", v45 + 9);
          int v49 = sub_1DDBB397C(@"A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  ", v45 + 8);
          unint64_t v50 = (v47 - 48);
          if (v50 < v17 && ((v48 + 16 * v49 + 208) & v84[v50]) != 0)
          {
            uint64_t v51 = 1 << v46;
            if ((v46 & 0x40) != 0) {
              uint64_t v52 = 0;
            }
            else {
              uint64_t v52 = 1 << v46;
            }
            if ((v46 & 0x40) == 0) {
              uint64_t v51 = 0;
            }
            v44 |= v51;
            v43 |= v52;
          }
          v45 += 12;
          ++v46;
        }
        sub_1DDBA96A8(v76, v43, v44, 0);
        uint64_t v53 = sub_1DDBA4174((uint64_t)v76, 0, 0, (void (*)(uint64_t, void))sub_1DDBB4B94);
        uint64_t v57 = 0;
        v83[0] = 0;
        v83[1] = 0;
        LODWORD(v82) = 0;
        while (1)
        {
          uint64_t v58 = sub_1DDBB39E0(v53, (const char *)(unsigned __int16)v57, v54, v55, v56);
          int v59 = sub_1DDBB37FC((uint64_t)v58, v74, v58, (uint64_t)v83, &v82);

          if (!v59) {
            break;
          }
          uint64_t v57 = (v57 + 1);
        }
        std::string __p = 0;
        unsigned __int16 v80 = 0;
        unint64_t v81 = 0;
        uint64_t v78 = 0;
        if ((_WORD)v57)
        {
          uint64_t v60 = 0;
          do
          {
            long long v77 = 0uLL;
            uint64_t v61 = sub_1DDBB39E0(v53, (const char *)(unsigned __int16)v60, v54, v55, v56);
            char v62 = sub_1DDBB37FC((uint64_t)v61, v74, v61, (uint64_t)&v77, &v78);

            uint64_t v63 = v60;
            if (v62)
            {
              id v64 = v80;
              if ((unint64_t)v80 >= v81)
              {
                uint64_t v66 = (v80 - (unsigned char *)__p) >> 4;
                unint64_t v67 = v66 + 1;
                if ((unint64_t)(v66 + 1) >> 60) {
                  sub_1DDA17F78();
                }
                uint64_t v68 = v81 - (void)__p;
                if ((uint64_t)(v81 - (void)__p) >> 3 > v67) {
                  unint64_t v67 = v68 >> 3;
                }
                if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v69 = v67;
                }
                if (v69) {
                  uint64_t v53 = (uint64_t)sub_1DDA19838((uint64_t)&v81, v69);
                }
                else {
                  uint64_t v53 = 0;
                }
                int v70 = (char *)(v53 + 16 * v66);
                *(_OWORD *)int v70 = v77;
                std::string::size_type v72 = (char *)__p;
                long long v71 = v80;
                uint64_t v73 = v70;
                if (v80 != __p)
                {
                  do
                  {
                    *((_OWORD *)v73 - 1) = *((_OWORD *)v71 - 1);
                    v73 -= 16;
                    v71 -= 16;
                  }
                  while (v71 != v72);
                  long long v71 = (char *)__p;
                }
                char v65 = v70 + 16;
                std::string __p = v73;
                unsigned __int16 v80 = v70 + 16;
                unint64_t v81 = v53 + 16 * v69;
                if (v71) {
                  operator delete(v71);
                }
              }
              else
              {
                *(_OWORD *)unsigned __int16 v80 = v77;
                char v65 = v64 + 16;
              }
              unsigned __int16 v80 = v65;
              uint64_t v63 = v57;
            }
            uint64_t v60 = (v60 + 1);
            uint64_t v57 = v63;
          }
          while (v60 < (unsigned __int16)v63);
          if ((_WORD)v63)
          {
            sub_1DDBA94FC(v76, (uint64_t)&__p, 0);
            sub_1DDBA9530((uint64_t)v76, &v78, 0);
          }
        }
        if (__p)
        {
          unsigned __int16 v80 = (char *)__p;
          operator delete(__p);
        }

        id v10 = v75;
      }
    }
    int v18 = v84;
  }
  if (v18)
  {
    uint64_t v85 = v18;
    operator delete(v18);
  }
LABEL_94:
}

void sub_1DDBB4A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  unsigned int v25 = *(void **)(v23 - 104);
  if (v25)
  {
    *(void *)(v23 - 96) = v25;
    operator delete(v25);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB4B08(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  id v9 = v6;
  if (v5)
  {
    if (v6) {
      uint64_t v10 = objc_msgSend_compare_options_(v5, v7, (uint64_t)v6, a3, v8);
    }
    else {
      uint64_t v10 = 1;
    }
  }
  else if (v6)
  {
    uint64_t v10 = -1;
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_1DDBB4B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDBB4B94(void *a1, const char *a2)
{
  if (a1)
  {
    a1 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F39899D0, 0);
    if (a1)
    {
      a1 = sub_1DDBB39E0((uint64_t)a1, a2, v4, v5, v6);
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

uint64_t sub_1DDBB4C18(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492) {
      sub_1DDA17F78();
    }
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x249249249249249) {
      unint64_t v14 = 0x492492492492492;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      unsigned int v15 = (char *)sub_1DDBB5590(result, v14);
    }
    else {
      unsigned int v15 = 0;
    }
    uint64_t v16 = &v15[56 * v11];
    v19[0] = v15;
    v19[1] = v16;
    uint64_t v19[3] = &v15[56 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *(_OWORD *)(v16 + 40) = *(long long *)((char *)a2 + 40);
    *(_OWORD *)(v16 + 24) = v18;
    uint64_t v19[2] = v16 + 56;
    sub_1DDBB5518(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = sub_1DDBB5704((uint64_t)v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(_OWORD *)(v7 + 40) = *(long long *)((char *)a2 + 40);
    *(_OWORD *)(v7 + 24) = v9;
    uint64_t v10 = v7 + 56;
    a1[1] = v7 + 56;
  }
  a1[1] = v10;
  return result;
}

void sub_1DDBB4D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDBB5704((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1DDBB4D8C(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1DDBB4DC8(uint64_t a1)
{
}

void sub_1DDBB4DD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  id v95 = a2;
  id v96 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    obint j = v96;
    uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v101, (uint64_t)v113, 16);
    if (!v6) {
      goto LABEL_46;
    }
    uint64_t v7 = *(void *)v102;
    while (1)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v102 != v7) {
          objc_enumerationMutation(obj);
        }
        long long v9 = *(void **)(*((void *)&v101 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v9, v10, v11, v12, v13) == 5)
        {
          objc_msgSend_objectAtIndexedSubscript_(v9, v10, 0, v14, v15);
          id v16 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v17 = a1;
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v21 = objc_msgSend_objectAtIndexedSubscript_(v9, v18, 1, v19, v20);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              unsigned int v25 = objc_msgSend_objectAtIndexedSubscript_(v9, v22, 2, v23, v24);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint64_t v29 = objc_msgSend_objectAtIndexedSubscript_(v9, v26, 3, v27, v28);
                objc_opt_class();
                char isKindOfClass = objc_opt_isKindOfClass();

                a1 = v17;
                if ((isKindOfClass & 1) == 0) {
                  continue;
                }
                uint64_t v33 = objc_msgSend_objectAtIndexedSubscript_(v9, v10, 0, v31, v32);
                int v37 = objc_msgSend_objectAtIndexedSubscript_(v9, v34, 1, v35, v36);
                objc_msgSend_doubleValue(v37, v38, v39, v40, v41);
                double v43 = v42;

                int v47 = objc_msgSend_objectAtIndexedSubscript_(v9, v44, 2, v45, v46);
                objc_msgSend_doubleValue(v47, v48, v49, v50, v51);
                double v53 = v52;

                uint64_t v57 = objc_msgSend_objectAtIndexedSubscript_(v9, v54, 3, v55, v56);
                objc_msgSend_doubleValue(v57, v58, v59, v60, v61);
                double v63 = v62;

                uint64_t v70 = v17;
                if (objc_msgSend_hasPrefix_(v33, v64, @"[X]", v65, v66))
                {
                  long long v71 = objc_msgSend_substringFromIndex_(v33, v67, 4, v68, v69);
                  sub_1DDA1A880(__p, "");
                  uint64_t v109 = 0x3FF0000000000000;
                  sub_1DDA1A880(v110, " +1.4x");
                  v110[3] = 0x3FF6666666666666;
                  sub_1DDA1A880(v111, " +2x");
                  v111[3] = 0x4000000000000000;
                  sub_1DDA1A880(v112, " +2.8x");
                  v112[3] = 0x4006666666666666;
                  uint64_t v99 = 0;
                  uint64_t v100 = 0;
                  uint64_t v98 = 0;
                  uint64_t v105 = &v98;
                  char v106 = 0;
                  uint64_t v98 = operator new(0x80uLL);
                  uint64_t v99 = (double *)v98;
                  uint64_t v100 = v98 + 16;
                  uint64_t v72 = 0;
                  uint64_t v99 = (double *)sub_1DDBB5794((uint64_t)&v100, (long long *)__p, v113, v98);
                  do
                  {
                    if (SHIBYTE(v112[v72 + 2]) < 0) {
                      operator delete((void *)v112[v72]);
                    }
                    v72 -= 4;
                  }
                  while (v72 != -16);
                  int v74 = (double *)v98;
                  uint64_t v73 = v99;
                  while (v74 != v73)
                  {
                    if (vabdd_f64(*(double *)(v70 + 40), v43) < 0.01 && vabdd_f64(*(double *)(v70 + 48), v53) < 0.01)
                    {
                      double v75 = *(double *)(v70 + 56);
                      double v76 = v74[3];
                      if (v75 == 0.0 || fabs(v75 - v76 * v63) < 0.1)
                      {
                        double v77 = *(double *)(v70 + 64);
                        double v78 = v76 * v43 + -1.0;
                        double v79 = v76 * v53 + 1.0;
                        if (v77 >= v78 && v77 <= v79)
                        {
                          uint64_t v81 = *(void *)(*(void *)(v70 + 32) + 8);
                          id v82 = v71;
                          objc_msgSend_UTF8String(v82, v83, v84, v85, v86);
                          std::operator+<char>();
                          sub_1DDBB5BD0((uint64_t **)(v81 + 48), __p, (uint64_t)__p);
                          uint64_t v70 = v17;
                          if (v108 < 0) {
                            operator delete(__p[0]);
                          }
                        }
                      }
                    }
                    v74 += 4;
                  }
                  __p[0] = &v98;
                  sub_1DDBB58E0((void ***)__p);

LABEL_42:
                  id v16 = v33;
                }
                else
                {
                  if (vabdd_f64(*(double *)(v17 + 40), v43) >= 0.01) {
                    goto LABEL_42;
                  }
                  if (vabdd_f64(*(double *)(v17 + 48), v53) >= 0.01) {
                    goto LABEL_42;
                  }
                  double v87 = *(double *)(v17 + 56);
                  if (v87 != 0.0 && vabdd_f64(v87, v63) >= 0.1) {
                    goto LABEL_42;
                  }
                  double v88 = *(double *)(v17 + 64);
                  if (v88 < v43 + -1.0 || v88 > v53 + 1.0) {
                    goto LABEL_42;
                  }
                  uint64_t v89 = *(void *)(*(void *)(v17 + 32) + 8);
                  id v16 = v33;
                  unsigned int v94 = (char *)objc_msgSend_UTF8String(v16, v90, v91, v92, v93);
                  sub_1DDA1A880(__p, v94);
                  sub_1DDBB5BD0((uint64_t **)(v89 + 48), __p, (uint64_t)__p);
                  if (v108 < 0) {
                    operator delete(__p[0]);
                  }
                }
              }
              else
              {
              }
            }
            else
            {
            }
          }

          a1 = v17;
          continue;
        }
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v101, (uint64_t)v113, 16);
      if (!v6)
      {
LABEL_46:

        break;
      }
    }
  }
}

void sub_1DDBB5380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB5518(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1DDBB55DC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1DDBB5590(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_1DDA18058();
  }
  return operator new(56 * a2);
}

uint64_t sub_1DDBB55DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 56);
      *(void *)(v9 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v9 - 56) = v10;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      long long v11 = *(_OWORD *)(a3 - 16);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v11;
      v9 -= 56;
      v7 -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  sub_1DDBB5684((uint64_t)v13);
  return a6;
}

uint64_t sub_1DDBB5684(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DDBB56BC(a1);
  }
  return a1;
}

void sub_1DDBB56BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 56;
  }
}

uint64_t sub_1DDBB5704(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1DDBB573C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 7;
      *(void *)(a1 + 16) = v2 - 7;
      if (*((char *)v2 - 33) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_1DDBB5794(uint64_t a1, long long *a2, long long *a3, void *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v12 = __dst;
  uint64_t v13 = __dst;
  v10[0] = a1;
  v10[1] = &v12;
  void v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1DDA2639C(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        void v4[2] = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
        uint64_t v8 = v4;
      }
      uint64_t v4[3] = *((void *)v6 + 3);
      v6 += 2;
      uint64_t v4 = v8 + 4;
      uint64_t v13 = v8 + 4;
    }
    while (v6 != a3);
  }
  char v11 = 1;
  sub_1DDBB5860((uint64_t)v10);
  return v4;
}

void sub_1DDBB584C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1DDBB5860(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DDBB5898(a1);
  }
  return a1;
}

void sub_1DDBB5898(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*(void **)(v1 - 32));
    }
    v1 -= 32;
  }
}

void sub_1DDBB58E0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1DDBB5934((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1DDBB5934(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void sub_1DDBB5984(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1DDBB59D8((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1DDBB59D8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 33) < 0) {
      operator delete(*(void **)(i - 56));
    }
  }
  a1[1] = v2;
}

void sub_1DDBB5A28(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  sub_1DDBB5AB4(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBB5AA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDBB5AB4(void *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39899F8;
  sub_1DDBAA64C((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = &unk_1F3989900;
  return a1;
}

void sub_1DDBB5B20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBB5B34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39899F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBB5B54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39899F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBB5BA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

_OWORD *sub_1DDBB5BD0(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_1DDA4B7C4((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_1DDA25078(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1DDBB5C64(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    char v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F3989B90, 0);
    if (v11) {
      sub_1DDBB61A8((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBB5D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB5D44(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBB6390(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBB5DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBB5DD8()
{
  return @"{MakerEpson}";
}

BOOL sub_1DDBB5DE4(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  uint64_t v14 = 0;
  v15[0] = 0;
  *(void *)((char *)v15 + 5) = 0;
  uint64_t v11 = sub_1DDBA1314((uint64_t)a1, (uint64_t)&v14, 20, a5, a3);
  if (v11 == 20)
  {
    if (v14 == 1330860101 && BYTE4(v14) == 78) {
      sub_1DDBA5A38(a1, v10, word_1F3989A38, a3 + 8, a5, a6);
    }
    (*(void (**)(unsigned char *))(*(void *)a1 + 160))(a1);
  }

  return v11 == 20;
}

void sub_1DDBB5F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB5F18(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_1DDBA1778((uint64_t)a1);
  int v10 = sub_1DDA2E1C4(v6, (const char *)*MEMORY[0x1E4F2FCA0], v7, v8, v9);

  memset(v44, 0, sizeof(v44));
  sub_1DDBA8EB8(a1, a2, &v43);
  long long v42 = 0uLL;
  uint64_t v11 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v12, @"IFD0/Exif/Makernote/%@/Offset", v13, v14, @"Thumbnail");
  long long v15 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v19 = sub_1DDA357A8(v11, v15, v16, v17, v18);

  uint64_t v20 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v21, @"IFD0/Exif/Makernote/%@/Length", v22, v23, @"Thumbnail");
  uint64_t v24 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v28 = sub_1DDA357A8(v20, v24, v25, v26, v27);

  uint64_t v33 = 0;
  if (v19 && v28)
  {
    int v40 = objc_msgSend_intValue(v19, v29, v30, v31, v32);
    unsigned int v38 = objc_msgSend_intValue(v28, v34, v35, v36, v37);
    sub_1DDA1B3CC(&v39, &v38);
    sub_1DDB9FD50(a1, &v40, &v39, v10, &v41);
    long long v42 = v41;
    uint64_t v33 = v41;
  }
  if ((void)v43) {
    sub_1DDA480D4((uint64_t *)v44, &v43);
  }
  if (v33) {
    sub_1DDA480D4((uint64_t *)v44, &v42);
  }
  sub_1DDBA0184(v44, a2, a3);

  if (*((void *)&v42 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v42 + 1));
  }
  if (*((void *)&v43 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v43 + 1));
  }
  *(void *)&long long v43 = v44;
  sub_1DDA18270((void ***)&v43);
}

void sub_1DDBB6100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void **a18, std::__shared_weak_count *a19, char a20)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  if (a19) {
    sub_1DDA18310(a19);
  }
  a18 = (void **)&a20;
  sub_1DDA18270(&a18);
  _Unwind_Resume(a1);
}

BOOL sub_1DDBB6198(uint64_t a1, unsigned __int8 a2)
{
  return a2 == 216;
}

void sub_1DDBB61A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v39 = a2;
  uint64_t v11 = NSString;
  id v12 = sub_1DDBA175C(a3);
  uint64_t v16 = objc_msgSend_stringWithFormat_(v11, v13, @"%@/%@/%@", v14, v15, v39, v12, @"Offset");

  uint64_t v17 = NSString;
  uint64_t v18 = sub_1DDBA175C(a3);
  uint64_t v22 = objc_msgSend_stringWithFormat_(v17, v19, @"%@/%@/%@", v20, v21, v39, v18, @"Length");

  LODWORD(v26) = *(_DWORD *)(a4 + 8);
  unsigned int v27 = bswap32(v26);
  if (a6) {
    uint64_t v26 = v27;
  }
  else {
    uint64_t v26 = v26;
  }
  uint64_t v28 = objc_msgSend_numberWithLongLong_(NSNumber, v23, v26 + a5, v24, v25);
  uint64_t v29 = sub_1DDBA1814(a1);
  objc_msgSend_setObject_forKeyedSubscript_(v29, v30, (uint64_t)v28, (uint64_t)v16, v31);

  uint64_t v35 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v32, *(unsigned int *)(a4 + 4), v33, v34);
  uint64_t v36 = sub_1DDBA1814(a1);
  objc_msgSend_setObject_forKeyedSubscript_(v36, v37, (uint64_t)v35, (uint64_t)v22, v38);
}

void sub_1DDBB632C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB6390(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  sub_1DDBB641C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBB6408(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDBB641C(void *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3989BB8;
  sub_1DDBAA64C((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = &unk_1F3989AC0;
  return a1;
}

void sub_1DDBB6488(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBB649C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3989BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBB64BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3989BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBB6510(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

id sub_1DDBB6538()
{
  if (qword_1EAB91288 != -1) {
    dispatch_once(&qword_1EAB91288, &unk_1F3989BF8);
  }
  uint64_t v0 = (void *)qword_1EAB91280;

  return v0;
}

uint64_t sub_1DDBB658C()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = (void *)qword_1EAB91280;
  qword_1EAB91280 = v0;

  objc_msgSend_registerDefaults_((void *)qword_1EAB91280, v2, (uint64_t)&unk_1F39B4CF8, v3, v4);
  uint64_t v7 = qword_1EAB91280;

  return MEMORY[0x1F4181798](v7, sel_addSuiteNamed_, @"com.apple.RawCamera", v5, v6);
}

void sub_1DDBB65F0(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F3989F78, 0);
    if (v11) {
      sub_1DDBB851C((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBB66BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB66D0(const void *a1, void *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    int v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F3989F78, 0);
    if (v10) {
      sub_1DDBB86BC((uint64_t)v10, v11, a3, a4, v12, a6);
    }
  }
}

void sub_1DDBB6788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDBB679C(void *a1, unint64_t a2)
{
  return a2 >= 8 && *a1 == 0x4D4C4946494A5546;
}

BOOL sub_1DDBB67CC(uint64_t *a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  LODWORD(v5[0]) = 0;
  sub_1DDA1A94C(v4, a1, (uint64_t)v5, 0);
  BOOL v2 = (*(unsigned int (**)(uint64_t, void *, uint64_t))(*(void *)*a1 + 32))(*a1, v5, 8) == 8
    && v5[0] == 0x4D4C4946494A5546;
  sub_1DDA1AA18(v4);
  return v2;
}

void sub_1DDBB68A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DDBB68CC(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBB8A68(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBB6944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB6960(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1DDB57070(a1, &v9);
  LODWORD(v8) = 0;
  sub_1DDA1A94C(v7, (uint64_t *)&v9, (uint64_t)&v8, 0);
  if (v10) {
    sub_1DDA18310(v10);
  }
  sub_1DDB57070(a1, &v9);
  int v2 = (*(uint64_t (**)(void *, uint64_t *, uint64_t))(*v9 + 32))(v9, &v8, 8);
  if (v10) {
    sub_1DDA18310(v10);
  }
  if (v2 == 8 && v8 == 0x4D4C4946494A5546)
  {
    id v9 = 0;
    if (sub_1DDBA1314(a1, (uint64_t)&v9, 8, 0, 84) != 8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int8x8_t v4 = vrev32_s8((int8x8_t)v9);
    *(int8x8_t *)(a1 + 196) = v4;
    uint64_t v3 = (v4.i32[0] + 12);
  }
  else
  {
    uint64_t v3 = sub_1DDBA72D8();
  }
  sub_1DDA1AA18(v7);
  return v3;
}

void sub_1DDBB6AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DDBB6B54(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  memset(v10, 0, sizeof(v10));
  sub_1DDBA8EB8((uint64_t *)a1, a2, &v9);
  sub_1DDA18410(&v7, (int *)(a1 + 196));
  unsigned int v6 = *(_DWORD *)(a1 + 200);
  sub_1DDB9FD50((uint64_t *)a1, &v7, &v6, 0, &v8);
  if ((void)v9) {
    sub_1DDA480D4((uint64_t *)v10, &v9);
  }
  if ((void)v8) {
    sub_1DDA480D4((uint64_t *)v10, &v8);
  }
  sub_1DDBA0184(v10, a2, a3);
  if (*((void *)&v8 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v8 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v9 + 1));
  }
  *(void *)&long long v9 = v10;
  sub_1DDA18270((void ***)&v9);
}

void sub_1DDBB6C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  if (a13) {
    sub_1DDA18310(a13);
  }
  a12 = (void **)&a14;
  sub_1DDA18270(&a12);
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBB6C74()
{
  return @"{MakerFuji}";
}

uint64_t sub_1DDBB6C80(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[2] = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  uint64_t v11 = 0;
  v12[0] = 0;
  *(void *)((char *)v12 + 5) = 0;
  if (sub_1DDBA1314((uint64_t)a1, (uint64_t)&v11, 20, a5, a3) == 20 && v11 == 0x4D4C4946494A5546)
  {
    sub_1DDBA5A38(a1, v8, word_1F3989C18, 12, a5 + a3, 0);
    (*(void (**)(unsigned char *))(*(void *)a1 + 160))(a1);
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1DDBB6D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB6DA4(uint64_t a1)
{
  sub_1DDBB6F74(a1);
  int v2 = sub_1DDBA1778(a1);
  sub_1DDA2E3A8(v2, @"{PictureStyle}", 0);
  id v15 = (id)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    uint64_t v3 = sub_1DDBA1778(a1);
    BOOL v4 = sub_1DDBA6568(v3, @"{PictureStyle}", @"Monochrome");

    if (!v4) {
      sub_1DDBA4B30(a1, @"Monochrome", 0);
    }
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    if ((v5 & 0x80000000) == 0)
    {
      unsigned int v6 = sub_1DDBA4D7C(a1, v5);
      sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictStyleColorSpace", v6, (float)v5, (float)v5);
    }
  }
  int v7 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v7, v8, @"{PictStyleSetting}", v9, v10);

  uint64_t v11 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v11, v12, @"{PictStyleNormalized}", v13, v14);
}

void sub_1DDBB6F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB6F74(uint64_t a1)
{
  int v2 = sub_1DDBA1778(a1);
  sub_1DDA2E3A8(v2, @"{PictStyleSetting}", 0);
  id v61 = (id)objc_claimAutoreleasedReturnValue();

  if (sub_1DDA2E4E0(v61, @"PictureStyle"))
  {
    uint64_t v6 = sub_1DDA2E1C4(v61, (const char *)@"PictureStyle", v3, v4, v5);
    int v7 = v6;
    id v8 = sub_1DDBB7454(v6, v6);
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictureStyle", v8, (float)v7, (float)v7);
  }
  else
  {
    int v7 = 0;
  }
  if (sub_1DDA2E4E0(v61, @"ColorMode"))
  {
    int v12 = sub_1DDA2E1C4(v61, (const char *)@"ColorMode", v9, v10, v11);
    int v13 = v12;
    uint64_t v14 = @"Chrome";
    id v15 = @"Standard";
    if (v12) {
      id v15 = 0;
    }
    if (v12 != 16) {
      uint64_t v14 = v15;
    }
    if (v12 == 48) {
      uint64_t v16 = @"Black and White";
    }
    else {
      uint64_t v16 = v14;
    }
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"ColorMode", v16, (float)v7, (float)v12);
    BOOL v17 = v13 == 48;
  }
  else
  {
    BOOL v17 = 0;
  }
  if (sub_1DDA2E4E0(v61, @"FilmSimulation"))
  {
    uint64_t v21 = sub_1DDA2E1C4(v61, (const char *)@"FilmSimulation", v18, v19, v20);
    int v22 = v21;
    uint64_t v23 = sub_1DDBB7604(v21, v21);
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"FilmSimulation", v23, (float)v22, (float)v22);
  }
  uint64_t v24 = (char *)*MEMORY[0x1E4F2F918];
  if (sub_1DDA2E4E0(v61, (void *)*MEMORY[0x1E4F2F918]))
  {
    uint64_t v28 = sub_1DDA2E1C4(v61, v24, v25, v26, v27);
    int v29 = v28;
    float v30 = 0.0;
    switch((int)v28)
    {
      case 1:
        float v30 = -2.0;
        break;
      case 2:
        float v30 = -3.0;
        break;
      case 3:
        break;
      case 4:
        float v30 = 2.0;
        break;
      case 5:
        float v30 = 3.0;
        break;
      default:
        float v31 = 1.0;
        if (v28 != 132) {
          float v31 = 0.0;
        }
        if (v28 == 130) {
          float v30 = -1.0;
        }
        else {
          float v30 = v31;
        }
        break;
    }
    uint64_t v32 = sub_1DDBB76A4(v28, v28);
    sub_1DDBA4BE8(a1, @"{PictureStyle}", v24, v32, (float)v29, v30);
  }
  uint64_t v33 = (char *)*MEMORY[0x1E4F2F8F0];
  if (sub_1DDA2E4E0(v61, (void *)*MEMORY[0x1E4F2F8F0]))
  {
    uint64_t v37 = sub_1DDA2E1C4(v61, v33, v34, v35, v36);
    int v38 = v37;
    HIDWORD(v40) = v37;
    LODWORD(v40) = (v37 << 16) - 0x800000;
    unsigned __int16 v39 = v40 >> 23;
    float v41 = 0.0;
    if (v39 <= 5u) {
      float v41 = flt_1DDC0B8FC[(__int16)v39];
    }
    long long v42 = sub_1DDBB7768(v37, v37);
    sub_1DDBA4BE8(a1, @"{PictureStyle}", v33, v42, (float)v38, v41);

    if (v38 == 768) {
      BOOL v17 = 1;
    }
  }
  long long v43 = sub_1DDBA1778(a1);
  unint64_t v44 = (char *)*MEMORY[0x1E4F2F7D8];
  uint64_t v45 = sub_1DDBB77F0(v43, @"{PictStyleNormalized}", (void *)*MEMORY[0x1E4F2F7D8]);

  uint64_t v49 = sub_1DDA357A8(v61, v44, v46, v47, v48);
  uint64_t v54 = v49;
  if (v45)
  {
    uint64_t v55 = objc_msgSend_intValue(v45, v50, v51, v52, v53);
    int v56 = v55;
  }
  else
  {
    if (!v49) {
      goto LABEL_42;
    }
    uint64_t v55 = objc_msgSend_intValue(v49, v50, v51, v52, v53);
    if (v55 == 300) {
      int v56 = 200;
    }
    else {
      int v56 = v55;
    }
  }
  HIDWORD(v58) = v56;
  LODWORD(v58) = (v56 << 16) - 0x800000;
  unsigned __int16 v57 = v58 >> 23;
  float v59 = 0.0;
  if (v57 <= 5u) {
    float v59 = flt_1DDC0B8FC[(__int16)v57];
  }
  uint64_t v60 = sub_1DDBB7768(v55, v56);
  sub_1DDBA4BE8(a1, @"{PictureStyle}", v44, v60, (float)v56, v59);

LABEL_42:
  sub_1DDBA4B30(a1, @"Monochrome", v17);
}

void sub_1DDBB73A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB7434()
{
}

__CFString *sub_1DDBB7454(uint64_t a1, int a2)
{
  if (a2 > 255)
  {
    uint64_t v3 = @"Shutter speed priority AE";
    uint64_t v4 = @"Manual";
    if (a2 != 768) {
      uint64_t v4 = 0;
    }
    if (a2 != 512) {
      uint64_t v3 = v4;
    }
    if (a2 == 256) {
      return @"Aperture-priority AE";
    }
    else {
      return v3;
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        uint64_t result = @"Auto";
        break;
      case 1:
        uint64_t result = @"Portrait";
        break;
      case 2:
        uint64_t result = @"Landscape";
        break;
      case 3:
        uint64_t result = @"Macro";
        break;
      case 4:
        uint64_t result = @"Sports";
        break;
      case 5:
        uint64_t result = @"Night Scene";
        break;
      case 6:
        uint64_t result = @"Program AE";
        break;
      case 7:
        uint64_t result = @"Natural Light";
        break;
      case 8:
        uint64_t result = @"Anti-blur";
        break;
      case 9:
        uint64_t result = @"Beach and Snow";
        break;
      case 10:
        uint64_t result = @"Sunset";
        break;
      case 11:
        uint64_t result = @"Museum";
        break;
      case 12:
        uint64_t result = @"Party";
        break;
      case 13:
        uint64_t result = @"Flower";
        break;
      case 14:
        uint64_t result = @"Text";
        break;
      case 15:
        uint64_t result = @"Natural Light and Flash";
        break;
      case 16:
        uint64_t result = @"Beach";
        break;
      case 17:
        uint64_t result = @"Snow";
        break;
      case 18:
        uint64_t result = @"Fireworks";
        break;
      case 19:
        uint64_t result = @"Underwater";
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

__CFString *sub_1DDBB7604(uint64_t a1, unsigned __int16 a2)
{
  int v2 = @"F3/Studio Portrait Ex";
  uint64_t v3 = @"F4/Velvia";
  if (a2 != 1024) {
    uint64_t v3 = 0;
  }
  if (a2 != 768) {
    int v2 = v3;
  }
  uint64_t v4 = @"F2/Fujichrome";
  if (a2 != 512) {
    uint64_t v4 = 0;
  }
  if (a2 == 304) {
    uint64_t v4 = @"F1c/Studio Portrait Increased Sharpness";
  }
  if (a2 <= 0x2FFu) {
    int v2 = v4;
  }
  uint64_t v5 = @"F1a/Studio Portrait Enhanced Saturation";
  uint64_t v6 = @"F1b/Studio Portrait Smooth Skin Tone";
  if (a2 != 288) {
    uint64_t v6 = 0;
  }
  if (a2 != 272) {
    uint64_t v5 = v6;
  }
  int v7 = @"F1/Studio Portrait";
  if (a2 != 256) {
    int v7 = 0;
  }
  if (!a2) {
    int v7 = @"F0/Standard";
  }
  if (a2 <= 0x10Fu) {
    uint64_t v5 = v7;
  }
  if (a2 <= 0x12Fu) {
    return v5;
  }
  else {
    return v2;
  }
}

__CFString *sub_1DDBB76A4(uint64_t a1, unsigned __int16 a2)
{
  if (a2 > 0x81u)
  {
    uint64_t v3 = @"Medium Hard";
    uint64_t v4 = @"Film Simulation";
    if (a2 != 0x8000) {
      uint64_t v4 = 0;
    }
    if (a2 != 132) {
      uint64_t v3 = v4;
    }
    if (a2 == 130) {
      return @"Medium Soft";
    }
    else {
      return v3;
    }
  }
  else
  {
    switch(a2)
    {
      case 1u:
        uint64_t result = @"Soft";
        break;
      case 2u:
        uint64_t result = @"Soft2";
        break;
      case 3u:
        uint64_t result = @"Normal";
        break;
      case 4u:
        uint64_t result = @"Hard";
        break;
      case 5u:
        uint64_t result = @"Hard2";
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

__CFString *sub_1DDBB7768(uint64_t a1, unsigned __int16 a2)
{
  int v2 = @"Black and White";
  uint64_t v3 = @"Film Simulation";
  if (a2 != 0x8000) {
    uint64_t v3 = 0;
  }
  if (a2 != 768) {
    int v2 = v3;
  }
  uint64_t v4 = @"Low";
  if (a2 != 512) {
    uint64_t v4 = 0;
  }
  if (a2 == 384) {
    uint64_t v4 = @"Medium Low";
  }
  if (a2 <= 0x2FFu) {
    int v2 = v4;
  }
  uint64_t v5 = @"High";
  if (a2 != 256) {
    uint64_t v5 = 0;
  }
  if (a2 == 128) {
    uint64_t v5 = @"Medium High";
  }
  if (!a2) {
    uint64_t v5 = @"Normal";
  }
  if (a2 <= 0x17Fu) {
    return v5;
  }
  else {
    return v2;
  }
}

id sub_1DDBB77F0(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = sub_1DDA2E3A8(a1, a2, 0);
  uint64_t v10 = sub_1DDA357A8(v6, v5, v7, v8, v9);

  return v10;
}

void sub_1DDBB7868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB7884(char *a1)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  int v2 = @"{Temporary}";
  uint64_t v3 = @"_AutoFocus";
  uint64_t v70 = v2;
  uint64_t v4 = sub_1DDBA1778((uint64_t)a1);
  uint64_t v5 = sub_1DDBA64D4(v4, v2, v3);

  unint64_t v10 = 0;
  *(void *)&long long __p = 0;
  do
  {
    if (v10 >= objc_msgSend_count(v5, v6, v7, v8, v9)) {
      int v11 = -1;
    }
    else {
      int v11 = sub_1DDB66788(v5, (const char *)&__p, v7, v8, v9);
    }
    uint64_t v12 = __p;
    *(&v77 + __p) = v11;
    unint64_t v10 = v12 + 1;
    *(void *)&long long __p = v12 + 1;
  }
  while ((unint64_t)(v12 + 1) < 6);
  int v13 = sub_1DDBA1778((uint64_t)a1);
  BOOL v14 = sub_1DDBA6568(v13, v70, v3);

  if (!v14) {
    goto LABEL_154;
  }
  id v15 = sub_1DDBA1778((uint64_t)a1);
  sub_1DDBA6668(v15, v70, v3);

  uint64_t v16 = sub_1DDBA1778((uint64_t)a1);
  BOOL v17 = sub_1DDB6DAE4(v16, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD68]);

  unsigned __int16 v19 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  int64_t v74 = 0;
  int v20 = v77;
  if (v77 != -1)
  {
    int v21 = v78;
    if (v78 != -1)
    {
      uint64_t v18 = sub_1DDBB8240(v18, v17, 0, (uint64_t)&v75, &v74);
      if ((v18 & 1) == 0)
      {
        int v22 = sub_1DDBA91F8((uint64_t)a1);
        int64_t v74 = 0;
        id v23 = (id)*MEMORY[0x1E4F2F8D8];
        if (sub_1DDA2E4E0(v22, v23))
        {
          uint64_t v24 = (const char *)*MEMORY[0x1E4F2F8E0];
          BOOL v25 = sub_1DDA2E4E0(v22, (void *)*MEMORY[0x1E4F2F8E0]);

          if (v25)
          {
            unsigned int v29 = sub_1DDA2E1C4(v22, (const char *)v23, v26, v27, v28);
            int64_t v74 = v29 | (unint64_t)(sub_1DDA2E1C4(v22, v24, v30, v31, v32) << 32);
            if (sub_1DDB9FCD0(v17, @"X100", 1)) {
              unsigned int v33 = 10;
            }
            else {
              unsigned int v33 = 20;
            }
            sub_1DDA18218(&__p, v74 / v33, HIDWORD(v74) / v33);
            uint64_t v76 = __p;
          }
        }
        else
        {
        }
      }
      unsigned __int16 v19 = 0;
      if (v74 && HIDWORD(v74))
      {
        uint64_t v34 = sub_1DDBA9530((uint64_t)a1, &v74, 0);
        unsigned __int16 v19 = 0;
        unsigned int v35 = v20 - (int)v74 / 2;
        if (v74 >= 0) {
          int v36 = HIDWORD(v74);
        }
        else {
          int v36 = HIDWORD(v74) + 1;
        }
        unsigned int v37 = (v36 >> 1) - v21;
        __int16 v38 = -1;
        while (1)
        {
          uint64_t v34 = sub_1DDBB8240(v34, v17, v19, (uint64_t)&v75, &v74);
          if (!v34) {
            break;
          }
          int v39 = v75 - v35;
          if ((int)(v75 - v35) < 0) {
            int v39 = v35 - v75;
          }
          if (v76 >= 2 * v39)
          {
            unsigned int v40 = HIDWORD(v75) - v37;
            if ((int)(HIDWORD(v75) - v37) < 0) {
              unsigned int v40 = v37 - HIDWORD(v75);
            }
            if (HIDWORD(v76) >= 2 * v40) {
              __int16 v38 = v19;
            }
          }
          ++v19;
        }
        if (v38 == -1)
        {
          *(void *)&long long __p = __PAIR64__(v37, v35);
          *((void *)&__p + 1) = v76;
          sub_1DDBA9484(a1, &__p, 0);
          LOBYTE(v38) = 0;
          unsigned __int16 v19 = 1;
        }
        else
        {
          long long __p = 0uLL;
          unint64_t v73 = 0;
          if (v19)
          {
            unsigned __int16 v41 = 0;
            do
            {
              long long v71 = 0uLL;
              LODWORD(v34) = sub_1DDBB8240(v34, v17, v41, (uint64_t)&v71, &v74);
              if (v34)
              {
                uint64_t v42 = *((void *)&__p + 1);
                if (*((void *)&__p + 1) >= v73)
                {
                  uint64_t v44 = (uint64_t)(*((void *)&__p + 1) - __p) >> 4;
                  unint64_t v45 = v44 + 1;
                  if ((unint64_t)(v44 + 1) >> 60) {
                    sub_1DDA17F78();
                  }
                  uint64_t v46 = v73 - __p;
                  if ((uint64_t)(v73 - __p) >> 3 > v45) {
                    unint64_t v45 = v46 >> 3;
                  }
                  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v47 = v45;
                  }
                  if (v47) {
                    uint64_t v34 = (uint64_t)sub_1DDA19838((uint64_t)&v73, v47);
                  }
                  else {
                    uint64_t v34 = 0;
                  }
                  uint64_t v48 = (_OWORD *)(v34 + 16 * v44);
                  *uint64_t v48 = v71;
                  uint64_t v49 = (char *)*((void *)&__p + 1);
                  uint64_t v50 = (char *)__p;
                  uint64_t v51 = v48;
                  if (*((void *)&__p + 1) != (void)__p)
                  {
                    do
                    {
                      *--uint64_t v51 = *((_OWORD *)v49 - 1);
                      v49 -= 16;
                    }
                    while (v49 != v50);
                    uint64_t v49 = (char *)__p;
                  }
                  long long v43 = v48 + 1;
                  *(void *)&long long __p = v51;
                  *((void *)&__p + 1) = v48 + 1;
                  unint64_t v73 = v34 + 16 * v47;
                  if (v49) {
                    operator delete(v49);
                  }
                }
                else
                {
                  **((_OWORD **)&__p + 1) = v71;
                  long long v43 = (_OWORD *)(v42 + 16);
                }
                *((void *)&__p + 1) = v43;
              }
              ++v41;
            }
            while (v41 < v19);
          }
          sub_1DDBA94FC(a1, (uint64_t)&__p, 0);
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
        }
        if ((v38 & 0x40) != 0) {
          unint64_t v52 = 0;
        }
        else {
          unint64_t v52 = 1 << v38;
        }
        if ((v38 & 0x40) != 0) {
          unint64_t v53 = 1 << v38;
        }
        else {
          unint64_t v53 = 0;
        }
        uint64_t v18 = sub_1DDBA96A8(a1, v52, v53, 0);
      }
    }
  }
  int v54 = v80;
  if (v80 != -1)
  {
    if (v79 == -1) {
      goto LABEL_127;
    }
    unint64_t v55 = 1;
    if (v79 > 130)
    {
      if (v79 <= 287)
      {
        if (v79 > 146)
        {
          char v56 = v79 + 109;
          if ((unint64_t)(v79 - 147) > 0x20)
          {
LABEL_74:
            if ((unint64_t)(v79 - 272) >= 2) {
              goto LABEL_127;
            }
LABEL_129:
            while (1)
            {
              LODWORD(v18) = sub_1DDBB8240(v18, v17, v19, (uint64_t)&v75, &v74);
              if (!v18) {
                break;
              }
              ++v19;
            }
            if (!v19)
            {

              goto LABEL_155;
            }
            sub_1DDBA96A8(a1, v54, (uint64_t)v54 >> 63, 1);
            uint64_t v58 = sub_1DDBA9554(a1, v55, 0, 1);
            unsigned __int16 v59 = 0;
            long long __p = 0uLL;
            unint64_t v73 = 0;
            do
            {
              long long v71 = 0uLL;
              LODWORD(v58) = sub_1DDBB8240(v58, v17, v59, (uint64_t)&v71, &v74);
              if (v58)
              {
                uint64_t v60 = *((void *)&__p + 1);
                if (*((void *)&__p + 1) >= v73)
                {
                  uint64_t v62 = (uint64_t)(*((void *)&__p + 1) - __p) >> 4;
                  unint64_t v63 = v62 + 1;
                  if ((unint64_t)(v62 + 1) >> 60) {
                    sub_1DDA17F78();
                  }
                  uint64_t v64 = v73 - __p;
                  if ((uint64_t)(v73 - __p) >> 3 > v63) {
                    unint64_t v63 = v64 >> 3;
                  }
                  if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v65 = v63;
                  }
                  if (v65) {
                    uint64_t v58 = (uint64_t)sub_1DDA19838((uint64_t)&v73, v65);
                  }
                  else {
                    uint64_t v58 = 0;
                  }
                  uint64_t v66 = (_OWORD *)(v58 + 16 * v62);
                  *uint64_t v66 = v71;
                  unint64_t v67 = (char *)*((void *)&__p + 1);
                  uint64_t v68 = (char *)__p;
                  uint64_t v69 = v66;
                  if (*((void *)&__p + 1) != (void)__p)
                  {
                    do
                    {
                      *--uint64_t v69 = *((_OWORD *)v67 - 1);
                      v67 -= 16;
                    }
                    while (v67 != v68);
                    unint64_t v67 = (char *)__p;
                  }
                  id v61 = v66 + 1;
                  *(void *)&long long __p = v69;
                  *((void *)&__p + 1) = v66 + 1;
                  unint64_t v73 = v58 + 16 * v65;
                  if (v67) {
                    operator delete(v67);
                  }
                }
                else
                {
                  **((_OWORD **)&__p + 1) = v71;
                  id v61 = (_OWORD *)(v60 + 16);
                }
                *((void *)&__p + 1) = v61;
              }
              ++v59;
            }
            while (v59 < v19);
            sub_1DDBA94FC(a1, (uint64_t)&__p, 1);
            sub_1DDBA9530((uint64_t)a1, &v74, 1);
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            goto LABEL_153;
          }
          if (((1 << v56) & 0x100010001) == 0)
          {
            if (((1 << v56) & 0x6000) != 0)
            {
              unint64_t v55 = 256;
              goto LABEL_129;
            }
            if (((1 << v56) & 0x60000000) == 0) {
              goto LABEL_74;
            }
LABEL_98:
            unint64_t v55 = 1024;
            goto LABEL_129;
          }
LABEL_114:
          unint64_t v55 = 1361;
          goto LABEL_129;
        }
        if ((unint64_t)(v79 - 144) < 2)
        {
          unint64_t v55 = 64;
          goto LABEL_129;
        }
        if (v79 == 131) {
          goto LABEL_114;
        }
LABEL_127:
        unint64_t v55 = 0;
        goto LABEL_129;
      }
      if (v79 <= 367)
      {
        unint64_t v57 = v79 - 288;
        if (v57 > 0x21) {
          goto LABEL_127;
        }
        if (((1 << v57) & 3) == 0)
        {
          if (((1 << v57) & 0x30000) == 0)
          {
            if (((1 << v57) & 0x300000000) != 0)
            {
              unint64_t v55 = 168;
              goto LABEL_129;
            }
            goto LABEL_127;
          }
LABEL_90:
          unint64_t v55 = 4;
          goto LABEL_129;
        }
        goto LABEL_101;
      }
      if ((unint64_t)(v79 - 368) >= 2)
      {
        if ((unint64_t)(v79 - 384) < 2)
        {
          unint64_t v55 = 336;
          goto LABEL_129;
        }
        if ((unint64_t)(v79 - 432) < 2) {
          goto LABEL_98;
        }
        goto LABEL_127;
      }
LABEL_102:
      unint64_t v55 = 512;
      goto LABEL_129;
    }
    if (v79 <= 66)
    {
      if (v79 > 34)
      {
        if (v79 > 50)
        {
          if ((unint64_t)(v79 - 64) < 2)
          {
            unint64_t v55 = 8;
            goto LABEL_129;
          }
          if (v79 == 51)
          {
            unint64_t v55 = 389;
            goto LABEL_129;
          }
          goto LABEL_127;
        }
        if ((unint64_t)(v79 - 48) >= 2)
        {
          if (v79 == 35)
          {
            unint64_t v55 = 99;
            goto LABEL_129;
          }
          goto LABEL_127;
        }
        goto LABEL_90;
      }
      if ((unint64_t)(v79 - 16) < 2) {
        goto LABEL_129;
      }
      if ((unint64_t)(v79 - 32) >= 2)
      {
        if (v79 == 19)
        {
          unint64_t v55 = 31;
          goto LABEL_129;
        }
        goto LABEL_127;
      }
LABEL_101:
      unint64_t v55 = 2;
      goto LABEL_129;
    }
    if (v79 > 98)
    {
      if (v79 > 114)
      {
        if ((unint64_t)(v79 - 128) < 2)
        {
          unint64_t v55 = 16;
          goto LABEL_129;
        }
        if (v79 != 115) {
          goto LABEL_127;
        }
      }
      else
      {
        if ((unint64_t)(v79 - 112) < 2) {
          goto LABEL_102;
        }
        if (v79 != 99) {
          goto LABEL_127;
        }
      }
    }
    else if (v79 > 82)
    {
      if ((unint64_t)(v79 - 96) < 2)
      {
        unint64_t v55 = 128;
        goto LABEL_129;
      }
      if (v79 != 83) {
        goto LABEL_127;
      }
    }
    else
    {
      if ((unint64_t)(v79 - 80) < 2)
      {
        unint64_t v55 = 32;
        goto LABEL_129;
      }
      if (v79 != 67) {
        goto LABEL_127;
      }
    }
    unint64_t v55 = 681;
    goto LABEL_129;
  }
LABEL_153:

LABEL_154:
  sub_1DDBA4270((uint64_t)a1);
LABEL_155:
}

void sub_1DDBB8164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDBB8240(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, void *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  BOOL v9 = sub_1DDB9FCD0(v8, @"S9100", 1);
  BOOL v10 = sub_1DDB9FCD0(v8, @"S9600", 1);
  BOOL v11 = sub_1DDB9FCD0(v8, @"S3Pro", 1);
  BOOL v12 = sub_1DDB9FCD0(v8, @"S2Pro", 1);
  BOOL v13 = sub_1DDB9FCD0(v8, @"S20Pro", 1);
  BOOL v14 = sub_1DDB9FCD0(v8, @"S5Pro", 1);
  if (v9 || v10)
  {
    *a5 = 0x4B000000640;
    if (a3 <= 0x22)
    {
      unsigned int v15 = (((a3 - ((unsigned __int16)(37 * a3) >> 8)) >> 1)
           + ((37 * a3) >> 8)) >> 2;
      int v16 = dword_1DDC0B770[(a3 - 7 * v15)];
      int v17 = dword_1DDC0B78C[v15];
      *(_DWORD *)a4 = v16;
      *(_DWORD *)(a4 + 4) = v17;
      *(void *)(a4 + 8) = 0xF0000003CLL;
LABEL_11:
      BOOL v23 = 1;
      goto LABEL_16;
    }
LABEL_15:
    BOOL v23 = 0;
    goto LABEL_16;
  }
  if (v11 || v12)
  {
    *a5 = 0x3C0000005A0;
    if (a3 > 4) {
      goto LABEL_15;
    }
    int v18 = dword_1DDC0B7C8[a3];
    int v19 = dword_1DDC0B7DC[a3];
    int v20 = dword_1DDC0B7A0[a3];
    int v21 = &unk_1DDC0B7B4;
LABEL_10:
    int v22 = v21[a3];
    *(_DWORD *)a4 = v18;
    *(_DWORD *)(a4 + 4) = v19;
    *(_DWORD *)(a4 + 8) = v20;
    *(_DWORD *)(a4 + 12) = v22;
    goto LABEL_11;
  }
  if (v13)
  {
    *a5 = 0x3C000000500;
    if (a3 > 4) {
      goto LABEL_15;
    }
    int v18 = dword_1DDC0B7C8[a3];
    int v19 = dword_1DDC0B7DC[a3];
    int v20 = dword_1DDC0B7F0[a3];
    int v21 = &unk_1DDC0B804;
    goto LABEL_10;
  }
  if (!v14) {
    goto LABEL_15;
  }
  *a5 = 0x3C0000005A0;
  uint64_t v31 = 0;
  long long v28 = 0u;
  int v29 = 0;
  *(void *)((char *)&v28 + 4) = 0xFFFFFF3D000000C3;
  long long v30 = xmmword_1DDC0B760;
  BOOL v23 = a3 < 0xB;
  if (a3 <= 0xA)
  {
    int v24 = *((_DWORD *)&v28 + a3);
    int v25 = dword_1DDC0B844[a3];
    int v26 = dword_1DDC0B870[a3];
    *(_DWORD *)a4 = dword_1DDC0B818[a3];
    *(_DWORD *)(a4 + 4) = v24;
    *(_DWORD *)(a4 + 8) = v25;
    *(_DWORD *)(a4 + 12) = v26;
  }
LABEL_16:

  return v23;
}

void sub_1DDBB84F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB851C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v15 = a2;
  int v11 = sub_1DDBA1F24(a1, v15, a3, a4, a5, a6);
  if (v11)
  {
    if (v11 == 1)
    {
      BOOL v12 = sub_1DDBA1778(a1);
      BOOL v13 = sub_1DDBA17F8(a3);
      BOOL v14 = sub_1DDBA175C(a3);
      sub_1DDA784D0(v12, v13, v14, &unk_1F39AFAD0);
    }
    else
    {
      BOOL v12 = sub_1DDBA1778(a1);
      BOOL v13 = sub_1DDBA17F8(a3);
      BOOL v14 = sub_1DDBA175C(a3);
      sub_1DDBA6668(v12, v13, v14);
    }
  }
  else
  {
    BOOL v12 = sub_1DDBA1778(a1);
    BOOL v13 = sub_1DDBA17F8(a3);
    BOOL v14 = sub_1DDBA175C(a3);
    sub_1DDA784D0(v12, v13, v14, &unk_1F39AFAB8);
  }
}

void sub_1DDBB868C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB86BC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, int a6)
{
  v40[4] = *MEMORY[0x1E4F143B8];
  BOOL v10 = sub_1DDBA1778(a1);
  int v11 = sub_1DDBA17F8(a3);
  BOOL v12 = sub_1DDBA175C(a3);
  BOOL v13 = sub_1DDBA64D4(v10, v11, v12);

  unint64_t v18 = 0;
  v40[0] = 0;
  do
  {
    if (v18 >= objc_msgSend_count(v13, v14, v15, v16, v17)) {
      int v19 = -1;
    }
    else {
      int v19 = sub_1DDB66788(v13, (const char *)v40, v15, v16, v17);
    }
    uint64_t v20 = v40[0];
    *((_DWORD *)&v40[1] + v40[0]) = v19;
    unint64_t v18 = v20 + 1;
    v40[0] = v20 + 1;
  }
  while ((unint64_t)(v20 + 1) < 6);
  unsigned int v21 = a4[4];
  unsigned int v22 = bswap32(v21) >> 16;
  if (a6) {
    LOWORD(v21) = v22;
  }
  unsigned int v23 = a4[5];
  unsigned int v24 = bswap32(v23) >> 16;
  if (a6) {
    LOWORD(v23) = v24;
  }
  uint64_t v25 = 3;
  if (*a4 - 4131 < 3) {
    uint64_t v25 = (2 * (unsigned __int16)(*a4 - 4131)) | 1;
  }
  *((_DWORD *)&v40[1] + v25) = (unsigned __int16)v23;
  v40[0] = v25 - 1;
  *((_DWORD *)v40 + v25 + 1) = (unsigned __int16)v21;
  int v26 = sub_1DDBA1778(a1);
  uint64_t v27 = sub_1DDBA17F8(a3);
  long long v28 = sub_1DDBA175C(a3);
  sub_1DDBA6668(v26, v27, v28);

  v40[0] = 0;
  do
  {
    int v29 = sub_1DDBA1778(a1);
    long long v30 = sub_1DDBA17F8(a3);
    uint64_t v31 = sub_1DDBA175C(a3);
    uint64_t v32 = sub_1DDBB899C(v29, v30, v31);

    if (v32)
    {
      int v36 = objc_msgSend_numberWithInt_(NSNumber, v33, *((unsigned int *)&v40[1] + v40[0]), v34, v35);
      objc_msgSend_addObject_(v32, v37, (uint64_t)v36, v38, v39);
    }
    ++v40[0];
  }
  while (v40[0] < 6uLL);
}

void sub_1DDBB8928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDBB899C(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1DDA7A98C(a1, a2, 0);
  uint64_t v7 = sub_1DDADAF54(v6, v5);

  return v7;
}

void sub_1DDBB8A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB8A30(uint64_t a1)
{
  sub_1DDBAA3F4(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDBB8A68(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  id v8 = operator new(0xE8uLL);
  sub_1DDBB8AF4((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBB8AE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB8AF4(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3989FA0;
  sub_1DDBAA64C(a1 + 24, a2, *a3, *a4);
  *(void *)(a1 + 24) = &unk_1F3989EA8;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  return a1;
}

void sub_1DDBB8B64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBB8B78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3989FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBB8B98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3989FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBB8BEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

unsigned char *sub_1DDBB8C14(unsigned char *result)
{
  if (result)
  {
    uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398A138, 0);
    if (result) {
      result[195] = 1;
    }
  }
  return result;
}

void sub_1DDBB8C7C(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBB8DB0(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBB8CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDBB8D10(unsigned char *a1)
{
  return sub_1DDBA10A4(a1) || a1[195] != 0;
}

void *sub_1DDBB8D4C()
{
  return &unk_1F3989FE0;
}

BOOL sub_1DDBB8D58(uint64_t a1, void *a2)
{
  return a2 == &unk_1F3989FE0;
}

__CFString *sub_1DDBB8D6C()
{
  return @"{MakerHasselblad}";
}

void sub_1DDBB8D78(uint64_t a1)
{
  sub_1DDBAA3F4(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDBB8DB0(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  id v8 = operator new(0xE0uLL);
  sub_1DDBB8E3C((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBB8E28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB8E3C(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F398A160;
  sub_1DDBAA64C(a1 + 24, a2, *a3, *a4);
  *(void *)(a1 + 24) = &unk_1F398A068;
  *(unsigned char *)(a1 + 219) = 0;
  return a1;
}

void sub_1DDBB8EAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBB8EC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398A160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBB8EE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398A160;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBB8F34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void sub_1DDBB8F5C(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBB9024(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBB8FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *sub_1DDBB8FF0()
{
  return &unk_1E6D063E0;
}

uint64_t sub_1DDBB8FFC()
{
  return 1;
}

BOOL sub_1DDBB9004(uint64_t a1, void *a2)
{
  return a2 == &unk_1E6D063E0;
}

__CFString *sub_1DDBB9018()
{
  return @"{MakerKodak}";
}

void sub_1DDBB9024(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  id v8 = operator new(0xE0uLL);
  sub_1DDBB90B0(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBB909C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDBB90B0(void *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F398A2A8;
  sub_1DDBAA64C((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = &unk_1F398A1B0;
  return a1;
}

void sub_1DDBB911C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBB9130(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398A2A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBB9150(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398A2A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBB91A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void sub_1DDBB9244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB9374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBB9438(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    BOOL v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398A440, 0);
    if (v10) {
      sub_1DDBB9AC0((uint64_t)v10, v11, v12, a4, a5, a6);
    }
  }
}

void sub_1DDBB94F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBB9504(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2 < 4) {
    goto LABEL_19;
  }
  int v6 = *a1;
  if (v6 == 77)
  {
    if (a1[1] != 77) {
      goto LABEL_19;
    }
    if (a1[2]) {
      goto LABEL_19;
    }
    if (a1[3] != 42) {
      goto LABEL_19;
    }
    uint64_t v10 = bswap32(*((_DWORD *)a1 + 1));
    unint64_t v8 = (v10 + 2);
    if (v8 > a2) {
      goto LABEL_19;
    }
    uint64_t v7 = (v10 + 1);
    int v9 = 1;
    uint64_t v11 = v10;
  }
  else
  {
    if (v6 != 73) {
      goto LABEL_19;
    }
    if (a1[1] != 73) {
      goto LABEL_19;
    }
    if (a1[2] != 42) {
      goto LABEL_19;
    }
    if (a1[3]) {
      goto LABEL_19;
    }
    uint64_t v7 = *((unsigned int *)a1 + 1);
    unint64_t v8 = (v7 + 2);
    if (v8 > a2) {
      goto LABEL_19;
    }
    int v9 = 0;
    uint64_t v10 = (v7 + 1);
    uint64_t v11 = *((unsigned int *)a1 + 1);
  }
  int v12 = a1[v7] | (a1[v10] << 8);
  if ((v8 + 12 * v12) <= a2 && v12 != 0)
  {
    uint64_t v16 = &a1[v11 + 3];
    while (1)
    {
      if (v9)
      {
        if (*(v16 - 1) != 134) {
          goto LABEL_27;
        }
        int v17 = *v16;
      }
      else
      {
        if (*v16 != 134) {
          goto LABEL_27;
        }
        int v17 = *(v16 - 1);
      }
      if (v17 == 6)
      {
        uint64_t v14 = 1;
        goto LABEL_20;
      }
LABEL_27:
      uint64_t v14 = 0;
      --v12;
      v16 += 12;
      if (!(_WORD)v12) {
        goto LABEL_20;
      }
    }
  }
LABEL_19:
  uint64_t v14 = 0;
LABEL_20:

  return v14;
}

uint64_t sub_1DDBB964C(uint64_t *a1)
{
  unsigned int v2 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 16))(*a1);
  if (v2 < 4) {
    return 0;
  }
  unsigned int v3 = v2;
  sub_1DDA49310(v16, a1);
  int v15 = 0;
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t))(*(void *)*a1 + 32))(*a1, &v15, 4) == 4)
  {
    if (v15 == 73 && BYTE1(v15) == 73 && BYTE2(v15) == 42 && !HIBYTE(v15)
      || (uint64_t v4 = 0, v15 == 77) && BYTE1(v15) == 77 && !BYTE2(v15) && HIBYTE(v15) == 42)
    {
      if (v15 == 77) {
        uint64_t v5 = 2;
      }
      else {
        uint64_t v5 = 1;
      }
      sub_1DDA29F88(v14, a1, v5);
      unsigned int v6 = sub_1DDA19EC8(*a1);
      unsigned int v7 = v3;
      if ((unint64_t)v3 - 2 >= v6
        && (int v8 = sub_1DDA19E68(*a1), v9 = v8, v7 >= v6 + 2 + 12 * v8)
        && (unsigned int v13 = v6 + 2, v8))
      {
        while (1)
        {
          uint64_t v10 = *a1;
          sub_1DDA18410(&v12, (int *)&v13);
          (*(void (**)(uint64_t, int *, void))(*(void *)v10 + 40))(v10, &v12, 0);
          if (sub_1DDA19E68(*a1) == 34310) {
            break;
          }
          --v9;
          v13 += 12;
          if (!(_WORD)v9) {
            goto LABEL_19;
          }
        }
        uint64_t v4 = 1;
      }
      else
      {
LABEL_19:
        uint64_t v4 = 0;
      }
      sub_1DDA2A000(v14);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_1DDA1AA18(v16);
  return v4;
}

void sub_1DDBB983C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1DDA2A000((uint64_t *)va);
  sub_1DDA1AA18((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1DDBB9874(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBBA3EC(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBB98EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *sub_1DDBB9908()
{
  return &unk_1F398A2E8;
}

BOOL sub_1DDBB9914(uint64_t a1, void *a2)
{
  return a2 == &unk_1F398A2E8;
}

__CFString *sub_1DDBB9928()
{
  return @"{MakerLeaf}";
}

void sub_1DDBB9934(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  memset(v15, 0, sizeof(v15));
  sub_1DDBA8EB8((uint64_t *)a1, a2, &v14);
  sub_1DDA18410(&v12, (int *)(a1 + 200));
  unsigned int v11 = *(_DWORD *)(a1 + 204);
  sub_1DDB9FD50((uint64_t *)a1, &v12, &v11, 0, &v13);
  if ((void)v14) {
    sub_1DDA480D4((uint64_t *)v15, &v14);
  }
  if ((void)v13)
  {
    uint64_t v6 = sub_1DDBA1778(a1);
    int v10 = sub_1DDA2E1C4(v6, (const char *)*MEMORY[0x1E4F2FCA0], v7, v8, v9);

    if (v10)
    {
      if (v10 == 6)
      {
        int v10 = 8;
      }
      else if (v10 == 8)
      {
        int v10 = 6;
      }
    }
    *(_DWORD *)(v13 + 20) = v10;
    sub_1DDA480D4((uint64_t *)v15, &v13);
  }
  sub_1DDBA0184(v15, a2, a3);
  if (*((void *)&v13 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v13 + 1));
  }
  if (*((void *)&v14 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v14 + 1));
  }
  *(void *)&long long v14 = v15;
  sub_1DDA18270((void ***)&v14);
}

void sub_1DDBB9A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  if (a13) {
    sub_1DDA18310(a13);
  }
  a12 = (void **)&a14;
  sub_1DDA18270(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DDBB9AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  sub_1DDB57070(a1, &v16);
  if (a6) {
    uint64_t v10 = 2;
  }
  else {
    uint64_t v10 = 1;
  }
  sub_1DDA29F88(v18, &v16, v10);
  if (v17) {
    sub_1DDA18310(v17);
  }
  unsigned int v11 = *(_DWORD *)(a4 + 8);
  unsigned int v12 = bswap32(v11);
  if (a6) {
    unsigned int v11 = v12;
  }
  unint64_t v13 = *(unsigned __int16 *)(a4 + 2);
  if (v13 > 0x6F) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = qword_1DDC0BA18[v13];
  }
  sub_1DDBB9BA4(a1, a5 + v11, v14 * *(unsigned int *)(a4 + 4), 0);
  return sub_1DDA2A000(v18);
}

void sub_1DDBB9B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1DDA2A000((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1DDBB9BA4(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v45 = a2;
  sub_1DDB57070(a1, v46);
  sub_1DDA1B2DC(&v49, &v45);
  sub_1DDA1A94C(v44, (uint64_t *)v46, (uint64_t)&v49, 0);
  if (v47) {
    sub_1DDA18310(v47);
  }
  if (a3 >= 0x35)
  {
    unsigned int v39 = a4 + 1;
    do
    {
      sub_1DDB57070(a1, v46);
      int v7 = sub_1DDA19EC8(*(uint64_t *)v46);
      if (v47) {
        sub_1DDA18310(v47);
      }
      if (v7 != 1347114067) {
        return sub_1DDA1AA18(v44);
      }
      sub_1DDB57070(a1, v46);
      uint64_t v8 = *(void *)v46;
      unint64_t v49 = 4;
      sub_1DDA18488(&v42, &v49);
      (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(void *)v8 + 40))(v8, &v42, 1);
      if (v47) {
        sub_1DDA18310(v47);
      }
      sub_1DDB57070(a1, v46);
      (*(void (**)(void, unint64_t *, uint64_t))(**(void **)v46 + 32))(*(void *)v46, &v49, 32);
      if (v47) {
        sub_1DDA18310(v47);
      }
      char v51 = 0;
      sub_1DDB57070(a1, v46);
      uint64_t v9 = *(void *)v46;
      unint64_t v42 = 8;
      sub_1DDA18488(&v40, &v42);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 40))(v9, &v40, 1);
      if (v47) {
        sub_1DDA18310(v47);
      }
      sub_1DDB57070(a1, v46);
      unsigned int v10 = sub_1DDA19EC8(*(uint64_t *)v46);
      if (v47) {
        sub_1DDA18310(v47);
      }
      sub_1DDB57070(a1, v46);
      int v11 = (*(uint64_t (**)(void))(**(void **)v46 + 48))(*(void *)v46);
      if (v47) {
        sub_1DDA18310(v47);
      }
      uint64_t v12 = v10;
      if (v49 == 0x666F725074706143
        && *(void *)v50 == 0x7461645F7761725FLL
        && *(void *)&v50[8] == 0x697461746F725F61
        && *(void *)&v50[11] == 0x6E6F697461746FLL)
      {
        sub_1DDB57070(a1, &v42);
        if (v10 >= 0x27uLL) {
          uint64_t v33 = 39;
        }
        else {
          uint64_t v33 = v10;
        }
        (*(void (**)(unint64_t, char *, uint64_t))(*(void *)v42 + 32))(v42, v46, v33);
        char v48 = 0;
        if (v43) {
          sub_1DDA18310(v43);
        }
        sscanf(v46, "%d", a1 + 216);
        BOOL v32 = 0;
        *(unsigned char *)(a1 + 195) = 1;
        goto LABEL_115;
      }
      if (v49 == 0x5F666F7250676D49
        && *(void *)v50 == 0x6E6F697461746F72
        && *(void *)&v50[7] == 0x656C676E615F6ELL)
      {
        sub_1DDB57070(a1, &v42);
        if (v10 >= 0x27uLL) {
          uint64_t v34 = 39;
        }
        else {
          uint64_t v34 = v10;
        }
        (*(void (**)(unint64_t, char *, uint64_t))(*(void *)v42 + 32))(v42, v46, v34);
        char v48 = 0;
        if (v43) {
          sub_1DDA18310(v43);
        }
        sscanf(v46, "%d", a1 + 212);
        BOOL v32 = 0;
        *(unsigned char *)(a1 + 196) = 1;
        goto LABEL_115;
      }
      if (v49 == 0x6572705F4745504ALL && *(void *)v50 == 0x7461645F77656976 && *(unsigned __int16 *)&v50[8] == 97)
      {
        BOOL v32 = 0;
        *(_DWORD *)(a1 + 200) = v11;
        *(_DWORD *)(a1 + 204) = v10;
        *(unsigned char *)(a1 + 197) = 1;
      }
      else
      {
        if (v49 == 0x624F6172656D6143 && *(void *)v50 == 0x70735F4F53495F6ALL && *(_DWORD *)&v50[8] == 6579557)
        {
          LODWORD(v40) = 0;
          sub_1DDB57070(a1, &v42);
          if (v10 >= 0x27uLL) {
            uint64_t v35 = 39;
          }
          else {
            uint64_t v35 = v10;
          }
          (*(void (**)(unint64_t, char *, uint64_t))(*(void *)v42 + 32))(v42, v46, v35);
          char v48 = 0;
          if (v43) {
            sub_1DDA18310(v43);
          }
          if (sscanf(v46, "%u", &v40) == 1 && v40 <= 6) {
            *(_DWORD *)(a1 + 208) = dword_1DDC0B9E0[v40];
          }
          BOOL v32 = 0;
          *(unsigned char *)(a1 + 198) = 1;
          goto LABEL_115;
        }
        if (v49 == 0x4F65727574706143
          && *(void *)v50 == 0x63656C65735F6A62
          && *(void *)&v50[5] == 0x6E6F697463656CLL)
        {
          goto LABEL_114;
        }
        BOOL v24 = v49 == 0x4F65727574706143 && *(void *)v50 == 0x5F656E6F745F6A62;
        if (v24 && *(void *)&v50[6] == 0x65767275635F65) {
          goto LABEL_114;
        }
        BOOL v26 = v49 == 0x4F65727574706143 && *(void *)v50 == 0x70726168735F6A62;
        if (v26 && *(void *)&v50[5] == 0x7373656E707261) {
          goto LABEL_114;
        }
        BOOL v28 = v49 == 0x6A624F746F6F6853 && *(void *)v50 == 0x735F726F6C6F635FLL;
        if (v28 && *(void *)&v50[5] == 0x70757465735F72) {
          goto LABEL_114;
        }
        BOOL v30 = v49 == 0x6A624F746F6F6853 && *(void *)v50 == 0x65735F657661735FLL;
        if (v30 && *(_DWORD *)&v50[8] == 7370100) {
          goto LABEL_114;
        }
        BOOL v32 = *(unsigned char *)(a1 + 195) && *(unsigned char *)(a1 + 196) && *(unsigned char *)(a1 + 197) && *(unsigned char *)(a1 + 198) != 0;
        if (!v32 && v10 >= 0x35)
        {
          sub_1DDBB9BA4(a1, v11, v10, v39);
LABEL_114:
          BOOL v32 = 0;
        }
      }
LABEL_115:
      sub_1DDB57070(a1, &v42);
      unint64_t v36 = v42;
      uint64_t v40 = v11 + v12;
      sub_1DDA1B2DC(&v41, &v40);
      (*(void (**)(unint64_t, int *, void))(*(void *)v36 + 40))(v36, &v41, 0);
      if (v43) {
        sub_1DDA18310(v43);
      }
      a3 = a3 - 52 - v12;
      char v37 = a3 < 0x35 || v32;
    }
    while ((v37 & 1) == 0);
  }
  return sub_1DDA1AA18(v44);
}

void sub_1DDBBA304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DDBBA3B4(uint64_t a1)
{
  sub_1DDBAA3F4(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDBBA3EC(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xF8uLL);
  sub_1DDBBA478((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBBA464(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBBA478(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F398A468;
  sub_1DDBAA64C(a1 + 24, a2, *a3, *a4);
  *(void *)(a1 + 24) = &unk_1F398A370;
  *(_DWORD *)(a1 + 219) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_1DDBBA4F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBBA504(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398A468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBBA524(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398A468;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBBA578(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void sub_1DDBBA5A0(const void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    uint64_t v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398A628, 0);
    if (v3) {
      sub_1DDBBA704((uint64_t)v3);
    }
  }
}

void sub_1DDBBA63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBA650(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBBA780(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBBA6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *sub_1DDBBA6E4()
{
  return &unk_1F398A4A8;
}

BOOL sub_1DDBBA6F0(uint64_t a1, void *a2)
{
  return a2 == &unk_1F398A4A8;
}

void sub_1DDBBA704(uint64_t a1)
{
  sub_1DDBA1778(a1);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  sub_1DDA784D0(v1, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD60], @"Hasselblad");
}

void sub_1DDBBA76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBA780(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  id v8 = operator new(0xE0uLL);
  sub_1DDBBA80C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBBA7F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDBBA80C(void *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F398A650;
  sub_1DDBAA64C((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = &unk_1F398A558;
  return a1;
}

void sub_1DDBBA878(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBBA88C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398A650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBBA8AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398A650;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBBA900(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void *sub_1DDBBA928()
{
  p_cache = DMKernels.cache;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBA50720, memory_order_acquire) & 1) == 0)
  {
    int v2 = __cxa_guard_acquire(&qword_1EBA50720);
    p_cache = (void **)(DMKernels + 16);
    if (v2)
    {
      qword_1EBA50718 = (uint64_t)os_log_create("com.apple.rawcamera", "mobileasset");
      __cxa_guard_release(&qword_1EBA50720);
      p_cache = (void **)(DMKernels + 16);
    }
  }
  return p_cache[227];
}

uint64_t sub_1DDBBA998()
{
  uint64_t v0 = &unk_1EAB91000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB91298, memory_order_acquire) & 1) == 0)
  {
    int v2 = __cxa_guard_acquire(&qword_1EAB91298);
    uint64_t v0 = (void *)&unk_1EAB91000;
    if (v2)
    {
      qword_1EAB91290 = (uint64_t)os_log_create("com.apple.rawcamera", "render");
      __cxa_guard_release(&qword_1EAB91298);
      uint64_t v0 = (void *)&unk_1EAB91000;
    }
  }
  return v0[82];
}

uint64_t sub_1DDBBAA08()
{
  uint64_t v0 = &unk_1EAB91000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB912A8, memory_order_acquire) & 1) == 0)
  {
    int v2 = __cxa_guard_acquire(&qword_1EAB912A8);
    uint64_t v0 = (void *)&unk_1EAB91000;
    if (v2)
    {
      qword_1EAB912A0 = (uint64_t)os_log_create("com.apple.rawcamera", "compile");
      __cxa_guard_release(&qword_1EAB912A8);
      uint64_t v0 = (void *)&unk_1EAB91000;
    }
  }
  return v0[84];
}

void sub_1DDBBAA78(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    unsigned int v10 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398A888, 0);
    if (v10) {
      sub_1DDBBC274(v10, v11, v12, a4, a5, a6);
    }
  }
}

void sub_1DDBBAB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBAB44(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    unsigned int v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398A888, 0);
    if (v10) {
      sub_1DDBBC108((uint64_t)v10, v11, v12, a4, a5, a6);
    }
  }
}

void sub_1DDBBABFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBAC10(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    unsigned int v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398A888, 0);
    if (v10) {
      sub_1DDBBC034((uint64_t)v10, v11, a3, a4, v12, a6);
    }
  }
}

void sub_1DDBBACC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBACDC(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBBC6C4(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBBAD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBBAD70(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  sub_1DDB57070(a1, &v9);
  LODWORD(v8) = 0;
  sub_1DDA1A94C(v7, &v9, (uint64_t)&v8, 0);
  if (v10) {
    sub_1DDA18310(v10);
  }
  uint64_t v8 = 0;
  sub_1DDB57070(a1, &v9);
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v9 + 32))(v9, &v8, 8);
  if (v10) {
    sub_1DDA18310(v10);
  }
  if (v2 == 8 && bswap32(v8) == 5067341)
  {
    uint64_t v9 = 0;
    if (sub_1DDBA1314(a1, (uint64_t)&v9, 8, 48, 0) != 8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (BYTE1(v9) == 77 && v9 == 77) {
      uint64_t v4 = 48;
    }
    else {
      uint64_t v4 = 140;
    }
  }
  else
  {
    uint64_t v4 = sub_1DDBA72D8();
  }
  sub_1DDA1AA18(v7);
  return v4;
}

void sub_1DDBBAEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1DDBBAF6C(unsigned int *a1, unint64_t a2)
{
  return a2 >= 4 && bswap32(*a1) == 5067341;
}

BOOL sub_1DDBBAF94(uint64_t *a1)
{
  unsigned int v4 = 0;
  sub_1DDA1A94C(v5, a1, (uint64_t)&v4, 0);
  unsigned int v4 = 0;
  BOOL v2 = (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t))(*(void *)*a1 + 32))(*a1, &v4, 4) == 4
    && bswap32(v4) == 5067341;
  sub_1DDA1AA18(v5);
  return v2;
}

void sub_1DDBBB038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DDBBB050(uint64_t a1)
{
  BOOL v2 = sub_1DDBA1778(a1);
  uint64_t v3 = (void *)*MEMORY[0x1E4F2F6D8];
  sub_1DDBB77F0(v2, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F6F8]);
  id v11 = (id)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    uint64_t v8 = objc_msgSend_intValue(v11, v4, v5, v6, v7);
    uint64_t v9 = sub_1DDBBB168(a1, v8);
    if (v9)
    {
      unsigned int v10 = sub_1DDBA1778(a1);
      sub_1DDA784D0(v10, v3, (void *)*MEMORY[0x1E4F2F708], v9);
    }
  }
  sub_1DDBA7974(a1);
}

void sub_1DDBBB12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1DDBBB168(uint64_t a1, uint64_t a2)
{
  uint64_t v168 = 0;
  uint64_t v169 = 0;
  uint64_t v170 = 0;
  uint64_t v7 = sub_1DDBE3DE4(@"minolta");
  if (v7)
  {
    objc_msgSend_stringWithFormat_(NSString, v4, @"%u", v5, v6, a2);
    uint64_t v8 = (char *)objc_claimAutoreleasedReturnValue();
    uint64_t v12 = sub_1DDA83A80(v7, v8, v9, v10, v11);

    for (unint64_t i = 0; ; unint64_t i = v167 + 1)
    {
      unint64_t v167 = i;
      if (i >= objc_msgSend_count(v12, v13, v14, v15, v16)) {
        break;
      }
      unsigned int v21 = sub_1DDB66820(v12, (const char *)&v167, v18, v19, v20);
      if (objc_msgSend_count(v21, v22, v23, v24, v25) == 5)
      {
        __p[0] = 0;
        int v29 = sub_1DDB65E24(v21, (const char *)__p, v26, v27, v28);
        __p[0] = (void *)1;
        double v33 = sub_1DDB667D0(v21, (const char *)__p, v30, v31, v32);
        __p[0] = (void *)2;
        double v37 = sub_1DDB667D0(v21, (const char *)__p, v34, v35, v36);
        __p[0] = (void *)3;
        double v41 = sub_1DDB667D0(v21, (const char *)__p, v38, v39, v40);
        __p[0] = (void *)4;
        double v45 = sub_1DDB667D0(v21, (const char *)__p, v42, v43, v44);
        if (v29)
        {
          double v46 = v45;
          id v47 = v29;
          uint64_t v52 = (char *)objc_msgSend_UTF8String(v47, v48, v49, v50, v51);
          sub_1DDA1A880(v161, v52);
          if (SHIBYTE(v162) < 0)
          {
            sub_1DDA2639C(__p, v161[0], (unint64_t)v161[1]);
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)v161;
            uint64_t v164 = v162;
          }
          *(double *)&long long v165 = v33;
          *((double *)&v165 + 1) = v37;
          *(double *)&long long v166 = v41;
          *((double *)&v166 + 1) = v46;
          sub_1DDBB4C18(&v168, (long long *)__p);
          if (SHIBYTE(v164) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v162) < 0) {
            operator delete(v161[0]);
          }
        }
      }
    }
  }
  uint64_t v53 = v168;
  if (v169 - v168 != 56)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3)) < 2)
    {
      id v54 = 0;
      goto LABEL_88;
    }
    unint64_t v55 = sub_1DDBA91F8(a1);
    char v56 = sub_1DDBA1778(a1);
    unint64_t v57 = sub_1DDA2E3A8(v56, (void *)*MEMORY[0x1E4F2F6D8], 0);

    id v61 = sub_1DDA357A8(v55, (const char *)*MEMORY[0x1E4F2F850], v58, v59, v60);
    unint64_t v65 = sub_1DDA357A8(v55, (const char *)*MEMORY[0x1E4F2F8B0], v62, v63, v64);
    uint64_t v69 = sub_1DDA83A80(v57, (const char *)*MEMORY[0x1E4F2F700], v66, v67, v68);
    uint64_t v75 = v69;
    double v76 = 0.0;
    if (v69)
    {
      double v78 = 0.0;
      if (objc_msgSend_count(v69, v70, v71, v72, v73) == 4)
      {
        __p[0] = 0;
        double v78 = sub_1DDB667D0(v75, (const char *)__p, v77, v72, v73);
        __p[0] = (void *)1;
        double v76 = sub_1DDB667D0(v75, (const char *)__p, v79, v80, v81);
        __p[0] = (void *)2;
        sub_1DDB667D0(v75, (const char *)__p, v82, v83, v84);
        __p[0] = (void *)3;
        double v74 = sub_1DDB667D0(v75, (const char *)__p, v85, v86, v87);
      }
    }
    else
    {
      double v78 = 0.0;
    }
    uint64_t v88 = v168;
    if (*(char *)(v168 + 23) < 0) {
      uint64_t v88 = *(void *)v168;
    }
    uint64_t v93 = objc_msgSend_stringWithUTF8String_(NSString, v70, v88, v72, v73, v74);
    if (v61)
    {
      uint64_t v158 = v57;
      uint64_t v159 = v55;
      uint64_t v156 = v65;
      uint64_t v157 = v61;
      objc_msgSend_doubleValue(v61, v89, v90, v91, v92);
      long double v95 = v94;
      objc_msgSend_doubleValue(v65, v96, v97, v98, v99);
      double v101 = exp2(v100 * 0.5);
      char v106 = sub_1DDA49F48(0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3));
      uint64_t v108 = v168;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3)) >= 2)
      {
        double v154 = log(v95);
        uint64_t v109 = 0;
        signed int v110 = 0;
        double v111 = 999999999.0;
        unint64_t v112 = 1;
        double v160 = v101;
        while (1)
        {
          int v113 = (void **)(v108 + v109 + 56);
          if (*(char *)(v108 + v109 + 79) < 0)
          {
            double v115 = v111;
            sub_1DDA2639C(__p, *v113, *(void *)(v108 + v109 + 64));
            double v111 = v115;
          }
          else
          {
            long long v114 = *(_OWORD *)v113;
            uint64_t v164 = *(void *)(v108 + v109 + 72);
            *(_OWORD *)long long __p = v114;
          }
          long long v116 = *(_OWORD *)(v108 + v109 + 96);
          long long v165 = *(_OWORD *)(v108 + v109 + 80);
          long long v166 = v116;
          long long v117 = v165;
          long double v118 = *((double *)&v116 + 1);
          double v107 = *(double *)&v116;
          if ((v78 <= 0.0 || vabdd_f64(v78, *(double *)&v165) <= 0.9)
            && (v76 <= 0.0 || vabdd_f64(v76, *((double *)&v165 + 1)) <= 0.9)
            && v95 >= *(double *)&v165 + -0.9
            && v95 <= *((double *)&v165 + 1) + 0.9)
          {
            if (v101 <= 0.0)
            {
              double v128 = v111;
LABEL_60:
              if (v164 >= 0) {
                objc_msgSend_stringWithUTF8String_(NSString, v102, (uint64_t)__p, v104, v105);
              }
              else {
              uint64_t v132 = objc_msgSend_stringWithUTF8String_(NSString, v102, (uint64_t)__p[0], v104, v105);
              }
              if (v132) {
                objc_msgSend_addObject_(v106, v129, (uint64_t)v132, v130, v131);
              }

              double v111 = v128;
              goto LABEL_66;
            }
            if (v101 >= *(double *)&v166 + -0.15 && v101 <= *((double *)&v166 + 1) + 0.15)
            {
              if (*(double *)&v165 != *((double *)&v165 + 1) && *(double *)&v166 != *((double *)&v166 + 1))
              {
                double v155 = v111;
                double v121 = log(*(long double *)&v116);
                long double v122 = log(v118) - v121;
                double v123 = log(*((long double *)&v117 + 1));
                long double v124 = log(*(long double *)&v117);
                long double v125 = v121 + v122 / (v123 - v124) * (v154 - v124);
                double v101 = v160;
                double v107 = exp(v125);
                double v111 = v155;
              }
              double v126 = vabdd_f64(v101, v107);
              double v107 = v111 + 0.15;
              if (v126 <= v111 + 0.15)
              {
                if (v126 < v111 + -0.15)
                {
                  if (v164 >= 0) {
                    objc_msgSend_stringWithUTF8String_(NSString, v102, (uint64_t)__p, v104, v105);
                  }
                  else {
                  uint64_t v127 = objc_msgSend_stringWithUTF8String_(NSString, v102, (uint64_t)__p[0], v104, v105);
                  }

                  signed int v110 = (void *)v127;
                }
                double v128 = v126;
                double v101 = v160;
                goto LABEL_60;
              }
              double v101 = v160;
            }
          }
LABEL_66:
          if (SHIBYTE(v164) < 0)
          {
            double v133 = v111;
            operator delete(__p[0]);
            double v111 = v133;
          }
          ++v112;
          uint64_t v108 = v168;
          v109 += 56;
          if (v112 >= 0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3)) {
            goto LABEL_72;
          }
        }
      }
      signed int v110 = 0;
LABEL_72:
      if (objc_msgSend_count(v106, v102, v103, v104, v105, v107))
      {
        if (v110) {
          objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v134, (uint64_t)v110, v135, v136);
        }
        else {
          objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v134, (uint64_t)&stru_1F398F7F8, v135, v136);
        }
        id v54 = (id)objc_claimAutoreleasedReturnValue();
        for (int j = 0; ; int j = (char *)__p[0] + 1)
        {
          __p[0] = j;
          if ((unint64_t)j >= objc_msgSend_count(v106, v137, v138, v139, v140)) {
            break;
          }
          uint64_t v145 = sub_1DDB65E24(v106, (const char *)__p, v142, v143, v144);
          if (objc_msgSend_length(v54, v146, v147, v148, v149))
          {
            if (!v110 || (objc_msgSend_isEqualToString_(v145, v150, (uint64_t)v54, v151, v152) & 1) == 0) {
              objc_msgSend_appendFormat_(v54, v150, @" or %@", v151, v152, v145);
            }
          }
          else
          {
            objc_msgSend_appendString_(v54, v150, (uint64_t)v145, v151, v152);
          }
        }
        unint64_t v57 = v158;
        unint64_t v55 = v159;
        unint64_t v65 = v156;
        id v61 = v157;
        goto LABEL_87;
      }

      unint64_t v57 = v158;
      unint64_t v55 = v159;
      unint64_t v65 = v156;
      id v61 = v157;
    }
    id v54 = v93;
LABEL_87:

    goto LABEL_88;
  }
  if (*(char *)(v168 + 23) < 0) {
    uint64_t v53 = *(void *)v168;
  }
  objc_msgSend_stringWithUTF8String_(NSString, v4, v53, v5, v6);
  id v54 = (id)objc_claimAutoreleasedReturnValue();
LABEL_88:

  __p[0] = &v168;
  sub_1DDBB5984((void ***)__p);

  return v54;
}

void sub_1DDBBB8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }

  long long __p = (void *)(v37 - 176);
  sub_1DDBB5984((void ***)&__p);
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBBBA98()
{
  return @"{MakerMinolta}";
}

BOOL sub_1DDBBBAA4(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  uint64_t v13 = 0;
  v14[0] = 0;
  *(void *)((char *)v14 + 5) = 0;
  uint64_t v11 = sub_1DDBA1314((uint64_t)a1, (uint64_t)&v13, 20, a5, a3);
  if (v11 == 20)
  {
    sub_1DDBA5A38(a1, v10, word_1F398A690, a3, a5, a6);
    (*(void (**)(unsigned char *))(*(void *)a1 + 160))(a1);
  }

  return v11 == 20;
}

void sub_1DDBBBBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBBBBB8(uint64_t a1, void *a2, unsigned int a3, _DWORD *a4, void *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  v18[2] = 650;
  v18[0] = 0;
  v18[1] = 0x1450000028ALL;
  uint64_t v18[3] = 0xFFFFFEBBFFFFFD76;
  int v19 = -650;
  long long v14 = 0u;
  *(void *)((char *)&v14 + 4) = 0x10E00000168;
  unint64_t v15 = 0xFFFFFE98FFFFFEF2;
  uint64_t v16 = 4294967026;
  int v17 = 270;
  if (sub_1DDBB4B08(v8, @"ALPHA SWEET DIGITAL", 0)
    && sub_1DDBB4B08(v8, @"ALPHA-7 DIGITAL", 0)
    && sub_1DDBB4B08(v8, @"MAXXUM 7D", 0)
    || (*a5 = 0x7D000000BC0, a3 > 8))
  {
    uint64_t v12 = 0;
  }
  else
  {
    int v9 = *((_DWORD *)&v14 + a3);
    int v10 = dword_1DDC0BB70[a3];
    int v11 = dword_1DDC0BB94[a3];
    *a4 = *((_DWORD *)v18 + a3);
    a4[1] = v9;
    a4[2] = v10;
    a4[3] = v11;
    uint64_t v12 = 1;
  }

  return v12;
}

void sub_1DDBBBD20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBBD30(char *a1, int a2)
{
  uint64_t v25 = 0;
  unsigned int v4 = sub_1DDBA1778((uint64_t)a1);
  uint64_t v5 = sub_1DDB6DAE4(v4, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD68]);

  for (unsigned __int16 i = 0; ; ++i)
  {
    uint64_t v6 = sub_1DDBBBBB8(v6, v5, i, v24, &v25);
    if (!v6) {
      break;
    }
  }
  if (i)
  {
    uint64_t v8 = sub_1DDBA4174((uint64_t)a1, 0, 0, (void (*)(uint64_t, void))sub_1DDBBBFA8);
    unsigned __int16 v9 = 0;
    long long __p = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    do
    {
      long long v20 = 0uLL;
      uint64_t v8 = sub_1DDBBBBB8(v8, v5, v9, &v20, &v25);
      if (v8)
      {
        int v10 = v22;
        if ((unint64_t)v22 >= v23)
        {
          uint64_t v12 = (v22 - (unsigned char *)__p) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            sub_1DDA17F78();
          }
          uint64_t v14 = v23 - (void)__p;
          if ((uint64_t)(v23 - (void)__p) >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15) {
            uint64_t v8 = (uint64_t)sub_1DDA19838((uint64_t)&v23, v15);
          }
          else {
            uint64_t v8 = 0;
          }
          uint64_t v16 = (char *)(v8 + 16 * v12);
          *(_OWORD *)uint64_t v16 = v20;
          uint64_t v18 = (char *)__p;
          int v17 = v22;
          int v19 = v16;
          if (v22 != __p)
          {
            do
            {
              *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
              v19 -= 16;
              v17 -= 16;
            }
            while (v17 != v18);
            int v17 = (char *)__p;
          }
          int v11 = v16 + 16;
          long long __p = v19;
          unsigned int v22 = v16 + 16;
          unint64_t v23 = v8 + 16 * v15;
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(_OWORD *)unsigned int v22 = v20;
          int v11 = v10 + 16;
        }
        unsigned int v22 = v11;
      }
      ++v9;
    }
    while (v9 < i);
    sub_1DDBA94FC(a1, (uint64_t)&__p, 1);
    if (a2) {
      sub_1DDBA96A8(a1, 1 << (a2 - 1), (uint64_t)(1 << (a2 - 1)) >> 63, 1);
    }
    sub_1DDBA9530((uint64_t)a1, &v25, 1);
    if (__p)
    {
      unsigned int v22 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1DDBBBF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBBBFA8(__CFString *result, unsigned int a2)
{
  if (result)
  {
    uint64_t v3 = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398A888, 0);
    uint64_t result = 0;
    if (v3) {
      BOOL v4 = a2 > 8;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4) {
      return off_1E6D06490[(__int16)a2];
    }
  }
  return result;
}

void sub_1DDBBC034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  LODWORD(v8) = *(_DWORD *)(a4 + 8);
  sub_1DDBA1778(a1);
  id v15 = (id)objc_claimAutoreleasedReturnValue();
  unsigned int v9 = bswap32(v8);
  if (a6) {
    uint64_t v8 = v9;
  }
  else {
    uint64_t v8 = v8;
  }
  int v10 = sub_1DDBA17F8(a3);
  uint64_t v14 = objc_msgSend_numberWithInt_(NSNumber, v11, v8, v12, v13);
  sub_1DDA784D0(v15, v10, (void *)*MEMORY[0x1E4F2F6F8], v14);
}

void sub_1DDBBC0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBC108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (*(_DWORD *)(a4 + 4) >= 0xA2u)
  {
    unsigned __int16 v28 = 0;
    LODWORD(v8) = *(_DWORD *)(a4 + 8);
    unsigned int v9 = bswap32(v8);
    uint64_t v8 = a6 ? v9 : v8;
    if (sub_1DDBA1314(a1, (uint64_t)&v28, 2, a5, v8 + 160) == 2)
    {
      unsigned __int16 v10 = v28;
      unsigned int v11 = bswap32(v28) >> 16;
      if (a6) {
        unsigned __int16 v10 = v11;
      }
      int v12 = v10;
      unsigned __int16 v28 = v10;
      if (v10 == 76) {
        unsigned int v13 = 6;
      }
      else {
        unsigned int v13 = 1;
      }
      if (v12 == 82) {
        uint64_t v14 = 8;
      }
      else {
        uint64_t v14 = v13;
      }
      id v15 = sub_1DDBA1778(a1);
      int v19 = objc_msgSend_numberWithShort_(NSNumber, v16, v14, v17, v18);
      uint64_t v20 = *MEMORY[0x1E4F2FD70];
      sub_1DDA784D0(v15, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD70], v19);

      uint64_t v24 = objc_msgSend_numberWithShort_(NSNumber, v21, v14, v22, v23);
      uint64_t v25 = sub_1DDBA1778(a1);
      objc_msgSend_setObject_forKeyedSubscript_(v25, v26, (uint64_t)v24, v20, v27);
    }
  }
}

void sub_1DDBBC248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBC274(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (*(_DWORD *)(a4 + 4) >= 0x8Eu)
  {
    unsigned __int16 v32 = 0;
    unsigned int v9 = *(_DWORD *)(a4 + 8);
    unsigned int v10 = bswap32(v9);
    if (a6) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = v9;
    }
    if (sub_1DDBA1314((uint64_t)a1, (uint64_t)&v32, 2, a5, v11 + 140) == 2)
    {
      unsigned __int16 v12 = v32;
      unsigned int v13 = bswap32(v32) >> 16;
      if (a6) {
        unsigned __int16 v12 = v13;
      }
      int v14 = v12;
      unsigned __int16 v32 = v12;
      if (v12 == 76) {
        unsigned int v15 = 6;
      }
      else {
        unsigned int v15 = 1;
      }
      if (v14 == 82) {
        uint64_t v16 = 8;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = sub_1DDBA1778((uint64_t)a1);
      unsigned int v21 = objc_msgSend_numberWithShort_(NSNumber, v18, v16, v19, v20);
      uint64_t v22 = *MEMORY[0x1E4F2FD70];
      sub_1DDA784D0(v17, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD70], v21);

      uint64_t v26 = objc_msgSend_numberWithShort_(NSNumber, v23, v16, v24, v25);
      uint64_t v27 = sub_1DDBA1778((uint64_t)a1);
      objc_msgSend_setObject_forKeyedSubscript_(v27, v28, (uint64_t)v26, v22, v29);
    }
    if (sub_1DDBA1314((uint64_t)a1, (uint64_t)&v32, 2, a5, v11 + 32) == 2)
    {
      unsigned __int16 v30 = v32;
      unsigned int v31 = bswap32(v32) >> 16;
      if (a6) {
        unsigned __int16 v30 = v31;
      }
      unsigned __int16 v32 = v30;
      sub_1DDBBBD30(a1, v30);
    }
  }
}

void sub_1DDBBC408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBC434(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_1DDBA1778((uint64_t)a1);
  int v10 = sub_1DDA2E1C4(v6, (const char *)*MEMORY[0x1E4F2FCA0], v7, v8, v9);

  memset(v44, 0, sizeof(v44));
  sub_1DDBA8EB8(a1, a2, &v43);
  long long v42 = 0uLL;
  uint64_t v11 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v12, @"IFD0/Exif/Makernote/%@", v13, v14, @"PreviewImageStart");
  unsigned int v15 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v19 = sub_1DDA357A8(v11, v15, v16, v17, v18);

  uint64_t v20 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v21, @"IFD0/Exif/Makernote/%@", v22, v23, @"PreviewImageLength");
  uint64_t v24 = (char *)objc_claimAutoreleasedReturnValue();
  unsigned __int16 v28 = sub_1DDA357A8(v20, v24, v25, v26, v27);

  uint64_t v33 = 0;
  if (v19 && v28)
  {
    int v40 = objc_msgSend_intValue(v19, v29, v30, v31, v32);
    unsigned int v38 = objc_msgSend_intValue(v28, v34, v35, v36, v37);
    sub_1DDA1B3CC(&v39, &v38);
    sub_1DDB9FD50(a1, &v40, &v39, v10, &v41);
    long long v42 = v41;
    uint64_t v33 = v41;
  }
  if ((void)v43) {
    sub_1DDA480D4((uint64_t *)v44, &v43);
  }
  if (v33) {
    sub_1DDA480D4((uint64_t *)v44, &v42);
  }
  sub_1DDBA0184(v44, a2, a3);

  if (*((void *)&v42 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v42 + 1));
  }
  if (*((void *)&v43 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v43 + 1));
  }
  *(void *)&long long v43 = v44;
  sub_1DDA18270((void ***)&v43);
}

void sub_1DDBBC61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void **a18, std::__shared_weak_count *a19, char a20)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  if (a19) {
    sub_1DDA18310(a19);
  }
  a18 = (void **)&a20;
  sub_1DDA18270(&a18);
  _Unwind_Resume(a1);
}

BOOL sub_1DDBBC6B4(uint64_t a1, unsigned __int8 a2)
{
  return a2 == 216;
}

void sub_1DDBBC6C4(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  sub_1DDBBC750(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBBC73C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDBBC750(void *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F398A8B0;
  sub_1DDBAA64C((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = &unk_1F398A7B8;
  return a1;
}

void sub_1DDBBC7BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBBC7D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398A8B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBBC7F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398A8B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBBC844(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void sub_1DDBBC86C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (v9) {
      sub_1DDBC1F78((uint64_t)v9, v12, v10, a4, v11, a6);
    }
  }
}

void sub_1DDBBC920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBC934(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (v11) {
      sub_1DDBC0C94(v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBBCA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBCA14(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v9 = a2;
  if (a1)
  {
    uint64_t v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (v7) {
      sub_1DDBC0D9C((uint64_t)v7, v8, a3, a4);
    }
  }
}

void sub_1DDBBCAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBCADC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    id v9 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (v9) {
      sub_1DDBC121C(v9, v12, v10, a4, v11, a6);
    }
  }
}

void sub_1DDBBCB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBCBA4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v10 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (v10) {
      sub_1DDBC15E0(v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBBCC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBCC74(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (v11) {
      sub_1DDBC0B04((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBBCD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBCD50(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v14 = a2;
  if (a1)
  {
    uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (v10) {
      sub_1DDBC1108((uint64_t)v10, v13, v11, v12, a4, a5, a6);
    }
  }
}

void sub_1DDBBCE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBCE1C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (v11) {
      sub_1DDBC0EEC((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBBCEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBCEF8(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (v10) {
      sub_1DDBC1D4C((uint64_t)v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBBCFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBCFC8(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (v10) {
      sub_1DDBC23C4((uint64_t)v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBBD084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBD098(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBC2828(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBBD110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBBD12C(uint64_t a1, unsigned int *a2, int *a3, float *a4, float *a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v9 = sub_1DDBA1778(a1);
  uint64_t v10 = @"{Temporary}";
  uint64_t v11 = @"_AutoFocus";
  id v12 = sub_1DDBA64D4(v9, v10, v11);

  unint64_t v17 = 0;
  unint64_t v35 = 0;
  LOBYTE(v18) = 1;
  do
  {
    while ((v18 & 1) == 0)
    {
      LOBYTE(v18) = 0;
      uint64_t v22 = 0;
      unint64_t v35 = v17 + 1;
      if (v17++ >= 6) {
        goto LABEL_29;
      }
    }
    if (v17 < objc_msgSend_count(v12, v13, v14, v15, v16)
      && (sub_1DDB6745C(v12, (const char *)&v35, v14, v15, v16),
          uint64_t v19 = objc_claimAutoreleasedReturnValue(),
          (uint64_t v20 = v19) != 0))
    {
      int v21 = objc_msgSend_intValue(v19, v13, v14, v15, v16);
      *(&v36 + v35) = v21;

      int v18 = 1;
    }
    else
    {
      int v18 = 0;
    }
    unint64_t v17 = v35 + 1;
    unint64_t v35 = v17;
  }
  while (v17 < 7);
  uint64_t v22 = 0;
  if (v18)
  {
    if (v36)
    {
      int v24 = v37;
      if (v37)
      {
        int v25 = v38;
        if (v38)
        {
          int v26 = v39;
          int v27 = v40;
          int v28 = v39 - v37;
          if (v39 < v37) {
            ++v28;
          }
          int v29 = v42;
          *a2 = v41 + (v28 >> 1);
          int v30 = v27 - v25;
          if (v27 < v25) {
            ++v30;
          }
          int v31 = v29 + (v30 >> 1);
          *a3 = v31;
          *a4 = *a4 * (float)v26;
          *a5 = *a5 * (float)v27;
          *a4 = *a4 / (float)v24;
          *a5 = *a5 / (float)v25;
          if ((*a2 & 0x80000000) == 0) {
            unsigned int v32 = *a2;
          }
          else {
            unsigned int v32 = -*a2;
          }
          if (v31 >= 0) {
            unsigned int v33 = v31;
          }
          else {
            unsigned int v33 = -v31;
          }
          if (v32 > 0x20 || v33 >= 0x21)
          {
            *a3 = 0;
            *a2 = 0;
          }
          uint64_t v22 = 1;
        }
      }
    }
  }
LABEL_29:

  return v22;
}

void sub_1DDBBD34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBD384(uint64_t a1)
{
  BOOL v2 = sub_1DDBA1778(a1);
  id v3 = (id)*MEMORY[0x1E4F2F6D8];
  BOOL v4 = @"ImageStabilization";
  sub_1DDB6DAE4(v2, v3, v4);
  id v26 = (id)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
    uint64_t v8 = sub_1DDBBD578(v5, (const char *)off_1E6D064D8, (uint64_t *)&v26, v6, v7);
  }
  else
  {
    id v9 = sub_1DDBA1778(a1);
    uint64_t v10 = sub_1DDBA64D4(v9, v3, v4);

    if ((unint64_t)objc_msgSend_count(v10, v11, v12, v13, v14, 4, 0) < 5)
    {
      uint64_t v8 = 0x7FFFLL;
    }
    else
    {
      int v18 = sub_1DDB66788(v10, (const char *)&v25, v15, v16, v17);
      if (v18 == 2) {
        unsigned int v19 = 0;
      }
      else {
        unsigned int v19 = 0x7FFF;
      }
      if (v18 == 1) {
        uint64_t v8 = 3;
      }
      else {
        uint64_t v8 = v19;
      }
    }
  }
  uint64_t v23 = sub_1DDBA1778(a1);
  if (v8 == 0x7FFF)
  {
    sub_1DDBA6668(v23, v3, v4);
  }
  else
  {
    int v24 = objc_msgSend_numberWithInt_(NSNumber, v20, v8, v21, v22);
    sub_1DDA784D0(v23, v3, v4, v24);
  }
}

void sub_1DDBBD51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBBD578(uint64_t a1, const char *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], a2, *a3, a4, a5);
  uint64_t v12 = objc_msgSend_length((void *)*a3, v8, v9, v10, v11);
  objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v7, v13, @" ", (uint64_t)&stru_1F398F7F8, 0, 0, v12);
  uint64_t v14 = (void *)MEMORY[0x1E4F28E78];
  unsigned int v19 = objc_msgSend_uppercaseString(v7, v15, v16, v17, v18);
  uint64_t v23 = objc_msgSend_stringWithString_(v14, v20, (uint64_t)v19, v21, v22);

  int v24 = 0;
  do
  {
    int v25 = v24;
    id v26 = (id *)&a2[24 * v24];
    if (!*v26) {
      break;
    }
    id v27 = *v26;
    uint64_t v28 = sub_1DDBB4B08(v27, v23, 0);

    if (!v28)
    {
      objc_storeStrong((id *)a3, *(id *)&a2[24 * v25 + 8]);
      break;
    }
    int v24 = v25 + 1;
  }
  while (*v26);
  uint64_t v29 = *(unsigned int *)&a2[24 * v25 + 16];

  return v29;
}

void sub_1DDBBD698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDBBD6C4()
{
  return (id)*MEMORY[0x1E4F2FC48];
}

void sub_1DDBBD6D4(uint64_t a1)
{
  BOOL v2 = sub_1DDBA1778(a1);
  id v3 = (void *)*MEMORY[0x1E4F2F6D8];
  BOOL v4 = (void *)*MEMORY[0x1E4F2FC58];
  BOOL v5 = sub_1DDBA6568(v2, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58]);

  if (!v5)
  {
    uint64_t v6 = sub_1DDBA1778(a1);
    uint64_t v7 = sub_1DDB6DAE4(v6, (void *)*MEMORY[0x1E4F2FC48], v4);

    if (v7)
    {
      BOOL v8 = sub_1DDB9FCD0(v7, @"MANUAL", 1);
      uint64_t v9 = sub_1DDBA1778(a1);
      uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v10, !v8, v11, v12);
      sub_1DDA784D0(v9, v3, v4, v13);
    }
  }

  sub_1DDBA7974(a1);
}

void sub_1DDBBD7E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBD820(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_1DDBA1778((uint64_t)a1);
  int v10 = sub_1DDA2E1C4(v6, (const char *)*MEMORY[0x1E4F2FCA0], v7, v8, v9);

  memset(v44, 0, sizeof(v44));
  sub_1DDBA8EB8(a1, a2, &v43);
  long long v42 = 0uLL;
  uint64_t v11 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v12, @"IFD0/Exif/Makernote/%@/%@", v13, v14, @"NikonThumbnail", @"PreviewImageStart");
  uint64_t v15 = (char *)objc_claimAutoreleasedReturnValue();
  unsigned int v19 = sub_1DDA357A8(v11, v15, v16, v17, v18);

  uint64_t v20 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v21, @"IFD0/Exif/Makernote/%@/%@", v22, v23, @"NikonThumbnail", @"PreviewImageLength");
  int v24 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v28 = sub_1DDA357A8(v20, v24, v25, v26, v27);

  uint64_t v33 = 0;
  if (v19 && v28)
  {
    int v40 = objc_msgSend_intValue(v19, v29, v30, v31, v32);
    unsigned int v38 = objc_msgSend_intValue(v28, v34, v35, v36, v37);
    sub_1DDA1B3CC(&v39, &v38);
    sub_1DDB9FD50(a1, &v40, &v39, v10, &v41);
    long long v42 = v41;
    uint64_t v33 = v41;
  }
  if ((void)v43) {
    sub_1DDA480D4((uint64_t *)v44, &v43);
  }
  if (v33) {
    sub_1DDA480D4((uint64_t *)v44, &v42);
  }
  sub_1DDBA0184(v44, a2, a3);

  if (*((void *)&v42 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v42 + 1));
  }
  if (*((void *)&v43 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v43 + 1));
  }
  *(void *)&long long v43 = v44;
  sub_1DDA18270((void ***)&v43);
}

void sub_1DDBBDA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void **a18, std::__shared_weak_count *a19, char a20)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  if (a19) {
    sub_1DDA18310(a19);
  }
  a18 = (void **)&a20;
  sub_1DDA18270(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBBDAB0(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v18[2] = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  uint64_t v17 = 0;
  v18[0] = 0;
  *(void *)((char *)v18 + 5) = 0;
  if (sub_1DDBA1314((uint64_t)a1, (uint64_t)&v17, 20, a5, a3) != 20) {
    goto LABEL_19;
  }
  if (v17 == 1869310286 && *(_DWORD *)((char *)&v17 + 3) == 33582703)
  {
    if (BYTE2(v18[0]) == 73) {
      unsigned int v12 = 0;
    }
    else {
      unsigned int v12 = a6;
    }
    if (BYTE2(v18[0]) == 77) {
      unsigned int v13 = 1;
    }
    else {
      unsigned int v13 = v12;
    }
    if (BYTE2(v18[0]) == BYTE3(v18[0])) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = a6;
    }
    sub_1DDBA5A38(a1, v10, word_1F398AE40, 8, a3 + a5 + 10, v14);
    goto LABEL_18;
  }
  if (!(v17 ^ 0x100006E6F6B694ELL | LOWORD(v18[0])))
  {
LABEL_19:
    uint64_t v15 = 0;
    goto LABEL_20;
  }
  sub_1DDBA5A38(a1, v10, word_1E6D06898, a3, a5, a6);
LABEL_18:
  (*(void (**)(unsigned char *))(*(void *)a1 + 160))(a1);
  uint64_t v15 = 1;
LABEL_20:

  return v15;
}

void sub_1DDBBDC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBDC58(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  BOOL v2 = sub_1DDBA1778(a1);
  id v3 = (void *)*MEMORY[0x1E4F2FC48];
  BOOL v4 = sub_1DDA2E3A8(v2, (void *)*MEMORY[0x1E4F2FC48], 0);

  BOOL v5 = sub_1DDBA1778(a1);
  uint64_t v6 = (void *)*MEMORY[0x1E4F2F6D8];
  uint64_t v7 = (void *)*MEMORY[0x1E4F2F7A0];
  sub_1DDB6DAE4(v5, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F7A0]);
  uint64_t v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v8 && CFStringGetCString(v8, buffer, 256, 0x8000100u))
  {
    unsigned int v9 = buffer[0];
    if (buffer[0])
    {
      unsigned __int8 v10 = 0;
      uint64_t v11 = &buffer[1];
      do
      {
        if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v9 + 60) & 0x400) != 0) {
          LOBYTE(v9) = v9 - 48;
        }
        else {
          v9 %= 0xAu;
        }
        unsigned __int8 v10 = v9 + 10 * v10;
        unsigned int v12 = *v11++;
        unsigned int v9 = v12;
      }
      while (v12);
    }
    else
    {
      unsigned __int8 v10 = 0;
    }
    if (sub_1DDBA1100(a1, (unsigned __int8 *)buffer))
    {
      long long v43 = sub_1DDBA1778(a1);
      sub_1DDBA6668(v43, v6, v7);
    }
  }
  else
  {
    unsigned __int8 v10 = 0;
  }
  unsigned int v13 = (const char *)*MEMORY[0x1E4F2FC68];
  if (sub_1DDA2E4E0(v4, (void *)*MEMORY[0x1E4F2FC68])) {
    char v17 = sub_1DDA2E1C4(v4, v13, v14, v15, v16);
  }
  else {
    char v17 = 0;
  }
  uint64_t v18 = (const char *)*MEMORY[0x1E4F2FC78];
  if (sub_1DDA2E4E0(v4, (void *)*MEMORY[0x1E4F2FC78]))
  {
    uint64_t v22 = sub_1DDA2E1C4(v4, v18, v19, v20, v21);
    uint64_t v23 = sub_1DDBA1778(a1);
    uint64_t v27 = objc_msgSend_numberWithInt_(NSNumber, v24, v22, v25, v26);
    sub_1DDA784D0(v23, v6, (void *)*MEMORY[0x1E4F2F6F0], v27);
  }
  else
  {
    LODWORD(v22) = 0;
  }
  uint64_t v28 = sub_1DDBA1778(a1);
  id v29 = v3;
  uint64_t v30 = sub_1DDBA64D4(v28, v29, @"_Nikon98Tag");

  if (v30)
  {
    size_t v35 = objc_msgSend_count(v30, v31, v32, v33, v34);
    if (v35)
    {
      sub_1DDA1AB9C(buffer, v35);
      uint64_t v39 = 0;
      unsigned int v40 = 1;
      do
      {
        uint64_t v44 = v39;
        char v41 = sub_1DDB66788(v30, (const char *)&v44, v36, v37, v38);
        *(unsigned char *)(*(void *)buffer + v39) = v41;
        uint64_t v39 = v40;
      }
      while (v35 > v40++);
      sub_1DDBBE044(a1, *(_DWORD **)buffer, v35, v22, v10, v17);
      if (*(void *)buffer)
      {
        uint64_t v46 = *(void *)buffer;
        operator delete(*(void **)buffer);
      }
    }
  }
  objc_msgSend_removeObjectForKey_(v4, v31, @"_Nikon98Tag", v33, v34);
}

void sub_1DDBBDF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBE044(uint64_t a1, _DWORD *a2, unint64_t a3, unsigned int a4, unsigned __int8 a5, char a6)
{
  int v10 = sub_1DDBC0080(a1, a2, a3, a4, a5);
  uint64_t v38 = 0;
  uint64_t v12 = 11;
  unint64_t v13 = 9;
  if (v10 > 200)
  {
    if ((v10 - 201) >= 3)
    {
      if (v10 != 204) {
        return;
      }
      uint64_t v12 = 12;
      unint64_t v13 = 10;
    }
LABEL_7:
    if (v13 < a3)
    {
      LOBYTE(v11) = *((unsigned char *)a2 + v13);
      float v14 = expf((float)((float)v11 * 2.3026) / 40.0);
      sub_1DDBA1778(a1);
      id v35 = (id)objc_claimAutoreleasedReturnValue();
      *(float *)&double v15 = v14 / 100.0;
      uint64_t v20 = objc_msgSend_numberWithFloat_(NSNumber, v16, v17, v18, v19, v15);
      sub_1DDA784D0(v35, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC50], v20);
    }
    goto LABEL_10;
  }
  if (v10 != 100)
  {
    if (v10 != 101) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v12 = 6;
LABEL_10:
  if (v12 + 6 < a3)
  {
    uint64_t v21 = (char *)a2 + v12;
    unint64_t v22 = 7;
    do
    {
      char v23 = *v21++;
      *((unsigned char *)&v38 + v22) = v23;
    }
    while (v22-- > 1);
    LOBYTE(v38) = a6;
    sub_1DDBA1778(a1);
    id v36 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v25 = v38;
    id v29 = objc_msgSend_numberWithLongLong_(NSNumber, v26, (uint64_t)v38, v27, v28);
    uint64_t v30 = (void *)*MEMORY[0x1E4F2F6D8];
    sub_1DDA784D0(v36, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F6F8], v29);

    sub_1DDBC0148(a1, v25, v31, v32, v33);
    id v37 = (id)objc_claimAutoreleasedReturnValue();
    if (v37)
    {
      uint64_t v34 = sub_1DDBA1778(a1);
      sub_1DDA784D0(v34, v30, (void *)*MEMORY[0x1E4F2F708], v37);
    }
  }
}

void sub_1DDBBE270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBE2B0(uint64_t a1)
{
  sub_1DDBBE480(a1);
  BOOL v2 = sub_1DDBA1778(a1);
  sub_1DDA2E3A8(v2, @"{PictureStyle}", 0);
  id v15 = (id)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    id v3 = sub_1DDBA1778(a1);
    BOOL v4 = sub_1DDBA6568(v3, @"{PictureStyle}", @"Monochrome");

    if (!v4) {
      sub_1DDBA4B30(a1, @"Monochrome", 0);
    }
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    if ((v5 & 0x80000000) == 0)
    {
      uint64_t v6 = sub_1DDBA4D7C(a1, v5);
      sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictStyleColorSpace", v6, (float)v5, (float)v5);
    }
  }
  uint64_t v7 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v7, v8, @"{PictStyleSetting}", v9, v10);

  unsigned int v11 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v11, v12, @"{PictStyleNormalized}", v13, v14);
}

void sub_1DDBBE434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBBE480(uint64_t a1)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  long double v118 = 0;
  BOOL v2 = sub_1DDBA1778(a1);
  id v3 = (id)*MEMORY[0x1E4F2FC48];
  id v4 = (id)*MEMORY[0x1E4F2FC70];
  long double v118 = sub_1DDB6DAE4(v2, v3, v4);

  if (v118)
  {
    int v8 = sub_1DDBBD578(v5, (const char *)off_1E6D06520, (uint64_t *)&v118, v6, v7);
    if (v8 != 0x7FFF) {
      sub_1DDBA4BE8(a1, @"{PictureStyle}", (void *)*MEMORY[0x1E4F2F918], v118, (float)v8, (float)v8);
    }
  }
  uint64_t v9 = sub_1DDBA1778(a1);
  uint64_t v10 = @"{PictStyleSetting}";
  unsigned int v11 = sub_1DDB6DAE4(v9, v10, @"ToneCompensation");
  uint64_t v12 = v118;
  long double v118 = v11;

  if (v11)
  {
    int v16 = sub_1DDBBD578(v13, (const char *)off_1E6D065F8, (uint64_t *)&v118, v14, v15);
    if (v16 != 0x7FFF) {
      sub_1DDBA4BE8(a1, @"{PictureStyle}", @"ToneCompensation", v118, (float)v16, (float)v16);
    }
  }
  uint64_t v17 = sub_1DDBA1778(a1);
  uint64_t v18 = v10;
  id v19 = (id)*MEMORY[0x1E4F2F8F0];
  uint64_t v20 = sub_1DDB6DAE4(v17, v18, v19);
  uint64_t v21 = v118;
  long double v118 = v20;

  if (v20)
  {
    int v25 = sub_1DDBBD578(v22, (const char *)off_1E6D066B8, (uint64_t *)&v118, v23, v24);
    if (v25 != 0x7FFF) {
      sub_1DDBA4BE8(a1, @"{PictureStyle}", v19, v118, (float)v25, (float)v25);
    }
  }
  uint64_t v26 = sub_1DDBA1778(a1);
  BOOL v27 = sub_1DDBA6568(v26, v18, @"HueAdjustment");

  if (v27)
  {
    uint64_t v28 = sub_1DDBA1778(a1);
    int v29 = sub_1DDBA65E8(v28, v18, @"HueAdjustment");

    unsigned int v30 = v29 >= 0 ? v29 : -v29;
    if (v30 <= 0x7E) {
      sub_1DDBA4B30(a1, @"HueAdjustment", v29);
    }
  }
  uint64_t v31 = sub_1DDBA1778(a1);
  uint64_t v32 = v18;
  uint64_t v33 = @"ToningEffect";
  uint64_t v34 = sub_1DDB6DAE4(v31, v32, v33);
  id v35 = v118;
  long double v118 = v34;

  if (v34) {
    sub_1DDBA4BE8(a1, @"{PictureStyle}", v33, v34, 32767.0, 32767.0);
  }
  long long v114 = v34;
  id v36 = sub_1DDBA1778(a1);
  id v37 = v32;
  uint64_t v38 = sub_1DDBA64D4(v36, v37, @"_Nikon23Tag");

  if (v38)
  {
    size_t v43 = objc_msgSend_count(v38, v39, v40, v41, v42);
    if (v43 >= 0x3A)
    {
      sub_1DDA1AB9C(__p, v43);
      *(void *)&v119[0] = 0;
      do
      {
        char v47 = sub_1DDB66788(v38, (const char *)v119, v44, v45, v46);
        *((unsigned char *)__p[0] + (*(void *)&v119[0])++) = v47;
      }
      while (*(void *)&v119[0] < v43);
      double v111 = v33;
      int v113 = *((unsigned __int8 *)__p[0] + 51);
      int v107 = *((unsigned __int8 *)__p[0] + 52);
      int v108 = *((unsigned __int8 *)__p[0] + 50);
      int v49 = *((unsigned __int8 *)__p[0] + 53);
      char v105 = *((unsigned char *)__p[0] + 48);
      int v106 = *((unsigned __int8 *)__p[0] + 54);
      unsigned int v110 = *((unsigned __int8 *)__p[0] + 55);
      unsigned int v112 = *((unsigned __int8 *)__p[0] + 56);
      int v50 = *((unsigned __int8 *)__p[0] + 57);
      memset(v119, 0, 21);
      long long v51 = *(_OWORD *)((char *)__p[0] + 4);
      LODWORD(v119[1]) = *((_DWORD *)__p[0] + 5);
      v119[0] = v51;
      uint64_t v52 = objc_msgSend_stringWithUTF8String_(NSString, v48, (uint64_t)v119, v45, v46);
      unint64_t v57 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v53, v54, v55, v56);
      uint64_t v104 = v19;
      uint64_t v61 = objc_msgSend_stringByTrimmingCharactersInSet_(v52, v58, (uint64_t)v57, v59, v60);
      uint64_t v62 = (void *)v61;
      if (v61) {
        uint64_t v63 = (__CFString *)v61;
      }
      else {
        uint64_t v63 = &stru_1F398F7F8;
      }
      long long v116 = v63;

      v119[0] = *(_OWORD *)((char *)__p[0] + 24);
      LODWORD(v119[1]) = *((_DWORD *)__p[0] + 10);
      uint64_t v67 = objc_msgSend_stringWithUTF8String_(NSString, v64, (uint64_t)v119, v65, v66);
      uint64_t v72 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v68, v69, v70, v71);
      uint64_t v76 = objc_msgSend_stringByTrimmingCharactersInSet_(v67, v73, (uint64_t)v72, v74, v75);
      uint64_t v77 = (void *)v76;
      if (v76) {
        double v78 = (__CFString *)v76;
      }
      else {
        double v78 = &stru_1F398F7F8;
      }
      double v115 = v78;

      uint64_t v82 = sub_1DDBBD578(v79, (const char *)off_1E6D06718, (uint64_t *)&v116, v80, v81);
      int v83 = v82;
      int v86 = sub_1DDBBD578(v82, (const char *)off_1E6D06718, (uint64_t *)&v115, v84, v85);
      uint64_t v87 = v116;
      uint64_t v109 = v115;
      BOOL v88 = sub_1DDBB4B08(v116, v115, 0) == 0;
      if (v86 == 0x7FFF) {
        BOOL v88 = 1;
      }
      if (v86 == v83) {
        BOOL v88 = 1;
      }
      float v89 = (float)v83;
      if (v88 && v86 == 0x7FFF) {
        int v90 = v83;
      }
      else {
        int v90 = v86;
      }
      if (!v88) {
        float v89 = 0.0;
      }
      sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictureStyle", v87, v89, (float)v90);
      uint64_t v92 = sub_1DDBBEE98(v91, v90, (v113 - 128));
      int v93 = v49 - 125;
      if ((v49 - 125) >= 7)
      {
        int v93 = v49 - 128;
      }
      else
      {
        int v94 = v90 - 2;
        if (v90 - 2) <= 7 && ((0xCFu >> v94)) {
          int v93 = *((_DWORD *)*(&off_1E6D06A40 + v94) + v93);
        }
      }
      if ((v113 & 0x80u) == 0) {
        int v95 = 128 - v113;
      }
      else {
        int v95 = v113 - 128;
      }
      if (v95 <= 126) {
        sub_1DDBA4BE8(a1, @"{PictureStyle}", (void *)*MEMORY[0x1E4F2F7D8], 0, (float)(v113 - 128), (float)(int)v92);
      }
      if ((v49 & 0x80u) == 0) {
        int v96 = 128 - v49;
      }
      else {
        int v96 = v49 - 128;
      }
      if (v96 <= 126) {
        sub_1DDBA4BE8(a1, @"{PictureStyle}", v104, 0, (float)(v49 - 128), (float)v93);
      }
      uint64_t v97 = sub_1DDBBEEDC(v92, v112);
      sub_1DDBA4BE8(a1, @"{PictureStyle}", v111, v97, (float)v112, (float)v112);

      int v98 = (char)v112 < -125 || v90 == 11;
      uint64_t v99 = @"{PictureStyle}";
      double v100 = @"FilterEffect";
      switch(v110)
      {
        case 0x80u:
          double v101 = @"Off";
          break;
        case 0x81u:
          double v101 = @"Yellow";
          break;
        case 0x82u:
          double v101 = @"Orange";
          break;
        case 0x83u:
          double v101 = @"Red";
          break;
        case 0x84u:
          double v101 = @"Green";
          break;
        default:
          if (v110 == 255) {
            double v101 = @"N/A";
          }
          else {
            double v101 = 0;
          }
          break;
      }
      sub_1DDBA4BE8(a1, v99, v100, v101, (float)v110, (float)v110);

      sub_1DDBA4B30(a1, (void *)*MEMORY[0x1E4F2F918], v108 - 128);
      sub_1DDBA4B30(a1, (void *)*MEMORY[0x1E4F2F7B0], v107 - 128);
      if ((v106 & 0x80u) == 0) {
        int v102 = 128 - v106;
      }
      else {
        int v102 = v106 - 128;
      }
      if (v102 <= 126) {
        sub_1DDBA4B30(a1, @"HueAdjustment", v106 - 128);
      }
      if ((v50 & 0x80u) == 0) {
        int v103 = 128 - v50;
      }
      else {
        int v103 = v50 - 128;
      }
      if (v103 <= 126) {
        sub_1DDBA4B30(a1, @"ToningSaturation", v50 - 128);
      }
      sub_1DDBA4B30(a1, @"PictureControlAdjust", v105 & 0x7F);
      sub_1DDBA4B30(a1, @"Monochrome", v98);

      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1DDBBED14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBBEE98(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = a3;
  if ((a3 + 3) <= 6)
  {
    int v4 = a2 - 2;
    if (a2 - 2) <= 9 && ((0x2CFu >> v4)) {
      return *((unsigned int *)*(&off_1E6D069F0 + v4) + (a3 + 3));
    }
    else {
      return (a3 + 3);
    }
  }
  return result;
}

__CFString *sub_1DDBBEEDC(uint64_t a1, unsigned __int8 a2)
{
  switch(a2)
  {
    case 0x80u:
      uint64_t result = @"Black and White";
      break;
    case 0x81u:
      uint64_t result = @"Sepia";
      break;
    case 0x82u:
      uint64_t result = @"Cyanotype";
      break;
    case 0x83u:
      uint64_t result = @"Red";
      break;
    case 0x84u:
      uint64_t result = @"Yellow";
      break;
    case 0x85u:
      uint64_t result = @"Green";
      break;
    case 0x86u:
      uint64_t result = @"Blue-green";
      break;
    case 0x87u:
      uint64_t result = @"Blue";
      break;
    case 0x88u:
      uint64_t result = @"Purple-blue";
      break;
    case 0x89u:
      uint64_t result = @"Red-purple ";
      break;
    default:
      if (a2 == 255) {
        uint64_t result = @"N/A";
      }
      else {
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_1DDBBEFC0(uint64_t a1, void *a2, unsigned int a3, _DWORD *a4, uint64_t *a5)
{
  id v7 = a2;
  HIDWORD(v66) = sub_1DDB9FCD0(v7, @"D7000", 1);
  BOOL v60 = sub_1DDB9FCD0(v7, @"D7100", 1);
  LODWORD(v66) = sub_1DDB9FCD0(v7, @"D700", 1);
  BOOL v8 = sub_1DDB9FCD0(v7, @"D3000", 1);
  BOOL v74 = sub_1DDB9FCD0(v7, @"D3100", 1);
  BOOL v73 = sub_1DDB9FCD0(v7, @"D3200", 1);
  BOOL v71 = sub_1DDB9FCD0(v7, @"D300S", 1);
  BOOL v70 = sub_1DDB9FCD0(v7, @"D300", 1);
  BOOL v69 = sub_1DDB9FCD0(v7, @"D3X", 1);
  BOOL v68 = sub_1DDB9FCD0(v7, @"D3S", 1);
  BOOL v67 = sub_1DDB9FCD0(v7, @"D3", 1);
  BOOL v9 = sub_1DDB9FCD0(v7, @"D90", 1);
  BOOL v10 = sub_1DDB9FCD0(v7, @"D5000", 1);
  BOOL v11 = sub_1DDB9FCD0(v7, @"D5100", 1);
  BOOL v59 = sub_1DDB9FCD0(v7, @"D5200", 1);
  BOOL v58 = sub_1DDB9FCD0(v7, @"D5300", 1);
  BOOL v65 = sub_1DDB9FCD0(v7, @"wide", 1);
  BOOL v64 = sub_1DDB9FCD0(v7, @"D4", 1);
  BOOL v63 = sub_1DDB9FCD0(v7, @"Df", 1);
  BOOL v62 = sub_1DDB9FCD0(v7, @"D800", 1);
  BOOL v61 = sub_1DDB9FCD0(v7, @"D810", 1);
  BOOL v12 = sub_1DDB9FCD0(v7, @"D600", 1);
  BOOL v13 = sub_1DDB9FCD0(v7, @"D610", 1);
  BOOL v14 = sub_1DDB9FCD0(v7, @"D750", 1);
  uint64_t v15 = sub_1DDBBFB04(a1, a3);
  uint64_t v77 = v15;
  if (v15)
  {
    int v16 = v15;
    unsigned int v72 = sub_1DDBB397C(v15, 0);
    int v17 = sub_1DDBB397C(v16, 1uLL);
    int v18 = sub_1DDBB397C(v16, 2uLL) + 10 * v17;
    int v19 = v18 - 528;
    if (v9 || v10 || v8 || v74 || v73)
    {
      uint64_t v20 = 0xB20000010C0;
      if (v8) {
        uint64_t v20 = 0xA2000000F20;
      }
      uint64_t v21 = v77;
      *a5 = v20;
      int v22 = v19 + (v72 << 8) - 14080;
      if (v22 <= 3077)
      {
        if (v22 <= 2821)
        {
          if (v19 + (v72 << 8) == 16645)
          {
            uint64_t v23 = 2;
            goto LABEL_73;
          }
          if (v19 + (v72 << 8) == 16646)
          {
            uint64_t v23 = 4;
            goto LABEL_73;
          }
        }
        else
        {
          switch(v19 + (v72 << 8))
          {
            case 0x4206u:
              uint64_t v23 = 1;
              goto LABEL_73;
            case 0x4207u:
              uint64_t v23 = 9;
              goto LABEL_73;
            case 0x4305u:
              uint64_t v23 = 10;
              goto LABEL_73;
          }
        }
      }
      else if (v22 > 3334)
      {
        switch(v19 + (v72 << 8))
        {
          case 0x4407u:
            uint64_t v23 = 6;
            goto LABEL_73;
          case 0x4505u:
            uint64_t v23 = 5;
            goto LABEL_73;
          case 0x4506u:
            uint64_t v23 = 8;
            goto LABEL_73;
        }
      }
      else
      {
        switch(v19 + (v72 << 8))
        {
          case 0x4306u:
            uint64_t v23 = 11;
            if (!v65) {
              uint64_t v23 = 0;
            }
            goto LABEL_73;
          case 0x4307u:
            uint64_t v23 = 7;
            goto LABEL_73;
          case 0x4406u:
            uint64_t v23 = 3;
LABEL_73:
            int v48 = dword_1DDC0BE08[v23];
            int v49 = dword_1DDC0BE3C[v23];
            int v50 = dword_1DDC0BE70[v23];
            int v51 = dword_1DDC0BEA4[v23];
LABEL_92:
            *a4 = v48;
            a4[1] = v49;
            a4[2] = v50;
            a4[3] = v51;
LABEL_93:
            uint64_t v25 = 1;
            goto LABEL_94;
        }
      }
      uint64_t v23 = 12;
      goto LABEL_73;
    }
    uint64_t v21 = v77;
    if (v11)
    {
      *a5 = 0xCC000001340;
      int v26 = v19 + (v72 << 8) - 14080;
      if (v26 <= 3077)
      {
        if (v26 <= 2821)
        {
          if (v19 + (v72 << 8) == 16645)
          {
            uint64_t v27 = 2;
            goto LABEL_91;
          }
          if (v19 + (v72 << 8) == 16646)
          {
            uint64_t v27 = 4;
            goto LABEL_91;
          }
        }
        else
        {
          switch(v19 + (v72 << 8))
          {
            case 0x4206u:
              uint64_t v27 = 1;
              goto LABEL_91;
            case 0x4207u:
              uint64_t v27 = 9;
              goto LABEL_91;
            case 0x4305u:
              uint64_t v27 = 10;
              goto LABEL_91;
          }
        }
      }
      else if (v26 > 3334)
      {
        switch(v19 + (v72 << 8))
        {
          case 0x4407u:
            uint64_t v27 = 6;
            goto LABEL_91;
          case 0x4505u:
            uint64_t v27 = 5;
            goto LABEL_91;
          case 0x4506u:
            uint64_t v27 = 8;
            goto LABEL_91;
        }
      }
      else
      {
        switch(v19 + (v72 << 8))
        {
          case 0x4306u:
            uint64_t v27 = 11;
            if (!v65) {
              uint64_t v27 = 0;
            }
            goto LABEL_91;
          case 0x4307u:
            uint64_t v27 = 7;
            goto LABEL_91;
          case 0x4406u:
            uint64_t v27 = 3;
LABEL_91:
            int v56 = dword_1DDC0BED8[v27];
            int v49 = dword_1DDC0BF0C[v27];
            int v50 = dword_1DDC0BF40[v27];
            int v51 = dword_1DDC0BF74[v27];
            int v48 = v56 + 65;
            goto LABEL_92;
        }
      }
      uint64_t v27 = 12;
      goto LABEL_91;
    }
    int v28 = v18 - 480;
    if (v70 && !v8 && !v71 || v71)
    {
      int v29 = 1;
      uint64_t v30 = 0xB3400001100;
      float v31 = 110.0;
      int v32 = 1124204544;
      int v33 = 1127481344;
      float v34 = 80.0;
      float v35 = 200.0;
      float v36 = 150.0;
      float v37 = 212.0;
      float v38 = 240.0;
      float v39 = 1.4;
      float v40 = 1.4;
      goto LABEL_37;
    }
    int v29 = 1;
    uint64_t v30 = 0xB1C000010C0;
    float v31 = 110.0;
    int v32 = 1124204544;
    int v33 = 1127481344;
    float v34 = 80.0;
    float v35 = 200.0;
    float v36 = 150.0;
    float v37 = 212.0;
    float v40 = 1.02;
    float v38 = 240.0;
    float v39 = 0.99;
    if (v67 && !v8 && !v71 && !v70 && !v69 && !v68 || v68 || v66 == 1)
    {
LABEL_37:
      *a5 = v30;
      if ((int)(67 - v72) >= 0) {
        unsigned int v41 = 67 - v72;
      }
      else {
        unsigned int v41 = v72 - 67;
      }
      if (v41 <= 1) {
        int v29 = 0;
      }
      int v42 = v28 + v29;
      int v44 = v42 - 54;
      BOOL v43 = v42 - 54 < 0;
      int v45 = 54 - v42;
      if (!v43) {
        int v45 = v44;
      }
      float v46 = (float)v44;
      if (v45 > 1)
      {
        float v47 = (float)((float)(v34 * v46) / (float)v45) + (float)(v35 * v46);
        float v37 = *(float *)&v33;
        float v36 = *(float *)&v32;
      }
      else
      {
        float v47 = v38 * v46;
        float v31 = 125.0;
      }
      LODWORD(v78) = (int)(float)(v39 * v47);
      DWORD1(v78) = (int)(float)(v40 * (float)(v37 * (float)(int)(67 - v72)));
      sub_1DDA18218((_DWORD *)&v78 + 2, (float)(v39 * v36), (float)(v40 * v31));
      *(_OWORD *)a4 = v78;
      goto LABEL_93;
    }
    if (v64 || v63)
    {
      int v29 = 1;
      uint64_t v30 = 0xCDC00001380;
      float v31 = 110.0;
      int v32 = 1124204544;
      int v33 = 1127481344;
      float v34 = 80.0;
      float v35 = 200.0;
      float v36 = 150.0;
      float v37 = 212.0;
      float v38 = 240.0;
      float v39 = 1.15;
LABEL_36:
      float v40 = v39;
      goto LABEL_37;
    }
    if (!v12 && !v13)
    {
      if (v62 || v61)
      {
        int v29 = 1;
        uint64_t v30 = 0x133C00001D00;
        float v31 = 110.0;
        int v32 = 1124204544;
        int v33 = 1127481344;
        float v34 = 80.0;
        float v35 = 200.0;
        float v36 = 150.0;
        float v40 = 1.72;
        float v37 = 212.0;
        float v39 = 1.7;
        float v38 = 240.0;
        goto LABEL_37;
      }
      if (v14)
      {
        int v29 = 1;
        uint64_t v30 = 0xFB000001780;
        float v39 = 1.25;
        float v31 = 110.0;
        int v32 = 1124204544;
        int v33 = 1127481344;
        float v34 = 80.0;
        float v35 = 200.0;
        float v36 = 150.0;
        float v37 = 212.0;
        float v40 = 1.25;
        float v38 = 240.0;
        goto LABEL_37;
      }
      uint64_t v30 = 0xFB400001790;
      if (!v60)
      {
        if (v69)
        {
          int v29 = 1;
          float v31 = 110.0;
          int v32 = 1124204544;
          int v33 = 1127481344;
          float v34 = 80.0;
          float v35 = 200.0;
          float v36 = 150.0;
          float v37 = 212.0;
          float v38 = 240.0;
          float v40 = 1.45;
          float v39 = 1.4;
        }
        else
        {
          float v34 = 30.0;
          int v33 = 1132756992;
          if ((v66 & 0x100000000) != 0)
          {
            int v29 = 4;
            uint64_t v30 = 0xCC000001340;
            float v31 = 125.0;
            float v35 = 210.0;
            float v36 = 150.0;
            float v38 = 225.0;
            float v39 = 1.4;
            float v40 = 1.4;
            float v37 = 225.0;
            int v32 = 1125515264;
          }
          else
          {
            if (!v59 && !v58)
            {
              uint64_t v25 = 0;
              goto LABEL_94;
            }
            int v29 = 4;
            uint64_t v30 = 17179869190000;
            float v35 = 210.0;
            float v36 = 125.0;
            float v38 = 225.0;
            float v39 = 1.7;
            float v40 = 1.7;
            float v37 = 225.0;
            int v32 = 1123680256;
            float v31 = 125.0;
          }
        }
        goto LABEL_37;
      }
      uint64_t v30 = 0xFB400001794;
      int v29 = 1;
      float v31 = 110.0;
      int v32 = 1124204544;
      int v33 = 1127481344;
      float v34 = 80.0;
      float v35 = 200.0;
      float v36 = 150.0;
      float v37 = 212.0;
      float v38 = 240.0;
      float v39 = 1.95;
      goto LABEL_36;
    }
    uint64_t v25 = 0;
    *a5 = 0xFBC000017C0;
    if ((v28 - 49) <= 9 && v72 >= 0x41 && v72 <= 0x45)
    {
      unsigned int v52 = v72 - 65;
      int v53 = v28 - 44;
      if (((v72 - 65) & 0xFFFFFFFB) != 0) {
        int v53 = v19;
      }
      int v54 = v53 - 1;
      v55.i32[0] = dword_1DDC0BFA8[11 * v52 + v54];
      v55.i32[1] = dword_1DDC0C084[11 * v52 + v54];
      *(int32x2_t *)a4 = vcvt_s32_f32(vmla_f32((float32x2_t)0x42700000C2700000, (float32x2_t)vdup_n_s32(0x437A0000u), vcvt_f32_s32(v55)));
      *((void *)a4 + 1) = 0x7800000078;
      goto LABEL_93;
    }
  }
  else if (a3)
  {
    uint64_t v24 = a1;
    uint64_t v21 = 0;
    sub_1DDBBEFC0(v24, v7, 0, a4, a5);
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v21 = 0;
  }
LABEL_94:

  return v25;
}

void sub_1DDBBFA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

id sub_1DDBBFB04(uint64_t a1, unsigned int a2)
{
  id v3 = sub_1DDBC1BA4(a1);
  if (a2 >= objc_msgSend_length(v3, v4, v5, v6, v7) / 0xCuLL)
  {
    BOOL v10 = 0;
  }
  else
  {
    BOOL v10 = objc_msgSend_substringWithRange_(v3, v8, 12 * a2, 12, v9);
  }

  return v10;
}

void sub_1DDBBFB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDBBFB98(uint64_t a1, void *a2, unsigned int a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  BOOL v33 = sub_1DDB9FCD0(v6, @"D100", 1);
  BOOL v30 = sub_1DDB9FCD0(v6, @"D200", 1);
  BOOL v29 = sub_1DDB9FCD0(v6, @"D80", 1);
  BOOL v32 = sub_1DDB9FCD0(v6, @"D70", 1);
  BOOL v7 = sub_1DDB9FCD0(v6, @"D60", 1);
  BOOL v8 = sub_1DDB9FCD0(v6, @"D50", 1);
  BOOL v9 = sub_1DDB9FCD0(v6, @"D40", 1);
  BOOL v27 = sub_1DDB9FCD0(v6, @"D2", 1);
  BOOL v28 = sub_1DDB9FCD0(v6, @"D1X", 1);
  BOOL v10 = sub_1DDB9FCD0(v6, @"D1H", 1);
  BOOL v11 = sub_1DDB9FCD0(v6, @"D1", 1);
  BOOL v12 = sub_1DDB9FCD0(v6, @"P6000", 1);
  BOOL v13 = sub_1DDB9FCD0(v6, @"E8400", 1);
  BOOL v14 = sub_1DDB9FCD0(v6, @"E8700", 1);
  BOOL v15 = sub_1DDB9FCD0(v6, @"E8800", 1);
  if (v7 || v9)
  {
    *a5 = 0xA3800000F40;
    if (a3 <= 4)
    {
      int v16 = dword_1DDC0C160[a3];
      int v17 = dword_1DDC0C174[a3];
      int v18 = dword_1DDC0C188[a3];
      int v19 = &unk_1DDC0C19C;
LABEL_7:
      int v20 = v19[a3];
      *a4 = v16;
      a4[1] = v17;
      a4[2] = v18;
      a4[3] = v20;
      BOOL v21 = 1;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v32 || v33 || v8)
  {
    *a5 = 0x7DE00000BE0;
    if (a3 <= 4)
    {
      int v16 = dword_1DDC0C1B0[a3];
      int v17 = dword_1DDC0C1C4[a3];
      int v18 = dword_1DDC0C1D8[a3];
      int v19 = &unk_1DDC0C1EC;
      goto LABEL_7;
    }
    goto LABEL_22;
  }
  if (!v29 && !v30)
  {
    if (v13 || v14 || v15)
    {
      *a5 = 0x99600000CD0;
      if (a3 <= 4)
      {
        int v16 = dword_1DDC0C284[a3];
        int v17 = dword_1DDC0C298[a3];
        int v18 = dword_1DDC0C2AC[a3];
        int v19 = &unk_1DDC0C2C0;
        goto LABEL_7;
      }
    }
    else
    {
      if (!v28 && !v10 && (!v11 || v33))
      {
        if (v12)
        {
          BOOL v21 = 0;
          uint64_t v25 = 0xC5600001080;
        }
        else
        {
          uint64_t v38 = 0;
          long long v35 = 0u;
          int v36 = 0;
          *(void *)((char *)&v35 + 4) = 0xFFFFFD8000000280;
          long long v37 = xmmword_1DDC0BC70;
          if (v27)
          {
            *a5 = 0xB20000010C0;
            if (a3 < 0xB)
            {
              int v16 = dword_1DDC0C324[a3];
              int v17 = *((_DWORD *)&v35 + a3);
              int v18 = dword_1DDC0C350[a3];
              int v19 = &unk_1DDC0C37C;
              goto LABEL_7;
            }
            goto LABEL_22;
          }
          BOOL v21 = 0;
          uint64_t v25 = 0x7DE00000BE0;
        }
        *a5 = v25;
        goto LABEL_23;
      }
      *a5 = 0x7AA00000BBELL;
      if (a3 <= 4)
      {
        int v16 = dword_1DDC0C2D4[a3];
        int v17 = dword_1DDC0C2E8[a3];
        int v18 = dword_1DDC0C2FC[a3];
        int v19 = &unk_1DDC0C310;
        goto LABEL_7;
      }
    }
LABEL_22:
    BOOL v21 = 0;
    goto LABEL_23;
  }
  *a5 = 0xA2800000F30;
  uint64_t v38 = 0;
  long long v35 = 0u;
  int v36 = 0;
  *(void *)((char *)&v35 + 4) = 0xFFFFFDD000000230;
  long long v37 = xmmword_1DDC0BC80;
  BOOL v21 = a3 < 0xB;
  if (a3 <= 0xA)
  {
    int v22 = *((_DWORD *)&v35 + a3);
    int v23 = dword_1DDC0C22C[a3];
    int v24 = dword_1DDC0C258[a3];
    *a4 = dword_1DDC0C200[a3];
    a4[1] = v22;
    a4[2] = v23;
    a4[3] = v24;
  }
LABEL_23:

  return v21;
}

void sub_1DDBC0038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC0080(uint64_t a1, _DWORD *a2, unint64_t a3, unsigned int a4, unsigned __int8 a5)
{
  if (a3 < 0xC) {
    return 0;
  }
  uint64_t v18 = v5;
  uint64_t v19 = v6;
  BOOL v10 = a2 + 1;
  *(_DWORD *)int v16 = *a2;
  char v17 = 0;
  uint64_t result = atoi(v16);
  if (result >= 0xC9)
  {
    if (a4)
    {
      int v12 = byte_1DDC0C3A8[a5];
      int v13 = byte_1DDC0C3A8[((BYTE2(a4) ^ BYTE1(a4) ^ a4) ^ HIBYTE(a4)) + 256];
      unint64_t v14 = a3 - 4;
      int v15 = 96;
      do
      {
        v13 += v15 * v12;
        ++v15;
        *v10++ ^= v13;
        --v14;
      }
      while (v14);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id sub_1DDBC0148(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64x2_t v6 = vdupq_n_s64((unint64_t)a2);
  *(int8x8_t *)v6.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_s64(v6, (int64x2_t)xmmword_1DDC0BCA0), (int32x4_t)vshlq_s64(v6, (int64x2_t)xmmword_1DDC0BC90)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_s64(v6, (int64x2_t)xmmword_1DDC0BCC0), (int32x4_t)vshlq_s64(v6, (int64x2_t)xmmword_1DDC0BCB0))));
  objc_msgSend_stringWithFormat_(NSString, a2, @"%02X %02X %02X %02X %02X %02X %02X %02X", a4, a5, v6.u8[7], v6.u8[6], v6.u8[5], v6.u8[4], v6.u8[3], v6.u8[2], v6.u8[1], v6.u8[0]);
  BOOL v7 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  uint64_t v174 = 0;
  BOOL v8 = sub_1DDBE3DE4(@"nikon");
  int v13 = v8;
  if (v8)
  {
    uint64_t v163 = v7;
    uint64_t v18 = sub_1DDA83A80(v8, v7, v10, v11, v12);
    for (unint64_t i = 0; ; unint64_t i = v171 + 1)
    {
      unint64_t v171 = i;
      if (i >= objc_msgSend_count(v18, v14, v15, v16, v17)) {
        break;
      }
      int v23 = sub_1DDB66820(v18, (const char *)&v171, v20, v21, v22);
      if (objc_msgSend_count(v23, v24, v25, v26, v27) == 5)
      {
        __p[0] = 0;
        float v31 = sub_1DDB65E24(v23, (const char *)__p, v28, v29, v30);
        __p[0] = (void *)1;
        double v35 = sub_1DDB667D0(v23, (const char *)__p, v32, v33, v34);
        __p[0] = (void *)2;
        double v39 = sub_1DDB667D0(v23, (const char *)__p, v36, v37, v38);
        __p[0] = (void *)3;
        double v43 = sub_1DDB667D0(v23, (const char *)__p, v40, v41, v42);
        __p[0] = (void *)4;
        double v47 = sub_1DDB667D0(v23, (const char *)__p, v44, v45, v46);
        if (v31)
        {
          double v48 = v47;
          id v49 = v31;
          int v54 = (char *)objc_msgSend_UTF8String(v49, v50, v51, v52, v53);
          sub_1DDA1A880(v165, v54);
          if (SHIBYTE(v166) < 0)
          {
            sub_1DDA2639C(__p, v165[0], (unint64_t)v165[1]);
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)v165;
            uint64_t v168 = v166;
          }
          *(double *)&long long v169 = v35;
          *((double *)&v169 + 1) = v39;
          *(double *)&long long v170 = v43;
          *((double *)&v170 + 1) = v48;
          sub_1DDBB4C18(&v172, (long long *)__p);
          if (SHIBYTE(v168) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v166) < 0) {
            operator delete(v165[0]);
          }
        }
      }
    }

    BOOL v7 = v163;
  }
  uint64_t v55 = v172;
  if (v173 - v172 != 56)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v173 - v172) >> 3)) < 2)
    {
      id v56 = 0;
      goto LABEL_85;
    }
    unint64_t v57 = sub_1DDBA91F8(a1);
    BOOL v58 = sub_1DDBA1778(a1);
    BOOL v59 = sub_1DDA2E3A8(v58, (void *)*MEMORY[0x1E4F2F6D8], 0);

    BOOL v63 = sub_1DDA357A8(v57, (const char *)*MEMORY[0x1E4F2F850], v60, v61, v62);
    BOOL v67 = sub_1DDA357A8(v57, (const char *)*MEMORY[0x1E4F2F8B0], v64, v65, v66);
    BOOL v71 = sub_1DDA83A80(v59, (const char *)*MEMORY[0x1E4F2F700], v68, v69, v70);
    uint64_t v77 = v71;
    double v78 = 0.0;
    if (v71)
    {
      double v80 = 0.0;
      if (objc_msgSend_count(v71, v72, v73, v74, v75) == 4)
      {
        __p[0] = 0;
        double v78 = sub_1DDB667D0(v77, (const char *)__p, v79, v74, v75);
        __p[0] = (void *)1;
        double v80 = sub_1DDB667D0(v77, (const char *)__p, v81, v82, v83);
        __p[0] = (void *)2;
        sub_1DDB667D0(v77, (const char *)__p, v84, v85, v86);
        __p[0] = (void *)3;
        double v76 = sub_1DDB667D0(v77, (const char *)__p, v87, v88, v89);
      }
    }
    else
    {
      double v80 = 0.0;
    }
    uint64_t v90 = v172;
    if (*(char *)(v172 + 23) < 0) {
      uint64_t v90 = *(void *)v172;
    }
    int v95 = objc_msgSend_stringWithUTF8String_(NSString, v72, v90, v74, v75, v76);
    if (v63)
    {
      uint64_t v164 = v7;
      uint64_t v161 = v57;
      double v160 = v63;
      uint64_t v158 = v95;
      uint64_t v159 = v77;
      objc_msgSend_doubleValue(v63, v91, v92, v93, v94);
      long double v97 = v96;
      objc_msgSend_doubleValue(v67, v98, v99, v100, v101);
      double v103 = exp2(v102 * 0.5);
      int v108 = sub_1DDA49F48(0x6DB6DB6DB6DB6DB7 * ((v173 - v172) >> 3));
      uint64_t v110 = v172;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v173 - v172) >> 3)) >= 2)
      {
        double v156 = log(v97);
        uint64_t v111 = 0;
        unsigned int v112 = 0;
        double v113 = 999999999.0;
        unint64_t v114 = 1;
        double v162 = v103;
        while (1)
        {
          double v115 = (void **)(v110 + v111 + 56);
          if (*(char *)(v110 + v111 + 79) < 0)
          {
            double v117 = v113;
            sub_1DDA2639C(__p, *v115, *(void *)(v110 + v111 + 64));
            double v113 = v117;
          }
          else
          {
            long long v116 = *(_OWORD *)v115;
            uint64_t v168 = *(void *)(v110 + v111 + 72);
            *(_OWORD *)long long __p = v116;
          }
          long long v118 = *(_OWORD *)(v110 + v111 + 96);
          long long v169 = *(_OWORD *)(v110 + v111 + 80);
          long long v170 = v118;
          long long v119 = v169;
          long double v120 = *((double *)&v118 + 1);
          double v109 = *(double *)&v118;
          if ((v78 <= 0.0 || vabdd_f64(v78, *(double *)&v169) <= 0.9)
            && (v80 <= 0.0 || vabdd_f64(v80, *((double *)&v169 + 1)) <= 0.9)
            && v97 >= *(double *)&v169 + -0.9
            && v97 <= *((double *)&v169 + 1) + 0.9)
          {
            if (v103 <= 0.0)
            {
              double v130 = v113;
LABEL_60:
              if (v168 >= 0) {
                objc_msgSend_stringWithUTF8String_(NSString, v104, (uint64_t)__p, v106, v107);
              }
              else {
              char v134 = objc_msgSend_stringWithUTF8String_(NSString, v104, (uint64_t)__p[0], v106, v107);
              }
              if (v134) {
                objc_msgSend_addObject_(v108, v131, (uint64_t)v134, v132, v133);
              }

              double v113 = v130;
              goto LABEL_66;
            }
            if (v103 >= *(double *)&v170 + -0.15 && v103 <= *((double *)&v170 + 1) + 0.15)
            {
              if (*(double *)&v169 != *((double *)&v169 + 1) && *(double *)&v170 != *((double *)&v170 + 1))
              {
                double v157 = v113;
                double v123 = log(*(long double *)&v118);
                long double v124 = log(v120) - v123;
                double v125 = log(*((long double *)&v119 + 1));
                long double v126 = log(*(long double *)&v119);
                long double v127 = v123 + v124 / (v125 - v126) * (v156 - v126);
                double v103 = v162;
                double v109 = exp(v127);
                double v113 = v157;
              }
              double v128 = vabdd_f64(v103, v109);
              double v109 = v113 + 0.15;
              if (v128 <= v113 + 0.15)
              {
                if (v128 < v113 + -0.15)
                {
                  if (v168 >= 0) {
                    objc_msgSend_stringWithUTF8String_(NSString, v104, (uint64_t)__p, v106, v107);
                  }
                  else {
                  uint64_t v129 = objc_msgSend_stringWithUTF8String_(NSString, v104, (uint64_t)__p[0], v106, v107);
                  }

                  unsigned int v112 = (void *)v129;
                }
                double v130 = v128;
                double v103 = v162;
                goto LABEL_60;
              }
              double v103 = v162;
            }
          }
LABEL_66:
          if (SHIBYTE(v168) < 0)
          {
            double v135 = v113;
            operator delete(__p[0]);
            double v113 = v135;
          }
          ++v114;
          uint64_t v110 = v172;
          v111 += 56;
          if (v114 >= 0x6DB6DB6DB6DB6DB7 * ((v173 - v172) >> 3)) {
            goto LABEL_72;
          }
        }
      }
      unsigned int v112 = 0;
LABEL_72:
      BOOL v7 = v164;
      if (objc_msgSend_count(v108, v104, v105, v106, v107, v109))
      {
        objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v136, (uint64_t)v112, v137, v138);
        id v56 = (id)objc_claimAutoreleasedReturnValue();
        for (int j = 0; ; int j = (char *)__p[0] + 1)
        {
          __p[0] = j;
          if ((unint64_t)j >= objc_msgSend_count(v108, v139, v140, v141, v142)) {
            break;
          }
          uint64_t v147 = sub_1DDB65E24(v108, (const char *)__p, v144, v145, v146);
          if (objc_msgSend_length(v56, v148, v149, v150, v151))
          {
            if (!v112 || (objc_msgSend_isEqualToString_(v147, v152, (uint64_t)v112, v153, v154) & 1) == 0) {
              objc_msgSend_appendFormat_(v56, v152, @" or %@", v153, v154, v147);
            }
          }
          else
          {
            objc_msgSend_appendString_(v56, v152, (uint64_t)v147, v153, v154);
          }
        }
        unint64_t v57 = v161;
        BOOL v63 = v160;
        int v95 = v158;
        uint64_t v77 = v159;
        goto LABEL_84;
      }

      unint64_t v57 = v161;
      BOOL v63 = v160;
      int v95 = v158;
      uint64_t v77 = v159;
    }
    id v56 = v95;
LABEL_84:

    goto LABEL_85;
  }
  if (*(char *)(v172 + 23) < 0) {
    uint64_t v55 = *(void *)v172;
  }
  objc_msgSend_stringWithUTF8String_(NSString, v9, v55, v11, v12);
  id v56 = (id)objc_claimAutoreleasedReturnValue();
LABEL_85:

  __p[0] = &v172;
  sub_1DDBB5984((void ***)__p);

  return v56;
}

void sub_1DDBC0938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }

  long long __p = (void *)(v44 - 176);
  sub_1DDBB5984((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1DDBC0B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned int *)(a4 + 4);
  unint64_t v9 = *(unsigned __int16 *)(a4 + 2);
  if (v9 > 0x6F) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = qword_1DDC0C5C0[v9];
  }
  uint64_t v11 = v10 * v8;
  if ((unint64_t)(v10 * v8) <= 0x63)
  {
    LODWORD(v12) = *(_DWORD *)(a4 + 8);
    unsigned int v13 = bswap32(v12);
    uint64_t v12 = a6 ? v13 : v12;
    if (sub_1DDBA1314(a1, (uint64_t)v23, v11, a5, v12) == v11)
    {
      v23[v11] = 0;
      uint64_t v22 = objc_msgSend_stringWithUTF8String_(NSString, v14, (uint64_t)v23, v15, v16);
      int v19 = sub_1DDBBD578((uint64_t)v22, (const char *)off_1E6D06718, (uint64_t *)&v22, v17, v18);
      uint64_t v20 = sub_1DDBA175C(a3);
      uint64_t v21 = v22;
      sub_1DDBA4BE8(a1, @"{PictureStyle}", v20, v22, (float)v19, (float)v19);

      if (v19 == 11) {
        sub_1DDBA4B30(a1, @"Monochrome", 1);
      }
    }
  }
}

void sub_1DDBC0C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC0C94(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  if (*(_DWORD *)(a4 + 4))
  {
    uint64_t v12 = NSString;
    id v21 = v11;
    unsigned int v13 = sub_1DDBA175C(a3);
    uint64_t v17 = objc_msgSend_stringWithFormat_(v12, v14, @"%@/%@", v15, v16, v21, v13);

    unsigned int v18 = *(_DWORD *)(a4 + 8);
    unsigned int v19 = bswap32(v18);
    if (a6) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = v18;
    }
    sub_1DDBA5A38(a1, v17, word_1E6D06978, v20, a5, a6);

    id v11 = v21;
  }
}

void sub_1DDBC0D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC0D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a4 + 4) >= 3u)
  {
    int v5 = *(char *)(a4 + 8);
    int v6 = *(char *)(a4 + 9);
    int v7 = *(unsigned __int8 *)(a4 + 10);
    sub_1DDBA1778(a1);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    float v8 = (float)v5 * (float)v6;
    if (!v7) {
      float v8 = -0.0;
    }
    float v9 = (float)(char)v7;
    if (!v7) {
      float v9 = 6.0;
    }
    float v10 = v8 / v9;
    if (v10 == 0.0) {
      float v11 = 0.0;
    }
    else {
      float v11 = v10;
    }
    uint64_t v12 = sub_1DDBA17F8(a3);
    unsigned int v13 = sub_1DDBA175C(a3);
    *(float *)&double v14 = v11;
    unsigned int v19 = objc_msgSend_numberWithFloat_(NSNumber, v15, v16, v17, v18, v14);
    sub_1DDA784D0(v20, v12, v13, v19);
  }
}

void sub_1DDBC0EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unsigned int v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1DDBC0EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  size_t v6 = *(unsigned int *)(a4 + 4);
  if ((v6 - 16385) >= 0xFFFFC00A)
  {
    sub_1DDA1AB9C(&__p, v6);
    unsigned int v12 = *(_DWORD *)(a4 + 8);
    unsigned int v13 = bswap32(v12);
    if (a6) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v12;
    }
    uint64_t v15 = sub_1DDBA1314(a1, (uint64_t)__p, v35 - (unsigned char *)__p, a5, v14);
    uint64_t v16 = __p;
    if (v15 == v35 - (unsigned char *)__p)
    {
      uint64_t v17 = 0;
      int v18 = 0;
      do
        int v18 = (*((unsigned char *)__p + v17++) & 0xF) + 10 * v18;
      while (v17 != 4);
      if ((v18 - 100) <= 5)
      {
        int v19 = *((char *)__p + 10);
        if ((float)((float)v19 / -6.0) == 0.0) {
          float v20 = 0.0;
        }
        else {
          float v20 = (float)v19 / -6.0;
        }
        id v21 = sub_1DDBA1778(a1);
        uint64_t v22 = sub_1DDBA17F8(a3);
        int v23 = sub_1DDBA175C(a3);
        BOOL v24 = sub_1DDBA6568(v21, v22, v23);

        if (!v24)
        {
          uint64_t v25 = sub_1DDBA1778(a1);
          uint64_t v26 = sub_1DDBA17F8(a3);
          uint64_t v27 = sub_1DDBA175C(a3);
          *(float *)&double v28 = v20;
          uint64_t v33 = objc_msgSend_numberWithFloat_(NSNumber, v29, v30, v31, v32, v28);
          sub_1DDA784D0(v25, v26, v27, v33);
        }
      }
      uint64_t v16 = __p;
    }
    if (v16)
    {
      double v35 = v16;
      operator delete(v16);
    }
  }
}

void sub_1DDBC10B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v15 = v11;

  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_1DDBC1108(uint64_t a1, double result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a5 + 4) >= 4u)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
    unsigned int v11 = bswap32(v10);
    uint64_t v10 = a7 ? v11 : v10;
    if (sub_1DDBA1314(a1, (uint64_t)&v24, 32, a6, v10) == 32)
    {
      if (a7)
      {
        uint64_t v16 = *(unsigned int *)(a5 + 4);
        if (v16)
        {
          uint64_t v17 = (unsigned int *)&v24;
          do
          {
            *uint64_t v17 = bswap32(*v17);
            ++v17;
            --v16;
          }
          while (v16);
        }
      }
      LODWORD(v12) = DWORD1(v24);
      LODWORD(result) = v24;
      *(double *)&unint64_t v18 = (double)v12;
      double v19 = (double)*(unint64_t *)&result / *(double *)&v18;
      LODWORD(v13) = HIDWORD(v24);
      LODWORD(v18) = DWORD2(v24);
      *(double *)&unint64_t v20 = (double)v13;
      double v21 = (double)v18 / *(double *)&v20;
      LODWORD(v14) = DWORD1(v25);
      LODWORD(v20) = v25;
      *(double *)&unint64_t v22 = (double)v14;
      double v23 = (double)v20 / *(double *)&v22;
      LODWORD(v15) = HIDWORD(v25);
      LODWORD(v22) = DWORD2(v25);
      sub_1DDBA47CC(a1, v19, v21, v23, (double)v22 / (double)v15);
    }
  }
  return result;
}

void sub_1DDBC121C(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v9 = a2;
  uint64_t v10 = sub_1DDBA1778((uint64_t)a1);
  unsigned int v11 = sub_1DDB6DAE4(v10, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD68]);

  unsigned int v13 = 0;
  unsigned __int16 v14 = 0;
  uint64_t v42 = 0;
  long long v41 = 0uLL;
  uint64_t v15 = *(char *)(a4 + 8);
  int v16 = *(char *)(a4 + 9);
  unsigned int v17 = bswap32(*(unsigned __int16 *)(a4 + 10)) >> 16;
  if (a6) {
    __int16 v18 = v17;
  }
  else {
    __int16 v18 = *(_WORD *)(a4 + 10);
  }
  LODWORD(v19) = 11;
  do
  {
    LODWORD(v12) = sub_1DDBBFB98(v12, v11, v14, &v41, &v42);
    if (v12) {
      uint64_t v19 = v19;
    }
    else {
      uint64_t v19 = v13;
    }
    v14 += v12;
    unsigned int v13 = v14;
  }
  while (v19 > v14);
  if (v15 > 5) {
    unint64_t v20 = @" UNKNOWN AF Mode";
  }
  else {
    unint64_t v20 = off_1E6D06A80[v15];
  }
  unsigned int v21 = sub_1DDBA4174((uint64_t)a1, v20, v19, (void (*)(uint64_t, void))sub_1DDBC1554);
  unsigned int v22 = v21;
  if (v21)
  {
    unsigned __int16 v23 = v21 >= 9 ? v18 : (v18 | HIBYTE(v18)) & 0x7F;
    if ((v16 & 0x80000000) == 0)
    {
      if ((v16 & 0x40) != 0) {
        unint64_t v24 = 1 << v16;
      }
      else {
        unint64_t v24 = 0;
      }
      if ((v16 & 0x40) != 0) {
        unint64_t v25 = 0;
      }
      else {
        unint64_t v25 = 1 << v16;
      }
      if ((v15 & 0xFFFFFFFE) == 2 && sub_1DDB9FCD0(v11, @"D2", 1))
      {
        unint64_t v24 = 0;
        unint64_t v25 = 0;
      }
      sub_1DDBA96A8(a1, v23, 0, 0);
      uint64_t v26 = sub_1DDBA9554(a1, v25, v24, 0);
      unsigned __int16 v27 = 0;
      long long __p = 0;
      double v39 = 0;
      unint64_t v40 = 0;
      do
      {
        LOBYTE(v26) = sub_1DDBBFB98(v26, v11, v27, &v41, &v42);
        double v28 = v39;
        if ((unint64_t)v39 >= v40)
        {
          uint64_t v30 = (v39 - (unsigned char *)__p) >> 4;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 60) {
            sub_1DDA17F78();
          }
          uint64_t v32 = v40 - (void)__p;
          if ((uint64_t)(v40 - (void)__p) >> 3 > v31) {
            unint64_t v31 = v32 >> 3;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33) {
            uint64_t v26 = (uint64_t)sub_1DDA19838((uint64_t)&v40, v33);
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v34 = (char *)(v26 + 16 * v30);
          *(_OWORD *)uint64_t v34 = v41;
          uint64_t v36 = (char *)__p;
          double v35 = v39;
          uint64_t v37 = v34;
          if (v39 != __p)
          {
            do
            {
              *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
              v37 -= 16;
              v35 -= 16;
            }
            while (v35 != v36);
            double v35 = (char *)__p;
          }
          uint64_t v29 = v34 + 16;
          long long __p = v37;
          double v39 = v34 + 16;
          unint64_t v40 = v26 + 16 * v33;
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *(_OWORD *)double v39 = v41;
          uint64_t v29 = v28 + 16;
        }
        double v39 = v29;
        ++v27;
      }
      while (v22 > v27);
      sub_1DDBA94FC(a1, (uint64_t)&__p, 0);
      sub_1DDBA9530((uint64_t)a1, &v42, 0);
      if (__p)
      {
        double v39 = (char *)__p;
        operator delete(__p);
      }
    }
  }
}

void sub_1DDBC1508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBC1554(__CFString *result, unsigned int a2)
{
  if (result)
  {
    id v3 = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    uint64_t result = 0;
    if (v3) {
      BOOL v4 = a2 > 0xA;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4) {
      return off_1E6D06B18[(__int16)a2];
    }
  }
  return result;
}

void sub_1DDBC15E0(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10 = a2;
  unsigned int v11 = sub_1DDBA1778((uint64_t)a1);
  uint64_t v12 = sub_1DDB6DAE4(v11, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD68]);

  uint64_t v74 = (void *)v12;
  int v16 = objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v13, v12, v14, v15);
  uint64_t v82 = 0;
  unsigned int v17 = sub_1DDBC1BA4((uint64_t)a1);
  size_t v18 = *(unsigned int *)(a4 + 4);
  if (v18 >= 0xD)
  {
    sub_1DDA1AB9C(&v79, v18);
    unsigned int v19 = *(_DWORD *)(a4 + 8);
    unsigned int v20 = bswap32(v19);
    if (a6) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = v19;
    }
    uint64_t v25 = sub_1DDBA1314((uint64_t)a1, (uint64_t)v79, v80 - (unsigned char *)v79, a5, v21);
    uint64_t v26 = v79;
    if (v25 != v80 - (unsigned char *)v79) {
      goto LABEL_47;
    }
    unsigned int v27 = *((unsigned __int8 *)v79 + 5);
    int v28 = *((unsigned __int8 *)v79 + 6);
    uint64_t appended = objc_msgSend_appendString_(v16, v22, @" ", v23, v24);
    uint64_t v30 = sub_1DDBC1CA0(appended, v27);
    objc_msgSend_appendString_(v16, v31, (uint64_t)v30, v32, v33);

    double v35 = sub_1DDBC1CA0(v34, v27);
    sub_1DDBA4174((uint64_t)a1, v35, 0, (void (*)(uint64_t, void))sub_1DDBC1CC8);

    uint64_t v36 = sub_1DDBA1778((uint64_t)a1);
    uint64_t v37 = (void *)*MEMORY[0x1E4F2F6D8];
    uint64_t v38 = (void *)*MEMORY[0x1E4F2FC58];
    BOOL v39 = sub_1DDBA6568(v36, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58]);

    if (v39)
    {
      unint64_t v40 = sub_1DDBA1778((uint64_t)a1);
      uint64_t v44 = objc_msgSend_numberWithInt_(NSNumber, v41, v28 != 0, v42, v43);
      sub_1DDA784D0(v40, v37, v38, v44);
    }
    for (unsigned int i = 0; sub_1DDBBEFC0((uint64_t)a1, v16, (unsigned __int16)i, v81, &v82); ++i)
      ;
    uint64_t v26 = v79;
    if (i)
    {
      id v73 = v10;
      int v46 = *((unsigned __int8 *)v79 + 7);
      if (*((unsigned char *)v79 + 7))
      {
        unsigned int v47 = 0;
        char v48 = 0;
        int v49 = ((_BYTE)v46 - 1) & 7;
        int v50 = (unsigned __int16)((v46 - v49 + (((v46 - v49) & 0xE000u) >> 13)) >> 3);
        int v51 = 1 << v49;
        while (sub_1DDBB397C(v17, v47))
        {
          if (sub_1DDBB397C(v17, v47 + 6) - 48 == v50)
          {
            int v52 = sub_1DDBB397C(v17, v47 + 9);
            if (v51 == v52 + 16 * sub_1DDBB397C(v17, v47 + 8) - 816)
            {
              sub_1DDBA9554(a1, 1 << v48, 0, 1);
              break;
            }
          }
          v47 += 12;
          ++v48;
        }
      }
      unsigned int v53 = 0;
      char v54 = 0;
      unint64_t v55 = 0;
      while (1)
      {
        if (!sub_1DDBB397C(v17, v53))
        {
          sub_1DDBA96A8(a1, v55, 0, 1);
          unsigned __int16 v61 = 0;
          long long __p = 0;
          uint64_t v77 = 0;
          double v78 = 0;
          id v10 = v73;
          do
          {
            long long v75 = 0uLL;
            sub_1DDBBEFC0((uint64_t)a1, v16, v61, &v75, &v82);
            uint64_t v62 = v77;
            if (v77 >= v78)
            {
              uint64_t v64 = (v77 - (unsigned char *)__p) >> 4;
              unint64_t v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 60) {
                sub_1DDA17F78();
              }
              uint64_t v66 = v78 - (unsigned char *)__p;
              if ((v78 - (unsigned char *)__p) >> 3 > v65) {
                unint64_t v65 = v66 >> 3;
              }
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v67 = v65;
              }
              if (v67) {
                uint64_t v68 = (char *)sub_1DDA19838((uint64_t)&v78, v67);
              }
              else {
                uint64_t v68 = 0;
              }
              uint64_t v69 = &v68[16 * v64];
              *(_OWORD *)uint64_t v69 = v75;
              BOOL v71 = (char *)__p;
              uint64_t v70 = v77;
              unsigned int v72 = v69;
              if (v77 != __p)
              {
                do
                {
                  *((_OWORD *)v72 - 1) = *((_OWORD *)v70 - 1);
                  v72 -= 16;
                  v70 -= 16;
                }
                while (v70 != v71);
                uint64_t v70 = (char *)__p;
              }
              BOOL v63 = v69 + 16;
              long long __p = v72;
              uint64_t v77 = v69 + 16;
              double v78 = &v68[16 * v67];
              if (v70) {
                operator delete(v70);
              }
            }
            else
            {
              *(_OWORD *)uint64_t v77 = v75;
              BOOL v63 = v62 + 16;
            }
            uint64_t v77 = v63;
            ++v61;
          }
          while (i > v61);
          sub_1DDBA94FC(a1, (uint64_t)&__p, 1);
          sub_1DDBA9530((uint64_t)a1, &v82, 1);
          if (__p)
          {
            uint64_t v77 = (char *)__p;
            operator delete(__p);
          }
          uint64_t v26 = v79;
          goto LABEL_47;
        }
        int v56 = sub_1DDBB397C(v17, v53 + 6);
        int v57 = sub_1DDBB397C(v17, v53 + 9);
        int v58 = sub_1DDBB397C(v17, v53 + 8);
        unint64_t v59 = (v56 - 40);
        uint64_t v26 = v79;
        if (v59 >= v80 - (unsigned char *)v79) {
          break;
        }
        if (((v57 + 16 * v58 + 208) & *((unsigned __int8 *)v79 + v59)) != 0) {
          uint64_t v60 = 1 << v54;
        }
        else {
          uint64_t v60 = 0;
        }
        v55 |= v60;
        v53 += 12;
        ++v54;
      }
      id v10 = v73;
      if (v79) {
        goto LABEL_48;
      }
    }
    else
    {
LABEL_47:
      if (v26)
      {
LABEL_48:
        double v80 = v26;
        operator delete(v26);
      }
    }
  }
}

void sub_1DDBC1AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__CFString *sub_1DDBC1BA4(uint64_t a1)
{
  id v1 = sub_1DDBA1778(a1);
  BOOL v2 = sub_1DDB6DAE4(v1, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD68]);

  if (sub_1DDB9FCD0(v2, @"D7000", 1) || sub_1DDB9FCD0(v2, @"D600", 1))
  {
    id v3 = @"A01 = 1 10  A02 = 0 04  A03 = 0 80  B01 = 4 20  B02 = 4 04  B03 = 3 80  B04 = 3 10  B05 = 1 08  B06 = 0 02  B07 = 0 40  B08 = 2 01  B09 = 2 08  B10 = 2 40  B11 = 3 02  C01 = 4 10  C02 = 4 02  C03 = 3 40  C04 = 3 08  C05 = 1 04  C06 = 0 01  C07 = 0 20  C08 = 1 80  C09 = 2 04  C10 = 2 20  C11 = 3 01  D01 = 4 40  D02 = 4 08  D03 = 4 01  D04 = 3 20  D05 = 1 20  D06 = 0 08  D07 = 1 01  D08 = 2 02  D09 = 2 10  D10 = 2 80  D11 = 3 04  E01 = 1 40  E02 = 0 10  E03 = 1 02  ";
  }
  else
  {
    id v3 = @"A01 = 1 10  A02 = 0 04  A03 = 0 80  B01 = 4 20  B02 = 4 04  B03 = 3 80  B04 = 3 10  B05 = 1 08  B06 = 0 02  B07 = 0 40  B08 = 2 01  B09 = 2 08  B10 = 2 40  B11 = 3 02  C01 = 4 10  C02 = 4 02  C03 = 3 40  C04 = 3 08  C05 = 1 04  C06 = 0 01  C07 = 0 20  C08 = 1 80  C09 = 2 04  C10 = 2 20  C11 = 3 01  D01 = 4 40  D02 = 4 08  D03 = 4 01  D04 = 3 20  D05 = 1 20  D06 = 0 08  D07 = 1 01  D08 = 2 02  D09 = 2 10  D10 = 2 80  D11 = 3 04  E01 = 1 40  E02 = 0 10  E03 = 1 02  ";
    if (!sub_1DDB9FCD0(v2, @"D5200", 1) && !sub_1DDB9FCD0(v2, @"D5300", 1)) {
      id v3 = @"A01 = 5 20  A02 = 5 01  A03 = 4 08  A04 = 1 10  A05 = 0 04  A06 = 0 80  A07 = 2 02  A08 = 2 40  A09 = 3 08  B01 = 6 02  B02 = 5 10  B03 = 4 80  B04 = 4 04  B05 = 1 08  B06 = 0 02  B07 = 0 40  B08 = 2 01  B09 = 2 20  B10 = 3 04  B11 = 3 80  C01 = 6 01  C02 = 5 08  C03 = 4 40  C04 = 4 02  C05 = 1 04  C06 = 0 01  C07 = 0 20  C08 = 1 80  C09 = 2 10  C10 = 3 02  C11 = 3 40  D01 = 6 04  D02 = 5 40  D03 = 5 02  D04 = 4 10  D05 = 1 20  D06 = 0 08  D07 = 1 01  D08 = 2 04  D09 = 2 80  D10 = 3 10  D11 = 4 01  E01 = 5 80  E02 = 5 04  E03 = 4 20  E04 = 1 40  E05 = 0 10  E06 = 1 02  E07 = 2 08  E08 = 3 01  E09 = 3 20  ";
    }
  }

  return v3;
}

void sub_1DDBC1C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBC1CA0(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xC) {
    return @" UNKNOWN AF Mode";
  }
  else {
    return off_1E6D06AB0[(__int16)a2];
  }
}

id sub_1DDBC1CC8(void *a1, unsigned int a2)
{
  if (a1)
  {
    a1 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B060, 0);
    if (a1)
    {
      a1 = sub_1DDBBFB04((uint64_t)a1, a2);
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

void sub_1DDBC1D4C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10 = a2;
  size_t v11 = *(unsigned int *)(a4 + 4);
  if (v11 <= 0x4000)
  {
    sub_1DDA1AB9C(&v34, v11);
    unsigned int v12 = *(_DWORD *)(a4 + 8);
    unsigned int v13 = bswap32(v12);
    if (a6) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v12;
    }
    uint64_t v15 = sub_1DDBA1314(a1, v34, (uint64_t)&v35[-v34], a5, v14);
    int v16 = (char *)v34;
    if ((char *)v15 == &v35[-v34])
    {
      uint64_t v17 = *(unsigned int *)(a4 + 4);
      if (v17 >= 0x2D)
      {
        unint64_t v18 = v34 + v17;
        unsigned int v19 = (unsigned __int16 *)(v34 + 44);
        unsigned int v20 = (_DWORD *)(v34 + 22);
        uint64_t v21 = (void *)*MEMORY[0x1E4F2FD40];
        unsigned int v22 = (void *)*MEMORY[0x1E4F2FD70];
        do
        {
          unsigned int v23 = *(_DWORD *)((char *)v20 + 18);
          uint64_t v24 = v23 - 4;
          if (v23 >= 4 && v23 < *(_DWORD *)(a4 + 4)) {
            break;
          }
          uint64_t v26 = (char *)v19 + v24;
          if ((unint64_t)v19 + v24 > v18) {
            break;
          }
          if (*v20 == 1990472199)
          {
            int v27 = *v19 + 360 - 360 * ((11930465 * (unint64_t)(*v19 + 360)) >> 32);
            if (v27 == 90 || v27 == 270 || v27 == 180)
            {
              if (v27 == 90)
              {
                __int16 v28 = 6;
              }
              else if (v27 == 180)
              {
                __int16 v28 = 3;
              }
              else
              {
                __int16 v28 = 8;
              }
              uint64_t v29 = sub_1DDBA1778(a1);
              uint64_t v33 = objc_msgSend_numberWithShort_(NSNumber, v30, v28, v31, v32);
              sub_1DDA784D0(v29, v21, v22, v33);
            }
          }
          unsigned int v19 = (unsigned __int16 *)(v26 + 22);
          unsigned int v20 = v26;
        }
        while ((unint64_t)(v26 + 22) < v18);
        int v16 = (char *)v34;
      }
    }
    if (v16)
    {
      double v35 = v16;
      operator delete(v16);
    }
  }
}

void sub_1DDBC1F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DDBC1F78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v9 = a2;
  int v10 = *(_DWORD *)(a4 + 4);
  if ((v10 - 1) > 1) {
    goto LABEL_51;
  }
  LODWORD(v11) = *(unsigned __int16 *)(a4 + 8);
  unsigned int v12 = bswap32(v11) >> 16;
  if (a6) {
    LOWORD(v11) = v12;
  }
  uint64_t v13 = (unsigned __int16)v11;
  if ((_WORD)v11) {
    uint64_t v11 = (unsigned __int16)v11;
  }
  else {
    uint64_t v11 = -1;
  }
  if (v10 == 1) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = -1;
  }
  if (v10 == 1) {
    uint64_t v15 = v11;
  }
  else {
    uint64_t v15 = -1;
  }
  if (v10 == 2)
  {
    unsigned int v16 = *(unsigned __int16 *)(a4 + 10);
    unsigned int v17 = bswap32(v16) >> 16;
    if (a6) {
      LOWORD(v16) = v17;
    }
    BOOL v18 = v13 >= 2 || (unsigned __int16)v16 == 0;
    uint64_t v14 = (unsigned __int16)v16;
    if (!v18) {
      uint64_t v15 = (unsigned __int16)v16;
    }
  }
  else
  {
    uint64_t v13 = -1;
  }
  BOOL v19 = v14 == 6400 || v14 == 0;
  unsigned int v20 = (void **)MEMORY[0x1E4F2FC48];
  if (v19)
  {
    uint64_t v21 = sub_1DDBA1778(a1);
    unsigned int v22 = sub_1DDB6DAE4(v21, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD68]);

    if (sub_1DDB9FCD0(v22, @"P7000", 1))
    {
      unsigned int v23 = sub_1DDBA91F8(a1);
      uint64_t v24 = *MEMORY[0x1E4F2F878];
      __int16 v28 = sub_1DDA83A80(v23, (const char *)*MEMORY[0x1E4F2F878], v25, v26, v27);

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if (objc_msgSend_count(v28, v29, v30, v31, v32))
        {
          uint64_t v76 = 0;
          if (!sub_1DDB66788(v28, (const char *)&v76, v33, v34, v35))
          {
            if (!v14) {
              uint64_t v14 = 6400;
            }
            uint64_t v36 = sub_1DDBA5730(a1, 0);
            objc_msgSend_removeObjectForKey_(v36, v37, v24, v38, v39);

            uint64_t v15 = v14;
          }
        }
      }
    }
    goto LABEL_38;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
LABEL_38:
    unint64_t v40 = sub_1DDBA1778(a1);
    sub_1DDBA6668(v40, *v20, (void *)*MEMORY[0x1E4F2FC60]);

    int v41 = 1;
    goto LABEL_39;
  }
  int v41 = 0;
  uint64_t v14 = -1;
LABEL_39:
  if (v15 >= 1)
  {
    uint64_t v42 = sub_1DDBA5730(a1, 0);
    uint64_t v43 = (void *)*MEMORY[0x1E4F2F878];
    BOOL v44 = sub_1DDA2E4E0(v42, (void *)*MEMORY[0x1E4F2F878]);

    if (!v44)
    {
      uint64_t v45 = sub_1DDBA5730(a1, 1);
      int v46 = sub_1DDADAF54(v45, v43);
      int v50 = objc_msgSend_numberWithInt_(NSNumber, v47, v15, v48, v49);
      objc_msgSend_addObject_(v46, v51, (uint64_t)v50, v52, v53);
    }
  }
  char v54 = sub_1DDBA1778(a1);
  unint64_t v55 = *v20;
  int v56 = (void *)*MEMORY[0x1E4F2FC60];
  BOOL v57 = sub_1DDBA6568(v54, *v20, (void *)*MEMORY[0x1E4F2FC60]);

  if (!v57)
  {
    if ((v13 & 0x8000000000000000) == 0)
    {
      int v58 = sub_1DDBA1778(a1);
      unint64_t v59 = sub_1DDBB899C(v58, v55, v56);

      if (v59)
      {
        BOOL v63 = objc_msgSend_numberWithInt_(NSNumber, v60, v13, v61, v62);
        objc_msgSend_addObject_(v59, v64, (uint64_t)v63, v65, v66);
      }
    }
    if (v41)
    {
      unint64_t v67 = sub_1DDBA1778(a1);
      uint64_t v68 = sub_1DDBB899C(v67, v55, v56);

      if (v68)
      {
        unsigned int v72 = objc_msgSend_numberWithInt_(NSNumber, v69, v14, v70, v71);
        objc_msgSend_addObject_(v68, v73, (uint64_t)v72, v74, v75);
      }
    }
  }
LABEL_51:
}

void sub_1DDBC2314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC23C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10 = a2;
  unsigned int v11 = *(_DWORD *)(a4 + 4);
  if (v11 < 4) {
    goto LABEL_54;
  }
  unsigned int v12 = *(_DWORD *)(a4 + 8);
  unsigned int v13 = bswap32(v12);
  if (a6) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = v12;
  }
  unsigned __int8 v56 = 0;
  if (sub_1DDBA1314(a1, (uint64_t)&v56, 1, a5, v14) != 1)
  {
    uint64_t v18 = -1;
    uint64_t v19 = -1;
    goto LABEL_45;
  }
  float v15 = 1.0;
  int v16 = v56;
  while (1)
  {
    while (1)
    {
      while (v16 > 0x43u)
      {
        if (v16 > 0x7Bu)
        {
          if (v16 == 124)
          {
            int v16 = 0;
            float v17 = 4000.0;
            goto LABEL_25;
          }
          if (v16 != 140) {
            goto LABEL_28;
          }
          int v16 = 0;
          float v15 = v15 * 10000.0;
          unsigned __int8 v56 = 0;
        }
        else
        {
          if (v16 == 68)
          {
            int v16 = 0;
            float v17 = 160.0;
          }
          else
          {
            if (v16 != 72) {
              goto LABEL_28;
            }
            int v16 = 0;
            float v17 = 200.0;
          }
LABEL_25:
          float v15 = v15 * v17;
          unsigned __int8 v56 = 0;
        }
      }
      if (v16 > 0x3Bu)
      {
        if (v16 == 60)
        {
          int v16 = 0;
          float v17 = 100.0;
        }
        else
        {
          if (v16 != 64) {
            goto LABEL_28;
          }
          int v16 = 0;
          float v17 = 125.0;
        }
        goto LABEL_25;
      }
      if (v16 != 36) {
        break;
      }
      int v16 = 0;
      float v15 = v15 * 25.0;
      unsigned __int8 v56 = 0;
    }
    if (v16 == 48)
    {
      int v16 = 0;
      float v17 = 50.0;
      goto LABEL_25;
    }
    if (!(_BYTE)v16) {
      break;
    }
LABEL_28:
    if (v16 < 0x49u)
    {
      if (v16 > 0x23u)
      {
        float v15 = v15 * 1.0595;
        unsigned __int8 v56 = --v16;
      }
      else
      {
        v16 += 12;
        unsigned __int8 v56 = v16;
        float v15 = v15 * 0.5;
      }
    }
    else
    {
      v16 -= 12;
      unsigned __int8 v56 = v16;
      float v15 = v15 + v15;
    }
  }
  if ((v11 & 0xFFFE) >= 6 && (__int16 v55 = 0, sub_1DDBA1314(a1, (uint64_t)&v55, 2, a5, (v14 + 4)) == 2))
  {
    __int16 v20 = v55;
    if (a6) {
      __int16 v20 = v55 << 8;
    }
    if ((v20 & 0x300) == 0x100) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = -1;
    }
  }
  else
  {
    uint64_t v18 = -1;
  }
  uint64_t v19 = llroundf(v15);
  if (v19 >= 1)
  {
    uint64_t v21 = sub_1DDBA5730(a1, 0);
    unsigned int v22 = (void *)*MEMORY[0x1E4F2F878];
    BOOL v23 = sub_1DDA2E4E0(v21, (void *)*MEMORY[0x1E4F2F878]);

    if (!v23)
    {
      uint64_t v24 = sub_1DDBA5730(a1, 1);
      uint64_t v25 = sub_1DDADAF54(v24, v22);
      uint64_t v29 = objc_msgSend_numberWithInt_(NSNumber, v26, v19, v27, v28);
      objc_msgSend_addObject_(v25, v30, (uint64_t)v29, v31, v32);
    }
  }
LABEL_45:
  uint64_t v33 = sub_1DDBA1778(a1);
  uint64_t v34 = (void *)*MEMORY[0x1E4F2FC48];
  uint64_t v35 = (void *)*MEMORY[0x1E4F2FC60];
  BOOL v36 = sub_1DDBA6568(v33, (void *)*MEMORY[0x1E4F2FC48], (void *)*MEMORY[0x1E4F2FC60]);

  if (!v36)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      uint64_t v37 = sub_1DDBA1778(a1);
      uint64_t v38 = sub_1DDBB899C(v37, v34, v35);

      if (v38)
      {
        uint64_t v42 = objc_msgSend_numberWithInt_(NSNumber, v39, v18, v40, v41);
        objc_msgSend_addObject_(v38, v43, (uint64_t)v42, v44, v45);
      }
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      int v46 = sub_1DDBA1778(a1);
      unsigned int v47 = sub_1DDBB899C(v46, v34, v35);

      if (v47)
      {
        int v51 = objc_msgSend_numberWithInt_(NSNumber, v48, v19, v49, v50);
        objc_msgSend_addObject_(v47, v52, (uint64_t)v51, v53, v54);
      }
    }
  }
LABEL_54:
}

void sub_1DDBC27A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC2828(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  float v8 = operator new(0xE0uLL);
  sub_1DDBC28B4(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBC28A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDBC28B4(void *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F398B088;
  sub_1DDBAA64C((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = &unk_1F398AF90;
  return a1;
}

void sub_1DDBC2920(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBC2934(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398B088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBC2954(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398B088;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBC29A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

uint64_t sub_1DDBC29D0(uint64_t a1, int a2, uint64_t *a3)
{
  int v5 = (void *)sub_1DDBF0D7C(a1, a2);
  *int v5 = &unk_1F398B0D8;
  v5[6] = 0;
  size_t v6 = (void **)(v5 + 6);
  v5[7] = 0;
  v5[8] = 0;
  *(_DWORD *)(a1 + 12) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1DDA19EC8(*a3);
  int v7 = sub_1DDA19EC8(*a3);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      __int16 v9 = sub_1DDA19E68(*a3);
      __int16 v10 = v9;
      unsigned int v12 = *(char **)(a1 + 56);
      unint64_t v11 = *(void *)(a1 + 64);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = (char *)*v6;
        uint64_t v15 = v12 - (unsigned char *)*v6;
        if (v15 <= -3) {
          sub_1DDA17F78();
        }
        uint64_t v16 = v15 >> 1;
        unint64_t v17 = v11 - (void)v14;
        if (v17 <= (v15 >> 1) + 1) {
          unint64_t v18 = v16 + 1;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v17 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v19 = v18;
        }
        if (v19)
        {
          __int16 v20 = (char *)sub_1DDA1AD0C(a1 + 64, v19);
          uint64_t v14 = *(char **)(a1 + 48);
          unsigned int v12 = *(char **)(a1 + 56);
        }
        else
        {
          __int16 v20 = 0;
        }
        uint64_t v21 = &v20[2 * v16];
        *(_WORD *)uint64_t v21 = v10;
        unsigned int v13 = v21 + 2;
        while (v12 != v14)
        {
          __int16 v22 = *((_WORD *)v12 - 1);
          v12 -= 2;
          *((_WORD *)v21 - 1) = v22;
          v21 -= 2;
        }
        *(void *)(a1 + 48) = v21;
        *(void *)(a1 + 56) = v13;
        *(void *)(a1 + 64) = &v20[2 * v19];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_WORD *)unsigned int v12 = v9;
        unsigned int v13 = v12 + 2;
      }
      *(void *)(a1 + 56) = v13;
    }
  }
  return a1;
}

void sub_1DDBC2B80(_Unwind_Exception *exception_object)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDBC2BAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v6 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5);
  __int16 v10 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v7, *(unsigned int *)(a1 + 12), v8, v9);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, @"Top", v12);

  uint64_t v16 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v13, *(unsigned int *)(a1 + 16), v14, v15);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, @"Left", v18);

  __int16 v22 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v19, *(unsigned int *)(a1 + 20), v20, v21);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, @"Bottom", v24);

  uint64_t v28 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v25, *(unsigned int *)(a1 + 24), v26, v27);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, @"mRight", v30);

  uint64_t v34 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v31, *(unsigned int *)(a1 + 28), v32, v33);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, @"Plane", v36);

  uint64_t v40 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v37, *(unsigned int *)(a1 + 32), v38, v39);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, @"Planes", v42);

  int v46 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v43, *(unsigned int *)(a1 + 36), v44, v45);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, @"RowPitch", v48);

  uint64_t v52 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v49, *(unsigned int *)(a1 + 40), v50, v51);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, @"ColPitch", v54);

  uint64_t v62 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v55, v56, v57, v58);
  BOOL v63 = *(unsigned __int16 **)(a1 + 48);
  uint64_t v64 = *(unsigned __int16 **)(a1 + 56);
  while (v63 != v64)
  {
    uint64_t v65 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v59, *v63, v60, v61);
    objc_msgSend_addObject_(v62, v66, (uint64_t)v65, v67, v68);

    ++v63;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v62, @"Table", v61);
  uint64_t v69 = [RAWOpcodeMapTable alloc];
  id v73 = objc_msgSend_initWithArguments_(v69, v70, (uint64_t)v6, v71, v72);

  return v73;
}

void sub_1DDBC2DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1DDBC2E3C(void *a1)
{
  *a1 = &unk_1F398B0D8;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1DDBC2E8C(void *a1)
{
  *a1 = &unk_1F398B0D8;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBC2EFC()
{
  return 7;
}

void sub_1DDBC2F04(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    unint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v11) {
      sub_1DDBC51B4((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC2FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC2FE4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    unint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v11) {
      sub_1DDBC690C((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC30B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC30C4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = a2;
  if (a1)
  {
    __int16 v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v10) {
      sub_1DDBC5BE4(v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBC3180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC3194(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = a2;
  if (a1)
  {
    __int16 v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v10) {
      sub_1DDBC5CBC(v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBC3250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC3264(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12 = a2;
  if (a1)
  {
    __int16 v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v10) {
      sub_1DDBC5D94(v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBC3320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC3334(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v11) {
      sub_1DDBC539C((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC33FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC3410(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    __int16 v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v10) {
      sub_1DDBC5AA4((uint64_t)v10, v11, a3, a4, v12, a6);
    }
  }
}

void sub_1DDBC34C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC34DC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v11) {
      sub_1DDBC6470((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC35A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC35BC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v11) {
      sub_1DDBC6744((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC3688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC369C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v11) {
      sub_1DDBC5E6C(v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC3768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC377C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v11) {
      sub_1DDBC5794((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC3848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC385C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v11) {
      sub_1DDBC6AE4((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC3924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC3938(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v9 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v9) {
      sub_1DDBC5F54(v9, v12, v10, a4, v11, a6);
    }
  }
}

void sub_1DDBC39EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC3A00(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (v11) {
      sub_1DDBC50A4((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC3AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1DDBC3ADC(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 >= 4)
  {
    int v2 = *a1;
    if (v2 != 77) {
      return v2 == 73 && a1[1] == 73 && (a1[2] == 82 && a1[3] == 79 || a1[2] == 82 && a1[3] == 83);
    }
    if (a1[1] == 77 && a1[2] == 79 && a1[3] == 82) {
      return 1;
    }
  }
  return 0;
}

BOOL sub_1DDBC3B6C(uint64_t *a1)
{
  int v4 = 0;
  sub_1DDA1A94C(v5, a1, (uint64_t)&v4, 0);
  int v4 = 0;
  BOOL v2 = (*(unsigned int (**)(uint64_t, int *, uint64_t))(*(void *)*a1 + 32))(*a1, &v4, 4) == 4
    && sub_1DDBC3ADC((unsigned __int8 *)&v4, 4uLL);
  sub_1DDA1AA18(v5);
  return v2;
}

void sub_1DDBC3C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DDBC3C24(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBC6C54(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBC3C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC3CB8(uint64_t a1, int a2)
{
  BOOL v3 = sub_1DDBA7814(a1, a2);
  unsigned int v4 = a2 == 21330 || v3;
  if (a2 == 20306) {
    return 1;
  }
  else {
    return v4;
  }
}

__CFString *sub_1DDBC3CF4()
{
  return @"{MakerOlympus}";
}

void sub_1DDBC3D00(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  size_t v6 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v7, @"IFD0/%@", v8, v9, *MEMORY[0x1E4F2FD70]);
  uint64_t v10 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v14 = sub_1DDA357A8(v6, v10, v11, v12, v13);

  uint64_t v81 = v14;
  int v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  if ((v19 - 9) >= 0xFFFFFFF8) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  if (!v14) {
    int v20 = v19;
  }
  int v79 = v20;
  uint64_t v21 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v22, @"IFD0/Exif/Makernote/OlympusCameraSettings/%@", v23, v24, @"PreviewImageValid");
  uint64_t v25 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v29 = sub_1DDA357A8(v21, v25, v26, v27, v28);

  uint64_t v30 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v31, @"IFD0/Exif/Makernote/OlympusCameraSettings/%@", v32, v33, @"PreviewImageOffset");
  uint64_t v34 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v38 = sub_1DDA357A8(v30, v34, v35, v36, v37);

  double v80 = (void *)v38;
  uint64_t v39 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v40, @"IFD0/Exif/Makernote/OlympusCameraSettings/%@", v41, v42, @"PreviewImageLength");
  uint64_t v43 = (char *)objc_claimAutoreleasedReturnValue();
  unsigned int v47 = sub_1DDA357A8(v39, v43, v44, v45, v46);

  uint64_t v48 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v49, @"IFD0/Exif/Makernote/%@/Offset", v50, v51, @"JPEGThumbnail");
  uint64_t v52 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v56 = sub_1DDA357A8(v48, v52, v53, v54, v55);

  uint64_t v57 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v58, @"IFD0/Exif/Makernote/%@/Length", v59, v60, @"JPEGThumbnail");
  uint64_t v61 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v65 = sub_1DDA357A8(v57, v61, v62, v63, v64);

  memset(v88, 0, sizeof(v88));
  sub_1DDBA8EB8(a1, a2, &v87);
  if (v29 && objc_msgSend_intValue(v29, v66, v67, v68, v69) && v80 && v47)
  {
    LODWORD(v83) = objc_msgSend_intValue(v80, v66, v67, v68, v69);
    unsigned int v84 = objc_msgSend_intValue(v47, v71, v72, v73, v74);
    sub_1DDA1B3CC(&v85, &v84);
    double v70 = sub_1DDB9FD50(a1, (int *)&v83, (unsigned int *)&v85, v79, &v86);
    if (!v56) {
      goto LABEL_15;
    }
  }
  else
  {
    long long v86 = 0uLL;
    if (!v56) {
      goto LABEL_15;
    }
  }
  if (v65)
  {
    int v85 = objc_msgSend_intValue(v56, v66, v67, v68, v69, v70);
    unsigned int v82 = objc_msgSend_intValue(v65, v75, v76, v77, v78);
    sub_1DDA1B3CC(&v84, &v82);
    sub_1DDB9FD50(a1, &v85, &v84, v79, &v83);
    goto LABEL_16;
  }
LABEL_15:
  long long v83 = 0uLL;
LABEL_16:
  if ((void)v87) {
    sub_1DDA480D4((uint64_t *)v88, &v87);
  }
  if ((void)v86) {
    sub_1DDA480D4((uint64_t *)v88, &v86);
  }
  if ((void)v83) {
    sub_1DDA480D4((uint64_t *)v88, &v83);
  }
  sub_1DDBA0184(v88, a2, a3);
  if (*((void *)&v83 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v83 + 1));
  }
  if (*((void *)&v86 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v86 + 1));
  }
  if (*((void *)&v87 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v87 + 1));
  }
  *(void *)&long long v87 = v88;
  sub_1DDA18270((void ***)&v87);
}

void sub_1DDBC40BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,std::__shared_weak_count *a21,char a22)
{
  if (a21) {
    sub_1DDA18310(a21);
  }
  a20 = (void **)&a22;
  sub_1DDA18270(&a20);

  _Unwind_Resume(a1);
}

void sub_1DDBC41FC(uint64_t a1)
{
  sub_1DDBC44E8(a1, (void *)*MEMORY[0x1E4F2F7D8]);
  sub_1DDBC44E8(a1, (void *)*MEMORY[0x1E4F2F8F0]);
  sub_1DDBC44E8(a1, (void *)*MEMORY[0x1E4F2F918]);
  BOOL v2 = sub_1DDBA1778(a1);
  BOOL v3 = sub_1DDBA64D4(v2, @"{PictStyleSetting}", @"PictureStyle");

  if (objc_msgSend_count(v3, v4, v5, v6, v7))
  {
    uint64_t v29 = 0;
    int v11 = sub_1DDB66788(v3, (const char *)&v29, v8, v9, v10);
    int v12 = v11;
    switch(v11)
    {
      case 1:
        uint64_t v13 = @"Vivid";
        break;
      case 2:
        uint64_t v13 = @"Natural";
        break;
      case 3:
        uint64_t v13 = @"Muted";
        break;
      case 4:
        uint64_t v13 = @"Portrait";
        break;
      default:
        uint64_t v15 = @"Sepia";
        if (v11 != 512) {
          uint64_t v15 = 0;
        }
        if (v11 == 256) {
          uint64_t v13 = @"Monotone";
        }
        else {
          uint64_t v13 = v15;
        }
        break;
    }
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictureStyle", v13, (float)v11, (float)v11);
    BOOL v14 = v12 == 512 || v12 == 256;
  }
  else
  {
    BOOL v14 = 0;
  }
  uint64_t v17 = sub_1DDBA1778(a1);
  uint64_t v18 = sub_1DDA2E3A8(v17, @"{PictStyleSetting}", 0);

  if (sub_1DDA2E4E0(v18, @"ColorTone"))
  {
    int v22 = sub_1DDA2E1C4(v18, (const char *)@"ColorTone", v19, v20, v21);
    if (v22 > 5) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = off_1E6D06B98[v22];
    }
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"ColorTone", v23, (float)v22, (float)v22);
  }
  if (sub_1DDA2E4E0(v18, @"FilterEffect"))
  {
    int v27 = sub_1DDA2E1C4(v18, (const char *)@"FilterEffect", v24, v25, v26);
    if (v27 > 5) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = off_1E6D06BC8[v27];
    }
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"FilterEffect", v28, (float)v27, (float)v27);
  }
  sub_1DDBA4B30(a1, @"Monochrome", v14);
}

void sub_1DDBC4480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC44CC()
{
  JUMPOUT(0x1DDBC44C4);
}

void sub_1DDBC44E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = sub_1DDBA1778(a1);
  uint64_t v5 = sub_1DDBA64D4(v4, @"{PictStyleNormalized}", v3);

  uint64_t v6 = sub_1DDBA1778(a1);
  uint64_t v7 = sub_1DDBA64D4(v6, @"{PictStyleSetting}", v3);

  if (v5)
  {
    BOOL v12 = (unint64_t)objc_msgSend_count(v5, v8, v9, v10, v11) > 2;
    if (v7)
    {
LABEL_3:
      BOOL v13 = (unint64_t)objc_msgSend_count(v7, v8, v9, v10, v11) > 1;
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v12 = 0;
    if (v7) {
      goto LABEL_3;
    }
  }
  BOOL v13 = 0;
LABEL_6:
  float v14 = 0.0;
  if (v12)
  {
    uint64_t v19 = 2;
    float v14 = sub_1DDBC46A8(v5, (const char *)&v19, v9, v10, v11);
  }
  if (v13)
  {
    uint64_t v19 = 1;
    float v15 = sub_1DDBC46A8(v7, (const char *)&v19, v9, v10, v11);
    float v16 = v15;
  }
  else
  {
    float v16 = 0.0;
    float v15 = v14;
    if (!v12) {
      goto LABEL_18;
    }
  }
  if (v12 && !v13) {
    float v17 = v14;
  }
  else {
    float v17 = v16;
  }
  if (v12) {
    float v18 = v14;
  }
  else {
    float v18 = v15;
  }
  sub_1DDBA4BE8(a1, @"{PictureStyle}", v3, 0, v17, v18);
LABEL_18:
}

void sub_1DDBC4658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC4694()
{
  JUMPOUT(0x1DDBC4688);
}

void sub_1DDBC46A0()
{
}

float sub_1DDBC46A8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = sub_1DDB6745C(a1, a2, a3, a4, a5);
  objc_msgSend_floatValue(v5, v6, v7, v8, v9);
  float v11 = v10;

  return v11;
}

void sub_1DDBC46E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC46F8(uint64_t a1)
{
  BOOL v2 = sub_1DDBA1778(a1);
  sub_1DDB6DAE4(v2, (void *)*MEMORY[0x1E4F2F800], @"LensModel");
  id v4 = (id)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    id v3 = sub_1DDBA1778(a1);
    sub_1DDBA6668(v3, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F708]);
  }
  sub_1DDBA7974(a1);
}

void sub_1DDBC47A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC47D4(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v19[2] = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  uint64_t v18 = 0;
  v19[0] = 0;
  *(void *)((char *)v19 + 5) = 0;
  if (sub_1DDBA1314((uint64_t)a1, (uint64_t)&v18, 20, a5, a3) == 20)
  {
    if (v18 == 1297697871 && WORD2(v18) == 80)
    {
      if ((a7 & 1) == 0)
      {
        uint64_t v15 = a3 + 8;
        float v14 = (unsigned __int16 *)&unk_1F398B110;
        goto LABEL_11;
      }
    }
    else if (v18 == 0x5355504D594C4FLL)
    {
      a5 += a3;
      float v14 = (unsigned __int16 *)&unk_1F398B200;
      uint64_t v15 = 12;
LABEL_11:
      sub_1DDBA5A38(a1, v12, v14, v15, a5, a6);
      (*(void (**)(unsigned char *))(*(void *)a1 + 160))(a1);
      uint64_t v16 = 1;
      goto LABEL_12;
    }
  }
  uint64_t v16 = 0;
LABEL_12:

  return v16;
}

void sub_1DDBC4928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC4940(uint64_t a1)
{
  BOOL v2 = sub_1DDBA1778(a1);
  id v3 = (void *)*MEMORY[0x1E4F2F7C0];
  BOOL v4 = sub_1DDBA6568(v2, @"{PictStyleSetting}", (void *)*MEMORY[0x1E4F2F7C0]);

  if (v4)
  {
    uint64_t v5 = sub_1DDBA1778(a1);
    unsigned int v6 = sub_1DDBA65E8(v5, @"{PictStyleSetting}", v3);

    if (v6 < 0x100) {
      return v6 + 1;
    }
    else {
      return 0xFFFFLL;
    }
  }
  else
  {
    uint64_t v8 = sub_1DDBA91F8(a1);
    BOOL v9 = sub_1DDA2E4E0(v8, v3);

    if (v9)
    {
      float v10 = sub_1DDBA91F8(a1);
      uint64_t v7 = sub_1DDA2E1C4(v10, (const char *)v3, v11, v12, v13);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

void sub_1DDBC4A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC4A4C(uint64_t a1)
{
  sub_1DDBC41FC(a1);
  BOOL v2 = sub_1DDBA1778(a1);
  sub_1DDA2E3A8(v2, @"{PictureStyle}", 0);
  id v15 = (id)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    id v3 = sub_1DDBA1778(a1);
    BOOL v4 = sub_1DDBA6568(v3, @"{PictureStyle}", @"Monochrome");

    if (!v4) {
      sub_1DDBA4B30(a1, @"Monochrome", 0);
    }
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    if ((v5 & 0x80000000) == 0)
    {
      unsigned int v6 = sub_1DDBA4D7C(a1, v5);
      sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictStyleColorSpace", v6, (float)v5, (float)v5);
    }
  }
  uint64_t v7 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v7, v8, @"{PictStyleSetting}", v9, v10);

  uint64_t v11 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v11, v12, @"{PictStyleNormalized}", v13, v14);
}

void sub_1DDBC4BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC4C1C(uint64_t a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a2;
  if (v6)
  {
    uint64_t v7 = (void *)MEMORY[0x1E4F28E78];
    uint64_t v8 = objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E4F28B88], v2, v3, v4, v5);
    uint64_t v12 = objc_msgSend_stringByTrimmingCharactersInSet_(v6, v9, (uint64_t)v8, v10, v11);
    uint64_t v16 = objc_msgSend_stringWithString_(v7, v13, (uint64_t)v12, v14, v15);

    if (objc_msgSend_isEqualToString_(v16, v17, @"XZ-1", v18, v19))
    {
      uint64_t v23 = 10001;
    }
    else if (objc_msgSend_isEqualToString_(v16, v20, @"E-P1", v21, v22))
    {
      uint64_t v23 = 10002;
    }
    else if (objc_msgSend_isEqualToString_(v16, v24, @"E-P2", v25, v26))
    {
      uint64_t v23 = 10004;
    }
    else if (objc_msgSend_isEqualToString_(v16, v27, @"E-PL1", v28, v29))
    {
      uint64_t v23 = 10003;
    }
    else if (objc_msgSend_isEqualToString_(v16, v30, @"E-PL2", v31, v32))
    {
      uint64_t v23 = 10005;
    }
    else
    {
      if (!CFStringGetCString(v6, buffer, 256, 0x8000100u)) {
        goto LABEL_28;
      }
      uint64_t v33 = strcasestr(buffer, "C");
      uint64_t v34 = v33;
      if (v33)
      {
        uint64_t v35 = strcasestr(v33 + 1, "C");
        if (v35) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = v34;
        }
        uint64_t v34 = v36 + 1;
      }
      uint64_t v37 = strcasestr(buffer, "E-");
      uint64_t v38 = v37 ? v37 + 2 : v34;
      if (v38 && *v38 >= 48)
      {
        unint64_t v39 = 0;
        uint64_t v23 = 0;
        unsigned int v40 = *v38;
        uint64_t v41 = (unsigned __int8 *)(v38 + 1);
        do
        {
          if (v39 > 4) {
            break;
          }
          if (v40 > 0x39) {
            break;
          }
          int v42 = (char)v41[v39++];
          uint64_t v23 = v40 + 10 * v23 - 48;
          unsigned int v40 = v42;
        }
        while (v42 > 47);
      }
      else
      {
LABEL_28:
        uint64_t v23 = 0;
      }
    }
  }
  else
  {
    uint64_t v23 = 0;
  }

  return v23;
}

void sub_1DDBC4E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC4E88(uint64_t a1, int a2, unsigned int a3, uint64_t a4, void *a5)
{
  uint64_t result = 0;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 > 409)
  {
    if (a2 > 509)
    {
      if (a2 == 510) {
        goto LABEL_22;
      }
      if (a2 == 620)
      {
        uint64_t result = 0;
        *a5 = 0x10000000100;
        return result;
      }
      if (a2 != 520) {
        return result;
      }
    }
    else
    {
      if (a2 == 410) {
        goto LABEL_22;
      }
      if (a2 != 420)
      {
        if (a2 == 500) {
          goto LABEL_22;
        }
        return result;
      }
    }
    *a5 = 0x10000000100;
    int32x2_t v15 = 0;
    *(void *)uint64_t v16 = 0;
    if (a3 < 4)
    {
      __int32 v8 = v15.i32[a3];
      *(_DWORD *)a4 = dword_1DDC0C6B0[a3];
      *(_DWORD *)(a4 + 4) = v8;
      uint64_t v9 = 0x2B00000020;
LABEL_29:
      *(void *)(a4 + 8) = v9;
      return 1;
    }
    return 0;
  }
  if (a2 <= 299)
  {
    if (a2 != 1)
    {
      if (a2 == 3)
      {
        *a5 = 0xAB000000E40;
        if (a3 <= 0xA)
        {
          uint64_t v17 = 0;
          *(void *)&char v16[4] = 0;
          int v18 = 0;
          int32x2_t v15 = vdup_n_s32(0x221u);
          *(_DWORD *)uint64_t v16 = 545;
          int v6 = -545;
          int32x2_t v19 = vdup_n_s32(0xFFFFFDDF);
          uint64_t v7 = &unk_1DDC0C6F0;
          goto LABEL_28;
        }
      }
      else
      {
        if (a2 != 5) {
          return result;
        }
        *a5 = 0xBD000000FC0;
        if (a3 <= 0xA)
        {
          uint64_t v17 = 0;
          *(void *)&char v16[4] = 0;
          int v18 = 0;
          int32x2_t v15 = vdup_n_s32(0x25Du);
          *(_DWORD *)uint64_t v16 = 605;
          int v6 = -605;
          int32x2_t v19 = vdup_n_s32(0xFFFFFDA3);
          uint64_t v7 = &unk_1DDC0C71C;
LABEL_28:
          int v20 = v6;
          int v13 = v7[a3];
          __int32 v14 = v15.i32[a3];
          *(_DWORD *)a4 = v13;
          *(_DWORD *)(a4 + 4) = v14;
          uint64_t v9 = 0x900000006CLL;
          goto LABEL_29;
        }
      }
      return 0;
    }
LABEL_22:
    *a5 = 0x79E00000A30;
    int32x2_t v15 = 0;
    *(void *)uint64_t v16 = 0;
    if (a3 < 4)
    {
      __int32 v10 = v15.i32[a3];
      int v11 = dword_1DDC0C6D0[a3];
      int v12 = dword_1DDC0C6E0[a3];
      *(_DWORD *)a4 = dword_1DDC0C6C0[a3];
      *(_DWORD *)(a4 + 4) = v10;
      *(_DWORD *)(a4 + 8) = v11;
      *(_DWORD *)(a4 + 12) = v12;
      return 1;
    }
    return 0;
  }
  if (a2 == 300 || a2 == 330 || a2 == 400) {
    goto LABEL_22;
  }
  return result;
}

void sub_1DDBC50A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned __int8 v18 = 0;
  if (*(_DWORD *)(a4 + 4) >= 0x2Du)
  {
    unsigned int v8 = *(_DWORD *)(a4 + 8);
    unsigned int v9 = bswap32(v8);
    if (a6) {
      unsigned int v8 = v9;
    }
    if (sub_1DDBA1314(a1, (uint64_t)&v18, 1, a5, v8 + 44))
    {
      uint64_t v10 = v18;
      if (v18 <= 3u)
      {
        int v11 = sub_1DDBA1778(a1);
        int v12 = sub_1DDBA17F8(a3);
        int v13 = sub_1DDBA175C(a3);
        uint64_t v17 = objc_msgSend_numberWithInt_(NSNumber, v14, v10, v15, v16);
        sub_1DDA784D0(v11, v12, v13, v17);
      }
    }
  }
}

void sub_1DDBC518C(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DDBC51B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v39 = a2;
  int v11 = NSString;
  int v12 = sub_1DDBA175C(a3);
  uint64_t v16 = objc_msgSend_stringWithFormat_(v11, v13, @"%@/%@/%@", v14, v15, v39, v12, @"Offset");

  uint64_t v17 = NSString;
  unsigned __int8 v18 = sub_1DDBA175C(a3);
  uint64_t v22 = objc_msgSend_stringWithFormat_(v17, v19, @"%@/%@/%@", v20, v21, v39, v18, @"Length");

  LODWORD(v26) = *(_DWORD *)(a4 + 8);
  unsigned int v27 = bswap32(v26);
  if (a6) {
    uint64_t v26 = v27;
  }
  else {
    uint64_t v26 = v26;
  }
  uint64_t v28 = objc_msgSend_numberWithLongLong_(NSNumber, v23, v26 + a5, v24, v25);
  uint64_t v29 = sub_1DDBA1814(a1);
  objc_msgSend_setObject_forKeyedSubscript_(v29, v30, (uint64_t)v28, (uint64_t)v16, v31);

  uint64_t v35 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v32, *(unsigned int *)(a4 + 4), v33, v34);
  uint64_t v36 = sub_1DDBA1814(a1);
  objc_msgSend_setObject_forKeyedSubscript_(v36, v37, (uint64_t)v35, (uint64_t)v22, v38);
}

void sub_1DDBC5338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC539C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (*(_DWORD *)(a4 + 4) == 6)
  {
    __int16 v17 = 0;
    int v16 = 0;
    LODWORD(v8) = *(_DWORD *)(a4 + 8);
    unsigned int v9 = bswap32(v8);
    uint64_t v8 = a6 ? v9 : v8;
    if (sub_1DDBA1314(a1, (uint64_t)&v16, 6, a5, v8) == 6)
    {
      int v13 = sub_1DDBC54A0(6, (const char *)((v16 << 16) | (BYTE2(v16) << 8) | HIBYTE(v16)), v10, v11, v12);
      if (v13)
      {
        uint64_t v14 = sub_1DDBA1778(a1);
        uint64_t v15 = sub_1DDBA17F8(a3);
        sub_1DDA784D0(v14, v15, (void *)*MEMORY[0x1E4F2F708], v13);
      }
    }
  }
}

void sub_1DDBC5480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDBC54A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_stringWithFormat_(NSString, a2, @"%1X %02X %02X", a4, a5, BYTE2(a2), BYTE1(a2), a2);
  uint64_t v5 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  int v6 = sub_1DDBE3DE4(@"olympus");
  uint64_t v11 = v6;
  if (v6)
  {
    int v16 = sub_1DDA83A80(v6, v5, v8, v9, v10);
    for (unint64_t i = 0; ; unint64_t i = v64 + 1)
    {
      unint64_t v64 = i;
      if (i >= objc_msgSend_count(v16, v12, v13, v14, v15)) {
        break;
      }
      uint64_t v21 = sub_1DDB66820(v16, (const char *)&v64, v18, v19, v20);
      if (objc_msgSend_count(v21, v22, v23, v24, v25) == 5)
      {
        __p[0] = 0;
        uint64_t v29 = sub_1DDB65E24(v21, (const char *)__p, v26, v27, v28);
        __p[0] = (void *)1;
        double v33 = sub_1DDB667D0(v21, (const char *)__p, v30, v31, v32);
        __p[0] = (void *)2;
        double v37 = sub_1DDB667D0(v21, (const char *)__p, v34, v35, v36);
        __p[0] = (void *)3;
        double v41 = sub_1DDB667D0(v21, (const char *)__p, v38, v39, v40);
        __p[0] = (void *)4;
        double v45 = sub_1DDB667D0(v21, (const char *)__p, v42, v43, v44);
        if (v29)
        {
          double v46 = v45;
          id v47 = v29;
          uint64_t v52 = (char *)objc_msgSend_UTF8String(v47, v48, v49, v50, v51);
          sub_1DDA1A880(v56, v52);
          if (SHIBYTE(v57) < 0)
          {
            sub_1DDA2639C(__p, v56[0], (unint64_t)v56[1]);
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)v56;
            uint64_t v59 = v57;
          }
          double v60 = v33;
          double v61 = v37;
          double v62 = v41;
          double v63 = v46;
          sub_1DDBB4C18(&v65, (long long *)__p);
          if (SHIBYTE(v59) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v57) < 0) {
            operator delete(v56[0]);
          }
        }
      }
    }
  }
  uint64_t v53 = v65;
  if (v66 == v65)
  {
    uint64_t v54 = 0;
  }
  else
  {
    if (*(char *)(v65 + 23) < 0) {
      uint64_t v53 = *(void *)v65;
    }
    uint64_t v54 = objc_msgSend_stringWithUTF8String_(NSString, v7, v53, v9, v10);
  }

  __p[0] = &v65;
  sub_1DDBB5984((void ***)__p);

  return v54;
}

void sub_1DDBC56F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  a20 = &a31;
  sub_1DDBB5984((void ***)&a20);

  _Unwind_Resume(a1);
}

void sub_1DDBC5794(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v55 = a2;
  if (!*(_DWORD *)(a4 + 4)) {
    goto LABEL_18;
  }
  uint64_t v11 = sub_1DDBA1778(a1);
  uint64_t v12 = sub_1DDBA17F8(a3);
  uint64_t v13 = sub_1DDA2E3A8(v11, v12, 0);

  sub_1DDBA1CE4(a1, v55, a3, a4, a5, a6);
  sub_1DDBA175C(a3);
  uint64_t v14 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v18 = sub_1DDA357A8(v13, v14, v15, v16, v17);

  BOOL v23 = v18 != 0;
  if (v18) {
    int v24 = objc_msgSend_intValue(v18, v19, v20, v21, v22);
  }
  else {
    int v24 = 0;
  }
  float v25 = (float)v24;
  float v26 = (float)v24;
  if (*(_DWORD *)(a4 + 4) >= 3u)
  {
    sub_1DDBA175C(a3);
    uint64_t v27 = (char *)objc_claimAutoreleasedReturnValue();
    uint64_t v31 = sub_1DDA357A8(v13, v27, v28, v29, v30);

    sub_1DDBA175C(a3);
    uint64_t v32 = (char *)objc_claimAutoreleasedReturnValue();
    uint64_t v36 = sub_1DDA357A8(v13, v32, v33, v34, v35);

    BOOL v23 = 0;
    if (v31)
    {
      float v26 = (float)v24;
      if (!v36)
      {
LABEL_12:

        goto LABEL_13;
      }
      objc_msgSend_floatValue(v31, v37, v38, v39, v40);
      float v42 = v41;
      objc_msgSend_floatValue(v36, v43, v44, v45, v46);
      BOOL v23 = 0;
      if (v18)
      {
        float v26 = (float)v24;
        if (v47 != v42)
        {
          BOOL v23 = 1;
          float v26 = (float)(v25 - v42) / (float)(v47 - v42);
        }
        goto LABEL_12;
      }
    }
    float v26 = (float)v24;
    goto LABEL_12;
  }
LABEL_13:
  if (v13)
  {
    uint64_t v48 = sub_1DDBA175C(a3);
    objc_msgSend_removeObjectForKey_(v13, v49, (uint64_t)v48, v50, v51);
  }
  if (v23)
  {
    uint64_t v52 = objc_msgSend_stringWithFormat_(NSString, v19, @"%ld", v21, v22, v24);
    uint64_t v53 = sub_1DDBA17F8(a3);
    uint64_t v54 = sub_1DDBA175C(a3);
    sub_1DDBA4BE8(a1, v53, v54, v52, v25, v26);
  }
LABEL_18:
}

void sub_1DDBC5A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC5A8C()
{
  JUMPOUT(0x1DDBC5A7CLL);
}

void sub_1DDBC5A9C()
{
}

void sub_1DDBC5AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (*(_DWORD *)(a4 + 4) == 1 && *(_WORD *)(a4 + 2) == 3)
  {
    sub_1DDBA1778(a1);
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = sub_1DDBA17F8(a3);
    uint64_t v11 = sub_1DDBA175C(a3);
    uint64_t v12 = NSNumber;
    unsigned int v13 = *(unsigned __int16 *)(a4 + 8);
    unsigned int v14 = bswap32(v13) >> 16;
    if (a6) {
      LOWORD(v13) = v14;
    }
    long double v15 = pow(1.41421356, (double)(unsigned __int16)v13 * 0.00390625);
    uint64_t v20 = objc_msgSend_numberWithDouble_(v12, v16, v17, v18, v19, (double)v15);
    sub_1DDA784D0(v21, v10, v11, v20);
  }
}

void sub_1DDBC5BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC5BE4(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a2;
  unsigned int v13 = v10;
  if (*(_DWORD *)(a4 + 4))
  {
    uint64_t v19 = v10;
    unsigned int v14 = objc_msgSend_stringWithFormat_(NSString, v10, @"%@/OlympusEquipment", v11, v12, v10);
    unsigned int v15 = *(_DWORD *)(a4 + 8);
    unsigned int v16 = bswap32(v15);
    if (a6) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }
    sub_1DDBA5A38(a1, v14, word_1F398B2F0, v17, a5, a6);

    unsigned int v13 = v19;
  }

  return MEMORY[0x1F41817F8](v10, v13);
}

void sub_1DDBC5C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC5CBC(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a2;
  unsigned int v13 = v10;
  if (*(_DWORD *)(a4 + 4))
  {
    uint64_t v19 = v10;
    unsigned int v14 = objc_msgSend_stringWithFormat_(NSString, v10, @"%@/OlympusCameraSettings", v11, v12, v10);
    unsigned int v15 = *(_DWORD *)(a4 + 8);
    unsigned int v16 = bswap32(v15);
    if (a6) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }
    sub_1DDBA5A38(a1, v14, word_1F398B430, v17, a5, a6);

    unsigned int v13 = v19;
  }

  return MEMORY[0x1F41817F8](v10, v13);
}

void sub_1DDBC5D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC5D94(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a2;
  unsigned int v13 = v10;
  if (*(_DWORD *)(a4 + 4))
  {
    uint64_t v19 = v10;
    unsigned int v14 = objc_msgSend_stringWithFormat_(NSString, v10, @"%@/OlympusFocusInfo", v11, v12, v10);
    unsigned int v15 = *(_DWORD *)(a4 + 8);
    unsigned int v16 = bswap32(v15);
    if (a6) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }
    sub_1DDBA5A38(a1, v14, word_1F398B7C8, v17, a5, a6);

    unsigned int v13 = v19;
  }

  return MEMORY[0x1F41817F8](v10, v13);
}

void sub_1DDBC5E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC5E6C(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result = sub_1DDBA279C((uint64_t)a1, a2, a3, a4, a5, a6);
  unsigned int v8 = BYTE1(result) - BYTE3(result);
  unsigned int v9 = result - BYTE2(result);
  if (v8 >= 4 && v9 >= 4)
  {
    uint64_t v12 = 0x10000000100;
    LODWORD(v11) = (int)(BYTE1(result)
                       + BYTE3(result)
                       - 256
                       + (((BYTE1(result) + BYTE3(result) - 256) & 0x8000) >> 15)) >> 1;
    DWORD1(v11) = (int)(256
                      - (BYTE2(result)
                       + result)
                      + (((256 - (BYTE2(result) + result)) & 0x8000u) >> 15)) >> 1;
    sub_1DDA18218((_DWORD *)&v11 + 2, v8 >> 2, v9 >> 2);
    sub_1DDBA9530((uint64_t)a1, &v12, 0);
    sub_1DDBA9484(a1, &v11, 0);
    sub_1DDBA96A8(a1, 1uLL, 0, 0);
    return sub_1DDBA9554(a1, 1uLL, 0, 0);
  }
  return result;
}

void sub_1DDBC5F54(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v38 = a2;
  unsigned int v9 = sub_1DDBA1778((uint64_t)a1);
  uint64_t v10 = sub_1DDB6DAE4(v9, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD68]);

  uint64_t v12 = sub_1DDBC4C1C(v11, v10);
  unsigned int v13 = v12;
  unsigned int v14 = 0;
  unsigned int v15 = 0;
  unsigned int v16 = *(unsigned __int16 *)(a4 + 8);
  unsigned int v17 = bswap32(v16) >> 16;
  if (a6) {
    LOWORD(v16) = v17;
  }
  int v37 = (unsigned __int16)v16;
  unsigned int v18 = v16 & 0x3F;
  int v19 = v16 & 0xC0;
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  long long __p = 0;
  float v41 = 0;
  unsigned __int16 v20 = 22;
  do
  {
    long long v39 = 0uLL;
    uint64_t v12 = sub_1DDBC4E88(v12, v13, (unsigned __int16)v15, (uint64_t)&v39, &v43);
    if (v12)
    {
      if ((unint64_t)v14 >= v42)
      {
        uint64_t v21 = (v14 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v21 + 1) >> 60) {
          sub_1DDA17F78();
        }
        unint64_t v22 = (uint64_t)(v42 - (void)__p) >> 3;
        if (v22 <= v21 + 1) {
          unint64_t v22 = v21 + 1;
        }
        if (v42 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23) {
          uint64_t v12 = (uint64_t)sub_1DDA19838((uint64_t)&v42, v23);
        }
        else {
          uint64_t v12 = 0;
        }
        int v24 = (char *)(v12 + 16 * v21);
        *(_OWORD *)int v24 = v39;
        float v26 = (char *)__p;
        float v25 = v41;
        uint64_t v27 = v24;
        if (v41 != __p)
        {
          do
          {
            *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
            v27 -= 16;
            v25 -= 16;
          }
          while (v25 != v26);
          float v25 = (char *)__p;
        }
        unsigned int v14 = v24 + 16;
        long long __p = v27;
        float v41 = v24 + 16;
        unint64_t v42 = v12 + 16 * v23;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(_OWORD *)unsigned int v14 = v39;
        v14 += 16;
      }
      float v41 = v14;
    }
    else
    {
      unsigned __int16 v20 = v15;
    }
    ++v15;
  }
  while (v15 < v20);
  if (v13 <= 0x1E && ((1 << v13) & 0x40000028) != 0)
  {
    uint64_t v28 = v10;
    if (!v20) {
      goto LABEL_52;
    }
    uint64_t v29 = @"Dynamic Single Target";
    uint64_t v30 = @" UNKNOWN AF Target";
    if (v19 == 64) {
      uint64_t v30 = @"All Target";
    }
    if (v19 != 128) {
      uint64_t v29 = v30;
    }
    if (v19) {
      uint64_t v31 = v29;
    }
    else {
      uint64_t v31 = @"Single Target";
    }
    sub_1DDBA4174((uint64_t)a1, v31, 0, (void (*)(uint64_t, void))sub_1DDBC6304);
    int v32 = v37;
    if (v37 != 255)
    {
      if (v18) {
        unsigned int v18 = (v18 - 1) % v20;
      }
      else {
        unsigned int v18 = 255;
      }
    }
  }
  else
  {
    uint64_t v28 = v10;
    if (!v20) {
      goto LABEL_52;
    }
    sub_1DDBA4174((uint64_t)a1, 0, 0, (void (*)(uint64_t, void))sub_1DDBC6388);
    int v32 = v37;
    int v19 = v37 & 0x40;
  }
  if (v18 >= v20 || v32 == 255) {
    unint64_t v34 = 0;
  }
  else {
    unint64_t v34 = 1 << v18;
  }
  sub_1DDBA9530((uint64_t)a1, &v43, 1);
  sub_1DDBA94FC(a1, (uint64_t)&__p, 1);
  sub_1DDBA96A8(a1, v34, 0, 1);
  unint64_t v35 = ~(-1 << v20);
  if (v19 != 64) {
    unint64_t v35 = 0;
  }
  if (v19) {
    unint64_t v36 = v35;
  }
  else {
    unint64_t v36 = v34;
  }
  sub_1DDBA9554(a1, v36, 0, 1);
LABEL_52:
  if (__p)
  {
    float v41 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1DDBC62B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_1DDBC6304(void *a1, unsigned int a2)
{
  if (a1)
  {
    a1 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (a1)
    {
      a1 = sub_1DDBC6C30((uint64_t)a1, a2);
    }
    uint64_t v2 = vars8;
  }
  return a1;
}

__CFString *sub_1DDBC6388(__CFString *result, int a2)
{
  if (result)
  {
    uint64_t result = (__CFString *)__dynamic_cast(result, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398B948, 0);
    if (result)
    {
      switch(a2)
      {
        case 0:
          uint64_t result = @"Left";
          break;
        case 1:
          uint64_t result = @"Center (horizontal)";
          break;
        case 2:
          uint64_t result = @"Right";
          break;
        case 3:
          uint64_t result = @"Center (vertical)";
          break;
        default:
          if (a2 == 255) {
            uint64_t result = @"(none)";
          }
          else {
            uint64_t result = 0;
          }
          break;
      }
    }
  }
  return result;
}

void sub_1DDBC6470(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11 = a2;
  uint64_t v12 = sub_1DDBA17F8(a3);
  if (!objc_msgSend_length(v12, v13, v14, v15, v16))
  {

    goto LABEL_20;
  }
  unsigned int v17 = sub_1DDBA175C(a3);
  uint64_t v22 = objc_msgSend_length(v17, v18, v19, v20, v21);

  if (v22)
  {
    unsigned int v23 = sub_1DDBA1F24(a1, v11, a3, a4, a5, a6);
    if (v23 >= 0xB) {
      uint64_t v24 = 0x7FFFLL;
    }
    else {
      uint64_t v24 = dword_1DDC0C7B0[(__int16)v23];
    }
    if (*(_DWORD *)(a4 + 4) < 2u) {
      goto LABEL_16;
    }
    float v25 = sub_1DDBA1778(a1);
    float v26 = sub_1DDBA17F8(a3);
    uint64_t v27 = sub_1DDBA175C(a3);
    uint64_t v28 = sub_1DDBA64D4(v25, v26, v27);

    uint64_t v33 = objc_msgSend_count(v28, v29, v30, v31, v32);
    if (v33)
    {
      uint64_t v46 = 0;
      LOBYTE(v33) = sub_1DDB66788(v28, (const char *)&v46, v34, v35, v36);
      if ((v33 & 0x30) == 0x10)
      {
        uint64_t v24 = 0;
        goto LABEL_15;
      }
      if ((v33 & 0x30) == 0x20)
      {
        uint64_t v24 = 2;
LABEL_15:

LABEL_16:
        int v37 = sub_1DDBA1778(a1);
        sub_1DDBA17F8(a3);
        if (v24 == 0x7FFF) {
          id v38 = {;
        }
          long long v39 = sub_1DDBA175C(a3);
          sub_1DDBA6668(v37, v38, v39);
        }
        else {
          uint64_t v40 = {;
        }
          float v41 = sub_1DDBA175C(a3);
          uint64_t v45 = objc_msgSend_numberWithInt_(NSNumber, v42, v24, v43, v44);
          sub_1DDA784D0(v37, v40, v41, v45);
        }
        goto LABEL_20;
      }
    }
    if ((v33 & 3) != 0) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v24;
    }
    goto LABEL_15;
  }
LABEL_20:
}

void sub_1DDBC66C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC6744(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v28 = a2;
  id v11 = sub_1DDBA17F8(a3);
  if (objc_msgSend_length(v11, v12, v13, v14, v15))
  {
    uint64_t v16 = sub_1DDBA175C(a3);
    uint64_t v21 = objc_msgSend_length(v16, v17, v18, v19, v20);

    if (!v21) {
      goto LABEL_8;
    }
    if (sub_1DDBA1F24(a1, v28, a3, a4, a5, a6))
    {
      id v11 = sub_1DDBA1778(a1);
      uint64_t v22 = sub_1DDBA17F8(a3);
      unsigned int v23 = sub_1DDBA175C(a3);
      uint64_t v27 = objc_msgSend_numberWithInt_(NSNumber, v24, 1, v25, v26);
      sub_1DDA784D0(v11, v22, v23, v27);
    }
    else
    {
      id v11 = sub_1DDBA1778(a1);
      uint64_t v22 = sub_1DDBA17F8(a3);
      unsigned int v23 = sub_1DDBA175C(a3);
      sub_1DDBA6668(v11, v22, v23);
    }
  }
LABEL_8:
}

void sub_1DDBC68BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC690C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v30 = a2;
  id v11 = sub_1DDBA17F8(a3);
  if (!objc_msgSend_length(v11, v12, v13, v14, v15)) {
    goto LABEL_10;
  }
  uint64_t v16 = sub_1DDBA175C(a3);
  uint64_t v21 = objc_msgSend_length(v16, v17, v18, v19, v20);

  if (!v21) {
    goto LABEL_11;
  }
  int v22 = sub_1DDBA1F24(a1, v30, a3, a4, a5, a6);
  if (v22)
  {
    if (v22 != 1)
    {
      id v11 = sub_1DDBA1778(a1);
      uint64_t v24 = sub_1DDBA17F8(a3);
      uint64_t v25 = sub_1DDBA175C(a3);
      sub_1DDBA6668(v11, v24, v25);
      goto LABEL_9;
    }
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 1;
  }
  id v11 = sub_1DDBA1778(a1);
  uint64_t v24 = sub_1DDBA17F8(a3);
  uint64_t v25 = sub_1DDBA175C(a3);
  uint64_t v29 = objc_msgSend_numberWithInt_(NSNumber, v26, v23, v27, v28);
  sub_1DDA784D0(v11, v24, v25, v29);

LABEL_9:
LABEL_10:

LABEL_11:
}

void sub_1DDBC6A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC6AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v24 = 0;
  unsigned int v10 = *(_DWORD *)(a4 + 8);
  unsigned int v11 = bswap32(v10);
  if (a6) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v10;
  }
  if (sub_1DDBA1314(a1, (uint64_t)&v24, 4, a5, v12) == 4)
  {
    int v13 = v24;
    unsigned int v14 = bswap32(v24);
    if (a6) {
      int v13 = v14;
    }
    int v24 = v13;
    if (v13 >= 1)
    {
      double v15 = (double)v13;
      sub_1DDBA1314(a1, (uint64_t)&v24, 4, a5, v12 + 4);
      uint64_t v16 = sub_1DDBA1778(a1);
      unsigned int v17 = sub_1DDBA17F8(a3);
      uint64_t v18 = sub_1DDBA175C(a3);
      uint64_t v23 = objc_msgSend_numberWithDouble_(NSNumber, v19, v20, v21, v22, v15 / 1000.0);
      sub_1DDA784D0(v16, v17, v18, v23);
    }
  }
}

void sub_1DDBC6C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBC6C30(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x15) {
    return 0;
  }
  else {
    return off_1E6D06BF8[(__int16)a2];
  }
}

void sub_1DDBC6C54(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  unsigned int v8 = operator new(0xE0uLL);
  sub_1DDBC6CE0(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBC6CCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDBC6CE0(void *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F398B970;
  sub_1DDBAA64C((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = &unk_1F398B878;
  return a1;
}

void sub_1DDBC6D4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBC6D60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398B970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBC6D80(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398B970;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBC6DD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void sub_1DDBC6E74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC6FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC7068(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    unsigned int v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398BBD0, 0);
    if (v10) {
      sub_1DDBC7CAC((uint64_t)v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBC7124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC7138(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 >= 4)
  {
    int v2 = *a1;
    if (v2 == 77)
    {
      if (a1[1] == 77 && !a1[2] && a1[3] == 85) {
        return 1;
      }
    }
    else if (v2 == 73 && a1[1] == 73 && a1[2] == 85 && !a1[3])
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1DDBC71A8(uint64_t *a1)
{
  int v5 = 0;
  sub_1DDA1A94C(v6, a1, (uint64_t)&v5, 0);
  int v5 = 0;
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t))(*(void *)*a1 + 32))(*a1, &v5, 4) != 4) {
    goto LABEL_15;
  }
  if (v5 == 77)
  {
    BOOL v2 = BYTE1(v5) == 77 && BYTE2(v5) == 0;
    if (!v2 || HIBYTE(v5) != 85) {
      goto LABEL_15;
    }
  }
  else if (v5 != 73 || BYTE1(v5) != 73 || BYTE2(v5) != 85 || HIBYTE(v5))
  {
LABEL_15:
    uint64_t v3 = 0;
    goto LABEL_16;
  }
  uint64_t v3 = 1;
LABEL_16:
  sub_1DDA1AA18(v6);
  return v3;
}

void sub_1DDBC7294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DDBC72AC(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBC7E68(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBC7324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC7340(uint64_t a1, int a2)
{
  LODWORD(result) = sub_1DDBA7814(a1, a2);
  if (a2 == 85) {
    return 1;
  }
  else {
    return result;
  }
}

void *sub_1DDBC736C()
{
  return &unk_1F398B9B0;
}

BOOL sub_1DDBC7378(uint64_t a1, void *a2)
{
  return a2 == &unk_1F398B9B0;
}

void sub_1DDBC738C(uint64_t a1)
{
  BOOL v2 = sub_1DDBA1778(a1);
  uint64_t v3 = (void *)*MEMORY[0x1E4F2F6D8];
  id v11 = v2;
  BOOL v4 = sub_1DDBA6568(v2, (void *)*MEMORY[0x1E4F2F6D8], @"ImageStabilization");

  if (v4
    && (sub_1DDBA1778(a1),
        id v12 = (id)objc_claimAutoreleasedReturnValue(),
        int v5 = sub_1DDBA65E8(v12, v3, @"ImageStabilization"),
        v12,
        (v5 - 2) < 3))
  {
    uint64_t v6 = dword_1DDC0C8D0[v5 - 2];
    sub_1DDBA1778(a1);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    unsigned int v10 = objc_msgSend_numberWithInt_(NSNumber, v7, v6, v8, v9);
    sub_1DDA784D0(v13, v3, @"ImageStabilization", v10);
  }
  else
  {
    sub_1DDBA1778(a1);
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    sub_1DDBA6668(v13, v3, @"ImageStabilization");
  }
}

void sub_1DDBC74B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBC74DC()
{
  return @"{MakerPanasonic}";
}

uint64_t sub_1DDBC74E8(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  uint64_t v16 = 0;
  v17[0] = 0;
  *(void *)((char *)v17 + 5) = 0;
  if (sub_1DDBA1314((uint64_t)a1, (uint64_t)&v16, 20, a5, a3) == 20)
  {
    if (v16 == 1128875340 && WORD2(v16) == 65)
    {
      uint64_t v14 = 8;
    }
    else
    {
      if (v16 != 0x696E6F73616E6150 || LOWORD(v17[0]) != 99) {
        goto LABEL_10;
      }
      uint64_t v14 = 12;
    }
    sub_1DDBA5A38(a1, v10, L"%\a", v14 + a3, a5, a6);
    (*(void (**)(unsigned char *))(*(void *)a1 + 160))(a1);
    uint64_t v13 = 1;
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v13 = 0;
LABEL_14:

  return v13;
}

void sub_1DDBC7638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC7650(uint64_t a1)
{
  sub_1DDBA1778(a1);
  id v19 = (id)objc_claimAutoreleasedReturnValue();
  BOOL v2 = sub_1DDBA6568(v19, @"{PictStyleSetting}", @"PictureStyle");

  if (v2)
  {
    sub_1DDBA1778(a1);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    int v3 = sub_1DDBA65E8(v20, @"{PictStyleSetting}", @"PictureStyle");

    sub_1DDBC78E8(v4, v3);
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictureStyle", v21, (float)v3, (float)v3);
  }
  int v5 = sub_1DDBA1778(a1);
  sub_1DDA2E3A8(v5, @"{PictureStyle}", 0);
  id v22 = (id)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    uint64_t v6 = sub_1DDBA1778(a1);
    BOOL v7 = sub_1DDBA6568(v6, @"{PictureStyle}", @"Monochrome");

    if (!v7) {
      sub_1DDBA4B30(a1, @"Monochrome", 0);
    }
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    if ((v8 & 0x80000000) == 0)
    {
      uint64_t v9 = @"{PictureStyle}";
      id v10 = sub_1DDBA4D7C(a1, v8);
      sub_1DDBA4BE8(a1, v9, @"PictStyleColorSpace", v10, (float)v8, (float)v8);
    }
  }
  id v11 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v11, v12, @"{PictStyleSetting}", v13, v14);

  double v15 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v15, v16, @"{PictStyleNormalized}", v17, v18);
}

void sub_1DDBC7880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBC78E8(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0x2B) {
    return 0;
  }
  else {
    return off_1E6D06DC0[a2 - 1];
  }
}

void sub_1DDBC790C(char *a1)
{
  BOOL v2 = sub_1DDBA1778((uint64_t)a1);
  int v3 = @"{Temporary}";
  uint64_t v4 = @"_AutoFocus";
  int v5 = sub_1DDBA64D4(v2, v3, v4);

  if ((unint64_t)objc_msgSend_count(v5, v6, v7, v8, v9) >= 2)
  {
    *(void *)&long long v32 = 0;
    float v13 = sub_1DDBC46A8(v5, (const char *)&v32, v10, v11, v12);
    *(void *)&long long v32 = 1;
    float v17 = sub_1DDBC46A8(v5, (const char *)&v32, v14, v15, v16);
    if (v13 > 0.0 && v13 <= 1.0 && v17 > 0.0 && v17 <= 1.0)
    {
      id v20 = sub_1DDBA91F8((uint64_t)a1);
      uint64_t v33 = 0xBB800000FA0;
      id v21 = (id)*MEMORY[0x1E4F2F8D8];
      if (sub_1DDA2E4E0(v20, v21))
      {
        id v22 = (const char *)*MEMORY[0x1E4F2F8E0];
        BOOL v23 = sub_1DDA2E4E0(v20, (void *)*MEMORY[0x1E4F2F8E0]);

        if (v23)
        {
          int v27 = sub_1DDA2E1C4(v20, (const char *)v21, v24, v25, v26);
          LODWORD(v33) = v27;
          int v31 = sub_1DDA2E1C4(v20, v22, v28, v29, v30);
          HIDWORD(v33) = v31;
LABEL_15:
          LODWORD(v32) = (int)(float)((float)(v13 + -0.5) * (float)v27);
          DWORD1(v32) = (int)(float)((float)(0.5 - v17) * (float)v31);
          sub_1DDA18218((_DWORD *)&v32 + 2, v27 / 20, v31 / 20);
          sub_1DDBA9530((uint64_t)a1, &v33, 0);
          sub_1DDBA9484(a1, &v32, 0);
          sub_1DDBA96A8(a1, 1uLL, 0, 0);
          sub_1DDBA4270((uint64_t)a1);

          goto LABEL_16;
        }
      }
      else
      {
      }
      int v27 = 4000;
      int v31 = 3000;
      goto LABEL_15;
    }
  }
LABEL_16:
}

void sub_1DDBC7B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC7B8C(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  memset(v10, 0, sizeof(v10));
  sub_1DDBA8EB8((uint64_t *)a1, a2, &v9);
  sub_1DDA18410(&v7, (int *)(a1 + 196));
  unsigned int v6 = *(_DWORD *)(a1 + 200);
  sub_1DDB9FD50((uint64_t *)a1, &v7, &v6, 0, &v8);
  if ((void)v9) {
    sub_1DDA480D4((uint64_t *)v10, &v9);
  }
  if ((void)v8) {
    sub_1DDA480D4((uint64_t *)v10, &v8);
  }
  sub_1DDBA0184(v10, a2, a3);
  if (*((void *)&v8 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v8 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v9 + 1));
  }
  *(void *)&long long v9 = v10;
  sub_1DDA18270((void ***)&v9);
}

void sub_1DDBC7C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, char a14)
{
  if (a13) {
    sub_1DDA18310(a13);
  }
  a12 = (void **)&a14;
  sub_1DDA18270(&a12);
  _Unwind_Resume(a1);
}

void sub_1DDBC7CAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  unsigned int v11 = *(_DWORD *)(a4 + 8);
  unsigned int v12 = bswap32(v11);
  if (a6) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v11;
  }
  *(_DWORD *)(a1 + 196) = v13;
  unint64_t v14 = *(unsigned __int16 *)(a4 + 2);
  if (v14 > 0x6F) {
    LODWORD(v15) = 0;
  }
  else {
    uint64_t v15 = qword_1DDC0C810[v14];
  }
  *(_DWORD *)(a1 + 200) = v15 * *(_DWORD *)(a4 + 4);
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  if (sub_1DDBA1314(a1, (uint64_t)&v23, 24, a5, v13) == 24
    && !(*(_DWORD *)((char *)&v23 + 6) ^ 0x66697845 | WORD5(v23)))
  {
    int v19 = BYTE12(v23);
    if (BYTE12(v23) == BYTE13(v23) && (BYTE13(v23) & 0xFB) == 0x49)
    {
      unsigned int v20 = bswap32(v24);
      if (BYTE12(v23) == 77) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v24;
      }
      if (HIBYTE(v23) + BYTE14(v23) == 42)
      {
        id v22 = objc_msgSend_stringWithFormat_(NSString, v16, @"%@/PanasonicThumbnail", v17, v18, v10);
        sub_1DDBA5A38((unsigned char *)a1, v22, word_1F3986BD8, a5 + v21, (v13 + 12), v19 == 77);
      }
    }
  }
}

void sub_1DDBC7E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC7E68(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  long long v8 = operator new(0xE8uLL);
  sub_1DDBC7EF4((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBC7EE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC7EF4(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F398BBF8;
  sub_1DDBAA64C(a1 + 24, a2, *a3, *a4);
  *(void *)(a1 + 24) = &unk_1F398BB00;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  return a1;
}

void sub_1DDBC7F64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBC7F78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398BBF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBC7F98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398BBF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBC7FEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void sub_1DDBC8014(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    id v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
    if (v10) {
      sub_1DDBCAF7C((uint64_t)v10, v11, a3, a4, v12, a6);
    }
  }
}

void sub_1DDBC80CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC80E0(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
    if (v11) {
      sub_1DDBCB33C((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC81A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC81BC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  if (a1)
  {
    id v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
    if (v10) {
      sub_1DDBCA7C0((uint64_t)v10, v11, v12, a4, a5, a6);
    }
  }
}

void sub_1DDBC8274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC8288(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v9 = a2;
  if (a1)
  {
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
    if (v7) {
      sub_1DDBCB274((uint64_t)v7, v8, a3, a4);
    }
  }
}

void sub_1DDBC833C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC8350(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    id v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
    if (v9) {
      sub_1DDBCAA2C((uint64_t)v9, v12, v10, a4, v11, a6);
    }
  }
}

void sub_1DDBC8404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_1DDBC8418(void *result)
{
  if (result) {
    return __dynamic_cast(result, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
  }
  return result;
}

void sub_1DDBC8460(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a1)
  {
    uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
    if (v8)
    {
      unsigned int v9 = *(unsigned __int16 *)(a4 + 8);
      unsigned int v10 = bswap32(v9) >> 16;
      if (a6) {
        LOWORD(v9) = v10;
      }
      sub_1DDBCA500((uint64_t)v8, 0, (unsigned __int16)v9);
    }
  }
}

void sub_1DDBC8504(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    unsigned int v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
    if (v10) {
      sub_1DDBCAB6C((uint64_t)v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBC85C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC85D4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    unsigned int v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
    if (v10) {
      sub_1DDBCAD60((uint64_t)v10, v12, v11, a4, a5, a6);
    }
  }
}

void sub_1DDBC8690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC86A4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v12 = a2;
  if (a1)
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
    if (v11) {
      sub_1DDBCB084((uint64_t)v11, v12, a3, a4, a5, a6);
    }
  }
}

void sub_1DDBC8770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBC8784(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  id v9 = a2;
  id v8 = a3;
  sub_1DDBCB558(a1, &v9, &v8, &v7);
  *a4 = v7;
}

void sub_1DDBC87FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBC8818()
{
  return @"{MakerPentax}";
}

void sub_1DDBC8824(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = sub_1DDBA1814((uint64_t)a1);
  objc_msgSend_stringWithFormat_(NSString, v7, @"IFD0/%@", v8, v9, *MEMORY[0x1E4F2FD70]);
  unsigned int v10 = (char *)objc_claimAutoreleasedReturnValue();
  unint64_t v14 = sub_1DDA357A8(v6, v10, v11, v12, v13);

  int v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  if ((v19 - 9) >= 0xFFFFFFF8) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  if (v14) {
    int v21 = v20;
  }
  else {
    int v21 = v19;
  }
  id v22 = sub_1DDBA1814((uint64_t)a1);
  long long v23 = NSString;
  uint64_t v24 = @"_JPEGInterchangeFormat";
  objc_msgSend_stringWithFormat_(v23, v25, @"IFD2/%@", v26, v27, v24);
  uint64_t v28 = (char *)objc_claimAutoreleasedReturnValue();
  long long v32 = sub_1DDA357A8(v22, v28, v29, v30, v31);

  uint64_t v33 = sub_1DDBA1814((uint64_t)a1);
  uint64_t v34 = NSString;
  uint64_t v35 = @"_JPEGInterchangeFormatLength";
  objc_msgSend_stringWithFormat_(v34, v36, @"IFD2/%@", v37, v38, v35);
  long long v39 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v43 = sub_1DDA357A8(v33, v39, v40, v41, v42);

  memset(v57, 0, sizeof(v57));
  sub_1DDBA8EB8(a1, a2, &v56);
  LODWORD(v52) = objc_msgSend_intValue(v32, v44, v45, v46, v47);
  unsigned int v53 = objc_msgSend_intValue(v43, v48, v49, v50, v51);
  sub_1DDA1B3CC(&v54, &v53);
  sub_1DDB9FD50(a1, (int *)&v52, &v54, v21, &v55);
  sub_1DDBA8208(a1, @"IFD2", &v52);
  if ((void)v56) {
    sub_1DDA480D4((uint64_t *)v57, &v56);
  }
  if ((void)v55) {
    sub_1DDA480D4((uint64_t *)v57, &v55);
  }
  if ((void)v52) {
    sub_1DDA480D4((uint64_t *)v57, &v52);
  }
  sub_1DDBA0184(v57, a2, a3);
  if (*((void *)&v52 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v52 + 1));
  }
  if (*((void *)&v55 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v55 + 1));
  }
  if (*((void *)&v56 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v56 + 1));
  }
  *(void *)&long long v56 = v57;
  sub_1DDA18270((void ***)&v56);
}

void sub_1DDBC8AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void **a16, std::__shared_weak_count *a17, char a18)
{
  if (a15) {
    sub_1DDA18310(a15);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  a16 = (void **)&a18;
  sub_1DDA18270(&a16);

  _Unwind_Resume(a1);
}

void sub_1DDBC8B70(uint64_t a1)
{
  BOOL v2 = sub_1DDBA1778(a1);
  int v3 = (void *)*MEMORY[0x1E4F2F6D8];
  sub_1DDBB77F0(v2, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2F6F8]);
  id v14 = (id)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    uint64_t v8 = (const char *)objc_msgSend_intValue(v14, v4, v5, v6, v7);
    uint64_t v12 = sub_1DDBC8C88(a1, v8, v9, v10, v11);
    if (v12)
    {
      uint64_t v13 = sub_1DDBA1778(a1);
      sub_1DDA784D0(v13, v3, (void *)*MEMORY[0x1E4F2F708], v12);
    }
  }
  sub_1DDBA7974(a1);
}

void sub_1DDBC8C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1DDBC8C88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_msgSend_stringWithFormat_(NSString, a2, @"%d %d", a4, a5, BYTE1(a2), a2);
  double v130 = (char *)objc_claimAutoreleasedReturnValue();
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v6 = sub_1DDBE3DE4(@"pentax");
  uint64_t v11 = v6;
  if (v6)
  {
    uint64_t v16 = sub_1DDA83A80(v6, v130, v8, v9, v10);
    for (unint64_t i = 0; ; unint64_t i = v137 + 1)
    {
      unint64_t v137 = i;
      if (i >= objc_msgSend_count(v16, v12, v13, v14, v15)) {
        break;
      }
      int v21 = sub_1DDB66820(v16, (const char *)&v137, v18, v19, v20);
      if (objc_msgSend_count(v21, v22, v23, v24, v25) == 5)
      {
        __p[0] = 0;
        uint64_t v29 = sub_1DDB65E24(v21, (const char *)__p, v26, v27, v28);
        __p[0] = (void *)1;
        double v33 = sub_1DDB667D0(v21, (const char *)__p, v30, v31, v32);
        __p[0] = (void *)2;
        double v37 = sub_1DDB667D0(v21, (const char *)__p, v34, v35, v36);
        __p[0] = (void *)3;
        double v41 = sub_1DDB667D0(v21, (const char *)__p, v38, v39, v40);
        __p[0] = (void *)4;
        double v45 = sub_1DDB667D0(v21, (const char *)__p, v42, v43, v44);
        if (v29)
        {
          double v46 = v45;
          id v47 = v29;
          long long v52 = (char *)objc_msgSend_UTF8String(v47, v48, v49, v50, v51);
          sub_1DDA1A880(v131, v52);
          if (SHIBYTE(v132) < 0)
          {
            sub_1DDA2639C(__p, v131[0], (unint64_t)v131[1]);
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)v131;
            uint64_t v134 = v132;
          }
          *(double *)&long long v135 = v33;
          *((double *)&v135 + 1) = v37;
          *(double *)&long long v136 = v41;
          *((double *)&v136 + 1) = v46;
          sub_1DDBB4C18(&v138, (long long *)__p);
          if (SHIBYTE(v134) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v132) < 0) {
            operator delete(v131[0]);
          }
        }
      }
    }
  }
  uint64_t v53 = v138;
  if (v139 - v138 == 56)
  {
    if (*(char *)(v138 + 23) < 0) {
      uint64_t v53 = *(void *)v138;
    }
    objc_msgSend_stringWithUTF8String_(NSString, v7, v53, v9, v10);
    id v54 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_74;
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v139 - v138) >> 3)) < 2)
  {
    id v54 = 0;
    goto LABEL_74;
  }
  long long v55 = sub_1DDBA91F8(a1);
  int v59 = sub_1DDA2E1C4(v55, (const char *)*MEMORY[0x1E4F2F850], v56, v57, v58);

  double v60 = sub_1DDBA91F8(a1);
  unint64_t v64 = sub_1DDA357A8(v60, (const char *)*MEMORY[0x1E4F2F8B0], v61, v62, v63);

  objc_msgSend_doubleValue(v64, v65, v66, v67, v68);
  double v70 = v69;
  uint64_t v74 = sub_1DDA49F48(0x6DB6DB6DB6DB6DB7 * ((v139 - v138) >> 3));
  uint64_t v75 = v138;
  if (*(char *)(v138 + 23) < 0) {
    uint64_t v75 = *(void *)v138;
  }
  uint64_t v129 = objc_msgSend_stringWithUTF8String_(NSString, v71, v75, v72, v73);
  uint64_t v80 = v138;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v139 - v138) >> 3)) >= 2)
  {
    double v81 = (double)v59;
    double v128 = log((double)v59);
    uint64_t v82 = 0;
    long long v83 = 0;
    double v84 = 999999999.0;
    unint64_t v85 = 1;
    double v127 = v70;
    while (1)
    {
      long long v86 = (void **)(v80 + v82 + 56);
      if (*(char *)(v80 + v82 + 79) < 0)
      {
        sub_1DDA2639C(__p, *v86, *(void *)(v80 + v82 + 64));
      }
      else
      {
        long long v87 = *(_OWORD *)v86;
        uint64_t v134 = *(void *)(v80 + v82 + 72);
        *(_OWORD *)long long __p = v87;
      }
      long long v88 = *(_OWORD *)(v80 + v82 + 96);
      long long v135 = *(_OWORD *)(v80 + v82 + 80);
      long long v136 = v88;
      long long v89 = v135;
      double v90 = *(double *)&v135 + -0.9;
      double v91 = *((double *)&v135 + 1) + 0.9;
      if (*(double *)&v135 + -0.9 <= v81 && v91 >= v81)
      {
        if (v64)
        {
          long double v94 = *((double *)&v136 + 1);
          double v93 = *(double *)&v136;
          double v91 = *(double *)&v136 + -0.15;
          if (v70 < *(double *)&v136 + -0.15 || v70 > *((double *)&v136 + 1) + 0.15) {
            goto LABEL_54;
          }
          if (*(double *)&v135 != *((double *)&v135 + 1) && *(double *)&v136 != *((double *)&v136 + 1))
          {
            double v96 = log(*(long double *)&v136);
            long double v97 = log(v94) - v96;
            double v98 = log(*((long double *)&v89 + 1));
            long double v99 = log(*(long double *)&v89);
            long double v100 = v96 + v97 / (v98 - v99) * (v128 - v99);
            double v70 = v127;
            double v93 = exp(v100);
          }
          double v101 = vabdd_f64(v70, v93);
          if (v101 > v84 + 0.15) {
            goto LABEL_54;
          }
          double v90 = v84 + -0.15;
          if (v101 < v84 + -0.15)
          {
            if (v134 >= 0) {
              objc_msgSend_stringWithUTF8String_(NSString, v76, (uint64_t)__p, v78, v79);
            }
            else {
            uint64_t v102 = objc_msgSend_stringWithUTF8String_(NSString, v76, (uint64_t)__p[0], v78, v79);
            }

            long long v83 = (void *)v102;
          }
          double v84 = v101;
        }
        if (v134 >= 0) {
          objc_msgSend_stringWithUTF8String_(NSString, v76, (uint64_t)__p, v78, v79, v90, v91);
        }
        else {
        uint64_t v106 = objc_msgSend_stringWithUTF8String_(NSString, v76, (uint64_t)__p[0], v78, v79, v90, v91);
        }
        if (v106) {
          objc_msgSend_addObject_(v74, v103, (uint64_t)v106, v104, v105);
        }
      }
LABEL_54:
      if (SHIBYTE(v134) < 0) {
        operator delete(__p[0]);
      }
      ++v85;
      uint64_t v80 = v138;
      v82 += 56;
      if (v85 >= 0x6DB6DB6DB6DB6DB7 * ((v139 - v138) >> 3)) {
        goto LABEL_60;
      }
    }
  }
  long long v83 = 0;
LABEL_60:
  if (objc_msgSend_count(v74, v76, v77, v78, v79))
  {
    if (v83) {
      objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v107, (uint64_t)v83, v108, v109);
    }
    else {
      objc_msgSend_stringWithString_(MEMORY[0x1E4F28E78], v107, (uint64_t)&stru_1F398F7F8, v108, v109);
    }
    id v54 = (id)objc_claimAutoreleasedReturnValue();
    for (int j = 0; ; int j = (char *)__p[0] + 1)
    {
      __p[0] = j;
      if ((unint64_t)j >= objc_msgSend_count(v74, v110, v111, v112, v113)) {
        break;
      }
      long long v118 = sub_1DDB65E24(v74, (const char *)__p, v115, v116, v117);
      if (objc_msgSend_length(v54, v119, v120, v121, v122))
      {
        if (!v83 || (objc_msgSend_isEqualToString_(v118, v123, (uint64_t)v83, v124, v125) & 1) == 0) {
          objc_msgSend_appendFormat_(v54, v123, @" or %@", v124, v125, v118);
        }
      }
      else
      {
        objc_msgSend_appendString_(v54, v123, (uint64_t)v118, v124, v125);
      }
    }
  }
  else
  {
    id v54 = v129;
  }

LABEL_74:
  __p[0] = &v138;
  sub_1DDBB5984((void ***)__p);

  return v54;
}

void sub_1DDBC92A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  long long __p = &a35;
  sub_1DDBB5984((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1DDBC93D8(uint64_t a1)
{
  BOOL v2 = sub_1DDBA1778(a1);
  int v3 = sub_1DDBA64D4(v2, @"{PictStyleSetting}", @"PictureStyle");

  if (objc_msgSend_count(v3, v4, v5, v6, v7))
  {
    uint64_t v53 = 0;
    uint64_t v11 = sub_1DDB66788(v3, (const char *)&v53, v8, v9, v10);
    int v12 = v11;
    uint64_t v13 = sub_1DDBC9894(v11, v11);
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictureStyle", v13, (float)v12, (float)v12);
  }
  uint64_t v14 = sub_1DDBA1778(a1);
  uint64_t v15 = sub_1DDBA64D4(v14, @"{PictStyleSetting}", @"ColorTone");

  if (objc_msgSend_count(v15, v16, v17, v18, v19))
  {
    uint64_t v53 = 0;
    int v23 = sub_1DDB66788(v15, (const char *)&v53, v20, v21, v22);
    int v24 = v23;
    if (v23 > 5) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = off_1E6D06F48[v23];
    }
    sub_1DDBA4BE8(a1, @"{PictureStyle}", @"ColorTone", v25, (float)v23, (float)v23);
    BOOL v26 = v24 == 5;
  }
  else
  {
    BOOL v26 = 0;
  }
  uint64_t v27 = sub_1DDBA1778(a1);
  BOOL v28 = sub_1DDBA6568(v27, @"{PictStyleSetting}", @"Hue");

  if (v28)
  {
    uint64_t v29 = sub_1DDBA1778(a1);
    int v30 = sub_1DDBA65E8(v29, @"{PictStyleSetting}", @"Hue");

    sub_1DDBA4B30(a1, @"Hue", v30);
  }
  uint64_t v31 = sub_1DDBA1778(a1);
  BOOL v32 = sub_1DDBA6568(v31, @"{PictStyleSetting}", @"FineSharpness");

  if (v32)
  {
    double v33 = sub_1DDBA1778(a1);
    int v34 = sub_1DDBA65E8(v33, @"{PictStyleSetting}", @"FineSharpness");

    sub_1DDBA4B30(a1, @"FineSharpness", v34);
  }
  uint64_t v35 = sub_1DDBA1778(a1);
  BOOL v36 = sub_1DDBA6568(v35, @"{PictStyleSetting}", @"ShadowCompensation");

  if (v36)
  {
    double v37 = sub_1DDBA1778(a1);
    int v38 = sub_1DDBA65E8(v37, @"{PictStyleSetting}", @"ShadowCompensation");

    sub_1DDBA4B30(a1, @"ShadowCompensation", v38);
  }
  uint64_t v39 = sub_1DDBA1778(a1);
  uint64_t v40 = sub_1DDA2E3A8(v39, @"{PictureStyle}", 0);

  if (v40)
  {
    double v41 = sub_1DDBA1778(a1);
    BOOL v42 = sub_1DDBA6568(v41, @"{PictureStyle}", @"Monochrome");

    if (!v42) {
      sub_1DDBA4B30(a1, @"Monochrome", v26);
    }
    int v43 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
    if ((v43 & 0x80000000) == 0)
    {
      uint64_t v44 = sub_1DDBA4D7C(a1, v43);
      sub_1DDBA4BE8(a1, @"{PictureStyle}", @"PictStyleColorSpace", v44, (float)v43, (float)v43);
    }
  }
  double v45 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v45, v46, @"{PictStyleSetting}", v47, v48);

  uint64_t v49 = sub_1DDBA1778(a1);
  objc_msgSend_removeObjectForKey_(v49, v50, @"{PictStyleNormalized}", v51, v52);
}

void sub_1DDBC97D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *sub_1DDBC9894(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      uint64_t result = @"Program";
      break;
    case 1:
      uint64_t result = @"Shutter Speed Priority";
      break;
    case 2:
      uint64_t result = @"Program AE";
      break;
    case 3:
      uint64_t result = @"Manual";
      break;
    case 4:
    case 10:
    case 16:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 32:
    case 34:
    case 35:
    case 36:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 52:
    case 57:
    case 59:
    case 62:
    case 63:
    case 64:
      return result;
    case 5:
      uint64_t result = @"Portrait";
      break;
    case 6:
      uint64_t result = @"Landscape";
      break;
    case 7:
      uint64_t result = @"?";
      break;
    case 8:
      uint64_t result = @"Sport";
      break;
    case 9:
      uint64_t result = @"Night Scene";
      break;
    case 11:
      uint64_t result = @"Soft";
      break;
    case 12:
      uint64_t result = @"Surf and Snow";
      break;
    case 13:
    case 54:
      uint64_t result = @"Candlelight";
      break;
    case 14:
      uint64_t result = @"Autumn";
      break;
    case 15:
      uint64_t result = @"Macro";
      break;
    case 17:
      uint64_t result = @"Fireworks";
      break;
    case 18:
      uint64_t result = @"Text";
      break;
    case 19:
      uint64_t result = @"Panorama";
      break;
    case 30:
      uint64_t result = @"Self Portrait";
      break;
    case 31:
      uint64_t result = @"Illustrations";
      break;
    case 33:
      uint64_t result = @"Digital Filter";
      break;
    case 37:
      uint64_t result = @"Museum";
      break;
    case 38:
      uint64_t result = @"Food";
      break;
    case 40:
      uint64_t result = @"Green Mode";
      break;
    case 49:
      uint64_t result = @"Light Pet";
      break;
    case 50:
      uint64_t result = @"Dark Pet";
      break;
    case 51:
      uint64_t result = @"Medium Pet";
      break;
    case 53:
      uint64_t result = @"Underwater";
      break;
    case 55:
      uint64_t result = @"Natural Skin Tone";
      break;
    case 56:
      uint64_t result = @"Synchro Sound Record";
      break;
    case 58:
      uint64_t result = @"Frame Composite";
      break;
    case 60:
      uint64_t result = @"Kids";
      break;
    case 61:
      uint64_t result = @"Blur Reduction";
      break;
    case 65:
      uint64_t result = @"Half-length Portrait";
      break;
    default:
      if (a2 == 255) {
        uint64_t result = @"Digital Filter";
      }
      else {
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

void sub_1DDBC9B6C(uint64_t a1)
{
  BOOL v2 = sub_1DDBA1778(a1);
  int v3 = (void *)*MEMORY[0x1E4F2F6D8];
  uint64_t v4 = sub_1DDBA64D4(v2, (void *)*MEMORY[0x1E4F2F6D8], @"ImageStabilization");

  if ((unint64_t)objc_msgSend_count(v4, v5, v6, v7, v8) < 2)
  {
    uint64_t v21 = sub_1DDBA1778(a1);
    sub_1DDBA6668(v21, v3, @"ImageStabilization");
  }
  else
  {
    uint64_t v26 = 0;
    int v12 = sub_1DDB66788(v4, (const char *)&v26, v9, v10, v11);
    uint64_t v26 = 1;
    char v16 = sub_1DDB66788(v4, (const char *)&v26, v13, v14, v15);
    if ((v12 & 0x42) != 0) {
      int v17 = 131;
    }
    else {
      int v17 = 3;
    }
    if (v12) {
      int v18 = 7;
    }
    else {
      int v18 = v17;
    }
    if (v12) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = 131;
    }
    if (v16) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = sub_1DDBA1778(a1);
    uint64_t v25 = objc_msgSend_numberWithInt_(NSNumber, v22, v20, v23, v24);
    sub_1DDA784D0(v21, v3, @"ImageStabilization", v25);
  }
}

void sub_1DDBC9CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC9CF0(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  uint64_t v15 = 0;
  v16[0] = 0;
  *(void *)((char *)v16 + 5) = 0;
  if (sub_1DDBA1314((uint64_t)a1, (uint64_t)&v15, 20, a5, a3) == 20)
  {
    if (a7)
    {
      sub_1DDBA5A38(a1, @"IFD0", word_1F398BC38, a3, a5, a6);
LABEL_9:
      sub_1DDBA5A38(a1, v12, word_1F398BC88, a3, a5, a6);
      (*(void (**)(unsigned char *))(*(void *)a1 + 160))(a1);
      uint64_t v13 = 1;
      goto LABEL_10;
    }
    if (v15 == 4411201)
    {
      a3 += 6;
      sub_1DDBA5A38(a1, @"IFD0", word_1F398BC38, a3, a5, a6);
      goto LABEL_9;
    }
    if (v15 == 0x205841544E4550)
    {
      a3 += 10;
      sub_1DDBA5A38(a1, @"IFD0", word_1F398BC38, a3, a5, a6);
      goto LABEL_9;
    }
  }
  uint64_t v13 = 0;
LABEL_10:

  return v13;
}

void sub_1DDBC9E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC9EB4(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[2] = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  uint64_t v11 = 0;
  v12[0] = 0;
  *(void *)((char *)v12 + 5) = 0;
  if (sub_1DDBA1314((uint64_t)a1, (uint64_t)&v11, 20, a4, a3) == 20) {
    sub_1DDBA6FA8(a1, v9, a3, a4, a5);
  }

  return 1;
}

void sub_1DDBC9FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBC9FFC(uint64_t a1)
{
  BOOL v2 = sub_1DDBA1778(a1);
  int v3 = (void *)*MEMORY[0x1E4F2F7C0];
  BOOL v4 = sub_1DDBA6568(v2, @"{PictStyleSetting}", (void *)*MEMORY[0x1E4F2F7C0]);

  if (v4)
  {
    uint64_t v5 = sub_1DDBA1778(a1);
    unsigned int v6 = sub_1DDBA65E8(v5, @"{PictStyleSetting}", v3);

    if (v6 < 0x100) {
      return v6 + 1;
    }
    else {
      return 0xFFFFLL;
    }
  }
  else
  {
    uint64_t v8 = sub_1DDBA91F8(a1);
    BOOL v9 = sub_1DDA2E4E0(v8, v3);

    if (v9)
    {
      uint64_t v10 = sub_1DDBA91F8(a1);
      uint64_t v7 = sub_1DDA2E1C4(v10, (const char *)v3, v11, v12, v13);
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

void sub_1DDBCA0EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBCA108(uint64_t a1, int a2, unsigned int a3, long long *a4, uint64_t *a5)
{
  if (a2 <= 76705)
  {
    if (a2 <= 76639)
    {
      if (a2 != 76180 && a2 != 76450 && a2 != 76570) {
        goto LABEL_57;
      }
    }
    else
    {
      char v7 = a2 - 96;
      if ((a2 - 76640) > 0x3D) {
        goto LABEL_57;
      }
      if (((1 << v7) & 0x140000005) == 0)
      {
        if (((1 << v7) & 0x3000000000000000) != 0) {
          goto LABEL_25;
        }
        goto LABEL_57;
      }
    }
    int v8 = 65;
    int v9 = 70;
    int v10 = 135;
    int v11 = 45;
    int v12 = 50;
    int v13 = 1150;
    int v14 = 400;
    int v15 = 575;
    uint64_t v16 = 0x7E800000BE0;
    goto LABEL_26;
  }
  if (a2 <= 77049)
  {
    if (a2 <= 76831)
    {
      if (a2 != 76706)
      {
        unsigned __int16 v6 = 11294;
LABEL_22:
        if (a2 != (v6 | 0x10000)) {
          goto LABEL_57;
        }
      }
    }
    else if (a2 != 76832 && a2 != 77010)
    {
      unsigned __int16 v6 = 11476;
      goto LABEL_22;
    }
LABEL_25:
    int v8 = 65;
    int v9 = 70;
    int v10 = 135;
    int v11 = 45;
    int v12 = 50;
    int v13 = 1150;
    int v14 = 400;
    int v15 = 575;
    uint64_t v16 = 0xA2000000F20;
    goto LABEL_26;
  }
  if (a2 > 77419)
  {
    if (a2 == 77420)
    {
      int v8 = 72;
      int v9 = 78;
      int v10 = 150;
      int v11 = 50;
      int v12 = 55;
      int v13 = 1275;
      int v14 = 440;
      int v15 = 637;
      uint64_t v16 = 0xB20000010C0;
LABEL_26:
      *a5 = v16;
      int v18 = 0;
      switch(a3)
      {
        case 0u:
          goto LABEL_34;
        case 1u:
          break;
        case 2u:
          goto LABEL_42;
        case 3u:
          int v14 = 0;
          int v18 = -v13;
          goto LABEL_37;
        case 4u:
          int v14 = 0;
LABEL_34:
          int v18 = -v15;
          break;
        case 5u:
        case 0xBu:
          int v18 = 0;
          int v14 = 0;
          int v12 = v9;
          int v11 = v8;
          break;
        case 6u:
          int v14 = 0;
          goto LABEL_42;
        case 7u:
          int v14 = 0;
          int v18 = v13;
LABEL_37:
          int v11 = v10;
          break;
        case 8u:
          int v18 = -v15;
          goto LABEL_40;
        case 9u:
          int v18 = 0;
LABEL_40:
          int v14 = -v14;
          break;
        case 0xAu:
          int v14 = -v14;
LABEL_42:
          int v18 = v15;
          break;
        default:
          return 0;
      }
      if (a2 == 76570)
      {
        if (a3 > 0xB) {
          goto LABEL_53;
        }
        int v20 = 1 << a3;
        int v21 = 2160;
      }
      else
      {
        if (a2 != 76672 && a2 != 76670) {
          goto LABEL_51;
        }
        if (a3 > 0xB) {
          goto LABEL_53;
        }
        int v20 = 1 << a3;
        int v21 = 2674;
      }
      if ((v20 & v21) != 0)
      {
LABEL_51:
        *(void *)&long long v22 = __PAIR64__(v14, v18);
        sub_1DDA18218((_DWORD *)&v22 + 2, v12, v11);
        long long v17 = v22;
LABEL_52:
        *a4 = v17;
        return 1;
      }
LABEL_53:
      int v18 = 0;
      int v14 = 0;
      int v12 = 0;
      int v11 = 0;
      goto LABEL_51;
    }
    if (a2 == 77430)
    {
      int v8 = 83;
      int v9 = 90;
      int v10 = 172;
      int v11 = 57;
      int v12 = 63;
      int v13 = 1465;
      int v14 = 504;
      int v15 = 732;
      uint64_t v16 = 0xCC000001340;
      goto LABEL_26;
    }
  }
  else
  {
    if ((a2 - 77170) < 2)
    {
      *a5 = 0xA2000000F20;
      if (a3 == 1)
      {
        long long v17 = xmmword_1DDC0C8E0;
      }
      else
      {
        if (a3) {
          return 0;
        }
        long long v17 = xmmword_1DDC0C8F0;
      }
      goto LABEL_52;
    }
    if (a2 == 77050)
    {
      int v8 = 65;
      int v9 = 70;
      int v10 = 150;
      int v12 = 55;
      int v13 = 1320;
      int v14 = 480;
      int v15 = 660;
      uint64_t v16 = 0xA2000000F20;
      int v11 = 55;
      goto LABEL_26;
    }
  }
LABEL_57:
  uint64_t result = 0;
  *a5 = 0xA2000000F20;
  return result;
}

void sub_1DDBCA500(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a3 | a2)
  {
    int v3 = (char *)a1;
    unsigned int v4 = 0;
    unsigned int v5 = *(_DWORD *)(a1 + 196);
    if (v5 >> 1 == 38585) {
      unint64_t v6 = 0;
    }
    else {
      unint64_t v6 = a3;
    }
    if (v5 >> 1 == 38585) {
      unint64_t v7 = 0;
    }
    else {
      unint64_t v7 = a2;
    }
    long long __p = 0;
    long long v22 = 0;
    unint64_t v23 = 0;
    uint64_t v20 = 0;
    unsigned __int16 v8 = 100;
    do
    {
      long long v19 = 0uLL;
      a1 = sub_1DDBCA108(a1, v5, (unsigned __int16)v4, &v19, &v20);
      if (a1)
      {
        int v9 = v22;
        if ((unint64_t)v22 >= v23)
        {
          uint64_t v11 = (v22 - (unsigned char *)__p) >> 4;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 60) {
            sub_1DDA17F78();
          }
          uint64_t v13 = v23 - (void)__p;
          if ((uint64_t)(v23 - (void)__p) >> 3 > v12) {
            unint64_t v12 = v13 >> 3;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14) {
            a1 = (uint64_t)sub_1DDA19838((uint64_t)&v23, v14);
          }
          else {
            a1 = 0;
          }
          int v15 = (char *)(a1 + 16 * v11);
          *(_OWORD *)int v15 = v19;
          long long v17 = (char *)__p;
          uint64_t v16 = v22;
          int v18 = v15;
          if (v22 != __p)
          {
            do
            {
              *((_OWORD *)v18 - 1) = *((_OWORD *)v16 - 1);
              v18 -= 16;
              v16 -= 16;
            }
            while (v16 != v17);
            uint64_t v16 = (char *)__p;
          }
          int v10 = v15 + 16;
          long long __p = v18;
          long long v22 = v15 + 16;
          unint64_t v23 = a1 + 16 * v14;
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(_OWORD *)long long v22 = v19;
          int v10 = v9 + 16;
        }
        long long v22 = v10;
        ++v4;
      }
      else
      {
        unsigned __int16 v8 = v4;
      }
    }
    while (v4 < v8);
    if (v8)
    {
      sub_1DDBA9530((uint64_t)v3, &v20, 1);
      sub_1DDBA96A8(v3, v6, 0, v6 != 0);
      sub_1DDBA9554(v3, v7, 0, v7 != 0);
      sub_1DDBA94FC(v3, (uint64_t)&__p, 1);
      sub_1DDBA4174((uint64_t)v3, 0, 0, (void (*)(uint64_t, void))sub_1DDBCA734);
    }
    if (__p)
    {
      long long v22 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1DDBCA70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFString *sub_1DDBCA734(__CFString *result, unsigned int a2)
{
  if (result)
  {
    int v3 = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F39869C0, (const struct __class_type_info *)&unk_1F398C1A0, 0);
    uint64_t result = 0;
    if (v3) {
      BOOL v4 = a2 > 0xB;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4) {
      return off_1E6D06F78[(__int16)a2];
    }
  }
  return result;
}

void sub_1DDBCA7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6 = *(_DWORD *)(a4 + 4);
  if (v6 >= 0xC8) {
    size_t v7 = 200;
  }
  else {
    size_t v7 = v6;
  }
  if (v7 >= 0x21)
  {
    unint64_t v12 = sub_1DDBA1778(a1);
    uint64_t v13 = sub_1DDB6DAE4(v12, (void *)*MEMORY[0x1E4F2FD40], (void *)*MEMORY[0x1E4F2FD68]);

    sub_1DDA4B108(&__p, v7);
    unsigned int v14 = *(_DWORD *)(a4 + 8);
    unsigned int v15 = bswap32(v14);
    if (a6) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v14;
    }
    uint64_t v17 = sub_1DDBA1314(a1, (uint64_t)__p, v31 - (unsigned char *)__p, a5, v16);
    int v18 = (unsigned __int8 *)__p;
    if (v17 == v31 - (unsigned char *)__p)
    {
      if (sub_1DDB9FCD0(v13, @"*ist", 0)
        || sub_1DDB9FCD0(v13, @"GX-1S", 0)
        || sub_1DDB9FCD0(v13, @"GX-1L", 0)
        || (sub_1DDB9FCD0(v13, @"K100D", 0) || sub_1DDB9FCD0(v13, @"K110D", 0))
        && (v18[20] == 255 || !v18[20] && !v18[21]))
      {
        uint64_t v19 = 17;
      }
      else if ((unint64_t)(v31 - (unsigned char *)__p) >= 0x5A)
      {
        uint64_t v19 = 26;
        if (v31 - (unsigned char *)__p == 90) {
          uint64_t v19 = 27;
        }
      }
      else
      {
        uint64_t v19 = 18;
      }
      int v18 = (unsigned __int8 *)__p;
      int v20 = *((char *)__p + v19);
      if (v20 < 2) {
        goto LABEL_16;
      }
      long double v21 = exp2(((double)v20 + -1.0) * 0.03125);
      uint64_t v26 = objc_msgSend_numberWithDouble_(NSNumber, v22, v23, v24, v25, (double)v21);
      uint64_t v27 = sub_1DDBA5730(a1, 1);
      objc_msgSend_setObject_forKeyedSubscript_(v27, v28, (uint64_t)v26, *MEMORY[0x1E4F2F8B0], v29);

      int v18 = (unsigned __int8 *)__p;
    }
    if (!v18)
    {
LABEL_17:

      return;
    }
LABEL_16:
    uint64_t v31 = v18;
    operator delete(v18);
    goto LABEL_17;
  }
}

void sub_1DDBCA9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DDBCAA2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v13 = a2;
  LOWORD(v9) = 0;
  unsigned int v10 = *(unsigned __int16 *)(a4 + 8);
  unsigned int v11 = bswap32(v10) >> 16;
  if (a6) {
    LOWORD(v10) = v11;
  }
  switch((__int16)v10)
  {
    case -4:
      unint64_t v12 = sub_1DDBA1778(a1);
      sub_1DDA784D0(v12, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58], &unk_1F39AFAE8);

      LOWORD(v9) = 0;
      goto LABEL_9;
    case -3:
    case -1:
      goto LABEL_9;
    case -2:
      LOWORD(v9) = 32;
      goto LABEL_9;
    default:
      if (!(_WORD)v10) {
        goto LABEL_9;
      }
      if ((unsigned __int16)v10 <= 0x10u)
      {
        int v9 = 1 << (v10 - 1);
LABEL_9:
        sub_1DDBCA500(a1, (unsigned __int16)v9, 0);
      }

      return;
  }
}

void sub_1DDBCAB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBCAB6C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10 = a2;
  if (*(_DWORD *)(a4 + 4) >= 6u)
  {
    unsigned int v11 = *(_DWORD *)(a4 + 8);
    unsigned int v12 = bswap32(v11);
    if (a6) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = v11;
    }
    unsigned int v14 = sub_1DDBA1778(a1);
    unsigned int v15 = (void *)*MEMORY[0x1E4F2F6D8];
    uint64_t v16 = (void *)*MEMORY[0x1E4F2FC58];
    BOOL v17 = sub_1DDBA6568(v14, (void *)*MEMORY[0x1E4F2F6D8], (void *)*MEMORY[0x1E4F2FC58]);

    if (!v17)
    {
      unsigned __int8 v28 = 0;
      uint64_t v18 = (v13 + 3) << 31 >> 31;
      if (v18 != v13 + 3 || v18 < 0) {
        goto LABEL_22;
      }
      if (sub_1DDBA1314(a1, (uint64_t)&v28, 1, a5, v18 & 0x1FFFFFFFFLL) == 1)
      {
        if ((v28 & 0xF) != 0) {
          unsigned __int8 v28 = 1;
        }
        uint64_t v19 = sub_1DDBA1778(a1);
        uint64_t v23 = objc_msgSend_numberWithInt_(NSNumber, v20, v28, v21, v22);
        sub_1DDA784D0(v19, v15, v16, v23);
      }
    }
    unsigned __int16 v27 = 0;
    uint64_t v24 = (v13 + 4) << 31 >> 31;
    if (v24 == v13 + 4 && (v24 & 0x8000000000000000) == 0)
    {
      if (sub_1DDBA1314(a1, (uint64_t)&v27, 2, a5, v24 & 0x1FFFFFFFFLL) == 2)
      {
        unsigned __int16 v25 = v27;
        unsigned int v26 = bswap32(v27) >> 16;
        if (a6) {
          unsigned __int16 v25 = v26;
        }
        unsigned __int16 v27 = v25;
        if (!v25) {
          unsigned __int16 v25 = 2047;
        }
      }
      else
      {
        unsigned __int16 v25 = 0;
      }
      sub_1DDBCA500(a1, v25, 0);
    }
  }
LABEL_22:
}

void sub_1DDBCAD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBCAD60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10 = a2;
  if (*(_DWORD *)(a4 + 4) >= 0xCu)
  {
    unsigned int v11 = *(_DWORD *)(a4 + 8);
    unsigned int v12 = bswap32(v11);
    if (a6) {
      unsigned int v11 = v12;
    }
    if (v11 <= 0xFFFFFFF3)
    {
      char v17 = 0;
      if (sub_1DDBA1314(a1, (uint64_t)&v17, 1, a5, v11 + 11) == 1)
      {
        unsigned int v13 = 0;
        unsigned int v14 = 0;
        char v15 = 9;
        char v16 = 8;
        switch(v17)
        {
          case 0:
            break;
          case 1:
            goto LABEL_30;
          case 2:
            goto LABEL_19;
          case 3:
            goto LABEL_22;
          case 4:
            char v15 = 5;
            char v16 = 4;
            goto LABEL_30;
          case 5:
            char v16 = 5;
            char v15 = 5;
            goto LABEL_30;
          case 6:
            char v15 = 5;
            char v16 = 6;
            goto LABEL_30;
          case 7:
            char v16 = 0;
            goto LABEL_14;
          case 8:
            char v16 = 1;
LABEL_14:
            char v15 = 1;
            goto LABEL_30;
          case 9:
            char v15 = 1;
            goto LABEL_24;
          case 10:
            char v16 = 7;
            char v15 = 7;
            goto LABEL_30;
          case 11:
            goto LABEL_27;
          case 12:
            char v16 = 0;
            goto LABEL_27;
          case 13:
            char v15 = 5;
LABEL_19:
            char v16 = 9;
            goto LABEL_30;
          case 14:
            char v15 = 5;
            char v16 = 1;
            goto LABEL_30;
          case 15:
            char v15 = 6;
LABEL_22:
            char v16 = 10;
            goto LABEL_30;
          case 16:
            char v15 = 6;
LABEL_24:
            char v16 = 2;
            goto LABEL_30;
          case 17:
            char v16 = 3;
            char v15 = 3;
            goto LABEL_30;
          case 18:
            char v16 = 4;
LABEL_27:
            char v15 = 4;
            goto LABEL_30;
          case 19:
            char v16 = 11;
            char v15 = 11;
            goto LABEL_30;
          case 20:
            char v16 = 6;
            char v15 = 6;
LABEL_30:
            unsigned int v13 = 1 << v16;
            unsigned int v14 = (1 << v15) | (1 << v16);
            break;
          default:
            unsigned int v13 = 0;
            unsigned int v14 = 0;
            char v17 = 0;
            break;
        }
      }
      else
      {
        unsigned int v13 = 0;
        unsigned int v14 = 0;
      }
      sub_1DDBCA500(a1, v13, v14);
    }
  }
}

void sub_1DDBCAF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBCAF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6 = *(_DWORD *)(a4 + 8);
  unsigned int v7 = bswap32(v6);
  if (a6) {
    unsigned int v6 = v7;
  }
  *(_DWORD *)(a1 + 196) = v6;
  if ((*(_WORD *)(a3 + 32) & 4) != 0)
  {
    sub_1DDBA1778(a1);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    id v10 = sub_1DDBA17F8(a3);
    unsigned int v11 = sub_1DDBA175C(a3);
    char v15 = objc_msgSend_numberWithInt_(NSNumber, v12, *(unsigned int *)(a1 + 196), v13, v14);
    sub_1DDA784D0(v16, v10, v11, v15);
  }
}

void sub_1DDBCB058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1DDBCB084(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  sub_1DDBA1CE4(a1, a2, a3, a4, a5, a6);
  unsigned __int16 v8 = sub_1DDBA1778(a1);
  int v9 = sub_1DDBA17F8(a3);
  id v10 = sub_1DDA7A98C(v8, v9, 0);

  sub_1DDBA175C(a3);
  unsigned int v11 = (char *)objc_claimAutoreleasedReturnValue();
  char v15 = sub_1DDA83A80(v10, v11, v12, v13, v14);

  if (v15) {
    BOOL v20 = objc_msgSend_count(v15, v16, v17, v18, v19) != 0;
  }
  else {
    BOOL v20 = 0;
  }
  uint64_t v35 = 0;
  uint64_t v21 = sub_1DDB66788(v15, (const char *)&v35, v17, v18, v19);
  uint64_t v22 = sub_1DDBA175C(a3);
  objc_msgSend_removeObjectForKey_(v10, v23, (uint64_t)v22, v24, v25);

  char v29 = !v20;
  if (v21 == 0xFFFF) {
    char v29 = 1;
  }
  if ((v29 & 1) == 0)
  {
    if ((int)v21 <= 8) {
      uint64_t v21 = dword_1DDC0C900[(int)v21];
    }
    int v30 = objc_msgSend_numberWithInt_(NSNumber, v26, v21, v27, v28);
    uint64_t v31 = sub_1DDBA175C(a3);
    objc_msgSend_setObject_forKeyedSubscript_(v10, v32, (uint64_t)v30, (uint64_t)v31, v33);

    int v34 = sub_1DDBA175C(a3);
    sub_1DDBA4B30(a1, v34, v21);
  }
}

void sub_1DDBCB218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBCB258()
{
  JUMPOUT(0x1DDBCB24CLL);
}

void sub_1DDBCB264()
{
  JUMPOUT(0x1DDBCB250);
}

void sub_1DDBCB274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = *(unsigned __int16 *)(a4 + 8);
  sub_1DDBA1778(a1);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  unsigned int v6 = sub_1DDBA17F8(a3);
  id v10 = objc_msgSend_numberWithInt_(NSNumber, v7, __rev16(v5), v8, v9);
  sub_1DDA784D0(v11, v6, (void *)*MEMORY[0x1E4F2F6F8], v10);
}

void sub_1DDBCB318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDBCB33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a4 + 4) >= 5u) {
    unsigned int v6 = 5;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a4 + 4);
  }
  if (v6 >= 3)
  {
    LODWORD(v10) = *(_DWORD *)(a4 + 8);
    unsigned int v11 = bswap32(v10);
    uint64_t v10 = a6 ? v11 : v10;
    v27[0] = 0;
    v27[1] = 0;
    unsigned int v28 = 0;
    if (sub_1DDBA1314(a1, (uint64_t)v27, 20, a5, v10) == 20)
    {
      unsigned int v12 = v27[0];
      unsigned int v13 = bswap32(v27[0]);
      if (a6) {
        unsigned int v12 = v13;
      }
      *(_DWORD *)(a1 + 196) = v12;
      uint64_t v14 = sub_1DDBA1778(a1);
      uint64_t v18 = objc_msgSend_numberWithInt_(NSNumber, v15, *(unsigned int *)(a1 + 196), v16, v17);
      sub_1DDA784D0(v14, @"{MakerPentax}", @"PentaxModelID", v18);

      if (v6 >= 5)
      {
        unsigned int v22 = bswap32(v28);
        if (a6) {
          objc_msgSend_stringWithFormat_(NSString, v19, @"%u", v20, v21, v22);
        }
        else {
        uint64_t v23 = objc_msgSend_stringWithFormat_(NSString, v19, @"%u", v20, v21, v28);
        }
        uint64_t v24 = sub_1DDBA1778(a1);
        uint64_t v25 = sub_1DDBA17F8(a3);
        unsigned int v26 = sub_1DDBA175C(a3);
        sub_1DDA784D0(v24, v25, v26, v23);
      }
    }
  }
}

void sub_1DDBCB4E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDBCB520(uint64_t a1)
{
  sub_1DDBAA3F4(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDBCB558(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xE0uLL);
  sub_1DDBCB5E4((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1DDA1AF34((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1DDBCB5D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDBCB5E4(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F398C1C8;
  sub_1DDBAA64C(a1 + 24, a2, *a3, *a4);
  *(void *)(a1 + 24) = &unk_1F398C0D0;
  *(_DWORD *)(a1 + 220) = -1;
  return a1;
}

void sub_1DDBCB658(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDBCB66C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398C1C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDBCB68C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F398C1C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDBCB6E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

uint64_t sub_1DDBCB708(uint64_t a1, int a2, uint64_t *a3)
{
  unsigned int v5 = (void *)sub_1DDBF0D7C(a1, a2);
  *unsigned int v5 = &unk_1F398C218;
  v5[6] = 0;
  unsigned int v6 = (void **)(v5 + 6);
  v5[7] = 0;
  v5[8] = 0;
  *(_DWORD *)(a1 + 12) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1DDA19EC8(*a3);
  unsigned int v7 = sub_1DDA19EC8(*a3);
  unsigned int v8 = 0;
  do
  {
    double v9 = sub_1DDA1A030(*a3);
    double v10 = v9;
    unsigned int v12 = *(double **)(a1 + 56);
    unint64_t v11 = *(void *)(a1 + 64);
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (double *)*v6;
      uint64_t v15 = ((char *)v12 - (unsigned char *)*v6) >> 3;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        sub_1DDA17F78();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 2 > v16) {
        unint64_t v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        uint64_t v19 = (char *)sub_1DDA1814C(a1 + 64, v18);
        uint64_t v14 = *(double **)(a1 + 48);
        unsigned int v12 = *(double **)(a1 + 56);
      }
      else
      {
        uint64_t v19 = 0;
      }
      uint64_t v20 = (double *)&v19[8 * v15];
      double *v20 = v10;
      unsigned int v13 = v20 + 1;
      while (v12 != v14)
      {
        uint64_t v21 = *((void *)v12-- - 1);
        *((void *)v20-- - 1) = v21;
      }
      *(void *)(a1 + 48) = v20;
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = &v19[8 * v18];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *unsigned int v12 = v9;
      unsigned int v13 = v12 + 1;
    }
    *(void *)(a1 + 56) = v13;
    ++v8;
  }
  while (v8 <= v7);
  return a1;
}

void sub_1DDBCB8C0(_Unwind_Exception *exception_object)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}