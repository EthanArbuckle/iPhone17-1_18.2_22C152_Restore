char *sub_1DDA9F140@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  result = sub_1DDA9F1AC(v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1DDA9F194(_Unwind_Exception *a1)
{
  sub_1DDA9F220(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_1DDA9F1AC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1DDA2639C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  sub_1DDAD80DC(__dst + 24);
  return __dst;
}

void sub_1DDA9F204(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDA9F220(uint64_t a1, uint64_t a2)
{
  v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1DDA9EEA4((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_1DDA9F278(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  v6 = (uint64_t **)sub_1DDA4B7C4((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1DDA9F310((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1DDA25078(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_1DDA9F310@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_1DDA2639C(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1DDA9F39C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1DDA4B900(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_1DDA9F3B8@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x50uLL);
  result = sub_1DDA9F41C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDA9F408(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDA9F41C(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39616D0;
  sub_1DDB471E8(a1 + 3, *a2);
  return a1;
}

void sub_1DDA9F468(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDA9F47C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39616D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDA9F49C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39616D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDA9F4F0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDA9F518@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x50uLL);
  result = sub_1DDA9F57C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDA9F568(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDA9F57C(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961720;
  sub_1DDAD76AC(a1 + 3, *a2);
  return a1;
}

void sub_1DDA9F5C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDA9F5DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDA9F5FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961720;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDA9F650(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDA9F678@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x50uLL);
  result = sub_1DDA9F6DC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDA9F6C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDA9F6DC(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961770;
  sub_1DDBEF200(a1 + 3, *a2);
  return a1;
}

void sub_1DDA9F728(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDA9F73C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDA9F75C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961770;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDA9F7B0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDA9F7D8@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x30uLL);
  result = sub_1DDA9F83C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDA9F828(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDA9F83C(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39617C0;
  sub_1DDB19684(a1 + 3, *a2);
  return a1;
}

void sub_1DDA9F888(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDA9F89C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39617C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDA9F8BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39617C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDA9F910(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDA9F938@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x58uLL);
  result = sub_1DDA9F99C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDA9F988(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDA9F99C(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961810;
  sub_1DDB3A8C0(a1 + 3, *a2);
  return a1;
}

void sub_1DDA9F9E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDA9F9FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDA9FA1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961810;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDA9FA70(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDA9FA98@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x38uLL);
  result = sub_1DDA9FAFC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDA9FAE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDA9FAFC(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961860;
  sub_1DDAF8B20(a1 + 3, *a2);
  return a1;
}

void sub_1DDA9FB48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDA9FB5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDA9FB7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961860;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDA9FBD0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDA9FBF8@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x60uLL);
  result = sub_1DDA9FC5C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDA9FC48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDA9FC5C(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39618B0;
  sub_1DDBC2BA8(a1 + 3, *a2);
  return a1;
}

void sub_1DDA9FCA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDA9FCBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39618B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDA9FCDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39618B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDA9FD30(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDA9FD58@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x60uLL);
  result = sub_1DDA9FDBC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDA9FDA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDA9FDBC(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961900;
  sub_1DDBCB8E8(a1 + 3, *a2);
  return a1;
}

void sub_1DDA9FE08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDA9FE1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDA9FE3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961900;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDA9FE90(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDA9FEB8@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x90uLL);
  result = sub_1DDA9FF1C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDA9FF08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDA9FF1C(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961950;
  sub_1DDB0E120(a1 + 3, *a2);
  return a1;
}

void sub_1DDA9FF68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDA9FF7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDA9FF9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961950;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDA9FFF0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDAA0018@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x60uLL);
  result = sub_1DDAA007C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDAA0068(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA007C(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39619A0;
  sub_1DDAECC44(a1 + 3, *a2);
  return a1;
}

void sub_1DDAA00C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA00DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39619A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA00FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39619A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA0150(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDAA0178@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x60uLL);
  result = sub_1DDAA01DC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDAA01C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA01DC(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39619F0;
  sub_1DDB65098(a1 + 3, *a2);
  return a1;
}

void sub_1DDAA0228(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA023C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39619F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA025C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39619F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA02B0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDAA02D8@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x60uLL);
  result = sub_1DDAA033C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDAA0328(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA033C(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961A40;
  sub_1DDB5875C(a1 + 3, *a2);
  return a1;
}

void sub_1DDAA0388(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA039C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA03BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961A40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA0410(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDAA0438@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x60uLL);
  result = sub_1DDAA049C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDAA0488(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA049C(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961A90;
  sub_1DDA7C524(a1 + 3, *a2);
  return a1;
}

void sub_1DDAA04E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA04FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA051C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961A90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA0570(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDAA0598@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  v4 = operator new(0x70uLL);
  result = sub_1DDAA05FC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDAA05E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA05FC(void *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961AE0;
  sub_1DDAD0A60(a1 + 3, *a2);
  return a1;
}

void sub_1DDAA0648(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA065C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA067C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA06D0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAA06F8(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, char *a5@<X5>, void *a6@<X8>)
{
  v12 = operator new(0x158uLL);
  sub_1DDAA079C(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDAA0788(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA079C(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5, char *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961B30;
  sub_1DDAA089C(a1 + 3, a2, *a3, a4, a5, *a6);
  return a1;
}

void sub_1DDAA07EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA0800(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA0820(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961B30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA0874(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDAA089C(void *a1, void *a2, unint64_t a3, void *a4, _OWORD *a5, char a6)
{
  uint64_t v8 = sub_1DDAA58A8((uint64_t)a1, a2, a3, a4, a5);
  long long v9 = 0;
  int v10 = 0;
  *(void *)(v8 + 192) = 0;
  *(void *)(v8 + 200) = 0;
  *(_DWORD *)(v8 + 216) = 0;
  *(void *)(v8 + 208) = 0;
  *(_WORD *)(v8 + 220) = 1;
  *(void *)uint64_t v8 = &unk_1F3975EF0;
  v11 = (void **)(v8 + 288);
  *(void *)(v8 + 296) = 0;
  *(void *)(v8 + 304) = 0;
  *(void *)(v8 + 288) = 0;
  v12 = (void *)(v8 + 304);
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(void *)(v8 + 272) = 0;
  *(unsigned char *)(v8 + 312) = a6;
  *(unsigned char *)(v8 + 313) = 0;
  do
  {
    if ((unint64_t)v9 >= *v12)
    {
      v14 = (char *)*v11;
      uint64_t v15 = v9 - (unsigned char *)*v11;
      if (v15 <= -3) {
        sub_1DDA17F78();
      }
      uint64_t v16 = v15 >> 1;
      unint64_t v17 = *v12 - (void)v14;
      if (v17 <= (v15 >> 1) + 1) {
        uint64_t v18 = v16 + 1;
      }
      else {
        uint64_t v18 = *v12 - (void)v14;
      }
      if (v17 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v19 = v18;
      }
      if (v19)
      {
        v20 = (char *)sub_1DDA1AD0C((uint64_t)v12, v19);
        v14 = (char *)a1[36];
        long long v9 = (char *)a1[37];
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[2 * v16];
      *(_WORD *)v21 = v10;
      v13 = v21 + 2;
      while (v9 != v14)
      {
        __int16 v22 = *((_WORD *)v9 - 1);
        v9 -= 2;
        *((_WORD *)v21 - 1) = v22;
        v21 -= 2;
      }
      a1[36] = v21;
      a1[37] = v13;
      a1[38] = &v20[2 * v19];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_WORD *)long long v9 = v10;
      v13 = v9 + 2;
    }
    a1[37] = v13;
    ++v10;
    long long v9 = v13;
  }
  while (v10 != 0x10000);
  return a1;
}

void sub_1DDAA09FC(_Unwind_Exception *a1)
{
  v4 = *v2;
  if (*v2)
  {
    v1[37] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)v1[32];
  if (v5)
  {
    v1[33] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[29];
  if (v6)
  {
    v1[30] = v6;
    operator delete(v6);
  }
  sub_1DDAA0A44(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA0A44(void *a1)
{
  *a1 = &unk_1F3977E98;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDAA0AA4(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X5>, char *a6@<X6>, long long *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x178uLL);
  sub_1DDAA0B60(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;

  sub_1DDA1AF34((uint64_t)a8, v16 + 4, (uint64_t)(v16 + 3));
}

void sub_1DDAA0B4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA0B60(void *a1, void *a2, unint64_t *a3, void *a4, void *a5, _OWORD *a6, char *a7, long long *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961B80;
  sub_1DDAA0C58((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1DDAA0BA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA0BBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA0BDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961B80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA0C30(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDAA0C58(uint64_t a1, void *a2, unint64_t *a3, void *a4, void *a5, _OWORD *a6, char *a7, long long *a8)
{
  unint64_t v9 = *a3;
  char v10 = *a7;
  long long v12 = *a8;
  uint64_t v13 = *((void *)a8 + 2);
  *((void *)a8 + 1) = 0;
  *((void *)a8 + 2) = 0;
  *(void *)a8 = 0;
  sub_1DDAA0CD4(a1, a2, v9, a4, a5, a6, v10, (void **)&v12);
  v14 = (void **)&v12;
  sub_1DDA18270(&v14);
  return a1;
}

void sub_1DDAA0CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1DDA18270((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA0CD4(uint64_t a1, void *a2, unint64_t a3, void *a4, void *a5, _OWORD *a6, char a7, void **a8)
{
  uint64_t v12 = sub_1DDAA58A8(a1, a2, a3, a5, a6);
  *(void *)(v12 + 192) = 0;
  *(void *)(v12 + 200) = 0;
  *(_DWORD *)(v12 + 216) = 0;
  *(void *)(v12 + 208) = 0;
  *(_WORD *)(v12 + 220) = 1;
  *(void *)uint64_t v12 = &unk_1F3976058;
  *(_OWORD *)(v12 + 232) = 0u;
  *(unsigned char *)(v12 + 222) = a7;
  *(_OWORD *)(v12 + 248) = 0u;
  *(_OWORD *)(v12 + 264) = 0u;
  *(void *)(a1 + 280) = *a4;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  sub_1DDA1976C((void *)(v12 + 328), *a8, a8[1], ((char *)a8[1] - (char *)*a8) >> 4);
  return a1;
}

void sub_1DDAA0D98(_Unwind_Exception *a1)
{
  v6 = *v4;
  if (*v4)
  {
    v1[37] = v6;
    operator delete(v6);
  }
  sub_1DDBF49F8(v3, v2, (uint64_t)v1);
  sub_1DDAA0A44(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA0DCC(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  v14 = operator new(0x11C0uLL);
  sub_1DDAA0E78(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;

  sub_1DDA1AF34((uint64_t)a7, v14 + 4, (uint64_t)(v14 + 3));
}

void sub_1DDAA0E64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA0E78(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961BD0;
  sub_1DDAA0F70((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1DDAA0EC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA0ED4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA0EF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA0F48(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDAA0F70(uint64_t a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8 = *a3;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a6;
  uint64_t v13 = *(void *)(a6 + 16);
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)a6 = 0;
  *(_OWORD *)__p = *(_OWORD *)a7;
  uint64_t v11 = *(void *)(a7 + 16);
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  sub_1DDAA1020(a1, a2, v8, a4, a5, (long long *)v12, (long long *)__p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  return a1;
}

void sub_1DDAA0FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1DDBF4A54((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA1020(uint64_t a1, void *a2, unint64_t a3, void *a4, _OWORD *a5, long long *a6, long long *a7)
{
  uint64_t v10 = sub_1DDAA58A8(a1, a2, a3, a4, a5);
  *(void *)uint64_t v10 = &unk_1F3977FB0;
  *(_WORD *)(v10 + 248) = 0;
  *(void *)(v10 + 328) = 0;
  *(_DWORD *)(v10 + 336) = 0;
  *(_OWORD *)(v10 + 188) = 0u;
  *(void *)(v10 + 202) = 0;
  *(_OWORD *)(v10 + 304) = 0u;
  *(void *)(v10 + 318) = 0;
  *(_OWORD *)(v10 + 344) = 0u;
  *(_OWORD *)(v10 + 4456) = 0u;
  if (*((char *)a6 + 23) < 0)
  {
    sub_1DDA2639C((unsigned char *)(v10 + 4472), *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v11 = *a6;
    *(void *)(v10 + 4488) = *((void *)a6 + 2);
    *(_OWORD *)(v10 + 4472) = v11;
  }
  uint64_t v12 = (unsigned char *)(a1 + 4496);
  if (*((char *)a7 + 23) < 0)
  {
    sub_1DDA2639C(v12, *(void **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v13 = *a7;
    *(void *)(a1 + 4512) = *((void *)a7 + 2);
    *(_OWORD *)uint64_t v12 = v13;
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 258) = 0;
  *(void *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 266) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  bzero((void *)(a1 + 360), 0x1000uLL);
  return a1;
}

void sub_1DDAA1134(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 4495) < 0) {
    operator delete(*v2);
  }
  sub_1DDA18384((void *)v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA1164(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X5>, int *a6@<X6>, int *a7@<X7>, void *a8@<X8>, char *a9)
{
  unint64_t v17 = operator new(0x148uLL);
  sub_1DDAA1230((uint64_t)v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;

  sub_1DDA1AF34((uint64_t)a8, v17 + 4, (uint64_t)(v17 + 3));
}

void sub_1DDAA121C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA1230(uint64_t a1, void *a2, unint64_t *a3, void *a4, void *a5, _OWORD *a6, int *a7, int *a8, char *a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3961C20;
  int v11 = *a7;
  int v12 = *a8;
  char v13 = *a9;
  sub_1DDAA58A8(a1 + 24, a2, *a3, a5, a6);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 244) = 1;
  *(void *)(a1 + 24) = &unk_1F3978120;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = *a4;
  *(_DWORD *)(a1 + 312) = v11;
  *(_DWORD *)(a1 + 316) = v12;
  *(unsigned char *)(a1 + 320) = v13;
  return a1;
}

void sub_1DDAA12F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA130C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA132C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961C20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA1380(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAA13A8(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X5>, long long *a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x768uLL);
  sub_1DDAA1464(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;

  sub_1DDA1AF34((uint64_t)a8, v16 + 4, (uint64_t)(v16 + 3));
}

void sub_1DDAA1450(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA1464(void *a1, void *a2, unint64_t *a3, void *a4, void *a5, _OWORD *a6, long long *a7, uint64_t a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961C70;
  sub_1DDAA155C((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1DDAA14AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA14C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA14E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961C70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA1534(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDAA155C(uint64_t a1, void *a2, unint64_t *a3, void *a4, void *a5, _OWORD *a6, long long *a7, uint64_t a8)
{
  unint64_t v13 = *a3;
  long long v18 = *a7;
  uint64_t v19 = *((void *)a7 + 2);
  *((void *)a7 + 1) = 0;
  *((void *)a7 + 2) = 0;
  *(void *)a7 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __p = 0;
  sub_1DDA1808C(&__p, *(const void **)a8, *(void *)(a8 + 8), (uint64_t)(*(void *)(a8 + 8) - *(void *)a8) >> 3);
  sub_1DDAA1658(a1, a2, v13, a4, a5, a6, (void **)&v18, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  v20 = (void **)&v18;
  sub_1DDA18270(&v20);
  return a1;
}

void sub_1DDAA1624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p) {
    operator delete(__p);
  }
  a16 = &a13;
  sub_1DDA18270((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA1658(uint64_t a1, void *a2, unint64_t a3, void *a4, void *a5, _OWORD *a6, void **a7, uint64_t a8)
{
  uint64_t v12 = sub_1DDAA58A8(a1, a2, a3, a5, a6);
  *(void *)(v12 + 192) = 0;
  *(void *)(v12 + 200) = 0;
  *(_DWORD *)(v12 + 216) = 0;
  *(void *)(v12 + 208) = 0;
  *(_WORD *)(v12 + 220) = 1;
  *(void *)uint64_t v12 = &unk_1F395D038;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_OWORD *)(v12 + 248) = 0u;
  *(_OWORD *)(v12 + 264) = 0u;
  *(void *)(v12 + 280) = *a4;
  *(void *)(v12 + 288) = 0;
  *(void *)(v12 + 296) = 0;
  *(void *)(v12 + 304) = 0;
  sub_1DDA1976C((void *)(v12 + 288), *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
  *(void *)(a1 + 1864) = 0;
  *(_OWORD *)(a1 + 1848) = 0u;
  sub_1DDA1808C((void *)(a1 + 1848), *(const void **)a8, *(void *)(a8 + 8), (uint64_t)(*(void *)(a8 + 8) - *(void *)a8) >> 3);
  return a1;
}

void sub_1DDAA1734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA18270((void ***)va);
  uint64_t v5 = (void *)v2[32];
  if (v5)
  {
    v2[33] = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    v2[30] = v6;
    operator delete(v6);
  }
  sub_1DDAA0A44(v2);
  _Unwind_Resume(a1);
}

void sub_1DDAA177C(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X5>, char *a6@<X6>, long long *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x60170uLL);
  sub_1DDAA183C(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;

  sub_1DDA1AF34((uint64_t)a8, v16 + 4, (uint64_t)(v16 + 3));
}

void sub_1DDAA1828(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA183C(void *a1, void *a2, unint64_t *a3, void *a4, void *a5, _OWORD *a6, char *a7, long long *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961CC0;
  sub_1DDAA1934((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1DDAA1884(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA1898(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA18B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA190C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDAA1934(uint64_t a1, void *a2, unint64_t *a3, void *a4, void *a5, _OWORD *a6, char *a7, long long *a8)
{
  unint64_t v9 = *a3;
  char v10 = *a7;
  long long v12 = *a8;
  uint64_t v13 = *((void *)a8 + 2);
  *((void *)a8 + 1) = 0;
  *((void *)a8 + 2) = 0;
  *(void *)a8 = 0;
  sub_1DDAA19B0(a1, a2, v9, a4, a5, a6, v10, (void **)&v12);
  v14 = (void **)&v12;
  sub_1DDA18270(&v14);
  return a1;
}

void sub_1DDAA1998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1DDA18270((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA19B0(uint64_t a1, void *a2, unint64_t a3, void *a4, void *a5, _OWORD *a6, char a7, void **a8)
{
  uint64_t v12 = a1 + 393504;
  uint64_t v13 = sub_1DDAA58A8(a1, a2, a3, a5, a6);
  *(void *)(v13 + 192) = 0;
  *(void *)(v13 + 200) = 0;
  *(_DWORD *)(v13 + 216) = 0;
  *(void *)(v13 + 208) = 0;
  *(_WORD *)(v13 + 220) = 1;
  *(void *)uint64_t v13 = &unk_1F395A5F0;
  *(unsigned char *)(v13 + 222) = a7;
  *(_OWORD *)(v13 + 232) = 0u;
  *(_OWORD *)(v13 + 248) = 0u;
  *(_OWORD *)(v13 + 264) = 0u;
  *(void *)(v13 + 280) = *a4;
  *(_WORD *)uint64_t v12 = 0;
  *(void *)(v12 + 8) = 0;
  *(unsigned char *)(v12 + 16) = 0;
  *(void *)(v13 + 393536) = 0;
  *(void *)(v13 + 393544) = 0;
  *(void *)(v13 + 393528) = 0;
  sub_1DDA1976C((void *)(v13 + 393528), *a8, a8[1], ((char *)a8[1] - (char *)*a8) >> 4);
  *(void *)(v12 + 48) = (int)sub_1DDB10968();
  return a1;
}

void sub_1DDAA1A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = v11;
  a10 = v13;
  sub_1DDA18270(&a10);
  uint64_t v15 = (void *)v10[32];
  if (v15)
  {
    v10[33] = v15;
    operator delete(v15);
  }
  uint64_t v16 = *v12;
  if (*v12)
  {
    v10[30] = v16;
    operator delete(v16);
  }
  sub_1DDAA0A44(v10);
  _Unwind_Resume(a1);
}

void sub_1DDAA1AE4(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X5>, long long *a6@<X6>, int *a7@<X7>, void *a8@<X8>, int *a9)
{
  uint64_t v17 = operator new(0x20168uLL);
  sub_1DDAA1BB4(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;

  sub_1DDA1AF34((uint64_t)a8, v17 + 4, (uint64_t)(v17 + 3));
}

void sub_1DDAA1BA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA1BB4(void *a1, void *a2, unint64_t *a3, void *a4, void *a5, _OWORD *a6, long long *a7, int *a8, int *a9)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961D10;
  sub_1DDAA1CBC((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1DDAA1C0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA1C20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA1C40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3961D10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA1C94(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDAA1CBC(uint64_t a1, void *a2, unint64_t *a3, void *a4, void *a5, _OWORD *a6, long long *a7, int *a8, int *a9)
{
  unint64_t v10 = *a3;
  long long v12 = *a7;
  uint64_t v13 = *((void *)a7 + 2);
  *((void *)a7 + 1) = 0;
  *((void *)a7 + 2) = 0;
  *(void *)a7 = 0;
  sub_1DDAA1D44(a1, a2, v10, a4, a5, a6, (void **)&v12, *a8, *a9);
  v14 = (void **)&v12;
  sub_1DDA18270(&v14);
  return a1;
}

void sub_1DDAA1D2C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_1DDA18270((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA1D44(uint64_t a1, void *a2, unint64_t a3, void *a4, void *a5, _OWORD *a6, void **a7, int a8, int a9)
{
  uint64_t v13 = a1 + 131360;
  uint64_t v14 = sub_1DDAA58A8(a1, a2, a3, a5, a6);
  *(void *)(v14 + 192) = 0;
  *(void *)(v14 + 200) = 0;
  *(_DWORD *)(v14 + 216) = 0;
  *(void *)(v14 + 208) = 0;
  *(_WORD *)(v14 + 220) = 1;
  *(void *)uint64_t v14 = &unk_1F397B760;
  *(_OWORD *)(v14 + 232) = 0u;
  *(_OWORD *)(v14 + 248) = 0u;
  *(_OWORD *)(v14 + 264) = 0u;
  *(void *)(v14 + 280) = *a4;
  *(_WORD *)uint64_t v13 = 0;
  *(_OWORD *)(v14 + 131368) = 0u;
  *(_OWORD *)(v14 + 131384) = 0u;
  sub_1DDA1976C((void *)(v14 + 131376), *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
  *(_DWORD *)(v13 + 40) = a8;
  *(_DWORD *)(v13 + 44) = a9;
  return a1;
}

void sub_1DDAA1E14(_Unwind_Exception *a1)
{
  v4 = (void *)v1[32];
  if (v4)
  {
    v1[33] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[30] = v5;
    operator delete(v5);
  }
  sub_1DDAA0A44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA1E48(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((sub_1DDA2A5B0(a2, v2 + 4) & 0x80) == 0)
      {
        if ((sub_1DDA2A5B0(v2 + 4, a2) & 0x80) == 0) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void **)*v2;
    }
    while (v2);
  }
  return 0;
}

id sub_1DDAA1EB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F30058];
  uint64_t v34 = *MEMORY[0x1E4F30038];
  uint64_t v35 = v5;
  v42[0] = MEMORY[0x1E4F1CC38];
  v42[1] = @"com.hasselblad.fff-raw-image";
  uint64_t v6 = *MEMORY[0x1E4F30050];
  uint64_t v36 = *MEMORY[0x1E4F30018];
  v42[2] = @".fff.";
  v42[3] = &unk_1F39AEA80;
  v42[4] = &unk_1F39AEA98;
  v7 = objc_msgSend_numberWithUnsignedLong_(NSNumber, a2, (uint64_t)sub_1DDA159B0, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E4F30040], *MEMORY[0x1E4F30048]);
  v42[5] = v7;
  uint64_t v37 = *MEMORY[0x1E4F30000];
  int v11 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v8, (uint64_t)sub_1DDAA21AC, v9, v10);
  v42[6] = v11;
  uint64_t v38 = *MEMORY[0x1E4F30020];
  uint64_t v15 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v12, (uint64_t)sub_1DDAA21B8, v13, v14);
  v42[7] = v15;
  uint64_t v39 = *MEMORY[0x1E4F30008];
  uint64_t v19 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v16, (uint64_t)sub_1DDA818EC, v17, v18);
  v42[8] = v19;
  uint64_t v40 = *MEMORY[0x1E4F30028];
  v23 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v20, (uint64_t)sub_1DDAA21C4, v21, v22);
  v42[9] = v23;
  uint64_t v41 = *MEMORY[0x1E4F30030];
  v27 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v24, (uint64_t)sub_1DDAA21D0, v25, v26);
  v42[10] = v27;
  v29 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v43[0] = v29;
  v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v30, (uint64_t)v43, 1, v31);

  return v32;
}

void sub_1DDAA214C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAA21AC(const void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1DDAA21B8(os_signpost_id_t a1)
{
  return sub_1DDA81764(a1);
}

uint64_t sub_1DDAA21C4(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA7FF34(a1, a2, a3, &unk_1F3961D50);
}

uint64_t sub_1DDAA21D0(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA82568(a1, a2, a3, &unk_1F3961D50);
}

void sub_1DDAA21DC(void *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  char v11 = a2;
  id v10 = a3;
  id v9 = a4;
  sub_1DDAA36F0(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;
}

void sub_1DDAA225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA2278(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 == 10)
  {
    uint64_t v4 = v3 >= 0 ? (uint64_t *)a2 : *(uint64_t **)a2;
    uint64_t v5 = *v4;
    int v6 = *((unsigned __int16 *)v4 + 4);
    BOOL v7 = v5 == 0x6E49656372756F53 && v6 == 28518;
    if (v7 && *(void *)(a1 + 1200)) {
      return (unsigned __int16)sub_1DDAD38D8(*(void *)(a1 + 1200));
    }
  }

  return sub_1DDA27550((void **)a1);
}

double sub_1DDAA2308(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3 == 10
    && (v4 >= 0 ? (uint64_t v5 = a2) : (uint64_t v5 = *(void *)a2),
        (uint64_t v6 = *(void *)v5, v7 = *(unsigned __int16 *)(v5 + 8), v6 == 0x6E49656372756F53)
      ? (BOOL v8 = v7 == 28518)
      : (BOOL v8 = 0),
        v8 && *(void *)(a1 + 1200)))
  {
    return sub_1DDAD3984(*(void *)(a1 + 1200));
  }
  else
  {
    return sub_1DDA276C8((void **)a1, a2, a3);
  }
}

void sub_1DDAA236C(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v4 = (unsigned __int8 *)a2;
  sub_1DDA43480((uint64_t **)a1, a2, a3);
  int v6 = *a3;
  if (v6 == 46275)
  {
    if (a3[1] != 1) {
      return;
    }
    sub_1DDA1A880(__p, "IFD0");
    uint64_t v23 = v4[23];
    if ((v23 & 0x80u) == 0) {
      v24 = (void *)v4[23];
    }
    else {
      v24 = (void *)*((void *)v4 + 1);
    }
    uint64_t v25 = (void *)HIBYTE(v39);
    int v26 = SHIBYTE(v39);
    if (v39 < 0) {
      uint64_t v25 = __p[1];
    }
    if (v24 == v25)
    {
      if (v39 >= 0) {
        v27 = __p;
      }
      else {
        v27 = (void **)__p[0];
      }
      if ((v23 & 0x80) != 0)
      {
        BOOL v32 = memcmp(*(const void **)v4, v27, *((void *)v4 + 1)) != 0;
        if ((v26 & 0x80000000) == 0) {
          goto LABEL_56;
        }
      }
      else if (v4[23])
      {
        uint64_t v28 = v23 - 1;
        do
        {
          int v30 = *v4++;
          int v29 = v30;
          int v31 = *(unsigned __int8 *)v27;
          v27 = (void **)((char *)v27 + 1);
          BOOL v32 = v29 != v31;
        }
        while (v29 == v31 && v28-- != 0);
        if ((SHIBYTE(v39) & 0x80000000) == 0)
        {
LABEL_56:
          if (v32) {
            return;
          }
          goto LABEL_63;
        }
      }
      else
      {
        BOOL v32 = 0;
        if ((SHIBYTE(v39) & 0x80000000) == 0) {
          goto LABEL_56;
        }
      }
    }
    else
    {
      BOOL v32 = 1;
      if ((SHIBYTE(v39) & 0x80000000) == 0) {
        goto LABEL_56;
      }
    }
    operator delete(__p[0]);
    if (v32) {
      return;
    }
LABEL_63:
    *(void *)(a1 + 1184) = *((unsigned int *)a3 + 2);
    *(void *)(a1 + 1192) = *((unsigned int *)a3 + 1);
    *(unsigned char *)(a1 + 1216) = 0;
    return;
  }
  if (v6 == 46279)
  {
    if (a3[1] != 1) {
      return;
    }
    sub_1DDA1A880(__p, "IFD0");
    uint64_t v10 = v4[23];
    if ((v10 & 0x80u) == 0) {
      char v11 = (void *)v4[23];
    }
    else {
      char v11 = (void *)*((void *)v4 + 1);
    }
    long long v12 = (void *)HIBYTE(v39);
    int v13 = SHIBYTE(v39);
    if (v39 < 0) {
      long long v12 = __p[1];
    }
    if (v11 != v12)
    {
      BOOL v22 = 0;
      if ((SHIBYTE(v39) & 0x80000000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_59;
    }
    if (v39 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    if ((v10 & 0x80) != 0)
    {
      BOOL v22 = memcmp(*(const void **)v4, v14, *((void *)v4 + 1)) == 0;
    }
    else
    {
      if (!v4[23])
      {
        BOOL v22 = 1;
        if ((SHIBYTE(v39) & 0x80000000) == 0)
        {
LABEL_66:
          if (!v22) {
            return;
          }
LABEL_67:
          sub_1DDA27D28(a1, &v36);
          LODWORD(v35) = *((_DWORD *)a3 + 2);
          sub_1DDA18410(v34, (int *)&v35);
          sub_1DDA1A94C((uint64_t *)__p, (uint64_t *)&v36, (uint64_t)v34, 0);
          if (*((void *)&v36 + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&v36 + 1));
          }
          operator new[]();
        }
LABEL_59:
        operator delete(__p[0]);
        if (!v22) {
          return;
        }
        goto LABEL_67;
      }
      uint64_t v15 = v10 - 1;
      do
      {
        int v17 = *v4++;
        int v16 = v17;
        int v19 = *(unsigned __int8 *)v14;
        uint64_t v14 = (void **)((char *)v14 + 1);
        int v18 = v19;
        BOOL v21 = v15-- != 0;
        BOOL v22 = v16 == v18;
      }
      while (v16 == v18 && v21);
    }
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_59;
  }
  if (v6 == 50714 && a3[1] - 3 <= 2)
  {
    int v7 = *((_DWORD *)a3 + 1);
    if (v7 == 1 || v7 == 4)
    {
      sub_1DDA27D28(a1, &v36);
      sub_1DDA3E944((uint64_t)a3, (uint64_t *)&v36, __p);
      if (*((void *)&v36 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v36 + 1));
      }
      BOOL v8 = __p[0];
      if (*((_DWORD *)a3 + 1) == ((char *)__p[1] - (char *)__p[0]) >> 3)
      {
        if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)8)
        {
          sub_1DDA25B2C(&v36, 4uLL, (void *)__p[0]);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          *(_OWORD *)__p = v36;
          uint64_t v39 = v37;
        }
        *(void *)&long long v36 = v4;
        id v9 = (char *)(sub_1DDA4B960((uint64_t **)(a1 + 264), (void **)v4, (uint64_t)&unk_1DDBFB044, (long long **)&v36) + 7);
        BOOL v8 = __p[0];
        if (v9 != (char *)__p)
        {
          sub_1DDA25BB0(v9, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
          BOOL v8 = __p[0];
        }
      }
      if (v8)
      {
        __p[1] = v8;
        operator delete(v8);
      }
    }
  }
}

void sub_1DDAA2828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (a14) {
    sub_1DDA18310(a14);
  }
  MEMORY[0x1E01C3DA0](v18, 0x1000C8077774924);
  sub_1DDA1AA18((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA28DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1216)) {
    return *(void *)(a1 + 1184);
  }
  sub_1DDA48424(a1, 0, __p);
  uint64_t v2 = sub_1DDA481F0(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDAA2948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAA2964(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1216)) {
    return *(void *)(a1 + 1192);
  }
  sub_1DDA48424(a1, 0, __p);
  uint64_t v2 = sub_1DDA48264(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDAA29D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DDAA29EC(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 1200);
  if (result) {
    return sub_1DDAD37AC(result);
  }
  return result;
}

uint64_t sub_1DDAA29FC(uint64_t *a1)
{
  (*(uint64_t (**)(uint64_t *))(*a1 + 440))(a1);
  uint64_t result = a1[150];
  if (result)
  {
    uint64_t v3 = (unsigned __int16)sub_1DDAD3810(result);
    uint64_t v4 = (unsigned __int16)sub_1DDAD3818(a1[150]);
    sub_1DDAD38C8(a1[150]);
    sub_1DDAD38D0(a1[150]);
    return v3 | (v4 << 32);
  }
  return result;
}

_WORD *sub_1DDAA2AAC(void *a1)
{
  (*(void (**)(void *))(*a1 + 440))(a1);
  uint64_t result = (_WORD *)a1[150];
  if (result) {
    return (_WORD *)sub_1DDAD37BC(result);
  }
  return result;
}

void sub_1DDAA2B08(void *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  (*(void (**)(void **__return_ptr))(*a1 + 392))(__p);
  unint64_t v10 = v17;
  if ((v17 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10 == 10
    && ((v17 & 0x80u) == 0 ? (char v11 = __p) : (char v11 = (void **)__p[0]),
        (long long v12 = *v11, v13 = *((unsigned __int16 *)v11 + 4), v12 == (void *)0x6E49656372756F53)
      ? (BOOL v14 = v13 == 28518)
      : (BOOL v14 = 0),
        v14))
  {
    uint64_t v15 = a1[150];
    if (v15)
    {
      sub_1DDAD3ACC(v15, a5);
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
  }
  else
  {
    sub_1DDA282F0((uint64_t)a1, a2, a3, a4, a5);
  }
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DDAA2C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDAA2C38@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)(a1 + 1200);
  if (result)
  {
    sub_1DDAD39F0((uint64_t)result);
    uint64_t v5 = v4;
    return sub_1DDA25B2C(a2, 4uLL, &v5);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

unsigned __int16 *sub_1DDAA2C8C(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t result = *(unsigned __int16 **)(a1 + 1200);
  if (result) {
    BOOL v3 = *a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    return sub_1DDAD3C7C((uint64_t)result, a2);
  }
  return result;
}

void sub_1DDAA2CA8(uint64_t a1)
{
  sub_1DDA3F4AC((void **)a1);
  uint64_t v2 = (*(void (**)(uint64_t))(*(void *)a1 + 400))(a1);
  BOOL v3 = v2;
  if (*(void *)(a1 + 1200)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = sub_1DDA7A98C(v2, (void *)*MEMORY[0x1E4F2FD40], 0);
    int v6 = sub_1DDA7A98C(v3, (void *)*MEMORY[0x1E4F2F800], 0);
    uint64_t v7 = *MEMORY[0x1E4F2FD70];
    char v11 = objc_msgSend_objectForKeyedSubscript_(v5, v8, *MEMORY[0x1E4F2FD70], v9, v10);

    if (!v11)
    {
      uint64_t v15 = NSNumber;
      unsigned __int16 v16 = sub_1DDAD38E8(*(void *)(a1 + 1200));
      v20 = objc_msgSend_numberWithUnsignedShort_(v15, v17, v16, v18, v19);
      objc_msgSend_setObject_forKeyedSubscript_(v5, v21, (uint64_t)v20, v7, v22);
    }
    uint64_t v23 = *MEMORY[0x1E4F2F878];
    v24 = objc_msgSend_objectForKeyedSubscript_(v6, v12, *MEMORY[0x1E4F2F878], v13, v14);

    if (!v24)
    {
      uint64_t v25 = NSNumber;
      unsigned __int16 v26 = sub_1DDAD38D8(*(void *)(a1 + 1200));
      int v30 = objc_msgSend_numberWithUnsignedShort_(v25, v27, v26, v28, v29);
      objc_msgSend_setObject_forKeyedSubscript_(v6, v31, (uint64_t)v30, v23, v32);
    }
    if (sub_1DDAD3984(*(void *)(a1 + 1200)) > 0.0)
    {
      uint64_t v36 = *MEMORY[0x1E4F2F828];
      uint64_t v37 = objc_msgSend_objectForKeyedSubscript_(v6, v33, *MEMORY[0x1E4F2F828], v34, v35);

      if (!v37)
      {
        uint64_t v38 = NSNumber;
        double v39 = sub_1DDAD3984(*(void *)(a1 + 1200));
        v44 = objc_msgSend_numberWithDouble_(v38, v40, v41, v42, v43, v39);
        objc_msgSend_setObject_forKeyedSubscript_(v6, v45, (uint64_t)v44, v36, v46);
      }
    }
    long double v47 = sub_1DDAD39A8(*(void *)(a1 + 1200));
    double v48 = v47;
    if (v47 > 0.0)
    {
      double v49 = log2(v47);
      uint64_t v50 = *MEMORY[0x1E4F2F830];
      v54 = objc_msgSend_objectForKeyedSubscript_(v6, v51, *MEMORY[0x1E4F2F830], v52, v53);

      if (!v54)
      {
        v59 = objc_msgSend_numberWithDouble_(NSNumber, v55, v56, v57, v58, v48);
        objc_msgSend_setObject_forKeyedSubscript_(v6, v60, (uint64_t)v59, v50, v61);
      }
      uint64_t v62 = *MEMORY[0x1E4F2F6D0];
      v63 = objc_msgSend_objectForKeyedSubscript_(v6, v55, *MEMORY[0x1E4F2F6D0], v57, v58);

      if (!v63)
      {
        v68 = objc_msgSend_numberWithDouble_(NSNumber, v64, v65, v66, v67, v49 + v49);
        objc_msgSend_setObject_forKeyedSubscript_(v6, v69, (uint64_t)v68, v62, v70);
      }
    }
    if (sub_1DDAD39CC(*(void *)(a1 + 1200)) > 0.0)
    {
      uint64_t v74 = *MEMORY[0x1E4F2F850];
      v75 = objc_msgSend_objectForKeyedSubscript_(v6, v71, *MEMORY[0x1E4F2F850], v72, v73);

      if (!v75)
      {
        v76 = NSNumber;
        double v77 = sub_1DDAD39CC(*(void *)(a1 + 1200));
        v82 = objc_msgSend_numberWithDouble_(v76, v78, v79, v80, v81, v77);
        objc_msgSend_setObject_forKeyedSubscript_(v6, v83, (uint64_t)v82, v74, v84);
      }
    }
    sub_1DDAD3B14(*(unsigned __int16 **)(a1 + 1200), __p);
    uint64_t v85 = *MEMORY[0x1E4F2FD38];
    v89 = objc_msgSend_objectForKeyedSubscript_(v5, v86, *MEMORY[0x1E4F2FD38], v87, v88);

    if (!v89)
    {
      if (v97 >= 0) {
        objc_msgSend_stringWithUTF8String_(NSString, v90, (uint64_t)__p, v91, v92);
      }
      else {
      v93 = objc_msgSend_stringWithUTF8String_(NSString, v90, (uint64_t)__p[0], v91, v92);
      }
      objc_msgSend_setObject_forKeyedSubscript_(v5, v94, (uint64_t)v93, v85, v95);
    }
    if (v97 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1DDAA3060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1DDAA30E0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 1200);
  if (v3) {
    LODWORD(v3) = sub_1DDAD38E0(v3);
  }
  snprintf(__str, 0x10uLL, "%u", v3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_1DDA1A880(__p, "fff");
  unint64_t v4 = a2[2];
  unint64_t v5 = a2[1];
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    uint64_t v46 = a2 + 2;
    if (v10) {
      char v11 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v10);
    }
    else {
      char v11 = 0;
    }
    long long v12 = &v11[24 * v7];
    uint64_t v42 = v11;
    uint64_t v43 = v12;
    v45 = &v11[24 * v10];
    long long v13 = *(_OWORD *)__p;
    *((void *)v12 + 2) = v41;
    *(_OWORD *)long long v12 = v13;
    __p[1] = 0;
    uint64_t v41 = 0;
    __p[0] = 0;
    v44 = v12 + 24;
    sub_1DDA2A0E8(a2, &v42);
    uint64_t v14 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v42);
    int v15 = SHIBYTE(v41);
    a2[1] = v14;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)__p;
    *(void *)(v5 + 16) = v41;
    *(_OWORD *)unint64_t v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1DDA1A880(__p, "hasselblad");
  unint64_t v17 = a2[1];
  unint64_t v16 = a2[2];
  if (v17 >= v16)
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    uint64_t v46 = a2 + 2;
    if (v22) {
      uint64_t v23 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v22);
    }
    else {
      uint64_t v23 = 0;
    }
    v24 = &v23[24 * v19];
    uint64_t v42 = v23;
    uint64_t v43 = v24;
    v45 = &v23[24 * v22];
    long long v25 = *(_OWORD *)__p;
    *((void *)v24 + 2) = v41;
    *(_OWORD *)v24 = v25;
    __p[1] = 0;
    uint64_t v41 = 0;
    __p[0] = 0;
    v44 = v24 + 24;
    sub_1DDA2A0E8(a2, &v42);
    uint64_t v26 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v42);
    int v27 = SHIBYTE(v41);
    a2[1] = v26;
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v18 = *(_OWORD *)__p;
    *(void *)(v17 + 16) = v41;
    *(_OWORD *)unint64_t v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1DDA1A880(__p, __str);
  unint64_t v29 = a2[1];
  unint64_t v28 = a2[2];
  if (v29 >= v28)
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32) {
      unint64_t v32 = 2 * v33;
    }
    if (v33 >= 0x555555555555555) {
      unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v34 = v32;
    }
    uint64_t v46 = a2 + 2;
    if (v34) {
      uint64_t v35 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v34);
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = &v35[24 * v31];
    uint64_t v42 = v35;
    uint64_t v43 = v36;
    v45 = &v35[24 * v34];
    long long v37 = *(_OWORD *)__p;
    *((void *)v36 + 2) = v41;
    *(_OWORD *)uint64_t v36 = v37;
    __p[1] = 0;
    uint64_t v41 = 0;
    __p[0] = 0;
    v44 = v36 + 24;
    sub_1DDA2A0E8(a2, &v42);
    uint64_t v38 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v42);
    int v39 = SHIBYTE(v41);
    a2[1] = v38;
    if (v39 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v30 = *(_OWORD *)__p;
    *(void *)(v29 + 16) = v41;
    *(_OWORD *)unint64_t v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1DDAA3484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1DDA2A044((void ***)&__p);
  _Unwind_Resume(a1);
}

id sub_1DDAA34DC(uint64_t a1)
{
  v18[6] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = sub_1DDA40140(a1);
  long long v6 = objc_msgSend_mutableCopy(v1, v2, v3, v4, v5);

  v17[0] = &unk_1F39AEAB0;
  v17[1] = &unk_1F39AEAF8;
  v18[0] = &unk_1F39B44B0;
  v18[1] = &unk_1F39B44D8;
  v17[2] = &unk_1F39AEB10;
  v17[3] = &unk_1F39AEB28;
  v18[2] = &unk_1F39B4500;
  v18[3] = &unk_1F39B4528;
  v17[4] = &unk_1F39AEB40;
  v17[5] = &unk_1F39AEB58;
  v18[4] = &unk_1F39B4550;
  v18[5] = &unk_1F39B4578;
  unint64_t v8 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v7, (uint64_t)v18, (uint64_t)v17, 6);
  objc_msgSend_addEntriesFromDictionary_(v6, v9, (uint64_t)v8, v10, v11);

  int v15 = objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1C9E8], v12, (uint64_t)v6, v13, v14);

  return v15;
}

void sub_1DDAA3620(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DDAA365C(void *a1)
{
  sub_1DDAA3694(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA3694(void *a1)
{
  *a1 = &unk_1F3961D80;
  uint64_t v2 = (std::__shared_weak_count *)a1[151];
  if (v2) {
    sub_1DDA18310(v2);
  }

  return sub_1DDA49A44((uint64_t)a1);
}

void sub_1DDAA36F0(void *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x4E0uLL);
  sub_1DDAA3784((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAA3770(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA3784(uint64_t a1, void *a2, char *a3, void **a4, void **a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F39620C0;
  sub_1DDA3F2B0(a1 + 24, a2, *a3, *a4, *a5);
  *(void *)(a1 + 24) = &unk_1F3961D80;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(unsigned char *)(a1 + 1240) = 1;
  return a1;
}

void sub_1DDAA380C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA3820(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39620C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA3840(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39620C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA3894(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

id sub_1DDAA38BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F30058];
  uint64_t v34 = *MEMORY[0x1E4F30038];
  uint64_t v35 = v5;
  v42[0] = MEMORY[0x1E4F1CC38];
  v42[1] = @"com.hasselblad.3fr-raw-image";
  uint64_t v6 = *MEMORY[0x1E4F30050];
  uint64_t v36 = *MEMORY[0x1E4F30018];
  v42[2] = @".3fr.";
  v42[3] = &unk_1F39AEB70;
  v42[4] = &unk_1F39AEB88;
  unint64_t v7 = objc_msgSend_numberWithUnsignedLong_(NSNumber, a2, (uint64_t)sub_1DDA159FC, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E4F30040], *MEMORY[0x1E4F30048]);
  v42[5] = v7;
  uint64_t v37 = *MEMORY[0x1E4F30000];
  uint64_t v11 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v8, (uint64_t)sub_1DDAA3BB4, v9, v10);
  v42[6] = v11;
  uint64_t v38 = *MEMORY[0x1E4F30020];
  int v15 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v12, (uint64_t)sub_1DDAA3BC0, v13, v14);
  v42[7] = v15;
  uint64_t v39 = *MEMORY[0x1E4F30008];
  unint64_t v19 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v16, (uint64_t)sub_1DDA818EC, v17, v18);
  v42[8] = v19;
  uint64_t v40 = *MEMORY[0x1E4F30028];
  uint64_t v23 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v20, (uint64_t)sub_1DDAA3BCC, v21, v22);
  v42[9] = v23;
  uint64_t v41 = *MEMORY[0x1E4F30030];
  int v27 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v24, (uint64_t)sub_1DDAA3BD8, v25, v26);
  v42[10] = v27;
  unint64_t v29 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v43[0] = v29;
  unint64_t v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v30, (uint64_t)v43, 1, v31);

  return v32;
}

void sub_1DDAA3B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAA3BB4(const void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1DDAA3BC0(os_signpost_id_t a1)
{
  return sub_1DDA81764(a1);
}

uint64_t sub_1DDAA3BCC(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA7FF34(a1, a2, a3, &unk_1F3962100);
}

uint64_t sub_1DDAA3BD8(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA82568(a1, a2, a3, &unk_1F3962100);
}

void sub_1DDAA3BE4(void *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  char v11 = a2;
  id v10 = a3;
  id v9 = a4;
  sub_1DDAA4D5C(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;
}

void sub_1DDAA3C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA3C80(_DWORD *a1)
{
  uint64_t result = *a1;
  *a1 = result - 1;
  if (__OFSUB__(result, 1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDAA3CE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA3CFC(uint64_t **a1, void **a2, unsigned __int16 *a3)
{
  sub_1DDA43480(a1, (uint64_t)a2, a3);
  if (*a3 == 50714 && a3[1] - 3 <= 2)
  {
    int v6 = *((_DWORD *)a3 + 1);
    if (v6 == 1 || v6 == 4)
    {
      sub_1DDA27D28((uint64_t)a1, &v10);
      sub_1DDA3E944((uint64_t)a3, (uint64_t *)&v10, __p);
      if (*((void *)&v10 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v10 + 1));
      }
      long long v8 = __p[0];
      if (*((_DWORD *)a3 + 1) == ((char *)__p[1] - (char *)__p[0]) >> 3)
      {
        if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)8)
        {
          sub_1DDA25B2C(&v10, 4uLL, (void *)__p[0]);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          *(_OWORD *)__p = v10;
          uint64_t v13 = v11;
        }
        *(void *)&long long v10 = a2;
        id v9 = (char *)(sub_1DDA4B960(a1 + 33, a2, (uint64_t)&unk_1DDBFB044, (long long **)&v10) + 7);
        long long v8 = __p[0];
        if (v9 != (char *)__p)
        {
          sub_1DDA25BB0(v9, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
          long long v8 = __p[0];
        }
      }
      if (v8)
      {
        __p[1] = v8;
        operator delete(v8);
      }
    }
  }
}

void sub_1DDAA3E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1DDAA3E6C(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t result = (uint64_t *)nullsub_6();
  unsigned int v6 = *a3;
  if (v6 > 0x19)
  {
    if (v6 == 26)
    {
      if ((a3[1] & 0xFFFE) != 6) {
        return result;
      }
      sub_1DDA27D28(a1, &v24);
      int v23 = *((_DWORD *)a3 + 2);
      sub_1DDA18410((int *)&v21, &v23);
      sub_1DDA1A94C(v25, (uint64_t *)&v24, (uint64_t)&v21, 0);
      if (*((void *)&v24 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
      }
      unint64_t v13 = *((unsigned int *)a3 + 1);
      if (v13 >= 2)
      {
        if (v13 >= 0x100000)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        sub_1DDAA532C(v13, &v24);
        long long v14 = v24;
        long long v24 = 0uLL;
        int v15 = *(std::__shared_weak_count **)(a1 + 1208);
        *(_OWORD *)(a1 + 1200) = v14;
        if (v15)
        {
          sub_1DDA18310(v15);
          if (*((void *)&v24 + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
          }
        }
        sub_1DDA27D28(a1, &v24);
        uint64_t v16 = v24;
        uint64_t v17 = sub_1DDA7EF68(*(void *)(a1 + 1200));
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 32))(v16, v17, v13);
        if (*((void *)&v24 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
        }
        sub_1DDA27D28(a1, &v24);
        uint64_t v18 = sub_1DDA19C94(v24);
        if (*((void *)&v24 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
        }
        uint64_t v19 = *(void *)(a1 + 1200);
        if (v18 == 2) {
          sub_1DDAA5590(v19);
        }
        else {
          sub_1DDAA55D8(v19);
        }
      }
      return sub_1DDA1AA18(v25);
    }
    if (v6 == 27)
    {
      LODWORD(v24) = 1;
      sub_1DDA1B3CC(v25, (unsigned int *)&v24);
      unsigned int v9 = sub_1DDA3F234((uint64_t)a3, (unsigned int *)v25);
      int v23 = 0;
      sub_1DDA1B3CC(&v21, (unsigned int *)&v23);
      uint64_t result = (uint64_t *)sub_1DDA3F234((uint64_t)a3, (unsigned int *)&v21);
      *(void *)(a1 + 1216) = v9 | ((void)result << 32);
    }
  }
  else if (v6 == 15)
  {
    if (a3[1] == 4 && *((_DWORD *)a3 + 1) >= 7u)
    {
      sub_1DDA27D28(a1, &v24);
      int v23 = *((_DWORD *)a3 + 2);
      sub_1DDA18410((int *)&v21, &v23);
      sub_1DDA1A94C(v25, (uint64_t *)&v24, (uint64_t)&v21, 0);
      if (*((void *)&v24 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
      }
      sub_1DDA27D28(a1, &v24);
      uint64_t v11 = v24;
      uint64_t v21 = 24;
      sub_1DDA18488(&v23, (unint64_t *)&v21);
      (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v11 + 40))(v11, &v23, 1);
      if (*((void *)&v24 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
      }
      sub_1DDA27D28(a1, &v24);
      unsigned int v12 = sub_1DDA19EC8(v24);
      if (*((void *)&v24 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
      }
      *(double *)(a1 + 1232) = (double)v12 * 0.00390625;
      return sub_1DDA1AA18(v25);
    }
  }
  else if (v6 == 25 && a3[1] == 7)
  {
    sub_1DDA27D28(a1, &v24);
    int v23 = *((_DWORD *)a3 + 2);
    sub_1DDA18410((int *)&v21, &v23);
    sub_1DDA1A94C(v25, (uint64_t *)&v24, (uint64_t)&v21, 0);
    if (*((void *)&v24 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
    }
    int v23 = *((_DWORD *)a3 + 1);
    sub_1DDA27D28(a1, &v21);
    sub_1DDAD5844(&v21, &v23, &v24);
    long long v7 = v24;
    long long v24 = 0uLL;
    long long v8 = *(std::__shared_weak_count **)(a1 + 1192);
    *(_OWORD *)(a1 + 1184) = v7;
    if (v8)
    {
      sub_1DDA18310(v8);
      if (*((void *)&v24 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    if (v22) {
      sub_1DDA18310(v22);
    }
    return sub_1DDA1AA18(v25);
  }
  return result;
}

void sub_1DDAA421C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a7) {
    sub_1DDA18310(a7);
  }
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA42D4(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  uint64_t v2 = sub_1DDA481F0(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDAA4330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DDAA434C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424))(a1);
  sub_1DDA1A880(&__p, "IFD0:SUBIFD0");
  unint64_t v3 = sub_1DDA48264(a1, &__p);
  if (v8 < 0) {
    operator delete(__p);
  }
  sub_1DDA27D28(a1, &__p);
  unsigned int v4 = (*(uint64_t (**)(void *))(*(void *)__p + 16))(__p);
  if (v7) {
    sub_1DDA18310(v7);
  }
  if ((unint64_t)v4 - v2 >= v3) {
    return v3;
  }
  else {
    return v4 - v2;
  }
}

void sub_1DDAA4430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DDAA4460(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 1184);
  if (v2)
  {
    unsigned int v3 = sub_1DDAD68FC(v2);
    LODWORD(v1) = sub_1DDAD6904(*(void *)(v1 + 1184));
  }
  else
  {
    sub_1DDA1A880(__p, "IFD0:SUBIFD0");
    unint64_t v4 = sub_1DDA48394(v1, __p);
    unsigned int v3 = v4;
    uint64_t v1 = HIDWORD(v4);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  return v3 | ((unint64_t)v1 << 32);
}

void sub_1DDAA44E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAA4500(uint64_t *a1)
{
  unint64_t v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 440))(a1);
  int v3 = v2;
  unint64_t v4 = HIDWORD(v2);
  v16[0] = 0;
  v16[1] = v2;
  uint64_t v5 = a1[148];
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v6 = sub_1DDAD6934(v5);
  unsigned int v7 = sub_1DDAD693C(a1[148]);
  int v8 = sub_1DDAD6944(a1[148]);
  int v9 = sub_1DDAD6958(a1[148]);
  v15[0] = (v6 - 8) | ((unint64_t)(v7 - 8) << 32);
  v15[1] = (v3 - (v8 + v6) + 16) | ((unint64_t)(v4 - (v9 + v7) + 16) << 32);
  BOOL v10 = sub_1DDB56B24((int *)v15, (int *)v16);
  if (v10) {
    uint64_t v11 = LODWORD(v15[0]);
  }
  else {
    uint64_t v11 = v6;
  }
  if (v10) {
    uint64_t v12 = HIDWORD(v15[0]);
  }
  else {
    uint64_t v12 = v7;
  }
  return v11 | (v12 << 32);
}

void sub_1DDAA4634(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA4648(uint64_t *a1)
{
  (*(void (**)(uint64_t *))(*a1 + 440))(a1);
  uint64_t result = a1[148];
  if (result)
  {
    unsigned int v3 = sub_1DDAD6934(result);
    uint64_t v4 = sub_1DDAD693C(a1[148]);
    sub_1DDAD690C(a1[148]);
    sub_1DDAD6920(a1[148]);
    return v3 | (unint64_t)(v4 << 32);
  }
  return result;
}

uint64_t sub_1DDAA46EC(uint64_t a1)
{
  unsigned int v5 = 0;
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  sub_1DDA3FE4C(a1, __p, &v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_1DDAA474C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAA4768(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 1200);
  if (v2
    && (int v3 = *(_DWORD *)(a1 + 1216), v3 >= 1)
    && (int v4 = *(_DWORD *)(a1 + 1220), v4 > 0)
    && *(void *)(v2 + 24) >= 2 * v3 * (unint64_t)v4)
  {
    unsigned int v5 = 0;
    sub_1DDAA5028((uint64_t *)(a1 + 1200), &v5, (unsigned int *)(a1 + 1220), (unsigned int *)(a1 + 1216), (unsigned int *)(a1 + 1216), a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

uint64_t sub_1DDAA47DC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 1192);
  *a2 = *(void *)(result + 1184);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

double sub_1DDAA47FC(void **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 36);
  (*((void (**)(void **__return_ptr))*a1 + 49))(__p);
  int v3 = sub_1DDA2A530(v2, __p);
  if (a1 + 37 == v3) {
    double v4 = -1.0;
  }
  else {
    double v4 = *((double *)v3 + 7);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1DDAA4898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAA48B4(uint64_t a1)
{
  return *(double *)(a1 + 1232);
}

void sub_1DDAA48BC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 1184);
  if (v3) {
    LODWORD(v3) = sub_1DDAD696C(v3);
  }
  snprintf(__str, 0x10uLL, "%u", v3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_1DDA1A880(__p, "3fr");
  unint64_t v4 = a2[2];
  unint64_t v5 = a2[1];
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    uint64_t v46 = a2 + 2;
    if (v10) {
      uint64_t v11 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[24 * v7];
    uint64_t v42 = v11;
    uint64_t v43 = v12;
    v45 = &v11[24 * v10];
    long long v13 = *(_OWORD *)__p;
    *((void *)v12 + 2) = v41;
    *(_OWORD *)uint64_t v12 = v13;
    __p[1] = 0;
    uint64_t v41 = 0;
    __p[0] = 0;
    v44 = v12 + 24;
    sub_1DDA2A0E8(a2, &v42);
    uint64_t v14 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v42);
    int v15 = SHIBYTE(v41);
    a2[1] = v14;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)__p;
    *(void *)(v5 + 16) = v41;
    *(_OWORD *)unint64_t v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1DDA1A880(__p, "hasselblad");
  unint64_t v17 = a2[1];
  unint64_t v16 = a2[2];
  if (v17 >= v16)
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    uint64_t v46 = a2 + 2;
    if (v22) {
      int v23 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v22);
    }
    else {
      int v23 = 0;
    }
    long long v24 = &v23[24 * v19];
    uint64_t v42 = v23;
    uint64_t v43 = v24;
    v45 = &v23[24 * v22];
    long long v25 = *(_OWORD *)__p;
    *((void *)v24 + 2) = v41;
    *(_OWORD *)long long v24 = v25;
    __p[1] = 0;
    uint64_t v41 = 0;
    __p[0] = 0;
    v44 = v24 + 24;
    sub_1DDA2A0E8(a2, &v42);
    uint64_t v26 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v42);
    int v27 = SHIBYTE(v41);
    a2[1] = v26;
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v18 = *(_OWORD *)__p;
    *(void *)(v17 + 16) = v41;
    *(_OWORD *)unint64_t v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1DDA1A880(__p, __str);
  unint64_t v29 = a2[1];
  unint64_t v28 = a2[2];
  if (v29 >= v28)
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32) {
      unint64_t v32 = 2 * v33;
    }
    if (v33 >= 0x555555555555555) {
      unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v34 = v32;
    }
    uint64_t v46 = a2 + 2;
    if (v34) {
      uint64_t v35 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v34);
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = &v35[24 * v31];
    uint64_t v42 = v35;
    uint64_t v43 = v36;
    v45 = &v35[24 * v34];
    long long v37 = *(_OWORD *)__p;
    *((void *)v36 + 2) = v41;
    *(_OWORD *)uint64_t v36 = v37;
    __p[1] = 0;
    uint64_t v41 = 0;
    __p[0] = 0;
    v44 = v36 + 24;
    sub_1DDA2A0E8(a2, &v42);
    uint64_t v38 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v42);
    int v39 = SHIBYTE(v41);
    a2[1] = v38;
    if (v39 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v30 = *(_OWORD *)__p;
    *(void *)(v29 + 16) = v41;
    *(_OWORD *)unint64_t v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1DDAA4C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1DDA2A044((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1DDAA4CBC(void *a1)
{
  sub_1DDAA4CF4(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA4CF4(void *a1)
{
  *a1 = &unk_1F3962130;
  uint64_t v2 = (std::__shared_weak_count *)a1[151];
  if (v2) {
    sub_1DDA18310(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[149];
  if (v3) {
    sub_1DDA18310(v3);
  }

  return sub_1DDA49A44((uint64_t)a1);
}

void sub_1DDAA4D5C(void *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x4F0uLL);
  sub_1DDAA4DF0((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAA4DDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA4DF0(uint64_t a1, void *a2, char *a3, void **a4, void **a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3962480;
  sub_1DDA3F2B0(a1 + 24, a2, *a3, *a4, *a5);
  *(void *)(a1 + 24) = &unk_1F3962130;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(void *)(a1 + 1256) = 0xBFF0000000000000;
  return a1;
}

void sub_1DDAA4E7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA4E90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA4EB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962480;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA4F04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

int *sub_1DDAA4F2C(int *result, int *a2)
{
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *result /= *a2;
  return result;
}

void sub_1DDAA4F94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_1DDAA4FA8(int *result, int *a2)
{
  uint64_t v2 = *result * (uint64_t)*a2;
  uint64_t *result = v2;
  if (v2 != (int)v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDAA5014(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA5028(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0x58uLL);
  sub_1DDAA50CC(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDAA50B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA50CC(void *a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39601A0;
  sub_1DDAA5128((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1DDAA5114(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA5128(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  unint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  unint64_t v17 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1DDA1B3CC(&v15, a3);
  sub_1DDA1B3CC(&v14, a4);
  sub_1DDA1B3CC(&v13, a5);
  sub_1DDA1B3CC(&v12, a6);
  sub_1DDAA7BA8(a1, &v16, &v15, &v14, &v13, &v12);
  if (v17) {
    sub_1DDA18310(v17);
  }
  return a1;
}

void sub_1DDAA51E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    sub_1DDA18310(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAA520C@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (a1 >> 20)
  {
    unint64_t v4 = operator new(0x48uLL);
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = &unk_1F39625B8;
    unint64_t v5 = (char *)(v4 + 3);
    *((unsigned char *)v4 + 32) = 0;
    v4[5] = 0;
    v4[6] = a1;
    v4[7] = 0;
    v4[8] = 0;
    long long v6 = (uint64_t (**)(void))&unk_1F397D8B8;
  }
  else
  {
    unint64_t v4 = operator new(0x40uLL);
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = &unk_1F3962518;
    unint64_t v5 = (char *)(v4 + 3);
    *((unsigned char *)v4 + 32) = 0;
    v4[5] = 0;
    v4[6] = a1;
    v4[7] = 0;
    long long v6 = (uint64_t (**)(void))&unk_1F3962568;
  }
  v4[3] = v6;
  *a2 = v5;
  a2[1] = v4;
  return v6[4]();
}

void sub_1DDAA5318(_Unwind_Exception *a1)
{
  sub_1DDA18310(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA532C@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v10 = a1;
  *a2 = 0;
  a2[1] = 0;
  if (a1 >> 20)
  {
    sub_1DDAA5750(&v10, v9);
    long long v6 = (uint64_t (***)(void))v9[0];
    uint64_t v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    unint64_t v5 = *v6;
  }
  else
  {
    unint64_t v4 = operator new(0x40uLL);
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = &unk_1F3962518;
    *((unsigned char *)v4 + 32) = 0;
    v4[5] = 0;
    v4[6] = a1;
    v4[7] = 0;
    unint64_t v5 = (uint64_t (**)(void))&unk_1F3962568;
    v4[3] = &unk_1F3962568;
    *a2 = v4 + 3;
    a2[1] = v4;
  }
  return v5[4]();
}

void sub_1DDAA5410(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DDA18310(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAA5428(uint64_t a1)
{
  *(void *)a1 = &unk_1F39624D0;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 8)) {
      j__CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
    }
    else {
      j__free_3(*(void **)(a1 + 32));
    }
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_1DDAA54A0(uint64_t a1)
{
  sub_1DDAA5428(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDAA54D8(uint64_t a1)
{
  NSUInteger v2 = NSPageSize();
  size_t v3 = *(void *)(a1 + 24);
  if (v3 <= v2)
  {
    *(unsigned char *)(a1 + 8) = 1;
    if (v3 <= 1) {
      CFIndex v5 = 1;
    }
    else {
      CFIndex v5 = v3;
    }
    uint64_t result = sub_1DDBF20FC((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v5, 0);
  }
  else
  {
    uint64_t result = sub_1DDBF20BC(v3);
  }
  *(void *)(a1 + 32) = result;
  *(void *)(a1 + 16) = result;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDAA557C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_1DDAA5590(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  uint64_t result = (_WORD *)sub_1DDA7EF68(a1);
  if (v1 >= 2)
  {
    unint64_t v3 = v1 >> 1;
    do
    {
      _WORD *result = bswap32((unsigned __int16)*result) >> 16;
      ++result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_1DDAA55DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA55FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962518;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA5650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1DDAA567C(uint64_t a1)
{
  sub_1DDAA5428(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDAA56B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39625B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA56D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39625B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA5728(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_1DDAA5750@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x60uLL);
  uint64_t result = sub_1DDAA57AC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDAA5798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA57AC(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3962608;
  sub_1DDB59228(a1 + 3, *a2);
  return a1;
}

void sub_1DDAA57F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA580C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAA582C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962608;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA5880(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t sub_1DDAA58A8(uint64_t a1, void *a2, unint64_t a3, void *a4, _OWORD *a5)
{
  unint64_t v10 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3962658;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1DDA18488((_DWORD *)(a1 + 40), &v10);
  *(void *)(a1 + 44) = *a4;
  *(_OWORD *)(a1 + 52) = *a5;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 65537;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 102) = 0;
  *(_WORD *)(a1 + 110) = -1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 169) = 0u;
  *(unsigned char *)(a1 + 185) = 1;
  return a1;
}

void sub_1DDAA5974(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    sub_1DDA18310(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAA5998(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 56);
  if (v2 <= 0)
  {
    int v4 = *(_DWORD *)(result + 44);
  }
  else
  {
    for (int i = 0; i < v2; ++i)
    {
      uint64_t result = sub_1DDAA5B9C(v1);
      int v4 = *(_DWORD *)(v1 + 44);
      if (v4 >= 1)
      {
        CFIndex v5 = (unsigned __int16 *)(result + 2 * v4 * i);
        unsigned int v6 = *(unsigned __int16 *)(v1 + 108);
        int v7 = *(_DWORD *)(v1 + 44);
        do
        {
          unsigned int v8 = *v5;
          if (v8 > v6 && v8 < *(unsigned __int16 *)(v1 + 110))
          {
            *(_WORD *)(v1 + 108) = v8;
            unsigned int v6 = v8;
          }
          ++v5;
          --v7;
        }
        while (v7);
      }
      int v2 = *(_DWORD *)(v1 + 56);
    }
  }
  int v9 = *(_DWORD *)(v1 + 64);
  if (*(_DWORD *)(v1 + 60) >= v4 || v9 < 1)
  {
    int v11 = v9 + v2;
  }
  else
  {
    do
    {
      uint64_t v12 = sub_1DDAA5B9C(v1);
      int v13 = *(_DWORD *)(v1 + 52);
      if (v13 >= 1)
      {
        int v14 = (unsigned __int16 *)(v12 + 2 * *(_DWORD *)(v1 + 44) * v2);
        unsigned int v15 = *(unsigned __int16 *)(v1 + 108);
        do
        {
          unsigned int v16 = *v14;
          if (v16 > v15 && v16 < *(unsigned __int16 *)(v1 + 110))
          {
            *(_WORD *)(v1 + 108) = v16;
            unsigned int v15 = v16;
          }
          ++v14;
          --v13;
        }
        while (v13);
      }
      uint64_t result = sub_1DDAA5B9C(v1);
      int v17 = *(_DWORD *)(v1 + 44);
      uint64_t v18 = *(int *)(v1 + 52);
      uint64_t v19 = *(int *)(v1 + 60);
      int v20 = v19 + v18;
      if ((int)v19 + (int)v18 < v17)
      {
        unint64_t v21 = (unsigned __int16 *)(result + 2 * v17 * v2 + 2 * v18 + 2 * v19);
        unsigned int v22 = *(unsigned __int16 *)(v1 + 108);
        do
        {
          unsigned int v23 = *v21;
          if (v23 > v22 && v23 < *(unsigned __int16 *)(v1 + 110))
          {
            *(_WORD *)(v1 + 108) = v23;
            unsigned int v22 = v23;
          }
          ++v20;
          ++v21;
        }
        while (v20 < v17);
      }
      ++v2;
      int v11 = *(_DWORD *)(v1 + 64) + *(_DWORD *)(v1 + 56);
    }
    while (v2 < v11);
  }
  while (v11 < *(_DWORD *)(v1 + 48))
  {
    uint64_t result = sub_1DDAA5B9C(v1);
    int v24 = *(_DWORD *)(v1 + 44);
    if (v24 >= 1)
    {
      long long v25 = (unsigned __int16 *)(result + 2 * v24 * v11);
      unsigned int v26 = *(unsigned __int16 *)(v1 + 108);
      do
      {
        unsigned int v27 = *v25;
        if (v27 > v26 && v27 < *(unsigned __int16 *)(v1 + 110))
        {
          *(_WORD *)(v1 + 108) = v27;
          unsigned int v26 = v27;
        }
        ++v25;
        --v24;
      }
      while (v24);
    }
    ++v11;
  }
  return result;
}

uint64_t sub_1DDAA5B9C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 112))(&v6);
  uint64_t v2 = sub_1DDA7EF68(v6);
  uint64_t v3 = *(void *)(v6 + 24);
  uint64_t v4 = sub_1DDAA6D9C(a1);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v2 + v3 - v4;
}

void sub_1DDAA5C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_1DDAA5C40(unsigned int *a1)
{
  unsigned int v2 = a1[13];
  unsigned int v3 = a1[14];
  unsigned int v4 = a1[16];
  unsigned int v46 = a1[15];
  unsigned int v47 = v2;
  unsigned int v45 = v4;
  CFIndex v5 = a1 + 11;
  sub_1DDA1B3CC(&v44, a1 + 11);
  sub_1DDA1B3CC(&v43, a1 + 12);
  if (v44 - 1 >= 0x1869F || v43 - 1 >= 0x1869F)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    goto LABEL_54;
  }
  LODWORD(v42) = v2;
  uint64_t v6 = sub_1DDA47EF8(&v42, &v46);
  if (v44 < *v6 || (LODWORD(v42) = v3, int v7 = sub_1DDA47EF8(&v42, &v45), v43 < *v7))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    goto LABEL_54;
  }
  uint64_t v8 = sub_1DDAA5B9C((uint64_t)a1);
  LODWORD(v42) = v3;
  LODWORD(v42) = *sub_1DDA75110((int *)&v42, v5);
  int v9 = *sub_1DDA47EF8(&v42, &v47);
  LOWORD(v41) = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 56))(a1);
  LODWORD(v42) = v9;
  unint64_t v10 = (unsigned __int16 *)(v8 + 2 * *sub_1DDAA7800(&v42, (unsigned __int16 *)&v41));
  uint64_t v11 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 128))(a1);
  uint64_t v42 = v11;
  uint64_t v12 = sub_1DDAA6174((uint64_t)a1);
  uint64_t result = (_WORD *)(*(uint64_t (**)(unsigned int *))(*(void *)a1 + 72))(a1);
  uint64_t v41 = result;
  if (v10 == (unsigned __int16 *)v12 && (_WORD *)v11 == result) {
    return result;
  }
  uint64_t v40 = 2;
  unsigned int v48 = v46;
  unsigned int v14 = *sub_1DDA1B5D4(&v48, &v40);
  unsigned __int16 v39 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 40))(a1);
  unsigned int v48 = v14;
  uint64_t v15 = *sub_1DDAA7800(&v48, &v39);
  if (v15 <= 3
    || (unint64_t v16 = v12 + (void)v41 * a1[17] + 2 * a1[17],
        unint64_t v17 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 120))(a1),
        v16 >= (unint64_t)v10)
    || (unint64_t v18 = v17, LODWORD(v40) = v45, v16 + *sub_1DDA1B5D4(&v40, &v41) > v17)
    || (LODWORD(v40) = v45, uint64_t result = sub_1DDA1B5D4(&v40, &v42), (unint64_t)v10 + *(unsigned int *)result > v18))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
LABEL_54:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*((unsigned char *)a1 + 184)) {
    uint64_t result = (_WORD *)sub_1DDAA5998((uint64_t)a1);
  }
  unsigned int v19 = v45;
  if (v45)
  {
    int v20 = 0;
    unsigned int v22 = v41;
    uint64_t v21 = v42;
    LOWORD(v23) = *((_WORD *)a1 + 54);
    do
    {
      if (v15 == 4)
      {
        LODWORD(v24) = 0;
        unsigned __int16 v27 = v23;
        unsigned __int16 v26 = v23;
        unsigned __int16 v25 = v23;
        unint64_t v34 = v10;
        uint64_t result = (_WORD *)v16;
      }
      else
      {
        uint64_t v24 = 0;
        unsigned __int16 v25 = v23;
        unsigned __int16 v26 = v23;
        unsigned __int16 v27 = v23;
        do
        {
          unint64_t v28 = (_WORD *)(v16 + v24);
          unint64_t v29 = (unsigned __int16 *)((char *)v10 + v24);
          unsigned int v30 = *(unsigned __int16 *)((char *)v10 + v24);
          *(_WORD *)(v16 + v24) = v30;
          if (v30 > v25 && v30 < *((unsigned __int16 *)a1 + 55)) {
            unsigned __int16 v25 = v30;
          }
          unsigned int v31 = v29[1];
          v28[1] = v31;
          if (v31 > v26 && v31 < *((unsigned __int16 *)a1 + 55)) {
            unsigned __int16 v26 = v31;
          }
          unsigned int v32 = v29[2];
          v28[2] = v32;
          if (v32 > v27 && v32 < *((unsigned __int16 *)a1 + 55)) {
            unsigned __int16 v27 = v32;
          }
          unsigned int v33 = v29[3];
          v28[3] = v33;
          if (v33 > (unsigned __int16)v23 && v33 < *((unsigned __int16 *)a1 + 55)) {
            LOWORD(v23) = v33;
          }
          v24 += 8;
        }
        while (v15 - 4 > (unint64_t)v24);
        uint64_t result = (_WORD *)(v16 + v24);
        unint64_t v34 = (unsigned __int16 *)((char *)v10 + v24);
      }
      while (v15 > v24)
      {
        unsigned int v36 = *v34++;
        unsigned __int16 v35 = v36;
        *result++ = v36;
        if (v36 > v25) {
          unsigned __int16 v25 = v35;
        }
        LODWORD(v24) = v24 + 2;
      }
      unsigned int v37 = v26;
      if (v25 > v26) {
        unsigned int v37 = v25;
      }
      if (v27 <= (unsigned __int16)v23) {
        unsigned int v23 = (unsigned __int16)v23;
      }
      else {
        unsigned int v23 = v27;
      }
      if (v37 > v23) {
        LOWORD(v23) = v37;
      }
      *((_WORD *)a1 + 54) = v23;
      unint64_t v10 = (unsigned __int16 *)((char *)v10 + v21);
      v16 += (unint64_t)v22;
      ++v20;
    }
    while (v20 != v19);
  }
  return result;
}

void sub_1DDAA6144(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA6174(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 112))(&v3);
  uint64_t v1 = sub_1DDA7EF68(v3);
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDAA61DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAA61F4(_DWORD *a1)
{
  unint64_t v2 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
  unint64_t v3 = v2 >> 1;
  int v4 = a1[15];
  int v5 = a1[16];
  uint64_t v6 = sub_1DDAA6174((uint64_t)a1);
  if (v5)
  {
    int v7 = 0;
    uint64_t v8 = a1[17];
    uint64_t v9 = v6 + 2 * v3 * v8;
    unint64_t v10 = (_WORD *)(v6 + v3 * (2 * v8 + 2));
    do
    {
      unsigned int v11 = 2 * v8;
      uint64_t v12 = v8;
      unsigned int v13 = v4 + v8;
      unsigned int v14 = v10;
      v9 += 2 * v3;
      if (v8)
      {
        do
        {
          *v14++ = *(_WORD *)(v9 + 2 * v11);
          *(_WORD *)(v9 + 2 * v13++) = *(_WORD *)(v9 + 2 * (v4 - 2 + v12));
          --v11;
          --v12;
        }
        while (v12);
      }
      ++v7;
      v10 += v3;
    }
    while (v7 != v5);
  }
  uint64_t v15 = sub_1DDAA6174((uint64_t)a1);
  size_t v16 = v2 & 0xFFFFFFFFFFFFFFFELL;
  int v17 = a1[17];
  if (v17)
  {
    unsigned int v18 = 0;
    unsigned int v19 = (char *)(v15 + 2 * v3 * (v17 - 1));
    int v20 = &v19[2 * v16];
    do
    {
      memcpy(v19, v20, v16);
      ++v18;
      v20 += v16;
      v19 -= 2 * v3;
    }
    while (v18 < a1[17]);
  }
  uint64_t result = sub_1DDAA6174((uint64_t)a1);
  int v22 = a1[17];
  if (v22)
  {
    unsigned int v23 = 0;
    uint64_t v24 = (char *)(result + 2 * v3 * (v22 + v5));
    unsigned __int16 v25 = &v24[-2 * v16];
    do
    {
      uint64_t result = (uint64_t)memcpy(v24, v25, v16);
      ++v23;
      v25 -= v16;
      v24 += v16;
    }
    while (v23 < a1[17]);
  }
  return result;
}

unsigned int *sub_1DDAA6384@<X0>(unsigned int *result@<X0>, void *a2@<X8>)
{
  unint64_t v2 = result;
  uint64_t v4 = *((void *)result + 17);
  if (!v4)
  {
    (*(void (**)(long long *__return_ptr, unsigned int *))(*(void *)result + 24))(&v15, result);
    uint64_t v5 = v15;
    if (*((void *)&v15 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v15 + 1));
    }
    if (!v5 || v2[42] && v2[43] || v2[44] && v2[45])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    (*(void (**)(unsigned int *))(*(void *)v2 + 96))(v2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 104))(v2);
    uint64_t v6 = sub_1DDAA6174((uint64_t)v2);
    uint64_t v7 = v2[17];
    unint64_t v8 = v6
       + 2 * ((unint64_t)(*(uint64_t (**)(unsigned int *))(*(void *)v2 + 72))(v2) >> 1) * v7
       + 2 * v7;
    unint64_t v14 = v8 - sub_1DDA7EF68(*((void *)v2 + 11));
    unint64_t v13 = (unint64_t)(*(uint64_t (**)(unsigned int *))(*(void *)v2 + 72))(v2) >> 1;
    sub_1DDAA7880((void *)v2 + 11, &v14, v2 + 16, v2 + 15, &v13, &v15);
    long long v9 = v15;
    long long v15 = 0uLL;
    unint64_t v10 = (std::__shared_weak_count *)*((void *)v2 + 18);
    *(_OWORD *)(v2 + 34) = v9;
    if (v10)
    {
      sub_1DDA18310(v10);
      if (*((void *)&v15 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    uint64_t result = (unsigned int *)sub_1DDAA7F60(*((void *)v2 + 17));
    uint64_t v4 = *((void *)v2 + 17);
  }
  uint64_t v11 = *((void *)v2 + 18);
  *a2 = v4;
  a2[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1DDAA65B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA65D0(os_signpost_id_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 136))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 152);
    if (!v4)
    {
      (*(void (**)(void, os_signpost_id_t, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1 + 40, 0);
      uint64_t v5 = sub_1DDA83CFC();
      uint64_t v6 = v5;
      if (a1 + 1 >= 2 && os_signpost_enabled(v5))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1DDA14000, v6, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
      }

      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      v17[2] = sub_1DDAA6844;
      v17[3] = &unk_1E6D04A58;
      v17[4] = a1;
      uint64_t v7 = (void (**)(void))MEMORY[0x1E01C46E0](v17);
      (*(void (**)(os_signpost_id_t))(*(void *)a1 + 168))(a1);
      v7[2](v7);

      uint64_t v8 = sub_1DDAA5B9C(a1);
      (*(void (**)(uint8_t *__return_ptr, os_signpost_id_t))(*(void *)a1 + 112))(buf, a1);
      unint64_t v9 = v8 - sub_1DDA7EF68(*(uint64_t *)buf);
      if (*(void *)&buf[8]) {
        sub_1DDA18310(*(std::__shared_weak_count **)&buf[8]);
      }
      int v10 = *(_DWORD *)(a1 + 44);
      unint64_t v16 = v9;
      int v14 = v10 * *(unsigned __int16 *)(a1 + 80);
      sub_1DDAA7A14((void *)(a1 + 88), &v16, (unsigned int *)(a1 + 48), (unsigned int *)(a1 + 44), (unsigned int *)&v14, buf);
      long long v11 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 160);
      *(_OWORD *)(a1 + 152) = v11;
      if (v12)
      {
        sub_1DDA18310(v12);
        if (*(void *)&buf[8]) {
          sub_1DDA18310(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      uint64_t v4 = *(void *)(a1 + 152);
    }
    uint64_t v13 = *(void *)(a1 + 160);
    *a2 = v4;
    a2[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_1DDAA6804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAA6844(uint64_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  unint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDAA68CC(uint64_t result, uint64_t a2, unint64_t a3, unsigned int a4, char a5)
{
  if (a4 >= 0x11 || (unint64_t v5 = (1 << a4), v5 > a3))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = 0;
  do
  {
    *(_WORD *)(a2 + 2 * v6) = v6 << a5;
    ++v6;
  }
  while (v5 != v6);
  uint64_t v7 = *(void *)(result + 112);
  uint64_t v8 = *(void *)(result + 120) - v7;
  if (v8)
  {
    unint64_t v9 = v8 >> 1;
    if (v9 >= a3) {
      unint64_t v10 = a3;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      uint64_t v11 = 0;
      do
      {
        *(_WORD *)(a2 + 2 * v11) = *(unsigned __int16 *)(v7 + 2 * v11) << a5;
        ++v11;
      }
      while (v10 > v11);
      if (v11 >= v5) {
        return result;
      }
    }
    else
    {
      LODWORD(v11) = 0;
    }
    uint64_t v12 = v11 + 0xFFFFFFFFLL;
    uint64_t v13 = (_WORD *)(a2 + 2 * v11);
    unint64_t v14 = v5 - v11;
    do
    {
      *v13++ = *(_WORD *)(a2 + 2 * v12++);
      --v14;
    }
    while (v14);
  }
  return result;
}

void sub_1DDAA69D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1DDAA69F0(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 104) = *a2;
  int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  int v6 = *(_DWORD *)(a1 + 40);
  int v7 = v3;
  uint64_t result = sub_1DDA4B6A4(&v7, &v6);
  if (*result < *(_DWORD *)(a1 + 104))
  {
    if (!*(unsigned char *)(a1 + 185))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *(_DWORD *)(a1 + 104) = *result;
  }
  return result;
}

void sub_1DDAA6AB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA6AC4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 108);
}

uint64_t sub_1DDAA6ACC(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 110) = a2;
  return result;
}

char *sub_1DDAA6AD4(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(a1 + 112);
  if (result != (char *)a2) {
    return sub_1DDA49474(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  }
  return result;
}

void sub_1DDAA6AF8(uint64_t a1@<X0>, void *a2@<X8>)
{
  os_signpost_id_t v4 = (uint64_t *)(a1 + 88);
  if (!*(void *)(a1 + 88))
  {
    if ((*(_DWORD *)(a1 + 60) - 1) >= 0x1869F
      || (*(_DWORD *)(a1 + 64) - 100000) < 0xFFFE7961
      || (*(_DWORD *)(a1 + 44) - 1) >= 0x1869F
      || (*(_DWORD *)(a1 + 48) - 100000) < 0xFFFE7961)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
    uint64_t v6 = *(int *)(a1 + 56);
    uint64_t v7 = v5 - (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1) * v6;
    uint64_t v8 = *(int *)(a1 + 64);
    uint64_t v9 = *(_DWORD *)(a1 + 48) + ~*(_DWORD *)(a1 + 56);
    uint64_t v10 = v5 * v8 - (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1) * v9;
    if (v7 > v10) {
      uint64_t v10 = v7;
    }
    uint64_t v11 = v10 & ~(v10 >> 63);
    unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
    uint64_t v13 = sub_1DDAA6D9C(a1);
    if (v12 <= v13 + v11) {
      unint64_t v14 = v13 + v11;
    }
    else {
      unint64_t v14 = v12;
    }
    sub_1DDAA532C(v14, &v21);
    uint64_t v15 = v21;
    unint64_t v16 = v22;
    uint64_t v21 = 0;
    int v22 = 0;
    uint64_t v19 = v15;
    int v20 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1DDAA6DFC(v4, &v21, &v19);
    if (v20) {
      sub_1DDA18310(v20);
    }
    if (v22) {
      sub_1DDA18310(v22);
    }
    if (v16) {
      sub_1DDA18310(v16);
    }
  }
  uint64_t v17 = *(void *)(a1 + 96);
  *a2 = *(void *)(a1 + 88);
  a2[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1DDAA6D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  if (a12) {
    sub_1DDA18310(a12);
  }
  if (v12) {
    sub_1DDA18310(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAA6D9C(uint64_t a1)
{
  unint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  uint64_t v1 = sub_1DDA18500(&v4, &v3);
  sub_1DDA47EF8(v1, &dword_1DDBFAC9C);
  return v4;
}

BOOL sub_1DDAA6DFC(uint64_t *a1, void *a2, uint64_t *a3)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    if (v13)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      unint64_t v14 = (std::__shared_weak_count *)a1[1];
      *a1 = v12;
      a1[1] = v13;
      if (v14) {
        sub_1DDA18310(v14);
      }
    }
    else
    {
      *a1 = v12;
      a1[1] = 0;
    }
    uint64_t v15 = v7;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    if (v10)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      uint64_t v11 = (std::__shared_weak_count *)a2[1];
      *a2 = v9;
      a2[1] = v10;
      if (v11) {
        sub_1DDA18310(v11);
      }
    }
    else
    {
      *a2 = v9;
      a2[1] = 0;
    }
    uint64_t v15 = v8;
  }
  std::__sp_mut::unlock(sp_mut);
  if (v15) {
    sub_1DDA18310(v15);
  }
  return v7 == v8;
}

uint64_t sub_1DDAA6ED8(unsigned int *a1)
{
  sub_1DDA1B3CC(&v4, a1 + 16);
  LODWORD(v3) = 2 * a1[17];
  sub_1DDA47EF8(&v4, &v3);
  uint64_t v3 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 136))(a1);
  sub_1DDA1B5D4(&v4, &v3);
  return v4;
}

unint64_t sub_1DDAA6F60(int *a1)
{
  uint64_t v1 = (2 * a1[17]) + (uint64_t)a1[15];
  uint64_t v2 = (*(unsigned int (**)(int *))(*(void *)a1 + 40))(a1) * v1;
  if (((2 * v2) & 0x1E) != 0) {
    return (2 * v2 + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  else {
    return 2 * v2;
  }
}

uint64_t sub_1DDAA6FD0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 112))(&v5);
  uint64_t v2 = sub_1DDA7EF68(v5);
  if (v6) {
    sub_1DDA18310(v6);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v5, a1);
  uint64_t v3 = *(void *)(v5 + 24);
  if (v6) {
    sub_1DDA18310(v6);
  }
  return v2 + v3;
}

void sub_1DDAA7078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAA7090(_DWORD *a1)
{
  int v1 = a1[11];
  return 2 * v1 * (uint64_t)(*(int (**)(_DWORD *))(*(void *)a1 + 40))(a1);
}

uint64_t sub_1DDAA70E0(_DWORD *a1)
{
  uint64_t v2 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 72))(a1);
  int v3 = a1[17];
  return v2 + 4 * v3 * (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 40))(a1);
}

uint64_t sub_1DDAA7168(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 80);
}

uint64_t sub_1DDAA7170(uint64_t result, int a2)
{
  if ((a2 - 5) <= 0xFFFFFFFB)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_WORD *)(result + 80) = a2;
  return result;
}

void sub_1DDAA71D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA71E8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 82);
}

uint64_t sub_1DDAA71F0(uint64_t result, int a2)
{
  if ((a2 - 5) <= 0xFFFFFFFB)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_WORD *)(result + 82) = a2;
  return result;
}

void sub_1DDAA7254(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA7268(int *a1)
{
  return (*(uint64_t (**)(int *))(*(void *)a1 + 128))(a1) * a1[12];
}

uint64_t sub_1DDAA72B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1DDAA72BC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1DDAA72C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

uint64_t (***sub_1DDAA72CC(uint64_t a1))(void)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    sub_1DDAA7F30(v2);
  }
  uint64_t result = *(uint64_t (****)(void))(a1 + 152);
  if (result)
  {
    return sub_1DDAA7F30((uint64_t)result);
  }
  return result;
}

uint64_t sub_1DDAA731C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    uint64_t v3 = sub_1DDAA7F60(v2);
  }
  else {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4) {
    return v3 & sub_1DDAA7F60(v4);
  }
  return v3;
}

uint64_t sub_1DDAA7368(uint64_t result, void *a2, void *a3)
{
  *(void *)(result + 168) = *a2;
  *(void *)(result + 176) = *a3;
  return result;
}

void sub_1DDAA737C(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 24))(&v17);
  if (a3[3] >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (_WORD *)(a2 + 4);
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1))
      {
        int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
        uint64_t v9 = sub_1DDAA7CC0(v17);
        if (a3[2])
        {
          unint64_t v10 = 0;
          uint64_t v11 = (unsigned __int16 *)(v9 + 2 * (a3[1] + (int)v6) * *(_DWORD *)(v17 + 56) + 2 * (*a3 * v8));
          uint64_t v12 = v7;
          do
          {
            if (v8 == 1)
            {
              if (qword_1EAB6A8E0 != -1) {
                dispatch_once(&qword_1EAB6A8E0, &unk_1F3962758);
              }
              __int16 v13 = xmmword_1EAB6A8E8[*v11];
              _WORD *v12 = v13;
              *(v12 - 1) = v13;
              *(v12 - 2) = v13;
              if (qword_1EAB6A8E0 != -1) {
                dispatch_once(&qword_1EAB6A8E0, &unk_1F3962758);
              }
              ++v11;
            }
            else
            {
              if (qword_1EAB6A8E0 != -1) {
                dispatch_once(&qword_1EAB6A8E0, &unk_1F3962758);
              }
              *(v12 - 2) = xmmword_1EAB6A8E8[*v11];
              if (qword_1EAB6A8E0 != -1) {
                dispatch_once(&qword_1EAB6A8E0, &unk_1F3962758);
              }
              *(v12 - 1) = xmmword_1EAB6A8E8[v11[1]];
              if (qword_1EAB6A8E0 != -1) {
                dispatch_once(&qword_1EAB6A8E0, &unk_1F3962758);
              }
              _WORD *v12 = xmmword_1EAB6A8E8[v11[2]];
              if (qword_1EAB6A8E0 != -1) {
                dispatch_once(&qword_1EAB6A8E0, &unk_1F3962758);
              }
              v11 += 3;
            }
            v12[1] = xmmword_1EAB6A8E8[0xFFFF];
            ++v10;
            v12 += 4;
          }
          while (v10 < a3[2]);
        }
      }
      else
      {
        uint64_t v14 = sub_1DDAA7CC0(v17);
        memcpy((void *)(a2 + v6 * a4), (const void *)(v14 + 2 * (a3[1] + (int)v6) * *(_DWORD *)(v17 + 56) + 2 * *a3), 2 * a3[2]);
      }
      ++v6;
      uint64_t v7 = (_WORD *)((char *)v7 + a4);
    }
    while (v6 < a3[3]);
  }
  if (v18) {
    sub_1DDA18310(v18);
  }
}

void sub_1DDAA764C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1DDA18310(a14);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDAA7670()
{
  v0 = &unk_1EAB8B000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB8B1A0, memory_order_acquire) & 1) == 0)
  {
    int v3 = __cxa_guard_acquire(&qword_1EAB8B1A0);
    v0 = (void *)&unk_1EAB8B000;
    if (v3)
    {
      qword_1EAB8B198 = (uint64_t)dispatch_queue_create("Unpacker I/O Queue", 0);
      __cxa_guard_release(&qword_1EAB8B1A0);
      v0 = (void *)&unk_1EAB8B000;
    }
  }
  int v1 = (void *)v0[51];

  return v1;
}

id sub_1DDAA76EC()
{
  v0 = &unk_1EAB8B000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB8B1B0, memory_order_acquire) & 1) == 0)
  {
    int v3 = __cxa_guard_acquire(&qword_1EAB8B1B0);
    v0 = (void *)&unk_1EAB8B000;
    if (v3)
    {
      qword_1EAB8B1A8 = (uint64_t)dispatch_queue_create("Unpacker Decompress Queue", MEMORY[0x1E4F14430]);
      __cxa_guard_release(&qword_1EAB8B1B0);
      v0 = (void *)&unk_1EAB8B000;
    }
  }
  int v1 = (void *)v0[53];

  return v1;
}

int64x2_t sub_1DDAA776C()
{
  uint64_t v0 = 0;
  int64x2_t result = (int64x2_t)xmmword_1DDBF8D70;
  int64x2_t v2 = (int64x2_t)xmmword_1DDBF8D80;
  int64x2_t v3 = (int64x2_t)xmmword_1DDBF8D90;
  float32x4_t v4 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  int64x2_t v5 = (int64x2_t)xmmword_1DDBF8D60;
  int64x2_t v6 = vdupq_n_s64(8uLL);
  do
  {
    xmmword_1EAB6A8E8[v0] = (__int128)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v5)), vcvtq_f64_u64((uint64x2_t)v3)), v4)), vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v2)), vcvtq_f64_u64((uint64x2_t)result)), v4));
    int64x2_t v2 = vaddq_s64(v2, v6);
    int64x2_t v3 = vaddq_s64(v3, v6);
    int64x2_t v5 = vaddq_s64(v5, v6);
    int64x2_t result = vaddq_s64(result, v6);
    ++v0;
  }
  while (v0 != 0x2000);
  return result;
}

_DWORD *sub_1DDAA7800(_DWORD *result, unsigned __int16 *a2)
{
  unint64_t v2 = *result * (unint64_t)*a2;
  char *result = v2;
  if ((v2 & 0xFFFFFFFF00000000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDAA786C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA7880(void *a1@<X1>, unint64_t *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unint64_t *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0x58uLL);
  sub_1DDAA7924(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDAA7910(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA7924(void *a1, void *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, unint64_t *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39601A0;
  sub_1DDAA7980((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1DDAA796C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA7980(uint64_t a1, void *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, unint64_t *a6)
{
  sub_1DDA18500(&v15, a3);
  sub_1DDA1B3CC(&v14, a4);
  sub_1DDA1B3CC(&v13, a5);
  sub_1DDA18500(&v12, a6);
  return sub_1DDAA7BA8(a1, a2, &v15, &v14, &v13, &v12);
}

void sub_1DDAA7A14(void *a1@<X1>, unint64_t *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X8>)
{
  int v12 = operator new(0x58uLL);
  sub_1DDAA7AB8(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDAA7AA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA7AB8(void *a1, void *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39601A0;
  sub_1DDAA7B14((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1DDAA7B00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA7B14(uint64_t a1, void *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  sub_1DDA18500(&v15, a3);
  sub_1DDA1B3CC(&v14, a4);
  sub_1DDA1B3CC(&v13, a5);
  sub_1DDA1B3CC(&v12, a6);
  return sub_1DDAA7BA8(a1, a2, &v15, &v14, &v13, &v12);
}

uint64_t sub_1DDAA7BA8(uint64_t result, void *a2, unsigned int *a3, _DWORD *a4, int *a5, _DWORD *a6)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)int64x2_t result = &unk_1F3962788;
  uint64_t v6 = a2[1];
  *(void *)(result + 24) = *a2;
  *(void *)(result + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 40) = *a3;
  int v7 = *a5;
  *(_DWORD *)(result + 48) = *a4;
  *(_DWORD *)(result + 52) = v7;
  *(_DWORD *)(result + 56) = *a6;
  return result;
}

uint64_t sub_1DDAA7C00(uint64_t a1)
{
  *(void *)a1 = &unk_1F3962788;
  (***(void (****)(void))(a1 + 24))(*(void *)(a1 + 24));
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_1DDA18310(v2);
  }
  int64x2_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1DDAA7C88(uint64_t a1)
{
  sub_1DDAA7C00(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAA7CC0(uint64_t a1)
{
  return sub_1DDA7EF68(*(void *)(a1 + 24)) + *(void *)(a1 + 40);
}

void sub_1DDAA7CF0(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  int v7 = *(_DWORD *)(a1 + 48);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v28 = 0;
  sub_1DDA18218(v29, v6, v7);
  if (sub_1DDB56B24((int *)a2, (int *)&v28))
  {
    unsigned int v9 = *(_DWORD *)(a1 + 56);
    int v8 = (int *)(a1 + 56);
    uint64_t v26 = *((void *)v8 - 2) + 2 * (*a2 + v9 * (uint64_t)(int)a2[1]);
    sub_1DDAA961C((void *)v8 - 4, (unint64_t *)&v26, a2 + 3, a2 + 2, v8, &v21);
    *(_OWORD *)a3 = v21;
  }
  else
  {
    sub_1DDAA520C(2 * (int)a2[2] * (uint64_t)(int)a2[3], &v26);
    v23[0] = 0;
    sub_1DDAA97DC(&v26, v23, a2 + 3, a2 + 2, a2 + 2, &v21);
    uint64_t v10 = *((void *)&v21 + 1);
    *a3 = v21;
    a3[1] = v10;
    v30.origin.x = (double)(int)*a2;
    v30.origin.y = (double)(int)a2[1];
    v30.size.width = (double)(int)a2[2];
    v30.size.height = (double)(int)a2[3];
    v32.origin.x = (double)(int)v28;
    v32.origin.y = (double)SHIDWORD(v28);
    v32.size.width = (double)v29[0];
    v32.size.height = (double)v29[1];
    CGRect v31 = CGRectIntersection(v30, v32);
    *(CGFloat *)&long long v21 = v31.origin.x;
    *((void *)&v21 + 1) = *(void *)&v31.origin.y;
    v22[0] = v31.size.width;
    v22[1] = v31.size.height;
    sub_1DDA35814(v23, (double *)&v21);
    sub_1DDA35814(&v24, v22);
    if (v25)
    {
      for (unint64_t i = 0; i < v25; ++i)
      {
        uint64_t v12 = sub_1DDA7EF68(*(void *)(a1 + 24));
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v14 = (int)v23[1];
        uint64_t v15 = *(unsigned int *)(a1 + 56);
        uint64_t v16 = sub_1DDA7EF68(v26);
        uint64_t v17 = v24;
        if (v24)
        {
          unsigned int v18 = (_WORD *)(v16
                        - 2 * (int)(*a2 & ((int)*a2 >> 31))
                        + 2 * (i - (int)(a2[1] & ((int)a2[1] >> 31))) * (int)a2[2]);
          uint64_t v19 = (__int16 *)(v12 + v13 + 2 * (i + v14) * v15 + 2 * (int)v23[0]);
          do
          {
            __int16 v20 = *v19++;
            *v18++ = v20;
            --v17;
          }
          while (v17);
        }
      }
    }
    if (v27) {
      sub_1DDA18310(v27);
    }
  }
}

void sub_1DDAA7EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (***sub_1DDAA7F30(uint64_t a1))(void)
{
  int64x2_t result = *(uint64_t (****)(void))(a1 + 24);
  if (result) {
    return (uint64_t (***)(void))(**result)(result);
  }
  return result;
}

uint64_t sub_1DDAA7F60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 8))();
  }
  else {
    return 1;
  }
}

uint64_t sub_1DDAA7F94(uint64_t a1, int *a2, __int16 a3)
{
  int v7 = *(_DWORD *)(a1 + 48);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v19 = 0;
  sub_1DDA18218(&v20, v6, v7);
  if (!sub_1DDB56B24(a2, (int *)&v19))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = sub_1DDA7EF68(*(void *)(a1 + 24));
  uint64_t v9 = a2[1];
  uint64_t v10 = (a2[3] + v9);
  if (v9 >= v10)
  {
    unsigned __int16 v11 = 0;
  }
  else
  {
    unsigned __int16 v11 = 0;
    uint64_t v12 = a2[2];
    do
    {
      if ((int)v12 >= 1)
      {
        uint64_t v13 = (__int16 *)(v8
                        + *(void *)(a1 + 40)
                        + 2 * *a2
                        + 2 * (*(_DWORD *)(a1 + 56) * v9));
        uint64_t v14 = &v13[v12];
        do
        {
          __int16 v15 = *v13++;
          unsigned __int16 v16 = v15 - a3;
          if (v11 < (unsigned __int16)(v15 - a3)) {
            unsigned __int16 v11 = v16;
          }
        }
        while (v13 < v14);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  return (unsigned __int16)(v11 + a3);
}

void sub_1DDAA80B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA80C8(uint64_t a1, unsigned int *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = a3;
  if (a4 > a3)
  {
    uint64_t v30 = 0;
    sub_1DDA25B2C(__p, (unsigned __int16)(a4 - a3 + 1), &v30);
    uint64_t v8 = sub_1DDA7EF68(*(void *)(a1 + 24));
    uint64_t v9 = a2[1];
    uint64_t v10 = a2[3] + v9;
    unsigned int v11 = v4;
    unsigned int v12 = v4;
    if (v9 < v10)
    {
      int v13 = *(_DWORD *)(a1 + 56);
      uint64_t v14 = v8 + *(void *)(a1 + 40) + 2 * *a2;
      uint64_t v15 = (int)a2[2];
      unsigned int v12 = v4;
      do
      {
        if ((int)v15 >= 1)
        {
          unsigned __int16 v16 = (unsigned __int16 *)(v14 + 2 * (v13 * v9));
          uint64_t v17 = &v16[v15];
          unsigned int v18 = (double *)__p[0];
          do
          {
            unsigned int v19 = *v16;
            if (v19 >= v4 && v19 <= a4)
            {
              v18[v19 - v4] = v18[v19 - v4] + 1.0;
              if (v19 > (unsigned __int16)v12) {
                unsigned int v12 = v19;
              }
            }
            ++v16;
          }
          while (v16 < v17);
        }
        ++v9;
      }
      while (v9 != v10);
      unsigned int v11 = (unsigned __int16)v12;
    }
    unsigned int v21 = v12 + ((a4 - v11) & ((int)(a4 - v11) >> 31));
    if (v4 < (unsigned __int16)(v12 + ((a4 - v11) & ((int)(a4 - v11) >> 31))))
    {
      unsigned int v22 = (34953 * a4) >> 20;
      do
      {
        int v23 = (unsigned __int16)v21 - v22;
        unsigned int v24 = v21 - 1;
        if (v23 < (unsigned __int16)(v21 - 1))
        {
          unsigned int v25 = 0;
          unsigned int v26 = 0;
          int v27 = (unsigned __int16)(v21 - 1);
          do
          {
            if (v4 > (unsigned __int16)v24)
            {
              LOWORD(v4) = v21;
              goto LABEL_30;
            }
            double v28 = *((double *)__p[0] + (int)(v27 - v4));
            if (v28 != 0.0)
            {
              if (!(_WORD)v26) {
                unsigned int v26 = v24;
              }
              v25 += llround(v28);
              if (v25 > 0xA)
              {
                LOWORD(v4) = v21;
                goto LABEL_33;
              }
            }
            int v27 = (unsigned __int16)--v24;
          }
          while (v23 < (unsigned __int16)v24);
          if ((_WORD)v26) {
            goto LABEL_27;
          }
        }
        unsigned int v26 = (unsigned __int16)v21 - v22;
LABEL_27:
        unsigned int v21 = v26;
      }
      while (v4 < (unsigned __int16)v26);
    }
LABEL_30:
    if (__p[0])
    {
LABEL_33:
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return (unsigned __int16)v4;
}

void sub_1DDAA827C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAA8298(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int64x2_t v3 = *(_WORD **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 8 || *v3 || v3[1] != 1 || v3[2] != 1 || v3[3])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v6 = (unint64_t *)(a1 + 40);
  sub_1DDA18500(&v26, (unint64_t *)(a1 + 40));
  unint64_t v24 = 2 * *(unsigned int *)(a1 + 56);
  sub_1DDA18500(&v25, &v24);
  unsigned int v27 = v26;
  unsigned int v26 = *sub_1DDAA99E4(&v27, &v25);
  sub_1DDA18500(&v25, v6);
  unint64_t v24 = 2 * *(unsigned int *)(a1 + 56);
  sub_1DDA18500(&v22, &v24);
  unsigned int v27 = v22;
  int v23 = *sub_1DDA4BDD8(&v27, &v26);
  unsigned int v27 = v25;
  unsigned int v7 = *sub_1DDA4C118(&v27, &v23);
  int v21 = 2;
  unsigned int v27 = v7;
  uint64_t v8 = sub_1DDAA99E4(&v27, &v21);
  if (*(_DWORD *)(a1 + 48))
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    int v11 = *v8;
    unsigned __int8 v12 = (*v8 & 1) == 0;
    do
    {
      uint64_t v13 = sub_1DDA7EF68(*(void *)(a1 + 24));
      unint64_t v14 = *(unsigned int *)(a1 + 52);
      if ((((_BYTE)v11 + ~((_BYTE)v26 + (_BYTE)v10)) & 1u) < v14)
      {
        unint64_t v15 = (v12 ^ v26) & 1;
        do
        {
          uint64_t v16 = v13 + *(void *)(a1 + 40) + 2 * *(_DWORD *)(a1 + 56) * v10;
          unsigned int v17 = *(unsigned __int16 *)(v16 + 2 * v15);
          if (v17 >= a3) {
            unsigned int v18 = v9;
          }
          else {
            unsigned int v18 = *(unsigned __int16 *)(v16 + 2 * v15);
          }
          if (v17 > v9) {
            unsigned int v9 = v18;
          }
          v15 += 2;
        }
        while (v15 < v14);
      }
      ++v10;
      v12 ^= 1u;
    }
    while (v10 < *(_DWORD *)(a1 + 48));
  }
  else
  {
    LOWORD(v9) = 0;
  }
  return (unsigned __int16)v9;
}

void sub_1DDAA8498(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDAA84AC(uint64_t a1, int *a2)
{
  int v5 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 52);
  uint64_t v21 = 0;
  sub_1DDA18218(&v22, v4, v5);
  if (!sub_1DDB56B24(a2, (int *)&v21))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = sub_1DDA7EF68(*(void *)(a1 + 24));
  uint64_t v7 = a2[1];
  uint64_t v8 = (a2[3] + v7);
  double result = 0.0;
  if (v7 < v8)
  {
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = *a2;
    int v13 = *(_DWORD *)(a1 + 56);
    uint64_t v14 = (a2[2] + v12);
    uint64_t v15 = v6 + *(void *)(a1 + 40) + 2 * v12;
    unsigned int v16 = v7 * v13;
    do
    {
      if (v12 < v14)
      {
        unsigned int v17 = (unsigned __int16 *)(v15 + 2 * v16);
        uint64_t v18 = v14 - v12;
        do
        {
          int v19 = *v17++;
          v11 += v19;
          if (v19) {
            ++v10;
          }
          --v18;
        }
        while (v18);
      }
      ++v7;
      v16 += v13;
    }
    while (v7 != v8);
    if (v10) {
      return (double)v11 / (double)v10;
    }
  }
  return result;
}

void sub_1DDAA85D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA85E4(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  int v7 = *(_DWORD *)(a1 + 48);
  int v6 = *(_DWORD *)(a1 + 52);
  uint64_t v13 = 0;
  sub_1DDA18218(&v14, v6, v7);
  if (!sub_1DDB56B24(a2, (int *)&v13))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v13 = 0;
  sub_1DDA25B2C(a3, 4uLL, &v13);
  double v8 = sub_1DDAA8758(a1, a2, 0);
  if (a3[1] == *a3
    || (*(double *)*a3 = v8, double v9 = sub_1DDAA8758(a1, a2, 1), a3[1] - *a3 < 9uLL)
    || (*(double *)(*a3 + 8) = v9, double v10 = sub_1DDAA8758(a1, a2, 2), a3[1] - *a3 < 0x11uLL)
    || (*(double *)(*a3 + 16) = v10, double v11 = sub_1DDAA8758(a1, a2, 3), a3[1] - *a3 <= 0x18uLL))
  {
    sub_1DDA24AD0();
  }
  *(double *)(*a3 + 24) = v11;
}

void sub_1DDAA872C(_Unwind_Exception *exception_object)
{
  int64x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAA8758(uint64_t a1, int *a2, char a3)
{
  uint64_t v6 = sub_1DDA7EF68(*(void *)(a1 + 24));
  int v8 = *a2;
  int v7 = a2[1];
  int v9 = v7 & 1;
  if (v7 < 0) {
    int v9 = -v9;
  }
  if (v9 == (a3 & 2)) {
    unsigned int v10 = a2[1];
  }
  else {
    unsigned int v10 = v7 + 1;
  }
  int v11 = *a2 & 1;
  if (v8 < 0) {
    int v11 = -v11;
  }
  if (v11 == (a3 & 1)) {
    unsigned int v12 = *a2;
  }
  else {
    unsigned int v12 = v8 + 1;
  }
  unsigned int v13 = a2[3] + v7;
  if (v10 >= v13)
  {
    unint64_t v15 = 0;
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    unsigned int v16 = a2[2] + v8;
    do
    {
      if (v12 < v16)
      {
        uint64_t v17 = v6 + *(void *)(a1 + 40) + 2 * *(_DWORD *)(a1 + 56) * v10;
        unsigned int v18 = v12;
        do
        {
          v14 += *(unsigned __int16 *)(v17 + 2 * v18);
          if (*(_WORD *)(v17 + 2 * v18)) {
            ++v15;
          }
          v18 += 2;
        }
        while (v18 < v16);
      }
      v10 += 2;
    }
    while (v10 < v13);
  }
  return (double)v14 / (double)v15;
}

double sub_1DDAA8844(uint64_t a1, int *a2, unsigned int a3, unsigned int a4, int a5, double a6)
{
  int v13 = *(_DWORD *)(a1 + 48);
  int v12 = *(_DWORD *)(a1 + 52);
  uint64_t v34 = 0;
  sub_1DDA18218(&v35, v12, v13);
  if (!sub_1DDB56B24(a2, (int *)&v34))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v14 = 0.0;
  if ((a2[2] * a2[3]) >= 2)
  {
    uint64_t v15 = sub_1DDA7EF68(*(void *)(a1 + 24));
    uint64_t v16 = a2[1];
    uint64_t v17 = (a2[3] + v16);
    if (v16 < v17)
    {
      unsigned int v18 = 0;
      uint64_t v19 = *a2;
      int v20 = *(_DWORD *)(a1 + 56);
      uint64_t v21 = (a2[2] + v19);
      uint64_t v22 = v15 + *(void *)(a1 + 40) + 2 * v19;
      unsigned int v23 = v16 * v20;
      double v24 = 0.0;
      do
      {
        if (v19 < v21)
        {
          unsigned int v25 = (unsigned __int16 *)(v22 + 2 * v23);
          uint64_t v26 = v21 - v19;
          do
          {
            unsigned int v27 = *v25++;
            BOOL v28 = v27 >= a3;
            BOOL v29 = v27 <= a4;
            double v30 = v24 + ((double)v27 - a6) * ((double)v27 - a6);
            v18 += v28 && v29;
            if (v28 && v29) {
              double v24 = v30;
            }
            --v26;
          }
          while (v26);
        }
        ++v16;
        v23 += v20;
      }
      while (v16 != v17);
      if (v18 < 2)
      {
        return 0.0;
      }
      else if (a5)
      {
        float v31 = v24 / (float)v18;
        return sqrtf(v31);
      }
      else
      {
        return sqrt(v24 / (double)(v18 - 1));
      }
    }
  }
  return v14;
}

void sub_1DDAA89F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA8A04(uint64_t a1, int *a2, char a3, unsigned int a4, unsigned int a5, double a6)
{
  uint64_t result = sub_1DDA7EF68(*(void *)(a1 + 24));
  int v14 = *a2;
  int v13 = a2[1];
  int v15 = v13 & 1;
  if (v13 < 0) {
    int v15 = -v15;
  }
  if (v15 == (a3 & 2)) {
    unsigned int v16 = a2[1];
  }
  else {
    unsigned int v16 = v13 + 1;
  }
  int v17 = *a2 & 1;
  if (v14 < 0) {
    int v17 = -v17;
  }
  if (v17 == (a3 & 1)) {
    unsigned int v18 = *a2;
  }
  else {
    unsigned int v18 = v14 + 1;
  }
  unsigned int v19 = a2[3] + v13;
  double v20 = 0.0;
  if (v16 < v19)
  {
    int v21 = 0;
    uint64_t v22 = result + *(void *)(a1 + 40);
    unsigned int v23 = a2[2] + v14;
    do
    {
      if (v18 < v23)
      {
        unsigned int v24 = v18;
        do
        {
          unsigned int v25 = *(unsigned __int16 *)(v22 + 2 * *(_DWORD *)(a1 + 56) * v16 + 2 * v24);
          uint64_t result = v25 >= a4;
          BOOL v26 = v25 <= a5;
          v21 += result & v26;
          if ((result & v26) != 0) {
            double v20 = v20 + ((double)v25 - a6) * ((double)v25 - a6);
          }
          v24 += 2;
        }
        while (v24 < v23);
      }
      v16 += 2;
    }
    while (v16 < v19);
  }
  return result;
}

void sub_1DDAA8B54(uint64_t a1, int *a2, int a3, double a4)
{
  int v9 = *(_DWORD *)(a1 + 48);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v16 = 0;
  sub_1DDA18218(&v17, v8, v9);
  if (!sub_1DDB56B24(a2, (int *)&v16))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a4 >= 0.0 && ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(void *)&a4 - 1) <= 0xFFFFFFFFFFFFELL)
  {
    double v12 = sub_1DDAA8844(a1, a2, 1u, 0xFFFFu, a3, a4);
    unsigned __int16 v13 = llround(fmax(floor(a4 + v12 * -5.0), 0.0));
    if ((v13 & 0xFFFE) != 0) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = 1;
    }
    sub_1DDAA8844(a1, a2, v14, vcvtpd_s64_f64(a4 + v12 * 5.0), a3, a4);
  }
}

void sub_1DDAA8CC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA8CD4@<X0>(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  int v9 = *(_DWORD *)(a1 + 48);
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v20 = 0;
  sub_1DDA18218(&v21, v8, v9);
  if (!sub_1DDB56B24(a2, (int *)&v20))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t result = (uint64_t)sub_1DDA24B78(a4, 4uLL);
  uint64_t v11 = 0;
  do
  {
    double v12 = *(double *)(*a3 + 8 * v11);
    if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v12 <= 0.0) {
      break;
    }
    sub_1DDAA8A04(a1, a2, v11, 1u, 0xFFFFu, v12);
    double v14 = *(double *)(*a3 + 8 * v11);
    unsigned __int16 v15 = llround(fmax(floor(v14 + v13 * -5.0), 0.0));
    unsigned int v16 = (v15 & 0xFFFE) != 0 ? v15 : 1;
    uint64_t result = sub_1DDAA8A04(a1, a2, v11, v16, vcvtpd_s64_f64(v14 + v13 * 5.0), *(double *)(*a3 + 8 * v11));
    *(double *)(*a4 + 8 * v11) = v17;
    if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      break;
    }
  }
  while (v17 > 0.0 && v11++ != 3);
  return result;
}

void sub_1DDAA8E60(_Unwind_Exception *exception_object)
{
  int64x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAA8E90(uint64_t a1)
{
  sub_1DDA1B448(&v1, (void *)(a1 + 8));
  sub_1DDB5138C(&v1);
  if (v2) {
    sub_1DDA18310(v2);
  }
}

void sub_1DDAA8ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DDAA8EEC(uint64_t a1, double ***a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int64x2_t v3 = *a2;
  int v5 = **a2;
  int v4 = (*a2)[1];
  float v6 = 0.0;
  unint64_t v7 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    float v9 = 0.0;
    float v8 = 0.0;
  }
  else
  {
    float v8 = *v5;
    if (v7 < 9)
    {
      float v9 = 0.0;
    }
    else
    {
      float v9 = v5[1];
      if (v7 >= 0x11) {
        float v6 = v5[2];
      }
    }
  }
  unsigned int v10 = (float64x2_t *)v3[3];
  int64_t v11 = (char *)v3[4] - (char *)v10;
  if (v11 == 32)
  {
    float32x2_t v12 = vcvt_f32_f64(*v10);
    float v13 = v10[1].f64[0];
    float v14 = v10[1].f64[1];
  }
  else
  {
    float32x2_t v12 = 0;
    float v13 = 0.0;
    float v14 = 0.0;
  }
  float32x2_t v56 = v12;
  float v57 = v13;
  float v58 = v14;
  unsigned int v16 = v3 + 6;
  unsigned __int16 v15 = v3[6];
  float v17 = 0.0;
  unint64_t v18 = (char *)v16[1] - (char *)v15;
  if (v18)
  {
    float v19 = *v15;
    if (v18 >= 9) {
      float v17 = v15[1];
    }
  }
  else
  {
    float v19 = 0.0;
  }
  uint64_t result = (char *)sub_1DDA7EF68(*(void *)(a1 + 24));
  uint64_t v24 = *(unsigned int *)(a1 + 48);
  if (v24)
  {
    uint64_t v25 = 0;
    float v26 = 1.0 / 800.0 / 800.0;
    float v27 = 1.0 / 2000.0 / 2000.0;
    BOOL v28 = &result[*(void *)(a1 + 40)];
    BOOL v29 = v4 == v5;
    unsigned int v30 = *(_DWORD *)(a1 + 52);
    BOOL v31 = v11 != 32 || v4 == v5;
    unsigned int v32 = v30 >> 1;
    float v33 = 800.0;
    float v34 = 2000.0;
    BOOL v35 = v11 == 32 && v4 == v5;
    if (v11 == 32) {
      BOOL v29 = 1;
    }
    if (v32 <= 1) {
      unsigned int v32 = 1;
    }
    float v36 = 0.0;
    do
    {
      uint64_t result = &v28[2 * v30 * v25];
      if (v31)
      {
        if (v35)
        {
          if (v30 >= 2)
          {
            for (int i = 0; i != v32; ++i)
            {
              LOWORD(v21) = *(_WORD *)result;
              float v21 = (float)LODWORD(v21);
              float v23 = 1.0 - (float)((float)(v21 * v21) * v26);
              if (v21 <= v33) {
                float v21 = v21 + (float)(v23 * (float)(v56.f32[i & 1 | (2 * (v25 & 1))] * -0.5));
              }
              float v22 = v21 + (float)((float)(1.0 - (float)((float)(v21 * v21) * v27)) * (float)(v8 * -0.5));
              if (v21 <= v34) {
                float v21 = v21 + (float)((float)(1.0 - (float)((float)(v21 * v21) * v27)) * (float)(v8 * -0.5));
              }
              int v44 = (int)v21;
              if ((int)v21 >= 0xFFFF) {
                int v44 = 0xFFFF;
              }
              *(_WORD *)uint64_t result = v44 & ~(unsigned __int16)(v44 >> 31);
              result += 2;
            }
            unsigned int v37 = v32;
          }
          else
          {
            unsigned int v37 = 0;
          }
          if (v37 < v30)
          {
            do
            {
              LOWORD(v21) = *(_WORD *)result;
              float v21 = (float)LODWORD(v21);
              float v23 = 1.0 - (float)((float)(v21 * v21) * v26);
              if (v21 <= v33) {
                float v21 = v21 + (float)(v23 * (float)(v56.f32[v37 & 1 | (2 * (v25 & 1))] * 0.5));
              }
              float v22 = v21 + (float)((float)(1.0 - (float)((float)(v21 * v21) * v27)) * (float)(v8 * 0.5));
              if (v21 <= v34) {
                float v21 = v21 + (float)((float)(1.0 - (float)((float)(v21 * v21) * v27)) * (float)(v8 * 0.5));
              }
              int v45 = (int)v21;
              if ((int)v21 >= 0xFFFF) {
                int v45 = 0xFFFF;
              }
              *(_WORD *)uint64_t result = v45 & ~(unsigned __int16)(v45 >> 31);
              result += 2;
              ++v37;
            }
            while (v30 != v37);
          }
        }
        else
        {
          float v21 = (float)(v36 * (float)(v17 * v36)) + (float)(v19 * v36);
          if (v29)
          {
            if (v30 >= 2)
            {
              float v22 = (float)(v8 + v21) * -0.5;
              unsigned int v47 = v32;
              do
              {
                LOWORD(v23) = *(_WORD *)result;
                float v23 = (float)LODWORD(v23);
                if (v23 <= v34) {
                  float v23 = v23 + (float)((float)(1.0 - (float)((float)(v23 * v23) * v27)) * v22);
                }
                int v48 = (int)v23;
                if ((int)v23 >= 0xFFFF) {
                  int v48 = 0xFFFF;
                }
                *(_WORD *)uint64_t result = v48 & ~(unsigned __int16)(v48 >> 31);
                result += 2;
                --v47;
              }
              while (v47);
              unsigned int v39 = v32;
            }
            else
            {
              unsigned int v39 = 0;
            }
            BOOL v49 = v30 >= v39;
            unsigned int v50 = v30 - v39;
            if (v50 != 0 && v49)
            {
              float v21 = (float)(v8 + v21) * 0.5;
              do
              {
                LOWORD(v22) = *(_WORD *)result;
                float v22 = (float)LODWORD(v22);
                float v23 = v22 + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27)) * v21);
                if (v22 <= v34) {
                  float v22 = v22 + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27)) * v21);
                }
                int v51 = (int)v22;
                if ((int)v22 >= 0xFFFF) {
                  int v51 = 0xFFFF;
                }
                *(_WORD *)uint64_t result = v51 & ~(unsigned __int16)(v51 >> 31);
                result += 2;
                --v50;
              }
              while (v50);
            }
          }
          else
          {
            if (v30 >= 2)
            {
              unsigned int v52 = v32;
              do
              {
                LOWORD(v22) = *(_WORD *)result;
                float v22 = (float)LODWORD(v22);
                float v23 = v22
                    + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27))
                            * (float)((float)(v21
                                            + (float)((float)(v8 + (float)(v9 * v22)) + (float)((float)(v6 * v22) * v22)))
                                    * -0.5));
                if (v22 <= v34) {
                  float v22 = v22
                }
                      + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27))
                              * (float)((float)(v21
                                              + (float)((float)(v8 + (float)(v9 * v22))
                                                      + (float)((float)(v6 * v22) * v22)))
                                      * -0.5));
                int v53 = (int)v22;
                if ((int)v22 >= 0xFFFF) {
                  int v53 = 0xFFFF;
                }
                *(_WORD *)uint64_t result = v53 & ~(unsigned __int16)(v53 >> 31);
                result += 2;
                --v52;
              }
              while (v52);
              unsigned int v46 = v32;
            }
            else
            {
              unsigned int v46 = 0;
            }
            BOOL v49 = v30 >= v46;
            unsigned int v54 = v30 - v46;
            if (v54 != 0 && v49)
            {
              do
              {
                LOWORD(v22) = *(_WORD *)result;
                float v22 = (float)LODWORD(v22);
                float v23 = v22
                    + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27))
                            * (float)((float)(v21
                                            + (float)((float)(v8 + (float)(v9 * v22)) + (float)((float)(v6 * v22) * v22)))
                                    * 0.5));
                if (v22 <= v34) {
                  float v22 = v22
                }
                      + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27))
                              * (float)((float)(v21
                                              + (float)((float)(v8 + (float)(v9 * v22))
                                                      + (float)((float)(v6 * v22) * v22)))
                                      * 0.5));
                int v55 = (int)v22;
                if ((int)v22 >= 0xFFFF) {
                  int v55 = 0xFFFF;
                }
                *(_WORD *)uint64_t result = v55 & ~(unsigned __int16)(v55 >> 31);
                result += 2;
                --v54;
              }
              while (v54);
            }
          }
        }
      }
      else
      {
        if (v30 >= 2)
        {
          for (int j = 0; j != v32; ++j)
          {
            LOWORD(v21) = *(_WORD *)result;
            float v21 = (float)LODWORD(v21);
            if (v21 <= v33) {
              float v21 = v21
            }
                  + (float)((float)(1.0 - (float)((float)(v21 * v21) * v26))
                          * (float)(v56.f32[j & 1 | (2 * (v25 & 1))] * -0.5));
            float v23 = 1.0 - (float)((float)(v21 * v21) * v27);
            float v22 = v21
                + (float)(v23
                        * (float)((float)((float)(v8 + (float)(v9 * v21)) + (float)((float)(v6 * v21) * v21)) * -0.5));
            if (v21 <= v34) {
              float v21 = v21
            }
                  + (float)(v23
                          * (float)((float)((float)(v8 + (float)(v9 * v21)) + (float)((float)(v6 * v21) * v21)) * -0.5));
            int v41 = (int)v21;
            if ((int)v21 >= 0xFFFF) {
              int v41 = 0xFFFF;
            }
            *(_WORD *)uint64_t result = v41 & ~(unsigned __int16)(v41 >> 31);
            result += 2;
          }
          unsigned int v38 = v32;
        }
        else
        {
          unsigned int v38 = 0;
        }
        if (v38 < v30)
        {
          do
          {
            LOWORD(v21) = *(_WORD *)result;
            float v21 = (float)LODWORD(v21);
            if (v21 <= v33) {
              float v21 = v21
            }
                  + (float)((float)(1.0 - (float)((float)(v21 * v21) * v26))
                          * (float)(v56.f32[v38 & 1 | (2 * (v25 & 1))] * 0.5));
            float v23 = 1.0 - (float)((float)(v21 * v21) * v27);
            float v22 = v21
                + (float)(v23
                        * (float)((float)((float)(v8 + (float)(v9 * v21)) + (float)((float)(v6 * v21) * v21)) * 0.5));
            if (v21 <= v34) {
              float v21 = v21
            }
                  + (float)(v23
                          * (float)((float)((float)(v8 + (float)(v9 * v21)) + (float)((float)(v6 * v21) * v21)) * 0.5));
            int v42 = (int)v21;
            if ((int)v21 >= 0xFFFF) {
              int v42 = 0xFFFF;
            }
            *(_WORD *)uint64_t result = v42 & ~(unsigned __int16)(v42 >> 31);
            result += 2;
            ++v38;
          }
          while (v30 != v38);
        }
      }
      ++v25;
      float v36 = v36 + 1.0;
    }
    while (v25 != v24);
  }
  return result;
}

void *sub_1DDAA946C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CC_SHA256_Init(&c);
  if (*(_DWORD *)(a1 + 48))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = sub_1DDA7EF68(*(void *)(a1 + 24));
      CC_SHA256_Update(&c, (const void *)(v6 + *(void *)(a1 + 40) + v4 * *(unsigned int *)(a1 + 56)), 2 * *(_DWORD *)(a1 + 52));
      ++v5;
      v4 += 2;
    }
    while (v5 < *(unsigned int *)(a1 + 48));
  }
  CC_SHA256_Final(md, &c);
  unint64_t v7 = 0;
  __s1[0] = 0;
  do
  {
    __s2 = 0;
    if (asprintf(&__s2, "%02xd", md[v7]) != 3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    float v8 = __s2;
    strncat(__s1, __s2, 2uLL);
    if (v7 <= 0x1E && (v7 & 1) != 0) {
      *(_WORD *)&__s1[strlen(__s1)] = 58;
    }
    if (v8) {
      free(v8);
    }
    ++v7;
  }
  while (v7 != 32);
  return sub_1DDA1A880(a2, __s1);
}

void sub_1DDAA9600(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA961C(void *a1@<X1>, unint64_t *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  float32x2_t v12 = operator new(0x58uLL);
  sub_1DDAA96C0(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDAA96AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA96C0(void *a1, void *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39601A0;
  sub_1DDAA971C((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1DDAA9708(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA971C(uint64_t a1, void *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  sub_1DDA18500(&v17, a3);
  sub_1DDA1B3CC(&v16, a4);
  sub_1DDA1B3CC(&v15, a5);
  int v11 = *a6;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3962788;
  uint64_t v12 = a2[1];
  *(void *)(a1 + 24) = *a2;
  *(void *)(a1 + 32) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 40) = v17;
  int v13 = v15;
  *(_DWORD *)(a1 + 48) = v16;
  *(_DWORD *)(a1 + 52) = v13;
  *(_DWORD *)(a1 + 56) = v11;
  return a1;
}

void sub_1DDAA97DC(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0x58uLL);
  sub_1DDAA9880(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDAA986C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAA9880(void *a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39601A0;
  sub_1DDAA98DC((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1DDAA98C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAA98DC(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v11 = *a2;
  unsigned int v10 = (std::__shared_weak_count *)a2[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1DDA1B3CC(&v17, a3);
  sub_1DDA1B3CC(&v16, a4);
  sub_1DDA1B3CC(&v15, a5);
  sub_1DDA1B3CC(&v14, a6);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3962788;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 40) = v17;
  int v12 = v15;
  *(_DWORD *)(a1 + 48) = v16;
  *(_DWORD *)(a1 + 52) = v12;
  *(_DWORD *)(a1 + 56) = v14;
  if (v10) {
    sub_1DDA18310(v10);
  }
  return a1;
}

void sub_1DDAA99C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DDA18310(v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1DDAA99E4(_DWORD *result, _DWORD *a2)
{
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *result /= *a2;
  return result;
}

void sub_1DDAA9A4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAA9A60(uint64_t a1)
{
  uint64_t v185 = MEMORY[0x1F4188790](a1);
  uint64_t v200 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = sub_1DDA83CFC();
  unint64_t v2 = v1;
  if ((unint64_t)(v185 + 1) >= 2 && os_signpost_enabled(v1))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v2, OS_SIGNPOST_INTERVAL_BEGIN, v185, "CLosslessJpegUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v188[0] = MEMORY[0x1E4F143A8];
  v188[1] = 3221225472;
  v188[2] = sub_1DDAAABE4;
  v188[3] = &unk_1E6D04A58;
  v188[4] = v185;
  v167 = (void (**)(void))MEMORY[0x1E01C46E0](v188);
  long long v198 = 0u;
  long long v199 = 0u;
  long long v194 = 0u;
  long long v195 = 0u;
  long long v192 = 0u;
  long long v193 = 0u;
  long long v190 = 0u;
  long long v191 = 0u;
  int v3 = *(_DWORD *)(v185 + 44);
  int v4 = *(_DWORD *)(v185 + 48);
  unint64_t v5 = (unsigned __int16 *)sub_1DDAA5B9C(v185);
  uint64_t v6 = *(int *)(v185 + 40);
  unsigned int v187 = (*(uint64_t (**)(uint64_t))(*(void *)v185 + 152))(v185);
  int v189 = *(_DWORD *)(v185 + 40);
  uint64_t v186 = *sub_1DDA2A648(&v189, &v187);
  if ((int)v186 <= (int)v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = *(void *)(v185 + 192);
  uint64_t v7 = *(void *)(v185 + 200);
  if (v8 != v7)
  {
    unint64_t v9 = 0;
    unsigned int v10 = (_DWORD *)&v190 + 2;
    uint64_t v11 = v8 + 4;
    do
    {
      *unsigned int v10 = *(_DWORD *)(v11 - 4);
      v10 += 6;
      if (v9 > 2) {
        break;
      }
      ++v9;
      BOOL v31 = v11 == v7;
      v11 += 4;
    }
    while (!v31);
  }
  if (SDWORD2(v190) < 1 || (int)v192 < 1)
  {
    int v13 = 0;
  }
  else
  {
    *(void *)&long long v190 = v5;
    HIDWORD(v190) = v4;
    LODWORD(v191) = v3 - DWORD2(v190);
    *((void *)&v191 + 1) = &v5[DWORD2(v190)];
    DWORD1(v192) = v4;
    DWORD2(v192) = v3 - v192;
    if (SDWORD2(v193) >= 1)
    {
      *(void *)&long long v193 = &v5[DWORD2(v190) + v192];
      HIDWORD(v193) = v4;
      LODWORD(v194) = v3 - DWORD2(v193);
    }
    int v13 = &v190;
  }
  (*(void (**)(void, unsigned __int16 *, uint64_t))(**(void **)(v185 + 24) + 32))(*(void *)(v185 + 24), v5, 4096);
  if (bswap32(*v5) >> 16 != 65496) {
    goto LABEL_163;
  }
  int v176 = v3;
  unsigned int v178 = 0;
  uint64_t v171 = v6;
  v173 = (char *)v5;
  v174 = v13;
  int v183 = 0;
  int v179 = 0;
  int v181 = 0;
  int v14 = v5 + 1;
  long long v198 = 0u;
  long long v199 = 0u;
  do
  {
    unsigned int v15 = __rev16(*v14);
    if (v15 == 0xFFFF)
    {
      int v14 = (unsigned __int16 *)((char *)v14 + 1);
    }
    else
    {
      if (v15 < 0xFF01) {
        goto LABEL_163;
      }
      unsigned int v16 = __rev16(v14[1]) - 2;
      if (v16 >= 0x100) {
        goto LABEL_163;
      }
      unsigned int v17 = (unsigned __int8 *)(v14 + 2);
      unint64_t v18 = (unint64_t)v14 + v16 + 4;
      if (v15 == 65475)
      {
        int v181 = __rev16(*(unsigned __int16 *)((char *)v14 + 5));
        int v183 = *((unsigned __int8 *)v14 + 9);
        unsigned int v178 = *((unsigned __int8 *)v14 + 4);
        int v179 = __rev16(*(unsigned __int16 *)((char *)v14 + 7)) * v183;
      }
      else if (v15 == 65476)
      {
        while ((unint64_t)v17 < v18)
        {
          unint64_t v19 = *v17;
          if (v19 > 3) {
            break;
          }
          uint64_t v20 = &v197[2048 * v19];
          *((void *)&v198 + v19) = v20;
          unsigned int v17 = (unsigned __int8 *)sub_1DDAACF3C(v17 + 1, (uint64_t)v20);
          if (!v17)
          {
            v149 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v149, "RawCameraException");
            __cxa_throw(v149, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
      }
      int v14 = (unsigned __int16 *)v18;
    }
  }
  while (v15 != 65498);
  if (v183 != 2 && v183 != 4
    || v181 < 1
    || v179 <= 0
    || v181 * (unint64_t)v179 > v4 * v176
    || v13 && v192 + DWORD2(v190) + DWORD2(v193) != v176)
  {
    goto LABEL_163;
  }
  (*(void (**)(uint64_t, uint8_t *, uint64_t, void, void))(*(void *)v185 + 176))(v185, buf, 0x10000, v178, 0);
  LODWORD(v21) = 1 << v178;
  if (1 << v178 <= 0x10000) {
    int v22 = 0x10000 - (1 << v178);
  }
  else {
    int v22 = 65537 - (1 << v178);
  }
  int v23 = 0x10000 - (v22 >> 1);
  if ((int)v21 < v23)
  {
    __int16 v24 = *(_WORD *)&buf[2 * (int)v21 - 2];
    int v25 = -(v22 >> 1);
    float v26 = &buf[2 * (int)v21];
    uint64_t v27 = v25 - (uint64_t)(int)v21 + 0x10000;
    do
    {
      *(_WORD *)float v26 = v24;
      v26 += 2;
      --v27;
    }
    while (v27);
    LODWORD(v21) = v23;
  }
  if ((int)v21 < 0x10000)
  {
    __int16 v28 = *(_WORD *)buf;
    uint64_t v21 = (int)v21;
    do
      *(_WORD *)&buf[2 * v21++] = v28;
    while (v21 != 0x10000);
  }
  uint64_t v29 = *((void *)&v198 + 1) ? *((void *)&v198 + 1) : v198;
  uint64_t v30 = (void)v198 ? v198 : *((void *)&v198 + 1);
  BOOL v31 = !v30 || v29 == 0;
  if (v31)
  {
LABEL_163:
    v150 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v150, "RawCameraException");
    __cxa_throw(v150, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v32 = 0;
  unint64_t v175 = (char *)v14 - v173 + v171;
  do
  {
    int v33 = *(unsigned __int16 *)(v30 + 2 * v32);
    int v34 = *(unsigned __int16 *)(v29 + 2 * v32);
    if (v32 > 0x3FE) {
      break;
    }
    ++v32;
  }
  while (v33 == v34);
  unsigned int v166 = v181 * v179;
  int v172 = ((int)v186 - (int)v175) / ((v181 * v179 + 10239) / 10240);
  int v35 = 4 * v172;
  if (4 * v172 <= v179) {
    int v35 = v179;
  }
  int v170 = v35;
  signed int v36 = NSPageSize();
  int v37 = sub_1DDAA6D9C(v185);
  if ((int)v186 - (int)v175 <= 0)
  {
    v152 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v152, "RawCameraException");
    __cxa_throw(v152, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v42 = v37;
  unsigned int v43 = objc_msgSend_processInfo(MEMORY[0x1E4F28F80], v38, v39, v40, v41);
  int active = objc_msgSend_activeProcessorCount(v43, v44, v45, v46, v47);

  if (active >= 31) {
    int v49 = 31;
  }
  else {
    int v49 = active;
  }
  if (active >= 29) {
    int v50 = 29;
  }
  else {
    int v50 = active;
  }
  unsigned int v51 = v50 + 2;
  int v177 = v49;
  if (v49 == 1) {
    uint64_t v52 = 2;
  }
  else {
    uint64_t v52 = v51;
  }
  int v53 = NSPageSize();
  int v54 = v53;
  uint64_t v55 = -(uint64_t)v36;
  uint64_t v155 = (unint64_t)&v173[v36] & v55;
  unsigned int v156 = __clz(__rbit32(v36));
  int v56 = (int)((v173 - v155 + v42) & v55) >> v156;
  uint64_t v57 = -(uint64_t)v53;
  if (v53 <= v172) {
    int v58 = ((int)v186 - (int)v175) / ((v181 * v179 + 10239) / 10240);
  }
  else {
    int v58 = v53;
  }
  unsigned int v59 = 4 * v58 - 1;
  int v60 = v172 + 2;
  if (v172 >= -1) {
    int v60 = v172 + 1;
  }
  BOOL v61 = v177 <= 1 || v13 == 0;
  unint64_t v62 = (2 * v53 + 2 * v170 - 1) & (unint64_t)v57;
  uint64_t v160 = 192 * (int)v52;
  size_t v162 = (v160 + (v177 << 6) + 1344);
  int v63 = (v162 + v53) & v57;
  unsigned int v64 = __clz(v59);
  unsigned int v165 = 0xC0000u >> -(char)v64;
  int v163 = -v64;
  unsigned int v65 = v165 << -(char)v64;
  int v66 = (v53 + (v60 >> 1) + 7) & v57;
  signed int v168 = v56;
  signed int v169 = v65;
  int v67 = 2 * v56;
  if (v61) {
    int v67 = 0;
  }
  int v164 = (v53 + v67 - 1) & v57;
  int v158 = v63 + v53 + 2 * v66 + v164 + v65 + v62 * v52;
  v68 = sub_1DDBF2084(v158);
  v69 = v68;
  if (!v68)
  {
    v154 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v154, "RawCameraException");
    __cxa_throw(v154, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v70 = v66;
  int v71 = v63 - v162;
  uint64_t v72 = (void *)(((unint64_t)v68 + v54 - 1) & -(uint64_t)v54);
  uint64_t v73 = (uint64_t)&v72[8 * v177 + 168];
  uint64_t v74 = v73 + v160 + v71;
  uint64_t v157 = v70;
  uint64_t v159 = v74 + (int)v62 * (uint64_t)(int)v52 + v70 + v169;
  uint64_t v161 = v74 + (int)v62 * (uint64_t)(int)v52 + v70;
  bzero(v72, v162);
  v72[2] = v69;
  *((_DWORD *)v72 + 6) = v158;
  if ((v177 & 0x80000000) == 0)
  {
    uint64_t v75 = 0;
    uint64_t v76 = 160;
    do
    {
      double v77 = &v72[v76];
      v72[v75 + 4] = &v72[v76];
      *(_DWORD *)double v77 = v75;
      v77[1] = v72;
      ++v75;
      v76 += 8;
    }
    while (v177 + 1 != v75);
  }
  uint64_t v78 = v159 + v157;
  if ((int)v52 >= 1)
  {
    uint64_t v79 = 0;
    uint64_t v80 = v72 + 36;
    do
    {
      v80[v79] = v73;
      *(void *)(v73 + 64) = v74;
      v74 += v62;
      *(_DWORD *)(v80[v79] + 4) = v79;
      ++v79;
      v73 += 192;
    }
    while (v52 != v79);
  }
  *((_DWORD *)v72 + 172) = 1 << v163;
  *((_DWORD *)v72 + 173) = v165;
  *((_DWORD *)v72 + 174) = v169;
  v72[88] = v161;
  v72[89] = v159;
  if (!v164) {
    uint64_t v78 = 0;
  }
  v72[148] = v78;
  uint64_t v81 = (_DWORD *)v72[4];
  *uint64_t v72 = v173;
  uint64_t v82 = v185;
  v72[1] = &v173[sub_1DDAA6D9C(v185)];
  *((_DWORD *)v72 + 134) = v177;
  *((_DWORD *)v72 + 135) = v52;
  *((_DWORD *)v72 + 136) = v170;
  *((_DWORD *)v72 + 137) = v172;
  *((_DWORD *)v72 + 138) = v166;
  atomic_store(v166, (unsigned int *)v72 + 139);
  *((unsigned char *)v72 + 560) = 0;
  atomic_store(0, (unsigned __int8 *)v72 + 561);
  *((unsigned char *)v72 + 562) = v33 == v34;
  v72[71] = v30;
  v72[72] = v29;
  *((_DWORD *)v72 + 148) = v181;
  *((_DWORD *)v72 + 149) = v179;
  *((_DWORD *)v72 + 150) = v183;
  v72[73] = buf;
  *uint64_t v81 = 0;
  v81[4] = *(unsigned __int16 *)(v82 + 216);
  v83 = sub_1DDAAAF24;
  if (v33 == v34) {
    v83 = sub_1DDAAAC6C;
  }
  v72[76] = v83;
  uint64_t v84 = sub_1DDAAB870;
  if (v33 == v34) {
    uint64_t v84 = sub_1DDAAB2F8;
  }
  v72[77] = v84;
  v72[78] = v175;
  v72[79] = v186;
  v72[80] = v186;
  v72[81] = v175;
  v72[82] = v175;
  uint64_t v85 = v175 & -(uint64_t)*((int *)v72 + 172);
  v72[83] = v85;
  v72[84] = v85;
  v72[85] = v85 + *((int *)v72 + 174);
  atomic_store(*((_DWORD *)v72 + 173), (unsigned int *)v72 + 180);
  dispatch_semaphore_t v86 = dispatch_semaphore_create(0);
  uint64_t v87 = (void *)v72[91];
  v72[91] = v86;

  atomic_store(0, (unsigned int *)v72 + 184);
  dispatch_semaphore_t v88 = dispatch_semaphore_create(0);
  v89 = (void *)v72[93];
  v72[93] = v88;

  v72[94] = 2097153;
  v72[95] = v72[88] + v175 - v72[83];
  *((_OWORD *)v72 + 48) = *((_OWORD *)v72 + 47);
  *((_DWORD *)v72 + 196) = 0;
  v72[99] = 0;
  *((_DWORD *)v72 + 200) = 0;
  *((_DWORD *)v72 + 206) = 0;
  v72[101] = 0;
  v72[102] = 0;
  v72[104] = v173;
  v72[105] = v174;
  if (v174)
  {
    int v90 = *((_DWORD *)v174 + 2);
    int v91 = *((_DWORD *)v174 + 3) * v90;
  }
  else
  {
    int v90 = 0x7FFFFFFF;
    int v91 = 0x7FFFFFFF;
  }
  *((_DWORD *)v72 + 212) = v90;
  *((_DWORD *)v72 + 213) = v91;
  *(int32x4_t *)(v72 + 107) = vdupq_n_s32(1 << (v178 - 1));
  atomic_store(v168, (unsigned int *)v72 + 294);
  *((_DWORD *)v72 + 295) = v156;
  v72[149] = v155;
  uint64_t v92 = v72[148];
  if (v92)
  {
    int v93 = 1 << v156;
    uint64_t v94 = *(void *)(v72[36] + 64);
    int v95 = v168 + 7;
    if (v168 < -7) {
      int v95 = v168 + 14;
    }
    bzero(*(void **)(v72[36] + 64), (uint64_t)v95 >> 3);
    uint64_t v96 = 0;
    signed int v97 = 0;
    while (2)
    {
      v98 = (char *)v174 + 24 * v96;
      uint64_t v100 = *((unsigned int *)v98 + 2);
      int v99 = *((_DWORD *)v98 + 3);
      if (v99 >= 1 && (int)v100 >= 1)
      {
        int v102 = 0;
        v103 = (char *)v174 + 24 * v96;
        int v104 = 2 * (*((_DWORD *)v103 + 4) + v100);
        unint64_t v105 = *(void *)v103 + 2 * v100;
        uint64_t v106 = -2 * v100;
        do
        {
          unint64_t v107 = (v105 + v106) & -v93;
          if (v105 > v107)
          {
            int v108 = ((int)v107 - (int)v155) >> v156;
            do
            {
              int v109 = 1 << (v108 & 7);
              int v110 = *(unsigned __int8 *)(v94 + (v108 >> 3));
              if ((v109 & v110) == 0)
              {
                *(unsigned char *)(v94 + ((uint64_t)v108 >> 3)) = v110 | v109;
                *(_WORD *)(v92 + 2 * v97++) = v108;
                if (v97 >= v168) {
                  goto LABEL_117;
                }
              }
              v107 += v93;
              ++v108;
            }
            while (v107 < v105);
          }
          v105 += v104;
          ++v102;
        }
        while (v102 != v99);
        if (++v96 != 4) {
          continue;
        }
      }
      break;
    }
  }
LABEL_117:
  atomic_store(0, (unsigned int *)v72 + 290);
  atomic_store(0, (unsigned int *)v72 + 291);
  atomic_store(0, (unsigned int *)v72 + 292);
  atomic_store(0, (unsigned int *)v72 + 293);
  atomic_store(0, (unsigned int *)v72 + 300);
  atomic_store(0, (unsigned int *)v72 + 301);
  dispatch_semaphore_t v111 = dispatch_semaphore_create(0);
  v112 = (void *)v72[151];
  v72[151] = v111;

  if ((int)v52 > 0)
  {
    v113 = v72 + 36;
    do
    {
      atomic_fetch_or((atomic_uint *volatile)v72 + 300, 1 << *(_DWORD *)(*v113 + 4));
      if ((atomic_fetch_add((atomic_uint *volatile)v72 + 301, 1u) & 0x80000000) != 0) {
        dispatch_semaphore_signal((dispatch_semaphore_t)v72[151]);
      }
      ++v113;
      --v52;
    }
    while (v52);
  }
  atomic_store(0, (unsigned int *)v72 + 304);
  dispatch_semaphore_t v114 = dispatch_semaphore_create(0);
  v115 = (void *)v72[153];
  v72[153] = v114;

  v116 = dispatch_group_create();
  v117 = dispatch_queue_create("Huffman Decode Block", MEMORY[0x1E4F14430]);
  if (v177 >= 1)
  {
    if (v177 <= 1) {
      v118 = (void (__cdecl *)(void *))sub_1DDAAC16C;
    }
    else {
      v118 = (void (__cdecl *)(void *))sub_1DDAABC54;
    }
    v119 = (_DWORD **)(v72 + 5);
    uint64_t v120 = (v177 + 1) - 1;
    do
    {
      v121 = *v119++;
      v121[4] = *(unsigned __int16 *)(v185 + 216);
      dispatch_group_async_f(v116, v117, v121, v118);
      --v120;
    }
    while (v120);
  }
  uint64_t v122 = v72[83];
  uint64_t v123 = *((int *)v72 + 172);
  uint64_t v124 = v72[88];
  unint64_t v184 = v72[89];
  uint64_t v125 = *((int *)v72 + 174);
  uint64_t v126 = *(void *)(v185 + 24);
  int v189 = v175;
  (*(void (**)(uint64_t, int *, void))(*(void *)v126 + 40))(v126, &v189, 0);
  if (v122 < v186)
  {
    char v127 = __clz(__rbit32(v123));
    v128 = (char *)(v175 - v122);
    uint64_t v180 = -v125;
    uint64_t v182 = v123 - 1;
    do
    {
      int v129 = atomic_load((unsigned int *)v72 + 180);
      if (v129 < 1 || (unsigned int v130 = atomic_load((unsigned int *)v72 + 184), (v130 & 0x80000000) != 0))
      {
        LODWORD(v131) = 1;
      }
      else
      {
        uint64_t v131 = (uint64_t)(v184 - v124) >> v127;
        int v132 = atomic_load((unsigned int *)v72 + 180);
        if (v132 < (int)v131) {
          LODWORD(v131) = v132;
        }
      }
      uint64_t v133 = (int)(v131 << v127);
      if (v186 - v122 >= v133) {
        signed int v134 = v131;
      }
      else {
        signed int v134 = (unint64_t)(v182 + v186 - v122) >> v127;
      }
      if (v186 - v122 >= v133) {
        uint64_t v135 = (int)(v131 << v127);
      }
      else {
        uint64_t v135 = v186 - v122;
      }
      unsigned __int8 v136 = atomic_load((unsigned __int8 *)v72 + 561);
      if (v136) {
        break;
      }
      if ((int)atomic_fetch_add((atomic_uint *volatile)v72 + 180, -v134) < v134) {
        dispatch_semaphore_wait((dispatch_semaphore_t)v72[91], 0xFFFFFFFFFFFFFFFFLL);
      }
      unsigned __int8 v137 = atomic_load((unsigned __int8 *)v72 + 561);
      if (v137) {
        break;
      }
      (*(void (**)(void, char *, uint64_t))(**(void **)(v185 + 24) + 32))(*(void *)(v185 + 24), &v128[v124], v135 - (void)v128);
      unint64_t v138 = v124 + v135;
      if (v138 >= v184) {
        uint64_t v139 = v180;
      }
      else {
        uint64_t v139 = 0;
      }
      if (atomic_fetch_add((atomic_uint *volatile)v72 + 184, v134) == -1) {
        dispatch_semaphore_signal((dispatch_semaphore_t)v72[93]);
      }
      v128 = 0;
      uint64_t v124 = v138 + v139;
      v122 += v135;
    }
    while (v122 < v186);
  }
  dispatch_group_wait(v116, 0xFFFFFFFFFFFFFFFFLL);
  if (v177 >= 1)
  {
    unsigned int v140 = *(unsigned __int16 *)(v185 + 216);
    v141 = v72 + 5;
    uint64_t v142 = (v177 + 1) - 1;
    do
    {
      unsigned int v143 = *(_DWORD *)(*v141 + 16);
      if (v143 < v140)
      {
        unsigned int v140 = (unsigned __int16)*(_DWORD *)(*v141 + 16);
        *(_WORD *)(v185 + 216) = v143;
      }
      ++v141;
      --v142;
    }
    while (v142);
  }
  int v144 = atomic_load((unsigned int *)v72 + 139);

  if (v72[2])
  {
    v145 = (void *)v72[91];
    v72[91] = 0;

    v146 = (void *)v72[93];
    v72[93] = 0;

    v147 = (void *)v72[151];
    v72[151] = 0;

    v148 = (void *)v72[153];
    v72[153] = 0;

    free((void *)v72[2]);
  }
  if (v144 >= 1)
  {
    v153 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v153, "RawCameraException");
    __cxa_throw(v153, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v167[2](v167);
}

void sub_1DDAAAB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(void))
{
  __cxa_free_exception(v19);
  a19[2](a19);

  _Unwind_Resume(a1);
}

void sub_1DDAAABE4(uint64_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CLosslessJpegUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDAAAC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a3 + 24);
  unint64_t v5 = *(unsigned __int8 **)(a3 + 40);
  uint64_t v6 = *(void *)(a1 + 568);
  *(unsigned char *)(a3 + 32) = 1;
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v9 = 0;
    int v7 = 0;
    unsigned int v10 = v5;
    uint64_t v8 = v5;
    do
    {
      if (!*--v8)
      {
        int v13 = *(v10 - 2);
        int v12 = v10 - 2;
        if (v13 == 255) {
          uint64_t v8 = v12;
        }
      }
      v7 += 8;
      if (v9 > 0x3E) {
        break;
      }
      ++v9;
      unsigned int v10 = v8;
    }
    while ((unint64_t)v8 >= v4);
  }
  else
  {
    int v7 = 0;
    uint64_t v8 = v5;
  }
  bzero(v57, 0x201uLL);
  uint64_t v14 = 0;
  unsigned int v15 = v5;
  do
  {
    if (!v57[v14])
    {
      int v16 = *v8;
      if (v16 == 255) {
        uint64_t v17 = 3;
      }
      else {
        uint64_t v17 = 2;
      }
      if (v16 == 255) {
        uint64_t v18 = 2;
      }
      else {
        uint64_t v18 = 1;
      }
      int v19 = v8[v18];
      uint64_t v20 = &v8[v17];
      if (v19 == 255) {
        ++v20;
      }
      int v21 = *v20;
      int v22 = (v16 << 24) | (v19 << 16);
      uint64_t v23 = v21 == 255 ? 3 : 2;
      uint64_t v24 = v21 == 255 ? 2 : 1;
      int v25 = &v20[v23];
      int v26 = v20[v24];
      int v27 = v22 | (v21 << 8);
      __int16 v28 = v26 == 255 ? v25 + 1 : v25;
      int v29 = v27 | v26;
      int v30 = v14;
      int v31 = v14;
      do
      {
        int v32 = v30 - 16;
        if (v30 >= 16)
        {
          int v33 = *v28;
          int v34 = v29 << 16;
          if (v33 == 255) {
            uint64_t v35 = 3;
          }
          else {
            uint64_t v35 = 2;
          }
          if (v33 == 255) {
            uint64_t v36 = 2;
          }
          else {
            uint64_t v36 = 1;
          }
          int v37 = v28[v36];
          v28 += v35;
          int v38 = v34 | (v33 << 8);
          if (v37 == 255) {
            ++v28;
          }
          int v29 = v38 | v37;
          int v30 = v32;
        }
        unsigned int v39 = v29 << v30;
        unsigned int v40 = *(unsigned __int16 *)(v6 + 2 * ((v29 << v30) >> 23));
        int v41 = (v40 >> 10) & 0x1F;
        v30 += v41;
        v31 += v41;
        if (v40 <= 0x8000)
        {
          if ((v40 & 0x8000) != 0)
          {
            unsigned int v40 = *(unsigned __int16 *)(v6 + 2 * (HIWORD(v39) & 0x3FF));
            int v42 = (v40 >> 10) & 0x1F;
            v30 += v42;
            v31 += v42;
          }
          int v43 = v40 & 0x1F;
          if (v43)
          {
            int v44 = v30 - 16;
            if (v30 >= 16)
            {
              int v45 = *v28;
              int v46 = v29 << 16;
              if (v45 == 255) {
                uint64_t v47 = 3;
              }
              else {
                uint64_t v47 = 2;
              }
              if (v45 == 255) {
                uint64_t v48 = 2;
              }
              else {
                uint64_t v48 = 1;
              }
              int v49 = v28[v48];
              v28 += v47;
              int v50 = v46 | (v45 << 8);
              if (v49 == 255) {
                ++v28;
              }
              int v29 = v50 | v49;
              int v30 = v44;
            }
            v30 += v43;
            v31 += v43;
          }
        }
        if (v31 > v7 - 32)
        {
          if (v31 > v7) {
            break;
          }
          if (!v14)
          {
            *(_DWORD *)(a3 + 36) = v29;
            *(_WORD *)(a3 + 34) = v30;
            unsigned int v15 = v28;
            *(void *)(a3 + 40) = v28;
          }
        }
        int v51 = v57[v31];
        v57[v31] = v51 + 1;
      }
      while (!v51);
      if (v14 && v31 > v7)
      {
        int v52 = *(_DWORD *)(a3 + 36);
        *(unsigned char *)(a3 + 32) = *(unsigned char *)(a3 + 33);
        int v53 = 32;
        unsigned int v15 = v5;
        goto LABEL_65;
      }
    }
    ++v14;
  }
  while (v14 != 32);
  int v52 = *(_DWORD *)(a3 + 36);
  int v53 = *(__int16 *)(a3 + 34);
  if (v53 < 8) {
    goto LABEL_69;
  }
  do
  {
LABEL_65:
    unsigned int v54 = v53;
    int v55 = *v15;
    int v52 = v55 | (v52 << 8);
    if (v55 == 255) {
      uint64_t v56 = 2;
    }
    else {
      uint64_t v56 = 1;
    }
    v15 += v56;
    int v53 = v54 - 8;
  }
  while (v54 > 0xF);
LABEL_69:
  *(_DWORD *)(a3 + 36) = v52;
  *(_WORD *)(a3 + 34) = v53;
  *(void *)(a3 + 40) = v15;
}

void sub_1DDAAAF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a3 + 24);
  unint64_t v5 = *(unsigned __int8 **)(a3 + 40);
  uint64_t v6 = *(void *)(a1 + 568);
  uint64_t v7 = *(void *)(a1 + 576);
  *(unsigned char *)(a3 + 32) = 1;
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v10 = 0;
    int v8 = 0;
    uint64_t v11 = v5;
    unsigned int v9 = v5;
    do
    {
      if (!*--v9)
      {
        int v14 = *(v11 - 2);
        int v13 = v11 - 2;
        if (v14 == 255) {
          unsigned int v9 = v13;
        }
      }
      v8 += 8;
      if (v10 > 0x3E) {
        break;
      }
      ++v10;
      uint64_t v11 = v9;
    }
    while ((unint64_t)v9 >= v4);
  }
  else
  {
    int v8 = 0;
    unsigned int v9 = v5;
  }
  bzero(v89, 0x201uLL);
  unint64_t v15 = 0;
  int v16 = v5;
  do
  {
    if (!v89[v15])
    {
      int v17 = *v9;
      if (v17 == 255) {
        uint64_t v18 = 3;
      }
      else {
        uint64_t v18 = 2;
      }
      if (v17 == 255) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = 1;
      }
      uint64_t v20 = &v9[v18];
      int v21 = v9[v19];
      if (v21 == 255) {
        ++v20;
      }
      int v22 = *v20;
      uint64_t v23 = v22 == 255 ? 3 : 2;
      uint64_t v24 = v22 == 255 ? 2 : 1;
      int v25 = &v20[v23];
      int v26 = v20[v24];
      int v27 = v26 == 255 ? v25 + 1 : v25;
      if (v15 < 0x20)
      {
        int v40 = (v17 << 24) | (v21 << 16) | (v22 << 8) | v26;
        int v41 = v15;
      }
      else
      {
        int v28 = *v27;
        if (v28 == 255) {
          uint64_t v29 = 3;
        }
        else {
          uint64_t v29 = 2;
        }
        if (v28 == 255) {
          uint64_t v30 = 2;
        }
        else {
          uint64_t v30 = 1;
        }
        int v31 = &v27[v29];
        int v32 = v27[v30];
        if (v32 == 255) {
          ++v31;
        }
        int v33 = *v31;
        int v34 = (v28 << 24) | (v32 << 16);
        uint64_t v35 = v33 == 255 ? 3 : 2;
        uint64_t v36 = v33 == 255 ? 2 : 1;
        int v37 = v31[v36];
        int v38 = &v31[v35];
        int v39 = v34 | (v33 << 8);
        int v27 = v37 == 255 ? v38 + 1 : v38;
        int v40 = v39 | v37;
        int v41 = v15 - 32;
      }
      int v42 = v15;
      do
      {
        int v43 = v41 - 16;
        if (v41 >= 16)
        {
          int v44 = *v27;
          int v45 = v40 << 16;
          if (v44 == 255) {
            uint64_t v46 = 3;
          }
          else {
            uint64_t v46 = 2;
          }
          if (v44 == 255) {
            uint64_t v47 = 2;
          }
          else {
            uint64_t v47 = 1;
          }
          int v48 = v27[v47];
          v27 += v46;
          int v49 = v45 | (v44 << 8);
          if (v48 == 255) {
            ++v27;
          }
          int v40 = v49 | v48;
          int v41 = v43;
        }
        unsigned int v50 = v40 << v41;
        unsigned int v51 = *(unsigned __int16 *)(v6 + 2 * ((v40 << v41) >> 23));
        int v52 = (v51 >> 10) & 0x1F;
        int v53 = v52 + v41;
        int v54 = v52 + v42;
        if (v51 <= 0x8000)
        {
          if ((v51 & 0x8000) != 0)
          {
            unsigned int v51 = *(unsigned __int16 *)(v6 + 2 * (HIWORD(v50) & 0x3FF));
            int v55 = (v51 >> 10) & 0x1F;
            v53 += v55;
            v54 += v55;
          }
          int v56 = v51 & 0x1F;
          if (v56)
          {
            int v57 = v53 - 16;
            if (v53 >= 16)
            {
              int v58 = *v27;
              int v59 = v40 << 16;
              if (v58 == 255) {
                uint64_t v60 = 3;
              }
              else {
                uint64_t v60 = 2;
              }
              if (v58 == 255) {
                uint64_t v61 = 2;
              }
              else {
                uint64_t v61 = 1;
              }
              int v62 = v27[v61];
              v27 += v60;
              int v63 = v59 | (v58 << 8);
              if (v62 == 255) {
                ++v27;
              }
              int v40 = v63 | v62;
              int v53 = v57;
            }
            v53 += v56;
            v54 += v56;
          }
        }
        int v64 = v53 - 16;
        if (v53 >= 16)
        {
          int v65 = *v27;
          int v66 = v40 << 16;
          if (v65 == 255) {
            uint64_t v67 = 3;
          }
          else {
            uint64_t v67 = 2;
          }
          if (v65 == 255) {
            uint64_t v68 = 2;
          }
          else {
            uint64_t v68 = 1;
          }
          int v69 = v27[v68];
          v27 += v67;
          int v70 = v66 | (v65 << 8);
          if (v69 == 255) {
            ++v27;
          }
          int v40 = v70 | v69;
          int v53 = v64;
        }
        unsigned int v71 = v40 << v53;
        unsigned int v72 = *(unsigned __int16 *)(v7 + 2 * ((v40 << v53) >> 23));
        int v73 = (v72 >> 10) & 0x1F;
        int v41 = v73 + v53;
        int v42 = v73 + v54;
        if (v72 <= 0x8000)
        {
          if ((v72 & 0x8000) != 0)
          {
            unsigned int v72 = *(unsigned __int16 *)(v7 + 2 * (HIWORD(v71) & 0x3FF));
            int v74 = (v72 >> 10) & 0x1F;
            v41 += v74;
            v42 += v74;
          }
          int v75 = v72 & 0x1F;
          if (v75)
          {
            int v76 = v41 - 16;
            if (v41 >= 16)
            {
              int v77 = *v27;
              int v78 = v40 << 16;
              if (v77 == 255) {
                uint64_t v79 = 3;
              }
              else {
                uint64_t v79 = 2;
              }
              if (v77 == 255) {
                uint64_t v80 = 2;
              }
              else {
                uint64_t v80 = 1;
              }
              int v81 = v27[v80];
              v27 += v79;
              int v82 = v78 | (v77 << 8);
              if (v81 == 255) {
                ++v27;
              }
              int v40 = v82 | v81;
              int v41 = v76;
            }
            v41 += v75;
            v42 += v75;
          }
        }
        if (v42 > v8 - 64)
        {
          if (v42 > v8) {
            break;
          }
          if (!v15)
          {
            *(_DWORD *)(a3 + 36) = v40;
            *(_WORD *)(a3 + 34) = v41;
            int v16 = v27;
            *(void *)(a3 + 40) = v27;
          }
        }
        int v83 = v89[v42];
        v89[v42] = v83 + 1;
      }
      while (!v83);
      if (v15 && v42 > v8)
      {
        int v84 = *(_DWORD *)(a3 + 36);
        *(unsigned char *)(a3 + 32) = *(unsigned char *)(a3 + 33);
        int v85 = 32;
        int v16 = v5;
        goto LABEL_110;
      }
    }
    ++v15;
  }
  while (v15 != 64);
  int v84 = *(_DWORD *)(a3 + 36);
  int v85 = *(__int16 *)(a3 + 34);
  if (v85 < 8) {
    goto LABEL_114;
  }
  do
  {
LABEL_110:
    unsigned int v86 = v85;
    int v87 = *v16;
    int v84 = v87 | (v84 << 8);
    if (v87 == 255) {
      uint64_t v88 = 2;
    }
    else {
      uint64_t v88 = 1;
    }
    v16 += v88;
    int v85 = v86 - 8;
  }
  while (v86 > 0xF);
LABEL_114:
  *(_DWORD *)(a3 + 36) = v84;
  *(_WORD *)(a3 + 34) = v85;
  *(void *)(a3 + 40) = v16;
}

uint64_t sub_1DDAAB2F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 568);
  unint64_t v4 = *(void *)(a3 + 64);
  int v5 = *(_DWORD *)(a3 + 20);
  int v6 = *(__int16 *)(a3 + 18);
  uint64_t v7 = *(unsigned __int8 **)(a3 + 24);
  int v8 = *(unsigned __int8 **)(a3 + 40);
  unint64_t v9 = v4 + 2 * *(int *)(result + 544);
  unint64_t v10 = v9 - 8;
  unint64_t v11 = v9 - 2;
  if (v7 >= v8 - 40 || v4 >= v10)
  {
    int v13 = *(_WORD **)(a3 + 64);
  }
  else
  {
    uint64_t result = *(void *)(a3 + 64);
    do
    {
      int v14 = v6 - 16;
      if (v6 >= 16)
      {
        int v15 = *v7;
        int v16 = v5 << 16;
        if (v15 == 255) {
          uint64_t v17 = 3;
        }
        else {
          uint64_t v17 = 2;
        }
        if (v15 == 255) {
          uint64_t v18 = 2;
        }
        else {
          uint64_t v18 = 1;
        }
        int v19 = v7[v18];
        v7 += v17;
        int v20 = v16 | (v15 << 8);
        if (v19 == 255) {
          ++v7;
        }
        int v5 = v20 | v19;
        int v6 = v14;
      }
      unsigned int v21 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
      int v22 = ((v21 >> 10) & 0x1F) + v6;
      if (v21 > 0x8000)
      {
        LOWORD(v21) = (char)v21;
      }
      else
      {
        if ((v21 & 0x8000) != 0)
        {
          unsigned int v21 = *(unsigned __int16 *)(v3 + 2 * (((v5 << v6) >> 16) & 0x3FF));
          v22 += (v21 >> 10) & 0x1F;
        }
        int v23 = v21 & 0x1F;
        if ((v21 & 0x1F) != 0)
        {
          int v24 = v22 - 16;
          if (v22 >= 16)
          {
            int v25 = *v7;
            int v26 = v5 << 16;
            if (v25 == 255) {
              uint64_t v27 = 3;
            }
            else {
              uint64_t v27 = 2;
            }
            if (v25 == 255) {
              uint64_t v28 = 2;
            }
            else {
              uint64_t v28 = 1;
            }
            int v29 = v7[v28];
            v7 += v27;
            int v30 = v26 | (v25 << 8);
            if (v29 == 255) {
              ++v7;
            }
            int v5 = v30 | v29;
            int v22 = v24;
          }
          unsigned int v21 = ((v5 << v22) >> -(char)v23) - ((((v5 << v22) >> 31) - 1) >> -(char)v23);
          v22 += v23;
        }
        else
        {
          LOWORD(v21) = ((_WORD)v21 << 8) & 0x8000;
        }
      }
      *(_WORD *)uint64_t result = v21;
      int v31 = v22 - 16;
      if (v22 >= 16)
      {
        int v32 = *v7;
        int v33 = v5 << 16;
        if (v32 == 255) {
          uint64_t v34 = 3;
        }
        else {
          uint64_t v34 = 2;
        }
        if (v32 == 255) {
          uint64_t v35 = 2;
        }
        else {
          uint64_t v35 = 1;
        }
        int v36 = v7[v35];
        v7 += v34;
        int v37 = v33 | (v32 << 8);
        if (v36 == 255) {
          ++v7;
        }
        int v5 = v37 | v36;
        int v22 = v31;
      }
      unsigned int v38 = v5 << v22;
      unsigned int v39 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v22) >> 23));
      int v40 = ((v39 >> 10) & 0x1F) + v22;
      if (v39 > 0x8000)
      {
        LOWORD(v39) = (char)v39;
      }
      else
      {
        if ((v39 & 0x8000) != 0)
        {
          unsigned int v39 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v38) & 0x3FF));
          v40 += (v39 >> 10) & 0x1F;
        }
        int v41 = v39 & 0x1F;
        if ((v39 & 0x1F) != 0)
        {
          int v42 = v40 - 16;
          if (v40 >= 16)
          {
            int v43 = *v7;
            int v44 = v5 << 16;
            if (v43 == 255) {
              uint64_t v45 = 3;
            }
            else {
              uint64_t v45 = 2;
            }
            if (v43 == 255) {
              uint64_t v46 = 2;
            }
            else {
              uint64_t v46 = 1;
            }
            int v47 = v7[v46];
            v7 += v45;
            int v48 = v44 | (v43 << 8);
            if (v47 == 255) {
              ++v7;
            }
            int v5 = v48 | v47;
            int v40 = v42;
          }
          unsigned int v39 = ((v5 << v40) >> -(char)v41) - ((((v5 << v40) >> 31) - 1) >> -(char)v41);
          v40 += v41;
        }
        else
        {
          LOWORD(v39) = ((_WORD)v39 << 8) & 0x8000;
        }
      }
      *(_WORD *)(result + 2) = v39;
      int v49 = v40 - 16;
      if (v40 >= 16)
      {
        int v50 = *v7;
        int v51 = v5 << 16;
        if (v50 == 255) {
          uint64_t v52 = 3;
        }
        else {
          uint64_t v52 = 2;
        }
        if (v50 == 255) {
          uint64_t v53 = 2;
        }
        else {
          uint64_t v53 = 1;
        }
        int v54 = v7[v53];
        v7 += v52;
        int v55 = v51 | (v50 << 8);
        if (v54 == 255) {
          ++v7;
        }
        int v5 = v55 | v54;
        int v40 = v49;
      }
      unsigned int v56 = v5 << v40;
      unsigned int v57 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v40) >> 23));
      int v58 = ((v57 >> 10) & 0x1F) + v40;
      if (v57 > 0x8000)
      {
        LOWORD(v57) = (char)v57;
      }
      else
      {
        if ((v57 & 0x8000) != 0)
        {
          unsigned int v57 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v56) & 0x3FF));
          v58 += (v57 >> 10) & 0x1F;
        }
        int v59 = v57 & 0x1F;
        if ((v57 & 0x1F) != 0)
        {
          int v60 = v58 - 16;
          if (v58 >= 16)
          {
            int v61 = *v7;
            int v62 = v5 << 16;
            if (v61 == 255) {
              uint64_t v63 = 3;
            }
            else {
              uint64_t v63 = 2;
            }
            if (v61 == 255) {
              uint64_t v64 = 2;
            }
            else {
              uint64_t v64 = 1;
            }
            int v65 = v7[v64];
            v7 += v63;
            int v66 = v62 | (v61 << 8);
            if (v65 == 255) {
              ++v7;
            }
            int v5 = v66 | v65;
            int v58 = v60;
          }
          unsigned int v57 = ((v5 << v58) >> -(char)v59) - ((((v5 << v58) >> 31) - 1) >> -(char)v59);
          v58 += v59;
        }
        else
        {
          LOWORD(v57) = ((_WORD)v57 << 8) & 0x8000;
        }
      }
      *(_WORD *)(result + 4) = v57;
      int v67 = v58 - 16;
      if (v58 >= 16)
      {
        int v68 = *v7;
        int v69 = v5 << 16;
        if (v68 == 255) {
          uint64_t v70 = 3;
        }
        else {
          uint64_t v70 = 2;
        }
        if (v68 == 255) {
          uint64_t v71 = 2;
        }
        else {
          uint64_t v71 = 1;
        }
        int v72 = v7[v71];
        v7 += v70;
        int v73 = v69 | (v68 << 8);
        if (v72 == 255) {
          ++v7;
        }
        int v5 = v73 | v72;
        int v58 = v67;
      }
      unsigned int v74 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v58) >> 23));
      int v6 = ((v74 >> 10) & 0x1F) + v58;
      if (v74 > 0x8000)
      {
        LOWORD(v74) = (char)v74;
      }
      else
      {
        if ((v74 & 0x8000) != 0)
        {
          unsigned int v74 = *(unsigned __int16 *)(v3 + 2 * (((v5 << v58) >> 16) & 0x3FF));
          v6 += (v74 >> 10) & 0x1F;
        }
        int v75 = v74 & 0x1F;
        if ((v74 & 0x1F) != 0)
        {
          int v76 = v6 - 16;
          if (v6 >= 16)
          {
            int v77 = *v7;
            int v78 = v5 << 16;
            if (v77 == 255) {
              uint64_t v79 = 3;
            }
            else {
              uint64_t v79 = 2;
            }
            if (v77 == 255) {
              uint64_t v80 = 2;
            }
            else {
              uint64_t v80 = 1;
            }
            int v81 = v7[v80];
            v7 += v79;
            int v82 = v78 | (v77 << 8);
            if (v81 == 255) {
              ++v7;
            }
            int v5 = v82 | v81;
            int v6 = v76;
          }
          unsigned int v74 = ((v5 << v6) >> -(char)v75) - ((((v5 << v6) >> 31) - 1) >> -(char)v75);
          v6 += v75;
        }
        else
        {
          LOWORD(v74) = ((_WORD)v74 << 8) & 0x8000;
        }
      }
      int v13 = (_WORD *)(result + 8);
      *(_WORD *)(result + 6) = v74;
      if (v7 >= v8 - 40) {
        break;
      }
      result += 8;
    }
    while ((unint64_t)v13 < v10);
  }
  *(unsigned char *)(a3 + 48) = 0;
  if (v7 > v8 || (unint64_t)v13 >= v11)
  {
    BOOL v84 = 0;
  }
  else
  {
    while (1)
    {
      int v85 = v6 - 16;
      if (v6 >= 16)
      {
        int v86 = *v7;
        int v87 = v5 << 16;
        if (v86 == 255) {
          uint64_t v88 = 3;
        }
        else {
          uint64_t v88 = 2;
        }
        if (v86 == 255) {
          uint64_t v89 = 2;
        }
        else {
          uint64_t v89 = 1;
        }
        int v90 = v7[v89];
        v7 += v88;
        int v91 = v87 | (v86 << 8);
        if (v90 == 255) {
          ++v7;
        }
        int v5 = v91 | v90;
        int v6 = v85;
      }
      unsigned int v92 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
      int v93 = ((v92 >> 10) & 0x1F) + v6;
      if (v92 > 0x8000)
      {
        uint64_t result = (char)v92;
      }
      else
      {
        if ((v92 & 0x8000) != 0)
        {
          unsigned int v92 = *(unsigned __int16 *)(v3 + 2 * (((v5 << v6) >> 16) & 0x3FF));
          v93 += (v92 >> 10) & 0x1F;
        }
        int v94 = v92 & 0x1F;
        if ((v92 & 0x1F) != 0)
        {
          int v95 = v93 - 16;
          if (v93 >= 16)
          {
            int v96 = *v7;
            int v97 = v5 << 16;
            if (v96 == 255) {
              uint64_t v98 = 3;
            }
            else {
              uint64_t v98 = 2;
            }
            if (v96 == 255) {
              uint64_t v99 = 2;
            }
            else {
              uint64_t v99 = 1;
            }
            int v100 = v7[v99];
            v7 += v98;
            int v101 = v97 | (v96 << 8);
            if (v100 == 255) {
              ++v7;
            }
            int v5 = v101 | v100;
            int v93 = v95;
          }
          uint64_t result = ((v5 << v93) >> -(char)v94) - ((((v5 << v93) >> 31) - 1) >> -(char)v94);
          v93 += v94;
        }
        else
        {
          uint64_t result = (v92 << 8) & 0x8000;
        }
      }
      *v13++ = result;
      if (v93 < 8)
      {
        int v6 = v93;
      }
      else
      {
        do
        {
          int v102 = *v7;
          int v5 = v102 | (v5 << 8);
          if (v102 == 255) {
            uint64_t v103 = 2;
          }
          else {
            uint64_t v103 = 1;
          }
          v7 += v103;
          int v6 = v93 - 8;
          BOOL v104 = v93 > 0xF;
          v93 -= 8;
        }
        while (v104);
      }
      if (v7 == v8)
      {
        int v105 = *(__int16 *)(a3 + 34);
        if (v6 >= v105) {
          break;
        }
      }
      BOOL v84 = 0;
      if (v7 > v8 || (unint64_t)v13 >= v11) {
        goto LABEL_164;
      }
    }
    BOOL v84 = v6 == v105;
    uint64_t v7 = v8;
  }
LABEL_164:
  *(_DWORD *)(a3 + 72) = ((unint64_t)v13 - v4) >> 1;
  *(_DWORD *)(a3 + 52) = v5;
  *(_WORD *)(a3 + 50) = v6;
  *(void *)(a3 + 56) = v7;
  *(unsigned char *)(a3 + 48) = v84 & *(unsigned char *)(a3 + 32);
  *(unsigned char *)(a3 + 49) = *(unsigned char *)(a3 + 33);
  return result;
}

uint64_t sub_1DDAAB870(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 12);
  unint64_t v4 = *(void *)(a3 + 64);
  int v5 = *(_DWORD *)(a3 + 20);
  int v6 = *(__int16 *)(a3 + 18);
  uint64_t v7 = *(unsigned __int8 **)(a3 + 24);
  int v8 = *(unsigned __int8 **)(a3 + 40);
  unint64_t v9 = v4 + 2 * *(int *)(result + 544);
  unint64_t v10 = v9 - 4;
  unint64_t v11 = v9 - 2;
  if (v7 >= v8 - 24 || v4 >= v10)
  {
    int v13 = *(_WORD **)(a3 + 64);
  }
  else
  {
    uint64_t v14 = *(void *)(result + 568 + 8 * (v3 & 1));
    uint64_t v15 = *(void *)(result + 568 + 8 * !(v3 & 1));
    int v16 = *(_WORD **)(a3 + 64);
    do
    {
      int v17 = v6 - 16;
      if (v6 >= 16)
      {
        int v18 = *v7;
        int v19 = v5 << 16;
        if (v18 == 255) {
          uint64_t v20 = 3;
        }
        else {
          uint64_t v20 = 2;
        }
        if (v18 == 255) {
          uint64_t v21 = 2;
        }
        else {
          uint64_t v21 = 1;
        }
        int v22 = v7[v21];
        v7 += v20;
        int v23 = v19 | (v18 << 8);
        if (v22 == 255) {
          ++v7;
        }
        int v5 = v23 | v22;
        int v6 = v17;
      }
      unsigned int v24 = v5 << v6;
      unsigned int v25 = *(unsigned __int16 *)(v14 + 2 * ((v5 << v6) >> 23));
      int v26 = ((v25 >> 10) & 0x1F) + v6;
      if (v25 > 0x8000)
      {
        LOWORD(v25) = (char)v25;
      }
      else
      {
        if ((v25 & 0x8000) != 0)
        {
          unsigned int v25 = *(unsigned __int16 *)(v14 + 2 * (HIWORD(v24) & 0x3FF));
          v26 += (v25 >> 10) & 0x1F;
        }
        int v27 = v25 & 0x1F;
        if ((v25 & 0x1F) != 0)
        {
          int v28 = v26 - 16;
          if (v26 >= 16)
          {
            int v29 = *v7;
            int v30 = v5 << 16;
            if (v29 == 255) {
              uint64_t v31 = 3;
            }
            else {
              uint64_t v31 = 2;
            }
            if (v29 == 255) {
              uint64_t v32 = 2;
            }
            else {
              uint64_t v32 = 1;
            }
            int v33 = v7[v32];
            v7 += v31;
            int v34 = v30 | (v29 << 8);
            if (v33 == 255) {
              ++v7;
            }
            int v5 = v34 | v33;
            int v26 = v28;
          }
          unsigned int v25 = ((v5 << v26) >> -(char)v27) - ((((v5 << v26) >> 31) - 1) >> -(char)v27);
          v26 += v27;
        }
        else
        {
          LOWORD(v25) = ((_WORD)v25 << 8) & 0x8000;
        }
      }
      *int v16 = v25;
      int v35 = v26 - 16;
      if (v26 >= 16)
      {
        int v36 = *v7;
        int v37 = v5 << 16;
        if (v36 == 255) {
          uint64_t v38 = 3;
        }
        else {
          uint64_t v38 = 2;
        }
        if (v36 == 255) {
          uint64_t v39 = 2;
        }
        else {
          uint64_t v39 = 1;
        }
        int v40 = v7[v39];
        v7 += v38;
        int v41 = v37 | (v36 << 8);
        if (v40 == 255) {
          ++v7;
        }
        int v5 = v41 | v40;
        int v26 = v35;
      }
      unsigned int v42 = v5 << v26;
      unsigned int v43 = *(unsigned __int16 *)(v15 + 2 * ((v5 << v26) >> 23));
      int v6 = ((v43 >> 10) & 0x1F) + v26;
      if (v43 > 0x8000)
      {
        LOWORD(v43) = (char)v43;
      }
      else
      {
        if ((v43 & 0x8000) != 0)
        {
          unsigned int v43 = *(unsigned __int16 *)(v15 + 2 * (HIWORD(v42) & 0x3FF));
          v6 += (v43 >> 10) & 0x1F;
        }
        int v44 = v43 & 0x1F;
        if ((v43 & 0x1F) != 0)
        {
          int v45 = v6 - 16;
          if (v6 >= 16)
          {
            int v46 = *v7;
            int v47 = v5 << 16;
            if (v46 == 255) {
              uint64_t v48 = 3;
            }
            else {
              uint64_t v48 = 2;
            }
            if (v46 == 255) {
              uint64_t v49 = 2;
            }
            else {
              uint64_t v49 = 1;
            }
            int v50 = v7[v49];
            v7 += v48;
            int v51 = v47 | (v46 << 8);
            if (v50 == 255) {
              ++v7;
            }
            int v5 = v51 | v50;
            int v6 = v45;
          }
          unsigned int v43 = ((v5 << v6) >> -(char)v44) - ((((v5 << v6) >> 31) - 1) >> -(char)v44);
          v6 += v44;
        }
        else
        {
          LOWORD(v43) = ((_WORD)v43 << 8) & 0x8000;
        }
      }
      int v13 = v16 + 2;
      v16[1] = v43;
      if (v7 >= v8 - 24) {
        break;
      }
      v16 += 2;
    }
    while ((unint64_t)v13 < v10);
  }
  *(unsigned char *)(a3 + 48) = 0;
  if (v7 > v8 || (unint64_t)v13 >= v11)
  {
    BOOL v53 = 0;
  }
  else
  {
    while (1)
    {
      if (v6 >= 16)
      {
        int v54 = *v7;
        int v55 = v5 << 16;
        if (v54 == 255) {
          uint64_t v56 = 3;
        }
        else {
          uint64_t v56 = 2;
        }
        if (v54 == 255) {
          uint64_t v57 = 2;
        }
        else {
          uint64_t v57 = 1;
        }
        int v58 = v7[v57];
        v7 += v56;
        int v59 = v55 | (v54 << 8);
        if (v58 == 255) {
          ++v7;
        }
        int v5 = v59 | v58;
        v6 -= 16;
      }
      uint64_t v60 = *(void *)(result + 8 * (v3 & 1) + 568);
      unsigned int v61 = *(unsigned __int16 *)(v60 + 2 * ((v5 << v6) >> 23));
      int v62 = ((v61 >> 10) & 0x1F) + v6;
      if (v61 > 0x8000)
      {
        LOWORD(v61) = (char)v61;
      }
      else
      {
        if ((v61 & 0x8000) != 0)
        {
          unsigned int v61 = *(unsigned __int16 *)(v60 + 2 * (((v5 << v6) >> 16) & 0x3FF));
          v62 += (v61 >> 10) & 0x1F;
        }
        int v63 = v61 & 0x1F;
        if ((v61 & 0x1F) != 0)
        {
          int v64 = v62 - 16;
          if (v62 >= 16)
          {
            int v65 = *v7;
            int v66 = v5 << 16;
            if (v65 == 255) {
              uint64_t v67 = 3;
            }
            else {
              uint64_t v67 = 2;
            }
            if (v65 == 255) {
              uint64_t v68 = 2;
            }
            else {
              uint64_t v68 = 1;
            }
            int v69 = v7[v68];
            v7 += v67;
            int v70 = v66 | (v65 << 8);
            if (v69 == 255) {
              ++v7;
            }
            int v5 = v70 | v69;
            int v62 = v64;
          }
          unsigned int v61 = ((v5 << v62) >> -(char)v63) - ((((v5 << v62) >> 31) - 1) >> -(char)v63);
          v62 += v63;
        }
        else
        {
          LOWORD(v61) = ((_WORD)v61 << 8) & 0x8000;
        }
      }
      *v13++ = v61;
      if (v62 < 8)
      {
        int v6 = v62;
      }
      else
      {
        do
        {
          int v71 = *v7;
          int v5 = v71 | (v5 << 8);
          if (v71 == 255) {
            uint64_t v72 = 2;
          }
          else {
            uint64_t v72 = 1;
          }
          v7 += v72;
          int v6 = v62 - 8;
          BOOL v73 = v62 > 0xF;
          v62 -= 8;
        }
        while (v73);
      }
      if (v7 == v8)
      {
        int v74 = *(__int16 *)(a3 + 34);
        if (v6 >= v74) {
          break;
        }
      }
      BOOL v53 = 0;
      LOBYTE(v3) = v3 + 1;
      if (v7 > v8 || (unint64_t)v13 >= v11) {
        goto LABEL_110;
      }
    }
    BOOL v53 = v6 == v74;
    uint64_t v7 = v8;
  }
LABEL_110:
  *(_DWORD *)(a3 + 72) = ((unint64_t)v13 - v4) >> 1;
  *(_DWORD *)(a3 + 52) = v5;
  *(_WORD *)(a3 + 50) = v6;
  *(void *)(a3 + 56) = v7;
  *(unsigned char *)(a3 + 48) = v53 & *(unsigned char *)(a3 + 32);
  *(unsigned char *)(a3 + 49) = *(unsigned char *)(a3 + 33);
  return result;
}

intptr_t sub_1DDAABC54(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  int v54 = *(void (**)(unint64_t, uint64_t))(v2 + 616);
  do
  {
LABEL_2:
    while (1)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v2 + 1164));
      if ((v3 & 0x80000000) != 0) {
        break;
      }
      uint64_t v4 = v3 & 0x1F;
      int v5 = (unsigned __int8 *)(v2 + v4 + 872);
      int v6 = atomic_load(v5);
      if (v6 == 2)
      {
        uint64_t v7 = *(void *)(v2 + 8 * v4 + 904);
        unsigned int v8 = v3;
        atomic_compare_exchange_strong((atomic_uint *volatile)(v2 + 1164), &v8, v3 + 1);
        if (v8 == v3)
        {
          atomic_store(3u, v5);
          if (*(unsigned char *)(v7 + 16) && !*(unsigned char *)(v7 + 17)) {
            v54(v2, a1);
          }
          atomic_store(4u, v5);
          char v9 = 1;
          goto LABEL_11;
        }
      }
      else
      {
        __dmb(0xBu);
        unsigned int v10 = atomic_load((unsigned int *)(v2 + 1164));
        if (v3 == v10) {
          break;
        }
      }
    }
    char v9 = 0;
LABEL_11:
    unsigned int v11 = atomic_load((unsigned int *)(v2 + 1168));
    unsigned int v12 = atomic_load((unsigned int *)(v2 + 1168));
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_25;
    }
    int v13 = 0;
    do
    {
      while (1)
      {
        uint64_t v14 = v12 & 0x1F;
        uint64_t v15 = (unsigned __int8 *)(v2 + v14 + 872);
        int v16 = atomic_load(v15);
        if (v16 != 4) {
          break;
        }
        uint64_t v17 = *(void *)(v2 + 8 * v14 + 904);
        unsigned int v18 = v12;
        atomic_compare_exchange_strong((atomic_uint *volatile)(v2 + 1168), &v18, v12 | 0x80000000);
        if (v18 != v12) {
          goto LABEL_22;
        }
        atomic_store(5u, v15);
        sub_1DDAAC738(v2, a1, v17);
        sub_1DDAAC95C(v2, v17);
        sub_1DDAACBEC(v2, v17);
        atomic_store(6u, v15);
        atomic_fetch_add((atomic_uint *volatile)(v2 + 1168), 0x80000001);
        if (v13)
        {
          while (1)
          {
            int v19 = atomic_load((unsigned int *)(v2 + 1216));
            if (v19 < 2) {
              break;
            }
            int v20 = v19;
            atomic_compare_exchange_strong((atomic_uint *volatile)(v2 + 1216), (unsigned int *)&v20, v19 - 1);
            if (v20 == v19)
            {
              dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 1224));
              break;
            }
          }
        }
        ++v13;
        unsigned int v12 = atomic_load((unsigned int *)(v2 + 1168));
        char v9 = 1;
        if ((v12 & 0x80000000) != 0) {
          goto LABEL_25;
        }
      }
      __dmb(0xBu);
      unsigned int v21 = atomic_load((unsigned int *)(v2 + 1168));
      if (v12 == v21) {
        goto LABEL_25;
      }
LABEL_22:
      unsigned int v12 = atomic_load((unsigned int *)(v2 + 1168));
    }
    while ((v12 & 0x80000000) == 0);
    do
    {
      while (1)
      {
LABEL_25:
        unsigned int v23 = atomic_load((unsigned int *)(v2 + 1172));
        if ((v23 & 0x80000000) != 0)
        {
LABEL_32:
          if ((v9 & 1) == 0)
          {
            unsigned int v30 = atomic_load((unsigned int *)(v2 + 1168));
            if (v11 != v30) {
              goto LABEL_50;
            }
            int v31 = atomic_load((unsigned int *)(v2 + 1216));
            if (v31 <= 0)
            {
              int v45 = atomic_load((unsigned int *)(v2 + 1204));
              if (v45 > 0) {
                goto LABEL_50;
              }
            }
            int v32 = *(_DWORD *)(v2 + 1180);
            uint64_t v33 = *(void *)(v2 + 1184);
            uint64_t v34 = *(void *)(v2 + 1192);
            unsigned int v35 = atomic_load((unsigned int *)(v2 + 1168));
            if (v11 != v35) {
              goto LABEL_50;
            }
            int v36 = 0;
            while (1)
            {
              int v37 = atomic_load((unsigned int *)(v2 + 1216));
              if (v37 <= 0)
              {
                int v38 = atomic_load((unsigned int *)(v2 + 1204));
                if (v38 > 0) {
                  break;
                }
              }
              unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v2 + 1176), 0xFFFFFFFF);
              BOOL v40 = __OFSUB__(add, 1);
              int v41 = add - 1;
              if (v41 < 0 != v40) {
                break;
              }
              if (v33) {
                int v41 = *(unsigned __int16 *)(v33 + 2 * v41);
              }
              unsigned int v42 = (void *)(v34 + (v41 << v32));
              if ((unint64_t)v42 >= *(void *)v2 && (unint64_t)v42 < *(void *)(v2 + 8))
              {
                size_t v43 = NSPageSize();
                madvise(v42, v43, 3);
              }
              unsigned int v44 = atomic_load((unsigned int *)(v2 + 1168));
              --v36;
              if (v11 != v44) {
                goto LABEL_2;
              }
            }
            if (!v36)
            {
LABEL_50:
              if ((v9 & 1) == 0)
              {
                if (atomic_fetch_add((atomic_uint *volatile)(v2 + 1216), 1u))
                {
                  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 1224), 0xFFFFFFFFFFFFFFFFLL);
                }
                else
                {
                  while (1)
                  {
                    sub_1DDAAC458(v2);
                    uint64_t v46 = sub_1DDAAC598(v2);
                    unsigned int v47 = atomic_fetch_add((atomic_uint *volatile)(v2 + 1160), 1u);
                    *(_DWORD *)uint64_t v46 = v47;
                    *(void *)(v2 + 8 * (v47 & 0x1F) + 904) = v46;
                    atomic_store(0, (unsigned __int8 *)(v2 + 872 + (((_BYTE)v47 + 1) & 0x1F)));
                    uint64_t v48 = (unsigned __int8 *)(v2 + 872 + (v47 & 0x1F));
                    atomic_store(1u, v48);
                    sub_1DDAAC608((int *)v2, v46);
                    *(_DWORD *)(v46 + 12) = 0;
                    if (!*(unsigned char *)(v46 + 17))
                    {
                      (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 608))(v2, a1, v46);
                      if (!*(unsigned char *)(v46 + 32))
                      {
                        unsigned int v49 = 0;
                        do
                        {
                          unint64_t v50 = *(void *)(v46 + 40) - 128;
                          if (v50 < *(void *)(v46 + 24)) {
                            unint64_t v50 = *(void *)(v46 + 24);
                          }
                          *(void *)(v46 + 40) = v50;
                          (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 608))(v2, a1, v46);
                          if (*(unsigned char *)(v46 + 32)) {
                            BOOL v51 = 1;
                          }
                          else {
                            BOOL v51 = v49 >= 6;
                          }
                          ++v49;
                        }
                        while (!v51);
                      }
                    }
                    *(void *)(v2 + 648) += *(void *)(v46 + 40) - *(void *)(v46 + 24);
                    *(_OWORD *)(v2 + 752) = *(_OWORD *)(v46 + 32);
                    unint64_t v52 = *(void *)(v2 + 760);
                    if (v52 >= *(void *)(v2 + 712)) {
                      *(void *)(v2 + 760) = v52 - *(int *)(v2 + 696);
                    }
                    atomic_store(2u, v48);
                    if ((int)atomic_fetch_add((atomic_uint *volatile)(v2 + 1216), 0xFFFFFFFF) < 2) {
                      break;
                    }
                    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 1224));
                  }
                }
              }
            }
          }
          goto LABEL_2;
        }
        uint64_t v24 = v23 & 0x1F;
        int v25 = atomic_load((unsigned __int8 *)(v2 + v24 + 872));
        if (v25 == 6) {
          break;
        }
        __dmb(0xBu);
        unsigned int v22 = atomic_load((unsigned int *)(v2 + 1172));
        if (v23 == v22) {
          goto LABEL_32;
        }
      }
      uint64_t v26 = *(void *)(v2 + 8 * v24 + 904);
      unsigned int v27 = v23;
      atomic_compare_exchange_strong((atomic_uint *volatile)(v2 + 1172), &v27, v23 + 1);
    }
    while (v27 != v23);
    intptr_t result = sub_1DDAACC7C(v2, a1, v26);
    int v29 = *(unsigned __int8 *)(v26 + 17);
    if ((int)atomic_fetch_add((atomic_uint *volatile)(v26 + 8), 0xFFFFFFFF) <= 1)
    {
      atomic_fetch_or((atomic_uint *volatile)(v2 + 1200), 1 << *(_DWORD *)(v26 + 4));
      if ((atomic_fetch_add((atomic_uint *volatile)(v2 + 1204), 1u) & 0x80000000) != 0)
      {
        intptr_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 1208));
        if (v29) {
          break;
        }
        goto LABEL_2;
      }
    }
  }
  while (!v29);
  atomic_store(1u, (unsigned __int8 *)(v2 + 561));
  if (atomic_fetch_add((atomic_uint *volatile)(v2 + 720), 1u) == -1)
  {
    BOOL v53 = *(NSObject **)(v2 + 728);
    return dispatch_semaphore_signal(v53);
  }
  return result;
}

intptr_t sub_1DDAAC16C(uint64_t a1)
{
  int v2 = 0;
  unint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 616);
  do
  {
    sub_1DDAAC458(v3);
    uint64_t v5 = sub_1DDAAC598(v3);
    *(_DWORD *)uint64_t v5 = v2;
    sub_1DDAAC608((int *)v3, v5);
    if (!*(unsigned char *)(v5 + 17) && *(unsigned char *)(v5 + 33))
    {
      int v6 = *(_DWORD *)(v5 + 36);
      int v7 = *(__int16 *)(v5 + 34);
      unsigned int v8 = *(unsigned __int8 **)(v5 + 40);
      if (v7 >= 8)
      {
        int v7 = *(unsigned __int16 *)(v5 + 34);
        do
        {
          unsigned int v9 = v7;
          int v10 = *v8;
          int v6 = v10 | (v6 << 8);
          if (v10 == 255) {
            uint64_t v11 = 2;
          }
          else {
            uint64_t v11 = 1;
          }
          v8 += v11;
          int v7 = v9 - 8;
        }
        while (v9 > 0xF);
      }
      *(_DWORD *)(v5 + 36) = v6;
      *(_WORD *)(v5 + 34) = v7;
      *(void *)(v5 + 40) = v8;
    }
    *(void *)(v3 + 648) += *(void *)(v5 + 40) - *(void *)(v5 + 24);
    *(_OWORD *)(v3 + 752) = *(_OWORD *)(v5 + 32);
    unint64_t v12 = *(void *)(v3 + 760);
    if (v12 >= *(void *)(v3 + 712)) {
      *(void *)(v3 + 760) = v12 - *(int *)(v3 + 696);
    }
    if (*(unsigned char *)(v5 + 16) && !*(unsigned char *)(v5 + 17)) {
      v4(v3, a1, v5);
    }
    sub_1DDAAC738(v3, a1, v5);
    sub_1DDAAC95C(v3, v5);
    sub_1DDAACBEC(v3, v5);
    intptr_t result = sub_1DDAACC7C(v3, a1, v5);
    int v14 = *(unsigned __int8 *)(v5 + 17);
    if ((int)atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 0xFFFFFFFF) <= 1)
    {
      atomic_fetch_or((atomic_uint *volatile)(v3 + 1200), 1 << *(_DWORD *)(v5 + 4));
      if ((atomic_fetch_add((atomic_uint *volatile)(v3 + 1204), 1u) & 0x80000000) != 0) {
        intptr_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 1208));
      }
    }
    ++v2;
  }
  while (!v14);
  atomic_store(1u, (unsigned __int8 *)(v3 + 561));
  if (atomic_fetch_add((atomic_uint *volatile)(v3 + 720), 1u) == -1)
  {
    uint64_t v15 = *(NSObject **)(v3 + 728);
    return dispatch_semaphore_signal(v15);
  }
  return result;
}

char *sub_1DDAAC360(uint64_t a1, uint64_t a2)
{
  intptr_t result = (char *)(a1 + 192);
  if (result != (char *)a2) {
    return sub_1DDA17E28(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void *sub_1DDAAC384(void *a1)
{
  *a1 = &unk_1F39627F0;
  int v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDAAC3E4(void *a1)
{
  *a1 = &unk_1F39627F0;
  int v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

intptr_t sub_1DDAAC458(intptr_t result)
{
  uint64_t v1 = *(void *)(result + 632);
  if (*(void *)(result + 648) + *(int *)(result + 548) + 8 >= v1) {
    uint64_t v2 = *(void *)(result + 632);
  }
  else {
    uint64_t v2 = *(void *)(result + 648) + *(int *)(result + 548) + 8;
  }
  if (v2 > *(void *)(result + 672))
  {
    intptr_t v3 = result;
    do
    {
      if ((int)atomic_fetch_add((atomic_uint *volatile)(v3 + 736), 0xFFFFFFFF) <= 0) {
        intptr_t result = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v3 + 744), 0xFFFFFFFFFFFFFFFFLL);
      }
      uint64_t v4 = *(void *)(v3 + 672) + *(int *)(v3 + 688);
      *(void *)(v3 + 672) = v4;
      uint64_t v5 = *(void *)(v3 + 680);
      if (v4 > v5)
      {
        v5 += *(int *)(v3 + 696);
        *(void *)(v3 + 680) = v5;
      }
      if (v1 - 32 < v4)
      {
        uint64_t v6 = *(void *)(v3 + 640);
        if (v1 >= v6)
        {
          uint64_t v1 = v6 - 32;
          unint64_t v7 = *(void *)(v3 + 712);
          unsigned int v8 = (unsigned __int8 *)(v7 + v6 - 32 - v5);
          if ((unint64_t)v8 < *(void *)(v3 + 704)) {
            v8 += *(int *)(v3 + 696);
          }
          int v9 = v4 - v1;
          if ((int)v4 - (int)v1 >= 1)
          {
            unsigned __int16 v10 = 0;
            if (v9 >= 32) {
              int v9 = 32;
            }
            uint64_t v11 = v6 - 33;
            while (1)
            {
              unsigned __int8 v13 = *v8++;
              unsigned __int8 v12 = v13;
              if ((unint64_t)v8 > v7) {
                v8 -= *(int *)(v3 + 696);
              }
              unsigned __int16 v14 = v12 | (unsigned __int16)(v10 << 8);
              if (v14 == 65497) {
                break;
              }
              ++v11;
              unsigned __int16 v10 = v14;
              if (!--v9) {
                goto LABEL_24;
              }
            }
            *(void *)(v3 + 632) = v11;
          }
        }
      }
LABEL_24:
      ;
    }
    while (v2 > v4);
  }
  return result;
}

uint64_t sub_1DDAAC598(uint64_t a1)
{
  if ((int)atomic_fetch_add((atomic_uint *volatile)(a1 + 1204), 0xFFFFFFFF) <= 0) {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 1208), 0xFFFFFFFFFFFFFFFFLL);
  }
  do
  {
    unsigned int v2 = atomic_load((unsigned int *)(a1 + 1200));
    unsigned int v3 = v2;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 1200), &v3, (v2 - 1) & v2);
  }
  while (v3 != v2);
  return *(void *)(a1 + 8 * __clz(__rbit32(v2)) + 288);
}

int *sub_1DDAAC608(int *result, uint64_t a2)
{
  uint64_t v3 = *((void *)result + 81);
  uint64_t v4 = v3 + result[137];
  uint64_t v5 = *((void *)result + 79);
  uint64_t v6 = v5 - v3;
  BOOL v7 = v4 < v5;
  BOOL v8 = v4 >= v5;
  if (v7) {
    uint64_t v6 = result[137];
  }
  long long v9 = *((_OWORD *)result + 47);
  *(unsigned char *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 33) = v8;
  *(_WORD *)(a2 + 34) = 32;
  *(void *)(a2 + 40) = *(void *)(a2 + 24) + v6;
  if (v6 < 1 || (unsigned __int16 v10 = result, v11 = atomic_load((unsigned int *)result + 139), v11 < 1) || *(unsigned char *)(a2 + 17))
  {
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a2 + 16);
    *(_WORD *)(a2 + 32) = 257;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 72) = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(a2 + 40);
    intptr_t result = (int *)*((void *)result + 89);
    if (v12 + 8 > (unint64_t)result)
    {
      unsigned __int8 v13 = (char *)result - *(void *)(a2 + 24);
      int v14 = v12 - result + 8;
      if (v14 <= (int)v13)
      {
        int v16 = (const void *)*((void *)v10 + 88);
        return (int *)memmove(result, v16, v14);
      }
      else
      {
        intptr_t result = (int *)memmove((void *)(*((void *)v10 + 88) - (int)v13), (int *)((char *)result - v13), (int)v13);
        uint64_t v15 = v10[174];
        *(void *)(a2 + 24) -= v15;
        *(void *)(a2 + 40) -= v15;
      }
    }
  }
  return result;
}

uint64_t sub_1DDAAC738(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = (unsigned char *)(a3 + 16);
  BOOL v7 = *(unsigned char *)(result + 562) != 0;
  int v8 = (*(_DWORD *)(result + 824) + *(_DWORD *)(result + 784)) & 1;
  if (!v8) {
    BOOL v7 = 1;
  }
  char v9 = *(unsigned char *)(a3 + 16) & *(unsigned char *)(result + 768) & v7;
  unsigned char *v6 = v9;
  if ((v9 & 1) == 0)
  {
    *(_DWORD *)(a3 + 12) = v8;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)(result + 768);
    if (*(unsigned char *)(a3 + 17))
    {
      if (*(unsigned char *)(result + 560))
      {
        *(_DWORD *)(a3 + 72) = 0;
        long long v10 = *(_OWORD *)v6;
        *(_OWORD *)(a3 + 32) = *(_OWORD *)v6;
        *(_OWORD *)(a3 + 48) = v10;
      }
    }
    else
    {
      unint64_t v11 = *(void *)(a3 + 24);
      if (v11 < *(void *)(result + 704))
      {
        v11 += *(int *)(result + 696);
        *(void *)(a3 + 24) = v11;
      }
      if (v11 > *(void *)(a3 + 40)) {
        *(void *)(a3 + 24) = v11 - *(int *)(result + 696);
      }
      intptr_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 616))(result, a2, a3);
    }
  }
  signed int v12 = *(_DWORD *)(a3 + 72);
  signed int v13 = atomic_load((unsigned int *)(v5 + 556));
  if (v12 > v13 && !*(unsigned char *)(a3 + 33))
  {
    unint64_t v14 = *(void *)(a3 + 24);
    unint64_t v15 = *(void *)(a3 + 56) - 2;
    if (v14 <= v15)
    {
      int v16 = *(unsigned __int8 **)(a3 + 24);
      while (*v16 != 255 || v16[1] != 217)
      {
        ++v16;
        ++v14;
        if ((unint64_t)v16 > v15) {
          goto LABEL_37;
        }
      }
      int v17 = 0;
      uint64_t v18 = *(int *)(v5 + 696);
      if ((unint64_t)v16 >= *(void *)(v5 + 704)) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = *(int *)(v5 + 696);
      }
      unint64_t v20 = *(void *)(v5 + 712);
      if ((unint64_t)&v16[v19] > v20) {
        uint64_t v21 = -v18;
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = v19 + *(void *)(v5 + 680) + v21;
      if ((int64_t)(v22 - v20 + v14) >= *(void *)(v5 + 664)) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = *(int *)(v5 + 696);
      }
      uint64_t v24 = v22 + v23;
      if ((int64_t)(v24 - v20 + v14) <= *(void *)(v5 + 672)) {
        uint64_t v18 = 0;
      }
      *(void *)(v5 + 632) = v24 - v18 - v20 + v14;
      for (unsigned int i = 40; i > 0xF; i -= 8)
      {
        int v26 = *v16;
        int v17 = v26 | (v17 << 8);
        if (v26 == 255) {
          uint64_t v27 = 2;
        }
        else {
          uint64_t v27 = 1;
        }
        v16 += v27;
      }
      *(void *)(a3 + 40) = v16;
      *(_DWORD *)(a3 + 32) = 256;
      *(_DWORD *)(a3 + 36) = v17;
      intptr_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 616))(v5, a2, a3);
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(a3 + 32);
      *(unsigned char *)(v5 + 560) = 1;
    }
  }
LABEL_37:
  atomic_fetch_add((atomic_uint *volatile)(v5 + 556), -*(_DWORD *)(a3 + 72));
  return result;
}

unint64_t sub_1DDAAC95C(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 596);
  uint64_t v5 = *(__int16 **)(a2 + 64);
  int v6 = *(_DWORD *)(a2 + 72);
  BOOL v7 = (char *)(result + 784);
  int v8 = *(_WORD **)(result + 816);
  int v9 = *(_DWORD *)(result + 824);
  int v10 = (v9 + v6) % v4;
  int v11 = *(_DWORD *)(result + 784) + v9 + v6;
  int v12 = *(_DWORD *)(result + 552);
  int v13 = v12 - (*(_DWORD *)(result + 784) + v9);
  int v14 = v13 & ~(v13 >> 31);
  int v15 = (v13 & (v13 >> 31)) + v9;
  if (v12 < v11) {
    int v16 = v14;
  }
  else {
    int v16 = *(_DWORD *)(a2 + 72);
  }
  if (v12 < v11) {
    int v17 = v15;
  }
  else {
    int v17 = *(_DWORD *)(result + 824);
  }
  if (v12 < v11) {
    int v18 = v15 + v14;
  }
  else {
    int v18 = v9 + v6;
  }
  if (v12 < v11) {
    int v19 = 0;
  }
  else {
    int v19 = v10;
  }
  if (v18 >= v4 || v17 < 1)
  {
    if ((v17 & 3) != 0)
    {
      if (v17)
      {
        __int16 v20 = *v5++;
        v8[v17++] = v20;
        --v16;
      }
      if ((v17 & 2) != 0)
      {
        uint64_t v21 = &v8[v17];
        __int16 *v21 = *v5;
        v21[1] = v5[1];
        v17 += 2;
        v5 += 2;
        v16 -= 2;
      }
    }
  }
  else
  {
    memmove(&v5[v17], *(const void **)(a2 + 64), 2 * v16);
    intptr_t result = (unint64_t)memmove(v5, v8, 2 * v17);
    int v8 = 0;
    v16 += v17;
    int v17 = 0;
  }
  *(void *)(v3 + 792) = v5;
  *(_DWORD *)(v3 + 800) = v16 - v19;
  *(void *)(v3 + 816) = v8;
  *(_DWORD *)(v3 + 824) = v17;
  long long v23 = *((_OWORD *)v7 + 3);
  long long v22 = *((_OWORD *)v7 + 4);
  long long v24 = *((_OWORD *)v7 + 2);
  *(void *)(a2 + 160) = *((void *)v7 + 10);
  *(_OWORD *)(a2 + 128) = v23;
  *(_OWORD *)(a2 + 144) = v22;
  *(_OWORD *)(a2 + 112) = v24;
  long long v25 = *((_OWORD *)v7 + 1);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v7;
  *(_OWORD *)(a2 + 96) = v25;
  if (v19 <= 0) {
    unsigned int v26 = 1;
  }
  else {
    unsigned int v26 = 2;
  }
  atomic_store(v26, (unsigned int *)(a2 + 8));
  int v27 = *(_DWORD *)(v3 + 824);
  uint64_t v28 = 816;
  if (!v27) {
    uint64_t v28 = 792;
  }
  int v29 = *(int16x4_t **)(v3 + v28);
  uint64_t v30 = *(void *)(v3 + 832);
  uint64_t v31 = *(void *)(v3 + 840);
  int v32 = *(_DWORD *)(v3 + 784);
  int v33 = *(_DWORD *)(v3 + 848);
  int v34 = *(_DWORD *)(v3 + 852);
  int v35 = *(_DWORD *)(v3 + 800);
  if (v35 + v27 >= 1)
  {
    int v36 = v32 + v27;
    if (v27) {
      int v37 = 0;
    }
    else {
      int v37 = *(_DWORD *)(v3 + 800);
    }
    intptr_t result = (v36 + v37);
    int v38 = *(_DWORD *)(v3 + 784);
    while (1)
    {
      if (v32 == result)
      {
        if (v32 != v36) {
          goto LABEL_48;
        }
        int v29 = *(int16x4_t **)(v3 + 792);
        intptr_t result = (v36 + v35);
        if (!v35) {
          break;
        }
      }
      if (v32 == v33)
      {
        if (v32 == v34)
        {
          uint64_t v39 = *(void *)(v31 + 24);
          v31 += 24;
          uint64_t v30 = v39;
          int v34 = v32 + *(_DWORD *)(v31 + 12) * *(_DWORD *)(v31 + 8);
        }
        else
        {
          v30 += 2 * *(int *)(v31 + 16);
        }
        int v33 = *(_DWORD *)(v31 + 8) + v32;
      }
      if (v32 == v38)
      {
        *(int32x4_t *)(v3 + 856) = vaddw_s16(*(int32x4_t *)(v3 + 856), *v29);
        int v38 = v32 + v4;
      }
      if (v33 >= (int)result) {
        int v40 = result;
      }
      else {
        int v40 = v33;
      }
      if (v38 < v40) {
        int v40 = v38;
      }
      int v41 = v40 - v32;
      int v29 = (int16x4_t *)((char *)v29 + 2 * v41);
      v30 += 2 * v41;
      int v32 = v40;
    }
    int v32 = v36;
  }
LABEL_48:
  *(_DWORD *)(v3 + 784) = v32;
  *(void *)(v3 + 832) = v30;
  *(void *)(v3 + 840) = v31;
  *(_DWORD *)(v3 + 848) = v33;
  *(_DWORD *)(v3 + 852) = v34;
  *(void *)(v3 + 792) = 0;
  *(_DWORD *)(v3 + 800) = 0;
  *(void *)(v3 + 816) = 0;
  *(void *)(v3 + 808) = 0;
  *(_DWORD *)(v3 + 824) = 0;
  if (v19 >= 1)
  {
    *(void *)(v3 + 808) = a2;
    *(void *)(v3 + 816) = v29;
    *(_DWORD *)(v3 + 824) = v19;
  }
  return result;
}

intptr_t sub_1DDAACBEC(intptr_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56) - *(void *)(a2 + 24) + *(void *)(result + 656);
  *(void *)(result + 656) = v2;
  *(_OWORD *)(result + 768) = *(_OWORD *)(a2 + 48);
  uint64_t v3 = *(void *)(result + 664);
  int v4 = v2 - v3;
  int v5 = *(_DWORD *)(result + 688);
  if (v5 <= v4)
  {
    intptr_t v6 = result;
    do
    {
      *(void *)(v6 + 664) = v3 + v5;
      if (atomic_fetch_add((atomic_uint *volatile)(v6 + 720), 1u) == -1) {
        intptr_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v6 + 728));
      }
      uint64_t v3 = *(void *)(v6 + 664);
      int v5 = *(_DWORD *)(v6 + 688);
    }
    while (v5 <= *(_DWORD *)(v6 + 656) - (int)v3);
  }
  return result;
}

intptr_t sub_1DDAACC7C(intptr_t result, uint64_t a2, uint64_t a3)
{
  intptr_t v4 = result;
  uint64_t v5 = *(void *)(result + 584);
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  int v7 = *(_DWORD *)(a3 + 120);
  uint64_t v8 = 112;
  if (!v7) {
    uint64_t v8 = 88;
  }
  int v9 = *(int16x4_t **)(a3 + v8);
  int v11 = *(_WORD **)(a3 + 128);
  uint64_t v10 = *(void *)(a3 + 136);
  int v12 = *(_DWORD *)(a3 + 80);
  int v14 = *(_DWORD *)(a3 + 144);
  int v13 = *(_DWORD *)(a3 + 148);
  int v15 = v12 + v7;
  int v16 = v12 + v7;
  if (!v7) {
    int v16 = *(_DWORD *)(a3 + 96) + v15;
  }
  __int32 v17 = 0;
  __int32 v18 = 0;
  int v19 = *(_DWORD *)(result + 596);
  int v20 = *(_DWORD *)(result + 600);
  int8x16_t v21 = 0uLL;
  int v22 = v12;
  int v41 = v19;
  int v42 = v12 + v7;
  int v40 = v20;
  while (v12 != v16)
  {
LABEL_14:
    if (v12 == v14)
    {
      if (v12 == v13)
      {
        long long v25 = *(_WORD **)(v10 + 24);
        v10 += 24;
        int v11 = v25;
        int v13 = v12 + *(_DWORD *)(v10 + 12) * *(_DWORD *)(v10 + 8);
      }
      else
      {
        v11 += *(int *)(v10 + 16);
      }
      int v14 = *(_DWORD *)(v10 + 8) + v12;
    }
    if (v12 == v22)
    {
      int32x4_t v26 = *(int32x4_t *)(a3 + 152);
      *(int32x4_t *)(a3 + 152) = vaddw_s16(v26, *v9);
      int v22 = v12 + v19;
      __int32 v18 = v26.i32[1];
      int8x16_t v21 = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL);
      __int32 v17 = v26.i32[0];
    }
    if (v14 >= v16) {
      int v27 = v16;
    }
    else {
      int v27 = v14;
    }
    if (v22 < v27) {
      int v27 = v22;
    }
    int v28 = v27 - v12;
    int v29 = (int16x4_t *)((char *)v9 + 2 * (v27 - v12));
    int v12 = v27;
    if (v20 == 2)
    {
      if (v28 >= 1)
      {
        do
        {
          v17 += v9->u16[0];
          uint64_t v30 = (int16x4_t *)((char *)v9 + 4);
          v18 += v9->u16[1];
          unsigned int v31 = *(unsigned __int16 *)(v5 + 2 * (unsigned __int16)v17);
          unsigned int v32 = *(unsigned __int16 *)(v5 + 2 * (unsigned __int16)v18);
          if (v6 > v31) {
            unsigned int v33 = *(unsigned __int16 *)(v5 + 2 * (unsigned __int16)v17);
          }
          else {
            unsigned int v33 = v6;
          }
          *int v11 = v31;
          v11[1] = v32;
          if (v33 > v32) {
            unsigned int v6 = v32;
          }
          else {
            unsigned int v6 = v33;
          }
          v11 += 2;
          int v9 = v30;
        }
        while (v30 < v29);
        goto LABEL_47;
      }
    }
    else if (v28 >= 1)
    {
      do
      {
        v17 += v9->u16[0];
        v18 += v9->u16[1];
        unsigned int v34 = *(unsigned __int16 *)(v5 + 2 * (unsigned __int16)v17);
        unsigned int v35 = *(unsigned __int16 *)(v5 + 2 * (unsigned __int16)v18);
        *int v11 = v34;
        if (v6 <= v34) {
          unsigned int v34 = v6;
        }
        v11[1] = v35;
        if (v34 <= v35) {
          unsigned int v35 = v34;
        }
        uint64_t v30 = v9 + 1;
        v36.i32[0] = v9->u16[2];
        v36.i32[1] = v9->u16[3];
        *(int32x2_t *)v21.i8 = vadd_s32(*(int32x2_t *)v21.i8, v36);
        unsigned int v37 = *(unsigned __int16 *)(v5 + 2 * v21.u16[0]);
        unsigned int v38 = *(unsigned __int16 *)(v5 + 2 * v21.u16[2]);
        if (v35 > v37) {
          unsigned int v35 = *(unsigned __int16 *)(v5 + 2 * v21.u16[0]);
        }
        v11[2] = v37;
        v11[3] = v38;
        if (v35 > v38) {
          unsigned int v6 = v38;
        }
        else {
          unsigned int v6 = v35;
        }
        v11 += 4;
        int v9 = v30;
      }
      while (v30 < v29);
LABEL_47:
      int v9 = v30;
      int v12 = v27;
    }
  }
  if (v12 == v15)
  {
    uint64_t v23 = *(void *)(a3 + 104);
    if (v23)
    {
      if ((int)atomic_fetch_add((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF) <= 1)
      {
        *(void *)(a3 + 104) = 0;
        atomic_fetch_or((atomic_uint *volatile)(v4 + 1200), 1 << *(_DWORD *)(v23 + 4));
        if ((atomic_fetch_add((atomic_uint *volatile)(v4 + 1204), 1u) & 0x80000000) != 0)
        {
          uint64_t v45 = v10;
          int v44 = v13;
          int8x16_t v43 = v21;
          intptr_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v4 + 1208));
          int8x16_t v21 = v43;
          int v20 = v40;
          int v19 = v41;
          int v13 = v44;
          int v15 = v42;
          uint64_t v10 = v45;
        }
      }
    }
    int v24 = *(_DWORD *)(a3 + 96);
    if (v24)
    {
      int v9 = *(int16x4_t **)(a3 + 88);
      int v16 = v24 + v15;
      goto LABEL_14;
    }
  }
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_1DDAACF3C(unsigned __int8 *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    int v2 = 0;
    int v3 = 0;
    uint64_t v4 = 16;
    uint64_t v5 = a1;
    while (1)
    {
      int v7 = *v5++;
      int v6 = v7;
      char v8 = v4 - 1;
      if (v7)
      {
        int v9 = ((v6 - 1) << v8) + v3;
        if ((((1 << v8) | v3 | v9) & 0xFFFF007F) != 0 && (~(v3 & v9) & 0xFE00) != 0) {
          break;
        }
      }
      v2 += v6;
      v3 += v6 << v8;
      if (!--v4) {
        operator new[]();
      }
    }
  }
  return 0;
}

uint64_t sub_1DDAAD46C(unsigned __int8 *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    int v2 = 0;
    int v3 = 0x10000;
    uint64_t v4 = 16;
    uint64_t v5 = a1;
    while (1)
    {
      int v7 = *v5++;
      int v6 = v7;
      char v8 = v4 - 1;
      v3 -= v7 << (v4 - 1);
      if (v7)
      {
        int v9 = 1 << v8;
        int v10 = v3 + ((v6 - 1) << v8);
        unsigned int v11 = (v3 | v9 | v10) & 0xFFFF007F;
        int v12 = ((unsigned __int16)v10 | (unsigned __int16)v3) & 0xFE00;
        if (v11 && v12 != 0) {
          break;
        }
      }
      v2 += v6;
      if (!--v4) {
        operator new[]();
      }
    }
  }
  return 0;
}

id sub_1DDAAD8D0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F30058];
  uint64_t v34 = *MEMORY[0x1E4F30038];
  uint64_t v35 = v5;
  v42[0] = MEMORY[0x1E4F1CC38];
  v42[1] = @"com.kodak.raw-image";
  uint64_t v6 = *MEMORY[0x1E4F30050];
  uint64_t v36 = *MEMORY[0x1E4F30018];
  v42[2] = @".dcr.";
  v42[3] = &unk_1F39AEBA0;
  v42[4] = &unk_1F39AEBB8;
  int v7 = objc_msgSend_numberWithUnsignedLong_(NSNumber, a2, (uint64_t)sub_1DDA15F84, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E4F30040], *MEMORY[0x1E4F30048]);
  v42[5] = v7;
  uint64_t v37 = *MEMORY[0x1E4F30000];
  unsigned int v11 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v8, (uint64_t)sub_1DDAADBC8, v9, v10);
  v42[6] = v11;
  uint64_t v38 = *MEMORY[0x1E4F30020];
  int v15 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v12, (uint64_t)sub_1DDAADBD4, v13, v14);
  v42[7] = v15;
  uint64_t v39 = *MEMORY[0x1E4F30008];
  int v19 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v16, (uint64_t)sub_1DDA818EC, v17, v18);
  v42[8] = v19;
  uint64_t v40 = *MEMORY[0x1E4F30028];
  uint64_t v23 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v20, (uint64_t)sub_1DDAADBE0, v21, v22);
  v42[9] = v23;
  uint64_t v41 = *MEMORY[0x1E4F30030];
  int v27 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v24, (uint64_t)sub_1DDAADBEC, v25, v26);
  v42[10] = v27;
  int v29 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v43[0] = v29;
  unsigned int v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v30, (uint64_t)v43, 1, v31);

  return v32;
}

void sub_1DDAADB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAADBC8(const void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1DDAADBD4(os_signpost_id_t a1)
{
  return sub_1DDA81764(a1);
}

uint64_t sub_1DDAADBE0(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA7FF34(a1, a2, a3, &unk_1F39628D8);
}

uint64_t sub_1DDAADBEC(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA82568(a1, a2, a3, &unk_1F39628D8);
}

void sub_1DDAADBF8(void *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  char v11 = a2;
  id v10 = a3;
  id v9 = a4;
  sub_1DDAAF4B0(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;
}

void sub_1DDAADC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAADC94(uint64_t a1)
{
  unsigned int v6 = 1;
  sub_1DDA1A880(__p, "IFD0:SUBIFD1");
  BOOL v2 = sub_1DDA3FE4C(a1, __p, &v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v2) {
    return v6;
  }
  else {
    return 1;
  }
}

void sub_1DDAADD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAADD20(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD1");
  uint64_t v2 = sub_1DDA481F0(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDAADD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAADD98(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD1");
  uint64_t v2 = sub_1DDA48264(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDAADDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DDAADE10(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD1");
  unint64_t v2 = sub_1DDA48394(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDAADE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAADE88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1208);
  if (v1 == *(void *)(a1 + 1200))
  {
    int v8 = 0;
    sub_1DDA1A880(__p, "IFD0:SUBIFD1");
    int v4 = sub_1DDA3FF24(a1, __p, 0, &v8);
    int v5 = v4;
    if (v7 < 0)
    {
      operator delete(__p[0]);
      if (v5) {
        goto LABEL_5;
      }
    }
    else if (v4)
    {
LABEL_5:
      LOWORD(result) = v8;
      return (unsigned __int16)result;
    }
    LOWORD(result) = sub_1DDA27FA0();
    return (unsigned __int16)result;
  }
  LOWORD(result) = *(_WORD *)(v1 - 2);
  return (unsigned __int16)result;
}

void sub_1DDAADF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAADF3C(void **a1, uint64_t a2, char a3)
{
  uint64_t v6 = (uint64_t)(a1 + 36);
  sub_1DDA1A880(__p, "IFD0");
  char v7 = sub_1DDA2A530(v6, __p);
  int v8 = v7;
  if (a1 + 37 == v7) {
    double v9 = -1.0;
  }
  else {
    double v9 = *((double *)v7 + 7);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 37 == v8) {
    return sub_1DDA276C8(a1, a2, a3);
  }
  return v9;
}

void sub_1DDAADFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAAE00C(uint64_t a1)
{
  if (sub_1DDB11748((double *)(a1 + 1184))) {
    return *(double *)(a1 + 1184);
  }
  else {
    return sub_1DDA27CC0();
  }
}

void sub_1DDAAE04C(uint64_t **a1, uint64_t a2, unsigned __int16 *a3)
{
  sub_1DDA43480(a1, a2, a3);
  int v6 = *a3;
  if (v6 == 33424)
  {
    if (a3[1] == 4)
    {
      sub_1DDA27D28((uint64_t)a1, &__p);
      __srCC_SHA256_CTX c = *((_DWORD *)a3 + 2);
      sub_1DDA18410((int *)&v22, (int *)&__src);
      sub_1DDA1A94C((uint64_t *)&v20, (uint64_t *)&__p, (uint64_t)&v22, 0);
      if (v17) {
        sub_1DDA18310(v17);
      }
      if (*(char *)(a2 + 23) >= 0) {
        size_t v13 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v13 = *(void *)(a2 + 8);
      }
      p_p = &__p;
      sub_1DDA49688((uint64_t)&__p, v13 + 12);
      if (v18 < 0) {
        p_p = __p;
      }
      if (v13)
      {
        if (*(char *)(a2 + 23) >= 0) {
          int v15 = (const void *)a2;
        }
        else {
          int v15 = *(const void **)a2;
        }
        memmove(p_p, v15, v13);
      }
      strcpy((char *)p_p + v13, ":KodakSubIFD");
      ((void (*)(uint64_t **, void **))(*a1)[96])(a1, &__p);
      if (v18 < 0) {
        operator delete(__p);
      }
      sub_1DDA1AA18((uint64_t *)&v20);
    }
  }
  else if (v6 == 37397 && a3[1] == 5 && *((_DWORD *)a3 + 1) == 1)
  {
    sub_1DDA27D28((uint64_t)a1, &__p);
    sub_1DDA3E944((uint64_t)a3, (uint64_t *)&__p, &v20);
    if (v17) {
      sub_1DDA18310(v17);
    }
    int v8 = v20;
    if (v21 - (unsigned char *)v20 == 8)
    {
      __srCC_SHA256_CTX c = *(double *)v20;
      if (*(char *)(a2 + 23) >= 0) {
        size_t v9 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v9 = *(void *)(a2 + 8);
      }
      id v10 = &__p;
      sub_1DDA49688((uint64_t)&__p, v9 + 16);
      if (v18 < 0) {
        id v10 = __p;
      }
      if (v9)
      {
        if (*(char *)(a2 + 23) >= 0) {
          char v11 = (const void *)a2;
        }
        else {
          char v11 = *(const void **)a2;
        }
        memmove(v10, v11, v9);
      }
      strcpy((char *)v10 + v9, ":EPExposureIndex");
      uint64_t v22 = &__p;
      char v12 = (char *)sub_1DDA52108(a1 + 24, &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v22);
      sub_1DDA17E28(v12 + 56, (char *)&__src, (uint64_t)&v20, 1uLL);
      if (v18 < 0) {
        operator delete(__p);
      }
      int v8 = v20;
    }
    if (v8)
    {
      uint64_t v21 = v8;
      operator delete(v8);
    }
  }
}

void sub_1DDAAE2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAAE364(uint64_t a1, const void **a2, unsigned __int16 *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  nullsub_6();
  unsigned int v6 = *a3;
  if (v6 > 0x845)
  {
    if (v6 == 2118)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0
        && a3[1] == 3
        && *((_DWORD *)a3 + 1) == 1)
      {
        LODWORD(__p) = 0;
        sub_1DDA1B3CC(v22, (unsigned int *)&__p);
        unsigned int v12 = sub_1DDA3F234((uint64_t)a3, (unsigned int *)v22);
        if (v12)
        {
          if (v12 == 6000 || (double v13 = 0.0, v12 == 5000))
          {
            unsigned int v12 = 3800;
            double v13 = 21.0;
          }
          sub_1DDB1112C((double *)(a1 + 1184), (double)v12, v13);
        }
      }
    }
    else if (v6 == 2125)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0
        && a3[1] == 5
        && *((_DWORD *)a3 + 1) == 3)
      {
        sub_1DDA27D28(a1, &__p);
        sub_1DDA3E944((uint64_t)a3, (uint64_t *)&__p, v22);
        if (v20) {
          sub_1DDA18310(v20);
        }
        if (*((char *)a2 + 23) >= 0) {
          size_t v14 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          size_t v14 = (size_t)a2[1];
        }
        p_p = &__p;
        sub_1DDA49688((uint64_t)&__p, v14 + 11);
        if (v21 < 0) {
          p_p = __p;
        }
        if (v14)
        {
          if (*((char *)a2 + 23) >= 0) {
            int v16 = a2;
          }
          else {
            int v16 = *a2;
          }
          memmove(p_p, v16, v14);
        }
        strcpy((char *)p_p + v14, ":WhitePoint");
        double v17 = *((double *)v22[0] + 1);
        __src[0] = v17 / *(double *)v22[0];
        __src[1] = 1.0;
        __src[2] = v17 / *((double *)v22[0] + 2);
        int v24 = &__p;
        char v18 = sub_1DDA4B960((uint64_t **)(a1 + 144), &__p, (uint64_t)&unk_1DDBFB044, (long long **)&v24);
        sub_1DDA25BB0((char *)v18 + 56, (char *)__src, (uint64_t)&v26, 3uLL);
        if (v21 < 0) {
          operator delete(__p);
        }
        if (v22[0])
        {
          v22[1] = v22[0];
          operator delete(v22[0]);
        }
      }
    }
    else if (v6 == 2317 && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0 && a3[1] == 3)
    {
      sub_1DDA27D28(a1, &__p);
      sub_1DDA3ED68((uint64_t)a3, (uint64_t *)&__p, (uint64_t)v22);
      int v8 = *(void **)(a1 + 1200);
      if (v8)
      {
        *(void *)(a1 + 1208) = v8;
        operator delete(v8);
        *(void *)(a1 + 1200) = 0;
        *(void *)(a1 + 1208) = 0;
        *(void *)(a1 + 1216) = 0;
      }
      *(_OWORD *)(a1 + 1200) = *(_OWORD *)v22;
      *(void *)(a1 + 1216) = v23;
      v22[1] = 0;
      uint64_t v23 = 0;
      v22[0] = 0;
      if (v20) {
        sub_1DDA18310(v20);
      }
    }
  }
  else
  {
    switch(*a3)
    {
      case 0x3EBu:
        if (a3[1] == 3 && *((_DWORD *)a3 + 1) == 1)
        {
          LODWORD(__p) = 0;
          sub_1DDA1B3CC(v22, (unsigned int *)&__p);
          *(_WORD *)(a1 + 1226) = sub_1DDA3F234((uint64_t)a3, (unsigned int *)v22);
        }
        break;
      case 0x3ECu:
        if (a3[1] == 3 && *((_DWORD *)a3 + 1) == 1)
        {
          LODWORD(__p) = 0;
          sub_1DDA1B3CC(v22, (unsigned int *)&__p);
          *(_WORD *)(a1 + 1224) = sub_1DDA3F234((uint64_t)a3, (unsigned int *)v22);
        }
        break;
      case 0x3EDu:
        if (a3[1] == 3 && *((_DWORD *)a3 + 1) == 1)
        {
          LODWORD(__p) = 0;
          sub_1DDA1B3CC(v22, (unsigned int *)&__p);
          *(_WORD *)(a1 + 1228) = sub_1DDA3F234((uint64_t)a3, (unsigned int *)v22);
        }
        break;
      case 0x3EEu:
        if (a3[1] == 3 && *((_DWORD *)a3 + 1) == 1)
        {
          LODWORD(__p) = 0;
          sub_1DDA1B3CC(v22, (unsigned int *)&__p);
          *(_WORD *)(a1 + 1230) = sub_1DDA3F234((uint64_t)a3, (unsigned int *)v22);
        }
        break;
      default:
        return;
    }
  }
}

void sub_1DDAAE798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAAE7FC(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 536))(a1);
  if (v8 < 2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 384))(&v18, a1);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424))(a1);
    sub_1DDAAF678(&v18, (unint64_t *)&v17, a2, a3, __p);
    if (v19) {
      sub_1DDA18310(v19);
    }
    goto LABEL_17;
  }
  if (v8 == 7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 384))(&v18, a1);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424))(a1);
    sub_1DDAAF824(&v18, (unint64_t *)&v17, a2, a3, __p);
    if (v19) {
      sub_1DDA18310(v19);
    }
    goto LABEL_17;
  }
  if (v8 == 65000)
  {
    int v16 = 0;
    sub_1DDA1A880(__p, "IFD0:SUBIFD1");
    BOOL v9 = sub_1DDA3FEDC(a1, __p, &v16);
    BOOL v10 = v16 == 32803 && v9;
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if (v10)
      {
LABEL_9:
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 384))(&v18, a1);
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424))(a1);
        sub_1DDAAF9E0(&v18, (unint64_t *)&v17, a2, a3, __p);
        if (v19) {
          sub_1DDA18310(v19);
        }
LABEL_17:
        char v11 = __p[0];
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
        sub_1DDA18500(&v17, (unint64_t *)&v18);
        (*(void (**)(void *, uint64_t *))(*(void *)v11 + 32))(v11, &v17);
        unsigned int v12 = __p[0];
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
        sub_1DDAA72C4((uint64_t)v12, v13);
        sub_1DDAA6AD4((uint64_t)__p[0], a1 + 1200);
        *(_OWORD *)a4 = *(_OWORD *)__p;
        return;
      }
    }
    else if (v10)
    {
      goto LABEL_9;
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
}

void sub_1DDAAECDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1DDA18310(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAAED38(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1DDA1A880(&__p, "dcr");
  unint64_t v4 = a2[2];
  unint64_t v5 = a2[1];
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    uint64_t v45 = a2 + 2;
    if (v10) {
      char v11 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v10);
    }
    else {
      char v11 = 0;
    }
    unsigned int v12 = &v11[24 * v7];
    uint64_t v41 = v11;
    int v42 = v12;
    int v44 = &v11[24 * v10];
    long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v12 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unsigned int v12 = v13;
    memset(&__p, 0, sizeof(__p));
    int8x16_t v43 = v12 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v14 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v14;
    if (v15 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1DDA1A880(&__p, "kodak");
  unint64_t v17 = a2[1];
  unint64_t v16 = a2[2];
  if (v17 >= v16)
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    uint64_t v45 = a2 + 2;
    if (v22) {
      uint64_t v23 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v22);
    }
    else {
      uint64_t v23 = 0;
    }
    int v24 = &v23[24 * v19];
    uint64_t v41 = v23;
    int v42 = v24;
    int v44 = &v23[24 * v22];
    long long v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v24 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)int v24 = v25;
    memset(&__p, 0, sizeof(__p));
    int8x16_t v43 = v24 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v26 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v26;
    if (v27 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v17 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1DDA29B20(a1, &__p);
  unint64_t v29 = a2[1];
  unint64_t v28 = a2[2];
  if (v29 >= v28)
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32) {
      unint64_t v32 = 2 * v33;
    }
    if (v33 >= 0x555555555555555) {
      unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v34 = v32;
    }
    uint64_t v45 = a2 + 2;
    if (v34) {
      uint64_t v35 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v34);
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = &v35[24 * v31];
    uint64_t v41 = v35;
    int v42 = v36;
    int v44 = &v35[24 * v34];
    long long v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v36 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v36 = v37;
    memset(&__p, 0, sizeof(__p));
    int8x16_t v43 = v36 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v38 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v38;
    if (v39 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v29 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1DDAAF090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1DDA2A044((void ***)&__p);
  _Unwind_Resume(a1);
}

id sub_1DDAAF0E8(uint64_t a1)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = sub_1DDA40140(a1);
  unint64_t v7 = objc_msgSend_mutableCopy(v2, v3, v4, v5, v6);

  int v24 = &unk_1F39AEBD0;
  v22[0] = @"Name";
  v22[1] = @"Type";
  v23[0] = @"KodakSubIFD";
  v23[1] = &unk_1F39AEBE8;
  v22[2] = @"Namespace";
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1DDAAF2D0;
  v21[3] = &unk_1E6D04E50;
  v21[4] = a1;
  unint64_t v8 = (void *)MEMORY[0x1E01C46E0](v21);
  unsigned int v23[2] = v8;
  unint64_t v10 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v9, (uint64_t)v23, (uint64_t)v22, 3);
  v25[0] = v10;
  unsigned int v12 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v11, (uint64_t)v25, (uint64_t)&v24, 1);
  objc_msgSend_addEntriesFromDictionary_(v7, v13, (uint64_t)v12, v14, v15);

  unint64_t v19 = objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1C9E8], v16, (uint64_t)v7, v17, v18);

  return v19;
}

void sub_1DDAAF284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAAF2D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 784))();
}

id sub_1DDAAF300(uint64_t a1, const char *a2)
{
  v5[8] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1F39AEC00;
  v4[1] = &unk_1F39AEC18;
  v5[0] = &unk_1F39B45A0;
  v5[1] = &unk_1F39B45C8;
  v4[2] = &unk_1F39AEC30;
  v4[3] = &unk_1F39AEC48;
  v5[2] = &unk_1F39B45F0;
  v5[3] = &unk_1F39B4618;
  v4[4] = &unk_1F39AEC60;
  v4[5] = &unk_1F39AEC78;
  v5[4] = &unk_1F39B4640;
  v5[5] = &unk_1F39B4668;
  v4[6] = &unk_1F39AEC90;
  v4[7] = &unk_1F39AECA8;
  v5[6] = &unk_1F39B4690;
  v5[7] = &unk_1F39B46B8;
  unint64_t v2 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v5, (uint64_t)v4, 8);

  return v2;
}

void sub_1DDAAF418(void *a1)
{
  sub_1DDAAF450(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAAF450(void *a1)
{
  *a1 = &unk_1F3962908;
  unint64_t v2 = (void *)a1[150];
  if (v2)
  {
    a1[151] = v2;
    operator delete(v2);
  }

  return sub_1DDA49A44((uint64_t)a1);
}

void sub_1DDAAF4B0(void *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x4E8uLL);
  sub_1DDAAF544((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAAF530(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAAF544(uint64_t a1, void *a2, char *a3, void **a4, void **a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3962C48;
  sub_1DDA3F2B0(a1 + 24, a2, *a3, *a4, *a5);
  *(void *)(a1 + 24) = &unk_1F3962908;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  return a1;
}

void sub_1DDAAF5C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAAF5DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAAF5FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962C48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAAF650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1DDAAF678(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0xD8uLL);
  sub_1DDAAF70C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAAF6F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAAF70C(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3962C98;
  sub_1DDAA58A8((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1F39792F0;
  return a1;
}

void sub_1DDAAF774(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAAF788(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAAF7A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962C98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAAF7FC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAAF824(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0xF8uLL);
  sub_1DDAAF8B8((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAAF8A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAAF8B8(uint64_t a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3962CE8;
  sub_1DDAA58A8(a1 + 24, a2, *a3, a4, a5);
  *(void *)(a1 + 24) = &unk_1F39627F0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 240) = -1;
  return a1;
}

void sub_1DDAAF930(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAAF944(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAAF964(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAAF9B8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAAF9E0(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0xD8uLL);
  sub_1DDAAFA74(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAAFA60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAAFA74(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3962D38;
  sub_1DDAA58A8((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1F3979200;
  return a1;
}

void sub_1DDAAFADC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAAFAF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAAFB10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3962D38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAAFB64(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAAFB8C(_DWORD *a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "COlympusE300Unpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1DDAAFF08;
  v30[3] = &unk_1E6D04A58;
  v30[4] = a1;
  uint64_t v4 = (void (**)(void))MEMORY[0x1E01C46E0](v30);
  unsigned int v6 = a1[11];
  int v5 = a1[12];
  int v7 = (2 * ((3435973837u * (unint64_t)(v6 + 9)) >> 32)) & 0xFFFFFFF0;
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 152))(a1) < v7 * v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v29 = a1;
  uint64_t v8 = sub_1DDAA5B9C((uint64_t)a1);
  if (v5)
  {
    unint64_t v9 = (_WORD *)v8;
    for (int i = 0; i != v5; ++i)
    {
      char v11 = (unsigned __int8 *)&v9[v6] - v7;
      (*(void (**)(void, unsigned __int8 *, void))(**((void **)v29 + 3) + 32))(*((void *)v29 + 3), v11, v7);
      if (v6 == v6 % 0xA)
      {
        unsigned int v12 = 0;
      }
      else
      {
        unsigned int v12 = 0;
        do
        {
          unsigned int v13 = v11[1];
          __int16 v14 = *v11 | ((v13 & 0xF) << 8);
          LOWORD(v13) = (v13 >> 4) | (16 * v11[2]);
          unsigned int v15 = v11[4];
          __int16 v16 = v11[3] | ((v15 & 0xF) << 8);
          LOWORD(v15) = (v15 >> 4) | (16 * v11[5]);
          *unint64_t v9 = v14;
          v9[1] = v13;
          unsigned int v17 = v11[7];
          __int16 v18 = v11[6] | ((v17 & 0xF) << 8);
          LOWORD(v17) = (v17 >> 4) | (16 * v11[8]);
          void v9[2] = v16;
          v9[3] = v15;
          unsigned int v19 = v11[10];
          __int16 v20 = v11[9] | ((v19 & 0xF) << 8);
          int v21 = (v19 >> 4) | (16 * v11[11]);
          v9[4] = v18;
          v9[5] = v17;
          unsigned int v22 = v11[13];
          __int16 v23 = v11[12] | ((v22 & 0xF) << 8);
          int v24 = (v22 >> 4) | (16 * v11[14]);
          v9[6] = v20;
          v9[7] = v21;
          v9[8] = v23;
          v9[9] = v24;
          v11 += 16;
          v9 += 10;
          v12 += 10;
        }
        while (v12 < 10 * (v6 / 0xA));
      }
      while (v12 < v6)
      {
        unsigned int v25 = v11[1];
        __int16 v26 = *v11 | ((v25 & 0xF) << 8);
        int v27 = (v25 >> 4) | (16 * v11[2]);
        *unint64_t v9 = v26;
        v9[1] = v27;
        v11 += 3;
        v9 += 2;
        v12 += 2;
      }
    }
  }
  v4[2](v4);
}

void sub_1DDAAFEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAAFF08(uint64_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "COlympusE300Unpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDAAFF94(void *a1)
{
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDAAFFCC(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CSonyA100Unpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3221225472;
  v39[2] = sub_1DDAB04BC;
  v39[3] = &unk_1E6D04A58;
  v39[4] = v1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v39);
  if (!sub_1DDAAD46C(byte_1DDBFAE72, (uint64_t)v44))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = sub_1DDAA5B9C(v1);
  unint64_t v31 = (void (**)(void))v4;
  uint64_t v35 = *(unsigned int *)(v1 + 44);
  unsigned int v36 = *(_DWORD *)(v1 + 48);
  int v6 = (*(uint64_t (**)(void))(**(void **)(v1 + 24) + 16))(*(void *)(v1 + 24));
  unsigned int v38 = (*(uint64_t (**)(void))(**(void **)(v1 + 24) + 48))(*(void *)(v1 + 24));
  int v7 = sub_1DDA456E8(&v38);
  bzero(buf, 0x2008uLL);
  unsigned int v8 = v35;
  unsigned int v9 = v36;
  if (v35 != -1)
  {
    int v10 = 0;
    uint64_t v11 = 0;
    unsigned int v12 = (uint8_t *)&v43;
    unsigned int v13 = (uint8_t *)&v42;
    unint64_t v14 = v36 + 8;
    uint64_t v34 = v1;
    unint64_t v15 = (v6 - v7);
    uint64_t v16 = 2 * (2 * v35);
    int v17 = 32;
    unsigned int v18 = v35;
    uint64_t v32 = v5 + 2 * v35;
    do
    {
      unint64_t v19 = 0;
      unsigned int v20 = v18;
      char v21 = 1;
      do
      {
        char v33 = v21;
        if (v19 < v14)
        {
          unsigned int v22 = (_WORD *)(v32 + 2 * v35 * v19);
          do
          {
            if (v12 > v13)
            {
              if (v15 >= 0x2000)
              {
                uint64_t v23 = 0x2000;
              }
              else
              {
                unsigned int v13 = &buf[v15 + 4];
                uint64_t v23 = v15;
              }
              *(_DWORD *)buf = v42;
              if (v23)
              {
                int v37 = v10;
                uint64_t v24 = v11;
                unsigned int v25 = v12;
                (*(void (**)(void, int *, uint64_t))(**(void **)(v34 + 24) + 32))(*(void *)(v34 + 24), &v41, v23);
                unsigned int v12 = v25;
                uint64_t v11 = v24;
                unsigned int v9 = v36;
                int v10 = v37;
                uint64_t v16 = 2 * (2 * v35);
                unsigned int v8 = v35;
              }
              v12 -= 0x2000;
              v15 -= v23;
              *(_DWORD *)&buf[v23 + 4] = 0;
            }
            if (v17 >= 16)
            {
              uint64_t v11 = (v11 << 16) | (*v12 << 8) | v12[1];
              v12 += 2;
              v17 -= 16;
            }
            unsigned int v26 = v11 << v17;
            unsigned int v27 = (unsigned __int16)v44[v11 << v17 >> 23];
            v17 += (v27 >> 10) & 0x1F;
            if (v27 > 0x8000)
            {
              unsigned int v27 = (char)v27;
            }
            else
            {
              if ((v27 & 0x8000) != 0)
              {
                unsigned int v27 = (unsigned __int16)v44[HIWORD(v26) & 0x1FF | 0x200];
                v17 += (v27 >> 10) & 0x1F;
              }
              int v28 = v27 & 0x1F;
              if ((v27 & 0x1F) == 0)
              {
                if (v20 < v8 && v19 < v9)
                {
                  __int16 v29 = ((_WORD)v27 << 8) & 0x8000;
                  if (v12 >= v13) {
                    __int16 v29 = -1;
                  }
                  *unsigned int v22 = v29 + v10;
                }
                goto LABEL_37;
              }
              if (v17 >= 16)
              {
                uint64_t v11 = (v11 << 16) | (*v12 << 8) | v12[1];
                v12 += 2;
                v17 -= 16;
              }
              unsigned int v27 = (v11 << v17 >> -(char)v28) - (((v11 << v17 >> 31) - 1) >> -(char)v28);
              v17 += v28;
            }
            v10 += v27;
            if (v20 < v8 && v19 < v9) {
              *unsigned int v22 = v10;
            }
            LODWORD(v19) = v19 + 2;
            unsigned int v22 = (_WORD *)((char *)v22 + v16);
          }
          while (v19 < v14);
        }
        char v21 = 0;
        unint64_t v19 = 1;
      }
      while ((v33 & 1) != 0);
      unsigned int v18 = v20 - 1;
      v32 -= 2;
    }
    while (v20);
  }
LABEL_37:
  v31[2](v31);
}

void sub_1DDAB0450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB04BC(uint64_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSonyA100Unpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDAB0544(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  v205[256] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    buf[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CNikonCompressedUnpacker", (const char *)&unk_1DDC3ACB6, (uint8_t *)buf, 2u);
  }

  v202[0] = MEMORY[0x1E4F143A8];
  v202[1] = 3221225472;
  v202[2] = sub_1DDAB17F8;
  v202[3] = &unk_1E6D04A58;
  v202[4] = v1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v202);
  uint64_t v5 = sub_1DDAA72BC(v1);
  uint64_t v7 = *(void *)(v1 + 24);
  int v6 = *(std::__shared_weak_count **)(v1 + 32);
  uint64_t v199 = v7;
  uint64_t v200 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v201 = 0;
  long long v195 = (void (**)(void))v4;
  if (v7)
  {
    uint64_t v201 = sub_1DDA19C94(v7);
    sub_1DDA19C9C(v7, v5);
  }
  int v8 = *(_DWORD *)(v1 + 48);
  int v193 = *(_DWORD *)(v1 + 44);
  uint64_t v191 = sub_1DDAA5B9C(v1);
  int v9 = *(_DWORD *)(v1 + 40);
  unint64_t v10 = v9 + (unint64_t)(*(unsigned int (**)(uint64_t))(*(void *)v1 + 152))(v1);
  BOOL v11 = v10 == (uint64_t)(v10 << 31) >> 31 && (v10 & 0x1FFFFFFFFLL) == ((int)v10 & 0x1FFFFFFFFLL);
  if (!v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v196 = v10 - v9;
  if ((int)v10 <= v9)
  {
    v167 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v167, "RawCameraException");
    goto LABEL_177;
  }
  uint64_t v12 = *(void *)(v1 + 24);
  uint64_t v13 = *(void *)(v1 + 192);
  int v198 = v13;
  if (v13 != (int)v13)
  {
    signed int v168 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v168, "RawCameraException");
    __cxa_throw(v168, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v186 = v10;
  int v190 = v9;
  (*(void (**)(uint64_t, int *, void))(*(void *)v12 + 40))(v12, &v198, 0);
  int v14 = sub_1DDA19DA0(*(void *)(v1 + 24));
  int v15 = sub_1DDA19DA0(*(void *)(v1 + 24));
  int v16 = v15;
  if (v14 == 73 || v15 == 88)
  {
    uint64_t v17 = *(void *)(v1 + 24);
    int v198 = 2110;
    (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v17 + 40))(v17, &v198, 1);
  }
  unsigned int v18 = 2 * (v14 == 70);
  if (*(_DWORD *)(v1 + 200) == 14) {
    uint64_t v19 = v18 + 3;
  }
  else {
    uint64_t v19 = v18;
  }
  int v185 = sub_1DDA19E68(*(void *)(v1 + 24));
  int v184 = sub_1DDA19E68(*(void *)(v1 + 24));
  int v183 = sub_1DDA19E68(*(void *)(v1 + 24));
  int v182 = sub_1DDA19E68(*(void *)(v1 + 24));
  unsigned int v20 = sub_1DDA19E68(*(void *)(v1 + 24));
  unsigned int v21 = v20;
  unsigned int v22 = *(_DWORD *)(v1 + 200);
  unsigned int v23 = (1 << v22) & 0x7FFF;
  if (v20 < 2)
  {
    uint64_t v25 = 0;
    if (v14 != 68) {
      goto LABEL_46;
    }
  }
  else
  {
    unsigned int v24 = v23 / (v20 - 1);
    if (v16 == 64) {
      uint64_t v25 = v24 >> 2;
    }
    else {
      uint64_t v25 = v24;
    }
    if (v14 != 68)
    {
LABEL_46:
      if (v14 == 70 || v20 >= 0x4002)
      {
        uint64_t v44 = 0;
        int16x8_t v45 = (int16x8_t)xmmword_1DDBF8D50;
        v46.i64[0] = 0x8000800080008;
        v46.i64[1] = 0x8000800080008;
        v47.i64[0] = 0x10001000100010;
        v47.i64[1] = 0x10001000100010;
        do
        {
          uint64_t v48 = (uint8_t *)&buf[v44];
          *(int16x8_t *)uint64_t v48 = v45;
          *((int16x8_t *)v48 + 1) = vaddq_s16(v45, v46);
          int16x8_t v45 = vaddq_s16(v45, v47);
          v44 += 16;
        }
        while (v44 != 0x4000);
        goto LABEL_76;
      }
      int v36 = v8;
      if (v20)
      {
        uint64_t v37 = v20;
        unsigned int v38 = (uint8_t *)buf;
        do
        {
          *(_WORD *)unsigned int v38 = sub_1DDA19E68(*(void *)(v1 + 24));
          v38 += 2;
          --v37;
        }
        while (v37);
      }
      if ((int)v21 <= 1) {
        int v39 = 1;
      }
      else {
        int v39 = v21;
      }
      uint64_t v40 = 0x10000 - ((0x10000 - v21) >> 1);
      int v8 = v36;
      if (v40 <= v21) {
        goto LABEL_69;
      }
      unsigned int v41 = buf[v39 - 1];
      unint64_t v42 = v40 - v21;
      if (v42 >= 0x10)
      {
        unint64_t v43 = (v42 & 0xFFFFFFFFFFFFFFF0) + v21;
        int16x8_t v49 = vdupq_n_s16(v41);
        unint64_t v50 = (uint8_t *)&buf[v21 + 8];
        unint64_t v51 = v42 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          *((int16x8_t *)v50 - 1) = v49;
          *(int16x8_t *)unint64_t v50 = v49;
          v50 += 32;
          v51 -= 16;
        }
        while (v51);
        if (v42 == (v42 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_68:
          BOOL v11 = v21 == 0xFFFF;
          unsigned int v21 = 0x10000 - ((0x10000 - v21) >> 1);
          if (v11) {
            goto LABEL_76;
          }
LABEL_69:
          unsigned __int16 v55 = buf[0];
          unint64_t v56 = 0x10000 - v21;
          if (v56 < 0x10)
          {
            unint64_t v57 = v21;
LABEL_74:
            uint64_t v61 = v57;
            do
              buf[v61++] = v55;
            while (v61 != 0x10000);
            goto LABEL_76;
          }
          unint64_t v57 = (v56 & 0xFFFFFFFFFFFFFFF0) + v21;
          int16x8_t v58 = vdupq_n_s16(buf[0]);
          int v59 = (uint8_t *)&buf[v21 + 8];
          unint64_t v60 = v56 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            *((int16x8_t *)v59 - 1) = v58;
            *(int16x8_t *)int v59 = v58;
            v59 += 32;
            v60 -= 16;
          }
          while (v60);
          if (v56 != (v56 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_74;
          }
LABEL_76:
          if (sub_1DDAACF3C(&byte_1DDBFAEA8[32 * v19], (uint64_t)v204))
          {
            uint64_t v35 = v204;
            int v34 = v8;
            goto LABEL_78;
          }
          goto LABEL_176;
        }
      }
      else
      {
        unint64_t v43 = v21;
      }
      unint64_t v52 = (uint8_t *)&buf[v43];
      uint64_t v53 = v43 - v40;
      do
      {
        *(_WORD *)unint64_t v52 = v41;
        v52 += 2;
      }
      while (!__CFADD__(v53++, 1));
      goto LABEL_68;
    }
  }
  BOOL v26 = v16 == 64 || v16 == 32;
  if (!v26 || !v25) {
    goto LABEL_46;
  }
  if (v20)
  {
    unsigned int v27 = (uint8_t *)buf;
    uint64_t v28 = v20;
    do
    {
      *(_WORD *)unsigned int v27 = sub_1DDA19E68(*(void *)(v1 + 24));
      v27 += 2 * v25;
      --v28;
    }
    while (v28);
  }
  if (v22 <= 0xE)
  {
    uint64_t v29 = 0;
    if (v23 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v23;
    }
    do
    {
      buf[v29] = (int)((v25 - (int)v29 % (int)v25) * buf[v29 - (int)v29 % (int)v25]
                     + (int)v29 % (int)v25 * buf[(int)v25 + (int)v29 - (int)v29 % (int)v25])
               / (int)v25;
      ++v29;
    }
    while (v30 != v29);
  }
  uint64_t v31 = *(void *)(v1 + 24);
  uint64_t v32 = *(void *)(v1 + 192);
  int v198 = v32 + 562;
  if ((unint64_t)(v32 - 2147483086) <= 0xFFFFFFFEFFFFFFFFLL)
  {
    int v170 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v170, "RawCameraException");
    __cxa_throw(v170, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(uint64_t, int *, void))(*(void *)v31 + 40))(v31, &v198, 0);
  int v33 = sub_1DDA19E68(*(void *)(v1 + 24));
  int v34 = v33;
  if (!v33 || v8 <= v33) {
    goto LABEL_76;
  }
  if (!sub_1DDAACF3C(&byte_1DDBFAEA8[32 * v19], (uint64_t)v204)
    || (uint64_t v35 = v205, !sub_1DDAACF3C(&byte_1DDBFAEA8[32 * (v19 + 1)], (uint64_t)v205)))
  {
LABEL_176:
    v167 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v167, "RawCameraException");
LABEL_177:
    __cxa_throw(v167, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_78:
  int v180 = v34;
  int v181 = v8;
  int v179 = v35;
  BOOL v177 = v204 == v35;
  signed int v178 = v8 * v193;
  int v189 = v196 / ((v8 * v193 + 10239) / 10240);
  int v62 = 4 * v189;
  if (4 * v189 <= v193) {
    int v62 = v193;
  }
  int v188 = v62;
  signed int v176 = NSPageSize();
  uint64_t v197 = v1;
  int v175 = sub_1DDAA6D9C(v1);
  if (v196 <= 0)
  {
    signed int v169 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v169, "RawCameraException");
    __cxa_throw(v169, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v67 = objc_msgSend_processInfo(MEMORY[0x1E4F28F80], v63, v64, v65, v66);
  int active = objc_msgSend_activeProcessorCount(v67, v68, v69, v70, v71);

  if (active >= 31) {
    int v73 = 31;
  }
  else {
    int v73 = active;
  }
  if (active >= 29) {
    int v74 = 29;
  }
  else {
    int v74 = active;
  }
  unsigned int v75 = v74 + 2;
  if (v73 == 1) {
    uint64_t v76 = 2;
  }
  else {
    uint64_t v76 = v75;
  }
  int v77 = NSPageSize();
  int v78 = v77;
  uint64_t v79 = -(uint64_t)v77;
  unint64_t v80 = (2 * v77 + 2 * v188 - 1) & (unint64_t)v79;
  uint64_t v172 = 192 * (int)v76;
  int v81 = (v73 << 6) + v172 + 1280;
  int v82 = (v81 + v77) & v79;
  if (v77 <= v189) {
    int v83 = v189;
  }
  else {
    int v83 = v77;
  }
  unsigned int v84 = __clz(4 * v83 - 1);
  int v173 = -v84;
  unsigned int v174 = 0xC0000u >> -(char)v84;
  unsigned int v85 = v174 << -(char)v84;
  int v86 = v189 + 2;
  if (v189 >= -1) {
    int v86 = v189 + 1;
  }
  int v87 = (v77 + (v86 >> 1) + 3) & v79;
  signed int v187 = v85;
  int v88 = v82 + v77 + 2 * v87 + v85 + v80 * v76;
  uint64_t v89 = sub_1DDBF2084(v88);
  int v90 = v89;
  if (!v89)
  {
    uint64_t v171 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v171, "RawCameraException");
    __cxa_throw(v171, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v91 = v87;
  unsigned int v92 = (void *)(((unint64_t)v89 + v78 - 1) & -(uint64_t)v78);
  uint64_t v93 = (uint64_t)&v92[8 * v73 + 160];
  uint64_t v94 = v93 + v172 + v82 - v81;
  uint64_t v95 = v94 + (int)v80 * (uint64_t)(int)v76 + v91;
  bzero(v92, v81);
  v92[2] = v90;
  *((_DWORD *)v92 + 6) = v88;
  int v96 = v73;
  if ((v73 & 0x80000000) == 0)
  {
    uint64_t v97 = 0;
    uint64_t v98 = 152;
    do
    {
      uint64_t v99 = &v92[v98];
      v92[v97 + 4] = &v92[v98];
      *(_DWORD *)uint64_t v99 = v97;
      v99[1] = v92;
      ++v97;
      v98 += 8;
    }
    while (v73 + 1 != v97);
  }
  if ((int)v76 >= 1)
  {
    uint64_t v100 = 0;
    int v101 = v92 + 36;
    do
    {
      v101[v100] = v93;
      *(void *)(v93 + 64) = v94;
      v94 += v80;
      *(_DWORD *)(v101[v100] + 4) = v100;
      ++v100;
      v93 += 192;
    }
    while (v76 != v100);
  }
  *((_DWORD *)v92 + 170) = 1 << v173;
  *((_DWORD *)v92 + 171) = v174;
  *((_DWORD *)v92 + 172) = v187;
  v92[87] = v95;
  v92[88] = v95 + v187;
  int v102 = (_DWORD *)v92[4];
  *unsigned int v92 = v191;
  v92[1] = v191 + sub_1DDAA6D9C(v197);
  *((_DWORD *)v92 + 134) = v73;
  *((_DWORD *)v92 + 135) = v76;
  *((_DWORD *)v92 + 136) = v188;
  *((_DWORD *)v92 + 137) = v189;
  *((_DWORD *)v92 + 138) = v178;
  atomic_store(v178, (unsigned int *)v92 + 139);
  *((unsigned char *)v92 + 560) = 0;
  atomic_store(0, (unsigned __int8 *)v92 + 561);
  *((unsigned char *)v92 + 562) = v177;
  v92[71] = v204;
  v92[72] = v179;
  *((_DWORD *)v92 + 148) = v181;
  *((_DWORD *)v92 + 149) = v193;
  v92[73] = buf;
  *((_DWORD *)v92 + 150) = v180 * v193;
  uint64_t v103 = sub_1DDAB1880;
  BOOL v104 = sub_1DDAB1D10;
  if (v204 == v179)
  {
    int v107 = 0x7FFFFFFF;
  }
  else
  {
    int v105 = (int)((double)v178 * (double)v189 / (double)v196 + 0.5);
    if (v105 >= 0) {
      int v106 = (int)((double)v178 * (double)v189 / (double)v196 + 0.5);
    }
    else {
      int v106 = v105 + 1;
    }
    int v107 = (v180 * v193 + (v106 >> 1)) / v105 + 1;
    uint64_t v103 = sub_1DDAB1AC4;
    BOOL v104 = sub_1DDAB2200;
  }
  *((_DWORD *)v92 + 151) = v107;
  *int v102 = 0;
  v92[76] = v103;
  v92[77] = v104;
  v92[78] = v190;
  v92[79] = v186;
  v92[80] = v190;
  v92[81] = v190;
  unint64_t v108 = v190 & (unint64_t)-(uint64_t)*((int *)v92 + 170);
  v92[82] = v108;
  v92[83] = v108;
  v92[84] = *((int *)v92 + 172) + v108;
  atomic_store(*((_DWORD *)v92 + 171), (unsigned int *)v92 + 178);
  dispatch_semaphore_t v109 = dispatch_semaphore_create(0);
  int v110 = (void *)v92[90];
  v92[90] = v109;

  atomic_store(0, (unsigned int *)v92 + 182);
  dispatch_semaphore_t v111 = dispatch_semaphore_create(0);
  v112 = (void *)v92[92];
  v92[92] = v111;

  v92[93] = 2097153;
  uint64_t v113 = -(uint64_t)v176;
  v92[94] = v92[87] + v190 - v92[82];
  uint64_t v114 = (v176 + v191) & v113;
  *(_OWORD *)(v92 + 95) = *(_OWORD *)(v92 + 93);
  *((_DWORD *)v92 + 194) = 0;
  unsigned int v115 = __clz(__rbit32(v176));
  v92[98] = 0;
  *((_DWORD *)v92 + 198) = 0;
  *((_DWORD *)v92 + 204) = 0;
  v92[100] = 0;
  v92[101] = 0;
  v92[103] = v191;
  *((_DWORD *)v92 + 208) = 0;
  *((_DWORD *)v92 + 209) = v185;
  *((_DWORD *)v92 + 210) = v184;
  *((_DWORD *)v92 + 211) = v183;
  *((_DWORD *)v92 + 212) = v182;
  atomic_store((int)((v191 - v114 + v175) & v113) >> v115, (unsigned int *)v92 + 290);
  *((_DWORD *)v92 + 291) = v115;
  v92[146] = v114;
  atomic_store(0, (unsigned int *)v92 + 286);
  atomic_store(0, (unsigned int *)v92 + 287);
  atomic_store(0, (unsigned int *)v92 + 288);
  atomic_store(0, (unsigned int *)v92 + 289);
  atomic_store(0, (unsigned int *)v92 + 294);
  atomic_store(0, (unsigned int *)v92 + 295);
  dispatch_semaphore_t v116 = dispatch_semaphore_create(0);
  v117 = (void *)v92[148];
  v92[148] = v116;

  if ((int)v76 > 0)
  {
    v118 = v92 + 36;
    do
    {
      atomic_fetch_or((atomic_uint *volatile)v92 + 294, 1 << *(_DWORD *)(*v118 + 4));
      if ((atomic_fetch_add((atomic_uint *volatile)v92 + 295, 1u) & 0x80000000) != 0) {
        dispatch_semaphore_signal((dispatch_semaphore_t)v92[148]);
      }
      ++v118;
      --v76;
    }
    while (v76);
  }
  atomic_store(0, (unsigned int *)v92 + 298);
  dispatch_semaphore_t v119 = dispatch_semaphore_create(0);
  uint64_t v120 = (void *)v92[150];
  v92[150] = v119;

  v121 = dispatch_group_create();
  uint64_t v122 = dispatch_queue_create("Huffman Decode Block", MEMORY[0x1E4F14430]);
  if (v73 >= 1)
  {
    if (v73 == 1) {
      uint64_t v123 = (void (__cdecl *)(void *))sub_1DDAB3024;
    }
    else {
      uint64_t v123 = (void (__cdecl *)(void *))sub_1DDAB25A8;
    }
    uint64_t v124 = (void **)(v92 + 5);
    uint64_t v125 = (v96 + 1) - 1;
    do
    {
      uint64_t v126 = *v124++;
      dispatch_group_async_f(v121, v122, v126, v123);
      --v125;
    }
    while (v125);
  }
  uint64_t v127 = v92[82];
  uint64_t v128 = *((int *)v92 + 170);
  uint64_t v129 = v92[87];
  unint64_t v194 = v92[88];
  uint64_t v130 = *((int *)v92 + 172);
  uint64_t v131 = *(void *)(v197 + 24);
  int v198 = v190;
  (*(void (**)(uint64_t, int *, void))(*(void *)v131 + 40))(v131, &v198, 0);
  uint64_t v132 = v186 - v127;
  if (v186 > v127)
  {
    char v133 = __clz(__rbit32(v128));
    uint64_t v192 = v128 - 1;
    int v134 = atomic_load((unsigned int *)v92 + 178);
    if (v134 < 1 || (unsigned int v135 = atomic_load((unsigned int *)v92 + 182), (v135 & 0x80000000) != 0))
    {
      LODWORD(v136) = 1;
    }
    else
    {
      uint64_t v136 = (uint64_t)(v194 - v129) >> v133;
      int v137 = atomic_load((unsigned int *)v92 + 178);
      if (v137 < (int)v136) {
        LODWORD(v136) = v137;
      }
    }
    uint64_t v138 = (int)(v136 << v133);
    signed int v139 = v132 >= v138 ? v136 : (unint64_t)(v192 + v132) >> v133;
    uint64_t v140 = v132 >= v138 ? (int)(v136 << v133) : v186 - v127;
    unsigned __int8 v141 = atomic_load((unsigned __int8 *)v92 + 561);
    if ((v141 & 1) == 0)
    {
      if ((int)atomic_fetch_add((atomic_uint *volatile)v92 + 178, -v139) < v139) {
        dispatch_semaphore_wait((dispatch_semaphore_t)v92[90], 0xFFFFFFFFFFFFFFFFLL);
      }
      unsigned __int8 v142 = atomic_load((unsigned __int8 *)v92 + 561);
      if ((v142 & 1) == 0)
      {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v197 + 24) + 32))(*(void *)(v197 + 24), v129 + v190 - v127, v140 - (v190 - v127));
        uint64_t v143 = -v130;
        uint64_t v144 = v129 + v140;
        uint64_t v145 = -v130;
        if (v129 + v140 < v194) {
          uint64_t v143 = 0;
        }
        if (atomic_fetch_add((atomic_uint *volatile)v92 + 182, v139) == -1)
        {
          uint64_t v147 = v143;
          dispatch_semaphore_signal((dispatch_semaphore_t)v92[92]);
          uint64_t v143 = v147;
          uint64_t v146 = v140 + v127;
          if (v140 + v127 >= v186) {
            goto LABEL_165;
          }
        }
        else
        {
          uint64_t v146 = v140 + v127;
          if (v140 + v127 >= v186) {
            goto LABEL_165;
          }
        }
        uint64_t v148 = v145;
        uint64_t v149 = v144 + v143;
        do
        {
          int v150 = atomic_load((unsigned int *)v92 + 178);
          if (v150 < 1 || (unsigned int v151 = atomic_load((unsigned int *)v92 + 182), (v151 & 0x80000000) != 0))
          {
            LODWORD(v152) = 1;
          }
          else
          {
            uint64_t v152 = (uint64_t)(v194 - v149) >> v133;
            int v153 = atomic_load((unsigned int *)v92 + 178);
            if (v153 < (int)v152) {
              LODWORD(v152) = v153;
            }
          }
          uint64_t v154 = (int)(v152 << v133);
          if (v186 - v146 >= v154) {
            signed int v155 = v152;
          }
          else {
            signed int v155 = (unint64_t)(v192 + v186 - v146) >> v133;
          }
          if (v186 - v146 >= v154) {
            uint64_t v156 = (int)(v152 << v133);
          }
          else {
            uint64_t v156 = v186 - v146;
          }
          unsigned __int8 v157 = atomic_load((unsigned __int8 *)v92 + 561);
          if (v157) {
            break;
          }
          if ((int)atomic_fetch_add((atomic_uint *volatile)v92 + 178, -v155) < v155) {
            dispatch_semaphore_wait((dispatch_semaphore_t)v92[90], 0xFFFFFFFFFFFFFFFFLL);
          }
          unsigned __int8 v158 = atomic_load((unsigned __int8 *)v92 + 561);
          if (v158) {
            break;
          }
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v197 + 24) + 32))(*(void *)(v197 + 24), v149, v156);
          unint64_t v159 = v149 + v156;
          if (v159 >= v194) {
            uint64_t v160 = v148;
          }
          else {
            uint64_t v160 = 0;
          }
          if (atomic_fetch_add((atomic_uint *volatile)v92 + 182, v155) == -1) {
            dispatch_semaphore_signal((dispatch_semaphore_t)v92[92]);
          }
          uint64_t v149 = v159 + v160;
          v146 += v156;
        }
        while (v146 < v186);
      }
    }
  }
LABEL_165:
  dispatch_group_wait(v121, 0xFFFFFFFFFFFFFFFFLL);
  atomic_load((unsigned int *)v92 + 139);

  if (v92[2])
  {
    uint64_t v161 = (void *)v92[90];
    v92[90] = 0;

    size_t v162 = (void *)v92[92];
    v92[92] = 0;

    int v163 = (void *)v92[148];
    v92[148] = 0;

    int v164 = (void *)v92[150];
    v92[150] = 0;

    free((void *)v92[2]);
  }
  if (v199) {
    sub_1DDA19C9C(v199, v201);
  }
  unsigned int v165 = v200;
  if (v200 && !atomic_fetch_add(&v200->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
    std::__shared_weak_count::__release_weak(v165);
  }
  v195[2](v195);
}

void sub_1DDAB16CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void (**a25)(void),uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_1DDAB341C(&a29);
  a25[2](a25);

  _Unwind_Resume(a1);
}

void sub_1DDAB17F8(uint64_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CNikonCompressedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDAB1880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(unsigned int **)(a3 + 40);
  uint64_t v6 = *(void *)(a1 + 568);
  *(unsigned char *)(a3 + 32) = 1;
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v9 = 0;
    int v7 = 0;
    int v8 = v5;
    do
    {
      int v8 = (unsigned int *)((char *)v8 - 1);
      v7 += 8;
      if (v9 > 0x3E) {
        break;
      }
      ++v9;
    }
    while ((unint64_t)v8 >= v4);
  }
  else
  {
    int v7 = 0;
    int v8 = v5;
  }
  bzero(v28, 0x201uLL);
  uint64_t v10 = 0;
  int v11 = v7 - 32;
  uint64_t v12 = v5;
  while (1)
  {
    if (!v28[v10])
    {
      int v13 = bswap32(*v8);
      int v14 = v8 + 1;
      int v15 = v10;
      int v16 = v10;
      while (1)
      {
        if (v15 >= 16)
        {
          int v13 = (v13 << 16) | (*(unsigned __int8 *)v14 << 8) | *((unsigned __int8 *)v14 + 1);
          int v14 = (unsigned int *)((char *)v14 + 2);
          v15 -= 16;
        }
        unsigned int v18 = v13 << v15;
        unsigned int v19 = *(unsigned __int16 *)(v6 + 2 * ((v13 << v15) >> 23));
        int v20 = (v19 >> 10) & 0x1F;
        v15 += v20;
        v16 += v20;
        if (v19 > 0x8000) {
          goto LABEL_16;
        }
        if ((v19 & 0x8000) != 0) {
          break;
        }
        int v21 = v19 & 0x1F;
        if (v21) {
          goto LABEL_19;
        }
LABEL_16:
        if (v16 > v11) {
          goto LABEL_22;
        }
LABEL_10:
        int v17 = v28[v16];
        v28[v16] = v17 + 1;
        if (v17) {
          goto LABEL_25;
        }
      }
      unsigned int v22 = *(unsigned __int16 *)(v6 + 2 * (HIWORD(v18) & 0x3FF));
      int v23 = (v22 >> 10) & 0x1F;
      v15 += v23;
      v16 += v23;
      int v21 = v22 & 0x1F;
      if (!v21) {
        goto LABEL_16;
      }
LABEL_19:
      if (v15 >= 16)
      {
        int v13 = (v13 << 16) | (*(unsigned __int8 *)v14 << 8) | *((unsigned __int8 *)v14 + 1);
        int v14 = (unsigned int *)((char *)v14 + 2);
        v15 -= 16;
      }
      v15 += v21;
      v16 += v21;
      if (v16 <= v11) {
        goto LABEL_10;
      }
LABEL_22:
      if (v16 <= v7)
      {
        if (!v10)
        {
          *(_DWORD *)(a3 + 36) = v13;
          *(_WORD *)(a3 + 34) = v15;
          uint64_t v12 = v14;
          *(void *)(a3 + 40) = v14;
        }
        goto LABEL_10;
      }
LABEL_25:
      if (v10 && v16 > v7) {
        break;
      }
    }
    if (++v10 == 32)
    {
      int v24 = *(_DWORD *)(a3 + 36);
      int v25 = *(__int16 *)(a3 + 34);
      if (v25 >= 8) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }
  }
  int v24 = *(_DWORD *)(a3 + 36);
  *(unsigned char *)(a3 + 32) = *(unsigned char *)(a3 + 33);
  int v25 = 32;
  uint64_t v12 = v5;
  do
  {
LABEL_29:
    unsigned int v26 = v25;
    int v27 = *(unsigned __int8 *)v12;
    uint64_t v12 = (unsigned int *)((char *)v12 + 1);
    int v24 = v27 | (v24 << 8);
    v25 -= 8;
  }
  while (v26 > 0xF);
LABEL_30:
  *(_DWORD *)(a3 + 36) = v24;
  *(_WORD *)(a3 + 34) = v25;
  *(void *)(a3 + 40) = v12;
}

void sub_1DDAB1AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(unsigned int **)(a3 + 40);
  uint64_t v6 = *(void *)(a1 + 8 * *(int *)(a3 + 12) + 568);
  *(unsigned char *)(a3 + 32) = 1;
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v9 = 0;
    int v7 = 0;
    int v8 = v5;
    do
    {
      int v8 = (unsigned int *)((char *)v8 - 1);
      v7 += 8;
      if (v9 > 0x3E) {
        break;
      }
      ++v9;
    }
    while ((unint64_t)v8 >= v4);
  }
  else
  {
    int v7 = 0;
    int v8 = v5;
  }
  bzero(v28, 0x201uLL);
  uint64_t v10 = 0;
  int v11 = v7 - 32;
  uint64_t v12 = v5;
  while (1)
  {
    if (!v28[v10])
    {
      int v13 = bswap32(*v8);
      int v14 = v8 + 1;
      int v15 = v10;
      int v16 = v10;
      while (1)
      {
        if (v15 >= 16)
        {
          int v13 = (v13 << 16) | (*(unsigned __int8 *)v14 << 8) | *((unsigned __int8 *)v14 + 1);
          int v14 = (unsigned int *)((char *)v14 + 2);
          v15 -= 16;
        }
        unsigned int v18 = v13 << v15;
        unsigned int v19 = *(unsigned __int16 *)(v6 + 2 * ((v13 << v15) >> 23));
        int v20 = (v19 >> 10) & 0x1F;
        v15 += v20;
        v16 += v20;
        if (v19 > 0x8000) {
          goto LABEL_16;
        }
        if ((v19 & 0x8000) != 0) {
          break;
        }
        int v21 = v19 & 0xF;
        if (v21) {
          goto LABEL_19;
        }
LABEL_16:
        if (v16 > v11) {
          goto LABEL_22;
        }
LABEL_10:
        int v17 = v28[v16];
        v28[v16] = v17 + 1;
        if (v17) {
          goto LABEL_25;
        }
      }
      unsigned int v22 = *(unsigned __int16 *)(v6 + 2 * (HIWORD(v18) & 0x3FF));
      int v23 = (v22 >> 10) & 0x1F;
      v15 += v23;
      v16 += v23;
      int v21 = v22 & 0xF;
      if (!v21) {
        goto LABEL_16;
      }
LABEL_19:
      if (v15 >= 16)
      {
        int v13 = (v13 << 16) | (*(unsigned __int8 *)v14 << 8) | *((unsigned __int8 *)v14 + 1);
        int v14 = (unsigned int *)((char *)v14 + 2);
        v15 -= 16;
      }
      v15 += v21;
      v16 += v21;
      if (v16 <= v11) {
        goto LABEL_10;
      }
LABEL_22:
      if (v16 <= v7)
      {
        if (!v10)
        {
          *(_DWORD *)(a3 + 36) = v13;
          *(_WORD *)(a3 + 34) = v15;
          uint64_t v12 = v14;
          *(void *)(a3 + 40) = v14;
        }
        goto LABEL_10;
      }
LABEL_25:
      if (v10 && v16 > v7) {
        break;
      }
    }
    if (++v10 == 32)
    {
      int v24 = *(_DWORD *)(a3 + 36);
      int v25 = *(__int16 *)(a3 + 34);
      if (v25 >= 8) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }
  }
  int v24 = *(_DWORD *)(a3 + 36);
  *(unsigned char *)(a3 + 32) = *(unsigned char *)(a3 + 33);
  int v25 = 32;
  uint64_t v12 = v5;
  do
  {
LABEL_29:
    unsigned int v26 = v25;
    int v27 = *(unsigned __int8 *)v12;
    uint64_t v12 = (unsigned int *)((char *)v12 + 1);
    int v24 = v27 | (v24 << 8);
    v25 -= 8;
  }
  while (v26 > 0xF);
LABEL_30:
  *(_DWORD *)(a3 + 36) = v24;
  *(_WORD *)(a3 + 34) = v25;
  *(void *)(a3 + 40) = v12;
}

uint64_t sub_1DDAB1D10(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 568);
  uint64_t v4 = *(void *)(a3 + 64);
  int v5 = *(_DWORD *)(a3 + 20);
  int v6 = *(__int16 *)(a3 + 18);
  int v7 = *(unsigned __int8 **)(a3 + 24);
  int v8 = *(unsigned __int8 **)(a3 + 40);
  if (v7 < v8 - 20)
  {
    unsigned int v9 = *(_WORD **)(a3 + 64);
    while (1)
    {
      if (v6 >= 16)
      {
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v6 -= 16;
      }
      unsigned int v12 = v5 << v6;
      unsigned int v13 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
      int v14 = ((v13 >> 10) & 0x1F) + v6;
      if (v13 > 0x8000)
      {
        *unsigned int v9 = (char)v13;
        int v17 = v14 - 16;
        if (v14 < 16) {
          goto LABEL_16;
        }
LABEL_15:
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        int v14 = v17;
        goto LABEL_16;
      }
      if ((v13 & 0x8000) != 0)
      {
        unsigned int v13 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v12) & 0x3FF));
        v14 += (v13 >> 10) & 0x1F;
        int v15 = v13 & 0x1F;
        if ((v13 & 0x1F) == 0)
        {
LABEL_41:
          *unsigned int v9 = ((_WORD)v13 << 8) & 0x8000;
          int v17 = v14 - 16;
          if (v14 >= 16) {
            goto LABEL_15;
          }
          goto LABEL_16;
        }
      }
      else
      {
        int v15 = v13 & 0x1F;
        if ((v13 & 0x1F) == 0) {
          goto LABEL_41;
        }
      }
      if (v14 >= 16)
      {
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v14 -= 16;
      }
      unsigned int v16 = ((v5 << v14) >> -(char)v15) - ((((v5 << v14) >> 31) - 1) >> -(char)v15);
      v14 += v15;
      *unsigned int v9 = v16;
      int v17 = v14 - 16;
      if (v14 >= 16) {
        goto LABEL_15;
      }
LABEL_16:
      unsigned int v18 = v5 << v14;
      unsigned int v19 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v14) >> 23));
      int v20 = ((v19 >> 10) & 0x1F) + v14;
      if (v19 > 0x8000)
      {
        v9[1] = (char)v19;
        int v23 = v20 - 16;
        if (v20 < 16) {
          goto LABEL_25;
        }
LABEL_24:
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        int v20 = v23;
        goto LABEL_25;
      }
      if ((v19 & 0x8000) != 0)
      {
        unsigned int v19 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v18) & 0x3FF));
        v20 += (v19 >> 10) & 0x1F;
        int v21 = v19 & 0x1F;
        if ((v19 & 0x1F) == 0)
        {
LABEL_44:
          v9[1] = ((_WORD)v19 << 8) & 0x8000;
          int v23 = v20 - 16;
          if (v20 >= 16) {
            goto LABEL_24;
          }
          goto LABEL_25;
        }
      }
      else
      {
        int v21 = v19 & 0x1F;
        if ((v19 & 0x1F) == 0) {
          goto LABEL_44;
        }
      }
      if (v20 >= 16)
      {
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v20 -= 16;
      }
      unsigned int v22 = ((v5 << v20) >> -(char)v21) - ((((v5 << v20) >> 31) - 1) >> -(char)v21);
      v20 += v21;
      v9[1] = v22;
      int v23 = v20 - 16;
      if (v20 >= 16) {
        goto LABEL_24;
      }
LABEL_25:
      unsigned int v24 = v5 << v20;
      unsigned int v25 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v20) >> 23));
      int v26 = ((v25 >> 10) & 0x1F) + v20;
      if (v25 > 0x8000)
      {
        void v9[2] = (char)v25;
        int v29 = v26 - 16;
        if (v26 < 16) {
          goto LABEL_34;
        }
LABEL_33:
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        int v26 = v29;
        goto LABEL_34;
      }
      if ((v25 & 0x8000) != 0)
      {
        unsigned int v25 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v24) & 0x3FF));
        v26 += (v25 >> 10) & 0x1F;
        int v27 = v25 & 0x1F;
        if ((v25 & 0x1F) == 0)
        {
LABEL_47:
          void v9[2] = ((_WORD)v25 << 8) & 0x8000;
          int v29 = v26 - 16;
          if (v26 >= 16) {
            goto LABEL_33;
          }
          goto LABEL_34;
        }
      }
      else
      {
        int v27 = v25 & 0x1F;
        if ((v25 & 0x1F) == 0) {
          goto LABEL_47;
        }
      }
      if (v26 >= 16)
      {
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v26 -= 16;
      }
      unsigned int v28 = ((v5 << v26) >> -(char)v27) - ((((v5 << v26) >> 31) - 1) >> -(char)v27);
      v26 += v27;
      void v9[2] = v28;
      int v29 = v26 - 16;
      if (v26 >= 16) {
        goto LABEL_33;
      }
LABEL_34:
      unsigned int v30 = v5 << v26;
      unsigned int v10 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v26) >> 23));
      uint64_t result = (v10 >> 10) & 0x1F;
      int v6 = result + v26;
      if (v10 > 0x8000)
      {
        LOWORD(v10) = (char)v10;
      }
      else
      {
        if ((v10 & 0x8000) != 0)
        {
          unsigned int v10 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v30) & 0x3FF));
          v6 += (v10 >> 10) & 0x1F;
          int v31 = v10 & 0x1F;
          if ((v10 & 0x1F) != 0)
          {
LABEL_37:
            if (v6 >= 16)
            {
              int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
              v7 += 2;
              v6 -= 16;
            }
            uint64_t result = -v31;
            unsigned int v10 = ((v5 << v6) >> -(char)v31) - ((((v5 << v6) >> 31) - 1) >> -(char)v31);
            v6 += v31;
            goto LABEL_4;
          }
        }
        else
        {
          int v31 = v10 & 0x1F;
          if ((v10 & 0x1F) != 0) {
            goto LABEL_37;
          }
        }
        LOWORD(v10) = ((_WORD)v10 << 8) & 0x8000;
      }
LABEL_4:
      int v11 = v9 + 4;
      v9[3] = v10;
      v9 += 4;
      if (v7 >= v8 - 20) {
        goto LABEL_52;
      }
    }
  }
  int v11 = *(_WORD **)(a3 + 64);
LABEL_52:
  *(unsigned char *)(a3 + 48) = 0;
  while (v7 <= v8)
  {
    if (v6 >= 16)
    {
      int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
      v7 += 2;
      v6 -= 16;
    }
    unsigned int v32 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
    int v33 = ((v32 >> 10) & 0x1F) + v6;
    if (v32 > 0x8000)
    {
      *v11++ = (char)v32;
      if (v33 >= 8) {
        goto LABEL_67;
      }
LABEL_70:
      int v6 = v33;
      if (v7 == v8)
      {
LABEL_71:
        int v38 = *(__int16 *)(a3 + 34);
        if (v6 >= v38)
        {
          BOOL v39 = v6 == v38;
          goto LABEL_74;
        }
      }
    }
    else
    {
      if ((v32 & 0x8000) == 0)
      {
        int v34 = v32 & 0x1F;
        if ((v32 & 0x1F) != 0) {
          goto LABEL_59;
        }
LABEL_66:
        *v11++ = ((_WORD)v32 << 8) & 0x8000;
        if (v33 >= 8) {
          goto LABEL_67;
        }
        goto LABEL_70;
      }
      unsigned int v32 = *(unsigned __int16 *)(v3 + 2 * (((v5 << v6) >> 16) & 0x3FF));
      v33 += (v32 >> 10) & 0x1F;
      int v34 = v32 & 0x1F;
      if ((v32 & 0x1F) == 0) {
        goto LABEL_66;
      }
LABEL_59:
      if (v33 >= 16)
      {
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v33 -= 16;
      }
      uint64_t result = (v5 << v33) >> -(char)v34;
      int v35 = result - ((((v5 << v33) >> 31) - 1) >> -(char)v34);
      v33 += v34;
      *v11++ = v35;
      if (v33 < 8) {
        goto LABEL_70;
      }
      do
      {
LABEL_67:
        int v36 = *v7++;
        int v5 = v36 | (v5 << 8);
        int v6 = v33 - 8;
        BOOL v37 = v33 > 0xF;
        v33 -= 8;
      }
      while (v37);
      if (v7 == v8) {
        goto LABEL_71;
      }
    }
  }
  BOOL v39 = 0;
  int v8 = v7;
LABEL_74:
  *(_DWORD *)(a3 + 72) = ((unint64_t)v11 - v4) >> 1;
  *(_DWORD *)(a3 + 52) = v5;
  *(_WORD *)(a3 + 50) = v6;
  *(void *)(a3 + 56) = v8;
  *(unsigned char *)(a3 + 48) = v39 & *(unsigned char *)(a3 + 32);
  *(unsigned char *)(a3 + 49) = *(unsigned char *)(a3 + 33);
  return result;
}

uint64_t sub_1DDAB2200(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8 * *(int *)(a3 + 12) + 568);
  uint64_t v4 = *(void *)(a3 + 64);
  int v5 = *(_DWORD *)(a3 + 20);
  int v6 = *(__int16 *)(a3 + 18);
  int v7 = *(unsigned __int8 **)(a3 + 24);
  int v8 = *(unsigned __int8 **)(a3 + 40);
  if (v7 < v8 - 12)
  {
    unsigned int v9 = *(_WORD **)(a3 + 64);
    while (1)
    {
      if (v6 >= 16)
      {
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v6 -= 16;
      }
      unsigned int v12 = v5 << v6;
      unsigned int v13 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
      int v14 = ((v13 >> 10) & 0x1F) + v6;
      if (v13 > 0x8000)
      {
        *unsigned int v9 = (char)v13;
        int v19 = v14 - 16;
        if (v14 < 16) {
          goto LABEL_19;
        }
LABEL_18:
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        int v14 = v19;
        goto LABEL_19;
      }
      if ((v13 & 0x8000) != 0)
      {
        unsigned int v13 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v12) & 0x3FF));
        v14 += (v13 >> 10) & 0x1F;
        int v15 = v13 & 0xF;
        if ((v13 & 0xF) == 0)
        {
LABEL_27:
          *unsigned int v9 = ((_WORD)v13 << 8) & 0x8000;
          int v19 = v14 - 16;
          if (v14 >= 16) {
            goto LABEL_18;
          }
          goto LABEL_19;
        }
      }
      else
      {
        int v15 = v13 & 0xF;
        if ((v13 & 0xF) == 0) {
          goto LABEL_27;
        }
      }
      if (v14 >= 16)
      {
        int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v14 -= 16;
      }
      int v16 = (v13 >> 4) & 0x3F;
      unsigned int v17 = ((v5 << v14) >> -(char)v15) - ((((v5 << v14) >> 31) - 1) >> -(char)v15);
      v14 += v15;
      if (v16) {
        __int16 v18 = ((((int)(v17 << v16) >> 31) | 1) << (v16 - 1)) + ((_WORD)v17 << v16);
      }
      else {
        __int16 v18 = v17;
      }
      *unsigned int v9 = v18;
      int v19 = v14 - 16;
      if (v14 >= 16) {
        goto LABEL_18;
      }
LABEL_19:
      unsigned int v20 = v5 << v14;
      unsigned int v21 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v14) >> 23));
      uint64_t result = (v21 >> 10) & 0x1F;
      int v6 = result + v14;
      if (v21 > 0x8000)
      {
        LOWORD(v10) = (char)v21;
      }
      else
      {
        if ((v21 & 0x8000) != 0)
        {
          unsigned int v21 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v20) & 0x3FF));
          v6 += (v21 >> 10) & 0x1F;
          uint64_t result = v21 & 0xF;
          if ((v21 & 0xF) != 0)
          {
LABEL_22:
            if (v6 >= 16)
            {
              int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
              v7 += 2;
              v6 -= 16;
            }
            int v22 = (v21 >> 4) & 0x3F;
            unsigned int v10 = ((v5 << v6) >> -(char)result)
                - ((((v5 << v6) >> 31) - 1) >> -(char)result);
            v6 += result;
            if (v22)
            {
              int v23 = v10 << v22;
              uint64_t result = (v23 >> 31) | 1u;
              unsigned int v10 = (result << (v22 - 1)) + v23;
            }
            goto LABEL_4;
          }
        }
        else
        {
          uint64_t result = v21 & 0xF;
          if ((v21 & 0xF) != 0) {
            goto LABEL_22;
          }
        }
        LOWORD(v10) = ((_WORD)v21 << 8) & 0x8000;
      }
LABEL_4:
      int v11 = v9 + 2;
      v9[1] = v10;
      v9 += 2;
      if (v7 >= v8 - 12) {
        goto LABEL_32;
      }
    }
  }
  int v11 = *(_WORD **)(a3 + 64);
LABEL_32:
  *(unsigned char *)(a3 + 48) = 0;
  while (v7 <= v8)
  {
    if (v6 >= 16)
    {
      int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
      v7 += 2;
      v6 -= 16;
    }
    unsigned int v24 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
    int v25 = ((v24 >> 10) & 0x1F) + v6;
    if (v24 > 0x8000)
    {
      LOWORD(v24) = (char)v24;
      goto LABEL_45;
    }
    if ((v24 & 0x8000) != 0)
    {
      unsigned int v24 = *(unsigned __int16 *)(v3 + 2 * (((v5 << v6) >> 16) & 0x3FF));
      v25 += (v24 >> 10) & 0x1F;
      int v26 = v24 & 0xF;
      if ((v24 & 0xF) == 0)
      {
LABEL_50:
        *v11++ = ((_WORD)v24 << 8) & 0x8000;
        if (v25 >= 8) {
          goto LABEL_46;
        }
        goto LABEL_51;
      }
    }
    else
    {
      int v26 = v24 & 0xF;
      if ((v24 & 0xF) == 0) {
        goto LABEL_50;
      }
    }
    if (v25 >= 16)
    {
      int v5 = (v5 << 16) | (*v7 << 8) | v7[1];
      v7 += 2;
      v25 -= 16;
    }
    int v27 = (v24 >> 4) & 0x3F;
    uint64_t result = -v26;
    unsigned int v24 = ((v5 << v25) >> -(char)v26) - ((((v5 << v25) >> 31) - 1) >> -(char)v26);
    v25 += v26;
    if (v27)
    {
      *v11++ = ((((int)(v24 << v27) >> 31) | 1) << (v27 - 1)) + ((_WORD)v24 << v27);
      if (v25 < 8) {
        goto LABEL_51;
      }
      do
      {
LABEL_46:
        int v28 = *v7++;
        int v5 = v28 | (v5 << 8);
        int v6 = v25 - 8;
        BOOL v29 = v25 > 0xF;
        v25 -= 8;
      }
      while (v29);
      if (v7 == v8) {
        goto LABEL_52;
      }
    }
    else
    {
LABEL_45:
      *v11++ = v24;
      if (v25 >= 8) {
        goto LABEL_46;
      }
LABEL_51:
      int v6 = v25;
      if (v7 == v8)
      {
LABEL_52:
        int v30 = *(__int16 *)(a3 + 34);
        if (v6 >= v30)
        {
          BOOL v31 = v6 == v30;
          goto LABEL_55;
        }
      }
    }
  }
  BOOL v31 = 0;
  int v8 = v7;
LABEL_55:
  *(_DWORD *)(a3 + 72) = ((unint64_t)v11 - v4) >> 1;
  *(_DWORD *)(a3 + 52) = v5;
  *(_WORD *)(a3 + 50) = v6;
  *(void *)(a3 + 56) = v8;
  *(unsigned char *)(a3 + 48) = v31 & *(unsigned char *)(a3 + 32);
  *(unsigned char *)(a3 + 49) = *(unsigned char *)(a3 + 33);
  return result;
}

intptr_t sub_1DDAB25A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = v1 + 836;
  uint64_t v122 = *(void (**)(uint64_t, uint64_t))(v1 + 616);
  uint64_t v3 = (_OWORD *)(v1 + 744);
  do
  {
LABEL_3:
    unsigned int v4 = atomic_load((unsigned int *)(v1 + 1148));
    if ((v4 & 0x80000000) != 0)
    {
LABEL_9:
      char v11 = 0;
      unsigned int v12 = atomic_load((unsigned int *)(v1 + 1152));
      unsigned int v13 = atomic_load((unsigned int *)(v1 + 1152));
      unsigned int v125 = v12;
      if ((v13 & 0x80000000) != 0) {
        goto LABEL_75;
      }
LABEL_10:
      int v14 = 0;
LABEL_13:
      while (2)
      {
        uint64_t v16 = v13 & 0x1F;
        unsigned int v17 = (unsigned __int8 *)(v1 + v16 + 856);
        int v18 = atomic_load(v17);
        if (v18 == 4)
        {
          uint64_t v19 = *(void *)(v1 + 8 * v16 + 888);
          unsigned int v20 = v13;
          atomic_compare_exchange_strong((atomic_uint *volatile)(v1 + 1152), &v20, v13 | 0x80000000);
          if (v20 == v13)
          {
            atomic_store(5u, v17);
            sub_1DDAB34E4(v1, a1, v19);
            int v21 = *(_DWORD *)(v1 + 596);
            int v22 = *(__int16 **)(v19 + 64);
            int v23 = *(_DWORD *)(v19 + 72);
            uint64_t v24 = *(void *)(v1 + 808);
            int v25 = *(_DWORD *)(v1 + 816);
            int v26 = (v25 + v23) % v21;
            int v27 = *(_DWORD *)(v1 + 776) + v25 + v23;
            int v28 = *(_DWORD *)(v1 + 552);
            int v29 = v28 - (*(_DWORD *)(v1 + 776) + v25);
            int v30 = v29 & ~(v29 >> 31);
            int v31 = (v29 & (v29 >> 31)) + v25;
            if (v28 < v27) {
              int v32 = v30;
            }
            else {
              int v32 = *(_DWORD *)(v19 + 72);
            }
            if (v28 < v27) {
              int v33 = v31;
            }
            else {
              int v33 = *(_DWORD *)(v1 + 816);
            }
            if (v28 < v27) {
              int v34 = v31 + v30;
            }
            else {
              int v34 = v25 + v23;
            }
            if (v28 < v27) {
              int v35 = 0;
            }
            else {
              int v35 = v26;
            }
            BOOL v36 = v34 >= v21 || v33 < 1;
            if (v36)
            {
              if (v33)
              {
                __int16 v37 = *v22++;
                *(_WORD *)(v24 + 2 * v33++) = v37;
                --v32;
              }
            }
            else
            {
              int v124 = v35;
              __srCC_SHA256_CTX c = *(void **)(v1 + 808);
              memmove(&v22[v33], v22, 2 * v32);
              memmove(v22, __src, 2 * v33);
              int v35 = v124;
              uint64_t v24 = 0;
              v32 += v33;
              int v33 = 0;
            }
            *(void *)(v1 + 784) = v22;
            *(_DWORD *)(v1 + 792) = v32 - v35;
            *(void *)(v1 + 808) = v24;
            *(_DWORD *)(v1 + 816) = v33;
            *(_OWORD *)(v19 + 80) = *(_OWORD *)(v1 + 776);
            long long v38 = *(_OWORD *)(v1 + 792);
            long long v39 = *(_OWORD *)(v1 + 808);
            long long v40 = *(_OWORD *)(v1 + 840);
            *(_OWORD *)(v19 + 128) = *(_OWORD *)(v1 + 824);
            *(_OWORD *)(v19 + 144) = v40;
            *(_OWORD *)(v19 + 96) = v38;
            *(_OWORD *)(v19 + 112) = v39;
            if (v35 <= 0) {
              unsigned int v41 = 1;
            }
            else {
              unsigned int v41 = 2;
            }
            atomic_store(v41, (unsigned int *)(v19 + 8));
            int v42 = *(_DWORD *)(v1 + 816);
            uint64_t v43 = 808;
            if (!v42) {
              uint64_t v43 = 784;
            }
            uint64_t v44 = *(__int16 **)(v1 + v43);
            uint64_t v45 = *(void *)(v1 + 824);
            int v46 = *(_DWORD *)(v1 + 832);
            int v47 = *(_DWORD *)(v1 + 776);
            if (*(_DWORD *)(v1 + 792) + v42 < 1)
            {
              uint64_t v2 = v1 + 836;
              goto LABEL_56;
            }
            int v48 = v47 + v42;
            if (v42) {
              int v49 = 0;
            }
            else {
              int v49 = *(_DWORD *)(v1 + 792);
            }
            int v50 = v49 + v48;
            int v51 = *(_DWORD *)(v1 + 776);
            uint64_t v2 = v1 + 836;
            while (1)
            {
              if (v47 == v50)
              {
                if (v47 != v48) {
                  goto LABEL_56;
                }
                uint64_t v44 = *(__int16 **)(v1 + 784);
                int v54 = *(_DWORD *)(v1 + 792);
                if (!v54)
                {
                  int v47 = v48;
LABEL_56:
                  *(_DWORD *)(v1 + 776) = v47;
                  *(void *)(v1 + 824) = v45;
                  *(_DWORD *)(v1 + 832) = v46;
                  *(void *)(v1 + 784) = 0;
                  *(_DWORD *)(v1 + 792) = 0;
                  *(void *)(v1 + 800) = 0;
                  *(void *)(v1 + 808) = 0;
                  *(_DWORD *)(v1 + 816) = 0;
                  if (v35 >= 1)
                  {
                    *(void *)(v1 + 800) = v19;
                    *(void *)(v1 + 808) = v44;
                    *(_DWORD *)(v1 + 816) = v35;
                  }
                  uint64_t v57 = *(void *)(v19 + 56) - *(void *)(v19 + 24) + *(void *)(v1 + 648);
                  *(void *)(v1 + 648) = v57;
                  *(_OWORD *)(v1 + 760) = *(_OWORD *)(v19 + 48);
                  uint64_t v58 = *(void *)(v1 + 656);
                  for (int i = v57 - v58; ; int i = *(_DWORD *)(v1 + 648) - v58)
                  {
                    int v60 = *(_DWORD *)(v1 + 680);
                    if (v60 > i) {
                      break;
                    }
                    *(void *)(v1 + 656) = v58 + v60;
                    if (atomic_fetch_add((atomic_uint *volatile)(v1 + 712), 1u) == -1) {
                      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 720));
                    }
                    uint64_t v58 = *(void *)(v1 + 656);
                  }
                  atomic_store(6u, v17);
                  atomic_fetch_add((atomic_uint *volatile)(v1 + 1152), 0x80000001);
                  if (v14)
                  {
                    do
                    {
                      int v61 = atomic_load((unsigned int *)(v1 + 1192));
                      if (v61 < 2) {
                        goto LABEL_67;
                      }
                      int v62 = v61;
                      atomic_compare_exchange_strong((atomic_uint *volatile)(v1 + 1192), (unsigned int *)&v62, v61 - 1);
                    }
                    while (v62 != v61);
                    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 1200));
                  }
LABEL_67:
                  ++v14;
                  unsigned int v13 = atomic_load((unsigned int *)(v1 + 1152));
                  char v11 = 1;
                  if ((v13 & 0x80000000) != 0) {
                    goto LABEL_75;
                  }
                  goto LABEL_13;
                }
                int v50 = v54 + v48;
              }
              if (v47 == v51)
              {
                unsigned __int16 v55 = (_DWORD *)(v1 + 836 + 4 * v46);
                int v56 = v55[1] + v44[1];
                *v55 += *v44;
                v55[1] = v56;
                v46 ^= 2u;
                int v51 = v47 + v21;
              }
              if (v51 >= v50) {
                int v52 = v50;
              }
              else {
                int v52 = v51;
              }
              uint64_t v53 = 2 * (v52 - v47);
              uint64_t v44 = (__int16 *)((char *)v44 + v53);
              v45 += v53;
              int v47 = v52;
            }
          }
        }
        else
        {
          __dmb(0xBu);
          unsigned int v15 = atomic_load((unsigned int *)(v1 + 1152));
          if (v13 == v15) {
            goto LABEL_75;
          }
        }
        unsigned int v13 = atomic_load((unsigned int *)(v1 + 1152));
        if ((v13 & 0x80000000) != 0) {
          goto LABEL_75;
        }
        continue;
      }
    }
    while (1)
    {
      uint64_t v7 = v4 & 0x1F;
      int v8 = (unsigned __int8 *)(v1 + v7 + 856);
      int v9 = atomic_load(v8);
      if (v9 == 2) {
        break;
      }
      __dmb(0xBu);
      unsigned int v10 = atomic_load((unsigned int *)(v1 + 1148));
      if (v4 == v10) {
        goto LABEL_9;
      }
LABEL_6:
      unsigned int v4 = atomic_load((unsigned int *)(v1 + 1148));
      if ((v4 & 0x80000000) != 0) {
        goto LABEL_9;
      }
    }
    uint64_t v5 = *(void *)(v1 + 8 * v7 + 888);
    unsigned int v6 = v4;
    atomic_compare_exchange_strong((atomic_uint *volatile)(v1 + 1148), &v6, v4 + 1);
    if (v6 != v4) {
      goto LABEL_6;
    }
    atomic_store(3u, v8);
    if (*(unsigned char *)(v5 + 16) && !*(unsigned char *)(v5 + 17)) {
      v122(v1, a1);
    }
    atomic_store(4u, v8);
    char v11 = 1;
    unsigned int v63 = atomic_load((unsigned int *)(v1 + 1152));
    unsigned int v13 = atomic_load((unsigned int *)(v1 + 1152));
    unsigned int v125 = v63;
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    while (1)
    {
LABEL_75:
      unsigned int v65 = atomic_load((unsigned int *)(v1 + 1156));
      if ((v65 & 0x80000000) != 0)
      {
LABEL_81:
        uint64_t v72 = v125;
        if ((v11 & 1) == 0)
        {
          unsigned int v73 = atomic_load((unsigned int *)(v1 + 1152));
          if (v125 != v73) {
            goto LABEL_156;
          }
          int v74 = atomic_load((unsigned int *)(v1 + 1192));
          if (v74 <= 0)
          {
            int v89 = atomic_load((unsigned int *)(v1 + 1180));
            if (v89 > 0) {
              goto LABEL_156;
            }
          }
          int v75 = *(_DWORD *)(v1 + 1164);
          uint64_t v76 = *(void *)(v1 + 1168);
          unsigned int v77 = atomic_load((unsigned int *)(v1 + 1152));
          if (v125 != v77) {
            goto LABEL_156;
          }
          int v78 = 0;
          while (1)
          {
            int v80 = atomic_load((unsigned int *)(v1 + 1192));
            if (v80 <= 0)
            {
              int v81 = atomic_load((unsigned int *)(v1 + 1180));
              if (v81 > 0) {
                break;
              }
            }
            unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v1 + 1160), 0xFFFFFFFF);
            BOOL v83 = __OFSUB__(add, 1);
            int v84 = add - 1;
            if (v84 < 0 != v83) {
              break;
            }
            unsigned int v85 = (void *)(v76 + (v84 << v75));
            if ((unint64_t)v85 >= *(void *)v1 && (unint64_t)v85 < *(void *)(v1 + 8))
            {
              uint64_t v86 = v2;
              uint64_t v87 = v72;
              size_t v88 = NSPageSize();
              madvise(v85, v88, 3);
              uint64_t v72 = v87;
              uint64_t v2 = v86;
            }
            unsigned int v79 = atomic_load((unsigned int *)(v1 + 1152));
            --v78;
            if (v72 != v79) {
              goto LABEL_3;
            }
          }
          if (!v78)
          {
LABEL_156:
            if (atomic_fetch_add((atomic_uint *volatile)(v1 + 1192), 1u))
            {
              dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v1 + 1200), 0xFFFFFFFFFFFFFFFFLL);
            }
            else
            {
              while (1)
              {
                if (*(void *)(v1 + 640) + *(int *)(v1 + 548) + 4 >= *(void *)(v1 + 632)) {
                  uint64_t v95 = *(void *)(v1 + 632);
                }
                else {
                  uint64_t v95 = *(void *)(v1 + 640) + *(int *)(v1 + 548) + 4;
                }
                uint64_t v96 = *(void *)(v1 + 664);
                while (v95 > v96)
                {
                  if ((int)atomic_fetch_add((atomic_uint *volatile)(v1 + 728), 0xFFFFFFFF) <= 0) {
                    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v1 + 736), 0xFFFFFFFFFFFFFFFFLL);
                  }
                  uint64_t v96 = *(void *)(v1 + 664) + *(int *)(v1 + 680);
                  *(void *)(v1 + 664) = v96;
                  uint64_t v97 = *(void *)(v1 + 672);
                  if (v96 > v97) {
                    *(void *)(v1 + 672) = v97 + *(int *)(v1 + 688);
                  }
                }
                if ((int)atomic_fetch_add((atomic_uint *volatile)(v1 + 1180), 0xFFFFFFFF) <= 0) {
                  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v1 + 1184), 0xFFFFFFFFFFFFFFFFLL);
                }
                do
                {
                  unsigned int v98 = atomic_load((unsigned int *)(v1 + 1176));
                  unsigned int v99 = v98;
                  atomic_compare_exchange_strong((atomic_uint *volatile)(v1 + 1176), &v99, (v98 - 1) & v98);
                }
                while (v99 != v98);
                uint64_t v100 = *(int **)(v1 + 8 * __clz(__rbit32(v98)) + 288);
                unsigned int v101 = atomic_fetch_add((atomic_uint *volatile)(v1 + 1144), 1u);
                *uint64_t v100 = v101;
                *(void *)(v1 + 8 * (v101 & 0x1F) + 888) = v100;
                atomic_store(0, (unsigned __int8 *)(v1 + 856 + (((_BYTE)v101 + 1) & 0x1F)));
                int v102 = (unsigned __int8 *)(v1 + 856 + (v101 & 0x1F));
                atomic_store(1u, v102);
                uint64_t v103 = *(int *)(v1 + 548);
                uint64_t v104 = *(void *)(v1 + 640);
                uint64_t v105 = v104 + v103;
                uint64_t v106 = *(void *)(v1 + 632);
                uint64_t v107 = v106 - v104;
                BOOL v36 = v105 < v106;
                BOOL v108 = v105 >= v106;
                if (!v36) {
                  uint64_t v103 = v107;
                }
                *((_OWORD *)v100 + 1) = *v3;
                *((unsigned char *)v100 + 32) = 0;
                dispatch_semaphore_t v109 = v100 + 8;
                *((unsigned char *)v100 + 33) = v108;
                *((_WORD *)v100 + 17) = 32;
                *((void *)v100 + 5) = *((void *)v100 + 3) + v103;
                if (v103 < 1 || (int v110 = atomic_load((unsigned int *)(v1 + 556)), v110 < 1) || *((unsigned char *)v100 + 17))
                {
                  *dispatch_semaphore_t v109 = *((_OWORD *)v100 + 1);
                  *((_WORD *)v100 + 16) = 257;
                  *((_OWORD *)v100 + 3) = *v109;
                  v100[18] = 0;
                }
                else
                {
                  uint64_t v90 = *((void *)v100 + 5);
                  uint64_t v91 = *(char **)(v1 + 704);
                  if (v90 + 4 > (unint64_t)v91)
                  {
                    unsigned int v92 = &v91[-*((void *)v100 + 3)];
                    int v93 = v90 - v91 + 4;
                    if (v93 <= (int)v92)
                    {
                      memmove(v91, *(const void **)(v1 + 696), v93);
                    }
                    else
                    {
                      memmove((void *)(*(void *)(v1 + 696) - (int)v92), &v91[-(int)v92], (int)v92);
                      uint64_t v94 = *(int *)(v1 + 688);
                      *((void *)v100 + 3) -= v94;
                      *((void *)v100 + 5) -= v94;
                    }
                  }
                }
                int v111 = *v100;
                int v112 = *(_DWORD *)(v1 + 604);
                v100[3] = *v100 >= v112;
                if (!*((unsigned char *)v100 + 17) && (v111 < v112 || *((unsigned char *)v100 + 33)))
                {
                  (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v100);
                  if (!*((unsigned char *)v100 + 32))
                  {
                    unint64_t v113 = *((void *)v100 + 5) - 128;
                    if (v113 < *((void *)v100 + 3)) {
                      unint64_t v113 = *((void *)v100 + 3);
                    }
                    *((void *)v100 + 5) = v113;
                    (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v100);
                    if (!*((unsigned char *)v100 + 32))
                    {
                      unint64_t v114 = *((void *)v100 + 5) - 128;
                      if (v114 < *((void *)v100 + 3)) {
                        unint64_t v114 = *((void *)v100 + 3);
                      }
                      *((void *)v100 + 5) = v114;
                      (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v100);
                      if (!*((unsigned char *)v100 + 32))
                      {
                        unint64_t v115 = *((void *)v100 + 5) - 128;
                        if (v115 < *((void *)v100 + 3)) {
                          unint64_t v115 = *((void *)v100 + 3);
                        }
                        *((void *)v100 + 5) = v115;
                        (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v100);
                        if (!*((unsigned char *)v100 + 32))
                        {
                          unint64_t v116 = *((void *)v100 + 5) - 128;
                          if (v116 < *((void *)v100 + 3)) {
                            unint64_t v116 = *((void *)v100 + 3);
                          }
                          *((void *)v100 + 5) = v116;
                          (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v100);
                          if (!*((unsigned char *)v100 + 32))
                          {
                            unint64_t v117 = *((void *)v100 + 5) - 128;
                            if (v117 < *((void *)v100 + 3)) {
                              unint64_t v117 = *((void *)v100 + 3);
                            }
                            *((void *)v100 + 5) = v117;
                            (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v100);
                            if (!*((unsigned char *)v100 + 32))
                            {
                              unint64_t v118 = *((void *)v100 + 5) - 128;
                              if (v118 < *((void *)v100 + 3)) {
                                unint64_t v118 = *((void *)v100 + 3);
                              }
                              *((void *)v100 + 5) = v118;
                              (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v100);
                              if (!*((unsigned char *)v100 + 32))
                              {
                                unint64_t v119 = *((void *)v100 + 5) - 128;
                                if (v119 < *((void *)v100 + 3)) {
                                  unint64_t v119 = *((void *)v100 + 3);
                                }
                                *((void *)v100 + 5) = v119;
                                (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v100);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                *(void *)(v1 + 640) += *((void *)v100 + 5) - *((void *)v100 + 3);
                *uint64_t v3 = *v109;
                unint64_t v120 = *(void *)(v1 + 752);
                if (v120 >= *(void *)(v1 + 704)) {
                  *(void *)(v1 + 752) = v120 - *(int *)(v1 + 688);
                }
                atomic_store(2u, v102);
                if ((int)atomic_fetch_add((atomic_uint *volatile)(v1 + 1192), 0xFFFFFFFF) < 2) {
                  break;
                }
                dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 1200));
              }
            }
          }
        }
        goto LABEL_3;
      }
      uint64_t v66 = v65 & 0x1F;
      int v67 = atomic_load((unsigned __int8 *)(v1 + v66 + 856));
      if (v67 == 6) {
        break;
      }
      __dmb(0xBu);
      unsigned int v64 = atomic_load((unsigned int *)(v1 + 1156));
      if (v65 == v64) {
        goto LABEL_81;
      }
    }
    uint64_t v68 = *(void *)(v1 + 8 * v66 + 888);
    unsigned int v69 = v65;
    atomic_compare_exchange_strong((atomic_uint *volatile)(v1 + 1156), &v69, v65 + 1);
    if (v69 != v65) {
      goto LABEL_75;
    }
    intptr_t result = sub_1DDAB3980(v1, v68);
    int v71 = *(unsigned __int8 *)(v68 + 17);
    if ((int)atomic_fetch_add((atomic_uint *volatile)(v68 + 8), 0xFFFFFFFF) <= 1)
    {
      atomic_fetch_or((atomic_uint *volatile)(v1 + 1176), 1 << *(_DWORD *)(v68 + 4));
      if ((atomic_fetch_add((atomic_uint *volatile)(v1 + 1180), 1u) & 0x80000000) != 0) {
        intptr_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 1184));
      }
    }
  }
  while (!v71);
  atomic_store(1u, (unsigned __int8 *)(v1 + 561));
  if (atomic_fetch_add((atomic_uint *volatile)(v1 + 712), 1u) == -1)
  {
    v121 = *(NSObject **)(v1 + 720);
    return dispatch_semaphore_signal(v121);
  }
  return result;
}

intptr_t sub_1DDAB3024(uint64_t a1)
{
  int v2 = 0;
  unint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = (_OWORD *)(v3 + 744);
  long long v39 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 616);
  do
  {
    if (*(void *)(v3 + 640) + *(int *)(v3 + 548) + 4 >= *(void *)(v3 + 632)) {
      uint64_t v5 = *(void *)(v3 + 632);
    }
    else {
      uint64_t v5 = *(void *)(v3 + 640) + *(int *)(v3 + 548) + 4;
    }
    uint64_t v6 = *(void *)(v3 + 664);
    while (v5 > v6)
    {
      if ((int)atomic_fetch_add((atomic_uint *volatile)(v3 + 728), 0xFFFFFFFF) <= 0) {
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v3 + 736), 0xFFFFFFFFFFFFFFFFLL);
      }
      uint64_t v6 = *(void *)(v3 + 664) + *(int *)(v3 + 680);
      *(void *)(v3 + 664) = v6;
      uint64_t v7 = *(void *)(v3 + 672);
      if (v6 > v7) {
        *(void *)(v3 + 672) = v7 + *(int *)(v3 + 688);
      }
    }
    if ((int)atomic_fetch_add((atomic_uint *volatile)(v3 + 1180), 0xFFFFFFFF) <= 0) {
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v3 + 1184), 0xFFFFFFFFFFFFFFFFLL);
    }
    do
    {
      unsigned int v8 = atomic_load((unsigned int *)(v3 + 1176));
      unsigned int v9 = v8;
      atomic_compare_exchange_strong((atomic_uint *volatile)(v3 + 1176), &v9, (v8 - 1) & v8);
    }
    while (v9 != v8);
    uint64_t v10 = *(void *)(v3 + 8 * __clz(__rbit32(v8)) + 288);
    *(_DWORD *)uint64_t v10 = v2;
    uint64_t v11 = *(int *)(v3 + 548);
    uint64_t v12 = *(void *)(v3 + 640);
    uint64_t v13 = v12 + v11;
    uint64_t v14 = *(void *)(v3 + 632);
    uint64_t v15 = v14 - v12;
    BOOL v16 = v13 < v14;
    BOOL v17 = v13 >= v14;
    if (!v16) {
      uint64_t v11 = v15;
    }
    int v18 = (_OWORD *)(v10 + 16);
    *(_OWORD *)(v10 + 16) = *v4;
    *(unsigned char *)(v10 + 32) = 0;
    uint64_t v19 = (_OWORD *)(v10 + 32);
    *(unsigned char *)(v10 + 33) = v17;
    *(_WORD *)(v10 + 34) = 32;
    *(void *)(v10 + 40) = *(void *)(v10 + 24) + v11;
    if (v11 < 1 || (int v20 = atomic_load((unsigned int *)(v3 + 556)), v20 < 1) || *(unsigned char *)(v10 + 17))
    {
      *uint64_t v19 = *v18;
      *(_WORD *)(v10 + 32) = 257;
      *(_OWORD *)(v10 + 48) = *v19;
      *(_DWORD *)(v10 + 72) = 0;
    }
    else
    {
      uint64_t v33 = *(void *)(v10 + 40);
      int v34 = *(char **)(v3 + 704);
      if (v33 + 4 > (unint64_t)v34)
      {
        int v35 = &v34[-*(void *)(v10 + 24)];
        int v36 = v33 - v34 + 4;
        if (v36 <= (int)v35)
        {
          memmove(v34, *(const void **)(v3 + 696), v36);
        }
        else
        {
          memmove((void *)(*(void *)(v3 + 696) - (int)v35), &v34[-(int)v35], (int)v35);
          uint64_t v37 = *(int *)(v3 + 688);
          *(void *)(v10 + 24) -= v37;
          *(void *)(v10 + 40) -= v37;
        }
      }
    }
    if (*(unsigned char *)(v10 + 17))
    {
      int v21 = *(unsigned __int8 **)(v10 + 40);
    }
    else
    {
      int v21 = *(unsigned __int8 **)(v10 + 40);
      if (*(unsigned char *)(v10 + 33))
      {
        int v22 = *(_DWORD *)(v10 + 36);
        int v23 = *(__int16 *)(v10 + 34);
        if (v23 >= 8)
        {
          int v23 = *(unsigned __int16 *)(v10 + 34);
          do
          {
            unsigned int v24 = v23;
            int v25 = *v21++;
            int v22 = v25 | (v22 << 8);
            v23 -= 8;
          }
          while (v24 > 0xF);
        }
        *(_DWORD *)(v10 + 36) = v22;
        *(_WORD *)(v10 + 34) = v23;
        *(void *)(v10 + 40) = v21;
      }
    }
    *(void *)(v3 + 640) += &v21[-*(void *)(v10 + 24)];
    _OWORD *v4 = *v19;
    unint64_t v26 = *(void *)(v3 + 752);
    if (v26 >= *(void *)(v3 + 704)) {
      *(void *)(v3 + 752) = v26 - *(int *)(v3 + 688);
    }
    if (*(unsigned char *)v18 && !*(unsigned char *)(v10 + 17)) {
      v39(v3, a1, v10);
    }
    sub_1DDAB34E4(v3, a1, v10);
    sub_1DDAB3750(v3, v10);
    uint64_t v27 = *(void *)(v10 + 56) - *(void *)(v10 + 24) + *(void *)(v3 + 648);
    *(void *)(v3 + 648) = v27;
    *(_OWORD *)(v3 + 760) = *(_OWORD *)(v10 + 48);
    uint64_t v28 = *(void *)(v3 + 656);
    for (int i = v27 - v28; ; int i = *(_DWORD *)(v3 + 648) - v28)
    {
      int v30 = *(_DWORD *)(v3 + 680);
      if (v30 > i) {
        break;
      }
      *(void *)(v3 + 656) = v28 + v30;
      if (atomic_fetch_add((atomic_uint *volatile)(v3 + 712), 1u) == -1) {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 720));
      }
      uint64_t v28 = *(void *)(v3 + 656);
    }
    intptr_t result = sub_1DDAB3980(v3, v10);
    int v32 = *(unsigned __int8 *)(v10 + 17);
    if ((int)atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF) <= 1)
    {
      atomic_fetch_or((atomic_uint *volatile)(v3 + 1176), 1 << *(_DWORD *)(v10 + 4));
      if ((atomic_fetch_add((atomic_uint *volatile)(v3 + 1180), 1u) & 0x80000000) != 0) {
        intptr_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 1184));
      }
    }
    ++v2;
  }
  while (!v32);
  atomic_store(1u, (unsigned __int8 *)(v3 + 561));
  if (atomic_fetch_add((atomic_uint *volatile)(v3 + 712), 1u) == -1)
  {
    long long v38 = *(NSObject **)(v3 + 720);
    return dispatch_semaphore_signal(v38);
  }
  return result;
}

uint64_t *sub_1DDAB341C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_1DDA19C9C(v2, a1[2]);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_1DDAB34AC(void *a1)
{
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAB34E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 816) + *(_DWORD *)(result + 776);
  int v7 = *(_DWORD *)(result + 600);
  int v8 = v6 >= v7;
  if (*(unsigned char *)(result + 562))
  {
    BOOL v9 = 1;
  }
  else
  {
    int v10 = *(_DWORD *)(a3 + 72) + v6 > v7;
    int v11 = *(_DWORD *)(a3 + 12);
    BOOL v9 = v11 == v8 && v11 == v10;
  }
  uint64_t v13 = (long long *)(a3 + 16);
  char v14 = v9 & *(unsigned char *)(a3 + 16) & *(unsigned char *)(result + 760);
  *(unsigned char *)(a3 + 16) = v14;
  if (v14) {
    goto LABEL_33;
  }
  *(_DWORD *)(a3 + 12) = v8;
  long long *v13 = *(_OWORD *)(result + 760);
  if (*(unsigned char *)(a3 + 17))
  {
    if (*(unsigned char *)(result + 560))
    {
      *(_DWORD *)(a3 + 72) = 0;
      long long v15 = *v13;
      *(_OWORD *)(a3 + 32) = *v13;
      *(_OWORD *)(a3 + 48) = v15;
    }
    goto LABEL_33;
  }
  unint64_t v16 = *(void *)(a3 + 24);
  if (v16 >= *(void *)(result + 696))
  {
    if (v16 <= *(void *)(a3 + 40)) {
      goto LABEL_15;
    }
LABEL_18:
    *(void *)(a3 + 24) = v16 - *(int *)(result + 688);
    intptr_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 616))(result, a2, a3);
    if (v9) {
      goto LABEL_33;
    }
    goto LABEL_19;
  }
  v16 += *(int *)(result + 688);
  *(void *)(a3 + 24) = v16;
  if (v16 > *(void *)(a3 + 40)) {
    goto LABEL_18;
  }
LABEL_15:
  intptr_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 616))(result, a2, a3);
  if (v9) {
    goto LABEL_33;
  }
LABEL_19:
  int v17 = *(_DWORD *)(v5 + 600);
  int v18 = *(_DWORD *)(a3 + 72) + v6 > v17;
  uint64_t v19 = *(int *)(a3 + 12);
  if (v19 != v18)
  {
    uint64_t v20 = *(void *)(a3 + 64);
    int v21 = v17 - v6;
    *(_DWORD *)(a3 + 72) = v21;
    int v22 = *(_DWORD *)(a3 + 20);
    int v23 = *(__int16 *)(a3 + 18);
    unsigned int v24 = *(unsigned __int8 **)(a3 + 24);
    if (v21 >= 1)
    {
      uint64_t v25 = *(void *)(v5 + 8 * v19 + 568);
      int v26 = v21;
      do
      {
        if (v23 >= 16)
        {
          int v22 = (v22 << 16) | (*v24 << 8) | v24[1];
          v24 += 2;
          v23 -= 16;
        }
        unsigned int v27 = v22 << v23;
        unsigned int v28 = *(unsigned __int16 *)(v25 + 2 * ((v22 << v23) >> 23));
        v23 += (v28 >> 10) & 0x1F;
        if (v28 <= 0x8000)
        {
          if ((v28 & 0x8000) != 0)
          {
            unsigned int v28 = *(unsigned __int16 *)(v25 + 2 * (HIWORD(v27) & 0x3FF));
            v23 += (v28 >> 10) & 0x1F;
          }
          int v29 = v28 & 0xF;
          if (v29)
          {
            if (v23 >= 16)
            {
              int v22 = (v22 << 16) | (*v24 << 8) | v24[1];
              v24 += 2;
              v23 -= 16;
            }
            v23 += v29;
          }
        }
        --v26;
      }
      while (v26);
    }
    *(_DWORD *)(a3 + 20) = v22;
    *(_WORD *)(a3 + 18) = v23;
    *(void *)(a3 + 24) = v24;
    *(_DWORD *)(a3 + 12) = v18;
    *(void *)(a3 + 64) = v20 + 2 * v21;
    intptr_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 616))(v5, a2, a3);
    *(void *)(a3 + 64) = v20;
    *(_DWORD *)(a3 + 72) += v21;
  }
LABEL_33:
  atomic_fetch_add((atomic_uint *volatile)(v5 + 556), -*(_DWORD *)(a3 + 72));
  return result;
}

unint64_t sub_1DDAB3750(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 596);
  uint64_t v5 = *(__int16 **)(a2 + 64);
  int v6 = *(_DWORD *)(a2 + 72);
  int v7 = (_OWORD *)(result + 776);
  int v8 = *(_WORD **)(result + 808);
  int v9 = *(_DWORD *)(result + 816);
  int v10 = (v9 + v6) % v4;
  int v11 = *(_DWORD *)(result + 776) + v9 + v6;
  int v12 = *(_DWORD *)(result + 552);
  int v13 = v12 - (*(_DWORD *)(result + 776) + v9);
  int v14 = v13 & ~(v13 >> 31);
  int v15 = (v13 & (v13 >> 31)) + v9;
  if (v12 < v11) {
    int v16 = v14;
  }
  else {
    int v16 = *(_DWORD *)(a2 + 72);
  }
  if (v12 < v11) {
    int v17 = v15;
  }
  else {
    int v17 = *(_DWORD *)(result + 816);
  }
  if (v12 < v11) {
    int v18 = v15 + v14;
  }
  else {
    int v18 = v9 + v6;
  }
  if (v12 < v11) {
    int v19 = 0;
  }
  else {
    int v19 = v10;
  }
  if (v18 >= v4 || v17 < 1)
  {
    if (v17)
    {
      __int16 v20 = *v5++;
      v8[v17++] = v20;
      --v16;
    }
  }
  else
  {
    memmove(&v5[v17], *(const void **)(a2 + 64), 2 * v16);
    intptr_t result = (unint64_t)memmove(v5, v8, 2 * v17);
    int v8 = 0;
    v16 += v17;
    int v17 = 0;
  }
  *(void *)(v3 + 784) = v5;
  *(_DWORD *)(v3 + 792) = v16 - v19;
  *(void *)(v3 + 808) = v8;
  *(_DWORD *)(v3 + 816) = v17;
  *(_OWORD *)(a2 + 80) = *v7;
  long long v21 = v7[1];
  long long v22 = v7[2];
  long long v23 = v7[4];
  *(_OWORD *)(a2 + 128) = v7[3];
  *(_OWORD *)(a2 + 144) = v23;
  *(_OWORD *)(a2 + 96) = v21;
  *(_OWORD *)(a2 + 112) = v22;
  if (v19 <= 0) {
    unsigned int v24 = 1;
  }
  else {
    unsigned int v24 = 2;
  }
  atomic_store(v24, (unsigned int *)(a2 + 8));
  int v25 = *(_DWORD *)(v3 + 816);
  uint64_t v26 = 808;
  if (!v25) {
    uint64_t v26 = 784;
  }
  unsigned int v27 = *(__int16 **)(v3 + v26);
  uint64_t v28 = *(void *)(v3 + 824);
  int v29 = *(_DWORD *)(v3 + 832);
  int v30 = *(_DWORD *)(v3 + 776);
  if (*(_DWORD *)(v3 + 792) + v25 >= 1)
  {
    int v31 = v30 + v25;
    if (v25) {
      int v32 = 0;
    }
    else {
      int v32 = *(_DWORD *)(v3 + 792);
    }
    int v33 = v31 + v32;
    int v34 = *(_DWORD *)(v3 + 776);
    while (1)
    {
      if (v30 == v33)
      {
        if (v30 != v31) {
          break;
        }
        unsigned int v27 = *(__int16 **)(v3 + 784);
        int v37 = *(_DWORD *)(v3 + 792);
        if (!v37)
        {
          int v30 = v31;
          break;
        }
        int v33 = v37 + v31;
      }
      if (v30 == v34)
      {
        long long v38 = (_DWORD *)(v3 + 836 + 4 * v29);
        intptr_t result = v38[1];
        int v39 = result + v27[1];
        *v38 += *v27;
        v38[1] = v39;
        v29 ^= 2u;
        int v34 = v30 + v4;
      }
      if (v34 >= v33) {
        int v35 = v33;
      }
      else {
        int v35 = v34;
      }
      uint64_t v36 = 2 * (v35 - v30);
      unsigned int v27 = (__int16 *)((char *)v27 + v36);
      v28 += v36;
      int v30 = v35;
    }
  }
  *(_DWORD *)(v3 + 776) = v30;
  *(void *)(v3 + 824) = v28;
  *(_DWORD *)(v3 + 832) = v29;
  *(void *)(v3 + 784) = 0;
  *(_DWORD *)(v3 + 792) = 0;
  *(void *)(v3 + 808) = 0;
  *(void *)(v3 + 800) = 0;
  *(_DWORD *)(v3 + 816) = 0;
  if (v19 >= 1)
  {
    *(void *)(v3 + 800) = a2;
    *(void *)(v3 + 808) = v27;
    *(_DWORD *)(v3 + 816) = v19;
  }
  return result;
}

intptr_t sub_1DDAB3980(intptr_t result, uint64_t a2)
{
  intptr_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 120);
  uint64_t v5 = 112;
  if (!v4) {
    uint64_t v5 = 88;
  }
  int v6 = *(__int16 **)(a2 + v5);
  uint64_t v7 = *(void *)(result + 584);
  int v8 = *(_WORD **)(a2 + 128);
  int v9 = *(_DWORD *)(a2 + 136);
  int v10 = *(_DWORD *)(a2 + 80);
  int v11 = v10 + v4;
  int v12 = v10 + v4;
  if (!v4) {
    int v12 = *(_DWORD *)(a2 + 96) + v11;
  }
  int v13 = 0;
  int v14 = 0;
  int v15 = *(_DWORD *)(result + 596);
  uint64_t v16 = a2 + 140;
  int v17 = *(_DWORD *)(a2 + 80);
  int v28 = v15;
  uint64_t v27 = a2 + 140;
  while (1)
  {
    if (v10 != v12) {
      goto LABEL_14;
    }
    if (v10 != v11) {
      return result;
    }
    uint64_t v18 = *(void *)(a2 + 104);
    if (v18)
    {
      if ((int)atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF) <= 1)
      {
        *(void *)(a2 + 104) = 0;
        atomic_fetch_or((atomic_uint *volatile)(v3 + 1176), 1 << *(_DWORD *)(v18 + 4));
        if ((atomic_fetch_add((atomic_uint *volatile)(v3 + 1180), 1u) & 0x80000000) != 0)
        {
          intptr_t result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 1184));
          uint64_t v16 = v27;
          int v15 = v28;
        }
      }
    }
    int v19 = *(_DWORD *)(a2 + 96);
    if (!v19) {
      return result;
    }
    int v6 = *(__int16 **)(a2 + 88);
    int v12 = v19 + v11;
LABEL_14:
    if (v10 == v17)
    {
      __int16 v20 = (int *)(v16 + 4 * v9);
      int v13 = *v20;
      int v14 = v20[1];
      int v21 = v14 + v6[1];
      *v20 += *v6;
      v20[1] = v21;
      v9 ^= 2u;
      int v17 = v10 + v15;
    }
    if (v17 >= v12) {
      int v22 = v12;
    }
    else {
      int v22 = v17;
    }
    int v23 = v22 - v10;
    int v10 = v22;
    if (v23 >= 1)
    {
      unsigned int v24 = &v6[v23];
      do
      {
        v13 += *v6;
        v14 += v6[1];
        __int16 v25 = *(_WORD *)(v7 + 2 * (unsigned __int16)-(-(__int16)v14 & (-v14 >> 31)));
        uint64_t v26 = v6 + 2;
        _WORD *v8 = *(_WORD *)(v7 + 2 * (unsigned __int16)-(-(__int16)v13 & (-v13 >> 31)));
        v8[1] = v25;
        v8 += 2;
        int v6 = v26;
      }
      while (v26 < v24);
      int v6 = v26;
      int v10 = v22;
    }
  }
}

void sub_1DDAB3B44(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  intptr_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPacked12Unpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v52[0] = MEMORY[0x1E4F143A8];
  v52[1] = 3221225472;
  v52[2] = sub_1DDAB41E4;
  v52[3] = &unk_1E6D04A58;
  v52[4] = a1;
  int v4 = (void (**)(void))MEMORY[0x1E01C46E0](v52);
  unsigned int v6 = *(_DWORD *)(a1 + 44);
  unint64_t v5 = *(unsigned int *)(a1 + 48);
  if (*(unsigned char *)(a1 + 196)) {
    unsigned int v7 = (2 * ((3435973837u * (unint64_t)(v6 + 9)) >> 32)) & 0xFFFFFFF0;
  }
  else {
    unsigned int v7 = ((3 * v6) >> 1) & 0x1FFFFFFF;
  }
  if (*(unsigned char *)(a1 + 196)) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = 15;
  }
  int v47 = *(_DWORD *)(a1 + 188);
  if (v5 * v6 > (*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v9 = *(unsigned int *)(a1 + 192);
  *(_DWORD *)buf = 0;
  if (v9)
  {
    if (v9 == 2)
    {
      unsigned int v10 = v7 * (v5 >> 1);
      if (v10 > (*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1) >> 1)
      {
        int v42 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v42, "RawCameraException");
        __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      *(_DWORD *)buf = ((*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1) >> 1) - v10;
    }
    unint64_t v44 = 0;
    int v11 = 0;
    int v46 = 2 * v6;
    unsigned int v12 = v6 & 0xFFFFFFF8;
    uint64_t v45 = (v9 - 1) * v6;
    unint64_t v48 = v5;
    uint64_t v49 = v9;
    uint64_t v43 = v4;
    do
    {
      uint64_t v13 = sub_1DDAA5B9C(a1);
      if (v44 < v5)
      {
        int v14 = (char *)(v13 + 2 * v6 * v44);
        unsigned int v15 = v44;
        do
        {
          uint64_t v16 = &v14[v46 - v7];
          if ((unint64_t)&v16[v7] > (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 120))(a1))
          {
            long long v40 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v40, "RawCameraException");
            __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          (*(void (**)(void, char *, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), &v14[v46 - v7], v7);
          int v17 = &v16[v11];
          if (v15) {
            int v18 = 0;
          }
          else {
            int v18 = v47;
          }
          if (!v15) {
            int v11 = v47;
          }
          if (*(unsigned char *)(a1 + 197))
          {
            if (v12)
            {
              unsigned int v19 = 0;
              unint64_t v5 = v48;
              do
              {
                unsigned int v20 = bswap32(*(_DWORD *)v17);
                unsigned int v21 = bswap32(*((_DWORD *)v17 + 1));
                unsigned int v22 = bswap32(*((_DWORD *)v17 + 2));
                *(_WORD *)int v14 = (16 * v20) | ((unsigned __int16)v20 >> 12);
                *((_WORD *)v14 + 1) = v20 & 0xF00 | BYTE2(v20);
                *((_WORD *)v14 + 2) = (v20 >> 20) & 0xFF0 | (v21 >> 4);
                *((_WORD *)v14 + 3) = BYTE1(v21) | ((v21 & 0xF) << 8);
                *((_WORD *)v14 + 4) = (v21 >> 12) & 0xFF0 | (v21 >> 28);
                *((_WORD *)v14 + 5) = v22 | ((HIBYTE(v21) & 0xF) << 8);
                *((_WORD *)v14 + 6) = (v22 & 0xFF00 | BYTE2(v22)) >> 4;
                *((_WORD *)v14 + 7) = (v22 >> 8) & 0xF00 | HIBYTE(v22);
                v17 += 12;
                v14 += 16;
                v19 += 8;
              }
              while (v19 < v12);
              unsigned int v23 = (((v6 & 0xFFFFFFF8) - 1) & 0xFFFFFFF8) + 8;
            }
            else
            {
              unsigned int v23 = 0;
              unint64_t v5 = v48;
            }
            if (v23 < v6) {
              v14 += 4 * ((v6 + ~v23) >> 1) + 4;
            }
          }
          else
          {
            if (v6 == v6 % 0xA)
            {
              unsigned int v24 = 0;
              unint64_t v5 = v48;
            }
            else
            {
              unsigned int v24 = 0;
              unint64_t v5 = v48;
              do
              {
                unsigned int v25 = v17[1];
                __int16 v26 = (v25 >> 4) | (16 * *v17);
                __int16 v27 = v17[2] | ((v25 & 0xF) << 8);
                unsigned int v28 = v17[4];
                LOWORD(v25) = (v28 >> 4) | (16 * v17[3]);
                __int16 v29 = v17[5] | ((v28 & 0xF) << 8);
                *(_WORD *)int v14 = v26;
                *((_WORD *)v14 + 1) = v27;
                unsigned int v30 = v17[7];
                __int16 v31 = (v30 >> 4) | (16 * v17[6]);
                LOWORD(v28) = v17[8] | ((v30 & 0xF) << 8);
                *((_WORD *)v14 + 2) = v25;
                *((_WORD *)v14 + 3) = v29;
                unsigned int v32 = v17[10];
                int v33 = (v32 >> 4) | (16 * v17[9]);
                __int16 v34 = v17[11] | ((v32 & 0xF) << 8);
                *((_WORD *)v14 + 4) = v31;
                *((_WORD *)v14 + 5) = v28;
                unsigned int v35 = v17[13];
                int v36 = (v35 >> 4) | (16 * v17[12]);
                LOWORD(v28) = v17[14] | ((v35 & 0xF) << 8);
                *((_WORD *)v14 + 6) = v33;
                *((_WORD *)v14 + 7) = v34;
                *((_WORD *)v14 + 8) = v36;
                *((_WORD *)v14 + 9) = v28;
                v17 += v8;
                v14 += 20;
                v24 += 10;
              }
              while (v24 < 10 * (v6 / 0xA));
            }
            while (v24 < v6)
            {
              unsigned int v37 = v17[1];
              __int16 v38 = v17[2] | ((v37 & 0xF) << 8);
              *(_WORD *)int v14 = (v37 >> 4) | (16 * *v17);
              *((_WORD *)v14 + 1) = v38;
              v17 += 3;
              v14 += 4;
              v24 += 2;
            }
          }
          v7 += v18;
          v14 += 2 * v45;
          v15 += v49;
        }
        while (v15 < v5);
      }
      int v4 = v43;
      if (!v44 && *(_DWORD *)buf)
      {
        uint64_t v39 = *(void *)(a1 + 24);
        sub_1DDA18410(&v50, (int *)buf);
        (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v39 + 40))(v39, &v50, 1);
        unint64_t v5 = v48;
      }
      ++v44;
    }
    while (v44 != v49);
  }
  v4[2](v4);
}

void sub_1DDAB4178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB41E4(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  intptr_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPacked12Unpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDAB426C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 188) = a2;
  return result;
}

uint64_t sub_1DDAB4274(uint64_t result, int a2)
{
  if ((a2 - 3) >= 0xFFFFFFFE) {
    *(_DWORD *)(result + 192) = a2;
  }
  return result;
}

uint64_t sub_1DDAB4288(uint64_t result, char a2)
{
  *(unsigned char *)(result + 196) = a2;
  return result;
}

uint64_t sub_1DDAB4290(uint64_t result, char a2)
{
  *(unsigned char *)(result + 197) = a2;
  return result;
}

void sub_1DDAB4298(void *a1)
{
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDAB42D0(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  intptr_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "COlympus2FieldPacked12Unpacker", (const char *)&unk_1DDC3ACB6, (uint8_t *)&buf, 2u);
  }

  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 3221225472;
  v41[2] = sub_1DDAB4784;
  v41[3] = &unk_1E6D04A58;
  v41[4] = a1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v41);
  uint64_t v5 = *(unsigned int *)(a1 + 44);
  if ((v5 - 1000) > 0x1770 || (unsigned int v6 = *(_DWORD *)(a1 + 48), v6 < 0x3E8) || v6 >= 0x1B59)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v7 = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1);
  unsigned int v8 = ((3 * v5) >> 1) & 0x1FFFFFFF;
  if (v7 < v8 * v6)
  {
    unsigned int v35 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v35, "RawCameraException");
    __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v9 = 0;
  uint64_t v39 = (2 * v5);
  uint64_t v10 = -(uint64_t)v8;
  int v36 = (void (**)(void))v4;
  unsigned int v37 = (int *)(a1 + 188);
  char v11 = 1;
  do
  {
    char v38 = v11;
    unsigned int v12 = (_WORD *)(sub_1DDAA5B9C(a1) + 2 * v9 * v5);
    do
    {
      uint64_t v13 = sub_1DDAA5B9C(a1);
      int v14 = (char *)v12 + v39;
      if ((unint64_t)v12 + v39 > v13 + 2 * (unint64_t)(v5 * v6))
      {
        int v33 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v33, "RawCameraException");
        __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned int v15 = (unsigned __int8 *)&v14[v10];
      (*(void (**)(void, char *, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), &v14[v10], ((3 * v5) >> 1) & 0x1FFFFFFF);
      unsigned int v16 = 0;
      do
      {
        unsigned int v17 = v15[1];
        __int16 v18 = (v17 >> 4) | (16 * *v15);
        __int16 v19 = v15[2] | ((v17 & 0xF) << 8);
        unsigned int v20 = v15[4];
        LOWORD(v17) = (v20 >> 4) | (16 * v15[3]);
        __int16 v21 = v15[5] | ((v20 & 0xF) << 8);
        _WORD *v12 = v18;
        v12[1] = v19;
        unsigned int v22 = v15[7];
        __int16 v23 = (v22 >> 4) | (16 * v15[6]);
        LOWORD(v20) = v15[8] | ((v22 & 0xF) << 8);
        v12[2] = v17;
        v12[3] = v21;
        unsigned int v24 = v15[10];
        int v25 = (v24 >> 4) | (16 * v15[9]);
        __int16 v26 = v15[11] | ((v24 & 0xF) << 8);
        v12[4] = v23;
        v12[5] = v20;
        unsigned int v27 = v15[13];
        int v28 = (v27 >> 4) | (16 * v15[12]);
        LOWORD(v20) = v15[14] | ((v27 & 0xF) << 8);
        v12[6] = v25;
        v12[7] = v26;
        v12[8] = v28;
        v12[9] = v20;
        v15 += 15;
        v12 += 10;
        v16 += 10;
      }
      while (v16 < v5 - (unsigned __int16)v5 % 0xAu);
      if (v16 < v5)
      {
        uint64_t v29 = 0;
        do
        {
          unsigned int v30 = v15[v29 + 1];
          __int16 v31 = v15[v29 + 2] | ((v30 & 0xF) << 8);
          _WORD *v12 = (v30 >> 4) | (16 * v15[v29]);
          v12[1] = v31;
          v12 += 2;
          v16 += 2;
          v29 += 3;
        }
        while (v16 < v5);
      }
      v12 += v5;
      LODWORD(v9) = v9 + 2;
    }
    while (v9 < v6);
    if ((v38 & (*v37 != 0)) != 0)
    {
      uint64_t v32 = *(void *)(a1 + 24);
      sub_1DDA18410(&buf, v37);
      (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v32 + 40))(v32, &buf, 1);
    }
    char v11 = 0;
    uint64_t v9 = 1;
  }
  while ((v38 & 1) != 0);
  v36[2](v36);
}

void sub_1DDAB4724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB4784(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  intptr_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "COlympus2FieldPacked12Unpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDAB480C(void *a1)
{
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDAB4844(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  intptr_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CUnpackedUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = sub_1DDAB4B70;
  v24[3] = &unk_1E6D04A58;
  v24[4] = a1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v24);
  if (*(_DWORD *)(a1 + 188) >= 0x11u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = *(int *)(a1 + 44);
  uint64_t v6 = *(int *)(a1 + 48);
  if (2 * v5 * v6 > (unint64_t)(*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1))
  {
    unsigned int v22 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v22, "RawCameraException");
    __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __int16 v23 = (void (**)(void))v4;
  uint64_t v7 = sub_1DDAA72BC(a1);
  int v8 = *(_DWORD *)(a1 + 188);
  uint64_t v9 = sub_1DDAA5B9C(a1);
  if ((int)v6 >= 1)
  {
    uint64_t v10 = (_WORD *)v9;
    int v11 = 0;
    char v12 = 16 - v8;
    BOOL v13 = v7 == 1;
    BOOL v14 = v7 != 1;
    uint64_t v15 = v13;
    if ((int)v5 >> 1 <= 1) {
      int v16 = 1;
    }
    else {
      int v16 = (int)v5 >> 1;
    }
    while (1)
    {
      (*(void (**)(void, _WORD *, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v10, 2 * v5);
      if ((int)v5 >= 2) {
        break;
      }
      unsigned int v20 = (unsigned __int8 *)v10 + v15;
      __int16 v19 = (unsigned __int8 *)v10 + v14;
      if (v5) {
        goto LABEL_17;
      }
LABEL_18:
      if (++v11 == v6) {
        goto LABEL_19;
      }
    }
    int v17 = v16;
    do
    {
      unsigned int v18 = *((unsigned __int8 *)v10 + v14 + 2) | (*((unsigned __int8 *)v10 + v15 + 2) << 8);
      *uint64_t v10 = (*((unsigned __int8 *)v10 + v14) | (*((unsigned __int8 *)v10 + v15) << 8)) >> v12;
      v10[1] = v18 >> v12;
      v10 += 2;
      --v17;
    }
    while (v17);
    __int16 v19 = (unsigned __int8 *)v10 + v14;
    unsigned int v20 = (unsigned __int8 *)v10 + v15;
    if ((v5 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    *v10++ = (*v19 | (*v20 << 8)) >> v12;
    goto LABEL_18;
  }
LABEL_19:
  v23[2](v23);
}

void sub_1DDAB4B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB4B70(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  intptr_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpackedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDAB4BF8(os_signpost_id_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7 = sub_1DDA83CFC();
  int v8 = v7;
  if (a1 + 1 >= 2 && os_signpost_enabled(v7))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v8, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CUnpackedUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1DDAB4F34;
  v30[3] = &unk_1E6D04A58;
  v30[4] = a1;
  uint64_t v9 = MEMORY[0x1E01C46E0](v30);
  if (*(_DWORD *)(a1 + 188) >= 0x11u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = *(unsigned int *)(a1 + 44);
  int v10 = *(_DWORD *)(a1 + 48);
  uint64_t v25 = *a3;
  uint64_t v12 = a3[2];
  uint64_t v24 = a3[1];
  uint64_t v13 = a3[3];
  if ((*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1) < 2 * (int)v11 * v10)
  {
    unsigned int v20 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v20, "RawCameraException");
    __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __int16 v21 = (void (**)(void))v9;
  uint64_t v14 = sub_1DDAA72BC(a1);
  if (v13)
  {
    uint64_t v15 = 0;
    int v16 = 16 - *(_DWORD *)(a1 + 188);
    BOOL v23 = v14 != 1;
    BOOL v22 = v14 == 1;
    do
    {
      uint64_t v17 = *(void *)(a1 + 24);
      *(void *)int buf = 2 * (v25 + (v15 + v24) * v11);
      int v31 = *(_DWORD *)(a1 + 40);
      int v28 = *sub_1DDA7B054(&v31, buf);
      sub_1DDA1B354(&v29, (unsigned int *)&v28);
      (*(void (**)(uint64_t, uint64_t, void, int *))(*(void *)v17 + 24))(v17, a2, (2 * v12), &v29);
      if (v12)
      {
        uint64_t v18 = 0;
        do
        {
          *(_WORD *)(a2 + v18) = (*(unsigned __int8 *)(a2 + v23 + v18) | (*(unsigned __int8 *)(a2 + v22 + v18) << 8)) >> v16;
          v18 += 2;
        }
        while (2 * v12 != v18);
      }
      ++v15;
      a2 += a4;
    }
    while (v15 != v13);
  }
  v21[2](v21);
}

void sub_1DDAB4EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB4F34(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  intptr_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpackedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDAB4FBC(void *a1)
{
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDAB4FF4(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  intptr_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CUnpackedLE16Shift4Unpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1DDAB5254;
  v13[3] = &unk_1E6D04A58;
  v13[4] = a1;
  os_signpost_id_t v4 = (void (**)(void))MEMORY[0x1E01C46E0](v13);
  uint64_t v5 = (_WORD *)sub_1DDAA5B9C(a1);
  uint64_t v6 = *(unsigned int *)(a1 + 44);
  int v7 = *(_DWORD *)(a1 + 48);
  if ((*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1) < 2 * (int)v6 * v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v7)
  {
    int v8 = 0;
    if (v6 >> 1 <= 1) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = v6 >> 1;
    }
    do
    {
      (*(void (**)(void, _WORD *, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5, 2 * v6);
      unsigned int v10 = v9;
      if (v6 >= 2)
      {
        do
        {
          int v11 = (unsigned __int16)v5[1] >> 4;
          *v5 >>= 4;
          v5[1] = v11;
          v5 += 2;
          --v10;
        }
        while (v10);
      }
      if (v6) {
        *v5++ >>= 4;
      }
      ++v8;
    }
    while (v8 != v7);
  }
  v4[2](v4);
}

void sub_1DDAB5210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB5254(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  intptr_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpackedLE16Shift4Unpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDAB52DC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 16) + 32 * *(_DWORD *)(a1 + 20));
}

uint64_t sub_1DDAB52E8(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 + a2) < 0x21)
  {
    uint64_t v7 = 0;
    if (!a2) {
      return v7;
    }
    goto LABEL_8;
  }
  unsigned int v3 = 0;
  unsigned int v5 = *(_DWORD *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 28);
  unsigned int v6 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v6;
  if (4 * v6 < v5) {
    unsigned int v3 = bswap32(*(_DWORD *)(*(void *)(a1 + 32) + 4 * v6));
  }
  *(_DWORD *)(a1 + 28) = v3;
  if (4 * v6 > v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v7 = v4 & ~(-1 << -(char)v2);
  a2 -= 32 - v2;
  int v2 = 0;
  if (a2)
  {
LABEL_8:
    int v8 = v2 + a2;
    uint64_t v7 = (*(_DWORD *)(a1 + 28) >> -(char)v8) & ~(-1 << a2) | (v7 << a2);
    *(_DWORD *)(a1 + 16) = v8;
    if (v8 == 32)
    {
      unsigned int v9 = 0;
      unsigned int v10 = *(_DWORD *)(a1 + 24);
      unsigned int v11 = *(_DWORD *)(a1 + 20) + 1;
      *(_DWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 20) = v11;
      if (v10 > 4 * v11) {
        unsigned int v9 = bswap32(*(_DWORD *)(*(void *)(a1 + 32) + 4 * v11));
      }
      *(_DWORD *)(a1 + 28) = v9;
    }
  }
  return v7;
}

void sub_1DDAB5410(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAB5424(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 28);
  int v2 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v2 + 1;
  if (v2 == 31)
  {
    unsigned int v3 = 0;
    unsigned int v4 = *(_DWORD *)(a1 + 24);
    unsigned int v5 = *(_DWORD *)(a1 + 20) + 1;
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 20) = v5;
    if (v4 > 4 * v5) {
      unsigned int v3 = bswap32(*(_DWORD *)(*(void *)(a1 + 32) + 4 * v5));
    }
    *(_DWORD *)(a1 + 28) = v3;
  }
  return (v1 >> ~(_BYTE)v2) & 1;
}

uint64_t sub_1DDAB5474(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  LODWORD(result) = 0;
  unsigned int v3 = *(_DWORD *)(v2 + 28);
  int v4 = *(_DWORD *)(v2 + 16);
  do
  {
    while (1)
    {
      unsigned int v5 = (0x80000000 >> v4) & v3;
      intptr_t result = v5 ? result : (result + 1);
      if (v4 != 31) {
        break;
      }
      unsigned int v3 = 0;
      unsigned int v6 = *(_DWORD *)(v2 + 24);
      unsigned int v7 = *(_DWORD *)(v2 + 20) + 1;
      *(_DWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 20) = v7;
      unsigned int v8 = 4 * v7;
      if (4 * v7 < v6) {
        unsigned int v3 = bswap32(*(_DWORD *)(*(void *)(v2 + 32) + 4 * v7));
      }
      int v4 = 0;
      *(_DWORD *)(v2 + 28) = v3;
      if (v8 > v6 || v5 != 0 || result >= a2) {
        return result;
      }
    }
    ++v4;
  }
  while (!v5 && result < a2);
  *(_DWORD *)(v2 + 16) = v4;
  return result;
}

BOOL sub_1DDAB54FC(_DWORD *a1, int a2)
{
  return a1[6] >= (a2 + a1[4] + 32 * a1[5] + 7) >> 3;
}

void sub_1DDAB551C(int *a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  unsigned int v3 = v2;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "CUnpackedLE16Shift4Remove0Unpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = sub_1DDAB57B8;
  v24[3] = &unk_1E6D04A58;
  v24[4] = a1;
  int v4 = (void (**)(void))MEMORY[0x1E01C46E0](v24);
  sub_1DDAB4FF4((os_signpost_id_t)a1);
  uint64_t v5 = a1[11];
  if (v5 <= 1 || (unsigned int v6 = a1[12], v6 <= 1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v7 = a1[47];
  if ((v7 & 0xC000) == 0x8000) {
    unsigned int v8 = 3;
  }
  else {
    unsigned int v8 = 2;
  }
  if ((v7 & 0xC00) == 0x800) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = v8;
  }
  if ((v7 & 0x3000) == 0x2000) {
    unsigned int v10 = 3;
  }
  else {
    unsigned int v10 = v8;
  }
  unsigned int v11 = v6 - 2;
  if (v10 < v6 - 2)
  {
    unsigned int v12 = v5 - 2;
    uint64_t v13 = -2 * (int)v5;
    do
    {
      uint64_t v14 = sub_1DDAA5B9C((uint64_t)a1);
      if (v9 < v12)
      {
        uint64_t v15 = (_WORD *)(v14 + 2 * v10 * v5 + 2 * v9);
        unsigned int v16 = v9;
        do
        {
          if (!*v15)
          {
            int v17 = (unsigned __int16)v15[2 * v5];
            int v18 = (unsigned __int16)*(v15 - 2);
            int v19 = (unsigned __int16)v15[2];
            if (v15[v13]) {
              BOOL v20 = v17 == 0;
            }
            else {
              BOOL v20 = 1;
            }
            if (!v20 && v19 != 0 && v18 != 0) {
              *uint64_t v15 = (unsigned __int16)(v15[v13] + v17 + v18 + v19 + 2) >> 2;
            }
          }
          v16 += 2;
          v15 += 2;
        }
        while (v16 < v12);
      }
      v10 += 2;
    }
    while (v10 < v11);
  }
  v4[2](v4);
}

void sub_1DDAB5770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB57B8(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  unsigned int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpackedLE16Shift4Remove0Unpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDAB5840(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA83CFC();
  unsigned int v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CSonyUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = sub_1DDAB5AF4;
  v19[3] = &unk_1E6D04A58;
  v19[4] = v1;
  os_signpost_id_t v4 = (void (**)(void))MEMORY[0x1E01C46E0](v19);
  uint64_t v18 = 0;
  uint64_t v5 = (_WORD *)sub_1DDAA5B9C(v1);
  unsigned int v6 = *(_DWORD *)(v1 + 44);
  int v7 = *(_DWORD *)(v1 + 48);
  if (v6 >= 0xD20) {
    uint64_t v8 = 3360;
  }
  else {
    uint64_t v8 = v6;
  }
  sub_1DDAB5B7C(v1, (int *)&v18 + 1, v20, (int *)&v18);
  sub_1DDAB5E0C(v20, &v18, SHIDWORD(v18));
  if (v7)
  {
    int v9 = 0;
    char v10 = v18;
    unsigned int v11 = v8 >> 1;
    do
    {
      (*(void (**)(void, uint8_t *, void))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), buf, (2 * v8));
      if (v8 >= 2)
      {
        int v12 = 0;
        uint64_t v13 = buf;
        do
        {
          int v14 = v20[(v10 + (_BYTE)v12 + 65) & 0x7F] ^ v20[(v10 + (_BYTE)v12 + 1) & 0x7F];
          *(_DWORD *)v13 ^= v14;
          v13 += 4;
          v20[(v10 + (_BYTE)v12++) & 0x7F] = v14;
        }
        while (v11 != v12);
      }
      if (v8)
      {
        uint64_t v15 = buf;
        uint64_t v16 = v8;
        do
        {
          unsigned int v17 = *(unsigned __int16 *)v15;
          v15 += 2;
          *v5++ = bswap32(v17) >> 16;
          --v16;
        }
        while (v16);
      }
      v10 += v11;
      ++v9;
    }
    while (v9 != v7);
  }
  v4[2](v4);
}

void sub_1DDAB5AA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB5AF4(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  unsigned int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSonyUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t *sub_1DDAB5B7C(uint64_t a1, int *a2, int *a3, int *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v7 = (uint64_t *)(a1 + 24);
  sub_1DDA49310(v18, (uint64_t *)(a1 + 24));
  sub_1DDA29F88(v17, v7, 2);
  uint64_t v16 = 200896;
  uint64_t v8 = *v7;
  sub_1DDA1B2DC(&v19, &v16);
  (*(void (**)(uint64_t, long long *, void))(*(void *)v8 + 40))(v8, &v19, 0);
  uint64_t v16 = (int)(4 * sub_1DDA19DA0(*v7) - 1);
  uint64_t v9 = *v7;
  sub_1DDA1B2DC(&v19, &v16);
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v9 + 40))(v9, &v19, 1);
  *a2 = sub_1DDA19EC8(*v7);
  uint64_t v16 = 164600;
  uint64_t v10 = *v7;
  sub_1DDA1B2DC(&v19, &v16);
  (*(void (**)(uint64_t, long long *, void))(*(void *)v10 + 40))(v10, &v19, 0);
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)*v7 + 32))(*v7, &v19, 40);
  sub_1DDAB5E0C(a3, a4, *a2);
  uint64_t v11 = 0;
  int v12 = *a4;
  *a4 += 10;
  do
  {
    int v13 = a3[((_BYTE)v12 + (_BYTE)v11 + 65) & 0x7F] ^ a3[((_BYTE)v12 + (_BYTE)v11 + 1) & 0x7F];
    int v14 = v13 ^ *((_DWORD *)&v19 + v11);
    a3[((_BYTE)v12 + (_BYTE)v11) & 0x7F] = v13;
    *((_DWORD *)&v19 + v11++) = v14;
  }
  while (v11 != 10);
  *a2 = *(_DWORD *)((char *)&v20 + 6);
  sub_1DDA2A000(v17);
  return sub_1DDA1AA18(v18);
}

void sub_1DDAB5DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1DDA2A000((uint64_t *)va);
  sub_1DDA1AA18((uint64_t *)va1);
  _Unwind_Resume(a1);
}

int *sub_1DDAB5E0C(int *result, _DWORD *a2, int a3)
{
  uint64_t v3 = 0;
  int v4 = 48828125 * a3 + 1;
  int v5 = 48828125 * v4 + 1;
  int v6 = 48828125 * v5 + 1;
  char *result = v4;
  result[1] = v5;
  unsigned int v7 = ((97656250 * v6) | ((v6 ^ v4) >> 31)) + 2;
  result[2] = v6;
  result[3] = v7;
  do
  {
    int v8 = v6 ^ v4;
    int v4 = result[v3 + 1];
    int v6 = v7;
    HIDWORD(v9) = v8;
    LODWORD(v9) = v7 ^ v4;
    unsigned int v7 = v9 >> 31;
    result[v3 + 4] = v7;
    ++v3;
  }
  while (v3 != 123);
  for (uint64_t i = 0; i != 127; ++i)
    result[i] = bswap32(result[i]);
  *a2 = 127;
  return result;
}

uint64_t sub_1DDAB5EB0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v7);
  uint64_t v2 = v7;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1DDAB6328;
  v6[3] = &unk_1E6D05178;
  v6[4] = a1;
  uint64_t v4 = sub_1DDAB5FB8(v2, @"lensCorrectionFilter", v3, v6);
  if (v8) {
    sub_1DDA18310(v8);
  }
  return v4;
}

void sub_1DDAB5FA0(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAB5FB8(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  sub_1DDAB6A18(v7, a3, &__p);
  unint64_t v9 = (uint64_t **)(a1 + 24);
  uint64_t v10 = sub_1DDA2A530(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_1DDAB6B68;
    _DWORD v29[3] = &unk_1E6D051C0;
    int v13 = (uint64_t (**)(void))v8;
    id v30 = v13;
    sub_1DDB657E4(a1, v7, v29, &p_p);
    uint64_t v18 = (long long *)p_p;
    if (p_p)
    {
      long long v19 = sub_1DDB67AB8((uint64_t)p_p, v14, v15, v16, v17);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (v34) {
      sub_1DDA18310(v34);
    }

    if (!v18) {
      uint64_t v12 = v13[2](v13);
    }
    p_p = &__p;
    uint64_t v24 = sub_1DDAB6C70(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_p);
    uint64_t v25 = (void (**)(uint64_t, void, std::string **, void, void))(v24 + 7);
    v32[1] = (uint64_t (*)(void, void, void, void, void))v12;
    v32[0] = (uint64_t (*)(void, void, void, void, void))sub_1DDAB6E90;
    if (v32 != (uint64_t (**)(void, void, void, void, void))(v24 + 7))
    {
      __int16 v26 = *v25;
      if (*v25)
      {
        p_p = 0;
        __int16 v34 = 0;
        v26(2, v25, &p_p, 0, 0);
        v32[0](2, v32, v25, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(void, void, void, void, void), void, void))p_p)(2, &p_p, v32, 0, 0);
        sub_1DDAB6E58((uint64_t (**)(void, void, void, void, void))&p_p);
      }
      else
      {
        *((_DWORD *)v24 + 16) = v12;
        v24[7] = (uint64_t)sub_1DDAB6E90;
        v32[0] = 0;
      }
    }
    sub_1DDAB6E58(v32);
  }
  else
  {
    uint64_t v11 = (unsigned int *)sub_1DDAB6BB4((uint64_t (**)(uint64_t, void, void, void *, void *))v10 + 7);
    if (!v11) {
      sub_1DDAB6C00();
    }
    uint64_t v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v12;
}

void sub_1DDAB6298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  __cxa_free_exception(v28);

  if (a26) {
    sub_1DDA18310(a26);
  }

  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDAB6328(uint64_t a1)
{
  return sub_1DDADC914(*(void *)(a1 + 32));
}

void sub_1DDAB6330(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v7);
  uint64_t v4 = v7;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1DDAB6944;
  v6[3] = &unk_1E6D05198;
  v6[4] = a1;
  sub_1DDAB6440(v4, @"lensCorrectionParameters", v5, v6, a2);
  if (v8) {
    sub_1DDA18310(v8);
  }
}

void sub_1DDAB6428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAB6440(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, void *a4@<X3>, void *a5@<X8>)
{
  void (**v46)(void *__return_ptr);
  id v47;
  void *v48;
  __n128 __p;
  unint64_t v50;
  void v51[4];
  id v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  unsigned char *v56;
  char v57;
  std::string v58;

  id v9 = a2;
  int v47 = a4;
  unint64_t v48 = v9;
  sub_1DDAB6A18(v9, a3, &v58);
  uint64_t v10 = (uint64_t **)(a1 + 24);
  uint64_t v11 = sub_1DDA2A530(a1 + 24, (void **)&v58.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v11)
  {
    LOBYTE(v55) = 0;
    uint64_t v57 = 0;
    v51[0] = MEMORY[0x1E4F143A8];
    v51[1] = 3221225472;
    v51[2] = sub_1DDAB6FC0;
    v51[3] = &unk_1E6D051E8;
    int v46 = (void (**)(void *__return_ptr))v47;
    int v52 = v46;
    sub_1DDB657E4(a1, v9, v51, &v53);
    if (v53)
    {
      uint64_t v17 = sub_1DDB67AB8(v53, v13, v14, v15, v16);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v22 = 0;
      std::string __p = 0uLL;
      int v50 = 0;
      while (v22 < objc_msgSend_count(v17, v18, v19, v20, v21))
      {
        __int16 v26 = objc_msgSend_objectAtIndexedSubscript_(v17, v23, v22, v24, v25);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          unint64_t v44 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](v44, "RawCameraException");
          __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        objc_msgSend_doubleValue(v26, v27, v28, v29, v30);
        uint64_t v32 = v31;
        unint64_t v33 = __p.n128_u64[1];
        if (__p.n128_u64[1] >= v50)
        {
          uint64_t v35 = (void *)__p.n128_u64[0];
          uint64_t v36 = (uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 3;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 61) {
            sub_1DDA17F78();
          }
          uint64_t v38 = v50 - __p.n128_u64[0];
          if ((uint64_t)(v50 - __p.n128_u64[0]) >> 2 > v37) {
            unint64_t v37 = v38 >> 2;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            long long v40 = (char *)sub_1DDA1814C((uint64_t)&v50, v39);
            unint64_t v33 = __p.n128_u64[1];
            uint64_t v35 = (void *)__p.n128_u64[0];
          }
          else
          {
            long long v40 = 0;
          }
          unsigned int v41 = &v40[8 * v36];
          *(void *)unsigned int v41 = v32;
          unint64_t v34 = (unint64_t)(v41 + 8);
          while ((void *)v33 != v35)
          {
            uint64_t v42 = *(void *)(v33 - 8);
            v33 -= 8;
            *((void *)v41 - 1) = v42;
            v41 -= 8;
          }
          __p.n128_u64[0] = (unint64_t)v41;
          __p.n128_u64[1] = v34;
          int v50 = (unint64_t)&v40[8 * v39];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *(void *)__p.n128_u64[1] = v31;
          unint64_t v34 = v33 + 8;
        }
        __p.n128_u64[1] = v34;

        ++v22;
      }
      sub_1DDAB7048((uint64_t)&v55, (uint64_t)&__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
    }
    if (v54) {
      sub_1DDA18310(v54);
    }

    if (!v57)
    {
      ((void (**)(__n128 *__return_ptr))v46)[2](&__p);
      sub_1DDA5BD44((uint64_t)&v55, &__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (!v57) {
        goto LABEL_45;
      }
    }
    __p.n128_u64[0] = (unint64_t)&v58;
    uint64_t v43 = sub_1DDAB6C70(v10, (void **)&v58.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&__p);
    sub_1DDAB70C0((uint64_t)(v43 + 7), (uint64_t)&v55);
    if (!v57) {
LABEL_45:
    }
      sub_1DDA1D8BC();
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1DDA1808C(a5, v55, (uint64_t)v56, (v56 - (unsigned char *)v55) >> 3);
    if (v57 && v55)
    {
      int v56 = v55;
      operator delete(v55);
    }
  }
  else
  {
    uint64_t v12 = (const void **)sub_1DDAB720C((uint64_t (**)(uint64_t, void, void, void *, void *))v11 + 7);
    if (!v12) {
      sub_1DDAB6C00();
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1DDA1808C(a5, *v12, (uint64_t)v12[1], ((unsigned char *)v12[1] - (unsigned char *)*v12) >> 3);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
}

void sub_1DDAB684C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,std::__shared_weak_count *a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  __cxa_free_exception(v27);

  if (a22) {
    sub_1DDA18310(a22);
  }

  if (a26 && __p) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 105) < 0) {
    operator delete(*(void **)(v28 - 128));
  }

  _Unwind_Resume(a1);
}

void sub_1DDAB6944(uint64_t a1@<X0>, char **a2@<X8>)
{
}

uint64_t sub_1DDAB694C(uint64_t a1)
{
  *(void *)a1 = &unk_1F396A138;
  int v3 = (void **)(a1 + 400);
  sub_1DDA2A044(&v3);
  return sub_1DDA2AD98(a1);
}

uint64_t sub_1DDAB69A8(uint64_t a1)
{
  *(void *)a1 = &unk_1F396A138;
  uint64_t v4 = (void **)(a1 + 400);
  sub_1DDA2A044(&v4);
  uint64_t v2 = sub_1DDA2AD98(a1);
  return MEMORY[0x1E01C3DC0](v2, 0x10A1C4009B45E12);
}

void sub_1DDAB6A18(void *a1@<X1>, int a2@<W2>, std::string *a3@<X8>)
{
  id v5 = a1;
  uint64_t v10 = (char *)objc_msgSend_UTF8String(v5, v6, v7, v8, v9);
  sub_1DDA1A880(&v17, v10);
  uint64_t v11 = std::string::append(&v17, "_", 1uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&v18, (const std::string::value_type *)p_p, size);
  *a3 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_1DDAB6B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDAB6B68(uint64_t a1)
{
  uint64_t v1 = NSNumber;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return objc_msgSend_numberWithUnsignedInt_(v1, v2, v3, v4, v5);
}

uint64_t (**sub_1DDAB6BB4(uint64_t (**result)(uint64_t, void, void, void *, void *)))(uint64_t, void, void, void *, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void *, void *))(*result)(3, result, 0, &unk_1F3964198, &unk_1DDBFB040);
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_1DDAB6C00()
{
  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  uint64_t v1 = sub_1DDAB6C38(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA330], (void (*)(void *))sub_1DDAB6C6C);
}

std::bad_cast *sub_1DDAB6C38(std::bad_cast *a1)
{
  intptr_t result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x1E4FBA4C0] + 16);
  return result;
}

uint64_t *sub_1DDAB6C70(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  int v6 = (uint64_t **)sub_1DDA4B7C4((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_1DDAB6D1C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1DDA25078(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1DDAB6DB0((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_1DDAB6D1C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  intptr_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    intptr_t result = sub_1DDA2639C(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)intptr_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1DDAB6D98(_Unwind_Exception *a1)
{
  sub_1DDAB6DB0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1DDAB6DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1DDAB6E08((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1DDAB6E08(uint64_t a1)
{
  sub_1DDAB6E58((uint64_t (**)(void, void, void, void, void))(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t (**sub_1DDAB6E58(uint64_t (**result)(void, void, void, void, void)))(void, void, void, void, void)
{
  if (*result) {
    return (uint64_t (**)(void, void, void, void, void))(*result)(0, result, 0, 0, 0);
  }
  return result;
}

void *sub_1DDAB6E90(unsigned int a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  intptr_t result = &unk_1F3964198;
  switch(v5)
  {
    case 1:
      intptr_t result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = sub_1DDAB6E90;
      break;
    case 2:
      intptr_t result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = sub_1DDAB6E90;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = sub_1DDAB6F70(a4, (uint64_t)&unk_1F3964198);
      }
      else {
        BOOL v8 = a5 == &unk_1DDBFB040;
      }
      if (v8) {
        intptr_t result = a2 + 1;
      }
      else {
        intptr_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      intptr_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

BOOL sub_1DDAB6F70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

id sub_1DDAB6FC0(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)(a1 + 32) + 16))(__p);
  uint64_t v1 = sub_1DDAB7258((double **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return v1;
}

void sub_1DDAB702C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAB7048(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (a1 != a2) {
      sub_1DDA25BB0((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_1DDA1808C((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t sub_1DDAB70C0(uint64_t a1, uint64_t a2)
{
  v6[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x1E4F143B8];
  memset(v5, 0, sizeof(v5));
  sub_1DDA1808C((void *)v5 + 1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)&v5[0] = sub_1DDAB7330;
  if (v5 != (_OWORD *)a1)
  {
    uint64_t v3 = *(void (**)(void, void, void, void, void))a1;
    if (*(void *)a1)
    {
      v6[0] = 0;
      v6[1] = 0;
      v3(2, a1, v6, 0, 0);
      (*(void (**)(uint64_t, _OWORD *, uint64_t, void, void))&v5[0])(2, v5, a1, 0, 0);
      ((uint64_t (**)(uint64_t, void, _OWORD *, void, void))v6)[0](2, v6, v5, 0, 0);
      sub_1DDAB6E58(v6);
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)v5 + 8);
      *(void *)(a1 + 24) = *((void *)&v5[1] + 1);
      memset((char *)v5 + 8, 0, 24);
      *(void *)a1 = sub_1DDAB7330;
      *(void *)&v5[0] = 0;
    }
  }
  sub_1DDAB6E58((uint64_t (**)(void, void, void, void, void))v5);
  return a1;
}

void sub_1DDAB7200(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1DDA16678(a1);
}

uint64_t (**sub_1DDAB720C(uint64_t (**result)(uint64_t, void, void, void *, void *)))(uint64_t, void, void, void *, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void *, void *))(*result)(3, result, 0, &unk_1F39641A8, &unk_1DDBFB048);
    }
    else {
      return 0;
    }
  }
  return result;
}

id sub_1DDAB7258(double **a1)
{
  int v6 = sub_1DDA49F48(a1[1] - *a1);
  uint64_t v7 = *a1;
  BOOL v8 = a1[1];
  if (*a1 != v8)
  {
    do
    {
      long long v9 = objc_msgSend_numberWithDouble_(NSNumber, v2, v3, v4, v5, *v7);
      objc_msgSend_addObject_(v6, v10, (uint64_t)v9, v11, v12);

      ++v7;
    }
    while (v7 != v8);
  }
  uint64_t v13 = objc_msgSend_arrayWithArray_(MEMORY[0x1E4F1C978], v2, (uint64_t)v6, v4, v5);

  return v13;
}

void sub_1DDAB7310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1DDAB7330(unsigned int a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  intptr_t result = &unk_1F39641A8;
  switch(v5)
  {
    case 1:
      a3[2] = 0;
      a3[3] = 0;
      a3[1] = 0;
      sub_1DDA1808C(a3 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
      intptr_t result = 0;
      *a3 = sub_1DDAB7330;
      break;
    case 2:
      intptr_t result = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 8);
      a3[3] = *(void *)(a2 + 24);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *a3 = sub_1DDAB7330;
      goto LABEL_7;
    case 3:
      if (a4) {
        BOOL v10 = sub_1DDAB6F70(a4, (uint64_t)&unk_1F39641A8);
      }
      else {
        BOOL v10 = a5 == &unk_1DDBFB048;
      }
      if (v10) {
        intptr_t result = (void *)(a2 + 8);
      }
      else {
        intptr_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v9 = *(void **)(a2 + 8);
      if (v9)
      {
        *(void *)(a2 + 16) = v9;
        operator delete(v9);
      }
      intptr_t result = 0;
LABEL_7:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

void sub_1DDAB7450(uint64_t a1)
{
  int v6 = &unk_1F3964DA8;
  int v7 = 36;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "CIFF:CanonColorInfo1");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v1 + 600))(v1, __p, &v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDAB7538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAB7568()
{
}

uint64_t sub_1DDAB757C(uint64_t a1, uint64_t a2, void **a3, _DWORD *a4)
{
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  BOOL v6 = sub_1DDA88414(a2, a3, (char *)&__p);
  int v7 = __p;
  if (v6)
  {
    unint64_t v8 = *(unsigned int *)(a1 + 8);
    if (v8 < (v13 - (unsigned char *)__p) >> 2)
    {
      *a4 = *((_DWORD *)__p + v8);
      uint64_t v9 = 1;
LABEL_5:
      uint64_t v13 = v7;
      operator delete(v7);
      return v9;
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (__p) {
    goto LABEL_5;
  }
  return v10;
}

void sub_1DDAB7610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAB762C(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  unsigned int v6 = a4;
  if (a4 == 3) {
    a4 = 4;
  }
  int v7 = sub_1DDAB76F0(a1, a2, a3, a4, a5);
  if (v6 == 3)
  {
    if (v7)
    {
      int v8 = *(_DWORD *)(*a5 + 8);
      uint64_t v9 = (const float *)(*a5 + 12);
      int32x2_t v16 = *(int32x2_t *)*a5;
      int32x2_t v10 = (int32x2_t)vld1_dup_f32(v9);
      sub_1DDA1AD40(&v17, 3uLL);
      uint64_t v11 = (void *)*a5;
      long long v12 = v17;
      uint64_t v13 = v17;
      *(int32x2_t *)long long v17 = vrev64_s32(vmul_s32(v10, v16));
      *(_DWORD *)(v13 + 8) = v8 * v16.i32[0];
      *(_OWORD *)a5 = v12;
      uint64_t v14 = a5[2];
      a5[2] = v18;
      *(void *)&long long v17 = v11;
      uint64_t v18 = v14;
      if (v11)
      {
        *((void *)&v17 + 1) = v11;
        operator delete(v11);
      }
    }
  }
  return 1;
}

uint64_t sub_1DDAB76F0(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  BOOL v8 = sub_1DDA88414(a2, a3, (char *)&__p);
  uint64_t v9 = (char *)__p;
  if (!v8 || *(_DWORD *)(a1 + 8) + a4 > (unint64_t)((v15 - (unsigned char *)__p) >> 2))
  {
    uint64_t v10 = 0;
    goto LABEL_4;
  }
  sub_1DDAB77E4((uint64_t)a5, a4);
  uint64_t v9 = (char *)__p;
  if (!a4)
  {
    uint64_t v10 = 1;
LABEL_4:
    if (!v9) {
      return v10;
    }
    goto LABEL_10;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *a5;
  do
  {
    *(_DWORD *)(v12 + 4 * v11) = *(_DWORD *)&v9[4 * (v11 + *(_DWORD *)(a1 + 8))];
    ++v11;
  }
  while (a4 != v11);
  uint64_t v10 = 1;
LABEL_10:
  uint64_t v15 = v9;
  operator delete(v9);
  return v10;
}

void sub_1DDAB77C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAB77E4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1DDAB7814((char **)a1, a2 - v2);
  }
}

void sub_1DDAB7814(char **a1, unint64_t a2)
{
  unsigned int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    BOOL v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_1DDA17F78();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_1DDA17F90(v4, v13);
      BOOL v8 = *a1;
      int v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    long long v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_1DDAB7930(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1104))();
}

double sub_1DDAB795C(uint64_t a1)
{
  if (sub_1DDAF24F4(a1))
  {
    return sub_1DDB0A104(a1);
  }
  else
  {
    return sub_1DDB10E94();
  }
}

double sub_1DDAB79B4@<D0>(uint64_t a1@<X0>, double **a2@<X8>)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (sub_1DDAF25D8(a1))
  {
    sub_1DDAF2608(a1, a2);
  }
  else
  {
    uint64_t v16 = &unk_1F39665D8;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v10, a1);
    uint64_t v5 = v10;
    sub_1DDA1A880(&__p, "CIFF:CanonShotInfo");
    int v6 = sub_1DDA28220((uint64_t)v5, (uint64_t)&__p, (uint64_t)&v16);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p);
    }
    if (v11) {
      sub_1DDA18310(v11);
    }
    if (v6)
    {
      std::string __p = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      sub_1DDAB7EFC((char *)&__p, qword_1DDBFB090, &qword_1DDBFB090[18], 0x12uLL);
      sub_1DDA1A880(&v10, "CIFF:CanonShotInfo");
      uint64_t v7 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)a1 + 2968))(a1, &v10, &__p);
      if (v12 < 0) {
        operator delete(v10);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 2960))(a1, v7);
      if (__p)
      {
        uint64_t v14 = __p;
        operator delete(__p);
      }
    }
    else
    {
      sub_1DDA24B78(a2, 3uLL);
      BOOL v8 = *a2;
      double result = 1.78;
      *(_OWORD *)BOOL v8 = xmmword_1DDBFB080;
      v8[2] = 1.37;
    }
  }
  return result;
}

void sub_1DDAB7C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAB7C84(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  int v6 = &unk_1F3964DA8;
  sub_1DDA1A880(__p, "CIFF:CanonColorInfo1");
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(void *)a1 + 2976))(a1, a2, __p, &v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DDAB7D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAB7D68()
{
}

BOOL sub_1DDAB7D7C(uint64_t a1, uint64_t a2, void **a3, _DWORD *a4)
{
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v5 = sub_1DDA88414(a2, a3, (char *)&v9);
  int v6 = v9;
  BOOL v7 = v10 != v9 && v5;
  if (v7)
  {
    *a4 = *v9;
  }
  else if (!v9)
  {
    return 0;
  }
  unint64_t v10 = v6;
  operator delete(v6);
  return v7;
}

void sub_1DDAB7DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAB7E18(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  BOOL v7 = sub_1DDA88414(a2, a3, (char *)&__p);
  BOOL v8 = (char *)__p;
  if (!v7 || a4 > (unint64_t)((v14 - (unsigned char *)__p) >> 2))
  {
    uint64_t v9 = 0;
    goto LABEL_4;
  }
  sub_1DDAB77E4((uint64_t)a5, a4);
  BOOL v8 = (char *)__p;
  if (!a4)
  {
    uint64_t v9 = 1;
LABEL_4:
    if (!v8) {
      return v9;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a5;
  do
  {
    *(_DWORD *)(v11 + v10) = *(_DWORD *)&v8[v10];
    v10 += 4;
  }
  while (4 * a4 != v10);
  uint64_t v9 = 1;
LABEL_10:
  uint64_t v14 = v8;
  operator delete(v8);
  return v9;
}

void sub_1DDAB7EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DDAB7EFC(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    double result = sub_1DDA17F34(result, a4);
    BOOL v7 = (_DWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DDAB7F54(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAB7F70(uint64_t a1)
{
  int v6 = 0;
  BOOL v7 = 0;
  uint64_t v8 = 0;
  sub_1DDA1D984(&v6, &unk_1DDBFB154, (uint64_t)&unk_1DDBFB19C, 0x12uLL);
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:ShotInfo");
  unsigned int v2 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)a1 + 2968))(a1, __p, &v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 2;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 2960))(a1, v3);
  if (v6)
  {
    BOOL v7 = v6;
    operator delete(v6);
  }
}

void sub_1DDAB8070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAB80A8(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  int v6 = &unk_1F3964DA8;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:G9WhiteBalance");
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(void *)a1 + 2976))(a1, a2, __p, &v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DDAB8170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAB818C(void *a1)
{
  sub_1DDAFC378((uint64_t)a1);
  if ((*(unsigned int (**)(void *))(*a1 + 2984))(a1))
  {
    unsigned int v2 = (const void *)a1[3];
    if (v2)
    {
      uint64_t v3 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_1F3962730, (const struct __class_type_info *)&unk_1F3963120, 0);
      if (v3)
      {
        uint64_t v4 = (std::__shared_weak_count *)a1[4];
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_1DDAB4288((uint64_t)v3, 1);
        if (v4)
        {
          sub_1DDA18310(v4);
        }
      }
    }
  }
}

void sub_1DDAB8270(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DDA18310(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDAB8288(uint64_t a1)
{
  if (sub_1DDA3084C(a1) != 34713) {
    return 0;
  }
  unint64_t v2 = sub_1DDA2F31C(a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1) == ((v2 >> 28) & 0xFFFFFFF0)
                                                                           * (((int)v2 + 9)
                                                                            / 10);
}

uint64_t sub_1DDAB8328(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2984))(a1)) {
    return 1;
  }

  return sub_1DDA3084C(a1);
}

id sub_1DDAB839C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"hasWeirdCompressionMode", v5, v6))
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2984))(a1);
    uint64_t v8 = (void *)MEMORY[0x1E4F1CC28];
    if (v7) {
      uint64_t v8 = (void *)MEMORY[0x1E4F1CC38];
    }
    id v9 = v8;
  }
  else
  {
    sub_1DDAFDA1C(a1, v3);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v10 = v9;

  return v10;
}

void sub_1DDAB8450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB8464(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = sub_1DDA83CFC();
  id v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CFujiS2Unpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = sub_1DDAB880C;
  _DWORD v29[3] = &unk_1E6D04A58;
  void v29[4] = v1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v29);
  bzero(buf, 0x2E00uLL);
  uint64_t v5 = sub_1DDAA5B9C(v1);
  uint64_t v6 = *(unsigned int *)(v1 + 44);
  if ((v6 - 10000) < 0xFFFFD8F4
    || (v6 & 3) != 0
    || (uint64_t v7 = *(unsigned int *)(v1 + 48), (v7 - 10000) < 0xFFFFD8F4)
    || (v7 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = v5;
  uint64_t v28 = (void (**)(void))v4;
  unsigned int v9 = v6 - 4;
  uint64_t v10 = 2 * v6;
  unsigned int v11 = 4;
  do
  {
    (*(void (**)(void, uint8_t *, uint64_t))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), buf, 4 * v7);
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = 2 * v7;
    uint64_t v15 = v8 + 2 * v9;
    do
    {
      unsigned int v16 = bswap32(*(unsigned __int16 *)&buf[v12]);
      unsigned int v17 = bswap32(*(unsigned __int16 *)&buf[v12 + 2]);
      unsigned int v18 = bswap32(*(unsigned __int16 *)&buf[v12 + 4]);
      unsigned int v19 = bswap32(*(unsigned __int16 *)&buf[v12 + 6]);
      unsigned int v20 = bswap32(*(unsigned __int16 *)&buf[v14]);
      unsigned int v21 = bswap32(*(unsigned __int16 *)&buf[v14 + 2]);
      unsigned int v22 = bswap32(*(unsigned __int16 *)&buf[v14 + 4]) >> 16;
      unsigned int v23 = bswap32(*(unsigned __int16 *)&buf[v14 + 6]);
      *(_WORD *)uint64_t v15 = 0;
      *(_DWORD *)(v15 + 2) = HIWORD(v20);
      *(_WORD *)(v15 + 6) = HIWORD(v16);
      uint64_t v24 = (_DWORD *)(v15 + v10);
      _DWORD *v24 = HIWORD(v21);
      v24[1] = HIWORD(v17);
      uint64_t v25 = (char *)v24 + v10;
      *(_WORD *)uint64_t v25 = 0;
      *(_DWORD *)(v25 + 2) = (unsigned __int16)v22;
      *((_WORD *)v25 + 3) = HIWORD(v18);
      __int16 v26 = &v25[v10];
      *(_DWORD *)__int16 v26 = HIWORD(v23);
      v13 += 4;
      v14 += 8;
      *((_WORD *)v26 + 2) = HIWORD(v19);
      v12 += 8;
      uint64_t v15 = (uint64_t)&v25[v10 + v10];
      *((_WORD *)v26 + 3) = 0;
    }
    while (v13 < v7);
    v11 += 4;
    v9 -= 4;
  }
  while (v11 <= v6);
  v28[2](v28);
}

void sub_1DDAB87A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB880C(uint64_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CFujiS2Unpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDAB8894(os_signpost_id_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = sub_1DDA83CFC();
  id v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPentaxK10DUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = sub_1DDAB90FC;
  v42[3] = &unk_1E6D04A58;
  v42[4] = a1;
  os_signpost_id_t v4 = (void (**)(void))MEMORY[0x1E01C46E0](v42);
  v44[0] = 0;
  v44[1] = 0;
  uint64_t v5 = (unsigned __int8 *)sub_1DDAA5B9C(a1);
  uint64_t v6 = *(unsigned __int8 **)(a1 + 192);
  if (*(void *)(a1 + 200) - (void)v6 <= 0x1DuLL || !sub_1DDAACF3C(v6, (uint64_t)buf))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDA1B3CC(&v41, (unsigned int *)(a1 + 44));
  sub_1DDA1B3CC(&v40, (unsigned int *)(a1 + 48));
  int v43 = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1);
  sub_1DDA18410((int *)&v37, &v43);
  sub_1DDA1B354(&v39, (unsigned int *)&v37);
  LODWORD(v37) = v41;
  int v7 = *sub_1DDA4BDD8(&v37, &v40);
  unint64_t v37 = 2;
  sub_1DDA18500(&v38, &v37);
  int v43 = v7;
  uint64_t v8 = sub_1DDA4BDD8(&v43, &v38);
  if (*v8 < v39 || (v41 & 1) != 0)
  {
    uint64_t v36 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v36, "RawCameraException");
    __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v10 = *(unsigned int *)(a1 + 44);
  uint64_t v9 = *(unsigned int *)(a1 + 48);
  unsigned int v11 = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1);
  uint64_t v12 = &v5[2 * (v9 * v10)];
  unsigned int v13 = &v12[-v11];
  (*(void (**)(void, unsigned __int8 *, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v13, v11);
  if (v9)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    int v16 = 32;
    do
    {
      unint64_t v17 = v12 - v13 + ((39 - v16) >> 3);
      if (8 * v17 < 2 * (unint64_t)((v9 - v14) * v10))
      {
        unint64_t v34 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v34, "RawCameraException");
        __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v13 - v5 < v10 || v17 < (4 * v10))
      {
        if (v12 != v13) {
          operator new[]();
        }
        unsigned int v13 = v12;
      }
      if (v16 >= 16)
      {
        int v15 = (v15 << 16) | (*v13 << 8) | v13[1];
        v13 += 2;
        v16 -= 16;
      }
      unsigned int v18 = *(unsigned __int16 *)&buf[2 * ((v15 << v16) >> 23)];
      int v19 = ((v18 >> 10) & 0x1F) + v16;
      if (v18 > 0x8000)
      {
        int v21 = (char)v18;
      }
      else
      {
        if ((v18 & 0x8000) != 0)
        {
          unsigned int v18 = *(unsigned __int16 *)&buf[2 * (((v15 << v16) >> 16) & 0x3FF)];
          v19 += (v18 >> 10) & 0x1F;
        }
        int v20 = v18 & 0x1F;
        if ((v18 & 0x1F) != 0)
        {
          if (v19 >= 16)
          {
            int v15 = (v15 << 16) | (*v13 << 8) | v13[1];
            v13 += 2;
            v19 -= 16;
          }
          int v21 = ((v15 << v19) >> -(char)v20) - ((((v15 << v19) >> 31) - 1) >> -(char)v20);
          v19 += v20;
        }
        else
        {
          int v21 = (v18 << 8) & 0x8000;
        }
      }
      unsigned int v22 = v14 & 1;
      int v23 = LODWORD(v44[v22]) + v21;
      LODWORD(v44[v22]) = v23;
      if (v19 >= 16)
      {
        int v15 = (v15 << 16) | (*v13 << 8) | v13[1];
        v13 += 2;
        v19 -= 16;
      }
      unsigned int v24 = *(unsigned __int16 *)&buf[2 * ((v15 << v19) >> 23)];
      int v16 = ((v24 >> 10) & 0x1F) + v19;
      if (v24 > 0x8000)
      {
        unsigned int v24 = (char)v24;
      }
      else
      {
        if ((v24 & 0x8000) != 0)
        {
          unsigned int v24 = *(unsigned __int16 *)&buf[2 * (((v15 << v19) >> 16) & 0x3FF)];
          v16 += (v24 >> 10) & 0x1F;
        }
        int v25 = v24 & 0x1F;
        if ((v24 & 0x1F) != 0)
        {
          if (v16 >= 16)
          {
            int v15 = (v15 << 16) | (*v13 << 8) | v13[1];
            v13 += 2;
            v16 -= 16;
          }
          unsigned int v24 = ((v15 << v16) >> -(char)v25) - ((((v15 << v16) >> 31) - 1) >> -(char)v25);
          v16 += v25;
        }
        else
        {
          unsigned int v24 = (v24 << 8) & 0x8000;
        }
      }
      unsigned int v26 = (v22 * 2) | 1;
      unsigned int v27 = *((_DWORD *)v44 + ((v22 * 2) | 1)) + v24;
      *((_DWORD *)v44 + v26) = v27;
      if (v10 >= 3)
      {
        unsigned int v28 = 2;
        do
        {
          if (v16 >= 16)
          {
            int v15 = (v15 << 16) | (*v13 << 8) | v13[1];
            v13 += 2;
            v16 -= 16;
          }
          unsigned int v29 = *(unsigned __int16 *)&buf[2 * ((v15 << v16) >> 23)];
          int v30 = ((v29 >> 10) & 0x1F) + v16;
          *(_WORD *)uint64_t v5 = v23;
          if (v29 > 0x8000)
          {
            LOWORD(v29) = (char)v29;
          }
          else
          {
            if ((v29 & 0x8000) != 0)
            {
              unsigned int v29 = *(unsigned __int16 *)&buf[2 * (((v15 << v16) >> 16) & 0x3FF)];
              v30 += (v29 >> 10) & 0x1F;
            }
            int v31 = v29 & 0x1F;
            if ((v29 & 0x1F) != 0)
            {
              if (v30 >= 16)
              {
                int v15 = (v15 << 16) | (*v13 << 8) | v13[1];
                v13 += 2;
                v30 -= 16;
              }
              unsigned int v29 = ((v15 << v30) >> -(char)v31)
                  - ((((v15 << v30) >> 31) - 1) >> -(char)v31);
              v30 += v31;
            }
            else
            {
              LOWORD(v29) = ((_WORD)v29 << 8) & 0x8000;
            }
          }
          if (v30 >= 16)
          {
            int v15 = (v15 << 16) | (*v13 << 8) | v13[1];
            v13 += 2;
            v30 -= 16;
          }
          unsigned int v32 = *(unsigned __int16 *)&buf[2 * ((v15 << v30) >> 23)];
          int v16 = ((v32 >> 10) & 0x1F) + v30;
          *((_WORD *)v5 + 1) = v27;
          if (v32 > 0x8000)
          {
            LOWORD(v32) = (char)v32;
          }
          else
          {
            if ((v32 & 0x8000) != 0)
            {
              unsigned int v32 = *(unsigned __int16 *)&buf[2 * (((v15 << v30) >> 16) & 0x3FF)];
              v16 += (v32 >> 10) & 0x1F;
            }
            int v33 = v32 & 0x1F;
            if ((v32 & 0x1F) != 0)
            {
              if (v16 >= 16)
              {
                int v15 = (v15 << 16) | (*v13 << 8) | v13[1];
                v13 += 2;
                v16 -= 16;
              }
              unsigned int v32 = ((v15 << v16) >> -(char)v33)
                  - ((((v15 << v16) >> 31) - 1) >> -(char)v33);
              v16 += v33;
            }
            else
            {
              LOWORD(v32) = ((_WORD)v32 << 8) & 0x8000;
            }
          }
          LOWORD(v23) = v29 + v23;
          LOWORD(v27) = v32 + v27;
          v5 += 4;
          v28 += 2;
        }
        while (v28 < v10);
      }
      *(_WORD *)uint64_t v5 = v23;
      *((_WORD *)v5 + 1) = v27;
      v5 += 4;
      ++v14;
    }
    while (v14 != v9);
  }
  v4[2](v4);
}

void sub_1DDAB903C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB90FC(uint64_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPentaxK10DUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void *sub_1DDAB9184(void *a1)
{
  *a1 = &unk_1F3967EC0;
  unint64_t v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDAB91E4(void *a1)
{
  *a1 = &unk_1F3967EC0;
  unint64_t v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDAB9258(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  *(void *)&v49[17405] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = sub_1DDA83CFC();
  id v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CFujiS3Unpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 3221225472;
  v47[2] = sub_1DDAB965C;
  v47[3] = &unk_1E6D04A58;
  v47[4] = v1;
  uint64_t v46 = (void (**)(void))MEMORY[0x1E01C46E0](v47);
  bzero(buf, 0x4400uLL);
  uint64_t v4 = sub_1DDAA5B9C(v1);
  unsigned int v5 = 0;
  uint64_t v6 = *(unsigned int *)(v1 + 44);
  uint64_t v7 = (4 * v6);
  uint64_t v8 = &buf[(2 * v6)];
  uint64_t v9 = v8 + 7;
  uint64_t v45 = v6;
  uint64_t v10 = 2 * v6;
  do
  {
    (*(void (**)(void, uint8_t *, uint64_t))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), buf, v7);
    uint64_t v11 = 0;
    unsigned int v12 = -4;
    do
    {
      uint64_t v13 = v4 + v11;
      unsigned __int16 v14 = *(_WORD *)&v49[v11 - 1];
      unsigned __int16 v15 = *(_WORD *)&v49[v11 + 1];
      __int16 v16 = *(_WORD *)&v49[v11 + 3];
      unsigned __int16 v17 = *(_WORD *)&v8[v11];
      __int16 v18 = *(_WORD *)&v9[v11 - 5];
      unsigned __int16 v19 = *(_WORD *)&v9[v11 - 3];
      __int16 v20 = *(_WORD *)&v9[v11 - 1];
      *(_WORD *)uint64_t v13 = buf[v11] | (buf[v11 + 1] << 8);
      *(_WORD *)(v13 + 2) = 0;
      *(_DWORD *)(v13 + 4) = v15;
      uint64_t v21 = v4 + v11 + v10;
      *(_WORD *)uint64_t v21 = 0;
      *(_DWORD *)(v21 + 2) = v14;
      *(_WORD *)(v21 + 6) = v16;
      unsigned int v22 = (_DWORD *)(v21 + v10);
      *unsigned int v22 = v17;
      v22[1] = v19;
      int v23 = (_WORD *)(v21 + v10 + v10);
      _WORD *v23 = 0;
      v23[1] = v18;
      v12 += 4;
      unsigned int v23[2] = 0;
      v11 += 8;
      void v23[3] = v20;
    }
    while (v12 >> 2 < 0x43F);
    v4 += 2 * v7;
    BOOL v24 = v5 >= 0x5A0;
    v5 += 2;
  }
  while (!v24);
  if (*(unsigned char *)(v1 + 186))
  {
    uint64_t v25 = sub_1DDAA5B9C(v1);
    unsigned int v26 = 0;
    uint64_t v27 = v25 - 2 * v7;
    uint64_t v28 = 2 * v7;
    uint64_t v29 = v27 + 2 * v45 + 4;
    uint64_t v30 = v27 + 4 * v45 + 6;
    uint64_t v31 = 6 * v45 - 2 * v7 + v25 + 4;
    while (1)
    {
      (*(void (**)(void, uint8_t *, uint64_t))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), buf, v7);
      uint64_t v32 = 0;
      unsigned int v33 = -4;
      while (1)
      {
        v33 += 4;
        if (v26) {
          break;
        }
LABEL_13:
        v32 += 8;
        if (v33 >> 2 >= 0x43F) {
          goto LABEL_16;
        }
      }
      __int16 v34 = *(_WORD *)&v49[v32 + 3];
      __int16 v35 = *(_WORD *)&v8[v32];
      __int16 v36 = *(_WORD *)&v8[v32 + 2];
      __int16 v37 = *(_WORD *)&v8[v32 + 4];
      __int16 v38 = *(_WORD *)&v8[v32 + 6];
      __int16 v39 = *(_WORD *)&v49[v32 + 1];
      __int16 v40 = *(_WORD *)&buf[v32 + 2];
      uint64_t v41 = v27 + v32;
      *(_WORD *)(v41 + 2) = *(_WORD *)&buf[v32];
      *(_WORD *)(v41 + 6) = v39;
      *(_WORD *)(v29 + v32) = v40;
      if (v33 >> 2 <= 0x43E) {
        break;
      }
      unint64_t v44 = (_WORD *)(v30 + v32);
      *(v44 - 2) = v35;
      _WORD *v44 = v37;
      *(_WORD *)(v31 + v32) = v36;
LABEL_16:
      v27 += v28;
      v29 += v28;
      v30 += v28;
      v31 += v28;
      BOOL v24 = v26 >= 0x5A0;
      v26 += 2;
      if (v24) {
        goto LABEL_18;
      }
    }
    *(_WORD *)(v29 + v32 + 4) = v34;
    uint64_t v42 = (_WORD *)(v30 + v32);
    *(v42 - 2) = v35;
    *uint64_t v42 = v37;
    int v43 = (_WORD *)(v31 + v32);
    *int v43 = v36;
    void v43[2] = v38;
    goto LABEL_13;
  }
LABEL_18:
  v46[2](v46);
}

void sub_1DDAB9608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(void))
{
  _Unwind_Resume(a1);
}

void sub_1DDAB965C(uint64_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CFujiS3Unpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDAB96E4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 186) = a2;
  return result;
}

void sub_1DDAB96EC(void *a1)
{
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

id sub_1DDAB9724(void *a1, double a2, uint64_t a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v7 = a1;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  obint j = v6;
  uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v36, (uint64_t)v40, 16);
  if (v11)
  {
    uint64_t v12 = *(void *)v37;
    uint64_t v13 = *MEMORY[0x1E4F1E480];
    uint64_t v14 = *MEMORY[0x1E4F1E520];
    do
    {
      uint64_t v15 = 0;
      __int16 v16 = v7;
      do
      {
        if (*(void *)v37 != v12) {
          objc_enumerationMutation(obj);
        }
        unsigned __int16 v17 = *(void **)(*((void *)&v36 + 1) + 8 * v15);
        objc_msgSend_setValue_forKey_(v17, v9, (uint64_t)v16, v13, v10);
        unsigned int v22 = objc_msgSend_inputKeys(v17, v18, v19, v20, v21);
        int v26 = objc_msgSend_containsObject_(v22, v23, @"inputScaleFactor", v24, v25);

        if (v26)
        {
          uint64_t v31 = objc_msgSend_numberWithDouble_(NSNumber, v27, v28, v29, v30, a2);
          objc_msgSend_setValue_forKey_(v17, v32, (uint64_t)v31, @"inputScaleFactor", v33);
        }
        objc_msgSend_valueForKey_(v17, v27, v14, v29, v30);
        id v7 = (id)objc_claimAutoreleasedReturnValue();

        ++v15;
        __int16 v16 = v7;
      }
      while (v11 != v15);
      uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v36, (uint64_t)v40, 16);
    }
    while (v11);
  }

  return v7;
}

void sub_1DDAB98F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDAB9948(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    if (sub_1DDA2E6EC(a1))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 296))(&v23, a1, 160);
      if (v23)
      {
        id v6 = sub_1DDA2E3A8(v5, (void *)*MEMORY[0x1E4F2F800], 0);
        if (v6)
        {
          id v7 = NSNumber;
          uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
          uint64_t v12 = objc_msgSend_numberWithUnsignedInt_(v7, v9, v8, v10, v11);
          objc_msgSend_setObject_forKeyedSubscript_(v6, v13, (uint64_t)v12, @"JPEGInterchangeFormat", v14);

          uint64_t v15 = NSNumber;
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 24))(v23);
          uint64_t v20 = objc_msgSend_numberWithUnsignedInt_(v15, v17, v16, v18, v19);
          objc_msgSend_setObject_forKeyedSubscript_(v6, v21, (uint64_t)v20, @"JPEGInterchangeFormatLength", v22);
        }
      }
      if (v24) {
        sub_1DDA18310(v24);
      }
    }
    if (sub_1DDA2E6F4(a1))
    {
      sub_1DDAB9B44(a1, v5);
    }
    else
    {
      sub_1DDABA004(a1, v5);
      sub_1DDABAAC8(a1, a2, v5);
    }
  }
}

void sub_1DDAB9B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }

  _Unwind_Resume(a1);
}

void sub_1DDAB9B44(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_signpost_id_t v4 = sub_1DDA7A98C(v3, (void *)*MEMORY[0x1E4F2FD18], 0);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)a1 + 144))(&v52, a1);
  unint64_t v5 = v53 - 24;
  if (v52 != v53 && v5 > v52)
  {
    unint64_t v7 = v52 + 24;
    do
    {
      uint64_t v8 = *(void *)(v7 - 8);
      long long v9 = *(_OWORD *)(v7 - 24);
      uint64_t v10 = *(void *)(v5 + 16);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)v5;
      *(void *)(v7 - 8) = v10;
      *(_OWORD *)unint64_t v5 = v9;
      *(void *)(v5 + 16) = v8;
      v5 -= 24;
      BOOL v11 = v7 >= v5;
      v7 += 24;
    }
    while (!v11);
  }
  uint64_t v12 = sub_1DDACB664((uint64_t *)&v52);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v13, (uint64_t)v12, *MEMORY[0x1E4F2FED0], v14);

  unint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 520))(a1);
  uint64_t v19 = objc_msgSend_stringWithFormat_(NSString, v16, @"{%d, %d}", v17, v18, v15, HIDWORD(v15));
  objc_msgSend_setObject_forKeyedSubscript_(v4, v20, (uint64_t)v19, @"fullSize", v21);

  uint64_t v22 = NSString;
  sub_1DDABBD3C(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    objc_msgSend_stringWithUTF8String_(v22, v23, (uint64_t)&__p, v24, v25);
  }
  else {
  int v26 = objc_msgSend_stringWithUTF8String_(v22, v23, (uint64_t)__p.__r_.__value_.__l.__data_, v24, v25);
  }
  objc_msgSend_setObject_forKeyedSubscript_(v4, v27, (uint64_t)v26, @"kCGImageSourceRawIdentifier", v28);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 456))(a1);
  __int16 v34 = objc_msgSend_stringWithFormat_(NSString, v31, @"{%d, %d}", v32, v33, v30 + v29, (HIDWORD(v30) + HIDWORD(v29)));
  objc_msgSend_setObject_forKeyedSubscript_(v4, v35, (uint64_t)v34, @"cropOrigin", v36);

  long long v37 = (*(void (**)(uint64_t))(*(void *)a1 + 2760))(a1);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v38, (uint64_t)v37, @"supportedSushiLevels", v39);

  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 112))(&__p, a1);
  __int16 v40 = sub_1DDA4CDD4((uint64_t)__p.__r_.__value_.__l.__data_);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v41, (uint64_t)v40, @"kCGImageSourceMethodVersion", v42);

  if (__p.__r_.__value_.__l.__size_) {
    sub_1DDA18310((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  int v43 = sub_1DDA2E5A0(a1);
  unint64_t v44 = sub_1DDB10E40(v43);
  objc_msgSend_setObject_forKeyedSubscript_(v4, v45, (uint64_t)v44, @"kCGImageSourceSushiLevel", v46);

  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 296))(&__p, a1, 5000);
  std::string::size_type v47 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] && !getenv("RAWCAMERA_ENABLE_RAW_IMPORT_IN_SPARK"))
  {
    unint64_t v48 = (*(void (**)(std::string::size_type))(*(void *)v47 + 32))(v47);
    objc_msgSend_setObject_forKeyedSubscript_(v4, v49, (uint64_t)v48, @"jpegThumbnail", v50);
  }
  if (__p.__r_.__value_.__l.__size_) {
    sub_1DDA18310((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  sub_1DDA2A044((void ***)&__p);
}

void sub_1DDAB9F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  std::string __p = &a17;
  sub_1DDA2A044((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1DDABA004(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (sub_1DDA2E5B8(a1))
  {
    id v4 = v3;
    long long v9 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v5, v6, v7, v8);
    objc_msgSend_setObject_forKeyedSubscript_(v4, v10, (uint64_t)v9, *MEMORY[0x1E4F2FED8], v11);
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)a1 + 144))(&v158, a1);
    if (v158 != v159)
    {
      unint64_t v12 = v159 - 24;
      if (v159 - 24 > v158)
      {
        unint64_t v13 = v158 + 24;
        do
        {
          uint64_t v14 = *(void *)(v13 - 8);
          long long v15 = *(_OWORD *)(v13 - 24);
          uint64_t v16 = *(void *)(v12 + 16);
          *(_OWORD *)(v13 - 24) = *(_OWORD *)v12;
          *(void *)(v13 - 8) = v16;
          *(_OWORD *)unint64_t v12 = v15;
          *(void *)(v12 + 16) = v14;
          v12 -= 24;
          BOOL v17 = v13 >= v12;
          v13 += 24;
        }
        while (!v17);
      }
    }
    uint64_t v18 = sub_1DDACB664((uint64_t *)&v158);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v19, (uint64_t)v18, *MEMORY[0x1E4F2FED0], v20);
    uint64_t v21 = NSString;
    sub_1DDABBD3C(a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      objc_msgSend_stringWithUTF8String_(v21, v22, (uint64_t)&__p, v23, v24);
    }
    else {
    uint64_t v25 = objc_msgSend_stringWithUTF8String_(v21, v22, (uint64_t)__p.__r_.__value_.__l.__data_, v23, v24);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v9, v26, (uint64_t)v25, @"kCGImageSourceRawIdentifier", v27);

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unsigned int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304))(a1);
    int v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
    int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
    unsigned int v34 = v28 | 2;
    if (!v29) {
      unsigned int v34 = v28;
    }
    if (v30) {
      objc_msgSend_numberWithInt_(NSNumber, v31, v34 | 4, v32, v33);
    }
    else {
    __int16 v35 = objc_msgSend_numberWithInt_(NSNumber, v31, v34, v32, v33);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v9, v36, (uint64_t)v35, @"kCGImageSourceVendorLensCorrectionFeatures", v37);

    long long v38 = (*(void (**)(uint64_t))(*(void *)a1 + 2760))(a1);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v39, (uint64_t)v38, @"kCGImageSourceSupportedSushiLevels", v40);

    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 112))(&__p, a1);
    uint64_t v41 = sub_1DDA4CDD4((uint64_t)__p.__r_.__value_.__l.__data_);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v42, (uint64_t)v41, @"kCGImageSourceMethodVersion", v43);

    if (__p.__r_.__value_.__l.__size_) {
      sub_1DDA18310((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    int v44 = sub_1DDA2E5A0(a1);
    uint64_t v45 = sub_1DDB10E40(v44);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v46, (uint64_t)v45, @"kCGImageSourceSushiLevel", v47);

    if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) >= 8) {
      objc_msgSend_setObject_forKeyedSubscript_(v9, v48, MEMORY[0x1E4F1CC28], (uint64_t)off_1EAB8AF40, v49);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2480))(a1))
    {
      uint64_t v50 = NSNumber;
      (*(void (**)(uint64_t))(*(void *)a1 + 2520))(a1);
      unsigned __int16 v55 = objc_msgSend_numberWithDouble_(v50, v51, v52, v53, v54);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v56, (uint64_t)v55, (uint64_t)off_1EAB8AEF0, v57);

      uint64_t v58 = NSNumber;
      (*(void (**)(uint64_t))(*(void *)a1 + 2528))(a1);
      unsigned int v63 = objc_msgSend_numberWithDouble_(v58, v59, v60, v61, v62);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v64, (uint64_t)v63, (uint64_t)off_1EAB8AEF8, v65);

      uint64_t v66 = NSNumber;
      uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2536))(a1);
      int v71 = objc_msgSend_numberWithBool_(v66, v68, v67, v69, v70);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v72, (uint64_t)v71, (uint64_t)off_1EAB8AF00, v73);

      int v74 = NSNumber;
      (*(void (**)(uint64_t))(*(void *)a1 + 2544))(a1);
      unsigned int v79 = objc_msgSend_numberWithDouble_(v74, v75, v76, v77, v78);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v80, (uint64_t)v79, (uint64_t)off_1EAB8AF08, v81);

      int v82 = NSNumber;
      (*(void (**)(uint64_t))(*(void *)a1 + 2552))(a1);
      uint64_t v87 = objc_msgSend_numberWithDouble_(v82, v83, v84, v85, v86);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v88, (uint64_t)v87, (uint64_t)off_1EAB8AF10, v89);

      uint64_t v90 = NSNumber;
      (*(void (**)(uint64_t))(*(void *)a1 + 2560))(a1);
      uint64_t v95 = objc_msgSend_numberWithDouble_(v90, v91, v92, v93, v94);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v96, (uint64_t)v95, (uint64_t)off_1EAB8AF18, v97);

      unsigned int v98 = NSNumber;
      (*(void (**)(uint64_t))(*(void *)a1 + 2568))(a1);
      uint64_t v103 = objc_msgSend_numberWithDouble_(v98, v99, v100, v101, v102);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v104, (uint64_t)v103, (uint64_t)off_1EAB8AF20, v105);

      int v106 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      uint64_t v107 = NSNumber;
      uint64_t v108 = *(void *)a1;
      if (v106 > 8) {
        uint64_t v109 = (*(uint64_t (**)(uint64_t))(v108 + 2264))(a1);
      }
      else {
        uint64_t v109 = (*(uint64_t (**)(uint64_t))(v108 + 2496))(a1);
      }
      unint64_t v113 = objc_msgSend_numberWithBool_(v107, v110, v109, v111, v112);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v114, (uint64_t)v113, (uint64_t)off_1EAB8AED8, v115);

      unint64_t v116 = NSNumber;
      (*(void (**)(uint64_t))(*(void *)a1 + 2504))(a1);
      v121 = objc_msgSend_numberWithDouble_(v116, v117, v118, v119, v120);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v122, (uint64_t)v121, (uint64_t)off_1EAB8AEE0, v123);

      int v124 = NSNumber;
      (*(void (**)(uint64_t))(*(void *)a1 + 2512))(a1);
      uint64_t v129 = objc_msgSend_numberWithDouble_(v124, v125, v126, v127, v128);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v130, (uint64_t)v129, (uint64_t)off_1EAB8AEE8, v131);

      uint64_t v132 = NSNumber;
      uint64_t v133 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2576))(a1);
      int v137 = objc_msgSend_numberWithBool_(v132, v134, v133, v135, v136);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v138, (uint64_t)v137, (uint64_t)off_1EAB8AF28, v139);

      uint64_t v140 = NSNumber;
      uint64_t v141 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2584))(a1);
      uint64_t v145 = objc_msgSend_numberWithBool_(v140, v142, v141, v143, v144);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v146, (uint64_t)v145, (uint64_t)off_1EAB8AF30, v147);

      uint64_t v148 = NSNumber;
      uint64_t v149 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2592))(a1);
      int v153 = objc_msgSend_numberWithBool_(v148, v150, v149, v151, v152);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v154, (uint64_t)v153, (uint64_t)off_1EAB8AF38, v155);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
    sub_1DDA2A044((void ***)&__p);
  }
}

void sub_1DDABA9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  sub_1DDA2A044((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1DDABAAC8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (sub_1DDA2E5A0(a1))
  {
    uint64_t v6 = sub_1DDA7A98C(v5, (void *)*MEMORY[0x1E4F2FD18], 0);
    uint64_t v7 = (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 2744))(a1, a2);
    if (objc_msgSend_count(v7, v8, v9, v10, v11)) {
      objc_msgSend_setObject_forKeyedSubscript_(v6, v12, (uint64_t)v7, @"filters", v13);
    }

    (*(void (**)(uint64_t))(*(void *)a1 + 720))(a1);
    double v15 = v14;
    uint64_t v20 = objc_msgSend_numberWithDouble_(NSNumber, v16, v17, v18, v19);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v21, (uint64_t)v20, @"wx", v22);

    uint64_t v27 = objc_msgSend_numberWithDouble_(NSNumber, v23, v24, v25, v26, v15);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v28, (uint64_t)v27, @"wy", v29);

    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 2624))(&v350, a1, a2, 1);
    unsigned int v34 = objc_msgSend_numberWithDouble_(NSNumber, v30, v31, v32, v33, *(double *)v350);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, @"otrcS0", v36);

    uint64_t v41 = objc_msgSend_numberWithDouble_(NSNumber, v37, v38, v39, v40, *((double *)v350 + 1));
    objc_msgSend_setObject_forKeyedSubscript_(v6, v42, (uint64_t)v41, @"otrcS1", v43);

    unint64_t v48 = objc_msgSend_numberWithDouble_(NSNumber, v44, v45, v46, v47, *((double *)v350 + 3));
    objc_msgSend_setObject_forKeyedSubscript_(v6, v49, (uint64_t)v48, @"otrcS2", v50);

    unsigned __int16 v55 = objc_msgSend_numberWithDouble_(NSNumber, v51, v52, v53, v54, *((double *)v350 + 5));
    objc_msgSend_setObject_forKeyedSubscript_(v6, v56, (uint64_t)v55, @"otrcS3", v57);

    uint64_t v62 = objc_msgSend_numberWithDouble_(NSNumber, v58, v59, v60, v61, *((double *)v350 + 7));
    objc_msgSend_setObject_forKeyedSubscript_(v6, v63, (uint64_t)v62, @"otrcS4", v64);

    uint64_t v69 = objc_msgSend_numberWithDouble_(NSNumber, v65, v66, v67, v68, *((double *)v350 + 2));
    objc_msgSend_setObject_forKeyedSubscript_(v6, v70, (uint64_t)v69, @"otrcY1", v71);

    uint64_t v76 = objc_msgSend_numberWithDouble_(NSNumber, v72, v73, v74, v75, *((double *)v350 + 4));
    objc_msgSend_setObject_forKeyedSubscript_(v6, v77, (uint64_t)v76, @"otrcY2", v78);

    BOOL v83 = objc_msgSend_numberWithDouble_(NSNumber, v79, v80, v81, v82, *((double *)v350 + 6));
    objc_msgSend_setObject_forKeyedSubscript_(v6, v84, (uint64_t)v83, @"otrcY3", v85);

    if (__p) {
      sub_1DDA18310((std::__shared_weak_count *)__p);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1200))(&v350, a1);
    if (sub_1DDAD88E0((uint64_t)&v350) < 3 || sub_1DDAD88D8((unsigned int *)&v350) <= 2)
    {
      v346 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v346, "RawCameraException");
      __cxa_throw(v346, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v86 = NSNumber;
    uint64_t v348 = sub_1DDAD8560((uint64_t)&v350, 0);
    uint64_t v349 = v87;
    size_t v88 = (double *)sub_1DDAD85FC((uint64_t)&v348, 0);
    uint64_t v93 = objc_msgSend_numberWithDouble_(v86, v89, v90, v91, v92, *v88);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v94, (uint64_t)v93, @"mc00", v95);

    uint64_t v96 = NSNumber;
    uint64_t v348 = sub_1DDAD8560((uint64_t)&v350, 0);
    uint64_t v349 = v97;
    unsigned int v98 = (double *)sub_1DDAD85FC((uint64_t)&v348, 1u);
    uint64_t v103 = objc_msgSend_numberWithDouble_(v96, v99, v100, v101, v102, *v98);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v104, (uint64_t)v103, @"mc01", v105);

    int v106 = NSNumber;
    uint64_t v348 = sub_1DDAD8560((uint64_t)&v350, 0);
    uint64_t v349 = v107;
    uint64_t v108 = (double *)sub_1DDAD85FC((uint64_t)&v348, 2u);
    unint64_t v113 = objc_msgSend_numberWithDouble_(v106, v109, v110, v111, v112, *v108);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v114, (uint64_t)v113, @"mc02", v115);

    unint64_t v116 = NSNumber;
    uint64_t v348 = sub_1DDAD8560((uint64_t)&v350, 1u);
    uint64_t v349 = v117;
    uint64_t v118 = (double *)sub_1DDAD85FC((uint64_t)&v348, 0);
    uint64_t v123 = objc_msgSend_numberWithDouble_(v116, v119, v120, v121, v122, *v118);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v124, (uint64_t)v123, @"mc10", v125);

    uint64_t v126 = NSNumber;
    uint64_t v348 = sub_1DDAD8560((uint64_t)&v350, 1u);
    uint64_t v349 = v127;
    uint64_t v128 = (double *)sub_1DDAD85FC((uint64_t)&v348, 1u);
    uint64_t v133 = objc_msgSend_numberWithDouble_(v126, v129, v130, v131, v132, *v128);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v134, (uint64_t)v133, @"mc11", v135);

    uint64_t v136 = NSNumber;
    uint64_t v348 = sub_1DDAD8560((uint64_t)&v350, 1u);
    uint64_t v349 = v137;
    uint64_t v138 = (double *)sub_1DDAD85FC((uint64_t)&v348, 2u);
    uint64_t v143 = objc_msgSend_numberWithDouble_(v136, v139, v140, v141, v142, *v138);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v144, (uint64_t)v143, @"mc12", v145);

    uint64_t v146 = NSNumber;
    uint64_t v348 = sub_1DDAD8560((uint64_t)&v350, 2u);
    uint64_t v349 = v147;
    uint64_t v148 = (double *)sub_1DDAD85FC((uint64_t)&v348, 0);
    int v153 = objc_msgSend_numberWithDouble_(v146, v149, v150, v151, v152, *v148);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v154, (uint64_t)v153, @"mc20", v155);

    uint64_t v156 = NSNumber;
    uint64_t v348 = sub_1DDAD8560((uint64_t)&v350, 2u);
    uint64_t v349 = v157;
    unint64_t v158 = (double *)sub_1DDAD85FC((uint64_t)&v348, 1u);
    int v163 = objc_msgSend_numberWithDouble_(v156, v159, v160, v161, v162, *v158);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v164, (uint64_t)v163, @"mc21", v165);

    unsigned int v166 = NSNumber;
    uint64_t v348 = sub_1DDAD8560((uint64_t)&v350, 2u);
    uint64_t v349 = v167;
    signed int v168 = (double *)sub_1DDAD85FC((uint64_t)&v348, 2u);
    int v173 = objc_msgSend_numberWithDouble_(v166, v169, v170, v171, v172, *v168);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v174, (uint64_t)v173, @"mc22", v175);

    if (__p)
    {
      v352 = __p;
      operator delete(__p);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 112))(&v350, a1);
    signed int v176 = sub_1DDA4CC84((uint64_t)v350);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v177, (uint64_t)v176, @"version", v178);

    if (__p) {
      sub_1DDA18310((std::__shared_weak_count *)__p);
    }
    int v179 = NSNumber;
    uint64_t v180 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1256))(a1);
    int v184 = objc_msgSend_numberWithInt_(v179, v181, v180, v182, v183);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v185, (uint64_t)v184, (uint64_t)off_1EAB8AB58[0], v186);

    signed int v187 = NSNumber;
    uint64_t v188 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2392))(a1);
    uint64_t v192 = objc_msgSend_numberWithInt_(v187, v189, v188, v190, v191);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v193, (uint64_t)v192, (uint64_t)off_1EAB8AB60[0], v194);

    long long v195 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 1272))(a1);
    uint64_t v200 = objc_msgSend_numberWithDouble_(v195, v196, v197, v198, v199);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v201, (uint64_t)v200, (uint64_t)off_1EAB8AB68[0], v202);

    v203 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 1280))(a1);
    v208 = objc_msgSend_numberWithDouble_(v203, v204, v205, v206, v207);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v209, (uint64_t)v208, (uint64_t)off_1EAB8AB70[0], v210);

    v211 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 2416))(a1);
    v216 = objc_msgSend_numberWithDouble_(v211, v212, v213, v214, v215);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v217, (uint64_t)v216, (uint64_t)off_1EAB8AB78[0], v218);

    v219 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 2400))(a1);
    v224 = objc_msgSend_numberWithDouble_(v219, v220, v221, v222, v223);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v225, (uint64_t)v224, (uint64_t)off_1EAB8AB90[0], v226);

    v227 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 1296))(a1);
    v232 = objc_msgSend_numberWithDouble_(v227, v228, v229, v230, v231);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v233, (uint64_t)v232, (uint64_t)off_1EAB8AB80[0], v234);

    v235 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 1304))(a1);
    v240 = objc_msgSend_numberWithDouble_(v235, v236, v237, v238, v239);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v241, (uint64_t)v240, (uint64_t)off_1EAB8AB88[0], v242);

    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 912))(&v350, a1);
    if (__p == v350) {
      goto LABEL_37;
    }
    v246 = objc_msgSend_numberWithInt_(NSNumber, v243, (int)*(double *)v350, v244, v245);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v247, (uint64_t)v246, (uint64_t)off_1EAB8AAD8[0], v248);

    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v350) < 9) {
      goto LABEL_37;
    }
    v252 = objc_msgSend_numberWithInt_(NSNumber, v249, (int)*((double *)v350 + 1), v250, v251);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v253, (uint64_t)v252, (uint64_t)off_1EAB8AAE0[0], v254);

    if ((unint64_t)((unsigned char *)__p - (unsigned char *)v350) < 0x11
      || (objc_msgSend_numberWithInt_(NSNumber, v255, (int)*((double *)v350 + 2), v256, v257),
          v258 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v6, v259, (uint64_t)v258, (uint64_t)off_1EAB8AAE8[0], v260),
          v258,
          (unint64_t)((unsigned char *)__p - (unsigned char *)v350) <= 0x18))
    {
LABEL_37:
      sub_1DDA24AD0();
    }
    v264 = objc_msgSend_numberWithInt_(NSNumber, v261, (int)*((double *)v350 + 3), v262, v263);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v265, (uint64_t)v264, (uint64_t)off_1EAB8AAF0[0], v266);

    if (v350)
    {
      std::string __p = v350;
      operator delete(v350);
    }
    uint64_t v267 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
    uint64_t v268 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 456))(a1);
    v272 = objc_msgSend_stringWithFormat_(NSString, v269, @"{%d, %d}", v270, v271, v268 + v267, (HIDWORD(v268) + HIDWORD(v267)));
    objc_msgSend_setObject_forKeyedSubscript_(v6, v273, (uint64_t)v272, @"cropOrigin", v274);

    if (!getenv("RAWCAMERA_ENABLE_RAW_IMPORT_IN_SPARK"))
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 296))(&v350, a1, 5000);
      if (v350)
      {
        v275 = (*(void (**)(void *))(*(void *)v350 + 32))(v350);
        objc_msgSend_setObject_forKeyedSubscript_(v6, v276, (uint64_t)v275, @"jpegThumbnail", v277);
      }
      if (__p) {
        sub_1DDA18310((std::__shared_weak_count *)__p);
      }
    }
    v353.origin.CGFloat x = (*(double (**)(uint64_t))(*(void *)a1 + 480))(a1);
    CGFloat x = v353.origin.x;
    CGFloat y = v353.origin.y;
    CGFloat width = v353.size.width;
    CGFloat height = v353.size.height;
    if (!CGRectIsEmpty(v353))
    {
      v285 = objc_msgSend_stringWithFormat_(NSString, v282, @"{{%f, %f}, {%f, %f}}", v283, v284, *(void *)&x, *(void *)&y, *(void *)&width, *(void *)&height);
      objc_msgSend_setObject_forKeyedSubscript_(v6, v286, (uint64_t)v285, @"thumbnailCrop", v287);
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2480))(a1)
      || (double v292 = (*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0),
          double v293 = 0.5,
          v292 < 0.5))
    {
      double v293 = 0.0;
    }
    v294 = objc_msgSend_numberWithDouble_(NSNumber, v288, v289, v290, v291, v293);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v295, (uint64_t)v294, (uint64_t)off_1EAB8AD80[0], v296);

    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2480))(a1))
    {
      v350 = 0;
      uint64_t v348 = 0;
      double v297 = (*(double (**)(uint64_t, void **, uint64_t *))(*(void *)a1 + 2664))(a1, &v350, &v348);
      double v298 = (*(double (**)(uint64_t))(*(void *)a1 + 2672))(a1);
      v303 = objc_msgSend_numberWithDouble_(NSNumber, v299, v300, v301, v302, v297);
      objc_msgSend_setObject_forKeyedSubscript_(v6, v304, (uint64_t)v303, @"rn", v305);

      v310 = objc_msgSend_numberWithDouble_(NSNumber, v306, v307, v308, v309, v298);
      objc_msgSend_setObject_forKeyedSubscript_(v6, v311, (uint64_t)v310, @"rnp", v312);

      v317 = objc_msgSend_numberWithDouble_(NSNumber, v313, v314, v315, v316, *(double *)&v350);
      objc_msgSend_setObject_forKeyedSubscript_(v6, v318, (uint64_t)v317, @"dngNoiseModelScale", v319);

      v324 = objc_msgSend_numberWithDouble_(NSNumber, v320, v321, v322, v323, *(double *)&v348);
      objc_msgSend_setObject_forKeyedSubscript_(v6, v325, (uint64_t)v324, @"dngNoiseModelOffset", v326);
    }
    v327 = NSNumber;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 800))(a1, a2);
    v332 = objc_msgSend_numberWithDouble_(v327, v328, v329, v330, v331);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v333, (uint64_t)v332, @"sushiFactor", v334);

    v335 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 280))(a1);
    v340 = objc_msgSend_numberWithDouble_(v335, v336, v337, v338, v339);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v341, (uint64_t)v340, @"airyDiskRatio", v342);

    v343 = (*(void (**)(uint64_t))(*(void *)a1 + 2936))(a1);
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      objc_msgSend_setObject_forKeyedSubscript_(v6, v344, (uint64_t)v343, @"linearizationTable", v345);
    }
  }
}

void sub_1DDABBB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, std::__shared_weak_count *a16, uint64_t a17)
{
  if (a16) {
    sub_1DDA18310(a16);
  }

  _Unwind_Resume(a1);
}

std::string *sub_1DDABBD3C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
  double result = (std::string *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  if (result) {
    return std::string::append(a2, " dng", 4uLL);
  }
  return result;
}

void sub_1DDABBDC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDABBDE0(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 272))(a1);
  double v3 = 0.0;
  if (v2 == 0.707106781) {
    return v3;
  }
  long double v4 = log2(v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, long double))(*(void *)a1 + 160))(&v74, a1, v4 + v4);
  id v5 = (*(void (**)(void))(*(void *)v74 + 400))();
  if (v75) {
    sub_1DDA18310(v75);
  }
  double v9 = (*(double (**)(uint64_t))(*(void *)a1 + 328))(a1);
  if (v9 == 0.0)
  {
    uint64_t v13 = objc_msgSend_valueForKeyPath_(v5, v6, @"{Exif}.FocalPlaneXResolution", v7, v8);
    if (!v13
      || (objc_msgSend_valueForKeyPath_(v5, v10, @"{Exif}.FocalPlaneResolutionUnit", v11, v12),
          double v14 = objc_claimAutoreleasedReturnValue(),
          v14,
          v13,
          !v14))
    {
      __int16 v35 = objc_msgSend_valueForKeyPath_(v5, v10, @"{Exif}.FocalLength", v11, v12);
      if (v35)
      {
        uint64_t v36 = objc_msgSend_valueForKeyPath_(v5, v32, @"{Exif}.FocalLenIn35mmFilm", v33, v34);

        if (v36)
        {
          uint64_t v40 = objc_msgSend_valueForKeyPath_(v5, v37, @"{Exif}.FocalLength", v38, v39);
          objc_msgSend_doubleValue(v40, v41, v42, v43, v44);
          double v46 = v45;

          uint64_t v50 = objc_msgSend_valueForKeyPath_(v5, v47, @"{Exif}.FocalLenIn35mmFilm", v48, v49);
          objc_msgSend_doubleValue(v50, v51, v52, v53, v54);
          double v56 = v55;

          uint64_t v60 = objc_msgSend_valueForKeyPath_(v5, v57, @"PixelWidth", v58, v59);
          objc_msgSend_doubleValue(v60, v61, v62, v63, v64);
          double v66 = v65;

          double v9 = v46 / v56 * 35.0 * 1000.0 / v66;
        }
      }
      goto LABEL_15;
    }
    double v15 = objc_msgSend_valueForKeyPath_(v5, v10, @"{Exif}.FocalPlaneResolutionUnit", v11, v12);
    int v20 = objc_msgSend_intValue(v15, v16, v17, v18, v19);

    if (v20 == 3)
    {
      uint64_t v67 = objc_msgSend_valueForKeyPath_(v5, v21, @"{Exif}.FocalPlaneXResolution", v22, v23);
      objc_msgSend_doubleValue(v67, v68, v69, v70, v71);
      double v30 = v72;

      double v31 = 10000.0;
      goto LABEL_14;
    }
    if (v20 == 2)
    {
      uint64_t v24 = objc_msgSend_valueForKeyPath_(v5, v21, @"{Exif}.FocalPlaneXResolution", v22, v23);
      objc_msgSend_doubleValue(v24, v25, v26, v27, v28);
      double v30 = v29;

      double v31 = 25400.0;
LABEL_14:
      double v9 = v31 / v30;
    }
  }
LABEL_15:
  if (v9 == 0.0) {
    double v3 = 0.0;
  }
  else {
    double v3 = v2 / 0.75 / v9;
  }

  return v3;
}

void sub_1DDABC0F4(_Unwind_Exception *a1)
{
  double v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DDABC14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  JUMPOUT(0x1DDABC144);
}

id sub_1DDABC160(uint64_t a1, unsigned int a2)
{
  uint64_t v1834 = *MEMORY[0x1E4F143B8];
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 456))(a1);
  uint64_t v8 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v4, v5, v6, v7);
  if (!v8)
  {
    v1770 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v1770, "RawCameraException");
    __cxa_throw(v1770, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 112))(__p, a1);
  double v9 = sub_1DDA4CC84((uint64_t)__p[0]);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v10, (uint64_t)v9, @"version", v11);

  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  uint64_t v12 = NSNumber;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2168))(a1);
  uint64_t v17 = objc_msgSend_numberWithInt_(v12, v14, v13, v15, v16);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v18, (uint64_t)v17, @"pattern", v19);

  uint64_t v23 = objc_msgSend_numberWithInt_(NSNumber, v20, HIDWORD(v3), v21, v22);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v24, (uint64_t)v23, @"leftmargin", v25);

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 1120))(&v1820, a1);
  uint64_t v26 = v1820;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v26 + 8))(__p, v26, v27);
  if (v1821) {
    sub_1DDA18310(v1821);
  }
  uint64_t v32 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)32)
  {
    uint64_t v33 = objc_msgSend_numberWithDouble_(NSNumber, v28, v29, v30, v31, *(double *)__p[0]);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v34, (uint64_t)v33, @"blackNoise0", v35);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9) {
      goto LABEL_115;
    }
    uint64_t v40 = objc_msgSend_numberWithDouble_(NSNumber, v36, v37, v38, v39, *((double *)__p[0] + 1));
    objc_msgSend_setObject_forKeyedSubscript_(v8, v41, (uint64_t)v40, @"blackNoise1", v42);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)0x11
      || (objc_msgSend_numberWithDouble_(NSNumber, v43, v44, v45, v46, *((double *)__p[0] + 2)),
          uint64_t v47 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v8, v48, (uint64_t)v47, @"blackNoise2", v49),
          v47,
          (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x18))
    {
LABEL_115:
      sub_1DDA24AD0();
    }
    uint64_t v54 = objc_msgSend_numberWithDouble_(NSNumber, v50, v51, v52, v53, *((double *)__p[0] + 3));
    objc_msgSend_setObject_forKeyedSubscript_(v8, v55, (uint64_t)v54, @"blackNoise3", v56);

    uint64_t v32 = __p[0];
  }
  if (v32)
  {
    __p[1] = v32;
    operator delete(v32);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1024))(__p, a1);
  uint64_t v60 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)32)
  {
    uint64_t v61 = objc_msgSend_numberWithInt_(NSNumber, v57, (int)*(double *)__p[0], v58, v59);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v62, (uint64_t)v61, @"blackStdDev0", v63);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9) {
      goto LABEL_116;
    }
    uint64_t v67 = objc_msgSend_numberWithInt_(NSNumber, v64, (int)*((double *)__p[0] + 1), v65, v66);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v68, (uint64_t)v67, @"blackStdDev1", v69);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)0x11
      || (objc_msgSend_numberWithInt_(NSNumber, v70, (int)*((double *)__p[0] + 2), v71, v72),
          uint64_t v73 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v8, v74, (uint64_t)v73, @"blackStdDev2", v75),
          v73,
          (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x18))
    {
LABEL_116:
      sub_1DDA24AD0();
    }
    unsigned int v79 = objc_msgSend_numberWithInt_(NSNumber, v76, (int)*((double *)__p[0] + 3), v77, v78);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v80, (uint64_t)v79, @"blackStdDev3", v81);

    uint64_t v60 = __p[0];
  }
  if (v60)
  {
    __p[1] = v60;
    operator delete(v60);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1016))(__p, a1);
  uint64_t v85 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)32)
  {
    uint64_t v86 = objc_msgSend_numberWithInt_(NSNumber, v82, (int)*(double *)__p[0], v83, v84);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v87, (uint64_t)v86, @"black0", v88);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9) {
      goto LABEL_117;
    }
    uint64_t v92 = objc_msgSend_numberWithInt_(NSNumber, v89, (int)*((double *)__p[0] + 1), v90, v91);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v93, (uint64_t)v92, @"black1", v94);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)0x11
      || (objc_msgSend_numberWithInt_(NSNumber, v95, (int)*((double *)__p[0] + 2), v96, v97),
          unsigned int v98 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v8, v99, (uint64_t)v98, @"black2", v100),
          v98,
          (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x18))
    {
LABEL_117:
      sub_1DDA24AD0();
    }
    uint64_t v104 = objc_msgSend_numberWithInt_(NSNumber, v101, (int)*((double *)__p[0] + 3), v102, v103);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v105, (uint64_t)v104, @"black3", v106);

    uint64_t v85 = __p[0];
  }
  if (v85)
  {
    __p[1] = v85;
    operator delete(v85);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 912))(__p, a1);
  uint64_t v111 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) >= (void *)0x11)
  {
    uint64_t v112 = objc_msgSend_numberWithDouble_(NSNumber, v107, v108, v109, v110, *(double *)__p[0]);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v113, (uint64_t)v112, (uint64_t)off_1EAB8AAD8[0], v114);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9
      || (objc_msgSend_numberWithDouble_(NSNumber, v115, v116, v117, v118, *((double *)__p[0] + 1)),
          uint64_t v119 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v8, v120, (uint64_t)v119, (uint64_t)off_1EAB8AAE0[0], v121),
          v119,
          (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x10))
    {
      sub_1DDA24AD0();
    }
    uint64_t v126 = objc_msgSend_numberWithDouble_(NSNumber, v122, v123, v124, v125, *((double *)__p[0] + 2));
    objc_msgSend_setObject_forKeyedSubscript_(v8, v127, (uint64_t)v126, (uint64_t)off_1EAB8AAE8[0], v128);

    uint64_t v111 = __p[0];
    if ((void *)((char *)__p[1] - (char *)__p[0]) >= (void *)0x19)
    {
      uint64_t v133 = objc_msgSend_numberWithDouble_(NSNumber, v129, v130, v131, v132, *((double *)__p[0] + 3));
      objc_msgSend_setObject_forKeyedSubscript_(v8, v134, (uint64_t)v133, (uint64_t)off_1EAB8AAF0[0], v135);

      uint64_t v111 = __p[0];
    }
  }
  if (v111)
  {
    __p[1] = v111;
    operator delete(v111);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 744))(__p, a1);
  uint64_t v140 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)24)
  {
    uint64_t v141 = objc_msgSend_numberWithDouble_(NSNumber, v136, v137, v138, v139, *(double *)__p[0]);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v142, (uint64_t)v141, @"factor0", v143);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9
      || (objc_msgSend_numberWithDouble_(NSNumber, v144, v145, v146, v147, *((double *)__p[0] + 1)),
          uint64_t v148 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v8, v149, (uint64_t)v148, @"factor1", v150),
          v148,
          (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x10))
    {
      sub_1DDA24AD0();
    }
    uint64_t v155 = objc_msgSend_numberWithDouble_(NSNumber, v151, v152, v153, v154, *((double *)__p[0] + 2));
    objc_msgSend_setObject_forKeyedSubscript_(v8, v156, (uint64_t)v155, @"factor2", v157);

    uint64_t v140 = __p[0];
  }
  if (v140)
  {
    __p[1] = v140;
    operator delete(v140);
  }
  (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 792))(__p, a1, a2);
  if (sub_1DDAD88E0((uint64_t)__p) < 3 || sub_1DDAD88D8((unsigned int *)__p) <= 2)
  {
    v1768 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v1768, "RawCameraException");
    __cxa_throw(v1768, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v158 = NSNumber;
  uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 0);
  v1821 = v159;
  uint64_t v160 = (double *)sub_1DDAD85FC((uint64_t)&v1820, 0);
  uint64_t v165 = objc_msgSend_numberWithDouble_(v158, v161, v162, v163, v164, *v160);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v166, (uint64_t)v165, @"r0", v167);

  signed int v168 = NSNumber;
  uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 0);
  v1821 = v169;
  uint64_t v170 = (double *)sub_1DDAD85FC((uint64_t)&v1820, 1u);
  uint64_t v175 = objc_msgSend_numberWithDouble_(v168, v171, v172, v173, v174, *v170);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v176, (uint64_t)v175, @"r1", v177);

  uint64_t v178 = NSNumber;
  uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 0);
  v1821 = v179;
  uint64_t v180 = (double *)sub_1DDAD85FC((uint64_t)&v1820, 2u);
  int v185 = objc_msgSend_numberWithDouble_(v178, v181, v182, v183, v184, *v180);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v186, (uint64_t)v185, @"r2", v187);

  uint64_t v188 = NSNumber;
  unsigned int v189 = sub_1DDAD88E0((uint64_t)__p);
  double v194 = 0.0;
  if (v189 >= 4)
  {
    uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 0);
    v1821 = v195;
    double v194 = *(double *)sub_1DDAD85FC((uint64_t)&v1820, 3u);
  }
  int v196 = objc_msgSend_numberWithDouble_(v188, v190, v191, v192, v193, v194);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v197, (uint64_t)v196, @"r3", v198);

  uint64_t v199 = NSNumber;
  unsigned int v200 = sub_1DDAD88E0((uint64_t)__p);
  double v205 = 0.0;
  if (v200 >= 5)
  {
    uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 0);
    v1821 = v206;
    double v205 = *(double *)sub_1DDAD85FC((uint64_t)&v1820, 4u);
  }
  uint64_t v207 = objc_msgSend_numberWithDouble_(v199, v201, v202, v203, v204, v205);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v208, (uint64_t)v207, @"r4", v209);

  uint64_t v210 = NSNumber;
  uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 1u);
  v1821 = v211;
  v212 = (double *)sub_1DDAD85FC((uint64_t)&v1820, 0);
  v217 = objc_msgSend_numberWithDouble_(v210, v213, v214, v215, v216, *v212);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v218, (uint64_t)v217, @"g0", v219);

  v220 = NSNumber;
  uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 1u);
  v1821 = v221;
  uint64_t v222 = (double *)sub_1DDAD85FC((uint64_t)&v1820, 1u);
  v227 = objc_msgSend_numberWithDouble_(v220, v223, v224, v225, v226, *v222);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v228, (uint64_t)v227, @"g1", v229);

  uint64_t v230 = NSNumber;
  uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 1u);
  v1821 = v231;
  v232 = (double *)sub_1DDAD85FC((uint64_t)&v1820, 2u);
  uint64_t v237 = objc_msgSend_numberWithDouble_(v230, v233, v234, v235, v236, *v232);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v238, (uint64_t)v237, @"g2", v239);

  v240 = NSNumber;
  unsigned int v241 = sub_1DDAD88E0((uint64_t)__p);
  double v246 = 0.0;
  if (v241 >= 4)
  {
    uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 1u);
    v1821 = v247;
    double v246 = *(double *)sub_1DDAD85FC((uint64_t)&v1820, 3u);
  }
  uint64_t v248 = objc_msgSend_numberWithDouble_(v240, v242, v243, v244, v245, v246);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v249, (uint64_t)v248, @"g3", v250);

  uint64_t v251 = NSNumber;
  unsigned int v252 = sub_1DDAD88E0((uint64_t)__p);
  double v257 = 0.0;
  if (v252 >= 5)
  {
    uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 1u);
    v1821 = v258;
    double v257 = *(double *)sub_1DDAD85FC((uint64_t)&v1820, 4u);
  }
  v259 = objc_msgSend_numberWithDouble_(v251, v253, v254, v255, v256, v257);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v260, (uint64_t)v259, @"g4", v261);

  uint64_t v262 = NSNumber;
  uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 2u);
  v1821 = v263;
  v264 = (double *)sub_1DDAD85FC((uint64_t)&v1820, 0);
  v269 = objc_msgSend_numberWithDouble_(v262, v265, v266, v267, v268, *v264);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v270, (uint64_t)v269, @"b0", v271);

  v272 = NSNumber;
  uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 2u);
  v1821 = v273;
  uint64_t v274 = (double *)sub_1DDAD85FC((uint64_t)&v1820, 1u);
  v279 = objc_msgSend_numberWithDouble_(v272, v275, v276, v277, v278, *v274);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v280, (uint64_t)v279, @"b1", v281);

  v282 = NSNumber;
  uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 2u);
  v1821 = v283;
  uint64_t v284 = (double *)sub_1DDAD85FC((uint64_t)&v1820, 2u);
  uint64_t v289 = objc_msgSend_numberWithDouble_(v282, v285, v286, v287, v288, *v284);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v290, (uint64_t)v289, @"b2", v291);

  double v292 = NSNumber;
  unsigned int v293 = sub_1DDAD88E0((uint64_t)__p);
  double v298 = 0.0;
  if (v293 >= 4)
  {
    uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 2u);
    v1821 = v299;
    double v298 = *(double *)sub_1DDAD85FC((uint64_t)&v1820, 3u);
  }
  uint64_t v300 = objc_msgSend_numberWithDouble_(v292, v294, v295, v296, v297, v298);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v301, (uint64_t)v300, @"b3", v302);

  v303 = NSNumber;
  unsigned int v304 = sub_1DDAD88E0((uint64_t)__p);
  double v309 = 0.0;
  if (v304 >= 5)
  {
    uint64_t v1820 = sub_1DDAD8560((uint64_t)__p, 2u);
    v1821 = v310;
    double v309 = *(double *)sub_1DDAD85FC((uint64_t)&v1820, 4u);
  }
  v311 = objc_msgSend_numberWithDouble_(v303, v305, v306, v307, v308, v309);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v312, (uint64_t)v311, @"b4", v313);

  if (__p[1])
  {
    *(void **)&long long v1776 = __p[1];
    operator delete(__p[1]);
  }
  (*(void (**)(void **__return_ptr, uint64_t, void, void))(*(void *)a1 + 2624))(__p, a1, a2, 0);
  v318 = objc_msgSend_numberWithDouble_(NSNumber, v314, v315, v316, v317, *(double *)__p[0]);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v319, (uint64_t)v318, @"otrcS0", v320);

  v325 = objc_msgSend_numberWithDouble_(NSNumber, v321, v322, v323, v324, *((double *)__p[0] + 1));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v326, (uint64_t)v325, @"otrcS1", v327);

  v332 = objc_msgSend_numberWithDouble_(NSNumber, v328, v329, v330, v331, *((double *)__p[0] + 3));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v333, (uint64_t)v332, @"otrcS2", v334);

  uint64_t v339 = objc_msgSend_numberWithDouble_(NSNumber, v335, v336, v337, v338, *((double *)__p[0] + 5));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v340, (uint64_t)v339, @"otrcS3", v341);

  v346 = objc_msgSend_numberWithDouble_(NSNumber, v342, v343, v344, v345, *((double *)__p[0] + 7));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v347, (uint64_t)v346, @"otrcS4", v348);

  CGRect v353 = objc_msgSend_numberWithDouble_(NSNumber, v349, v350, v351, v352, *((double *)__p[0] + 2));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v354, (uint64_t)v353, @"otrcY1", v355);

  v360 = objc_msgSend_numberWithDouble_(NSNumber, v356, v357, v358, v359, *((double *)__p[0] + 4));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v361, (uint64_t)v360, @"otrcY2", v362);

  v367 = objc_msgSend_numberWithDouble_(NSNumber, v363, v364, v365, v366, *((double *)__p[0] + 6));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v368, (uint64_t)v367, @"otrcY3", v369);

  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  v370 = NSNumber;
  uint64_t v371 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1376))(a1);
  v375 = objc_msgSend_numberWithBool_(v370, v372, v371, v373, v374);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v376, (uint64_t)v375, @"blackDespeckleEnabled", v377);

  v381 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v378, a2, v379, v380);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v382, (uint64_t)v381, @"shouldExtendRawEnabled", v383);

  v384 = NSNumber;
  uint64_t v385 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1208))(a1);
  v389 = objc_msgSend_numberWithBool_(v384, v386, v385, v387, v388);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v390, (uint64_t)v389, @"HREnabled", v391);

  v392 = NSNumber;
  uint64_t v393 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2112))(a1);
  v397 = objc_msgSend_numberWithBool_(v392, v394, v393, v395, v396);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v398, (uint64_t)v397, @"SPEEnabled", v399);

  v400 = NSNumber;
  uint64_t v401 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1232))(a1);
  v405 = objc_msgSend_numberWithBool_(v400, v402, v401, v403, v404);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v406, (uint64_t)v405, @"NREnabled", v407);

  v408 = NSNumber;
  uint64_t v409 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2224))(a1);
  v413 = objc_msgSend_numberWithBool_(v408, v410, v409, v411, v412);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v414, (uint64_t)v413, @"sharpenEdgesEnabled", v415);

  v416 = NSNumber;
  uint64_t v417 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2264))(a1);
  v421 = objc_msgSend_numberWithBool_(v416, v418, v417, v419, v420);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v422, (uint64_t)v421, @"chromaBlurEnabled", v423);

  v424 = NSNumber;
  uint64_t v425 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 2408))(a1, a2);
  v429 = objc_msgSend_numberWithBool_(v424, v426, v425, v427, v428);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v430, (uint64_t)v429, @"boostEnabled", v431);

  objc_msgSend_setObject_forKeyedSubscript_(v8, v432, (uint64_t)&unk_1F39AECC0, @"boostKind", v433);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v434, (uint64_t)&unk_1F39AFC98, @"gamutLimitationCase", v435);
  v436 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2120))(a1);
  v441 = objc_msgSend_numberWithDouble_(v436, v437, v438, v439, v440);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v442, (uint64_t)v441, @"SPEThreshold", v443);

  v444 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1448))(a1);
  v449 = objc_msgSend_numberWithDouble_(v444, v445, v446, v447, v448);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v450, (uint64_t)v449, @"sharpenRadius", v451);

  v452 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2232))(a1);
  v457 = objc_msgSend_numberWithDouble_(v452, v453, v454, v455, v456);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v458, (uint64_t)v457, @"sharpenIntensity", v459);

  v460 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2256))(a1);
  v465 = objc_msgSend_numberWithDouble_(v460, v461, v462, v463, v464);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v466, (uint64_t)v465, @"sharpenAbsoluteLimit", v467);

  v468 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2240))(a1);
  v473 = objc_msgSend_numberWithDouble_(v468, v469, v470, v471, v472);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v474, (uint64_t)v473, @"sharpenEdgeIntensity", v475);

  v476 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1480))(a1);
  v481 = objc_msgSend_numberWithDouble_(v476, v477, v478, v479, v480);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v482, (uint64_t)v481, @"sharpenEdgeThreshold", v483);

  v484 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1488))(a1);
  v489 = objc_msgSend_numberWithDouble_(v484, v485, v486, v487, v488);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v490, (uint64_t)v489, @"sharpenEdgeMaskSoftness", v491);

  v492 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1496))(a1);
  v497 = objc_msgSend_numberWithDouble_(v492, v493, v494, v495, v496);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v498, (uint64_t)v497, (uint64_t)off_1EAB8AA58[0], v499);

  v500 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1504))(a1);
  v505 = objc_msgSend_numberWithDouble_(v500, v501, v502, v503, v504);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v506, (uint64_t)v505, (uint64_t)off_1EAB8AA30[0], v507);

  v508 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1552))(a1);
  v513 = objc_msgSend_numberWithDouble_(v508, v509, v510, v511, v512);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v514, (uint64_t)v513, @"chromaBlurNoiseFactor", v515);

  v516 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1768))(a1);
  v521 = objc_msgSend_numberWithDouble_(v516, v517, v518, v519, v520);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v522, (uint64_t)v521, (uint64_t)off_1EAB8A940[0], v523);

  v524 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2304))(a1);
  v529 = objc_msgSend_numberWithDouble_(v524, v525, v526, v527, v528);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v530, (uint64_t)v529, (uint64_t)off_1EAB8AA38[0], v531);

  v532 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2312))(a1);
  v537 = objc_msgSend_numberWithDouble_(v532, v533, v534, v535, v536);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v538, (uint64_t)v537, @"chromaBlurEdgeThreshold2", v539);

  v540 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2280))(a1);
  v545 = objc_msgSend_numberWithDouble_(v540, v541, v542, v543, v544);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v546, (uint64_t)v545, @"chromaBlurRadius2", v547);

  v548 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2432))(a1);
  v553 = objc_msgSend_numberWithDouble_(v548, v549, v550, v551, v552);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v554, (uint64_t)v553, @"antiAliasingFilterStrength", v555);

  v556 = NSNumber;
  int v557 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2472))(a1);
  v561 = objc_msgSend_numberWithBool_(v556, v558, v557 ^ 1u, v559, v560);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v562, (uint64_t)v561, @"noAntiAliasingFilter", v563);

  v564 = NSNumber;
  uint64_t v565 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2464))(a1);
  v569 = objc_msgSend_numberWithBool_(v564, v566, v565, v567, v568);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v570, (uint64_t)v569, @"powerBlurThreePass", v571);

  v572 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1752))(a1);
  v577 = objc_msgSend_numberWithDouble_(v572, v573, v574, v575, v576);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v578, (uint64_t)v577, @"greenReconstructionEdgeScale", v579);

  v580 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1568))(a1);
  v585 = objc_msgSend_numberWithDouble_(v580, v581, v582, v583, v584);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v586, (uint64_t)v585, @"scale1", v587);

  v588 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1576))(a1);
  v593 = objc_msgSend_numberWithDouble_(v588, v589, v590, v591, v592);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v594, (uint64_t)v593, @"scale2", v595);

  v596 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1272))(a1);
  v601 = objc_msgSend_numberWithDouble_(v596, v597, v598, v599, v600);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v602, (uint64_t)v601, @"boostTransitionPoint", v603);

  v604 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1280))(a1);
  v609 = objc_msgSend_numberWithDouble_(v604, v605, v606, v607, v608);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v610, (uint64_t)v609, @"boostTransitionWidth", v611);

  v612 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2416))(a1);
  v617 = objc_msgSend_numberWithDouble_(v612, v613, v614, v615, v616);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v618, (uint64_t)v617, @"boostLuminanceAmount", v619);

  v620 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2400))(a1);
  v625 = objc_msgSend_numberWithDouble_(v620, v621, v622, v623, v624);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v626, (uint64_t)v625, @"boostAmount", v627);

  v628 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1584))(a1);
  v633 = objc_msgSend_numberWithDouble_(v628, v629, v630, v631, v632);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v634, (uint64_t)v633, @"shadowDesaturatePoint", v635);

  v636 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1592))(a1);
  v641 = objc_msgSend_numberWithDouble_(v636, v637, v638, v639, v640);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v642, (uint64_t)v641, @"shadowDesaturateWidth", v643);

  v644 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2216))(a1);
  v649 = objc_msgSend_numberWithDouble_(v644, v645, v646, v647, v648);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v650, (uint64_t)v649, @"shadowDesaturateAmount", v651);

  v652 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2088))(a1);
  v657 = objc_msgSend_numberWithDouble_(v652, v653, v654, v655, v656);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v658, (uint64_t)v657, @"noiseInterpolant", v659);

  v660 = NSNumber;
  unsigned int v661 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  v666 = objc_msgSend_numberWithDouble_(v660, v662, v663, v664, v665, (double)v661);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v667, (uint64_t)v666, @"ISOSetting", v668);

  v669 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
  v674 = objc_msgSend_numberWithDouble_(v669, v670, v671, v672, v673);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v675, (uint64_t)v674, @"exposureTime", v676);

  v677 = NSNumber;
  uint64_t v678 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2104))(a1);
  v682 = objc_msgSend_numberWithBool_(v677, v679, v678, v680, v681);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v683, (uint64_t)v682, @"noiseTransitionEnabled", v684);

  v685 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2080))(a1);
  v690 = objc_msgSend_numberWithDouble_(v685, v686, v687, v688, v689);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v691, (uint64_t)v690, @"noiseEstimate", v692);

  v693 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1384))(a1);
  v698 = objc_msgSend_numberWithDouble_(v693, v694, v695, v696, v697);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v699, (uint64_t)v698, @"greenSplitRed", v700);

  v701 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1392))(a1);
  v706 = objc_msgSend_numberWithDouble_(v701, v702, v703, v704, v705);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v707, (uint64_t)v706, @"greenSplitGreen1", v708);

  v709 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1400))(a1);
  v714 = objc_msgSend_numberWithDouble_(v709, v710, v711, v712, v713);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v715, (uint64_t)v714, @"greenSplitBlue", v716);

  v717 = NSNumber;
  uint64_t v718 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1408))(a1);
  v722 = objc_msgSend_numberWithInt_(v717, v719, v718, v720, v721);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v723, (uint64_t)v722, @"greenBayerSplit", v724);

  v725 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2640))(a1);
  v730 = objc_msgSend_numberWithDouble_(v725, v726, v727, v728, v729);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v731, (uint64_t)v730, (uint64_t)off_1EAB8A950[0], v732);

  v733 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2648))(a1);
  v738 = objc_msgSend_numberWithDouble_(v733, v734, v735, v736, v737);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v739, (uint64_t)v738, (uint64_t)off_1EAB8A958[0], v740);

  unsigned __int8 v1817 = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2128))(__p, a1);
  v741 = (void (***)(void *, uint64_t, uint64_t *, unsigned __int8 *))__p[0];
  uint64_t v742 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  (**v741)(v741, v742, &v1820, &v1817);
  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  LODWORD(v747) = v1820;
  v748 = objc_msgSend_numberWithFloat_(NSNumber, v743, v744, v745, v746, v747);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v749, (uint64_t)v748, @"signalNoiseModelA0", v750);

  LODWORD(v751) = HIDWORD(v1820);
  v756 = objc_msgSend_numberWithFloat_(NSNumber, v752, v753, v754, v755, v751);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v757, (uint64_t)v756, @"signalNoiseModelB0", v758);

  LODWORD(v759) = v1821;
  v764 = objc_msgSend_numberWithFloat_(NSNumber, v760, v761, v762, v763, v759);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v765, (uint64_t)v764, @"signalNoiseModelC0", v766);

  LODWORD(v767) = HIDWORD(v1821);
  v772 = objc_msgSend_numberWithFloat_(NSNumber, v768, v769, v770, v771, v767);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v773, (uint64_t)v772, @"signalNoiseModelPRNU0", v774);

  LODWORD(v775) = v1822;
  v780 = objc_msgSend_numberWithFloat_(NSNumber, v776, v777, v778, v779, v775);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v781, (uint64_t)v780, @"signalNoiseModelA1", v782);

  LODWORD(v783) = v1823;
  v788 = objc_msgSend_numberWithFloat_(NSNumber, v784, v785, v786, v787, v783);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v789, (uint64_t)v788, @"signalNoiseModelB1", v790);

  LODWORD(v791) = v1824;
  v796 = objc_msgSend_numberWithFloat_(NSNumber, v792, v793, v794, v795, v791);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v797, (uint64_t)v796, @"signalNoiseModelC1", v798);

  LODWORD(v799) = v1825;
  v804 = objc_msgSend_numberWithFloat_(NSNumber, v800, v801, v802, v803, v799);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v805, (uint64_t)v804, @"signalNoiseModelPRNU1", v806);

  LODWORD(v807) = v1826;
  v812 = objc_msgSend_numberWithFloat_(NSNumber, v808, v809, v810, v811, v807);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v813, (uint64_t)v812, @"signalNoiseModelA2", v814);

  LODWORD(v815) = v1827;
  v820 = objc_msgSend_numberWithFloat_(NSNumber, v816, v817, v818, v819, v815);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v821, (uint64_t)v820, @"signalNoiseModelB2", v822);

  LODWORD(v823) = v1828;
  v828 = objc_msgSend_numberWithFloat_(NSNumber, v824, v825, v826, v827, v823);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v829, (uint64_t)v828, @"signalNoiseModelC2", v830);

  LODWORD(v831) = v1829;
  v836 = objc_msgSend_numberWithFloat_(NSNumber, v832, v833, v834, v835, v831);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v837, (uint64_t)v836, @"signalNoiseModelPRNU2", v838);

  LODWORD(v839) = v1830;
  v844 = objc_msgSend_numberWithFloat_(NSNumber, v840, v841, v842, v843, v839);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v845, (uint64_t)v844, @"signalNoiseModelA3", v846);

  LODWORD(v847) = v1831;
  v852 = objc_msgSend_numberWithFloat_(NSNumber, v848, v849, v850, v851, v847);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v853, (uint64_t)v852, @"signalNoiseModelB3", v854);

  LODWORD(v855) = v1832;
  v860 = objc_msgSend_numberWithFloat_(NSNumber, v856, v857, v858, v859, v855);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v861, (uint64_t)v860, @"signalNoiseModelC3", v862);

  LODWORD(v863) = v1833;
  v868 = objc_msgSend_numberWithFloat_(NSNumber, v864, v865, v866, v867, v863);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v869, (uint64_t)v868, @"signalNoiseModelPRNU3", v870);

  v874 = objc_msgSend_numberWithInt_(NSNumber, v871, v1817, v872, v873);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v875, (uint64_t)v874, @"individualQuadratics", v876);

  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1016))(__p, a1);
  v877 = (double *)__p[0];
  v878 = (double *)__p[1];
  if (__p[0] == __p[1])
  {
    unsigned int v882 = 0;
  }
  else
  {
    uint64_t v879 = 0;
    unint64_t v880 = 0;
    do
    {
      float v881 = v877[v880];
      if ((LODWORD(v881) & 0x7FFFFFFFu) >= 0x7F800000)
      {
        v1766 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v1766, "RawCameraException");
        __cxa_throw(v1766, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      *((float *)&v1818 + v880) = v881;
      unsigned int v882 = v880 + 1;
      if (&v877[++v879] == v878) {
        break;
      }
    }
    while (v880++ < 3);
    if (&v877[v879] != v878)
    {
      v1773 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v1773, "RawCameraException");
      __cxa_throw(v1773, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v882 > 3) {
      goto LABEL_72;
    }
  }
  bzero((char *)&v1818 + 4 * v882, ((4 * v882) ^ 0xC) + 4);
LABEL_72:
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 2680))(a1, &v1818);
  LODWORD(v884) = v1818;
  v889 = objc_msgSend_numberWithFloat_(NSNumber, v885, v886, v887, v888, v884);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v890, (uint64_t)v889, @"black0", v891);

  LODWORD(v892) = HIDWORD(v1818);
  v897 = objc_msgSend_numberWithFloat_(NSNumber, v893, v894, v895, v896, v892);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v898, (uint64_t)v897, @"black1", v899);

  LODWORD(v900) = v1819;
  v905 = objc_msgSend_numberWithFloat_(NSNumber, v901, v902, v903, v904, v900);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v906, (uint64_t)v905, @"black2", v907);

  LODWORD(v908) = HIDWORD(v1819);
  v913 = objc_msgSend_numberWithFloat_(NSNumber, v909, v910, v911, v912, v908);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v914, (uint64_t)v913, @"black3", v915);

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 1120))(&v1818, a1);
  uint64_t v916 = v1818;
  uint64_t v917 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v916 + 8))(__p, v916, v917);
  if (v1819) {
    sub_1DDA18310(v1819);
  }
  v922 = (double *)__p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)32)
  {
    v1771 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v1771, "RawCameraException");
    __cxa_throw(v1771, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (__p[0] == __p[1])
  {
    LODWORD(v923) = 0;
    goto LABEL_92;
  }
  LODWORD(v923) = 1;
  while (1)
  {
    float v924 = *v922;
    if ((LODWORD(v924) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      v1767 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v1767, "RawCameraException");
      __cxa_throw(v1767, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v923 == 3)
    {
      v925 = objc_msgSend_numberWithFloat_(NSNumber, v918, v919, v920, v921);
      objc_msgSend_setObject_forKeyedSubscript_(v8, v930, (uint64_t)v925, @"darkNoise2", v931);
      goto LABEL_86;
    }
    if (v923 == 2)
    {
      v925 = objc_msgSend_numberWithFloat_(NSNumber, v918, v919, v920, v921);
      objc_msgSend_setObject_forKeyedSubscript_(v8, v928, (uint64_t)v925, @"darkNoise1", v929);
      goto LABEL_86;
    }
    if (v923 != 1) {
      break;
    }
    v925 = objc_msgSend_numberWithFloat_(NSNumber, v918, v919, v920, v921);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v926, (uint64_t)v925, @"darkNoise0", v927);
LABEL_86:

    ++v922;
    v932 = (double *)__p[1];
    LODWORD(v923) = v923 + 1;
    if (v922 == __p[1])
    {
      LODWORD(v923) = v923 - 1;
      goto LABEL_90;
    }
  }
  v933 = objc_msgSend_numberWithFloat_(NSNumber, v918, v919, v920, v921);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v934, (uint64_t)v933, @"darkNoise3", v935);

  ++v922;
  v932 = (double *)__p[1];
LABEL_90:
  if (v922 != v932)
  {
    v1772 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v1772, "RawCameraException");
    __cxa_throw(v1772, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v923 <= 3)
  {
LABEL_92:
    uint64_t v923 = v923;
    do
    {
      v936 = @"darkNoise3";
      if (v923 <= 2) {
        v936 = off_1E6D052B0[v923];
      }
      objc_msgSend_setObject_forKeyedSubscript_(v8, v918, (uint64_t)&unk_1F39B4D20, (uint64_t)v936, v921);
      ++v923;
    }
    while (v923 != 4);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v937 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2640))(a1);
  v942 = objc_msgSend_numberWithDouble_(v937, v938, v939, v940, v941);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v943, (uint64_t)v942, (uint64_t)off_1EAB8A950[0], v944);

  v945 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2648))(a1);
  v950 = objc_msgSend_numberWithDouble_(v945, v946, v947, v948, v949);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v951, (uint64_t)v950, (uint64_t)off_1EAB8A958[0], v952);

  v953 = NSNumber;
  uint64_t v954 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 520))(a1);
  v958 = objc_msgSend_numberWithInt_(v953, v955, v954, v956, v957);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v959, (uint64_t)v958, @"destWidth", v960);

  v961 = NSNumber;
  unint64_t v962 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 520))(a1);
  v966 = objc_msgSend_numberWithInt_(v961, v963, HIDWORD(v962), v964, v965);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v967, (uint64_t)v966, @"destHeight", v968);

  v969 = NSNumber;
  uint64_t v970 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512))(a1);
  v974 = objc_msgSend_numberWithInt_(v969, v971, v970, v972, v973);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v975, (uint64_t)v974, @"sourceWidth", v976);

  v977 = NSNumber;
  unint64_t v978 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512))(a1);
  v982 = objc_msgSend_numberWithInt_(v977, v979, HIDWORD(v978), v980, v981);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v983, (uint64_t)v982, @"sourceHeight", v984);

  v985 = NSNumber;
  uint64_t v986 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 504))(a1);
  v990 = objc_msgSend_numberWithInt_(v985, v987, v986, v988, v989);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v991, (uint64_t)v990, @"destHorizOffset", v992);

  v993 = NSNumber;
  unint64_t v994 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 504))(a1);
  v998 = objc_msgSend_numberWithInt_(v993, v995, HIDWORD(v994), v996, v997);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v999, (uint64_t)v998, @"destVertOffset", v1000);

  unint64_t v1001 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
  v1005 = objc_msgSend_stringWithFormat_(NSString, v1002, @"{%d, %d}", v1003, v1004, v1001, HIDWORD(v1001));
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1006, (uint64_t)v1005, (uint64_t)off_1EAB8A988[0], v1007);

  unint64_t v1008 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
  v1012 = objc_msgSend_stringWithFormat_(NSString, v1009, @"{{%d, %d}, {%d, %d}}", v1010, v1011, v1008, HIDWORD(v1008), v1009, (unint64_t)v1009 >> 32);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1013, (uint64_t)v1012, (uint64_t)off_1EAB8A990[0], v1014);

  unint64_t v1015 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 456))(a1);
  v1019 = objc_msgSend_stringWithFormat_(NSString, v1016, @"{{%d, %d}, {%d, %d}}", v1017, v1018, v1015, HIDWORD(v1015), v1016, (unint64_t)v1016 >> 32);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1020, (uint64_t)v1019, (uint64_t)off_1EAB8A998[0], v1021);

  unint64_t v1022 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 496))(a1);
  v1026 = objc_msgSend_stringWithFormat_(NSString, v1023, @"{{%d, %d}, {%d, %d}}", v1024, v1025, v1022, HIDWORD(v1022), v1023, (unint64_t)v1023 >> 32);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1027, (uint64_t)v1026, @"actualCropRect", v1028);

  unint64_t v1029 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 496))(a1);
  v1033 = objc_msgSend_stringWithFormat_(NSString, v1030, @"{{%d, %d}, {%d, %d}}", v1031, v1032, v1029, HIDWORD(v1029), v1030, (unint64_t)v1030 >> 32);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1034, (uint64_t)v1033, @"paddedCropRect", v1035);

  v1036 = NSNumber;
  uint64_t v1037 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 960))(a1);
  v1041 = objc_msgSend_numberWithInt_(v1036, v1038, v1037, v1039, v1040);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1042, (uint64_t)v1041, (uint64_t)off_1EAB8AA18[0], v1043);

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) == 9)
  {
    unint64_t v1044 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1008))(a1);
    v1048 = objc_msgSend_stringWithFormat_(NSString, v1045, @"{{%d, %d}, {%d, %d}}", v1046, v1047, v1044, HIDWORD(v1044), v1045, (unint64_t)v1045 >> 32);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1049, (uint64_t)v1048, @"v2blackSampleArea", v1050);
  }
  v1051 = NSNumber;
  uint64_t v1052 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 576))(a1);
  v1056 = objc_msgSend_numberWithInt_(v1051, v1053, v1052, v1054, v1055);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1057, (uint64_t)v1056, @"bitsPerSample", v1058);

  v1059 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2528))(a1);
  v1064 = objc_msgSend_numberWithDouble_(v1059, v1060, v1061, v1062, v1063);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1065, (uint64_t)v1064, @"CNRAmount", v1066);

  v1067 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2608))(a1);
  v1072 = objc_msgSend_numberWithDouble_(v1067, v1068, v1069, v1070, v1071);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1073, (uint64_t)v1072, @"CNRNoiseFactor", v1074);

  v1075 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2600))(a1);
  v1080 = objc_msgSend_numberWithDouble_(v1075, v1076, v1077, v1078, v1079);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1081, (uint64_t)v1080, @"CNRRadius", v1082);

  v1083 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2616))(a1);
  v1088 = objc_msgSend_numberWithDouble_(v1083, v1084, v1085, v1086, v1087);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1089, (uint64_t)v1088, @"CNRBias", v1090);

  long long v1805 = 0u;
  long long v1806 = 0u;
  long long v1803 = 0u;
  long long v1804 = 0u;
  long long v1801 = 0u;
  long long v1802 = 0u;
  long long v1799 = 0u;
  long long v1800 = 0u;
  long long v1797 = 0u;
  long long v1798 = 0u;
  long long v1795 = 0u;
  long long v1796 = 0u;
  long long v1793 = 0u;
  long long v1794 = 0u;
  long long v1791 = 0u;
  long long v1792 = 0u;
  long long v1789 = 0u;
  long long v1790 = 0u;
  long long v1787 = 0u;
  long long v1788 = 0u;
  long long v1785 = 0u;
  long long v1786 = 0u;
  long long v1783 = 0u;
  long long v1784 = 0u;
  long long v1781 = 0u;
  long long v1782 = 0u;
  long long v1779 = 0u;
  long long v1780 = 0u;
  long long v1777 = 0u;
  long long v1778 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v1776 = 0u;
  (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 2696))(__p, a1, a2);
  v1094 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v1091, v1788, v1092, v1093);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1095, (uint64_t)v1094, @"FujiCAEnable", v1096);

  v1100 = objc_msgSend_numberWithUnsignedChar_(NSNumber, v1097, BYTE12(v1800), v1098, v1099);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1101, (uint64_t)v1100, @"FujiLensCorrectionEnable", v1102);

  if ((_BYTE)v1788)
  {
    v1106 = objc_msgSend_numberWithInt_(NSNumber, v1103, DWORD1(v1788), v1104, v1105);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1107, (uint64_t)v1106, @"FujiCANumberOfPoints", v1108);

    v1112 = objc_msgSend_numberWithInt_(NSNumber, v1109, DWORD2(v1788), v1110, v1111);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1113, (uint64_t)v1112, @"FujiCAMaxDistance", v1114);

    LODWORD(v1115) = HIDWORD(v1788);
    v1120 = objc_msgSend_numberWithFloat_(NSNumber, v1116, v1117, v1118, v1119, v1115);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1121, (uint64_t)v1120, @"lrTable0", v1122);

    LODWORD(v1123) = v1789;
    v1128 = objc_msgSend_numberWithFloat_(NSNumber, v1124, v1125, v1126, v1127, v1123);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1129, (uint64_t)v1128, @"lrTable1", v1130);

    LODWORD(v1131) = DWORD1(v1789);
    v1136 = objc_msgSend_numberWithFloat_(NSNumber, v1132, v1133, v1134, v1135, v1131);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1137, (uint64_t)v1136, @"lrTable2", v1138);

    LODWORD(v1139) = DWORD2(v1789);
    v1144 = objc_msgSend_numberWithFloat_(NSNumber, v1140, v1141, v1142, v1143, v1139);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1145, (uint64_t)v1144, @"lrTable3", v1146);

    LODWORD(v1147) = HIDWORD(v1789);
    v1152 = objc_msgSend_numberWithFloat_(NSNumber, v1148, v1149, v1150, v1151, v1147);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1153, (uint64_t)v1152, @"lrTable4", v1154);

    LODWORD(v1155) = v1790;
    v1160 = objc_msgSend_numberWithFloat_(NSNumber, v1156, v1157, v1158, v1159, v1155);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1161, (uint64_t)v1160, @"lrTable5", v1162);

    LODWORD(v1163) = DWORD1(v1790);
    v1168 = objc_msgSend_numberWithFloat_(NSNumber, v1164, v1165, v1166, v1167, v1163);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1169, (uint64_t)v1168, @"lrTable6", v1170);

    LODWORD(v1171) = DWORD2(v1790);
    v1176 = objc_msgSend_numberWithFloat_(NSNumber, v1172, v1173, v1174, v1175, v1171);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1177, (uint64_t)v1176, @"lrTable7", v1178);

    LODWORD(v1179) = HIDWORD(v1790);
    v1184 = objc_msgSend_numberWithFloat_(NSNumber, v1180, v1181, v1182, v1183, v1179);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1185, (uint64_t)v1184, @"lrTable8", v1186);

    LODWORD(v1187) = v1791;
    v1192 = objc_msgSend_numberWithFloat_(NSNumber, v1188, v1189, v1190, v1191, v1187);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1193, (uint64_t)v1192, @"lrTable9", v1194);

    LODWORD(v1195) = DWORD1(v1791);
    v1200 = objc_msgSend_numberWithFloat_(NSNumber, v1196, v1197, v1198, v1199, v1195);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1201, (uint64_t)v1200, @"lrTable10", v1202);

    LODWORD(v1203) = DWORD2(v1791);
    v1208 = objc_msgSend_numberWithFloat_(NSNumber, v1204, v1205, v1206, v1207, v1203);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1209, (uint64_t)v1208, @"lrTable11", v1210);

    LODWORD(v1211) = HIDWORD(v1791);
    v1216 = objc_msgSend_numberWithFloat_(NSNumber, v1212, v1213, v1214, v1215, v1211);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1217, (uint64_t)v1216, @"lrTable12", v1218);

    LODWORD(v1219) = v1792;
    v1224 = objc_msgSend_numberWithFloat_(NSNumber, v1220, v1221, v1222, v1223, v1219);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1225, (uint64_t)v1224, @"lrTable13", v1226);

    LODWORD(v1227) = DWORD1(v1792);
    v1232 = objc_msgSend_numberWithFloat_(NSNumber, v1228, v1229, v1230, v1231, v1227);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1233, (uint64_t)v1232, @"lrTable14", v1234);

    LODWORD(v1235) = DWORD2(v1792);
    v1240 = objc_msgSend_numberWithFloat_(NSNumber, v1236, v1237, v1238, v1239, v1235);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1241, (uint64_t)v1240, @"lrTable15", v1242);

    LODWORD(v1243) = HIDWORD(v1792);
    v1248 = objc_msgSend_numberWithFloat_(NSNumber, v1244, v1245, v1246, v1247, v1243);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1249, (uint64_t)v1248, @"caRed0", v1250);

    LODWORD(v1251) = v1793;
    v1256 = objc_msgSend_numberWithFloat_(NSNumber, v1252, v1253, v1254, v1255, v1251);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1257, (uint64_t)v1256, @"caRed1", v1258);

    LODWORD(v1259) = DWORD1(v1793);
    v1264 = objc_msgSend_numberWithFloat_(NSNumber, v1260, v1261, v1262, v1263, v1259);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1265, (uint64_t)v1264, @"caRed2", v1266);

    LODWORD(v1267) = DWORD2(v1793);
    v1272 = objc_msgSend_numberWithFloat_(NSNumber, v1268, v1269, v1270, v1271, v1267);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1273, (uint64_t)v1272, @"caRed3", v1274);

    LODWORD(v1275) = HIDWORD(v1793);
    v1280 = objc_msgSend_numberWithFloat_(NSNumber, v1276, v1277, v1278, v1279, v1275);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1281, (uint64_t)v1280, @"caRed4", v1282);

    LODWORD(v1283) = v1794;
    v1288 = objc_msgSend_numberWithFloat_(NSNumber, v1284, v1285, v1286, v1287, v1283);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1289, (uint64_t)v1288, @"caRed5", v1290);

    LODWORD(v1291) = DWORD1(v1794);
    v1296 = objc_msgSend_numberWithFloat_(NSNumber, v1292, v1293, v1294, v1295, v1291);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1297, (uint64_t)v1296, @"caRed6", v1298);

    LODWORD(v1299) = DWORD2(v1794);
    v1304 = objc_msgSend_numberWithFloat_(NSNumber, v1300, v1301, v1302, v1303, v1299);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1305, (uint64_t)v1304, @"caRed7", v1306);

    LODWORD(v1307) = HIDWORD(v1794);
    v1312 = objc_msgSend_numberWithFloat_(NSNumber, v1308, v1309, v1310, v1311, v1307);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1313, (uint64_t)v1312, @"caRed8", v1314);

    LODWORD(v1315) = v1795;
    v1320 = objc_msgSend_numberWithFloat_(NSNumber, v1316, v1317, v1318, v1319, v1315);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1321, (uint64_t)v1320, @"caRed9", v1322);

    LODWORD(v1323) = DWORD1(v1795);
    v1328 = objc_msgSend_numberWithFloat_(NSNumber, v1324, v1325, v1326, v1327, v1323);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1329, (uint64_t)v1328, @"caRed10", v1330);

    LODWORD(v1331) = DWORD2(v1795);
    v1336 = objc_msgSend_numberWithFloat_(NSNumber, v1332, v1333, v1334, v1335, v1331);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1337, (uint64_t)v1336, @"caRed11", v1338);

    LODWORD(v1339) = HIDWORD(v1795);
    v1344 = objc_msgSend_numberWithFloat_(NSNumber, v1340, v1341, v1342, v1343, v1339);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1345, (uint64_t)v1344, @"caRed12", v1346);

    LODWORD(v1347) = v1796;
    v1352 = objc_msgSend_numberWithFloat_(NSNumber, v1348, v1349, v1350, v1351, v1347);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1353, (uint64_t)v1352, @"caRed13", v1354);

    LODWORD(v1355) = DWORD1(v1796);
    v1360 = objc_msgSend_numberWithFloat_(NSNumber, v1356, v1357, v1358, v1359, v1355);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1361, (uint64_t)v1360, @"caRed14", v1362);

    LODWORD(v1363) = DWORD2(v1796);
    v1368 = objc_msgSend_numberWithFloat_(NSNumber, v1364, v1365, v1366, v1367, v1363);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1369, (uint64_t)v1368, @"caRed15", v1370);

    LODWORD(v1371) = HIDWORD(v1796);
    v1376 = objc_msgSend_numberWithFloat_(NSNumber, v1372, v1373, v1374, v1375, v1371);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1377, (uint64_t)v1376, @"caBlue0", v1378);

    LODWORD(v1379) = v1797;
    v1384 = objc_msgSend_numberWithFloat_(NSNumber, v1380, v1381, v1382, v1383, v1379);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1385, (uint64_t)v1384, @"caBlue1", v1386);

    LODWORD(v1387) = DWORD1(v1797);
    v1392 = objc_msgSend_numberWithFloat_(NSNumber, v1388, v1389, v1390, v1391, v1387);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1393, (uint64_t)v1392, @"caBlue2", v1394);

    LODWORD(v1395) = DWORD2(v1797);
    v1400 = objc_msgSend_numberWithFloat_(NSNumber, v1396, v1397, v1398, v1399, v1395);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1401, (uint64_t)v1400, @"caBlue3", v1402);

    LODWORD(v1403) = HIDWORD(v1797);
    v1408 = objc_msgSend_numberWithFloat_(NSNumber, v1404, v1405, v1406, v1407, v1403);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1409, (uint64_t)v1408, @"caBlue4", v1410);

    LODWORD(v1411) = v1798;
    v1416 = objc_msgSend_numberWithFloat_(NSNumber, v1412, v1413, v1414, v1415, v1411);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1417, (uint64_t)v1416, @"caBlue5", v1418);

    LODWORD(v1419) = DWORD1(v1798);
    v1424 = objc_msgSend_numberWithFloat_(NSNumber, v1420, v1421, v1422, v1423, v1419);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1425, (uint64_t)v1424, @"caBlue6", v1426);

    LODWORD(v1427) = DWORD2(v1798);
    v1432 = objc_msgSend_numberWithFloat_(NSNumber, v1428, v1429, v1430, v1431, v1427);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1433, (uint64_t)v1432, @"caBlue7", v1434);

    LODWORD(v1435) = HIDWORD(v1798);
    v1440 = objc_msgSend_numberWithFloat_(NSNumber, v1436, v1437, v1438, v1439, v1435);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1441, (uint64_t)v1440, @"caBlue8", v1442);

    LODWORD(v1443) = v1799;
    v1448 = objc_msgSend_numberWithFloat_(NSNumber, v1444, v1445, v1446, v1447, v1443);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1449, (uint64_t)v1448, @"caBlue9", v1450);

    LODWORD(v1451) = DWORD1(v1799);
    v1456 = objc_msgSend_numberWithFloat_(NSNumber, v1452, v1453, v1454, v1455, v1451);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1457, (uint64_t)v1456, @"caBlue10", v1458);

    LODWORD(v1459) = DWORD2(v1799);
    v1464 = objc_msgSend_numberWithFloat_(NSNumber, v1460, v1461, v1462, v1463, v1459);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1465, (uint64_t)v1464, @"caBlue11", v1466);

    LODWORD(v1467) = HIDWORD(v1799);
    v1472 = objc_msgSend_numberWithFloat_(NSNumber, v1468, v1469, v1470, v1471, v1467);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1473, (uint64_t)v1472, @"caBlue12", v1474);

    LODWORD(v1475) = v1800;
    v1480 = objc_msgSend_numberWithFloat_(NSNumber, v1476, v1477, v1478, v1479, v1475);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1481, (uint64_t)v1480, @"caBlue13", v1482);

    LODWORD(v1483) = DWORD1(v1800);
    v1488 = objc_msgSend_numberWithFloat_(NSNumber, v1484, v1485, v1486, v1487, v1483);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1489, (uint64_t)v1488, @"caBlue14", v1490);

    LODWORD(v1491) = DWORD2(v1800);
    v1496 = objc_msgSend_numberWithFloat_(NSNumber, v1492, v1493, v1494, v1495, v1491);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1497, (uint64_t)v1496, @"caBlue15", v1498);
  }
  if (BYTE12(v1800))
  {
    v1499 = objc_msgSend_numberWithInt_(NSNumber, v1103, DWORD1(v1801), v1104, v1105);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1500, (uint64_t)v1499, @"FujiLensCorrectionNumberOfPoints", v1501);

    v1505 = objc_msgSend_numberWithInt_(NSNumber, v1502, v1801, v1503, v1504);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1506, (uint64_t)v1505, @"FujiLensCorrectionMaxDistance", v1507);

    LODWORD(v1508) = DWORD2(v1801);
    v1513 = objc_msgSend_numberWithFloat_(NSNumber, v1509, v1510, v1511, v1512, v1508);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1514, (uint64_t)v1513, @"FujiLensCorrectionLR0", v1515);

    LODWORD(v1516) = HIDWORD(v1801);
    v1521 = objc_msgSend_numberWithFloat_(NSNumber, v1517, v1518, v1519, v1520, v1516);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1522, (uint64_t)v1521, @"FujiLensCorrectionLR1", v1523);

    LODWORD(v1524) = v1802;
    v1529 = objc_msgSend_numberWithFloat_(NSNumber, v1525, v1526, v1527, v1528, v1524);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1530, (uint64_t)v1529, @"FujiLensCorrectionLR2", v1531);

    LODWORD(v1532) = DWORD1(v1802);
    v1537 = objc_msgSend_numberWithFloat_(NSNumber, v1533, v1534, v1535, v1536, v1532);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1538, (uint64_t)v1537, @"FujiLensCorrectionLR3", v1539);

    LODWORD(v1540) = DWORD2(v1802);
    v1545 = objc_msgSend_numberWithFloat_(NSNumber, v1541, v1542, v1543, v1544, v1540);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1546, (uint64_t)v1545, @"FujiLensCorrectionLR4", v1547);

    LODWORD(v1548) = HIDWORD(v1802);
    v1553 = objc_msgSend_numberWithFloat_(NSNumber, v1549, v1550, v1551, v1552, v1548);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1554, (uint64_t)v1553, @"FujiLensCorrectionLR5", v1555);

    LODWORD(v1556) = v1803;
    v1561 = objc_msgSend_numberWithFloat_(NSNumber, v1557, v1558, v1559, v1560, v1556);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1562, (uint64_t)v1561, @"FujiLensCorrectionLR6", v1563);

    LODWORD(v1564) = DWORD1(v1803);
    v1569 = objc_msgSend_numberWithFloat_(NSNumber, v1565, v1566, v1567, v1568, v1564);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1570, (uint64_t)v1569, @"FujiLensCorrectionLR7", v1571);

    LODWORD(v1572) = DWORD2(v1803);
    v1577 = objc_msgSend_numberWithFloat_(NSNumber, v1573, v1574, v1575, v1576, v1572);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1578, (uint64_t)v1577, @"FujiLensCorrectionLR8", v1579);

    LODWORD(v1580) = HIDWORD(v1803);
    v1585 = objc_msgSend_numberWithFloat_(NSNumber, v1581, v1582, v1583, v1584, v1580);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1586, (uint64_t)v1585, @"FujiLensCorrectionLR9", v1587);

    LODWORD(v1588) = v1804;
    v1593 = objc_msgSend_numberWithFloat_(NSNumber, v1589, v1590, v1591, v1592, v1588);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1594, (uint64_t)v1593, @"FujiLensCorrectionLR10", v1595);

    LODWORD(v1596) = DWORD1(v1804);
    v1601 = objc_msgSend_numberWithFloat_(NSNumber, v1597, v1598, v1599, v1600, v1596);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1602, (uint64_t)v1601, @"FujiLensCorrectionLR11", v1603);

    LODWORD(v1604) = DWORD2(v1804);
    v1609 = objc_msgSend_numberWithFloat_(NSNumber, v1605, v1606, v1607, v1608, v1604);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1610, (uint64_t)v1609, @"FujiLensCorrectionLR12", v1611);

    LODWORD(v1612) = HIDWORD(v1804);
    v1617 = objc_msgSend_numberWithFloat_(NSNumber, v1613, v1614, v1615, v1616, v1612);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1618, (uint64_t)v1617, @"FujiLensCorrectionLR13", v1619);

    LODWORD(v1620) = v1805;
    v1625 = objc_msgSend_numberWithFloat_(NSNumber, v1621, v1622, v1623, v1624, v1620);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1626, (uint64_t)v1625, @"FujiLensCorrectionLR14", v1627);

    LODWORD(v1628) = DWORD1(v1805);
    v1633 = objc_msgSend_numberWithFloat_(NSNumber, v1629, v1630, v1631, v1632, v1628);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1634, (uint64_t)v1633, @"FujiLensCorrectionLR15", v1635);

    LODWORD(v1636) = DWORD2(v1805);
    v1641 = objc_msgSend_numberWithFloat_(NSNumber, v1637, v1638, v1639, v1640, v1636);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1642, (uint64_t)v1641, @"FujiLensCorrectionFactor0", v1643);

    LODWORD(v1644) = HIDWORD(v1805);
    v1649 = objc_msgSend_numberWithFloat_(NSNumber, v1645, v1646, v1647, v1648, v1644);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1650, (uint64_t)v1649, @"FujiLensCorrectionFactor1", v1651);

    LODWORD(v1652) = v1806;
    v1657 = objc_msgSend_numberWithFloat_(NSNumber, v1653, v1654, v1655, v1656, v1652);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1658, (uint64_t)v1657, @"FujiLensCorrectionFactor2", v1659);

    LODWORD(v1660) = DWORD1(v1806);
    v1665 = objc_msgSend_numberWithFloat_(NSNumber, v1661, v1662, v1663, v1664, v1660);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1666, (uint64_t)v1665, @"FujiLensCorrectionFactor3", v1667);

    LODWORD(v1668) = DWORD2(v1806);
    v1673 = objc_msgSend_numberWithFloat_(NSNumber, v1669, v1670, v1671, v1672, v1668);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1674, (uint64_t)v1673, @"FujiLensCorrectionFactor4", v1675);

    LODWORD(v1676) = HIDWORD(v1806);
    v1681 = objc_msgSend_numberWithFloat_(NSNumber, v1677, v1678, v1679, v1680, v1676);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1682, (uint64_t)v1681, @"FujiLensCorrectionFactor5", v1683);

    LODWORD(v1684) = v1807;
    v1689 = objc_msgSend_numberWithFloat_(NSNumber, v1685, v1686, v1687, v1688, v1684);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1690, (uint64_t)v1689, @"FujiLensCorrectionFactor6", v1691);

    LODWORD(v1692) = v1808;
    v1697 = objc_msgSend_numberWithFloat_(NSNumber, v1693, v1694, v1695, v1696, v1692);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1698, (uint64_t)v1697, @"FujiLensCorrectionFactor7", v1699);

    LODWORD(v1700) = v1809;
    v1705 = objc_msgSend_numberWithFloat_(NSNumber, v1701, v1702, v1703, v1704, v1700);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1706, (uint64_t)v1705, @"FujiLensCorrectionFactor8", v1707);

    LODWORD(v1708) = v1810;
    v1713 = objc_msgSend_numberWithFloat_(NSNumber, v1709, v1710, v1711, v1712, v1708);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1714, (uint64_t)v1713, @"FujiLensCorrectionFactor9", v1715);

    LODWORD(v1716) = v1811;
    v1721 = objc_msgSend_numberWithFloat_(NSNumber, v1717, v1718, v1719, v1720, v1716);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1722, (uint64_t)v1721, @"FujiLensCorrectionFactor10", v1723);

    LODWORD(v1724) = v1812;
    v1729 = objc_msgSend_numberWithFloat_(NSNumber, v1725, v1726, v1727, v1728, v1724);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1730, (uint64_t)v1729, @"FujiLensCorrectionFactor11", v1731);

    LODWORD(v1732) = v1813;
    v1737 = objc_msgSend_numberWithFloat_(NSNumber, v1733, v1734, v1735, v1736, v1732);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1738, (uint64_t)v1737, @"FujiLensCorrectionFactor12", v1739);

    LODWORD(v1740) = v1814;
    v1745 = objc_msgSend_numberWithFloat_(NSNumber, v1741, v1742, v1743, v1744, v1740);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1746, (uint64_t)v1745, @"FujiLensCorrectionFactor13", v1747);

    LODWORD(v1748) = v1815;
    v1753 = objc_msgSend_numberWithFloat_(NSNumber, v1749, v1750, v1751, v1752, v1748);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1754, (uint64_t)v1753, @"FujiLensCorrectionFactor14", v1755);

    LODWORD(v1756) = v1816;
    v1761 = objc_msgSend_numberWithFloat_(NSNumber, v1757, v1758, v1759, v1760, v1756);
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1762, (uint64_t)v1761, @"FujiLensCorrectionFactor15", v1763);
  }
  id v1764 = v8;

  return v1764;
}

void sub_1DDAC0358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_1DDAC0F64(uint64_t a1, unsigned int a2)
{
  uint64_t v1442 = *MEMORY[0x1E4F143B8];
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v7 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v3, v4, v5, v6);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 112))(__p, a1);
  uint64_t v8 = sub_1DDA4CD2C((uint64_t)__p[0]);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v9, (uint64_t)v8, @"inputVersion", v10);

  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  uint64_t v11 = NSNumber;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 112))(__p, a1);
  uint64_t v12 = sub_1DDA4CA90((uint64_t)__p[0]);
  uint64_t v16 = objc_msgSend_numberWithBool_(v11, v13, v12, v14, v15);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v17, (uint64_t)v16, @"inputIsGenericDNG", v18);

  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  uint64_t v19 = NSNumber;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2480))(a1);
  uint64_t v24 = objc_msgSend_numberWithBool_(v19, v21, v20, v22, v23);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v25, (uint64_t)v24, @"inputIsNoiseReductionEnabled", v26);

  uint64_t v27 = sub_1DDB10E40(a2);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v28, (uint64_t)v27, @"inputSushiMode", v29);

  double v1402 = (*(double (**)(uint64_t))(*(void *)a1 + 720))(a1);
  double v1403 = v30;
  uint64_t v35 = objc_msgSend_numberWithDouble_(NSNumber, v31, v32, v33, v34);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v36, (uint64_t)v35, @"wx", v37);

  uint64_t v42 = objc_msgSend_numberWithDouble_(NSNumber, v38, v39, v40, v41, v1403);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v43, (uint64_t)v42, @"wy", v44);

  sub_1DDB10F20((uint64_t)&v1402, __p);
  uint64_t v45 = sub_1DDAB7258((double **)__p);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v46, (uint64_t)v45, @"inputNeutral", v47);

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v48 = NSNumber;
  uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1216))(a1);
  uint64_t v53 = objc_msgSend_numberWithBool_(v48, v50, v49, v51, v52);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v54, (uint64_t)v53, @"inputShouldLinearize", v55);

  uint64_t v56 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2640))(a1);
  uint64_t v61 = objc_msgSend_numberWithDouble_(v56, v57, v58, v59, v60);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v62, (uint64_t)v61, @"inputXScale", v63);

  uint64_t v64 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2648))(a1);
  uint64_t v69 = objc_msgSend_numberWithDouble_(v64, v65, v66, v67, v68);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v70, (uint64_t)v69, @"inputYScale", v71);

  uint64_t v72 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2704))(a1);
  uint64_t v77 = objc_msgSend_numberWithFloat_(v72, v73, v74, v75, v76);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v78, (uint64_t)v77, @"inputNoiseReductionApplied", v79);

  sub_1DDA301E4(a1);
  HIDWORD(v77) = v80;
  uint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 536))(a1);
  uint64_t v86 = objc_msgSend_vectorWithCGRect_(MEMORY[0x1E4F1E080], v82, v83, v84, v85, (double)(int)v81, (double)SHIDWORD(v77) - (double)SHIDWORD(v81) - (double)SHIDWORD(v82), (double)(int)v82);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v87, (uint64_t)v86, @"inputCropRect", v88);

  uint64_t v89 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 528))(a1);
  uint64_t v94 = objc_msgSend_numberWithDouble_(v89, v90, v91, v92, v93);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v95, (uint64_t)v94, @"inputScaleFactor", v96);

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2480))(a1))
  {
    long long v1441 = 0u;
    long long v1440 = 0u;
    long long v1439 = 0u;
    long long v1438 = 0u;
    long long v1437 = 0u;
    long long v1436 = 0u;
    long long v1435 = 0u;
    long long v1434 = 0u;
    long long v1433 = 0u;
    long long v1432 = 0u;
    long long v1431 = 0u;
    long long v1430 = 0u;
    long long v1429 = 0u;
    long long v1428 = 0u;
    long long v1427 = 0u;
    long long v1426 = 0u;
    long long v1425 = 0u;
    long long v1424 = 0u;
    long long v1422 = 0u;
    long long v1423 = 0u;
    long long v1420 = 0u;
    long long v1421 = 0u;
    long long v1418 = 0u;
    long long v1419 = 0u;
    *(_OWORD *)v1416 = 0u;
    long long v1417 = 0u;
    long long v1414 = 0u;
    long long v1415 = 0u;
    memset(v1413, 0, sizeof(v1413));
    *(_OWORD *)std::string __p = 0u;
    long long v1412 = 0u;
    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 2696))(__p, a1, a2);
    long long v1409 = 0u;
    long long v1410 = 0u;
    long long v1407 = 0u;
    long long v1408 = 0u;
    float64x2_t v1405 = 0u;
    long long v1406 = 0u;
    *(_OWORD *)v1404 = 0u;
    sub_1DDB6915C((float32x2_t *)__p, (float32x2_t *)v1404);
    double v97 = (*(double (**)(uint64_t, void))(*(void *)a1 + 800))(a1, a2);
    unsigned int v98 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 2520))(a1);
    uint64_t v103 = objc_msgSend_numberWithDouble_(v98, v99, v100, v101, v102);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v104, (uint64_t)v103, @"inputLNRAmount", v105);

    uint64_t v106 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 2528))(a1);
    uint64_t v111 = objc_msgSend_numberWithDouble_(v106, v107, v108, v109, v110);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v112, (uint64_t)v111, @"inputCNRAmount", v113);

    uint64_t v114 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 2544))(a1);
    uint64_t v119 = objc_msgSend_numberWithDouble_(v114, v115, v116, v117, v118);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v120, (uint64_t)v119, @"inputSharpenAmount", v121);

    uint64_t v122 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 2552))(a1);
    uint64_t v127 = objc_msgSend_numberWithDouble_(v122, v123, v124, v125, v126);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v128, (uint64_t)v127, @"inputSharpenThreshold", v129);

    uint64_t v130 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 2560))(a1);
    uint64_t v135 = objc_msgSend_numberWithDouble_(v130, v131, v132, v133, v134);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v136, (uint64_t)v135, @"inputContrastAmount", v137);

    uint64_t v138 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 2568))(a1);
    uint64_t v143 = objc_msgSend_numberWithDouble_(v138, v139, v140, v141, v142);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v144, (uint64_t)v143, @"inputDetailAmount", v145);

    uint64_t v146 = NSNumber;
    (*(void (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0);
    uint64_t v151 = objc_msgSend_numberWithDouble_(v146, v147, v148, v149, v150);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v152, (uint64_t)v151, @"inputRepresentativeNoise", v153);

    uint64_t v154 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 528))(a1);
    uint64_t v159 = objc_msgSend_numberWithDouble_(v154, v155, v156, v157, v158);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v160, (uint64_t)v159, @"inputScaleFactor", v161);

    uint64_t v162 = NSNumber;
    int v163 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2496))(a1);
    double v168 = 0.0;
    if (v163) {
      (*(void (**)(uint64_t, double))(*(void *)a1 + 2512))(a1, 0.0);
    }
    signed int v169 = objc_msgSend_numberWithDouble_(v162, v164, v165, v166, v167, v168);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v170, (uint64_t)v169, @"inputMoireRadius", v171);

    uint64_t v172 = NSNumber;
    int v173 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2496))(a1);
    double v178 = 0.0;
    if (v173) {
      (*(void (**)(uint64_t, double))(*(void *)a1 + 2504))(a1, 0.0);
    }
    int v179 = objc_msgSend_numberWithDouble_(v172, v174, v175, v176, v177, v178);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v180, (uint64_t)v179, @"inputMoireAmount", v181);

    uint64_t v182 = NSNumber;
    if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 7)
    {
      BOOL v186 = (*(double (**)(uint64_t, void, void))(*(void *)a1 + 2664))(a1, 0, 0) < 0.5;
      objc_msgSend_numberWithInt_(v182, v187, v186, v188, v189);
    }
    else
    {
      objc_msgSend_numberWithInt_(v182, v183, 0, v184, v185);
    uint64_t v190 = };
    objc_msgSend_setObject_forKeyedSubscript_(v7, v191, (uint64_t)v190, @"inputOpponentColorEnabled", v192);

    float v193 = v97;
    uint64_t v198 = objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E4F1E080], v194, v195, v196, v197, (float)(*(float *)v1404 / v193), (float)(*((float *)v1404 + 1) / v193), (float)(*(float *)&v1404[1] / v193), 1.0);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v199, (uint64_t)v198, @"inputNeutralFactors", v200);

    uint64_t v201 = sub_1DDB10E40(a2);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v202, (uint64_t)v201, @"inputSushiMode", v203);

    objc_msgSend_setObject_forKeyedSubscript_(v7, v204, (uint64_t)&unk_1F39AECD8, @"inputBoostMethod", v205);
    uint64_t v210 = objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E4F1E080], v206, v207, v208, v209, 0.298999995, 0.587000012, 0.114, 1.0);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v211, (uint64_t)v210, @"inputLumFactors", v212);

    if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) >= 9)
    {
      uint64_t v213 = NSNumber;
      uint64_t v214 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
      uint64_t v218 = objc_msgSend_numberWithUnsignedInt_(v213, v215, v214, v216, v217);
      objc_msgSend_setObject_forKeyedSubscript_(v7, v219, (uint64_t)v218, @"inputISO", v220);

      uint64_t v221 = NSNumber;
      uint64_t v222 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2168))(a1);
      uint64_t v226 = objc_msgSend_numberWithUnsignedInt_(v221, v223, v222, v224, v225);
      objc_msgSend_setObject_forKeyedSubscript_(v7, v227, (uint64_t)v226, @"inputSensorPattern", v228);
    }
  }
  uint64_t v229 = NSNumber;
  uint64_t v230 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 920))(a1);
  uint64_t v234 = objc_msgSend_numberWithUnsignedShort_(v229, v231, v230, v232, v233);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v235, (uint64_t)v234, @"inputRange", v236);

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2160))(a1)) {
    objc_msgSend_setObject_forKeyedSubscript_(v7, v237, (uint64_t)&unk_1F39AFCA8, @"inputTargetRange", v238);
  }
  else {
    objc_msgSend_setObject_forKeyedSubscript_(v7, v237, (uint64_t)&unk_1F39AECF0, @"inputTargetRange", v238);
  }
  uint64_t v239 = NSNumber;
  (*(void (**)(uint64_t, void))(*(void *)a1 + 800))(a1, a2);
  uint64_t v244 = objc_msgSend_numberWithDouble_(v239, v240, v241, v242, v243);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v245, (uint64_t)v244, @"inputFactor", v246);

  v247 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 928))(a1);
  unsigned int v252 = objc_msgSend_numberWithDouble_(v247, v248, v249, v250, v251);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v253, (uint64_t)v252, @"inputBaselineExposure", v254);

  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 648))(__p, a1);
  v258 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v255, LODWORD(__p[1]), v256, v257);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v259, (uint64_t)v258, @"inputCalibrationIlluminant1", v260);

  v264 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v261, HIDWORD(__p[1]), v262, v263);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v265, (uint64_t)v264, @"inputCalibrationIlluminant2", v266);

  uint64_t v267 = sub_1DDAD9920((unsigned int *)&v1412);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v268, (uint64_t)v267, @"inputXYZtoCamera1", v269);

  uint64_t v270 = sub_1DDAD9920((unsigned int *)&v1413[1]);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v271, (uint64_t)v270, @"inputXYZtoCamera2", v272);

  v273 = sub_1DDAD9920((unsigned int *)&v1415);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v274, (uint64_t)v273, @"inputCameraCalibration1", v275);

  uint64_t v276 = sub_1DDAD9920((unsigned int *)&v1417);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v277, (uint64_t)v276, @"inputCameraCalibration2", v278);

  v279 = sub_1DDAD9920((unsigned int *)&v1423 + 2);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v280, (uint64_t)v279, @"inputReduction1", v281);

  v282 = sub_1DDAD9920((unsigned int *)&v1425 + 2);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v283, (uint64_t)v282, @"inputReduction2", v284);

  v285 = sub_1DDAD9920((unsigned int *)&v1419);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v286, (uint64_t)v285, @"inputForwardMatrix1", v287);

  uint64_t v288 = sub_1DDAD9920((unsigned int *)&v1421);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v289, (uint64_t)v288, @"inputForwardMatrix2", v290);

  v294 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v291, (unsigned __int16)v1423, v292, v293);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v295, (uint64_t)v294, @"inputShouldUseForwardMatrix", v296);

  sub_1DDACB228(__p);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v297, MEMORY[0x1E4F1CC38], @"inputShouldRecoverHighlights", v298);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2152))(a1)) {
    objc_msgSend_setObject_forKeyedSubscript_(v7, v299, MEMORY[0x1E4F1CC38], @"inputLinearized", v300);
  }
  uint64_t v301 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 952))(a1);
  uint64_t v306 = objc_msgSend_numberWithDouble_(v301, v302, v303, v304, v305);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v307, (uint64_t)v306, @"inputBias", v308);

  double v309 = NSNumber;
  uint64_t v310 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2392))(a1);
  uint64_t v314 = objc_msgSend_numberWithUnsignedInt_(v309, v311, v310, v312, v313);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v315, (uint64_t)v314, @"inputBoostKind", v316);

  (*(void (**)(double **__return_ptr, uint64_t, void, uint64_t))(*(void *)a1 + 2624))(&v1400, a1, a2, 1);
  uint64_t v321 = objc_msgSend_numberWithDouble_(NSNumber, v317, v318, v319, v320, *v1400);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v322, (uint64_t)v321, @"inputTRCs0", v323);

  v328 = objc_msgSend_numberWithDouble_(NSNumber, v324, v325, v326, v327, v1400[1]);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v329, (uint64_t)v328, @"inputTRCs1", v330);

  v335 = objc_msgSend_numberWithDouble_(NSNumber, v331, v332, v333, v334, v1400[3]);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v336, (uint64_t)v335, @"inputTRCs2", v337);

  uint64_t v342 = objc_msgSend_numberWithDouble_(NSNumber, v338, v339, v340, v341, v1400[5]);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v343, (uint64_t)v342, @"inputTRCs3", v344);

  uint64_t v349 = objc_msgSend_numberWithDouble_(NSNumber, v345, v346, v347, v348, v1400[7]);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v350, (uint64_t)v349, @"inputTRCs4", v351);

  v356 = objc_msgSend_numberWithDouble_(NSNumber, v352, v353, v354, v355, v1400[2]);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v357, (uint64_t)v356, @"inputTRCy1", v358);

  v363 = objc_msgSend_numberWithDouble_(NSNumber, v359, v360, v361, v362, v1400[4]);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v364, (uint64_t)v363, @"inputTRCy2", v365);

  v370 = objc_msgSend_numberWithDouble_(NSNumber, v366, v367, v368, v369, v1400[6]);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v371, (uint64_t)v370, @"inputTRCy3", v372);

  uint64_t v377 = objc_msgSend_numberWithDouble_(NSNumber, v373, v374, v375, v376, v1400[8]);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v378, (uint64_t)v377, @"inputTRCy4", v379);

  uint64_t v380 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1272))(a1);
  uint64_t v385 = objc_msgSend_numberWithDouble_(v380, v381, v382, v383, v384);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v386, (uint64_t)v385, @"inputBoostTransitionPoint", v387);

  uint64_t v388 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1280))(a1);
  uint64_t v393 = objc_msgSend_numberWithDouble_(v388, v389, v390, v391, v392);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v394, (uint64_t)v393, @"inputBoostTransitionWidth", v395);

  uint64_t v396 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2416))(a1);
  uint64_t v401 = objc_msgSend_numberWithDouble_(v396, v397, v398, v399, v400);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v402, (uint64_t)v401, @"inputBoostLuminanceAmount", v403);

  uint64_t v404 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 1296))(a1);
  uint64_t v409 = objc_msgSend_numberWithDouble_(v404, v405, v406, v407, v408);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v410, (uint64_t)v409, @"inputBoostShadowAmount", v411);

  uint64_t v412 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2424))(a1);
  uint64_t v417 = objc_msgSend_numberWithDouble_(v412, v413, v414, v415, v416);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v418, (uint64_t)v417, @"inputBoostPreserveHueAmount", v419);

  uint64_t v420 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2400))(a1);
  uint64_t v425 = objc_msgSend_numberWithDouble_(v420, v421, v422, v423, v424);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v426, (uint64_t)v425, @"inputBoostAmount", v427);

  uint64_t v428 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2344))(a1);
  uint64_t v433 = objc_msgSend_numberWithDouble_(v428, v429, v430, v431, v432);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v434, (uint64_t)v433, @"inputHueMagMR", v435);

  v436 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2352))(a1);
  v441 = objc_msgSend_numberWithDouble_(v436, v437, v438, v439, v440);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v442, (uint64_t)v441, @"inputHueMagRY", v443);

  v444 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2360))(a1);
  v449 = objc_msgSend_numberWithDouble_(v444, v445, v446, v447, v448);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v450, (uint64_t)v449, @"inputHueMagYG", v451);

  v452 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2368))(a1);
  v457 = objc_msgSend_numberWithDouble_(v452, v453, v454, v455, v456);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v458, (uint64_t)v457, @"inputHueMagGC", v459);

  v460 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2376))(a1);
  v465 = objc_msgSend_numberWithDouble_(v460, v461, v462, v463, v464);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v466, (uint64_t)v465, @"inputHueMagCB", v467);

  v468 = NSNumber;
  (*(void (**)(uint64_t))(*(void *)a1 + 2384))(a1);
  v473 = objc_msgSend_numberWithDouble_(v468, v469, v470, v471, v472);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v474, (uint64_t)v473, @"inputHueMagBM", v475);

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 752))(&v1397, a1);
  if (sub_1DDAD88E0((uint64_t)&v1397) < 3 || sub_1DDAD88D8((unsigned int *)&v1397) <= 2)
  {
    v1233 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v1233, "RawCameraException");
    __cxa_throw(v1233, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v476 = NSNumber;
  __p[0] = (void *)sub_1DDAD8560((uint64_t)&v1397, 0);
  __p[1] = v477;
  uint64_t v478 = (double *)sub_1DDAD85FC((uint64_t)__p, 0);
  uint64_t v483 = objc_msgSend_numberWithDouble_(v476, v479, v480, v481, v482, *v478);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v484, (uint64_t)v483, @"inputM00", v485);

  uint64_t v486 = NSNumber;
  __p[0] = (void *)sub_1DDAD8560((uint64_t)&v1397, 0);
  __p[1] = v487;
  uint64_t v488 = (double *)sub_1DDAD85FC((uint64_t)__p, 1u);
  v493 = objc_msgSend_numberWithDouble_(v486, v489, v490, v491, v492, *v488);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v494, (uint64_t)v493, @"inputM01", v495);

  uint64_t v496 = NSNumber;
  __p[0] = (void *)sub_1DDAD8560((uint64_t)&v1397, 0);
  __p[1] = v497;
  v498 = (double *)sub_1DDAD85FC((uint64_t)__p, 2u);
  uint64_t v503 = objc_msgSend_numberWithDouble_(v496, v499, v500, v501, v502, *v498);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v504, (uint64_t)v503, @"inputM02", v505);

  v506 = NSNumber;
  __p[0] = (void *)sub_1DDAD8560((uint64_t)&v1397, 1u);
  __p[1] = v507;
  v508 = (double *)sub_1DDAD85FC((uint64_t)__p, 0);
  v513 = objc_msgSend_numberWithDouble_(v506, v509, v510, v511, v512, *v508);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v514, (uint64_t)v513, @"inputM10", v515);

  v516 = NSNumber;
  __p[0] = (void *)sub_1DDAD8560((uint64_t)&v1397, 1u);
  __p[1] = v517;
  uint64_t v518 = (double *)sub_1DDAD85FC((uint64_t)__p, 1u);
  uint64_t v523 = objc_msgSend_numberWithDouble_(v516, v519, v520, v521, v522, *v518);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v524, (uint64_t)v523, @"inputM11", v525);

  uint64_t v526 = NSNumber;
  __p[0] = (void *)sub_1DDAD8560((uint64_t)&v1397, 1u);
  __p[1] = v527;
  uint64_t v528 = (double *)sub_1DDAD85FC((uint64_t)__p, 2u);
  v533 = objc_msgSend_numberWithDouble_(v526, v529, v530, v531, v532, *v528);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v534, (uint64_t)v533, @"inputM12", v535);

  uint64_t v536 = NSNumber;
  __p[0] = (void *)sub_1DDAD8560((uint64_t)&v1397, 2u);
  __p[1] = v537;
  v538 = (double *)sub_1DDAD85FC((uint64_t)__p, 0);
  uint64_t v543 = objc_msgSend_numberWithDouble_(v536, v539, v540, v541, v542, *v538);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v544, (uint64_t)v543, @"inputM20", v545);

  v546 = NSNumber;
  __p[0] = (void *)sub_1DDAD8560((uint64_t)&v1397, 2u);
  __p[1] = v547;
  v548 = (double *)sub_1DDAD85FC((uint64_t)__p, 1u);
  v553 = objc_msgSend_numberWithDouble_(v546, v549, v550, v551, v552, *v548);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v554, (uint64_t)v553, @"inputM21", v555);

  v556 = NSNumber;
  __p[0] = (void *)sub_1DDAD8560((uint64_t)&v1397, 2u);
  __p[1] = v557;
  v558 = (double *)sub_1DDAD85FC((uint64_t)__p, 2u);
  uint64_t v563 = objc_msgSend_numberWithDouble_(v556, v559, v560, v561, v562, *v558);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v564, (uint64_t)v563, @"inputM22", v565);

  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2768))(a1))
  {
    objc_msgSend_setObject_forKeyedSubscript_(v7, v566, (uint64_t)&unk_1F39AECD8, @"inputLDCExecuteFlags", v567);
    goto LABEL_187;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1) == 5)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2816))(v1404, a1);
    unsigned int v568 = (unsigned __int16)((LODWORD(v1404[1]) - LODWORD(v1404[0])) >> 3);
    if (v568 <= 1)
    {
      uint64_t v1327 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v1327, "RawCameraException");
      __cxa_throw(v1327, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v569 = (int)*(double *)v1404[0];
    unint64_t v570 = (int)*((double *)v1404[0] + 1);
    if (v568 != v569 + v569 * v570 + 2)
    {
      v1328 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v1328, "RawCameraException");
      __cxa_throw(v1328, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    __p[0] = 0;
    sub_1DDA25B2C(&v1395, v569, __p);
    v1394[1] = 0;
    v1394[0] = 0;
    v1393 = v1394;
    uint64_t v1383 = 0;
    if (v569)
    {
      uint64_t v571 = 0;
      int v572 = 2;
      do
      {
        v573 = (char *)v1404[0];
        *((void *)v1395 + (void)v571) = *((void *)v1404[0] + (unsigned __int16)v572);
        int v574 = v572 + 1;
        __p[1] = 0;
        __p[0] = 0;
        *(void *)&long long v1412 = 0;
        sub_1DDA1808C(__p, &v573[8 * (unsigned __int16)(v572 + 1)], (uint64_t)&v573[8 * (unsigned __int16)(v572 + 1) + 8 * v570], v570);
        uint64_t v1386 = &v1383;
        uint64_t v575 = sub_1DDACB754((uint64_t **)&v1393, (unint64_t *)&v1383, (uint64_t)&unk_1DDBFB044, (uint64_t **)&v1386);
        uint64_t v576 = (void *)v575[5];
        if (v576)
        {
          v575[6] = (uint64_t)v576;
          operator delete(v576);
          v575[5] = 0;
          v575[6] = 0;
          v575[7] = 0;
        }
        *(_OWORD *)(v575 + 5) = *(_OWORD *)__p;
        v575[7] = v1412;
        int v572 = v574 + v570;
        uint64_t v571 = (char *)v1383 + 1;
        uint64_t v1383 = v571;
      }
      while ((unint64_t)v571 < v569);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v1391, a1);
    uint64_t v577 = v1391;
    sub_1DDA1A880(__p, "IFD0:EXIF");
    double v578 = (*(double (**)(uint64_t, void **))(*(void *)v577 + 304))(v577, __p);
    if (SBYTE7(v1412) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v579 = v1396;
    if (v1396 != v1395)
    {
      unint64_t v580 = ((char *)v1396 - (unsigned char *)v1395) >> 3;
      uint64_t v579 = (std::__shared_weak_count *)v1395;
      do
      {
        unint64_t v581 = v580 >> 1;
        uint64_t v582 = (double *)(&v579->__vftable + (v580 >> 1));
        double v584 = *v582;
        uint64_t v583 = (std::__shared_weak_count *)(v582 + 1);
        v580 += ~(v580 >> 1);
        if (v578 < v584) {
          unint64_t v580 = v581;
        }
        else {
          uint64_t v579 = v583;
        }
      }
      while (v580);
    }
    unint64_t v585 = ((char *)v579 - (unsigned char *)v1395) >> 3;
    if (v585 > (v569 - 1) && v569 != 0) {
      unint64_t v585 = (v569 - 1);
    }
    unint64_t v1390 = v585;
    unint64_t v587 = v585 - 1;
    if (!v585) {
      unint64_t v587 = 0;
    }
    unint64_t v1389 = v587;
    double v588 = *((double *)v1395 + v585);
    double v589 = *((double *)v1395 + v587);
    if (vabdd_f64(v588, v589) >= 0.000000001) {
      double v590 = v588 - v589;
    }
    else {
      double v590 = 0.000000001;
    }
    __p[0] = &v1389;
    uint64_t v591 = sub_1DDACB754((uint64_t **)&v1393, &v1389, (uint64_t)&unk_1DDBFB044, (uint64_t **)__p);
    uint64_t v1388 = 0;
    uint64_t v1386 = 0;
    double v1387 = 0;
    sub_1DDA1808C(&v1386, (const void *)v591[5], v591[6], (v591[6] - v591[5]) >> 3);
    __p[0] = &v1390;
    uint64_t v592 = sub_1DDACB754((uint64_t **)&v1393, &v1390, (uint64_t)&unk_1DDBFB044, (uint64_t **)__p);
    uint64_t v1385 = 0;
    uint64_t v1383 = 0;
    v1384 = 0;
    sub_1DDA1808C(&v1383, (const void *)v592[5], v592[6], (v592[6] - v592[5]) >> 3);
    __p[0] = 0;
    sub_1DDA25B2C(v1382, v570, __p);
    if (v570)
    {
      double v593 = fmin(fmax((v578 - v589) / v590, 0.0), 1.0);
      v594 = (double *)v1386;
      uint64_t v595 = (double *)v1383;
      v596 = (double *)v1382[0];
      unint64_t v597 = v570;
      do
      {
        double v598 = *v594++;
        double v599 = v598;
        double v600 = *v595++;
        *v596++ = v593 * v600 + v599 * (1.0 - v593);
        --v597;
      }
      while (v597);
    }
    __p[0] = 0;
    sub_1DDA25B2C(&v1380, v570 >> 1, __p);
    __p[0] = 0;
    sub_1DDA25B2C(&v1378, v570 >> 1, __p);
    __p[0] = (void *)0x3FF0000000000000;
    sub_1DDA25B2C(v1377, v570 >> 1, __p);
    if (v1377[0])
    {
      v1377[1] = v1377[0];
      operator delete(v1377[0]);
    }
    if (v570 >= 2)
    {
      v601 = v1380;
      v602 = v1378;
      if (v570 >> 1 <= 1uLL) {
        uint64_t v603 = 1;
      }
      else {
        uint64_t v603 = v570 >> 1;
      }
      v604 = (uint64_t *)((char *)v1382[0] + 8);
      do
      {
        *v601++ = *(v604 - 1);
        uint64_t v605 = *v604;
        v604 += 2;
        *v602++ = v605;
        --v603;
      }
      while (v603);
    }
    __p[0] = 0;
    sub_1DDA25B2C(v1376, 0x32uLL, __p);
    __p[0] = 0;
    sub_1DDA25B2C(v1375, 0x32uLL, __p);
    uint64_t v606 = 0;
    *(void *)&long long v1435 = 0;
    long long v1434 = 0u;
    long long v1433 = 0u;
    long long v1432 = 0u;
    long long v1431 = 0u;
    long long v1430 = 0u;
    long long v1429 = 0u;
    long long v1428 = 0u;
    long long v1427 = 0u;
    long long v1426 = 0u;
    long long v1425 = 0u;
    long long v1424 = 0u;
    long long v1422 = 0u;
    long long v1423 = 0u;
    long long v1420 = 0u;
    long long v1421 = 0u;
    long long v1418 = 0u;
    long long v1419 = 0u;
    *(_OWORD *)v1416 = 0u;
    long long v1417 = 0u;
    long long v1414 = 0u;
    long long v1415 = 0u;
    memset(v1413, 0, sizeof(v1413));
    *(_OWORD *)std::string __p = 0u;
    long long v1412 = 0u;
    do
    {
      v1372 = 0;
      uint64_t v1373 = 0;
      uint64_t v1374 = 0;
      sub_1DDA1808C(&v1372, v1380, (uint64_t)v1381, (v1381 - (unsigned char *)v1380) >> 3);
      v1369 = 0;
      uint64_t v1370 = 0;
      uint64_t v1371 = 0;
      uint64_t v607 = sub_1DDA1808C(&v1369, v1378, (uint64_t)v1379, (v1379 - (unsigned char *)v1378) >> 3);
      *(double *)&__p[v606] = sub_1DDAC7D5C((double)(int)v606 / 50.0, (uint64_t)v607, (double **)&v1372, (uint64_t *)&v1369);
      if (v1369)
      {
        uint64_t v1370 = v1369;
        operator delete(v1369);
      }
      if (v1372)
      {
        uint64_t v1373 = v1372;
        operator delete(v1372);
      }
      ++v606;
    }
    while (v606 != 51);
    v610 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v608, (uint64_t)__p, 51, v609);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v611, (uint64_t)v610, @"inputScales", v612);

    objc_msgSend_setObject_forKeyedSubscript_(v7, v613, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v614);
    if (v1375[0])
    {
      v1375[1] = v1375[0];
      operator delete(v1375[0]);
    }
    if (v1376[0])
    {
      v1376[1] = v1376[0];
      operator delete(v1376[0]);
    }
    if (v1378)
    {
      double v1379 = v1378;
      operator delete(v1378);
    }
    if (v1380)
    {
      uint64_t v1381 = v1380;
      operator delete(v1380);
    }
    if (v1382[0])
    {
      v1382[1] = v1382[0];
      operator delete(v1382[0]);
    }
    if (v1383)
    {
      v1384 = (std::__shared_weak_count *)v1383;
      operator delete(v1383);
    }
    if (v1386)
    {
      double v1387 = (std::__shared_weak_count *)v1386;
      operator delete(v1386);
    }
    if (v1392) {
      sub_1DDA18310(v1392);
    }
    sub_1DDA24F4C((uint64_t)&v1393, v1394[0]);
    if (v1395)
    {
      v1396 = (std::__shared_weak_count *)v1395;
      operator delete(v1395);
    }
    goto LABEL_87;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1) == 1)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
    sub_1DDAC7E9C(__p, v1404);
    if (__p[1]) {
      sub_1DDA18310((std::__shared_weak_count *)__p[1]);
    }
    if (v1404[0])
    {
      double v1395 = (void *)(*(uint64_t (**)(void *))(*(void *)v1404[0] + 464))(v1404[0]);
      v1396 = v616;
      unsigned int v617 = sub_1DDA5D16C((uint64_t)v1404[0]);
      double v618 = sub_1DDA5D174((uint64_t)v1404[0]);
      double v619 = sub_1DDA5D17C((uint64_t)v1404[0]);
      double v620 = sub_1DDA5D184((uint64_t)v1404[0]);
      double v621 = sub_1DDA5D18C((uint64_t)v1404[0]);
      uint64_t v622 = (char *)operator new(0xA0uLL);
      *((void *)v622 + 1) = 0;
      *((void *)v622 + 2) = 0;
      *(void *)uint64_t v622 = &unk_1F39681E8;
      double v623 = (double)(int)v1396;
      *((void *)v622 + 3) = &unk_1F397DA58;
      *((double *)v622 + 4) = v623;
      *((double *)v622 + 5) = (double)v617;
      *((double *)v622 + 6) = v618;
      *((double *)v622 + 7) = v619;
      *((double *)v622 + 8) = v620;
      *((double *)v622 + 9) = v621;
      *((void *)v622 + 10) = 0;
      *((void *)v622 + 19) = 0x3FE0000000000000;
      *(_OWORD *)(v622 + 88) = 0u;
      *(_OWORD *)(v622 + 104) = 0u;
      *(_OWORD *)(v622 + 120) = 0u;
      *(_OWORD *)(v622 + 136) = 0u;
      off_1F397DA68((uint64_t)(v622 + 24), &v1396);
      double v624 = *((double *)v622 + 19);
      double v625 = sub_1DDB59FBC((uint64_t)(v622 + 24));
      double v627 = sub_1DDB59FBC((uint64_t)(v622 + 24));
      uint64_t v628 = 0;
      *(void *)&long long v1435 = 0;
      double v629 = v624 * v624;
      double v630 = v625 * v627;
      double v631 = (double)((int)v1396 * (int)v1396 + HIDWORD(v1396) * HIDWORD(v1396)) * 0.25;
      long long v1434 = 0u;
      long long v1433 = 0u;
      long long v1432 = 0u;
      long long v1431 = 0u;
      long long v1430 = 0u;
      long long v1429 = 0u;
      long long v1428 = 0u;
      long long v1427 = 0u;
      long long v1426 = 0u;
      long long v1425 = 0u;
      long long v1424 = 0u;
      long long v1422 = 0u;
      long long v1423 = 0u;
      long long v1420 = 0u;
      long long v1421 = 0u;
      long long v1418 = 0u;
      long long v1419 = 0u;
      *(_OWORD *)v1416 = 0u;
      long long v1417 = 0u;
      long long v1414 = 0u;
      long long v1415 = 0u;
      memset(v1413, 0, sizeof(v1413));
      *(_OWORD *)std::string __p = 0u;
      long long v1412 = 0u;
      do
      {
        double v632 = v631 * (double)(int)v628 * (double)(int)v628 * 0.0004 / v630;
        if (v632 >= v629) {
          uint64_t v633 = 120;
        }
        else {
          uint64_t v633 = 88;
        }
        if (v632 >= v629) {
          uint64_t v634 = 128;
        }
        else {
          uint64_t v634 = 96;
        }
        if (v632 >= v629) {
          uint64_t v635 = 136;
        }
        else {
          uint64_t v635 = 104;
        }
        if (v632 >= v629) {
          uint64_t v636 = 144;
        }
        else {
          uint64_t v636 = 112;
        }
        *(double *)&__p[v628++] = fmin(*(double *)&v622[v636]+ v632* (*(double *)&v622[v635]+ v632 * *(double *)&v622[v634]+ v632 * v632 * *(double *)&v622[v633]), 1.0);
      }
      while (v628 != 51);
      v637 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], (const char *)v634, (uint64_t)__p, 51, v626);
      objc_msgSend_setObject_forKeyedSubscript_(v7, v638, (uint64_t)v637, @"inputScales", v639);

      objc_msgSend_setObject_forKeyedSubscript_(v7, v640, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v641);
LABEL_110:
      sub_1DDA18310((std::__shared_weak_count *)v622);
    }
LABEL_144:
    uint64_t v696 = (std::__shared_weak_count *)v1404[1];
    if (!v1404[1]) {
      goto LABEL_187;
    }
    goto LABEL_186;
  }
  int v642 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2808))(a1);
  uint64_t v643 = *(void *)a1;
  if (v642 != 4)
  {
    if ((*(unsigned int (**)(uint64_t))(v643 + 2808))(a1) == 6)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
      sub_1DDAC7FA4(__p, v1404);
      if (__p[1]) {
        sub_1DDA18310((std::__shared_weak_count *)__p[1]);
      }
      if (v1404[0] && (*(unsigned int (**)(void *))(*(void *)v1404[0] + 792))(v1404[0]))
      {
        v660 = (double *)*((void *)v1404[0] + 148);
        double v661 = *v660;
        double v662 = v660[1];
        double v663 = v660[2];
        uint64_t v1347 = *((uint64_t *)v660 + 3);
        (*(void (**)(void *))(*(void *)v1404[0] + 464))(v1404[0]);
        uint64_t v666 = 0;
        double v667 = *(double *)&v1347 * (*(double *)&v1347 * *(double *)&v1347);
        double v668 = *(double *)&v1347 * (*(double *)&v1347 * v667);
        double v669 = *(double *)&v1347 * (*(double *)&v1347 * v668);
        int v670 = *((_DWORD *)v1404[0] + 302);
        int v671 = *((_DWORD *)v1404[0] + 303);
        double v672 = v662 * v668;
        double v673 = v663 * v669;
        *(void *)&long long v1435 = 0;
        long long v1434 = 0u;
        long long v1433 = 0u;
        long long v1432 = 0u;
        long long v1431 = 0u;
        long long v1430 = 0u;
        long long v1429 = 0u;
        long long v1428 = 0u;
        long long v1427 = 0u;
        long long v1426 = 0u;
        long long v1425 = 0u;
        long long v1424 = 0u;
        long long v1422 = 0u;
        long long v1423 = 0u;
        long long v1420 = 0u;
        long long v1421 = 0u;
        long long v1418 = 0u;
        long long v1419 = 0u;
        *(_OWORD *)v1416 = 0u;
        long long v1417 = 0u;
        long long v1414 = 0u;
        long long v1415 = 0u;
        memset(v1413, 0, sizeof(v1413));
        *(_OWORD *)std::string __p = 0u;
        long long v1412 = 0u;
        float64x2_t v674 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v661 * v667), 0);
        float64x2_t v675 = (float64x2_t)vdupq_lane_s64(v1347, 0);
        int32x2_t v676 = (int32x2_t)0x100000000;
        uint64x2_t v677 = (uint64x2_t)vdupq_n_s64(0x33uLL);
        float64x2_t v678 = (float64x2_t)vdupq_n_s64(0x4049000000000000uLL);
        int64x2_t v679 = (int64x2_t)xmmword_1DDBF8D60;
        int64x2_t v680 = vdupq_n_s64(2uLL);
        do
        {
          v681.i64[0] = v676.i32[0];
          v681.i64[1] = v676.i32[1];
          float64x2_t v682 = vcvtq_f64_s64(v681);
          float64x2_t v683 = vmulq_n_f64(vdivq_f64(vdivq_f64(vmulq_f64(v682, v682), v678), v678), (double)((int)v664 * (int)v664 + HIDWORD(v664) * HIDWORD(v664)) / (double)(v670 * v670 + v671 * v671));
          float64x2_t v684 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v675, v683, v674), v683, vmulq_n_f64(v683, v672)), v683, vmulq_f64(v683, vmulq_n_f64(v683, v673)));
          if (vmovn_s64((int64x2_t)vcgtq_u64(v677, (uint64x2_t)v679)).u8[0]) {
            __p[v666] = *(void **)&v684.f64[0];
          }
          if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x33uLL), *(uint64x2_t *)&v679)).i32[1]) {
            __p[v666 + 1] = *(void **)&v684.f64[1];
          }
          int64x2_t v679 = vaddq_s64(v679, v680);
          int32x2_t v676 = vadd_s32(v676, (int32x2_t)0x200000002);
          v666 += 2;
        }
        while (v666 != 52);
        v685 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v664, (uint64_t)__p, 51, v665);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v686, (uint64_t)v685, @"inputScales", v687);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v688, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v689);
        goto LABEL_144;
      }
      goto LABEL_143;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1) == 3)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2816))(v1404, a1);
      uint64_t v615 = v1404[0];
      int64_t v690 = ((char *)v1404[1] - (char *)v1404[0]) >> 3;
      if (v690 != 20 && v690 != 8)
      {
LABEL_88:
        if (v615)
        {
          v1404[1] = v615;
          operator delete(v615);
        }
        goto LABEL_187;
      }
      uint64_t v691 = 64;
      if ((void *)((char *)v1404[1] - (char *)v1404[0]) == (void *)64) {
        uint64_t v691 = 16;
      }
      uint64_t v1340 = *(void *)v1404[0];
      uint64_t v1337 = *((void *)v1404[0] + 1);
      uint64_t v692 = (double *)((char *)v1404[0] + v691);
      double v1348 = *v692;
      double v1343 = v692[1];
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
      if (__p[0])
      {
        double v1395 = __p[0];
        v1396 = (std::__shared_weak_count *)__p[1];
        uint64_t v695 = __p;
      }
      else
      {
        uint64_t v695 = &v1395;
      }
      double v1178 = v1343;
      double v1177 = v1348;
      *uint64_t v695 = 0;
      v695[1] = 0;
      if (__p[1])
      {
        sub_1DDA18310((std::__shared_weak_count *)__p[1]);
        double v1178 = v1343;
        double v1177 = v1348;
      }
      if (v1395)
      {
        uint64_t v1179 = 0;
        *(void *)&long long v1435 = 0;
        long long v1434 = 0u;
        long long v1433 = 0u;
        long long v1432 = 0u;
        long long v1431 = 0u;
        long long v1430 = 0u;
        long long v1429 = 0u;
        long long v1428 = 0u;
        long long v1427 = 0u;
        long long v1426 = 0u;
        long long v1425 = 0u;
        long long v1424 = 0u;
        long long v1422 = 0u;
        long long v1423 = 0u;
        long long v1420 = 0u;
        long long v1421 = 0u;
        long long v1418 = 0u;
        long long v1419 = 0u;
        *(_OWORD *)v1416 = 0u;
        long long v1417 = 0u;
        long long v1414 = 0u;
        long long v1415 = 0u;
        memset(v1413, 0, sizeof(v1413));
        float64x2_t v1180 = (float64x2_t)vdupq_lane_s64(v1337, 0);
        *(_OWORD *)std::string __p = 0u;
        long long v1412 = 0u;
        int32x2_t v1181 = (int32x2_t)0x100000000;
        int64x2_t v1182 = (int64x2_t)xmmword_1DDBF8D60;
        float64x2_t v1183 = (float64x2_t)vdupq_n_s64(0x4049000000000000uLL);
        int64x2_t v1184 = vdupq_n_s64(2uLL);
        float64x2_t v1185 = (float64x2_t)vdupq_lane_s64(v1340, 0);
        uint64x2_t v1186 = (uint64x2_t)vdupq_n_s64(0x33uLL);
        do
        {
          v1187.i64[0] = v1181.i32[0];
          v1187.i64[1] = v1181.i32[1];
          float64x2_t v1188 = vdivq_f64(vcvtq_f64_s64(v1187), v1183);
          float64x2_t v1189 = vmulq_f64(v1188, v1188);
          float64x2_t v1190 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v1185, v1189, v1180), v1189, vmulq_n_f64(v1189, v1177)), v1189, vmulq_f64(v1189, vmulq_n_f64(v1189, v1178)));
          if (vmovn_s64((int64x2_t)vcgtq_u64(v1186, (uint64x2_t)v1182)).u8[0]) {
            __p[v1179] = *(void **)&v1190.f64[0];
          }
          if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x33uLL), *(uint64x2_t *)&v1182)).i32[1]) {
            __p[v1179 + 1] = *(void **)&v1190.f64[1];
          }
          int64x2_t v1182 = vaddq_s64(v1182, v1184);
          int32x2_t v1181 = vadd_s32(v1181, (int32x2_t)0x200000002);
          v1179 += 2;
        }
        while (v1179 != 52);
        uint64_t v1191 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v693, (uint64_t)__p, 51, v694);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1192, (uint64_t)v1191, @"inputScales", v1193);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v1194, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v1195);
      }
      if (v1396) {
        sub_1DDA18310(v1396);
      }
LABEL_87:
      uint64_t v615 = v1404[0];
      goto LABEL_88;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1) == 7)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
      sub_1DDAC8028(__p, &v1395);
      if (__p[1]) {
        sub_1DDA18310((std::__shared_weak_count *)__p[1]);
      }
      if (v1395)
      {
        sub_1DDA9AC2C((void **)v1395, 1, (uint64_t *)v1404);
        if ((void *)((char *)v1404[1] - (char *)v1404[0]) == (void *)16)
        {
          sub_1DDAC80AC((uint64_t)v1404[0], &v1393);
          if (v1393
            && ((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v1393 + 3) - *((void *)v1393 + 2)) >> 3)) | 2) == 3)
          {
            sub_1DDB471EC(v1393, (char **)__p);
            uint64_t v697 = (double *)__p[0];
            v698 = __p[1];
          }
          else
          {
            v698 = 0;
            uint64_t v697 = 0;
          }
          if (v1394[0]) {
            sub_1DDA18310((std::__shared_weak_count *)v1394[0]);
          }
        }
        else
        {
          v698 = 0;
          uint64_t v697 = 0;
        }
        uint64_t v1196 = (v698 - (unsigned char *)v697) >> 3;
        if (v1196 == 20 || v1196 == 8)
        {
          uint64_t v1197 = 8;
          if (v698 - (unsigned char *)v697 == 64) {
            uint64_t v1197 = 2;
          }
          uint64_t v1198 = (uint64_t *)&v697[v1197];
          uint64_t v1342 = *v1198;
          uint64_t v1339 = v1198[1];
          double v1350 = *((double *)v1198 + 2);
          double v1345 = *((double *)v1198 + 3);
          (*(void (**)(void *))(*(void *)v1395 + 448))(v1395);
          uint64_t v1200 = v1199;
          (*(void (**)(void *))(*(void *)v1395 + 464))(v1395);
          uint64_t v1203 = 0;
          *(void *)&long long v1435 = 0;
          long long v1434 = 0u;
          long long v1433 = 0u;
          long long v1432 = 0u;
          long long v1431 = 0u;
          long long v1430 = 0u;
          long long v1429 = 0u;
          long long v1428 = 0u;
          long long v1427 = 0u;
          long long v1426 = 0u;
          long long v1425 = 0u;
          long long v1424 = 0u;
          long long v1422 = 0u;
          long long v1423 = 0u;
          long long v1420 = 0u;
          long long v1421 = 0u;
          long long v1418 = 0u;
          long long v1419 = 0u;
          *(_OWORD *)v1416 = 0u;
          long long v1417 = 0u;
          long long v1414 = 0u;
          long long v1415 = 0u;
          memset(v1413, 0, sizeof(v1413));
          *(_OWORD *)std::string __p = 0u;
          long long v1412 = 0u;
          float64x2_t v1204 = (float64x2_t)vdupq_lane_s64(v1339, 0);
          double v1205 = sqrt((double)((int)v1201 * (int)v1201 + HIDWORD(v1201) * HIDWORD(v1201)))
                / sqrt((double)((int)v1200 * (int)v1200 + HIDWORD(v1200) * HIDWORD(v1200)));
          float64x2_t v1206 = (float64x2_t)vdupq_lane_s64(v1342, 0);
          int32x2_t v1207 = (int32x2_t)0x100000000;
          float64x2_t v1208 = (float64x2_t)vdupq_n_s64(0x4049000000000000uLL);
          uint64x2_t v1209 = (uint64x2_t)vdupq_n_s64(0x33uLL);
          int64x2_t v1210 = (int64x2_t)xmmword_1DDBF8D60;
          int64x2_t v1211 = vdupq_n_s64(2uLL);
          do
          {
            v1212.i64[0] = v1207.i32[0];
            v1212.i64[1] = v1207.i32[1];
            float64x2_t v1213 = vdivq_f64(vmulq_n_f64(vcvtq_f64_s64(v1212), v1205), v1208);
            float64x2_t v1214 = vmulq_f64(v1213, v1213);
            float64x2_t v1215 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v1206, v1214, v1204), v1214, vmulq_n_f64(v1214, v1350)), v1214, vmulq_f64(v1214, vmulq_n_f64(v1214, v1345)));
            if (vmovn_s64((int64x2_t)vcgtq_u64(v1209, (uint64x2_t)v1210)).u8[0]) {
              __p[v1203] = *(void **)&v1215.f64[0];
            }
            if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x33uLL), *(uint64x2_t *)&v1210)).i32[1]) {
              __p[v1203 + 1] = *(void **)&v1215.f64[1];
            }
            int64x2_t v1210 = vaddq_s64(v1210, v1211);
            int32x2_t v1207 = vadd_s32(v1207, (int32x2_t)0x200000002);
            v1203 += 2;
          }
          while (v1203 != 52);
          v1216 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v1201, (uint64_t)__p, 51, v1202);
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1217, (uint64_t)v1216, @"inputScales", v1218);

          objc_msgSend_setObject_forKeyedSubscript_(v7, v1219, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v1220);
        }
        sub_1DDA9AC2C((void **)v1395, 14, (uint64_t *)__p);
        sub_1DDA9E130((uint64_t *)v1404);
        *(_OWORD *)v1404 = *(_OWORD *)__p;
        *(void *)&v1405.f64[0] = v1412;
        *(void *)&long long v1412 = 0;
        __p[1] = 0;
        __p[0] = 0;
        v1393 = __p;
        sub_1DDA18270((void ***)&v1393);
        if ((void *)((char *)v1404[1] - (char *)v1404[0]) == (void *)16)
        {
          sub_1DDAC813C((uint64_t)v1404[0], &v1393);
          if (v1393
            && ((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v1393 + 3) - *((void *)v1393 + 2)) >> 3)) | 2) == 3)
          {
            sub_1DDAD0A64((uint64_t)v1393, __p);
            if (v697) {
              operator delete(v697);
            }
            uint64_t v697 = (double *)__p[0];
            v698 = __p[1];
          }
          if (v698 - (unsigned char *)v697 == 152)
          {
            uint64_t v1223 = 0;
            *(void *)&long long v1435 = 0;
            long long v1434 = 0u;
            long long v1433 = 0u;
            long long v1432 = 0u;
            long long v1431 = 0u;
            long long v1430 = 0u;
            long long v1429 = 0u;
            long long v1428 = 0u;
            long long v1427 = 0u;
            long long v1426 = 0u;
            long long v1425 = 0u;
            long long v1424 = 0u;
            long long v1422 = 0u;
            long long v1423 = 0u;
            long long v1420 = 0u;
            long long v1421 = 0u;
            long long v1418 = 0u;
            long long v1419 = 0u;
            *(_OWORD *)v1416 = 0u;
            long long v1417 = 0u;
            long long v1414 = 0u;
            long long v1415 = 0u;
            memset(v1413, 0, sizeof(v1413));
            *(_OWORD *)std::string __p = 0u;
            long long v1412 = 0u;
            int v1224 = *((_DWORD *)v1393 + 20);
            do
            {
              double v1225 = *v697;
              uint64_t v1226 = 1;
              double v1227 = (double)(int)v1223 / 50.0;
              do
              {
                double v1225 = v1225 + v697[v1226] * v1227;
                double v1227 = (double)(int)v1223 / 50.0 * v1227;
                ++v1226;
              }
              while (v1226 != 15);
              if (v1224) {
                double v1225 = 1.0 / v1225;
              }
              *(double *)&__p[v1223++] = v1225;
            }
            while (v1223 != 51);
            v1228 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v1221, (uint64_t)__p, 51, v1222, 1.0);
            objc_msgSend_setObject_forKeyedSubscript_(v7, v1229, (uint64_t)v1228, @"inputScales", v1230);

            objc_msgSend_setObject_forKeyedSubscript_(v7, v1231, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v1232);
          }
          if (v1394[0]) {
            sub_1DDA18310((std::__shared_weak_count *)v1394[0]);
          }
        }
        __p[0] = v1404;
        sub_1DDA18270((void ***)__p);
        if (v697) {
          operator delete(v697);
        }
      }
      uint64_t v696 = v1396;
      if (v1396) {
        goto LABEL_186;
      }
      goto LABEL_187;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1) == 2)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2816))(v1404, a1);
      if ((void *)((char *)v1404[1] - (char *)v1404[0]) != (void *)64)
      {
        v1329 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v1329, "RawCameraException");
        __cxa_throw(v1329, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v1146 = *(double *)v1404[0];
      uint64_t v1334 = *((void *)v1404[0] + 2);
      uint64_t v1335 = *((void *)v1404[0] + 3);
      uint64_t v1336 = *((void *)v1404[0] + 1);
      uint64_t v1338 = *((void *)v1404[0] + 4);
      uint64_t v1341 = *((void *)v1404[0] + 5);
      uint64_t v1344 = *((void *)v1404[0] + 6);
      uint64_t v1349 = *((void *)v1404[0] + 7);
      (*(void (**)(uint64_t))(*(void *)a1 + 456))(a1);
      uint64_t v1149 = 0;
      *(void *)&long long v1435 = 0;
      long long v1434 = 0u;
      long long v1433 = 0u;
      long long v1432 = 0u;
      long long v1431 = 0u;
      long long v1430 = 0u;
      long long v1429 = 0u;
      long long v1428 = 0u;
      long long v1427 = 0u;
      long long v1426 = 0u;
      long long v1425 = 0u;
      long long v1424 = 0u;
      long long v1422 = 0u;
      long long v1423 = 0u;
      long long v1420 = 0u;
      long long v1421 = 0u;
      long long v1418 = 0u;
      long long v1419 = 0u;
      *(_OWORD *)v1416 = 0u;
      long long v1417 = 0u;
      long long v1414 = 0u;
      long long v1415 = 0u;
      memset(v1413, 0, sizeof(v1413));
      *(_OWORD *)std::string __p = 0u;
      long long v1412 = 0u;
      unint64_t v1150 = (unint64_t)v1147 >> 32;
      if (SHIDWORD(v1147) < 0) {
        LODWORD(v1150) = HIDWORD(v1147) + 1;
      }
      int v1151 = (int)v1150 >> 1;
      if ((int)v1147 >= 0) {
        int v1152 = (int)v1147;
      }
      else {
        int v1152 = v1147 + 1;
      }
      float64x2_t v1153 = (float64x2_t)vdupq_lane_s64(v1334, 0);
      float64x2_t v1154 = (float64x2_t)vdupq_lane_s64(v1336, 0);
      float64x2_t v1155 = (float64x2_t)vdupq_lane_s64(v1335, 0);
      float64x2_t v1156 = (float64x2_t)vdupq_lane_s64(v1338, 0);
      float64x2_t v1157 = (float64x2_t)vdupq_lane_s64(v1341, 0);
      double v1158 = sqrt((double)((v1152 >> 1) * (v1152 >> 1) + v1151 * v1151)) / v1146 * 0.0004;
      float64x2_t v1159 = (float64x2_t)vdupq_lane_s64(v1344, 0);
      float64x2_t v1160 = (float64x2_t)vdupq_lane_s64(v1349, 0);
      int32x2_t v1161 = (int32x2_t)0x100000000;
      int64x2_t v1162 = (int64x2_t)xmmword_1DDBF8D60;
      uint64x2_t v1163 = (uint64x2_t)vdupq_n_s64(0x33uLL);
      int64x2_t v1164 = vdupq_n_s64(2uLL);
      do
      {
        v1165.i64[0] = v1161.i32[0];
        v1165.i64[1] = v1161.i32[1];
        float64x2_t v1166 = vcvtq_f64_s64(v1165);
        float64x2_t v1167 = vmulq_f64(vmulq_n_f64(v1166, v1158), v1166);
        float64x2_t v1168 = vmulq_f64(v1167, v1167);
        float64x2_t v1169 = vmulq_f64(v1167, v1168);
        float64x2_t v1170 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v1154, v1167, v1153), v1168, v1155), v1169, v1156), vmulq_f64(v1168, v1168), v1157), vmulq_f64(v1168, v1169), v1159), vmulq_f64(v1169, v1169), v1160);
        if (vmovn_s64((int64x2_t)vcgtq_u64(v1163, (uint64x2_t)v1162)).u8[0])
        {
          if (v1170.f64[0] <= 1.0) {
            double v1171 = v1170.f64[0];
          }
          else {
            double v1171 = 1.0;
          }
          *(double *)&__p[v1149] = v1171;
        }
        if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x33uLL), *(uint64x2_t *)&v1162)).i32[1])
        {
          v1170.f64[0] = v1170.f64[1];
          if (v1170.f64[1] > 1.0) {
            v1170.f64[0] = 1.0;
          }
          __p[v1149 + 1] = *(void **)&v1170.f64[0];
        }
        int64x2_t v1162 = vaddq_s64(v1162, v1164);
        int32x2_t v1161 = vadd_s32(v1161, (int32x2_t)0x200000002);
        v1149 += 2;
      }
      while (v1149 != 52);
      v1172 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v1147, (uint64_t)__p, 51, v1148);
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1173, (uint64_t)v1172, @"inputScales", v1174);

      objc_msgSend_setObject_forKeyedSubscript_(v7, v1175, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v1176);
      goto LABEL_87;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1) == 8
      || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1) == 10)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
      sub_1DDAC81CC(__p, v1404);
      if (__p[1]) {
        sub_1DDA18310((std::__shared_weak_count *)__p[1]);
      }
      if (v1404[0])
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 240))(a1)) {
          (*(void (**)(void **__return_ptr))(*(void *)v1404[0] + 840))(&v1395);
        }
        else {
          (*(void (**)(void **__return_ptr))(*(void *)v1404[0] + 832))(&v1395);
        }
        sub_1DDAC8250(&v1395, __p);
        uint64_t v1285 = (const void **)__p[0];
        uint64_t v622 = (char *)__p[1];
        __p[1] = 0;
        __p[0] = 0;
        if (v1396) {
          sub_1DDA18310(v1396);
        }
        if (v1285)
        {
          int v1286 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2808))(a1);
          uint64_t v1287 = (char *)*v1285;
          if (v1286 == 10) {
            v1288 = (void (**)(void *))(v1287 + 24);
          }
          else {
            v1288 = (void (**)(void *))(v1287 + 16);
          }
          (*v1288)(v1285);
          uint64_t v1289 = 0;
          *(void *)&long long v1435 = 0;
          long long v1434 = 0u;
          long long v1433 = 0u;
          long long v1432 = 0u;
          long long v1431 = 0u;
          long long v1430 = 0u;
          long long v1429 = 0u;
          long long v1428 = 0u;
          long long v1427 = 0u;
          long long v1426 = 0u;
          long long v1425 = 0u;
          long long v1424 = 0u;
          long long v1422 = 0u;
          long long v1423 = 0u;
          long long v1420 = 0u;
          long long v1421 = 0u;
          long long v1418 = 0u;
          long long v1419 = 0u;
          *(_OWORD *)v1416 = 0u;
          long long v1417 = 0u;
          long long v1414 = 0u;
          long long v1415 = 0u;
          memset(v1413, 0, sizeof(v1413));
          *(_OWORD *)std::string __p = 0u;
          long long v1412 = 0u;
          do
          {
            v1360 = 0;
            v1361 = 0;
            uint64_t v1362 = 0;
            sub_1DDA1808C(&v1360, v1285[5], (uint64_t)v1285[6], ((unsigned char *)v1285[6] - (unsigned char *)v1285[5]) >> 3);
            uint64_t v1357 = 0;
            uint64_t v1358 = 0;
            uint64_t v1359 = 0;
            uint64_t v1290 = sub_1DDA1808C(&v1357, v1285[8], (uint64_t)v1285[9], ((unsigned char *)v1285[9] - (unsigned char *)v1285[8]) >> 3);
            *(double *)&__p[v1289] = sub_1DDAC7D5C((double)(int)v1289 / 50.0, (uint64_t)v1290, (double **)&v1360, (uint64_t *)&v1357);
            if (v1357)
            {
              uint64_t v1358 = v1357;
              operator delete(v1357);
            }
            if (v1360)
            {
              v1361 = v1360;
              operator delete(v1360);
            }
            ++v1289;
          }
          while (v1289 != 51);
          uint64_t v1293 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v1291, (uint64_t)__p, 51, v1292);
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1294, (uint64_t)v1293, @"inputScales", v1295);

          objc_msgSend_setObject_forKeyedSubscript_(v7, v1296, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v1297);
        }
        else
        {
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1283, (uint64_t)&unk_1F39AECD8, @"inputLDCExecuteFlags", v1284);
        }
        if (v622) {
          goto LABEL_110;
        }
        goto LABEL_144;
      }
LABEL_143:
      objc_msgSend_setObject_forKeyedSubscript_(v7, v658, (uint64_t)&unk_1F39AECD8, @"inputLDCExecuteFlags", v659);
      goto LABEL_144;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1) != 9) {
      goto LABEL_187;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
    sub_1DDAC82D4(__p, &v1386);
    if (__p[1]) {
      sub_1DDA18310((std::__shared_weak_count *)__p[1]);
    }
    if (!v1386)
    {
LABEL_493:
      uint64_t v696 = v1387;
      if (!v1387) {
        goto LABEL_187;
      }
      goto LABEL_186;
    }
    unsigned int v1234 = (*(uint64_t (**)(void *))(*(void *)v1386 + 888))(v1386);
    double v1235 = v1386;
    if (v1234 < 4)
    {
      uint64_t v1300 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2776))(a1);
      if ((*(unsigned int (**)(void *, uint64_t))(*(void *)v1235 + 936))(v1235, v1300))
      {
        (*(void (**)(void **__return_ptr))(*(void *)v1386 + 944))(v1404);
        float v1301 = (*(float (**)(void *))(*(void *)v1386 + 952))(v1386);
        (*(void (**)(void *))(*(void *)v1386 + 984))(v1386);
        uint64_t v1302 = (*(uint64_t (**)(void *))(*(void *)v1386 + 440))(v1386);
        (*(void (**)(void *))(*(void *)v1386 + 464))(v1386);
        uint64_t v1305 = 0;
        double v1306 = (double)((int)v1303 * (int)v1303 + HIDWORD(v1303) * HIDWORD(v1303))
              / (double)((int)v1302 * (int)v1302 + HIDWORD(v1302) * HIDWORD(v1302));
        double v1307 = *(float *)v1404[0];
        double v1308 = *((float *)v1404[0] + 1);
        float v1309 = *((float *)v1404[0] + 2);
        *(void *)&long long v1435 = 0;
        long long v1434 = 0u;
        long long v1433 = 0u;
        long long v1432 = 0u;
        long long v1431 = 0u;
        long long v1430 = 0u;
        long long v1429 = 0u;
        long long v1428 = 0u;
        long long v1427 = 0u;
        long long v1426 = 0u;
        long long v1425 = 0u;
        long long v1424 = 0u;
        long long v1422 = 0u;
        long long v1423 = 0u;
        long long v1420 = 0u;
        long long v1421 = 0u;
        long long v1418 = 0u;
        long long v1419 = 0u;
        *(_OWORD *)v1416 = 0u;
        long long v1417 = 0u;
        long long v1414 = 0u;
        long long v1415 = 0u;
        memset(v1413, 0, sizeof(v1413));
        *(_OWORD *)std::string __p = 0u;
        long long v1412 = 0u;
        double v1310 = (float)(v1301 + 1.0);
        float64x2_t v1311 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v1309), 0);
        float64x2_t v1312 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v1306)), 0);
        int32x2_t v1313 = (int32x2_t)0x100000000;
        int64x2_t v1314 = (int64x2_t)xmmword_1DDBF8D60;
        uint64x2_t v1315 = (uint64x2_t)vdupq_n_s64(0x33uLL);
        float64x2_t v1316 = (float64x2_t)vdupq_n_s64(0x4049000000000000uLL);
        int64x2_t v1317 = vdupq_n_s64(2uLL);
        do
        {
          v1318.i64[0] = v1313.i32[0];
          v1318.i64[1] = v1313.i32[1];
          float64x2_t v1319 = vcvtq_f64_s64(v1318);
          float64x2_t v1320 = vmulq_n_f64(vdivq_f64(vdivq_f64(vmulq_f64(v1319, v1319), v1316), v1316), v1306);
          float64x2_t v1321 = vmlaq_f64(vmlaq_f64(vmulq_f64(vdivq_f64(vdivq_f64(v1319, v1316), v1312), vmulq_n_f64(v1320, v1308)), v1320, vmulq_n_f64(v1320, v1307)), v1320, v1311);
          if (vmovn_s64((int64x2_t)vcgtq_u64(v1315, (uint64x2_t)v1314)).u8[0]) {
            *(double *)&__p[v1305] = (v1321.f64[0] + 1.0) / v1310;
          }
          if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x33uLL), *(uint64x2_t *)&v1314)).i32[1]) {
            *(double *)&__p[v1305 + 1] = (v1321.f64[1] + 1.0) / v1310;
          }
          int64x2_t v1314 = vaddq_s64(v1314, v1317);
          int32x2_t v1313 = vadd_s32(v1313, (int32x2_t)0x200000002);
          v1305 += 2;
        }
        while (v1305 != 52);
        uint64_t v1322 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v1303, (uint64_t)__p, 51, v1304);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1323, (uint64_t)v1322, @"inputScales", v1324);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v1325, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v1326);
        goto LABEL_490;
      }
    }
    else if ((*(unsigned int (**)(void *))(*(void *)v1386 + 872))(v1386) == 1 {
           && (*(unsigned int (**)(void *))(*(void *)v1386 + 864))(v1386))
    }
    {
      int v1238 = (*(uint64_t (**)(void *))(*(void *)v1386 + 888))(v1386);
      (*(void (**)(void **__return_ptr))(*(void *)v1386 + 880))(v1404);
      __p[0] = 0;
      sub_1DDA25B2C(&v1395, ((char *)v1404[1] - (char *)v1404[0]) >> 3, __p);
      __p[0] = 0;
      sub_1DDA25B2C(&v1393, ((char *)v1404[1] - (char *)v1404[0]) >> 3, __p);
      (*(void (**)(uint64_t))(*(void *)a1 + 432))(a1);
      int v1240 = v1239;
      (*(void (**)(uint64_t))(*(void *)a1 + 432))(a1);
      int v1242 = v1241;
      (*(void (**)(uint64_t))(*(void *)a1 + 456))(a1);
      int v1244 = v1243;
      (*(void (**)(uint64_t))(*(void *)a1 + 456))(a1);
      int v1246 = v1245;
      uint64_t v1247 = (double *)v1404[0];
      if (v1404[1] != v1404[0])
      {
        unint64_t v1248 = 0;
        unint64_t v1249 = ((char *)v1404[1] - (char *)v1404[0]) >> 3;
        uint64_t v1250 = (double *)v1393;
        double v1251 = (double *)v1395;
        if (v1249 <= 1) {
          unint64_t v1249 = 1;
        }
        do
        {
          v1250[v1248] = 100.0 / (v1247[v1248] + 100.0);
          v1251[v1248] = (float)((float)v1248 / (float)(v1238 - 1));
          ++v1248;
        }
        while (v1249 != v1248);
      }
      if ((*(unsigned int (**)(void *))(*(void *)v1386 + 864))(v1386) == 3 && v1404[1] != v1404[0])
      {
        unint64_t v1252 = ((char *)v1404[1] - (char *)v1404[0]) >> 3;
        uint64_t v1253 = (double *)v1393;
        unint64_t v1254 = v1252 - 1;
        if (v1252 <= 1) {
          unint64_t v1252 = 1;
        }
        uint64_t v1255 = (double *)v1393;
        do
        {
          *uint64_t v1255 = *v1255 / v1253[v1254];
          ++v1255;
          --v1252;
        }
        while (v1252);
      }
      v1256 = [Curve alloc];
      double v1257 = sqrtf((float)((float)v1240 * (float)v1240) + (float)((float)v1242 * (float)v1242));
      uint64_t v1346 = objc_msgSend_initWithCount_domainMin_domainMax_values_(v1256, v1258, (unint64_t)((char *)v1404[1] - (char *)v1404[0]) >> 3, (uint64_t)v1393, v1259, *(double *)v1395 * v1257, *(double *)((char *)v1395 + (char *)v1404[1] - (char *)v1404[0] - 8) * v1257);
      v1260 = [Curve alloc];
      v1355[0] = MEMORY[0x1E4F143A8];
      v1355[1] = 3221225472;
      v1355[2] = sub_1DDAC8358;
      v1355[3] = &unk_1E6D05210;
      id v1261 = v1346;
      id v1356 = v1261;
      uint64_t v1351 = objc_msgSend_initWithBlock_domainMin_domainMax_(v1260, v1262, (uint64_t)v1355, v1263, v1264, 0.0, v1257);
      v1265 = [Curve alloc];
      float v1266 = sqrtf((float)((float)v1244 * (float)v1244) + (float)((float)v1246 * (float)v1246));
      v1353[0] = MEMORY[0x1E4F143A8];
      v1353[1] = 3221225472;
      v1353[2] = sub_1DDAC83CC;
      v1353[3] = &unk_1E6D05210;
      id v1267 = v1351;
      id v1354 = v1267;
      double v1275 = objc_msgSend_initWithBlock_domainMin_domainMax_(v1265, v1268, (uint64_t)v1353, v1269, v1270, 0.0, v1266);
      uint64_t v1276 = 0;
      *(void *)&long long v1435 = 0;
      long long v1434 = 0u;
      long long v1433 = 0u;
      long long v1432 = 0u;
      long long v1431 = 0u;
      long long v1430 = 0u;
      long long v1429 = 0u;
      long long v1428 = 0u;
      long long v1427 = 0u;
      long long v1426 = 0u;
      long long v1425 = 0u;
      long long v1424 = 0u;
      long long v1422 = 0u;
      long long v1423 = 0u;
      long long v1420 = 0u;
      long long v1421 = 0u;
      long long v1418 = 0u;
      long long v1419 = 0u;
      *(_OWORD *)v1416 = 0u;
      long long v1417 = 0u;
      long long v1414 = 0u;
      long long v1415 = 0u;
      memset(v1413, 0, sizeof(v1413));
      *(_OWORD *)std::string __p = 0u;
      long long v1412 = 0u;
      do
      {
        objc_msgSend_function(v1275, v1271, v1272, v1273, v1274);
        uint64_t v1277 = (double (**)(double))objc_claimAutoreleasedReturnValue();
        *(double *)&__p[v1276] = v1277[2]((float)((float)(v1266 * (float)(int)v1276) / 50.0));

        ++v1276;
      }
      while (v1276 != 51);
      uint64_t v1278 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v1271, (uint64_t)__p, 51, v1274);
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1279, (uint64_t)v1278, @"inputScales", v1280);

      objc_msgSend_setObject_forKeyedSubscript_(v7, v1281, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v1282);
      if (v1393)
      {
        v1394[0] = v1393;
        operator delete(v1393);
      }
      if (v1395)
      {
        v1396 = (std::__shared_weak_count *)v1395;
        operator delete(v1395);
      }
LABEL_490:
      if (v1404[0])
      {
        v1404[1] = v1404[0];
        operator delete(v1404[0]);
      }
      goto LABEL_493;
    }
    objc_msgSend_setObject_forKeyedSubscript_(v7, v1236, (uint64_t)&unk_1F39AECD8, @"inputLDCExecuteFlags", v1237);
    goto LABEL_493;
  }
  (*(void (**)(uint64_t))(v643 + 456))(a1);
  uint64_t v645 = v644;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
  sub_1DDAC7F20(__p, &v1383);
  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  if (v1383)
  {
    sub_1DDA868FC((uint64_t)v1383, __p);
    uint64_t v646 = (__int16 *)__p[0];
    int64_t v647 = (char *)__p[1] - (char *)__p[0];
    if (__p[1] != __p[0])
    {
      unint64_t v648 = v647 >> 1;
      __p[0] = 0;
      sub_1DDA25B2C(v1404, v647 >> 1, __p);
      __p[0] = 0;
      sub_1DDA25B2C(&v1395, v648, __p);
      unint64_t v649 = 0;
      double v650 = sqrt((double)((int)v645 * (int)v645 + HIDWORD(v645) * HIDWORD(v645)));
      unint64_t v651 = v648 - 1;
      v652 = (double *)v1404[0];
      v653 = (double *)v1395;
      if (v648 <= 1) {
        uint64_t v654 = 1;
      }
      else {
        uint64_t v654 = v648;
      }
      do
      {
        v652[v649] = (double)v649 / (double)(v648 - 1);
        double v655 = (double)v646[v649] * -0.0000610351562 + 1.0;
        if (fabs(v655) < 0.000000001) {
          double v655 = dbl_1DDBFB270[v655 > 0.0];
        }
        v653[v649++] = 1.0 / v655;
      }
      while (v654 != v649);
      if (v646[v651] < 0)
      {
        v699 = (double *)v1404[1];
        double v700 = (double)SHIDWORD(v645) / v650;
        if (v1404[1] != v1404[0])
        {
          unint64_t v701 = ((char *)v1404[1] - (char *)v1404[0]) >> 3;
          v699 = (double *)v1404[0];
          do
          {
            unint64_t v702 = v701 >> 1;
            uint64_t v703 = &v699[v701 >> 1];
            double v705 = *v703;
            uint64_t v704 = v703 + 1;
            v701 += ~(v701 >> 1);
            if (v700 < v705) {
              unint64_t v701 = v702;
            }
            else {
              v699 = v704;
            }
          }
          while (v701);
        }
        uint64_t v706 = (char *)v699 - (char *)v1404[0];
        uint64_t v707 = ((char *)v699 - (char *)v1404[0]) >> 3;
        if (v651 >= v706 >> 3) {
          unint64_t v651 = v707;
        }
        unint64_t v708 = v651 - 1;
        if (!v651) {
          unint64_t v708 = 0;
        }
        double v709 = *((double *)v1404[0] + v651);
        double v710 = *((double *)v1404[0] + v708);
        if (vabdd_f64(v709, v710) >= 0.000000001) {
          double v711 = v709 - v710;
        }
        else {
          double v711 = dbl_1DDBFB270[v709 - v710 > 0.0];
        }
        uint64_t v656 = (double *)v1395;
        double v712 = fmin(fmax((v700 - v710) / v711, 0.0), 1.0);
        double v657 = *((double *)v1395 + v651) * v712 + *((double *)v1395 + v708) * (1.0 - v712);
      }
      else
      {
        uint64_t v656 = (double *)v1395;
        double v657 = *((double *)v1395 + v651);
      }
      do
      {
        *uint64_t v656 = *v656 / v657;
        ++v656;
        --v654;
      }
      while (v654);
      __p[0] = 0;
      sub_1DDA25B2C(&v1393, 0x32uLL, __p);
      __p[0] = 0;
      sub_1DDA25B2C(&v1386, 0x32uLL, __p);
      uint64_t v713 = 0;
      *(void *)&long long v1435 = 0;
      long long v1434 = 0u;
      long long v1433 = 0u;
      long long v1432 = 0u;
      long long v1431 = 0u;
      long long v1430 = 0u;
      long long v1429 = 0u;
      long long v1428 = 0u;
      long long v1427 = 0u;
      long long v1426 = 0u;
      long long v1425 = 0u;
      long long v1424 = 0u;
      long long v1422 = 0u;
      long long v1423 = 0u;
      long long v1420 = 0u;
      long long v1421 = 0u;
      long long v1418 = 0u;
      long long v1419 = 0u;
      *(_OWORD *)v1416 = 0u;
      long long v1417 = 0u;
      long long v1414 = 0u;
      long long v1415 = 0u;
      memset(v1413, 0, sizeof(v1413));
      *(_OWORD *)std::string __p = 0u;
      long long v1412 = 0u;
      do
      {
        uint64_t v1366 = 0;
        uint64_t v1367 = 0;
        uint64_t v1368 = 0;
        sub_1DDA1808C(&v1366, v1404[0], (uint64_t)v1404[1], ((char *)v1404[1] - (char *)v1404[0]) >> 3);
        double v1363 = 0;
        v1364 = 0;
        uint64_t v1365 = 0;
        v714 = sub_1DDA1808C(&v1363, v1395, (uint64_t)v1396, ((char *)v1396 - (unsigned char *)v1395) >> 3);
        *(double *)&__p[v713] = sub_1DDAC7D5C((double)(int)v713 / 50.0, (uint64_t)v714, (double **)&v1366, (uint64_t *)&v1363);
        if (v1363)
        {
          v1364 = v1363;
          operator delete(v1363);
        }
        if (v1366)
        {
          uint64_t v1367 = v1366;
          operator delete(v1366);
        }
        ++v713;
      }
      while (v713 != 51);
      v717 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v715, (uint64_t)__p, 51, v716);
      objc_msgSend_setObject_forKeyedSubscript_(v7, v718, (uint64_t)v717, @"inputScales", v719);

      objc_msgSend_setObject_forKeyedSubscript_(v7, v720, (uint64_t)&unk_1F39AED08, @"inputLDCExecuteFlags", v721);
      if (v1386)
      {
        double v1387 = (std::__shared_weak_count *)v1386;
        operator delete(v1386);
      }
      if (v1393)
      {
        v1394[0] = v1393;
        operator delete(v1393);
      }
      if (v1395)
      {
        v1396 = (std::__shared_weak_count *)v1395;
        operator delete(v1395);
      }
      if (v1404[0])
      {
        v1404[1] = v1404[0];
        operator delete(v1404[0]);
      }
    }
    if (v646) {
      operator delete(v646);
    }
  }
  uint64_t v696 = v1384;
  if (v1384) {
LABEL_186:
  }
    sub_1DDA18310(v696);
LABEL_187:
  if (sub_1DDB10E68(a2) || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 544))(a1) >= 2)
  {
    v722 = NSNumber;
    uint64_t v723 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2168))(a1);
    uint64_t v727 = objc_msgSend_numberWithUnsignedInt_(v722, v724, v723, v725, v726);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v728, (uint64_t)v727, @"inputPattern", v729);

    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1016))(__p, a1);
    if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)32)
    {
      v734 = objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E4F1E080], v730, v731, v732, v733, *(double *)__p[0], *((double *)__p[0] + 1), *((double *)__p[0] + 2), *((double *)__p[0] + 3));
      objc_msgSend_setObject_forKeyedSubscript_(v7, v735, (uint64_t)v734, @"inputBlacks", v736);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 744))(v1404, a1);
    if ((void *)((char *)v1404[1] - (char *)v1404[0]) == (void *)24)
    {
      v741 = objc_msgSend_vectorWithX_Y_Z_(MEMORY[0x1E4F1E080], v737, v738, v739, v740, *(double *)v1404[0], *((double *)v1404[0] + 1), *((double *)v1404[0] + 2));
      objc_msgSend_setObject_forKeyedSubscript_(v7, v742, (uint64_t)v741, @"inputFactors", v743);
    }
    uint64_t v744 = NSNumber;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2112))(a1)) {
      objc_msgSend_numberWithDouble_(v744, v745, v746, v747, v748, 1.0);
    }
    else {
    v749 = objc_msgSend_numberWithDouble_(v744, v745, v746, v747, v748, 0.0);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v7, v750, (uint64_t)v749, @"inputDespeckle", v751);

    if (v1404[0])
    {
      v1404[1] = v1404[0];
      operator delete(v1404[0]);
    }
    goto LABEL_198;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2152))(a1)) {
    goto LABEL_201;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1016))(__p, a1);
  v752 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)32)
  {
    v772 = objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E4F1E080], v768, v769, v770, v771, *(double *)__p[0], *((double *)__p[0] + 1), *((double *)__p[0] + 2), *((double *)__p[0] + 3));
    objc_msgSend_setObject_forKeyedSubscript_(v7, v773, (uint64_t)v772, @"inputBlacks", v774);

LABEL_198:
    v752 = __p[0];
  }
  if (v752)
  {
    __p[1] = v752;
    operator delete(v752);
  }
LABEL_201:
  uint64_t v753 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 520))(a1);
  uint64_t v758 = objc_msgSend_vectorWithX_Y_(MEMORY[0x1E4F1E080], v754, v755, v756, v757, (double)(int)v753, (double)SHIDWORD(v753));
  objc_msgSend_setObject_forKeyedSubscript_(v7, v759, (uint64_t)v758, @"inputTargetSize", v760);

  if ((int)a2 < 1) {
    goto LABEL_266;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v7, v761, (uint64_t)&unk_1F39AECD8, @"inputGainMapExecute", v762);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2840))(a1)
    || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 2848))(a1) != 1)
  {
    goto LABEL_266;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
  sub_1DDAC8028(__p, &v1395);
  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  __p[1] = 0;
  __p[0] = 0;
  *(void *)&long long v1412 = 0;
  if (v1395)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v1395 + 808))(v1404);
    sub_1DDACB320(__p);
    *(_OWORD *)std::string __p = *(_OWORD *)v1404;
    *(float64_t *)&long long v1412 = v1405.f64[0];
    v1405.f64[0] = 0.0;
    v1404[1] = 0;
    v1404[0] = 0;
    v1393 = v1404;
    sub_1DDA9EB40((void ***)&v1393);
    uint64_t v766 = __p[1];
    double v767 = __p[0];
  }
  else
  {
    double v767 = 0;
    uint64_t v766 = 0;
  }
  unint64_t v775 = 0xEEEEEEEEEEEEEEEFLL * ((v766 - v767) >> 3);
  if (v775 != 1)
  {
    if (v775 != 4)
    {
      v1332 = __cxa_allocate_exception(8uLL);
      void *v1332 = "Unexpected size of gainmap parameters";
      __cxa_throw(v1332, MEMORY[0x1E4FBA308], 0);
    }
    if (*((_DWORD *)v767 + 23) == 1
      && *((_DWORD *)v767 + 53) == 1
      && *((_DWORD *)v767 + 83) == 1
      && *((_DWORD *)v767 + 113) == 1)
    {
      uint64_t v776 = (uint64_t)(*(void *)(*((void *)v767 + 12) + 8) - **((void **)v767 + 12)) >> 2;
      if (v776 == (uint64_t)(*(void *)(*((void *)v767 + 27) + 8) - **((void **)v767 + 27)) >> 2
        && v776 == (uint64_t)(*(void *)(*((void *)v767 + 42) + 8) - **((void **)v767 + 42)) >> 2
        && v776 == (uint64_t)(*(void *)(*((void *)v767 + 57) + 8) - **((void **)v767 + 57)) >> 2)
      {
        int v777 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2168))(a1);
        if (__p[1] == __p[0])
        {
          uint64_t v787 = 0xFFFFLL;
          uint64_t v786 = 0xFFFFLL;
          uint64_t v785 = 0xFFFFLL;
          uint64_t v784 = 0xFFFFLL;
        }
        else
        {
          uint64_t v781 = 0;
          if ((unint64_t)(((char *)__p[1] - (char *)__p[0]) / 120) <= 1) {
            int64_t v782 = 1;
          }
          else {
            int64_t v782 = ((char *)__p[1] - (char *)__p[0]) / 120;
          }
          double v783 = (double *)((char *)__p[0] + 8);
          uint64_t v784 = 0xFFFFLL;
          uint64_t v785 = 0xFFFFLL;
          uint64_t v786 = 0xFFFFLL;
          uint64_t v787 = 0xFFFFLL;
          do
          {
            char v788 = 4 * (int)*v783 + 2 * (int)*(v783 - 1);
            unsigned int v789 = ((0xC0u >> v788) & v777) >> (6 - v788);
            if (v789 == 2)
            {
              uint64_t v787 = v781;
            }
            else if (v789 == 1)
            {
              if (v785 == 0xFFFF) {
                uint64_t v785 = v781;
              }
              else {
                uint64_t v784 = v781;
              }
            }
            else
            {
              uint64_t v786 = v781;
              if (v789)
              {
                double v1331 = __cxa_allocate_exception(8uLL);
                *double v1331 = "Unexpected CFA pattern";
                __cxa_throw(v1331, MEMORY[0x1E4FBA308], 0);
              }
            }
            ++v781;
            v783 += 15;
          }
          while (v782 != v781);
        }
        if (v787 == 0xFFFF || v786 == 0xFFFF || v785 == 0xFFFF || v784 == 0xFFFF)
        {
          uint64_t v1333 = __cxa_allocate_exception(8uLL);
          *uint64_t v1333 = "bad CFA index";
          __cxa_throw(v1333, MEMORY[0x1E4FBA308], 0);
        }
        unint64_t v842 = (uint64_t)(*(void *)(*((void *)__p[0] + 12) + 8) - **((void **)__p[0] + 12)) >> 2;
        if (*(void *)(*((void *)__p[0] + 12) + 8) != **((void **)__p[0] + 12))
        {
          uint64_t v843 = (float *)**((void **)__p[0] + 15 * v785 + 12);
          v844 = (float *)**((void **)__p[0] + 15 * v784 + 12);
          if (v842 <= 1) {
            uint64_t v845 = 1;
          }
          else {
            uint64_t v845 = (uint64_t)(*(void *)(*((void *)__p[0] + 12) + 8) - **((void **)__p[0] + 12)) >> 2;
          }
          do
          {
            if (*v843 != *v844)
            {
              uint64_t v1330 = __cxa_allocate_exception(8uLL);
              *uint64_t v1330 = "mismatch in green channels";
              __cxa_throw(v1330, MEMORY[0x1E4FBA308], 0);
            }
            ++v843;
            ++v844;
            --v845;
          }
          while (v845);
        }
        objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v778, 12 * v842, v779, v780);
        id v791 = objc_claimAutoreleasedReturnValue();
        uint64_t v850 = objc_msgSend_mutableBytes(v791, v846, v847, v848, v849);
        uint64_t v853 = *(void *)(*((void *)__p[0] + 12) + 8) - **((void **)__p[0] + 12);
        if (v853)
        {
          unint64_t v854 = v853 >> 2;
          double v855 = (int *)**((void **)__p[0] + 15 * v787 + 12);
          v856 = (int *)**((void **)__p[0] + 15 * v785 + 12);
          uint64_t v857 = (int *)**((void **)__p[0] + 15 * v786 + 12);
          if (v854 <= 1) {
            unint64_t v854 = 1;
          }
          uint64_t v858 = (_DWORD *)(v850 + 8);
          do
          {
            int v859 = *v855++;
            *(v858 - 2) = v859;
            int v860 = *v856++;
            *(v858 - 1) = v860;
            int v861 = *v857++;
            *uint64_t v858 = v861;
            v858 += 3;
            --v854;
          }
          while (v854);
        }
        objc_msgSend_setObject_forKeyedSubscript_(v7, v851, (uint64_t)&unk_1F39AED08, @"inputGainMapExecute", v852);
        uint64_t v865 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v862, *((unsigned int *)__p[0] + 22), v863, v864);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v866, (uint64_t)v865, @"inputGainMapStartPlane", v867);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v868, (uint64_t)&unk_1F39AED20, @"inputGainMapNumPlanes", v869);
        (*(void (**)(uint64_t))(*(void *)a1 + 432))(a1);
        v874 = objc_msgSend_vectorWithCGRect_(MEMORY[0x1E4F1E080], v870, v871, v872, v873, *(double *)__p[0] / (double)(int)v870, *((double *)__p[0] + 1) / (double)SHIDWORD(v870), *((double *)__p[0] + 2) / (double)(int)v870, *((double *)__p[0] + 3) / (double)SHIDWORD(v870));
        objc_msgSend_setObject_forKeyedSubscript_(v7, v875, (uint64_t)v874, @"inputGainMapApplyRegion", v876);

        float v881 = objc_msgSend_vectorWithCGRect_(MEMORY[0x1E4F1E080], v877, v878, v879, v880, *((double *)__p[0] + 4), *((double *)__p[0] + 5), *((double *)__p[0] + 6), *((double *)__p[0] + 7));
        objc_msgSend_setObject_forKeyedSubscript_(v7, v882, (uint64_t)v881, @"inputGainMapRegion", v883);

        uint64_t v888 = objc_msgSend_vectorWithX_Y_(MEMORY[0x1E4F1E080], v884, v885, v886, v887, *((double *)__p[0] + 8), *((double *)__p[0] + 9));
        objc_msgSend_setObject_forKeyedSubscript_(v7, v889, (uint64_t)v888, @"inputGainMapSize", v890);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v891, (uint64_t)v791, @"inputGainMapData", v892);
        goto LABEL_264;
      }
    }
LABEL_481:
    double v1299 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v1299, "RawCameraException");
    __cxa_throw(v1299, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((*((_DWORD *)v767 + 23) | 2) != 3) {
    goto LABEL_481;
  }
  uint64_t v790 = *(void *)(*((void *)v767 + 12) + 8) - **((void **)v767 + 12);
  objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v763, 4 * ((v790 >> 1) + (v790 >> 2)), v764, v765);
  id v791 = objc_claimAutoreleasedReturnValue();
  uint64_t v796 = objc_msgSend_mutableBytes(v791, v792, v793, v794, v795);
  double v799 = (uint64_t *)*((void *)__p[0] + 12);
  uint64_t v800 = *v799;
  uint64_t v801 = v799[1];
  uint64_t v802 = v801 - *v799;
  if (v801 != *v799)
  {
    uint64_t v803 = 0;
    uint64_t v804 = 0;
    unint64_t v805 = v802 >> 2;
    int v806 = *((_DWORD *)__p[0] + 23);
    if (v805 <= 1) {
      unint64_t v805 = 1;
    }
    while (v806 != 1)
    {
      if (v806 == 3)
      {
        double v807 = (_DWORD *)(v796 + 4 * v803);
        *double v807 = *(_DWORD *)(v800 + 4 * v804);
        v807[1] = *(_DWORD *)(v799[3] + 4 * v804);
        int v808 = *(_DWORD *)(v799[6] + 4 * v804);
        uint64_t v809 = 3 * v804 + 2;
LABEL_244:
        *(_DWORD *)(v796 + 4 * v809) = v808;
      }
      ++v804;
      v803 += 3;
      if (v805 == v804) {
        goto LABEL_246;
      }
    }
    int v808 = *(_DWORD *)(v800 + 4 * v804);
    uint64_t v810 = v796 + 4 * v803;
    *(_DWORD *)(v810 + 4) = v808;
    *(_DWORD *)(v810 + 8) = v808;
    uint64_t v809 = v803;
    goto LABEL_244;
  }
LABEL_246:
  objc_msgSend_setObject_forKeyedSubscript_(v7, v797, (uint64_t)&unk_1F39AED08, @"inputGainMapExecute", v798);
  uint64_t v814 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v811, *((unsigned int *)__p[0] + 22), v812, v813);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v815, (uint64_t)v814, @"inputGainMapStartPlane", v816);

  objc_msgSend_setObject_forKeyedSubscript_(v7, v817, (uint64_t)&unk_1F39AED20, @"inputGainMapNumPlanes", v818);
  (*(void (**)(uint64_t))(*(void *)a1 + 432))(a1);
  double v823 = objc_msgSend_vectorWithCGRect_(MEMORY[0x1E4F1E080], v819, v820, v821, v822, *(double *)__p[0] / (double)(int)v819, *((double *)__p[0] + 1) / (double)SHIDWORD(v819), *((double *)__p[0] + 2) / (double)(int)v819, *((double *)__p[0] + 3) / (double)SHIDWORD(v819));
  objc_msgSend_setObject_forKeyedSubscript_(v7, v824, (uint64_t)v823, @"inputGainMapApplyRegion", v825);

  uint64_t v830 = objc_msgSend_vectorWithCGRect_(MEMORY[0x1E4F1E080], v826, v827, v828, v829, *((double *)__p[0] + 4), *((double *)__p[0] + 5), *((double *)__p[0] + 6), *((double *)__p[0] + 7));
  objc_msgSend_setObject_forKeyedSubscript_(v7, v831, (uint64_t)v830, @"inputGainMapRegion", v832);

  v837 = objc_msgSend_vectorWithX_Y_(MEMORY[0x1E4F1E080], v833, v834, v835, v836, *((double *)__p[0] + 8), *((double *)__p[0] + 9));
  objc_msgSend_setObject_forKeyedSubscript_(v7, v838, (uint64_t)v837, @"inputGainMapSize", v839);

  objc_msgSend_setObject_forKeyedSubscript_(v7, v840, (uint64_t)v791, @"inputGainMapData", v841);
LABEL_264:

  v1404[0] = __p;
  sub_1DDA9EB40((void ***)v1404);
  if (v1396) {
    sub_1DDA18310(v1396);
  }
LABEL_266:
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
    goto LABEL_283;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v7, v893, (uint64_t)&unk_1F39AECD8, @"inputVignetteExecute", v894);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
  sub_1DDAC8028(__p, &v1395);
  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  __p[1] = 0;
  __p[0] = 0;
  *(void *)&long long v1412 = 0;
  if (v1395)
  {
    sub_1DDA9AC2C((void **)v1395, 3, (uint64_t *)v1404);
    sub_1DDA9E130((uint64_t *)__p);
    *(_OWORD *)std::string __p = *(_OWORD *)v1404;
    *(float64_t *)&long long v1412 = v1405.f64[0];
    v1405.f64[0] = 0.0;
    v1404[1] = 0;
    v1404[0] = 0;
    v1393 = v1404;
    sub_1DDA18270((void ***)&v1393);
    if (__p[0] != __p[1])
    {
      objc_msgSend_setObject_forKeyedSubscript_(v7, v895, (uint64_t)&unk_1F39AED08, @"inputVignetteExecute", v896);
      v897 = __p[0];
      if (*(void *)__p[0])
      {
        v898 = __dynamic_cast(*(const void **)__p[0], (const struct __class_type_info *)&unk_1F395A728, (const struct __class_type_info *)&unk_1F398ED98, 0);
        if (v898)
        {
          uint64_t v899 = (std::__shared_weak_count *)*((void *)v897 + 1);
          if (v899) {
            atomic_fetch_add_explicit(&v899->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_277;
        }
      }
      else
      {
        v898 = 0;
      }
      uint64_t v899 = 0;
LABEL_277:
      v1404[1] = 0;
      v1404[0] = 0;
      v1405.f64[0] = 0.0;
      sub_1DDA1808C(v1404, *((const void **)v898 + 2), *((void *)v898 + 3), (uint64_t)(*((void *)v898 + 3) - *((void *)v898 + 2)) >> 3);
      uint64_t v904 = objc_msgSend_numberWithDouble_(NSNumber, v900, v901, v902, v903, *(double *)v1404[0]);
      objc_msgSend_setObject_forKeyedSubscript_(v7, v905, (uint64_t)v904, @"inputVignetteK0", v906);

      uint64_t v911 = objc_msgSend_numberWithDouble_(NSNumber, v907, v908, v909, v910, *((double *)v1404[0] + 1));
      objc_msgSend_setObject_forKeyedSubscript_(v7, v912, (uint64_t)v911, @"inputVignetteK1", v913);

      v918 = objc_msgSend_numberWithDouble_(NSNumber, v914, v915, v916, v917, *((double *)v1404[0] + 2));
      objc_msgSend_setObject_forKeyedSubscript_(v7, v919, (uint64_t)v918, @"inputVignetteK2", v920);

      v925 = objc_msgSend_numberWithDouble_(NSNumber, v921, v922, v923, v924, *((double *)v1404[0] + 3));
      objc_msgSend_setObject_forKeyedSubscript_(v7, v926, (uint64_t)v925, @"inputVignetteK3", v927);

      v932 = objc_msgSend_numberWithDouble_(NSNumber, v928, v929, v930, v931, *((double *)v1404[0] + 4));
      objc_msgSend_setObject_forKeyedSubscript_(v7, v933, (uint64_t)v932, @"inputVignetteK4", v934);

      uint64_t v939 = objc_msgSend_vectorWithX_Y_(MEMORY[0x1E4F1E080], v935, v936, v937, v938, *((double *)v898 + 5), *((double *)v898 + 6));
      objc_msgSend_setObject_forKeyedSubscript_(v7, v940, (uint64_t)v939, @"inputVignetteCenter", v941);

      if (v1404[0])
      {
        v1404[1] = v1404[0];
        operator delete(v1404[0]);
      }
      if (v899) {
        sub_1DDA18310(v899);
      }
    }
  }
  v1404[0] = __p;
  sub_1DDA18270((void ***)v1404);
  if (v1396) {
    sub_1DDA18310(v1396);
  }
LABEL_283:
  objc_msgSend_setObject_forKeyedSubscript_(v7, v893, (uint64_t)&unk_1F39AECD8, @"inputVignetteTableExecute", v894);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2832))(a1) != 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2832))(a1) != 2)
    {
      objc_msgSend_setObject_forKeyedSubscript_(v7, v970, (uint64_t)&unk_1F39AECD8, @"inputVignetteTableExecute", v971);
      goto LABEL_324;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
    sub_1DDAC82D4(__p, &v1393);
    if (__p[1]) {
      sub_1DDA18310((std::__shared_weak_count *)__p[1]);
    }
    if (v1393)
    {
      int v972 = (*(uint64_t (**)(void *))(*(void *)v1393 + 896))(v1393);
      uint64_t v973 = v1393;
      if (v972)
      {
        int v974 = (*(uint64_t (**)(void *))(*(void *)v1393 + 904))(v1393);
        (*(void (**)(void **__return_ptr))(*(void *)v1393 + 928))(__p);
        float v975 = (*(float (**)(void *))(*(void *)v1393 + 920))(v1393);
        LODWORD(v1395) = 0;
        sub_1DDACB410(v1404, ((char *)__p[1] - (char *)__p[0]) >> 2, &v1395);
        LODWORD(v1386) = 0;
        sub_1DDACB410(&v1395, ((char *)__p[1] - (char *)__p[0]) >> 2, &v1386);
        unint64_t v978 = (float *)__p[0];
        v979 = (float *)v1395;
        uint64_t v980 = (char *)__p[1] - (char *)__p[0];
        if (__p[1] != __p[0])
        {
          unint64_t v981 = 0;
          float v982 = (float)(v974 - 1);
          v983 = (float *)v1404[0];
          if ((unint64_t)(v980 >> 2) <= 1) {
            uint64_t v984 = 1;
          }
          else {
            uint64_t v984 = v980 >> 2;
          }
          do
          {
            v979[v981] = exp2f(v975 * v978[v981]);
            v983[v981] = (float)v981 / v982;
            ++v981;
          }
          while (v984 != v981);
        }
        v985 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v976, (uint64_t)v979, v980, v977);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v986, (uint64_t)v985, @"inputVignetteTableData", v987);
        v991 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v988, ((char *)__p[1] - (char *)__p[0]) >> 2, v989, v990);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v992, (uint64_t)v991, @"inputVignetteTableDataSize", v993);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v994, (uint64_t)&unk_1F39AED08, @"inputVignetteTableExecute", v995);
        if (v1395)
        {
          v1396 = (std::__shared_weak_count *)v1395;
          operator delete(v1395);
        }
        if (v1404[0])
        {
          v1404[1] = v1404[0];
          operator delete(v1404[0]);
        }
      }
      else
      {
        uint64_t v996 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2776))(a1);
        if (!(*(unsigned int (**)(void *, uint64_t))(*(void *)v973 + 960))(v973, v996)) {
          goto LABEL_322;
        }
        objc_msgSend_setObject_forKeyedSubscript_(v7, v997, (uint64_t)&unk_1F39AED08, @"inputVignetteExecute", v998);
        (*(void (**)(void **__return_ptr))(*(void *)v1393 + 968))(__p);
        float v999 = (*(float (**)(void *))(*(void *)v1393 + 976))(v1393);
        *(float *)&double v1000 = v999 * *((float *)__p[0] + 3);
        v1005 = objc_msgSend_numberWithFloat_(NSNumber, v1001, v1002, v1003, v1004, v1000);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1006, (uint64_t)v1005, @"inputVignetteK0", v1007);

        *(float *)&double v1008 = v999 * *((float *)__p[0] + 2);
        v1013 = objc_msgSend_numberWithFloat_(NSNumber, v1009, v1010, v1011, v1012, v1008);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1014, (uint64_t)v1013, @"inputVignetteK1", v1015);

        *(float *)&double v1016 = v999 * *((float *)__p[0] + 1);
        uint64_t v1021 = objc_msgSend_numberWithFloat_(NSNumber, v1017, v1018, v1019, v1020, v1016);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1022, (uint64_t)v1021, @"inputVignetteK2", v1023);

        *(float *)&double v1024 = v999 * *(float *)__p[0];
        unint64_t v1029 = objc_msgSend_numberWithFloat_(NSNumber, v1025, v1026, v1027, v1028, v1024);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1030, (uint64_t)v1029, @"inputVignetteK3", v1031);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v1032, (uint64_t)&unk_1F39AECD8, @"inputVignetteK4", v1033);
        double v1034 = (*(double (**)(void *))(*(void *)v1393 + 984))(v1393);
        double v1036 = v1035;
        uint64_t v1037 = (*(uint64_t (**)(void *))(*(void *)v1393 + 440))(v1393);
        if ((int)v1037 >= 0) {
          int v1042 = v1037;
        }
        else {
          int v1042 = v1037 + 1;
        }
        double v1043 = (v1034 + (double)(v1042 >> 1)) / (float)(int)v1037;
        if (v1037 >= 0) {
          int v1044 = HIDWORD(v1037);
        }
        else {
          int v1044 = HIDWORD(v1037) + 1;
        }
        v1045 = objc_msgSend_vectorWithX_Y_(MEMORY[0x1E4F1E080], v1038, v1039, v1040, v1041, v1043, (v1036 + (double)(v1044 >> 1)) / (float)SHIDWORD(v1037));
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1046, (uint64_t)v1045, @"inputVignetteCenter", v1047);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
LABEL_322:
    v969 = (std::__shared_weak_count *)v1394[0];
    if (!v1394[0]) {
      goto LABEL_324;
    }
    goto LABEL_323;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
  sub_1DDAC81CC(__p, v1404);
  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  if (v1404[0])
  {
    __p[1] = 0;
    __p[0] = 0;
    *(void *)&long long v1412 = 0;
    sub_1DDACB39C((char *)__p, *((long long **)v1404[0] + 162), *((long long **)v1404[0] + 163), (uint64_t)(*((void *)v1404[0] + 163) - *((void *)v1404[0] + 162)) >> 4);
    v942 = __p[1];
    v943 = __p[0];
    int64_t v944 = (char *)__p[1] - (char *)__p[0];
    objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v945, (char *)__p[1] - (char *)__p[0], v946, v947);
    id v948 = objc_claimAutoreleasedReturnValue();
    v953 = (float *)objc_msgSend_mutableBytes(v948, v949, v950, v951, v952);
    unint64_t v956 = v944 >> 4;
    if (v942 != v943)
    {
      if (v956 <= 1) {
        uint64_t v957 = 1;
      }
      else {
        uint64_t v957 = v956;
      }
      v958 = (double *)((char *)__p[0] + 8);
      do
      {
        double v959 = *v958;
        v958 += 2;
        float v960 = 100.0 / v959;
        *v953++ = v960;
        --v957;
      }
      while (v957);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v7, v954, (uint64_t)v948, @"inputVignetteTableData", v955);
    uint64_t v964 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v961, v956, v962, v963);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v965, (uint64_t)v964, @"inputVignetteTableDataSize", v966);

    objc_msgSend_setObject_forKeyedSubscript_(v7, v967, (uint64_t)&unk_1F39AED08, @"inputVignetteTableExecute", v968);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v969 = (std::__shared_weak_count *)v1404[1];
  if (v1404[1]) {
LABEL_323:
  }
    sub_1DDA18310(v969);
LABEL_324:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2480))(a1))
  {
    __p[0] = 0;
    v1404[0] = 0;
    (*(void (**)(uint64_t, void **, void **))(*(void *)a1 + 2664))(a1, __p, v1404);
    uint64_t v1052 = objc_msgSend_vectorWithX_Y_(MEMORY[0x1E4F1E080], v1048, v1049, v1050, v1051, *(double *)v1404, *(double *)__p);
    objc_msgSend_setObject_forKeyedSubscript_(v7, v1053, (uint64_t)v1052, @"inputNoiseModel", v1054);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2712))(a1)) {
    objc_msgSend_setObject_forKeyedSubscript_(v7, v1055, (uint64_t)&unk_1F39AED38, @"inputGamutMapMax", v1056);
  }
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) >= 9
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(__p, a1);
    sub_1DDAC8028(__p, &v1395);
    if (__p[1]) {
      sub_1DDA18310((std::__shared_weak_count *)__p[1]);
    }
    if (v1395)
    {
      if (sub_1DDA9CB0C(v1395))
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 296))(&v1393, a1, 5000);
        if (v1393)
        {
          v1060 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v1057, *((unsigned int *)v1393 + 4), v1058, v1059);
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1061, (uint64_t)v1060, @"inputOrientation", v1062);
        }
        sub_1DDA9CB34((uint64_t)v1395, (uint64_t)__p);
        uint64_t v1066 = objc_msgSend_numberWithInt_(NSNumber, v1063, LODWORD(__p[0]), v1064, v1065);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1067, (uint64_t)v1066, @"inputMapPointsV", v1068);

        v1072 = objc_msgSend_numberWithInt_(NSNumber, v1069, HIDWORD(__p[0]), v1070, v1071);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1073, (uint64_t)v1072, @"inputMapPointsH", v1074);

        uint64_t v1079 = objc_msgSend_numberWithDouble_(NSNumber, v1075, v1076, v1077, v1078, *(double *)&__p[1]);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1080, (uint64_t)v1079, @"inputMapSpacingV", v1081);

        uint64_t v1086 = objc_msgSend_numberWithDouble_(NSNumber, v1082, v1083, v1084, v1085, *(double *)&v1412);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1087, (uint64_t)v1086, @"inputMapSpacingH", v1088);

        uint64_t v1093 = objc_msgSend_numberWithDouble_(NSNumber, v1089, v1090, v1091, v1092, *((double *)&v1412 + 1));
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1094, (uint64_t)v1093, @"inputMapOriginV", v1095);

        v1100 = objc_msgSend_numberWithDouble_(NSNumber, v1096, v1097, v1098, v1099, *(double *)v1413);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1101, (uint64_t)v1100, @"inputMapOriginH", v1102);

        v1106 = objc_msgSend_numberWithInt_(NSNumber, v1103, DWORD2(v1413[0]), v1104, v1105);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1107, (uint64_t)v1106, @"inputMapPointsN", v1108);

        *(float64x2_t *)v1404 = vcvtq_f64_f32(*(float32x2_t *)((char *)v1413 + 12));
        float64x2_t v1405 = vcvtq_f64_f32(*(float32x2_t *)((char *)&v1413[1] + 4));
        *(double *)&long long v1406 = *((float *)&v1413[1] + 3);
        uint64_t v1111 = objc_msgSend_vectorWithValues_count_(MEMORY[0x1E4F1E080], v1109, (uint64_t)v1404, 5, v1110);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1112, (uint64_t)v1111, @"inputWeights", v1113);
        v1116 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v1114, (uint64_t)v1416[0], (char *)v1416[1] - (char *)v1416[0], v1115);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1117, (uint64_t)v1116, @"inputGainData", v1118);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v1119, (uint64_t)&unk_1F39AED08, @"inputStrength", v1120);
        int v1126 = BYTE12(v1414);
        if (BYTE12(v1414))
        {
          LODWORD(v1125) = DWORD2(v1414);
          uint64_t v1127 = objc_msgSend_numberWithFloat_(NSNumber, v1121, v1122, v1123, v1124, v1125);
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1128, (uint64_t)v1127, @"inputGamma", v1129);
        }
        else
        {
          uint64_t v1127 = &unk_1F39B4D30;
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1121, (uint64_t)&unk_1F39B4D30, @"inputGamma", v1124);
        }
        if (v1126) {

        }
        if (v1416[0])
        {
          v1416[1] = v1416[0];
          operator delete(v1416[0]);
        }
        if (v1394[0]) {
          sub_1DDA18310((std::__shared_weak_count *)v1394[0]);
        }
      }
      if (v1395 && sub_1DDA9D93C((uint64_t)v1395))
      {
        uint64_t v1130 = (void *)MEMORY[0x1E4F1E080];
        sub_1DDA9D9B8((uint64_t)v1395, __p);
        double v1131 = __p[0];
        sub_1DDA9D9B8((uint64_t)v1395, v1404);
        uint64_t v1134 = objc_msgSend_vectorWithValues_count_(v1130, v1132, (uint64_t)v1131, ((char *)v1404[1] - (char *)v1404[0]) >> 3, v1133);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1135, (uint64_t)v1134, @"inputReferencePoints", v1136);

        if (v1404[0])
        {
          v1404[1] = v1404[0];
          operator delete(v1404[0]);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v1137 = (void *)MEMORY[0x1E4F1E080];
        sub_1DDA9DA68((uint64_t)v1395, __p);
        uint64_t v1138 = __p[0];
        sub_1DDA9DA68((uint64_t)v1395, v1404);
        uint64_t v1141 = objc_msgSend_vectorWithValues_count_(v1137, v1139, (uint64_t)v1138, ((char *)v1404[1] - (char *)v1404[0]) >> 3, v1140);
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1142, (uint64_t)v1141, @"inputOutputPoints", v1143);

        if (v1404[0])
        {
          v1404[1] = v1404[0];
          operator delete(v1404[0]);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
    if (v1396) {
      sub_1DDA18310(v1396);
    }
  }
  id v1144 = v7;
  if (v1398)
  {
    uint64_t v1399 = v1398;
    operator delete(v1398);
  }
  if (v1401) {
    sub_1DDA18310(v1401);
  }

  return v1144;
}

void sub_1DDAC6EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  uint64_t v40 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v40;
    operator delete(v40);
  }
  uint64_t v41 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v41;
    operator delete(v41);
  }
  uint64_t v42 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v42;
    operator delete(v42);
  }
  if (STACK[0x220]) {
    sub_1DDA18310((std::__shared_weak_count *)STACK[0x220]);
  }
  uint64_t v43 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v43;
    operator delete(v43);
  }
  if (STACK[0x2A8]) {
    sub_1DDA18310((std::__shared_weak_count *)STACK[0x2A8]);
  }

  _Unwind_Resume(a1);
}

double sub_1DDAC7D5C(double a1, uint64_t a2, double **a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  unint64_t v6 = v5 - *a3;
  uint64_t v7 = *a4;
  if (v6 != (a4[1] - *a4) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v5 == v4) {
    return *(double *)(v7 + 8 * v6 - 8);
  }
  unint64_t v8 = v5 - *a3;
  double v9 = *a3;
  do
  {
    unint64_t v10 = v8 >> 1;
    uint64_t v11 = &v9[v8 >> 1];
    double v13 = *v11;
    uint64_t v12 = v11 + 1;
    v8 += ~(v8 >> 1);
    if (v13 > a1) {
      unint64_t v8 = v10;
    }
    else {
      double v9 = v12;
    }
  }
  while (v8);
  unint64_t v14 = v9 - v4;
  if (v14 >= v6) {
    return *(double *)(v7 + 8 * v6 - 8);
  }
  if (v9 == v4) {
    return *(double *)v7;
  }
  if (v6 >= v14) {
    unint64_t v6 = v9 - v4;
  }
  uint64_t v15 = 8 * v6 - 8;
  double v16 = *(double *)((char *)v4 + v15);
  double v17 = vabdd_f64(v4[v6], v16);
  if (v17 < 0.000000001) {
    double v17 = 0.000000001;
  }
  double v18 = fmin(fmax(vabdd_f64(a1, v16) / v17, 0.0), 1.0);
  return *(double *)(v7 + 8 * v6) * v18 + *(double *)(v7 + v15) * (1.0 - v18);
}

void sub_1DDAC7E88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAC7E9C@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  double v2 = a1;
  double result = *a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F395E8C8, 0)) != 0)
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    double v2 = a2;
  }
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1DDAC7F20@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  double v2 = a1;
  double result = *a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F3960578, 0)) != 0)
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    double v2 = a2;
  }
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1DDAC7FA4@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  double v2 = a1;
  double result = *a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F395DC28, 0)) != 0)
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    double v2 = a2;
  }
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1DDAC8028@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  double v2 = a1;
  double result = *a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F3961640, 0)) != 0)
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    double v2 = a2;
  }
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1DDAC80AC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395A728, (const struct __class_type_info *)&unk_1F397B960, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_1DDAC813C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(void **)a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395A728, (const struct __class_type_info *)&unk_1F3968F40, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_1DDAC81CC@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  double v2 = a1;
  double result = *a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F395F388, 0)) != 0)
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    double v2 = a2;
  }
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1DDAC8250@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  double v2 = a1;
  double result = *a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F3968228, (const struct __class_type_info *)&unk_1F398F2C0, 0)) != 0)
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    double v2 = a2;
  }
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1DDAC82D4@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  double v2 = a1;
  double result = *a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F397A9E8, 0)) != 0)
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    double v2 = a2;
  }
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

double sub_1DDAC8358(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v6 = a6;
  if (a6 >= 0.00001)
  {
    objc_msgSend_function(*(void **)(a1 + 32), a2, a3, a4, a5);
    uint64_t v7 = (double (**)(double))objc_claimAutoreleasedReturnValue();
    double v6 = v7[2](v6) * v6;
  }
  return v6;
}

void sub_1DDAC83BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDAC83CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v7 = 1.0;
  if (a6 >= 0.00001)
  {
    objc_msgSend_inverse(*(void **)(a1 + 32), a2, a3, a4, a5);
    unint64_t v8 = (double (**)(double))objc_claimAutoreleasedReturnValue();
    double v7 = v8[2](a6) / a6;
  }
  return v7;
}

void sub_1DDAC8434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDAC8444(uint64_t a1)
{
  double v2 = (*(void (**)(uint64_t))(*(void *)a1 + 2752))(a1);
  if (sub_1DDA2E5A8(a1))
  {
    double v7 = objc_msgSend_array(MEMORY[0x1E4F1C978], v3, v4, v5, v6);
  }
  else
  {
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = sub_1DDAC8660;
    uint64_t v17[3] = &unk_1E6D05230;
    v17[4] = a1;
    unint64_t v8 = (void *)MEMORY[0x1E01C46E0](v17);
    int v9 = sub_1DDA2E598(a1);
    int v10 = sub_1DDA2E5A0(a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v12, a1);
    (*(void (**)(void **__return_ptr))(*(void *)v12 + 608))(v14);
    double v7 = sub_1DDA18C54(1, v2, v9, v10, v14, v8);
    double v18 = (void **)&v16;
    sub_1DDA18270(&v18);
    double v18 = (void **)&v15;
    sub_1DDA18270(&v18);
    double v18 = (void **)v14;
    sub_1DDA18270(&v18);
    if (v13) {
      sub_1DDA18310(v13);
    }
  }

  return v7;
}

void sub_1DDAC861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  sub_1DDA19658((void **)va);
  if (a4) {
    sub_1DDA18310(a4);
  }

  _Unwind_Resume(a1);
}

id sub_1DDAC8660(uint64_t a1)
{
  uint64_t v1 = (*(void (**)(void))(**(void **)(a1 + 32) + 616))(*(void *)(a1 + 32));

  return v1;
}

id sub_1DDAC86B8(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v2, v3, v4, v5);
  double v7 = sub_1DDB10E40(0);
  objc_msgSend_addObject_(v6, v8, (uint64_t)v7, v9, v10);

  uint64_t v11 = sub_1DDB10E40(1);
  objc_msgSend_addObject_(v6, v12, (uint64_t)v11, v13, v14);

  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2152))(a1))
  {
    sub_1DDB10E40(2);
  }
  else
  {
    uint64_t v19 = sub_1DDB10E40(2);
    objc_msgSend_addObject_(v6, v20, (uint64_t)v19, v21, v22);

    sub_1DDB10E40(3);
  uint64_t v15 = };
  objc_msgSend_addObject_(v6, v16, (uint64_t)v15, v17, v18);

  return v6;
}

void sub_1DDAC8840(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

BOOL sub_1DDAC8888(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v8, a1);
  uint64_t v2 = v8;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1DDAC8D80;
  v7[3] = &unk_1E6D05250;
  v7[4] = a1;
  BOOL v4 = sub_1DDAC8A08(v2, @"applyLensCorrection", v3, v7);
  if (v9) {
    sub_1DDA18310(v9);
  }
  return v4;
}

void sub_1DDAC89E0(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDAC8A08(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  sub_1DDAB6A18(v7, a3, &__p);
  uint64_t v9 = (uint64_t **)(a1 + 24);
  uint64_t v10 = sub_1DDA2A530(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_1DDACB8B4;
    _DWORD v29[3] = &unk_1E6D051C0;
    uint64_t v13 = (uint64_t (**)(void))v8;
    id v30 = v13;
    sub_1DDB657E4(a1, v7, v29, &p_p);
    uint64_t v18 = (long long *)p_p;
    if (p_p)
    {
      uint64_t v19 = sub_1DDB67AB8((uint64_t)p_p, v14, v15, v16, v17);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v12 = objc_msgSend_BOOLValue(v19, v20, v21, v22, v23);
    }
    else
    {
      int v12 = 0;
    }
    if (v34) {
      sub_1DDA18310(v34);
    }

    if (!v18) {
      int v12 = v13[2](v13);
    }
    p_p = &__p;
    uint64_t v24 = sub_1DDAB6C70(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_p);
    uint64_t v25 = (void (**)(uint64_t, void, std::string **, void, void))(v24 + 7);
    v32[1] = (uint64_t (*)(void, void, void, void, void))v12;
    v32[0] = (uint64_t (*)(void, void, void, void, void))sub_1DDACB94C;
    if (v32 != (uint64_t (**)(void, void, void, void, void))(v24 + 7))
    {
      uint64_t v26 = *v25;
      if (*v25)
      {
        p_p = 0;
        uint64_t v34 = 0;
        v26(2, v25, &p_p, 0, 0);
        v32[0](2, v32, v25, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(void, void, void, void, void), void, void))p_p)(2, &p_p, v32, 0, 0);
        sub_1DDAB6E58((uint64_t (**)(void, void, void, void, void))&p_p);
      }
      else
      {
        *((unsigned char *)v24 + 64) = v12;
        v24[7] = (uint64_t)sub_1DDACB94C;
        v32[0] = 0;
      }
    }
    sub_1DDAB6E58(v32);
  }
  else
  {
    uint64_t v11 = (unsigned __int8 *)sub_1DDACB900((uint64_t (**)(uint64_t, void, void, void, void *))v10 + 7);
    if (!v11) {
      sub_1DDAB6C00();
    }
    int v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v12 != 0;
}

void sub_1DDAC8CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  __cxa_free_exception(v28);

  if (a26) {
    sub_1DDA18310(a26);
  }

  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDAC8D80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 128))();
}

uint64_t sub_1DDAC8DA8(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDAB5FB8(v2, @"lensCorrectionFilter", v3, &unk_1F3968098);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDAC8E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAC8E6C()
{
  return 0;
}

void sub_1DDAC8E74(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v4 = v6;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  sub_1DDAB6440(v4, @"lensCorrectionParameters", v5, &unk_1F39680B8, a2);
  if (v7) {
    sub_1DDA18310(v7);
  }
}

void sub_1DDAC8F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAC8F40(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1DDAC8F4C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDAC9010(v2, @"lensVignetteCorrectionFilter", v3, &unk_1F39680D8);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDAC8FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAC9010(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  sub_1DDAB6A18(v7, a3, &__p);
  uint64_t v9 = (uint64_t **)(a1 + 24);
  uint64_t v10 = sub_1DDA2A530(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_1DDACBA2C;
    _DWORD v29[3] = &unk_1E6D051C0;
    uint64_t v13 = (uint64_t (**)(void))v8;
    id v30 = v13;
    sub_1DDB657E4(a1, v7, v29, &p_p);
    uint64_t v18 = (long long *)p_p;
    if (p_p)
    {
      uint64_t v19 = sub_1DDB67AB8((uint64_t)p_p, v14, v15, v16, v17);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (v34) {
      sub_1DDA18310(v34);
    }

    if (!v18) {
      uint64_t v12 = v13[2](v13);
    }
    p_p = &__p;
    uint64_t v24 = sub_1DDAB6C70(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_p);
    uint64_t v25 = (void (**)(uint64_t, void, std::string **, void, void))(v24 + 7);
    v32[1] = (uint64_t (*)(void, void, void, void, void))v12;
    v32[0] = (uint64_t (*)(void, void, void, void, void))sub_1DDACBAC4;
    if (v32 != (uint64_t (**)(void, void, void, void, void))(v24 + 7))
    {
      uint64_t v26 = *v25;
      if (*v25)
      {
        p_p = 0;
        uint64_t v34 = 0;
        v26(2, v25, &p_p, 0, 0);
        v32[0](2, v32, v25, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(void, void, void, void, void), void, void))p_p)(2, &p_p, v32, 0, 0);
        sub_1DDAB6E58((uint64_t (**)(void, void, void, void, void))&p_p);
      }
      else
      {
        *((_DWORD *)v24 + 16) = v12;
        v24[7] = (uint64_t)sub_1DDACBAC4;
        v32[0] = 0;
      }
    }
    sub_1DDAB6E58(v32);
  }
  else
  {
    uint64_t v11 = (unsigned int *)sub_1DDACBA78((uint64_t (**)(uint64_t, void, void, void *, void *))v10 + 7);
    if (!v11) {
      sub_1DDAB6C00();
    }
    uint64_t v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v12;
}

void sub_1DDAC92F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  __cxa_free_exception(v28);

  if (a26) {
    sub_1DDA18310(a26);
  }

  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDAC9380()
{
  return 0;
}

BOOL sub_1DDAC9388(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v8, a1);
  uint64_t v2 = v8;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1DDAC9508;
  v7[3] = &unk_1E6D05250;
  v7[4] = a1;
  BOOL v4 = sub_1DDAC8A08(v2, @"applyGainMap", v3, v7);
  if (v9) {
    sub_1DDA18310(v9);
  }
  return v4;
}

void sub_1DDAC94E0(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAC9508(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 128))();
}

uint64_t sub_1DDAC9530(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v8, a1);
  uint64_t v2 = v8;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1DDAC9A20;
  v7[3] = &unk_1E6D05178;
  v7[4] = a1;
  uint64_t v4 = sub_1DDAC96B0(v2, @"gainMapFilter", v3, v7);
  if (v9) {
    sub_1DDA18310(v9);
  }
  return v4;
}

void sub_1DDAC9688(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAC96B0(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  sub_1DDAB6A18(v7, a3, &__p);
  uint64_t v9 = (uint64_t **)(a1 + 24);
  uint64_t v10 = sub_1DDA2A530(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_1DDACBBA4;
    _DWORD v29[3] = &unk_1E6D051C0;
    uint64_t v13 = (uint64_t (**)(void))v8;
    id v30 = v13;
    sub_1DDB657E4(a1, v7, v29, &p_p);
    uint64_t v18 = (long long *)p_p;
    if (p_p)
    {
      uint64_t v19 = sub_1DDB67AB8((uint64_t)p_p, v14, v15, v16, v17);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (v34) {
      sub_1DDA18310(v34);
    }

    if (!v18) {
      uint64_t v12 = v13[2](v13);
    }
    p_p = &__p;
    uint64_t v24 = sub_1DDAB6C70(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_p);
    uint64_t v25 = (void (**)(uint64_t, void, std::string **, void, void))(v24 + 7);
    v32[1] = (uint64_t (*)(void, void, void, void, void))v12;
    v32[0] = (uint64_t (*)(void, void, void, void, void))sub_1DDACBC3C;
    if (v32 != (uint64_t (**)(void, void, void, void, void))(v24 + 7))
    {
      uint64_t v26 = *v25;
      if (*v25)
      {
        p_p = 0;
        uint64_t v34 = 0;
        v26(2, v25, &p_p, 0, 0);
        v32[0](2, v32, v25, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(void, void, void, void, void), void, void))p_p)(2, &p_p, v32, 0, 0);
        sub_1DDAB6E58((uint64_t (**)(void, void, void, void, void))&p_p);
      }
      else
      {
        *((_DWORD *)v24 + 16) = v12;
        v24[7] = (uint64_t)sub_1DDACBC3C;
        v32[0] = 0;
      }
    }
    sub_1DDAB6E58(v32);
  }
  else
  {
    uint64_t v11 = (unsigned int *)sub_1DDACBBF0((uint64_t (**)(uint64_t, void, void, void *, void *))v10 + 7);
    if (!v11) {
      sub_1DDAB6C00();
    }
    uint64_t v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v12;
}

void sub_1DDAC9990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  __cxa_free_exception(v28);

  if (a26) {
    sub_1DDA18310(a26);
  }

  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDAC9A20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 128))(*(void *)(a1 + 32));
}

void sub_1DDAC9A5C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_1DDAC9A68(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v4 = v6;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  sub_1DDAB6440(v4, @"chromaticAberrationParameters", v5, &unk_1F39680F8, a2);
  if (v7) {
    sub_1DDA18310(v7);
  }
}

void sub_1DDAC9B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAC9B34(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1DDAC9B40(uint64_t a1)
{
  if (sub_1DDA2E588(a1)) {
    return 0;
  }
  int v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 2784);

  return v3(a1);
}

uint64_t sub_1DDAC9BB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2800))();
}

id sub_1DDAC9BE0(void *a1)
{
  v85[3] = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EAB8B1C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EAB8B1C0))
  {
    byte_1EAB8B1B8 = 1;
    byte_1EAB8B1BC = 1;
    __cxa_guard_release(&qword_1EAB8B1C0);
  }
  sub_1DDA1B448(&v81, a1 + 1);
  v79[0] = MEMORY[0x1E4F143A8];
  v79[1] = 3321888768;
  v79[2] = sub_1DDACA21C;
  v79[3] = &unk_1F3968148;
  v79[4] = v81;
  int v80 = v82;
  if (v82) {
    atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = (void *)MEMORY[0x1E01C46E0](v79);
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 408))(a1);
  unint64_t v4 = sub_1DDA2FDD4((uint64_t)a1);
  uint64_t v8 = v4;
  uint64_t v9 = HIDWORD(v4);
  if (byte_1EAB8B1B8) {
    int v10 = 0x2000;
  }
  else {
    int v10 = 0;
  }
  if (v10 < (int)v4)
  {
    do
      uint64_t v8 = ((int)v8 >> 1) & 0xFFFFFFFC;
    while ((int)v8 > v10);
  }
  if (byte_1EAB8B1BC) {
    int v11 = 0x2000;
  }
  else {
    int v11 = 0;
  }
  if (v11 < SHIDWORD(v4))
  {
    do
      uint64_t v9 = ((int)v9 >> 1) & 0xFFFFFFFC;
    while ((int)v9 > v11);
  }
  uint64_t v12 = (void *)MEMORY[0x1E4F1CA60];
  v84[0] = *MEMORY[0x1E4F1E3E8];
  uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v5, v8, v6, v7);
  v83[0] = v13;
  uint64_t v17 = objc_msgSend_numberWithInt_(NSNumber, v14, v9, v15, v16);
  v83[1] = v17;
  uint64_t v20 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v18, (uint64_t)v83, 2, v19);
  uint64_t v21 = *MEMORY[0x1E4F1E3D8];
  v85[0] = v20;
  v85[1] = @"CRawImage";
  uint64_t v22 = *MEMORY[0x1E4F1E328];
  v84[1] = v21;
  v84[2] = v22;
  v85[2] = MEMORY[0x1E4F1CC38];
  uint64_t v24 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v23, (uint64_t)v85, (uint64_t)v84, 3);
  uint64_t v28 = objc_msgSend_dictionaryWithDictionary_(v12, v25, (uint64_t)v24, v26, v27);

  sub_1DDA2FFDC((uint64_t)a1);
  if (v78 != v77)
  {
    uint64_t v35 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v29, (v78 - (unsigned char *)v77) >> 1, v30, v31);
    uint64_t v36 = (unsigned __int16 *)v77;
    unint64_t v37 = 0;
    do
    {
      uint64_t v38 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v32, v36[v37], v33, v34);
      objc_msgSend_setObject_atIndexedSubscript_(v35, v39, (uint64_t)v38, v37, v40);

      ++v37;
      uint64_t v36 = (unsigned __int16 *)v77;
    }
    while (v37 < (v78 - (unsigned char *)v77) >> 1);
    objc_msgSend_setObject_forKeyedSubscript_(v28, v32, (uint64_t)v35, *MEMORY[0x1E4F1E3F0], v34);
  }
  sub_1DDA30090((uint64_t)a1);
  if (v76 != __p)
  {
    uint64_t v47 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v41, (v76 - (unsigned char *)__p) >> 1, v42, v43);
    uint64_t v48 = (unsigned __int16 *)__p;
    unint64_t v49 = 0;
    do
    {
      uint64_t v50 = objc_msgSend_numberWithUnsignedShort_(NSNumber, v44, v48[v49], v45, v46);
      objc_msgSend_setObject_atIndexedSubscript_(v47, v51, (uint64_t)v50, v49, v52);

      ++v49;
      uint64_t v48 = (unsigned __int16 *)__p;
    }
    while (v49 < (v76 - (unsigned char *)__p) >> 1);
    objc_msgSend_setObject_forKeyedSubscript_(v28, v44, (uint64_t)v47, *MEMORY[0x1E4F1E3E0], v46);
  }
  id v53 = objc_alloc(MEMORY[0x1E4F1E050]);
  uint64_t v54 = (*(uint64_t (**)(void *))(*a1 + 2152))(a1);
  int v55 = v54;
  uint64_t v57 = sub_1DDBEE610(v54);
  uint64_t v58 = v3 >> 32;
  if (v55) {
    uint64_t v59 = objc_msgSend_initWithImageProvider_width_height_format_colorSpace_options_(v53, v56, (uint64_t)v2, (int)v3, v58, *MEMORY[0x1E4F1E300], v57, v28);
  }
  else {
    uint64_t v59 = objc_msgSend_initWithImageProvider_width_height_format_colorSpace_options_(v53, v56, (uint64_t)v2, (int)v3, v58, *MEMORY[0x1E4F1E290], v57, v28);
  }
  uint64_t v60 = (void *)v59;
  uint64_t v61 = (*(uint64_t (**)(void *))(*a1 + 432))(a1);
  uint64_t v63 = v62;
  CGAffineTransformMakeTranslation(&v74, (double)-(int)v61, (double)-((v3 - (((v62 & 0xFFFFFFFF00000000) + v61) & 0xFFFFFFFF00000000)) >> 32));
  uint64_t v67 = objc_msgSend_imageByApplyingTransform_(v60, v64, (uint64_t)&v74, v65, v66);

  uint64_t v72 = objc_msgSend_imageByCroppingToRect_(v67, v68, v69, v70, v71, 0.0, 0.0, (double)(int)v63, (double)SHIDWORD(v63));

  if (__p)
  {
    uint64_t v76 = __p;
    operator delete(__p);
  }
  if (v77)
  {
    uint64_t v78 = v77;
    operator delete(v77);
  }

  if (v80) {
    sub_1DDA18310(v80);
  }
  if (v82) {
    sub_1DDA18310(v82);
  }

  return v72;
}

void sub_1DDACA12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }

  if (a27) {
    sub_1DDA18310(a27);
  }
  if (a29) {
    sub_1DDA18310(a29);
  }
  _Unwind_Resume(a1);
}

uint64_t (***sub_1DDACA21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(void)
{
  double result = (uint64_t (***)(void))sub_1DDA2D8DC(*(void *)(a1 + 32));
  if (result)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(NSObject **)(v15 + 296);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3321888768;
    v18[2] = sub_1DDACA30C;
    uint64_t v18[3] = &unk_1F3968118;
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 40);
    v18[4] = v15;
    uint64_t v19 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = a2;
    uint64_t v21 = a4;
    uint64_t v22 = a5;
    uint64_t v23 = a6;
    uint64_t v24 = a7;
    uint64_t v25 = a3;
    dispatch_sync(v16, v18);
    if (v19) {
      sub_1DDA18310(v19);
    }
    return sub_1DDA2D8CC(*(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1DDACA30C(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[6];
  unint64_t v4 = a1[9];
  unint64_t v5 = a1[10];
  sub_1DDACB494(&v7, a1[7], a1[8]);
  sub_1DDACB494(&v8, v4, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, void))(*(void *)v2 + 368))(v2, v3, &v7, a1[11]);
}

void sub_1DDACA3AC(void *a1)
{
}

uint64_t sub_1DDACA3B8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1DDACA3D4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_1DDA18310(v1);
  }
}

id sub_1DDACA3E4(void *a1)
{
  void v22[3] = *MEMORY[0x1E4F143B8];
  if ((*(int (**)(void *))(*a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDA1B448(&v17, a1 + 1);
  sub_1DDACA6FC(&v17, &v19);
  if (v18) {
    sub_1DDA18310(v18);
  }
  if (!v19)
  {
    uint64_t v14 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v14, "RawCameraException");
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3321888768;
  void v15[2] = sub_1DDACA780;
  v15[3] = &unk_1F3968178;
  v15[4] = v19;
  uint64_t v16 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = (void *)MEMORY[0x1E01C46E0](v15);
  (*(void (**)(void *))(*a1 + 432))(a1);
  uint64_t v4 = v3;
  id v5 = objc_alloc(MEMORY[0x1E4F1E050]);
  uint64_t v6 = sub_1DDBEE610(v5);
  uint64_t v7 = *MEMORY[0x1E4F1E3D8];
  v21[0] = *MEMORY[0x1E4F1E3E8];
  v21[1] = v7;
  v22[0] = &unk_1F39AED68;
  v22[1] = @"CRawImageFuji";
  v21[2] = *MEMORY[0x1E4F1E328];
  v22[2] = MEMORY[0x1E4F1CC38];
  uint64_t v9 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v8, (uint64_t)v22, (uint64_t)v21, 3);
  int v11 = objc_msgSend_initWithImageProvider_width_height_format_colorSpace_options_(v5, v10, (uint64_t)v2, (int)v4, v4 >> 32, *MEMORY[0x1E4F1E300], v6, v9);

  if (v16) {
    sub_1DDA18310(v16);
  }
  if (v20) {
    sub_1DDA18310(v20);
  }

  return v11;
}

void sub_1DDACA694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a15) {
    sub_1DDA18310(a15);
  }
  if (a19) {
    sub_1DDA18310(a19);
  }
  _Unwind_Resume(a1);
}

void *sub_1DDACA6FC@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  double result = *a1;
  if (result
    && (double result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395CB28, (const struct __class_type_info *)&unk_1F3970440, 0)) != 0)
  {
    id v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1DDACA780(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  sub_1DDACB4EC(v34, &unk_1F39AED50);
  sub_1DDA2E598(*(void *)(a1 + 32));
  long long v33 = 0u;
  memset(v32, 0, sizeof(v32));
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 32) + 2688))(v32);
  *(void *)((char *)&v33 + 4) = 0x3F8000003F800000;
  if (sub_1DDA2D8DC(*(void *)(a1 + 32)))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 376))(&v31);
    sub_1DDACB494(v29, a4, a5);
    sub_1DDACB494(v30, a6, a7);
    v18.i64[0] = (v29[0] - 8) | ((unint64_t)(v29[1] - 8) << 32);
    v18.i64[1] = (v30[0] + 16) | ((unint64_t)(v30[1] + 16) << 32);
    sub_1DDAA7CF0(v31, (unsigned int *)&v18, &v28);
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    uint64_t v13 = *(void *)(v28 + 48);
    v14.i64[0] = v13;
    v14.i64[1] = HIDWORD(v13);
    int8x16_t v18 = vextq_s8(v14, v14, 8uLL);
    uint64_t v15 = sub_1DDAA7CC0(v28);
    uint64_t v16 = 2 * *(unsigned int *)(v28 + 56);
    uint64_t v19 = v15;
    uint64_t v20 = v16;
    unint64_t v21 = a6;
    unint64_t v22 = a7;
    uint64_t v23 = 6 * a6;
    int64x2_t v24 = vdupq_n_s64(8uLL);
    LODWORD(v25) = 16;
    LODWORD(v27) = -1;
    operator new[]();
  }
  return sub_1DDACB5FC(v34, v12);
}

void sub_1DDACAAA0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  MEMORY[0x1E01C3DA0](v46, 0x1000C80BDFB0063);
  if (a42) {
    sub_1DDA18310(a42);
  }
  if (a46) {
    sub_1DDA18310(a46);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDACAA70);
}

void sub_1DDACAB20(_Unwind_Exception *a1, double a2)
{
  sub_1DDACB5FC((void *)(v2 - 96), a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDACAB64(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1DDACAB80(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_1DDA18310(v1);
  }
}

id sub_1DDACAB90(void *a1, int a2)
{
  uint64_t v4 = (void *)MEMORY[0x1E01C4510]();
  if (sub_1DDA2E598((uint64_t)a1)) {
    uint64_t v5 = sub_1DDA2E598((uint64_t)a1);
  }
  else {
    uint64_t v5 = 1;
  }
  int v6 = sub_1DDA2E5A0((uint64_t)a1);
  if ((*(int (**)(void *))(*a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(void **__return_ptr, void *))(*a1 + 160))(&v31, a1);
  uint64_t v7 = (*(void (**)(void *))(*(void *)v31 + 544))(v31);
  if (v32) {
    sub_1DDA18310(v32);
  }
  if (!v7)
  {
    int v8 = (void **)sub_1DDA1B448(&v36, a1 + 1);
    sub_1DDACA6FC(v8, &v31);
    if (v37) {
      sub_1DDA18310(v37);
    }
    if (v31) {
      sub_1DDACA3E4(a1);
    }
    else {
    uint64_t v7 = sub_1DDAC9BE0(a1);
    }
    if (v32) {
      sub_1DDA18310(v32);
    }
  }
  uint64_t v9 = (*(void (**)(void *, uint64_t))(*a1 + 2752))(a1, v5);
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = sub_1DDACB1D0;
  v35[3] = &unk_1E6D05230;
  v35[4] = a1;
  int v10 = (void *)MEMORY[0x1E01C46E0](v35);
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 160))(&v36, a1);
  (*(void (**)(void **__return_ptr))(*(void *)v36 + 608))(&v31);
  int v11 = sub_1DDA18C54(0, v9, v5, v6, (void **)&v31, v10);
  v38[0] = (void **)v34;
  sub_1DDA18270(v38);
  v38[0] = (void **)v33;
  sub_1DDA18270(v38);
  v38[0] = &v31;
  sub_1DDA18270(v38);
  if (v37) {
    sub_1DDA18310(v37);
  }
  (*(void (**)(void *))(*a1 + 528))(a1);
  uint64_t v15 = objc_msgSend_rcApplyFilters_withScaleFactor_(v7, v12, (uint64_t)v11, v13, v14);

  if (sub_1DDA2E5A8((uint64_t)a1))
  {
    (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 160))(&v36, a1);
    (*(void (**)(void **__return_ptr))(*(void *)v36 + 608))(&v31);
    uint64_t v16 = sub_1DDA18C54(1, v9, v5, v6, (void **)&v31, v10);

    v38[0] = (void **)v34;
    sub_1DDA18270(v38);
    v38[0] = (void **)v33;
    sub_1DDA18270(v38);
    v38[0] = &v31;
    sub_1DDA18270(v38);
    if (v37) {
      sub_1DDA18310(v37);
    }
    (*(void (**)(void *))(*a1 + 528))(a1);
    uint64_t v20 = objc_msgSend_rcApplyFilters_withScaleFactor_(v15, v17, v16, v18, v19);

    unint64_t v21 = (void *)v20;
    int v11 = (void *)v16;
  }
  else
  {
    unint64_t v21 = v15;
  }
  if (sub_1DDA2E598((uint64_t)a1) && !sub_1DDA2E5A8((uint64_t)a1))
  {
    long long v26 = v21;
    if (!a2) {
      goto LABEL_31;
    }
  }
  else
  {
    CFTypeRef v22 = sub_1DDA2E5C8((uint64_t)a1);
    long long v26 = objc_msgSend_imageByTaggingWithColorSpace_(v21, v23, (uint64_t)v22, v24, v25);

    if (!a2) {
      goto LABEL_31;
    }
  }
  (*(void (**)(void **__return_ptr, void *))(*a1 + 160))(&v31, a1);
  sub_1DDA1B448(&v29, a1 + 1);
  sub_1DDB6D1CC(&v31, &v29);
  if (v30) {
    sub_1DDA18310(v30);
  }
  if (v32) {
    sub_1DDA18310(v32);
  }
LABEL_31:

  return v26;
}

void sub_1DDACB0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDACB1D0(uint64_t a1)
{
  uint64_t v1 = (*(void (**)(void))(**(void **)(a1 + 32) + 616))(*(void *)(a1 + 32));

  return v1;
}

void *sub_1DDACB228(void *a1)
{
  *a1 = &unk_1F39681B8;
  uint64_t v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[28];
  if (v3)
  {
    a1[29] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[19];
  if (v5)
  {
    a1[20] = v5;
    operator delete(v5);
  }
  int v6 = (void *)a1[15];
  if (v6)
  {
    a1[16] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[11];
  if (v7)
  {
    a1[12] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_1DDACB2E8(void *a1)
{
  sub_1DDACB228(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDACB320(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 120;
        int v6 = (void **)(v3 - 24);
        sub_1DDA9E7E4(&v6);
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1DDACB39C(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    double result = sub_1DDA197F4(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DDACB3F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDACB410(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DDA17F34(a1, a2);
    int v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DDACB478(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1DDACB494(_DWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3;
  unint64_t v7 = a2;
  sub_1DDA18488(&v5, &v7);
  *a1 = v5;
  sub_1DDA18488(&v5, &v6);
  a1[1] = v5;
  return a1;
}

void *sub_1DDACB4EC(void *a1, void *a2)
{
  id v3 = a2;
  sub_1DDA4D4A0(v4);
  unint64_t v6 = (std::__shared_weak_count *)v5[1];
  uint64_t v11 = *v5;
  double v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1DDA4C438(v3, &v11, a1);
  if (v12) {
    sub_1DDA18310(v12);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  int v10 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1DDACB5A4(v7);
  if (v10) {
    sub_1DDA18310(v10);
  }

  return a1;
}

void sub_1DDACB588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1DDACB5A4(double a1)
{
  sub_1DDA4D4A0(a1);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v5 = (std::__shared_weak_count *)v1[1];
  *uint64_t v1 = v4;
  v1[1] = v3;
  if (v5)
  {
    sub_1DDA18310(v5);
  }
}

void *sub_1DDACB5FC(void *a1, double a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(*a1 + 40);
  unint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1DDACB5A4(a2);
  if (v6) {
    sub_1DDA18310(v6);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    sub_1DDA18310(v4);
  }
  return a1;
}

id sub_1DDACB664(uint64_t *a1)
{
  int v5 = sub_1DDA49F48(0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      uint64_t v8 = v6;
      if (*(char *)(v6 + 23) < 0) {
        uint64_t v8 = *(void *)v6;
      }
      uint64_t v9 = objc_msgSend_stringWithUTF8String_(NSString, v2, v8, v3, v4);
      objc_msgSend_addObject_(v5, v10, (uint64_t)v9, v11, v12);

      v6 += 24;
    }
    while (v6 != v7);
  }
  uint64_t v13 = objc_msgSend_arrayWithArray_(MEMORY[0x1E4F1C978], v2, (uint64_t)v5, v3, v4);

  return v13;
}

void sub_1DDACB734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_1DDACB754(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    sub_1DDA25078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1DDACB818(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39681E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDACB838(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39681E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDACB88C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDACB8B4(uint64_t a1)
{
  uint64_t v1 = NSNumber;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return objc_msgSend_numberWithBool_(v1, v2, v3, v4, v5);
}

uint64_t (**sub_1DDACB900(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, MEMORY[0x1E4FBA378], &unk_1DDBFB2E8);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DDACB94C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = MEMORY[0x1E4FBA378];
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(unsigned char *)(a3 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a3 = sub_1DDACB94C;
      break;
    case 2:
      uint64_t result = 0;
      *(unsigned char *)(a3 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a3 = sub_1DDACB94C;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = sub_1DDAB6F70(a4, MEMORY[0x1E4FBA378]);
      }
      else {
        BOOL v8 = a5 == &unk_1DDBFB2E8;
      }
      if (v8) {
        uint64_t result = a2 + 8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_1DDACBA2C(uint64_t a1)
{
  uint64_t v1 = NSNumber;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return objc_msgSend_numberWithUnsignedInt_(v1, v2, v3, v4, v5);
}

uint64_t (**sub_1DDACBA78(uint64_t (**result)(uint64_t, void, void, void *, void *)))(uint64_t, void, void, void *, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void *, void *))(*result)(3, result, 0, &unk_1F3968238, &unk_1DDBFB34C);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *sub_1DDACBAC4(unsigned int a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = &unk_1F3968238;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = sub_1DDACBAC4;
      break;
    case 2:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = sub_1DDACBAC4;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = sub_1DDAB6F70(a4, (uint64_t)&unk_1F3968238);
      }
      else {
        BOOL v8 = a5 == &unk_1DDBFB34C;
      }
      if (v8) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_1DDACBBA4(uint64_t a1)
{
  uint64_t v1 = NSNumber;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return objc_msgSend_numberWithUnsignedInt_(v1, v2, v3, v4, v5);
}

uint64_t (**sub_1DDACBBF0(uint64_t (**result)(uint64_t, void, void, void *, void *)))(uint64_t, void, void, void *, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void *, void *))(*result)(3, result, 0, &unk_1F3968248, &unk_1DDBFB364);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *sub_1DDACBC3C(unsigned int a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = &unk_1F3968248;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = sub_1DDACBC3C;
      break;
    case 2:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = sub_1DDACBC3C;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = sub_1DDAB6F70(a4, (uint64_t)&unk_1F3968248);
      }
      else {
        BOOL v8 = a5 == &unk_1DDBFB364;
      }
      if (v8) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_1DDACBD1C(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 824))(a1) & 1) == 0)
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 832);
    uint64_t v3 = a1;
  }
  else
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 840);
    uint64_t v3 = a1;
  }
  return v2(v3);
}

uint64_t sub_1DDACBE1C()
{
  return 0;
}

uint64_t sub_1DDACBE24()
{
  return 4;
}

uint64_t sub_1DDACBE2C()
{
  return 1;
}

double sub_1DDACBE34()
{
  return 1.0;
}

double sub_1DDACBE3C()
{
  return 1.0;
}

uint64_t sub_1DDACBE44(uint64_t *a1)
{
  int v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 176))(a1);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(v3 + 872);
    uint64_t v5 = a1;
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(v3 + 880);
    uint64_t v5 = a1;
  }
  return v4(v5);
}

uint64_t sub_1DDACBF04(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 512))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDACBFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDACBFB8()
{
  return 0xFFFFLL;
}

uint64_t sub_1DDACBFC0(uint64_t a1)
{
  double v2 = (double)(unsigned __int16)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 864))(a1) - 5) * 0.9;
  return (unsigned __int16)llround(v2 * (*(double (**)(uint64_t))(*(void *)a1 + 848))(a1));
}

double sub_1DDACC068(double *a1)
{
  if (*((unsigned char *)a1 + 72)) {
    return a1[8];
  }
  double v2 = 65535.0;
  switch((*(unsigned int (**)(double *))(*(void *)a1 + 816))(a1))
  {
    case 0u:
      double v8 = (double)(*(unsigned int (**)(double *))(*(void *)a1 + 1136))(a1);
      double v2 = (*(double (**)(double *))(*(void *)a1 + 848))(a1) * v8;
      break;
    case 1u:
    case 2u:
      (*(void (**)(uint64_t *__return_ptr, double *))(*(void *)a1 + 400))(&v24, a1);
      if (v25) {
        sub_1DDA18310(v25);
      }
      uint64_t v4 = *((void *)a1 + 3);
      if (v4)
      {
        int v5 = sub_1DDAA6AC4(v4);
        int v6 = (*(uint64_t (**)(double *))(*(void *)a1 + 888))(a1);
        if (v6 <= v5) {
          int v7 = v5;
        }
        else {
          int v7 = v6;
        }
        double v2 = (double)v7;
      }
      break;
    case 3u:
      (*(void (**)(uint64_t *__return_ptr, double *))(*(void *)a1 + 400))(&v22, a1);
      if (v22)
      {
        __int16 v9 = (*(uint64_t (**)(double *))(*(void *)a1 + 864))(a1);
        signed int v10 = (*(uint64_t (**)(double *))(*(void *)a1 + 888))(a1);
        int v11 = (*(uint64_t (**)(double *))(*(void *)a1 + 120))(a1);
        unsigned __int16 v12 = v9 - 5;
        uint64_t v13 = v22;
        if (v11 > 2)
        {
          int v19 = *(_DWORD *)(v22 + 48);
          int v18 = *(_DWORD *)(v22 + 52);
          *(void *)&long long v26 = 0;
          sub_1DDA18218((_DWORD *)&v26 + 2, v18, v19);
          long long v21 = v26;
          unsigned int v20 = sub_1DDAA80C8(v13, (unsigned int *)&v21, v10, v12);
          if (!*((unsigned char *)a1 + 72)) {
            *((unsigned char *)a1 + 72) = 1;
          }
          double v2 = (double)v20;
        }
        else
        {
          int v15 = *(_DWORD *)(v22 + 48);
          int v14 = *(_DWORD *)(v22 + 52);
          *(void *)&long long v26 = 0;
          sub_1DDA18218((_DWORD *)&v26 + 2, v14, v15);
          long long v21 = v26;
          signed int v16 = sub_1DDAA7F94(v13, (int *)&v21, v12);
          if (v10 <= v16) {
            int v17 = v16;
          }
          else {
            int v17 = v10;
          }
          if (!*((unsigned char *)a1 + 72)) {
            *((unsigned char *)a1 + 72) = 1;
          }
          double v2 = (double)v17;
        }
        a1[8] = v2;
      }
      else
      {
        double v2 = 65535.0;
      }
      if (v23) {
        sub_1DDA18310(v23);
      }
      break;
    case 4u:
      double v2 = (double)(*(unsigned int (**)(double *))(*(void *)a1 + 864))(a1);
      break;
    default:
      return v2;
  }
  return v2;
}

void sub_1DDACC3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDACC408(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1144))();
}

void *sub_1DDACC434@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v6 = (*(double (**)(uint64_t))(*(void *)a1 + 896))(a1);
  return sub_1DDA25B2C(a2, 4uLL, &v6);
}

void sub_1DDACC508(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDACC51C(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 896))(a1);
  (*(void (**)(double **__return_ptr, uint64_t))(*(void *)a1 + 1016))(&v6, a1);
  if ((char *)v7 - (char *)v6 == 32)
  {
    int v3 = llround(v2) - llround(fmax(*v6, fmax(v6[1], fmax(v6[2], v6[3]))));
    if (v3 >= 0xFFFF) {
      unsigned __int16 v4 = -1;
    }
    else {
      unsigned __int16 v4 = v3;
    }
  }
  else
  {
    unsigned __int16 v4 = -1;
    if (!v6) {
      return v4;
    }
  }
  int v7 = v6;
  operator delete(v6);
  return v4;
}

void sub_1DDACC610(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 208))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v3, a1);
    (*(void (**)(void))(*(void *)v3 + 352))();
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 128))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v3, a1);
    (*(void (**)(void))(*(void *)v3 + 352))();
LABEL_6:
    if (v4) {
      sub_1DDA18310(v4);
    }
    return;
  }
  double v2 = *(void (**)(uint64_t))(*(void *)a1 + 1712);

  v2(a1);
}

void sub_1DDACC7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDACC814()
{
  return 0.0;
}

uint64_t sub_1DDACC81C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1760))();
}

uint64_t sub_1DDACC848(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 968);

  return v2(a1);
}

void sub_1DDACC908(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDACC91C()
{
  return 14;
}

uint64_t sub_1DDACC924()
{
  return 12;
}

uint64_t sub_1DDACC92C()
{
  return 9;
}

uint64_t sub_1DDACC934()
{
  return 0;
}

void sub_1DDACC940(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v1);
  (*(void (**)(void))(*(void *)v1 + 256))();
  if (v2) {
    sub_1DDA18310(v2);
  }
}

void sub_1DDACC9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDACC9F8(void *a1@<X0>, void **a2@<X8>)
{
  void (***v23)(_OWORD *__return_ptr, void *, uint64_t);
  uint64_t v24;
  double *v25;
  double *v26;
  unsigned char *v27;
  unsigned char *v28;
  void (***v29)(_OWORD *__return_ptr, void *, uint64_t);
  uint64_t v30;
  double *v31;
  char *v32;
  std::__shared_weak_count *v33;
  int64_t v34;
  double v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int32x4_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  void *v51;
  void *exception;
  void *v53;
  void *v54;
  void *__p;
  std::__shared_weak_count *v56;
  _OWORD v57[2];

  if ((*(int (**)(void *))(*a1 + 120))(a1) <= 6
    && (*(unsigned int (**)(void *))(*a1 + 120))(a1) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)&v57[0] = 0;
  sub_1DDA25B2C(a2, 4uLL, v57);
  switch((*(unsigned int (**)(void *))(*a1 + 960))(a1))
  {
    case 0u:
      goto LABEL_10;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      (*(void (**)(void *))(*a1 + 2144))(a1);
      unsigned __int16 v4 = (char *)a1[15];
      uint64_t v5 = a1[16];
      uint64_t v6 = v5 - (void)v4;
      if ((char *)v5 == v4)
      {
LABEL_10:
        (*(void (**)(_OWORD *__return_ptr, void *))(*a1 + 1128))(v57, a1);
        __int16 v9 = *(_WORD **)&v57[0];
        if (*((void *)&v57[0] + 1) - *(void *)&v57[0] <= 7uLL)
        {
          id v53 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](v53, "RawCameraException");
          __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LOWORD(v8) = **(_WORD **)&v57[0];
        double v10 = (double)v8;
        int v11 = (double *)*a2;
        *int v11 = v10;
        LOWORD(v10) = v9[1];
        double v12 = (double)*(unint64_t *)&v10;
        v11[1] = v12;
        LOWORD(v12) = v9[2];
        double v13 = (double)*(unint64_t *)&v12;
        v11[2] = v13;
        LOWORD(v13) = v9[3];
        v11[3] = (double)*(unint64_t *)&v13;
        goto LABEL_12;
      }
      if ((unint64_t)v6 >= 0x20 && a1 + 15 != a2) {
        sub_1DDA25BB0((char *)a2, v4, v5, v6 >> 3);
      }
      goto LABEL_19;
    case 0xAu:
    case 0xBu:
    case 0xDu:
      (*(void (**)(_OWORD *__return_ptr, void *))(*a1 + 1000))(v57, a1);
      int v14 = *(_WORD **)&v57[0];
      if (*((void *)&v57[0] + 1) - *(void *)&v57[0] == 32 && v57 != (_OWORD *)a2)
      {
        sub_1DDA25BB0((char *)a2, *(char **)&v57[0], *((uint64_t *)&v57[0] + 1), 4uLL);
        int v14 = *(_WORD **)&v57[0];
      }
      if (!v14) {
        goto LABEL_19;
      }
      *((void *)&v57[0] + 1) = v14;
      __int16 v9 = v14;
      goto LABEL_18;
    case 0xCu:
      sub_1DDACC940((uint64_t)a1);
      uint64_t v31 = (double *)*a2;
      if (*a2)
      {
        a2[1] = v31;
        operator delete(v31);
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      *(_OWORD *)a2 = v57[0];
      a2[2] = *(void **)&v57[1];
      goto LABEL_19;
    case 0xEu:
      if ((*(int (**)(void *))(*a1 + 120))(a1) <= 6) {
        goto LABEL_72;
      }
      (*(void (**)(void **__return_ptr, void *))(*a1 + 1032))(&__p, a1);
      uint64_t v23 = (void (***)(_OWORD *__return_ptr, void *, uint64_t))__p;
      uint64_t v24 = (*(uint64_t (**)(void *))(*a1 + 256))(a1);
      (*(void (**)(void *))(*a1 + 264))(a1);
      (**v23)(v57, v23, v24);
      uint64_t v25 = (double *)*a2;
      if (*a2)
      {
        a2[1] = v25;
        operator delete(v25);
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      long long v26 = *(double **)&v57[0];
      *a2 = *(void **)&v57[0];
      long long v27 = (unsigned char *)*((void *)&v57[0] + 1);
      *(_OWORD *)(a2 + 1) = *(_OWORD *)((char *)v57 + 8);
      memset(v57, 0, 24);
      if (v56)
      {
        sub_1DDA18310(v56);
        long long v26 = (double *)*a2;
        uint64_t v28 = a2[1];
      }
      else
      {
        uint64_t v28 = v27;
      }
      if (v28 - (unsigned char *)v26 == 32) {
        goto LABEL_19;
      }
      uint64_t v51 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v51, "RawCameraException");
      goto LABEL_73;
    case 0xFu:
      if ((*(int (**)(void *))(*a1 + 120))(a1) <= 6)
      {
LABEL_72:
        uint64_t v51 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v51, "RawCameraException");
LABEL_73:
        __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      (*(void (**)(void **__return_ptr, void *))(*a1 + 1032))(&__p, a1);
      uint64_t v29 = (void (***)(_OWORD *__return_ptr, void *, uint64_t))__p;
      uint64_t v30 = (*(uint64_t (**)(void *))(*a1 + 256))(a1);
      (*(void (**)(void *))(*a1 + 264))(a1);
      (**v29)(v57, v29, v30);
      if (v56) {
        sub_1DDA18310(v56);
      }
      if ((*(unsigned int (**)(void *))(*a1 + 176))(a1)) {
        sub_1DDACC940((uint64_t)a1);
      }
      else {
        (*(void (**)(void **__return_ptr, void *))(*a1 + 1000))(&__p, a1);
      }
      long long v33 = (std::__shared_weak_count *)*((void *)&v57[0] + 1);
      uint64_t v32 = *(char **)&v57[0];
      uint64_t v34 = *((void *)&v57[0] + 1) - *(void *)&v57[0];
      if (*((void *)&v57[0] + 1) - *(void *)&v57[0] != 32 || (char *)v56 - (unsigned char *)__p != 32)
      {
        uint64_t v54 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v54, "RawCameraException");
        __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v35 = *(double *)(*(void *)&v57[0] + 8);
      uint64_t v36 = *((double *)__p + 1);
      v37.f64[0] = v35;
      v37.f64[1] = *(float64_t *)(*(void *)&v57[0] + 16);
      v38.f64[0] = v37.f64[1];
      v38.f64[1] = **(float64_t **)&v57[0];
      __asm { FMOV            V17.2D, #0.75 }
      uint64_t v43 = vmulq_f64(v37, _Q17);
      uint64_t v44 = vmulq_f64(v38, (float64x2_t)xmmword_1DDBFB380);
      _Q17.f64[0] = v36;
      _Q17.f64[1] = *((float64_t *)__p + 2);
      v45.f64[0] = _Q17.f64[1];
      v45.f64[1] = *(float64_t *)__p;
      uint64_t v46 = (int32x4_t)vcgtq_f64(v44, v45);
      *(int32x2_t *)v46.i8 = vmovn_s64((int64x2_t)v46);
      *(int16x4_t *)&v43.f64[0] = vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v45, v44), (int32x4_t)vcgtq_f64(_Q17, v43)));
      LOWORD(v43.f64[0]) = vmovn_s32(v46).u16[0];
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v43.f64[0], 0xFuLL))) & 1) == 0
        || *(double *)__p >= **(double **)&v57[0] * 1.25
        || v36 >= v35 * 1.25
        || (uint64_t v47 = *((double *)__p + 3), v48 = *(double *)(*(void *)&v57[0] + 24), v47 <= v48 * 0.75)
        || v47 >= v48 * 1.25
        || (unint64_t v49 = (v35 + *(double *)(*(void *)&v57[0] + 16)) * 0.5,
            uint64_t v50 = (v36 + *((double *)__p + 2)) * 0.5,
            (*(double *)__p - v50) * (**(double **)&v57[0] - v49) < 0.0)
        || (v47 - v50) * (v48 - v49) < 0.0)
      {
        if (&__p == a2) {
          goto LABEL_61;
        }
        uint64_t v32 = (char *)__p;
        long long v33 = v56;
        uint64_t v34 = (char *)v56 - (unsigned char *)__p;
        goto LABEL_60;
      }
      if (v57 != (_OWORD *)a2) {
LABEL_60:
      }
        sub_1DDA25BB0((char *)a2, v32, (uint64_t)v33, v34 >> 3);
LABEL_61:
      if (__p)
      {
        uint64_t v56 = (std::__shared_weak_count *)__p;
        operator delete(__p);
      }
      __int16 v9 = *(_WORD **)&v57[0];
      if (*(void *)&v57[0])
      {
LABEL_12:
        *((void *)&v57[0] + 1) = v9;
LABEL_18:
        operator delete(v9);
      }
LABEL_19:
      if ((*(int (**)(void *))(*a1 + 120))(a1) <= 2)
      {
        int v15 = (double *)*a2;
        signed int v16 = (double *)a2[1];
        while (v15 != v16)
        {
          *int v15 = round(*v15);
          ++v15;
        }
      }
      (*(void (**)(_OWORD *__return_ptr, void *))(*a1 + 1072))(v57, a1);
      int v17 = *(void **)&v57[0];
      unint64_t v18 = (uint64_t)(*((void *)&v57[0] + 1) - *(void *)&v57[0]) >> 3;
      int v19 = (double *)*a2;
      if (v18 != ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3 || *((void *)&v57[0] + 1) == *(void *)&v57[0])
      {
        if (!*(void *)&v57[0]) {
          return;
        }
      }
      else
      {
        if (v18 <= 1) {
          unint64_t v18 = 1;
        }
        long long v21 = *(double **)&v57[0];
        do
        {
          double v22 = *v21++;
          *int v19 = v22 * *v19;
          ++v19;
          --v18;
        }
        while (v18);
      }
      *((void *)&v57[0] + 1) = v17;
      operator delete(v17);
      return;
    default:
      goto LABEL_19;
  }
}

void sub_1DDACD2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  signed int v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDACD3E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = 0;
  return sub_1DDA25B2C(a2, 4uLL, &v4);
}

void *sub_1DDACD448@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 960))(a1);
  if ((result - 1) > 8
    || (uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 2144))(a1),
        uint64_t v5 = (const void *)a1[18],
        uint64_t v6 = a1[19],
        (const void *)v6 == v5))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return sub_1DDA1808C(a2, v5, v6, (v6 - (uint64_t)v5) >> 3);
  }
  return result;
}

void sub_1DDACD514(void *a1@<X8>)
{
  uint64_t v1 = 0;
  double v2 = 0;
  sub_1DDB552A0(0, &v1, a1);
  if (v2) {
    sub_1DDA18310(v2);
  }
}

void sub_1DDACD554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDACD56C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 256))(a1) >= 2
      && (*(double (**)(uint64_t))(*(void *)a1 + 264))(a1) > 1.0e-10;
}

uint64_t sub_1DDACD608(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2104))(a1)) {
    return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 1064))(a1) ^ 1;
  }
  else {
    return 1;
  }
}

BOOL sub_1DDACD694(uint64_t a1)
{
  (*(void (**)(unsigned char **__return_ptr))(*(void *)a1 + 1024))(&v4);
  uint64_t v1 = v4;
  double v2 = v5;
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
  return v2 - v1 == 32;
}

void *sub_1DDACD708@<X0>(void *a1@<X8>)
{
  uint64_t v2 = 0x3FF0000000000000;
  return sub_1DDA25B2C(a1, 4uLL, &v2);
}

double sub_1DDACD73C(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return 5.0;
}

void sub_1DDACD7C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDACD7D4(uint64_t a1@<X0>, double **a2@<X8>)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1064))(a1) & 1) == 0)
  {
    __p[0] = (void *)0xBFF0000000000000;
LABEL_11:
    sub_1DDA25B2C(a2, 4uLL, __p);
    return;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 1056))(a1))
  {
    __p[0] = COERCE_VOID_((*(double (**)(uint64_t))(*(void *)a1 + 2080))(a1));
    goto LABEL_11;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1024))(__p, a1);
  sub_1DDA24B78(a2, 4uLL);
  (*(void (**)(double **__return_ptr, uint64_t))(*(void *)a1 + 744))(&v13, a1);
  uint64_t v4 = v13;
  unint64_t v5 = (char *)v14 - (char *)v13;
  if (v14 == v13) {
    goto LABEL_22;
  }
  uint64_t v6 = (double *)__p[0];
  int v7 = *a2;
  **a2 = *v13 * 0.00305175781 * *(double *)__p[0];
  if (v5 < 9) {
    goto LABEL_22;
  }
  v7[1] = v4[1] * 0.00305175781 * v6[1];
  if (v5 < 0x11) {
    goto LABEL_22;
  }
  v7[2] = v4[2] * 0.00305175781 * v6[2];
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  __int16 v9 = v13;
  uint64_t v10 = (char *)v14 - (char *)v13;
  if (v8 > 2)
  {
    unint64_t v11 = 3;
    if ((unint64_t)v10 <= 0x18) {
      unint64_t v11 = 1;
    }
    if (v11 < v10 >> 3) {
      goto LABEL_16;
    }
LABEL_22:
    sub_1DDA24AD0();
  }
  if ((unint64_t)v10 > 0x18)
  {
    unint64_t v11 = 3;
LABEL_16:
    (*a2)[3] = v13[v11] * 0.00305175781 * *((double *)__p[0] + 3);
LABEL_17:
    uint64_t v14 = v9;
    operator delete(v9);
    double v12 = __p[0];
    goto LABEL_18;
  }
  double v12 = __p[0];
  (*a2)[3] = *((double *)__p[0] + 3) * 0.00305175781;
  if (v9) {
    goto LABEL_17;
  }
LABEL_18:
  if (v12)
  {
    __p[1] = v12;
    operator delete(v12);
  }
}

void sub_1DDACDA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  int v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDACDAC0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2056))(&v3);
  uint64_t v1 = v3;
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1 != 0;
}

uint64_t sub_1DDACDB28(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 2064);

  return v2(a1);
}

void sub_1DDACDBF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDACDC08(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1704))(a1);
}

double sub_1DDACDEF8(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v2 = -1.0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1064))(a1))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1056))(a1))
    {
      sub_1DDACD7D4(a1, (double **)&__p);
      double v2 = fmax(*(double *)__p, fmax(*((double *)__p + 1), fmax(*((double *)__p + 2), *((double *)__p + 3))));
      __int16 v9 = (std::__shared_weak_count *)__p;
      operator delete(__p);
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1120))(&__p, a1);
      BOOL v5 = 1;
      if (__p)
      {
        if (!sub_1DDAB6F70((uint64_t)&unk_1F3968258, (uint64_t)&unk_1F3968258))
        {
          uint64_t v3 = (double (***)(void *, unint64_t))__p;
          unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
          (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
          double v2 = (**v3)(v3, llround((double)v4));
          if (v2 >= 0.0) {
            BOOL v5 = 0;
          }
        }
      }
      if (v9) {
        sub_1DDA18310(v9);
      }
      if (v5) {
        return (*(double (**)(uint64_t))(*(void *)a1 + 2072))(a1);
      }
    }
  }
  return v2;
}

void sub_1DDACE178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDACE1A0(unsigned char *a1)
{
  if ((*(int (**)(unsigned char *))(*(void *)a1 + 120))(a1) <= 6
    && (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 120))(a1) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!a1[112])
  {
    a1[112] = 1;
    (*(void (**)(unsigned char *))(*(void *)a1 + 2920))(a1);
    if ((*(int (**)(unsigned char *))(*(void *)a1 + 960))(a1) < 1
      || (*(int (**)(unsigned char *))(*(void *)a1 + 960))(a1) > 8)
    {
      if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 960))(a1) == 9)
      {
        (*(void (**)(unsigned char *))(*(void *)a1 + 1008))(a1);
        if (HIDWORD(v3)) {
          BOOL v4 = v3 == 0;
        }
        else {
          BOOL v4 = 1;
        }
        if (!v4) {
          (*(void (**)(unsigned char *))(*(void *)a1 + 1096))(a1);
        }
      }
    }
    else
    {
      (*(void (**)(unsigned char *))(*(void *)a1 + 1088))(a1);
    }
  }
  return a1[112];
}

void sub_1DDACE3F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDACE40C(void *a1)
{
  unsigned int v2 = (*(uint64_t (**)(void *))(*a1 + 960))(a1);
  BOOL v3 = v2 < 9;
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 384))(&v38, a1);
  if (v38)
  {
    uint64_t v4 = sub_1DDAA7CC0(v38);
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 432))(a1);
    uint64_t v7 = v6;
    uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 408))(a1);
    unsigned int v9 = (v2 - 3) & 0xFFFFFFFA;
    unsigned int v10 = v3 & (0x142u >> v2);
    int v11 = v5 - 16;
    if (v2 != 4) {
      int v11 = v5;
    }
    if (v10) {
      int v12 = 0;
    }
    else {
      int v12 = HIDWORD(v5);
    }
    if (v10) {
      int v13 = HIDWORD(v5);
    }
    else {
      int v13 = 0;
    }
    BOOL v14 = v9 == 0;
    if (v9) {
      int v15 = 0;
    }
    else {
      int v15 = v11;
    }
    if (v14) {
      int v11 = 0;
    }
    int v16 = v11 + v7;
    if ((v3 & (0x1A0u >> v2)) == 0) {
      int v16 = v8 - v15;
    }
    int v17 = v8 - v16;
    int v18 = v15 + v13 * v8;
    int v19 = HIDWORD(v8) - v12 - (v13 + HIDWORD(v7));
    if ((v3 & (0x144u >> v2)) == 0) {
      int v19 = 0;
    }
    int v20 = v8 - v15 - v16 + v19 * v8;
    int v21 = v18 + v17 * (HIDWORD(v7) - 1) + v20;
    if (v21 >= 1)
    {
      int v22 = *(_DWORD *)(v38 + 56);
      if (v10) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = v22 * HIDWORD(v5);
      }
      uint64_t v24 = (unsigned __int16 *)(v4 + 32 * (v2 == 4) + 2 * v23);
      if (v18 < 1)
      {
        unint64_t v25 = 0;
      }
      else
      {
        unint64_t v25 = 0;
        do
        {
          unsigned int v26 = *v24++;
          v25 += v26;
          --v18;
        }
        while (v18);
      }
      if (SHIDWORD(v7) > 1)
      {
        int v27 = 0;
        uint64_t v28 = v16 - (int)v8 + v22;
        do
        {
          v24 += v28;
          if (v17 < 1)
          {
            unsigned __int16 v29 = 0;
          }
          else
          {
            unsigned __int16 v29 = 0;
            int v30 = v17;
            do
            {
              __int16 v31 = *v24++;
              v29 += v31;
              --v30;
            }
            while (v30);
          }
          v25 += v29;
          ++v27;
        }
        while (v27 != HIDWORD(v7) - 1);
      }
      if (v20 >= 1)
      {
        uint64_t v32 = 0;
        long long v33 = &v24[v16];
        do
          v25 += v33[v32++];
        while ((int)v32 < v20);
      }
      double v35 = (double)(v25 / v21);
      sub_1DDA25B2C(&v36, 4uLL, &v35);
      uint64_t v34 = (void *)a1[15];
      if (v34)
      {
        a1[16] = v34;
        operator delete(v34);
        a1[15] = 0;
        a1[16] = 0;
        a1[17] = 0;
      }
      *(_OWORD *)(a1 + 15) = v36;
      a1[17] = v37;
    }
  }
  if (v39) {
    sub_1DDA18310(v39);
  }
}

void sub_1DDACE6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDACE720(void **a1)
{
  if ((*((int (**)(void **))*a1 + 15))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v2 = a1 + 15;
  if (a1[16] == a1[15])
  {
    (*((void (**)(long long *__return_ptr, void **))*a1 + 359))(&v15, a1);
    uint64_t v3 = v15;
    if (*((void *)&v15 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v15 + 1));
    }
    if (v3)
    {
      (*((void (**)(uint64_t *__return_ptr, void **))*a1 + 48))(&v19, a1);
      uint64_t v4 = v19;
      if (v19)
      {
        *(void *)&long long v15 = (*((uint64_t (**)(void **))*a1 + 126))(a1);
        *((void *)&v15 + 1) = v5;
        double v6 = sub_1DDAA84AC(v4, (int *)&v15);
        double v18 = v6;
        int v7 = (*((uint64_t (**)(void **))*a1 + 15))(a1);
        if (v7 <= 2)
        {
          float v8 = v6;
          double v6 = v8;
          double v18 = v8;
        }
        uint64_t v9 = v19;
        *(void *)&long long v15 = (*((uint64_t (**)(void **))*a1 + 126))(a1);
        *((void *)&v15 + 1) = v10;
        sub_1DDAA8B54(v9, (int *)&v15, v7 < 3, v6);
        uint64_t v17 = v11;
        sub_1DDA25B2C(&v15, 4uLL, &v18);
        int v12 = *v2;
        if (*v2)
        {
          a1[16] = v12;
          operator delete(v12);
          unsigned char *v2 = 0;
          a1[16] = 0;
          a1[17] = 0;
        }
        *(_OWORD *)(a1 + 15) = v15;
        a1[17] = v16;
        sub_1DDA25B2C(&v15, 4uLL, &v17);
        int v13 = a1[18];
        if (v13)
        {
          a1[19] = v13;
          operator delete(v13);
          a1[18] = 0;
          a1[19] = 0;
          a1[20] = 0;
        }
        *((_OWORD *)a1 + 9) = v15;
        a1[20] = v16;
      }
      if (v20) {
        sub_1DDA18310(v20);
      }
    }
  }
}

void sub_1DDACE9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDACE9E0(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(void *)(a1 + 128) == *(void *)(a1 + 120))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2872))(&v14, a1);
    unsigned int v2 = v14;
    if (v15) {
      sub_1DDA18310(v15);
    }
    if (v2)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 384))(&v16, a1);
      uint64_t v3 = v16;
      if (v16)
      {
        std::string __p = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1008))(a1);
        int v13 = v4;
        sub_1DDAA85E4(v3, (int *)&__p, &v14);
        uint64_t v5 = (std::__shared_weak_count *)v14;
        if ((char *)v15 - (unsigned char *)v14 == 32)
        {
          if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 2)
          {
            double v6 = (float64x2_t *)v14;
            float64x2_t v7 = vcvtq_f64_f32(vcvt_f32_f64(*((float64x2_t *)v14 + 1)));
            *(float64x2_t *)BOOL v14 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)v14));
            v6[1] = v7;
          }
          uint64_t v8 = v16;
          v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1008))(a1);
          v11[1] = v9;
          sub_1DDAA8CD4(v8, (int *)v11, &v14, &__p);
          if ((void **)(a1 + 120) != &v14) {
            sub_1DDA25BB0((char *)(a1 + 120), (char *)v14, (uint64_t)v15, ((char *)v15 - (unsigned char *)v14) >> 3);
          }
          if ((void **)(a1 + 144) != &__p) {
            sub_1DDA25BB0((char *)(a1 + 144), (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 3);
          }
          if (__p)
          {
            int v13 = __p;
            operator delete(__p);
          }
          uint64_t v5 = (std::__shared_weak_count *)v14;
        }
        if (v5)
        {
          long long v15 = v5;
          operator delete(v5);
        }
      }
      if (v17) {
        sub_1DDA18310(v17);
      }
    }
  }
}

void sub_1DDACEC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 - 40);
  if (v17) {
    sub_1DDA18310(v17);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDACECC4(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  char v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1048))(a1);
  double result = -1.0;
  if ((v2 & 1) == 0)
  {
    double v4 = ((*(double (**)(uint64_t, void, void, double))(*(void *)a1 + 2664))(a1, 0, 0, -1.0)
        + -0.25)
       * 2.2;
    double v5 = 1.0;
    if (v4 <= 1.0) {
      double v5 = v4;
    }
    BOOL v6 = v4 < 0.0;
    double result = 0.0;
    if (!v6) {
      return v5;
    }
  }
  return result;
}

void sub_1DDACEDE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDACEDF8()
{
  return 1.0;
}

BOOL sub_1DDACEE00(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1368))(a1);
  unsigned __int8 v9 = v2;
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v7, a1);
    int v2 = sub_1DDB15EDC(v7, &v9, v3, v4, v5);
    unsigned __int8 v9 = v2;
    if (v8)
    {
      sub_1DDA18310(v8);
      int v2 = v9;
    }
  }
  return v2 != 0;
}

void sub_1DDACEEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDACEED4(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1224))(a1)) {
    return 1;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1048))(a1)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2104))(a1);
  if (result)
  {
    double v3 = (*(double (**)(uint64_t))(*(void *)a1 + 1672))(a1);
    double v4 = (*(double (**)(uint64_t))(*(void *)a1 + 1680))(a1);
    double v5 = (*(double (**)(uint64_t))(*(void *)a1 + 1688))(a1);
    unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
    double v7 = (*(double (**)(uint64_t))(*(void *)a1 + 264))(a1);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1696))(a1) - 1;
    double v9 = (double)v6;
    uint64_t result = 1;
    switch(v8)
    {
      case 0:
        uint64_t result = v3 < v9;
        break;
      case 1:
        float v10 = v7;
        float v11 = v4;
        uint64_t result = v10 > v11;
        break;
      case 2:
        BOOL v12 = v3 < v9;
        float v13 = v7;
        float v14 = v4;
        uint64_t result = v13 > v14 || v12;
        break;
      case 3:
        BOOL v15 = v3 < v9;
        float v16 = v7;
        float v17 = v5;
        uint64_t result = v16 < v17 && v15;
        break;
      case 8:
        return result;
      default:
        return 0;
    }
  }
  return result;
}

double sub_1DDACF1BC(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 1424))(a1);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1048))(a1) & 1) == 0) {
    double v2 = v2 + (1.0 - (*(double (**)(uint64_t))(*(void *)a1 + 2088))(a1)) * 3.0;
  }
  return fmin(fmax(v2, 0.0), 20.0);
}

void sub_1DDACF298(void *a1@<X8>)
{
  uint64_t v1 = 0;
  double v2 = 0;
  sub_1DDB546D0(0, &v1, a1);
  if (v2) {
    sub_1DDA18310(v2);
  }
}

void sub_1DDACF2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDACF2F0(_DWORD *a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v8);
  unsigned __int8 v7 = 0;
  BOOL v5 = (sub_1DDB16438(v8, &v7, v2, v3, v4) & 1) != 0 || a1[70] == 1;
  if (v9) {
    sub_1DDA18310(v9);
  }
  return v5;
}

void sub_1DDACF380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDACF398(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v4);
  sub_1DDACF46C(&v4, (void **)&v6);
  if (v5) {
    sub_1DDA18310(v5);
  }
  if (v6)
  {
    uint64_t v3 = sub_1DDA7BFF8(v6);
    if (v3 != a2) {
      sub_1DDA17E28((char *)a2, *(char **)v3, *(void *)(v3 + 8), (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 2);
    }
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
}

void sub_1DDACF43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  float v14 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDACF46C@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F395D4B0, 0)) != 0)
  {
    BOOL v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  std::__shared_weak_count *v2 = 0;
  v2[1] = 0;
  return result;
}

void sub_1DDACF4F0(void *a1)
{
  sub_1DDA30DE8((uint64_t)a1);
  if (!a1[3])
  {
    (*(void (**)(void **__return_ptr, void *))(*a1 + 160))(__p, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)__p[0] + 384))(&v12);
    if (__p[1]) {
      sub_1DDA18310((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
    uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 408))(a1);
    __p[0] = (void *)(*(uint64_t (**)(void *))(*a1 + 432))(a1);
    __p[1] = v2;
    sub_1DDAD04D4(&v12, (unint64_t *)&v11, &v8, __p, &v9);
    uint64_t v3 = v9;
    *(unsigned char *)(v9 + 185) = 0;
    sub_1DDACF398((uint64_t)a1, (uint64_t)__p);
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 200))(v3, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v5 = v9;
    uint64_t v4 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = (std::__shared_weak_count *)a1[4];
    a1[3] = v5;
    a1[4] = v4;
    if (v6) {
      sub_1DDA18310(v6);
    }
    if (v10) {
      sub_1DDA18310(v10);
    }
    if (v13) {
      sub_1DDA18310(v13);
    }
  }
}

void sub_1DDACF6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    sub_1DDA18310(a14);
  }
  float v16 = *(std::__shared_weak_count **)(v14 - 32);
  if (v16) {
    sub_1DDA18310(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDACF73C(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  uint64_t v6 = &unk_1F3968EA8;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:ColorBalance1");
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(void *)a1 + 2976))(a1, a2, __p, &v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DDACF804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDACF820(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v3);
  sub_1DDACF46C(&v3, &v5);
  if (v4) {
    sub_1DDA18310(v4);
  }
  if (v5) {
    uint64_t v1 = (*(uint64_t (**)(void *))(*(void *)v5 + 800))(v5);
  }
  else {
    uint64_t v1 = 0;
  }
  if (v6) {
    sub_1DDA18310(v6);
  }
  return v1;
}

void sub_1DDACF8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDACF8EC(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2992))(a1);
  double result = 0.6;
  if (!v1) {
    return 1.0;
  }
  return result;
}

void sub_1DDACF940(uint64_t a1@<X0>, double **a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3000))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2984))(a1))
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3008))(a1);
    if (v5 == 4)
    {
      (*(void (**)(double **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 2960))(&v17, a1, v4);
      int v7 = v17;
      uint64_t v8 = v18;
    }
    else
    {
      if (v5 != 3)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v20 = &unk_1F3968EF0;
      int v21 = v4;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v15, a1);
      uint64_t v6 = v15;
      sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:ColorBalance1");
      (*(void (**)(double **__return_ptr, uint64_t, void **, void **, uint64_t))(*(void *)v6 + 600))(&v17, v6, __p, &v20, 3);
      int v7 = v17;
      uint64_t v8 = v18;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      float v17 = 0;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v16) {
        sub_1DDA18310(v16);
      }
    }
    if ((unint64_t)(v8 - (void)v7) <= 0x17)
    {
      uint64_t v11 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v11, "RawCameraException");
      __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    sub_1DDA24B78(a2, 3uLL);
    float v10 = *a2;
    *float v10 = v7[1] / *v7;
    v10[1] = v7[1] / v7[1];
    v10[2] = v7[1] / v7[2];
    operator delete(v7);
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)a1 + 2960);
    v9(a1, v4);
  }
}

void sub_1DDACFC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDACFCAC(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDACFD70(v2, @"cameraMultipliersOffset", v3, &unk_1F3968268);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDACFD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDACFD70(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  sub_1DDAB6A18(v7, a3, &__p);
  uint64_t v9 = (uint64_t **)(a1 + 24);
  float v10 = sub_1DDA2A530(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    _DWORD v29[2] = sub_1DDAD0568;
    _DWORD v29[3] = &unk_1E6D051C0;
    float v13 = (uint64_t (**)(void))v8;
    id v30 = v13;
    sub_1DDB657E4(a1, v7, v29, &p_p);
    uint64_t v18 = (long long *)p_p;
    if (p_p)
    {
      uint64_t v19 = sub_1DDB67AB8((uint64_t)p_p, v14, v15, v16, v17);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned __int16 v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);
    }
    else
    {
      unsigned __int16 v12 = 0;
    }
    if (v34) {
      sub_1DDA18310(v34);
    }

    if (!v18) {
      unsigned __int16 v12 = v13[2](v13);
    }
    p_p = &__p;
    uint64_t v24 = sub_1DDAB6C70(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_p);
    unint64_t v25 = (void (**)(uint64_t, void, std::string **, void, void))(v24 + 7);
    v32[1] = (uint64_t (*)(void, void, void, void, void))v12;
    v32[0] = (uint64_t (*)(void, void, void, void, void))sub_1DDAD0600;
    if (v32 != (uint64_t (**)(void, void, void, void, void))(v24 + 7))
    {
      unsigned int v26 = *v25;
      if (*v25)
      {
        p_p = 0;
        uint64_t v34 = 0;
        v26(2, v25, &p_p, 0, 0);
        v32[0](2, v32, v25, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(void, void, void, void, void), void, void))p_p)(2, &p_p, v32, 0, 0);
        sub_1DDAB6E58((uint64_t (**)(void, void, void, void, void))&p_p);
      }
      else
      {
        *((_WORD *)v24 + 32) = v12;
        v24[7] = (uint64_t)sub_1DDAD0600;
        v32[0] = 0;
      }
    }
    sub_1DDAB6E58(v32);
  }
  else
  {
    uint64_t v11 = (unsigned __int16 *)sub_1DDAD05B4((uint64_t (**)(uint64_t, void, void, void, void *))v10 + 7);
    if (!v11) {
      sub_1DDAB6C00();
    }
    unsigned __int16 v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v12;
}

void sub_1DDAD0050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  __cxa_free_exception(v28);

  if (a26) {
    sub_1DDA18310(a26);
  }

  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1DDAD00E0()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDAD0128(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD013C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDACFD70(v2, @"cameraMultipliersChannelCount", v3, &unk_1F3968288);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDAD01E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAD0200()
{
  return 4;
}

id sub_1DDAD0208(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"aspectRatioCrop", v5, v6))
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
    unsigned __int16 v12 = v11;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v27, a1);
    sub_1DDACF46C(&v27, &v29);
    if (v28) {
      sub_1DDA18310(v28);
    }
    if (v29)
    {
      uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v29 + 792))(v29);
      unsigned __int16 v12 = v13;
    }
    uint64_t v31 = v10;
    uint64_t v32 = (std::__shared_weak_count *)v12;
    uint64_t v17 = sub_1DDAD06E0((unsigned int *)&v31, v13, v14, v15, v16);
    uint64_t v18 = v30;
    if (!v30) {
      goto LABEL_17;
    }
LABEL_16:
    sub_1DDA18310(v18);
    goto LABEL_17;
  }
  if (!objc_msgSend_isEqualToString_(v3, v7, @"firmwareVersion", v8, v9))
  {
    uint64_t v17 = sub_1DDB0C3C8(a1, v3);
    goto LABEL_17;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v29, a1);
  sub_1DDACF46C(&v29, (void **)&v31);
  if (v30) {
    sub_1DDA18310(v30);
  }
  if (v31)
  {
    uint64_t v22 = sub_1DDA506E8(v31);
    objc_msgSend_numberWithUnsignedInt_(NSNumber, v23, v22, v24, v25);
  }
  else
  {
    objc_msgSend_numberWithUnsignedInt_(NSNumber, v19, 0, v20, v21);
  uint64_t v17 = };
  uint64_t v18 = v32;
  if (v32) {
    goto LABEL_16;
  }
LABEL_17:

  return v17;
}

void sub_1DDAD03EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD0430(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  unsigned int v6 = a4;
  if (a4 == 3) {
    a4 = 4;
  }
  int v7 = sub_1DDAB76F0(a1, a2, a3, a4, a5);
  if (v6 == 3 && v7)
  {
    sub_1DDA1AD40(&v13, 3uLL);
    uint64_t v8 = (_DWORD *)*a5;
    long long v9 = v13;
    uint64_t v10 = v13;
    *(_DWORD *)long long v13 = 2 * *(_DWORD *)*a5;
    *(_DWORD *)(v10 + 4) = v8[2] + v8[1];
    *(_DWORD *)(v10 + 8) = 2 * v8[3];
    *(_OWORD *)a5 = v9;
    uint64_t v11 = a5[2];
    a5[2] = v14;
    *((void *)&v13 + 1) = v8;
    uint64_t v14 = v11;
    *(void *)&long long v13 = v8;
    operator delete(v8);
  }
  return 1;
}

void sub_1DDAD04D4(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xF8uLL);
  sub_1DDAAF8B8((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAD0554(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD0568(uint64_t a1)
{
  int v1 = NSNumber;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return objc_msgSend_numberWithUnsignedShort_(v1, v2, v3, v4, v5);
}

uint64_t (**sub_1DDAD05B4(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, MEMORY[0x1E4FBA3D0], &unk_1DDBFB420);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DDAD0600(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = MEMORY[0x1E4FBA3D0];
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(_WORD *)(a3 + 8) = *(_WORD *)(a2 + 8);
      *(void *)a3 = sub_1DDAD0600;
      break;
    case 2:
      uint64_t result = 0;
      *(_WORD *)(a3 + 8) = *(_WORD *)(a2 + 8);
      *(void *)a3 = sub_1DDAD0600;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = sub_1DDAB6F70(a4, MEMORY[0x1E4FBA3D0]);
      }
      else {
        BOOL v8 = a5 == &unk_1DDBFB420;
      }
      if (v8) {
        uint64_t result = a2 + 8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

id sub_1DDAD06E0(unsigned int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v23[4] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = objc_msgSend_numberWithInt_(NSNumber, a2, *a1, a4, a5);
  v23[0] = v6;
  uint64_t v10 = objc_msgSend_numberWithInt_(NSNumber, v7, a1[1], v8, v9);
  v23[1] = v10;
  uint64_t v14 = objc_msgSend_numberWithInt_(NSNumber, v11, a1[2], v12, v13);
  unsigned int v23[2] = v14;
  uint64_t v18 = objc_msgSend_numberWithInt_(NSNumber, v15, a1[3], v16, v17);
  void v23[3] = v18;
  uint64_t v21 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v19, (uint64_t)v23, 4, v20);

  return v21;
}

void sub_1DDAD07E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD0824(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = sub_1DDBF0D7C(a1, a2);
  *(void *)uint64_t v5 = &unk_1F3968F20;
  *(_OWORD *)(v5 + 16) = 0u;
  unsigned int v6 = (uint64_t *)(v5 + 16);
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  int v7 = sub_1DDA19EC8(*a3);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      int v9 = 0;
      std::string __p = 0;
      uint64_t v28 = 0;
      unsigned __int16 v29 = 0;
      do
      {
        double v10 = sub_1DDA1A030(*a3);
        double v11 = v10;
        uint64_t v12 = v28;
        if (v28 >= v29)
        {
          uint64_t v14 = (double *)__p;
          uint64_t v15 = ((char *)v28 - (unsigned char *)__p) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            sub_1DDA17F78();
          }
          uint64_t v17 = (char *)v29 - (unsigned char *)__p;
          if (((char *)v29 - (unsigned char *)__p) >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)sub_1DDA1814C((uint64_t)&v29, v18);
            uint64_t v14 = (double *)__p;
            uint64_t v12 = v28;
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (double *)&v19[8 * v15];
          double *v20 = v11;
          uint64_t v13 = v20 + 1;
          while (v12 != v14)
          {
            uint64_t v21 = *((void *)v12-- - 1);
            *((void *)v20-- - 1) = v21;
          }
          std::string __p = v20;
          uint64_t v28 = v13;
          unsigned __int16 v29 = (double *)&v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          double *v28 = v10;
          uint64_t v13 = v12 + 1;
        }
        uint64_t v28 = v13;
        ++v9;
      }
      while (v9 != 19);
      unint64_t v22 = *(void *)(a1 + 24);
      if (v22 >= *(void *)(a1 + 32))
      {
        uint64_t v23 = sub_1DDAD0F2C(v6, (uint64_t)&__p);
      }
      else
      {
        sub_1DDAD0ED8((uint64_t)v6, (uint64_t)&__p);
        uint64_t v23 = v22 + 24;
      }
      *(void *)(a1 + 24) = v23;
      if (__p)
      {
        uint64_t v28 = (double *)__p;
        operator delete(__p);
      }
    }
  }
  double v24 = sub_1DDA1A030(*a3);
  double v25 = sub_1DDA1A030(*a3);
  *(double *)(a1 + 64) = v24;
  *(double *)(a1 + 72) = v25;
  *(_DWORD *)(a1 + 80) = sub_1DDA19EC8(*a3);
  return a1;
}

void sub_1DDAD0A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::string __p = (void *)(v11 + 40);
  sub_1DDA9E7E4((void ***)&__p);
  sub_1DDA9E7E4((void ***)&__p);
  _Unwind_Resume(a1);
}

void *sub_1DDAD0A64@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_1DDA1808C(a2, *(const void **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3);
}

id sub_1DDAD0A84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v73[6] = *MEMORY[0x1E4F143B8];
  uint64_t v69 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5);
  uint64_t v70 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7, v8);
  uint64_t v13 = *(double ***)(a1 + 16);
  for (int i = *(double ***)(a1 + 24); v13 != i; v13 += 3)
  {
    v72[0] = @"kr0";
    uint64_t v15 = objc_msgSend_numberWithDouble_(NSNumber, v9, v10, v11, v12, **v13);
    v73[0] = v15;
    v72[1] = @"kr1";
    uint64_t v20 = objc_msgSend_numberWithDouble_(NSNumber, v16, v17, v18, v19, (*v13)[1]);
    v73[1] = v20;
    v72[2] = @"kr2";
    double v25 = objc_msgSend_numberWithDouble_(NSNumber, v21, v22, v23, v24, (*v13)[2]);
    v73[2] = v25;
    v72[3] = @"kr3";
    id v30 = objc_msgSend_numberWithDouble_(NSNumber, v26, v27, v28, v29, (*v13)[3]);
    v73[3] = v30;
    v72[4] = @"kt0";
    uint64_t v35 = objc_msgSend_numberWithDouble_(NSNumber, v31, v32, v33, v34, (*v13)[4]);
    v73[4] = v35;
    v72[5] = @"kt1";
    uint64_t v40 = objc_msgSend_numberWithDouble_(NSNumber, v36, v37, v38, v39, (*v13)[5]);
    v73[5] = v40;
    uint64_t v42 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v41, (uint64_t)v73, (uint64_t)v72, 6);
    objc_msgSend_addObject_(v70, v43, (uint64_t)v42, v44, v45);
  }
  objc_msgSend_setObject_forKeyedSubscript_(v69, v9, (uint64_t)v70, @"CoefficientSets", v12);
  double v46 = *(double *)(a1 + 72);
  uint64_t v51 = objc_msgSend_numberWithDouble_(NSNumber, v47, v48, v49, v50, *(double *)(a1 + 64));
  v71[0] = v51;
  uint64_t v56 = objc_msgSend_numberWithDouble_(NSNumber, v52, v53, v54, v55, v46);
  v71[1] = v56;
  uint64_t v59 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v57, (uint64_t)v71, 2, v58);
  objc_msgSend_setObject_forKeyedSubscript_(v69, v60, (uint64_t)v59, @"NormalizedCenter", v61);

  uint64_t v62 = [RAWOpcodeWarpRectilinear alloc];
  uint64_t v66 = objc_msgSend_initWithArguments_(v62, v63, (uint64_t)v69, v64, v65);

  return v66;
}

void sub_1DDAD0D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD0DEC(uint64_t a1)
{
  *(void *)a1 = &unk_1F3968F20;
  uint64_t v2 = (void **)(a1 + 16);
  uint64_t v4 = (void **)(a1 + 40);
  sub_1DDA9E7E4(&v4);
  uint64_t v4 = v2;
  sub_1DDA9E7E4(&v4);
  return a1;
}

uint64_t sub_1DDAD0E54(uint64_t a1)
{
  *(void *)a1 = &unk_1F3968F20;
  uint64_t v2 = (void **)(a1 + 16);
  uint64_t v4 = (void **)(a1 + 40);
  sub_1DDA9E7E4(&v4);
  uint64_t v4 = v2;
  sub_1DDA9E7E4(&v4);
  return MEMORY[0x1E01C3DC0](a1, 0x10A1C40FFDD1797);
}

uint64_t sub_1DDAD0ED0()
{
  return 14;
}

void *sub_1DDAD0ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = sub_1DDA1808C(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1DDAD0F24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD0F2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1DDA17F78();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1DDA2A160(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_1DDA1808C(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  sub_1DDAD1044(a1, v14);
  uint64_t v12 = a1[1];
  sub_1DDA9E384((uint64_t)v14);
  return v12;
}

void sub_1DDAD1030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA9E384((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD1044(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1DDAD10BC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1DDAD10BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1DDAD1160((uint64_t)v11);
  return v9;
}

uint64_t sub_1DDAD1160(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1DDA9E33C(a1);
  }
  return a1;
}

void sub_1DDAD122C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAD1354(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DDAD14C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAD1A28(_Unwind_Exception *a1)
{
}

void sub_1DDAD1A34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1DDAD1A50(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWRadialLensCorrection", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

double sub_1DDAD1AD8(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  if (a2) {
    return 0.0;
  }
  else {
    return sub_1DDAD1B18(*(void **)(a1 + 32), a3, a4, a5, a6, *(float *)(a1 + 48), *(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)(a1 + 60));
  }
}

double sub_1DDAD1B18(void *a1, double a2, double a3, double a4, double a5, float a6, float a7, float a8, float a9)
{
  id v13 = a1;
  CGFloat v14 = *MEMORY[0x1E4F1DB20];
  CGFloat v15 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat v16 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat v17 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  double v42 = a2;
  double v39 = a3 + a5;
  double v40 = a5;
  double v38 = a2 + a4;
  float v18 = 0.0;
  double v19 = 0.0;
  do
  {
    v55.origin.CGFloat x = sub_1DDAD2A68(v13, v42 + a4 * v19, a3, a6, a7, a8, a9);
    v55.origin.CGFloat y = v20;
    v55.size.CGFloat width = 0.0;
    v55.size.CGFloat height = 0.0;
    v46.origin.CGFloat x = v14;
    v46.origin.CGFloat y = v15;
    v46.size.CGFloat width = v16;
    v46.size.CGFloat height = v17;
    CGRect v47 = CGRectUnion(v46, v55);
    CGFloat x = v47.origin.x;
    CGFloat y = v47.origin.y;
    CGFloat width = v47.size.width;
    CGFloat height = v47.size.height;
    v56.origin.CGFloat x = sub_1DDAD2A68(v13, v42 + a4 * (1.0 - v19), v39, a6, a7, a8, a9);
    v56.origin.CGFloat y = v25;
    v56.size.CGFloat width = 0.0;
    v56.size.CGFloat height = 0.0;
    v48.origin.CGFloat x = x;
    v48.origin.CGFloat y = y;
    v48.size.CGFloat width = width;
    v48.size.CGFloat height = height;
    CGRect v49 = CGRectUnion(v48, v56);
    CGFloat v26 = v49.origin.x;
    CGFloat v27 = v49.origin.y;
    CGFloat v28 = v49.size.width;
    CGFloat v29 = v49.size.height;
    v57.origin.CGFloat x = sub_1DDAD2A68(v13, v42, a3 + v40 * (1.0 - v19), a6, a7, a8, a9);
    v57.origin.CGFloat y = v30;
    v57.size.CGFloat width = 0.0;
    v57.size.CGFloat height = 0.0;
    v50.origin.CGFloat x = v26;
    v50.origin.CGFloat y = v27;
    v50.size.CGFloat width = v28;
    v50.size.CGFloat height = v29;
    CGRect v51 = CGRectUnion(v50, v57);
    CGFloat v31 = v51.origin.x;
    CGFloat v32 = v51.origin.y;
    CGFloat v33 = v51.size.width;
    CGFloat v34 = v51.size.height;
    v58.origin.CGFloat x = sub_1DDAD2A68(v13, v38, a3 + v40 * v19, a6, a7, a8, a9);
    v58.origin.CGFloat y = v35;
    v58.size.CGFloat width = 0.0;
    v58.size.CGFloat height = 0.0;
    v52.origin.CGFloat x = v31;
    v52.origin.CGFloat y = v32;
    v52.size.CGFloat width = v33;
    v52.size.CGFloat height = v34;
    CGRect v53 = CGRectUnion(v52, v58);
    CGFloat v14 = v53.origin.x;
    CGFloat v15 = v53.origin.y;
    CGFloat v16 = v53.size.width;
    CGFloat v17 = v53.size.height;
    float v18 = v18 + 0.125;
    double v19 = v18;
  }
  while (v18 < 0.99999);
  CGRect v54 = CGRectIntegral(v53);
  *(void *)&double v36 = (unint64_t)CGRectInset(v54, -2.0, -2.0);

  return v36;
}

void sub_1DDAD1D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAD1EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAD2060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAD225C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAD27A8(_Unwind_Exception *a1)
{
}

void sub_1DDAD27B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1DDAD27D0(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWRadialLensCorrectionRB", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

double sub_1DDAD2858(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  if (a2) {
    return 0.0;
  }
  float v11 = *(float *)(a1 + 56);
  float v12 = *(float *)(a1 + 60);
  float v14 = *(float *)(a1 + 64);
  float v13 = *(float *)(a1 + 68);
  CGFloat v15 = *(void **)(a1 + 32);
  id v16 = *(id *)(a1 + 40);
  double v17 = sub_1DDAD1B18(v15, a3, a4, a5, a6, v11, v12, v14, v13);
  CGFloat v27 = v18;
  CGFloat v28 = v17;
  CGFloat v25 = v20;
  CGFloat v26 = v19;
  v32.origin.CGFloat x = sub_1DDAD1B18(v16, a3, a4, a5, a6, v11, v12, v14, v13);
  v32.origin.CGFloat y = v21;
  v32.size.CGFloat width = v22;
  v32.size.CGFloat height = v23;
  v29.origin.CGFloat y = v27;
  v29.origin.CGFloat x = v28;
  v29.size.CGFloat height = v25;
  v29.size.CGFloat width = v26;
  CGRect v30 = CGRectUnion(v29, v32);
  CGRect v31 = CGRectIntegral(v30);
  *(void *)&double v6 = (unint64_t)CGRectInset(v31, -2.0, -2.0);

  return v6;
}

void sub_1DDAD2984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDAD2A68(void *a1, double a2, double a3, float a4, float a5, float a6, float a7)
{
  id v13 = a1;
  float v14 = a2;
  float v15 = a3;
  float v16 = v14 - a4;
  float v20 = a6 * hypotf(v14 - a4, v15 - a5);
  float v21 = 1.0;
  if (v20 <= 1.0) {
    float v21 = v20;
  }
  BOOL v22 = v20 < 0.0;
  float v23 = 0.0;
  if (!v22) {
    float v23 = v21;
  }
  float v24 = a7 * v23;
  objc_msgSend_valueAtIndex_(v13, v17, vcvtms_u32_f32(a7 * v23), v18, v19);
  double v26 = v25;
  objc_msgSend_valueAtIndex_(v13, v27, vcvtps_u32_f32(v24), v28, v29);
  float v30 = floorf(v24);
  float v31 = v26;
  *(float *)&double v32 = v32;
  double v33 = (float)(a4
              + (float)(v16
                      * (float)((float)((float)(v24 - v30) * *(float *)&v32)
                              + (float)(v31 * (float)(1.0 - (float)(v24 - v30))))));

  return v33;
}

void sub_1DDAD2B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD2B70(uint64_t a1, uint64_t *a2)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(void *)(a1 + 4) = 1;
  *(void *)(a1 + 60) = 0;
  *(_WORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 76) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  os_signpost_id_t v4 = (double *)(a1 + 96);
  *(void *)(a1 + 112) = 0;
  uint64_t v5 = (_WORD *)(a1 + 112);
  *(_DWORD *)(a1 + 120) = 0;
  double v6 = (_DWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 42) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 144) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 128) = xmmword_1DDBFB498;
  *(void *)(a1 + 152) = 0;
  uint64_t v7 = (_DWORD *)(a1 + 152);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0x200000000;
  *(void *)(a1 + 184) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 192) = 3;
  *(_DWORD *)(a1 + 200) = 0;
  sub_1DDA19EC8(*a2);
  *(_WORD *)a1 = sub_1DDA19DA0(*a2);
  *(unsigned char *)(a1 + 2) = sub_1DDA19DA0(*a2) != 0;
  int v8 = sub_1DDA19FB0(*a2);
  *(_DWORD *)(a1 + 4) = v8;
  if (v8 != 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_DWORD *)(a1 + 8) = sub_1DDA19FB0(*a2);
  *(double *)(a1 + 16) = COERCE_FLOAT(sub_1DDA19EC8(*a2));
  uint64_t v41 = (int)sub_1DDA19EC8(*a2);
  sub_1DDA49310(v40, a2);
  int v9 = sub_1DDA19DA0(*a2);
  *(_WORD *)(a1 + 24) = v9;
  if (v9 == 1)
  {
    LOWORD(v37[0]) = sub_1DDA19FB0(*a2);
    sub_1DDAD356C((_WORD *)(a1 + 26), (unsigned __int16 *)v37);
    *(_WORD *)(a1 + 28) = sub_1DDA19DA0(*a2);
    *(_WORD *)(a1 + 30) = sub_1DDA19DA0(*a2);
    *(_WORD *)(a1 + 32) = sub_1DDA19DA0(*a2);
    *(_WORD *)(a1 + 34) = sub_1DDA19DA0(*a2);
    *(_WORD *)(a1 + 36) = sub_1DDA19DA0(*a2);
    sub_1DDA19DA0(*a2);
  }
  sub_1DDA1AA18(v40);
  uint64_t v10 = *a2;
  sub_1DDA1B2DC(v40, &v41);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 40))(v10, v40, 1);
  uint64_t v39 = (int)sub_1DDA19EC8(*a2);
  sub_1DDA49310(v40, a2);
  int v11 = sub_1DDA19DA0(*a2);
  *(_WORD *)(a1 + 38) = v11;
  if (v11 == 1)
  {
    float v12 = (_DWORD *)(a1 + 40);
    LODWORD(v37[0]) = sub_1DDA19EC8(*a2);
    sub_1DDA1B354((_DWORD *)(a1 + 40), (unsigned int *)v37);
    *(_WORD *)(a1 + 44) = sub_1DDA19DA0(*a2);
    *(_WORD *)(a1 + 46) = sub_1DDA19DA0(*a2);
    *(_WORD *)(a1 + 48) = sub_1DDA19DA0(*a2);
    *(_WORD *)(a1 + 50) = sub_1DDA19DA0(*a2);
    *(_WORD *)(a1 + 52) = sub_1DDA19FB0(*a2);
    *(_WORD *)(a1 + 54) = sub_1DDA19FB0(*a2);
    *(_WORD *)(a1 + 56) = sub_1DDA19FB0(*a2);
    *(_DWORD *)(a1 + 60) = sub_1DDA19EC8(*a2);
    *(_DWORD *)(a1 + 64) = sub_1DDA19FB0(*a2);
    *(_WORD *)(a1 + 68) = sub_1DDA19FB0(*a2);
    *(_DWORD *)(a1 + 72) = sub_1DDA19EC8(*a2);
    *(_WORD *)(a1 + 76) = sub_1DDA19FB0(*a2);
    *(_DWORD *)(a1 + 80) = sub_1DDA19EC8(*a2);
    if (*(_DWORD *)(a1 + 40) < 5u)
    {
      *(void *)(a1 + 84) = 0x400000000;
      double v15 = 0.0;
    }
    else
    {
      *(_DWORD *)(a1 + 84) = sub_1DDA19EC8(*a2);
      int v13 = sub_1DDA19DA0(*a2);
      int v14 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 88) = v13;
      double v15 = 0.0;
      if (v14 == 6) {
        double v15 = COERCE_FLOAT(sub_1DDA19EC8(*a2));
      }
    }
    double *v4 = v15;
    uint64_t v38 = 0;
    uint64_t v38 = (int)sub_1DDA19EC8(*a2);
    sub_1DDA49310(v37, a2);
    *(_WORD *)(a1 + 104) = sub_1DDA19DA0(*a2);
    sub_1DDA19EC8(*a2);
    unsigned int v36 = sub_1DDA19EC8(*a2);
    sub_1DDAD35E4((_WORD *)(a1 + 106), &v36);
    unsigned int v36 = sub_1DDA19EC8(*a2);
    sub_1DDAD35E4((_WORD *)(a1 + 108), &v36);
    unsigned int v36 = sub_1DDA19EC8(*a2);
    sub_1DDAD35E4((_WORD *)(a1 + 110), &v36);
    unsigned int v36 = sub_1DDA19EC8(*a2);
    sub_1DDAD35E4(v5, &v36);
    unsigned int v36 = sub_1DDA19EC8(*a2);
    sub_1DDAD35E4((_WORD *)(a1 + 114), &v36);
    unsigned int v36 = sub_1DDA19EC8(*a2);
    sub_1DDAD35E4((_WORD *)(a1 + 116), &v36);
    LOWORD(v36) = sub_1DDA19FB0(*a2);
    sub_1DDAD356C((_WORD *)(a1 + 118), (unsigned __int16 *)&v36);
    uint64_t v16 = *a2;
    unsigned int v36 = 36;
    (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v16 + 40))(v16, &v36, 1);
    LOWORD(v36) = sub_1DDA19FB0(*a2);
    sub_1DDAD365C(v6, (__int16 *)&v36);
    sub_1DDA19EC8(*a2);
    sub_1DDA19EC8(*a2);
    sub_1DDA19EC8(*a2);
    *(double *)(a1 + 128) = COERCE_FLOAT(sub_1DDA19EC8(*a2));
    *(double *)(a1 + 136) = COERCE_FLOAT(sub_1DDA19EC8(*a2));
    *(double *)(a1 + 144) = COERCE_FLOAT(sub_1DDA19EC8(*a2));
    sub_1DDA1AA18(v37);
    uint64_t v17 = *a2;
    sub_1DDA1B2DC(v37, &v38);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v17 + 40))(v17, v37, 1);
    if (*v12 < 7u
      || (double *v4 = COERCE_FLOAT(sub_1DDA19EC8(*a2)), *v12 < 8u)
      || (_DWORD *v7 = sub_1DDA19DA0(*a2),
          *(_WORD *)(a1 + 156) = sub_1DDA19FB0(*a2),
          LOWORD(v37[0]) = sub_1DDA19FB0(*a2),
          sub_1DDAD356C((_WORD *)(a1 + 158), (unsigned __int16 *)v37),
          *(_DWORD *)(a1 + 160) = sub_1DDA19EC8(*a2),
          *(_DWORD *)(a1 + 40) < 9u))
    {
      LODWORD(v37[0]) = 0;
      *(_WORD *)(a1 + 164) = *sub_1DDAD35E4((_WORD *)(a1 + 166), (unsigned int *)v37);
      LODWORD(v37[0]) = 0;
      *(_WORD *)(a1 + 168) = *sub_1DDAD35E4((_WORD *)(a1 + 170), (unsigned int *)v37);
      LODWORD(v37[0]) = 0;
      *(_WORD *)(a1 + 172) = *sub_1DDAD35E4((_WORD *)(a1 + 174), (unsigned int *)v37);
    }
    else
    {
      v37[0] = 0;
      v37[0] = sub_1DDA19DA0(*a2);
      sub_1DDA19DA0(*a2);
      uint64_t v18 = *a2;
      sub_1DDA18488(&v36, (unint64_t *)v37);
      (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v18 + 40))(v18, &v36, 1);
      *(_WORD *)(a1 + 164) = sub_1DDA19E68(*a2);
      *(_WORD *)(a1 + 166) = sub_1DDA19E68(*a2);
      *(_WORD *)(a1 + 168) = sub_1DDA19E68(*a2);
      *(_WORD *)(a1 + 170) = sub_1DDA19E68(*a2);
      *(_WORD *)(a1 + 172) = sub_1DDA19E68(*a2);
      *(_WORD *)(a1 + 174) = sub_1DDA19E68(*a2);
    }
    if (*v12 >= 0xAu)
    {
      *(_DWORD *)(a1 + 176) = sub_1DDA19EC8(*a2);
      *(_DWORD *)(a1 + 180) = sub_1DDA19FB0(*a2);
      if (*(_DWORD *)(a1 + 40) >= 0xBu)
      {
        int v19 = sub_1DDA19FB0(*a2);
        if (v19 >= 1)
        {
          LOWORD(v20) = 0;
          do
          {
            sub_1DDA19EC8(*a2);
            sub_1DDA19EC8(*a2);
            int v20 = (__int16)(v20 + 1);
          }
          while (v20 < v19);
        }
        if (*v12 <= 0xBu)
        {
          *(void *)(a1 + 184) = 0x3FF0000000000000;
        }
        else
        {
          float v21 = COERCE_FLOAT(sub_1DDA19EC8(*a2));
          unsigned int v22 = *(_DWORD *)(a1 + 40);
          *(double *)(a1 + 184) = v21;
          if (v22 >= 0xD)
          {
            *(_DWORD *)(a1 + 192) = sub_1DDA19DA0(*a2);
            int v23 = sub_1DDA19FB0(*a2);
            if (v23 >= 1)
            {
              LOWORD(v24) = 0;
              do
              {
                sub_1DDA19EC8(*a2);
                sub_1DDA19EC8(*a2);
                int v24 = (__int16)(v24 + 1);
              }
              while (v24 < v23);
            }
            goto LABEL_26;
          }
        }
        *(_DWORD *)(a1 + 200) = 25;
        *(void *)(a1 + 224) = 0;
        *(void *)(a1 + 232) = 0;
        *(void *)(a1 + 216) = 0;
        goto LABEL_43;
      }
    }
    *(void *)(a1 + 184) = 0x3FF0000000000000;
LABEL_26:
    unsigned int v25 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 200) = 25;
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 216) = 0;
    if (v25 >= 0xE)
    {
      unsigned int v26 = sub_1DDA19DA0(*a2);
      unsigned int v27 = v26 <= 3 ? v26 : 25;
      *(_DWORD *)(a1 + 200) = v27;
      if (v26 <= 3)
      {
        if (v26 - 2 >= 2)
        {
          if (v26 == 1)
          {
            for (uint64_t i = 0; i != 32; i += 8)
              *(double *)(a1 + 208 + i) = sub_1DDAD36D8(a2);
          }
        }
        else
        {
          unsigned int v28 = sub_1DDA19DA0(*a2);
          if (v28 >= 2) {
            char v29 = 2;
          }
          else {
            char v29 = v28;
          }
          *(unsigned char *)(a1 + 208) = v29;
          uint64_t v30 = 27;
          do
          {
            *(double *)(a1 + 8 * v30) = sub_1DDAD36D8(a2);
            unint64_t v31 = v30 - 27;
            ++v30;
          }
          while (v31 < *(unsigned __int8 *)(a1 + 208));
        }
      }
    }
  }
LABEL_43:
  sub_1DDA1AA18(v40);
  uint64_t v33 = *a2;
  sub_1DDA1B2DC(v40, &v39);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v33 + 40))(v33, v40, 1);
  return a1;
}

void sub_1DDAD3440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

_WORD *sub_1DDAD356C(_WORD *result, unsigned __int16 *a2)
{
  int v2 = *a2;
  void *result = v2;
  if (v2 != (__int16)v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDAD35D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_1DDAD35E4(_WORD *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  void *result = *a2;
  if (v2 >= 0x10000)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDAD3648(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1DDAD365C(_DWORD *result, __int16 *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a2;
  void *result = v2;
  if (v3 != v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDAD36C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDAD36D8(uint64_t *a1)
{
  uint64_t v2 = sub_1DDA19C94(*a1);
  uint64_t v3 = sub_1DDA19EC8(*a1);
  if (v2 == 1) {
    uint64_t v4 = sub_1DDA19EC8(*a1) | (unint64_t)(v3 << 32);
  }
  else {
    uint64_t v4 = v3 | (sub_1DDA19EC8(*a1) << 32);
  }
  return *(double *)&v4;
}

double sub_1DDAD3744@<D0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_1DDAD4584(a1, v4);
  double result = v4[0];
  *(_OWORD *)a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAD3788(void *a1)
{
}

void sub_1DDAD3794(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DDAD37AC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 106) | ((unint64_t)*(unsigned __int16 *)(a1 + 108) << 32);
}

uint64_t sub_1DDAD37BC(_WORD *a1)
{
  uint64_t v2 = (unsigned __int16)a1[55];
  uint64_t v3 = (unsigned __int16)a1[57];
  sub_1DDAD3820(a1);
  sub_1DDAD3874(a1);
  return v2 | (v3 << 32);
}

uint64_t sub_1DDAD3810(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 110);
}

uint64_t sub_1DDAD3818(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 114);
}

uint64_t sub_1DDAD3820(_WORD *a1)
{
  __int16 v3 = a1[53];
  __int16 v4 = *sub_1DDAD46B8(&v3, a1 + 55);
  return (unsigned __int16)*sub_1DDAD46B8(&v4, a1 + 56);
}

uint64_t sub_1DDAD3874(_WORD *a1)
{
  __int16 v3 = a1[54];
  __int16 v4 = *sub_1DDAD46B8(&v3, a1 + 57);
  return (unsigned __int16)*sub_1DDAD46B8(&v4, a1 + 58);
}

uint64_t sub_1DDAD38C8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 112);
}

uint64_t sub_1DDAD38D0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 116);
}

uint64_t sub_1DDAD38D8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 158);
}

uint64_t sub_1DDAD38E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1DDAD38E8(uint64_t a1)
{
  int v1 = (int)(*(double *)(a1 + 96) + 3600.0) % 360;
  switch(v1)
  {
    case 90:
      unsigned int v2 = 6;
      break;
    case 180:
      unsigned int v2 = 3;
      break;
    case 270:
      unsigned int v2 = 8;
      break;
    default:
      unsigned int v2 = 1;
      break;
  }
  unsigned int v4 = v2;
  sub_1DDAD35E4(&v5, &v4);
  return v5;
}

double sub_1DDAD3984(uint64_t a1)
{
  double result = 0.0;
  if (*(_WORD *)(a1 + 164))
  {
    if (*(_WORD *)(a1 + 166)) {
      return (double)*(unsigned __int16 *)(a1 + 164) / (double)*(unsigned __int16 *)(a1 + 166);
    }
  }
  return result;
}

double sub_1DDAD39A8(uint64_t a1)
{
  double result = 0.0;
  if (*(_WORD *)(a1 + 168))
  {
    if (*(_WORD *)(a1 + 170)) {
      return (double)*(unsigned __int16 *)(a1 + 168) / (double)*(unsigned __int16 *)(a1 + 170);
    }
  }
  return result;
}

double sub_1DDAD39CC(uint64_t a1)
{
  double result = 0.0;
  if (*(_WORD *)(a1 + 172))
  {
    if (*(_WORD *)(a1 + 174)) {
      return (double)*(unsigned __int16 *)(a1 + 172) / (double)*(unsigned __int16 *)(a1 + 174);
    }
  }
  return result;
}

uint64_t sub_1DDAD39F0(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 158);
  return sub_1DDAD3A5C(&v2);
}

uint64_t sub_1DDAD3A5C(__int16 *a1)
{
  uint64_t result = *a1;
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDAD3AB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDAD3ACC@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *sub_1DDA24B78(a2, 3uLL);
  *(void *)uint64_t v3 = *(void *)(a1 + 128);
  *(void *)(v3 + 8) = *(void *)(a1 + 136);
  double result = *(double *)(a1 + 144);
  *(double *)(v3 + 16) = result;
  return result;
}

void *sub_1DDAD3B14@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v4 = a1[13];
  int v5 = sub_1DDAD3C04(a1 + 14);
  int v6 = sub_1DDAD3C04(a1 + 15);
  int v7 = sub_1DDAD3C04(a1 + 16);
  int v8 = sub_1DDAD3C04(a1 + 17);
  int v9 = sub_1DDAD3C04(a1 + 18);
  snprintf(__str, 0x14uLL, "%04d:%02d:%02d %02d:%02d:%02d", v4, v5, v6, v7, v8, v9);
  return sub_1DDA1A880(a2, __str);
}

uint64_t sub_1DDAD3C04(_WORD *a1)
{
  if ((unsigned __int16)*a1 >= 0x100u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return *a1;
}

void sub_1DDAD3C68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_1DDAD3C7C(uint64_t a1, unsigned __int16 **a2)
{
  if (getenv("RAWCAMERA_OVERRIDE_STITCHING"))
  {
    int v4 = *(uint64_t (**)(void))(*(void *)*a2 + 16);
    return (unsigned __int16 *)v4();
  }
  else
  {
    double result = *a2;
    if (*((_DWORD *)*a2 + 12) == *(unsigned __int16 *)(a1 + 108)
      && *((_DWORD *)result + 13) == *(unsigned __int16 *)(a1 + 106))
    {
      double result = (unsigned __int16 *)sub_1DDAA7CC0((uint64_t)result);
      int v6 = result;
      int v7 = *((_DWORD *)*a2 + 14);
      int v8 = *(_DWORD *)(a1 + 200);
      if (v8 == 3)
      {
        int v26 = *(unsigned __int8 *)(a1 + 208);
        if (v26 == 2)
        {
          if (*(_WORD *)(a1 + 108))
          {
            int v60 = 0;
            unint64_t v61 = 0;
            double v62 = *(double *)(a1 + 216);
            double v63 = *(double *)(a1 + 224);
            double v64 = *(double *)(a1 + 232);
            LOWORD(v65) = *(_WORD *)(a1 + 106);
            do
            {
              int v132 = 2;
              __int16 v133 = v65;
              double result = sub_1DDAD4738(&v133, &v132);
              unsigned int v65 = *(unsigned __int16 *)(a1 + 106);
              if (v65 >= 2)
              {
                uint64_t v66 = 0;
                uint64_t v67 = &v6[v60];
                double v68 = (v62
                     + v63 * (double)v61
                     + v64 * ((double)v61 * (double)v61))
                    * 0.5;
                uint64_t v69 = &v6[v60 + *result];
                do
                {
                  unsigned int v70 = v67[v66];
                  double v71 = (double)v70;
                  unsigned int v72 = v69[v66];
                  double v73 = (double)v72;
                  double v74 = v71 * v71 * 0.000000238418579;
                  if (v70 > 0x800) {
                    double v74 = 1.0;
                  }
                  double v75 = ((double)v70 - v68) * (1.0 - v74) + v74 * v71;
                  double v76 = v73 * v73 * 0.000000238418579;
                  if (v72 > 0x800) {
                    double v76 = 1.0;
                  }
                  int v77 = (int)(v75 + 0.5);
                  if (v77 >= 0xFFFF) {
                    int v77 = 0xFFFF;
                  }
                  v67[v66] = v77 & ~(unsigned __int16)(v77 >> 31);
                  int v78 = (int)((v68 + v73) * (1.0 - v76) + v76 * v73 + 0.5);
                  if (v78 >= 0xFFFF) {
                    int v78 = 0xFFFF;
                  }
                  v69[v66] = v78 & ~(unsigned __int16)(v78 >> 31);
                  unsigned int v65 = *(unsigned __int16 *)(a1 + 106);
                  ++v66;
                }
                while (v66 < v65 >> 1);
              }
              ++v61;
              v60 += v7;
            }
            while (v61 < *(unsigned __int16 *)(a1 + 108));
          }
        }
        else if (v26 == 1)
        {
          if (*(_WORD *)(a1 + 108))
          {
            int v79 = 0;
            unint64_t v80 = 0;
            double v81 = *(double *)(a1 + 216);
            double v82 = *(double *)(a1 + 224);
            LOWORD(v83) = *(_WORD *)(a1 + 106);
            do
            {
              int v132 = 2;
              __int16 v133 = v83;
              double result = sub_1DDAD4738(&v133, &v132);
              unsigned int v83 = *(unsigned __int16 *)(a1 + 106);
              if (v83 >= 2)
              {
                uint64_t v84 = 0;
                uint64_t v85 = &v6[v79];
                double v86 = (v81 + v82 * (double)v80) * 0.5;
                uint64_t v87 = &v6[v79 + *result];
                do
                {
                  unsigned int v88 = v85[v84];
                  double v89 = (double)v88;
                  unsigned int v90 = v87[v84];
                  double v91 = (double)v90;
                  double v92 = v89 * v89 * 0.000000238418579;
                  if (v88 > 0x800) {
                    double v92 = 1.0;
                  }
                  double v93 = ((double)v88 - v86) * (1.0 - v92) + v92 * v89;
                  double v94 = v91 * v91 * 0.000000238418579;
                  if (v90 > 0x800) {
                    double v94 = 1.0;
                  }
                  int v95 = (int)(v93 + 0.5);
                  if (v95 >= 0xFFFF) {
                    int v95 = 0xFFFF;
                  }
                  v85[v84] = v95 & ~(unsigned __int16)(v95 >> 31);
                  int v96 = (int)((v86 + v91) * (1.0 - v94) + v94 * v91 + 0.5);
                  if (v96 >= 0xFFFF) {
                    int v96 = 0xFFFF;
                  }
                  v87[v84] = v96 & ~(unsigned __int16)(v96 >> 31);
                  unsigned int v83 = *(unsigned __int16 *)(a1 + 106);
                  ++v84;
                }
                while (v84 < v83 >> 1);
              }
              ++v80;
              v79 += v7;
            }
            while (v80 < *(unsigned __int16 *)(a1 + 108));
          }
        }
        else if (!*(unsigned char *)(a1 + 208) && *(_WORD *)(a1 + 108))
        {
          int v27 = 0;
          unint64_t v28 = 0;
          double v29 = *(double *)(a1 + 216) * 0.5;
          LOWORD(v30) = *(_WORD *)(a1 + 106);
          do
          {
            int v132 = 2;
            __int16 v133 = v30;
            double result = sub_1DDAD4738(&v133, &v132);
            unsigned int v30 = *(unsigned __int16 *)(a1 + 106);
            if (v30 >= 2)
            {
              uint64_t v31 = 0;
              double v32 = &v6[v27];
              uint64_t v33 = &v6[v27 + *result];
              do
              {
                unsigned int v34 = v32[v31];
                double v35 = (double)v34;
                unsigned int v36 = v33[v31];
                double v37 = (double)v36;
                double v38 = v35 * v35 * 0.000000238418579;
                if (v34 > 0x800) {
                  double v38 = 1.0;
                }
                double v39 = ((double)v34 - v29) * (1.0 - v38) + v38 * v35;
                double v40 = v37 * v37 * 0.000000238418579;
                if (v36 > 0x800) {
                  double v40 = 1.0;
                }
                int v41 = (int)(v39 + 0.5);
                if (v41 >= 0xFFFF) {
                  int v41 = 0xFFFF;
                }
                v32[v31] = v41 & ~(unsigned __int16)(v41 >> 31);
                int v42 = (int)((v29 + v37) * (1.0 - v40) + v40 * v37 + 0.5);
                if (v42 >= 0xFFFF) {
                  int v42 = 0xFFFF;
                }
                v33[v31] = v42 & ~(unsigned __int16)(v42 >> 31);
                unsigned int v30 = *(unsigned __int16 *)(a1 + 106);
                ++v31;
              }
              while (v31 < v30 >> 1);
            }
            ++v28;
            v27 += v7;
          }
          while (v28 < *(unsigned __int16 *)(a1 + 108));
        }
      }
      else if (v8 == 2)
      {
        int v43 = *(unsigned __int8 *)(a1 + 208);
        if (v43 == 2)
        {
          if (*(_WORD *)(a1 + 108))
          {
            int v97 = 0;
            unint64_t v98 = 0;
            double v99 = *(double *)(a1 + 216);
            double v100 = *(double *)(a1 + 224);
            double v101 = *(double *)(a1 + 232);
            LOWORD(v102) = *(_WORD *)(a1 + 106);
            do
            {
              int v132 = 2;
              __int16 v133 = v102;
              double result = sub_1DDAD4738(&v133, &v132);
              unsigned int v102 = *(unsigned __int16 *)(a1 + 106);
              if (v102 >= 2)
              {
                uint64_t v103 = 0;
                uint64_t v104 = &v6[v97];
                uint64_t v105 = &v6[v97 + *result];
                do
                {
                  unsigned int v106 = v104[v103];
                  double v107 = (double)v106;
                  unsigned int v108 = v105[v103];
                  double v109 = (double)v108;
                  double v110 = v107 * v107 * 0.000000238418579;
                  if (v106 > 0x800) {
                    double v110 = 1.0;
                  }
                  double v111 = (v107 - (v99 + v100 * (double)v106 + v101 * (v107 * v107)) * 0.5) * (1.0 - v110) + v110 * v107;
                  double v112 = v109 * v109 * 0.000000238418579;
                  if (v108 > 0x800) {
                    double v112 = 1.0;
                  }
                  int v113 = (int)(v111 + 0.5);
                  if (v113 >= 0xFFFF) {
                    int v113 = 0xFFFF;
                  }
                  v104[v103] = v113 & ~(unsigned __int16)(v113 >> 31);
                  int v114 = (int)((v109 + (v99 + v100 * (double)v108 + v101 * (v109 * v109)) * 0.5) * (1.0 - v112)
                             + v112 * v109
                             + 0.5);
                  if (v114 >= 0xFFFF) {
                    int v114 = 0xFFFF;
                  }
                  v105[v103] = v114 & ~(unsigned __int16)(v114 >> 31);
                  unsigned int v102 = *(unsigned __int16 *)(a1 + 106);
                  ++v103;
                }
                while (v103 < v102 >> 1);
              }
              ++v98;
              v97 += v7;
            }
            while (v98 < *(unsigned __int16 *)(a1 + 108));
          }
        }
        else if (v43 == 1)
        {
          if (*(_WORD *)(a1 + 108))
          {
            int v115 = 0;
            unint64_t v116 = 0;
            double v117 = *(double *)(a1 + 216);
            double v118 = *(double *)(a1 + 224);
            LOWORD(v119) = *(_WORD *)(a1 + 106);
            do
            {
              int v132 = 2;
              __int16 v133 = v119;
              double result = sub_1DDAD4738(&v133, &v132);
              unsigned int v119 = *(unsigned __int16 *)(a1 + 106);
              if (v119 >= 2)
              {
                uint64_t v120 = 0;
                uint64_t v121 = &v6[v115];
                uint64_t v122 = &v6[v115 + *result];
                do
                {
                  unsigned int v123 = v121[v120];
                  double v124 = (double)v123;
                  unsigned int v125 = v122[v120];
                  double v126 = (double)v125;
                  double v127 = v124 * v124 * 0.000000238418579;
                  if (v123 > 0x800) {
                    double v127 = 1.0;
                  }
                  double v128 = ((double)v123 - (v117 + v118 * (double)v123) * 0.5) * (1.0 - v127) + v127 * v124;
                  double v129 = v126 * v126 * 0.000000238418579;
                  if (v125 > 0x800) {
                    double v129 = 1.0;
                  }
                  int v130 = (int)(v128 + 0.5);
                  if (v130 >= 0xFFFF) {
                    int v130 = 0xFFFF;
                  }
                  v121[v120] = v130 & ~(unsigned __int16)(v130 >> 31);
                  int v131 = (int)((v126 + (v117 + v118 * (double)v125) * 0.5) * (1.0 - v129) + v129 * v126 + 0.5);
                  if (v131 >= 0xFFFF) {
                    int v131 = 0xFFFF;
                  }
                  v122[v120] = v131 & ~(unsigned __int16)(v131 >> 31);
                  unsigned int v119 = *(unsigned __int16 *)(a1 + 106);
                  ++v120;
                }
                while (v120 < v119 >> 1);
              }
              ++v116;
              v115 += v7;
            }
            while (v116 < *(unsigned __int16 *)(a1 + 108));
          }
        }
        else if (!*(unsigned char *)(a1 + 208) && *(_WORD *)(a1 + 108))
        {
          int v44 = 0;
          unint64_t v45 = 0;
          double v46 = *(double *)(a1 + 216) * 0.5;
          LOWORD(v47) = *(_WORD *)(a1 + 106);
          do
          {
            int v132 = 2;
            __int16 v133 = v47;
            double result = sub_1DDAD4738(&v133, &v132);
            unsigned int v47 = *(unsigned __int16 *)(a1 + 106);
            if (v47 >= 2)
            {
              uint64_t v48 = 0;
              CGRect v49 = &v6[v44];
              CGRect v50 = &v49[*result];
              do
              {
                unsigned int v51 = v49[v48];
                double v52 = (double)v51;
                unsigned int v53 = v50[v48];
                double v54 = (double)v53;
                double v55 = v52 * v52 * 0.000000238418579;
                if (v51 > 0x800) {
                  double v55 = 1.0;
                }
                double v56 = ((double)v51 - v46) * (1.0 - v55) + v55 * v52;
                double v57 = v54 * v54 * 0.000000238418579;
                if (v53 > 0x800) {
                  double v57 = 1.0;
                }
                int v58 = (int)(v56 + 0.5);
                if (v58 >= 0xFFFF) {
                  int v58 = 0xFFFF;
                }
                v49[v48] = v58 & ~(unsigned __int16)(v58 >> 31);
                int v59 = (int)((v46 + v54) * (1.0 - v57) + v57 * v54 + 0.5);
                if (v59 >= 0xFFFF) {
                  int v59 = 0xFFFF;
                }
                v50[v48] = v59 & ~(unsigned __int16)(v59 >> 31);
                unsigned int v47 = *(unsigned __int16 *)(a1 + 106);
                ++v48;
              }
              while (v48 < v47 >> 1);
            }
            ++v45;
            v44 += v7;
          }
          while (v45 < *(unsigned __int16 *)(a1 + 108));
        }
      }
      else if (v8 == 1 && *(_WORD *)(a1 + 108))
      {
        int v9 = 0;
        unint64_t v10 = 0;
        LOWORD(v11) = *(_WORD *)(a1 + 106);
        do
        {
          int v132 = 2;
          __int16 v133 = v11;
          double result = sub_1DDAD4738(&v133, &v132);
          unsigned int v11 = *(unsigned __int16 *)(a1 + 106);
          if (v11 >= 2)
          {
            uint64_t v12 = 0;
            int v13 = &v6[v9];
            int v14 = &v13[*result];
            do
            {
              unsigned int v15 = v13[v12];
              double v16 = (double)v15;
              unsigned int v17 = v14[v12];
              double v18 = (double)v17;
              double v19 = *(double *)(a1 + 208 + 8 * ((v12 & 1) + (v10 & 1)));
              double v20 = v16 * v16 * 0.0000152587891;
              if (v15 > 0x100) {
                double v20 = 1.0;
              }
              double v21 = ((double)v15 + v19 * 0.5) * (1.0 - v20) + v20 * v16;
              double v22 = v18 - v19 * 0.5;
              double v23 = v18 * v18 * 0.0000152587891;
              if (v17 > 0x100) {
                double v23 = 1.0;
              }
              int v24 = (int)(v21 + 0.5);
              if (v24 >= 0xFFFF) {
                int v24 = 0xFFFF;
              }
              v13[v12] = v24 & ~(unsigned __int16)(v24 >> 31);
              int v25 = (int)(v22 * (1.0 - v23) + v23 * v18 + 0.5);
              if (v25 >= 0xFFFF) {
                int v25 = 0xFFFF;
              }
              v14[v12] = v25 & ~(unsigned __int16)(v25 >> 31);
              unsigned int v11 = *(unsigned __int16 *)(a1 + 106);
              ++v12;
            }
            while (v12 < v11 >> 1);
          }
          ++v10;
          v9 += v7;
        }
        while (v10 < *(unsigned __int16 *)(a1 + 108));
      }
    }
  }
  return result;
}

void *sub_1DDAD4584@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x108uLL);
  double result = sub_1DDAD45E0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDAD45CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAD45E0(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3968F68;
  sub_1DDAD2B70((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1DDAD4628(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAD463C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3968F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAD465C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3968F68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

_WORD *sub_1DDAD46B8(_WORD *result, unsigned __int16 *a2)
{
  int v2 = *a2;
  int v3 = (unsigned __int16)*result - v2;
  *result -= v2;
  if ((v3 & 0xFFFF0000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDAD4724(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_1DDAD4738(_WORD *result, int *a2)
{
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  void *result = (unsigned __int16)*result / *a2;
  return result;
}

void sub_1DDAD47A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD47B4(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  *(void *)a1 = &unk_1F3968FB8;
  *(void *)(a1 + 96) = 0;
  uint64_t v6 = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  uint64_t v7 = a1 + 128;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v8 = a1 + 256;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v91 = (*(int (**)(void))(*(void *)*a2 + 48))();
  if (*a3 <= 0x1FFu)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v90 = 0;
  uint64_t v9 = *a2;
  LODWORD(v82) = 4;
  sub_1DDA1B3CC(&v87, (unsigned int *)&v82);
  if (!sub_1DDA1A0CC(v9, (unsigned int *)&v87, (uint64_t)__p)) {
    goto LABEL_72;
  }
  unint64_t v10 = (void *)HIBYTE(v90);
  if (v90 < 0) {
    unint64_t v10 = __p[1];
  }
  if (v10 != (void *)4) {
    goto LABEL_72;
  }
  unsigned int v11 = __p;
  if (v90 < 0) {
    unsigned int v11 = (void **)__p[0];
  }
  if (*(_DWORD *)v11 != 1313423687)
  {
LABEL_72:
    unsigned int v70 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v70, "RawCameraException");
    __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (SHIBYTE(v90) < 0) {
    operator delete(__p[0]);
  }
  sub_1DDA19EC8(*a2);
  *(_DWORD *)(a1 + 8) = sub_1DDA19EC8(*a2);
  *(_DWORD *)(a1 + 12) = sub_1DDA19EC8(*a2);
  *(_DWORD *)(a1 + 16) = sub_1DDA19EC8(*a2);
  *(_DWORD *)(a1 + 20) = sub_1DDA19EC8(*a2);
  if (sub_1DDA19EC8(*a2) <= 0x1FF)
  {
    unsigned int v72 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v72, "RawCameraException");
    __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_DWORD *)(a1 + 28) = sub_1DDA19EC8(*a2);
  *(_WORD *)(a1 + 32) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 34) = sub_1DDA19E68(*a2);
  *(unsigned char *)(a1 + 36) = sub_1DDA19DA0(*a2);
  *(unsigned char *)(a1 + 37) = sub_1DDA19DA0(*a2);
  *(unsigned char *)(a1 + 38) = sub_1DDA19DA0(*a2);
  *(unsigned char *)(a1 + 39) = sub_1DDA19DA0(*a2);
  *(unsigned char *)(a1 + 40) = sub_1DDA19DA0(*a2);
  *(unsigned char *)(a1 + 41) = sub_1DDA19DA0(*a2);
  *(_WORD *)(a1 + 42) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 44) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 46) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 48) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 50) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 52) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 54) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 56) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 58) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 60) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 62) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 64) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 66) = sub_1DDA19E68(*a2);
  *(_DWORD *)(a1 + 68) = sub_1DDA19EC8(*a2);
  *(_DWORD *)(a1 + 72) = sub_1DDA19EC8(*a2);
  *(_WORD *)(a1 + 76) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 78) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 80) = sub_1DDA19E68(*a2);
  for (uint64_t i = 82; i != 88; i += 2)
    *(_WORD *)(a1 + i) = sub_1DDA19E68(*a2);
  *(_DWORD *)(a1 + 88) = sub_1DDA19EC8(*a2);
  *(_DWORD *)(a1 + 92) = sub_1DDA19EC8(*a2);
  int v13 = sub_1DDA19EC8(*a2);
  if (v13)
  {
    sub_1DDA49310((uint64_t *)__p, a2);
    uint64_t v14 = *a2;
    LODWORD(v87) = v13;
    int v92 = *sub_1DDAD6AE8(&v87, &v91);
    sub_1DDA1B4D8((int *)&v82, &v92);
    (*(void (**)(uint64_t, long long *, void))(*(void *)v14 + 40))(v14, &v82, 0);
    unsigned int v15 = *(unsigned __int16 *)(a1 + 32);
    if (v15 < 0x1E)
    {
      if (v15 <= 0x13) {
        int v18 = 15;
      }
      else {
        int v18 = 10;
      }
    }
    else
    {
      sub_1DDA19EC8(*a2);
      uint64_t v16 = v8;
      sub_1DDA19EC8(*a2);
      unsigned int v17 = sub_1DDA19EC8(*a2);
      int v18 = sub_1DDA19EC8(*a2);
      uint64_t v19 = *a2;
      *(void *)&long long v87 = v17 - 16;
      sub_1DDA18488(&v82, (unint64_t *)&v87);
      (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v19 + 40))(v19, &v82, 1);
      uint64_t v8 = v16;
    }
    unint64_t v20 = v18 * *(unsigned __int16 *)(a1 + 46);
    if (v20 >= 0x493E0
      || (*(void *)&long long v87 = 2 * v20, LODWORD(v82) = v13, *sub_1DDA88D3C(&v82, &v87) >= *a3))
    {
      double v74 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v74, "RawCameraException");
      __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    sub_1DDA4AFFC(&v87, v20);
    double v21 = *(void **)v6;
    if (*(void *)v6)
    {
      *(void *)(a1 + 104) = v21;
      operator delete(v21);
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
    }
    *(_OWORD *)(a1 + 96) = v87;
    *(void *)(a1 + 112) = v88;
    if (v20)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 4 * v20;
      do
      {
        *(float *)(*(void *)(a1 + 96) + v22) = (float)(int)sub_1DDA19FB0(*a2) / (float)(1 << *(unsigned char *)(a1 + 41));
        v22 += 4;
      }
      while (v23 != v22);
    }
    sub_1DDA1AA18((uint64_t *)__p);
  }
  *(_DWORD *)(a1 + 120) = sub_1DDA19EC8(*a2);
  *(_DWORD *)(a1 + 124) = sub_1DDA19EC8(*a2);
  int v24 = sub_1DDA19EC8(*a2);
  int v92 = v24;
  if (v24)
  {
    __p[0] = (void *)2;
    LODWORD(v87) = v24;
    if (*sub_1DDA88D3C(&v87, __p) >= *a3)
    {
      double v75 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v75, "RawCameraException");
      __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    sub_1DDA49310((uint64_t *)__p, a2);
    uint64_t v25 = *a2;
    LODWORD(v87) = v92;
    int v86 = *sub_1DDAD6AE8(&v87, &v91);
    sub_1DDA1B4D8((int *)&v82, &v86);
    (*(void (**)(uint64_t, long long *, void))(*(void *)v25 + 40))(v25, &v82, 0);
    unsigned int v26 = sub_1DDA19E68(*a2);
    int v86 = 4;
    LODWORD(v87) = v26;
    int v27 = *sub_1DDA75110((int *)&v87, (unsigned int *)&v86);
    *(void *)&long long v87 = 2;
    LODWORD(v82) = v27;
    int v28 = *sub_1DDA1B5D4(&v82, &v87);
    *(void *)&long long v87 = 2;
    LODWORD(v82) = v28;
    LODWORD(v82) = *sub_1DDA88D3C(&v82, &v87);
    if (*sub_1DDA47EF8(&v82, &v92) >= *a3)
    {
      double v76 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v76, "RawCameraException");
      __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v29 = v26;
    sub_1DDAD69B0(&v87, v26);
    unsigned int v30 = *(void **)v7;
    if (*(void *)v7)
    {
      *(void *)(a1 + 136) = v30;
      operator delete(v30);
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    *(_OWORD *)(a1 + 128) = v87;
    *(void *)(a1 + 144) = v88;
    if (v26)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 12 * v29;
      do
      {
        *(_WORD *)(*(void *)v7 + v31) = sub_1DDA19E68(*a2);
        *(_DWORD *)(*(void *)v7 + v31 + 4) = sub_1DDA19E68(*a2);
        *(_WORD *)(*(void *)v7 + v31 + 8) = sub_1DDA19E68(*a2);
        *(_WORD *)(*(void *)v7 + v31 + 10) = sub_1DDA19E68(*a2);
        v31 += 12;
      }
      while (v32 != v31);
    }
    sub_1DDA1AA18((uint64_t *)__p);
  }
  *(_DWORD *)(a1 + 152) = sub_1DDA19EC8(*a2);
  for (uint64_t j = 156; j != 172; j += 2)
    *(_WORD *)(a1 + j) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 172) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 174) = sub_1DDA19E68(*a2);
  *(_DWORD *)(a1 + 176) = sub_1DDA19EC8(*a2);
  *(_DWORD *)(a1 + 180) = sub_1DDA19EC8(*a2);
  int v34 = sub_1DDA19EC8(*a2);
  LODWORD(v82) = 22;
  LODWORD(__p[0]) = v34;
  int v35 = *sub_1DDA1B54C(__p, (int *)&v82);
  __p[0] = (void *)10;
  LODWORD(v87) = v35;
  if (*sub_1DDA88D3C(&v87, __p) >= *a3)
  {
    double v73 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v73, "RawCameraException");
    __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDA49310((uint64_t *)__p, a2);
  uint64_t v36 = *a2;
  LODWORD(v87) = v34;
  int v92 = *sub_1DDAD6AE8(&v87, &v91);
  sub_1DDA1B4D8((int *)&v82, &v92);
  (*(void (**)(uint64_t, long long *, void))(*(void *)v36 + 40))(v36, &v82, 0);
  uint64_t v78 = v8;
  int v37 = sub_1DDA19E68(*a2);
  unsigned int v38 = sub_1DDA19E68(*a2);
  uint64_t v39 = sub_1DDA19E68(*a2);
  int v40 = v39;
  *(void *)(a1 + 200) = v38 | (unint64_t)(v39 << 32);
  int v41 = sub_1DDA19E68(*a2);
  int v42 = sub_1DDA19E68(*a2);
  int v86 = v42;
  if (v37 && v41 && v42 && v38 && v40 && v37 == 1)
  {
    LODWORD(v87) = v41;
    int v43 = *sub_1DDAA4FA8((int *)&v87, &v86);
    int v92 = 4;
    LODWORD(v87) = v43;
    LODWORD(v82) = *sub_1DDAA4FA8((int *)&v87, &v92);
    sub_1DDA1B354(&v85, (unsigned int *)&v82);
    if (v85 >= 0xBEBC201) {
      goto LABEL_79;
    }
    int v84 = 22;
    LODWORD(v87) = v34;
    int v44 = *sub_1DDA1B54C(&v87, &v84);
    *(void *)&long long v87 = 10;
    LODWORD(v82) = v44;
    int v45 = *sub_1DDA88D3C(&v82, &v87);
    *(void *)&long long v82 = 2;
    int v92 = v85;
    int v83 = *sub_1DDA1B5D4(&v92, &v82);
    int v92 = v45;
    if (*sub_1DDA47EF8(&v92, &v83) >= *a3)
    {
LABEL_79:
      int v77 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v77, "RawCameraException");
      __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v46 = *a2;
    LODWORD(v87) = v34;
    int v47 = *sub_1DDAD6AE8(&v87, &v91);
    int v83 = 22;
    LODWORD(v87) = v47;
    int v48 = *sub_1DDA1B54C(&v87, &v83);
    *(void *)&long long v87 = 10;
    LODWORD(v82) = v48;
    int v84 = *sub_1DDA88D3C(&v82, &v87);
    sub_1DDA1B4D8(&v92, &v84);
    (*(void (**)(uint64_t, int *, void))(*(void *)v46 + 40))(v46, &v92, 0);
    *(void *)&long long v82 = 2;
    int v92 = v85;
    CGRect v49 = sub_1DDA1B5D4(&v92, &v82);
    sub_1DDAA520C(*v49, &v87);
    uint64_t v50 = *a2;
    uint64_t v51 = sub_1DDA7EF68(v87);
    *(void *)&long long v82 = 2;
    int v92 = v85;
    double v52 = sub_1DDA1B5D4(&v92, &v82);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v50 + 32))(v50, v51, *v52);
    if (sub_1DDA19C94(*a2) == 1)
    {
      sub_1DDAA55D8(v87);
    }
    else if (sub_1DDA19C94(*a2) == 1)
    {
      sub_1DDAA5590(v87);
    }
    int v84 = 0;
    int v81 = 4;
    int v92 = v41;
    int v83 = *sub_1DDAA4FA8(&v92, &v81);
    int v79 = 4;
    int v92 = v41;
    int v80 = *sub_1DDAA4FA8(&v92, &v79);
    sub_1DDAD6B6C((uint64_t *)&v87, (unsigned int *)&v84, (unsigned int *)&v86, (unsigned int *)&v83, (unsigned int *)&v80, &v82);
    long long v53 = v82;
    long long v82 = 0uLL;
    double v54 = *(std::__shared_weak_count **)(a1 + 192);
    *(_OWORD *)(a1 + 184) = v53;
    if (v54)
    {
      sub_1DDA18310(v54);
      if (*((void *)&v82 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v82 + 1));
      }
    }
    if (*((void *)&v87 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v87 + 1));
    }
  }
  sub_1DDA1AA18((uint64_t *)__p);
  int v55 = 3;
  do
  {
    sub_1DDA19EC8(*a2);
    --v55;
  }
  while (v55);
  *(_WORD *)(a1 + 212) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 214) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 216) = sub_1DDA19E68(*a2);
  for (uint64_t k = 218; k != 228; k += 2)
    *(_WORD *)(a1 + k) = sub_1DDA19E68(*a2);
  uint64_t v57 = 0;
  char v58 = 1;
  do
  {
    char v59 = v58;
    int v60 = sub_1DDA19EC8(*a2);
    char v58 = 0;
    *(_DWORD *)(a1 + 4 * v57 + 228) = v60;
    uint64_t v57 = 1;
  }
  while ((v59 & 1) != 0);
  *(_WORD *)(a1 + 236) = sub_1DDA19E68(*a2);
  *(_WORD *)(a1 + 238) = sub_1DDA19E68(*a2);
  unsigned int v61 = sub_1DDA19E68(*a2);
  sub_1DDA19E68(*a2);
  float v62 = (float)v61 * 0.000061035;
  if (!v61) {
    float v62 = 1.0;
  }
  *(float *)(a1 + 240) = v62;
  *(_DWORD *)(a1 + 244) = sub_1DDA19EC8(*a2);
  *(_DWORD *)(a1 + 248) = sub_1DDA19EC8(*a2);
  sub_1DDA4AFFC(__p, 4uLL);
  double v63 = *(void **)v78;
  if (*(void *)v78)
  {
    *(void *)(a1 + 264) = v63;
    operator delete(v63);
    *(void *)uint64_t v78 = 0;
    *(void *)(v78 + 8) = 0;
    *(void *)(v78 + 16) = 0;
  }
  uint64_t v64 = 0;
  char v65 = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)__p;
  *(void *)(a1 + 272) = v90;
  do
  {
    int v66 = sub_1DDA19E68(*a2);
    int v67 = (__int16)v66;
    v65 |= v66 != 0;
    double v68 = *(char **)(a1 + 256);
    *(float *)&v68[v64] = (float)v67 / (float)(0x10000 << *(unsigned char *)(a1 + 41));
    v64 += 4;
  }
  while (v64 != 16);
  if ((v65 & 1) == 0)
  {
    *(void *)(a1 + 264) = v68;
    operator delete(v68);
    *(void *)uint64_t v78 = 0;
    *(void *)(v78 + 8) = 0;
    *(void *)(v78 + 16) = 0;
  }
  *(_DWORD *)(a1 + 280) = sub_1DDA19EC8(*a2);
  *(_DWORD *)(a1 + 284) = sub_1DDA19EC8(*a2);
  return a1;
}

void sub_1DDAD5644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18) {
    sub_1DDA18310(a18);
  }
  sub_1DDA1AA18((uint64_t *)&__p);
  unsigned int v30 = *a10;
  if (*a10)
  {
    v26[33] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (std::__shared_weak_count *)v26[24];
  if (v31) {
    sub_1DDA18310(v31);
  }
  uint64_t v32 = *v28;
  if (*v28)
  {
    v26[17] = v32;
    operator delete(v32);
  }
  uint64_t v33 = *v27;
  if (*v27)
  {
    v26[13] = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

double sub_1DDAD5844@<D0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_1DDAD6D50(a1, a2, v5);
  double result = v5[0];
  *(_OWORD *)a3 = *(_OWORD *)v5;
  return result;
}

void sub_1DDAD588C(void *a1)
{
}

void sub_1DDAD5898(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAD58B0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*(_DWORD *)(*a2 + 48) == *(unsigned __int16 *)(a1 + 46))
  {
    int v4 = *(_DWORD *)(result + 52);
    if (v4 == *(unsigned __int16 *)(a1 + 44)
      && *(_DWORD *)(result + 56) == v4
      && *(void *)(a1 + 104) != *(void *)(a1 + 96))
    {
      sub_1DDAA7CC0(result);
      operator new[]();
    }
  }
  return result;
}

void sub_1DDAD5FC4(_Unwind_Exception *a1)
{
  MEMORY[0x1E01C3DA0](v1, 0x1000C8052888210);
  if (v2) {
    MEMORY[0x1E01C3DA0](v2, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

void sub_1DDAD6044(uint64_t a1, uint64_t *a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 184);
  if (v2)
  {
    unsigned int v4 = *(unsigned __int16 *)(a1 + 44);
    if (v4 >> 4 > 0x270) {
      goto LABEL_48;
    }
    unsigned int v5 = *(unsigned __int16 *)(a1 + 46);
    if (v5 >> 4 > 0x270) {
      goto LABEL_48;
    }
    uint64_t v8 = v2 + 48;
    int v7 = *(_DWORD *)(v2 + 48);
    unsigned int v6 = *(_DWORD *)(v8 + 4);
    unsigned int v9 = (v6 >> 2) * *(_DWORD *)(a1 + 200);
    unsigned int v10 = v7 * *(_DWORD *)(a1 + 204);
    if (v4 < v9 || v5 < v10) {
      goto LABEL_48;
    }
    unsigned int v12 = ((v4 - v9) >> 1) & 0x7FFFFFFE;
    int v13 = v9 + v12 - 2;
    BOOL v14 = v12 < v4 >> 1 && (int)(v4 >> 1) < v13;
    BOOL v15 = v14 && v13 <= (int)v4;
    if (!v15
      || ((unsigned int v16 = ((v5 - v10) >> 1) & 0x7FFFFFFE, v17 = v10 + v16 - 2, v16 < v5 >> 1)
        ? (BOOL v18 = (int)(v5 >> 1) < v17)
        : (BOOL v18 = 0),
          v18 ? (BOOL v19 = v17 <= (int)v5) : (BOOL v19 = 0),
          !v19))
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v21 = v7 * v6;
    sub_1DDA4A844(v70, v21);
    sub_1DDA4A844(v69, v21);
    char v58 = a2;
    sub_1DDA4AFFC(&__p, v21);
    if (v21)
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        unsigned int v23 = *(unsigned __int16 *)(sub_1DDAA7CC0(*(void *)(a1 + 184)) + 2 * i);
        *((_DWORD *)v70[0] + i) = v23;
        if (v23) {
          unsigned int v24 = 0xFFFFFFFF / v23;
        }
        else {
          unsigned int v24 = -1;
        }
        *((_DWORD *)v69[0] + i) = v24;
      }
    }
    uint64_t v25 = (const unsigned __int16 *)sub_1DDAA7CC0(*(void *)(a1 + 184));
    vDSP_vfltu16(v25, 1, (float *)__p, 1, (v68 - (unsigned char *)__p) >> 2);
    int v26 = (v9 >> 1) & 0xFFFE;
    int v27 = (v10 >> 1) & 0xFFFE;
    int v28 = (float *)((char *)__p
                  + 4
                  * (int)((*(_DWORD *)(*(void *)(a1 + 184) + 52) & 0xFFFFFFFC)
                        * ((v27 / *(_DWORD *)(a1 + 204)) >> 1)
                        + 4 * ((v26 / *(_DWORD *)(a1 + 200)) >> 1)));
    unint64_t v65 = llroundf((float)(*v28 / (float)((float)((float)(*v28 + v28[1]) + v28[2]) + v28[3])) * 16384.0);
    sub_1DDA1B2DC(&v66, (uint64_t *)&v65);
    uint64_t v29 = (float *)((char *)__p
                  + 4
                  * (int)((*(_DWORD *)(*(void *)(a1 + 184) + 52) & 0xFFFFFFFC)
                        * ((v27 / *(_DWORD *)(a1 + 204)) >> 1)
                        + 4 * (((v26 | 1) / *(_DWORD *)(a1 + 200)) >> 1)));
    float v30 = v29[1];
    float v31 = v29[3];
    float v32 = (float)(v30 + *v29) + v29[2];
    v71[0] = v66;
    unint64_t v63 = llroundf((float)(v30 / (float)(v32 + v31)) * 16384.0);
    sub_1DDA1B2DC(&v64, (uint64_t *)&v63);
    v71[1] = v64;
    uint64_t v33 = (float *)((char *)__p
                  + 4
                  * (int)((*(_DWORD *)(*(void *)(a1 + 184) + 52) & 0xFFFFFFFC)
                        * (((v27 | 1) / *(_DWORD *)(a1 + 204)) >> 1)
                        + 4 * ((v26 / *(_DWORD *)(a1 + 200)) >> 1)));
    unint64_t v61 = llroundf((float)(v33[2] / (float)(v33[3] + (float)(v33[2] + (float)(*v33 + v33[1])))) * 16384.0);
    sub_1DDA1B2DC(&v62, (uint64_t *)&v61);
    void v71[2] = v62;
    int v34 = (float *)((char *)__p
                  + 4
                  * (int)((*(_DWORD *)(*(void *)(a1 + 184) + 52) & 0xFFFFFFFC)
                        * (((v27 | 1) / *(_DWORD *)(a1 + 204)) >> 1)
                        + 4 * (((v26 | 1) / *(_DWORD *)(a1 + 200)) >> 1)));
    unint64_t v59 = llroundf((float)(v34[3] / (float)((float)((float)(*v34 + v34[1]) + v34[2]) + v34[3])) * 16384.0);
    sub_1DDA1B2DC(&v60, (uint64_t *)&v59);
    v71[3] = v60;
    int v35 = *(_DWORD *)(a1 + 200);
    uint64_t v36 = (_WORD *)sub_1DDAA7CC0(*v58);
    unsigned int v37 = *(unsigned __int16 *)(a1 + 46);
    if (*(_WORD *)(a1 + 46))
    {
      int v38 = 0;
      unsigned int v39 = 0;
      int v40 = *(_DWORD *)(a1 + 204);
      int v41 = *(_DWORD *)(*(void *)(a1 + 184) + 52);
      int v42 = (int *)v69[0];
      int v43 = (char *)v70[0];
      unsigned int v44 = *(unsigned __int16 *)(a1 + 44);
      do
      {
        if (v44)
        {
          unsigned int v45 = 0;
          int v46 = v38 + v16 + (v39 & 1) - ((v38 + v17 + (v39 & 1)) & ((int)(v38 + v17 + (v39 & 1)) >> 31));
          int v47 = v41 * (((int)((v39 & 1) - (v46 & (v46 >> 31))) / v40) >> 1);
          unsigned int v48 = v12;
          int v49 = v9 + v12 - 2;
          do
          {
            int v50 = v48 + (v45 & 1) - ((v49 + (v45 & 1)) & ((int)(v49 + (v45 & 1)) >> 31));
            int v51 = v45 & 1 | (2 * (v39 & 1));
            int v52 = v47 + 4 * ((int)(((v45 & 1) - (v50 & (v50 >> 31))) * (0xFFFF / v35)) >> 17);
            uint64_t v53 = v42[v52 + v51];
            double v54 = (int *)&v43[4 * v52];
            int v55 = (int)(((unint64_t)((int)v71[v51] * (v54[1] + (uint64_t)*v54 + v54[2] + (uint64_t)v54[3]) * v53) >> 32)
                      * (unsigned __int16)*v36) >> 14;
            if (v55 >= 0xFFFF) {
              int v55 = 0xFFFF;
            }
            *v36++ = v55 & ~(unsigned __int16)(v55 >> 31);
            ++v45;
            unsigned int v44 = *(unsigned __int16 *)(a1 + 44);
            --v49;
            --v48;
          }
          while (v45 < v44);
          unsigned int v37 = *(unsigned __int16 *)(a1 + 46);
        }
        int v38 = ~v39++;
      }
      while (v39 < v37);
    }
    if (v36 != (_WORD *)(sub_1DDAA7CC0(*v58)
                        + 2 * *(unsigned __int16 *)(a1 + 44) * (unint64_t)*(unsigned __int16 *)(a1 + 46)))
    {
      uint64_t v57 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v57, "RawCameraException");
      __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (__p)
    {
      double v68 = __p;
      operator delete(__p);
    }
    if (v69[0])
    {
      v69[1] = v69[0];
      operator delete(v69[0]);
    }
    if (v70[0])
    {
      v70[1] = v70[0];
      operator delete(v70[0]);
    }
  }
}

void sub_1DDAD65B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAD6644(uint64_t result, uint64_t *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(result + 128);
  if (*(void *)(result + 136) != v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    uint64_t v8 = *(unsigned int *)(*a2 + 48);
    unsigned int v7 = *(_DWORD *)(*a2 + 52);
    do
    {
      if (*(_DWORD *)(v2 + 12 * v5 + 4) != 4)
      {
        unsigned int v33 = v6;
        uint64_t result = sub_1DDAA7CC0(*a2);
        unsigned int v6 = v33;
        unsigned int v9 = *(unsigned __int16 *)(v2 + 12 * v5);
        if (v7 > v9)
        {
          uint64_t v10 = *(unsigned __int16 *)(v2 + 12 * v5 + 8);
          if (v8 > v10)
          {
            unsigned int v11 = v9 - 2;
            unsigned int v12 = v9 + 2;
            do
            {
              if ((v10 & 1) + (v9 & 1) == 1)
              {
                uint64_t v13 = 0;
                int v14 = 0;
                BOOL v15 = &byte_1DDBFB511;
                do
                {
                  unsigned int v16 = v10 + *(v15 - 1);
                  unsigned int v17 = *v15 + v9;
                  if (v16 >= v8 || v17 >= v7) {
                    int v19 = 0;
                  }
                  else {
                    int v19 = *(unsigned __int16 *)(result + 2 * (v17 + v16 * v7));
                  }
                  v15 += 2;
                  v34[v13 + 4] = v19;
                  v14 += v19;
                  ++v13;
                }
                while (v13 != 4);
                uint64_t v20 = 0;
                int v21 = 0;
                do
                {
                  int v22 = 4 * v34[v20 + 4] - v14;
                  if (v22 < 0) {
                    int v22 = v14 - 4 * v34[v20 + 4];
                  }
                  v34[v20] = v22;
                  if (v34[v21] < v22) {
                    int v21 = v20;
                  }
                  ++v20;
                }
                while (v20 != 4);
                double v23 = (double)(v14 - v34[v21 + 4]) / 3.0 + 0.5;
                int v24 = v7 * v10;
              }
              else
              {
                uint64_t v25 = 0;
                int v26 = 0;
                do
                {
                  unsigned int v27 = v10 + *((char *)&unk_1DDBFB510 + v25 + 8);
                  unsigned int v28 = *((char *)&unk_1DDBFB510 + v25 + 9) + v9;
                  if (v27 >= v8 || v28 >= v7) {
                    int v30 = 0;
                  }
                  else {
                    int v30 = *(unsigned __int16 *)(result + 2 * (v28 + v27 * v7));
                  }
                  v25 += 2;
                  v26 += v30;
                }
                while (v25 != 8);
                if (v11 >= v7) {
                  int v31 = 0;
                }
                else {
                  int v31 = *(unsigned __int16 *)(result + 2 * (v11 + v7 * v10));
                }
                int v24 = v7 * v10;
                if (v12 >= v7) {
                  int v32 = 0;
                }
                else {
                  int v32 = *(unsigned __int16 *)(result + 2 * (v24 + v12));
                }
                double v23 = (double)v26 * 0.0732233 + 0.5 + (double)(v32 + v31) * 0.3535534;
              }
              *(_WORD *)(result + 2 * (v24 + v9)) = (int)v23;
              ++v10;
            }
            while (v10 != v8);
          }
        }
      }
      uint64_t v2 = *(void *)(v4 + 128);
      uint64_t v5 = ++v6;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v4 + 136) - v2) >> 2) > v6);
  }
  return result;
}

uint64_t sub_1DDAD68FC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 44);
}

uint64_t sub_1DDAD6904(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 46);
}

uint64_t sub_1DDAD690C(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 52) - *(_WORD *)(a1 + 48));
}

uint64_t sub_1DDAD6920(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 54) - *(_WORD *)(a1 + 50));
}

uint64_t sub_1DDAD6934(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 48);
}

uint64_t sub_1DDAD693C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 50);
}

uint64_t sub_1DDAD6944(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 44) - *(_WORD *)(a1 + 52));
}

uint64_t sub_1DDAD6958(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 46) - *(_WORD *)(a1 + 54));
}

uint64_t sub_1DDAD696C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 66);
}

void sub_1DDAD6978(void *a1)
{
  sub_1DDAD6EAC(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDAD69B0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DDAD6A4C(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DDAD6A30(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1DDAD6A4C(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_1DDA17F78();
  }
  uint64_t result = (char *)sub_1DDAD6AA0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *sub_1DDAD6AA0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_1DDA18058();
  }
  return operator new(12 * a2);
}

_DWORD *sub_1DDAD6AE8(_DWORD *result, void *a2)
{
  uint64_t v2 = *result;
  BOOL v3 = __OFADD__(v2, *a2);
  unint64_t v4 = v2 + *a2;
  char *result = v4;
  if (v3 || HIDWORD(v4))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDAD6B58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAD6B6C(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unsigned int *a5@<X5>, void *a6@<X8>)
{
  unsigned int v12 = operator new(0x58uLL);
  sub_1DDAD6C10(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDAD6BFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAD6C10(void *a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F39601A0;
  sub_1DDAD6C6C((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1DDAD6C58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD6C6C(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  unsigned int v17 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1DDA1B3CC(&v15, a3);
  sub_1DDA1B354(&v14, a4);
  sub_1DDA1B354(&v13, a5);
  sub_1DDA1B354(&v12, a6);
  sub_1DDAA7BA8(a1, &v16, &v15, &v14, &v13, &v12);
  if (v17) {
    sub_1DDA18310(v17);
  }
  return a1;
}

void sub_1DDAD6D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    sub_1DDA18310(v12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDAD6D50@<X0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, void *a3@<X8>)
{
  unsigned int v6 = operator new(0x138uLL);
  uint64_t result = sub_1DDAD6DB4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1DDAD6DA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAD6DB4(void *a1, uint64_t *a2, _DWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3968FE8;
  sub_1DDAD47B4((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1DDAD6DFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAD6E10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3968FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAD6E30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3968FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAD6E84(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1DDAD6EAC(void *a1)
{
  *a1 = &unk_1F3968FB8;
  uint64_t v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)a1[24];
  if (v3) {
    sub_1DDA18310(v3);
  }
  unint64_t v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  size_t v5 = (void *)a1[12];
  if (v5)
  {
    a1[13] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_1DDAD6F28(uint64_t result, void *a2, int a3)
{
  *(void *)uint64_t result = &unk_1F3969038;
  *(void *)(result + 8) = *a2;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void *sub_1DDAD6F58(void *a1)
{
  *a1 = &unk_1F3969038;
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1DDAD6FB0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_1DDAD6FB8()
{
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDAD7000(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAD7014(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  sub_1DDB4E5E4(a3, a4, a5, a6);
  uint64_t v9 = a1[1];
  *(void *)&long long v14 = 0;
  *((void *)&v14 + 1) = v9;
  int v10 = sub_1DDB4E724();
  sub_1DDB4F2E8(&v14, v10, &v13);
  sub_1DDAD71F0(v13, 0);
  sub_1DDB4EE3C(*a6, &v13);
  (*(void (**)(void, uint64_t))(*(void *)v13 + 8))(v13, 1);
  if (*(_DWORD *)(v13 + 44) != 8 || sub_1DDB4F5B4((unsigned int *)v13) != (uint64_t)(int)(3 * a1[1]))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = (*(uint64_t (**)(void, void))(*(void *)v13 + 8))(v13, 0);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, v11);
  if (*((void *)&v13 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v13 + 1));
  }
}

void sub_1DDAD71B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    sub_1DDA18310(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAD71F0(uint64_t result, char a2)
{
  if (*(_DWORD *)(result + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(unsigned char *)(result + 52) = a2;
  return result;
}

void sub_1DDAD7250(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD7264(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

CGColorSpaceRef sub_1DDAD726C(CGColorSpaceRef result, CGColorSpaceRef space)
{
  if (space)
  {
    CGColorSpaceRef v3 = result;
    unint64_t v4 = (const void *)*((void *)result + 3);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t result = CGColorSpaceRetain(space);
    *((void *)v3 + 3) = result;
  }
  return result;
}

void *sub_1DDAD72B0(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (void *)sub_1DDAD6F28(a1, a2, a3);
  void *result = &unk_1F39690A0;
  result[4] = a4;
  result[5] = a5;
  return result;
}

uint64_t sub_1DDAD72F8(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1DDAD7300(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

id sub_1DDAD7308(uint64_t a1)
{
  unint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  sub_1DDA18500(&v9, &v8);
  uint64_t v2 = v9;
  unint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  sub_1DDA18500(&v9, &v8);
  unsigned int v6 = objc_msgSend_stringWithFormat_(NSString, v3, @"{%u, %u}", v4, v5, v2, v9);

  return v6;
}

void sub_1DDAD73D4(void *a1)
{
  sub_1DDAD6F58(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAD740C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = sub_1DDBF0D7C(a1, a2);
  *(void *)uint64_t v5 = &unk_1F3969110;
  *(_OWORD *)(v5 + 16) = 0u;
  unsigned int v6 = (uint64_t *)(v5 + 16);
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 48) = 0;
  for (int i = sub_1DDA19EC8(*a3); i; --i)
  {
    double v8 = sub_1DDA1A030(*a3);
    double v9 = sub_1DDA1A030(*a3);
    double v10 = sub_1DDA1A030(*a3);
    double v11 = sub_1DDA1A030(*a3);
    int v12 = (double *)operator new(0x20uLL);
    unsigned int v17 = v12 + 4;
    BOOL v18 = v12 + 4;
    double *v12 = v8;
    v12[1] = v9;
    v12[2] = v10;
    v12[3] = v11;
    std::string __p = v12;
    sub_1DDAD756C(v6, (uint64_t)&__p);
    if (__p)
    {
      unsigned int v17 = __p;
      operator delete(__p);
    }
  }
  double v13 = sub_1DDA1A030(*a3);
  double v14 = sub_1DDA1A030(*a3);
  *(double *)(a1 + 40) = v13;
  *(double *)(a1 + 48) = v14;
  return a1;
}

void sub_1DDAD7520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t sub_1DDAD756C(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unsigned int v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    double v13 = (char *)sub_1DDA2A160(result, v12);
    double v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)double v14 = 0;
    *(_OWORD *)double v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    sub_1DDAD1044(a1, v16);
    double v8 = (void *)a1[1];
    uint64_t result = sub_1DDA9E384((uint64_t)v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unsigned int v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    double v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1DDAD7698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA9E384((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1DDAD76B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v63[4] = *MEMORY[0x1E4F143B8];
  unint64_t v59 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5);
  int v60 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v5, v6, v7, v8);
  double v13 = *(double ***)(a1 + 16);
  for (int i = *(double ***)(a1 + 24); v13 != i; v13 += 3)
  {
    v62[0] = @"kr0";
    uint64_t v15 = objc_msgSend_numberWithDouble_(NSNumber, v9, v10, v11, v12, **v13);
    v63[0] = v15;
    v62[1] = @"kr1";
    uint64_t v20 = objc_msgSend_numberWithDouble_(NSNumber, v16, v17, v18, v19, (*v13)[1]);
    v63[1] = v20;
    v62[2] = @"kr2";
    uint64_t v25 = objc_msgSend_numberWithDouble_(NSNumber, v21, v22, v23, v24, (*v13)[2]);
    v63[2] = v25;
    v62[3] = @"kr3";
    int v30 = objc_msgSend_numberWithDouble_(NSNumber, v26, v27, v28, v29, (*v13)[3]);
    v63[3] = v30;
    int v32 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v31, (uint64_t)v63, (uint64_t)v62, 4);
    objc_msgSend_addObject_(v60, v33, (uint64_t)v32, v34, v35);
  }
  objc_msgSend_setObject_forKeyedSubscript_(v59, v9, (uint64_t)v60, @"CoefficientSets", v12);
  double v36 = *(double *)(a1 + 48);
  int v41 = objc_msgSend_numberWithDouble_(NSNumber, v37, v38, v39, v40, *(double *)(a1 + 40));
  v61[0] = v41;
  int v46 = objc_msgSend_numberWithDouble_(NSNumber, v42, v43, v44, v45, v36);
  v61[1] = v46;
  int v49 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v47, (uint64_t)v61, 2, v48);
  objc_msgSend_setObject_forKeyedSubscript_(v59, v50, (uint64_t)v49, @"NormalizedCenter", v51);

  int v52 = [RAWOpcodeWarpFisheye alloc];
  double v56 = objc_msgSend_initWithArguments_(v52, v53, (uint64_t)v59, v54, v55);

  return v56;
}

void sub_1DDAD7914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD79A8(uint64_t a1)
{
  *(void *)a1 = &unk_1F3969110;
  CGColorSpaceRef v3 = (void **)(a1 + 16);
  sub_1DDA9E7E4(&v3);
  return a1;
}

uint64_t sub_1DDAD7A00(uint64_t a1)
{
  *(void *)a1 = &unk_1F3969110;
  CGColorSpaceRef v3 = (void **)(a1 + 16);
  sub_1DDA9E7E4(&v3);
  return MEMORY[0x1E01C3DC0](a1, 0x10A1C40C9E8D6FDLL);
}

uint64_t sub_1DDAD7A6C()
{
  return 2;
}

void *sub_1DDAD7A74(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)sub_1DDAD6F28((uint64_t)a1, a2, a3);
  void *v8 = &unk_1F3969158;
  v8[4] = 0;
  v8[5] = 0;
  v8[6] = 0;
  sub_1DDA1D984(v8 + 4, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  sub_1DDA1D984(a1 + 7, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  return a1;
}

void sub_1DDAD7B04(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  sub_1DDAD6F58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD7B34(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
}

uint64_t sub_1DDAD7B44(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2 >= (*(void *)(a1 + 40) - v2) >> 2) {
    return 0;
  }
  else {
    return *(unsigned int *)(v2 + 4 * a2);
  }
}

uint64_t sub_1DDAD7B64(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (a2 >= (*(void *)(a1 + 64) - v2) >> 2) {
    return 0;
  }
  else {
    return *(unsigned int *)(v2 + 4 * a2);
  }
}

uint64_t sub_1DDAD7B84(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 32);
  if (*(unsigned int **)(a1 + 40) == v1) {
    return 0;
  }
  else {
    return *v1;
  }
}

uint64_t sub_1DDAD7BA0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t result = 0;
  uint64_t v4 = v2 - (void)v1;
  if (v4)
  {
    unint64_t v5 = v4 >> 2;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      unsigned int v6 = *v1++;
      result += v6;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t *sub_1DDAD7BD0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_1DDA49310(v22, a2);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) == 1)
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v6 = *a2;
    sub_1DDA1B2DC(&v20, &v21);
    (*(void (**)(uint64_t, int *, void))(*(void *)v6 + 40))(v6, &v20, 0);
    uint64_t v7 = *a2;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a3, v8);
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) != v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v12 = (unint64_t)sub_1DDAD6FB0(a1) >> 32;
    if (v11 != 3 * v12 * sub_1DDAD6FB0(a1))
    {
      uint64_t v18 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v18, "RawCameraException");
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1); ++i)
    {
      uint64_t v21 = 0;
      uint64_t v21 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 80))(a1, i);
      uint64_t v14 = *a2;
      sub_1DDA1B2DC(&v20, &v21);
      (*(void (**)(uint64_t, int *, void))(*(void *)v14 + 40))(v14, &v20, 0);
      uint64_t v15 = *a2;
      uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 88))(a1, i);
      LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, a3, v16);
      if ((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 88))(a1, i) != v15)
      {
        uint64_t v17 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v17, "RawCameraException");
        __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      a3 += (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 88))(a1, i);
    }
  }
  return sub_1DDA1AA18(v22);
}

void sub_1DDAD7FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1DDA1AA18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DDAD8034(void *a1)
{
  sub_1DDAD806C(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDAD806C(void *a1)
{
  *a1 = &unk_1F3969158;
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  CGColorSpaceRef v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }

  return sub_1DDAD6F58(a1);
}

double sub_1DDAD80DC(_OWORD *a1)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void *sub_1DDAD80E8(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_1DDA1808C(a1 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  return a1;
}

uint64_t sub_1DDAD8130(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = a3 * (unint64_t)a2;
  if (!a3)
  {
    if (a2 < 0x64) {
      goto LABEL_5;
    }
LABEL_7:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a3 > 0x63 || a2 > 0x63 || (v4 & 0xFFFFFFFF00000000) != 0) {
    goto LABEL_7;
  }
LABEL_5:
  sub_1DDAD820C(a1 + 8, v4);
  return a1;
}

void sub_1DDAD81E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  unint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_1DDAD820C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_1DDAD9A30((char **)a1, a2 - v2);
  }
}

uint64_t sub_1DDAD8240(uint64_t a1, unsigned int a2, unsigned int a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(a1 + 8) = 0;
  int v12 = (void *)(a1 + 8);
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v13 = a3 * (unint64_t)a2;
  if (!a3)
  {
    if (a2 < 0x64) {
      goto LABEL_5;
    }
LABEL_10:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a3 > 0x63 || a2 > 0x63 || (v13 & 0xFFFFFFFF00000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  sub_1DDAD820C(a1 + 8, v13);
  **(double **)(a1 + 8) = a4;
  int v20 = &a10;
  uint64_t v14 = (*(_DWORD *)(a1 + 4) * *(_DWORD *)a1);
  if (v14 >= 2)
  {
    uint64_t v15 = (uint64_t *)(*v12 + 8);
    uint64_t v16 = v14 - 1;
    do
    {
      uint64_t v17 = v20++;
      *v15++ = *v17;
      --v16;
    }
    while (v16);
  }
  return a1;
}

void sub_1DDAD834C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  unint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD8378(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  BOOL v6 = ((a3 * (unint64_t)a2) & 0xFFFFFFFF00000000) != 0;
  unint64_t v7 = a3 * a2;
  uint64_t v8 = *(void *)(a4 + 8);
  if (v7 != (v8 - *(void *)a4) >> 3) {
    goto LABEL_12;
  }
  if (a3)
  {
    char v9 = a2 > 0x63 || v6;
    if (a3 <= 0x63 && (v9 & 1) == 0) {
      goto LABEL_8;
    }
LABEL_12:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (a2 >= 0x64) {
    goto LABEL_12;
  }
LABEL_8:
  if (a1 + 8 != a4) {
    sub_1DDA25BB0((char *)(a1 + 8), *(char **)a4, v8, v7);
  }
  return a1;
}

void sub_1DDAD8468(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  unint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

double *sub_1DDAD849C@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  double result = (double *)sub_1DDAD8130(a2, a1, a1);
  if (a1)
  {
    unsigned int v5 = 0;
    do
    {
      unsigned int v6 = 0;
      do
      {
        if (v5 == v6) {
          double v7 = 1.0;
        }
        else {
          double v7 = 0.0;
        }
        v9[0] = sub_1DDAD8560(a2, v5);
        v9[1] = v8;
        double result = (double *)sub_1DDAD85FC((uint64_t)v9, v6);
        double *result = v7;
        ++v6;
      }
      while (a1 != v6);
      ++v5;
    }
    while (v5 != a1);
  }
  return result;
}

void sub_1DDAD8544(_Unwind_Exception *exception_object)
{
  CGColorSpaceRef v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAD8560(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  if (*(_DWORD *)(v2 - 4) * a2 >= (unint64_t)((*(void *)(v2 + 8) - v3) >> 3)) {
    sub_1DDA24AD0();
  }
  return *(unsigned int *)(v2 - 4);
}

void sub_1DDAD85E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD85FC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || *(_DWORD *)a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return v2 + 8 * a2;
}

void sub_1DDAD8684(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDAD869C@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t *sub_1DDAD86A8@<X0>(uint64_t *result@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3 = result[1] - *result;
  if (v3 && v3 < 0x319)
  {
    unint64_t v4 = result;
    double result = (uint64_t *)sub_1DDAD8130((uint64_t)a2, v3 >> 3, 1u);
    uint64_t v5 = *v4;
    if (v4[1] != *v4)
    {
      uint64_t v6 = 0;
      unsigned int v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(v5 + 8 * v6);
        v10[0] = sub_1DDAD8560((uint64_t)a2, v7);
        v10[1] = v9;
        double result = (uint64_t *)sub_1DDAD85FC((uint64_t)v10, 0);
        double *result = v8;
        uint64_t v5 = *v4;
        uint64_t v6 = ++v7;
      }
      while (v7 < (unint64_t)((v4[1] - *v4) >> 3));
    }
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void sub_1DDAD8764(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAD8780(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3 = a1[1] - *a1;
  if (v3 && v3 < 0x319)
  {
    uint64_t v5 = (_DWORD *)sub_1DDAD8130((uint64_t)a2, v3 >> 3, v3 >> 3);
    sub_1DDAD8860(v5);
    uint64_t v6 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v7 = 0;
      unsigned int v8 = 0;
      do
      {
        uint64_t v9 = *(void *)(v6 + 8 * v7);
        v11[0] = sub_1DDAD8560((uint64_t)a2, v8);
        v11[1] = v10;
        *(void *)sub_1DDAD85FC((uint64_t)v11, v8) = v9;
        uint64_t v6 = *a1;
        uint64_t v7 = ++v8;
      }
      while (v8 < (unint64_t)((a1[1] - *a1) >> 3));
    }
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
}

void sub_1DDAD8840(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAD8860(_DWORD *a1)
{
  unint64_t v2 = (a1[1] * *a1);
  uint64_t v3 = 0;
  sub_1DDA25B2C(__p, v2, &v3);
  sub_1DDAD96F4(a1, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DDAD88BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAD88D8(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_1DDAD88E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

void *sub_1DDAD88E8(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    *a1 = *(void *)a2;
    long long v5 = 0uLL;
    uint64_t v6 = 0;
    sub_1DDA1808C(&v5, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    uint64_t v3 = (void *)a1[1];
    if (v3)
    {
      a1[2] = v3;
      operator delete(v3);
    }
    *(_OWORD *)(a1 + 1) = v5;
    a1[3] = v6;
  }
  return a1;
}

double *sub_1DDAD8964@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (double *)sub_1DDAD8130(a3, *a1, a1[1]);
  unsigned int v7 = *a1;
  if (*a1 != *a2 || (unsigned int v8 = a1[1], v8 != a2[1]))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v7)
  {
    for (unsigned int i = 0; i < v7; ++i)
    {
      if (v8)
      {
        for (unsigned int j = 0; j < v8; ++j)
        {
          v19[0] = sub_1DDAD8560((uint64_t)a1, i);
          v19[1] = v11;
          double v12 = *(double *)sub_1DDAD85FC((uint64_t)v19, j);
          v18[0] = sub_1DDAD8560((uint64_t)a2, i);
          v18[1] = v13;
          double v14 = *(double *)sub_1DDAD85FC((uint64_t)v18, j);
          v17[0] = sub_1DDAD8560(a3, i);
          v17[1] = v15;
          double result = (double *)sub_1DDAD85FC((uint64_t)v17, j);
          double *result = v12 + v14;
          unsigned int v8 = a1[1];
        }
        unsigned int v7 = *a1;
      }
    }
  }
  return result;
}

void sub_1DDAD8AA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *sub_1DDAD8AE0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double result = (double *)sub_1DDAD8130(a2, *a1, a1[1]);
  unsigned int v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 0;
    unsigned int v9 = a1[1];
    do
    {
      if (v9)
      {
        for (unsigned int i = 0; i < v9; ++i)
        {
          v15[0] = sub_1DDAD8560((uint64_t)a1, v8);
          v15[1] = v11;
          double v12 = *(double *)sub_1DDAD85FC((uint64_t)v15, i);
          v14[0] = sub_1DDAD8560(a2, v8);
          v14[1] = v13;
          double result = (double *)sub_1DDAD85FC((uint64_t)v14, i);
          double *result = v12 * a3;
          unsigned int v9 = a1[1];
        }
        unsigned int v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return result;
}

void sub_1DDAD8BA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *sub_1DDAD8BC8@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (double *)sub_1DDAD8130(a3, *a1, a2[1]);
  if (a1[1] != *a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 0;
    unsigned int v9 = a2[1];
    do
    {
      if (v9)
      {
        for (unsigned int i = 0; i < v9; ++i)
        {
          uint64_t v21 = sub_1DDAD8560(a3, v8);
          uint64_t v22 = v11;
          double result = (double *)sub_1DDAD85FC((uint64_t)&v21, i);
          double *result = 0.0;
          if (a1[1])
          {
            unsigned int v12 = 0;
            do
            {
              uint64_t v21 = sub_1DDAD8560((uint64_t)a1, v8);
              uint64_t v22 = v13;
              double v14 = *(double *)sub_1DDAD85FC((uint64_t)&v21, v12);
              v20[0] = sub_1DDAD8560((uint64_t)a2, v12);
              v20[1] = v15;
              double v16 = *(double *)sub_1DDAD85FC((uint64_t)v20, i);
              v19[0] = sub_1DDAD8560(a3, v8);
              v19[1] = v17;
              double result = (double *)sub_1DDAD85FC((uint64_t)v19, i);
              double *result = *result + v14 * v16;
              ++v12;
            }
            while (v12 < a1[1]);
          }
          unsigned int v9 = a2[1];
        }
        unsigned int v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return result;
}

void sub_1DDAD8D48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *sub_1DDAD8D84@<X0>(unsigned int *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (double *)sub_1DDAD8130(a3, *a1, a1[1]);
  unint64_t v7 = *a1;
  if (v7 != (uint64_t)(a2[1] - *a2) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*a1)
  {
    unint64_t v8 = 0;
    unsigned int v9 = a1[1];
    do
    {
      if (v9)
      {
        for (unsigned int i = 0; i < v9; ++i)
        {
          v17[0] = sub_1DDAD8560((uint64_t)a1, v8);
          v17[1] = v11;
          double v12 = *(double *)sub_1DDAD85FC((uint64_t)v17, i);
          double v13 = *(double *)(*a2 + 8 * v8);
          v16[0] = sub_1DDAD8560(a3, v8);
          v16[1] = v14;
          double result = (double *)sub_1DDAD85FC((uint64_t)v16, i);
          double *result = v12 * v13;
          unsigned int v9 = a1[1];
        }
        unint64_t v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return result;
}

void sub_1DDAD8EA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDAD8EDC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  double result = (void *)sub_1DDAD8130(a2, a1[1], *a1);
  unsigned int v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = 0;
    unsigned int v7 = a1[1];
    do
    {
      if (v7)
      {
        for (unsigned int i = 0; i < v7; ++i)
        {
          v13[0] = sub_1DDAD8560((uint64_t)a1, v6);
          v13[1] = v9;
          uint64_t v10 = *(void *)sub_1DDAD85FC((uint64_t)v13, i);
          v12[0] = sub_1DDAD8560(a2, i);
          v12[1] = v11;
          double result = (void *)sub_1DDAD85FC((uint64_t)v12, v6);
          void *result = v10;
          unsigned int v7 = a1[1];
        }
        unsigned int v5 = *a1;
      }
      ++v6;
    }
    while (v6 < v5);
  }
  return result;
}

void sub_1DDAD8F9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAD8FBC(unsigned int *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = a1[1];
  if (*a1 == 3 && v4 == 3)
  {
    double v36 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)a1, 0));
    unsigned int v37 = v6;
    double v7 = *(double *)sub_1DDAD85FC((uint64_t)&v36, 0);
    double v36 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)a1, 0));
    unsigned int v37 = v8;
    double v9 = *(double *)sub_1DDAD85FC((uint64_t)&v36, 1u);
    double v36 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)a1, 0));
    unsigned int v37 = v10;
    double v11 = *(double *)sub_1DDAD85FC((uint64_t)&v36, 2u);
    double v36 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)a1, 1u));
    unsigned int v37 = v12;
    double v13 = *(double *)sub_1DDAD85FC((uint64_t)&v36, 0);
    double v36 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)a1, 1u));
    unsigned int v37 = v14;
    double v15 = *(double *)sub_1DDAD85FC((uint64_t)&v36, 1u);
    double v36 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)a1, 1u));
    unsigned int v37 = v16;
    double v17 = *(double *)sub_1DDAD85FC((uint64_t)&v36, 2u);
    double v36 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)a1, 2u));
    unsigned int v37 = v18;
    double v19 = *(double *)sub_1DDAD85FC((uint64_t)&v36, 0);
    double v36 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)a1, 2u));
    unsigned int v37 = v20;
    double v21 = *(double *)sub_1DDAD85FC((uint64_t)&v36, 1u);
    double v36 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)a1, 2u));
    unsigned int v37 = v22;
    double v23 = *(double *)sub_1DDAD85FC((uint64_t)&v36, 2u);
    double v36 = v15 * v23 - v21 * v17;
    *(double *)&unsigned int v37 = v21 * v11 - v9 * v23;
    double v38 = v9 * v17 - v15 * v11;
    double v39 = v19 * v17 - v13 * v23;
    double v40 = v7 * v23 - v19 * v11;
    double v41 = v13 * v11 - v7 * v17;
    double v42 = v13 * v21 - v19 * v15;
    double v43 = v19 * v9 - v7 * v21;
    double v44 = v7 * v15 - v13 * v9;
    double v24 = v9 * v39 + v7 * v36 + v11 * v42;
    if (fabs(v24) >= 1.0e-10)
    {
      sub_1DDAD8130((uint64_t)a2, a1[1], *a1);
      uint64_t v25 = 0;
      int v26 = &v36;
      do
      {
        for (uint64_t i = 0; i != 3; ++i)
        {
          double v28 = v26[i];
          uint64_t v33 = sub_1DDAD8560((uint64_t)a2, v25);
          uint64_t v34 = v29;
          *(double *)sub_1DDAD85FC((uint64_t)&v33, i) = v28 / v24;
        }
        ++v25;
        v26 += 3;
      }
      while (v25 != 3);
      return;
    }
LABEL_13:
    *a2 = 0u;
    a2[1] = 0u;
    return;
  }
  if (*a1 == v4) {
    goto LABEL_13;
  }
  sub_1DDAD8EDC(a1, (uint64_t)&v36);
  sub_1DDAD8BC8((unsigned int *)&v36, a1, (uint64_t)&v33);
  sub_1DDAD8FBC(&v30, &v33);
  sub_1DDAD8BC8((unsigned int *)&v30, &v36, (uint64_t)a2);
  if (__p)
  {
    int v32 = __p;
    operator delete(__p);
  }
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  if (*(double *)&v37 != 0.0)
  {
    double v38 = *(double *)&v37;
    operator delete(v37);
  }
}

void sub_1DDAD92CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAD9334@<D0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, _OWORD *a3@<X8>)
{
  if (*a2
    && (unsigned int v5 = a2[1]) != 0
    && ((v6 = a1[1], *a1 != v6) ? (v7 = v6 == *a2) : (v7 = 0), v7 ? (BOOL v8 = *a1 == v5) : (BOOL v8 = 0), v8))
  {
    sub_1DDAD8BC8(a2, a1, (uint64_t)&v13);
    sub_1DDAD8FBC(&v13, &v11);
    int v10 = v11;
    if (v11) {
      sub_1DDAD8BC8((unsigned int *)&v11, a2, (uint64_t)a3);
    }
    if (*((void *)&v11 + 1))
    {
      uint64_t v12 = *((void *)&v11 + 1);
      operator delete(*((void **)&v11 + 1));
    }
    if (v14)
    {
      double v15 = v14;
      operator delete(v14);
    }
    if (!v10)
    {
      double result = 0.0;
      *a3 = 0u;
      a3[1] = 0u;
    }
  }
  else
  {
    sub_1DDAD8FBC(a1, a3);
  }
  return result;
}

void sub_1DDAD9418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

double *sub_1DDAD944C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (a3 <= 1.0e-10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double result = (double *)sub_1DDAD8130(a2, *a1, a1[1]);
  unsigned int v7 = *a1;
  if (*a1)
  {
    unsigned int v8 = 0;
    unsigned int v9 = a1[1];
    do
    {
      if (v9)
      {
        for (unsigned int i = 0; i < v9; ++i)
        {
          v16[0] = sub_1DDAD8560((uint64_t)a1, v8);
          v16[1] = v11;
          double v12 = *(double *)sub_1DDAD85FC((uint64_t)v16, i);
          v15[0] = sub_1DDAD8560(a2, v8);
          v15[1] = v13;
          double result = (double *)sub_1DDAD85FC((uint64_t)v15, i);
          double *result = 1.0 / a3 * round(v12 * a3);
          unsigned int v9 = a1[1];
        }
        unsigned int v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return result;
}

void sub_1DDAD9574(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD95A4(unsigned int *a1, _DWORD *a2, double a3)
{
  unsigned int v3 = *a1;
  if (*a1 != *a2) {
    return 0;
  }
  unsigned int v6 = a1[1];
  if (v6 != a2[1]) {
    return 0;
  }
  if (v3)
  {
    unsigned int v8 = 0;
    while (!v6)
    {
LABEL_13:
      ++v8;
      uint64_t result = 1;
      if (v8 >= v3) {
        return result;
      }
    }
    unsigned int v9 = 0;
    while (1)
    {
      v22[0] = sub_1DDAD8560((uint64_t)a1, v8);
      v22[1] = v10;
      uint64_t v11 = (double *)sub_1DDAD85FC((uint64_t)v22, v9);
      v21[0] = sub_1DDAD8560((uint64_t)a2, v8);
      v21[1] = v12;
      uint64_t v13 = (double *)sub_1DDAD85FC((uint64_t)v21, v9);
      double v14 = *v11 >= *v13 ? *v11 : *v13;
      v20[0] = sub_1DDAD8560((uint64_t)a1, v8);
      v20[1] = v15;
      double v16 = *(double *)sub_1DDAD85FC((uint64_t)v20, v9);
      v19[0] = sub_1DDAD8560((uint64_t)a2, v8);
      v19[1] = v17;
      if (v14 - fmin(v16, *(double *)sub_1DDAD85FC((uint64_t)v19, v9)) > a3) {
        return 0;
      }
      ++v9;
      unsigned int v6 = a1[1];
      if (v9 >= v6)
      {
        unsigned int v3 = *a1;
        goto LABEL_13;
      }
    }
  }
  return 1;
}

char *sub_1DDAD96F4(_DWORD *a1, uint64_t a2)
{
  unsigned int v3 = *(char **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v6 = (v4 - (uint64_t)v3) >> 3;
  if (v6 != a1[1] * *a1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t result = (char *)(a1 + 2);
  if (result != (char *)a2)
  {
    return sub_1DDA25BB0(result, v3, v4, v6);
  }
  return result;
}

void sub_1DDAD9790(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDAD97A4(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (!*a1) {
    return -INFINITY;
  }
  unsigned int v3 = 0;
  unsigned int v4 = a1[1];
  double v5 = -INFINITY;
  do
  {
    if (v4)
    {
      for (unsigned int i = 0; i < v4; ++i)
      {
        v10[0] = sub_1DDAD8560((uint64_t)a1, v3);
        v10[1] = v7;
        unsigned int v8 = (double *)sub_1DDAD85FC((uint64_t)v10, i);
        if (*v8 > v5) {
          double v5 = *v8;
        }
        unsigned int v4 = a1[1];
      }
      unsigned int v1 = *a1;
    }
    ++v3;
  }
  while (v3 < v1);
  return v5;
}

double sub_1DDAD9854(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if (!*a1) {
    return INFINITY;
  }
  unsigned int v3 = 0;
  unsigned int v4 = a1[1];
  double v5 = INFINITY;
  do
  {
    if (v4)
    {
      for (unsigned int i = 0; i < v4; ++i)
      {
        v10[0] = sub_1DDAD8560((uint64_t)a1, v3);
        v10[1] = v7;
        unsigned int v8 = (double *)sub_1DDAD85FC((uint64_t)v10, i);
        if (*v8 < v5) {
          double v5 = *v8;
        }
        unsigned int v4 = a1[1];
      }
      unsigned int v1 = *a1;
    }
    ++v3;
  }
  while (v3 < v1);
  return v5;
}

void *sub_1DDAD9904@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1DDA1808C(a2, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
}

id sub_1DDAD9920(unsigned int *a1)
{
  if (*a1 && (unsigned int v2 = a1[1]) != 0)
  {
    unsigned int v3 = sub_1DDA49F48(v2 * *a1);
    unsigned int v4 = *a1;
    if (*a1)
    {
      unsigned int v5 = 0;
      unsigned int v6 = a1[1];
      do
      {
        if (v6)
        {
          for (unsigned int i = 0; i < v6; ++i)
          {
            unsigned int v8 = NSNumber;
            v20[0] = sub_1DDAD8560((uint64_t)a1, v5);
            v20[1] = v9;
            uint64_t v10 = (double *)sub_1DDAD85FC((uint64_t)v20, i);
            uint64_t v15 = objc_msgSend_numberWithDouble_(v8, v11, v12, v13, v14, *v10);
            objc_msgSend_addObject_(v3, v16, (uint64_t)v15, v17, v18);

            unsigned int v6 = a1[1];
          }
          unsigned int v4 = *a1;
        }
        ++v5;
      }
      while (v5 < v4);
    }
  }
  else
  {
    unsigned int v3 = 0;
  }

  return v3;
}

void sub_1DDAD9A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAD9A30(char **a1, unint64_t a2)
{
  unsigned int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unsigned int v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unsigned int v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_1DDA17F78();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_1DDA1814C(v4, v13);
      unsigned int v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    double v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

id sub_1DDAD9B4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F30058];
  uint64_t v34 = *MEMORY[0x1E4F30038];
  uint64_t v35 = v5;
  v42[0] = MEMORY[0x1E4F1CC38];
  v42[1] = @"com.sony.sr2-raw-image";
  uint64_t v6 = *MEMORY[0x1E4F30050];
  uint64_t v36 = *MEMORY[0x1E4F30018];
  v42[2] = @".sr2.";
  v42[3] = &unk_1F39AED80;
  v42[4] = &unk_1F39AED98;
  uint64_t v7 = objc_msgSend_numberWithUnsignedLong_(NSNumber, a2, (uint64_t)sub_1DDA15E7C, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E4F30040], *MEMORY[0x1E4F30048]);
  void v42[5] = v7;
  uint64_t v37 = *MEMORY[0x1E4F30000];
  uint64_t v11 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v8, (uint64_t)sub_1DDAD9E44, v9, v10);
  v42[6] = v11;
  uint64_t v38 = *MEMORY[0x1E4F30020];
  uint64_t v15 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v12, (uint64_t)sub_1DDAD9E50, v13, v14);
  v42[7] = v15;
  uint64_t v39 = *MEMORY[0x1E4F30008];
  double v19 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v16, (uint64_t)sub_1DDA818EC, v17, v18);
  v42[8] = v19;
  uint64_t v40 = *MEMORY[0x1E4F30028];
  double v23 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v20, (uint64_t)sub_1DDAD9E5C, v21, v22);
  v42[9] = v23;
  uint64_t v41 = *MEMORY[0x1E4F30030];
  uint64_t v27 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v24, (uint64_t)sub_1DDAD9E68, v25, v26);
  v42[10] = v27;
  uint64_t v29 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v43[0] = v29;
  int v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v30, (uint64_t)v43, 1, v31);

  return v32;
}

void sub_1DDAD9DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAD9E44(const void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1DDAD9E50(os_signpost_id_t a1)
{
  return sub_1DDA81764(a1);
}

uint64_t sub_1DDAD9E5C(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA7FF34(a1, a2, a3, &unk_1F39691D0);
}

uint64_t sub_1DDAD9E68(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA82568(a1, a2, a3, &unk_1F39691D0);
}

void sub_1DDAD9E74(void *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  char v11 = a2;
  id v10 = a3;
  id v9 = a4;
  sub_1DDADB86C(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;
}

void sub_1DDAD9EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAD9F10()
{
  return 2;
}

void sub_1DDAD9F18(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  sub_1DDA43480((uint64_t **)a1, a2, a3);
  unsigned int v6 = *a3;
  if (v6 > 0x7305)
  {
    switch(*a3)
    {
      case 0x74A0u:
        uint64_t v14 = a1;
        uint64_t v15 = (uint64_t)a3;
        unsigned int v16 = 2;
        goto LABEL_133;
      case 0x74A1u:
        uint64_t v14 = a1;
        uint64_t v15 = (uint64_t)a3;
        unsigned int v16 = 3;
        goto LABEL_133;
      case 0x74A2u:
        uint64_t v14 = a1;
        uint64_t v15 = (uint64_t)a3;
        unsigned int v16 = 0;
        goto LABEL_133;
      case 0x74A3u:
        uint64_t v14 = a1;
        uint64_t v15 = (uint64_t)a3;
        unsigned int v16 = 1;
LABEL_133:
        sub_1DDADADA4(v14, v15, v16);
        return;
      default:
        if (v6 != 29446)
        {
          if (v6 == 50740 && a3[1] == 1 && *((_DWORD *)a3 + 1) == 4)
          {
            uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
            int v18 = (char)v17;
            if ((v17 & 0x80u) != 0) {
              uint64_t v17 = *(void *)(a2 + 8);
            }
            if (v17 == 4)
            {
              double v19 = v18 >= 0 ? (_DWORD *)a2 : *(_DWORD **)a2;
              if (*v19 == 809780809)
              {
                sub_1DDA27D28(a1, &v54);
                uint64_t v20 = sub_1DDA19C94((uint64_t)v54);
                unsigned int v21 = *((_DWORD *)a3 + 2);
                unsigned int v22 = bswap32(v21);
                if (v20 == 2) {
                  double v23 = (void *)v22;
                }
                else {
                  double v23 = (void *)v21;
                }
                if (v55) {
                  sub_1DDA18310(v55);
                }
                __p[0] = v23;
                sub_1DDA27D28(a1, v52);
                sub_1DDA1B2DC(&__src, (uint64_t *)__p);
                sub_1DDA1A94C((uint64_t *)&v54, (uint64_t *)v52, (uint64_t)&__src, 0);
                if (v52[1]) {
                  sub_1DDA18310((std::__shared_weak_count *)v52[1]);
                }
                if (*(char *)(a2 + 23) >= 0) {
                  size_t v24 = *(unsigned __int8 *)(a2 + 23);
                }
                else {
                  size_t v24 = *(void *)(a2 + 8);
                }
                uint64_t v25 = v52;
                sub_1DDA49688((uint64_t)v52, v24 + 11);
                if (v53 < 0) {
                  uint64_t v25 = (void **)v52[0];
                }
                if (v24)
                {
                  if (*(char *)(a2 + 23) >= 0) {
                    uint64_t v26 = (const void *)a2;
                  }
                  else {
                    uint64_t v26 = *(const void **)a2;
                  }
                  memmove(v25, v26, v24);
                }
                strcpy((char *)v25 + v24, ":SR2Private");
                (*(void (**)(uint64_t, void, void **))(*(void *)a1 + 704))(a1, 0, v52);
                if (SHIBYTE(v53) < 0) {
                  operator delete(v52[0]);
                }
                sub_1DDA1AA18((uint64_t *)&v54);
              }
            }
          }
          return;
        }
        if (a3[1] != 3 || *((_DWORD *)a3 + 1) != 4) {
          return;
        }
        sub_1DDA27D28(a1, v52);
        sub_1DDA3ED68((uint64_t)a3, (uint64_t *)v52, (uint64_t)&v54);
        if (v52[1]) {
          sub_1DDA18310((std::__shared_weak_count *)v52[1]);
        }
        uint64_t v13 = (std::__shared_weak_count *)v54;
        if ((char *)v55 - (unsigned char *)v54 != 8) {
          goto LABEL_127;
        }
        LOWORD(v38) = *((_WORD *)v54 + 2);
        LOWORD(v39) = *((_WORD *)v54 + 3);
        double v40 = (double)v39;
        double v41 = fmax((double)v38, v40);
        LOWORD(v40) = *((_WORD *)v54 + 1);
        double v42 = (double)*(unint64_t *)&v40;
        double v43 = fmax(v42, v41);
        LOWORD(v42) = *(_WORD *)v54;
        __srCC_SHA256_CTX c = COERCE_VOID_(fmax((double)*(unint64_t *)&v42, v43));
        if (*(char *)(a2 + 23) >= 0) {
          size_t v44 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v44 = *(void *)(a2 + 8);
        }
        uint64_t v45 = v52;
        sub_1DDA49688((uint64_t)v52, v44 + 7);
        if (v53 < 0) {
          uint64_t v45 = (void **)v52[0];
        }
        if (v44)
        {
          if (*(char *)(a2 + 23) >= 0) {
            int v46 = (const void *)a2;
          }
          else {
            int v46 = *(const void **)a2;
          }
          memmove(v45, v46, v44);
        }
        strcpy((char *)v45 + v44, ":0x7306");
        __p[0] = v52;
        int v47 = (char *)sub_1DDA52108((uint64_t **)(a1 + 240), v52, (uint64_t)&unk_1DDBFB044, (_OWORD **)__p);
        sub_1DDA25BB0(v47 + 56, (char *)&__src, (uint64_t)&v57, 1uLL);
        break;
    }
    goto LABEL_124;
  }
  if (*a3 <= 0x7220u)
  {
    if (v6 == 29184)
    {
      if (a3[1] == 4 && *((_DWORD *)a3 + 1) == 1) {
        *(_DWORD *)(a1 + 1180) = *((_DWORD *)a3 + 2);
      }
    }
    else if (v6 == 29185 && a3[1] == 4 && *((_DWORD *)a3 + 1) == 1)
    {
      *(_DWORD *)(a1 + 1184) = *((_DWORD *)a3 + 2);
    }
    return;
  }
  if (v6 != 29217)
  {
    if (v6 != 29440)
    {
      if (v6 == 29443 && a3[1] == 3 && *((_DWORD *)a3 + 1) == 4)
      {
        sub_1DDA27D28(a1, v52);
        sub_1DDA3ED68((uint64_t)a3, (uint64_t *)v52, (uint64_t)&v54);
        if (v52[1]) {
          sub_1DDA18310((std::__shared_weak_count *)v52[1]);
        }
        uint64_t v7 = (unsigned __int16 *)v54;
        if ((char *)v55 - (unsigned char *)v54 == 8)
        {
          v52[0] = 0;
          v52[1] = 0;
          uint64_t v53 = 0;
          sub_1DDA51EC4((char *)v52, (unsigned __int16 *)v54, (unsigned __int16 *)v55, 4uLL);
          if (*(char *)(a2 + 23) >= 0) {
            size_t v8 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            size_t v8 = *(void *)(a2 + 8);
          }
          id v9 = __p;
          sub_1DDA49688((uint64_t)__p, v8 + 9);
          if (v49 < 0) {
            id v9 = (void **)__p[0];
          }
          if (v8)
          {
            if (*(char *)(a2 + 23) >= 0) {
              id v10 = (const void *)a2;
            }
            else {
              id v10 = *(const void **)a2;
            }
            memmove(v9, v10, v8);
          }
          strcpy((char *)v9 + v8, ":WBLevels");
          __srCC_SHA256_CTX c = __p;
          char v11 = sub_1DDA52108((uint64_t **)(a1 + 120), __p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&__src);
          uint64_t v12 = (void *)v11[7];
          if (v12)
          {
            v11[8] = v12;
            operator delete(v12);
            v11[7] = 0;
            v11[8] = 0;
            v11[9] = 0;
          }
          *(_OWORD *)(v11 + 7) = *(_OWORD *)v52;
          v11[9] = v53;
          v52[1] = 0;
          uint64_t v53 = 0;
          v52[0] = 0;
          if (SHIBYTE(v49) < 0)
          {
            operator delete(__p[0]);
            if (v52[0])
            {
              v52[1] = v52[0];
              operator delete(v52[0]);
            }
          }
          uint64_t v7 = (unsigned __int16 *)v54;
        }
        if (v7)
        {
          uint64_t v55 = (std::__shared_weak_count *)v7;
          uint64_t v13 = (std::__shared_weak_count *)v7;
LABEL_129:
          operator delete(v13);
          return;
        }
      }
      return;
    }
    if (a3[1] != 3 || *((_DWORD *)a3 + 1) != 4) {
      return;
    }
    sub_1DDA27D28(a1, v52);
    sub_1DDA3ED68((uint64_t)a3, (uint64_t *)v52, (uint64_t)&v54);
    if (v52[1]) {
      sub_1DDA18310((std::__shared_weak_count *)v52[1]);
    }
    uint64_t v13 = (std::__shared_weak_count *)v54;
    if ((char *)v55 - (unsigned char *)v54 != 8)
    {
LABEL_127:
      if (!v13) {
        return;
      }
      uint64_t v55 = v13;
      goto LABEL_129;
    }
    if (*(char *)(a2 + 23) >= 0) {
      size_t v33 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v33 = *(void *)(a2 + 8);
    }
    uint64_t v34 = v52;
    sub_1DDA49688((uint64_t)v52, v33 + 12);
    if (v53 < 0) {
      uint64_t v34 = (void **)v52[0];
    }
    if (v33)
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v35 = (const void *)a2;
      }
      else {
        uint64_t v35 = *(const void **)a2;
      }
      memmove(v34, v35, v33);
    }
    strcpy((char *)v34 + v33, ":BlackLevels");
    __p[1] = 0;
    uint64_t v49 = 0;
    __p[0] = 0;
    sub_1DDA88A70((char *)__p, (unsigned __int16 *)v54, (unsigned __int16 *)v55, ((char *)v55 - (unsigned char *)v54) >> 1);
    __srCC_SHA256_CTX c = v52;
    uint64_t v36 = sub_1DDA4B960((uint64_t **)(a1 + 264), v52, (uint64_t)&unk_1DDBFB044, (long long **)&__src);
    uint64_t v37 = (void *)v36[7];
    if (v37)
    {
      v36[8] = (uint64_t)v37;
      operator delete(v37);
      v36[7] = 0;
      v36[8] = 0;
      v36[9] = 0;
    }
    *(_OWORD *)(v36 + 7) = *(_OWORD *)__p;
    v36[9] = v49;
LABEL_124:
    if (SHIBYTE(v53) < 0) {
      operator delete(v52[0]);
    }
    uint64_t v13 = (std::__shared_weak_count *)v54;
    goto LABEL_127;
  }
  if (a3[1] == 7 && *((_DWORD *)a3 + 1) == 4)
  {
    sub_1DDA27D28(a1, &v54);
    uint64_t v27 = sub_1DDA19C94((uint64_t)v54);
    unsigned int v28 = bswap32(*((_DWORD *)a3 + 2));
    if (v27 == 2) {
      int v29 = v28;
    }
    else {
      int v29 = *((_DWORD *)a3 + 2);
    }
    if (v55) {
      sub_1DDA18310(v55);
    }
    if (*(char *)(a2 + 23) >= 0) {
      size_t v30 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v30 = *(void *)(a2 + 8);
    }
    uint64_t v31 = v50;
    sub_1DDA49688((uint64_t)v50, v30 + 10);
    if (v51 < 0) {
      uint64_t v31 = (void *)v50[0];
    }
    if (v30)
    {
      if (*(char *)(a2 + 23) >= 0) {
        int v32 = (const void *)a2;
      }
      else {
        int v32 = *(const void **)a2;
      }
      memmove(v31, v32, v30);
    }
    strcpy((char *)v31 + v30, ":SR2SubIFD");
    sub_1DDADA8D0(a1, (uint64_t)v50, *(_DWORD *)(a1 + 1180), *(_DWORD *)(a1 + 1184), v29);
    if (v51 < 0)
    {
      uint64_t v13 = (std::__shared_weak_count *)v50[0];
      goto LABEL_129;
    }
  }
}

void sub_1DDADA7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_1DDA1AA18((uint64_t *)&a28);
  _Unwind_Resume(a1);
}

void sub_1DDADA8D0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unsigned int v36 = a3;
  if (a3 && a4 && a4 - 2049 <= 0x37FE && (a4 & 3) == 0)
  {
    uint64_t v8 = 0;
    memset(v37, 0, sizeof(v37));
    do
    {
      a5 = 48828125 * a5 + 1;
      *(_DWORD *)((char *)v37 + v8) = a5;
      v8 += 4;
    }
    while (v8 != 16);
    uint64_t v9 = 0;
    int v10 = DWORD2(v37[0]);
    int v11 = v37[0];
    int v12 = (*((void *)&v37[0] + 1) ^ (unint64_t)LODWORD(v37[0])) >> 31;
    HIDWORD(v37[0]) = v12;
    do
    {
      int v13 = v10 ^ v11;
      int v11 = *(_DWORD *)((char *)v37 + v9 + 4);
      int v10 = v12;
      HIDWORD(v14) = v13;
      LODWORD(v14) = v12 ^ v11;
      int v12 = v14 >> 31;
      *(_DWORD *)((char *)&v37[1] + v9) = v12;
      v9 += 4;
    }
    while (v9 != 492);
    LODWORD(v15) = a4 >> 2;
    sub_1DDA1AD40(__p, a4 >> 2);
    sub_1DDA27D28(a1, &v33);
    sub_1DDA49310(v34, (uint64_t *)&v33);
    if (*((void *)&v33 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v33 + 1));
    }
    sub_1DDA27D28(a1, &v31);
    sub_1DDA29F88((uint64_t *)&v33, &v31, 2);
    if (v32) {
      sub_1DDA18310(v32);
    }
    sub_1DDA27D28(a1, &v31);
    uint64_t v16 = v31;
    sub_1DDA18410(&v30, (int *)&v36);
    (*(void (**)(uint64_t, int *, void))(*(void *)v16 + 40))(v16, &v30, 0);
    if (v32) {
      sub_1DDA18310(v32);
    }
    if (a4 >= 4)
    {
      uint64_t v17 = 0;
      if (v15 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v15;
      }
      do
      {
        sub_1DDA27D28(a1, &v31);
        int v18 = sub_1DDA19EC8(v31);
        *(_DWORD *)((char *)__p[0] + v17) = v18;
        if (v32) {
          sub_1DDA18310(v32);
        }
        v17 += 4;
      }
      while (4 * v15 != v17);
      uint64_t v19 = 0;
      uint64_t v20 = __p[0];
      do
      {
        int v21 = *((_DWORD *)v37 + (((_BYTE)v19 - 64) & 0x7F)) ^ *((_DWORD *)v37 + (((_BYTE)v19 + 0x80) & 0x7F));
        *((_DWORD *)v37 + (((_BYTE)v19 - 1) & 0x7F)) = v21;
        v20[v19++] ^= v21;
      }
      while (v15 != v19);
      unsigned int v22 = (unsigned int *)__p[0];
      do
      {
        *unsigned int v22 = bswap32(*v22);
        ++v22;
        --v15;
      }
      while (v15);
    }
    sub_1DDA2A000((uint64_t *)&v33);
    LODWORD(v31) = a4;
    sub_1DDA199C4((uint64_t)__p[0], (uint64_t)&v31, 0, &v33);
    sub_1DDA19C9C(v33, 1);
    uint64_t v23 = v33;
    uint64_t v31 = -(uint64_t)v36;
    sub_1DDA1B2DC(&v30, &v31);
    sub_1DDA19CAC(v23, &v30);
    uint64_t v24 = v33;
    sub_1DDA18410((int *)&v31, (int *)&v36);
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v24 + 40))(v24, &v31, 0);
    sub_1DDA27D28(a1, &v31);
    long long v25 = v33;
    if (*((void *)&v33 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = *(std::__shared_weak_count **)(a1 + 88);
    *(_OWORD *)(a1 + 80) = v25;
    if (v26) {
      sub_1DDA18310(v26);
    }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 704))(a1, 0, a2);
    uint64_t v28 = v31;
    uint64_t v27 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v29 = *(std::__shared_weak_count **)(a1 + 88);
    *(void *)(a1 + 80) = v28;
    *(void *)(a1 + 88) = v27;
    if (v29) {
      sub_1DDA18310(v29);
    }
    if (v32) {
      sub_1DDA18310(v32);
    }
    if (*((void *)&v33 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v33 + 1));
    }
    sub_1DDA1AA18(v34);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1DDADACD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDADADA4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 3 && *(_WORD *)(a2 + 2) == 5 && *(_DWORD *)(a2 + 4) == 1)
  {
    uint64_t v7 = (*(void (**)(uint64_t))(*(void *)a1 + 400))(a1);
    if (v7)
    {
      double v23 = 0.0;
      sub_1DDA27D28(a1, &v21);
      int v9 = sub_1DDA3E640(a2, &v23, &v21, v8);
      if (v22) {
        sub_1DDA18310(v22);
      }
      if (v9)
      {
        int v10 = sub_1DDA7A98C(v7, (void *)*MEMORY[0x1E4F2F6D8], 0);
        for (unsigned int i = sub_1DDADAF54(v10, @"LensInfo");
              objc_msgSend_count(i, v11, v12, v13, v14) < (unint64_t)a3;
        uint64_t v20 = objc_msgSend_numberWithDouble_(NSNumber, v16, v17, v18, v19, v23);
        sub_1DDADB024(i, v20, a3);
      }
    }
  }
}

void sub_1DDADAF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDADAF54(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v8 = objc_msgSend_objectForKeyedSubscript_(v3, v5, (uint64_t)v4, v6, v7);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v13 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v9, v10, v11, v12);

    double v8 = (void *)v13;
    objc_msgSend_setObject_forKey_(v3, v14, v13, (uint64_t)v4, v15);
  }

  return v8;
}

void sub_1DDADB004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDADB024(void *a1, void *a2, unint64_t a3)
{
  id v13 = a1;
  id v9 = a2;
  if (v13)
  {
    if (!v9 || objc_msgSend_count(v13, v5, v6, v7, v8) < a3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    objc_msgSend_insertObject_atIndex_(v13, v10, (uint64_t)v9, a3, v11);
  }
}

void sub_1DDADB104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __cxa_free_exception(v11);

  _Unwind_Resume(a1);
}

uint64_t sub_1DDADB130(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  uint64_t v2 = sub_1DDA481F0(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDADB18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDADB1A8(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  uint64_t v2 = sub_1DDA48264(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDADB204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DDADB220(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  unint64_t v2 = sub_1DDA48394(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDADB27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDADB298(uint64_t a1)
{
  unsigned int v6 = 1;
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  BOOL v2 = sub_1DDA3FE4C(a1, __p, &v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v2) {
    return v6;
  }
  else {
    return 1;
  }
}

void sub_1DDADB308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDADB324(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X2>, void *a4@<X8>)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 536))(a1) == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 384))(&v9, a1);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424))(a1);
    sub_1DDA58378(&v9, (unint64_t *)&v8, a2, a3, &v11);
    if (v10) {
      sub_1DDA18310(v10);
    }
    *(_OWORD *)a4 = v11;
  }
  else
  {
    sub_1DDA27FC0(a4);
  }
}

void sub_1DDADB46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDADB484(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1DDA1A880(&__p, "sr2");
  unint64_t v4 = a2[2];
  unint64_t v5 = a2[1];
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    uint64_t v45 = a2 + 2;
    if (v10) {
      long long v11 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v10);
    }
    else {
      long long v11 = 0;
    }
    uint64_t v12 = &v11[24 * v7];
    double v41 = v11;
    double v42 = v12;
    size_t v44 = &v11[24 * v10];
    long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v12 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v12 = v13;
    memset(&__p, 0, sizeof(__p));
    double v43 = v12 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v14 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v14;
    if (v15 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1DDA1A880(&__p, "sony");
  unint64_t v17 = a2[1];
  unint64_t v16 = a2[2];
  if (v17 >= v16)
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    uint64_t v45 = a2 + 2;
    if (v22) {
      double v23 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v22);
    }
    else {
      double v23 = 0;
    }
    uint64_t v24 = &v23[24 * v19];
    double v41 = v23;
    double v42 = v24;
    size_t v44 = &v23[24 * v22];
    long long v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v24 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v24 = v25;
    memset(&__p, 0, sizeof(__p));
    double v43 = v24 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v26 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v26;
    if (v27 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v17 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1DDA29B20(a1, &__p);
  unint64_t v29 = a2[1];
  unint64_t v28 = a2[2];
  if (v29 >= v28)
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32) {
      unint64_t v32 = 2 * v33;
    }
    if (v33 >= 0x555555555555555) {
      unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v34 = v32;
    }
    uint64_t v45 = a2 + 2;
    if (v34) {
      uint64_t v35 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v34);
    }
    else {
      uint64_t v35 = 0;
    }
    unsigned int v36 = &v35[24 * v31];
    double v41 = v35;
    double v42 = v36;
    size_t v44 = &v35[24 * v34];
    long long v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v36 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unsigned int v36 = v37;
    memset(&__p, 0, sizeof(__p));
    double v43 = v36 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v38 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v38;
    if (v39 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v29 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1DDADB7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1DDA2A044((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1DDADB834(uint64_t a1)
{
  sub_1DDA49A44(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDADB86C(void *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x4C0uLL);
  sub_1DDADB900(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDADB8EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDADB900(void *a1, void *a2, char *a3, void **a4, void **a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3969538;
  sub_1DDA3F2B0((uint64_t)(a1 + 3), a2, *a3, *a4, *a5);
  a1[3] = &unk_1F3969200;
  return a1;
}

void sub_1DDADB970(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDADB984(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3969538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDADB9A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3969538;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDADB9F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1DDADBA20(uint64_t a1)
{
  int v7 = 0;
  long long v6 = &unk_1F3964DA8;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "IFD0:SR2Private:SR2SubIFD:WBLevels");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v1 + 600))(v1, __p, &v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDADBB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDADBB34(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
    goto LABEL_8;
  }
  uint64_t v8 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v6, a1);
  uint64_t v2 = v6;
  sub_1DDA1A880(__p, "IFD0:SR2Private:SR2SubIFD:0x7306");
  char v3 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(void *)v2 + 240))(v2, __p, &v8);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
  if ((v3 & 1) == 0) {
LABEL_8:
  }
    sub_1DDBD39EC(a1);
  else {
    (*(double (**)(uint64_t))(*(void *)a1 + 848))(a1);
  }
}

void sub_1DDADBC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDADBC98(uint64_t a1@<X0>, void **a2@<X8>)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
    goto LABEL_9;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v9, a1);
  uint64_t v4 = v9;
  sub_1DDA1A880(__p, "IFD0:SR2Private:SR2SubIFD:BlackLevels");
  char v5 = (*(uint64_t (**)(uint64_t, void **, void **, void))(*(void *)v4 + 248))(v4, __p, a2, 0);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    sub_1DDA18310(v10);
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      a2[1] = v6;
      operator delete(v6);
    }
LABEL_9:
    sub_1DDBCFB0C(a1, a2);
  }
}

void sub_1DDADBDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  unint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDADBDF8(uint64_t a1, void *a2)
{
  uint64_t result = (void *)sub_1DDA2BCB8(a1, a2);
  result[38] = result + 39;
  result[39] = 0;
  result[42] = 0;
  result[43] = 0;
  result[40] = 0;
  result[41] = result + 42;
  result[44] = result + 45;
  result[45] = 0;
  result[49] = 0;
  result[50] = 0;
  result[47] = result + 48;
  result[48] = 0;
  result[46] = 0;
  void *result = &unk_1F396A138;
  result[51] = 0;
  result[52] = 0;
  return result;
}

void *sub_1DDADBE5C@<X0>(void *a1@<X8>)
{
  return sub_1DDA1A880(a1, "Adobe");
}

void *sub_1DDADBE6C@<X0>(void *a1@<X8>)
{
  return sub_1DDA1A880(a1, "DNG");
}

void sub_1DDADBE7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(long long **)(a1 + 400);
  char v3 = *(long long **)(a1 + 408);
  if (v3 == v2)
  {
    sub_1DDA2C7D8(a1, a2);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_1DDADD218((char *)a2, v2, v3, 0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v2) >> 3));
  }
}

void sub_1DDADBEAC(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&__p);
  sub_1DDAC8028(&__p, (void **)&v10);
  if (v9) {
    sub_1DDA18310(v9);
  }
  if (!v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1016))(&__p, a1);
  double v4 = (*(double (**)(uint64_t))(*(void *)a1 + 896))(a1);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2168))(a1);
  double v6 = sub_1DDA9BD24(v10);
  sub_1DDB58AB8((uint64_t)&__p, v5, a2, v4, v6);
  if (__p)
  {
    uint64_t v9 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  if (v11) {
    sub_1DDA18310(v11);
  }
}

void sub_1DDADC03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1DDA18310(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDADC080(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(__p);
  sub_1DDAC8028(__p, (void **)&v5);
  if (__p[1]) {
    sub_1DDA18310((std::__shared_weak_count *)__p[1]);
  }
  if (v5)
  {
    if (sub_1DDA9BD2C(v5))
    {
      sub_1DDA9BD70(v5, (uint64_t)__p);
      sub_1DDB39F60((uint64_t)__p, &v4);
      *(_OWORD *)a2 = v4;
      long long v4 = 0uLL;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      *(void *)&long long v4 = sub_1DDA9BD24(v5);
      sub_1DDB39ED8((double *)&v4, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
    }
    if (v6) {
      sub_1DDA18310(v6);
    }
  }
  else
  {
    if (v6) {
      sub_1DDA18310(v6);
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
}

void sub_1DDADC170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v10 - 24);
  if (v12) {
    sub_1DDA18310(v12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDADC1A8(uint64_t a1)
{
  (*(void (**)(double **__return_ptr))(*(void *)a1 + 160))(&v9);
  sub_1DDAC8028((void **)&v9, (void **)&v11);
  if (v10) {
    sub_1DDA18310(v10);
  }
  if (v11)
  {
    if (sub_1DDA9BD2C(v11))
    {
      sub_1DDA9BD70(v11, (uint64_t)&v9);
      uint64_t v2 = v9;
      if ((unint64_t)((char *)v10 - (char *)v9) <= 0xF)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v3 = sqrt(v9[1] + *v9 * 0.18);
      double v4 = 100.0;
    }
    else
    {
      unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
      uint64_t v2 = 0;
      double v3 = sqrt((double)v6 / 100.0) * sub_1DDA9BD24(v11);
      double v4 = 0.2;
    }
    double v5 = fmin(fmax(v3 * v4, 0.1), 5.0);
  }
  else
  {
    uint64_t v2 = 0;
    double v5 = 1.0;
  }
  if (v12) {
    sub_1DDA18310(v12);
  }
  if (v2) {
    operator delete(v2);
  }
  return v5;
}

void sub_1DDADC344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1DDA18310(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDADC38C(uint64_t a1@<X0>, void **a2@<X8>)
{
  unint64_t v33 = 0;
  sub_1DDA25B2C(a2, 4uLL, &v33);
  unint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  long long v30 = 0;
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  int v27 = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v25, a1);
  uint64_t v4 = v25;
  sub_1DDA1A880(&__p, "IFD0:SUBIFD0");
  char v5 = (*(uint64_t (**)(uint64_t, void **, double **, void))(*(void *)v4 + 248))(v4, &__p, &v33, 0);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (v26) {
    sub_1DDA18310(v26);
  }
  if ((v5 & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v25, a1);
    uint64_t v6 = v25;
    sub_1DDA1A880(&__p, "IFD0");
    (*(void (**)(uint64_t, void **, double **, void))(*(void *)v6 + 248))(v6, &__p, &v33, 0);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    if (v26) {
      sub_1DDA18310(v26);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v25, a1);
  uint64_t v7 = v25;
  sub_1DDA1A880(&__p, "IFD0:SUBIFD0:DeltaH");
  char v8 = (*(uint64_t (**)(uint64_t, void **, void **, void))(*(void *)v7 + 248))(v7, &__p, &v30, 0);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (v26) {
    sub_1DDA18310(v26);
  }
  if ((v8 & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v25, a1);
    uint64_t v9 = v25;
    sub_1DDA1A880(&__p, "IFD0:DeltaH");
    (*(void (**)(uint64_t, void **, void **, void))(*(void *)v9 + 248))(v9, &__p, &v30, 0);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    if (v26) {
      sub_1DDA18310(v26);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v25, a1);
  uint64_t v10 = v25;
  sub_1DDA1A880(&__p, "IFD0:SUBIFD0:DeltaV");
  char v11 = (*(uint64_t (**)(uint64_t, void **, void **, void))(*(void *)v10 + 248))(v10, &__p, &v27, 0);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (v26) {
    sub_1DDA18310(v26);
  }
  if ((v11 & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v25, a1);
    uint64_t v12 = v25;
    sub_1DDA1A880(&__p, "IFD0:DeltaV");
    (*(void (**)(uint64_t, void **, void **, void))(*(void *)v12 + 248))(v12, &__p, &v27, 0);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    if (v26) {
      sub_1DDA18310(v26);
    }
  }
  uint64_t v25 = 0;
  sub_1DDA25B2C(&__p, 4uLL, &v25);
  long long v13 = *a2;
  if (*a2)
  {
    a2[1] = v13;
    operator delete(v13);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  uint64_t v14 = (double *)__p;
  *a2 = __p;
  int v15 = (double *)v24;
  *(_OWORD *)(a2 + 1) = v24;
  unint64_t v16 = (double *)v27;
  if (v15 != v14)
  {
    unint64_t v17 = 0;
    long long v18 = v33;
    unint64_t v19 = v34 - v33;
    unint64_t v20 = (double *)v30;
    unint64_t v21 = (v31 - (unsigned char *)v30) >> 3;
    unint64_t v22 = ((char *)v28 - (unsigned char *)v27) >> 3;
    do
    {
      if (v19 > v17) {
        v14[v17] = v18[v17] + v14[v17];
      }
      if (v21 > v17) {
        v14[v17] = v20[v17] + v14[v17];
      }
      if (v22 > v17) {
        v14[v17] = v16[v17] + v14[v17];
      }
      ++v17;
    }
    while (v15 - v14 > (unint64_t)v17);
  }
  if (v16)
  {
    unint64_t v28 = v16;
    operator delete(v16);
  }
  if (v30)
  {
    unint64_t v31 = v30;
    operator delete(v30);
  }
  if (v33)
  {
    unint64_t v34 = v33;
    operator delete(v33);
  }
}

void sub_1DDADC85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  long long v24 = *(void **)(v22 - 56);
  if (v24)
  {
    *(void *)(v22 - 48) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDADC914(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 160))(&v10);
  sub_1DDAC8028((void **)&v10, (void **)&v12);
  if (*((void *)&v10 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (v12)
  {
    sub_1DDA9AC2C(v12, 14, (uint64_t *)&v10);
    uint64_t v1 = v10;
    if (*((void *)&v10 + 1) != (void)v10)
    {
      if (*(void *)v10)
      {
        uint64_t v2 = __dynamic_cast(*(const void **)v10, (const struct __class_type_info *)&unk_1F395A728, (const struct __class_type_info *)&unk_1F3968F40, 0);
        if (v2)
        {
          double v3 = v2;
          uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
          if (v4) {
            atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[3] - v3[2]) >> 3)) | 2) == 3) {
            goto LABEL_17;
          }
          if (v4) {
            sub_1DDA18310(v4);
          }
        }
      }
    }
    sub_1DDA9AC2C(v12, 1, (uint64_t *)&v8);
    sub_1DDA9E130((uint64_t *)&v10);
    long long v10 = v8;
    uint64_t v11 = v9;
    uint64_t v9 = 0;
    long long v8 = 0uLL;
    uint64_t v14 = (void **)&v8;
    sub_1DDA18270(&v14);
    uint64_t v5 = v10;
    if (*((void *)&v10 + 1) == (void)v10
      || !*(void *)v10
      || !__dynamic_cast(*(const void **)v10, (const struct __class_type_info *)&unk_1F395A728, (const struct __class_type_info *)&unk_1F397B960, 0))
    {
LABEL_19:
      *(void *)&long long v8 = &v10;
      sub_1DDA18270((void ***)&v8);
      uint64_t v6 = 7;
      goto LABEL_21;
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v5 + 8);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_17:
    if (v4) {
      sub_1DDA18310(v4);
    }
    goto LABEL_19;
  }
  uint64_t v6 = 0;
LABEL_21:
  if (v13) {
    sub_1DDA18310(v13);
  }
  return v6;
}

void sub_1DDADCB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  a9 = (void **)&a13;
  sub_1DDA18270(&a9);
  int v15 = *(std::__shared_weak_count **)(v13 - 32);
  if (v15) {
    sub_1DDA18310(v15);
  }
  _Unwind_Resume(a1);
}

void sub_1DDADCB5C(uint64_t a1@<X0>, char **a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 160))(&v10);
  sub_1DDAC8028((void **)&v10, (void **)&v12);
  if (*((void *)&v10 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (!v12)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_25;
  }
  sub_1DDA9AC2C(v12, 14, (uint64_t *)&v10);
  uint64_t v3 = v10;
  if (*((void *)&v10 + 1) - (void)v10 == 16)
  {
    if (*(void *)v10)
    {
      uint64_t v4 = __dynamic_cast(*(const void **)v10, (const struct __class_type_info *)&unk_1F395A728, (const struct __class_type_info *)&unk_1F3968F40, 0);
      if (v4)
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[3] - v4[2]) >> 3)) | 2) == 3)
        {
          sub_1DDAD0A64((uint64_t)v4, a2);
          goto LABEL_21;
        }
        if (v5) {
          sub_1DDA18310(v5);
        }
      }
    }
  }
  sub_1DDA9AC2C(v12, 1, (uint64_t *)&v8);
  sub_1DDA9E130((uint64_t *)&v10);
  long long v10 = v8;
  uint64_t v11 = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  uint64_t v14 = (void **)&v8;
  sub_1DDA18270(&v14);
  uint64_t v6 = v10;
  if (*((void *)&v10 + 1) - (void)v10 != 16
    || !*(void *)v10
    || (uint64_t v7 = __dynamic_cast(*(const void **)v10, (const struct __class_type_info *)&unk_1F395A728, (const struct __class_type_info *)&unk_1F397B960, 0)) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_24;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v6 + 8);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[3] - v7[2]) >> 3)) | 2) != 3)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v5) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  sub_1DDB471EC(v7, a2);
LABEL_21:
  if (v5) {
LABEL_22:
  }
    sub_1DDA18310(v5);
LABEL_24:
  *(void *)&long long v8 = &v10;
  sub_1DDA18270((void ***)&v8);
LABEL_25:
  if (v13) {
    sub_1DDA18310(v13);
  }
}

void sub_1DDADCDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13) {
    sub_1DDA18310(v13);
  }
  a9 = (void **)&a13;
  sub_1DDA18270(&a9);
  unint64_t v16 = *(std::__shared_weak_count **)(v14 - 32);
  if (v16) {
    sub_1DDA18310(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DDADCDF8(uint64_t a1)
{
  (*(void (**)(std::__shared_weak_count **__return_ptr))(*(void *)a1 + 160))(&v5);
  sub_1DDAC8028((void **)&v5, (void **)&v7);
  if (v6) {
    sub_1DDA18310(v6);
  }
  if (v7)
  {
    sub_1DDA9AC2C(v7, 9, (uint64_t *)&v5);
    uint64_t v1 = v5;
    if (v5 != v6
      && v5->__vftable
      && __dynamic_cast(v5->__vftable, (const struct __class_type_info *)&unk_1F395A728, (const struct __class_type_info *)&unk_1F3976FA8, 0))
    {
      shared_owners = (std::__shared_weak_count *)v1->__shared_owners_;
      uint64_t v3 = 1;
      if (shared_owners)
      {
        atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_1DDA18310(shared_owners);
      }
    }
    else
    {
      uint64_t v3 = 0;
    }
    uint64_t v9 = &v5;
    sub_1DDA18270((void ***)&v9);
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (v8) {
    sub_1DDA18310(v8);
  }
  return v3;
}

void sub_1DDADCF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1DDA18310(a13);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDADCF30(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2816))(&v4, a1);
  BOOL v2 = v5 != v4;
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
  return v2;
}

double sub_1DDADCFE0(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v3);
  sub_1DDAC8028(&v3, (void **)&v5);
  if (v4) {
    sub_1DDA18310(v4);
  }
  double v1 = 5.0;
  if (v5 && (sub_1DDA9DB18((uint64_t)v5) || sub_1DDA9CB0C(v5))) {
    double v1 = 0.0;
  }
  if (v6) {
    sub_1DDA18310(v6);
  }
  return v1;
}

void sub_1DDADD080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDADD098(uint64_t a1)
{
  double v2 = sub_1DDA2D55C();
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v4, a1);
  sub_1DDAC8028(&v4, (void **)&v6);
  if (v5) {
    sub_1DDA18310(v5);
  }
  if (v6) {
    double v2 = sub_1DDA9BD1C(v6);
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v2;
}

void sub_1DDADD134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDADD14C(uint64_t a1)
{
  *(void *)a1 = &unk_1F396A138;
  uint64_t v3 = (void **)(a1 + 400);
  sub_1DDA2A044(&v3);
  return sub_1DDA2AD98(a1);
}

uint64_t sub_1DDADD1A8(uint64_t a1)
{
  *(void *)a1 = &unk_1F396A138;
  uint64_t v4 = (void **)(a1 + 400);
  sub_1DDA2A044(&v4);
  uint64_t v2 = sub_1DDA2AD98(a1);
  return MEMORY[0x1E01C3DC0](v2, 0x10A1C4009B45E12);
}

char *sub_1DDADD218(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1DDA9E654(result, a4);
    uint64_t result = sub_1DDADD2A0((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_1DDADD280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1DDA2A044(&a9);
  _Unwind_Resume(a1);
}

char *sub_1DDADD2A0(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1DDA2639C(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_1DDA35728((uint64_t)v9);
  return v4;
}

void sub_1DDADD34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

vImage_Error sub_1DDADD534(uint64_t a1, void *a2, size_t a3, uint64_t a4, uint64_t a5, vImagePixelCount a6, vImagePixelCount a7)
{
  id v14 = *(id *)(a1 + 32);
  uint64_t v19 = objc_msgSend_bytes(v14, v15, v16, v17, v18);
  size_t v20 = *(void *)(a1 + 40);
  src.data = (void *)(v19 + v20 * a5 + 4 * a4);
  src.CGFloat height = a7;
  src.CGFloat width = a6;
  src.rowBytes = v20;
  v22.data = a2;
  v22.CGFloat height = a7;
  v22.CGFloat width = a6;
  v22.rowBytes = a3;
  return vImageConvert_PlanarFtoPlanar16F(&src, &v22, 0);
}

void sub_1DDADDCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t sub_1DDADDD20(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = objc_msgSend_kernelWithName_(LTMKernels, a2, @"profileGainTableMap", a4, a5);
  uint64_t v6 = (void *)qword_1EAB8B1D0;
  qword_1EAB8B1D0 = v5;

  uint64_t v9 = qword_1EAB8B1D0;

  return MEMORY[0x1F4181798](v9, sel_setPerservesAlpha_, 1, v7, v8);
}

void sub_1DDADDD7C(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWProfileGainTableMap", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

double sub_1DDADDE04(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (a2)
  {
    long long v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v29.a = *(_OWORD *)(a1 + 32);
    *(_OWORD *)&v29.CC_SHA256_CTX c = v7;
    *(_OWORD *)&v29.tCGFloat x = *(_OWORD *)(a1 + 64);
    CGRect v30 = CGRectApplyAffineTransform(*(CGRect *)&result, &v29);
    CGRect v31 = CGRectIntegral(v30);
    CGFloat x = v31.origin.x;
    CGFloat y = v31.origin.y;
    CGFloat width = v31.size.width;
    CGFloat height = v31.size.height;
    CGFloat v12 = (double)*(unint64_t *)(a1 + 80);
    CGFloat v13 = (double)*(unint64_t *)(a1 + 88);
    v31.origin.CGFloat x = 0.0;
    v31.origin.CGFloat y = 0.0;
    v31.size.CGFloat width = v12;
    v31.size.CGFloat height = v13;
    double MinX = CGRectGetMinX(v31);
    v32.origin.CGFloat x = 0.0;
    v32.origin.CGFloat y = 0.0;
    v32.size.CGFloat width = v12;
    v32.size.CGFloat height = v13;
    double MinY = CGRectGetMinY(v32);
    v33.origin.CGFloat x = 0.0;
    v33.origin.CGFloat y = 0.0;
    v33.size.CGFloat width = v12;
    v33.size.CGFloat height = v13;
    double MaxX = CGRectGetMaxX(v33);
    v34.origin.CGFloat x = 0.0;
    v34.origin.CGFloat y = 0.0;
    v34.size.CGFloat width = v12;
    v34.size.CGFloat height = v13;
    double MaxY = CGRectGetMaxY(v34);
    v35.origin.CGFloat x = x;
    v35.origin.CGFloat y = y;
    v35.size.CGFloat width = width;
    v35.size.CGFloat height = height;
    double v15 = CGRectGetMinX(v35);
    v36.origin.CGFloat x = x;
    v36.origin.CGFloat y = y;
    v36.size.CGFloat width = width;
    v36.size.CGFloat height = height;
    double v16 = CGRectGetMinY(v36);
    v37.origin.CGFloat x = x;
    v37.origin.CGFloat y = y;
    v37.size.CGFloat width = width;
    v37.size.CGFloat height = height;
    double v17 = CGRectGetMaxX(v37);
    v38.origin.CGFloat x = x;
    v38.origin.CGFloat y = y;
    v38.size.CGFloat width = width;
    v38.size.CGFloat height = height;
    double v18 = CGRectGetMaxY(v38);
    double v19 = fmax(v15, MinX);
    double v20 = fmin(v17, MaxX) - v19;
    if (v15 >= MaxX)
    {
      double v20 = 2.0;
      double v19 = MaxX + -1.0;
    }
    if (v17 > MinX)
    {
      double v21 = v19;
    }
    else
    {
      double v20 = 2.0;
      double v21 = MinX + -1.0;
    }
    double v22 = fmax(v16, MinY);
    double v23 = fmin(v18, MaxY) - v22;
    if (v16 >= MaxY)
    {
      double v23 = 2.0;
      double v22 = MaxY + -1.0;
    }
    if (v18 <= MinY) {
      double v24 = 2.0;
    }
    else {
      double v24 = v23;
    }
    if (v18 <= MinY) {
      double v22 = MinY + -1.0;
    }
    double v25 = v21;
    return COERCE_DOUBLE(CGRectInset(*(CGRect *)(&v20 - 2), -1.0, -1.0)) * (double)*(unint64_t *)(a1 + 96);
  }
  return result;
}

void sub_1DDADE100()
{
  if (qword_1EAB8B1D8 != -1) {
    dispatch_once(&qword_1EAB8B1D8, &unk_1F396ACF8);
  }
}

void sub_1DDADE128()
{
  sub_1DDA1A880(v0, "CRawImagePluginBase");
  sub_1DDADE858((uint64_t)&v1, (uint64_t)v0);
}

void sub_1DDADE858(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDADE900(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDADE930@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDADE96C(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDADE96C(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDADE9E0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDADE9CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDADE9E0(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396AD78;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1F398C6A0;
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  return a1;
}

void sub_1DDADEA6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDADEA80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396AD78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDADEAA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396AD78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDADEAF4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDADEB1C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDADEBC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDADEBF4@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDADEC30(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDADEC30(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDADECA4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDADEC90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDADECA4(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396AE08;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3974608;
  return a1;
}

void sub_1DDADED30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDADED44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396AE08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDADED64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396AE08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDADEDB8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDADEDE0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDADEE88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDADEEB8@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDADEEF4(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDADEEF4(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDADEF68(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDADEF54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDADEF68(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396AE98;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F39682B8;
  return a1;
}

void sub_1DDADEFF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDADF008(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396AE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDADF028(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396AE98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDADF07C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDADF0A4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDADF14C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDADF17C@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDADF1B8(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDADF1B8(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDADF22C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDADF218(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDADF22C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396AF28;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F397C7D8;
  return a1;
}

void sub_1DDADF2B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDADF2CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396AF28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDADF2EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396AF28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDADF340(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDADF368(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDADF410(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDADF440@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDADF47C(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDADF47C(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDADF4F0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDADF4DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDADF4F0(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396AFB8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F397F758;
  return a1;
}

void sub_1DDADF57C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDADF590(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396AFB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDADF5B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396AFB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDADF604(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDADF62C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDADF6D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDADF704@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDADF740(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDADF740(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDADF7B4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDADF7A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDADF7B4(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B048;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3966608;
  return a1;
}

void sub_1DDADF840(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDADF854(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDADF874(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B048;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDADF8C8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDADF8F0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDADF998(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDADF9C8@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDADFA04(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDADFA04(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDADFA78(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDADFA64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDADFA78(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B0D8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F39834E8;
  return a1;
}

void sub_1DDADFB04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDADFB18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B0D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDADFB38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B0D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDADFB8C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDADFBB4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDADFC5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDADFC8C@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDADFCC8(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDADFCC8(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDADFD3C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDADFD28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDADFD3C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B168;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3970528;
  return a1;
}

void sub_1DDADFDC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDADFDDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B168;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDADFDFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B168;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDADFE50(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDADFE78(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDADFF20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDADFF50@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDADFF8C(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDADFF8C(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE0000(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDADFFEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE0000(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B1F8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F39659F8;
  return a1;
}

void sub_1DDAE008C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE00A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B1F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE00C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B1F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE0114(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE013C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE01E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE0214@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE0250(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE0250(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE02C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE02B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE02C4(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B288;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F39641C8;
  return a1;
}

void sub_1DDAE0350(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE0364(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE0384(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B288;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE03D8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE0400(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE04A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE04D8@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE0514(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE0514(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE0588(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE0574(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE0588(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B318;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3964E18;
  return a1;
}

void sub_1DDAE0614(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE0628(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE0648(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE069C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE06C4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE076C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE079C@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE07D8(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE07D8(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1B0uLL);
  sub_1DDAE084C((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE0838(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAE084C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F396B3A8;
  sub_1DDA2BCB8(a1 + 24, a2);
  *(void *)(a1 + 328) = a1 + 336;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = a1 + 360;
  *(void *)(a1 + 376) = a1 + 384;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = a1 + 408;
  *(void *)(a1 + 24) = &unk_1F396F870;
  *(unsigned char *)(a1 + 424) = 0;
  *(_WORD *)(a1 + 426) = 0;
  return a1;
}

void sub_1DDAE08E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE08F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B3A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE0914(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B3A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE0968(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE0990(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE0A38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE0A68@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE0AA4(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE0AA4(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE0B18(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE0B04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE0B18(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B438;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3980F18;
  return a1;
}

void sub_1DDAE0BA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE0BB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE0BD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B438;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE0C2C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE0C54(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE0CFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE0D2C@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE0D68(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE0D68(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE0DDC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE0DC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE0DDC(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B4C8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F397DAB8;
  return a1;
}

void sub_1DDAE0E68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE0E7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE0E9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE0EF0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE0F18(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE0FC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE0FF0@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE102C(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE102C(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE10A0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE108C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE10A0(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B558;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3973A58;
  return a1;
}

void sub_1DDAE112C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE1140(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE1160(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B558;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE11B4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE11DC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE1284(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE12B4@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE12F0(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE12F0(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE1364(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE1350(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE1364(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B5E8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3976FD0;
  return a1;
}

void sub_1DDAE13F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE1404(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE1424(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE1478(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE14A0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE1548(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE1578@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE15B4(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE15B4(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE1628(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE1614(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE1628(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B678;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3972E20;
  return a1;
}

void sub_1DDAE16B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE16C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE16E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B678;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE173C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE1764(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE180C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE183C@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE1878(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE1878(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE18EC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE18D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE18EC(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B708;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F39720B8;
  return a1;
}

void sub_1DDAE1978(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE198C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE19AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B708;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE1A00(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE1A28(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE1AD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE1B00@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE1B3C(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE1B3C(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE1BB0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE1B9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE1BB0(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396B798;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F396B7E8;
  return a1;
}

void sub_1DDAE1C3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE1C50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE1C70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396B798;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE1CC4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE1CEC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE1D94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE1DC4@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE1E00(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE1E00(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE1E74(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE1E60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE1E74(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396C3D8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F396C428;
  return a1;
}

void sub_1DDAE1F00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE1F14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396C3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE1F34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396C3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE1F88(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE1FB0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE2058(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE2088@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE20C4(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE20C4(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE2138(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE2124(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE2138(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396D018;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F39714B8;
  return a1;
}

void sub_1DDAE21C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE21D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE21F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D018;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE224C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE2274(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE231C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE234C@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE2388(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE2388(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1B0uLL);
  sub_1DDAE23FC((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE23E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAE23FC(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F396D0A8;
  sub_1DDA2BCB8(a1 + 24, a2);
  *(void *)(a1 + 328) = a1 + 336;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = a1 + 360;
  *(void *)(a1 + 376) = a1 + 384;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = a1 + 408;
  *(void *)(a1 + 24) = &unk_1F39763D0;
  *(_WORD *)(a1 + 424) = 0;
  return a1;
}

void sub_1DDAE248C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE24A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D0A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE24C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D0A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE2514(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE253C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE25E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE2614@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE2650(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE2650(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE26C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE26B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE26C4(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396D138;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F39751E0;
  return a1;
}

void sub_1DDAE2750(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE2764(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE2784(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D138;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE27D8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE2800(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE28A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE28D8@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE2914(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE2914(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE2988(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE2974(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE2988(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396D1C8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F397AB90;
  return a1;
}

void sub_1DDAE2A14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE2A28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D1C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE2A48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D1C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE2A9C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE2AC4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE2B6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE2B9C@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE2BD8(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE2BD8(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE2C4C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE2C38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE2C4C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396D258;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F39793E0;
  return a1;
}

void sub_1DDAE2CD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE2CEC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE2D0C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D258;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE2D60(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE2D88(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE2E30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE2E60@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE2E9C(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE2E9C(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE2F10(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE2EFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE2F10(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396D2E8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3980348;
  return a1;
}

void sub_1DDAE2F9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE2FB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE2FD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE3024(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE304C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE30F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE3124@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE3160(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE3160(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE31D4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE31C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE31D4(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396D378;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F396D3C8;
  return a1;
}

void sub_1DDAE3260(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE3274(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE3294(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396D378;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE32E8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE3310(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE33B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE33E8@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE3424(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE3424(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE3498(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE3484(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE3498(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396DFD8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F39671F8;
  return a1;
}

void sub_1DDAE3524(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE3538(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396DFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE3558(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396DFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE35AC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE35D4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE367C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE36AC@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE36E8(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE36E8(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE375C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE3748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE375C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E068;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F396EA80;
  return a1;
}

void sub_1DDAE37E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE37FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE381C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E068;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE3870(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE3898(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE3940(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE3970@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE39AC(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE39AC(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE3A20(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE3A0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE3A20(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E0F8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3981C60;
  return a1;
}

void sub_1DDAE3AAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE3AC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E0F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE3AE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E0F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE3B34(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE3B5C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE3C04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE3C34@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE3C70(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE3C70(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE3CE4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE3CD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE3CE4(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E188;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3982828;
  return a1;
}

void sub_1DDAE3D70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE3D84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE3DA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E188;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE3DF8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE3E20(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE3EC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE3EF8@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE3F34(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE3F34(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE3FA8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE3F94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE3FA8(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E218;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3969588;
  return a1;
}

void sub_1DDAE4034(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE4048(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE4068(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E218;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE40BC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE40E4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE418C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE41BC@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE41F8(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE41F8(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE426C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE4258(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE426C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E2A8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F397EB28;
  return a1;
}

void sub_1DDAE42F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE430C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E2A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE432C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E2A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE4380(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE43A8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE4450(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE4480@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE44BC(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE44BC(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE4530(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE451C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE4530(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E338;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3984E10;
  return a1;
}

void sub_1DDAE45BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE45D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE45F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E338;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE4644(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE466C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE4714(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE4744@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE4780(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE4780(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE47F4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE47E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE47F4(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E3C8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F398D350;
  return a1;
}

void sub_1DDAE4880(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE4894(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E3C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE48B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E3C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE4908(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE4930(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE49D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE4A08@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE4A44(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE4A44(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE4AB8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE4AA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE4AB8(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E458;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F397BBC0;
  return a1;
}

void sub_1DDAE4B44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE4B58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE4B78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E458;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE4BCC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE4BF4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE4C9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE4CCC@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE4D08(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE4D08(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE4D7C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE4D68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE4D7C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E4E8;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F3978650;
  return a1;
}

void sub_1DDAE4E08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE4E1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E4E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE4E3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E4E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE4E90(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE4EB8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE4F60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE4F90@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE4FCC(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE4FCC(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE5040(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE502C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE5040(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E578;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F398E088;
  return a1;
}

void sub_1DDAE50CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE50E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE5100(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E578;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE5154(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE517C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE5224(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE5254@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE5290(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE5290(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1A8uLL);
  sub_1DDAE5304(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE52F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE5304(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E608;
  sub_1DDA2BCB8((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1F39841B0;
  return a1;
}

void sub_1DDAE5390(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE53A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE53C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E608;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE5418(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAE5440(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE54E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE5518@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE5554(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE5554(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1C0uLL);
  sub_1DDA2A8D0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE55B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE55C8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1DDA2639C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v3 = *(void *)(a2 + 16);
  }
  operator new();
}

void sub_1DDAE5670(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

double sub_1DDAE56A0@<D0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  sub_1DDAE56DC(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1DDAE56DC(void *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x1C0uLL);
  sub_1DDAE5750(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;

  sub_1DDA1AF34((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1DDAE573C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAE5750(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396E6D8;
  sub_1DDADBDF8((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1F39635F8;
  return a1;
}

void sub_1DDAE57B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAE57C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAE57E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396E6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAE583C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDAE5864(uint64_t a1, __CVBuffer *a2, void *a3, const char *a4)
{
  id v7 = a3;
  std::string __p = 0;
  uint64_t v26 = 0;
  sub_1DDA8FAE4(a1, &__p, 0, v7, 0);
  if (v26) {
    sub_1DDA18310(v26);
  }
  *(void *)a1 = &unk_1F396E728;
  id v8 = v7;
  *(void *)(a1 + 2504) = v8;
  *(void *)(a1 + 2512) = 0;
  sub_1DDA1A880(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 1432), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = 5120;
  if (v27 < 0) {
    operator delete(__p);
  }
  sub_1DDA1A880(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 1456), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = 5120;
  if (v27 < 0) {
    operator delete(__p);
  }
  sub_1DDA1A880(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 512), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = 0;
  if (v27 < 0) {
    operator delete(__p);
  }
  int Width = CVPixelBufferGetWidth(a2);
  sub_1DDA1A880(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 536), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = Width;
  if (v27 < 0) {
    operator delete(__p);
  }
  int Height = CVPixelBufferGetHeight(a2);
  sub_1DDA1A880(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 560), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = Height;
  if (v27 < 0) {
    operator delete(__p);
  }
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType <= 1734505011)
  {
    if (PixelFormatType == 1278226742)
    {
      sub_1DDA1A880(&__p, "IFD0");
      p_p = &__p;
      *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = 32803;
      if (v27 < 0) {
        operator delete(__p);
      }
      sub_1DDA1A880(&__p, "IFD0");
      p_p = &__p;
      double v16 = sub_1DDAEB240((uint64_t **)(a1 + 680), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p);
      goto LABEL_42;
    }
    if (PixelFormatType == 1650943796)
    {
      sub_1DDA1A880(&__p, "IFD0");
      p_p = &__p;
      *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = 32803;
      if (v27 < 0) {
        operator delete(__p);
      }
      __srCC_SHA256_CTX c = 65794;
      sub_1DDA1A880(&__p, "IFD0:EXIF");
      p_p = &__p;
      CGFloat v13 = sub_1DDA52108((uint64_t **)(a1 + 992), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p);
      sub_1DDA49578((void *)v13 + 7, (char *)&__src, (char *)&__p, 4uLL);
      if (v27 < 0) {
        operator delete(__p);
      }
      goto LABEL_38;
    }
  }
  else
  {
    switch(PixelFormatType)
    {
      case 1734505012:
        sub_1DDA1A880(&__p, "IFD0");
        p_p = &__p;
        *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = 32803;
        if (v27 < 0) {
          operator delete(__p);
        }
        __srCC_SHA256_CTX c = 16777729;
        sub_1DDA1A880(&__p, "IFD0:EXIF");
        p_p = &__p;
        id v14 = sub_1DDA52108((uint64_t **)(a1 + 992), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p);
        sub_1DDA49578((void *)v14 + 7, (char *)&__src, (char *)&__p, 4uLL);
        if (v27 < 0) {
          operator delete(__p);
        }
        goto LABEL_38;
      case 1735549492:
        sub_1DDA1A880(&__p, "IFD0");
        p_p = &__p;
        *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = 32803;
        if (v27 < 0) {
          operator delete(__p);
        }
        __srCC_SHA256_CTX c = 16908289;
        sub_1DDA1A880(&__p, "IFD0:EXIF");
        p_p = &__p;
        double v15 = sub_1DDA52108((uint64_t **)(a1 + 992), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p);
        sub_1DDA49578((void *)v15 + 7, (char *)&__src, (char *)&__p, 4uLL);
        if (v27 < 0) {
          operator delete(__p);
        }
        goto LABEL_38;
      case 1919379252:
        sub_1DDA1A880(&__p, "IFD0");
        p_p = &__p;
        *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = 32803;
        if (v27 < 0) {
          operator delete(__p);
        }
        __srCC_SHA256_CTX c = 33620224;
        sub_1DDA1A880(&__p, "IFD0:EXIF");
        p_p = &__p;
        CGFloat v12 = sub_1DDA52108((uint64_t **)(a1 + 992), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p);
        sub_1DDA49578((void *)v12 + 7, (char *)&__src, (char *)&__p, 4uLL);
        if (v27 < 0) {
          operator delete(__p);
        }
LABEL_38:
        sub_1DDA1A880(&__p, "IFD0");
        p_p = &__p;
        double v16 = sub_1DDAEB240((uint64_t **)(a1 + 680), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p);
LABEL_42:
        int v20 = 1;
        goto LABEL_43;
    }
  }
  sub_1DDA1A880(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1DDAEB240((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p) + 14) = 34892;
  if (v27 < 0) {
    operator delete(__p);
  }
  sub_1DDA1A880(&__p, "IFD0");
  p_p = &__p;
  double v16 = sub_1DDAEB240((uint64_t **)(a1 + 680), &__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&p_p);
  int v20 = 3;
LABEL_43:
  *((_DWORD *)v16 + 14) = v20;
  if (v27 < 0) {
    operator delete(__p);
  }
  uint64_t v21 = sub_1DDAE60F0(a2, a4, v17, v18, v19);
  double v22 = *(void **)(a1 + 2512);
  *(void *)(a1 + 2512) = v21;

  *(_WORD *)(a1 + 1234) = 3;
  return a1;
}

void sub_1DDAE5FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  sub_1DDA9EBBC(v16);
  _Unwind_Resume(a1);
}

id sub_1DDAE60F0(CVPixelBufferRef pixelBuffer, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v74[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = objc_msgSend_imageWithCVPixelBuffer_(MEMORY[0x1E4F1E050], a2, (uint64_t)pixelBuffer, a4, a5);
    if (v6) {
      goto LABEL_22;
    }
  }
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  uint64_t v6 = 0;
  if (PixelFormatType <= 1735549491)
  {
    if (PixelFormatType == 1278226742 || PixelFormatType == 1650943796) {
      goto LABEL_18;
    }
    int v13 = 1734505012;
LABEL_17:
    if (PixelFormatType != v13) {
      goto LABEL_22;
    }
LABEL_18:
    CFTypeRef arg = 0;
    uint64_t v73 = *MEMORY[0x1E4F24D20];
    v74[0] = MEMORY[0x1E4F1CC08];
    uint64_t v9 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v8, (uint64_t)v74, (uint64_t)&v73, 1, 0);
    size_t Width = CVPixelBufferGetWidth(pixelBuffer);
    size_t Height = CVPixelBufferGetHeight(pixelBuffer);
    if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Width, Height, 0x4C303136u, (CFDictionaryRef)v9, (CVPixelBufferRef *)&arg))
    {
      CFAutorelease(arg);
      if (!CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL) && !CVPixelBufferLockBaseAddress((CVPixelBufferRef)arg, 0))
      {
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        int v20 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)arg);
        size_t v21 = CVPixelBufferGetHeight(pixelBuffer);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        size_t v23 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)arg);
        if (v21)
        {
          size_t v24 = v23;
          do
          {
            memcpy(v20, BaseAddress, BytesPerRow);
            BaseAddress += BytesPerRow;
            v20 += v24;
            --v21;
          }
          while (v21);
        }
        CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)arg, 0);
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
        double v25 = (void *)MEMORY[0x1E4F1E050];
        CFTypeRef v26 = arg;
        uint64_t v71 = *MEMORY[0x1E4F1E390];
        CGRect v31 = objc_msgSend_null(MEMORY[0x1E4F1CA98], v27, v28, v29, v30);
        uint64_t v72 = v31;
        CGRect v33 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v32, (uint64_t)&v72, (uint64_t)&v71, 1);
        uint64_t v6 = objc_msgSend_imageWithCVPixelBuffer_options_(v25, v34, (uint64_t)v26, (uint64_t)v33, v35);

        goto LABEL_22;
      }
    }
    goto LABEL_21;
  }
  if (PixelFormatType > 1815491697)
  {
    if (PixelFormatType == 1815491698)
    {
      CFTypeRef arg = 0;
      uint64_t v69 = *MEMORY[0x1E4F24D20];
      uint64_t v70 = MEMORY[0x1E4F1CC08];
      uint64_t v9 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v8, (uint64_t)&v70, (uint64_t)&v69, 1);
      size_t v17 = CVPixelBufferGetWidth(pixelBuffer);
      size_t v18 = CVPixelBufferGetHeight(pixelBuffer);
      if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v17, v18, 0x6C363472u, (CFDictionaryRef)v9, (CVPixelBufferRef *)&arg))
      {
        CFAutorelease(arg);
        if (!CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL)
          && !CVPixelBufferLockBaseAddress((CVPixelBufferRef)arg, 0))
        {
          CGRect v36 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          CGRect v37 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)arg);
          size_t v38 = CVPixelBufferGetHeight(pixelBuffer);
          size_t v39 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          size_t v40 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)arg);
          if (v38)
          {
            size_t v41 = v40;
            do
            {
              memcpy(v37, v36, v39);
              v36 += v39;
              v37 += v41;
              --v38;
            }
            while (v38);
          }
          CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)arg, 0);
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
          double v42 = (void *)MEMORY[0x1E4F1E050];
          CFTypeRef v43 = arg;
          uint64_t v67 = *MEMORY[0x1E4F1E390];
          CFTypeRef v68 = sub_1DDBEE614();
          uint64_t v45 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v44, (uint64_t)&v68, (uint64_t)&v67, 1);
          uint64_t v6 = objc_msgSend_imageWithCVPixelBuffer_options_(v42, v46, (uint64_t)v43, (uint64_t)v45, v47);

          goto LABEL_22;
        }
      }
LABEL_21:

      uint64_t v6 = 0;
      goto LABEL_22;
    }
    int v13 = 1919379252;
    goto LABEL_17;
  }
  if (PixelFormatType == 1735549492) {
    goto LABEL_18;
  }
  if (PixelFormatType != 1751527984) {
    goto LABEL_22;
  }
  CFTypeRef arg = 0;
  uint64_t v65 = *MEMORY[0x1E4F24D20];
  uint64_t v66 = MEMORY[0x1E4F1CC08];
  uint64_t v9 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v8, (uint64_t)&v66, (uint64_t)&v65, 1);
  size_t v10 = CVPixelBufferGetWidth(pixelBuffer);
  size_t v11 = CVPixelBufferGetHeight(pixelBuffer);
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v10, v11, 0x68663230u, (CFDictionaryRef)v9, (CVPixelBufferRef *)&arg))
  {
    goto LABEL_21;
  }
  CFAutorelease(arg);
  size_t PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
  if (PlaneCount != CVPixelBufferGetPlaneCount((CVPixelBufferRef)arg))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL) || CVPixelBufferLockBaseAddress((CVPixelBufferRef)arg, 0)) {
    goto LABEL_21;
  }
  if (PlaneCount)
  {
    for (size_t i = 0; i != PlaneCount; ++i)
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, i);
      int v50 = (char *)CVPixelBufferGetBaseAddressOfPlane((CVPixelBufferRef)arg, i);
      size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, i);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, i);
      size_t v53 = CVPixelBufferGetBytesPerRowOfPlane((CVPixelBufferRef)arg, i);
      if (HeightOfPlane)
      {
        size_t v54 = v53;
        do
        {
          memcpy(v50, BaseAddressOfPlane, BytesPerRowOfPlane);
          BaseAddressOfPlane += BytesPerRowOfPlane;
          v50 += v54;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
      }
    }
  }
  CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)arg, 0);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  uint64_t v55 = (void *)MEMORY[0x1E4F1E050];
  CFTypeRef v56 = arg;
  uint64_t v63 = *MEMORY[0x1E4F1E390];
  CFTypeRef v64 = sub_1DDBEE614();
  char v58 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v57, (uint64_t)&v64, (uint64_t)&v63, 1);
  uint64_t v6 = objc_msgSend_imageWithCVPixelBuffer_options_(v55, v59, (uint64_t)v56, (uint64_t)v58, v60);

LABEL_22:

  return v6;
}

void sub_1DDAE6768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAE682C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v953 = *MEMORY[0x1E4F143B8];
  uint64_t v857 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 2504), a2, @"{Exif}", a4, a5);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v8 = objc_msgSend_objectForKeyedSubscript_(v857, v5, @"ApertureValue", v6, v7);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_doubleValue(v8, v9, v10, v11, v12);
    uint64_t v14 = v13;
    sub_1DDA1A880(&__p, "IFD0:EXIF");
    *(void *)&long long v950 = &__p;
    *((void *)sub_1DDA70898((uint64_t **)(a1 + 360), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 7) = v14;
    if (SBYTE7(v938) < 0) {
      operator delete((void *)__p);
    }
  }

  size_t v18 = objc_msgSend_objectForKeyedSubscript_(v857, v15, @"FNumber", v16, v17);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_doubleValue(v18, v19, v20, v21, v22);
    uint64_t v24 = v23;
    sub_1DDA1A880(&__p, "IFD0:EXIF");
    *(void *)&long long v950 = &__p;
    *((void *)sub_1DDA70898((uint64_t **)(a1 + 336), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 7) = v24;
    if (SBYTE7(v938) < 0) {
      operator delete((void *)__p);
    }
  }

  uint64_t v28 = objc_msgSend_objectForKeyedSubscript_(v857, v25, @"ExposureTime", v26, v27);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_doubleValue(v28, v29, v30, v31, v32);
    uint64_t v34 = v33;
    sub_1DDA1A880(&__p, "IFD0:EXIF");
    *(void *)&long long v950 = &__p;
    *((void *)sub_1DDA70898((uint64_t **)(a1 + 288), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 7) = v34;
    if (SBYTE7(v938) < 0) {
      operator delete((void *)__p);
    }
  }

  size_t v38 = objc_msgSend_objectForKeyedSubscript_(v857, v35, @"ISOSpeedRatings", v36, v37);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend_count(v38, v39, v40, v41, v42) == 1 || objc_msgSend_count(v38, v43, v44, v45, v46) == 2))
  {
    long long __p = 0uLL;
    *(void *)&long long v938 = 0;
    long long v925 = 0u;
    long long v926 = 0u;
    long long v927 = 0u;
    long long v928 = 0u;
    id v47 = v38;
    uint64_t v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v48, (uint64_t)&v925, (uint64_t)v952, 16);
    if (v49)
    {
      uint64_t v50 = *(void *)v926;
      do
      {
        for (uint64_t i = 0; i != v49; ++i)
        {
          if (*(void *)v926 != v50) {
            objc_enumerationMutation(v47);
          }
          int v52 = *(void **)(*((void *)&v925 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            unsigned int v123 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v123, "RawCameraException");
            __cxa_throw(v123, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int v57 = objc_msgSend_unsignedIntValue(v52, v53, v54, v55, v56);
          int v59 = v57;
          uint64_t v60 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v938)
          {
            int v62 = (char *)__p;
            uint64_t v63 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62) {
              sub_1DDA17F78();
            }
            uint64_t v65 = v938 - __p;
            if ((uint64_t)(v938 - __p) >> 1 > v64) {
              unint64_t v64 = v65 >> 1;
            }
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v64;
            }
            if (v58)
            {
              uint64_t v66 = (char *)sub_1DDA17F90((uint64_t)&v938, v58);
              uint64_t v60 = (char *)*((void *)&__p + 1);
              int v62 = (char *)__p;
            }
            else
            {
              uint64_t v66 = 0;
            }
            uint64_t v67 = &v66[4 * v63];
            *(_DWORD *)uint64_t v67 = v59;
            unint64_t v61 = v67 + 4;
            while (v60 != v62)
            {
              int v68 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *((_DWORD *)v67 - 1) = v68;
              v67 -= 4;
            }
            *(void *)&long long __p = v67;
            *((void *)&__p + 1) = v61;
            *(void *)&long long v938 = &v66[4 * v58];
            if (v62) {
              operator delete(v62);
            }
          }
          else
          {
            **((_DWORD **)&__p + 1) = v57;
            unint64_t v61 = v60 + 4;
          }
          *((void *)&__p + 1) = v61;
        }
        uint64_t v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, (const char *)v58, (uint64_t)&v925, (uint64_t)v952, 16);
      }
      while (v49);
    }

    sub_1DDA1A880(&v950, "IFD0:EXIF");
    __src[0] = &v950;
    uint64_t v69 = (char *)sub_1DDA52108((uint64_t **)(a1 + 192), (void **)&v950, (uint64_t)&unk_1DDBFB044, (_OWORD **)__src) + 56;
    if (v69 != (char *)&__p) {
      sub_1DDA17E28(v69, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 2);
    }
    if (SHIBYTE(v951) < 0) {
      operator delete((void *)v950);
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }

  uint64_t v73 = objc_msgSend_objectForKeyedSubscript_(v857, v70, @"CFAPattern", v71, v72);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long __p = 0uLL;
    *(void *)&long long v938 = 0;
    long long v921 = 0u;
    long long v922 = 0u;
    long long v923 = 0u;
    long long v924 = 0u;
    id v851 = v73;
    id v74 = v73;
    uint64_t v76 = objc_msgSend_countByEnumeratingWithState_objects_count_(v74, v75, (uint64_t)&v921, (uint64_t)v949, 16);
    if (v76)
    {
      uint64_t v77 = *(void *)v922;
      do
      {
        for (uint64_t j = 0; j != v76; ++j)
        {
          if (*(void *)v922 != v77) {
            objc_enumerationMutation(v74);
          }
          int v79 = *(void **)(*((void *)&v921 + 1) + 8 * j);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v122 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v122, "RawCameraException");
            __cxa_throw(v122, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          char v84 = objc_msgSend_unsignedCharValue(v79, v80, v81, v82, v83);
          char v86 = v84;
          long long v87 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v938)
          {
            unint64_t v89 = __p;
            uint64_t v90 = *((void *)&__p + 1) - __p;
            uint64_t v91 = *((void *)&__p + 1) - __p + 1;
            if (v91 < 0) {
              sub_1DDA17F78();
            }
            unint64_t v92 = v938 - __p;
            if (2 * ((void)v938 - (void)__p) > (unint64_t)v91) {
              uint64_t v91 = 2 * v92;
            }
            if (v92 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v93 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v93 = v91;
            }
            if (v93) {
              double v94 = (char *)operator new(v93);
            }
            else {
              double v94 = 0;
            }
            int v95 = &v94[v90];
            int v96 = &v94[v90];
            *int v96 = v86;
            uint64_t v88 = v96 + 1;
            if (v87 != (char *)v89)
            {
              int v97 = &v87[~v89];
              do
              {
                char v98 = *--v87;
                (v97--)[(void)v94] = v98;
              }
              while (v87 != (char *)v89);
              long long v87 = (char *)__p;
              int v95 = v94;
            }
            *(void *)&long long __p = v95;
            *((void *)&__p + 1) = v88;
            *(void *)&long long v938 = &v94[v93];
            if (v87) {
              operator delete(v87);
            }
          }
          else
          {
            **((unsigned char **)&__p + 1) = v84;
            uint64_t v88 = v87 + 1;
          }
          *((void *)&__p + 1) = v88;
        }
        uint64_t v76 = objc_msgSend_countByEnumeratingWithState_objects_count_(v74, v85, (uint64_t)&v921, (uint64_t)v949, 16);
      }
      while (v76);
    }

    sub_1DDA1A880(&v950, "IFD0:EXIF");
    __src[0] = &v950;
    uint64_t v73 = v851;
    double v99 = (_OWORD *)((char *)sub_1DDA52108((uint64_t **)(a1 + 992), (void **)&v950, (uint64_t)&unk_1DDBFB044, (_OWORD **)__src)+ 56);
    if (v99 != &__p) {
      sub_1DDA49578(v99, (char *)__p, *((char **)&__p + 1), *((void *)&__p + 1) - __p);
    }
    if (SHIBYTE(v951) < 0) {
      operator delete((void *)v950);
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }

  uint64_t v858 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 2504), v100, @"{DNG}", v101, v102);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v847 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v847, "RawCameraException");
    __cxa_throw(v847, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v106 = objc_msgSend_objectForKeyedSubscript_(v858, v103, @"ActiveArea", v104, v105);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v106, v107, v108, v109, v110) == 4)
  {
    long long v919 = 0u;
    long long v920 = 0u;
    long long v917 = 0u;
    long long v918 = 0u;
    id v111 = v106;
    uint64_t v114 = objc_msgSend_countByEnumeratingWithState_objects_count_(v111, v112, (uint64_t)&v917, (uint64_t)v948, 16);
    if (v114)
    {
      uint64_t v115 = *(void *)v918;
      char isKindOfClass = 1;
      do
      {
        for (uint64_t k = 0; k != v114; ++k)
        {
          if (*(void *)v918 != v115) {
            objc_enumerationMutation(v111);
          }
          if (isKindOfClass)
          {
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();
          }
          else
          {
            char isKindOfClass = 0;
          }
        }
        uint64_t v114 = objc_msgSend_countByEnumeratingWithState_objects_count_(v111, v113, (uint64_t)&v917, (uint64_t)v948, 16);
      }
      while (v114);

      if ((isKindOfClass & 1) == 0)
      {
        uint64_t v121 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v121, "RawCameraException");
        __cxa_throw(v121, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
    }
    uint64_t v849 = objc_msgSend_objectAtIndexedSubscript_(v111, v118, 1, v119, v120);
    int v852 = objc_msgSend_intValue(v849, v124, v125, v126, v127);
    uint64_t v848 = objc_msgSend_objectAtIndexedSubscript_(v111, v128, 0, v129, v130);
    int v135 = objc_msgSend_intValue(v848, v131, v132, v133, v134);
    uint64_t v850 = objc_msgSend_objectAtIndexedSubscript_(v111, v136, 3, v137, v138);
    int v143 = objc_msgSend_intValue(v850, v139, v140, v141, v142);
    uint64_t v147 = objc_msgSend_objectAtIndexedSubscript_(v111, v144, 1, v145, v146);
    int v152 = objc_msgSend_intValue(v147, v148, v149, v150, v151);
    uint64_t v156 = objc_msgSend_objectAtIndexedSubscript_(v111, v153, 2, v154, v155);
    int v161 = objc_msgSend_intValue(v156, v157, v158, v159, v160);
    uint64_t v165 = objc_msgSend_objectAtIndexedSubscript_(v111, v162, 0, v163, v164);
    int v170 = objc_msgSend_intValue(v165, v166, v167, v168, v169);
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    uint64_t v171 = sub_1DDAEB2DC((uint64_t **)(a1 + 1408), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950);
    v171[14] = v852;
    v171[15] = v135;
    v171[16] = v143 - v152;
    v171[17] = v161 - v170;
    if (SBYTE7(v938) < 0) {
      operator delete((void *)__p);
    }
  }
  uint64_t v175 = objc_msgSend_objectForKeyedSubscript_(v858, v172, @"DefaultCropOrigin", v173, v174);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v175, v176, v177, v178, v179) == 2)
  {
    long long v915 = 0u;
    long long v916 = 0u;
    long long v913 = 0u;
    long long v914 = 0u;
    id v180 = v175;
    uint64_t v183 = objc_msgSend_countByEnumeratingWithState_objects_count_(v180, v181, (uint64_t)&v913, (uint64_t)v947, 16);
    if (v183)
    {
      uint64_t v184 = *(void *)v914;
      char v185 = 1;
      do
      {
        for (uint64_t m = 0; m != v183; ++m)
        {
          if (*(void *)v914 != v184) {
            objc_enumerationMutation(v180);
          }
          if (v185)
          {
            objc_opt_class();
            char v185 = objc_opt_isKindOfClass();
          }
          else
          {
            char v185 = 0;
          }
        }
        uint64_t v183 = objc_msgSend_countByEnumeratingWithState_objects_count_(v180, v182, (uint64_t)&v913, (uint64_t)v947, 16);
      }
      while (v183);

      if ((v185 & 1) == 0)
      {
        uint64_t v190 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v190, "RawCameraException");
        __cxa_throw(v190, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
    }
    uint64_t v191 = objc_msgSend_objectAtIndexedSubscript_(v180, v187, 0, v188, v189);
    unsigned int v196 = objc_msgSend_intValue(v191, v192, v193, v194, v195);
    uint64_t v200 = objc_msgSend_objectAtIndexedSubscript_(v180, v197, 1, v198, v199);
    uint64_t v205 = objc_msgSend_intValue(v200, v201, v202, v203, v204);
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((void *)sub_1DDA70898((uint64_t **)(a1 + 1336), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 7) = v196 | (unint64_t)(v205 << 32);
    if (SBYTE7(v938) < 0) {
      operator delete((void *)__p);
    }
  }
  uint64_t v209 = objc_msgSend_objectForKeyedSubscript_(v858, v206, @"DefaultCropSize", v207, v208);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v209, v210, v211, v212, v213) == 2)
  {
    long long v911 = 0u;
    long long v912 = 0u;
    long long v909 = 0u;
    long long v910 = 0u;
    id v214 = v209;
    uint64_t v217 = objc_msgSend_countByEnumeratingWithState_objects_count_(v214, v215, (uint64_t)&v909, (uint64_t)v946, 16);
    if (v217)
    {
      uint64_t v218 = *(void *)v910;
      char v219 = 1;
      do
      {
        for (uint64_t n = 0; n != v217; ++n)
        {
          if (*(void *)v910 != v218) {
            objc_enumerationMutation(v214);
          }
          if (v219)
          {
            objc_opt_class();
            char v219 = objc_opt_isKindOfClass();
          }
          else
          {
            char v219 = 0;
          }
        }
        uint64_t v217 = objc_msgSend_countByEnumeratingWithState_objects_count_(v214, v216, (uint64_t)&v909, (uint64_t)v946, 16);
      }
      while (v217);

      if ((v219 & 1) == 0)
      {
        uint64_t v224 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v224, "RawCameraException");
        __cxa_throw(v224, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
    }
    uint64_t v225 = objc_msgSend_objectAtIndexedSubscript_(v214, v221, 0, v222, v223);
    unsigned int v230 = objc_msgSend_intValue(v225, v226, v227, v228, v229);
    uint64_t v234 = objc_msgSend_objectAtIndexedSubscript_(v214, v231, 1, v232, v233);
    uint64_t v239 = objc_msgSend_intValue(v234, v235, v236, v237, v238);
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((void *)sub_1DDA70898((uint64_t **)(a1 + 1360), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 7) = v230 | (unint64_t)(v239 << 32);
    if (SBYTE7(v938) < 0) {
      operator delete((void *)__p);
    }
  }
  uint64_t v243 = objc_msgSend_objectForKeyedSubscript_(v858, v240, @"DefaultCropScale", v241, v242);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v243, v244, v245, v246, v247) == 2)
  {
    long long v907 = 0u;
    long long v908 = 0u;
    long long v905 = 0u;
    long long v906 = 0u;
    id v248 = v243;
    uint64_t v251 = objc_msgSend_countByEnumeratingWithState_objects_count_(v248, v249, (uint64_t)&v905, (uint64_t)v945, 16);
    if (v251)
    {
      uint64_t v252 = *(void *)v906;
      char v253 = 1;
      do
      {
        for (iuint64_t i = 0; ii != v251; ++ii)
        {
          if (*(void *)v906 != v252) {
            objc_enumerationMutation(v248);
          }
          if (v253)
          {
            objc_opt_class();
            char v253 = objc_opt_isKindOfClass();
          }
          else
          {
            char v253 = 0;
          }
        }
        uint64_t v251 = objc_msgSend_countByEnumeratingWithState_objects_count_(v248, v250, (uint64_t)&v905, (uint64_t)v945, 16);
      }
      while (v251);

      if ((v253 & 1) == 0)
      {
        v258 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v258, "RawCameraException");
        __cxa_throw(v258, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
    }
    v259 = objc_msgSend_objectAtIndexedSubscript_(v248, v255, 0, v256, v257);
    unsigned int v264 = objc_msgSend_intValue(v259, v260, v261, v262, v263);
    uint64_t v268 = objc_msgSend_objectAtIndexedSubscript_(v248, v265, 1, v266, v267);
    uint64_t v273 = objc_msgSend_intValue(v268, v269, v270, v271, v272);
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((void *)sub_1DDA70898((uint64_t **)(a1 + 1384), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 7) = v264 | (unint64_t)(v273 << 32);
    if (SBYTE7(v938) < 0) {
      operator delete((void *)__p);
    }
  }
  uint64_t v277 = objc_msgSend_objectForKeyedSubscript_(v858, v274, @"AnalogBalance", v275, v276);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v277, v278, v279, v280, v281) == 3)
  {
    long long __p = 0uLL;
    *(void *)&long long v938 = 0;
    long long v901 = 0u;
    long long v902 = 0u;
    long long v903 = 0u;
    long long v904 = 0u;
    id v282 = v277;
    uint64_t v284 = objc_msgSend_countByEnumeratingWithState_objects_count_(v282, v283, (uint64_t)&v901, (uint64_t)v944, 16);
    if (v284)
    {
      uint64_t v285 = *(void *)v902;
      do
      {
        for (juint64_t j = 0; jj != v284; ++jj)
        {
          if (*(void *)v902 != v285) {
            objc_enumerationMutation(v282);
          }
          uint64_t v287 = *(void **)(*((void *)&v901 + 1) + 8 * jj);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v836 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v836, "RawCameraException");
            __cxa_throw(v836, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          objc_msgSend_doubleValue(v287, v288, v289, v290, v291);
          uint64_t v294 = v293;
          uint64_t v295 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v938)
          {
            uint64_t v297 = (char *)__p;
            uint64_t v298 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
            unint64_t v299 = v298 + 1;
            if ((unint64_t)(v298 + 1) >> 61) {
              sub_1DDA17F78();
            }
            uint64_t v300 = v938 - __p;
            if ((uint64_t)(v938 - __p) >> 2 > v299) {
              unint64_t v299 = v300 >> 2;
            }
            if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v292 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v292 = v299;
            }
            if (v292)
            {
              uint64_t v301 = (char *)sub_1DDA1814C((uint64_t)&v938, v292);
              uint64_t v295 = (char *)*((void *)&__p + 1);
              uint64_t v297 = (char *)__p;
            }
            else
            {
              uint64_t v301 = 0;
            }
            uint64_t v302 = &v301[8 * v298];
            *(void *)uint64_t v302 = v294;
            uint64_t v296 = v302 + 8;
            while (v295 != v297)
            {
              uint64_t v303 = *((void *)v295 - 1);
              v295 -= 8;
              *((void *)v302 - 1) = v303;
              v302 -= 8;
            }
            *(void *)&long long __p = v302;
            *((void *)&__p + 1) = v296;
            *(void *)&long long v938 = &v301[8 * v292];
            if (v297) {
              operator delete(v297);
            }
          }
          else
          {
            **((void **)&__p + 1) = v293;
            uint64_t v296 = v295 + 8;
          }
          *((void *)&__p + 1) = v296;
        }
        uint64_t v284 = objc_msgSend_countByEnumeratingWithState_objects_count_(v282, (const char *)v292, (uint64_t)&v901, (uint64_t)v944, 16);
      }
      while (v284);
    }

    sub_1DDA1A880(&v950, "IFD0");
    __src[0] = &v950;
    uint64_t v304 = (char *)sub_1DDA52108((uint64_t **)(a1 + 1864), (void **)&v950, (uint64_t)&unk_1DDBFB044, (_OWORD **)__src)
         + 56;
    if (v304 != (char *)&__p) {
      sub_1DDA25BB0(v304, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
    }
    if (SHIBYTE(v951) < 0) {
      operator delete((void *)v950);
    }
    uint64_t v305 = (void *)__p;
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
LABEL_185:
      operator delete(v305);
    }
  }
  else
  {
    *(void *)&long long v938 = 0x3FF0000000000000;
    long long __p = xmmword_1DDBFCBB0;
    sub_1DDA1A880(&v950, "IFD0");
    __src[0] = &v950;
    uint64_t v306 = (char *)sub_1DDA52108((uint64_t **)(a1 + 1864), (void **)&v950, (uint64_t)&unk_1DDBFB044, (_OWORD **)__src);
    sub_1DDA25BB0(v306 + 56, (char *)&__p, (uint64_t)&v938 + 8, 3uLL);
    if (SHIBYTE(v951) < 0)
    {
      uint64_t v305 = (void *)v950;
      goto LABEL_185;
    }
  }

  uint64_t v310 = objc_msgSend_objectForKeyedSubscript_(v858, v307, @"AsShotNeutral", v308, v309);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v310, v311, v312, v313, v314) == 3)
  {
    long long __p = 0uLL;
    *(void *)&long long v938 = 0;
    long long v897 = 0u;
    long long v898 = 0u;
    long long v899 = 0u;
    long long v900 = 0u;
    id v315 = v310;
    uint64_t v317 = objc_msgSend_countByEnumeratingWithState_objects_count_(v315, v316, (uint64_t)&v897, (uint64_t)v943, 16);
    if (v317)
    {
      uint64_t v318 = *(void *)v898;
      do
      {
        for (kuint64_t k = 0; kk != v317; ++kk)
        {
          if (*(void *)v898 != v318) {
            objc_enumerationMutation(v315);
          }
          uint64_t v320 = *(void **)(*((void *)&v897 + 1) + 8 * kk);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v837 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v837, "RawCameraException");
            __cxa_throw(v837, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          objc_msgSend_doubleValue(v320, v321, v322, v323, v324);
          uint64_t v327 = v326;
          v328 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v938)
          {
            uint64_t v330 = (char *)__p;
            uint64_t v331 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
            unint64_t v332 = v331 + 1;
            if ((unint64_t)(v331 + 1) >> 61) {
              sub_1DDA17F78();
            }
            uint64_t v333 = v938 - __p;
            if ((uint64_t)(v938 - __p) >> 2 > v332) {
              unint64_t v332 = v333 >> 2;
            }
            if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v325 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v325 = v332;
            }
            if (v325)
            {
              uint64_t v334 = (char *)sub_1DDA1814C((uint64_t)&v938, v325);
              v328 = (char *)*((void *)&__p + 1);
              uint64_t v330 = (char *)__p;
            }
            else
            {
              uint64_t v334 = 0;
            }
            v335 = &v334[8 * v331];
            *(void *)v335 = v327;
            uint64_t v329 = v335 + 8;
            while (v328 != v330)
            {
              uint64_t v336 = *((void *)v328 - 1);
              v328 -= 8;
              *((void *)v335 - 1) = v336;
              v335 -= 8;
            }
            *(void *)&long long __p = v335;
            *((void *)&__p + 1) = v329;
            *(void *)&long long v938 = &v334[8 * v325];
            if (v330) {
              operator delete(v330);
            }
          }
          else
          {
            **((void **)&__p + 1) = v326;
            uint64_t v329 = v328 + 8;
          }
          *((void *)&__p + 1) = v329;
        }
        uint64_t v317 = objc_msgSend_countByEnumeratingWithState_objects_count_(v315, (const char *)v325, (uint64_t)&v897, (uint64_t)v943, 16);
      }
      while (v317);
    }

    if ((long long *)(a1 + 1248) != &__p) {
      sub_1DDA25BB0((char *)(a1 + 1248), (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
    }
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  else
  {
    *(void *)&long long v938 = 0x3FF0000000000000;
    long long __p = xmmword_1DDBFCBB0;
    sub_1DDA25BB0((char *)(a1 + 1248), (char *)&__p, (uint64_t)&v938 + 8, 3uLL);
  }

  uint64_t v340 = objc_msgSend_objectForKeyedSubscript_(v858, v337, @"AntiAliasStrength", v338, v339);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_doubleValue(v340, v341, v342, v343, v344);
    uint64_t v346 = v345;
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((void *)sub_1DDA70898((uint64_t **)(a1 + 1528), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 7) = v346;
  }
  else
  {
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((void *)sub_1DDA70898((uint64_t **)(a1 + 1528), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 7) = 0x3FF0000000000000;
  }
  if (SBYTE7(v938) < 0) {
    operator delete((void *)__p);
  }

  uint64_t v350 = objc_msgSend_objectForKeyedSubscript_(v858, v347, @"BaselineExposure", v348, v349);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_doubleValue(v350, v351, v352, v353, v354);
    uint64_t v356 = v355;
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((void *)sub_1DDA70898((uint64_t **)(a1 + 1888), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 7) = v356;
  }
  else
  {
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((void *)sub_1DDA70898((uint64_t **)(a1 + 1888), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 7) = 0;
  }
  if (SBYTE7(v938) < 0) {
    operator delete((void *)__p);
  }

  uint64_t v360 = objc_msgSend_objectForKeyedSubscript_(v858, v357, @"BlackLevel", v358, v359);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v373 = objc_msgSend_objectForKeyedSubscript_(v858, v361, @"BlackLevel", v363, v364);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long __p = 0uLL;
      *(void *)&long long v938 = 0;
      long long v892 = 0u;
      long long v893 = 0u;
      long long v894 = 0u;
      long long v895 = 0u;
      id v374 = v373;
      uint64_t v376 = objc_msgSend_countByEnumeratingWithState_objects_count_(v374, v375, (uint64_t)&v892, (uint64_t)v940, 16);
      if (v376)
      {
        uint64_t v377 = *(void *)v893;
        do
        {
          for (muint64_t m = 0; mm != v376; ++mm)
          {
            if (*(void *)v893 != v377) {
              objc_enumerationMutation(v374);
            }
            uint64_t v379 = *(void **)(*((void *)&v892 + 1) + 8 * mm);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              uint64_t v838 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1E01C3B90](v838, "RawCameraException");
              __cxa_throw(v838, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            objc_msgSend_doubleValue(v379, v380, v381, v382, v383);
            uint64_t v386 = v385;
            uint64_t v387 = (char *)*((void *)&__p + 1);
            if (*((void *)&__p + 1) >= (unint64_t)v938)
            {
              v389 = (char *)__p;
              uint64_t v390 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
              unint64_t v391 = v390 + 1;
              if ((unint64_t)(v390 + 1) >> 61) {
                sub_1DDA17F78();
              }
              uint64_t v392 = v938 - __p;
              if ((uint64_t)(v938 - __p) >> 2 > v391) {
                unint64_t v391 = v392 >> 2;
              }
              if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v384 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v384 = v391;
              }
              if (v384)
              {
                uint64_t v393 = (char *)sub_1DDA1814C((uint64_t)&v938, v384);
                uint64_t v387 = (char *)*((void *)&__p + 1);
                v389 = (char *)__p;
              }
              else
              {
                uint64_t v393 = 0;
              }
              v394 = &v393[8 * v390];
              *(void *)v394 = v386;
              uint64_t v388 = v394 + 8;
              while (v387 != v389)
              {
                uint64_t v395 = *((void *)v387 - 1);
                v387 -= 8;
                *((void *)v394 - 1) = v395;
                v394 -= 8;
              }
              *(void *)&long long __p = v394;
              *((void *)&__p + 1) = v388;
              *(void *)&long long v938 = &v393[8 * v384];
              if (v389) {
                operator delete(v389);
              }
            }
            else
            {
              **((void **)&__p + 1) = v385;
              uint64_t v388 = v387 + 8;
            }
            *((void *)&__p + 1) = v388;
          }
          uint64_t v376 = objc_msgSend_countByEnumeratingWithState_objects_count_(v374, (const char *)v384, (uint64_t)&v892, (uint64_t)v940, 16);
        }
        while (v376);
      }

      sub_1DDA1A880(&v950, "IFD0");
      __src[0] = &v950;
      uint64_t v396 = (char *)sub_1DDA52108((uint64_t **)(a1 + 264), (void **)&v950, (uint64_t)&unk_1DDBFB044, (_OWORD **)__src)
           + 56;
      if (v396 != (char *)&__p) {
        sub_1DDA25BB0(v396, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
      }
      if (SHIBYTE(v951) < 0) {
        operator delete((void *)v950);
      }
      v397 = (void *)__p;
      if (!(void)__p) {
        goto LABEL_269;
      }
      *((void *)&__p + 1) = __p;
    }
    else
    {
      long long v938 = 0u;
      long long __p = 0u;
      sub_1DDA1A880(&v950, "IFD0");
      __src[0] = &v950;
      uint64_t v398 = (char *)sub_1DDA52108((uint64_t **)(a1 + 264), (void **)&v950, (uint64_t)&unk_1DDBFB044, (_OWORD **)__src);
      sub_1DDA25BB0(v398 + 56, (char *)&__p, (uint64_t)&v939, 4uLL);
      if ((SHIBYTE(v951) & 0x80000000) == 0)
      {
LABEL_269:

        goto LABEL_270;
      }
      v397 = (void *)v950;
    }
    operator delete(v397);
    goto LABEL_269;
  }
  objc_msgSend_doubleValue(v360, v361, v362, v363, v364);
  *(void *)&long long v950 = v365;
  sub_1DDA25B2C(&__p, 4uLL, &v950);
  objc_msgSend_doubleValue(v360, v366, v367, v368, v369);
  uint64_t v896 = v370;
  sub_1DDA25B2C(&v950, 4uLL, &v896);
  sub_1DDA1A880(__src, "IFD0");
  uint64_t v929 = __src;
  uint64_t v371 = sub_1DDA52108((uint64_t **)(a1 + 264), __src, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v929);
  uint64_t v372 = (void *)v371[7];
  if (v372)
  {
    v371[8] = v372;
    operator delete(v372);
    v371[7] = 0;
    v371[8] = 0;
    v371[9] = 0;
  }
  *(_OWORD *)(v371 + 7) = v950;
  v371[9] = v951;
  uint64_t v951 = 0;
  long long v950 = 0uLL;
  if (v942 < 0)
  {
    operator delete(__src[0]);
    if ((void)v950)
    {
      *((void *)&v950 + 1) = v950;
      operator delete((void *)v950);
    }
  }
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
LABEL_270:

  v402 = objc_msgSend_objectForKeyedSubscript_(v858, v399, @"WhiteLevel", v400, v401);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v409 = objc_msgSend_objectForKeyedSubscript_(v858, v403, @"WhiteLevel", v405, v406);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long __p = 0uLL;
      *(void *)&long long v938 = 0;
      long long v888 = 0u;
      long long v889 = 0u;
      long long v890 = 0u;
      long long v891 = 0u;
      id v410 = v409;
      uint64_t v412 = objc_msgSend_countByEnumeratingWithState_objects_count_(v410, v411, (uint64_t)&v888, (uint64_t)v936, 16);
      if (v412)
      {
        uint64_t v413 = *(void *)v889;
        do
        {
          for (nuint64_t n = 0; nn != v412; ++nn)
          {
            if (*(void *)v889 != v413) {
              objc_enumerationMutation(v410);
            }
            uint64_t v415 = *(void **)(*((void *)&v888 + 1) + 8 * nn);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              uint64_t v839 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1E01C3B90](v839, "RawCameraException");
              __cxa_throw(v839, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            objc_msgSend_doubleValue(v415, v416, v417, v418, v419);
            uint64_t v422 = v421;
            uint64_t v423 = (char *)*((void *)&__p + 1);
            if (*((void *)&__p + 1) >= (unint64_t)v938)
            {
              uint64_t v425 = (char *)__p;
              uint64_t v426 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
              unint64_t v427 = v426 + 1;
              if ((unint64_t)(v426 + 1) >> 61) {
                sub_1DDA17F78();
              }
              uint64_t v428 = v938 - __p;
              if ((uint64_t)(v938 - __p) >> 2 > v427) {
                unint64_t v427 = v428 >> 2;
              }
              if ((unint64_t)v428 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v420 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v420 = v427;
              }
              if (v420)
              {
                v429 = (char *)sub_1DDA1814C((uint64_t)&v938, v420);
                uint64_t v423 = (char *)*((void *)&__p + 1);
                uint64_t v425 = (char *)__p;
              }
              else
              {
                v429 = 0;
              }
              uint64_t v430 = &v429[8 * v426];
              *(void *)uint64_t v430 = v422;
              uint64_t v424 = v430 + 8;
              while (v423 != v425)
              {
                uint64_t v431 = *((void *)v423 - 1);
                v423 -= 8;
                *((void *)v430 - 1) = v431;
                v430 -= 8;
              }
              *(void *)&long long __p = v430;
              *((void *)&__p + 1) = v424;
              *(void *)&long long v938 = &v429[8 * v420];
              if (v425) {
                operator delete(v425);
              }
            }
            else
            {
              **((void **)&__p + 1) = v421;
              uint64_t v424 = v423 + 8;
            }
            *((void *)&__p + 1) = v424;
          }
          uint64_t v412 = objc_msgSend_countByEnumeratingWithState_objects_count_(v410, (const char *)v420, (uint64_t)&v888, (uint64_t)v936, 16);
        }
        while (v412);
      }

      sub_1DDA1A880(&v950, "IFD0");
      __src[0] = &v950;
      uint64_t v432 = (char *)sub_1DDA52108((uint64_t **)(a1 + 240), (void **)&v950, (uint64_t)&unk_1DDBFB044, (_OWORD **)__src)
           + 56;
      if (v432 != (char *)&__p) {
        sub_1DDA25BB0(v432, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
      }
      if (SHIBYTE(v951) < 0) {
        operator delete((void *)v950);
      }
      uint64_t v433 = (void *)__p;
      if (!(void)__p) {
        goto LABEL_307;
      }
      *((void *)&__p + 1) = __p;
    }
    else
    {
      long long __p = xmmword_1DDBFCBC8;
      *(void *)&long long v938 = 0x40EFFFE000000000;
      sub_1DDA1A880(&v950, "IFD0");
      __src[0] = &v950;
      v434 = (char *)sub_1DDA52108((uint64_t **)(a1 + 240), (void **)&v950, (uint64_t)&unk_1DDBFB044, (_OWORD **)__src);
      sub_1DDA25BB0(v434 + 56, (char *)&__p, (uint64_t)&v938 + 8, 3uLL);
      if ((SHIBYTE(v951) & 0x80000000) == 0)
      {
LABEL_307:

        goto LABEL_308;
      }
      uint64_t v433 = (void *)v950;
    }
    operator delete(v433);
    goto LABEL_307;
  }
  objc_msgSend_doubleValue(v402, v403, v404, v405, v406);
  __src[0] = v407;
  sub_1DDA1A880(&__p, "IFD0");
  *(void *)&long long v950 = &__p;
  uint64_t v408 = (char *)sub_1DDA52108((uint64_t **)(a1 + 240), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950);
  sub_1DDA25BB0(v408 + 56, (char *)__src, (uint64_t)&__src[1], 1uLL);
  if (SBYTE7(v938) < 0) {
    operator delete((void *)__p);
  }
LABEL_308:

  uint64_t v438 = objc_msgSend_objectForKeyedSubscript_(v858, v435, @"CalibrationIlluminant1", v436, v437);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    __int16 v443 = objc_msgSend_unsignedShortValue(v438, v439, v440, v441, v442);
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((_WORD *)sub_1DDA7C038((uint64_t **)(a1 + 1816), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 28) = v443;
  }
  else
  {
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((_WORD *)sub_1DDA7C038((uint64_t **)(a1 + 1816), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 28) = 17;
  }
  if (SBYTE7(v938) < 0) {
    operator delete((void *)__p);
  }

  uint64_t v447 = objc_msgSend_objectForKeyedSubscript_(v858, v444, @"CalibrationIlluminant2", v445, v446);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    __int16 v452 = objc_msgSend_unsignedShortValue(v447, v448, v449, v450, v451);
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((_WORD *)sub_1DDA7C038((uint64_t **)(a1 + 1840), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 28) = v452;
  }
  else
  {
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    *((_WORD *)sub_1DDA7C038((uint64_t **)(a1 + 1840), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950) + 28) = 21;
  }
  if (SBYTE7(v938) < 0) {
    operator delete((void *)__p);
  }

  uint64_t v456 = objc_msgSend_objectForKeyedSubscript_(v858, v453, @"UniqueCameraModel", v454, v455);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v457 = v456;
    uint64_t v462 = (char *)objc_msgSend_UTF8String(v457, v458, v459, v460, v461);
    sub_1DDA1A880(&__p, "IFD0");
    *(void *)&long long v950 = &__p;
    uint64_t v463 = sub_1DDAEB378((uint64_t **)(a1 + 1312), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v950);
    sub_1DDA1AB54((std::string *)((char *)v463 + 56), v462);
    if (SBYTE7(v938) < 0) {
      operator delete((void *)__p);
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v858, v464, @"ColorMatrix1", v465, v466);
  id v853 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend_length(v853, v467, v468, v469, v470) != 36)
  {
    uint64_t v490 = objc_msgSend_objectForKeyedSubscript_(v858, v467, @"ColorMatrix1", v469, v470);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v490, v491, v492, v493, v494) == 9)
    {
      long long v950 = 0uLL;
      uint64_t v951 = 0;
      long long v884 = 0u;
      long long v885 = 0u;
      long long v886 = 0u;
      long long v887 = 0u;
      id v498 = v490;
      uint64_t v500 = objc_msgSend_countByEnumeratingWithState_objects_count_(v498, v499, (uint64_t)&v884, (uint64_t)v935, 16);
      if (v500)
      {
        uint64_t v501 = *(void *)v885;
        do
        {
          for (uint64_t i1 = 0; i1 != v500; ++i1)
          {
            if (*(void *)v885 != v501) {
              objc_enumerationMutation(v498);
            }
            uint64_t v503 = *(void **)(*((void *)&v884 + 1) + 8 * i1);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              unint64_t v842 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1E01C3B90](v842, "RawCameraException");
              __cxa_throw(v842, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            objc_msgSend_doubleValue(v503, v504, v505, v506, v507);
            uint64_t v510 = v509;
            uint64_t v511 = (char *)*((void *)&v950 + 1);
            if (*((void *)&v950 + 1) >= (unint64_t)v951)
            {
              v513 = (char *)v950;
              uint64_t v514 = (uint64_t)(*((void *)&v950 + 1) - v950) >> 3;
              unint64_t v515 = v514 + 1;
              if ((unint64_t)(v514 + 1) >> 61) {
                sub_1DDA17F78();
              }
              uint64_t v516 = (uint64_t)&v951[-v950];
              if ((uint64_t)&v951[-v950] >> 2 > v515) {
                unint64_t v515 = v516 >> 2;
              }
              if ((unint64_t)v516 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v508 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v508 = v515;
              }
              if (v508)
              {
                v517 = (char *)sub_1DDA1814C((uint64_t)&v951, v508);
                uint64_t v511 = (char *)*((void *)&v950 + 1);
                v513 = (char *)v950;
              }
              else
              {
                v517 = 0;
              }
              uint64_t v518 = &v517[8 * v514];
              *(void *)uint64_t v518 = v510;
              uint64_t v512 = v518 + 8;
              while (v511 != v513)
              {
                uint64_t v519 = *((void *)v511 - 1);
                v511 -= 8;
                *((void *)v518 - 1) = v519;
                v518 -= 8;
              }
              *(void *)&long long v950 = v518;
              *((void *)&v950 + 1) = v512;
              uint64_t v951 = &v517[8 * v508];
              if (v513) {
                operator delete(v513);
              }
            }
            else
            {
              **((void **)&v950 + 1) = v509;
              uint64_t v512 = v511 + 8;
            }
            *((void *)&v950 + 1) = v512;
          }
          uint64_t v500 = objc_msgSend_countByEnumeratingWithState_objects_count_(v498, (const char *)v508, (uint64_t)&v884, (uint64_t)v935, 16);
        }
        while (v500);
      }

      sub_1DDAD8498(&__p, 3, 3, &v950);
      sub_1DDA1A880(__src, "IFD0");
      uint64_t v929 = __src;
      uint64_t v520 = sub_1DDAEB440((uint64_t **)(a1 + 1624), __src, (uint64_t)&unk_1DDBFB044, (long long **)&v929);
      sub_1DDAD88E8(v520 + 7, (uint64_t)&__p);
      if (v942 < 0) {
        operator delete(__src[0]);
      }
      if (*((void *)&__p + 1))
      {
        *(void *)&long long v938 = *((void *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      uint64_t v521 = (void *)v950;
      if (!(void)v950) {
        goto LABEL_384;
      }
      *((void *)&v950 + 1) = v950;
    }
    else
    {
      sub_1DDAD8240((uint64_t)&__p, 3u, 3u, 1.0, v493, v494, v495, v496, v497, 0);
      sub_1DDA1A880(&v950, "IFD0");
      __src[0] = &v950;
      uint64_t v522 = sub_1DDAEB440((uint64_t **)(a1 + 1624), (void **)&v950, (uint64_t)&unk_1DDBFB044, (long long **)__src);
      sub_1DDAD88E8(v522 + 7, (uint64_t)&__p);
      if (SHIBYTE(v951) < 0) {
        operator delete((void *)v950);
      }
      uint64_t v521 = (void *)*((void *)&__p + 1);
      if (!*((void *)&__p + 1)) {
        goto LABEL_384;
      }
      *(void *)&long long v938 = *((void *)&__p + 1);
    }
    operator delete(v521);
LABEL_384:

    goto LABEL_385;
  }
  id v471 = v853;
  uint64_t v476 = objc_msgSend_bytes(v471, v472, v473, v474, v475);
  v477 = 0;
  uint64_t v478 = 0;
  long long v950 = 0uLL;
  uint64_t v951 = 0;
  do
  {
    double v479 = *(float *)(v476 + 4 * v478);
    if (v477 >= (double *)v951)
    {
      uint64_t v481 = (double *)v950;
      uint64_t v482 = (uint64_t)((uint64_t)v477 - v950) >> 3;
      unint64_t v483 = v482 + 1;
      if ((unint64_t)(v482 + 1) >> 61) {
        sub_1DDA17F78();
      }
      uint64_t v484 = (uint64_t)&v951[-v950];
      if ((uint64_t)&v951[-v950] >> 2 > v483) {
        unint64_t v483 = v484 >> 2;
      }
      if ((unint64_t)v484 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v485 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v485 = v483;
      }
      if (v485)
      {
        uint64_t v486 = (char *)sub_1DDA1814C((uint64_t)&v951, v485);
        v477 = (double *)*((void *)&v950 + 1);
        uint64_t v481 = (double *)v950;
      }
      else
      {
        uint64_t v486 = 0;
      }
      uint64_t v487 = (double *)&v486[8 * v482];
      *uint64_t v487 = v479;
      uint64_t v480 = v487 + 1;
      while (v477 != v481)
      {
        uint64_t v488 = *((void *)v477-- - 1);
        *((void *)v487-- - 1) = v488;
      }
      *(void *)&long long v950 = v487;
      *((void *)&v950 + 1) = v480;
      uint64_t v951 = &v486[8 * v485];
      if (v481) {
        operator delete(v481);
      }
    }
    else
    {
      double *v477 = v479;
      uint64_t v480 = v477 + 1;
    }
    *((void *)&v950 + 1) = v480;
    ++v478;
    v477 = v480;
  }
  while (v478 != 9);
  sub_1DDAD8498(&__p, 3, 3, &v950);
  sub_1DDA1A880(__src, "IFD0");
  uint64_t v929 = __src;
  v489 = sub_1DDAEB440((uint64_t **)(a1 + 1624), __src, (uint64_t)&unk_1DDBFB044, (long long **)&v929);
  sub_1DDAD88E8(v489 + 7, (uint64_t)&__p);
  if (v942 < 0) {
    operator delete(__src[0]);
  }
  if (*((void *)&__p + 1))
  {
    *(void *)&long long v938 = *((void *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  if ((void)v950)
  {
    *((void *)&v950 + 1) = v950;
    operator delete((void *)v950);
  }
LABEL_385:

  uint64_t v526 = objc_msgSend_objectForKeyedSubscript_(v858, v523, @"ColorMatrix2", v524, v525);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend_length(v526, v527, v528, v529, v530) != 36)
  {
    uint64_t v550 = objc_msgSend_objectForKeyedSubscript_(v858, v527, @"ColorMatrix2", v529, v530);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v550, v551, v552, v553, v554) == 9)
    {
      id v854 = v526;
      long long v950 = 0uLL;
      uint64_t v951 = 0;
      long long v880 = 0u;
      long long v881 = 0u;
      long long v882 = 0u;
      long long v883 = 0u;
      id v558 = v550;
      uint64_t v560 = objc_msgSend_countByEnumeratingWithState_objects_count_(v558, v559, (uint64_t)&v880, (uint64_t)v934, 16);
      if (v560)
      {
        uint64_t v561 = *(void *)v881;
        do
        {
          for (uint64_t i2 = 0; i2 != v560; ++i2)
          {
            if (*(void *)v881 != v561) {
              objc_enumerationMutation(v558);
            }
            uint64_t v563 = *(void **)(*((void *)&v880 + 1) + 8 * i2);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              uint64_t v843 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1E01C3B90](v843, "RawCameraException");
              __cxa_throw(v843, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            objc_msgSend_doubleValue(v563, v564, v565, v566, v567);
            uint64_t v570 = v569;
            uint64_t v571 = (char *)*((void *)&v950 + 1);
            if (*((void *)&v950 + 1) >= (unint64_t)v951)
            {
              v573 = (char *)v950;
              uint64_t v574 = (uint64_t)(*((void *)&v950 + 1) - v950) >> 3;
              unint64_t v575 = v574 + 1;
              if ((unint64_t)(v574 + 1) >> 61) {
                sub_1DDA17F78();
              }
              uint64_t v576 = (uint64_t)&v951[-v950];
              if ((uint64_t)&v951[-v950] >> 2 > v575) {
                unint64_t v575 = v576 >> 2;
              }
              if ((unint64_t)v576 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v568 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v568 = v575;
              }
              if (v568)
              {
                uint64_t v577 = (char *)sub_1DDA1814C((uint64_t)&v951, v568);
                uint64_t v571 = (char *)*((void *)&v950 + 1);
                v573 = (char *)v950;
              }
              else
              {
                uint64_t v577 = 0;
              }
              double v578 = &v577[8 * v574];
              *(void *)double v578 = v570;
              int v572 = v578 + 8;
              while (v571 != v573)
              {
                uint64_t v579 = *((void *)v571 - 1);
                v571 -= 8;
                *((void *)v578 - 1) = v579;
                v578 -= 8;
              }
              *(void *)&long long v950 = v578;
              *((void *)&v950 + 1) = v572;
              uint64_t v951 = &v577[8 * v568];
              if (v573) {
                operator delete(v573);
              }
            }
            else
            {
              **((void **)&v950 + 1) = v569;
              int v572 = v571 + 8;
            }
            *((void *)&v950 + 1) = v572;
          }
          uint64_t v560 = objc_msgSend_countByEnumeratingWithState_objects_count_(v558, (const char *)v568, (uint64_t)&v880, (uint64_t)v934, 16);
        }
        while (v560);
      }

      uint64_t v526 = v854;
      sub_1DDAD8498(&__p, 3, 3, &v950);
      sub_1DDA1A880(__src, "IFD0");
      uint64_t v929 = __src;
      unint64_t v580 = sub_1DDAEB440((uint64_t **)(a1 + 1648), __src, (uint64_t)&unk_1DDBFB044, (long long **)&v929);
      sub_1DDAD88E8(v580 + 7, (uint64_t)&__p);
      if (v942 < 0) {
        operator delete(__src[0]);
      }
      if (*((void *)&__p + 1))
      {
        *(void *)&long long v938 = *((void *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      unint64_t v581 = (void *)v950;
      if (!(void)v950) {
        goto LABEL_448;
      }
      *((void *)&v950 + 1) = v950;
    }
    else
    {
      sub_1DDAD8240((uint64_t)&__p, 3u, 3u, 1.0, v553, v554, v555, v556, v557, 0);
      sub_1DDA1A880(&v950, "IFD0");
      __src[0] = &v950;
      uint64_t v582 = sub_1DDAEB440((uint64_t **)(a1 + 1648), (void **)&v950, (uint64_t)&unk_1DDBFB044, (long long **)__src);
      sub_1DDAD88E8(v582 + 7, (uint64_t)&__p);
      if (SHIBYTE(v951) < 0) {
        operator delete((void *)v950);
      }
      unint64_t v581 = (void *)*((void *)&__p + 1);
      if (!*((void *)&__p + 1)) {
        goto LABEL_448;
      }
      *(void *)&long long v938 = *((void *)&__p + 1);
    }
    operator delete(v581);
LABEL_448:

    goto LABEL_449;
  }
  id v531 = v526;
  uint64_t v536 = objc_msgSend_bytes(v531, v532, v533, v534, v535);
  v537 = 0;
  uint64_t v538 = 0;
  long long v950 = 0uLL;
  uint64_t v951 = 0;
  do
  {
    double v539 = *(float *)(v536 + 4 * v538);
    if (v537 >= (double *)v951)
    {
      uint64_t v541 = (double *)v950;
      uint64_t v542 = (uint64_t)((uint64_t)v537 - v950) >> 3;
      unint64_t v543 = v542 + 1;
      if ((unint64_t)(v542 + 1) >> 61) {
        sub_1DDA17F78();
      }
      uint64_t v544 = (uint64_t)&v951[-v950];
      if ((uint64_t)&v951[-v950] >> 2 > v543) {
        unint64_t v543 = v544 >> 2;
      }
      if ((unint64_t)v544 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v545 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v545 = v543;
      }
      if (v545)
      {
        v546 = (char *)sub_1DDA1814C((uint64_t)&v951, v545);
        v537 = (double *)*((void *)&v950 + 1);
        uint64_t v541 = (double *)v950;
      }
      else
      {
        v546 = 0;
      }
      uint64_t v547 = (double *)&v546[8 * v542];
      *uint64_t v547 = v539;
      uint64_t v540 = v547 + 1;
      while (v537 != v541)
      {
        uint64_t v548 = *((void *)v537-- - 1);
        *((void *)v547-- - 1) = v548;
      }
      *(void *)&long long v950 = v547;
      *((void *)&v950 + 1) = v540;
      uint64_t v951 = &v546[8 * v545];
      if (v541) {
        operator delete(v541);
      }
    }
    else
    {
      double *v537 = v539;
      uint64_t v540 = v537 + 1;
    }
    *((void *)&v950 + 1) = v540;
    ++v538;
    v537 = v540;
  }
  while (v538 != 9);
  sub_1DDAD8498(&__p, 3, 3, &v950);
  sub_1DDA1A880(__src, "IFD0");
  uint64_t v929 = __src;
  v549 = sub_1DDAEB440((uint64_t **)(a1 + 1648), __src, (uint64_t)&unk_1DDBFB044, (long long **)&v929);
  sub_1DDAD88E8(v549 + 7, (uint64_t)&__p);
  if (v942 < 0) {
    operator delete(__src[0]);
  }
  if (*((void *)&__p + 1))
  {
    *(void *)&long long v938 = *((void *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  if ((void)v950)
  {
    *((void *)&v950 + 1) = v950;
    operator delete((void *)v950);
  }
LABEL_449:

  v586 = objc_msgSend_objectForKeyedSubscript_(v858, v583, @"ForwardMatrix1", v584, v585);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend_length(v586, v587, v588, v589, v590) != 36)
  {
    v610 = objc_msgSend_objectForKeyedSubscript_(v858, v587, @"ForwardMatrix1", v589, v590);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v610, v611, v612, v613, v614) == 9)
    {
      id v855 = v586;
      long long v950 = 0uLL;
      uint64_t v951 = 0;
      long long v876 = 0u;
      long long v877 = 0u;
      long long v878 = 0u;
      long long v879 = 0u;
      id v618 = v610;
      uint64_t v620 = objc_msgSend_countByEnumeratingWithState_objects_count_(v618, v619, (uint64_t)&v876, (uint64_t)v933, 16);
      if (v620)
      {
        uint64_t v621 = *(void *)v877;
        do
        {
          for (uint64_t i3 = 0; i3 != v620; ++i3)
          {
            if (*(void *)v877 != v621) {
              objc_enumerationMutation(v618);
            }
            double v623 = *(void **)(*((void *)&v876 + 1) + 8 * i3);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v844 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1E01C3B90](v844, "RawCameraException");
              __cxa_throw(v844, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            objc_msgSend_doubleValue(v623, v624, v625, v626, v627);
            uint64_t v630 = v629;
            double v631 = (char *)*((void *)&v950 + 1);
            if (*((void *)&v950 + 1) >= (unint64_t)v951)
            {
              uint64_t v633 = (char *)v950;
              uint64_t v634 = (uint64_t)(*((void *)&v950 + 1) - v950) >> 3;
              unint64_t v635 = v634 + 1;
              if ((unint64_t)(v634 + 1) >> 61) {
                sub_1DDA17F78();
              }
              uint64_t v636 = (uint64_t)&v951[-v950];
              if ((uint64_t)&v951[-v950] >> 2 > v635) {
                unint64_t v635 = v636 >> 2;
              }
              if ((unint64_t)v636 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v628 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v628 = v635;
              }
              if (v628)
              {
                v637 = (char *)sub_1DDA1814C((uint64_t)&v951, v628);
                double v631 = (char *)*((void *)&v950 + 1);
                uint64_t v633 = (char *)v950;
              }
              else
              {
                v637 = 0;
              }
              uint64_t v638 = &v637[8 * v634];
              *(void *)uint64_t v638 = v630;
              double v632 = v638 + 8;
              while (v631 != v633)
              {
                uint64_t v639 = *((void *)v631 - 1);
                v631 -= 8;
                *((void *)v638 - 1) = v639;
                v638 -= 8;
              }
              *(void *)&long long v950 = v638;
              *((void *)&v950 + 1) = v632;
              uint64_t v951 = &v637[8 * v628];
              if (v633) {
                operator delete(v633);
              }
            }
            else
            {
              **((void **)&v950 + 1) = v629;
              double v632 = v631 + 8;
            }
            *((void *)&v950 + 1) = v632;
          }
          uint64_t v620 = objc_msgSend_countByEnumeratingWithState_objects_count_(v618, (const char *)v628, (uint64_t)&v876, (uint64_t)v933, 16);
        }
        while (v620);
      }

      v586 = v855;
      sub_1DDAD8498(&__p, 3, 3, &v950);
      sub_1DDA1A880(__src, "IFD0");
      uint64_t v929 = __src;
      uint64_t v640 = sub_1DDAEB440((uint64_t **)(a1 + 1768), __src, (uint64_t)&unk_1DDBFB044, (long long **)&v929);
      sub_1DDAD88E8(v640 + 7, (uint64_t)&__p);
      if (v942 < 0) {
        operator delete(__src[0]);
      }
      if (*((void *)&__p + 1))
      {
        *(void *)&long long v938 = *((void *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      uint64_t v641 = (void *)v950;
      if (!(void)v950) {
        goto LABEL_512;
      }
      *((void *)&v950 + 1) = v950;
    }
    else
    {
      sub_1DDAD8240((uint64_t)&__p, 3u, 3u, 1.0, v613, v614, v615, v616, v617, 0);
      sub_1DDA1A880(&v950, "IFD0");
      __src[0] = &v950;
      int v642 = sub_1DDAEB440((uint64_t **)(a1 + 1768), (void **)&v950, (uint64_t)&unk_1DDBFB044, (long long **)__src);
      sub_1DDAD88E8(v642 + 7, (uint64_t)&__p);
      if (SHIBYTE(v951) < 0) {
        operator delete((void *)v950);
      }
      uint64_t v641 = (void *)*((void *)&__p + 1);
      if (!*((void *)&__p + 1)) {
        goto LABEL_512;
      }
      *(void *)&long long v938 = *((void *)&__p + 1);
    }
    operator delete(v641);
LABEL_512:

    goto LABEL_513;
  }
  id v591 = v586;
  uint64_t v596 = objc_msgSend_bytes(v591, v592, v593, v594, v595);
  unint64_t v597 = 0;
  uint64_t v598 = 0;
  long long v950 = 0uLL;
  uint64_t v951 = 0;
  do
  {
    double v599 = *(float *)(v596 + 4 * v598);
    if (v597 >= (double *)v951)
    {
      v601 = (double *)v950;
      uint64_t v602 = (uint64_t)((uint64_t)v597 - v950) >> 3;
      unint64_t v603 = v602 + 1;
      if ((unint64_t)(v602 + 1) >> 61) {
        sub_1DDA17F78();
      }
      uint64_t v604 = (uint64_t)&v951[-v950];
      if ((uint64_t)&v951[-v950] >> 2 > v603) {
        unint64_t v603 = v604 >> 2;
      }
      if ((unint64_t)v604 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v605 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v605 = v603;
      }
      if (v605)
      {
        uint64_t v606 = (char *)sub_1DDA1814C((uint64_t)&v951, v605);
        unint64_t v597 = (double *)*((void *)&v950 + 1);
        v601 = (double *)v950;
      }
      else
      {
        uint64_t v606 = 0;
      }
      uint64_t v607 = (double *)&v606[8 * v602];
      *uint64_t v607 = v599;
      double v600 = v607 + 1;
      while (v597 != v601)
      {
        uint64_t v608 = *((void *)v597-- - 1);
        *((void *)v607-- - 1) = v608;
      }
      *(void *)&long long v950 = v607;
      *((void *)&v950 + 1) = v600;
      uint64_t v951 = &v606[8 * v605];
      if (v601) {
        operator delete(v601);
      }
    }
    else
    {
      double *v597 = v599;
      double v600 = v597 + 1;
    }
    *((void *)&v950 + 1) = v600;
    ++v598;
    unint64_t v597 = v600;
  }
  while (v598 != 9);
  sub_1DDAD8498(&__p, 3, 3, &v950);
  sub_1DDA1A880(__src, "IFD0");
  uint64_t v929 = __src;
  uint64_t v609 = sub_1DDAEB440((uint64_t **)(a1 + 1768), __src, (uint64_t)&unk_1DDBFB044, (long long **)&v929);
  sub_1DDAD88E8(v609 + 7, (uint64_t)&__p);
  if (v942 < 0) {
    operator delete(__src[0]);
  }
  if (*((void *)&__p + 1))
  {
    *(void *)&long long v938 = *((void *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  if ((void)v950)
  {
    *((void *)&v950 + 1) = v950;
    operator delete((void *)v950);
  }
LABEL_513:

  uint64_t v646 = objc_msgSend_objectForKeyedSubscript_(v858, v643, @"ForwardMatrix2", v644, v645);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend_length(v646, v647, v648, v649, v650) != 36)
  {
    int v670 = objc_msgSend_objectForKeyedSubscript_(v858, v647, @"ForwardMatrix2", v649, v650);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v670, v671, v672, v673, v674) == 9)
    {
      float64x2_t v678 = v646;
      long long v950 = 0uLL;
      uint64_t v951 = 0;
      long long v872 = 0u;
      long long v873 = 0u;
      long long v874 = 0u;
      long long v875 = 0u;
      id v679 = v670;
      uint64_t v681 = objc_msgSend_countByEnumeratingWithState_objects_count_(v679, v680, (uint64_t)&v872, (uint64_t)v932, 16);
      if (v681)
      {
        uint64_t v682 = *(void *)v873;
        do
        {
          for (uint64_t i4 = 0; i4 != v681; ++i4)
          {
            if (*(void *)v873 != v682) {
              objc_enumerationMutation(v679);
            }
            float64x2_t v684 = *(void **)(*((void *)&v872 + 1) + 8 * i4);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              uint64_t v845 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1E01C3B90](v845, "RawCameraException");
              __cxa_throw(v845, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            objc_msgSend_doubleValue(v684, v685, v686, v687, v688);
            uint64_t v691 = v690;
            uint64_t v692 = (char *)*((void *)&v950 + 1);
            if (*((void *)&v950 + 1) >= (unint64_t)v951)
            {
              uint64_t v694 = (char *)v950;
              uint64_t v695 = (uint64_t)(*((void *)&v950 + 1) - v950) >> 3;
              unint64_t v696 = v695 + 1;
              if ((unint64_t)(v695 + 1) >> 61) {
                sub_1DDA17F78();
              }
              uint64_t v697 = (uint64_t)&v951[-v950];
              if ((uint64_t)&v951[-v950] >> 2 > v696) {
                unint64_t v696 = v697 >> 2;
              }
              if ((unint64_t)v697 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v689 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v689 = v696;
              }
              if (v689)
              {
                v698 = (char *)sub_1DDA1814C((uint64_t)&v951, v689);
                uint64_t v692 = (char *)*((void *)&v950 + 1);
                uint64_t v694 = (char *)v950;
              }
              else
              {
                v698 = 0;
              }
              v699 = &v698[8 * v695];
              *(void *)v699 = v691;
              v693 = v699 + 8;
              while (v692 != v694)
              {
                uint64_t v700 = *((void *)v692 - 1);
                v692 -= 8;
                *((void *)v699 - 1) = v700;
                v699 -= 8;
              }
              *(void *)&long long v950 = v699;
              *((void *)&v950 + 1) = v693;
              uint64_t v951 = &v698[8 * v689];
              if (v694) {
                operator delete(v694);
              }
            }
            else
            {
              **((void **)&v950 + 1) = v690;
              v693 = v692 + 8;
            }
            *((void *)&v950 + 1) = v693;
          }
          uint64_t v681 = objc_msgSend_countByEnumeratingWithState_objects_count_(v679, (const char *)v689, (uint64_t)&v872, (uint64_t)v932, 16);
        }
        while (v681);
      }

      uint64_t v646 = v678;
      sub_1DDAD8498(&__p, 3, 3, &v950);
      sub_1DDA1A880(__src, "IFD0");
      uint64_t v929 = __src;
      unint64_t v701 = sub_1DDAEB440((uint64_t **)(a1 + 1792), __src, (uint64_t)&unk_1DDBFB044, (long long **)&v929);
      sub_1DDAD88E8(v701 + 7, (uint64_t)&__p);
      if (v942 < 0) {
        operator delete(__src[0]);
      }
      if (*((void *)&__p + 1))
      {
        *(void *)&long long v938 = *((void *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      unint64_t v702 = (void *)v950;
      if (!(void)v950) {
        goto LABEL_576;
      }
      *((void *)&v950 + 1) = v950;
    }
    else
    {
      sub_1DDAD8240((uint64_t)&__p, 3u, 3u, 1.0, v673, v674, v675, v676, v677, 0);
      sub_1DDA1A880(&v950, "IFD0");
      __src[0] = &v950;
      uint64_t v703 = sub_1DDAEB440((uint64_t **)(a1 + 1792), (void **)&v950, (uint64_t)&unk_1DDBFB044, (long long **)__src);
      sub_1DDAD88E8(v703 + 7, (uint64_t)&__p);
      if (SHIBYTE(v951) < 0) {
        operator delete((void *)v950);
      }
      unint64_t v702 = (void *)*((void *)&__p + 1);
      if (!*((void *)&__p + 1)) {
        goto LABEL_576;
      }
      *(void *)&long long v938 = *((void *)&__p + 1);
    }
    operator delete(v702);
LABEL_576:

    goto LABEL_577;
  }
  id v651 = v646;
  uint64_t v656 = objc_msgSend_bytes(v651, v652, v653, v654, v655);
  double v657 = 0;
  uint64_t v658 = 0;
  long long v950 = 0uLL;
  uint64_t v951 = 0;
  do
  {
    double v659 = *(float *)(v656 + 4 * v658);
    if (v657 >= (double *)v951)
    {
      double v661 = (double *)v950;
      uint64_t v662 = (uint64_t)((uint64_t)v657 - v950) >> 3;
      unint64_t v663 = v662 + 1;
      if ((unint64_t)(v662 + 1) >> 61) {
        sub_1DDA17F78();
      }
      uint64_t v664 = (uint64_t)&v951[-v950];
      if ((uint64_t)&v951[-v950] >> 2 > v663) {
        unint64_t v663 = v664 >> 2;
      }
      if ((unint64_t)v664 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v665 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v665 = v663;
      }
      if (v665)
      {
        uint64_t v666 = (char *)sub_1DDA1814C((uint64_t)&v951, v665);
        double v657 = (double *)*((void *)&v950 + 1);
        double v661 = (double *)v950;
      }
      else
      {
        uint64_t v666 = 0;
      }
      double v667 = (double *)&v666[8 * v662];
      double *v667 = v659;
      v660 = v667 + 1;
      while (v657 != v661)
      {
        uint64_t v668 = *((void *)v657-- - 1);
        *((void *)v667-- - 1) = v668;
      }
      *(void *)&long long v950 = v667;
      *((void *)&v950 + 1) = v660;
      uint64_t v951 = &v666[8 * v665];
      if (v661) {
        operator delete(v661);
      }
    }
    else
    {
      double *v657 = v659;
      v660 = v657 + 1;
    }
    *((void *)&v950 + 1) = v660;
    ++v658;
    double v657 = v660;
  }
  while (v658 != 9);
  sub_1DDAD8498(&__p, 3, 3, &v950);
  sub_1DDA1A880(__src, "IFD0");
  uint64_t v929 = __src;
  double v669 = sub_1DDAEB440((uint64_t **)(a1 + 1792), __src, (uint64_t)&unk_1DDBFB044, (long long **)&v929);
  sub_1DDAD88E8(v669 + 7, (uint64_t)&__p);
  if (v942 < 0) {
    operator delete(__src[0]);
  }
  if (*((void *)&__p + 1))
  {
    *(void *)&long long v938 = *((void *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  if ((void)v950)
  {
    *((void *)&v950 + 1) = v950;
    operator delete((void *)v950);
  }
LABEL_577:

  uint64_t v707 = objc_msgSend_objectForKeyedSubscript_(v858, v704, @"BaselineNoise", v705, v706);
  objc_opt_class();
  char v708 = objc_opt_isKindOfClass();
  double v713 = 1.0;
  if (v708) {
    objc_msgSend_doubleValue(v707, v709, v710, v711, v712, 1.0);
  }
  *(double *)(a1 + 1912) = v713;

  v717 = objc_msgSend_objectForKeyedSubscript_(v858, v714, @"NoiseProfile", v715, v716);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v717, v718, v719, v720, v721) == 2)
  {
    long long __p = 0uLL;
    *(void *)&long long v938 = 0;
    long long v868 = 0u;
    long long v869 = 0u;
    long long v870 = 0u;
    long long v871 = 0u;
    id v722 = v717;
    uint64_t v724 = objc_msgSend_countByEnumeratingWithState_objects_count_(v722, v723, (uint64_t)&v868, (uint64_t)v931, 16);
    if (v724)
    {
      uint64_t v725 = *(void *)v869;
      do
      {
        for (uint64_t i5 = 0; i5 != v724; ++i5)
        {
          if (*(void *)v869 != v725) {
            objc_enumerationMutation(v722);
          }
          uint64_t v727 = *(void **)(*((void *)&v868 + 1) + 8 * i5);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v840 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v840, "RawCameraException");
            __cxa_throw(v840, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          objc_msgSend_doubleValue(v727, v728, v729, v730, v731);
          uint64_t v734 = v733;
          uint64_t v735 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v938)
          {
            uint64_t v737 = (char *)__p;
            uint64_t v738 = (uint64_t)(*((void *)&__p + 1) - __p) >> 3;
            unint64_t v739 = v738 + 1;
            if ((unint64_t)(v738 + 1) >> 61) {
              sub_1DDA17F78();
            }
            uint64_t v740 = v938 - __p;
            if ((uint64_t)(v938 - __p) >> 2 > v739) {
              unint64_t v739 = v740 >> 2;
            }
            if ((unint64_t)v740 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v732 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v732 = v739;
            }
            if (v732)
            {
              v741 = (char *)sub_1DDA1814C((uint64_t)&v938, v732);
              uint64_t v735 = (char *)*((void *)&__p + 1);
              uint64_t v737 = (char *)__p;
            }
            else
            {
              v741 = 0;
            }
            uint64_t v742 = &v741[8 * v738];
            *(void *)uint64_t v742 = v734;
            uint64_t v736 = v742 + 8;
            while (v735 != v737)
            {
              uint64_t v743 = *((void *)v735 - 1);
              v735 -= 8;
              *((void *)v742 - 1) = v743;
              v742 -= 8;
            }
            *(void *)&long long __p = v742;
            *((void *)&__p + 1) = v736;
            *(void *)&long long v938 = &v741[8 * v732];
            if (v737) {
              operator delete(v737);
            }
          }
          else
          {
            **((void **)&__p + 1) = v733;
            uint64_t v736 = v735 + 8;
          }
          *((void *)&__p + 1) = v736;
        }
        uint64_t v724 = objc_msgSend_countByEnumeratingWithState_objects_count_(v722, (const char *)v732, (uint64_t)&v868, (uint64_t)v931, 16);
      }
      while (v724);
    }

    sub_1DDA1A880(&v950, "IFD0");
    __src[0] = &v950;
    uint64_t v744 = (char *)sub_1DDA52108((uint64_t **)(a1 + 1928), (void **)&v950, (uint64_t)&unk_1DDBFB044, (_OWORD **)__src)
         + 56;
    if (v744 != (char *)&__p) {
      sub_1DDA25BB0(v744, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
    }
    if (SHIBYTE(v951) < 0) {
      operator delete((void *)v950);
    }
    uint64_t v745 = (void *)__p;
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
LABEL_613:
      operator delete(v745);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    long long v950 = _Q0;
    sub_1DDA1A880(&__p, "IFD0");
    __src[0] = &__p;
    uint64_t v751 = (char *)sub_1DDA52108((uint64_t **)(a1 + 1928), (void **)&__p, (uint64_t)&unk_1DDBFB044, (_OWORD **)__src);
    sub_1DDA25BB0(v751 + 56, (char *)&v950, (uint64_t)&v951, 2uLL);
    if (SBYTE7(v938) < 0)
    {
      uint64_t v745 = (void *)__p;
      goto LABEL_613;
    }
  }

  uint64_t v755 = objc_msgSend_objectForKeyedSubscript_(v858, v752, @"FixVignetteRadial", v753, v754);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v755, v756, v757, v758, v759) == 7)
  {
    long long v866 = 0u;
    long long v867 = 0u;
    long long v864 = 0u;
    long long v865 = 0u;
    id v760 = v755;
    uint64_t v762 = objc_msgSend_countByEnumeratingWithState_objects_count_(v760, v761, (uint64_t)&v864, (uint64_t)v930, 16);
    if (v762)
    {
      uint64_t v763 = *(void *)v865;
      do
      {
        for (uint64_t i6 = 0; i6 != v762; ++i6)
        {
          if (*(void *)v865 != v763) {
            objc_enumerationMutation(v760);
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v841 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v841, "RawCameraException");
            __cxa_throw(v841, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        uint64_t v762 = objc_msgSend_countByEnumeratingWithState_objects_count_(v760, v765, (uint64_t)&v864, (uint64_t)v930, 16);
      }
      while (v762);
    }

    uint64_t v769 = objc_msgSend_objectAtIndexedSubscript_(v760, v766, 0, v767, v768);
    objc_msgSend_doubleValue(v769, v770, v771, v772, v773);
    unint64_t v775 = v774;

    uint64_t v929 = (void **)v775;
    uint64_t v779 = objc_msgSend_objectAtIndexedSubscript_(v760, v776, 1, v777, v778);
    objc_msgSend_doubleValue(v779, v780, v781, v782, v783);
    uint64_t v785 = v784;

    uint64_t v896 = v785;
    unsigned int v789 = objc_msgSend_objectAtIndexedSubscript_(v760, v786, 2, v787, v788);
    objc_msgSend_doubleValue(v789, v790, v791, v792, v793);
    uint64_t v795 = v794;

    uint64_t v863 = v795;
    double v799 = objc_msgSend_objectAtIndexedSubscript_(v760, v796, 3, v797, v798);
    objc_msgSend_doubleValue(v799, v800, v801, v802, v803);
    uint64_t v805 = v804;

    uint64_t v862 = v805;
    uint64_t v809 = objc_msgSend_objectAtIndexedSubscript_(v760, v806, 4, v807, v808);
    objc_msgSend_doubleValue(v809, v810, v811, v812, v813);
    uint64_t v815 = v814;

    uint64_t v861 = v815;
    uint64_t v819 = objc_msgSend_objectAtIndexedSubscript_(v760, v816, 5, v817, v818);
    objc_msgSend_doubleValue(v819, v820, v821, v822, v823);
    uint64_t v825 = v824;

    uint64_t v860 = v825;
    uint64_t v829 = objc_msgSend_objectAtIndexedSubscript_(v760, v826, 6, v827, v828);
    objc_msgSend_doubleValue(v829, v830, v831, v832, v833);
    uint64_t v835 = v834;

    uint64_t v859 = v835;
    LODWORD(__p) = 0;
    sub_1DDAEB5B4((unsigned int *)&__p, (double *)&v929, (double *)&v896, (double *)&v863, (double *)&v862, (double *)&v861, (double *)&v860, &v950, (double *)&v859);
    *(_OWORD *)__srCC_SHA256_CTX c = v950;
    if (*((void *)&v950 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v950 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    sub_1DDAEB158(&__p, 1uLL, __src);
    if (__src[1]) {
      sub_1DDA18310((std::__shared_weak_count *)__src[1]);
    }
    if ((long long *)(a1 + 2168) != &__p) {
      sub_1DDA9DFDC(a1 + 2168, (uint64_t *)__p, *((uint64_t **)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 4);
    }
    __src[0] = &__p;
    sub_1DDA18270((void ***)__src);
    if (*((void *)&v950 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v950 + 1));
    }
  }
}

void sub_1DDAEA2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  STACK[0x8E8] = (unint64_t)&STACK[0x840];
  sub_1DDA18270((void ***)&STACK[0x8E8]);
  if (STACK[0xC88]) {
    sub_1DDA18310((std::__shared_weak_count *)STACK[0xC88]);
  }

  _Unwind_Resume(a1);
}

id sub_1DDAEAFFC(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 440))(a1);
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 448))(a1);
  int v5 = v4;
  unint64_t v6 = HIDWORD(v4);
  uint64_t v7 = (void *)a1[314];
  CGAffineTransformMakeTranslation(&v18, (double)-(int)v3, (double)-((v2 - (((v4 & 0xFFFFFFFF00000000) + v3) & 0xFFFFFFFF00000000)) >> 32));
  uint64_t v11 = objc_msgSend_imageByApplyingTransform_(v7, v8, (uint64_t)&v18, v9, v10);
  uint64_t v16 = objc_msgSend_imageByCroppingToRect_(v11, v12, v13, v14, v15, 0.0, 0.0, (double)v5, (double)(int)v6);

  return v16;
}

void sub_1DDAEB10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAEB120(uint64_t a1)
{
  sub_1DDAEB1FC(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDAEB158(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1DDA197F4(a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[2 * a2];
    do
    {
      void *v6 = *a3;
      uint64_t v8 = a3[1];
      v6[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      v6 += 2;
    }
    while (v6 != v7);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DDAEB1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_1DDAEB1FC(uint64_t a1)
{
  return sub_1DDA9EBBC(a1);
}

_OWORD *sub_1DDAEB240(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)sub_1DDA4B7C4((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *uint64_t v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    sub_1DDA25078(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *sub_1DDAEB2DC(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)sub_1DDA4B7C4((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x48uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    sub_1DDA25078(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *sub_1DDAEB378(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)sub_1DDA4B7C4((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    sub_1DDA25078(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_1DDA4BC40((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t *sub_1DDAEB440(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)sub_1DDA4B7C4((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_1DDAEB4EC((uint64_t)a1, a4, (uint64_t)v10);
    sub_1DDA25078(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1DDA9F220((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_1DDAEB4EC@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_1DDAEB558((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1DDAEB540(_Unwind_Exception *a1)
{
  sub_1DDA9F220(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAEB558(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  sub_1DDAD80DC((_OWORD *)(a1 + 24));
  return a1;
}

void sub_1DDAEB598(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDAEB5B4@<X0>(unsigned int *a1@<X1>, double *a2@<X2>, double *a3@<X3>, double *a4@<X4>, double *a5@<X5>, double *a6@<X6>, double *a7@<X7>, void *a8@<X8>, double *a9)
{
  uint64_t v17 = operator new(0x50uLL);
  uint64_t result = sub_1DDAEB668(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1DDAEB654(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAEB668(void *a1, unsigned int *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961770;
  sub_1DDBEF090(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9);
  return a1;
}

void sub_1DDAEB6D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAEB6E8(uint64_t a1)
{
  v6[0] = &unk_1F396F638;
  v6[1] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:WhitePoint");
  (*(void (**)(uint64_t, void **, void *, uint64_t))(*(void *)v1 + 600))(v1, __p, v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDAEB7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAEB7F8(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  double v14 = a3;
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) != 10
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) != 15)
  {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v10, a1);
  uint64_t v5 = v10;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE");
  char v6 = (*(uint64_t (**)(uint64_t, void **, void **, void))(*(void *)v5 + 248))(v5, __p, v12, 0);
  if ((void *)((char *)v12[1] - (char *)v12[0]) == (void *)32) {
    char v7 = v6;
  }
  else {
    char v7 = 0;
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    sub_1DDA18310(v11);
  }
  if (v7)
  {
    *(_OWORD *)a2 = *(_OWORD *)v12;
    a2[2] = v13;
  }
  else
  {
LABEL_12:
    sub_1DDA25B2C(a2, 4uLL, &v14);
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete(v12[0]);
    }
  }
}

void sub_1DDAEB974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAEB9C0(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)a1 + 2952))(0.0);
}

uint64_t sub_1DDAEB9F0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 512))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDAEBA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAEBAA4(void *a1)
{
  sub_1DDA30DE8((uint64_t)a1);
  if (!a1[3])
  {
    int v2 = (*(uint64_t (**)(void *))(*a1 + 592))(a1);
    if (v2 == 0xFFFF)
    {
      (*(void (**)(void **__return_ptr, void *))(*a1 + 160))(__p, a1);
      sub_1DDAEC0C8(__p, &v21);
      if (__p[1]) {
        sub_1DDA18310((std::__shared_weak_count *)__p[1]);
      }
      if (!v21)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      (*(void (**)(void **__return_ptr))(*(void *)v21 + 384))(__p);
      uint64_t v18 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
      uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 408))(a1);
      *(void *)&long long v16 = (*(uint64_t (**)(void *))(*a1 + 432))(a1);
      *((void *)&v16 + 1) = v8;
      sub_1DDAEC8AC(__p, (unint64_t *)&v18, &v17, &v16, &v19);
      if (__p[1]) {
        sub_1DDA18310((std::__shared_weak_count *)__p[1]);
      }
      uint64_t v9 = v19;
      (*(void (**)(void **__return_ptr))(*(void *)v21 + 792))(__p);
      if ((void **)(v9 + 192) != __p) {
        sub_1DDA49578((void *)(v9 + 192), (char *)__p[0], (char *)__p[1], (char *)__p[1] - (char *)__p[0]);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      uint64_t v11 = v19;
      uint64_t v10 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = (std::__shared_weak_count *)a1[4];
      a1[3] = v11;
      a1[4] = v10;
      if (v12) {
        sub_1DDA18310(v12);
      }
      if (v20) {
        sub_1DDA18310(v20);
      }
      char v7 = v22;
      if (v22) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v2 == 32773)
      {
        (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 160))(&v19, a1);
        (*(void (**)(void **__return_ptr))(*(void *)v19 + 384))(&v21);
        uint64_t v18 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
        uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 408))(a1);
        *(void *)&long long v16 = (*(uint64_t (**)(void *))(*a1 + 432))(a1);
        *((void *)&v16 + 1) = v4;
        sub_1DDAEC818(&v21, (unint64_t *)&v18, &v17, &v16, __p);
      }
      else
      {
        if (v2 != 1)
        {
          double v14 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](v14, "RawCameraException");
          __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 160))(&v19, a1);
        (*(void (**)(void **__return_ptr))(*(void *)v19 + 384))(&v21);
        uint64_t v18 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
        uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 408))(a1);
        *(void *)&long long v16 = (*(uint64_t (**)(void *))(*a1 + 432))(a1);
        *((void *)&v16 + 1) = v3;
        sub_1DDAEC784(&v21, (unint64_t *)&v18, &v17, &v16, __p);
      }
      long long v5 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      char v6 = (std::__shared_weak_count *)a1[4];
      *(_OWORD *)(a1 + 3) = v5;
      if (v6)
      {
        sub_1DDA18310(v6);
        if (__p[1]) {
          sub_1DDA18310((std::__shared_weak_count *)__p[1]);
        }
      }
      if (v22) {
        sub_1DDA18310(v22);
      }
      char v7 = v20;
      if (v20) {
LABEL_13:
      }
        sub_1DDA18310(v7);
    }
  }
}

void sub_1DDAEC00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void *sub_1DDAEC0C8@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  int v2 = a1;
  uint64_t result = *a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F3960E70, 0)) != 0)
  {
    long long v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    int v2 = a2;
  }
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

void *sub_1DDAEC14C(uint64_t a1, void *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&__p);
  sub_1DDAEC0C8(&__p, &v10);
  if (v7) {
    sub_1DDA18310(v7);
  }
  uint64_t v3 = v10;
  if (v10)
  {
    uint64_t v9 = 0;
    sub_1DDA1A880(&__p, "IFD0:EXIF:MAKERNOTE:ExpandedDynamicRange");
    uint64_t v4 = (*(uint64_t (**)(void *, void **, uint64_t *))(*(void *)v3 + 784))(v3, &__p, &v9);
    uint64_t v3 = (void *)v4;
    if ((v8 & 0x80000000) == 0)
    {
      if (!v4) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    operator delete(__p);
    if (v3) {
LABEL_6:
    }
      *a2 = v9;
  }
LABEL_7:
  if (v11) {
    sub_1DDA18310(v11);
  }
  return v3;
}

void sub_1DDAEC240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAEC270(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 944))(a1);
  double result = 0.0;
  if (v2)
  {
    unsigned int v4 = sub_1DDAEC14C(a1, &v5);
    double result = 0.0;
    if (v4) {
      return 1.0;
    }
  }
  return result;
}

id sub_1DDAEC2E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"activeRectAvailableAsTag", v5, v6))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v44, a1);
    sub_1DDAC8028(&v44, (void **)&v46);
    if (v45) {
      sub_1DDA18310(v45);
    }
    uint64_t v10 = (void *)MEMORY[0x1E4F1CC28];
    if (v46 != 0.0
      && (*(unsigned int (**)(double))(**(void **)&v46 + 784))(COERCE_DOUBLE(*(void *)&v46)))
    {
      uint64_t v10 = (void *)MEMORY[0x1E4F1CC38];
    }
    id v11 = v10;
    goto LABEL_8;
  }
  if (objc_msgSend_isEqualToString_(v3, v7, @"hasExtendedDynamicRangeAdjustment", v8, v9))
  {
    unsigned int v16 = sub_1DDAEC14C(a1, &v46);
    uint64_t v17 = (void *)MEMORY[0x1E4F1CC28];
    if (v16) {
      uint64_t v17 = (void *)MEMORY[0x1E4F1CC38];
    }
    id v18 = v17;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v3, v13, @"extendedDynamicRangeAdjustment", v14, v15))
  {
    double v46 = 0.0;
    uint64_t v22 = NSNumber;
    sub_1DDAEC14C(a1, &v46);
    objc_msgSend_numberWithDouble_(v22, v23, v24, v25, v26, v46);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_16;
  }
  if (!objc_msgSend_isEqualToString_(v3, v19, @"dngBaselineExposureTag", v20, v21))
  {
    if (objc_msgSend_isEqualToString_(v3, v28, @"pentaxShakeReduction", v29, v30))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v44, a1);
      sub_1DDAEC0C8(&v44, (void **)&v46);
      if (v45) {
        sub_1DDA18310(v45);
      }
      size_t v39 = NSNumber;
      if (v46 == 0.0)
      {
        objc_msgSend_numberWithInt_(NSNumber, v36, 0, v37, v38);
      }
      else
      {
        uint64_t v40 = (*(uint64_t (**)(double))(**(void **)&v46 + 800))(COERCE_DOUBLE(*(void *)&v46));
        objc_msgSend_numberWithInt_(v39, v41, v40, v42, v43);
      }
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_8;
    }
    sub_1DDBCE65C(a1, v3);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
LABEL_16:
    uint64_t v12 = v18;
    goto LABEL_17;
  }
  uint64_t v31 = NSNumber;
  (*(void (**)(double *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v46, a1);
  (*(void (**)(double))(**(void **)&v46 + 352))(COERCE_DOUBLE(*(void *)&v46));
  objc_msgSend_numberWithDouble_(v31, v32, v33, v34, v35);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
LABEL_8:
  uint64_t v12 = v11;
  if (v47) {
    sub_1DDA18310(v47);
  }
LABEL_17:

  return v12;
}

void sub_1DDAEC5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAEC5FC()
{
}

uint64_t sub_1DDAEC610(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  unsigned int v6 = a4;
  if (a4 == 3) {
    a4 = 4;
  }
  uint64_t v8 = sub_1DDAB76F0(a1, a2, a3, a4, a5);
  uint64_t v9 = v8;
  if (v6 == 3 && v8)
  {
    int v10 = *(_DWORD *)(a1 + 12);
    switch(v10)
    {
      case 1:
        uint64_t v14 = (unsigned int *)*a5;
        uint64_t v13 = (unsigned int *)(*a5 + 4);
        uint64_t v12 = (unsigned int *)(*a5 + 8);
        id v11 = (unsigned int *)(*a5 + 12);
        break;
      case 2:
        uint64_t v12 = (unsigned int *)*a5;
        id v11 = (unsigned int *)(*a5 + 4);
        uint64_t v13 = (unsigned int *)(*a5 + 8);
        uint64_t v14 = (unsigned int *)(*a5 + 12);
        break;
      case 3:
        id v11 = (unsigned int *)*a5;
        uint64_t v12 = (unsigned int *)(*a5 + 4);
        uint64_t v13 = (unsigned int *)(*a5 + 12);
        uint64_t v14 = (unsigned int *)(*a5 + 8);
        break;
      default:
        uint64_t v12 = (unsigned int *)*a5;
        id v11 = (unsigned int *)(*a5 + 4);
        uint64_t v14 = (unsigned int *)(*a5 + 8);
        uint64_t v13 = (unsigned int *)(*a5 + 12);
        break;
    }
    unsigned int v15 = *v13;
    unsigned int v16 = *v14;
    unsigned int v17 = *v11;
    unsigned int v18 = *v12;
    sub_1DDA1AD40(&v31, 3uLL);
    unint64_t v19 = v18 * (unint64_t)v16;
    unint64_t v20 = v17 * (unint64_t)v16;
    unint64_t v21 = v17 * (unint64_t)v15;
    if (v19 >> 16) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v20 >> 16 == 0;
    }
    if (!v22 || v21 >= 0x10000)
    {
      do
      {
        do
        {
          unint64_t v23 = v20;
          unint64_t v24 = v19 >> 17;
          v19 >>= 1;
          unint64_t v25 = v21;
          v20 >>= 1;
          v21 >>= 1;
        }
        while (v24);
      }
      while (v23 >> 17 || v25 >> 17);
    }
    uint64_t v26 = (void *)*a5;
    long long v27 = v31;
    uint64_t v28 = v31;
    *(_DWORD *)long long v31 = v19;
    *(_DWORD *)(v28 + 4) = v20;
    *(_DWORD *)(v28 + 8) = v21;
    *(_OWORD *)a5 = v27;
    uint64_t v29 = a5[2];
    a5[2] = v32;
    *(void *)&long long v31 = v26;
    uint64_t v32 = v29;
    if (v26)
    {
      *((void *)&v31 + 1) = v26;
      operator delete(v26);
    }
  }
  return v9;
}

void sub_1DDAEC784(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0xE0uLL);
  sub_1DDA5840C((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAEC804(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAEC818(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0xE0uLL);
  sub_1DDA5891C((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAEC898(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAEC8AC(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0xF0uLL);
  sub_1DDAEC940(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAEC92C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAEC940(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F396F680;
  sub_1DDAA58A8((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1F3967EC0;
  a1[28] = 0;
  a1[29] = 0;
  a1[27] = 0;
  return a1;
}

void sub_1DDAEC9B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAEC9C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396F680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAEC9E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F396F680;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAECA38(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDAECA60(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = (void *)sub_1DDBF0D7C(a1, a2);
  *uint64_t v5 = &unk_1F396F6D0;
  v5[6] = 0;
  unsigned int v6 = (void **)(v5 + 6);
  v5[7] = 0;
  v5[8] = 0;
  *(_DWORD *)(a1 + 12) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1DDA19EC8(*a3);
  int v7 = sub_1DDA19EC8(*a3);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      float v9 = sub_1DDA1A014(*a3);
      float v10 = v9;
      uint64_t v12 = *(float **)(a1 + 56);
      unint64_t v11 = *(void *)(a1 + 64);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = (float *)*v6;
        uint64_t v15 = ((char *)v12 - (unsigned char *)*v6) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          sub_1DDA17F78();
        }
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          unint64_t v19 = (char *)sub_1DDA17F90(a1 + 64, v18);
          uint64_t v14 = *(float **)(a1 + 48);
          uint64_t v12 = *(float **)(a1 + 56);
        }
        else
        {
          unint64_t v19 = 0;
        }
        unint64_t v20 = (float *)&v19[4 * v15];
        float *v20 = v10;
        uint64_t v13 = v20 + 1;
        while (v12 != v14)
        {
          int v21 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(void *)(a1 + 48) = v20;
        *(void *)(a1 + 56) = v13;
        *(void *)(a1 + 64) = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        float *v12 = v9;
        uint64_t v13 = v12 + 1;
      }
      *(void *)(a1 + 56) = v13;
    }
  }
  return a1;
}

void sub_1DDAECC1C(_Unwind_Exception *exception_object)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDAECC48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v6 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5);
  float v10 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v7, *(unsigned int *)(a1 + 12), v8, v9);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, @"Top", v12);

  unint64_t v16 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v13, *(unsigned int *)(a1 + 16), v14, v15);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, @"Left", v18);

  BOOL v22 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v19, *(unsigned int *)(a1 + 20), v20, v21);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, @"Bottom", v24);

  uint64_t v28 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v25, *(unsigned int *)(a1 + 24), v26, v27);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, @"mRight", v30);

  uint64_t v34 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v31, *(unsigned int *)(a1 + 28), v32, v33);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, @"Plane", v36);

  uint64_t v40 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v37, *(unsigned int *)(a1 + 32), v38, v39);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, @"Planes", v42);

  double v46 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v43, *(unsigned int *)(a1 + 36), v44, v45);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, @"RowPitch", v48);

  int v52 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v49, *(unsigned int *)(a1 + 40), v50, v51);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, @"ColPitch", v54);

  uint64_t v63 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v55, v56, v57, v58);
  uint64_t v65 = *(_DWORD **)(a1 + 48);
  uint64_t v66 = *(_DWORD **)(a1 + 56);
  while (v65 != v66)
  {
    LODWORD(v64) = *v65;
    uint64_t v67 = objc_msgSend_numberWithFloat_(NSNumber, v59, v60, v61, v62, v64);
    objc_msgSend_addObject_(v63, v68, (uint64_t)v67, v69, v70);

    ++v65;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v63, @"Delta", v62);
  uint64_t v71 = [RAWOpcodeDeltaPerRow alloc];
  double v75 = objc_msgSend_initWithArguments_(v71, v72, (uint64_t)v6, v73, v74);

  return v75;
}

void sub_1DDAECE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1DDAECED8(void *a1)
{
  *a1 = &unk_1F396F6D0;
  int v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1DDAECF28(void *a1)
{
  *a1 = &unk_1F396F6D0;
  int v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAECF98()
{
  return 10;
}

uint64_t sub_1DDAECFA0@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  int v10 = a2;
  sub_1DDA1AB9C(a4, a3 + 64);
  uint64_t v7 = *(void *)(a1 + 24);
  sub_1DDA18410(&v9, &v10);
  (*(void (**)(uint64_t, int *, void))(*(void *)v7 + 40))(v7, &v9, 0);
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), *a4, a3);
}

void sub_1DDAED058(void *a1)
{
  __cxa_begin_catch(a1);
  int v2 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
    *(void *)uint64_t v1 = 0;
    *(void *)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0;
  }
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x1DDAED044);
}

void sub_1DDAED088(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAED0A4(os_signpost_id_t a1)
{
  int v2 = sub_1DDA83CFC();
  id v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(v23.next_in) = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CSonyDeflateUnpacker", (const char *)&unk_1DDC3ACB6, (uint8_t *)&v23, 2u);
  }

  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = sub_1DDAED54C;
  v26[3] = &unk_1E6D04A58;
  v26[4] = a1;
  unsigned int v4 = (void (**)(void))MEMORY[0x1E01C46E0](v26);
  unsigned int v5 = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 56))(a1);
  unsigned int v7 = *(_DWORD *)(a1 + 44);
  unsigned int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v8 = *(_DWORD *)(a1 + 188);
  unsigned int v9 = *(_DWORD *)(a1 + 192);
  v23.next_iuint64_t n = (Bytef *)((uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 2);
  sub_1DDA18500(v25, (unint64_t *)&v23);
  if (v7 >> 5 >= 0x271 || v6 >> 5 >= 0x271 || v8 >> 5 >= 0x271 || v9 >> 5 >= 0x271 || LODWORD(v25[0]) >= 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = sub_1DDAA5B9C(a1);
  sub_1DDAECFA0(a1, **(_DWORD **)(a1 + 200), **(_DWORD **)(a1 + 224), v25);
  size_t v11 = 12 * v8 * v9;
  sub_1DDA1AB9C(__p, v11);
  memset(&v23.zalloc, 0, 24);
  v23.avail_iuint64_t n = **(_DWORD **)(a1 + 224);
  v23.next_iuint64_t n = (Bytef *)v25[0];
  v23.avail_out = v11;
  v23.next_out = (Bytef *)__p[0];
  if (inflateInit_(&v23, "1.2.12", 112) || inflate(&v23, 2) != 1 || inflateEnd(&v23))
  {
    BOOL v22 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v22, "RawCameraException");
    __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v12 = sub_1DDAA72BC(a1);
  uint64_t v13 = (unsigned __int8 *)__p[0];
  uint64_t v14 = (*(_DWORD *)(a1 + 192) * *(_DWORD *)(a1 + 188));
  sub_1DDB165E0((uint64_t)__p[0], 4 * v14, v5);
  unint64_t v15 = v14 * (unint64_t)v5;
  if (v15)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      float v17 = 0.0;
      uint64_t v18 = v13;
      uint64_t v19 = 4;
      do
      {
        if (v19 != 4) {
          LODWORD(v17) <<= 8;
        }
        LODWORD(v17) |= *v18;
        v18 += v15;
        --v19;
      }
      while (v19);
      unsigned int v20 = bswap32(LODWORD(v17));
      if (v12 != 1) {
        float v17 = *(float *)&v20;
      }
      *(_WORD *)(v10 + 2 * i) = (int)v17;
      ++v13;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  v4[2](v4);
}

void sub_1DDAED4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  _Unwind_Resume(a1);
}

void sub_1DDAED54C(uint64_t a1)
{
  int v2 = sub_1DDA83CFC();
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSonyDeflateUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

char *sub_1DDAED5D4(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 188) = a2;
  *(_DWORD *)(a1 + 192) = a3;
  unsigned int v7 = (char *)(a1 + 200);
  if (v7 != (char *)a4) {
    sub_1DDA17E28(v7, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  double result = (char *)(a1 + 224);
  if (a1 + 224 != a5)
  {
    unsigned int v9 = *(char **)a5;
    uint64_t v10 = *(void *)(a5 + 8);
    unint64_t v11 = (v10 - *(void *)a5) >> 2;
    return sub_1DDA17E28(result, v9, v10, v11);
  }
  return result;
}

void *sub_1DDAED64C(void *a1)
{
  *a1 = &unk_1F396F718;
  int v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDAED6BC(void *a1)
{
  *a1 = &unk_1F396F718;
  int v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

BOOL sub_1DDAED740(uint64_t a1, int a2)
{
  return a2 == 2;
}

void sub_1DDAED74C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2992))(a1)
    && ((unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2952))(a1), v4 <= 0x2CA5)
      ? (unsigned int v5 = (14 * v4) & 0xFFFF0)
      : (unsigned int v5 = 160000),
        v5 > (*(unsigned int (**)(uint64_t))(*(void *)a1 + 864))(a1)))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 728))(v70, a1);
    unsigned __int16 v6 = llround((*(double (**)(uint64_t))(*(void *)a1 + 896))(a1));
    sub_1DDAD8240((uint64_t)&v67, 3u, 1u, *(double *)v70[0] * (double)v6, v7, v8, v9, v10, v11, COERCE__INT64(*((double *)v70[0] + 1) * (double)v6));
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 648))(v66, a1);
    double v57 = (*(double (**)(uint64_t))(*(void *)a1 + 720))(a1);
    uint64_t v58 = v12;
    sub_1DDAD8240((uint64_t)&v60, 3u, 3u, 0.6097, v13, v14, v15, v16, v17, 0x3FCA474538EF34D7);
    sub_1DDB121FC((uint64_t)v66, &v57, &v60, &v63);
    if (__p)
    {
      uint64_t v62 = __p;
      operator delete(__p);
    }
    if (!v63 || !HIDWORD(v63))
    {
      sub_1DDAD8240(a2, 3u, 1u, (double)v6, v18, v19, v20, v21, v22, v6);
      goto LABEL_28;
    }
    sub_1DDAD8240((uint64_t)&v57, 3u, 1u, 1.0, v18, v19, v20, v21, v22, 0x3FF0000000000000);
    sub_1DDAD8FBC((unsigned int *)&v63, &v52);
    sub_1DDAD8BC8((unsigned int *)&v52, &v57, (uint64_t)&v54);
    if (*((void *)&v52 + 1))
    {
      uint64_t v53 = *((void *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    double v23 = sub_1DDAD97A4((unsigned int *)&v54);
    sub_1DDAD8AE0((unsigned int *)&v54, (uint64_t)&v52, 1.0 / v23);
    sub_1DDAD88E8(&v54, (uint64_t)&v52);
    if (*((void *)&v52 + 1))
    {
      uint64_t v53 = *((void *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    double v24 = sub_1DDAD9854((unsigned int *)&v54);
    *(void *)&long long v52 = sub_1DDAD8560((uint64_t)&v54, 2u);
    *((void *)&v52 + 1) = v25;
    *(double *)sub_1DDAD85FC((uint64_t)&v52, 0) = v24;
    v51[0] = sub_1DDAD8560((uint64_t)&v54, 1u);
    v51[1] = v26;
    *(double *)sub_1DDAD85FC((uint64_t)v51, 0) = v24;
    v50[0] = sub_1DDAD8560((uint64_t)&v54, 0);
    v50[1] = v27;
    *(double *)sub_1DDAD85FC((uint64_t)v50, 0) = v24;
    sub_1DDAD8AE0((unsigned int *)&v54, a2, (double)v5);
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 728))(v70, a1);
    unsigned __int16 v28 = llround((*(double (**)(uint64_t))(*(void *)a1 + 896))(a1));
    sub_1DDAD8240((uint64_t)&v67, 3u, 1u, *(double *)v70[0] * (double)v28, v29, v30, v31, v32, v33, COERCE__INT64(*((double *)v70[0] + 1) * (double)v28));
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 648))(v66, a1);
    double v57 = (*(double (**)(uint64_t))(*(void *)a1 + 720))(a1);
    uint64_t v58 = v34;
    sub_1DDAD8240((uint64_t)&v47, 3u, 3u, 0.6097, v35, v36, v37, v38, v39, 0x3FCA474538EF34D7);
    sub_1DDB121FC((uint64_t)v66, &v57, &v47, &v63);
    if (v48)
    {
      uint64_t v49 = v48;
      operator delete(v48);
    }
    if (!v63 || !HIDWORD(v63))
    {
      sub_1DDAD8240(a2, 3u, 1u, (double)v28, v40, v41, v42, v43, v44, v28);
      goto LABEL_28;
    }
    sub_1DDAD8240((uint64_t)&v57, 3u, 1u, 1.0, v40, v41, v42, v43, v44, 0x3FF0000000000000);
    sub_1DDAD8FBC((unsigned int *)&v63, &v52);
    sub_1DDAD8BC8((unsigned int *)&v52, &v57, (uint64_t)&v54);
    if (*((void *)&v52 + 1))
    {
      uint64_t v53 = *((void *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    double v45 = sub_1DDAD97A4((unsigned int *)&v54);
    sub_1DDAD8AE0((unsigned int *)&v54, (uint64_t)&v52, 1.0 / v45);
    sub_1DDAD88E8(&v54, (uint64_t)&v52);
    if (*((void *)&v52 + 1))
    {
      uint64_t v53 = *((void *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    double v46 = sub_1DDAD97A4(&v67);
    sub_1DDAD8AE0((unsigned int *)&v54, a2, v46);
  }
  if (v55)
  {
    uint64_t v56 = v55;
    operator delete(v55);
  }
  if (v58)
  {
    int v59 = v58;
    operator delete(v58);
  }
LABEL_28:
  if (v64)
  {
    uint64_t v65 = v64;
    operator delete(v64);
  }
  sub_1DDACB228(v66);
  if (v68)
  {
    uint64_t v69 = v68;
    operator delete(v68);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
}

void sub_1DDAEDE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1DDACB228(&a45);
  unsigned int v47 = *(void **)(v45 - 112);
  if (v47)
  {
    *(void *)(v45 - 104) = v47;
    operator delete(v47);
  }
  uint64_t v48 = *(void **)(v45 - 88);
  if (v48)
  {
    *(void *)(v45 - 80) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void sub_1DDAEDF70(uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 736))(&v6);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 728))(__p, a1);
    sub_1DDAD86A8((uint64_t *)__p, &v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2992))(a1))
    {
      sub_1DDAD9854((unsigned int *)&v4);
      sub_1DDAD97A4((unsigned int *)&v4);
    }
    sub_1DDAD97A4((unsigned int *)&v6);
    if (*((void *)&v4 + 1))
    {
      uint64_t v5 = *((void *)&v4 + 1);
      operator delete(*((void **)&v4 + 1));
    }
    if (v7)
    {
      uint64_t v8 = v7;
      operator delete(v7);
    }
  }
}

void sub_1DDAEE0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAEE114(unsigned __int16 *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1[201];
  if (!a1[201])
  {
    uint64_t v11 = 0x100010000;
    long long __p = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    sub_1DDA1D908(&__p, &v11, (uint64_t)&v12, 4);
    (*(void (**)(uint64_t *__return_ptr, unsigned __int16 *))(*(void *)a1 + 400))(&v6, a1);
    uint64_t v3 = v6;
    unsigned int v4 = (*(uint64_t (**)(unsigned __int16 *))(*(void *)a1 + 888))(a1);
    uint64_t v1 = sub_1DDAA8298(v3, (uint64_t)&__p, v4);
    if (v7) {
      sub_1DDA18310(v7);
    }
    a1[201] = v1;
    if (__p)
    {
      uint64_t v9 = __p;
      operator delete(__p);
      return a1[201];
    }
  }
  return v1;
}

void sub_1DDAEE240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAEE278(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v7);
  uint64_t v2 = v7;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = sub_1DDAEE6F4;
  v6[3] = &unk_1E6D05380;
  v6[4] = a1;
  double v4 = sub_1DDAEE388(v2, @"directionNoiseFactor", v3, v6);
  if (v8) {
    sub_1DDA18310(v8);
  }
  return v4;
}

void sub_1DDAEE370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAEE388(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  sub_1DDAB6A18(v7, a3, &__p);
  uint64_t v9 = (uint64_t **)(a1 + 24);
  uint64_t v10 = sub_1DDA2A530(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    _DWORD v30[2] = sub_1DDAF1834;
    v30[3] = &unk_1E6D051C0;
    uint64_t v13 = (double (**)(void))v8;
    id v31 = v13;
    sub_1DDB657E4(a1, v7, v30, &p_p);
    uint64_t v18 = (long long *)p_p;
    if (p_p)
    {
      uint64_t v19 = sub_1DDB67AB8((uint64_t)p_p, v14, v15, v16, v17);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      objc_msgSend_doubleValue(v19, v20, v21, v22, v23);
      double v12 = v24;
    }
    else
    {
      double v12 = 0.0;
    }
    if (v35) {
      sub_1DDA18310(v35);
    }

    if (!v18) {
      double v12 = v13[2](v13);
    }
    p_p = &__p;
    uint64_t v25 = sub_1DDAB6C70(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_p);
    uint64_t v26 = (void (**)(uint64_t, void, std::string **, void, void))(v25 + 7);
    v33[1] = *(uint64_t (**)(void, void, void, void, void))&v12;
    v33[0] = (uint64_t (*)(void, void, void, void, void))sub_1DDAF18C8;
    if (v33 != (uint64_t (**)(void, void, void, void, void))(v25 + 7))
    {
      uint64_t v27 = *v26;
      if (*v26)
      {
        p_p = 0;
        uint64_t v35 = 0;
        v27(2, v26, &p_p, 0, 0);
        v33[0](2, v33, v26, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(void, void, void, void, void), void, void))p_p)(2, &p_p, v33, 0, 0);
        sub_1DDAB6E58((uint64_t (**)(void, void, void, void, void))&p_p);
      }
      else
      {
        *((double *)v25 + 8) = v12;
        v25[7] = (uint64_t)sub_1DDAF18C8;
        v33[0] = 0;
      }
    }
    sub_1DDAB6E58(v33);
  }
  else
  {
    uint64_t v11 = (double *)sub_1DDAF187C((uint64_t (**)(uint64_t, void, void, void, void *))v10 + 7);
    if (!v11) {
      sub_1DDAB6C00();
    }
    double v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v12;
}

void sub_1DDAEE664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  __cxa_free_exception(v28);

  if (a26) {
    sub_1DDA18310(a26);
  }

  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

double sub_1DDAEE6F4(uint64_t a1)
{
  return (double)(*(unsigned int (**)(void))(**(void **)(a1 + 32) + 256))(*(void *)(a1 + 32))
       * -0.0031
       + 8.31;
}

double sub_1DDAEE750(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  double v4 = sub_1DDAEE388(v2, @"directionLowThreshold", v3, &unk_1F396F800);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDAEE804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAEE81C()
{
  return 2.5;
}

double sub_1DDAEE824(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  double v4 = sub_1DDAEE388(v2, @"gradientThreshold", v3, &unk_1F396F820);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDAEE8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAEE8F0()
{
  return 0.0;
}

uint64_t sub_1DDAEE8F8(uint64_t *a1)
{
  unsigned int v2 = (sub_1DDB478D4(a1) >> 4) & 0xF0F0F0F;
  return (16 * sub_1DDB478D4(a1)) & 0xF0F0F0F0 | v2;
}

BOOL sub_1DDAEE938(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  BOOL v4 = sub_1DDAC8A08(v2, @"blackLevelExtendEnabled", v3, &unk_1F396F840);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDAEE9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAEE9FC()
{
  return 0;
}

uint64_t sub_1DDAEEA04(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1) != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2168))(a1);
  if (v2 == -583279181) {
    return 4;
  }
  if (v2 != 2011985870) {
    return 0xFFFFFFFFLL;
  }
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2992))(a1);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3000))(a1);
  if (v3)
  {
    unsigned int v5 = 6;
    unsigned int v6 = 8;
  }
  else
  {
    unsigned int v5 = 5;
    unsigned int v6 = 7;
  }
  if (v4) {
    return v6;
  }
  else {
    return v5;
  }
}

void sub_1DDAEEB9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAEEBB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 496) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5.n128_f32[0] = sub_1DDB4ACE8(a1, a2, (int *)a3);
  *(void *)(a3 + 196) = 0;
  *(void *)(a3 + 188) = 0;
  *(unsigned char *)(a3 + 9) = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 2976))(a1, v5);
  *(_DWORD *)(a3 + 40) = 1063675494;
  *(_DWORD *)(a3 + 68) = 1078774989;
  *(_DWORD *)(a3 + 108) = 0;
  float v6 = (*(double (**)(uint64_t))(*(void *)a1 + 1080))(a1);
  *(float *)(a3 + 116) = v6;
  *(void *)(a3 + 120) = 0x200000000;
  *(void *)(a3 + 128) = 0x3F2AAAB000000001;
  *(unsigned char *)(a3 + 136) = 1;
  *(_DWORD *)(a3 + 140) = 0;
  *(_DWORD *)(a3 + 144) = 2 * ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 256))(a1) > 0x190);
  *(void *)(a3 + 148) = 0x3CF5C28F3D48B439;
  *(_DWORD *)(a3 + 156) = 1071602729;
  *(unsigned char *)(a3 + 301) = 1;
  float v7 = (*(double (**)(uint64_t))(*(void *)a1 + 2320))(a1);
  *(float *)(a3 + 112) = v7;
  *(_DWORD *)(a3 + 304) = 1;
  *(unsigned char *)(a3 + 308) = 1;
  float v8 = (*(double (**)(uint64_t))(*(void *)a1 + 3008))(a1);
  *(float *)(a3 + 620) = v8;
  (*(void (**)(double **__return_ptr, uint64_t))(*(void *)a1 + 744))(&v22, a1);
  uint64_t v9 = v22;
  unint64_t v10 = (char *)v23 - (char *)v22;
  if (v23 == v22
    || (float v11 = *v22 * 1.04, *(float *)(a3 + 624) = v11, v10 < 9)
    || (float v12 = v9[1] * 1.01, *(float *)(a3 + 628) = v12, v10 <= 0x10))
  {
    sub_1DDA24AD0();
  }
  float v13 = v9[2] * 0.91;
  *(float *)(a3 + 632) = v13;
  uint64_t v23 = v9;
  operator delete(v9);
  *(void *)(a3 + 188) = 1;
  *(void *)(a3 + 196) = 4489188110499840000;
  float v14 = (*(double (**)(uint64_t))(*(void *)a1 + 2960))(a1);
  *(float *)(a3 + 204) = v14;
  float v15 = (*(double (**)(uint64_t))(*(void *)a1 + 2968))(a1);
  *(float *)(a3 + 208) = v15;
  *(_DWORD *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 212) = 1;
  *(unsigned char *)(a3 + 228) = 1;
  *(unsigned char *)(a3 + 240) = 1;
  char v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 3000))(a1);
  uint64_t v17 = 0x3B83126F3F000000;
  if (v16)
  {
    uint64_t v18 = 0x3B83126F3F000000;
  }
  else
  {
    char v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2992))(a1);
    uint64_t v17 = 0x3B83126F3F000000;
    uint64_t v18 = 0x3B83126F3F000000;
    if (v19)
    {
      *(float *)&unsigned int v20 = (double)(*(unsigned int (**)(uint64_t, double))(*(void *)a1 + 256))(a1, 5.04831901e-22)/ -75.0+ 34.6667;
      uint64_t v17 = v20;
      uint64_t v18 = 0x3D5D2F1B3CB43958;
    }
  }
  *(void *)(a3 + 216) = v17;
  *(void *)(a3 + 232) = v18;
  *(_DWORD *)(a3 + 244) = v18;
  *(_DWORD *)(a3 + 224) = 0;
  *(_WORD *)(a3 + 252) = 257;
  *(void *)(a3 + 256) = 1025490551;
  *(_DWORD *)(a3 + 268) = 2;
  float v21 = (*(double (**)(uint64_t))(*(void *)a1 + 2984))(a1);
  *(float *)(a3 + 184) = v21;
  *(unsigned char *)(a3 + 163) = v21 > 1.0e-10;
}

void sub_1DDAEF0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAEF0F4(unsigned char *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((*(int (**)(unsigned char *))(*(void *)a1 + 120))(a1) <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  a1[400] = 1;
  sub_1DDAB9948((uint64_t)a1, a2, v5);
  if (a2 && (*(unsigned int (**)(unsigned char *))(*(void *)a1 + 2992))(a1))
  {
    float v6 = sub_1DDA7A98C(v5, (void *)*MEMORY[0x1E4F2FD18], 0);
    float v7 = (void *)MEMORY[0x1E01C4510]();
    (*(void (**)(uint64_t *__return_ptr, unsigned char *))(*(void *)a1 + 1200))(&v111, a1);
    if (sub_1DDAD88E0((uint64_t)&v111) < 3 || sub_1DDAD88D8((unsigned int *)&v111) <= 2)
    {
      uint64_t v108 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v108, "RawCameraException");
      __cxa_throw(v108, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    float v8 = NSNumber;
    uint64_t v109 = sub_1DDAD8560((uint64_t)&v111, 0);
    uint64_t v110 = v9;
    double v10 = *(double *)sub_1DDAD85FC((uint64_t)&v109, 0);
    double v11 = (*(double (**)(unsigned char *))(*(void *)a1 + 3016))(a1);
    char v16 = objc_msgSend_numberWithDouble_(v8, v12, v13, v14, v15, v10 * v11);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, @"mc00", v18);

    char v19 = NSNumber;
    uint64_t v109 = sub_1DDAD8560((uint64_t)&v111, 0);
    uint64_t v110 = v20;
    double v21 = *(double *)sub_1DDAD85FC((uint64_t)&v109, 1u);
    double v22 = (*(double (**)(unsigned char *))(*(void *)a1 + 3016))(a1);
    uint64_t v27 = objc_msgSend_numberWithDouble_(v19, v23, v24, v25, v26, v21 * v22);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v28, (uint64_t)v27, @"mc01", v29);

    uint64_t v30 = NSNumber;
    uint64_t v109 = sub_1DDAD8560((uint64_t)&v111, 0);
    uint64_t v110 = v31;
    double v32 = *(double *)sub_1DDAD85FC((uint64_t)&v109, 2u);
    double v33 = (*(double (**)(unsigned char *))(*(void *)a1 + 3016))(a1);
    uint64_t v38 = objc_msgSend_numberWithDouble_(v30, v34, v35, v36, v37, v32 * v33);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v39, (uint64_t)v38, @"mc02", v40);

    uint64_t v41 = NSNumber;
    uint64_t v109 = sub_1DDAD8560((uint64_t)&v111, 1u);
    uint64_t v110 = v42;
    double v43 = *(double *)sub_1DDAD85FC((uint64_t)&v109, 0);
    double v44 = (*(double (**)(unsigned char *))(*(void *)a1 + 3016))(a1);
    uint64_t v49 = objc_msgSend_numberWithDouble_(v41, v45, v46, v47, v48, v43 * v44);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v50, (uint64_t)v49, @"mc10", v51);

    long long v52 = NSNumber;
    uint64_t v109 = sub_1DDAD8560((uint64_t)&v111, 1u);
    uint64_t v110 = v53;
    double v54 = *(double *)sub_1DDAD85FC((uint64_t)&v109, 1u);
    double v55 = (*(double (**)(unsigned char *))(*(void *)a1 + 3016))(a1);
    unsigned int v60 = objc_msgSend_numberWithDouble_(v52, v56, v57, v58, v59, v54 * v55);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v61, (uint64_t)v60, @"mc11", v62);

    uint64_t v63 = NSNumber;
    uint64_t v109 = sub_1DDAD8560((uint64_t)&v111, 1u);
    uint64_t v110 = v64;
    double v65 = *(double *)sub_1DDAD85FC((uint64_t)&v109, 2u);
    double v66 = (*(double (**)(unsigned char *))(*(void *)a1 + 3016))(a1);
    uint64_t v71 = objc_msgSend_numberWithDouble_(v63, v67, v68, v69, v70, v65 * v66);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v72, (uint64_t)v71, @"mc12", v73);

    uint64_t v74 = NSNumber;
    uint64_t v109 = sub_1DDAD8560((uint64_t)&v111, 2u);
    uint64_t v110 = v75;
    double v76 = *(double *)sub_1DDAD85FC((uint64_t)&v109, 0);
    double v77 = (*(double (**)(unsigned char *))(*(void *)a1 + 3016))(a1);
    uint64_t v82 = objc_msgSend_numberWithDouble_(v74, v78, v79, v80, v81, v76 * v77);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v83, (uint64_t)v82, @"mc20", v84);

    unsigned int v85 = NSNumber;
    uint64_t v109 = sub_1DDAD8560((uint64_t)&v111, 2u);
    uint64_t v110 = v86;
    double v87 = *(double *)sub_1DDAD85FC((uint64_t)&v109, 1u);
    double v88 = (*(double (**)(unsigned char *))(*(void *)a1 + 3016))(a1);
    size_t v93 = objc_msgSend_numberWithDouble_(v85, v89, v90, v91, v92, v87 * v88);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v94, (uint64_t)v93, @"mc21", v95);

    int v96 = NSNumber;
    uint64_t v109 = sub_1DDAD8560((uint64_t)&v111, 2u);
    uint64_t v110 = v97;
    double v98 = *(double *)sub_1DDAD85FC((uint64_t)&v109, 2u);
    double v99 = (*(double (**)(unsigned char *))(*(void *)a1 + 3016))(a1);
    uint64_t v104 = objc_msgSend_numberWithDouble_(v96, v100, v101, v102, v103, v98 * v99);
    objc_msgSend_setObject_forKeyedSubscript_(v6, v105, (uint64_t)v104, @"mc22", v106);

    if (__p)
    {
      int v113 = __p;
      operator delete(__p);
    }
  }
}

void sub_1DDAEF758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(a1);
}

id sub_1DDAEF804(unsigned char *a1, unsigned int a2)
{
  if ((*(int (**)(unsigned char *))(*(void *)a1 + 120))(a1) <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v4 = sub_1DDAC0F64((uint64_t)a1, a2);
  float v7 = v4;
  if (a1[400]) {
    objc_msgSend_setObject_forKeyedSubscript_(v4, v5, MEMORY[0x1E4F1CC38], @"inputLinearized", v6);
  }

  return v7;
}

void sub_1DDAEF8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1DDAEF8F4(uint64_t a1, unsigned int a2)
{
  int v3 = sub_1DDABC160(a1, a2);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2992))(a1))
  {
    float v7 = NSNumber;
    (*(void (**)(uint64_t))(*(void *)a1 + 3008))(a1);
    float v12 = objc_msgSend_numberWithDouble_(v7, v8, v9, v10, v11);
    objc_msgSend_setObject_forKeyedSubscript_(v3, v13, (uint64_t)v12, @"fujiHigh", v14);
  }
  unsigned int v15 = sub_1DDA2E1C4(v3, (const char *)@"pattern", v4, v5, v6);
  char v19 = objc_msgSend_numberWithInt_(NSNumber, v16, (v15 >> 4) & 0xF0F0F0F | (16 * v15) & 0xF0F0F0F0, v17, v18);
  objc_msgSend_setObject_forKeyedSubscript_(v3, v20, (uint64_t)v19, @"pattern", v21);

  return v3;
}

void sub_1DDAEFA1C(_Unwind_Exception *a1)
{
  int v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t (*sub_1DDAEFA48(uint64_t a1))(void, void, void, void, void)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return sub_1DDBD0F88(a1);
}

void sub_1DDAEFAE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAEFAF4(uint64_t a1)
{
  v6[0] = &unk_1F396F638;
  v6[1] = 0x300000000;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "RAF:WB_GRGBLevels");
  (*(void (**)(uint64_t, void **, void *, uint64_t))(*(void *)v1 + 600))(v1, __p, v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDAEFBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDAEFC10(uint64_t *a1)
{
  int v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 176))(a1);
  uint64_t v3 = *a1;
  if (v2) {
    return (*(unsigned int (**)(uint64_t *))(v3 + 584))(a1) == 2;
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t *))(v3 + 344))(a1);
  int v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 408))(a1);
  unint64_t v7 = (unint64_t)(*(uint64_t (**)(uint64_t *))(*a1 + 408))(a1) >> 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 408))(a1);
  unint64_t v9 = HIDWORD(v8);
  if (v8 < 0) {
    LODWORD(v9) = HIDWORD(v8) + 1;
  }
  return v5 > ((int)v7 + ((int)v9 >> 1)) * v6;
}

uint64_t sub_1DDAEFD90()
{
  return 0;
}

double sub_1DDAEFD98(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2992))(a1);
  double result = 0.0;
  if (v1) {
    return 16.0;
  }
  return result;
}

uint64_t sub_1DDAEFDE8()
{
  return 16;
}

double sub_1DDAEFDF0(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2992))(a1);
  double result = 1.0;
  if (v1) {
    return 5.0;
  }
  return result;
}

void sub_1DDAEFE40(uint64_t a1@<X0>, unsigned int *a2@<X8>)
{
  sub_1DDB0B064(a1);
  double v4 = (*(double (**)(uint64_t))(*(void *)a1 + 3016))(a1);
  sub_1DDAD8AE0(a2, (uint64_t)&v5, v4);
  sub_1DDAD88E8(a2, (uint64_t)&v5);
  if (__p)
  {
    unint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1DDAEFEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v13 = *(void **)(v11 + 8);
  if (v13)
  {
    *(void *)(v11 + 16) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAEFEFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1DDB0B090(a1);
  double v4 = (*(double (**)(uint64_t))(*(void *)a1 + 3016))(a1);
  sub_1DDAD8AE0(&v5, a2, v4);
  if (__p)
  {
    unint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1DDAEFF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAEFF98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1DDB0B0BC(a1);
  double v4 = (*(double (**)(uint64_t))(*(void *)a1 + 3016))(a1);
  sub_1DDAD8AE0(&v5, a2, v4);
  if (__p)
  {
    unint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1DDAF0018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF0034(void *a1)
{
  sub_1DDA30C98((uint64_t)a1);
  int v2 = (const void *)a1[3];
  if (v2)
  {
    uint64_t v3 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_1F3962730, (const struct __class_type_info *)&unk_1F3977F88, 0);
    if (v3)
    {
      double v4 = v3;
      unsigned int v5 = (std::__shared_weak_count *)a1[4];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((*(unsigned int (**)(void *))(*a1 + 2992))(a1)) {
        uint64_t v6 = 2;
      }
      else {
        uint64_t v6 = 1;
      }
      (*(void (**)(void *, uint64_t))(*(void *)v4 + 216))(v4, v6);
      if (v5)
      {
        sub_1DDA18310(v5);
      }
    }
  }
}

void sub_1DDAF0150(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DDA18310(v1);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDAF0168(unsigned char *a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"fujiHighlightEnabled", v5, v6))
  {
    int v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 2992))(a1);
    uint64_t v11 = (void *)MEMORY[0x1E4F1CC28];
    if (v10) {
      uint64_t v11 = (void *)MEMORY[0x1E4F1CC38];
    }
    goto LABEL_9;
  }
  if (objc_msgSend_isEqualToString_(v3, v7, @"fujiHybridMode", v8, v9))
  {
    if (a1[400]) {
      uint64_t v11 = (void *)MEMORY[0x1E4F1CC38];
    }
    else {
      uint64_t v11 = (void *)MEMORY[0x1E4F1CC28];
    }
LABEL_9:
    id v12 = v11;
    goto LABEL_11;
  }
  sub_1DDBCE65C((uint64_t)a1, v3);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
  uint64_t v13 = v12;

  return v13;
}

void sub_1DDAF0250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAF0260(uint64_t a1)
{
  if (!*(void *)(a1 + 24))
  {
    (*(void (**)(_DWORD **__return_ptr))(*(void *)a1 + 2888))(&v21);
    int v2 = v21;
    if (v22 == v21)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*v21 == 9)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v16, a1);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v16 + 384))(&v18);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
      *(void *)&long long v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
      *((void *)&v13 + 1) = v7;
      sub_1DDAF1B54(&v18, (unint64_t *)&v15, &v14, &v13, &v20);
      if (v19) {
        sub_1DDA18310(v19);
      }
      if (v17) {
        sub_1DDA18310(v17);
      }
      uint64_t v8 = v20;
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2992))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 200))(v8, v9);
      long long v10 = v20;
      if (*((void *)&v20 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
      *(_OWORD *)(a1 + 24) = v10;
      if (v11) {
        sub_1DDA18310(v11);
      }
      uint64_t v6 = (std::__shared_weak_count *)*((void *)&v20 + 1);
      if (*((void *)&v20 + 1)) {
LABEL_11:
      }
        sub_1DDA18310(v6);
    }
    else
    {
      if (*v21 != 8)
      {
LABEL_13:
        double v22 = v2;
        operator delete(v2);
        return;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v16, a1);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v16 + 384))(&v18);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
      *(void *)&long long v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
      *((void *)&v13 + 1) = v3;
      sub_1DDAF19A8(&v18, (unint64_t *)&v15, &v14, &v13, &v20);
      long long v4 = v20;
      long long v20 = 0uLL;
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
      *(_OWORD *)(a1 + 24) = v4;
      if (v5)
      {
        sub_1DDA18310(v5);
        if (*((void *)&v20 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v20 + 1));
        }
      }
      if (v19) {
        sub_1DDA18310(v19);
      }
      uint64_t v6 = v17;
      if (v17) {
        goto LABEL_11;
      }
    }
    int v2 = v21;
    if (!v21) {
      return;
    }
    goto LABEL_13;
  }
}

void sub_1DDAF0640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  if (a14) {
    sub_1DDA18310(a14);
  }
  long long v20 = *(void **)(v18 - 48);
  if (v20)
  {
    *(void *)(v18 - 40) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDAF06C8(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v1, v2, v3, v4);
  uint64_t v6 = sub_1DDB10E40(0);
  objc_msgSend_addObject_(v5, v7, (uint64_t)v6, v8, v9);

  long long v10 = sub_1DDB10E40(1);
  objc_msgSend_addObject_(v5, v11, (uint64_t)v10, v12, v13);

  uint64_t v14 = sub_1DDB10E40(2);
  objc_msgSend_addObject_(v5, v15, (uint64_t)v14, v16, v17);

  return v5;
}

void sub_1DDAF07D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void *sub_1DDAF0810@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 7)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1))
    {
      return sub_1DDAF56B0(a2);
    }
    else
    {
      uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 2064);
      return (void *)v5(a1);
    }
  }
  else
  {
    return (void *)sub_1DDACDB28(a1);
  }
}

BOOL sub_1DDAF0910(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 7) {
    return 0;
  }

  return sub_1DDA2E874(a1);
}

uint64_t sub_1DDAF0980@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  if ((int)result >= 7)
  {
    return sub_1DDA309E8(a1, a2);
  }
  uint64_t v5 = a1[3];
  if (!v5)
  {
    (*(void (**)(uint64_t *))(*a1 + 2896))(a1);
    if (!a1[3]) {
      goto LABEL_13;
    }
    __int16 v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 864))(a1);
    sub_1DDAA6ACC(a1[3], v6 - 5);
    uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 816))(a1);
    uint64_t v5 = a1[3];
    if (result == 1)
    {
      *(unsigned char *)(v5 + 184) = 1;
      goto LABEL_10;
    }
    if (!v5)
    {
LABEL_13:
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
LABEL_10:
  uint64_t v7 = a1[4];
  *a2 = v5;
  a2[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1DDAF0B1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAF0B30(uint64_t a1@<X0>, float64x2_t **a2@<X8>)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v16, a1);
    (*(void (**)(void))(*(void *)v16 + 368))();
    if (v17) {
      sub_1DDA18310(v17);
    }
    uint64_t v4 = a2[1];
    if (v4 == *a2)
    {
      if (v4) {
        operator delete(v4);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 808))(a1))
      {
        uint64_t v16 = 0x3FF0000000000000;
        sub_1DDA25B2C(a2, 3uLL, &v16);
        return;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 704))(&v16, a1);
      uint64_t v5 = (std::__shared_weak_count *)v16;
      if ((std::__shared_weak_count *)((char *)v17 - v16) == (std::__shared_weak_count *)24)
      {
        float64x2_t v14 = *(float64x2_t *)v16;
        double v6 = *(double *)(v16 + 16);
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        uint64_t v7 = (float64x2_t *)operator new(0x18uLL);
        float v8 = v6;
        a2[1] = (float64x2_t *)((char *)v7 + 24);
        a2[2] = (float64x2_t *)((char *)v7 + 24);
        __asm { FMOV            V3.2D, #1.0 }
        float64x2_t *v7 = vdivq_f64(_Q3, vcvtq_f64_f32(vcvt_f32_f64(v14)));
        v7[1].f64[0] = 1.0 / v8;
        *a2 = v7;
      }
      else
      {
        uint64_t v15 = 0x3FF0000000000000;
        sub_1DDA25B2C(a2, 3uLL, &v15);
        uint64_t v5 = (std::__shared_weak_count *)v16;
        if (!v16) {
          return;
        }
      }
      uint64_t v17 = v5;
      operator delete(v5);
    }
  }
  else
  {
    sub_1DDB09E8C(a1, a2);
  }
}

void sub_1DDAF0D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAF0D9C(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 7)
  {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
    uint64_t v4 = *(void *)a1;
    if (v3)
    {
      uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 984);
      uint64_t v6 = a1;
    }
    else
    {
      uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 992);
      uint64_t v6 = a1;
    }
    return v5(v6);
  }
  else
  {
    return sub_1DDACC848(a1);
  }
}

void sub_1DDAF0EAC(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 7)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1048))(a1) & 1) == 0)
    {
      (*(void (**)(uint64_t, double))(*(void *)a1 + 1608))(a1, -1.0);
      (*(void (**)(uint64_t))(*(void *)a1 + 1616))(a1);
      (*(void (**)(uint64_t))(*(void *)a1 + 2096))(a1);
      (*(double (**)(uint64_t))(*(void *)a1 + 2080))(a1);
    }
  }
  else
  {
    sub_1DDACECC4(a1);
  }
}

void sub_1DDAF1070(uint64_t a1, _DWORD *a2, _DWORD *a3, char *a4)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 7)
  {
    *a3 = 1065353216;
    *a2 = 1065353216;
    *a4 = 0;
  }
  else
  {
    sub_1DDB4A314(a1, a2, a3, a4);
  }
}

BOOL sub_1DDAF1110(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 7) {
    return 0;
  }

  return sub_1DDBD4AC4(a1);
}

void sub_1DDAF1180(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 7)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2264))(a1))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v6, a1);
      uint64_t v5 = 0;
      sub_1DDB16060(v6, (double *)&v5, v2, v3, v4);
      if (v7) {
        sub_1DDA18310(v7);
      }
    }
  }
  else
  {
    sub_1DDB482EC(a1);
  }
}

void sub_1DDAF12AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF12C4(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 7)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1552))(a1);
    double v7 = (*(double (**)(uint64_t))(*(void *)a1 + 1504))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2264))(a1))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 2864))(&v5, a1);
      double v7 = sub_1DDB1604C(v5, &v7, v2, v3, v4);
      if (v6) {
        sub_1DDA18310(v6);
      }
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1048))(a1) & 1) == 0) {
      (*(void (**)(uint64_t))(*(void *)a1 + 2088))(a1);
    }
  }
  else
  {
    sub_1DDBD471C(a1);
  }
}

void sub_1DDAF14E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAF14FC(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) < 7)
  {
    double v3 = -1.0;
    if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 1064))(a1)) {
      return v3;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1056))(a1))
    {
      sub_1DDACD7D4(a1, (double **)&__p);
      double v3 = fmax(*(double *)__p, fmax(*((double *)__p + 1), fmax(*((double *)__p + 2), *((double *)__p + 3))));
      long long v10 = (std::__shared_weak_count *)__p;
      operator delete(__p);
      return v3;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1120))(&__p, a1);
    if (!__p) {
      goto LABEL_16;
    }
    uint64_t v4 = __dynamic_cast(__p, (const struct __class_type_info *)&unk_1F3971348, (const struct __class_type_info *)&unk_1F39712B0, 0);
    if (v4)
    {
      uint64_t v5 = v10;
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        v4[32] = 0;
        sub_1DDA18310(v5);
        if (!__p) {
          goto LABEL_16;
        }
      }
      else
      {
        v4[32] = 0;
      }
    }
    if (!sub_1DDAB6F70((uint64_t)&unk_1F3968258, (uint64_t)&unk_1F3968258))
    {
      uint64_t v6 = (double (***)(void *, unint64_t))__p;
      unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
      (*(void (**)(uint64_t))(*(void *)a1 + 264))(a1);
      double v3 = (**v6)(v6, llround((double)v7));
      if (v3 >= 0.0)
      {
        int v8 = 0;
        goto LABEL_17;
      }
    }
LABEL_16:
    int v8 = 1;
LABEL_17:
    if (v10) {
      sub_1DDA18310(v10);
    }
    if (v8) {
      return (*(double (**)(uint64_t))(*(void *)a1 + 2072))(a1);
    }
    return v3;
  }

  return sub_1DDACDEF8(a1);
}

void sub_1DDAF17E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF17FC(uint64_t a1)
{
  sub_1DDA2AD98(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAF1834(uint64_t a1)
{
  int v1 = NSNumber;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

  return objc_msgSend_numberWithDouble_(v1, v2, v3, v4, v5);
}

uint64_t (**sub_1DDAF187C(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, MEMORY[0x1E4FBA388], &unk_1DDBFCD30);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *sub_1DDAF18C8(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = (void *)MEMORY[0x1E4FBA388];
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      a3[1] = a2[1];
      *a3 = sub_1DDAF18C8;
      break;
    case 2:
      uint64_t result = 0;
      a3[1] = a2[1];
      *a3 = sub_1DDAF18C8;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = sub_1DDAB6F70(a4, MEMORY[0x1E4FBA388]);
      }
      else {
        BOOL v8 = a5 == &unk_1DDBFCD30;
      }
      if (v8) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void sub_1DDAF19A8(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  long long v10 = operator new(0xD8uLL);
  sub_1DDAF1A3C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAF1A28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAF1A3C(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3970468;
  sub_1DDAA58A8((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1F3967DD0;
  return a1;
}

void sub_1DDAF1AA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAF1AB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3970468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAF1AD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3970468;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAF1B2C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAF1B54(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  long long v10 = operator new(0xD8uLL);
  sub_1DDAF1BE8((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAF1BD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAF1BE8(uint64_t a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F39704B8;
  sub_1DDAA58A8(a1 + 24, a2, *a3, a4, a5);
  *(void *)(a1 + 24) = &unk_1F3967FB0;
  *(unsigned char *)(a1 + 210) = 0;
  return a1;
}

void sub_1DDAF1C54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAF1C68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39704B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAF1C88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39704B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAF1CDC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAF1D7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAF1EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAF1F70(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_1DDA1B448(&v4, (void *)(a1 + 8));
  sub_1DDB56F1C(&v4, a2);
  if (!*a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDAF2008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF2044(void *a1)
{
  sub_1DDA30DE8((uint64_t)a1);
  if (!a1[3])
  {
    (*(void (**)(void **__return_ptr, void *))(*a1 + 160))(&v15, a1);
    sub_1DDAF2294(&v15, (void **)&v17);
    if (v16) {
      sub_1DDA18310(v16);
    }
    if (v17)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v17 + 384))(&v15);
      uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
      uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 408))(a1);
      *(void *)&long long v10 = (*(uint64_t (**)(void *))(*a1 + 432))(a1);
      *((void *)&v10 + 1) = v2;
      sub_1DDAF2E08(&v15, (unint64_t *)&v14, &v11, &v10, &v12);
      uint64_t v3 = v12;
      unsigned int v4 = sub_1DDA7F11C(v17);
      sub_1DDAF3980(v3, v4);
      uint64_t v5 = v12;
      char v6 = (*(uint64_t (**)(void *))(*a1 + 2992))(a1);
      sub_1DDAF3990(v5, v6);
      uint64_t v8 = v12;
      unsigned int v7 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)a1[4];
      a1[3] = v8;
      a1[4] = v7;
      if (v9) {
        sub_1DDA18310(v9);
      }
      if (v13) {
        sub_1DDA18310(v13);
      }
      if (v16) {
        sub_1DDA18310(v16);
      }
    }
    if (v18) {
      sub_1DDA18310(v18);
    }
  }
}

void sub_1DDAF224C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1DDA18310(a17);
  }
  char v19 = *(std::__shared_weak_count **)(v17 - 32);
  if (v19) {
    sub_1DDA18310(v19);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDAF2294@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F3960128, 0)) != 0)
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t sub_1DDAF2318(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v6);
  uint64_t v1 = v6;
  sub_1DDA1A880(__p, "CIFF");
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v1 + 264))(v1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v2;
}

void sub_1DDAF23D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAF2400(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v6);
  uint64_t v1 = v6;
  sub_1DDA1A880(__p, "CIFF");
  double v2 = (*(double (**)(uint64_t, void **, uint64_t))(*(void *)v1 + 280))(v1, __p, 1);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v2;
}

void sub_1DDAF24C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAF24F4(uint64_t a1)
{
  uint64_t v8 = &unk_1F39665D8;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v6);
  uint64_t v1 = v6;
  sub_1DDA1A880(__p, "CIFF:CanonShotInfo");
  uint64_t v2 = sub_1DDA28220(v1, (uint64_t)__p, (uint64_t)&v8);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v2;
}

void sub_1DDAF25A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAF25D8(uint64_t a1)
{
  unsigned int v1 = sub_1DDAF24F4(a1);
  return (v1 < 0x11) & (0x18040u >> v1);
}

void sub_1DDAF2608(uint64_t a1@<X0>, double **a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v14);
  sub_1DDAF2294(&v14, (void **)&v16);
  if (v15) {
    sub_1DDA18310(v15);
  }
  if (v16)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1016))(&v14, a1);
    uint64_t v4 = v16[98];
    char v5 = (std::__shared_weak_count *)v16[99];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1DDA18218(__p, *(_DWORD *)(v4 + 52), *(_DWORD *)(v4 + 48));
    v13[0] = 0;
    v13[1] = __p[0];
    sub_1DDAA85E4(v4, (int *)v13, __p);
    uint64_t v6 = 0;
    unsigned int v7 = (char *)v14;
    uint64_t v8 = (char *)__p[0];
    double v9 = -(double)(*(_DWORD *)(v4 + 48) >> 2);
    do
    {
      *(double *)&v8[v6] = *(double *)&v8[v6] + v9 * *(double *)&v7[v6];
      v6 += 8;
    }
    while (v6 != 32);
    sub_1DDA24B78(a2, 3uLL);
    long long v10 = (double *)__p[0];
    uint64_t v11 = *a2;
    *uint64_t v11 = 1.0 / *(double *)__p[0];
    v11[1] = 2.0 / (v10[1] + v10[2]);
    void v11[2] = 1.0 / v10[3];
    __p[1] = v10;
    operator delete(v10);
    if (v5) {
      sub_1DDA18310(v5);
    }
    if (v14)
    {
      uint64_t v15 = (std::__shared_weak_count *)v14;
      operator delete(v14);
    }
  }
  else
  {
    uint64_t v14 = (void *)0x3FF0000000000000;
    sub_1DDA25B2C(a2, 3uLL, &v14);
  }
  if (v17) {
    sub_1DDA18310(v17);
  }
}

void sub_1DDAF27C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v17 = *(std::__shared_weak_count **)(v15 - 40);
  if (v17) {
    sub_1DDA18310(v17);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDAF2820(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  BOOL v4 = sub_1DDAC8A08(v2, @"add2WhenLessThan512", v3, &unk_1F39704F8);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDAF28CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAF28E4()
{
  return 1;
}

void sub_1DDAF28EC(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 2944))(v5);
  sub_1DDA1A880(__p, "CIFF:CanonShotInfo");
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)a1 + 2968))(a1, __p, v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 2960))(a1, v2);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_1DDAF29F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF2A2C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 2200))(v13);
  if ((v14 & 0x80u) == 0) {
    unint64_t v4 = v14;
  }
  else {
    unint64_t v4 = (unint64_t)v13[1];
  }
  if (v4 == 2)
  {
    if ((v14 & 0x80u) == 0) {
      unsigned int v7 = v13;
    }
    else {
      unsigned int v7 = (void **)v13[0];
    }
    if (memcmp(v7, "G6", 2uLL)) {
      goto LABEL_26;
    }
    int v12 = 0;
    uint64_t v11 = &unk_1F3971108;
    sub_1DDA1A880(__p, "CIFF:CanonColorInfo1");
    (*(void (**)(uint64_t, uint64_t, void **, void **))(*(void *)a1 + 2976))(a1, a2, __p, &v11);
  }
  else
  {
    if (v4 != 3) {
      goto LABEL_26;
    }
    if ((v14 & 0x80u) == 0) {
      char v5 = v13;
    }
    else {
      char v5 = (void **)v13[0];
    }
    if (*(_WORD *)v5 != 13892 || *((unsigned char *)v5 + 2) != 48)
    {
      if (!memcmp(v5, "D30", 3uLL))
      {
        int v12 = 0;
        uint64_t v11 = &unk_1F3964DA8;
        sub_1DDA1A880(__p, "CIFF:CanonColorInfo1");
        (*(void (**)(uint64_t, uint64_t, void **, void **))(*(void *)a1 + 2976))(a1, a2, __p, &v11);
        goto LABEL_21;
      }
LABEL_26:
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v12 = 0;
    uint64_t v11 = &unk_1F3968EA8;
    sub_1DDA1A880(__p, "CIFF:ColorBalance");
    (*(void (**)(uint64_t, uint64_t, void **, void **))(*(void *)a1 + 2976))(a1, a2, __p, &v11);
  }
LABEL_21:
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
}

void sub_1DDAF2CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAF2D2C(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  unsigned int v6 = a4;
  if (a4 == 3) {
    a4 = 4;
  }
  int v7 = sub_1DDAB76F0(a1, a2, a3, a4, a5);
  if (v6 == 3)
  {
    if (v7)
    {
      int v8 = *(_DWORD *)(*a5 + 8) ^ 0x410;
      unsigned int v9 = *(_DWORD *)(*a5 + 12) ^ 0x45F3;
      int32x2_t v15 = (int32x2_t)veor_s8(*(int8x8_t *)*a5, (int8x8_t)0x45F300000410);
      sub_1DDA1AD40(&v16, 3uLL);
      char v10 = (void *)*a5;
      long long v11 = v16;
      uint64_t v12 = v16;
      *(int32x2_t *)long long v16 = vrev64_s32(vmul_s32(vdup_n_s32(v9), v15));
      *(_DWORD *)(v12 + 8) = v8 * v15.i32[0];
      *(_OWORD *)a5 = v11;
      uint64_t v13 = a5[2];
      a5[2] = v17;
      *(void *)&long long v16 = v10;
      uint64_t v17 = v13;
      if (v10)
      {
        *((void *)&v16 + 1) = v10;
        operator delete(v10);
      }
    }
  }
  return 1;
}

void sub_1DDAF2E08(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  char v10 = operator new(0xE0uLL);
  sub_1DDAF2E9C((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAF2E88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAF2E9C(uint64_t a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3971150;
  sub_1DDAA58A8(a1 + 24, a2, *a3, a4, a5);
  *(void *)(a1 + 24) = &unk_1F39711A0;
  *(_DWORD *)(a1 + 212) = 0;
  *(_WORD *)(a1 + 216) = 257;
  return a1;
}

void sub_1DDAF2F10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAF2F24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3971150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAF2F44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3971150;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAF2F98(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAF2FC0(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  v103[64] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CCanonCompressedUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v99[0] = MEMORY[0x1E4F143A8];
  v99[1] = 3221225472;
  v99[2] = sub_1DDAF38F8;
  v99[3] = &unk_1E6D04A58;
  v99[4] = v1;
  unint64_t v4 = (void (**)(void))MEMORY[0x1E01C46E0](v99);
  uint64_t v5 = sub_1DDAA5B9C(v1);
  unint64_t v6 = *(unsigned int *)(v1 + 44);
  if ((v6 & 0x7FFFFFFC) >= 0x10004
    || (uint64_t v7 = v5,
        int v8 = *(_DWORD *)(v1 + 48),
        !sub_1DDAACF3C(&byte_1DDBFCE58[29 * *(unsigned int *)(v1 + 188)], (uint64_t)v102))
    || !sub_1DDAACF3C(&byte_1DDBFCEAF[180 * *(unsigned int *)(v1 + 188)], (uint64_t)v101))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = *(unsigned __int8 *)(v1 + 192);
  uint64_t v10 = *(void *)(v1 + 24);
  unsigned int v11 = v8 * v6;
  unsigned int v97 = ((v8 * v6 * v9) >> 2) + 540;
  sub_1DDA18410((int *)&v98, (int *)&v97);
  (*(void (**)(uint64_t, unsigned int *, void))(*(void *)v10 + 40))(v10, &v98, 0);
  unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 152))(v1);
  unsigned int v97 = 540;
  unsigned int v98 = v12;
  sub_1DDA4B6A4(&v98, (int *)&v97);
  unsigned int v97 = sub_1DDA456E8((unsigned int *)(v1 + 40));
  sub_1DDA47EF8(&v98, &v97);
  unsigned int v97 = (v8 * v6 * v9) >> 2;
  sub_1DDA4C118(&v98, &v97);
  int v94 = v9;
  uint64_t v13 = (unsigned __int8 *)(v7 + 2 * (v8 * v6) - v98 + 896);
  (*(void (**)(void, unsigned __int8 *))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), v13);
  unint64_t v93 = v6;
  int v95 = v8;
  if ((v8 * v6) >= 0x40)
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    unsigned int v17 = v13 + v98;
    uint64_t v18 = (int)v11;
    int v19 = 32;
    long long v20 = 0uLL;
    unsigned int v96 = v13 + v98;
    do
    {
      if ((int)(v17 - v13 + ((39 - v19) >> 3)) < 0
        || v17 - v13 + ((39 - v19) >> 3) > (unint64_t)(2 * v18))
      {
        uint64_t v91 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v91, "RawCameraException");
        __cxa_throw(v91, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      BOOL v21 = v18 <= 64;
      v18 -= 64;
      if (v21 && (int)(v17 - v13) >= 1 && ((v17 - v13) & 0xFFFFFE00) == 0)
      {
        size_t v22 = v17 - v13;
        uint64_t v23 = v13;
        int v24 = v15;
        memmove(v103, v23, v22);
        long long v20 = 0uLL;
        unsigned int v17 = v96;
        int v15 = v24;
        uint64_t v13 = (unsigned __int8 *)v103;
      }
      *(_OWORD *)(v7 + 96) = v20;
      *(_OWORD *)(v7 + 112) = v20;
      *(_OWORD *)(v7 + 64) = v20;
      *(_OWORD *)(v7 + 80) = v20;
      *(_OWORD *)(v7 + 32) = v20;
      *(_OWORD *)(v7 + 48) = v20;
      *(_OWORD *)uint64_t v7 = v20;
      *(_OWORD *)(v7 + 16) = v20;
      if (v19 >= 16)
      {
        int v25 = *v13;
        if (v25 == 255) {
          uint64_t v26 = 3;
        }
        else {
          uint64_t v26 = 2;
        }
        if (v25 == 255) {
          uint64_t v27 = 2;
        }
        else {
          uint64_t v27 = 1;
        }
        int v28 = v13[v27];
        uint64_t v29 = &v13[v26];
        int v30 = (v16 << 16) | (v25 << 8);
        if (v28 == 255) {
          uint64_t v13 = v29 + 1;
        }
        else {
          uint64_t v13 = v29;
        }
        int v16 = v30 | v28;
        v19 -= 16;
      }
      unsigned int v31 = v16 << v19;
      unsigned int v32 = (unsigned __int16)v102[(v16 << v19) >> 23];
      v19 += (v32 >> 10) & 0x1F;
      if (v32 > 0x8000)
      {
        unsigned int v40 = (char)v32;
      }
      else
      {
        if ((v32 & 0x8000) != 0)
        {
          unsigned int v32 = (unsigned __int16)v102[HIWORD(v31) & 0x3FF];
          v19 += (v32 >> 10) & 0x1F;
        }
        int v33 = v32 & 0xF;
        if (v33)
        {
          if (v19 >= 16)
          {
            int v34 = *v13;
            if (v34 == 255) {
              uint64_t v35 = 3;
            }
            else {
              uint64_t v35 = 2;
            }
            if (v34 == 255) {
              uint64_t v36 = 2;
            }
            else {
              uint64_t v36 = 1;
            }
            int v37 = v13[v36];
            uint64_t v38 = &v13[v35];
            int v39 = (v16 << 16) | (v34 << 8);
            if (v37 == 255) {
              uint64_t v13 = v38 + 1;
            }
            else {
              uint64_t v13 = v38;
            }
            int v16 = v39 | v37;
            v19 -= 16;
          }
          unsigned int v40 = ((v16 << v19) >> -(char)v33) - ((((v16 << v19) >> 31) - 1) >> -(char)v33);
          v19 += v33;
        }
        else
        {
          unsigned int v40 = 0;
        }
      }
      int v41 = 0;
      v15 += v40;
      LOWORD(v40) = v15;
      while (1)
      {
        if (v19 >= 16)
        {
          int v42 = *v13;
          if (v42 == 255) {
            uint64_t v43 = 3;
          }
          else {
            uint64_t v43 = 2;
          }
          if (v42 == 255) {
            uint64_t v44 = 2;
          }
          else {
            uint64_t v44 = 1;
          }
          int v45 = v13[v44];
          uint64_t v46 = &v13[v43];
          int v47 = (v16 << 16) | (v42 << 8);
          if (v45 == 255) {
            uint64_t v13 = v46 + 1;
          }
          else {
            uint64_t v13 = v46;
          }
          int v16 = v47 | v45;
          v19 -= 16;
        }
        if (v41 > 62) {
          break;
        }
        unsigned int v48 = (unsigned __int16)v101[(v16 << v19) >> 23];
        unsigned int v49 = (unsigned __int16)v101[((v16 << v19) >> 16) & 0x3FF];
        *(_WORD *)(v7 + 2 * v41) = v40;
        v19 += (v48 >> 10) & 0x1F;
        if (v48 > 0x8000)
        {
          int v52 = (v48 >> 8) & 3;
          LOWORD(v40) = (char)v48;
        }
        else
        {
          int v50 = (v49 >> 10) & 0x1F;
          if (v48 != 0x8000) {
            int v50 = 0;
          }
          v19 += v50;
          if (v48 == 0x8000) {
            unsigned int v51 = v49;
          }
          else {
            unsigned int v51 = v48;
          }
          int v52 = (v51 >> 4) & 0x3F;
          int v53 = v51 & 0xF;
          if ((v51 & 0xF) != 0)
          {
            if (v19 >= 16)
            {
              int v54 = *v13;
              if (v54 == 255) {
                uint64_t v55 = 3;
              }
              else {
                uint64_t v55 = 2;
              }
              if (v54 == 255) {
                uint64_t v56 = 2;
              }
              else {
                uint64_t v56 = 1;
              }
              int v57 = v13[v56];
              uint64_t v58 = &v13[v55];
              int v59 = (v16 << 16) | (v54 << 8);
              if (v57 == 255) {
                uint64_t v13 = v58 + 1;
              }
              else {
                uint64_t v13 = v58;
              }
              int v16 = v59 | v57;
              v19 -= 16;
            }
            unsigned int v40 = ((v16 << v19) >> -(char)v53) - ((((v16 << v19) >> 31) - 1) >> -(char)v53);
            v19 += v53;
          }
          else
          {
            LOWORD(v40) = 0;
          }
        }
        v41 += 1 + v52;
      }
      if (v41 == 63) {
        *(_WORD *)(v7 + 126) = v40;
      }
      v7 += 128;
      ++v14;
    }
    while (v14 != v11 >> 6);
  }
  unsigned int v60 = (int16x4_t *)sub_1DDAA5B9C(v1);
  if (v94)
  {
    (*(void (**)(void, uint64_t, void))(**(void **)(v1 + 24) + 40))(*(void *)(v1 + 24), v1 + 40, 0);
    if (v95)
    {
      for (int i = 0; i != v95; ++i)
      {
        (*(void (**)(void, uint8_t *, unint64_t))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), buf, v93 >> 2);
        v63.i64[0] = 0x200000002;
        v63.i64[1] = 0x200000002;
        v64.i64[0] = 0x300000003;
        v64.i64[1] = 0x300000003;
        v65.i64[0] = 0x200000002000000;
        v65.i64[1] = 0x200000002000000;
        if (*(unsigned char *)(v1 + 193))
        {
          if (v93)
          {
            double v66 = buf;
            int v67 = 512;
            uint64_t v68 = ((v93 - 1) >> 2) + 1;
            int v69 = 512;
            do
            {
              unsigned int v70 = *v66++;
              int v71 = v69 + v60->u16[0];
              int v72 = v67 + v60->u16[1];
              int v73 = (4 * v72) | (v70 >> 2) & 3;
              int v69 = v71 + v60->u16[2];
              int v67 = v72 + v60->u16[3];
              v60->i16[0] = v70 & 3 | (4 * v71);
              v60->i16[1] = v73;
              v60->i16[2] = (4 * v69) | (v70 >> 4) & 3;
              v60->i16[3] = (v70 >> 6) | (4 * v67);
              ++v60;
              --v68;
            }
            while (v68);
          }
        }
        else if (v93)
        {
          int32x2_t v74 = (int32x2_t)0x20000000200;
          uint64_t v75 = buf;
          uint64_t v76 = ((v93 - 1) >> 2) + 1;
          do
          {
            unsigned int v77 = *v75++;
            v78.i32[0] = v60->u16[0];
            v78.i32[1] = v60->u16[1];
            v79.i32[0] = v60->u16[2];
            v79.i32[1] = v60->u16[3];
            *(int32x2_t *)v80.i8 = vadd_s32(v74, v78);
            int32x2_t v74 = vadd_s32(*(int32x2_t *)v80.i8, v79);
            v80.u64[1] = (unint64_t)v74;
            v62.i32[0] = v77;
            v62.i32[1] = v77 >> 2;
            v62.i32[2] = v77 >> 4;
            int8x16_t v81 = vandq_s8(v62, v64);
            v81.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v77), 6uLL).i32[3];
            int32x4_t v82 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v80, 2uLL), v81);
            int8x16_t v62 = (int8x16_t)vaddq_s32(v82, v63);
            *v60++ = vmovn_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v65, vshlq_n_s32(v82, 0x10uLL)), v62, (int8x16_t)v82));
            --v76;
          }
          while (v76);
        }
      }
    }
  }
  else if (v95)
  {
    for (int j = 0; j != v95; ++j)
    {
      if (v93)
      {
        unsigned int v84 = 0;
        int v85 = 512;
        int v86 = 512;
        do
        {
          int v87 = v60->u16[2];
          int v88 = v60->u16[3];
          int v89 = v86 + v60->u16[0];
          int v90 = v85 + v60->u16[1];
          int v86 = v89 + v87;
          int v85 = v90 + v88;
          v60->i16[0] = v89;
          v60->i16[1] = v90;
          v60->i16[2] = v89 + v87;
          v60->i16[3] = v90 + v88;
          ++v60;
          v84 += 4;
        }
        while (v84 < v93);
      }
    }
  }
  v4[2](v4);
}

void sub_1DDAF3860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAF38F8(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CCanonCompressedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDAF3980(uint64_t result, unsigned int a2)
{
  if (a2 <= 2) {
    *(_DWORD *)(result + 188) = a2;
  }
  return result;
}

uint64_t sub_1DDAF3990(uint64_t result, char a2)
{
  *(unsigned char *)(result + 193) = a2;
  return result;
}

void sub_1DDAF3998(void *a1)
{
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAF39D0@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return sub_1DDAF3D68(a1, a2, a3);
}

double sub_1DDAF39FC(uint64_t a1, unsigned int a2, double a3)
{
  if (*(unsigned char *)(a1 + 32)) {
    return sub_1DDAF3A0C(a1, a2, a3);
  }
  else {
    return sub_1DDAF3BAC(a1, a2, a3);
  }
}

double sub_1DDAF3A0C(uint64_t a1, unsigned int a2, double a3)
{
  double v3 = fmin(a3, 30.0);
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = *(_DWORD *)v4;
  if (!*(_DWORD *)v4)
  {
    double v7 = -1.0;
LABEL_17:
    double v16 = v7;
    goto LABEL_25;
  }
  unsigned int v6 = 0;
  double v7 = -1.0;
  while (1)
  {
    uint64_t v8 = 0;
    double v9 = v7;
    unsigned int v10 = v6;
    unsigned int v6 = v5;
    double v11 = *(double *)(v4 + 8);
    uint64_t v12 = v4 + 24;
    if (v11 <= v3) {
      uint64_t v13 = 64;
    }
    else {
      uint64_t v13 = 16;
    }
    if (v11 <= v3) {
      uint64_t v12 = v4 + 72;
    }
    double v7 = 0.0;
    double v14 = 1.0;
    do
    {
      double v7 = v7 + v14 * *(double *)(v12 + v8);
      double v14 = v3 * *(double *)(v4 + v13) * v14;
      v8 += 8;
    }
    while (v8 != 40);
    if (v7 < 0.0) {
      double v7 = 0.0;
    }
    if (v6 == a2) {
      break;
    }
    if (v6 > a2)
    {
      if (v9 >= 0.0)
      {
        if (v6 - v10 <= 1
          || ((double v17 = ((double)a2 - (double)v10) * (v7 - v9) / (double)(v6 - v10),
               double v18 = fmin(v7, v9),
               double v19 = fmax(v7, v9),
               double v20 = v9 + v17,
               v18 <= v20)
            ? (BOOL v21 = v20 > v19)
            : (BOOL v21 = 1),
              double v7 = v20,
              v21))
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      break;
    }
    unsigned int v15 = *(_DWORD *)(v4 + 112);
    v4 += 112;
    unsigned int v5 = v15;
    if (!v15) {
      goto LABEL_17;
    }
  }
  double v16 = v7;
  BOOL v22 = v7 < 0.0;
  double v7 = v9;
  if (v22) {
    goto LABEL_17;
  }
LABEL_25:
  if (v3 < a3) {
    return a3 / v3 * v16;
  }
  return v16;
}

void sub_1DDAF3B94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDAF3BAC(uint64_t a1, int a2, double a3)
{
  double v3 = fmin(a3, 30.0);
  uint64_t v4 = *(_DWORD **)(a1 + 24);
  int v5 = *v4;
  double v6 = -1.0;
  if (*v4)
  {
    double v7 = (double *)(v4 + 16);
    while (v5 != a2)
    {
      int v5 = *((_DWORD *)v7 + 12);
      v7 += 14;
      if (!v5) {
        goto LABEL_13;
      }
    }
    uint64_t v8 = 0;
    double v9 = v7 - 6;
    if (*(v7 - 7) > v3)
    {
      unsigned int v10 = v7 - 5;
    }
    else
    {
      double v9 = v7;
      unsigned int v10 = v7 + 1;
    }
    double v6 = 0.0;
    double v11 = 1.0;
    do
    {
      double v6 = v6 + v11 * v10[v8];
      double v11 = v3 * *v9 * v11;
      ++v8;
    }
    while (v8 != 5);
    if (v6 < 0.0) {
      double v6 = 0.0;
    }
  }
LABEL_13:
  if (v3 < a3) {
    return a3 / v3 * v6;
  }
  return v6;
}

void *sub_1DDAF3C50@<X0>(double (***a1)(void)@<X0>, void *a2@<X8>)
{
  double v4 = (**a1)(a1);
  return sub_1DDA25B2C(a2, 4uLL, &v4);
}

void *sub_1DDAF3CB0(void *a1)
{
  *a1 = &unk_1F3971328;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1DDA18310(v2);
  }
  return a1;
}

void sub_1DDAF3CFC(void *a1)
{
  *a1 = &unk_1F3971328;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1DDA18310(v1);
  }

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAF3D68@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  double v6 = (char *)operator new(0x40uLL);
  uint64_t result = sub_1DDAF3DCC((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_1DDAF3DB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAF3DCC(uint64_t result, void *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1F39712D8;
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  *(void *)(result + 24) = &unk_1F3971328;
  *(void *)(result + 32) = v4;
  *(void *)(result + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 24) = &unk_1F3971290;
  *(void *)(result + 48) = *a2;
  *(unsigned char *)(result + 56) = 1;
  return result;
}

void sub_1DDAF3E54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39712D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAF3E74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39712D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAF3EC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1DDAF41C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1DDAF4FB0(_Unwind_Exception *a1)
{
}

void sub_1DDAF4FBC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1DDAF4FD8(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83E7C();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWSimpleLensCorrectionFilter", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDAF5060(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, const char *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v11 = (a4 - a1) * ((a4 - a1) * (a4 - a1));
  return objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E4F1E080], a8, a9, a10, a11, ((a5 - a2) * -2.0 + (a3 + a6) * (a4 - a1)) / v11, ((a3 - a6) * a1 * a4 + (a3 + a6 + a6) * a1 * a1 + -((a3 + a3 + a6) * a4) * a4 + (a1 + a4) * 3.0 * (a5 - a2))/ v11, (-(a1 * a6 * a1) * a1+ (a6 + a6 + a3) * a1 * a4 * a4+ -((a3 + a6 + a3) * a1) * a1 * a4+ a3 * a4 * a4 * a4+ a1 * -6.0 * a4 * (a5 - a2))/ v11, ((a4 - a1) * (-((a1 * a6 + a3 * a4) * a1) * a4)+ a1 * 3.0 * a4 * (a1 * a5 - a4 * a2)+ -(a1 * a1) * a1 * a5+ a4 * a4 * a4 * a2)/ v11);
}

float sub_1DDAF5168(void **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  objc_msgSend_W(a1[4], a2, a3, a4, a5);
  float v9 = v8;
  double v10 = (float)((float)(a6 * a6) * a6);
  objc_msgSend_X(a1[5], v11, v12, v13, v14);
  double v16 = v15;
  double v17 = (float)(a6 * a6);
  objc_msgSend_Y(a1[5], v18, v19, v20, v21);
  double v23 = v22 * v17 + v10 * v16;
  double v24 = a6;
  objc_msgSend_Z(a1[5], v25, v26, v27, v28);
  double v30 = v23 + a6 * v29;
  objc_msgSend_W(a1[5], v31, v32, v33, v34);
  double v127 = v30 + v35;
  objc_msgSend_X(a1[6], v36, v37, v38, v39);
  double v41 = v40;
  objc_msgSend_Y(a1[6], v42, v43, v44, v45);
  double v47 = v46 * v17 + v10 * v41;
  objc_msgSend_Z(a1[6], v48, v49, v50, v51);
  double v53 = v47 + a6 * v52;
  objc_msgSend_W(a1[6], v54, v55, v56, v57);
  double v59 = v53 + v58;
  objc_msgSend_X(a1[7], v60, v61, v62, v63);
  double v65 = v64;
  objc_msgSend_Y(a1[7], v66, v67, v68, v69);
  double v71 = v70 * v17 + v10 * v65;
  objc_msgSend_Z(a1[7], v72, v73, v74, v75);
  double v77 = v71 + a6 * v76;
  objc_msgSend_W(a1[7], v78, v79, v80, v81);
  double v83 = v77 + v82;
  objc_msgSend_X(a1[8], v84, v85, v86, v87);
  double v89 = v88;
  objc_msgSend_Y(a1[8], v90, v91, v92, v93);
  double v95 = v94 * v17 + v10 * v89;
  objc_msgSend_Z(a1[8], v96, v97, v98, v99);
  double v101 = v95 + a6 * v100;
  objc_msgSend_W(a1[8], v102, v103, v104, v105);
  double v107 = v101 + v106;
  objc_msgSend_Z(a1[9], v108, v109, v110, v111);
  if (a6 - v116 < 0.0) {
    double v107 = v83;
  }
  objc_msgSend_Y(a1[9], v112, v113, v114, v115);
  if (v24 - v121 < 0.0) {
    double v107 = v59;
  }
  objc_msgSend_X(a1[9], v117, v118, v119, v120);
  BOOL v123 = v24 - v122 < 0.0;
  double v124 = v127;
  if (!v123) {
    double v124 = v107;
  }
  float v125 = v124;
  return (float)(v9 * v125) + (float)(a6 * (float)(1.0 - v9));
}

double sub_1DDAF52FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  objc_msgSend_X(*(void **)(a1 + 32), a2, a3, a4, a5);
  double v11 = a6 - v10;
  objc_msgSend_Y(*(void **)(a1 + 32), v12, v13, v14, v15);
  double v17 = hypot(v11, a7 - v16);
  objc_msgSend_Z(*(void **)(a1 + 32), v18, v19, v20, v21);
  float v23 = v17 * v22;
  (*(void (**)(float))(*(void *)(a1 + 40) + 16))(v23);
  double v29 = 1.0;
  if (v23 >= 0.001) {
    double v29 = (float)(v28 / v23);
  }
  double v30 = v11 * v29;
  objc_msgSend_X(*(void **)(a1 + 32), v24, v25, v26, v27);
  double v32 = v30 + v31;
  objc_msgSend_Y(*(void **)(a1 + 32), v33, v34, v35, v36);
  return v32;
}

double sub_1DDAF53C4(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  if (a2 > 0) {
    return a3;
  }
  double v6 = *MEMORY[0x1E4F1DB20];
  CGFloat v8 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat v10 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat v9 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  float v11 = 0.0;
  double v12 = 0.0;
  do
  {
    float r1_12 = v11;
    v43.origin.CGFloat x = (*(double (**)(double, double))(*(void *)(a1 + 32) + 16))(a3 + a5 * v12, a4);
    v43.origin.CGFloat y = v13;
    v43.size.CGFloat width = 0.0;
    v43.size.CGFloat height = 0.0;
    v35.origin.CGFloat x = v6;
    v35.origin.CGFloat y = v8;
    v35.size.CGFloat width = v10;
    v35.size.CGFloat height = v9;
    CGRect v36 = CGRectUnion(v35, v43);
    CGFloat x = v36.origin.x;
    CGFloat y = v36.origin.y;
    CGFloat width = v36.size.width;
    CGFloat height = v36.size.height;
    v44.origin.CGFloat x = (*(double (**)(double, double))(*(void *)(a1 + 32) + 16))(a3 + a5 * (1.0 - v12), a4 + a6);
    v44.origin.CGFloat y = v18;
    v44.size.CGFloat width = 0.0;
    v44.size.CGFloat height = 0.0;
    v37.origin.CGFloat x = x;
    v37.origin.CGFloat y = y;
    v37.size.CGFloat width = width;
    v37.size.CGFloat height = height;
    CGRect v38 = CGRectUnion(v37, v44);
    CGFloat r1 = v38.origin.x;
    CGFloat v19 = v38.origin.y;
    CGFloat v20 = v38.size.width;
    CGFloat v21 = v38.size.height;
    v45.origin.CGFloat x = (*(double (**)(double, double))(*(void *)(a1 + 32) + 16))(a3, a4 + a6 * (1.0 - v12));
    v45.origin.CGFloat y = v22;
    v45.size.CGFloat width = 0.0;
    v45.size.CGFloat height = 0.0;
    v39.origin.CGFloat x = r1;
    v39.origin.CGFloat y = v19;
    v39.size.CGFloat width = v20;
    v39.size.CGFloat height = v21;
    CGRect v40 = CGRectUnion(v39, v45);
    CGFloat v23 = v40.origin.x;
    CGFloat v24 = v40.origin.y;
    CGFloat v25 = v40.size.width;
    CGFloat v26 = v40.size.height;
    v46.origin.CGFloat x = (*(double (**)(double, double))(*(void *)(a1 + 32) + 16))(a3 + a5, a4 + a6 * v12);
    v46.origin.CGFloat y = v27;
    v46.size.CGFloat width = 0.0;
    v46.size.CGFloat height = 0.0;
    v41.origin.CGFloat x = v23;
    v41.origin.CGFloat y = v24;
    v41.size.CGFloat width = v25;
    v41.size.CGFloat height = v26;
    CGRect v42 = CGRectUnion(v41, v46);
    double v6 = v42.origin.x;
    CGFloat v8 = v42.origin.y;
    CGFloat v10 = v42.size.width;
    CGFloat v9 = v42.size.height;
    float v11 = r1_12 + 0.125;
    double v12 = (float)(r1_12 + 0.125);
  }
  while (v12 < 0.99999);
  return v6;
}

void *sub_1DDAF56B0@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = &unk_1F3971368;
  result[4] = 0;
  result[5] = 0;
  result[3] = &unk_1F3971328;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void sub_1DDAF5720()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDAF5768(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAF577C()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDAF57C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAF57D8(void *a1)
{
  *a1 = &unk_1F3971328;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1DDA18310(v2);
  }
  return a1;
}

void sub_1DDAF5824(void *a1)
{
  *a1 = &unk_1F3971328;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1DDA18310(v1);
  }

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDAF5890(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3971368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAF58B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3971368;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAF5904(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1DDAF592C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  os_signpost_id_t v4 = *(std::__shared_weak_count **)(a1 + 232);
  *(void *)(a1 + 224) = v3;
  *(void *)(a1 + 232) = v2;
  if (v4) {
    sub_1DDA18310(v4);
  }
}

void sub_1DDAF5958(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CHasselbladUnpacker", (const char *)&unk_1DDC3ACB6, (uint8_t *)buf, 2u);
  }

  v66[0] = MEMORY[0x1E4F143A8];
  v66[1] = 3221225472;
  v66[2] = sub_1DDAF6350;
  v66[3] = &unk_1E6D04A58;
  v66[4] = v1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v66);
  int v5 = (char *)sub_1DDAA5B9C(v1);
  int v6 = *(_DWORD *)(v1 + 44);
  int v7 = *(_DWORD *)(v1 + 48);
  LODWORD(v67) = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 152))(v1);
  sub_1DDA18410(buf, (int *)&v67);
  uint64_t v8 = buf[0];
  CGFloat v9 = &v5[2 * v7 * v6 - buf[0] + 896];
  if (v9 < v5) {
    operator new[]();
  }
  (*(void (**)(void, char *, void))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), v9, buf[0]);
  if (bswap32(*(unsigned __int16 *)v9) >> 16 != 65496)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  DWORD2(v65) = v7 * v6;
  size_t v64 = v1;
  *(void *)&long long v65 = 0;
  uint64_t v63 = (void (**)(void))v4;
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  double v12 = (unsigned __int16 *)&v9[v8];
  CGFloat v13 = (unsigned __int16 *)(v9 + 2);
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  do
  {
    unsigned int v14 = __rev16(*v13);
    if (v14 == 0xFFFF)
    {
      CGFloat v13 = (unsigned __int16 *)((char *)v13 + 1);
      continue;
    }
    if (v14 < 0xFF01) {
      goto LABEL_110;
    }
    uint64_t v15 = __rev16(v13[1]);
    if (v15 >= 0x102) {
      goto LABEL_110;
    }
    double v16 = v12;
    double v17 = (unsigned __int8 *)(v13 + 2);
    unint64_t v18 = (unint64_t)v13 + v15 + 2;
    if (v14 == 65475)
    {
      uint64_t v10 = __rev16(*(unsigned __int16 *)((char *)v13 + 5));
      unsigned int v11 = __rev16(*(unsigned __int16 *)((char *)v13 + 7)) * *((unsigned __int8 *)v13 + 9);
      CGFloat v13 = (unsigned __int16 *)((char *)v13 + v15 + 2);
LABEL_23:
      double v12 = v16;
      continue;
    }
    uint64_t v19 = v10;
    if (v14 != 65498)
    {
      if (v14 == 65476)
      {
        while ((unint64_t)v17 < v18)
        {
          unint64_t v20 = *v17;
          if (v20 > 1) {
            break;
          }
          CGFloat v21 = (uint8_t *)&buf[512 * v20];
          *(&v67 + v20) = (uint64_t)v21;
          double v17 = (unsigned __int8 *)sub_1DDAACF3C(v17 + 1, (uint64_t)v21);
          if (!v17)
          {
            uint64_t v57 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v57, "RawCameraException");
            __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
      }
      CGFloat v13 = (unsigned __int16 *)v18;
      uint64_t v10 = v19;
      goto LABEL_23;
    }
    if (*v17 - 1 > 2 || (uint64_t v22 = 2 * *v17, v15 != v22 + 6))
    {
      unsigned int v60 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v60, "RawCameraException");
      __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v23 = v17[v22 | 1];
    CGFloat v13 = (unsigned __int16 *)v18;
    double v12 = v16;
    if (v23 != 8)
    {
      sub_1DDAA9A60(v64);
      goto LABEL_108;
    }
  }
  while (v14 != 65498);
  if (v11 * v10 > DWORD2(v65))
  {
LABEL_110:
    double v59 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v59, "RawCameraException");
    __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v68) {
    uint64_t v24 = v68;
  }
  else {
    uint64_t v24 = v67;
  }
  if (v67) {
    uint64_t v25 = v67;
  }
  else {
    uint64_t v25 = v68;
  }
  if (!v25 || !v24)
  {
    uint64_t v62 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v62, "RawCameraException");
    __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v10)
  {
    uint64_t v26 = 0;
    int v27 = 0;
    *((void *)&v65 + 1) = 0;
    int v28 = 0;
    int v29 = 32;
    while (1)
    {
      unint64_t v30 = (char *)v12 - (char *)v13 + ((39 - v29) >> 3);
      if (8 * v30 < 2 * (unint64_t)((v10 - v26) * v11))
      {
        double v58 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v58, "RawCameraException");
        __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v65 != 0 || (char *)v13 - v5 >= (unint64_t)v11 && v30 >= 8 * v11)
      {
        if (v11) {
          break;
        }
        goto LABEL_100;
      }
      if (v12 != v13) {
        operator new[]();
      }
      CGFloat v13 = v12;
      if (v11) {
        break;
      }
LABEL_100:
      if (++v26 == v10) {
        goto LABEL_108;
      }
    }
    unsigned int v31 = 0;
    int v32 = 0x8000;
    int v33 = 0x8000;
    while (2)
    {
      if (v29 >= 16)
      {
        if ((v27 & 3) != 0) {
          uint64_t v34 = -1;
        }
        else {
          uint64_t v34 = 3;
        }
        int v35 = (v28 << 16) | (*((unsigned __int8 *)v13 + v34) << 8);
        if ((v27 & 3) != 0) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = 1;
        }
        int v28 = v35 | LOBYTE(v13[v36]);
        v27 += 2;
        ++v13;
        v29 -= 16;
      }
      unsigned int v37 = *(unsigned __int16 *)(v25 + 2 * ((v28 << v29) >> 23));
      int v38 = (v37 >> 10) & 0x1F;
      if (v37 > 0x8000)
      {
        int v41 = (char)v37;
        if ((v37 & 0x80u) == 0) {
          LOBYTE(v42) = *(_WORD *)(v25 + 2 * ((v28 << v29) >> 23));
        }
        else {
          int v42 = -(char)v37;
        }
        int v40 = dword_1DDBFD1AC[v42 & 0x7F];
        int v39 = v38 + v29 - v40;
      }
      else
      {
        int v39 = v38 + v29;
        if ((v37 & 0x8000) != 0)
        {
          unsigned int v37 = *(unsigned __int16 *)(v25 + 2 * (((v28 << v29) >> 16) & 0x3FF));
          v39 += (v37 >> 10) & 0x1F;
        }
        int v40 = v37 & 0x1F;
        int v41 = (v37 << 8) & 0x8000;
      }
      int v43 = v39 - 16;
      if (v39 >= 16)
      {
        if ((v27 & 3) != 0) {
          uint64_t v44 = -1;
        }
        else {
          uint64_t v44 = 3;
        }
        int v45 = (v28 << 16) | (*((unsigned __int8 *)v13 + v44) << 8);
        if ((v27 & 3) != 0) {
          uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v46 = 1;
        }
        int v28 = v45 | LOBYTE(v13[v46]);
        v27 += 2;
        ++v13;
        int v39 = v43;
      }
      unsigned int v47 = *(unsigned __int16 *)(v24 + 2 * ((v28 << v39) >> 23));
      int v48 = (v47 >> 10) & 0x1F;
      if (v47 > 0x8000)
      {
        unsigned int v47 = (char)v47;
        if ((v47 & 0x80u) == 0) {
          LOBYTE(v50) = *(_WORD *)(v24 + 2 * ((v28 << v39) >> 23));
        }
        else {
          int v50 = -v47;
        }
        int v49 = dword_1DDBFD1AC[v50 & 0x7F];
        int v29 = v48 + v39 - v49;
        if (!v40) {
          goto LABEL_86;
        }
      }
      else
      {
        int v29 = v48 + v39;
        if ((v47 & 0x8000) != 0)
        {
          unsigned int v47 = *(unsigned __int16 *)(v24 + 2 * (((v28 << v39) >> 16) & 0x3FF));
          v29 += (v47 >> 10) & 0x1F;
        }
        int v49 = v47 & 0x1F;
        unsigned int v47 = (v47 << 8) & 0x8000;
        if (!v40)
        {
LABEL_86:
          v33 += v41;
          *(_WORD *)int v5 = v33;
          if (v49)
          {
            if (v29 >= 16)
            {
              if ((v27 & 3) != 0) {
                uint64_t v54 = -1;
              }
              else {
                uint64_t v54 = 3;
              }
              int v55 = (v28 << 16) | (*((unsigned __int8 *)v13 + v54) << 8);
              if ((v27 & 3) != 0) {
                uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v56 = 1;
              }
              int v28 = v55 | LOBYTE(v13[v56]);
              v27 += 2;
              ++v13;
              v29 -= 16;
            }
            if (v49 <= 15) {
              unsigned int v47 = ((v28 << v29) >> -(char)v49)
            }
                  - ((((v28 << v29) >> 31) - 1) >> -(char)v49);
            else {
              unsigned int v47 = 0x8000;
            }
            v29 += v49;
          }
          v32 += v47;
          *((_WORD *)v5 + 1) = v32;
          v5 += 4;
          v31 += 2;
          if (v31 >= v11) {
            goto LABEL_100;
          }
          continue;
        }
      }
      break;
    }
    if (v29 >= 16)
    {
      if ((v27 & 3) != 0) {
        uint64_t v51 = -1;
      }
      else {
        uint64_t v51 = 3;
      }
      int v52 = (v28 << 16) | (*((unsigned __int8 *)v13 + v51) << 8);
      if ((v27 & 3) != 0) {
        uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v53 = 1;
      }
      int v28 = v52 | LOBYTE(v13[v53]);
      v27 += 2;
      ++v13;
      v29 -= 16;
    }
    int v41 = ((v28 << v29) >> -(char)v40) - ((((v28 << v29) >> 31) - 1) >> -(char)v40);
    if (v40 > 15) {
      int v41 = 0x8000;
    }
    v29 += v40;
    goto LABEL_86;
  }
LABEL_108:
  v63[2](v63);
}

void sub_1DDAF624C(_Unwind_Exception *a1)
{
  v1[2](v1);

  _Unwind_Resume(a1);
}

void sub_1DDAF6350(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CHasselbladUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDAF63DC(void *a1)
{
  sub_1DDAF6414(a1);

  JUMPOUT(0x1E01C3DC0);
}

void *sub_1DDAF6414(void *a1)
{
  *a1 = &unk_1F39713B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[29];
  if (v2) {
    sub_1DDA18310(v2);
  }
  *a1 = &unk_1F39627F0;
  uint64_t v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDAF649C(uint64_t a1)
{
  sub_1DDA30DE8(a1);
  if (!*(void *)(a1 + 24))
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v13, a1);
    sub_1DDAF67FC((void **)&v13, (void **)&v14);
    if (*((void *)&v13 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v13 + 1));
    }
    if (v14)
    {
      if (v14[1216])
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v9, a1);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 384))(&v11);
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
        *(void *)&long long v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
        *((void *)&v6 + 1) = v2;
        sub_1DDAF715C(&v11, (unint64_t *)&v8, &v7, &v6, &v13);
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v9, a1);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 384))(&v11);
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
        *(void *)&long long v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
        *((void *)&v6 + 1) = v3;
        sub_1DDAEC784(&v11, (unint64_t *)&v8, &v7, &v6, &v13);
      }
      long long v4 = v13;
      long long v13 = 0uLL;
      int v5 = *(std::__shared_weak_count **)(a1 + 32);
      *(_OWORD *)(a1 + 24) = v4;
      if (v5)
      {
        sub_1DDA18310(v5);
        if (*((void *)&v13 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v13 + 1));
        }
      }
      if (v12) {
        sub_1DDA18310(v12);
      }
      if (v10) {
        sub_1DDA18310(v10);
      }
    }
    if (v15) {
      sub_1DDA18310(v15);
    }
  }
}

void sub_1DDAF67A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  if (a14) {
    sub_1DDA18310(a14);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v16 - 32);
  if (v18) {
    sub_1DDA18310(v18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDAF67FC@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F3962098, 0)) != 0)
  {
    int v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  std::__shared_weak_count *v2 = 0;
  v2[1] = 0;
  return result;
}

void sub_1DDAF6880(uint64_t a1)
{
  long long v6 = &unk_1F39665D8;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "SourceInfo");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v1 + 600))(v1, __p, &v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDAF6960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAF6990(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v6);
  uint64_t v1 = v6;
  sub_1DDA1A880(__p, "SourceInfo");
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v1 + 264))(v1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v2;
}

void sub_1DDAF6A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAF6A78(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v6);
  uint64_t v1 = v6;
  sub_1DDA1A880(__p, "SourceInfo");
  double v2 = (*(double (**)(uint64_t, void **, uint64_t))(*(void *)v1 + 280))(v1, __p, 1);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v2;
}

void sub_1DDAF6B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF6B6C(void *a1@<X0>, void **a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*a1 + 160))(&v6);
  sub_1DDAF67FC(&v6, &v8);
  if (v7) {
    sub_1DDA18310(v7);
  }
  if (v8)
  {
    (*(void (**)(void *))(*(void *)v8 + 784))(v8);
    uint64_t v4 = *a2;
    if ((unsigned char *)a2[1] - (unsigned char *)*a2 == 32)
    {
      int v5 = 0;
      goto LABEL_9;
    }
    if (v4)
    {
      a2[1] = v4;
      operator delete(v4);
    }
  }
  int v5 = 1;
LABEL_9:
  if (v9) {
    sub_1DDA18310(v9);
  }
  if (v5) {
    sub_1DDACD448(a1, a2);
  }
}

void sub_1DDAF6C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF6C74(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v13 = 0;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v9);
  uint64_t v3 = v9;
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  if ((*(unsigned int (**)(uint64_t, void **, void **, void))(*(void *)v3 + 248))(v3, __p, v11, 0))
  {
    int v5 = v11[0];
    uint64_t v4 = v11[1];
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    int64_t v6 = v4 - v5;
    if (v10) {
      sub_1DDA18310(v10);
    }
    if (v6 == 32)
    {
      *(_OWORD *)a2 = *(_OWORD *)v11;
      a2[2] = v12;
      return;
    }
  }
  else
  {
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      sub_1DDA18310(v10);
    }
  }
  sub_1DDA25B2C(a2, 4uLL, &v13);
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
}

void sub_1DDAF6DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAF6DEC(uint64_t a1)
{
  unint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
  return dword_1DDBFD3D0[HIDWORD(v1) & 1 | (2 * (v1 & 1))];
}

uint64_t sub_1DDAF6E40(unsigned char *a1)
{
  uint64_t v2 = sub_1DDACE1A0(a1);
  if (v2)
  {
    (*(void (**)(unsigned char *))(*(void *)a1 + 2920))(a1);
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 160))(&v5, a1);
    sub_1DDAF67FC(&v5, (void **)&v7);
    if (v6) {
      sub_1DDA18310(v6);
    }
    uint64_t v3 = v7;
    if (v7)
    {
      (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 384))(&v5, a1);
      sub_1DDAA2C8C(v3, (unsigned __int16 **)&v5);
      if (v6) {
        sub_1DDA18310(v6);
      }
    }
    if (v8) {
      sub_1DDA18310(v8);
    }
  }
  return v2;
}

void sub_1DDAF6F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDAF6F80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"whiteLevelFromTag", v5, v6))
  {
    double v27 = 0.0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v25, a1);
    uint64_t v7 = v25;
    sub_1DDA1A880(__p, "IFD0:SUBIFD0");
    int v12 = (*(uint64_t (**)(uint64_t, void **, double *))(*(void *)v7 + 240))(v7, __p, &v27);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v26) {
      sub_1DDA18310(v26);
    }
    uint64_t v13 = NSNumber;
    if (v12)
    {
      objc_msgSend_numberWithDouble_(NSNumber, v8, v9, v10, v11, v27);
    }
    else
    {
      unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 864))(a1);
      double v16 = (*(double (**)(uint64_t))(*(void *)a1 + 848))(a1) * (double)v15;
      objc_msgSend_numberWithDouble_(v13, v17, v18, v19, v20, v16);
    uint64_t v14 = };
  }
  else
  {
    uint64_t v14 = sub_1DDBCE65C(a1, v3);
  }
  CGFloat v21 = (void *)v14;

  return v21;
}

void sub_1DDAF7118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1DDAF715C(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x108uLL);
  sub_1DDAF71F0((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAF71DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAF71F0(uint64_t a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3972068;
  sub_1DDAA58A8(a1 + 24, a2, *a3, a4, a5);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 240) = -1;
  *(void *)(a1 + 24) = &unk_1F39713B8;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  return a1;
}

void sub_1DDAF726C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAF7280(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3972068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAF72A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3972068;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAF72F4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAF731C(uint64_t a1)
{
  sub_1DDA30DE8(a1);
  if (!*(void *)(a1 + 24))
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v10, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v10 + 384))(&v11);
    if (*((void *)&v10 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v10 + 1));
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 592))(a1);
    if (v2 == 1)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
      *(void *)&long long v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
      *((void *)&v7 + 1) = v4;
      sub_1DDAF7844(&v11, (unint64_t *)&v9, &v8, &v7, &v10);
    }
    else
    {
      if (v2 != 7)
      {
LABEL_11:
        if (v12) {
          sub_1DDA18310(v12);
        }
        return;
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
      *(void *)&long long v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
      *((void *)&v7 + 1) = v3;
      sub_1DDAF77B0(&v11, (unint64_t *)&v9, &v8, &v7, &v10);
    }
    long long v5 = v10;
    long long v10 = 0uLL;
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v5;
    if (v6)
    {
      sub_1DDA18310(v6);
      if (*((void *)&v10 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v10 + 1));
      }
    }
    goto LABEL_11;
  }
}

void sub_1DDAF7578(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 32);
  if (v3) {
    sub_1DDA18310(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF75A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a14) {
    JUMPOUT(0x1DDAF759CLL);
  }
  JUMPOUT(0x1DDAF7598);
}

uint64_t sub_1DDAF75B4(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v6);
  uint64_t v1 = v6;
  sub_1DDA1A880(__p, "CameraObj_ISO_speed");
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v1 + 264))(v1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v2;
}

void sub_1DDAF766C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF769C(uint64_t a1)
{
  int v7 = 0;
  uint64_t v6 = &unk_1F3964DA8;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "NeutObj_neutrals");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v1 + 600))(v1, __p, &v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDAF7780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF77B0(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  long long v10 = operator new(0xD8uLL);
  sub_1DDA8F4A4((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAF7830(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAF7844(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  long long v10 = operator new(0xE0uLL);
  sub_1DDA5840C((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAF78C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1DDAF78D8(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 188) = a2;
  *(_DWORD *)(a1 + 192) = a3;
  int v7 = (char *)(a1 + 200);
  if (v7 != (char *)a4) {
    sub_1DDA17E28(v7, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  uint64_t result = (char *)(a1 + 224);
  if (a1 + 224 != a5)
  {
    uint64_t v9 = *(char **)a5;
    uint64_t v10 = *(void *)(a5 + 8);
    unint64_t v11 = (v10 - *(void *)a5) >> 2;
    return sub_1DDA17E28(result, v9, v10, v11);
  }
  return result;
}

void *sub_1DDAF7950(uint64_t a1, int a2, size_t size)
{
  int v9 = a2;
  uint64_t v4 = size;
  char v5 = malloc_type_malloc(size, 0x96D180F4uLL);
  uint64_t v6 = *(void *)(a1 + 24);
  sub_1DDA18410(&v8, &v9);
  (*(void (**)(uint64_t, int *, void))(*(void *)v6 + 40))(v6, &v8, 0);
  (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5, v4);
  return v5;
}

void sub_1DDAF7A18(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    free(v1);
  }
  __cxa_end_catch();
  JUMPOUT(0x1DDAF7A00);
}

void sub_1DDAF7A3C(void *a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v225 = *MEMORY[0x1E4F143B8];
  long long v219 = xmmword_1F3972C58;
  uint64_t v220 = qword_1F3972C68;
  uint64_t v217 = a6;
  uint64_t v218 = a7;
  applejpeg_decode_create();
  uint64_t v216 = 0;
  uint64_t v215 = 0;
  uint64_t v214 = 0;
  long long v223 = 0u;
  long long v224 = 0u;
  long long v221 = 0u;
  long long v222 = 0u;
  unint64_t v11 = (_WORD *)a1[34];
  if (*v11 != 2
    || (unsigned __int16)v11[1] - 1 > 1
    || (int v12 = (float *)a1[31], a1[32] - (void)v12 != 12)
    || *v12 == 0.0
    || v12[1] == 0.0
    || v12[2] == 0.0
    || applejpeg_decode_open_mem()
    || applejpeg_decode_set_option_outformat()
    || applejpeg_decode_set_option_alternate_420_prediction()
    || applejpeg_decode_get_image_info()
    || applejpeg_decode_get_output_buffer_size())
  {
    id v16 = 0;
  }
  else
  {
    objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v13, v216, v14, v15);
    id v16 = objc_claimAutoreleasedReturnValue();
    uint64_t v212 = objc_msgSend_mutableBytes(v16, v17, v18, v19, v20);
    uint64_t v213 = v216;
    if (!applejpeg_decode_image_all() && !applejpeg_decode_get_planar_output_buffer_size())
    {
      id v21 = v16;
      uint64_t v178 = objc_msgSend_bytes(v21, v22, v23, v24, v25);
      uint64_t v26 = (_WORD *)a1[34];
      char v185 = a1;
      id v170 = v21;
      int v190 = *v26 == 2 && v26[1] == 2;
      uint64_t v177 = *((void *)&v223 + 1);
      v226.origin.CGFloat x = (double)*a3;
      v226.origin.CGFloat y = (double)a3[1];
      v226.size.CGFloat width = (double)a3[2];
      v226.size.CGFloat height = (double)a3[3];
      v228.origin.CGFloat x = (double)*a5;
      uint64_t v174 = v224;
      v228.origin.CGFloat y = (double)a5[1];
      v228.size.CGFloat width = (double)a5[2];
      v228.size.CGFloat height = (double)a5[3];
      CGRect v227 = CGRectIntersection(v226, v228);
      unint64_t v27 = (unint64_t)(v227.origin.y - (double)a3[1]);
      unint64_t v28 = v27 + (unint64_t)v227.size.height;
      unint64_t v176 = v27;
      if (v28 > v27)
      {
        uint64_t v183 = v178 + 2 * v221 * v223 + 2 * *((void *)&v221 + 1) * *((void *)&v223 + 1);
        uint64_t v184 = v178 + 2 * v221 * v223;
        unint64_t v29 = (unint64_t)(v227.origin.x - (double)*a3);
        unint64_t v30 = v29 + (unint64_t)v227.size.width;
        uint64_t v173 = 2 * v223;
        unint64_t v171 = v27 + (unint64_t)v227.size.height;
        uint64_t v172 = a2 + 8 * v29 + 8;
        unint64_t v31 = (unint64_t)(v227.origin.y - (double)a3[1]);
        unint64_t v181 = v30;
        unint64_t v182 = v29;
        while (v30 <= v29)
        {
          v31 += 2;
LABEL_46:
          if (v31 >= v28) {
            goto LABEL_47;
          }
        }
        unint64_t v32 = 0;
        unint64_t v33 = v31 - v176;
        unint64_t v34 = (v31 - v176) >> v190;
        unint64_t v189 = v34 * v177;
        uint64_t v188 = (v34 + 1) * v177;
        unint64_t v187 = v34 * v174;
        uint64_t v186 = (v34 + 1) * v174;
        unint64_t v179 = v31 + 2;
        int v35 = v190;
        if (v31 + 2 < v28) {
          int v35 = 0;
        }
        int v191 = v35;
        uint64_t v36 = (_WORD *)(v178 + v173 * v33);
        unsigned int v37 = (_WORD *)(v172 + a4 + v31 * a4);
        int v38 = (_WORD *)(v178 + v173 + v173 * v33);
        int v39 = (_WORD *)(v172 + v31 * a4);
        while (1)
        {
          int v40 = (unsigned __int16 *)(v184 + 2 * (v189 + (v32 >> 1)));
          int v41 = (unsigned __int16 *)(v184 + 2 * (v188 + (v32 >> 1)));
          int v42 = (unsigned __int16 *)(v183 + 2 * (v187 + (v32 >> 1)));
          int v43 = (unsigned __int16 *)(v183 + 2 * (v186 + (v32 >> 1)));
          uint64_t v192 = v36;
          if (v29 + v32 + 2 >= v30)
          {
            __int16 v211 = *v40;
            __int16 v210 = v211;
            __int16 v207 = *v42;
            __int16 v206 = v207;
            __int16 v209 = *v41;
            __int16 v208 = v209;
            unsigned __int16 v44 = *v43;
            int v43 = v205;
            v205[1] = v44;
            int v42 = (unsigned __int16 *)&v206;
            int v41 = (unsigned __int16 *)&v208;
            v205[0] = v44;
            int v40 = (unsigned __int16 *)&v210;
          }
          int v45 = v191 ? v40 : v41;
          uint64_t v46 = v191 ? v42 : v43;
          if (v190) {
            break;
          }
          unsigned int v196 = 0;
          uint64_t v197 = 0;
          uint64_t v198 = 0;
          sub_1DDA1D984(&v196, (const void *)v185[38], v185[39], (uint64_t)(v185[39] - v185[38]) >> 2);
          uint64_t v193 = 0;
          uint64_t v194 = 0;
          uint64_t v195 = 0;
          sub_1DDA1D984(&v193, (const void *)v185[31], v185[32], (uint64_t)(v185[32] - v185[31]) >> 2);
          uint64_t v67 = v192;
          uint64_t v114 = v193;
          float v116 = *v193;
          float v115 = v193[1];
          float v117 = v193[2];
          LOWORD(v118) = *v192;
          float v119 = *((float *)v196 + 1);
          *(float *)&unsigned int v120 = (float)v118 - *(float *)v196;
          float v121 = *(float *)&v120 / v119;
          LOWORD(v120) = v192[1];
          *(float *)&unsigned int v122 = (float)v120 - *(float *)v196;
          float v123 = *(float *)&v122 / v119;
          LOWORD(v122) = *v38;
          *(float *)&unsigned int v124 = (float)v122 - *(float *)v196;
          float v125 = *(float *)&v124 / v119;
          LOWORD(v124) = v38[1];
          float v126 = (float)((float)v124 - *(float *)v196) / v119;
          unsigned int v127 = *v40;
          float v128 = *((float *)v196 + 2);
          float v129 = *((float *)v196 + 3);
          float v130 = (float)((float)v127 - v128) / v129;
          unsigned int v131 = *v41;
          float v132 = (float)((float)((float)(int)(v40[1] + v127) * 0.5) - v128) / v129;
          float v133 = (float)((float)v131 - v128) / v129;
          float v134 = (float)((float)(int)(v41[1] + v131) * 0.5) - v128;
          unsigned int v135 = *v42;
          float v136 = v134 / v129;
          float v137 = (float)((float)v135 - v128) / v129;
          float v138 = (float)((float)(int)(v42[1] + v135) * 0.5) - v128;
          unsigned int v139 = *v43;
          float v140 = v138 / v129;
          float v141 = (float)((float)v139 - v128) / v129;
          float v142 = (float)((float)((float)(int)(v43[1] + v139) * 0.5) - v128) / v129;
          float v143 = (float)(v119 + 1.0) * 0.000015259;
          float v144 = (float)(*v193 * -2.0) + 2.0;
          float v145 = v121 + (float)(v137 * v144);
          float v146 = (float)(v117 * -2.0) + 2.0;
          float v147 = v121 + (float)(v130 * v146);
          float v148 = (float)((float)(v121 - (float)(v117 * v147)) - (float)(*v193 * v145)) / v115;
          _S19 = v143 * v145;
          __asm { FCVT            H19, S19 }
          *(v39 - 4) = LOWORD(_S19);
          _S7 = v143 * v148;
          __asm { FCVT            H7, S7 }
          *(v39 - 3) = LOWORD(_S7);
          _S7 = v143 * v147;
          __asm { FCVT            H7, S7 }
          *(v39 - 2) = LOWORD(_S7);
          float v152 = v123 + (float)(v140 * v144);
          float v153 = v123 + (float)(v132 * v146);
          float v154 = (float)((float)(v123 - (float)(v117 * v153)) - (float)(v116 * v152)) / v115;
          _S7 = v143 * v152;
          __asm { FCVT            H7, S7 }
          *int v39 = LOWORD(_S7);
          _S5 = v143 * v154;
          __asm { FCVT            H5, S5 }
          v39[1] = LOWORD(_S5);
          _S5 = v143 * v153;
          __asm { FCVT            H5, S5 }
          v39[2] = LOWORD(_S5);
          float v158 = v125 + (float)(v141 * v144);
          float v159 = v125 + (float)(v133 * v146);
          float v160 = (float)((float)(v125 - (float)(v117 * v159)) - (float)(v116 * v158)) / v115;
          _S5 = v143 * v158;
          __asm { FCVT            H5, S5 }
          *(v37 - 4) = LOWORD(_S5);
          _S4 = v143 * v160;
          __asm { FCVT            H4, S4 }
          *(v37 - 3) = LOWORD(_S4);
          _S4 = v143 * v159;
          __asm { FCVT            H4, S4 }
          *(v37 - 2) = LOWORD(_S4);
          float v164 = v126 + (float)(v142 * v144);
          float v165 = v126 + (float)(v136 * v146);
          float v166 = (float)(v126 - (float)(v117 * v165)) - (float)(v116 * v164);
          _S2 = v143 * v164;
          __asm { FCVT            H2, S2 }
          *unsigned int v37 = LOWORD(_S2);
          _S0 = v143 * (float)(v166 / v115);
          __asm { FCVT            H0, S0 }
          v37[1] = LOWORD(_S0);
          _S0 = v143 * v165;
          __asm { FCVT            H0, S0 }
          v37[2] = LOWORD(_S0);
          uint64_t v194 = v114;
          operator delete(v114);
          uint64_t v113 = v196;
          unint64_t v29 = v182;
          if (v196)
          {
            uint64_t v197 = v196;
LABEL_42:
            operator delete(v113);
          }
LABEL_43:
          v32 += 2;
          uint64_t v36 = v67 + 2;
          v37 += 8;
          v38 += 2;
          v39 += 8;
          unint64_t v30 = v181;
          if (v29 + v32 >= v181)
          {
            unint64_t v28 = v171;
            unint64_t v31 = v179;
            goto LABEL_46;
          }
        }
        id v180 = v46;
        uint64_t v202 = 0;
        uint64_t v203 = 0;
        uint64_t v204 = 0;
        sub_1DDA1D984(&v202, (const void *)v185[38], v185[39], (uint64_t)(v185[39] - v185[38]) >> 2);
        std::string __p = 0;
        uint64_t v200 = 0;
        uint64_t v201 = 0;
        sub_1DDA1D984(&__p, (const void *)v185[31], v185[32], (uint64_t)(v185[32] - v185[31]) >> 2);
        unsigned int v47 = __p;
        float v49 = *(float *)__p;
        float v48 = *((float *)__p + 1);
        float v50 = *((float *)__p + 2);
        LOWORD(v51) = *v192;
        float v52 = v202[1];
        *(float *)&unsigned int v53 = (float)v51 - *v202;
        float v54 = *(float *)&v53 / v52;
        LOWORD(v53) = v192[1];
        *(float *)&unsigned int v55 = (float)v53 - *v202;
        float v56 = *(float *)&v55 / v52;
        LOWORD(v55) = *v38;
        *(float *)&unsigned int v57 = (float)v55 - *v202;
        float v58 = *(float *)&v57 / v52;
        LOWORD(v57) = v38[1];
        float v59 = (float)((float)v57 - *v202) / v52;
        unsigned int v60 = *v40;
        float v61 = v202[2];
        float v62 = v202[3];
        float v63 = (float)((float)v60 - v61) / v62;
        int v64 = v40[1] + v60;
        float v65 = (float)((float)((float)v64 * 0.5) - v61) / v62;
        int v66 = *v45;
        uint64_t v67 = v192;
        float v68 = (float)((float)((float)(int)(v66 + v60) * 0.5) - v61) / v62;
        int v69 = v64 + v66;
        if (v191) {
          uint64_t v70 = v40;
        }
        else {
          uint64_t v70 = v41;
        }
        float v71 = (float)((float)((float)(v69 + v70[1]) * 0.25) - v61) / v62;
        unsigned int v72 = *v42;
        float v73 = (float)((float)v72 - v61) / v62;
        int v74 = v42[1] + v72;
        float v75 = (float)((float)((float)v74 * 0.5) - v61) / v62;
        int v76 = *v180;
        float v77 = (float)((float)(int)(v76 + v72) * 0.5) - v61;
        int v78 = v74 + v76;
        if (v191) {
          uint64_t v79 = v42;
        }
        else {
          uint64_t v79 = v43;
        }
        float v80 = v77 / v62;
        float v81 = (float)((float)((float)(v78 + v79[1]) * 0.25) - v61) / v62;
        float v82 = (float)(v52 + 1.0) * 0.000015259;
        float v83 = (float)(v49 * -2.0) + 2.0;
        float v84 = v54 + (float)(v73 * v83);
        float v85 = (float)(v50 * -2.0) + 2.0;
        float v86 = v54 + (float)(v63 * v85);
        float v87 = (float)((float)(v54 - (float)(v50 * v86)) - (float)(v49 * v84)) / v48;
        _S22 = v82 * v84;
        __asm { FCVT            H22, S22 }
        *(v39 - 4) = LOWORD(_S22);
        _S6 = v82 * v87;
        __asm { FCVT            H6, S6 }
        *(v39 - 3) = LOWORD(_S6);
        _S6 = v82 * v86;
        __asm { FCVT            H6, S6 }
        *(v39 - 2) = LOWORD(_S6);
        float v95 = v56 + (float)(v75 * v83);
        float v96 = v56 + (float)(v65 * v85);
        float v97 = (float)((float)(v56 - (float)(v50 * v96)) - (float)(v49 * v95)) / v48;
        _S6 = v82 * v95;
        __asm { FCVT            H6, S6 }
        *int v39 = LOWORD(_S6);
        _S5 = v82 * v97;
        __asm { FCVT            H5, S5 }
        v39[1] = LOWORD(_S5);
        _S5 = v82 * v96;
        __asm { FCVT            H5, S5 }
        v39[2] = LOWORD(_S5);
        float v101 = v58 + (float)(v80 * v83);
        float v102 = v58 + (float)(v68 * v85);
        float v103 = (float)((float)(v58 - (float)(v50 * v102)) - (float)(v49 * v101)) / v48;
        _S5 = v82 * v101;
        __asm { FCVT            H5, S5 }
        *(v37 - 4) = LOWORD(_S5);
        _S4 = v82 * v103;
        __asm { FCVT            H4, S4 }
        *(v37 - 3) = LOWORD(_S4);
        _S4 = v82 * v102;
        __asm { FCVT            H4, S4 }
        *(v37 - 2) = LOWORD(_S4);
        float v107 = v59 + (float)(v81 * v83);
        float v108 = v59 + (float)(v71 * v85);
        float v109 = (float)(v59 - (float)(v50 * v108)) - (float)(v49 * v107);
        _S2 = v82 * v107;
        __asm { FCVT            H2, S2 }
        *unsigned int v37 = LOWORD(_S2);
        _S0 = v82 * (float)(v109 / v48);
        __asm { FCVT            H0, S0 }
        v37[1] = LOWORD(_S0);
        _S0 = v82 * v108;
        __asm { FCVT            H0, S0 }
        v37[2] = LOWORD(_S0);
        uint64_t v200 = v47;
        operator delete(v47);
        uint64_t v113 = v202;
        unint64_t v29 = v182;
        if (!v202) {
          goto LABEL_43;
        }
        uint64_t v203 = v202;
        goto LABEL_42;
      }
LABEL_47:
      id v16 = v170;
    }
  }
  applejpeg_decode_destroy();
}

void sub_1DDAF8398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  _Unwind_Resume(a1);
}

void *sub_1DDAF83F4(size_t a1)
{
  return malloc_type_malloc(a1, 0x3D0BE59DuLL);
}

void sub_1DDAF8404(uint64_t a1)
{
  uint64_t v3 = *(unsigned int *)(a1 + 44);
  int v2 = *(_DWORD *)(a1 + 48);
  unsigned int v4 = *(_DWORD *)(a1 + 188);
  unsigned int v5 = *(_DWORD *)(a1 + 192);
  uint64_t v16 = (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 2;
  sub_1DDA18488(&v19, (unint64_t *)&v16);
  if (*(void *)(a1 + 208) - *(void *)(a1 + 200) != *(void *)(a1 + 232) - *(void *)(a1 + 224)
    || (v3 - 100000) < 0xFFFE7961
    || (v2 - 100000) < 0xFFFE7961
    || v4 - 100000 < 0xFFFE7961
    || v5 - 100000 < 0xFFFE7961
    || (uint64_t v6 = v19, v19 >= 20000)
    || (v2 + v5 - 1) / v5 * ((v3 + v4 - 1) / v4) != v19)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v15 = sub_1DDAA5B9C(a1);
  if (v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 4 * v6;
    do
    {
      uint64_t v16 = __PAIR64__(v9, v8);
      unsigned int v17 = v4;
      unsigned int v18 = v5;
      unint64_t v11 = sub_1DDAF7950(a1, *(_DWORD *)(*(void *)(a1 + 200) + v7), *(unsigned int *)(*(void *)(a1 + 224) + v7));
      if (v11)
      {
        int v12 = v11;
        sub_1DDAF7A3C((void *)a1, v15 + 2 * (int)(v9 * v3) + 2 * (int)v8, (int *)&v16, 2 * v3, (int *)&v16, (uint64_t)v11, *(unsigned int *)(*(void *)(a1 + 224) + v7));
        free(v12);
      }
      v7 += 4;
      if ((int)(v8 + v4) >= (int)v3) {
        unsigned int v13 = v5;
      }
      else {
        unsigned int v13 = 0;
      }
      v9 += v13;
      if ((int)(v8 + v4) >= (int)v3) {
        unsigned int v8 = 0;
      }
      else {
        v8 += v4;
      }
    }
    while (v10 != v7);
  }
}

void sub_1DDAF8684(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAF86B0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a1 + 44);
  int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v8 = *(_DWORD *)(a1 + 188);
  unsigned int v9 = *(_DWORD *)(a1 + 192);
  uint64_t v20 = (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 2;
  sub_1DDA18488(&v23, (unint64_t *)&v20);
  if (*(void *)(a1 + 208) - *(void *)(a1 + 200) != *(void *)(a1 + 232) - *(void *)(a1 + 224)
    || (v7 - 100000) < 0xFFFE7961
    || (v6 - 100000) < 0xFFFE7961
    || v8 - 100000 < 0xFFFE7961
    || v9 - 100000 < 0xFFFE7961
    || v23 >= 20000
    || (v6 + v9 - 1) / v9 * ((v7 + v8 - 1) / v8) != v23)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v23)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = 4 * v23;
    do
    {
      uint64_t v20 = __PAIR64__(v12, v11);
      unsigned int v21 = v8;
      unsigned int v22 = v9;
      if (sub_1DDB56B98((int *)&v20, a3))
      {
        uint64_t v14 = sub_1DDAF7950(a1, *(_DWORD *)(*(void *)(a1 + 200) + v10), *(unsigned int *)(*(void *)(a1 + 224) + v10));
        if (v14)
        {
          uint64_t v15 = v14;
          sub_1DDAF7A3C((void *)a1, a2, a3, a4, (int *)&v20, (uint64_t)v14, *(unsigned int *)(*(void *)(a1 + 224) + v10));
          free(v15);
        }
      }
      if ((int)(v11 + v8) >= v7) {
        unsigned int v16 = v9;
      }
      else {
        unsigned int v16 = 0;
      }
      v12 += v16;
      if ((int)(v11 + v8) >= v7) {
        unsigned int v11 = 0;
      }
      else {
        v11 += v8;
      }
      v10 += 4;
    }
    while (v13 != v10);
  }
}

void sub_1DDAF8928(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAF8954(void *a1)
{
  *a1 = &unk_1F3972C80;
  int v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[34];
  if (v3)
  {
    a1[35] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)a1[31];
  if (v4)
  {
    a1[32] = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)a1[28];
  if (v5)
  {
    a1[29] = v5;
    operator delete(v5);
  }
  int v6 = (void *)a1[25];
  if (v6)
  {
    a1[26] = v6;
    operator delete(v6);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDAF89F4(void *a1)
{
  *a1 = &unk_1F3972C80;
  int v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[34];
  if (v3)
  {
    a1[35] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)a1[31];
  if (v4)
  {
    a1[32] = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)a1[28];
  if (v5)
  {
    a1[29] = v5;
    operator delete(v5);
  }
  int v6 = (void *)a1[25];
  if (v6)
  {
    a1[26] = v6;
    operator delete(v6);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

_DWORD *sub_1DDAF8AA8(_DWORD *a1, int a2, uint64_t *a3)
{
  *(void *)sub_1DDBF0D7C((uint64_t)a1, a2) = &unk_1F3972D78;
  a1[3] = sub_1DDA19EC8(*a3);
  a1[4] = sub_1DDA19EC8(*a3);
  a1[5] = sub_1DDA19EC8(*a3);
  a1[6] = sub_1DDA19EC8(*a3);
  return a1;
}

id sub_1DDAF8B24(unsigned int *a1)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  int v2 = [RAWOpcodeTrimBounds alloc];
  v26[0] = @"Top";
  int v6 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v3, a1[3], v4, v5);
  v27[0] = v6;
  v26[1] = @"Left";
  uint64_t v10 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v7, a1[4], v8, v9);
  v27[1] = v10;
  v26[2] = @"Bottom";
  uint64_t v14 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v11, a1[5], v12, v13);
  v27[2] = v14;
  v26[3] = @"Right";
  unsigned int v18 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v15, a1[6], v16, v17);
  v27[3] = v18;
  uint64_t v20 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v19, (uint64_t)v27, (uint64_t)v26, 4);
  uint64_t v24 = objc_msgSend_initWithArguments_(v2, v21, (uint64_t)v20, v22, v23);

  return v24;
}

void sub_1DDAF8C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAF8CCC()
{
}

uint64_t sub_1DDAF8CE0()
{
  return 6;
}

xmlChar *sub_1DDAF8CE8(xmlChar *result, uint64_t a2, unsigned int a3)
{
  if (a3 <= 9 && a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = (uint64_t **)(result + 312);
    uint64_t v24 = (uint64_t **)(result + 360);
    uint64_t v25 = (uint64_t **)(result + 408);
    uint64_t v22 = (uint64_t **)(result + 432);
    uint64_t v23 = (uint64_t **)(result + 384);
    uint64_t v6 = a3 + 1;
    int v7 = (void (**)(const xmlChar *))MEMORY[0x1E4FBA9D0];
    uint64_t v8 = (const xmlNode *)a2;
    while (1)
    {
      if (*(_DWORD *)(a2 + 8) == 1) {
        goto LABEL_30;
      }
      if (!*(void *)(a2 + 80)) {
        goto LABEL_30;
      }
      ns = v8->ns;
      if (!ns || !ns->prefix) {
        goto LABEL_30;
      }
      uint64_t result = xmlNodeGetContent(v8);
      if (result) {
        break;
      }
LABEL_31:
      uint64_t v8 = v8->next;
      if (!v8) {
        return result;
      }
    }
    uint64_t v10 = result;
    id v11 = [NSString alloc];
    int v12 = xmlStrlen(v10);
    uint64_t v14 = (__CFString *)objc_msgSend_initWithBytes_length_encoding_(v11, v13, (uint64_t)v10, v12, 4);
    if (v14)
    {
      (*v7)(v10);
      if (!xmlStrEqual(v8->ns->prefix, (const xmlChar *)"exif"))
      {
        if (!xmlStrEqual(v8->ns->prefix, (const xmlChar *)"xmp")) {
          goto LABEL_29;
        }
        if (!xmlStrEqual(v8->name, (const xmlChar *)"CreateDate")) {
          goto LABEL_29;
        }
        double v15 = sub_1DDAF94C0(v14);
        if (v15 <= -INFINITY) {
          goto LABEL_29;
        }
        sub_1DDA1A880(__p, "XMP:xmp");
        unint64_t v28 = __p;
        uint64_t v16 = (double *)sub_1DDA70898(v25, __p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v28);
        goto LABEL_13;
      }
      if (xmlStrEqual(v8->name, (const xmlChar *)"ShutterSpeedValue"))
      {
        double v15 = sub_1DDAF90EC(v14);
        sub_1DDA1A880(__p, "XMP:exif");
        unint64_t v28 = __p;
        uint64_t v16 = (double *)sub_1DDA70898(v5, __p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v28);
LABEL_13:
        v16[7] = v15;
        goto LABEL_14;
      }
      if (xmlStrEqual(v8->name, (const xmlChar *)"DateTimeOriginal"))
      {
        double v15 = sub_1DDAF94C0(v14);
        if (v15 > -INFINITY)
        {
          sub_1DDA1A880(__p, "XMP:exif");
          unint64_t v28 = __p;
          uint64_t v16 = (double *)sub_1DDA70898(v25, __p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v28);
          goto LABEL_13;
        }
      }
      else
      {
        if (xmlStrEqual(v8->name, (const xmlChar *)"ApertureValue"))
        {
          double v15 = sub_1DDAF90EC(v14);
          sub_1DDA1A880(__p, "XMP:exif");
          unint64_t v28 = __p;
          uint64_t v16 = (double *)sub_1DDA70898(v24, __p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v28);
          goto LABEL_13;
        }
        if (xmlStrEqual(v8->name, (const xmlChar *)"FocalLength"))
        {
          double v15 = sub_1DDAF90EC(v14);
          sub_1DDA1A880(__p, "XMP:exif");
          unint64_t v28 = __p;
          uint64_t v16 = (double *)sub_1DDA70898(v23, __p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v28);
          goto LABEL_13;
        }
        if (xmlStrEqual(v8->name, (const xmlChar *)"ExposureMode"))
        {
          int v21 = objc_msgSend_intValue(v14, v17, v18, v19, v20);
          sub_1DDA1A880(__p, "XMP:exif");
          unint64_t v28 = __p;
          *((_DWORD *)sub_1DDAEB240(v22, __p, (uint64_t)&unk_1DDBFB044, (_OWORD **)&v28) + 14) = v21 & ~(v21 >> 31);
LABEL_14:
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
LABEL_29:

LABEL_30:
    uint64_t result = (xmlChar *)sub_1DDAF8CE8(v4, v8->children, v6);
    goto LABEL_31;
  }
  return result;
}

void sub_1DDAF9080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

double sub_1DDAF90EC(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_containsString_(v1, v2, @"/", v3, v4))
  {
    uint64_t v9 = objc_msgSend_componentsSeparatedByString_(v1, v5, @"/", v7, v8);
    unint64_t v17 = objc_msgSend_count(v9, v10, v11, v12, v13);
    if (v17)
    {
      uint64_t v18 = objc_msgSend_objectAtIndexedSubscript_(v9, v14, 0, v15, v16);
      objc_msgSend_doubleValue(v18, v19, v20, v21, v22);
      double v24 = v23;

      if (v17 >= 2)
      {
        unint64_t v28 = objc_msgSend_objectAtIndexedSubscript_(v9, v25, 1, v26, v27);
        objc_msgSend_doubleValue(v28, v29, v30, v31, v32);
        double v34 = v33;

        double v24 = v24 / v34;
      }
    }
    else
    {
      double v24 = 0.0;
    }
  }
  else
  {
    objc_msgSend_doubleValue(v1, v5, v6, v7, v8);
    double v24 = v35;
  }

  return v24;
}

void sub_1DDAF91C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAF91FC(xmlChar *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = a3;
  sub_1DDA27D28((uint64_t)a1, &v39);
  if ((**v39)(v39))
  {
    BOOL v10 = 0;
  }
  else
  {
    unint64_t v43 = a3 + a4;
    sub_1DDA18500(&v44, &v43);
    sub_1DDA27D28((uint64_t)a1, &v41);
    unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41);
    BOOL v10 = v44 >= v11;
    if (v42) {
      sub_1DDA18310(v42);
    }
  }
  if (v40) {
    sub_1DDA18310(v40);
  }
  if (v10)
  {
    (*(void (**)(xmlChar *, uint64_t))(*(void *)a1 + 184))(a1, 1);
  }
  else if ((unint64_t)(a4 - 1000000) >= 0xFFFFFFFFFFF0BDC1)
  {
    uint64_t v12 = objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v7, a4, v8, v9);
    if (v12)
    {
      sub_1DDA27D28((uint64_t)a1, &v41);
      sub_1DDA1B2DC(&v43, &v45);
      sub_1DDA1A94C((uint64_t *)&v39, &v41, (uint64_t)&v43, 0);
      if (v42) {
        sub_1DDA18310(v42);
      }
      uint64_t v13 = *((void *)a1 + 10);
      id v14 = v12;
      uint64_t v19 = objc_msgSend_mutableBytes(v14, v15, v16, v17, v18);
      uint64_t v24 = objc_msgSend_length(v14, v20, v21, v22, v23);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, v19, v24) == a4)
      {
        id v25 = v14;
        uint64_t v30 = (const char *)objc_msgSend_bytes(v25, v26, v27, v28, v29);
        int v35 = objc_msgSend_length(v25, v31, v32, v33, v34);
        MemorCGFloat y = xmlReadMemory(v30, v35, "XMP", 0, 2112);
        unsigned int v37 = (xmlDoc *)Memory;
        if (Memory)
        {
          xmlNodePtr RootElement = xmlDocGetRootElement(Memory);
          sub_1DDAF8CE8(a1, (uint64_t)RootElement, 0);
          xmlFreeDoc(v37);
        }
      }
      sub_1DDA1AA18((uint64_t *)&v39);
    }
  }
}

void sub_1DDAF9450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDAF94C0(const __CFString *a1)
{
  int v2 = (void *)MEMORY[0x1E01C4510]();
  CFLocaleRef v3 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"en_US");
  CFAutorelease(v3);
  CFDateFormatterRef v4 = CFDateFormatterCreate(0, v3, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
  CFAutorelease(v4);
  CFTimeZoneRef v5 = CFTimeZoneCreateWithTimeIntervalFromGMT(0, 0.0);
  CFAutorelease(v5);
  CFDateFormatterSetProperty(v4, (CFStringRef)*MEMORY[0x1E4F1D0F8], v5);
  CFDateFormatterSetFormat(v4, @"yyyy-MM-dd'T'HH:mm:ss");
  rangep.locatiouint64_t n = 0;
  rangep.CFIndex length = CFStringGetLength(a1);
  CFAbsoluteTime atp = -INFINITY;
  if (CFDateFormatterGetAbsoluteTimeFromString(v4, a1, &rangep, &atp))
  {
    v26.locatiouint64_t n = rangep.length + rangep.location;
    v26.CFIndex length = 3;
    CFIndex v6 = rangep.length + rangep.location + 3;
    if (v6 <= CFStringGetLength(a1))
    {
      double v25 = 0.0;
      CFDateFormatterSetFormat(v4, @".SS");
      if (CFDateFormatterGetAbsoluteTimeFromString(v4, a1, &v26, &v25))
      {
        CFRange rangep = v26;
        CFAbsoluteTime atp = atp + v25 - floor(v25);
      }
    }
    locatiouint64_t n = rangep.location;
    CFIndex length = rangep.length;
    CFIndex v9 = CFStringGetLength(a1);
    v10.CFIndex length = v9 - (rangep.location + rangep.length);
    if (v10.length >= 2)
    {
      v10.locatiouint64_t n = length + location;
      CFStringRef v11 = CFStringCreateWithSubstring(0, a1, v10);
      CFAutorelease(v11);
      CharacterAtIndeCGFloat x = CFStringGetCharacterAtIndex(v11, 0);
      double v13 = 0.0;
      if (CharacterAtIndex != 90)
      {
        int v14 = CharacterAtIndex;
        if (CharacterAtIndex == 45 || CharacterAtIndex == 43)
        {
          CFIndex v15 = CFStringGetLength(v11);
          double v16 = 0.0;
          if (v15 >= 3)
          {
            CFIndex v17 = v15;
            v29.locatiouint64_t n = 1;
            v29.CFIndex length = 2;
            CFStringRef v18 = CFStringCreateWithSubstring(0, v11, v29);
            CFAutorelease(v18);
            double v16 = (double)CFStringGetIntValue(v18) * 3600.0 + 0.0;
            if (v17 != 3)
            {
              int v19 = CFStringGetCharacterAtIndex(v11, 3);
              uint64_t v20 = -4;
              if (v19 != 58) {
                uint64_t v20 = -3;
              }
              if ((unint64_t)(v20 + v17) >= 2)
              {
                if (v19 == 58) {
                  v21.locatiouint64_t n = 4;
                }
                else {
                  v21.locatiouint64_t n = 3;
                }
                v21.CFIndex length = 2;
                CFStringRef v22 = CFStringCreateWithSubstring(0, v11, v21);
                CFAutorelease(v22);
                double v16 = v16 + (double)CFStringGetIntValue(v22) * 60.0;
              }
            }
          }
          double v13 = -v16;
          if (v14 != 45) {
            double v13 = v16;
          }
        }
      }
      CFAbsoluteTime atp = v13 + atp;
    }
  }
  else
  {
    CFDateFormatterSetFormat(v4, @"yyyy:MM:dd HH:mm");
    rangep.locatiouint64_t n = 0;
    rangep.CFIndex length = CFStringGetLength(a1);
    if (!CFDateFormatterGetAbsoluteTimeFromString(v4, a1, &rangep, &atp)) {
      CFAbsoluteTime atp = -INFINITY;
    }
  }
  double v23 = atp;
  return v23;
}

void sub_1DDAF97A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v14 = &unk_1F39665D8;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v7);
  CFDateFormatterRef v4 = v7;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:redBlueBalance");
  (*(void (**)(void *, void **, void **, uint64_t))(*(void *)v4 + 600))(v4, __p, &v14, 3);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    sub_1DDA18310(v8);
  }
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v10, a1);
    uint64_t v5 = v10;
    sub_1DDA1A880(&v7, "IFD0:EXIF:MAKERNOTE:ImageProcessing:WBRedBlueLevels");
    (*(void (**)(void **__return_ptr, uint64_t, void **, void **, uint64_t))(*(void *)v5 + 600))(__p, v5, &v7, &v14, 3);
    CFIndex v6 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v6;
      operator delete(v6);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v13;
    __p[1] = 0;
    uint64_t v13 = 0;
    __p[0] = 0;
    if (v9 < 0) {
      operator delete(v7);
    }
    if (v11) {
      sub_1DDA18310(v11);
    }
  }
}

void sub_1DDAF996C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  double v25 = *(void **)v23;
  if (*(void *)v23)
  {
    *(void *)(v23 + 8) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAF99E0(void *a1@<X0>, void **a2@<X8>)
{
  if ((*(unsigned int (**)(void *))(*a1 + 248))(a1))
  {
    (*(void (**)(double **__return_ptr, void *, double))(*a1 + 2976))(&v27, a1, 0.0);
    if ((void)v28 - (void)v27 == 32 && *v27 > 0.0) {
      goto LABEL_8;
    }
    (*(void (**)(void **__return_ptr, void *, double))(*a1 + 2984))(&v25, a1, 0.0);
    if (v27)
    {
      *(void *)&long long v28 = v27;
      operator delete(v27);
    }
    uint64_t v27 = (double *)v25;
    long long v28 = v26;
    if ((void)v26 - (void)v25 == 32 && *(double *)v25 > 0.0)
    {
LABEL_8:
      sub_1DDACC9F8(a1, a2);
    }
    else
    {
      double v25 = 0;
      sub_1DDA25B2C(a2, 4uLL, &v25);
    }
    if (v27)
    {
      *(void *)&long long v28 = v27;
      operator delete(v27);
    }
    return;
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 176))(a1))
  {
LABEL_51:
    sub_1DDACC9F8(a1, a2);
    return;
  }
  uint64_t v27 = 0;
  long long v28 = 0uLL;
  double v25 = 0;
  long long v26 = 0uLL;
  CFStringRef v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 160))(&v20, a1);
  uint64_t v4 = v20;
  sub_1DDA1A880(&__p, "IFD0:SUBIFD0");
  (*(void (**)(uint64_t, void **, double **, void))(*(void *)v4 + 248))(v4, &__p, &v27, 0);
  if (v19 < 0) {
    operator delete(__p);
  }
  if (v21) {
    sub_1DDA18310(v21);
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 160))(&v20, a1);
  uint64_t v5 = v20;
  sub_1DDA1A880(&__p, "IFD0:SUBIFD0:DeltaH");
  (*(void (**)(uint64_t, void **, void **, void))(*(void *)v5 + 248))(v5, &__p, &v25, 0);
  if (v19 < 0) {
    operator delete(__p);
  }
  if (v21) {
    sub_1DDA18310(v21);
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 160))(&v20, a1);
  uint64_t v6 = v20;
  sub_1DDA1A880(&__p, "IFD0:SUBIFD0:DeltaV");
  (*(void (**)(uint64_t, void **, void **, void))(*(void *)v6 + 248))(v6, &__p, &v22, 0);
  if (v19 < 0) {
    operator delete(__p);
  }
  if (v21) {
    sub_1DDA18310(v21);
  }
  uint64_t v20 = 0;
  sub_1DDA25B2C(&__p, 4uLL, &v20);
  uint64_t v7 = (double *)__p;
  uint64_t v8 = v18 - (unsigned char *)__p;
  if (v18 != __p)
  {
    unint64_t v9 = 0;
    uint64_t v10 = v27;
    unint64_t v11 = (uint64_t)(v28 - (void)v27) >> 3;
    uint64_t v12 = (double *)v25;
    unint64_t v13 = (uint64_t)(v26 - (void)v25) >> 3;
    int v14 = (double *)v22;
    unint64_t v15 = (v23 - (unsigned char *)v22) >> 3;
    do
    {
      if (v11 > v9) {
        v7[v9] = v10[v9] + v7[v9];
      }
      if (v13 > v9) {
        v7[v9] = v12[v9] + v7[v9];
      }
      if (v15 > v9) {
        v7[v9] = v14[v9] + v7[v9];
      }
      ++v9;
    }
    while (v8 >> 3 > (unint64_t)v9);
  }
  if (v8 == 32)
  {
    if (*v7 > 0.0 && v7[1] > 0.0 && v7[2] > 0.0 && v7[3] > 0.0)
    {
      char v16 = 1;
      goto LABEL_42;
    }
    uint64_t v20 = 0;
    sub_1DDA25B2C(a2, 4uLL, &v20);
  }
  else
  {
    sub_1DDACC9F8(a1, a2);
  }
  char v16 = 0;
LABEL_42:
  if (__p)
  {
    CFStringRef v18 = __p;
    operator delete(__p);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  if (v25)
  {
    *(void *)&long long v26 = v25;
    operator delete(v25);
  }
  if (v27)
  {
    *(void *)&long long v28 = v27;
    operator delete(v27);
  }
  if (v16) {
    goto LABEL_51;
  }
}

void sub_1DDAF9E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  uint64_t v23 = *(void **)(v21 - 56);
  if (v23)
  {
    *(void *)(v21 - 48) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAF9F38(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v7);
  uint64_t v2 = v7;
  CFLocaleRef v3 = off_1EAB8AA18[0];
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v5 = sub_1DDAFA00C(v2, v3, v4, &unk_1F3972DB0);
  if (v8) {
    sub_1DDA18310(v8);
  }
  return v5;
}

void sub_1DDAF9FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAFA00C(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  sub_1DDAB6A18(v7, a3, &__p);
  unint64_t v9 = (uint64_t **)(a1 + 24);
  uint64_t v10 = sub_1DDA2A530(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    _DWORD v29[2] = sub_1DDAFB49C;
    _DWORD v29[3] = &unk_1E6D051C0;
    unint64_t v13 = (uint64_t (**)(void))v8;
    id v30 = v13;
    sub_1DDB657E4(a1, v7, v29, &p_p);
    CFStringRef v18 = (long long *)p_p;
    if (p_p)
    {
      char v19 = sub_1DDB67AB8((uint64_t)p_p, v14, v15, v16, v17);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (v34) {
      sub_1DDA18310(v34);
    }

    if (!v18) {
      uint64_t v12 = v13[2](v13);
    }
    p_p = &__p;
    uint64_t v24 = sub_1DDAB6C70(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_p);
    double v25 = (void (**)(uint64_t, void, std::string **, void, void))(v24 + 7);
    v32[1] = (uint64_t (*)(void, void, void, void, void))v12;
    v32[0] = (uint64_t (*)(void, void, void, void, void))sub_1DDAFB534;
    if (v32 != (uint64_t (**)(void, void, void, void, void))(v24 + 7))
    {
      long long v26 = *v25;
      if (*v25)
      {
        p_p = 0;
        uint64_t v34 = 0;
        v26(2, v25, &p_p, 0, 0);
        v32[0](2, v32, v25, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(void, void, void, void, void), void, void))p_p)(2, &p_p, v32, 0, 0);
        sub_1DDAB6E58((uint64_t (**)(void, void, void, void, void))&p_p);
      }
      else
      {
        *((_DWORD *)v24 + 16) = v12;
        v24[7] = (uint64_t)sub_1DDAFB534;
        v32[0] = 0;
      }
    }
    sub_1DDAB6E58(v32);
  }
  else
  {
    unint64_t v11 = (unsigned int *)sub_1DDAFB4E8((uint64_t (**)(uint64_t, void, void, void *, void *))v10 + 7);
    if (!v11) {
      sub_1DDAB6C00();
    }
    uint64_t v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v12;
}

void sub_1DDAFA2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  __cxa_free_exception(v28);

  if (a26) {
    sub_1DDA18310(a26);
  }

  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDAFA37C()
{
  return 11;
}

void sub_1DDAFA384(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  double v14 = a3;
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) != 10
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) != 15)
  {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v10, a1);
  uint64_t v5 = v10;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE");
  char v6 = (*(uint64_t (**)(uint64_t, void **, void **, void))(*(void *)v5 + 248))(v5, __p, v12, 0);
  if ((void *)((char *)v12[1] - (char *)v12[0]) == (void *)32) {
    char v7 = v6;
  }
  else {
    char v7 = 0;
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    sub_1DDA18310(v11);
  }
  if (v7)
  {
    *(_OWORD *)a2 = *(_OWORD *)v12;
    a2[2] = v13;
  }
  else
  {
LABEL_12:
    sub_1DDA25B2C(a2, 4uLL, &v14);
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete(v12[0]);
    }
  }
}

void sub_1DDAFA500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFA54C(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  double v14 = a3;
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) != 10
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) != 15)
  {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v10, a1);
  uint64_t v5 = v10;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:ImageProcessing");
  char v6 = (*(uint64_t (**)(uint64_t, void **, void **, void))(*(void *)v5 + 248))(v5, __p, v12, 0);
  if ((void *)((char *)v12[1] - (char *)v12[0]) == (void *)32) {
    char v7 = v6;
  }
  else {
    char v7 = 0;
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    sub_1DDA18310(v11);
  }
  if (v7)
  {
    *(_OWORD *)a2 = *(_OWORD *)v12;
    a2[2] = v13;
  }
  else
  {
LABEL_12:
    sub_1DDA25B2C(a2, 4uLL, &v14);
    if (v12[0])
    {
      v12[1] = v12[0];
      operator delete(v12[0]);
    }
  }
}

void sub_1DDAFA6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAFA714(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v3);
  sub_1DDAC7FA4(&v3, (void **)&v5);
  if (v4) {
    sub_1DDA18310(v4);
  }
  if (v5) {
    uint64_t v1 = v5[336];
  }
  else {
    uint64_t v1 = 0;
  }
  if (v6) {
    sub_1DDA18310(v6);
  }
  return v1;
}

uint64_t sub_1DDAFA79C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 2784))();
}

uint64_t sub_1DDAFA7C8(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v5);
  sub_1DDAC7FA4(&v5, &v7);
  if (v6) {
    sub_1DDA18310(v6);
  }
  if (v7) {
    uint64_t v2 = (*(uint64_t (**)(void *))(*(void *)v7 + 792))(v7);
  }
  else {
    uint64_t v2 = sub_1DDAC9BB4(a1);
  }
  uint64_t v3 = v2;
  if (v8) {
    sub_1DDA18310(v8);
  }
  return v3;
}

void sub_1DDAFA884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFA89C(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v8);
  uint64_t v4 = v8;
  uint64_t v5 = off_1EAB8A908[0];
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1DDAFA9B4;
  v7[3] = &unk_1E6D05198;
  v7[4] = a1;
  sub_1DDAB6440(v4, v5, v6, v7, a2);
  if (v9) {
    sub_1DDA18310(v9);
  }
}

void sub_1DDAFA99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDAFA9B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 2960))(v3);
  if (v4 == 2)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 2968))(v3);
    int v6 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 2984);
    uint64_t v7 = v3;
    return (void *)v6(v7);
  }
  if (v4 == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 2968))(v3);
    int v6 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 2976);
    uint64_t v7 = v3;
    return (void *)v6(v7);
  }
  if (v4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v9 = (*(double (**)(uint64_t))(*(void *)v3 + 2968))(v3);
  return sub_1DDA25B2C(a2, 4uLL, &v9);
}

void sub_1DDAFABA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id sub_1DDAFABB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"packingMethod", v5, v6))
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2952))(a1);
    objc_msgSend_numberWithInt_(NSNumber, v8, v7, v9, v10);
  }
  else
  {
    sub_1DDBCE65C(a1, v3);
  unint64_t v11 = };

  return v11;
}

void sub_1DDAFAC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAFAC74(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDACFD70(v2, @"olympusBlackLevelSource", v3, &unk_1F3972DD0);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDAFAD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFAD38()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDAFAD80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1DDAFAD94(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  double v4 = sub_1DDAEE388(v2, @"olympusFallbackBlackLevel", v3, &unk_1F3972DF0);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDAFAE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDAFAE60()
{
  return 0.0;
}

void sub_1DDAFAE68(uint64_t a1)
{
  (*(void (**)(char **__return_ptr))(*(void *)a1 + 2888))(&v24);
  unint64_t v2 = v25 - v24;
  if (v25 == v24) {
    goto LABEL_8;
  }
  int v3 = *(_DWORD *)v24;
  if (*(_DWORD *)v24 == 2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v19, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 384))(&v21);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
    *(void *)&long long v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
    *((void *)&v16 + 1) = v10;
    sub_1DDAFB740(&v21, (unint64_t *)&v18, &v17, &v16, &v23);
    goto LABEL_22;
  }
  if (v3 == 7)
  {
    if (v2 > 7)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v19, a1);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 384))(&v21);
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
      *(void *)&long long v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
      *((void *)&v16 + 1) = v5;
      sub_1DDAFB7D4(&v21, (unint64_t *)&v18, &v17, &v16, &v23);
      if (v22) {
        sub_1DDA18310(v22);
      }
      if (v20) {
        sub_1DDA18310(v20);
      }
      int v6 = *((_DWORD *)v24 + 1);
      if (v6 < 0)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      sub_1DDAB426C(v23, v6);
      long long v7 = v23;
      if (*((void *)&v23 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 32);
      *(_OWORD *)(a1 + 24) = v7;
      if (v8) {
        sub_1DDA18310(v8);
      }
      uint64_t v9 = (std::__shared_weak_count *)*((void *)&v23 + 1);
      if (*((void *)&v23 + 1)) {
        goto LABEL_28;
      }
      goto LABEL_29;
    }
LABEL_35:
    uint64_t v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v13, "RawCameraException");
LABEL_34:
    __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v3 != 4)
  {
LABEL_8:
    sub_1DDA30DE8(a1);
    goto LABEL_29;
  }
  if (v2 <= 7 || (*((_DWORD *)v24 + 1) & 0x80000000) != 0) {
    goto LABEL_35;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v19, a1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 384))(&v21);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
  *(void *)&long long v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
  *((void *)&v16 + 1) = v4;
  int v15 = *((_DWORD *)v24 + 1);
  sub_1DDAFB614(&v21, (unint64_t *)&v18, &v17, &v16, &v15, &v23);
LABEL_22:
  long long v11 = v23;
  long long v23 = 0uLL;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v11;
  if (v12)
  {
    sub_1DDA18310(v12);
    if (*((void *)&v23 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v23 + 1));
    }
  }
  if (v22) {
    sub_1DDA18310(v22);
  }
  uint64_t v9 = v20;
  if (v20) {
LABEL_28:
  }
    sub_1DDA18310(v9);
LABEL_29:
  if (!*(void *)(a1 + 24))
  {
    uint64_t v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v13, "RawCameraException");
    goto LABEL_34;
  }
  if (v24)
  {
    double v25 = v24;
    operator delete(v24);
  }
}

void sub_1DDAFB3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1DDA18310(a18);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  uint64_t v20 = *(void **)(v18 - 48);
  if (v20)
  {
    *(void *)(v18 - 40) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAFB49C(uint64_t a1)
{
  uint64_t v1 = NSNumber;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return objc_msgSend_numberWithUnsignedInt_(v1, v2, v3, v4, v5);
}

uint64_t (**sub_1DDAFB4E8(uint64_t (**result)(uint64_t, void, void, void *, void *)))(uint64_t, void, void, void *, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void *, void *))(*result)(3, result, 0, &unk_1F39739E8, &unk_1DDBFD480);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *sub_1DDAFB534(unsigned int a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = &unk_1F39739E8;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = sub_1DDAFB534;
      break;
    case 2:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = sub_1DDAFB534;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = sub_1DDAB6F70(a4, (uint64_t)&unk_1F39739E8);
      }
      else {
        BOOL v8 = a5 == &unk_1DDBFD480;
      }
      if (v8) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void sub_1DDAFB614(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0xE0uLL);
  sub_1DDAFB6B8((uint64_t)v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDAFB6A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAFB6B8(uint64_t a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5, int *a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F395E070;
  int v7 = *a6;
  sub_1DDAA58A8(a1 + 24, a2, *a3, a4, a5);
  *(void *)(a1 + 24) = &unk_1F3963238;
  *(_DWORD *)(a1 + 212) = v7;
  *(void *)(a1 + 216) = 0;
  return a1;
}

void sub_1DDAFB72C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAFB740(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xD8uLL);
  sub_1DDA5E504(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAFB7C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAFB7D4(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xD8uLL);
  sub_1DDAFB868((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAFB854(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAFB868(uint64_t a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3973A08;
  sub_1DDAA58A8(a1 + 24, a2, *a3, a4, a5);
  *(void *)(a1 + 24) = &unk_1F3963148;
  *(_DWORD *)(a1 + 212) = 0;
  return a1;
}

void sub_1DDAFB8D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAFB8E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3973A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAFB908(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3973A08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAFB95C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAFB984(uint64_t a1)
{
  sub_1DDA30DE8(a1);
  if (!*(void *)(a1 + 24))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v8, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 384))(&v10);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
    *(void *)&long long v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
    *((void *)&v5 + 1) = v2;
    sub_1DDAEC818(&v10, (unint64_t *)&v7, &v6, &v5, &v12);
    long long v3 = v12;
    long long v12 = 0uLL;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v3;
    if (v4)
    {
      sub_1DDA18310(v4);
      if (*((void *)&v12 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v12 + 1));
      }
    }
    if (v11) {
      sub_1DDA18310(v11);
    }
    if (v9) {
      sub_1DDA18310(v9);
    }
  }
}

void sub_1DDAFBB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  if (a14) {
    sub_1DDA18310(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFBB4C(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2192))(a1);
  int v9 = 0;
  int v10 = v2;
  uint64_t v8 = &unk_1F396F638;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v6, a1);
  uint64_t v3 = v6;
  sub_1DDA1A880(__p, "MinoltaSegmentWBG");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v3 + 600))(v3, __p, &v8, 3);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7) {
    sub_1DDA18310(v7);
  }
}

void sub_1DDAFBC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFBD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAFBE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDAFBF00(uint64_t a1)
{
  sub_1DDA30DE8(a1);
  if (!*(void *)(a1 + 24))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v8, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 384))(&v10);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
    *(void *)&long long v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
    *((void *)&v5 + 1) = v2;
    sub_1DDAFC2E4(&v10, (unint64_t *)&v7, &v6, &v5, &v12);
    long long v3 = v12;
    long long v12 = 0uLL;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v3;
    if (v4)
    {
      sub_1DDA18310(v4);
      if (*((void *)&v12 + 1)) {
        sub_1DDA18310(*((std::__shared_weak_count **)&v12 + 1));
      }
    }
    if (v11) {
      sub_1DDA18310(v11);
    }
    if (v9) {
      sub_1DDA18310(v9);
    }
    *(unsigned char *)(*(void *)(a1 + 24) + 185) = 0;
  }
}

void sub_1DDAFC09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  if (a14) {
    sub_1DDA18310(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFC0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = &unk_1F3968EF0;
  int v7 = 0;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE");
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(void *)a1 + 2976))(a1, a2, __p, &v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1DDAFC198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFC1B4(uint64_t a1)
{
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1DDAB7EFC((char *)&v5, qword_1DDBFD538, &qword_1DDBFD538[12], 0xCuLL);
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE");
  uint64_t v2 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)a1 + 2968))(a1, __p, &v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 2960))(a1, v2);
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
}

void sub_1DDAFC2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFC2E4(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xF8uLL);
  sub_1DDAAF8B8((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAFC364(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAFC378(uint64_t a1)
{
  sub_1DDA30DE8(a1);
  if (!*(void *)(a1 + 24))
  {
    (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v37, a1);
    sub_1DDAC82D4((void **)&v37, &v39);
    if (v38) {
      sub_1DDA18310(v38);
    }
    if (v39)
    {
      (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t))(*(void *)a1 + 2888))(&v37, a1);
      if ((unint64_t)((char *)v38 - (char *)v37) < 5) {
        int v2 = (*(uint64_t (**)(void *))(*(void *)v39 + 816))(v39);
      }
      else {
        int v2 = HIDWORD(v37->__vftable);
      }
      switch(v2)
      {
        case 1:
        case 3:
        case 4:
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v39 + 384))(&v34);
          *(void *)&long long v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
          uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
          *(void *)&long long v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
          *((void *)&v32 + 1) = v3;
          int v31 = (*(uint64_t (**)(void *))(*(void *)v39 + 520))(v39);
          uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v39 + 800))(v39);
          sub_1DDAFEBF8(&v34, (unint64_t *)&v29, &v33, &v32, &v31, &v30, &v36);
          long long v4 = v36;
          long long v36 = 0uLL;
          char v5 = *(std::__shared_weak_count **)(a1 + 32);
          *(_OWORD *)(a1 + 24) = v4;
          if (v5)
          {
            sub_1DDA18310(v5);
            if (*((void *)&v36 + 1)) {
              sub_1DDA18310(*((std::__shared_weak_count **)&v36 + 1));
            }
          }
          uint64_t v6 = v35;
          if (v35) {
            goto LABEL_65;
          }
          goto LABEL_66;
        case 2:
          int v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 576))(a1);
          if (v20 == 12)
          {
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v32, a1);
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v32 + 384))(&v34);
            uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
            uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
            *(void *)&long long v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
            *((void *)&v29 + 1) = v24;
            sub_1DDAEC818(&v34, (unint64_t *)&v33, &v30, &v29, &v36);
            if (v35) {
              sub_1DDA18310(v35);
            }
            if (*((void *)&v32 + 1)) {
              sub_1DDA18310(*((std::__shared_weak_count **)&v32 + 1));
            }
            goto LABEL_59;
          }
          if (v20 == 14) {
            goto LABEL_47;
          }
          goto LABEL_66;
        case 5:
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v32, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v32 + 384))(&v34);
          uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
          *(void *)&long long v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
          *((void *)&v29 + 1) = v12;
          sub_1DDAFF1EC(&v34, (unint64_t *)&v33, &v30, &v29, &v36);
          goto LABEL_48;
        case 6:
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v32, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v32 + 384))(&v34);
          uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
          *(void *)&long long v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
          *((void *)&v29 + 1) = v13;
          sub_1DDAFEDD4(&v34, (unint64_t *)&v33, &v30, &v29, &v36);
          if (v35) {
            sub_1DDA18310(v35);
          }
          if (*((void *)&v32 + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&v32 + 1));
          }
          uint64_t v14 = v36;
          int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2976))(a1);
          sub_1DDAB4274(v14, v15);
          sub_1DDAB426C(v36, 0);
          if (v38 != v37)
          {
            int v10 = (int)(12 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1)) / 8;
            int v11 = (int)v37->__vftable;
            if (v10 % SLODWORD(v37->__vftable)) {
              goto LABEL_23;
            }
          }
          goto LABEL_60;
        case 7:
LABEL_47:
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v32, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v32 + 384))(&v34);
          uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
          *(void *)&long long v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
          *((void *)&v29 + 1) = v21;
          sub_1DDAEC784(&v34, (unint64_t *)&v33, &v30, &v29, &v36);
LABEL_48:
          long long v22 = v36;
          long long v36 = 0uLL;
          long long v23 = *(std::__shared_weak_count **)(a1 + 32);
          *(_OWORD *)(a1 + 24) = v22;
          if (v23)
          {
            sub_1DDA18310(v23);
            if (*((void *)&v36 + 1)) {
              sub_1DDA18310(*((std::__shared_weak_count **)&v36 + 1));
            }
          }
          if (v35) {
            sub_1DDA18310(v35);
          }
          uint64_t v6 = (std::__shared_weak_count *)*((void *)&v32 + 1);
          if (!*((void *)&v32 + 1)) {
            goto LABEL_66;
          }
          goto LABEL_65;
        case 8:
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v32, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v32 + 384))(&v34);
          uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
          *(void *)&long long v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
          *((void *)&v29 + 1) = v16;
          int v31 = 8;
          sub_1DDAFF024(&v34, (unint64_t *)&v33, &v30, &v29, &v31, &v36);
          long long v17 = v36;
          long long v36 = 0uLL;
          uint64_t v18 = *(std::__shared_weak_count **)(a1 + 32);
          *(_OWORD *)(a1 + 24) = v17;
          if (v18)
          {
            sub_1DDA18310(v18);
            if (*((void *)&v36 + 1)) {
              sub_1DDA18310(*((std::__shared_weak_count **)&v36 + 1));
            }
          }
          if (v35) {
            sub_1DDA18310(v35);
          }
          if (*((void *)&v32 + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&v32 + 1));
          }
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 48))(*(void *)(a1 + 24), 3);
          goto LABEL_66;
        case 9:
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v32, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v32 + 384))(&v34);
          uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
          *(void *)&long long v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
          *((void *)&v29 + 1) = v19;
          sub_1DDAEC818(&v34, (unint64_t *)&v33, &v30, &v29, &v36);
          if (v35) {
            sub_1DDA18310(v35);
          }
          if (*((void *)&v32 + 1)) {
            sub_1DDA18310(*((std::__shared_weak_count **)&v32 + 1));
          }
LABEL_59:
          uint64_t v25 = v36;
          int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2976))(a1);
          sub_1DDAB4274(v25, v26);
          sub_1DDAB426C(v36, 0);
          goto LABEL_60;
        case 10:
          goto LABEL_17;
        case 11:
        case 12:
          goto LABEL_66;
        case 13:
        case 14:
          uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          if (!v6) {
            goto LABEL_66;
          }
          goto LABEL_65;
        default:
          if (v2 == 100006)
          {
LABEL_17:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v32, a1);
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v32 + 384))(&v34);
            uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
            uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
            *(void *)&long long v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
            *((void *)&v29 + 1) = v7;
            sub_1DDAFEE68(&v34, (unint64_t *)&v33, &v30, &v29, &v36);
            if (v35) {
              sub_1DDA18310(v35);
            }
            if (*((void *)&v32 + 1)) {
              sub_1DDA18310(*((std::__shared_weak_count **)&v32 + 1));
            }
            uint64_t v8 = v36;
            int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2976))(a1);
            sub_1DDAB4274(v8, v9);
            sub_1DDAB426C(v36, 0);
            if (v38 != v37)
            {
              int v10 = (int)(14 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1)) / 8;
              int v11 = (int)v37->__vftable;
              if (v10 % SLODWORD(v37->__vftable)) {
LABEL_23:
              }
                sub_1DDAB426C(v36, ((v11 + v10) & -v11) - v10);
            }
LABEL_60:
            long long v27 = v36;
            if (*((void *)&v36 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            long long v28 = *(std::__shared_weak_count **)(a1 + 32);
            *(_OWORD *)(a1 + 24) = v27;
            if (v28) {
              sub_1DDA18310(v28);
            }
            uint64_t v6 = (std::__shared_weak_count *)*((void *)&v36 + 1);
            if (*((void *)&v36 + 1)) {
LABEL_65:
            }
              sub_1DDA18310(v6);
          }
LABEL_66:
          if (v37)
          {
            int v38 = v37;
            operator delete(v37);
          }
          break;
      }
    }
    if (v40) {
      sub_1DDA18310(v40);
    }
  }
}

void sub_1DDAFD2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20)
{
  if (a18) {
    sub_1DDA18310(a18);
  }
  if (a15) {
    sub_1DDA18310(a15);
  }
  long long v22 = *(void **)(v20 - 64);
  if (v22)
  {
    *(void *)(v20 - 56) = v22;
    operator delete(v22);
  }
  long long v23 = *(std::__shared_weak_count **)(v20 - 32);
  if (v23) {
    sub_1DDA18310(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAFD46C(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v3);
  sub_1DDAC82D4(&v3, &v5);
  if (v4) {
    sub_1DDA18310(v4);
  }
  if (v5) {
    uint64_t v1 = (*(uint64_t (**)(void *))(*(void *)v5 + 792))(v5);
  }
  else {
    uint64_t v1 = 0;
  }
  if (v6) {
    sub_1DDA18310(v6);
  }
  return v1;
}

void sub_1DDAFD520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAFD538()
{
  return 1;
}

uint64_t sub_1DDAFD540(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v17);
  int v2 = v17;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE");
  uint64_t v3 = (*(uint64_t (**)(void *, void **))(*(void *)v2 + 264))(v2, __p);
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  if (v18) {
    sub_1DDA18310(v18);
  }
  if (!v3)
  {
    uint64_t v3 = sub_1DDA2DA38(a1);
    if (!v3)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v17, a1);
      long long v4 = v17;
      sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:ISOInfo");
      uint64_t v3 = (*(uint64_t (**)(void *, void **))(*(void *)v4 + 264))(v4, __p);
      if ((char)v21 < 0) {
        operator delete(__p[0]);
      }
      if (v18) {
        sub_1DDA18310(v18);
      }
      if (!v3)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 224))(__p, a1);
        unint64_t v5 = v21;
        if ((v21 & 0x80u) != 0) {
          unint64_t v5 = (unint64_t)__p[1];
        }
        if (v5 != 13) {
          goto LABEL_21;
        }
        uint64_t v6 = (void **)__p[0];
        if ((v21 & 0x80u) == 0) {
          uint64_t v6 = __p;
        }
        uint64_t v7 = *v6;
        uint64_t v8 = *(uint64_t *)((char *)v6 + 5);
        if (v7 == (void *)0x205849504C4F4F43 && v8 == 0x3030303750205849)
        {
          BOOL v15 = 1;
          if ((v21 & 0x80) == 0)
          {
LABEL_37:
            if (v15) {
              return 6400;
            }
            else {
              return 0;
            }
          }
        }
        else
        {
LABEL_21:
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 224))(&v17, a1);
          unint64_t v10 = v19;
          if ((v19 & 0x80u) != 0) {
            unint64_t v10 = (unint64_t)v18;
          }
          if (v10 == 13)
          {
            int v11 = (uint64_t *)v17;
            if ((v19 & 0x80u) == 0) {
              int v11 = (uint64_t *)&v17;
            }
            uint64_t v12 = *v11;
            uint64_t v13 = *(uint64_t *)((char *)v11 + 5);
            BOOL v15 = v12 == 0x205849504C4F4F43 && v13 == 0x3030313750205849;
          }
          else
          {
            BOOL v15 = 0;
          }
          if ((char)v19 < 0) {
            operator delete(v17);
          }
          if ((v21 & 0x80) == 0) {
            goto LABEL_37;
          }
        }
        operator delete(__p[0]);
        goto LABEL_37;
      }
    }
  }
  return v3;
}

void sub_1DDAFD7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAFD84C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v8);
  uint64_t v2 = v8;
  uint64_t v3 = off_1EAB8A9C0[0];
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = sub_1DDAFD964;
  v7[3] = &unk_1E6D05458;
  v7[4] = a1;
  uint64_t v5 = sub_1DDACFD70(v2, v3, v4, v7);
  if (v9) {
    sub_1DDA18310(v9);
  }
  return v5;
}

void sub_1DDAFD94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDAFD964(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 512))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDAFDA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDAFDA1C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_msgSend_isEqualToString_(v4, v5, @"highSpeedCropMode", v6, v7))
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2968))(a1);
    objc_msgSend_numberWithInt_(NSNumber, v12, v11, v13, v14);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
LABEL_26:
    uint64_t v2 = v15;
    goto LABEL_27;
  }
  if (objc_msgSend_isEqualToString_(v4, v8, @"isMultipleExposure", v9, v10))
  {
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2952))(a1);
    uint64_t v20 = (void *)MEMORY[0x1E4F1CC28];
    if (v19) {
      uint64_t v20 = (void *)MEMORY[0x1E4F1CC38];
    }
    id v15 = v20;
    goto LABEL_26;
  }
  if (!objc_msgSend_isEqualToString_(v4, v16, @"NEFCompression", v17, v18))
  {
    if (objc_msgSend_isEqualToString_(v4, v21, @"sensorBitDepth", v22, v23))
    {
      int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
      uint64_t v31 = *(void *)a1;
      if (v30)
      {
        int v35 = (*(__int16 (**)(uint64_t))(v31 + 864))(a1);
        if (v35 < 0)
        {
          unsigned __int16 v36 = 16;
        }
        else
        {
          unsigned __int16 v36 = 16;
          unsigned int v37 = 0x8000;
          do
          {
            if (!--v36) {
              break;
            }
            int v38 = (unsigned __int16)v35 & (v37 >> 1);
            v37 >>= 1;
          }
          while (!v38);
        }
      }
      else
      {
        unsigned __int16 v36 = (*(uint64_t (**)(uint64_t))(v31 + 576))(a1);
      }
      objc_msgSend_numberWithUnsignedShort_(NSNumber, v32, v36, v33, v34);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v40, a1);
  sub_1DDAC82D4(&v40, &v42);
  if (v41) {
    sub_1DDA18310(v41);
  }
  uint64_t v24 = v42;
  if (v42)
  {
    uint64_t v25 = NSNumber;
    uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v42 + 816))(v42);
    uint64_t v2 = objc_msgSend_numberWithInt_(v25, v27, v26, v28, v29);
  }
  if (v43) {
    sub_1DDA18310(v43);
  }
  if (!v24)
  {
LABEL_22:
    sub_1DDBCE65C(a1, v4);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_26;
  }
LABEL_27:

  return v2;
}

void sub_1DDAFDCE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAFDD18(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v3);
  sub_1DDAC82D4(&v3, &v5);
  if (v4) {
    sub_1DDA18310(v4);
  }
  if (v5) {
    uint64_t v1 = (*(uint64_t (**)(void *))(*(void *)v5 + 784))(v5);
  }
  else {
    uint64_t v1 = 0;
  }
  if (v6) {
    sub_1DDA18310(v6);
  }
  return v1;
}

void sub_1DDAFDDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFDDE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 2200))(v29);
  if ((v30 & 0x80u) == 0) {
    unint64_t v4 = v30;
  }
  else {
    unint64_t v4 = (unint64_t)v29[1];
  }
  if (v4 == 24)
  {
    if ((v30 & 0x80u) == 0) {
      uint64_t v11 = v29;
    }
    else {
      uint64_t v11 = (void **)v29[0];
    }
    if (memcmp(v11, "IFD0:EXIF:MAKERNOTE:0x14", 0x18uLL)) {
      goto LABEL_29;
    }
    uint64_t v24 = &unk_1F39665D8;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&__p, a1);
    uint64_t v12 = __p;
    sub_1DDA1A880(v26, "IFD0:EXIF:MAKERNOTE:0x14");
    (*(void (**)(void *, void **, void **, uint64_t))(*(void *)v12 + 600))(v12, v26, &v24, 3);
    goto LABEL_36;
  }
  if (v4 == 10)
  {
    if ((v30 & 0x80u) == 0) {
      uint64_t v13 = v29;
    }
    else {
      uint64_t v13 = (void **)v29[0];
    }
    if (memcmp(v13, "encrypted2", 0xAuLL))
    {
LABEL_29:
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2192))(a1);
      LODWORD(v26[1]) = 0;
      HIDWORD(v26[1]) = v14;
      v26[0] = &unk_1F396F638;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&__p, a1);
      (*(void (**)(void *, void **, void **, uint64_t))(*(void *)__p + 600))(__p, v29, v26, 3);
LABEL_30:
      if (v22) {
        sub_1DDA18310(v22);
      }
      goto LABEL_32;
    }
    uint64_t v24 = &unk_1F39665D8;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&__p, a1);
    id v15 = __p;
    sub_1DDA1A880(v26, "encrypted2");
    (*(void (**)(void *, void **, void **, uint64_t))(*(void *)v15 + 600))(v15, v26, &v24, 3);
LABEL_36:
    if (SHIBYTE(v27) < 0) {
      operator delete(v26[0]);
    }
    goto LABEL_30;
  }
  if (v4 != 9) {
    goto LABEL_29;
  }
  uint64_t v5 = v29;
  if ((v30 & 0x80u) != 0) {
    uint64_t v5 = (void **)v29[0];
  }
  uint64_t v6 = *v5;
  int v7 = *((unsigned __int8 *)v5 + 8);
  if (v6 != (void *)0x6574707972636E65 || v7 != 100) {
    goto LABEL_29;
  }
  uint64_t v28 = &unk_1F39665D8;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v24, a1);
  uint64_t v9 = v24;
  sub_1DDA1A880(&__p, "encrypted");
  (*(void (**)(void **__return_ptr, void *, void **, void **, uint64_t))(*(void *)v9 + 600))(v26, v9, &__p, &v28, 3);
  if ((char)v23 < 0) {
    operator delete(__p);
  }
  if (v25) {
    sub_1DDA18310(v25);
  }
  uint64_t v10 = v26[1];
  if (v26[1] == v26[0])
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2208))(&__p, a1);
    unint64_t v16 = v23;
    unsigned __int8 v17 = v23;
    if ((v23 & 0x80u) != 0) {
      unint64_t v16 = (unint64_t)v22;
    }
    if (v16)
    {
      int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2192))(a1);
      LODWORD(v25) = 0;
      HIDWORD(v25) = v18;
      uint64_t v24 = &unk_1F396F638;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v19, a1);
      (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v19 + 600))(v19, &__p, &v24, 3);
      if (v20) {
        sub_1DDA18310(v20);
      }
      unsigned __int8 v17 = v23;
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)v26;
      *(void *)(a2 + 16) = v27;
      v26[1] = 0;
      uint64_t v27 = 0;
      v26[0] = 0;
    }
    if ((v17 & 0x80) != 0) {
      operator delete(__p);
    }
    if (v26[0])
    {
      v26[1] = v26[0];
      operator delete(v26[0]);
    }
  }
  else
  {
    *(void **)a2 = v26[0];
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 16) = v27;
  }
LABEL_32:
  if ((char)v30 < 0) {
    operator delete(v29[0]);
  }
}

void sub_1DDAFE350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFE424(uint64_t a1@<X0>, void **a2@<X8>)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 960))(a1);
  if (v4 == 11)
  {
LABEL_10:
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 72))(&__p, a1);
    uint64_t v8 = __p;
    uint64_t v9 = off_1EAB8A908[0];
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = sub_1DDAFE69C;
    void v11[3] = &unk_1E6D05198;
    v11[4] = a1;
    sub_1DDAB6440((uint64_t)v8, v9, v10, v11, a2);
    if (v13) {
      sub_1DDA18310(v13);
    }
    return;
  }
  if (v4 == 10)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v15, a1);
    uint64_t v5 = v15;
    sub_1DDA1A880(&__p, "IFD0:EXIF:MAKERNOTE:BLACKLEVELS");
    char v6 = (*(uint64_t (**)(uint64_t, void **, void **, void))(*(void *)v5 + 248))(v5, &__p, a2, 0);
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v16) {
      sub_1DDA18310(v16);
    }
    if ((v6 & 1) == 0)
    {
      int v7 = *a2;
      if (*a2)
      {
        a2[1] = v7;
        operator delete(v7);
      }
      goto LABEL_10;
    }
  }
  else
  {
    sub_1DDBCFB0C(a1, a2);
  }
}

void sub_1DDAFE640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 40);
  if (v22) {
    sub_1DDA18310(v22);
  }
  unsigned __int8 v23 = *(void **)v19;
  if (*(void *)v19)
  {
    *(void *)(v19 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDAFE69C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_1DDAFE6A4(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v6);
  sub_1DDAC82D4(&v6, &v8);
  if (v7) {
    sub_1DDA18310(v7);
  }
  if (v8
    && (*(unsigned int (**)(void *))(*(void *)v8 + 848))(v8)
    && (*(unsigned int (**)(void *))(*(void *)v8 + 840))(v8)
    && ((*(unsigned int (**)(void *))(*(void *)v8 + 856))(v8)
     && (*(unsigned int (**)(void *))(*(void *)v8 + 856))(v8) != 2
     || (uint64_t v2 = v8,
         uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2776))(a1),
         ((*(uint64_t (**)(void *, uint64_t))(*(void *)v2 + 936))(v2, v3) & 1) != 0)))
  {
    uint64_t v4 = 9;
  }
  else
  {
    uint64_t v4 = sub_1DDAC8DA8(a1);
  }
  if (v9) {
    sub_1DDA18310(v9);
  }
  return v4;
}

void sub_1DDAFE874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDAFE88C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 2808))(a1) == 9;
}

uint64_t sub_1DDAFE8D4(uint64_t a1)
{
  if (sub_1DDA2E588(a1)) {
    return 0;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1)) {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 2800);

  return v3(a1);
}

uint64_t sub_1DDAFE984(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v6);
  sub_1DDAC82D4(&v6, &v8);
  if (v7) {
    sub_1DDA18310(v7);
  }
  if (v8
    && ((*(unsigned int (**)(void *))(*(void *)v8 + 904))(v8)
     && (*(unsigned int (**)(void *))(*(void *)v8 + 896))(v8)
     && (*(unsigned int (**)(void *))(*(void *)v8 + 896))(v8) != 2
     || (uint64_t v2 = v8) != 0
     && (uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2776))(a1),
         ((*(uint64_t (**)(void *, uint64_t))(*(void *)v2 + 960))(v2, v3) & 1) != 0)))
  {
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v4 = sub_1DDAC8F4C(a1);
  }
  if (v9) {
    sub_1DDA18310(v9);
  }
  return v4;
}

void sub_1DDAFEB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDAFEB3C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 2832))(a1) == 2;
}

uint64_t sub_1DDAFEB84(uint64_t a1)
{
  if (sub_1DDA2E590(a1)) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 320);

  return v3(a1);
}

void sub_1DDAFEBF8(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, int *a5@<X5>, uint64_t *a6@<X6>, void *a7@<X8>)
{
  char v14 = operator new(0xE8uLL);
  sub_1DDAFECA4((uint64_t)v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;

  sub_1DDA1AF34((uint64_t)a7, v14 + 4, (uint64_t)(v14 + 3));
}

void sub_1DDAFEC90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAFECA4(uint64_t a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5, int *a6, uint64_t *a7)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3975DB0;
  int v8 = *a6;
  uint64_t v9 = *a7;
  sub_1DDAA58A8(a1 + 24, a2, *a3, a4, a5);
  *(void *)(a1 + 24) = &unk_1F3962F68;
  *(void *)(a1 + 216) = v9;
  *(_DWORD *)(a1 + 224) = v8;
  return a1;
}

void sub_1DDAFED24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAFED38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3975DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAFED58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3975DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAFEDAC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAFEDD4(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0xE8uLL);
  sub_1DDA88E54(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAFEE54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAFEE68(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0xE8uLL);
  sub_1DDAFEEFC(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAFEEE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAFEEFC(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3975E00;
  sub_1DDAA58A8((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1F398EDC0;
  *(void *)((char *)a1 + 212) = 0x100000000;
  a1[28] = 0;
  return a1;
}

void sub_1DDAFEF74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAFEF88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3975E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAFEFA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3975E00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAFEFFC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAFF024(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  uint64_t v12 = operator new(0xE0uLL);
  sub_1DDAFF0C8((uint64_t)v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;

  sub_1DDA1AF34((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1DDAFF0B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDAFF0C8(uint64_t a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5, int *a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F3975E50;
  int v7 = *a6;
  sub_1DDAA58A8(a1 + 24, a2, *a3, a4, a5);
  *(void *)(a1 + 24) = &unk_1F3977D88;
  *(_DWORD *)(a1 + 212) = v7;
  *(void *)(a1 + 216) = 0;
  return a1;
}

void sub_1DDAFF13C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAFF150(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3975E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAFF170(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3975E50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAFF1C4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1DDAFF1EC(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0xD8uLL);
  sub_1DDAFF280(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDAFF26C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDAFF280(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3975EA0;
  sub_1DDAA58A8((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1F397A4B0;
  return a1;
}

void sub_1DDAFF2E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAFF2FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3975EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDAFF31C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F3975EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDAFF370(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

char *sub_1DDAFF398(void *a1, uint64_t a2)
{
  uint64_t result = sub_1DDB14124((uint64_t)a1, a2);
  uint64_t v5 = a1[24];
  uint64_t v4 = a1[25];
  unint64_t v6 = (v4 - v5) >> 1;
  uint64_t v7 = a1[36];
  uint64_t v8 = a1[37] - v7;
  if (v6 > v8 >> 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v4 != v5)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v8 >> 1;
    do
    {
      *(_WORD *)(v7 + 2 * v9) = *(_WORD *)(v5 + 2 * v9);
      ++v9;
    }
    while (v6 > v9);
    uint64_t v11 = v9;
    if (v10 > v9)
    {
      __int16 v12 = *(_WORD *)(v7 + 2 * v9 - 2);
      unsigned int v13 = v9 + 1;
      do
      {
        *(_WORD *)(v7 + 2 * v11) = v12;
        uint64_t v11 = v13;
      }
      while (v10 > v13++);
    }
  }
  return result;
}

void sub_1DDAFF460(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDAFF474(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int *a6, uint64_t a7, int *a8)
{
  v635[1] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1) != 1
    || (int v10 = a8[2], v10 >= 32000)
    || (int v11 = a8[3], v11 >= 32000))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v13 = *a6;
  int v12 = a6[1];
  int v14 = a8[1];
  uint64_t v15 = *a8;
  if (v12 <= v14) {
    signed int v16 = a8[1];
  }
  else {
    signed int v16 = a6[1];
  }
  int v17 = a6[2];
  int v18 = a6[3] + v12;
  int v19 = v14 + v11;
  if (v19 >= v18) {
    int v19 = v18;
  }
  unint64_t v20 = v19;
  if (v13 <= (int)v15) {
    int v21 = *a8;
  }
  else {
    int v21 = *a6;
  }
  if ((int)v15 + v10 >= v17 + v13) {
    int v22 = v17 + v13;
  }
  else {
    int v22 = v15 + v10;
  }
  uint64_t v23 = *(unsigned __int16 *)(a1 + 280);
  uint64_t v24 = *(unsigned __int16 *)(a1 + 220);
  uint64_t v630 = (uint64_t)(int)(v10 * v23 * v24 + (v10 * (int)v23 * (int)v24 < 0 ? 7 : 0)) >> 3;
  sub_1DDA1AB9C(v634, (v19 - (uint64_t)v16) * v630);
  unint64_t v631 = v21;
  unint64_t v628 = v20;
  unint64_t v624 = v16;
  uint64_t v25 = a1;
  if (v16 < v20)
  {
    uint64_t v26 = 0;
    unint64_t v27 = ((unint64_t)((v21 - v15) * v23 * v24) >> 3) + a4;
    unint64_t v28 = v624;
    do
    {
      uint64_t v29 = *(void *)(v25 + 24);
      v635[0] = v27 + (v28 - a8[1]) * v630;
      sub_1DDA18488(&v633, v635);
      (*(void (**)(uint64_t, int *, void))(*(void *)v29 + 40))(v29, &v633, 0);
      (*(void (**)(void, char *, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), (char *)v634[0] + v26, v630);
      ++v28;
      v26 += v630;
      uint64_t v25 = a1;
    }
    while (v28 < v20);
  }
  unint64_t v632 = v22;
  double v623 = a8;
  if (*(unsigned char *)(v25 + 312)
    && (v30 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 224))(v25), uint64_t v25 = a1, v30 == 1))
  {
    if (v624 < v20)
    {
      if (((v22 - (uint64_t)v21) & 0x8000000000000000) == 0)
      {
        uint64_t v619 = 0;
        uint64_t v618 = 4 * (v22 - (uint64_t)v21);
        uint64_t v31 = 0x1FFFEu;
        unint64_t v32 = v624;
        while (1)
        {
          uint64_t v33 = (_WORD *)(a2 + (v32 - a6[1]) * a7 + 2 * (v631 - *a6));
          if ((unint64_t)&v33[v618] > a2 + 2 * a3) {
            break;
          }
          unint64_t v621 = v32;
          uint64_t v34 = (char *)v634[0];
          int v35 = (unsigned __int8 *)v634[0] + (v32 - v624) * v630;
          switch(*(_WORD *)(v25 + 280))
          {
            case 8:
              if ((v623[2] & 3) != 0) {
                goto LABEL_306;
              }
              unint64_t v36 = v631;
              if (v631 < v632)
              {
                do
                {
                  uint64_t v37 = *v35;
                  uint64_t v38 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    uint64_t v25 = a1;
                  }
                  LOWORD(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v38 + 2 * v37));
                  uint64_t v39 = v35[1];
                  uint64_t v40 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    uint64_t v25 = a1;
                  }
                  WORD1(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v40 + 2 * v39));
                  uint64_t v41 = v35[2];
                  uint64_t v42 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    uint64_t v25 = a1;
                  }
                  WORD2(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v42 + 2 * v41));
                  uint64_t v43 = v35[3];
                  uint64_t v44 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    uint64_t v25 = a1;
                  }
                  uint64_t v45 = 0;
                  HIWORD(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v44 + 2 * v43));
                  do
                  {
                    _WORD *v33 = *(_WORD *)((char *)v635 + v45);
                    v33[1] = *(_WORD *)((char *)v635 + v45);
                    v33[2] = *(_WORD *)((char *)v635 + v45);
                    if (qword_1EAB6A8E0 != -1)
                    {
                      dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                      uint64_t v25 = a1;
                    }
                    uint64_t v46 = v33 + 4;
                    v33[3] = *(_WORD *)((char *)xmmword_1EAB6A8E8 + v31);
                    v45 += 2;
                    v33 += 4;
                  }
                  while (v45 != 8);
                  v36 += 4;
                  v35 += 4;
                  uint64_t v33 = v46;
                }
                while (v36 < v632);
              }
              break;
            case 0xA:
              if ((v623[2] & 3) != 0) {
                goto LABEL_306;
              }
              unint64_t v58 = v631;
              if (v631 < v632)
              {
                do
                {
                  int v59 = *v35;
                  unsigned int v60 = v35[1];
                  unsigned int v61 = v35[2];
                  unsigned int v62 = v35[3];
                  int v63 = v35[4];
                  uint64_t v64 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    int v502 = v35[4];
                    unsigned int v554 = v35[3];
                    unsigned int v525 = v35[2];
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    unsigned int v61 = v525;
                    unsigned int v62 = v554;
                    int v63 = v502;
                    uint64_t v25 = a1;
                  }
                  LOWORD(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8
                                    + *(unsigned __int16 *)(v64 + 2 * ((v60 >> 6) | (4 * v59))));
                  uint64_t v65 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    int v70 = v63;
                    unsigned int v555 = v62;
                    unsigned int v526 = v61;
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    unsigned int v61 = v526;
                    unsigned int v62 = v555;
                    int v63 = v70;
                    uint64_t v25 = a1;
                  }
                  WORD1(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8
                                   + *(unsigned __int16 *)(v65 + 2 * ((v61 >> 4) & 0xFFFFFC0F | (16 * (v60 & 0x3F)))));
                  uint64_t v66 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    int v71 = v63;
                    unsigned int v556 = v62;
                    char v72 = v61;
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    LOBYTE(v61) = v72;
                    unsigned int v62 = v556;
                    int v63 = v71;
                    uint64_t v25 = a1;
                  }
                  WORD2(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8
                                   + *(unsigned __int16 *)(v66 + 2 * ((v62 >> 2) & 0xFFFFFC3F | ((v61 & 0xF) << 6))));
                  uint64_t v67 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    int v73 = v63;
                    char v74 = v62;
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    LOBYTE(v62) = v74;
                    int v63 = v73;
                    uint64_t v25 = a1;
                  }
                  uint64_t v68 = 0;
                  v35 += 5;
                  HIWORD(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8
                                    + *(unsigned __int16 *)(v67 + 2 * (v63 & 0xFFFFFCFF | ((v62 & 3) << 8))));
                  do
                  {
                    _WORD *v33 = *(_WORD *)((char *)v635 + v68);
                    v33[1] = *(_WORD *)((char *)v635 + v68);
                    v33[2] = *(_WORD *)((char *)v635 + v68);
                    if (qword_1EAB6A8E0 != -1)
                    {
                      dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                      uint64_t v25 = a1;
                    }
                    int v69 = v33 + 4;
                    v33[3] = *(_WORD *)((char *)xmmword_1EAB6A8E8 + v31);
                    v68 += 2;
                    v33 += 4;
                  }
                  while (v68 != 8);
                  v58 += 4;
                  uint64_t v33 = v69;
                }
                while (v58 < v632);
              }
              break;
            case 0xC:
              if (v623[2]) {
                goto LABEL_306;
              }
              unint64_t v47 = v631;
              if (v631 < v632)
              {
                do
                {
                  int v48 = *v35;
                  unsigned int v49 = v35[1];
                  int v50 = v35[2];
                  uint64_t v51 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    unsigned int v553 = v35[1];
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    unsigned int v49 = v553;
                    uint64_t v25 = a1;
                  }
                  LOWORD(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8
                                    + *(unsigned __int16 *)(v51 + 2 * ((v49 >> 4) | (16 * v48))));
                  uint64_t v52 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    char v57 = v49;
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    LOBYTE(v49) = v57;
                    uint64_t v25 = a1;
                  }
                  uint64_t v53 = 0;
                  v35 += 3;
                  WORD1(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8
                                   + *(unsigned __int16 *)(v52 + 2 * (v50 & 0xFFFFF0FF | ((v49 & 0xF) << 8))));
                  char v54 = 1;
                  do
                  {
                    char v55 = v54;
                    _WORD *v33 = *((_WORD *)v635 + v53);
                    v33[1] = *((_WORD *)v635 + v53);
                    v33[2] = *((_WORD *)v635 + v53);
                    if (qword_1EAB6A8E0 != -1)
                    {
                      dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                      uint64_t v25 = a1;
                    }
                    char v54 = 0;
                    float v56 = v33 + 4;
                    v33[3] = *(_WORD *)((char *)xmmword_1EAB6A8E8 + v31);
                    uint64_t v53 = 1;
                    v33 += 4;
                  }
                  while ((v55 & 1) != 0);
                  v47 += 2;
                  uint64_t v33 = v56;
                }
                while (v47 < v632);
              }
              break;
            case 0xE:
              if ((v623[2] & 3) != 0) {
                goto LABEL_306;
              }
              unint64_t v75 = v631;
              if (v631 < v632)
              {
                do
                {
                  int v76 = *v35;
                  unsigned int v77 = v35[1];
                  int v78 = v35[2];
                  unsigned int v79 = v35[3];
                  int v80 = v35[4];
                  unsigned int v81 = v35[5];
                  int v82 = v35[6];
                  uint64_t v83 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    int v463 = v35[6];
                    unsigned int v557 = v35[5];
                    unsigned int v503 = v35[3];
                    int v527 = v35[4];
                    int v481 = v35[2];
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    int v78 = v481;
                    int v80 = v527;
                    unsigned int v79 = v503;
                    unsigned int v81 = v557;
                    int v82 = v463;
                    uint64_t v25 = a1;
                  }
                  LOWORD(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8
                                    + *(unsigned __int16 *)(v83 + 2 * ((v77 >> 2) | (v76 << 6))));
                  uint64_t v84 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    int v89 = v82;
                    unsigned int v558 = v81;
                    unsigned int v504 = v79;
                    int v528 = v80;
                    int v482 = v78;
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    int v78 = v482;
                    int v80 = v528;
                    unsigned int v79 = v504;
                    unsigned int v81 = v558;
                    int v82 = v89;
                    uint64_t v25 = a1;
                  }
                  WORD1(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8
                                   + *(unsigned __int16 *)(v84
                                                         + 2
                                                         * ((16 * v78) & 0xFFFFCFFF | ((v77 & 3) << 12) | (v79 >> 4))));
                  uint64_t v85 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    int v90 = v82;
                    unsigned int v559 = v81;
                    char v91 = v79;
                    int v529 = v80;
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    int v80 = v529;
                    LOBYTE(v79) = v91;
                    unsigned int v81 = v559;
                    int v82 = v90;
                    uint64_t v25 = a1;
                  }
                  WORD2(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8
                                   + *(unsigned __int16 *)(v85
                                                         + 2
                                                         * ((4 * v80) & 0xFFFFC3FF | ((v79 & 0xF) << 10) | (v81 >> 6))));
                  uint64_t v86 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    int v92 = v82;
                    char v93 = v81;
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    LOBYTE(v81) = v93;
                    int v82 = v92;
                    uint64_t v25 = a1;
                  }
                  uint64_t v87 = 0;
                  v35 += 7;
                  HIWORD(v635[0]) = *((_WORD *)xmmword_1EAB6A8E8
                                    + *(unsigned __int16 *)(v86 + 2 * (v82 & 0xFFFFC0FF | ((v81 & 0x3F) << 8))));
                  do
                  {
                    _WORD *v33 = *(_WORD *)((char *)v635 + v87);
                    v33[1] = *(_WORD *)((char *)v635 + v87);
                    v33[2] = *(_WORD *)((char *)v635 + v87);
                    if (qword_1EAB6A8E0 != -1)
                    {
                      dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                      uint64_t v25 = a1;
                    }
                    double v88 = v33 + 4;
                    v33[3] = *(_WORD *)((char *)xmmword_1EAB6A8E8 + v31);
                    v87 += 2;
                    v33 += 4;
                  }
                  while (v87 != 8);
                  v75 += 4;
                  uint64_t v33 = v88;
                }
                while (v75 < v632);
              }
              break;
            case 0x10:
              uint64_t v94 = v25;
              uint64_t v95 = sub_1DDAA72BC(v25);
              uint64_t v96 = sub_1DDAA72BC(v94);
              uint64_t v25 = a1;
              if (v631 < v632)
              {
                if (v95 == 1) {
                  uint64_t v97 = v619 + 1;
                }
                else {
                  uint64_t v97 = v619;
                }
                uint64_t v98 = &v34[v97];
                if (v96 == 1) {
                  uint64_t v99 = v619;
                }
                else {
                  uint64_t v99 = v619 + 1;
                }
                double v100 = &v34[v99];
                unint64_t v101 = v631;
                do
                {
                  unsigned int v103 = *v98;
                  v98 += 2;
                  uint64_t v102 = v103;
                  unsigned int v105 = *v100;
                  v100 += 2;
                  uint64_t v104 = v105;
                  uint64_t v106 = *(void *)(v25 + 288);
                  if (qword_1EAB6A8E0 != -1)
                  {
                    uint64_t v560 = v98;
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    uint64_t v98 = v560;
                    uint64_t v25 = a1;
                  }
                  __int16 v107 = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v106 + 2 * (v104 | (v102 << 8))));
                  _WORD *v33 = v107;
                  v33[1] = v107;
                  v33[2] = v107;
                  if (qword_1EAB6A8E0 != -1)
                  {
                    float v108 = v98;
                    dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
                    uint64_t v98 = v108;
                    uint64_t v25 = a1;
                  }
                  v33[3] = *(_WORD *)((char *)xmmword_1EAB6A8E8 + v31);
                  ++v101;
                  v33 += 4;
                }
                while (v101 < v632);
              }
              break;
            default:
              break;
          }
          unint64_t v32 = v621 + 1;
          v619 += v630;
          if (v621 + 1 >= v20) {
            goto LABEL_138;
          }
        }
      }
LABEL_306:
      uint64_t v396 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v396, "RawCameraException");
      __cxa_throw(v396, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    BOOL v109 = (*(unsigned int (**)(uint64_t))(*(void *)v25 + 224))(v25) != 1
        || v624 >= v20;
    uint64_t v25 = a1;
    if (!v109)
    {
      uint64_t v110 = v22 - (uint64_t)v21;
      if (((v632 - v21) & 0x8000000000000000) == 0)
      {
        uint64_t v111 = 0;
        unint64_t v112 = v624;
        while (1)
        {
          uint64_t v113 = *a6;
          unint64_t v114 = v112 - a6[1];
          if (a2 + v114 * a7 + 2 * (v631 - v113) + 2 * v110 > a2 + 2 * a3) {
            break;
          }
          float v115 = (char *)v634[0];
          float v116 = (unsigned __int8 *)v634[0] + (v112 - v624) * v630;
          switch(*(_WORD *)(v25 + 280))
          {
            case 8:
              if ((v623[2] & 3) != 0) {
                goto LABEL_304;
              }
              if (v631 < v632)
              {
                uint64_t v117 = *(void *)(v25 + 288);
                unint64_t v118 = v631;
                do
                {
                  float v119 = (_WORD *)(a2 + a7 * v114 - 2 * v113 + 2 * v118);
                  *float v119 = *(_WORD *)(v117 + 2 * *v116);
                  v119[1] = *(_WORD *)(v117 + 2 * v116[1]);
                  v119[2] = *(_WORD *)(v117 + 2 * v116[2]);
                  v119[3] = *(_WORD *)(v117 + 2 * v116[3]);
                  v118 += 4;
                  v116 += 4;
                }
                while (v118 < v632);
              }
              break;
            case 0xA:
              if ((v623[2] & 3) != 0) {
                goto LABEL_304;
              }
              if (v631 < v632)
              {
                uint64_t v125 = *(void *)(v25 + 288);
                unint64_t v126 = v631;
                do
                {
                  unsigned int v127 = (_WORD *)(a2 + a7 * v114 - 2 * v113 + 2 * v126);
                  unsigned int v128 = v116[1];
                  unsigned int v129 = v116[2];
                  unsigned int v130 = v116[3];
                  int v131 = v116[4];
                  *unsigned int v127 = *(_WORD *)(v125 + 2 * ((v128 >> 6) | (4 * *v116)));
                  v127[1] = *(_WORD *)(v125 + 2 * ((v129 >> 4) & 0xFFFFFC0F | (16 * (v128 & 0x3F))));
                  v127[2] = *(_WORD *)(v125 + 2 * ((v130 >> 2) & 0xFFFFFC3F | ((v129 & 0xF) << 6)));
                  v127[3] = *(_WORD *)(v125 + 2 * (v131 & 0xFFFFFCFF | ((v130 & 3) << 8)));
                  v126 += 4;
                  v116 += 5;
                }
                while (v126 < v632);
              }
              break;
            case 0xC:
              if (v623[2]) {
                goto LABEL_304;
              }
              if (v631 < v632)
              {
                uint64_t v120 = *(void *)(v25 + 288);
                unint64_t v121 = v631;
                do
                {
                  unsigned int v122 = (_WORD *)(a2 + a7 * v114 - 2 * v113 + 2 * v121);
                  unsigned int v123 = v116[1];
                  int v124 = v116[2];
                  *unsigned int v122 = *(_WORD *)(v120 + 2 * ((v123 >> 4) | (16 * *v116)));
                  v122[1] = *(_WORD *)(v120 + 2 * (v124 & 0xFFFFF0FF | ((v123 & 0xF) << 8)));
                  v121 += 2;
                  v116 += 3;
                }
                while (v121 < v632);
              }
              break;
            case 0xE:
              if ((v623[2] & 3) != 0) {
                goto LABEL_304;
              }
              if (v631 < v632)
              {
                uint64_t v132 = *(void *)(v25 + 288);
                unint64_t v133 = v631;
                do
                {
                  float v134 = (_WORD *)(a2 + a7 * v114 - 2 * v113 + 2 * v133);
                  unsigned int v135 = v116[1];
                  int v136 = v116[2];
                  unsigned int v137 = v116[3];
                  int v138 = v116[4];
                  unsigned int v139 = v116[5];
                  int v140 = v116[6];
                  *float v134 = *(_WORD *)(v132 + 2 * ((v135 >> 2) | (*v116 << 6)));
                  v134[1] = *(_WORD *)(v132 + 2 * ((16 * v136) & 0xFFFFCFFF | ((v135 & 3) << 12) | (v137 >> 4)));
                  v134[2] = *(_WORD *)(v132 + 2 * ((4 * v138) & 0xFFFFC3FF | ((v137 & 0xF) << 10) | (v139 >> 6)));
                  v134[3] = *(_WORD *)(v132 + 2 * (v140 & 0xFFFFC0FF | ((v139 & 0x3F) << 8)));
                  v133 += 4;
                  v116 += 7;
                }
                while (v133 < v632);
              }
              break;
            case 0x10:
              uint64_t v141 = v25;
              uint64_t v142 = sub_1DDAA72BC(v25);
              uint64_t v143 = sub_1DDAA72BC(v141);
              uint64_t v25 = a1;
              if (v631 < v632)
              {
                if (v142 == 1) {
                  uint64_t v144 = v111 + 1;
                }
                else {
                  uint64_t v144 = v111;
                }
                uint64_t v145 = *(void *)(a1 + 288);
                float v146 = &v115[v144];
                if (v143 == 1) {
                  uint64_t v147 = v111;
                }
                else {
                  uint64_t v147 = v111 + 1;
                }
                float v148 = &v115[v147];
                unint64_t v149 = v631;
                do
                {
                  unsigned int v151 = *v146;
                  v146 += 2;
                  uint64_t v150 = v151;
                  unsigned int v152 = *v148;
                  v148 += 2;
                  *(_WORD *)(a2 + a7 * v114 - 2 * v113 + 2 * v149++) = *(_WORD *)(v145 + ((2 * v152) | (v150 << 9)));
                }
                while (v149 < v632);
              }
              break;
            default:
              break;
          }
          ++v112;
          v111 += v630;
          if (v112 >= v628) {
            goto LABEL_138;
          }
        }
      }
LABEL_304:
      v394 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v394, "RawCameraException");
      __cxa_throw(v394, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
LABEL_138:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 224))(v25) != 2)
  {
    int v188 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
    uint64_t v189 = a1;
    unint64_t v190 = v632;
    if (v188 != 3) {
      goto LABEL_301;
    }
    if (!*(unsigned char *)(a1 + 312))
    {
      uint64_t v399 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v399, "RawCameraException");
      __cxa_throw(v399, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v624 >= v628) {
      goto LABEL_301;
    }
    if (((v632 - v631) & 0x8000000000000000) != 0)
    {
LABEL_307:
      v397 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v397, "RawCameraException");
      __cxa_throw(v397, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v620 = a2 + 2 * a3;
    unint64_t v191 = v624;
LABEL_179:
    uint64_t v192 = *a6;
    unint64_t v193 = v191 - a6[1];
    uint64_t v194 = (_WORD *)(a2 + v193 * a7 + 8 * (v631 - v192));
    if ((unint64_t)&v194[4 * (v632 - v631)] > v620) {
      goto LABEL_307;
    }
    unint64_t v622 = v191;
    uint64_t v195 = (unsigned __int8 *)v634[0] + (v191 - v624) * v630;
    switch(*(_WORD *)(v189 + 280))
    {
      case 8:
        unint64_t v196 = v631;
        if (v631 < v190)
        {
          do
          {
            uint64_t v197 = *v195;
            uint64_t v198 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              uint64_t v189 = a1;
            }
            *uint64_t v194 = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v198 + 2 * v197));
            uint64_t v199 = v195[1];
            uint64_t v200 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              uint64_t v189 = a1;
            }
            v194[1] = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v200 + 2 * v199));
            uint64_t v201 = v195[2];
            uint64_t v202 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              uint64_t v189 = a1;
            }
            v194[2] = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v202 + 2 * v201));
            if (qword_1EAB6A8E0 != -1)
            {
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              uint64_t v189 = a1;
            }
            v194[3] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            ++v196;
            v195 += 3;
            v194 += 4;
          }
          while (v196 < v190);
        }
        goto LABEL_300;
      case 0xA:
        if ((v623[2] & 3) != 0) {
          goto LABEL_307;
        }
        unint64_t v228 = v631;
        if (v631 < v190)
        {
          do
          {
            int v229 = *v195;
            unsigned int v230 = v195[1];
            unsigned int v231 = v195[2];
            unsigned int v232 = v195[3];
            int v233 = v195[4];
            int v234 = v195[5];
            unsigned int v235 = v195[6];
            unsigned int v236 = v195[7];
            unsigned int v237 = v195[8];
            int v238 = v195[9];
            int v239 = v195[10];
            unsigned int v240 = v195[11];
            unsigned int v241 = v195[12];
            unsigned int v242 = v195[13];
            int v243 = v195[14];
            uint64_t v244 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v483 = v195[7];
              unsigned int v435 = v195[12];
              int v448 = v195[5];
              int v425 = v195[14];
              unsigned int v563 = v195[13];
              unsigned int v592 = v195[11];
              int v464 = v195[10];
              int v531 = v195[9];
              unsigned int v505 = v195[8];
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v234 = v448;
              int v239 = v464;
              unsigned int v236 = v483;
              unsigned int v237 = v505;
              int v238 = v531;
              unsigned int v240 = v592;
              unsigned int v241 = v435;
              unsigned int v242 = v563;
              int v243 = v425;
              uint64_t v189 = a1;
            }
            *uint64_t v194 = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v244 + 2 * ((v230 >> 6) | (4 * v229))));
            uint64_t v245 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v484 = v236;
              unsigned int v436 = v241;
              int v449 = v234;
              int v426 = v243;
              unsigned int v564 = v242;
              unsigned int v593 = v240;
              int v465 = v239;
              int v532 = v238;
              unsigned int v506 = v237;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v234 = v449;
              int v239 = v465;
              unsigned int v236 = v484;
              unsigned int v237 = v506;
              int v238 = v532;
              unsigned int v240 = v593;
              unsigned int v241 = v436;
              unsigned int v242 = v564;
              int v243 = v426;
              uint64_t v189 = a1;
            }
            v194[1] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v245 + 2 * ((v231 >> 4) & 0xFFFFFC0F | (16 * (v230 & 0x3F)))));
            uint64_t v246 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v485 = v236;
              unsigned int v437 = v241;
              int v450 = v234;
              int v256 = v243;
              unsigned int v565 = v242;
              unsigned int v594 = v240;
              int v466 = v239;
              int v533 = v238;
              unsigned int v507 = v237;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v234 = v450;
              int v239 = v466;
              unsigned int v236 = v485;
              unsigned int v237 = v507;
              int v238 = v533;
              unsigned int v240 = v594;
              unsigned int v241 = v437;
              unsigned int v242 = v565;
              int v243 = v256;
              uint64_t v189 = a1;
            }
            unint64_t v190 = v632;
            v194[2] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v246 + 2 * ((v232 >> 2) & 0xFFFFFC3F | ((v231 & 0xF) << 6))));
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v486 = v236;
              unsigned int v438 = v241;
              int v451 = v234;
              int v257 = v243;
              unsigned int v566 = v242;
              unsigned int v595 = v240;
              int v467 = v239;
              int v534 = v238;
              unsigned int v508 = v237;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v234 = v451;
              int v239 = v467;
              unsigned int v236 = v486;
              unsigned int v237 = v508;
              int v238 = v534;
              unsigned int v240 = v595;
              unsigned int v241 = v438;
              unsigned int v242 = v566;
              int v243 = v257;
              uint64_t v189 = a1;
            }
            v194[3] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            uint64_t v247 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v487 = v236;
              unsigned int v439 = v241;
              int v452 = v234;
              int v427 = v243;
              unsigned int v567 = v242;
              unsigned int v596 = v240;
              int v468 = v239;
              int v535 = v238;
              unsigned int v509 = v237;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v234 = v452;
              int v239 = v468;
              unsigned int v236 = v487;
              unsigned int v237 = v509;
              int v238 = v535;
              unsigned int v240 = v596;
              unsigned int v241 = v439;
              unsigned int v242 = v567;
              int v243 = v427;
              uint64_t v189 = a1;
            }
            v194[4] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v247 + 2 * (v233 & 0xFFFFFCFF | ((v232 & 3) << 8))));
            uint64_t v248 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v488 = v236;
              int v453 = v234;
              int v469 = v239;
              int v258 = v243;
              unsigned int v568 = v242;
              unsigned int v259 = v241;
              unsigned int v597 = v240;
              int v536 = v238;
              unsigned int v510 = v237;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v234 = v453;
              int v239 = v469;
              unsigned int v236 = v488;
              unsigned int v237 = v510;
              int v238 = v536;
              unsigned int v240 = v597;
              unsigned int v241 = v259;
              unsigned int v242 = v568;
              int v243 = v258;
              uint64_t v189 = a1;
            }
            v194[5] = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v248 + 2 * ((v235 >> 6) | (4 * v234))));
            uint64_t v249 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v489 = v236;
              int v260 = v243;
              unsigned int v569 = v242;
              unsigned int v261 = v241;
              unsigned int v598 = v240;
              int v470 = v239;
              int v537 = v238;
              unsigned int v511 = v237;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              unsigned int v236 = v489;
              unsigned int v237 = v511;
              int v238 = v537;
              int v239 = v470;
              unsigned int v240 = v598;
              unsigned int v241 = v261;
              unsigned int v242 = v569;
              int v243 = v260;
              uint64_t v189 = a1;
            }
            v194[6] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v249 + 2 * ((v236 >> 4) & 0xFFFFFC0F | (16 * (v235 & 0x3F)))));
            if (qword_1EAB6A8E0 != -1)
            {
              char v490 = v236;
              int v262 = v243;
              unsigned int v570 = v242;
              unsigned int v263 = v241;
              unsigned int v599 = v240;
              int v264 = v239;
              int v538 = v238;
              unsigned int v265 = v237;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              LOBYTE(v236) = v490;
              unsigned int v237 = v265;
              int v238 = v538;
              int v239 = v264;
              unsigned int v240 = v599;
              unsigned int v241 = v263;
              unsigned int v242 = v570;
              int v243 = v262;
              uint64_t v189 = a1;
            }
            v194[7] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            uint64_t v250 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              char v491 = v236;
              int v266 = v243;
              unsigned int v571 = v242;
              unsigned int v267 = v241;
              unsigned int v600 = v240;
              int v268 = v239;
              int v539 = v238;
              unsigned int v512 = v237;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              LOBYTE(v236) = v491;
              unsigned int v237 = v512;
              int v238 = v539;
              int v239 = v268;
              unsigned int v240 = v600;
              unsigned int v241 = v267;
              unsigned int v242 = v571;
              int v243 = v266;
              uint64_t v189 = a1;
            }
            v194[8] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v250 + 2 * ((v237 >> 2) & 0xFFFFFC3F | ((v236 & 0xF) << 6))));
            uint64_t v251 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v269 = v243;
              unsigned int v572 = v242;
              unsigned int v270 = v241;
              unsigned int v601 = v240;
              int v271 = v239;
              int v540 = v238;
              char v513 = v237;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              LOBYTE(v237) = v513;
              int v238 = v540;
              int v239 = v271;
              unsigned int v240 = v601;
              unsigned int v241 = v270;
              unsigned int v242 = v572;
              int v243 = v269;
              uint64_t v189 = a1;
            }
            v194[9] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v251 + 2 * (v238 & 0xFFFFFCFF | ((v237 & 3) << 8))));
            uint64_t v252 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v272 = v243;
              unsigned int v573 = v242;
              unsigned int v273 = v241;
              unsigned int v602 = v240;
              int v274 = v239;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v239 = v274;
              unsigned int v240 = v602;
              unsigned int v241 = v273;
              unsigned int v242 = v573;
              int v243 = v272;
              uint64_t v189 = a1;
            }
            v194[10] = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v252 + 2 * ((v240 >> 6) | (4 * v239))));
            if (qword_1EAB6A8E0 != -1)
            {
              int v275 = v243;
              unsigned int v276 = v242;
              unsigned int v277 = v241;
              char v278 = v240;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              LOBYTE(v240) = v278;
              unsigned int v241 = v277;
              unsigned int v242 = v276;
              int v243 = v275;
              uint64_t v189 = a1;
            }
            v194[11] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            uint64_t v253 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v279 = v243;
              unsigned int v280 = v242;
              unsigned int v281 = v241;
              char v603 = v240;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              LOBYTE(v240) = v603;
              unsigned int v241 = v281;
              unsigned int v242 = v280;
              int v243 = v279;
              uint64_t v189 = a1;
            }
            v194[12] = *((_WORD *)xmmword_1EAB6A8E8
                       + *(unsigned __int16 *)(v253 + 2 * ((v241 >> 4) & 0xFFFFFC0F | (16 * (v240 & 0x3F)))));
            uint64_t v254 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v282 = v243;
              unsigned int v283 = v242;
              char v284 = v241;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              LOBYTE(v241) = v284;
              unsigned int v242 = v283;
              int v243 = v282;
              uint64_t v189 = a1;
            }
            v194[13] = *((_WORD *)xmmword_1EAB6A8E8
                       + *(unsigned __int16 *)(v254 + 2 * ((v242 >> 2) & 0xFFFFFC3F | ((v241 & 0xF) << 6))));
            uint64_t v255 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v285 = v243;
              char v286 = v242;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              LOBYTE(v242) = v286;
              int v243 = v285;
              uint64_t v189 = a1;
            }
            v194[14] = *((_WORD *)xmmword_1EAB6A8E8
                       + *(unsigned __int16 *)(v255 + 2 * (v243 & 0xFFFFFCFF | ((v242 & 3) << 8))));
            if (qword_1EAB6A8E0 != -1)
            {
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              uint64_t v189 = a1;
            }
            v194[15] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            v228 += 4;
            v195 += 15;
            v194 += 16;
          }
          while (v228 < v632);
        }
        goto LABEL_300;
      case 0xC:
        unint64_t v203 = v631;
        if (v631 < v190)
        {
          do
          {
            int v204 = *v195;
            unsigned int v205 = v195[1];
            int v206 = v195[2];
            int v207 = v195[3];
            unsigned int v208 = v195[4];
            int v209 = v195[5];
            int v210 = v195[6];
            unsigned int v211 = v195[7];
            int v212 = v195[8];
            uint64_t v213 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v530 = v195[7];
              int v588 = v195[6];
              int v561 = v195[3];
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v207 = v561;
              int v210 = v588;
              unsigned int v211 = v530;
              uint64_t v189 = a1;
            }
            *uint64_t v194 = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v213 + 2 * ((v205 >> 4) | (16 * v204))));
            uint64_t v214 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v219 = v211;
              int v589 = v210;
              int v562 = v207;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v207 = v562;
              int v210 = v589;
              unsigned int v211 = v219;
              uint64_t v189 = a1;
            }
            v194[1] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v214 + 2 * (v206 & 0xFFFFF0FF | ((v205 & 0xF) << 8))));
            uint64_t v215 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v220 = v211;
              int v590 = v210;
              int v221 = v207;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v207 = v221;
              int v210 = v590;
              unsigned int v211 = v220;
              uint64_t v189 = a1;
            }
            unint64_t v190 = v632;
            v194[2] = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v215 + 2 * ((v208 >> 4) | (16 * v207))));
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v222 = v211;
              int v223 = v210;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v210 = v223;
              unsigned int v211 = v222;
              uint64_t v189 = a1;
            }
            v194[3] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            uint64_t v216 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v224 = v211;
              int v591 = v210;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v210 = v591;
              unsigned int v211 = v224;
              uint64_t v189 = a1;
            }
            v194[4] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v216 + 2 * (v209 & 0xFFFFF0FF | ((v208 & 0xF) << 8))));
            uint64_t v217 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unsigned int v225 = v211;
              int v226 = v210;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v210 = v226;
              unsigned int v211 = v225;
              uint64_t v189 = a1;
            }
            v194[5] = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v217 + 2 * ((v211 >> 4) | (16 * v210))));
            uint64_t v218 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              char v227 = v211;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              LOBYTE(v211) = v227;
              uint64_t v189 = a1;
            }
            v194[6] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v218 + 2 * (v212 & 0xFFFFF0FF | ((v211 & 0xF) << 8))));
            if (qword_1EAB6A8E0 != -1)
            {
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              uint64_t v189 = a1;
            }
            v194[7] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            v203 += 2;
            v195 += 9;
            v194 += 8;
          }
          while (v203 < v632);
        }
        goto LABEL_300;
      case 0xE:
        if ((v623[2] & 3) != 0) {
          goto LABEL_307;
        }
        unint64_t v287 = v631;
        if (v631 < v190)
        {
          do
          {
            int v288 = *v195;
            unsigned int v289 = v195[1];
            int v290 = v195[2];
            unsigned int v291 = v195[3];
            int v292 = v195[4];
            unsigned int v293 = v195[5];
            int v294 = v195[6];
            int v295 = v195[7];
            unsigned int v296 = v195[8];
            int v297 = v195[9];
            unsigned int v298 = v195[10];
            int v299 = v195[11];
            unsigned int v300 = v195[12];
            int v301 = v195[13];
            int v302 = v195[14];
            unsigned int v303 = v195[15];
            int v304 = v195[16];
            unsigned int v305 = v195[17];
            int v306 = v195[18];
            unsigned int v307 = v195[19];
            int v308 = v195[20];
            uint64_t v309 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v514 = v195[14];
              int v492 = v195[13];
              unint64_t v400 = v287;
              int v604 = v195[20];
              unsigned int v401 = v195[19];
              int v403 = v195[18];
              unsigned int v541 = v195[17];
              unsigned int v574 = v195[15];
              int v407 = v195[16];
              int v412 = v195[7];
              unsigned int v454 = v195[10];
              unsigned int v471 = v195[12];
              int v440 = v195[11];
              int v418 = v195[9];
              unsigned int v428 = v195[8];
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v295 = v412;
              int v297 = v418;
              unsigned int v296 = v428;
              int v299 = v440;
              unsigned int v298 = v454;
              unsigned int v300 = v471;
              int v301 = v492;
              int v302 = v514;
              int v306 = v403;
              int v304 = v407;
              unsigned int v303 = v574;
              unsigned int v305 = v541;
              unsigned int v307 = v401;
              int v308 = v604;
              unint64_t v287 = v400;
              uint64_t v189 = a1;
            }
            *uint64_t v194 = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v309 + 2 * ((v289 >> 2) | (v288 << 6))));
            uint64_t v310 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v515 = v302;
              int v493 = v301;
              unint64_t v321 = v287;
              int v605 = v308;
              unsigned int v402 = v307;
              int v404 = v306;
              unsigned int v542 = v305;
              unsigned int v575 = v303;
              int v408 = v304;
              int v413 = v295;
              unsigned int v455 = v298;
              unsigned int v472 = v300;
              int v441 = v299;
              int v419 = v297;
              unsigned int v429 = v296;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v295 = v413;
              int v297 = v419;
              unsigned int v296 = v429;
              int v299 = v441;
              unsigned int v298 = v455;
              unsigned int v300 = v472;
              int v301 = v493;
              int v302 = v515;
              int v306 = v404;
              int v304 = v408;
              unsigned int v303 = v575;
              unsigned int v305 = v542;
              unsigned int v307 = v402;
              int v308 = v605;
              unint64_t v287 = v321;
              uint64_t v189 = a1;
            }
            v194[1] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v310 + 2 * ((16 * v290) & 0xFFFFCFFF | ((v289 & 3) << 12) | (v291 >> 4))));
            uint64_t v311 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v516 = v302;
              int v494 = v301;
              unint64_t v322 = v287;
              int v606 = v308;
              unsigned int v323 = v307;
              unsigned int v543 = v305;
              int v405 = v306;
              int v409 = v304;
              unsigned int v576 = v303;
              unsigned int v456 = v298;
              unsigned int v473 = v300;
              int v442 = v299;
              int v420 = v297;
              unsigned int v430 = v296;
              int v414 = v295;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v295 = v414;
              int v297 = v420;
              unsigned int v296 = v430;
              int v299 = v442;
              unsigned int v298 = v456;
              unsigned int v300 = v473;
              int v301 = v494;
              int v302 = v516;
              int v306 = v405;
              int v304 = v409;
              unsigned int v303 = v576;
              unsigned int v305 = v543;
              unsigned int v307 = v323;
              int v308 = v606;
              unint64_t v287 = v322;
              uint64_t v189 = a1;
            }
            unint64_t v190 = v632;
            v194[2] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v311 + 2
                                                   * ((4 * v292) & 0xFFFFC3FF | ((v291 & 0xF) << 10) | (v293 >> 6))));
            if (qword_1EAB6A8E0 != -1)
            {
              int v517 = v302;
              int v495 = v301;
              unint64_t v324 = v287;
              int v607 = v308;
              unsigned int v325 = v307;
              unsigned int v544 = v305;
              int v326 = v306;
              unsigned int v577 = v303;
              int v410 = v304;
              int v415 = v295;
              unsigned int v457 = v298;
              unsigned int v474 = v300;
              int v443 = v299;
              int v421 = v297;
              unsigned int v431 = v296;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v295 = v415;
              int v297 = v421;
              unsigned int v296 = v431;
              int v299 = v443;
              unsigned int v298 = v457;
              unsigned int v300 = v474;
              int v301 = v495;
              int v302 = v517;
              int v304 = v410;
              unsigned int v303 = v577;
              int v306 = v326;
              unsigned int v305 = v544;
              unsigned int v307 = v325;
              int v308 = v607;
              unint64_t v287 = v324;
              uint64_t v189 = a1;
            }
            v194[3] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            uint64_t v312 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v518 = v302;
              int v496 = v301;
              unint64_t v327 = v287;
              int v608 = v308;
              unsigned int v328 = v307;
              unsigned int v545 = v305;
              int v406 = v306;
              int v411 = v304;
              unsigned int v578 = v303;
              unsigned int v458 = v298;
              unsigned int v475 = v300;
              int v444 = v299;
              int v422 = v297;
              unsigned int v432 = v296;
              int v416 = v295;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v295 = v416;
              int v297 = v422;
              unsigned int v296 = v432;
              int v299 = v444;
              unsigned int v298 = v458;
              unsigned int v300 = v475;
              int v301 = v496;
              int v302 = v518;
              int v306 = v406;
              int v304 = v411;
              unsigned int v303 = v578;
              unsigned int v305 = v545;
              unsigned int v307 = v328;
              int v308 = v608;
              unint64_t v287 = v327;
              uint64_t v189 = a1;
            }
            v194[4] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v312 + 2 * (v294 & 0xFFFFC0FF | ((v293 & 0x3F) << 8))));
            uint64_t v313 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v519 = v302;
              int v497 = v301;
              unint64_t v329 = v287;
              int v609 = v308;
              unsigned int v330 = v307;
              unsigned int v546 = v305;
              int v331 = v306;
              unsigned int v579 = v303;
              int v332 = v304;
              unsigned int v459 = v298;
              unsigned int v476 = v300;
              int v445 = v299;
              int v423 = v297;
              unsigned int v433 = v296;
              int v417 = v295;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v295 = v417;
              int v297 = v423;
              unsigned int v296 = v433;
              int v299 = v445;
              unsigned int v298 = v459;
              unsigned int v300 = v476;
              int v301 = v497;
              int v302 = v519;
              int v304 = v332;
              unsigned int v303 = v579;
              int v306 = v331;
              unsigned int v305 = v546;
              unsigned int v307 = v330;
              int v308 = v609;
              unint64_t v287 = v329;
              uint64_t v189 = a1;
            }
            v194[5] = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v313 + 2 * ((v296 >> 2) | (v295 << 6))));
            uint64_t v314 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v520 = v302;
              int v498 = v301;
              unint64_t v333 = v287;
              int v610 = v308;
              unsigned int v334 = v307;
              unsigned int v547 = v305;
              int v335 = v306;
              unsigned int v580 = v303;
              int v336 = v304;
              unsigned int v460 = v298;
              unsigned int v477 = v300;
              int v446 = v299;
              int v424 = v297;
              char v434 = v296;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v297 = v424;
              LOBYTE(v296) = v434;
              int v299 = v446;
              unsigned int v298 = v460;
              unsigned int v300 = v477;
              int v301 = v498;
              int v302 = v520;
              int v304 = v336;
              unsigned int v303 = v580;
              int v306 = v335;
              unsigned int v305 = v547;
              unsigned int v307 = v334;
              int v308 = v610;
              unint64_t v287 = v333;
              uint64_t v189 = a1;
            }
            v194[6] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v314 + 2 * ((16 * v297) & 0xFFFFCFFF | ((v296 & 3) << 12) | (v298 >> 4))));
            if (qword_1EAB6A8E0 != -1)
            {
              int v521 = v302;
              int v499 = v301;
              unint64_t v337 = v287;
              int v611 = v308;
              unsigned int v338 = v307;
              unsigned int v548 = v305;
              int v339 = v306;
              unsigned int v581 = v303;
              int v340 = v304;
              char v461 = v298;
              unsigned int v478 = v300;
              int v341 = v299;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v299 = v341;
              LOBYTE(v298) = v461;
              unsigned int v300 = v478;
              int v301 = v499;
              int v302 = v521;
              int v304 = v340;
              unsigned int v303 = v581;
              int v306 = v339;
              unsigned int v305 = v548;
              unsigned int v307 = v338;
              int v308 = v611;
              unint64_t v287 = v337;
              uint64_t v189 = a1;
            }
            v194[7] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            uint64_t v315 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v522 = v302;
              int v500 = v301;
              unint64_t v342 = v287;
              int v612 = v308;
              unsigned int v343 = v307;
              unsigned int v549 = v305;
              int v344 = v306;
              unsigned int v582 = v303;
              int v345 = v304;
              char v462 = v298;
              unsigned int v479 = v300;
              int v447 = v299;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v299 = v447;
              LOBYTE(v298) = v462;
              unsigned int v300 = v479;
              int v301 = v500;
              int v302 = v522;
              int v304 = v345;
              unsigned int v303 = v582;
              int v306 = v344;
              unsigned int v305 = v549;
              unsigned int v307 = v343;
              int v308 = v612;
              unint64_t v287 = v342;
              uint64_t v189 = a1;
            }
            v194[8] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v315 + 2
                                                   * ((4 * v299) & 0xFFFFC3FF | ((v298 & 0xF) << 10) | (v300 >> 6))));
            uint64_t v316 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v523 = v302;
              int v501 = v301;
              unint64_t v346 = v287;
              int v613 = v308;
              unsigned int v347 = v307;
              unsigned int v550 = v305;
              int v348 = v306;
              unsigned int v583 = v303;
              int v349 = v304;
              char v480 = v300;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              LOBYTE(v300) = v480;
              int v301 = v501;
              int v302 = v523;
              int v304 = v349;
              unsigned int v303 = v583;
              int v306 = v348;
              unsigned int v305 = v550;
              unsigned int v307 = v347;
              int v308 = v613;
              unint64_t v287 = v346;
              uint64_t v189 = a1;
            }
            v194[9] = *((_WORD *)xmmword_1EAB6A8E8
                      + *(unsigned __int16 *)(v316 + 2 * (v301 & 0xFFFFC0FF | ((v300 & 0x3F) << 8))));
            uint64_t v317 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              int v524 = v302;
              unint64_t v350 = v287;
              int v614 = v308;
              unsigned int v351 = v307;
              unsigned int v551 = v305;
              int v352 = v306;
              unsigned int v584 = v303;
              int v353 = v304;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v302 = v524;
              int v304 = v353;
              unsigned int v303 = v584;
              int v306 = v352;
              unsigned int v305 = v551;
              unsigned int v307 = v351;
              int v308 = v614;
              unint64_t v287 = v350;
              uint64_t v189 = a1;
            }
            v194[10] = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v317 + 2 * ((v303 >> 2) | (v302 << 6))));
            if (qword_1EAB6A8E0 != -1)
            {
              unint64_t v354 = v287;
              int v615 = v308;
              unsigned int v355 = v307;
              unsigned int v356 = v305;
              int v357 = v306;
              char v585 = v303;
              int v358 = v304;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v304 = v358;
              LOBYTE(v303) = v585;
              int v306 = v357;
              unsigned int v305 = v356;
              unsigned int v307 = v355;
              int v308 = v615;
              unint64_t v287 = v354;
              uint64_t v189 = a1;
            }
            v194[11] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            uint64_t v318 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unint64_t v359 = v287;
              int v616 = v308;
              unsigned int v360 = v307;
              unsigned int v552 = v305;
              int v361 = v306;
              char v586 = v303;
              int v362 = v304;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v304 = v362;
              LOBYTE(v303) = v586;
              int v306 = v361;
              unsigned int v305 = v552;
              unsigned int v307 = v360;
              int v308 = v616;
              unint64_t v287 = v359;
              uint64_t v189 = a1;
            }
            v194[12] = *((_WORD *)xmmword_1EAB6A8E8
                       + *(unsigned __int16 *)(v318 + 2
                                                    * ((16 * v304) & 0xFFFFCFFF | ((v303 & 3) << 12) | (v305 >> 4))));
            uint64_t v319 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unint64_t v363 = v287;
              int v617 = v308;
              unsigned int v364 = v307;
              char v365 = v305;
              int v366 = v306;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              int v306 = v366;
              LOBYTE(v305) = v365;
              unsigned int v307 = v364;
              int v308 = v617;
              unint64_t v287 = v363;
              uint64_t v189 = a1;
            }
            v194[13] = *((_WORD *)xmmword_1EAB6A8E8
                       + *(unsigned __int16 *)(v319
                                             + 2 * ((4 * v306) & 0xFFFFC3FF | ((v305 & 0xF) << 10) | (v307 >> 6))));
            uint64_t v320 = *(void *)(v189 + 288);
            if (qword_1EAB6A8E0 != -1)
            {
              unint64_t v367 = v287;
              int v368 = v308;
              char v369 = v307;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              LOBYTE(v307) = v369;
              int v308 = v368;
              unint64_t v287 = v367;
              uint64_t v189 = a1;
            }
            v194[14] = *((_WORD *)xmmword_1EAB6A8E8
                       + *(unsigned __int16 *)(v320 + 2 * (v308 & 0xFFFFC0FF | ((v307 & 0x3F) << 8))));
            if (qword_1EAB6A8E0 != -1)
            {
              unint64_t v370 = v287;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
              unint64_t v287 = v370;
              uint64_t v189 = a1;
            }
            v194[15] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
            v287 += 4;
            v195 += 21;
            v194 += 16;
          }
          while (v287 < v632);
        }
        goto LABEL_300;
      case 0x10:
        uint64_t v371 = v189;
        uint64_t v372 = sub_1DDAA72BC(v189);
        uint64_t v373 = sub_1DDAA72BC(v371);
        uint64_t v189 = a1;
        if (v631 >= v190) {
          goto LABEL_300;
        }
        BOOL v374 = v372 == 1;
        BOOL v375 = v373 != 1;
        uint64_t v376 = (_WORD *)(a2 + 8 * v631 + 4 + a7 * v193 - 8 * v192);
        unint64_t v377 = v631;
        break;
      default:
        goto LABEL_300;
    }
    while (1)
    {
      if (*(unsigned char *)(v189 + 313))
      {
        unsigned int v378 = *(unsigned __int16 *)v195;
        unsigned int v379 = *((unsigned __int16 *)v195 + 1);
        unsigned int v380 = *((unsigned __int16 *)v195 + 2);
        uint64_t v381 = sub_1DDAA72BC(v189);
        __int16 v382 = __rev16(v378);
        __int16 v383 = __rev16(v379);
        __int16 v384 = __rev16(v380);
        if (v381 != 2)
        {
          __int16 v382 = v378;
          __int16 v383 = v379;
          __int16 v384 = v380;
        }
        *(v376 - 2) = v382;
        *(v376 - 1) = v383;
        _WORD *v376 = v384;
        if (qword_1EAB6A8E0 == -1) {
          goto LABEL_289;
        }
      }
      else
      {
        uint64_t v385 = v195[v374];
        uint64_t v386 = v195[v375];
        uint64_t v387 = *(void *)(v189 + 288);
        if (qword_1EAB6A8E0 != -1)
        {
          dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
          uint64_t v189 = a1;
        }
        *(v376 - 2) = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v387 + 2 * (v386 | (v385 << 8))));
        uint64_t v388 = v195[v374 + 2];
        uint64_t v389 = v195[v375 + 2];
        uint64_t v390 = *(void *)(v189 + 288);
        if (qword_1EAB6A8E0 != -1)
        {
          dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
          uint64_t v189 = a1;
        }
        *(v376 - 1) = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v390 + 2 * (v389 | (v388 << 8))));
        uint64_t v391 = v195[v374 + 4];
        uint64_t v392 = v195[v375 + 4];
        uint64_t v393 = *(void *)(v189 + 288);
        if (qword_1EAB6A8E0 != -1)
        {
          dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
          uint64_t v189 = a1;
        }
        _WORD *v376 = *((_WORD *)xmmword_1EAB6A8E8 + *(unsigned __int16 *)(v393 + 2 * (v392 | (v391 << 8))));
        if (qword_1EAB6A8E0 == -1) {
          goto LABEL_297;
        }
      }
      dispatch_once(&qword_1EAB6A8E0, &unk_1F3976010);
LABEL_289:
      uint64_t v189 = a1;
LABEL_297:
      unint64_t v190 = v632;
      v376[1] = HIWORD(xmmword_1EAB6A8E8[0x1FFF]);
      v195 += 6;
      ++v377;
      v376 += 4;
      if (v377 >= v632)
      {
LABEL_300:
        unint64_t v191 = v622 + 1;
        if (v622 + 1 >= v628) {
          goto LABEL_301;
        }
        goto LABEL_179;
      }
    }
  }
  uint64_t v153 = a1;
  unint64_t v154 = v632;
  if (v624 < v628)
  {
    if (((v632 - v631) & 0x8000000000000000) == 0)
    {
      uint64_t v155 = 0;
      unint64_t v156 = v624;
      while (1)
      {
        uint64_t v157 = *a6;
        unint64_t v158 = v156 - a6[1];
        if (a2 + v158 * a7 + 2 * (v631 - v157) + 2 * (v632 - v631) > a2 + 2 * a3) {
          break;
        }
        float v159 = (char *)v634[0];
        float v160 = (unsigned __int8 *)v634[0] + (v156 - v624) * v630;
        switch(*(_WORD *)(v153 + 280))
        {
          case 8:
            if ((v623[2] & 3) != 0) {
              goto LABEL_305;
            }
            unint64_t v154 = v632;
            if (v631 < v632)
            {
              uint64_t v161 = *(void *)(v153 + 288);
              unint64_t v162 = v631;
              do
              {
                uint64_t v163 = (_WORD *)(a2 + a7 * v158 - 2 * v157 + 2 * v162);
                *uint64_t v163 = *(_WORD *)(v161 + 2 * *v160);
                v163[1] = *(_WORD *)(v161 + 2 * v160[2]);
                v162 += 2;
                v160 += 4;
              }
              while (v162 < v632);
            }
            break;
          case 0xA:
            if ((v623[2] & 3) != 0) {
              goto LABEL_305;
            }
            unint64_t v154 = v632;
            if (v631 < v632)
            {
              uint64_t v166 = *(void *)(v153 + 288);
              unint64_t v167 = v631;
              do
              {
                uint64_t v168 = (_WORD *)(a2 + a7 * v158 - 2 * v157 + 2 * v167);
                unsigned __int8 v169 = v160[2];
                unint64_t v170 = v160[3];
                *uint64_t v168 = *(_WORD *)(v166 + (((unint64_t)v160[1] >> 5) & 6 | (8 * *v160)));
                v168[1] = *(_WORD *)(v166 + ((v170 >> 1) & 0x7E | ((unint64_t)(v169 & 0xF) << 7)));
                v167 += 2;
                v160 += 5;
              }
              while (v167 < v632);
            }
            break;
          case 0xC:
            if (v631 < v154)
            {
              uint64_t v164 = *(void *)(v153 + 288);
              unint64_t v165 = v631;
              do
              {
                *(_WORD *)(a2 + a7 * v158 - 2 * v157 + 2 * v165++) = *(_WORD *)(v164
                                                                              + (((unint64_t)v160[1] >> 3) & 0x1E | (32 * *v160)));
                v160 += 3;
              }
              while (v165 < v154);
            }
            break;
          case 0xE:
            if ((v623[2] & 3) != 0) {
              goto LABEL_305;
            }
            unint64_t v154 = v632;
            if (v631 < v632)
            {
              uint64_t v171 = *(void *)(v153 + 288);
              unint64_t v172 = v631;
              do
              {
                uint64_t v173 = (_WORD *)(a2 + a7 * v158 - 2 * v157 + 2 * v172);
                unsigned __int8 v174 = v160[3];
                uint64_t v175 = v160[4];
                unint64_t v176 = v160[5];
                _WORD *v173 = *(_WORD *)(v171 + (((unint64_t)v160[1] >> 1) & 0x7E | ((unint64_t)*v160 << 7)));
                v173[1] = *(_WORD *)(v171
                                   + 2
                                   * ((4 * v175) & 0xFFFFFFFFFFFFC3FFLL | ((unint64_t)(v174 & 0xF) << 10) | (v176 >> 6)));
                v172 += 2;
                v160 += 7;
              }
              while (v172 < v632);
            }
            break;
          case 0x10:
            uint64_t v177 = sub_1DDAA72BC(v153);
            uint64_t v178 = sub_1DDAA72BC(v153);
            unint64_t v154 = v632;
            uint64_t v153 = a1;
            if (v631 < v632)
            {
              if (v178 == 1) {
                uint64_t v179 = 1;
              }
              else {
                uint64_t v179 = 2;
              }
              uint64_t v180 = *(void *)(a1 + 288);
              if (v177 == 1) {
                uint64_t v181 = v155 + 1;
              }
              else {
                uint64_t v181 = v155;
              }
              unint64_t v182 = &v159[v181];
              uint64_t v183 = &v159[v179 + v155];
              unint64_t v184 = v631;
              do
              {
                unsigned int v186 = *v182;
                v182 += 4;
                uint64_t v185 = v186;
                unsigned int v187 = *v183;
                v183 += 4;
                *(_WORD *)(a2 + a7 * v158 - 2 * v157 + 2 * v184++) = *(_WORD *)(v180 + ((2 * v187) | (v185 << 9)));
              }
              while (v184 < v632);
            }
            break;
          default:
            break;
        }
        ++v156;
        v155 += v630;
        if (v156 >= v628) {
          goto LABEL_301;
        }
      }
    }
LABEL_305:
    uint64_t v395 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v395, "RawCameraException");
    __cxa_throw(v395, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_301:
  if (v634[0])
  {
    v634[1] = v634[0];
    operator delete(v634[0]);
  }
}

void sub_1DDB02074(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    uint64_t v4 = *(void **)(v2 - 128);
    if (v4)
    {
      *(void *)(v2 - 120) = v4;
      operator delete(v4);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1DDB01D2CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB021F8(os_signpost_id_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGUncompressedUnpacker", (const char *)&unk_1DDC3ACB6, (uint8_t *)buf, 2u);
  }

  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = sub_1DDB0265C;
  v14[3] = &unk_1E6D04A58;
  v14[4] = a1;
  MEMORY[0x1E01C46E0](v14);
  if ((*(_DWORD *)(a1 + 216) - 1) > 1 || *(_WORD *)(a1 + 280) != 16)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v4 = sub_1DDAA72BC(a1);
  sub_1DDA29F88(buf, (uint64_t *)(a1 + 24), v4);
  int v5 = *(_DWORD *)(a1 + 216);
  char v6 = (v5 - 1) < 2;
  int v8 = *(_DWORD *)(a1 + 44);
  unsigned int v7 = *(_DWORD *)(a1 + 48);
  int v9 = *(unsigned __int16 *)(a1 + 280);
  long long v15 = xmmword_1DDBFD770;
  if (v5 == 1)
  {
    int v10 = 1 - v8;
    LODWORD(v15) = v8 + 1;
    DWORD1(v15) = 1 - v8;
    DWORD2(v15) = v8 + 1;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    DWORD1(v15) = v8;
    int v10 = -v8;
  }
  HIDWORD(v15) = v10;
LABEL_9:
  if (((v8 * v9 + 7) >> 3) * (v7 >> v6) <= (*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1))
  {
    sub_1DDAA72BC(a1);
    sub_1DDAA72BC(a1);
    operator new[]();
  }
  int v12 = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](v12, "RawCameraException");
  __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDB025AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB0265C(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGUncompressedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDB026E4(uint64_t result, int a2)
{
  if ((a2 - 17) <= 0xFFFFFFF6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_WORD *)(result + 280) = a2;
  return result;
}

void sub_1DDB02748(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_1DDB0275C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 228) = a3;
  unsigned int v7 = (char *)(a1 + 232);
  if (v7 != (char *)a4) {
    sub_1DDA17E28(v7, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  uint64_t result = (char *)(a1 + 256);
  if (a1 + 256 != a5)
  {
    int v9 = *(char **)a5;
    uint64_t v10 = *(void *)(a5 + 8);
    unint64_t v11 = (v10 - *(void *)a5) >> 2;
    return sub_1DDA17E28(result, v9, v10, v11);
  }
  return result;
}

uint64_t sub_1DDB027D4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 313) = a2;
  return result;
}

void sub_1DDB027DC(os_signpost_id_t a1, uint64_t a2, int *a3, unint64_t a4)
{
  char v6 = sub_1DDA83CFC();
  unsigned int v7 = v6;
  if (a1 + 1 >= 2 && os_signpost_enabled(v6))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v7, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGUncompressedUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 3221225472;
  v38[2] = sub_1DDB02D14;
  v38[3] = &unk_1E6D04A58;
  v38[4] = a1;
  uint64_t v8 = MEMORY[0x1E01C46E0](v38);
  if (*(_DWORD *)(a1 + 216)
    || (*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 224))(a1) != 1
    && (*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 224))(a1) != 2
    && (*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 224))(a1) != 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v10 = *(_DWORD *)(a1 + 44);
  int v9 = *(_DWORD *)(a1 + 48);
  unsigned int v11 = *(_DWORD *)(a1 + 224);
  unsigned int v12 = *(_DWORD *)(a1 + 228);
  *(void *)int buf = (uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 2;
  sub_1DDA18488(&v37, (unint64_t *)buf);
  if (*(void *)(a1 + 240) - *(void *)(a1 + 232) != *(void *)(a1 + 264) - *(void *)(a1 + 256)
    || (v10 - 100000) < 0xFFFE7961
    || (v9 - 100000) < 0xFFFE7961
    || v11 - 100000 < 0xFFFE7961
    || v12 - 100000 < 0xFFFE7961
    || v37 >= 20000)
  {
    unint64_t v28 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v28, "RawCameraException");
    __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((((v9 + v12 - 1) / v12) >> (*(_DWORD *)(a1 + 216) != 0)) * ((v10 + v11 - 1) / v11) != v37)
  {
    uint64_t v29 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v29, "RawCameraException");
    __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v13 = a3[3];
  BOOL v14 = v13 < 0;
  if (v13 >= 0) {
    unint64_t v15 = v13;
  }
  else {
    unint64_t v15 = -v13;
  }
  BOOL v16 = !is_mul_ok(v15, a4);
  uint64_t v17 = v15 * a4;
  if (!v17) {
    BOOL v14 = 0;
  }
  if (v16 || v14)
  {
    int v30 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v30, "RawCameraException");
    __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v31 = (void (**)(void))v8;
  if (v37)
  {
    uint64_t v18 = 0;
    int v19 = 0;
    int v20 = 0;
    if (v13 >= 0) {
      uint64_t v21 = v17;
    }
    else {
      uint64_t v21 = -v17;
    }
    uint64_t v22 = 4 * v37;
    do
    {
      unsigned int v23 = *(_DWORD *)(*(void *)(a1 + 256) + v18);
      unsigned int v24 = (v11 * *(unsigned __int16 *)(a1 + 280) * *(unsigned __int16 *)(a1 + 220)) >> 3;
      *(_DWORD *)int buf = v19;
      *(_DWORD *)&uint8_t buf[4] = v20;
      unsigned int v35 = v11;
      int v36 = v23 / v24;
      if (sub_1DDB56B98((int *)buf, a3)) {
        sub_1DDAFF474(a1, a2, v21, *(_DWORD *)(*(void *)(a1 + 232) + v18), v25, a3, a4, (int *)buf);
      }
      v18 += 4;
      if ((int)(v19 + v11) >= v10) {
        unsigned int v26 = v12;
      }
      else {
        unsigned int v26 = 0;
      }
      v20 += v26;
      if ((int)(v19 + v11) >= v10) {
        int v19 = 0;
      }
      else {
        v19 += v11;
      }
    }
    while (v22 != v18);
  }
  v31[2](v31);
}

void sub_1DDB02C9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB02D14(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGUncompressedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void *sub_1DDB02D9C(void *a1)
{
  *a1 = &unk_1F3975EF0;
  uint64_t v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[32];
  if (v3)
  {
    a1[33] = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = (void *)a1[29];
  if (v4)
  {
    a1[30] = v4;
    operator delete(v4);
  }
  *a1 = &unk_1F3977E98;
  int v5 = (void *)a1[24];
  if (v5)
  {
    a1[25] = v5;
    operator delete(v5);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDB02E48(void *a1)
{
  *a1 = &unk_1F3975EF0;
  uint64_t v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[32];
  if (v3)
  {
    a1[33] = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = (void *)a1[29];
  if (v4)
  {
    a1[30] = v4;
    operator delete(v4);
  }
  *a1 = &unk_1F3977E98;
  int v5 = (void *)a1[24];
  if (v5)
  {
    a1[25] = v5;
    operator delete(v5);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB02F08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 312);
}

int64x2_t sub_1DDB02F10()
{
  uint64_t v0 = 0;
  int64x2_t result = (int64x2_t)xmmword_1DDBF8D70;
  int64x2_t v2 = (int64x2_t)xmmword_1DDBF8D80;
  int64x2_t v3 = (int64x2_t)xmmword_1DDBF8D90;
  float32x4_t v4 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  int64x2_t v5 = (int64x2_t)xmmword_1DDBF8D60;
  int64x2_t v6 = vdupq_n_s64(8uLL);
  do
  {
    xmmword_1EAB6A8E8[v0] = (__int128)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v5)), vcvtq_f64_u64((uint64x2_t)v3)), v4)), vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v2)), vcvtq_f64_u64((uint64x2_t)result)), v4));
    int64x2_t v2 = vaddq_s64(v2, v6);
    int64x2_t v3 = vaddq_s64(v3, v6);
    int64x2_t v5 = vaddq_s64(v5, v6);
    int64x2_t result = vaddq_s64(result, v6);
    ++v0;
  }
  while (v0 != 0x2000);
  return result;
}

uint64_t sub_1DDB02FA4(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1DDB03034;
  block[3] = &unk_1E6D04A58;
  block[4] = a1;
  if (*(void *)(a1 + 320) != -1) {
    dispatch_once((dispatch_once_t *)(a1 + 320), block);
  }
  return *(void *)(a1 + 288);
}

void sub_1DDB03034(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(void *)(v1 + 200) - *(void *)(v1 + 192);
  if (v2) {
    BOOL v3 = v2 > 0x20001;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    sub_1DDB032DC(v1 + 288, 0x10000uLL);
    *(_WORD *)(v1 + 312) = 1;
    uint64_t v22 = *(char **)(v1 + 192);
    uint64_t v21 = *(char **)(v1 + 200);
    uint64_t v23 = *(void *)(v1 + 288);
    uint64_t v24 = v21 - v22;
    if (v21 == v22)
    {
      LODWORD(v25) = 0;
      unint64_t v27 = (__int16 *)(v23 + 0x1FFFFFFFELL);
    }
    else
    {
      LODWORD(v25) = 0;
      unint64_t v26 = v24 >> 1;
      unint64_t v27 = (__int16 *)(v23 - 2);
      do
      {
        __int16 v28 = *(_WORD *)v22;
        v22 += 2;
        v27[1] = v28;
        ++v27;
        unint64_t v25 = (v25 + 1);
      }
      while (v26 > v25);
      if (WORD1(v25)) {
        return;
      }
    }
    __int16 v33 = *v27;
    unint64_t v25 = v25;
    do
      *(_WORD *)(v23 + 2 * v25++) = v33;
    while (v25 != 0x10000);
    return;
  }
  float32x4_t v4 = (uint64_t *)(v1 + 288);
  if (*(void *)(v1 + 336) - *(void *)(v1 + 328) == 48)
  {
    sub_1DDB032DC(v1 + 288, 0x30000uLL);
    *(_WORD *)(v1 + 312) = 3;
    uint64_t v5 = *(void *)(v1 + 328);
    for (uint64_t i = *(void *)(v1 + 336); v5 != i; v5 += 16)
    {
      unsigned int v7 = *(uint64_t **)v5;
      if (*(void *)v5
        && (unsigned int v7 = (uint64_t *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_1F395A728, (const struct __class_type_info *)&unk_1F398C238, 0)) != 0)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v5 + 8);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *((unsigned int *)v7 + 7);
      if (v9 <= 2)
      {
        int v10 = (const void *)v7[6];
        uint64_t v11 = v7[7];
        unint64_t v12 = (v11 - (uint64_t)v10) >> 3;
        uint64_t v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        sub_1DDA1808C(&v34, v10, v11, v12);
        uint64_t v13 = 0;
        unint64_t v14 = v12 - 1;
        unint64_t v15 = v34;
        uint64_t v16 = v9 << 16;
        uint64_t v17 = *v4;
        do
        {
          uint64_t v18 = 0;
          double v19 = 0.0;
          do
          {
            double v20 = v15[v18];
            double v19 = v19 + v20 * pow((float)((float)v13 / 65535.0), (double)v18++);
          }
          while (v14 >= v18);
          *(_WORD *)(v17 + 2 * (v13 + v16)) = (int)(v19 * 65535.0);
          ++v13;
        }
        while (v13 != 0x10000);
        unsigned int v35 = v15;
        operator delete(v15);
      }
      if (v8) {
        sub_1DDA18310(v8);
      }
    }
  }
  else
  {
    sub_1DDB032DC(v1 + 288, 0x10000uLL);
    uint64_t v29 = 0;
    *(_WORD *)(v1 + 312) = 1;
    int16x8_t v30 = (int16x8_t)xmmword_1DDBF8D50;
    uint64_t v31 = *(void *)(v1 + 288);
    v32.i64[0] = 0x8000800080008;
    v32.i64[1] = 0x8000800080008;
    do
    {
      *(int16x8_t *)(v31 + v29) = v30;
      int16x8_t v30 = vaddq_s16(v30, v32);
      v29 += 16;
    }
    while (v29 != 0x20000);
  }
}

void sub_1DDB032C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1DDA18310(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB032DC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_1DDB07B14((char **)a1, a2 - v2);
  }
}

void *sub_1DDB0330C(uint64_t a1, int a2, unsigned int a3)
{
  int v9 = a2;
  uint64_t v5 = malloc_type_malloc(a3 + 64, 0x73736EF6uLL);
  uint64_t v6 = *(void *)(a1 + 24);
  sub_1DDA18410(&v8, &v9);
  (*(void (**)(uint64_t, int *, void))(*(void *)v6 + 40))(v6, &v8, 0);
  (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5, a3);
  return v5;
}

void sub_1DDB033D4(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    free(v1);
  }
  __cxa_end_catch();
  JUMPOUT(0x1DDB033BCLL);
}

void sub_1DDB033F8(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  os_signpost_id_t v6 = v1;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = sub_1DDA83CFC();
  int v8 = v7;
  if (v6 + 1 >= 2 && os_signpost_enabled(v7))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "CDNGLosslessJpegUnpacker::unpackTile", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  _DWORD v30[2] = sub_1DDB045A8;
  v30[3] = &unk_1E6D04A58;
  void v30[4] = v6;
  MEMORY[0x1E01C46E0](v30);
  int v29 = 0;
  long long v28 = 0u;
  if ((unint64_t)(v5 + 1) > v3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = (unsigned __int8 *)(v5 + 1);
  if (bswap32(*v5) >> 16 != 65496)
  {
    unint64_t v26 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v26, "RawCameraException");
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memset(v32, 0, sizeof(v32));
  unint64_t v27 = v3;
  while (1)
  {
    int v10 = v9 + 4;
    if ((unint64_t)(v9 + 4) > v3) {
      goto LABEL_30;
    }
    uint64_t v11 = v9;
    int v12 = __rev16(*(unsigned __int16 *)v9);
    if (v12 < 0xFF01 || (uint64_t v13 = __rev16(*((unsigned __int16 *)v9 + 1)), v13 >= 0x102))
    {
      uint64_t v22 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v22, "RawCameraException");
      __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if ((unint64_t)&v10[v13 - 2] > v27)
    {
      uint64_t v23 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v23, "RawCameraException");
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v9 = &v10[v13 - 2];
    if (v12 > 65475)
    {
      if (v12 == 65498)
      {
        uint64_t v17 = *v10;
        if ((unint64_t)&v10[2 * v17 + 1] > v27
          || (uint64_t v18 = &v10[(2 * v17 + 3)], (unint64_t)v18 > v27))
        {
          uint64_t v24 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](v24, "RawCameraException");
          __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v28) = v28 - (*v18 & 0xF);
      }
      else if (v12 == 65476)
      {
        while (v10 < v9)
        {
          unint64_t v15 = *v10;
          if (v15 > 3) {
            break;
          }
          uint64_t v16 = &buf[2048 * v15];
          *((void *)v32 + v15) = v16;
          int v10 = (unsigned __int8 *)sub_1DDAACF3C(v10 + 1, (uint64_t)v16);
          if (!v10)
          {
            double v20 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v20, "RawCameraException");
            __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
      }
      goto LABEL_24;
    }
    if (v12 == 65472) {
      break;
    }
    if (v12 == 65475)
    {
      int v14 = ((v11[11] >> 4) * v11[11] - 1) & 3;
      int v29 = v14;
LABEL_20:
      LODWORD(v28) = v11[4];
      HIDWORD(v28) = v14 + v11[9];
    }
LABEL_24:
    BOOL v19 = v12 == 65498;
    unint64_t v3 = v27;
    if (v19)
    {
      if ((HIDWORD(v28) - 5) > 0xFFFFFFFB) {
        operator new[]();
      }
LABEL_30:
      uint64_t v21 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v21, "RawCameraException");
      __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  int v14 = v29;
  goto LABEL_20;
}

void sub_1DDB043C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
  {
    __cxa_free_exception(v18);
    MEMORY[0x1E01C3DA0](a15, 0x1000C8077774924);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1DDB03F98);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB04560()
{
  (*(void (**)(uint64_t))(v0 + 16))(v0);
  JUMPOUT(0x1DDB043FCLL);
}

void sub_1DDB0457C(void *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  JUMPOUT(0x1DDB04408);
}

void sub_1DDB045A8(uint64_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  unint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGLosslessJpegUnpacker::unpackTile", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB04630(os_signpost_id_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  unint64_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGLosslessJpegUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = sub_1DDB04AF8;
  v28[3] = &unk_1E6D04A58;
  v28[4] = a1;
  double v20 = (void (**)(void))MEMORY[0x1E01C46E0](v28);
  if (*(_DWORD *)(a1 + 216) || (*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 224))(a1) == 2) {
    sub_1DDB04B80(a1);
  }
  unsigned int v4 = *(_DWORD *)(a1 + 44);
  int v23 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 224);
  unsigned int v6 = *(_DWORD *)(a1 + 228);
  *(void *)int buf = (uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 2;
  sub_1DDA18500(&v24, (unint64_t *)buf);
  uint64_t v7 = v24.u32[0];
  int v8 = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 40))(a1);
  if (*(void *)(a1 + 240) - *(void *)(a1 + 232) != *(void *)(a1 + 264) - *(void *)(a1 + 256)
    || v4 - 100000 < 0xFFFE7961
    || (v23 - 100000) < 0xFFFE7961
    || v5 - 100000 < 0xFFFE7961
    || v6 - 100000 < 0xFFFE7961
    || v7 >> 5 >= 0x271)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((((v23 + v6 - 1) / v6) >> (*(_DWORD *)(a1 + 216) != 0)) * ((v4 + v5 - 1) / v5) != v7)
  {
    BOOL v19 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v19, "RawCameraException");
    __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = v8;
  uint64_t v22 = sub_1DDAA5B9C(a1);
  if (v7)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    uint64_t v21 = 2 * v4 * v9;
    uint64_t v13 = 4 * v7;
    do
    {
      int v14 = sub_1DDB0330C(a1, *(_DWORD *)(*(void *)(a1 + 232) + v10), *(_DWORD *)(*(void *)(a1 + 256) + v10));
      if (v14)
      {
        uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 256) + v10);
        *(void *)int buf = 0;
        sub_1DDA18218(v27, v4, v23);
        sub_1DDA18218(&v24, v11, v12);
        sub_1DDA18218(&v25, v5, v6);
        uint64_t v16 = sub_1DDB02FA4(a1);
        sub_1DDB06028(a1, v22, (int32x2_t *)buf, v21, &v24, (uint64_t)v14, (uint64_t)v14 + v15, v16, 1);
        free(v14);
      }
      v10 += 4;
      if (v11 + v5 >= v4) {
        unsigned int v17 = v6;
      }
      else {
        unsigned int v17 = 0;
      }
      v12 += v17;
      if (v11 + v5 >= v4) {
        int v11 = 0;
      }
      else {
        v11 += v5;
      }
    }
    while (v13 != v10);
  }
  v20[2](v20);
}

void sub_1DDB04A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(void))
{
  _Unwind_Resume(a1);
}

void sub_1DDB04AF8(uint64_t a1)
{
  unint64_t v2 = sub_1DDA83CFC();
  unint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGLosslessJpegUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB04B80(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v29 = xmmword_1DDBFD7A0;
  long long v28 = xmmword_1DDBFD770;
  int v2 = *(_DWORD *)(v1 + 48);
  unsigned int v23 = *(_DWORD *)(v1 + 224);
  int v24 = *(_DWORD *)(v1 + 44);
  unsigned int v25 = *(_DWORD *)(v1 + 228);
  uint64_t v3 = v1;
  unint64_t v26 = (uint64_t)(*(void *)(v1 + 240) - *(void *)(v1 + 232)) >> 2;
  sub_1DDA18500(&v27, &v26);
  if ((v24 - 100000) < 0xFFFE7961)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((v2 - 100000) < 0xFFFE7961)
  {
    unsigned int v17 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v17, "RawCameraException");
    __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v23 - 100000 < 0xFFFE7961)
  {
    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v18, "RawCameraException");
    __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v25 - 100000 < 0xFFFE7961)
  {
    BOOL v19 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v19, "RawCameraException");
    __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v27 >> 5 >= 0x271)
  {
    double v20 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v20, "RawCameraException");
    __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v4 = *(_DWORD *)(v3 + 216);
  if ((((v2 + v25 - 1) / v25) >> (v4 != 0)) * ((v24 + v23 - 1) / v23) != v27)
  {
    uint64_t v21 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v21, "RawCameraException");
    __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v4 == 1)
  {
    int v5 = 1 - v24;
    LODWORD(v28) = v24 + 1;
    DWORD1(v28) = 1 - v24;
    DWORD2(v28) = v24 + 1;
  }
  else
  {
    if (v4 != 2) {
      goto LABEL_12;
    }
    DWORD1(v28) = v24;
    int v5 = -v24;
  }
  HIDWORD(v28) = v5;
LABEL_12:
  unsigned int v6 = *(unsigned int **)(v3 + 256);
  uint64_t v7 = *(unsigned int **)(v3 + 264);
  if (v6 == v7)
  {
    unsigned int v8 = 0;
  }
  else
  {
    unsigned int v8 = 0;
    do
    {
      LODWORD(v26) = v8;
      unsigned int v8 = *sub_1DDA2A648((int *)&v26, v6++);
    }
    while (v6 != v7);
  }
  unsigned int v9 = (*(uint64_t (**)(void))(**(void **)(v3 + 24) + 16))(*(void *)(v3 + 24));
  if ((v8 & 0x80000000) != 0 || v8 < v9)
  {
    uint64_t v10 = *(unsigned int **)(v3 + 256);
    int v11 = *(unsigned int **)(v3 + 264);
    if (v10 != v11 && v10 + 1 != v11)
    {
      unsigned int v12 = *v10;
      uint64_t v13 = v10 + 1;
      do
      {
        unsigned int v15 = *v13++;
        unsigned int v14 = v15;
        if (v12 <= v15) {
          unsigned int v12 = v14;
        }
      }
      while (v13 != v11);
    }
    operator new[]();
  }
  uint64_t v22 = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](v22, "RawCameraException");
  __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDB05F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_1DDB06028(os_signpost_id_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, int32x2_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_1DDBB6538();
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_BOOLForKey_(v20, v17, @"USE_APPLE_JPEG_FOR_DNG", v18, v19)) {
    sub_1DDB033F8(a1);
  }
  sub_1DDB06804(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1DDB06114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

char *sub_1DDB06128(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 228) = a3;
  uint64_t v7 = (char *)(a1 + 232);
  if (v7 != (char *)a4) {
    sub_1DDA17E28(v7, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  int64x2_t result = (char *)(a1 + 256);
  if (a1 + 256 != a5)
  {
    unsigned int v9 = *(char **)a5;
    uint64_t v10 = *(void *)(a5 + 8);
    unint64_t v11 = (v10 - *(void *)a5) >> 2;
    return sub_1DDA17E28(result, v9, v10, v11);
  }
  return result;
}

uint64_t sub_1DDB061A0(_DWORD *a1)
{
  int v1 = a1[17];
  if (((a1[70] + 2 * v1) & 0xFLL) != 0) {
    return (2 * (a1[15] + 2 * v1) + 31) & 0x3FFFFFFE0;
  }
  else {
    return 2 * (a1[70] + 2 * v1);
  }
}

void sub_1DDB061D8(os_signpost_id_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  unsigned int v8 = sub_1DDA83CFC();
  unsigned int v9 = v8;
  if (a1 + 1 >= 2 && os_signpost_enabled(v8))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v9, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGLosslessJpegUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = sub_1DDB066E0;
  v35[3] = &unk_1E6D04A58;
  v35[4] = a1;
  uint64_t v10 = (void (**)(void))MEMORY[0x1E01C46E0](v35);
  if (*(_DWORD *)(a1 + 216)
    || (*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 224))(a1) == 2
    || (uint64_t v11 = *(void *)(a1 + 240) - *(void *)(a1 + 232), v11 == 4))
  {
    sub_1DDAA737C(a1, a2, a3, a4);
  }
  else
  {
    int v13 = *(_DWORD *)(a1 + 44);
    int v12 = *(_DWORD *)(a1 + 48);
    unsigned int v14 = *(_DWORD *)(a1 + 224);
    unsigned int v15 = *(_DWORD *)(a1 + 228);
    *(void *)int buf = v11 >> 2;
    sub_1DDA18488(&v34, (unint64_t *)buf);
    if (*(void *)(a1 + 240) - *(void *)(a1 + 232) != *(void *)(a1 + 264) - *(void *)(a1 + 256)
      || (v13 - 100000) < 0xFFFE7961
      || (v12 - 100000) < 0xFFFE7961
      || v14 - 100000 < 0xFFFE7961
      || v15 - 100000 < 0xFFFE7961
      || (v26 = v10, uint64_t v16 = v34, v34 >= 20000))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v27 = a4;
    if ((((v12 + v15 - 1) / v15) >> (*(_DWORD *)(a1 + 216) != 0)) * ((v13 + v14 - 1) / v14) != v34)
    {
      unsigned int v25 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v25, "RawCameraException");
      __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    group = dispatch_group_create();
    long long v28 = dispatch_queue_create("Lossless DNG Tile Unpacker Queue", MEMORY[0x1E4F14430]);
    if (v16)
    {
      uint64_t v17 = 0;
      int v18 = 0;
      int v19 = 0;
      uint64_t v20 = 4 * v16;
      do
      {
        *(_DWORD *)int buf = v18;
        *(_DWORD *)&uint8_t buf[4] = v19;
        *(_DWORD *)&uint8_t buf[8] = v14;
        *(_DWORD *)&buf[12] = v15;
        if (sub_1DDB56B98((int *)buf, a3))
        {
          uint64_t v21 = sub_1DDB0330C(a1, *(_DWORD *)(*(void *)(a1 + 232) + v17), *(_DWORD *)(*(void *)(a1 + 256) + v17));
          if (v21)
          {
            int v22 = *(_DWORD *)(*(void *)(a1 + 256) + v17);
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = sub_1DDB06768;
            block[3] = &unk_1E6D04A78;
            block[4] = a1;
            void block[5] = v21;
            int v31 = v22;
            block[6] = a2;
            block[7] = a3;
            block[8] = v27;
            long long v32 = *(_OWORD *)buf;
            dispatch_group_async(group, v28, block);
          }
        }
        if ((int)(v18 + v14) >= v13) {
          unsigned int v23 = v15;
        }
        else {
          unsigned int v23 = 0;
        }
        v19 += v23;
        if ((int)(v18 + v14) >= v13) {
          int v18 = 0;
        }
        else {
          v18 += v14;
        }
        v17 += 4;
      }
      while (v20 != v17);
    }
    dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);

    uint64_t v10 = v26;
  }
  v10[2](v10);
}

void sub_1DDB06650(_Unwind_Exception *a1)
{
  v1[2](v1);

  _Unwind_Resume(a1);
}

void sub_1DDB066E0(uint64_t a1)
{
  int v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGLosslessJpegUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB06768(uint64_t a1)
{
  os_signpost_id_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = v3 + *(unsigned int *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 48);
  unsigned int v6 = *(int32x2_t **)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  unsigned int v8 = (int32x2_t *)(a1 + 76);
  uint64_t v9 = sub_1DDB02FA4(v2);
  sub_1DDB06028(v2, v5, v6, v7, v8, v3, v4, v9, 0);
  uint64_t v10 = *(void **)(a1 + 40);

  free(v10);
}

void sub_1DDB06804(os_signpost_id_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, int32x2_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v17 = sub_1DDA83CFC();
  int v18 = v17;
  if (a1 + 1 >= 2 && os_signpost_enabled(v17))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v18, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGLosslessJpegUnpacker::unpackTile", (const char *)&unk_1DDC3ACB6, (uint8_t *)buf, 2u);
  }

  v48[0] = MEMORY[0x1E4F143A8];
  v48[1] = 3221225472;
  v48[2] = sub_1DDB06D3C;
  v48[3] = &unk_1E6D04A58;
  v48[4] = a1;
  int v19 = (void (**)(void))MEMORY[0x1E01C46E0](v48);
  context = (void *)MEMORY[0x1E01C4510]();
  long long v46 = xmmword_1F3976030;
  uint64_t v47 = qword_1F3976040;
  if (!applejpeg_decode_create())
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v44 = a6;
  uint64_t v45 = a7 - a6;
  if (applejpeg_decode_open_mem())
  {
    int v31 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v31, "RawCameraException");
    __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (applejpeg_decode_get_image_info())
  {
    long long v32 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v32, "RawCameraException");
    __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  precisiouint64_t n = applejpeg_decode_get_precision();
  if (precision - 17 <= 0xFFFFFFF6)
  {
LABEL_19:
    uint64_t v33 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v33, "RawCameraException");
    __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  switch(v43)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      if (applejpeg_decode_set_option_outformat()) {
        goto LABEL_19;
      }
      unint64_t v40 = 0;
      uint64_t v41 = 0;
      if (applejpeg_decode_get_output_buffer_size())
      {
        int v34 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v34, "RawCameraException");
        __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      objc_msgSend_dataWithLength_(MEMORY[0x1E4F1CA58], v21, v41, v22, v23);
      id v24 = objc_claimAutoreleasedReturnValue();
      uint64_t v38 = objc_msgSend_mutableBytes(v24, v25, v26, v27, v28);
      uint64_t v39 = v41;
      if (applejpeg_decode_image_all())
      {
        unsigned int v35 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v35, "RawCameraException");
        __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      char v29 = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 88))(a1);
      if (precision < 9) {
        sub_1DDB073B0(a1, buf, (uint64_t)v42, v40, a2, a4, a3, a5, a8, v29 & (a9 ^ 1));
      }
      else {
        sub_1DDB06DD4(a1, buf, (uint64_t)v42, v40, a2, a4, a3, a5, a8, v29 & (a9 ^ 1));
      }

      applejpeg_decode_destroy();
      v19[2](v19);

      return;
    default:
      goto LABEL_19;
  }
}

void sub_1DDB06C84(void *a1)
{
  __cxa_free_exception(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1DDB06ABCLL);
}

void sub_1DDB06D3C(uint64_t a1)
{
  os_signpost_id_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGLosslessJpegUnpacker::unpackTile", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void *sub_1DDB06DC4(size_t a1)
{
  return malloc_type_malloc(a1, 0x5953C38FuLL);
}

uint64_t sub_1DDB06DD4(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, int32x2_t *a8, uint64_t a9, char a10)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a2 + 8) != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v15 = *(_DWORD *)(a3 + 4);
  int v73 = v15;
  if (v15 == 4 || v15 == 2) {
    int v15 = 1;
  }
  uint64_t v17 = (unsigned int *)&a8[1];
  int32x2_t v18 = a8[1];
  int v72 = v15;
  int32x2_t v19 = vmax_s32(*a7, *a8);
  int32x2_t v20 = vsub_s32(vmin_s32(vadd_s32(v18, *a8), vadd_s32(a7[1], *a7)), v19);
  int32x2_t v70 = v19;
  int32x2_t v71 = v20;
  uint64_t v21 = a2 + 5;
  sub_1DDA1B3CC(&v69, (unsigned int *)a2 + 10);
  sub_1DDA1B3CC(&v68, (unsigned int *)a2 + 11);
  LODWORD(v74) = v69;
  LODWORD(v74) = *sub_1DDA4BDD8(&v74, &v68);
  int v22 = *sub_1DDA75110((int *)&v74, (unsigned int *)&v73);
  sub_1DDA1B3CC(&v69, v17);
  sub_1DDA1B3CC(&v68, (unsigned int *)&a8[1] + 1);
  LODWORD(v74) = v69;
  LODWORD(v74) = *sub_1DDA4BDD8(&v74, &v68);
  if (v22 != *sub_1DDA75110((int *)&v74, (unsigned int *)&v72))
  {
    char v57 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v57, "RawCameraException");
    __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v70.i32[0] < 0 || v70.i32[1] < 0)
  {
    unint64_t v58 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v58, "RawCameraException");
    __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v71.i32[0] < 0 || v71.i32[1] < 0)
  {
    int v59 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v59, "RawCameraException");
    __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!sub_1DDB56B24((int *)&v70, (int *)a8))
  {
    unsigned int v60 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v60, "RawCameraException");
    __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __int32 v24 = a8->i32[0];
  __int32 v23 = a8->i32[1];
  __int32 v25 = a7->i32[0];
  __int32 v26 = a7->i32[1];
  uint64_t v27 = *a2;
  if (a10) {
    char v28 = 3;
  }
  else {
    char v28 = 1;
  }
  if (v73 >= 3)
  {
    int v31 = 0;
    unint64_t v74 = a4;
    unint64_t v75 = a4;
  }
  else
  {
    signed int v29 = *v21 * v73;
    unint64_t v30 = (v29 / (int)*v17);
    if ((v30 - 3) <= 0xFFFFFFFD)
    {
      unsigned int v61 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v61, "RawCameraException");
      __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v74 = a4;
    unint64_t v75 = a4;
    if (v30 < 2)
    {
      int v31 = 0;
    }
    else
    {
      unint64_t v74 = 2 * v29 / v30;
      unint64_t v75 = a4 - v74;
      int v31 = 1;
    }
  }
  __int32 v32 = v71.i32[1];
  uint64_t result = a6;
  if (v71.i32[1] < 1) {
    return result;
  }
  __int32 v34 = 0;
  unsigned int v35 = (unsigned __int16 *)(v27 + (v70.i32[1] - v23) * (int)a4 + 2 * (v70.i32[0] - v24) * v72);
  uint64_t v36 = (_WORD *)(a5 + (v70.i32[1] - v26) * (int)a6 + ((v70.i32[0] - v25) << v28));
  int v37 = v71.i32[0];
  uint64_t v38 = 0xFFFFu;
  int v62 = v31;
  do
  {
    if (v37 < 1) {
      goto LABEL_55;
    }
    int v39 = 0;
    unint64_t v40 = v36;
    uint64_t v41 = v35;
    do
    {
      int v42 = v73;
      if (a10)
      {
        if (v73 >= 3)
        {
          for (signed int i = 0; i < v73; ++i)
          {
            unsigned int v52 = *v41++;
            uint64_t v51 = v52;
            if (qword_1EAB6A8E0 != -1)
            {
              uint64_t v65 = v36;
              uint64_t v67 = v35;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976168);
              uint64_t v38 = 0xFFFFLL;
              uint64_t v36 = v65;
              unsigned int v35 = v67;
              int v31 = v62;
              uint64_t result = a6;
            }
            *v40++ = xmmword_1EAB6A8E8[*(unsigned __int16 *)(a9 + 2 * v51)];
          }
          if (qword_1EAB6A8E0 == -1) {
            goto LABEL_51;
          }
        }
        else
        {
          if (v73 >= 1)
          {
            for (signed int j = 0; j < v73; ++j)
            {
              unsigned int v45 = *v41++;
              uint64_t v44 = v45;
              if (qword_1EAB6A8E0 != -1)
              {
                uint64_t v64 = v36;
                uint64_t v66 = v35;
                dispatch_once(&qword_1EAB6A8E0, &unk_1F3976168);
                uint64_t v38 = 0xFFFFLL;
                uint64_t v36 = v64;
                unsigned int v35 = v66;
                int v31 = v62;
                uint64_t result = a6;
              }
              __int16 v46 = xmmword_1EAB6A8E8[*(unsigned __int16 *)(a9 + 2 * v44)];
              *unint64_t v40 = v46;
              v40[1] = v46;
              uint64_t v47 = v40 + 3;
              v40[2] = v46;
              v40 += 3;
            }
            unint64_t v40 = v47;
          }
          if (qword_1EAB6A8E0 == -1) {
            goto LABEL_51;
          }
        }
        char v54 = v35;
        char v55 = v36;
        dispatch_once(&qword_1EAB6A8E0, &unk_1F3976168);
        uint64_t v38 = 0xFFFFLL;
        uint64_t v36 = v55;
        unsigned int v35 = v54;
        int v31 = v62;
        uint64_t result = a6;
LABEL_51:
        *v40++ = xmmword_1EAB6A8E8[v38];
        int v37 = v71.i32[0];
        goto LABEL_52;
      }
      if (v73 == 2 || v73 == 4)
      {
        unsigned int v49 = *v41++;
        *v40++ = *(_WORD *)(a9 + 2 * v49);
      }
      else if (v73 >= 1)
      {
        do
        {
          unsigned int v53 = *v41++;
          *v40++ = *(_WORD *)(a9 + 2 * v53);
          --v42;
        }
        while (v42);
      }
LABEL_52:
      ++v39;
    }
    while (v39 < v37);
    __int32 v32 = v71.i32[1];
LABEL_55:
    uint64_t v36 = (_WORD *)((char *)v36 + result);
    unsigned int v35 = (unsigned __int16 *)((char *)v35 + *(&v74 + (v34++ & v31)));
  }
  while (v34 < v32);
  return result;
}

void sub_1DDB07380(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB073B0(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, int32x2_t *a8, uint64_t a9, char a10)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a2 + 8) != 1)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v15 = *(_DWORD *)(a3 + 4);
  int v71 = v15;
  if (v15 == 4 || v15 == 2) {
    int v15 = 1;
  }
  uint64_t v17 = (unsigned int *)&a8[1];
  int32x2_t v18 = a8[1];
  int v70 = v15;
  int32x2_t v19 = vmax_s32(*a7, *a8);
  int32x2_t v20 = vsub_s32(vmin_s32(vadd_s32(v18, *a8), vadd_s32(a7[1], *a7)), v19);
  int32x2_t v68 = v19;
  int32x2_t v69 = v20;
  uint64_t v21 = (int *)(a2 + 5);
  sub_1DDA1B3CC(&v67, (unsigned int *)a2 + 10);
  sub_1DDA1B3CC(&v66, (unsigned int *)a2 + 11);
  LODWORD(v72) = v67;
  LODWORD(v72) = *sub_1DDA4BDD8(&v72, &v66);
  int v22 = *sub_1DDA75110((int *)&v72, (unsigned int *)&v71);
  sub_1DDA1B3CC(&v67, v17);
  sub_1DDA1B3CC(&v66, (unsigned int *)&a8[1] + 1);
  LODWORD(v72) = v67;
  LODWORD(v72) = *sub_1DDA4BDD8(&v72, &v66);
  if (v22 != *sub_1DDA75110((int *)&v72, (unsigned int *)&v70))
  {
    char v55 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v55, "RawCameraException");
    __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v68.i32[0] < 0 || v68.i32[1] < 0)
  {
    float v56 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v56, "RawCameraException");
    __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v69.i32[0] < 0 || v69.i32[1] < 0)
  {
    char v57 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v57, "RawCameraException");
    __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!sub_1DDB56B24((int *)&v68, (int *)a8))
  {
    unint64_t v58 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v58, "RawCameraException");
    __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __int32 v23 = a8->i32[1];
  uint64_t v24 = a8->i32[0];
  __int32 v25 = a7->i32[0];
  __int32 v26 = a7->i32[1];
  uint64_t v27 = *a2;
  if (a10) {
    char v28 = 3;
  }
  else {
    char v28 = 1;
  }
  if (v71 >= 3)
  {
    int v31 = 0;
    unint64_t v72 = a4;
    unint64_t v73 = a4;
  }
  else
  {
    unint64_t v29 = *v21 * (uint64_t)v71;
    unint64_t v30 = ((int)v29 / (int)*v17);
    if ((v30 - 3) <= 0xFFFFFFFD)
    {
      int v59 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v59, "RawCameraException");
      __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v72 = a4;
    unint64_t v73 = a4;
    if (v30 < 2)
    {
      int v31 = 0;
    }
    else
    {
      unint64_t v72 = v29 / v30;
      unint64_t v73 = a4 - v29 / v30;
      int v31 = 1;
    }
  }
  __int32 v32 = v69.i32[1];
  uint64_t result = a6;
  if (v69.i32[1] < 1) {
    return result;
  }
  __int32 v34 = 0;
  unsigned int v35 = (unsigned __int8 *)(v27 + (v68.i32[1] - v23) * (int)a4 + v70 * (v68.i32[0] - v24));
  uint64_t v36 = (_WORD *)(a5 + (v68.i32[1] - v26) * (int)a6 + ((v68.i32[0] - v25) << v28));
  int v37 = v69.i32[0];
  uint64_t v38 = 0xFFFFu;
  int v60 = v31;
  do
  {
    if (v37 < 1) {
      goto LABEL_55;
    }
    int v39 = 0;
    unint64_t v40 = v36;
    uint64_t v41 = v35;
    do
    {
      int v42 = v71;
      if (a10)
      {
        if (v71 >= 3)
        {
          uint64_t v49 = 0;
          do
          {
            uint64_t v50 = v41[v49];
            if (qword_1EAB6A8E0 != -1)
            {
              int v63 = v36;
              uint64_t v65 = v35;
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3976168);
              uint64_t v38 = 0xFFFFLL;
              uint64_t v36 = v63;
              unsigned int v35 = v65;
              int v31 = v60;
              uint64_t result = a6;
            }
            *v40++ = xmmword_1EAB6A8E8[*(unsigned __int16 *)(a9 + 2 * v50)];
            ++v49;
          }
          while ((int)v49 < v71);
          v41 += v49;
          if (qword_1EAB6A8E0 == -1) {
            goto LABEL_51;
          }
        }
        else
        {
          if (v71 >= 1)
          {
            uint64_t v43 = 0;
            do
            {
              uint64_t v44 = v41[v43];
              if (qword_1EAB6A8E0 != -1)
              {
                int v62 = v36;
                uint64_t v64 = v35;
                dispatch_once(&qword_1EAB6A8E0, &unk_1F3976168);
                uint64_t v38 = 0xFFFFLL;
                uint64_t v36 = v62;
                unsigned int v35 = v64;
                int v31 = v60;
                uint64_t result = a6;
              }
              __int16 v45 = xmmword_1EAB6A8E8[*(unsigned __int16 *)(a9 + 2 * v44)];
              *unint64_t v40 = v45;
              v40[1] = v45;
              __int16 v46 = v40 + 3;
              v40[2] = v45;
              ++v43;
              v40 += 3;
            }
            while ((int)v43 < v71);
            v41 += v43;
            unint64_t v40 = v46;
          }
          if (qword_1EAB6A8E0 == -1) {
            goto LABEL_51;
          }
        }
        unsigned int v52 = v35;
        unsigned int v53 = v36;
        dispatch_once(&qword_1EAB6A8E0, &unk_1F3976168);
        uint64_t v38 = 0xFFFFLL;
        uint64_t v36 = v53;
        unsigned int v35 = v52;
        int v31 = v60;
        uint64_t result = a6;
LABEL_51:
        *v40++ = xmmword_1EAB6A8E8[v38];
        int v37 = v69.i32[0];
        goto LABEL_52;
      }
      if (v71 == 2 || v71 == 4)
      {
        unsigned int v48 = *v41++;
        *v40++ = *(_WORD *)(a9 + 2 * v48);
      }
      else if (v71 >= 1)
      {
        do
        {
          unsigned int v51 = *v41++;
          *v40++ = *(_WORD *)(a9 + 2 * v51);
          --v42;
        }
        while (v42);
      }
LABEL_52:
      ++v39;
    }
    while (v39 < v37);
    __int32 v32 = v69.i32[1];
LABEL_55:
    uint64_t v36 = (_WORD *)((char *)v36 + result);
    v35 += *(&v72 + (v34++ & v31));
  }
  while (v34 < v32);
  return result;
}

void sub_1DDB07960(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB07990(uint64_t a1)
{
  *(void *)a1 = &unk_1F3976058;
  uint64_t v7 = (void **)(a1 + 328);
  sub_1DDA18270(&v7);
  os_signpost_id_t v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(void *)(a1 + 296) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 256);
  if (v3)
  {
    *(void *)(a1 + 264) = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = *(void **)(a1 + 232);
  if (v4)
  {
    *(void *)(a1 + 240) = v4;
    operator delete(v4);
  }
  *(void *)a1 = &unk_1F3977E98;
  uint64_t v5 = *(void **)(a1 + 192);
  if (v5)
  {
    *(void *)(a1 + 200) = v5;
    operator delete(v5);
  }
  return sub_1DDA18384((void *)a1);
}

uint64_t sub_1DDB07A48(uint64_t a1)
{
  *(void *)a1 = &unk_1F3976058;
  unsigned int v8 = (void **)(a1 + 328);
  sub_1DDA18270(&v8);
  os_signpost_id_t v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(void *)(a1 + 296) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 256);
  if (v3)
  {
    *(void *)(a1 + 264) = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = *(void **)(a1 + 232);
  if (v4)
  {
    *(void *)(a1 + 240) = v4;
    operator delete(v4);
  }
  *(void *)a1 = &unk_1F3977E98;
  uint64_t v5 = *(void **)(a1 + 192);
  if (v5)
  {
    *(void *)(a1 + 200) = v5;
    operator delete(v5);
  }
  unsigned int v6 = sub_1DDA18384((void *)a1);
  return MEMORY[0x1E01C3DC0](v6, 0x10B1C4084031376);
}

void sub_1DDB07B14(char **a1, unint64_t a2)
{
  unsigned int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unsigned int v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      sub_1DDA17F78();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)sub_1DDA1AD0C(v4, v13);
      unsigned int v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unsigned int v14 = 0;
    }
    int v15 = &v14[2 * v11];
    uint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    uint64_t v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

int64x2_t sub_1DDB07C28()
{
  uint64_t v0 = 0;
  int64x2_t result = (int64x2_t)xmmword_1DDBF8D70;
  int64x2_t v2 = (int64x2_t)xmmword_1DDBF8D80;
  int64x2_t v3 = (int64x2_t)xmmword_1DDBF8D90;
  float32x4_t v4 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  int64x2_t v5 = (int64x2_t)xmmword_1DDBF8D60;
  int64x2_t v6 = vdupq_n_s64(8uLL);
  do
  {
    xmmword_1EAB6A8E8[v0] = (__int128)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v5)), vcvtq_f64_u64((uint64x2_t)v3)), v4)), vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v2)), vcvtq_f64_u64((uint64x2_t)result)), v4));
    int64x2_t v2 = vaddq_s64(v2, v6);
    int64x2_t v3 = vaddq_s64(v3, v6);
    int64x2_t v5 = vaddq_s64(v5, v6);
    int64x2_t result = vaddq_s64(result, v6);
    ++v0;
  }
  while (v0 != 0x2000);
  return result;
}

void sub_1DDB07CBC(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  int64x2_t v2 = sub_1DDA83CFC();
  int64x2_t v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CLosslessJpegRestartUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v117[0] = MEMORY[0x1E4F143A8];
  v117[1] = 3221225472;
  v117[2] = sub_1DDB0894C;
  v117[3] = &unk_1E6D04A58;
  v117[4] = v1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v117);
  int64x2_t v5 = (_WORD *)sub_1DDAA5B9C(v1);
  int v6 = *(_DWORD *)(v1 + 44);
  int v7 = *(_DWORD *)(v1 + 48);
  int v115 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 152))(v1);
  sub_1DDA18410(&v116, &v115);
  uint64_t v8 = v116;
  int v9 = v7 * v6;
  uint64_t v10 = (_WORD *)((char *)&v5[v9 + 448] - v116);
  (*(void (**)(void, unsigned __int16 *, void))(**(void **)(v1 + 24) + 32))(*(void *)(v1 + 24), v10, v116);
  if (bswap32(*v10) >> 16 != 65496) {
    goto LABEL_181;
  }
  BOOL v109 = (void (**)(void))v4;
  int v111 = 0;
  int v11 = 0;
  unsigned int __dst = 0;
  int v113 = 0;
  char v110 = 0;
  char v12 = 0;
  uint64_t v13 = (unsigned __int16 *)((char *)v10 + v8);
  unsigned int v14 = v10 + 1;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  do
  {
    int v15 = __rev16(*v14);
    if (v15 == 0xFFFF)
    {
      unsigned int v14 = (unsigned __int16 *)((char *)v14 + 1);
    }
    else
    {
      if (v15 < 0xFF01) {
        goto LABEL_181;
      }
      uint64_t v16 = __rev16(v14[1]);
      if (v16 >= 0x102) {
        goto LABEL_181;
      }
      uint64_t v17 = (unsigned __int8 *)(v14 + 2);
      unint64_t v18 = (unint64_t)v14 + v16 + 2;
      if (v15 > 65497)
      {
        if (v15 == 65498)
        {
          if (*v17 - 1 > 2 || (uint64_t v21 = 2 * *v17, v16 != v21 + 6) || v17[v21 | 1] != 1)
          {
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](exception, "RawCameraException");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          char v12 = v17[v21 + 3] & 0xF;
        }
        else if (v15 == 65501)
        {
          int v113 = __rev16(v14[2]);
        }
      }
      else if (v15 == 65475)
      {
        char v110 = *((unsigned char *)v14 + 4);
        int v111 = __rev16(*(unsigned __int16 *)((char *)v14 + 5));
        unsigned int __dst = *((unsigned __int8 *)v14 + 9);
        int v11 = __rev16(*(unsigned __int16 *)((char *)v14 + 7)) * __dst;
      }
      else if (v15 == 65476)
      {
        while ((unint64_t)v17 < v18)
        {
          unint64_t v19 = *v17;
          if (v19 > 1) {
            break;
          }
          int32x2_t v20 = &buf[2048 * v19];
          *(&v119 + v19) = (uint64_t)v20;
          uint64_t v17 = (unsigned __int8 *)sub_1DDAACF3C(v17 + 1, (uint64_t)v20);
          if (!v17)
          {
            unsigned int v103 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v103, "RawCameraException");
            __cxa_throw(v103, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
      }
      unsigned int v14 = (unsigned __int16 *)v18;
    }
  }
  while (v15 != 65498);
  if (v11 * v111 > v9)
  {
LABEL_181:
    uint64_t v104 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v104, "RawCameraException");
    __cxa_throw(v104, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  signed int v22 = v113;
  if (v113 >= 1 && v11 >= 1) {
    signed int v22 = v113 / (v11 / __dst);
  }
  if (v22 < 1) {
    signed int v23 = v111 + 1;
  }
  else {
    signed int v23 = v22;
  }
  if (v120) {
    uint64_t v24 = v120;
  }
  else {
    uint64_t v24 = v119;
  }
  if (v119) {
    uint64_t v25 = v119;
  }
  else {
    uint64_t v25 = v120;
  }
  if (!v25 || !v24)
  {
    float v108 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v108, "RawCameraException");
    __cxa_throw(v108, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v111 > 0)
  {
    __int32 v26 = v13;
    uint64_t v27 = 0;
    int v28 = 0;
    int v29 = 32;
    int v30 = 1 << (v110 + ~v12);
    int v114 = v30;
    signed int v31 = v23;
    while (1)
    {
      unint64_t v32 = (char *)v26 - (char *)v14 + ((39 - v29) >> 3);
      if (8 * v32 < 2 * (v111 - v27) * (unint64_t)v11)
      {
        unsigned int v105 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v105, "RawCameraException");
        __cxa_throw(v105, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v11 > (int)v14 - (int)v5 || v32 < (8 * v11))
      {
        if (v26 != v14) {
          operator new[]();
        }
        unsigned int v14 = v26;
      }
      if (v27 == v31) {
        break;
      }
      unint64_t v34 = (unint64_t)v26;
      if (v29 >= 16) {
        goto LABEL_57;
      }
LABEL_67:
      unsigned int v41 = *(unsigned __int16 *)(v25 + 2 * ((v28 << v29) >> 23));
      int v42 = ((v41 >> 10) & 0x1F) + v29;
      if (v41 > 0x8000)
      {
        unsigned int v41 = (char)v41;
      }
      else
      {
        if ((v41 & 0x8000) != 0)
        {
          unsigned int v41 = *(unsigned __int16 *)(v25 + 2 * (((v28 << v29) >> 16) & 0x3FF));
          v42 += (v41 >> 10) & 0x1F;
        }
        int v43 = v41 & 0x1F;
        if ((v41 & 0x1F) != 0)
        {
          int v44 = v42 - 16;
          if (v42 >= 16)
          {
            int v45 = *(unsigned __int8 *)v14;
            if (v45 == 255) {
              uint64_t v46 = 3;
            }
            else {
              uint64_t v46 = 2;
            }
            if (v45 == 255) {
              uint64_t v47 = 2;
            }
            else {
              uint64_t v47 = 1;
            }
            int v48 = *((unsigned __int8 *)v14 + v47);
            uint64_t v49 = (unsigned __int16 *)((char *)v14 + v46);
            int v50 = (v28 << 16) | (v45 << 8);
            if (v48 == 255) {
              unsigned int v14 = (unsigned __int16 *)((char *)v49 + 1);
            }
            else {
              unsigned int v14 = v49;
            }
            int v28 = v50 | v48;
            int v42 = v44;
          }
          unsigned int v41 = ((v28 << v42) >> -(char)v43) - ((((v28 << v42) >> 31) - 1) >> -(char)v43);
          v42 += v43;
        }
        else
        {
          unsigned int v41 = (v41 << 8) & 0x8000;
        }
      }
      int v51 = v42 - 16;
      if (v42 >= 16)
      {
        int v52 = *(unsigned __int8 *)v14;
        if (v52 == 255) {
          uint64_t v53 = 3;
        }
        else {
          uint64_t v53 = 2;
        }
        if (v52 == 255) {
          uint64_t v54 = 2;
        }
        else {
          uint64_t v54 = 1;
        }
        int v55 = *((unsigned __int8 *)v14 + v54);
        float v56 = (unsigned __int16 *)((char *)v14 + v53);
        int v57 = (v28 << 16) | (v52 << 8);
        if (v55 == 255) {
          unsigned int v14 = (unsigned __int16 *)((char *)v56 + 1);
        }
        else {
          unsigned int v14 = v56;
        }
        int v28 = v57 | v55;
        int v42 = v51;
      }
      unsigned int v58 = *(unsigned __int16 *)(v24 + 2 * ((v28 << v42) >> 23));
      int v29 = ((v58 >> 10) & 0x1F) + v42;
      if (v58 > 0x8000)
      {
        unsigned int v58 = (char)v58;
      }
      else
      {
        if ((v58 & 0x8000) != 0)
        {
          unsigned int v58 = *(unsigned __int16 *)(v24 + 2 * (((v28 << v42) >> 16) & 0x3FF));
          v29 += (v58 >> 10) & 0x1F;
        }
        int v59 = v58 & 0x1F;
        if ((v58 & 0x1F) != 0)
        {
          if (v29 >= 16)
          {
            int v60 = *(unsigned __int8 *)v14;
            if (v60 == 255) {
              uint64_t v61 = 3;
            }
            else {
              uint64_t v61 = 2;
            }
            if (v60 == 255) {
              uint64_t v62 = 2;
            }
            else {
              uint64_t v62 = 1;
            }
            int v63 = *((unsigned __int8 *)v14 + v62);
            uint64_t v64 = (unsigned __int16 *)((char *)v14 + v61);
            int v65 = (v28 << 16) | (v60 << 8);
            if (v63 == 255) {
              unsigned int v14 = (unsigned __int16 *)((char *)v64 + 1);
            }
            else {
              unsigned int v14 = v64;
            }
            int v28 = v65 | v63;
            v29 -= 16;
          }
          unsigned int v58 = ((v28 << v29) >> -(char)v59) - ((((v28 << v29) >> 31) - 1) >> -(char)v59);
          v29 += v59;
        }
        else
        {
          unsigned int v58 = (v58 << 8) & 0x8000;
        }
      }
      v30 += v41;
      unsigned int v66 = v58 + v114;
      int v67 = v30 << v12;
      v114 += v58;
      if (v11 >= 3)
      {
        int v68 = 2;
        int v69 = v30;
        do
        {
          if ((unint64_t)v14 > v34)
          {
            uint64_t v102 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](v102, "RawCameraException");
            __cxa_throw(v102, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (v29 >= 16)
          {
            int v70 = *(unsigned __int8 *)v14;
            if (v70 == 255) {
              uint64_t v71 = 3;
            }
            else {
              uint64_t v71 = 2;
            }
            if (v70 == 255) {
              uint64_t v72 = 2;
            }
            else {
              uint64_t v72 = 1;
            }
            int v73 = *((unsigned __int8 *)v14 + v72);
            uint64_t v74 = (unsigned __int16 *)((char *)v14 + v71);
            int v75 = (v28 << 16) | (v70 << 8);
            if (v73 == 255) {
              unsigned int v14 = (unsigned __int16 *)((char *)v74 + 1);
            }
            else {
              unsigned int v14 = v74;
            }
            int v28 = v75 | v73;
            v29 -= 16;
          }
          unsigned int v76 = *(unsigned __int16 *)(v25 + 2 * ((v28 << v29) >> 23));
          int v77 = ((v76 >> 10) & 0x1F) + v29;
          *int64x2_t v5 = v67;
          if (v76 > 0x8000)
          {
            int v86 = (char)v76;
          }
          else
          {
            if ((v76 & 0x8000) != 0)
            {
              unsigned int v76 = *(unsigned __int16 *)(v25 + 2 * (((v28 << v29) >> 16) & 0x3FF));
              v77 += (v76 >> 10) & 0x1F;
            }
            int v78 = v76 & 0x1F;
            if ((v76 & 0x1F) != 0)
            {
              int v79 = v77 - 16;
              if (v77 >= 16)
              {
                int v80 = *(unsigned __int8 *)v14;
                if (v80 == 255) {
                  uint64_t v81 = 3;
                }
                else {
                  uint64_t v81 = 2;
                }
                if (v80 == 255) {
                  uint64_t v82 = 2;
                }
                else {
                  uint64_t v82 = 1;
                }
                int v83 = *((unsigned __int8 *)v14 + v82);
                uint64_t v84 = (unsigned __int16 *)((char *)v14 + v81);
                int v85 = (v28 << 16) | (v80 << 8);
                if (v83 == 255) {
                  unsigned int v14 = (unsigned __int16 *)((char *)v84 + 1);
                }
                else {
                  unsigned int v14 = v84;
                }
                int v28 = v85 | v83;
                int v77 = v79;
              }
              int v86 = ((v28 << v77) >> -(char)v78)
                  - ((((v28 << v77) >> 31) - 1) >> -(char)v78);
              v77 += v78;
            }
            else
            {
              int v86 = (v76 << 8) & 0x8000;
            }
          }
          int v87 = v77 - 16;
          if (v77 >= 16)
          {
            int v88 = *(unsigned __int8 *)v14;
            if (v88 == 255) {
              uint64_t v89 = 3;
            }
            else {
              uint64_t v89 = 2;
            }
            if (v88 == 255) {
              uint64_t v90 = 2;
            }
            else {
              uint64_t v90 = 1;
            }
            int v91 = *((unsigned __int8 *)v14 + v90);
            int v92 = (unsigned __int16 *)((char *)v14 + v89);
            int v93 = (v28 << 16) | (v88 << 8);
            if (v91 == 255) {
              unsigned int v14 = (unsigned __int16 *)((char *)v92 + 1);
            }
            else {
              unsigned int v14 = v92;
            }
            int v28 = v93 | v91;
            int v77 = v87;
          }
          unsigned int v94 = *(unsigned __int16 *)(v24 + 2 * ((v28 << v77) >> 23));
          int v29 = ((v94 >> 10) & 0x1F) + v77;
          v5[1] = v66 << v12;
          if (v94 > 0x8000)
          {
            unsigned int v94 = (char)v94;
          }
          else
          {
            if ((v94 & 0x8000) != 0)
            {
              unsigned int v94 = *(unsigned __int16 *)(v24 + 2 * (((v28 << v77) >> 16) & 0x3FF));
              v29 += (v94 >> 10) & 0x1F;
            }
            int v95 = v94 & 0x1F;
            if ((v94 & 0x1F) != 0)
            {
              if (v29 >= 16)
              {
                int v96 = *(unsigned __int8 *)v14;
                if (v96 == 255) {
                  uint64_t v97 = 3;
                }
                else {
                  uint64_t v97 = 2;
                }
                if (v96 == 255) {
                  uint64_t v98 = 2;
                }
                else {
                  uint64_t v98 = 1;
                }
                int v99 = *((unsigned __int8 *)v14 + v98);
                double v100 = (unsigned __int16 *)((char *)v14 + v97);
                int v101 = (v28 << 16) | (v96 << 8);
                if (v99 == 255) {
                  unsigned int v14 = (unsigned __int16 *)((char *)v100 + 1);
                }
                else {
                  unsigned int v14 = v100;
                }
                int v28 = v101 | v99;
                v29 -= 16;
              }
              unsigned int v94 = ((v28 << v29) >> -(char)v95)
                  - ((((v28 << v29) >> 31) - 1) >> -(char)v95);
              v29 += v95;
            }
            else
            {
              unsigned int v94 = (v94 << 8) & 0x8000;
            }
          }
          v69 += v86;
          v5 += 2;
          v66 += v94;
          v68 += 2;
          int v67 = v69 << v12;
        }
        while (v68 < v11);
      }
      *int64x2_t v5 = v67;
      v5[1] = v66 << v12;
      v5 += 2;
      if (++v27 == v111) {
        goto LABEL_177;
      }
    }
    uint64_t v33 = 0;
    unint64_t v34 = (unint64_t)v26;
    while (*((unsigned __int8 *)v14 + v33 - 8) != 255 || (*((unsigned char *)v14 + v33 - 7) & 0xF8) != 0xD0)
    {
      if (++v33 == 12)
      {
        __int16 v107 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](v107, "RawCameraException");
        __cxa_throw(v107, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    int v28 = 0;
    v31 += v23;
    unsigned int v14 = (unsigned __int16 *)((char *)v14 + v33 - 6);
    int v29 = 32;
    int v30 = 1 << (v110 + ~v12);
    int v114 = v30;
LABEL_57:
    int v35 = *(unsigned __int8 *)v14;
    if (v35 == 255) {
      uint64_t v36 = 3;
    }
    else {
      uint64_t v36 = 2;
    }
    if (v35 == 255) {
      uint64_t v37 = 2;
    }
    else {
      uint64_t v37 = 1;
    }
    int v38 = *((unsigned __int8 *)v14 + v37);
    int v39 = (unsigned __int16 *)((char *)v14 + v36);
    v29 -= 16;
    int v40 = (v28 << 16) | (v35 << 8);
    if (v38 == 255) {
      unsigned int v14 = (unsigned __int16 *)((char *)v39 + 1);
    }
    else {
      unsigned int v14 = v39;
    }
    int v28 = v40 | v38;
    goto LABEL_67;
  }
LABEL_177:
  v109[2](v109);
}

void sub_1DDB0885C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB0894C(uint64_t a1)
{
  int64x2_t v2 = sub_1DDA83CFC();
  int64x2_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int64x2_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CLosslessJpegRestartUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB089D4(void *a1)
{
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDB08A0C(os_signpost_id_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int64x2_t v2 = sub_1DDA83CFC();
  int64x2_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CSonyCompressedUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = sub_1DDB08D98;
  double v5[3] = &unk_1E6D04A58;
  v5[4] = a1;
  MEMORY[0x1E01C46E0](v5);
  sub_1DDAA72BC(a1);
  if ((*(_DWORD *)(a1 + 44) & 0x1F) == 0) {
    operator new[]();
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDB08D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB08D98(uint64_t a1)
{
  int64x2_t v2 = sub_1DDA83CFC();
  int64x2_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int64x2_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSonyCompressedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDB08E20(uint64_t result, int32x2_t *a2, int8x16_t *a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  *(int32x2_t *)a4.i8 = *a2;
  *(int32x2_t *)a5.i8 = a2[1];
  int8x16_t v7 = (int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(a4, vdupq_lane_s32(*a2, 1)), (uint32x4_t)xmmword_1DDBFD7F0);
  v8.i64[0] = 0x7F0000007FLL;
  v8.i64[1] = 0x7F0000007FLL;
  v9.i32[1] = 127;
  v9.i64[1] = 0x7F0000007FLL;
  v9.i32[0] = 4 * (HIDWORD(*(unint64_t *)a2) & 0x1F);
  int32x4_t v10 = (int32x4_t)vorrq_s8(v7, v9);
  int8x16_t v11 = vandq_s8(v7, v8);
  v11.i32[0] = v10.i32[0];
  uint32x4_t v12 = (uint32x4_t)vzip1q_s32(a5, a5);
  unsigned __int32 v13 = a5.u32[1];
  *(int32x2_t *)v10.i8 = vzip1_s32(vdup_lane_s32(*a2, 1), *(int32x2_t *)a5.i8);
  int8x16_t v14 = (int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v10, vdupq_lane_s32(*(int32x2_t *)v10.i8, 1)), (uint32x4_t)xmmword_1DDBFD800);
  v10.i32[1] = 127;
  v10.i64[1] = 0x7F0000007FLL;
  v10.i32[0] = (*(void *)&a2[1] & 1) << 6;
  v10.i32[0] = vorrq_s8(v14, (int8x16_t)v10).u32[0];
  int8x16_t v15 = vandq_s8(v14, v8);
  v15.i32[0] = v10.i32[0];
  int8x16_t v16 = (int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_1DDBFD810);
  int8x16_t v17 = vandq_s8(v16, v8);
  v8.i32[1] = 8 * (v13 & 0xF);
  v58[0] = v11;
  v58[1] = v15;
  int v18 = (v13 >> 18) & 0x7F;
  unsigned __int32 v19 = v13 >> 25;
  unsigned int v20 = ((unsigned __int32)a4.i32[0] >> 11) & 0x7FF;
  v17.i32[1] = vorrq_s8(v16, v8).i32[1];
  v58[2] = v17;
  int v21 = a4.i16[0] & 0x7FF;
  unint64_t v22 = ((unsigned __int32)a4.i32[0] >> 22) & 0xF;
  unint64_t v23 = ((unsigned __int32)a4.i32[0] >> 26) & 0xF;
  int v59 = v18;
  unsigned __int32 v60 = v19;
  do
  {
    if (4 * (((unsigned __int32)a4.i32[0] >> 26) & 0xF) == v5)
    {
      *(_DWORD *)&v57[4 * v23] = v20;
    }
    else if (4 * (((unsigned __int32)a4.i32[0] >> 22) & 0xF) == v5)
    {
      *(_DWORD *)&v57[4 * v22] = v21;
    }
    else
    {
      *(_DWORD *)&v57[v5] = *((_DWORD *)v58 + v6++);
    }
    v5 += 4;
  }
  while (v5 != 64);
  int v24 = v21 - v20;
  if (v21 - v20 < 0x400) {
    int v25 = 3;
  }
  else {
    int v25 = 4;
  }
  if (v24 >= 0x200) {
    int v26 = v25;
  }
  else {
    int v26 = 2;
  }
  if (v24 >= 0x100) {
    unsigned int v27 = v26;
  }
  else {
    unsigned int v27 = 1;
  }
  if (v24 < 128) {
    unsigned int v27 = 0;
  }
  uint64_t v28 = 0;
  int64x2_t v29 = vdupq_n_s64(v23);
  int64x2_t v30 = vdupq_n_s64(v22);
  uint32x4_t v31 = (uint32x4_t)vdupq_n_s32(v27);
  int64x2_t v32 = (int64x2_t)xmmword_1DDBF8D70;
  int64x2_t v33 = (int64x2_t)xmmword_1DDBF8D80;
  int64x2_t v34 = (int64x2_t)xmmword_1DDBF8D90;
  int32x4_t v35 = vdupq_n_s32(v20);
  int64x2_t v36 = (int64x2_t)xmmword_1DDBF8D60;
  v37.i64[0] = 0xF8000000F800;
  v37.i64[1] = 0xF8000000F800;
  int v38 = a3;
  int64x2_t v39 = vdupq_n_s64(8uLL);
  do
  {
    int16x8_t v41 = *(int16x8_t *)&v57[v28];
    int16x8_t v40 = *(int16x8_t *)&v57[v28 + 16];
    int16x8_t v42 = (int16x8_t)vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v40, v31), v35);
    int16x8_t v43 = (int16x8_t)vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v41, v31), v35);
    int8x16_t v44 = (int8x16_t)vuzp1q_s16(v43, v42);
    int8x16_t v45 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v43, v37)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v42, v37)));
    *v38++ = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vceqq_s64(v36, v29)), (int8x16_t)vceqq_s64(v36, v30)), (int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vceqq_s64(v34, v29)), (int8x16_t)vceqq_s64(v34, v30))), (int16x8_t)vuzp1q_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vceqq_s64(v33, v29)), (int8x16_t)vceqq_s64(v33, v30)), (int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vceqq_s64(v32, v29)), (int8x16_t)vceqq_s64(v32, v30)))), vorrq_s8(vandq_s8(v44, v45), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v45) & __PAIR128__(0x7FF07FF07FF07FFLL, 0x7FF07FF07FF07FFLL))), (int8x16_t)vuzp1q_s16(v41, v40));
    int64x2_t v33 = vaddq_s64(v33, v39);
    int64x2_t v34 = vaddq_s64(v34, v39);
    int64x2_t v36 = vaddq_s64(v36, v39);
    int64x2_t v32 = vaddq_s64(v32, v39);
    v28 += 32;
  }
  while (v28 != 64);
  uint64_t v46 = 0;
  uint64_t v47 = *(unsigned __int16 **)(result + 192);
  do
  {
    __int16 v48 = 8 * a3->i16[v46];
    unsigned int v49 = v48 & 0x3FF8;
    if (v49 <= *v47)
    {
      v49 >>= 2;
    }
    else
    {
      if (v49 <= v47[1])
      {
        unsigned int v53 = **(unsigned __int16 **)(result + 216);
        BOOL v54 = v49 >= v53;
        unsigned int v49 = (v49 - v53) >> 1;
      }
      else if (v49 <= v47[2])
      {
        unsigned int v55 = *(unsigned __int16 *)(*(void *)(result + 216) + 2);
        BOOL v54 = v49 >= v55;
        LOWORD(v49) = v49 - v55;
      }
      else
      {
        uint64_t v50 = *(void *)(result + 216);
        if (v49 > v47[3])
        {
          unsigned int v51 = *(unsigned __int16 *)(v50 + 6);
          __int16 v52 = 4 * (v48 - v51);
          if (v49 >= v51) {
            LOWORD(v49) = v52;
          }
          else {
            LOWORD(v49) = 0;
          }
          goto LABEL_35;
        }
        unsigned int v56 = *(unsigned __int16 *)(v50 + 4);
        BOOL v54 = v49 >= v56;
        LOWORD(v49) = 2 * (v49 - v56);
      }
      if (!v54) {
        LOWORD(v49) = 0;
      }
    }
LABEL_35:
    if ((unsigned __int16)v49 >= 0x3FFFu) {
      LOWORD(v49) = 0x3FFF;
    }
    a3->i16[v46++] = v49;
  }
  while (v46 != 16);
  return result;
}

void sub_1DDB09160(os_signpost_id_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int64x2_t v2 = sub_1DDA83CFC();
  int64x2_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CSonyCompressedUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = sub_1DDB095C8;
  double v5[3] = &unk_1E6D04A58;
  v5[4] = a1;
  MEMORY[0x1E01C46E0](v5);
  if ((*(_DWORD *)(a1 + 44) & 0x1F) == 0)
  {
    sub_1DDAA72BC(a1);
    operator new[]();
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1E01C3B90](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1DDB09540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB095C8(uint64_t a1)
{
  int64x2_t v2 = sub_1DDA83CFC();
  int64x2_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSonyCompressedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

char *sub_1DDB09650(uint64_t a1, uint64_t a2)
{
  int64x2_t result = (char *)(a1 + 192);
  if (result != (char *)a2) {
    return sub_1DDA49474(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  }
  return result;
}

char *sub_1DDB09674(uint64_t a1, uint64_t a2)
{
  int64x2_t result = (char *)(a1 + 216);
  if (result != (char *)a2) {
    return sub_1DDA49474(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  }
  return result;
}

void *sub_1DDB09698(void *a1)
{
  *a1 = &unk_1F3976288;
  int64x2_t v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  int64x2_t v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDB09708(void *a1)
{
  *a1 = &unk_1F3976288;
  int64x2_t v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  int64x2_t v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB0978C(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 128))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v4, a1);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v4 + 360))();
  if (v5) {
    sub_1DDA18310(v5);
  }
  return v2;
}

void sub_1DDB09860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB09878(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v3, a1);
    (*(void (**)(void))(*(void *)v3 + 336))();
    if (v4) {
      sub_1DDA18310(v4);
    }
  }
  else
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)a1 + 640);
    v2(a1);
  }
}

void sub_1DDB09994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB099B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1) != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDB0B8CC(a2);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1)) {
    goto LABEL_7;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v14, a1);
  char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 328))(v14, a2);
  if (v15) {
    sub_1DDA18310(v15);
  }
  if ((v4 & 1) == 0)
  {
LABEL_7:
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 760))(&v14, a1);
    if (v14 && HIDWORD(v14))
    {
      *(_DWORD *)(a2 + 8) = 17;
      sub_1DDAD88E8((void *)(a2 + 16), (uint64_t)&v14);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 768))(&v11, a1);
    if (v11 && HIDWORD(v11))
    {
      *(_DWORD *)(a2 + 12) = 21;
      sub_1DDAD88E8((void *)(a2 + 48), (uint64_t)&v11);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 632))(__p, a1);
    sub_1DDAD88E8((void *)(a2 + 80), (uint64_t)__p);
    if (__p[1])
    {
      int32x4_t v10 = __p[1];
      operator delete(__p[1]);
    }
    sub_1DDAD88E8((void *)(a2 + 112), a2 + 80);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 776))(__p, a1);
    sub_1DDAD88E8((void *)(a2 + 144), (uint64_t)__p);
    if (__p[1])
    {
      int32x4_t v10 = __p[1];
      operator delete(__p[1]);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 784))(__p, a1);
    sub_1DDAD88E8((void *)(a2 + 176), (uint64_t)__p);
    if (__p[1])
    {
      int32x4_t v10 = __p[1];
      operator delete(__p[1]);
    }
    __p[0] = 0;
    __p[1] = 0;
    int32x4_t v10 = 0;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 808))(a1))
    {
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 704))(&v7, a1);
      *(_OWORD *)std::string __p = v7;
      int32x4_t v10 = v8;
    }
    sub_1DDB1198C((_DWORD *)a2, (uint64_t *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v12)
    {
      unsigned __int32 v13 = v12;
      operator delete(v12);
    }
    if (v15)
    {
      int8x16_t v16 = v15;
      operator delete(v15);
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if ((int)result >= 7) {
    *(_WORD *)(a2 + 208) = 1;
  }
  return result;
}

void sub_1DDB09DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(void *)(v20 - 48) = v22;
    operator delete(v22);
  }
  sub_1DDACB228(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB09E84()
{
  return 0;
}

void sub_1DDB09E8C(uint64_t a1@<X0>, float64x2_t **a2@<X8>)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v16, a1);
  (*(void (**)(void))(*(void *)v16 + 368))();
  if (v17) {
    sub_1DDA18310(v17);
  }
  char v4 = a2[1];
  if (v4 == *a2)
  {
    if (v4) {
      operator delete(v4);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 808))(a1))
    {
      uint64_t v16 = 0x3FF0000000000000;
      sub_1DDA25B2C(a2, 3uLL, &v16);
      return;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 704))(&v16, a1);
    uint64_t v5 = (std::__shared_weak_count *)v16;
    if ((std::__shared_weak_count *)((char *)v17 - v16) == (std::__shared_weak_count *)24)
    {
      float64x2_t v14 = *(float64x2_t *)v16;
      double v6 = *(double *)(v16 + 16);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      long long v7 = (float64x2_t *)operator new(0x18uLL);
      __asm { FMOV            V1.2D, #1.0 }
      a2[1] = (float64x2_t *)((char *)v7 + 24);
      a2[2] = (float64x2_t *)((char *)v7 + 24);
      float64x2_t *v7 = vdivq_f64(_Q1, v14);
      v7[1].f64[0] = 1.0 / v6;
      *a2 = v7;
    }
    else
    {
      uint64_t v15 = 0x3FF0000000000000;
      sub_1DDA25B2C(a2, 3uLL, &v15);
      uint64_t v5 = (std::__shared_weak_count *)v16;
      if (!v16) {
        return;
      }
    }
    int8x16_t v17 = v5;
    operator delete(v5);
  }
}

void sub_1DDB0A0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB0A104(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&__p);
  double v9 = (*(double (**)(void))(*(void *)__p + 376))();
  uint64_t v10 = v2;
  if (v8) {
    sub_1DDA18310(v8);
  }
  if (!sub_1DDB11748(&v9))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1728))(&__p, a1);
    char v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
    char v4 = (std::__shared_weak_count *)__p;
    if (v8 == __p) {
      char v3 = 1;
    }
    if ((v3 & 1) == 0)
    {
      double v9 = sub_1DDB10E94();
      uint64_t v10 = v5;
      char v4 = (std::__shared_weak_count *)__p;
    }
    if (v4)
    {
      int8x16_t v8 = v4;
      operator delete(v4);
    }
  }
  return v9;
}

void sub_1DDB0A238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB0A26C(uint64_t a1)
{
  double v6 = &unk_1F39665D8;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v1 + 600))(v1, __p, &v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDB0A34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0A37C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 680))();
}

void sub_1DDB0A3A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 1728))(a1);
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    uint64_t v10 = 0x3FF0000000000000;
    sub_1DDA25B2C(&v11, 3uLL, &v10);
    uint64_t v4 = *(double **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v4;
      operator delete(v4);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = v11;
    *(void *)(a2 + 16) = v12;
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 688))(&v11, a1);
    uint64_t v5 = (void *)v11;
    if (*((void *)&v11 + 1) - (void)v11 == 24)
    {
      double v6 = *(double *)(v11 + 8);
      double v7 = *(double *)v11 / v6;
      if (v7 > 0.00000001)
      {
        double v8 = *(double *)(v11 + 16) / v6;
        if (v8 > 0.00000001)
        {
          double v9 = *(double **)a2;
          *double v9 = v7;
          void v9[2] = v8;
        }
      }
    }
    else if (!(void)v11)
    {
      return;
    }
    *((void *)&v11 + 1) = v5;
    operator delete(v5);
  }
}

void sub_1DDB0A4D4(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB0A4F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v31[0] = 0;
  v31[1] = 0;
  int64x2_t v32 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 2864))(&v27);
  std::string __p = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  sub_1DDB1609C(v27, (uint64_t)&__p, v3, v4, (char **)&v29);
  if (__p)
  {
    int v25 = __p;
    operator delete(__p);
  }
  if (v28) {
    sub_1DDA18310(v28);
  }
  unint64_t v5 = (unint64_t)(v30 - (unsigned char *)v29) >> 3;
  if (v5 > 4) {
    goto LABEL_36;
  }
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = ((unint64_t)(v30 - (unsigned char *)v29) >> 3);
    do
    {
      double v8 = (double *)v29;
      double v9 = *((double *)v29 + v6);
      if (v9 > 0.0)
      {
        uint64_t v10 = (char *)v31[1];
        if (v31[1] >= v32)
        {
          uint64_t v12 = (char *)v31[0];
          int64_t v13 = ((char *)v31[1] - (char *)v31[0]) >> 3;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_1DDA17F78();
          }
          uint64_t v15 = v32 - (char *)v31[0];
          if ((v32 - (char *)v31[0]) >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            int8x16_t v17 = (char *)sub_1DDA1814C((uint64_t)&v32, v16);
            uint64_t v12 = (char *)v31[0];
            uint64_t v10 = (char *)v31[1];
            double v9 = v8[v6];
          }
          else
          {
            int8x16_t v17 = 0;
          }
          int v18 = (double *)&v17[8 * v13];
          *int v18 = v9;
          long long v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10 - 1);
            v10 -= 8;
            *((void *)v18-- - 1) = v19;
          }
          v31[0] = v18;
          v31[1] = v11;
          int64x2_t v32 = &v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(double *)v31[1] = v9;
          long long v11 = v10 + 8;
        }
        v31[1] = v11;
      }
      ++v6;
    }
    while (v6 != v7);
  }
  uint64_t v20 = v31[0];
  if ((void *)((char *)v31[1] - (char *)v31[0]) != (void *)16
    || *(double *)v31[0] >= 0.0
    && ((v21 = *((double *)v31[0] + 1), v21 >= 0.0) ? (BOOL v22 = *(double *)v31[0] + v21 <= 1.0) : (BOOL v22 = 0), v22))
  {
LABEL_36:
    if (v29)
    {
      int64x2_t v30 = v29;
      operator delete(v29);
    }
    double result = *(double *)v31;
    *(_OWORD *)a2 = *(_OWORD *)v31;
    *(void *)(a2 + 16) = v32;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    if (!v29 || (int64x2_t v30 = v29, operator delete(v29), (v20 = v31[0]) != 0))
    {
      v31[1] = v20;
      operator delete(v20);
    }
  }
  return result;
}

void sub_1DDB0A71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    sub_1DDA18310(a13);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB0A778(uint64_t a1)
{
  long long v11 = 0uLL;
  (*(void (**)(char **__return_ptr))(*(void *)a1 + 712))(&v9);
  uint64_t v2 = (v10 - v9) >> 3;
  if ((unint64_t)(v2 - 3) < 2)
  {
    (*(void (**)(unsigned int *__return_ptr, uint64_t))(*(void *)a1 + 648))(v8, a1);
    *(void *)&long long v11 = sub_1DDB13638(v8, (uint64_t *)&v9);
    *((void *)&v11 + 1) = v3;
LABEL_3:
    sub_1DDACB228(v8);
    goto LABEL_7;
  }
  if (v2 == 2)
  {
    long long v11 = *(_OWORD *)v9;
  }
  else
  {
    *(void *)&long long v11 = (*(double (**)(uint64_t))(*(void *)a1 + 672))(a1);
    *((void *)&v11 + 1) = v4;
    if (!sub_1DDB11748((double *)&v11))
    {
      (*(void (**)(unsigned int *__return_ptr, uint64_t))(*(void *)a1 + 648))(v8, a1);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 664))(__p, a1);
      *(void *)&long long v11 = sub_1DDB13638(v8, (uint64_t *)__p);
      *((void *)&v11 + 1) = v6;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_3;
    }
  }
LABEL_7:
  if (getenv("RAWCAMERA_LOG_WHITEPOINT")) {
    printf("WhitePoint: x=%1.4lf  |  y=%1.4lf \n", *(double *)&v11, *((double *)&v11 + 1));
  }
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  return *(double *)&v11;
}

void sub_1DDB0A954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1DDACB228(&a15);
  int8x16_t v17 = *(void **)(v15 - 56);
  if (v17)
  {
    *(void *)(v15 - 48) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

void *sub_1DDB0A9A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 648))(v34);
  double v25 = (*(double (**)(uint64_t))(*(void *)a1 + 720))(a1);
  uint64_t v26 = v4;
  sub_1DDAD8240((uint64_t)&v28, 3u, 3u, 0.6097, v5, v6, v7, v8, v9, 0x3FCA474538EF34D7);
  sub_1DDB121FC((uint64_t)v34, &v25, &v28, &v31);
  if (__p)
  {
    int64x2_t v30 = __p;
    operator delete(__p);
  }
  if (v31 && HIDWORD(v31))
  {
    sub_1DDAD8240((uint64_t)&v25, 3u, 1u, 1.0, v10, v11, v12, v13, v14, 0x3FF0000000000000);
    sub_1DDAD8FBC((unsigned int *)&v31, &v20);
    sub_1DDAD8BC8((unsigned int *)&v20, &v25, (uint64_t)&v22);
    if (*((void *)&v20 + 1))
    {
      uint64_t v21 = *((void *)&v20 + 1);
      operator delete(*((void **)&v20 + 1));
    }
    double v15 = sub_1DDAD97A4((unsigned int *)&v22);
    sub_1DDAD8AE0((unsigned int *)&v22, (uint64_t)&v20, 1.0 / v15);
    sub_1DDAD88E8(&v22, (uint64_t)&v20);
    if (*((void *)&v20 + 1))
    {
      uint64_t v21 = *((void *)&v20 + 1);
      operator delete(*((void **)&v20 + 1));
    }
    sub_1DDA24B78(a2, 3uLL);
    *(void *)&long long v20 = sub_1DDAD8560((uint64_t)&v22, 0);
    *((void *)&v20 + 1) = v16;
    *(double *)*a2 = 1.0 / *(double *)sub_1DDAD85FC((uint64_t)&v20, 0);
    *(void *)&long long v20 = sub_1DDAD8560((uint64_t)&v22, 1u);
    *((void *)&v20 + 1) = v17;
    *(double *)(*a2 + 8) = 1.0 / *(double *)sub_1DDAD85FC((uint64_t)&v20, 0);
    *(void *)&long long v20 = sub_1DDAD8560((uint64_t)&v22, 2u);
    *((void *)&v20 + 1) = v18;
    *(double *)(*a2 + 16) = 1.0 / *(double *)sub_1DDAD85FC((uint64_t)&v20, 0);
    if (v23)
    {
      int v24 = v23;
      operator delete(v23);
    }
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
  }
  else
  {
    double v25 = 1.0;
    sub_1DDA25B2C(a2, 3uLL, &v25);
  }
  if (v32)
  {
    int64x2_t v33 = v32;
    operator delete(v32);
  }
  return sub_1DDACB228(v34);
}

void sub_1DDB0AC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1DDACB228(&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB0AD58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v11 = (double)(*(unsigned int (**)(uint64_t))(*(void *)a1 + 920))(a1);
  return sub_1DDAD8240(a2, 3u, 1u, v11, v4, v5, v6, v7, v8, *(uint64_t *)&v11);
}

void sub_1DDB0AE30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB0AE44(uint64_t a1@<X0>, double **a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 728))(v28);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 736))(&v25, a1);
  v21[0] = sub_1DDAD8560((uint64_t)&v25, 0);
  v21[1] = v4;
  double v5 = *(double *)sub_1DDAD85FC((uint64_t)v21, 0);
  double v6 = *(double *)v28[0];
  v20[0] = sub_1DDAD8560((uint64_t)&v25, 1u);
  v20[1] = v7;
  double v8 = *(double *)sub_1DDAD85FC((uint64_t)v20, 0);
  double v9 = *((double *)v28[0] + 1);
  v19[0] = sub_1DDAD8560((uint64_t)&v25, 2u);
  v19[1] = v10;
  sub_1DDAD85FC((uint64_t)v19, 0);
  sub_1DDAD8240((uint64_t)&v22, 3u, 1u, v5 * v6, v11, v12, v13, v14, v15, COERCE__INT64(v8 * v9));
  double v16 = sub_1DDAD97A4(&v22);
  sub_1DDA24B78(a2, 3uLL);
  uint64_t v17 = (double *)v28[0];
  uint64_t v18 = *a2;
  *uint64_t v18 = *(double *)v28[0] * 32767.0 / v16;
  v18[1] = v17[1] * 32767.0 / v16;
  void v18[2] = v17[2] * 32767.0 / v16;
  if (__p)
  {
    int v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
}

void sub_1DDB0B010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v26 = *(void **)(v24 - 72);
  if (v26)
  {
    *(void *)(v24 - 64) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0B064(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1200))();
}

uint64_t sub_1DDB0B090(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1168))();
}

uint64_t sub_1DDB0B0BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1176))();
}

uint64_t sub_1DDB0B0E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1184))();
}

uint64_t sub_1DDB0B114(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1192))();
}

void *sub_1DDB0B140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(int (**)(uint64_t))(*(void *)a1 + 120))(a1) <= 6
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1) != 2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 648))(v46, a1);
  int64x2_t v36 = COERCE_VOID_((*(double (**)(uint64_t))(*(void *)a1 + 720))(a1));
  int8x16_t v37 = v6;
  sub_1DDAD8240((uint64_t)&v40, 3u, 3u, 0.6097, v7, v8, v9, v10, v11, 0x3FCA474538EF34D7);
  sub_1DDB121FC((uint64_t)v46, (double *)&v36, &v40, &v43);
  if (__p)
  {
    int16x8_t v42 = __p;
    operator delete(__p);
  }
  int64x2_t v36 = 0;
  sub_1DDA25B2C(v39, 3uLL, &v36);
  if (a2)
  {
    sub_1DDAD849C(3u, (uint64_t)&v33);
    double v12 = (*(double (**)(uint64_t, uint64_t))(*(void *)a1 + 800))(a1, a2);
    sub_1DDAD8AE0((unsigned int *)&v33, (uint64_t)&v36, v12);
    sub_1DDAD88E8(&v43, (uint64_t)&v36);
    if (v37)
    {
      int v38 = v37;
      operator delete(v37);
    }
    if (v34)
    {
      int32x4_t v35 = v34;
      operator delete(v34);
    }
  }
  else
  {
    long double v13 = (*(double (**)(uint64_t))(*(void *)a1 + 928))(a1);
    double v14 = (*(double (**)(uint64_t))(*(void *)a1 + 952))(a1) * 0.001;
    double v15 = 1.0 / (1.0 / exp2(v13) - v14);
    sub_1DDAD8AE0((unsigned int *)&v43, (uint64_t)&v36, v15);
    sub_1DDAD88E8(&v43, (uint64_t)&v36);
    if (v37)
    {
      int v38 = v37;
      operator delete(v37);
    }
    double v16 = v15 * v14 * -65535.0;
    uint64_t v17 = (double *)v39[0];
    *(double *)v39[0] = v16;
    v17[1] = v16;
    void v17[2] = v16;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 744))(&v36, a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1) == 2)
  {
    uint64_t v18 = (double *)v36;
    uint64_t v19 = (double *)v37;
    while (v18 != v19)
    {
      float v20 = *v18;
      *v18++ = v20;
    }
  }
  if (sub_1DDAD88D8((unsigned int *)&v43) != 3
    || sub_1DDAD88E0((uint64_t)&v43) != 3 && sub_1DDAD88E0((uint64_t)&v43) != 4)
  {
    int64x2_t v30 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v30, "RawCameraException");
    __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDAD823C(a3, 3u, 5u);
  for (uint64_t i = 0; i != 3; ++i)
  {
    for (unint64_t j = 0; j != 4; ++j)
    {
      double v23 = 0.0;
      if (j < sub_1DDAD88E0((uint64_t)&v43))
      {
        uint64_t v33 = sub_1DDAD8560((uint64_t)&v43, i);
        int64x2_t v34 = v24;
        uint64_t v25 = (double *)sub_1DDAD85FC((uint64_t)&v33, j);
        if (j >= ((unsigned char *)v37 - (unsigned char *)v36) >> 3) {
          sub_1DDA24AD0();
        }
        double v23 = *v25 / *((double *)v36 + j);
      }
      v32[0] = sub_1DDAD8560(a3, i);
      v32[1] = v26;
      *(double *)sub_1DDAD85FC((uint64_t)v32, j) = v23;
    }
    uint64_t v27 = *((void *)v39[0] + i);
    uint64_t v33 = sub_1DDAD8560(a3, i);
    int64x2_t v34 = v28;
    *(void *)sub_1DDAD85FC((uint64_t)&v33, 4u) = v27;
  }
  if (v36)
  {
    int8x16_t v37 = v36;
    operator delete(v36);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (v44)
  {
    int8x16_t v45 = v44;
    operator delete(v44);
  }
  return sub_1DDACB228(v46);
}

void sub_1DDB0B6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a35) {
    operator delete(a35);
  }
  sub_1DDACB228(&a38);
  _Unwind_Resume(a1);
}

void sub_1DDB0B7BC(uint64_t a1, int a2)
{
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2152))(a1);
  if (a2 && (v4 & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, double))(*(void *)a1 + 736))(&v5, a1, 1.0);
    sub_1DDAD97A4((unsigned int *)&v5);
    if (__p)
    {
      uint64_t v7 = __p;
      operator delete(__p);
    }
  }
}

void sub_1DDB0B884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0B8A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 1160))();
}

uint64_t sub_1DDB0B8CC(uint64_t a1)
{
  *(void *)a1 = &unk_1F39681B8;
  *(void *)(a1 + 8) = 0;
  sub_1DDAD80DC((_OWORD *)(a1 + 16));
  sub_1DDAD80DC((_OWORD *)(a1 + 48));
  sub_1DDAD80DC((_OWORD *)(a1 + 80));
  sub_1DDAD80DC((_OWORD *)(a1 + 112));
  sub_1DDAD80DC((_OWORD *)(a1 + 144));
  sub_1DDAD80DC((_OWORD *)(a1 + 176));
  *(_WORD *)(a1 + 208) = 0;
  sub_1DDAD80DC((_OWORD *)(a1 + 216));
  sub_1DDAD80DC((_OWORD *)(a1 + 248));
  return a1;
}

void sub_1DDB0B94C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[28];
  if (v3)
  {
    v1[29] = v3;
    operator delete(v3);
  }
  char v4 = (void *)v1[23];
  if (v4)
  {
    v1[24] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)v1[19];
  if (v5)
  {
    v1[20] = v5;
    operator delete(v5);
  }
  double v6 = (void *)v1[15];
  if (v6)
  {
    v1[16] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)v1[11];
  if (v7)
  {
    v1[12] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)v1[7];
  if (v8)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)v1[3];
  if (v9)
  {
    v1[4] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB0B9F8(uint64_t a1@<X0>, unsigned int *a2@<X8>)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1))
  {
    sub_1DDB099AC(a2);
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 1744))(&v15, a1);
    if (v16 - (unsigned char *)v15 != 24
      || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 2952))(a1) & 0x80000000) != 0)
    {
      sub_1DDB099AC(a2);
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 2960))(&v13, a1);
      if (v14 - (unsigned char *)v13 == 24
        && (double v4 = *((double *)v15 + 1),
            double v5 = *((double *)v13 + 1),
            double v6 = *(double *)v15 / v4 / (*(double *)v13 / v5),
            COERCE__INT64(fabs(v6)) <= 0x7FEFFFFFFFFFFFFFLL)
        && v6 >= 0.8
        && v6 <= 1.25
        && (double v7 = *((double *)v15 + 2) / v4 / (*((double *)v13 + 2) / v5), COERCE__INT64(fabs(v7)) <= 0x7FEFFFFFFFFFFFFFLL)
        && v7 >= 0.8
        && v7 <= 1.25)
      {
        sub_1DDAD849C(3u, (uint64_t)a2);
        uint64_t v10 = sub_1DDAD8560((uint64_t)a2, 0);
        std::string __p = v8;
        *(double *)sub_1DDAD85FC((uint64_t)&v10, 0) = v6;
        uint64_t v10 = sub_1DDAD8560((uint64_t)a2, 2u);
        std::string __p = v9;
        *(double *)sub_1DDAD85FC((uint64_t)&v10, 2u) = v7;
        sub_1DDAD944C(a2, (uint64_t)&v10, 10000.0);
        sub_1DDAD88E8(a2, (uint64_t)&v10);
        if (__p)
        {
          double v12 = __p;
          operator delete(__p);
        }
      }
      else
      {
        sub_1DDB099AC(a2);
      }
      if (v13)
      {
        double v14 = v13;
        operator delete(v13);
      }
    }
    if (v15)
    {
      double v16 = v15;
      operator delete(v15);
    }
  }
}

void sub_1DDB0BCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0BD18(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = sub_1DDB0BDDC(v2, @"daylightMultipliersOffset", v3, &unk_1F3976368);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDB0BDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0BDDC(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a4;
  sub_1DDAB6A18(v7, a3, &__p);
  uint64_t v9 = (uint64_t **)(a1 + 24);
  uint64_t v10 = sub_1DDA2A530(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    _DWORD v29[2] = sub_1DDB0C5F8;
    _DWORD v29[3] = &unk_1E6D051C0;
    long double v13 = (uint64_t (**)(void))v8;
    id v30 = v13;
    sub_1DDB657E4(a1, v7, v29, &p_p);
    uint64_t v18 = (long long *)p_p;
    if (p_p)
    {
      uint64_t v19 = sub_1DDB67AB8((uint64_t)p_p, v14, v15, v16, v17);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);
    }
    else
    {
      uint64_t v12 = 0;
    }
    if (v34) {
      sub_1DDA18310(v34);
    }

    if (!v18) {
      uint64_t v12 = v13[2](v13);
    }
    p_p = &__p;
    uint64_t v24 = sub_1DDAB6C70(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_p);
    uint64_t v25 = (void (**)(uint64_t, void, std::string **, void, void))(v24 + 7);
    v32[1] = (uint64_t (*)(void, void, void, void, void))v12;
    v32[0] = (uint64_t (*)(void, void, void, void, void))sub_1DDB0C690;
    if (v32 != (uint64_t (**)(void, void, void, void, void))(v24 + 7))
    {
      uint64_t v26 = *v25;
      if (*v25)
      {
        p_p = 0;
        int64x2_t v34 = 0;
        v26(2, v25, &p_p, 0, 0);
        v32[0](2, v32, v25, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(void, void, void, void, void), void, void))p_p)(2, &p_p, v32, 0, 0);
        sub_1DDAB6E58((uint64_t (**)(void, void, void, void, void))&p_p);
      }
      else
      {
        *((_DWORD *)v24 + 16) = v12;
        v24[7] = (uint64_t)sub_1DDB0C690;
        v32[0] = 0;
      }
    }
    sub_1DDAB6E58(v32);
  }
  else
  {
    uint64_t v11 = (unsigned int *)sub_1DDB0C644((uint64_t (**)(uint64_t, void, void, void, void *))v10 + 7);
    if (!v11) {
      sub_1DDAB6C00();
    }
    uint64_t v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v12;
}

void sub_1DDB0C0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  __cxa_free_exception(v28);

  if (a26) {
    sub_1DDA18310(a26);
  }

  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1DDB0C14C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DDB0C154(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = &unk_1F39665D8;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v8);
  uint64_t v5 = sub_1DDA28220(v8, a2, (uint64_t)&v10);
  if (v9) {
    sub_1DDA18310(v9);
  }
  uint64_t v6 = a3[1];
  if (v6 != *a3)
  {
    if (v5 >= (unint64_t)((v6 - *a3) >> 2)) {
      return 0;
    }
    else {
      return *(unsigned int *)(*a3 + 4 * v5);
    }
  }
  return v5;
}

void sub_1DDB0C210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1DDA18310(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB0C228(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 8) = a2;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  (*(void (**)(void))(*(void *)v4 + 600))();
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDB0C2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0C2FC(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v3);
  sub_1DDACF46C(&v3, &v5);
  if (v4) {
    sub_1DDA18310(v4);
  }
  if (v5) {
    uint64_t v1 = (*(uint64_t (**)(void *))(*(void *)v5 + 808))(v5);
  }
  else {
    uint64_t v1 = 0;
  }
  if (v6) {
    sub_1DDA18310(v6);
  }
  return v1;
}

void sub_1DDB0C3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

id sub_1DDB0C3C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"isMultipleExposure", v5, v6))
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2984))(a1);
    uint64_t v8 = (void *)MEMORY[0x1E4F1CC28];
    if (v7) {
      uint64_t v8 = (void *)MEMORY[0x1E4F1CC38];
    }
    id v9 = v8;
  }
  else
  {
    sub_1DDBCE65C(a1, v3);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v10 = v9;

  return v10;
}

void sub_1DDB0C47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB0C48C(uint64_t a1@<X0>, void **a2@<X8>)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 960))(a1) != 10) {
    goto LABEL_9;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v9, a1);
  uint64_t v4 = v9;
  sub_1DDA1A880(__p, "IFD0:EXIF:MAKERNOTE:BLACKLEVELS");
  char v5 = (*(uint64_t (**)(uint64_t, void **, void **, void))(*(void *)v4 + 248))(v4, __p, a2, 0);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    sub_1DDA18310(v10);
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      a2[1] = v6;
      operator delete(v6);
    }
LABEL_9:
    sub_1DDBCFB0C(a1, a2);
  }
}

void sub_1DDB0C5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_1DDA18310(a17);
  }
  uint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0C5F8(uint64_t a1)
{
  uint64_t v1 = NSNumber;
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return objc_msgSend_numberWithInt_(v1, v2, v3, v4, v5);
}

uint64_t (**sub_1DDB0C644(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, MEMORY[0x1E4FBA3A8], &unk_1DDBFD878);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DDB0C690(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = MEMORY[0x1E4FBA3A8];
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)a3 = sub_1DDB0C690;
      break;
    case 2:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)a3 = sub_1DDB0C690;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = sub_1DDAB6F70(a4, MEMORY[0x1E4FBA3A8]);
      }
      else {
        BOOL v8 = a5 == &unk_1DDBFD878;
      }
      if (v8) {
        uint64_t result = a2 + 8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_1DDB0C770(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&v5);
  sub_1DDB0C88C(&v5, &v7);
  if (v6) {
    sub_1DDA18310(v6);
  }
  if (v7)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v7 + 792))(&v5);
    BOOL v2 = v5 != 0;
    if (v6) {
      sub_1DDA18310(v6);
    }
  }
  else
  {
    BOOL v2 = 0;
  }
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2952))(a1);
  if (v8) {
    sub_1DDA18310(v8);
  }
  return v2 | v3;
}

void sub_1DDB0C870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1DDB0C88C@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  BOOL v2 = a1;
  uint64_t result = *a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1F395B2A0, (const struct __class_type_info *)&unk_1F3962458, 0)) != 0)
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    BOOL v2 = a2;
  }
  const char *v2 = 0;
  v2[1] = 0;
  return result;
}

void sub_1DDB0C910(uint64_t a1)
{
  sub_1DDA30F38((_DWORD *)a1);
  if (*(unsigned char *)(a1 + 400)) {
    goto LABEL_25;
  }
  *(unsigned char *)(a1 + 400) = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v6, a1);
  sub_1DDB0C88C((void **)&v6, &v8);
  if (v7) {
    sub_1DDA18310(v7);
  }
  if (v8)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 792))(&v6);
    if (v6)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 384))(&v4, a1);
      if (!v4)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1E01C3B90](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      sub_1DDAD58B0(v6, &v4);
      sub_1DDAD6044(v6, &v4);
      sub_1DDAD6644(v6, &v4);
      if (v5) {
        sub_1DDA18310(v5);
      }
      int v2 = 0;
    }
    else
    {
      int v2 = 1;
    }
    if (v7) {
      sub_1DDA18310(v7);
    }
  }
  else
  {
    int v2 = 1;
  }
  if (v9) {
    sub_1DDA18310(v9);
  }
  if (!v2)
  {
LABEL_25:
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2952))(a1) && !*(unsigned char *)(a1 + 401))
    {
      *(unsigned char *)(a1 + 401) = 1;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 384))(&v8, a1);
      (*(void (**)(void *))(*(void *)v8 + 16))(v8);
      if (v9) {
        sub_1DDA18310(v9);
      }
    }
  }
}

void sub_1DDB0CB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1DDA18310(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB0CBA4(uint64_t a1)
{
  sub_1DDA30DE8(a1);
  if (!*(void *)(a1 + 24))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 160))(&v13, a1);
    sub_1DDB0C88C(&v13, &v15);
    if (v14) {
      sub_1DDA18310(v14);
    }
    if (!v15) {
      goto LABEL_23;
    }
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v12, a1);
    (*(void (**)(void **__return_ptr))(*(void *)v12 + 384))(&v13);
    if (*((void *)&v12 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v12 + 1));
    }
    uint64_t v11 = 0;
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    if ((*(unsigned int (**)(void *))(*(void *)v15 + 536))(v15) == 7)
    {
      if (sub_1DDB0D020(a1))
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
        *(void *)&long long v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
        *((void *)&v9 + 1) = v2;
        sub_1DDB0DA1C(&v13, (unint64_t *)&v11, &v10, &v9, &v12);
        uint64_t v3 = v12;
        (*(void (**)(long long *__return_ptr))(*(void *)v15 + 792))(&v9);
        (*(void (**)(uint64_t, long long *))(*(void *)v3 + 208))(v3, &v9);
        if (*((void *)&v9 + 1)) {
          sub_1DDA18310(*((std::__shared_weak_count **)&v9 + 1));
        }
      }
      else
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
        *(void *)&long long v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
        *((void *)&v9 + 1) = v7;
        sub_1DDB0DAB0(&v13, (unint64_t *)&v11, &v10, &v9, &v12);
      }
      long long v8 = v12;
      if (*((void *)&v12 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
      *(_OWORD *)(a1 + 24) = v8;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      if ((*(unsigned int (**)(void *))(*(void *)v15 + 536))(v15) != 1) {
        goto LABEL_21;
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1);
      *(void *)&long long v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
      *((void *)&v9 + 1) = v4;
      sub_1DDAF7844(&v13, (unint64_t *)&v11, &v10, &v9, &v12);
      long long v5 = v12;
      long long v12 = 0uLL;
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
      *(_OWORD *)(a1 + 24) = v5;
      if (!v6)
      {
LABEL_21:
        if (v14) {
          sub_1DDA18310(v14);
        }
LABEL_23:
        if (v16) {
          sub_1DDA18310(v16);
        }
        return;
      }
    }
    sub_1DDA18310(v6);
LABEL_19:
    if (*((void *)&v12 + 1)) {
      sub_1DDA18310(*((std::__shared_weak_count **)&v12 + 1));
    }
    goto LABEL_21;
  }
}

void sub_1DDB0CFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1DDA18310(a17);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 - 32);
  if (v19) {
    sub_1DDA18310(v19);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDB0D020(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 160))(&v13);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v13 + 384))(&v11);
  if (v14) {
    sub_1DDA18310(v14);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v1);
  sub_1DDA18488(&v9, (unint64_t *)&v13);
  sub_1DDA1A94C(v10, &v11, (uint64_t)&v9, 0);
  bzero(&v13, 0x1000uLL);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v11 + 32))(v11, &v13, 4096);
  if (bswap32((unsigned __int16)v13) >> 16 == 65496)
  {
    uint64_t v2 = 2;
    while (v2 <= 4093)
    {
      unsigned int v3 = __rev16(*(unsigned __int16 *)((char *)&v13 + v2));
      if (v3 == 0xFFFF)
      {
        ++v2;
      }
      else
      {
        BOOL v4 = 0;
        if (v3 < 0xFF01) {
          goto LABEL_17;
        }
        unint64_t v5 = (*((unsigned __int8 *)&v13 + v2 + 3) | ((unint64_t)*((unsigned __int8 *)&v13 + v2 + 2) << 8)) - 2;
        if (v5 > 0xFF) {
          goto LABEL_17;
        }
        uint64_t v6 = v2 + 4;
        v2 += v5 + 4;
        if (v2 > 4095) {
          break;
        }
        if (v3 == 65498)
        {
          BOOL v4 = 0;
          if (*((unsigned __int8 *)&v13 + v6) - 1 <= 2)
          {
            uint64_t v7 = 2 * *((unsigned __int8 *)&v13 + v6);
            if (v5 == v7 + 4) {
              BOOL v4 = *((unsigned __int8 *)&v13 + v6 + (v7 | 1)) == 8;
            }
          }
          goto LABEL_17;
        }
      }
    }
  }
  BOOL v4 = 0;
LABEL_17:
  sub_1DDA1AA18(v10);
  if (v12) {
    sub_1DDA18310(v12);
  }
  return v4;
}

void sub_1DDB0D27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17)
{
  if (a15) {
    sub_1DDA18310(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB0D2D0(uint64_t a1@<X0>, float64x2_t **a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 160))(&__p);
  sub_1DDB0C88C(&__p, &v21);
  if (v18) {
    sub_1DDA18310(v18);
  }
  if (v21)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v21 + 784))(&v19);
    uint64_t v4 = v19;
    if (v19)
    {
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1008))(a1);
      uint64_t v16 = v5;
      sub_1DDAA85E4(v4, (int *)&v15, &__p);
      uint64_t v6 = v19;
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1008))(a1);
      uint64_t v16 = v7;
      sub_1DDAA8CD4(v6, (int *)&v15, &__p, a2);
      long long v8 = *a2;
      __asm { FMOV            V1.2D, #0.5 }
      float64x2_t v14 = vmulq_f64(vaddq_f64(**a2, (*a2)[1]), _Q1);
      float64x2_t *v8 = v14;
      v8[1] = v14;
      if (__p)
      {
        uint64_t v18 = (std::__shared_weak_count *)__p;
        operator delete(__p);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    if (v20) {
      sub_1DDA18310(v20);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (v22) {
    sub_1DDA18310(v22);
  }
}

void sub_1DDB0D470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 40);
  if (v18) {
    sub_1DDA18310(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB0D4B4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v13 = 0;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v9);
  uint64_t v3 = v9;
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  if ((*(unsigned int (**)(uint64_t, void **, void **, void))(*(void *)v3 + 248))(v3, __p, v11, 0))
  {
    uint64_t v5 = v11[0];
    uint64_t v4 = v11[1];
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    int64_t v6 = v4 - v5;
    if (v10) {
      sub_1DDA18310(v10);
    }
    if (v6 == 32)
    {
      *(_OWORD *)a2 = *(_OWORD *)v11;
      a2[2] = v12;
      return;
    }
  }
  else
  {
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      sub_1DDA18310(v10);
    }
  }
  sub_1DDA25B2C(a2, 4uLL, &v13);
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
}

void sub_1DDB0D5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB0D62C(uint64_t a1)
{
  int64_t v6 = &unk_1F39665D8;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v4);
  uint64_t v1 = v4;
  sub_1DDA1A880(__p, "IFD0");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v1 + 600))(v1, __p, &v6, 3);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    sub_1DDA18310(v5);
  }
}

void sub_1DDB0D70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDB0D73C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 72))(&v6);
  uint64_t v2 = v6;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  BOOL v4 = sub_1DDAC8A08(v2, @"requireStiching", v3, &unk_1F39763A0);
  if (v7) {
    sub_1DDA18310(v7);
  }
  return v4;
}

void sub_1DDB0D7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0D800()
{
  return 0;
}

id sub_1DDB0D808(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, @"whiteLevelFromTag", v5, v6))
  {
    double v27 = 0.0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v25, a1);
    uint64_t v7 = v25;
    sub_1DDA1A880(__p, "IFD0:SUBIFD0");
    int v12 = (*(uint64_t (**)(uint64_t, void **, double *))(*(void *)v7 + 240))(v7, __p, &v27);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v26) {
      sub_1DDA18310(v26);
    }
    uint64_t v13 = NSNumber;
    if (v12)
    {
      objc_msgSend_numberWithDouble_(NSNumber, v8, v9, v10, v11, v27);
    }
    else
    {
      unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 864))(a1);
      double v16 = (*(double (**)(uint64_t))(*(void *)a1 + 848))(a1) * (double)v15;
      objc_msgSend_numberWithDouble_(v13, v17, v18, v19, v20, v16);
    uint64_t v14 = };
  }
  else
  {
    uint64_t v14 = sub_1DDBCE65C(a1, v3);
  }
  uint64_t v21 = (void *)v14;

  return v21;
}

void sub_1DDB0D9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_1DDA18310(a16);
  }

  _Unwind_Resume(a1);
}

void sub_1DDB0D9E4(uint64_t a1)
{
  sub_1DDA2AD98(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDB0DA1C(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x108uLL);
  sub_1DDAF71F0((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDB0DA9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB0DAB0(void *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X3>, _OWORD *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x11C0uLL);
  sub_1DDB0DB44(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDB0DB30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1DDB0DB44(void *a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F3961BD0;
  sub_1DDB0DBA0((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1DDB0DB8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB0DBA0(uint64_t a1, void *a2, unint64_t *a3, void *a4, _OWORD *a5)
{
  unint64_t v9 = *a3;
  sub_1DDA1A880(v13, "");
  sub_1DDA1A880(__p, "");
  sub_1DDAA1020(a1, a2, v9, a4, a5, (long long *)v13, (long long *)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_1DDB0DC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0DC80(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = (void *)sub_1DDBF0D7C(a1, a2);
  *uint64_t v5 = &unk_1F3976F88;
  v5[12] = 0;
  uint64_t v6 = v5 + 12;
  v5[13] = 0;
  v5[14] = 0;
  *(_DWORD *)(a1 + 12) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 44) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 48) = sub_1DDA19EC8(*a3);
  *(double *)(a1 + 56) = sub_1DDA1A030(*a3);
  *(double *)(a1 + 64) = sub_1DDA1A030(*a3);
  *(double *)(a1 + 72) = sub_1DDA1A030(*a3);
  *(double *)(a1 + 80) = sub_1DDA1A030(*a3);
  unsigned int v7 = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 88) = v7;
  if (v7 - 1 >= 7)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v8 = *(unsigned int *)(a1 + 48) * (unint64_t)*(unsigned int *)(a1 + 44);
  if ((v8 & 0xFFFFFFFF00000000) != 0
    || (unint64_t v9 = v7 * (unint64_t)v8, (v9 >> 30))
    || (unsigned int v10 = sub_1DDA63178(*a3), (v10 & 0x80000000) != 0)
    || v10 < 4 * (int)v9)
  {
    unsigned int v28 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v28, "RawCameraException");
    __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = *a3;
  int v30 = *(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 88);
  sub_1DDA4AF68(v11, (unsigned int *)&v30, (uint64_t *)&__p);
  unint64_t v12 = *(unsigned int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 48) * v12 != (v32 - (unsigned char *)__p) >> 2)
  {
    int64x2_t v29 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v29, "RawCameraException");
    __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_1DDB0E048(v6, v12);
  LODWORD(v13) = *(_DWORD *)(a1 + 88);
  if (v13)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      sub_1DDB0E0F0(*(void *)(a1 + 96) + v14, (*(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 44)));
      ++v15;
      unint64_t v13 = *(unsigned int *)(a1 + 88);
      v14 += 24;
    }
    while (v15 < v13);
  }
  int v16 = *(_DWORD *)(a1 + 44);
  if (v16)
  {
    int v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = *(unsigned int *)(a1 + 48);
    do
    {
      if (v19)
      {
        uint64_t v20 = 0;
        uint64_t v21 = __p;
        do
        {
          if (v13)
          {
            uint64_t v22 = (uint64_t *)*v6;
            uint64_t v23 = v13;
            do
            {
              uint64_t v24 = v18 + 1;
              uint64_t v25 = *v22;
              v22 += 3;
              *(_DWORD *)(v25 + 4 * (v19 * v17 + v20)) = v21[v18++];
              --v23;
            }
            while (v23);
          }
          else
          {
            uint64_t v24 = v18;
          }
          ++v20;
          uint64_t v18 = v24;
        }
        while (v20 != v19);
      }
      else
      {
        uint64_t v24 = v18;
      }
      ++v17;
      uint64_t v18 = v24;
    }
    while (v17 != v16);
  }
  if (__p)
  {
    int64x2_t v32 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1DDB0DFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

void sub_1DDB0E048(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1DDB0E6FC(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unsigned int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_1DDB0E0F0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_1DDB0E864((char **)a1, a2 - v2);
  }
}

void *sub_1DDB0E124@<X0>(void *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (*((_DWORD *)result + 22) >= a2)
  {
    uint64_t v3 = result[12];
    if (0xAAAAAAAAAAAAAAABLL * ((result[13] - v3) >> 3) <= a2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v4 = v3 + 24 * a2;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    BOOL v5 = *(const void **)v4;
    uint64_t v6 = *(void *)(v4 + 8);
    unint64_t v7 = (v6 - *(void *)v4) >> 2;
    return sub_1DDA1D984(a3, v5, v6, v7);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_1DDB0E1EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id sub_1DDB0E200(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], a2, a3, a4, a5);
  unsigned int v10 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v7, *(unsigned int *)(a1 + 12), v8, v9);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, @"Top", v12);

  int v16 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v13, *(unsigned int *)(a1 + 16), v14, v15);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, @"Left", v18);

  uint64_t v22 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v19, *(unsigned int *)(a1 + 20), v20, v21);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, @"Bottom", v24);

  unsigned int v28 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v25, *(unsigned int *)(a1 + 24), v26, v27);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, @"Right", v30);

  int64x2_t v34 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v31, *(unsigned int *)(a1 + 28), v32, v33);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, @"Plane", v36);

  unsigned int v40 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v37, *(unsigned int *)(a1 + 32), v38, v39);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, @"Planes", v42);

  uint64_t v46 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v43, *(unsigned int *)(a1 + 36), v44, v45);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, @"RowPitch", v48);

  __int16 v52 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v49, *(unsigned int *)(a1 + 40), v50, v51);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, @"ColPitch", v54);

  unsigned int v58 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v55, *(unsigned int *)(a1 + 44), v56, v57);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v58, @"MapPointsV", v60);

  uint64_t v64 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v61, *(unsigned int *)(a1 + 48), v62, v63);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v65, (uint64_t)v64, @"MapPointsH", v66);

  uint64_t v71 = objc_msgSend_numberWithDouble_(NSNumber, v67, v68, v69, v70, *(double *)(a1 + 56));
  objc_msgSend_setObject_forKeyedSubscript_(v6, v72, (uint64_t)v71, @"MapSpacingV", v73);

  int v78 = objc_msgSend_numberWithDouble_(NSNumber, v74, v75, v76, v77, *(double *)(a1 + 64));
  objc_msgSend_setObject_forKeyedSubscript_(v6, v79, (uint64_t)v78, @"MapSpacingH", v80);

  int v85 = objc_msgSend_numberWithDouble_(NSNumber, v81, v82, v83, v84, *(double *)(a1 + 72));
  objc_msgSend_setObject_forKeyedSubscript_(v6, v86, (uint64_t)v85, @"MapOriginV", v87);

  int v92 = objc_msgSend_numberWithDouble_(NSNumber, v88, v89, v90, v91, *(double *)(a1 + 80));
  objc_msgSend_setObject_forKeyedSubscript_(v6, v93, (uint64_t)v92, @"MapOriginH", v94);

  uint64_t v98 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v95, *(unsigned int *)(a1 + 88), v96, v97);
  objc_msgSend_setObject_forKeyedSubscript_(v6, v99, (uint64_t)v98, @"MapPlanes", v100);

  BOOL v109 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v101, v102, v103, v104);
  uint64_t v111 = *(void *)(a1 + 96);
  uint64_t v110 = *(void *)(a1 + 104);
  while (v111 != v110)
  {
    int v116 = objc_msgSend_array(MEMORY[0x1E4F1CA48], v105, v106, v107, v108);
    unint64_t v118 = *(_DWORD **)v111;
    uint64_t v119 = *(_DWORD **)(v111 + 8);
    while (v118 != v119)
    {
      LODWORD(v117) = *v118;
      uint64_t v120 = objc_msgSend_numberWithFloat_(NSNumber, v112, v113, v114, v115, v117);
      objc_msgSend_addObject_(v116, v121, (uint64_t)v120, v122, v123);

      ++v118;
    }
    objc_msgSend_addObject_(v109, v112, (uint64_t)v116, v114, v115);

    v111 += 24;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v105, (uint64_t)v109, @"MapGain", v108);
  int v124 = [RAWOpcodeGainMap alloc];
  unsigned int v128 = objc_msgSend_initWithArguments_(v124, v125, (uint64_t)v6, v126, v127);

  return v128;
}

void sub_1DDB0E5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB0E630(uint64_t a1)
{
  *(void *)a1 = &unk_1F3976F88;
  uint64_t v3 = (void **)(a1 + 96);
  sub_1DDA9E7E4(&v3);
  return a1;
}

uint64_t sub_1DDB0E688(uint64_t a1)
{
  *(void *)a1 = &unk_1F3976F88;
  uint64_t v3 = (void **)(a1 + 96);
  sub_1DDA9E7E4(&v3);
  return MEMORY[0x1E01C3DC0](a1, 0x10A1C4048AAAAC6);
}

uint64_t sub_1DDB0E6F4()
{
  return 9;
}

void sub_1DDB0E6FC(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)sub_1DDA2A160(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    int v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    int v17 = &v16[v14];
    sub_1DDA9E1E8(a1, &v15);
    sub_1DDA9E384((uint64_t)&v15);
  }
}

void sub_1DDB0E850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1DDA9E384((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DDB0E864(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_1DDA17F78();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)sub_1DDA17F90(v4, v13);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    int v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    int v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_1DDB0E980(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 440))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB0EA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0EA34(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 440))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB0EAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0EAE8(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v7);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v7 + 432))();
  if (v8) {
    sub_1DDA18310(v8);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 160))(&v7, a1);
  unint64_t v3 = (*(uint64_t (**)(void))(*(void *)v7 + 440))();
  int v4 = v3;
  unint64_t v5 = HIDWORD(v3);
  if (v8) {
    sub_1DDA18310(v8);
  }
  if ((int)v5 < (int)((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 408))(a1) >> 32)) {
    v2 += 12 * v4 / 8;
  }
  return v2;
}

void sub_1DDB0EC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB0EC80(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v3 + 512))();
  if (v4) {
    sub_1DDA18310(v4);
  }
  return v1;
}

void sub_1DDB0ED1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1DDA18310(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB0ED34(os_signpost_id_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "COlympusE410Unpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 3221225472;
  void v44[2] = sub_1DDB0F2D8;
  v44[3] = &unk_1E6D04A58;
  v44[4] = a1;
  int v4 = (void (**)(void))MEMORY[0x1E01C46E0](v44);
  uint64_t v43 = 7;
  unint64_t v5 = (_WORD *)sub_1DDAA5B9C(a1);
  uint64_t v6 = *(void *)(a1 + 24);
  sub_1DDA1B2DC(buf, &v43);
  (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v6 + 40))(v6, buf, 1);
  sub_1DDA1B3CC(&v42, (unsigned int *)(a1 + 44));
  sub_1DDA1B3CC(&v41, (unsigned int *)(a1 + 48));
  int v38 = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1);
  sub_1DDA18410(&v39, &v38);
  *(_DWORD *)int buf = v39;
  int v45 = *sub_1DDA57B34((int *)buf, &v43);
  sub_1DDA1B354(&v40, (unsigned int *)&v45);
  *(_DWORD *)int buf = v42;
  LODWORD(v6) = *sub_1DDA4BDD8(buf, &v41);
  *(void *)int buf = 2;
  sub_1DDA18500(&v39, (unint64_t *)buf);
  int v45 = v6;
  uint64_t v7 = sub_1DDA4BDD8(&v45, (unsigned int *)&v39);
  uint64_t v8 = v40;
  if (*v7 < v40)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v9 = v41;
  uint64_t v10 = v42;
  uint64_t v11 = (unsigned __int8 *)&v5[v41 * v42 + 448] - v40;
  (*(void (**)(void, unsigned __int8 *, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v11, v40);
  if (v9)
  {
    unsigned int v12 = 0;
    int v13 = 0;
    size_t v14 = &v11[v8];
    int v15 = 32;
    do
    {
      *(void *)int buf = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      if (v10)
      {
        unsigned int v16 = 0;
        do
        {
          int v17 = (int *)&buf[12 * (v16 & 1)];
          int v18 = v17[2];
          if (v11 > v14) {
            uint64_t v11 = v14;
          }
          if (v15 >= 16)
          {
            int v13 = (v13 << 16) | (*v11 << 8) | v11[1];
            v11 += 2;
            v15 -= 16;
          }
          unsigned int v19 = __clz((unsigned __int16)(*v17 >> (2 * (v18 < 3))) | (2 << (2 * (v18 < 3))));
          int v20 = v13 << v15;
          unsigned int v21 = __clz((8 * (v13 << v15)) | 0x80000);
          int v22 = v15 + v21 + 4;
          if (v21 == 12)
          {
            int v23 = v22 - 17;
            if (v22 < 17)
            {
              int v23 = v22 - 1;
            }
            else
            {
              int v13 = (v13 << 16) | (*v11 << 8) | v11[1];
              v11 += 2;
            }
            unsigned int v21 = (v13 << v23) >> (48 - v19) >> 1;
            int v22 = v19 + v23 - 16;
            if (v19 == 16) {
              unsigned int v21 = 0;
            }
          }
          if (v22 >= 16)
          {
            int v13 = (v13 << 16) | (*v11 << 8) | v11[1];
            v11 += 2;
            v22 -= 16;
          }
          unsigned int v24 = 32 - v19;
          unsigned int v25 = ((v13 << v22) >> v19) | (v21 << (32 - v19));
          int v26 = v17[1];
          unsigned int v27 = (v25 ^ (v20 >> 31)) + v26;
          *int v17 = v25;
          v17[1] = (int)(3 * v27 + v26) >> 5;
          if (v25 <= 0x10) {
            int v28 = v18 + 1;
          }
          else {
            int v28 = 0;
          }
          void v17[2] = v28;
          if (v12 < 2 || v16 < 2)
          {
            if ((v16 | v12) >= 2)
            {
              if (v12 > 1) {
                LOWORD(v29) = v5[-2 * v10];
              }
              else {
                LOWORD(v29) = *(v5 - 2);
              }
            }
            else
            {
              LOWORD(v29) = 0;
            }
          }
          else
          {
            unsigned int v29 = (unsigned __int16)*(v5 - 2);
            unsigned int v30 = (unsigned __int16)v5[-2 * v10];
            unsigned int v31 = (unsigned __int16)v5[-2 * (int)v10 - 2];
            int v32 = v29 - v31;
            if ((v29 >= v31 || v31 >= v30) && ((int v33 = v30 - v31, v30 >= v31) || v31 >= v29))
            {
              if (v32 >= 0) {
                unsigned int v35 = v29 - v31;
              }
              else {
                unsigned int v35 = v31 - v29;
              }
              if (v33 >= 0) {
                unsigned int v36 = v33;
              }
              else {
                unsigned int v36 = -v33;
              }
              if (v35 <= v36) {
                LOWORD(v29) = v5[-2 * v10];
              }
              else {
                LOWORD(v29) = *(v5 - 2);
              }
            }
            else
            {
              if (v32 < 0) {
                int v32 = v31 - v29;
              }
              if (v32 > 0x20) {
                goto LABEL_34;
              }
              unsigned int v34 = v30 - v31;
              if ((int)(v30 - v31) < 0) {
                unsigned int v34 = v31 - v30;
              }
              if (v34 < 0x21) {
                unsigned int v29 = (v30 + v29) >> 1;
              }
              else {
LABEL_34:
              }
                LOWORD(v29) = v30 + v29 - v31;
            }
          }
          int v15 = v22 + v24;
          *v5++ = ((v20 >> 29) & 3 | (4 * v27)) + v29;
          ++v16;
        }
        while (v10 != v16);
      }
      ++v12;
    }
    while (v12 != v9);
  }
  v4[2](v4);
}

void sub_1DDB0F264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB0F2D8(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "COlympusE410Unpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB0F360(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPacked12SwappedUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v80[0] = MEMORY[0x1E4F143A8];
  v80[1] = 3221225472;
  v80[2] = sub_1DDB0FB34;
  v80[3] = &unk_1E6D04A58;
  v80[4] = a1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v80);
  unsigned int v6 = *(_DWORD *)(a1 + 44);
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  uint64_t v66 = (void (**)(void))v4;
  int v67 = (unint64_t *)(a1 + 200);
  char v7 = *(void *)(a1 + 200) != 0;
  int v8 = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1);
  unint64_t v9 = v5 >> v7;
  int v10 = (2 * ((3435973837u * (unint64_t)(v6 + 9)) >> 32)) & 0xFFFFFFF0;
  if (v9 * v10 == v8) {
    unsigned int v11 = (2 * ((3435973837u * (unint64_t)(v6 + 9)) >> 32)) & 0xFFFFFFF0;
  }
  else {
    unsigned int v11 = ((3 * v6) >> 1) & 0x1FFFFFFF;
  }
  if (v9 * v10 == v8) {
    uint64_t v12 = 16;
  }
  else {
    uint64_t v12 = 15;
  }
  int v13 = *(_DWORD *)(a1 + 188);
  if (v11 * v9 > (*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  os_signpost_id_t v76 = a1;
  uint64_t v77 = *(unsigned int *)(a1 + 192);
  unint64_t v75 = v9;
  if (v77 == 2)
  {
    unsigned int v78 = ((*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 152))(a1) >> 1)
        - v11 * (v9 >> 1);
    sub_1DDA18410((int *)buf, (int *)&v78);
    int v70 = *(_DWORD *)buf;
    if (!*v67)
    {
LABEL_42:
      unint64_t v42 = 0;
      int v43 = 0;
      int v74 = 2 * v6;
      do
      {
        uint64_t v44 = sub_1DDAA5B9C(a1);
        unint64_t v72 = v42;
        if (v42 < v9)
        {
          int v45 = (char *)(v44 + 2 * v6 * v42);
          do
          {
            (*(void (**)(void, char *, void))(**(void **)(v76 + 24) + 32))(*(void *)(v76 + 24), &v45[v74 - v11], v11);
            uint64_t v46 = (unsigned __int8 *)&v45[v74 - v11 + v43];
            if (v42)
            {
              int v47 = 0;
            }
            else
            {
              int v43 = v13;
              int v47 = v13;
            }
            if (v6 == v6 % 0xA)
            {
              unsigned int v48 = 0;
            }
            else
            {
              unsigned int v48 = 0;
              do
              {
                unsigned int v49 = v46[1];
                __int16 v50 = *v46 | ((v49 & 0xF) << 8);
                LOWORD(v49) = (v49 >> 4) | (16 * v46[2]);
                unsigned int v51 = v46[4];
                __int16 v52 = v46[3] | ((v51 & 0xF) << 8);
                LOWORD(v51) = (v51 >> 4) | (16 * v46[5]);
                *(_WORD *)int v45 = v50;
                *((_WORD *)v45 + 1) = v49;
                unsigned int v53 = v46[7];
                __int16 v54 = v46[6] | ((v53 & 0xF) << 8);
                LOWORD(v53) = (v53 >> 4) | (16 * v46[8]);
                *((_WORD *)v45 + 2) = v52;
                *((_WORD *)v45 + 3) = v51;
                unsigned int v55 = v46[10];
                __int16 v56 = v46[9] | ((v55 & 0xF) << 8);
                int v57 = (v55 >> 4) | (16 * v46[11]);
                *((_WORD *)v45 + 4) = v54;
                *((_WORD *)v45 + 5) = v53;
                unsigned int v58 = v46[13];
                __int16 v59 = v46[12] | ((v58 & 0xF) << 8);
                int v60 = (v58 >> 4) | (16 * v46[14]);
                *((_WORD *)v45 + 6) = v56;
                *((_WORD *)v45 + 7) = v57;
                *((_WORD *)v45 + 8) = v59;
                *((_WORD *)v45 + 9) = v60;
                v46 += v12;
                v45 += 20;
                v48 += 10;
              }
              while (v48 < 10 * (v6 / 0xA));
            }
            while (v48 < v6)
            {
              unsigned int v61 = v46[1];
              __int16 v62 = *v46 | ((v61 & 0xF) << 8);
              int v63 = (v61 >> 4) | (16 * v46[2]);
              *(_WORD *)int v45 = v62;
              *((_WORD *)v45 + 1) = v63;
              v46 += 3;
              v45 += 4;
              v48 += 2;
            }
            v11 += v47;
            v45 += 2 * (v77 - 1) * v6;
            LODWORD(v42) = v42 + v77;
          }
          while (v42 < v9);
        }
        a1 = v76;
        if (v70 && !v72)
        {
          uint64_t v64 = *(void *)(v76 + 24);
          *(_DWORD *)int buf = v70;
          (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v64 + 40))(v64, buf, 1);
        }
        unint64_t v42 = v72 + 1;
      }
      while (v72 + 1 != v77);
      goto LABEL_60;
    }
  }
  else
  {
    if (!*v67)
    {
      if (!v77) {
        goto LABEL_60;
      }
      int v70 = 0;
      goto LABEL_42;
    }
    int v70 = 0;
  }
  char v14 = 0;
  uint64_t v15 = 0;
  int v73 = 2 * v6;
  char v16 = 1;
  do
  {
    char v68 = v16;
    if (v14)
    {
      uint64_t v17 = *(void *)(a1 + 24);
      sub_1DDA18488(buf, v67);
      (*(void (**)(uint64_t, uint8_t *, void))(*(void *)v17 + 40))(v17, buf, 0);
    }
    if (v77)
    {
      int v18 = 0;
      uint64_t v69 = v15 * v77 * v6;
      unint64_t v19 = 0;
      unint64_t v20 = v75;
      do
      {
        uint64_t v21 = sub_1DDAA5B9C(a1);
        unint64_t v71 = v19;
        if (v19 < v20)
        {
          int v22 = (char *)(v21 + 2 * v6 * v19 + 2 * v69);
          do
          {
            (*(void (**)(void, char *, void))(**(void **)(v76 + 24) + 32))(*(void *)(v76 + 24), &v22[v73 - v11], v11);
            int v23 = (unsigned __int8 *)&v22[v73 - v11 + v18];
            if (v19)
            {
              int v24 = 0;
            }
            else
            {
              int v18 = v13;
              int v24 = v13;
            }
            if (v6 == v6 % 0xA)
            {
              unsigned int v25 = 0;
              unint64_t v20 = v75;
            }
            else
            {
              unsigned int v25 = 0;
              unint64_t v20 = v75;
              do
              {
                unsigned int v26 = v23[1];
                __int16 v27 = *v23 | ((v26 & 0xF) << 8);
                LOWORD(v26) = (v26 >> 4) | (16 * v23[2]);
                unsigned int v28 = v23[4];
                __int16 v29 = v23[3] | ((v28 & 0xF) << 8);
                LOWORD(v28) = (v28 >> 4) | (16 * v23[5]);
                *(_WORD *)int v22 = v27;
                *((_WORD *)v22 + 1) = v26;
                unsigned int v30 = v23[7];
                __int16 v31 = v23[6] | ((v30 & 0xF) << 8);
                LOWORD(v30) = (v30 >> 4) | (16 * v23[8]);
                *((_WORD *)v22 + 2) = v29;
                *((_WORD *)v22 + 3) = v28;
                unsigned int v32 = v23[10];
                __int16 v33 = v23[9] | ((v32 & 0xF) << 8);
                int v34 = (v32 >> 4) | (16 * v23[11]);
                *((_WORD *)v22 + 4) = v31;
                *((_WORD *)v22 + 5) = v30;
                unsigned int v35 = v23[13];
                __int16 v36 = v23[12] | ((v35 & 0xF) << 8);
                int v37 = (v35 >> 4) | (16 * v23[14]);
                *((_WORD *)v22 + 6) = v33;
                *((_WORD *)v22 + 7) = v34;
                *((_WORD *)v22 + 8) = v36;
                *((_WORD *)v22 + 9) = v37;
                v23 += v12;
                v22 += 20;
                v25 += 10;
              }
              while (v25 < 10 * (v6 / 0xA));
            }
            while (v25 < v6)
            {
              unsigned int v38 = v23[1];
              __int16 v39 = *v23 | ((v38 & 0xF) << 8);
              int v40 = (v38 >> 4) | (16 * v23[2]);
              *(_WORD *)int v22 = v39;
              *((_WORD *)v22 + 1) = v40;
              v23 += 3;
              v22 += 4;
              v25 += 2;
            }
            v11 += v24;
            v22 += 2 * (2 * v77 - 1) * v6;
            LODWORD(v19) = v19 + v77;
          }
          while (v19 < v20);
        }
        a1 = v76;
        if (v70 && !v71)
        {
          uint64_t v41 = *(void *)(v76 + 24);
          *(_DWORD *)int buf = v70;
          (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v41 + 40))(v41, buf, 1);
        }
        unint64_t v19 = v71 + 1;
      }
      while (v71 + 1 != v77);
    }
    char v16 = 0;
    char v14 = 1;
    uint64_t v15 = 1;
  }
  while ((v68 & 1) != 0);
LABEL_60:
  v66[2](v66);
}

void sub_1DDB0FAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB0FB34(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPacked12SwappedUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB0FBBC(void *a1)
{
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

void sub_1DDB0FBF4(int *a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "CUnpackedYCbCrUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v91[0] = MEMORY[0x1E4F143A8];
  v91[1] = 3221225472;
  v91[2] = sub_1DDB10488;
  v91[3] = &unk_1E6D04A58;
  v91[4] = a1;
  os_signpost_id_t v4 = (void (**)(void, void, void, __n128, __n128, __n128, __n128))MEMORY[0x1E01C46E0](v91);
  unsigned int v5 = a1[47];
  if (v5 >= 0x11
    || a1[11] < 1
    || a1[12] <= 0
    || v5 != 8
    || (*(unsigned int (**)(int *))(*(void *)a1 + 40))(a1) != 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v6 = a1[11];
  int v7 = a1[12];
  unsigned int v8 = (*(uint64_t (**)(int *))(*(void *)a1 + 40))(a1);
  uint64_t v9 = v7 * (uint64_t)v6;
  if (v9 * (unint64_t)v8 > (*(unsigned int (**)(int *))(*(void *)a1 + 152))(a1))
  {
    int v86 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v86, "RawCameraException");
    __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v10 = (*(uint64_t (**)(int *))(*(void *)a1 + 40))(a1);
  unsigned int v11 = (_WORD *)sub_1DDAA5B9C((uint64_t)a1);
  uint64_t v12 = sub_1DDAA6D9C((uint64_t)a1);
  uint64_t v13 = v9 * v10;
  char v14 = (unsigned __int8 *)v11 + v12 - v13;
  (*(void (**)(void, unsigned __int8 *, uint64_t))(**((void **)a1 + 3) + 32))(*((void *)a1 + 3), v14, v13);
  unsigned int v20 = v14[1];
  unsigned int v21 = v14[4];
  double v22 = 0.5;
  unsigned int v23 = (int)(((double)(v14[3] | ((v21 & 0xF) << 8)) + -2048.0) * 1280.0 * 0.00048828125 + 2048.0);
  unsigned int v24 = (int)(((double)((v21 >> 4) | (16 * v14[5])) + -2048.0) * 1280.0 * 0.00048828125 + 2048.0);
  v25.n128_f64[0] = (double)(int)((double)(*v14 | ((v20 & 0xF) << 8)) / 2550.0 * 4096.0
                                              + 0.5)
                  * 0.000244140625;
  if (v25.n128_f64[0] <= 1.0) {
    double v26 = (double)(int)((double)(*v14 | ((v20 & 0xF) << 8)) / 2550.0 * 4096.0 + 0.5)
  }
        * 0.000244140625;
  else {
    double v26 = 1.0;
  }
  double v27 = 0.0;
  if (v25.n128_f64[0] >= 0.0) {
    double v28 = v26;
  }
  else {
    double v28 = 0.0;
  }
  double v29 = 0.0;
  if (v28 <= 0.8)
  {
    double v27 = ((double)v23 + -1280.0) / 1536.0 + -0.5;
    double v29 = ((double)v24 + -1280.0) / 1536.0 + -0.5;
  }
  int v30 = v14[2];
  double v31 = v28 + v29 * 1.402;
  double v32 = 3072.0;
  if (v31 <= 1.0) {
    double v33 = v31 * 3072.0;
  }
  else {
    double v33 = 3072.0;
  }
  double v34 = v28 + v27 * -0.34414 + v29 * -0.71414;
  v19.n128_f64[0] = v34 * 3072.0;
  if (v34 > 1.0) {
    v19.n128_f64[0] = 3072.0;
  }
  double v35 = v28 + v27 * 1.772;
  if (v35 <= 1.0) {
    double v32 = v35 * 3072.0;
  }
  if (qword_1EAB911F8 != -1)
  {
    double v90 = v31;
    unint64_t v88 = v19.n128_u64[0];
    double v89 = v33;
    double v87 = v32;
    dispatch_once(&qword_1EAB911F8, &unk_1F3977E68);
    double v32 = v87;
    v19.n128_u64[0] = v88;
    double v33 = v89;
    double v31 = v90;
    double v22 = 0.5;
  }
  v17.n128_u64[0] = 0;
  if (v31 >= 0.0) {
    double v36 = v33;
  }
  else {
    double v36 = 0.0;
  }
  v25.n128_f64[0] = dbl_1EAB8B1F0[(int)v36];
  if (v25.n128_f64[0] < 0.0) {
    v25.n128_f64[0] = 0.0;
  }
  if (v34 >= 0.0) {
    double v37 = v19.n128_f64[0];
  }
  else {
    double v37 = 0.0;
  }
  v18.n128_f64[0] = dbl_1EAB8B1F0[(int)v37];
  if (v18.n128_f64[0] < 0.0) {
    v18.n128_f64[0] = 0.0;
  }
  if (v35 >= 0.0) {
    double v38 = v32;
  }
  else {
    double v38 = 0.0;
  }
  v19.n128_f64[0] = dbl_1EAB8B1F0[(int)v38];
  if (v19.n128_f64[0] < 0.0) {
    v19.n128_f64[0] = 0.0;
  }
  *unsigned int v11 = (int)v25.n128_f64[0];
  v11[1] = (int)v18.n128_f64[0];
  void v11[2] = (int)v19.n128_f64[0];
  if ((unint64_t)(v9 - 2) >= 2)
  {
    unint64_t v39 = (unint64_t)(v9 - 2) >> 1;
    int v40 = (unsigned __int8 *)v11 + v12 - v13 + 11;
    uint64_t v41 = v11 + 8;
    double v42 = v22 + (double)((v20 >> 4) | (16 * v30)) / 2550.0 * 4096.0;
    v25.n128_u64[0] = 0.5;
    v18.n128_u64[0] = 1.0;
    unint64_t v15 = 0xC094000000000000;
    uint64_t v16 = 0x4098000000000000;
    v19.n128_u64[0] = -0.5;
    do
    {
      unsigned int v43 = *(v40 - 1);
      unsigned int v44 = (v43 >> 4) | (16 * *v40);
      unsigned int v45 = (int)(((double)(*(v40 - 2) | ((v43 & 0xF) << 8)) + -2048.0) * 1280.0 * 0.00048828125
                + 2048.0);
      unsigned int v46 = (int)(((double)v44 + -2048.0) * 1280.0 * 0.00048828125 + 2048.0);
      double v47 = (double)(int)v42 * 0.000244140625;
      if (v47 <= 1.0) {
        double v48 = (double)(int)v42 * 0.000244140625;
      }
      else {
        double v48 = 1.0;
      }
      BOOL v49 = v47 < 0.0;
      double v50 = 0.0;
      if (v49) {
        double v51 = 0.0;
      }
      else {
        double v51 = v48;
      }
      double v52 = 0.0;
      double v53 = 0.0;
      if (v51 <= 0.8)
      {
        double v52 = ((double)((v45 + (unsigned __int16)v23) >> 1) + -1280.0) / 1536.0 + -0.5;
        double v53 = ((double)((v46 + (unsigned __int16)v24) >> 1) + -1280.0) / 1536.0 + -0.5;
      }
      unsigned int v54 = *(v40 - 4);
      unsigned int v55 = (int)((double)(*(v40 - 5) | ((v54 & 0xF) << 8)) / 2550.0 * 4096.0 + 0.5);
      int v56 = *(v40 - 3);
      double v57 = v51 + v53 * 1.402;
      double v58 = v57 * 3072.0;
      if (v57 > 1.0) {
        double v58 = 3072.0;
      }
      double v59 = v51 + v52 * -0.34414 + v53 * -0.71414;
      double v60 = v59 * 3072.0;
      if (v59 > 1.0) {
        double v60 = 3072.0;
      }
      double v61 = v51 + v52 * 1.772;
      double v62 = v61 * 3072.0;
      if (v61 > 1.0) {
        double v62 = 3072.0;
      }
      if (v57 >= 0.0) {
        double v63 = v58;
      }
      else {
        double v63 = 0.0;
      }
      double v64 = dbl_1EAB8B1F0[(int)v63];
      if (v64 < 0.0) {
        double v64 = 0.0;
      }
      if (v59 >= 0.0) {
        double v65 = v60;
      }
      else {
        double v65 = 0.0;
      }
      double v66 = dbl_1EAB8B1F0[(int)v65];
      if (v66 < 0.0) {
        double v66 = 0.0;
      }
      if (v61 >= 0.0) {
        double v67 = v62;
      }
      else {
        double v67 = 0.0;
      }
      double v68 = dbl_1EAB8B1F0[(int)v67];
      if (v68 < 0.0) {
        double v68 = 0.0;
      }
      *(v41 - 5) = (int)v64;
      *(v41 - 4) = (int)v66;
      *(v41 - 3) = (int)v68;
      double v69 = (double)v55 * 0.000244140625;
      if (v69 <= 1.0) {
        double v70 = (double)v55 * 0.000244140625;
      }
      else {
        double v70 = 1.0;
      }
      if (v69 >= 0.0) {
        double v71 = v70;
      }
      else {
        double v71 = 0.0;
      }
      double v72 = 0.0;
      if (v71 <= 0.8)
      {
        double v50 = ((double)v45 + -1280.0) / 1536.0 + -0.5;
        double v72 = ((double)v46 + -1280.0) / 1536.0 + -0.5;
      }
      double v42 = (double)((v54 >> 4) | (16 * v56)) / 2550.0 * 4096.0 + 0.5;
      double v73 = v71 + v72 * 1.402;
      double v74 = v73 * 3072.0;
      if (v73 > 1.0) {
        double v74 = 3072.0;
      }
      double v75 = v71 + v50 * -0.34414 + v72 * -0.71414;
      double v76 = v75 * 3072.0;
      if (v75 > 1.0) {
        double v76 = 3072.0;
      }
      double v77 = v71 + v50 * 1.772;
      double v78 = v77 * 3072.0;
      if (v77 > 1.0) {
        double v78 = 3072.0;
      }
      if (v73 >= 0.0) {
        double v79 = v74;
      }
      else {
        double v79 = 0.0;
      }
      double v80 = dbl_1EAB8B1F0[(int)v79];
      if (v80 < 0.0) {
        double v80 = 0.0;
      }
      if (v75 >= 0.0) {
        double v81 = v76;
      }
      else {
        double v81 = 0.0;
      }
      double v82 = dbl_1EAB8B1F0[(int)v81];
      if (v82 < 0.0) {
        double v82 = 0.0;
      }
      if (v77 >= 0.0) {
        double v83 = v78;
      }
      else {
        double v83 = 0.0;
      }
      v40 += 6;
      double v84 = dbl_1EAB8B1F0[(int)v83];
      if (v84 < 0.0) {
        double v84 = 0.0;
      }
      *(v41 - 2) = (int)v80;
      *(v41 - 1) = (int)v82;
      *uint64_t v41 = (int)v84;
      v41 += 6;
      LOWORD(v24) = v46;
      LOWORD(v23) = v45;
      --v39;
    }
    while (v39);
  }
  v4[2](v4, v15, v16, v17, v25, v18, v19);
}

void sub_1DDB1042C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB10488(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpackedYCbCrUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB10510()
{
  uint64_t v0 = 0;
  int32x2_t v1 = (int32x2_t)0x100000000;
  uint64x2_t v2 = (uint64x2_t)xmmword_1DDBF8D60;
  float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x40A8000000000000uLL);
  uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(0xC01uLL);
  float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x3FADA98DF96BFFE8uLL);
  float64x2_t v18 = (float64x2_t)vdupq_n_s64(0xC00A40CA1EA7DC78);
  float64x2_t v15 = (float64x2_t)vdupq_n_s64(0xC024B4E61F0CC868);
  float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x4020DCDB39699687uLL);
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v14 = _Q0;
  int64x2_t v13 = vdupq_n_s64(2uLL);
  do
  {
    int64x2_t v23 = (int64x2_t)v2;
    unsigned __int8 v24 = vmovn_s64((int64x2_t)vcgtq_u64(v20, v2)).u8[0];
    v8.i64[0] = v1.i32[0];
    v8.i64[1] = v1.i32[1];
    float64x2_t v9 = vdivq_f64(vcvtq_f64_s64(v8), v19);
    __CGFloat x = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v9, vmulq_f64(v9, v18)), v17, v9), v9, vmulq_f64(v9, vmulq_f64(v9, v16))), v9, vmulq_f64(v9, vmulq_f64(v9, vmulq_f64(v9, v15))));
    long double v22 = exp(__x.f64[1]);
    v10.f64[0] = exp(__x.f64[0]);
    v10.f64[1] = v22;
    float64x2_t v11 = vsubq_f64(v14, v10);
    if (v24)
    {
      double v12 = 16383.0 * v11.f64[0];
      if (v11.f64[0] < 0.0) {
        double v12 = 0.0;
      }
      dbl_1EAB8B1F0[v0] = v12;
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0xC01uLL), *(uint64x2_t *)&v23)).i32[1])
    {
      v11.f64[0] = vmuld_lane_f64(16383.0, v11, 1);
      if (v11.f64[1] < 0.0) {
        v11.f64[0] = 0.0;
      }
      dbl_1EAB8B1F0[v0 + 1] = v11.f64[0];
    }
    v0 += 2;
    uint64x2_t v2 = (uint64x2_t)vaddq_s64(v23, v13);
    int32x2_t v1 = vadd_s32(v1, (int32x2_t)0x200000002);
  }
  while (v0 != 3074);
}

void sub_1DDB106E0(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  long long v8 = 0uLL;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  if (a4 && a5)
  {
    *(void *)&long long v37 = a4;
    *((void *)&v37 + 1) = a5;
    atomic_store(0, (unint64_t *)&v38);
    float64x2_t v9 = sub_1DDBF2084(16 * a2);
    long long v8 = 0uLL;
    *((void *)&v38 + 1) = v9;
    atomic_store(0, (unsigned int *)&v39);
    DWORD1(v39) = a2;
  }
  long long v35 = v8;
  long long v36 = v8;
  long long v33 = v8;
  long long v34 = v8;
  long long v31 = v8;
  long long v32 = v8;
  long long v29 = v8;
  long long v30 = v8;
  v25[0] = v8;
  int v27 = DWORD1(v8);
  v24[1] = *((void **)&v8 + 1);
  v25[1] = a1;
  double v28 = (unsigned int *)&v37;
  signed int v26 = a2;
  float64x2_t v10 = (char *)sub_1DDBF2084(16 * a2);
  v24[0] = v10;
  if (!v10) {
    return;
  }
  uint64_t v11 = (a2 - 1);
  if (a2 >= 1)
  {
    if (a2 == 1)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = a2 & 0xFFFFFFFE;
      uint64_t v14 = v11 - v13;
      float64x2_t v15 = &v10[16 * v11];
      do
      {
        *(void *)float64x2_t v15 = a3;
        *((void *)v15 - 2) = a3;
        *((_DWORD *)v15 + 2) = v12;
        *((_DWORD *)v15 - 2) = v12 + 1;
        v12 += 2;
        v15 -= 32;
      }
      while (v13 != v12);
      if (v13 == a2) {
        goto LABEL_13;
      }
    }
    uint64_t v16 = v14 + 1;
    int v17 = ~v14 + a2;
    float64x2_t v18 = (int *)&v10[16 * v14 + 8];
    do
    {
      *((void *)v18 - 1) = a3;
      *float64x2_t v18 = v17;
      v18 -= 4;
      ++v17;
      --v16;
    }
    while (v16);
  }
LABEL_13:
  atomic_store(a2, (unsigned int *)v25);
  dispatch_apply_f(a2, 0, v24, (void (__cdecl *)(void *, size_t))sub_1DDB10A98);
  float64x2_t v19 = v28;
  if (atomic_load(v28 + 8))
  {
    while (1)
    {
      unsigned int v21 = (unint64_t *)atomic_load((unint64_t *)v19 + 2);
      if (!v21) {
        break;
      }
      long double v22 = v21;
      atomic_compare_exchange_strong((atomic_ullong *volatile)v19 + 2, (unint64_t *)&v22, *v21);
      if (v22 == v21)
      {
        if (!v21[1]) {
          break;
        }
        (*((void (**)(uint64_t))v19 + 1))(a3);
      }
    }
    int64x2_t v23 = (void *)*((void *)v19 + 3);
    if (v23) {
      j__free_3(v23);
    }
  }
  j__free_3(v24[0]);
}

BOOL sub_1DDB108CC()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v6 = 0;
  *(void *)int v7 = 0x1900000006;
  size_t v5 = 4;
  int v0 = sysctl(v7, 2u, &v6, &v5, 0, 0);
  if (v6 >= 32) {
    unsigned int v1 = 32;
  }
  else {
    unsigned int v1 = v6;
  }
  if (v0) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v6 < 1;
  }
  return v2 || v1 < 2;
}

uint64_t sub_1DDB10968()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v5 = 0;
  *(void *)int v6 = 0x1900000006;
  size_t v4 = 4;
  int v0 = sysctl(v6, 2u, &v5, &v4, 0, 0);
  if (v5 >= 32) {
    unsigned int v1 = 32;
  }
  else {
    unsigned int v1 = v5;
  }
  if (v5 > 0 && v0 == 0) {
    return v1;
  }
  else {
    return 1;
  }
}

uint64_t sub_1DDB10A00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  while (1)
  {
    BOOL v2 = (unint64_t *)atomic_load((unint64_t *)(v1 + 16));
    if (!v2) {
      break;
    }
    uint64_t v3 = v2;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v1 + 16), (unint64_t *)&v3, *v2);
    if (v3 == v2)
    {
      unint64_t v4 = v2[1];
      if (v4) {
        return v4;
      }
      return (*(uint64_t (**)(void))v1)(*(void *)(a1 + 16));
    }
  }
  return (*(uint64_t (**)(void))v1)(*(void *)(a1 + 16));
}

uint64_t sub_1DDB10A40(uint64_t result, unint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = (unint64_t *)(v2 + 16);
  unint64_t v4 = (unint64_t *)(*(void *)(v2 + 24) + 16 * (int)atomic_fetch_add((atomic_uint *volatile)(v2 + 32), 1u));
  v4[1] = a2;
  unint64_t v5 = atomic_load(v3);
  unint64_t *v4 = v5;
  unint64_t v6 = v5;
  atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v6, (unint64_t)v4);
  if (v6 != v5)
  {
    do
    {
      unint64_t *v4 = v6;
      unint64_t v7 = atomic_load(v3);
      unint64_t *v4 = v7;
      unint64_t v6 = v7;
      atomic_compare_exchange_strong((atomic_ullong *volatile)v3, &v6, (unint64_t)v4);
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t sub_1DDB10A98(uint64_t a1)
{
  uint64_t v1 = *(void *)a1 + 16 * (atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 0xFFFFFFFF) - 1);
  v3[0] = *(_DWORD *)(v1 + 8);
  v3[1] = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)v1;
  return (*(uint64_t (**)(_DWORD *))(a1 + 24))(v3);
}

uint64_t sub_1DDB10AF0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v4 = v3;
      float64x2_t v9 = (char *)objc_msgSend_objCType(v4, v5, v6, v7, v8);
      sub_1DDA1A880(&__p, v9);
      uint64_t v14 = v68;
      unsigned __int8 v15 = v68;
      uint64_t v16 = v67;
      if ((v68 & 0x80u) == 0) {
        uint64_t v17 = v68;
      }
      else {
        uint64_t v17 = v67;
      }
      if (v17 != 1) {
        goto LABEL_19;
      }
      p_p = __p;
      if ((v68 & 0x80u) == 0) {
        p_p = &__p;
      }
      if (*p_p == 66)
      {
        LODWORD(v19) = objc_msgSend_BOOLValue(v4, v10, v11, v12, v13);
        uint64_t v14 = v68;
        uint64_t v16 = v67;
        unsigned __int8 v15 = v68;
      }
      else
      {
LABEL_19:
        LODWORD(v19) = 0;
      }
      if ((v15 & 0x80u) != 0) {
        uint64_t v14 = v16;
      }
      if (v14 != 1) {
        goto LABEL_44;
      }
      long long v36 = (unsigned __int8 *)__p;
      if ((v15 & 0x80u) == 0) {
        long long v36 = (unsigned __int8 *)&__p;
      }
      if ((*v36 | 2) == 0x66)
      {
        objc_msgSend_floatValue(v4, v10, v11, v12, v13);
        float v38 = fabsf(v37);
        float v39 = 0.1;
        float v40 = v38 * 0.1;
        float v41 = 0.0;
        if (v37 >= 0.0) {
          float v42 = v38 * 0.1;
        }
        else {
          float v42 = 0.0;
        }
        if (v37 <= 0.0) {
          float v41 = v42;
        }
        if (v38 <= v41)
        {
          uint64_t v19 = 0;
        }
        else
        {
          float v43 = fabsf(v37 + -1.0);
          if (v38 <= 1.0) {
            float v39 = v38 * 0.1;
          }
          if (v43 <= v39)
          {
            uint64_t v19 = 1;
          }
          else
          {
            float v44 = fabsf(v37 + -2.0);
            float v45 = 0.2;
            if (v38 <= 2.0) {
              float v45 = v38 * 0.1;
            }
            if (v44 <= v45)
            {
              uint64_t v19 = 2;
            }
            else
            {
              float v46 = fabsf(v37 + -3.0);
              BOOL v47 = v38 <= 3.0;
              float v48 = 0.3;
              if (v47) {
                float v48 = v40;
              }
              if (v46 > v48) {
                uint64_t v19 = v19;
              }
              else {
                uint64_t v19 = 3;
              }
            }
          }
        }
      }
      else
      {
LABEL_44:
        unsigned int v49 = objc_msgSend_intValue(v4, v10, v11, v12, v13);
        if (v49 - 1 >= 3) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = v49;
        }
      }
      if ((char)v68 < 0) {
        operator delete(__p);
      }
    }
    else
    {
      id v20 = v3;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        || (objc_msgSend_isEqualToString_(v20, v21, @"NO", v22, v23) & 1) != 0
        || (objc_msgSend_isEqualToString_(v20, v24, @"FALSE", v25, v26) & 1) != 0
        || (objc_msgSend_isEqualToString_(v20, v27, @"OFF", v28, v29) & 1) != 0
        || (objc_msgSend_isEqualToString_(v20, v30, @"0", v31, v32) & 1) != 0)
      {
        uint64_t v19 = 0;
      }
      else if ((objc_msgSend_isEqualToString_(v20, v33, @"YES", v34, v35) & 1) != 0 {
             || (objc_msgSend_isEqualToString_(v20, v51, @"TRUE", v52, v53) & 1) != 0
      }
             || (objc_msgSend_isEqualToString_(v20, v54, @"ON", v55, v56) & 1) != 0
             || (objc_msgSend_isEqualToString_(v20, v57, @"1", v58, v59) & 1) != 0)
      {
        uint64_t v19 = 1;
      }
      else if (objc_msgSend_isEqualToString_(v20, v60, @"2", v61, v62))
      {
        uint64_t v19 = 2;
      }
      else if (objc_msgSend_isEqualToString_(v20, v63, @"3", v64, v65))
      {
        uint64_t v19 = 3;
      }
      else
      {
        uint64_t v19 = 0;
      }
    }
  }
  else
  {
    uint64_t v19 = 0;
  }

  return v19;
}

void sub_1DDB10E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__CFString *sub_1DDB10E40(int a1)
{
  if ((a1 - 1) > 2) {
    return @"0";
  }
  else {
    return off_1E6D05478[a1 - 1];
  }
}

BOOL sub_1DDB10E68(unsigned int a1)
{
  return a1 > 2;
}

BOOL sub_1DDB10E74(unsigned int a1)
{
  return a1 > 1;
}

double sub_1DDB10E80()
{
  return 0.3457;
}

double sub_1DDB10E94()
{
  return 0.3324;
}

double sub_1DDB10EA8()
{
  return 0.312727;
}

double sub_1DDB10EBC()
{
  return 0.447573;
}

double sub_1DDB10ED0(uint64_t a1, uint64_t a2)
{
  double result = 0.3457;
  *(_OWORD *)a1 = xmmword_1DDBFDA00;
  id v3 = *(double **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 == 24)
  {
    double result = *v3;
    double v4 = *v3 + v3[1] + v3[2];
    if (v4 > 0.0)
    {
      *(double *)a1 = result / v4;
      double result = v3[1] / v4;
      *(double *)(a1 + 8) = result;
    }
  }
  return result;
}

double sub_1DDB10F20@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *sub_1DDA24B78(a2, 2uLL);
  *(void *)uint64_t v3 = *(void *)a1;
  double result = *(double *)(a1 + 8);
  *(double *)(v3 + 8) = result;
  return result;
}

double sub_1DDB10F60@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double v2 = fmin(fmax(*a1, 0.01), 0.99);
  double v3 = fmin(fmax(a1[1], 0.01), 0.99);
  double v4 = v2 + v3;
  if (v2 + v3 > 0.99)
  {
    double v2 = v2 * (0.99 / v4);
    double v3 = v3 * (0.99 / v4);
  }
  uint64_t v5 = *sub_1DDA24B78(a2, 3uLL);
  *(double *)uint64_t v5 = v2 / v3;
  *(void *)(v5 + 8) = 0x3FF0000000000000;
  double result = (1.0 - v2 - v3) / v3;
  *(double *)(v5 + 16) = result;
  return result;
}

double sub_1DDB10FF0(double *a1, double *a2, double *a3)
{
  uint64_t v3 = 0;
  double v4 = a1[1];
  double v5 = 1.5 - *a1 + v4 * 6.0;
  double v6 = (*a1 + *a1) / v5;
  double v7 = v4 * 3.0 / v5;
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = 0.0;
  do
  {
    double v11 = v10;
    double v12 = v9;
    double v13 = v8;
    double v14 = *(double *)((char *)&unk_1DDBFDA10 + v3 + 56);
    double v15 = sqrt(v14 * v14 + 1.0);
    double v10 = 1.0 / v15;
    double v9 = v14 / v15;
    double v17 = *(double *)((char *)&unk_1DDBFDA10 + v3 + 40);
    double v16 = *(double *)((char *)&unk_1DDBFDA10 + v3 + 48);
    double v8 = (v7 - v16) * v10 - (v6 - v17) * v9;
    uint64_t v18 = v3 + 32;
    if (v3 == 928) {
      break;
    }
    v3 += 32;
  }
  while (v8 > 0.0);
  double v19 = 0.0;
  if (v18 != 32)
  {
    if (v8 > 0.0) {
      double v8 = 0.0;
    }
    double v19 = -v8 / (v13 - v8);
  }
  *a2 = 1000000.0
      / ((1.0 - v19) * *(double *)((char *)&unk_1DDBFDA10 + v18) + *(double *)((char *)&unk_1DDBFDA10 + v18 - 32) * v19);
  double v20 = v11 * v19 + v10 * (1.0 - v19);
  double v21 = v12 * v19 + v9 * (1.0 - v19);
  double v22 = sqrt(v21 * v21 + v20 * v20);
  double result = (v21 / v22 * (v7 - (v16 * (1.0 - v19) + *(double *)((char *)&unk_1DDBFDA10 + v18 - 16) * v19))
          + (v6 - (v17 * (1.0 - v19) + *(double *)((char *)&unk_1DDBFDA10 + v18 - 24) * v19)) * (v20 / v22))
         * -3000.0;
  *a3 = result;
  return result;
}

double sub_1DDB1112C(double *a1, double a2, double a3)
{
  uint64_t v3 = 0x20u;
  double v4 = 1000000.0 / a2;
  do
  {
    double v5 = *(double *)((char *)&unk_1DDBFDA10 + v3);
    uint64_t v6 = v3 + 32;
    if (v3 == 960) {
      break;
    }
    v3 += 32;
  }
  while (v4 >= v5);
  double v7 = a3 * -0.000333333333;
  double v8 = (double *)((char *)&unk_1DDBFDA10 + v6);
  double v9 = (v5 - v4) / (v5 - *(double *)((char *)&unk_1DDBFDA10 + v6 - 64));
  double v10 = *(v8 - 3) * (1.0 - v9) + *(v8 - 7) * v9;
  double v11 = *(double *)((char *)&unk_1DDBFDA10 + v6 - 40);
  double v12 = (1.0 - v9) * *(v8 - 2) + *(v8 - 6) * v9;
  double v13 = *(double *)((char *)&unk_1DDBFDA10 + v6 - 8);
  double v14 = sqrt(v11 * v11 + 1.0);
  double v15 = sqrt(v13 * v13 + 1.0);
  double v16 = (1.0 - v9) * (1.0 / v15) + 1.0 / v14 * v9;
  double v17 = (1.0 - v9) * (v13 / v15) + v11 / v14 * v9;
  double v18 = sqrt(v17 * v17 + v16 * v16);
  double v19 = v10 + v16 / v18 * v7;
  double v20 = v12 + v17 / v18 * v7;
  double v21 = v19 * 1.5;
  double v22 = v19 + v20 * -4.0 + 2.0;
  double result = v20 / v22;
  *a1 = v21 / v22;
  a1[1] = result;
  return result;
}

void sub_1DDB11218(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _OWORD *a8@<X8>)
{
  sub_1DDAD8240((uint64_t)&v53, 3u, 3u, 0.8951, a3, a4, a5, a6, a7, 0x3FD10CB295E9E1B1);
  sub_1DDB10F60(a1, &v49);
  sub_1DDAD86A8((uint64_t *)&v49, &v51);
  if ((void)v49)
  {
    *((void *)&v49 + 1) = v49;
    operator delete((void *)v49);
  }
  sub_1DDB10F60(a2, &v46);
  sub_1DDAD86A8((uint64_t *)&v46, &v49);
  if (v46)
  {
    BOOL v47 = v46;
    operator delete(v46);
  }
  v11.i64[0] = v51;
  v11.i64[1] = v49;
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))))
  {
    sub_1DDAD869C(a8);
  }
  else
  {
    sub_1DDAD8BC8(&v53, &v51, (uint64_t)&v46);
    sub_1DDAD8BC8(&v53, &v49, (uint64_t)v43);
    sub_1DDAD823C((uint64_t)&v40, 3u, 3u);
    sub_1DDAD8860(&v40);
    uint64_t v35 = sub_1DDAD8560((uint64_t)v43, 0);
    std::string __p = v12;
    double v13 = *(double *)sub_1DDAD85FC((uint64_t)&v35, 0);
    *(void *)&long long v33 = sub_1DDAD8560((uint64_t)&v46, 0);
    *((void *)&v33 + 1) = v14;
    double v15 = *(double *)sub_1DDAD85FC((uint64_t)&v33, 0);
    uint64_t v38 = sub_1DDAD8560((uint64_t)&v40, 0);
    uint64_t v39 = v16;
    *(double *)sub_1DDAD85FC((uint64_t)&v38, 0) = v13 / v15;
    uint64_t v35 = sub_1DDAD8560((uint64_t)v43, 1u);
    std::string __p = v17;
    double v18 = *(double *)sub_1DDAD85FC((uint64_t)&v35, 0);
    *(void *)&long long v33 = sub_1DDAD8560((uint64_t)&v46, 1u);
    *((void *)&v33 + 1) = v19;
    double v20 = *(double *)sub_1DDAD85FC((uint64_t)&v33, 0);
    uint64_t v38 = sub_1DDAD8560((uint64_t)&v40, 1u);
    uint64_t v39 = v21;
    *(double *)sub_1DDAD85FC((uint64_t)&v38, 1u) = v18 / v20;
    uint64_t v35 = sub_1DDAD8560((uint64_t)v43, 2u);
    std::string __p = v22;
    double v23 = *(double *)sub_1DDAD85FC((uint64_t)&v35, 0);
    *(void *)&long long v33 = sub_1DDAD8560((uint64_t)&v46, 2u);
    *((void *)&v33 + 1) = v24;
    double v25 = *(double *)sub_1DDAD85FC((uint64_t)&v33, 0);
    uint64_t v38 = sub_1DDAD8560((uint64_t)&v40, 2u);
    uint64_t v39 = v26;
    *(double *)sub_1DDAD85FC((uint64_t)&v38, 2u) = v23 / v25;
    uint64_t v35 = sub_1DDAD8560((uint64_t)&v40, 0);
    std::string __p = v27;
    uint64_t v28 = (double *)sub_1DDAD85FC((uint64_t)&v35, 0);
    double *v28 = fmin(fmax(*v28, 0.1), 10.0);
    uint64_t v35 = sub_1DDAD8560((uint64_t)&v40, 1u);
    std::string __p = v29;
    long long v30 = (double *)sub_1DDAD85FC((uint64_t)&v35, 1u);
    double *v30 = fmin(fmax(*v30, 0.1), 10.0);
    uint64_t v35 = sub_1DDAD8560((uint64_t)&v40, 2u);
    std::string __p = v31;
    uint64_t v32 = (double *)sub_1DDAD85FC((uint64_t)&v35, 2u);
    double *v32 = fmin(fmax(*v32, 0.1), 10.0);
    sub_1DDAD8FBC(&v53, &v33);
    sub_1DDAD8BC8((unsigned int *)&v33, &v40, (uint64_t)&v35);
    sub_1DDAD8BC8((unsigned int *)&v35, &v53, (uint64_t)a8);
    if (__p)
    {
      float v37 = __p;
      operator delete(__p);
    }
    if (*((void *)&v33 + 1))
    {
      uint64_t v34 = *((void *)&v33 + 1);
      operator delete(*((void **)&v33 + 1));
    }
    if (v41)
    {
      float v42 = v41;
      operator delete(v41);
    }
    if (v44)
    {
      float v45 = v44;
      operator delete(v44);
    }
    if (v47)
    {
      float v48 = v47;
      operator delete(v47);
    }
  }
  if (*((void *)&v49 + 1))
  {
    uint64_t v50 = *((void *)&v49 + 1);
    operator delete(*((void **)&v49 + 1));
  }
  if (*((void *)&v51 + 1))
  {
    uint64_t v52 = *((void *)&v51 + 1);
    operator delete(*((void **)&v51 + 1));
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
}

void sub_1DDB11624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v35 = *(void **)(v33 - 136);
  if (v35)
  {
    *(void *)(v33 - 128) = v35;
    operator delete(v35);
  }
  long long v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(void *)(v33 - 96) = v36;
    operator delete(v36);
  }
  float v37 = *(void **)(v33 - 72);
  if (v37)
  {
    *(void *)(v33 - 64) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1DDB11748(double *a1)
{
  if (*a1 <= 0.0) {
    return 0;
  }
  double v1 = a1[1];
  return v1 > 0.0 && *a1 + v1 < 1.0;
}

double sub_1DDB1177C(int a1)
{
  double result = 0.0;
  if ((a1 - 1) <= 0x17) {
    return dbl_1DDBFDDF8[a1 - 1];
  }
  return result;
}

void sub_1DDB1179C(unsigned int *a1@<X0>, unsigned int *a2@<X8>)
{
  if (*a1) {
    BOOL v4 = a1[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    sub_1DDAD80E8(a2, (uint64_t)a1);
  }
  else
  {
    double v7 = sub_1DDB10E80();
    double v8 = v5;
    sub_1DDB10F60(&v7, &__p);
    sub_1DDAD86A8((uint64_t *)&__p, &v13);
    if (__p)
    {
      int32x4_t v11 = __p;
      operator delete(__p);
    }
    sub_1DDAD8BC8(a1, &v13, (uint64_t)&__p);
    double v6 = sub_1DDAD97A4((unsigned int *)&__p);
    sub_1DDAD80E8(a2, (uint64_t)a1);
    if (v6 > 0.0 && (v6 < 0.99 || v6 > 1.01))
    {
      sub_1DDAD8AE0(a2, (uint64_t)&v7, 1.0 / v6);
      sub_1DDAD88E8(a2, (uint64_t)&v7);
      if (v8)
      {
        double v9 = v8;
        operator delete(v8);
      }
    }
    sub_1DDAD944C(a2, (uint64_t)&v7, 10000.0);
    sub_1DDAD88E8(a2, (uint64_t)&v7);
    if (v8)
    {
      double v9 = v8;
      operator delete(v8);
    }
    if (v11)
    {
      double v12 = v11;
      operator delete(v11);
    }
    if (*((void *)&v13 + 1))
    {
      uint64_t v14 = *((void *)&v13 + 1);
      operator delete(*((void **)&v13 + 1));
    }
  }
}

void sub_1DDB1190C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v21 = *(void **)(v19 + 8);
  if (v21)
  {
    *(void *)(v19 + 16) = v21;
    operator delete(v21);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB1198C(_DWORD *a1, uint64_t *a2)
{
  BOOL v4 = a1 + 12;
  if (!a1[12] || (int v5 = a1[13], v6 = a1 + 12, !v5)) {
    double v6 = a1 + 4;
  }
  if (sub_1DDAD88D8(v6) >= 2)
  {
    int v8 = a1[2];
    int v7 = a1[3];
    double v9 = sub_1DDB1177C(v8);
    double v10 = sub_1DDB1177C(v7);
    sub_1DDB1179C(a1 + 4, (unsigned int *)&v58);
    sub_1DDB1179C(v4, (unsigned int *)&v55);
    sub_1DDAD944C(a1 + 54, (uint64_t)v52, 10000.0);
    sub_1DDAD944C(a1 + 62, (uint64_t)&v49, 10000.0);
    sub_1DDAD944C(a1 + 20, (uint64_t)&v45, 10000.0);
    sub_1DDAD944C(a1 + 28, (uint64_t)&v41, 10000.0);
    uint64_t v29 = a1 + 62;
    long long v30 = a1 + 54;
    sub_1DDAD944C(a1 + 36, (uint64_t)&v38, 10000.0);
    sub_1DDAD944C(a1 + 44, (uint64_t)&v35, 10000.0);
    if (v45 && v46)
    {
      int v11 = sub_1DDAD88D8(&v45);
      if (!*v4 || (double v12 = v4, !a1[13])) {
        double v12 = a1 + 4;
      }
      if (v11 == sub_1DDAD88D8(v12))
      {
        int v13 = sub_1DDAD88E0((uint64_t)&v45);
        if (!*v4 || (uint64_t v14 = v4, !a1[13])) {
          uint64_t v14 = a1 + 4;
        }
        if (v13 == sub_1DDAD88D8(v14))
        {
          sub_1DDAD8BC8(&v45, &v58, (uint64_t)&v33);
          sub_1DDAD88E8(&v58, (uint64_t)&v33);
          if (*((void *)&v33 + 1))
          {
            uint64_t v34 = *((void *)&v33 + 1);
            operator delete(*((void **)&v33 + 1));
          }
        }
      }
    }
    if (v55 && HIDWORD(v55) && v9 > 0.0 && v10 > 0.0 && v9 != v10)
    {
      if (v41 && v42)
      {
        int v15 = sub_1DDAD88D8(&v41);
        if (!*v4 || (uint64_t v16 = v4, !a1[13])) {
          uint64_t v16 = a1 + 4;
        }
        if (v15 == sub_1DDAD88D8(v16))
        {
          int v17 = sub_1DDAD88E0((uint64_t)&v41);
          if (!*v4 || (double v18 = v4, !a1[13])) {
            double v18 = a1 + 4;
          }
          if (v17 == sub_1DDAD88D8(v18))
          {
            sub_1DDAD8BC8(&v41, &v55, (uint64_t)&v33);
            sub_1DDAD88E8(&v55, (uint64_t)&v33);
            if (*((void *)&v33 + 1))
            {
              uint64_t v34 = *((void *)&v33 + 1);
              operator delete(*((void **)&v33 + 1));
            }
          }
        }
      }
    }
    else
    {
      sub_1DDAD88E8(&v55, (uint64_t)&v58);
      sub_1DDAD88E8(&v49, (uint64_t)v52);
      double v9 = 5000.0;
      double v10 = 5000.0;
    }
    if (v45)
    {
      if (!v41)
      {
        if (!v46) {
          goto LABEL_69;
        }
        goto LABEL_58;
      }
      if (v46 && v42)
      {
        int v19 = sub_1DDAD88E0((uint64_t)&v45);
        if (v19 == sub_1DDAD88E0((uint64_t)&v38))
        {
          sub_1DDAD8FBC(&v45, &v31);
          sub_1DDAD8BC8((unsigned int *)&v38, &v31, (uint64_t)&v33);
          sub_1DDAD88E8(&v38, (uint64_t)&v33);
          if (*((void *)&v33 + 1))
          {
            uint64_t v34 = *((void *)&v33 + 1);
            operator delete(*((void **)&v33 + 1));
          }
          if (*((void *)&v31 + 1))
          {
            uint64_t v32 = *((void *)&v31 + 1);
            operator delete(*((void **)&v31 + 1));
          }
        }
        int v20 = sub_1DDAD88E0((uint64_t)&v41);
        if (v20 != sub_1DDAD88E0((uint64_t)&v35)) {
          goto LABEL_69;
        }
        goto LABEL_45;
      }
      if (v46)
      {
LABEL_58:
        int v23 = sub_1DDAD88E0((uint64_t)&v45);
        if (v23 == sub_1DDAD88E0((uint64_t)&v38))
        {
          int v24 = sub_1DDAD88E0((uint64_t)&v45);
          if (v24 == sub_1DDAD88E0((uint64_t)&v35))
          {
            sub_1DDAD8FBC(&v45, &v31);
            sub_1DDAD8BC8((unsigned int *)&v38, &v31, (uint64_t)&v33);
            sub_1DDAD88E8(&v38, (uint64_t)&v33);
            if (*((void *)&v33 + 1))
            {
              uint64_t v34 = *((void *)&v33 + 1);
              operator delete(*((void **)&v33 + 1));
            }
            if (*((void *)&v31 + 1))
            {
              uint64_t v32 = *((void *)&v31 + 1);
              operator delete(*((void **)&v31 + 1));
            }
            sub_1DDAD8FBC(&v45, &v31);
            sub_1DDAD8BC8((unsigned int *)&v35, &v31, (uint64_t)&v33);
            sub_1DDAD88E8(&v35, (uint64_t)&v33);
            goto LABEL_65;
          }
        }
        goto LABEL_69;
      }
      if (!v42) {
        goto LABEL_69;
      }
    }
    else if (!v41 || !v42)
    {
      goto LABEL_69;
    }
    int v21 = sub_1DDAD88E0((uint64_t)&v41);
    if (v21 == sub_1DDAD88E0((uint64_t)&v38))
    {
      int v22 = sub_1DDAD88E0((uint64_t)&v41);
      if (v22 == sub_1DDAD88E0((uint64_t)&v35))
      {
        sub_1DDAD8FBC(&v41, &v31);
        sub_1DDAD8BC8((unsigned int *)&v38, &v31, (uint64_t)&v33);
        sub_1DDAD88E8(&v38, (uint64_t)&v33);
        if (*((void *)&v33 + 1))
        {
          uint64_t v34 = *((void *)&v33 + 1);
          operator delete(*((void **)&v33 + 1));
        }
        if (*((void *)&v31 + 1))
        {
          uint64_t v32 = *((void *)&v31 + 1);
          operator delete(*((void **)&v31 + 1));
        }
LABEL_45:
        sub_1DDAD8FBC(&v41, &v31);
        sub_1DDAD8BC8((unsigned int *)&v35, &v31, (uint64_t)&v33);
        sub_1DDAD88E8(&v35, (uint64_t)&v33);
LABEL_65:
        if (*((void *)&v33 + 1))
        {
          uint64_t v34 = *((void *)&v33 + 1);
          operator delete(*((void **)&v33 + 1));
        }
        if (*((void *)&v31 + 1))
        {
          uint64_t v32 = *((void *)&v31 + 1);
          operator delete(*((void **)&v31 + 1));
        }
      }
    }
LABEL_69:
    if (!*v4 || (double v25 = v4, !a1[13])) {
      double v25 = a1 + 4;
    }
    uint64_t v27 = *a2;
    uint64_t v26 = a2[1];
    if ((v26 - v27) >> 3 == sub_1DDAD88D8(v25))
    {
      sub_1DDAD8D84((unsigned int *)&v58, a2, (uint64_t)&v33);
      sub_1DDAD88E8(&v58, (uint64_t)&v33);
      if (*((void *)&v33 + 1))
      {
        uint64_t v34 = *((void *)&v33 + 1);
        operator delete(*((void **)&v33 + 1));
      }
      sub_1DDAD8D84((unsigned int *)&v55, a2, (uint64_t)&v33);
      sub_1DDAD88E8(&v55, (uint64_t)&v33);
      if (*((void *)&v33 + 1))
      {
        uint64_t v34 = *((void *)&v33 + 1);
        operator delete(*((void **)&v33 + 1));
      }
    }
    if (v9 <= v10)
    {
      a1[2] = v8;
      a1[3] = v7;
      sub_1DDAD88E8((void *)a1 + 2, (uint64_t)&v58);
      sub_1DDAD88E8(v4, (uint64_t)&v55);
      sub_1DDAD88E8(v30, (uint64_t)v52);
      sub_1DDAD88E8(v29, (uint64_t)&v49);
      sub_1DDAD88E8((void *)a1 + 18, (uint64_t)&v38);
      uint64_t v28 = &v35;
    }
    else
    {
      a1[2] = v7;
      a1[3] = v8;
      sub_1DDAD88E8((void *)a1 + 2, (uint64_t)&v55);
      sub_1DDAD88E8(v4, (uint64_t)&v58);
      sub_1DDAD88E8(v30, (uint64_t)&v49);
      sub_1DDAD88E8(v29, (uint64_t)v52);
      sub_1DDAD88E8((void *)a1 + 18, (uint64_t)&v35);
      uint64_t v28 = &v38;
    }
    sub_1DDAD88E8((void *)a1 + 22, (uint64_t)v28);
    sub_1DDAD80DC(&v33);
    sub_1DDAD88E8((void *)a1 + 10, (uint64_t)&v33);
    sub_1DDAD88E8((void *)a1 + 14, (uint64_t)&v33);
    if (*((void *)&v33 + 1))
    {
      uint64_t v34 = *((void *)&v33 + 1);
      operator delete(*((void **)&v33 + 1));
    }
    if (v36)
    {
      float v37 = v36;
      operator delete(v36);
    }
    if (v39)
    {
      int v40 = v39;
      operator delete(v39);
    }
    if (v43)
    {
      float v44 = v43;
      operator delete(v43);
    }
    if (v47)
    {
      float v48 = v47;
      operator delete(v47);
    }
    if (v50)
    {
      long long v51 = v50;
      operator delete(v50);
    }
    if (v53)
    {
      unsigned int v54 = v53;
      operator delete(v53);
    }
    if (v56)
    {
      double v57 = v56;
      operator delete(v56);
    }
    if (v59)
    {
      double v60 = v59;
      operator delete(v59);
    }
  }
}

void sub_1DDB1208C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a39) {
    operator delete(a39);
  }
  int v42 = *(void **)(v40 - 208);
  if (v42)
  {
    *(void *)(v40 - 200) = v42;
    operator delete(v42);
  }
  float v43 = *(void **)(v40 - 176);
  if (v43)
  {
    *(void *)(v40 - 168) = v43;
    operator delete(v43);
  }
  float v44 = *(void **)(v40 - 144);
  if (v44)
  {
    *(void *)(v40 - 136) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB121FC(uint64_t a1@<X0>, double *a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  sub_1DDAD80DC(&v66);
  sub_1DDAD80DC(&v64);
  sub_1DDAD80DC(&v62);
  sub_1DDAD80DC(&v60);
  sub_1DDB129D0(a1, a2, &v66, &v62, (uint64_t)&v64);
  if (!v66 || !DWORD1(v66))
  {
    sub_1DDAD80E8(a4, (uint64_t)&v66);
    goto LABEL_65;
  }
  if (*(_WORD *)(a1 + 208))
  {
    sub_1DDB10F60(a2, &v54);
    sub_1DDAD86A8((uint64_t *)&v54, &v56);
    sub_1DDAD8BC8((unsigned int *)&v66, &v56, (uint64_t)&v58);
    if (*((void *)&v56 + 1))
    {
      uint64_t v57 = *((void *)&v56 + 1);
      operator delete(*((void **)&v56 + 1));
    }
    if ((void)v54)
    {
      *((void *)&v54 + 1) = v54;
      operator delete((void *)v54);
    }
    double v8 = sub_1DDAD97A4((unsigned int *)&v58);
    for (unsigned int i = 0; i < sub_1DDAD88D8((unsigned int *)&v58); ++i)
    {
      *(void *)&long long v56 = sub_1DDAD8560((uint64_t)&v58, i);
      *((void *)&v56 + 1) = v10;
      int v11 = (double *)sub_1DDAD85FC((uint64_t)&v56, 0);
      double v12 = *v11 / v8;
      if (v12 <= 1.0) {
        double v13 = *v11 / v8;
      }
      else {
        double v13 = 1.0;
      }
      if (v12 >= 0.001) {
        double v14 = v13;
      }
      else {
        double v14 = 0.001;
      }
      *(void *)&long long v54 = sub_1DDAD8560((uint64_t)&v58, i);
      *((void *)&v54 + 1) = v15;
      *(double *)sub_1DDAD85FC((uint64_t)&v54, 0) = v14;
    }
    sub_1DDAD9904((uint64_t)&v58, &v52);
    sub_1DDAD8780((uint64_t *)&v52, &v54);
    sub_1DDAD8FBC((unsigned int *)&v54, &v56);
    if (*((void *)&v54 + 1))
    {
      uint64_t v55 = *((void *)&v54 + 1);
      operator delete(*((void **)&v54 + 1));
    }
    if ((void)v52)
    {
      *((void *)&v52 + 1) = v52;
      operator delete((void *)v52);
    }
    sub_1DDAD8BC8((unsigned int *)&v64, &v56, (uint64_t)&v54);
    sub_1DDAD88E8(&v60, (uint64_t)&v54);
    if (*((void *)&v54 + 1))
    {
      uint64_t v55 = *((void *)&v54 + 1);
      operator delete(*((void **)&v54 + 1));
    }
    if (!v60 || !DWORD1(v60))
    {
      sub_1DDAD80E8(a4, (uint64_t)&v60);
LABEL_61:
      if (*((void *)&v56 + 1))
      {
        uint64_t v57 = *((void *)&v56 + 1);
        operator delete(*((void **)&v56 + 1));
      }
      if (*((void *)&v58 + 1))
      {
        uint64_t v59 = *((void *)&v58 + 1);
        operator delete(*((void **)&v58 + 1));
      }
      goto LABEL_65;
    }
    if (*((void *)&v56 + 1))
    {
      uint64_t v57 = *((void *)&v56 + 1);
      operator delete(*((void **)&v56 + 1));
    }
    if (*((void *)&v58 + 1))
    {
      uint64_t v59 = *((void *)&v58 + 1);
      operator delete(*((void **)&v58 + 1));
    }
LABEL_51:
    sub_1DDAD8240((uint64_t)&v58, 3u, 1u, 1.0, v16, v17, v18, v19, v20, 0x3FF0000000000000);
    sub_1DDAD8BC8(a3, &v58, (uint64_t)&v56);
    double v46 = sub_1DDB10E80();
    BOOL v47 = v30;
    sub_1DDB10F60(&v46, &v52);
    sub_1DDAD86A8((uint64_t *)&v52, &v54);
    if ((void)v52)
    {
      *((void *)&v52 + 1) = v52;
      operator delete((void *)v52);
    }
    *(void *)&long long v52 = sub_1DDAD8560((uint64_t)&v54, 0);
    *((void *)&v52 + 1) = v31;
    double v32 = *(double *)sub_1DDAD85FC((uint64_t)&v52, 0);
    double v46 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)&v56, 0));
    BOOL v47 = v33;
    double v34 = *(double *)sub_1DDAD85FC((uint64_t)&v46, 0);
    *(void *)&long long v52 = sub_1DDAD8560((uint64_t)&v54, 1u);
    *((void *)&v52 + 1) = v35;
    sub_1DDAD85FC((uint64_t)&v52, 0);
    double v46 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)&v56, 1u));
    BOOL v47 = v36;
    sub_1DDAD85FC((uint64_t)&v46, 0);
    *(void *)&long long v52 = sub_1DDAD8560((uint64_t)&v54, 2u);
    *((void *)&v52 + 1) = v37;
    sub_1DDAD85FC((uint64_t)&v52, 0);
    double v46 = COERCE_DOUBLE(sub_1DDAD8560((uint64_t)&v56, 2u));
    BOOL v47 = v38;
    sub_1DDAD85FC((uint64_t)&v46, 0);
    sub_1DDAD8240((uint64_t)&v52, 3u, 3u, v32 / v34, v39, v40, v41, v42, v43, 0);
    sub_1DDAD8BC8((unsigned int *)&v52, a3, (uint64_t)&v46);
    sub_1DDAD8FBC((unsigned int *)&v46, &v44);
    sub_1DDAD8BC8((unsigned int *)&v44, &v60, (uint64_t)a4);
    if (*((void *)&v44 + 1))
    {
      uint64_t v45 = *((void *)&v44 + 1);
      operator delete(*((void **)&v44 + 1));
    }
    if (v47)
    {
      float v48 = v47;
      operator delete(v47);
    }
    if (*((void *)&v52 + 1))
    {
      uint64_t v53 = *((void *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    if (*((void *)&v54 + 1))
    {
      uint64_t v55 = *((void *)&v54 + 1);
      operator delete(*((void **)&v54 + 1));
    }
    goto LABEL_61;
  }
  *(void *)&long long v56 = sub_1DDB10E80();
  *((void *)&v56 + 1) = v21;
  sub_1DDB11218((double *)&v56, a2, v22, v23, v24, v25, v26, &v58);
  if (v58 && DWORD1(v58))
  {
    sub_1DDAD8BC8((unsigned int *)&v66, &v58, (uint64_t)&v56);
    double v46 = sub_1DDB10E80();
    BOOL v47 = v27;
    sub_1DDB10F60(&v46, &v52);
    sub_1DDAD86A8((uint64_t *)&v52, &v54);
    if ((void)v52)
    {
      *((void *)&v52 + 1) = v52;
      operator delete((void *)v52);
    }
    sub_1DDAD8BC8((unsigned int *)&v56, &v54, (uint64_t)&v52);
    double v28 = sub_1DDAD97A4((unsigned int *)&v52);
    if (*((void *)&v52 + 1))
    {
      uint64_t v53 = *((void *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    sub_1DDAD8AE0((unsigned int *)&v56, (uint64_t)&v52, 1.0 / v28);
    sub_1DDAD88E8(&v56, (uint64_t)&v52);
    if (*((void *)&v52 + 1))
    {
      uint64_t v53 = *((void *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    sub_1DDAD80E8(&v49, (uint64_t)&v62);
    sub_1DDAD9334((unsigned int *)&v56, (unsigned int *)&v49, &v52);
    sub_1DDAD88E8(&v60, (uint64_t)&v52);
    if (*((void *)&v52 + 1))
    {
      uint64_t v53 = *((void *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    if (v50)
    {
      long long v51 = v50;
      operator delete(v50);
    }
    if (v60 && DWORD1(v60))
    {
      int v29 = 0;
    }
    else
    {
      sub_1DDAD80E8(a4, (uint64_t)&v60);
      int v29 = 1;
    }
    if (*((void *)&v54 + 1))
    {
      uint64_t v55 = *((void *)&v54 + 1);
      operator delete(*((void **)&v54 + 1));
    }
    if (*((void *)&v56 + 1))
    {
      uint64_t v57 = *((void *)&v56 + 1);
      operator delete(*((void **)&v56 + 1));
    }
  }
  else
  {
    sub_1DDAD80E8(a4, (uint64_t)&v58);
    int v29 = 1;
  }
  if (*((void *)&v58 + 1))
  {
    uint64_t v59 = *((void *)&v58 + 1);
    operator delete(*((void **)&v58 + 1));
  }
  if (!v29) {
    goto LABEL_51;
  }
LABEL_65:
  if (*((void *)&v60 + 1))
  {
    uint64_t v61 = *((void *)&v60 + 1);
    operator delete(*((void **)&v60 + 1));
  }
  if (*((void *)&v62 + 1))
  {
    uint64_t v63 = *((void *)&v62 + 1);
    operator delete(*((void **)&v62 + 1));
  }
  if (*((void *)&v64 + 1))
  {
    uint64_t v65 = *((void *)&v64 + 1);
    operator delete(*((void **)&v64 + 1));
  }
  if (*((void *)&v66 + 1))
  {
    uint64_t v67 = *((void *)&v66 + 1);
    operator delete(*((void **)&v66 + 1));
  }
}

void sub_1DDB127D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  if (__p) {
    operator delete(__p);
  }
  if (a38) {
    operator delete(a38);
  }
  if (a42) {
    operator delete(a42);
  }
  uint64_t v45 = *(void **)(v43 - 216);
  if (v45)
  {
    *(void *)(v43 - 208) = v45;
    operator delete(v45);
  }
  double v46 = *(void **)(v43 - 184);
  if (v46)
  {
    *(void *)(v43 - 176) = v46;
    operator delete(v46);
  }
  BOOL v47 = *(void **)(v43 - 152);
  if (v47)
  {
    *(void *)(v43 - 144) = v47;
    operator delete(v47);
  }
  float v48 = *(void **)(v43 - 120);
  if (v48)
  {
    *(void *)(v43 - 112) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB129D0(uint64_t a1, double *a2, void *a3, void *a4, uint64_t a5)
{
  sub_1DDAD869C(&v39);
  sub_1DDAD88E8(a3, (uint64_t)&v39);
  if (*((void *)&v39 + 1))
  {
    uint64_t v40 = *((void *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  sub_1DDAD869C(&v39);
  sub_1DDAD88E8(a4, (uint64_t)&v39);
  if (*((void *)&v39 + 1))
  {
    uint64_t v40 = *((void *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  sub_1DDAD869C(&v39);
  sub_1DDAD88E8((void *)a5, (uint64_t)&v39);
  if (*((void *)&v39 + 1))
  {
    uint64_t v40 = *((void *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  double v10 = sub_1DDB13200(a1, a2);
  if (v10 >= 1.0)
  {
    uint64_t v11 = a1 + 16;
LABEL_21:
    sub_1DDAD88E8(a3, v11);
    goto LABEL_22;
  }
  if (v10 <= 0.0)
  {
    uint64_t v11 = a1 + 48;
    goto LABEL_21;
  }
  if (!*(_DWORD *)(a1 + 16) || !*(_DWORD *)(a1 + 20) || !*(_DWORD *)(a1 + 48) || !*(_DWORD *)(a1 + 52))
  {
    sub_1DDAD869C(&v39);
    sub_1DDAD88E8(a3, (uint64_t)&v39);
    double v12 = (void *)*((void *)&v39 + 1);
    if (!*((void *)&v39 + 1)) {
      goto LABEL_22;
    }
    uint64_t v40 = *((void *)&v39 + 1);
    goto LABEL_41;
  }
  sub_1DDAD8AE0((unsigned int *)(a1 + 16), (uint64_t)&v37, v10);
  sub_1DDAD8AE0((unsigned int *)(a1 + 48), (uint64_t)&v34, 1.0 - v10);
  sub_1DDAD8964((unsigned int *)&v37, &v34, (uint64_t)&v39);
  sub_1DDAD88E8(a3, (uint64_t)&v39);
  if (*((void *)&v39 + 1))
  {
    uint64_t v40 = *((void *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  if (__p)
  {
    long long v36 = __p;
    operator delete(__p);
  }
  double v12 = (void *)*((void *)&v37 + 1);
  if (*((void *)&v37 + 1))
  {
    uint64_t v38 = *((void *)&v37 + 1);
LABEL_41:
    operator delete(v12);
  }
LABEL_22:
  uint64_t v13 = a1 + 216;
  if (!*(_DWORD *)(a1 + 216))
  {
    uint64_t v14 = a1 + 248;
    if (*(_DWORD *)(a1 + 248) && *(_DWORD *)(a1 + 252)) {
      goto LABEL_45;
    }
    goto LABEL_47;
  }
  uint64_t v14 = a1 + 248;
  int v15 = *(_DWORD *)(a1 + 220);
  if (!*(_DWORD *)(a1 + 248))
  {
    if (v15) {
      goto LABEL_43;
    }
LABEL_47:
    sub_1DDAD869C(&v39);
    sub_1DDAD88E8(a4, (uint64_t)&v39);
    uint64_t v17 = (void *)*((void *)&v39 + 1);
    if (!*((void *)&v39 + 1)) {
      goto LABEL_50;
    }
    uint64_t v40 = *((void *)&v39 + 1);
    goto LABEL_49;
  }
  int v16 = *(_DWORD *)(a1 + 252);
  if (!v15 || !v16)
  {
    if (v15) {
      goto LABEL_43;
    }
    if (v16) {
      goto LABEL_45;
    }
    goto LABEL_47;
  }
  if (v10 >= 1.0)
  {
LABEL_43:
    uint64_t v18 = a4;
LABEL_46:
    sub_1DDAD88E8(v18, v13);
    goto LABEL_50;
  }
  if (v10 <= 0.0)
  {
LABEL_45:
    uint64_t v18 = a4;
    uint64_t v13 = v14;
    goto LABEL_46;
  }
  sub_1DDAD8AE0((unsigned int *)(a1 + 216), (uint64_t)&v37, v10);
  sub_1DDAD8AE0((unsigned int *)(a1 + 248), (uint64_t)&v34, 1.0 - v10);
  sub_1DDAD8964((unsigned int *)&v37, &v34, (uint64_t)&v39);
  sub_1DDAD88E8(a4, (uint64_t)&v39);
  if (*((void *)&v39 + 1))
  {
    uint64_t v40 = *((void *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  if (__p)
  {
    long long v36 = __p;
    operator delete(__p);
  }
  uint64_t v17 = (void *)*((void *)&v37 + 1);
  if (*((void *)&v37 + 1))
  {
    uint64_t v38 = *((void *)&v37 + 1);
LABEL_49:
    operator delete(v17);
  }
LABEL_50:
  if (!*(_WORD *)(a1 + 208)) {
    return;
  }
  *(void *)&long long v37 = sub_1DDB10EBC();
  *((void *)&v37 + 1) = v19;
  sub_1DDAD80E8(&v31, a1 + 16);
  sub_1DDB13298((double *)&v37, (unsigned int *)&v31, &v39);
  if (v32)
  {
    long long v33 = v32;
    operator delete(v32);
  }
  double v34 = sub_1DDB10EA8();
  std::string __p = v20;
  sub_1DDAD80E8(&v28, a1 + 48);
  sub_1DDB13298(&v34, (unsigned int *)&v28, &v37);
  if (v29)
  {
    long long v30 = v29;
    operator delete(v29);
  }
  if (v10 < 1.0)
  {
    if (v10 > 0.0)
    {
      sub_1DDAD8AE0((unsigned int *)&v39, (uint64_t)&v25, v10);
      sub_1DDAD8AE0((unsigned int *)&v37, (uint64_t)&v22, 1.0 - v10);
      sub_1DDAD8964(&v25, &v22, (uint64_t)&v34);
      sub_1DDAD88E8((void *)a5, (uint64_t)&v34);
      if (__p)
      {
        long long v36 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        uint64_t v24 = v23;
        operator delete(v23);
      }
      if (v26)
      {
        uint64_t v27 = v26;
        operator delete(v26);
      }
      goto LABEL_66;
    }
    uint64_t v21 = &v37;
  }
  else
  {
    uint64_t v21 = &v39;
  }
  sub_1DDAD88E8((void *)a5, (uint64_t)v21);
LABEL_66:
  if (!*(_DWORD *)a5 || !*(_DWORD *)(a5 + 4)) {
    *(_WORD *)(a1 + 208) = 0;
  }
  if (*(_DWORD *)(a1 + 8) != 17 || *(_DWORD *)(a1 + 12) != 21) {
    *(_WORD *)(a1 + 208) = 0;
  }
  if (*((void *)&v37 + 1))
  {
    uint64_t v38 = *((void *)&v37 + 1);
    operator delete(*((void **)&v37 + 1));
  }
  if (*((void *)&v39 + 1))
  {
    uint64_t v40 = *((void *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
}

void sub_1DDB12DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  int v29 = *(void **)(v27 - 88);
  if (v29)
  {
    *(void *)(v27 - 80) = v29;
    operator delete(v29);
  }
  if (__p) {
    operator delete(__p);
  }
  long long v30 = *(void **)(v27 - 120);
  if (v30)
  {
    *(void *)(v27 - 112) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB12EF8(unsigned int *a1, double *a2, void *a3, void *a4)
{
  sub_1DDAD869C(&v23);
  sub_1DDAD88E8(a3, (uint64_t)&v23);
  if (*((void *)&v23 + 1))
  {
    uint64_t v24 = *((void *)&v23 + 1);
    operator delete(*((void **)&v23 + 1));
  }
  sub_1DDAD869C(&v23);
  sub_1DDAD88E8(a4, (uint64_t)&v23);
  if (*((void *)&v23 + 1))
  {
    uint64_t v24 = *((void *)&v23 + 1);
    operator delete(*((void **)&v23 + 1));
  }
  double v8 = sub_1DDB13200((uint64_t)a1, a2);
  if (v8 >= 1.0)
  {
    uint64_t v9 = (uint64_t)(a1 + 4);
LABEL_19:
    sub_1DDAD88E8(a3, v9);
    goto LABEL_20;
  }
  if (v8 <= 0.0)
  {
    uint64_t v9 = (uint64_t)(a1 + 12);
    goto LABEL_19;
  }
  if (!a1[4] || !a1[5] || !a1[12] || !a1[13])
  {
    sub_1DDAD869C(&v23);
    sub_1DDAD88E8(a3, (uint64_t)&v23);
    double v10 = (void *)*((void *)&v23 + 1);
    if (!*((void *)&v23 + 1)) {
      goto LABEL_20;
    }
    uint64_t v24 = *((void *)&v23 + 1);
    goto LABEL_39;
  }
  sub_1DDAD8AE0(a1 + 4, (uint64_t)&v20, v8);
  sub_1DDAD8AE0(a1 + 12, (uint64_t)&v17, 1.0 - v8);
  sub_1DDAD8964(&v20, &v17, (uint64_t)&v23);
  sub_1DDAD88E8(a3, (uint64_t)&v23);
  if (*((void *)&v23 + 1))
  {
    uint64_t v24 = *((void *)&v23 + 1);
    operator delete(*((void **)&v23 + 1));
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  double v10 = v21;
  if (v21)
  {
    int v22 = v21;
LABEL_39:
    operator delete(v10);
  }
LABEL_20:
  uint64_t v11 = (uint64_t)(a1 + 54);
  if (!a1[54])
  {
    double v12 = a1 + 62;
    if (a1[62] && a1[63]) {
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  double v12 = a1 + 62;
  unsigned int v13 = a1[55];
  if (!a1[62])
  {
    if (v13) {
      goto LABEL_41;
    }
LABEL_45:
    sub_1DDAD869C(&v23);
    sub_1DDAD88E8(a4, (uint64_t)&v23);
    int v15 = (void *)*((void *)&v23 + 1);
    if (!*((void *)&v23 + 1)) {
      return;
    }
    uint64_t v24 = *((void *)&v23 + 1);
    goto LABEL_47;
  }
  unsigned int v14 = a1[63];
  if (!v13 || !v14)
  {
    if (v13) {
      goto LABEL_41;
    }
    if (v14) {
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  if (v8 >= 1.0)
  {
LABEL_41:
    int v16 = a4;
LABEL_44:
    sub_1DDAD88E8(v16, v11);
    return;
  }
  if (v8 <= 0.0)
  {
LABEL_43:
    int v16 = a4;
    uint64_t v11 = (uint64_t)v12;
    goto LABEL_44;
  }
  sub_1DDAD8AE0(a1 + 54, (uint64_t)&v20, v8);
  sub_1DDAD8AE0(a1 + 62, (uint64_t)&v17, 1.0 - v8);
  sub_1DDAD8964(&v20, &v17, (uint64_t)&v23);
  sub_1DDAD88E8(a4, (uint64_t)&v23);
  if (*((void *)&v23 + 1))
  {
    uint64_t v24 = *((void *)&v23 + 1);
    operator delete(*((void **)&v23 + 1));
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  int v15 = v21;
  if (v21)
  {
    int v22 = v21;
LABEL_47:
    operator delete(v15);
  }
}

void sub_1DDB13188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB13200(uint64_t a1, double *a2)
{
  uint64_t v7 = 0;
  double v8 = 0.0;
  sub_1DDB10FF0(a2, &v8, (double *)&v7);
  double v3 = sub_1DDB1177C(*(_DWORD *)(a1 + 8));
  double v4 = sub_1DDB1177C(*(_DWORD *)(a1 + 12));
  double v5 = 1.0;
  if (v8 > v3)
  {
    double v5 = 0.0;
    if (v8 < v4) {
      return (1.0 / v8 - 1.0 / v4) / (1.0 / v3 - 1.0 / v4);
    }
  }
  return v5;
}

void sub_1DDB13298(double *a1@<X1>, unsigned int *a2@<X2>, _OWORD *a3@<X8>)
{
  sub_1DDAD869C(a3);
  sub_1DDB10F60(a1, &v33);
  sub_1DDAD86A8((uint64_t *)&v33, &v36);
  sub_1DDAD8BC8(a2, &v36, (uint64_t)v38);
  if (*((void *)&v36 + 1))
  {
    uint64_t v37 = *((void *)&v36 + 1);
    operator delete(*((void **)&v36 + 1));
  }
  if (v33)
  {
    double v34 = v33;
    operator delete(v33);
  }
  sub_1DDAD9904((uint64_t)v38, &v33);
  sub_1DDAD8780((uint64_t *)&v33, &v36);
  if (v33)
  {
    double v34 = v33;
    operator delete(v33);
  }
  sub_1DDAD8FBC(a2, &v31);
  sub_1DDAD8BC8((unsigned int *)&v31, &v36, (uint64_t)&v33);
  if (*((void *)&v31 + 1))
  {
    uint64_t v32 = *((void *)&v31 + 1);
    operator delete(*((void **)&v31 + 1));
  }
  sub_1DDAD8240((uint64_t)&v31, 3u, 1u, 1.0, v6, v7, v8, v9, v10, 0x3FF0000000000000);
  sub_1DDAD8BC8((unsigned int *)&v33, &v31, (uint64_t)&v28);
  *(void *)&long long v26 = sub_1DDAD8560((uint64_t)&v28, 1u);
  *((void *)&v26 + 1) = v11;
  double v12 = 1.0 / *(double *)sub_1DDAD85FC((uint64_t)&v26, 0);
  sub_1DDAD8AE0((unsigned int *)&v28, (uint64_t)&v26, v12);
  sub_1DDAD88E8(&v28, (uint64_t)&v26);
  if (*((void *)&v26 + 1))
  {
    uint64_t v27 = *((void *)&v26 + 1);
    operator delete(*((void **)&v26 + 1));
  }
  sub_1DDAD9904((uint64_t)&v28, &v22);
  sub_1DDB10F1C((uint64_t)&v19, (uint64_t)&v22);
  v25[0] = sub_1DDB10E80();
  v25[1] = v13;
  sub_1DDB11218(&v19, v25, v14, v15, v16, v17, v18, &v26);
  if (v22)
  {
    long long v23 = v22;
    operator delete(v22);
  }
  sub_1DDAD8BC8((unsigned int *)&v26, &v33, (uint64_t)&v19);
  sub_1DDAD8AE0((unsigned int *)&v19, (uint64_t)&v22, v12);
  sub_1DDAD88E8(a3, (uint64_t)&v22);
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }
  if (*((void *)&v26 + 1))
  {
    uint64_t v27 = *((void *)&v26 + 1);
    operator delete(*((void **)&v26 + 1));
  }
  if (v29)
  {
    long long v30 = v29;
    operator delete(v29);
  }
  if (*((void *)&v31 + 1))
  {
    uint64_t v32 = *((void *)&v31 + 1);
    operator delete(*((void **)&v31 + 1));
  }
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  if (*((void *)&v36 + 1))
  {
    uint64_t v37 = *((void *)&v36 + 1);
    operator delete(*((void **)&v36 + 1));
  }
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
}

void sub_1DDB134E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a30) {
    operator delete(a30);
  }
  double v34 = *(void **)(v32 - 136);
  if (v34)
  {
    *(void *)(v32 - 128) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(v32 - 104);
  if (v35)
  {
    *(void *)(v32 - 96) = v35;
    operator delete(v35);
  }
  long long v36 = *(void **)(v32 - 72);
  if (v36)
  {
    *(void *)(v32 - 64) = v36;
    operator delete(v36);
  }
  uint64_t v37 = *(void **)(v31 + 8);
  if (v37)
  {
    *(void *)(v31 + 16) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

double sub_1DDB13638(unsigned int *a1, uint64_t *a2)
{
  double v40 = sub_1DDB10E80();
  double v41 = v4;
  sub_1DDAD86A8(a2, &v38);
  if (v38) {
    BOOL v5 = DWORD1(v38) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    int v6 = 29;
    do
    {
      int v7 = v6;
      sub_1DDAD80DC(&v36);
      sub_1DDAD80DC(&v34);
      sub_1DDB12EF8(a1, &v40, &v36, &v34);
      int v8 = 1;
      if (v36 && DWORD1(v36))
      {
        sub_1DDAD80E8(&v29, (uint64_t)&v34);
        sub_1DDAD9334((unsigned int *)&v36, (unsigned int *)&v29, &v32);
        if (__p)
        {
          uint64_t v31 = __p;
          operator delete(__p);
        }
        if (v32 && DWORD1(v32))
        {
          sub_1DDAD8BC8((unsigned int *)&v32, &v38, (uint64_t)v26);
          double v9 = sub_1DDB10E80();
          double v11 = v10;
          uint64_t v24 = sub_1DDAD8560((uint64_t)v26, 0);
          uint64_t v25 = v12;
          double v13 = *(double *)sub_1DDAD85FC((uint64_t)&v24, 0);
          v23[0] = sub_1DDAD8560((uint64_t)v26, 1u);
          v23[1] = v14;
          double v15 = *(double *)sub_1DDAD85FC((uint64_t)v23, 0);
          v22[0] = sub_1DDAD8560((uint64_t)v26, 2u);
          v22[1] = v16;
          double v17 = v13 + v15 + *(double *)sub_1DDAD85FC((uint64_t)v22, 0);
          if (v17 > 0.0)
          {
            uint64_t v24 = sub_1DDAD8560((uint64_t)v26, 0);
            uint64_t v25 = v18;
            double v19 = *(double *)sub_1DDAD85FC((uint64_t)&v24, 0);
            uint64_t v24 = sub_1DDAD8560((uint64_t)v26, 1u);
            uint64_t v25 = v20;
            double v9 = v19 / v17;
            double v11 = *(double *)sub_1DDAD85FC((uint64_t)&v24, 0) / v17;
          }
          if (vabdd_f64(v9, v40) + vabdd_f64(v11, v41) >= 0.0000001)
          {
            int v8 = 0;
            if (!v7)
            {
              double v11 = (v11 + v41) * 0.5;
              double v9 = (v9 + v40) * 0.5;
            }
          }
          else
          {
            int v8 = 4;
          }
          double v40 = v9;
          double v41 = v11;
          if (v27)
          {
            uint64_t v28 = v27;
            operator delete(v27);
          }
        }
        if (*((void *)&v32 + 1))
        {
          uint64_t v33 = *((void *)&v32 + 1);
          operator delete(*((void **)&v32 + 1));
        }
      }
      if (*((void *)&v34 + 1))
      {
        uint64_t v35 = *((void *)&v34 + 1);
        operator delete(*((void **)&v34 + 1));
      }
      if (*((void *)&v36 + 1))
      {
        uint64_t v37 = *((void *)&v36 + 1);
        operator delete(*((void **)&v36 + 1));
      }
      if (v8) {
        break;
      }
      int v6 = v7 - 1;
    }
    while (v7);
  }
  if (*((void *)&v38 + 1))
  {
    uint64_t v39 = *((void *)&v38 + 1);
    operator delete(*((void **)&v38 + 1));
  }
  return v40;
}

void sub_1DDB138A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a28) {
    operator delete(a28);
  }
  uint64_t v31 = *(void **)(v29 - 152);
  if (v31)
  {
    *(void *)(v29 - 144) = v31;
    operator delete(v31);
  }
  long long v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(void *)(v29 - 112) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB13B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB13FDC(_Unwind_Exception *a1)
{
}

void sub_1DDB13FE8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1DDA16678(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1DDB14004(uint64_t a1)
{
  double v2 = sub_1DDA83E7C();
  double v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)BOOL v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWGamutMap", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

uint64_t sub_1DDB1411C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 188) = a2;
  return result;
}

char *sub_1DDB14124(uint64_t a1, uint64_t a2)
{
  double result = (char *)(a1 + 192);
  if (result != (char *)a2) {
    return sub_1DDA49474(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  }
  return result;
}

uint64_t sub_1DDB14148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 216) = a2;
  return result;
}

void *sub_1DDB14150(uint64_t a1)
{
  *(void *)a1 = &unk_1F3977FB0;
  double v2 = *(void ***)(a1 + 344);
  if (v2) {
    j__free_3(*v2);
  }
  j__free_3(v2);
  double v3 = *(void ***)(a1 + 352);
  if (v3) {
    j__free_3(*v3);
  }
  j__free_3(v3);
  os_signpost_id_t v4 = *(void **)(a1 + 200);
  if (v4)
  {
    j__free_3(v4);
    *(void *)(a1 + 200) = 0;
  }
  for (uint64_t i = 272; i != 304; i += 8)
  {
    int v6 = *(void **)(a1 + i);
    if (v6)
    {
      j__free_3(v6);
      *(void *)(a1 + i) = 0;
    }
  }
  if (*(char *)(a1 + 4519) < 0) {
    operator delete(*(void **)(a1 + 4496));
  }
  if (*(char *)(a1 + 4495) < 0) {
    operator delete(*(void **)(a1 + 4472));
  }

  return sub_1DDA18384((void *)a1);
}

void sub_1DDB1423C(uint64_t a1)
{
  sub_1DDB14150(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB14274(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 4460);
  if ((int)v2 < *(_DWORD *)(a1 + 4456))
  {
    *(_DWORD *)(a1 + 4460) = v2 + 1;
    double v3 = (unsigned __int8 *)(a1 + v2 + 360);
    return *v3;
  }
  double v3 = (unsigned __int8 *)(a1 + 362);
  unint64_t v6 = 4096;
  sub_1DDA18500(&v7, &v6);
  unsigned int v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1 + 362, 4094);
  int v4 = sub_1DDB15C3C(&v8);
  *(_DWORD *)(a1 + 4456) = v4 + 2;
  *(_DWORD *)(a1 + 4460) = 2;
  if (v4 >= 1)
  {
    *(_DWORD *)(a1 + 4460) = 3;
    return *v3;
  }
  return 255;
}

void sub_1DDB14340(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, unsigned int *a7)
{
  int v7 = *(unsigned __int16 *)(*(void *)(a5 + 8 * a2) + 2 * a3);
  uint64_t v8 = 8 * a2 - 8;
  unsigned int v9 = *(unsigned __int16 *)(*(void *)(a4 + v8) + 2 * a3);
  unsigned int v10 = *(unsigned __int16 *)(*(void *)(a5 + v8) + 2 * a3);
  switch(a6)
  {
    case 1:
      break;
    case 2:
      unsigned int v9 = *(unsigned __int16 *)(*(void *)(a5 + 8 * a2) + 2 * a3);
      break;
    case 3:
      unsigned int v9 = v10;
      break;
    case 4:
      unsigned int v9 = v9 + v7 - v10;
      break;
    case 5:
      v9 += (int)(v7 - v10) >> 1;
      break;
    case 6:
      unsigned int v9 = v7 + ((int)(v9 - v10) >> 1);
      break;
    case 7:
      unsigned int v9 = (v9 + v7) >> 1;
      break;
    default:
      unsigned int v9 = 0;
      break;
  }
  *a7 = v9;
}

char *sub_1DDB143F4(uint64_t a1)
{
  if (*(__int16 *)(a1 + 208) >= 1)
  {
    uint64_t v2 = *(unsigned __int16 *)(a1 + 208);
    double v3 = (_WORD *)(*(void *)(a1 + 200) + 6);
    while (*(v3 - 1) == 1 && *v3 == 1)
    {
      v3 += 5;
      if (!--v2) {
        goto LABEL_6;
      }
    }
    goto LABEL_20;
  }
LABEL_6:
  uint64_t v4 = *(unsigned __int16 *)(a1 + 248);
  if (v4 == 1)
  {
    *(_WORD *)(a1 + 250) = 0;
  }
  else
  {
    if ((__int16)v4 > 4) {
      goto LABEL_20;
    }
    if ((__int16)v4 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        *(_WORD *)(a1 + 250 + 2 * v5) = v5;
        ++v5;
      }
      while (v4 != v5);
    }
  }
  unint64_t v6 = sub_1DDBF2084(8 * *(int *)(a1 + 188));
  *(void *)(a1 + 344) = v6;
  if (!v6) {
    goto LABEL_20;
  }
  void *v6 = 0;
  int v7 = sub_1DDBF2084(8 * *(int *)(a1 + 188));
  *(void *)(a1 + 352) = v7;
  if (!v7
    || (void *v7 = 0,
        uint64_t v8 = 2 * *(__int16 *)(a1 + 248),
        (unsigned int v9 = (char *)sub_1DDBF2084((int)v8 * (uint64_t)*(int *)(a1 + 188))) == 0)
    || (unsigned int v10 = v9,
        **(void **)(a1 + 344) = v9,
        (double result = (char *)sub_1DDBF2084((int)v8 * (uint64_t)*(int *)(a1 + 188))) == 0))
  {
LABEL_20:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  **(void **)(a1 + 352) = result;
  uint64_t v12 = *(int *)(a1 + 188);
  if (v12 >= 2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = v8;
    do
    {
      *(void *)(*(void *)(a1 + 344) + 8 * v13) = &v10[v14];
      *(void *)(*(void *)(a1 + 352) + 8 * v13++) = &result[v14];
      v14 += v8;
    }
    while (v12 != v13);
  }
  return result;
}

void sub_1DDB14608(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB14630(uint64_t a1, uint64_t a2)
{
  int v3 = 0;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  for (uint64_t i = 1; i != 17; ++i)
  {
    int v5 = *(unsigned __int8 *)(a2 + i);
    if (*(unsigned char *)(a2 + i))
    {
      if (v3 <= 257) {
        uint64_t v6 = 257;
      }
      else {
        uint64_t v6 = v3;
      }
      uint64_t v7 = v6 - v3;
      uint64_t v8 = &v42[v3];
      do
      {
        if (!v7)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](exception, "RawCameraException");
          goto LABEL_42;
        }
        *v8++ = i;
        --v7;
        ++v3;
        --v5;
      }
      while (v5);
    }
  }
  v42[v3] = 0;
  int v9 = v42[0];
  if (v42[0])
  {
    int v10 = 0;
    uint64_t v11 = 0;
    char v12 = v42[0];
    do
    {
      if (v9 == v12)
      {
        if ((int)v11 <= 257) {
          uint64_t v13 = 257;
        }
        else {
          uint64_t v13 = v11;
        }
        uint64_t v14 = v13 - (int)v11;
        double v15 = &v41[(int)v11];
        uint64_t v16 = v11 << 32;
        double v17 = &v42[(int)v11 + 1];
        do
        {
          if (!v14)
          {
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1E01C3B90](exception, "RawCameraException");
            goto LABEL_42;
          }
          *v15++ = v10++;
          int v18 = *v17++;
          --v14;
          v16 += 0x100000000;
          uint64_t v11 = (v11 + 1);
        }
        while (v9 == v18);
        char v12 = v42[v16 >> 32];
      }
      v10 *= 2;
      ++v9;
    }
    while (v12);
  }
  *(_OWORD *)(a2 + 1016) = 0u;
  *(_OWORD *)(a2 + 1032) = 0u;
  *(_OWORD *)(a2 + 984) = 0u;
  *(_OWORD *)(a2 + 1000) = 0u;
  *(_OWORD *)(a2 + 952) = 0u;
  *(_OWORD *)(a2 + 968) = 0u;
  *(_OWORD *)(a2 + 920) = 0u;
  *(_OWORD *)(a2 + 936) = 0u;
  *(_OWORD *)(a2 + 888) = 0u;
  *(_OWORD *)(a2 + 904) = 0u;
  *(_OWORD *)(a2 + 856) = 0u;
  *(_OWORD *)(a2 + 872) = 0u;
  *(_OWORD *)(a2 + 824) = 0u;
  *(_OWORD *)(a2 + 840) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_OWORD *)(a2 + 808) = 0u;
  if (v3 >= 1)
  {
    double v19 = (unsigned __int8 *)(a2 + 17);
    uint64_t v20 = v42;
    uint64_t v21 = v41;
    uint64_t v22 = v3;
    do
    {
      __int16 v24 = *v21++;
      __int16 v23 = v24;
      LOBYTE(v24) = *v20++;
      char v25 = v24;
      *(_WORD *)(a2 + 2 * *v19 + 280) = v23;
      unsigned int v26 = *v19++;
      *(unsigned char *)(a2 + v26 + 792) = v25;
      --v22;
    }
    while (v22);
  }
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v29 = a2 + 1158;
  long long v30 = (_WORD *)(a2 + 1050);
  do
  {
    int v31 = *(unsigned __int8 *)(v29 + v27 - 1157);
    if (*(unsigned char *)(v29 + v27 - 1157))
    {
      v30[54] = v28;
      _WORD *v30 = v41[v28];
      v28 += v31;
      int v32 = (unsigned __int16)v41[v28 - 1];
    }
    else
    {
      int v32 = -1;
    }
    *(_DWORD *)(v29 + 4 * v27++ - 70) = v32;
    ++v30;
  }
  while (v27 != 16);
  *(_DWORD *)(a2 + 1152) = 0xFFFFF;
  bzero((void *)(a2 + 1192), 0x400uLL);
  if (v3 >= 1)
  {
    for (uint64_t j = 0; j != v3; ++j)
    {
      int v34 = (char)v42[j];
      if (v34 <= 8)
      {
        int v35 = (unsigned __int16)v41[j] << (8 - v34);
        int v36 = v35;
        if (v34 != 8) {
          int v36 = dword_1DDBFDF10[v34 + 24] | v35;
        }
        if (v36 > 255)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](exception, "RawCameraException");
LABEL_42:
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (v35 <= v36)
        {
          int v37 = *(unsigned __int8 *)(a2 + j + 17);
          long long v38 = (int *)(a2 + 1192 + 4 * v35);
          int v39 = v36 - v35 + 1;
          do
          {
            *long long v38 = v34;
            v38[256] = v37;
            ++v38;
            --v39;
          }
          while (v39);
        }
      }
    }
  }
}

void sub_1DDB1494C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB14968(uint64_t a1)
{
  int v2 = sub_1DDB14274(a1);
  uint64_t result = sub_1DDB14274(a1);
  int v4 = result | (v2 << 8);
  int v5 = v4 - 2;
  if (v4 != 2)
  {
    do
    {
      --v5;
      uint64_t result = sub_1DDB14274(a1);
    }
    while (v5);
  }
  return result;
}

double sub_1DDB149B4(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v2 = sub_1DDB14274(a1);
  int v3 = sub_1DDB14274(a1) | (v2 << 8);
  int v5 = v3 - 2;
  if (v3 != 2)
  {
    uint64_t v6 = 0;
    do
    {
      unsigned int v7 = sub_1DDB14274(a1);
      LODWORD(v8) = 0;
      LOBYTE(v39) = 0;
      for (uint64_t i = 1; i != 17; ++i)
      {
        int v10 = sub_1DDB14274(a1);
        *((unsigned char *)&v39 + i) = v10;
        uint64_t v8 = (v8 + v10);
      }
      if (v8 > 0x100) {
        break;
      }
      if (v8)
      {
        uint64_t v11 = v24;
        uint64_t v12 = v8;
        do
        {
          *v11++ = sub_1DDB14274(a1);
          --v12;
        }
        while (v12);
      }
      if ((v7 & 0x10) == 0) {
        uint64_t v6 = (void **)(a1 + 8 * v7 + 272);
      }
      if (v7 > 3) {
        break;
      }
      uint64_t v13 = *v6;
      if (!*v6)
      {
        uint64_t v13 = sub_1DDBF2084(0xCA8uLL);
        void *v6 = v13;
        if (!v13) {
          break;
        }
      }
      *((unsigned char *)v13 + 16) = v40;
      _OWORD *v13 = v39;
      uint64_t v14 = (char *)*v6;
      long long v15 = v36;
      *(_OWORD *)(v14 + 209) = v35;
      *(_OWORD *)(v14 + 225) = v15;
      long long v16 = v38;
      *(_OWORD *)(v14 + 241) = v37;
      long long v17 = v32;
      *(_OWORD *)(v14 + 145) = v31;
      *(_OWORD *)(v14 + 161) = v17;
      long long v18 = v34;
      *(_OWORD *)(v14 + 177) = v33;
      *(_OWORD *)(v14 + 193) = v18;
      long long v19 = v28;
      *(_OWORD *)(v14 + 81) = v27;
      *(_OWORD *)(v14 + 97) = v19;
      long long v20 = v30;
      *(_OWORD *)(v14 + 113) = v29;
      *(_OWORD *)(v14 + 129) = v20;
      long long v21 = v24[1];
      *(_OWORD *)(v14 + 17) = v24[0];
      *(_OWORD *)(v14 + 33) = v21;
      double result = *(double *)&v25;
      long long v22 = v26;
      *(_OWORD *)(v14 + 49) = v25;
      *(_OWORD *)(v14 + 65) = v22;
      int v23 = v5 - v8;
      *(_OWORD *)(v14 + 257) = v16;
      int v5 = v5 - v8 - 17;
    }
    while (v23 != 17);
  }
  return result;
}

uint64_t sub_1DDB14B7C(uint64_t a1)
{
  int v2 = sub_1DDB14274(a1);
  uint64_t result = sub_1DDB14274(a1);
  if ((result | (v2 << 8)) == 4)
  {
    int v4 = sub_1DDB14274(a1);
    uint64_t result = sub_1DDB14274(a1);
    *(_DWORD *)(a1 + 312) = result | (v4 << 8);
  }
  return result;
}

uint64_t sub_1DDB14BD4(uint64_t a1)
{
  int v2 = sub_1DDB14274(a1);
  uint64_t result = sub_1DDB14274(a1);
  if ((int)((result & 0xFFFF00FF | (v2 << 8)) - 2) >= 1)
  {
    unsigned int v4 = (v2 << 8) + result - 1;
    do
    {
      uint64_t result = sub_1DDB14274(a1);
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

uint64_t sub_1DDB14C38(uint64_t a1)
{
  int v2 = sub_1DDB14274(a1);
  int v3 = sub_1DDB14274(a1);
  *(_DWORD *)(a1 + 196) = sub_1DDB14274(a1);
  int v4 = sub_1DDB14274(a1);
  *(_DWORD *)(a1 + 192) = sub_1DDB14274(a1) | (v4 << 8);
  int v5 = sub_1DDB14274(a1);
  *(_DWORD *)(a1 + 188) = sub_1DDB14274(a1) | (v5 << 8);
  unsigned int v6 = sub_1DDB14274(a1);
  *(_WORD *)(a1 + 208) = v6;
  if (*(int *)(a1 + 192) < 1
    || *(int *)(a1 + 188) < 1
    || !v6
    || (*(_DWORD *)(a1 + 196) - 17) <= 0xFFFFFFF0
    || (v3 | (v2 << 8)) != 3 * v6 + 8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t result = (uint64_t)sub_1DDBF2024(v6, 0xAuLL);
  *(void *)(a1 + 200) = result;
  if (*(__int16 *)(a1 + 208) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      int v10 = (_WORD *)(*(void *)(a1 + 200) + v8);
      v10[1] = v9;
      *int v10 = sub_1DDB14274(a1);
      unsigned int v11 = sub_1DDB14274(a1);
      void v10[2] = v11 >> 4;
      uint64_t v10[3] = v11 & 0xF;
      uint64_t result = sub_1DDB14274(a1);
      ++v9;
      v8 += 10;
    }
    while (v9 < *(__int16 *)(a1 + 208));
  }
  return result;
}

void sub_1DDB14DE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB14E00(uint64_t a1)
{
  int v2 = sub_1DDB14274(a1);
  int v3 = sub_1DDB14274(a1);
  uint64_t result = sub_1DDB14274(a1);
  *(_WORD *)(a1 + 248) = result;
  if ((result - 5) >= 0xFFFFFFFC && (v3 | (v2 << 8)) == 2 * result + 6)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    uint64_t v7 = result;
    while (1)
    {
      int v8 = sub_1DDB14274(a1);
      uint64_t result = sub_1DDB14274(a1);
      if (!v5 && v8 != **(__int16 **)(a1 + 200)) {
        int v6 = v8;
      }
      if (*(__int16 *)(a1 + 208) < 1) {
        break;
      }
      uint64_t v9 = *(unsigned __int16 *)(a1 + 208);
      for (uint64_t i = *(__int16 **)(a1 + 200); v8 - v6 != *i; i += 5)
      {
        if (!--v9) {
          return result;
        }
      }
      *(void *)(a1 + 8 * v5 + 216) = i;
      i[4] = result >> 4;
      if (++v5 == v7)
      {
        *(_DWORD *)(a1 + 304) = sub_1DDB14274(a1);
        sub_1DDB14274(a1);
        uint64_t result = sub_1DDB14274(a1);
        *(_DWORD *)(a1 + 308) = result & 0xF;
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1DDB14F18(uint64_t a1)
{
  do
  {
    while (sub_1DDB14274(a1) != 255)
      ;
    do
      uint64_t result = sub_1DDB14274(a1);
    while (result == 255);
  }
  while (!result);
  return result;
}

uint64_t sub_1DDB14F5C(uint64_t a1)
{
  while (1)
  {
    uint64_t result = sub_1DDB14F18(a1);
    switch((char)result)
    {
      case -64:
      case -63:
      case -62:
      case -61:
      case -59:
      case -58:
      case -57:
      case -56:
      case -55:
      case -54:
      case -53:
      case -51:
      case -50:
      case -49:
      case -40:
      case -39:
      case -38:
        return result;
      case -60:
        sub_1DDB149B4(a1);
        continue;
      case -52:
      case -36:
      case -34:
      case -33:
        goto LABEL_4;
      case -48:
      case -47:
      case -46:
      case -45:
      case -44:
      case -43:
      case -42:
      case -41:
      case -37:
        continue;
      case -35:
        sub_1DDB14B7C(a1);
        continue;
      case -32:
        sub_1DDB14BD4(a1);
        continue;
      default:
        if (result != 1) {
LABEL_4:
        }
          sub_1DDB14968(a1);
        break;
    }
  }
}

uint64_t sub_1DDB15070(uint64_t a1)
{
  int v2 = sub_1DDB14274(a1);
  int v3 = sub_1DDB14274(a1);
  if (v2 != 255 || v3 != 216 || (*(_DWORD *)(a1 + 312) = 0, int v4 = sub_1DDB14F5C(a1), v4 != 195) && (v4 & 0xFE) != 0xC0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return sub_1DDB14C38(a1);
}

void sub_1DDB15138(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB15150(uint64_t a1)
{
  if (sub_1DDB14F5C(a1) != 218)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return sub_1DDB14E00(a1);
}

void sub_1DDB151C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB151DC(uint64_t result, int a2)
{
  if (*(int *)(result + 336) <= 56)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t result = sub_1DDB14274(v3);
      unsigned int v4 = result;
      if (result == 255 && (uint64_t result = sub_1DDB14274(v3), result))
      {
        uint64_t v7 = *(int *)(v3 + 4460) - 1;
        *(_DWORD *)(v3 + 4460) = v7;
        uint64_t v8 = v3 + 360;
        *(unsigned char *)(v8 + v7) = result;
        uint64_t v9 = *(int *)(v3 + 4460) - 1;
        *(_DWORD *)(v3 + 4460) = v9;
        *(unsigned char *)(v8 + v9) = -1;
        int v6 = *(_DWORD *)(v3 + 336);
        if (v6 >= a2) {
          return result;
        }
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = v4;
        int v6 = *(_DWORD *)(v3 + 336);
      }
      *(void *)(v3 + 328) = v5 | (*(void *)(v3 + 328) << 8);
      *(_DWORD *)(v3 + 336) = v6 + 8;
    }
    while (v6 < 49);
  }
  return result;
}

void sub_1DDB15294(uint64_t a1)
{
  *(_DWORD *)(a1 + 336) = 0;
  if (*(unsigned __int16 *)(a1 + 248) > 4u) {
    goto LABEL_9;
  }
  if (*(_WORD *)(a1 + 248))
  {
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v3 = *(void *)(a1 + 216 + 8 * v2);
      if (!v3) {
        break;
      }
      unint64_t v4 = *(unsigned __int16 *)(v3 + 8);
      if (v4 >= 4) {
        break;
      }
      uint64_t v5 = *(void *)(a1 + 8 * v4 + 272);
      if (!v5) {
        break;
      }
      sub_1DDB14630(a1, v5);
      if (++v2 >= *(__int16 *)(a1 + 248)) {
        goto LABEL_8;
      }
    }
LABEL_9:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_8:
  int v6 = *(_DWORD *)(a1 + 312) / *(_DWORD *)(a1 + 188);
  *(_DWORD *)(a1 + 316) = v6;
  *(_DWORD *)(a1 + 320) = v6;
  *(_WORD *)(a1 + 324) = 0;
}

void sub_1DDB153B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB153D0(uint64_t a1)
{
  *(_DWORD *)(a1 + 336) = 0;
  do
  {
    while (sub_1DDB14274(a1) != 255)
      ;
    do
      uint64_t result = sub_1DDB14274(a1);
    while (result == 255);
  }
  while (!result);
  int v3 = *(__int16 *)(a1 + 324);
  if (v3 + 208 == result)
  {
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a1 + 316);
    *(_WORD *)(a1 + 324) = ((_BYTE)v3 + 1) & 7;
  }
  return result;
}

uint64_t sub_1DDB15440(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v12 = 0;
  uint64_t v4 = *(unsigned __int16 *)(result + 248);
  uint64_t v5 = *(unsigned int *)(result + 188);
  if (*(__int16 *)(result + 248) >= 1)
  {
    uint64_t v6 = 0;
    int v7 = 1 << (*(_DWORD *)(result + 196) + ~*(unsigned char *)(result + 308));
    do
    {
      uint64_t result = sub_1DDB1562C(v3, *(void *)(v3+ 8 * *(__int16 *)(*(void *)(v3 + 8 * *(__int16 *)(v3 + v6 + 250) + 216) + 8)+ 272), (_DWORD *)&v12 + 1);
      if (HIDWORD(v12))
      {
        uint64_t result = sub_1DDB1573C(v3, SHIDWORD(v12), &v12);
        LOWORD(v8) = v12;
        if ((int)v12 < 1 << (BYTE4(v12) - 1))
        {
          int v8 = v12 + (-1 << SBYTE4(v12)) + 1;
          LODWORD(v12) = v8;
        }
      }
      else
      {
        LOWORD(v8) = 0;
        LODWORD(v12) = 0;
      }
      *(_WORD *)(*a2 + v6) = v8 + v7;
      v6 += 2;
    }
    while (2 * v4 != v6);
  }
  if ((int)v5 > 1)
  {
    for (uint64_t i = 1; i != v5; ++i)
    {
      if ((__int16)v4 >= 1)
      {
        uint64_t v10 = 0;
        do
        {
          uint64_t result = sub_1DDB1562C(v3, *(void *)(v3+ 8 * *(__int16 *)(*(void *)(v3 + 8 * *(__int16 *)(v3 + v10 + 250) + 216) + 8)+ 272), (_DWORD *)&v12 + 1);
          if (HIDWORD(v12))
          {
            uint64_t result = sub_1DDB1573C(v3, SHIDWORD(v12), &v12);
            LOWORD(v11) = v12;
            if ((int)v12 < 1 << (BYTE4(v12) - 1))
            {
              int v11 = v12 + (-1 << SBYTE4(v12)) + 1;
              LODWORD(v12) = v11;
            }
          }
          else
          {
            LOWORD(v11) = 0;
            LODWORD(v12) = 0;
          }
          *(_WORD *)(a2[i] + v10) = *(_WORD *)(a2[i - 1] + v10) + v11;
          v10 += 2;
        }
        while (2 * v4 != v10);
      }
    }
  }
  if (*(_DWORD *)(v3 + 316)) {
    --*(_DWORD *)(v3 + 320);
  }
  return result;
}

uint64_t sub_1DDB1562C(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 336);
  if (v6 <= 7)
  {
    uint64_t result = sub_1DDB151DC(result, 8);
    int v6 = *(_DWORD *)(v5 + 336);
  }
  uint64_t v7 = *(void *)(v5 + 328);
  int v8 = v6 - 8;
  int v9 = *(_DWORD *)(a2 + 4 * (v7 >> (v6 - 8)) + 1192);
  if (!v9)
  {
    int v11 = (v7 >> (v6 - 8));
    *(_DWORD *)(v5 + 336) = v8;
    if (v11 <= *(_DWORD *)(a2 + 1116))
    {
      uint64_t v14 = 8;
    }
    else
    {
      uint64_t v12 = 280;
      do
      {
        if (!v8)
        {
          uint64_t result = sub_1DDB151DC(v5, 1);
          int v8 = *(_DWORD *)(v5 + 336);
          uint64_t v7 = *(void *)(v5 + 328);
        }
        *(_DWORD *)(v5 + 336) = --v8;
        int v11 = ((unint64_t)v7 >> v8) & 1 | (2 * v11);
        int v13 = *(_DWORD *)(a2 + 4 * v12++);
      }
      while (v11 > v13);
      uint64_t v14 = v12 - 272;
      if ((v12 - 272) > 0x10)
      {
        int v10 = 0;
        goto LABEL_14;
      }
    }
    int v10 = *(unsigned __int8 *)(a2
                             + v11
                             + *(__int16 *)(a2 + 2 * v14 + 1156)
                             - *(unsigned __int16 *)(a2 + 2 * v14 + 1048)
                             + 17);
    goto LABEL_14;
  }
  *(_DWORD *)(v5 + 336) = v6 - v9;
  int v10 = *(_DWORD *)(a2 + 4 * (v7 >> (v6 - 8)) + 2216);
LABEL_14:
  *a3 = v10;
  return result;
}

uint64_t sub_1DDB1573C(uint64_t result, int a2, _DWORD *a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 336);
  if (v6 < a2)
  {
    uint64_t result = sub_1DDB151DC(result, a2);
    int v6 = *(_DWORD *)(v5 + 336);
  }
  uint64_t v7 = *(void *)(v5 + 328);
  int v8 = v6 - a2;
  *(_DWORD *)(v5 + 336) = v8;
  *a3 = dword_1DDBFDECC[a2] & (v7 >> v8);
  return result;
}

void sub_1DDB157AC(uint64_t a1)
{
  int v35 = *(_DWORD *)(a1 + 192);
  int v38 = *(__int16 *)(a1 + 248);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 4519);
  int v3 = *(_DWORD *)(a1 + 308);
  int v4 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 4504);
  }
  if (v2 == 8)
  {
    if (v4 >= 0) {
      uint64_t v5 = (void *)(a1 + 4496);
    }
    else {
      uint64_t v5 = *(void **)(a1 + 4496);
    }
    BOOL v6 = *v5 == 0x325320616369654CLL;
  }
  else
  {
    BOOL v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 188);
  int v8 = *(_DWORD *)(a1 + 304);
  int v10 = *(void **)(a1 + 344);
  int v9 = *(void **)(a1 + 352);
  int v43 = 0;
  int v44 = 0;
  if (v6 && v3 == 12) {
    char v11 = 0;
  }
  else {
    char v11 = v3;
  }
  int v41 = v38;
  int v12 = *(_DWORD *)(a1 + 44);
  int v39 = *(_DWORD *)(a1 + 48);
  int v40 = v35;
  if ((unsigned __int16)(v38 - 1) >= 4u)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    goto LABEL_56;
  }
  int v45 = v7;
  int v45 = *sub_1DDAA4FA8(&v45, &v40);
  int v13 = *sub_1DDAA4FA8(&v45, &v41);
  int v45 = v12;
  if (v13 != *sub_1DDAA4FA8(&v45, &v39))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
LABEL_56:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v42 = 0;
  sub_1DDB15440(a1, v10);
  if ((int)v7 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(a1 + 4464);
    do
    {
      uint64_t v16 = 0;
      do
      {
        *(_WORD *)(v15 + v16) = *(unsigned __int16 *)(v10[v14] + v16) << v11;
        *(void *)(a1 + 4464) = v15 + v16 + 2;
        v16 += 2;
      }
      while (2 * v38 != v16);
      ++v14;
      v15 += v16;
    }
    while (v14 != v7);
  }
  if (v35 > 1)
  {
    uint64_t v17 = 2 * v38;
    uint64_t v18 = 2 * (unsigned __int16)v38;
    int v19 = 1;
    uint64_t v37 = v7;
    do
    {
      long long v20 = v9;
      int v9 = v10;
      int v36 = v19;
      if (*(_DWORD *)(a1 + 316))
      {
        int v21 = *(_DWORD *)(a1 + 320);
        if (!v21)
        {
          sub_1DDB153D0(a1);
          sub_1DDB15440(a1, v20);
          if ((int)v7 >= 1)
          {
            uint64_t v31 = 0;
            uint64_t v32 = *(void *)(a1 + 4464);
            do
            {
              uint64_t v33 = 0;
              do
              {
                *(_WORD *)(v32 + v33) = *(unsigned __int16 *)(v20[v31] + v33) << v11;
                *(void *)(a1 + 4464) = v32 + v33 + 2;
                v33 += 2;
              }
              while (v17 != v33);
              ++v31;
              v32 += v33;
            }
            while (v31 != v7);
          }
          goto LABEL_52;
        }
        *(_DWORD *)(a1 + 320) = v21 - 1;
      }
      if (v38 >= 1)
      {
        uint64_t v22 = 0;
        do
        {
          sub_1DDB1562C(a1, *(void *)(a1 + 8 * *(__int16 *)(*(void *)(a1 + 8 * *(__int16 *)(a1 + v22 + 250) + 216) + 8) + 272), &v44);
          if (v44)
          {
            sub_1DDB1573C(a1, v44, &v43);
            LOWORD(v23) = v43;
            if (v43 < 1 << (v44 - 1))
            {
              int v23 = v43 + (-1 << v44) + 1;
              int v43 = v23;
            }
          }
          else
          {
            LOWORD(v23) = 0;
            int v43 = 0;
          }
          *(_WORD *)(*v20 + v22) = *(_WORD *)(*v9 + v22) + v23;
          v22 += 2;
        }
        while (v18 != v22);
      }
      if ((int)v7 > 1)
      {
        uint64_t v24 = 1;
        do
        {
          if (v38 >= 1)
          {
            uint64_t v25 = 0;
            do
            {
              uint64_t v26 = sub_1DDB1562C(a1, *(void *)(a1+ 8* *(__int16 *)(*(void *)(a1 + 8 * *(__int16 *)(a1 + 2 * v25 + 250) + 216) + 8)+ 272), &v44);
              if (v44)
              {
                uint64_t v26 = sub_1DDB1573C(a1, v44, &v43);
                LOWORD(v27) = v43;
                if (v43 < 1 << (v44 - 1))
                {
                  int v27 = v43 + (-1 << v44) + 1;
                  int v43 = v27;
                }
              }
              else
              {
                LOWORD(v27) = 0;
                int v43 = 0;
              }
              sub_1DDB14340(v26, v24, v25, (uint64_t)v20, (uint64_t)v9, v8, &v42);
              *(_WORD *)(v20[v24] + 2 * v25++) = v42 + v27;
            }
            while ((unsigned __int16)v38 != v25);
          }
          ++v24;
          uint64_t v7 = v37;
        }
        while (v24 != v37);
      }
      uint64_t v18 = 2 * (unsigned __int16)v38;
      if ((int)v7 >= 1)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 4464);
        do
        {
          uint64_t v30 = 0;
          do
          {
            *(_WORD *)(v29 + v30) = *(unsigned __int16 *)(v20[v28] + v30) << v11;
            *(void *)(a1 + 4464) = v29 + v30 + 2;
            v30 += 2;
          }
          while (v17 != v30);
          ++v28;
          v29 += v30;
        }
        while (v28 != v7);
      }
LABEL_52:
      int v19 = v36 + 1;
      int v10 = v20;
    }
    while (v36 + 1 != v35);
  }
}

void sub_1DDB15C24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB15C3C(unsigned int *a1)
{
  uint64_t result = *a1;
  if ((result & 0x80000000) != 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1DDB15C98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB15CAC(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CLjpgUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = sub_1DDB15DF8;
  double v5[3] = &unk_1E6D04A58;
  v5[4] = a1;
  int v4 = (void (**)(void))MEMORY[0x1E01C46E0](v5);
  *(void *)(a1 + 4464) = sub_1DDAA5B9C(a1);
  sub_1DDB15070(a1);
  sub_1DDB15150(a1);
  sub_1DDB143F4(a1);
  sub_1DDB15294(a1);
  sub_1DDB157AC(a1);
  v4[2](v4);
}

void sub_1DDB15DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB15DF8(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  int v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CLjpgUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB15E80(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = a1;
  sub_1DDB164C0(&v3, a2);
}

void sub_1DDB15EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB15EDC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15EF0(a1, (const char *)*MEMORY[0x1E4F2FEB8], a2, a4, a5);
}

uint64_t sub_1DDB15EF0(uint64_t a1, const char *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v5 = *a3;
  BOOL v6 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 8), a2, (uint64_t)a2, a4, a5);
  objc_opt_class();
  uint64_t v11 = v5 != 0;
  if (objc_opt_isKindOfClass()) {
    uint64_t v11 = objc_msgSend_BOOLValue(v6, v7, v8, v9, v10);
  }

  return v11;
}

void sub_1DDB15F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB15F6C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15EF0(a1, (const char *)*MEMORY[0x1E4F2FEF0], a2, a4, a5);
}

double sub_1DDB15F80(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)*MEMORY[0x1E4F2FEF8], a2, a4, a5);
}

double sub_1DDB15F94(uint64_t a1, const char *a2, double *a3, uint64_t a4, uint64_t a5)
{
  double v5 = *a3;
  BOOL v6 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 8), a2, (uint64_t)a2, a4, a5);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend_doubleValue(v6, v7, v8, v9, v10);
    double v5 = v11;
  }

  return v5;
}

void sub_1DDB16000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1DDB16010(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)*MEMORY[0x1E4F2FEE8], a2, a4, a5);
}

double sub_1DDB16024(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)*MEMORY[0x1E4F2FEE0], a2, a4, a5);
}

uint64_t sub_1DDB16038(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15EF0(a1, (const char *)*MEMORY[0x1E4F2FE08], a2, a4, a5);
}

double sub_1DDB1604C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)*MEMORY[0x1E4F2FE20], a2, a4, a5);
}

double sub_1DDB16060(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)*MEMORY[0x1E4F2FE10], a2, a4, a5);
}

double sub_1DDB16074(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)*MEMORY[0x1E4F2FE18], a2, a4, a5);
}

double sub_1DDB16088(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)*MEMORY[0x1E4F2FE00], a2, a4, a5);
}

void sub_1DDB1609C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, char **a5@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 8), (const char *)a2, (uint64_t)off_1EAB8AEC8, a3, a4);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t)objc_msgSend_count(v7, v8, v9, v10, v11) <= 4)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v12 = v7;
    uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v36, (uint64_t)v40, 16);
    if (v18)
    {
      uint64_t v19 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          if (*(void *)v37 != v19) {
            objc_enumerationMutation(v12);
          }
          objc_msgSend_doubleValue(*(void **)(*((void *)&v36 + 1) + 8 * i), (const char *)v14, v15, v16, v17, (void)v36);
          uint64_t v22 = v21;
          uint64_t v24 = a5[1];
          unint64_t v23 = (unint64_t)a5[2];
          if ((unint64_t)v24 >= v23)
          {
            uint64_t v26 = *a5;
            uint64_t v27 = (v24 - *a5) >> 3;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61) {
              sub_1DDA17F78();
            }
            uint64_t v29 = v23 - (void)v26;
            if (v29 >> 2 > v28) {
              unint64_t v28 = v29 >> 2;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v28;
            }
            if (v14)
            {
              uint64_t v30 = (char *)sub_1DDA1814C((uint64_t)(a5 + 2), v14);
              uint64_t v26 = *a5;
              uint64_t v24 = a5[1];
            }
            else
            {
              uint64_t v30 = 0;
            }
            uint64_t v31 = &v30[8 * v27];
            *(void *)uint64_t v31 = v22;
            uint64_t v25 = v31 + 8;
            while (v24 != v26)
            {
              uint64_t v32 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v31 - 1) = v32;
              v31 -= 8;
            }
            *a5 = v31;
            a5[1] = v25;
            a5[2] = &v30[8 * v14];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(void *)uint64_t v24 = v21;
            uint64_t v25 = v24 + 8;
          }
          a5[1] = v25;
        }
        uint64_t v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, (const char *)v14, (uint64_t)&v36, (uint64_t)v40, 16);
      }
      while (v18);
    }
  }
  else
  {

    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    uint64_t v33 = *(const void **)a2;
    uint64_t v34 = *(void *)(a2 + 8);
    unint64_t v35 = (v34 - *(void *)a2) >> 3;
    sub_1DDA1808C(a5, v33, v34, v35);
  }
}

void sub_1DDB16314(_Unwind_Exception *a1)
{
  double v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

double sub_1DDB16358(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)off_1EAB8AED0, a2, a4, a5);
}

uint64_t sub_1DDB16368(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15EF0(a1, (const char *)off_1EAB8AED8, a2, a4, a5);
}

double sub_1DDB16378(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)off_1EAB8AEE0, a2, a4, a5);
}

double sub_1DDB16388(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)off_1EAB8AEE8, a2, a4, a5);
}

double sub_1DDB16398(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)off_1EAB8AEF0, a2, a4, a5);
}

double sub_1DDB163A8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)off_1EAB8AEF8, a2, a4, a5);
}

uint64_t sub_1DDB163B8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15EF0(a1, (const char *)off_1EAB8AF00, a2, a4, a5);
}

double sub_1DDB163C8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)off_1EAB8AF08, a2, a4, a5);
}

double sub_1DDB163D8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)off_1EAB8AF10, a2, a4, a5);
}

double sub_1DDB163E8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)off_1EAB8AF18, a2, a4, a5);
}

double sub_1DDB163F8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15F94(a1, (const char *)off_1EAB8AF20, a2, a4, a5);
}

uint64_t sub_1DDB16408(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15EF0(a1, (const char *)off_1EAB8AF28, a2, a4, a5);
}

uint64_t sub_1DDB16418(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15EF0(a1, (const char *)off_1EAB8AF30, a2, a4, a5);
}

uint64_t sub_1DDB16428(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15EF0(a1, (const char *)off_1EAB8AF38, a2, a4, a5);
}

uint64_t sub_1DDB16438(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1DDB15EF0(a1, (const char *)off_1EAB8AF40, a2, a4, a5);
}

uint64_t sub_1DDB16448(uint64_t a1)
{
  return a1;
}

void sub_1DDB16474(uint64_t a1)
{
  JUMPOUT(0x1E01C3DC0);
}

id sub_1DDB164C0@<X0>(id *a1@<X1>, void *a2@<X8>)
{
  os_signpost_id_t v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1F39780D0;
  id result = *a1;
  double v4[3] = &unk_1F39780A0;
  v4[4] = result;
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DDB16544(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39780D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB16564(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39780D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB165B8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1DDB165E0(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (a2 >= 2)
  {
    for (uint64_t i = 1; i != a2; ++i)
    {
      if (a3)
      {
        for (uint64_t j = 0; j != a3; ++j)
          *(unsigned char *)(result + a3 + j) += *(unsigned char *)(result + j);
      }
      result += a3;
    }
  }
  return result;
}

uint64_t sub_1DDB16628(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1DDB165E0(a1, a5 * a3, a4);
  uint64_t v11 = a4 * a3;
  if (a4 * a3)
  {
    uint64_t v12 = 0;
    int v13 = (unsigned char *)(a1 + v11 * (a5 - 1));
    do
    {
      unint64_t v14 = v13;
      uint64_t v15 = a2;
      for (uint64_t i = a5; i; --i)
      {
        *v15++ = *v14;
        v14 -= a4 * a3;
      }
      ++v12;
      a2 += a5;
      ++v13;
    }
    while (v12 != v11);
  }
  return result;
}

unsigned char *sub_1DDB166C4(unsigned char *result, unint64_t a2, uint64_t a3)
{
  if (a2 >= 3)
  {
    for (uint64_t i = 2; i != a2; ++i)
    {
      os_signpost_id_t v4 = result;
      for (uint64_t j = a3; j; --j)
      {
        v4[2 * a3] += *v4;
        ++v4;
      }
      result += a3;
    }
  }
  return result;
}

unsigned char *sub_1DDB16710(unsigned char *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1DDB166C4(a1, a5 * a3, a4);
  uint64_t v11 = a4 * a3;
  if (a4 * a3)
  {
    uint64_t v12 = 0;
    int v13 = &a1[v11 * (a5 - 1)];
    do
    {
      unint64_t v14 = v13;
      uint64_t v15 = a2;
      for (uint64_t i = a5; i; --i)
      {
        *v15++ = *v14;
        v14 -= a4 * a3;
      }
      ++v12;
      a2 += a5;
      ++v13;
    }
    while (v12 != v11);
  }
  return result;
}

void *sub_1DDB167AC(uint64_t a1, int a2, unsigned int a3)
{
  int v9 = a2;
  double v5 = malloc_type_malloc(a3 + 64, 0x224DEE7AuLL);
  uint64_t v6 = *(void *)(a1 + 24);
  sub_1DDA18410(&v8, &v9);
  (*(void (**)(uint64_t, int *, void))(*(void *)v6 + 40))(v6, &v8, 0);
  (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5, a3);
  return v5;
}

void sub_1DDB1686C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    free(v1);
  }
  __cxa_end_catch();
  JUMPOUT(0x1DDB16854);
}

void sub_1DDB16894(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, Bytef *a8, uInt a9, unsigned int a10, char a11)
{
  memset(&strm.zalloc, 0, 24);
  unsigned int v17 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 56))(a1);
  uint64_t v18 = v17;
  unint64_t v54 = (int)a1[73];
  size_t v19 = ((int)a7 * (uint64_t)(int)v17 * v54) >> 3;
  strm.avail_iuint64_t n = a9;
  strm.next_iuint64_t n = a8;
  strm.avail_out = v19 * HIDWORD(a7);
  uint64_t v50 = (Bytef *)malloc_type_malloc(v19 * (a7 >> 32), 0xF5524896uLL);
  strm.next_out = v50;
  if (inflateInit_(&strm, "1.2.12", 112) || inflate(&strm, 0) != 1 || inflateEnd(&strm))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    goto LABEL_40;
  }
  size_t size = v19;
  long long v52 = malloc_type_malloc(v19, 0x7F09DEC8uLL);
  v64.origin.CGFloat x = (double)(int)a3;
  v64.origin.CGFloat y = (double)SHIDWORD(a3);
  v64.size.CGFloat width = (double)(int)a4;
  v64.size.CGFloat height = (double)SHIDWORD(a4);
  v65.origin.CGFloat x = (double)(int)a6;
  v65.origin.CGFloat y = (double)SHIDWORD(a6);
  v65.size.CGFloat width = (double)(int)a7;
  v65.size.CGFloat height = (double)SHIDWORD(a7);
  CGRect v58 = CGRectIntersection(v64, v65);
  sub_1DDA35814(&v59, &v58.origin.x);
  sub_1DDA35814(&v61, &v58.size.width);
  uint64_t v20 = v60;
  if (v60 < (v62 + v60))
  {
    int v21 = a6;
    uint64_t v49 = a6 >> 32;
    uint64_t v22 = v54 >> 3;
    uint64_t v23 = (v54 >> 3) * v18;
    uint64_t v24 = &v50[v19 * (v60 - (a6 >> 32))];
    uint64_t v25 = 2 * a10;
    uint64_t v44 = -(uint64_t)(int)a3;
    uint64_t v45 = (uint64_t)&v52[-6 * v21 + 4];
    uint64_t v47 = v23;
    uint64_t v48 = a5;
    uint64_t v57 = (v60 - (a3 >> 32)) * a5;
    uint64_t v43 = -(uint64_t)v21;
    uint64_t v26 = 2 * v18;
    do
    {
      uint64_t v27 = &v50[(v20 - v49) * v19];
      int v28 = a1[72];
      uint64_t v55 = v20;
      switch(v28)
      {
        case 34894:
          sub_1DDB16710(v27, v52, a1[56], v18, v22);
          break;
        case 3:
          sub_1DDB16628((uint64_t)v27, v52, a1[56], v18, v22);
          break;
        case 1:
          uint64_t v29 = a1[56];
          if (v29)
          {
            uint64_t v30 = 0;
            uint64_t v31 = v24;
            uint64_t v32 = v52;
            do
            {
              if (v18)
              {
                uint64_t v33 = 0;
                uint64_t v34 = v18;
                do
                {
                  unint64_t v35 = &v32[v33];
                  v35[1] = v31[v33];
                  *unint64_t v35 = v31[v33 + 1];
                  v33 += v22;
                  --v34;
                }
                while (v34);
              }
              ++v30;
              v32 += v23;
              v31 += v23;
            }
            while (v30 != v29);
          }
          break;
        default:
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1E01C3B90](exception, "RawCameraException");
LABEL_40:
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v53 = v24;
      unint64_t v36 = v59;
      if (v59 < (v61 + v59))
      {
        long long v37 = (short float *)(v45 + 6 * v59);
        long long v38 = (short float *)(a2 + (v57 & 0xFFFFFFFFFFFFFFFELL) + v25 * (v44 + v59));
        long long v39 = (short float *)&v52[v26 * (v43 + v59)];
        do
        {
          if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 88))(a1))
          {
            if (v18 == 3)
            {
              short float v40 = *(v37 - 2);
              if (a11)
              {
                *(_WORD *)long long v38 = (int)fmaxl(v40, COERCE_SHORT_FLOAT(0));
                *((_WORD *)v38 + 1) = (int)fmaxl(*(v37 - 1), COERCE_SHORT_FLOAT(0));
                *((_WORD *)v38 + 2) = (int)fmaxl(*v37, COERCE_SHORT_FLOAT(0));
              }
              else
              {
                *long long v38 = v40;
                v38[1] = *(v37 - 1);
                v38[2] = *v37;
                if (qword_1EAB6A8E0 != -1) {
                  dispatch_once(&qword_1EAB6A8E0, &unk_1F3978230);
                }
                v38[3] = *(short float *)&xmmword_1EAB6A8E8[0xFFFF];
              }
              goto LABEL_34;
            }
            short float v41 = *v39;
            if (!a11)
            {
              if (qword_1EAB6A8E0 == -1)
              {
LABEL_33:
                *long long v38 = *(short float *)&xmmword_1EAB6A8E8[v41];
                goto LABEL_34;
              }
LABEL_36:
              dispatch_once(&qword_1EAB6A8E0, &unk_1F3978230);
              goto LABEL_33;
            }
          }
          else
          {
            short float v41 = *v39;
            if (!a11)
            {
              if (qword_1EAB6A8E0 == -1) {
                goto LABEL_33;
              }
              goto LABEL_36;
            }
          }
          *(_WORD *)long long v38 = (int)fmaxl(v41, COERCE_SHORT_FLOAT(0));
LABEL_34:
          ++v36;
          v37 += 3;
          long long v38 = (short float *)((char *)v38 + v25);
          long long v39 = (short float *)((char *)v39 + v26);
        }
        while (v36 < v61 + (uint64_t)v59);
      }
      uint64_t v20 = v55 + 1;
      size_t v19 = size;
      uint64_t v24 = &v53[size];
      uint64_t v23 = v47;
      v57 += v48;
    }
    while (v55 + 1 < (unint64_t)(v62 + (uint64_t)v60));
  }
  free(v50);
  free(v52);
}

void sub_1DDB16DF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB16E10(os_signpost_id_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = sub_1DDA83CFC();
  uint64_t v7 = v6;
  if (a1 + 1 >= 2 && os_signpost_enabled(v6))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v7, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGDeflateUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = sub_1DDB172E8;
  v35[3] = &unk_1E6D04A58;
  v35[4] = a1;
  uint64_t v25 = (void (**)(void))MEMORY[0x1E01C46E0](v35);
  if ((*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 56))(a1) == 3) {
    int v8 = 4;
  }
  else {
    int v8 = 1;
  }
  unsigned int v24 = v8;
  unsigned int v9 = *(_DWORD *)(a1 + 48);
  unsigned int v28 = *(_DWORD *)(a1 + 44);
  unsigned int v10 = *(_DWORD *)(a1 + 224);
  unsigned int v11 = *(_DWORD *)(a1 + 228);
  *(void *)int buf = (uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 2;
  sub_1DDA18500(&v31, (unint64_t *)buf);
  uint64_t v12 = v31;
  if (v31 == 1
    || *(_DWORD *)(a1 + 216)
    || (*(unsigned int (**)(os_signpost_id_t))(*(void *)a1 + 224))(a1) == 2)
  {
    sub_1DDAA737C(a1, a2, (int *)a3, a4);
  }
  else
  {
    int v13 = *(_DWORD *)(a1 + 288);
    if (v13 != 1 && v13 != 3 && v13 != 34894
      || v28 >> 5 >= 0x271
      || v9 >> 5 >= 0x271
      || v10 >> 5 >= 0x271
      || v11 >> 5 >= 0x271
      || v12 >> 5 >= 0x271)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v14 = ((v9 + v11 - 1) / v11) >> (*(_DWORD *)(a1 + 216) != 0);
    unsigned int v15 = (v28 + v10 - 1) / v10;
    if (v14 * v15 != v12)
    {
      uint64_t v23 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1E01C3B90](v23, "RawCameraException");
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *(void *)int buf = 0;
    sub_1DDA18218(v34, v15 * v10, v14 * v11);
    uint64_t v31 = 0;
    sub_1DDA18218(&v32, v28, v9);
    if (v12)
    {
      uint64_t v16 = 0;
      int v17 = 0;
      int v18 = 0;
      uint64_t v19 = 4 * v12;
      do
      {
        sub_1DDA18218(&v29, v17, v18);
        sub_1DDA18218(&v30, v10, v11);
        if (sub_1DDB56B98((int *)&v29, (int *)a3))
        {
          uint64_t v20 = (Bytef *)sub_1DDB167AC(a1, *(_DWORD *)(*(void *)(a1 + 232) + v16), *(_DWORD *)(*(void *)(a1 + 256) + v16));
          if (v20)
          {
            sub_1DDB16894((_DWORD *)a1, a2, *(void *)a3, *(void *)(a3 + 8), a4, v29, v30, v20, *(_DWORD *)(*(void *)(a1 + 256) + v16), v24, 0);
            free(v20);
          }
        }
        if (v17 + v10 >= v28) {
          unsigned int v21 = v11;
        }
        else {
          unsigned int v21 = 0;
        }
        v18 += v21;
        if (v17 + v10 >= v28) {
          int v17 = 0;
        }
        else {
          v17 += v10;
        }
        v16 += 4;
      }
      while (v19 != v16);
    }
  }
  v25[2](v25);
}

void sub_1DDB17274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (**a11)(void))
{
  __cxa_free_exception(v11);
  a11[2](a11);

  _Unwind_Resume(a1);
}

void sub_1DDB172E8(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)double v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGDeflateUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB17370(os_signpost_id_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  id v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGDeflateUnpacker", (const char *)&unk_1DDC3ACB6, buf, 2u);
  }

  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 3221225472;
  void v51[2] = sub_1DDB17858;
  v51[3] = &unk_1E6D04A58;
  v51[4] = a1;
  uint64_t v4 = MEMORY[0x1E01C46E0](v51);
  int v5 = (*(uint64_t (**)(os_signpost_id_t))(*(void *)a1 + 56))(a1);
  unsigned int v6 = *(_DWORD *)(a1 + 44);
  unsigned int v7 = *(_DWORD *)(a1 + 48);
  unsigned int v8 = *(_DWORD *)(a1 + 224);
  unsigned int v9 = *(_DWORD *)(a1 + 228);
  *(void *)int buf = (uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 2;
  sub_1DDA18500(&v50, (unint64_t *)buf);
  uint64_t v10 = v50;
  int v11 = *(_DWORD *)(a1 + 288);
  if (v11 != 1 && v11 != 3 && v11 != 34894
    || v6 >> 5 >= 0x271
    || v7 >> 5 >= 0x271
    || v8 >> 5 >= 0x271
    || v9 >> 5 >= 0x271
    || v50 >> 5 >= 0x271)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((((v7 + v9 - 1) / v9) >> (*(_DWORD *)(a1 + 216) != 0)) * ((v6 + v8 - 1) / v8) != v50)
  {
    uint64_t v27 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](v27, "RawCameraException");
    __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v29 = (void (**)(void))v4;
  dispatch_group_t group = dispatch_group_create();
  dispatch_queue_t v12 = dispatch_queue_create("Deflate DNG Unpacker I/O Queue", 0);
  unsigned int v33 = v7;
  int v34 = v5;
  unsigned int v13 = v6;
  unsigned int v14 = group;
  dispatch_queue_t v35 = dispatch_queue_create("Deflate DNG Unpacker Queue", MEMORY[0x1E4F14430]);
  uint64_t v32 = sub_1DDAA5B9C(a1);
  if (v10)
  {
    int v15 = 0;
    int v16 = 0;
    int v17 = 0;
    uint64_t v30 = MEMORY[0x1E4F143A8];
    queue = v12;
    do
    {
      block[0] = v30;
      block[1] = 3221225472;
      block[2] = sub_1DDB178E0;
      block[3] = &unk_1E6D04E10;
      os_signpost_id_t v39 = a1;
      int v41 = v16;
      int v42 = v17;
      unsigned int v43 = v8;
      unsigned int v44 = v9;
      int v45 = v15;
      int v18 = v14;
      uint64_t v19 = v14;
      uint64_t v20 = v10;
      os_signpost_id_t v21 = a1;
      uint64_t v22 = v18;
      long long v37 = v18;
      uint64_t v23 = v35;
      unsigned int v46 = v13;
      unsigned int v47 = v33;
      long long v38 = v23;
      uint64_t v40 = v32;
      int v48 = v34;
      unsigned int v24 = v22;
      a1 = v21;
      uint64_t v10 = v20;
      unsigned int v14 = v19;
      dispatch_queue_t v12 = queue;
      dispatch_group_async(v24, queue, block);
      if (v16 + v8 >= v13) {
        unsigned int v25 = v9;
      }
      else {
        unsigned int v25 = 0;
      }
      v17 += v25;
      if (v16 + v8 >= v13) {
        int v16 = 0;
      }
      else {
        v16 += v8;
      }

      ++v15;
    }
    while (v10 != v15);
  }
  dispatch_group_wait(v14, 0xFFFFFFFFFFFFFFFFLL);

  v29[2](v29);
}

void sub_1DDB177DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  v11[2](v11);

  _Unwind_Resume(a1);
}

void sub_1DDB17858(uint64_t a1)
{
  uint64_t v2 = sub_1DDA83CFC();
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1DDA14000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGDeflateUnpacker", (const char *)&unk_1DDC3ACB6, v5, 2u);
  }
}

void sub_1DDB178E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  int v3 = *(_DWORD *)(a1 + 72);
  int v4 = *(_DWORD *)(a1 + 76);
  sub_1DDA18218(&v14, *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68));
  sub_1DDA18218((_DWORD *)&v14 + 2, v3, v4);
  int v5 = sub_1DDB167AC(v2, *(_DWORD *)(*(void *)(v2 + 232) + 4 * *(unsigned int *)(a1 + 80)), *(_DWORD *)(*(void *)(v2 + 256) + 4 * *(unsigned int *)(a1 + 80)));
  if (v5)
  {
    unsigned int v7 = *(NSObject **)(a1 + 32);
    unsigned int v6 = *(NSObject **)(a1 + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1DDB179EC;
    block[3] = &unk_1E6D04A98;
    block[7] = *(void *)(a1 + 84);
    uint64_t v8 = *(void *)(a1 + 56);
    void block[4] = v2;
    void block[5] = v8;
    long long v11 = v14;
    block[6] = v5;
    int v9 = *(_DWORD *)(a1 + 92);
    int v12 = *(_DWORD *)(a1 + 80);
    int v13 = v9;
    dispatch_group_async(v7, v6, block);
  }
  else
  {
    puts("not readtile?");
  }
}

void sub_1DDB179EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 56);
  unsigned int v4 = 6 * v3;
  sub_1DDA18218(&v5, v3, *(_DWORD *)(a1 + 60));
  sub_1DDB16894((_DWORD *)v2, *(void *)(a1 + 40), 0, v5, v4, *(void *)(a1 + 64), *(void *)(a1 + 72), *(Bytef **)(a1 + 48), *(_DWORD *)(*(void *)(v2 + 256) + 4 * *(unsigned int *)(a1 + 80)), *(_DWORD *)(a1 + 84), 1);
  free(*(void **)(a1 + 48));
}

char *sub_1DDB17A74(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 228) = a3;
  unsigned int v7 = (char *)(a1 + 232);
  if (v7 != (char *)a4) {
    sub_1DDA17E28(v7, *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  }
  uint64_t result = (char *)(a1 + 256);
  if (a1 + 256 != a5)
  {
    int v9 = *(char **)a5;
    uint64_t v10 = *(void *)(a5 + 8);
    unint64_t v11 = (v10 - *(void *)a5) >> 2;
    return sub_1DDA17E28(result, v9, v10, v11);
  }
  return result;
}

unint64_t sub_1DDB17AEC(int *a1)
{
  uint64_t v2 = (2 * a1[17]) + (uint64_t)a1[70];
  unint64_t result = 2 * (*(unsigned int (**)(int *))(*(void *)a1 + 40))(a1) * v2;
  if ((result & 0x1E) != 0)
  {
    uint64_t v4 = (2 * a1[17]) + (uint64_t)a1[15];
    return (2 * v4 * (*(unsigned int (**)(int *))(*(void *)a1 + 40))(a1) + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  return result;
}

void *sub_1DDB17BA0(void *a1)
{
  *a1 = &unk_1F3978120;
  uint64_t v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  *a1 = &unk_1F3977E98;
  uint64_t v4 = (void *)a1[24];
  if (v4)
  {
    a1[25] = v4;
    operator delete(v4);
  }

  return sub_1DDA18384(a1);
}

void sub_1DDB17C3C(void *a1)
{
  *a1 = &unk_1F3978120;
  uint64_t v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  *a1 = &unk_1F3977E98;
  uint64_t v4 = (void *)a1[24];
  if (v4)
  {
    a1[25] = v4;
    operator delete(v4);
  }
  sub_1DDA18384(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB17CEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 296);
}

int64x2_t sub_1DDB17CF4()
{
  uint64_t v0 = 0;
  int64x2_t result = (int64x2_t)xmmword_1DDBF8D70;
  int64x2_t v2 = (int64x2_t)xmmword_1DDBF8D80;
  int64x2_t v3 = (int64x2_t)xmmword_1DDBF8D90;
  float32x4_t v4 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  int64x2_t v5 = (int64x2_t)xmmword_1DDBF8D60;
  int64x2_t v6 = vdupq_n_s64(8uLL);
  do
  {
    xmmword_1EAB6A8E8[v0] = (__int128)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v5)), vcvtq_f64_u64((uint64x2_t)v3)), v4)), vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v2)), vcvtq_f64_u64((uint64x2_t)result)), v4));
    int64x2_t v2 = vaddq_s64(v2, v6);
    int64x2_t v3 = vaddq_s64(v3, v6);
    int64x2_t v5 = vaddq_s64(v5, v6);
    int64x2_t result = vaddq_s64(result, v6);
    ++v0;
  }
  while (v0 != 0x2000);
  return result;
}

id sub_1DDB17D88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F30058];
  uint64_t v34 = *MEMORY[0x1E4F30038];
  uint64_t v35 = v5;
  v42[0] = MEMORY[0x1E4F1CC38];
  v42[1] = @"com.epson.raw-image";
  uint64_t v6 = *MEMORY[0x1E4F30050];
  uint64_t v36 = *MEMORY[0x1E4F30018];
  v42[2] = @".erf.";
  v42[3] = &unk_1F39AEE70;
  unsigned char v42[4] = &unk_1F39AEE88;
  unsigned int v7 = objc_msgSend_numberWithUnsignedLong_(NSNumber, a2, (uint64_t)sub_1DDA15F38, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E4F30040], *MEMORY[0x1E4F30048]);
  void v42[5] = v7;
  uint64_t v37 = *MEMORY[0x1E4F30000];
  unint64_t v11 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v8, (uint64_t)sub_1DDB18080, v9, v10);
  v42[6] = v11;
  uint64_t v38 = *MEMORY[0x1E4F30020];
  int v15 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v12, (uint64_t)sub_1DDB1808C, v13, v14);
  v42[7] = v15;
  uint64_t v39 = *MEMORY[0x1E4F30008];
  uint64_t v19 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v16, (uint64_t)sub_1DDA818EC, v17, v18);
  v42[8] = v19;
  uint64_t v40 = *MEMORY[0x1E4F30028];
  uint64_t v23 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v20, (uint64_t)sub_1DDB18098, v21, v22);
  v42[9] = v23;
  uint64_t v41 = *MEMORY[0x1E4F30030];
  uint64_t v27 = objc_msgSend_numberWithUnsignedLong_(NSNumber, v24, (uint64_t)sub_1DDB180A4, v25, v26);
  v42[10] = v27;
  uint64_t v29 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v43[0] = v29;
  uint64_t v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v30, (uint64_t)v43, 1, v31);

  return v32;
}

void sub_1DDB18020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB18080(const void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1DDB1808C(os_signpost_id_t a1)
{
  return sub_1DDA81764(a1);
}

uint64_t sub_1DDB18098(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA7FF34(a1, a2, a3, &unk_1F3978250);
}

uint64_t sub_1DDB180A4(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1DDA82568(a1, a2, a3, &unk_1F3978250);
}

void sub_1DDB180B0(void *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  char v11 = a2;
  id v10 = a3;
  id v9 = a4;
  sub_1DDB191E8(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;
}

void sub_1DDB18130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB1814C(uint64_t a1)
{
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_1DDA27D28(a1, &v13);
  uint64_t v2 = v13;
  unsigned int v11 = 8;
  sub_1DDA1B3CC(&v12, &v11);
  BOOL v3 = sub_1DDA1A0CC(v2, &v12, (uint64_t)&__p);
  if (v14) {
    sub_1DDA18310(v14);
  }
  if (!v3) {
    goto LABEL_13;
  }
  uint64_t v4 = HIBYTE(v17);
  if (v17 < 0) {
    uint64_t v4 = v16;
  }
  if (v4 != 5) {
    goto LABEL_13;
  }
  p_p = (unsigned __int8 *)&__p;
  if (v17 < 0) {
    p_p = (unsigned __int8 *)__p;
  }
  int v6 = *(_DWORD *)p_p;
  int v7 = p_p[4];
  if (v6 == 1330860101 && v7 == 78)
  {
    sub_1DDA27D28(a1, &v13);
    sub_1DDA19E68(v13);
    if (v14) {
      sub_1DDA18310(v14);
    }
    sub_1DDA27D28(a1, &v13);
    unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 160))(a1, &v12);
    if (v14) {
      sub_1DDA18310(v14);
    }
    uint64_t v9 = 1;
  }
  else
  {
LABEL_13:
    uint64_t v9 = 0;
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  return v9;
}

void sub_1DDB182BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DDB182FC(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  v21[1] = *(std::__shared_weak_count **)MEMORY[0x1E4F143B8];
  nullsub_6();
  unsigned int v6 = *a3;
  if (v6 <= 0x27F)
  {
    if (v6 == 523)
    {
      if (a3[1] == 4 && *((_DWORD *)a3 + 1) == 1) {
        *(_DWORD *)(a1 + 1208) = *((_DWORD *)a3 + 2);
      }
    }
    else if (v6 == 524)
    {
      if (a3[1] == 4 && *((_DWORD *)a3 + 1) == 1) {
        *(_DWORD *)(a1 + 1212) = *((_DWORD *)a3 + 2);
      }
    }
    else if (v6 == 525 && a3[1] == 2 && *((_DWORD *)a3 + 1) <= 0xDu)
    {
      memset(&__str, 0, sizeof(__str));
      if (sub_1DDA45530(a1, (uint64_t)a3, &__str, 1)) {
        std::string::operator=((std::string *)(a1 + 1184), &__str);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (*a3 > 0x400u)
  {
    if (v6 == 1025)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0
        && a3[1] == 4
        && *((_DWORD *)a3 + 1) == 4)
      {
        sub_1DDA27D28(a1, &__p);
        sub_1DDA3E944((uint64_t)a3, (uint64_t *)&__p, (void **)&__str.__r_.__value_.__l.__data_);
        __srCC_SHA256_CTX c = (long long *)a2;
        unsigned int v11 = sub_1DDA4B960((uint64_t **)(a1 + 264), (void **)a2, (uint64_t)&unk_1DDBFB044, &__src);
        unsigned int v12 = (void *)v11[7];
        if (v12)
        {
          v11[8] = (uint64_t)v12;
          operator delete(v12);
          v11[7] = 0;
          v11[8] = 0;
          v11[9] = 0;
        }
        *(std::string *)(v11 + 7) = __str;
        memset(&__str, 0, sizeof(__str));
        if (__p.__r_.__value_.__l.__size_) {
          sub_1DDA18310((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
      }
    }
    else if (v6 == 3712 {
           && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0
    }
           && a3[1] == 7
           && *((_DWORD *)a3 + 1) == 256)
    {
      sub_1DDA27D28(a1, &__p);
      LODWORD(p_p) = *((_DWORD *)a3 + 2) + 48;
      sub_1DDA18410((int *)&__src, (int *)&p_p);
      sub_1DDA1A94C((uint64_t *)&__str, (uint64_t *)&__p, (uint64_t)&__src, 0);
      if (__p.__r_.__value_.__l.__size_) {
        sub_1DDA18310((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      if (*(char *)(a2 + 23) < 0) {
        sub_1DDA2639C(&__p, *(void **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      std::string::append(&__p, ":WhitePoint", 0xBuLL);
      sub_1DDA27D28(a1, &__src);
      unsigned int v13 = sub_1DDA19E68((uint64_t)__src);
      if (v21[0]) {
        sub_1DDA18310(v21[0]);
      }
      sub_1DDA27D28(a1, &__src);
      int v14 = sub_1DDA19E68((uint64_t)__src);
      if (v21[0]) {
        sub_1DDA18310(v21[0]);
      }
      __srCC_SHA256_CTX c = (long long *)(v13 | 0x10000000000);
      LODWORD(v21[0]) = v14;
      p_p = &__p;
      int v15 = sub_1DDA4B960((uint64_t **)(a1 + 120), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1DDBFB044, (long long **)&p_p);
      sub_1DDA17E28((char *)v15 + 56, (char *)&__src, (uint64_t)v21 + 4, 3uLL);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_1DDA1AA18((uint64_t *)&__str);
    }
  }
  else if (v6 == 640)
  {
    if (a3[1] == 1)
    {
      sub_1DDA27D28(a1, &__str);
      int v9 = sub_1DDA19CA4((uint64_t)__str.__r_.__value_.__l.__data_);
      LODWORD(__src) = *((_DWORD *)a3 + 2);
      LODWORD(__p.__r_.__value_.__l.__data_) = v9;
      *(void *)(a1 + 1232) = *sub_1DDA2A648((int *)&__p, (unsigned int *)&__src);
      if (__str.__r_.__value_.__l.__size_) {
        sub_1DDA18310((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
      *(_DWORD *)(a1 + 1240) = *((_DWORD *)a3 + 1);
    }
  }
  else if (v6 == 1024 && a3[1] == 7 && *((_DWORD *)a3 + 1) == 8)
  {
    sub_1DDA27D28(a1, &__p);
    LODWORD(p_p) = sub_1DDA3CE7C((uint64_t)a3);
    sub_1DDA1B4D8((int *)&__src, (int *)&p_p);
    sub_1DDA1A94C((uint64_t *)&__str, (uint64_t *)&__p, (uint64_t)&__src, 0);
    if (__p.__r_.__value_.__l.__size_) {
      sub_1DDA18310((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    sub_1DDA27D28(a1, &__src);
    int v7 = __src;
    unsigned int v16 = 4;
    sub_1DDA1B3CC(&p_p, &v16);
    sub_1DDA1A488(v7, (unsigned int *)&p_p, (uint64_t *)&__p);
    if (v21[0]) {
      sub_1DDA18310(v21[0]);
    }
    long long v8 = (void *)__p.__r_.__value_.__r.__words[0];
    *(uint32x4_t *)(a1 + 1216) = vmovl_u16(*(uint16x4_t *)__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    operator delete(v8);
    sub_1DDA1AA18((uint64_t *)&__str);
  }
}

void sub_1DDB18798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void sub_1DDB18884(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1DDA47F74(a1, a2);
  sub_1DDA1B2DC(&v5, (uint64_t *)(a1 + 1232));
  unsigned int v4 = *(_DWORD *)(a1 + 1240);
  sub_1DDA284D4(a1, &v5, &v4, 1, &v6);
  if ((void)v6) {
    sub_1DDA480D4(a2, &v6);
  }
  if (*((void *)&v6 + 1)) {
    sub_1DDA18310(*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_1DDB18900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1DDA18310(a12);
  }
  sub_1DDA18270(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB18934(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  uint64_t v2 = sub_1DDA481F0(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDB18990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB189AC(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  uint64_t v2 = sub_1DDA48264(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDB18A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1DDB18A24(uint64_t a1)
{
  sub_1DDA1A880(__p, "IFD0:SUBIFD0");
  unint64_t v2 = sub_1DDA48394(a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_1DDB18A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1DDB18A9C(uint64_t a1)
{
  return *(void *)(a1 + 1216);
}

unint64_t sub_1DDB18AAC(_DWORD *a1)
{
  (*(void (**)(_DWORD *))(*(void *)a1 + 448))(a1);
  int v4 = a1[302];
  if (v2 < v4 || (int v5 = a1[303], v3 < v5))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1E01C3B90](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v6 = v2 - v4;
  if (v2 < v4) {
    ++v6;
  }
  uint64_t v7 = (v6 >> 1);
  int v8 = v3 - v5;
  if (v3 < v5) {
    ++v8;
  }
  return v7 | ((unint64_t)(v8 >> 1) << 32);
}

void sub_1DDB18B6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB18B80(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1DDA1A880(&__p, "erf");
  unint64_t v4 = a2[2];
  unint64_t v5 = a2[1];
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    int v45 = a2 + 2;
    if (v10) {
      unsigned int v11 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v10);
    }
    else {
      unsigned int v11 = 0;
    }
    unsigned int v12 = &v11[24 * v7];
    uint64_t v41 = v11;
    int v42 = v12;
    unsigned int v44 = &v11[24 * v10];
    long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v12 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unsigned int v12 = v13;
    memset(&__p, 0, sizeof(__p));
    unsigned int v43 = v12 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v14 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v14;
    if (v15 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1DDA1A880(&__p, "epson");
  unint64_t v17 = a2[1];
  unint64_t v16 = a2[2];
  if (v17 >= v16)
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    int v45 = a2 + 2;
    if (v22) {
      uint64_t v23 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v22);
    }
    else {
      uint64_t v23 = 0;
    }
    unsigned int v24 = &v23[24 * v19];
    uint64_t v41 = v23;
    int v42 = v24;
    unsigned int v44 = &v23[24 * v22];
    long long v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v24 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unsigned int v24 = v25;
    memset(&__p, 0, sizeof(__p));
    unsigned int v43 = v24 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v26 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v26;
    if (v27 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v17 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1DDA29B20(a1, &__p);
  unint64_t v29 = a2[1];
  unint64_t v28 = a2[2];
  if (v29 >= v28)
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1DDA17F78();
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32) {
      unint64_t v32 = 2 * v33;
    }
    if (v33 >= 0x555555555555555) {
      unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v34 = v32;
    }
    int v45 = a2 + 2;
    if (v34) {
      uint64_t v35 = (char *)sub_1DDA2A160((uint64_t)(a2 + 2), v34);
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = &v35[24 * v31];
    uint64_t v41 = v35;
    int v42 = v36;
    unsigned int v44 = &v35[24 * v34];
    long long v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v36 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v36 = v37;
    memset(&__p, 0, sizeof(__p));
    unsigned int v43 = v36 + 24;
    sub_1DDA2A0E8(a2, &v41);
    uint64_t v38 = a2[1];
    sub_1DDA2A2C8((uint64_t)&v41);
    int v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v38;
    if (v39 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v29 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1DDB18ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1DDA2A044((void ***)&__p);
  _Unwind_Resume(a1);
}

id sub_1DDB18F30()
{
  v17[14] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = sub_1DDA409F0();
  unint64_t v5 = objc_msgSend_mutableCopy(v0, v1, v2, v3, v4);

  v16[0] = &unk_1F39AEEA0;
  v16[1] = &unk_1F39AEEB8;
  v17[0] = &unk_1F39B46E0;
  v17[1] = &unk_1F39B4708;
  void v16[2] = &unk_1F39AEED0;
  v16[3] = &unk_1F39AEEE8;
  void v17[2] = &unk_1F39B4730;
  uint64_t v17[3] = &unk_1F39B4758;
  v16[4] = &unk_1F39AEF00;
  void v16[5] = &unk_1F39AEF18;
  v17[4] = &unk_1F39B4780;
  void v17[5] = &unk_1F39B47A8;
  v16[6] = &unk_1F39AEF30;
  v16[7] = &unk_1F39AEF48;
  void v17[6] = &unk_1F39B47D0;
  v17[7] = &unk_1F39B47F8;
  v16[8] = &unk_1F39AEF60;
  v16[9] = &unk_1F39AEF78;
  v17[8] = &unk_1F39B4820;
  v17[9] = &unk_1F39B4848;
  v16[10] = &unk_1F39AEF90;
  v16[11] = &unk_1F39AEFA8;
  v17[10] = &unk_1F39B4870;
  v17[11] = &unk_1F39B4898;
  v16[12] = &unk_1F39AEFC0;
  v16[13] = &unk_1F39AEFD8;
  v17[12] = &unk_1F39B48C0;
  v17[13] = &unk_1F39B48E8;
  unint64_t v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v6, (uint64_t)v17, (uint64_t)v16, 14);
  objc_msgSend_addEntriesFromDictionary_(v5, v8, (uint64_t)v7, v9, v10);

  uint64_t v14 = objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E4F1C9E8], v11, (uint64_t)v5, v12, v13);

  return v14;
}

void sub_1DDB19114(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DDB19150(uint64_t a1)
{
  sub_1DDB19188(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB19188(uint64_t a1)
{
  *(void *)a1 = &unk_1F3978280;
  if (*(char *)(a1 + 1207) < 0) {
    operator delete(*(void **)(a1 + 1184));
  }

  return sub_1DDA49A44(a1);
}

void sub_1DDB191E8(void *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x4F8uLL);
  sub_1DDB1927C((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_1DDA1AF34((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1DDB19268(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB1927C(uint64_t a1, void *a2, char *a3, void **a4, void **a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F39785B8;
  sub_1DDA3F2B0(a1 + 24, a2, *a3, *a4, *a5);
  *(void *)(a1 + 24) = &unk_1F3978280;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1252) = 0u;
  return a1;
}

void sub_1DDB19308(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB1931C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39785B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1DDB1933C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F39785B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1E01C3DC0);
}

uint64_t sub_1DDB19390(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1DDB19430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB19560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DDB19624(uint64_t a1, int a2, uint64_t *a3)
{
  *(void *)sub_1DDBF0D7C(a1, a2) = &unk_1F3978608;
  *(_DWORD *)(a1 + 12) = sub_1DDA19EC8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1DDA19EC8(*a3);
  return a1;
}

id sub_1DDB19688(uint64_t a1)
{
  void v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [RAWOpcodeFixBadPixelsConstant alloc];
  v18[0] = @"Constant";
  long long v6 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v3, *(unsigned int *)(a1 + 12), v4, v5);
  v18[1] = @"BayerPhase";
  v19[0] = v6;
  uint64_t v10 = objc_msgSend_numberWithUnsignedInt_(NSNumber, v7, *(unsigned int *)(a1 + 16), v8, v9);
  v19[1] = v10;
  uint64_t v12 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v11, (uint64_t)v19, (uint64_t)v18, 2);
  unint64_t v16 = objc_msgSend_initWithArguments_(v2, v13, (uint64_t)v12, v14, v15);

  return v16;
}

void sub_1DDB1978C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DDB197BC()
{
}

uint64_t sub_1DDB197D0()
{
  return 4;
}

uint64_t sub_1DDB197D8()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v940 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned __int8 *)(v1 + 136);
  if (*(unsigned char *)(v1 + 136))
  {
    uint64_t v3 = v1;
    if (*(float *)(v1 + 132) != 0.66667
      || *(_DWORD *)(v1 + 188) != 1
      || *(_DWORD *)(v1 + 120)
      || *(_DWORD *)(v1 + 124) != 2
      || (*(_DWORD *)(v1 + 144) | 2) != 2
      || *(_DWORD *)(v1 + 248))
    {
      return 0;
    }
    uint64_t v2 = *(unsigned __int8 *)(v1 + 252);
    if (!*(unsigned char *)(v1 + 252)) {
      return v2;
    }
    uint64_t v2 = *(unsigned int *)(v1 + 264);
    if (v2) {
      return 0;
    }
    unint64_t v5 = *(void *)(v0 + 64);
    if (v5 >= 2)
    {
      unint64_t v6 = *(void *)(v0 + 72);
      if (v6 >= 2)
      {
        uint64_t v7 = *(void *)v0;
        if (v5 + *(void *)(v0 + 32) >= *(void *)v0 - 1) {
          return 0;
        }
        if (*(float *)(v1 + 496) != 0.0) {
          return 0;
        }
        unint64_t v635 = *(void *)(v0 + 32);
        if (*(_DWORD *)(v1 + 304) != 1) {
          return 0;
        }
        uint64_t v8 = *(void *)(v0 + 8);
        uint64_t v626 = *(void *)(v0 + 24);
        uint64_t v630 = *(void *)(v0 + 16);
        uint64_t v9 = *(void *)(v0 + 40);
        uint64_t v10 = *(void *)(v0 + 48);
        uint64_t v11 = *(void *)(v0 + 56);
        int v12 = *(_DWORD *)(v0 + 80);
        int v13 = *(_DWORD *)(v1 + 4);
        bzero(&v636, 0x2588uLL);
        unint64_t v614 = v8;
        unint64_t v615 = v7;
        uint64_t v641 = v7;
        uint64_t v642 = v8;
        uint64_t v643 = v630;
        uint64_t v644 = v626;
        unint64_t v645 = v635;
        uint64_t v646 = v9;
        unint64_t v620 = v9;
        uint64_t v647 = v10;
        uint64_t v648 = v11;
        unint64_t v649 = v5;
        unint64_t v650 = v6;
        id v651 = (float32x2_t *)v3;
        int v652 = v12;
        int v653 = v13;
        int v654 = v13;
        char v638 = 0;
        uint64_t v14 = qword_1EAB91200;
        if (!qword_1EAB91200)
        {
          pthread_once(&stru_1EAB8AF48, sub_1DDB1EEC8);
          uint64_t v14 = qword_1EAB91200;
          if (!qword_1EAB91200) {
            return 0;
          }
        }
        long long v922 = (void *)v14;
        if (*(void *)(v14 + 64))
        {
          if (*(void *)(v14 + 72)) {
            BOOL v15 = *(void *)(v14 + 80) == 0;
          }
          else {
            BOOL v15 = 1;
          }
          if (!v15) {
            goto LABEL_50;
          }
        }
        else
        {
          pthread_mutex_lock((pthread_mutex_t *)v14);
          unint64_t v29 = (pthread_mutex_t *)qword_1EAB91200;
          if (!*(void *)(qword_1EAB91200 + 64))
          {
            uint64_t v30 = 0;
            *(void *)(qword_1EAB91200 + 112) = 0x4000000040000000;
            float v31 = 3.0;
            uint64_t v32 = 116;
            do
            {
              unint64_t v33 = (float *)v29 + v30;
              v33[30] = *(float *)((char *)&v29->__sig + v32) * 0.5;
              v33[31] = 2.0 / v31;
              float v31 = v31 + 2.0;
              unint64_t v34 = v30 + 3;
              v30 += 2;
              v32 += 4;
            }
            while (v34 < 0x1FFFE);
            v29[1].__uint64_t sig = (uint64_t)&v29[1].__opaque[40];
          }
          pthread_mutex_unlock(v29);
          uint64_t v14 = qword_1EAB91200;
          if (*(void *)(qword_1EAB91200 + 72)) {
            BOOL v35 = *(void *)(qword_1EAB91200 + 80) == 0;
          }
          else {
            BOOL v35 = 1;
          }
          if (!v35)
          {
LABEL_50:
            if (*(void *)(v14 + 88)) {
              goto LABEL_51;
            }
            goto LABEL_36;
          }
        }
        pthread_mutex_lock((pthread_mutex_t *)v14);
        uint64_t v16 = qword_1EAB91200;
        if (*(void *)(qword_1EAB91200 + 72)) {
          BOOL v17 = *(void *)(qword_1EAB91200 + 80) == 0;
        }
        else {
          BOOL v17 = 1;
        }
        if (v17)
        {
          uint64_t v18 = 0;
          uint64_t v19 = qword_1EAB91200 + 788400;
          *(_DWORD *)(qword_1EAB91200 + 524400) = 0;
          *(unsigned char *)(v16 + 788400) = 0;
          int v20 = 2;
          char v21 = 16;
          do
          {
            uint64_t v22 = v18 + 1;
            unsigned int v23 = 0xFFFFFFFF / ((int)v18 + 1);
            *(unsigned char *)(v16 + 788401 + v18) = v21;
            char v24 = v18 + 1 == v20;
            if (v18 + 1 == v20) {
              ++v23;
            }
            v20 <<= v24;
            v21 -= v24;
            *(_DWORD *)(v16 + 524404 + 4 * v18++) = v23;
          }
          while (v22 != 65999);
          *(void *)(v16 + 72) = v16 + 524400;
          *(void *)(v16 + 80) = v19;
        }
        pthread_mutex_unlock((pthread_mutex_t *)v16);
        uint64_t v14 = qword_1EAB91200;
        if (*(void *)(qword_1EAB91200 + 88))
        {
LABEL_51:
          if (!*(unsigned char *)(v3 + 160)) {
            goto LABEL_60;
          }
          goto LABEL_52;
        }
LABEL_36:
        pthread_mutex_lock((pthread_mutex_t *)v14);
        uint64_t v25 = qword_1EAB91200;
        uint64_t v26 = *(void *)(qword_1EAB91200 + 88);
        if (!v26)
        {
          uint64_t v27 = qword_1EAB91200 + 854400;
          double v28 = 0.0;
          do
          {
            *(_WORD *)(v27 + v26) = (int)(sqrt(v28) * 65535.0 + 0.5);
            double v28 = v28 + 0.0000152590219;
            v26 += 2;
          }
          while (v26 != 0x20000);
          *(void *)(v25 + 88) = v27;
        }
        pthread_mutex_unlock((pthread_mutex_t *)v25);
        if (!*(unsigned char *)(v3 + 160))
        {
LABEL_60:
          unsigned int v43 = v651;
          __int32 v44 = v651->i32[1];
          if (v44 != 8 && v44 != 6)
          {
            int v59 = 0;
            goto LABEL_139;
          }
          unsigned int v46 = llroundf(v651[48].f32[1]);
          unsigned int v47 = llroundf(v651[49].f32[0]);
          int32x2_t v48 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v651[41]), (float64x2_t)vdupq_n_s64(0x40C0000000000000uLL)))));
          unsigned int v49 = llround(v651[42].f32[0] * 8192.0);
          unsigned int v50 = llround(v651[78].f32[0] * 16.0 * 8192.0);
          unsigned int v51 = llround(v651[78].f32[1] * 16.0 * 8192.0);
          unsigned int v52 = llround(v651[79].f32[0] * 16.0 * 8192.0);
          if (v48.i32[0] == v50) {
            char v53 = 3;
          }
          else {
            char v53 = 1;
          }
          if (v48.i32[1] == v48.i32[0]) {
            v53 |= 4u;
          }
          if (v48.i32[0] == v51) {
            v53 |= 8u;
          }
          char v54 = v53 | 0x10;
          if (v48.i32[0] != v49) {
            char v54 = v53;
          }
          if (v48.i32[0] == v52) {
            char v55 = v54 | 0x20;
          }
          else {
            char v55 = v54;
          }
          if (v47 != v46) {
            char v55 = v53;
          }
          if ((v55 & 2) != 0)
          {
            if ((v55 & 4) != 0)
            {
              int v58 = 1;
              goto LABEL_113;
            }
            if (v48.i32[1] == v51) {
              char v60 = 12;
            }
            else {
              char v60 = 4;
            }
            v55 |= v60;
            int v58 = 2;
            if (v47 != v46)
            {
LABEL_113:
              char v63 = v55 | 0x18;
              if (v49 != v51) {
                char v63 = v55 | 8;
              }
              if (v52 == v51) {
                char v64 = v63 | 0x20;
              }
              else {
                char v64 = v63;
              }
              if (v47 == v46) {
                char v65 = v64;
              }
              else {
                char v65 = v55 | 8;
              }
              if ((v55 & 8) != 0) {
                char v66 = v55;
              }
              else {
                char v66 = v65;
              }
              if ((v55 & 8) != 0) {
                unsigned int v67 = v58;
              }
              else {
                unsigned int v67 = v58 + 1;
              }
              if ((v66 & 0x10) == 0)
              {
                ++v67;
                if (v52 == v49) {
                  goto LABEL_132;
                }
                v66 |= 0x10u;
              }
              if ((v66 & 0x20) != 0)
              {
                v931[0] = xmmword_1DDBFE090;
                if (v67 == 1)
                {
                  int v59 = 1;
                  goto LABEL_139;
                }
                goto LABEL_135;
              }
              ++v67;
LABEL_132:
              v931[0] = xmmword_1DDBFE090;
LABEL_135:
              v931[1] = xmmword_1DDBFE0A0;
              if (v67 < 3)
              {
                int v59 = 2;
              }
              else
              {
                long long v932 = xmmword_1DDBFE0B0;
                if (v67 == 3)
                {
                  int v59 = 3;
                }
                else
                {
                  long long v933 = xmmword_1DDBFE0C0;
                  if (v67 < 5)
                  {
                    int v59 = 4;
                  }
                  else
                  {
                    long long v934 = xmmword_1DDBFE0D0;
                    if (v67 == 5)
                    {
                      int v59 = 5;
                    }
                    else
                    {
                      long long v935 = xmmword_1DDBFE0E0;
                      int v59 = 6;
                    }
                  }
                }
              }
LABEL_139:
              if (v44 != 6 && v44 != 8)
              {
                long long v938 = 0u;
                long long v939 = 0u;
                long long v936 = 0u;
                long long v937 = 0u;
                long long v929 = 0u;
                long long v930 = 0u;
                long long v927 = 0u;
                long long v928 = 0u;
                unsigned int v73 = llroundf(v651[48].f32[1]);
                unsigned int v74 = llroundf(v651[49].f32[0]);
                unsigned int v75 = llroundf(v651[49].f32[1]);
                __int32 v76 = v651[41].i32[0];
                __int32 v77 = v651[41].i32[1];
                __int32 v78 = v651[42].i32[0];
                switch(v654)
                {
                  case 4:
                    DWORD1(v927) = v651[42].i32[0];
                    HIDWORD(v927) = v76;
                    LODWORD(v928) = v77;
                    DWORD2(v928) = v77;
                    DWORD1(v929) = v76;
                    HIDWORD(v929) = v78;
                    unsigned int v79 = v75;
                    unsigned int v80 = v73;
                    unsigned int v81 = v74;
                    LODWORD(v930) = v77;
                    DWORD2(v930) = v77;
                    LODWORD(v936) = 0;
                    unsigned int v75 = 0;
                    unsigned int v74 = 0;
                    unsigned int v73 = 0;
                    goto LABEL_244;
                  case 5:
                  case 7:
                    unsigned int v79 = 0;
                    unsigned int v80 = 0;
                    unsigned int v81 = 0;
                    LODWORD(v927) = v651[41].i32[0];
                    DWORD2(v927) = v78;
                    DWORD1(v928) = v77;
                    HIDWORD(v928) = v77;
                    LODWORD(v929) = v78;
                    DWORD2(v929) = v76;
                    DWORD1(v930) = v77;
                    HIDWORD(v930) = v77;
                    goto LABEL_243;
                  case 6:
                  case 8:
                    __int32 v122 = v651[78].i32[0];
                    __int32 v123 = v651[78].i32[1];
                    __int32 v124 = v651[79].i32[0];
                    LODWORD(v927) = v651[41].i32[0];
                    *(void *)((char *)&v927 + 4) = __PAIR64__(v78, v122);
                    HIDWORD(v927) = v124;
                    *(void *)&long long v928 = __PAIR64__(v77, v123);
                    *((void *)&v928 + 1) = __PAIR64__(v77, v123);
                    *(void *)&long long v929 = __PAIR64__(v124, v78);
                    *((void *)&v929 + 1) = __PAIR64__(v122, v76);
                    *(void *)&long long v930 = __PAIR64__(v77, v123);
                    *((void *)&v930 + 1) = __PAIR64__(v77, v123);
                    unsigned int v79 = v73;
                    unsigned int v80 = v75;
                    unsigned int v81 = v74;
LABEL_243:
                    LODWORD(v936) = v73;
LABEL_244:
                    *(void *)((char *)&v936 + 4) = __PAIR64__(v75, v79);
                    HIDWORD(v936) = v80;
                    *(void *)&long long v937 = __PAIR64__(v74, v81);
                    *((void *)&v937 + 1) = __PAIR64__(v74, v81);
                    *(void *)&long long v938 = __PAIR64__(v80, v75);
                    *((void *)&v938 + 1) = __PAIR64__(v79, v73);
                    *(void *)&long long v939 = __PAIR64__(v74, v81);
                    *((void *)&v939 + 1) = __PAIR64__(v74, v81);
                    break;
                  default:
                    break;
                }
                uint64_t v125 = 0;
                unsigned int v126 = 0;
                unsigned int v127 = 0;
                do
                {
                  if (((v127 >> v125) & 1) == 0)
                  {
                    for (uint64_t i = v125; i != 16; ++i)
                    {
                      if (*((_DWORD *)&v936 + i) == *((_DWORD *)&v936 + v125)
                        && *((float *)&v927 + i) == *((float *)&v927 + v125))
                      {
                        v127 |= 1 << i;
                      }
                    }
                    ++v126;
                  }
                  ++v125;
                }
                while (v125 != 16);
                if ((int)v126 >= 1)
                {
                  int v129 = v59 + 1;
                  v931[v59] = xmmword_1DDBFE090;
                  if (v126 == 1)
                  {
LABEL_256:
                    int v59 = v129;
                    goto LABEL_144;
                  }
                  int v130 = v59 + 2;
                  v931[v129] = xmmword_1DDBFE0A0;
                  if (v126 < 3) {
                    goto LABEL_272;
                  }
                  int v129 = v59 + 3;
                  v931[v130] = xmmword_1DDBFE0B0;
                  if (v126 == 3) {
                    goto LABEL_256;
                  }
                  int v130 = v59 + 4;
                  v931[v129] = xmmword_1DDBFE0C0;
                  if (v126 < 5) {
                    goto LABEL_272;
                  }
                  int v129 = v59 + 5;
                  v931[v130] = xmmword_1DDBFE0D0;
                  if (v126 == 5) {
                    goto LABEL_256;
                  }
                  int v130 = v59 + 6;
                  v931[v129] = xmmword_1DDBFE0E0;
                  if (v126 < 7) {
                    goto LABEL_272;
                  }
                  int v129 = v59 + 7;
                  v931[v130] = xmmword_1DDBFE0F0;
                  if (v126 == 7) {
                    goto LABEL_256;
                  }
                  int v130 = v59 | 8;
                  v931[v129] = xmmword_1DDBFE100;
                  if (v126 < 9) {
                    goto LABEL_272;
                  }
                  int v129 = v59 + 9;
                  v931[v130] = xmmword_1DDBFE110;
                  if (v126 == 9) {
                    goto LABEL_256;
                  }
                  int v130 = v59 + 10;
                  v931[v129] = xmmword_1DDBFE120;
                  if (v126 < 0xB) {
                    goto LABEL_272;
                  }
                  int v129 = v59 + 11;
                  v931[v130] = xmmword_1DDBFE130;
                  if (v126 == 11) {
                    goto LABEL_256;
                  }
                  int v130 = v59 + 12;
                  v931[v129] = xmmword_1DDBFE140;
                  if (v126 < 0xD) {
                    goto LABEL_272;
                  }
                  int v129 = v59 + 13;
                  v931[v130] = xmmword_1DDBFE150;
                  if (v126 == 13) {
                    goto LABEL_256;
                  }
                  int v130 = v59 + 14;
                  v931[v129] = xmmword_1DDBFE160;
                  if (v126 < 0xF)
                  {
LABEL_272:
                    int v59 = v130;
                  }
                  else
                  {
                    int v129 = v59 + 15;
                    v931[v130] = xmmword_1DDBFE170;
                    if (v126 == 15) {
                      goto LABEL_256;
                    }
                    v59 |= 0x10u;
                    v931[v129] = xmmword_1DDBFE180;
                  }
                }
              }
LABEL_144:
              if (v43[6].i8[4]) {
                __int16 v69 = 3640;
              }
              else {
                __int16 v69 = 0;
              }
              __int16 v70 = v69 | 7;
              if (v43[17].i32[1] && (v43[18].i32[0] | 2) == 2) {
                __int16 v70 = v69 | 0x3F;
              }
              if (v43[8].i8[0]) {
                v931[v59++] = xmmword_1DDBFE190;
              }
              if (v43[34].i8[0])
              {
                v70 |= 0x1000u;
                v931[v59++] = xmmword_1DDBFE1A0;
              }
              if (v70)
              {
                v931[v59++] = xmmword_1DDBFE1B0;
                if ((v70 & 2) == 0)
                {
LABEL_156:
                  if ((v70 & 4) == 0) {
                    goto LABEL_157;
                  }
                  goto LABEL_169;
                }
              }
              else if ((v70 & 2) == 0)
              {
                goto LABEL_156;
              }
              v931[v59++] = xmmword_1DDBFE1C0;
              if ((v70 & 4) == 0)
              {
LABEL_157:
                if ((v70 & 8) == 0) {
                  goto LABEL_158;
                }
                goto LABEL_170;
              }
LABEL_169:
              v931[v59++] = xmmword_1DDBFE1D0;
              if ((v70 & 8) == 0)
              {
LABEL_158:
                if ((v70 & 0x10) == 0) {
                  goto LABEL_159;
                }
                goto LABEL_171;
              }
LABEL_170:
              v931[v59++] = xmmword_1DDBFE1E0;
              if ((v70 & 0x10) == 0)
              {
LABEL_159:
                if ((v70 & 0x20) == 0) {
                  goto LABEL_160;
                }
                goto LABEL_172;
              }
LABEL_171:
              v931[v59++] = xmmword_1DDBFE1F0;
              if ((v70 & 0x20) == 0)
              {
LABEL_160:
                if ((v70 & 0x200) == 0) {
                  goto LABEL_161;
                }
                goto LABEL_173;
              }
LABEL_172:
              v931[v59++] = xmmword_1DDBFE200;
              if ((v70 & 0x200) == 0)
              {
LABEL_161:
                if ((v70 & 0x400) == 0) {
                  goto LABEL_162;
                }
                goto LABEL_174;
              }
LABEL_173:
              v931[v59++] = xmmword_1DDBFE210;
              if ((v70 & 0x400) == 0)
              {
LABEL_162:
                if ((v70 & 0x800) == 0) {
                  goto LABEL_163;
                }
                goto LABEL_175;
              }
LABEL_174:
              v931[v59++] = xmmword_1DDBFE220;
              if ((v70 & 0x800) == 0)
              {
LABEL_163:
                if ((v70 & 0x1000) == 0) {
                  goto LABEL_164;
                }
                goto LABEL_176;
              }
LABEL_175:
              v931[v59++] = xmmword_1DDBFE230;
              if ((v70 & 0x1000) == 0)
              {
LABEL_164:
                if (v59 >= 1)
                {
LABEL_165:
                  if (v59 >= 5)
                  {
                    uint64_t v82 = v59 & 3;
                    if ((v59 & 3) == 0) {
                      uint64_t v82 = 4;
                    }
                    uint64_t v71 = v59 - v82;
                    int64x2_t v83 = (int64x2_t)xmmword_1DDBFE250;
                    double v84 = (const double *)&v932 + 1;
                    int64x2_t v85 = 0uLL;
                    uint64_t v86 = v71;
                    do
                    {
                      double v87 = v84 - 4;
                      unsigned long long v88 = (unsigned __int128)vld2q_f64(v87);
                      unsigned long long v89 = (unsigned __int128)vld2q_f64(v84);
                      int64x2_t v83 = vaddq_s64((int64x2_t)v88, v83);
                      int64x2_t v85 = vaddq_s64((int64x2_t)v89, v85);
                      v84 += 8;
                      v86 -= 4;
                    }
                    while (v86);
                    size_t v72 = vaddvq_s64(vaddq_s64(v85, v83));
                  }
                  else
                  {
                    uint64_t v71 = 0;
                    size_t v72 = 320;
                  }
                  uint64_t v90 = v59 - v71;
                  uint64_t v91 = (uint64_t *)((unint64_t)&v931[v71] | 8);
                  do
                  {
                    uint64_t v92 = *v91;
                    v91 += 2;
                    v72 += v92;
                    --v90;
                  }
                  while (v90);
LABEL_187:
                  int v93 = (pthread_mutex_t *)sub_1DDBF2024(1uLL, v72);
                  long long v924 = v93;
                  if (v93)
                  {
                    uint64_t v94 = v93;
                    if (pthread_mutex_init(v93, 0))
                    {
LABEL_189:
                      if (v923) {
                        atomic_fetch_add((atomic_uint *volatile)v923 + 4, 0xFFFFFFFF);
                      }
                      pthread_mutex_destroy(v94);
                      j__free_3(v94);
                      return 0;
                    }
                    if (v59 >= 1)
                    {
                      int v95 = v94 + 5;
                      uint64_t v96 = v59;
                      uint64_t v97 = (uint64_t *)v931 + 1;
                      do
                      {
                        *(uint64_t *)((char *)&v94->__sig + *(v97 - 1)) = (uint64_t)v95;
                        uint64_t v98 = *v97;
                        v97 += 2;
                        int v95 = (pthread_mutex_t *)((char *)v95 + v98);
                        --v96;
                      }
                      while (v96);
                    }
                    uint64_t v99 = *(void *)&v94[4].__opaque[48];
                    if (v99 && !*(void *)&v94[3].__opaque[40]) {
                      *(void *)&v94[3].__opaque[40] = v99 + 0x20000;
                    }
                    float v100 = v43[57].f32[1];
                    int v101 = v43[52].u8[4];
                    float v102 = v43[53].f32[0];
                    float v103 = v43[53].f32[1];
                    float v104 = v43[54].f32[0];
                    float v105 = v43[54].f32[1];
                    float v106 = v43[55].f32[0];
                    float v107 = v43[55].f32[1];
                    float v108 = v43[56].f32[0];
                    float v631 = v43[56].f32[1];
                    __int8 v109 = v43[57].i8[0];
                    LOWORD(v936) = *(__int16 *)((char *)v43[57].i16 + 1);
                    BYTE2(v936) = v43[57].i8[3];
                    pthread_mutex_lock((pthread_mutex_t *)qword_1EAB91200);
                    uint64_t v110 = *(unsigned int **)(qword_1EAB91200 + 104);
                    if (v110)
                    {
                      unsigned int v111 = 0;
                      unint64_t v112 = 0;
                      if (v101)
                      {
                        while (v100 != *((float *)v110 + 5)
                             || v101 != *((unsigned __int8 *)v110 + 24)
                             || ((v109 & 1) == 0 || !*((unsigned char *)v110 + 60))
                             && (v102 != *((float *)v110 + 7)
                              || v103 != *((float *)v110 + 8)
                              || v104 != *((float *)v110 + 9)
                              || v105 != *((float *)v110 + 10)
                              || v106 != *((float *)v110 + 11)
                              || v107 != *((float *)v110 + 12)
                              || v108 != *((float *)v110 + 13)
                              || v631 != *((float *)v110 + 14)
                              || (v109 & 1) != *((unsigned char *)v110 + 60)))
                        {
                          if (!atomic_load(v110 + 4)) {
                            unint64_t v112 = (char *)v110;
                          }
                          uint64_t v110 = (unsigned int *)*((void *)v110 + 1);
                          ++v111;
                          if (!v110) {
                            goto LABEL_227;
                          }
                        }
LABEL_236:
                        long long v923 = v110;
                        atomic_fetch_add((atomic_uint *volatile)v110 + 4, 1u);
                        v94[1].__uint64_t sig = (uint64_t)(v110 + 16);
                        unint64_t v118 = (pthread_mutex_t *)qword_1EAB91200;
                        uint64_t v119 = *(unsigned int **)(qword_1EAB91200 + 104);
                        if (v110 != v119)
                        {
                          uint64_t v120 = *(void *)v110;
                          *(void *)(*(void *)v110 + 8) = *((void *)v110 + 1);
                          uint64_t v121 = (void *)*((void *)v110 + 1);
                          if (v121) {
                            void *v121 = v120;
                          }
                          *(void *)uint64_t v110 = 0;
                          *((void *)v110 + 1) = v119;
                          *(void *)uint64_t v119 = v110;
                          unint64_t v118 = (pthread_mutex_t *)qword_1EAB91200;
                          *(void *)(qword_1EAB91200 + 104) = v110;
                        }
                        pthread_mutex_unlock(v118);
                        int v606 = v924;
                        float v601 = *(float *)(v3 + 328);
                        float v604 = *(float *)(v3 + 332);
                        float v603 = *(float *)(v3 + 336);
                        float v592 = *(float *)(v3 + 388);
                        float v594 = *(float *)(v3 + 392);
                        float v596 = *(float *)(v3 + 396);
                        if (*(_DWORD *)(v3 + 416))
                        {
                          unsigned int v574 = 0;
                          unsigned int v576 = 0;
                          unsigned int v578 = 0;
                        }
                        else
                        {
                          unsigned int v578 = llroundf(*(float *)(v3 + 376));
                          unsigned int v576 = llroundf(*(float *)(v3 + 380));
                          unsigned int v574 = llroundf(*(float *)(v3 + 384));
                        }
                        float v131 = *(float *)(v3 + 332);
                        if (v604 <= v601) {
                          float v131 = *(float *)(v3 + 328);
                        }
                        if (v603 > v131) {
                          float v131 = *(float *)(v3 + 336);
                        }
                        float v132 = *(float *)(v3 + 392);
                        if (v594 <= v592) {
                          float v132 = *(float *)(v3 + 388);
                        }
                        if (v596 > v132) {
                          float v132 = *(float *)(v3 + 396);
                        }
                        float v616 = v132;
                        if (*(void *)&v924[4].__opaque[40]) {
                          BOOL v133 = *(void *)&v924[3].__opaque[40] == 0;
                        }
                        else {
                          BOOL v133 = 0;
                        }
                        uint64_t v580 = *(void *)&v924[4].__opaque[40];
                        unsigned int v572 = *(uint16x8_t **)&v924[3].__opaque[40];
                        if (v133) {
                          uint64_t v134 = *(void *)&v924[4].__opaque[40];
                        }
                        else {
                          uint64_t v134 = *(void *)&v924[3].__opaque[40];
                        }
                        double v135 = (double)*(int *)(v3 + 544);
                        int v136 = *(_DWORD *)(v3 + 540);
                        if (v136 && v135 > (double)v136) {
                          double v135 = (double)v136;
                        }
                        double v137 = *(float *)(v3 + 512);
                        if (*(_DWORD *)(v3 + 508)) {
                          double v138 = v135 * *(float *)(v3 + 516) + v135 * v137 * v135 + *(float *)(v3 + 520);
                        }
                        else {
                          double v138 = *(float *)(v3 + 516) + v137 * v135;
                        }
                        double v139 = *(float *)(v3 + 528);
                        if (*(_DWORD *)(v3 + 524)) {
                          double v140 = v135 * *(float *)(v3 + 532) + v135 * v139 * v135 + *(float *)(v3 + 536);
                        }
                        else {
                          double v140 = *(float *)(v3 + 532) + v139 * v135;
                        }
                        double v141 = *(float *)(v3 + 560);
                        if (*(_DWORD *)(v3 + 556)) {
                          double v142 = v135 * *(float *)(v3 + 564) + v135 * v141 * v135 + *(float *)(v3 + 568);
                        }
                        else {
                          double v142 = *(float *)(v3 + 564) + v141 * v135;
                        }
                        double v632 = v142;
                        double v143 = v131;
                        double v144 = *(float *)(v3 + 576);
                        if (*(_DWORD *)(v3 + 572)) {
                          double v145 = v135 * *(float *)(v3 + 580) + v135 * v144 * v135 + *(float *)(v3 + 584);
                        }
                        else {
                          double v145 = *(float *)(v3 + 580) + v144 * v135;
                        }
                        double v621 = v145;
                        uint64_t v627 = v922[11];
                        uint64_t v610 = *(void *)&v924[3].__opaque[8];
                        uint64_t v612 = *(void *)&v924[3].__opaque[16];
                        uint64_t v608 = *(void *)&v924[3].__opaque[24];
                        double v146 = *(float *)(v3 + 592);
                        double v147 = *(float *)(v3 + 16) / 100.0 * 32768.0 / v143;
                        if (*(_DWORD *)(v3 + 588)) {
                          double v148 = v135 * *(float *)(v3 + 596) + v135 * v146 * v135 + *(float *)(v3 + 600);
                        }
                        else {
                          double v148 = *(float *)(v3 + 596) + v146 * v135;
                        }
                        v149.i32[0] = *(_DWORD *)(v3 + 344);
                        v149.i32[1] = *(_DWORD *)(v3 + 356);
                        float32x2_t v590 = v149;
                        v149.i32[0] = *(_DWORD *)(v3 + 360);
                        v149.i32[1] = *(_DWORD *)(v3 + 372);
                        float32x2_t v588 = v149;
                        float v555 = *(float *)(v3 + 352);
                        float v552 = *(float *)(v3 + 340);
                        float v553 = *(float *)(v3 + 364);
                        float v559 = *(float *)(v3 + 368);
                        float v557 = *(float *)(v3 + 348);
                        float v569 = *(float *)(v3 + 624);
                        float v571 = *(float *)(v3 + 628);
                        float v597 = *(float *)(v3 + 632);
                        float v150 = v147;
                        uint64_t v582 = *(void *)&v924[3].__opaque[32];
                        uint64_t v584 = *(void *)&v924[3].__opaque[48];
                        uint64_t v586 = v922[9];
                        unsigned int v565 = *(_WORD **)&v924[4].__opaque[24];
                        unsigned int v567 = *(_WORD **)&v924[4].__opaque[16];
                        uint64_t v561 = v922[10];
                        unsigned int v563 = *(_WORD **)&v924[4].__opaque[32];
                        double v151 = *(float *)(v3 + 608);
                        if (*(_DWORD *)(v3 + 604)) {
                          double v152 = v135 * *(float *)(v3 + 612) + v135 * v151 * v135 + *(float *)(v3 + 616);
                        }
                        else {
                          double v152 = *(float *)(v3 + 612) + v151 * v135;
                        }
                        LODWORD(v927) = 0;
                        uint64_t v926 = 0;
                        int v925 = 0;
                        sub_1DDB1EF24(v3, v610, v582, (unint64_t)&v927, (unint64_t)&v926, v150, v138, v140, v601, v592);
                        sub_1DDB1EF24(v3, v612, v134, (unint64_t)&v926 + 4, (unint64_t)&v925, v150, v138, v140, v604, v594);
                        sub_1DDB1EF24(v3, v608, v584, 0, 0, v150, v138, v140, v603, v596);
                        double v153 = v135 * *(float *)(v3 + 552);
                        unsigned int v154 = *(unsigned __int16 *)(v627 + 2 * (int)llround(v153));
                        *(float *)&double v153 = v150;
                        double v155 = sub_1DDB1F2A4(v154, v567, v153, v632, v621, v148, v152, v569, v592);
                        *(float *)&double v155 = v150;
                        double v156 = sub_1DDB1F2A4(v154, v565, v155, v632, v621, v148, v152, v571, v594);
                        *(float *)&double v156 = v150;
                        sub_1DDB1F2A4(v154, v563, v156, v632, v621, v148, v152, v597, v596);
                        if (v580)
                        {
                          unsigned int v157 = llround(*(float *)(v3 + 296) * 4096.0);
                          if ((unint64_t)(v580 - v134) > 0x1F)
                          {
                            uint64_t v160 = 0;
                            int32x4_t v161 = vdupq_n_s32(v157);
                            v162.i64[0] = 0xFFFF0000FFFFLL;
                            v162.i64[1] = 0xFFFF0000FFFFLL;
                            do
                            {
                              int32x4_t v163 = *(int32x4_t *)(v134 + v160);
                              uint16x8_t v164 = *(uint16x8_t *)(v134 + v160 + 16);
                              v165.i64[0] = 0x80000000800;
                              v165.i64[1] = 0x80000000800;
                              int32x4_t v166 = vmlaq_s32(v165, v161, (int32x4_t)vmovl_high_u16((uint16x8_t)v163));
                              v167.i64[0] = 0x80000000800;
                              v167.i64[1] = 0x80000000800;
                              int32x4_t v168 = vmlaq_s32(v167, v161, (int32x4_t)vmovl_u16(*(uint16x4_t *)v163.i8));
                              v163.i64[0] = 0x80000000800;
                              v163.i64[1] = 0x80000000800;
                              v169.i64[0] = 0x80000000800;
                              v169.i64[1] = 0x80000000800;
                              unint64_t v170 = (int16x8_t *)(v580 + v160);
                              *unint64_t v170 = vuzp1q_s16((int16x8_t)vminq_s32(vshrq_n_s32(v168, 0xCuLL), v162), (int16x8_t)vminq_s32(vshrq_n_s32(v166, 0xCuLL), v162));
                              v170[1] = vuzp1q_s16((int16x8_t)vminq_s32(vshrq_n_s32(vmlaq_s32(v169, v161, (int32x4_t)vmovl_u16(*(uint16x4_t *)v164.i8)), 0xCuLL), v162), (int16x8_t)vminq_s32(vshrq_n_s32(vmlaq_s32(v163, v161, (int32x4_t)vmovl_high_u16(v164)), 0xCuLL), v162));
                              v160 += 32;
                            }
                            while (v160 != 0x20000);
                          }
                          else
                          {
                            for (uint64_t j = 0; j != 0x20000; j += 2)
                            {
                              int v159 = (int)(*(unsigned __int16 *)(v134 + j) * v157 + 2048) >> 12;
                              if (v159 >= 0xFFFF) {
                                LOWORD(v159) = -1;
                              }
                              *(_WORD *)(v580 + j) = v159;
                            }
                          }
                        }
                        unsigned int v622 = *(_DWORD *)(v3 + 4);
                        if (*(unsigned char *)(v3 + 8))
                        {
                          if (v622 - 5 > 3) {
                            uint64_t v171 = &byte_1EAB8AF58;
                          }
                          else {
                            uint64_t v171 = off_1E6D05490[v622 - 5];
                          }
                          unsigned int v172 = llroundf(v616 + (float)(v150 * *(float *)(v3 + 12)));
                          unsigned int v173 = llroundf(v616);
                          if (v173 == v172) {
                            unsigned int v173 = v172 - 1;
                          }
                          unsigned int v174 = llroundf(v616 + v150);
                          if (*(unsigned char *)(v3 + 9)) {
                            unsigned int v175 = v174;
                          }
                          else {
                            unsigned int v175 = 0;
                          }
                          unsigned int v176 = 7u >> *v171;
                          unsigned int v177 = llroundf(v150);
                          unsigned int v178 = llround(65536.0 / (float)(int)(v172 - v173));
                          uint64_t v656 = sub_1DDB1F40C;
                          int v661 = (8 * v172) | 4;
                          unsigned int v662 = v173;
                          if (v176) {
                            uint64_t v179 = 4;
                          }
                          else {
                            uint64_t v179 = 5;
                          }
                          unsigned int v663 = v175;
                          unsigned int v664 = v178;
                          int v665 = 2 * v177;
                          uint64_t v666 = v179;
                          int v617 = 1;
                        }
                        else
                        {
                          int v617 = 0;
                        }
                        if (v622 == 8 || v622 == 6)
                        {
                          uint64_t v180 = 0;
                          int v181 = 0;
                          float v182 = *(float *)(v3 + 40);
                          int v633 = v924;
                          DWORD1(v931[0]) = llroundf(v592);
                          int v550 = DWORD1(v931[0]);
                          LODWORD(v931[0]) = DWORD1(v931[0]);
                          HIDWORD(v931[0]) = llroundf(v594);
                          int v548 = HIDWORD(v931[0]);
                          DWORD2(v931[0]) = HIDWORD(v931[0]);
                          DWORD1(v931[1]) = llroundf(v596);
                          int v546 = DWORD1(v931[1]);
                          LODWORD(v931[1]) = DWORD1(v931[1]);
                          v183.f64[0] = v601;
                          v184.f64[0] = v604;
                          v185.f64[0] = v603;
                          v183.f64[1] = v569 * 16.0;
                          float64x2_t v186 = (float64x2_t)vdupq_n_s64(0x40C0000000000000uLL);
                          int32x2_t v187 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(v183, v186))));
                          v184.f64[1] = v571 * 16.0;
                          int32x2_t v188 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(v184, v186))));
                          *(int32x2_t *)&long long v936 = v187;
                          *((int32x2_t *)&v936 + 1) = v188;
                          v185.f64[1] = v597 * 16.0;
                          *(int32x2_t *)&v183.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(v185, v186))));
                          int v598 = LODWORD(v183.f64[0]);
                          *(float64_t *)&long long v937 = v183.f64[0];
                          do
                          {
                            if (!v672[v180])
                            {
                              uint64_t v189 = *(_WORD **)&v633[1].__opaque[8 * v181];
                              int v190 = *((_DWORD *)&v936 + v180);
                              v672[v180] = v189;
                              uint64_t v191 = *((unsigned int *)v931 + (v180 >> 1));
                              uint64_t v192 = (int)v191;
                              uint64_t v193 = v180 + 1;
                              if (v180 != 5)
                              {
                                if (*((_DWORD *)v931 + (v193 >> 1)) == v191
                                  && *((_DWORD *)&v936 + v193) == v190)
                                {
                                  v672[v193] = v189;
                                }
                                uint64_t v194 = v180 + 2;
                                if (v180 != 4)
                                {
                                  if (*((_DWORD *)v931 + (v194 >> 1)) == v191
                                    && *((_DWORD *)&v936 + v194) == v190)
                                  {
                                    v672[v194] = v189;
                                  }
                                  uint64_t v195 = v180 + 3;
                                  if (v180 != 3)
                                  {
                                    if (*((_DWORD *)v931 + (v195 >> 1)) == v191
                                      && *((_DWORD *)&v936 + v195) == v190)
                                    {
                                      v672[v195] = v189;
                                    }
                                    uint64_t v196 = v180 + 4;
                                    if (v180 != 2)
                                    {
                                      if (*((_DWORD *)v931 + (v196 >> 1)) == v191
                                        && *((_DWORD *)&v936 + v196) == v190)
                                      {
                                        v672[v196] = v189;
                                      }
                                      uint64_t v197 = v180 + 5;
                                      if (v180 != 1
                                        && *((_DWORD *)v931 + (v197 >> 1)) == v191
                                        && *((_DWORD *)&v936 + v197) == v190)
                                      {
                                        v672[v197] = v189;
                                      }
                                    }
                                  }
                                }
                              }
                              ++v181;
                              if ((int)v191 <= 0 || (bzero(v189, 2 * v191), !WORD1(v191)))
                              {
                                uint64_t v198 = (uint64_t)(int)v191 << 32;
                                int v199 = 4096;
                                uint64_t v200 = 131070 - 2 * (int)v191;
                                do
                                {
                                  v189[v192] = v199 >> 13;
                                  int v201 = v192 + 1;
                                  v200 -= 2;
                                  v198 += 0x100000000;
                                  if (v192 > 65534) {
                                    break;
                                  }
                                  v199 += v190;
                                  ++v192;
                                }
                                while (v199 <= 0xFFFFFFF);
                                if (v201 < 0x10000) {
                                  memset_pattern16((char *)v189 + (v198 >> 31), &unk_1DDBFE350, (v200 & 0x1FFFFFFFELL) + 2);
                                }
                              }
                            }
                            ++v180;
                          }
                          while (v180 != 6);
                          v617 |= 2u;
                          double v667 = sub_1DDB1FA58;
                          int v673 = v550;
                          int v674 = v548;
                          int v675 = v546;
                          int32x2_t v676 = vzip1_s32(v187, v188);
                          float v202 = *(float *)(v3 + 404);
                          int v677 = v598;
                          unsigned int v678 = vcvtas_u32_f32(v182 * v202);
                          unsigned int v679 = vcvtad_u64_f64(33554432.0 / (float)(llroundf(v202) - v678));
                        }
                        if (v622 == 6 || v622 == 8)
                        {
LABEL_394:
                          if (v622 <= 7 && ((1 << v622) & 0xB0) != 0 && *(unsigned char *)(v3 + 44))
                          {
                            int v228 = (int)(float)(v601 * (float)(*(float *)(v3 + 404) - *(float *)(v3 + 388)));
                            int v229 = (int)(float)(v603 * (float)(*(float *)(v3 + 412) - *(float *)(v3 + 396)));
                            int v230 = (int)(float)(*(float *)(v3 + 48)
                                              * (float)(int)(float)(v604
                                                                  * (float)(*(float *)(v3 + 408) - *(float *)(v3 + 392))));
                            if (v230 >= v228) {
                              int v230 = (int)(float)(v601 * (float)(*(float *)(v3 + 404) - *(float *)(v3 + 388)));
                            }
                            if (v230 >= v229) {
                              int v231 = (int)(float)(v603 * (float)(*(float *)(v3 + 412) - *(float *)(v3 + 396)));
                            }
                            else {
                              int v231 = v230;
                            }
                            int v232 = 819 * v229 + 1023;
                            if (819 * v229 >= 0) {
                              int v232 = 819 * v229;
                            }
                            int v233 = sub_1DDB207EC;
                            if (v654 == 4) {
                              int v233 = sub_1DDB20048;
                            }
                            v685[16] = v233;
                            int v690 = 819 * v228 / 1024;
                            int v691 = 819 * v231 / 1024;
                            int v692 = v232 >> 10;
                            int v693 = v228;
                            v617 |= 8u;
                            int v694 = v231;
                            int v695 = v229;
                          }
                          if (*(unsigned char *)(v3 + 52))
                          {
                            v617 |= 0x10u;
                            uint64_t v701 = v627;
                            if ((v653 - 4) > 4) {
                              int v234 = 0;
                            }
                            else {
                              int v234 = off_1E6D054F0[v653 - 4];
                            }
                            unint64_t v702 = v234;
                            uint64_t v703 = v582;
                            uint64_t v704 = v572;
                            uint64_t v705 = v584;
                            uint64_t v706 = v567;
                            uint64_t v707 = v565;
                            char v708 = v563;
                            unint64_t v696 = sub_1DDB21300;
                          }
                          int v235 = *(unsigned __int8 *)(v3 + 72);
                          int v236 = *(unsigned __int8 *)(v3 + 100);
                          if (!*(unsigned char *)(v3 + 72))
                          {
                            if (!*(unsigned char *)(v3 + 100)) {
                              goto LABEL_416;
                            }
                            int v236 = 1;
                          }
                          v617 |= 0x20u;
                          double v709 = sub_1DDB21E80;
                          int v713 = v235;
                          long long v714 = *(_OWORD *)(v3 + 76);
                          int v715 = v236;
                          uint64_t v716 = *(void *)(v3 + 104);
                          uint64_t v237 = *(void *)(v3 + 92);
                          *(void *)&long long v238 = (int)v237;
                          *((void *)&v238 + 1) = SHIDWORD(v237);
                          long long v717 = v238;
LABEL_416:
                          uint64_t v718 = sub_1DDB22654;
                          uint64_t v722 = 0x15500000AACLL;
                          int v723 = 848;
                          uint64_t v724 = v627;
                          int v239 = *(_DWORD *)(v3 + 140);
                          if (v239)
                          {
                            unsigned int v240 = llround(*(float *)(v3 + 156) * 4096.0);
                            int v241 = llround(*(float *)(v3 + 148) * 65535.0);
                            uint64_t v725 = sub_1DDB23724;
                            unsigned int v730 = v240;
                            if (v241 >= 0x7FFF) {
                              int v242 = 0x7FFF;
                            }
                            else {
                              int v242 = v241;
                            }
                            int v731 = v242;
                            uint64_t v732 = v627;
                            int v243 = v617 | 0xC0;
                            uint64_t v733 = v610;
                            uint64_t v734 = v608;
                          }
                          else
                          {
                            int v243 = v617 | 0x40;
                          }
                          unsigned int v244 = v654 - 5;
                          if ((v654 - 5) > 3) {
                            uint64_t v245 = &byte_1EAB8AF58;
                          }
                          else {
                            uint64_t v245 = off_1E6D054B0[v244];
                          }
                          if (v654 == 4) {
                            int v246 = 3;
                          }
                          else {
                            int v246 = -3;
                          }
                          unsigned int v247 = llround(*(float *)(v3 + 200) * 65536.0);
                          uint64_t v248 = 2;
                          if (v245[10] == 6) {
                            uint64_t v248 = 3;
                          }
                          int v249 = 2 * (v245[v248 + 8] != 0);
                          uint64_t v250 = sub_1DDB23F28;
                          if (v654 == 6) {
                            uint64_t v250 = sub_1DDB23A4C;
                          }
                          uint64_t v735 = v250;
                          unsigned int v739 = v247;
                          int v740 = v246;
                          int v741 = v249;
                          uint64_t v742 = v248;
                          int v251 = *(_DWORD *)(v3 + 208);
                          if ((v653 - 5) >= 4)
                          {
                            int v252 = 0;
                            if (v653 == 4)
                            {
                              uint64_t v254 = &byte_1EAB8AF58;
                              int v253 = 1;
                              int v255 = 1;
                              goto LABEL_443;
                            }
                          }
                          else
                          {
                            int v252 = 1;
                          }
                          if ((v653 - 7) >= 2)
                          {
                            if (v653 == 6)
                            {
                              int v253 = 0;
                              uint64_t v254 = &byte_1EAB8AF78;
                              goto LABEL_442;
                            }
                            if (v653 != 5)
                            {
                              int v253 = 0;
                              uint64_t v254 = 0;
                              goto LABEL_442;
                            }
                          }
                          int v253 = 0;
                          uint64_t v254 = &byte_1EAB8AF68;
LABEL_442:
                          int v255 = v252;
LABEL_443:
                          unsigned int v256 = llround(*(float *)(v3 + 204) * 65536.0);
                          uint64_t v743 = sub_1DDB24470;
                          int v747 = v251;
                          uint64_t v748 = v610;
                          uint64_t v749 = v612;
                          uint64_t v750 = v608;
                          uint64_t v751 = v627;
                          v752 = v254;
                          int v753 = v255;
                          int v754 = v252;
                          int v755 = v253;
                          unsigned int v756 = v256;
                          unsigned int v257 = llround(*(float *)(v3 + 112) * 65535.0);
                          unsigned int v258 = 6 * v257 * v257;
                          if (v258 >= 0x1000)
                          {
                            int v261 = -1;
                            int v262 = v258;
                            do
                            {
                              unsigned int v263 = v262 >> 13;
                              v262 >>= 1;
                              ++v261;
                            }
                            while (v263);
                            int v260 = 1 << v261;
                            int v259 = v261 + 1;
                          }
                          else
                          {
                            int v259 = 0;
                            int v260 = 0;
                          }
                          int v264 = *(_DWORD *)(v586 + 4 * ((int)(v260 + v258) >> v259));
                          unsigned int v265 = llround(*(float *)(v3 + 116) * 4096.0);
                          uint64_t v757 = sub_1DDB28670;
                          uint64_t v762 = v586;
                          uint64_t v763 = v612;
                          uint64_t v764 = v627;
                          int v765 = v259;
                          int v766 = v260;
                          unsigned int v767 = (v264 + 1024) >> 11;
                          unsigned int v768 = v258;
                          unsigned int v769 = v265;
                          if (v239)
                          {
                            float v266 = *(float *)(v3 + 156);
                            int v267 = *(_DWORD *)(v3 + 144);
                            long long v782 = xmmword_1DDBFE260;
                            long long v783 = xmmword_1DDBFE270;
                            long long v784 = xmmword_1DDBFE280;
                            long long v785 = xmmword_1DDBFE290;
                            long long v786 = xmmword_1DDBFE2A0;
                            long long v787 = xmmword_1DDBFE2B0;
                            int v788 = 1365;
                            int v268 = v243 | 0xF00;
                            uint64_t v770 = sub_1DDB28A2C;
                            unsigned int v775 = llround(v266 * 4096.0);
                            int v776 = 1311;
                            int v777 = v267;
                            uint64_t v778 = v582;
                            uint64_t v779 = v572;
                            uint64_t v780 = v584;
                            uint64_t v781 = v627;
                          }
                          else
                          {
                            int v268 = v243 | 0x700;
                          }
                          if (*(unsigned char *)(v3 + 160))
                          {
                            int v269 = *(unsigned __int8 *)(v3 + 161);
                            int v270 = *(unsigned __int8 *)(v3 + 162);
                            int v271 = *(unsigned __int8 *)(v3 + 163);
                            float v272 = *(float *)(v3 + 184);
                            unsigned int v273 = *(unsigned __int16 *)(v610 + 131070) * *(unsigned __int16 *)(v610 + 131070)
                                 + *(unsigned __int16 *)(v612 + 131070) * *(unsigned __int16 *)(v612 + 131070)
                                 + *(unsigned __int16 *)(v608 + 131070) * *(unsigned __int16 *)(v608 + 131070);
                            if (v273 <= 1) {
                              unsigned int v274 = 1;
                            }
                            else {
                              unsigned int v274 = *(unsigned __int16 *)(v610 + 131070) * *(unsigned __int16 *)(v610 + 131070)
                            }
                                   + *(unsigned __int16 *)(v612 + 131070) * *(unsigned __int16 *)(v612 + 131070)
                                   + *(unsigned __int16 *)(v608 + 131070) * *(unsigned __int16 *)(v608 + 131070);
                            float v275 = *(float *)(v3 + 172) * *(float *)(v3 + 172);
                            signed int v276 = llroundf(v275 * 1024.0);
                            int v277 = 10;
                            if (v273)
                            {
                              signed int v278 = 0xFFFFFFFF / v274;
                              if (v278 < v276)
                              {
                                float v279 = 1024.0;
                                do
                                {
                                  float v279 = v279 * 0.5;
                                  --v277;
                                  signed int v276 = llroundf(v275 * v279);
                                }
                                while (v278 < v276);
                              }
                            }
                            v268 |= 0x1000u;
                            unsigned int v280 = llround(*(float *)(v3 + 176) * 65536.0);
                            unsigned int v281 = llround(*(float *)(v3 + 180) * 65536.0);
                            int v282 = v280 * v280;
                            int v283 = (int)(v281 * v281 - v280 * v280 + 64) >> 7;
                            signed int v284 = vcvtms_s32_f32(*(float *)(v3 + 164));
                            signed int v285 = vcvtms_s32_f32(*(float *)(v3 + 168));
                            if (v285 <= v284) {
                              signed int v286 = v284;
                            }
                            else {
                              signed int v286 = v285;
                            }
                            uint64_t v287 = v922[12];
                            if (v654 == 4) {
                              int v288 = 80;
                            }
                            else {
                              int v288 = 5;
                            }
                            unsigned int v789 = sub_1DDB293D4;
                            uint64_t v794 = v627;
                            uint64_t v795 = v610;
                            uint64_t v796 = v612;
                            uint64_t v797 = v608;
                            signed int v798 = v276;
                            int v799 = v277;
                            int v800 = v282;
                            int v801 = v283;
                            signed int v802 = v284;
                            signed int v803 = v286;
                            uint64_t v806 = v287;
                            double v289 = v272 * 65536.0;
                            if (!v271) {
                              double v289 = 4294967300.0;
                            }
                            int v804 = v269;
                            unsigned int v807 = llround(v289);
                            int v808 = v288;
                            uint64_t v809 = sub_1DDB294B0;
                            if (v270)
                            {
                              int v805 = v269;
                              int v804 = 0;
                              uint64_t v809 = sub_1DDB2AD84;
                              int v290 = sub_1DDB294B0;
                            }
                            else
                            {
                              int v290 = 0;
                            }
                            uint64_t v810 = v290;
                          }
                          int v291 = *(unsigned __int8 *)(v3 + 228);
                          if (*(unsigned char *)(v3 + 240)) {
                            v291 |= 0xAu;
                          }
                          if (*(unsigned char *)(v3 + 212)) {
                            v291 |= 4u;
                          }
                          if ((v654 - 7) < 2) {
                            goto LABEL_478;
                          }
                          if (v654 == 6)
                          {
                            v295.i32[0] = *(_DWORD *)(v3 + 216);
                            v295.i32[1] = *(_DWORD *)(v3 + 232);
                            int32x2_t v293 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v295), (float64x2_t)xmmword_1DDBFE2C0))));
                            unsigned int v292 = llround(*(float *)(v3 + 244) * 65536.0);
                            v291 |= 0x10u;
                            int v294 = &byte_1EAB8AF78;
                          }
                          else
                          {
                            if (v654 == 5)
                            {
LABEL_478:
                              unsigned int v292 = 0;
                              int32x2_t v293 = 0;
                              int v294 = &byte_1EAB8AF68;
                              goto LABEL_481;
                            }
                            unsigned int v292 = 0;
                            int32x2_t v293 = 0;
                            int v294 = &byte_1EAB8AF58;
                          }
LABEL_481:
                          if (*(unsigned char *)(v3 + 212)) {
                            int v296 = 2;
                          }
                          else {
                            int v296 = 255;
                          }
                          if (*v294 == 6) {
                            uint64_t v297 = 5;
                          }
                          else {
                            uint64_t v297 = 4;
                          }
                          unsigned int v298 = sub_1DDB2C0C0;
                          if (v654 == 6) {
                            unsigned int v298 = sub_1DDB2BB14;
                          }
                          uint64_t v811 = v298;
                          int v817 = v291;
                          uint64_t v816 = v297;
                          int v818 = v296;
                          int32x2_t v819 = v293;
                          unsigned int v820 = v292;
                          if (v622 == 6)
                          {
                            if (*(unsigned char *)(v3 + 253))
                            {
                              unsigned int v299 = llround(*(float *)(v3 + 256) * 1024.0);
                              uint64_t v821 = sub_1DDB2C534;
                              int v300 = v268 | 0x6000;
                              unsigned int v826 = v299;
                              uint64_t v827 = v627;
                            }
                            else
                            {
                              int v300 = v268 | 0x2000;
                            }
                          }
                          else
                          {
                            int v300 = v268 | 0xA000;
                            if (v244 > 3) {
                              int v301 = &byte_1EAB8AF58;
                            }
                            else {
                              int v301 = off_1E6D054D0[v244];
                            }
                            uint64_t v828 = sub_1DDB2C7EC;
                            uint64_t v833 = v627;
                            BOOL v834 = *v301 != 6;
                            if (v622 != 8) {
                              goto LABEL_499;
                            }
                          }
                          v300 |= 0x10000u;
                          int v302 = *(_DWORD *)(v3 + 268);
                          uint64_t v835 = sub_1DDB2C934;
                          int v840 = v302;
LABEL_499:
                          if (*(unsigned char *)(v3 + 64))
                          {
                            uint64_t v303 = 0;
                            uint64_t v304 = *(void *)&v924[4].__opaque[48];
                            int32x4_t v305 = vdupq_n_s32(llround(*(float *)(v3 + 68) * 65536.0));
                            v306.i64[0] = 0x1900000019;
                            v306.i64[1] = 0x1900000019;
                            unsigned int v307 = v572;
                            do
                            {
                              uint16x8_t v308 = *v307++;
                              v309.i64[0] = 0x800000008000;
                              v309.i64[1] = 0x800000008000;
                              v310.i64[0] = 0x800000008000;
                              v310.i64[1] = 0x800000008000;
                              int32x4_t v311 = vshrq_n_s32(vmlaq_s32(v310, v305, (int32x4_t)vmovl_u16(*(uint16x4_t *)v308.i8)), 0x10uLL);
                              int32x4_t v312 = vshrq_n_s32(vmlaq_s32(v309, v305, (int32x4_t)vmovl_high_u16(v308)), 0x10uLL);
                              v309.i64[0] = 0x1000000010;
                              v309.i64[1] = 0x1000000010;
                              int32x4_t v313 = vmlaq_s32(v309, vmulq_s32(v312, v312), v306);
                              v312.i64[0] = 0x1000000010;
                              v312.i64[1] = 0x1000000010;
                              uint64_t v314 = (int32x4_t *)(v304 + v303);
                              *uint64_t v314 = vshrq_n_s32(vmlaq_s32(v312, vmulq_s32(v311, v311), v306), 5uLL);
                              v314[1] = vshrq_n_s32(v313, 5uLL);
                              v303 += 32;
                            }
                            while (v303 != 0x40000);
                            uint64_t v315 = 0;
                            uint64_t v841 = sub_1DDB2D4D4;
                            uint64_t v846 = v627;
                            uint64_t v847 = v304;
                            uint64_t v316 = v848;
                            uint64_t v317 = -48;
                            do
                            {
                              unsigned __int16 v318 = v315++ + 0x4000;
                              *(v316 - 1) = v318 / (unsigned __int16)(v317 + 49);
                              *uint64_t v316 = (unsigned __int16)(v315 + 0x4000) / (unsigned __int16)(v317 + 50);
                              v316 += 2;
                              v317 += 2;
                            }
                            while (v317);
                            v848[47] = 334;
                            v300 |= 0x20000u;
                            if (*(void *)&v606[3].__opaque[40] == *(void *)&v606[4].__opaque[48] + 0x20000) {
                              *(void *)&v606[3].__opaque[40] = 0;
                            }
                          }
                          if (*(unsigned char *)(v3 + 272))
                          {
                            uint64_t v849 = sub_1DDB2E9D8;
                            uint64_t v854 = v627;
                            uint64_t v855 = v580;
                            float v319 = *(float *)(v3 + 280) + *(float *)(v3 + 280);
                            float v320 = v319 * 65536.0;
                            BOOL v321 = v319 < 0.0;
                            float v322 = 0.0;
                            if (v321) {
                              float v320 = 0.0;
                            }
                            float v323 = roundf(v320);
                            if (v323 <= 65535.0)
                            {
                              char v325 = 16;
                            }
                            else
                            {
                              unsigned int v324 = 16;
                              do
                              {
                                float v320 = v320 * 0.5;
                                char v325 = v324 - 1;
                                float v323 = roundf(v320);
                              }
                              while (v323 > 65535.0 && v324-- > 1);
                            }
                            float v327 = *(float *)(v3 + 288);
                            if (v327 >= 0.0) {
                              float v322 = v327 * 65536.0;
                            }
                            float v328 = roundf(v322);
                            if (v328 <= 65535.0)
                            {
                              int v330 = 16;
                            }
                            else
                            {
                              unsigned int v329 = 16;
                              do
                              {
                                float v322 = v322 * 0.5;
                                int v330 = v329 - 1;
                                float v328 = roundf(v322);
                              }
                              while (v328 > 65535.0 && v329-- > 1);
                            }
                            v300 |= 0x40000u;
                            int v856 = (int)v328;
                            int v857 = v330;
                            float v332 = *(float *)(v3 + 292);
                            BOOL v858 = v332 <= 0.0;
                            sub_1DDB2EB20((float32x2_t *)v931, *(float *)(v3 + 276));
                            __int16 v866 = llround(*(float *)v931 * 65536.0);
                            __int16 v860 = v866;
                            __int16 v871 = llround(*((float *)v931 + 1) * 65536.0);
                            __int16 v867 = v871;
                            __int16 v865 = v871;
                            __int16 v861 = v871;
                            __int16 v870 = llround(*((float *)v931 + 2) * 65536.0);
                            __int16 v868 = v870;
                            __int16 v864 = v870;
                            __int16 v862 = v870;
                            float64x2_t v623 = (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL);
                            int16x4_t v333 = (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)v931 + 12)), v623))));
                            int16x4_t v334 = vuzp1_s16(v333, v333);
                            int16x4_t v869 = vzip1_s16(v334, vrev32_s16(v334));
                            int16x4_t v863 = v869;
                            if (v332 > 0.0)
                            {
                              sub_1DDB2EB20((float32x2_t *)v931, v332);
                              __int16 v878 = llround(*(float *)v931 * 65536.0);
                              __int16 v872 = v878;
                              __int16 v883 = llround(*((float *)v931 + 1) * 65536.0);
                              __int16 v879 = v883;
                              __int16 v877 = v883;
                              __int16 v873 = v883;
                              __int16 v882 = llround(*((float *)v931 + 2) * 65536.0);
                              __int16 v880 = v882;
                              __int16 v876 = v882;
                              __int16 v874 = v882;
                              int16x4_t v335 = (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)v931 + 12)), v623))));
                              int16x4_t v336 = vuzp1_s16(v335, v335);
                              int16x4_t v881 = vzip1_s16(v336, vrev32_s16(v336));
                              int16x4_t v875 = v881;
                            }
                            unsigned int v337 = 0;
                            uint64_t v338 = 0;
                            int v339 = (int)v323;
                            int v340 = llroundf(*(float *)(v3 + 284));
                            uint64_t v341 = *(void *)v924[3].__opaque;
                            uint64_t v859 = v341;
                            double v342 = (double)v340;
                            double v343 = (double)v340 * 0.75;
                            signed int v344 = vcvtmd_s64_f64(v343);
                            double v345 = v342 - v343;
                            int v346 = (int)(sqrt(v345 * v345 + (65535.0 - v343) * (65535.0 - v343)) - v345 + 0.5);
                            uint64_t v347 = 0xFFFFFFFF00000000;
                            while (1)
                            {
                              int v348 = v337 >> v325;
                              if (v337 >> v325 >= 0xFFFF) {
                                int v348 = 0xFFFF;
                              }
                              *(_WORD *)(v341 + 2 * v338) = v348;
                              if (v348 >= v344) {
                                break;
                              }
                              ++v338;
                              v347 += 0x100000000;
                              v337 += v339;
                              if (v338 == 0x10000) {
                                goto LABEL_548;
                              }
                            }
                            if ((int)v338 <= 0x10000)
                            {
                              int v349 = (unsigned __int16)~(_WORD)v346;
                              uint64_t v350 = v347 >> 32;
                              int64_t v351 = v347 & 0xFFFFFFFF00000000;
                              unsigned int v352 = v339 * HIDWORD(v347);
                              while (1)
                              {
                                unsigned int v353 = v352 >> v325;
                                if (v352 >> v325 >= 0xFFFF) {
                                  unsigned int v353 = 0xFFFF;
                                }
                                unsigned int v354 = v353
                                     - (int)(sqrt(v345 * v345 + ((double)v353 - v343) * ((double)v353 - v343))
                                           - v345
                                           + 0.5);
                                if (v349 == (unsigned __int16)v354) {
                                  break;
                                }
                                *(_WORD *)(v341 + 2 * v350++) = v354;
                                v351 += 0x100000000;
                                v352 += v339;
                                if (v350 == 0x10000) {
                                  goto LABEL_548;
                                }
                              }
                              if ((int)v350 < 0x10000)
                              {
                                uint64_t v355 = v351 >> 32;
                                unint64_t v356 = 0x10000 - (v351 >> 32);
                                if (v356 < 0x10) {
                                  goto LABEL_888;
                                }
                                int16x8_t v357 = vdupq_n_s16(v354);
                                v355 += v356 & 0xFFFFFFFFFFFFFFF0;
                                unint64_t v358 = (0x10000 - (int)v350) & 0xFFFFFFFFFFFFFFF0;
                                unint64_t v359 = (int16x8_t *)(v341 + 2 * (int)v350 + 16);
                                do
                                {
                                  v359[-1] = v357;
                                  *unint64_t v359 = v357;
                                  v359 += 2;
                                  v358 -= 16;
                                }
                                while (v358);
                                if (v356 != (v356 & 0xFFFFFFFFFFFFFFF0))
                                {
LABEL_888:
                                  do
                                    *(_WORD *)(v341 + 2 * v355++) = v354;
                                  while (v355 != 0x10000);
                                }
                              }
                            }
LABEL_548:
                            long long v884 = sub_1DDB2EE50;
                            long long v885 = sub_1DDB2F4E0;
                            long long v886 = sub_1DDB2FC80;
                            long long v887 = sub_1DDB3015C;
                            long long v888 = sub_1DDB3057C;
                          }
                          if (v925 <= 0) {
                            sub_1DDBF4DA0();
                          }
                          float64x2_t v360 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
                          long long v889 = sub_1DDB30DB0;
                          int v893 = v925;
                          unsigned int v894 = 0x10000u / v925;
                          uint64_t v895 = v627;
                          int v361 = *(unsigned __int8 *)(v3 + 420);
                          v362.i32[0] = *(_DWORD *)(v3 + 312);
                          __int32 v363 = *(_DWORD *)(v3 + 324);
                          unsigned int v364 = v651;
                          int v365 = v651[20].u8[0];
                          int v899 = (int)llround(v552 * 65535.0) >> 4;
                          int v366 = (int)llround(v555 * 65535.0) >> 4;
                          int v900 = v366;
                          int32x2_t v367 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v588), v360))));
                          int v368 = (int)llround(v553 * 65535.0) >> 4;
                          int v901 = v368;
                          int32x2_t v369 = vshr_n_s32(vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v590), v360)))), 4uLL);
                          int32x2_t v902 = v369;
                          int v370 = (int)llround(v559 * 65535.0) >> 4;
                          int v903 = v370;
                          int v371 = (int)llround(v557 * 65535.0) >> 4;
                          int v904 = v371;
                          int32x2_t v372 = vshr_n_s32(v367, 4uLL);
                          int32x2_t v905 = v372;
                          unsigned int v906 = v578;
                          unsigned int v907 = v576;
                          unsigned int v908 = v574;
                          if (v365)
                          {
                            unsigned int v373 = (v927 * v927 + 0x8000) >> 16;
                            unsigned int v374 = (HIDWORD(v926) * HIDWORD(v926) + 0x8000) >> 16;
                            unsigned int v375 = (v926 * v926 + 0x8000) >> 16;
                            unsigned int v376 = (v925 * v925 + 0x8000) >> 16;
                            int v377 = *(unsigned __int8 *)(v561 + (int)(v375 - v373));
                            int v378 = *(_DWORD *)(v586 + 4 * (int)(v375 - v373)) >> v377;
                            int v379 = *(unsigned __int8 *)(v561 + (int)(v376 - v374));
                            int v380 = *(_DWORD *)(v586 + 4 * (int)(v376 - v374)) >> v379;
                            v362.i32[1] = v363;
                            uint64_t v912 = v627;
                            int v913 = v378;
                            int v914 = 16 - v377;
                            unsigned int v915 = v373;
                            unsigned int v916 = v375;
                            int v917 = v380;
                            int v918 = 16 - v379;
                            unsigned int v919 = v374;
                            unsigned int v920 = v376;
                            int32x2_t v921 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v362), (float64x2_t)vdupq_n_s64(0x40B0000000000000uLL)))));
                          }
                          uint64_t v910 = v586;
                          uint64_t v911 = v561;
                          unsigned __int32 v381 = v369.i32[0] | v372.i32[0] | v366 | v368 | v370 | v371 | v574 | v576 | v578;
                          BOOL v382 = v381 == 0;
                          if (v381) {
                            __int16 v383 = (uint64_t (*)(uint64_t, void *))sub_1DDB352C0;
                          }
                          else {
                            __int16 v383 = sub_1DDB34388;
                          }
                          __int16 v384 = sub_1DDB364F0;
                          if (v382) {
                            __int16 v384 = sub_1DDB3622C;
                          }
                          if (v365) {
                            __int16 v384 = v383;
                          }
                          uint64_t v896 = v384;
                          uint64_t sig = v924[1].__sig;
                          if (*(_WORD *)(sig + 131070))
                          {
LABEL_560:
                            uint64_t v909 = sig;
                            int v655 = v300 | 0x180000;
                            if (v638)
                            {
                              unint64_t v657 = v642;
                              unint64_t v658 = v642;
                              unint64_t v659 = v641;
                              unint64_t v660 = v641;
                              unint64_t v668 = v642;
                              unint64_t v669 = v642;
                              unint64_t v670 = v641;
                              unint64_t v671 = v641;
                              unint64_t v681 = v642;
                              unint64_t v682 = v642;
                              unint64_t v683 = v641;
                              unint64_t v684 = v641;
                              unint64_t v686 = v642;
                              unint64_t v687 = v642;
                              unint64_t v688 = v641;
                              unint64_t v689 = v641;
                              unint64_t v697 = v642;
                              unint64_t v698 = v642;
                              unint64_t v699 = v641;
                              unint64_t v700 = v641;
                              unint64_t v710 = v642;
                              v711.i64[0] = v642;
                              v711.i64[1] = v641;
                              unint64_t v712 = v641;
                              unint64_t v719 = v642;
                              v720.i64[0] = v642;
                              v720.i64[1] = v641;
                              unint64_t v721 = v641;
                              unint64_t v726 = v642;
                              unint64_t v727 = v642;
                              unint64_t v728 = v641;
                              unint64_t v729 = v641;
                              unint64_t v736 = v642;
                              v737.i64[0] = v642;
                              v737.i64[1] = v641;
                              unint64_t v738 = v641;
                              unint64_t v744 = v642;
                              unint64_t v745 = v642;
                              v746.i64[0] = v641;
                              v746.i64[1] = v641;
                              unint64_t v758 = v642;
                              unint64_t v759 = v642;
                              unint64_t v760 = v641;
                              unint64_t v761 = v641;
                              unint64_t v771 = v642;
                              unint64_t v772 = v642;
                              unint64_t v773 = v641;
                              unint64_t v774 = v641;
                              unint64_t v790 = v642;
                              unint64_t v791 = v642;
                              unint64_t v792 = v641;
                              unint64_t v793 = v641;
                              uint64_t v812 = v642;
                              uint64_t v813 = v642;
                              uint64_t v814 = v641;
                              uint64_t v815 = v641;
                              uint64_t v822 = v642;
                              uint64_t v823 = v642;
                              uint64_t v824 = v641;
                              uint64_t v825 = v641;
                              uint64_t v829 = v642;
                              uint64_t v830 = v642;
                              uint64_t v831 = v641;
                              uint64_t v832 = v641;
                              uint64_t v836 = v642;
                              uint64_t v837 = v642;
                              unint64_t v838 = v641;
                              uint64_t v839 = v641;
                              uint64_t v842 = v642;
                              uint64_t v843 = v642;
                              uint64_t v844 = v641;
                              uint64_t v845 = v641;
                              uint64_t v850 = v642;
                              uint64_t v851 = v642;
                              unint64_t v852 = v641;
                              unint64_t v853 = v641;
                              uint64_t v890 = v642;
                              v891.i64[0] = v642;
                              v891.i64[1] = v641;
                              uint64_t v892 = v641;
                              v897.i64[0] = v642;
                              v897.i64[1] = v642;
                              v898.i64[0] = v641;
                              v898.i64[1] = v641;
                              *(int64x2_t *)&v640[16] = vdupq_n_s64(0x28uLL);
                              *(_OWORD *)uint64_t v640 = *(_OWORD *)&v640[16];
LABEL_826:
                              int v510 = sub_1DDB10968();
                              uint64_t v511 = v510;
                              unint64_t v512 = (v635 + 511) >> 9;
                              unint64_t v513 = (v620 + 255) >> 8;
                              uint64_t v636 = 0;
                              char v637 = 0;
                              if (v513 * v512 > v510)
                              {
                                if (v513 * v512 % v510)
                                {
                                  unint64_t v513 = (v513 + 1) & 0x1FFFFFFFFFFFFFELL;
                                  if (v513 * v512 % v510) {
                                    unint64_t v512 = (v512 + 1) & 0xFFFFFFFFFFFFFELL;
                                  }
                                }
                              }
                              unint64_t v514 = (v635 / v512 + 63) & 0xFFFFFFFFFFFFFFC0;
                              unint64_t v515 = (v620 / v513 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                              *(void *)&long long v639 = v514;
                              *((void *)&v639 + 1) = v515;
                              if (v514) {
                                unint64_t v514 = (v635 + v514 - 1) / v514 - 1;
                              }
                              if (v515) {
                                unint64_t v515 = (v620 + v515 - 1) / v515 - 1;
                              }
                              unint64_t v516 = *(void *)&v640[24] + *(void *)&v640[16];
                              if (*(void *)&v640[24] + *(void *)&v640[16] >= v615) {
                                unint64_t v516 = v615;
                              }
                              unint64_t v517 = *(void *)&v640[8] + *(void *)v640;
                              if (*(void *)&v640[8] + *(void *)v640 >= v614) {
                                unint64_t v517 = v614;
                              }
                              unint64_t v518 = v614 * v615;
                              unint64_t v519 = (v614 + v517 * v515) * (v615 + v516 * v514) - v614 * v615;
                              BOOL v520 = sub_1DDB108CC();
                              if (v511 == 1 || v520)
                              {
                                if (v518 >= 2 * v519)
                                {
LABEL_842:
                                  if ((v655 & 0x20) != 0)
                                  {
                                    char v638 = 1;
                                  }
                                  else if (!v638)
                                  {
                                    goto LABEL_849;
                                  }
                                  long long v639 = 0uLL;
                                  unint64_t v657 = v642;
                                  unint64_t v658 = v642;
                                  unint64_t v659 = v641;
                                  unint64_t v660 = v641;
                                  unint64_t v668 = v642;
                                  unint64_t v669 = v642;
                                  unint64_t v670 = v641;
                                  unint64_t v671 = v641;
                                  unint64_t v681 = v642;
                                  unint64_t v682 = v642;
                                  unint64_t v683 = v641;
                                  unint64_t v684 = v641;
                                  unint64_t v686 = v642;
                                  unint64_t v687 = v642;
                                  unint64_t v688 = v641;
                                  unint64_t v689 = v641;
                                  unint64_t v697 = v642;
                                  unint64_t v698 = v642;
                                  unint64_t v699 = v641;
                                  unint64_t v700 = v641;
                                  unint64_t v710 = v642;
                                  v711.i64[0] = v642;
                                  v711.i64[1] = v641;
                                  unint64_t v712 = v641;
                                  unint64_t v719 = v642;
                                  v720.i64[0] = v642;
                                  v720.i64[1] = v641;
                                  unint64_t v721 = v641;
                                  unint64_t v726 = v642;
                                  unint64_t v727 = v642;
                                  unint64_t v728 = v641;
                                  unint64_t v729 = v641;
                                  unint64_t v736 = v642;
                                  v737.i64[0] = v642;
                                  v737.i64[1] = v641;
                                  unint64_t v738 = v641;
                                  unint64_t v744 = v642;
                                  unint64_t v745 = v642;
                                  v746.i64[0] = v641;
                                  v746.i64[1] = v641;
                                  unint64_t v758 = v642;
                                  unint64_t v759 = v642;
                                  unint64_t v760 = v641;
                                  unint64_t v761 = v641;
                                  unint64_t v771 = v642;
                                  unint64_t v772 = v642;
                                  unint64_t v773 = v641;
                                  unint64_t v774 = v641;
                                  unint64_t v790 = v642;
                                  unint64_t v791 = v642;
                                  unint64_t v792 = v641;
                                  unint64_t v793 = v641;
                                  uint64_t v812 = v642;
                                  uint64_t v813 = v642;
                                  uint64_t v814 = v641;
                                  uint64_t v815 = v641;
                                  uint64_t v822 = v642;
                                  uint64_t v823 = v642;
                                  uint64_t v824 = v641;
                                  uint64_t v825 = v641;
                                  uint64_t v829 = v642;
                                  uint64_t v830 = v642;
                                  uint64_t v831 = v641;
                                  uint64_t v832 = v641;
                                  uint64_t v836 = v642;
                                  uint64_t v837 = v642;
                                  unint64_t v838 = v641;
                                  uint64_t v839 = v641;
                                  uint64_t v842 = v642;
                                  uint64_t v843 = v642;
                                  uint64_t v844 = v641;
                                  uint64_t v845 = v641;
                                  uint64_t v850 = v642;
                                  uint64_t v851 = v642;
                                  unint64_t v852 = v641;
                                  unint64_t v853 = v641;
                                  uint64_t v890 = v642;
                                  v891.i64[0] = v642;
                                  v891.i64[1] = v641;
                                  uint64_t v892 = v641;
                                  v897.i64[0] = v642;
                                  v897.i64[1] = v642;
                                  v898.i64[0] = v641;
                                  v898.i64[1] = v641;
                                  *(int64x2_t *)&v640[16] = vdupq_n_s64(0x28uLL);
                                  *(_OWORD *)uint64_t v640 = *(_OWORD *)&v640[16];
LABEL_849:
                                  if (v639 == 0)
                                  {
                                    signed int v521 = 1;
                                  }
                                  else
                                  {
                                    if (v639) {
                                      unsigned int v522 = v639;
                                    }
                                    else {
                                      unsigned int v522 = v645;
                                    }
                                    unsigned int v523 = (v645 + v522 - 1) / v522;
                                    if (DWORD2(v639)) {
                                      unsigned int v524 = DWORD2(v639);
                                    }
                                    else {
                                      unsigned int v524 = v646;
                                    }
                                    signed int v521 = (v646 + v524 - 1) / v524 * v523;
                                  }
                                  sub_1DDB106E0((uint64_t)sub_1DDB1DAD4, v521, (uint64_t)&v636, (uint64_t)sub_1DDB1EAB4, (uint64_t)sub_1DDB1EE6C);
                                  unsigned int v525 = v924;
                                  if (v924)
                                  {
                                    if (v923)
                                    {
                                      atomic_fetch_add((atomic_uint *volatile)v923 + 4, 0xFFFFFFFF);
                                      long long v923 = 0;
                                    }
                                    pthread_mutex_destroy(v525);
                                    j__free_3(v525);
                                  }
                                  return 1;
                                }
                              }
                              else if (v519 / (v511 - 1) <= v518)
                              {
                                goto LABEL_842;
                              }
                              char v638 = 1;
                              goto LABEL_842;
                            }
                            uint64_t v393 = 2;
                            if (v654 == 4) {
                              unint64_t v394 = 2;
                            }
                            else {
                              unint64_t v394 = 3;
                            }
                            if (v654 == 4) {
                              unint64_t v395 = 3;
                            }
                            else {
                              unint64_t v395 = 2;
                            }
                            if ((v300 & 0x40000) != 0)
                            {
                              unint64_t v397 = v395 | 8;
                              LODWORD(v398) = v394 | 8;
                              uint64_t v396 = 11;
                              uint64_t v393 = 10;
                              uint64_t v613 = 12;
                              uint64_t v624 = v395 | 8;
                              uint64_t v618 = v394 | 8;
                            }
                            else
                            {
                              uint64_t v624 = 0;
                              uint64_t v613 = 0;
                              uint64_t v618 = 0;
                              uint64_t v396 = 3;
                              unint64_t v397 = v395;
                              LODWORD(v398) = v394;
                            }
                            if ((v300 & 0x20000) != 0)
                            {
                              v393 |= 5uLL;
                              v396 += 5;
                              v397 += 5;
                              unint64_t v398 = (v398 + 5);
                              char v607 = v393;
                              unint64_t v609 = v397;
                              char v611 = v396;
                              unint64_t v605 = v398;
                            }
                            else
                            {
                              char v607 = 0;
                              unint64_t v609 = 0;
                              char v611 = 0;
                              unint64_t v605 = 0;
                            }
                            if ((v300 & 0x10000) != 0)
                            {
                              unint64_t v401 = v393 + 2;
                              unint64_t v400 = v396 + 2;
                              unint64_t v399 = v397 + 2;
                              uint64_t v393 = v401;
                              uint64_t v396 = v400;
                              unint64_t v397 = v399;
                              LODWORD(v398) = v398 + 2;
                              unint64_t v394 = v398;
                              char v589 = v401;
                              char v593 = v400;
                              uint64_t v595 = v398;
                              unint64_t v395 = v399;
                            }
                            else
                            {
                              char v593 = 0;
                              uint64_t v595 = 0;
                              char v589 = 0;
                              unint64_t v399 = 0;
                              unint64_t v400 = 3;
                              unint64_t v401 = 2;
                            }
                            if ((v300 & 0x8000) != 0)
                            {
                              char v402 = v393 + 2;
                              v397 += 2;
                              unint64_t v398 = (v398 + 2);
                              if (v401 <= v393 + 2) {
                                v393 += 2;
                              }
                              else {
                                uint64_t v393 = v401;
                              }
                              char v581 = v396 + 2;
                              unint64_t v583 = v397;
                              if (v400 <= v396 + 2) {
                                v396 += 2;
                              }
                              else {
                                uint64_t v396 = v400;
                              }
                              if (v395 > v397) {
                                unint64_t v397 = v395;
                              }
                              unint64_t v579 = v398;
                              if (v394 > v398) {
                                unint64_t v398 = v394;
                              }
                              unint64_t v401 = v393;
                              unint64_t v400 = v396;
                              unint64_t v395 = v397;
                              unint64_t v394 = v398;
                            }
                            else
                            {
                              char v581 = 0;
                              unint64_t v583 = 0;
                              char v402 = 0;
                              unint64_t v579 = 0;
                            }
                            if ((v300 & 0x4000) != 0)
                            {
                              char v405 = v393 + 2;
                              unint64_t v404 = v396 + 2;
                              unint64_t v403 = v397 + 2;
                              unint64_t v406 = (v398 + 2);
                              if (v401 <= v393 + 2) {
                                v393 += 2;
                              }
                              else {
                                uint64_t v393 = v401;
                              }
                              if (v400 <= v404) {
                                v396 += 2;
                              }
                              else {
                                uint64_t v396 = v400;
                              }
                              if (v395 <= v403) {
                                v397 += 2;
                              }
                              else {
                                unint64_t v397 = v395;
                              }
                              if (v394 <= v406) {
                                unint64_t v394 = (v398 + 2);
                              }
                              LODWORD(v398) = v394;
                              unint64_t v401 = v393;
                              unint64_t v400 = v396;
                              unint64_t v395 = v397;
                            }
                            else
                            {
                              unint64_t v403 = 0;
                              LOWORD(v404) = 0;
                              char v405 = 0;
                              unint64_t v406 = 0;
                            }
                            unint64_t v407 = (v393 << 32) + 0x400000000;
                            unint64_t v408 = HIDWORD(v407);
                            unint64_t v409 = (v396 << 32) + 0x400000000;
                            unint64_t v410 = HIDWORD(v409);
                            unint64_t v411 = v397 + 4;
                            unint64_t v412 = (v398 + 4);
                            if (v401 <= HIDWORD(v407)) {
                              unint64_t v413 = HIDWORD(v407);
                            }
                            else {
                              unint64_t v413 = v401;
                            }
                            if (v400 <= v410) {
                              unint64_t v414 = HIDWORD(v409);
                            }
                            else {
                              unint64_t v414 = v400;
                            }
                            if (v395 <= v411) {
                              unint64_t v395 = v397 + 4;
                            }
                            if (v394 <= v412) {
                              unint64_t v394 = (v398 + 4);
                            }
                            if ((v300 & 0x1000) != 0)
                            {
                              signed int v419 = vcvtms_s32_f32(v364[20].f32[1]);
                              signed int v420 = vcvtms_s32_f32(v364[21].f32[0]);
                              if (v420 > v419) {
                                signed int v419 = v420;
                              }
                              if (v364[20].i8[2]) {
                                int v421 = 6;
                              }
                              else {
                                int v421 = 2;
                              }
                              int v422 = v421 + 2 * v419;
                              unint64_t v415 = v422;
                              if ((unint64_t)v422 <= 2) {
                                int v418 = 2;
                              }
                              else {
                                int v418 = v422;
                              }
                              uint64_t v423 = v418 + 4;
                              if ((v300 & 0x800) != 0) {
                                int v416 = v418;
                              }
                              else {
                                int v416 = 0;
                              }
                              if ((v300 & 0x800) == 0) {
                                uint64_t v423 = 0;
                              }
                              uint64_t v547 = v423;
                            }
                            else
                            {
                              unint64_t v415 = 0;
                              int v416 = (unsigned __int16)(v300 & 0x800) >> 10;
                              uint64_t v417 = 6;
                              if ((v300 & 0x800) == 0) {
                                uint64_t v417 = 0;
                              }
                              uint64_t v547 = v417;
                              int v418 = 2;
                            }
                            uint64_t v424 = v418 + 3;
                            unint64_t v425 = v424 & 0xFFFFFFFFFFFFFFFCLL;
                            unint64_t v426 = v424 & 0xFFFFFFFFFFFFFFFCLL | 1;
                            unint64_t v427 = v424 | 3;
                            if (v413 > v426) {
                              unint64_t v426 = v413;
                            }
                            v428.i64[0] = v414;
                            v428.i64[1] = v395;
                            if (v394 <= v427) {
                              LODWORD(v394) = v427;
                            }
                            int64x2_t v429 = vdupq_n_s64(v427);
                            int8x16_t v430 = (int8x16_t)vshrq_n_s64(vshlq_n_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v428, (uint64x2_t)v429), v428, (int8x16_t)v429), 0x20uLL), 0x20uLL);
                            unint64_t v431 = (int)v394;
                            if (v408 <= v415) {
                              unint64_t v432 = v415;
                            }
                            else {
                              unint64_t v432 = HIDWORD(v407);
                            }
                            if (v410 <= v415) {
                              unint64_t v433 = v415;
                            }
                            else {
                              unint64_t v433 = HIDWORD(v409);
                            }
                            if (v411 <= v415) {
                              unsigned int v434 = v415;
                            }
                            else {
                              unsigned int v434 = v397 + 4;
                            }
                            if (v415 <= v412) {
                              unsigned int v435 = v412;
                            }
                            else {
                              unsigned int v435 = v415;
                            }
                            unint64_t v436 = v432 << 32;
                            unint64_t v437 = v433 << 32;
                            if ((v300 & 0x1000) != 0) {
                              unint64_t v438 = v436;
                            }
                            else {
                              unint64_t v438 = v407;
                            }
                            if ((v300 & 0x1000) != 0) {
                              unint64_t v439 = v437;
                            }
                            else {
                              unint64_t v439 = v409;
                            }
                            if ((v300 & 0x1000) != 0) {
                              unsigned int v440 = v434;
                            }
                            else {
                              unsigned int v440 = v397 + 4;
                            }
                            if ((v300 & 0x1000) != 0) {
                              unsigned int v441 = v435;
                            }
                            else {
                              unsigned int v441 = v412;
                            }
                            unint64_t v442 = (uint64_t)(v438 + 0x300000000) >> 32;
                            unint64_t v443 = *(void *)&vadd_s32((int32x2_t)__PAIR64__(v441, v440), (int32x2_t)0x100000001) & 0xFFFFFFFEFFFFFFFELL;
                            int32x2_t v444 = vadd_s32((int32x2_t)v443, (int32x2_t)0x300000003);
                            v445.i64[0] = v444.i32[0];
                            v445.i64[1] = v444.i32[1];
                            int64x2_t v446 = v445;
                            int32x2_t v447 = vadd_s32((int32x2_t)v443, (int32x2_t)0x200000002);
                            v445.i64[0] = v447.i32[0];
                            v445.i64[1] = v447.i32[1];
                            int8x16_t v448 = (int8x16_t)v445;
                            if (v426 <= v442) {
                              unint64_t v449 = (uint64_t)(v438 + 0x300000000) >> 32;
                            }
                            else {
                              unint64_t v449 = v426;
                            }
                            if (v431 <= v446.i64[1]) {
                              unint64_t v431 = v446.u64[1];
                            }
                            unint64_t v450 = (uint64_t)(v438 + 0x400000000) >> 32;
                            v429.i64[0] = (uint64_t)(v439 + 0x300000000) >> 32;
                            int64x2_t v451 = vzip1q_s64(v429, v446);
                            int8x16_t v452 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v430, (uint64x2_t)v451), v430, (int8x16_t)v451);
                            v451.i64[0] = v439;
                            v451.i64[1] = v448.i64[0] << 32;
                            int64x2_t v453 = vshrq_n_s64(vaddq_s64(v451, (int64x2_t)xmmword_1DDBFE2D0), 0x20uLL);
                            unint64_t v454 = v448.i32[2] + 2;
                            if (v449 <= v450) {
                              unint64_t v455 = (uint64_t)(v438 + 0x400000000) >> 32;
                            }
                            else {
                              unint64_t v455 = v449;
                            }
                            int64x2_t v456 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v452, (uint64x2_t)v453), v452, (int8x16_t)v453);
                            if (v431 <= v454) {
                              unint64_t v457 = v448.i32[2] + 2;
                            }
                            else {
                              unint64_t v457 = v431;
                            }
                            if ((v300 & 0x80) != 0)
                            {
                              unint64_t v458 = v416 + 1;
                              if (v455 <= v458) {
                                unint64_t v455 = v416 + 1;
                              }
                              int8x16_t v459 = (int8x16_t)vdupq_n_s64(v458);
                              int64x2_t v456 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v456, (uint64x2_t)v459), (int8x16_t)v456, v459);
                              if (v457 <= v458) {
                                unint64_t v457 = v416 + 1;
                              }
                            }
                            else
                            {
                              unint64_t v458 = 0;
                            }
                            unint64_t v460 = (uint64_t)((((v455 << 32) + 0x300000000) & 0xFFFFFFFC00000000) + 0x400000000) >> 32;
                            int32x4_t v461 = (int32x4_t)vshrq_n_s64(vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vshlq_n_s64(v456, 0x20uLL), vdupq_n_s64(0x300000000uLL)), (int8x16_t)vdupq_n_s64(0xFFFFFFFC00000000)), vdupq_n_s64(0x400000000uLL)), 0x20uLL);
                            unint64_t v462 = (uint64_t)((((v457 << 32) + 0x300000000) & 0xFFFFFFFC00000000) + 0x400000000) >> 32;
                            if (v455 <= v460) {
                              uint64_t v463 = (uint64_t)((((v455 << 32) + 0x300000000) & 0xFFFFFFFC00000000) + 0x400000000) >> 32;
                            }
                            else {
                              uint64_t v463 = v455;
                            }
                            int64x2_t v464 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v456, (uint64x2_t)v461), (int8x16_t)v456, (int8x16_t)v461);
                            if (v457 <= v462) {
                              uint64_t v465 = (uint64_t)((((v457 << 32) + 0x300000000) & 0xFFFFFFFC00000000) + 0x400000000) >> 32;
                            }
                            else {
                              uint64_t v465 = v457;
                            }
                            if ((v300 & 0x20) != 0) {
                              uint64_t v466 = v463;
                            }
                            else {
                              uint64_t v466 = 0;
                            }
                            uint64_t v554 = v466;
                            if ((v300 & 0x20) != 0) {
                              uint64_t v467 = v465;
                            }
                            else {
                              uint64_t v467 = 0;
                            }
                            uint64_t v558 = v467;
                            if ((v300 & 0x10) != 0)
                            {
                              uint64_t v468 = (int)v463 + 4;
                              int64x2_t v469 = vshrq_n_s64(vaddq_s64(vshlq_n_s64(v464, 0x20uLL), vdupq_n_s64(0x400000000uLL)), 0x20uLL);
                              uint64_t v465 = (int)v465 + 4;
                              uint64_t v549 = v469.i64[1];
                              uint64_t v551 = v469.i64[0];
                              uint64_t v463 = v468;
                              uint64_t v556 = v465;
                            }
                            else
                            {
                              uint64_t v468 = 0;
                              uint64_t v549 = 0;
                              uint64_t v551 = 0;
                              uint64_t v556 = 0;
                              int64x2_t v469 = v464;
                            }
                            if ((v300 & 8) != 0)
                            {
                              uint64_t v465 = (int)v465 + 2;
                              int64x2_t v469 = vshrq_n_s64(vaddq_s64(vshlq_n_s64(v469, 0x20uLL), vdupq_n_s64(0x200000000uLL)), 0x20uLL);
                              uint64_t v463 = (int)v463 + 2;
                              uint64_t v564 = v469.i64[0];
                              uint64_t v566 = v463;
                              uint64_t v568 = v469.i64[1];
                              uint64_t v570 = v465;
                              uint64_t v560 = 4;
                              uint64_t v562 = 7;
                            }
                            else
                            {
                              uint64_t v564 = 0;
                              uint64_t v566 = 0;
                              uint64_t v568 = 0;
                              uint64_t v570 = 0;
                              uint64_t v562 = 3;
                              uint64_t v560 = 3;
                            }
                            uint64_t v470 = v469.i64[1];
                            uint64_t v471 = v469.i64[0];
                            if ((v300 & 4) != 0) {
                              uint64_t v472 = v463;
                            }
                            else {
                              uint64_t v472 = 0;
                            }
                            if ((v300 & 4) == 0) {
                              uint64_t v471 = 0;
                            }
                            uint64_t v573 = v471;
                            if ((v300 & 4) == 0) {
                              uint64_t v470 = 0;
                            }
                            uint64_t v575 = v470;
                            if ((v300 & 4) != 0) {
                              uint64_t v473 = v465;
                            }
                            else {
                              uint64_t v473 = 0;
                            }
                            uint64_t v577 = v473;
                            if ((v300 & 2) != 0)
                            {
                              uint64_t v463 = (int)v463 + 2;
                              int64x2_t v469 = vshrq_n_s64(vaddq_s64(vshlq_n_s64(v469, 0x20uLL), (int64x2_t)xmmword_1DDBFE2E0), 0x20uLL);
                              uint64_t v465 = (int)v465 + 1;
                              uint64_t v585 = v469.i64[0];
                              uint64_t v587 = v465;
                              unint64_t v628 = v469.u64[1];
                              uint64_t v591 = v463;
                            }
                            else
                            {
                              uint64_t v591 = 0;
                              uint64_t v585 = 0;
                              uint64_t v587 = 0;
                              unint64_t v628 = 0;
                            }
                            uint64_t v474 = (int)v463 + 4;
                            uint64_t v475 = v469.i32[0] + 4;
                            uint64_t v476 = v469.i32[2] + 4;
                            int64x2_t v477 = vdupq_n_s64(4uLL);
                            unint64_t v941 = v397;
                            int64x2_t v897 = v477;
                            uint64_t v478 = (int)v465 + 4;
                            int64x2_t v898 = v477;
                            uint64_t v890 = 4;
                            if ((v300 & 1) == 0)
                            {
                              uint64_t v474 = 0;
                              uint64_t v475 = 0;
                            }
                            uint64_t v600 = v475;
                            if (v300) {
                              uint64_t v479 = v476;
                            }
                            else {
                              uint64_t v479 = 0;
                            }
                            uint64_t v602 = v479;
                            if (v300) {
                              uint64_t v480 = v478;
                            }
                            else {
                              uint64_t v480 = 0;
                            }
                            int64x2_t v891 = v477;
                            uint64_t v892 = 4;
                            if ((v300 & 0x40000) != 0)
                            {
                              uint64_t v850 = v613;
                              uint64_t v851 = v613;
                              unint64_t v852 = (v624 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                              unint64_t v853 = (v618 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                              if ((v300 & 0x20000) == 0)
                              {
LABEL_725:
                                if ((v300 & 0x10000) == 0) {
                                  goto LABEL_726;
                                }
                                goto LABEL_737;
                              }
                            }
                            else if ((v300 & 0x20000) == 0)
                            {
                              goto LABEL_725;
                            }
                            uint64_t v842 = (v607 + 3) & 0x1C;
                            uint64_t v843 = (v611 + 3) & 0x3C;
                            uint64_t v844 = (v609 + 3) & 0x1FFFFFFFCLL;
                            uint64_t v845 = (v605 + 3) & 0x1FFFFFFFCLL;
                            if ((v300 & 0x10000) == 0)
                            {
LABEL_726:
                              if ((v300 & 0x8000) == 0) {
                                goto LABEL_727;
                              }
                              goto LABEL_740;
                            }
LABEL_737:
                            if (v399 <= v628) {
                              unint64_t v399 = v628;
                            }
                            uint64_t v836 = (v589 + 3) & 0x3C;
                            uint64_t v837 = (v593 + 3) & 0x7C;
                            unint64_t v838 = (v399 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                            uint64_t v839 = (v595 + 3) & 0x1FFFFFFFCLL;
                            if ((v300 & 0x8000) == 0)
                            {
LABEL_727:
                              if ((v300 & 0x4000) == 0) {
                                goto LABEL_729;
                              }
                              goto LABEL_728;
                            }
LABEL_740:
                            uint64_t v829 = (v402 + 3) & 0x7C;
                            uint64_t v830 = (v581 + 3) & 0xFC;
                            uint64_t v831 = (v583 + 3) & 0x1FFFFFFFCLL;
                            uint64_t v832 = (v579 + 3) & 0x1FFFFFFFCLL;
                            if ((v300 & 0x4000) == 0)
                            {
LABEL_729:
                              uint64_t v812 = ((_WORD)v408 + 3) & 0x1FC;
                              uint64_t v813 = ((_WORD)v410 + 3) & 0x3FC;
                              uint64_t v814 = (v397 + 7) & 0x1FFFFFFFCLL;
                              uint64_t v815 = (v412 + 3) & 0x1FFFFFFFCLL;
                              if ((v300 & 0x1000) == 0) {
                                goto LABEL_746;
                              }
                              unint64_t v481 = (v415 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                              unint64_t v790 = v481;
                              unint64_t v791 = v481;
                              unint64_t v792 = v481;
                              unint64_t v793 = v481;
                              if (v481 <= *(void *)v640)
                              {
                                if (v481 <= *(void *)&v640[8])
                                {
LABEL_732:
                                  if (v481 > *(void *)&v640[16]) {
                                    goto LABEL_733;
                                  }
                                  goto LABEL_744;
                                }
                              }
                              else
                              {
                                *(void *)uint64_t v640 = (v415 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                if (v481 <= *(void *)&v640[8]) {
                                  goto LABEL_732;
                                }
                              }
                              *(void *)&v640[8] = (v415 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                              if (v481 > *(void *)&v640[16])
                              {
LABEL_733:
                                *(void *)&v640[16] = (v415 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                if (v481 <= *(void *)&v640[24])
                                {
LABEL_746:
                                  unint64_t v482 = (uint64_t)(v439 + 0x200000000) >> 32;
                                  if ((v300 & 0x800) != 0)
                                  {
                                    unint64_t v483 = (v547 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    unint64_t v771 = v483;
                                    unint64_t v772 = v483;
                                    unint64_t v773 = v483;
                                    unint64_t v774 = v483;
                                    if (v483 > *(void *)v640) {
                                      *(void *)uint64_t v640 = (v547 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    }
                                    if (v483 > *(void *)&v640[8]) {
                                      *(void *)&v640[8] = (v547 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    }
                                  }
                                  unint64_t v758 = v425 + 4;
                                  unint64_t v759 = (v427 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  unint64_t v760 = v759;
                                  unint64_t v761 = v759;
                                  if ((uint64_t)(v438 + 0x200000000) >> 32 > v442) {
                                    unint64_t v442 = (uint64_t)(v438 + 0x200000000) >> 32;
                                  }
                                  if (v482 <= (uint64_t)(v439 + 0x300000000) >> 32) {
                                    unint64_t v482 = (uint64_t)(v439 + 0x300000000) >> 32;
                                  }
                                  int64x2_t v484 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v448, (uint64x2_t)v446), v448, (int8x16_t)v446);
                                  unint64_t v744 = (v442 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  int64x2_t v485 = vdupq_n_s64(3uLL);
                                  unint64_t v745 = (v482 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  int8x16_t v486 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
                                  int8x16_t v746 = vandq_s8((int8x16_t)vaddq_s64(v484, v485), v486);
                                  unint64_t v487 = (v450 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  unint64_t v488 = (v454 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  unint64_t v738 = v488;
                                  *(void *)uint64_t v640 = v487;
                                  int32x4_t v489 = (int32x4_t)vandq_s8((int8x16_t)vaddq_s64(v453, v485), v486);
                                  int32x4_t v737 = v489;
                                  unint64_t v490 = v489.u64[1];
                                  *(int32x4_t *)&v640[8] = v489;
                                  unint64_t v491 = v489.i64[0];
                                  unint64_t v736 = v487;
                                  *(void *)&v640[24] = v488;
                                  if ((v300 & 0x80) == 0) {
                                    goto LABEL_760;
                                  }
                                  unint64_t v492 = (v458 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  unint64_t v726 = v492;
                                  unint64_t v727 = v492;
                                  unint64_t v728 = v492;
                                  unint64_t v729 = v492;
                                  if (v492 <= v487)
                                  {
                                    if (v492 <= v489.i64[0])
                                    {
LABEL_758:
                                      if (v492 > v489.i64[1]) {
                                        goto LABEL_759;
                                      }
                                      goto LABEL_763;
                                    }
                                  }
                                  else
                                  {
                                    *(void *)uint64_t v640 = (v458 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    unint64_t v487 = *(void *)v640;
                                    if (v492 <= v489.i64[0]) {
                                      goto LABEL_758;
                                    }
                                  }
                                  *(void *)&v640[8] = (v458 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  unint64_t v491 = *(void *)&v640[8];
                                  if (v492 > v489.i64[1])
                                  {
LABEL_759:
                                    *(void *)&v640[16] = (v458 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    unint64_t v490 = *(void *)&v640[16];
                                    if (v492 <= v488)
                                    {
LABEL_760:
                                      unint64_t v492 = (v454 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      goto LABEL_765;
                                    }
LABEL_764:
                                    *(void *)&v640[24] = (v458 + 3) & 0xFFFFFFFFFFFFFFFCLL;
LABEL_765:
                                    unint64_t v719 = v460;
                                    int32x4_t v720 = v461;
                                    unint64_t v721 = v462;
                                    if (v460 <= v487)
                                    {
                                      unint64_t v493 = v461.i64[0];
                                      if (v461.i64[0] <= v491)
                                      {
LABEL_767:
                                        uint64_t v494 = v461.i64[1];
                                        if (v461.i64[1] > v490) {
                                          goto LABEL_768;
                                        }
                                        goto LABEL_774;
                                      }
                                    }
                                    else
                                    {
                                      *(void *)uint64_t v640 = v460;
                                      unint64_t v487 = v460;
                                      unint64_t v493 = v461.i64[0];
                                      if (v461.i64[0] <= v491) {
                                        goto LABEL_767;
                                      }
                                    }
                                    *(void *)&v640[8] = v493;
                                    unint64_t v491 = v493;
                                    uint64_t v494 = v461.i64[1];
                                    if (v461.i64[1] > v490)
                                    {
LABEL_768:
                                      *(void *)&v640[16] = v494;
                                      unint64_t v490 = v494;
                                      if (v462 <= v492) {
                                        goto LABEL_769;
                                      }
                                      goto LABEL_775;
                                    }
LABEL_774:
                                    if (v462 <= v492)
                                    {
LABEL_769:
                                      if ((v300 & 0x20) == 0) {
                                        goto LABEL_770;
                                      }
                                      goto LABEL_776;
                                    }
LABEL_775:
                                    *(void *)&v640[24] = v462;
                                    unint64_t v492 = v462;
                                    if ((v300 & 0x20) == 0)
                                    {
LABEL_770:
                                      if ((v300 & 0x10) == 0) {
                                        goto LABEL_786;
                                      }
LABEL_777:
                                      unint64_t v495 = (v551 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      unint64_t v496 = (v549 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      unint64_t v697 = (v468 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      unint64_t v698 = v495;
                                      unint64_t v497 = (v556 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      unint64_t v699 = v496;
                                      unint64_t v700 = v497;
                                      if (v697 <= v487)
                                      {
                                        if (v495 <= v491)
                                        {
LABEL_779:
                                          if (v496 > v490) {
                                            goto LABEL_780;
                                          }
                                          goto LABEL_784;
                                        }
                                      }
                                      else
                                      {
                                        *(void *)uint64_t v640 = (v468 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                        unint64_t v487 = *(void *)v640;
                                        if (v495 <= v491) {
                                          goto LABEL_779;
                                        }
                                      }
                                      *(void *)&v640[8] = (v551 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      unint64_t v491 = *(void *)&v640[8];
                                      if (v496 > v490)
                                      {
LABEL_780:
                                        *(void *)&v640[16] = (v549 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                        unint64_t v490 = *(void *)&v640[16];
                                        if (v497 <= v492)
                                        {
LABEL_786:
                                          if ((v300 & 8) == 0) {
                                            goto LABEL_796;
                                          }
                                          unint64_t v498 = (v562 + v564) & 0xFFFFFFFFFFFFFFFCLL;
                                          unint64_t v499 = (v560 + v568) & 0xFFFFFFFFFFFFFFFCLL;
                                          unint64_t v686 = (v562 + v566) & 0xFFFFFFFFFFFFFFFCLL;
                                          unint64_t v687 = v498;
                                          unint64_t v500 = (v560 + v570) & 0xFFFFFFFFFFFFFFFCLL;
                                          unint64_t v688 = v499;
                                          unint64_t v689 = v500;
                                          if (v686 <= v487)
                                          {
                                            if (v498 <= v491)
                                            {
LABEL_789:
                                              if (v499 > v490) {
                                                goto LABEL_790;
                                              }
                                              goto LABEL_794;
                                            }
                                          }
                                          else
                                          {
                                            *(void *)uint64_t v640 = (v562 + v566) & 0xFFFFFFFFFFFFFFFCLL;
                                            unint64_t v487 = *(void *)v640;
                                            if (v498 <= v491) {
                                              goto LABEL_789;
                                            }
                                          }
                                          *(void *)&v640[8] = (v562 + v564) & 0xFFFFFFFFFFFFFFFCLL;
                                          unint64_t v491 = *(void *)&v640[8];
                                          if (v499 > v490)
                                          {
LABEL_790:
                                            *(void *)&v640[16] = (v560 + v568) & 0xFFFFFFFFFFFFFFFCLL;
                                            unint64_t v490 = *(void *)&v640[16];
                                            if (v500 <= v492)
                                            {
LABEL_796:
                                              if ((v300 & 4) == 0) {
                                                goto LABEL_806;
                                              }
                                              unint64_t v501 = (v573 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                              unint64_t v502 = (v575 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                              unint64_t v681 = (v472 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                              unint64_t v682 = v501;
                                              unint64_t v503 = (v577 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                              unint64_t v683 = v502;
                                              unint64_t v684 = v503;
                                              if (v681 <= v487)
                                              {
                                                if (v501 <= v491)
                                                {
LABEL_799:
                                                  if (v502 > v490) {
                                                    goto LABEL_800;
                                                  }
                                                  goto LABEL_804;
                                                }
                                              }
                                              else
                                              {
                                                *(void *)uint64_t v640 = (v472 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                unint64_t v487 = *(void *)v640;
                                                if (v501 <= v491) {
                                                  goto LABEL_799;
                                                }
                                              }
                                              *(void *)&v640[8] = (v573 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                              unint64_t v491 = *(void *)&v640[8];
                                              if (v502 > v490)
                                              {
LABEL_800:
                                                *(void *)&v640[16] = (v575 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                unint64_t v490 = *(void *)&v640[16];
                                                if (v503 <= v492)
                                                {
LABEL_806:
                                                  if ((v300 & 2) == 0) {
                                                    goto LABEL_816;
                                                  }
                                                  unint64_t v504 = (v585 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                  unint64_t v505 = (v628 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                  unint64_t v668 = (v591 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                  unint64_t v669 = v504;
                                                  unint64_t v506 = (v587 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                  unint64_t v670 = v505;
                                                  unint64_t v671 = v506;
                                                  if (v668 <= v487)
                                                  {
                                                    if (v504 <= v491)
                                                    {
LABEL_809:
                                                      if (v505 > v490) {
                                                        goto LABEL_810;
                                                      }
                                                      goto LABEL_814;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    *(void *)uint64_t v640 = (v591 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                    unint64_t v487 = *(void *)v640;
                                                    if (v504 <= v491) {
                                                      goto LABEL_809;
                                                    }
                                                  }
                                                  *(void *)&v640[8] = (v585 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                  unint64_t v491 = *(void *)&v640[8];
                                                  if (v505 > v490)
                                                  {
LABEL_810:
                                                    *(void *)&v640[16] = (v628 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                    unint64_t v490 = *(void *)&v640[16];
                                                    if (v506 <= v492)
                                                    {
LABEL_816:
                                                      if ((v300 & 1) == 0) {
                                                        goto LABEL_826;
                                                      }
                                                      unint64_t v507 = (v600 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      unint64_t v508 = (v602 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      unint64_t v657 = (v474 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      unint64_t v658 = v507;
                                                      unint64_t v509 = (v480 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      unint64_t v659 = v508;
                                                      unint64_t v660 = v509;
                                                      if (v657 <= v487)
                                                      {
                                                        if (v507 <= v491)
                                                        {
LABEL_819:
                                                          if (v508 > v490) {
                                                            goto LABEL_820;
                                                          }
                                                          goto LABEL_824;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        *(void *)uint64_t v640 = (v474 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                        if (v507 <= v491) {
                                                          goto LABEL_819;
                                                        }
                                                      }
                                                      *(void *)&v640[8] = (v600 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      if (v508 > v490)
                                                      {
LABEL_820:
                                                        *(void *)&v640[16] = (v602 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                        if (v509 <= v492) {
                                                          goto LABEL_826;
                                                        }
                                                        goto LABEL_825;
                                                      }
LABEL_824:
                                                      if (v509 <= v492) {
                                                        goto LABEL_826;
                                                      }
LABEL_825:
                                                      *(void *)&v640[24] = (v480 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      goto LABEL_826;
                                                    }
LABEL_815:
                                                    *(void *)&v640[24] = (v587 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                    unint64_t v492 = *(void *)&v640[24];
                                                    goto LABEL_816;
                                                  }
LABEL_814:
                                                  if (v506 <= v492) {
                                                    goto LABEL_816;
                                                  }
                                                  goto LABEL_815;
                                                }
LABEL_805:
                                                *(void *)&v640[24] = (v577 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                unint64_t v492 = *(void *)&v640[24];
                                                goto LABEL_806;
                                              }
LABEL_804:
                                              if (v503 <= v492) {
                                                goto LABEL_806;
                                              }
                                              goto LABEL_805;
                                            }
LABEL_795:
                                            *(void *)&v640[24] = (v560 + v570) & 0xFFFFFFFFFFFFFFFCLL;
                                            unint64_t v492 = *(void *)&v640[24];
                                            goto LABEL_796;
                                          }
LABEL_794:
                                          if (v500 <= v492) {
                                            goto LABEL_796;
                                          }
                                          goto LABEL_795;
                                        }
LABEL_785:
                                        *(void *)&v640[24] = (v556 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                        unint64_t v492 = *(void *)&v640[24];
                                        goto LABEL_786;
                                      }
LABEL_784:
                                      if (v497 <= v492) {
                                        goto LABEL_786;
                                      }
                                      goto LABEL_785;
                                    }
LABEL_776:
                                    v461.i32[0] = 0;
                                    v489.i32[0] = v300 & 0x20;
                                    unint64_t v710 = (v554 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    int8x16_t v711 = vandq_s8((int8x16_t)vaddq_s64((int64x2_t)vbicq_s8((int8x16_t)v464, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v489, v461), 0)), vdupq_n_s64(3uLL)), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL));
                                    unint64_t v712 = (v558 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    if ((v300 & 0x10) == 0) {
                                      goto LABEL_786;
                                    }
                                    goto LABEL_777;
                                  }
LABEL_763:
                                  if (v492 <= v488) {
                                    goto LABEL_760;
                                  }
                                  goto LABEL_764;
                                }
LABEL_745:
                                *(void *)&v640[24] = (v415 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                goto LABEL_746;
                              }
LABEL_744:
                              if (v481 <= *(void *)&v640[24]) {
                                goto LABEL_746;
                              }
                              goto LABEL_745;
                            }
LABEL_728:
                            uint64_t v822 = (v405 + 3) & 0xFC;
                            uint64_t v823 = ((_WORD)v404 + 3) & 0x1FC;
                            uint64_t v824 = (v403 + 3) & 0x1FFFFFFFCLL;
                            uint64_t v825 = (v406 + 3) & 0x1FFFFFFFCLL;
                            goto LABEL_729;
                          }
                          long double v386 = (float)(1.0 / v651[57].f32[1]);
                          if (!v361)
                          {
                            uint64_t v526 = 0;
                            double v527 = 0.0;
                            do
                            {
                              float v528 = v527;
                              float v529 = pow(v528, v386);
                              float v530 = v529 * 65535.0 + 0.5;
                              int v531 = (int)v530 & ~((int)v530 >> 31);
                              if (v531 >= 0xFFFF) {
                                LOWORD(v531) = -1;
                              }
                              *(_WORD *)(sig + v526) = v531;
                              double v527 = v527 + 0.0000152590219;
                              v526 += 2;
                            }
                            while (v526 != 0x20000);
                            goto LABEL_560;
                          }
                          if (v651[57].i8[0])
                          {
                            uint64_t v387 = 0;
                            double v388 = 0.0;
                            do
                            {
                              float v389 = v388;
                              float v390 = pow(v389, v386);
                              float v391 = v390 * 65535.0 + 0.5;
                              int v392 = (int)v391 & ~((int)v391 >> 31);
                              if (v392 >= 0xFFFF) {
                                LOWORD(v392) = -1;
                              }
                              *(_WORD *)(sig + v387) = v392;
                              double v388 = v388 + 0.0000152590219;
                              v387 += 2;
                            }
                            while (v387 != 0x20000);
                            goto LABEL_560;
                          }
                          uint64_t v532 = 0;
                          uint64_t v619 = (float *)&v651[56] + 1;
                          uint64_t v625 = v651 + 56;
                          double v533 = 0.0;
                          uint64_t v629 = v651 + 55;
                          while (1)
                          {
                            float v545 = v533;
                            float v541 = 0.0;
                            if (v545 >= 0.0)
                            {
                              if (v545 < 0.1)
                              {
                                float v534 = v364[53].f32[1];
                                float v535 = 0.1;
                                float v536 = 0.0;
                                int v537 = (float *)&v364[53];
                                int v538 = (float *)&v364[54];
LABEL_870:
                                float v539 = v545 / v535;
                                goto LABEL_871;
                              }
                              if (v545 < 0.2)
                              {
                                float v536 = v364[53].f32[1];
                                float v534 = v364[54].f32[1] - v536;
                                float v545 = v545 + -0.1;
                                float v535 = 0.1;
                                int v537 = (float *)&v364[54];
                                int v538 = (float *)v629;
                                goto LABEL_870;
                              }
                              if (v545 < 0.5)
                              {
                                float v536 = v364[54].f32[1];
                                float v534 = v364[55].f32[1] - v536;
                                float v545 = v545 + -0.2;
                                float v535 = 0.3;
                                int v537 = (float *)v629;
                                int v538 = (float *)v625;
                                goto LABEL_870;
                              }
                              if (v545 < 1.0)
                              {
                                float v536 = v364[55].f32[1];
                                float v534 = 1.0 - v536;
                                float v539 = (float)(v545 + -0.5) + (float)(v545 + -0.5);
                                float v535 = 0.5;
                                int v537 = (float *)v625;
                                int v538 = v619;
LABEL_871:
                                float v540 = v535 / v534;
                                float v541 = v536
                                     + (float)(v534
                                             * (float)((float)((float)(v539
                                                                     * (float)(v539
                                                                             * (float)(1.0
                                                                                     - (float)((float)(v540 * *v537)
                                                                                             + (float)((float)((float)(v540 * *v538) + (float)(v540 * *v537)) + -2.0)))))
                                                             + (float)((float)(v539
                                                                             * (float)(v539
                                                                                     * (float)((float)((float)(v540 * *v538) + (float)(v540 * *v537))
                                                                                             + -2.0)))
                                                                     * v539))
                                                     + (float)((float)(v540 * *v537) * v539)));
                                if (v541 < 0.0) {
                                  float v541 = 0.0;
                                }
                                goto LABEL_873;
                              }
                              float v541 = (float)((float)(v545 + -1.0) * *v619) + 1.0;
                            }
LABEL_873:
                            float v542 = pow(v541, v386);
                            float v543 = v542 * 65535.0 + 0.5;
                            int v544 = (int)v543 & ~((int)v543 >> 31);
                            if (v544 >= 0xFFFF) {
                              LOWORD(v544) = -1;
                            }
                            *(_WORD *)(sig + v532) = v544;
                            double v533 = v533 + 0.0000152590219;
                            v532 += 2;
                            if (v532 == 0x20000) {
                              goto LABEL_560;
                            }
                          }
                        }
                        v617 |= 4u;
                        unsigned int v599 = v924;
                        long long v932 = 0u;
                        long long v933 = 0u;
                        memset(v931, 0, sizeof(v931));
                        long long v938 = 0u;
                        long long v939 = 0u;
                        unsigned int v203 = llroundf(v592);
                        long long v936 = 0u;
                        long long v937 = 0u;
                        unsigned int v204 = llroundf(v594);
                        unsigned int v205 = llroundf(v596);
                        if (v622 == 7 || v622 == 5)
                        {
                          unsigned int v215 = 0;
                          unsigned int v216 = 0;
                          unsigned int v217 = 0;
                          float v208 = v601;
                          *(float *)&long long v936 = v601;
                          uint64_t v206 = 15;
                          uint64_t v207 = 13;
                          uint64_t v209 = 10;
                          uint64_t v210 = 8;
                          uint64_t v211 = 7;
                          uint64_t v212 = 5;
                          uint64_t v213 = 2;
                          float v214 = v603;
                        }
                        else
                        {
                          if (v622 != 4) {
                            goto LABEL_378;
                          }
                          uint64_t v206 = 14;
                          uint64_t v207 = 12;
                          float v208 = v603;
                          *((float *)&v936 + 1) = v603;
                          uint64_t v209 = 11;
                          uint64_t v210 = 9;
                          uint64_t v211 = 6;
                          uint64_t v212 = 4;
                          uint64_t v213 = 3;
                          float v214 = v601;
                          unsigned int v215 = v205;
                          unsigned int v216 = v203;
                          unsigned int v217 = v204;
                          unsigned int v205 = 0;
                          unsigned int v204 = 0;
                          unsigned int v203 = 0;
                        }
                        *(float *)((unint64_t)&v936 | (4 * v213)) = v214;
                        *((float *)&v936 + v212) = v604;
                        *((float *)&v936 + v211) = v604;
                        *((float *)&v936 + v210) = v214;
                        *((float *)&v936 + v209) = v208;
                        *((float *)&v936 + v207) = v604;
                        *((float *)&v936 + v206) = v604;
                        *(void *)&v931[0] = __PAIR64__(v215, v203);
                        *((void *)&v931[0] + 1) = __PAIR64__(v216, v205);
                        *(void *)&v931[1] = __PAIR64__(v204, v217);
                        *((void *)&v931[1] + 1) = __PAIR64__(v204, v217);
                        *(void *)&long long v932 = __PAIR64__(v216, v205);
                        *((void *)&v932 + 1) = __PAIR64__(v215, v203);
                        *(void *)&long long v933 = __PAIR64__(v204, v217);
                        *((void *)&v933 + 1) = __PAIR64__(v204, v217);
LABEL_378:
                        uint64_t v218 = 0;
                        int v634 = 0;
                        do
                        {
                          if (!v685[v218])
                          {
                            unsigned int v219 = *(_WORD **)&v599[1].__opaque[8 * v634];
                            uint64_t v220 = *((unsigned int *)v931 + v218);
                            uint64_t v221 = (int)v220;
                            float v222 = *((float *)&v936 + v218);
                            for (uint64_t k = v218; k != 16; ++k)
                            {
                              if (*((_DWORD *)v931 + k) == v220 && *((float *)&v936 + k) == v222) {
                                v685[k] = v219;
                              }
                            }
                            ++v634;
                            if ((int)v220 <= 0 || (bzero(v219, 2 * v220), !WORD1(v220)))
                            {
                              uint64_t v224 = (uint64_t)(int)v220 << 32;
                              double v225 = 0.5;
                              uint64_t v226 = 131070 - 2 * (int)v220;
                              do
                              {
                                v219[v221] = (int)v225;
                                int v227 = v221 + 1;
                                v226 -= 2;
                                v224 += 0x100000000;
                                if (v221 > 65534) {
                                  break;
                                }
                                double v225 = v225 + v222;
                                ++v221;
                              }
                              while (v225 <= 32767.0);
                              if (v227 < 0x10000) {
                                memset_pattern16((char *)v219 + (v224 >> 31), &unk_1DDBFE350, (v226 & 0x1FFFFFFFELL) + 2);
                              }
                            }
                          }
                          ++v218;
                        }
                        while (v218 != 16);
                        int64x2_t v680 = sub_1DDB1FFA8;
                        goto LABEL_394;
                      }
                      do
                      {
                        if (v100 == *((float *)v110 + 5) && !*((unsigned char *)v110 + 24)) {
                          goto LABEL_236;
                        }
                        if (!atomic_load(v110 + 4)) {
                          unint64_t v112 = (char *)v110;
                        }
                        uint64_t v110 = (unsigned int *)*((void *)v110 + 1);
                        ++v111;
                      }
                      while (v110);
LABEL_227:
                      if (v112 && v111 > 3)
                      {
LABEL_235:
                        *((float *)v112 + 5) = v100;
                        v112[24] = v101;
                        *((float *)v112 + 7) = v102;
                        *((float *)v112 + 8) = v103;
                        *((float *)v112 + 9) = v104;
                        *((float *)v112 + 10) = v105;
                        *((float *)v112 + 11) = v106;
                        *((float *)v112 + 12) = v107;
                        v112[60] = v109;
                        *(_WORD *)(v112 + 61) = v936;
                        v112[63] = BYTE2(v936);
                        uint64_t v110 = (unsigned int *)v112;
                        *((float *)v112 + 13) = v108;
                        *((float *)v112 + 14) = v631;
                        *((_WORD *)v112 + 65567) = 0;
                        goto LABEL_236;
                      }
                    }
                    unint64_t v112 = (char *)sub_1DDBF2084(0x20040uLL);
                    if (v112)
                    {
                      uint64_t v116 = qword_1EAB91200;
                      double v117 = *(void **)(qword_1EAB91200 + 104);
                      *(void *)unint64_t v112 = 0;
                      *((void *)v112 + 1) = v117;
                      atomic_store(0, (unsigned int *)v112 + 4);
                      if (v117) {
                        void *v117 = v112;
                      }
                      *(void *)(v116 + 104) = v112;
                      goto LABEL_235;
                    }
                    long long v923 = 0;
                    pthread_mutex_unlock((pthread_mutex_t *)qword_1EAB91200);
                    uint64_t v94 = v924;
                    if (v924) {
                      goto LABEL_189;
                    }
                  }
                  return 0;
                }
LABEL_177:
                size_t v72 = 320;
                goto LABEL_187;
              }
LABEL_176:
              v931[v59++] = xmmword_1DDBFE240;
              if (v59 >= 1) {
                goto LABEL_165;
              }
              goto LABEL_177;
            }
          }
          else
          {
            if (v48.i32[1] == v50) {
              char v56 = 6;
            }
            else {
              char v56 = 2;
            }
            v55 |= v56;
            if (v51 == v50) {
              v55 |= 8u;
            }
            if (v47 != v46)
            {
              if (v48.i32[1] == v51) {
                char v61 = 12;
              }
              else {
                char v61 = 4;
              }
              char v62 = v55 | v61;
              if ((v55 & 4) != 0)
              {
                int v58 = 2;
              }
              else
              {
                char v55 = v62;
                int v58 = 3;
              }
              goto LABEL_113;
            }
            if (v49 == v50) {
              v55 |= 0x10u;
            }
            if (v52 == v50) {
              v55 |= 0x20u;
            }
            if ((v55 & 4) != 0)
            {
              int v58 = 2;
              goto LABEL_113;
            }
            if (v48.i32[1] == v51) {
              char v57 = 12;
            }
            else {
              char v57 = 4;
            }
            v55 |= v57;
            int v58 = 3;
          }
          if (v48.i32[1] == v49) {
            v55 |= 0x10u;
          }
          if (v48.i32[1] == v52) {
            v55 |= 0x20u;
          }
          goto LABEL_113;
        }
LABEL_52:
        if (!*(void *)(qword_1EAB91200 + 96))
        {
          pthread_mutex_lock((pthread_mutex_t *)qword_1EAB91200);
          uint64_t v36 = qword_1EAB91200;
          if (!*(void *)(qword_1EAB91200 + 96))
          {
            signed int v37 = 0;
            uint64_t v38 = qword_1EAB91200 + 985472;
            unsigned int v39 = 0x80000000;
            *(_DWORD *)(qword_1EAB91200 + 985472) = 0x80000000;
            uint64_t v40 = (unsigned int *)(v36 + 985476);
            uint64_t v41 = -16383;
            do
            {
              if (v41 + 0x4000 > v37)
              {
                unsigned int v39 = 0x10000u / ((int)v41 + 0x4000);
                signed int v37 = 0x10000 / v39;
              }
              *v40++ = v39;
            }
            while (!__CFADD__(v41++, 1));
            *(void *)(v36 + 96) = v38;
          }
          pthread_mutex_unlock((pthread_mutex_t *)v36);
        }
        goto LABEL_60;
      }
    }
  }
  return v2;
}

void *sub_1DDB1DAD4(unsigned int *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  unsigned int v3 = a1[1];
  int v4 = *(_DWORD *)(v2 + 164);
  int64x2_t result = (void *)sub_1DDB10A00((uint64_t)a1);
  if (!result) {
    return result;
  }
  unint64_t v6 = (unint64_t)result;
  if (!*(unsigned char *)(v2 + 8))
  {
    unint64_t v7 = *a1;
    unint64_t v9 = result[12];
    unint64_t v8 = result[13];
    unint64_t v10 = *(void *)(v2 + 16);
    if (!v10) {
      unint64_t v10 = result[12];
    }
    unint64_t v11 = *(void *)(v2 + 24) ? *(void *)(v2 + 24) : result[13];
    unint64_t v12 = (v8 + v11 - 1) / v11;
    unint64_t v13 = v7 / v12;
    if (v7 / v12 < (v9 + v10 - 1) / v10)
    {
      int v14 = *(unsigned __int8 *)(v2 + 10);
      unint64_t v15 = v7 % v12 * v11;
      if (v15 + v11 <= v8) {
        unint64_t v16 = v11;
      }
      else {
        unint64_t v16 = v8 - v15;
      }
      unint64_t v17 = v13 * v10;
      unint64_t v18 = v9 - v13 * v10;
      if (v13 * v10 + v10 <= v9) {
        unint64_t v18 = v10;
      }
      uint64_t v19 = *(void *)(v2 + 32);
      unint64_t v20 = *(void *)(v2 + 136) + v15;
      if (*(unsigned char *)(v2 + 10)) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = (int)v20 - (int)v19 < 0;
      }
      int v22 = v21;
      BOOL v23 = v22 == 0;
      if (v22) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v20 - v19;
      }
      if (v23) {
        unint64_t v20 = *(void *)(v2 + 32);
      }
      if (*(unsigned char *)(v2 + 10))
      {
        unint64_t v25 = result[1];
      }
      else
      {
        unint64_t v26 = v20 + v16 + *(void *)(v2 + 40);
        unint64_t v25 = result[1];
        if (v26 + v24 <= v25) {
          goto LABEL_31;
        }
      }
      unint64_t v26 = v25 - v24;
LABEL_31:
      unint64_t v27 = *(void *)(v2 + 48);
      unint64_t v28 = *(void *)(v2 + 128) + v17;
      unint64_t v29 = v28 - v27;
      *(void *)(v6 + 208) = v20;
      if (v14) {
        BOOL v30 = 1;
      }
      else {
        BOOL v30 = (v29 & 0x80000000) != 0;
      }
      if (v30)
      {
        unint64_t v29 = 0;
        unint64_t v27 = v28;
      }
      unint64_t v32 = *(void *)v6;
      unint64_t v33 = v27 + v18;
      if (v14 || (unint64_t v34 = *(void *)(v2 + 56) + v33, v34 + v29 > v32)) {
        unint64_t v34 = v32 - v29;
      }
      *(void *)(v6 + 192) = *(void *)(v6 + 120)
                            + *(void *)(v6 + 112) * v15
                            + 3 * v17 * ((unint64_t)*(int *)(v2 + 152) >> 3);
      *(void *)(v6 + 200) = v27;
      *(void *)(v6 + 168) = v18;
      *(void *)(v6 + 176) = v16;
      *(void *)(v6 + 136) = v34;
      *(void *)(v6 + 144) = v26;
      *(void *)(v6 + 360) = v34 >> 1;
      *(void *)(v6 + 368) = v26 >> 1;
      uint64_t v35 = *(void *)(v6 + 16);
      uint64_t v36 = *(void *)(v6 + 24) + v35 * v24 + 2 * v29;
      *(void *)(v6 + 80) = v35;
      *(void *)(v6 + 88) = v36;
      *(void *)(v6 + 64) = v24;
      *(void *)(v6 + 72) = v29;
      unint64_t v37 = v26 - v20 - v16;
      *(void *)(v6 + 32) = v20;
      *(void *)(v6 + 40) = v37;
      int v38 = v34 - v33;
      *(void *)(v6 + 48) = v27;
      *(void *)(v6 + 56) = v34 - v33;
      int v39 = *(_DWORD *)(v2 + 164);
      uint64_t v41 = *(void *)(v6 + 152);
      uint64_t v40 = *(void *)(v6 + 160);
      if ((v39 & 0x20) != 0)
      {
        uint64_t v101 = *(void *)(v6 + 216);
        uint64_t v100 = *(void *)(v6 + 224);
        *(void *)(v6 + 152) = v101;
        *(void *)(v6 + 160) = v100;
        *(void *)(v6 + 216) = v41;
        *(void *)(v6 + 224) = v40;
        uint64_t v41 = v101;
        uint64_t v40 = v100;
        *(void *)(v6 + 232) = v35;
        *(void *)(v6 + 240) = v36;
        *(void *)(v6 + 248) = v101;
        *(void *)(v6 + 256) = v100;
        if ((v39 & 1) == 0)
        {
LABEL_44:
          if ((v39 & 2) == 0) {
            goto LABEL_45;
          }
          goto LABEL_64;
        }
      }
      else
      {
        *(void *)(v6 + 232) = v35;
        *(void *)(v6 + 240) = v36;
        *(void *)(v6 + 248) = v41;
        *(void *)(v6 + 256) = v40;
        if ((v39 & 1) == 0) {
          goto LABEL_44;
        }
      }
      uint64_t v102 = (v20 - *(_DWORD *)(v2 + 176)) & ~(((int)v20 - *(_DWORD *)(v2 + 176)) >> 31);
      int v103 = (v37 - *(_DWORD *)(v2 + 184)) & ~(((int)v37 - *(_DWORD *)(v2 + 184)) >> 31);
      int v104 = (v27 - *(_DWORD *)(v2 + 192)) & ~(((int)v27 - *(_DWORD *)(v2 + 192)) >> 31);
      *(void *)(v6 + 544) = v34
                            - (((v38 - *(_DWORD *)(v2 + 200)) & ~((v38 - *(_DWORD *)(v2 + 200)) >> 31))
                             + v104);
      *(void *)(v6 + 552) = v26 - (v103 + v102);
      uint64_t v105 = (2 * v104);
      *(void *)(v6 + 560) = v36 + v105 + v35 * v102;
      *(void *)(v6 + 568) = v35;
      *(void *)(v6 + 576) = v40 + v105 + v41 * v102;
      *(void *)(v6 + 584) = v41;
      *(void *)(v6 + 232) = v41;
      *(void *)(v6 + 240) = v40;
      uint64_t v36 = v40;
      uint64_t v35 = v41;
      if ((v39 & 2) == 0)
      {
LABEL_45:
        if ((v39 & 4) == 0) {
          goto LABEL_46;
        }
        goto LABEL_65;
      }
LABEL_64:
      uint64_t v106 = (v20 - *(_DWORD *)(v2 + 248)) & ~(((int)v20 - *(_DWORD *)(v2 + 248)) >> 31);
      int v107 = (v37 - *(_DWORD *)(v2 + 256)) & ~(((int)v37 - *(_DWORD *)(v2 + 256)) >> 31);
      unint64_t v108 = (v27 - *(_DWORD *)(v2 + 264)) & ~(((int)v27 - *(_DWORD *)(v2 + 264)) >> 31);
      *(void *)(v6 + 592) = v34
                            - (((v38 - *(_DWORD *)(v2 + 272)) & ~((v38 - *(_DWORD *)(v2 + 272)) >> 31))
                             + v108);
      *(void *)(v6 + 600) = v26 - (v107 + v106);
      uint64_t v109 = 2 * v108;
      *(void *)(v6 + 608) = v36 + v109 + v35 * v106;
      *(void *)(v6 + 616) = v35;
      *(void *)(v6 + 624) = v40 + v109 + v41 * v106;
      *(void *)(v6 + 632) = v41;
      uint64_t v110 = *(void *)(v6 + 264);
      *(void *)(v6 + 640) = *(void *)(v6 + 272) + v110 * v106 + (v108 >> 3);
      *(void *)(v6 + 648) = v110;
      *(void *)(v6 + 656) = *(void *)(v6 + 280);
      *(void *)(v6 + 232) = v41;
      *(void *)(v6 + 240) = v40;
      uint64_t v36 = v40;
      uint64_t v35 = v41;
      if ((v39 & 4) == 0)
      {
LABEL_46:
        if ((v39 & 8) == 0) {
          goto LABEL_47;
        }
        goto LABEL_66;
      }
LABEL_65:
      uint64_t v111 = (v20 - *(_DWORD *)(v2 + 368)) & ~(((int)v20 - *(_DWORD *)(v2 + 368)) >> 31);
      int v112 = (v37 - *(_DWORD *)(v2 + 376)) & ~(((int)v37 - *(_DWORD *)(v2 + 376)) >> 31);
      int v113 = (v27 - *(_DWORD *)(v2 + 384)) & ~(((int)v27 - *(_DWORD *)(v2 + 384)) >> 31);
      *(void *)(v6 + 664) = v34
                            - (((v38 - *(_DWORD *)(v2 + 392)) & ~((v38 - *(_DWORD *)(v2 + 392)) >> 31))
                             + v113);
      *(void *)(v6 + 672) = v26 - (v112 + v111);
      uint64_t v114 = (2 * v113);
      *(void *)(v6 + 680) = v36 + v114 + v35 * v111;
      *(void *)(v6 + 688) = v35;
      *(void *)(v6 + 696) = v40 + v114 + v41 * v111;
      *(void *)(v6 + 704) = v41;
      *(void *)(v6 + 232) = v41;
      *(void *)(v6 + 240) = v40;
      if ((v39 & 8) == 0)
      {
LABEL_47:
        if ((v39 & 0x10) == 0) {
          goto LABEL_48;
        }
        goto LABEL_67;
      }
LABEL_66:
      uint64_t v115 = (v20 - *(_DWORD *)(v2 + 536)) & ~(((int)v20 - *(_DWORD *)(v2 + 536)) >> 31);
      int v116 = (v37 - *(_DWORD *)(v2 + 544)) & ~(((int)v37 - *(_DWORD *)(v2 + 544)) >> 31);
      int v117 = (v27 - *(_DWORD *)(v2 + 552)) & ~(((int)v27 - *(_DWORD *)(v2 + 552)) >> 31);
      *(void *)(v6 + 712) = v34
                            - (((v38 - *(_DWORD *)(v2 + 560)) & ~((v38 - *(_DWORD *)(v2 + 560)) >> 31))
                             + v117);
      *(void *)(v6 + 720) = v26 - (v116 + v115);
      *(void *)(v6 + 728) = v40 + (2 * v117) + v41 * v115;
      *(void *)(v6 + 736) = v41;
      *(void *)(v6 + 744) = *(void *)(v6 + 296);
      if ((v39 & 0x10) == 0)
      {
LABEL_48:
        if ((v39 & 0x20) == 0) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
LABEL_67:
      uint64_t v118 = (v20 - *(_DWORD *)(v2 + 600)) & ~(((int)v20 - *(_DWORD *)(v2 + 600)) >> 31);
      int v119 = (v37 - *(_DWORD *)(v2 + 608)) & ~(((int)v37 - *(_DWORD *)(v2 + 608)) >> 31);
      int v120 = (v27 - *(_DWORD *)(v2 + 616)) & ~(((int)v27 - *(_DWORD *)(v2 + 616)) >> 31);
      *(void *)(v6 + 752) = v34
                            - (((v38 - *(_DWORD *)(v2 + 624)) & ~((v38 - *(_DWORD *)(v2 + 624)) >> 31))
                             + v120);
      *(void *)(v6 + 760) = v26 - (v119 + v118);
      *(void *)(v6 + 768) = v40 + (2 * v120) + v41 * v118;
      *(void *)(v6 + 776) = v41;
      *(void *)(v6 + 784) = *(void *)(v6 + 304);
      if ((v39 & 0x20) == 0)
      {
LABEL_50:
        unint64_t v48 = (v20 - *(_DWORD *)(v2 + 792)) & ~(((int)v20 - *(_DWORD *)(v2 + 792)) >> 31);
        int v49 = (v37 - *(_DWORD *)(v2 + 800)) & ~(((int)v37 - *(_DWORD *)(v2 + 800)) >> 31);
        unint64_t v50 = (v27 - *(_DWORD *)(v2 + 808)) & ~(((int)v27 - *(_DWORD *)(v2 + 808)) >> 31);
        *(void *)(v6 + 856) = v34
                              - (((v38 - *(_DWORD *)(v2 + 816)) & ~((v38 - *(_DWORD *)(v2 + 816)) >> 31))
                               + v50);
        *(void *)(v6 + 864) = v26 - (v49 + v48);
        *(void *)(v6 + 872) = v40 + v41 * v48 + 2 * v50;
        *(void *)(v6 + 880) = v41;
        uint64_t v51 = *(void *)(v6 + 376);
        uint64_t v52 = *(void *)(v6 + 384);
        *(void *)(v6 + 888) = v52 + (v48 >> 1) * v51 + 6 * (v50 >> 1);
        *(void *)(v6 + 896) = v51;
        if ((v39 & 0x80) != 0)
        {
          unint64_t v53 = (v20 - *(_DWORD *)(v2 + 856)) & ~(((int)v20 - *(_DWORD *)(v2 + 856)) >> 31);
          int v54 = (v37 - *(_DWORD *)(v2 + 864)) & ~(((int)v37 - *(_DWORD *)(v2 + 864)) >> 31);
          unint64_t v55 = (v27 - *(_DWORD *)(v2 + 872)) & ~(((int)v27 - *(_DWORD *)(v2 + 872)) >> 31);
          *(void *)(v6 + 904) = v34
                                - (((v38 - *(_DWORD *)(v2 + 880)) & ~((v38 - *(_DWORD *)(v2 + 880)) >> 31))
                                 + v55);
          *(void *)(v6 + 912) = v26 - (v54 + v53);
          *(void *)(v6 + 920) = v40 + v41 * v53 + 2 * v55;
          *(void *)(v6 + 928) = v41;
          uint64_t v56 = *(void *)(v6 + 392);
          *(void *)(v6 + 936) = *(void *)(v6 + 400) + (v53 >> 1) * v56 + (v55 >> 1);
          *(void *)(v6 + 944) = v56;
        }
        uint64_t v57 = *(void *)(v6 + 472);
        int v58 = v20 - *(_DWORD *)(v2 + 928);
        unint64_t v59 = (v27 - *(_DWORD *)(v2 + 944)) & ~(((int)v27 - *(_DWORD *)(v2 + 944)) >> 31);
        int v60 = *(_DWORD *)(v2 + 936);
        *(void *)(v6 + 952) = v34
                              - (((v38 - *(_DWORD *)(v2 + 952)) & ~((v38 - *(_DWORD *)(v2 + 952)) >> 31))
                               + v59);
        unint64_t v61 = v58 & ~(v58 >> 31);
        *(void *)(v6 + 960) = v26 - (((v37 - v60) & ~(((int)v37 - v60) >> 31)) + v61);
        uint64_t v62 = 2 * v59;
        *(void *)(v6 + 968) = v40 + v62 + v41 * v61;
        *(void *)(v6 + 976) = v41;
        uint64_t v63 = *(void *)(v6 + 504);
        *(void *)(v6 + 984) = v63 + v62 + v57 * v61;
        *(void *)(v6 + 992) = v57;
        *(void *)(v6 + 1000) = v52 + (v61 >> 1) * v51 + 6 * (v59 >> 1);
        *(void *)(v6 + 1008) = v51;
        uint64_t v64 = (v20 - *(_DWORD *)(v2 + 992)) & ~(((int)v20 - *(_DWORD *)(v2 + 992)) >> 31);
        LODWORD(v59) = (v37 - *(_DWORD *)(v2 + 1000)) & ~(((int)v37 - *(_DWORD *)(v2 + 1000)) >> 31);
        unint64_t v65 = (v27 - *(_DWORD *)(v2 + 1008)) & ~(((int)v27 - *(_DWORD *)(v2 + 1008)) >> 31);
        *(void *)(v6 + 1016) = v34
                               - (((v38 - *(_DWORD *)(v2 + 1016)) & ~((v38 - *(_DWORD *)(v2 + 1016)) >> 31))
                                + v65);
        *(void *)(v6 + 1024) = v26 - (v59 + v64);
        uint64_t v66 = 2 * v65;
        *(void *)(v6 + 1032) = v40 + v66 + v41 * v64;
        *(void *)(v6 + 1040) = v41;
        *(void *)(v6 + 1048) = v63 + v66 + v57 * v64;
        *(void *)(v6 + 1056) = v57;
        uint64_t v67 = *(void *)(v6 + 416);
        uint64_t v68 = *(void *)(v6 + 424);
        *(void *)(v6 + 1064) = v68 + v67 * v64 + (v65 >> 1);
        *(void *)(v6 + 1072) = v67;
        unint64_t v69 = (v20 - *(_DWORD *)(v2 + 1096)) & ~(((int)v20 - *(_DWORD *)(v2 + 1096)) >> 31);
        LODWORD(v65) = (v37 - *(_DWORD *)(v2 + 1104)) & ~(((int)v37 - *(_DWORD *)(v2 + 1104)) >> 31);
        int v70 = (v27 - *(_DWORD *)(v2 + 1112)) & ~(((int)v27 - *(_DWORD *)(v2 + 1112)) >> 31);
        *(void *)(v6 + 1080) = v34
                               - (((v38 - *(_DWORD *)(v2 + 1120)) & ~((v38 - *(_DWORD *)(v2 + 1120)) >> 31))
                                + v70);
        *(void *)(v6 + 1088) = v26 - (v65 + v69);
        uint64_t v71 = (2 * v70);
        *(void *)(v6 + 1096) = v40 + v71 + v41 * v69;
        *(void *)(v6 + 1104) = v41;
        uint64_t v72 = *(void *)(v6 + 432);
        uint64_t v73 = *(void *)(v6 + 440);
        *(void *)(v6 + 1112) = v73 + (v71 & 0xFFFFFFFC) + (v69 >> 1) * v72;
        *(void *)(v6 + 1120) = v72;
        if ((v39 & 0x800) != 0)
        {
          unsigned int v74 = (v37 - *(_DWORD *)(v2 + 1192)) & ~(((int)v37 - *(_DWORD *)(v2 + 1192)) >> 31);
          uint64_t v75 = ((v20 - *(_DWORD *)(v2 + 1184)) & ~(((int)v20 - *(_DWORD *)(v2 + 1184)) >> 31)) >> 1;
          uint64_t v76 = ((v27 - *(_DWORD *)(v2 + 1200)) & ~(((int)v27 - *(_DWORD *)(v2 + 1200)) >> 31)) >> 1;
          uint64_t v77 = *(void *)(v6 + 368);
          *(void *)(v6 + 1128) = *(void *)(v6 + 360)
                                 - (v76
                                  + (((v38 - *(_DWORD *)(v2 + 1208)) & ~((v38 - *(_DWORD *)(v2 + 1208)) >> 31)) >> 1));
          *(void *)(v6 + 1136) = v77 - (v75 + (v74 >> 1));
          *(void *)(v6 + 1144) = v52 + v51 * v75 + 6 * v76;
          *(void *)(v6 + 1152) = v51;
          uint64_t v78 = *(void *)(v6 + 392);
          *(void *)(v6 + 1160) = *(void *)(v6 + 400) + v76 + v78 * v75;
          *(void *)(v6 + 1168) = v78;
          *(_OWORD *)(v6 + 1176) = *(_OWORD *)(v6 + 448);
          *(void *)(v6 + 1192) = *(void *)(v6 + 464);
        }
        if ((v39 & 0x1000) != 0)
        {
          unint64_t v79 = (v20 - *(_DWORD *)(v2 + 1376)) & ~(((int)v20 - *(_DWORD *)(v2 + 1376)) >> 31);
          unsigned int v80 = (v38 - *(_DWORD *)(v2 + 1400)) & ~((v38 - *(_DWORD *)(v2 + 1400)) >> 31);
          uint64_t v81 = ((v27 - *(_DWORD *)(v2 + 1392)) & ~(((int)v27 - *(_DWORD *)(v2 + 1392)) >> 31)) >> 1;
          *(void *)(v6 + 1280) = v68 + v81 + v67 * v79;
          uint64_t v82 = *(void *)(v6 + 368);
          uint64_t v83 = *(void *)(v6 + 360) - (v81 + (v80 >> 1));
          unsigned int v84 = (v37 - *(_DWORD *)(v2 + 1384)) & ~(((int)v37 - *(_DWORD *)(v2 + 1384)) >> 31);
          *(void *)(v6 + 1288) = v67;
          v79 >>= 1;
          *(void *)(v6 + 1200) = v83;
          *(void *)(v6 + 1208) = v82 - v79 - (v84 >> 1);
          uint64_t v85 = v79 * v51 + 6 * v81;
          *(void *)(v6 + 1216) = v52 + v85;
          *(void *)(v6 + 1224) = *(void *)(v6 + 408) + v85;
          *(void *)(v6 + 1232) = v51;
          *(void *)(v6 + 1240) = v73 + v79 * v72 + 4 * v81;
          *(void *)(v6 + 1248) = v72;
          *(_OWORD *)(v6 + 1256) = *(_OWORD *)(v6 + 448);
          *(void *)(v6 + 1272) = *(void *)(v6 + 464);
        }
        uint64_t v86 = (v20 - *(_DWORD *)(v2 + 1512)) & ~(((int)v20 - *(_DWORD *)(v2 + 1512)) >> 31);
        int v87 = (v37 - *(_DWORD *)(v2 + 1520)) & ~(((int)v37 - *(_DWORD *)(v2 + 1520)) >> 31);
        unint64_t v88 = (v27 - *(_DWORD *)(v2 + 1528)) & ~(((int)v27 - *(_DWORD *)(v2 + 1528)) >> 31);
        *(void *)(v6 + 1296) = v34
                               - (((v38 - *(_DWORD *)(v2 + 1536)) & ~((v38 - *(_DWORD *)(v2 + 1536)) >> 31))
                                + v88);
        *(void *)(v6 + 1304) = v26 - (v87 + v86);
        *(void *)(v6 + 1312) = v63 + v57 * v86 + 2 * v88;
        *(void *)(v6 + 1320) = v57;
        *(void *)(v6 + 1328) = v68 + v67 * v86 + (v88 >> 1);
        *(void *)(v6 + 1336) = v67;
        *(void *)(v6 + 1344) = *(void *)(v6 + 312);
        if ((v39 & 0x4000) != 0)
        {
          uint64_t v121 = (v20 - *(_DWORD *)(v2 + 1584)) & ~(((int)v20 - *(_DWORD *)(v2 + 1584)) >> 31);
          int v122 = (v37 - *(_DWORD *)(v2 + 1592)) & ~(((int)v37 - *(_DWORD *)(v2 + 1592)) >> 31);
          unint64_t v123 = (v27 - *(_DWORD *)(v2 + 1600)) & ~(((int)v27 - *(_DWORD *)(v2 + 1600)) >> 31);
          *(void *)(v6 + 1352) = v34
                                 - (((v38 - *(_DWORD *)(v2 + 1608)) & ~((v38 - *(_DWORD *)(v2 + 1608)) >> 31))
                                  + v123);
          *(void *)(v6 + 1360) = v26 - (v122 + v121);
          *(void *)(v6 + 1368) = v63 + v57 * v121 + 2 * v123;
          *(void *)(v6 + 1376) = v57;
          *(void *)(v6 + 1384) = v68 + v67 * v121 + (v123 >> 1);
          *(void *)(v6 + 1392) = v67;
          *(void *)(v6 + 1400) = *(void *)(v6 + 320);
          uint64_t v89 = *(void *)(v6 + 32);
          uint64_t v90 = *(void *)(v6 + 40);
          uint64_t v92 = *(void *)(v6 + 48);
          uint64_t v91 = *(void *)(v6 + 56);
          uint64_t v93 = *(void *)(v6 + 136);
          uint64_t v94 = *(void *)(v6 + 144);
          if ((v39 & 0x8000) == 0)
          {
LABEL_58:
            if ((v39 & 0x10000) == 0) {
              goto LABEL_59;
            }
            goto LABEL_71;
          }
        }
        else
        {
          uint64_t v89 = *(void *)(v6 + 32);
          uint64_t v90 = *(void *)(v6 + 40);
          uint64_t v92 = *(void *)(v6 + 48);
          uint64_t v91 = *(void *)(v6 + 56);
          uint64_t v93 = *(void *)(v6 + 136);
          uint64_t v94 = *(void *)(v6 + 144);
          if ((v39 & 0x8000) == 0) {
            goto LABEL_58;
          }
        }
        uint64_t v124 = (v89 - *(_DWORD *)(v2 + 1640)) & ~(((int)v89 - *(_DWORD *)(v2 + 1640)) >> 31);
        int v125 = (v90 - *(_DWORD *)(v2 + 1648)) & ~(((int)v90 - *(_DWORD *)(v2 + 1648)) >> 31);
        unint64_t v126 = (v92 - *(_DWORD *)(v2 + 1656)) & ~(((int)v92 - *(_DWORD *)(v2 + 1656)) >> 31);
        *(void *)(v6 + 1408) = v93
                               - (((v91 - *(_DWORD *)(v2 + 1664)) & ~(((int)v91 - *(_DWORD *)(v2 + 1664)) >> 31))
                                + v126);
        *(void *)(v6 + 1416) = v94 - (v125 + v124);
        *(void *)(v6 + 1424) = v63 + v57 * v124 + 2 * v126;
        *(void *)(v6 + 1432) = v57;
        *(void *)(v6 + 1440) = v68 + v67 * v124 + (v126 >> 1);
        *(void *)(v6 + 1448) = v67;
        if ((v39 & 0x10000) == 0)
        {
LABEL_59:
          uint64_t v95 = v2 + 224 * v3;
          uint64_t v96 = *(void *)(v6 + 472);
          if ((v39 & 0x20000) == 0) {
            goto LABEL_60;
          }
          goto LABEL_72;
        }
LABEL_71:
        uint64_t v127 = (v89 - *(_DWORD *)(v2 + 1704)) & ~(((int)v89 - *(_DWORD *)(v2 + 1704)) >> 31);
        int v128 = (v90 - *(_DWORD *)(v2 + 1712)) & ~(((int)v90 - *(_DWORD *)(v2 + 1712)) >> 31);
        unint64_t v129 = (v92 - *(_DWORD *)(v2 + 1720)) & ~(((int)v92 - *(_DWORD *)(v2 + 1720)) >> 31);
        *(void *)(v6 + 1456) = v93
                               - (((v91 - *(_DWORD *)(v2 + 1728)) & ~(((int)v91 - *(_DWORD *)(v2 + 1728)) >> 31))
                                + v129);
        *(void *)(v6 + 1464) = v94 - (v128 + v127);
        *(void *)(v6 + 1472) = v63 + v57 * v127 + 2 * v129;
        *(void *)(v6 + 1480) = v57;
        *(void *)(v6 + 1488) = v68 + v67 * v127 + (v129 >> 1);
        *(void *)(v6 + 1496) = v67;
        uint64_t v130 = *(void *)(v6 + 264);
        *(void *)(v6 + 1504) = *(void *)(v6 + 272) + v130 * v127 + (v129 >> 3);
        *(void *)(v6 + 1512) = v130;
        *(void *)(v6 + 1520) = *(void *)(v6 + 328);
        uint64_t v95 = v2 + 224 * v3;
        uint64_t v96 = *(void *)(v6 + 472);
        if ((v39 & 0x20000) == 0)
        {
LABEL_60:
          uint64_t v97 = (void *)(v95 + 2440);
          uint64_t v98 = *(void *)(v6 + 504);
          if ((v39 & 0x40000) == 0)
          {
LABEL_61:
            uint64_t v99 = *(void *)(v6 + 480);
            goto LABEL_74;
          }
LABEL_73:
          uint64_t v134 = (v89 - *(_DWORD *)(v2 + 2008)) & ~(((int)v89 - *(_DWORD *)(v2 + 2008)) >> 31);
          int v135 = (v90 - *(_DWORD *)(v2 + 2016)) & ~(((int)v90 - *(_DWORD *)(v2 + 2016)) >> 31);
          int v136 = (v92 - *(_DWORD *)(v2 + 2024)) & ~(((int)v92 - *(_DWORD *)(v2 + 2024)) >> 31);
          *(void *)(v6 + 1600) = v93
                                 - (((v91 - *(_DWORD *)(v2 + 2032)) & ~(((int)v91
                                                                                             - *(_DWORD *)(v2 + 2032)) >> 31))
                                  + v136);
          *(void *)(v6 + 1608) = v94 - (v135 + v134);
          uint64_t v137 = (2 * v136) + v96 * v134;
          *(void *)(v6 + 1616) = v98 + v137;
          uint64_t v99 = *(void *)(v6 + 480);
          uint64_t v138 = *(void *)(v6 + 488);
          *(void *)(v6 + 1624) = v99 + v137;
          *(void *)(v6 + 1632) = v96;
          *(void *)(v6 + 1640) = v138;
          *(_OWORD *)(v6 + 1648) = *(_OWORD *)(v6 + 520);
LABEL_74:
          uint64_t v139 = *(void *)(v6 + 152);
          uint64_t v140 = *(void *)(v6 + 376);
          unint64_t v141 = (v89 - *(_DWORD *)(v2 + 2200)) & ~(((int)v89 - *(_DWORD *)(v2 + 2200)) >> 31);
          int v142 = v90 - *(_DWORD *)(v2 + 2208);
          unint64_t v143 = (v92 - *(_DWORD *)(v2 + 2216)) & ~(((int)v92 - *(_DWORD *)(v2 + 2216)) >> 31);
          *(void *)(v6 + 1664) = v93
                                 - (((v91 - *(_DWORD *)(v2 + 2224)) & ~(((int)v91 - *(_DWORD *)(v2 + 2224)) >> 31))
                                  + v143);
          *(void *)(v6 + 1672) = v94 - ((v142 & ~(v142 >> 31)) + v141);
          uint64_t v144 = 2 * v143;
          uint64_t v145 = *(void *)(v6 + 152);
          *(void *)(v6 + 1680) = *(void *)(v6 + 160) + v144 + v139 * v141;
          *(void *)(v6 + 1688) = v139;
          uint64_t v146 = *(void *)(v6 + 496);
          uint64_t v147 = v144 + v96 * v141;
          *(void *)(v6 + 1696) = v146 + v147;
          *(void *)(v6 + 1704) = v98 + v147;
          uint64_t v148 = *(void *)(v6 + 512);
          *(void *)(v6 + 1712) = v148 + v147;
          *(void *)(v6 + 1720) = v99 + v147;
          *(void *)(v6 + 1728) = v96;
          unint64_t v149 = v143 >> 1;
          uint64_t v150 = *(void *)(v6 + 408);
          uint64_t v151 = *(void *)(v6 + 416);
          *(void *)(v6 + 1768) = v68 + v149 + v151 * v141;
          *(void *)(v6 + 1776) = v151;
          *(void *)(v6 + 1736) = v150 + (v141 >> 1) * v140 + 6 * v149;
          *(void *)(v6 + 1744) = v140;
          *(void *)(v6 + 1752) = v73 + (v141 >> 1) * v72 + 4 * v149;
          *(void *)(v6 + 1760) = v72;
          uint64_t v152 = *(void *)(v6 + 160);
          uint64_t v153 = *(void *)(v6 + 168);
          *(void *)(v6 + 1784) = v153;
          uint64_t v155 = *(void *)(v6 + 176);
          uint64_t v154 = *(void *)(v6 + 184);
          *(void *)(v6 + 1792) = v155;
          *(_OWORD *)(v6 + 1800) = *(_OWORD *)(v6 + 200);
          *(void *)(v6 + 1816) = *(void *)(v6 + 192);
          *(void *)(v6 + 1824) = v154;
          *(void *)(v6 + 1832) = v93;
          *(void *)(v6 + 1840) = v94;
          *(void *)(v6 + 1848) = v146;
          *(void *)(v6 + 1856) = v99;
          *(void *)(v6 + 1864) = v148;
          *(void *)(v6 + 1872) = v96;
          *(void *)(v6 + 1880) = v150;
          *(void *)(v6 + 1888) = v140;
          *(void *)(v6 + 1896) = v73;
          *(void *)(v6 + 1904) = *(void *)(v6 + 432);
          ++*v97;
          uint64_t v156 = v2 + 224 * v3;
          *(void *)(v156 + 2448) += *(void *)(v6 + 144) * *(void *)(v6 + 136);
          *(void *)(v156 + 2456) += v155 * v153;
          if ((v4 & 0x20) != 0)
          {
            uint64_t v159 = *(void *)(v6 + 216);
            uint64_t v158 = *(void *)(v6 + 224);
            *(void *)(v6 + 152) = v159;
            *(void *)(v6 + 160) = v158;
            *(void *)(v6 + 216) = v145;
            *(void *)(v6 + 224) = v152;
            uint64_t v160 = v158;
            uint64_t v161 = *(void *)(v6 + 88);
            *(void *)(v6 + 232) = *(void *)(v6 + 80);
            *(void *)(v6 + 240) = v161;
            *(void *)(v6 + 248) = v159;
            *(void *)(v6 + 256) = v160;
            if ((v4 & 1) == 0)
            {
LABEL_76:
              if ((v4 & 2) == 0) {
                goto LABEL_77;
              }
              goto LABEL_97;
            }
          }
          else
          {
            uint64_t v157 = *(void *)(v6 + 88);
            *(void *)(v6 + 232) = *(void *)(v6 + 80);
            *(void *)(v6 + 240) = v157;
            *(void *)(v6 + 248) = v145;
            *(void *)(v6 + 256) = v152;
            if ((v4 & 1) == 0) {
              goto LABEL_76;
            }
          }
          (*(void (**)(uint64_t, unint64_t))(v2 + 168))(v2, v6);
          uint64_t v162 = *(void *)(v6 + 256);
          *(void *)(v6 + 232) = *(void *)(v6 + 248);
          *(void *)(v6 + 240) = v162;
          if ((v4 & 2) == 0)
          {
LABEL_77:
            if ((v4 & 4) == 0) {
              goto LABEL_78;
            }
            goto LABEL_98;
          }
LABEL_97:
          (*(void (**)(uint64_t, unint64_t))(v2 + 240))(v2, v6);
          uint64_t v163 = *(void *)(v6 + 256);
          *(void *)(v6 + 232) = *(void *)(v6 + 248);
          *(void *)(v6 + 240) = v163;
          if ((v4 & 4) == 0)
          {
LABEL_78:
            if ((v4 & 8) == 0) {
              goto LABEL_79;
            }
            goto LABEL_99;
          }
LABEL_98:
          (*(void (**)(uint64_t, unint64_t))(v2 + 360))(v2, v6);
          uint64_t v164 = *(void *)(v6 + 256);
          *(void *)(v6 + 232) = *(void *)(v6 + 248);
          *(void *)(v6 + 240) = v164;
          if ((v4 & 8) == 0)
          {
LABEL_79:
            if ((v4 & 0x10) == 0) {
              goto LABEL_80;
            }
            goto LABEL_100;
          }
LABEL_99:
          (*(void (**)(uint64_t, unint64_t))(v2 + 528))(v2, v6);
          if ((v4 & 0x10) == 0)
          {
LABEL_80:
            if ((v4 & 0x20) == 0) {
              goto LABEL_81;
            }
            goto LABEL_101;
          }
LABEL_100:
          (*(void (**)(uint64_t, unint64_t))(v2 + 592))(v2, v6);
          if ((v4 & 0x20) == 0)
          {
LABEL_81:
            (*(void (**)(uint64_t, unint64_t))(v2 + 784))(v2, v6);
            if ((v4 & 0x80) == 0) {
              goto LABEL_83;
            }
            goto LABEL_82;
          }
LABEL_101:
          (*(void (**)(uint64_t, unint64_t))(v2 + 696))(v2, v6);
          uint64_t v166 = *(void *)(v6 + 152);
          uint64_t v165 = *(void *)(v6 + 160);
          uint64_t v167 = *(void *)(v6 + 224);
          *(void *)(v6 + 152) = *(void *)(v6 + 216);
          *(void *)(v6 + 160) = v167;
          *(void *)(v6 + 216) = v166;
          *(void *)(v6 + 224) = v165;
          (*(void (**)(uint64_t, unint64_t))(v2 + 784))(v2, v6);
          if ((v4 & 0x80) == 0)
          {
LABEL_83:
            (*(void (**)(uint64_t, unint64_t))(v2 + 920))(v2, v6);
            (*(void (**)(uint64_t, unint64_t))(v2 + 984))(v2, v6);
            (*(void (**)(uint64_t, unint64_t))(v2 + 1088))(v2, v6);
            if ((v4 & 0x800) != 0)
            {
              (*(void (**)(uint64_t, unint64_t))(v2 + 1176))(v2, v6);
              if ((v4 & 0x1000) == 0)
              {
LABEL_85:
                (*(void (**)(uint64_t, unint64_t))(v2 + 1504))(v2, v6);
                if ((v4 & 0x4000) == 0) {
                  goto LABEL_86;
                }
                goto LABEL_105;
              }
            }
            else if ((v4 & 0x1000) == 0)
            {
              goto LABEL_85;
            }
            (*(void (**)(uint64_t, unint64_t))(v2 + 1368))(v2, v6);
            (*(void (**)(uint64_t, unint64_t))(v2 + 1504))(v2, v6);
            if ((v4 & 0x4000) == 0)
            {
LABEL_86:
              if ((v4 & 0x8000) == 0) {
                goto LABEL_87;
              }
              goto LABEL_106;
            }
LABEL_105:
            (*(void (**)(uint64_t, unint64_t))(v2 + 1576))(v2, v6);
            if ((v4 & 0x8000) == 0)
            {
LABEL_87:
              if ((v4 & 0x10000) == 0) {
                goto LABEL_88;
              }
              goto LABEL_107;
            }
LABEL_106:
            (*(void (**)(uint64_t, unint64_t))(v2 + 1632))(v2, v6);
            if ((v4 & 0x10000) == 0)
            {
LABEL_88:
              if ((v4 & 0x20000) == 0) {
                goto LABEL_89;
              }
              goto LABEL_108;
            }
LABEL_107:
            (*(void (**)(uint64_t, unint64_t))(v2 + 1696))(v2, v6);
            if ((v4 & 0x20000) == 0)
            {
LABEL_89:
              if ((v4 & 0x40000) == 0)
              {
LABEL_91:
                (*(void (**)(uint64_t, unint64_t))(v2 + 2192))(v2, v6);
                (*(void (**)(uint64_t, unint64_t))(v2 + 2248))(v2, v6);
                goto LABEL_92;
              }
LABEL_90:
              (*(void (**)(uint64_t, unint64_t))(v2 + 2000))(v2, v6);
              goto LABEL_91;
            }
LABEL_108:
            (*(void (**)(uint64_t, unint64_t))(v2 + 1744))(v2, v6);
            if ((v4 & 0x40000) == 0) {
              goto LABEL_91;
            }
            goto LABEL_90;
          }
LABEL_82:
          (*(void (**)(uint64_t, unint64_t))(v2 + 848))(v2, v6);
          goto LABEL_83;
        }
LABEL_72:
        uint64_t v131 = (v89 - *(_DWORD *)(v2 + 1752)) & ~(((int)v89 - *(_DWORD *)(v2 + 1752)) >> 31);
        int v132 = (v90 - *(_DWORD *)(v2 + 1760)) & ~(((int)v90 - *(_DWORD *)(v2 + 1760)) >> 31);
        int v133 = (v92 - *(_DWORD *)(v2 + 1768)) & ~(((int)v92 - *(_DWORD *)(v2 + 1768)) >> 31);
        *(void *)(v6 + 1528) = v93
                               - (((v91 - *(_DWORD *)(v2 + 1776)) & ~(((int)v91
                                                                                           - *(_DWORD *)(v2 + 1776)) >> 31))
                                + v133);
        *(void *)(v6 + 1536) = v94 - (v132 + v131);
        *(void *)(v6 + 1544) = v63 + (2 * v133) + v96 * v131;
        *(void *)(v6 + 1552) = v96;
        *(void *)(v6 + 1592) = *(void *)(v6 + 336);
        uint64_t v97 = (void *)(v95 + 2440);
        uint64_t v98 = *(void *)(v6 + 504);
        if ((v39 & 0x40000) == 0) {
          goto LABEL_61;
        }
        goto LABEL_73;
      }
LABEL_49:
      uint64_t v42 = (v20 - *(_DWORD *)(v2 + 704)) & ~(((int)v20 - *(_DWORD *)(v2 + 704)) >> 31);
      int v43 = (v37 - *(_DWORD *)(v2 + 712)) & ~(((int)v37 - *(_DWORD *)(v2 + 712)) >> 31);
      uint64_t v44 = (v27 - *(_DWORD *)(v2 + 720)) & ~(((int)v27 - *(_DWORD *)(v2 + 720)) >> 31);
      *(void *)(v6 + 792) = v34
                            - (((v38 - *(_DWORD *)(v2 + 728)) & ~((v38 - *(_DWORD *)(v2 + 728)) >> 31))
                             + v44);
      *(void *)(v6 + 800) = v26 - (v43 + v42);
      uint64_t v45 = 2 * v44;
      *(void *)(v6 + 808) = v40 + v45 + v41 * v42;
      *(void *)(v6 + 816) = v41;
      uint64_t v46 = *(void *)(v6 + 216);
      uint64_t v47 = *(void *)(v6 + 224);
      *(void *)(v6 + 824) = v47 + v45 + v46 * v42;
      *(void *)(v6 + 832) = v46;
      *(void *)(v6 + 840) = v24 + v42;
      *(void *)(v6 + 848) = v29 + v44;
      *(void *)(v6 + 152) = v46;
      *(void *)(v6 + 160) = v47;
      *(void *)(v6 + 216) = v41;
      *(void *)(v6 + 224) = v40;
      uint64_t v40 = v47;
      uint64_t v41 = v46;
      goto LABEL_50;
    }
  }
LABEL_92:

  return (void *)sub_1DDB10A40((uint64_t)a1, v6);
}

void *sub_1DDB1EAB4(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 64);
  unint64_t v2 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v49 = *(void *)(a1 + 144);
  int v50 = *(_DWORD *)(a1 + 164);
  unint64_t v10 = (char *)sub_1DDBF2084(0x778uLL);
  unint64_t v11 = v10;
  if (!v10) {
    return v11;
  }
  *(void *)unint64_t v10 = v3;
  *((void *)v10 + 1) = v2;
  *((void *)v10 + 2) = v5;
  *((void *)v10 + 3) = v4;
  *((void *)v10 + 12) = v6;
  *((void *)v10 + 13) = v7;
  *((void *)v10 + 14) = v8;
  *((void *)v10 + 15) = v9;
  *((void *)v10 + 10) = v5;
  *((void *)v10 + 11) = v4;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12) {
    unint64_t v3 = *(void *)(a1 + 48) + v12 + *(void *)(a1 + 56);
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (v13) {
    unint64_t v2 = *(void *)(a1 + 32) + v13 + *(void *)(a1 + 40);
  }
  unint64_t v14 = (2 * v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)v10 + 18) = v2;
  *((void *)v10 + 19) = v14;
  *((void *)v10 + 21) = v6;
  *((void *)v10 + 22) = v7;
  *((void *)v10 + 23) = v8;
  *((void *)v10 + 24) = v9;
  unint64_t v15 = ((((v3 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 15) & 0x3FFFFFFFFFFFFFF0;
  *((void *)v10 + 33) = v15;
  unint64_t v16 = v2 >> 1;
  unint64_t v17 = (6 * (v3 >> 1) + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)v10 + 46) = v2 >> 1;
  *((void *)v10 + 47) = v17;
  unint64_t v18 = ((v3 >> 1) + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v19 = (((2 * v3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)v10 + 53) = 0;
  *((void *)v10 + 54) = v19;
  unint64_t v20 = v2 * v14;
  *((void *)v10 + 59) = v14;
  *((void *)v10 + 27) = v14;
  *((void *)v10 + 28) = 0;
  *((void *)v10 + 48) = 0;
  *((void *)v10 + 49) = v18;
  *((void *)v10 + 51) = 0;
  *((void *)v10 + 52) = v18;
  *((void *)v10 + 16) = 0;
  *((void *)v10 + 17) = v3;
  uint64_t v21 = 4 * v2 * v14 + 2048;
  *((void *)v10 + 44) = 0;
  *((void *)v10 + 45) = v3 >> 1;
  *((_OWORD *)v10 + 20) = 0u;
  *((_OWORD *)v10 + 21) = 0u;
  *((_OWORD *)v10 + 18) = 0u;
  *((_OWORD *)v10 + 19) = 0u;
  *((_OWORD *)v10 + 17) = 0u;
  *((void *)v10 + 50) = 0;
  *(_OWORD *)(v10 + 440) = 0u;
  *(_OWORD *)(v10 + 456) = 0u;
  *((_OWORD *)v10 + 32) = 0u;
  *((_OWORD *)v10 + 33) = 0u;
  *((_OWORD *)v10 + 30) = 0u;
  *((_OWORD *)v10 + 31) = 0u;
  if ((v50 & 0x40000) != 0)
  {
    v21 += 2 * v14;
    if (*(float *)(v49 + 292) > 0.0) {
      v21 += 8 * v14;
    }
  }
  unint64_t v22 = v16 * v17;
  unint64_t v48 = v16 * v19;
  unint64_t v46 = (6 * (v3 >> 1) + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v47 = v2 * v18;
  unint64_t v23 = v16 * v17 + v2 * v18 + v16 * v19 + v21;
  unint64_t v24 = v2 * v15;
  if ((v50 & 2) != 0) {
    unint64_t v25 = v2 * v15;
  }
  else {
    unint64_t v25 = 0;
  }
  unint64_t v26 = v23 + v25;
  if ((v50 & 0x20000) != 0)
  {
    unint64_t v27 = v26 - v24;
    if ((v50 & 2) == 0) {
      unint64_t v27 = v23;
    }
    unint64_t v26 = v27 + 4 * v3 * v2;
  }
  unint64_t v28 = v26 + 2064;
  unint64_t v29 = sub_1DDBF2084(v26 + 2064);
  v11[16] = v29;
  if (!v29) {
    return 0;
  }
  if (v28)
  {
    for (unint64_t i = 0; i < v28; i += 4096)
      v29[i] = 0;
  }
  unint64_t v31 = ((unint64_t)(v29 + 15) & 0xFFFFFFFFFFFFFFF0) + 2048;
  v11[44] = v31;
  v11[20] = v31;
  unint64_t v32 = v31 + v20;
  if (v50)
  {
    v11[36] = v32;
    if ((v50 & 2) == 0)
    {
LABEL_22:
      if ((v50 & 8) == 0) {
        goto LABEL_23;
      }
      goto LABEL_33;
    }
  }
  else if ((v50 & 2) == 0)
  {
    goto LABEL_22;
  }
  v11[35] = v32;
  if ((v50 & 8) == 0)
  {
LABEL_23:
    if ((v50 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_34;
  }
LABEL_33:
  v11[37] = v32;
  if ((v50 & 0x10) == 0)
  {
LABEL_24:
    if ((v50 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
LABEL_34:
  v11[38] = v32;
  if ((v50 & 0x20) == 0)
  {
LABEL_25:
    v11[39] = v32;
    if ((v50 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_36;
  }
LABEL_35:
  v11[28] = v32 + v20;
  v11[39] = v32;
  if ((v50 & 0x4000) == 0)
  {
LABEL_26:
    if ((v50 & 0x10000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_37;
  }
LABEL_36:
  v11[40] = v32;
  if ((v50 & 0x10000) == 0)
  {
LABEL_27:
    if ((v50 & 0x20000) == 0) {
      goto LABEL_28;
    }
LABEL_38:
    v11[42] = v32;
    v11[62] = v32;
    v11[63] = v32 + v20;
    unint64_t v33 = v32 + v20 + v20;
    v11[64] = v33;
    v11[60] = v32 + v20;
    if ((v50 & 0x40000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
LABEL_37:
  v11[41] = v32;
  if ((v50 & 0x20000) != 0) {
    goto LABEL_38;
  }
LABEL_28:
  v11[62] = v32;
  v11[63] = v32 + v20;
  unint64_t v33 = v32 + v20 + v20;
  v11[64] = v33;
  v11[60] = v32 + v20;
  if ((v50 & 0x40000) == 0)
  {
LABEL_41:
    unint64_t v36 = v33 + v20;
    unint64_t v38 = v47;
    unint64_t v37 = v48;
    v11[48] = v36;
    v11[51] = v36;
    if ((v50 & 0x1000) == 0) {
      goto LABEL_42;
    }
LABEL_45:
    v11[48] = v32;
    unint64_t v40 = v32 + v22;
    if ((int)v16 <= (int)(v3 >> 1)) {
      int v41 = v3 >> 1;
    }
    else {
      int v41 = v2 >> 1;
    }
    unint64_t v42 = (6 * v41 + 15) & 0xFFFFFFFFFFFFFFF0;
    v11[56] = v40;
    v11[57] = v40 + v42;
    unint64_t v43 = v40 + v42 + v42;
    v11[58] = v43;
    unint64_t v39 = v36 + v22;
    if ((v50 & 0x880) == 0) {
      goto LABEL_52;
    }
    if (v42) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_39:
  v11[61] = v32;
  unint64_t v34 = v33 + 2 * v14;
  v11[63] = v34;
  if (*(float *)(v49 + 292) > 0.0)
  {
    v11[65] = v32;
    v11[66] = v33;
    unint64_t v35 = v33 + v14;
    v11[61] = v35;
    unint64_t v33 = v35 + 9 * v14;
    v11[63] = v33;
    goto LABEL_41;
  }
  unint64_t v36 = v34 + v20;
  unint64_t v38 = v47;
  unint64_t v37 = v48;
  v11[48] = v34 + v20;
  v11[51] = v34 + v20;
  if ((v50 & 0x1000) != 0) {
    goto LABEL_45;
  }
LABEL_42:
  unint64_t v39 = v36 + v22;
  if ((v50 & 0x880) == 0) {
    goto LABEL_52;
  }
LABEL_50:
  unint64_t v42 = (6 * (v3 >> 1) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11[56] = v32;
  v11[57] = v32 + v46;
  unint64_t v43 = v32 + v46 + v46;
  v11[58] = v43;
LABEL_51:
  v11[50] = v43 + v42;
LABEL_52:
  v11[53] = v39;
  v11[55] = v39 + v38;
  unint64_t v44 = v39 + v38 + v37;
  if ((v50 & 2) == 0)
  {
    if ((v50 & 0x20000) == 0) {
      return v11;
    }
    goto LABEL_56;
  }
  v11[34] = v44;
  if ((v50 & 0x20000) != 0) {
LABEL_56:
  }
    v11[43] = v44;
  return v11;
}

void sub_1DDB1EE6C(int a1, void *a2)
{
  if (a2)
  {
    unint64_t v3 = (void *)a2[16];
    if (v3)
    {
      j__free_3(v3);
      a2[16] = 0;
    }
    uint64_t v4 = (void *)a2[67];
    if (v4)
    {
      j__free_3(v4);
      a2[67] = 0;
    }
    j__free_3(a2);
  }
}

void sub_1DDB1EEC8()
{
  if (!qword_1EAB91200)
  {
    uint64_t v0 = (pthread_mutex_t *)sub_1DDBF2024(1uLL, 0x100980uLL);
    if (v0)
    {
      uint64_t v1 = (uint64_t)v0;
      if (!pthread_mutex_init(v0, 0)) {
        qword_1EAB91200 = v1;
      }
    }
  }
}

uint64_t sub_1DDB1EF24(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, float a6, double a7, double a8, float a9, float a10)
{
  if (a6 < 0.0) {
    a6 = 0.0;
  }
  double v10 = a6 * a6;
  double v11 = a9;
  double v12 = a7 / a9;
  double v13 = a8 + a7 * a10;
  if (a2)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = (int)(v11 * sqrt(v10) + 0.5);
    double v17 = 0.0;
    double v18 = 0.0;
    while (1)
    {
      double v19 = v18 * v17;
      if (v18 * v17 >= (v10 - v13) / v12) {
        break;
      }
      *(_WORD *)(a2 + v15) = v16;
      double v18 = v18 + 0.0000152590219;
      double v17 = v17 + 1.0;
      v15 += 2;
      if (--v14 == -65536) {
        goto LABEL_9;
      }
    }
    if ((-(int)v14 & 0xFFFF0000) == 0)
    {
      double v36 = v13 + v19 * v12;
      if (v36 < v10) {
        double v36 = v10;
      }
      int v37 = (int)(v11 * sqrt(v36) + 0.5);
      BOOL v38 = (((double)(unsigned __int16)v37 + 0.5) / v11 * (((double)(unsigned __int16)v37 + 0.5) / v11) - v13) / v12 < v19;
      double v39 = 65536.0;
      if (!v38) {
        double v39 = (((double)(unsigned __int16)v37 + 0.5) / v11 * (((double)(unsigned __int16)v37 + 0.5) / v11) - v13) / v12;
      }
      do
      {
        if (v18 * v17 >= v39)
        {
          LOWORD(v37) = v37 + 1;
          double v39 = (((double)(unsigned __int16)v37 + 0.5) / v11 * (((double)(unsigned __int16)v37 + 0.5) / v11) - v13)
              / v12;
        }
        double v18 = v18 + 0.0000152590219;
        double v17 = v17 + 1.0;
        *(_WORD *)(a2 + v15) = v37;
        v15 += 2;
      }
      while (v15 != 0x20000);
    }
  }
LABEL_9:
  double v20 = sqrt(v11 / 65535.0) * 65535.0;
  if (!a3)
  {
    if (!(a4 | a5)) {
      return result;
    }
    if (a4)
    {
      *(_DWORD *)a4 = 0xFFFF;
      float v32 = *(float *)(result + 316);
      if (a5)
      {
LABEL_25:
        *(_DWORD *)a5 = 0xFFFF;
        float v33 = *(float *)(result + 320);
LABEL_42:
        int v40 = 0;
        double v41 = 0.0;
        double v42 = 0.0;
        double v43 = 1.0 / v11;
        while (1)
        {
          double v44 = v13 + v42 * v41 * v12;
          if (v44 < v10) {
            double v44 = v10;
          }
          double v45 = sqrt(v44) * 0.5;
          double v46 = v43 * (v42 * v41);
          double v47 = v46 - v45;
          double v48 = v46 + v45;
          if (v47 >= 0.0) {
            double v49 = v47;
          }
          else {
            double v49 = 0.0;
          }
          unsigned int v50 = (int)(v20 * (sqrt(v48) - sqrt(v49)));
          if (v41 > (float)(v32 * (float)v50) && a4 != 0)
          {
            *(_DWORD *)a4 = v40;
            if (!a5) {
              return result;
            }
            a4 = 0;
          }
          if (v41 > (float)(v33 * (float)v50) && a5 != 0)
          {
            *(_DWORD *)a5 = v40;
            if (!a4) {
              return result;
            }
            a5 = 0;
          }
          double v42 = v42 + 0.0000152590219;
          double v41 = v41 + 1.0;
          if (++v40 == 0x10000) {
            return result;
          }
        }
      }
    }
    else
    {
      float v32 = 65536.0;
      if (a5) {
        goto LABEL_25;
      }
    }
    float v33 = 65536.0;
    goto LABEL_42;
  }
  uint64_t v21 = 0;
  double v22 = 0.0;
  double v23 = 0.0;
  double v24 = 1.0 / v11;
  do
  {
    double v25 = v13 + v23 * v22 * v12;
    if (v25 < v10) {
      double v25 = v10;
    }
    double v26 = sqrt(v25) * 0.5;
    double v27 = v24 * (v23 * v22);
    double v28 = v27 - v26;
    double v29 = v27 + v26;
    double v22 = v22 + 1.0;
    if (v28 < 0.0) {
      double v28 = 0.0;
    }
    double v23 = v23 + 0.0000152590219;
    *(_WORD *)(a3 + v21) = (int)(v20 * (sqrt(v29) - sqrt(v28)));
    v21 += 2;
  }
  while (v21 != 0x20000);
  if (!a4)
  {
LABEL_20:
    if (!a5) {
      return result;
    }
    goto LABEL_27;
  }
  uint64_t v30 = 0;
  *(_DWORD *)a4 = 0xFFFF;
  double v31 = 0.0;
  while (1)
  {
    LOWORD(v12) = *(_WORD *)(a3 + 2 * v30);
    double v12 = (float)(*(float *)(result + 316) * (float)LODWORD(v12));
    if (v31 > v12) {
      break;
    }
    double v31 = v31 + 1.0;
    if (++v30 == 0x10000) {
      goto LABEL_20;
    }
  }
  *(_DWORD *)a4 = v30;
  if (a5)
  {
LABEL_27:
    uint64_t v34 = 0;
    *(_DWORD *)a5 = 0xFFFF;
    double v35 = 0.0;
    while (1)
    {
      LOWORD(v12) = *(_WORD *)(a3 + 2 * v34);
      double v12 = (float)(*(float *)(result + 320) * (float)LODWORD(v12));
      if (v35 > v12) {
        break;
      }
      double v35 = v35 + 1.0;
      if (++v34 == 0x10000) {
        return result;
      }
    }
    *(_DWORD *)a5 = v34;
  }
  return result;
}

double sub_1DDB1F2A4(unsigned int a1, _WORD *a2, double result, double a4, double a5, double a6, double a7, float a8, float a9)
{
  if (*(float *)&result < 0.0) {
    *(float *)&int64x2_t result = 0.0;
  }
  if (a2)
  {
    int64x2_t result = *(float *)&result * *(float *)&result;
    double v9 = a8;
    double v10 = sqrt(a8 / 65535.0) * 65535.0;
    double v11 = a9;
    if ((int)a1 <= 0)
    {
      a1 = 0;
      double v25 = a7 + a6 * v11;
      double v16 = 0.0;
      double v17 = 0.0;
LABEL_15:
      double v26 = a6 / v9;
      uint64_t v27 = a1;
      double v28 = 1.0 / v9;
      do
      {
        double v29 = v25 + v17 * v16 * v26;
        if (v29 < result) {
          double v29 = result;
        }
        double v30 = sqrt(v29) * 0.5;
        double v31 = v28 * (v17 * v16);
        double v32 = v31 - v30;
        double v33 = v31 + v30;
        double v16 = v16 + 1.0;
        if (v32 < 0.0) {
          double v32 = 0.0;
        }
        double v17 = v17 + 0.0000152590219;
        a2[v27++] = (int)(v10 * (sqrt(v33) - sqrt(v32)));
      }
      while (v27 != 0x10000);
      return result;
    }
    double v12 = a4 / v9;
    double v13 = a5 + a4 * v11;
    uint64_t v14 = a1;
    uint64_t v15 = a2;
    double v16 = 0.0;
    double v17 = 0.0;
    do
    {
      double v18 = v17 * v16;
      double v19 = v13 + v17 * v16 * v12;
      double v16 = v16 + 1.0;
      if (v19 < result) {
        double v19 = result;
      }
      double v20 = sqrt(v19) * 0.5;
      double v21 = 1.0 / v9 * v18;
      double v22 = v21 - v20;
      double v23 = v21 + v20;
      if (v22 >= 0.0) {
        double v24 = v22;
      }
      else {
        double v24 = 0.0;
      }
      double v17 = v17 + 0.0000152590219;
      *v15++ = (int)(v10 * (sqrt(v23) - sqrt(v24)));
      --v14;
    }
    while (v14);
    if (!HIWORD(a1))
    {
      double v25 = a7 + a6 * v11;
      goto LABEL_15;
    }
  }
  return result;
}

char *sub_1DDB1F40C(uint64_t a1, void *a2)
{
  uint64_t v110 = a2[69];
  unint64_t v2 = (char *)a2[70];
  size_t v3 = a2[71];
  uint64_t v4 = (char *)a2[72];
  uint64_t v5 = a2[73];
  int v6 = *(_DWORD *)(a1 + 208);
  int v7 = *(_DWORD *)(a1 + 216);
  int v108 = *(_DWORD *)(a1 + 220);
  int v109 = *(_DWORD *)(a1 + 212);
  int v8 = *(_DWORD *)(a1 + 224);
  uint64_t v98 = a2[68];
  uint64_t v100 = v5;
  size_t v9 = 2 * v98;
  unint64_t v10 = *(void *)(a1 + 232);
  uint64_t v11 = 2 * v3;
  __leuint64_t n = v3;
  uint64_t v86 = 2 * v98;
  uint64_t v96 = 2 * v3;
  uint64_t v106 = 4 * v3;
  if (v2 == v4)
  {
    double v16 = (char *)a2[36];
    double v17 = &v16[v3];
    double v19 = &v16[v3 + v3];
    uint64_t v94 = &v19[v3];
    uint64_t v102 = &v19[v3 + v3];
    int64x2_t result = (char *)memmove(&v16[v3], v2, 4 * v3);
    double v18 = v19;
  }
  else
  {
    uint64_t v12 = a2[71];
    memmove(v4, v2, v9);
    uint64_t v101 = &v4[v5];
    double v13 = &v2[v12];
    memmove(&v4[v5], v13, v9);
    uint64_t v14 = 2 * v5;
    memmove(&v4[v14], &v2[v11], v9);
    int64x2_t result = (char *)memmove(&v101[v14], &v13[v11], v9);
    double v16 = 0;
    double v17 = 0;
    double v18 = 0;
    uint64_t v94 = 0;
    uint64_t v102 = 0;
  }
  double v20 = &v2[v106];
  uint64_t v21 = v100;
  double v22 = &v4[4 * v100];
  uint64_t v23 = v110 - 4;
  double v24 = v2;
  double v25 = v4;
  if ((unint64_t)(v110 - 4) >= 5)
  {
    uint64_t v93 = v17;
    uint64_t v90 = -v106;
    uint64_t v89 = -v96;
    unint64_t v26 = v98 - 4;
    int v111 = v7 + 1;
    int64x2_t result = &v20[v96];
    uint64_t v27 = 4;
    double v28 = &v24[2 * v106];
    double v30 = v102;
    size_t v29 = __len;
    uint64_t v97 = v25;
    uint64_t v99 = v24;
    uint64_t v31 = v23;
    uint64_t v95 = v23;
    int v87 = v6;
    while (1)
    {
      if (v24 == v25)
      {
        uint64_t v91 = v27;
        double v32 = result;
        double v33 = v28;
        int v103 = v30;
        unint64_t v34 = v10;
        double v35 = v18;
        memmove(v16, v20, __len);
        double v28 = v33;
        int64x2_t result = v32;
        uint64_t v27 = v91;
        int v6 = v87;
        double v25 = v97;
        double v24 = v99;
        uint64_t v21 = v100;
        size_t v29 = __len;
        int v107 = v93;
        uint64_t v93 = v35;
        unint64_t v10 = v34;
        double v18 = v94;
        uint64_t v31 = v95;
        uint64_t v94 = v103;
        double v30 = v16;
      }
      else
      {
        int v107 = &v20[v90];
        double v18 = &v20[v89];
        double v30 = v20;
      }
      *(_WORD *)double v22 = *(_WORD *)v20;
      *((_WORD *)v22 + 1) = *((_WORD *)v20 + 1);
      *((_WORD *)v22 + 2) = *((_WORD *)v20 + 2);
      *((_WORD *)v22 + 3) = *((_WORD *)v20 + 3);
      *((_WORD *)v22 + 4) = *((_WORD *)v20 + 4);
      uint64_t v36 = 2 * v10;
      int v37 = &v30[2 * v10];
      BOOL v38 = &v22[2 * v10];
      if (v27)
      {
        if (v10 < v26)
        {
          int v104 = v28;
          unint64_t v69 = v18;
          int v70 = v18 - 4;
          uint64_t v71 = result;
          uint64_t v72 = result;
          uint64_t v73 = v30;
          unsigned int v74 = v22;
          unint64_t v75 = v10;
          do
          {
            int v76 = *(unsigned __int16 *)&v73[2 * v10];
            int v77 = *(unsigned __int16 *)&v70[2 * v10 + 4]
                + *(unsigned __int16 *)&v70[2 * v10 + 8]
                + *(unsigned __int16 *)&v70[2 * v10]
                + *(unsigned __int16 *)&v73[v36 - 4]
                + *(unsigned __int16 *)&v73[v36 + 4]
                + *(unsigned __int16 *)&v72[v36 - 4]
                + *(unsigned __int16 *)&v72[2 * v10]
                + *(unsigned __int16 *)&v72[v36 + 4];
            int v78 = v76;
            if (v77 < v6)
            {
              unsigned int v79 = (v77 + 4) >> 3;
              BOOL v80 = (int)(v79 - v8) > v76 || (int)(v79 + v8) < v76;
              int v78 = v80 ? v79 : *(unsigned __int16 *)&v73[2 * v10];
              BOOL v81 = __OFSUB__(v79, v109);
              int v82 = v79 - v109;
              if (!((v82 < 0) ^ v81 | (v82 == 0))) {
                v78 += (v82 * v108 * (v76 - v78) + 0x8000) >> 16;
              }
            }
            uint64_t v83 = &v74[v36];
            *(_WORD *)uint64_t v83 = v78;
            *((_WORD *)v83 + 1) = *(_WORD *)&v73[v36 + 2];
            if (v78 < v7) {
              *(_WORD *)&v74[2 * v10] = (v7 - ((v111 - v78) >> 1)) & ~(unsigned __int16)((v7 - ((v111 - v78) >> 1)) >> 31);
            }
            v70 += 4;
            v72 += 4;
            v75 += 2;
            v74 += 4;
            v73 += 4;
          }
          while (v75 < v26);
          BOOL v38 = &v74[v36];
          int v37 = &v73[v36];
          size_t v29 = __len;
          double v24 = v99;
          uint64_t v21 = v100;
          double v25 = v97;
          double v18 = v69;
          int64x2_t result = v71;
          goto LABEL_59;
        }
      }
      else if (v10 < v26)
      {
        uint64_t v92 = v18;
        double v39 = v18 - 4;
        int v40 = v30;
        double v41 = v107;
        unint64_t v88 = result;
        double v42 = result;
        int v104 = v28;
        double v43 = v28;
        double v44 = v22;
        unint64_t v45 = v10;
        do
        {
          int v46 = *(unsigned __int16 *)&v41[2 * v10];
          int v47 = *(unsigned __int16 *)&v39[2 * v10];
          int v48 = *(unsigned __int16 *)&v39[v36 + 8];
          int v49 = *(unsigned __int16 *)&v40[v36 - 8];
          signed int v50 = *(unsigned __int16 *)&v40[2 * v10];
          int v51 = *(unsigned __int16 *)&v40[v36 + 8];
          int v52 = *(unsigned __int16 *)&v42[v36 - 4];
          int v53 = *(unsigned __int16 *)&v42[v36 + 4];
          int v54 = *(unsigned __int16 *)&v43[2 * v10];
          int v55 = v47 + v46 + v48 + v49 + v51 + v52 + v53 + v54;
          if (v50 > 0x41)
          {
            signed int v65 = *(unsigned __int16 *)&v40[2 * v10];
            if (v55 < v6)
            {
              signed int v66 = (v55 + 4) >> 3;
              BOOL v67 = v66 - v8 > v50 || v66 + v8 < v50;
              signed int v65 = v67 ? (v55 + 4) >> 3 : *(unsigned __int16 *)&v40[2 * v10];
              if (v66 > v109) {
                v65 += ((v66 - v109) * v108 * (v50 - v65) + 0x8000) >> 16;
              }
            }
          }
          else
          {
            int v56 = ((v47 - v46) & ((v47 - v46) >> 31)) + v46;
            if (v47 > v46) {
              int v46 = *(unsigned __int16 *)&v39[2 * v10];
            }
            int v57 = (v49 - v48) & ((v49 - v48) >> 31);
            if (v49 <= v48) {
              int v49 = *(unsigned __int16 *)&v39[v36 + 8];
            }
            int v58 = ((v52 - v51) & ((v52 - v51) >> 31)) + v51;
            int v59 = (v54 - v53) & ((v54 - v53) >> 31);
            if (v54 <= v53) {
              int v54 = *(unsigned __int16 *)&v42[v36 + 4];
            }
            int v60 = ((v48 - v56 + v57) & ((v48 - v56 + v57) >> 31)) + v56;
            if (v49 <= v46) {
              int v61 = v46;
            }
            else {
              int v61 = v49;
            }
            int v62 = v58 - v60 + ((v53 - v58 + v59) & ((v53 - v58 + v59) >> 31));
            int v63 = (v62 & (v62 >> 31)) + v60;
            if (v54 > v61) {
              int v61 = v54;
            }
            if (5 * v63 > v61 || v50 == 0) {
              signed int v65 = (v55 + 4) >> 3;
            }
            else {
              signed int v65 = *(unsigned __int16 *)&v40[2 * v10];
            }
          }
          uint64_t v68 = &v44[v36];
          *(_WORD *)uint64_t v68 = v65;
          *((_WORD *)v68 + 1) = *(_WORD *)&v40[v36 + 2];
          if (v65 < v7) {
            *(_WORD *)&v44[2 * v10] = (v7 - ((v111 - v65) >> 1)) & ~(unsigned __int16)((v7 - ((v111 - v65) >> 1)) >> 31);
          }
          v42 += 4;
          v39 += 4;
          v45 += 2;
          v44 += 4;
          v43 += 4;
          v41 += 4;
          v40 += 4;
        }
        while (v45 < v26);
        BOOL v38 = &v44[v36];
        int v37 = &v40[v36];
        size_t v29 = __len;
        double v24 = v99;
        uint64_t v21 = v100;
        double v25 = v97;
        double v18 = v92;
        int64x2_t result = v88;
LABEL_59:
        double v28 = v104;
        uint64_t v31 = v95;
      }
      *(_WORD *)BOOL v38 = *(_WORD *)v37;
      *((_WORD *)v38 + 1) = *((_WORD *)v37 + 1);
      *((_WORD *)v38 + 2) = *((_WORD *)v37 + 2);
      if ((v10 & 1) == 0) {
        *((_WORD *)v38 + 3) = *((_WORD *)v37 + 3);
      }
      v10 ^= 1uLL;
      ++v27;
      v20 += v29;
      v22 += v21;
      result += v29;
      v28 += v29;
      double v16 = v107;
      if (v27 == v31) {
        goto LABEL_63;
      }
    }
  }
  size_t v29 = __len;
LABEL_63:
  if (v24 != v25)
  {
    size_t v84 = v29;
    uint64_t v85 = v21;
    memmove(v22, v20, v86);
    memmove(&v22[v85], &v20[v84], v86);
    memmove(&v22[v85 + v85], &v20[v84 + v84], v86);
    return (char *)memmove(&v22[v85 + v85 + v85], &v20[v84 + v84 + v84], v86);
  }
  return result;
}

char *sub_1DDB1FA58(_DWORD *a1, void *a2)
{
  uint64_t v2 = a2[74];
  size_t v3 = (char *)a2[76];
  size_t v4 = a2[77];
  uint64_t v5 = (char *)a2[78];
  uint64_t v6 = a2[79];
  int v7 = (char *)a2[82];
  unsigned int v8 = a1[88];
  int v72 = a1[89];
  int v9 = a1[40];
  uint64_t v63 = a2[81];
  uint64_t v70 = a2[75];
  int v61 = (char *)a2[80];
  bzero(v61, v63 * v70);
  uint64_t v10 = 2 * v4;
  size_t v65 = v4;
  __leuint64_t n = 2 * v2;
  if (v3 == v5)
  {
    uint64_t v12 = &v7[v10];
    memmove(v7, v3, v4);
    unint64_t v69 = &v7[v4];
    int64x2_t result = (char *)memmove(&v7[v4], &v3[v4], v4);
  }
  else
  {
    memmove(v5, v3, 2 * v2);
    int64x2_t result = (char *)memmove(&v5[v6], &v3[v4], 2 * v2);
    uint64_t v12 = 0;
    int v7 = 0;
    unint64_t v69 = 0;
  }
  double v13 = v3;
  uint64_t v14 = &v3[v10];
  signed int v66 = v5;
  uint64_t v15 = &v5[2 * v6];
  int v16 = v72;
  uint64_t v64 = v6;
  BOOL v67 = v13;
  if ((unint64_t)(v70 - 2) >= 3)
  {
    uint64_t v68 = v7;
    double v17 = &v61[2 * v63];
    size_t v18 = v65;
    uint64_t v19 = v10 + 4 * (v65 >> 1);
    uint64_t v60 = -v10;
    unint64_t v20 = v2 - 1;
    uint64_t v21 = (uint64_t)&v13[v19 - 2];
    uint64_t v22 = 2;
    uint64_t v62 = v70 - 2;
    while (1)
    {
      if (v67 == v66)
      {
        int64x2_t result = (char *)memmove(v12, v14, v18);
        int v16 = v72;
        uint64_t v71 = v68;
        uint64_t v68 = v69;
        unint64_t v69 = v12;
      }
      else
      {
        uint64_t v71 = &v14[v60];
        uint64_t v68 = &v14[-v65];
        unint64_t v69 = v14;
      }
      *(_WORD *)uint64_t v15 = *(_WORD *)v14;
      *((_WORD *)v15 + 1) = *((_WORD *)v14 + 1);
      *((_WORD *)v15 + 2) = *((_WORD *)v14 + 2);
      *((_WORD *)v15 + 3) = *((_WORD *)v14 + 3);
      *(_WORD *)&v15[2 * v2 - 2] = *(_WORD *)&v14[2 * v2 - 2];
      unint64_t v23 = (v22 & 1) != 0 ? 3 : 4;
      int v24 = *((unsigned __int8 *)&unk_1EAB8AF48 + (v23 & 3 | (4 * (v22 & 3))) + 48);
      unsigned int v25 = v24 == 1 ? 1 : v24 ^ 2;
      if (v20 > v23) {
        break;
      }
LABEL_6:
      v17 += v63;
      ++v22;
      size_t v18 = v65;
      v14 += v65;
      v15 += v64;
      v21 += v65;
      uint64_t v12 = v71;
      if (v22 == v62) {
        goto LABEL_50;
      }
    }
    uint64_t v26 = *((unsigned __int8 *)&unk_1EAB8AF48 + (v23 & 3 | (4 * (v22 & 3))) + 48);
    int v27 = a1[v26 + 82];
    uint64_t v28 = v25;
    int v29 = a1[v28 + 82];
    int v30 = a1[v26 + 85];
    int v31 = a1[v28 + 85];
    uint64_t v32 = *(void *)&a1[4 * *((unsigned __int8 *)&unk_1EAB8AF48 + (v23 & 3 | (4 * (v22 & 3))) + 48) + 70];
    uint64_t v33 = *(void *)&a1[2 * ((2 * v24) | 1) + 70];
    uint64_t v34 = *(void *)&a1[4 * v25 + 70];
    uint64_t v35 = *(void *)&a1[2 * ((2 * v25) | 1) + 70];
    int64x2_t result = v71 + 2;
    uint64_t v36 = v69 + 6;
    uint64_t v37 = 2 * v23;
    while (1)
    {
      int v40 = &v36[v37];
      uint64_t v41 = *(unsigned __int16 *)&v69[v37];
      uint64_t v42 = *(unsigned __int16 *)&v36[v37 - 4];
      *(_WORD *)&v15[v37] = *(_WORD *)(v32 + 2 * v41);
      double v43 = &v15[2 * v23];
      *((_WORD *)v43 + 1) = *(_WORD *)(v33 + 2 * v42);
      if (v41 <= v8) {
        goto LABEL_38;
      }
      if (v9 == 8) {
        goto LABEL_27;
      }
      int v44 = *((unsigned __int16 *)v40 - 2);
      unint64_t v45 = &v36[v37];
      if ((v22 & 1) == 0) {
        break;
      }
      unsigned int v50 = 16 * ((*((unsigned __int16 *)v45 - 4) + v44 + 1) >> 1);
      int v47 = v50 - v41;
      if (v50 > v41)
      {
LABEL_28:
        unsigned int v48 = ((v41 - v8) * v16 + 1024) >> 11;
        if (v48 >= 0x4000) {
          unsigned int v48 = 0x4000;
        }
        unsigned int v49 = v41 + ((int)(v47 * v48 + 0x2000) >> 14);
        if (HIWORD(v49))
        {
          unsigned int v51 = (v49 - v27) * v30 + 4096;
          unsigned int v49 = v51 >> 13;
          if (v51 >> 28) {
            LOWORD(v49) = 0x7FFF;
          }
        }
        else
        {
          LOWORD(v49) = *(_WORD *)(v32 + 2 * v49);
        }
        *(_WORD *)&v15[v37] = v49;
      }
LABEL_37:
      *(_DWORD *)&v17[(v23 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v23;
LABEL_38:
      uint64_t v52 = *((unsigned __int16 *)v40 - 1);
      uint64_t v53 = *(unsigned __int16 *)v40;
      *((_WORD *)v43 + 2) = *(_WORD *)(v34 + 2 * v52);
      *(_WORD *)&v15[v37 + 6] = *(_WORD *)(v35 + 2 * v53);
      if (v52 <= v8) {
        goto LABEL_22;
      }
      if (v9 == 8) {
        goto LABEL_42;
      }
      if ((v22 & 1) == 0)
      {
        LODWORD(v53) = (*(unsigned __int16 *)&v36[v37 - 8]
                      + 9 * *(unsigned __int16 *)&v36[v37]
                      + 3 * (*(unsigned __int16 *)(v21 + v37 + 4) + *(unsigned __int16 *)&result[v37])
                      + 8) >> 4;
LABEL_42:
        int v54 = 16 * v53 - v52;
        if (16 * (int)v53 > v52) {
          goto LABEL_43;
        }
        goto LABEL_21;
      }
      unsigned int v56 = 16 * ((*((unsigned __int16 *)v40 - 2) + *(unsigned __int16 *)&v36[v37] + 1) >> 1);
      int v54 = v56 - v52;
      if (v56 > v52)
      {
LABEL_43:
        unsigned int v55 = ((v52 - v8) * v16 + 1024) >> 11;
        if (v55 >= 0x4000) {
          unsigned int v55 = 0x4000;
        }
        unsigned int v39 = v52 + ((int)(v54 * v55 + 0x2000) >> 14);
        if (HIWORD(v39))
        {
          unsigned int v38 = (v39 - v29) * v31 + 4096;
          unsigned int v39 = v38 >> 13;
          if (v38 >> 28) {
            LOWORD(v39) = 0x7FFF;
          }
        }
        else
        {
          LOWORD(v39) = *(_WORD *)(v34 + 2 * v39);
        }
        *((_WORD *)v43 + 2) = v39;
      }
LABEL_21:
      *(_DWORD *)&v17[((v23 + 2) >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << (v23 + 2);
LABEL_22:
      v23 += 4;
      v37 += 8;
      if (v23 >= v20) {
        goto LABEL_6;
      }
    }
    int v16 = v72;
    LODWORD(v42) = (*((unsigned __int16 *)v45 - 6)
                  + 9 * v44
                  + 3 * (*(unsigned __int16 *)(v21 + v37) + *(unsigned __int16 *)&result[v37 - 4])
                  + 8) >> 4;
LABEL_27:
    unsigned int v46 = 16 * v42;
    int v47 = 16 * v42 - v41;
    if (v46 > v41) {
      goto LABEL_28;
    }
    goto LABEL_37;
  }
  size_t v18 = v4;
LABEL_50:
  if (v67 != v66)
  {
    size_t v57 = v18;
    memmove(v15, v14, __len);
    return (char *)memmove(&v15[v64], &v14[v57], __len);
  }
  return result;
}

uint64_t sub_1DDB1FFA8(uint64_t result, void *a2)
{
  unint64_t v2 = a2[83];
  uint64_t v3 = a2[84];
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2[86];
    uint64_t v7 = a2[88];
    uint64_t v8 = a2[85];
    uint64_t v9 = a2[87];
    do
    {
      unint64_t v10 = 0;
      uint64_t v11 = (void *)(result + 32 * (v5 & 3));
      uint64_t v12 = v11[50];
      uint64_t v13 = v11[51];
      uint64_t v14 = v11[52];
      uint64_t v15 = v11[53];
      do
      {
        int v16 = (unsigned __int16 *)(v8 + 2 * v10);
        double v17 = (_WORD *)(v9 + 2 * v10);
        *double v17 = *(_WORD *)(v12 + 2 * *v16);
        v17[1] = *(_WORD *)(v13 + 2 * v16[1]);
        void v17[2] = *(_WORD *)(v14 + 2 * v16[2]);
        uint64_t v17[3] = *(_WORD *)(v15 + 2 * v16[3]);
        v10 += 4;
      }
      while (v10 < v2);
      ++v5;
      v8 += v6;
      v9 += v7;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t sub_1DDB20048(_DWORD *a1, void *a2)
{
  uint64_t v2 = a2[89];
  uint64_t v3 = a2[90];
  BOOL v4 = (char *)a2[91];
  unint64_t v5 = a2[92];
  unint64_t v6 = v5 >> 1;
  int v136 = a1[146];
  int v137 = a1[145];
  int v135 = a1[147];
  signed int v139 = a1[143];
  int v140 = a1[142];
  signed int v138 = a1[144];
  uint64_t v7 = (char *)a2[93];
  uint64_t v8 = &v7[2 * (v5 >> 1)];
  size_t v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  memmove(v8, v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t result = (uint64_t)memmove(v7, v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v110 = v3 - 6;
  if ((unint64_t)(v3 - 6) >= 3)
  {
    uint64_t v11 = &v8[2 * v6];
    unint64_t v141 = v2 - 4;
    uint64_t v12 = &v4[2 * v9];
    uint64_t v118 = &v4[8 * v6];
    uint64_t v134 = v118 + 14;
    uint64_t v13 = (2 * v5) | 2;
    uint64_t v132 = (uint64_t)&v4[4 * v6 + 8 + v13];
    uint64_t v14 = &v4[6 * v6];
    uint64_t v131 = v14 + 16;
    uint64_t v121 = v14 + 8;
    uint64_t v120 = (uint64_t)&v4[12 * v6 + 14];
    uint64_t v119 = (uint64_t)&v4[10 * v6 + 8];
    unint64_t v108 = v5 >> 1;
    uint64_t v109 = 8 * v6;
    uint64_t v117 = (uint64_t)&v4[8 * v6 + 8 + v13];
    uint64_t v15 = 2;
    __leuint64_t n = v5 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      int v16 = v11;
      memmove(v11, v12, v9);
      unsigned int __dst = v8;
      int v116 = v16;
      int v133 = v12;
      uint64_t v113 = v15;
      if (v141 < 5)
      {
        memmove(v7, &v12[2 * v6], v9);
        memmove(v8, &v12[2 * v6 + 2 * v6], v9);
        uint64_t result = (uint64_t)memmove(v16, &v12[4 * v6 + 2 * v6], v9);
      }
      else
      {
        int v111 = v7;
        uint64_t v17 = 0;
        uint64_t v114 = v16 + 8;
        int v122 = v7 + 8;
        uint64_t v127 = v7 + 10;
        unint64_t v129 = v8 + 8;
        int v125 = v16 + 18;
        unint64_t v18 = 4;
        signed int v20 = v139;
        signed int v19 = v140;
        signed int v21 = v138;
        do
        {
          int v22 = *(unsigned __int16 *)&v125[v17 - 8];
          int v23 = *(unsigned __int16 *)&v125[v17 - 4];
          int v24 = *(unsigned __int16 *)&v127[v17 + 4];
          int v25 = *(unsigned __int16 *)&v125[v17];
          int v26 = *(unsigned __int16 *)&v134[v17];
          int v27 = *(unsigned __int16 *)&v131[v17 - 4];
          int v28 = *(unsigned __int16 *)&v129[v17 + 4] + 2;
          signed int v29 = (v28 + *(unsigned __int16 *)&v129[v17] + *(unsigned __int16 *)&v131[v17 - 8] + v27) >> 2;
          int v30 = *(unsigned __int16 *)&v129[v17 + 8];
          int v31 = *(unsigned __int16 *)&v131[v17];
          signed int v32 = (v23
               + *(unsigned __int16 *)&v127[v17]
               + *(unsigned __int16 *)&v125[v17 - 12]
               + *(unsigned __int16 *)(v132 + v17)
               + 2) >> 2;
          if (v19 < v22 || (v29 <= v20 ? (BOOL v33 = v32 <= v21) : (BOOL v33 = 0), !v33))
          {
            int v123 = *(unsigned __int16 *)&v125[v17];
            __int16 v34 = sub_1DDB20F44(v22, v29, v32, v137, v136, v135, 0);
            signed int v21 = v138;
            signed int v20 = v139;
            signed int v19 = v140;
            *(_WORD *)&v133[v17 + 10] = v34;
            int v25 = v123;
          }
          signed int v35 = (v22 + v24 + v25 + v26 + 2) >> 2;
          signed int v36 = (v28 + v27 + v30 + v31) >> 2;
          if (v35 > v19 || v36 > v20 || v21 < v23)
          {
            __int16 v39 = sub_1DDB20F44(v35, v36, v23, v137, v136, v135, 2);
            signed int v21 = v138;
            signed int v20 = v139;
            signed int v19 = v140;
            *(_WORD *)&v133[v17 + 14] = v39;
          }
          v18 += 4;
          v17 += 8;
        }
        while (v18 < v141);
        int v40 = &v133[2 * v108];
        memmove(v111, v40, __len);
        uint64_t v41 = 0;
        uint64_t v42 = v116 + 14;
        uint64_t v43 = 7;
        int v45 = v139;
        signed int v44 = v140;
        signed int v46 = v138;
        do
        {
          int v48 = *(unsigned __int16 *)&v122[v41];
          int v49 = *(unsigned __int16 *)&v122[v41 + 4];
          int v50 = *(unsigned __int16 *)&v134[v41];
          int v51 = *(unsigned __int16 *)&v42[v41 - 4] + 1;
          signed int v52 = (v51 + *(unsigned __int16 *)&v134[v41 - 8]) >> 1;
          int v53 = *(unsigned __int16 *)&v42[v41];
          int v54 = *(unsigned __int16 *)&v134[v41 - 4] + 1;
          signed int v55 = (v54 + *(unsigned __int16 *)&v42[v41 - 8]) >> 1;
          if (v52 > v44 || v45 < v48 || v55 > v46)
          {
            __int16 v58 = sub_1DDB20F44(v52, v48, v55, v137, v136, v135, 1);
            signed int v46 = v138;
            int v45 = v139;
            signed int v44 = v140;
            *(_WORD *)&v121[v41] = v58;
          }
          signed int v59 = (v51 + v50) >> 1;
          signed int v60 = (v54 + v53) >> 1;
          if (v59 > v44 || v45 < v49 || v60 > v46)
          {
            __int16 v63 = sub_1DDB20F44(v59, v49, v60, v137, v136, v135, 1);
            signed int v46 = v138;
            int v45 = v139;
            signed int v44 = v140;
            *(_WORD *)&v121[v41 + 4] = v63;
          }
          unint64_t v47 = v43 + 1;
          v43 += 4;
          v41 += 8;
        }
        while (v47 < v141);
        memmove(__dst, &v40[2 * v108], __len);
        uint64_t v124 = &v40[2 * v108];
        uint64_t v64 = 0;
        int v128 = __dst + 18;
        uint64_t v130 = v116 + 14;
        unint64_t v65 = 4;
        signed int v67 = v139;
        signed int v66 = v140;
        signed int v68 = v138;
        do
        {
          signed int v70 = *(unsigned __int16 *)&v128[v64 - 8];
          int v71 = *(unsigned __int16 *)&v128[v64 - 4];
          signed int v72 = (v71
               + *(unsigned __int16 *)&v130[v64 - 4]
               + *(unsigned __int16 *)&v128[v64 - 12]
               + *(unsigned __int16 *)(v117 + v64)
               + 2) >> 2;
          int v73 = *(unsigned __int16 *)(v119 + v64 + 4);
          int v74 = *(unsigned __int16 *)&v122[v64 + 4] + 2;
          signed int v75 = (v74 + *(unsigned __int16 *)&v122[v64] + *(unsigned __int16 *)(v119 + v64) + v73) >> 2;
          int v76 = *(unsigned __int16 *)&v122[v64 + 8];
          int v77 = *(unsigned __int16 *)(v119 + v64 + 8);
          int v78 = *(unsigned __int16 *)&v130[v64];
          int v79 = *(unsigned __int16 *)&v128[v64];
          int v80 = *(unsigned __int16 *)(v120 + v64);
          if (v72 > v66 || v75 > v67 || v68 < v70)
          {
            int v126 = *(unsigned __int16 *)&v128[v64];
            __int16 v83 = sub_1DDB20F44(v72, v75, *(unsigned __int16 *)&v128[v64 - 8], v137, v136, v135, 2);
            int v79 = v126;
            signed int v68 = v138;
            signed int v67 = v139;
            signed int v66 = v140;
            *(_WORD *)&v118[v64 + 10] = v83;
          }
          signed int v84 = (v74 + v73 + v76 + v77) >> 2;
          signed int v85 = (v70 + v78 + v79 + v80 + 2) >> 2;
          if (v66 < v71 || (v84 <= v67 ? (BOOL v86 = v85 <= v68) : (BOOL v86 = 0), !v86))
          {
            __int16 v69 = sub_1DDB20F44(v71, v84, v85, v137, v136, v135, 0);
            signed int v68 = v138;
            signed int v67 = v139;
            signed int v66 = v140;
            *(_WORD *)&v118[v64 + 14] = v69;
          }
          v65 += 4;
          v64 += 8;
        }
        while (v65 < v141);
        unint64_t v6 = v108;
        memmove(v116, &v124[2 * v108], __len);
        signed int v88 = v138;
        int v87 = v139;
        int v89 = v140;
        uint64_t v7 = v111;
        uint64_t v90 = 0;
        uint64_t v91 = __dst + 10;
        uint64_t v92 = 7;
        do
        {
          int v94 = *(unsigned __int16 *)&v114[v90];
          int v95 = *(unsigned __int16 *)&v114[v90 + 4];
          int v96 = *(unsigned __int16 *)&v91[v90 + 4];
          int v97 = *(unsigned __int16 *)(v120 + v90 - 4) + 1;
          signed int v98 = (v97 + *(unsigned __int16 *)&v91[v90 - 4]) >> 1;
          int v99 = *(unsigned __int16 *)(v120 + v90);
          int v100 = *(unsigned __int16 *)&v91[v90] + 1;
          signed int v101 = (v100 + *(unsigned __int16 *)(v120 + v90 - 8)) >> 1;
          if (v98 > v89 || v87 < v94 || v101 > v88)
          {
            __int16 v104 = sub_1DDB20F44(v98, v94, v101, v137, v136, v135, 1);
            signed int v88 = v138;
            int v87 = v139;
            int v89 = v140;
            *(_WORD *)(v119 + v90) = v104;
          }
          uint64_t result = (v97 + v96) >> 1;
          signed int v105 = (v100 + v99) >> 1;
          if ((int)result > v89 || v87 < v95 || v105 > v88)
          {
            uint64_t result = sub_1DDB20F44(result, v95, v105, v137, v136, v135, 1);
            signed int v88 = v138;
            int v87 = v139;
            int v89 = v140;
            *(_WORD *)(v119 + v90 + 4) = result;
          }
          unint64_t v93 = v92 + 1;
          v92 += 4;
          v90 += 8;
        }
        while (v93 < v141);
      }
      uint64_t v15 = v113 + 4;
      uint64_t v12 = &v133[v109];
      v134 += v109;
      v132 += v109;
      v131 += v109;
      v121 += v109;
      v118 += v109;
      v120 += v109;
      v119 += v109;
      uint64_t v8 = v116;
      v117 += v109;
      uint64_t v11 = v7;
      uint64_t v7 = __dst;
      size_t v9 = __len;
    }
    while (v113 + 4 < v110);
  }
  return result;
}

uint64_t sub_1DDB207EC(_DWORD *a1, void *a2)
{
  uint64_t v2 = a2[89];
  uint64_t v3 = a2[90];
  BOOL v4 = (char *)a2[91];
  unint64_t v5 = a2[92];
  unint64_t v6 = v5 >> 1;
  int v135 = a1[146];
  int v136 = a1[145];
  int v134 = a1[147];
  signed int v138 = a1[143];
  int v139 = a1[142];
  signed int v137 = a1[144];
  uint64_t v7 = (char *)a2[93];
  uint64_t v8 = &v7[2 * (v5 >> 1)];
  size_t v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  memmove(v8, v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t result = (uint64_t)memmove(v7, v4, v9);
  unint64_t v112 = v3 - 6;
  if ((unint64_t)(v3 - 6) >= 3)
  {
    uint64_t v11 = &v4[2 * v9];
    uint64_t v12 = &v8[2 * v6];
    unint64_t v140 = v2 - 4;
    uint64_t v132 = (uint64_t)&v4[6 * v6 + 14];
    unint64_t v110 = v6;
    uint64_t v111 = 8 * v6;
    uint64_t v13 = &v4[8 * v6];
    uint64_t v130 = v13 + 12;
    uint64_t v14 = v13 + 8;
    uint64_t v15 = &v4[10 * v6];
    int v122 = v15 + 10;
    int v123 = v14;
    int v16 = &v4[12 * v6];
    uint64_t v121 = v16 + 12;
    uint64_t v115 = (unsigned __int16 *)(v16 + 16);
    int v116 = v15 + 14;
    uint64_t v17 = 2;
    __leuint64_t n = v9;
    do
    {
      unint64_t v18 = v12;
      memmove(v12, v11, v9);
      unsigned int __dst = v7;
      uint64_t v118 = (unsigned __int16 *)v18;
      uint64_t v131 = v11;
      uint64_t v114 = v17;
      if (v140 < 5)
      {
        memmove(v7, &v11[2 * v6], v9);
        memmove(v8, &v11[2 * v6 + 2 * v6], v9);
        uint64_t result = (uint64_t)memmove(v18, &v11[4 * v6 + 2 * v6], v9);
      }
      else
      {
        uint64_t v19 = 0;
        int v128 = v7 + 8;
        int v133 = v18 + 8;
        uint64_t v119 = v8;
        uint64_t v120 = v8 + 8;
        int v126 = v8 + 14;
        unint64_t v20 = 4;
        signed int v22 = v138;
        signed int v21 = v139;
        signed int v23 = v137;
        do
        {
          int v25 = *(unsigned __int16 *)&v133[v19];
          int v26 = *(unsigned __int16 *)&v133[v19 + 4];
          signed int v27 = (v26
               + *(unsigned __int16 *)&v128[v19]
               + *(unsigned __int16 *)&v133[v19 - 4]
               + *(unsigned __int16 *)&v130[v19 - 4]
               + 2) >> 2;
          int v28 = *(unsigned __int16 *)(v132 + v19 - 4);
          int v29 = *(unsigned __int16 *)&v126[v19 - 4] + 2;
          signed int v30 = (v29 + *(unsigned __int16 *)&v126[v19 - 8] + *(unsigned __int16 *)(v132 + v19 - 8) + v28) >> 2;
          int v31 = *(unsigned __int16 *)&v126[v19];
          int v32 = *(unsigned __int16 *)(v132 + v19);
          int v33 = *(unsigned __int16 *)&v128[v19 + 4];
          int v34 = *(unsigned __int16 *)&v133[v19 + 8];
          int v35 = *(unsigned __int16 *)&v130[v19];
          if (v27 > v21 || v30 > v22 || v23 < v25)
          {
            int v124 = *(unsigned __int16 *)&v133[v19 + 4];
            __int16 v38 = sub_1DDB20F44(v27, v30, v25, v136, v135, v134, 2);
            int v26 = v124;
            signed int v23 = v137;
            signed int v22 = v138;
            signed int v21 = v139;
            *(_WORD *)&v131[v19 + 8] = v38;
          }
          signed int v39 = (v29 + v28 + v31 + v32) >> 2;
          signed int v40 = (v25 + v33 + v34 + v35 + 2) >> 2;
          if (v21 < v26 || (v39 <= v22 ? (BOOL v41 = v40 <= v23) : (BOOL v41 = 0), !v41))
          {
            __int16 v24 = sub_1DDB20F44(v26, v39, v40, v136, v135, v134, 0);
            signed int v23 = v137;
            signed int v22 = v138;
            signed int v21 = v139;
            *(_WORD *)&v131[v19 + 12] = v24;
          }
          v20 += 4;
          v19 += 8;
        }
        while (v20 < v140);
        uint64_t v42 = &v131[2 * v110];
        memmove(__dst, v42, __len);
        uint64_t v43 = 0;
        signed int v44 = __dst + 14;
        unint64_t v45 = 4;
        int v47 = v138;
        signed int v46 = v139;
        signed int v48 = v137;
        do
        {
          int v49 = *(unsigned __int16 *)&v44[v43 - 4];
          int v50 = *(unsigned __int16 *)&v44[v43];
          int v51 = *(unsigned __int16 *)&v123[v43 + 8];
          int v52 = *(unsigned __int16 *)&v133[v43 + 4] + 1;
          signed int v53 = (v52 + *(unsigned __int16 *)&v123[v43]) >> 1;
          int v54 = *(unsigned __int16 *)&v133[v43 + 8];
          int v55 = *(unsigned __int16 *)&v123[v43 + 4] + 1;
          signed int v56 = (v55 + *(unsigned __int16 *)&v133[v43]) >> 1;
          if (v53 > v46 || v47 < v49 || v56 > v48)
          {
            __int16 v59 = sub_1DDB20F44(v53, v49, v56, v136, v135, v134, 1);
            signed int v48 = v137;
            int v47 = v138;
            signed int v46 = v139;
            *(_WORD *)(v132 + v43 - 4) = v59;
          }
          signed int v60 = (v52 + v51) >> 1;
          signed int v61 = (v55 + v54) >> 1;
          if (v60 > v46 || v47 < v50 || v61 > v48)
          {
            __int16 v64 = sub_1DDB20F44(v60, v50, v61, v136, v135, v134, 1);
            signed int v48 = v137;
            int v47 = v138;
            signed int v46 = v139;
            *(_WORD *)(v132 + v43) = v64;
          }
          v45 += 4;
          v43 += 8;
        }
        while (v45 < v140);
        memmove(v119, &v42[2 * v110], __len);
        int v125 = &v42[2 * v110];
        uint64_t v65 = 0;
        unint64_t v129 = __dst + 14;
        unint64_t v66 = 4;
        signed int v68 = v138;
        signed int v67 = v139;
        signed int v69 = v137;
        do
        {
          int v70 = *(unsigned __int16 *)&v120[v65];
          int v71 = *(unsigned __int16 *)&v120[v65 + 4];
          int v72 = *(unsigned __int16 *)&v133[v65 + 4];
          int v73 = *(unsigned __int16 *)&v120[v65 + 8];
          int v74 = *(unsigned __int16 *)&v121[v65];
          int v75 = *(unsigned __int16 *)&v122[v65];
          int v76 = *(unsigned __int16 *)&v129[v65 - 4] + 2;
          signed int v77 = (v76 + *(unsigned __int16 *)&v129[v65 - 8] + *(unsigned __int16 *)&v122[v65 - 4] + v75) >> 2;
          int v78 = *(unsigned __int16 *)&v129[v65];
          int v79 = *(unsigned __int16 *)&v122[v65 + 4];
          signed int v80 = (v71
               + *(unsigned __int16 *)&v133[v65]
               + *(unsigned __int16 *)&v120[v65 - 4]
               + *(unsigned __int16 *)&v121[v65 - 4]
               + 2) >> 2;
          if (v67 < v70 || (v77 <= v68 ? (BOOL v81 = v80 <= v69) : (BOOL v81 = 0), !v81))
          {
            int v127 = *(unsigned __int16 *)&v120[v65 + 8];
            __int16 v82 = sub_1DDB20F44(v70, v77, v80, v136, v135, v134, 0);
            signed int v69 = v137;
            signed int v68 = v138;
            signed int v67 = v139;
            *(_WORD *)&v123[v65] = v82;
            int v73 = v127;
          }
          signed int v83 = (v70 + v72 + v73 + v74 + 2) >> 2;
          signed int v84 = (v76 + v75 + v78 + v79) >> 2;
          if (v83 > v67 || v84 > v68 || v69 < v71)
          {
            __int16 v87 = sub_1DDB20F44(v83, v84, v71, v136, v135, v134, 2);
            signed int v69 = v137;
            signed int v68 = v138;
            signed int v67 = v139;
            *(_WORD *)&v123[v65 + 4] = v87;
          }
          v66 += 4;
          v65 += 8;
        }
        while (v66 < v140);
        unint64_t v6 = v110;
        memmove(v118, &v125[2 * v110], __len);
        signed int v89 = v137;
        int v88 = v138;
        int v90 = v139;
        uint64_t v8 = v119;
        uint64_t v91 = v118 + 7;
        uint64_t v92 = v115;
        unint64_t v93 = v116;
        for (unint64_t i = 4; i < v140; i += 4)
        {
          int v95 = &v8[2 * i];
          int v96 = *(v91 - 2);
          int v97 = *v91;
          int v98 = *((unsigned __int16 *)v95 + 4);
          int v99 = *(v92 - 2) + 1;
          signed int v100 = (v99 + *(unsigned __int16 *)v95) >> 1;
          int v101 = *v92;
          int v102 = *((unsigned __int16 *)v95 + 2) + 1;
          signed int v103 = (v102 + *(v92 - 4)) >> 1;
          if (v100 > v90 || v88 < v96 || v103 > v89)
          {
            __int16 v106 = sub_1DDB20F44(v100, v96, v103, v136, v135, v134, 1);
            signed int v89 = v137;
            int v88 = v138;
            int v90 = v139;
            *(v93 - 2) = v106;
          }
          uint64_t result = (v99 + v98) >> 1;
          signed int v107 = (v102 + v101) >> 1;
          if ((int)result > v90 || v88 < v97 || v107 > v89)
          {
            uint64_t result = sub_1DDB20F44(result, v97, v107, v136, v135, v134, 1);
            signed int v89 = v137;
            int v88 = v138;
            int v90 = v139;
            _WORD *v93 = result;
          }
          v91 += 4;
          v92 += 4;
          v93 += 4;
          uint64_t v8 = v119;
        }
      }
      uint64_t v17 = v114 + 4;
      uint64_t v11 = &v131[v111];
      v132 += v111;
      v130 += v111;
      v123 += v111;
      v122 += v111;
      v121 += v111;
      int v116 = (_WORD *)((char *)v116 + v111);
      uint64_t v115 = (unsigned __int16 *)((char *)v115 + v111);
      uint64_t v7 = v8;
      size_t v9 = __len;
      uint64_t v12 = __dst;
      uint64_t v8 = (char *)v118;
    }
    while (v114 + 4 < v112);
  }
  return result;
}

uint64_t sub_1DDB20F44(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a1 >= a4) {
    int v8 = a4;
  }
  else {
    int v8 = a1;
  }
  if (a2 >= a5) {
    int v9 = a5;
  }
  else {
    int v9 = a2;
  }
  if (a3 >= a6) {
    int v10 = a6;
  }
  else {
    int v10 = a3;
  }
  int v11 = v10 - v9 + ((v9 - v8) & ((v9 - v8) >> 31));
  uint64_t result = v10 - (v11 & (v11 >> 31));
  if (a4 > a1 || a5 > a2 || a6 > a3)
  {
    int v13 = 819 * a4 / 1024;
    int v14 = 819 * a5 / 1024;
    int v15 = 819 * a6 / 1024;
    int v16 = a6 + a4;
    if (a6 + a4 < 0 != __OFADD__(a6, a4)) {
      ++v16;
    }
    int v17 = v16 >> 1;
    int v18 = v15 + v13;
    if (v15 + v13 < 0 != __OFADD__(v15, v13)) {
      ++v18;
    }
    int v19 = v18 >> 1;
    int v20 = v10 + v8;
    if (v10 + v8 < 0 != __OFADD__(v10, v8)) {
      ++v20;
    }
    int v21 = v20 >> 1;
    if (v21 <= v19)
    {
      int v22 = 0;
    }
    else if (v21 >= v17)
    {
      int v22 = 0x2000;
    }
    else
    {
      int v22 = ((v21 - v19) << 13) / (v17 - v19);
    }
    int v23 = (0x2000 - v22) * v21 + v22 * result;
    int v24 = v23 + 4096;
    int v25 = v23 + 12287;
    if (v24 >= 0) {
      int v25 = v24;
    }
    int v26 = v25 >> 13;
    if (v26 <= v9) {
      int v26 = v9;
    }
    int v27 = (v9 > v14) << 13;
    if (v9 > v14) {
      int v28 = ((v9 - v14) << 13) / (a5 - v14);
    }
    else {
      int v28 = (v9 > v14) << 13;
    }
    if (a5 <= a2) {
      int v28 = v27;
    }
    int v29 = (0x2000 - v28) * v9 + v28 * v26;
    int v30 = v29 + 4096;
    int v31 = v29 + 12287;
    if (v30 >= 0) {
      int v31 = v30;
    }
    int v32 = v31 >> 13;
    if (a6 >= a4)
    {
      int v36 = v10 + a4;
      if (v10 + a4 < 0 != __OFADD__(v10, a4)) {
        ++v36;
      }
      int v37 = v36 >> 1;
      if (v37 <= v19)
      {
        int v38 = 0;
      }
      else if (v37 >= v17)
      {
        int v38 = 0x2000;
      }
      else
      {
        int v38 = ((v37 - v19) << 13) / (v17 - v19);
      }
      int v47 = (0x2000 - v38) * v37 + v38 * result;
      int v48 = v47 + 4096;
      int v49 = v47 + 12287;
      if (v48 >= 0) {
        int v49 = v48;
      }
      int v50 = v49 >> 13;
      if (v50 <= v8) {
        int v50 = v8;
      }
      int v51 = (v8 > v13) << 13;
      if (v8 > v13) {
        int v52 = ((v8 - v13) << 13) / (a4 - v13);
      }
      else {
        int v52 = (v8 > v13) << 13;
      }
      if (a4 > a1) {
        int v53 = v52;
      }
      else {
        int v53 = v51;
      }
      int v54 = (0x2000 - v53) * v8 + v53 * v50;
      int v55 = v54 + 4096;
      int v56 = v54 + 12287;
      if (v55 >= 0) {
        int v56 = v55;
      }
      int v8 = v56 >> 13;
    }
    else
    {
      int v33 = v8 + a6;
      if (v8 + a6 < 0 != __OFADD__(v8, a6)) {
        ++v33;
      }
      int v34 = v33 >> 1;
      if (v34 <= v19)
      {
        int v35 = 0;
      }
      else if (v34 >= v17)
      {
        int v35 = 0x2000;
      }
      else
      {
        int v35 = ((v34 - v19) << 13) / (v17 - v19);
      }
      int v39 = (0x2000 - v35) * v34 + v35 * result;
      int v40 = v39 + 4096;
      int v41 = v39 + 12287;
      if (v40 >= 0) {
        int v41 = v40;
      }
      int v42 = v41 >> 13;
      if (v42 <= v10) {
        int v42 = v10;
      }
      int v43 = ((v10 - v15) << 13) / (a6 - v15);
      if (v10 <= v15) {
        int v43 = (v10 > v15) << 13;
      }
      if (a6 <= a3) {
        int v43 = (v10 > v15) << 13;
      }
      int v44 = (0x2000 - v43) * v10 + v43 * v42;
      int v45 = v44 + 4096;
      int v46 = v44 + 12287;
      if (v45 >= 0) {
        int v46 = v45;
      }
      int v10 = v46 >> 13;
    }
    int v57 = ((v32 - v8) & ((v32 - v8) >> 31)) + v8;
    int v58 = ((v10 - v57) & ((v10 - v57) >> 31)) + v57;
    if (v58 <= a5)
    {
      int v60 = 0;
    }
    else
    {
      int v59 = ((a6 - a4) & ((a6 - a4) >> 31)) + a4;
      if (v58 >= v59) {
        int v60 = 0x2000;
      }
      else {
        int v60 = ((v58 - a5) << 13) / (v59 - a5);
      }
    }
    v64[0] = v8;
    v64[1] = v32;
    v64[2] = v10;
    int v61 = v64[a7] * (0x2000 - v60) + v60 * ((v10 + v32 + v8) / 3);
    int v62 = v61 + 4096;
    int v63 = v61 + 12287;
    if (v62 >= 0) {
      int v63 = v62;
    }
    return (v63 >> 13);
  }
  return result;
}

unint64_t sub_1DDB21300(uint64_t a1, void *a2)
{
  uint64_t v209 = *(void *)(a1 + 632);
  uint64_t v190 = a2[94];
  uint64_t v2 = a2[95];
  uint64_t v3 = (char *)a2[96];
  unint64_t v4 = a2[97];
  unint64_t v5 = v4 >> 1;
  uint64_t v211 = *(void *)(a1 + 640);
  float64x2_t v186 = (unsigned __int16 *)a2[98];
  unint64_t result = (unint64_t)memmove(v186, v3, 8 * (v4 >> 1));
  uint64_t v180 = v2 - 4;
  if ((unint64_t)(v2 - 4) >= 5)
  {
    uint64_t v207 = 4 * v5;
    uint64_t v212 = &v3[8 * v5];
    uint64_t v7 = (char *)&v186[4 * v5];
    int v8 = (char *)&v186[3 * v5];
    __leuint64_t n = v4 & 0xFFFFFFFFFFFFFFFELL;
    int v9 = (char *)&v186[v4 & 0xFFFFFFFFFFFFFFFELL];
    int v10 = (char *)&v186[v5];
    if ((unint64_t)(v190 - 4) > 4)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      int v213 = 0;
      int v14 = 0;
      int v15 = 0;
      LODWORD(result) = 0;
      int v16 = 0;
      unint64_t v194 = 0;
      uint64_t v206 = 0;
      int v201 = 0;
      int v202 = 0;
      uint64_t v210 = &v3[12 * v5];
      uint64_t v195 = (uint64_t)&v3[14 * v5 + 6];
      uint64_t v196 = (uint64_t)&v3[10 * v5 + 14];
      uint64_t v17 = 4;
LABEL_5:
      int v203 = v16;
      unsigned int v191 = result;
      float64x2_t v183 = v8;
      int v181 = (unsigned __int16 *)v10;
      uint64_t v192 = v10 + 6;
      uint64_t v193 = v8 + 10;
      int v8 = v7;
      uint64_t v18 = v17;
      uint64_t v19 = v12;
      memmove(v7, v212, __len);
      unint64_t result = v191;
      uint64_t v12 = v19;
      uint64_t v20 = 0;
      int v21 = (char *)(v186 + 4);
      int v22 = v9 + 8;
      uint64_t v182 = v18;
      int v23 = 4 * v18;
      int v16 = v203;
      uint64_t v24 = v23 & 0xC;
      uint64_t v184 = ((_BYTE)v23 + 8) & 0xC;
      uint64_t v185 = (v23 + 4) & 0xCLL;
      uint64_t v25 = 8;
      int32x2_t v187 = v9;
      uint64_t v26 = v190;
      uint64_t v189 = v24;
      while (2)
      {
        int v39 = &v9[v20 + 8];
        int v40 = *(unsigned __int16 *)&v212[v20 + 8];
        uint64_t v41 = ((_BYTE)v25 - 4) & 3;
        uint64_t v42 = *(unsigned __int8 *)(v211 + (v41 | v24));
        switch(*(unsigned char *)(v211 + (v41 | v24)))
        {
          case 0:
          case 2:
          case 3:
          case 5:
            int v43 = v22 - 4;
            uint64_t v44 = -4;
            uint64_t v45 = 4;
            unint64_t v46 = __len + 2;
            uint64_t v47 = v207;
            int v48 = v21;
            goto LABEL_63;
          case 1:
            int v48 = &v9[v20 + 4];
            goto LABEL_62;
          case 4:
            int v48 = v22 - 4;
LABEL_62:
            uint64_t v44 = -2;
            int v43 = &v9[v20 + 8];
            uint64_t v45 = 2;
            unint64_t v46 = __len;
            uint64_t v47 = __len + 2;
LABEL_63:
            uint64_t v11 = *(unsigned __int16 *)v48;
            uint64_t v12 = *(unsigned __int16 *)v43;
            uint64_t v13 = *(unsigned __int16 *)&v9[v20 + 12];
            int v213 = *(unsigned __int16 *)&v8[2 * v44 + 8 + v20];
            int v14 = *(unsigned __int16 *)&v8[2 * v45 + 8 + v20];
            int v15 = *(unsigned __int16 *)&v210[v20 + 4];
            unint64_t result = *(unsigned __int16 *)&v212[2 * v46 + 8 + v20];
            int v16 = *(unsigned __int16 *)&v212[2 * v47 + 8 + v20];
            goto LABEL_64;
          case 6:
            goto LABEL_25;
          default:
LABEL_64:
            unsigned int v89 = (v16 + result + v15 + v14 + v213 + v13 + v12 + v11 + 4) >> 3;
            if (3 * v89 < 2 * v40)
            {
              float v208 = &v212[v20];
              if ((int)v12 <= (int)v11) {
                int v28 = v11;
              }
              else {
                int v28 = v12;
              }
              int v29 = v213;
              int v30 = ((v29 - v13) & ((v29 - (int)v13) >> 31)) + v13;
              if (v213 <= (int)v13) {
                int v29 = v13;
              }
              if (v15 <= v14) {
                int v32 = v14;
              }
              else {
                int v32 = v15;
              }
              if (v16 <= (int)result) {
                int v34 = result;
              }
              else {
                int v34 = v16;
              }
              int v27 = ((v12 - v11) & (((int)v12 - (int)v11) >> 31)) + v11;
              int v35 = ((v30 - v27) & ((v30 - v27) >> 31)) + v27;
              if (v29 > v28) {
                int v28 = v29;
              }
              if (v34 <= v32) {
                int v37 = v32;
              }
              else {
                int v37 = v34;
              }
              int v31 = ((v15 - v14) & ((v15 - v14) >> 31)) + v14;
              int v33 = ((v16 - result) & ((v16 - (int)result) >> 31)) + result;
              int v36 = ((v33 - v31) & ((v33 - v31) >> 31)) + v31;
              int v38 = (v36 - v35) & ((v36 - v35) >> 31);
              if (v37 > v28) {
                int v28 = v37;
              }
              if ((int)(11 * (v28 - v35 - v38) + 4 * (v89 - v40)) < 0)
              {
                if (v42 <= 5)
                {
                  if (((1 << v42) & 0x2D) != 0)
                  {
                    signed int v49 = *(unsigned __int16 *)v39;
                    int v50 = *(unsigned __int16 *)&v8[v20 + 4];
                    int v51 = *(unsigned __int16 *)&v8[v20 + 12];
                    int v52 = *(unsigned __int16 *)&v210[v20 + 8];
                    signed int v53 = *(unsigned __int16 *)&v192[v20];
                    int v54 = *(unsigned __int16 *)&v192[v20 + 4];
                    int v55 = *(unsigned __int16 *)&v193[v20 - 8];
                    int v56 = *(unsigned __int16 *)&v193[v20 - 4];
                    int v57 = *(unsigned __int16 *)&v193[v20];
                    int v58 = *(unsigned __int16 *)&v193[v20 + 4];
                    int v188 = v14;
                    uint64_t v59 = v13;
                    uint64_t v60 = v11;
                    int v61 = *(unsigned __int16 *)(v196 + v20 - 12);
                    unsigned int v199 = v12;
                    int v62 = *(unsigned __int16 *)(v196 + v20 - 8);
                    int v63 = *(unsigned __int16 *)(v196 + v20 - 4);
                    int v64 = *(unsigned __int16 *)(v196 + v20);
                    int v65 = *(unsigned __int16 *)(v195 + v20);
                    int v66 = *(unsigned __int16 *)(v195 + v20 + 4);
                    int v204 = v16;
                    int v67 = ((v50 - v49) & ((v50 - v49) >> 31)) + v49;
                    unint64_t v194 = __PAIR64__(v49, v53);
                    if (v50 <= v49) {
                      int v50 = v49;
                    }
                    int v68 = (v52 - v51) & ((v52 - v51) >> 31);
                    if (v52 <= v51) {
                      int v52 = *(unsigned __int16 *)&v8[v20 + 12];
                    }
                    int v69 = v51 - v67 + v68;
                    uint64_t v11 = v60;
                    uint64_t v13 = v59;
                    int v14 = v188;
                    unint64_t result = result;
                    int v201 = (v69 & (v69 >> 31)) + v67;
                    if (v52 <= v50) {
                      int v70 = v50;
                    }
                    else {
                      int v70 = v52;
                    }
                    int v202 = v70;
                    int v71 = ((v54 - v53) & ((v54 - v53) >> 31)) + v53;
                    if (v54 <= v53) {
                      int v72 = *(unsigned __int16 *)&v192[v20];
                    }
                    else {
                      int v72 = *(unsigned __int16 *)&v192[v20 + 4];
                    }
                    int v73 = (v56 - v55) & ((v56 - v55) >> 31);
                    if (v56 <= v55) {
                      int v74 = *(unsigned __int16 *)&v193[v20 - 8];
                    }
                    else {
                      int v74 = *(unsigned __int16 *)&v193[v20 - 4];
                    }
                    int v75 = ((v58 - v57) & ((v58 - v57) >> 31)) + v57;
                    if (v58 <= v57) {
                      int v58 = *(unsigned __int16 *)&v193[v20];
                    }
                    int v76 = (v62 - v61) & ((v62 - v61) >> 31);
                    if (v62 <= v61) {
                      int v62 = *(unsigned __int16 *)(v196 + v20 - 12);
                    }
                    int v77 = ((v64 - v63) & ((v64 - v63) >> 31)) + v63;
                    if (v64 <= v63) {
                      int v64 = *(unsigned __int16 *)(v196 + v20 - 4);
                    }
                    int v78 = (v66 - v65) & ((v66 - v65) >> 31);
                    if (v66 <= v65) {
                      int v66 = *(unsigned __int16 *)(v195 + v20);
                    }
                    int v79 = ((v55 - v71 + v73) & ((v55 - v71 + v73) >> 31)) + v71;
                    if (v74 > v72) {
                      int v72 = v74;
                    }
                    if (v62 <= v58) {
                      int v81 = v58;
                    }
                    else {
                      int v81 = v62;
                    }
                    uint64_t v12 = v199;
                    int v82 = v65 - v77 + v78;
                    int v9 = v187;
                    int v83 = v82 & (v82 >> 31);
                    if (v66 <= v64) {
                      int v84 = v64;
                    }
                    else {
                      int v84 = v66;
                    }
                    uint64_t v24 = v189;
                    uint64_t v26 = v190;
                    int v85 = ((v81 - v72) & ((v81 - v72) >> 31)) - v81 + v84;
                    HIDWORD(v206) = v84 - (v85 & (v85 >> 31));
                    int v80 = (v61 - v75 + v76) & ((v61 - v75 + v76) >> 31);
                    int v86 = ((v75 - v79 + v80) & ((v75 - v79 + v80) >> 31)) + v79;
                    int v87 = v77 - v86;
                    int v16 = v204;
                    int v88 = v87 + v83;
                  }
                  else
                  {
                    unint64_t v141 = &v193[v20];
                    int v142 = *(unsigned __int16 *)&v193[v20 - 4];
                    unint64_t v143 = (unsigned __int16 *)(v196 + v20);
                    if (*(unsigned __int16 *)(v196 + v20 - 4) > v142) {
                      int v142 = *(unsigned __int16 *)(v196 + v20 - 4);
                    }
                    int v202 = v142;
                    HIDWORD(v194) = *(unsigned __int16 *)&v192[v20 + 4];
                    int v144 = ((*(unsigned __int16 *)&v193[v20 + 4] - HIDWORD(v194)) & ((*(unsigned __int16 *)&v193[v20 + 4]
                                                                                    - HIDWORD(v194)) >> 31))
                         + HIDWORD(v194);
                    int v145 = *(unsigned __int16 *)(v196 + v20 - 12)
                         - v144
                         + ((*(unsigned __int16 *)(v195 + v20) - *(unsigned __int16 *)(v196 + v20 - 12)) & ((*(unsigned __int16 *)(v195 + v20) - *(unsigned __int16 *)(v196 + v20 - 12)) >> 31));
                    int v201 = (v145 & (v145 >> 31)) + v144;
                    int v146 = *((unsigned __int16 *)v141 - 4);
                    int v147 = *(v143 - 4);
                    int v148 = *(unsigned __int16 *)v141;
                    int v149 = *v143;
                    if (v148 <= v147) {
                      int v148 = v147;
                    }
                    HIDWORD(v206) = v148;
                    LODWORD(v194) = v146;
                    int v86 = ((*(unsigned __int16 *)&v192[v20] - v146) & ((*(unsigned __int16 *)&v192[v20] - v146) >> 31))
                        + v146;
                    int v88 = *(unsigned __int16 *)(v195 + v20 + 4)
                        - v86
                        + ((v149 - *(unsigned __int16 *)(v195 + v20 + 4)) & ((v149
                                                                            - *(unsigned __int16 *)(v195 + v20 + 4)) >> 31));
                  }
                  LODWORD(v206) = (v88 & (v88 >> 31)) + v86;
                }
                if ((((v40 - 4 * HIDWORD(v206)) & (3 * v206 - HIDWORD(v206)) | (v40 - 4 * v202) & (3 * v201 - v202)) & 0x80000000) == 0) {
LABEL_125:
                }
                  *((_WORD *)v208 + 4) = v89;
              }
            }
            else
            {
              signed int v90 = *(unsigned __int16 *)(v209 + 2 * *(unsigned __int16 *)&v212[v20 + 8]);
              if (*(unsigned __int16 *)(v209 + 2 * v89) > (2 * v90))
              {
                int v91 = ((v12 - v11) & (((int)v12 - (int)v11) >> 31)) + v11;
                int v92 = ((v15 - v14) & ((v15 - v14) >> 31)) + v14;
                int v93 = ((v16 - result) & ((v16 - (int)result) >> 31)) + result;
                int v94 = ((v213 - v13) & ((v213 - (int)v13) >> 31)) + v13 - v91;
                int v95 = (v94 & (v94 >> 31)) + v91;
                int v96 = ((v93 - v92) & ((v93 - v92) >> 31)) + v92 - v95;
                uint64_t v97 = *(unsigned __int16 *)(v209 + 2 * ((v96 & (v96 >> 31)) + v95));
                if ((int)(v97 - 4 * *(unsigned __int16 *)(*(void *)(a1 + 8 * v42 + 648) + 2 * v97)) > v90)
                {
                  float v208 = &v212[v20];
                  if (v42 > 5)
                  {
                    unsigned int v137 = v202;
                    int v139 = *(unsigned __int16 *)(v209 + 2 * v201);
                    unsigned int v138 = v194;
                    unsigned int v140 = HIDWORD(v194);
                  }
                  else
                  {
                    int v205 = v16;
                    unsigned int v200 = v12;
                    if (((1 << v42) & 0x2D) != 0)
                    {
                      int v98 = *(unsigned __int16 *)v39;
                      int v99 = *(unsigned __int16 *)&v8[v20 + 4];
                      int v100 = *(unsigned __int16 *)&v8[v20 + 12];
                      int v101 = *(unsigned __int16 *)&v210[v20 + 8];
                      int v102 = *(unsigned __int16 *)&v192[v20];
                      int v103 = *(unsigned __int16 *)&v192[v20 + 4];
                      int v104 = *(unsigned __int16 *)&v193[v20 - 8];
                      int v105 = *(unsigned __int16 *)&v193[v20 - 4];
                      int v106 = *(unsigned __int16 *)&v193[v20];
                      int v107 = *(unsigned __int16 *)&v193[v20 + 4];
                      int v108 = *(unsigned __int16 *)(v196 + v20 - 12);
                      int v109 = *(unsigned __int16 *)(v196 + v20 - 8);
                      int v110 = *(unsigned __int16 *)(v196 + v20 - 4);
                      int v111 = *(unsigned __int16 *)(v196 + v20);
                      int v112 = ((v99 - v98) & ((v99 - v98) >> 31)) + v98;
                      if (v99 > v98) {
                        int v98 = *(unsigned __int16 *)&v8[v20 + 4];
                      }
                      int v113 = (v101 - v100) & ((v101 - v100) >> 31);
                      if (v101 <= v100) {
                        int v101 = *(unsigned __int16 *)&v8[v20 + 12];
                      }
                      int v114 = ((v100 - v112 + v113) & ((v100 - v112 + v113) >> 31)) + v112;
                      if (v101 <= v98) {
                        unsigned int v115 = v98;
                      }
                      else {
                        unsigned int v115 = v101;
                      }
                      int v116 = ((v103 - v102) & ((v103 - v102) >> 31)) + v102;
                      if (v103 <= v102) {
                        int v117 = *(unsigned __int16 *)&v192[v20];
                      }
                      else {
                        int v117 = *(unsigned __int16 *)&v192[v20 + 4];
                      }
                      int v118 = v105 - v104;
                      if (v105 <= v104) {
                        int v119 = *(unsigned __int16 *)&v193[v20 - 8];
                      }
                      else {
                        int v119 = *(unsigned __int16 *)&v193[v20 - 4];
                      }
                      int v120 = ((v107 - v106) & ((v107 - v106) >> 31)) + v106;
                      if (v107 <= v106) {
                        int v121 = *(unsigned __int16 *)&v193[v20];
                      }
                      else {
                        int v121 = *(unsigned __int16 *)&v193[v20 + 4];
                      }
                      int v122 = v109 - v108;
                      if (v109 <= v108) {
                        int v123 = *(unsigned __int16 *)(v196 + v20 - 12);
                      }
                      else {
                        int v123 = *(unsigned __int16 *)(v196 + v20 - 8);
                      }
                      int v124 = ((v111 - v110) & ((v111 - v110) >> 31)) + v110;
                      if (v111 > v110) {
                        int v110 = *(unsigned __int16 *)(v196 + v20);
                      }
                      int v125 = v104 - v116 + (v118 & (v118 >> 31));
                      int v126 = *(unsigned __int16 *)(v195 + v20);
                      int v127 = *(unsigned __int16 *)(v195 + v20 + 4);
                      int v128 = (v125 & (v125 >> 31)) + v116;
                      int v129 = v127 - v126;
                      if (v127 <= v126) {
                        int v127 = *(unsigned __int16 *)(v195 + v20);
                      }
                      if (v119 > v117) {
                        int v117 = v119;
                      }
                      int v130 = v108 - v120 + (v122 & (v122 >> 31));
                      int v131 = v123 <= v121 ? v121 : v123;
                      int v132 = v126 - v124 + (v129 & (v129 >> 31));
                      int v133 = v127 <= v110 ? v110 : v127;
                      int v9 = v187;
                      int v134 = ((v131 - v117) & ((v131 - v117) >> 31)) - v131 + v133;
                      HIDWORD(v206) = v133 - (v134 & (v134 >> 31));
                      int v135 = v120 - v128 + (v130 & (v130 >> 31));
                      uint64_t v136 = v41 | v184;
                      unsigned int v137 = v115;
                      LODWORD(v206) = ((v124 - ((v135 & (v135 >> 31)) + v128) + (v132 & (v132 >> 31))) & ((v124 - ((v135 & (v135 >> 31)) + v128) + (v132 & (v132 >> 31))) >> 31))
                                    + (v135 & (v135 >> 31))
                                    + v128;
                      unsigned int v138 = *(unsigned __int16 *)(*(void *)(a1
                                                             + 648
                                                             + 8
                                                             * *(unsigned __int8 *)(v211
                                                                                  + (((_BYTE)v25 - 3) & 3 | (unint64_t)v185)))
                                                 + 2 * *(unsigned __int16 *)(v209 + 2 * (int)v206));
                      int v201 = v114;
                      int v139 = *(unsigned __int16 *)(v209 + 2 * v114);
                      unsigned int v140 = *(unsigned __int16 *)(*(void *)(a1 + 648 + 8 * *(unsigned __int8 *)(v211 + v136))
                                                 + 2 * *(unsigned __int16 *)(v209 + 2 * v114));
                    }
                    else
                    {
                      int v150 = *(unsigned __int16 *)&v192[v20 + 4];
                      uint64_t v151 = &v193[v20];
                      int v152 = *(unsigned __int16 *)&v193[v20 + 4];
                      int v153 = *(unsigned __int16 *)&v193[v20 - 4];
                      uint64_t v154 = (unsigned __int16 *)(v196 + v20);
                      int v155 = *(unsigned __int16 *)(v196 + v20 - 4);
                      int v156 = *(unsigned __int16 *)(v196 + v20 - 12);
                      int v157 = *(unsigned __int16 *)(v195 + v20);
                      int v158 = ((v152 - v150) & ((v152 - v150) >> 31)) + v150;
                      if (v152 > v150) {
                        int v150 = *(unsigned __int16 *)&v193[v20 + 4];
                      }
                      int v159 = (v155 - v153) & ((v155 - v153) >> 31);
                      if (v155 <= v153) {
                        int v155 = *(unsigned __int16 *)&v193[v20 - 4];
                      }
                      int v160 = ((v157 - v156) & ((v157 - v156) >> 31)) + v156;
                      if (v157 > v156) {
                        int v156 = *(unsigned __int16 *)(v195 + v20);
                      }
                      int v161 = v156 - v155 + ((v155 - v150) & ((v155 - v150) >> 31));
                      int v162 = v161 & (v161 >> 31);
                      int v163 = ((v153 - v158 + v159) & ((v153 - v158 + v159) >> 31)) + v158;
                      int v201 = ((v160 - v163) & ((v160 - v163) >> 31)) + v163;
                      int v139 = *(unsigned __int16 *)(v209 + 2 * v201);
                      unsigned int v164 = v156 - v162;
                      int v165 = *((unsigned __int16 *)v151 - 4);
                      int v166 = *(unsigned __int16 *)&v192[v20];
                      int v167 = *(v154 - 4);
                      int v168 = *(unsigned __int16 *)v151;
                      int v169 = *(unsigned __int16 *)(v195 + v20 + 4);
                      int v170 = *v154;
                      int v171 = ((v166 - v165) & ((v166 - v165) >> 31)) + v165;
                      if (v166 > v165) {
                        int v165 = *(unsigned __int16 *)&v192[v20];
                      }
                      int v172 = (v168 - v167) & ((v168 - v167) >> 31);
                      if (v168 <= v167) {
                        int v168 = v167;
                      }
                      int v173 = ((v170 - v169) & ((v170 - v169) >> 31)) + v169;
                      if (v170 > v169) {
                        int v169 = v170;
                      }
                      int v174 = v169 - v168 + ((v168 - v165) & ((v168 - v165) >> 31));
                      HIDWORD(v206) = v169 - (v174 & (v174 >> 31));
                      unsigned int v140 = *(unsigned __int16 *)(*(void *)(a1
                                                             + 648
                                                             + 8
                                                             * *(unsigned __int8 *)(v211
                                                                                  + (((_BYTE)v25 - 3) & 3 | (unint64_t)v185)))
                                                 + 2 * *(unsigned __int16 *)(v209 + 2 * v201));
                      int v175 = v167 - v171;
                      unsigned int v137 = v164;
                      int v176 = ((v175 + v172) & ((v175 + v172) >> 31)) + v171;
                      LODWORD(v206) = ((v173 - v176) & ((v173 - v176) >> 31)) + v176;
                      unsigned int v138 = *(unsigned __int16 *)(*(void *)(a1
                                                             + 648
                                                             + 8
                                                             * *(unsigned __int8 *)(v211
                                                                                  + (((_BYTE)v25 - 1) & 3 | (unint64_t)v185)))
                                                 + 2 * *(unsigned __int16 *)(v209 + 2 * (int)v206));
                    }
                    uint64_t v24 = v189;
                    uint64_t v26 = v190;
                    uint64_t v12 = v200;
                    int v16 = v205;
                  }
                  unint64_t v194 = __PAIR64__(v140, v138);
                  int v202 = v137;
                  if (*(unsigned __int16 *)(v209 + 2 * v137) - v139 < (int)(4 * v140)
                    && *(unsigned __int16 *)(v209 + 2 * HIDWORD(v206)) - *(unsigned __int16 *)(v209 + 2 * (int)v206) < (int)(4 * v138))
                  {
                    goto LABEL_125;
                  }
                }
              }
            }
LABEL_25:
            v21 += 2;
            v22 += 2;
            ++v25;
            v20 += 2;
            if (v26 != v25) {
              continue;
            }
            uint64_t v17 = v182 + 1;
            v212 += __len;
            v210 += __len;
            v196 += __len;
            v195 += __len;
            uint64_t v7 = (char *)v186;
            float64x2_t v186 = v181;
            int v10 = v9;
            int v9 = v183;
            if (v182 + 1 != v180) {
              goto LABEL_5;
            }
            return result;
        }
      }
    }
    uint64_t v177 = v2 - 8;
    unsigned int v178 = (char *)&v186[v5];
    do
    {
      uint64_t v179 = (unsigned __int16 *)v178;
      unsigned int v178 = v9;
      int v9 = v8;
      int v8 = v7;
      unint64_t result = (unint64_t)memmove(v7, v212, __len);
      v212 += __len;
      uint64_t v7 = (char *)v186;
      float64x2_t v186 = v179;
      --v177;
    }
    while (v177);
  }
  return result;
}

void sub_1DDB21E80(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[100];
  int v4 = *(_DWORD *)(a1 + 160) - 4;
  if (v4 > 4)
  {
    int v79 = 0;
    int v6 = 0;
    int v86 = &byte_1EAB8AF58;
    if ((int)v3 < 1) {
      return;
    }
  }
  else
  {
    uint64_t v5 = 4 * v4;
    int v79 = *(_DWORD *)((char *)&unk_1DDBFE388 + v5);
    int v6 = *(_DWORD *)((char *)&unk_1DDBFE39C + v5);
    int v86 = off_1E6D054F0[v4];
    if ((int)v3 < 1) {
      return;
    }
  }
  uint64_t v7 = a2[99];
  if ((int)v7 >= 1)
  {
    int v87 = 0;
    int v8 = 0;
    int v89 = 0;
    int v9 = 0;
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0;
    int v13 = 0;
    int v84 = 0;
    int v14 = 0;
    uint64_t v91 = a2[103];
    uint64_t v71 = a2[104];
    unint64_t v15 = *(void *)(a1 + 768);
    double v16 = 1.0 / ((double)v15 * 0.5);
    double v77 = v16 * *(float *)(a1 + 752);
    double v78 = v16 * *(float *)(a1 + 748);
    float v17 = -((float)(unint64_t)a2[105] - (float)*(unint64_t *)(a1 + 776) * 0.5);
    float v18 = -((float)(unint64_t)a2[106] - (float)v15 * 0.5);
    LODWORD(v90) = *(_DWORD *)(a1 + 736);
    HIDWORD(v90) = *(_DWORD *)(a1 + 756);
    double v70 = (float)-v18;
    double v80 = v17;
    double v81 = v18;
    double v19 = (float)-v17;
    float v82 = 0.0;
    int v75 = v6 ^ 1;
    int v76 = 2 - v6;
    uint64_t v73 = a2[102] >> 1;
    uint64_t v74 = a2[101];
    double v20 = -0.5;
    uint64_t v85 = v74;
    float v21 = 0.0;
    uint64_t v83 = a2[100];
    do
    {
      uint64_t v22 = 0;
      int v72 = v14;
      int v88 = 4 * (v14 & 3);
      double v23 = v70;
      do
      {
        float v24 = v16 * sqrt(v19 * v19 + v23 * v23);
        if (v90) {
          float v25 = v24;
        }
        else {
          float v25 = 1.0;
        }
        if (!v90 || (int v26 = v86[v22 & 3 | v88], v26 == 1) || v26 == 4 || v26 == 6)
        {
LABEL_67:
          int v66 = *(unsigned __int16 *)(v85 + 2 * v22);
          if (HIDWORD(v90))
          {
LABEL_68:
            long double v68 = pow(v25, *(float *)(a1 + 760));
            double v20 = -0.5;
            *(float *)&long double v68 = v68;
            int v69 = llround(((float)(*(float *)(a1 + 764) * *(float *)&v68) + 1.0) * (float)v66);
            int v66 = ((0xFFFF - (v69 & ~(v69 >> 31))) & ((0xFFFF - (v69 & ~(v69 >> 31))) >> 31)) + (v69 & ~(v69 >> 31));
          }
        }
        else
        {
          double v27 = v19;
          double v28 = v23;
          switch(v86[v22 & 3 | v88])
          {
            case 0:
            case 3:
              long double v29 = pow(v25, *(float *)(a1 + 740));
              double v20 = -0.5;
              *(float *)&long double v29 = v29;
              double v30 = *(float *)&v29;
              double v31 = v78;
              goto LABEL_20;
            case 2:
            case 5:
              long double v32 = pow(v25, *(float *)(a1 + 744));
              double v20 = -0.5;
              *(float *)&long double v32 = v32;
              double v30 = *(float *)&v32;
              double v31 = v77;
LABEL_20:
              double v33 = v31 * v30 + 1.0;
              double v28 = v23 * v33;
              double v27 = v19 * v33;
              break;
            default:
              break;
          }
          switch(v26)
          {
            case 0:
            case 2:
              int v34 = v75;
              goto LABEL_24;
            case 3:
            case 5:
              int v34 = v76;
LABEL_24:
              int v84 = v34;
              break;
            default:
              break;
          }
          float v35 = (v27 + v80) * 0.5;
          unsigned int v36 = vcvtms_s32_f32(v35);
          float v37 = v35 - (float)(int)floorf(v35);
          float v38 = (v28 + v81 - (float)v84) * 0.5;
          unsigned int v39 = vcvtms_s32_f32(v38);
          float v40 = v38 - (float)(int)floorf(v38);
          int v41 = 2 * (((_BYTE)v39 + (_BYTE)v36) & 1);
          int v42 = 2 * v36;
          uint64_t v43 = v84 + 2 * v39;
          uint64_t v44 = v12;
          uint64_t v45 = v10;
          int v46 = v83;
          switch(v26)
          {
            case 0:
            case 3:
              double v47 = v40;
              if (v41 == v79)
              {
                int v8 = v42 + 2;
                double v48 = v37 * 0.5;
                float v21 = v48 + v47 * 0.5;
                if (v40 > v37)
                {
                  uint64_t v45 = (v43 + 2);
                  int v9 = v42 - 2;
                  int v87 = v43 + 4;
                  double v49 = -(v48 - v47 * 0.5);
                  goto LABEL_37;
                }
                uint64_t v44 = (v43 - 2);
                int v11 = v42 + 4;
                int v87 = v43 + 2;
                double v60 = v47 * 0.5 + 1.0 + v37 * v20;
                goto LABEL_65;
              }
              float v55 = 1.0 - v40;
              double v56 = v47 * v20 + 0.5;
              double v57 = v37;
              float v21 = v56 + v37 * 0.5;
              if (v55 > v37)
              {
                uint64_t v44 = (v43 + 2);
                int v11 = v42 + 2;
                int v9 = v42 - 2;
                int v87 = v43 - 2;
                double v54 = v56 + v57 * v20;
                goto LABEL_34;
              }
              int v13 = v42 + 2;
              uint64_t v44 = (v43 + 4);
              int v11 = v42 + 4;
              uint64_t v45 = (v43 + 2);
              double v61 = v47 * v20 + 1.5 + v57 * v20;
              goto LABEL_45;
            case 1:
            case 4:
              goto LABEL_46;
            case 2:
            case 5:
              double v50 = v40;
              double v51 = v37;
              if (v41 == v79)
              {
                float v52 = 1.0 - v40;
                double v53 = v50 * v20 + 0.5;
                float v21 = v53 + v51 * 0.5;
                if (v52 > v37)
                {
                  uint64_t v44 = (v43 + 2);
                  int v11 = v42 + 2;
                  int v9 = v42 - 2;
                  int v87 = v43 - 2;
                  double v54 = v53 + v51 * v20;
LABEL_34:
                  float v58 = v54;
                  float v82 = v58;
                  int v13 = v42;
                  uint64_t v45 = v43;
                  int v89 = v43;
LABEL_38:
                  int v8 = v42;
                  if (v13 >= (int)v83) {
                    goto LABEL_66;
                  }
                  goto LABEL_47;
                }
                int v13 = v42 + 2;
                uint64_t v44 = (v43 + 4);
                int v11 = v42 + 4;
                uint64_t v45 = (v43 + 2);
                double v61 = v50 * v20 + 1.5 + v51 * v20;
LABEL_45:
                float v62 = v61;
                float v82 = v62;
                int v9 = v42;
                int v89 = v45;
                int v8 = v13;
                int v87 = v43;
LABEL_46:
                if (v13 >= (int)v83)
                {
LABEL_66:
                  uint64_t v10 = v45;
                  uint64_t v12 = v44;
                  goto LABEL_67;
                }
              }
              else
              {
                int v8 = v42 + 2;
                float v21 = v51 * 0.5 + v50 * 0.5;
                if (v40 > v37)
                {
                  uint64_t v45 = (v43 + 2);
                  int v9 = v42 - 2;
                  int v87 = v43 + 4;
                  double v49 = -(v51 * 0.5 - v50 * 0.5);
LABEL_37:
                  int v13 = v42;
                  float v59 = v49;
                  float v82 = v59;
                  uint64_t v44 = v43;
                  int v11 = v8;
                  int v89 = v45;
                  goto LABEL_38;
                }
                uint64_t v44 = (v43 - 2);
                int v11 = v42 + 4;
                int v87 = v43 + 2;
                double v60 = v50 * 0.5 + 1.0 + v51 * v20;
LABEL_65:
                float v67 = v60;
                float v82 = v67;
                int v13 = v8;
                uint64_t v45 = v43;
                int v9 = v42;
                int v89 = v43;
                if (v8 >= (int)v83) {
                  goto LABEL_66;
                }
              }
LABEL_47:
              if (v13 < 0
                || v11 < 0
                || v9 < 0
                || v8 < 0
                || v11 >= v46
                || v9 >= v46
                || v8 >= v46
                || (v44 & 0x80000000) != 0
                || (v45 & 0x80000000) != 0
                || v89 < 0
                || v87 < 0
                || (int)v44 >= (int)v7
                || (int)v45 >= (int)v7
                || v89 >= (int)v7
                || v87 >= (int)v7)
              {
                goto LABEL_66;
              }
              uint64_t v12 = v44;
              unsigned int v63 = *(unsigned __int16 *)(v74 + 2 * (v73 * v13 + v44));
              uint64_t v10 = v45;
              unsigned int v64 = *(unsigned __int16 *)(v74 + 2 * (v73 * v9 + v89));
              float v65 = (float)v63
                  + (float)((float)(int)(*(unsigned __int16 *)(v74 + 2 * (v73 * v11 + v45))
                                       - v63)
                          * v21);
              int v66 = llroundf(v65+ (float)((float)((float)((float)v64+ (float)((float)(int)(*(unsigned __int16 *)(v74+ 2* (v73 * v8+ v87))- v64)* v21))- v65)* v82));
              if (HIDWORD(v90)) {
                goto LABEL_68;
              }
              break;
            default:
              uint64_t v44 = v12;
              uint64_t v45 = v10;
              int v46 = v83;
              if (v13 >= (int)v83) {
                goto LABEL_66;
              }
              goto LABEL_47;
          }
        }
        *(_WORD *)(v91 + 2 * v22) = v66;
        double v23 = v23 + 1.0;
        ++v22;
      }
      while (v7 != v22);
      int v14 = v72 + 1;
      v91 += v71;
      double v19 = v19 + 1.0;
      v85 += 2 * v73;
    }
    while (v72 + 1 != v83);
  }
}

unint64_t sub_1DDB22654(uint64_t a1, void *a2)
{
  int v155 = (unsigned __int16 *)a2[109];
  unint64_t v156 = a2[107];
  unint64_t v2 = a2[110];
  uint64_t v153 = a2[111];
  unint64_t v154 = v2 >> 1;
  uint64_t v152 = a2[112] >> 1;
  int v160 = *(_DWORD *)(a1 + 828);
  int v161 = *(_DWORD *)(a1 + 824);
  int v151 = *(_DWORD *)(a1 + 160);
  unint64_t v148 = v2;
  unint64_t v149 = v2 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v150 = a2[108];
  unint64_t v3 = v150 - 3;
  if ((unint64_t)(v150 - 3) >= 3)
  {
    if (v156 - 3 <= 2)
    {
      unint64_t v58 = 2;
      do
        v58 += 2;
      while (v58 < v3);
    }
    else
    {
      int v4 = *(_DWORD *)(a1 + 832);
      uint64_t v5 = *(void *)(a1 + 840);
      if (v151 == 4) {
        uint64_t v6 = -1;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = 2 * v152 + v153 + 6;
      uint64_t v8 = a2[109];
      uint64_t v9 = 2 * (v154 - (v151 == 4)) + 10;
      uint64_t v10 = 2 * v6 + 8 * v154 + 4;
      uint64_t v11 = 4 * v154 + 2 * v6 + 8;
      uint64_t v12 = 2 * v6 + 6 * v154 + 10;
      uint64_t v13 = 2 * v6 + 10 * v154 + 6;
      uint64_t v14 = 2;
      do
      {
        uint64_t v157 = v8;
        uint64_t v158 = v14;
        uint64_t v15 = v14 & 2;
        uint64_t v159 = v7;
        unint64_t v16 = 2;
        do
        {
          int v31 = *(unsigned __int16 *)(v8 + v9 - 8);
          int v32 = *(unsigned __int16 *)(v8 + v9 - 4);
          int v33 = *(unsigned __int16 *)(v8 + v9);
          int v34 = *(unsigned __int16 *)(v8 + v12 - 8);
          int v35 = *(unsigned __int16 *)(v8 + v12 - 4);
          int v36 = *(unsigned __int16 *)(v8 + v12);
          int v37 = *(unsigned __int16 *)(v8 + v13 - 4);
          int v38 = *(unsigned __int16 *)(v8 + v13);
          int v39 = *(unsigned __int16 *)(v8 + v13 + 4);
          int v40 = v33 - v37 + 2 * (v36 - v34) + v39 - v31;
          int v41 = v39 - v31 - (v33 - v37) + 2 * (v38 - v32);
          unsigned int v42 = (0xFA1144AF >> (((v41 - ((v40 * v4 + 1024) >> 11)) & 0x8000000 | (((v41 * v4 + 1024) >> 11) + v40) & 0x4000000 | (v40 - ((v41 * v4 + 1024) >> 11)) & 0x2000000 | (-v41 - ((v40 * v4 + 1024) >> 11)) & 0x1000000u) >> 23)) & 3;
          int v43 = *(unsigned __int16 *)(v8 + v11);
          int v44 = *(unsigned __int16 *)(v8 + v10);
          int v45 = *(unsigned __int16 *)(v8 + v11 - 4);
          int v46 = *(unsigned __int16 *)(v8 + v10 + 4);
          unsigned int v47 = ((v43 - v44 + 2) >> 2) * ((v43 - v44 + 2) >> 2) + ((v45 - v46 + 2) >> 2) * ((v45 - v46 + 2) >> 2);
          if (HIBYTE(v47)) {
            unsigned int v48 = 0xFFFF;
          }
          else {
            unsigned int v48 = v47 >> 8;
          }
          unsigned int v49 = (v43 + v44 + 1) >> 1;
          unsigned int v50 = (v45 + v46 + 1) >> 1;
          int v51 = 2 * v35;
          if (v42 < 2)
          {
            unsigned int v17 = v51 + v34 + v36;
            BOOL v18 = v17 >= 2;
            unsigned int v19 = (v17 + 2) >> 2;
            unsigned int v20 = v49 * v35 / v19;
            unsigned int v21 = v50 * v35 / v19;
            if (v18)
            {
              unsigned int v22 = v21;
            }
            else
            {
              unsigned int v20 = v49;
              unsigned int v22 = v50;
            }
            unsigned int v23 = v51 + v33 + v37;
            BOOL v18 = v23 >= 2;
            unsigned int v24 = v49 * v35 / ((v23 + 2) >> 2);
            if (!v18) {
              unsigned int v24 = v49;
            }
            if (v42) {
              int v25 = v24;
            }
            else {
              int v25 = v20;
            }
            if (v42) {
              signed int v26 = v50;
            }
            else {
              signed int v26 = v22;
            }
          }
          else
          {
            unsigned int v52 = v51 + v32 + v38;
            BOOL v18 = v52 >= 2;
            unsigned int v53 = (v52 + 2) >> 2;
            unsigned int v54 = v49 * v35 / v53;
            signed int v26 = v50 * v35 / v53;
            if (!v18)
            {
              unsigned int v54 = v49;
              signed int v26 = v50;
            }
            unsigned int v55 = v51 + v31 + v39;
            BOOL v18 = v55 >= 2;
            unsigned int v56 = v50 * v35 / ((v55 + 2) >> 2);
            if (v18) {
              unsigned int v57 = v56;
            }
            else {
              unsigned int v57 = v50;
            }
            if (v42 == 2) {
              int v25 = v54;
            }
            else {
              int v25 = v49;
            }
            if (v42 != 2) {
              signed int v26 = v57;
            }
          }
          int v27 = *(unsigned __int16 *)(v5 + 2 * v48);
          v8 += 4;
          int v28 = v25 & ~(v25 >> 31);
          if (v28 >= 0xFFFF) {
            int v28 = 0xFFFF;
          }
          int v29 = v26 & ~(v26 >> 31);
          if (v29 >= 0xFFFF) {
            int v29 = 0xFFFF;
          }
          int v30 = ((v36 + v34 + v32 + v38) * v160 + v161 * v35 + 2048) >> 12;
          *(_WORD *)(v7 + 2) = v30 + (((v35 - v30) * v27 + 0x8000) >> 16);
          *(_WORD *)(v7 + 2 * v15) = v49 + (((v28 - v49) * v27 + 0x8000) >> 16);
          v15 ^= 2uLL;
          *(_WORD *)(v7 + 2 * v15) = v50 + (((v29 - v50) * v27 + 0x8000) >> 16);
          v16 += 2;
          v7 += 6;
        }
        while (v16 < v156 - 3);
        uint64_t v14 = v158 + 2;
        unint64_t v3 = v150 - 3;
        uint64_t v7 = v159 + 2 * v152;
        uint64_t v8 = v157 + 4 * v154;
      }
      while (v158 + 2 < (unint64_t)(v150 - 3));
    }
  }
  if (v151 != 4)
  {
    uint64_t v74 = v155;
    unint64_t result = 4 * v154;
    if (v156)
    {
      unint64_t v75 = 0;
      int v76 = (_WORD *)(v153 + 2);
      unint64_t v77 = result + 4;
      uint64_t v78 = 6 * v154 + 2;
      unint64_t v79 = v149 + 6;
      double v80 = v155;
      do
      {
        if ((v75 & 2) != 0)
        {
          if (v156 - 2 == v75)
          {
            *(v76 - 1) = v80[2 * v154];
            _WORD *v76 = ((*(unsigned __int16 *)((char *)v80 + v79 - 8)
                   + 2 * *(unsigned __int16 *)((char *)v80 + v79 - 4)
                   + *(unsigned __int16 *)((char *)v80 + v78))
                  * v160
                  + v161 * *(unsigned __int16 *)((char *)v80 + v79 - 4)
                  + 2048) >> 12;
            LOWORD(v83) = *v80;
            goto LABEL_58;
          }
          *(v76 - 1) = (v80[2] + v80[2 * v154] + 1) >> 1;
          _WORD *v76 = ((*(unsigned __int16 *)((char *)v80 + v79 - 8)
                 + *(unsigned __int16 *)((char *)v80 + v79 - 4)
                 + *(unsigned __int16 *)((char *)v80 + v78)
                 + *(unsigned __int16 *)((char *)v80 + v79))
                * v160
                + v161 * *(unsigned __int16 *)((char *)v80 + v79 - 4)
                + 2048) >> 12;
          int v81 = *v80;
          int v82 = *(unsigned __int16 *)((char *)v80 + v77);
        }
        else
        {
          *(v76 - 1) = (*v80 + *(unsigned __int16 *)((char *)v80 + v77) + 1) >> 1;
          int v84 = *(unsigned __int16 *)((char *)v80 + v79 - 4);
          if (v75) {
            int v85 = *(unsigned __int16 *)((char *)v80 + v79 - 8)
          }
                + v84
                + *(unsigned __int16 *)((char *)v80 + v78)
                + *(unsigned __int16 *)((char *)v80 + v79);
          else {
            int v85 = *(unsigned __int16 *)((char *)v80 + v78) + 2 * v84 + *(unsigned __int16 *)((char *)v80 + v79);
          }
          _WORD *v76 = (v85 * v160 + v161 * v84 + 2048) >> 12;
          int v81 = v80[2];
          int v82 = v80[2 * v154];
        }
        unsigned int v83 = (v81 + v82 + 1) >> 1;
LABEL_58:
        v76[1] = v83;
        v75 += 2;
        v80 += 2;
        v76 += 3;
      }
      while (v75 < v156);
    }
    uint64_t v95 = 2 * v152;
    if (v3 >= 3)
    {
      uint64_t v96 = 6 * v154 + 6;
      uint64_t v97 = (_WORD *)(v95 + v153 + 2);
      uint64_t v98 = 10 * v154 + 2;
      unint64_t v99 = 2;
      int v100 = v155;
      int v101 = &v155[v149];
      do
      {
        int v102 = (unsigned __int16 *)((char *)v100 + result);
        if ((v99 & 2) != 0)
        {
          *(v97 - 1) = (v102[2] + v100[4 * v154] + 1) >> 1;
          *uint64_t v97 = ((*(unsigned __int16 *)((char *)v100 + v98)
                 + 2 * *(unsigned __int16 *)((char *)v100 + v96 - 4)
                 + *(unsigned __int16 *)((char *)v100 + v96))
                * v160
                + v161 * *(unsigned __int16 *)((char *)v100 + v96 - 4)
                + 2048) >> 12;
          unint64_t v103 = v149 + 2;
        }
        else
        {
          *(v97 - 1) = (*v102 + v100[4 * v154 + 2] + 1) >> 1;
          *uint64_t v97 = ((*(unsigned __int16 *)((char *)v100 + v98)
                 + 2 * *(unsigned __int16 *)((char *)v100 + v96 - 4)
                 + *(unsigned __int16 *)((char *)v100 + v96))
                * v160
                + v161 * *(unsigned __int16 *)((char *)v100 + v96 - 4)
                + 2048) >> 12;
          int v102 = v101 + 2;
          unint64_t v103 = v149;
        }
        v97[1] = (*v102 + *(unsigned __int16 *)((char *)&v100[v103] + result) + 1) >> 1;
        v99 += 2;
        v101 += v149;
        int v100 = (unsigned __int16 *)((char *)v100 + result);
        uint64_t v97 = (_WORD *)((char *)v97 + v95);
      }
      while (v99 < v3);
    }
    if (!v156)
    {
LABEL_126:
      if (v3 >= 3)
      {
        uint64_t v136 = 6;
        unsigned int v137 = (_WORD *)(v95 + 6 * ((v156 - 2) >> 1) + v153 + 4);
        uint64_t v138 = v156;
        uint64_t v139 = 2 * v156 + 12 * v154 - 4;
        uint64_t v140 = result + 2 * v156 - 4;
        uint64_t v141 = 2 * (v156 + v154) - 2;
        uint64_t v142 = 2 * v156 + 6 * v154 - 6;
        uint64_t v143 = 2 * v156 + 10 * v154 - 2;
        uint64_t v144 = 2 * v156 + 8 * v154 - 8;
        do
        {
          if (((v136 - 4) & 2) != 0)
          {
            *(v137 - 2) = (*(unsigned __int16 *)((char *)v74 + v139)
                         + 3 * *(unsigned __int16 *)((char *)v74 + v140)
                         + 2) >> 2;
            *(v137 - 1) = ((*(unsigned __int16 *)((char *)v74 + v141)
                          + *(unsigned __int16 *)((char *)v74 + v142 + 4)
                          + *(unsigned __int16 *)((char *)v74 + v142)
                          + *(unsigned __int16 *)((char *)v74 + v143))
                         * v160
                         + v161 * *(unsigned __int16 *)((char *)v74 + v142 + 4)
                         + 2048) >> 12;
            int v145 = v74[v138 - 2] + 3 * *(unsigned __int16 *)((char *)v74 + v144 + 4);
          }
          else
          {
            *(v137 - 2) = (v74[v138 - 2] + 3 * *(unsigned __int16 *)((char *)v74 + v144 + 4) + 2) >> 2;
            *(v137 - 1) = ((*(unsigned __int16 *)((char *)v74 + v141)
                          + *(unsigned __int16 *)((char *)v74 + v142 + 4)
                          + *(unsigned __int16 *)((char *)v74 + v142)
                          + *(unsigned __int16 *)((char *)v74 + v143))
                         * v160
                         + v161 * *(unsigned __int16 *)((char *)v74 + v142 + 4)
                         + 2048) >> 12;
            if (v150 == v136) {
              int v147 = *(unsigned __int16 *)((char *)v74 + v144);
            }
            else {
              int v147 = *(unsigned __int16 *)((char *)v74 + v139);
            }
            int v145 = v147 + 3 * *(unsigned __int16 *)((char *)v74 + v140);
          }
          *unsigned int v137 = (v145 + 2) >> 2;
          unint64_t v146 = v136 - 2;
          v136 += 2;
          unsigned int v137 = (_WORD *)((char *)v137 + v95);
          uint64_t v74 = (unsigned __int16 *)((char *)v74 + result);
        }
        while (v146 < v3);
      }
      return result;
    }
    unint64_t v116 = 0;
    int v117 = &v155[v154 * (v150 - 2)];
    int v118 = (_WORD *)(v153 + 2 * v152 * ((unint64_t)(v150 - 2) >> 1) + 4);
    int v119 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 6) + 2);
    int v120 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 2) + 2);
    int v121 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 8));
    while (1)
    {
      if ((v116 & 2) != 0)
      {
        int v127 = *v117;
        if (v156 - 2 == v116)
        {
          *(v118 - 2) = v127;
          *(v118 - 1) = ((v119[v116] + 2 * *v120 + *(v120 - 2)) * v160 + v161 * *v120 + 2048) >> 12;
          unsigned int v125 = (*(v117 - 2) + *v121 + 1) >> 1;
          goto LABEL_101;
        }
        *(v118 - 2) = (v127 + v117[4] + 1) >> 1;
        *(v118 - 1) = ((v119[v116] + *v120 + *(v120 - 2) + v120[2]) * v160 + v161 * *v120 + 2048) >> 12;
        int v124 = *(v117 - 2) + 3 * v117[2];
      }
      else
      {
        int v126 = 3 * v117[2];
        if (v116)
        {
          *(v118 - 2) = (*(v117 - 2) + v126 + 2) >> 2;
          *(v118 - 1) = ((v119[v116] + *v120 + *(v120 - 2) + v120[2]) * v160 + v161 * *v120 + 2048) >> 12;
          int v123 = 3 * *v117;
          if (v156 - 4 == v116) {
            int v122 = v121[2];
          }
          else {
            int v122 = v117[4];
          }
        }
        else
        {
          *(v118 - 2) = (*v121 + v126 + 2) >> 2;
          *(v118 - 1) = ((*v119 + 2 * *v120 + v120[2]) * v160 + v161 * *v120 + 2048) >> 12;
          int v122 = v117[4];
          int v123 = 3 * *v117;
        }
        int v124 = v122 + v123;
      }
      unsigned int v125 = (v124 + 2) >> 2;
LABEL_101:
      _WORD *v118 = v125;
      v118 += 3;
      v116 += 2;
      v117 += 2;
      v120 += 2;
      v121 += 2;
      if (v116 >= v156) {
        goto LABEL_126;
      }
    }
  }
  unint64_t result = 2 * v148;
  double v60 = v155;
  if (v156)
  {
    unint64_t v61 = 0;
    float v62 = (_WORD *)(v153 + 2);
    uint64_t v63 = (uint64_t)&v155[2 * v154 - 1];
    unsigned int v64 = &v155[3 * v154];
    unint64_t v65 = v149 + 4;
    int v66 = (char *)v155 + (result | 2);
    float v67 = v155;
    do
    {
      if ((v61 & 2) != 0)
      {
        *(v62 - 1) = (v67[1] + *(unsigned __int16 *)(v63 + 2 * v61) + 1) >> 1;
        int v72 = *(unsigned __int16 *)((char *)v67 + v149);
        int v73 = *(unsigned __int16 *)((char *)v67 + v65 - 8);
        if (v156 - 2 == v61) {
          *float v62 = ((v73 + 2 * v72 + v64[v61]) * v160 + v161 * v72 + 2048) >> 12;
        }
        else {
          *float v62 = ((v73 + v72 + *(unsigned __int16 *)((char *)v67 + v65) + v64[v61]) * v160
        }
                + v161 * v72
                + 2048) >> 12;
        int v70 = *(v67 - 1);
        int v71 = *(unsigned __int16 *)&v66[2 * v61];
      }
      else
      {
        int v69 = *(unsigned __int16 *)&v66[2 * v61];
        if (!v61)
        {
          *(v62 - 1) = (v67[3] + 3 * v69 + 2) >> 2;
          *float v62 = ((*(unsigned __int16 *)((char *)v67 + v149 + 4) + 2 * *(unsigned __int16 *)((char *)v67 + v149) + *v64)
                * v160
                + v161 * *(unsigned __int16 *)((char *)v67 + v149)
                + 2048) >> 12;
          unsigned int v68 = (v155[4 * v154 + 1] + 3 * v67[1] + 2) >> 2;
          goto LABEL_46;
        }
        *(v62 - 1) = (*(v67 - 1) + v69 + 1) >> 1;
        *float v62 = ((*(unsigned __int16 *)((char *)v67 + v149 - 4)
               + *(unsigned __int16 *)((char *)v67 + v149)
               + *(unsigned __int16 *)((char *)v67 + v149 + 4)
               + v64[v61])
              * v160
              + v161 * *(unsigned __int16 *)((char *)v67 + v149)
              + 2048) >> 12;
        int v70 = v67[1];
        int v71 = *(unsigned __int16 *)(v63 + 2 * v61);
      }
      unsigned int v68 = (v70 + v71 + 1) >> 1;
LABEL_46:
      v62[1] = v68;
      v61 += 2;
      v67 += 2;
      v62 += 3;
    }
    while (v61 < v156);
  }
  if (v3 >= 3)
  {
    uint64_t v86 = 0;
    uint64_t v87 = 2 * v154;
    int v88 = (_WORD *)(2 * v152 + v153 + 2);
    unint64_t result = 4 * v154 + (result | 2);
    uint64_t v89 = (12 * v154) | 2;
    uint64_t v90 = v155;
    do
    {
      if (((v86 + 2) & 2) != 0)
      {
        int v94 = v90[v87 + 1];
        if (v150 - 4 == v86)
        {
          *(v88 - 1) = v94;
          *int v88 = ((*(unsigned __int16 *)((char *)v90 + v149) + 2 * v90[3 * v154] + v90[3 * v154 + 2]) * v160
                + v161 * v90[3 * v154]
                + 2048) >> 12;
          unsigned int v92 = (v90[1] + v90[v87 + 3] + 1) >> 1;
          goto LABEL_70;
        }
        *(v88 - 1) = (*(unsigned __int16 *)((char *)v90 + v89) + 3 * v94 + 2) >> 2;
        *int v88 = ((*(unsigned __int16 *)((char *)v90 + v149) + v90[3 * v154] + v90[3 * v154 + 2] + v90[5 * v154]) * v160
              + v161 * v90[3 * v154]
              + 2048) >> 12;
        int v91 = v90[1] + 3 * *(unsigned __int16 *)((char *)v90 + result);
      }
      else
      {
        *(v88 - 1) = (v90[1] + 3 * *(unsigned __int16 *)((char *)v90 + result) + 2) >> 2;
        *int v88 = ((*(unsigned __int16 *)((char *)v90 + v149) + v90[3 * v154] + v90[3 * v154 + 2] + v90[5 * v154]) * v160
              + v161 * v90[3 * v154]
              + 2048) >> 12;
        unsigned int v92 = v90[v87 + 1];
        if (v150 - 6 == v86) {
          goto LABEL_70;
        }
        int v91 = *(unsigned __int16 *)((char *)v90 + v89) + 3 * v92;
      }
      unsigned int v92 = (v91 + 2) >> 2;
LABEL_70:
      unint64_t v93 = v86 + 4;
      v86 += 2;
      v88[1] = v92;
      v88 += v152;
      uint64_t v90 = (unsigned __int16 *)((char *)v90 + v87 * 2);
    }
    while (v93 < v3);
  }
  unint64_t v104 = v150 - 2;
  if (v156)
  {
    unint64_t result = 0;
    int v105 = (_WORD *)(v153 + 2 * v152 * (v104 >> 1) + 4);
    int v106 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 8) + 2);
    int v107 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 6));
    int v108 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 2));
    int v109 = &v155[v154 * v104 + 3];
    do
    {
      if ((result & 2) != 0)
      {
        int v115 = 3 * *(v109 - 4);
        if (v156 - 2 != result)
        {
          *(v105 - 2) = (*v109 + v115 + 2) >> 2;
          *(v105 - 1) = ((v107[result] + *v108 + *(v108 - 2) + v108[2]) * v160 + v161 * *v108 + 2048) >> 12;
          int v112 = 3 * *(v109 - 2);
          if (result == 2) {
            int v111 = *(v106 - 2);
          }
          else {
            int v111 = *(v109 - 6);
          }
          goto LABEL_86;
        }
        *(v105 - 2) = (*v106 + v115 + 2) >> 2;
        *(v105 - 1) = ((v107[result] + 2 * *v108 + *(v108 - 2)) * v160 + v161 * *v108 + 2048) >> 12;
        int v110 = *(v109 - 2);
        int v111 = *(v109 - 6);
      }
      else
      {
        int v114 = *(v109 - 2);
        if (!result)
        {
          *(v105 - 2) = v114;
          *(v105 - 1) = ((*v107 + 2 * *v108 + v108[2]) * v160 + v161 * *v108 + 2048) >> 12;
          unsigned int v113 = (*v106 + *v109 + 1) >> 1;
          goto LABEL_87;
        }
        *(v105 - 2) = (*(v109 - 6) + 3 * v114 + 2) >> 2;
        *(v105 - 1) = ((v107[result] + *v108 + *(v108 - 2) + v108[2]) * v160 + v161 * *v108 + 2048) >> 12;
        int v110 = *(v109 - 4);
        int v111 = *v109;
      }
      int v112 = 3 * v110;
LABEL_86:
      unsigned int v113 = (v111 + v112 + 2) >> 2;
LABEL_87:
      *int v105 = v113;
      v105 += 3;
      result += 2;
      v106 += 2;
      v108 += 2;
      v109 += 2;
    }
    while (result < v156);
  }
  if (v104 >= 3)
  {
    int v128 = (_WORD *)(2 * v152 + 6 * ((v156 - 2) >> 1) + v153 + 4);
    uint64_t v129 = 4 * v154 + 2 * v156 - 4;
    unint64_t result = 2;
    for (unint64_t i = 2; i < v104; i += 2)
    {
      if ((i & 2) != 0) {
        uint64_t v132 = -2;
      }
      else {
        uint64_t v132 = 2;
      }
      if ((i & 2) != 0) {
        uint64_t v133 = v148 | 1;
      }
      else {
        uint64_t v133 = v149 - 1;
      }
      if ((i & 2) != 0) {
        uint64_t v134 = 2;
      }
      else {
        uint64_t v134 = -2;
      }
      *(v128 - 2) = (*(unsigned __int16 *)((char *)v60 + v129 + v132)
                   + *(unsigned __int16 *)((char *)&v60[v133] + v129)
                   + 1) >> 1;
      uint64_t v130 = 2 * v156 + 6 * v154 - 8;
      *(v128 - 1) = ((v60[v156 - 2 + v154]
                    + *(unsigned __int16 *)((char *)v60 + v130 + 4)
                    + *(unsigned __int16 *)((char *)v60 + v130)
                    + v60[5 * v154 - 2 + v156])
                   * v160
                   + v161 * *(unsigned __int16 *)((char *)v60 + v130 + 4)
                   + 2048) >> 12;
      if ((i & 2) != 0) {
        uint64_t v135 = v149 - 1;
      }
      else {
        uint64_t v135 = v148 | 1;
      }
      _WORD *v128 = (*(unsigned __int16 *)((char *)v60 + v129 + v134)
             + *(unsigned __int16 *)((char *)&v60[v135] + v129)
             + 1) >> 1;
      v60 += 2 * v154;
      v128 += v152;
    }
  }
  return result;
}